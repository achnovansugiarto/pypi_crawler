{
  "info": {
    "author": "Saumalya Sarkar",
    "author_email": "saumalya75@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development"
    ],
    "description": "> # DATTR: Attribute interpretation of Dictionary Keys\n\nThis package was developed as support package to `mjonir` project. In `mjolnir` project, there are certain scope to read configuration json and traverse through then recursively. So I felt the need for a solution that will let us chain the dictionary keys with dot notation for ease-of-use. Hence I built one. I know there are already some libraries available which do similar stuff. But the purpose of this package was to support custom features like reading-writing to-fro json files, read strings and compile as dictionary directly etc.\n\n> ## Features\n\nAs already mentioned, main feature of the package is to support attribute style key handling of python dictionaries. It will also continue to support interpolation. Following are some example:\n\n### 1. Convert a dictionary to dattr:\n\nUser needs to create an object of the `Dictattr` class to get the features, e.g.\n\n    => import dattr\n\n    => d = {'id' : 1, 'name' : {'first' : 'saumalya', 'last': 'sarkar'}, 'student' : True}\n\n    => new_d = dattr.DictAttr(d)\n\n    => print(new_d.id)\n\n    1\n\n    => print(new_d.name.first)\n\n    2\n\nLooks fun, isn't it.\n\n### 2. Create dattr directly from json data:\n\nThe same object can be created by directly reading JSON data, e.g.\n\n    => import dattr\n\n    => dattr_obj = dattr.DictAttr.from_string('{\"id\" : 1, \"name\" : {\"first\" : \"saumalya\", \"last\": \"sarkar\"}, \"student\" : true}')\n\n    => dattr_obj.student == Ture\n\n    True\n\n\n__*N.B.*__ Use class method `from_json_file` to create object directly from JSON files.\n\n### 3. Access values using interpolation or dot notation:\n\nThe choice is mostly user's (check caveat section). User can choose between using interpolation or dot notation while accessing values using keys or assigning values to certain key. e.g.\n\n    => import dattr\n\n    => dattr_obj = dattr.DictAttr({\"id\" : 1, \"name\" : {\"first\" : \"saumalya\", \"last\": \"sarkar\"}, \"student\" : true})\n\n    => print(dattr_obj.id)\n\n    1\n\n    => print(dattr_obj.name.first)\n\n    saumalya\n\n    ...\n\n    => print(dattr_obj['id'])\n\n    1\n\n    => print(dattr_obj['name']['first'])\n\n    saumalya\n\n### 4. Assigning values using interpolation or dot notation:\n\nThe same logic holds while assigning values to, e.g.\n\n    => import dattr\n\n    => dattr_obj = dattr.DictAttr({\"id\" : 1, \"name\" : {\"first\" : \"saumalya\", \"last\": \"sarkar\"}, \"student\" : true})\n\n    => dattr_obj.id = 2\n\n    => print(dattr_obj.id)\n\n    2\n\n    => dattr_obj.name.middle = \"atanu\"\n\n    => print(dattr_obj.name.middle)\n\n    atanu\n\n    ...\n\n    => dattr_obj['id'] = 3\n\n    => print(dattr_obj['id'])\n\n    3\n\n    => dattr_obj['name']['middle'] = \"na\"\n\n    => print(dattr_obj['name']['middle'])\n\n    na\n\n\n### 5. All existing dictionary APIs will work:\n\nAll dictionary methods and attributes will be available, e.g.:\n\n    => import dattr\n\n    => dattr_obj = dattr.DictAttr({\"id\" : 1, \"name\" : {\"first\" : \"saumalya\", \"last\": \"sarkar\"}, \"student\" : true})\n\n    => dattr_obj.keys()\n\n    dict_keys(['id', 'name', 'student'])\n\n\nThat will be all. Rest is pretty similar to existing dictionary objects.\n\n> ## Caveats\n\n### 1. Key matches object attribute issue:\n\nIf any key matches any object attributes, e.g. if data has a key `keys`, then it is mandatory to use interpolation style, or else exceptions may appear.\n\n### 2. Built-in method support:\n\nSome python buil-in methods that operate on dictionaries, may not work on this object. As I did not have such requirements in `mjolnir` project, I skipped that part. Feel free to form the repository and code along.\n\n### 3. Type integrity not maintained:\n\nPython built-in function will always return `<class 'dattr.main.DictAttr'>` as output of `type(dattr_obj)`, irrespective of the actual type of the data.\n\nAlright then, If you can live with the Caveats, feel free to use the package. PYPI details will be added once it is converted. For now cloning is only option. If anyone feels the caveats are a little too much, please notify me. I try to add the required features. Or else anyone is welcome to fork and contribute.\n\n*Thanks, Saumalya Out!*",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/mjolnir-repo/dattr/archive/v1.5.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mjolnir-repo/dattr",
    "keywords": "python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dattr",
    "package_url": "https://pypi.org/project/dattr/",
    "platform": "",
    "project_url": "https://pypi.org/project/dattr/",
    "project_urls": {
      "Download": "https://github.com/mjolnir-repo/dattr/archive/v1.5.0.tar.gz",
      "Homepage": "https://github.com/mjolnir-repo/dattr"
    },
    "release_url": "https://pypi.org/project/dattr/1.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Use the package to use python dictionary keys as attributes using dot(.) notation.",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7473755,
  "releases": {
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1449548f21edbb8db89e546f5fd0338f556cb927f9c88ebb8cb61a21dccb6039",
          "md5": "3bf592b8b0079f184f0a23a091db1921",
          "sha256": "40f07c1b7f21d40c0da985dde3a4ec0dbafede93cf8f3e16a5beb8a4f2d35eb4"
        },
        "downloads": -1,
        "filename": "dattr-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3bf592b8b0079f184f0a23a091db1921",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4751,
        "upload_time": "2020-06-14T14:49:26",
        "upload_time_iso_8601": "2020-06-14T14:49:26.198008Z",
        "url": "https://files.pythonhosted.org/packages/14/49/548f21edbb8db89e546f5fd0338f556cb927f9c88ebb8cb61a21dccb6039/dattr-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1449548f21edbb8db89e546f5fd0338f556cb927f9c88ebb8cb61a21dccb6039",
        "md5": "3bf592b8b0079f184f0a23a091db1921",
        "sha256": "40f07c1b7f21d40c0da985dde3a4ec0dbafede93cf8f3e16a5beb8a4f2d35eb4"
      },
      "downloads": -1,
      "filename": "dattr-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3bf592b8b0079f184f0a23a091db1921",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4751,
      "upload_time": "2020-06-14T14:49:26",
      "upload_time_iso_8601": "2020-06-14T14:49:26.198008Z",
      "url": "https://files.pythonhosted.org/packages/14/49/548f21edbb8db89e546f5fd0338f556cb927f9c88ebb8cb61a21dccb6039/dattr-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}