{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "![SQErzo logo](https://raw.githubusercontent.com/BBVA/sqerzo/master/images/logo-250x250.png)\n\n## `SQErzo` Tiny ORM for Graph databases\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [What is SQErzo](#what-is-sqerzo)\n- [Which databases are supported](#which-databases-are-supported)\n- [Why use SQErzo?](#why-use-sqerzo)\n- [Project status](#project-status)\n- [Install](#install)\n- [Usage examples](#usage-examples)\n  - [Run databases uses Docker.](#run-databases-uses-docker)\n    - [Start Neo4j](#start-neo4j)\n    - [Start RedisGraph](#start-redisgraph)\n  - [Simple usage](#simple-usage)\n  - [Recovering database nodes by their ID](#recovering-database-nodes-by-their-id)\n  - [Recovering database nodes by their properties](#recovering-database-nodes-by-their-properties)\n  - [Raw queries](#raw-queries)\n  - [Transactions](#transactions)\n  - [More complex example: Load mails to a Graph](#more-complex-example-load-mails-to-a-graph)\n- [ChangeLog](#changelog)\n  - [Release 0.1.2](#release-012)\n    - [Core](#core)\n    - [Other](#other)\n  - [Release 0.1.1](#release-011)\n  - [Release 0.1.0](#release-010)\n- [TODO](#todo)\n- [References](#references)\n- [Authors](#authors)\n- [Contributions](#contributions)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## What is SQErzo\n\n`SQErzo` is simple and tiny ORM ([Object-Relational Mapping](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping)) for graph databases for Python developers. \n\nIt's compatible with databases that supports [Open Cypher language](https://www.opencypher.org/).\n\n## Which databases are supported\n\n| Database | Status |\n| --- | --- |\n| Neo4j | Supported |\n| Redis Graph | Supported |\n| Arango DB | Looking for contributor |\n| AWS Neptune| Looking for contributor |\n| Gremlin | Looking for contributor |\n\n## Why use SQErzo?\n\n`SQErzo` intermediates between the graph database and your application logic in a database agnostic way.  As such, `SQErzo` abstracts the differences between the different databases. For examples:\n\n- RedisGraph doesn't support Date times or CONSTRAINTS, `SQErzo` does the magic to hide that.\n- Neo4j need different channels for writing than for read. `SQErzo` does the magic to hide that.\n- `SQErzo` integrates a in memory cache to avoid queries to Graph DB and try to improve the performance.\n- Every database uses their own Node/Edge identification system. You need to manage and understand then to realize when a node already exits in Graph DB. `SQErzo` do this for you. It doesn't matter the Graph DB engine you use.\n- `SQErzo` was made to avoid you to write useless code. You can create and manage Nodes and Edges in a few lines of code without know Graph DB internals.\n- `SQErzo` supports Graph DB bases on Open cypher language (a Graph databases query language). You don't need to learn them to perform day a day operations. \n\n## Project status\n\nProject is in a very early stage. If you want to use them, have in count that. \n\n## Install\n\nInstall is easy. Only run:\n\n```shell\n> pip install sqerzo\n```\n\n## Usage examples\n\n### Run databases uses Docker.\n\n#### Start Neo4j\n\n```shell\n> docker run -d -p7474:7474 -p7687:7687 -e NEO4J_AUTH=neo4j/s3cr3t neo4j\n```\n\n#### Start RedisGraph\n\n```shell\n> docker run -p 7000:6379 -d --rm redislabs/redisgraph\n```\n\n### Simple usage\n\nCreate some nodes and setup database in both databases:\n\n- Neo4j\n- RedisGraph\n\nWithout the need to change any code:\n\n```python\nfrom dataclasses import dataclass\n\nfrom sqerzo import GraphEdge, GraphNode, SQErzoGraph\n\nclass MeetEdge(GraphEdge):\n    pass\n\n@dataclass\nclass UserNode(GraphNode):\n    name: str = None\n\n\ndef create_graph(connection_string: str):\n    gh = SQErzoGraph(connection_string)\n    gh.truncate()  # Drop database\n\n    u1 = UserNode(name=f\"UName-1\")\n    gh.save(u1)\n\n    d1 = UserNode(name=f\"DName-2\")\n    gh.save(d1)\n\n    u1_meet_g1 = MeetEdge(\n        source=u1,\n        destination=d1\n    )\n    gh.save(u1_meet_g1)\n\n\nif __name__ == '__main__':\n    create_graph(\"redis://127.0.0.1:7000/?graph=email\")   \n    create_graph(\"neo4j://neo4j:s3cr3t@127.0.0.1:7687/?graph=email\")\n```\n\nThis is the result database in Node4j:\n\n![user_meet_neo4j logo](https://raw.githubusercontent.com/BBVA/sqerzo/master/images/examples/user_meet_neo4j.png)\n\nThis is the result database in RedisGrap:\n\n![user_meet_redisgraph logo](https://raw.githubusercontent.com/BBVA/sqerzo/master/images/examples/user_meet_redisgraph.png)\n\n\n### Recovering database nodes by their ID\n\n```python\nfrom dataclasses import dataclass\n\nfrom sqerzo import GraphEdge, GraphNode, SQErzoGraph\nfrom sqerzo.exceptions import SQErzoElementExistException\n\n@dataclass\nclass UserNode(GraphNode):\n    name: str = None\n\ndef create_graph(connection_string: str):\n    gh = SQErzoGraph(connection_string)\n    gh.truncate()  # Drop database\n\n    user = UserNode(name=f\"UName-{n}\")\n    gh.save(user)\n\n    # First argument: node ID we want to recover\n    # Second argument: node class in which we want to map the result\n    recovered_user = gh.get_node_by_id(user.id, UserNode)\n```\n\n### Recovering database nodes by their properties\n\n**Getting one node:**\n\n```python\nfrom dataclasses import dataclass\n\nfrom sqerzo import GraphEdge, GraphNode, SQErzoGraph\n\n@dataclass\nclass UserNode(GraphNode):\n    __keys__ = [\"name\"]\n\n    name: str = None\n\ndef create_graph(connection_string: str):\n    gh = SQErzoGraph(connection_string)\n    gh.truncate()  # Drop database\n\n    u1 = UserNode(name=\"Eustaquio\")\n    gh.save(u1)\n    u2 = UserNode(name=\"Guachinche\")\n    gh.save(u2)\n\n    # First argument: node ID we want to recover\n    # Second argument: node class in which we want to map the result\n    node = gh.fetch_one(UserNode, name=\"Eustaquio\")\n\nif __name__ == '__main__':\n  create_graph(\"redis://127.0.0.1:7000/?graph=email\")\n  create_graph(\"neo4j://neo4j:s3cr3t@127.0.0.1:7687/?graph=email\")\n```\n\n**Getting multiple nodes:**\n\n```python\nfrom dataclasses import dataclass\n\nfrom sqerzo import GraphEdge, GraphNode, SQErzoGraph\n\n@dataclass\nclass UserNode(GraphNode):\n    name: str = None\n    age: int = None\n\ndef create_graph(connection_string: str):\n    gh = SQErzoGraph(connection_string)\n    gh.truncate()  # Drop database\n\n    u1 = UserNode(name=\"Eustaquio\", age=22)\n    gh.save(u1)\n    u2 = UserNode(name=\"Guachinche\", age=22)\n    gh.save(u2)\n\n    # First argument: node ID we want to recover\n    # Second argument: node class in which we want to map the result\n    for n in gh.fetch_many(UserNode, age=22):\n        print(n)\n\nif __name__ == '__main__':\n  create_graph(\"redis://127.0.0.1:7000/?graph=email\")\n  create_graph(\"neo4j://neo4j:s3cr3t@127.0.0.1:7687/?graph=email\")\n```\n\n```python\nfrom dataclasses import dataclass\n\nfrom sqerzo import GraphEdge, GraphNode, SQErzoGraph\nfrom sqerzo.exceptions import SQErzoElementExistException\n\n@dataclass\nclass UserNode(GraphNode):\n    name: str = None\n\ndef create_graph(connection_string: str):\n    gh = SQErzoGraph(connection_string)\n    gh.truncate()  # Drop database\n\n    user = UserNode(name=f\"UName-{n}\")\n    gh.save(user)\n\n    #\n    # First argument: node ID we want to recover\n    # Second argument: node class in which we want to map the result\n    recovered_user = gh.get_node_by_id(user.id, UserNode)\n\nif __name__ == '__main__':\n  create_graph(\"redis://127.0.0.1:7000/?graph=email\")\n  create_graph(\"neo4j://neo4j:s3cr3t@127.0.0.1:7687/?graph=email\")\n```\n\n\n### Raw queries\n\n`SQErzo` try to be simple. So, if you want to do complex queries, you'll write them in the DB Engine language. \n\nThis example explains how to perform a query in Open Cypher language and map the results to Python Classes:\n\n```python\nfrom dataclasses import dataclass\n\nfrom sqerzo import GraphEdge, GraphNode, SQErzoGraph\n\nclass MeetEdge(GraphEdge):\n    pass\n\nclass WorksWithEdge(GraphEdge):\n    pass\n\n@dataclass\nclass UserNode(GraphNode):\n    __keys__ = \"email\"\n\n    name: str = None\n    email: str = None\n\n\ndef create_graph(connection_string: str, nodes_count = 500):\n    gh = SQErzoGraph(connection_string)\n    gh.truncate()  # Drop database\n\n    #\n    # Add some data and relations: User1 -[meet]-> User 2\n    #\n    with gh.transaction() as tx:\n\n        for n in range(nodes_count):\n            u1_name = f\"uname{n}\"\n            d1_name = f\"dname{n}\"\n\n            u1 = UserNode(name=u1_name, email=f\"{u1_name}@{u1_name}.com\")\n            d1 = UserNode(name=d1_name, email=f\"{d1_name}@{d1_name}.com\")\n\n            tx.add(u1)\n            tx.add(d1)\n\n            u2_meet_u1 = MeetEdge(\n                source=u1,\n                destination=d1\n            )\n            u1_meet_u2 = MeetEdge(\n                source=d1,\n                destination=u1\n            )\n            tx.add(u1_meet_u2)\n            tx.add(u2_meet_u1)\n\n    #\n    # HERE STARTS THE QUERY\n    #\n\n    # Execute will return a list of lists: [ \n    #   [UserNode(\"u1\"), UserNode(\"u2\")], \n    #   [UserNode(\"u1\"), UserNode(\"u2\")], \n    #   ... \n    # ]\n    q = gh.Query.raw(\n        \"match (u1:User)-[:Meet]->(u2:User) return u1, u2\"\n    ).execute(map_to={\"u1\": UserNode, \"u2\": UserNode})\n\n    print(q)\n\nif __name__ == '__main__':\n  count = 1000\n  create_graph(\"redis://127.0.0.1:7000/?graph=email\", nodes_count=count)\n  create_graph(\"neo4j://neo4j:s3cr3t@127.0.0.1:7687/?graph=email\", nodes_count=count)\n```\n\n\n### Transactions\n\nTransactions are useful if you need add a lot of data. You add nodes and edges to a transaction. When they finish then perform the insertions to the database in a very efficient way:\n\n```python\nfrom dataclasses import dataclass\n\nfrom sqerzo import GraphEdge, GraphNode, SQErzoGraph\n\nclass MeetEdge(GraphEdge):\n    pass\n\n@dataclass\nclass UserNode(GraphNode):\n    __keys__ = [\"name\"]\n\n    name: str = None\n\ndef create_graph(connection_string: str):\n    gh = SQErzoGraph(connection_string)\n    gh.truncate()  # Drop database\n\n    with gh.transaction() as tx:  # Transaction starts here\n\n        for n in range(500):  # Inserts 1000 nodes (500 * 2) and 500 relations\n            u1 = UserNode(name=f\"UName-{n}\")\n            d1 = UserNode(name=f\"DName-{n}\")\n\n            tx.add(u1)\n            tx.add(d1)\n\n            u1_meet_g1 = MeetEdge(\n                source=u1,\n                destination=d1\n            )\n            tx.add(u1_meet_g1)\n\n\nif __name__ == '__main__':\n    print(\"Redis...\")\n    create_graph(\"redis://127.0.0.1:7000/?graph=email\")\n    print(\"Neo4j...\")\n    create_graph(\"neo4j://neo4j:s3cr3t@127.0.0.1:7687/?graph=email\")\n```\n\n### More complex example: Load mails to a Graph\n\nIf you need a more complex example, you can find in it [examples/email_graph.py](https://github.com/BBVA/sqerzo/blob/master/examples/email_graph.py).\n\nAt this example we load a random generated mail inbox (generation script is also available) into a Graph Database following this [Neo4j Blog Post](https://neo4j.com/blog/data-modeling-pitfalls/) suggestions.\n\n![Fraud graph db](https://dist.neo4j.com/wp-content/uploads/20180730162521/corrected-fraud-detection-email-data-model-1024x994.png)\n\n## ChangeLog\n\n### Release 0.1.2\n\n#### Core\n\n- [X] fixed - Node/Edge id generation when not explicit identity field was provided.\n- [X] fixed - `get_node_by_id(...)` methods that raises execution.\n- [X] fixed - Improved error control.\n- [X] fixed - `fetch_nodes(...)` method, that raises when a query returns more than 1 result.\n- [X] Improved - `fetch_many(...)` and `fetch_one(...)`.\n\n#### Other\n\n- Added new examples in `examples` folder.\n- Added new examples in README. \n- Updated examples for new SQErzo API.\n- Updated docker-compose with some fixes.\n\n### Release 0.1.1\n\n- [X] Added queries support for raw queries in DB engine language\n\n### Release 0.1.0\n\n- [X] Improved speed at insertion by 100x\n- [X] Add support for `UNIQUE` create_constraints_nodes\n- [X] Add support for `INDEXES` create_constraints_nodes\n- [X] Add support for raw Cypher query\n- [x] Errors, issues, new features and something else\n- [x] Complete refactor to easy add new backends\n- [x] Complete refactor to easy add new backends\n- [x] Add new methods: fetch_many, fetch_one, raw_query, save, update & transaction\n- [x] Add new examples\n- [x] Improved the way to build the Node to avoid waste memory.\n\n## TODO\n\n- [ ] Implement update operations\n- [ ] Improve documentation\n- [ ] Improve cypher query to avoid query raises when a transaction insert a duplicate node\n- [ ] Add support for Arango DB\n- [ ] Add support for AWS Neptune\n- [ ] Add support for Gremlin\n- [ ] Add support for dates to RedisGraph using transformation of dates to numbers\n- [ ] Implementation of Query builder. Add some method to `Query` builder class. Here some possible examples:\n\n```python\nfrom dataclasses import dataclass\n\nfrom sqerzo import GraphEdge, GraphNode, SQErzoGraph\n\n\nclass MeetEdge(GraphEdge):\n    pass\n\nclass WorksWithEdge(GraphEdge):\n    pass\n\n@dataclass\nclass UserNode(GraphNode):\n    __keys__ = \"email\"\n\n    name: str = None\n    email: str = None\n\n@dataclass\nclass OtherUserNode(GraphNode):\n    __keys__ = \"email\"\n\n    name: str = None\n    email: str = None\n\n\ngh = SQErzoGraph(\"redis://\")\ngh.Q().from(Node1).to(node2).execute()\ngh.Q().from(name=\"me\").to(UserNode).execute()\ngh.Q().from(name=\"me\", email=\"me@me.com\").to((UserNode, \"User\")).execute()\ngh.Q().from(name=\"me\").across((WorksWithEdge, \"WorksWith\")).to((UserNode, \"OtherUser\")).execute()\ngh.Q().to((UserNode, \"OtherUser\")).execute()\ngh.Q().from(OtherUserNode).execute()\ngh.Q().from(UserNode).execute()\n```\n\n## References\n\nI tried to use good practices for building `SQErzo`. Some references I used:\n\n- https://medium.com/neo4j/cypher-query-optimisations-fe0539ce2e5c\n- https://hub.packtpub.com/advanced-cypher-tricks/\n- https://gist.github.com/jexp/caeb53acfe8a649fecade4417fb8876a\n\n## Authors\n\nSQErzo is being developed by BBVA-Labs Security team members.\n\n## Contributions\n\nContributions are of course welcome. See [CONTRIBUTING](https://github.com/BBVA/sqerzo/blob/master/CONSTRIBUTING.rst) or skim existing tickets to see where you could help out.\n\n## License\n\nSQErzo is Open Source Software and available under the [Apache 2 license](https://github.com/BBVA/sqerzo/blob/master/LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BBVA/sqerzo",
    "keywords": "",
    "license": "License :: OSI Approved :: Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqerzo",
    "package_url": "https://pypi.org/project/sqerzo/",
    "platform": "",
    "project_url": "https://pypi.org/project/sqerzo/",
    "project_urls": {
      "Homepage": "https://github.com/BBVA/sqerzo"
    },
    "release_url": "https://pypi.org/project/sqerzo/0.1.3.post2/",
    "requires_dist": [
      "neo4j",
      "redisgraph"
    ],
    "requires_python": ">=3.8",
    "summary": "Tiny ORM for graph databases",
    "version": "0.1.3.post2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9263755,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "575ffe685d2b63f8da64213cab56e9765fcc3666feec61471d6fccf4c0a322ac",
          "md5": "59b4f1e7af8592a4c1cee08557468680",
          "sha256": "30605812076d82e106e962ef97a4cb91b9af0fedbafa22533092093392fab204"
        },
        "downloads": -1,
        "filename": "sqerzo-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59b4f1e7af8592a4c1cee08557468680",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13116,
        "upload_time": "2020-12-11T15:02:43",
        "upload_time_iso_8601": "2020-12-11T15:02:43.222925Z",
        "url": "https://files.pythonhosted.org/packages/57/5f/fe685d2b63f8da64213cab56e9765fcc3666feec61471d6fccf4c0a322ac/sqerzo-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9531d0e683d2eca6c84dc83cce6440efe4ced8c3121e20b042f9a9b6a9bee6d3",
          "md5": "6c36ba0c35beb0d9247e9c928641bc05",
          "sha256": "22497815838f1f36b1cbe65c367984f8e29084f4f4dce6323c4581f8c5cae2f8"
        },
        "downloads": -1,
        "filename": "sqerzo-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c36ba0c35beb0d9247e9c928641bc05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10448,
        "upload_time": "2020-12-11T15:02:44",
        "upload_time_iso_8601": "2020-12-11T15:02:44.256525Z",
        "url": "https://files.pythonhosted.org/packages/95/31/d0e683d2eca6c84dc83cce6440efe4ced8c3121e20b042f9a9b6a9bee6d3/sqerzo-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1817ae9894d01deab6290d55932460a9d5c477356002eb481c12e687f5e83c9c",
          "md5": "e888f60bac77809c7bf6d803c8f1d862",
          "sha256": "59b4dd7a55bcecfed8c3ed38099e1d75b3d8664760224f76aa45af483414c7e5"
        },
        "downloads": -1,
        "filename": "sqerzo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e888f60bac77809c7bf6d803c8f1d862",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 18292,
        "upload_time": "2020-12-17T15:57:56",
        "upload_time_iso_8601": "2020-12-17T15:57:56.842120Z",
        "url": "https://files.pythonhosted.org/packages/18/17/ae9894d01deab6290d55932460a9d5c477356002eb481c12e687f5e83c9c/sqerzo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a048b577a33f9276680a92db86aadd715ef81ef7e780c9d451c20d406e7ec046",
          "md5": "dc2b4a739bc8a97dee00aa8b85feb21d",
          "sha256": "f81c72283d92bd1f1ea854ccdeed6916187d3b0cb853295fed8d991aae25c677"
        },
        "downloads": -1,
        "filename": "sqerzo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc2b4a739bc8a97dee00aa8b85feb21d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14283,
        "upload_time": "2020-12-17T15:57:57",
        "upload_time_iso_8601": "2020-12-17T15:57:57.742822Z",
        "url": "https://files.pythonhosted.org/packages/a0/48/b577a33f9276680a92db86aadd715ef81ef7e780c9d451c20d406e7ec046/sqerzo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef4b0337f581cd687297aa4ac8efe8da39ce2c8a64d6232fb18bd1ee6b47d502",
          "md5": "9382f46ac1526188c436bcae66f7ed52",
          "sha256": "faf18192b1515ec8d701b830a724b9ef9a8687fbc0b5506e9b64bceeea10a48b"
        },
        "downloads": -1,
        "filename": "sqerzo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9382f46ac1526188c436bcae66f7ed52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17565,
        "upload_time": "2020-12-18T16:13:47",
        "upload_time_iso_8601": "2020-12-18T16:13:47.163515Z",
        "url": "https://files.pythonhosted.org/packages/ef/4b/0337f581cd687297aa4ac8efe8da39ce2c8a64d6232fb18bd1ee6b47d502/sqerzo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db4e6085be6ede172fb15f489dbdb671071de71fc53ae9a4926c6cd91ec36f64",
          "md5": "8006d8113fcaaf8cb094dde7b94fd923",
          "sha256": "9056a7813d4ad89f5545f1865a8e86b6b114a619dc8c611c647d0142b1d37de5"
        },
        "downloads": -1,
        "filename": "sqerzo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8006d8113fcaaf8cb094dde7b94fd923",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14427,
        "upload_time": "2020-12-18T16:13:47",
        "upload_time_iso_8601": "2020-12-18T16:13:47.940071Z",
        "url": "https://files.pythonhosted.org/packages/db/4e/6085be6ede172fb15f489dbdb671071de71fc53ae9a4926c6cd91ec36f64/sqerzo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b644082c4543306cb702ee96c0580f7fe4513a307f07874a787384dcfccab283",
          "md5": "27ac9463a600780e08d35e68648c086d",
          "sha256": "99761d8f1a8955238bcc4ca37f355f9d8792bd4619787e7852b9c1ce48a6e894"
        },
        "downloads": -1,
        "filename": "sqerzo-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27ac9463a600780e08d35e68648c086d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 20855,
        "upload_time": "2021-01-29T10:24:41",
        "upload_time_iso_8601": "2021-01-29T10:24:41.519953Z",
        "url": "https://files.pythonhosted.org/packages/b6/44/082c4543306cb702ee96c0580f7fe4513a307f07874a787384dcfccab283/sqerzo-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "786363c659a8075b1b1adf2764c062dfc54fe1a9b0fa91bef55f6eeffec765cc",
          "md5": "8c9271aee0f3e00d2ab8af5d5324febb",
          "sha256": "41d9078bcf6e2cb45e67de75ba0fb526c24d6956a68fae8bc0324863d98e3b19"
        },
        "downloads": -1,
        "filename": "sqerzo-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8c9271aee0f3e00d2ab8af5d5324febb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15325,
        "upload_time": "2021-01-29T10:24:42",
        "upload_time_iso_8601": "2021-01-29T10:24:42.445537Z",
        "url": "https://files.pythonhosted.org/packages/78/63/63c659a8075b1b1adf2764c062dfc54fe1a9b0fa91bef55f6eeffec765cc/sqerzo-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "517927cd868d060fed51e7304b6f3ad0a9d6305d671053bafc01f89f3ca8764f",
          "md5": "99d8b776aa219bfc431b3f82a615813c",
          "sha256": "d9fc2a20449818d3a4383b2a9a9cf2a27f4f5bc10843b540eb725f8bb6a1e2c7"
        },
        "downloads": -1,
        "filename": "sqerzo-0.1.3.post2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99d8b776aa219bfc431b3f82a615813c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25015,
        "upload_time": "2021-01-29T10:32:30",
        "upload_time_iso_8601": "2021-01-29T10:32:30.776722Z",
        "url": "https://files.pythonhosted.org/packages/51/79/27cd868d060fed51e7304b6f3ad0a9d6305d671053bafc01f89f3ca8764f/sqerzo-0.1.3.post2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d87e04c56ee2906ebf25fd1014a710ba9b4498757da825cb50bf58fbc8bc204e",
          "md5": "b136a05c7332ac7cba9862245d4649fd",
          "sha256": "0e50c681707d7b1b996c9034921118f8b135b1f6930d5d1da8a9ed8ef69c24fa"
        },
        "downloads": -1,
        "filename": "sqerzo-0.1.3.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "b136a05c7332ac7cba9862245d4649fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20534,
        "upload_time": "2021-01-29T10:32:31",
        "upload_time_iso_8601": "2021-01-29T10:32:31.797347Z",
        "url": "https://files.pythonhosted.org/packages/d8/7e/04c56ee2906ebf25fd1014a710ba9b4498757da825cb50bf58fbc8bc204e/sqerzo-0.1.3.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "517927cd868d060fed51e7304b6f3ad0a9d6305d671053bafc01f89f3ca8764f",
        "md5": "99d8b776aa219bfc431b3f82a615813c",
        "sha256": "d9fc2a20449818d3a4383b2a9a9cf2a27f4f5bc10843b540eb725f8bb6a1e2c7"
      },
      "downloads": -1,
      "filename": "sqerzo-0.1.3.post2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "99d8b776aa219bfc431b3f82a615813c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 25015,
      "upload_time": "2021-01-29T10:32:30",
      "upload_time_iso_8601": "2021-01-29T10:32:30.776722Z",
      "url": "https://files.pythonhosted.org/packages/51/79/27cd868d060fed51e7304b6f3ad0a9d6305d671053bafc01f89f3ca8764f/sqerzo-0.1.3.post2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d87e04c56ee2906ebf25fd1014a710ba9b4498757da825cb50bf58fbc8bc204e",
        "md5": "b136a05c7332ac7cba9862245d4649fd",
        "sha256": "0e50c681707d7b1b996c9034921118f8b135b1f6930d5d1da8a9ed8ef69c24fa"
      },
      "downloads": -1,
      "filename": "sqerzo-0.1.3.post2.tar.gz",
      "has_sig": false,
      "md5_digest": "b136a05c7332ac7cba9862245d4649fd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 20534,
      "upload_time": "2021-01-29T10:32:31",
      "upload_time_iso_8601": "2021-01-29T10:32:31.797347Z",
      "url": "https://files.pythonhosted.org/packages/d8/7e/04c56ee2906ebf25fd1014a710ba9b4498757da825cb50bf58fbc8bc204e/sqerzo-0.1.3.post2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}