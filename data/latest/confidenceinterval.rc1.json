{
  "info": {
    "author": "Jacob Gildenblat",
    "author_email": "jacob.gildenblat@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# The long missing python library for confidence intervals\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![Build Status](https://github.com/jacobgil/confidenceinterval/workflows/Tests/badge.svg)\n[![Downloads](https://static.pepy.tech/personalized-badge/confidenceinterval?period=month&units=international_system&left_color=black&right_color=brightgreen&left_text=Monthly%20Downloads)](https://pepy.tech/project/confidenceintervals)\n\n`pip install confidenceinterval`\n\nThis is a package that computes common machine learning metrics like F1, and returns their confidence intervals.\n\n⭐ Very easy to use, with the standard scikit-learn naming convention and interface:\n\ne.g roc_auc_score(y_true, y_pred).\n\n⭐ Support for many metrics, with modern confidence interval methods.\n\n⭐ Support for both analytical computation of the confidence intervals, and bootstrapping.\n\n⭐ East to use interface to compute confidence intervals on new metrics that don't appear here, with bootstrapping.\n\n## Getting started\n\n```python\nfrom confidenceinterval import roc_auc_score\nauc, ci = roc_auc_score(y_true, y_pred, confidence_level=0.95)\nauc, ci = roc_auc_score(y_true, y_pred, confidence_level=0.95, method='bootstrap_bca')\n```\n\nBy default all the methods return an analytical computation of the confidence interval (CI).\nFor a bootstrap computation of the CI, for any of the methods belonw, you can just specify method='bootstrap_bca', or method='bootstrap_percentile' or method='bootstrap_basic'.\n\n## Supported methods\n\n### Get a confidence interval for any external metric\nWith the bootstrap_ci method, you can get the CI for a an external metric method.\nAs an example, lets get the CI for the balanced accuracy metric. It's not implemented yet in this package,\nbut we can easily get the CI for it:\n\n```python\nfrom confidenceinterval.bootstrap import bootstrap_ci\n# You can specify a random generator for reproducability, or pass None\nrandom_generator = np.random.default_rng()\nbootstrap_ci(y_true=y_true,\n             y_pred=y_pred,\n             metric=sklearn.metrics.balanced_accuracy_score,\n             confidence_level=0.95,\n             n_resamples=9999,\n             method='bootstrap_bca',\n             random_state=random_generator)\n```\n\n### F1, Precision, Recall (with Macro and Micro averaging)\n```python\nfrom confidence interval import precision_score, recall_score, f1_score\n```\n\nThese methods also accept average='micro' or average='macro'.\n\nThe analytical computation here is using the (amazing) 2022 paper of Takahashi et al (reference below). \n\n\n### ROC AUC\n```python\nfrom confidence interval import roc_auc_score\n```\nThe analytical computation here is a fast implementation of the DeLong method.\n\n\n### Binary metrics\n```python\nfrom confidence interval import accuracy_score, ppv_score, npv_score,\n                                tpr_score, fpr_score, tnr_score\n```\n\nFor these methods, the confidence interval is estimated by treating the ratio as a binomial proportion,\nsee the [wiki page](https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval).\n\nBy default method='wilson', the wilson interval, which behaves better for smaller samples.\n\nmethod can be one of ['wilson', 'normal', 'agresti_coull', 'beta', 'jeffreys', 'binom_test'], or one of the boostrap methods.\n\n----------\n\n### References\n\nThe binomial confidence interval computation uses the statsmodels package:\nhttps://www.statsmodels.org/dev/generated/statsmodels.stats.proportion.proportion_confint.html\n\nYandex data schhol implementation of the fast delong method:\nhttps://github.com/yandexdataschool/roc_comparison\n\nhttps://ieeexplore.ieee.org/document/6851192\nX. Sun and W. Xu, \"Fast Implementation of DeLong’s Algorithm for Comparing the Areas Under Correlated Receiver Operating Characteristic Curves,\" in IEEE Signal Processing Letters, vol. 21, no. 11, pp. 1389-1393, Nov. 2014, doi: 10.1109/LSP.2014.2337313.\n\nhttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC8936911/#APP2\nConfidence interval for micro-averaged F1 and macro-averaged F1 scores\n`Kanae Takahashi,1,2 Kouji Yamamoto,3 Aya Kuchiba,4,5 and Tatsuki Koyama6`\n\nB. Efron and R. J. Tibshirani, An Introduction to the Bootstrap, Chapman & Hall/CRC, Boca Raton, FL, USA (1993)\n\nNathaniel E. Helwig, “Bootstrap Confidence Intervals”, http://users.stat.umn.edu/~helwig/notes/bootci-Notes.pdf\n\nBootstrapping (statistics), Wikipedia, https://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jacobgil/confidenceinterval",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "confidenceinterval",
    "package_url": "https://pypi.org/project/confidenceinterval/",
    "platform": null,
    "project_url": "https://pypi.org/project/confidenceinterval/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jacobgil/confidenceinterval/issues",
      "Homepage": "https://github.com/jacobgil/confidenceinterval"
    },
    "release_url": "https://pypi.org/project/confidenceinterval/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Confidence Intervals in python",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17254626,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2963961eeb16af92de8645963835230ee922a9fb81e6eac06fbf98c22874bcb2",
          "md5": "13935968c423860a98fba8f795f9e471",
          "sha256": "a3df29ebabe449bff85f177bf2270caee7990e1e5b80d55ac52ee2eb7c5b0008"
        },
        "downloads": -1,
        "filename": "confidenceinterval-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "13935968c423860a98fba8f795f9e471",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11659,
        "upload_time": "2023-03-11T17:09:50",
        "upload_time_iso_8601": "2023-03-11T17:09:50.387378Z",
        "url": "https://files.pythonhosted.org/packages/29/63/961eeb16af92de8645963835230ee922a9fb81e6eac06fbf98c22874bcb2/confidenceinterval-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2963961eeb16af92de8645963835230ee922a9fb81e6eac06fbf98c22874bcb2",
        "md5": "13935968c423860a98fba8f795f9e471",
        "sha256": "a3df29ebabe449bff85f177bf2270caee7990e1e5b80d55ac52ee2eb7c5b0008"
      },
      "downloads": -1,
      "filename": "confidenceinterval-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "13935968c423860a98fba8f795f9e471",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11659,
      "upload_time": "2023-03-11T17:09:50",
      "upload_time_iso_8601": "2023-03-11T17:09:50.387378Z",
      "url": "https://files.pythonhosted.org/packages/29/63/961eeb16af92de8645963835230ee922a9fb81e6eac06fbf98c22874bcb2/confidenceinterval-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}