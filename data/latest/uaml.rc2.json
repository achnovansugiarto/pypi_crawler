{
  "info": {
    "author": "Thomas Mortier",
    "author_email": "thomas.mortier92@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Uncertainty-aware machine learning ![build](https://github.com/tfmortie/uaml/actions/workflows/build.yml/badge.svg?branch=main) ![pypi version](https://badge.fury.io/py/uaml.svg) ![license](https://img.shields.io/github/license/tfmortie/uaml)\n\nPython package for uncertainty-aware classification built on top of Scikit-learn. \n\n## Description\n\n**uaml** is a Python package for uncertainty-aware machine learning based on probabilistic ensembles and the Jensen–Shannon divergence. Currently, it is built on top of Scikit-learn and supports all probabilistic base classifiers. \n\n## Installation\n\nClone this repository [`tfmortie/uaml`](https://github.com/tfmortie/uaml.git) and run `pip install . -r requirements.txt`\nor install by means of `pip install uaml`.\n\n## Example\n\nThe uncertainty-aware classifier is provided through `uaml.multiclass.UAClassifier`. Below we show a minimal working and more elaborate example.\n\n### Basic usage\n\nWe start by importing some packages that we will need throughout the example:\n\n```python\nfrom sklearn.datasets import make_moons\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# some example data\nX, y = make_moons(n_samples=100, noise=0.1, random_state=0)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.4, random_state=42)\n```\n\nCreating an uncertainty-aware classifier, with `LogisticRegression` as underlying probabilistic model, is done as follows:\n\n```python\nfrom uaml.multiclass import UAClassifier\n\n# use LogisticRegression as base (probabilistic) estimator\nest = LogisticRegression(solver=\"liblinear\")\n\n# construct and fit an uncertainty-aware classifier with 500 estimators and parallelize over 5 cores \nclf = UAClassifier(est, ensemble_size=500, train_ratio=0.5, n_jobs=5)\n```\n\n`UAClassifier` follows the Scikit-learn API, as illustrated below: \n\n```python\n# fit our classifier\nclf.fit(X_train, y_train)\n\n# obtain predictions by means of majority voting\npreds = clf.predict(X_test, avg=True)\n\n# obtain probabilities\nprobs = clf.predict_proba(X_test, avg=True) \n```\nFinally, let's calculate aleatoric and epistemic uncertainty:\n\n```python\nua, ue = clf.get_uncertainty(X_test)\n```\n\n### Visualisation\n\nIn a next example, let's see how aleatoric and epistemic uncertainty evaluate in the feature space of the \"two moons\" dataset for different classifiers:\n\n```python\nimport numpy as np\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\n\nfrom uaml.multiclass import UAClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_moons\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.datasets import make_moons\nfrom sklearn.tree import DecisionTreeClassifier\n\n# different estimators for UAClassifier\nclassifiers = {\n    \"5-NN\": KNeighborsClassifier(5),\n    \"Linear SVM\": SVC(kernel=\"linear\", C=0.025, probability=True),\n    \"RBF SVM\": SVC(gamma=1, C=1, probability=True),\n    \"Decision Tree\": DecisionTreeClassifier(max_depth=5),\n    \"Simple Neural Network\" : MLPClassifier(alpha=1, max_iter=1000),\n    \"QDA\": QuadraticDiscriminantAnalysis()\n}\n\n# create dataset\nX, y = make_moons(n_samples=100, noise=0.1, random_state=0)\nX = StandardScaler().fit_transform(X)\nX_train, X_test, y_train, y_test = \\\n    train_test_split(X, y, test_size=.4, random_state=42)\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02), np.arange(y_min, y_max, 0.02))\n\n# create plot\ncm = plt.cm.viridis\nfig,ax = plt.subplots(len(classifiers), 3, figsize=(10,10))\nfor i, clf in enumerate(classifiers.keys()):\n    # fit classifiers and obtain predictions and uncertainty estimates\n    model = classifiers[clf]\n    clf = UAClassifier(model, 500, 0.8, n_jobs=5, verbose=1)\n    clf.fit(X_train, y_train)\n    Zp = clf.predict(np.c_[xx.ravel(), yy.ravel()], avg=True)\n    Za, Ze = clf.get_uncertainty(np.c_[xx.ravel(), yy.ravel()])\n\n    # construct contour plot\n    Zp = Zp.reshape(xx.shape)\n    Za = Za.reshape(xx.shape)\n    Ze = Ze.reshape(xx.shape)\n    ax[i,0].contourf(xx, yy, Zp, cmap=cm, alpha=.8)\n    if i == 0:\n        ax[i, 0].set_title(\"Prediction\")\n\n    # prediction plot\n    # plot the training points\n    ax[i,0].scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm)\n    # plot the testing points\n    ax[i,0].scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm, alpha=0.6)\n    ax[i,0].set_xlim(xx.min(), xx.max())\n    ax[i,0].set_ylim(yy.min(), yy.max())\n\n    # aleatoric uncertainty plot\n    ax[i,1].contourf(xx, yy, Za, cmap=cm, alpha=.8)\n    if i == 0:\n        ax[i, 1].set_title(\"Aleatoric uncertainty\")\n    # plot the training points\n    ax[i,1].scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm)\n    # plot the testing points\n    ax[i,1].scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm, alpha=0.6)\n    ax[i,1].set_xlim(xx.min(), xx.max())\n    ax[i,1].set_ylim(yy.min(), yy.max())\n\n    # epistemic uncertainty plot\n    ax[i,2].contourf(xx, yy, Ze, cmap=cm, alpha=.8)\n    if i == 0:\n        ax[i, 2].set_title(\"Epistemic uncertainty\")\n    # plot the training points\n    ax[i,2].scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm)\n    # plot the testing points\n    ax[i,2].scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm, alpha=0.6)\n    ax[i,2].set_xlim(xx.min(), xx.max())\n    ax[i,2].set_ylim(yy.min(), yy.max())\n```\n\n![Aleatoric and epistemic uncertainty in classification](uncertainty.png \"Aleatoric and epistemic uncertainty\")\n\n## References\n\n* _Aleatoric and epistemic uncertainty in machine learning: an introduction to concepts and methods, Hüllermeier et al., Machine learning (2021)_\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tfmortie/uaml",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uaml",
    "package_url": "https://pypi.org/project/uaml/",
    "platform": null,
    "project_url": "https://pypi.org/project/uaml/",
    "project_urls": {
      "Homepage": "https://github.com/tfmortie/uaml"
    },
    "release_url": "https://pypi.org/project/uaml/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Uncertainty-aware classification.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14275801,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e0906fac2053017a03f5159311e01e6477a3a6d4bb542b0d8ec294baaed3a71",
          "md5": "d52e312c075a7df493560d6b3104e916",
          "sha256": "b8bfd98f528a7197afbacec61745ec64f906d5ec5d3216bcb88b1fe450d485d0"
        },
        "downloads": -1,
        "filename": "uaml-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d52e312c075a7df493560d6b3104e916",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 519518,
        "upload_time": "2022-06-28T17:47:09",
        "upload_time_iso_8601": "2022-06-28T17:47:09.400633Z",
        "url": "https://files.pythonhosted.org/packages/3e/09/06fac2053017a03f5159311e01e6477a3a6d4bb542b0d8ec294baaed3a71/uaml-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e1b9601c16e3f28f890d360e996ccba301d4b5476fc6f71eebfca99b170c2f9",
          "md5": "a95948d084c3e5bb14884a316c2da448",
          "sha256": "255c32447cd66b045e124d77d27c1ca12a302e9252273afa135ea075183e062d"
        },
        "downloads": -1,
        "filename": "uaml-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a95948d084c3e5bb14884a316c2da448",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 519523,
        "upload_time": "2022-06-28T17:53:48",
        "upload_time_iso_8601": "2022-06-28T17:53:48.886810Z",
        "url": "https://files.pythonhosted.org/packages/7e/1b/9601c16e3f28f890d360e996ccba301d4b5476fc6f71eebfca99b170c2f9/uaml-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e1b9601c16e3f28f890d360e996ccba301d4b5476fc6f71eebfca99b170c2f9",
        "md5": "a95948d084c3e5bb14884a316c2da448",
        "sha256": "255c32447cd66b045e124d77d27c1ca12a302e9252273afa135ea075183e062d"
      },
      "downloads": -1,
      "filename": "uaml-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a95948d084c3e5bb14884a316c2da448",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 519523,
      "upload_time": "2022-06-28T17:53:48",
      "upload_time_iso_8601": "2022-06-28T17:53:48.886810Z",
      "url": "https://files.pythonhosted.org/packages/7e/1b/9601c16e3f28f890d360e996ccba301d4b5476fc6f71eebfca99b170c2f9/uaml-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}