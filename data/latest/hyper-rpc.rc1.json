{
  "info": {
    "author": "decentral1se",
    "author_email": "hi@decentral1.se",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# hyper-rpc\n\n[![Build Status](https://drone.autonomic.zone/api/badges/hyperpy/hyper-rpc/status.svg)](https://drone.autonomic.zone/hyperpy/hyper-rpc)\n\n## Simple RPC with Protobuf Services\n\nUses [grpcio_tools](https://pypi.org/project/grpc-tools) and [purerpc](https://github.com/standy66/purerpc) under the hood.\n\n## Install\n\n```sh\n$ pip install hyper-rpc\n```\n\n## Example\n\n> **TLDR; See the [example](./example) directory**\n\nDefine an RPC service in a `greeter.proto`.\n\n```protobuf\nsyntax = \"proto3\";\n\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n  rpc SayHelloGoodbye (HelloRequest) returns (stream HelloReply) {}\n  rpc SayHelloToMany (stream HelloRequest) returns (stream HelloReply) {}\n  rpc SayHelloToManyAtOnce (stream HelloRequest) returns (HelloReply) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n\nmessage HelloReply {\n  string message = 1;\n}\n```\n\nThen generate the services and stubs with `hyper-rpc`.\n\n```sh\n$ pip install hyper-rpc\n$ hrpc greeter.proto\n```\n\nThis creates `greeter_gprc.py` (services) and `greeter_pb2.py` (stubs) files.\n\nYou can then write an async-ready server.\n\n```python\n\"\"\"Greeter server.\"\"\"\n\nfrom greeter_grpc import GreeterServicer\nfrom greeter_pb2 import HelloReply, HelloRequest\nfrom purerpc import Server\n\n\nclass Greeter(GreeterServicer):\n    async def SayHello(self, message):\n        return HelloReply(message=f\"Hello {message.name}\")\n\n    async def SayHelloToMany(self, input_messages):\n        async for message in input_messages:\n            yield HelloReply(message=f\"Hello, {message.name}\")\n\n\nif __name__ == \"__main__\":\n    server = Server(50055)\n    server.add_service(Greeter().service)\n    server.serve(backend=\"trio\")\n\n```\n\nAnd a client.\n\n```python\n\"\"\"Greeter client.\"\"\"\n\nimport anyio\nimport purerpc\nfrom greeter_grpc import GreeterStub\nfrom greeter_pb2 import HelloReply, HelloRequest\n\n\nasync def gen():\n    for i in range(5):\n        yield HelloRequest(name=str(i))\n\n\nasync def main():\n    async with purerpc.insecure_channel(\"localhost\", 50055) as channel:\n        stub = GreeterStub(channel)\n        reply = await stub.SayHello(HelloRequest(name=\"World\"))\n        print(reply.message)\n\n        async for reply in stub.SayHelloToMany(gen()):\n            print(reply.message)\n\n\nif __name__ == \"__main__\":\n    anyio.run(main, backend=\"trio\")\n```\n\nAnd run them in separate terminals to see the output.\n\n```\n$ python server.py # terminal 1\n$ python client.py # terminal 2\n```\n\nOutput:\n\n```\nHello, World\nHello, 0\nHello, 1\nHello, 2\nHello, 3\nHello, 4\n```\n\nGo forth and [Remote Procedure Call](https://en.wikipedia.org/wiki/Remote_procedure_call).\n\n![The person who invented the term RPC](https://upload.wikimedia.org/wikipedia/en/9/90/BruceJayNelson.JPG)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hyperpy/hyper-rpc",
    "keywords": "",
    "license": "",
    "maintainer": "decentral1se",
    "maintainer_email": "hi@decentral1.se",
    "name": "hyper-rpc",
    "package_url": "https://pypi.org/project/hyper-rpc/",
    "platform": "",
    "project_url": "https://pypi.org/project/hyper-rpc/",
    "project_urls": {
      "Homepage": "https://github.com/hyperpy/hyper-rpc",
      "Repository": "https://github.com/hyperpy/hyper-rpc"
    },
    "release_url": "https://pypi.org/project/hyper-rpc/0.0.1a4/",
    "requires_dist": [
      "grpcio_tools (>=1.31.0,<2.0.0)",
      "purerpc (>=0.6.1,<0.7.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Simple RPC with Protobuf Services",
    "version": "0.0.1a4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7917502,
  "releases": {
    "0.0.1a4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9c783157fd2de0da54af75d267a482996d53358e2b893c0f0a3b91093b088e1",
          "md5": "6b18eeac538a3c7737f7edf08dca6284",
          "sha256": "37dcb611dee7536e11c62560df85bda57a4f0998e0be013bf7ad08c26865fbcb"
        },
        "downloads": -1,
        "filename": "hyper_rpc-0.0.1a4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b18eeac538a3c7737f7edf08dca6284",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 15271,
        "upload_time": "2020-08-09T02:28:34",
        "upload_time_iso_8601": "2020-08-09T02:28:34.777320Z",
        "url": "https://files.pythonhosted.org/packages/f9/c7/83157fd2de0da54af75d267a482996d53358e2b893c0f0a3b91093b088e1/hyper_rpc-0.0.1a4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5f256dd97c7c10dbdc7bce5939bbd59ceb4985f0b4a94a260a1a5fd229066a9",
          "md5": "2d39cf1c35c3152f1132d026533a3884",
          "sha256": "c5434d8711fd590ecd5b902171517661d8ca6302f16c9962f7d758841936ac97"
        },
        "downloads": -1,
        "filename": "hyper-rpc-0.0.1a4.tar.gz",
        "has_sig": false,
        "md5_digest": "2d39cf1c35c3152f1132d026533a3884",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 15492,
        "upload_time": "2020-08-09T02:28:32",
        "upload_time_iso_8601": "2020-08-09T02:28:32.190478Z",
        "url": "https://files.pythonhosted.org/packages/a5/f2/56dd97c7c10dbdc7bce5939bbd59ceb4985f0b4a94a260a1a5fd229066a9/hyper-rpc-0.0.1a4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9c783157fd2de0da54af75d267a482996d53358e2b893c0f0a3b91093b088e1",
        "md5": "6b18eeac538a3c7737f7edf08dca6284",
        "sha256": "37dcb611dee7536e11c62560df85bda57a4f0998e0be013bf7ad08c26865fbcb"
      },
      "downloads": -1,
      "filename": "hyper_rpc-0.0.1a4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6b18eeac538a3c7737f7edf08dca6284",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 15271,
      "upload_time": "2020-08-09T02:28:34",
      "upload_time_iso_8601": "2020-08-09T02:28:34.777320Z",
      "url": "https://files.pythonhosted.org/packages/f9/c7/83157fd2de0da54af75d267a482996d53358e2b893c0f0a3b91093b088e1/hyper_rpc-0.0.1a4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5f256dd97c7c10dbdc7bce5939bbd59ceb4985f0b4a94a260a1a5fd229066a9",
        "md5": "2d39cf1c35c3152f1132d026533a3884",
        "sha256": "c5434d8711fd590ecd5b902171517661d8ca6302f16c9962f7d758841936ac97"
      },
      "downloads": -1,
      "filename": "hyper-rpc-0.0.1a4.tar.gz",
      "has_sig": false,
      "md5_digest": "2d39cf1c35c3152f1132d026533a3884",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 15492,
      "upload_time": "2020-08-09T02:28:32",
      "upload_time_iso_8601": "2020-08-09T02:28:32.190478Z",
      "url": "https://files.pythonhosted.org/packages/a5/f2/56dd97c7c10dbdc7bce5939bbd59ceb4985f0b4a94a260a1a5fd229066a9/hyper-rpc-0.0.1a4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}