{
  "info": {
    "author": "Amr Kayid",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# NAM: Neural Additive Models - Interpretable Machine Learning with Neural Nets\n\n  **[Overview](#overview)**\n| **[Installation](#installation)**\n| **[Paper](https://arxiv.org/pdf/2004.13912.pdf)**\n\n![PyPI Python Version](https://img.shields.io/pypi/pyversions/nam)\n![PyPI version](https://badge.fury.io/py/nam.svg)\n[![arXiv](https://img.shields.io/badge/arXiv-2004.13912-b31b1b.svg)](https://arxiv.org/abs/2004.13912)\n![GitHub license](https://img.shields.io/github/license/AmrMKayid/nam)\n\nNAM is a library for generalized additive models research.\nNeural Additive Models (NAMs) combine some of the expressivity of DNNs with the inherent intelligibility of generalized additive models. NAMs learn a linear combination of neural networks that each attend to a single input feature. These networks are trained jointly and can learn arbitrarily complex relationships between their input feature and the output.\n\n## Overview\n\n```python\nfrom nam.config import defaults\nfrom nam.data import FoldedDataset, NAMDataset\nfrom nam.models import NAM, get_num_units\nfrom nam.trainer import LitNAM\nfrom nam.utils import *\n```\n\n##### Define the experiments configurations\n\n```python\nconfig = defaults()\nprint(config)\n```\n\n```python\n>> Config(activation='exu', batch_size=1024, cross_val=False, data_path='data/GALLUP.csv', decay_rate=0.995, device='cpu', dropout=0.5, early_stopping_patience=50, experiment_name='NAM', feature_dropout=0.5, fold_num=1, hidden_sizes=[64, 32], l2_regularization=0.5, logdir='output', lr=0.0003, num_basis_functions=1000, num_epochs=1, num_folds=5, num_models=1, num_splits=3, num_workers=16, optimizer='adam', output_regularization=0.5, regression=False, save_model_frequency=2, save_top_k=3, seed=2021, shuffle=True, units_multiplier=2, use_dnn=False, wandb=True)\n```\n\n##### Creating and preprocessing the dataset\n\n```python\nimport sklearn\nhousing = sklearn.datasets.fetch_california_housing()\n\ndataset = pd.DataFrame(data=housing.data, columns=housing.feature_names)\ndataset['target'] = housing.target\n\nconfig.regression = True\n\ndataset = NAMDataset(config,\n                      data_path=dataset,\n                      features_columns=dataset.columns[:-1],\n                      targets_column=dataset.columns[-1])\n\n\n## Getting the training dataloaders\ndataloaders = dataset.train_dataloaders()\n```\n\n##### Define NAM Model\n\n```python\nmodel = NAM(\n  config=config,\n  name=\"NAM_GALLUP\",\n  num_inputs=len(dataset[0][0]),\n  num_units=get_num_units(config, dataset.features),\n)\nmodel\n```\n\n```python\n>>> NAM(\n  (feature_nns): ModuleList(\n    (0): FeatureNN(\n      (model): ModuleList(\n        (0): ExU(in_features=1, out_features=1000)\n        (1): LinReLU(in_features=1000, out_features=64)\n        (2): LinReLU(in_features=64, out_features=32)\n        (3): Linear(in_features=32, out_features=1, bias=True)\n      )\n    )\n    (1): FeatureNN(\n      (model): ModuleList(\n        (0): ExU(in_features=1, out_features=4)\n        (1): LinReLU(in_features=4, out_features=64)\n        (2): LinReLU(in_features=64, out_features=32)\n        (3): Linear(in_features=32, out_features=1, bias=True)\n      )\n    )\n    (2): FeatureNN(\n      (model): ModuleList(\n        (0): ExU(in_features=1, out_features=184)\n        (1): LinReLU(in_features=184, out_features=64)\n        (2): LinReLU(in_features=64, out_features=32)\n        (3): Linear(in_features=32, out_features=1, bias=True)\n      )\n    )\n  )\n)\n```\n\n##### Training loop\n\n```python\nfor fold, (trainloader, valloader) in enumerate(dataloaders):\n\n    tb_logger = TensorBoardLogger(save_dir=config.logdir,\n                                name=f'{model.name}',\n                                version=f'fold_{fold + 1}')\n\n    checkpoint_callback = ModelCheckpoint(filename=tb_logger.log_dir +\n                                        \"/{epoch:02d}-{val_loss:.4f}\",\n                                        monitor='val_loss',\n                                        save_top_k=config.save_top_k,\n                                        mode='min')\n\n    litmodel = LitNAM(config, model)\n    trainer = pl.Trainer(logger=tb_logger,\n                       max_epochs=config.num_epochs,\n                       checkpoint_callback=checkpoint_callback)\n    trainer.fit(litmodel,\n              train_dataloader=trainloader,\n              val_dataloaders=valloader)\n\n\n## Testing the trained model\ntrainer.test(test_dataloaders=dataset.test_dataloaders())\n\n## Output\n>>> [{'test_loss': 236.77108764648438,\n  'test_loss_epoch': 237.080322265625,\n  'Accuracy_metric_epoch': 0.6506563425064087,\n  'Accuracy_metric': 0.6458333134651184}]\n```\n\n\n##### Nam Visualization\n\n```\nfig1 = plot_mean_feature_importance(litmodel.model, dataset)\n\nfig2 = plot_nams(litmodel.model, dataset, num_cols= 3)\n```\n\n![Vis](old/gallup.png)\n\n\n## Usage\n\n```bash\n$ python main.py -h\nusage: Neural Additive Models [-h] [--num_epochs NUM_EPOCHS]\n                              [--learning_rate LEARNING_RATE]\n                              [--batch_size BATCH_SIZE] --data_path DATA_PATH\n                              --features_columns FEATURES_COLUMNS\n                              [FEATURES_COLUMNS ...] --targets_column\n                              TARGETS_COLUMN [TARGETS_COLUMN ...]\n                              [--weights_column WEIGHTS_COLUMN]\n                              [--experiment_name EXPERIMENT_NAME]\n                              [--regression REGRESSION] [--logdir LOGDIR]\n                              [--wandb WANDB]\n                              [--hidden_sizes HIDDEN_SIZES [HIDDEN_SIZES ...]]\n                              [--activation {exu,relu}] [--dropout DROPOUT]\n                              [--feature_dropout FEATURE_DROPOUT]\n                              [--decay_rate DECAY_RATE]\n                              [--l2_regularization L2_REGULARIZATION]\n                              [--output_regularization OUTPUT_REGULARIZATION]\n                              [--dataset_name DATASET_NAME] [--seed SEED]\n                              [--num_basis_functions NUM_BASIS_FUNCTIONS]\n                              [--units_multiplier UNITS_MULTIPLIER]\n                              [--shuffle SHUFFLE] [--cross_val CROSS_VAL]\n                              [--num_folds NUM_FOLDS]\n                              [--num_splits NUM_SPLITS] [--fold_num FOLD_NUM]\n                              [--num_models NUM_MODELS]\n                              [--early_stopping_patience EARLY_STOPPING_PATIENCE]\n                              [--use_dnn USE_DNN] [--save_top_k SAVE_TOP_K]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --num_epochs NUM_EPOCHS\n                        The number of epochs to run training for.\n  --learning_rate LEARNING_RATE\n                        Hyperparameter: learning rate.\n  --batch_size BATCH_SIZE\n                        Hyperparameter: batch size.\n  --data_path DATA_PATH\n                        The path for the training data\n  --features_columns FEATURES_COLUMNS [FEATURES_COLUMNS ...]\n                        Name of the feature columns in the dataset\n  --targets_column TARGETS_COLUMN [TARGETS_COLUMN ...]\n                        Name of the target column in the dataset\n  --weights_column WEIGHTS_COLUMN\n                        Name of the weights column in the dataset\n  --experiment_name EXPERIMENT_NAME\n                        The name for the experiment\n  --regression REGRESSION\n                        Boolean flag indicating whether we are solving a\n                        regression task or a classification task.\n  --logdir LOGDIR       Path to dir where to store summaries.\n  --wandb WANDB         Using wandb for experiments tracking and logging\n  --hidden_sizes HIDDEN_SIZES [HIDDEN_SIZES ...]\n                        Feature Neural Net hidden sizes\n  --activation {exu,relu}\n                        Activation function to used in the hidden layer.\n                        Possible options: (1) relu, (2) exu\n  --dropout DROPOUT     Hyperparameter: Dropout rate\n  --feature_dropout FEATURE_DROPOUT\n                        Hyperparameter: Prob. with which features are dropped\n  --decay_rate DECAY_RATE\n                        Hyperparameter: Optimizer decay rate\n  --l2_regularization L2_REGULARIZATION\n                        Hyperparameter: l2 weight decay\n  --output_regularization OUTPUT_REGULARIZATION\n                        Hyperparameter: feature reg\n  --dataset_name DATASET_NAME\n                        Name of the dataset to load for training.\n  --seed SEED           seed for torch\n  --num_basis_functions NUM_BASIS_FUNCTIONS\n                        Number of basis functions to use in a FeatureNN for a\n                        real-valued feature.\n  --units_multiplier UNITS_MULTIPLIER\n                        Number of basis functions for a categorical feature\n  --shuffle SHUFFLE     Shuffle the training data\n  --cross_val CROSS_VAL\n                        Boolean flag indicating whether to perform cross\n                        validation or not.\n  --num_folds NUM_FOLDS\n                        Number of N folds\n  --num_splits NUM_SPLITS\n                        Number of data splits to use\n  --fold_num FOLD_NUM   Index of the fold to be used\n  --num_models NUM_MODELS\n                        the number of models to train.\n  --early_stopping_patience EARLY_STOPPING_PATIENCE\n                        Early stopping epochs\n  --use_dnn USE_DNN     Deep NN baseline.\n  --save_top_k SAVE_TOP_K\n                        Indicates the maximum number of recent checkpoint\n                        files to keep.\n```\n\n\n## Citing NAM\n\n\n```bibtex\n@misc{kayid2020nams,\n  title={Neural additive models Library},\n  author={Kayid, Amr and Frosst, Nicholas and Hinton, Geoffrey E},\n  year={2020}\n}\n```\n\n```bibtex\n@article{agarwal2020neural,\n  title={Neural additive models: Interpretable machine learning with neural nets},\n  author={Agarwal, Rishabh and Frosst, Nicholas and Zhang, Xuezhou and Caruana, Rich and Hinton, Geoffrey E},\n  journal={arXiv preprint arXiv:2004.13912},\n  year={2020}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AmrMKayid/nam",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nam",
    "package_url": "https://pypi.org/project/nam/",
    "platform": "",
    "project_url": "https://pypi.org/project/nam/",
    "project_urls": {
      "Homepage": "https://github.com/AmrMKayid/nam"
    },
    "release_url": "https://pypi.org/project/nam/0.0.3/",
    "requires_dist": [
      "torch",
      "pytorch-lightning",
      "wandb",
      "matplotlib",
      "sklearn",
      "numpy",
      "pandas",
      "loguru"
    ],
    "requires_python": "",
    "summary": "Neural Additive Models (Google Research)",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10541937,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92c9e858071a64b2ef6cf74c853404f8aeb8b3f6c428ab89909f0c50f6962efa",
          "md5": "65fd5fe51da8fc32c53d16ca22dfeb18",
          "sha256": "3355a0887b92947bada1129d6b49b793adfdff92f663c868596a58ddc5c0e9c1"
        },
        "downloads": -1,
        "filename": "nam-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65fd5fe51da8fc32c53d16ca22dfeb18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18623,
        "upload_time": "2020-12-19T03:32:36",
        "upload_time_iso_8601": "2020-12-19T03:32:36.301244Z",
        "url": "https://files.pythonhosted.org/packages/92/c9/e858071a64b2ef6cf74c853404f8aeb8b3f6c428ab89909f0c50f6962efa/nam-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9acb7b269df087c7b0b06d6aa5f700ec8292337a55f6579b698c86dce11b2758",
          "md5": "6e372ca56a321e52226afbea26a71100",
          "sha256": "42790b9be923d96d23969cb992d8a20cff816e9ffc2c9659ddfd15d4bc87e78b"
        },
        "downloads": -1,
        "filename": "nam-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6e372ca56a321e52226afbea26a71100",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13475,
        "upload_time": "2020-12-19T03:32:37",
        "upload_time_iso_8601": "2020-12-19T03:32:37.874812Z",
        "url": "https://files.pythonhosted.org/packages/9a/cb/7b269df087c7b0b06d6aa5f700ec8292337a55f6579b698c86dce11b2758/nam-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2af8be7521c61cc05565b935c6c0369812f742c5ab2dff43a6b994abd65a4373",
          "md5": "a630ec099e74a1393e5e3d20a71ab724",
          "sha256": "c001441527f7e26a1653768c65b53d6e783a64346011e7c7a27901a8b2ebd1de"
        },
        "downloads": -1,
        "filename": "nam-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a630ec099e74a1393e5e3d20a71ab724",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27052,
        "upload_time": "2021-06-02T20:16:20",
        "upload_time_iso_8601": "2021-06-02T20:16:20.603469Z",
        "url": "https://files.pythonhosted.org/packages/2a/f8/be7521c61cc05565b935c6c0369812f742c5ab2dff43a6b994abd65a4373/nam-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c744acb3815f1a62ee1fef380a973a31f9df262fd6cbef196f01aa57f5ab07b",
          "md5": "4972f463c3fb3f3fdd6d05f72f485832",
          "sha256": "0f93ab2040339afafb07a0f865fabd1d74d1d4b3393c1ccf25798e1bd1b26bf2"
        },
        "downloads": -1,
        "filename": "nam-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4972f463c3fb3f3fdd6d05f72f485832",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21417,
        "upload_time": "2021-06-02T20:16:22",
        "upload_time_iso_8601": "2021-06-02T20:16:22.271505Z",
        "url": "https://files.pythonhosted.org/packages/9c/74/4acb3815f1a62ee1fef380a973a31f9df262fd6cbef196f01aa57f5ab07b/nam-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fbdb81a6187a06339a1d654bb39b2aaf4ab481b44607559ec4038b3650171dc",
          "md5": "a38183e32e255b4ebe8f34d8763c82e9",
          "sha256": "05c992c56025218a6fa36a17513b9b188153daed5798e5f76a547fb8aa1fc5d4"
        },
        "downloads": -1,
        "filename": "nam-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a38183e32e255b4ebe8f34d8763c82e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27041,
        "upload_time": "2021-06-02T20:29:32",
        "upload_time_iso_8601": "2021-06-02T20:29:32.661883Z",
        "url": "https://files.pythonhosted.org/packages/3f/bd/b81a6187a06339a1d654bb39b2aaf4ab481b44607559ec4038b3650171dc/nam-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0709b20e27c3880263d0fc5235cef649fb9ac38e1db8b226339a49b265df8ebd",
          "md5": "a07de20632757057f33a1f3b96aedd77",
          "sha256": "48400d12b5f29fdd1671aebdf78d7f41bcac4f5c8ab7ed48770ee0c4fbc0673b"
        },
        "downloads": -1,
        "filename": "nam-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a07de20632757057f33a1f3b96aedd77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21403,
        "upload_time": "2021-06-02T20:29:34",
        "upload_time_iso_8601": "2021-06-02T20:29:34.496673Z",
        "url": "https://files.pythonhosted.org/packages/07/09/b20e27c3880263d0fc5235cef649fb9ac38e1db8b226339a49b265df8ebd/nam-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fbdb81a6187a06339a1d654bb39b2aaf4ab481b44607559ec4038b3650171dc",
        "md5": "a38183e32e255b4ebe8f34d8763c82e9",
        "sha256": "05c992c56025218a6fa36a17513b9b188153daed5798e5f76a547fb8aa1fc5d4"
      },
      "downloads": -1,
      "filename": "nam-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a38183e32e255b4ebe8f34d8763c82e9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27041,
      "upload_time": "2021-06-02T20:29:32",
      "upload_time_iso_8601": "2021-06-02T20:29:32.661883Z",
      "url": "https://files.pythonhosted.org/packages/3f/bd/b81a6187a06339a1d654bb39b2aaf4ab481b44607559ec4038b3650171dc/nam-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0709b20e27c3880263d0fc5235cef649fb9ac38e1db8b226339a49b265df8ebd",
        "md5": "a07de20632757057f33a1f3b96aedd77",
        "sha256": "48400d12b5f29fdd1671aebdf78d7f41bcac4f5c8ab7ed48770ee0c4fbc0673b"
      },
      "downloads": -1,
      "filename": "nam-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a07de20632757057f33a1f3b96aedd77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21403,
      "upload_time": "2021-06-02T20:29:34",
      "upload_time_iso_8601": "2021-06-02T20:29:34.496673Z",
      "url": "https://files.pythonhosted.org/packages/07/09/b20e27c3880263d0fc5235cef649fb9ac38e1db8b226339a49b265df8ebd/nam-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}