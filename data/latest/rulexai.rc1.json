{
  "info": {
    "author": "Dawid Macha",
    "author_email": "dawid.m.macha@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# RuleXAI\r\n\r\nRuleXAI is a rule-based aproach to explain the output of any machine learning model. It is suitable for classification, regression and survival tasks. \r\n\r\n## Instalation\r\n\r\nRuleXAI can be installed from PyPI\r\n\r\n```bash\r\npip install rulexai\r\n```\r\n\r\nOr you can clone the repository and run:\r\n```bash\r\npip install .\r\n```\r\n\r\n## Model agnostic example\r\n```python\r\nfrom sklearn.datasets import load_iris\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.svm import SVC\r\nimport pandas as pd\r\n\r\nfrom rulexai.explainer import Explainer\r\n\r\n\r\n# load iris dataset\r\ndata = load_iris()\r\ndf = pd.DataFrame(data['data'], columns=data['feature_names'])\r\ndf['class'] = data['target']\r\n\r\n\r\n# train a SVM classifier\r\nX_train,X_test,y_train,y_test = train_test_split(df.drop(columns=[\"class\"]), df[\"class\"], test_size=0.2, random_state=0)\r\nsvm = SVC(kernel='rbf', probability=True)\r\nsvm.fit(X_train, y_train)\r\n\r\n\r\n# use Explainer to explain model output\r\nexplainer =  Explainer(X = X_train,model_predictions = y_train.astype(str), type = \"classification\")\r\nexplainer.explain()\r\n```\r\n\r\n## Sample notebooks\r\n\r\n* **[Classification]()**  - in this notebook, the data from https://www.kaggle.com/c/titanic is analysed to show the advantages and possibilities of using the RuleXAI library for in-depth analysis of the dataset for classification task. The use of RuleXAI to explain rule-based and tree-based models was also compared. \r\n   \r\n* **[Regression]()** - notebook showing the use of RuleXAI to explain rule-based regression model\r\n   \r\n* **[Survival]()** - notebook showing the use of RuleXAI to explain rule-based survival model\r\n    \r\n* **[Black-box model]()** explainability - the purpose of this notebook is to demonstrate the possibility of using RuleXAI to explain any black box models.\r\n     \r\n* **[Transformation]()** - notebook showing the use of RuleXAI to transform a dataset. Often datasets contain missing values and nominal values. Most available algorithms do not support either missing values or nominal values. Many algorithms require the data to be rescaled beforehand. The RuleXAI library is able to convert a dataset with nominal and missing values into a binary dataset containing as attributes the conditions describing the dataset and as values “1” when the condition is satisfied for the example and “0” when the condition is not satisfied.\r\n   \r\n\r\n## Documentation\r\nFull documentation is available [here]()\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adaa-polsl/RuleXAI",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rulexai",
    "package_url": "https://pypi.org/project/rulexai/",
    "platform": null,
    "project_url": "https://pypi.org/project/rulexai/",
    "project_urls": {
      "Homepage": "https://github.com/adaa-polsl/RuleXAI"
    },
    "release_url": "https://pypi.org/project/rulexai/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "RuleXAI is a rule-based aproach to explain the output of any machine learning model. It is suitable for classification, regression and survival tasks.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13501468,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38b8d6fcb4167a97086c73978069a51aeb3c76c742ac5a393940ca725e7e9769",
          "md5": "b4ad7df33296995c98738b31ec74b0af",
          "sha256": "e4895a1e30fac1d26a784aae143db4527cf15c91cf9c4abad9d3b3e91b009479"
        },
        "downloads": -1,
        "filename": "rulexai-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b4ad7df33296995c98738b31ec74b0af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29575,
        "upload_time": "2022-04-13T12:17:05",
        "upload_time_iso_8601": "2022-04-13T12:17:05.584360Z",
        "url": "https://files.pythonhosted.org/packages/38/b8/d6fcb4167a97086c73978069a51aeb3c76c742ac5a393940ca725e7e9769/rulexai-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38b8d6fcb4167a97086c73978069a51aeb3c76c742ac5a393940ca725e7e9769",
        "md5": "b4ad7df33296995c98738b31ec74b0af",
        "sha256": "e4895a1e30fac1d26a784aae143db4527cf15c91cf9c4abad9d3b3e91b009479"
      },
      "downloads": -1,
      "filename": "rulexai-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b4ad7df33296995c98738b31ec74b0af",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 29575,
      "upload_time": "2022-04-13T12:17:05",
      "upload_time_iso_8601": "2022-04-13T12:17:05.584360Z",
      "url": "https://files.pythonhosted.org/packages/38/b8/d6fcb4167a97086c73978069a51aeb3c76c742ac5a393940ca725e7e9769/rulexai-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}