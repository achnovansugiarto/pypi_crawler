{
  "info": {
    "author": "Martin Šmíd",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![](https://img.shields.io/pypi/v/metext)](https://pypi.org/project/metext/)\n[![](https://img.shields.io/pypi/l/metext)](https://github.com/espoem/MetExt/blob/master/LICENSE.txt)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# MetExt : Metadata Extractor\n\nMetExt (Metadata Extractor) is a Python library and CLI utility that allows to process data in different formats and extract data patterns of interest.\n\n## Installation\n\nMetExt requires Python v3.5+.\n\nYou can install MetExt from PyPi.\n\n```\n$ python -m pip install metext\n```\n\nOr you can clone the repository install the project locally.\n\n```\n$ git clone https://github.com/espoem/MetExt.git\n$ cd MetExt\n$ python -m pip install -e .\n```\n\nDependencies can also be installed from the `requirements.txt` file.\n\n```\n$ python -m pip install -r requirements.txt\n```\n\n## CLI\n\n### Help\n\n```\nmetext --help\n```\n\n### Usage\n\n```\nmetext [-h] [-i INPUT] [-f FILE] [-r] [-o OUTPUT]\n        [-d [{quopri,yenc,base58ripple,base64url,pem,base58btc,base85,hexdump,base91,binhex,percent,ascii85,base64,mime,base32,hex,z85,raw,base32crockford,gzip,uu,base32hex} [{quopri,yenc,base58ripple,base64url,pem,base58btc,base85,hexdump,base91,binhex,percent,\n  ascii85,base64,mime,base32,hex,z85,raw,base32crockford,gzip,uu,base32hex} ...]]]\n        [-e [{bch,xrp,sha256,bip32-xkey,url,ipv4,pem,sha512,ltc,email,chainlink,md5,uuid,btc-wif,sha1,urn,issn,eth,isbn,json,base64,ada,usdt,base32,doi,magnet,sha224,ipv6,uri,data_uri,btc,mac,dot,sha384} [{bch,xrp,sha256,bip32-xkey,url,ipv4,pem,sha512,ltc,email,\n  chainlink,md5,uuid,btc-wif,sha1,urn,issn,eth,isbn,json,base64,ada,usdt,base32,doi,magnet,sha224,ipv6,uri,data_uri,btc,mac,dot,sha384} ...]]]\n        [-F {text,csv,json}] [--version]\n```\n\nInput paths support wildcards. If no input is provided, standard input is processed, i.e. input can be piped into metext. MetExt process input data in best effort, i.e. it tries to decode the data if encoded. The range of decoding to consider can be set via the argument `-d`. The list of patterns to search for is set with the argument `-e`. If not set, all patterns are searched for.\n\nIf no decoding is wanted to apply, set `-d raw`.\n\n## API\n\n### List supported modules\n\n```python\nfrom metext import list_decoders_names, list_extractors_names, list_printers_names\n\nif __name__ == \"__main__\":\n    print(list_decoders_names())\n    print(list_extractors_names())\n    print(list_printers_names())\n```\n\n### Analyse data for patterns\n\n```python\nfrom metext import analyse, print_analysis_output\n\nif __name__ == \"__main__\":\n    # file-like object\n    with open(\"filepath\", \"rb\") as fp:\n        result = analyse(fp, \"raw\")  # without decoding, find all supported patterns\n        print(result)\n        print_analysis_output(result)  # by default prints to STDOUT in JSON format\n        print_analysis_output(\n            result, \"output_filepath\", \"csv\"\n        )  # prints to \"output_filepath\" in CSV format\n\n    # input is list of filepaths\n    # consider either no, or base64 encoding\n    # extract ipv4 patterns\n    result = analyse([\"filepath\"], [\"raw\", \"base64\"], \"ipv4\")\n\n    # input is string\n    # limit decoding to provided decoders with custom kwargs\n    # limit patterns to extractors with custom kwargs\n    input_data = \"some string\"\n    result = analyse(\n        input_data,\n        [\n            (\n                \"base64\",\n                {\n                    \"charset\": \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/\"\n                },\n            )\n        ],\n        [(\"base64\", {})],\n    )\n\n    # input is bytes\n    # decode data in best effort\n    # extract all patterns\n    input_data = \"some byte string\"\n    result = analyse(input_data)\n```\n\n## Modules\n\nThe tool's functionality is divided into individual modules (plugins) of a particular type. A new module can be created by inheriting from one of plugins' bases in [plugin_base.py](https://github.com/espoem/MetExt/blob/master/metext/plugin_base.py) file. A plugin must have defined a unique pair PLUGIN_TYPE, PLUGIN_NAME.\n\n### Supported decoders\n\n| Decoder         | Description                                                |\n| --------------- | ---------------------------------------------------------- |\n| hex             | Hexadecimal values, optionally with delimiters or prefixes |\n| hexdump         | Hexdump format produced by tools `hexdump` and `xdd`       |\n| base32          | _base32_ encoding as defined in RFC 4648                   |\n| base32hex       | _base32hex_ encoding as defined in RFC 4648                |\n| base32crockford | Crockford's Base 32 encoding                               |\n| base58btc       | Base 58 encoding using Bitcoin alphabet                    |\n| base58ripple    | Base 58 encoding using Ripple alphabet                     |\n| base64          | _base64_ encoding as defined in RFC 4648.                  |\n| base64url       | _base64url_ encoding as defined in RFC 4648                |\n| base85          | _base85_ encoding as defined in RFC 1924                   |\n| ascii85         | Ascii85 encoding                                           |\n| z85             | Z85 encoding                                               |\n| base91          | Base 91 encoding                                           |\n| binhex          | BinHex 4.0 encoding                                        |\n| pem             | Decodes Base 64 data in PEM format                         |\n| gzip            | Decompress GZIP data                                       |\n| mime            | Decodes MIME message body                                  |\n| percent         | URL-encoding as defined in RFC 3986                        |\n| quopri          | Quoted-printable encoding as defined in RFC 2045           |\n| uu              | UUEncoding                                                 |\n| yenc            | yEnc encoding                                              |\n\n### Supported pattern extractors\n\n| Extractor | Description                                          |\n| --------- | ---------------------------------------------------- |\n| base32    | _base32_-encoded data                                |\n| base64    | _base64_-encoded data                                |\n| btc       | Bitcoin P2PKH, P2SH and Bech32 mainnet addresses     |\n| btc-wif   | Bitcoin private key in wallet import format (WIF)    |\n| bip32-key | Extended private and public keys as defined in BIP32 |\n| eth       | Ethereum address                                     |\n| ltc       | Litecoin legacy and Bech32 address                   |\n| xrp       | XRP (Ripple) classic address                         |\n| usdt      | Tether (Omni, Ethereum) address                      |\n| bch       | Bitcoin Cash legacy and CashAddr address             |\n| chainlink | Chainlink (Ethereum) address                         |\n| ada       | Cardano address                                      |\n| dot       | Polkadot address                                     |\n| email     | E-mail address                                       |\n| uuid      | Universally unique identifier (UUID, GUID)           |\n| md5       | MD5 hex digest                                       |\n| sha1      | SHA-1 hex digest                                     |\n| sha224    | SHA-224 hex digest                                   |\n| sha256    | SHA-256 hex digest                                   |\n| sha384    | SHA-384 hex digest                                   |\n| sha512    | SHA-512 hex digest                                   |\n| ipv4      | IPv4 address                                         |\n| ipv6      | IPv6 address                                         |\n| isbn      | ISBN identifier                                      |\n| issn      | ISSN identifier                                      |\n| doi       | DOI identifier                                       |\n| json      | JSON non-empty object or array                       |\n| mac       | MAC address                                          |\n| pem       | Data in PEM format                                   |\n| uri       | Generic URI with a registered scheme                 |\n| url       | URL with http(s) or ftp scheme                       |\n| urn       | URN                                                  |\n| data_uri  | Data URI                                             |\n| magnet    | BitTorrent magnet link                               |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/espoem/MetExt",
    "keywords": "",
    "license": "LGPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metext",
    "package_url": "https://pypi.org/project/metext/",
    "platform": "",
    "project_url": "https://pypi.org/project/metext/",
    "project_urls": {
      "Homepage": "https://github.com/espoem/MetExt",
      "Source": "https://github.com/espoem/MetExt",
      "Tracker": "https://github.com/espoem/MetExt/issues"
    },
    "release_url": "https://pypi.org/project/metext/0.0.3/",
    "requires_dist": [
      "pytest",
      "email-validator",
      "tabulate",
      "base91",
      "pysha3",
      "base32-crockford",
      "chardet",
      "pem",
      "cashaddress",
      "cbor",
      "base58",
      "regex",
      "requests",
      "netaddr",
      "brotli",
      "filetype",
      "btclib (==2020.12.19) ; python_version > \"3.5\""
    ],
    "requires_python": ">=3.5",
    "summary": "A tool to search for data patterns in (encoded) binary data",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10371294,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c38a6f878b210e3b7a7b4be0e7521c916a14a635d7e391469bdfb915be1a49a",
          "md5": "44a7f3dff8db465c003f62ac8c795ad1",
          "sha256": "1be72e5c7625a6a760381526c2a865759c1b70c37a7086d8f0346a9cef870721"
        },
        "downloads": -1,
        "filename": "metext-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44a7f3dff8db465c003f62ac8c795ad1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 73022,
        "upload_time": "2021-05-16T15:12:20",
        "upload_time_iso_8601": "2021-05-16T15:12:20.707104Z",
        "url": "https://files.pythonhosted.org/packages/3c/38/a6f878b210e3b7a7b4be0e7521c916a14a635d7e391469bdfb915be1a49a/metext-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e267b384f99f2771b46dadb0faefcfb221431d9e6bfacecacf9bc915d4897be",
          "md5": "ddfea7d79bd57e29a2b7cf43bd2710ab",
          "sha256": "ac96c309d35839894167ddfc282024376e5771f65380fda41ec8b6744f03ec41"
        },
        "downloads": -1,
        "filename": "metext-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ddfea7d79bd57e29a2b7cf43bd2710ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 50663,
        "upload_time": "2021-05-16T15:12:22",
        "upload_time_iso_8601": "2021-05-16T15:12:22.336993Z",
        "url": "https://files.pythonhosted.org/packages/2e/26/7b384f99f2771b46dadb0faefcfb221431d9e6bfacecacf9bc915d4897be/metext-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b763a31bb0ef481e0debd81bbaa0d264c66c74e91c34a6d054a8044d4d8b775d",
          "md5": "64569fd14d36ac2e530f7dfbed355aba",
          "sha256": "84347730a0e2a4d9166fe7f177b6a7cfc27d0205e9d1017f6046ca4e4fbc65c2"
        },
        "downloads": -1,
        "filename": "metext-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64569fd14d36ac2e530f7dfbed355aba",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 74391,
        "upload_time": "2021-05-16T15:52:38",
        "upload_time_iso_8601": "2021-05-16T15:52:38.246786Z",
        "url": "https://files.pythonhosted.org/packages/b7/63/a31bb0ef481e0debd81bbaa0d264c66c74e91c34a6d054a8044d4d8b775d/metext-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ed193ee3e44d7e24ec42a927f686b715fe3e963d08be6b93ae7b92eeec7f24d",
          "md5": "2f248dc0cec099d13b06d0e3cbbf94c5",
          "sha256": "00cf9aec669f0f65b568b1a1167dfd6b29f072b017049fc4f7c538e12e8c67f5"
        },
        "downloads": -1,
        "filename": "metext-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2f248dc0cec099d13b06d0e3cbbf94c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 51911,
        "upload_time": "2021-05-16T15:52:39",
        "upload_time_iso_8601": "2021-05-16T15:52:39.703823Z",
        "url": "https://files.pythonhosted.org/packages/0e/d1/93ee3e44d7e24ec42a927f686b715fe3e963d08be6b93ae7b92eeec7f24d/metext-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b763a31bb0ef481e0debd81bbaa0d264c66c74e91c34a6d054a8044d4d8b775d",
        "md5": "64569fd14d36ac2e530f7dfbed355aba",
        "sha256": "84347730a0e2a4d9166fe7f177b6a7cfc27d0205e9d1017f6046ca4e4fbc65c2"
      },
      "downloads": -1,
      "filename": "metext-0.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "64569fd14d36ac2e530f7dfbed355aba",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 74391,
      "upload_time": "2021-05-16T15:52:38",
      "upload_time_iso_8601": "2021-05-16T15:52:38.246786Z",
      "url": "https://files.pythonhosted.org/packages/b7/63/a31bb0ef481e0debd81bbaa0d264c66c74e91c34a6d054a8044d4d8b775d/metext-0.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ed193ee3e44d7e24ec42a927f686b715fe3e963d08be6b93ae7b92eeec7f24d",
        "md5": "2f248dc0cec099d13b06d0e3cbbf94c5",
        "sha256": "00cf9aec669f0f65b568b1a1167dfd6b29f072b017049fc4f7c538e12e8c67f5"
      },
      "downloads": -1,
      "filename": "metext-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2f248dc0cec099d13b06d0e3cbbf94c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 51911,
      "upload_time": "2021-05-16T15:52:39",
      "upload_time_iso_8601": "2021-05-16T15:52:39.703823Z",
      "url": "https://files.pythonhosted.org/packages/0e/d1/93ee3e44d7e24ec42a927f686b715fe3e963d08be6b93ae7b92eeec7f24d/metext-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}