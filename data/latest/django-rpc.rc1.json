{
  "info": {
    "author": "Dmitriy Kostochko",
    "author_email": "alerionum+django@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "*********\nDjangoRpc\n*********\n\nDjango RPC for jQuery. Allows execute some server-side class methods with Javascript in your browser.\n\nAlso you can submit forms with jQuery Form Plugin.\n\nIt also supports call batching. Django RPC batches together calls which are received within a configurable time frame and sends them in a single request.\n\nYou can easy move you current views to RPC methods and use Django RPC instead of mess of AJAX requests.\n\nInspired by Ext.Direct from ExtJs 3.\n\n`Package Documentation <https://django-rpc.readthedocs.org/>`_\n\n`Github repo <https://github.com/Alerion/django-rpc>`_\n\nInstallation\n============\n\nInstall using pip::\n\n    pip install django-rpc\n\n...or clone the project from github::\n\n    https://github.com/Alerion/django-rpct\n\n1. Add ``djangorpc`` application to ``INSTALLED_APPS`` settings::\n\n    INSTALLED_APPS = (\n        ...\n        'djangorpc',\n    )\n\nNow all required JS files are accessible via Django ``staticfiles`` application.\n\n2. Add jQuery to your page. You can use one from application for quick start::\n\n    <script src=\"{% static 'djangorpc/js/jquery-1.9.1.min.js' %}\"></script>\n\n3. In your base templates add required JS scripts::\n\n    <script src=\"{% static 'djangorpc/js/jquery.util.js' %}\"></script>\n    <script src=\"{% static 'djangorpc/js/jquery.rpc.js' %}\"></script>\n    <script src=\"{% static 'djangorpc/js/jquery.form.js' %}\"></script>\n\n3. You can handle all errors in one place and show some message to user::\n\n    //Show error message for RPC exceptions\n    jQuery.Rpc.on('exception', function(event){\n        alert('Error during RPC request: '+event.message);\n    });\n\n4. Do not forget about CSRF for Ajax requests.\n\nExample\n=======\n\nLet's take a look at a quick example how to use Django RPC application.\n\nWe'll create a page which calls server-side method using Django RPC and shows us alert with received message.\n\nCreate ``rpc.py`` in your project folder with following code::\n\n    from djangorpc import RpcRouter, Msg\n\n\n    class MainApiClass(object):\n\n        def hello(self, username, user):\n            return Msg(u'Hello, %s!' % username)\n\n    rpc_router = RpcRouter({\n        'MainApi': MainApiClass(),\n    })\n\nAdd this to ``urls.py``::\n\n    from django.conf.urls import patterns, include, url\n    from rpc import rpc_router\n\n\n    urlpatterns = patterns('someproject.someapp.views',\n        url(r'^rpc/', include(rpc_router.urls))\n    )\n\nAdd following code to page template::\n\n    <script src=\"{% url 'jsapi' %}\"></script>\n    <script>\n        MainApi.hello('username', function(resp, sb){\n            alert(resp.msg);\n        });\n    </script>\n\nReload page and you will see an alert with the message \"Hello, username!\".\n\nIf you get an error 403, you may have forgotten about CSRF.\n\nHere is an example of CSRF cookie injection::\n\n    <script>\n        function getCookie(name) {\n            var cookieValue = null;\n            if (document.cookie && document.cookie != '') {\n                var cookies = document.cookie.split(';');\n                for (var i = 0; i < cookies.length; i++) {\n                    var cookie = jQuery.trim(cookies[i]);\n                    // Does this cookie string begin with the name we want?\n\n                    if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                        break;\n                    }\n                }\n            }\n            return cookieValue;\n        }\n\n        $.ajaxSetup({\n            beforeSend: function (xhr, settings) {\n                if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {\n                    // Only send the token to relative URLs i.e. locally.\n                    xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n                }\n            },\n            dataType: 'json',\n            error:function(jqXHR, textStatus, errorThrown){\n                alert(textStatus +'\\n'+ errorThrown)\n            }\n        });\n    </script>\n\nThe working project example you can find in our repo.\n\nContributing\n============\n\nDevelopment for this software happend on github, and the main fork is currently at https://github.com/Alerion/Django-RPC\n\nContributions are welcome in any format, but using github's pull request system is very highly preferred since it makes review and integration much easier.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://django-rpc.readthedocs.org/",
    "keywords": "Django,RPC,API,jQuery",
    "license": "The MIT License (MIT)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rpc",
    "package_url": "https://pypi.org/project/django-rpc/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-rpc/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://django-rpc.readthedocs.org/"
    },
    "release_url": "https://pypi.org/project/django-rpc/0.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django RPC for jQuery",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1462637,
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98224a7e743fe5ef6b5b0f03af5559261a1946ec9a62c65046c57c4d58d0f360",
          "md5": "264301d0665147d848fb2955aae956ec",
          "sha256": "7f3ff93aaaed5041945c6c6ec69f17584719fa4b6202e2a2138f8017e77445ad"
        },
        "downloads": -1,
        "filename": "django-rpc-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "264301d0665147d848fb2955aae956ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71727,
        "upload_time": "2015-03-16T12:00:56",
        "upload_time_iso_8601": "2015-03-16T12:00:56.409162Z",
        "url": "https://files.pythonhosted.org/packages/98/22/4a7e743fe5ef6b5b0f03af5559261a1946ec9a62c65046c57c4d58d0f360/django-rpc-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98224a7e743fe5ef6b5b0f03af5559261a1946ec9a62c65046c57c4d58d0f360",
        "md5": "264301d0665147d848fb2955aae956ec",
        "sha256": "7f3ff93aaaed5041945c6c6ec69f17584719fa4b6202e2a2138f8017e77445ad"
      },
      "downloads": -1,
      "filename": "django-rpc-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "264301d0665147d848fb2955aae956ec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 71727,
      "upload_time": "2015-03-16T12:00:56",
      "upload_time_iso_8601": "2015-03-16T12:00:56.409162Z",
      "url": "https://files.pythonhosted.org/packages/98/22/4a7e743fe5ef6b5b0f03af5559261a1946ec9a62c65046c57c4d58d0f360/django-rpc-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}