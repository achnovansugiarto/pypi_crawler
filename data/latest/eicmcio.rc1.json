{
  "info": {
    "author": "Dmitry Romanov",
    "author_email": "romanov@jlab.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# ejpm\n\n**ejpm** stands for **e**<sup>**J**ANA</sup> **p**acket ~~**m**anager~~ helper\n\n**The main goal** of ejpm is to provide easy experience of:\n\n* installing e<sup>JANA</sup> reconstruction framework and dependent packages\n* unify installation for different environments: various operating systems, docker images, etc. \n\nThe secondary goal is to help users with e^JANA plugin development cycle.\n\n***TL;DR;*** example for CentOS/RHEL7\n```bash\n\n# INSTALL PREREQUESTIES\nejpm req centos ejana         # get list of OS packets required to build jana and deps\nsudo yum install ...          # install watever 'ejpm req' shows\n\n# or if you are a lucky bash user (yes, csh is still common in physics):\nsudo yum install $(ejpm req centos ejana --all) \n\n# SETUP EJPM\nejpm --top-dir=<where-to>   # Directory where packets will be installed\nejpm set root `$ROOTSYS`    # (optional) if you have CERN.ROOT or other monster packets: \n\n# INSTALL PACKETS\nejpm install ejana          # install ejana and dependencies (like genfit, jana and rave)\nejpm install g4e            # install 'Geant 4 EIC' and dependencies (like vgm, hepmc)\n\n# SET RIGHT ENVIRONMENT \nsource<$(ejpm env)          # set environment variables, \nsource ~/.local/share/ejpm/env.sh  # more convenient way. Use *.csh file for tcsh\n```\n\n\n### Motivation\n\n**ejpm** is here as there is no standard convention in HEP and NP of how to distribute and install software packages \nwith its dependencies. Some packages (like eigen, xerces, etc.) are usually supported by \nOS maintainers, while others (Cern ROOT, Geant4, Rave) are usually built by users or \nother packet managers and could be located anywhere. Here comes \"version hell\" multiplied by lack of software manpower \n(e.g. to continuously maintain packages on distros level or even to fix GitHub issues) \nStill we love our users and try to get things easier for them!\nSo here is ejpm.\n\n\nAt this points **ejpm** tries to unify experience and make it simple to deploy e^JANA for:\n\n- Users on RHEL 7, 8 and CentOS\n- Users on Ubutnu/Debian (and Windows with WSL) \\*\\*\n- Docker and other containers\n\n\nIt should be as easy as ```> ejpm install ejana``` to build and install a packet called 'ejana'\n and its dependencies. But it should also provide a possibility to adopt existing installations\n  and have a fine control over dependencies: ```> ejpm set root /opt/root6_04_16```\n\n**ejpm** is not: \n\n1. It is not a **real** package manager, which automatically solves dependencies, \ndownload binaries (working with GPG keys, etc.), finds fastest mirrors, manage... etc. \n2. **ejpm is not a requirment** for e<sup>JANA</sup>. It is not a part of e<sup>JANA</sup> \n    build system and one can compile and install e<sup>JANA</sup> without ejpm   \n\n\n## Get ejana installed\n\nStep by step explained instruction:\n\n1. **Install prerequisites** utilizing OS packet manager:\n\n    ```bash\n    # To see the prerequesties\n    ejpm req ubuntu         # for all packets that ejpm knows\n    ejpm req centos ejana   # for ejana and its dependencies only\n\n    # To put everything into packet manager \n    apt-get -y install `ejpm req ubuntu --all`   # debian\n    yum -y install `ejpm req centos --all`       # centos/centos    \n    ```\n\n    At this point only ***'ubuntu'*** and ***'centos'*** are known words for req command. Put: \n    * ***ubuntu*** for debian family \n    * ***centos*** for RHEL and CentOS systems.\n\n    *In the future this will be updated to support macOS and to have more detailed versions*\n\n2. **Set top-dir**. This is where all missing packets will be installed.   \n\n    ```bash\n    ejpm --top-dir=<where-to-install-all>\n    ```\n\n3. **Register installed packets**. You may have CERN.ROOT installed (req. version >= 6.14.00). Run this:\n    ```bash\n    ejpm set root `$ROOTSYS` \n    ```\n\n   You may set paths for other installed dependencies combining:  \n   ```bash\n   ejpm install ejana --missing --explain    # to see missing dependencies\n   ejpm set <name> <path>                    # to set dependency path\n   ```\n\n   Or you may skip this step and just get everything installed by ejpm\n\n4. **Install ejana** and all missing dependencies:\n\n    ```bash\n    ejpm install ejana\n    ```\n\n5. **Set environment**. There are 3 ways for doing this this: \n\n    1. Dynamically source output of ```ejpm env``` command (recommended)\n\n        ```bash        \n        source <(ejpm env)                # works for bash only\n        ```\n    2. Save output of ```ejpm env``` command to a file (can be useful)\n\n        ```bash\n         ejpm env sh  > your-file.sh       # get environment for bash or compatible shells\n         ejpm env csh > your-file.csh      # get environment for CSH/TCSH\n        ```\n    3. Use ejpm generated ```env.sh``` and ```env.csh``` files (lazy and convenient)\n\n        ```bash        \n        $HOME/.local/share/ejpm/env.sh    # bash and compatible\n        $HOME/.local/share/ejpm/env.csh   # for CSH/TCSH\n        ```\n        (!) The files are regenerated each time ```ejpm <command>``` changes something in EJPM.\n        If you change ```db.json``` by yourself, ejpm doesn't track it automatically, so call 'ejpm env'\n        to regenerate these 2 files\n\n\n## Environment\n\n ```EJPM_DATA_PATH```- sets the path where the configuration db.json and env.sh, env.csh are located\n\n\nEach time you make changes to packets, \nEJPM generates `env.sh` and `env.csh` files, \nthat could be found in standard apps user directory.\n\nFor linux it is in XDG_DATA_HOME:\n\n```\n~/.local/share/ejpm/env.sh      # sh version\n~/.local/share/ejpm/env.csh     # csh version\n~/.local/share/ejpm/db.json     # open it, edit it, love it\n```\n\n> XDG is the standard POSIX paths to store applications data, configs, etc. \nEJPM uses [XDG_DATA_HOME](https://wiki.archlinux.org/index.php/XDG_Base_Directory#Specification)\nto store `env.sh`, `env.csh` and `db.json` and ```db.json```\n\nYou can always get fresh environment with ejpm ```env``` command \n```bash\nejpm env\n```\n\nYou can directly source it like:\n```bash\nsource<(ejpm env)\n```\n\nYou can control where ejpm stores data by setting ```EJPM_DATA_PATH``` environment variable.\n\n\n<br><br>\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eic/eicmcio",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eicmcio",
    "package_url": "https://pypi.org/project/eicmcio/",
    "platform": "",
    "project_url": "https://pypi.org/project/eicmcio/",
    "project_urls": {
      "Homepage": "https://github.com/eic/eicmcio"
    },
    "release_url": "https://pypi.org/project/eicmcio/0.0.2/",
    "requires_dist": [
      "HepMC3"
    ],
    "requires_python": "",
    "summary": "EIC Monte-Carlo io library",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9932232,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e21381383ea2d6dd37f02e167b31d6005d678cd49e067cd63b16d410c018b8ca",
          "md5": "c86662bd6b92b3e0ac12c49236d346ff",
          "sha256": "22408640d03e47d4cdf7e12fc859e085767d156131d1458fe5630acde5edaab5"
        },
        "downloads": -1,
        "filename": "eicmcio-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c86662bd6b92b3e0ac12c49236d346ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8349,
        "upload_time": "2021-03-31T03:25:16",
        "upload_time_iso_8601": "2021-03-31T03:25:16.085451Z",
        "url": "https://files.pythonhosted.org/packages/e2/13/81383ea2d6dd37f02e167b31d6005d678cd49e067cd63b16d410c018b8ca/eicmcio-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e5abfda06205513a6b59f54e5278fea72a148c261fa521d495e85c3b0b50633",
          "md5": "6583a94a816892296ba2768d039aaaed",
          "sha256": "01db6b4ca3b943dec270e19ecd2694cdb84a2ff816c588cd7039fe8796fddf95"
        },
        "downloads": -1,
        "filename": "eicmcio-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6583a94a816892296ba2768d039aaaed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7901,
        "upload_time": "2021-03-31T03:25:17",
        "upload_time_iso_8601": "2021-03-31T03:25:17.355165Z",
        "url": "https://files.pythonhosted.org/packages/4e/5a/bfda06205513a6b59f54e5278fea72a148c261fa521d495e85c3b0b50633/eicmcio-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e21381383ea2d6dd37f02e167b31d6005d678cd49e067cd63b16d410c018b8ca",
        "md5": "c86662bd6b92b3e0ac12c49236d346ff",
        "sha256": "22408640d03e47d4cdf7e12fc859e085767d156131d1458fe5630acde5edaab5"
      },
      "downloads": -1,
      "filename": "eicmcio-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c86662bd6b92b3e0ac12c49236d346ff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8349,
      "upload_time": "2021-03-31T03:25:16",
      "upload_time_iso_8601": "2021-03-31T03:25:16.085451Z",
      "url": "https://files.pythonhosted.org/packages/e2/13/81383ea2d6dd37f02e167b31d6005d678cd49e067cd63b16d410c018b8ca/eicmcio-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e5abfda06205513a6b59f54e5278fea72a148c261fa521d495e85c3b0b50633",
        "md5": "6583a94a816892296ba2768d039aaaed",
        "sha256": "01db6b4ca3b943dec270e19ecd2694cdb84a2ff816c588cd7039fe8796fddf95"
      },
      "downloads": -1,
      "filename": "eicmcio-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6583a94a816892296ba2768d039aaaed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7901,
      "upload_time": "2021-03-31T03:25:17",
      "upload_time_iso_8601": "2021-03-31T03:25:17.355165Z",
      "url": "https://files.pythonhosted.org/packages/4e/5a/bfda06205513a6b59f54e5278fea72a148c261fa521d495e85c3b0b50633/eicmcio-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}