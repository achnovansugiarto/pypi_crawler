{
  "info": {
    "author": "Emmanuel Norambuena",
    "author_email": "eanorambuena@uc.cl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Eve\n\nEve is a Nateve Programming Language tokenizer developed using python 3.8\n\n## Nateve\n\nNateve is a new general domain programming language open source inspired by languages like Python, C++, JavaScript, and Wolfram Mathematica.\n\nNateve is an transpiled language. Its first transpiler, Adam, is fully built using Python 3.8.\n\n## Nateve principal features\n\n### 1. Simple and easy to use\n\nJust install the package and start coding.\n\n### 2. Intuitive and easy to understand\n\nQuickly understand the language and its features.\n\n### 3. 100% free and open source\n\nThe language is free and open source. You can use it for any purpose. See the [license](LICENSE).\n\n### 4. 100% customizable\n\nYou can customize the language to your needs. You can make your own language from scratch. See the [Welcome to Nateve templates](#welcome-to-nateve-templates) section for more information.\n\n## Welcome to Nateve templates\n\nNateve Language includes a set of templates that can be used to customize Nateve. Templates are Python modules included in the templates subpackage. You can also create your own templates.\n\nA template is a Python module that contains a set of words translations, functions definitions, and many other customizations. Every template can be used to customize Nateve. You just need to import the template with the `using` command and then use the template in the Nateve source code.\n\nLearn more about templates in the [templates use](#using-templates) section.\n\n## Why use Nateve templates?\n\n### 1. Customization\n\nYou can customize the language to your needs. Feel free to create your own templates or modify existing templates.\n\n### 2. Team work\n\nYour team can work together using different languages in the same file or project. For example, you can start coding in English and then switch to French.\n\nIt makes it easier to work together. Different team members can work on the same project using their native languages.\n\n### 3. Easy to share\n\nYour templates can be used by other developers. You can easily share your templates with the community.\n\n## Options of command line\n\n1. `build`: Transpile Nateve source code to Python 3.8\n2. `run`: Run Nateve source code\n3. `transpile`: Transpile Nateve source code to an executable file (.exe)\n4. `run-init-loop`: Run Nateve source code with an initial source and a loop source\n5. `set-time-unit`: Set Adam time unit to seconds or miliseconds (default: milisecond)\n6. `-v`: Activate verbose mode\n\n## Nateve Tutorial\n\nIn this tutorial, we will learn how to use Nateve step by step.\n\n### Step 0: Learn the basics\n\nWe recommend read this README.md file.\n\n### Step 1: Installation\n\nRecommend Installation:\n\n#### Clone the repo\n\n```bash\n$> git clone ...\n```\n\n#### Add to path\n\n#### Add your favorite templates\n\n### Step 2: Create a new Nateve file\n\n```bash\n$> cd my-project\n$> COPY CON main.nateve\n```\n\n### Quick start examples\n\n#### Hello World program\n\n```python\nprint(\"Hello, World!\")\n```\n\n#### Is prime? program\n\n```python\ndef is_prime(n) {\n    if n == 1 {\n        return False\n    }\n    for i in range(2, n) {\n        if n % i == 0 {\n            return False\n        }\n    }\n    return True\n}\n\nn = ninput(\"Enter a number: \")\n\nif is_prime(n) {\n    print(\"It is a prime number.\")\n}\nelse {\n    print(\"It is not a prime number.\")\n}\n```\n\n### Comments\n\nIf you want to comment your code, you can use:\n\n```bash\n~ This is a single line comment ~\n\n~\n    And this a multiline comment\n~\n```\n\n### Variables\n\nThis language uses variables. For declaring variables, you just need to write the name of the variable and the value of the variable.\n\nFor example:\n\n```python\na = 1                          ~ Interger ~\nb = 1.0                        ~ Float ~\nc = 1 + 2j                     ~ Complex ~\nd = \"hello\"                    ~ String ~\ne = True                       ~ Boolean ~\nf = [1,2,3]                    ~ List ~\ng = (1,2)                      ~ Tuple ~\nh = Vector([1,2,3])            ~ Vector ~\ni = Polynomial(\"1 +2x +x^2\")   ~ Polynomial ~\nj = Matrix(\"\"\"\n| 1 1 2 3 4 |\n| 0 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n\"\"\")                           ~ Matrix ~\n```\n\nNateve allows data type as Integer, Float, Complex, Boolean, String, List, Tuple, None, Vector, Polynomial and Matrix.\n\n### Lists\n\nThe Lists allow to use all the data types before mentioned, as well as lists and functions.\n\nAlso, they allow to get an item through the next notation:\n\n```python\nvalue_list = [1,2,3,4,5,6,7,8,9]\nprint(value_list[0])      ~ Output: 1 ~\nprint(value_list[0 : 4])  ~ Output: [1,2,3,4] ~\n```\n\n### Functions\n\nFor declaring a function, you have to use the next syntax:\n\n```python\ndef example_function(argument1, argument2, ...) {\n    sentence1\n    sentence2\n    ...\n    return Return_Value\n} \n\nexample_function(argument1, argument2, ...) ~ Call the function ~\n```\n\n### Conditionals\n\nRegarding the conditionals, the syntax structure is:\n\n```python\nif condition {\n    consequence\n}\nelif condition {\n    other_consequence\n}\n...\nelse {\n    default_consequence\n}\n```\n\nFor example:\n\n```python\nif x <= 1 and x % 3 == 0 {\n    a = 0\n}\nelif x == 9 {\n    a = 1\n}\nelse {\n    a = 2\n}\n```\n\n### Loops\n\nIn order to use loops, you have to use the next syntax:\n\n#### While Loop\n\n```python\nwhile condition {\n    sentence1\n    sentence2\n    ...\n}  \n```\n\n#### For Loop\n\n```python\nfor iterator in iterable {\n    sentence1\n    sentence2\n    ...\n}  \n```\n\n## Using Templates\n\nOne of the most important features of Nateve is the use of templates. Templates are a way to write code in a more readable way. They are words translations written in Python. In order to use templates, you just have to write the protected word \"using\", and then, write the name of the template. For example:\n\n```c++\nusing \"template_name\"\n```\n\nNateve includes the following standard templates:\n\n1. `\"english\"`: This template is used to write the code of the program in English. It is the default template.\n2. `\"spanish\"`: This template is used to write the code of the program in Spanish.\n3. `\"french\"`: This template is used to write the code of the program in French.\n\nYou also can use your own templates. Just create a file with the name of the template and write the code of the template in the file. Here is a blank template:\n\n```python\n# The name of the transpiler. This line is required. Do not change it.\ntranspiler_name = \"adam\"\n\n\"\"\"\nThe following code is the translation of the code.\nYou can write your code here and modify the content of the variables.\nDo not change the name of the variables.\n\"\"\"\n\n# All the symbols that the transpiler uses.\nmayusc = \"ABCDEFGHIJKLMNÃ‘OPQRSTUVWXYZ\"\nalphabet = mayusc + mayusc.lower() + \"_\"\ndigits = \"0123456789\"\nalphanum = alphabet + digits\nblanks = \"/t /n\"\nstrings = [\"'\", '\"', '\"\"\"', \"'''\"]\ncommentaries = \"~\"\nfloating = \".\"\none_char_symbols = \"+-*/%=<>()[]{}#$@,.\"\ntwo_char_symbols = [\"//\", \"==\", \"<=\", \">=\"]\n\n# All the data types that the transpiler uses.\nFLOAT = \"float\"\nINT = \"int\"\nCOMPLEX = \"complex\"\nSTRING = \"string\"\nDOCSTRING = \"docstring\"\nNULL = \"none\"\n\n# All the keywords that the transpiler uses.\nUSE, WAIT, INCLUDE = \"using\", \"wait\", \"include\"\nIMPORT, FROM, AS, PASS, IN = \"import\", \"from\", \"as\", \"pass\", \"in\"\nIF, ELIF, ELSE = \"if\", \"elif\", \"else\"\nTRY, EXCEPT = \"try\", \"except\"\nWHILE, FOR, BREAK, CONTINUE = \"while\", \"for\", \"break\", \"continue\"\nOPERATOR, RETURN = \"def\", \"return\"\nCLASS, SELF = \"class\", \"self\"\nAND, OR, NOT, TRUE, FALSE = \"and\", \"or\", \"not\", \"True\", \"False\"\n\n# All the status codes that the transpiler uses.\nidentifier = 300\neof = 400\n\n# All extra functions that the transpiler uses. Feel free to add your own functions.\n# The string special_functions is used to write these functions.\n# You can use variables in it using the fstring notation.\n# For example: \"include\" function calls the variable transpiler_name.\nspecial_functions = f\"\"\"\ndef ninput(prompt = '', default = ''):\n\\treturn float(input(prompt, default))\n\ndef binput(prompt = '', default = ''):\n\\treturn bool(input(prompt, default))\n\ndef update_std():\n\\tsubprocess.call([sys.executable, '-m', 'pip', 'install', 'eggdriver'])\n\ndef include(file_name = ''):\n\\tfile = file_name.split('.')[0]\n\\tsubprocess.call([sys.executable, '-m', '{transpiler_name}', 'build', file])\n\"\"\" \n```\n\n## Some Examples\n\n```python\n~Nateve Example 1~\n\nupdate_std()  ~update std library~\n\nfor i in range(2) {\n    print(i)\n}\n\ninstall(\"matplotlib\")\n\ntry {\n    print(2/0)\n}\n    \nexcept {\n    print(\"xd\")\n}\n```\n\nOutput:\n\n```bash\n0\n1\nmatplotlib successfully installed\nxd\n```\n\n```python\n~Nateve Example 2~\n\ntheta = pi/3\nprint(sin(theta), cos(theta), tan(theta))\n\np = sin_serie\nprint(p.eval(theta))\n\nderive(p)\n\nprint(p.eval(theta))\n\nimport numpy as np\nx = \"hello\"\nc = Matrix(\"\"\"\n| 1 1 2 3 4 |\n| 0 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n\"\"\")\nc.display()\n\na = Vector(\"[ 1 2 3 4 5 6 30 0 9]\")\na.display()\n```\n\nOutput:\n\n```bash\n0.8660254037844386 0.5000000000000001 1.73205080756887\n0.8660254037844386\n0.5000000000000001\n| 1 1 2 3 4 |\n| 0 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n[ 1 2 3 4 5 6 30 0 9 ]\n```\n\n```python\n~Nateve Example 3~\n\nusing \"spanish\"\n\ntheta = pi/3\nimprime(sen(theta), cos(theta), tan(theta))\n\np = serie_sen\nimprime(p.eval(theta))\n\nderiva(p)\n\nimprime(p.eval(theta))\n\nimporta numpy como np\nx = \"hello\"\nc = Matriz(\"\"\"\n| 1 1 2 3 4 |\n| 0 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n\"\"\")\nc.display()\n\na = Vector(\"[ 1 2 3 4 5 6 30 0 9]\")\na.display()\n```\n\nOutput:\n\n```bash\n0.8660254037844386 0.5000000000000001 1.73205080756887\n0.8660254037844386\n0.5000000000000001\n| 1 1 2 3 4 |\n| 0 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n| 1 1 2 3 4 |\n[ 1 2 3 4 5 6 30 0 9 ]\n```\n\n```python\n~Nateve Example 4~\n\nusing \"spanish\"\n\namo_Nateve = verdadero\n\nsi  amo_Nateve == verdadero {\n    imprime(\"Yo amo Nateve!\")\n}\n\ndelocontrario {\n    imprime(\"Odio Nateve :c\")\n}\n\nusando \"english\"\n\nif 1 < 3 {\n    print(\"Try Nateve!\")\n}\nelse {\n    print(\"NO\")\n}\n\nusing \"french\"\n\nv = \"Bonjour\"\nimprimer(v, \"Nateve!\")\n```\n\nOutput:\n\n```bash\nYo amo Nateve!\nTry Nateve!\nBonjour Nateve!\n```\n\n## Feedback\n\nI would really appreciatte your feedback. You can submit a new issue.\n\n## Contribute\n\nThis is an **opensource** project, everyone can contribute and become a member of the community of **Nateve**.\n\n## Why be a member of the Nateve community?\n\n### 1. A simple and understandable code\n\nThe source code of Adam is made with Python 3.8, a language easy to learn, also good practices are a priority for this project.\n\n### 2. A great potencial\n\nThis project has a great potential to be the next programming language for education, to develop the quantum computing, and to develop the AI.\n\n### 3. Simple\n\nOne of the main purposes of this programming language is to create an easy-to-learn language, which at the same time is capable of being used for many different purposes.\n\n### 4. Respect for diversity\n\nEverybody is welcome, it does not matter your genre, experience or nationality. Anyone with enthusiasm can be part of this project. Anyone from the most expert to the that is beginning to learn about programming, marketing, design, or any career.\n\n## How to start contributing?\n\nThere are multiply ways to contribute, since sharing this project, improving the brand of SigmaF, helping to solve the bugs or developing new features and making improves to the source code.\n\n- **Share this project**: You can put your star in the repository, use the topic [nateve](https://github.com/topics/nateve) or talk about this project. You can use the hashtag #Nateve in Twitter, LinkedIn or any social network too.\n  \n- **Improve the brand of Nateve**: If you are a marketer, designer or writer, and you want to help, you are welcome.\n  \n- **Help to solve the bugs**: if you find one bug notify us an issue. On this we can all improve this language.\n  \n- **Developing new features**: If you want to develop new features or making improvements to the project, you can do a fork to the `dev` branch (here are the ultimate develops) working there, and later do a [`pull request`](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request) to `dev` branch in order to update **Nateve**.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/NateveLang/Eve/archive/v0.0.1a1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NateveLang/Eve",
    "keywords": "development,quantum computing,programming language,nateve,natevelang,nate,education",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nateve-eve",
    "package_url": "https://pypi.org/project/nateve-eve/",
    "platform": "",
    "project_url": "https://pypi.org/project/nateve-eve/",
    "project_urls": {
      "Bug Reports": "https://github.com/NateveLang/Eve/issues",
      "Download": "https://github.com/NateveLang/Eve/archive/v0.0.1a1.tar.gz",
      "Homepage": "https://github.com/NateveLang/Eve",
      "Source": "https://github.com/NateveLang/Eve"
    },
    "release_url": "https://pypi.org/project/nateve-eve/0.0.1a1/",
    "requires_dist": [
      "eggdriver"
    ],
    "requires_python": ">=3.5, <=3.8",
    "summary": "Nateve tokenizer developed with python 3.8",
    "version": "0.0.1a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12531708,
  "releases": {
    "0.0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "895ba4335ffafacc3340c0a9a8ee62355bb5bb38d89bd316c57b40359a9365cc",
          "md5": "0d3fb392186150a9b8d0798e733dc0cb",
          "sha256": "8dda9fdd81cba8079c50f5e6372633eb7736ae83e421298722f3de1e4dc28df0"
        },
        "downloads": -1,
        "filename": "nateve_eve-0.0.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d3fb392186150a9b8d0798e733dc0cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <=3.8",
        "size": 26947,
        "upload_time": "2022-01-10T18:55:35",
        "upload_time_iso_8601": "2022-01-10T18:55:35.317389Z",
        "url": "https://files.pythonhosted.org/packages/89/5b/a4335ffafacc3340c0a9a8ee62355bb5bb38d89bd316c57b40359a9365cc/nateve_eve-0.0.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c0248e7f5dc97492bc4eedb93d351983e6c64d794b93e318c52e9ef6ebd1648",
          "md5": "d8d4e33b071b7964cd26fb9189c4f57b",
          "sha256": "86f211b18f625e1f7bb26a6d024705479f404f9ed09995edec50734880713595"
        },
        "downloads": -1,
        "filename": "nateve-eve-0.0.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8d4e33b071b7964cd26fb9189c4f57b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5, <=3.8",
        "size": 23812,
        "upload_time": "2022-01-10T18:55:36",
        "upload_time_iso_8601": "2022-01-10T18:55:36.755058Z",
        "url": "https://files.pythonhosted.org/packages/1c/02/48e7f5dc97492bc4eedb93d351983e6c64d794b93e318c52e9ef6ebd1648/nateve-eve-0.0.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "438c1276c61ec96c34181805b7c888b899b4574488dda9331d7bb84ad97cc8e8",
          "md5": "4395f17221be57b319354ece24197742",
          "sha256": "635da559b00a8973ffa89e356ef9b2b6443a38a4c66dd5326f065e6e82d18196"
        },
        "downloads": -1,
        "filename": "nateve_eve-0.0.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4395f17221be57b319354ece24197742",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <=3.8",
        "size": 26952,
        "upload_time": "2022-01-10T19:00:06",
        "upload_time_iso_8601": "2022-01-10T19:00:06.879626Z",
        "url": "https://files.pythonhosted.org/packages/43/8c/1276c61ec96c34181805b7c888b899b4574488dda9331d7bb84ad97cc8e8/nateve_eve-0.0.1a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a94b115485666a6a50e1913835bb52bc33338af576984148deb8b667c2fecd57",
          "md5": "4a2ac224ca1bc6d69ff8b54b0d5f58ad",
          "sha256": "1c34e7df4d759ccb12c31c93414221847d392ee10d47f44058a80dfe1d16b013"
        },
        "downloads": -1,
        "filename": "nateve-eve-0.0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "4a2ac224ca1bc6d69ff8b54b0d5f58ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5, <=3.8",
        "size": 23784,
        "upload_time": "2022-01-10T19:00:09",
        "upload_time_iso_8601": "2022-01-10T19:00:09.094613Z",
        "url": "https://files.pythonhosted.org/packages/a9/4b/115485666a6a50e1913835bb52bc33338af576984148deb8b667c2fecd57/nateve-eve-0.0.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "438c1276c61ec96c34181805b7c888b899b4574488dda9331d7bb84ad97cc8e8",
        "md5": "4395f17221be57b319354ece24197742",
        "sha256": "635da559b00a8973ffa89e356ef9b2b6443a38a4c66dd5326f065e6e82d18196"
      },
      "downloads": -1,
      "filename": "nateve_eve-0.0.1a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4395f17221be57b319354ece24197742",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5, <=3.8",
      "size": 26952,
      "upload_time": "2022-01-10T19:00:06",
      "upload_time_iso_8601": "2022-01-10T19:00:06.879626Z",
      "url": "https://files.pythonhosted.org/packages/43/8c/1276c61ec96c34181805b7c888b899b4574488dda9331d7bb84ad97cc8e8/nateve_eve-0.0.1a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a94b115485666a6a50e1913835bb52bc33338af576984148deb8b667c2fecd57",
        "md5": "4a2ac224ca1bc6d69ff8b54b0d5f58ad",
        "sha256": "1c34e7df4d759ccb12c31c93414221847d392ee10d47f44058a80dfe1d16b013"
      },
      "downloads": -1,
      "filename": "nateve-eve-0.0.1a1.tar.gz",
      "has_sig": false,
      "md5_digest": "4a2ac224ca1bc6d69ff8b54b0d5f58ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5, <=3.8",
      "size": 23784,
      "upload_time": "2022-01-10T19:00:09",
      "upload_time_iso_8601": "2022-01-10T19:00:09.094613Z",
      "url": "https://files.pythonhosted.org/packages/a9/4b/115485666a6a50e1913835bb52bc33338af576984148deb8b667c2fecd57/nateve-eve-0.0.1a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}