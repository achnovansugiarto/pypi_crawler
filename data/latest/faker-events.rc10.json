{
  "info": {
    "author": "John Brandborg",
    "author_email": "john.brandborg+pypi@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "# Faker Events\n[![Python appliction](https://github.com/johnbrandborg/faker-events/workflows/Python%20application/badge.svg)](https://github.com/johnbrandborg/faker-events/actions?query=workflow%3A%22Python+application%22)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=johnbrandborg_faker-events&metric=alert_status)](https://sonarcloud.io/dashboard?id=johnbrandborg_faker-events)\n[![PyPI version](https://badge.fury.io/py/Faker-Events.svg)](https://pypi.org/project/Faker-Events/)\n\nGenerates Events with formatted fake data for streams. The intention is for\n development and testing purposes without relying on real data.\n\n## Usage\nFaker Events allows you to create multiple data structures, and events that\noccur randomly or schedule, after which are sent to a data stream or system,\nthrough the message handler.\n\nThe structures can be defined as Python Dictionaries, and processed using a\nfunction referred to as the profiler.\n\nThe Faker package is utilised to generate the data on the profiles.\nUnderstanding how Faker works is recommended and you can find the documentation\nfor it [here](https://faker.readthedocs.io/en/stable/).\n\nBeyond the profiles though for the custom event types any python data\ngeneration software can be used.\n\n### Installation\nBy default faker-events simply prints to standard out.  To use a stream, give\nthe option when installing.\n\n**Kafka**\n```bash\npip install faker-events[kafka]\n```\n\n**Kinesis**\n```bash\npip install faker-events[kinesis]\n```\n\n### Starting a Stream\nCreate an Event Generator and start using Live Stream. By default only 1\nprofile is created.  Giving large numbers of profiles can take sometime to\nbuild, but you can always save them by supplying the profile file name.\n\nSet the \"Events Per Minute\" when creating the event to change the maximum\nallowed, but subject to system performance also.  The default is 60 per\nminute with a variance of 25%.  Setting the variance to 0% will cause the\nevents to not be random.\n\nIf you want to see an example of this without writing code, run faker_events\nfrom the command line.  For help in using the CLI use the -h parameter.\n\n```shell\nfaker-events -n 10 -p profiles.json\n```\n\nOutput\n```json\n{\"event_time\": \"2022-05-19T22:43:39.683304\", \"type\": \"example\", \"event_id\": \"1\", \"user_id\": \"1009\", \"first_name\": \"Brandon\", \"last_name\": \"Braun\", \"spent\": 0, \"status\": \"normal\"}\n{\"event_time\": \"2022-05-19T22:43:40.291519\", \"type\": \"example\", \"event_id\": \"2\", \"user_id\": \"1002\", \"first_name\": \"Jonathan\", \"last_name\": \"Keith\", \"spent\": 0, \"status\": \"normal\"}\n{\"event_time\": \"2022-05-19T22:43:41.001050\", \"type\": \"example\", \"event_id\": \"3\", \"user_id\": \"1001\", \"first_name\": \"Lauren\", \"last_name\": \"Rodriguez\", \"spent\": 0, \"status\": \"normal\"}\n{\"event_time\": \"2022-05-19T22:43:41.358616\", \"type\": \"example\", \"event_id\": \"4\", \"user_id\": \"1004\", \"first_name\": \"Joseph\", \"last_name\": \"Frank\", \"spent\": 0, \"status\": \"normal\"}\n{\"event_time\": \"2022-05-19T22:43:42.356265\", \"type\": \"example\", \"event_id\": \"4\", \"user_id\": \"1004\", \"first_name\": \"Joseph\", \"last_name\": \"Frank\", \"spent\": 71, \"status\": \"normal\"}\n{\"event_time\": \"2022-05-19T22:43:42.788833\", \"type\": \"example\", \"event_id\": \"6\", \"user_id\": \"1003\", \"first_name\": \"Nathaniel\", \"last_name\": \"Garrett\", \"spent\": 0, \"status\": \"normal\"}\n{\"event_time\": \"2022-05-19T22:43:43.106967\", \"type\": \"example\", \"event_id\": \"7\", \"user_id\": \"1000\", \"first_name\": \"Jeffrey\", \"last_name\": \"Owens\", \"spent\": 0, \"status\": \"normal\"}\n{\"event_time\": \"2022-05-19T22:43:43.754115\", \"type\": \"example\", \"event_id\": \"2\", \"user_id\": \"1002\", \"first_name\": \"Jonathan\", \"last_name\": \"Keith\", \"spent\": 77, \"status\": \"normal\"}\n{\"event_time\": \"2022-05-19T22:43:44.121750\", \"type\": \"example\", \"event_id\": \"3\", \"user_id\": \"1001\", \"first_name\": \"Lauren\", \"last_name\": \"Rodriguez\", \"spent\": 93, \"status\": \"normal\"}\n```\n\nIf you would like to know more about how this Event Flow was created, read the\n[Example documentation](https://github.com/johnbrandborg/faker-events/blob/main/docs/Example.MD).\n\n\n#### Running a Faker Event Script\n\nYou can work with Faker Events interactively in Python, or you can just use\nthe class structures in a Python script, and call it using the command line\ninterface.\n\n```shell\nfaker-events -s fake_users_flow.py -n 1\n```\n\nIf you prefer to use Python diretly, use the `start` method on an\nEventGenerator instance, to begin the steam.\n\n\n#### Saving the Profile Data\n\nThe profile information created by Faker Events can be saved, so multiple runs\nof the python script will contain the same profile details.\n\n```shell\nfaker-events -s fake_users_flow.py -n 100 -p profiles.json\n```\n\n### Using Stream Handlers\nOnce you have installed Faker Events with the Stream type you want you\ncan now use a stream handler to send the JSON messages to Kakfa, or\nKinesis.\n\n**Kafka**\n```python\nfrom faker_events import EventGenerator, Stream\n\nexample = Stream(stype='kafka', host='kafka:9092', name='example')\nEventGenerator.set_stream(example)\n```\n\n**Kinesis**\n```python\nfrom faker_events import EventGenerator, Stream\n\nexample = Stream(stype='kinesis', name='example', key='key')\nEventGenerator.set_stream(example)\n```\n\nCreating a custom Stream handler is easy.  Just create a Class that has a\n`send` method, which takes the Dictionary of data, and then deliveries it.\n\n**Custom Handler**\n```python\nclass CustomStream():\n    def __init__(self, *args, **kwargs):\n        # Store Parameters and Connect to destination\n\n    def send(self, message: Dict) -> None:\n        # Do something with the message\n```\n\n### Starting a Batch\nCreate an Event Generator and use the batch method, with a start and finish\ndatetime object, and the frequncy like on the live stream.\n\n```python\nfrom datetime import datetime, timedelta\n\nfrom faker_events import EventGenerator\n\nstart = datetime(2019, 1, 1)  # No one wants to relive 2020...\nfinish = start + timedelta(seconds=10)\n\nEventGenerator.batch(start, finish)\n```\n\n## Data Points\n### Event Data Points\nThe Event Type has some basic data points about the event that can be used\nwithin the profiled method. (Access the Attribute using the 'event' within the\nprofiler)\n\n* id - The id of the particular event, based on the event dictionary.\n* time - The time the event occured (ISO Format).\n* data - Event Data for updates or augmented assignments.\n\nBy default the Event time is local time.  Set the timezone on the generator\nwhen required.\n\n### Profile Data Points\nWhen you use the Event Generator, the profiles you will use are created by the\nProfile Generator.  Each profile holds a number of data points. Below is a\nlist of attributes that can be used on the 'profile' within the Event Profiler\nfunction.\n\n* id\n* uuid\n* username\n* gender\n* first_name\n* last_name\n* prefix_name\n* suffix_name\n* birthdate\n* blood_group\n* email\n* employer\n* job\n* full_address1\n* building_number1\n* street_name1\n* street_suffix1\n* state1\n* postcode1\n* city1\n* phone1\n* full_address2\n* building_number2\n* street_name2\n* street_suffix2\n* state2\n* postcode2\n* city2\n* phone2\n* driver_license\n* license_plate\n\n## Profiling Events\nCreating an Event is as easy as just creating a dictionary that is passed into\nthe Event Class.  The Event Instance is then just set on the Event Generator,\nand you can then use the 'create_events' method which will return a generator,\nor us the 'start' or 'batch' methods that will handle the generator.\n\nIf you want event values to be dynamic, create a profiler functions. The\nfunction should take two arguments; event and profile.  These carry the attributes\nlisted above into the function for updating event values, or even creating new\nkey value pairs.\n\nUpdate the event yourself by using 'event.data', which contains the dictionary\npassed into the Event Class.  The other option is to return a dictionary with\nthe key value pairs you want to update.  The Event instance will handle updating\nthe values.\n\nThe profile is a randomly selected profile from the profiles created by the\nEvent Generator.  You can use details from the profile to build our events\nthat simulate customers, or entities.\n\n```python\nfrom faker import Faker\nfrom faker_events import Event, EventGenerator\n\nfake = Faker()\n\nevent = {\n    'Fixed': 'Doesnt Change',\n    'Once': fake.color(),\n    'Always': '',\n    'Profiled': '',\n}\n\ndef profiler(event, profile):\n    return {\n        'Always': fake.boolean(),\n        'Profiled': profile.email,\n    }\n\nEventGenerator.set_first_events(Event(event, profiler))\n```\n\n## Event Sequences\n#### Ordered\nYou can sequence the events by setting the next event to occur, and occurence\non how many times it will happen. To have events occur more than once, increase\nthe limit.\n\nEither the 'next' attribute can be set with a statement, or the bitwise operator\ncan be use to set the next event.\n\n```python\nfrom faker_events import Event, EventGenerator\n\na = Event({'Name': 'A'})\nb = Event({'Name': 'B'}, limit=2)\nc = Event({'Name': 'C'})\n\na.next = b\nb.next = c\n\n# Short form:\n# a >> b >> c\n\nEventGenerator.set_first_events(a)\n```\n\nOutput\n```json\n{\"Name\": \"A\"}\n{\"Name\": \"B\"}\n{\"Name\": \"B\"}\n{\"Name\": \"C\"}\n```\n\n#### Grouping\nIf you need to two different events to be grouped together, you can set the\ngroup_by parameter to true on the Event instance creation.  This will cause the\nstart and batch methods to send them together.\n\nYou can also use the '&' operator (rather than '>>') to set the next event but\ngrouped together so the event_time is the same.  Try not to mix the operators\ninto long mixed sequences as it can cause problems with the ordering.\n\n### Persistant State\nWhen creating event flows there is some concepts around how Faker Events works\nthat you should get familiar with.\n\n1. The dictionary created is used only as a template for Events\n2. Dictionaries that are identical will be treated as the same flow\n3. Profile Functions should declare a puprose and what needs to be change\n4. Event limit is for each profile created by the generator. (Default is 1)\n\nThe following example shows how we create a type of event with the dictionary\n'customer', and then a flow in which a new customer event is made, followed by\na job change for the customer.\n\nThe generator has 2 profiles, and 1 of each event type, resulting in 4 events.\n(Events with a limit of 0 will occur as long as the stream is running, without\n attempting to switch to the next event, even if one is set.)\n\n```python\nfrom faker_events import Event, EventGenerator\nfrom faker import Faker\n\nfaker = Faker()\n\ncustomer = {'Name': 'Unknown', 'Job': None, 'Created': None, 'Updated': None}\n\ndef new_customer(event, profile):\n    return {\n        \"Name\": profile.first_name,\n        \"Job\": profile.job,\n        \"Created\": event.time,\n        \"Updated\": event.time\n    }\n\ndef change_job(event, profile):\n    return {\n        \"Job\": faker.job(),\n        \"Updated\": event.time\n    }\n\nnew_customer_event = Event(customer, new_customer)\ncustomer_marriged_event = Event(customer, change_job)\n\nnew_customer_event >> customer_marriged_event\n\nEventGenerator.set_first_events(new_customer_event)\n```\n\nOutput (with two profiles)\n```json\n{\"Name\": \"Ian\", \"Job\": \"Medical technical officer\", \"Created\": \"2021-09-28T15:13:55.809062\", \"Updated\": \"2021-09-28T15:13:55.809062\"}\n{\"Name\": \"Eduardo\", \"Job\": \"Conservation officer, nature\", \"Created\": \"2021-09-28T15:13:56.316593\", \"Updated\": \"2021-09-28T15:13:56.316593\"}\n{\"Name\": \"Ian\", \"Job\": \"Database administrator\", \"Created\": \"2021-09-28T15:13:55.809062\", \"Updated\": \"2021-09-28T15:13:56.773134\"}\n{\"Name\": \"Eduardo\", \"Job\": \"Ergonomist\", \"Created\": \"2021-09-28T15:13:56.316593\", \"Updated\": \"2021-09-28T15:13:57.694891\"}\n```\n\nIf you need to update the details of the profile, or add persistant data from\nthe events you can do so within the Profiled method of the Event instance.\nWhen using sequenced events, the profile can be used to retrieve the data from\nprevious events.\n\n```python\nfrom faker_events import Event, EventGenerator\n\n\nevent_a = {'Name': 'A', 'LastEvent': 'none'}\n\ndef profiler_a(event, profile):\n    profile.LastEvent = 'EventA'\n\nevent_b = {'Name': 'B', 'LastEvent': 'none'}\n\ndef profiler_b(event, profile):\n    event.data['LastEvent'] = profile.LastEvent\n    profile.LastEvent = 'EventB'\n\nevent_c = {'Name': 'C', 'LastEvent': 'none'}\n\ndef profiler_c(event, profile):\n    event.data['LastEvent'] = profile.LastEvent\n\na = Event(event_a, profiler_a, 1)\nb = Event(event_b, profiler_b, 1)\nc = Event(event_c, profiler_c, 1)\n\na >> b >> c\n\nEventGenerator.set_first_events(a)\n```\n\nOutput\n```json\n{\"Name\": \"A\", \"LastEvent\": \"none\"}\n{\"Name\": \"B\", \"LastEvent\": \"EventA\"}\n{\"Name\": \"C\", \"LastEvent\": \"EventB\"}\n```\n\n### Multiple Event Flows\nBy grouping the events in lists, the Event Generator is able to work through\nmultiple Event Flows for each profile created, creating complex event streams.\n\n```python\nfrom faker_events import Event, EventGenerator\n\nflow_a1 = Event({\"Name\": \"A1\"})\nflow_aa1 = Event({\"Name\": \"AA1\"})\nflow_aa2 = Event({\"Name\": \"AA2\"})\n\nflow_b1 = Event({\"Name\": \"B1\"})\nflow_bb1 = Event({\"Name\": \"BB1\"})\nflow_bb2 = Event({\"Name\": \"BB2\"})\n\nflow_a1 >> [flow_aa1, flow_aa2]\nflow_b1 >> [flow_bb1, flow_bb2]\n\nEventGeneratoe.set_first_events([flow_a1, flow_b1])\n```\n\nOutput\n```json\n{\"Name\": \"B1\"}\n{\"Name\": \"BB2\"}\n{\"Name\": \"A1\"}\n{\"Name\": \"AA1\"}\n{\"Name\": \"AA2\"}\n{\"Name\": \"BB1\"}\n```\n\n### To Do List\n- [ ] Scheduling events with Cron syntax in Batch Mode.\n- [ ] Edge Case testing to produce bad or corrupted data on purpose.\n\n## License\nFaker-Events is released under the MIT License. See the bundled LICENSE file for details.\n\n## Credits\n* [Daniele Faraglia](https://github.com/joke2k) & [Flavio Curella](https://github.com/fcurella) / [Faker](https://github.com/joke2k/faker)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johnbrandborg/faker-events",
    "keywords": "faker events stream data test generator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Faker-Events",
    "package_url": "https://pypi.org/project/Faker-Events/",
    "platform": "unix",
    "project_url": "https://pypi.org/project/Faker-Events/",
    "project_urls": {
      "Homepage": "https://github.com/johnbrandborg/faker-events",
      "Source": "https://github.com/johnbrandborg/faker-events",
      "Tracker": "https://github.com/johnbrandborg/faker-events/issues"
    },
    "release_url": "https://pypi.org/project/Faker-Events/1.6.0/",
    "requires_dist": [
      "faker",
      "croniter",
      "flake8 ; extra == 'develop'",
      "pytest ; extra == 'develop'",
      "pytest-cov ; extra == 'develop'",
      "kafka-python ; extra == 'kafka'",
      "boto3 ; extra == 'kinesis'"
    ],
    "requires_python": ">=3.6",
    "summary": "Generates Events with formatted fake data for streams.",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13999587,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5f2f921df1199e000ebfb9d117e91a046cc11d4a94307c95e7a65cc9edc6bf2",
          "md5": "8cbedcf03699f750f38ae70e0e7ee722",
          "sha256": "1921e4960761b0afc88549dfc151b2423fd6c789564312e52099782aff35e142"
        },
        "downloads": -1,
        "filename": "Faker_Events-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8cbedcf03699f750f38ae70e0e7ee722",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9497,
        "upload_time": "2021-01-12T03:26:12",
        "upload_time_iso_8601": "2021-01-12T03:26:12.341138Z",
        "url": "https://files.pythonhosted.org/packages/c5/f2/f921df1199e000ebfb9d117e91a046cc11d4a94307c95e7a65cc9edc6bf2/Faker_Events-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20fd809b4f8071c2dc70e45b58cb61d47ee199216061d24bdf46abcacfddedd4",
          "md5": "7360649eb7d6a45fb1cf2e0b54362329",
          "sha256": "cb2040267b624076959ae2f338ab61bcf69385d6227f1a8b466abc1c67978862"
        },
        "downloads": -1,
        "filename": "Faker-Events-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7360649eb7d6a45fb1cf2e0b54362329",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8919,
        "upload_time": "2021-01-12T03:26:14",
        "upload_time_iso_8601": "2021-01-12T03:26:14.039330Z",
        "url": "https://files.pythonhosted.org/packages/20/fd/809b4f8071c2dc70e45b58cb61d47ee199216061d24bdf46abcacfddedd4/Faker-Events-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c2966797857cd62ae2aeddf0d61ae613984e992a5a14f1f7c8ecca4161a9f93",
          "md5": "b89bea367bc5b4eca15d134efc0e2ba2",
          "sha256": "0995d3c6fdfac5322fe63e40a185e39fd5a05c7f4887ead4a0c50ea4ec712122"
        },
        "downloads": -1,
        "filename": "Faker_Events-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b89bea367bc5b4eca15d134efc0e2ba2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9698,
        "upload_time": "2021-01-14T04:34:54",
        "upload_time_iso_8601": "2021-01-14T04:34:54.465819Z",
        "url": "https://files.pythonhosted.org/packages/2c/29/66797857cd62ae2aeddf0d61ae613984e992a5a14f1f7c8ecca4161a9f93/Faker_Events-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c85c868ae0d87447eb1bc811c445cc890a2b2c6b5d091ab291d19de0bbe2f1a",
          "md5": "709fe766d5633cacbef7eee35fa5c32b",
          "sha256": "6f273e9a281ef7b341c67666eb5b6d0de5c6bd5d7e725e83f9d62a881f8f3d9e"
        },
        "downloads": -1,
        "filename": "Faker-Events-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "709fe766d5633cacbef7eee35fa5c32b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9231,
        "upload_time": "2021-01-14T04:34:55",
        "upload_time_iso_8601": "2021-01-14T04:34:55.612124Z",
        "url": "https://files.pythonhosted.org/packages/0c/85/c868ae0d87447eb1bc811c445cc890a2b2c6b5d091ab291d19de0bbe2f1a/Faker-Events-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92f114dce3006297fd5c5915a153b9740387a834dd6072b7d1ccf7936c921e66",
          "md5": "71ba201e3e4b6919e4229db918f6fc66",
          "sha256": "99c7f9442045ec97f6a8b55d59ddca47bcae35f91eb8a64b117f30b41f25f82b"
        },
        "downloads": -1,
        "filename": "Faker_Events-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71ba201e3e4b6919e4229db918f6fc66",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10001,
        "upload_time": "2021-01-17T05:30:47",
        "upload_time_iso_8601": "2021-01-17T05:30:47.230053Z",
        "url": "https://files.pythonhosted.org/packages/92/f1/14dce3006297fd5c5915a153b9740387a834dd6072b7d1ccf7936c921e66/Faker_Events-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "622886f0beb0b4d33fa4dc65caf6717ef7152ba20cc61a13ae96caa1894c523b",
          "md5": "5a6db9c1cbb369b6d1a50937e91a7723",
          "sha256": "91e5ef5150ce4e3edf1184c1af674cfb9d329fc5285040fefec0ea0407bcfab3"
        },
        "downloads": -1,
        "filename": "Faker-Events-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5a6db9c1cbb369b6d1a50937e91a7723",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9563,
        "upload_time": "2021-01-17T05:30:48",
        "upload_time_iso_8601": "2021-01-17T05:30:48.359439Z",
        "url": "https://files.pythonhosted.org/packages/62/28/86f0beb0b4d33fa4dc65caf6717ef7152ba20cc61a13ae96caa1894c523b/Faker-Events-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7314b13e8bbcd0dc8a17e9a7d249fa55cdcfc3f7880647fe983b39522b668bf0",
          "md5": "80c8cfe80e516007c0c8db8e19cf9006",
          "sha256": "28c80e0b7358ceb15161c797ae073c964e7a21e1e0d7f75be73d117349611676"
        },
        "downloads": -1,
        "filename": "Faker_Events-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80c8cfe80e516007c0c8db8e19cf9006",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10934,
        "upload_time": "2021-09-23T03:45:38",
        "upload_time_iso_8601": "2021-09-23T03:45:38.192626Z",
        "url": "https://files.pythonhosted.org/packages/73/14/b13e8bbcd0dc8a17e9a7d249fa55cdcfc3f7880647fe983b39522b668bf0/Faker_Events-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9487a1395b19d1c1dfcbcd6f3cf4fbee249120215a32a4b321674843fd6f36e",
          "md5": "ddf3e7293ae4f97578e941c56b234df5",
          "sha256": "08cf6c023ad9a67be7f21529b958b982027e5e5865896690085a1c2fa3ffec67"
        },
        "downloads": -1,
        "filename": "Faker-Events-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ddf3e7293ae4f97578e941c56b234df5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9850,
        "upload_time": "2021-09-23T03:45:39",
        "upload_time_iso_8601": "2021-09-23T03:45:39.328323Z",
        "url": "https://files.pythonhosted.org/packages/a9/48/7a1395b19d1c1dfcbcd6f3cf4fbee249120215a32a4b321674843fd6f36e/Faker-Events-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dad49e1ecbda441b48f89fc3bb414fe63b72a7444607110a15c942e33030ae60",
          "md5": "e16995294b08e0c4a95ec0444fc3ac10",
          "sha256": "554842a8d7e91c96ea55aeb78bf9a8bb456f22977ea6598b243c6ab70b10b3cb"
        },
        "downloads": -1,
        "filename": "Faker_Events-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e16995294b08e0c4a95ec0444fc3ac10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10940,
        "upload_time": "2021-09-23T05:49:39",
        "upload_time_iso_8601": "2021-09-23T05:49:39.266729Z",
        "url": "https://files.pythonhosted.org/packages/da/d4/9e1ecbda441b48f89fc3bb414fe63b72a7444607110a15c942e33030ae60/Faker_Events-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "520cb1e10c9abd074acf78331efd6979b670caa842cd5744311c9ca1a34b7508",
          "md5": "8ec69b6071dcf9dd4f11c1f17555f3e0",
          "sha256": "5fe5055e2e717e06dd0c4b427137743a6449d7cfe0c19371d51d7cc17ef8a313"
        },
        "downloads": -1,
        "filename": "Faker-Events-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8ec69b6071dcf9dd4f11c1f17555f3e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9840,
        "upload_time": "2021-09-23T05:49:40",
        "upload_time_iso_8601": "2021-09-23T05:49:40.299592Z",
        "url": "https://files.pythonhosted.org/packages/52/0c/b1e10c9abd074acf78331efd6979b670caa842cd5744311c9ca1a34b7508/Faker-Events-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1ba57b3220919c0434fec531306d663300fa9437cfd80cefb49c8e03be52efa",
          "md5": "e87af20e6b71214f0e72412c841633b9",
          "sha256": "9be8f000c1110444e22c95c589d7b48988b151b1e94623ffb4f89ffeea266f58"
        },
        "downloads": -1,
        "filename": "Faker_Events-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e87af20e6b71214f0e72412c841633b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12232,
        "upload_time": "2021-09-28T05:31:40",
        "upload_time_iso_8601": "2021-09-28T05:31:40.048628Z",
        "url": "https://files.pythonhosted.org/packages/e1/ba/57b3220919c0434fec531306d663300fa9437cfd80cefb49c8e03be52efa/Faker_Events-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89e96fbf43a251baed67199feec51706fe943c0b81dfc35a2d2b89d9bea0918e",
          "md5": "857497c6e4242757937dcb0ac0841579",
          "sha256": "79924fd9bee3147a081c5fd539b401cd8b44aae4652bb84ab3891b481f8fafc7"
        },
        "downloads": -1,
        "filename": "Faker-Events-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "857497c6e4242757937dcb0ac0841579",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11724,
        "upload_time": "2021-09-28T05:31:41",
        "upload_time_iso_8601": "2021-09-28T05:31:41.081759Z",
        "url": "https://files.pythonhosted.org/packages/89/e9/6fbf43a251baed67199feec51706fe943c0b81dfc35a2d2b89d9bea0918e/Faker-Events-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6e79836ee53a5798bd7aca95608a9673bb7635980da008b053deecf74ef8d32",
          "md5": "9a189c698568349a30efddbb6ca879f8",
          "sha256": "823dc7240617d13b5c7d0aa0ddc8eafea6ecb5bfe607cd205640a241936e12e3"
        },
        "downloads": -1,
        "filename": "Faker_Events-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a189c698568349a30efddbb6ca879f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12673,
        "upload_time": "2021-09-29T07:31:15",
        "upload_time_iso_8601": "2021-09-29T07:31:15.324509Z",
        "url": "https://files.pythonhosted.org/packages/d6/e7/9836ee53a5798bd7aca95608a9673bb7635980da008b053deecf74ef8d32/Faker_Events-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bf06061efd3c67a8b8be2c3a5144787684fe13ce5f2d17642a85568998e9f2f",
          "md5": "79b4c6449224940d4ac1bcc3fd50cc3e",
          "sha256": "94e1e7f1e9c150e3f212d85c393fd450db690105980557147851c2fada89a489"
        },
        "downloads": -1,
        "filename": "Faker-Events-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "79b4c6449224940d4ac1bcc3fd50cc3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12184,
        "upload_time": "2021-09-29T07:31:17",
        "upload_time_iso_8601": "2021-09-29T07:31:17.044983Z",
        "url": "https://files.pythonhosted.org/packages/1b/f0/6061efd3c67a8b8be2c3a5144787684fe13ce5f2d17642a85568998e9f2f/Faker-Events-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f32cfb3e8578dbb7b8706ea5f726906b823a8327adc73b9750d110a9d5e448ea",
          "md5": "41fd5117133bcb64de4069f6091013c4",
          "sha256": "0294756caf31aa397d20258af70a8798981cfd99da0538bb515763887b2f1eef"
        },
        "downloads": -1,
        "filename": "Faker_Events-1.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41fd5117133bcb64de4069f6091013c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15508,
        "upload_time": "2022-05-20T13:09:23",
        "upload_time_iso_8601": "2022-05-20T13:09:23.975374Z",
        "url": "https://files.pythonhosted.org/packages/f3/2c/fb3e8578dbb7b8706ea5f726906b823a8327adc73b9750d110a9d5e448ea/Faker_Events-1.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "340d0bdd83b5b4627e53cde4329c747682f4f2ece49699e2e2c5c40084b70b68",
          "md5": "54d6416657973941a57e6c9c0c76d4e2",
          "sha256": "6227796edc5bd88de4ad49e470d5dc365495ddd152c9ea7d26e9778765ff1ce6"
        },
        "downloads": -1,
        "filename": "Faker-Events-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "54d6416657973941a57e6c9c0c76d4e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14492,
        "upload_time": "2022-05-20T13:09:25",
        "upload_time_iso_8601": "2022-05-20T13:09:25.247693Z",
        "url": "https://files.pythonhosted.org/packages/34/0d/0bdd83b5b4627e53cde4329c747682f4f2ece49699e2e2c5c40084b70b68/Faker-Events-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88187ae81d468e57ad0d3396a166f52ea7247df53837d270cff33a5e209fb5ff",
          "md5": "ff7fee5388a982d05d5bd6db8db135ec",
          "sha256": "1979f941434158074679d8a738e9fe700342aba5202bfbfa1addccf749e5187f"
        },
        "downloads": -1,
        "filename": "Faker_Events-1.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff7fee5388a982d05d5bd6db8db135ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17506,
        "upload_time": "2022-05-22T21:49:21",
        "upload_time_iso_8601": "2022-05-22T21:49:21.538554Z",
        "url": "https://files.pythonhosted.org/packages/88/18/7ae81d468e57ad0d3396a166f52ea7247df53837d270cff33a5e209fb5ff/Faker_Events-1.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b15bccf4ce666d78f3d11408bced981c828f60b195c860fa9bab6abe9090a5c6",
          "md5": "c44e7091cdce0594b98d2a5d43ffd083",
          "sha256": "be25dba85cfd21319cf2492cf4e0249f55fbcad8808edd4e493d5022fe0bde4b"
        },
        "downloads": -1,
        "filename": "Faker-Events-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c44e7091cdce0594b98d2a5d43ffd083",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16084,
        "upload_time": "2022-05-22T21:49:23",
        "upload_time_iso_8601": "2022-05-22T21:49:23.354988Z",
        "url": "https://files.pythonhosted.org/packages/b1/5b/ccf4ce666d78f3d11408bced981c828f60b195c860fa9bab6abe9090a5c6/Faker-Events-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20bbff003215cb9cf192d46501bd7f7f2083053c1def06edc2522590229d6d8e",
          "md5": "75bcc4a737cff784f62cf1f76ed1b4d1",
          "sha256": "99e19d8823c64427190769c473381272ce51351962f9313ff50ea33664824daf"
        },
        "downloads": -1,
        "filename": "Faker_Events-1.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75bcc4a737cff784f62cf1f76ed1b4d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17926,
        "upload_time": "2022-06-01T11:58:15",
        "upload_time_iso_8601": "2022-06-01T11:58:15.979970Z",
        "url": "https://files.pythonhosted.org/packages/20/bb/ff003215cb9cf192d46501bd7f7f2083053c1def06edc2522590229d6d8e/Faker_Events-1.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a67288ec541eb57a6232cff13b60654529e810ac211e43eb495ade6ab0b94d4",
          "md5": "116a1350df1169eecdd000b1ca36ad56",
          "sha256": "792411bc1bd59eeee71ef3067983d67a6ca4a309504bc7c0b1d877e4fda98115"
        },
        "downloads": -1,
        "filename": "Faker-Events-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "116a1350df1169eecdd000b1ca36ad56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16446,
        "upload_time": "2022-06-01T11:58:17",
        "upload_time_iso_8601": "2022-06-01T11:58:17.263855Z",
        "url": "https://files.pythonhosted.org/packages/2a/67/288ec541eb57a6232cff13b60654529e810ac211e43eb495ade6ab0b94d4/Faker-Events-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20bbff003215cb9cf192d46501bd7f7f2083053c1def06edc2522590229d6d8e",
        "md5": "75bcc4a737cff784f62cf1f76ed1b4d1",
        "sha256": "99e19d8823c64427190769c473381272ce51351962f9313ff50ea33664824daf"
      },
      "downloads": -1,
      "filename": "Faker_Events-1.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "75bcc4a737cff784f62cf1f76ed1b4d1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17926,
      "upload_time": "2022-06-01T11:58:15",
      "upload_time_iso_8601": "2022-06-01T11:58:15.979970Z",
      "url": "https://files.pythonhosted.org/packages/20/bb/ff003215cb9cf192d46501bd7f7f2083053c1def06edc2522590229d6d8e/Faker_Events-1.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a67288ec541eb57a6232cff13b60654529e810ac211e43eb495ade6ab0b94d4",
        "md5": "116a1350df1169eecdd000b1ca36ad56",
        "sha256": "792411bc1bd59eeee71ef3067983d67a6ca4a309504bc7c0b1d877e4fda98115"
      },
      "downloads": -1,
      "filename": "Faker-Events-1.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "116a1350df1169eecdd000b1ca36ad56",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16446,
      "upload_time": "2022-06-01T11:58:17",
      "upload_time_iso_8601": "2022-06-01T11:58:17.263855Z",
      "url": "https://files.pythonhosted.org/packages/2a/67/288ec541eb57a6232cff13b60654529e810ac211e43eb495ade6ab0b94d4/Faker-Events-1.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}