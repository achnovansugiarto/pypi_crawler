{
  "info": {
    "author": "Steinwurf ApS",
    "author_email": "contact@steinwurf.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Plugins",
      "Environment :: Web Environment",
      "Framework :: Sphinx :: Extension",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Documentation",
      "Topic :: Documentation :: Sphinx",
      "Topic :: Software Development :: Documentation",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "wurfapi\n=======\n\n|PyPi| |Waf Python Tests| |Black| |Flake8| |Pip Install|\n\n.. |PyPi| image:: https://badge.fury.io/py/wurfapi.svg\n    :target: https://badge.fury.io/py/wurfapi\n\n.. |Waf Python Tests| image:: https://github.com/steinwurf/wurfapi/actions/workflows/python-waf.yml/badge.svg\n   :target: https://github.com/steinwurf/wurfapi/actions/workflows/python-waf.yml\n\n.. |Flake8| image:: https://github.com/steinwurf/wurfapi/actions/workflows/flake8.yml/badge.svg\n    :target: https://github.com/steinwurf/wurfapi/actions/workflows/flake8.yml\n\n.. |Black| image:: https://github.com/steinwurf/wurfapi/actions/workflows/black.yml/badge.svg\n      :target: https://github.com/steinwurf/wurfapi/actions/workflows/black.yml\n\n.. |Pip Install| image:: https://github.com/steinwurf/wurfapi/actions/workflows/pip.yml/badge.svg\n      :target: https://github.com/steinwurf/wurfapi/actions/workflows/pip.yml\n\nWe wanted to have a configurable and easy to use Sphinx API documentation\ngenerator for our C++ projects. To achieve this we leaned on others for\ninspiration:\n\n* Breathe (https://github.com/michaeljones/breathe): Excellent extension\n  and the default choice for many.\n* Gasp (https://github.com/troelsfr/Gasp): Gasp inspired us by allowing\n  templates to control the output. Unfortunately development of Gaps\n  seems to have stopped.\n\nSo what is ``wurfapi``:\n\n* Essentially we picked up where Gasp let go. We have\n  borrowed the idea of templates to make it highly configurable.\n\n* We made it easy to use by automatically running Doxygen to generate the\n  initial API documentation.\n\n* We parse the Doxygen XML into an easy to use Python dictionary. Which can\n  be consumed in the templates.\n\n* We prepared the extension for other backends (replacing Doxygen) e.g.\n  https://github.com/foonathan/standardese once they become ready.\n\n.. contents:: Table of Contents:\n   :local:\n\n\nStatus\n======\n\nWe currently use wurfapi in the following projects:\n\n* https://rely.steinwurf.com/docs/10.0.0/\n* https://kodo.steinwurf.com/docs/11.0.0/\n* https://otacast.steinwurf.com/docs/6.0.0/\n\n... and many more.\n\nUsage\n=====\n\nWe recommend that you install wurfapi and sphinx in a virtual environment.\nTo use the extension, the following steps are needed:\n\n1. Create a virtual environment::\n\n    Follow the https://docs.python.org/3/tutorial/venv.html\n\n2. Install the extension::\n\n    pip install sphinx\n    pip install wurfapi\n\n3. Generate the initial ``Sphinx`` documentation by running::\n\n      mkdir docs\n      cd docs\n      python sphinx-quickstart\n\n   You will need to enter some basic information about your project such\n   as the project name etc.\n\n4. Open the ``conf.py`` generated by ``sphinx-quickstart`` and add the\n   the following::\n\n      # Append or insert 'wurfapi' in the extensions list\n      extensions = ['wurfapi']\n\n      # wurfapi options - relative to your docs dir\n      wurfapi = {\n        'source_paths': ['../src'],\n        'recursive': True,\n        'parser': {'type': 'doxygen', 'download': True,  'warnings_as_error': True}\n      }\n\n   .. note::\n\n    ``source_path``\n        If you separate source and build dir in sphinx your 'source_path'\n        should be something like '../../src'.\n\n    ``recursive``\n        Set recursive ``True`` if you want recursively scan the ``source_paths``\n\n    ``download``\n        If you do not want to automatically download Doxygen, set\n        ``download`` to ``False``. In that case ``wurfapi`` will try to invoke\n        plain ``doxygen`` without specifying any path or similar. This means\n        it ``doxygen`` must be available in the path.\n\n    ``warnings_as_error``\n        If Doxygen emits many warnings you might want to set warnings_as_error\n        to False until they have been fixed.\n\n5. To generate the API documentation for a class open a ``.rst`` file\n   e.g. ``index.rst`` if you ran ``sphinx-quickstart``. Say we want to\n   generate docs for a class called ``test`` in the namespace ``project``.\n\n   To do this we add the following directive to the rst file::\n\n      .. wurfapi:: class_synopsis.rst\n        :selector: project::coffee::machine\n\n   Such that ``index.rst`` becomes something like::\n\n      Welcome to Coffee's documentation!\n      ===================================\n\n      .. toctree::\n        :maxdepth: 2\n        :caption: Contents:\n\n      .. wurfapi:: class_synopsis.rst\n          :selector: project::coffee::machine\n\n      .. wurfapi:: class_synopsis.rst\n          :selector: project::coffee::recipe\n\n\n      Indices and tables\n      ==================\n\n      * :ref:`genindex`\n      * :ref:`modindex`\n      * :ref:`search`\n\n\n    To do this we use the ``class_synopsis.rst`` template.\n\n6. Generate the Documentation\n\n    make html\n\nLabels and References\n---------------------\n\nTo reference different elements in the API, we have added a custom Sphinx role ``:wurfapi:``\n\nThe ``:wurfapi:`` role will try to deduce the ``unique-name`` from the text given.\nE.g if you want to reference the ``unique-name`` ``foo::bar::baz::func(std::string var)`` and there are\nno other member functions in ``foo::bar::baz`` named ``func``, you can reference it\nby writing ``:wurfapi:`foo::bar::baz::func```.\n\nOn the other hand if there was a function with ``unique-name`` ``foo::bar::baz::function(std::string var)``\n``:wurfapi:`foo::bar::baz::func``` could match with both func and function and will throw an error. In This\ncase this can be fixed by adding the left parenthesis: ``:wurfapi:`foo::bar::baz::func(```.\n\nYou can read more about unique names later in this README.\n\nRunning on readthedocs.org\n--------------------------\n\nTo use this on readthedocs.org you need to have the ``wurfapi`` Sphinx\nextension installed. This can be done by adding a ``requirements.txt`` in the\ndocumentation folder. readthedocs.org can be configured to use the\n``requirements.txt`` when building a project. Simply put ``wurfapi`` in to the\n``requirements.txt``.\n\nDoxygen issues\n--------------\n\nNothing is perfect, neither is Doxygen. Sometimes Doxygen gets it wrong e.g. in\nthe following example::\n\n    class foo\n    {\n    private:\n        class bar;\n    };\n\nDoxygen incorrectly reports that ``bar`` has public scope (also reported here\nhttps://bit.ly/2BWPllZ). To deal with such issues, until a fix lands in\nDoxygen, you can do the following:\n\nAdd a list of *patches* to the API to your ``conf.py`` file. Extending the\nexample from before, we can add the following fix::\n\n      wurfapi = {\n        'source_paths': ['../src'],\n        'recursive': True,\n        'parser': {\n          'type': 'doxygen', 'download': True,  'warnings_as_error': True,\n           'patch_api': [\n            {'selector': 'foo::bar', 'key': 'access', 'value': 'private'}\n          ]\n        }\n      }\n\nThe ``patch_api`` allows you to reach in to the parsed API information and\nupdate certain values. The ``selector`` is the ``unique-name`` of the\nentity you want to update. Check the \"Dictionary layout\" section further down\nfor more information.\n\nCollapse inline namespaces\n--------------------------\n\nFor symbol versioning you may use ``inline namespaces``, however typically\nyou don't want these to show up in the docs, as these are mostly\ninvisible for your users.\n\nWith ``wurfapi`` you can collapse the inline namespace such that it\nis removed form the scopes etc.\n\nExample::\n\n  namespace foo { inline namespace v1_2_3 { struct bar{}; } }\n\nThe scope to bar is ``foo::v1_2_3``. If you collapse the inline namespace it will\njust be ``foo``.\n\nFirst issue you have to deal with is that Doxygen currently does not\nsupport inline namespaces. So we need to patch the API first::\n\n      wurfapi = {\n        'source_paths': ['../src'],\n        'recursive': True,\n        'parser': {\n          'type': 'doxygen', 'download': True,  'warnings_as_error': True,\n           'patch_api': [\n            {'selector': 'foo::v1_2_3', 'key': 'inline', 'value': True}\n          ]\n        }\n      }\n\nAfter this we can collapse the namespace::\n\n      wurfapi = {\n        'source_paths': ['../src'],\n        'recursive': True,\n        'parser': {\n          'type': 'doxygen', 'download': True,  'warnings_as_error': True,\n           'patch_api': [\n            {'selector': 'foo::v1_2_3', 'key': 'inline', 'value': True}\n          ],\n          'collapse_inline_namespaces': [\n            \"foo::v1_2_3\"\n          ]\n        }\n      }\n\n\nNow you will be able to refer to ``bar`` as ``foo::bar``. Note, that\ncollapsing the namespace will affect the selectors you write when\ngenerating the documentation.\n\nCustom templates\n----------------\n\nYou can write your own custom templates for generating the rst output.\nTo this you simply write a Jinja2 compatible rst template and place\nit in some folder. Adding the ``user_templates`` key to the ``wurfapi``\nconfiguration dictionary in the ``conf.py`` file will make it available.\n\nFor example::\n\n    wurfapi = {\n        'source_paths': ['../src', '../examples/header/header.h'],\n        'recursive': True,\n        'user_templates': 'rst_templates',\n        'parser': {\n            'type': 'doxygen', 'download': True, 'warnings_as_error': True\n        }\n    }\n\n    exclude_patterns = ['rst_templates/*.rst']\n\nNow we can use ``*.rst`` files inside the ``rst_templates`` folder e.g. if\nwe had a ``class_list.rst`` template we could use it like this::\n\n    .. wurfapi:: class_list.rst\n        :selector: project::coffee\n\nRelease new version\n===================\n\n1. Edit ``NEWS.rst``, ``wscript`` and ``src/wurfapi/wurfapi.py`` (set\n   correct ``VERSION``)\n\n2. Run ::\n\n    ./waf upload\n\n\nSource code\n===========\n\n\nTests\n=====\n\nThe tests will run automatically by passing ``--run_tests`` to waf::\n\n    ./waf --run_tests\n\nThis follows what seems to be \"best practice\" advice, namely to install the\npackage in editable mode in a virtualenv.\n\nRecordings\n----------\n\nA bunch of the tests use a library called ``pytest-datarecorder``.\nThe library is used to store the output as files from different parsing and\nrendering operations.\n\nE.g. say we want to make sure that a parser function returns a certain\n``dict`` object. Then we can record that ``dict``::\n\n    datarecorder.record_data(\n        data={'foo': 2, 'bar': 3},\n        recording_file=\"/tmp/recording/test.json\"\n    )\n\nIf ``data`` changes compared to a previous recording a mismatch will be\ndetected. To update a recording simply delete the recording file.\n\nTest directories\n----------------\n\nYou will also notice that a bunch of the tests take a parameter called\n``testdirectory``. The ``testdirectory`` is a pytest fixture, which\nrepresents a temporary directory on the filesystem. When running the tests\nyou will notice these temporary test directories pop up under the\n``pytest_temp`` directory in the project root.\n\nYou can read more about that here:\n\n* https://github.com/steinwurf/pytest-testdirectory\n\nDeveloper Notes\n===============\n\nThe `sphinx` documentation on creating extensions:\nhttp://www.sphinx-doc.org/en/stable/extdev/index.html#dev-extensions\n\n* An extension is a Python module. When an extension loads, Sphinx will import\n  it and execute its ``setup()`` function.\n\n* Understanding how to put together docutils nodes seems pretty difficult. One\n  suggesting form the mailinglist was to look at the following document:\n  https://github.com/docutils-mirror/docutils/blob/master/test/functional/expected/standalone_rst_pseudoxml.txt\n\n* While researching how to do this, there seem to be three potential approaches:\n\n  1. Use the standard Sphinx approach and operate with the doctree.\n  2. Create RST based on jinja templates\n  3. Create HTML based on jinja templates\n\n* Inspiration - Sphinx extensions that were used as inspiration while\n  developing this extension.\n\n  * Breathe\n  * Gasp\n  * https://github.com/Robpol86/sphinxcontrib-imgur\n  * https://github.com/djungelorm/sphinx-tabs\n\n* Understanding how to write stuff with docutils:\n  * http://agateau.com/2015/docutils-snippets/\n\n* Creating a custom directive\n  * http://www.xavierdupre.fr/blog/2015-06-07_nojs.html\n\n* Nice looking Sphinx extensions\n  * https://github.com/bokeh/bokeh/tree/master/bokeh/sphinxext\n\n* This part of the documentation was useful in order to understand the need\n  for ViewLists etc. in the directives run(...) function.\n  http://www.sphinx-doc.org/en/stable/extdev/markupapi.html\n\n* This link provided inspiration for the text json format: https://github.com/micnews/html-to-article-json\n* More xml->json for the text: https://www.xml.com/pub/a/2006/05/31/converting-between-xml-and-json.html\n\nDictionary layout\n-----------------\n\nWe want to support different \"backends\" like Doxygen to parse the source\ncode. To make this possible we define an internal source code description\nformat. We then translate e.g. Doxygen XML to this and use that to render\nthe API documentation.\n\nThis way a different \"backend\" e.g. Doxygen2 could be use used as the source\ncode parser and the API documentation could be generated.\n\n\n``unique-name``\n...............\n\nIn order to be able to reference the different entities in the API we need\nto assign them a name.\n\nWe use a similar approach here as described in standardese_.\n\nThis means that the ``unique-name`` of an entity is the name with all\nscopes e.g. ``foo::bar::baz``.\n\n* For functions the unique name contains the signature (parameter types and for\n  member functions cv-qualifier and ref-qualifier) e.g. ``foo::bar::baz::func()``\n  or ``foo::bar::baz::func(int a, char*) const``. See cppreference_ for more\n  information.\n\n* For class template specializations the unique name includes the specialization\n  arguments. For example::\n\n      // Here the unique-name is just 'foo'\n      template<class T>\n      class foo {};\n\n      // Here the unique name is foo<int>\n      template<>\n      class foo<int> {};\n\n* In addition to types, we also have entries for the parsed files. For files\n  the unique name will be the relative path from the project root.\n\n* For defines we will use the name of the define. As an example::\n\n      #define PROJECT_VERSION \"1.0.0\"\n\n  Here ``unique-name`` will be ``PROJECT_VERSION``.\n\n.. _cppreference: http://en.cppreference.com/w/cpp/language/member_functions\n.. _standardese: https://github.com/foonathan/standardese#linking\n\n\n\nThe API dictionary\n...................\n\nThe internal structure is a dicts with the different API entities. The\n``unique-name`` of the entity is the key and the entity type also a\nPython dictionary is the value e.g::\n\n\n    api = {\n      'unique-name': { ... },\n      'unique-name': { ... },\n      ...\n    }\n\nTo make this a bit more concrete consider the following code::\n\n    namespace ns1\n    {\n      class shape\n      {\n        void print(int a) const;\n      };\n\n      namespace ns2\n      {\n        struct box\n        {\n          void hello();\n        };\n\n        void print();\n      }\n    }\n\nParsing the above code would produce the following API dictionary::\n\n      api = {\n        'ns1': { 'kind': 'namespace', ...},\n        'ns1::shape': { 'kind': 'class', ... },\n        'ns1::shape::print(int) const': { kind': function' ... },\n        'ns1::ns2': { 'kind': 'namespace', ... },\n        'ns1::ns2::box': { 'kind': 'struct', ... },\n        'ns1::ns2::box::hello()': { kind': function' ... },\n        'ns1::ns2::print()': { 'kind': 'function', ...},\n        'ns1.hpp': { 'kind': 'file', ...}\n      }\n\nThe different entity kinds expose different information about the\nAPI. We will document the different kinds in the following.\n\nWe make some keys *optional* this is marked in the following way::\n\n    api = {\n      'unique-name': {\n        'some_key': ...\n        Optional('an_optional_key'): ...\n      },\n      ...\n    }\n\n``namespace`` Kind\n..................\n\nPython dictionary representing a C++ namespace::\n\n    info = {\n      'kind': 'namespace',\n      'name': 'unqualified-name',\n      'scope': 'unique-name' | None,\n      'members: [ 'unique-name', 'unique-name' ],\n      'briefdescription': paragraphs,\n      'detaileddescription': paragraphs,\n      'inline': True | False\n    }\n\nNote: Currently Doxygen does not support parsing ``inline namespaces``. So\nyou need to use the patch API to change the value from ``False`` to ``True``\nmanually. Maybe at some point https://github.com/doxygen/doxygen/issues/6741\nit will be supported.\n\n``class`` | ``struct`` Kind\n...........................\n\nPython dictionary representing a C++ class or struct::\n\n    info = {\n      'kind': 'class' | 'struct',\n      'name': 'unqualified-name',\n      'location': location,\n      'scope': 'unique-name' | None,\n      'access': 'public' | 'protected' | 'private',\n      Optional('template_parameters'): template_parameters,\n      'members: [ 'unique-name', 'unique-name' ],\n      'briefdescription': paragraphs,\n      'detaileddescription': paragraphs\n    }\n\n\n``enum`` | ``enum class`` Kind\n..............................\n\nPython dictionary representing a C++ enum or enum class::\n\n    info = {\n      'kind': 'enum',\n      'name': 'unqualified-name',\n      'location': location,\n      'scope': 'unique-name' | None,\n      'access': 'public' | 'protected' | 'private',\n      'values: [\n        {\n          'name': 'somename',\n          'briefdescription': paragraphs,\n          'detaileddescription': paragraphs,\n          Optional('value'): 'some value'\n        }\n       ],\n      'briefdescription': paragraphs,\n      'detaileddescription': paragraphs\n    }\n\n``typedef`` | ``using`` Kind\n............................\n\nPython dictionary representing a C++ using or typedef statement::\n\n    info = {\n      'kind': 'typedef' | 'using',\n      'name': 'unqualified-name',\n      'location': location,\n      'scope': 'unique-name' | None,\n      'access': 'public' | 'protected' | 'private',\n      'type': type,\n      'briefdescription': paragraphs,\n      'detaileddescription': paragraphs\n    }\n\n``define`` Kind\n...............\n\nPython dictionary representing a C/C++ define::\n\n    info = {\n      'kind': 'define',\n      'name': 'name',\n      'location': location,\n      Optional('initializer'): 'some_value',\n      Optional('parameters'): [{\n          'name': 'somestring',\n          Optional('description'): paragraphs\n      }],\n      'briefdescription': paragraphs,\n      'detaileddescription': paragraphs\n    }\n\nThe content of the define will be in the ``initializer`` field. If the define\ntakes documented paremeters these will be under the ``parameter`` key.\n\nExamples:\n\n1. Define initializer::\n\n      #define VERSION \"1.0.2\"\n\n2. Define initalizer with parameters::\n\n      #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n\n\n``file`` Kind\n............................\n\nPython dictionary representing a file in the project::\n\n    info = {\n      'kind': 'file',\n      'name': 'somefile.hpp',\n      'path': 'relative/path/to/somefile.hpp',\n    }\n\n``function`` Kind\n.................\n\nPython dictionary representing a C++ function::\n\n    info = {\n      'kind': 'function',\n      'name': 'unqualified-name',\n      'location': location,\n      'scope': 'unique-name' | None,\n      Optional('return'): {\n        'type': type,\n        'description': paragraphs\n      }\n      Optional('template_parameters'): template_parameters,\n      'is_const': True | False,\n      'is_static': True | False,\n      'is_virtual': True | False,\n      'is_explicit': True | False,\n      'is_inline': True | False,\n      'is_constructor': True | False,\n      'is_destructor': True | False,\n      'trailing_return': True | False,\n      'access': 'public' | 'protected' | 'private',\n      'briefdescription: paragraphs,\n      'detaileddescription: paragraphs,\n      'parameters': [\n        { 'type': type, Optional('name'): 'somename', 'description': paragraphs },\n        ...\n      ]\n  }\n\nThe `return` key is optional if the function is either a constructor or\ndestructor.\n\n``variable`` Kind\n.................\n\nPython dictionary representing a C++ variable::\n\n    info = {\n      'kind': 'variable',\n      'name': 'unqualified-name',\n      Optional('value'): 'some value',\n      'type': type,\n      'location': location,\n      'is_static': True | False,\n      'is_mutable': True | False,\n      'is_volatile': True | False,\n      'is_const': True | False,\n      'is_constexpr': True | False,\n      'scope': 'unique-name' | None,\n      'access': 'public' | 'protected' | 'private',\n      'briefdescription: paragraphs,\n      'detaileddescription: paragraphs,\n    }\n\n``location`` item\n.................\n\nPython dictionary representing a location::\n\n    location = {\n      Optional('include'): 'some/header.h',\n      'path': 'src/project/header.h',\n      'line': 10\n      }\n\n* The ``include`` will be relative to any ``include_paths`` specified in the\n  ``wurfapi`` dictionary in your Sphinx ``conf.py``.\n\n* The ``path`` will be relative to the project root folder.\n\n``type`` item\n.............\n\nPython list representing a C++ type::\n\n    type = [\n      {\n        'value': 'sometext',\n        Optional('link'): link\n      }, ...\n    ]\n\nHaving the type as a list of items we can create links to nested types e.g.\nsay we have a `std::unique_ptr<impl>` and we would like to make `impl` a link.\nThis could look like::\n\n    \"type\": [\n      {\n        \"value\": \"std::unique_ptr<\"\n      },\n      {\n        \"link\": {\"url\": False, \"value\": \"project::impl\"},\n        \"value\": \"impl\"\n      },\n      {\n        \"value\": \">\"\n      }\n    ]\n\nAny spaces in the type list should be preserved all the way from the Doxygen\noutput and into the type list. In the rst it should be sufficient to simply\noutput the values of the type. No spaces or other stuff should be injected.\n\n``link`` item\n.............\n\nPython dictionary representing a link::\n\n    link = { 'url': True | False, 'value': 'somestring' }\n\nIf `url` is `True` we have a basic extrenal reference otherwise we have a\nlink to an internal type in the API.\n\n``parameter`` item\n...................\n\nDictionary representing a function parameter::\n\n    parameter = {\n      'type': type,\n      Optional('name'): 'somestring',\n      Optional('description'): paragraphs\n    }\n\nFor the parameter the name is also included into the type list. The reason\nis that some parameters can be pretty complex, with the name embedded\ninside the type e.g.::\n\n    void function(int (*(*foo)())[3]);\n\nThis is a function which takes one parameter `foo` which is pointer\nfunction returning pointer to array 3 of int - nice right? Anyway, in\nsuch cases the parameter name is embedded inside the type of the parameter.\nWe therefore took the easy out and `wurfapi` will always include the\nparameter name in the type.\n\nAs an example the parameter dictionary for a function `void test(int b)`\ncould be::\n\n    {\n       'type': [{'value': 'int '}, {'value': 'b'}],\n       'name': 'b'\n    }\n\n``template_parameters`` item\n.............................\n\nPython list of dictionaries representing template parameters::\n\n    template_parameters = [{\n      'type': type,\n      'name': 'somestring',\n      Optional('default'): type,\n      Optional('description'): paragraphs\n    }]\n\nText Information\n................\n\nText information is stored in a list of paragraphs::\n\n    paragraphs = [paragraph]\n\nA paragraph consists of a list of paragraph elements::\n\n    paragraph = [\n          {\n            \"kind\": \"text\" | \"code\" | \"list\" | \"bold\" | \"italic\",\n            ...\n          },\n        ]\n\nParagraph elements can be one of three kinds, \"text\", \"code\" or \"list\"::\n\n    text = {\n      'kind': 'text',\n      'content': 'hello',\n      Optional('link'): link\n      }\n\n    code = {\n      'kind': 'code',\n      'content': 'void print();',\n      'is_block': true | false\n    }\n\n    list = {\n      'kind': 'list',\n      'ordered': true | false,\n      'items': [paragraphs] # Each item is a list of paragraphs\n    }\n\n\nProblem with ``unique-name`` for functions\n..........................................\n\nIssue equivalent C++ function signatures can be written in a number of\ndifferent ways::\n\n  void hello(const int *x); // x is a pointer to const int\n  void hello(int const *x); // x is a pointer to const int\n\nWe can also move the asterisk (``*``) to the left::\n\n  void hello(const int* x); // x is a pointer to const int\n  void hello(int const* x); // x is a pointer to const int\n\nSo we need some way to normalize the function signature when transforming it\nto ``unique-name``. We cannot simply rely on sting comparisons.\n\nAccording to the numerous google searches it is hard to write a regex for this.\nInstead we will try to use a parser:\n\n* Python parser: https://github.com/erezsh/lark\n* C++ Grammar: http://www.externsoft.ch/media/swf/cpp11-iso.html#parameters_and_qualifiers\n\nWe only need to parse the function parameter list denoted as the\n``http://www.externsoft.ch/media/swf/cpp11-iso.html#parameters_and_qualifiers``.\n\n\nGenerated output\n----------------\n\nSince we are going to be using Doxygen's XML output as input to the\nextension we need a place to store it. We store it system temporary folder e.g.\nif the project name is \"foobar\" on Linux this would be\n``/tmp/wurfapi-foobar-123456`` where ``123456`` is a hash of the source\ndirectory paths. In addition to Doxygen's XML we also store the generated rst\nfor the different directives there. This is nice for debugging to see whether\nwe generate broken rst.\n\nThe API in json format can be found in the ``_build/.doctree/wurfapi_api.json``.\n\nPaths and directories\n---------------------\n\n\n* Source directory: In Sphinx the source directory is where our .rst files are\n  located. This is what you pass to ``sphinx-build`` when building your\n  documentation. We will use this in our extension to find the C++ source code\n  and output customization templates.\n\n\nNotes\n=====\n\n* Why use an ``src`` folder (https://hynek.me/articles/testing-packaging/).\n  tl;dr you should run your tests in the same environment as your users would\n  run your code. So by placing the source files in a non-importable folder you\n  avoid accidentally having access to resources not added to the Python\n  package your users will install...\n* Python packaging guide: https://packaging.python.org/distributing/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/steinwurf/",
    "keywords": "wurfapi",
    "license": "BSD 3-clause \"New\" or \"Revised\" License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wurfapi",
    "package_url": "https://pypi.org/project/wurfapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/wurfapi/",
    "project_urls": {
      "Homepage": "https://github.com/steinwurf/"
    },
    "release_url": "https://pypi.org/project/wurfapi/9.1.0/",
    "requires_dist": [
      "pyquery",
      "python-archive",
      "python-slugify",
      "schema",
      "six",
      "sphinx (>3)",
      "pathlib2 ; python_version < \"3.4\""
    ],
    "requires_python": "",
    "summary": "C++ Documentation generator.",
    "version": "9.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17079960,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9a5e7008bfb185fa4ef2c79aa05921c0466ab293ebd88efe8c93b700ab328c2",
          "md5": "5c7327991e5d4b39d43c18109177c818",
          "sha256": "c3335fe0464b77b2d6efe8401af09c992610add2ac813d3a3c4f42aa00314959"
        },
        "downloads": -1,
        "filename": "wurfapi-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c7327991e5d4b39d43c18109177c818",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20966,
        "upload_time": "2018-05-16T21:07:21",
        "upload_time_iso_8601": "2018-05-16T21:07:21.532942Z",
        "url": "https://files.pythonhosted.org/packages/a9/a5/e7008bfb185fa4ef2c79aa05921c0466ab293ebd88efe8c93b700ab328c2/wurfapi-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9134c34b5a07c119166ba63c42fbfece22ccd7f370f76ba1dccefe08ff377c6e",
          "md5": "63e03c21f5d3f727cd6188a2a6c06734",
          "sha256": "98073ddf34645f33e1ecc60b53c62998d10f1c04f0af606cde3af4d247c9da25"
        },
        "downloads": -1,
        "filename": "wurfapi-2.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63e03c21f5d3f727cd6188a2a6c06734",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26086,
        "upload_time": "2018-07-30T12:30:52",
        "upload_time_iso_8601": "2018-07-30T12:30:52.467928Z",
        "url": "https://files.pythonhosted.org/packages/91/34/c34b5a07c119166ba63c42fbfece22ccd7f370f76ba1dccefe08ff377c6e/wurfapi-2.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "614c27c93d2fae22c13e765e8feb767dfbabf24cc71c1f744bc2115ab65409d2",
          "md5": "021434ca8290c46d6624be0fc43d27cb",
          "sha256": "455102aa2751b90838ea5d38b71f9428be4b9366aa6a6b125c4c2a334748d6e4"
        },
        "downloads": -1,
        "filename": "wurfapi-2.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "021434ca8290c46d6624be0fc43d27cb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26201,
        "upload_time": "2018-08-01T13:20:17",
        "upload_time_iso_8601": "2018-08-01T13:20:17.443350Z",
        "url": "https://files.pythonhosted.org/packages/61/4c/27c93d2fae22c13e765e8feb767dfbabf24cc71c1f744bc2115ab65409d2/wurfapi-2.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd31e4f51e6903f2e36ca3fc86724a997c17f8f3314064edd1bea410c0f32c5f",
          "md5": "394d53d8ed21ad2c9eb0ec9bcaf3733b",
          "sha256": "80150f309e0bfe999e1194ef679723202214cc69acabb0b1e616064f100ac07e"
        },
        "downloads": -1,
        "filename": "wurfapi-3.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "394d53d8ed21ad2c9eb0ec9bcaf3733b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 41525,
        "upload_time": "2019-07-22T21:06:11",
        "upload_time_iso_8601": "2019-07-22T21:06:11.941669Z",
        "url": "https://files.pythonhosted.org/packages/dd/31/e4f51e6903f2e36ca3fc86724a997c17f8f3314064edd1bea410c0f32c5f/wurfapi-3.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1ac141a01aa1a18880f15c5b2acd219afc50db2ff1bf619cd38bb2b9b08e12c",
          "md5": "9d1da9dfb47c875d8064b14d0801a32d",
          "sha256": "98e7080cf70c350e7657d8fd24b5d729ea811a9f32b67281cb6ff41608ab907b"
        },
        "downloads": -1,
        "filename": "wurfapi-4.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d1da9dfb47c875d8064b14d0801a32d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 42352,
        "upload_time": "2020-01-20T08:58:02",
        "upload_time_iso_8601": "2020-01-20T08:58:02.836267Z",
        "url": "https://files.pythonhosted.org/packages/f1/ac/141a01aa1a18880f15c5b2acd219afc50db2ff1bf619cd38bb2b9b08e12c/wurfapi-4.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cb1d9c7ab3e4f99136eb5f94a458e8143837bc5a5286c96ca459529ac68cdef",
          "md5": "82386db93c540ceb42e1eb790d3b4418",
          "sha256": "2ed7531df96d4c7ad9b51ba314b1ea1d5e7e32ab913433c67737d1bb7fb0d174"
        },
        "downloads": -1,
        "filename": "wurfapi-5.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82386db93c540ceb42e1eb790d3b4418",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 42702,
        "upload_time": "2020-02-02T16:14:33",
        "upload_time_iso_8601": "2020-02-02T16:14:33.637283Z",
        "url": "https://files.pythonhosted.org/packages/8c/b1/d9c7ab3e4f99136eb5f94a458e8143837bc5a5286c96ca459529ac68cdef/wurfapi-5.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a33ff3183cabfe92320fb317b21146f562d56a1731c9e2ae2f7c36ffb9106125",
          "md5": "5cb2523f32d671a0597ff83e43c7747f",
          "sha256": "8640e40a442421fc8b1bdd2bec283d45b380a9327902e18b76b103570b1de795"
        },
        "downloads": -1,
        "filename": "wurfapi-5.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cb2523f32d671a0597ff83e43c7747f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 42842,
        "upload_time": "2020-03-16T09:35:54",
        "upload_time_iso_8601": "2020-03-16T09:35:54.072326Z",
        "url": "https://files.pythonhosted.org/packages/a3/3f/f3183cabfe92320fb317b21146f562d56a1731c9e2ae2f7c36ffb9106125/wurfapi-5.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd0d984708cf6b5069baba198e1153c85bb9f39205bd68b9d8252e0edec54ec3",
          "md5": "5f3fc4c4401eb0a221cf5241e8276cc1",
          "sha256": "de0cd938eb9c9572ffabd53fe75a34898cec4b2028b8620a6770c59b8f192c7e"
        },
        "downloads": -1,
        "filename": "wurfapi-5.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f3fc4c4401eb0a221cf5241e8276cc1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 42846,
        "upload_time": "2020-04-21T10:19:52",
        "upload_time_iso_8601": "2020-04-21T10:19:52.826629Z",
        "url": "https://files.pythonhosted.org/packages/fd/0d/984708cf6b5069baba198e1153c85bb9f39205bd68b9d8252e0edec54ec3/wurfapi-5.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8147c7e3f04e836dfea7d9ae856c0610bd49255e542a433bcb42c3538cd82018",
          "md5": "acffbbe9e756da30a218c9e227f6f015",
          "sha256": "b6fa038ad3c61aa4eaca1ffe54c01d1941509d65e8711d7f6232e10dd62d15d4"
        },
        "downloads": -1,
        "filename": "wurfapi-6.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "acffbbe9e756da30a218c9e227f6f015",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 43114,
        "upload_time": "2020-04-23T09:09:53",
        "upload_time_iso_8601": "2020-04-23T09:09:53.386414Z",
        "url": "https://files.pythonhosted.org/packages/81/47/c7e3f04e836dfea7d9ae856c0610bd49255e542a433bcb42c3538cd82018/wurfapi-6.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0fdc86063d8ad9e6ea75c962593f717fa93cd9a86291b8c5f0647d4f24b0491",
          "md5": "d4e55566ca859f18818365dd2dd72923",
          "sha256": "27358355314de303d283f95e2f48acad1af44a47761e93e6324c1c0f9c1560cf"
        },
        "downloads": -1,
        "filename": "wurfapi-6.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4e55566ca859f18818365dd2dd72923",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 43088,
        "upload_time": "2020-05-22T13:40:48",
        "upload_time_iso_8601": "2020-05-22T13:40:48.581898Z",
        "url": "https://files.pythonhosted.org/packages/a0/fd/c86063d8ad9e6ea75c962593f717fa93cd9a86291b8c5f0647d4f24b0491/wurfapi-6.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ca5754542f00786d1e27bf2e6f719844caf37fc7507c208138e0f50d97231eb",
          "md5": "f100a78afda076bfeb2848676540bc78",
          "sha256": "5d77d2668ffe3f1532a0b13d96e5bea63889656f9156f4152009f7f0691f8238"
        },
        "downloads": -1,
        "filename": "wurfapi-7.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f100a78afda076bfeb2848676540bc78",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 45387,
        "upload_time": "2020-06-08T11:35:09",
        "upload_time_iso_8601": "2020-06-08T11:35:09.629035Z",
        "url": "https://files.pythonhosted.org/packages/4c/a5/754542f00786d1e27bf2e6f719844caf37fc7507c208138e0f50d97231eb/wurfapi-7.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a5fd5d82a1494b844697d5e44e943c09862267310e924496cd4ec6e58b9e0b7",
          "md5": "928ce938127c70a6e7bd7945ab108c27",
          "sha256": "3f16c5f4230d74db273b15ec42a71558d1947f02cd2c319e132aa7329b108f37"
        },
        "downloads": -1,
        "filename": "wurfapi-7.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "928ce938127c70a6e7bd7945ab108c27",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 45902,
        "upload_time": "2020-09-24T12:11:18",
        "upload_time_iso_8601": "2020-09-24T12:11:18.134672Z",
        "url": "https://files.pythonhosted.org/packages/0a/5f/d5d82a1494b844697d5e44e943c09862267310e924496cd4ec6e58b9e0b7/wurfapi-7.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf95ce73fb6c5384266ad8cd237d665e29fbdedf582a31561b1f79e048257844",
          "md5": "371f71d37ebe129b402b3a47f391586d",
          "sha256": "5125f3a593d2b4b9822029efb67c2874b6364dd6573f9c046c179e319c7cd8e3"
        },
        "downloads": -1,
        "filename": "wurfapi-7.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "371f71d37ebe129b402b3a47f391586d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 45924,
        "upload_time": "2020-10-06T09:02:57",
        "upload_time_iso_8601": "2020-10-06T09:02:57.650917Z",
        "url": "https://files.pythonhosted.org/packages/cf/95/ce73fb6c5384266ad8cd237d665e29fbdedf582a31561b1f79e048257844/wurfapi-7.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b65a5ed097a7c3317255c1c7c8c5eb09a46031de7864d3a1cb50292a4c9df018",
          "md5": "b11ef27f4ebadea626d90cf47135db29",
          "sha256": "71e810fc7e458af6de18f23c375ade2a058ce40fa2988acddce19ec7fe34d1fa"
        },
        "downloads": -1,
        "filename": "wurfapi-7.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b11ef27f4ebadea626d90cf47135db29",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 46178,
        "upload_time": "2020-11-06T08:31:06",
        "upload_time_iso_8601": "2020-11-06T08:31:06.077716Z",
        "url": "https://files.pythonhosted.org/packages/b6/5a/5ed097a7c3317255c1c7c8c5eb09a46031de7864d3a1cb50292a4c9df018/wurfapi-7.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "167427186fa143b239ec53b72c2609a16f7104a3ac8fa7d75043f7d62ff56762",
          "md5": "863cfa1fb649134ff2e25e89c4907d85",
          "sha256": "fe6c18d3afba725d22d3f6a5c7e3030447fac45f6b947777bc5c3f8a09a51039"
        },
        "downloads": -1,
        "filename": "wurfapi-7.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "863cfa1fb649134ff2e25e89c4907d85",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 46195,
        "upload_time": "2020-11-06T09:22:36",
        "upload_time_iso_8601": "2020-11-06T09:22:36.270983Z",
        "url": "https://files.pythonhosted.org/packages/16/74/27186fa143b239ec53b72c2609a16f7104a3ac8fa7d75043f7d62ff56762/wurfapi-7.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "7.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1885df0902e2d27582963a38d3db6e0285494a542bd3a921389bf05dd4aaea8d",
          "md5": "5ee4d08783af700d5764a4877b2a8f65",
          "sha256": "079c8abce6ffb91671563aa9909f3e220966caef867a3a295245f619efcc0de2"
        },
        "downloads": -1,
        "filename": "wurfapi-7.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ee4d08783af700d5764a4877b2a8f65",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 46205,
        "upload_time": "2020-11-11T11:35:33",
        "upload_time_iso_8601": "2020-11-11T11:35:33.484340Z",
        "url": "https://files.pythonhosted.org/packages/18/85/df0902e2d27582963a38d3db6e0285494a542bd3a921389bf05dd4aaea8d/wurfapi-7.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "8.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d849fdfccf68a9232388b2835a46034c94c4280d9104560d045e5ed51a564a94",
          "md5": "6e8f744081182fc94bbe19f2a536a185",
          "sha256": "1f58494670be523eb6dd081744f3d89374a6aa024fe888132fb97d7f626a19c5"
        },
        "downloads": -1,
        "filename": "wurfapi-8.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e8f744081182fc94bbe19f2a536a185",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 46296,
        "upload_time": "2021-02-11T08:09:21",
        "upload_time_iso_8601": "2021-02-11T08:09:21.641758Z",
        "url": "https://files.pythonhosted.org/packages/d8/49/fdfccf68a9232388b2835a46034c94c4280d9104560d045e5ed51a564a94/wurfapi-8.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "8.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e9338b8891f951223e36eea4911366784560742dde5970ed278c2ece0a846bf",
          "md5": "f971d3f5197bc5c68788693a270ce277",
          "sha256": "c2297cdd4d0962ee4cefdd55a8ba402b2bc2b1e9c416c76d1ab0d2cd8591168a"
        },
        "downloads": -1,
        "filename": "wurfapi-8.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f971d3f5197bc5c68788693a270ce277",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 47377,
        "upload_time": "2021-06-08T11:43:41",
        "upload_time_iso_8601": "2021-06-08T11:43:41.793681Z",
        "url": "https://files.pythonhosted.org/packages/2e/93/38b8891f951223e36eea4911366784560742dde5970ed278c2ece0a846bf/wurfapi-8.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "9.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "054c4a4588fcd01d6452d2e4dd670bf0966e680aa77b69d931f3a874bacc114d",
          "md5": "82fa4774e956a3799d22ee40529d351a",
          "sha256": "394a0b660de84b14057f68043ae2ae7cbeede08d9173c467a16781b9169587c7"
        },
        "downloads": -1,
        "filename": "wurfapi-9.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82fa4774e956a3799d22ee40529d351a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 47754,
        "upload_time": "2022-02-22T09:10:06",
        "upload_time_iso_8601": "2022-02-22T09:10:06.324306Z",
        "url": "https://files.pythonhosted.org/packages/05/4c/4a4588fcd01d6452d2e4dd670bf0966e680aa77b69d931f3a874bacc114d/wurfapi-9.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "9.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c225433b3dc3caa8a0995632402f322f0b602190dbfc34abef58fc8b7dace59",
          "md5": "2640b039cd6d42b1cab361871a81ca42",
          "sha256": "e2290a2d2b36cb947d599b99da6c7a4c399e018658298d977bedc522ce78ef53"
        },
        "downloads": -1,
        "filename": "wurfapi-9.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2640b039cd6d42b1cab361871a81ca42",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 48445,
        "upload_time": "2023-02-28T09:59:25",
        "upload_time_iso_8601": "2023-02-28T09:59:25.617460Z",
        "url": "https://files.pythonhosted.org/packages/4c/22/5433b3dc3caa8a0995632402f322f0b602190dbfc34abef58fc8b7dace59/wurfapi-9.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c225433b3dc3caa8a0995632402f322f0b602190dbfc34abef58fc8b7dace59",
        "md5": "2640b039cd6d42b1cab361871a81ca42",
        "sha256": "e2290a2d2b36cb947d599b99da6c7a4c399e018658298d977bedc522ce78ef53"
      },
      "downloads": -1,
      "filename": "wurfapi-9.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2640b039cd6d42b1cab361871a81ca42",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 48445,
      "upload_time": "2023-02-28T09:59:25",
      "upload_time_iso_8601": "2023-02-28T09:59:25.617460Z",
      "url": "https://files.pythonhosted.org/packages/4c/22/5433b3dc3caa8a0995632402f322f0b602190dbfc34abef58fc8b7dace59/wurfapi-9.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}