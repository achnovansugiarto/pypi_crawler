{
  "info": {
    "author": "ML Tooling Team",
    "author_email": "team@mltooling.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "<!-- markdownlint-disable MD033 MD041 -->\n<h1 align=\"center\">\n    Opyrator\n</h1>\n\n<p align=\"center\">\n    <strong>Turns your Python functions into microservices with web API, interactive GUI, and more.</strong>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://pypi.org/project/opyrator/\" title=\"PyPi Version\"><img src=\"https://img.shields.io/pypi/v/opyrator?color=green&style=flat\"></a>\n    <a href=\"https://pypi.org/project/opyrator/\" title=\"Python Version\"><img src=\"https://img.shields.io/badge/Python-3.6%2B-blue&style=flat\"></a>\n    <a href=\"https://github.com/ml-tooling/opyrator/blob/main/LICENSE\" title=\"Project License\"><img src=\"https://img.shields.io/badge/License-MIT-green.svg\"></a>\n    <a href=\"https://github.com/ml-tooling/opyrator/actions?query=workflow%3Abuild-pipeline\" title=\"Build status\"><img src=\"https://img.shields.io/github/workflow/status/ml-tooling/opyrator/build-pipeline?style=flat\"></a>\n    <a href=\"ttps://mltooling.substack.com/subscribe\" title=\"Subscribe to newsletter\"><img src=\"http://bit.ly/2Md9rxM\"></a>\n    <a href=\"https://twitter.com/mltooling\" title=\"Follow on Twitter\"><img src=\"https://img.shields.io/twitter/follow/mltooling.svg?style=social&label=Follow\"></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"#getting-started\">Getting Started</a> •\n  <a href=\"#features\">Features</a> •\n  <a href=\"#examples\">Examples</a> •\n  <a href=\"#support--feedback\">Support</a> •\n  <a href=\"https://github.com/ml-tooling/opyrator/issues/new?labels=bug&template=01_bug-report.md\">Report a Bug</a> •\n  <a href=\"#contribution\">Contribution</a> •\n  <a href=\"https://github.com/ml-tooling/opyrator/releases\">Changelog</a>\n</p>\n\nInstantly turn your Python functions into production-ready microservices. Deploy and access your services via HTTP API or interactive UI. Seamlessly export your services into portable, shareable, and executable files or Docker images. Opyrator builds on open standards - OpenAPI,  JSON Schema, and Python type hints - and is powered by FastAPI, Streamlit, and Pydantic. It cuts out all the pain for productizing and sharing your Python code - or anything you can wrap into a single Python function.\n\n<sup>Alpha Version: Only suggested for experimental usage.</sup>\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/opyrator-header.png\"/>\n\n---\n\n<p align=\"center\">\n     Try out and explore various examples in our playground <a href=\"https://opyrator-playground.mltooling.org\">here</a>.\n</p>\n\n---\n\n## Highlights\n\n- 🪄&nbsp; Turn functions into production-ready services within seconds.\n- 🔌&nbsp; Auto-generated HTTP API based on FastAPI.\n- 🌅&nbsp; Auto-generated Web UI based on Streamlit.\n- 📦&nbsp; Save and share as self-contained executable file or Docker image.\n- 🧩&nbsp; Reuse pre-defined components & combine with existing Opyrators.\n- 📈&nbsp; Instantly deploy and scale for production usage.\n\n## Getting Started\n\n### Installation\n\n> _Requirements: Python 3.6+._\n\n```bash\npip install opyrator\n```\n\n### Usage\n\n1. A simple Opyrator-compatible function could look like this:\n\n    ```python\n    from pydantic import BaseModel\n\n    class Input(BaseModel):\n        message: str\n\n    class Output(BaseModel):\n        message: str\n\n    def hello_world(input: Input) -> Output:\n        \"\"\"Returns the `message` of the input data.\"\"\"\n        return Output(message=input.message)\n    ```\n\n    _💡 An Opyrator-compatible function is required to have an `input` parameter and return value based on [Pydantic models](https://pydantic-docs.helpmanual.io/). The input and output models are specified via [type hints](https://docs.python.org/3/library/typing.html)._\n\n2. Copy this code to a file, e.g. `my_opyrator.py`\n3. Run the UI server from command-line:\n\n    ```bash\n    opyrator launch-ui my_opyrator:hello_world\n    ```\n\n    _In the output, there's a line that shows where your web app is being served, on your local machine._\n\n    <img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/opyrator-hello-world-ui.png\"/>\n\n4. Run the HTTP API server from command-line:\n\n    ```bash\n    opyrator launch-api my_opyrator:hello_world\n    ```\n    _In the output, there's a line that shows where your web service is being served, on your local machine._\n\n    <img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/opyrator-hello-world-api.png\"/>\n\n5. Find out more usage information in the [Features](#features) section or get inspired by our [examples](#examples).\n\n## Examples\n\n---\n\n<p align=\"center\">\n     👉&nbsp; Try out and explore these examples in our playground <a href=\"https://opyrator-playground.mltooling.org\">here</a>\n</p>\n\n---\n\nThe following collection of examples demonstrate how Opyrator can support a variety of different tasks and use-cases. All these examples are bundled into a demo playground which you can also deploy on your own machine via Docker:\n\n```bash\ndocker run -p 8080:8080 mltooling/opyrator-playground:latest\n```\n\n### Text Generation\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/text-generation-demo.png\"/>\n\n- 📄&nbsp; [Source Code](https://github.com/ml-tooling/opyrator/blob/main/examples/generate_text/app.py)\n- 🌅&nbsp; [UI Demo](https://play.mltooling.com/opyrator/demos/generate_text_ui/)\n- 🔌&nbsp; [OpenAPI Spec](https://editor.swagger.io/?url=https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/openapi-demo-specs/generate-text-openapi-spec.json)\n\n<details>\n<summary>Run this demo on your machine (click to expand...)</summary>\n\nTo run the demo on your local machine just execute the following commands:\n\n```bash\ngit clone https://github.com/ml-tooling/opyrator\ncd ./opyrator/examples/generate_text/\npip install -r requirements.txt\nopyrator launch-ui app:generate_text --port 8051\n```\n\nVisit http://localhost:8051 in your browser to access the UI of the demo. Use `launch-api` instead of `launch-ui` to launch the HTTP API server.\n\n</details>\n\n### Question Answering\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/question-answering-demo.png\"/>\n\n- 📄&nbsp; [Source Code](https://github.com/ml-tooling/opyrator/blob/main/examples/question_answering/app.py)\n- 🌅&nbsp; [UI Demo](https://play.mltooling.com/opyrator/demos/question_answering_ui/)\n- 🔌&nbsp; [OpenAPI Spec](https://editor.swagger.io/?url=https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/openapi-demo-specs/question-answering-openapi-spec.json)\n\n<details>\n<summary>Run this demo on your machine (click to expand...)</summary>\n\nTo run the demo on your local machine just execute the following commands:\n\n```bash\ngit clone https://github.com/ml-tooling/opyrator\ncd ./opyrator/examples/question_answering/\npip install -r requirements.txt\nopyrator launch-ui app:question_answering --port 8051\n```\n\nVisit http://localhost:8051 in your browser to access the UI of the demo. Use `launch-api` instead of `launch-ui` to launch the HTTP API server.\n\n</details>\n\n### Image Super Resolution\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/image-super-resolution-demo.png\"/>\n\n- 📄&nbsp; [Source Code](https://github.com/ml-tooling/opyrator/blob/main/examples/image_super_resolution/app.py)\n- 🌅&nbsp; [UI Demo](https://play.mltooling.com/opyrator/demos/image_super_resolution_ui/)\n- 🔌&nbsp; [OpenAPI Spec](https://editor.swagger.io/?url=https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/openapi-demo-specs/image-super-resolution-openapi-spec.json)\n\n<details>\n<summary>Run this demo on your machine (click to expand...)</summary>\n\nTo run the demo on your local machine just execute the following commands:\n\n```bash\ngit clone https://github.com/ml-tooling/opyrator\ncd ./opyrator/examples/image_super_resolution/\npip install -r requirements.txt\nopyrator launch-ui app:image_super_resolution --port 8051\n```\n\nVisit http://localhost:8051 in your browser to access the UI of the demo. Use `launch-api` instead of `launch-ui` to launch the HTTP API server.\n\n</details>\n\n### Text Preprocessing\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/text-preprocessing-demo.png\"/>\n\n- 📄&nbsp; [Source Code](https://github.com/ml-tooling/opyrator/blob/main/examples/preprocess_text/app.py)\n- 🌅&nbsp; [UI Demo](https://play.mltooling.com/opyrator/demos/preprocess_text_ui/)\n- 🔌&nbsp; [OpenAPI Spec](https://editor.swagger.io/?url=https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/openapi-demo-specs/preprocess-text-openapi-spec.json)\n\n<details>\n<summary>Run this demo on your machine (click to expand...)</summary>\n\nTo run the demo on your local machine just execute the following commands:\n\n```bash\ngit clone https://github.com/ml-tooling/opyrator\ncd ./opyrator/examples/preprocess_text/\npip install -r requirements.txt\nopyrator launch-ui app:preprocess_text --port 8051\n```\n\nVisit http://localhost:8051 in your browser to access the UI of the demo. Use `launch-api` instead of `launch-ui` to launch the HTTP API server.\n\n</details>\n\n### Language Detection\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/language-detection-demo.png\"/>\n\n- 📄&nbsp; [Source Code](https://github.com/ml-tooling/opyrator/blob/main/examples/detect_language/app.py)\n- 🌅&nbsp; [UI Demo](https://play.mltooling.com/opyrator/demos/detect_language_ui/)\n- 🔌&nbsp; [OpenAPI Spec](https://editor.swagger.io/?url=https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/openapi-demo-specs/detect-language-openapi-spec.json)\n\n<details>\n<summary>Run this demo on your machine (click to expand...)</summary>\n\nTo run the demo on your local machine just execute the following commands:\n\n```bash\ngit clone https://github.com/ml-tooling/opyrator\ncd ./opyrator/examples/detect_language/\npip install -r requirements.txt\nopyrator launch-ui app:detect_language --port 8051\n```\n\nVisit http://localhost:8051 in your browser to access the UI of the demo. Use `launch-api` instead of `launch-ui` to launch the HTTP API server.\n\n</details>\n\n### Audio Separation\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/audio-separation-demo.png\"/>\n\n- 📄&nbsp; [Source Code](https://github.com/ml-tooling/opyrator/blob/main/examples/separate_audio/app.py)\n- 🌅&nbsp; [UI Demo](https://play.mltooling.com/opyrator/demos/seperate_audio_ui/)\n- 🔌&nbsp; [OpenAPI Spec](https://editor.swagger.io/?url=https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/openapi-demo-specs/separate-audio-openapi-spec.json)\n\n<details>\n<summary>Run this demo on your machine (click to expand...)</summary>\n\nTo run the demo on your local machine just execute the following commands:\n\n```bash\ngit clone https://github.com/ml-tooling/opyrator\ncd ./opyrator/examples/separate_audio/\npip install -r requirements.txt\nopyrator launch-ui app:separate_audio --port 8051\n```\n\nVisit http://localhost:8051 in your browser to access the UI of the demo. Use `launch-api` instead of `launch-ui` to launch the HTTP API server.\n\n</details>\n\n### Word Vectors Training\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/train-word-vectors-demo.png\"/>\n\n- 📄&nbsp; [Source Code](https://github.com/ml-tooling/opyrator/blob/main/examples/train_word_vectors/app.py)\n- 🌅&nbsp; [UI Demo](https://play.mltooling.com/opyrator/demos/train_word_vectors_ui/)\n- 🔌&nbsp; [OpenAPI Spec](https://editor.swagger.io/?url=https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/openapi-demo-specs/train-word-vectors-openapi-spec.json)\n\n<details>\n<summary>Run this demo on your machine (click to expand...)</summary>\n\nTo run the demo on your local machine just execute the following commands:\n\n```bash\ngit clone https://github.com/ml-tooling/opyrator\ncd ./opyrator/examples/train_word_vectors/\npip install -r requirements.txt\nopyrator launch-ui app:train_word_vectors --port 8051\n```\n\nVisit http://localhost:8051 in your browser to access the UI of the demo. Use `launch-api` instead of `launch-ui` to launch the HTTP API server.\n\n</details>\n\n### Named Entity Recognition\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/named-entity-recognition-demo.png\"/>\n\n- 📄&nbsp; [Source Code](https://github.com/ml-tooling/opyrator/blob/main/examples/named_entity_recognition/app.py)\n- 🌅&nbsp; [UI Demo](https://play.mltooling.com/opyrator/demos/named_entity_recognition_ui/)\n- 🔌&nbsp; [OpenAPI Spec](https://editor.swagger.io/?url=https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/openapi-demo-specs/named-entity-recognition-openapi-spec.json)\n\n<details>\n<summary>Run this demo on your machine (click to expand...)</summary>\n\nTo run the demo on your local machine just execute the following commands:\n\n```bash\ngit clone https://github.com/ml-tooling/opyrator\ncd ./opyrator/examples/named_entity_recognition/\npip install -r requirements.txt\nopyrator launch-ui app:named_entity_recognition --port 8051\n```\n\nVisit http://localhost:8051 in your browser to access the UI of the demo. Use `launch-api` instead of `launch-ui` to launch the HTTP API server.\n\n</details>\n\n### Components Showcase\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/components-showcase-demo.png\"/>\n\n- 📄&nbsp; [Source Code](https://github.com/ml-tooling/opyrator/blob/main/examples/showcase_components/app.py)\n- 🌅&nbsp; [UI Demo](https://play.mltooling.com/opyrator/demos/showcase_components_ui/)\n- 🔌&nbsp; [OpenAPI Spec](https://editor.swagger.io/?url=https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/openapi-demo-specs/showcase-components-openapi-spec.json)\n\n<details>\n<summary>Run this demo on your machine (click to expand...)</summary>\n\nTo run the demo on your local machine just execute the following commands:\n\n```bash\ngit clone https://github.com/ml-tooling/opyrator\ncd ./opyrator/examples/showcase_components/\npip install -r requirements.txt\nopyrator launch-ui app:showcase_components --port 8051\n```\n\nVisit http://localhost:8051 in your browser to access the UI of the demo. Use `launch-api` instead of `launch-ui` to launch the HTTP API server.\n\n</details>\n\n## Support & Feedback\n\nThis project is maintained by [Benjamin Räthlein](https://twitter.com/raethlein), [Lukas Masuch](https://twitter.com/LukasMasuch), and [Jan Kalkan](https://www.linkedin.com/in/jan-kalkan-b5390284/). Please understand that we won't be able to provide individual support via email. We also believe that help is much more valuable if it's shared publicly so that more people can benefit from it.\n\n| Type                     | Channel                                              |\n| ------------------------ | ------------------------------------------------------ |\n| 🚨&nbsp; **Bug Reports**       | <a href=\"https://github.com/ml-tooling/opyrator/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3Abug+sort%3Areactions-%2B1-desc+\" title=\"Open Bug Report\"><img src=\"https://img.shields.io/github/issues/ml-tooling/opyrator/bug.svg?label=bug\"></a>                                 |\n| 🎁&nbsp; **Feature Requests**  | <a href=\"https://github.com/ml-tooling/opyrator/issues?q=is%3Aopen+is%3Aissue+label%3Afeature+sort%3Areactions-%2B1-desc\" title=\"Open Feature Request\"><img src=\"https://img.shields.io/github/issues/ml-tooling/opyrator/feature.svg?label=feature%20request\"></a>                                 |\n| 👩‍💻&nbsp; **Usage Questions**   |  <a href=\"https://github.com/ml-tooling/opyrator/issues?q=is%3Aopen+is%3Aissue+label%3Asupport+sort%3Areactions-%2B1-desc\" title=\"Open Support Request\"> <img src=\"https://img.shields.io/github/issues/ml-tooling/opyrator/support.svg?label=support%20request\"></a> <a href=\"https://gitter.im/ml-tooling/community\" title=\"Chat on Gitter\"><img src=\"https://badges.gitter.im/ml-tooling/community.svg\"></a> |\n| 📢&nbsp; **Announcements** | <a href=\"https://gitter.im/ml-tooling/community\" title=\"Chat on Gitter\"><img src=\"https://badges.gitter.im/mml-tooling/community.svg\"></a>  <a href=\"https://mltooling.substack.com/subscribe\" title=\"Subscribe for updates\"><img src=\"http://bit.ly/2Md9rxM\"></a> <a href=\"https://twitter.com/mltooling\" title=\"ML Tooling on Twitter\"><img src=\"https://img.shields.io/twitter/follow/mltooling.svg?style=social&label=Follow\"> |\n| ❓&nbsp; **Other Requests** | <a href=\"mailto:team@ml-tooling.org\" title=\"Email ML Tooling Team\"><img src=\"https://img.shields.io/badge/email-ML Tooling-green?logo=mail.ru&logoColor=white\"></a> |\n\n## Features\n\n<p align=\"center\">\n  <a href=\"#http-api\">HTTP API</a> •\n  <a href=\"#graphical-ui\">Graphical UI</a> •\n  <a href=\"#command-line-interface\">CLI</a> •\n  <a href=\"#zip-export\">Zip Export</a> •\n  <a href=\"#docker-export\">Docker Export</a> •\n  <a href=\"#pre-defined-components\">Pre-defined Components</a> •\n  <a href=\"#production-deployment\">Production Deployment</a>\n</p>\n\n### HTTP API\n\nWith Opyrator, you can instantly launch a local HTTP (REST) API server for any [compatible function](#compatible-functions):\n\n```bash\nopyrator launch-api my_opyrator:hello_world\n```\n\nThis will launch a [FastAPI](https://fastapi.tiangolo.com/) server based on the [OpenAPI standard](https://swagger.io/specification) and with an automatic interactive documentation.\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/opyrator-hello-world-api.png\"/>\n\n_💡 Make sure that all requirements of your script are installed in the active Python enviornment._\n\nThe port used by the API server can be provided via CLI arguments:\n\n```bash\nopyrator launch-api my_opyrator:hello_world --port 8080\n```\n\nThe API server can also be started via the exported zip-file format (see [zip export section](#zip-export) below).\n\n```bash\nopyrator launch-api my-opyrator.zip\n```\n\n### Graphical UI\n\nYou can launch a graphical user interface - powered by  [Streamlit](https://streamlit.io/) - for your [compatible function](#compatible-functions). The UI is auto-generated from the input- and output-schema of the given function.\n\n```bash\nopyrator launch-ui my_opyrator:hello_world\n```\n\n<img style=\"width: 100%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/opyrator-hello-world-ui.png\"/>\n\n_💡 Make sure that all requirements of your script are installed in the active Python environment._\n\nYou can influence most aspects of the UI just by changing and improving the input- and output-schema of your function. Furthermore, it is also possible to define custom UIs for the function's input and output. For more details, refer to the [input- and output-schema](#TODO) section.\n\nThe port used by the UI server can be provided via CLI arguments:\n\n```bash\nopyrator launch-ui my_opyrator:hello_world --port 8080\n```\n\nThe UI server can also be started via the exported zip-file format (see [zip export section](#zip-export) below).\n\n```bash\nopyrator launch-ui my-opyrator.zip\n```\n\nIn addition, the UI server can be started by using an already running Opyrator API endpoint:\n\n```bash\nopyrator launch-ui http://my-opyrator:8080 \n```\n\nThereby, all Opyrator calls from the UI will be executed via the configured HTTP endpoint instead of the Python function running inside the UI server.\n\n### Command-line Interface\n\nAn Opyrator can also be executed via command-line:\n\n```bash\nopyrator call my_opyrator:hello_world '{\"message\": \"hello\"}'\n```\n\n<img style=\"width: 80%\" src=\"https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/opyrator-cli.png\"/>\n\nThe CLI interface also works using the [zip export format](#zip-export):\n\n```bash\nopyrator call my-opyrator.zip '{\"message\": \"hello\"}'\n```\n\nOr, by using an already running Opyrator API endpoint:\n\n```bash\nopyrator call http://my-opyrator:8080 '{\"message\": \"hello\"}'\n```\n\nThereby, the function call is executed by the Opyrator API server, instead of locally using the Python function.\n\n### Zip Export\n\nOpyrator allows you to package and export a [compatible function](#compatible-functions) into a self-contained zip-file:\n\n```bash\nopyrator export my_opyrator:hello_world my-opyrator.zip\n```\n\nThis exported zip-file packages relevant source code and data artifacts into a single file which can be shared, stored, and used for launching the API or UI as shown above.\n\nExternal requirements are automatically discovered from the working directory based on the following files: `Pipfile` (Pipenv environment), `environment.yml` (Conda environment), `pyproject.toml` (Poetry dependencies), `requirements.txt` (pip-requirements), `setup.py` (Python project requirements), `packages.txt` (apt-get packages), or discovered via [pipreqs](https://github.com/bndr/pipreqs) as fallback. However, external requirements are only included as instructions and are not packaged into the zip-file. If you want to export your Opyrator fully self-contained including all requirements or even the Python interpreter itself, please refer to the [Docker](#docker-export) or [pex](#pex-export) export options.\n\nAs a side note, Opyrators exported as zip-files are (mini) Python libraries that can be pip-installed, imported, and used from other Python code:\n\n```bash\npip install my-opyrator.zip\n```\n\n_WIP: This feature is not finalized yet. You can track the progress and vote for the feature [here](https://github.com/ml-tooling/opyrator/issues/3)_\n\n### Docker Export\n\nIn addition to the ZIP export, Opyrator also provides the capability to export to a Docker image:\n\n```bash\nopyrator export my_opyrator:hello_world --format=docker my-opyrator-image:latest\n```\n\n_💡 The Docker export requires that Docker is installed on your machine._\n\nAfter the successful export, the Docker image can be run as shown below:\n\n```bash\ndocker run -p 8080:8080 my-opyrator-image:latest\n```\n\nRunning your Opyrator within this Docker image has the advantage that only a single port is required to be exposed. The separation between UI and API is done via URL paths: `http://localhost:8080/api` (API); `http://localhost:8080/ui` (UI). The UI is automatically configured to use the API for all function calls.\n\n_WIP: This feature is not finalized yet. You can track the progress and vote for the feature [here](https://github.com/ml-tooling/opyrator/issues/4)._\n\n### Pex Export\n\nOpyrator also provides the capability to export to a pex-file. [Pex](https://github.com/pantsbuild/pex) is a tool to create self-contained executable Python environments that contain all relevant python dependencies.\n\n```bash\nopyrator export my_opyrator:hello_world --format=pex my-opyrator.pex\n```\n\n_WIP: This feature is not finalized yet. You can track the progress and vote for the feature [here](https://github.com/ml-tooling/opyrator/issues/5)._\n\n### Python Client\n\nEvery deployed Opyrator provides a Python client library via an endpoint method which can be installed with pip:\n\n```bash\npip install http://my-opyrator:8080/client\n```\n\nAnd used in your code, as shown below:\n\n```python\nfrom my_opyrator import Client, Input\nopyrator_client = Client(\"http://my-opyrator:8080\")\nresult = opyrator_client.call(Input(text=\"hello\", wait=1))\n```\n\n_WIP: This feature is not finalized yet. You can track the progress and vote for the feature [here](https://github.com/ml-tooling/opyrator/issues/8)._\n\n### Pre-defined Components\n\nOpyrator provides a growing collection of pre-defined components (input- and output models) for common tasks. Some of these components also provide more advanced UIs and Visualizations. You can reuse these components to speed up your development and, thereby, keep your Opyrators compatible with other functionality improvements or other Opyrators.\n\nYou can find some of the available interfaces in the [examples](#examples) section or in this [source code package](#TODO).\n\n_WIP: This feature is not finalized yet. You can track the progress and vote for the feature [here](https://github.com/ml-tooling/opyrator/issues/9)._\n\n### Production Deployment\n\nRolling out your Opyrators for production usage might require additional features such as SSL, authentication, API tokens, unlimited scalability, load balancing, and monitoring. Therefore, we provide capabilities to easily  deploy your Opyrators directly on scalable and secure cloud platforms without any major overhead:\n\n```bash\nopyrator deploy my_opyrator:hello_world <deployment-provider> <deployment-provider-options>\n```\n\n_WIP: This feature is not finalized yet. You can track the progress and vote for the feature [here](https://github.com/ml-tooling/opyrator/issues/6)._\n\n## Documentation\n\n### Compatible Functions\n\nA function is compatible with Opyrator if it fulfills the following requirements:\n\n- A single parameter called `input` which MUST be a subclass of the [Pydantic BaseModel](https://pydantic-docs.helpmanual.io/usage/models/).\n- A single return value that MUST be a subclass of the [Pydantic BaseModel](https://pydantic-docs.helpmanual.io/usage/models/).\n- The `input` parameter and return value MUST be annotated with Python typing hints.\n\n### Input- and Output-Schema\n\n_WIP_\n\n### Command-line Interface\n\n_WIP_\n\n\n## Contribution\n\n- Pull requests are encouraged and always welcome. Read our [contribution guidelines](https://github.com/ml-tooling/opyrator/tree/main/CONTRIBUTING.md) and check out [help-wanted](https://github.com/ml-tooling/opyrator/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A\"help+wanted\"+sort%3Areactions-%2B1-desc+) issues.\n- Submit Github issues for any [feature request and enhancement](https://github.com/ml-tooling/opyrator/issues/new?assignees=&labels=feature&template=02_feature-request.md&title=), [bugs](https://github.com/ml-tooling/opyrator/issues/new?assignees=&labels=bug&template=01_bug-report.md&title=), or [documentation](https://github.com/ml-tooling/opyrator/issues/new?assignees=&labels=documentation&template=03_documentation.md&title=) problems.\n- By participating in this project, you agree to abide by its [Code of Conduct](https://github.com/ml-tooling/opyrator/blob/main/.github/CODE_OF_CONDUCT.md).\n- The [development section](#development) below contains information on how to build and test the project after you have implemented some changes.\n\n## Development\n\nRefer to our [contribution guides](https://github.com/ml-tooling/opyrator/blob/main/CONTRIBUTING.md#development-instructions) for information on our build scripts and development process.\n\n---\n\nLicensed **MIT**. Created and maintained with ❤️&nbsp; by developers from Berlin.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ml-tooling/opyrator",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opyrator",
    "package_url": "https://pypi.org/project/opyrator/",
    "platform": "",
    "project_url": "https://pypi.org/project/opyrator/",
    "project_urls": {
      "Changelog": "https://github.com/ml-tooling/opyrator/releases",
      "Documentation": "https://github.com/ml-tooling/opyrator#documentation",
      "Homepage": "https://github.com/ml-tooling/opyrator",
      "Issue Tracker": "https://github.com/ml-tooling/opyrator/issues",
      "Source": "https://github.com/ml-tooling/opyrator"
    },
    "release_url": "https://pypi.org/project/opyrator/0.0.12/",
    "requires_dist": [
      "typer",
      "fastapi",
      "uvicorn",
      "streamlit (>=0.72)",
      "plotly",
      "pandas",
      "numpy",
      "loguru",
      "setuptools ; extra == 'dev'",
      "wheel ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-mock ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "black ; extra == 'dev'",
      "pydocstyle ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "lazydocs ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Turn python functions into microservices with auto-generated HTTP API, interactive UI, and more.",
    "version": "0.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10257770,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cbc62ca77ed28843a7c22937aee2b32d83f9d96ebc173fa5c55ac219d3c579e",
          "md5": "e57bf676fc01d420d02bcebf415968fc",
          "sha256": "2f677175d0263d1e3ad6fa793435fc74f5e0ab2801dba85344bcf96d30f3431a"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e57bf676fc01d420d02bcebf415968fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25432,
        "upload_time": "2021-04-28T09:01:44",
        "upload_time_iso_8601": "2021-04-28T09:01:44.809423Z",
        "url": "https://files.pythonhosted.org/packages/2c/bc/62ca77ed28843a7c22937aee2b32d83f9d96ebc173fa5c55ac219d3c579e/opyrator-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdd43ff555a51666c51f6b16f4673419d8e46a201f4c38c50b329346e2d2be4e",
          "md5": "7ce6c923b0e26a20d9bef894829ddc0f",
          "sha256": "c51bc75df4d92213a4c5b613060016d73c56330cda321ab03010d13fce3b55f7"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "7ce6c923b0e26a20d9bef894829ddc0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32703,
        "upload_time": "2021-04-28T09:01:46",
        "upload_time_iso_8601": "2021-04-28T09:01:46.072357Z",
        "url": "https://files.pythonhosted.org/packages/bd/d4/3ff555a51666c51f6b16f4673419d8e46a201f4c38c50b329346e2d2be4e/opyrator-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7c6bcc408ee5ca07984d7add106102f4473f13e02e6a6536be44fd3f4d8d15c",
          "md5": "9b010f3a788f08a6048deb99bbf33922",
          "sha256": "95ed7133e54385b82e9fb88e12380c19a5e576c95e748b4fe196b8a2e9eea4ec"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b010f3a788f08a6048deb99bbf33922",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25435,
        "upload_time": "2021-05-01T13:52:22",
        "upload_time_iso_8601": "2021-05-01T13:52:22.480442Z",
        "url": "https://files.pythonhosted.org/packages/f7/c6/bcc408ee5ca07984d7add106102f4473f13e02e6a6536be44fd3f4d8d15c/opyrator-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62c3ffa3a2998e21b365c08ad0d4be81d39a04449bbe8f437c2782aa37141128",
          "md5": "08cf057e268f9384e5079ef57ab779c7",
          "sha256": "4290338dac088450802d0e94c823ed9c6df81e5f02d3cf9eb9dc6642a91ee5d0"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "08cf057e268f9384e5079ef57ab779c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32708,
        "upload_time": "2021-05-01T13:52:23",
        "upload_time_iso_8601": "2021-05-01T13:52:23.775783Z",
        "url": "https://files.pythonhosted.org/packages/62/c3/ffa3a2998e21b365c08ad0d4be81d39a04449bbe8f437c2782aa37141128/opyrator-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20bf0e1439ab8bd51d130043b0ae5bcc4bfc993d54fa017ae173665b6fff3adf",
          "md5": "f8374a3387b912e20386be2358391aa2",
          "sha256": "0ff5c8ac86eb3fed90ca437b2e0509ec34660ce9f4d882ec9bcb3ab9cfce9f39"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8374a3387b912e20386be2358391aa2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25410,
        "upload_time": "2021-05-04T18:48:03",
        "upload_time_iso_8601": "2021-05-04T18:48:03.103292Z",
        "url": "https://files.pythonhosted.org/packages/20/bf/0e1439ab8bd51d130043b0ae5bcc4bfc993d54fa017ae173665b6fff3adf/opyrator-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06e94b8a0a06d97c794d7d3a0496756db74be5eafb25f4a74b3ee5c8cc247bf6",
          "md5": "92013a8b706f2c0eb59db504418c1901",
          "sha256": "38edbbda29065bbf5ac63fa80b8b443ba9bacd0b97c9f261d6e9b85620c1c79d"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "92013a8b706f2c0eb59db504418c1901",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32682,
        "upload_time": "2021-05-04T18:48:05",
        "upload_time_iso_8601": "2021-05-04T18:48:05.775460Z",
        "url": "https://files.pythonhosted.org/packages/06/e9/4b8a0a06d97c794d7d3a0496756db74be5eafb25f4a74b3ee5c8cc247bf6/opyrator-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a31ff9a09515b18695efc9e1b8ef94aa5f0e9f3af7eabf3910e2478fd3980908",
          "md5": "760872ad1174bb4d272de8ac1571c126",
          "sha256": "7c20709ddcddbe8586395d8597c8dd2dcde3daddf73b0b163b41ede89cdbf3c8"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "760872ad1174bb4d272de8ac1571c126",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5805,
        "upload_time": "2021-04-06T18:28:22",
        "upload_time_iso_8601": "2021-04-06T18:28:22.505249Z",
        "url": "https://files.pythonhosted.org/packages/a3/1f/f9a09515b18695efc9e1b8ef94aa5f0e9f3af7eabf3910e2478fd3980908/opyrator-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88f7cce9c85d78d17c4e4e9f00f46ac8521e9bb3299c6c42e464f6cca3d659cd",
          "md5": "e33bdd57fa5c783a0fbf0853220a97d2",
          "sha256": "6acf5fd0ba42dc0397cb857dac6cbc422bb0fb9697115d42c374c9fa5b67d700"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e33bdd57fa5c783a0fbf0853220a97d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7827,
        "upload_time": "2021-04-06T18:28:23",
        "upload_time_iso_8601": "2021-04-06T18:28:23.571312Z",
        "url": "https://files.pythonhosted.org/packages/88/f7/cce9c85d78d17c4e4e9f00f46ac8521e9bb3299c6c42e464f6cca3d659cd/opyrator-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b5f9b3b2f2efc908f96f0e5113bdc51c138b0c8d9f0f4968151226b13c2b300",
          "md5": "42c6e3e4a3786007df3416e44c7188bd",
          "sha256": "478e1eef37eb5cfbc8d4a4e1cdf5caadfb6a5fb3724f6f5d99bea8a9f1abee18"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42c6e3e4a3786007df3416e44c7188bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24152,
        "upload_time": "2021-04-19T09:48:31",
        "upload_time_iso_8601": "2021-04-19T09:48:31.392025Z",
        "url": "https://files.pythonhosted.org/packages/1b/5f/9b3b2f2efc908f96f0e5113bdc51c138b0c8d9f0f4968151226b13c2b300/opyrator-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "339f4e1ec6310f0d54e8624be68a3614a382381f32280922a1e57194aff21e1c",
          "md5": "e95575725e2806f5f65d2d026b9e0ec9",
          "sha256": "a7773da4b2afc4ee1688ccc75ed6a87dd92f44e887b3f1545b41ab38cfcef1e0"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e95575725e2806f5f65d2d026b9e0ec9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28618,
        "upload_time": "2021-04-19T09:48:32",
        "upload_time_iso_8601": "2021-04-19T09:48:32.641065Z",
        "url": "https://files.pythonhosted.org/packages/33/9f/4e1ec6310f0d54e8624be68a3614a382381f32280922a1e57194aff21e1c/opyrator-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "264fe95a6be4b9373958ee9a07269653f8eb8b5dd8d378a4d55496c6cf9fbba4",
          "md5": "4f9378ef87ce4278f555dd1b155d04f7",
          "sha256": "e1c8408d8f55c59d142e88269a81e13923a1ff283560b451a643d04f740ba5bc"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f9378ef87ce4278f555dd1b155d04f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24186,
        "upload_time": "2021-04-19T14:33:53",
        "upload_time_iso_8601": "2021-04-19T14:33:53.752698Z",
        "url": "https://files.pythonhosted.org/packages/26/4f/e95a6be4b9373958ee9a07269653f8eb8b5dd8d378a4d55496c6cf9fbba4/opyrator-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c783cfb835a0811b9bf15fa94071ddae75e688e861cf581fe7d1210c59f78b0",
          "md5": "3179fd4f281e4abaca783c7c96d41edc",
          "sha256": "ea05fc55efe530b241642ca4b04a1a35ad62a9569912893a79a37fe3a8c25027"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3179fd4f281e4abaca783c7c96d41edc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28665,
        "upload_time": "2021-04-19T14:33:54",
        "upload_time_iso_8601": "2021-04-19T14:33:54.637036Z",
        "url": "https://files.pythonhosted.org/packages/8c/78/3cfb835a0811b9bf15fa94071ddae75e688e861cf581fe7d1210c59f78b0/opyrator-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a7126e43bcf4783ac1f9fed67dc18ec41e21175ae975f5222feaf4a30953245",
          "md5": "e1abcf26a55e8d43a72152d4655945a5",
          "sha256": "cf86209e3d14dbef5243e0ad0a9b890892fe680f17258ed6222a1ec32e277ef4"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1abcf26a55e8d43a72152d4655945a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25193,
        "upload_time": "2021-04-20T18:44:11",
        "upload_time_iso_8601": "2021-04-20T18:44:11.642143Z",
        "url": "https://files.pythonhosted.org/packages/7a/71/26e43bcf4783ac1f9fed67dc18ec41e21175ae975f5222feaf4a30953245/opyrator-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbb8f51a5a75128fca48ec362e7cf0ae35b951fd5abe295e4922f5e5d30a2391",
          "md5": "fe94e4d3a6a48b2d1b75fd1be814b539",
          "sha256": "d9e7e93fa65d09a08e459f56cef3a092ff9b18c3dbd887d80bacb26c89ff57df"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fe94e4d3a6a48b2d1b75fd1be814b539",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31260,
        "upload_time": "2021-04-20T18:44:12",
        "upload_time_iso_8601": "2021-04-20T18:44:12.928023Z",
        "url": "https://files.pythonhosted.org/packages/bb/b8/f51a5a75128fca48ec362e7cf0ae35b951fd5abe295e4922f5e5d30a2391/opyrator-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bad21369c338e3016c666dbbd5194c067595680c2b532742f4ab05488f446be",
          "md5": "65fde16b697231889563cf9954698cbc",
          "sha256": "4b6ac36fb995ba187725e221f770e8f72d2df6184cdd6cd9dba145325cc4068b"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65fde16b697231889563cf9954698cbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25207,
        "upload_time": "2021-04-21T14:43:02",
        "upload_time_iso_8601": "2021-04-21T14:43:02.379164Z",
        "url": "https://files.pythonhosted.org/packages/8b/ad/21369c338e3016c666dbbd5194c067595680c2b532742f4ab05488f446be/opyrator-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b27e6116fdba5c6e20e8565a35fa11c416bf10a40a968bf21391abb9475520c1",
          "md5": "a9a43ba271e1d95767552269949afa6e",
          "sha256": "eba5e3993989da778a7cb0f8014ca1e70ce3bbd8f5c0659564eb20221ad51621"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a9a43ba271e1d95767552269949afa6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31313,
        "upload_time": "2021-04-21T14:43:03",
        "upload_time_iso_8601": "2021-04-21T14:43:03.490224Z",
        "url": "https://files.pythonhosted.org/packages/b2/7e/6116fdba5c6e20e8565a35fa11c416bf10a40a968bf21391abb9475520c1/opyrator-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dbe8e601f535e151412187e2b392a74ac694c16ca69c54dc82a4e3f5c6176b5",
          "md5": "4de8163c7415bb170b430b74bf4099f2",
          "sha256": "f78f7af0c88a3d1e554f9f0c4d54179c8e5533500fd95359d8e900beda8f9f39"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4de8163c7415bb170b430b74bf4099f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25210,
        "upload_time": "2021-04-22T07:52:40",
        "upload_time_iso_8601": "2021-04-22T07:52:40.606780Z",
        "url": "https://files.pythonhosted.org/packages/8d/be/8e601f535e151412187e2b392a74ac694c16ca69c54dc82a4e3f5c6176b5/opyrator-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2874f497c6d0ab9e52cb8b5ab03c03a65ff6592d444aff88446bcb6b328131c2",
          "md5": "ced7270dd7b096991731bc1709d455a2",
          "sha256": "6e840e33085a7a115980a001d0f81c4e15554a7ed39961afb3b996cf7b9c7b35"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ced7270dd7b096991731bc1709d455a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31298,
        "upload_time": "2021-04-22T07:52:42",
        "upload_time_iso_8601": "2021-04-22T07:52:42.418981Z",
        "url": "https://files.pythonhosted.org/packages/28/74/f497c6d0ab9e52cb8b5ab03c03a65ff6592d444aff88446bcb6b328131c2/opyrator-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23b773302ba082819b8e7c91ec02a6bbea4a02f7d91c6e37db7fac101d5416ec",
          "md5": "4b85615ff0671b0cfb12b2de391b7015",
          "sha256": "e177edd39c7d0737cb6a26b1be5ffb37f18fb77006b7c3c62525dd34c961cdb2"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b85615ff0671b0cfb12b2de391b7015",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25177,
        "upload_time": "2021-04-22T12:51:58",
        "upload_time_iso_8601": "2021-04-22T12:51:58.323678Z",
        "url": "https://files.pythonhosted.org/packages/23/b7/73302ba082819b8e7c91ec02a6bbea4a02f7d91c6e37db7fac101d5416ec/opyrator-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aecd65f868ff5e6648e30c7940183b6ae7e27c4f5c1623f0ae93d3e697dba25",
          "md5": "79ed58b0eddd8444e9c45c8a3d28b696",
          "sha256": "4387dc36db0c1bfd123c32610a67fa7bd8a62f7fcd976f96564f207506159aed"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "79ed58b0eddd8444e9c45c8a3d28b696",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32457,
        "upload_time": "2021-04-22T12:52:00",
        "upload_time_iso_8601": "2021-04-22T12:52:00.010163Z",
        "url": "https://files.pythonhosted.org/packages/4a/ec/d65f868ff5e6648e30c7940183b6ae7e27c4f5c1623f0ae93d3e697dba25/opyrator-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99c16841344a60704c614c4ed077a6d7e80d3c189d86df28eae7e7fdd793c5cd",
          "md5": "7506ad1075efd1e02a52444c0036aee9",
          "sha256": "135e5871bfa5e4c26a7a8193ebf83f7f4e37d0e5460a5bc8c8b292afe9cd16fd"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7506ad1075efd1e02a52444c0036aee9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25343,
        "upload_time": "2021-04-27T17:51:53",
        "upload_time_iso_8601": "2021-04-27T17:51:53.554374Z",
        "url": "https://files.pythonhosted.org/packages/99/c1/6841344a60704c614c4ed077a6d7e80d3c189d86df28eae7e7fdd793c5cd/opyrator-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3effa043b0aaf3e0000568c1458dcaac25df4feee9435771859165d44bbf79d",
          "md5": "6ff119d8a08ba7de9534afac8a88dc32",
          "sha256": "ae87aeff6091be89faeafa72ca98993c594913d99445b08e21ad036692ee99c9"
        },
        "downloads": -1,
        "filename": "opyrator-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "6ff119d8a08ba7de9534afac8a88dc32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32653,
        "upload_time": "2021-04-27T17:51:54",
        "upload_time_iso_8601": "2021-04-27T17:51:54.788405Z",
        "url": "https://files.pythonhosted.org/packages/e3/ef/fa043b0aaf3e0000568c1458dcaac25df4feee9435771859165d44bbf79d/opyrator-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20bf0e1439ab8bd51d130043b0ae5bcc4bfc993d54fa017ae173665b6fff3adf",
        "md5": "f8374a3387b912e20386be2358391aa2",
        "sha256": "0ff5c8ac86eb3fed90ca437b2e0509ec34660ce9f4d882ec9bcb3ab9cfce9f39"
      },
      "downloads": -1,
      "filename": "opyrator-0.0.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f8374a3387b912e20386be2358391aa2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 25410,
      "upload_time": "2021-05-04T18:48:03",
      "upload_time_iso_8601": "2021-05-04T18:48:03.103292Z",
      "url": "https://files.pythonhosted.org/packages/20/bf/0e1439ab8bd51d130043b0ae5bcc4bfc993d54fa017ae173665b6fff3adf/opyrator-0.0.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06e94b8a0a06d97c794d7d3a0496756db74be5eafb25f4a74b3ee5c8cc247bf6",
        "md5": "92013a8b706f2c0eb59db504418c1901",
        "sha256": "38edbbda29065bbf5ac63fa80b8b443ba9bacd0b97c9f261d6e9b85620c1c79d"
      },
      "downloads": -1,
      "filename": "opyrator-0.0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "92013a8b706f2c0eb59db504418c1901",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 32682,
      "upload_time": "2021-05-04T18:48:05",
      "upload_time_iso_8601": "2021-05-04T18:48:05.775460Z",
      "url": "https://files.pythonhosted.org/packages/06/e9/4b8a0a06d97c794d7d3a0496756db74be5eafb25f4a74b3ee5c8cc247bf6/opyrator-0.0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}