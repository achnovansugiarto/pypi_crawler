{
  "info": {
    "author": null,
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Proof Of Concept: Monotrail\n\nThis proof of concept shows how to use python packages without virtualenvs. It will install both python itself and your dependencies, given a `requirement.txt` or a `pyproject.toml`/`poetry.lock` in the directory. Install with pipx, pip or a binary from [release](https://github.com/konstin/poc-monotrail/releases/latest) or [main](https://konstin.github.io/poc-monotrail/)\n\n```\npipx install monotrail # or `pip install monotrail`\nmonotrail run python my_script.py\n```\n\nEvery dependency is installed only once globally and hooked to your code. No venv directory, no explicit installation, no activate, no pyenv.\n\nThis is a proof of concept, so only **most features are missing** and will crash or produce nonsense. E.g. non-linux is badly tested, installation is awkward, error messages are suboptimal, only pypi is supported, startup is slow, only some requirement.txt syntax is supported, lockfiles from interactive mode aren't saved, some pkg_resources usage doesn't work, etc. \n\nmonotrail means to show you can use python without the traditional \"installing packages in an environment\". It also integrates [python-build-standalone](https://github.com/indygreg/python-build-standalone) so you don't need to install python anymore. \n\nIt includes simple reimplementations of pipx and tox. There's also a pip package meant for notebooks, where you can interactively add packages at runtime, get an isolated package set per notebook and avoid version conflicts.\n\n## Usage\n\nFirst download the binary and put it in PATH (e.g. via `.local/bin`):\n\n```shell\nwget -O ~/.local/bin/monotrail https://konstin.github.io/poc-monotrail/main/ubuntu/monotrail\nchmod +x ~/.local/bin/monotrail\n```\n\nMake sure you have either a `requirements.txt` or `pyproject.toml`/`poetry.lock`:\n\n```\nmonotrail run python my_script.py\n```\n\nPicking the python version and extras:\n\n```\nmonotrail run -p 3.9 --extras fancy-pants python my_script.py --some-option\n```\n\nRunning commands that used to be in `.venv/bin`:\n\n```\nmonotrail run command pytest\n```\n\nThere's also a python package with an entrypoint:\n\n```\npip install monotrail\nmonotrail_python path/to/your/script.py\n```\n\nWith jupyter notebooks\n\n```jupyterpython\n!pip install monotrail\n```\n\n```python\nimport monotrail\n\nmonotrail.interactive(\n    numpy=\"^1.21\",\n    pandas=\"^1\"\n)\n```\n\n![Screenshot of the jupyter browser UI using monotrail](resources/jupyter.png)\n\nIn google colab, you might want to import your git repository:\n\n```python\nimport monotrail\n\nmonotrail.from_git(\n    \"https://github.com/sokrypton/ColabFold\", \"63b42b8f5b5da418efecf6c4d11490a96595020d\"\n)\n```\n\nAs [pipx](https://github.com/pypa/pipx) replacement: \n\n```shell\nmonotrail ppipx --extras jupyter black .\n```\n\nAs [tox](https://github.com/tox-dev/tox) replacement:\n\n```shell\nmonotrail run -p 3.8 -p 3.9 -p 3.10 command pytest\n```\n\nYou can symlink `monotrail` to a file called `python`, `python3` or `python3.x` and it'll work as python3.8 or the specified python version.\n\nThere is also a demo of the flat source layout, where you have the `__init__.py` directly in src instead of nesting `src/srcery/__init__.py`.\n\n```\nsrcery\n├── poetry.lock\n├── pyproject.toml\n└── src\n    ├── __init__.py\n    └── potion.py\n```\n\nSetting `RUST_LOG=debug` will give you details to track down bugs.\n\n## Background\n\nmonotrail first parses which python version you want (3.8 by default) and if not present downloads it from [PyOxy](https://github.com/indygreg/PyOxidizer/tree/main/pyoxy). It doesn't run python as an executable but instead loads `libpython.so` and uses the [C API](https://docs.python.org/3/c-api/veryhigh.html).\n\nNext, we search for a dependencies listing (`poetry.lock` or `requirements.txt`). If required we run poetry to resolve the dependencies (which we bootstrap through a pre-recorded `poetry.lock` for poetry itself). We install all missing packages to separate directories in `.cache/monotrail` and record all locations.\n\nWe initialize python and inject a custom [PathFinder](https://docs.python.org/3/library/importlib.html#importlib.machinery.PathFinder) with everything and add it to `sys.meta_path`. When python searches where `import` something from, it goes through all the `Finder`s in `sys.meta_path` until one returns a location. Ours knows the locations of the packages from the lockfile and python doesn't see anything else, so you can only load from the packages matching the lockfile. \n\nInteractive mode does pretty much the same, except we skip the python installation and there's a check that the version of an already imported package didn't change.\n\n## Benchmarks (wheel installation)\n\nOne neat thing about venv-less installation is that we install every package version only once, so no more 3 different installations of pytorch. This takes a lot less disk space (even though clearing the cache is an unsolved problem) but most importantly it means that if you have used all required package versions once before \"installation\" is instantaneous. It also removes the need to recreate broken venvs.\n\nBy reimplementing wheel installation in rust, it also became a good bit faster. `install-wheel-rs` has a separate python interface so you can reuse it as a fast wheel installer on its own.\n\nInstalling a single large wheel (plotly)\n\n```        \n$ rm -rf .venv-benchmark && virtualenv .venv-benchmark\n$ VIRTUAL_ENV=.venv-benchmark hyperfine -p \".venv-benchmark/bin/pip uninstall -y plotly\" \\\n  \"target/release/monotrail venv-install test-data/popular-wheels/plotly-5.5.0-py2.py3-none-any.whl\" \\\n  \".venv-benchmark/bin/pip install --no-deps test-data/popular-wheels/plotly-5.5.0-py2.py3-none-any.whl\"\n          \nBenchmark #1: target/release/monotrail install test-data/popular-wheels/plotly-5.5.0-py2.py3-none-any.whl\n  Time (mean ± σ):      5.797 s ±  0.069 s    [User: 3.796 s, System: 1.979 s]\n  Range (min … max):    5.699 s …  5.906 s    10 runs\n \nBenchmark #2: .venv-benchmark/bin/pip install --no-deps test-data/popular-wheels/plotly-5.5.0-py2.py3-none-any.whl\n  Time (mean ± σ):      7.658 s ±  0.061 s    [User: 5.448 s, System: 2.085 s]\n  Range (min … max):    7.598 s …  7.758 s    10 runs\n \nSummary\n  'target/release/monotrail install test-data/popular-wheels/plotly-5.5.0-py2.py3-none-any.whl' ran\n    1.32 ± 0.02 times faster than '.venv-benchmark/bin/pip install --no-deps test-data/popular-wheels/plotly-5.5.0-py2.py3-none-any.whl'\n```\n\nA sample datascience stack (numpy, pandas, matplotlib)\n\n```\ntest-data/poetry/data-science -E tqdm_feature\npip 22.0.4 from /home/konsti/monotrail/.venv-b/lib/python3.8/site-packages/pip (python 3.8)\nPoetry version 1.1.13\nBenchmark 1: .venv/bin/pip install -q -r requirements-benchmark.txt\n  Time (mean ± σ):     11.745 s ±  1.159 s    [User: 9.637 s, System: 1.339 s]\n  Range (min … max):   10.830 s … 13.048 s    3 runs\n \nBenchmark 2: poetry install -q --no-root -E tqdm_feature\n  Time (mean ± σ):     15.039 s ±  0.153 s    [User: 41.032 s, System: 5.934 s]\n  Range (min … max):   14.894 s … 15.199 s    3 runs\n \nBenchmark 3: monotrail poetry-install -E tqdm_feature\n  Time (mean ± σ):      5.232 s ±  0.135 s    [User: 12.850 s, System: 2.334 s]\n  Range (min … max):    5.089 s …  5.357 s    3 runs\n \nSummary\n  'monotrail poetry-install -E tqdm_feature' ran\n    2.24 ± 0.23 times faster than '.venv/bin/pip install -q -r requirements-benchmark.txt'\n    2.87 ± 0.08 times faster than 'poetry install -q --no-root -E tqdm_feature'\n```\n\nA mid-sized django project \n\n```\ntest-data/poetry/mst -E import-json\npip 22.0.4 from /home/konsti/monotrail/.venv-b/lib/python3.8/site-packages/pip (python 3.8)\nPoetry version 1.1.13\nBenchmark 1: .venv/bin/pip install -q -r requirements-benchmark.txt\n  Time (mean ± σ):     29.481 s ±  0.186 s    [User: 21.001 s, System: 3.313 s]\n  Range (min … max):   29.331 s … 29.690 s    3 runs\n \nBenchmark 2: poetry install -q --no-root -E import-json\n  Time (mean ± σ):     70.291 s ±  1.366 s    [User: 355.966 s, System: 46.958 s]\n  Range (min … max):   69.020 s … 71.735 s    3 runs\n \nBenchmark 3: monotrail poetry-install -E import-json\n  Time (mean ± σ):     10.714 s ±  1.423 s    [User: 43.583 s, System: 10.551 s]\n  Range (min … max):    9.504 s … 12.282 s    3 runs\n \nSummary\n  'monotrail poetry-install -E import-json' ran\n    2.75 ± 0.37 times faster than '.venv/bin/pip install -q -r requirements-benchmark.txt'\n    6.56 ± 0.88 times faster than 'poetry install -q --no-root -E import-json'\n```\n\n## Startup time\n\nHello world:\n\n```\n$ hyperfine --warmup 2 \"python hello.py\" \"../target/release/monotrail run python hello.py\"\nBenchmark 1: python hello.py\n  Time (mean ± σ):      17.3 ms ±   0.8 ms    [User: 14.5 ms, System: 2.9 ms]\n  Range (min … max):    16.3 ms …  20.5 ms    159 runs\n \nBenchmark 2: ../target/release/monotrail run python hello.py\n  Time (mean ± σ):     218.4 ms ±   5.4 ms    [User: 161.6 ms, System: 55.9 ms]\n  Range (min … max):   212.0 ms … 232.5 ms    13 runs\n \nSummary\n  'python hello.py' ran\n   12.65 ± 0.64 times faster than '../target/release/monotrail run python hello.py'\n```\n\nSimplest numpy usage:\n\n```python\nimport sys\nimport numpy\nprint(\n    f\"hi from python {sys.version_info.major}.{sys.version_info.minor} and \"\n    f\"numpy {numpy.__version__}\"\n)\n```\n\n```\n$ hyperfine --warmup 2 \"python numpy_version.py\" \"../target/release/monotrail run python numpy_version.py\"\nBenchmark 1: python numpy_version.py\n  Time (mean ± σ):      99.8 ms ±   1.2 ms    [User: 127.3 ms, System: 171.7 ms]\n  Range (min … max):    98.1 ms … 103.1 ms    29 runs\n \nBenchmark 2: ../target/release/monotrail run python numpy_version.py\n  Time (mean ± σ):     285.9 ms ±   1.8 ms    [User: 247.6 ms, System: 169.3 ms]\n  Range (min … max):   283.4 ms … 289.9 ms    10 runs\n \nSummary\n  'python numpy_version.py' ran\n    2.86 ± 0.04 times faster than '../target/release/monotrail run python numpy_version.py'\n```\n\n\n# Dev setup\n\nI use two venvs, the one I have activated is called `.venv-b` and another `.venv` where I install monotrail. Setup is\n\n```bash\nvirtualenv .venv-b\n. .venv-b/bin/activate\npip install -U maturin[zig] black pip pytest ipython\nvirtualenv .venv\n# pytest runs the tests, jupyter nbconvert is for testing the notebook\n.venv/bin/pip install pytest jupyter nbconvert\n```\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "monotrail",
    "package_url": "https://pypi.org/project/monotrail/",
    "platform": null,
    "project_url": "https://pypi.org/project/monotrail/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/monotrail/0.1.0/",
    "requires_dist": [
      "importlib_metadata ; python_version < \"3.7\""
    ],
    "requires_python": "",
    "summary": "This proof of concept shows how to use python packages without virtualenvs",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15036420,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f822d8bb63f83afe7dfc5d0e73b004d129015acebfa234a61eafcf5f777b7a01",
          "md5": "6c8e7bb8f523fd8cd9d09c5b8aef3366",
          "sha256": "c462c59bc59b09f95ca4039afdf182a35401c6e572659d73e692119bbb3c08bb"
        },
        "downloads": -1,
        "filename": "monotrail-0.1.0-cp37-abi3-macosx_10_9_x86_64.macosx_11_0_arm64.macosx_10_9_universal2.whl",
        "has_sig": false,
        "md5_digest": "6c8e7bb8f523fd8cd9d09c5b8aef3366",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 7906683,
        "upload_time": "2022-09-08T18:15:38",
        "upload_time_iso_8601": "2022-09-08T18:15:38.507842Z",
        "url": "https://files.pythonhosted.org/packages/f8/22/d8bb63f83afe7dfc5d0e73b004d129015acebfa234a61eafcf5f777b7a01/monotrail-0.1.0-cp37-abi3-macosx_10_9_x86_64.macosx_11_0_arm64.macosx_10_9_universal2.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d2160df005fe4343aa08f6bd1034ec56d2251cc79a530f61f0078c22a5c87636",
          "md5": "665cba38888e6cfbe2b12951ea6c5b0e",
          "sha256": "29e27c8973cac7b81a7fb26c2cb0afa92f510e62385dcd7a7d965676d1d2b158"
        },
        "downloads": -1,
        "filename": "monotrail-0.1.0-cp37-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "665cba38888e6cfbe2b12951ea6c5b0e",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 4722984,
        "upload_time": "2022-09-08T18:15:40",
        "upload_time_iso_8601": "2022-09-08T18:15:40.884977Z",
        "url": "https://files.pythonhosted.org/packages/d2/16/0df005fe4343aa08f6bd1034ec56d2251cc79a530f61f0078c22a5c87636/monotrail-0.1.0-cp37-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "543942e6ec358f0be7d8d4c6a1dbb74bebb66f715eb86c022d830327cd39e6bd",
          "md5": "3527c6863b10bc7618a2464c29696ec8",
          "sha256": "1d4034fb906f3f835e9633886016febed45eb8f434364116bf4eecdf8a82d46d"
        },
        "downloads": -1,
        "filename": "monotrail-0.1.0-cp37-abi3-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "3527c6863b10bc7618a2464c29696ec8",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 3521515,
        "upload_time": "2022-09-08T18:15:43",
        "upload_time_iso_8601": "2022-09-08T18:15:43.116355Z",
        "url": "https://files.pythonhosted.org/packages/54/39/42e6ec358f0be7d8d4c6a1dbb74bebb66f715eb86c022d830327cd39e6bd/monotrail-0.1.0-cp37-abi3-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a7eac3402b61bbc161586ec85592e02121bdcdf5a65e96f76338a41b773ef734",
          "md5": "7e463f48c8124f37e9577dc1c0737cd3",
          "sha256": "c19c9d11a951031e734f6558f1f477c42b4d391c509bb9aa350a632393d45ecc"
        },
        "downloads": -1,
        "filename": "monotrail-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e463f48c8124f37e9577dc1c0737cd3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7842081,
        "upload_time": "2022-09-08T18:15:45",
        "upload_time_iso_8601": "2022-09-08T18:15:45.056304Z",
        "url": "https://files.pythonhosted.org/packages/a7/ea/c3402b61bbc161586ec85592e02121bdcdf5a65e96f76338a41b773ef734/monotrail-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "f822d8bb63f83afe7dfc5d0e73b004d129015acebfa234a61eafcf5f777b7a01",
        "md5": "6c8e7bb8f523fd8cd9d09c5b8aef3366",
        "sha256": "c462c59bc59b09f95ca4039afdf182a35401c6e572659d73e692119bbb3c08bb"
      },
      "downloads": -1,
      "filename": "monotrail-0.1.0-cp37-abi3-macosx_10_9_x86_64.macosx_11_0_arm64.macosx_10_9_universal2.whl",
      "has_sig": false,
      "md5_digest": "6c8e7bb8f523fd8cd9d09c5b8aef3366",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 7906683,
      "upload_time": "2022-09-08T18:15:38",
      "upload_time_iso_8601": "2022-09-08T18:15:38.507842Z",
      "url": "https://files.pythonhosted.org/packages/f8/22/d8bb63f83afe7dfc5d0e73b004d129015acebfa234a61eafcf5f777b7a01/monotrail-0.1.0-cp37-abi3-macosx_10_9_x86_64.macosx_11_0_arm64.macosx_10_9_universal2.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d2160df005fe4343aa08f6bd1034ec56d2251cc79a530f61f0078c22a5c87636",
        "md5": "665cba38888e6cfbe2b12951ea6c5b0e",
        "sha256": "29e27c8973cac7b81a7fb26c2cb0afa92f510e62385dcd7a7d965676d1d2b158"
      },
      "downloads": -1,
      "filename": "monotrail-0.1.0-cp37-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "665cba38888e6cfbe2b12951ea6c5b0e",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 4722984,
      "upload_time": "2022-09-08T18:15:40",
      "upload_time_iso_8601": "2022-09-08T18:15:40.884977Z",
      "url": "https://files.pythonhosted.org/packages/d2/16/0df005fe4343aa08f6bd1034ec56d2251cc79a530f61f0078c22a5c87636/monotrail-0.1.0-cp37-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "543942e6ec358f0be7d8d4c6a1dbb74bebb66f715eb86c022d830327cd39e6bd",
        "md5": "3527c6863b10bc7618a2464c29696ec8",
        "sha256": "1d4034fb906f3f835e9633886016febed45eb8f434364116bf4eecdf8a82d46d"
      },
      "downloads": -1,
      "filename": "monotrail-0.1.0-cp37-abi3-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "3527c6863b10bc7618a2464c29696ec8",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 3521515,
      "upload_time": "2022-09-08T18:15:43",
      "upload_time_iso_8601": "2022-09-08T18:15:43.116355Z",
      "url": "https://files.pythonhosted.org/packages/54/39/42e6ec358f0be7d8d4c6a1dbb74bebb66f715eb86c022d830327cd39e6bd/monotrail-0.1.0-cp37-abi3-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "a7eac3402b61bbc161586ec85592e02121bdcdf5a65e96f76338a41b773ef734",
        "md5": "7e463f48c8124f37e9577dc1c0737cd3",
        "sha256": "c19c9d11a951031e734f6558f1f477c42b4d391c509bb9aa350a632393d45ecc"
      },
      "downloads": -1,
      "filename": "monotrail-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7e463f48c8124f37e9577dc1c0737cd3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7842081,
      "upload_time": "2022-09-08T18:15:45",
      "upload_time_iso_8601": "2022-09-08T18:15:45.056304Z",
      "url": "https://files.pythonhosted.org/packages/a7/ea/c3402b61bbc161586ec85592e02121bdcdf5a65e96f76338a41b773ef734/monotrail-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}