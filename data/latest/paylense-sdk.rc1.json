{
  "info": {
    "author": "Winopay",
    "author_email": "acellam.guy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": "# Paylense API Python SDK</h1>\n\n<strong>Payment gateway for african businesses</strong>\n\n<div>\n  Join our active, engaged community: <br>\n  <a href=\"https://spectrum.chat/paylense-api-sdk/\">Spectrum</a>\n  <br><br>\n</div>\n\n\n[![Build Status](https://travis-ci.com/winopay/paylense-python-sdk.svg?branch=master)](https://travis-ci.com/winopay/paylense-python-sdk)\n[![Latest Version](https://img.shields.io/pypi/v/tox-travis.svg)](https://badge.fury.io/js/paylense-python-sdk)\n[![Coverage Status](https://coveralls.io/repos/github/winopay/paylense-python-sdk/badge.svg?branch=master)](https://coveralls.io/github/winopay/paylense-python-sdk?branch=master)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/paylense-api-developers/)\n\n\n# Usage\n\n## Installation\n\nAdd the latest version of the library to your project using pip:\n\n```bash\n $ pip install paylense-sdk\n```\n\nThis library supports Python 3.4+ (PyPy supported)\n\n# Account details\n\n## Getting environment API user\n\nNext, we need to get the `APP-ID`, `username` and `password` for use in the product. You can get these details from `https://dashboard.paylense.com/register`.\n\nThe redentials in the sandbox environment can be used straight away. In production, the credentials are provided for you after KYC requirements are met.\n\n## Configuration\n\nBefore we can fully utilize the library, we need to specify global configurations. The global configuration must contain the following:\n\n* `PAYLENSE_ENVIRONMENT`: Optional enviroment, either \"sandbox\" or \"production\". Default is 'sandbox'\n* `PAYLENSE_APP_ID`: The unique application identity for your app\n* `PAYLENSE_USERNAME`: Username used for authentication\n* `PAYLENSE_PASSWORD`: Password used for authentication\n\nThe full list of configuration options can be seen in the example below:\n\n ```python\n config = {\n    \"PAYLENSE_ENVIRONMENT\": os.environ.get(\"PAYLENSE_ENVIRONMENT\"),\n    \"PAYLENSE_APP_ID\": os.environ.get(\"PAYLENSE_APP_ID\"),\n    \"PAYLENSE_USERNAME\": os.environ.get(\"PAYLENSE_USERNAME\"),\n    \"PAYLENSE_PASSWORD\": os.environ.get(\"PAYLENSE_PASSWORD\"),\n}\n```\n\n## Collections\nUsed for receiving money\n\nYou can create a collections client with the following:\n\n```python\nimport os\nfrom paylense.collections import Collections\n\nclient = Collections()\n```\n\n### Methods\n\n1. `requestToPay`: This operation is used to request a payment from a consumer (Payer). The payer will be asked to authorize the payment. The transaction is executed once the payer has authorized the payment. The transaction will be in status PENDING until it is authorized or declined by the payer or it is timed out by the system. Status of the transaction can be validated by using `getTransactionStatus`.\n\n2. `getTransaction`: Retrieve transaction information using the `transactionId` returned by `requestToPay`. You can invoke it at intervals until the transaction fails or succeeds. If the transaction has failed, it will throw an appropriate error.\n\n### Sample Code\n\n```python\nimport os\nfrom paylense.collections import Collections\n\nclient = Collections()\n\nclient.requestToPay(\n    mobile=\"256772123456\", amount=\"600\", processing_number=\"123456789\", narration=\"dd\")\n```\n\n## Disbursements\n\nUsed for sending money to users\n\nYou can create a disbursements client with the following\n\n```python\nimport os\nfrom paylense.disbursements import Disbursements\n\nclient = Disbursements()\n```\n\n### Methods\n\n1. `transfer`: Used to transfer an amount from the ownerâ€™s account to a payee account. Status of the transaction can be validated by using the `getTransactionStatus` method.\n\n2. `getTransactionStatus`: Retrieve transaction information using the `transactionId` returned by `transfer`. You can invoke it at intervals until the transaction fails or succeeds.\n\n#### Sample Code\n\n```python\nimport os\nfrom paylense.disbursements import Disbursements\n\nclient = Disbursements()\n\nclient.transfer(amount=\"600\", mobile=\"256772123456\", processing_number=\"123456789\", narration=\"dd\")\n\n```\n\n### Developer\nWe use `tox` to automate our tests. You can run the test using\n\n```python\ntox\n```\nThank you.\n\n\nChangelog\n=========\n\n0.1.0 (2020-05-01)\n------------------\n\n* First release on PyPI.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/winopay/paylense-python-sdk",
    "keywords": "Paylense API,Paylense API Python Wrapper,Paylense API Python,Paylense API",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "paylense-sdk",
    "package_url": "https://pypi.org/project/paylense-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/paylense-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/winopay/paylense-python-sdk"
    },
    "release_url": "https://pypi.org/project/paylense-sdk/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python wrapper for the Winopay Paylense API.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10448174,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90acd65971b164c6746523a3be211a70f8a4df49eb8fe52d05b9d2300c9adc3d",
          "md5": "6b974d9f779a1d1374c614fe174f55ed",
          "sha256": "f0cb1017fa42f2f8485d42dd320028ca10a58176c1dd5d3e27f513bdb192a647"
        },
        "downloads": -1,
        "filename": "paylense-sdk-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b974d9f779a1d1374c614fe174f55ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18127,
        "upload_time": "2021-05-23T18:11:09",
        "upload_time_iso_8601": "2021-05-23T18:11:09.651999Z",
        "url": "https://files.pythonhosted.org/packages/90/ac/d65971b164c6746523a3be211a70f8a4df49eb8fe52d05b9d2300c9adc3d/paylense-sdk-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90acd65971b164c6746523a3be211a70f8a4df49eb8fe52d05b9d2300c9adc3d",
        "md5": "6b974d9f779a1d1374c614fe174f55ed",
        "sha256": "f0cb1017fa42f2f8485d42dd320028ca10a58176c1dd5d3e27f513bdb192a647"
      },
      "downloads": -1,
      "filename": "paylense-sdk-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6b974d9f779a1d1374c614fe174f55ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18127,
      "upload_time": "2021-05-23T18:11:09",
      "upload_time_iso_8601": "2021-05-23T18:11:09.651999Z",
      "url": "https://files.pythonhosted.org/packages/90/ac/d65971b164c6746523a3be211a70f8a4df49eb8fe52d05b9d2300c9adc3d/paylense-sdk-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}