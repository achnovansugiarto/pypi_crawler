{
  "info": {
    "author": "",
    "author_email": "Nico Schl√∂mer <nico.schloemer@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/dmsh\"><img alt=\"dmsh\" src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/logo/logo-with-text.svg\" width=\"50%\"></a>\n  <p align=\"center\">The worst mesh generator you'll ever use.</p>\n</p>\n\n[![PyPi Version](https://img.shields.io/pypi/v/dmsh.svg?style=flat-square)](https://pypi.org/project/dmsh/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/dmsh.svg?style=flat-square)](https://pypi.org/project/dmsh/)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/dmsh.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/dmsh)\n[![PyPi downloads](https://img.shields.io/pypi/dm/dmsh.svg?style=flat-square)](https://pypistats.org/packages/dmsh)\n\n[![Discord](https://img.shields.io/static/v1?logo=discord&label=chat&message=on%20discord&color=7289da&style=flat-square)](https://discord.gg/PBCCvwHqpv)\n\nInspired by [distmesh](http://persson.berkeley.edu/distmesh/), dmsh can be slow,\nrequires a lot of memory, and isn't terribly robust either.\n\nOn the plus side,\n\n- it's got a user-friendly interface,\n- is pure Python (and hence easily installable on any system), and\n- it produces pretty high-quality meshes.\n\nCombined with [optimesh](https://github.com/nschloe/optimesh), dmsh produces the\nhighest-quality 2D meshes in the west.\n\n### Examples\n\n#### Primitives\n\n| <img alt=\"circle\" src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/circle.svg\" width=\"100%\"> | <img alt=\"circle\" src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/rectangle.svg\" width=\"100%\"> | <img alt=\"circle\" src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/polygon.svg\" width=\"100%\"> |\n| :--------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------: |\n\n```python\nimport dmsh\nimport meshio\nimport optimesh\n\ngeo = dmsh.Circle([0.0, 0.0], 1.0)\nX, cells = dmsh.generate(geo, 0.1)\n\n# optionally optimize the mesh\nX, cells = optimesh.optimize_points_cells(X, cells, \"CVT (full)\", 1.0e-10, 100)\n\n# visualize the mesh\ndmsh.show(X, cells, geo)\n\n# and write it to a file\nmeshio.Mesh(X, {\"triangle\": cells}).write(\"circle.vtk\")\n```\n\n```python\nimport dmsh\n\ngeo = dmsh.Rectangle(-1.0, +2.0, -1.0, +1.0)\nX, cells = dmsh.generate(geo, 0.1)\n```\n\n```python\nimport dmsh\n\ngeo = dmsh.Polygon(\n    [\n        [0.0, 0.0],\n        [1.1, 0.0],\n        [1.2, 0.5],\n        [0.7, 0.6],\n        [2.0, 1.0],\n        [1.0, 2.0],\n        [0.5, 1.5],\n    ]\n)\nX, cells = dmsh.generate(geo, 0.1)\n```\n\n#### Combinations\n\n##### Difference\n\n| <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/moon.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/pacman.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/rectangle-hole-refinement.svg\" width=\"100%\"> |\n| :-----------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------: |\n\n```python\nimport dmsh\n\ngeo = dmsh.Circle([-0.5, 0.0], 1.0) - dmsh.Circle([+0.5, 0.0], 1.0)\nX, cells = dmsh.generate(geo, 0.1)\n```\n\n```python\nimport dmsh\n\ngeo = dmsh.Circle([0.0, 0.0], 1.0) - dmsh.Polygon([[0.0, 0.0], [1.5, 0.4], [1.5, -0.4]])\nX, cells = dmsh.generate(geo, 0.1, tol=1.0e-10)\n```\n\nThe following example uses a nonconstant edge length; it depends on the distance to the\ncircle `c`.\n\n```python\nimport dmsh\nimport numpy as np\n\nr = dmsh.Rectangle(-1.0, +1.0, -1.0, +1.0)\nc = dmsh.Circle([0.0, 0.0], 0.3)\ngeo = r - c\n\nX, cells = dmsh.generate(geo, lambda pts: np.abs(c.dist(pts)) / 5 + 0.05, tol=1.0e-10)\n```\n\n##### Union\n\n| <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/union-circles.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/union-rectangles.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/union-three-circles.svg\" width=\"100%\"> |\n| :--------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------: |\n\n```python\nimport dmsh\n\ngeo = dmsh.Circle([-0.5, 0.0], 1.0) + dmsh.Circle([+0.5, 0.0], 1.0)\nX, cells = dmsh.generate(geo, 0.15)\n```\n\n```python\nimport dmsh\n\ngeo = dmsh.Rectangle(-1.0, +0.5, -1.0, +0.5) + dmsh.Rectangle(-0.5, +1.0, -0.5, +1.0)\nX, cells = dmsh.generate(geo, 0.15)\n```\n\n```python\nimport dmsh\nimport numpy as np\n\nangles = np.pi * np.array([3.0 / 6.0, 7.0 / 6.0, 11.0 / 6.0])\ngeo = dmsh.Union(\n    [\n        dmsh.Circle([np.cos(angles[0]), np.sin(angles[0])], 1.0),\n        dmsh.Circle([np.cos(angles[1]), np.sin(angles[1])], 1.0),\n        dmsh.Circle([np.cos(angles[2]), np.sin(angles[2])], 1.0),\n    ]\n)\nX, cells = dmsh.generate(geo, 0.15)\n```\n\n#### Intersection\n\n| <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/intersection-circles.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/intersection-three-circles.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/intersection-circle-halfspace.svg\" width=\"100%\"> |\n| :---------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------: |\n\n```python\nimport dmsh\n\ngeo = dmsh.Circle([0.0, -0.5], 1.0) & dmsh.Circle([0.0, +0.5], 1.0)\nX, cells = dmsh.generate(geo, 0.1, tol=1.0e-10)\n```\n\n```python\nimport dmsh\nimport numpy as np\n\nangles = np.pi * np.array([3.0 / 6.0, 7.0 / 6.0, 11.0 / 6.0])\ngeo = dmsh.Intersection(\n    [\n        dmsh.Circle([np.cos(angles[0]), np.sin(angles[0])], 1.5),\n        dmsh.Circle([np.cos(angles[1]), np.sin(angles[1])], 1.5),\n        dmsh.Circle([np.cos(angles[2]), np.sin(angles[2])], 1.5),\n    ]\n)\nX, cells = dmsh.generate(geo, 0.1, tol=1.0e-10)\n```\n\nThe following uses the `HalfSpace` primtive for cutting off a circle.\n\n```python\nimport dmsh\n\ngeo = dmsh.HalfSpace([1.0, 1.0]) & dmsh.Circle([0.0, 0.0], 1.0)\nX, cells = dmsh.generate(geo, 0.1)\n```\n\n### Rotation, translation, scaling\n\n| <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/rotation.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/scaling.svg\" width=\"100%\"> |\n| :---------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------: |\n\n```python\nimport dmsh\nimport numpy as np\n\ngeo = dmsh.Rotation(dmsh.Rectangle(-1.0, +2.0, -1.0, +1.0), 0.1 * np.pi)\nX, cells = dmsh.generate(geo, 0.1, tol=1.0e-10)\n```\n\n```python\nimport dmsh\n\ngeo = dmsh.Rectangle(-1.0, +2.0, -1.0, +1.0) + [1.0, 1.0]\nX, cells = dmsh.generate(geo, 0.1)\n```\n\n```python\nimport dmsh\n\ngeo = dmsh.Rectangle(-1.0, +2.0, -1.0, +1.0) * 2.0\nX, cells = dmsh.generate(geo, 0.1, tol=1.0e-5)\n```\n\n### Local refinement\n\n<img alt=\"local-refinement\" src=\"https://raw.githubusercontent.com/meshpro/dmsh/main/plots/local-refinement.svg\" width=\"30%\">\n\nAll objects can be used to refine the mesh according to the distance to the object;\ne.g. a `Path`:\n\n```python\nimport dmsh\n\ngeo = dmsh.Rectangle(0.0, 1.0, 0.0, 1.0)\n\np1 = dmsh.Path([[0.4, 0.6], [0.6, 0.4]])\n\n\ndef target_edge_length(x):\n    return 0.03 + 0.1 * p1.dist(x)\n\n\nX, cells = dmsh.generate(geo, target_edge_length, tol=1.0e-10)\n```\n\n### Custom shapes\n\nIt is also possible to define your own geometry. Simply create a class derived from\n`dmsh.Geometry` that contains a `dist` method and a method to project points onto the\nboundary.\n\n```python\nimport dmsh\nimport numpy as np\n\n\nclass MyDisk(dmsh.Geometry):\n    def __init__(self):\n        self.r = 1.0\n        self.x0 = [0.0, 0.0]\n        bounding_box = [-1.0, 1.0, -1.0, 1.0]\n        feature_points = np.array([[], []]).T\n        super().__init__(bounding_box, feature_points)\n\n    def dist(self, x):\n        assert x.shape[0] == 2\n        y = (x.T - self.x0).T\n        return np.sqrt(np.einsum(\"i...,i...->...\", y, y)) - self.r\n\n    def boundary_step(self, x):\n        # project onto the circle\n        y = (x.T - self.x0).T\n        r = np.sqrt(np.einsum(\"ij,ij->j\", y, y))\n        return ((y / r * self.r).T + self.x0).T\n\n\ngeo = MyDisk()\nX, cells = dmsh.generate(geo, 0.1)\n```\n\n### Debugging\n\n| ![level-set-poly](https://raw.githubusercontent.com/meshpro/dmsh/main/plots/levelset-polygon.png) | ![level-set-rect-hole](https://raw.githubusercontent.com/meshpro/dmsh/main/plots/levelset-rect-hole.png) |\n| :-----------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------: |\n\ndmsh is rather fragile, but sometimes the break-downs are due to an incorrectly defined\ngeometry. Use\n\n```\ngeo.show()\n```\n\nto inspect the level set function of your domain. (It must be negative inside the\ndomain and positive outside. The 0-level set forms the domain boundary.)\n\n### Installation\n\ndmsh is [available from the Python Package\nIndex](https://pypi.org/project/dmsh/), so simply type\n\n```\npip install dmsh\n```\n\nto install.\n\n### Testing\n\nTo run the dmsh unit tests, check out this repository and type\n\n```\ntox\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dmsh",
    "package_url": "https://pypi.org/project/dmsh/",
    "platform": null,
    "project_url": "https://pypi.org/project/dmsh/",
    "project_urls": {
      "Home": "https://github.com/meshpro/dmsh",
      "Issues": "https://github.com/meshpro/dmsh/issues"
    },
    "release_url": "https://pypi.org/project/dmsh/0.3.1/",
    "requires_dist": [
      "x21 (>=0.4.10,<0.5.0)",
      "meshplex (<0.20.0,>=0.16.0)",
      "npx",
      "numpy",
      "python-license-manager",
      "scipy",
      "matplotlib ; extra == 'all'"
    ],
    "requires_python": ">=3.7",
    "summary": "High-quality 2D mesh generator based on distmesh",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17269999,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "233dbd237eed0d50fe658241a6689da96b20fde2f5c98d639a261e1ee82fb2f8",
          "md5": "a092bfaac29a80e46e4bc4810bb1c804",
          "sha256": "8b1c015b7653cb6bfa1ba8e0896852caac3a95d69b9ab09167408f483fefe388"
        },
        "downloads": -1,
        "filename": "dmsh-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a092bfaac29a80e46e4bc4810bb1c804",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 42157,
        "upload_time": "2023-03-13T11:09:15",
        "upload_time_iso_8601": "2023-03-13T11:09:15.422244Z",
        "url": "https://files.pythonhosted.org/packages/23/3d/bd237eed0d50fe658241a6689da96b20fde2f5c98d639a261e1ee82fb2f8/dmsh-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "233dbd237eed0d50fe658241a6689da96b20fde2f5c98d639a261e1ee82fb2f8",
        "md5": "a092bfaac29a80e46e4bc4810bb1c804",
        "sha256": "8b1c015b7653cb6bfa1ba8e0896852caac3a95d69b9ab09167408f483fefe388"
      },
      "downloads": -1,
      "filename": "dmsh-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a092bfaac29a80e46e4bc4810bb1c804",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 42157,
      "upload_time": "2023-03-13T11:09:15",
      "upload_time_iso_8601": "2023-03-13T11:09:15.422244Z",
      "url": "https://files.pythonhosted.org/packages/23/3d/bd237eed0d50fe658241a6689da96b20fde2f5c98d639a261e1ee82fb2f8/dmsh-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}