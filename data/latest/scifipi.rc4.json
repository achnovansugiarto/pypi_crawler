{
  "info": {
    "author": "HSU Institute of Automation",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "[![Python package](https://github.com/GianMewes/KEEN/actions/workflows/testPython.yaml/badge.svg)](https://github.com/GianMewes/KEEN/actions/workflows/testPython.yaml)\n[![PyPI version](https://badge.fury.io/py/SciFiPi.svg)](https://badge.fury.io/py/SciFiPi)\n\n<p align=\"center\">\n    <img width=\"250px\" src=\"https://github.com/GianMewes/KEEN/blob/documentation/images/images/SciFiPi-Logo_right.png\">\n    <img width=\"250px\" src=\"https://github.com/GianMewes/KEEN/blob/documentation/images/images/SciFiPi-Logo_left.png\"> \n</p>\n\n<h1 align=\"center\">Sci-Fi-Pi<h2>\n<h2 align=\"center\">The Scientific Filtering Pipeline to Clean your Machine Learning Datasets<h2>\n\n<hr>\n\n\n## Usage\nSciFiPi can be used either as a standalone tool with a command line interface (CLI) or as a library which you can include into your own code. These two options are described below\n\n### CLI\nIn order to use SciFiPi as a CLI tool, first clone this repository or download the code. After obtaining the code, open a shell inside the src folder and execute ```python SciFiPi.py --filters \"filter1 | filter2(\"arg1\", \"arg2\")  | filterN\" ``` with filter1 - filterN being the prefilters and filters you want to apply. Note that they don't have to be in any particular order. You can even mix prefilters and filters, SciFiPi will take care of order. Filters are separated by pipe characters. If any arguments are passed to the lag or noise filter, they are passed in parentheses, e.g. lag([[1, 2],[4, 5]]) to remove lag in columns 1/2 and 3/4 or noise([2]) to filter noise from the second column.\nNote that you have to put your dirty data (one or multiple csv files) into the ```dirty_data``` directory.\n\n### Library\nIn order to use SciFiPi in your own projects, simply install via ```pip install SciFiPi```. You can then create a prefilter object by passing one or more paths to csv files.\nAfter creating a prefilter, apply as many prefilters as you like.\n```python\nfrom SciFiPi.PreFilterBuilder import PreFilterBuilder\nfrom SciFiPi.FilterBuilder import FilterBuilder\n\npreFilterBuilder = PreFilterBuilder(\"path1.csv\", \"path2.csv\")\npreFilteredDataFrame = preFilterBuilder.filterDuplicates().filterImputation().getDataFrame()\n```\n\nAfter prefiltering, it's time to apply the real filters. Instantiate a filterBuilder with the ```preFilteredDataFrame``` and apply the filters you would like to apply. Finish with a call of ```getDataFrame()``` to obtain the cleaned dataFrame.\n\n```\nfilterBuilder = FilterBuilder(preFilteredDataFrame)\ncleanDataFrame = filterBuilder.filterNoise([[2,5], [1, 2]]).filterDecimalShift().getDataFrame()\n``` \n\n## Architecture\n### Idea\nThe idea of SciFiPi is to provide a flexible data cleaning & filtering pipeline that covers a variety of use cases. You can apply a variety of filters in any arbitrary order and if that's not enough, SciFiPi provides an extension mechanism that allows to extend the library with custom filter functions.\n\nThe main principle of our architecture is a design pattern which is widely used in Object Oriented Programming, a [fluent interface](https://en.wikipedia.org/wiki/Fluent_interface). This interface allows arbitrary chaining of filters without users having to worry about the order of method calls. All filtering functions described below are provided by so-called *FilterBuilders* which implement the fluent interface pattern.\n\nThe existing filters of SciFiPi can be separated into three categories:\n<img width=\"100%\" src=\"https://github.com/GianMewes/KEEN/blob/documentation/images/images/SciFiPi_Architecture.png\">\n\n- **Cleaners & Preparators:** We refer to the first category of filters as *Cleaners* or *Preparators* because they take care of the initial preparation (i.e. loading and cleaning) of the dataset. This category contains functions to read single files or multiple files from a folder. Furthermore, this functions of this first category take care of correct indexing (i.e. by timestamp) and make sure that a datasets contents are all typed \"numeric\". If a dataset entry cannot be cast to numeric, it will be marked as \"NaN\" here. In this step, no advanced filling techniques are applied.\n- **PreFilters:** The second category, so-called *PreFilters* contain functions for simple filtering operations. Filters in this category take care of duplicated columns, make sure a dataset is equidistant and fill \"NaN\"s from the previous step.\n- **Filters:** The third category contains some more advanced filtering functions such as filters for noise, lag as well as value shifts caused by unit shifts.\n\n### List of Cleaners & Preparators\nThese filters are run by default:\n- ```formatData()``` (\"Cleaner\" - run by default): This isn't actually a filter as the others. FormatData is called in the constructor of the PreFilterBuilder to format the read data into a standardized format for the following actual filters. Therefor multiple files are merged, all files are transformed to matrix format, non-data-rows as die signal names and units are dropped and later set als column names. Furthermore the timestamp is set as index and all cells are transferred to numeric.\n\n### List of PreFilters\n\n- ```filterDuplicates()``` (CLI: \"duplicates\"): The DuplicatesFilter checks every possible column pair for exact matches (easy method). Alternativley a more advanced method can be used, where the similarity of the column pairs is calculated using the cosine similarity and euclidean distance from the sklearn and scipy libraries. The combination check of both similarity measures results in exact, linear transformed and partial duplicates.\n- ```filterEquidistance()``` (CLI: \"equidistance\"): The EquidistanceFilter finds the most frequent distance value in the index column by using the mode. Afterwards the index is recreated by using the resample() method from the pandas library and setting the offset to the most frequent distance value.\n- ```filterImputation()``` (CLI: \"imputation\"): Adds missing values. On small dataframes (less than three columns) missing values are replaced via backfilling. on larger dataframes, missing values are added via a decision tree with backfilling as a fallback strategy.\n- ```filterFillTimestamps()``` (CLI: \"fillTimestamps\"): The fillTimestamps-Filter is scanning the dataFrames index for NaTs. If NaTs are found, a synthetic timestamp is created by the start time and the difference between the timestamps. The index is then filled by this synthetic timestamp.\n- ```filterFixTimezone()``` (CLI: \"fixtimezone\"): The FixTimezoneFilter is searching for timezone information in the dataframes index. If a timezone information is found it is transferred into datetime-format. If no timezone information is given, the local timezone is set. By adding timezone information into the index of dataframes, the signals of individual dataframes are mapped by the time recorded.\n\n### List of Filters\nYou can use any number of the following filters in any order:\n- ```filterDecimalShift()``` (CLI: \"decimalshift\"): Checks for sudden jumps in the data caused by decimal place errors. Identified errors are then multiplied/devided by 10.\n- ```filterNoise([col1, col2])``` (CLI: \"noise([col1, col2])\"): The NoiseFilter uses a k-Nearest-Neighbours regressor (from the sklearn library) to self-predict the column and remove noise. The parameters (here \"col1, col2\") define the columns to remove noise from.\n- ```filterLag([[col1, col2], [col3, col4]])``` (CLI: \"lag([[col1, col2], [col3, col4]])\"): The LagFilter uses Dynamic Time Warping (DTW - from the dtwalign library) to dynamically align two lagged columns and recreate them in their respective dataframe columns. The parameters define the column pairs that are considere for lag-fixing.\n\n## Extend SciFiPi\nWe just started SciFiPi as a submission to the [KEEN Hackathon](https://www.achema.de/en/the-achema/innovation-challenge/keen-challenge) and implemented a basic set of filters. We know that this is just a first step and might not be sufficient for some of you out there. In this case, you can simply extend SciFiPi by writing your own *PreFilters* or *Filters*.\nIn order to do so, you have to follow these two steps:\n1. Write your custom filter class. You should stick to the naming convention: The name of your class should be (FilterFunction) + Filter.\n2. Register it inside the *PreFilterBuilder* (for custom PreFilters) or inside the *FilterBuilder* (for custom Filters). \n\nThe following snippet shows step 1, writing your custom filter:\n```python\nfrom filters.Filter import Filter\n\n# Create your own filter class and extend the base filter\nclass CustomFilter(Filter):\n\n\t# Override the \"applyFilter\" function\n    def applyFilter(self, dataFrame:pd.DataFrame):\n        \n\t\t# Do with the dataFrame whatever you want, but make sure to return the changed dataFrame it in the end\n\n        return dataFrame\n```\n\nAs you can see, it's pretty straightforward. Extend the base ```Filter``` class and override the applyFilter method. \n<br>\nThe second step, registering your filter is shown in the next code snippet:\n```python\nclass FilterBuilder:\n\n# Existing filters ... \n\n\tdef filterCustom(self):\n\t\t\tfilter = CustomFilter()\n\t\t\tself.dataFrame = filter.applyFilter(self.dataFrame)\n\t\t\treturn self\n```\n\nThis is also rather straightforward. Define a function for your filter. In order for our CLI to work, it has to follow the naming scheme \"filter\" + (FilterFunction). Inside of the new functions, create an instance of your filter and invoke the ```applyFilter() ``` function before returning self. This last line us required to not break the fluent interface.\n\n\n## Current Limitations\nDue to limited time, some limitations still exist. \n1. The equidistance filter has a large runtime due to high computational complexity.\n2. The DecimalShiftFilter is occasionally to sensitive to changes. Sometimes decimal shifts are detected where there are none. If sensitivity is artificially lowered, some true decimal shifts are not detected any more.\n3. LagFilter requires specifications on which columns are possible linked by a time lag.\n4. NoiseFilter needs instruction on which columns should be freed from noise. This is due to individual characteristics of columns - what constitutes noise in one sensor, might be valid data for other sensors.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/GianMewes/KEEN/archive/refs/tags/v0.0.4.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GianMewes/KEEN",
    "keywords": "Data Preprocessing,Data Filtering,Machine Learning,AI,Data Science,python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SciFiPi",
    "package_url": "https://pypi.org/project/SciFiPi/",
    "platform": "",
    "project_url": "https://pypi.org/project/SciFiPi/",
    "project_urls": {
      "Download": "https://github.com/GianMewes/KEEN/archive/refs/tags/v0.0.4.tar.gz",
      "Homepage": "https://github.com/GianMewes/KEEN"
    },
    "release_url": "https://pypi.org/project/SciFiPi/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SciFiPi - The scientific filtering pipeline to clean your machine learning datasets",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10343557,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4410ddabf308db4ceaaa7c7c0bb0937fd2c93a9b52b34de9407ef506ebbde70f",
          "md5": "beee6f36deb42972d8d22571b8ef7e7a",
          "sha256": "e79dc0f928382324d820ccd61b2bbe3039ab7c3177213ecaa5bea81cd6aa491e"
        },
        "downloads": -1,
        "filename": "SciFiPi-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "beee6f36deb42972d8d22571b8ef7e7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13817,
        "upload_time": "2021-05-10T20:14:26",
        "upload_time_iso_8601": "2021-05-10T20:14:26.166781Z",
        "url": "https://files.pythonhosted.org/packages/44/10/ddabf308db4ceaaa7c7c0bb0937fd2c93a9b52b34de9407ef506ebbde70f/SciFiPi-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aeef6fb895b10f070f75aba3cdae51e3f7c8f2c0705bf6c98791ca2b7ec8d42",
          "md5": "ca7ce3586cb83c3691cc3c06266f2fe9",
          "sha256": "78c5ea7cb04003a93b213347ffbb4f17a9cfb4b0a1b10771df9849aba649c279"
        },
        "downloads": -1,
        "filename": "SciFiPi-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ca7ce3586cb83c3691cc3c06266f2fe9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6281,
        "upload_time": "2021-05-11T16:48:55",
        "upload_time_iso_8601": "2021-05-11T16:48:55.414292Z",
        "url": "https://files.pythonhosted.org/packages/5a/ee/f6fb895b10f070f75aba3cdae51e3f7c8f2c0705bf6c98791ca2b7ec8d42/SciFiPi-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcdd891b4825318ca5d25d1151b599c3acd48b103e05372553565cee48a39497",
          "md5": "6fbb69b2d8f29c9e7713ebe220e60f3f",
          "sha256": "6a1023ef363ee724011f138209046ed32ff691f5ee6bb39d08024641534dc57c"
        },
        "downloads": -1,
        "filename": "SciFiPi-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6fbb69b2d8f29c9e7713ebe220e60f3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14805,
        "upload_time": "2021-05-11T17:04:20",
        "upload_time_iso_8601": "2021-05-11T17:04:20.996914Z",
        "url": "https://files.pythonhosted.org/packages/bc/dd/891b4825318ca5d25d1151b599c3acd48b103e05372553565cee48a39497/SciFiPi-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d351e26fe11e53b4f760fcb6b032336f7883e813e899982b38e5bb687caeff44",
          "md5": "6da8bbc3b3ff19db0c273ecb65574154",
          "sha256": "066cb04865f92c4a31b43022c56cf2599deff9d285283348b9ab7857b75f0b62"
        },
        "downloads": -1,
        "filename": "SciFiPi-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6da8bbc3b3ff19db0c273ecb65574154",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16762,
        "upload_time": "2021-05-13T09:55:54",
        "upload_time_iso_8601": "2021-05-13T09:55:54.619120Z",
        "url": "https://files.pythonhosted.org/packages/d3/51/e26fe11e53b4f760fcb6b032336f7883e813e899982b38e5bb687caeff44/SciFiPi-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d351e26fe11e53b4f760fcb6b032336f7883e813e899982b38e5bb687caeff44",
        "md5": "6da8bbc3b3ff19db0c273ecb65574154",
        "sha256": "066cb04865f92c4a31b43022c56cf2599deff9d285283348b9ab7857b75f0b62"
      },
      "downloads": -1,
      "filename": "SciFiPi-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "6da8bbc3b3ff19db0c273ecb65574154",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16762,
      "upload_time": "2021-05-13T09:55:54",
      "upload_time_iso_8601": "2021-05-13T09:55:54.619120Z",
      "url": "https://files.pythonhosted.org/packages/d3/51/e26fe11e53b4f760fcb6b032336f7883e813e899982b38e5bb687caeff44/SciFiPi-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}