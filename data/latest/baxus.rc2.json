{
  "info": {
    "author": "Leonard Papenmeier",
    "author_email": "leonard.papenmeier@cs.lth.se",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Increasing the Scope as You Learn: BAxUS\n\n[![pipeline status](http://gitlab.papenmeier.io/root/baxus-paper-version/badges/main/pipeline.svg)](http://gitlab.papenmeier.io/root/baxus-paper-version/-/commits/main) [![coverage report](http://gitlab.papenmeier.io/root/baxus-paper-version/badges/main/coverage.svg)](http://gitlab.papenmeier.io/root/baxus-paper-version/-/commits/main)\n\nThis is the code for our paper:\n`Increasing the Scope as You Learn: Adaptive Bayesian Optimization in Nested Subspaces` (Leonard Papenmeier, Matthias\nPoloczek, and Luigi Nardi)\n\nPlease see the full [online documentation](https://baxus.papenmeier.io).\n\n## Installation\n\nYou have four options for installing `BAxUS`: `PyPi`, `Docker`, `setup.py`, or `requirements.txt`.\nPlease make sure to install the following packages before running the non-Docker `BAxUS` installation.\nWe assume that you have a Debian Buster or Bullseye based Linux distribution (e.g., Ubuntu 18.04 or Ubuntu 20.04).\nPlease use a Docker image if you are working with a different distribution:\n\n### Installation from PyPi\n\n```bash\npip install baxus\n```\n\n### Installation from source\n\nFirst install required software:\n\n```bash\napt-get update && apt-get -y upgrade && apt-get -y install libsuitesparse-dev libatlas-base-dev swig libopenblas-dev libsdl2-mixer-2.0-0 libsdl2-image-2.0-0 libsdl2-2.0-0 libsdl2-ttf-2.0-0 libsdl2-dev\n```\n\nThen install with the `setup.py`:\n\n```bash\ncd baxus\npip install .\n```\n\nor with the requirements.txt:\n\n```bash\ncd baxus\npip install -r requirements.txt\n```\n\n### Docker image\n\nAlternatively, use the Docker installation.\nWe do not share the Docker image to ensure anonymity.\nHowever, you can build the Docker image yourself with the provided `Dockerfile`:\n\nFirst, [install Docker](https://docs.docker.com/engine/install/).\nNext, build the Docker image\n\n```bash\ncd baxus\nsudo docker build -t baxus\n```\n\nBy default, BAxUS stores all results in a directory called `results`.\nTo get the results on the host machine, first create this directory and mount it into the Docker container:\n\n```bash\nmkdir results\nsudo docker run -v \"$(pwd)/results\":/app/results baxus /bin/bash -c \"python benchmark_runner.py -id 100 -td 1 -f branin2 --adjust-initial-target-dimension\"\n```\n\nAfter the run completed, the results can be obtained in the `./results` directory.\n\n## Getting started\n\nThe main file is `benchmark_runner.py` in the project root.\nIt can be configured with command line arguments (see [Command Line Options](README.html))\n\nFor example, to run `BAxUS` for 1,000 function evaluations on a Branin2 function with input dimensionality 100 for one\nrepetition run (for installation from source)\n\n```python\npython3\nbenchmark_runner.py - id\n100 - td\n1 - n\n10 - r\n1 - m\n1000 - f\nbranin2 - a\nbaxus - -adjust - initial - target - dimension\n```\n\nor, for PyPi installations,\n\n```bash\nbenchmark_runner.py -id 100 -td 1 -n 10 -r 1 -m 1000 -f branin2 -a baxus --adjust-initial-target-dimension\n```\n\nFor Docker, follow the instructions above.\n\nNote that we need to pass an initial target dimensionality with `-td 1` even though this is adjusted later by passing\nthe option `--adjust-initial-target-dimension`-\n\n## Command line options\n\n| **Name**                             | **Shortcut** | **Full argument**                   | **Default**                                                                                                                                                                                                                                                             | **Description**                                                                                                                                                                                                                                                                                                                                                    |\n|--------------------------------------|--------------|-------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Algorithm                            | `-a`         | `--algorithms`                      | `baxus`                                                                                                                                                                                                                                                                 | The algorithm to run. Has tobe from `baxus`, `embedded_turbo_target_dim`, `embedded_turbo_effective_dim`, `embedded_turbo_2_effective_dim`, `random_search`                                                                                                                                                                                                        |\n| Function                             | `-f`         | `--functions`                       | None                                                                                                                                                                                                                                                                    | One ore several test functions. Has to be from `lunarlander`,`mnist`,`robotpushing`,`roverplanning`,`hartmann6`,`branin2`,`rosenbrock5`,`rosenbrock10`,`ackley`,`rosenbrock`,`levy`,`dixonprice`,`griewank`,`michalewicz`,`rastrigin`,`bipedalnncontroller`,`acrobotnncontroller`,`svm`,`lasso10`,`mopta08`,`hartmann6in1000_rotated`,`rosenbrock5in1000_rotated`. |\n| Input dimensionality                 | `-id`        | `--input-dim`                       | `100`                                                                                                                                                                                                                                                                   | Input dimensionality of the function. This is overriden when the function has a fixed dimensionality.                                                                                                                                                                                                                                                              |\n| Target dimensionality                | `-td`        | `--target-dim`                      | `10`                                                                                                                                                                                                                                                                    | (Initial) targetdimensionality of the function. Whether initial or not depends on the algorithm. Initial for `AdaTheSBO-1` and `AdaTheSBO-m` as they adapt the target dimensionality.                                                                                                                                                                              | |\n| Acquisition function                 | None         | `--acquisition-function`            | `ts`                                                                                                                                                                                                                                                                    | Either `ts` (Thompson sampling) or `ei` (Expected improvement)                                                                                                                                                                                                                                                                                                     |\n| Embedding type                       | None         | `--embedding-type`                  | `baxus`                                                                                                                                                                                                                                                                 | Either `baxus` (for the BAxUS embedding) or `hesbo` (for the HeSBO embedding)                                                                                                                                                                                                                                                                                      |\n| Adjust initial target dimensionality | None         | `--adjust-initial-target-dimension` | not set                                                                                                                                                                                                                                                                 | Whether to adjust initial target dimensionality as described in the BAxUS paper.                                                                                                                                                                                                                                                                                   |\n| Number of initial samples            | `-n`         | `--n-init`                          | None (set to target dimensionality + 1 if not set)                                                                                                                                                                                                                      | Number of samples.                                                                                                                                                                                                                                                                                                                                                 |\n| Number of repetitions                | `-r`         | `--num-repetitions`                 | `1`                                                                                                                                                                                                                                                                     | Number repetitions of the run.                                                                                                                                                                                                                                                                                                                                     |\n| Number of evaluations                | `-m`         | `--max-evals`                       | `300`                                                                                                                                                                                                                                                                   | Number evaluations. Cma-ES might use a few more.                                                                                                                                                                                                                                                                                                                   |\n| Initial baselength                   | `-l`         | `--initial-baselength`              | `0.8`                                                                                                                                                                                                                                                                   | The base length of the trust region (default value is as in the TuRBO paper).                                                                                                                                                                                                                                                                                      |\n| Minimum baselength                   | `-lmin`      | `--min-baselength`                  | `0.5^7`                                                                                                                                                                                                                                                                 | The base length a trust region is allowed to obtain (default value is as in the TuRBO paper).                                                                                                                                                                                                                                                                      |\n| Maximum baselength                   | `-l_max`     | `--max-baselength`                  | 1.6                                                                                                                                                                                                                                                                     | The maximum base length a trust region is allowed obtain (default value is as in the TuRBO paper).                                                                                                                                                                                                                                                                 |\n| Noise standard deviation             | None         | `--noise-std`                       | `0`                                                                                                                                                                                                                                                                     | The deviation of the noise. Whether this is used or not depends on the benchmark. It is generally only recognized synthetic benchmarks like `Branin2` but also for the synthetic `Lasso` versions.                                                                                                                                                                 |\n| Results directory                    | None         | `--results-dir`                     | `results`                                                                                                                                                                                                                                                               | The directory which the results are written. Relative to the path from which the run was started.                                                                                                                                                                                                                                                                  |\n| Run description                      | None         | `--run-description`                 | None                                                                                                                                                                                                                                                                    | Short description that will be added to the run directory                                                                                                                                                                                                                                                                                                          |\n| MLE multistart samples               | None         | `--multistart-samples`              | `100`                                                                                                                                                                                                                                                                   | Number of multistart samples for the MLE GD optimization. Samples will be drawn from latin hypercube                                                                                                                                                                                                                                                               |\n| Multistarts after sampling           | None         | `--multistart-after-sample`         | `10`                                                                                                                                                                                                                                                                    | Only recognized for `--mle-optimization sample-and-choose-best`. Number of multi-start gradient descent optimization of the `--multistart-samples` best ones.                                                                                                                                                                                                      |                                                                                                                                                                                                                                                                                                                                                                    |\n| MLE optimization method              | None         | `--mle-optimization`                | `sample-and-choose-best`                                                                                                                                                                                            Either `multistart-gd` or `sample-and-choose-best`. |                                                                                                                                                                                                                                                                                                                                                                    |\n| Number of MLE gradient updates       | None         | `--mle-training-steps`              | `50`                                                                                                                                                                                                                                                                    | Number of GD steps in MLE maximization.                                                                                                                                                                                                                                                                                                                            |                                                                                                                                                                                                                                                                                                                                                                    |\n| Budget until input dimensionality    | None         | `--budget-until-input-dim`          | `0`                                                                                                                                                                                                                                                                     | The budget after which BAxUS will roughly reach the input dimensionality (see paper for details). If `0`: this is ignored                                                                                                                                                                                                                                          |              |                                     |||\n| Verbose mode                         | `-v`         | `--verbose`                         | not set                                                                                                                                                                                                                                                                 | Whether to print verbose messages                                                                                                                                                                                                                                                                                                                                  |\n\n## Optimizing custom functions\n\n### Custom benchmark class\n\nFor practical use cases, you want to optimize your own functions instead of running benchmark functions. Let's see how\nwe implement benchmark functions. As an example,\n[MoptaSoftConstraints](source/baxus.benchmarks.html#baxus.benchmarks.real_world_benchmarks.MoptaSoftConstraints)\nimplements\n[SyntheticBenchmark](source/baxus.benchmarks.html#baxus.benchmarks.benchmark_function.SyntheticBenchmark), which means\nin particular that it has its\nown `__call__` function.\n\nLet's look at the `__call__` function\nof [MoptaSoftConstraints](source/baxus.benchmarks.html#baxus.benchmarks.real_world_benchmarks.MoptaSoftConstraints):\n\n```python\ndef __call__(self, x):\n    super(MoptaSoftConstraints, self).__call__(x)\n    x = np.array(x)\n    if x.ndim == 0:\n        x = np.expand_dims(x, 0)\n    if x.ndim == 1:\n        x = np.expand_dims(x, 0)\n    assert x.ndim == 2\n\n    vals = np.array([self._call(y) for y in x]).squeeze()\n    return vals\n```\n\nwhich consists of some checks that ensure that we use the internal `self._call` function correctly.\n\nIf you want to use BAxUS with a custom function, you can just use this implementation and replace\n`self._call` in the line\n`vals = np.array([self._call(y) for y in x]).squeeze()`\nwith a call to your own function expecting a 1D numpy array.\n\n### Example for a custom benchmark function\n\nA custom benchmark function could look as follows:\n\n```python3\nfrom typing import Union, List\n\nimport numpy as np\nfrom baxus.benchmarks.benchmark_function import Benchmark\n\n\nclass Parabula(Benchmark):\n\n    def __init__(self):\n        super().__init__(dim=100, ub=10 * np.ones(100), lb=-10 * np.ones(100), noise_std=0)\n\n    def __call__(self, x: Union[np.ndarray, List[float], List[List[float]]]):\n        x = np.array(x)\n        if x.ndim == 0:\n            x = np.expand_dims(x, 0)\n        if x.ndim == 1:\n            x = np.expand_dims(x, 0)\n        assert x.ndim == 2\n        y = np.sum(x ** 2, axis=1)\n        return y\n```\n\nTo run `BAxUS` on it, either register it for the benchmark runner (see explanation below),\nor call `BAxUS` directly:\n\n```python3\nfrom baxus.baxus import BAxUS\n\nbaxus = BAxUS(\n    run_dir=\"results\",\n    max_evals=100,\n    n_init=10,\n    f=Parabula(),\n    target_dim=2,\n    verbose=True,\n)\n\nbaxus.optimize()\n\n```\n\nThe results of the optimization can afterwards be obtained by\n\n```python3\nx_raw, y_raw = baxus.optimization_results_raw()  # get the points in the search space and their function values\nx_inc, y_inc = baxus.optimization_results_incumbent()  # get the points in the search space and the best function value at each time step\n```\n\n### How do I register my new function?\n\nFor this we need to look at the [parsing.parse](source/baxus.util.html#baxus.util.parsing.parse) function.\nThe first thing to do is to append your benchmark to the list of existing benchmarks,\ncurrently consisting of\n\n```python\nrequired_named.add_argument(\n    \"-f\",\n    \"--functions\",\n    nargs=\"+\",\n    choices=[\n        \"hartmann6\",\n        \"branin2\",\n        ...,\n        \"MY_NEW_NAME\"  # <---------------- ADD THIS LINE \n    ],\n    required=True,\n)\n```\n\nNext, we have to register the new name in the [parsing.fun_mapper](source/baxus.util.html#baxus.util.parsing.fun_mapper)\nfunction:\n\n```python\ndef fun_mapper():\n    return {\n               **{\n                   \"hartmann6\": Hartmann6,\n                   \"branin2\": Branin2,\n                   \"rosenbrock2\": functools.partial(RosenbrockEffectiveDim, effective_dim=2),\n                   ...,\n               \"MY_NEW_NAME\": MyBenchmarkImplementation  # <--------- ADD THIS LINE\n           },\n    ** _fun_mapper,\n    }\n```\n\nand that's it. \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BAxUS",
    "package_url": "https://pypi.org/project/BAxUS/",
    "platform": null,
    "project_url": "https://pypi.org/project/BAxUS/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/BAxUS/0.0.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15118348,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc53b7b57a807e2821ed9f619bd464b237746001547263c616897eefa2ed9c42",
          "md5": "829d3cd21ba7ef096371a78464121467",
          "sha256": "c6b2cce0bc56377d922a2ed3de09747be0eae5d9b67f04de77015bfdb884e7ac"
        },
        "downloads": -1,
        "filename": "BAxUS-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "829d3cd21ba7ef096371a78464121467",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55341,
        "upload_time": "2022-09-16T12:01:45",
        "upload_time_iso_8601": "2022-09-16T12:01:45.419009Z",
        "url": "https://files.pythonhosted.org/packages/cc/53/b7b57a807e2821ed9f619bd464b237746001547263c616897eefa2ed9c42/BAxUS-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ba725685fb450c3d508d7069d0c2f1132686da025e25474ceac1c7b5cc6a5e6",
          "md5": "c7cc5270b17d36949995f9d7a9b690a7",
          "sha256": "8b0fcfb8d059b201f2a304651f4fae61b2379fb0fa7e1d2df7d7ad954b75eeca"
        },
        "downloads": -1,
        "filename": "BAxUS-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "c7cc5270b17d36949995f9d7a9b690a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55354,
        "upload_time": "2022-09-16T13:52:20",
        "upload_time_iso_8601": "2022-09-16T13:52:20.934970Z",
        "url": "https://files.pythonhosted.org/packages/2b/a7/25685fb450c3d508d7069d0c2f1132686da025e25474ceac1c7b5cc6a5e6/BAxUS-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ba725685fb450c3d508d7069d0c2f1132686da025e25474ceac1c7b5cc6a5e6",
        "md5": "c7cc5270b17d36949995f9d7a9b690a7",
        "sha256": "8b0fcfb8d059b201f2a304651f4fae61b2379fb0fa7e1d2df7d7ad954b75eeca"
      },
      "downloads": -1,
      "filename": "BAxUS-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "c7cc5270b17d36949995f9d7a9b690a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 55354,
      "upload_time": "2022-09-16T13:52:20",
      "upload_time_iso_8601": "2022-09-16T13:52:20.934970Z",
      "url": "https://files.pythonhosted.org/packages/2b/a7/25685fb450c3d508d7069d0c2f1132686da025e25474ceac1c7b5cc6a5e6/BAxUS-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}