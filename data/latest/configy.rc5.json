{
  "info": {
    "author": "Nickolas Grigoriadis",
    "author_email": "nagrigoriadis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "#######\nconfigy\n#######\n\nSimple Configuration manager, plays well with testing.\n\n.. image:: https://travis-ci.com/grigi/configy.svg?branch=master\n    :target: https://travis-ci.com/grigi/configy\n.. image:: https://coveralls.io/repos/grigi/configy/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/grigi/configy?branch=master\n\n\nBasic Usage\n===========\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install configy\n\nSpecify the configuration directives as early in execution as possible:\n\n.. code-block:: python\n\n    import configy\n    \n    try:\n        # Every option is optional, fill in as makes sense.\n        configy.load_config(\n            conf='the_configuration.yaml',  # The default config file if not specified as an ENV var\n            env='CONFIGY_FILE',             # The ENV var to look for a config file\n            defaults='defaults.yaml',       # The defaults that is always loaded.\n            data={'manual': 'defaults'},    # Manually provided defaults loaded\n            case_sensitive=True             # Case Sensitive by default\n        )\n    except configy.ConfigyError as e:\n        # Report config load error to user\n    \nGiven a sample YAML config file of:\n\n.. code-block:: YAML\n\n    Something:\n      value: The Value\n      number: 42\n      bool1: 1\n      bool2: FALSE\n      bool3: y\n\nYou then use it so:\n\n.. code-block:: python\n\n    >>> from configy import config\n    >>> config.Something.value\n    'The Value'\n\nIf you try to access any configuration value that isn't defined you will get an exception:\n\n.. code-block:: python\n\n    >>> config.Something.other\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    KeyError: 'other'\n\nThe config object is just a dictionary, so you can use it as a regular dictionary as well:\n\n.. code-block:: python\n\n    >>> config['Something']['value']\n    'The Value'\n    >>> config.Something.get('other', 'default value')\n    'default value'\n\n\nEnvironment variable substitution\n---------------------------------\n\nYou can request Environment variable substitution by using ``${ENVVAR}`` in the yaml document:\n\n.. code-block:: YAML\n\n    Something:\n      full_value: ${ENV_FULL}\n      part_value: http://${ENV_PART}/something\n\nIf the envvar isn't defined, it wills raise ``ConfigyError``.\n\nHelper functions\n----------------\n\nSince you can't guarantee the type of a value in the configuration files (YAML treats everything as text), you need to do type conversion manually.\n\nFor ints and floats it is easy:\n\n.. code-block:: python\n\n    >>> int(config.Something.number)\n    42\n    >> float(config.Something.number)\n    42.0\n\nFor booleans it is a bit more tricky, as a boolean can be represented by many different notations. You also don't have complete control over the notation used. For this we provide a ``to_bool()`` helper function.\n\nIt treats case-insensitively \n\n``True``\n    'y', 'yes', '1', 't','true'\n``False``\n    'n', 'no', '0', 'f', 'false'\n\nAnything else will resort to the provided default (which defaults to False)\n\n.. code-block:: python\n\n    >>> from configy import config, to_bool\n    >>> to_bool(config.Something.bool1)\n    True\n    >>> to_bool(config.Something.bool2)\n    False\n    >>> to_bool(config.Something.bool1)\n    True\n    >>> to_bool(config.Something.number)\n    False\n    >>> to_bool(config.Something.number, True)\n    True\n    >>> to_bool(config.Something.number, None)\n    None\n\n\nHow to overload settings for testing\n====================================\n\nDuring testing, one often wants to override some configuration to test something specific.\nConfigy supports this use case.\n\n.. code-block:: python\n\n    from configy import config, testconfig\n    \n    @testconfig.override_config({\n        'Something': {\n            'other': 'I now exist',\n        },\n        'Extra': 'defined',\n    })\n    def test_override():\n        # Existing values still work as per usual\n        assert config.Something.value == 'The Value'\n        # New values \n        assert config.Something.other == 'I now exist'\n        assert config.Extra == 'defined'\n\nOne can also define configuration to be used:\n\n.. code-block:: python\n\n    @testconfig.load_config(\n        conf='test_config.yaml'\n    )\n    def test_load_config():\n        assert config.testvalue == 'test result'\n\nYou can also define the WHOLE configuration that is loaded for that test:\n\n.. code-block:: python\n\n    @testconfig.load_config(data={\n        'testvalue': 'test result',\n    })\n    def test_load_config_data():\n        assert config.testvalue == 'test result'\n\nAll the testing decorators will work on method, class and function level.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grigi/configy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "configy",
    "package_url": "https://pypi.org/project/configy/",
    "platform": "",
    "project_url": "https://pypi.org/project/configy/",
    "project_urls": {
      "Homepage": "https://github.com/grigi/configy"
    },
    "release_url": "https://pypi.org/project/configy/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple Configuration manager, plays well with testing",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11497699,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a11aa7097fcda560e96f9d24e2a9dee8b03de279354c7458ed05f84057473ed",
          "md5": "db78ad12f4d061c2331f7bde3b63ec76",
          "sha256": "d2bac6144acc2f6d1975082db2f95bf651182be17b190b926dca2f1931ac9002"
        },
        "downloads": -1,
        "filename": "configy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "db78ad12f4d061c2331f7bde3b63ec76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6517,
        "upload_time": "2015-09-08T07:13:53",
        "upload_time_iso_8601": "2015-09-08T07:13:53.738569Z",
        "url": "https://files.pythonhosted.org/packages/1a/11/aa7097fcda560e96f9d24e2a9dee8b03de279354c7458ed05f84057473ed/configy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9533534abed00cf7a1c995d9fea6efa1f3369974e4d05ef6566210bc510f4af",
          "md5": "ef923b49f05e0a6b348934686fd3b61d",
          "sha256": "48e1bf3c69afb1cbd8d0685c21d9b28651739340b2253f34d3989235c9564bed"
        },
        "downloads": -1,
        "filename": "configy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ef923b49f05e0a6b348934686fd3b61d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6759,
        "upload_time": "2016-03-15T09:26:18",
        "upload_time_iso_8601": "2016-03-15T09:26:18.167962Z",
        "url": "https://files.pythonhosted.org/packages/b9/53/3534abed00cf7a1c995d9fea6efa1f3369974e4d05ef6566210bc510f4af/configy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7587c1bfd92e6fa34d01a242f5a02edc8dbd4d028673ab66d685db55df2ee947",
          "md5": "55cd2efa03afa31118d974af37324542",
          "sha256": "8dd9ed7a5173cc712ba3db35be6b761064af6a6ee83193820908abe03bfbfedb"
        },
        "downloads": -1,
        "filename": "configy-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "55cd2efa03afa31118d974af37324542",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9193,
        "upload_time": "2021-08-09T19:28:07",
        "upload_time_iso_8601": "2021-08-09T19:28:07.598784Z",
        "url": "https://files.pythonhosted.org/packages/75/87/c1bfd92e6fa34d01a242f5a02edc8dbd4d028673ab66d685db55df2ee947/configy-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cf42f2c2bb5af2e590d477632f7a8e1a221036929a2a4074028b919542fee42",
          "md5": "f3dedbca6fe2360474b84252f3c40c16",
          "sha256": "04639ecd79b6353e71501b2859904049d4a93276dea255f664c439b86f3e58c0"
        },
        "downloads": -1,
        "filename": "configy-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f3dedbca6fe2360474b84252f3c40c16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9864,
        "upload_time": "2021-09-20T11:13:21",
        "upload_time_iso_8601": "2021-09-20T11:13:21.385445Z",
        "url": "https://files.pythonhosted.org/packages/9c/f4/2f2c2bb5af2e590d477632f7a8e1a221036929a2a4074028b919542fee42/configy-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb28d3fb58dbac6a3a9312ab2921f75179b66cf5c4667e160ab99d3ee39ebf3b",
          "md5": "4139066304d7ba4503c412eb7dcc51f6",
          "sha256": "7494df9d674b2059c4e008c6ced648e616ff8a4578660f8d9a7d5ddffc63b533"
        },
        "downloads": -1,
        "filename": "configy-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4139066304d7ba4503c412eb7dcc51f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9875,
        "upload_time": "2021-09-20T11:43:35",
        "upload_time_iso_8601": "2021-09-20T11:43:35.119307Z",
        "url": "https://files.pythonhosted.org/packages/bb/28/d3fb58dbac6a3a9312ab2921f75179b66cf5c4667e160ab99d3ee39ebf3b/configy-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb28d3fb58dbac6a3a9312ab2921f75179b66cf5c4667e160ab99d3ee39ebf3b",
        "md5": "4139066304d7ba4503c412eb7dcc51f6",
        "sha256": "7494df9d674b2059c4e008c6ced648e616ff8a4578660f8d9a7d5ddffc63b533"
      },
      "downloads": -1,
      "filename": "configy-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "4139066304d7ba4503c412eb7dcc51f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9875,
      "upload_time": "2021-09-20T11:43:35",
      "upload_time_iso_8601": "2021-09-20T11:43:35.119307Z",
      "url": "https://files.pythonhosted.org/packages/bb/28/d3fb58dbac6a3a9312ab2921f75179b66cf5c4667e160ab99d3ee39ebf3b/configy-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}