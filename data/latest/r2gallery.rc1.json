{
  "info": {
    "author": null,
    "author_email": "ahui <102419@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# R2-Gallery\n\n个人独立相册，其中图片储存采用 Cloudflare R2 实现。\n\n## 关于 Cloudflare R2\n\nCloudflare R2 是一种云储存服务, 本软件用它来储存图片.\n\n- 官方网址 <https://developers.cloudflare.com/r2/platform/pricing/>\n- 方便编程, 注册与设置也简单, 正因为如此, 我才能作出这个软件\n- 储存在 R2 里的文件, 可以公开访问 (因此才能用来做相册)\n- 有一定免费额度, 最重要的的是, 流量免费\n- 内含 10GB 免费容量, 流量免费, 注册时需要信用卡或 PayPal  \n  (注意: 上传下载等的操作次数超过上限也会产生费用,\n   详情以 Cloudflare 官方说明为准).\n\n由于本软件采用了 Cloudflare R2, 因此用户不得不麻烦一点自己去注册账号,\n以及填写配置信息, 下面我会详细说明如何操作 (详见后文 \"准备工作\" 部分).\n\n## 大架构\n\n- 使用本软件可创建一个或多个图库 (Gallery)\n- 每个图库可包含一个或多个相册 (Album)\n- 每个相册可包含一张或多张图片 (Picture)\n- 每个图库/相册/图片都有对应的 toml 文件, 包含了它们的信息 (例如标题/简介)\n- 使用 `r2g render` 命令会根据上述 toml 文件生成网页\n\n### 三种输出\n\n使用 `r2g render` 命令生成网页时, 有 3 种不同的输出:\n\n- **本地预览** (文件夹名: output_local):  \n  浏览该网页不会产生流量, 方便在本地预览效果, 减少云端流量消费.\n- **正常网站** (文件夹名: output_web):  \n  即使在本地浏览该网页也会产生流量,\n  通常将这个文件夹内的网页发布到网上 (例如 GitHub Pages).\n- **Cloudflare R2**:  \n  直接将网页上传到云端, 通过在 R2 设置的网址即可访问相册.\n\n具体而言, 当执行 `r2g render -all` 或 `r2g render NAME` 等命令时,\n都会同时输出 *本地预览* 与 *正常网站*.\n\n为了节省流量以及避免网络通讯耗费时间, 只有执行 `r2g render --to-cloud`\n命令时才会将网页上传到 Cloudflare R2.\n\n建议本地预览确认网页内容符合自己的期望后, 才执行 `r2g render --to-cloud`.\n\n**正常网站** (文件夹 output_web) 相当于一个静态网站,\n你可以采用 GitHub Pages 之类的服务将这个文件夹的内容发布到网上.\n\n\n## Picture\n\n- 文件名只能使用 0-9, a-z, A-Z, _(下划线), -(短横线), .(点)\n- 文件名包括后缀名, 不包括目录\n- 文件名请尽量不要太长\n- toml 里的文件名不可手动更改\n- 自动获取简单描述的第一行作为图片的标题\n- 简单描述采用纯文本格式, 有字数限制, 建议不要写太长\n- 如果有较长的描述, 可以写在 story 里, 采用 Markdown 格式\n- checksum, 用来判断 notes/story 有无变更\n\n## Album\n\n- 使用命令 `r2g album -new NAME` 新建相册\n- 每个相册一个文件夹\n- 上述命令里的 NAME 是相册的文件夹名称  \n  - 只能使用 0-9, a-z, A-Z, _(下划线), -(短横线), .(点)  \n  - 并且应尽量短\n- 在相册文件夹内有一个 album.toml 文件, 以及 thumbs 和 metadata 文件夹\n- 可在 album.toml 文件里填写相册标题, 相册标题可以使用任何字符\n- 相册简介采用纯文本格式, 第一行是相册标题\n- 如果有较长的描述, 可以写在 story 里, 采用 Markdown 格式\n- ctime, 相册创建时间\n- utime, 相册更新时间 (比如添加图片, 就会更新该时间)\n- r2_html, 相册网页的 R2 地址 (自动获取)\n- checksum, 用来判断 notes/story 有无变更\n- sort_by(排序方法): 按创建时间/按更新时间/由列表指定等共 5 种排序方式\n  - 采用 SortBy.List 以外的方式时, Pictures 列表可以为空\n  - 采用 SortBy.List 方式时, 必须填写 Pictures 列表\n  - 采用 SortBy.List 方式时, 只显示列表中的图片, 未列出的就不会显示\n    (但图片本身仍可被公开访问, 只是不出现在相册中)\n  - 采用 SortBy.List 以外的方式时, 使用命令\n    `r2g album --rewrite-sortby-list -name NAME`\n    可以自动填充 Pictures 列表 (目的是方便后续改为 SortBy.List 方式)\n- Pictures (图片文件名列表), 只在采用 SortBy.List 方式时才生效\n- 添加图片时, 则自动添加到 Pictures 列表头部\n- cover, 指定一个图片文件名作为相册封面, 留空则采用第一张\n\n## Gallery\n\n- author, 图库作者 (必填)\n- notes, 图库简介 (纯文本格式, 第一行是图库标题)\n- 如果有较长的描述, 可以写在 story 里, 采用 Markdown 格式\n- checksum, 用来判断 notes/story 有无变更\n- 相册列表排序: 只能手动排序\n- 相册列表\n  - 相册依次排序\n  - 不在列表中的相册不会显示在图库网页中 (但相册本身仍可被公开访问)\n- 首页可选择 3 种展示方式\n  - 相册列表(封面)\n  - 最新单图\n  - 相册介绍(notes+story+相册列表)\n\n## r2_files.json and waiting.json\n\n- 等待上传的文件记录在 waiting.json 中.\n- 只有执行 `r2g upload` 系列命令时才会上传文件到云端.\n- r2_files.json 记录已上传到 R2 的 html/css 等文件的 checksum,\n  以便判断是否需要更新.\n- 不记录图片的 checksum\n\n## 准备工作\n\n为了让你的图片能通过互联网访问, 本软件采用的办法是上传图片到\nCloudflare R2. 因此, 需要先开通 Cloudflare R2.\n\n### 开通 Cloudflare R2\n\n1. 注册账户 <https://www.cloudflare.com/>\n2. 启用 R2 服务 <https://developers.cloudflare.com/r2/get-started/>  \n   内含 10GB 免费容量, 流量免费, 注册时需要信用卡或 PayPal  \n   (注意: 上传下载等的操作次数超过上限也会产生费用,\n    详情以 Cloudflare 官方说明为准).\n3. 从 dashboard 进入 R2 页面，点击 Create bucket 创建一个数据桶。\n   建议 bucket 的名称设为 `my-gallery`\n4. 进入新建的 bucket, 点击 Settings,\n   在 Public Access 栏内点击 Allow Access,\n   该操作成功后可以看到 Public Bucket URL, 请复制保存, 后续有用.\n\n### 生成密钥\n\n(如果已经有密钥, 就不需要再生成了.)\n\n1. 在 R2 页面可以找到 Account ID, 请复制保存, 后续有用.\n2. 在 R2 页面点击 Manage R2 API Tokens\n3. 点击 Create API Token, 权限选择 Edit, 再点击右下角的 Create API\n   Token 按钮, 即可得到 Access Key ID 和 Secret Access Key\n\n**注意**:  \nAccess Key ID 和 Secret Access Key 只显示一次, 请立即复制保存\n(建议保存到密码管理器中)\n\n### 五个重要信息\n\n经过上述操作后, 一共获得了 5 个重要信息, 请妥善保存这些信息:\n\n- bucket 名称 (以下称为 **bucket_name**)\n- Public Bucket URL (以下称为 **bucket_url**)\n- Account ID (以下称为 **accountid**)\n- Access Key ID (以下称为 **access_key_id**)\n- Secret Access Key (以下称为 **access_key_secret**)\n\n## 创建一个新图库\n\n安装了 r2g 命令后, 进入任何一个空文件夹内, 执行命令 `rg2 init`\n初始化一个图库.\n\n初始化成功后，在当前文件夹 (以下称为 \"图库根目录\") 内可以看到：\n\n- **templates** (相册网页模板)\n- **output_local** (本地网站, 图片地址采用相对路径)\n- **output_web** (正常网站, 图片地址是 R2 公开仓库的网址)\n- **gallery.toml** (图库作者, 图库简介等)\n\n### 填写图库信息\n\n如上所述, 创建图库后, 会得到一个 gallery.toml 文件,\n请用文本编辑器打开 gallery.toml, 其内容大概像这样:\n\n```toml\nauthor = '佚名'\nnotes = '''\nMy Gallery\n'''\nendpoint_url = 'https://<accountid>.r2.cloudflarestorage.com'\naws_access_key_id = '<access_key_id>'\naws_secret_access_key = '<access_key_secret>'\nbucket_name = '<bucket_name>'\nbucket_url = '<bucket_url>'\n```\n\n其中 `<accountid>` 等尖括号的位置要填写正确的值, 一共有 5 个尖括号,\n这五个值都可以在上文 `准备工作` 部分找到. (填写时, 不要保留尖括号.)\n\n填写正确的值后保存文件, 配置完成, 可以开始正常使用.\n\n### 注意 bucket_name\n\n每一个图库, 对应一个 bucket_name, 如果在本地新建第二个图库,\n那么在 Cloudflare R2 那边也要建立一个新的 bucket,\n并获得其 Public Bucket URL.\n\n全部图库的 accountid, access_key_id, access_key_secret 都是通用的,\n而 bucket_name 和 bucket_url 是每个图库独立的.\n\n### 填写图库作者与简介等\n\n在上述 gallery.toml 中, 有三个项目涉及图库的作者, 标题, 介绍等信息.\n\n- **author**: 作者名称, 默认佚名, 请改为你的真名或网名\n- **notes** (简介):\n  - 第一行会被自动提取作为图库的标题\n  - 若有更多介绍可从第二行开始写 (参照下面的例子)\n  - 有字数限制, 不可超过 512 个字\n- **story** (故事):\n  - story 与 上面的 notes 一样都是对图库的介绍\n  - 不同的是, notes 是纯文本, story 采用 Markdown 格式,\n    notes 有字数限制, story 无字数限制\n  - 因此, 如果你需要更丰富的格式, 或需要写较多内容, 可以填写 story\n\n示例:\n\n```toml\nauthor = '小帅'\nnotes = '''\n小帅的相册\n\n这里主要是我日常拍的, 旅行拍的照片。\n'''\nstory = '''\n## 关于我\n\n一般 story 的标题建议从 `h2` 开始，因为图库标题（**即 notes 的第一行**）\n已经占用了 h1\n'''\n```\n\n## 创建相册\n\n- 使用命令 `r2g album -new NAME` 新建相册\n  - 或 `r2g --new-album NAME`\n- 其中 NAME 是相册文件夹名称\n  - 只能使用 0-9, a-z, A-Z, _(下划线), -(短横线), .(点)  \n  - 相册文件夹名会成为网址的一部分, 因此建议尽量短一点\n\n### 填写相册信息\n\n使用上述命令创建相册后, 会得到一个新文件夹,\n进入该文件夹内, 可以看到一个 album.toml 文件.\n\n- 请在 album.toml 文件里填写相册简介 (默认为相册文件夹名)\n- 相册简介采用纯文本格式, 第一行是相册标题\n- 如果有较长的描述, 可以写在 story 里, 采用 Markdown 格式\n- story 的标题建议从 `h2` 开始 (即最大的标题从 `##` 开始)\n\n### 相册排序\n\n- 新增的相册会被自动添加到 gallery.toml 文件的 albums 列表中\n- 如果想调整相册顺序, 可直接编辑 gallery.toml 文件中的 albums 列表\n- 你也可以删除列表中的相册文件夹名, 不在列表中的相册不会显示在图库网页中\n  (但相册本身仍可被公开访问)\n\n## 添加图片\n\n- 直接复制/剪切图片, 粘贴到相册文件夹中.\n- 图片文件名只能使用 0-9, a-z, A-Z, _(下划线), -(短横线), .(点)  \n- 图片文件名会成为网址的一部分, 因此建议尽量短一点\n- 图片的中文名/标题, 或描述, 可在添加图片后写在对应的 toml 文件里.\n- 如果在终端使用 cp 或 mv 命令, 要注意防止覆盖同名文件.\n  - 在 Linux 里, 使用 `-i` 开关, 例如 `mv -i src.jpg dest.jpg`\n  - 在 Windows 里, 使用 `-cf` 开关, 例如 `mv -cf src.jpg dest.jpg`\n\n### 填写图片信息\n\n添加一张或多张图片到一个或多个相册文件夹后, 在图库根目录执行命令\n`r2g -update` 给新增的图片生成同名 toml 文件.\n\n> 注意: `r2g -update` 只处理 gallery.toml 中的 albums 列表中的相册.\n\n- 请在 toml 文件里填写图片简介 (默认为图片文件名)\n- 相册简介采用纯文本格式, 第一行是相册标题\n- 如果有较长的描述, 可以写在 story 里, 采用 Markdown 格式\n\n填写信息后, 执行命令 `r2g render NAME` (其中 NAME 是相册文件夹名)\n或 `r2g render -all` 更新网页.\n\n### 三种输出\n\n添加图片并执行 `r2g -update` 后, 会生成网页, 分成 3 个文件夹:\n\n- **output_local**: 这是用来本地预览的, 不消耗网络浏览, 预览相册的效果\n- **output_web**: 这是一个静态网站, 可以上传到 GitHub Pages 之类的地方,\n  即可得到一个能在网络上公开访问的网站, 其中图片储存在 Cloudflare R2\n- **output_r2**: 这是等待上传到 Cloudflare R2 的网页文件,\n  如果你不想使用 GitHub Pages 之类的服务, 可以直接使用 Cloudflare R2\n  作为一个能在网络上公开访问的网站 (具体方法件后文 \"上传文件\" 部分).\n\n### 图片体积上限\n\n注意, 本软件并非图片备份软件!\n\n本软件是资源敏感的, 涉及网络传输, 使用了云服务, 如果超过免费额度,\n就会产生费用.\n\n因此, 建议限制图片的尺寸与体积. 在 gallery.toml 中有三项相关设定:\n\n- **image_width_max**: 图片宽度上限, 默认 1000 像素\n- **image_height_max**: 图片高度上限, 默认 1000 像素\n- **image_size_max**: 图片体积上限, 默认 2 MB\n\n### 缩小图片体积\n\n如果添加的图片超过如上所述的体积上限，会报错，此时你可以：\n\n1. 用文本编辑器打开 gallery.toml 修改上限值。\n2. 自己另行用图片编辑器缩小图片，使其符合上述宽度、高度、体积要求。\n3. 使用命令 `r2g --force-resize` 让本软件执行缩小图片的操作。\n\n注意, 使用命令 `r2g --force-resize` 时, 如果缩小尺寸后的图片文件名与\n原图的文件名相同, 就会覆盖原图, 如果文件名不同, 则原图与小图共存,\n此时, 请检查小图看看有无问题, 如果没问题请手动删除原图.\n\n如上所述, 由于有可能覆盖原图, 因此请先备份原图.\n\n还要注意, 命令 `r2g --force-resize` 不能正常处理 RAW, NEF 等图片格式.\n\n### 缩略图\n\n添加照片, 执行 `r2g -update` 后, 会生成缩略图在 thumbs 文件夹里.\n\n修改 gallery.toml 中的 `thumb_size` 可设定缩略图的边长 (缩略图总是正方形).\n\n### 封面\n\n- 每个相册都必须指定封面。\n- 第一次向相册添加图片时 (复制图片到文件夹内, 然后执行 `r2g -update`)\n  会自动指定封面。\n- 若想手动指定封面, 可修改 album.toml 中的 cover 项目,\n  被指定的封面图片必须存在于该相册内。\n- 另外, 也可以删除 gallery.toml 中的 albums 列表中的相册文件夹名,\n  不在该列表中的相册可以没有封面。\n\n### 图片排列顺序\n\n有 3 种排序方法: 按创建时间 / 按创建时间倒序 / 由列表指定\n\n- 采用 SortBy.List 以外的方式时, album.toml 中的 pictures 列表可以为空\n- 采用 SortBy.List 方式时, 必须填写 album.toml 中的 pictures 列表\n- 采用 SortBy.List 方式时, 只显示列表中的图片, 未列出的就不会显示\n  (但图片本身仍可被公开访问, 只是不出现在相册中)\n\n## 上传文件\n\n为了节省网络流量 (同时也有利于减少网络传输时间), 本软件将生成网页与\n上传文件拆分为两个命令.\n\n建议操作步骤是:\n\n1. 先用 `r2g -update` 生成网页, 进 output_local 文件夹双击 index.html 预览效果.\n2. 执行 `r2g upload -pics` 上传图片\n   - 如果你想利用 Cloudflare R2 作为网站, 此时可以执行 `r2g upload -all` 同时上传图片与网页\n3. 进 output_web 文件夹双击 index.html 预览效果, 该网页中的图片都是 Cloudflare R2 里的图片\n4. 利用 GitHub pages 之类的服务发布 output_web 文件夹的内容\n\n### 访问 Cloudflare R2 中的相册\n\n- 如果你上传文件时执行了 `r2g upload -all`, 那你就已经获得了一个\n  可以在网络上公开访问的相册.\n- 使用命令 `r2g -info` 可以查看 R2 Home Page 网址, 这就是你的相册网址.\n- Cloudflare R2 可以自定义域名, 参考 [connect-your-bucket-to-a-custom-domain](https://developers.cloudflare.com/r2/data-access/public-buckets/#connect-your-bucket-to-a-custom-domain)\n\n## 使用代理 (http proxy)\n\n- 默认不使用代理.\n- 使用命令 `r2g --use-proxy true` 可设置为使用代理.  \n  其中 `true` 也可以是 `1`(壹) 或 `on`.\n- 在上面的命令中, 如果输入参数不是 `true`, `1`, `on`, 而是其它任何文字,\n  例如 `r2g --use-proxy off`, 则会设置为不使用代理.\n- 默认代理地址是 `http://127.0.0.1:1081`, 可使用文本编辑器打开\n  'gallery.toml, 修改其中的 'http_proxy'.\n\n## 建议使用终端文本编辑器\n\n本软件的大部分操作都需要在终端输入命令, 有时需要稍稍修改一下 toml,\n这种情况下如果切换到文本编辑器去操作, 会感觉优点麻烦, 因此建议使用类似\nVim/Emacs 的终端文本编辑器, 就很方便.\n\n我找到了 [micro](https://github.com/zyedidia/micro), 它类似 Vim/Emacs\n并且更轻, 也更易学易用, 优点:\n\n- 启动速度飞快, 感觉非常轻巧.\n- 非常易学易用, 支持鼠标选择, 以及用 Ctrl-C / Ctrl-V 来复制黏贴.  \n  支持 Ctrl-S 保存 / Ctrl-A 全选等符合现代习惯的快捷键.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "r2gallery",
    "package_url": "https://pypi.org/project/r2gallery/",
    "platform": null,
    "project_url": "https://pypi.org/project/r2gallery/",
    "project_urls": {
      "Home": "https://github.com/ahui2016/R2-Gallery"
    },
    "release_url": "https://pypi.org/project/r2gallery/0.0.1/",
    "requires_dist": [
      "arrow",
      "click",
      "jinja2",
      "tomli",
      "pillow",
      "mistune",
      "boto3"
    ],
    "requires_python": ">=3.10",
    "summary": "R2-Gallery: 个人独立相册，其中图片储存采用 Cloudflare R2 实现。",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16099717,
  "releases": {
    "0.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "2768effcfe5f9a4df126cfc29d554c94b219eeaeccc4a95d18b37b12722b6779",
          "md5": "59b573d77e04f127478d771a5f06e755",
          "sha256": "abe8cfdd499e3aefe27406cab01d33ebdc9e229836935da57395e43acadb0e89"
        },
        "downloads": -1,
        "filename": "r2gallery-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59b573d77e04f127478d771a5f06e755",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 27283,
        "upload_time": "2022-12-14T12:34:17",
        "upload_time_iso_8601": "2022-12-14T12:34:17.429686Z",
        "url": "https://files.pythonhosted.org/packages/27/68/effcfe5f9a4df126cfc29d554c94b219eeaeccc4a95d18b37b12722b6779/r2gallery-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "fdee21459c96b44bd9786bd38f8165d916184f83a2337791bd9a375bdbe5597b",
          "md5": "55c828da4db3b158c312954751830216",
          "sha256": "b405162a5441c97b1789b2729ceedd9d4dc9b829224c3f8b15e1ab00061c74f9"
        },
        "downloads": -1,
        "filename": "r2gallery-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "55c828da4db3b158c312954751830216",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 29456,
        "upload_time": "2022-12-14T12:34:25",
        "upload_time_iso_8601": "2022-12-14T12:34:25.181557Z",
        "url": "https://files.pythonhosted.org/packages/fd/ee/21459c96b44bd9786bd38f8165d916184f83a2337791bd9a375bdbe5597b/r2gallery-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "2768effcfe5f9a4df126cfc29d554c94b219eeaeccc4a95d18b37b12722b6779",
        "md5": "59b573d77e04f127478d771a5f06e755",
        "sha256": "abe8cfdd499e3aefe27406cab01d33ebdc9e229836935da57395e43acadb0e89"
      },
      "downloads": -1,
      "filename": "r2gallery-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "59b573d77e04f127478d771a5f06e755",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 27283,
      "upload_time": "2022-12-14T12:34:17",
      "upload_time_iso_8601": "2022-12-14T12:34:17.429686Z",
      "url": "https://files.pythonhosted.org/packages/27/68/effcfe5f9a4df126cfc29d554c94b219eeaeccc4a95d18b37b12722b6779/r2gallery-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "fdee21459c96b44bd9786bd38f8165d916184f83a2337791bd9a375bdbe5597b",
        "md5": "55c828da4db3b158c312954751830216",
        "sha256": "b405162a5441c97b1789b2729ceedd9d4dc9b829224c3f8b15e1ab00061c74f9"
      },
      "downloads": -1,
      "filename": "r2gallery-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "55c828da4db3b158c312954751830216",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 29456,
      "upload_time": "2022-12-14T12:34:25",
      "upload_time_iso_8601": "2022-12-14T12:34:25.181557Z",
      "url": "https://files.pythonhosted.org/packages/fd/ee/21459c96b44bd9786bd38f8165d916184f83a2337791bd9a375bdbe5597b/r2gallery-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}