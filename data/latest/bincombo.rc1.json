{
  "info": {
    "author": "Robert Schindler",
    "author_email": "dev@bob1.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "bincombo\n========\n\nMake any type binary-combinable with a single line of code.\n\nThe most obvious use case arguably is the creation of binary expressions over custom\ntypes, but ``bincombo`` is not limited to combination of boolean values.\nBy providing appropriate map/reduce operations, any type of data of the discrete\nmembers of a combination can be aggregated to form a combined result.\n\nThe implementation solely relies on inheritance, no meta programming is involved.\nYou are free to use your own metaclasses, should you wish to do so.\n\nSuppose you have a custom type ``Check``, which accepts or rejects values depending\non the result of the invocation of some callable.\nYou can make instances of it combinable using the binary operators `&` (and) and `|`\n(or) and also support the unary `~` (invert) by using the ``combinable()`` decorator::\n\n    import bincombo\n\n    @bincombo.combinable(methods=(\"check\",))\n    class Check:\n        __slots__ = (\"checker\",)\n\n        def __init__(self, checker):\n            self.checker = checker\n\n        def check(self, value):\n            return self.checker(value)\n\nNow, ``Check`` objects can be binary-combined::\n\n    c1 = Check(lambda v: isinstance(v, int) and v >= 42)\n    c2 = Check(lambda v: isinstance(v, str))\n    c3 = Check(lambda v: \"hello\" in v)\n    c = c1 | c2 & ~c3\n    c.check(41)  # False\n    c.check(42)  # True\n    c.check(\"hello, world!\")  # False\n    c.check(\"hey, world!\")  # True\n\nThe ``combinable()`` decorator creates a number of types needed to represent discrete\nchecks and combinations thereof.\nThese are stored in a ``Config`` object, which is aavailable as class attribute\n``BIN_CONFIG`` of ``Check``.\nIt can be worth storing these types as module attributes alongside your ``Check``\nclass to have them at hand for explicit use or type checking::\n\n    BaseCheck = Check.BIN_CONFIG.base_type\n    CheckCombo = Check.BIN_CONFIG.combo_type\n    AllChecks = Check.BIN_CONFIG.and_type\n    AnyCheck = Check.BIN_CONFIG.or_type\n\nAll types in this module have ``__slots__`` defined for smaller memory footprints\nand improved lookup times, as have the types created by ``combinable()``.\nIt is recommended to also equip your own type with ``__slots__`` if possible to\nbenefit from entirely ``__dict__``-less objects.\n\nTo gain a better understanding of how all the types relate or to further customize\nthem, here is how you would make ``Check`` binary-combinable without using the\n``combinable()`` helper::\n\n    # This is a base class from which both the discrete Check type and the type\n    # representing a combination of Check objects will inherit.\n    # It can be used, for instance, to test whether some object is Check-like\n    # using isinstance(obj, BaseCheck).\n    class BaseCheck:\n        __slots__ = ()\n\n    # Check should support all three operations.\n    feature_mixins = (\n        bincombo.AndSupportMixin, bincombo.OrSupportMixin, bincombo.InvertSupportMixin\n    )\n\n    # This is the type that would normally be returned by combinable() decorator.\n    # Here it replaces the original Check, but you could also give it a different name.\n    class Check(*feature_mixins, Check, BaseCheck):\n        __slots__ = ()\n\n    # Objects of this type represent (possibly negated) AND/OR combinations of\n    # Check objects.\n    class CheckCombo(*feature_mixins, bincombo.Combo, BaseCheck):\n        __slots__ = ()\n\n        # Create a proxy check() method that queries an individual combo member.\n        # bincombo will call this method for all members, combining the returned\n        # boolean values using and/or, depending on the combination type, and possibly\n        # invert the final result.\n        @bincombo.combine_members\n        def check(self, member, value):\n            return member.check(value)\n\n    # This is an AND combination.\n    class AllChecks(bincombo.AndComboMixin, CheckCombo):\n        __slots__ = ()\n\n    # This is an OR combination.\n    class AnyCheck(bincombo.OrComboMixin, CheckCombo):\n        __slots__ = ()\n\n    # Finally, bincombo has to be taught all the types just created.\n    # By attaching the Config object to BaseCheck as a class attribute, both Check\n    # and CheckCombo instances will have it available due to inheritance.\n    BaseCheck.BIN_CONFIG = bincombo.Config(\n        BaseCheck, Check, CheckCombo, AllChecks, AnyCheck\n    )\n\nFurther customization of the combining abilities is possible, the documentations of\n``combinable()``, ``combine_members()`` and ``Config`` have more information.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bob1de/python-bincombo",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bincombo",
    "package_url": "https://pypi.org/project/bincombo/",
    "platform": null,
    "project_url": "https://pypi.org/project/bincombo/",
    "project_urls": {
      "Homepage": "https://github.com/bob1de/python-bincombo"
    },
    "release_url": "https://pypi.org/project/bincombo/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Make any type binary-combinable with a single line of code.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14713385,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e321c366c441094c37f2400df61b040f6e8f004651e53a6d9094d36c0e76198c",
          "md5": "49221b506b0a1cc1903c50c4ae35ea32",
          "sha256": "4cce5f67ef512f81f57fbe2c8315167793548460f5e9a74dd3a6c23e1e951fb9"
        },
        "downloads": -1,
        "filename": "bincombo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49221b506b0a1cc1903c50c4ae35ea32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9886,
        "upload_time": "2022-08-10T07:26:37",
        "upload_time_iso_8601": "2022-08-10T07:26:37.708044Z",
        "url": "https://files.pythonhosted.org/packages/e3/21/c366c441094c37f2400df61b040f6e8f004651e53a6d9094d36c0e76198c/bincombo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cb47d4764f611eaeeafc31c2ec59301c6b60916b9b5b32af047a762de70e543",
          "md5": "c6d3298165d999665fb3ad3701fb8f44",
          "sha256": "7a870afd86f9d646c70117c60f064530498af7b264b7983539623865678a6cd0"
        },
        "downloads": -1,
        "filename": "bincombo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c6d3298165d999665fb3ad3701fb8f44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8823,
        "upload_time": "2022-08-10T07:26:39",
        "upload_time_iso_8601": "2022-08-10T07:26:39.886623Z",
        "url": "https://files.pythonhosted.org/packages/6c/b4/7d4764f611eaeeafc31c2ec59301c6b60916b9b5b32af047a762de70e543/bincombo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e321c366c441094c37f2400df61b040f6e8f004651e53a6d9094d36c0e76198c",
        "md5": "49221b506b0a1cc1903c50c4ae35ea32",
        "sha256": "4cce5f67ef512f81f57fbe2c8315167793548460f5e9a74dd3a6c23e1e951fb9"
      },
      "downloads": -1,
      "filename": "bincombo-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "49221b506b0a1cc1903c50c4ae35ea32",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 9886,
      "upload_time": "2022-08-10T07:26:37",
      "upload_time_iso_8601": "2022-08-10T07:26:37.708044Z",
      "url": "https://files.pythonhosted.org/packages/e3/21/c366c441094c37f2400df61b040f6e8f004651e53a6d9094d36c0e76198c/bincombo-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6cb47d4764f611eaeeafc31c2ec59301c6b60916b9b5b32af047a762de70e543",
        "md5": "c6d3298165d999665fb3ad3701fb8f44",
        "sha256": "7a870afd86f9d646c70117c60f064530498af7b264b7983539623865678a6cd0"
      },
      "downloads": -1,
      "filename": "bincombo-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c6d3298165d999665fb3ad3701fb8f44",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 8823,
      "upload_time": "2022-08-10T07:26:39",
      "upload_time_iso_8601": "2022-08-10T07:26:39.886623Z",
      "url": "https://files.pythonhosted.org/packages/6c/b4/7d4764f611eaeeafc31c2ec59301c6b60916b9b5b32af047a762de70e543/bincombo-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}