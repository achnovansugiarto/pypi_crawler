{
  "info": {
    "author": "Apratim Mitra",
    "author_email": "apratim.mitra@nih.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "GEO submission prepper\n======================\n\nSubmission of high-throughput sequencing data to a public database\nsuch as NCBI GEO (`<https://www.ncbi.nlm.nih.gov/geo/>`_)\nis a critical part of the process of disseminating important scientific\nadvances to the greater community. With the widespread adoption\nof high-throughput sequencing and fast-paced development of associated scientific assays, the scope\nand complexity of such projects have increased dramatically, to the point\nthat prominent scientific articles often employ several different sequencing assays to tell\ndifferent parts of the story.\n\nNCBI GEO is one of the most widely-used databases of sequencing data. Submissions\nwill typically include raw data files organized in a particular hierarchy and\na metadata spreadsheet containing details about samples that are part of the\nstudy. The metadata spreadsheet is comprehensive, allowing users to include\narbitrary numbers of samples and metadata. However, filling out this Excel\nspreadsheet is tedious and error-prone, as we have to fill in information about\npotentially hundreds of samples, with data spread across several different\nlocations, essentially by hand.\n\nTo address this problem, here we present ``geo-prepper``, a tool to automate\nparts of the data submission process to NCBI GEO. Given a samplesheet and config file,\nthe tool symlinks raw data to a desired output location, and automatically generates\nfiles that can be used to populate the GEO sample submission spreadsheet.\n\nUsage\n+++++\n\n::\n\n\tpython __init__.py [-h] [-s SAMPLETABLE] [-c CONFIG] [-o OUTPUT_DIR] [-g GROUPING_COL] [-f]\n\n\t  -s/--sampletable SAMPLETABLE\n\t        Sampletable with sample names, technical replicates (if any), links to raw data and other metadata\n\t  -c/--config CONFIG\n\t        Config yaml file that defines columns of interest in sampletable\n\t  -o/--output_dir OUTPUT_DIR\n\t        Output directory\n\t  -g/--grouping_col GROUPING_COL\n\t        (Optional) Column to group technical replicates. If specified, will override config.yaml specification\n\t  -f/--force\n\t        (Optional) Overwrite output directory if it exists\n\n\nThe tool has three required inputs:\n\n1. `config yaml`_\n2. `sample table`_\n3. ``OUTPUT_DIR``: This is the output directory where symlinks to raw data files and other files\n   are created (see `Output`_ section). If the specified directory already exists, the tool\n   exits with a warning.\n\nIn addition, there are two optional parameters:\n\n1. ``GROUPING_COL``: This is a column in the sampletable that is used to group technical replicates.\n   If specified, this overrides the ``config.yaml`` specification (see `grouping_col`_ below).\n2. ``-f/--force``: If specified, this will overwrite an existing output directory.\n\n\n**Warning:** File paths specified in the sampletable must be **absolute paths**.\n\nInput\n+++++\n\nconfig yaml\n^^^^^^^^^^^\n\nThis is a configuration file with options specified in a yaml format. Here\nis a sample ``config.yaml`` for a ChIP-Seq data set:\n`<templates/config-chipseq.yaml>`_\n\nBelow we list the accepted parameters\nof which `sample_col`_, `is_paired_end`_ and `file_cols`_ are required:\n\nsample_col\n----------\n\nThis is used to specify the column containing the sample ID.\nThe value will be used to match the column names in the\nsample table.\n\nFor example, ``sample_col: samplename`` will look for the column\nnamed *samplename* in the sample table for the sample IDs. The\nvalues in this column must be unique.\n\nis_paired_end\n-------------\n\nThis is used to specify single-end (SE) or paired-end (PE) data and\nmust be a boolean (``True`` or ``False``).\n\nfile_cols\n---------\n\nHere we specify the columns containing files to include in the\nGEO submission as ``key:value`` pairs. Accepted keys are listed below:\n\n+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| key      | description                                                                                                                                                                    |\n+==========+================================================================================================================================================================================+\n| R1       | **Required** Read 1 file (e.g. ``sample.R1.fastq.gz``) for SE or PE RNA-Seq or ChIP-Seq data, or cellranger BAM file (e.g. ``possorted_genome_bam.bam``) for single-cell data. |\n+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| R2       | Read 2 file (e.g. ``sample.R2.fastq.gz``) for PE RNA-Seq or ChIP-Seq data. Required if `is_paired_end`_ is True.                                                               |\n+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| peaks    | Peak file (e.g. ``peaks.bed``) output by ChIP-Seq peak caller.                                                                                                                 |\n+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| bigwig   | Bigwig file with ChIP-Seq signal                                                                                                                                               |\n+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| features | Features TSV file (e.g. ``features.tsv.gz``) output by cellranger for single-cell data.                                                                                        |\n+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| barcodes | Barcodes TSV file (e.g. ``barcodes.tsv.gz``) output by cellranger for single-cell data.                                                                                        |\n+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| matrix   | Matrix TSV file (e.g. ``matrix.mtx.gz``) output by cellranger for single-cell data                                                                                             |\n+----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n\n**Note I:** Of the keys listed above, only ``R1`` is required. As such, any arbitrary keys can\nbe added in this section to match specific file types that are part of the submission.\n\n**Note II:** All paths specified in the sampletable must be **absolute paths**.\n\nmetadata_cols\n-------------\n\nA bulleted list specifying additional metadata columns in the sample table. For example,\n\n::\n\n    metadata_cols:\n        - celltype\n        - genotype\n\nwill look for the columns ``celltype`` and ``genotype`` in the sampletable and include them in the output\n``sample_section.tsv``.\n\nskip_column_suffix\n------------------\n\nBy default, all keys listed in the `file_cols`_ section, are included as a suffix in the output\n(symlinked) file names. So, let's say, in the ``file_cols`` section, we specified,\n\n::\n\n    file_cols:\n        R1: 'orig_filename'\n        peaks: 'sicer'\n\nand in the sampletable, we have the following lines:\n\n+------------+----------------------------------------+----------------------------------------+\n| samplename | orig_filename                          | sicer                                  |\n+============+========================================+========================================+\n| wt_1       | /data/project/seq_core_237_R1.fastq.gz | /data/project/peakcaller/peaks_237.bed |\n+------------+----------------------------------------+----------------------------------------+\n| wt_2       | /data/project/seq_core_238_R1.fastq.gz | /data/project/peakcaller/peaks_238.bed |\n+------------+----------------------------------------+----------------------------------------+\n\nThe output files will be symlinked to the specified output directory (e.g. ``geo_project``) as,\n\n::\n\n    geo_project/\n      ├─ wt_1_R1.fastq.gz -> /data/project/seq_core_237_R1.fastq.gz\n      ├─ wt_2_R1.fastq.gz -> /data/project/seq_core_238_R1.fastq.gz\n      ├─ wt_1_peaks.bed -> /data/project/sicer/peaks_237.bed\n      └─ wt_2_peaks.bed -> /data/project/sicer/peaks_238.bed\n\nSo, the ``key`` in the ``file_cols`` section (e.g. ``peaks``), is included in the file name as\na suffix (``_peaks``). To override this behavior, specify the corresponding columns in\nthe ``skip_column_suffix`` section, as:\n\n::\n\n    skip_column_suffix:\n        - peaks\n\nNow, the peak files don't have the suffix ``_peaks`` in the file name and the\noutput directory looks like:\n\n::\n\n    geo_project/\n      ├─ wt_1_R1.fastq.gz -> /data/project/seq_core_237_R1.fastq.gz\n      ├─ wt_2_R1.fastq.gz -> /data/project/seq_core_238_R1.fastq.gz\n      ├─ wt_1.bed -> /data/project/sicer/peaks_237.bed\n      └─ wt_2.bed -> /data/project/sicer/peaks_238.bed\n\ngrouping_col\n------------\n\nThis is used to specify technical replicates (if any). Samples having the same value\nin the ``grouping_col`` column, will be considered technical replicates. This is an optional\nparameter, and if unspecified, defaults to ``sample_col``.\n\nsample table\n^^^^^^^^^^^^\n\nThis is a TSV containing sample metadata where each row corresponds to an individual sample.\nHere is an example sampletable for a ChIP-Seq data set: `<templates/sampletable-chipseq.tsv>`_\n\n- If the data set contains technical replicates, each *technical replicate* is a sample.\n  Otherwise, each *biological replicate* constitutes a sample.\n- Column names of this file must correspond to those specified in the `config yaml`_ file.\n- The sampletable must contain the `sample_col`_ column.\n- The sampletable must contain the ``R1`` column from the `file_cols`_ section of the config.yaml.\n  If `is_paired_end`_ is ``True``, then the sampletable must also contain the ``R2`` column.\n- All paths specified must be **absolute paths**.\n\nOutput\n++++++\n\nThe tool outputs the following:\n\n1. `File links`_\n2. `md5 hashes`_\n3. `sample section`_\n4. `paired-end section`_\n\nFile links\n^^^^^^^^^^\n\nThe tool creates symlinks to raw or processed files specified in the sampletable. These\nare named using the format: ``<sample_col>_<file_cols key>.<extension>``. So, for example, if\n\n- ``samplename`` is ``wt_1``\n- extension is ``.fastq.gz``\n- `file_cols`_ key is ``R1``\n\n| Then the symlinked output file is ``wt_1_R1.fastq.gz``.\n|\n\n**Note:**\n\nThe 'extension' is calculated from the raw file name as the string following the first period (.)\nin the basename of the file.\n\n- For example, for a file named ``seq_core_237_R1.fastq.gz``, the extension will be ``.fastq.gz``.\n- However, if the file is named ``seq_core_237.R1.fastq.gz`` the extension will be ``.R1.fastq.gz``.\n\nIn addition, the tool also outputs the following files:\n\nmd5 hashes\n^^^^^^^^^^\n\nFor each file specified in the sampletable, md5 hashes are calculated using the\n``md5sum`` utility and output to a TSV with file names\nin the first column and md5 hashes in the second column. Here (`<templates/chipseq/md5hash.tsv>`_)\nis the ``md5hash.tsv`` created for the example ChIP-Seq data set mentioned above.\n\n**Note:** The md5 hashes of the example data are identical as it was run on empty test data. In practice,\nthe hashes for each file will be unique.\n\nsample section\n^^^^^^^^^^^^^^\n\nThis is a TSV where each row contains all files corresponding to a particular sample\nincluding metadata columns, technical replicates and processed files if any. This can be used\nto populate the ``Sample section`` in the GEO submission template. Here (`<templates/chipseq/sample_section.tsv>`_)\nis the ``sample_section.tsv`` created for the same example ChIP-Seq data set.\n\npaired-end section\n^^^^^^^^^^^^^^^^^^\n\nThis is only output for PE data and lists Read 1 and Read 2 fastq files for each sample\nin two columns. This can be used to populate the final ``Paired-end`` section in the\nGEO submission template. For example, for an example RNA-Seq data set, this\nis the output tsv: `<templates/rnaseq/paired_end.tsv>`_\n\nExample output\n^^^^^^^^^^^^^^\n\nHere we give examples of output produced by the tool using the example files included in the\n``templates/`` directory.\n\nRNA-Seq data\n------------\n\n- Config file: `<templates/config-rnaseq.yaml>`_\n- Sampletable: `<templates/sampletable-rnaseq.tsv>`_\n\nOutput directory (say, ``geo-project``) will look like this::\n\n    geo-project\\\n      ├─ wt-1-1_R1.fastq.gz -> /data/rnaseq/raw/wt-1-1_R1.fastq.gz\n      ├─ wt-1-1_R2.fastq.gz -> /data/rnaseq/raw/wt-1-1_R2.fastq.gz\n      ├─ wt-2-1_R1.fastq.gz -> /data/rnaseq/raw/wt-2-1_R1.fastq.gz\n      ├─ wt-2-1_R2.fastq.gz -> /data/rnaseq/raw/wt-2-1_R2.fastq.gz\n      ├─ wt-2-2_R1.fastq.gz -> /data/rnaseq/raw/wt-2-2_R1.fastq.gz\n      ├─ wt-2-2_R2.fastq.gz -> /data/rnaseq/raw/wt-2-2_R2.fastq.gz\n      ├─ md5hash.tsv\n      ├─ sample_section.tsv\n      └─ paired_end.tsv\n\nOutput files:\n\n- `<templates/rnaseq/md5hash.tsv>`_\n- `<templates/rnaseq/sample_section.tsv>`_\n\nChIP-Seq data\n-------------\n\n- Config file: `<templates/config-chipseq.yaml>`_\n- Sampletable: `<templates/sampletable-chipseq.tsv>`_\n\nOutput directory::\n\n    geo-project\\\n      ├─ wt-1-1_R1.fastq.gz -> /data/chipseq/raw/wt-1-1_R1.fastq.gz\n      ├─ wt-1-2_R1.fastq.gz -> /data/chipseq/raw/wt-1-2_R1.fastq.gz\n      ├─ wt-2-1_R1.fastq.gz -> /data/chipseq/raw/wt-2-1_R1.fastq.gz\n      ├─ wt-2-2_R1.fastq.gz -> /data/chipseq/raw/wt-2-2_R1.fastq.gz\n      ├─ wt-1_peaks.bed -> /data/chipseq/wt-1/peaks.bed\n      ├─ wt-2_peaks.bed -> /data/chipseq/wt-2/peaks.bed\n      ├─ wt-1.bigwig -> /data/chipseq/wt-1/wt-1.bigwig\n      ├─ wt-2.bigwig -> /data/chipseq/wt-2/wt-2.bigwig\n      ├─ md5hash.tsv\n      └─ sample_section.tsv\n\nOutput files:\n\n- `<templates/chipseq/md5hash.tsv>`_\n- `<templates/chipseq/sample_section.tsv>`_\n\nSingle-cell data\n----------------\n\n- Config file: `<templates/config-sc.yaml>`_\n- Sampletable: `<templates/sampletable-sc.tsv>`_\n\nOutput directory::\n\n    geo-project\\\n      ├─ wt-1.bam -> /data/pi/project/data/wt-1.bam\n      ├─ wt-2.bam -> /data/pi/project/data/wt-2.bam\n      ├─ wt-1_features.tsv.gz -> /data/pi/project/data/wt-1_features.tsv.gz\n      ├─ wt-1_barcodes.tsv.gz -> /data/pi/project/data/wt-1_barcodes.tsv.gz\n      ├─ wt-1_matrix.mtx.gz -> /data/pi/project/data/wt-1_matrix.mtx.gz\n      ├─ wt-2_features.tsv.gz -> /data/pi/project/data/wt-2_features.tsv.gz\n      ├─ wt-2_barcodes.tsv.gz -> /data/pi/project/data/wt-2_barcodes.tsv.gz\n      ├─ wt-2_matrix.mtx.gz -> /data/pi/project/data/wt-2_matrix.mtx.gz\n      ├─ md5hash.tsv\n      └─ sample_section.tsv\n\nOutput files:\n\n- `<templates/single-cell/md5hash.tsv>`_\n- `<templates/single-cell/sample_section.tsv>`_\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/NICHD-BSPC/geo_prepper",
    "keywords": "",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "geo-prepper",
    "package_url": "https://pypi.org/project/geo-prepper/",
    "platform": "",
    "project_url": "https://pypi.org/project/geo-prepper/",
    "project_urls": {
      "Homepage": "http://github.com/NICHD-BSPC/geo_prepper"
    },
    "release_url": "https://pypi.org/project/geo-prepper/0.1/",
    "requires_dist": [
      "pandas",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "GEO submission prepper",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8925084,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62e9fcfe1cf8b28131a9505122ed8d46bc3c1608c7ebd497887c9f61389b05b8",
          "md5": "932d6803a677965b9967395587a53361",
          "sha256": "6d686fccc6963caed1ff34fe4255567b66f0d6b1fccc175b4d2749384ff6391d"
        },
        "downloads": -1,
        "filename": "geo_prepper-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "932d6803a677965b9967395587a53361",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20525,
        "upload_time": "2020-12-17T15:50:50",
        "upload_time_iso_8601": "2020-12-17T15:50:50.419171Z",
        "url": "https://files.pythonhosted.org/packages/62/e9/fcfe1cf8b28131a9505122ed8d46bc3c1608c7ebd497887c9f61389b05b8/geo_prepper-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "462d75ee1a32ceeb8d412d3ba19abc9ef51d39ac53a32d2fd610455e0273b9d1",
          "md5": "67e13986163092765929b5b39a569912",
          "sha256": "b97dff99a53a7f613766fe3cf5102e0dc23b0620b75d2929d606698481090f77"
        },
        "downloads": -1,
        "filename": "geo_prepper-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "67e13986163092765929b5b39a569912",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11109,
        "upload_time": "2020-12-17T15:50:52",
        "upload_time_iso_8601": "2020-12-17T15:50:52.422091Z",
        "url": "https://files.pythonhosted.org/packages/46/2d/75ee1a32ceeb8d412d3ba19abc9ef51d39ac53a32d2fd610455e0273b9d1/geo_prepper-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62e9fcfe1cf8b28131a9505122ed8d46bc3c1608c7ebd497887c9f61389b05b8",
        "md5": "932d6803a677965b9967395587a53361",
        "sha256": "6d686fccc6963caed1ff34fe4255567b66f0d6b1fccc175b4d2749384ff6391d"
      },
      "downloads": -1,
      "filename": "geo_prepper-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "932d6803a677965b9967395587a53361",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20525,
      "upload_time": "2020-12-17T15:50:50",
      "upload_time_iso_8601": "2020-12-17T15:50:50.419171Z",
      "url": "https://files.pythonhosted.org/packages/62/e9/fcfe1cf8b28131a9505122ed8d46bc3c1608c7ebd497887c9f61389b05b8/geo_prepper-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "462d75ee1a32ceeb8d412d3ba19abc9ef51d39ac53a32d2fd610455e0273b9d1",
        "md5": "67e13986163092765929b5b39a569912",
        "sha256": "b97dff99a53a7f613766fe3cf5102e0dc23b0620b75d2929d606698481090f77"
      },
      "downloads": -1,
      "filename": "geo_prepper-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "67e13986163092765929b5b39a569912",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11109,
      "upload_time": "2020-12-17T15:50:52",
      "upload_time_iso_8601": "2020-12-17T15:50:52.422091Z",
      "url": "https://files.pythonhosted.org/packages/46/2d/75ee1a32ceeb8d412d3ba19abc9ef51d39ac53a32d2fd610455e0273b9d1/geo_prepper-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}