{
  "info": {
    "author": "GonzaloSaad",
    "author_email": "saad.gonzalo.ale@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# shandlers\n\n[![serverless](http://public.serverless.com/badges/v3.svg)](http://www.serverless.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Build Status](https://travis-ci.com/GonzaloSaad/shandlers.svg?branch=master)](https://travis-ci.com/GonzaloSaad/shandlers)\n\nA python lib that provides handlers for serverless events\n\n&nbsp;\n## Installation\n\nFrom PyPI:\n\n    shandlers==0.0.3\n\n&nbsp;\n## Supported events\n- [x] sqs\n- [ ] apigw\n- [ ] sns\n- [ ] kinesis stream\n- [ ] kinesis firehose\n\n\n&nbsp;\n## Basic Usage\n\n### SQS Handler\n\nCreate a function that accepts a `payload` and `kwargs` as parameters, that contains the logic\nthat you want to apply to **each** of your records in the event.\n\n```python\ndef handle(payload, **kwargs):\n    pass\n```\n\nAdd the `@sqs_handler` decorator to the function\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\n\n@sqs_handler()\ndef handle(payload, **kwargs):\n    pass\n```\n\nThe decorator will allow your function to:\n- Parse the SQS event (using [`marshmallow`](https://github.com/marshmallow-code/marshmallow))\n- Parse the `body` of each record to a `dict` and pass it to your function\n- Handle a basic retry logic\n- Handle `ValidationError` and `JSONDecodeError`\n\n&nbsp;\n#### The kwargs argument in your function\n\nYou can have extra arguemtns in your function if you need to. The `sqs_handler` decorator\nalso passes `receive_count` and `event` as parameters, in case you need to perform\nextra actions with that information.\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\n\n@sqs_handler()\ndef handle(payload, receive_count, event, **kwargs):\n    pass\n```\n\n&nbsp;\n#### Configuring the decorator\n\n#### Schema\n\nYou can add `schema` to the decorator parameters, in case you have for example\na `marshmallow` schema or if you have any other mechanism to parse that responds to\nthe `.loads(json_string)` call.\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\nfrom myschema import MyMarshmallowSchema\n\n@sqs_handler(schema=MyMarshmallowSchema())\ndef handle(payload, **kwargs):\n    pass\n```\n\nHere the `payload` argument type will depend on the passed schema output.\n\nAlso, if while parsing the record `body` a parsing error occurs, the event\nwill be **DISCARDED**.\n\n> The default value of `schema` is the `json` module from python\n\n#### Retry threshold\n\nYou can add `retry_theshold` to the decorator parameters to specify the\namount of times a `record` can retry to be processed.\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\n\n@sqs_handler(retry_threshold=5)\ndef handle(payload, **kwargs):\n    pass\n```\n\n> The default value is set to `1`\n\n#### Logger\n\nYou can add `logger` to the decorator parameter, so the handlers uses your logger\nwhen an error occurs.\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\nimport logging\n\n_LOGGER = logging.getLogger()\n\n@sqs_handler(logger=_LOGGER)\ndef handle(payload, **kwargs):\n    pass\n```\n\n> The default logger can be checked [here](shandlers/logger.py)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GonzaloSaad/shandlers",
    "keywords": "python aws serverless",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shandlers",
    "package_url": "https://pypi.org/project/shandlers/",
    "platform": "",
    "project_url": "https://pypi.org/project/shandlers/",
    "project_urls": {
      "Homepage": "https://github.com/GonzaloSaad/shandlers"
    },
    "release_url": "https://pypi.org/project/shandlers/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python lib that provides handlers for serverless events",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8105633,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab2d6720c53d02f253e92c50b7dfa8bf73016f6b2c6803601c00c1f262688aee",
          "md5": "972e36efe6ef6f25a44ff715ee65f3cb",
          "sha256": "7dfec069a09a6b65fda23fadab718085dc9879fbefb3fd6e41c85440487c32db"
        },
        "downloads": -1,
        "filename": "shandlers-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "972e36efe6ef6f25a44ff715ee65f3cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5534,
        "upload_time": "2020-05-04T01:18:24",
        "upload_time_iso_8601": "2020-05-04T01:18:24.086773Z",
        "url": "https://files.pythonhosted.org/packages/ab/2d/6720c53d02f253e92c50b7dfa8bf73016f6b2c6803601c00c1f262688aee/shandlers-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20f01d06331f346be474e88c805c1585dafb59f59ebf4dd7bc3a6c4bad4b12d0",
          "md5": "668db24f06ae2bf363e47fa0b0c6f4c3",
          "sha256": "8c694f9990b4f43962731559c4654c06ed933f4488ea17aecfddfe6bfb06a26f"
        },
        "downloads": -1,
        "filename": "shandlers-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "668db24f06ae2bf363e47fa0b0c6f4c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5625,
        "upload_time": "2020-05-11T17:01:12",
        "upload_time_iso_8601": "2020-05-11T17:01:12.505681Z",
        "url": "https://files.pythonhosted.org/packages/20/f0/1d06331f346be474e88c805c1585dafb59f59ebf4dd7bc3a6c4bad4b12d0/shandlers-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff76993ffde5b7aff2b79cdd1d7adb51e34270de8faed4af2bcd1b7eab7031cc",
          "md5": "fcc686d86684010d9f06f7aa13f4fe04",
          "sha256": "50e8ef118f6f4c7862e811fdf303ba639d1405aae7b6148c324e9c4037bd7a8f"
        },
        "downloads": -1,
        "filename": "shandlers-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fcc686d86684010d9f06f7aa13f4fe04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5599,
        "upload_time": "2020-09-03T19:26:41",
        "upload_time_iso_8601": "2020-09-03T19:26:41.656078Z",
        "url": "https://files.pythonhosted.org/packages/ff/76/993ffde5b7aff2b79cdd1d7adb51e34270de8faed4af2bcd1b7eab7031cc/shandlers-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff76993ffde5b7aff2b79cdd1d7adb51e34270de8faed4af2bcd1b7eab7031cc",
        "md5": "fcc686d86684010d9f06f7aa13f4fe04",
        "sha256": "50e8ef118f6f4c7862e811fdf303ba639d1405aae7b6148c324e9c4037bd7a8f"
      },
      "downloads": -1,
      "filename": "shandlers-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "fcc686d86684010d9f06f7aa13f4fe04",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5599,
      "upload_time": "2020-09-03T19:26:41",
      "upload_time_iso_8601": "2020-09-03T19:26:41.656078Z",
      "url": "https://files.pythonhosted.org/packages/ff/76/993ffde5b7aff2b79cdd1d7adb51e34270de8faed4af2bcd1b7eab7031cc/shandlers-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}