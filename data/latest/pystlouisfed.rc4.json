{
  "info": {
    "author": "Tomas Koutek",
    "author_email": "66636b6f6666@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Office/Business :: Financial",
      "Topic :: Office/Business :: Financial :: Investment",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<div id=\"top\"></div>\n\n# Python client for Federal Reserve Bank of St. Louis\n\n## Description\n\n> This is a third-party client that is developed and maintained independently of the Federal Reserve Bank. As such, it is not affiliated with or supported by the institution.\n\nThe Federal Reserve Bank of St. Louis is one of 12 regional Reserve Banks that, along with the Board of Governors in Washington, D.C., make up the United States' central bank.\nThe https://stlouisfed.org site currently provides more than 816,000 time series from 107 sources using the [FRED](https://fred.stlouisfed.org/) (Federal Reserve Economic Data)\nand [ALFRED](https://alfred.stlouisfed.org/) (Archival FRED) interfaces. It is also possible to obtain detailed geographical data from [GeoFRED](https://geofred.stlouisfed.org/) (\nGeographical Economic FRED) or more than 500,000 publications from the digital library [FRASER](https://fraser.stlouisfed.org/).\n\nThe `pystlouisfed` package covers the entire FRED / ALFRED / GeoFRED / FRASER API and returns most of the results as `pandas.DataFrame`, which is cast to the correct data types\nwith a specific index. So \"date\", \"realtime_start\", \"observation_start\" etc are `datetime64` type, \"value\" is `float` and not `str`, missing values are `np.NaN` and not \".\" etc ...\nThe naming convention of methods and parameters is the same as in the target API and everything is detailed [documented](https://tomaskoutek.github.io/pystlouisfed/). There is also\na default rate-limiter, which ensures that the API call limit is not exceeded.\n\n## Getting Started\n\n### Installing\n\n```\npip install pystlouisfed\n```\n\n### Dependencies\n\n* [pandas](https://pandas.pydata.org/) for time series data and lists\n* [requests](https://docs.python-requests.org/en/latest/) for API calls\n* [shapely](https://shapely.readthedocs.io/en/latest/) for geometric data from GeoFRED\n* [sickle](https://sickle.readthedocs.io/) for FRASER oai-pmh API\n* [ratelimiter](https://github.com/RazerM/ratelimiter) for limiting API calls\n\n## Usage\n\nFirst you need to register and create an [API key](https://fred.stlouisfed.org/docs/api/api_key.html).\n\n### Documentation\n\nThe [documentation](https://tomaskoutek.github.io/pystlouisfed/) contains a description of all methods, enums, classes and API calls with individual examples and their results. Or\nyou can display a detailed description directly with the help function.\n\nFor example:\n\n```python\nfrom pystlouisfed import FRED\n\nhelp(FRED.series_search)\n```\n\n### Let 's start with FRED and ALFRED\n\nMost FRED (ALFRED) API calls return a list of objects (`pandas.DataFrame`), but there are a few exceptions. A few methods do not return a `pandas.DataFrame`, but only one specific\nobject from the [pystlouisfed.models](https://tomaskoutek.github.io/pystlouisfed/models.html).\n\nFor example:\n\n\"Hey FRED give me [Category](https://tomaskoutek.github.io/pystlouisfed/models.html#pystlouisfed.models.Category) with ID 125\"\n\n```python\nfrom pystlouisfed import FRED\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\ncategory = fred.category(category_id=125)\n# Category(id=125, name='Trade Balance', parent_id=13)\n```\n\nor [Source](https://tomaskoutek.github.io/pystlouisfed/models.html#pystlouisfed.models.Source) with ID 1\n\n```python\nfrom pystlouisfed import FRED\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\nfred.source(source_id=1)\n# Source(id=1, realtime_start='2022-01-14', realtime_end='2022-01-14', name='Board of Governors of the Federal Reserve System (US)', link='http://www.federalreserve.gov/')\n```\n\nother methods return `pandas.DataFrame`\nFor example method `FRED.category_series` (all series for a specific category)\n\n```python\nfrom pystlouisfed import FRED\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\ndf = fred.category_series(category_id=125).head()\n\nprint(df.head())\n```\n\n```\n        realtime_start realtime_end                                              title observation_start observation_end  frequency frequency_short                units units_short      seasonal_adjustment seasonal_adjustment_short              last_updated  popularity  group_popularity                                              notes\nid                                                                                                                                                                                                                                                                                                                                                \nAITGCBN     2022-02-05   2022-02-05  Advance U.S. International Trade in Goods: Bal...        2021-12-01      2021-12-01    Monthly               M  Millions of Dollars   Mil. of $  Not Seasonally Adjusted                       NSA 2022-01-26 13:31:05+00:00           3                26  This advance estimate represents the current m...\nAITGCBS     2022-02-05   2022-02-05  Advance U.S. International Trade in Goods: Bal...        2021-12-01      2021-12-01    Monthly               M  Millions of Dollars   Mil. of $      Seasonally Adjusted                        SA 2022-01-26 13:31:02+00:00          26                26  This advance estimate represents the current m...\nBOPBCA      2022-02-05   2022-02-05          Balance on Current Account (DISCONTINUED)        1960-01-01      2014-01-01  Quarterly               Q  Billions of Dollars   Bil. of $      Seasonally Adjusted                        SA 2014-06-18 13:41:28+00:00          10                11  This series has been discontinued as a result ...\nBOPBCAA     2022-02-05   2022-02-05          Balance on Current Account (DISCONTINUED)        1960-01-01      2013-01-01     Annual               A  Billions of Dollars   Bil. of $  Not Seasonally Adjusted                       NSA 2014-06-18 13:41:28+00:00           2                11  This series has been discontinued as a result ...\nBOPBCAN     2022-02-05   2022-02-05          Balance on Current Account (DISCONTINUED)        1960-01-01      2014-01-01  Quarterly               Q  Billions of Dollars   Bil. of $  Not Seasonally Adjusted                       NSA 2014-06-18 13:41:28+00:00           1                11  This series has been discontinued as a result ...\n```\n\nor method `FRED.series_search` (search series by text)\n\n```python\nfrom pystlouisfed import FRED\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\ndf = fred.series_search(search_text='monetary service index')\n\nprint(df.head())\n```\n\n```\n        realtime_start realtime_end                                            title observation_start observation_end frequency frequency_short                units units_short  seasonal_adjustment seasonal_adjustment_short              last_updated  popularity  group_popularity                                              notes\nid                                                                                                                                                                                                                                                                                                                                         \nMSIMZMP     2022-02-05   2022-02-05         Monetary Services Index: MZM (preferred)        1967-01-01      2013-12-01   Monthly               M  Billions of Dollars   Bil. of $  Seasonally Adjusted                        SA 2014-01-17 13:16:42+00:00          20                20  The MSI measure the flow of monetary services ...\nMSIM2       2022-02-05   2022-02-05          Monetary Services Index: M2 (preferred)        1967-01-01      2013-12-01   Monthly               M  Billions of Dollars   Bil. of $  Seasonally Adjusted                        SA 2014-01-17 13:16:44+00:00          16                16  The MSI measure the flow of monetary services ...\nMSIALLP     2022-02-05   2022-02-05  Monetary Services Index: ALL Assets (preferred)        1967-01-01      2013-12-01   Monthly               M  Billions of Dollars   Bil. of $  Seasonally Adjusted                        SA 2014-01-17 13:16:45+00:00          14                14  The MSI measure the flow of monetary services ...\nMSIM1P      2022-02-05   2022-02-05          Monetary Services Index: M1 (preferred)        1967-01-01      2013-12-01   Monthly               M  Billions of Dollars   Bil. of $  Seasonally Adjusted                        SA 2014-01-17 13:16:45+00:00           9                 9  The MSI measure the flow of monetary services ...\nMSIM2A      2022-02-05   2022-02-05        Monetary Services Index: M2 (alternative)        1967-01-01      2013-12-01   Monthly               M  Billions of Dollars   Bil. of $  Seasonally Adjusted                        SA 2014-01-17 13:16:44+00:00           8                 8  The MSI measure the flow of monetary services ...\n```\n\nor method `FRED.series_observations` (observations for specific series ID)\n\n```python\nfrom matplotlib import pyplot as plt\nfrom pystlouisfed import FRED\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\n# T10Y2Y  -  10-Year Treasury Constant Maturity Minus 2-Year Treasury Constant Maturity\ndf = fred.series_observations(series_id='T10Y2Y')\n\ndf.plot(y='value', grid=True)\nplt.show()\n```\n\n![FRED series_observations](./docs/T10Y2Y.png \"FRED series_observations\")\n\nIn addition, each DataFrame has correctly set data types.\n\n```python\nfrom pystlouisfed import FRED\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\ndf = fred.category_series(125)\n\nprint(df.info(verbose=True, memory_usage='deep'))\n```\n\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 47 entries, AITGCBN to IEABCSN\nData columns (total 15 columns):\n #   Column                     Non-Null Count  Dtype              \n---  ------                     --------------  -----              \n 0   realtime_start             47 non-null     datetime64[ns]     \n 1   realtime_end               47 non-null     datetime64[ns]     \n 2   title                      47 non-null     string             \n 3   observation_start          47 non-null     datetime64[ns]     \n 4   observation_end            47 non-null     datetime64[ns]     \n 5   frequency                  47 non-null     category           \n 6   frequency_short            47 non-null     category           \n 7   units                      47 non-null     category           \n 8   units_short                47 non-null     category           \n 9   seasonal_adjustment        47 non-null     category           \n 10  seasonal_adjustment_short  47 non-null     category           \n 11  last_updated               47 non-null     datetime64[ns, UTC]\n 12  popularity                 47 non-null     int64              \n 13  group_popularity           47 non-null     int64              \n 14  notes                      47 non-null     string             \ndtypes: category(6), datetime64[ns, UTC](1), datetime64[ns](4), int64(2), string(2)\nmemory usage: 25.0 KB\n```\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n### Working with Enums\n\nFRED (ALFRED) has many different parameters, which are not the same for each method. So there is no need to remember everything or keep looking at the documentation.\n`pystlouisfed` uses the [Enums](https://tomaskoutek.github.io/pystlouisfed/enums.html) constants. For example, the API endpoint FRED:series_observations (and\nmethod `FRED.series_observations`) has the optional parameters\n\"units\", \"frequency\", \"aggregation_method\" or \"output_type\":\n\n```\n    def series_observations(\n            self,\n            series_id: str,\n            realtime_start: date = date.today(),\n            realtime_end: date = date.today(),\n            sort_order: enums.SortOrder = enums.SortOrder.asc,\n            observation_start: date = date(1776, 7, 4),\n            observation_end: date = date(9999, 12, 31),\n            units: enums.Unit = enums.Unit.lin,\n            frequency: enums.Frequency = None,\n            aggregation_method: enums.AggregationMethod = enums.AggregationMethod.average,\n            output_type: enums.OutputType = enums.OutputType.realtime_period,\n            vintage_dates: List[str] = None\n    ) -> pd.DataFram:\n```\n\nBut what should be the value? For example, for the parameter \"aggregation_method\" it is possible to use `pystlouisfed.AggregationMethod`:\n\n```python\nfrom enum import Enum\n\n\nclass AggregationMethod(Enum):\n    \"\"\"\n    A key that indicates the aggregation method used for frequency aggregation.\n    \"\"\"\n\n    avg = 'avg'\n    \"\"\"\n    Average (same as `pystlouisfed.enums.AggregationMethod.average`)\n    \"\"\"\n    average = 'avg'\n    \"\"\"\n    Average (same as `pystlouisfed.enums.AggregationMethod.avg`)\n    \"\"\"\n    sum = 'sum'\n    \"\"\"\n    Sum\n    \"\"\"\n    eop = 'eop'\n    \"\"\"\n    End of Period (same as `pystlouisfed.enums.AggregationMethod.end_of_period`)\n    \"\"\"\n    end_of_period = 'eop'\n    \"\"\"\n    End of Period (same as `pystlouisfed.enums.AggregationMethod.eop`)\n    \"\"\"\n```\n\nThe method above can then be called as follows:\n\n```python\nfrom pystlouisfed import FRED, AggregationMethod, Frequency\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\ndf = fred.series_observations(series_id='T10Y2Y', aggregation_method=AggregationMethod.end_of_period, frequency=Frequency.weekly_ending_friday)\n```\n\n### Working with rate limiting\n\nThe API is limited to 120 calls per 60 seconds.\n`pystlouisfed` therefore, by default uses [ratelimiter](https://github.com/RazerM/ratelimiter), which monitors this limit!\nSo it is not a problem to download all series (~800) with the tag \"daily\" and \"nsa\" (Not Seasonally Adjusted) without exceeding any limits:\n\n```python\nfrom pystlouisfed import FRED\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\nseries = fred.tags_series(tag_names=['daily', 'nsa'], exclude_tag_names=['discontinued'])\n\nfor series_id in series.index.values:\n    df = fred.series_observations(series_id=series_id)\n```\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n### Working with data revisions\n\n> https://fred.stlouisfed.org/docs/api/fred/fred_vs_alfred.html\n>\n> Most users are interested in FRED and not ALFRED. In other words, most people want to know what's the most accurate information about the past that is available today (FRED) not what information was known on some past date in history (ALFRED®).\n> Note that the FRED and ALFRED web services use the same URLs but with different options. The default options for each URL have been chosen to make the most sense for FRED users. In particular by default, the real-time period has been set to today's date. ALFRED® users can change the real-time period by setting the realtime_start and realtime_end variables.\n\nFor example, \"GDP\" has 303 values for today.\n\n```python\nfrom pystlouisfed import FRED\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\ndf = fred.series_observations(series_id='GDP')\n\nprint(len(df))\n# 303\n```\n\nBut if we request all the changes, we get 3068 values!\n\n```python\nfrom pystlouisfed import FRED\nfrom datetime import date\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\ndf = fred.series_observations(series_id='GDP', realtime_start=date(1776, 7, 4))\n\nprint(len(df))\n# 3068\n```\n\nOf course, it is possible to set the range or only one day (set same date value for `realtime_start` and `realtime_end`). Let's say we want all changes between \"2021-11-01\" and \"\n2022-01-01\":\n\n```python\nfrom pystlouisfed import FRED\nfrom datetime import date\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\ndf = fred.series_observations(series_id='GDP', realtime_start=date(2021, 11, 1), realtime_end=date(2022, 1, 1))\n\ndf.loc['2021-07-01':'2021-07-01']\n```\n\nand we see how the value for day \"2021-07-01\" has changed.\n\n```\n           realtime_start realtime_end      value\ndate                                             \n2021-07-01     2021-11-01   2021-11-23  23173.496\n2021-07-01     2021-11-24   2021-12-21  23187.042\n2021-07-01     2021-12-22   2022-01-01  23202.344\n```\n\nBetween dates \"2021-11-01\" - \"2021-11-23\" was 23173.496, then until \"2021-12-21\" at 23187.042 and finally at 23202.344. I think this is important information for backtesting.\nBecause the backtest on the current/last data will be wrong.\n\nMany other features in the [documentation](https://tomaskoutek.github.io/pystlouisfed/client.html#pystlouisfed.client.FRED).\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n### Working with TimeZones\n\nThis functionality is currently on the TODO list.\n\nFRED/ALFRED works with date in 99% of cases. \nBut what is a date? For example, the friday \"2022-02-04\" can be almost anything - it depends on the time zone:\n\n![timezones](./docs/timezones.png \"timezones\")\n\nWhy we are interested in this?\n\nLet's say we are in the \"Europe/Prague\" timezone (UTC+1) and at 2:00am we call the method:\n\n```python\nfrom pystlouisfed import FRED\nfrom datetime import date\n\nfred = FRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\nfred.series_observations(series_id='GDP', realtime_start=date.today(), realtime_end=date.today())\n```\n\nFRED/ALFRED will return the error:\n> \"Bad Request. Variable realtime_start can not be after today's date...\" \n\nbecause it works in the **timezone \"US/Central\"** (UTC−06:00)! \nProbably all the date values that the API returns are in \"US/Central\", but I haven't verified it.\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n### GeoFRED\n\n> https://geofred.stlouisfed.org/about/\n>\n> GeoFRED® allows you to create, customize, and share geographical maps of data found in FRED®.\n> Easily access the details and adjust how the data are displayed.\n> You can also transform the data and download it according to geographic category and time frame.\n\nFor example, the `GeoFRED.shapes` method returns a list of the` pystlouisfed.models.Shape` object.\n\nThis result can be plotted:\n\n```python\nimport matplotlib.pyplot as plt\nfrom descartes import PolygonPatch\nfrom pystlouisfed import GeoFRED, ShapeType\n\nplt.figure()\nax = plt.axes()\ngeo_fred = GeoFRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\n\nfor country_shape in geo_fred.shapes(shape=ShapeType.country):\n    ax.add_patch(PolygonPatch(country_shape.geometry, ec='#999999', fc='#6699cc', alpha=0.5, zorder=2))\n\nax.axis('scaled')\nplt.show()\n```\n\n![GeoFRED shape map](./docs/geofred_shape_map.png \"GeoFRED shape map\")\n\nOr it is possible to return data for a specific series ID:\n\n```python\nfrom pystlouisfed import GeoFRED, ShapeType\n\ngeo_fred = GeoFRED(api_key='abcdefghijklmnopqrstuvwxyz123456')\ndf = geo_fred.series_data(series_id=\"WIPCPI\")\n\nprint(df.head())\n```\n\n```\n       region code    value series_id  year\n0     Alabama   01  46479.0    ALPCPI  2020\n1      Alaska   02  63502.0    AKPCPI  2020\n2     Arizona   04  49648.0    AZPCPI  2020\n3    Arkansas   05  47235.0    ARPCPI  2020\n4  California   06  70192.0    CAPCPI  2020\n```\n\nOther functions in the [documentation](https://tomaskoutek.github.io/pystlouisfed/client.html#pystlouisfed.client.GeoFRED).\n\n### FRASER\n\n> https://fraser.stlouisfed.org/about\n>\n> FRASER is a digital library of U.S. economic, financial, and banking history—particularly the history of the Federal Reserve System.\n>\n> Providing economic information and data to the public is an important mission for the St. Louis Fed started by former St. Louis Fed Research Director Homer Jones in 1958.\n> FRASER began as a data preservation and accessibility project of the Federal Reserve Bank of St. Louis in 2004 and now provides access to data and policy documents from the Federal Reserve System and many other institutions.\n\nThe Fraser interface communicates using the [OAI-PMH](https://en.wikipedia.org/wiki/Open_Archives_Initiative_Protocol_for_Metadata_Harvesting) API. It is thus possible to obtain\nmetadata about hundreds of thousands publications.\n\nFor example:\n\n```python\nfrom pystlouisfed import FRASER\n\nfraser = FRASER()\nrecord = fraser.get_record(identifier='oai:fraser.stlouisfed.org:title:176')\nmetadata = record.get_metadata()\n\nprint(metadata['url'])\n```\n\n```python\n[\n    'https://fraser.stlouisfed.org/title/investigation-economic-problems-176',\n    'https://fraser.stlouisfed.org/images/record-thumbnail.jpg',\n    'https://fraser.stlouisfed.org/docs/historical/senate/1933sen_investeconprob/1933sen_investeconprob.pdf'\n]\n```\n\nOther functions in the [documentation](https://tomaskoutek.github.io/pystlouisfed/client.html#pystlouisfed.client.FRASER).\n\n## License\n\nDistributed under the MIT License. See `LICENSE` for more information.\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/TomasKoutek/pystlouisfed.git",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TomasKoutek/pystlouisfed",
    "keywords": "economics,API,financial,FRED,ALFRED,FRASER,GEOFRED,stlouisfed,trading,algotrading",
    "license": "MIT",
    "maintainer": "Tomas Koutek",
    "maintainer_email": "",
    "name": "pystlouisfed",
    "package_url": "https://pypi.org/project/pystlouisfed/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/pystlouisfed/",
    "project_urls": {
      "Documentation": "https://tomaskoutek.github.io/pystlouisfed/",
      "Download": "https://github.com/TomasKoutek/pystlouisfed.git",
      "Homepage": "https://github.com/TomasKoutek/pystlouisfed",
      "Source": "https://github.com/TomasKoutek/pystlouisfed",
      "Tracker": "https://github.com/TomasKoutek/pystlouisfed/issues"
    },
    "release_url": "https://pypi.org/project/pystlouisfed/2.1.0/",
    "requires_dist": [
      "pandas (>1.0.0)",
      "requests",
      "ratelimiter",
      "shapely",
      "sickle",
      "numpy",
      "pdoc3 ; extra == 'dev'",
      "build ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Federal Reserve Bank of St. Louis - FRED, ALFRED, GeoFRED and FRASER",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12838417,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e35c70dc3afece5a397cda96ecadfbb39624126506abba6936b1e060cd0e82ec",
          "md5": "e73e5b47f29f17f1483e56d2c0136576",
          "sha256": "917d882954e0d11011e4db9d3e99153fa483cf3ffeadccb9dbf3f535cf6ba8d6"
        },
        "downloads": -1,
        "filename": "pystlouisfed-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e73e5b47f29f17f1483e56d2c0136576",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 34028,
        "upload_time": "2022-01-22T20:50:53",
        "upload_time_iso_8601": "2022-01-22T20:50:53.402307Z",
        "url": "https://files.pythonhosted.org/packages/e3/5c/70dc3afece5a397cda96ecadfbb39624126506abba6936b1e060cd0e82ec/pystlouisfed-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0192a5551d2e9ac2ab479ddcce4e875917a0d62e8b8eaa5af2149a4eb63eead",
          "md5": "519bd8c22167e355bef874a8f477ae47",
          "sha256": "b4b25f2222e2971b70dba600ca58a8ce30d8fbe11d042821d1acbe6ad12eedbe"
        },
        "downloads": -1,
        "filename": "pystlouisfed-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "519bd8c22167e355bef874a8f477ae47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 37454,
        "upload_time": "2022-01-22T20:50:55",
        "upload_time_iso_8601": "2022-01-22T20:50:55.206758Z",
        "url": "https://files.pythonhosted.org/packages/e0/19/2a5551d2e9ac2ab479ddcce4e875917a0d62e8b8eaa5af2149a4eb63eead/pystlouisfed-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ec4b89c0c98bf0e3b4dbffcaee0affb1d700732d8bfce06ac413df0dd3d3dfa",
          "md5": "2fd5de699cdb0d3a7b18ee6e022f7b4e",
          "sha256": "aea8aa90082e2270e436e628e6a85168d14b3246d46a6f4990b6175555128e29"
        },
        "downloads": -1,
        "filename": "pystlouisfed-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fd5de699cdb0d3a7b18ee6e022f7b4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 34087,
        "upload_time": "2022-01-25T12:37:45",
        "upload_time_iso_8601": "2022-01-25T12:37:45.881478Z",
        "url": "https://files.pythonhosted.org/packages/7e/c4/b89c0c98bf0e3b4dbffcaee0affb1d700732d8bfce06ac413df0dd3d3dfa/pystlouisfed-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b8a211790dc40f8ca4b9d8507e9c4d3e5a0b8970277826be621f5c6b58b32b3",
          "md5": "30f7097b4d6fdd42514c951812fbff11",
          "sha256": "e07b2d724f9685b05338964b0d407b68186edcd7a9a1600c92dbb2b9dfc27e21"
        },
        "downloads": -1,
        "filename": "pystlouisfed-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "30f7097b4d6fdd42514c951812fbff11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 37585,
        "upload_time": "2022-01-25T12:37:47",
        "upload_time_iso_8601": "2022-01-25T12:37:47.378009Z",
        "url": "https://files.pythonhosted.org/packages/6b/8a/211790dc40f8ca4b9d8507e9c4d3e5a0b8970277826be621f5c6b58b32b3/pystlouisfed-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa9e141f292415ab0837b1e65ee080ef6e179147d78e8b74fa3dc819cb22ee24",
          "md5": "09369f4abb954763a27386124449a8c0",
          "sha256": "34dbdf67433da1da2660d9a9980da33581558f80a4a76d49e4fea7553cdf351c"
        },
        "downloads": -1,
        "filename": "pystlouisfed-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09369f4abb954763a27386124449a8c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 35100,
        "upload_time": "2022-02-07T15:39:20",
        "upload_time_iso_8601": "2022-02-07T15:39:20.857864Z",
        "url": "https://files.pythonhosted.org/packages/fa/9e/141f292415ab0837b1e65ee080ef6e179147d78e8b74fa3dc819cb22ee24/pystlouisfed-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e8908b9eced18da6c08a56e25d011fcac554a709d8218016f0773a6d24863e4",
          "md5": "7e7790a50141f472f0b3cdf6b122b1f6",
          "sha256": "1b7fb79c78d638be3bf2450b1f25943739ee169ece7ff26ceccfdc6782a0dd34"
        },
        "downloads": -1,
        "filename": "pystlouisfed-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e7790a50141f472f0b3cdf6b122b1f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 39363,
        "upload_time": "2022-02-07T15:39:22",
        "upload_time_iso_8601": "2022-02-07T15:39:22.222151Z",
        "url": "https://files.pythonhosted.org/packages/6e/89/08b9eced18da6c08a56e25d011fcac554a709d8218016f0773a6d24863e4/pystlouisfed-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e28562475a9e86ca6f14e4ab29074b0d31af7d8b71747aec54242b81e42add0",
          "md5": "341dd8c72fd6d3db41080c61c9cde422",
          "sha256": "2555b4f4309e3c5f54c5502fa3a2ac0fa2b303df98a061526e361e26c25aeb56"
        },
        "downloads": -1,
        "filename": "pystlouisfed-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "341dd8c72fd6d3db41080c61c9cde422",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 35506,
        "upload_time": "2022-02-09T13:01:54",
        "upload_time_iso_8601": "2022-02-09T13:01:54.625870Z",
        "url": "https://files.pythonhosted.org/packages/9e/28/562475a9e86ca6f14e4ab29074b0d31af7d8b71747aec54242b81e42add0/pystlouisfed-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7aad3498d666d99a3640f9505405644bb1c8e5b83c3e922971340f93dd35a17c",
          "md5": "ffda852c5f32b6d6067f2f0a14d7bdd0",
          "sha256": "7b92138ad7b18e73fe8fbf5614a8cf1ed3cb99c991cb483e5a1347174d5539de"
        },
        "downloads": -1,
        "filename": "pystlouisfed-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ffda852c5f32b6d6067f2f0a14d7bdd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 39762,
        "upload_time": "2022-02-09T13:01:56",
        "upload_time_iso_8601": "2022-02-09T13:01:56.298357Z",
        "url": "https://files.pythonhosted.org/packages/7a/ad/3498d666d99a3640f9505405644bb1c8e5b83c3e922971340f93dd35a17c/pystlouisfed-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e28562475a9e86ca6f14e4ab29074b0d31af7d8b71747aec54242b81e42add0",
        "md5": "341dd8c72fd6d3db41080c61c9cde422",
        "sha256": "2555b4f4309e3c5f54c5502fa3a2ac0fa2b303df98a061526e361e26c25aeb56"
      },
      "downloads": -1,
      "filename": "pystlouisfed-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "341dd8c72fd6d3db41080c61c9cde422",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 35506,
      "upload_time": "2022-02-09T13:01:54",
      "upload_time_iso_8601": "2022-02-09T13:01:54.625870Z",
      "url": "https://files.pythonhosted.org/packages/9e/28/562475a9e86ca6f14e4ab29074b0d31af7d8b71747aec54242b81e42add0/pystlouisfed-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7aad3498d666d99a3640f9505405644bb1c8e5b83c3e922971340f93dd35a17c",
        "md5": "ffda852c5f32b6d6067f2f0a14d7bdd0",
        "sha256": "7b92138ad7b18e73fe8fbf5614a8cf1ed3cb99c991cb483e5a1347174d5539de"
      },
      "downloads": -1,
      "filename": "pystlouisfed-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ffda852c5f32b6d6067f2f0a14d7bdd0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 39762,
      "upload_time": "2022-02-09T13:01:56",
      "upload_time_iso_8601": "2022-02-09T13:01:56.298357Z",
      "url": "https://files.pythonhosted.org/packages/7a/ad/3498d666d99a3640f9505405644bb1c8e5b83c3e922971340f93dd35a17c/pystlouisfed-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}