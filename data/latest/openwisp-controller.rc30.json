{
  "info": {
    "author": "Federico Capoano",
    "author_email": "federico.capoano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: System :: Networking"
    ],
    "description": "openwisp-controller\n===================\n\n.. image:: https://github.com/openwisp/openwisp-controller/workflows/OpenWISP%20Controller%20CI%20Build/badge.svg?branch=master\n   :target: https://github.com/openwisp/openwisp-controller/actions?query=workflow%3A%22OpenWISP+Controller+CI+Build%22\n   :alt: CI build status\n\n.. image:: https://coveralls.io/repos/openwisp/openwisp-controller/badge.svg\n   :target: https://coveralls.io/r/openwisp/openwisp-controller\n   :alt: Test Coverage\n\n.. image:: https://img.shields.io/librariesio/release/github/openwisp/openwisp-controller\n  :target: https://libraries.io/github/openwisp/openwisp-controller#repository_dependencies\n  :alt: Dependency monitoring\n\n.. image:: https://img.shields.io/gitter/room/nwjs/nw.js.svg\n   :target: https://gitter.im/openwisp/general\n   :alt: Chat\n\n.. image:: https://badge.fury.io/py/openwisp-controller.svg\n   :target: http://badge.fury.io/py/openwisp-controller\n   :alt: Pypi Version\n\n.. image:: https://pepy.tech/badge/openwisp-controller\n   :target: https://pepy.tech/project/openwisp-controller\n   :alt: Downloads\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://pypi.org/project/black/\n   :alt: code style: black\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/controller_demo.gif\n   :target: https://github.com/openwisp/openwisp-controller/tree/docs/docs/controller_demo.gif\n   :alt: Feature Highlights\n\n------------\n\nOpenWISP Controller is a configuration manager that allows to automate several\nnetworking tasks like adoption, provisioning, management VPN configuration,\nX509 certificates automatic generation, revocation of x509 certificates and\na lot more features.\n\nOpenWISP is not only an application designed for end users, but can also be\nused as a framework on which custom network automation solutions can be built\non top of its building blocks.\n\nOther popular building blocks that are part of the OpenWISP ecosystem are:\n\n- `openwisp-monitoring <https://github.com/openwisp/openwisp-monitoring>`_:\n  provides device status monitoring, collection of metrics, charts, alerts,\n  possibility to define custom checks\n- `openwisp-firmware-upgrader <https://github.com/openwisp/openwisp-firmware-upgrader>`_:\n  automated firmware upgrades (single devices or mass network upgrades)\n- `openwisp-radius <https://github.com/openwisp/openwisp-radius>`_:\n  based on FreeRADIUS, allows to implement network access authentication systems like\n  802.1x WPA2 Enterprise, captive portal authentication, Hotspot 2.0 (802.11u)\n- `openwisp-network-topology <https://github.com/openwisp/openwisp-network-topology>`_:\n  provides way to collect and visualize network topology data from\n  dynamic mesh routing daemons or other network software (eg: OpenVPN);\n  it can be used in conjunction with openwisp-monitoring to get a better idea\n  of the state of the network\n- `openwisp-ipam <https://github.com/openwisp/openwisp-ipam>`_:\n  allows to manage the assignment of IP addresses used in the network\n- `openwisp-notifications <https://github.com/openwisp/openwisp-notifications>`_:\n  allows users to be aware of important events happening in the network.\n\n**For a more complete overview of the OpenWISP modules and architecture**,\nsee the\n`OpenWISP Architecture Overview\n<https://openwisp.io/docs/general/architecture.html>`_.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp2-docs/master/assets/design/openwisp-logo-black.svg\n  :target: http://openwisp.org\n  :alt: OpenWISP\n\n**Want to help OpenWISP?** `Find out how to help us grow here\n<http://openwisp.io/docs/general/help-us.html>`_.\n\n------------\n\n.. contents:: **Table of Contents**:\n   :backlinks: none\n   :depth: 3\n\n------------\n\nProject Structure & main features\n----------------------------------\n\nOpenWISP Controller is a python package consisting of four django apps:\n\nConfig App\n~~~~~~~~~~\n\n* **configuration management** for embedded devices supporting different firmwares:\n    - `OpenWRT <http://openwrt.org>`_\n    - `OpenWISP Firmware <https://github.com/openwisp/OpenWISP-Firmware>`_\n    - support for additional firmware can be added by `specifying custom backends <#netjsonconfig-backends>`_\n* **configuration editor** based on `JSON-Schema editor <https://github.com/jdorn/json-editor>`_\n* **advanced edit mode**: edit `NetJSON  <http://netjson.org>`_ *DeviceConfiguration* objects for maximum flexibility\n* `configuration templates <https://openwisp.io/docs/user/templates.html>`_:\n  reduce repetition to the minimum, configure default and required templates\n* `configuration variables <#how-to-use-configuration-variables>`_:\n  reference ansible-like variables in the configuration and templates\n* **template tags**: tag templates to automate different types of auto-configurations (eg: mesh, WDS, 4G)\n* **device groups**: add `devices to dedicated groups <#device-groups>`_ to\n  ease management of group of devices\n* **simple HTTP resources**: allow devices to automatically download configuration updates\n* **VPN management**: `automatically provision VPN tunnels <#openwisp-controller-default-auto-cert>`_,\n  including cryptographic keys, IP addresses\n* `REST API <#rest-api-reference>`_\n\nPKI App\n~~~~~~~\n\nThe PKI app is based on `django-x509 <https://github.com/openwisp/django-x509>`_,\nit allows to create, import and view x509 CAs and certificates directly from\nthe administration dashboard, it also adds different endpoints to the\n`REST API <#rest-api-reference>`_.\n\nConnection App\n~~~~~~~~~~~~~~\n\nThis app enables the controller to instantiate connections to the devices\nin order perform `push operations <#how-to-configure-push-updates>`__:\n\n- Sending configuration updates.\n- `Executing shell commands <#sending-commands-to-devices>`_.\n- Perform `firmware upgrades via the additional firmware upgrade module <https://github.com/openwisp/openwisp-firmware-upgrader>`_.\n- `REST API <#rest-api-reference>`_\n\nThe default connection protocol implemented is SSH, but other protocol\nmechanism is extensible and custom protocols can be implemented as well.\n\nAccess via SSH key is recommended, the SSH key algorithms supported are:\n\n- RSA\n- Ed25519\n\nGeo App\n~~~~~~~\n\nThe geographic app is based on `django-loci <https://github.com/openwisp/django-loci>`_\nand allows to define the geographic coordinates of the devices,\nas well as their indoor coordinates on floorplan images.\n\nIt also adds different endpoints to the `REST API <#rest-api-reference>`_.\n\nSubnet Division App\n~~~~~~~~~~~~~~~~~~~\n\nThis app allows to automatically provision subnets and IP addresses which will be\navailable as `system defined configuration variables <#system-defined-variables>`_\nthat can be used in templates. The purpose of this app is to allow users to automatically\nprovision and configure specific\nsubnets and IP addresses to the devices without the need of manual intervention.\n\nRefer to `\"How to configure automatic provisioning of subnets and IPs\"\nsection of this documentation\n<#how-to-configure-automatic-provisioning-of-subnets-and-ips>`_\nto learn about features provided by this app.\n\nThis app is optional, if you don't need it you can avoid adding it to\n``settings.INSTALLED_APPS``.\n\nInstallation instructions\n-------------------------\n\nDeploy it in production\n~~~~~~~~~~~~~~~~~~~~~~~\n\nSee:\n\n- `ansible-openwisp2 <https://github.com/openwisp/ansible-openwisp2>`_\n- `docker-openwisp <https://github.com/openwisp/docker-openwisp>`_\n\nDependencies\n~~~~~~~~~~~~\n\n* Python >= 3.7\n* OpenSSL\n\nInstall stable version from pypi\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install openwisp-controller\n\nInstall development version\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall tarball:\n\n.. code-block:: shell\n\n    pip install https://github.com/openwisp/openwisp-controller/tarball/master\n\nAlternatively you can install via pip using git:\n\n.. code-block:: shell\n\n    pip install -e git+git://github.com/openwisp/openwisp-controller#egg=openwisp_controller\n\nIf you want to contribute, follow the instructions in\n`Installing for development <#installing-for-development>`_.\n\nInstalling for development\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall the system dependencies:\n\n.. code-block:: shell\n\n    sudo apt update\n    sudo apt install -y sqlite3 libsqlite3-dev openssl libssl-dev\n    sudo apt install -y gdal-bin libproj-dev libgeos-dev libspatialite-dev libsqlite3-mod-spatialite\n    sudo apt install -y chromium\n\nFork and clone the forked repository:\n\n.. code-block:: shell\n\n    git clone git://github.com/<your_fork>/openwisp-controller\n\nNavigate into the cloned repository:\n\n.. code-block:: shell\n\n    cd openwisp-controller/\n\nLaunch Redis:\n\n.. code-block:: shell\n\n    docker-compose up -d redis\n\nSetup and activate a virtual-environment. (we'll be using  `virtualenv <https://pypi.org/project/virtualenv/>`_)\n\n.. code-block:: shell\n\n    python -m virtualenv env\n    source env/bin/activate\n\nMake sure that you are using pip version 20.2.4 before moving to the next step:\n\n.. code-block:: shell\n\n    pip install -U pip wheel setuptools\n\nInstall development dependencies:\n\n.. code-block:: shell\n\n    pip install -e .\n    pip install -r requirements-test.txt\n    npm install -g jshint stylelint\n\nInstall WebDriver for Chromium for your browser version from `<https://chromedriver.chromium.org/home>`_\nand Extract ``chromedriver`` to one of directories from your ``$PATH`` (example: ``~/.local/bin/``).\n\nCreate database:\n\n.. code-block:: shell\n\n    cd tests/\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\nLaunch celery worker (for background jobs):\n\n.. code-block:: shell\n\n    celery -A openwisp2 worker -l info\n\nLaunch development server:\n\n.. code-block:: shell\n\n    ./manage.py runserver 0.0.0.0:8000\n\nYou can access the admin interface at http://127.0.0.1:8000/admin/.\n\nRun tests with:\n\n.. code-block:: shell\n\n    ./runtests.py --parallel\n\nRun quality assurance tests with:\n\n.. code-block:: shell\n\n    ./run-qa-checks\n\nInstall and run on docker\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNOTE: This Docker image is for development purposes only.\nFor the official OpenWISP Docker images, see: `docker-openwisp\n<https://github.com/openwisp/docker-openwisp>`_.\n\nBuild from the Dockerfile:\n\n.. code-block:: shell\n\n    docker-compose build\n\nRun the docker container:\n\n.. code-block:: shell\n\n    docker-compose up\n\nTroubleshooting steps for common installation issues\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou may encounter some issues while installing GeoDjango.\n\nUnable to load SpatiaLite library extension?\n############################################\n\nIf you are getting below exception::\n\n   django.core.exceptions.ImproperlyConfigured: Unable to load the SpatiaLite library extension\n\nthen, You need to specify ``SPATIALITE_LIBRARY_PATH`` in your ``settings.py`` as explained in\n`django documentation regarding how to install and configure spatialte\n<https://docs.djangoproject.com/en/2.1/ref/contrib/gis/install/spatialite/>`_.\n\nHaving Issues with other geospatial libraries?\n##############################################\n\nPlease refer\n`troubleshooting issues related to geospatial libraries\n<https://docs.djangoproject.com/en/2.1/ref/contrib/gis/install/#library-environment-settings/>`_.\n\nSetup (integrate in an existing django project)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_controller`` applications to ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...\n        # openwisp2 modules\n        'openwisp_controller.config',\n        'openwisp_controller.pki',\n        'openwisp_controller.geo',\n        'openwisp_controller.connection',\n        'openwisp_controller.subnet_division', # Optional\n        'openwisp_controller.notifications',\n        'openwisp_users',\n        'openwisp_notifications',\n        'openwisp_ipam',\n        # openwisp2 admin theme\n        # (must be loaded here)\n        'openwisp_utils.admin_theme',\n        'django.contrib.admin',\n        'django.forms',\n        ...\n    ]\n    EXTENDED_APPS = ('django_x509', 'django_loci')\n\n**Note**: The order of applications in ``INSTALLED_APPS`` should be maintained,\notherwise it might not work properly.\n\nOther settings needed in ``settings.py``:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = [\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        'openwisp_utils.staticfiles.DependencyFinder',\n    ]\n\n    ASGI_APPLICATION = 'openwisp_controller.geo.channels.routing.channel_routing'\n    CHANNEL_LAYERS = {\n        # in production you should use another channel layer backend\n        'default': {'BACKEND': 'channels.layers.InMemoryChannelLayer'},\n    }\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [],\n            'OPTIONS': {\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                    'openwisp_utils.loaders.DependencyLoader',\n                ],\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                    'openwisp_utils.admin_theme.context_processor.menu_items',\n                    'openwisp_notifications.context_processors.notification_api_settings',\n                ],\n            },\n        }\n    ]\n\n    FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'\n\nAdd the URLs to your main ``urls.py``:\n\n.. code-block:: python\n\n    urlpatterns = [\n        # ... other urls in your project ...\n        # openwisp-controller urls\n        url(r'^admin/', admin.site.urls),\n        url(r'', include('openwisp_controller.urls')),\n    ]\n\nConfigure caching (you may use a different cache storage if you want):\n\n.. code-block:: python\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_redis.cache.RedisCache',\n            'LOCATION': 'redis://localhost/0',\n            'OPTIONS': {\n                'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n            }\n        }\n    }\n\n    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n    SESSION_CACHE_ALIAS = 'default'\n\nConfigure celery (you may use a different broker if you want):\n\n.. code-block:: python\n\n    # here we show how to configure celery with redis but you can\n    # use other brokers if you want, consult the celery docs\n    CELERY_BROKER_URL = 'redis://localhost/1'\n\n    INSTALLED_APPS.append('djcelery_email')\n    EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'\n\nIf you decide to use redis (as shown in these examples),\ninstall the required python packages::\n\n    pip install redis django-redis\n\nThen run:\n\n.. code-block:: shell\n\n    ./manage.py migrate\n\nUsage reference\n---------------\n\nDefault Templates\n~~~~~~~~~~~~~~~~~\n\nWhen templates are flagged as default, they will be automatically assigned to new devices.\n\nIf there are multiple default templates, these are assigned to the device in alphabetical\norder based on their names, for example, given the following default templates:\n\n- Access\n- Interfaces\n- SSH Keys\n\nThey will be assigned to devices in exactly that order.\n\nIf for some technical reason (eg: one default template depends on the presence of another\ndefault template which must be assigned earlier) you need to change the ordering, you can\nsimply rename the templates by prefixing them with numbers, eg:\n\n- 1 Interfaces\n- 2. SSH Keys\n- 3. Access\n\nRequired Templates\n~~~~~~~~~~~~~~~~~~\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/required-templates.png\n  :alt: Required template example\n\nRequired templates are similar to `Default templates <#default-templates>`__\nbut cannot be unassigned from a device configuration, they can only be overridden.\n\nThey will be always assigned earlier than default templates,\nso they can be overridden if needed.\n\nIn the example above, the \"SSID\" template is flagged as \"(required)\"\nand its checkbox is always checked and disabled.\n\nHow to use configuration variables\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSometimes the configuration is not exactly equal on all the devices,\nsome parameters are unique to each device or need to be changed\nby the user.\n\nIn these cases it is possible to use configuration variables in conjunction\nwith templates, this feature is also known as *configuration context*, think of\nit like a dictionary which is passed to the function which renders the\nconfiguration, so that it can fill variables according to the passed context.\n\nThe different ways in which variables are defined are described below.\n\nPredefined device variables\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEach device gets the following attributes passed as configuration variables:\n\n* ``id``\n* ``key``\n* ``name``\n* ``mac_address``\n\nUser defined device variables\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn the device configuration section you can find a section named\n\"Configuration variables\" where it is possible to define the configuration\nvariables and their values, as shown in the example below:\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/device-context.png\n   :alt: context\n\nTemplate default values\n~~~~~~~~~~~~~~~~~~~~~~~\n\nIt's possible to specify the default values of variables defined in a template.\n\nThis allows to achieve 2 goals:\n\n1. pass schema validation without errors (otherwise it would not be possible\n   to save the template in the first place)\n2. provide good default values that are valid in most cases but can be\n   overridden in the device if needed\n\nThese default values will be overridden by the\n`User defined device variables <#user-defined-device-variables>`_.\n\nThe default values of variables can be manipulated from the section\n\"configuration variables\" in the edit template page:\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/template-default-values.png\n  :alt: default values\n\nGlobal variables\n~~~~~~~~~~~~~~~~\n\nVariables can also be defined globally using the\n`OPENWISP_CONTROLLER_CONTEXT <#openwisp-controller-context>`_ setting.\n\nSystem defined variables\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nPredefined device variables, global variables and other variables that\nare automatically managed by the system (eg: when using templates of\ntype VPN-client) are displayed in the admin UI as *System Defined Variables*\nin read-only mode.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/system-defined-variables.png\n   :alt: system defined variables\n\nExample usage of variables\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHere's a typical use case, the WiFi SSID and WiFi password.\nYou don't want to define this for every device, but you may want to\nallow operators to easily change the SSID or WiFi password for a\nspecific device without having to re-define the whole wifi interface\nto avoid duplicating information.\n\nThis would be the template:\n\n.. code-block:: json\n\n    {\n        \"interfaces\": [\n            {\n                \"type\": \"wireless\",\n                \"name\": \"wlan0\",\n                \"wireless\": {\n                    \"mode\": \"access_point\",\n                    \"radio\": \"radio0\",\n                    \"ssid\": \"{{wlan0_ssid}}\",\n                    \"encryption\": {\n                        \"protocol\": \"wpa2_personal\",\n                        \"key\": \"{{wlan0_password}}\",\n                        \"cipher\": \"auto\"\n                    }\n                }\n            }\n        ]\n    }\n\nThese would be the default values in the template:\n\n.. code-block:: json\n\n    {\n        \"wlan0_ssid\": \"SnakeOil PublicWiFi\",\n        \"wlan0_password\": \"Snakeoil_pwd!321654\"\n    }\n\nThe default values can then be overridden at\n`device level <#user-defined-device-variables>`_ if needed, eg:\n\n.. code-block:: json\n\n    {\n        \"wlan0_ssid\": \"Room 23 ACME Hotel\",\n        \"wlan0_password\": \"room_23pwd!321654\"\n    }\n\nHow to configure push updates\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFollow the procedure described below to enable secure SSH access from OpenWISP to your\ndevices, this is required to enable push updates (whenever the configuration is changed,\nOpenWISP will trigger the update in the background) and/or\n`firmware upgrades (via the additional module openwisp-firmware-upgrader)\n<https://github.com/openwisp/openwisp-firmware-upgrader>`_.\n\n**Note**: If you have installed OpenWISP with `openwisp2 Ansbile role <https://galaxy.ansible.com/openwisp/openwisp2>`_\nthen you can skip the following steps. The Ansible role automatically creates a\ndefault template to update ``authorized_keys`` on networking devices using the\ndefault access credentials.\n\n1. Generate SSH key\n###################\n\nFirst of all, we need to generate the SSH key which will be\nused by OpenWISP to access the devices, to do so, you can use the following command:\n\n.. code-block:: shell\n\n    echo './sshkey' | ssh-keygen -t rsa -b 4096 -C \"openwisp\"\n\nThis will create two files in the current directory, one called ``sshkey`` (the private key) and one called\n``sshkey.pub`` (the public key).\n\nStore the content of these files in a secure location.\n\n2. Save SSH private key in OpenWISP (access credentials)\n########################################################\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/add-ssh-credentials-private-key.png\n  :alt: add SSH private key as access credential in OpenWISP\n\nFrom the first page of OpenWISP click on \"Access credentials\", then click\non the **\"ADD ACCESS CREDENTIALS\"** button in the upper right corner\n(alternatively, go to the following URL: ``/admin/connection/credentials/add/``).\n\nSelect SSH as ``type``, enable the **Auto add** checkbox, then at the field\n\"Credentials type\" select \"SSH (private key)\", now type \"root\" in the ``username`` field,\nwhile in the ``key`` field you have to paste the contents of the private key just created.\n\nNow hit save.\n\nThe credentials just created will be automatically enabled for all the devices in the system\n(both existing devices and devices which will be added in the future).\n\n3. Add the public key to your devices\n#####################################\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/add-authorized-ssh-keys-template.png\n  :alt: Add authorized SSH public keys template to OpenWISP (OpenWRT)\n\nNow we need to instruct your devices to allow OpenWISP accessing via SSH,\nin order to do this we need to add the contents of the public key file created in step 1\n(``sshkey.pub``) in the file ``/etc/dropbear/authorized_keys`` on the devices, the\nrecommended way to do this is to create a configuration template in OpenWISP:\nfrom the first page of OpenWISP, click on \"Templates\", then and click on the\n**\"ADD TEMPLATE\"** button in the upper right corner (alternatively, go to the following URL:\n``/admin/config/template/add/``).\n\nCheck **enabled by default**, then scroll down the configuration section,\nclick on \"Configuration Menu\", scroll down, click on \"Files\" then close the menu\nby clicking again on \"Configuration Menu\". Now type ``/etc/dropbear/authorized_keys``\nin the ``path`` field of the file, then paste the contents of ``sshkey.pub`` in ``contents``.\n\nNow hit save.\n\n**There's a catch**: you will need to assign the template to any existing device.\n\n4. Test it\n##########\n\nOnce you have performed the 3 steps above, you can test it as follows:\n\n1. Ensure there's at least one device turned on and connected to OpenWISP, ensure\n   this device has the \"SSH Authorized Keys\" assigned to it.\n2. Ensure the celery worker of OpenWISP Controller is running (eg: ``ps aux | grep celery``)\n3. SSH into the device and wait (maximum 2 minutes) until ``/etc/dropbear/authorized_keys``\n   appears as specified in the template.\n4. While connected via SSH to the device run the following command in the console:\n   ``logread -f``, now try changing the device name in OpenWISP\n5. Shortly after you change the name in OpenWISP, you should see some output in the\n   SSH console indicating another SSH access and the configuration update being performed.\n\nSending Commands to Devices\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, there are three options in the **Send Command** dropdown:\n\n1. Reboot\n2. Change Password\n3. Custom Command\n\nWhile the first two options are self-explanatory, the **custom command** option\nallows you to execute any command on the device as shown in the example below.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/commands_demo.gif\n   :target: https://github.com/openwisp/openwisp-controller/tree/docs/docs/commands_demo.gif\n   :alt: Executing commands on device example\n\n**Note**: in order for this feature to work, a device needs to have at least\none **Access Credential** (see `How to configure push updates <#how-to-configure-push-updates>`__).\n\nThe **Send Command** button will be hidden until the device\nhas at least one **Access Credential**.\n\nIf you need to allow your users to quickly send specific commands that are used often in your\nnetwork regardless of your users' knowledge of Linux shell commands, you can add new commands\nby following instructions in the `\"How to define new options in the commands menu\"\n<#how-to-define-new-options-in-the-commands-menu>`_ section below.\n\nIf you are an advanced user and want to register commands programatically, then refer to\n`\"Register / Unregistering commands\" <#registering--unregistering-commands>`_ section.\n\nHow to define new options in the commands menu\n##############################################\n\nLet's explore to define new custom commands\nto help users perform additional management actions\nwithout having to be Linux/Unix experts.\n\nWe can do so by using the ``OPENWISP_CONTROLLER_USER_COMMANDS`` django setting.\n\nThe following example defines a simple command that can ``ping`` an input\n``destination_address`` through a network interface, ``interface_name``.\n\n.. code-block:: python\n\n    # In yourproject/settings.py\n\n    def ping_command_callable(destination_address, interface_name=None):\n        command = f'ping -c 4 {destination_address}'\n        if interface_name:\n            command += f' -I {interface_name}'\n        return command\n\n    OPENWISP_CONTROLLER_USER_COMMANDS = [\n        (\n            'ping',\n            {\n                'label': 'Ping',\n                'schema': {\n                    'title': 'Ping',\n                    'type': 'object',\n                    'required': ['destination_address'],\n                    'properties': {\n                        'destination_address': {\n                            'type': 'string',\n                            'title': 'Destination Address',\n                        },\n                        'interface_name': {\n                            'type': 'string',\n                            'title': 'Interface Name',\n                        },\n                    },\n                    'message': 'Destination Address cannot be empty',\n                    'additionalProperties': False,\n                },\n                'callable': ping_command_callable,\n            }\n        )\n    ]\n\nThe above code will add the \"Ping\" command in the user interface as show\nin the GIF below:\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/ping_command_example.gif\n   :target: https://github.com/openwisp/openwisp-controller/tree/docs/docs/ping_command_example.gif\n   :alt: Adding a \"ping\" command\n\nThe ``OPENWISP_CONTROLLER_USER_COMMANDS`` setting takes a ``list`` of ``tuple``\neach containing two elements. The first element of the tuple should contain an\nidentifier for the command and the second element should contain a ``dict``\ndefining configuration of the command.\n\nCommand Configuration\n^^^^^^^^^^^^^^^^^^^^^\n\nThe ``dict`` defining configuration for command should contain following keys:\n\n1. ``label``\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nA ``str`` defining label for the command used internally by Django.\n\n2. ``schema``\n\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nA ``dict`` defining `JSONSchema <https://json-schema.org/>`_ for inputs of command.\nYou can specify the inputs for your command, add rules for performing validation\nand make inputs required or optional.\n\nHere is a detailed explanation of the schema used in above example:\n\n.. code-block:: python\n\n    {\n        # Name of the command displayed in \"Send Command\" widget\n        'title': 'Ping',\n        # Use type \"object\" if the command needs to accept inputs\n        # Use type \"null\" if the command does not accepts any input\n        'type': 'object',\n        # Specify list of inputs that are required\n        'required': ['destination_address'],\n        # Define the inputs for the commands along with their properties\n        'properties': {\n            'destination_address': {\n                # type of the input value\n                'type': 'string',\n                # label used for displaying this input field\n                'title': 'Destination Address',\n            },\n            'interface_name': {\n                'type': 'string',\n                'title': 'Interface Name',\n            },\n        },\n        # Error message to be shown if validation fails\n        'message': 'Destination Address cannot be empty'),\n        # Whether specifying addtionaly inputs is allowed from the input form\n        'additionalProperties': False,\n    }\n\nThis example uses only handful of properties available in JSONSchema. You can\nexperiment with other properties of JSONSchema for schema of your command.\n\n3. ``callable``\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nA ``callable`` or ``str`` defining dotted path to a callable. It should return\nthe command (``str``) to be executed on the device. Inputs of the command are\npassed as arguments to this callable.\n\nThe example above includes a callable(``ping_command_callable``) for\n``ping`` command.\n\nRegistering / Unregistering Commands\n####################################\n\nOpenWISP Controller provides registering and unregistering commands\nthrough utility functions ``openwisp_controller.connection.commands.register_command``\nand ``openwisp_notifications.types.unregister_notification_type``.\nYou can use these functions to register or unregister commands\nfrom your code.\n\n**Note**: These functions are to be used as an alternative to the\n`\"OPENWISP_CONTROLLER_USER_COMMANDS\" <#openwisp-controller-user-commands>`_\nwhen `developing custom modules based on openwisp-controller\n<#extending-openwisp-controller>`_ or when developing custom third party\napps.\n\n``register_command``\n^^^^^^^^^^^^^^^^^^^^\n\n+--------------------+------------------------------------------------------------------+\n| Parameter          | Description                                                      |\n+--------------------+------------------------------------------------------------------+\n| ``command_name``   | A ``str`` defining identifier for the command.                   |\n+--------------------+------------------------------------------------------------------+\n| ``command_config`` | A ``dict`` defining configuration of the command                 |\n|                    | as shown in `\"Command Configuration\" <#command-configuration>`_. |\n+--------------------+------------------------------------------------------------------+\n\n**Note:** It will raise ``ImproperlyConfigured`` exception if a command is already\nregistered with the same name.\n\n``unregister_command``\n^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------------+-----------------------------------------+\n| Parameter          | Description                             |\n+--------------------+-----------------------------------------+\n| ``command_name``   | A ``str`` defining name of the command. |\n+--------------------+-----------------------------------------+\n\n**Note:** It will raise ``ImproperlyConfigured`` exception if such command does not exists.\n\nDevice Groups\n~~~~~~~~~~~~~\n\nDevice Groups provide an easy way to organize devices of a particular organization.\nDevice Groups provide the following features:\n\n- Group similar devices by having dedicated groups for access points, routers, etc.\n- Store additional information regarding a group in the structured metadata field.\n- Customize structure and validation of metadata field of DeviceGroup to standardize\n  information across all groups using `\"OPENWISP_CONTROLLER_DEVICE_GROUP_SCHEMA\" <#openwisp-controller-device-group-schema>`_\n  setting.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/device-groups.png\n  :alt: Device Group example\n\nHow to setup WireGuard tunnels\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFollow the procedure described below to setup WireGuard tunnels on your devices.\n\n**Note:** This example uses **Shared systemwide (no organization)** option as\nthe organization for VPN server and VPN client template. You can use any\norganization as long as VPN server, VPN client template and Device has same\norganization.\n\n1. Create VPN server configuration for WireGuard\n################################################\n\n1. Visit ``/admin/config/vpn/add/`` to add a new VPN server.\n2. We will set **Name** of this VPN server ``Wireguard`` and **Host** as\n   ``wireguard-server.mydomain.com`` (update this to point to your\n   WireGuard VPN server).\n3. Select ``WireGuard`` from the dropdown as **VPN Backend**.\n4. When using WireGuard, OpenWISP takes care of managing IP addresses\n   (assigning an IP address to each VPN peer). You can create a new subnet or\n   select an existing one from the dropdown menu. You can also assign an\n   **Internal IP** to the WireGuard Server or leave it empty for OpenWISP to\n   configure. This IP address will be used by the WireGuard interface on\n   server.\n5. We have set the **Webhook Endpoint** as ``https://wireguard-server.mydomain.com:8081/trigger-update``\n   for this example. You will need to update this according to you VPN upgrader\n   endpoint. Set **Webhook AuthToken** to any strong passphrase, this will be\n   used to ensure that configuration upgrades are requested from trusted\n   sources.\n\n   **Note**: If you are following this tutorial for also setting up WireGuard\n   VPN server, just substitute ``wireguard-server.mydomain.com`` with hostname\n   of your VPN server and follow the steps in next section.\n\n6. Under the configuration section, set the name of WireGuard tunnel 1 interface.\n   We have used ``wg0`` in this example.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-tutorial/vpn-server-1.png\n   :alt: WireGuard VPN server configuration example 1\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-tutorial/vpn-server-2.png\n   :alt: WireGuard VPN server configuration example 2\n\n7. After clicking on **Save and continue editing**, you will see that OpenWISP\n   has automatically created public and private key for WireGuard server in\n   **System Defined Variables** along with internal IP address information.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-tutorial/vpn-server-3.png\n   :alt: WireGuard VPN server configuration example 3\n\n2. Deploy Wireguard VPN Server\n##############################\n\nIf you haven't already setup WireGuard on your VPN server, this will be a good\ntime do so. We recommend using the `ansible-wireguard-openwisp <https://github.com/openwisp/ansible-wireguard-openwisp>`_\nrole for installing WireGuard since it also installs scripts that allows\nOpenWISP to manage WireGuard VPN server.\n\nPay attention to the VPN server attributes used in your playbook. It should be same as\nVPN server configuration in OpenWISP.\n\n3. Create VPN client template for WireGuard VPN Server\n######################################################\n\n1. Visit ``/admin/config/template/add/`` to add a new template.\n2. Set ``Wireguard Client`` as **Name** (you can set whatever you want) and\n   select ``VPN-client`` as **type** from the dropdown list.\n3. The **Backend** field refers to the backend of the device this template can\n   be applied to. For this example, we will leave it to ``OpenWRT``.\n4. Select the correct VPN server from the dropdown for the **VPN** field. Here\n   it is ``Wireguard``.\n5. Ensure that **Automatic tunnel provisioning** is checked. This will make\n   OpenWISP to automatically generate public and private keys and provision IP\n   address for each WireGuard VPN client.\n6. After clicking on **Save and continue editing** button, you will see details\n   of *Wireguard* VPN server in **System Defined Variables**. The template\n   configuration will be automatically generated which you can tweak\n   accordingly. We will use the automatically generated VPN client configuration\n   for this example.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-tutorial/template.png\n    :alt: WireGuard VPN client template example\n\n4. Apply Wireguard VPN template to devices\n##########################################\n\n**Note**: This step assumes that you already have a device registered on\nOpenWISP. Register or create a device before proceeding.\n\n1. Open the **Configuration** tab of the concerned device.\n2. Select the *WireGuard Client* template.\n3. Upon clicking on **Save and continue editing** button, you will see some\n   entries in **System Defined Variables**. It will contain internal IP address,\n   private and public key for the WireGuard client on the device along with\n   details of WireGuard VPN server.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-tutorial/device-configuration.png\n   :alt: WireGuard VPN device configuration example\n\n**Voila!** You have successfully configured OpenWISP to manage WireGuard\ntunnels for your devices.\n\nHow to setup VXLAN over WireGuard tunnels\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy following these steps, you will be able to setup layer 2 VXLAN tunnels\nencapsulated in WireGuard tunnels which work on layer 3.\n\n**Note:** This example uses **Shared systemwide (no organization)** option as\nthe organization for VPN server and VPN client template. You can use any\norganization as long as VPN server, VPN client template and Device has same\norganization.\n\n1. Create VPN server configuration for VXLAN over WireGuard\n###########################################################\n\n1. Visit ``/admin/config/vpn/add/`` to add a new VPN server.\n2. We will set **Name** of this VPN server ``Wireguard VXLAN`` and **Host** as\n   ``wireguard-vxlan-server.mydomain.com`` (update this to point to your\n   WireGuard VXLAN VPN server).\n3. Select ``VXLAN over WireGuard`` from the dropdown as **VPN Backend**.\n4. When using VXLAN over WireGuard, OpenWISP takes care of managing IP addresses\n   (assigning an IP address to each VPN peer). You can create a new subnet or\n   select an existing one from the dropdown menu. You can also assign an\n   **Internal IP** to the WireGuard Server or leave it empty for OpenWISP to\n   configure. This IP address will be used by the WireGuard interface on\n   server.\n5. We have set the **Webhook Endpoint** as ``https://wireguard-vxlan-server.mydomain.com:8081/trigger-update``\n   for this example. You will need to update this according to you VPN upgrader\n   endpoint. Set **Webhook AuthToken** to any strong passphrase, this will be\n   used to ensure that configuration upgrades are requested from trusted\n   sources.\n\n   **Note**: If you are following this tutorial for also setting up WireGuard\n   VPN server, just substitute ``wireguard-server.mydomain.com`` with hostname\n   of your VPN server and follow the steps in next section.\n\n6. Under the configuration section, set the name of WireGuard tunnel 1 interface.\n   We have used ``wg0`` in this example.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-vxlan-tutorial/vpn-server-1.png\n   :alt: WireGuard VPN VXLAN server configuration example 1\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-vxlan-tutorial/vpn-server-2.png\n   :alt: WireGuard VPN VXLAN server configuration example 2\n\n7. After clicking on **Save and continue editing**, you will see that OpenWISP\n   has automatically created public and private key for WireGuard server in\n   **System Defined Variables** along with internal IP address information.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-vxlan-tutorial/vpn-server-3.png\n   :alt: WireGuard VXLAN VPN server configuration example 3\n\n2. Deploy Wireguard VXLAN VPN Server\n####################################\n\nIf you haven't already setup WireGuard on your VPN server, this will be a good\ntime do so. We recommend using the `ansible-wireguard-openwisp <https://github.com/openwisp/ansible-wireguard-openwisp>`_\nrole for installing WireGuard since it also installs scripts that allows\nOpenWISP to manage WireGuard VPN server along with VXLAN tunnels.\n\nPay attention to the VPN server attributes used in your playbook. It should be same as\nVPN server configuration in OpenWISP.\n\n3. Create VPN client template for WireGuard VXLAN VPN Server\n############################################################\n\n1. Visit ``/admin/config/template/add/`` to add a new template.\n2. Set ``Wireguard VXLAN Client`` as **Name** (you can set whatever you want) and\n   select ``VPN-client`` as **type** from the dropdown list.\n3. The **Backend** field refers to the backend of the device this template can\n   be applied to. For this example, we will leave it to ``OpenWRT``.\n4. Select the correct VPN server from the dropdown for the **VPN** field. Here\n   it is ``Wireguard VXLAN``.\n5. Ensure that **Automatic tunnel provisioning** is checked. This will make\n   OpenWISP to automatically generate public and private keys and provision IP\n   address for each WireGuard VPN client along with VXLAN Network Indentifier(VNI).\n6. After clicking on **Save and continue editing** button, you will see details\n   of *Wireguard VXLAN* VPN server in **System Defined Variables**. The template\n   configuration will be automatically generated which you can tweak\n   accordingly. We will use the automatically generated VPN client configuration\n   for this example.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-vxlan-tutorial/template.png\n    :alt: WireGuard VXLAN VPN client template example\n\n4. Apply Wireguard VXLAN VPN template to devices\n################################################\n\n**Note**: This step assumes that you already have a device registered on\nOpenWISP. Register or create a device before proceeding.\n\n1. Open the **Configuration** tab of the concerned device.\n2. Select the *WireGuard VXLAN Client* template.\n3. Upon clicking on **Save and continue editing** button, you will see some\n   entries in **System Defined Variables**. It will contain internal IP address,\n   private and public key for the WireGuard client on the device and details of\n   WireGuard VPN server along with VXLAN Network Identifier(VNI) of this device.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/wireguard-vxlan-tutorial/device-configuration.png\n   :alt: WireGuard VXLAN VPN device configuration example\n\n**Voila!** You have successfully configured OpenWISP to manage VXLAN over\nWireGuard tunnels for your devices.\n\nHow to configure automatic provisioning of subnets and IPs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following steps will help you configure automatic provisioning of subnets and IPs\nfor devices.\n\n1. Create a Subnet and a Subnet Division Rule\n#############################################\n\nCreate a master subnet under which automatically generated subnets will be provisioned.\n\n**Note**: Choose the size of the subnet appropriately considering your use case.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/subnet-division-rule/subnet.png\n  :alt: Creating a master subnet example\n\nOn the same page, add a **subnet division rule** that will be used to provision subnets\nunder the master subnet.\n\nThe type of subnet division rule controls when subnets and IP addresses will be provisioned\nfor a device. The subnet division rule types currently implemented are described below.\n\nDevice Subnet Division Rule\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis rule type is triggered whenever a device configuration (``config.Config`` model)\nis created for the organization specified in the rule.\n\nCreating a new rule of \"Device\" type will also provision subnets and\nIP addresses for existing devices of the organization automatically.\n\n**Note**: a device without a configuration will not trigger this rule.\n\nVPN Subnet Division Rule\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis rule is triggered when a VPN client template is assigned to a device,\nprovided the VPN server to which the VPN client template relates to has\nthe same subnet for which the subnet division rule is created.\n\n**Note:** This rule will only work for **WireGuard** and **VXLAN over WireGuard**\nVPN servers.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/subnet-division-rule/subnet-division-rule.png\n  :alt: Creating a subnet division rule example\n\nIn this example, **VPN subnet division rule** is used.\n\n2. Create a VPN Server\n######################\n\nNow create a VPN Server and choose the previously created **master subnet** as the subnet for\nthis VPN Server.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/subnet-division-rule/vpn-server.png\n  :alt: Creating a VPN Server example\n\n3. Create a VPN Client Template\n###############################\n\nCreate a template, setting the **Type** field to **VPN Client** and **VPN** field to use the\npreviously created VPN Server.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/subnet-division-rule/vpn-client.png\n  :alt: Creating a VPN Client template example\n\n**Note**: You can also check the **Enable by default** field if you want to automatically\napply this template to devices that will register in future.\n\n4. Apply VPN Client Template to Devices\n#######################################\n\nWith everything in place, you can now apply the VPN Client Template to devices.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/subnet-division-rule/apply-template-to-device.png\n  :alt: Adding template to device example\n\nAfter saving the device, you should see all provisioned Subnets and IPs for this device\nunder `System Defined Variables <#system-defined-variables>`_.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/subnet-division-rule/system-defined-variables.png\n  :alt: Provisioned Subnets and IPs available as System Defined Variables example\n\nVoila! You can now use these variables in configuration of the device. Refer to `How to use configuration variables <#how-to-use-configuration-variables>`_\nsection of this documentation to learn how to use configuration variables.\n\nImportant notes for using Subnet Division\n#########################################\n\n- In the above example Subnet, VPN Server, and VPN Client Template belonged to the **default** organization.\n  You can use **Systemwide Shared** Subnet, VPN Server, or VPN Client Template too, but\n  Subnet Division Rule will be always related to an organization. The Subnet Division Rule will only be\n  triggered when such VPN Client Template will be applied to a Device having the same organization as Subnet Division Rule.\n\n- You can also use the configuration variables for provisioned subnets and IPs in the Template.\n  Each variable will be resolved differently for different devices. E.g. ``OW_subnet1_ip1`` will resolve to\n  ``10.0.0.1`` for one device and ``10.0.0.55`` for another. Every device gets its own set of subnets and IPs.\n  But don't forget to provide the default fall back values in the \"default values\" template field\n  (used mainly for validation).\n\n- The Subnet Division Rule will automatically create a reserved subnet, this subnet can be used\n  to provision any IP addresses that have to be created manually. The rest of the master subnet\n  address space **must not** be interfered with or the automation implemented in this module\n  will not work.\n\n- The above example used `VPN subnet division rule <#vpn-subnet-division-rule>`_. Similarly,\n  `device subnet division rule <#device-subnet-division-rule>`_ can be used, which only requires\n  `creating a subnet and a subnet division rule <#1-create-a-subnet-and-a-subnet-division-rule>`_.\n\nLimitations of Subnet Division\n##############################\n\nIn the current implementation, it is not possible to change \"Size\", \"Number of Subnets\" and\n\"Number of IPs\" fields of an existing subnet division rule due to following reasons:\n\nSize\n^^^^\n\nAllowing to change size of provisioned subnets of an existing subnet division rule\nwill require rebuilding of Subnets and IP addresses which has possibility of breaking\nexisting configurations.\n\nNumber of Subnets\n^^^^^^^^^^^^^^^^^\n\nAllowing to decrease number of subnets of an existing subnet division\nrule can create patches of unused subnets dispersed everywhere in the master subnet.\nAllowing to increase number of subnets will break the continuous allocation of subnets for\nevery device. It can also break configuration of devices.\n\nNumber of IPs\n^^^^^^^^^^^^^\n\nAllowing to decrease number of IPs of an existing subnet division rule\nwill lead to deletion of IP Addresses which can break configuration of devices being used.\nIt **is allowed** to increase number of IPs.\n\nIf you want to make changes to any of above fields, delete the existing rule and create a\nnew one. The automation will provision for all existing devices that meets the criteria\nfor provisioning. **WARNING**: It is possible that devices get different subnets and IPs\nfrom previous provisioning.\n\nDefault Alerts / Notifications\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+-----------------------+---------------------------------------------------------------------+\n| Notification Type     | Use                                                                 |\n+-----------------------+---------------------------------------------------------------------+\n| ``config_error``      | Fires when status of a device configuration changes to  ``error``.  |\n+-----------------------+---------------------------------------------------------------------+\n| ``device_registered`` | Fires when a new device is registered automatically on the network. |\n+-----------------------+---------------------------------------------------------------------+\n\nREST API Reference\n------------------\n\nLive documentation\n~~~~~~~~~~~~~~~~~~\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/live-docu-api.png\n\nA general live API documentation (following the OpenAPI specification) at ``/api/v1/docs/``.\n\nBrowsable web interface\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-controller/docs/docs/browsable-api-ui.png\n\nAdditionally, opening any of the endpoints `listed below <#list-of-endpoints>`_\ndirectly in the browser will show the `browsable API interface of Django-REST-Framework\n<https://www.django-rest-framework.org/topics/browsable-api/>`_,\nwhich makes it even easier to find out the details of each endpoint.\n\nAuthentication\n~~~~~~~~~~~~~~\n\nSee openwisp-users: `authenticating with the user token\n<https://github.com/openwisp/openwisp-users#authenticating-with-the-user-token>`_.\n\nWhen browsing the API via the `Live documentation <#live-documentation>`_\nor the `Browsable web page <#browsable-web-interface>`_, you can also use\nthe session authentication by logging in the django admin.\n\nPagination\n~~~~~~~~~~\n\nAll *list* endpoints support the ``page_size`` parameter that allows paginating\nthe results in conjunction with the ``page`` parameter.\n\n.. code-block:: text\n\n    GET /api/v1/controller/template/?page_size=10\n    GET /api/v1/controller/template/?page_size=10&page=2\n\nList of endpoints\n~~~~~~~~~~~~~~~~~\n\nSince the detailed explanation is contained in the `Live documentation <#live-documentation>`_\nand in the `Browsable web page <#browsable-web-interface>`_ of each point,\nhere we'll provide just a list of the available endpoints,\nfor further information please open the URL of the endpoint in your browser.\n\nList devices\n############\n\n.. code-block:: text\n\n    GET /api/v1/controller/device/\n\nCreate device\n#############\n\n.. code-block:: text\n\n    POST /api/v1/controller/device/\n\nGet device detail\n#################\n\n.. code-block:: text\n\n    GET /api/v1/controller/device/{id}/\n\nDownload device configuration\n#############################\n\n.. code-block:: text\n\n    GET /api/v1/controller/device/{id}/configuration/\n\nThe above endpoint triggers the download of a ``tar.gz`` file containing the generated configuration for that specific device.\n\nChange details of device\n########################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/device/{id}/\n\nPatch details of device\n#######################\n\n.. code-block:: text\n\n    PATCH /api/v1/controller/device/{id}/\n\n**Note**: To assign, unassign, and change the order of the assigned templates add,\nremove, and change the order of the ``{id}`` of the templates under the ``config`` field in the JSON response respectively.\nMoreover, you can also select and unselect templates in the HTML Form of the Browsable API.\n\nThe required template(s) from the organization(s) of the device will added automatically\nto the ``config`` and cannot be removed.\n\n**Example usage**: For assigning template(s) add the/their {id} to the config of a device,\n\n.. code-block:: shell\n\n    curl -X PATCH \\\n        http://127.0.0.1:8000/api/v1/controller/device/76b7d9cc-4ffd-4a43-b1b0-8f8befd1a7c0/ \\\n        -H 'authorization: Bearer dc8d497838d4914c9db9aad9b6ec66f6c36ff46b' \\\n        -H 'content-type: application/json' \\\n        -d '{\n                \"config\": {\n                    \"templates\": [\"4791fa4c-2cef-4f42-8bb4-c86018d71bd3\"]\n                }\n            }'\n\n**Example usage**: For removing assigned templates, simply remove the/their {id} from the config of a device,\n\n.. code-block:: shell\n\n    curl -X PATCH \\\n        http://127.0.0.1:8000/api/v1/controller/device/76b7d9cc-4ffd-4a43-b1b0-8f8befd1a7c0/ \\\n        -H 'authorization: Bearer dc8d497838d4914c9db9aad9b6ec66f6c36ff46b' \\\n        -H 'content-type: application/json' \\\n        -d '{\n                \"config\": {\n                    \"templates\": []\n                }\n            }'\n\n**Example usage**: For reordering the templates simply change their order from the config of a device,\n\n.. code-block:: shell\n\n    curl -X PATCH \\\n        http://127.0.0.1:8000/api/v1/controller/device/76b7d9cc-4ffd-4a43-b1b0-8f8befd1a7c0/ \\\n        -H 'authorization: Bearer dc8d497838d4914c9db9aad9b6ec66f6c36ff46b' \\\n        -H 'cache-control: no-cache' \\\n        -H 'content-type: application/json' \\\n        -H 'postman-token: b3f6a1cc-ff13-5eba-e460-8f394e485801' \\\n        -d '{\n                \"config\": {\n                    \"templates\": [\n                        \"c5bbc697-170e-44bc-8eb7-b944b55ee88f\",\n                        \"4791fa4c-2cef-4f42-8bb4-c86018d71bd3\"\n                    ]\n                }\n            }'\n\nDelete device\n#############\n\n.. code-block:: text\n\n    DELETE /api/v1/controller/device/{id}/\n\nList device connections\n#######################\n\n.. code-block:: text\n\n    GET /api/v1/controller/device/{id}/connection/\n\nCreate device connection\n########################\n\n.. code-block:: text\n\n    POST /api/v1/controller/device/{id}/connection/\n\nGet device connection detail\n############################\n\n.. code-block:: text\n\n    GET /api/v1/controller/device/{id}/connection/{id}/\n\nChange device connection detail\n###############################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/device/{id}/connection/{id}/\n\nPatch device connection detail\n##############################\n\n.. code-block:: text\n\n    PATCH /api/v1/controller/device/{id}/connection/{id}/\n\nDelete device connection\n########################\n\n.. code-block:: text\n\n    DELETE /api/v1/controller/device/{id}/connection/{id}/\n\nList credentials\n################\n\n.. code-block:: text\n\n    GET /api/v1/connection/credential/\n\nCreate credential\n#################\n\n.. code-block:: text\n\n    POST /api/v1/connection/credential/\n\nGet credential detail\n#####################\n\n.. code-block:: text\n\n    GET /api/v1/connection/credential/{id}/\n\nChange credential detail\n########################\n\n.. code-block:: text\n\n    PUT /api/v1/connection/credential/{id}/\n\nPatch credential detail\n#######################\n\n.. code-block:: text\n\n    PATCH /api/v1/connection/credential/{id}/\n\nDelete credential\n#################\n\n.. code-block:: text\n\n    DELETE /api/v1/connection/credential/{id}/\n\nList commands of a device\n#########################\n\n.. code-block:: text\n\n    GET /api/v1/controller/device/{id}/command/\n\nExecute a command a device\n##########################\n\n.. code-block:: text\n\n    POST /api/v1/controller/device/{id}/command/\n\nGet command details\n###################\n\n.. code-block:: text\n\n    GET /api/v1/controller/device/{device_id}/command/{command_id}/\n\nList device groups\n##################\n\n.. code-block:: text\n\n    GET /api/v1/controller/group/\n\nCreate device group\n###################\n\n.. code-block:: text\n\n    POST /api/v1/controller/group/\n\nGet device group detail\n#######################\n\n.. code-block:: text\n\n    GET /api/v1/controller/group/{id}/\n\nGet device group from certificate common name\n#############################################\n\n.. code-block:: text\n\n    GET /api/v1/controller/cert/{common_name}/group/\n\nThis endpoint can be used to retrieve group information and metadata by the\ncommon name of a certificate used in a VPN client tunnel, this endpoint is\nused in layer 2 tunneling solutions for firewall/captive portals.\n\nIt is also possible to filter device group by providing organization slug\nof certificate's organization as show in the example below:\n\n.. code-block:: text\n\n    GET /api/v1/controller/cert/{common_name}/group/?org={org1_slug},{org2_slug}\n\nGet device location\n###################\n\n.. code-block:: text\n\n\n    GET /api/v1/controller/device/{id}/location/\n\n\nCreate device location\n######################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/device/{id}/location/\n\nYou can create ``DeviceLocation`` object by using primary\nkeys of existing ``Location`` and ``FloorPlan`` objects as shown in\nthe example below.\n\n.. code-block:: json\n\n    {\n        \"location\": \"f0cb5762-3711-4791-95b6-c2f6656249fa\",\n        \"floorplan\": \"dfeb6724-aab4-4533-aeab-f7feb6648acd\",\n        \"indoor\": \"-36,264\"\n    }\n\n**Note:** The ``indoor`` field represents the coordinates of the\npoint placed on the image from the top left corner. E.g. if you\nplaced the pointer on the top left corner of the floorplan image,\nits indoor coordinates will be ``0,0``.\n\n.. code-block:: text\n\n    curl -X PUT \\\n        http://127.0.0.1:8000/api/v1/controller/device/8a85cc23-bad5-4c7e-b9f4-ffe298defb5c/location/ \\\n        -H 'authorization: Bearer dc8d497838d4914c9db9aad9b6ec66f6c36ff46b' \\\n        -H 'content-type: application/json' \\\n        -d '{\n            \"location\": \"f0cb5762-3711-4791-95b6-c2f6656249fa\",\n            \"floorplan\": \"dfeb6724-aab4-4533-aeab-f7feb6648acd\",\n            \"indoor\": \"-36,264\"\n            }'\n\nYou can also create related ``Location`` and ``FloorPlan`` objects for the\ndevice directly from this endpoint.\n\nThe following example demonstrates creating related location\nobject in a single request.\n\n.. code-block:: json\n\n    {\n        \"location\": {\n            \"name\": \"Via del Corso\",\n            \"address\": \"Via del Corso, Roma, Italia\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [12.512124, 41.898903]\n            },\n            \"type\": \"outdoor\",\n        }\n    }\n\n.. code-block:: text\n\n    curl -X PUT \\\n        http://127.0.0.1:8000/api/v1/controller/device/8a85cc23-bad5-4c7e-b9f4-ffe298defb5c/location/ \\\n        -H 'authorization: Bearer dc8d497838d4914c9db9aad9b6ec66f6c36ff46b' \\\n        -H 'content-type: application/json' \\\n        -d '{\n                \"location\": {\n                    \"name\": \"Via del Corso\",\n                    \"address\": \"Via del Corso, Roma, Italia\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [12.512124, 41.898903]\n                    },\n                    \"type\": \"outdoor\"\n                }\n            }'\n\n**Note:** You can also specify the ``geometry`` in **Well-known text (WKT)**\nformat, like following:\n\n.. code-block:: json\n\n    {\n        \"location\": {\n            \"name\": \"Via del Corso\",\n            \"address\": \"Via del Corso, Roma, Italia\",\n            \"geometry\": \"POINT (12.512124 41.898903)\",\n            \"type\": \"outdoor\",\n        }\n    }\n\nSimilarly, you can create ``Floorplan`` object with the same request.\nBut, note that a ``FloorPlan`` can be added to ``DeviceLocation`` only\nif the related ``Location`` object defines an indoor location. The example\nbelow demonstrates creating both ``Location`` and ``FloorPlan`` objects.\n\n.. code-block:: text\n\n    // This is not a valid JSON object. The JSON format is\n    // only used for showing available fields.\n    {\n        \"location.name\": \"Via del Corso\",\n        \"location.address\": \"Via del Corso, Roma, Italia\",\n        \"location.geometry.type\": \"Point\",\n        \"location.geometry.coordinates\": [12.512124, 41.898903]\n        \"location.type\": \"outdoor\",\n        \"floorplan.floor\": 1,\n        \"floorplan.image\": floorplan.png,\n    }\n\n.. code-block:: text\n\n    curl -X PUT \\\n        http://127.0.0.1:8000/api/v1/controller/device/8a85cc23-bad5-4c7e-b9f4-ffe298defb5c/location/ \\\n        -H 'authorization: Bearer dc8d497838d4914c9db9aad9b6ec66f6c36ff46b' \\\n        -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' \\\n        -F 'location.name=Via del Corso' \\\n        -F 'location.address=Via del Corso, Roma, Italia' \\\n        -F location.geometry.type=Point \\\n        -F 'location.geometry.coordinates=[12.512124, 41.898903]' \\\n        -F location.type=indoor \\\n        -F floorplan.floor=1 \\\n        -F 'floorplan.image=@floorplan.png'\n\n**Note:** The request in above example uses ``multipart content-type``\nfor uploading floorplan image.\n\nYou can also use an existing ``Location`` object and create a new\nfloorplan for that location using this endpoint.\n\n.. code-block:: text\n\n    // This is not a valid JSON object. The JSON format is\n    // only used for showing available fields.\n    {\n        \"location\": \"f0cb5762-3711-4791-95b6-c2f6656249fa\",\n        \"floorplan.floor\": 1,\n        \"floorplan.image\": floorplan.png\n    }\n\n.. code-block:: text\n\n    curl -X PUT \\\n        http://127.0.0.1:8000/api/v1/controller/device/8a85cc23-bad5-4c7e-b9f4-ffe298defb5c/location/ \\\n        -H 'authorization: Bearer dc8d497838d4914c9db9aad9b6ec66f6c36ff46b' \\\n        -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' \\\n        -F location=f0cb5762-3711-4791-95b6-c2f6656249fa \\\n        -F floorplan.floor=1 \\\n        -F 'floorplan.image=@floorplan.png'\n\nChange details of device location\n#################################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/device/{id}/location/\n\n**Note:** This endpoint can be used to update related ``Location``\nand ``Floorplan`` objects. Refer `examples of \"Create device location\"\nsection for information on payload format <#create-device-location>`_.\n\nDelete device location\n######################\n\n.. code-block:: text\n\n    DELETE /api/v1/controller/device/{id}/location/\n\nGet device coordinates\n######################\n\n.. code-block:: text\n\n    GET /api/v1/controller/device/{id}/coordinates/\n\n**Note:** This endpoint is intended to be used by devices.\n\nThis endpoint skips multi-tenancy and permission checks if the\ndevice ``key`` is passed as ``query_param`` because the system\nassumes that the device is updating it's position.\n\n.. code-block:: text\n\n    curl -X GET \\\n        'http://127.0.0.1:8000/api/v1/controller/device/8a85cc23-bad5-4c7e-b9f4-ffe298defb5c/coordinates/?key=10a0cb5a553c71099c0e4ef236435496'\n\nUpdate device coordinates\n#########################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/device/{id}/coordinates/\n\n**Note:** This endpoint is intended to be used by devices.\n\nThis endpoint skips multi-tenancy and permission checks if the\ndevice ``key`` is passed as ``query_param`` because the system\nassumes that the device is updating it's position.\n\n.. code-block:: json\n\n    {\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [12.512124, 41.898903]\n        },\n    }\n\n.. code-block:: text\n\n    curl -X PUT \\\n        'http://127.0.0.1:8000/api/v1/controller/device/8a85cc23-bad5-4c7e-b9f4-ffe298defb5c/coordinates/?key=10a0cb5a553c71099c0e4ef236435496' \\\n        -H 'content-type: application/json' \\\n        -d '{\n                \"type\": \"Feature\",\n                \"geometry\": {\n                    \"type\": \"Point\",\n                    \"coordinates\": [12.512124, 41.898903]\n                },\n            }'\n\nList locations\n##############\n\n.. code-block:: text\n\n    GET /api/v1/controller/location/\n\nYou can filter using ``organization_slug`` to get list locations that\nbelongs to an organization.\n\n.. code-block:: text\n\n    GET /api/v1/controller/location/?organization_slug=<organization_slug>\n\nCreate location\n###############\n\n.. code-block:: text\n\n    POST /api/v1/controller/location/\n\nIf you are creating an ``indoor`` location, you can use this endpoint\nto create floorplan for the location.\n\nThe following example demonstrates creating floorplan along with location\nin a single request.\n\n.. code-block:: text\n\n    {\n        \"name\": \"Via del Corso\",\n        \"address\": \"Via del Corso, Roma, Italia\",\n        \"geometry.type\": \"Point\",\n        \"geometry.location\": [12.512124, 41.898903],\n        \"type\": \"indoor\",\n        \"is_mobile\": \"false\",\n        \"floorplan.floor\": \"1\",\n        \"floorplan.image\": floorplan.png,\n        \"organization\": \"1f6c5666-1011-4f1d-bce9-fc6fcb4f3a05\"\n    }\n\n.. code-block:: text\n\n    curl -X POST \\\n        http://127.0.0.1:8000/api/v1/controller/location/ \\\n        -H 'authorization: Bearer dc8d497838d4914c9db9aad9b6ec66f6c36ff46b' \\\n        -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' \\\n        -F 'name=Via del Corso' \\\n        -F 'address=Via del Corso, Roma, Italia' \\\n        -F geometry.type=Point \\\n        -F 'geometry.coordinates=[12.512124, 41.898903]' \\\n        -F type=indoor \\\n        -F is_mobile=false \\\n        -F floorplan.floor=1 \\\n        -F 'floorplan.image=@floorplan.png' \\\n        -F organization=1f6c5666-1011-4f1d-bce9-fc6fcb4f3a05\n\n**Note:** You can also specify the ``geometry`` in **Well-known text (WKT)**\nformat, like following:\n\n.. code-block:: text\n\n    {\n        \"name\": \"Via del Corso\",\n        \"address\": \"Via del Corso, Roma, Italia\",\n        \"geometry\": \"POINT (12.512124 41.898903)\",\n        \"type\": \"indoor\",\n        \"is_mobile\": \"false\",\n        \"floorplan.floor\": \"1\",\n        \"floorplan.image\": floorplan.png,\n        \"organization\": \"1f6c5666-1011-4f1d-bce9-fc6fcb4f3a05\"\n    }\n\nGet location details\n####################\n\n.. code-block:: text\n\n    GET /api/v1/controller/location/{pk}/\n\nChange location details\n#######################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/location/{pk}/\n\n**Note**: Only the first floorplan data present can be\nedited or changed. Setting the ``type`` of location to\noutdoor will remove all the floorplans associated with it.\n\nRefer `examples of \"Create location\"\nsection for information on payload format <#create-location>`_.\n\nDelete location\n###############\n\n.. code-block:: text\n\n    DELETE /api/v1/controller/location/{pk}/\n\nList devices in a location\n##########################\n\n.. code-block:: text\n\n    GET /api/v1/controller/location/{id}/device/\n\nList locations with devices deployed (in GeoJSON format)\n########################################################\n\n**Note**: this endpoint will only list locations that have been assigned to a device.\n\n.. code-block:: text\n\n    GET /api/v1/controller/location/geojson/\n\nYou can filter using ``organization_slug`` to get list location of\ndevices from that organization.\n\n.. code-block:: text\n\n    GET /api/v1/controller/location/geojson/?organization_slug=<organization_slug>\n\nList floorplans\n###############\n\n.. code-block:: text\n\n    GET /api/v1/controller/floorplan/\n\nYou can filter using ``organization_slug`` to get list floorplans that\nbelongs to an organization.\n\n.. code-block:: text\n\n    GET /api/v1/controller/floorplan/?organization_slug=<organization_slug>\n\nCreate floorplan\n################\n\n.. code-block:: text\n\n    POST /api/v1/controller/floorplan/\n\nGet floorplan details\n#####################\n\n.. code-block:: text\n\n    GET /api/v1/controller/floorplan/{pk}/\n\nChange floorplan details\n########################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/floorplan/{pk}/\n\nDelete floorplan\n################\n\n.. code-block:: text\n\n    DELETE /api/v1/controller/floorplan/{pk}/\n\nList templates\n##############\n\n.. code-block:: text\n\n    GET /api/v1/controller/template/\n\nCreate template\n###############\n\n.. code-block:: text\n\n    POST /api/v1/controller/template/\n\nGet template detail\n###################\n\n.. code-block:: text\n\n    GET /api/v1/controller/template/{id}/\n\nDownload template configuration\n###############################\n\n.. code-block:: text\n\n    GET /api/v1/controller/template/{id}/configuration/\n\nThe above endpoint triggers the download of a ``tar.gz`` file\ncontaining the generated configuration for that specific template.\n\nChange details of template\n##########################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/template/{id}/\n\nPatch details of template\n#########################\n\n.. code-block:: text\n\n    PATCH /api/v1/controller/template/{id}/\n\nDelete template\n###############\n\n.. code-block:: text\n\n    DELETE /api/v1/controller/template/{id}/\n\nList VPNs\n#########\n\n.. code-block:: text\n\n    GET /api/v1/controller/vpn/\n\nCreate VPN\n##########\n\n.. code-block:: text\n\n    POST /api/v1/controller/vpn/\n\nGet VPN detail\n##############\n\n.. code-block:: text\n\n    GET /api/v1/controller/vpn/{id}/\n\nDownload VPN configuration\n##########################\n\n.. code-block:: text\n\n    GET /api/v1/controller/vpn/{id}/configuration/\n\nThe above endpoint triggers the download of a ``tar.gz`` file\ncontaining the generated configuration for that specific VPN.\n\nChange details of VPN\n#####################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/vpn/{id}/\n\nPatch details of VPN\n####################\n\n.. code-block:: text\n\n    PATCH /api/v1/controller/vpn/{id}/\n\nDelete VPN\n##########\n\n.. code-block:: text\n\n    DELETE /api/v1/controller/vpn/{id}/\n\nList CA\n#######\n\n.. code-block:: text\n\n    GET /api/v1/controller/ca/\n\nCreate new CA\n#############\n\n.. code-block:: text\n\n    POST /api/v1/controller/ca/\n\nImport existing CA\n##################\n\n.. code-block:: text\n\n    POST /api/v1/controller/ca/\n\n**Note**: To import an existing CA, only ``name``, ``certificate``\nand ``private_key`` fields have to be filled in the ``HTML`` form or\nincluded in the ``JSON`` format.\n\nGet CA Detail\n#############\n\n.. code-block:: text\n\n    GET /api/v1/controller/ca/{id}/\n\nChange details of CA\n####################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/ca/{id}/\n\nPatch details of CA\n###################\n\n.. code-block:: text\n\n    PATCH /api/v1/controller/ca/{id}/\n\nDownload CA(crl)\n################\n\n.. code-block:: text\n\n    GET /api/v1/controller/ca/{id}/crl/\n\nThe above endpoint triggers the download of ``{id}.crl`` file containing\nup to date CRL of that specific CA.\n\nDelete CA\n#########\n\n.. code-block:: text\n\n    DELETE /api/v1/controller/ca/{id}/\n\nRenew CA\n########\n\n.. code-block:: text\n\n    POST /api/v1/controller/ca/{id}/renew/\n\nList Cert\n#########\n\n.. code-block:: text\n\n    GET /api/v1/controller/cert/\n\nCreate new Cert\n###############\n\n.. code-block:: text\n\n    POST /api/v1/controller/cert/\n\nImport existing Cert\n####################\n\n.. code-block:: text\n\n    POST /api/v1/controller/cert/\n\n**Note**: To import an existing Cert, only ``name``, ``ca``,\n``certificate`` and ``private_key`` fields have to be filled\nin the ``HTML`` form or included in the ``JSON`` format.\n\nGet Cert Detail\n###############\n\n.. code-block:: text\n\n    GET /api/v1/controller/cert/{id}/\n\nChange details of Cert\n######################\n\n.. code-block:: text\n\n    PUT /api/v1/controller/cert/{id}/\n\nPatch details of Cert\n#####################\n\n.. code-block:: text\n\n    PATCH /api/v1/controller/cert/{id}/\n\nDelete Cert\n###########\n\n.. code-block:: text\n\n    DELETE /api/v1/controller/cert/{id}/\n\nRenew Cert\n##########\n\n.. code-block:: text\n\n    POST /api/v1/controller/cert/{id}/renew/\n\nRevoke Cert\n###########\n\n.. code-block:: text\n\n    POST /api/v1/controller/cert/{id}/revoke/\n\nSettings\n--------\n\nYou can change the values for the following variables in\n``settings.py`` to configure your instance of openwisp-controller.\n\n``OPENWISP_SSH_AUTH_TIMEOUT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    |   ``int``   |\n+--------------+-------------+\n| **default**: |    ``2``    |\n+--------------+-------------+\n| **unit**:    | ``seconds`` |\n+--------------+-------------+\n\nConfigure timeout to wait for an authentication response when establishing a SSH connection.\n\n``OPENWISP_SSH_BANNER_TIMEOUT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    |   ``int``   |\n+--------------+-------------+\n| **default**: |    ``60``   |\n+--------------+-------------+\n| **unit**:    | ``seconds`` |\n+--------------+-------------+\n\nConfigure timeout to wait for the banner to be presented when establishing a SSH connection.\n\n``OPENWISP_SSH_COMMAND_TIMEOUT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    |   ``int``   |\n+--------------+-------------+\n| **default**: |    ``30``   |\n+--------------+-------------+\n| **unit**:    | ``seconds`` |\n+--------------+-------------+\n\nConfigure timeout on blocking read/write operations when executing a command in a SSH connection.\n\n``OPENWISP_SSH_CONNECTION_TIMEOUT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    |   ``int``   |\n+--------------+-------------+\n| **default**: |    ``5``    |\n+--------------+-------------+\n| **unit**:    | ``seconds`` |\n+--------------+-------------+\n\nConfigure timeout for the TCP connect when establishing a SSH connection.\n\n``OPENWISP_CONNECTORS``\n~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------------------------------------------------------------+\n| **type**:    | ``tuple``                                                          |\n+--------------+--------------------------------------------------------------------+\n| **default**: | .. code-block:: python                                             |\n|              |                                                                    |\n|              |   (                                                                |\n|              |     ('openwisp_controller.connection.connectors.ssh.Ssh', 'SSH'),  |\n|              |   )                                                                |\n+--------------+--------------------------------------------------------------------+\n\nAvailable connector classes. Connectors are python classes that specify ways\nin which OpenWISP can connect to devices in order to launch commands.\n\n``OPENWISP_UPDATE_STRATEGIES``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------------------------------------------------------------------------------------+\n| **type**:    | ``tuple``                                                                              |\n+--------------+----------------------------------------------------------------------------------------+\n| **default**: | .. code-block:: python                                                                 |\n|              |                                                                                        |\n|              |   (                                                                                    |\n|              |     ('openwisp_controller.connection.connectors.openwrt.ssh.OpenWrt', 'OpenWRT SSH'),  |\n|              |   )                                                                                    |\n+--------------+----------------------------------------------------------------------------------------+\n\nAvailable update strategies. An update strategy is a subclass of a\nconnector class which defines an ``update_config`` method which is\nin charge of updating the configuration of the device.\n\nThis operation is launched in a background worker when the configuration\nof a device is changed.\n\nIt's possible to write custom update strategies and add them to this\nsetting to make them available in OpenWISP.\n\n``OPENWISP_CONFIG_UPDATE_MAPPING``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------------------------------------------------------------+\n| **type**:    | ``dict``                                                           |\n+--------------+--------------------------------------------------------------------+\n| **default**: | .. code-block:: python                                             |\n|              |                                                                    |\n|              |   {                                                                |\n|              |     'netjsonconfig.OpenWrt': OPENWISP_UPDATE_STRATEGIES[0][0],     |\n|              |   }                                                                |\n+--------------+--------------------------------------------------------------------+\n\nA dictionary that maps configuration backends to update strategies in order to\nautomatically determine the update strategy of a device connection if the\nupdate strategy field is left blank by the user.\n\n``OPENWISP_CONTROLLER_BACKENDS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------------------------------------------+\n| **type**:    | ``tuple``                                     |\n+--------------+-----------------------------------------------+\n| **default**: | .. code-block:: python                        |\n|              |                                               |\n|              |   (                                           |\n|              |     ('netjsonconfig.OpenWrt', 'OpenWRT'),     |\n|              |     ('netjsonconfig.OpenWisp', 'OpenWISP'),   |\n|              |   )                                           |\n+--------------+-----------------------------------------------+\n\nAvailable configuration backends. For more information, see `netjsonconfig backends\n<http://netjsonconfig.openwisp.org/en/latest/general/basics.html#backend>`_.\n\n``OPENWISP_CONTROLLER_VPN_BACKENDS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------------------------------------------------------------------------------+\n| **type**:    | ``tuple``                                                                        |\n+--------------+----------------------------------------------------------------------------------+\n| **default**: | .. code-block:: python                                                           |\n|              |                                                                                  |\n|              |   (                                                                              |\n|              |     ('openwisp_controller.vpn_backends.OpenVpn', 'OpenVPN'),                     |\n|              |     ('openwisp_controller.vpn_backends.Wireguard', 'WireGuard'),                 |\n|              |     ('openwisp_controller.vpn_backends.VxlanWireguard', 'VXLAN over WireGuard'), |\n|              |   )                                                                              |\n+--------------+----------------------------------------------------------------------------------+\n\nAvailable VPN backends for VPN Server objects. For more information, see `netjsonconfig VPN backends\n<https://netjsonconfig.openwisp.org/en/latest/backends/vpn-backends.html>`_.\n\nA VPN backend must follow some basic rules in order to be compatible with *openwisp-controller*:\n\n* it MUST allow at minimum and at maximum one VPN instance\n* the main *NetJSON* property MUST match the lowercase version of the class name,\n  eg: when using the ``OpenVpn`` backend, the system will look into\n  ``config['openvpn']``\n* it SHOULD focus on the server capabilities of the VPN software being used\n\n``OPENWISP_CONTROLLER_DEFAULT_BACKEND``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------------------------------------+\n| **type**:    | ``str``                                |\n+--------------+----------------------------------------+\n| **default**: | ``OPENWISP_CONTROLLER_BACKENDS[0][0]`` |\n+--------------+----------------------------------------+\n\nThe preferred backend that will be used as initial value when adding new ``Config`` or\n``Template`` objects in the admin.\n\nThis setting defaults to the raw value of the first item in the ``OPENWISP_CONTROLLER_BACKENDS`` setting,\nwhich is ``netjsonconfig.OpenWrt``.\n\nSetting it to ``None`` will force the user to choose explicitly.\n\n``OPENWISP_CONTROLLER_DEFAULT_VPN_BACKEND``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------------------------------------+\n| **type**:    | ``str``                                    |\n+--------------+--------------------------------------------+\n| **default**: | ``OPENWISP_CONTROLLER_VPN_BACKENDS[0][0]`` |\n+--------------+--------------------------------------------+\n\nThe preferred backend that will be used as initial value when adding new ``Vpn`` objects in the admin.\n\nThis setting defaults to the raw value of the first item in the ``OPENWISP_CONTROLLER_VPN_BACKENDS`` setting,\nwhich is ``openwisp_controller.vpn_backends.OpenVpn``.\n\nSetting it to ``None`` will force the user to choose explicitly.\n\n``OPENWISP_CONTROLLER_REGISTRATION_ENABLED``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``True``    |\n+--------------+-------------+\n\nWhether devices can automatically register through the controller or not.\n\nThis feature is enabled by default.\n\nAutoregistration must be supported on the devices in order to work, see `openwisp-config automatic\nregistration <https://github.com/openwisp/openwisp-config#automatic-registration>`_ for more information.\n\n``OPENWISP_CONTROLLER_CONSISTENT_REGISTRATION``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``True``    |\n+--------------+-------------+\n\nWhether devices that are already registered are recognized when reflashed or reset, hence keeping\nthe existing configuration without creating a new one.\n\nThis feature is enabled by default.\n\nAutoregistration must be enabled also on the devices in order to work, see `openwisp-config\nconsistent key generation <https://github.com/openwisp/openwisp-config#consistent-key-generation>`_\nfor more information.\n\n``OPENWISP_CONTROLLER_REGISTRATION_SELF_CREATION``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``True``    |\n+--------------+-------------+\n\nWhether devices that are not already present in the system are allowed to register or not.\n\nTurn this off if you still want to use auto-registration to avoid having to\nmanually set the device UUID and key in its configuration file but also want\nto avoid indiscriminate registration of new devices without explicit permission.\n\n``OPENWISP_CONTROLLER_CONTEXT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------+\n| **type**:    | ``dict``         |\n+--------------+------------------+\n| **default**: | ``{}``           |\n+--------------+------------------+\n\nAdditional context that is passed to the default context of each device object.\n\n``OPENWISP_CONTROLLER_CONTEXT`` can be used to define system-wide configuration variables.\n\nFor more information regarding how to use configuration variables in OpenWISP,\nsee `How to use configuration variables <#how-to-use-configuration-variables>`_.\n\nFor technical information about how variables are handled in the lower levels\nof OpenWISP, see `netjsonconfig context: configuration variables\n<http://netjsonconfig.openwisp.org/en/latest/general/basics.html#context-configuration-variables>`_.\n\n``OPENWISP_CONTROLLER_DEFAULT_AUTO_CERT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+---------------------------+\n| **type**:    | ``bool``                  |\n+--------------+---------------------------+\n| **default**: | ``True``                  |\n+--------------+---------------------------+\n\nThe default value of the ``auto_cert`` field for new ``Template`` objects.\n\nThe ``auto_cert`` field is valid only for templates which have ``type``\nset to ``VPN`` and indicates whether configuration regarding the VPN tunnel is\nprovisioned automatically to each device using the template, eg:\n\n- when using OpenVPN, new `x509 <https://tools.ietf.org/html/rfc5280>`_ certificates\n  will be generated automatically using the same CA assigned to the related VPN object\n- when using WireGuard, new pair of private and public keys\n  (using `Curve25519 <http://cr.yp.to/ecdh.html>`_) will be generated, as well as\n  an IP address of the subnet assigned to the related VPN object\n- when using `VXLAN <https://tools.ietf.org/html/rfc7348>`_ tunnels over Wireguad,\n  in addition to the configuration generated for WireGuard, a new VID will be generated\n  automatically for each device if the configuration option \"auto VNI\" is turned on in\n  the VPN object\n\nAll these auto generated configuration options will be available as\ntemplate variables.\n\nThe objects that are automatically created will also be removed when they are not\nneeded anymore (eg: when the VPN template is removed from a configuration object).\n\n``OPENWISP_CONTROLLER_CERT_PATH``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+---------------------------+\n| **type**:    | ``str``                   |\n+--------------+---------------------------+\n| **default**: | ``/etc/x509``             |\n+--------------+---------------------------+\n\nThe filesystem path where x509 certificate will be installed when\ndownloaded on routers when ``auto_cert`` is being used (enabled by default).\n\n``OPENWISP_CONTROLLER_COMMON_NAME_FORMAT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------------------+\n| **type**:    | ``str``                      |\n+--------------+------------------------------+\n| **default**: | ``{mac_address}-{name}``     |\n+--------------+------------------------------+\n\nDefines the format of the ``common_name`` attribute of VPN client certificates\nthat are automatically created when using VPN templates which have ``auto_cert``\nset to ``True``. A unique slug generated using `shortuuid <https://github.com/skorokithakis/shortuuid/>`_\nis appended to the common name to introduce uniqueness. Therefore, resulting\ncommon names will have ``{OPENWISP_CONTROLLER_COMMON_NAME_FORMAT}-{unique-slug}``\nformat.\n\n**Note:** If the ``name`` and ``mac address`` of the device are equal,\nthe ``name`` of the device will be omitted from the common name to avoid redundancy.\n\n``OPENWISP_CONTROLLER_MANAGEMENT_IP_DEVICE_LIST``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------------------+\n| **type**:    | ``bool``                     |\n+--------------+------------------------------+\n| **default**: | ``True``                     |\n+--------------+------------------------------+\n\nIn the device list page, the column ``IP`` will show the ``management_ip`` if\navailable, defaulting to ``last_ip`` otherwise.\n\nIf this setting is set to ``False`` the ``management_ip`` won't be shown\nin the device list page even if present, it will be shown only in the device\ndetail page.\n\nYou may set this to ``False`` if for some reason the majority of your user\ndoesn't care about the management ip address.\n\n``OPENWISP_CONTROLLER_CONFIG_BACKEND_FIELD_SHOWN``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------------------+\n| **type**:    | ``bool``                     |\n+--------------+------------------------------+\n| **default**: | ``True``                     |\n+--------------+------------------------------+\n\nThis setting toggles the ``backend`` fields in add/edit pages in Device and Template configuration,\nas well as the ``backend`` field/filter in Device list and Template list.\n\nIf this setting is set to ``False`` these items will be removed from the UI.\n\nNote: This setting affects only the configuration backend and NOT the VPN backend.\n\n``OPENWISP_CONTROLLER_DEVICE_NAME_UNIQUE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``True``    |\n+--------------+-------------+\n\nThis setting conditionally enforces unique Device names in an Organization.\nThe query to enforce this is case-insensitive.\n\nNote: For this constraint to be optional, it is enforced on an application level and not on database.\n\n``OPENWISP_CONTROLLER_HARDWARE_ID_ENABLED``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``False``   |\n+--------------+-------------+\n\nThe field ``hardware_id`` can be used to store a unique hardware id, for example a serial number.\n\nIf this setting is set to ``True`` then this field will be shown first in the device list page\nand in the add/edit device page.\n\nThis feature is disabled by default.\n\n``OPENWISP_CONTROLLER_HARDWARE_ID_OPTIONS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------------------------------------------------------+\n| **type**:    | ``dict``                                                     |\n+--------------+--------------------------------------------------------------+\n| **default**: | .. code-block:: python                                       |\n|              |                                                              |\n|              |    {                                                         |\n|              |        'blank': not OPENWISP_CONTROLLER_HARDWARE_ID_ENABLED, |\n|              |        'null': True,                                         |\n|              |        'max_length': 32,                                     |\n|              |        'unique': True,                                       |\n|              |        'verbose_name': _('Serial number'),                   |\n|              |        'help_text': _('Serial number of this device')        |\n|              |    }                                                         |\n+--------------+--------------------------------------------------------------+\n\nOptions for the model field ``hardware_id``.\n\n* ``blank``: wether the field is allowed to be blank\n* ``null``: wether an empty value will be stored as ``NULL`` in the database\n* ``max_length``: maximum length of the field\n* ``unique``: wether the value of the field must be unique\n* ``verbose_name``: text for the human readable label of the field\n* ``help_text``: help text to be displayed with the field\n\n``OPENWISP_CONTROLLER_HARDWARE_ID_AS_NAME``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``bool``    |\n+--------------+-------------+\n| **default**: | ``True``    |\n+--------------+-------------+\n\nWhen the hardware ID feature is enabled, devices will be referenced with\ntheir hardware ID instead of their name.\n\nIf you still want to reference devices by their name, set this to ``False``.\n\n``OPENWISP_CONTROLLER_DEVICE_VERBOSE_NAME``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------------------------+\n| **type**:    | ``tuple``                  |\n+--------------+----------------------------+\n| **default**: | ``('Device', 'Devices')``  |\n+--------------+----------------------------+\n\nDefines the ``verbose_name`` attribute of the ``Device`` model, which is displayed in the\nadmin site. The first and second element of the tuple represent the singular and plural forms.\n\nFor example, if we want to change the verbose name to \"Hotspot\", we could write:\n\n.. code-block:: python\n\n    OPENWISP_CONTROLLER_DEVICE_VERBOSE_NAME = ('Hotspot', 'Hotspots')\n\n``OPENWISP_CONTROLLER_HIDE_AUTOMATICALLY_GENERATED_SUBNETS_AND_IPS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------+\n| **type**:    | ``bool``  |\n+--------------+-----------+\n| **default**: | ``False`` |\n+--------------+-----------+\n\nSetting this to ``True`` will hide subnets and IPs generated using `subnet division rules <#subnet-division-app>`_\nfrom being displayed on the changelist view of Subnet and IP admin.\n\n``OPENWISP_CONTROLLER_SUBNET_DIVISION_TYPES``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+---------------------------------------------------------------------------------------------------------+\n| **type**:    | ``tuple``                                                                                               |\n+--------------+---------------------------------------------------------------------------------------------------------+\n| **default**: | .. code-block:: python                                                                                  |\n|              |                                                                                                         |\n|              |    (                                                                                                    |\n|              |       ('openwisp_controller.subnet_division.rule_types.device.DeviceSubnetDivisionRuleType', 'Device'), |\n|              |       ('openwisp_controller.subnet_division.rule_types.vpn.VpnSubnetDivisionRuleType', 'VPN'),          |\n|              |    )                                                                                                    |\n|              |                                                                                                         |\n+--------------+---------------------------------------------------------------------------------------------------------+\n\n`Available types for Subject Division Rule <#device-subnet-division-rule>`_ objects.\nFor more information on how to write your own types, read\n`\"Custom Subnet Division Rule Types\" section of this documentation <#custom-subnet-division-rule-types>`_\n\n``OPENWISP_CONTROLLER_API``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------+\n| **type**:    | ``bool``  |\n+--------------+-----------+\n| **default**: | ``True``  |\n+--------------+-----------+\n\nIndicates whether the API for Openwisp Controller is enabled or not.\nTo disable the API by default add `OPENWISP_CONTROLLER_API = False` in `settings.py` file.\n\n``OPENWISP_CONTROLLER_API_HOST``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------+\n| **type**:    | ``str``   |\n+--------------+-----------+\n| **default**: | ``None``  |\n+--------------+-----------+\n\nAllows to specify backend URL for API requests, if the frontend is hosted separately.\n\n``OPENWISP_CONTROLLER_USER_COMMANDS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------+\n| **type**:    | ``list`` |\n+--------------+----------+\n| **default**: | ``[]``   |\n+--------------+----------+\n\nAllows to specify a `list` of tuples for adding commands as described in\n`'How to define custom commands\" <#how-to-define-new-options-in-the-commands-menu>`_ section.\n\n``OPENWISP_CONTROLLER_DEVICE_GROUP_SCHEMA``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------------------------------+\n| **type**:    | ``dict``                                 |\n+--------------+------------------------------------------+\n| **default**: | ``{'type': 'object', 'properties': {}}`` |\n+--------------+------------------------------------------+\n\nAllows specifying JSONSchema used for validating meta-data of `Device Group <#device-groups>`_.\n\n``OPENWISP_CONTROLLER_SHARED_MANAGEMENT_IP_ADDRESS_SPACE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------+\n| **type**:    | ``bool`` |\n+--------------+----------+\n| **default**: | ``True`` |\n+--------------+----------+\n\nBy default, the system assumes that the address space of the management\ntunnel is shared among all the organizations using the system, that is,\nthe system assumes there's only one management VPN, tunnel or other\nnetworking technology to reach the devices it controls.\n\nWhen set to ``True``, any device belonging to any\norganization will never have the same ``management_ip`` as another device,\nthe latest device declaring the management IP will take the IP and any\nother device who declared the same IP in the past will have the field\nreset to empty state to avoid potential conflicts.\n\nSet this to ``False`` if every organization has its dedicated management\ntunnel with a dedicated address space that is reachable by the OpenWISP server.\n\n``OPENWISP_CONTROLLER_DSA_OS_MAPPING``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------+\n| **type**:    | ``dict`` |\n+--------------+----------+\n| **default**: | ``{}``   |\n+--------------+----------+\n\nOpenWISP Controller can figure out whether it should use the new OpenWrt syntax\nfor DSA interfaces (Distributed Switch Architecture) introduced in OpenWrt 21 by\nreading the ``os`` field of the ``Device`` object. However, if the firmware you\nare using has a custom firmware identifier, the system will not be able to figure\nout whether it should use the new syntax and it will default to\n`OPENWISP_CONTROLLER_DSA_DEFAULT_FALLBACK <#openwisp_controller_dsa_default_fallback>`_.\n\nIf you want to make sure the system can parse your custom firmware\nidentifier properly, you can follow the example below.\n\nFor the sake of the example, the OS identifier ``MyCustomFirmware 2.0``\ncorresponds to ``OpenWrt 19.07``, while ``MyCustomFirmware 2.1`` corresponds to\n``OpenWrt 21.02``. Configuring this setting as indicated below will allow\nOpenWISP to supply the right syntax automatically.\n\nExample:\n\n.. code-block:: python\n\n    OPENWISP_CONTROLLER_DSA_OS_MAPPING = {\n        'netjsonconfig.OpenWrt': {\n            # OpenWrt >=21.02 configuration syntax will be used for\n            # these OS identifiers.\n            '>=21.02': [r'MyCustomFirmware 2.1(.*)'],\n            # OpenWrt <=21.02 configuration syntax will be used for\n            # these OS identifiers.\n            '<21.02': [r'MyCustomFirmware 2.0(.*)']\n        }\n    }\n\n**Note**: The OS identifier should be a regular expression as shown in above example.\n\n``OPENWISP_CONTROLLER_DSA_DEFAULT_FALLBACK``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------+\n| **type**:    | ``bool`` |\n+--------------+----------+\n| **default**: | ``True`` |\n+--------------+----------+\n\nThe value of this setting decides whether to use DSA syntax\n(OpenWrt >=21 configuration syntax) if openwisp-controller fails\nto make that decision automatically.\n\nSignals\n-------\n\n``config_modified``\n~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.config_modified``\n\n**Arguments**:\n\n- ``instance``: instance of ``Config`` which got its ``config`` modified\n- ``previous_status``: indicates the status of the config object before the\n  signal was emitted\n- ``action``: action which emitted the signal, can be any of the list below:\n  - ``config_changed``: the configuration of the config object was changed\n  - ``related_template_changed``: the configuration of a related template was changed\n  - ``m2m_templates_changed``: the assigned templates were changed\n  (either templates were added, removed or their order was changed)\n\nThis signal is emitted every time the configuration of a device is modified.\n\nIt does not matter if ``Config.status`` is already modified, this signal will\nbe emitted anyway because it signals that the device configuration has changed.\n\nThis signal is used to trigger the update of the configuration on devices,\nwhen the push feature is enabled (requires Device credentials).\n\nThe signal is also emitted when one of the templates used by the device\nis modified or if the templates assigned to the device are changed.\n\nSpecial cases in which ``config_modified`` is not emitted\n#########################################################\n\nThis signal is not emitted when the device is created for the first time.\n\nIt is also not emitted when templates assigned to a config object are\ncleared (``post_clear`` m2m signal), this is necessary because\n`sortedm2m <https://github.com/jazzband/django-sortedm2m>`_, the package\nwe use to implement ordered templates, uses the clear action to\nreorder templates (m2m relationships are first cleared and then added back),\ntherefore we ignore ``post_clear`` to avoid emitting signals twice\n(one for the clear action and one for the add action).\nPlease keep this in mind if you plan on using the clear method\nof the m2m manager.\n\n``config_status_changed``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.config_status_changed``\n\n**Arguments**:\n\n- ``instance``: instance of ``Config`` which got its ``status`` changed\n\nThis signal is emitted only when the configuration status of a device has changed.\n\nThe signal is emitted also when the m2m template relationships of a config\nobject are changed, but only on ``post_add`` or ``post_remove`` actions,\n``post_clear`` is ignored for the same reason explained\nin the previous section.\n\n``checksum_requested``\n~~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.checksum_requested``\n\n**Arguments**:\n\n- ``instance``: instance of ``Device`` for which its configuration\n  checksum has been requested\n- ``request``: the HTTP request object\n\nThis signal is emitted when a device requests a checksum via the controller views.\n\nThe signal is emitted just before a successful response is returned,\nit is not sent if the response was not successful.\n\n``config_download_requested``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.config_download_requested``\n\n**Arguments**:\n\n- ``instance``: instance of ``Device`` for which its configuration has been\n  requested for download\n- ``request``: the HTTP request object\n\nThis signal is emitted when a device requests to download its configuration\nvia the controller views.\n\nThe signal is emitted just before a successful response is returned,\nit is not sent if the response was not successful.\n\n``is_working_changed``\n~~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.connection.signals.is_working_changed``\n\n**Arguments**:\n\n- ``instance``: instance of ``DeviceConnection``\n- ``is_working``: value of ``DeviceConnection.is_working``\n- ``old_is_working``: previous value of ``DeviceConnection.is_working``,\n  either ``None`` (for new connections), ``True`` or ``False``\n- ``failure_reason``: error message explaining reason for failure in establishing connection\n- ``old_failure_reason``: previous value of ``DeviceConnection.failure_reason``\n\nThis signal is emitted every time ``DeviceConnection.is_working`` changes.\n\nIt is not triggered when the device is created for the first time.\n\n``management_ip_changed``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.management_ip_changed``\n\n**Arguments**:\n\n- ``instance``: instance of ``Device``\n- ``management_ip``: value of ``Device.management_ip``\n- ``old_management_ip``: previous value of ``Device.management_ip``\n\nThis signal is emitted every time ``Device.management_ip`` changes.\n\nIt is not triggered when the device is created for the first time.\n\n``device_registered``\n~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.device_registered``\n\n**Arguments**:\n\n- ``instance``: instance of ``Device`` which got registered.\n- ``is_new``: boolean, will be ``True`` when the device is new,\n  ``False`` when the device already exists\n  (eg: a device which gets a factory reset will register again)\n\nThis signal is emitted when a device registers automatically through the controller\nHTTP API.\n\n``device_name_changed``\n~~~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.device_name_changed``\n\n**Arguments**:\n\n- ``instance``: instance of ``Device``.\n\nThe signal is emitted when the device name changes.\n\nIt is not emitted when the device is created.\n\n``device_group_changed``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.device_group_changed``\n\n**Arguments**:\n\n- ``instance``: instance of ``Device``.\n- ``group_id``: primary key of ``DeviceGroup`` of ``Device``\n- ``old_group_id``: primary key of previous ``DeviceGroup`` of ``Device``\n\nThe signal is emitted when the device group changes.\n\nIt is not emitted when the device is created.\n\n``subnet_provisioned``\n~~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.subnet_division.signals.subnet_provisioned``\n\n**Arguments**:\n\n- ``instance``: instance of ``VpnClient``.\n- ``provisioned``: dictionary of ``Subnet`` and ``IpAddress`` provisioned,\n  ``None`` if nothing is provisioned\n\nThe signal is emitted when subnets and IP addresses have been provisioned\nfor a ``VpnClient`` for a VPN server with a subnet with\n`subnet division rule <#subnet-division-app>`_.\n\n``vpn_server_modified``\n~~~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.vpn_server_modified``\n\n**Arguments**:\n\n- ``instance``: instance of ``Vpn``.\n\nThe signal is emitted when the VPN server is modified.\n\n``vpn_peers_changed``\n~~~~~~~~~~~~~~~~~~~~~\n\n**Path**: ``openwisp_controller.config.signals.vpn_peers_changed``\n\n**Arguments**:\n\n- ``instance``: instance of ``Vpn``.\n\nThe signal is emitted when the peers of VPN server gets changed.\n\nIt is only emitted for ``Vpn`` object with **WireGuard** or\n**VXLAN over WireGuard** backend.\n\nExtending openwisp-controller\n-----------------------------\n\nOne of the core values of the OpenWISP project is\n`Software Reusability <http://openwisp.io/docs/general/values.html#software-reusability-means-long-term-sustainability>`_,\nfor this reason *openwisp-controller* provides a set of base classes\nwhich can be imported, extended and reused to create derivative apps.\n\nIn order to implement your custom version of *openwisp-controller*,\nyou need to perform the steps described in this section.\n\nWhen in doubt, the code in the\n`test project <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/>`_\nwill serve you as source of truth: just replicate and adapt that code\nto get a basic derivative of *openwisp-controller* working.\n\nIf you want to add new users fields, please follow the `tutorial to extend the\nopenwisp-users <https://github.com/openwisp/openwisp-users/#extend-openwisp-users>`_.\nAs an example, we have extended *openwisp-users* to *sample_users* app and\nadded a field ``social_security_number`` in the `sample_users/models.py\n<https://github.com/openwisp/openwisp-controller/blob/master/tests/openwisp2/sample_users/models.py>`_.\n\n**Premise**: if you plan on using a customized version of this module,\nwe suggest to start with it since the beginning, because migrating your data\nfrom the default module to your extended version may be time consuming.\n\n1. Initialize your project & custom apps\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFirstly, to get started you need to create a django project::\n\n    django-admin startproject mycontroller\n\nNow, you need to do is to create some new django apps which will\ncontain your custom version of *openwisp-controller*.\n\nA django project is a collection of django apps. There are 4 django apps in the\nopenwisp_controller project, namely config, pki, connection & geo.\nYou'll need to create 4 apps in your project for each app in openwisp_controller.\n\nA django app is nothing more than a\n`python package <https://docs.python.org/3/tutorial/modules.html#packages>`_\n(a directory of python scripts), in the following examples we'll call these django app\n``sample_config``, ``sample_pki``, ``sample_connection``, ``sample_geo``\n& ``sample_subnet_division``. but you can name it how you want::\n\n    django-admin startapp sample_config\n    django-admin startapp sample_pki\n    django-admin startapp sample_connection\n    django-admin startapp sample_geo\n    django-admin startapp sample_subnet_division\n\nKeep in mind that the command mentioned above must be called from a directory\nwhich is available in your `PYTHON_PATH <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH>`_\nso that you can then import the result into your project.\n\nFor more information about how to work with django projects and django apps,\nplease refer to the `django documentation <https://docs.djangoproject.com/en/dev/intro/tutorial01/>`_.\n\n2. Install ``openwisp-controller``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall (and add to the requirement of your project) openwisp-controller::\n\n    pip install openwisp-controller\n\n3. Add your apps in INSTALLED_APPS\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNow you need to add ``mycontroller.sample_config``,\n``mycontroller.sample_pki``, ``mycontroller.sample_connection``,\n``mycontroller.sample_geo`` & ``mycontroller.sample_subnet_division`` to\n``INSTALLED_APPS`` in your ``settings.py``, ensuring also that\n``openwisp_controller.config``, ``openwisp_controller.geo``,\n``openwisp_controller.pki``, ``openwisp_controller.connnection`` &\n``openwisp_controller.subnet_division`` have been removed:\n\n.. code-block:: python\n\n    # Remember: Order in INSTALLED_APPS is important.\n    INSTALLED_APPS = [\n        # other django installed apps\n        'openwisp_utils.admin_theme',\n        # all-auth\n        'django.contrib.sites',\n        'allauth',\n        'allauth.account',\n        'allauth.socialaccount',\n        # openwisp2 module\n        # 'openwisp_controller.config', <-- comment out or delete this line\n        # 'openwisp_controller.pki', <-- comment out or delete this line\n        # 'openwisp_controller.geo', <-- comment out or delete this line\n        # 'openwisp_controller.connection', <-- comment out or delete this line\n        # 'openwisp_controller.subnet_division', <-- comment out or delete this line\n        'mycontroller.sample_config',\n        'mycontroller.sample_pki',\n        'mycontroller.sample_geo',\n        'mycontroller.sample_connection',\n        'mycontroller.sample_subnet_division',\n        'openwisp_users',\n        # admin\n        'django.contrib.admin',\n        # other dependencies\n        'sortedm2m',\n        'reversion',\n        'leaflet',\n        # rest framework\n        'rest_framework',\n        'rest_framework_gis',\n        # channels\n        'channels',\n    ]\n\nSubstitute ``mycontroller``, ``sample_config``, ``sample_pki``, ``sample_connection``,\n``sample_geo`` & ``sample_subnet_division`` with the name you chose in step 1.\n\n4. Add ``EXTENDED_APPS``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd the following to your ``settings.py``:\n\n.. code-block:: python\n\n    EXTENDED_APPS = (\n        'django_x509',\n        'django_loci',\n        'openwisp_controller.config',\n        'openwisp_controller.pki',\n        'openwisp_controller.geo',\n        'openwisp_controller.connection',\n        'openwisp_controller.subnet_division',\n    )\n\n5. Add ``openwisp_utils.staticfiles.DependencyFinder``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.staticfiles.DependencyFinder`` to\n``STATICFILES_FINDERS`` in your ``settings.py``:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = [\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        'openwisp_utils.staticfiles.DependencyFinder',\n    ]\n\n6. Add ``openwisp_utils.loaders.DependencyLoader``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.loaders.DependencyLoader`` to ``TEMPLATES``\nin your ``settings.py``, but ensure it comes before\n``django.template.loaders.app_directories.Loader``:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'OPTIONS': {\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'openwisp_utils.loaders.DependencyLoader',\n                    'django.template.loaders.app_directories.Loader',\n                ],\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                    'openwisp_utils.admin_theme.context_processor.menu_items',\n                    'openwisp_notifications.context_processors.notification_api_settings',\n                ],\n            },\n        }\n    ]\n\n5. Initial Database setup\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEnsure you are using one of the available geodjango backends, eg:\n\n.. code-block:: python\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.contrib.gis.db.backends.spatialite',\n            'NAME': 'openwisp-controller.db',\n        }\n    }\n\nFor more information about GeoDjango, please refer to the `geodjango documentation <https://docs.djangoproject.com/en/dev/ref/contrib/gis/>`_.\n\n6. Django Channels Setup\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate ``asgi.py`` in your project folder and add following lines in it:\n\n.. code-block:: python\n\n    from channels.auth import AuthMiddlewareStack\n    from channels.routing import ProtocolTypeRouter, URLRouter\n    from channels.security.websocket import AllowedHostsOriginValidator\n    from django.core.asgi import get_asgi_application\n\n    from openwisp_controller.routing import get_routes\n    # You can also add your routes like this\n    from my_app.routing import my_routes\n\n    application = ProtocolTypeRouter(\n        {   \"http\": get_asgi_application(),\n            'websocket': AllowedHostsOriginValidator(\n                AuthMiddlewareStack(URLRouter(get_routes() + my_routes))\n            )\n        }\n    )\n\n7. Other Settings\n~~~~~~~~~~~~~~~~~\n\nAdd the following settings to ``settings.py``:\n\n.. code-block:: python\n\n    FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'\n\n    ASGI_APPLICATION = 'my_project.asgi.application'\n    CHANNEL_LAYERS = {\n        'default': {\n            'BACKEND': 'channels.layers.InMemoryChannelLayer'\n        },\n    }\n\nFor more information about FORM_RENDERER setting, please refer to the\n`FORM_RENDERER documentation <https://docs.djangoproject.com/en/dev/ref/settings/#form-renderer>`_.\nFor more information about ASGI_APPLICATION setting, please refer to the\n`ASGI_APPLICATION documentation <https://channels.readthedocs.io/en/latest/deploying.html#configuring-the-asgi-application>`_.\nFor more information about CHANNEL_LAYERS setting, please refer to the\n`CHANNEL_LAYERS documentation <https://channels.readthedocs.io/en/latest/deploying.html#setting-up-a-channel-backend>`_.\n\n6. Inherit the AppConfig class\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the following files in the sample app of the test project:\n\n- sample_config:\n    - `sample_config/__init__.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_config/__init__.py>`_.\n    - `sample_config/apps.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_config/apps.py>`_.\n\n- sample_geo:\n    - `sample_geo/__init__.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_geo/__init__.py>`_.\n    - `sample_geo/apps.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_geo/apps.py>`_.\n\n- sample_pki:\n    - `sample_pki/__init__.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_pki/__init__.py>`_.\n    - `sample_pki/apps.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_pki/apps.py>`_.\n\n- sample_connection:\n    - `sample_connection/__init__.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_connection/__init__.py>`_.\n    - `sample_connection/apps.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_connection/apps.py>`_.\n\n- sample_subnet_division:\n    - `sample_subnet_division/__init__.py <https://github.com/openwisp/openwisp-controller/tree/issues/400-subnet-subdivision-rule/tests/openwisp2/sample_subnet_division/__init__.py>`_.\n    - `sample_subnet_division/apps.py <https://github.com/openwisp/openwisp-controller/tree/issues/400-subnet-subdivision-rule/tests/openwisp2/sample_subnet_division/apps.py>`_.\n\nYou have to replicate and adapt that code in your project.\n\nFor more information regarding the concept of ``AppConfig`` please refer to\nthe `\"Applications\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/applications/>`_.\n\n7. Create your custom models\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor the purpose of showing an example, we added a simple \"details\" field\nto the models of the sample app in the test project.\n\n- `sample_config models <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_config/models.py>`_\n- `sample_geo models <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_geo/models.py>`_\n- `sample_pki models <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_pki/models.py>`_\n- `sample_connection models <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_connection/models.py>`_\n- `sample_subnet_division <https://github.com/openwisp/openwisp-controller/tree/issues/400-subnet-subdivision-rule/tests/openwisp2/sample_subnet_division/models.py>`_\n\nYou can add fields in a similar way in your ``models.py`` file.\n\n**Note**: for doubts regarding how to use, extend or develop models please refer to\nthe `\"Models\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/db/models/>`_.\n\n8. Add swapper configurations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOnce you have created the models, add the following to your ``settings.py``:\n\n.. code-block:: python\n\n    # Setting models for swapper module\n    CONFIG_DEVICE_MODEL = 'sample_config.Device'\n    CONFIG_DEVICEGROUP_MODEL = 'sample_config.DeviceGroup'\n    CONFIG_CONFIG_MODEL = 'sample_config.Config'\n    CONFIG_TEMPLATETAG_MODEL = 'sample_config.TemplateTag'\n    CONFIG_TAGGEDTEMPLATE_MODEL = 'sample_config.TaggedTemplate'\n    CONFIG_TEMPLATE_MODEL = 'sample_config.Template'\n    CONFIG_VPN_MODEL = 'sample_config.Vpn'\n    CONFIG_VPNCLIENT_MODEL = 'sample_config.VpnClient'\n    CONFIG_ORGANIZATIONCONFIGSETTINGS_MODEL = 'sample_config.OrganizationConfigSettings'\n    DJANGO_X509_CA_MODEL = 'sample_pki.Ca'\n    DJANGO_X509_CERT_MODEL = 'sample_pki.Cert'\n    GEO_LOCATION_MODEL = 'sample_geo.Location'\n    GEO_FLOORPLAN_MODEL = 'sample_geo.FloorPlan'\n    GEO_DEVICELOCATION_MODEL = 'sample_geo.DeviceLocation'\n    CONNECTION_CREDENTIALS_MODEL = 'sample_connection.Credentials'\n    CONNECTION_DEVICECONNECTION_MODEL = 'sample_connection.DeviceConnection'\n    CONNECTION_COMMAND_MODEL = 'sample_connection.Command'\n    SUBNET_DIVISION_SUBNETDIVISIONRULE_MODEL = 'sample_subnet_division.SubnetDivisionRule'\n    SUBNET_DIVISION_SUBNETDIVISIONINDEX_MODEL = 'sample_subnet_division.SubnetDivisionIndex'\n\nSubstitute ``sample_config``, ``sample_pki``, ``sample_connection``,\n``sample_geo`` & ``sample_subnet_division`` with the name you chose in step 1.\n\n9. Create database migrations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate database migrations::\n\n    ./manage.py makemigrations\n\nNow, to use the default ``administrator`` and ``operator`` user groups\nlike the used in the openwisp_controller module, you'll manually need to make a\nmigrations file which would look like:\n\n- `sample_config/migrations/0002_default_groups_permissions.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_config/migrations/0002_default_groups_permissions.py>`_\n- `sample_geo/migrations/0002_default_group_permissions.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_geo/migrations/0002_default_group_permissions.py>`_\n- `sample_pki/migrations/0002_default_group_permissions.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_pki/migrations/0002_default_group_permissions.py>`_\n- `sample_connection/migrations/0002_default_group_permissions.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_connection/migrations/0002_default_group_permissions.py>`_\n- `sample_subnet_division/migrations/0002_default_group_permissions.py <https://github.com/openwisp/openwisp-controller/tree/issues/400-subnet-subdivision-rule/tests/openwisp2/sample_subnet_division/migrations/0002_default_group_permissions.py>`_\n\nCreate database migrations::\n\n    ./manage.py migrate\n\nFor more information, refer to the\n`\"Migrations\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/migrations/>`_.\n\n10. Create the admin\n~~~~~~~~~~~~~~~~~~~~\n\nRefer to the ``admin.py`` file of the sample app.\n\n- `sample_config admin.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_config/admin.py>`_.\n- `sample_geo admin.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_geo/admin.py>`_.\n- `sample_pki admin.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_pki/admin.py>`_.\n- `sample_connection admin.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_connection/admin.py>`_.\n- `sample_subnet_division admin.py <https://github.com/openwisp/openwisp-controller/tree/issues/400-subnet-subdivision-rule/tests/openwisp2/sample_subnet_division/admin.py>`_.\n\nTo introduce changes to the admin, you can do it in two main ways which are described below.\n\n**Note**: for more information regarding how the django admin works, or how it can be customized,\nplease refer to `\"The django admin site\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/contrib/admin/>`_.\n\n1. Monkey patching\n##################\n\nIf the changes you need to add are relatively small, you can resort to monkey patching.\n\nFor example:\n\nsample_config\n^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from openwisp_controller.config.admin import (\n        DeviceAdmin,\n        DeviceGroupAdmin,\n        TemplateAdmin,\n        VpnAdmin,\n    )\n\n    # DeviceAdmin.fields += ['example'] <-- monkey patching example\n\nsample_connection\n^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from openwisp_controller.connection.admin import CredentialsAdmin\n\n    # CredentialsAdmin.fields += ['example'] <-- monkey patching example\n\nsample_geo\n^^^^^^^^^^\n\n.. code-block:: python\n\n    from openwisp_controller.geo.admin import FloorPlanAdmin, LocationAdmin\n\n    # FloorPlanAdmin.fields += ['example'] <-- monkey patching example\n\nsample_pki\n^^^^^^^^^^\n\n.. code-block:: python\n\n    from openwisp_controller.pki.admin import CaAdmin, CertAdmin\n\n    # CaAdmin.fields += ['example'] <-- monkey patching example\n\nsample_subnet_division\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from openwisp_controller.subnet_division.admin import SubnetDivisionRuleInlineAdmin\n\n    # SubnetDivisionRuleInlineAdmin.fields += ['example'] <-- monkey patching example\n\n2. Inheriting admin classes\n###########################\n\nIf you need to introduce significant changes and/or you don't want to resort to\nmonkey patching, you can proceed as follows:\n\nsample_config\n^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from openwisp_controller.config.admin import (\n        DeviceAdmin as BaseDeviceAdmin,\n        TemplateAdmin as BaseTemplateAdmin,\n        VpnAdmin as BaseVpnAdmin,\n        DeviceGroupAdmin as BaseDeviceGroupAdmin,\n    from swapper import load_model\n\n    Vpn = load_model('openwisp_controller', 'Vpn')\n    Device = load_model('openwisp_controller', 'Device')\n    DeviceGroup = load_model('openwisp_controller', 'DeviceGroup')\n    Template = load_model('openwisp_controller', 'Template')\n\n    admin.site.unregister(Vpn)\n    admin.site.unregister(Device)\n    admin.site.unregister(DeviceGroup)\n    admin.site.unregister(Template)\n\n    @admin.register(Vpn)\n    class VpnAdmin(BaseVpnAdmin):\n        # add your changes here\n\n    @admin.register(Device)\n    class DeviceAdmin(BaseDeviceAdmin):\n        # add your changes here\n\n    @admin.register(DeviceGroup)\n    class DeviceGroupAdmin(BaseDeviceGroupAdmin):\n        # add your changes here\n\n    @admin.register(Template)\n    class TemplateAdmin(BaseTemplateAdmin):\n        # add your changes here\n\nsample_connection\n^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from openwisp_controller.connection.admin import CredentialsAdmin as BaseCredentialsAdmin\n    from django.contrib import admin\n    from swapper import load_model\n\n    Credentials = load_model('openwisp_controller', 'Credentials')\n\n    admin.site.unregister(Credentials)\n\n    @admin.register(Device)\n    class CredentialsAdmin(BaseCredentialsAdmin):\n        # add your changes here\n\nsample_geo\n^^^^^^^^^^\n\n.. code-block:: python\n\n    from openwisp_controller.geo.admin import (\n        FloorPlanAdmin as BaseFloorPlanAdmin,\n        LocationAdmin as BaseLocationAdmin\n    )\n    from django.contrib import admin\n    from swapper import load_model\n\n    Location = load_model('openwisp_controller', 'Location')\n    FloorPlan = load_model('openwisp_controller', 'FloorPlan')\n\n    admin.site.unregister(FloorPlan)\n    admin.site.unregister(Location)\n\n    @admin.register(FloorPlan)\n    class FloorPlanAdmin(BaseFloorPlanAdmin):\n        # add your changes here\n\n    @admin.register(Location)\n    class LocationAdmin(BaseLocationAdmin):\n        # add your changes here\n\nsample_pki\n^^^^^^^^^^\n\n.. code-block:: python\n\n    from openwisp_controller.geo.admin import (\n        CaAdmin as BaseCaAdmin,\n        CertAdmin as BaseCertAdmin\n    )\n    from django.contrib import admin\n    from swapper import load_model\n\n    Ca = load_model('openwisp_controller', 'Ca')\n    Cert = load_model('openwisp_controller', 'Cert')\n\n    admin.site.unregister(Ca)\n    admin.site.unregister(Cert)\n\n    @admin.register(Ca)\n    class CaAdmin(BaseCaAdmin):\n        # add your changes here\n\n    @admin.register(Cert)\n    class CertAdmin(BaseCertAdmin):\n        # add your changes here\n\nsample_subnet_division\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from openwisp_controller.subnet_division.admin import (\n        SubnetAdmin as BaseSubnetAdmin,\n        IpAddressAdmin as BaseIpAddressAdmin,\n        SubnetDivisionRuleInlineAdmin as BaseSubnetDivisionRuleInlineAdmin,\n    )\n    from django.contrib import admin\n    from swapper import load_model\n\n    Subnet = load_model('openwisp_ipam', 'Subnet')\n    IpAddress = load_model('openwisp_ipam', 'IpAddress')\n    SubnetDivisionRule = load_model('subnet_division', 'SubnetDivisionRule')\n\n    admin.site.unregister(Subnet)\n    admin.site.unregister(IpAddress)\n    admin.site.unregister(SubnetDivisionRule)\n\n    @admin.register(Subnet)\n    class SubnetAdmin(BaseSubnetAdmin):\n        # add your changes here\n\n    @admin.register(IpAddress)\n    class IpAddressAdmin(BaseIpAddressAdmin):\n        # add your changes here\n\n    @admin.register(SubnetDivisionRule)\n    class SubnetDivisionRuleInlineAdmin(BaseSubnetDivisionRuleInlineAdmin):\n        # add your changes here\n\n11. Create root URL configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from openwisp_controller.config.utils import get_controller_urls\n    from openwisp_controller.geo.utils import get_geo_urls\n    # from .sample_config import views as config_views\n    # from .sample_geo import views as geo_views\n\n    urlpatterns = [\n        # ... other urls in your project ...\n        # Use only when changing controller API views (discussed below)\n        # url(r'^controller/', include((get_controller_urls(config_views), 'controller'), namespace='controller'))\n\n        # Use only when changing geo API views (discussed below)\n        # url(r'^geo/', include((get_geo_urls(geo_views), 'geo'), namespace='geo')),\n\n        # openwisp-controller urls\n        url(r'', include(('openwisp_controller.config.urls', 'config'), namespace='config')),\n        url(r'', include('openwisp_controller.urls')),\n    ]\n\nFor more information about URL configuration in django, please refer to the\n`\"URL dispatcher\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/urls/>`_.\n\n12. Import the automated tests\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen developing a custom application based on this module, it's a good\nidea to import and run the base tests too, so that you can be sure the changes\nyou're introducing are not breaking some of the existing features of *openwisp-controller*.\n\nIn case you need to add breaking changes, you can overwrite the tests defined\nin the base classes to test your own behavior.\n\nSee the tests in sample_app to find out how to do this.\n\n- `project common tests.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/tests.py>`_\n- `sample_config tests.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_config/tests.py>`_\n- `sample_geo tests.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_geo/tests.py>`_\n- `sample_geo pytest.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_geo/pytest.py>`_\n- `sample_pki tests.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_pki/tests.py>`_\n- `sample_connection tests.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_connection/tests.py>`_\n- `sample_subnet_division tests.py <https://github.com/openwisp/openwisp-controller/tree/issues/400-subnet-subdivision-rule/tests/openwisp2/sample_subnet_division/tests.py>`_\n\nFor running the tests, you need to copy fixtures as well:\n\n- Change `sample_config` to your config app's name in `sample_config fixtures <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_config/fixtures/>`_ and paste it in the ``sample_config/fixtures/`` directory.\n\nYou can then run tests with::\n\n    # the --parallel flag is optional\n    ./manage.py test --parallel mycontroller\n\nSubstitute ``mycontroller`` with the name you chose in step 1.\n\nFor more information about automated tests in django, please refer to\n`\"Testing in Django\" <https://docs.djangoproject.com/en/dev/topics/testing/>`_.\n\nOther base classes that can be inherited and extended\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following steps are not required and are intended for more advanced customization.\n\n1. Extending the Controller API Views\n#####################################\n\nExtending the `sample_config/views.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_config/views.py>`_\nis required only when you want to make changes in the controller API,\nRemember to change ``config_views`` location in ``urls.py`` in point 11 for extending views.\n\nFor more information about django views, please refer to the `views section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/views/>`_.\n\n2. Extending the Geo API Views\n##############################\n\nExtending the `sample_geo/views.py <https://github.com/openwisp/openwisp-controller/tree/master/tests/openwisp2/sample_geo/views.py>`_\nis required only when you want to make changes in the geo API,\nRemember to change ``geo_views`` location in ``urls.py`` in point 11 for extending views.\n\nFor more information about django views, please refer to the `views section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/views/>`_.\n\nCustom Subnet Division Rule Types\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt is possible to create your own `subnet division rule types <#subnet-division-app>`_.\nThe rule type determines when subnets and IPs will be provisioned and when they\nwill be destroyed.\n\nYou can create your custom rule types by extending\n``openwisp_controller.subnet_division.rule_types.base.BaseSubnetDivisionRuleType``.\n\nBelow is an example to create a subnet division rule type that will provision\nsubnets and IPs when a new device is created and will delete them upon deletion\nfor that device.\n\n.. code-block:: python\n\n    # In mycontroller/sample_subnet_division/rules_types/custom.py\n\n    from django.db.models.signals import post_delete, post_save\n    from swapper import load_model\n\n    from openwisp_controller.subnet_division.rule_types.base import (\n        BaseSubnetDivisionRuleType,\n    )\n\n    Device = load_model('config', 'Device')\n\n    class CustomRuleType(BaseSubnetDivisionRuleType):\n        # The signal on which provisioning should be triggered\n        provision_signal = post_save\n        # The sender of the provision_signal\n        provision_sender = Device\n        # Dispatch UID for connecting provision_signal to provision_receiver\n        provision_dispatch_uid = 'some_unique_identifier_string'\n\n        # The signal on which deletion should be triggered\n        destroyer_signal = post_delete\n        # The sender of the destroyer_signal\n        destroyer_sender = Device\n        # Dispatch UID for connecting destroyer_signal to destroyer_receiver\n        destroyer_dispatch_uid = 'another_unique_identifier_string'\n\n        # Attribute path to organization_id\n        # Example 1: If organization_id is direct attribute of provision_signal\n        #            sender instance, then\n        #   organization_id_path = 'organization_id'\n        # Example 2: If organization_id is indirect attribute of provision signal\n        #            sender instance, then\n        #   organization_id_path = 'some_attribute.another_intermediate.organization_id'\n        organization_id_path = 'organization_id'\n\n        # Similar to organization_id_path but for the required subnet attribute\n        subnet_path = 'subnet'\n\n        # An intermediate method through which you can specify conditions for provisions\n        @classmethod\n        def should_create_subnets_ips(cls, instance, **kwargs):\n            # Using \"post_save\" provision_signal, the rule should be only\n            # triggered when a new object is created.\n            return kwargs['created']\n\n        # You can define logic to trigger provisioning for existing objects\n        # using following classmethod. By default, BaseSubnetDivisionRuleType\n        # performs no operation for existing objects.\n        @classmethod\n        def provision_for_existing_objects(cls, rule_obj):\n            for device in Device.objects.filter(\n                organization=rule_obj.organization\n            ):\n                cls.provision_receiver(device, created=True)\n\nAfter creating a class for your custom rule type, you will need to set\n`OPENWISP_CONTROLLER_SUBNET_DIVISION_TYPES <#openwisp-controller-subnet-division-types>`_\nsetting as follows:\n\n.. code-block:: python\n\n    OPENWISP_CONTROLLER_SUBNET_DIVISION_TYPES = (                                                                                           |\n       ('openwisp_controller.subnet_division.rule_types.vpn.VpnSubnetDivisionRuleType', 'VPN'),\n       ('openwisp_controller.subnet_division.rule_types.device.DeviceSubnetDivisionRuleType', 'Device'),\n       ('mycontroller.sample_subnet_division.rules_types.custom.CustomRuleType', 'Custom Rule'),\n    )\n\nRegistering new notification types\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can define your own notification types using\n``register_notification_type`` function from OpenWISP Notifications.\n\nFor more information, see the relevant `documentation section about\nregistering notification types in openwisp-notifications\n<https://github.com/openwisp/openwisp-notifications#registering--unregistering-notification-types>`_.\n\nOnce a new notification type is registered, you have to use the\n`\"notify\" signal provided in openwisp-notifications\n<https://github.com/openwisp/openwisp-notifications#sending-notifications>`_\nto send notifications for this type.\n\nContributing\n------------\n\nPlease refer to the `OpenWISP contributing guidelines <http://openwisp.io/docs/developer/contributing.html>`_.\n\nChangelog\n---------\n\nSee `CHANGES <https://github.com/openwisp/openwisp-controller/blob/master/CHANGES.rst>`_.\n\nLicense\n-------\n\nSee `LICENSE <https://github.com/openwisp/openwisp-controller/blob/master/LICENSE>`_.\n\nSupport\n-------\n\nSee `OpenWISP Support Channels <http://openwisp.org/support.html>`_.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/openwisp/openwisp-controller/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://openwisp.org",
    "keywords": "django,netjson,openwrt,networking,openwisp",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openwisp-controller",
    "package_url": "https://pypi.org/project/openwisp-controller/",
    "platform": "Platform Independent",
    "project_url": "https://pypi.org/project/openwisp-controller/",
    "project_urls": {
      "Download": "https://github.com/openwisp/openwisp-controller/releases",
      "Homepage": "http://openwisp.org"
    },
    "release_url": "https://pypi.org/project/openwisp-controller/1.0.3/",
    "requires_dist": [
      "django-sortedm2m (~=3.1.1)",
      "django-reversion (~=4.0.1)",
      "django-x509 (~=1.1.0)",
      "django-taggit (~=2.1.0)",
      "django-loci (~=1.0.1)",
      "django-flat-json-widget (~=0.2.0)",
      "openwisp-utils[rest] (~=1.0.1)",
      "netjsonconfig (~=1.0.1)",
      "openwisp-users (~=1.0.0)",
      "openwisp-notifications (~=1.0.0)",
      "openwisp-ipam (~=1.0.0)",
      "djangorestframework-gis (~=0.18.0)",
      "paramiko[ed25519] (~=2.10.3)",
      "scp (~=0.14.2)",
      "celery (~=5.2.3)",
      "django-cache-memoize (~=0.1)",
      "shortuuid (~=1.0.1)",
      "netaddr (~=0.8.0)"
    ],
    "requires_python": "",
    "summary": "OpenWISP 2 Controller",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14641313,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20694dccea2bf59b4628a161e9fcbaeadf514459962ae72e073256e78f0b30a4",
          "md5": "2541fb75f988fcde4618f8527d250210",
          "sha256": "4e0e4dd1f027cf3b8a064916f4586a9cdbf56ee48d974a1c51d628b336fa9351"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.1.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "2541fb75f988fcde4618f8527d250210",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "requires_python": null,
        "size": 36210,
        "upload_time": "2017-03-08T13:06:01",
        "upload_time_iso_8601": "2017-03-08T13:06:01.556815Z",
        "url": "https://files.pythonhosted.org/packages/20/69/4dccea2bf59b4628a161e9fcbaeadf514459962ae72e073256e78f0b30a4/openwisp_controller-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3abc21178df62b7ac704677dd34632788dfa3fc0cab1af8dbc57e66a5ff2e9f",
          "md5": "9e6bd71b21239e89daf28f9904e4af3f",
          "sha256": "a1fde63c972f51a8e6294fa4d61e0476ac4154b2e9f41dcbcf93bc854b83f637"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "9e6bd71b21239e89daf28f9904e4af3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34561,
        "upload_time": "2017-03-08T13:05:59",
        "upload_time_iso_8601": "2017-03-08T13:05:59.861805Z",
        "url": "https://files.pythonhosted.org/packages/d3/ab/c21178df62b7ac704677dd34632788dfa3fc0cab1af8dbc57e66a5ff2e9f/openwisp-controller-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "893aef1e6cda34008d859b0e3a2beabc29986b258b9c16bc3b08dce6ad0bc6a0",
          "md5": "a8df89b7012c9734461d366f6f9409d4",
          "sha256": "b8d3cfaa6e88250e2a04aaf5d50c8caf03b762bc6af89a9684cdae45b604dda3"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.1.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "a8df89b7012c9734461d366f6f9409d4",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "requires_python": null,
        "size": 37238,
        "upload_time": "2017-03-10T11:38:17",
        "upload_time_iso_8601": "2017-03-10T11:38:17.565669Z",
        "url": "https://files.pythonhosted.org/packages/89/3a/ef1e6cda34008d859b0e3a2beabc29986b258b9c16bc3b08dce6ad0bc6a0/openwisp_controller-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ece7be4542ef7a1ee44fb1227105a39adde5a0bb5f2856d5ee847fa64188215d",
          "md5": "dcd9719bdef99aafe8c79ea14822d365",
          "sha256": "26332baf75477d29a90efb3323297d560f850a745a69d1ab8bb43e2da784aa48"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.1.1.tar.gz",
        "has_sig": true,
        "md5_digest": "dcd9719bdef99aafe8c79ea14822d365",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34825,
        "upload_time": "2017-03-10T11:38:14",
        "upload_time_iso_8601": "2017-03-10T11:38:14.991863Z",
        "url": "https://files.pythonhosted.org/packages/ec/e7/be4542ef7a1ee44fb1227105a39adde5a0bb5f2856d5ee847fa64188215d/openwisp-controller-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4c217f9a4f7f5c3d198a80f1671599ecbdcfdd346915604f3c0d284ee79e47c",
          "md5": "10891586fda8fabaf4fecbc8edbb8d08",
          "sha256": "0f44bb62fea039fd0df4debaa3f8955dfda80df9622dfa14c788fa5194e81e0d"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.1.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "10891586fda8fabaf4fecbc8edbb8d08",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "requires_python": null,
        "size": 37943,
        "upload_time": "2017-03-15T18:07:22",
        "upload_time_iso_8601": "2017-03-15T18:07:22.173812Z",
        "url": "https://files.pythonhosted.org/packages/f4/c2/17f9a4f7f5c3d198a80f1671599ecbdcfdd346915604f3c0d284ee79e47c/openwisp_controller-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04eab5bef99cd49c538b338a6a96b75a74ee8b71e5a43fc80a3d7b73cf7fadeb",
          "md5": "a031c503baf11630a1178de37c576f2f",
          "sha256": "470be86fe7ae77e6ebbed25e9c52a1f3ab569af75434617a3b1eb1d723a4ddc5"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.1.2.tar.gz",
        "has_sig": true,
        "md5_digest": "a031c503baf11630a1178de37c576f2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35222,
        "upload_time": "2017-03-15T18:07:20",
        "upload_time_iso_8601": "2017-03-15T18:07:20.337849Z",
        "url": "https://files.pythonhosted.org/packages/04/ea/b5bef99cd49c538b338a6a96b75a74ee8b71e5a43fc80a3d7b73cf7fadeb/openwisp-controller-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31dc1151c8c67bfedac275cf03c8d1d4f2b16628382279b47c53fb4bd4b4de3d",
          "md5": "2805badfbaeefdc8850e91a47f73a67c",
          "sha256": "2c9da2c6fe21538174c6f0750db74b25faab28cc890f2352966cb2e7ab429e7f"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.1.3-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "2805badfbaeefdc8850e91a47f73a67c",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "requires_python": null,
        "size": 37955,
        "upload_time": "2017-04-11T14:29:07",
        "upload_time_iso_8601": "2017-04-11T14:29:07.785936Z",
        "url": "https://files.pythonhosted.org/packages/31/dc/1151c8c67bfedac275cf03c8d1d4f2b16628382279b47c53fb4bd4b4de3d/openwisp_controller-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8954ab2a04af18998366b5294790a13d31adb5d3c11aa18aadfa6db64f3f8e92",
          "md5": "584fc694a70176c3b1faf8d0f99816bd",
          "sha256": "5ab397402516a8f58b16830d6a1c66d5da7a360312744f215312533cc431f725"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.1.3.tar.gz",
        "has_sig": true,
        "md5_digest": "584fc694a70176c3b1faf8d0f99816bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35301,
        "upload_time": "2017-04-11T14:29:05",
        "upload_time_iso_8601": "2017-04-11T14:29:05.969209Z",
        "url": "https://files.pythonhosted.org/packages/89/54/ab2a04af18998366b5294790a13d31adb5d3c11aa18aadfa6db64f3f8e92/openwisp-controller-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19d90e4ae59ff9ded8e58ddf087e0002688666d66b14a4bead4e9ccd89e27d50",
          "md5": "47985844974e137661adb9d87a5d84d7",
          "sha256": "f445a1e36522f841b44ce4e54575463ccc72b8ed40aaefbc1f5275fe19838652"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.1.4-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "47985844974e137661adb9d87a5d84d7",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "requires_python": null,
        "size": 38094,
        "upload_time": "2017-04-21T16:21:55",
        "upload_time_iso_8601": "2017-04-21T16:21:55.748288Z",
        "url": "https://files.pythonhosted.org/packages/19/d9/0e4ae59ff9ded8e58ddf087e0002688666d66b14a4bead4e9ccd89e27d50/openwisp_controller-0.1.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d413d1728b61ddb649381e3b9988e26a8f9c7aedf0c057d0a3a5215c9b361b22",
          "md5": "266db7cba55a1c833a3d61ad9460eb7a",
          "sha256": "d89e1f8c73c2b7d53c94e9dff83e80431c8c3c6fa1291d1d76f995a126660581"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.1.4.tar.gz",
        "has_sig": true,
        "md5_digest": "266db7cba55a1c833a3d61ad9460eb7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35427,
        "upload_time": "2017-04-21T16:21:52",
        "upload_time_iso_8601": "2017-04-21T16:21:52.791219Z",
        "url": "https://files.pythonhosted.org/packages/d4/13/d1728b61ddb649381e3b9988e26a8f9c7aedf0c057d0a3a5215c9b361b22/openwisp-controller-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "537666025a65973d0e76a48280ee621076982a6841da1ac32341e0e75dd661ff",
          "md5": "c440cfca8a1037eb875e5b579d4395c6",
          "sha256": "61fdc5e340ee0387b76a68b73e500af8ccadf0b3750181ee00452cf341b2bad9"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.2.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "c440cfca8a1037eb875e5b579d4395c6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 44680,
        "upload_time": "2017-05-24T20:39:34",
        "upload_time_iso_8601": "2017-05-24T20:39:34.527971Z",
        "url": "https://files.pythonhosted.org/packages/53/76/66025a65973d0e76a48280ee621076982a6841da1ac32341e0e75dd661ff/openwisp_controller-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ecc138cc356a6a5ed62082ecd5b97262248e05c0831cf00cdf63881facb05dd",
          "md5": "f07efda079f9344bbd2b48359dfd95ff",
          "sha256": "c2d7cd0aba0aa71c5fac7f7707d290804aedbf4a1de327bbf496e4f12e5d54a0"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.2.0.tar.gz",
        "has_sig": true,
        "md5_digest": "f07efda079f9344bbd2b48359dfd95ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38262,
        "upload_time": "2017-05-24T20:39:36",
        "upload_time_iso_8601": "2017-05-24T20:39:36.831680Z",
        "url": "https://files.pythonhosted.org/packages/3e/cc/138cc356a6a5ed62082ecd5b97262248e05c0831cf00cdf63881facb05dd/openwisp-controller-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bac63728cc063d296470e5dfe1d8649315059709853b4f16feed2e083fccbae",
          "md5": "97a833e1d74b7ad0a10c98ec672e0704",
          "sha256": "57fb9633a4e1081a08c59b0787a6615a17656d2e4eaadc2b9b6ee9f3c761bc80"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.2.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "97a833e1d74b7ad0a10c98ec672e0704",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 43604,
        "upload_time": "2017-07-05T11:44:35",
        "upload_time_iso_8601": "2017-07-05T11:44:35.093092Z",
        "url": "https://files.pythonhosted.org/packages/1b/ac/63728cc063d296470e5dfe1d8649315059709853b4f16feed2e083fccbae/openwisp_controller-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52342d41618a6d43a3369477f1fd39a9750adb35874e8e8e948497d17648ad1d",
          "md5": "e914bb5208b4953102683372a5776044",
          "sha256": "68f41158f447ed732e884bc1b68d4fb4e5c68ee64837ddca791e28b737efe70f"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.2.1.tar.gz",
        "has_sig": true,
        "md5_digest": "e914bb5208b4953102683372a5776044",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38001,
        "upload_time": "2017-07-05T11:44:32",
        "upload_time_iso_8601": "2017-07-05T11:44:32.950571Z",
        "url": "https://files.pythonhosted.org/packages/52/34/2d41618a6d43a3369477f1fd39a9750adb35874e8e8e948497d17648ad1d/openwisp-controller-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ceb84023a6e255b4a4e0a7b50e3879d8dcc37feb48878c4bb276d1d759c68613",
          "md5": "2c1a5cddde7f81be31378ef56e990f23",
          "sha256": "318c6cbec5e4360f5560d0c40f6e7c54548acb7a30342cfe01fa76d6dafd08ec"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.2.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "2c1a5cddde7f81be31378ef56e990f23",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 43297,
        "upload_time": "2017-07-10T16:10:04",
        "upload_time_iso_8601": "2017-07-10T16:10:04.507938Z",
        "url": "https://files.pythonhosted.org/packages/ce/b8/4023a6e255b4a4e0a7b50e3879d8dcc37feb48878c4bb276d1d759c68613/openwisp_controller-0.2.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "664bc1bef5c502ae227ace1c767a8d867751aeace1d2cc727ca2933d6afd39b3",
          "md5": "9edbe07d5072db7758a8cd59c152888b",
          "sha256": "948d4774e55f2c8156f6505f76f47dac2f653a33b165cd7518199be46f157e78"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.2.2.tar.gz",
        "has_sig": true,
        "md5_digest": "9edbe07d5072db7758a8cd59c152888b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37987,
        "upload_time": "2017-07-10T16:10:02",
        "upload_time_iso_8601": "2017-07-10T16:10:02.667592Z",
        "url": "https://files.pythonhosted.org/packages/66/4b/c1bef5c502ae227ace1c767a8d867751aeace1d2cc727ca2933d6afd39b3/openwisp-controller-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9307d0a6e5c5ddf59484b397b22b953e9808465f981f05b9568c270e33f66eea",
          "md5": "08eb1e8cae56ac35ccdc22f0eb781c42",
          "sha256": "0e8b2445acfec510e7b0dc4b383020f67ed4f0330698c7e0d98ce8f924d0143d"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.2.3-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "08eb1e8cae56ac35ccdc22f0eb781c42",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 41916,
        "upload_time": "2017-08-29T12:51:59",
        "upload_time_iso_8601": "2017-08-29T12:51:59.543730Z",
        "url": "https://files.pythonhosted.org/packages/93/07/d0a6e5c5ddf59484b397b22b953e9808465f981f05b9568c270e33f66eea/openwisp_controller-0.2.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "586b189987c97762c6064a037c3b4eb996259329e24e51f4905fd16a4a7764e2",
          "md5": "67b2e345d0d4e17c6b45ffa1d82b09a2",
          "sha256": "445d37ae4cd752bc0b38dc6cd0be55b5c2e694d8dccdc84fa9411a482bee3fb5"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.2.3.tar.gz",
        "has_sig": true,
        "md5_digest": "67b2e345d0d4e17c6b45ffa1d82b09a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37558,
        "upload_time": "2017-08-29T12:51:57",
        "upload_time_iso_8601": "2017-08-29T12:51:57.224769Z",
        "url": "https://files.pythonhosted.org/packages/58/6b/189987c97762c6064a037c3b4eb996259329e24e51f4905fd16a4a7764e2/openwisp-controller-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "409116782146d861f65be0b5c9d94b79926578d80b88e036c64ddf4380c5d392",
          "md5": "f387ddf16223e2606d6e9573fbb55f70",
          "sha256": "061c6f7d0a65b0455fabb591b47898e4849f5d6540c2f00e33f5c90d9c217e3f"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.2.4-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "f387ddf16223e2606d6e9573fbb55f70",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 43235,
        "upload_time": "2017-11-07T15:58:56",
        "upload_time_iso_8601": "2017-11-07T15:58:56.006758Z",
        "url": "https://files.pythonhosted.org/packages/40/91/16782146d861f65be0b5c9d94b79926578d80b88e036c64ddf4380c5d392/openwisp_controller-0.2.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a69248af99cab84556b0d284125614d9e3796ad954cd9738a8ae6a2137417979",
          "md5": "8c5147a1a21fddc1c0e5199635c40389",
          "sha256": "154b541888a79c77fab183fd3faceed6548a2029476250abac9e545db57f8ae0"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.2.4.tar.gz",
        "has_sig": true,
        "md5_digest": "8c5147a1a21fddc1c0e5199635c40389",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38131,
        "upload_time": "2017-11-07T15:58:53",
        "upload_time_iso_8601": "2017-11-07T15:58:53.847096Z",
        "url": "https://files.pythonhosted.org/packages/a6/92/48af99cab84556b0d284125614d9e3796ad954cd9738a8ae6a2137417979/openwisp-controller-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd603197757f75b4ff80ec96ddad001a68f4484088527d7cbd13f684de016ba7",
          "md5": "5858c1c0edbac0bb72290dd3da4ab75c",
          "sha256": "b45d105175784aa2d5c5604a80d88894352acff70edab42ef2e2581974fd0a3e"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.2.5-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "5858c1c0edbac0bb72290dd3da4ab75c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 44000,
        "upload_time": "2017-12-02T20:56:19",
        "upload_time_iso_8601": "2017-12-02T20:56:19.339971Z",
        "url": "https://files.pythonhosted.org/packages/cd/60/3197757f75b4ff80ec96ddad001a68f4484088527d7cbd13f684de016ba7/openwisp_controller-0.2.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a64badb7409e9b48fdd29494491989626934224948deace8d71663912089379a",
          "md5": "2907179abdf5012cf8d877d07395a1e2",
          "sha256": "2e87c0bab70b6c4326a6a99305153879e39db3547d66fc45c2d2ac97ddfeafea"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.2.5.tar.gz",
        "has_sig": true,
        "md5_digest": "2907179abdf5012cf8d877d07395a1e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38659,
        "upload_time": "2017-12-02T20:56:15",
        "upload_time_iso_8601": "2017-12-02T20:56:15.388498Z",
        "url": "https://files.pythonhosted.org/packages/a6/4b/adb7409e9b48fdd29494491989626934224948deace8d71663912089379a/openwisp-controller-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56be2e53958f13b818409e01ed057cfd2d0443003b79246b7a3382769b72b86a",
          "md5": "eb23c85dcaf2471bb9ea15b61f2538a7",
          "sha256": "23344c4a387d19e913491197f66c8d69847035abe61bb7d288427a66ecb8e3ae"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.3-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "eb23c85dcaf2471bb9ea15b61f2538a7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 55918,
        "upload_time": "2017-12-17T17:14:02",
        "upload_time_iso_8601": "2017-12-17T17:14:02.460443Z",
        "url": "https://files.pythonhosted.org/packages/56/be/2e53958f13b818409e01ed057cfd2d0443003b79246b7a3382769b72b86a/openwisp_controller-0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "212a4f669191334c520394f61360eb058e8ec66bfc610f1bcbaa000373c55721",
          "md5": "eb14ba38bc3bedcab77d6ba6d9fab7d5",
          "sha256": "22ca8fda87fed894fcde60f3398e7299e11411b21b783d992d1732ec958fe23d"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.3.tar.gz",
        "has_sig": true,
        "md5_digest": "eb14ba38bc3bedcab77d6ba6d9fab7d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44863,
        "upload_time": "2017-12-17T17:14:00",
        "upload_time_iso_8601": "2017-12-17T17:14:00.055579Z",
        "url": "https://files.pythonhosted.org/packages/21/2a/4f669191334c520394f61360eb058e8ec66bfc610f1bcbaa000373c55721/openwisp-controller-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e92ce2408c0228fd75dac392d4396bc6d91a7d85bb35f8e8eb99fe88750accf",
          "md5": "c7d7bfe7db09f27f9a705159987e7ec6",
          "sha256": "b9bdfab64a998ccb4c1ed778d9d91d9718e1b53723f059ba5b9649bee1505209"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.3.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "c7d7bfe7db09f27f9a705159987e7ec6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 56049,
        "upload_time": "2017-12-20T16:59:56",
        "upload_time_iso_8601": "2017-12-20T16:59:56.669574Z",
        "url": "https://files.pythonhosted.org/packages/9e/92/ce2408c0228fd75dac392d4396bc6d91a7d85bb35f8e8eb99fe88750accf/openwisp_controller-0.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "079d53b9f158080b701dfcf17828baeaa12798279dbae69c159a07b15677f162",
          "md5": "9531cda08707d579d3ccd5659e390b5f",
          "sha256": "52b75710e1ccbf5287b01e71f4376e6bd4032922ce03d45d7fc6fbaf5df10e13"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.3.1.tar.gz",
        "has_sig": true,
        "md5_digest": "9531cda08707d579d3ccd5659e390b5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45048,
        "upload_time": "2017-12-20T16:59:53",
        "upload_time_iso_8601": "2017-12-20T16:59:53.668246Z",
        "url": "https://files.pythonhosted.org/packages/07/9d/53b9f158080b701dfcf17828baeaa12798279dbae69c159a07b15677f162/openwisp-controller-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7ffdaf25381199e9c8b05ccdcc2c8db218c68f621e9e00d884e99cc4a3d669a",
          "md5": "4afeba31b5964db01dd7a420ffe2d685",
          "sha256": "3ead4b88fdb8fb87824deb791a3db811c28da214f09a28ba67e557767413b79a"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.3.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "4afeba31b5964db01dd7a420ffe2d685",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 58552,
        "upload_time": "2018-02-19T14:34:03",
        "upload_time_iso_8601": "2018-02-19T14:34:03.214422Z",
        "url": "https://files.pythonhosted.org/packages/b7/ff/daf25381199e9c8b05ccdcc2c8db218c68f621e9e00d884e99cc4a3d669a/openwisp_controller-0.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69a8212f6d2450196f428fc8b43dd7622972886253ae07d877860b450dcaa1bd",
          "md5": "264b0346e1db7575b71d7339608d37b7",
          "sha256": "715fb3be9f77c722380286175af2b1900d045c84382c042998f593c352c3bf91"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.3.2.tar.gz",
        "has_sig": true,
        "md5_digest": "264b0346e1db7575b71d7339608d37b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45696,
        "upload_time": "2018-02-19T14:34:18",
        "upload_time_iso_8601": "2018-02-19T14:34:18.124823Z",
        "url": "https://files.pythonhosted.org/packages/69/a8/212f6d2450196f428fc8b43dd7622972886253ae07d877860b450dcaa1bd/openwisp-controller-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b8ffcdccf96ea5999e967adba6d2e62ceda6fd002dd0dd9a01ef951a7b28417",
          "md5": "e0f5be1e0729e4489a722cee240b89e4",
          "sha256": "227aa6d229d6bcbb32a4e3b4447aeab5fc33caf82c98e1d0cb2acde52def88af"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.4-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "e0f5be1e0729e4489a722cee240b89e4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 95917,
        "upload_time": "2020-01-09T20:06:28",
        "upload_time_iso_8601": "2020-01-09T20:06:28.712841Z",
        "url": "https://files.pythonhosted.org/packages/3b/8f/fcdccf96ea5999e967adba6d2e62ceda6fd002dd0dd9a01ef951a7b28417/openwisp_controller-0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69e5f7b3b28dc55944f94211744e932086373f7910cf9782733d59222f6aae87",
          "md5": "10591aeec95704ca79948394bf829314",
          "sha256": "eef358afa698b6b6c8ed7224bbced8acd1c9a2a34af1e8dd47dfd579743ae730"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.4.tar.gz",
        "has_sig": true,
        "md5_digest": "10591aeec95704ca79948394bf829314",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64632,
        "upload_time": "2020-01-09T20:06:31",
        "upload_time_iso_8601": "2020-01-09T20:06:31.985659Z",
        "url": "https://files.pythonhosted.org/packages/69/e5/f7b3b28dc55944f94211744e932086373f7910cf9782733d59222f6aae87/openwisp-controller-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3866acb91da4fba9227e10aef817dc507fd83f6b3b80068a24a9417cf830d31",
          "md5": "c31206fa9bbf264b7a0b160edd014ee4",
          "sha256": "51bef60901382bf61dd5f332616c032d10e1a0c52bbb2eb5b8f679bdaa85a93a"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.5-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "c31206fa9bbf264b7a0b160edd014ee4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 97724,
        "upload_time": "2020-02-05T15:24:19",
        "upload_time_iso_8601": "2020-02-05T15:24:19.085757Z",
        "url": "https://files.pythonhosted.org/packages/c3/86/6acb91da4fba9227e10aef817dc507fd83f6b3b80068a24a9417cf830d31/openwisp_controller-0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b38f9a037236412f9a843fb93c9d612d4198d96974cd47339231fb05804937a9",
          "md5": "edb4b12737200862cc7d17488495ab59",
          "sha256": "8349208e57571798ce4be0598de3665cc14ac2ee30fcaf7cfda39624214c2ca0"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.5.tar.gz",
        "has_sig": true,
        "md5_digest": "edb4b12737200862cc7d17488495ab59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62384,
        "upload_time": "2020-02-05T15:24:21",
        "upload_time_iso_8601": "2020-02-05T15:24:21.817737Z",
        "url": "https://files.pythonhosted.org/packages/b3/8f/9a037236412f9a843fb93c9d612d4198d96974cd47339231fb05804937a9/openwisp-controller-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14efb9bbc14eb58c56ac9a5a93db88edfe2468f5e76862d4ed55f2031cb6f2d3",
          "md5": "8d07019372423cb72430d92be208a8ba",
          "sha256": "ba345fbbda276aeb1c181bdf92cd08cfad982abb8f77596393854bca8ab29dc3"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.5.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "8d07019372423cb72430d92be208a8ba",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 99777,
        "upload_time": "2020-02-29T02:43:58",
        "upload_time_iso_8601": "2020-02-29T02:43:58.599014Z",
        "url": "https://files.pythonhosted.org/packages/14/ef/b9bbc14eb58c56ac9a5a93db88edfe2468f5e76862d4ed55f2031cb6f2d3/openwisp_controller-0.5.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82bc01763daa8a107bf4db634e673f4ec47a0e46b5df913ef5b48f452d0fc64f",
          "md5": "992e30e5c1967a90c64b9959a66d4241",
          "sha256": "ea4df79d1971d0c0c1f4941f46445722ae63e3ecfb0063b5e2aba2ad818bf8f6"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.5.1.tar.gz",
        "has_sig": true,
        "md5_digest": "992e30e5c1967a90c64b9959a66d4241",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63148,
        "upload_time": "2020-02-29T02:44:04",
        "upload_time_iso_8601": "2020-02-29T02:44:04.534776Z",
        "url": "https://files.pythonhosted.org/packages/82/bc/01763daa8a107bf4db634e673f4ec47a0e46b5df913ef5b48f452d0fc64f/openwisp-controller-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0ef47084336956d46b6385d98cf41840779710bcd52c1533f57ef551f92c623",
          "md5": "515c236941aa579b6c67f719f5c2c15a",
          "sha256": "1a7b192b3bd2804403356d9311db11582d56556537b97b9af333d13d71f0cb1e"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.5.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "515c236941aa579b6c67f719f5c2c15a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 100421,
        "upload_time": "2020-03-18T21:47:01",
        "upload_time_iso_8601": "2020-03-18T21:47:01.948992Z",
        "url": "https://files.pythonhosted.org/packages/d0/ef/47084336956d46b6385d98cf41840779710bcd52c1533f57ef551f92c623/openwisp_controller-0.5.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4d2ed4764bf153ff7b09a473ca9d2c144ae04c60c033bd0f354a5b97607f24e",
          "md5": "61fb7250f29606366cc2445453bba172",
          "sha256": "49a7934bbac636b62d0452280651bc0463867c267be52b1acdaab78e32c4d66b"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.5.2.tar.gz",
        "has_sig": true,
        "md5_digest": "61fb7250f29606366cc2445453bba172",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63631,
        "upload_time": "2020-03-18T21:47:05",
        "upload_time_iso_8601": "2020-03-18T21:47:05.494436Z",
        "url": "https://files.pythonhosted.org/packages/a4/d2/ed4764bf153ff7b09a473ca9d2c144ae04c60c033bd0f354a5b97607f24e/openwisp-controller-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80d7074369e20e32d1bf24a1c9733873df4b45b8702355d7cb8365d066891f0f",
          "md5": "13080a87b7292231b4ea501d8a2cfa70",
          "sha256": "d48062102975024b5500912f6052cad9f1bcf516d39845236a9dee7e9c697470"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.6-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "13080a87b7292231b4ea501d8a2cfa70",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 101211,
        "upload_time": "2020-04-02T17:58:46",
        "upload_time_iso_8601": "2020-04-02T17:58:46.382741Z",
        "url": "https://files.pythonhosted.org/packages/80/d7/074369e20e32d1bf24a1c9733873df4b45b8702355d7cb8365d066891f0f/openwisp_controller-0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32331a489bd84c1b6d977fe6e763f761d9b16bad18f06314043fb2e3d65c115c",
          "md5": "966c027a87de9832686300a609614ed1",
          "sha256": "600321dc632f0a0cebeba902eaf793b65c145a0ce5494dd6c93a159c02db0db4"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.6.tar.gz",
        "has_sig": true,
        "md5_digest": "966c027a87de9832686300a609614ed1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 67417,
        "upload_time": "2020-04-02T17:58:52",
        "upload_time_iso_8601": "2020-04-02T17:58:52.598877Z",
        "url": "https://files.pythonhosted.org/packages/32/33/1a489bd84c1b6d977fe6e763f761d9b16bad18f06314043fb2e3d65c115c/openwisp-controller-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1502914827087b44e51cbcfa4377922a212a4a05a1cf212e3b01db82b581d71",
          "md5": "0d46ed7ceaf520a4d1b7d846187f00cc",
          "sha256": "dd3ba44322eba3368ab8ddd862fea9c1e58731a932d7f31e9059af0f533be596"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.7-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "0d46ed7ceaf520a4d1b7d846187f00cc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 106636,
        "upload_time": "2020-07-01T01:32:49",
        "upload_time_iso_8601": "2020-07-01T01:32:49.713042Z",
        "url": "https://files.pythonhosted.org/packages/e1/50/2914827087b44e51cbcfa4377922a212a4a05a1cf212e3b01db82b581d71/openwisp_controller-0.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6610dc24cbc616a4598b83deac0c140c1a2325d52af209377b1d8f883f399e4a",
          "md5": "824e27c8b889bf2fdcaa7f26ed7f74e6",
          "sha256": "5d549319caf92a894a9250a8d09f517c64c28456fa6773c242e1c816a69ec7e2"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.7.tar.gz",
        "has_sig": true,
        "md5_digest": "824e27c8b889bf2fdcaa7f26ed7f74e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72185,
        "upload_time": "2020-07-01T01:32:54",
        "upload_time_iso_8601": "2020-07-01T01:32:54.044947Z",
        "url": "https://files.pythonhosted.org/packages/66/10/dc24cbc616a4598b83deac0c140c1a2325d52af209377b1d8f883f399e4a/openwisp-controller-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2686f01e435b6c28c9bcc5a0e1e9c029454350cc7648654619db323f6c08d2b",
          "md5": "bacfb17f1a972b29c0ed13afc9fa13e1",
          "sha256": "2552f1baaf331b6161783bb6d2a7c4a9fe1fd792d4ae0b0daaf49340c1e54e4c"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.7.post1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "bacfb17f1a972b29c0ed13afc9fa13e1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 106718,
        "upload_time": "2020-07-01T02:50:31",
        "upload_time_iso_8601": "2020-07-01T02:50:31.968242Z",
        "url": "https://files.pythonhosted.org/packages/c2/68/6f01e435b6c28c9bcc5a0e1e9c029454350cc7648654619db323f6c08d2b/openwisp_controller-0.7.post1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5a96385d45d37f208c8ab060414e0a5b9f5c882ac9d2a2934f2e45609799a30",
          "md5": "305319a737d0077e9e5baef5a21f39d9",
          "sha256": "3c2df598876c87f3803a30be38af6a94573430aa5325f10375ee9e757bb9e40b"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.7.post1.tar.gz",
        "has_sig": true,
        "md5_digest": "305319a737d0077e9e5baef5a21f39d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72458,
        "upload_time": "2020-07-01T02:50:35",
        "upload_time_iso_8601": "2020-07-01T02:50:35.894926Z",
        "url": "https://files.pythonhosted.org/packages/d5/a9/6385d45d37f208c8ab060414e0a5b9f5c882ac9d2a2934f2e45609799a30/openwisp-controller-0.7.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfe506039863cd43b968fe9a59f18cc95a63936c124e6c0e13131f9f8842eb85",
          "md5": "4bb347923f56cb2aa6cec4f567b8c151",
          "sha256": "b63908c47208af2815577666540fcac915726702d3f33c82926843a280377d8a"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.8-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "4bb347923f56cb2aa6cec4f567b8c151",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 492941,
        "upload_time": "2020-11-23T19:11:07",
        "upload_time_iso_8601": "2020-11-23T19:11:07.063160Z",
        "url": "https://files.pythonhosted.org/packages/cf/e5/06039863cd43b968fe9a59f18cc95a63936c124e6c0e13131f9f8842eb85/openwisp_controller-0.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7de22d7986731e370a148b1d04c4d9c5798c471f8c5e8482160e014f1a7bdb5",
          "md5": "380c295b520533ea74b45bdb00bb4f68",
          "sha256": "95c1fae87f8b12dca0f2545eb56d231a82f6e08be9cbe724412e58ddcb76e374"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.8.tar.gz",
        "has_sig": true,
        "md5_digest": "380c295b520533ea74b45bdb00bb4f68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 464239,
        "upload_time": "2020-11-23T19:11:10",
        "upload_time_iso_8601": "2020-11-23T19:11:10.167053Z",
        "url": "https://files.pythonhosted.org/packages/e7/de/22d7986731e370a148b1d04c4d9c5798c471f8c5e8482160e014f1a7bdb5/openwisp-controller-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73406248ebe8722b4868c7d6a63800cf785b3950c75a6d4252f5ccf2f8121005",
          "md5": "07401356160bc23ab7f19b5a6d42f5ee",
          "sha256": "a4b940150b4ae008627b578efac663ff43cd5fec42aa1186406e95c2ba54b40e"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.8.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07401356160bc23ab7f19b5a6d42f5ee",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 491926,
        "upload_time": "2020-12-01T20:48:06",
        "upload_time_iso_8601": "2020-12-01T20:48:06.862553Z",
        "url": "https://files.pythonhosted.org/packages/73/40/6248ebe8722b4868c7d6a63800cf785b3950c75a6d4252f5ccf2f8121005/openwisp_controller-0.8.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e433a87a93b5f18f92f2c5c40379c36e211939687e22c5a471181aeae0ad2fd",
          "md5": "c39efe64e845c59a33182f987a6aad9c",
          "sha256": "8846fb8df112816a3a84be5de8bc9c687f8628b1065877fdf28237fba2cf9166"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c39efe64e845c59a33182f987a6aad9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 463646,
        "upload_time": "2020-12-01T20:48:12",
        "upload_time_iso_8601": "2020-12-01T20:48:12.783834Z",
        "url": "https://files.pythonhosted.org/packages/2e/43/3a87a93b5f18f92f2c5c40379c36e211939687e22c5a471181aeae0ad2fd/openwisp-controller-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "759c5d08361a2074c4c4f4a41a308041f8d5722fe9f1c975d6b641f20660e2ac",
          "md5": "12ea6ed0e4b0fa14493cc20843c46890",
          "sha256": "c72c9e8e107606453c8b16c70c6fb2b4a3a5397578514f4aa55cbea6f2300457"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.8.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "12ea6ed0e4b0fa14493cc20843c46890",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 493150,
        "upload_time": "2020-12-11T20:32:21",
        "upload_time_iso_8601": "2020-12-11T20:32:21.528948Z",
        "url": "https://files.pythonhosted.org/packages/75/9c/5d08361a2074c4c4f4a41a308041f8d5722fe9f1c975d6b641f20660e2ac/openwisp_controller-0.8.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c80d02762e0ebf901be5518918ce0fcca9d4bd08a8630e6b0a88657f9e088b1",
          "md5": "6ec1b291a10ec1c2aea97b19688bb76c",
          "sha256": "3516a5602e5578540c7f5cc5c2935630180db6f656547bfe239ea6fb69d3e6ee"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.8.2.tar.gz",
        "has_sig": true,
        "md5_digest": "6ec1b291a10ec1c2aea97b19688bb76c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 464491,
        "upload_time": "2020-12-11T20:32:30",
        "upload_time_iso_8601": "2020-12-11T20:32:30.666289Z",
        "url": "https://files.pythonhosted.org/packages/7c/80/d02762e0ebf901be5518918ce0fcca9d4bd08a8630e6b0a88657f9e088b1/openwisp-controller-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b515acd087cea0638069108b58d3f63dcd0b7ef086898b83bdd667c323ac5ebf",
          "md5": "06a075c7745e8ad4f48ececf082619aa",
          "sha256": "9bc9c9447af6aa66c6da0b1a9eedf636c8b0eef0dd536e29d20f6beaa0e9aa51"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.8.3-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "06a075c7745e8ad4f48ececf082619aa",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 490127,
        "upload_time": "2020-12-18T04:15:01",
        "upload_time_iso_8601": "2020-12-18T04:15:01.290793Z",
        "url": "https://files.pythonhosted.org/packages/b5/15/acd087cea0638069108b58d3f63dcd0b7ef086898b83bdd667c323ac5ebf/openwisp_controller-0.8.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "688c3ad57af0150254cef6b289de6853eedfa199651cc089849a88e8fca12641",
          "md5": "66fcaaa8adfd41c999adb7cd2bc54f61",
          "sha256": "836fcae3f41f8402c516f7cd89cbe1452e220f174d0f2d5f1d07707b69273b44"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.8.3.tar.gz",
        "has_sig": true,
        "md5_digest": "66fcaaa8adfd41c999adb7cd2bc54f61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 463333,
        "upload_time": "2020-12-18T04:15:09",
        "upload_time_iso_8601": "2020-12-18T04:15:09.902974Z",
        "url": "https://files.pythonhosted.org/packages/68/8c/3ad57af0150254cef6b289de6853eedfa199651cc089849a88e8fca12641/openwisp-controller-0.8.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2df206afb4c4467c4821f44df31d21a7499b5321570b42af32755610fba4a74",
          "md5": "d369c82b8f30c4ccb20e3d7123d3380e",
          "sha256": "cdc56f516e10c398b4187bdad5c7bcbae70477bb312a73b6173d902ce74d68a8"
        },
        "downloads": -1,
        "filename": "openwisp_controller-0.8.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d369c82b8f30c4ccb20e3d7123d3380e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 492231,
        "upload_time": "2021-04-09T20:39:47",
        "upload_time_iso_8601": "2021-04-09T20:39:47.248845Z",
        "url": "https://files.pythonhosted.org/packages/f2/df/206afb4c4467c4821f44df31d21a7499b5321570b42af32755610fba4a74/openwisp_controller-0.8.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1f15c1c4172ab81a6afea6fa2d8f8e94bcb48db9fa4b94550ab8f51cc0f91ac",
          "md5": "ccf638eb7cd7293f3242615dc1dc8f3c",
          "sha256": "f44a2b84d5f5d3fbdcb42fed8e4760c6d1dadd9bdf9a13aff3c98c269943aa67"
        },
        "downloads": -1,
        "filename": "openwisp-controller-0.8.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ccf638eb7cd7293f3242615dc1dc8f3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 465764,
        "upload_time": "2021-04-09T20:39:51",
        "upload_time_iso_8601": "2021-04-09T20:39:51.022923Z",
        "url": "https://files.pythonhosted.org/packages/a1/f1/5c1c4172ab81a6afea6fa2d8f8e94bcb48db9fa4b94550ab8f51cc0f91ac/openwisp-controller-0.8.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd6f2279704cedc967d7170622bb9032385e0c5db10fa7764ab913067d03ad8a",
          "md5": "a553a4ba939772aff6d5594dc67a2582",
          "sha256": "0a75452d2e580e1488b7d345a97efc1867780d8d9ada5ea4c8e408f1d77c2e74"
        },
        "downloads": -1,
        "filename": "openwisp_controller-1.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "a553a4ba939772aff6d5594dc67a2582",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 646031,
        "upload_time": "2022-04-29T22:03:22",
        "upload_time_iso_8601": "2022-04-29T22:03:22.021682Z",
        "url": "https://files.pythonhosted.org/packages/bd/6f/2279704cedc967d7170622bb9032385e0c5db10fa7764ab913067d03ad8a/openwisp_controller-1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2616b3d4040c68bc46b99ae0a85f43d7c93dd6d1026cdd909f5b880b2486fe77",
          "md5": "1ee0f9303899852d03c53697ab7eea5b",
          "sha256": "8b9ebac4b4cec833fb52fb27d900c11097e8622451430b4bf472f0b6479848b7"
        },
        "downloads": -1,
        "filename": "openwisp-controller-1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "1ee0f9303899852d03c53697ab7eea5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 618030,
        "upload_time": "2022-04-29T22:03:27",
        "upload_time_iso_8601": "2022-04-29T22:03:27.568438Z",
        "url": "https://files.pythonhosted.org/packages/26/16/b3d4040c68bc46b99ae0a85f43d7c93dd6d1026cdd909f5b880b2486fe77/openwisp-controller-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d23efdca25f64418bc28d419e9458d66121679a221d8e3fc5e46226d26ab165f",
          "md5": "89ea7bd7d6bfa39bc41499406da5d4ae",
          "sha256": "9115be6ca0547b310f3fae951bd8255ed6b2979c96b88b00e19bf3f0156193ea"
        },
        "downloads": -1,
        "filename": "openwisp_controller-1.0.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "89ea7bd7d6bfa39bc41499406da5d4ae",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 646636,
        "upload_time": "2022-05-11T19:44:03",
        "upload_time_iso_8601": "2022-05-11T19:44:03.661459Z",
        "url": "https://files.pythonhosted.org/packages/d2/3e/fdca25f64418bc28d419e9458d66121679a221d8e3fc5e46226d26ab165f/openwisp_controller-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7101dff570c00c6903e3db71e3b4f1f076c623e15ccbc59841e32712cfdb7e63",
          "md5": "1d338ad826cb75c8e292584d0df95c13",
          "sha256": "ad849bf344faa6730651dc538770b24c6767937de6ccea92a81a198e415985e3"
        },
        "downloads": -1,
        "filename": "openwisp-controller-1.0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "1d338ad826cb75c8e292584d0df95c13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 618803,
        "upload_time": "2022-05-11T19:44:10",
        "upload_time_iso_8601": "2022-05-11T19:44:10.307963Z",
        "url": "https://files.pythonhosted.org/packages/71/01/dff570c00c6903e3db71e3b4f1f076c623e15ccbc59841e32712cfdb7e63/openwisp-controller-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5992e6c738bf5c9a36f173a510d98ad819c8367323707da225704c5014a70209",
          "md5": "6573993d31000842963490fa31b87cae",
          "sha256": "512bfed33f7ccd3a73e3ed1315dfc576ed8dbb792e03ad4767ce7fa2372763a9"
        },
        "downloads": -1,
        "filename": "openwisp_controller-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6573993d31000842963490fa31b87cae",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 648141,
        "upload_time": "2022-07-01T16:30:44",
        "upload_time_iso_8601": "2022-07-01T16:30:44.625462Z",
        "url": "https://files.pythonhosted.org/packages/59/92/e6c738bf5c9a36f173a510d98ad819c8367323707da225704c5014a70209/openwisp_controller-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c6b21f78d82cbb4e68e9cc02f1e6c10e0292110136224148d15e7e5fe06f827",
          "md5": "caed5c3898965909f1d04d9163870d85",
          "sha256": "fee6b2a4d994c78d89ffae16297e9a8a1187b01fd4ac067b1d916330f9c5e17f"
        },
        "downloads": -1,
        "filename": "openwisp-controller-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "caed5c3898965909f1d04d9163870d85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 620498,
        "upload_time": "2022-07-01T16:30:49",
        "upload_time_iso_8601": "2022-07-01T16:30:49.979004Z",
        "url": "https://files.pythonhosted.org/packages/4c/6b/21f78d82cbb4e68e9cc02f1e6c10e0292110136224148d15e7e5fe06f827/openwisp-controller-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f0e89ebf6ebc30813519d7dfa01953d04a284cbc0b0f663ca4dff4042622a93",
          "md5": "a8668491b6df3cc910842b61d3a8084e",
          "sha256": "5dfaeb3176328e3cc41d34ac2274e19c28923ddb40cba34292ad5f97251847b2"
        },
        "downloads": -1,
        "filename": "openwisp_controller-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8668491b6df3cc910842b61d3a8084e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 648742,
        "upload_time": "2022-08-03T12:01:58",
        "upload_time_iso_8601": "2022-08-03T12:01:58.097151Z",
        "url": "https://files.pythonhosted.org/packages/6f/0e/89ebf6ebc30813519d7dfa01953d04a284cbc0b0f663ca4dff4042622a93/openwisp_controller-1.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c051a211923951dffaeff1fde7d9a903e90c4477a422e9afae8777ab543eee43",
          "md5": "2bf5c8ba8cbcd3335411870d577630b6",
          "sha256": "c697bc7db2d6f6a051cbe0567b3e91da6ec8019d53f1e4c9dfc9f9164487bd78"
        },
        "downloads": -1,
        "filename": "openwisp-controller-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2bf5c8ba8cbcd3335411870d577630b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 621360,
        "upload_time": "2022-08-03T12:02:03",
        "upload_time_iso_8601": "2022-08-03T12:02:03.425756Z",
        "url": "https://files.pythonhosted.org/packages/c0/51/a211923951dffaeff1fde7d9a903e90c4477a422e9afae8777ab543eee43/openwisp-controller-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f0e89ebf6ebc30813519d7dfa01953d04a284cbc0b0f663ca4dff4042622a93",
        "md5": "a8668491b6df3cc910842b61d3a8084e",
        "sha256": "5dfaeb3176328e3cc41d34ac2274e19c28923ddb40cba34292ad5f97251847b2"
      },
      "downloads": -1,
      "filename": "openwisp_controller-1.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a8668491b6df3cc910842b61d3a8084e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 648742,
      "upload_time": "2022-08-03T12:01:58",
      "upload_time_iso_8601": "2022-08-03T12:01:58.097151Z",
      "url": "https://files.pythonhosted.org/packages/6f/0e/89ebf6ebc30813519d7dfa01953d04a284cbc0b0f663ca4dff4042622a93/openwisp_controller-1.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c051a211923951dffaeff1fde7d9a903e90c4477a422e9afae8777ab543eee43",
        "md5": "2bf5c8ba8cbcd3335411870d577630b6",
        "sha256": "c697bc7db2d6f6a051cbe0567b3e91da6ec8019d53f1e4c9dfc9f9164487bd78"
      },
      "downloads": -1,
      "filename": "openwisp-controller-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2bf5c8ba8cbcd3335411870d577630b6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 621360,
      "upload_time": "2022-08-03T12:02:03",
      "upload_time_iso_8601": "2022-08-03T12:02:03.425756Z",
      "url": "https://files.pythonhosted.org/packages/c0/51/a211923951dffaeff1fde7d9a903e90c4477a422e9afae8777ab543eee43/openwisp-controller-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}