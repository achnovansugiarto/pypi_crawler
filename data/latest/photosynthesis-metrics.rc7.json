{
  "info": {
    "author": "Sergey Kastryulin",
    "author_email": "snk4tr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PhotoSynthesis.Metrics\n![CI flake-8 style check][ci-flake-8-style-check-shield]\n![CI testing][ci-testing]  \n[![MIT License][license-shield]][license-url]\n[![LinkedIn][linkedin-shield]][linkedin-url]\n[![PyPI version][pypi-version-shield]][pypi-version-url]\n\n\n<!-- ABOUT THE PROJECT -->\n\nPyTorch library with measures and metrics for various image-to-image tasks like denoising, super-resolution, \nimage generation etc. This easy to use yet flexible and extensive library is developed with focus on reliability \nand reproducibility of results. Use your favourite measures as losses for training neural networks with ready-to-use \nPyTorch modules.  \n\n\n<!-- GETTING STARTED -->\n### Getting started  \n\n```python\nimport torch\nfrom photosynthesis_metrics import ssim\n\nprediction = torch.rand(3, 3, 256, 256)\ntarget = torch.rand(3, 3, 256, 256)\nssim_index = ssim(prediction, target, data_range=1.)\n```\n\n\n<!-- EXAMPLES -->\n### Examples\n\n<!-- SSIM EXAMPLES -->\n<details>\n<summary>Structural Similarity (SSIM)</summary>\n<p>\n\nTo compute SSIM index as a measure, use lower case function from the library:\n```python\nimport torch\nfrom photosynthesis_metrics import ssim\nfrom typing import Union, Tuple\n\nprediction = torch.rand(3, 3, 256, 256)\ntarget = torch.rand(3, 3, 256, 256) \nssim_index: Union[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]] = ssim(prediction, target, data_range=1.)\n```\n\nIn order to use SSIM as a loss function, use corresponding PyTorch module:\n```python\nimport torch\nfrom photosynthesis_metrics import SSIMLoss\n\nloss = SSIMLoss(data_range=1.)\nprediction = torch.rand(3, 3, 256, 256, requires_grad=True)\ntarget = torch.rand(3, 3, 256, 256)\noutput: torch.Tensor = loss(prediction, target)\noutput.backward()\n```\n</p>\n</details>\n\n<!-- MS-SSIM EXAMPLES -->\n<details>\n<summary>Multi-Scale Structural Similarity (MS-SSIM)</summary>\n<p>\n\nTo compute MS-SSIM index as a measure, use lower case function from the library:\n```python\nimport torch\nfrom photosynthesis_metrics import multi_scale_ssim\n\nprediction = torch.rand(3, 3, 256, 256)\ntarget = torch.rand(3, 3, 256, 256) \nms_ssim_index: torch.Tensor = multi_scale_ssim(prediction, target, data_range=1.)\n```\n\nIn order to use MS-SSIM as a loss function, use corresponding PyTorch module:\n```python\nimport torch\nfrom photosynthesis_metrics import MultiScaleSSIMLoss\n\nloss = MultiScaleSSIMLoss(data_range=1.)\nprediction = torch.rand(3, 3, 256, 256, requires_grad=True)\ntarget = torch.rand(3, 3, 256, 256)\noutput: torch.Tensor = loss(prediction, target)\noutput.backward()\n```\n</p>\n</details>\n\n<!-- TV EXAMPLES -->\n<details>\n<summary>Total Variation (TV)</summary>\n<p>\n\nTo compute TV as a measure, use lower case function from the library:\n```python\nimport torch\nfrom photosynthesis_metrics import total_variation\n\ndata = torch.rand(3, 3, 256, 256) \ntv: torch.Tensor = total_variation(data)\n```\n\nIn order to use TV as a loss function, use corresponding PyTorch module:\n```python\nimport torch\nfrom photosynthesis_metrics import TVLoss\n\nloss = TVLoss()\nprediction = torch.rand(3, 3, 256, 256, requires_grad=True)\noutput: torch.Tensor = loss(prediction)\noutput.backward()\n```\n</p>\n</details>\n\n<!-- VIF EXAMPLES -->\n<details>\n<summary>Visual Information Fidelity (VIF)</summary>\n<p>\n\nTo compute VIF as a measure, use lower case function from the library:\n```python\nimport torch\nfrom photosynthesis_metrics import vif_p\n\npredicted = torch.rand(3, 3, 256, 256)\ntarget = torch.rand(3, 3, 256, 256)\nvif: torch.Tensor = vif_p(predicted, target, data_range=1.)\n```\n\nIn order to use VIF as a loss function, use corresponding PyTorch class:\n```python\nimport torch\nfrom photosynthesis_metrics import VIFLoss\n\nloss = VIFLoss(sigma_n_sq=2.0, data_range=1.)\nprediction = torch.rand(3, 3, 256, 256, requires_grad=True)\ntarget = torch.rand(3, 3, 256, 256)\nouput: torch.Tensor = loss(prediction, target)\noutput.backward()\n```\n\nNote, that VIFLoss returns `1 - VIF` value.\n</p>\n</details>\n\n<!-- GMSD EXAMPLES -->\n<details>\n<summary>Gradient Magnitude Similarity Deviation (GMSD)</summary>\n<p>\n\nThis is port of MATLAB version from the authors of original paper.\nIt can be used both as a measure and as a loss function. In any case it should me minimized.\nUsually values of GMSD lie in [0, 0.35] interval.\n```python\nimport torch\nfrom photosynthesis_metrics import GMSDLoss\n\nloss = GMSDLoss(data_range=1.)\nprediction = torch.rand(3, 3, 256, 256, requires_grad=True)\ntarget = torch.rand(3, 3, 256, 256)\nouput: torch.Tensor = loss(prediction, target)\noutput.backward()\n```\n</p>\n</details>\n\n<!-- MultiScale GMSD EXAMPLES -->\n<details>\n<summary>MultiScale GMSD (MS-GMSD)</summary>\n<p>\n\nIt can be used both as a measure and as a loss function. In any case it should me minimized.\nBy defualt scale weights are initialized with values from the paper. You can change them by passing a list of 4 variables to `scale_weights` argument during initialization. Both GMSD and MS-GMSD computed for greyscale images, but to take contrast changes into account authors propoced to also add chromatic component. Use flag `chromatic` to use MS-GMSDc version of the loss\n```python\nimport torch\nfrom photosynthesis_metrics import MultiScaleGMSDLoss\n\nloss = MultiScaleGMSDLoss(chromatic=True, data_range=1.)\nprediction = torch.rand(3, 3, 256, 256, requires_grad=True)\ntarget = torch.rand(3, 3, 256, 256)\nouput: torch.Tensor = loss(prediction, target)\noutput.backward()\n```\n</p>\n</details>\n\n<!-- BRISQUE EXAMPLES -->\n<details>\n<summary>Blind/Referenceless Image Spatial Quality Evaluator (BRISQUE)</summary>\n<p>\n\nTo compute [BRISQUE score](https://live.ece.utexas.edu/publications/2012/TIP%20BRISQUE.pdf) as a measure, use lower case function from the library:\n```python\nimport torch\nfrom photosynthesis_metrics import brisque\nfrom typing import Union, Tuple\n\nprediction = torch.rand(3, 3, 256, 256)\nbrisque_index: torch.Tensor = brisque(prediction, data_range=1.)\n```\n\nIn order to use BRISQUE as a loss function, use corresponding PyTorch module:\n```python\nimport torch\nfrom photosynthesis_metrics import BRISQUELoss\n\nloss = BRISQUELoss(data_range=1.)\nprediction = torch.rand(3, 3, 256, 256, requires_grad=True)\noutput: torch.Tensor = loss(prediction)\noutput.backward()\n```\n</p>\n</details>\n\n<!-- MSID EXAMPLES -->\n<details>\n<summary>Multi-Scale Intrinsic Distance (MSID)</summary>\n<p>\n\nUse `MSID` class to compute [MSID score](https://arxiv.org/abs/1905.11141) from image features, \npre-extracted from some feature extractor network: \n```python\nimport torch\nfrom photosynthesis_metrics import MSID\n\nmsid_metric = MSID()\nprediction_feats = torch.rand(10000, 1024)\ntarget_feats = torch.rand(10000, 1024)\nmsid: torch.Tensor = msid_metric(prediction_feats, target_feats)\n```\n\nIf image features are not available, extract them using `_compute_feats` of `MSID` class. \nPlease note that `_compute_feats` consumes a data loader of predefined format.\n```python\nimport torch\nfrom  torch.utils.data import DataLoader\nfrom photosynthesis_metrics import MSID\n\nfirst_dl, second_dl = DataLoader(), DataLoader()\nmsid_metric = MSID() \nfirst_feats = msid_metric._compute_feats(first_dl)\nsecond_feats = msid_metric._compute_feats(second_dl)\nmsid: torch.Tensor = msid_metric(first_feats, second_feats)\n```  \n</p>\n</details>\n\n<!-- FID EXAMPLES -->\n<details>\n<summary>Frechet Inception Distance(FID)</summary>\n<p>\n\nUse `FID` class to compute [FID score](https://arxiv.org/abs/1706.08500) from image features, \npre-extracted from some feature extractor network:\n```python\nimport torch\nfrom photosynthesis_metrics import FID\n\nfid_metric = FID()\nprediction_feats = torch.rand(10000, 1024)\ntarget_feats = torch.rand(10000, 1024)\nmsid: torch.Tensor = fid_metric(prediction_feats, target_feats)\n```\n\nIf image features are not available, extract them using `_compute_feats` of `FID` class. \nPlease note that `_compute_feats` consumes a data loader of predefined format.\n```python\nimport torch\nfrom  torch.utils.data import DataLoader\nfrom photosynthesis_metrics import FID\n\nfirst_dl, second_dl = DataLoader(), DataLoader()\nfid_metric = FID() \nfirst_feats = fid_metric._compute_feats(first_dl)\nsecond_feats = fid_metric._compute_feats(second_dl)\nmsid: torch.Tensor = fid_metric(first_feats, second_feats)\n```  \n</p>\n</details>\n\n<!-- KID EXAMPLES -->\n<details>\n<summary>Kernel Inception Distance(KID)</summary>\n<p>\n\nUse `KID` class to compute [KID score](https://arxiv.org/abs/1801.01401) from image features, \npre-extracted from some feature extractor network:\n```python\nimport torch\nfrom photosynthesis_metrics import KID\n\nkid_metric = KID()\nprediction_feats = torch.rand(10000, 1024)\ntarget_feats = torch.rand(10000, 1024)\nkid: torch.Tensor = kid_metric(prediction_feats, target_feats)\n```\n\nIf image features are not available, extract them using `_compute_feats` of `KID` class. \nPlease note that `_compute_feats` consumes a data loader of predefined format. \n```python\nimport torch\nfrom  torch.utils.data import DataLoader\nfrom photosynthesis_metrics import KID\n\nfirst_dl, second_dl = DataLoader(), DataLoader()\nkid_metric = KID() \nfirst_feats = kid_metric._compute_feats(first_dl)\nsecond_feats = kid_metric._compute_feats(second_dl)\nkid: torch.Tensor = kid_metric(first_feats, second_feats)\n```  \n</p>\n</details>\n\n<!-- GS EXAMPLES -->\n<details>\n<summary>Geometry Score (GS)</summary>\n<p>\n\nUse `GS` class to compute [Geometry Score](https://arxiv.org/abs/1802.02664) from image features, \npre-extracted from some feature extractor network. Computation is heavily CPU dependent, adjust `num_workers` parameter according to your system configuration:\n```python\nimport torch\nfrom photosynthesis_metrics import GS\n\ngs_metric = GS(sample_size=64, num_iters=100, i_max=100, num_workers=4)\nprediction_feats = torch.rand(10000, 1024)\ntarget_feats = torch.rand(10000, 1024)\ngs: torch.Tensor = gs_metric(prediction_feats, target_feats)\n```\n\nGS metric requiers `gudhi` library which is not installed by default. \nIf you use conda, write: `conda install -c conda-forge gudhi`, otherwise follow [installation guide](http://gudhi.gforge.inria.fr/python/latest/installation.html).\n</p>\n</details>\n\n<!-- IS EXAMPLES -->\n<details>\n<summary>Inception Score(IS)</summary>\n<p>\n\nUse `inception_score` function to compute [IS](https://arxiv.org/abs/1606.03498) from image features, \npre-extracted from some feature extractor network. Note, that we follow recomendations from paper [A Note on the Inception Score](https://arxiv.org/pdf/1801.01973.pdf), which proposed small modification to original algorithm:\n```python\nimport torch\nfrom photosynthesis_metrics import inception_score\n\nprediction_feats = torch.rand(10000, 1024)\nmean: torch.Tensor, variance: torch.Tensor = inception_score(prediction_feats, num_splits=10)\n```\n\nTo compute difference between IS for 2 sets of image features, use `IS` class.\n```python\nimport torch\nfrom photosynthesis_metrics import IS\n\n\nis_metric = IS(distance='l1') \nprediction_feats = torch.rand(10000, 1024)\ntarget_feats = torch.rand(10000, 1024)\ndistance: torch.Tensor = is_metric(prediction_feats, target_feats)\n```  \n</p>\n</details>\n\n<!-- TABLE OF CONTENTS -->\n### Table of Contents\n\n* [Overview](#overview)\n    * [Installation](#installation)\n    * [Roadmap](#roadmap)\n* [Community](#community)\n    * [Contributing](#contributing)\n    * [Contact](#contact)\n    * [Acknowledgements](#acknowledgements)\n\n\n### Overview\n\n*PhotoSynthesis.Metrics* helps you to concentrate on your experiments without the boilerplate code.\nThe library contains a set of measures and metrics that is constantly getting extended. \nFor measures/metrics that can be used as loss functions, corresponding PyTorch modules are implemented.\n\n\n\n#### Installation\n\n`$ pip install photosynthesis-metrics`\n\nIf you want to use the latest features straight from the master, clone the repo:\n```sh\n$ git clone https://github.com/photosynthesis-team/photosynthesis.metrics.git\n```\n\n<!-- ROADMAP -->\n#### Roadmap\n\nSee the [open issues](https://github.com/photosynthesis-team/photosynthesis.metrics/issues) for a list of proposed \nfeatures and known issues.\n\n\n<!-- COMMUNITY -->\n### Community\n\n\n<!-- CONTRIBUTING -->\n#### Contributing\n\nWe appreciate all contributions. If you plan to: \n- contribute back bug-fixes, please do so without any further discussion\n- close one of [open issues](https://github.com/photosynthesis-team/photosynthesis.metrics/issues), please do so if no one has been assigned to it\n- contribute new features, utility functions or extensions, please first open an issue and discuss the feature with us\n\nPlease see the [contribution guide](CONTRIBUTING.md) for more information.\n\n\n<!-- CONTACT -->\n#### Contact\n\n**Sergey Kastryulin** - [@snk4tr](https://github.com/snk4tr) - `snk4tr@gmail.com`\n\nProject Link: [https://github.com/photosynthesis-team/photosynthesis.metrics](https://github.com/photosynthesis-team/photosynthesis.metrics)  \nPhotoSynthesis Team: [https://github.com/photosynthesis-team](https://github.com/photosynthesis-team)\n\nOther projects by PhotoSynthesis Team:  \n* [PhotoSynthesis.Models](https://github.com/photosynthesis-team/photosynthesis.models)\n\n<!-- ACKNOWLEDGEMENTS -->\n#### Acknowledgements\n\n* **Pavel Parunin** - [@PavelParunin](https://github.com/ParuninPavel) - idea proposal and development\n* **Djamil Zakirov** - [@zakajd](https://github.com/zakajd) - development\n* **Denis Prokopenko** - [@denproc](https://github.com/denproc) - development\n\n\n\n<!-- MARKDOWN LINKS & IMAGES -->\n<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->\n[license-shield]: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n[license-url]: https://github.com/photosynthesis-team/photosynthesis.metrics/blob/master/LICENSE\n[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=flat-square&logo=linkedin&colorB=555\n[linkedin-url]: https://www.linkedin.com/in/sergey-kastryulin/\n[ci-flake-8-style-check-shield]: https://github.com/photosynthesis-team/photosynthesis.metrics/workflows/flake-8%20style%20check/badge.svg\n[ci-testing]: https://github.com/photosynthesis-team/photosynthesis.metrics/workflows/testing/badge.svg\n[pypi-version-shield]: https://badge.fury.io/py/photosynthesis-metrics.svg\n[pypi-version-url]: https://badge.fury.io/py/photosynthesis-metrics\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/photosynthesis-team/photosynthesis.metrics",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "photosynthesis-metrics",
    "package_url": "https://pypi.org/project/photosynthesis-metrics/",
    "platform": "",
    "project_url": "https://pypi.org/project/photosynthesis-metrics/",
    "project_urls": {
      "Homepage": "https://github.com/photosynthesis-team/photosynthesis.metrics"
    },
    "release_url": "https://pypi.org/project/photosynthesis-metrics/0.4.0/",
    "requires_dist": [
      "torch (!=1.5.0,>=1.2.0)",
      "scipy (==1.3.3)",
      "torchvision (!=0.6.0,>=0.4.0)"
    ],
    "requires_python": "",
    "summary": "Measures and metrics for image2image tasks. PyTorch.",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7450370,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d14bc5003e4c09350bc66c0a86ce6e64bf480137ee0968245e83f13082a4467",
          "md5": "d52d7477a31d4e7281189ea0dddc2054",
          "sha256": "0ff8ea9df3ade5d87bda721205818cb85d3bc3ea8d5171206c74554d2d5b8336"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d52d7477a31d4e7281189ea0dddc2054",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11447,
        "upload_time": "2020-01-14T15:46:08",
        "upload_time_iso_8601": "2020-01-14T15:46:08.890552Z",
        "url": "https://files.pythonhosted.org/packages/3d/14/bc5003e4c09350bc66c0a86ce6e64bf480137ee0968245e83f13082a4467/photosynthesis_metrics-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7306771b0b87da8d5a2612967ae54b150980c7d3381b5ecd2a1ca8d4753e11f",
          "md5": "e7288bb09a39a7d9455879e46bab1520",
          "sha256": "21dcaa68a36faadb1d470b98662f97c606eb27d873e861ef9182cb936698caf3"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7288bb09a39a7d9455879e46bab1520",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13416,
        "upload_time": "2020-01-14T16:46:47",
        "upload_time_iso_8601": "2020-01-14T16:46:47.898073Z",
        "url": "https://files.pythonhosted.org/packages/b7/30/6771b0b87da8d5a2612967ae54b150980c7d3381b5ecd2a1ca8d4753e11f/photosynthesis_metrics-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4acd3aa74c7254bf5d7cf4fbdfa6fa695b7d0571854511368309a113cfe227b3",
          "md5": "1c04e2392e923a4bad9e2a4ecef9edc4",
          "sha256": "a02c03603acdeb303dfc957a7e1af0c1f46b63eeb965da8476dc34901c4fe284"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1c04e2392e923a4bad9e2a4ecef9edc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13439,
        "upload_time": "2020-01-14T16:46:49",
        "upload_time_iso_8601": "2020-01-14T16:46:49.021712Z",
        "url": "https://files.pythonhosted.org/packages/4a/cd/3aa74c7254bf5d7cf4fbdfa6fa695b7d0571854511368309a113cfe227b3/photosynthesis_metrics-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ac08a003dfbe88561589554f725e5240fc45ed51a1b87f3c87fd22a0e197155",
          "md5": "30c005b57bebf5b738ef7881aeca8e5a",
          "sha256": "8d57cba0a1a7f7709580d0d0787b9572934a169024cf2162a886a8732baf25a1"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30c005b57bebf5b738ef7881aeca8e5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33445,
        "upload_time": "2020-04-13T11:30:56",
        "upload_time_iso_8601": "2020-04-13T11:30:56.032922Z",
        "url": "https://files.pythonhosted.org/packages/2a/c0/8a003dfbe88561589554f725e5240fc45ed51a1b87f3c87fd22a0e197155/photosynthesis_metrics-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95ccce315cb8a1dce6eeeea245101c031975504385f24efd0b5147664aa50dd8",
          "md5": "66d4aea0112c9c2ebd1a5d25836dcaf3",
          "sha256": "4195e0eb5bef3c30248c60db1d3d1f8ea023c72aa106e71a802e80fc7c9b87ce"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "66d4aea0112c9c2ebd1a5d25836dcaf3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24149,
        "upload_time": "2020-04-13T11:30:57",
        "upload_time_iso_8601": "2020-04-13T11:30:57.381424Z",
        "url": "https://files.pythonhosted.org/packages/95/cc/ce315cb8a1dce6eeeea245101c031975504385f24efd0b5147664aa50dd8/photosynthesis_metrics-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e8fb20e30cd6dd723cb0b6c9defb808adf7089ec29334fa7af860e4cc272537",
          "md5": "89986a61a13e0727e5f59cc02d91185e",
          "sha256": "94f44f939ffcc8bc5ad1124d37acb258a4beb2abfebd23fec1b90d5fa712525c"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89986a61a13e0727e5f59cc02d91185e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33511,
        "upload_time": "2020-04-15T13:56:34",
        "upload_time_iso_8601": "2020-04-15T13:56:34.280639Z",
        "url": "https://files.pythonhosted.org/packages/2e/8f/b20e30cd6dd723cb0b6c9defb808adf7089ec29334fa7af860e4cc272537/photosynthesis_metrics-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a13bfc8fd95b768007db06572a5e56f0988e3183ee27793af98d063a2e5830ed",
          "md5": "b6a3f01320b3509816aa72f77ce82ea9",
          "sha256": "13b2f3e311b2abead5533da70490c82adb053115ed4d99e4460fcb572e9a0787"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b6a3f01320b3509816aa72f77ce82ea9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24234,
        "upload_time": "2020-04-15T13:56:35",
        "upload_time_iso_8601": "2020-04-15T13:56:35.413355Z",
        "url": "https://files.pythonhosted.org/packages/a1/3b/fc8fd95b768007db06572a5e56f0988e3183ee27793af98d063a2e5830ed/photosynthesis_metrics-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84d3f65937331c3753f535757cb6800551ef45ebda53736583b18e5f2d6d94ef",
          "md5": "eef58857b26c419a146f0bcf230cea56",
          "sha256": "a2ffbe02b7b8f5746c638aa3defeb7690f95caa04c2c96e91e627cfc762fc3a3"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eef58857b26c419a146f0bcf230cea56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42438,
        "upload_time": "2020-05-25T12:38:24",
        "upload_time_iso_8601": "2020-05-25T12:38:24.383035Z",
        "url": "https://files.pythonhosted.org/packages/84/d3/f65937331c3753f535757cb6800551ef45ebda53736583b18e5f2d6d94ef/photosynthesis_metrics-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a01e769cdb490d8b3308144a601422bc32114b32b3f7af8253a80e88d0643799",
          "md5": "8545af9017dd9960020dc0ac090baa12",
          "sha256": "d8d5a255501d8127143f503eeb3375cb65ee1004b553b86172fed8ac978f948c"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8545af9017dd9960020dc0ac090baa12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32376,
        "upload_time": "2020-05-25T12:38:25",
        "upload_time_iso_8601": "2020-05-25T12:38:25.846781Z",
        "url": "https://files.pythonhosted.org/packages/a0/1e/769cdb490d8b3308144a601422bc32114b32b3f7af8253a80e88d0643799/photosynthesis_metrics-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aed62efa83cdc3af31ee3ef971783b22a8c464904144a60a2bfb4b6db0b8b563",
          "md5": "99495032a539018a026f326fa1aad9e4",
          "sha256": "5bff30339959de4fc297f597d5b062d77fb40b963ada2c3223dc570108e49e3d"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99495032a539018a026f326fa1aad9e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 47948,
        "upload_time": "2020-05-28T10:56:55",
        "upload_time_iso_8601": "2020-05-28T10:56:55.275263Z",
        "url": "https://files.pythonhosted.org/packages/ae/d6/2efa83cdc3af31ee3ef971783b22a8c464904144a60a2bfb4b6db0b8b563/photosynthesis_metrics-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3984a410fd1858905f3c9f0b52dc84845f9d97903471fd6c0825b23628ea0637",
          "md5": "c764bb18309960684c5e3add384a67ed",
          "sha256": "6f079a4f06b3f6d790c572289247288483b8aba970dc13fa87874c55ba95d545"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c764bb18309960684c5e3add384a67ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36364,
        "upload_time": "2020-05-28T10:56:56",
        "upload_time_iso_8601": "2020-05-28T10:56:56.441510Z",
        "url": "https://files.pythonhosted.org/packages/39/84/a410fd1858905f3c9f0b52dc84845f9d97903471fd6c0825b23628ea0637/photosynthesis_metrics-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abf814023af42786b2c1ac946fe163096637f993b7a94f9ba5277d12e48a6140",
          "md5": "a5221a638ea85b290f7bdfe975cd53b5",
          "sha256": "842944095fd83b1a89e7c458f1d25a623a2ff8729c60cbc0ac4b58d6e9ef0ebb"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5221a638ea85b290f7bdfe975cd53b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58663,
        "upload_time": "2020-06-11T07:16:54",
        "upload_time_iso_8601": "2020-06-11T07:16:54.762904Z",
        "url": "https://files.pythonhosted.org/packages/ab/f8/14023af42786b2c1ac946fe163096637f993b7a94f9ba5277d12e48a6140/photosynthesis_metrics-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bcf5bde3844464f02f0825166c9890ebf5282c8373bc356fd7c01ab2b9474e3",
          "md5": "6a6cb9bfb998e4ca4cbbd8b162821ba9",
          "sha256": "7d319ac91f144b12f6f9c9418bb3ac250cef1a7c7796c5f4f68f3c61882d39ee"
        },
        "downloads": -1,
        "filename": "photosynthesis_metrics-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a6cb9bfb998e4ca4cbbd8b162821ba9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45439,
        "upload_time": "2020-06-11T07:16:56",
        "upload_time_iso_8601": "2020-06-11T07:16:56.231427Z",
        "url": "https://files.pythonhosted.org/packages/8b/cf/5bde3844464f02f0825166c9890ebf5282c8373bc356fd7c01ab2b9474e3/photosynthesis_metrics-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abf814023af42786b2c1ac946fe163096637f993b7a94f9ba5277d12e48a6140",
        "md5": "a5221a638ea85b290f7bdfe975cd53b5",
        "sha256": "842944095fd83b1a89e7c458f1d25a623a2ff8729c60cbc0ac4b58d6e9ef0ebb"
      },
      "downloads": -1,
      "filename": "photosynthesis_metrics-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5221a638ea85b290f7bdfe975cd53b5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 58663,
      "upload_time": "2020-06-11T07:16:54",
      "upload_time_iso_8601": "2020-06-11T07:16:54.762904Z",
      "url": "https://files.pythonhosted.org/packages/ab/f8/14023af42786b2c1ac946fe163096637f993b7a94f9ba5277d12e48a6140/photosynthesis_metrics-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8bcf5bde3844464f02f0825166c9890ebf5282c8373bc356fd7c01ab2b9474e3",
        "md5": "6a6cb9bfb998e4ca4cbbd8b162821ba9",
        "sha256": "7d319ac91f144b12f6f9c9418bb3ac250cef1a7c7796c5f4f68f3c61882d39ee"
      },
      "downloads": -1,
      "filename": "photosynthesis_metrics-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6a6cb9bfb998e4ca4cbbd8b162821ba9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45439,
      "upload_time": "2020-06-11T07:16:56",
      "upload_time_iso_8601": "2020-06-11T07:16:56.231427Z",
      "url": "https://files.pythonhosted.org/packages/8b/cf/5bde3844464f02f0825166c9890ebf5282c8373bc356fd7c01ab2b9474e3/photosynthesis_metrics-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}