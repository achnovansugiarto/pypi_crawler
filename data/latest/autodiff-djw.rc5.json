{
  "info": {
    "author": "David Chataway, Javiera Astudillo, Wenhan Zhang",
    "author_email": "jastudillo@g.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![codecov](https://codecov.io/gh/DJ-WJ/cs107-FinalProject/branch/master/graph/badge.svg?token=C38YL2T5X5)](https://codecov.io/gh/DJ-WJ/cs107-FinalProject)\n\n[![Build Status](https://travis-ci.com/DJ-WJ/cs107-FinalProject.svg?token=q44Rdg7inB6rSpQTpr1j&branch=master)](https://travis-ci.com/DJ-WJ/cs107-FinalProject)\n\n# cs107-FinalProject\n\n## Group 26\n\n* David Chataway\n* Javiera Astudillo\n* Wenhan Zhang\n\n## Introduction\n\nOur library, AutoDiff, provides an automatic differentiation (AD) tool that is designed to be very user-friendly. The base autodiff class contains modules for both forward and reverse mode. A user provides an array of values and multivariate lambda functions, specifies the mode and a seed vector (optional) and is able to compute the jacobian, the gradients and the directional derivative with respect to a custom direction so that other users will be able to use the library in other algorithms like Newton’s method. Developing a user-friendly and efficient AD library is important for two primary reasons: \n\n1. Automatic differentiation can improve upon symbolic differentiation offered by symbolic libraries (like SymPy) or by web services (like Wolfram Alpha) because AD methods can achieve machine precision while executing faster because AD does not need to carry through the whole expression tree and doesn’t suffer from exponentially longer derivative expressions (due to for example multiple product rules).\n\n2. Efficient automatic differentiation is necessary to optimize computational cost and time due to different scaling between forward and reverse modes and the storing of intermediate variables and expressions. This is crucial in many applications such as optimization algorithms (e.g. gradient descent).\n\n## Background\n\nIn our understanding, at the heart of AD is the idea that functional expressions can be broken down into elementary symbolic expressions and the numerical result of the function’s derivatives can be calculated by storing the value and derivative value at intermediate variables of those expressions. The graph structure of automatic differentiation arises because these intermediate variables can have both parents and children that each point to different steps in the evaluation trace. Furthermore, many of these intermediate variables will have multiple children - i.e. they will be used more than once in the evaluation trace. \nAlthough forward and reverse mode differ in terms of the order in which the graph is evaluated, both modes 1) produce the same graph, 2) evaluate the derivatives at each child node by using a stored derivative value with respect to the parent node(s) and 3) take a function of dimension n (number of input variables) and produce its numerical derivative, in the form of a Jacobian (or its transpose) of dimension m (number of outputs).\n\n<img src=\"imgs/jacobian.PNG\" width=\"400\">\n\n### Forward mode\n\nIn the forward mode, we calculate the partial derivatives by evaluating the chain rule for each intermediate variable during the forward pass. This is done by both applying a symbolic derivative of the intermediate variable and directly applying the derivative value of the parent node(s). For instance, for an intermediate variable expressed as a function of a function (its parent node), h(u(t)), the chain rule is evaluated as follows:\n\n<img src=\"imgs/forward_formula.PNG\" width=\"100\">\n\nwhere the first term of the multiplication is evaluated symbolically and the second term is taken from the derivative value of the parent node.\n\nBecause of the graph structure, the forward mode will be able to compute the partial derivative of all of the n outputs with respect to a single input variable (if seeded in the unit direction of that specific input variable). That is, each forward pass produces a single column of the Jacobian matrix.\n\n### Reverse mode\n\nIn the reverse mode, rather than directly computing the chain rule at each intermediate variable, you just store the partial derivatives and the dependencies of the expression tree during the forward pass. Then, you do a reverse pass by starting at a single output variable, ‘seeding it’ (e.g. set the derivative of the output variable to 1 and the derivatives of the other output variables to 0) and propagating backwards to all the input variables. We are essentially asking, ‘the output variable affect can affect which input variables’? This is possible by calculating the ‘adjoint’ which stores the current value of the partial derivative of the output with respect to the variable at node i according to the following formula, where j is a child of i.\n\n<img src=\"imgs/reverse_formula_1.PNG\" width=\"175\">\n\nHowever, in order to calculate the derivative of a different output variable, we need to re-run the program again with a different unit seed. As a result, each run of the reverse mode will generate a single row of the Jacobian (or a column of the transpose of the Jacobian).\n\n#### Example\n\nFor example, consider the function f(x,y), shown below (same as the one in pair programming 6). \n\n<img src=\"imgs/Example.PNG\" width=\"250\">\n\nRather than storing the entire symbolic derivative expression, we can instead break down the function into intermediate variables (shown below) and store (or overload) the symbolic derivatives of the elemental operations of +/-, \\*\\*2, exp(), sin() and cos(). \n\nFor forward mode, all that needs to be stored is a tuple of the value and the derivative value according to a particular seed. Thus, this evaluation would need to be run twice for the two seed vectors corresponding to each input variable.\n\n<img src=\"imgs/forward_example_trace.PNG\" width=\"350\">\n\nIf this automatic differentiation were to be evaluated in reverse mode, on the forward pass at each node we would instead store the values of the intermediate variable partial derivatives with respect to each parent argument (rather that applying the chain rule) and then we would work backwards in one pass to calculate df/dx and df/dy using the adjoint method. These graph structures are outlined below:\n\n<img src=\"imgs/graph_structure.PNG\" width=\"900\">\n\n## How to use\n\nOur solution is provided as a Python package called `AutoDiff` and is available through [`pip`](https://pypi.org/project/pip/), a package installer tool for Python. The prerequisite to use `AutoDiff` is to have [`Python`](https://www.python.org/downloads/) installed as well as [`numpy`](https://numpy.org/install/) and [`scipy`](https://www.scipy.org/install.html) packages installed. If you install `AutoDiff` through `pip` then the dependencies will be automatically installed (`numpy` and `scipy`).\n\n### PIP\n\n```\npython3 -m pip install autodiff-djw\n```\n\n### Create `AutoDiff`\n\nThe main access point to our library is through the `AutoDiff` class. To instantiate an object of this class the user must provide the following arguments:\n\n`AutoDiff(f, vals, mode='forward')`\n* `f`: *array_like*\n\n    &nbsp; List-like output functions. Order preserving.\n* `vals`: *array_like*\n\n    &nbsp; List-like initital values for inputs. All output functions will be evaluated at this values.\n* `mode`: *string (default=`forward`)*\n\n    &nbsp; Either `forward` or `backward` mode.\n\n***Example: new `AutoDiff`***\n\n```\nfrom autodiff import AutoDiff\n\ninputs_vals = [np.pi/2, np.pi/4, np.pi/8] \nf1 = ...\nf2 = ...\nf = [f1, f2]\nautodiff = AutoDiff(vals=inputs_vals, f=f, mode='forward')\n```\n\n### Function creation\n\nTo create functions (`[f1,f2]` in the previous example) that are compatible with our library methods (i.e implements automatic differentiation of its outputs) you must provide regular python functions which: (1) meet the signature as described following and (2) use functions supported by our library.\n\n#### Function signature\n\nThe elements of `f` (provided at `AutoDiff` instantiation) must be regular python functions which meet the following signature:\n\n```\nf1(inputs)\n\nArguments\n---------\ninputs: array_like\n    A sequence representing the inputs. Each element represents one input variable (scalar).\nReturns\n-------\noutput: numeric (scalar)\n    A function of the inputs.\n```\n\n#### Supported operations\n\nTo enable automatic differentiation features, any user defined function must use the library provided functions:\n\n* Basic Operations: \n    * Addition (commutative) (`+`)\n    * Subtraction (`-`)\n    * Multiplication (commutative) (`*`)\n    * Division (`/`)\n    * Power (`**`)\n    * Negation (`-`)\n\n* Elementary Functions: \n    * `log` (`base` configurable)\n    * `exp`\n    * `sin`\n    * `cos`\n    * `tan`\n    * `arcsin`\n    * `arccos`\n    * `arctan`\n    * `sinh`\n    * `cosh`\n    * `tanh`\n    * `sqrt`\n    * `expit`\n\nThese functions may be accesed through the `autodiff.elementary` module and the user should import them before declaring a function. All of the elementary functions meet the same signature as `numpy` equivalent functions.\n\n***Example: declaring functions***\n\n```\nfrom autodiff.elementary import sin\n\nf1 = lambda inputs: inputs[0]*inputs[2]**2 \nf2 = lambda inputs: inputs[2]*sin(inputs[1])\nf = [f1, f2]\n```\n\nor equivalently:\n```\ndef f1(inputs): \n    x1 = inputs[0] # first input\n    x3 = inputs[2] # second input\n    return x1*(x3**2)\n\ndef f2(inputs): \n    x2 = inputs[1] # first input\n    x3 = inputs[2] # second input\n    return x2*sin(x3)\n\nf = [f1, f2]\n```\n\n### `AutoDiff` attributes and methods\n\n#### Attributes\n\n* `inputs`: get the user provided inputs values.\n* `outputs`: get the output of the user provided functions, evaluated at `inputs`.\n* `jacobian`: get the jacobian.\n\n#### Methods\n\n* **dir_der**\n```\ndir_der(seed)\n\n    Calculates the derivative of each output function in the direction of `dir`=`seed`.\n\n    Arguments\n    ---------\n    seed: array-like (M,)\n        Represents the direction to calculate the derivative of each output function.\n        Must have the same dimension as the number of inputs.\n        M: number of inputs\n\n    Returns\n    -------\n    list (N,)\n        Derivative of each input function in the direction of `seed` vector.\n        N: number of functions    \n```\n\n* **gradient**\n```\ngradient(fn_idx)\n    Creates or pulls a row of the Jacobian.\n    Calculates the derivative of the output function `fn_index` with respect to each input variable.\n\n    Arguments\n    --------\n    fn_idx: int \n        Index of the output function to calculate the gradient.\n\n    Returns\n    -------\n    list (M,)\n        M: number of inputs.\n```\n\n### Demo\n\nLet's take the following vector function to illustrate the usage of our library:\n\n<img src=\"imgs/demo_formula.png\" width=\"950\">\n\nNow we'll evaluate this function at the point x = [pi/2, pi/4, pi/8] and evaluate the directional derivative of each output function with respect to v = [1,2,1]:\n\n<img src=\"imgs/demo_result.png\" width=\"700\">\n\nThis analytical solution may be approximated through the `AutoDiff` library through either the forward or reverse modes as follows. It can be seen that the returned derivatives are equal to each other (within machine precision) and to the expected value. \n\n#### Forward Mode\n\n```\nimport numpy as np\nfrom autodiff import AutoDiff\nfrom autodiff.elementary import log, exp, sin, cos, tan, arcsin, arccos, arctan, sinh, cosh, tanh, sqrt, expit\n\ninputs_vals = [np.pi/2, np.pi/4, np.pi/8] \nseed = [1,2,1]\n\nf1 = lambda inputs: inputs[0]*inputs[2]**2 \nf2 = lambda inputs: inputs[2]*sin(inputs[1])\nf = np.array([f1, f2])\n\nautodiff = AutoDiff(f=f, vals=inputs_vals, mode='forward') \n\nprint(autodiff.inputs)\n>> [1.5707963267948966, 0.7853981633974483, 0.39269908169872414]\n\nprint(autodiff.outputs)\n>> [0.24223653656484231, 0.2776801836348979]\n\nprint(autodiff.jacobian)\n>> [[0.15421257 0.         1.23370055]\n [0.         0.27768018 0.70710678]]\n\nprint(autodiff.gradient(fn_idx=0))\n>> [0.15421257 0.         1.23370055]\n\nprint(autodiff.dir_der(seed=seed))\n[1.38791312 1.26246715]\n```\n\n#### Reverse Mode\n\n```\nimport numpy as np\nfrom autodiff import AutoDiff\nfrom autodiff.elementary import log, exp, sin, cos, tan, arcsin, arccos, arctan, sinh, cosh, tanh, sqrt, expit\n\ninputs_vals = [np.pi/2, np.pi/4, np.pi/8] \nseed = [1,2,1]\n\nf1 = lambda inputs: inputs[0]*inputs[2]**2 \nf2 = lambda inputs: inputs[2]*sin(inputs[1])\nf = np.array([f1, f2])\n\nautodiff = AutoDiff(f=f, vals=inputs_vals, mode='reverse') \n\nprint(autodiff.inputs)\n>> [1.5707963267948966, 0.7853981633974483, 0.39269908169872414]\n\nprint(autodiff.outputs)\n>> [0.24223653656484231, 0.2776801836348979]\n\nprint(autodiff.jacobian)\n>> [[0.15421257 0.         1.23370055]\n [0.         0.27768018 0.70710678]]\n\nprint(autodiff.gradient(fn_idx=0))\n>> [0.15421257 0.         1.23370055]\n\nprint(autodiff.dir_der(seed=seed))\n[1.38791312 1.26246715]\n```\n\n\n## Software organization\n\nThe current structure of our project is as following:\n\n```\n.\n├── src\n│   ├── autodiff\n│   │   ├── autodiff_.py\n│   │   ├── elementary.py\n│   │   ├── forward.py\n│   │   ├── reverse.py\n│   │   └── ...\n│   ├── demo\n│   └── tests\n└── docs\n    ├── README.md\n    └── imgs\n\n```\n\n`forward.py` and `reverse.py` modules contain the core functions to use our `AutoDiff` package in forward and reverse mode correspondingly. `elementary.py` provides elementary math functions to use in conjunction with our library while `autodiff_.py` contains the `AutoDiff` class for accesing the auto-differentiation methods of our library. All our tests are located in `src/tests` which are integrated with Travis CI and Codecov. To run the test suite you'll need to install `pytest` and `codecov`:\n\n```\npip install pytest pytest-cov\npip install codecov\n```\n\nOnce both previous packages are installed you may run the test suite locally (starting at the root of our folder structure):\n\n```\ncd .\nexport PYTHONPATH=\"$PWD/src\"\npython -m pytest --cov src/tests\n```\n\n## Implementation details\n\nThere's a common interface to access the automatic differentiation tools provided by this library: `AutoDiff` class. Under the hood, `AutoDiff` implements a factory pattern at instantiation that returns either an `AutoDiffForward` or `AutoDiffReverse` object. This pattern was selected so that the the usage of the `AutoDiff` object was transparent to the user with regard to the implementation of the auto-differentiation mode used. \n\n\n\n#### Forward Mode\n1) A \"`Variable`\" class was created with `.val` and `.der` attributes and overloaded elementary dunder methods and elementary functions\n2) AutoDiffForward class automatically creates `Variable` objects according to the input array.\n3) AutoDiffForward class creates the Jacobian (`.jacobian`) by calling the directional derivative (`dir_dev`) method on unit seed vectors and iterating through the size `M` (number of input variables)\n4) AutoDiffForward class `gradient` method requires the creation of the Jacobian and returns a row.\n\nLet's look at a sample function `sin` within `Variable` class to understand better how it implements the auto-differentiation underneath:\n\n```\nclass Variable:\n    def __init__(self,**kwargs):\n        ...\n        self.val = kwargs['val']\n        self.der = kwargs['der']\n        ...\ndef sin(a):\n    out = Variable()\n    try:\n        out.val = np.sin(a.val)\n        out.der = np.cos(a.val)*a.der\n    except AttributeError:\n        try:\n            out.val = np.sin(a)\n        except Exception as e:\n            raise TypeError('Sin failed: `input` not a `Variable` object or a real number.')\n    return out\n```\nFor the forward calculation you need to first seed the value of the derivative at the very beginning `self.der = kwargs['der']`. Once you've done that, any call to a mathematical function passing a `Variable` object as argument willl inmediately return a `Variable` object with the updated `val` and `derivative` with no need to keep track of the forward pass. For the case of `sin` we know that the output value is `np.sin(a.val)` while it's partial derivative will be `cos(a.val)*a.der` following the chain rule.\n\n#### Reverse Mode\n1) A \"`Node`\" class was created with `.val`, `.grad_value` and `.children` ([partial der, child object]) attributes and overloaded elementary dunder methods and elementary functions that update .children\n    - A `grad()` method was created that recursively sums the (partial der * adjoint) for all children of the parent Node (thus acting as the backwards pass)\n2) AutoDiffReverse class automatically creates Node objects according to the input array.\n3) AutoDiffReverse class creates the `Jacobian` by calling the gradient method on unit seed vectors and iterating  through the size `N` (number of output functions).\n4) AutoDiffReverse class directional derivative (`dir_dev`) method requires the creation of the `Jacobian` and returns a matrix multiplication of the Jacobian times the custom vector.\n\nLet's look at the same sample function `sin` but within `Node` class this time:\n\n```\nclass Node:\n    def __init__(self, **kwargs):\n        self.val = 0\n        self.children = [] \n        self.grad_value = None #the adjoint\n        ...\n    def grad(self):\n\n        # recurse only if the value is not yet cached\n        if self.grad_value is None:\n            # recursively calculate derivative (adjoint) using chain rule\n            self.grad_value = sum(weight * node.grad()\n                                  for weight, node in self.children)\n        return self.grad_value\n\n    def gradient(self, fn_idx):\n            ... \n            inputs_vars = [Node(val=val) for val in self.vals] # create Node inputs\n            f_vars = np.array([f_(inputs_vars) for f_ in self.f]) \n\n            # Seed with .grad_value = 1 only for the function at fn_idx and all all others .grad_value = 0\n            for i in range(len(f_vars)):\n                if i == fn_idx:\n                    f_vars[i].grad_value = 1.0\n                else:\n                    f_vars[i].grad_value = 0\n\n            # Get the partial derivative wrt each input\n            der = [inputs_.grad() for inputs_ in inputs_vars]\n            return der\n\n    def sin(a):\n        out = Node()\n        try:\n            out.val = np.sin(a.val)\n            a.children.append((np.cos(a.val), out)) # weight = ∂z/∂self = cos(self)\n        except AttributeError:\n            try:\n                out.val = np.sin(a)\n            except Exception as e:\n                raise TypeError('Sin failed: `input` not an `Node` object or a real number.')\n        return out\n```\n\nNote that for calculating the gradient through the reverse mode we need to first append the partial derivatives and the dependencies of the expression tree during the forward pass. This is done when calling `f_vars = np.array([f_(inputs_vars) for f_ in self.f])` within `gradient` which will pass through our custom functions such as `sin`. \n\nThen, you do a reverse pass by starting at a single output variable, ‘seeding it’ (e.g. set the derivative of the output variable to 1 and the derivatives of the other output variables to 0). This is executed at lines `f_vars[i].grad_value = ...`. After seeding, you propagate backwards to all the input variables (this is done when calling for `der = [inputs_.grad() for inputs_ in inputs_vars]`).\n\n## Our extension\n\nOur proposed extension includes a working `reverse` mode implementation. At user level, it exposes the same methods and attributes as the forward mode and the usage is transparent for the user (doesn't realize any change in the usage other than setting the mode to `backward`). More specifically, the user may instantiate an `AutoDiff` object through the following syntax (similar to the `forward` syntax):\n\n```autodiff = AutoDiff(vals=inputs_vals, f=f, mode='reverse')```\n\nThe user may access the following methods and attributes from this class:\n\n* `inputs`\n* `outputs`\n* `jacobian`\n* `dir_der(seed)`\n* `gradient(fn_idx)`\n\nWhich represent exactly the same values as for the `forward` mode described in previous sections. It's usage is also exactly the same as in the `forward` mode.\n\nAll background content necessary to understand the `reverse` mode may be found in `Background > Reverse mode` section while it's usage it's described throughout all previous decoumentation alongside `forward` usage.\n\n## Broader Impact and Inclusivity Statement\nWe created this library to be as user-friendly as possible and to assist with common differentiation tasks like Newton's method and optimization problems. However, it is possible that as the library grows over time - in usage and functionality - that people may misuse our library. While we anticipate that initially the users will be primarily academics and hobbyists, what happens if the library becomes adopted by those with broad and significant societal impact? For instance, if the COMPAS tool - used to assess the likelihood of defendants becoming a recidivist - adopted our library to optimize their predictive models, it would become crucial to maintain the integrity of the library. As a result, we would need to devote more resources to testing, error management and debugging. Otherwise, the societal impacts of a erroneous automatic differentiation library could be vast.\n\nIn making our AD as user-friendly as possible, we considered the perspectives of a varied audience and sought not to deliberately exclude individuals or groups based on different cultural, economical, social, gender and disability groups. For instance, we tried to refrain from using exclusive terms such as master. However, we are cognisant that our library is exclusive because of three core deficiencies: 1) our documentation and much of our code's functions are writen only in English, 2) our code and documentation makes reference to parent and child (nodes) which may be triggering to some, and 3) pull requests to the library can only be approved by select few, which may make others feel like they cannot contribute. Given more time, we would like to make our library as language-friendly as possible, by writing documentation in different languages and code that is less English-centric, 2) determine better terminology for the parent-child relationship, and 3) democratize the contribution reviewal and approval process. Finally, it is important to consider that there may be unanticipated exlusive characteristics of our library that will be revealed with broader usage. Thus, it is paramount that a forum be created for users to voice concerns and for there to be a standardized process to review those concerns and implement changes if needed.\n\n\n## Future Features\nFuture work on the library will remain focused on the original objective: to make an AD package that is as user-friendly as possible for our target users, primarily academics and hobbyists. As such, development work on future features is as follows:\n- Add more compatible functions primarily usage in academic research (e.g. absolute value, Gaussian)\n    - Complement the test suite with tests for the additional functions\n- Print run time and/or computational intensity of the class methods\n    - Initial ideas include implementing the time module and using the time.clock() method\n- Add logic to decide on using Forward or Reverse mode based on m, n dimensionality\n    - Print the suggestion to the user to help with useability\n- Create a graphical user interface (GUI) to execute the library\n    - This could be a done by hosting a public server similar to autoed.herokuapp.com\n- Create a cache to improve runtime (e.g. data structure to track stored intermediate variables on independent passes)\n    - Initial ideas for the data structures include a disctionary or graph\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DJ-WJ/cs107-FinalProject",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "autodiff-djw",
    "package_url": "https://pypi.org/project/autodiff-djw/",
    "platform": "",
    "project_url": "https://pypi.org/project/autodiff-djw/",
    "project_urls": {
      "Homepage": "https://github.com/DJ-WJ/cs107-FinalProject"
    },
    "release_url": "https://pypi.org/project/autodiff-djw/0.1.3/",
    "requires_dist": [
      "numpy",
      "scipy"
    ],
    "requires_python": ">=3.6",
    "summary": "Automatic differentiation package AC207",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8884798,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f90e57b52942659769f6bd146ae93c0bc8af66c21e01e57d0ff53eefbdaa56a",
          "md5": "052dd1c87f07805d89976211fbe38390",
          "sha256": "51b7d0106d7d3f15f4151286f7c93139be389925c9a3576b8ea7a53249723e29"
        },
        "downloads": -1,
        "filename": "autodiff_djw-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "052dd1c87f07805d89976211fbe38390",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6464,
        "upload_time": "2020-11-19T15:47:59",
        "upload_time_iso_8601": "2020-11-19T15:47:59.235812Z",
        "url": "https://files.pythonhosted.org/packages/1f/90/e57b52942659769f6bd146ae93c0bc8af66c21e01e57d0ff53eefbdaa56a/autodiff_djw-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb2e93334c8c40ceab0e8709d23ad48e23e748030eaf858015b926fa7519f412",
          "md5": "64ad93a911113ff990ef654a030b5b80",
          "sha256": "c8351a4c4d69035f62af8cc446285a52f1dc1800f32f451991583665502648bc"
        },
        "downloads": -1,
        "filename": "autodiff-djw-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "64ad93a911113ff990ef654a030b5b80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4083,
        "upload_time": "2020-11-19T15:48:00",
        "upload_time_iso_8601": "2020-11-19T15:48:00.448188Z",
        "url": "https://files.pythonhosted.org/packages/bb/2e/93334c8c40ceab0e8709d23ad48e23e748030eaf858015b926fa7519f412/autodiff-djw-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbaad47a2861b3475d9f61da4f74c1494f3826307903b52e3094ea5027fa4097",
          "md5": "de519b52946f9170e7c8c580f08200f0",
          "sha256": "4ac016be64ba905c2cb180503ee686fc2a7e5b5abc532ee293882f79858f8262"
        },
        "downloads": -1,
        "filename": "autodiff_djw-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de519b52946f9170e7c8c580f08200f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12993,
        "upload_time": "2020-12-11T02:32:26",
        "upload_time_iso_8601": "2020-12-11T02:32:26.425282Z",
        "url": "https://files.pythonhosted.org/packages/db/aa/d47a2861b3475d9f61da4f74c1494f3826307903b52e3094ea5027fa4097/autodiff_djw-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b2165769259ad48a86fb8786cd97b77db2e48c880b6b3d02177013afe93aef7",
          "md5": "00df171fa6ccede3d889c2d947e246d0",
          "sha256": "c8636babfdd51f0f6c8e14373bdb55651877fa356e8b327183ad24973f8ff474"
        },
        "downloads": -1,
        "filename": "autodiff-djw-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00df171fa6ccede3d889c2d947e246d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11116,
        "upload_time": "2020-12-11T02:32:28",
        "upload_time_iso_8601": "2020-12-11T02:32:28.061252Z",
        "url": "https://files.pythonhosted.org/packages/4b/21/65769259ad48a86fb8786cd97b77db2e48c880b6b3d02177013afe93aef7/autodiff-djw-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c840dbf4bebbc72726c213ffb9669e02cc78484bbed9be917014e87e05f06f7d",
          "md5": "1838e8679d743015bdaf4489fa74a82f",
          "sha256": "dde805f7e66ff574cdf9ea4376cf4ecd3a34972ada3d1f80db9162432a81410c"
        },
        "downloads": -1,
        "filename": "autodiff_djw-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1838e8679d743015bdaf4489fa74a82f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13016,
        "upload_time": "2020-12-11T02:35:58",
        "upload_time_iso_8601": "2020-12-11T02:35:58.294745Z",
        "url": "https://files.pythonhosted.org/packages/c8/40/dbf4bebbc72726c213ffb9669e02cc78484bbed9be917014e87e05f06f7d/autodiff_djw-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77b4e9f1f3825b61f3e7d25826c638037a9c85ae9d4db4c511dc889824ca01a6",
          "md5": "e52a78581861802ff449d48b3b98c5a8",
          "sha256": "caf1e67e3e8bfaec0e036652dab8cd872601cbc5f40293ff5f8673f0580c21bb"
        },
        "downloads": -1,
        "filename": "autodiff-djw-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e52a78581861802ff449d48b3b98c5a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11122,
        "upload_time": "2020-12-11T02:35:59",
        "upload_time_iso_8601": "2020-12-11T02:35:59.362254Z",
        "url": "https://files.pythonhosted.org/packages/77/b4/e9f1f3825b61f3e7d25826c638037a9c85ae9d4db4c511dc889824ca01a6/autodiff-djw-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ec231120d570e21d77578149fdece85c17d9dfb0cc4ce00238c7b75db7cf9ed",
          "md5": "030ba8fd18d2d1268bc46cb6f6309c43",
          "sha256": "853f82d5a16a91c0e44a862c4ff38cdeed2d0f1740ce1b134bd5c3dfc5f3d564"
        },
        "downloads": -1,
        "filename": "autodiff_djw-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "030ba8fd18d2d1268bc46cb6f6309c43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13022,
        "upload_time": "2020-12-11T02:48:37",
        "upload_time_iso_8601": "2020-12-11T02:48:37.841587Z",
        "url": "https://files.pythonhosted.org/packages/7e/c2/31120d570e21d77578149fdece85c17d9dfb0cc4ce00238c7b75db7cf9ed/autodiff_djw-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df99af312617fd38d190a8ba91eea91a257c1bd14a091e82db351da1ae4933b9",
          "md5": "f0c2752da802a11db605df2df75bf4af",
          "sha256": "2cbafea5da7a89dd5f75de9328d2466a9948f77077237693963b1816c8aeb179"
        },
        "downloads": -1,
        "filename": "autodiff-djw-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f0c2752da802a11db605df2df75bf4af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11133,
        "upload_time": "2020-12-11T02:48:38",
        "upload_time_iso_8601": "2020-12-11T02:48:38.933384Z",
        "url": "https://files.pythonhosted.org/packages/df/99/af312617fd38d190a8ba91eea91a257c1bd14a091e82db351da1ae4933b9/autodiff-djw-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "674f24898571284bf15df03181da4c8106081c779cfcf07d8cd6c5f00ebfebb7",
          "md5": "91ce8f3c5650b3cff0096eaad726afcd",
          "sha256": "0b56332c31c5b62d49d3c4ca59d3a9a5801b41159df4f1364fc3f631139ecd34"
        },
        "downloads": -1,
        "filename": "autodiff_djw-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91ce8f3c5650b3cff0096eaad726afcd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18190,
        "upload_time": "2020-12-12T15:04:04",
        "upload_time_iso_8601": "2020-12-12T15:04:04.672476Z",
        "url": "https://files.pythonhosted.org/packages/67/4f/24898571284bf15df03181da4c8106081c779cfcf07d8cd6c5f00ebfebb7/autodiff_djw-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a05f065c775014e7be89aee51b139fbdaf12c093f9869d5d8d0bbd5d92eaaa80",
          "md5": "a6d79d664fb832f3f23399970664c244",
          "sha256": "cc040c889e785dc25c93ec3fbb12cb9fb11ecdbb6878c529f3cef3ef0736aba6"
        },
        "downloads": -1,
        "filename": "autodiff-djw-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a6d79d664fb832f3f23399970664c244",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15693,
        "upload_time": "2020-12-12T15:04:06",
        "upload_time_iso_8601": "2020-12-12T15:04:06.879684Z",
        "url": "https://files.pythonhosted.org/packages/a0/5f/065c775014e7be89aee51b139fbdaf12c093f9869d5d8d0bbd5d92eaaa80/autodiff-djw-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "674f24898571284bf15df03181da4c8106081c779cfcf07d8cd6c5f00ebfebb7",
        "md5": "91ce8f3c5650b3cff0096eaad726afcd",
        "sha256": "0b56332c31c5b62d49d3c4ca59d3a9a5801b41159df4f1364fc3f631139ecd34"
      },
      "downloads": -1,
      "filename": "autodiff_djw-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "91ce8f3c5650b3cff0096eaad726afcd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18190,
      "upload_time": "2020-12-12T15:04:04",
      "upload_time_iso_8601": "2020-12-12T15:04:04.672476Z",
      "url": "https://files.pythonhosted.org/packages/67/4f/24898571284bf15df03181da4c8106081c779cfcf07d8cd6c5f00ebfebb7/autodiff_djw-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a05f065c775014e7be89aee51b139fbdaf12c093f9869d5d8d0bbd5d92eaaa80",
        "md5": "a6d79d664fb832f3f23399970664c244",
        "sha256": "cc040c889e785dc25c93ec3fbb12cb9fb11ecdbb6878c529f3cef3ef0736aba6"
      },
      "downloads": -1,
      "filename": "autodiff-djw-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a6d79d664fb832f3f23399970664c244",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15693,
      "upload_time": "2020-12-12T15:04:06",
      "upload_time_iso_8601": "2020-12-12T15:04:06.879684Z",
      "url": "https://files.pythonhosted.org/packages/a0/5f/065c775014e7be89aee51b139fbdaf12c093f9869d5d8d0bbd5d92eaaa80/autodiff-djw-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}