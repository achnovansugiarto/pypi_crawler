{
  "info": {
    "author": "Martin Pilát",
    "author_email": "8pilatmartin8@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "This library was created for the course **IB110 - Introduction to Informatics** at [MUNI FI](https://www.fi.muni.cz/).\r\n\r\nBelow is an overview of how these computational models can be used. Documentation for the functions is located in the files with the implementation.\r\n\r\n# FINITE AUTOMATA\r\n\r\nThis library supports **deterministic** and **nondeterministic** finite automata. You can find the implementation of these models in the module `automaton`. Consider class the class located in the `base.py` as abstract, its only purpose is to avoid duplicities in the implementation of these models.\r\n\r\nIn order to create an automaton you will need to specify the five-tuple `(Q, Σ, δ, q0, F)`, where:\r\n- The set of states `Q` is represented by `Set[str]`\r\n- The set of alphabet symbols `Σ` is represented by `Set[str]`\r\n- The transition function `δ` is represented by either `DFATransitions` or `NFATransitions`. These types are described below.\r\n- The set of final states `F` is represented by `Set[str]`\r\n\r\nThere are implemented some helper functions if you need to update the automata automatically. (`remove_state(...)`, `add_transition(...)`, `is_valid()`, ...)\r\n\r\n### Deterministic finite automata (DFA)\r\n\r\nThe implementation for DFA can be found in the file `dfa.py` with a description of each function.\r\n\r\n#### Example use-case of DFA:\r\nThe `DFATransitions` is an alias to `Dict[str, Dict[str, str]]`. Keys of this dictionary are symbols where the transition begins. Values are nested dictionaries with alphabet symbols as keys and states where the transition ends as a values.\r\n\r\n**Example of a transition function**\r\n[![](https://mermaid.ink/img/pako:eNpFj7EOgzAMRH8l8gRSkIAxlTp1bJd2bDpExJQIQlASBoT497qBqp78zmfLt0LjNIKAt1dTx653OTKqUGVZqPL8oJqo_tLB5ZO9WFGcyffzE1a8TFq9-9IkxGVAWmCtGYbCTaoxcRElp4F3Pf6VE3Cw6K0ymr5Z0wGIHVqUIKjVyvcS5LiRT83RPZaxARH9jBzmSauIF6MohAXRqiGQitpE5297vJRy-wDaf0jH?type=png)](https://mermaid.live/edit#pako:eNpFj7EOgzAMRH8l8gRSkIAxlTp1bJd2bDpExJQIQlASBoT497qBqp78zmfLt0LjNIKAt1dTx653OTKqUGVZqPL8oJqo_tLB5ZO9WFGcyffzE1a8TFq9-9IkxGVAWmCtGYbCTaoxcRElp4F3Pf6VE3Cw6K0ymr5Z0wGIHVqUIKjVyvcS5LiRT83RPZaxARH9jBzmSauIF6MohAXRqiGQitpE5297vJRy-wDaf0jH)\r\n\r\nTransition shown above can be implemented like so:\r\n```python\r\ntransition_fn: DFATransitions = {\r\n    \"s1\": {\r\n        \"0\": \"s2,\r\n        \"1\": \"s2,\r\n    },\r\n}\r\n```\r\n\r\n**More complex example**\r\n[![](https://mermaid.ink/img/pako:eNpdkT1vwyAQhv8KusmWbMn4Y6FSp4zp0oxxBmTOCQo2FsaDFeW_5-IWmpSJ5-F4OR036KxCEHB2crqw_Xc7MlpzkSRzkaa_xIl4pJKojFQRVZFqojpSkxA26ZND7pGdWJ5_UmbIJuSbKUN-NNWLKTbThFefNdm747GqDt1EU70Y_nar-Z-0-dmvBqld1mtjcjvJTvtVFBkdOHvFP_MBGQzoBqkVTfG2BYC_4IAtCNoq7OVifAvteKdSuXh7WMcOhHcLZrBMSnrcaUnzH0D00sxkUWlv3dfPz3R27PUZ7g-ne3N9?type=png)](https://mermaid.live/edit#pako:eNpdkT1vwyAQhv8KusmWbMn4Y6FSp4zp0oxxBmTOCQo2FsaDFeW_5-IWmpSJ5-F4OR036KxCEHB2crqw_Xc7MlpzkSRzkaa_xIl4pJKojFQRVZFqojpSkxA26ZND7pGdWJ5_UmbIJuSbKUN-NNWLKTbThFefNdm747GqDt1EU70Y_nar-Z-0-dmvBqld1mtjcjvJTvtVFBkdOHvFP_MBGQzoBqkVTfG2BYC_4IAtCNoq7OVifAvteKdSuXh7WMcOhHcLZrBMSnrcaUnzH0D00sxkUWlv3dfPz3R27PUZ7g-ne3N9)\r\n\r\n\r\n```python\r\nfrom ib110hw.automaton.dfa import DFA, DFATransitions\r\n\r\ndfa_transitions: DFATransitions = {\r\n    \"s1\": { \r\n        \"1\": \"s2\", \r\n        \"0\": \"s4\" \r\n    },\r\n    \"s2\": { \r\n        \"1\": \"s3\", \r\n        \"0\": \"s5\" \r\n    },\r\n    \"s3\": { \r\n        \"1\": \"s5\", \r\n        \"0\": \"s5\" \r\n    },\r\n    \"s4\": { \r\n        \"1\": \"s5\", \r\n        \"0\": \"s3\" \r\n    },\r\n    \"s5\": { \r\n        \"1\": \"s5\", \r\n        \"0\": \"s5\" \r\n    },\r\n}\r\n\r\nautomaton = DFA(\r\n    states={\"s1\", \"s2\", \"s3\", \"s4\", \"s5\" },\r\n    alphabet={\"1\", \"0\"},\r\n    initial_state=\"s1\",\r\n    final_states={\"s3\"},\r\n    transitions=dfa_transitions,\r\n)\r\n\r\nautomaton.is_accepted(\"11\") # True\r\nautomaton.is_accepted(\"00\") # True\r\nautomaton.is_accepted(\"10\") # False\r\n```\r\n\r\n### Nondeterministic finite automata (NFA)\r\n\r\nThe implementation for the NFA can be found in the file **nfa.py** with a description of each function.\r\n\r\n#### Example use-case of NFA:\r\nTransition function of an NFA is described by the `NFATransitions`. It is an alias to `Dict[str, Dict[str, Set[str]]]`. It is similar to the `DFATransitions` but instead of the next-state string, there is a **set** of next-state strings. \r\n\r\n**Example of a transition function**\r\n[![](https://mermaid.ink/img/pako:eNplkD0PgjAQhv9KcxMkkPCx1cTJURcdxaGhhzS0lJQyEMJ_9yyog536PNf3ctcFaisRODydGFp2vlY9ozPmUTTmcbxTQVR8qSQq37RzdmcPlqZHSn3ShFkwxZ8pt1zwo581UgPWKK1TO4ha-ZlnCRWc7fBnDpCAQWeEkjTrEhqAb9FgBZyuUriugqpf6Z2YvL3NfQ3cuwkTmAYpPJ6UoBUN8EbokSxK5a27bMuHP1hf2DVPmA?type=png)](https://mermaid.live/edit#pako:eNplkD0PgjAQhv9KcxMkkPCx1cTJURcdxaGhhzS0lJQyEMJ_9yyog536PNf3ctcFaisRODydGFp2vlY9ozPmUTTmcbxTQVR8qSQq37RzdmcPlqZHSn3ShFkwxZ8pt1zwo581UgPWKK1TO4ha-ZlnCRWc7fBnDpCAQWeEkjTrEhqAb9FgBZyuUriugqpf6Z2YvL3NfQ3cuwkTmAYpPJ6UoBUN8EbokSxK5a27bMuHP1hf2DVPmA)\r\nTransition shown above can be implemented like so:\r\n```python\r\ntransition_fn: NFATransitions = {\r\n    \"s1\": {\r\n        \"0\": {\"s2\", \"s3\"},\r\n        \"1\": set(), # specifying this is unnecessary\r\n    },\r\n}\r\n```\r\n\r\n**More complex example**\r\n[![](https://mermaid.ink/img/pako:eNpNkD0PgjAQhv9KcxMkkPA11cTJURcdxaGhhzQWSkoZCOG_e1ZAO_V5enkvfWeojETg8LSib9j5WnaMzpAGwZCG4UoZUbZTHhDm4c4FYfGhlZM7e7A4PlLKlkaYepNtibvJ_2YSb4otdzd-xtvBTRppBauV1rHpRaXcxJOIHqx54c8cIIIWbSuUpN_NPgBcgy2WwOkqhX2VUHYLzYnRmdvUVcCdHTGCsZfC4UkJKqUFXgs9kEWpnLGXb12-teUNz6daTA?type=png)](https://mermaid.live/edit#pako:eNpNkD0PgjAQhv9KcxMkkPA11cTJURcdxaGhhzQWSkoZCOG_e1ZAO_V5enkvfWeojETg8LSib9j5WnaMzpAGwZCG4UoZUbZTHhDm4c4FYfGhlZM7e7A4PlLKlkaYepNtibvJ_2YSb4otdzd-xtvBTRppBauV1rHpRaXcxJOIHqx54c8cIIIWbSuUpN_NPgBcgy2WwOkqhX2VUHYLzYnRmdvUVcCdHTGCsZfC4UkJKqUFXgs9kEWpnLGXb12-teUNz6daTA)\r\n\r\n\r\n```python\r\nfrom ib110hw.automaton.nfa import NFA, NFATransitions\r\n\r\nnfa_transitions: NFATransitions = {\r\n    \"s1\": { \r\n        \"1\": { \"s2\" }, \r\n        \"0\": { \"s4\" }, \r\n    },\r\n    \"s2\": { \r\n        \"1\": { \"s3\" }, \r\n    },\r\n    \"s4\": { \r\n        \"0\": { \"s3\" }, \r\n    },\r\n}\r\n\r\nautomaton = NFA(\r\n    states={\"s1\", \"s2\", \"s3\", \"s4\", \"s5\" },\r\n    alphabet={\"1\", \"0\"},\r\n    initial_state=\"s1\",\r\n    final_states={\"s3\"},\r\n    transitions=nfa_transitions,\r\n)\r\n\r\nautomaton.is_accepted(\"11\") # True\r\nautomaton.is_accepted(\"00\") # True\r\nautomaton.is_accepted(\"10\") # False\r\n```\r\n\r\n# TURING MACHINE\r\nThis library supports a **deterministic** and **multi-tape** Turing machines. You can find the implementation in the module `turing`.\r\n## Tape\r\nThe implementation of the tape for the Turing machine can be found in the file `tape.py`. \r\n\r\n```python\r\nfrom ib110hw.turing.tape import Tape\r\n\r\ntape: Tape = Tape()\r\ntape.write(\"Hello\") \r\nprint(tape)         # | H | e | l | l | o |   |\r\n                    #   ^\r\n\r\ntape.move_left()    \r\nprint(tape)         # |   | H | e | l | l | o |   |\r\n                    #   ^\r\n                    \r\ntape.move_right()\r\ntape.move_right()\r\nprint(tape)         # |   | H | e | l | l | o |   |\r\n                    #           ^  \r\n                    \r\ntape.write_symbol(\"a\")\r\nprint(tape)         # |   | H | a | l | l | o |   |\r\n                    #           ^  \r\n                    \r\ntape.clear()        # |   |\r\n                    #   ^\r\n\r\n```\r\n## Deterministic Turing Machine (DTM)\r\nThe following DTM checks whether the input string is a palindrome:\r\n\r\n```python\r\nfrom ib110hw.turing.dtm import DTM, DTMTransitions\r\nfrom ib110hw.turing.tape import Direction\r\n\r\nfn: DTMTransitions = {\r\n    \"init\": {\r\n        \">\": (\"mark\", \">\", Direction.RIGHT),\r\n    },\r\n    \"mark\": {\r\n        \"a\": (\"foundA\", \"X\", Direction.RIGHT),\r\n        \"b\": (\"foundB\", \"X\", Direction.RIGHT),\r\n        \"X\": (\"accept\", \"X\", Direction.STAY),\r\n        \"\": (\"accept\", \"\", Direction.STAY),\r\n    },\r\n    \"foundA\": {\r\n        \"a\": (\"foundA\", \"a\", Direction.RIGHT),\r\n        \"b\": (\"foundA\", \"b\", Direction.RIGHT),\r\n        \"X\": (\"checkA\", \"X\", Direction.LEFT),\r\n        \"\": (\"checkA\", \"\", Direction.LEFT),\r\n    },\r\n    \"checkA\": {\r\n        \"a\": (\"back\", \"X\", Direction.LEFT),\r\n        \"b\": (\"reject\", \"b\", Direction.STAY),\r\n        \"X\": (\"accept\", \"X\", Direction.STAY),\r\n    },\r\n    \"foundB\": {\r\n        \"a\": (\"foundB\", \"a\", Direction.RIGHT),\r\n        \"b\": (\"foundB\", \"b\", Direction.RIGHT),\r\n        \"X\": (\"checkB\", \"X\", Direction.LEFT),\r\n        \"\": (\"checkB\", \"\", Direction.LEFT),\r\n    },\r\n    \"checkB\": {\r\n        \"a\": (\"reject\", \"a\", Direction.STAY),\r\n        \"b\": (\"back\", \"X\", Direction.LEFT),\r\n        \"X\": (\"accept\", \"X\", Direction.STAY),\r\n    },\r\n    \"back\": {\r\n        \"a\": (\"back\", \"a\", Direction.LEFT),\r\n        \"b\": (\"back\", \"b\", Direction.LEFT),\r\n        \"X\": (\"mark\", \"X\", Direction.RIGHT)\r\n    }\r\n}\r\n\r\nmachine: DTM = DTM(\r\n    states={\"init\", \"mark\", \"gotoEndA\", \"checkA\", \"gotoEndB\", \"checkB\", \"accept\", \"reject\"},\r\n    input_alphabet={\"a\", \"b\"},\r\n    acc_states={\"accept\"},\r\n    rej_states={\"reject\"},\r\n    initial_state=\"init\",\r\n    transition_function=fn\r\n)\r\n\r\nmachine.tape.write(\">aabbabbaa\")\r\n```\r\n\r\n### DTM Transition function\r\nA DTM transition function is represented by a nested dictionary defined by the type `DTMTransitions`.\r\nThe keys of this dictionary are **states** of the turing machine, and values are dictionaries with **read symbols** as keys and a tuple containing the **next state**, **symbol to be written** and **the tape head direction** as values.\r\n\r\nRule `δ(init, >) -> (next, >, 1)` can be defined like so:\r\n```python \r\nfunction: DTMransitions = {\r\n    \"init\": {\r\n        \">\": (\"next\", \">\", Direction.RIGHT)\r\n        }\r\n}\r\n```\r\n\r\n# Multi-tape Turing Machine (MTM)\r\nThe following MTM has the same function as the DTM above:\r\n\r\n```python\r\nfrom ib110hw.turing.mtm import MTM, MTMTransitions\r\nfrom ib110hw.turing.tape import Direction\r\n\r\nfunction: MTMTransitions = {\r\n    \"init\": {\r\n        (\">\", \"\"): (\"copy\", (\">\", \"\"), (Direction.RIGHT, Direction.STAY))\r\n    },\r\n    \"copy\": {\r\n        (\"a\", \"\"): (\"copy\", (\"a\", \"a\"), (Direction.RIGHT, Direction.RIGHT)),\r\n        (\"b\", \"\"): (\"copy\", (\"b\", \"b\"), (Direction.RIGHT, Direction.RIGHT)),\r\n        (\"\", \"\"): (\"goToStart\", (\"\", \"\"), (Direction.LEFT, Direction.STAY)),\r\n    },\r\n    \"goToStart\": {\r\n        (\"a\", \"\"): (\"goToStart\", (\"a\", \"\"), (Direction.LEFT, Direction.STAY)),\r\n        (\"b\", \"\"): (\"goToStart\", (\"b\", \"\"), (Direction.LEFT, Direction.STAY)),\r\n        (\">\", \"\"): (\"check\", (\">\", \"\"), (Direction.RIGHT, Direction.LEFT))\r\n    },\r\n    \"check\": {\r\n        (\"a\", \"a\"): (\"check\", (\"a\", \"a\"), (Direction.RIGHT, Direction.LEFT)),\r\n        (\"b\", \"b\"): (\"check\", (\"b\", \"b\"), (Direction.RIGHT, Direction.LEFT)),\r\n        (\"\", \"\"): (\"accept\", (\"\", \"\"), (Direction.STAY, Direction.STAY)),\r\n        (\"a\", \"b\"): (\"reject\", (\"a\", \"b\"), (Direction.STAY, Direction.STAY)),\r\n        (\"b\", \"a\"): (\"reject\", (\"b\", \"a\"), (Direction.STAY, Direction.STAY)),\r\n    }\r\n}\r\n\r\nmachine: MTM = MTM(\r\n    states={\"init\", \"goToEnd\", \"goToStart\", \"check\", \"accept\", \"reject\"},\r\n    initial_state=\"init\",\r\n    input_alphabet={\"a\", \"b\"},\r\n    acc_states={\"accept\"},\r\n    rej_states={\"reject\"},\r\n    transition_function=function)\r\n\r\nmachine.write(\">aabbabbaa\")\r\n```\r\n\r\n### MTM Transition Function\r\nA MTM transition function is represented by a nested dictionary defined by the type `MTMTransitions`. Compared to `DTMTransitions`, it takes a tuple of read symbols instead of a singular symbol and a tuple of directions instead of a singular direction. Length of these tuples is the amount of tapes.\r\n\r\nRule `δ(init, (>, ␣)) = (next, (>, a), (1, 0))` can be defined like so:\r\n```python \r\nfunction: MTMransitions = {\r\n    \"init\": {\r\n        (\">\", \"\"): (\"next\", (\">\", \"a\"), (Direction.RIGHT, Direction.LEFT))\r\n        }\r\n}\r\n```\r\n\r\n# DTM and MTM Simulation\r\nYou can simulate the turing machine using the provided function `simulate(...)`. By default, every step of the Turing machine will be printed to console with 0.5s delay inbetween. This behaviour can be changed by setting the `to_console` and `delay` parameters. If the parameter `to_console` is set to `False`, the delay will be ignored.\r\n\r\n```python\r\nmachine.simulate(to_console=True, delay=0.3) # True\r\n```\r\n\r\nIf you want to look at the whole history, you can set parameter `to_file` to `True`. Every step will be printed to file based on the path provided in the parameter `path`. Default path is set to `./simulation.txt`.\r\n```python\r\nturing.simulate(to_console=False, to_file=True, path=\"~/my_simulation.txt\") # True\r\n```\r\n\r\nThe `BaseTuringMachine` class contains the attribute `max_steps` to avoid infinite looping. By default, it is set to 100. The computation will stop if the simulation exceeds the value specified by this attribute. This can be an issue on larger inputs, so setting it to a bigger number may be needed.\r\n```python\r\nturing.max_steps = 200\r\n```\r\n\r\n### Simulation in Pycharm\r\nFor the optimal visualisation of the simulation in PyCharm you need to **enable** the `Terminal emulation`. \r\n\r\nYou can do so by going to `Run > Edit configurations ...` and then checking the `Emulate terminal in output console` box. \r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pilatmartin/ib110hw",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ib110hw",
    "package_url": "https://pypi.org/project/ib110hw/",
    "platform": null,
    "project_url": "https://pypi.org/project/ib110hw/",
    "project_urls": {
      "Homepage": "https://github.com/pilatmartin/ib110hw"
    },
    "release_url": "https://pypi.org/project/ib110hw/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17259607,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f995c89cdc51cd9f6479c7abef8fa7d18b1ca6720d7e76e127cb0171f0531e84",
          "md5": "fdc2ba7b682079b39104e020a5aeaac8",
          "sha256": "daed6556b190e3d5b60c72f66f21b44ec04a5d08d2e1eca981a95f6a595caf45"
        },
        "downloads": -1,
        "filename": "ib110hw-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdc2ba7b682079b39104e020a5aeaac8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16832,
        "upload_time": "2023-03-12T10:39:55",
        "upload_time_iso_8601": "2023-03-12T10:39:55.607127Z",
        "url": "https://files.pythonhosted.org/packages/f9/95/c89cdc51cd9f6479c7abef8fa7d18b1ca6720d7e76e127cb0171f0531e84/ib110hw-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f8337afacef5574febd86f9a249b22dd1ae5613c05e4ba947930b392afd4fb7",
          "md5": "b3f20c05c857edb108e6c5ad70f01cf5",
          "sha256": "95348aadac8b3c80b89bec7601fdd199b9f2a3f75c9a0f61b161fe9353d87634"
        },
        "downloads": -1,
        "filename": "ib110hw-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b3f20c05c857edb108e6c5ad70f01cf5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15106,
        "upload_time": "2023-03-12T10:39:59",
        "upload_time_iso_8601": "2023-03-12T10:39:59.524989Z",
        "url": "https://files.pythonhosted.org/packages/7f/83/37afacef5574febd86f9a249b22dd1ae5613c05e4ba947930b392afd4fb7/ib110hw-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28ad2e8f3a7b86b5b3e0df88263bfb72f5bb15dd88b0469da4c9414ce4efb7e9",
          "md5": "b3790f5c66c4e32fbabcb4e79ad49009",
          "sha256": "d94e8f37a31a9653b322f5ef4522a6a400ebc0aa26aba3084201caeeeeba2d2b"
        },
        "downloads": -1,
        "filename": "ib110hw-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3790f5c66c4e32fbabcb4e79ad49009",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17549,
        "upload_time": "2023-03-12T10:39:57",
        "upload_time_iso_8601": "2023-03-12T10:39:57.675705Z",
        "url": "https://files.pythonhosted.org/packages/28/ad/2e8f3a7b86b5b3e0df88263bfb72f5bb15dd88b0469da4c9414ce4efb7e9/ib110hw-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8973899774c76fa5f4f2605e59ea174e1e814aa4f5ca8590f7cb9b7ae5e7089",
          "md5": "e7ce452f28725f737846d22097dcc050",
          "sha256": "25c1532549c621e98f9b4acdbc235c743249681bfcf3ad24b19f982507639260"
        },
        "downloads": -1,
        "filename": "ib110hw-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e7ce452f28725f737846d22097dcc050",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16815,
        "upload_time": "2023-03-12T10:40:01",
        "upload_time_iso_8601": "2023-03-12T10:40:01.781272Z",
        "url": "https://files.pythonhosted.org/packages/f8/97/3899774c76fa5f4f2605e59ea174e1e814aa4f5ca8590f7cb9b7ae5e7089/ib110hw-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28ad2e8f3a7b86b5b3e0df88263bfb72f5bb15dd88b0469da4c9414ce4efb7e9",
        "md5": "b3790f5c66c4e32fbabcb4e79ad49009",
        "sha256": "d94e8f37a31a9653b322f5ef4522a6a400ebc0aa26aba3084201caeeeeba2d2b"
      },
      "downloads": -1,
      "filename": "ib110hw-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3790f5c66c4e32fbabcb4e79ad49009",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17549,
      "upload_time": "2023-03-12T10:39:57",
      "upload_time_iso_8601": "2023-03-12T10:39:57.675705Z",
      "url": "https://files.pythonhosted.org/packages/28/ad/2e8f3a7b86b5b3e0df88263bfb72f5bb15dd88b0469da4c9414ce4efb7e9/ib110hw-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8973899774c76fa5f4f2605e59ea174e1e814aa4f5ca8590f7cb9b7ae5e7089",
        "md5": "e7ce452f28725f737846d22097dcc050",
        "sha256": "25c1532549c621e98f9b4acdbc235c743249681bfcf3ad24b19f982507639260"
      },
      "downloads": -1,
      "filename": "ib110hw-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "e7ce452f28725f737846d22097dcc050",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16815,
      "upload_time": "2023-03-12T10:40:01",
      "upload_time_iso_8601": "2023-03-12T10:40:01.781272Z",
      "url": "https://files.pythonhosted.org/packages/f8/97/3899774c76fa5f4f2605e59ea174e1e814aa4f5ca8590f7cb9b7ae5e7089/ib110hw-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}