{
  "info": {
    "author": "C. Piker, C. Dorman",
    "author_email": "cpiker@users.noreply.github.com, cjdorman@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Magnetic Cleanliness Screening via Constant Rotation\n\n*Source Authors: Chris Piker, Cole Dorman*;  *Apparatus & Measurment Concept: David Miles*\n\nMagnetic cleanliness screening is the process of determining the magnetic\nproperties of various parts before they are added to instrumentation that\nmeasures magnetic fields.  The properties of interest are the stray field\nand dipole moment.  Typically a full field characterization is unnecessary.\nA simple pass/fail measurement of the worst possible magnetic field distortion\ncreated by an object is typically good enough for instrument construction\npurposes.  This software is intended for use with an apparatus that rotates\nthe part to be screened at a constant rate while the 3-axis magnetic field\nis regularly sampled at 2-N locations in space near the part.  *Magscreen* \nwas written using the [TwinLeaf VMR](https://github.com/twinleaf/tio-python) \nsensors for thier simple serial interface, though it easily could be adapted\nfor other equipment.\n\n\n## Screening Apparatus\n\nThe following equipment is needed:\n\n1. A cylinder of dry nitrogen.  This will be used to rotate the part\n   without electric motors.\n\n2. A turntable with paddles that intercept the escaping air.\n\n3. Three Twinleaf VMR sensors.\n\n4. The three labeled Twinleaf USB to differential serial UARTs \n\n5. A PC with this software installed.  For installation instructions\n   see the file [doc/install.md](doc/install.md)\n\nSensors are arrange around the turntable as depicted below.\n\n![Sensor Setup](doc/mag_screen_apperatus.jpg)\n\nEach differential serial <=> USB adapter has been labeled with it's internal serial\nnumber.  The screening software is able to read adapter numbers.  It uses these values\nto relate input data to sensor distances from the center of the object.  The default\ndistances and serial numbers are given below.  If your setup differs from this chart,\nbe sure to notify the screening program via it's command line arguments.\n\n| UART USB Serial | Default Radius (cm)|\n| ----------------| ------------------ |\n| DT04H6OF        |         9          |\n| DT04H6OX        |        11          |\n| DT04H6NY        |        15          |\n\nTo make sure the software has been installed, start a cmd.exe or bash shell and \nenter the following command:\n```bash\nmag_screen -h\n```\n\nIf this command prints program help text, then your software environment is setup.\nOtherwise see the [install.md](doc/install.md) document.\n\n## Screening Procedure\n\n1. Open a shell window and type `python3 mag_screen OBJECT_ID` and do *not* press enter. \n   Here `OBJECT_ID` is a name or other identifier by which the object's data will be tracked.\n\n2. Make sure the rotating plate is at rest. Then place the object to be screened onto the plate.\n\n3. Setup the screening command, similar to below, but don't hit ENTER yet.\n```bash\nmag_screen \"PartName\"                               # Example: Using all defaults\nmag_screen -r 8.5,11,13.5 \"PartName\"                # Example: non-default sensor distances\nmag_screen -u DT04H6OY,DT04H6OF,DT04H6M8 \"PartName\" # Example: non-default UART serial nums\nmag_screen -r 10,15 -u DT04H6OF,DT04H6OX \"PartName\" # Example: only two sensors\n```\n\n4. Turn the nitrogen gas relase value until the plate spins at about one revolution per 2 to 8 seconds.\n\n5. Once the rotator plate is moving, hit ENTER in the shell to run the program.  This will\n   output data to a CSV file and a PDF.  One containing test results the other containing\n   best fit plots.\n\n5. Turn off the compressed air flow.\n\n6. Remove the object from the plate\n\n## Output Archiving and Utility Programs\n\nExample program output files are given in the table below.\n\n| Step                | Links                                    |\n| ------------------- | ---------------------------------------- |\n| Raw data collection | [screwdriver.csv](test/screwdriver.csv)  |\n| Single test plots   | [screwdriver.p1.png](test/screwdriver.p1.png)  [screwdriver.p1.png](test/screwdriver.p1.png) [screwdriver.pdf](test/screwdriver.pdf)      |\n| Summary spreadsheet | [summary.csv](test/summary.csv)          |\n\nThough the screening program reads raw data, generates plots, and saves an experimental\nsummary record, only raw screening data need be captured during a test.  The following \nutility programs are also provided:\n```bash\nmag_screen_plot  # Reads raw *.csv data and generates single test summary plots\nmag_screen_sum   # Reads raw *.csv data and updates a running summary of part test data.\n```\n\nAfter data are collected, files should be moved to a long term storage location.  \n\n## Calculations\n\nThe data will be collected by three Twinleaf VMR magnetometers at three different\ndistances away using the mag_screen program. The object being screened has an\narbitrary dipole moment.  As the object is rotated it's internal field will \nperiodically be positioned at a maxima and minima from each sensor.  Over the course\nof a few rotations the magnetometers will measure the sinusoidal x, y, z functions\nof the magnetic field B from the object. Using Welch's method, we will collapse the\nsinusoidal field components into a power spectral density, which when taken the\nsquare root of, will give us x, y, z scalar values of the magnetic field B.\n\nThe Bx, By, Bz data from each sensor (now 9 total points) is then put into a Python 3\nfunction to project a dipole moment and stray field.  Using the law of cosines, we can\nfind the angle of the magnetic field and subsequently dipole moment relative to the\nz-axis. Knowing this angle, we can project these values into their most aggressive\norientation (directly parallel with the z-axis), giving us 6 total data points. Each\nmagnetometer projects an aggressive dipole moment and an aggressive magnetic field for\nits respective distance. These data points are then plot and best-fit to a function \n`1/distance^3`. The best fit taken is the new dipole moment with error being calculated\nusing the SciPy library curve_fit function. Using the calculated best-fit aggressive\ndipole, we calculate the stray field away at one meters. The function finds 3 things:\n\n\t1. the best fit dipole moment from the object's data, \n\t2. the stray field in nanoTesla 1 meter away, and,\n\t3. an indication the object has passed the test.\n\nIf its dipole moment is <.05, fail if the dipole moment is >.05, and a caution if the\ndipole moment is .0475 < m < .05.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cpiker/magscreen",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magscreen",
    "package_url": "https://pypi.org/project/magscreen/",
    "platform": null,
    "project_url": "https://pypi.org/project/magscreen/",
    "project_urls": {
      "Homepage": "https://github.com/cpiker/magscreen"
    },
    "release_url": "https://pypi.org/project/magscreen/0.3/",
    "requires_dist": [
      "numpy",
      "scipy",
      "matplotlib",
      "tio"
    ],
    "requires_python": ">=3.6",
    "summary": "Magnetic cleanliness screening via constant rotation.",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13812515,
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b89534dbbc56c660ca6d09fa77cb2b97917e2f58e24c7038b6de4f302c604d4",
          "md5": "48faaa322938e9bc494c3f085bb82d97",
          "sha256": "ea5290f42e258ccf192b37a9a90041c49c8238e1a89d29589fb2e12baac92283"
        },
        "downloads": -1,
        "filename": "magscreen-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48faaa322938e9bc494c3f085bb82d97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36513,
        "upload_time": "2022-05-13T21:59:40",
        "upload_time_iso_8601": "2022-05-13T21:59:40.693123Z",
        "url": "https://files.pythonhosted.org/packages/1b/89/534dbbc56c660ca6d09fa77cb2b97917e2f58e24c7038b6de4f302c604d4/magscreen-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffadda183a64253eef963b6f8db8f9cd42e36571f52211f359f61dfac12cf991",
          "md5": "6e6ddc0529d1ad20ab1e9228c392d04e",
          "sha256": "fd36b42919160a08e72d92f742b8377d76ec137f41b6724fda20bb3028e8a64c"
        },
        "downloads": -1,
        "filename": "magscreen-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6e6ddc0529d1ad20ab1e9228c392d04e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32435,
        "upload_time": "2022-05-13T21:59:42",
        "upload_time_iso_8601": "2022-05-13T21:59:42.202981Z",
        "url": "https://files.pythonhosted.org/packages/ff/ad/da183a64253eef963b6f8db8f9cd42e36571f52211f359f61dfac12cf991/magscreen-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b89534dbbc56c660ca6d09fa77cb2b97917e2f58e24c7038b6de4f302c604d4",
        "md5": "48faaa322938e9bc494c3f085bb82d97",
        "sha256": "ea5290f42e258ccf192b37a9a90041c49c8238e1a89d29589fb2e12baac92283"
      },
      "downloads": -1,
      "filename": "magscreen-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "48faaa322938e9bc494c3f085bb82d97",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 36513,
      "upload_time": "2022-05-13T21:59:40",
      "upload_time_iso_8601": "2022-05-13T21:59:40.693123Z",
      "url": "https://files.pythonhosted.org/packages/1b/89/534dbbc56c660ca6d09fa77cb2b97917e2f58e24c7038b6de4f302c604d4/magscreen-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffadda183a64253eef963b6f8db8f9cd42e36571f52211f359f61dfac12cf991",
        "md5": "6e6ddc0529d1ad20ab1e9228c392d04e",
        "sha256": "fd36b42919160a08e72d92f742b8377d76ec137f41b6724fda20bb3028e8a64c"
      },
      "downloads": -1,
      "filename": "magscreen-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "6e6ddc0529d1ad20ab1e9228c392d04e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 32435,
      "upload_time": "2022-05-13T21:59:42",
      "upload_time_iso_8601": "2022-05-13T21:59:42.202981Z",
      "url": "https://files.pythonhosted.org/packages/ff/ad/da183a64253eef963b6f8db8f9cd42e36571f52211f359f61dfac12cf991/magscreen-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}