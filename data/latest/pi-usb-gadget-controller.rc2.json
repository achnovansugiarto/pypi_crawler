{
  "info": {
    "author": "Foxy82",
    "author_email": "foxy82.github@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# pi-media-remote\n\n## Overview\n\nThis repo allows you to make a Pi Zero W (2) appear as a USB media remote control. It can then be plugged into devices like an Android TV or Fire TV and used to control it over the network.  \n\n## Requirements \n\n1. A Rasberry Pi Zero W or Rasberry Pi Zero W 2 (it may also work with a Pi 4 but I've not tested this)\n1. A way to connect the Pi Zero to the device to be controlled.\n    * For [Fire TV](https://www.amazon.co.uk/gp/product/B07M83762Y/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;psc=1&_encoding=UTF8&tag=foxy82-21&linkCode=ur2&linkId=acf241e9ea2e454f9e9116b9aa54ad7a&camp=1634&creative=6738) I used this cable: [FireTv OTG Cable](https://www.amazon.co.uk/gp/product/B08Q36HB3G/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;psc=1&_encoding=UTF8&tag=foxy82-21&linkCode=ur2&linkId=253509fffa53c07250e71ebdd6feae26&camp=1634&creative=6738)\n    * For Google Ghromecast with Android TV I use this adapter: [Chromecast with Google TV OTG Cable](https://www.amazon.co.uk/gp/product/B08Q36HB3G/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;psc=1&_encoding=UTF8&tag=foxy82-21&linkCode=ur2&linkId=fcd6d2731b8e1ad8d854ba923336bb38&camp=1634&creative=6738). This also allows you to use Wired Ethernet\n\n## Installation\n\n### Operating System\n\nFirst install a minimal Linux OS on the Raspberry Pi Zero - I use [DietPi](https://dietpi.com/) with no extra software installed and connect it to your WiFi.\n\n### Clone the repo\n\nssh to your pi and clone the repo\n\n```\ncd ~\nsudo apt-get install git\ngit clone https://github.com/foxy82/pi-usb-gadget-controller.git\n```\n\n### Install USB Gadget\n\nSetup the pi so that it will behave as a USB Gadget.\n\n```\ncd ~/pi-usb-gadget-controller\n./install_usb_gadget.sh\n```\n\n### Install the app\n\nGet the required packages first\n\n```\nsudo apt-get install python3 python3-pip\n```\n\n#### From pypi\n\n```\nsudo pip3 install pi_usb_gadget_controller\n```\n\n#### From source\n\n```\ncd ~/pi-usb-gadget-controller\nsudo pip3 install .\n```\n\n### Running\n\nThe above will install anm executable called ```UsbGadgetController```. Running this will start a server on the default settings - you will need to run as sudo to access the USB gadget device or setup permissions to access it as a regular user. \n\n```\n$ sudo UsbGadgetController\n```\n\nThere are some options that can be set\n\n```\n$ UsbGadgetController -h\nusage: UsbGadgetController [-h] [--device DEVICE] [--web_port WEB_PORT] [--socket_port SOCKET_PORT]\n                              [--logging {DEBUG,INFO,WARNING,ERROR}]\n\nSend commands to a USB Gadget\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --device DEVICE       The USB Gadget device. DEFAULTS to /dev/hidg0\n  --web_port WEB_PORT   The port to start the web_port on. DEFAULTS to 8080. NOTE if you specify a port here you also need\n                        to spcify a --socket_port otherwise the socket port won't be opened\n  --socket_port SOCKET_PORT\n                        The port to start the socket server on. DEFAULTS to 8888. NOTE if you specify a port here you also\n                        need to spcify a --web_port otherwise the web port won't be opened\n  --logging {DEBUG,INFO,WARNING,ERROR}\n                        The logging level to use. DEFAULTS to INFO\n\n```\n\n### Install as a service (optional)\n\nYou can install the server as a service to run on start up:\n```\ncd ~/pi-usb-gadget-controller\nsudo ./install_service.sh\n```\n\nThis will use the default options. To change the options edit ```~/pi-usb-gadget-controller/usb_gadget_controller.service```  and edit the ```ExecStart``` line then run ```./install_service.sh``` (first install) or ```./update_service.sh``` (updating)\n\n## Connect your pi\n\nShutdown the pi and then connect it to the device to be controlled using a *data* usb cable and using the *data* usb port on the Pi Zero (the one nearest the HDMI port on Zero W and Zero W2)\n\n## Usage \n\nThis app provides several ways to receive commands and currently supports the following:\n* UP\n* DOWN\n* LEFT\n* RIGHT\n* SELECT\n* HOME\n* BACK\n* PLAY\n* MUTE\n\n### Socket interface\n\nA socket interface is provided on port 8888 (by default) it takes the key to press in upper case e.g. UP,DOWN\n\n### Websocket interface\n\nA websocket interface is provided at http://ip:8080/ws it will take the commands in uppercase e.g. UP, DOWN\n\n### Rest API\n\nA REST API is provided by doing a GET at http://ip:8080/rest/<command> where command is the key to send e.g. UP, DOWN\n\n### GET Requests\n\nYou can also do plain GET requests to http://ip:8080/get/<command> where command is the key to send e.g. UP, DOWN. This call will provide a redirect to a web page (see below)\n\n### Web Page\n\nThe app also provides 3 web pages with remote buttons to click and send commands:\n* http://ip:8080 - is a web page using web socket for communication - it should be the fastest to use\n* http://ip:8080/js - is a web page that uses JavaScript to make REST calls in the background - I have sometimes seen Chrome take up to 1+ seconds to actually send the command so WebSocket is prefered if you can use that.\n* http://ip:8080/get - Sends GET requests and reloads the page on every click. Likely to be slow but will work if you don't want to use JavaScript or WebSockets.\n\n\n## Update\n\nThis is a work in progress so there might be times when updating is more complex. However you can try running ```./update.sh``` from the root of the git repo.\n\n## Uninstall\n\nThe best bet is to just write a brand new OS onto the SD card however if you do need to remove...\n\n```\ncd ~/pi-usb-gadget-controller\nsudo ./uninstall_service.sh # Only if you installed this as a service\nsudo ./uninstall_usb_gadget.sh # Follow the additional instructions\nsudo pip uninstall pi_usb_gadget_controller\n```\n\n\n## Roadmap\n\nThings i'm working on for this:\n\n* ~~V2 of the API to allow pressing and holding~~ (in v 0.3.0)\n* V3 of the API to allow keyboard keys to be sent.\n* V4 of the API to allow mouse events (possibility if I decide I need this)\n* A seperate app which will take input from a 2.4 GHz USB remote and transmit it to this app(in progress)\n* Using a [Pulse Eight USB CEC Adapter](https://www.amazon.co.uk/Pulse-Eight-na-USB-CEC-Adapter/dp/B005JU6LWM/ref=sr_1_1?crid=N8E5OFI7LAC3&amp;keywords=pulse+eight+USB+CEC&amp;qid=1649681621&amp;sprefix=pulse+eight+usb+cec%252Caps%252C57&amp;sr=8-1&_encoding=UTF8&tag=foxy82-21&linkCode=ur2&linkId=9de6a10b778cb0ef9814579952996036&camp=1634&creative=6738) to take CEC commands and send it to this app.\n* Use protobuffers to make it even more responsive (not needed at the moment)\n* Moon shot - can we add a way for a mic to send us audio data so that we could do a voice search? \n\n## Useful links\n\nLinks that helped me come up with this solution\n\n* Tutorial here on how to use the pi zero as a usb gadget - [https://www.isticktoit.net/?p=1383]\n* Tutorial for someone doing volume control: https://www.ekwbtblog.com/entry/2019/01/31/000000\n* Two tutorials on the report descriptor: [https://notes.iopush.net/blog/2016/custom-usb-hid-device-descriptor-media-keyboard/] and [https://eleccelerator.com/tutorial-about-usb-hid-report-descriptors/]\n* Tool to decode the report descriptor: [https://eleccelerator.com/usbdescreqparser/] (need to replace \\\\x with space for the tool)\n* To find keycodes: [https://www.usb.org/hid] document is titled \"HID Usage Tables 1.22\" we need section 15 \"Consumer Control\"",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/foxy82/pi-usb-gadget-controller/0.3.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/foxy82/pi-usb-gadget-controller",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pi-usb-gadget-controller",
    "package_url": "https://pypi.org/project/pi-usb-gadget-controller/",
    "platform": null,
    "project_url": "https://pypi.org/project/pi-usb-gadget-controller/",
    "project_urls": {
      "Download": "https://github.com/foxy82/pi-usb-gadget-controller/0.3.0.tar.gz",
      "Homepage": "https://github.com/foxy82/pi-usb-gadget-controller"
    },
    "release_url": "https://pypi.org/project/pi-usb-gadget-controller/0.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Application to take commands and send via USB to a Media device like a FireTV or Andriod TV with ChromeCast",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13501153,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02269983b25a59a3b3a63cf0d0daccc47ae2700f10876434da68065b55269833",
          "md5": "c302e31ef3460c6efbf41d99e564e0ef",
          "sha256": "c0fec7c5f11c108d57b3cef886fcd1c9bc60928aa2041fbfa1b41099c1f51629"
        },
        "downloads": -1,
        "filename": "pi_usb_gadget_controller-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c302e31ef3460c6efbf41d99e564e0ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12802,
        "upload_time": "2022-04-11T16:15:40",
        "upload_time_iso_8601": "2022-04-11T16:15:40.947088Z",
        "url": "https://files.pythonhosted.org/packages/02/26/9983b25a59a3b3a63cf0d0daccc47ae2700f10876434da68065b55269833/pi_usb_gadget_controller-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d427dd73bddc952f76c32376ff843f07e418a7c833e8be7eff3c232b48ec1706",
          "md5": "a8d3861f0b60e3581217b8de90f1a4b3",
          "sha256": "141fdf19af3108f72a552dae3af2655ea48b3485b1eccb7b3b1a9a55f19ec854"
        },
        "downloads": -1,
        "filename": "pi_usb_gadget_controller-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a8d3861f0b60e3581217b8de90f1a4b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14080,
        "upload_time": "2022-04-13T11:36:50",
        "upload_time_iso_8601": "2022-04-13T11:36:50.769534Z",
        "url": "https://files.pythonhosted.org/packages/d4/27/dd73bddc952f76c32376ff843f07e418a7c833e8be7eff3c232b48ec1706/pi_usb_gadget_controller-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d427dd73bddc952f76c32376ff843f07e418a7c833e8be7eff3c232b48ec1706",
        "md5": "a8d3861f0b60e3581217b8de90f1a4b3",
        "sha256": "141fdf19af3108f72a552dae3af2655ea48b3485b1eccb7b3b1a9a55f19ec854"
      },
      "downloads": -1,
      "filename": "pi_usb_gadget_controller-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a8d3861f0b60e3581217b8de90f1a4b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14080,
      "upload_time": "2022-04-13T11:36:50",
      "upload_time_iso_8601": "2022-04-13T11:36:50.769534Z",
      "url": "https://files.pythonhosted.org/packages/d4/27/dd73bddc952f76c32376ff843f07e418a7c833e8be7eff3c232b48ec1706/pi_usb_gadget_controller-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}