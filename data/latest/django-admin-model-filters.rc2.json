{
  "info": {
    "author": "Darren Maki",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# django-admin-model-filters\n\nA Django extension that allows filtering models in the changelist view of\nthe admin interface using the model's individual fields.\n\n![Django Admin Model Filter Demo](demo.gif)\n\n## Features\n\n1. Filter models by specific fields and types, instead of a generic search that\n   converts everything to `UPPER` strings. This allows the native data types\n   to be used, and any indexes you have to be taken advantage of.\n1. Supports object level permissions with `django-guardian`. Model filters can\n   be shared with users and/or groups through the admin interface. If \n   `django-guardian` is not setup, regular Django class level permissions are\n   used, unless the `MODEL_FILTERS_*_OWNER_ONLY` settings are `True`.\n1. Supports `grappelli` admin skin.\n\n## Installation\n\nInstall the extension into your environment:\n\n```shell\npip install django-admin-model-filters\n```\n\nAdd the extension to the list of `INSTALLED_APPS`:\n\n```python\nINSTALLED_APPS = [\n    ...\n    \"model_filters\",\n    ...\n]\n```\n\nRun the migrations for the extension:\n\n```shell\n./manage.py migrate model_filters\n```\n\n## Usage\n\nAdd the `ModelFilterMixin` to any existing `ModelAdmin` classes in\nyour project that you wish to filter.\n\nDefine a list or tuple of fields, `model_filters`, that you want to filter the\nmodel using. The values should be of one of the following types:\n\n1. A field name. Field names can also span relations using the `__` lookup. By\n   default, the field's `verbose_name` is used for display purposes.\n1. A tuple, where the first element is a field name, and the second element is\n   a custom verbose name to display for the field.\n\nFor example:\n\n```python\nfrom django.contrib import admin\nfrom model_filters.admin.mixins import ModelFilterMixin\n\n@admin.register(Widget)\nclass WidgetModelAdmin(ModelFilterMixin, admin.ModelAdmin):\n    ...\n    model_filters = [\n        (\"name\", \"Widget Name\"),\n        \"part_number\",\n        (\"component__name\", \"Component Name\"),\n        \"serial_number\",\n    ]\n    ...\n```\n\n## Permissions\n\nUses Django's built-in permission framework, and supports `django-guardian` for\nobject-level permissions.\n\nBy default, model filters can only be used by the user that created them (their\n`owner`). Use the `MODEL_FILTERS_*_OWNER_ONLY` settings to allow sharing them\nwith other users and groups.\n\nNote that you can of course override any of the `has_*_permission` methods\nby creating your own `ModelAdmin` that extends and replaces the existing\n`ModelFilterAdmin`.\n\n## Settings\n\nThe following settings can be configured in your `settings.py`:\n\n### `MODEL_FILTERS_VIEW_OWNER_ONLY`\nDefault: `True`\n\nIf `True`, only the `owner` of a model filter can view it, regardless of any\npermissions that have been set. If `False`, any user or group with the `view`\npermission can view the model filter. Superusers have full access.\n\n### `MODEL_FILTERS_CHANGE_OWNER_ONLY` \nDefault: `True`\n\nIf `True`, only the `owner` of a model filter can change it, regardless of any\npermissions that have been set. If `False`, any user or group with the `change`\npermission can change the model filter. Superusers have full access.\n\n### `MODEL_FILTERS_DELETE_OWNER_ONLY`\nDefault: `True`\n\nIf `True`, only the `owner` of a model filter can delete it, regardless of any\npermissions that have been set. If `False`, any user or group with the `delete`\npermission can delete the model filter. Superusers have full access.\n\n### `MODEL_FILTERS_ORDER_BY`\nDefault: `[Lower(\"name\").asc(nulls_first=True), \"-created\"]`\n\nA field, or list of fields, to order the model filters by in the model admin\nlist filter menu. The contents of this setting will be passed directly to the\n`order_by` method of the queryset.\n\n### `MODEL_FILTERS_USE_GUARDIAN`\nDefault: `True`\n\nIf `True`, and `guardian` is found in your `INSTALLED_APPS`, then object level\npermissions will be used via Django Guardian. Note that object level permissions\nare only available if `MODEL_FILTERS_*_OWNER_ONLY` are `False`. \n\n## Developers\n\nCreate a Python 3.7 virtualenv and install the developer requirements into it:\n\n```shell\npip install -r requirements/developer.txt\n```\n\nThis is a `tox` based project. Run `tox` to ensure you are in a good state.\nYou may want to edit `tox.ini` to exclude specific Python or Django versions\nthat your environment does not support, or just to simplify the build during\ndevelopment.\n\nCreate your local developer settings:\n\n```shell\ncp acme/settings/developer.py acme/settings/local_settings.py\n```\n\nUse this settings file to override any settings during development. This file\nis ignored by git and the packager.\n\n### Development and Testing Project\n\nThe core extension is in the `model_filters` package. \n\nThe `acme` package is a project used for development and testing purposes.\nUse the `./manage.py` file at the project root like you would any other Django\nproject, including `./manage.py runserver` to explore the `acme` test project.\n\nSome sample data is provided in `acme/fixtures/data.json`. Load it into your\ndatabase with `./manage.py loaddata acme/fixtures/data.json`.\n\n### Code Style\n\nThis project uses `black` and `isort` to maintain consistency and uniformity.\n\nRun `tox -e codestyle` to check your code style. Run `black .` and `isort .`\nto format the entire project, or configure your IDE to run them after saving.\n\n### Code Analysis\n\nThis project uses `flake8` and `pylint` to find bugs and maintain quality.\n\nRun `tox -e flake8` and `tox -e pylint` to analyse your code style.\n\n### Testing\n\nThis project uses `pytest` and `coverage`.\n\nLook at `pytest.ini` to see the available pytest markers and overall pytest\nconfiguration.\n\nCheck your coverage after running tests here: `build/reports/htmlcov/index.html`\n\n#### Basics\n\nRun all tests with Python 3.7 and Django 3.2:\n\n```shell\ntox -e py37-django32\n```\n\nRun all end-to-end tests:\n\n```shell\ntox -e py37-django32 -- -m e2e\n```\n\nRun everything except the end-to-end tests:\n\n```shell\ntox -e py37-django32 -- -m \"not e2e\"\n```\n\nRun all tests in a specific test class:\n\n```shell\ntox -e py37-django32 -- acme/tests/e2e/modelfilter_create_tests.py::Tests\n```\n\nRun a specific test in a test class:\n\n```shell\ntox -e py37-django32 -- model_filters/utilities_tests.py::Tests::test_user_has_permission\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/barqshasbite/django-admin-model-filters",
    "keywords": "django admin model field filter filters filtering",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-admin-model-filters",
    "package_url": "https://pypi.org/project/django-admin-model-filters/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-admin-model-filters/",
    "project_urls": {
      "Homepage": "https://github.com/barqshasbite/django-admin-model-filters"
    },
    "release_url": "https://pypi.org/project/django-admin-model-filters/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django extension for filtering models by field value in the admin interface.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13349830,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12fb736aaa47a373ee5e47be3fc0bbd188deb36078ec7727fa2dec15bb2e6847",
          "md5": "82e7e2b1b19eed9aca00518255c8b388",
          "sha256": "85417ecb44f2f50771c8ec84c250471d7f2ff99d78bd79a1bd1540c6ebbd805a"
        },
        "downloads": -1,
        "filename": "django_admin_model_filters-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82e7e2b1b19eed9aca00518255c8b388",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31512,
        "upload_time": "2022-03-22T15:33:07",
        "upload_time_iso_8601": "2022-03-22T15:33:07.999339Z",
        "url": "https://files.pythonhosted.org/packages/12/fb/736aaa47a373ee5e47be3fc0bbd188deb36078ec7727fa2dec15bb2e6847/django_admin_model_filters-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4dd020619a5e8dd0cec202a25f5aa098592afeaf14af858c8823d93a46e80de",
          "md5": "379c794dcc29164b91e64ea0763de211",
          "sha256": "147769f30ac2b25d512a03f2221bd056e9ca98e0fd4779de46857356920de4fc"
        },
        "downloads": -1,
        "filename": "django_admin_model_filters-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "379c794dcc29164b91e64ea0763de211",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31602,
        "upload_time": "2022-03-30T18:30:16",
        "upload_time_iso_8601": "2022-03-30T18:30:16.198312Z",
        "url": "https://files.pythonhosted.org/packages/a4/dd/020619a5e8dd0cec202a25f5aa098592afeaf14af858c8823d93a46e80de/django_admin_model_filters-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4dd020619a5e8dd0cec202a25f5aa098592afeaf14af858c8823d93a46e80de",
        "md5": "379c794dcc29164b91e64ea0763de211",
        "sha256": "147769f30ac2b25d512a03f2221bd056e9ca98e0fd4779de46857356920de4fc"
      },
      "downloads": -1,
      "filename": "django_admin_model_filters-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "379c794dcc29164b91e64ea0763de211",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 31602,
      "upload_time": "2022-03-30T18:30:16",
      "upload_time_iso_8601": "2022-03-30T18:30:16.198312Z",
      "url": "https://files.pythonhosted.org/packages/a4/dd/020619a5e8dd0cec202a25f5aa098592afeaf14af858c8823d93a46e80de/django_admin_model_filters-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}