{
  "info": {
    "author": "Nordic Semiconductor ASA",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "zcbor\n=====\n\nzcbor is a low footprint [CBOR](https://en.wikipedia.org/wiki/CBOR) library in the C language that comes with a schema-driven script tool that can validate your data, or even generate code for you.\nAside from the script, the CBOR library is a standalone library which is tailored for use in microcontrollers.\n\nThe validation/conversion part of the script works with YAML and JSON data, in addition to CBOR.\nIt can for example validate a YAML file against a schema and convert it into CBOR.\n\nThe schema language used by zcbor is CDDL (Consise Data Definition Language) which is a powerful human-readable data description language defined in [IETF RFC 8610](https://datatracker.ietf.org/doc/rfc8610/).\n\nzcbor was previously called \"cddl-gen\".\n\n\nFeatures\n========\n\nHere are some possible ways zcbor can be used:\n\n - Python script and module:\n   - Validate a YAML/JSON file and translate it into CBOR e.g. for transmission.\n   - Validate a YAML/JSON/CBOR file before processing it with some other tool\n   - Decode and validate incoming CBOR data into human-readable YAML/JSON.\n   - As part of a python script that processes YAML/JSON/CBOR files. zcbor is compatible with PyYAML and can additionally provide validation and/or easier inspection via named tuples.\n - C code:\n   - Generate C code for validating and decoding or encoding CBOR, for use in optimized or constrained environments, such as microcontrollers.\n   - Provide a low-footprint CBOR decoding/encoding library similar to TinyCBOR/QCBOR/NanoCBOR.\n\n\nCBOR decoding/encoding library\n==============================\n\nThe CBOR library found at [headers](https://github.com/NordicSemiconductor/zcbor/tree/0.6.0/include) and [source](https://github.com/NordicSemiconductor/zcbor/tree/0.6.0/src) is used by the generated code, but can also be used directly.\nTo use it, instantiate a `zcbor_state_t` object, which is most easily done using the `zcbor_new_*_state()` functions or the `ZCBOR_STATE_*()` macros.\n\nThe `elem_count` member refers to the number of encoded objects in the current list or map.\n`elem_count` starts again when entering a nested list or map, and is restored when exiting.\n\n`elem_count` is one reason for needing \"backup\" states (the other is to allow rollback of the payload).\nYou need a number of backups corresponding to the maximum number of nested levels in your data.\n\nBackups are needed for encoding if you are using canonical encoding (`ZCBOR_CANONICAL`), or using the `bstrx_cbor_*` functions.\nBackups are needed for decoding if there are any lists, maps, or CBOR-encoded strings in the data.\n\nNote that the benefits of using the library directly is greater for encoding than for decoding.\nFor decoding, the code generation will provide a number of checks that are tedious to write manually, and easy to forget.\n\n```c\n/** The number of states must be at least equal to one more than the maximum\n *  nested depth of the data.\n */\nzcbor_state_t states[n];\n\n/** Initialize the states. After calling this, states[0] is ready to be used\n *  with the encoding/decoding APIs.\n *  elem_count must be the maximum expected number of top-level elements when\n *  decoding (1 if the data is wrapped in a list).\n *  When encoding, elem_count must be 0.\n */\nzcbor_new_state(states, n, payload, payload_len, elem_count);\n\n/** Alternatively, use one of the following convenience macros. */\nZCBOR_STATE_D(decode_state, n, payload, payload_len, elem_count);\nZCBOR_STATE_E(encode_state, n, payload, payload_len, 0);\n```\n\nThe CBOR libraries assume little-endianness by default, but you can define ZCBOR_BIG_ENDIAN to change this.\n\nConfiguration\n-------------\n\nThe C library has a few compile-time configuration options.\nThese configuration options can be enabled by adding them as compile definitions to the build.\n\nName                      | Description\n------------------------- | -----------\n`ZCBOR_CANONICAL`         | When encoding lists and maps, do not use indefinite length encoding. Enabling `ZCBOR_CANONICAL` increases code size and makes the encoding library more often use state backups.\n`ZCBOR_VERBOSE`           | Print messages on encoding/decoding errors (`zcbor_print()`), and also a trace message (`zcbor_trace()`) for each decoded value, and in each generated function (when using code generation). Requires `printk` as found in Zephyr.\n`ZCBOR_ASSERTS`           | Enable asserts (`zcbor_assert()`). When they fail, the assert statements instruct the current function to return a `ZCBOR_ERR_ASSERTION` error. If `ZCBOR_VERBOSE` is enabled, a message is printed.\n`ZCBOR_STOP_ON_ERROR`     | Enable the `stop_on_error` functionality. This makes all functions abort their execution if called when an error has already happened.\n`ZCBOR_BIG_ENDIAN`        | All decoded values are returned as big-endian.\n\n\nPython script and module\n========================\n\nInvoking zcbor.py from the command line\n---------------------------------------\n\nThe zcbor.py script can directly read CBOR, YAML, or JSON data and validate it against a CDDL description.\nIt can also freely convert the data between CBOR/YAML/JSON.\nIt can also output the data to a C file formatted as a byte array.\n\nFollowing are some generalized examples for validating, and for converting (which also validates) data from the command line.\nThe script infers the data format from the file extension, but the format can also be specified explicitly.\nSee `zcbor validate --help` and `zcbor convert --help` for more information.\n\n```sh\npython3 <zcbor base>/zcbor/zcbor.py validate -c <CDDL description file> -t <which CDDL type to expect> -i <input data file>\npython3 <zcbor base>/zcbor/zcbor.py convert -c <CDDL description file> -t <which CDDL type to expect> -i <input data file> -o <output data file>\n```\n\nOr invoke its command line executable (if installed via `pip`):\n\n```sh\nzcbor validate -c <CDDL description file> -t <which CDDL type to expect> -i <input data file>\nzcbor convert -c <CDDL description file> -t <which CDDL type to expect> -i <input data file> -o <output data file>\n```\n\nNote that since CBOR supports more data types than YAML and JSON, zcbor uses an idiomatic format when converting to/from YAML/JSON.\nThis is relevant when handling YAML/JSON conversions of data that uses the unsupported features.\nThe following data types are supported by CBOR, but not by YAML (and JSON which is a subset of YAML):\n\n 1. bytestrings: YAML supports only text strings. In YAML, bytestrings ('<bytestring>') are represented as {\"bstr\": \"<hex-formatted bytestring>\"}, or as {\"bstr\": <any type>} if the CBOR bytestring contains CBOR-formatted data, in which the data is decoded into <any type>.\n 2. map keys other than text string: In YAML, such key value pairs are represented as {\"keyval<unique int>\": {\"key\": <key, not text>, \"val\": <value>}}\n 3. tags: In cbor2, tags are represented by a special type, cbor2.CBORTag. In YAML, these are represented as {\"tag\": <tag number>, \"val\": <tagged data>}.\n\nImporting zcbor in a Python script\n----------------------------------\n\nImporting zcbor gives access to the DataTranslator class which is used to implement the command line conversion features.\nDataTranslator can be used to programmatically perform the translations, or to manipulate the data.\nWhen accessing the data, you can choose between two internal formats:\n\n 1. The format provided by the cbor2, yaml (pyyaml), and json packages.\n    This is a format where the serialization types (map, list, string, number etc.) are mapped directly to the corresponding Python types.\n    This format is common between these packages, which makes translation very simple.\n    When returning this format, DataTranslator hides the idiomatic representations for bytestrings, tags, and non-text keys described above.\n 2. A custom format which allows accessing the data via the names from the CDDL description file.\n    This format is implemented using named tuples, and is immutable, meaning that it can be used for inspecting data, but not for changing or creating data.\n\n\nCode generation\n===============\n\nThe generated code consists of:\n - A header file containing typedefs for the types defined in the CDDL, as well as declarations for decoding functions for some types (those specified as entry types). The typedefs are the same for both encoding and decoding.\n - A C file containing all the encoding/decoding code.\n   The code is split across multiple functions, and each function contains a single `if` statement which \"and\"s and \"or\"s together calls into the cbor libraries or to other generated decoding functions.\n\nCDDL allows placing restrictions on the members of your data structure.\nRestrictions can be on type, on content (e.g. values/sizes of ints or strings), and repetition (e.g. the number of members in a list).\nThe generated code will validate the input (i.e. the structure if encoding, or the payload for decoding), which means that it will check all the restriction set in the CDDL description, and fail if a restriction is broken.\n\nThe cbor libraries do most of the actual translation and moving of bytes, and the validation of values.\n\nThere are tests for the code generation in [tests/](https://github.com/NordicSemiconductor/zcbor/tree/0.6.0/tests/).\nThe tests require [Zephyr](https://github.com/zephyrproject-rtos/zephyr) (if your shell is set up to build Zephyr samples, the tests should also build).\n\nBuild system\n------------\n\nWhen calling zcbor with the argument `--output-cmake <file path>`, a cmake file will be created at that location.\nThe cmake file creates a cmake target and adds the generated and non-generated source files, and the include directories to the header files.\nThis cmake file can then be included in your project's `CMakeLists.txt` file, and the target can be linked into your project.\nThis is demonstrated in the tests, e.g. at tests/decode/test3_simple/CMakeLists.txt.\nzcbor can be instructed to copy the non-generated sources to the same location as the generated sources with `--copy-sources`.\n\n\nIntroduction to CDDL\n====================\n\nIn CDDL you define types from other types.\nTypes can be defined from base types, or from other types you define.\nTypes are declared with '`=`', e.g. `Foo = int` which declares the type `Foo` to be an integer, analogous to `typedef int Foo;` in C.\nCDDL defines the following base types (this is not an exhaustive list):\n\n - `int`: Positive or negative integer\n - `uint`: Positive integer\n - `bstr`: Byte string\n - `tstr`: Text string\n - `bool`: Boolean\n - `nil`: Nil/Null value\n - `float`: Floating point value\n - `any`: Any single element\n\nCDDL allows creating aggregate types:\n\n - `[]`: List. Elements don't need to have the same type.\n - `{}`: Map. Key/value pairs as are declared as `<key> => <value>` or `<key>: <value>`. Note that `:` is also used for labels.\n - `()`: Groups. Grouping with no enclosing type, which means that e.g. `Foo = [(int, bstr)]` is equivalent to `Foo = [int, bstr]`.\n - `/`: Unions. Analogous to unions in C. E.g. `Foo = int/bstr/Bar` where Foo is either an int, a bstr, or Bar (some custom type).\n\nLiterals can be used instead of the base type names:\n\n - Number: `Foo = 3`, where Foo is a uint with the additional requirement that it must have the value 3.\n - Number range: `Foo = -100..100`, where Foo is an int with value between -100 and 100.\n - Text string: `Foo = \"hello\"`, where Foo is a tstr with the requirement that it must be \"hello\".\n - True/False: `Foo = false`, where Foo is a bool which is always false.\n\nBase types can also be restricted in other ways:\n\n - `.size`: Works for integers and strings. E.g. `Foo = uint .size 4` where Foo is a uint exactly 4 bytes long.\n - `.cbor`/`.cborseq`: E.g. `Foo = bstr .cbor Bar` where Foo is a bstr whose contents must be CBOR data decodeable as the Bar type.\n\nAn element can be repeated:\n\n - `?`: 0 or 1 time. E.g. `Foo = [int, ?bstr]`, where Foo is a list with an int possibly followed by a bstr.\n - `*`: 0 or more times. E.g. `Foo = [*tstr]`, where Foo is a list containing 0 or more tstrs.\n - `+`: 1 or more times. E.g. `Foo = [+Bar]`.\n - `x*y`: Between x and y times, inclusive. E.g. `Foo = {4*8(int => bstr)}` where Foo is a map with 4 to 8 key/value pairs where each key is an int and each value is a bstr.\n\nNote that in the zcbor script and its generated code, the number of entries supported via `*` and `+` is affected by the default_max_qty value.\n\nAny element can be labeled with `:`.\nThe label is only for readability and does not impact the data structure in any way.\nE.g. `Foo = [name: tstr, age: uint]` is equivalent to `Foo = [tstr, uint]`.\n\nSee [test3_simple](https://github.com/NordicSemiconductor/zcbor/tree/0.6.0/tests/decode/test3_simple/) for CDDL example code.\n\n\nIntroduction to CBOR\n====================\n\nCBOR's format is described well on [Wikipedia](https://en.wikipedia.org/wiki/CBOR), but here's a synopsis:\n\nEncoded CBOR data elements look like this.\n\n```\n| Header                       | Value                  | Payload                   |\n| 1 byte                       | 0, 1, 2, 4, or 8 bytes | 0 - 2^64-1 bytes/elements |\n| 3 bits     | 5 bits          |\n| Major Type | Additional Info |\n```\n\nThe available major types can be seen in `zcbor_major_type_t`.\n\nFor all major types, Values 0-23 are encoded directly in the _Additional info_, meaning that the _Value_ field is 0 bytes long.\nIf _Additional info_ is 24, 25, 26, or 27, the _Value_ field is 1, 2, 4, or 8 bytes long, respectively.\n\nMajor types `pint`, `nint`, `tag`, and `prim` elements have no payload, only _Value_.\n\n * `pint`: Interpret the _Value_ as a positive integer.\n * `nint`: Interpret the _Value_ as a positive integer, then multiply by -1 and subtract 1.\n * `tag`: The _Value_ says something about the next non-tag element.\n   See the [CBOR tag documentation](See https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml) for details.\n * `prim`: Different _Additional info_ mean different things:\n    * 20: `false`\n    * 21: `true`\n    * 22: `null`\n    * 23: `undefined`\n    * 25: Interpret the _Value_ as an IEEE 754 float16.\n    * 26: Interpret the _Value_ as an IEEE 754 float32.\n    * 27: Interpret the _Value_ as an IEEE 754 float64.\n    * 31: End of an indefinite-length `list` or `map`.\n\nFor `bstr`, `tstr`, `list`, and `map`, the _Value_ describes the length of the _Payload_.\nFor `bstr` and `tstr`, the length is in bytes, for `list`, the length is in number of elements, and for `map`, the length is in number of key/value element pairs.\n\nFor `list` and `map`, sub elements are regular CBOR elements with their own _Header_, _Value_ and _Payload_. `list`s and `map`s can be recursively encoded.\nIf a `list` or `map` has _Additional info_ 31, it is \"indefinite-length\", which means it has an \"unknown\" number of elements.\nInstead, its end is marked by a `prim` with _Additional info_ 31 (byte value 0xFF).\n\nUsage Example\n=============\n\nCode generation\n---------------\n\nThis example is is taken from [test3_simple](https://github.com/NordicSemiconductor/zcbor/tree/0.6.0/tests/decode/test3_simple/).\n\nIf your CDDL file contains the following code:\n\n```cddl\nTimestamp = bstr .size 8\n\n; Comments are denoted with a semicolon\nPet = [\n    name: [ +tstr ],\n    birthday: Timestamp,\n    species: (cat: 1) / (dog: 2) / (other: 3),\n]\n```\nCall the Python script:\n\n```sh\npython3 <zcbor base>/zcbor/zcbor.py code -c pet.cddl -d -t Pet --oc pet_decode.c --oh pet_decode.h\n# or\nzcbor code -c pet.cddl -d -t Pet --oc pet_decode.c --oh pet_decode.h\n```\n\nAnd use the generated code with\n\n```c\n#include <pet_decode.h> /* The name of the header file is taken from the name of\n                           the cddl file, but can also be specifiec when calling\n                           the script. */\n\n/* ... */\n\n/* The following type and function refer to the Pet type in the CDDL, which\n * has been specified as an --entry-types (-t) when invoking zcbor. */\nPet_t pet;\nsize_t decode_len;\nbool success = cbor_decode_Pet(input, sizeof(input), &pet, &decode_len);\n```\n\nThe process is the same for encoding, except:\n - Change `-d` to `-e` when invoking zcbor\n - Input parameters become output parameters and vice versa in the code:\n\n```c\n#include <pet_encode.h> /* The name of the header file is taken from the name of\n                           the cddl file, but can also be specifiec when calling\n                           the script. */\n\n/* ... */\n\n/* The following type and function refer to the Pet type in the CDDL, which\n * has been specified as an --entry-types (-t) when invoking zcbor. */\nPet_t pet = { /* Initialize with desired data. */ };\nuint8_t output[100]; /* 100 is an example. Must be large enough for data to fit. */\nsize_t out_len;\nbool success = cbor_encode_Pet(output, sizeof(output), &pet, &out_len);\n```\n\nCBOR decoding/encoding library\n------------------------------\n\nFor encoding:\n\n```c\n#include <zcbor_encode.h>\n\nuint8_t payload[100];\nzcbor_state_t state;\nzcbor_new_state(&state, 1, payload, sizeof(payload), 0);\n\nres = res && zcbor_list_start_encode(&state, 0);\nres = res && zcbor_tstr_put(&state, \"first\");\nres = res && zcbor_tstr_put(&state, \"second\");\nres = res && zcbor_list_end_encode(&state, 0);\nuint8_t timestamp[8] = {1, 2, 3, 4, 5, 6, 7, 8};\nstruct zcbor_string timestamp_str = {\n  .value = timestamp,\n  .len = sizeof(timestamp),\n};\nres = res && zcbor_bstr_encode(&state, &timestamp_str);\nres = res && zcbor_uint32_put(&state, 2 /* dog */);\nres = res && zcbor_list_end_encode(&state, 0);\n\n```\n\nConverting\n----------\n\nHere is an example call for converting from YAML to CBOR:\n\n```sh\npython3 <zcbor base>/zcbor/zcbor.py convert -c pet.cddl -t Pet -i mypet.yaml -o mypet.cbor\n# or\nzcbor convert -c pet.cddl -t Pet -i mypet.yaml -o mypet.cbor\n```\n\nWhich takes a yaml structure from mypet.yaml, validates it against the Pet type in the CDDL description in pet.cddl, and writes binary CBOR data to mypet.cbor.\n\nSee the tests in  <zcbor base>/tests/ for examples of using the python module\n\nRunning tests\n=============\n\nThe tests for the generated code are based on Zephyr ztests.\nTests for the conversion functions in the script are implemented with the unittest module.\n\nThere are also test.sh scripts to quickly run all tests.\n[`tests/test.sh`](https://github.com/NordicSemiconductor/zcbor/blob/0.6.0/tests/test.sh) runs all tests, including python tests in [`tests/scripts`](https://github.com/NordicSemiconductor/zcbor/tree/0.6.0/tests/scripts).\n\nThese tests are dependent upon the `pycodestyle` package from `pip`.\nRun these scripts with no arguments.\n\nTo set up the environment to run the ztest tests, follow [Zephyr's Getting Started Guide](https://docs.zephyrproject.org/latest/getting_started/index.html), or see the workflow in the [`.github`](https://github.com/NordicSemiconductor/zcbor/tree/0.6.0/.github) directory.\n\n\nCommand line documentation\n==========================\n\nAdded via `add_helptext.py`\n\nzcbor --help\n------------\n\n```\nusage: zcbor [-h] {code,validate,convert} ...\n\nParse a CDDL file and validate/convert between YAML, JSON, and CBOR. Can also\ngenerate C code for validation/encoding/decoding of CBOR.\n\npositional arguments:\n  {code,validate,convert}\n\noptions:\n  -h, --help            show this help message and exit\n\n```\n\nzcbor code --help\n-----------------\n\n```\nusage: zcbor code [-h] [--version] -c CDDL [--no-prelude] [-v]\n                  [--default-max-qty DEFAULT_MAX_QTY] [--output-c OUTPUT_C]\n                  [--output-h OUTPUT_H] [--output-h-types OUTPUT_H_TYPES]\n                  [--copy-sources] [--output-cmake OUTPUT_CMAKE] -t\n                  ENTRY_TYPES [ENTRY_TYPES ...] [-d] [-e] [--time-header]\n                  [--git-sha-header] [-b {32,64}]\n                  [--include-prefix INCLUDE_PREFIX] [-s]\n\nParse a CDDL file and produce C code that validates and xcodes CBOR.\nThe output from this script is a C file and a header file. The header file\ncontains typedefs for all the types specified in the cddl input file, as well\nas declarations to xcode functions for the types designated as entry types when\nrunning the script. The c file contains all the code for decoding and validating\nthe types in the CDDL input file. All types are validated as they are xcoded.\n\nWhere a `bstr .cbor <Type>` is specified in the CDDL, AND the Type is an entry\ntype, the xcoder will not xcode the string, only provide a pointer into the\npayload buffer. This is useful to reduce the size of typedefs, or to break up\ndecoding. Using this mechanism is necessary when the CDDL contains self-\nreferencing types, since the C type cannot be self referencing.\n\nThis script requires 'regex' for lookaround functionality not present in 're'.\n\noptions:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -c CDDL, --cddl CDDL  Path to one or more input CDDL file(s). Passing\n                        multiple files is equivalent to concatenating them.\n  --no-prelude          Exclude the standard CDDL prelude from the build. The\n                        prelude can be viewed at zcbor/cddl/prelude.cddl in\n                        the repo, or together with the script.\n  -v, --verbose         Print more information while parsing CDDL and\n                        generating code.\n  --default-max-qty DEFAULT_MAX_QTY, --dq DEFAULT_MAX_QTY\n                        Default maximum number of repetitions when no maximum\n                        is specified. This is needed to construct complete C\n                        types. The default_max_qty can usually be set to a\n                        text symbol if desired, to allow it to be configurable\n                        when building the code. This is not always possible,\n                        as sometimes the value is needed for internal\n                        computations. If so, the script will raise an\n                        exception.\n  --output-c OUTPUT_C, --oc OUTPUT_C\n                        Path to output C file. If both --decode and --encode\n                        are specified, _decode and _encode will be appended to\n                        the filename when creating the two files. If not\n                        specified, the path and name will be based on the\n                        --output-cmake file. A 'src' directory will be created\n                        next to the cmake file, and the C file will be placed\n                        there with the same name (except the file extension)\n                        as the cmake file.\n  --output-h OUTPUT_H, --oh OUTPUT_H\n                        Path to output header file. If both --decode and\n                        --encode are specified, _decode and _encode will be\n                        appended to the filename when creating the two files.\n                        If not specified, the path and name will be based on\n                        the --output-cmake file. An 'include' directory will\n                        be created next to the cmake file, and the C file will\n                        be placed there with the same name (except the file\n                        extension) as the cmake file.\n  --output-h-types OUTPUT_H_TYPES, --oht OUTPUT_H_TYPES\n                        Path to output header file with typedefs (shared\n                        between decode and encode). If not specified, the path\n                        and name will be taken from the output header file\n                        (--output-h), with '_types' added to the file name.\n  --copy-sources        Copy the non-generated source files (zcbor_*.c/h) into\n                        the same directories as the generated files.\n  --output-cmake OUTPUT_CMAKE\n                        Path to output CMake file. The filename of the CMake\n                        file without '.cmake' is used as the name of the CMake\n                        target in the file. The CMake file defines a CMake\n                        target with the zcbor source files and the generated\n                        file as sources, and the zcbor header files' and\n                        generated header files' folders as\n                        include_directories. Add it to your project via\n                        include() in your CMakeLists.txt file, and link the\n                        target to your program. This option works with or\n                        without the --copy-sources option.\n  -t ENTRY_TYPES [ENTRY_TYPES ...], --entry-types ENTRY_TYPES [ENTRY_TYPES ...]\n                        Names of the types which should have their xcode\n                        functions exposed.\n  -d, --decode          Generate decoding code. Either --decode or --encode or\n                        both must be specified.\n  -e, --encode          Generate encoding code. Either --decode or --encode or\n                        both must be specified.\n  --time-header         Put the current time in a comment in the generated\n                        files.\n  --git-sha-header      Put the current git sha of zcbor in a comment in the\n                        generated files.\n  -b {32,64}, --default-bit-size {32,64}\n                        Default bit size of integers in code. When integers\n                        have no explicit bounds, assume they have this bit\n                        width. Should follow the bit width of the architecture\n                        the code will be running on.\n  --include-prefix INCLUDE_PREFIX\n                        When #include'ing generated files, add this path\n                        prefix to the filename.\n  -s, --short-names     Attempt to make most generated struct member names\n                        shorter. This might make some names identical which\n                        will cause a compile error. If so, tweak the CDDL\n                        labels or layout, or disable this option. This might\n                        also make enum names different from the corresponding\n                        union members.\n\n```\n\nzcbor validate --help\n---------------------\n\n```\nusage: zcbor validate [-h] [--version] -c CDDL [--no-prelude] [-v]\n                      [--default-max-qty DEFAULT_MAX_QTY] -i INPUT\n                      [--input-as {yaml,json,cbor,cborhex}] -t ENTRY_TYPE\n\nRead CBOR, YAML, or JSON data from file or stdin and validate it against a\nCDDL schema file.\n\noptions:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -c CDDL, --cddl CDDL  Path to one or more input CDDL file(s). Passing\n                        multiple files is equivalent to concatenating them.\n  --no-prelude          Exclude the standard CDDL prelude from the build. The\n                        prelude can be viewed at zcbor/cddl/prelude.cddl in\n                        the repo, or together with the script.\n  -v, --verbose         Print more information while parsing CDDL and\n                        generating code.\n  --default-max-qty DEFAULT_MAX_QTY, --dq DEFAULT_MAX_QTY\n                        Default maximum number of repetitions when no maximum\n                        is specified. It is only relevant when handling data\n                        that will be decoded by generated code. If omitted, a\n                        large number will be used.\n  -i INPUT, --input INPUT\n                        Input data file. The option --input-as specifies how\n                        to interpret the contents. Use \"-\" to indicate stdin.\n  --input-as {yaml,json,cbor,cborhex}\n                        Which format to interpret the input file as. If\n                        omitted, the format is inferred from the file name.\n                        .yaml, .yml => YAML, .json => JSON, .cborhex => CBOR\n                        as hex string, everything else => CBOR\n  -t ENTRY_TYPE, --entry-type ENTRY_TYPE\n                        Name of the type (from the CDDL) to interpret the data\n                        as.\n\n```\n\nzcbor convert --help\n--------------------\n\n```\nusage: zcbor convert [-h] [--version] -c CDDL [--no-prelude] [-v]\n                     [--default-max-qty DEFAULT_MAX_QTY] -i INPUT\n                     [--input-as {yaml,json,cbor,cborhex}] -t ENTRY_TYPE -o\n                     OUTPUT [--output-as {yaml,json,cbor,cborhex,c_code}]\n                     [--c-code-var-name C_CODE_VAR_NAME]\n\nParse a CDDL file and validate/convert between CBOR and YAML/JSON. The script\ndecodes the CBOR/YAML/JSON data from a file or stdin and verifies that it\nconforms to the CDDL description. The script fails if the data does not\nconform. 'zcbor validate' can be used if only validate is needed. JSON and\nYAML do not support all data types that CBOR/CDDL supports. bytestrings\n(BSTR), tags, and maps with non-text keys need special handling: All strings\nin JSON/YAML are text strings. If a BSTR is needed, use a dict with a single\nentry, with \"bstr\" as the key, and the byte string (as a hex string) as the\nvalue, e.g. {\"bstr\": \"0123456789abcdef\"}. The value can also be another type,\ne.g. which will be interpreted as a BSTR with the given value as contents (in\ncddl: 'bstr .cbor SomeType'). E.g. {\"bstr\": [\"first element\", 2, [3]]} Dicts\nin JSON/YAML only support text strings for keys, so if a dict needs other\ntypes of keys, encapsulate the key and value into a dict (n is an arbitrary\ninteger): e.g. {\"name\": \"foo\", \"keyvaln\": {\"key\": 123, \"val\": \"bar\"}} which\nwill conform to the CDDL {tstr => tstr, int => tstr}. Tags are specified by a\ndict with two elements, e.g. {\"tag\": 1234, \"value\": [\"tagged string within\nlist\"]} 'undefined' is specified as a list with a single text entry:\n\"zcbor_undefined\".\n\noptions:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -c CDDL, --cddl CDDL  Path to one or more input CDDL file(s). Passing\n                        multiple files is equivalent to concatenating them.\n  --no-prelude          Exclude the standard CDDL prelude from the build. The\n                        prelude can be viewed at zcbor/cddl/prelude.cddl in\n                        the repo, or together with the script.\n  -v, --verbose         Print more information while parsing CDDL and\n                        generating code.\n  --default-max-qty DEFAULT_MAX_QTY, --dq DEFAULT_MAX_QTY\n                        Default maximum number of repetitions when no maximum\n                        is specified. It is only relevant when handling data\n                        that will be decoded by generated code. If omitted, a\n                        large number will be used.\n  -i INPUT, --input INPUT\n                        Input data file. The option --input-as specifies how\n                        to interpret the contents. Use \"-\" to indicate stdin.\n  --input-as {yaml,json,cbor,cborhex}\n                        Which format to interpret the input file as. If\n                        omitted, the format is inferred from the file name.\n                        .yaml, .yml => YAML, .json => JSON, .cborhex => CBOR\n                        as hex string, everything else => CBOR\n  -t ENTRY_TYPE, --entry-type ENTRY_TYPE\n                        Name of the type (from the CDDL) to interpret the data\n                        as.\n  -o OUTPUT, --output OUTPUT\n                        Output data file. The option --output-as specifies how\n                        to interpret the contents. Use \"-\" to indicate stdout.\n  --output-as {yaml,json,cbor,cborhex,c_code}\n                        Which format to interpret the output file as. If\n                        omitted, the format is inferred from the file name.\n                        .yaml, .yml => YAML, .json => JSON, .c, .h => C code,\n                        .cborhex => CBOR as hex string, everything else =>\n                        CBOR\n  --c-code-var-name C_CODE_VAR_NAME\n                        Only relevant together with '--output-as c_code' or .c\n                        files.\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NordicSemiconductor/zcbor",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zcbor",
    "package_url": "https://pypi.org/project/zcbor/",
    "platform": null,
    "project_url": "https://pypi.org/project/zcbor/",
    "project_urls": {
      "Homepage": "https://github.com/NordicSemiconductor/zcbor"
    },
    "release_url": "https://pypi.org/project/zcbor/0.6.0/",
    "requires_dist": [
      "cbor2 (>=5.4.2.post1)",
      "pyyaml (>=5.4.1)",
      "regex (>=2022.3.15)"
    ],
    "requires_python": ">=3.7",
    "summary": "zcbor",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15386195,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce33dd874ee7dc3fe86ae53784c17d84923729f7d34296405532100f00df2734",
          "md5": "558715cd337051c5a572ad9a65b65a90",
          "sha256": "3dd64c0a35a522795e7b8fd6082676d8457fcc36d28a8fa902be99dd18bae99e"
        },
        "downloads": -1,
        "filename": "zcbor-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "558715cd337051c5a572ad9a65b65a90",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 65896,
        "upload_time": "2022-03-31T08:19:27",
        "upload_time_iso_8601": "2022-03-31T08:19:27.623072Z",
        "url": "https://files.pythonhosted.org/packages/ce/33/dd874ee7dc3fe86ae53784c17d84923729f7d34296405532100f00df2734/zcbor-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "724bf736465ec388bad7fba19f99e71ad4f101a21b8fda7a4d72129fb89af920",
          "md5": "be5f5438a0534c90b55e832e20b9d564",
          "sha256": "6256f38d66c218887afe53bc112ce05523c076dd8fc04b9144c535b967521cb4"
        },
        "downloads": -1,
        "filename": "zcbor-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "be5f5438a0534c90b55e832e20b9d564",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 69493,
        "upload_time": "2022-03-31T08:19:29",
        "upload_time_iso_8601": "2022-03-31T08:19:29.220883Z",
        "url": "https://files.pythonhosted.org/packages/72/4b/f736465ec388bad7fba19f99e71ad4f101a21b8fda7a4d72129fb89af920/zcbor-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e3aa636cbef16ac9ef5fbf680010e05480147d2bb075ed54719a4002820e086",
          "md5": "2e5cb5bd1936769049d1b1deeacbf038",
          "sha256": "ab857d98ae6d3ca9af12067cad6cc798b89169dfb608d1c47313da5ad2bc17df"
        },
        "downloads": -1,
        "filename": "zcbor-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e5cb5bd1936769049d1b1deeacbf038",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 67290,
        "upload_time": "2022-06-13T09:29:40",
        "upload_time_iso_8601": "2022-06-13T09:29:40.865210Z",
        "url": "https://files.pythonhosted.org/packages/9e/3a/a636cbef16ac9ef5fbf680010e05480147d2bb075ed54719a4002820e086/zcbor-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a5a4617893c5cf9ee9e77b044a694f4436d72ded2520173d1f0948fa6370a70",
          "md5": "9ef54ba8673e0d3103aab12ee0273313",
          "sha256": "a5916ae6b59349cd799b205c45345eef698141d313b2a9f04d301b4ceacb20b6"
        },
        "downloads": -1,
        "filename": "zcbor-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9ef54ba8673e0d3103aab12ee0273313",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 71195,
        "upload_time": "2022-06-13T09:29:42",
        "upload_time_iso_8601": "2022-06-13T09:29:42.647904Z",
        "url": "https://files.pythonhosted.org/packages/2a/5a/4617893c5cf9ee9e77b044a694f4436d72ded2520173d1f0948fa6370a70/zcbor-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ddbda4207762c3092f98fb35f24e8085d5bb24fe19a1eb384b4dcdd5239f77f",
          "md5": "7c0dbcdbd291815b9987e41fc8c957ea",
          "sha256": "8f96a4ff3a55b87cf8d42670e595a4bcb591ee3ebd5289cb3a4b4304a040ff1b"
        },
        "downloads": -1,
        "filename": "zcbor-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c0dbcdbd291815b9987e41fc8c957ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 67360,
        "upload_time": "2022-06-21T11:47:21",
        "upload_time_iso_8601": "2022-06-21T11:47:21.924398Z",
        "url": "https://files.pythonhosted.org/packages/5d/db/da4207762c3092f98fb35f24e8085d5bb24fe19a1eb384b4dcdd5239f77f/zcbor-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea68055203d7f549e175bdcaf49fffb757d9263d731a8f377214ee35443579eb",
          "md5": "7c01d3ddd8cc504679582832098a369b",
          "sha256": "d645eeabc448e79371a8a9c62e1cccd13ca591bb750bba7dd5ddb0f2bb01e833"
        },
        "downloads": -1,
        "filename": "zcbor-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7c01d3ddd8cc504679582832098a369b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 71214,
        "upload_time": "2022-06-21T11:47:24",
        "upload_time_iso_8601": "2022-06-21T11:47:24.904724Z",
        "url": "https://files.pythonhosted.org/packages/ea/68/055203d7f549e175bdcaf49fffb757d9263d731a8f377214ee35443579eb/zcbor-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbc1b8cfb1cabdfe5257b739778b1b626a69f3b8a7fb6f296936c976d5c69594",
          "md5": "335b43ebac91c959acd778e3166d2f40",
          "sha256": "1ae30653525e68b4381b3dae8998c9b5c4b07e0ac214a95a79e1a0c1a07bbe84"
        },
        "downloads": -1,
        "filename": "zcbor-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "335b43ebac91c959acd778e3166d2f40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 67529,
        "upload_time": "2022-10-12T13:30:23",
        "upload_time_iso_8601": "2022-10-12T13:30:23.661084Z",
        "url": "https://files.pythonhosted.org/packages/cb/c1/b8cfb1cabdfe5257b739778b1b626a69f3b8a7fb6f296936c976d5c69594/zcbor-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02bf9c5bf3297e8beb9f6eabf6a27b101840fde156490f3c740c775654206e88",
          "md5": "b7bec871a7c27d055f031c1a7d1b581d",
          "sha256": "194ce4f39aeaaa526e5c417e5a45c5ee546d8ccdbd85ab6aa40208e78a8fc8ce"
        },
        "downloads": -1,
        "filename": "zcbor-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b7bec871a7c27d055f031c1a7d1b581d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 79201,
        "upload_time": "2022-10-12T13:30:25",
        "upload_time_iso_8601": "2022-10-12T13:30:25.347424Z",
        "url": "https://files.pythonhosted.org/packages/02/bf/9c5bf3297e8beb9f6eabf6a27b101840fde156490f3c740c775654206e88/zcbor-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbc1b8cfb1cabdfe5257b739778b1b626a69f3b8a7fb6f296936c976d5c69594",
        "md5": "335b43ebac91c959acd778e3166d2f40",
        "sha256": "1ae30653525e68b4381b3dae8998c9b5c4b07e0ac214a95a79e1a0c1a07bbe84"
      },
      "downloads": -1,
      "filename": "zcbor-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "335b43ebac91c959acd778e3166d2f40",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 67529,
      "upload_time": "2022-10-12T13:30:23",
      "upload_time_iso_8601": "2022-10-12T13:30:23.661084Z",
      "url": "https://files.pythonhosted.org/packages/cb/c1/b8cfb1cabdfe5257b739778b1b626a69f3b8a7fb6f296936c976d5c69594/zcbor-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02bf9c5bf3297e8beb9f6eabf6a27b101840fde156490f3c740c775654206e88",
        "md5": "b7bec871a7c27d055f031c1a7d1b581d",
        "sha256": "194ce4f39aeaaa526e5c417e5a45c5ee546d8ccdbd85ab6aa40208e78a8fc8ce"
      },
      "downloads": -1,
      "filename": "zcbor-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b7bec871a7c27d055f031c1a7d1b581d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 79201,
      "upload_time": "2022-10-12T13:30:25",
      "upload_time_iso_8601": "2022-10-12T13:30:25.347424Z",
      "url": "https://files.pythonhosted.org/packages/02/bf/9c5bf3297e8beb9f6eabf6a27b101840fde156490f3c740c775654206e88/zcbor-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}