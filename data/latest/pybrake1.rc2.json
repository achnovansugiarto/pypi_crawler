{
  "info": {
    "author": "Airbrake Technologies, Inc.",
    "author_email": "support@airbrake.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "# Python exception notifier for Airbrake\n\n![Build Status](https://github.com/airbrake/pybrake/workflows/pybrake/badge.svg)\n\n## Installation\n\npybrake requires Python 3.6+.\n\n``` shell\npip install -U pybrake\n```\n\n## Configuration\n\nYou **must** set both `project_id` & `project_key`.\n\nTo find your `project_id` and `project_key` navigate to your project's\n_Settings_ and copy the values from the right sidebar.\n\n![][project-idkey]\n\n```python\nimport pybrake\n\nnotifier = pybrake.Notifier(project_id=123,\n                            project_key='FIXME',\n                            environment='production')\n```\n\n## Sending errors to Airbrake\n\n```python\ntry:\n    raise ValueError('hello')\nexcept Exception as err:\n    notifier.notify(err)\n```\n\n### Sending errors synchronously\n\nBy default, the `notify` function sends errors asynchronously using\n`ThreadPoolExecutor` and returns a `concurrent.futures.Future`, a synchronous\nAPI is also made available with the `notify_sync` function:\n\n```python\nnotice = notifier.notify_sync(err)\nif 'id' in notice:\n    print(notice['id'])\nelse:\n    print(notice['error'])\n```\n\n## Adding custom params\n\nTo set custom params you can build and send notice in separate steps:\n\n```python\nnotice = notifier.build_notice(err)\nnotice['params']['myparam'] = 'myvalue'\nnotifier.send_notice(notice)\n```\n\nYou can also add custom params to every error notice before it's sent to Airbrake\nwith the `add_filter` function.\n\n```python\ndef my_filter(notice):\n    notice['params']['myparam'] = 'myvalue'\n    return notice\n\nnotifier.add_filter(my_filter)\n```\n\n## Ignoring notices\n\nThere may be some notices/errors thrown in your application that you're not\ninterested in sending to Airbrake, you can ignore these using the `add_filter`\nfunction.\n\n```python\ndef my_filter(notice):\n    if notice['context']['environment'] == 'development':\n        # Ignore notices in development environment.\n        return None\n    return notice\n\nnotifier.add_filter(my_filter)\n```\n\n## Filtering keys\n\nWith `keys_blocklist` option you can specify list of keys containing sensitive information that must be filtered out, e.g.:\n\n```python\nnotifier = pybrake.Notifier(\n    ...\n    keys_blocklist=[\n        'password',           # exact match\n        re.compile('secret'), # regexp match\n    ],\n)\n```\n\n## Logging integration\n\npybrake provides a logging handler that sends your logs to Airbrake.\n\n```python\nimport logging\nimport pybrake\n\n\nairbrake_handler = pybrake.LoggingHandler(notifier=notifier,\n                                          level=logging.ERROR)\n\nlogger = logging.getLogger('test')\nlogger.addHandler(airbrake_handler)\n\nlogger.error('something bad happened')\n```\n\n## Django integration\n\nFirst, configure `project_id` and `project_key` in `settings.py`:\n\n```python\nAIRBRAKE = dict(\n    project_id=123,\n    project_key='FIXME',\n)\n```\n\nNext, activate the Airbrake middleware:\n\n```python\nMIDDLEWARE = [\n    ...\n    'pybrake.middleware.django.AirbrakeMiddleware',\n]\n```\n\nFinally, configure the airbrake logging handler:\n\n```python\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'airbrake': {\n            'level': 'ERROR',\n            'class': 'pybrake.LoggingHandler',\n        },\n    },\n    'loggers': {\n        'app': {\n            'handlers': ['airbrake'],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n    },\n}\n```\n\nNow you are ready to start reporting errors to Airbrake from your Django app.\n\n## Flask integration\n\nThe Flask integration leverages Flask signals and therefore requires the\n[blinker](https://pythonhosted.org/blinker/) library.\n\n```python\nfrom flask import Flask\nfrom pybrake.middleware.flask import init_app\n\napp = Flask(__name__)\n\napp.config['PYBRAKE'] = dict(\n    project_id=123,\n    project_key='FIXME',\n)\napp = init_app(app)\n```\n\n## aiohttp integration (python 3.5+)\n\nSetup airbrake's middleware and config for your web application:\n\n```python\n# app.py\n\nfrom aiohttp import web\nfrom pybrake.middleware.aiohttp import create_airbrake_middleware\n\nairbrake_middleware = create_airbrake_middleware()\n\napp = web.Application(middlewares=[airbrake_middleware])\n\napp['airbrake_config'] = dict(\n  project_id=123,\n  project_key='FIXME',\n  environment='production'  # optional\n)\n```\n\nAlso, you can pass custom handlers to `create_airbrake_middleware`:\n\n```python\n# middlewares.py\n\nimport aiohttp_jinja2\nfrom pybrake.middleware.aiohttp import create_airbrake_middleware\n\n\nasync def handle_404(request):\n    return aiohttp_jinja2.render_template('404.html', request, {})\n\n\nasync def handle_500(request):\n    return aiohttp_jinja2.render_template('500.html', request, {})\n\n\ndef setup_middlewares(app):\n    airbrake_middleware = create_airbrake_middleware({\n        404: handle_404,\n        500: handle_500\n    })\n\n    app.middlewares.append(airbrake_middleware)\n```\n\n## Disabling pybrake logs\n\nThe pybrake logger can be silenced by setting the logging level to\n`logging.CRITICAL`.\n\n``` python\nimport logging\n\n\nlogging.getLogger(\"pybrake\").setLevel(logging.CRITICAL)\n```\n\n## Sending route stats\n\n`notifier.routes.notify` allows sending route stats to Airbrake. The library\nprovides integrations with Django and Flask. (your routes are tracked\nautomatically). You can also use this API manually:\n\n```py\nfrom pybrake import RouteMetric\n\nmetric = RouteMetric(method=request.method, route=route)\nmetric.status_code = response.status_code\nmetric.content_type = response.headers.get(\"Content-Type\")\nmetric.end_time = time.time()\n\nnotifier.routes.notify(metric)\n```\n\n## Sending route breakdowns\n\n`notifier.routes.breakdowns.notify` allows sending performance breakdown stats\nto Airbrake. You can use this API manually:\n\n```py\nfrom pybrake import RouteMetric\n\nmetric = RouteMetric(\n    method=request.method,\n    route='/things/1',\n    status_code=200,\n    content_type=response.headers.get('Content-Type'))\nmetric._groups = {'db': 12.34, 'view': 56.78}\nmetric.end_time=time.time()\n\nnotifier.routes.breakdowns.notify(metric)\n```\n\n## Sending query stats\n\n`notifier.queries.notify` allows sending SQL query stats to Airbrake. The\nlibrary provides integration with Django (your queries are tracked\nautomatically). You can also use this API manually:\n\n```py\nnotifier.queries.notify(\n    query=\"SELECT * FROM foos\",\n    method=request.method,\n    route=route,\n    start_time=time.time(),\n    end_time=time.time(),\n)\n```\n\n## Sending queue stats\n\n`notifier.queues.notify` allows sending queue (job) stats to Airbrake. The\nlibrary provides integration with Celery (your queues are tracked\nautomatically). You can also use this API manually:\n\n```py\nfrom pybrake import QueueMetric\n\nmetric = QueueMetric(queue=\"foo_queue\")\nmetric._groups = {'redis': 24.0, 'sql': 0.4}\nnotifier.queues.notify(metric)\n```\n\n## Development\n\n### Running the tests\n\n```shell\npip install -r requirements.txt\npip install -r test-requirements.txt\npytest\n```\n\n### Uploading to PyPI\n\n```shell\npython setup.py sdist upload\n```\n\n### Remote configuration\n\nEvery 10 minutes the notifier issues an HTTP GET request to fetch remote\nconfiguration. This might be undesirable while running tests. To suppress this\nHTTP call, you need to pass `remote_config=False` to the notifier.\n\n[project-idkey]: https://s3.amazonaws.com/airbrake-github-assets/pybrake/project-id-key.png\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/airbrake/pybrake",
    "keywords": "airbrake exception error notifier",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pybrake1",
    "package_url": "https://pypi.org/project/pybrake1/",
    "platform": null,
    "project_url": "https://pypi.org/project/pybrake1/",
    "project_urls": {
      "Homepage": "http://github.com/airbrake/pybrake"
    },
    "release_url": "https://pypi.org/project/pybrake1/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python exception notifier for Airbrake",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13684521,
  "releases": {
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6a9bee201e3e52f6b0114c5030df145feb3e03021c57b1b6a46ad9acbb31e44",
          "md5": "bf32f49302965b9bce5c0392a5d4a3e1",
          "sha256": "c25f9e8990c5fc4d89fec716884efa5ae27cbb14d6d4191abedcf676885e1886"
        },
        "downloads": -1,
        "filename": "pybrake1-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "bf32f49302965b9bce5c0392a5d4a3e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22912,
        "upload_time": "2022-04-19T12:56:25",
        "upload_time_iso_8601": "2022-04-19T12:56:25.625791Z",
        "url": "https://files.pythonhosted.org/packages/e6/a9/bee201e3e52f6b0114c5030df145feb3e03021c57b1b6a46ad9acbb31e44/pybrake1-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d52ae265d8039cd2a0a516df48475b82021c47ef72006748079187b4975206f",
          "md5": "6db74402d553c85238563822ec20a1e6",
          "sha256": "df55fd4ff71a6e6ac007e3ff33fb0c9e862efabcf9002fc131534af919b838cf"
        },
        "downloads": -1,
        "filename": "pybrake1-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6db74402d553c85238563822ec20a1e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22951,
        "upload_time": "2022-05-02T05:20:43",
        "upload_time_iso_8601": "2022-05-02T05:20:43.484612Z",
        "url": "https://files.pythonhosted.org/packages/1d/52/ae265d8039cd2a0a516df48475b82021c47ef72006748079187b4975206f/pybrake1-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d52ae265d8039cd2a0a516df48475b82021c47ef72006748079187b4975206f",
        "md5": "6db74402d553c85238563822ec20a1e6",
        "sha256": "df55fd4ff71a6e6ac007e3ff33fb0c9e862efabcf9002fc131534af919b838cf"
      },
      "downloads": -1,
      "filename": "pybrake1-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6db74402d553c85238563822ec20a1e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22951,
      "upload_time": "2022-05-02T05:20:43",
      "upload_time_iso_8601": "2022-05-02T05:20:43.484612Z",
      "url": "https://files.pythonhosted.org/packages/1d/52/ae265d8039cd2a0a516df48475b82021c47ef72006748079187b4975206f/pybrake1-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}