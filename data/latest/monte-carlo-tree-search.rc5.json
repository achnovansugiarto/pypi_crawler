{
  "info": {
    "author": "Paul Sinclair, Konstantin StrÃ¼mpf and others",
    "author_email": "k.struempf@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# MCTS\n\nThis package provides a simple way of using Monte Carlo Tree Search in any perfect information domain.\n\nIt was originally authored by [pbsinclair42](https://github.com/pbsinclair42/MCTS). This fork however complies with the\n[Python Naming Convention](https://namingconvention.org/python/), provides base classes for implementing states and\nactions, and includes more comprehensive examples.\n\n## Installation\n\nWith [pip](https://pypi.org/project/monte-carlo-tree-search/): `pip install monte-carlo-tree-search`\n\nWithout pip: Download the zip/tar.gz file of the [latest release](https://github.com/kstruempf/MCTS/releases),\nextract it, and run `python setup.py install`\n\n## Quick Usage\n\nIn order to run MCTS, you must implement your own `State` class that extends `mcts.base.base.BaseState` which can fully\ndescribe the state of the world. It must implement four methods:\n\n- `get_current_player()`: Returns 1 if it is the maximizer player's turn to choose an action, or -1 for the minimiser\n  player\n- `get_possible_actions()`: Returns an iterable of all `action`s which can be taken from this state\n- `take_action(action)`: Returns the state which results from taking action `action`\n- `is_terminal()`: Returns `True` if this state is a terminal state\n- `get_reward()`: Returns the reward for this state. Only needed for terminal states.\n\nYou must also choose a hashable representation for an action as used in `get_possible_actions` and `take_action`.\nTypically, this would be a class with a custom `__hash__` method, but it could also simply be a tuple, a string, etc.\nA `BaseAction` class is provided for this purpose.\n\nOnce these have been implemented, running MCTS is as simple as initializing your starting state, then running:\n\n```python\nfrom mcts.base.base import BaseState\nfrom mcts.searcher.mcts import MCTS\n\n\nclass MyState(BaseState):\n    def get_possible_actions(self) -> [any]:\n        pass\n\n    def take_action(self, action: any) -> 'BaseState':\n        pass\n\n    def is_terminal(self) -> bool:\n        pass\n\n    def get_reward(self) -> float:\n        pass\n\n    def get_current_player(self) -> int:\n        pass\n\n\ninitial_state = MyState()\n\nsearcher = MCTS(time_limit=1000)\nbestAction = searcher.search(initial_state=initial_state)\n```\n\nHere the unit of `time_limit=1000` is milliseconds. You can also use for example `iteration_limit=100` to specify the\nnumber of rollouts. Exactly one of `time_limit` and `iteration_limit` should be specified.\n\n```python\nbest_action = searcher.search(initial_state=initial_state)\nprint(best_action)  # the best action to take found within the time limit\n```\n\nTo also receive the best reward as a return value set `need_details` to `True` in `searcher.search(...)`.\n\n```python\nbest_action, reward = searcher.search(initial_state=initial_state, need_details=True)\nprint(best_action)  # the best action to take found within the time limit\nprint(reward)  # the expected reward for the best action\n```\n\n**Examples**\n\nYou can find some examples using the MCTS here:\n\n* [naughtsandcrosses.py](https://github.com/kstruempf/MCTS/blob/main/mcts/example/naughtsandcrosses.py) is a minimal\n  runnable example by [pbsinclair42](https://github.com/pbsinclair42)\n* [connectmnk.py](https://github.com/kstruempf/MCTS/blob/main/mcts/example/connectmnk.py) is an example running a full\n  game between two MCTS agents by [LucasBorboleta](https://github.com/LucasBorboleta)\n\n## Collaborating\n\nFeel free to raise a new issue for any new feature or bug you've spotted. Pull requests are also welcomed if you're\ninterested in directly improving the project.\n\n### Coding Guidelines\n\nCommit message should follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) specification.\nThis makes contributions easily comprehensible and enables us to automatically generate release notes.\n\nRecommended tooling for developers:\n\n* JetBrains Plugin [Conventional Commit](https://plugins.jetbrains.com/plugin/13389-conventional-commit)\n  by [Edoardo Luppi](https://github.com/lppedd)\n* Visual Studio\n  Plugin [Conventional Commits](https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits)\n  by [vivaxy](https://marketplace.visualstudio.com/publishers/vivaxy)\n\n**Example commit message**\n\n```\nfix: prevent racing of requests\n\nIntroduce a request id and a reference to latest request. Dismiss\nincoming responses other than from latest request.\n\nRemove timeouts which were used to mitigate the racing issue but are\nobsolete now.\n\nReviewed-by: Z\nRefs: #123\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kstruempf/MCTS",
    "keywords": "mcts,monte,carlo,tree,search",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monte-carlo-tree-search",
    "package_url": "https://pypi.org/project/monte-carlo-tree-search/",
    "platform": null,
    "project_url": "https://pypi.org/project/monte-carlo-tree-search/",
    "project_urls": {
      "Homepage": "https://github.com/kstruempf/MCTS"
    },
    "release_url": "https://pypi.org/project/monte-carlo-tree-search/2.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple package to allow users to run Monte Carlo Tree Search on any perfect information domain",
    "version": "2.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16990314,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c25e734035b626151c14ebb69a3224643b9b68c99697e0816f0322b168b1d400",
          "md5": "dc833c118681f84c2e8de08612ece142",
          "sha256": "3bad10b2852bed9dea5b092a4e2ef3244c121df8b09d387ed9582b2522c41839"
        },
        "downloads": -1,
        "filename": "monte_carlo_tree_search-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc833c118681f84c2e8de08612ece142",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10042,
        "upload_time": "2022-05-12T12:48:18",
        "upload_time_iso_8601": "2022-05-12T12:48:18.430919Z",
        "url": "https://files.pythonhosted.org/packages/c2/5e/734035b626151c14ebb69a3224643b9b68c99697e0816f0322b168b1d400/monte_carlo_tree_search-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da850e749b4a72e12b722ab37d533f52883e7c066eed6ad4c33ff82ce6169aa7",
          "md5": "f7b974a23f307f5fb21495b0d0a33613",
          "sha256": "af98387a41adfc2943e4153dff7ec985da3513d0df19c63453eeac65ef3b15e0"
        },
        "downloads": -1,
        "filename": "monte_carlo_tree_search-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7b974a23f307f5fb21495b0d0a33613",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10400,
        "upload_time": "2022-05-13T15:28:19",
        "upload_time_iso_8601": "2022-05-13T15:28:19.115532Z",
        "url": "https://files.pythonhosted.org/packages/da/85/0e749b4a72e12b722ab37d533f52883e7c066eed6ad4c33ff82ce6169aa7/monte_carlo_tree_search-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a810e263a7f62495a088af3738a7b5f070301320d0396898139d2f60335e5f0d",
          "md5": "0391616301d521ad402b2dd3630d8c91",
          "sha256": "29f45658440e43b44e15ee4e3e231d75678072fe1cec277dbf51d59eae31a57e"
        },
        "downloads": -1,
        "filename": "monte_carlo_tree_search-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0391616301d521ad402b2dd3630d8c91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10439,
        "upload_time": "2022-05-16T09:26:24",
        "upload_time_iso_8601": "2022-05-16T09:26:24.095478Z",
        "url": "https://files.pythonhosted.org/packages/a8/10/e263a7f62495a088af3738a7b5f070301320d0396898139d2f60335e5f0d/monte_carlo_tree_search-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00e8c1148542255a5c1b95f8c11c6dde792aca3e34e85aed930704d1e6b7b9c4",
          "md5": "2e31a7b9f0cba1ee1f772e947ccf024b",
          "sha256": "2b682996a797947589c26437ed09d82a7d61dda1d15b6e8c6e01deede6a93cb2"
        },
        "downloads": -1,
        "filename": "monte_carlo_tree_search-2.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e31a7b9f0cba1ee1f772e947ccf024b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10646,
        "upload_time": "2022-06-29T17:32:59",
        "upload_time_iso_8601": "2022-06-29T17:32:59.248165Z",
        "url": "https://files.pythonhosted.org/packages/00/e8/c1148542255a5c1b95f8c11c6dde792aca3e34e85aed930704d1e6b7b9c4/monte_carlo_tree_search-2.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5739b206c6a27ccf5e753f4fb075154ea300d6e245af39eb1b1401622fca1e38",
          "md5": "fca4eff1cad791071ec1d7116a8616ca",
          "sha256": "94c6bdcb1f778c8ba834a224a40963de8df1603549d5a685e0761cf0c2df8a28"
        },
        "downloads": -1,
        "filename": "monte_carlo_tree_search-2.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fca4eff1cad791071ec1d7116a8616ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10688,
        "upload_time": "2023-02-23T08:30:52",
        "upload_time_iso_8601": "2023-02-23T08:30:52.560369Z",
        "url": "https://files.pythonhosted.org/packages/57/39/b206c6a27ccf5e753f4fb075154ea300d6e245af39eb1b1401622fca1e38/monte_carlo_tree_search-2.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5739b206c6a27ccf5e753f4fb075154ea300d6e245af39eb1b1401622fca1e38",
        "md5": "fca4eff1cad791071ec1d7116a8616ca",
        "sha256": "94c6bdcb1f778c8ba834a224a40963de8df1603549d5a685e0761cf0c2df8a28"
      },
      "downloads": -1,
      "filename": "monte_carlo_tree_search-2.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fca4eff1cad791071ec1d7116a8616ca",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10688,
      "upload_time": "2023-02-23T08:30:52",
      "upload_time_iso_8601": "2023-02-23T08:30:52.560369Z",
      "url": "https://files.pythonhosted.org/packages/57/39/b206c6a27ccf5e753f4fb075154ea300d6e245af39eb1b1401622fca1e38/monte_carlo_tree_search-2.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}