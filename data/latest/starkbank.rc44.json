{
  "info": {
    "author": "Stark Bank",
    "author_email": "developers@starkbank.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Stark Bank Python SDK\n\nWelcome to the Stark Bank Python SDK! This tool is made for Python \ndevelopers who want to easily integrate with our API.\nThis SDK version is compatible with the Stark Bank API v2.\n\nIf you have no idea what Stark Bank is, check out our [website](https://www.starkbank.com/) \nand discover a world where receiving or making payments \nis as easy as sending a text message to your client!\n\n# Introduction\n\n## Index\n\n- [Introduction](#introduction)\n    - [Supported Python versions](#supported-python-versions)\n    - [API documentation](#stark-bank-api-documentation)\n    - [Versioning](#versioning)\n- [Setup](#setup)\n    - [Install our SDK](#1-install-our-sdk)\n    - [Create your Private and Public Keys](#2-create-your-private-and-public-keys)\n    - [Register your user credentials](#3-register-your-user-credentials)\n    - [Setting up the user](#4-setting-up-the-user)\n    - [Setting up the error language](#5-setting-up-the-error-language)\n- [Resource listing and manual pagination](#resource-listing-and-manual-pagination)\n- [Testing in Sandbox](#testing-in-sandbox) \n- [Usage](#usage)\n    - [Transactions](#create-transactions): Account statement entries\n    - [Balance](#get-balance): Account balance\n    - [Transfers](#create-transfers): Wire transfers (TED and manual Pix)\n    - [DictKeys](#get-dict-key): Pix Key queries to use with Transfers\n    - [Institutions](#query-bacen-institutions): Institutions recognized by the Central Bank\n    - [Invoices](#create-invoices): Reconciled receivables (dynamic Pix QR Codes)\n    - [DynamicBrcode](#create-dynamicbrcodes): Simplified reconciled receivables (dynamic Pix QR Codes)\n    - [Deposits](#query-deposits): Other cash-ins (static Pix QR Codes, DynamicBrcodes, manual Pix, etc)\n    - [Boletos](#create-boletos): Boleto receivables\n    - [BoletoHolmes](#investigate-a-boleto): Boleto receivables investigator\n    - [BrcodePayments](#pay-a-br-code): Pay Pix QR Codes\n    - [BoletoPayments](#pay-a-boleto): Pay Boletos\n    - [UtilityPayments](#create-utility-payments): Pay Utility bills (water, light, etc.)\n    - [TaxPayments](#create-tax-payment): Pay taxes\n    - [DarfPayments](#create-darf-payment): Pay DARFs\n    - [PaymentPreviews](#preview-payment-information-before-executing-the-payment): Preview all sorts of payments\n    - [PaymentRequest](#create-payment-requests-to-be-approved-by-authorized-people-in-a-cost-center): Request a payment approval to a cost center\n    - [Webhooks](#create-a-webhook-subscription): Configure your webhook endpoints and subscriptions\n    - [WebhookEvents](#process-webhook-events): Manage webhook events\n    - [WebhookEventAttempts](#query-failed-webhook-event-delivery-attempts-information): Query failed webhook event deliveries\n    - [Workspaces](#create-a-new-workspace): Manage your accounts\n- [Handling errors](#handling-errors)\n- [Help and Feedback](#help-and-feedback)\n\n## Supported Python Versions\n\nThis library supports the following Python versions:\n\n* Python 2.7\n* Python 3.4+\n\n## Stark Bank API documentation\n\nFeel free to take a look at our [API docs](https://www.starkbank.com/docs/api).\n\n## Versioning\n\nThis project adheres to the following versioning pattern:\n\nGiven a version number MAJOR.MINOR.PATCH, increment:\n\n- MAJOR version when the **API** version is incremented. This may include backwards incompatible changes;\n- MINOR version when **breaking changes** are introduced OR **new functionalities** are added in a backwards compatible manner;\n- PATCH version when backwards compatible bug **fixes** are implemented.\n\n# Setup\n\n## 1. Install our SDK\n\n1.1 To install the package with pip, run:\n\n```sh\npip install starkbank\n```\n\n1.2 To install from source, clone the repo and run:\n\n```sh\npython setup.py install\n```\n\n## 2. Create your Private and Public Keys\n\nWe use ECDSA. That means you need to generate a secp256k1 private\nkey to sign your requests to our API, and register your public key\nwith us so we can validate those requests.\n\nYou can use one of following methods:\n\n2.1. Check out the options in our [tutorial](https://starkbank.com/faq/how-to-create-ecdsa-keys).\n\n2.2. Use our SDK:\n\n```python\nimport starkbank\n\nprivateKey, publicKey = starkbank.key.create()\n\n# or, to also save .pem files in a specific path\nprivateKey, publicKey = starkbank.key.create(\"file/keys/\")\n```\n\n**NOTE**: When you are creating new credentials, it is recommended that you create the\nkeys inside the infrastructure that will use it, in order to avoid risky internet\ntransmissions of your **private-key**. Then you can export the **public-key** alone to the\ncomputer where it will be used in the new Project creation.\n\n## 3. Register your user credentials\n\nYou can interact directly with our API using two types of users: Projects and Organizations.\n\n- **Projects** are workspace-specific users, that is, they are bound to the workspaces they are created in.\nOne workspace can have multiple Projects.\n- **Organizations** are general users that control your entire organization.\nThey can control all your Workspaces and even create new ones. The Organization is bound to your company's tax ID only.\nSince this user is unique in your entire organization, only one credential can be linked to it.\n\n3.1. To create a Project in Sandbox:\n\n3.1.1. Log into [Starkbank Sandbox](https://web.sandbox.starkbank.com)\n\n3.1.2. Go to Menu > Integrations\n\n3.1.3. Click on the \"New Project\" button\n\n3.1.4. Create a Project: Give it a name and upload the public key you created in section 2\n\n3.1.5. After creating the Project, get its Project ID\n\n3.1.6. Use the Project ID and private key to create the object below:\n\n```python\nimport starkbank\n\n# Get your private key from an environment variable or an encrypted database.\n# This is only an example of a private key content. You should use your own key.\nprivate_key_content = \"\"\"\n-----BEGIN EC PARAMETERS-----\nBgUrgQQACg==\n-----END EC PARAMETERS-----\n-----BEGIN EC PRIVATE KEY-----\nMHQCAQEEIMCwW74H6egQkTiz87WDvLNm7fK/cA+ctA2vg/bbHx3woAcGBSuBBAAK\noUQDQgAE0iaeEHEgr3oTbCfh8U2L+r7zoaeOX964xaAnND5jATGpD/tHec6Oe9U1\nIF16ZoTVt1FzZ8WkYQ3XomRD4HS13A==\n-----END EC PRIVATE KEY-----\n\"\"\"\n\nproject = starkbank.Project(\n    environment=\"sandbox\",\n    id=\"5656565656565656\",\n    private_key=private_key_content\n)\n```\n\n3.2. To create Organization credentials in Sandbox:\n\n3.2.1. Log into [Starkbank Sandbox](https://web.sandbox.starkbank.com)\n\n3.2.2. Go to Menu > Integrations\n\n3.2.3. Click on the \"Organization public key\" button\n\n3.2.4. Upload the public key you created in section 2 (only a legal representative of the organization can upload the public key)\n\n3.2.5. Click on your profile picture and then on the \"Organization\" menu to get the Organization ID\n\n3.2.6. Use the Organization ID and private key to create the object below:\n\n```python\nimport starkbank\n\n# Get your private key from an environment variable or an encrypted database.\n# This is only an example of a private key content. You should use your own key.\nprivate_key_content = \"\"\"\n-----BEGIN EC PARAMETERS-----\nBgUrgQQACg==\n-----END EC PARAMETERS-----\n-----BEGIN EC PRIVATE KEY-----\nMHQCAQEEIMCwW74H6egQkTiz87WDvLNm7fK/cA+ctA2vg/bbHx3woAcGBSuBBAAK\noUQDQgAE0iaeEHEgr3oTbCfh8U2L+r7zoaeOX964xaAnND5jATGpD/tHec6Oe9U1\nIF16ZoTVt1FzZ8WkYQ3XomRD4HS13A==\n-----END EC PRIVATE KEY-----\n\"\"\"\n\norganization = starkbank.Organization(\n    environment=\"sandbox\",\n    id=\"5656565656565656\",\n    private_key=private_key_content,\n    workspace_id=None,  # You only need to set the workspace_id when you are operating a specific workspace_id\n)\n\n# To dynamically use your organization credentials in a specific workspace_id,\n# you can use the Organization.replace() function:\nstarkbank.balance.get(user=starkbank.Organization.replace(organization, \"4848484848484848\"))\n```\n\nNOTE 1: Never hard-code your private key. Get it from an environment variable or an encrypted database.\n\nNOTE 2: We support `'sandbox'` and `'production'` as environments.\n\nNOTE 3: The credentials you registered in `sandbox` do not exist in `production` and vice versa.\n\n\n## 4. Setting up the user\n\nThere are three kinds of users that can access our API: **Organization**, **Project** and **Member**.\n\n- `Project` and `Organization` are designed for integrations and are the ones meant for our SDKs.\n- `Member` is the one you use when you log into our webpage with your e-mail.\n\nThere are two ways to inform the user to the SDK:\n\n4.1 Passing the user as argument in all functions:\n\n```python\nimport starkbank\n\nbalance = starkbank.balance.get(user=project)  # or organization\n```\n\n4.2 Set it as a default user in the SDK:\n\n```python\nimport starkbank\n\nstarkbank.user = project  # or organization\n\nbalance = starkbank.balance.get()\n```\n\nJust select the way of passing the user that is more convenient to you.\nOn all following examples we will assume a default user has been set.\n\n## 5. Setting up the error language\n\nThe error language can also be set in the same way as the default user:\n\n```python\nimport starkbank\n\nstarkbank.language = \"en-US\"\n```\n\nLanguage options are \"en-US\" for english and \"pt-BR\" for brazilian portuguese. English is default.\n\n# Resource listing and manual pagination\n\nAlmost all SDK resources provide a `query` and a `page` function.\n\n- The `query` function provides a straight forward way to efficiently iterate through all results that match the filters you inform,\nseamlessly retrieving the next batch of elements from the API only when you reach the end of the current batch.\nIf you are not worried about data volume or processing time, this is the way to go.\n\n```python\nimport starkbank\n\nfor transaction in starkbank.transaction.query(limit=200):\n    print(transaction)\n```\n\n- The `page` function gives you full control over the API pagination. With each function call, you receive up to\n100 results and the cursor to retrieve the next batch of elements. This allows you to stop your queries and\npick up from where you left off whenever it is convenient. When there are no more elements to be retrieved, the returned cursor will be `None`.\n\n```python\nimport starkbank\n\ncursor = None\nwhile True:\n    transactions, cursor = starkbank.transaction.page(limit=50, cursor=cursor)\n    for transaction in transactions:\n        print(transaction)\n    if cursor is None:\n        break\n```\n\nTo simplify the following SDK examples, we will only use the `query` function, but feel free to use `page` instead.\n\n# Testing in Sandbox\n\nYour initial balance is zero. For many operations in Stark Bank, you'll need funds\nin your account, which can be added to your balance by creating an Invoice or a Boleto. \n\nIn the Sandbox environment, most of the created Invoices and Boletos will be automatically paid,\nso there's nothing else you need to do to add funds to your account. Just create\na few Invoices and wait around a bit.\n\nIn Production, you (or one of your clients) will need to actually pay this Invoice or Boleto\nfor the value to be credited to your account.\n\n\n# Usage\n\nHere are a few examples on how to use the SDK. If you have any doubts, use the built-in\n`help()` function to get more info on the desired functionality\n(for example: `help(starkbank.boleto.create)`)\n\n## Create transactions\n\nTo send money between Stark Bank accounts, you can create transactions:\n\n```python\nimport starkbank\n\ntransactions = starkbank.transaction.create([\n    starkbank.Transaction(\n        amount=100,  # (R$ 1.00)\n        receiver_id=\"1029378109327810\",\n        description=\"Transaction to dear provider\",\n        external_id=\"12345\",  # so we can block anything you send twice by mistake\n        tags=[\"provider\"]\n    ),\n    starkbank.Transaction(\n        amount=234,  # (R$ 2.34)\n        receiver_id=\"2093029347820947\",\n        description=\"Transaction to the other provider\",\n        external_id=\"12346\",  # so we can block anything you send twice by mistake\n        tags=[\"provider\"]\n    ),\n])\n\nfor transaction in transactions:\n    print(transaction)\n```\n\n**Note**: Instead of using Transaction objects, you can also pass each transaction element in dictionary format\n\n## Query transactions\n\nTo understand your balance changes (bank statement), you can query\ntransactions. Note that our system creates transactions for you when\nyou receive boleto payments, pay a bill or make transfers, for example.\n\n```python\nimport starkbank\n\ntransactions = starkbank.transaction.query(\n    after=\"2020-01-01\",\n    before=\"2020-03-01\"\n)\n\nfor transaction in transactions:\n    print(transaction)\n```\n\n## Get a transaction\n\nYou can get a specific transaction by its id:\n\n```python\nimport starkbank\n\ntransaction = starkbank.transaction.get(\"5155165527080960\")\n\nprint(transaction)\n```\n\n## Get balance\n\nTo know how much money you have in your workspace, run:\n\n```python\nimport starkbank\n\nbalance = starkbank.balance.get()\n\nprint(balance)\n```\n\n## Create transfers\n\nYou can also create transfers in the SDK (TED/Pix) and configure transfer behavior according to its rules.\n\n```python\nimport starkbank\nfrom datetime import datetime, timedelta\n\ntransfers = starkbank.transfer.create([\n    starkbank.Transfer(\n        amount=100,\n        bank_code=\"033\",  # TED\n        branch_code=\"0001\",\n        account_number=\"10000-0\",\n        tax_id=\"012.345.678-90\",\n        name=\"Tony Stark\",\n        tags=[\"iron\", \"suit\"]\n    ),\n    starkbank.Transfer(\n        amount=200,\n        bank_code=\"20018183\",  # Pix\n        branch_code=\"1234\",\n        account_number=\"123456-7\",\n        account_type=\"salary\",\n        external_id=\"my-internal-id-12345\",\n        tax_id=\"012.345.678-90\",\n        name=\"Jon Snow\",\n        scheduled=datetime.utcnow() + timedelta(days=3),\n        rules=[\n            starkbank.transfer.Rule(\n              key=\"resendingLimit\",  # Set maximum number of retries if Transfer fails due to systemic issues at the receiver bank\n              value=5                # Our resending limit is 10 by default\n            ) \n        ] \n    )\n])\n\nfor transfer in transfers:\n    print(transfer)\n```\n\n**Note**: Instead of using Transfer objects, you can also pass each transfer element in dictionary format\n\n## Query transfers\n\nYou can query multiple transfers according to filters.\n\n```python\nimport starkbank\nfrom datetime import datetime\n\ntransfers = starkbank.transfer.query(\n    after=datetime(2020, 1, 1),\n    before=datetime(2020, 4, 1)\n)\n\nfor transfer in transfers:\n    print(transfer.name)\n```\n\n## Cancel a scheduled transfer\n\nTo cancel a single scheduled transfer by its id, run:\n\n```python\nimport starkbank\n\ntransfer = starkbank.transfer.delete(\"5155165527080960\")\n\nprint(transfer)\n```\n\n## Get a transfer\n\nTo get a single transfer by its id, run:\n\n```python\nimport starkbank\n\ntransfer = starkbank.transfer.get(\"5155165527080960\")\n\nprint(transfer)\n```\n\n## Get a transfer PDF\n\nA transfer PDF may also be retrieved by its id.\nThis operation is only valid if the transfer status is \"processing\" or \"success\". \n\n```python\nimport starkbank\n\npdf = starkbank.transfer.pdf(\"5155165527080960\")\n\nwith open(\"transfer.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n## Query transfer logs\n\nYou can query transfer logs to better understand transfer life cycles.\n\n```python\nimport starkbank\n\nlogs = starkbank.transfer.log.query(limit=50)\n\nfor log in logs:\n    print(log.id)\n```\n\n## Get a transfer log\n\nYou can also get a specific log by its id.\n\n```python\nimport starkbank\n\nlog = starkbank.transfer.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n## Get DICT key\n\nYou can get the Pix key's parameters by its id.\n\n```python\nimport starkbank\n\ndict_key = starkbank.dictkey.get(\"tony@starkbank.com\")\n\nprint(dict_key)\n```\n\n## Query your DICT keys\n\nTo take a look at the Pix keys linked to your workspace, just run the following:\n\n```python\nimport starkbank\n\ndict_keys = starkbank.dictkey.query(status=\"registered\")\n\nfor dict_key in dict_keys:\n    print(dict_key)\n```\n\n## Query Bacen institutions\n\nYou can query institutions registered by the Brazilian Central Bank for Pix and TED transactions.\n\n```python\nimport starkbank\n\ninstitutions = starkbank.institution.query(search=\"stark\")\n\nfor institution in institutions:\n    print(institution)\n```\n\n## Create invoices\n\nYou can create dynamic QR Code invoices to charge customers or to receive money from accounts you have in other banks. \n\nSince the banking system only understands value modifiers (discounts, fines and interest) when dealing with **dates** (instead of **datetimes**), these values will only show up in the end user banking interface if you use **dates** in the \"due\" and \"discounts\" fields. \n\nIf you use **datetimes** instead, our system will apply the value modifiers in the same manner, but the end user will only see the final value to be paid on his interface.\n\nAlso, other banks will most likely only allow payment scheduling on invoices defined with **dates** instead of **datetimes**.\n\n```python\n# coding: utf-8\nimport starkbank\nfrom datetime import date, datetime, timedelta\n\n\ninvoices = starkbank.invoice.create([\n    starkbank.Invoice(\n        amount=23571,  # R$ 235,71 \n        name=\"Buzz Aldrin\",\n        tax_id=\"012.345.678-90\", \n        due=datetime.utcnow() + timedelta(hours=1),\n        expiration=timedelta(hours=3).total_seconds(),\n        fine=5,  # 5%\n        interest=2.5,  # 2.5% per month\n        tags=[\"immediate\"]\n    ),\n    starkbank.Invoice(\n        amount=23571,  # R$ 235,71 \n        name=\"Buzz Aldrin\",\n        tax_id=\"012.345.678-90\", \n        due=date(2022, 3, 20),\n        expiration=timedelta(hours=3).total_seconds(),\n        fine=5,  # 5%\n        interest=2.5,  # 2.5% per month\n        tags=[\"scheduled\"]\n    )\n])\n\nfor invoice in invoices:\n    print(invoice)\n```\n\n**Note**: Instead of using Invoice objects, you can also pass each invoice element in dictionary format\n\n## Get an invoice\n\nAfter its creation, information on an invoice may be retrieved by its id. \nIts status indicates whether it's been paid.\n\n```python\nimport starkbank\n\ninvoice = starkbank.invoice.get(\"5155165527080960\")\n\nprint(invoice)\n```\n\n## Get an invoice PDF\n\nAfter its creation, an invoice PDF may be retrieved by its id. \n\n```python\nimport starkbank\n\npdf = starkbank.invoice.pdf(\"5155165527080960\", layout=\"default\")\n\nwith open(\"invoice.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n## Get an invoice QR Code \n\nAfter its creation, an Invoice QR Code may be retrieved by its id. \n\n```python\nimport starkbank\n\nqrcode = starkbank.invoice.qrcode(\"5881614903017472\", size= 15)\n\nwith open(\"qrcode.png\", \"wb\") as file:\n    file.write(qrcode)\n```\n\nBe careful not to accidentally enforce any encoding on the raw png content,\nas it may corrupt the file.\n\n## Cancel an invoice\n\nYou can also cancel an invoice by its id.\nNote that this is not possible if it has been paid already.\n\n```python\nimport starkbank\n\ninvoice = starkbank.invoice.update(\"5155165527080960\", status=\"canceled\")\n\nprint(invoice)\n```\n\n## Update an invoice\n\nYou can update an invoice's amount, due date and expiration by its id.\nIf the invoice has already been paid, only the amount can be\ndecreased, which will result in a payment reversal. To fully reverse \nthe invoice, pass amount = 0.\n\n```python\nimport starkbank\nfrom datetime import datetime, timedelta\n\ninvoice = starkbank.invoice.update(\n    \"5155165527080960\",\n    amount=100,\n    expiration=0,\n    due=datetime.utcnow() + timedelta(hours=1),\n)\n\nprint(invoice)\n```\n\n## Query invoices\n\nYou can get a list of created invoices given some filters.\n\n```python\nimport starkbank\nfrom datetime import datetime\n\ninvoices = starkbank.invoice.query(\n    after=datetime(2020, 1, 1),\n    before=datetime(2020, 3, 1)\n)\n\nfor invoice in invoices:\n    print(invoice)\n```\n\n## Query invoice logs\n\nLogs are pretty important to understand the life cycle of an invoice.\n\n```python\nimport starkbank\n\nlogs = starkbank.invoice.log.query(limit=150)\n\nfor log in logs:\n    print(log)\n```\n\n## Get an invoice log\n\nYou can get a single log by its id.\n\n```python\nimport starkbank\n\nlog = starkbank.invoice.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n## Get a reversed invoice log PDF\n\nWhenever an Invoice is successfully reversed, a reversed log will be created. \nTo retrieve a specific reversal receipt, you can request the corresponding log PDF:\n\n```python\nimport starkbank\n\npdf = starkbank.invoice.log.pdf(\"5155165527080960\")\n\nwith open(\"invoice-reversal.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n## Get an invoice payment information\n\nOnce an invoice has been paid, you can get the payment information using the Invoice.Payment sub-resource:\n\n```python\nimport starkbank\n\npaymentInformation = starkbank.invoice.payment(\"5155165527080960\")\n\nprint(paymentInformation)\n```\n\n## Create DynamicBrcodes\n\nYou can create simplified dynamic QR Codes to receive money using Pix transactions. \nWhen a DynamicBrcode is paid, a Deposit is created with the tags parameter containing the character “dynamic-brcode/” followed by the DynamicBrcode’s uuid \"dynamic-brcode/{uuid}\" for conciliation.\n\nThe differences between an Invoice and the DynamicBrcode are the following:\n\n|                       | Invoice | DynamicBrcode |\n|-----------------------|:-------:|:-------------:|\n| Expiration            |    ✓    |       ✓       | \n| Can only be paid once |    ✓    |       ✓       |\n| Due, fine and fee     |    ✓    |       X       | \n| Discount              |    ✓    |       X       | \n| Description           |    ✓    |       X       |\n| Can be updated        |    ✓    |       X       |\n\n**Note:** In order to check if a BR code has expired, you must first calculate its expiration date (add the expiration to the creation date). \n**Note:** To know if the BR code has been paid, you need to query your Deposits by the tag \"dynamic-brcode/{uuid}\" to check if it has been paid.\n\n```python\n# coding: utf-8\nimport starkbank\nfrom datetime import timedelta\n\n\nbrcodes = starkbank.dynamicbrcode.create([\n    starkbank.DynamicBrcode(\n      amount=23571,  # R$ 235,71 \n      expiration=timedelta(hours=3).total_seconds()\n    ),\n    starkbank.DynamicBrcode(\n      amount=23571,  # R$ 235,71 \n      expiration=timedelta(hours=3).total_seconds()\n    )\n])\n\nfor brcode in brcodes:\n    print(brcode)\n```\n\n**Note**: Instead of using DynamicBrcode objects, you can also pass each brcode element in dictionary format\n\n## Get a DynamicBrcode\n\nAfter its creation, information on a DynamicBrcode may be retrieved by its uuid.\n\n```python\nimport starkbank\n\nbrcode = starkbank.dynamicbrcode.get(\"bb9cd43ea6f4403391bf7ef6aa876600\")\n\nprint(brcode)\n```\n\n## Query DynamicBrcodes\n\nYou can get a list of created DynamicBrcodes given some filters.\n\n```python\nimport starkbank\nfrom datetime import datetime\n\nbrcodes = starkbank.dynamicbrcode.query(\n    after=datetime(2023, 1, 1),\n    before=datetime(2023, 3, 1)\n)\n\nfor brcode in brcodes:\n    print(brcode)\n```\n\n## Query deposits\n\nYou can get a list of created deposits given some filters.\n\n```python\nimport starkbank\nfrom datetime import datetime\n\ndeposits = starkbank.deposit.query(\n    after=datetime(2020, 1, 1),\n    before=datetime(2020, 3, 1)\n)\n\nfor deposit in deposits:\n    print(deposit)\n```\n\n## Get a deposit\n\nAfter its creation, information on a deposit may be retrieved by its id. \n\n```python\nimport starkbank\n\ndeposit = starkbank.deposit.get(\"5155165527080960\")\n\nprint(deposit)\n```\n\n## Query deposit logs\n\nLogs are pretty important to understand the life cycle of a deposit.\n\n```python\nimport starkbank\n\nlogs = starkbank.deposit.log.query(limit=150)\n\nfor log in logs:\n    print(log)\n```\n\n## Get a deposit log\n\nYou can get a single log by its id.\n\n```python\nimport starkbank\n\nlog = starkbank.deposit.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n## Create boletos\n\nYou can create boletos to charge customers or to receive money from accounts\nyou have in other banks.\n\n```python\n# coding: utf-8\nimport starkbank\nfrom datetime import datetime\n\n\nboletos = starkbank.boleto.create([\n    starkbank.Boleto(\n        amount=23571,  # R$ 235,71 \n        name=\"Buzz Aldrin\",\n        tax_id=\"012.345.678-90\", \n        street_line_1=\"Av. Paulista, 200\", \n        street_line_2=\"10 andar\",\n        district=\"Bela Vista\", \n        city=\"São Paulo\",\n        state_code=\"SP\",\n        zip_code=\"01310-000\",\n        due=datetime(2020, 3, 20),\n        fine=5,  # 5%\n        interest=2.5,  # 2.5% per month\n    ),\n])\n\nfor boleto in boletos:\n    print(boleto)\n```\n\n**Note**: Instead of using Boleto objects, you can also pass each boleto element in dictionary format\n\n## Get a boleto\n\nAfter its creation, information on a boleto may be retrieved by its id. \nIts status indicates whether it's been paid.\n\n```python\nimport starkbank\n\nboleto = starkbank.boleto.get(\"5155165527080960\")\n\nprint(boleto)\n```\n\n## Get a boleto PDF\n\nAfter its creation, a boleto PDF may be retrieved by its id. \n\n```python\nimport starkbank\n\npdf = starkbank.boleto.pdf(\"5155165527080960\", layout=\"default\")\n\nwith open(\"boleto.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n## Delete a boleto\n\nYou can also cancel a boleto by its id.\nNote that this is not possible if it has been processed already.\n\n```python\nimport starkbank\n\nboleto = starkbank.boleto.delete(\"5155165527080960\")\n\nprint(boleto)\n```\n\n## Query boletos\n\nYou can get a list of created boletos given some filters.\n\n```python\nimport starkbank\nfrom datetime import datetime\n\nboletos = starkbank.boleto.query(\n    after=datetime(2020, 1, 1),\n    before=datetime(2020, 3, 1)\n)\n\nfor boleto in boletos:\n    print(boleto)\n```\n\n## Query boleto logs\n\nLogs are pretty important to understand the life cycle of a boleto.\n\n```python\nimport starkbank\n\nlogs = starkbank.boleto.log.query(limit=150)\n\nfor log in logs:\n    print(log)\n```\n\n## Get a boleto log\n\nYou can get a single log by its id.\n\n```python\nimport starkbank\n\nlog = starkbank.boleto.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n## Investigate a boleto\n\nYou can discover if a StarkBank boleto has been recently paid before we receive the response on the next day.\nThis can be done by creating a BoletoHolmes object, which fetches the updated status of the corresponding\nBoleto object according to CIP to check, for example, whether it is still payable or not. The investigation\nhappens asynchronously and the most common way to retrieve the results is to register a \"boleto-holmes\" webhook\nsubscription, although polling is also possible. \n\n```python\nimport starkbank\n\nholmes = starkbank.boletoholmes.create([\n    starkbank.BoletoHolmes(\n        boleto_id=\"5656565656565656\",\n    ),\n    starkbank.BoletoHolmes(\n        boleto_id=\"4848484848484848\",\n    ),\n])\n\nfor sherlock in holmes:\n    print(sherlock)\n```\n\n**Note**: Instead of using BoletoHolmes objects, you can also pass each payment element in dictionary format\n\n## Get a boleto holmes\n\nTo get a single Holmes by its id, run:\n\n```python\nimport starkbank\n\nsherlock = starkbank.boletoholmes.get(\"19278361897236187236\")\n\nprint(sherlock)\n```\n\n## Query boleto holmes\n\nYou can search for boleto Holmes using filters. \n\n```python\nimport starkbank\n\nholmes = starkbank.boletoholmes.query(\n    tags=[\"customer_1\", \"customer_2\"]\n)\n\nfor sherlock in holmes:\n    print(sherlock)\n```\n\n## Query boleto holmes logs\n\nSearches are also possible with boleto holmes logs:\n\n```python\nimport starkbank\n\nlogs = starkbank.boletoholmes.log.query(\n    holmes_ids=[\"5155165527080960\", \"76551659167801921\"],\n)\n\nfor log in logs:\n    print(log)\n```\n\n\n## Get a boleto holmes log\n\nYou can also get a boleto holmes log by specifying its id.\n\n```python\nimport starkbank\n\nlog = starkbank.boletoholmes.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n## Pay a BR Code\n\nPaying a BR Code is also simple. After extracting the BR Code encoded in the Pix QR Code, you can do the following:\n\n```python\nimport starkbank\n\npayments = starkbank.brcodepayment.create([\n    starkbank.BrcodePayment(\n        brcode=\"00020126580014br.gov.bcb.pix0136a629532e-7693-4846-852d-1bbff817b5a8520400005303986540510.005802BR5908T'Challa6009Sao Paulo62090505123456304B14A\",\n        tax_id=\"012.345.678-90\",\n        scheduled=\"2020-03-13\",\n        description=\"this will be fast\",\n        tags=[\"pix\", \"qrcode\"],\n        rules=[\n            starkbank.brcodepayment.Rule(\n              key=\"resendingLimit\",  # Set maximum number of retries if Payment fails due to systemic issues at the receiver bank\n              value=5                # Our resending limit is 10 by default\n            ) \n        ]\n    )\n])\n\nfor payment in payments:\n    print(payment)\n```\n**Note**: You can also configure payment behavior according to its rules\n**Note**: Instead of using BrcodePayment objects, you can also pass each payment element in dictionary format\n\n## Get a BR Code payment\n\nTo get a single BR Code payment by its id, run:\n\n```python\nimport starkbank\n\npayment = starkbank.brcodepayment.get(\"19278361897236187236\")\n\nprint(payment)\n```\n\n## Get a BR Code payment PDF\n\nAfter its creation, a BR Code payment PDF may be retrieved by its id. \n\n```python\nimport starkbank\n\npdf = starkbank.brcodepayment.pdf(\"5155165527080960\")\n\nwith open(\"brcode-payment.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n## Cancel a BR Code payment\n\nYou can cancel a BR Code payment by changing its status to \"canceled\".\nNote that this is not possible if it has been processed already.\n\n```python\nimport starkbank\nfrom datetime import datetime, timedelta\n\npayment = starkbank.brcodepayment.update(\n    \"5155165527080960\",\n    status=\"canceled\"\n)\n\nprint(payment)\n```\n\n## Query BR Code payments\n\nYou can search for brcode payments using filters. \n\n```python\nimport starkbank\n\npayments = starkbank.brcodepayment.query(\n    tags=[\"company_1\", \"company_2\"]\n)\n\nfor payment in payments:\n    print(payment)\n```\n\n## Query BR Code payment logs\n\nSearches are also possible with BR Code payment logs:\n\n```python\nimport starkbank\n\nlogs = starkbank.brcodepayment.log.query(\n    payment_ids=[\"5155165527080960\", \"76551659167801921\"],\n)\n\nfor log in logs:\n    print(log)\n```\n\n\n## Get a BR Code payment log\n\nYou can also get a BR Code payment log by specifying its id.\n\n```python\nimport starkbank\n\nlog = starkbank.brcodepayment.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n\n## Pay a boleto\n\nPaying a boleto is also simple.\n\n```python\nimport starkbank\n\npayments = starkbank.boletopayment.create([\n    starkbank.BoletoPayment(\n        line=\"34191.09008 61207.727308 71444.640008 5 81310001234321\",\n        tax_id=\"012.345.678-90\",\n        scheduled=\"2020-03-13\",\n        description=\"take my money\",\n        tags=[\"take\", \"my\", \"money\"],\n    ),\n    starkbank.BoletoPayment(\n        bar_code=\"34197819200000000011090063609567307144464000\",\n        tax_id=\"012.345.678-90\",\n        scheduled=\"2020-03-14\",\n        description=\"take my money one more time\",\n        tags=[\"again\"],\n    ),\n])\n\nfor payment in payments:\n    print(payment)\n```\n\n**Note**: Instead of using BoletoPayment objects, you can also pass each payment element in dictionary format\n\n## Get a boleto payment\n\nTo get a single boleto payment by its id, run:\n\n```python\nimport starkbank\n\npayment = starkbank.boletopayment.get(\"19278361897236187236\")\n\nprint(payment)\n```\n\n## Get a boleto payment PDF\n\nAfter its creation, a boleto payment PDF may be retrieved by its id. \n\n```python\nimport starkbank\n\npdf = starkbank.boletopayment.pdf(\"5155165527080960\")\n\nwith open(\"boleto-payment.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n## Delete a boleto payment\n\nYou can also cancel a boleto payment by its id.\nNote that this is not possible if it has been processed already.\n\n```python\nimport starkbank\n\npayment = starkbank.boletopayment.delete(\"5155165527080960\")\n\nprint(payment)\n```\n\n## Query boleto payments\n\nYou can search for boleto payments using filters. \n\n```python\nimport starkbank\n\npayments = starkbank.boletopayment.query(\n    tags=[\"company_1\", \"company_2\"]\n)\n\nfor payment in payments:\n    print(payment)\n```\n\n## Query boleto payment logs\n\nSearches are also possible with boleto payment logs:\n\n```python\nimport starkbank\n\nlogs = starkbank.boletopayment.log.query(\n    payment_ids=[\"5155165527080960\", \"76551659167801921\"],\n)\n\nfor log in logs:\n    print(log)\n```\n\n## Get a boleto payment log\n\nYou can also get a boleto payment log by specifying its id.\n\n```python\nimport starkbank\n\nlog = starkbank.boletopayment.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n## Create utility payments\n\nIts also simple to pay utility bills (such as electricity and water bills) in the SDK.\n\n```python\nimport starkbank\n\npayments = starkbank.utilitypayment.create([\n    starkbank.UtilityPayment(\n        line=\"34197819200000000011090063609567307144464000\",\n        scheduled=\"2020-03-13\",\n        description=\"take my money\",\n        tags=[\"take\", \"my\", \"money\"],\n    ),\n    starkbank.UtilityPayment(\n        bar_code=\"34191.09008 61207.727308 71444.640008 5 81310001234321\",\n        scheduled=\"2020-03-14\",\n        description=\"take my money one more time\",\n        tags=[\"again\"],\n    ),\n])\n\nfor payment in payments:\n    print(payment)\n```\n\n**Note**: Instead of using UtilityPayment objects, you can also pass each payment element in dictionary format\n\n## Query utility payments\n\nTo search for utility payments using filters, run:\n\n```python\nimport starkbank\n\npayments = starkbank.utilitypayment.query(\n    tags=[\"electricity\", \"gas\"]\n)\n\nfor payment in payments:\n    print(payment)\n```\n\n## Get a utility payment\n\nYou can get a specific bill by its id:\n\n```python\nimport starkbank\n\npayment = starkbank.utilitypayment.get(\"5155165527080960\")\n\nprint(payment)\n```\n\n## Get a utility payment PDF\n\nAfter its creation, a utility payment PDF may also be retrieved by its id. \n\n```python\nimport starkbank\n\npdf = starkbank.utilitypayment.pdf(\"5155165527080960\")\n\nwith open(\"electricity-payment.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n## Delete a utility payment\n\nYou can also cancel a utility payment by its id.\nNote that this is not possible if it has been processed already.\n\n```python\nimport starkbank\n\npayment = starkbank.utilitypayment.delete(\"5155165527080960\")\n\nprint(payment)\n```\n\n## Query utility payment logs\n\nYou can search for payments by specifying filters. Use this to understand the\nbills life cycles.\n\n```python\nimport starkbank\n\nlogs = starkbank.utilitypayment.log.query(\n    payment_ids=[\"102893710982379182\", \"92837912873981273\"],\n)\n\nfor log in logs:\n    print(log)\n```\n\n## Get a utility payment log\n\nIf you want to get a specific payment log by its id, just run:\n\n```python\nimport starkbank\n\nlog = starkbank.utilitypayment.log.get(\"1902837198237992\")\n\nprint(log)\n```\n\n## Create tax payment\n\nIt is also simple to pay taxes (such as ISS and DAS) using this SDK.\n\n```python\nimport starkbank\n\npayments = starkbank.taxpayment.create([\n    starkbank.TaxPayment(\n        bar_code=\"83660000001084301380074119002551100010601813\",\n        scheduled=\"2020-08-13\",\n        description=\"fix the road\",\n        tags=[\"take\", \"my\", \"money\"],\n    ),\n    starkbank.TaxPayment(\n        line=\"85800000003 0 28960328203 1 56072020190 5 22109674804 0\",\n        scheduled=\"2020-08-14\",\n        description=\"build the hospital, hopefully\",\n        tags=[\"expensive\"],\n    ),\n])\n\nfor payment in payments:\n    print(payment)\n```\n\n**Note**: Instead of using TaxPayment objects, you can also pass each payment element in dictionary format\n\n## Query tax payments\n\nTo search for tax payments using filters, run:\n\n```python\nimport starkbank\n\npayments = starkbank.taxpayment.query(\n    tags=[\"das\", \"july\"]\n)\n\nfor payment in payments:\n    print(payment)\n```\n\n## Get tax payment\n\nYou can get a specific tax payment by its id:\n\n```python\nimport starkbank\n\npayment = starkbank.taxpayment.get(\"5155165527080960\")\n\nprint(payment)\n```\n\n## Get tax payment PDF\n\nAfter its creation, a tax payment PDF may also be retrieved by its id. \n\n```python\nimport starkbank\n\npdf = starkbank.taxpayment.pdf(\"5155165527080960\")\n\nwith open(\"iss-payment.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n## Delete tax payment\n\nYou can also cancel a tax payment by its id.\nNote that this is not possible if it has been processed already.\n\n```python\nimport starkbank\n\npayment = starkbank.taxpayment.delete(\"5155165527080960\")\n\nprint(payment)\n```\n\n## Query tax payment logs\n\nYou can search for payment logs by specifying filters. Use this to understand each payment life cycle.\n\n```python\nimport starkbank\n\nlogs = starkbank.taxpayment.log.query(limit=10)\n\nfor log in logs:\n    print(log)\n```\n\n## Get tax payment log\n\nIf you want to get a specific payment log by its id, just run:\n\n```python\nimport starkbank\n\nlog = starkbank.taxpayment.log.get(\"1902837198237992\")\n\nprint(log)\n```\n\n**Note**: Some taxes can't be payed with bar codes. Since they have specific parameters, each one of them has its own\nresource and routes, which are all analogous to the TaxPayment resource. The ones we currently support are:\n- DarfPayment, for DARFs\n\n## Create DARF payment\n\nIf you want to manually pay DARFs without barcodes, you may create DarfPayments:\n\n```python\nimport starkbank\nfrom datetime import datetime, timedelta\n\n\npayments = starkbank.darfpayment.create([\n    starkbank.DarfPayment(\n        revenue_code=\"1240\",\n        tax_id=\"012.345.678-90\",\n        competence=\"2020-09-01\",\n        reference_number=\"2340978970\",\n        nominal_amount=1234,\n        fine_amount=12,\n        interest_amount=34,\n        due=datetime.now() + timedelta(days=30),\n        scheduled=datetime.now() + timedelta(days=30),\n        tags=[\"DARF\", \"making money\"],\n        description=\"take my money\",\n    )\n])\n\nfor payment in payments:\n    print(payment)\n```\n\n**Note**: Instead of using DarfPayment objects, you can also pass each payment element in dictionary format\n\n## Query DARF payments\n\nTo search for DARF payments using filters, run:\n\n```python\nimport starkbank\n\npayments = starkbank.darfpayment.query(\n    tags=[\"darf\", \"july\"]\n)\n\nfor payment in payments:\n    print(payment)\n```\n\n## Get DARF payment\n\nYou can get a specific DARF payment by its id:\n\n```python\nimport starkbank\n\npayment = starkbank.darfpayment.get(\"5155165527080960\")\n\nprint(payment)\n```\n\n## Get DARF payment PDF\n\nAfter its creation, a DARF payment PDF may also be retrieved by its id. \n\n```python\nimport starkbank\n\npdf = starkbank.darfpayment.pdf(\"5155165527080960\")\n\nwith open(\"darf-payment.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n## Delete DARF payment\n\nYou can also cancel a DARF payment by its id.\nNote that this is not possible if it has been processed already.\n\n```python\nimport starkbank\n\npayment = starkbank.darfpayment.delete(\"5155165527080960\")\n\nprint(payment)\n```\n\n## Query DARF payment logs\n\nYou can search for payment logs by specifying filters. Use this to understand each payment life cycle.\n\n```python\nimport starkbank\n\nlogs = starkbank.darfpayment.log.query(limit=10)\n\nfor log in logs:\n    print(log)\n```\n\n## Get DARF payment log\n\nIf you want to get a specific payment log by its id, just run:\n\n```python\nimport starkbank\n\nlog = starkbank.darfpayment.log.get(\"1902837198237992\")\n\nprint(log)\n```\n\n## Preview payment information before executing the payment\n\nYou can preview multiple types of payment to confirm any information before actually paying.\nIf the \"scheduled\" parameter is not informed, today will be assumed as the intended payment date.\nRight now, the \"scheduled\" parameter only has effect on BrcodePreviews.\nThis resource is able to preview the following types of payment:\n\"brcode-payment\", \"boleto-payment\", \"utility-payment\" and \"tax-payment\"\n\n```python\n# coding: utf-8\nimport starkbank\nfrom datetime import date, timedelta\n\n\npreviews = starkbank.paymentpreview.create([\n    starkbank.PaymentPreview(\n        id=\"00020126580014br.gov.bcb.pix0136a629532e-7693-4846-852d-1bbff817b5a8520400005303986540510.005802BR5908T'Challa6009Sao Paulo62090505123456304B14A\",\n        scheduled=date.today() + timedelta(days=3)\n    ),\n    starkbank.PaymentPreview(\n        id=\"34191.09008 61207.727308 71444.640008 5 81310001234321\"\n    ),\n])\n\nfor preview in previews:\n    print(preview)\n    payment = preview.payment\n    if preview.type == \"brcode-payment\":\n        print(payment.status)\n```\n\n**Note**: Instead of using PaymentPreview objects, you can also pass each request element in dictionary format\n\n\n## Create payment requests to be approved by authorized people in a cost center \n\nYou can also request payments that must pass through a specific cost center approval flow to be executed.\nIn certain structures, this allows double checks for cash-outs and also gives time to load your account\nwith the required amount before the payments take place.\nThe approvals can be granted at our website and must be performed according to the rules\nspecified in the cost center.\n\n**Note**: The value of the center_id parameter can be consulted by logging into our website and going\nto the desired cost center page.\n\n```python\n# coding: utf-8\nimport starkbank\nfrom datetime import date, timedelta\n\n\nrequests = starkbank.paymentrequest.create([\n    starkbank.PaymentRequest(\n        center_id=\"5967314465849344\",\n        payment=starkbank.Transfer(\n            amount=200,\n            bank_code=\"341\",\n            branch_code=\"1234\",\n            account_number=\"123456-7\",\n            tax_id=\"012.345.678-90\",\n            name=\"Bucket Head\",\n            tags=[]\n        ),\n        due=\"2020-11-01\"\n    ),\n])\n\nfor request in requests:\n    print(request)\n```\n\n**Note**: Instead of using PaymentRequest objects, you can also pass each request element in dictionary format\n\n\n## Query payment requests\n\nTo search for payment requests, run:\n\n```python\nimport starkbank\n\nrequests = starkbank.paymentrequest.query(center_id=center_id, limit=10)\n\nfor request in requests:\n    print(request)\n```\n\n## Create a webhook subscription\n\nTo create a webhook subscription and be notified whenever an event occurs, run:\n\n```python\nimport starkbank\n\nwebhook = starkbank.webhook.create(\n    url=\"https://webhook.site/dd784f26-1d6a-4ca6-81cb-fda0267761ec\",\n    subscriptions=[\"transfer\", \"boleto\", \"boleto-payment\", \"boleto-holmes\", \"brcode-payment\", \"utility-payment\", \"deposit\", \"invoice\"],\n)\n\nprint(webhook)\n```\n\n## Query webhooks\n\nTo search for registered webhooks, run:\n\n```python\nimport starkbank\n\nwebhooks = starkbank.webhook.query()\n\nfor webhook in webhooks:\n    print(webhook)\n```\n\n## Get a webhook\n\nYou can get a specific webhook by its id.\n\n```python\nimport starkbank\n\nwebhook = starkbank.webhook.get(\"10827361982368179\")\n\nprint(webhook)\n```\n\n## Delete a webhook\n\nYou can also delete a specific webhook by its id.\n\n```python\nimport starkbank\n\nwebhook = starkbank.webhook.delete(\"10827361982368179\")\n\nprint(webhook)\n```\n\n## Process webhook events\n\nIt's easy to process events that arrived in your webhook. Remember to pass the\nsignature header so the SDK can make sure it's really StarkBank that sent you\nthe event.\n\n```python\nimport starkbank\n\nresponse = listen()  # this is the method you made to get the events posted to your webhook endpoint\n\nevent = starkbank.event.parse(\n    content=response.data.decode(\"utf-8\"),\n    signature=response.headers[\"Digital-Signature\"],\n)\n\nif event.subscription == \"transfer\":\n    print(event.log.transfer)\n    \nelif event.subscription == \"boleto\":\n    print(event.log.boleto)\n    \nelif event.subscription == \"boleto-payment\":\n    print(event.log.payment)\n\nelif event.subscription == \"boleto-holmes\":\n    print(event.log.holmes)\n\nelif event.subscription == \"brcode-payment\":\n    print(event.log.payment)\n\nelif event.subscription == \"utility-payment\":\n    print(event.log.payment)\n\nelif event.subscription == \"deposit\":\n    print(event.log.deposit)\n\nelif event.subscription == \"invoice\":\n    print(event.log.invoice)\n```\n\n## Query webhook events\n\nTo search for webhooks events, run:\n\n```python\nimport starkbank\n\nevents = starkbank.event.query(after=\"2020-03-20\", is_delivered=False)\n\nfor event in events:\n    print(event)\n```\n\n## Get a webhook event\n\nYou can get a specific webhook event by its id.\n\n```python\nimport starkbank\n\nevent = starkbank.event.get(\"10827361982368179\")\n\nprint(event)\n```\n\n## Delete a webhook event\n\nYou can also delete a specific webhook event by its id.\n\n```python\nimport starkbank\n\nevent = starkbank.event.delete(\"10827361982368179\")\n\nprint(event)\n```\n\n## Set webhook events as delivered\n\nThis can be used in case you've lost events.\nWith this function, you can manually set events retrieved from the API as\n\"delivered\" to help future event queries with `is_delivered=False`.\n\n```python\nimport starkbank\n\nevent = starkbank.event.update(id=\"129837198237192\", is_delivered=True)\n\nprint(event)\n```\n\n## Query failed webhook event delivery attempts information\n\nYou can also get information on failed webhook event delivery attempts.\n\n```python\nimport starkbank\n\nattempts = starkbank.event.attempt.query(after=\"2020-03-20\")\n\nfor attempt in attempts:\n    print(attempt.code)\n    print(attempt.message)\n```\n\n## Get a failed webhook event delivery attempt information\n\nTo retrieve information on a single attempt, use the following function:\n\n```python\nimport starkbank\n\nattempt = starkbank.event.attempt.get(\"1616161616161616\")\n\nprint(attempt)\n```\n\n## Create a new Workspace\n\nThe Organization user allows you to create new Workspaces (bank accounts) under your organization.\nWorkspaces have independent balances, statements, operations and users.\nThe only link between your Workspaces is the Organization that controls them.\n\n**Note**: This route will only work if the Organization user is used with `workspace_id=None`.\n\n```python\nimport starkbank\n\nworkspace = starkbank.workspace.create(\n    username=\"iron-bank-workspace-1\",\n    name=\"Iron Bank Workspace 1\",\n    user=organization,\n)\n\nprint(workspace)\n```\n\n## List your Workspaces\n\nThis route lists Workspaces. If no parameter is passed, all the workspaces the user has access to will be listed, but\nyou can also find other Workspaces by searching for their usernames or IDs directly.\n\n```python\nimport starkbank\n\nworkspaces = starkbank.workspace.query(limit=30)\n\nfor workspace in workspaces:\n    print(workspace)\n```\n\n## Get a Workspace\n\nYou can get a specific Workspace by its id.\n\n```python\nimport starkbank\n\nworkspace = starkbank.workspace.get(\"1082736198236817\")\n\nprint(workspace)\n```\n\n## Update a Workspace\n\nYou can update a specific Workspace by its id.\n\n```python\nimport starkbank\n\npicture = open(\"path/to/picture.png\", \"rb\").read()\n\nworkspace = starkbank.workspace.update(\n    \"1082736198236817\",\n    username=\"new-username\",\n    name=\"New Name\",\n    allowed_tax_ids=[\"012.345.678-90\"],\n    picture=picture,\n    picture_type=\"image/png\",\n    user=starkbank.Organization.replace(organization, \"1082736198236817\")\n)\n\nprint(workspace)\n```\n\nYou can also block a specific Workspace by its id.\n\n```python\nimport starkbank\n\nworkspace = starkbank.workspace.update(\n    \"1082736198236817\",\n    username=\"new-username\",\n    name=\"New Name\",\n    status=\"blocked\",\n    user=starkbank.Organization.replace(organization, \"1082736198236817\")\n)\n\nprint(workspace)\n```\n\n**Note**: the Organization user can only update a workspace with the Workspace ID set.\n\n# Handling errors\n\nThe SDK may raise one of four types of errors: __InputErrors__, __InternalServerError__, __UnknownError__, __InvalidSignatureError__\n\n__InputErrors__ will be raised whenever the API detects an error in your request (status code 400).\nIf you catch such an error, you can get its elements to verify each of the\nindividual errors that were detected in your request by the API.\nFor example:\n\n```python\nimport starkbank\n\ntry:\n    transactions = starkbank.transaction.create([\n        starkbank.Transaction(\n            amount=99999999999999,  # (R$ 999,999,999,999.99)\n            receiver_id=\"1029378109327810\",\n            description=\".\",\n            external_id=\"12345\",  # so we can block anything you send twice by mistake\n            tags=[\"provider\"]\n        ),\n    ])\nexcept starkbank.error.InputErrors as exception:\n    for error in exception.errors:\n        print(error.code)\n        print(error.message)\n```\n\n__InternalServerError__ will be raised if the API runs into an internal error.\nIf you ever stumble upon this one, rest assured that the development team\nis already rushing in to fix the mistake and get you back up to speed.\n\n__UnknownError__ will be raised if a request encounters an error that is\nneither __InputErrors__ nor an __InternalServerError__, such as connectivity problems.\n\n__InvalidSignatureError__ will be raised specifically by starkbank.event.parse()\nwhen the provided content and signature do not check out with the Stark Bank public\nkey.\n\n# Help and Feedback\n\nIf you have any questions about our SDK, just send us an email.\nWe will respond you quickly, pinky promise. We are here to help you integrate with us ASAP.\nWe also love feedback, so don't be shy about sharing your thoughts with us.\n\nEmail: help@starkbank.com\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/starkbank/sdk-python",
    "keywords": "stark bank,starkbank,sdk,open banking,openbanking,banking,open,stark",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "starkbank",
    "package_url": "https://pypi.org/project/starkbank/",
    "platform": null,
    "project_url": "https://pypi.org/project/starkbank/",
    "project_urls": {
      "Homepage": "https://github.com/starkbank/sdk-python"
    },
    "release_url": "https://pypi.org/project/starkbank/2.18.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SDK to facilitate Python integrations with Stark Bank",
    "version": "2.18.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17420629,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56724e688fcdd64f9cdad9dea12967dafb55015e0f73cb7ecd000d98f974ed3f",
          "md5": "d6d5f0c93d564f864f81cab8f01d3bdd",
          "sha256": "7d5647233257e6143af365c2c12d93a6532ec5e120484ab675194000cc4c8ea4"
        },
        "downloads": -1,
        "filename": "starkbank-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6d5f0c93d564f864f81cab8f01d3bdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29868,
        "upload_time": "2020-04-15T01:13:32",
        "upload_time_iso_8601": "2020-04-15T01:13:32.438818Z",
        "url": "https://files.pythonhosted.org/packages/56/72/4e688fcdd64f9cdad9dea12967dafb55015e0f73cb7ecd000d98f974ed3f/starkbank-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee527c3fe3f6637c9581b9609e38b665dc4d17826d15197bd3126664288f20c9",
          "md5": "db20dbcf4e3ab11c85d7b44ce3c8f3e8",
          "sha256": "d38885b949d2e5737e135d721e51caeb0de289be14971a986d95ca8450603478"
        },
        "downloads": -1,
        "filename": "starkbank-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "db20dbcf4e3ab11c85d7b44ce3c8f3e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30500,
        "upload_time": "2020-04-16T15:30:18",
        "upload_time_iso_8601": "2020-04-16T15:30:18.814505Z",
        "url": "https://files.pythonhosted.org/packages/ee/52/7c3fe3f6637c9581b9609e38b665dc4d17826d15197bd3126664288f20c9/starkbank-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54798926f2019de64d6ffdf6db3d3bfab628a109f8b38208014b21d5868d58de",
          "md5": "c3e2d84d2cc4d7668991eac4bd55b278",
          "sha256": "3b21b7aa911ca7f78adf9d7e0c2b59c2a2ab7f44a70bb62643df15197df5bc0d"
        },
        "downloads": -1,
        "filename": "starkbank-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c3e2d84d2cc4d7668991eac4bd55b278",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28018,
        "upload_time": "2020-04-16T23:34:19",
        "upload_time_iso_8601": "2020-04-16T23:34:19.478970Z",
        "url": "https://files.pythonhosted.org/packages/54/79/8926f2019de64d6ffdf6db3d3bfab628a109f8b38208014b21d5868d58de/starkbank-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9027f4eb75b561943a52dc2bc2a36758034affe9a5325678d5e3ad3d3d90da69",
          "md5": "b15a5dadcc4661ed56f12dd227aadb25",
          "sha256": "d60096f5f109286c87b4ef97665fd412a41ff9e25a429bc9ea099ebaf4df589a"
        },
        "downloads": -1,
        "filename": "starkbank-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b15a5dadcc4661ed56f12dd227aadb25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28884,
        "upload_time": "2020-04-18T00:43:50",
        "upload_time_iso_8601": "2020-04-18T00:43:50.455447Z",
        "url": "https://files.pythonhosted.org/packages/90/27/f4eb75b561943a52dc2bc2a36758034affe9a5325678d5e3ad3d3d90da69/starkbank-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7c81f6ea0f5520cd6e4fd60263fab57502076d3720419588ec5c39a7a148701",
          "md5": "a600f86fd3f72ada15f03f292a0aaeae",
          "sha256": "a112814c68e204f826ad5ca859656c3235a7a619635e6039d6657238e96de3e1"
        },
        "downloads": -1,
        "filename": "starkbank-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a600f86fd3f72ada15f03f292a0aaeae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28889,
        "upload_time": "2020-04-18T01:03:24",
        "upload_time_iso_8601": "2020-04-18T01:03:24.825801Z",
        "url": "https://files.pythonhosted.org/packages/b7/c8/1f6ea0f5520cd6e4fd60263fab57502076d3720419588ec5c39a7a148701/starkbank-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e03cf37fb60019b7f3ad50544d2049354c0667162173972959f9241139a7d4b",
          "md5": "ea47028300c0f28143ca5fdee405ea3b",
          "sha256": "6aa34856bd3be12b0345bac0b995c66f091742f6596ed019b5fad5e9cd4c0b7c"
        },
        "downloads": -1,
        "filename": "starkbank-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ea47028300c0f28143ca5fdee405ea3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28899,
        "upload_time": "2020-04-18T18:57:18",
        "upload_time_iso_8601": "2020-04-18T18:57:18.705000Z",
        "url": "https://files.pythonhosted.org/packages/7e/03/cf37fb60019b7f3ad50544d2049354c0667162173972959f9241139a7d4b/starkbank-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01b5639d024022de7c881b4f79624f49bfaabb209deb09961e1b0e54c6dd2628",
          "md5": "1829a45d9832947cecbe2b007ab5c1f5",
          "sha256": "2adc7cd888198ab4ca5b0df9578fc5358e7161cb3da6d8acb55f733653d82abc"
        },
        "downloads": -1,
        "filename": "starkbank-0.1.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "1829a45d9832947cecbe2b007ab5c1f5",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 52569,
        "upload_time": "2020-04-19T02:17:53",
        "upload_time_iso_8601": "2020-04-19T02:17:53.356170Z",
        "url": "https://files.pythonhosted.org/packages/01/b5/639d024022de7c881b4f79624f49bfaabb209deb09961e1b0e54c6dd2628/starkbank-0.1.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bce2c514ec99671812b6b6919d0e1f7349bb920f8f9cf8700f55f6bbdcac301c",
          "md5": "9d81ce0862bc57c122a0126cf17902bf",
          "sha256": "5a26581d98f3261cc110e39a4a048ee0989b7122ee1ba477e8099f1bf566e850"
        },
        "downloads": -1,
        "filename": "starkbank-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d81ce0862bc57c122a0126cf17902bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 52569,
        "upload_time": "2020-04-19T02:17:55",
        "upload_time_iso_8601": "2020-04-19T02:17:55.945117Z",
        "url": "https://files.pythonhosted.org/packages/bc/e2/c514ec99671812b6b6919d0e1f7349bb920f8f9cf8700f55f6bbdcac301c/starkbank-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5465d27a1506915ad658999ec64f992b4da26a6b056d343f98d25cf863d86822",
          "md5": "e3cd0d80368bbf208899d62b515795cb",
          "sha256": "4dcc79f3e9e3eed65e2052be14c33943e07762ba66f1db4d5c4292160c4a109b"
        },
        "downloads": -1,
        "filename": "starkbank-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e3cd0d80368bbf208899d62b515795cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28896,
        "upload_time": "2020-04-18T19:05:11",
        "upload_time_iso_8601": "2020-04-18T19:05:11.001374Z",
        "url": "https://files.pythonhosted.org/packages/54/65/d27a1506915ad658999ec64f992b4da26a6b056d343f98d25cf863d86822/starkbank-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef02a0ef8325ea34f91775fc6926a2a7112d6b6d130c2856470ec7a4315fbf84",
          "md5": "18f1e36f8876691f968f6b9a745dad60",
          "sha256": "f2df105aba478e6c1b4ce1f6322c6f659700dfef717eb72bfe5edf5ad1eb4047"
        },
        "downloads": -1,
        "filename": "starkbank-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "18f1e36f8876691f968f6b9a745dad60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28575,
        "upload_time": "2020-05-04T16:22:11",
        "upload_time_iso_8601": "2020-05-04T16:22:11.540902Z",
        "url": "https://files.pythonhosted.org/packages/ef/02/a0ef8325ea34f91775fc6926a2a7112d6b6d130c2856470ec7a4315fbf84/starkbank-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f34958da6cd67628c0f8c449b8b4fe3d297fea36f4a01f21d8c686775a0c45b",
          "md5": "53d7f658464024fce56ce176dfa1aad4",
          "sha256": "36286e7ede01e76579b3ea8410d1a63d94a95932466f19eb776d26273484670d"
        },
        "downloads": -1,
        "filename": "starkbank-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "53d7f658464024fce56ce176dfa1aad4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28678,
        "upload_time": "2020-05-13T01:47:46",
        "upload_time_iso_8601": "2020-05-13T01:47:46.340737Z",
        "url": "https://files.pythonhosted.org/packages/5f/34/958da6cd67628c0f8c449b8b4fe3d297fea36f4a01f21d8c686775a0c45b/starkbank-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daf3850483befebb138e3a990ebec293183c770763011200d8b705176961f325",
          "md5": "34e9ad1009bb37265ebe90dc975b1f25",
          "sha256": "201ad0cec2bd9772492b97dfcc774ee00e482ef4e3b45480ecfa6fe9abb9dde2"
        },
        "downloads": -1,
        "filename": "starkbank-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34e9ad1009bb37265ebe90dc975b1f25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31175,
        "upload_time": "2020-06-03T21:50:06",
        "upload_time_iso_8601": "2020-06-03T21:50:06.746353Z",
        "url": "https://files.pythonhosted.org/packages/da/f3/850483befebb138e3a990ebec293183c770763011200d8b705176961f325/starkbank-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40090f3479a6181706657b7a8b5759c5200dc94410c5b51480265b32206e81ef",
          "md5": "10ff297bcfad8ac51a08b3b7aa45c4f5",
          "sha256": "8e7925e173fa34beed988481e21d8ac56d85c106e131923208889fe2e87558c4"
        },
        "downloads": -1,
        "filename": "starkbank-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10ff297bcfad8ac51a08b3b7aa45c4f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31291,
        "upload_time": "2020-08-11T12:17:36",
        "upload_time_iso_8601": "2020-08-11T12:17:36.439684Z",
        "url": "https://files.pythonhosted.org/packages/40/09/0f3479a6181706657b7a8b5759c5200dc94410c5b51480265b32206e81ef/starkbank-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7625b2f06c36f9a197a8fb63d3556098a887a33094d6c684515657c09c3e7910",
          "md5": "5f33672b8ff8a5d0c40e041cfb726e75",
          "sha256": "b8b5aaa3f066377cf83da2bbe0b7917e5abcd9cad783c6b3c68f8125477b8880"
        },
        "downloads": -1,
        "filename": "starkbank-0.5.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "5f33672b8ff8a5d0c40e041cfb726e75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33509,
        "upload_time": "2020-06-25T19:05:16",
        "upload_time_iso_8601": "2020-06-25T19:05:16.658650Z",
        "url": "https://files.pythonhosted.org/packages/76/25/b2f06c36f9a197a8fb63d3556098a887a33094d6c684515657c09c3e7910/starkbank-0.5.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a405a3c4faec89bba9ab32a04aa8810c5060588c47d6bb220789eee61a7e4694",
          "md5": "352bf570a903cc2bc92307cab36da4b5",
          "sha256": "ad4bf872277d2dc5aeaa5c55d285e8630c7a6d877818c6b18108ea5eb133567b"
        },
        "downloads": -1,
        "filename": "starkbank-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "352bf570a903cc2bc92307cab36da4b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31651,
        "upload_time": "2020-09-29T18:36:38",
        "upload_time_iso_8601": "2020-09-29T18:36:38.006786Z",
        "url": "https://files.pythonhosted.org/packages/a4/05/a3c4faec89bba9ab32a04aa8810c5060588c47d6bb220789eee61a7e4694/starkbank-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44fffe1781fb0e1e09085db0b8ad7c2713c2e9972eda34f0abf6842b80daf008",
          "md5": "a31d2073fcbe5620f55364f5d1f168e3",
          "sha256": "329e43756d3d1f7c216ed5b9314153765a078d8a5893aa28d09ef3384f1adf2b"
        },
        "downloads": -1,
        "filename": "starkbank-0.7.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "a31d2073fcbe5620f55364f5d1f168e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34173,
        "upload_time": "2020-09-29T21:32:16",
        "upload_time_iso_8601": "2020-09-29T21:32:16.032197Z",
        "url": "https://files.pythonhosted.org/packages/44/ff/fe1781fb0e1e09085db0b8ad7c2713c2e9972eda34f0abf6842b80daf008/starkbank-0.7.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80fa554d21e5725e3fcca64e0d962cbc984b2df34ed3cd6b708fd8a0a7af1b44",
          "md5": "94832835b53a45d479fe1503b97c38d2",
          "sha256": "10ad6c585e4364223b9f2669d30152f89ca75816733847b366856402ba5783e7"
        },
        "downloads": -1,
        "filename": "starkbank-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "94832835b53a45d479fe1503b97c38d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34260,
        "upload_time": "2020-10-15T22:32:10",
        "upload_time_iso_8601": "2020-10-15T22:32:10.408517Z",
        "url": "https://files.pythonhosted.org/packages/80/fa/554d21e5725e3fcca64e0d962cbc984b2df34ed3cd6b708fd8a0a7af1b44/starkbank-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5d87a7687b29255dacba1219e919dc808363e446023ab314789328276bc73df",
          "md5": "bb43bded67a63d82bbc56150b24e1cc1",
          "sha256": "2dda59b0b0289d8e284918f3bbb81c8159c257f2694a4d87d640172348a49fce"
        },
        "downloads": -1,
        "filename": "starkbank-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bb43bded67a63d82bbc56150b24e1cc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37018,
        "upload_time": "2020-10-28T01:11:48",
        "upload_time_iso_8601": "2020-10-28T01:11:48.399858Z",
        "url": "https://files.pythonhosted.org/packages/d5/d8/7a7687b29255dacba1219e919dc808363e446023ab314789328276bc73df/starkbank-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "217c5c2faf550f4b919c15b8d643c6a12cc0ea5c43e6f7216fb55ebd29858647",
          "md5": "60f872d47ae0dbbeea4288ac79ff7951",
          "sha256": "b8bb796833f62357efc01503319737d8b26c5010910584952e2ee3da75cf0bcc"
        },
        "downloads": -1,
        "filename": "starkbank-2.1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "60f872d47ae0dbbeea4288ac79ff7951",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38748,
        "upload_time": "2020-10-26T20:11:52",
        "upload_time_iso_8601": "2020-10-26T20:11:52.559201Z",
        "url": "https://files.pythonhosted.org/packages/21/7c/5c2faf550f4b919c15b8d643c6a12cc0ea5c43e6f7216fb55ebd29858647/starkbank-2.1.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48b108d5c916d64a7fc02055ddcf2d1cfc98029eafabb3cfaf223a320af71007",
          "md5": "b86332951c6cc8d0330b38dc817c9d3f",
          "sha256": "5292f7047d5903411ef2f9c32b3f15b0331ab6b661c695c346b78d4500acfdda"
        },
        "downloads": -1,
        "filename": "starkbank-2.1.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "b86332951c6cc8d0330b38dc817c9d3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38772,
        "upload_time": "2020-10-26T20:39:30",
        "upload_time_iso_8601": "2020-10-26T20:39:30.251270Z",
        "url": "https://files.pythonhosted.org/packages/48/b1/08d5c916d64a7fc02055ddcf2d1cfc98029eafabb3cfaf223a320af71007/starkbank-2.1.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dcb3bcaa8dda3be9be004ef10f373c7556f73dea6c399e4e679860b4d16ae59",
          "md5": "9c896ac4abea9210639d96d10352e5f8",
          "sha256": "d9ee34a06234663dbf86aa7049009a4cd7c0479f4cdd3ba1dd971b0fe51c6be7"
        },
        "downloads": -1,
        "filename": "starkbank-2.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9c896ac4abea9210639d96d10352e5f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61194,
        "upload_time": "2021-06-01T15:29:30",
        "upload_time_iso_8601": "2021-06-01T15:29:30.268071Z",
        "url": "https://files.pythonhosted.org/packages/0d/cb/3bcaa8dda3be9be004ef10f373c7556f73dea6c399e4e679860b4d16ae59/starkbank-2.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2331ca995ad462fccd12ec5085bceacd42ddcde4e34a40b7b42a64a2f12d580",
          "md5": "08caa17cd675022e15fe9048ddd9f5af",
          "sha256": "c5a7a2ee9a5f1d4a15934253b2c2f040abc95cc108ecd9b76b2d66f21a732b2f"
        },
        "downloads": -1,
        "filename": "starkbank-2.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "08caa17cd675022e15fe9048ddd9f5af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61206,
        "upload_time": "2021-06-07T14:56:56",
        "upload_time_iso_8601": "2021-06-07T14:56:56.748277Z",
        "url": "https://files.pythonhosted.org/packages/f2/33/1ca995ad462fccd12ec5085bceacd42ddcde4e34a40b7b42a64a2f12d580/starkbank-2.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f74ff75c5e435787ea4e750c3a8042ecd1788380ea6d292acb8352876e1b62a",
          "md5": "f108f4702ee94025e91b0e6069bea6b4",
          "sha256": "9805e33396c689e601881a4afa4a9cde2870c2f7a2e54c7eaaa7bf8757520c52"
        },
        "downloads": -1,
        "filename": "starkbank-2.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f108f4702ee94025e91b0e6069bea6b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62153,
        "upload_time": "2021-07-12T14:33:09",
        "upload_time_iso_8601": "2021-07-12T14:33:09.543766Z",
        "url": "https://files.pythonhosted.org/packages/6f/74/ff75c5e435787ea4e750c3a8042ecd1788380ea6d292acb8352876e1b62a/starkbank-2.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7de8ec92f31c7a3741a7f4685a90517760858cb88d4e2ce932edb5bcd611862e",
          "md5": "07d54d99caa1be03304256e317b5cf9c",
          "sha256": "7f18314c7539695e89f18aa1cb7f5c16593a3210f657a9072ccd84ff5df924e6"
        },
        "downloads": -1,
        "filename": "starkbank-2.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "07d54d99caa1be03304256e317b5cf9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64665,
        "upload_time": "2021-07-30T17:03:46",
        "upload_time_iso_8601": "2021-07-30T17:03:46.932432Z",
        "url": "https://files.pythonhosted.org/packages/7d/e8/ec92f31c7a3741a7f4685a90517760858cb88d4e2ce932edb5bcd611862e/starkbank-2.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.13.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77e21b665504ab29979720d189500ac2d37012e642ab1b7e2efe24547498e81e",
          "md5": "f755255a6e79f101e41df386037d234e",
          "sha256": "93c6cadee6afb96724db154e451d35adb7f770a9b3a9191420b7911f4be74782"
        },
        "downloads": -1,
        "filename": "starkbank-2.13.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f755255a6e79f101e41df386037d234e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69547,
        "upload_time": "2021-08-13T16:33:45",
        "upload_time_iso_8601": "2021-08-13T16:33:45.200850Z",
        "url": "https://files.pythonhosted.org/packages/77/e2/1b665504ab29979720d189500ac2d37012e642ab1b7e2efe24547498e81e/starkbank-2.13.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.13.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb710b696c80dfe2a5dc2cae6d5fb6a5b701d85a9faca10ecb31be3e45798230",
          "md5": "fa82e17fb94c32345380d61374a46699",
          "sha256": "1f27a7935279681a90bebb4174b113408b54624633c58264783afb3442140cac"
        },
        "downloads": -1,
        "filename": "starkbank-2.13.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fa82e17fb94c32345380d61374a46699",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65626,
        "upload_time": "2021-11-05T01:27:55",
        "upload_time_iso_8601": "2021-11-05T01:27:55.841855Z",
        "url": "https://files.pythonhosted.org/packages/bb/71/0b696c80dfe2a5dc2cae6d5fb6a5b701d85a9faca10ecb31be3e45798230/starkbank-2.13.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.13.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c57d5f3713b97abe4e1115d89eaccc08a3061cd51da9a6521e772d25af235565",
          "md5": "b5df621b9ed6a65974db53264c869564",
          "sha256": "535f54daa15bb3ed177911b147cdb50d98fab240674e4ab53017dbe7a6b480a1"
        },
        "downloads": -1,
        "filename": "starkbank-2.13.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b5df621b9ed6a65974db53264c869564",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65589,
        "upload_time": "2021-11-10T23:31:40",
        "upload_time_iso_8601": "2021-11-10T23:31:40.397229Z",
        "url": "https://files.pythonhosted.org/packages/c5/7d/5f3713b97abe4e1115d89eaccc08a3061cd51da9a6521e772d25af235565/starkbank-2.13.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.14.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5eeb6158b511020f72d966b1a4a4200c6e205a9d44f03ea4718ddb75814c3a1e",
          "md5": "5981c71edc3d6a287566f7c830b47134",
          "sha256": "6591ccac14904cad266e2d4189b568824fff78013d2dc6f9279174e61f565561"
        },
        "downloads": -1,
        "filename": "starkbank-2.14.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5981c71edc3d6a287566f7c830b47134",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65646,
        "upload_time": "2021-11-12T15:53:27",
        "upload_time_iso_8601": "2021-11-12T15:53:27.012583Z",
        "url": "https://files.pythonhosted.org/packages/5e/eb/6158b511020f72d966b1a4a4200c6e205a9d44f03ea4718ddb75814c3a1e/starkbank-2.14.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.14.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f4e1d9972d445f7fbbbf28660539836dd2c1e88cd44bcd0735ac5a753027fc1",
          "md5": "0f73f451034ebce2849dac8f49d8e433",
          "sha256": "b108a7224149202f9bc5883e44883a9a9ecb862db72022bdd67ba429aa99cc84"
        },
        "downloads": -1,
        "filename": "starkbank-2.14.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0f73f451034ebce2849dac8f49d8e433",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65671,
        "upload_time": "2021-11-12T21:12:02",
        "upload_time_iso_8601": "2021-11-12T21:12:02.242213Z",
        "url": "https://files.pythonhosted.org/packages/4f/4e/1d9972d445f7fbbbf28660539836dd2c1e88cd44bcd0735ac5a753027fc1/starkbank-2.14.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.15.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4809f7f4ba191df5a349fce0b891dfa1c7aef58018f564374a2e5d97a50804a6",
          "md5": "1af0772f2ec1747d79f903bd692c74b4",
          "sha256": "0dda0f46e51ab902988366917ce539015698f3e83ccc83eaad99d9da83c11b37"
        },
        "downloads": -1,
        "filename": "starkbank-2.15.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1af0772f2ec1747d79f903bd692c74b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 68341,
        "upload_time": "2021-11-29T19:12:51",
        "upload_time_iso_8601": "2021-11-29T19:12:51.565001Z",
        "url": "https://files.pythonhosted.org/packages/48/09/f7f4ba191df5a349fce0b891dfa1c7aef58018f564374a2e5d97a50804a6/starkbank-2.15.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.16.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70cedecff402152805ee659b9d9a8e2f8d3985afd5019b848f34d8eb157ed9f5",
          "md5": "f87fa1c86e223fb999c1bff2886b7992",
          "sha256": "f92a5a3c2b4d85c1f3984e340fc5b33f8316a22c195d6d8a5d05bec2e2b9925b"
        },
        "downloads": -1,
        "filename": "starkbank-2.16.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f87fa1c86e223fb999c1bff2886b7992",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 67848,
        "upload_time": "2023-01-04T16:37:54",
        "upload_time_iso_8601": "2023-01-04T16:37:54.822135Z",
        "url": "https://files.pythonhosted.org/packages/70/ce/decff402152805ee659b9d9a8e2f8d3985afd5019b848f34d8eb157ed9f5/starkbank-2.16.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.17.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7fdc62ae9c32cb46724827ffd76d1b0397595073afce7c5d51279e71236b232",
          "md5": "20dc5063a9d957540a35ccb05e98f0d0",
          "sha256": "c21181dce3e8a2037bacd70d8c26cf3b818369ebb3eb2111141c763af17cc92c"
        },
        "downloads": -1,
        "filename": "starkbank-2.17.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20dc5063a9d957540a35ccb05e98f0d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70574,
        "upload_time": "2023-01-16T14:35:52",
        "upload_time_iso_8601": "2023-01-16T14:35:52.937903Z",
        "url": "https://files.pythonhosted.org/packages/e7/fd/c62ae9c32cb46724827ffd76d1b0397595073afce7c5d51279e71236b232/starkbank-2.17.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.18.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97eeaa5e68e399079f1d6a848a35f5bae599ed7900283db70205b9335db57fc1",
          "md5": "b17fffca92526ebe83efb49f90d61957",
          "sha256": "eb8c0d6113eb7189e4e86dc16e2a6f4aeca25e0a3b1d8168bc562325b07fca83"
        },
        "downloads": -1,
        "filename": "starkbank-2.18.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b17fffca92526ebe83efb49f90d61957",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69873,
        "upload_time": "2023-03-22T17:16:05",
        "upload_time_iso_8601": "2023-03-22T17:16:05.750017Z",
        "url": "https://files.pythonhosted.org/packages/97/ee/aa5e68e399079f1d6a848a35f5bae599ed7900283db70205b9335db57fc1/starkbank-2.18.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.18.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02bf88a6dcc130dcede6237b0783c406fee65ff14c72cd9e4d82157d83695f75",
          "md5": "5fd2b41d511007c95faea2127d166484",
          "sha256": "3b5e34b7a774fcc47598233d1aa03951580c180fee9fb72f6717bf6ce30fa893"
        },
        "downloads": -1,
        "filename": "starkbank-2.18.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5fd2b41d511007c95faea2127d166484",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69781,
        "upload_time": "2023-03-23T19:23:31",
        "upload_time_iso_8601": "2023-03-23T19:23:31.166512Z",
        "url": "https://files.pythonhosted.org/packages/02/bf/88a6dcc130dcede6237b0783c406fee65ff14c72cd9e4d82157d83695f75/starkbank-2.18.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4f3910e36a12251ec2c315715fa30073e8cdbc68a1845dd43339bf650381888",
          "md5": "cb01fcc11262a8e57547253903f86408",
          "sha256": "06583d0af29fd9bf8351c8e119ffb8f0013386e09449a57161d459b95e4205bc"
        },
        "downloads": -1,
        "filename": "starkbank-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cb01fcc11262a8e57547253903f86408",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46898,
        "upload_time": "2020-11-16T20:02:57",
        "upload_time_iso_8601": "2020-11-16T20:02:57.571204Z",
        "url": "https://files.pythonhosted.org/packages/d4/f3/910e36a12251ec2c315715fa30073e8cdbc68a1845dd43339bf650381888/starkbank-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2b378aacf05b751604b792a232df64106de766c7c24023ce6091695f67cc446",
          "md5": "30a3b7404131ee85ab9ea9e86cd73b9e",
          "sha256": "be99b90d41e05e805feac8b447d7551c7e51b9694e6bf657c2eba80ece3bd6f0"
        },
        "downloads": -1,
        "filename": "starkbank-2.2.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "30a3b7404131ee85ab9ea9e86cd73b9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40757,
        "upload_time": "2020-10-28T01:14:06",
        "upload_time_iso_8601": "2020-10-28T01:14:06.624898Z",
        "url": "https://files.pythonhosted.org/packages/c2/b3/78aacf05b751604b792a232df64106de766c7c24023ce6091695f67cc446/starkbank-2.2.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d67bc6118d405f36790fcfad0d717a16be153f609aabd93981672fe74ae6e1b9",
          "md5": "ac9c1dc9a62ec716ca319ae8f18aac1e",
          "sha256": "550405fe77da3e94d942b3191e058567a2dcc7e0232a6f9cec9d9f41c583f869"
        },
        "downloads": -1,
        "filename": "starkbank-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac9c1dc9a62ec716ca319ae8f18aac1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47034,
        "upload_time": "2020-11-23T15:48:31",
        "upload_time_iso_8601": "2020-11-23T15:48:31.342575Z",
        "url": "https://files.pythonhosted.org/packages/d6/7b/c6118d405f36790fcfad0d717a16be153f609aabd93981672fe74ae6e1b9/starkbank-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d04aad5872341ab038ba654bd82ab57f6c4e5b6d05f82fbc1a7ebcaf78bb8188",
          "md5": "6d6a8da6621c9a95874a8915736dbabb",
          "sha256": "725bbf5ab80b513969f34036f2afa49ab8af6a34b885c6642ba97060c5330110"
        },
        "downloads": -1,
        "filename": "starkbank-2.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6d6a8da6621c9a95874a8915736dbabb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47051,
        "upload_time": "2020-11-24T21:06:52",
        "upload_time_iso_8601": "2020-11-24T21:06:52.052303Z",
        "url": "https://files.pythonhosted.org/packages/d0/4a/ad5872341ab038ba654bd82ab57f6c4e5b6d05f82fbc1a7ebcaf78bb8188/starkbank-2.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b853354c194482cf8b16228f72b0fb25b87ed5990ebe7bfaa6ff4b831f617ca",
          "md5": "2fe8912665feab674107b6d7b46446e7",
          "sha256": "7c14fb6297d987b68d203ac472bbcfd87ba57a58158cfb981911f5bba5e6a04e"
        },
        "downloads": -1,
        "filename": "starkbank-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2fe8912665feab674107b6d7b46446e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51246,
        "upload_time": "2021-01-15T00:39:21",
        "upload_time_iso_8601": "2021-01-15T00:39:21.443996Z",
        "url": "https://files.pythonhosted.org/packages/6b/85/3354c194482cf8b16228f72b0fb25b87ed5990ebe7bfaa6ff4b831f617ca/starkbank-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab8f159cb408db3a8dcb3b9fa5ec7716d8bf8a595cfb13b8160232a940c911df",
          "md5": "53c1ab3cee41587794ee8429d849335d",
          "sha256": "66ff44b7e75b98d9bb92d1a5cc6c0dc6520532690e2cb49a8a685176039ff619"
        },
        "downloads": -1,
        "filename": "starkbank-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "53c1ab3cee41587794ee8429d849335d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51511,
        "upload_time": "2021-01-21T17:06:10",
        "upload_time_iso_8601": "2021-01-21T17:06:10.630224Z",
        "url": "https://files.pythonhosted.org/packages/ab/8f/159cb408db3a8dcb3b9fa5ec7716d8bf8a595cfb13b8160232a940c911df/starkbank-2.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03d3a6fefe92ff12e50643ddec34497683f3e52de72243e8d8c3ddd336434465",
          "md5": "34dd84c9e903eb1c502917c6a7b69063",
          "sha256": "7caff10cdd1752ecd106e79ebdff1d1b6ee62fdcb76d8b9789c9364611ce4975"
        },
        "downloads": -1,
        "filename": "starkbank-2.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34dd84c9e903eb1c502917c6a7b69063",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52441,
        "upload_time": "2021-02-01T15:48:11",
        "upload_time_iso_8601": "2021-02-01T15:48:11.244765Z",
        "url": "https://files.pythonhosted.org/packages/03/d3/a6fefe92ff12e50643ddec34497683f3e52de72243e8d8c3ddd336434465/starkbank-2.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2def951f2ea7e067763377d9cde79911cbd5e11f4520b2311acba35c525dfc2f",
          "md5": "a5b87deb1801f6391c14c443bfdd1c20",
          "sha256": "c4b895f040de8e4c9b7a55e3d0bdcce164a62a653268ec39fb29586dc2c274c3"
        },
        "downloads": -1,
        "filename": "starkbank-2.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5b87deb1801f6391c14c443bfdd1c20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55278,
        "upload_time": "2021-02-03T14:52:03",
        "upload_time_iso_8601": "2021-02-03T14:52:03.829554Z",
        "url": "https://files.pythonhosted.org/packages/2d/ef/951f2ea7e067763377d9cde79911cbd5e11f4520b2311acba35c525dfc2f/starkbank-2.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "694cae73f569fbbdf72687166e9fb25a829f662b9962185c3b691343991b70aa",
          "md5": "58e3dc2527dc89279313786fa6ce4f90",
          "sha256": "456f3ad39c5ecc644636f9bcf6d25d053787e48b84048873270ec62f34adb61c"
        },
        "downloads": -1,
        "filename": "starkbank-2.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "58e3dc2527dc89279313786fa6ce4f90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55396,
        "upload_time": "2021-02-04T17:57:55",
        "upload_time_iso_8601": "2021-02-04T17:57:55.568245Z",
        "url": "https://files.pythonhosted.org/packages/69/4c/ae73f569fbbdf72687166e9fb25a829f662b9962185c3b691343991b70aa/starkbank-2.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8db10f511fa5f06b7083ff05b3bcf23a2ac2f7ae3da66fb09b415113f86e0ad2",
          "md5": "5a7e804d8ec75eaf3cf9b32263ab12fd",
          "sha256": "e86434379ec5863f406912d477995b6d74d193b4433a7c7cf66c678bca547b5a"
        },
        "downloads": -1,
        "filename": "starkbank-2.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5a7e804d8ec75eaf3cf9b32263ab12fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55690,
        "upload_time": "2021-02-26T13:45:01",
        "upload_time_iso_8601": "2021-02-26T13:45:01.098241Z",
        "url": "https://files.pythonhosted.org/packages/8d/b1/0f511fa5f06b7083ff05b3bcf23a2ac2f7ae3da66fb09b415113f86e0ad2/starkbank-2.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97754c05ac3ee0878c701d59cfc743eb6852659507ae59a1f134a9055ed81a4c",
          "md5": "11ad5c15667dace23a9576ecddb7c54b",
          "sha256": "b03f438af38505981f057452e5cdde821c5fae0a0b8e34aeae52f2823af1f240"
        },
        "downloads": -1,
        "filename": "starkbank-2.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "11ad5c15667dace23a9576ecddb7c54b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55897,
        "upload_time": "2021-03-09T14:49:38",
        "upload_time_iso_8601": "2021-03-09T14:49:38.210936Z",
        "url": "https://files.pythonhosted.org/packages/97/75/4c05ac3ee0878c701d59cfc743eb6852659507ae59a1f134a9055ed81a4c/starkbank-2.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a271b10d9bb56a7439d8d5e2d92270ab4840691d6b3af297bc37bbbdaa934c05",
          "md5": "938388804e8982fdef3d1bb7c6551385",
          "sha256": "3f1e3a81c81ed16ba9b1fae6278ff06fec5d9378b80d2f88f37835c271e89b9f"
        },
        "downloads": -1,
        "filename": "starkbank-2.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "938388804e8982fdef3d1bb7c6551385",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56935,
        "upload_time": "2021-03-22T17:49:54",
        "upload_time_iso_8601": "2021-03-22T17:49:54.222170Z",
        "url": "https://files.pythonhosted.org/packages/a2/71/b10d9bb56a7439d8d5e2d92270ab4840691d6b3af297bc37bbbdaa934c05/starkbank-2.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02bf88a6dcc130dcede6237b0783c406fee65ff14c72cd9e4d82157d83695f75",
        "md5": "5fd2b41d511007c95faea2127d166484",
        "sha256": "3b5e34b7a774fcc47598233d1aa03951580c180fee9fb72f6717bf6ce30fa893"
      },
      "downloads": -1,
      "filename": "starkbank-2.18.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5fd2b41d511007c95faea2127d166484",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 69781,
      "upload_time": "2023-03-23T19:23:31",
      "upload_time_iso_8601": "2023-03-23T19:23:31.166512Z",
      "url": "https://files.pythonhosted.org/packages/02/bf/88a6dcc130dcede6237b0783c406fee65ff14c72cd9e4d82157d83695f75/starkbank-2.18.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}