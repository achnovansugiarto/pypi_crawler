{
  "info": {
    "author": "Jure Jancigaj",
    "author_email": "falcon2k16@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "This is a package implementing Visionect Software Suite API in Python (3.5.1+ supported).\n\nCheck [VSS API documentation](https://api.visionect.com/) for more info.\n\nAPI endpoints and responses are subject to change, so make sure to follow [release notes.](http://docs.visionect.com/ReleaseNotes/VisionectSoftwareSuite.html)\n\n----\n\n### Installation\n\n```bash\npip install vssapi\n```\n### Use\n\n```python\nfrom vss import ApiDeclarations\nvss_api_instance = ApiDeclarations(url, key, secret)\nstatus_code, response (optional) = vss_api_instance.{function(params)}\n```\n\n#### change an app on device\n\n```python\nstatus, content = vss_api_instance.get_session(uuid)\ncontent['Backend']['Fields']['url'] = \"you_app.url\"\nvss_api_instance.update_session(uuid, cont)\n```\n\n#### change default app\n\n```python\nstatus, content = vss_api_instance.get_config()\ncontent['Engine']['Backend']['HTML']['DefaultFields']['url'] = \"you_app.url\"\nvss_api_instance.update_config(cont)\n```\n\n----\n\n### Function list\n\n#### Device\n\n##### retrieve a device\n\n`get_device(uuid)`\n\n - params: uuid *string*\n - returns: status code *int*, response *json*\n\n##### update a device\n\n`update_device(uuid, device_object)`\n\n - params: uuid *string*, device_object *json*\n - returns: status code *int*\n\n##### delete a device\n\n`delete_device(uuid)`\n\n - params: uuid *string*\n - returns: status code *int*, response *json*\n\n----\n\n#### Device collection\n\n##### list all devices\n\n`get_all_devices()`\n\n - params: /\n - returns: status code *int*, response *json*\n\n##### update a list of devices\n\n`update_all_devices(device_object_list)`\n\n - params: device_object_list *json list*\n    - example: `device_object_list = [device_object1, device_object2, ... device_objectN]`\n - returns: status code *int*\n\n----\n\n#### Device configuration\n\n##### get configuration list\n\n`get_device_config_list(uuid)`\n\n - params: uuid *string*\n - returns: status code *int*, response *json*\n\n##### get configuration\n\n`get_device_config(uuid, tclv_type)`\n\n - params: uuid *string*, tclv_type *int*\n - returns: status code *int*, response *json*\n\n##### set configuration\n\n`update_device_config(uuid, tclv_type, value)`\n\n - params: uuid *string*, tclv_type *int*, value *int*\n - returns: status code *int*\n\n----\n\n#### Reboot\n\n##### reboot device\n\n`reboot_device(uuid)`\n\n - params: uuid *string*\n - returns: status code *int*\n\n##### reboot a list of devices\n\n`reboot_device_list(uuid_list)`\n\n - params: uuid_list *list*\n      - example: `uuid_list = [uuid1, uuid2, ... uuidN]`\n  - returns: status code *int*\n\n----\n\n#### Sessions\n\n##### retrieve a session\n\n`get_session(uuid)`\n\n - params: uuid *string*\n - returns: status code *int*, response *json*\n\n##### update a session\n\n`update_session(uuid, session_object)`\n\n - params: uuid *string*, session_object *json*\n - returns: status_code *int*\n\n##### remove a session\n\n `delete_session(uuid)`\n\n - params: uuid *string*\n - returns: status_code *int*\n\n----\n\n#### Session collection\n\n##### list all sessions\n\n `get_session_list()`\n\n - returns: status_code *int*, response *json*\n\n##### create a session\n\n `create_session(session_object)`\n\n - params: session_object *json*\n    - example:\n        ```python\n        session_object = {\n            \"Uuid\": {uuid},\n            \"Backend\": {\n                \"Name\": \"HTML\",\n                \"Fields\": {\n                    \"url\": \"http://demo.visionect.com/clock/?t=602\"\n                }\n            },\n            \"Options\": {\n                \"DefaultDithering\": \"none\",\n                \"DefaultEncoding\": \"4\"\n            }\n        }\n        ```\n - returns: status_code *int*\n\n##### update a list of sessions\n\n `update_session_list(sessions_object)`\n\n - params: sessions_object *json list*\n    - example: `sessions_object = [session_object1, session_object2, ...  session_objectN]`\n - returns: status_code *int*\n\n----\n\n#### Restart\n\n##### restart a session\n\n `restart_session(uuid)`\n\n - params: uuid *string*\n - returns: status_code *int*\n\n##### restart a list of sessions\n\n `restart_session_list(uuid_list)`\n\n - params: uuid_list *string list*\n    - example: `[uuid1, uuid2, ... uuidN]`\n - returns: status_code *int*\n\n----\n\n#### User\n\n##### retrieve a user\n\n `get_user(username)`\n\n - params: username *string*\n - returns: status_code *int*, response *json*\n\n##### update a user\n\n `update_user(username, user_object)`\n\n - params: username *string*, user_object *json*\n    - example:\n    ```python\n    {\n        \"Username\": {username},\n        \"Password\": {password},\n        \"IsActive\": true,\n        \"IsAPI\": false\n    }\n    ```\n - returns: status_code *int*\n\n##### delete a user\n\n `delete_user(username)`\n\n - params: username *string*\n - returns: status_code *int*\n\n----\n\n#### User list\n\n##### list all users\n\n `get_user_list()`\n\n - returns: status_code *int*, response *json*\n\n#### create a user\n\n `create_user(username, password)`\n\n - params: username *string*, password *string*\n - returns: status_code *int*\n\n#### update a list of users\n\n `update_user_list(user_list_object)`\n\n - params: user_list_object *json list*\n    - example: `user_list_object = [user_object1, user_object2, ... user_objectN]`\n - returns: status_code *int*\n\n----\n\n#### Config\n\n##### retrieve configuration\n\n `get_config()`\n\n - returns: status_code *int*, response *json*\n\n#### update configuration\n\n `update_config(config_object)`\n\n - params: config_object *json*\n - returns: status_code *int*\n\n----\n\n#### Live view\n\n `get_live_view(uuid, type, file_lv)`\n\n - params: uuid *string*, type *string*, file_lv *string*\n    - example: `get_live_view({uuid}, 'image', '.png')`\n - returns: status_code *int*\n\n----\n\n#### Status\n\n `get_status()`\n\n - returns: status_code *int*, response *json*\n\n----\n\n#### Device status\n\n `get_device_status(uuid, start, end, group)`\n\n - params: uuid *string*, start *string*, end *string*, group *string*\n    - example: `get_device_status(uuid, '1515153600', '1515412800', 'true')`\n - returns: status_code *int*, response *json*\n\n----\n\n#### HTTP Backend\n\nUpload an image to the device via HTTP backend. Make sure device's backend is set to the HTTP.\n\n `set_http(uuid, img)`\n\n - params: uuid *string*, img *file*\n    - example:\n    ```python\n        img = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'img.png')\n        fr = {'image': ('img.png', open(img, 'rb'), 'image/png', {'Expires': '0'})}\n        sc = my_api.set_http(uuid, fr)\n    ```\n - returns: status_code *int*\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "vss",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vssapi",
    "package_url": "https://pypi.org/project/vssapi/",
    "platform": "",
    "project_url": "https://pypi.org/project/vssapi/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/vssapi/0.0.2/",
    "requires_dist": [
      "requests",
      "requests-toolbelt",
      "python-dotenv"
    ],
    "requires_python": "",
    "summary": "VSS API package",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12809897,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "107cf142429fe4514d4bca5b7419f3a76fd52fc272e3b5e5260a2975788d2b18",
          "md5": "0a4eebfb722dec7280535e2ac43c7ee7",
          "sha256": "4a336ce44ac3d4dc44848515d2ed0a66aa19c03c606e75f9cc41baed758acefc"
        },
        "downloads": -1,
        "filename": "vssapi-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a4eebfb722dec7280535e2ac43c7ee7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5168,
        "upload_time": "2022-02-07T07:37:26",
        "upload_time_iso_8601": "2022-02-07T07:37:26.738021Z",
        "url": "https://files.pythonhosted.org/packages/10/7c/f142429fe4514d4bca5b7419f3a76fd52fc272e3b5e5260a2975788d2b18/vssapi-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2dcafe39cc5d333682979f91f32b97e90be616281e51f7293a885d112d77744",
          "md5": "a4abd028d3a77af3e12855c129c9f8b8",
          "sha256": "32a9ca01445e946b8482b5b59920589f8f3fdfe8e0a1d83e2e945c5dd9b03784"
        },
        "downloads": -1,
        "filename": "vssapi-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a4abd028d3a77af3e12855c129c9f8b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5385,
        "upload_time": "2022-02-07T07:37:28",
        "upload_time_iso_8601": "2022-02-07T07:37:28.646318Z",
        "url": "https://files.pythonhosted.org/packages/b2/dc/afe39cc5d333682979f91f32b97e90be616281e51f7293a885d112d77744/vssapi-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "107cf142429fe4514d4bca5b7419f3a76fd52fc272e3b5e5260a2975788d2b18",
        "md5": "0a4eebfb722dec7280535e2ac43c7ee7",
        "sha256": "4a336ce44ac3d4dc44848515d2ed0a66aa19c03c606e75f9cc41baed758acefc"
      },
      "downloads": -1,
      "filename": "vssapi-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a4eebfb722dec7280535e2ac43c7ee7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5168,
      "upload_time": "2022-02-07T07:37:26",
      "upload_time_iso_8601": "2022-02-07T07:37:26.738021Z",
      "url": "https://files.pythonhosted.org/packages/10/7c/f142429fe4514d4bca5b7419f3a76fd52fc272e3b5e5260a2975788d2b18/vssapi-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2dcafe39cc5d333682979f91f32b97e90be616281e51f7293a885d112d77744",
        "md5": "a4abd028d3a77af3e12855c129c9f8b8",
        "sha256": "32a9ca01445e946b8482b5b59920589f8f3fdfe8e0a1d83e2e945c5dd9b03784"
      },
      "downloads": -1,
      "filename": "vssapi-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a4abd028d3a77af3e12855c129c9f8b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5385,
      "upload_time": "2022-02-07T07:37:28",
      "upload_time_iso_8601": "2022-02-07T07:37:28.646318Z",
      "url": "https://files.pythonhosted.org/packages/b2/dc/afe39cc5d333682979f91f32b97e90be616281e51f7293a885d112d77744/vssapi-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}