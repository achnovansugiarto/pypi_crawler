{
  "info": {
    "author": "",
    "author_email": "Paco Li Junting <13602887904@163.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Module yaml_json_config\n\nThis is a module to facilitate reading a config file or text string in json or yaml to a python object, vice versa.\n\nNot only flat key value style is supported, nested objects and list of objects can be supported.\n\n## Demo of Usage\nLet's say there is a sample config file in yaml format to represent a company\n```yaml\naddress: \"#368 GuangZhou District, GZ, GD\"\ntelephone: \"+86206666666666\"\nboss:\n  name: alpha\n  id: 001\n  age: 40\n  linkman:\n    name: omega\nmembers:\n  - name: alpha\n    id: 001 \n    age: 40\n  - name: beta \n    id: 002 \n    age: 33\n  - name: sigma\n    id: 003 \n    age: 38\n```\nThere are 4 shallow attributes, 'address', 'telephone' are simple strings, 'members' is a list of common nested structure, 'boss' is a nested structure with a nested structure 'linkman'.\n\n### Shallow Load to Object\n```python\nfrom yaml_json_config_paco.GenericItem import GenericItem\n\nclass Company0(GenericItem):\n    \"\"\"shallow load demo\"\"\"\n    pass\n\nif __name__=='__main__':\n    company0 = Company0.from_file(\"sample.yml\") \n    print(f\"company0.address:  {company0.address}\")\n    print(f\"company0.telephone:  {company0.telephone}\")\n    print(f\"company0.boss:  {company0.boss}\")\n    print(f\"company0.members:  {company0.members}\")\n    print(f\"company0.dump_to_dict(): {company0.dump_to_dict()}\")\n    print(f\"company0.jsonify():\\n{company0.jsonify()}\")\n    print(f\"company0.yamlize():\\n{company0.yamlize()}\")\n```\nrun above code, you will get below, the 4 shallow attribute can be access directly by attribute name as object attributes, the nested structures are kept as OrderedDict and list of OrderedDict, the nested structure is just kept as OrderedDict in side OrderedDict\n\n```python\ncompany0.address:  #368 GuangZhou District, GZ, GD\ncompany0.telephone:  +86206666666666\ncompany0.boss:  OrderedDict([('name', 'alpha'), ('id', 1), ('age', 40), ('linkman', OrderedDict([('name', 'omega')]))])\ncompany0.members:  [OrderedDict([('name', 'alpha'), ('id', 1), ('age', 40)]), OrderedDict([('name', 'beta'), ('id', 2), ('age', 33)]), OrderedDict([('name', 'sigma'), ('id', 3), ('age', 38)])]\ncompany0.dump_to_dict(): OrderedDict([('address', '#368 GuangZhou District, GZ, GD'), ('telephone', '+86206666666666'), ('boss', OrderedDict([('name', 'alpha'), ('id', 1), ('age', 40), ('linkman', OrderedDict([('name', 'omega')]))])), ('members', [OrderedDict([('name', 'alpha'), ('id', 1), ('age', 40)]), OrderedDict([('name', 'beta'), ('id', 2), ('age', 33)]), OrderedDict([('name', 'sigma'), ('id', 3), ('age', 38)])])])\n\n# This is the way to dump to json\ncompany0.jsonify(): \n{\n  \"address\": \"#368 GuangZhou District, GZ, GD\",\n  \"telephone\": \"+86206666666666\",\n  \"boss\": {\n    \"name\": \"alpha\",\n    \"id\": 1,\n    \"age\": 40,\n    \"linkman\": {\n      \"name\": \"omega\"\n    }\n  },\n  \"members\": [\n    {\n      \"name\": \"alpha\",\n      \"id\": 1,\n      \"age\": 40\n    },\n    {\n      \"name\": \"beta\",\n      \"id\": 2,\n      \"age\": 33\n    },\n    {\n      \"name\": \"sigma\",\n      \"id\": 3,\n      \"age\": 38\n    }\n  ]\n}\n\n# this is the way to dump to yaml\ncompany0.yamlize(): \naddress: '#368 GuangZhou District, GZ, GD'\ntelephone: '+86206666666666'\nboss:\n  name: alpha\n  id: 1\n  age: 40\n  linkman:\n    name: omega\nmembers:\n- name: alpha\n  id: 1\n  age: 40\n- name: beta\n  id: 2\n  age: 33\n- name: sigma\n  id: 3\n  age: 38\n```\n### Deep Load to Object\n```python\nfrom yaml_json_config_paco.GenericItem import GenericItem\n\nclass Person(GenericItem):\n    pass\n\n\nclass Company(GenericItem):\n    def __nested__(self):\n        # return a tuple for GenericItem to build nested objects\n        return (('boss', Person),  # tell GenericItem to load boss as Person Class object\n                ('members', Person, list),  # tell GenericItem to load members as list of Person Class objects\n                )\n\nif __name__=='__main__':\n    company = Company.from_file(\"sample.yml\") \n    print(f\"company.address:  {company.address}\")\n    print(f\"company.boss:  {company.boss}\")\n    print(f\"company.boss.name:  {company.boss.name}\")\n    print(f\"company.boss.linkman:  {company.boss.linkman}\")\n    print(f\"company.members:  {company.members}\")\n    print(f\"company.members[1]: {company.members[1]}\")\n    print(f\"company.members[1].name: {company.members[1].name}\")\n    print(f\"company.jsonify():\\n{company.jsonify()}\")\n    print(f\"company.yamlize():\\n{company.yamlize()}\")\n```\n\nrun above will get below.\nThe 'attr_to_convert_to_list' and 'attr_to_convert' will be called by GenericItem so that it will get information how to deal with some nested attributes.\nThe nested can be recursive.\n\n```python\ncompany.address:  #368 GuangZhou District, GZ, GD\ncompany.boss:  {\n  \"name\": \"alpha\",\n  \"id\": 1,\n  \"age\": 40,\n  \"linkman\": {\n    \"name\": \"omega\"\n  }\n}\n# this time, boss' name can be access by attribute name\ncompany.boss.name:  alpha\n# linkman is not specified with a python class, so it is kept as a OrderDict\ncompany.boss.linkman:  OrderedDict([('name', 'omega')])\n# members is a list of Person, so it can be access by index to the Person object, and access by Person attributes\ncompany.members:  [{\n  \"name\": \"alpha\",\n  \"id\": 1,\n  \"age\": 40\n}, {\n  \"name\": \"beta\",\n  \"id\": 2,\n  \"age\": 33\n}, {\n  \"name\": \"sigma\",\n  \"id\": 3,\n  \"age\": 38\n}]\ncompany.members[1]: {\n  \"name\": \"beta\",\n  \"id\": 2,\n  \"age\": 33\n}\ncompany.members[1].name: beta\n\ncompany.jsonify():\n{\n  \"address\": \"#368 GuangZhou District, GZ, GD\",\n  \"telephone\": \"+86206666666666\",\n  \"boss\": {\n    \"name\": \"alpha\",\n    \"id\": 1,\n    \"age\": 40,\n    \"linkman\": {\n      \"name\": \"omega\"\n    }\n  },\n  \"members\": [\n    {\n      \"name\": \"alpha\",\n      \"id\": 1,\n      \"age\": 40\n    },\n    {\n      \"name\": \"beta\",\n      \"id\": 2,\n      \"age\": 33\n    },\n    {\n      \"name\": \"sigma\",\n      \"id\": 3,\n      \"age\": 38\n    }\n  ]\n}\n\ncompany.yamlize():\naddress: '#368 GuangZhou District, GZ, GD'\ntelephone: '+86206666666666'\nboss:\n  name: alpha\n  id: 1\n  age: 40\n  linkman:\n    name: omega\nmembers:\n- name: alpha\n  id: 1\n  age: 40\n- name: beta\n  id: 2\n  age: 33\n- name: sigma\n  id: 3\n  age: 38\n```\n\n### Default Value and Optiontal Attribute\n```python\nfrom yaml_json_config_paco.GenericItem import GenericItem\n\nclass Person(GenericItem):\n    def __init__(self):\n        self.name = None   # set None as mandatory attribute\n        self.id = \"na\"     # set value as default value\n        self.age = \"na\"    # set value as default value\n        self.linkman = \"\"  # set to \"\" as optional, as this attribute 'linkman' is mentioned in self.__nested__ method,\n                           # and some of Person object do not have linkman, this line is needed.\n\n    def __nested__(self):\n        return (('linkman', Person),)  # tell GenericItem to load 'linkman' attribute as a Person object\n\nclass Company(GenericItem):\n    def __nested__(self):\n        return (('boss', Person),  # tell GenericItem to load 'boss' as Person Class object\n                ('members', Person, list))  # tell GenericItem to load 'members' as list of Person Class objects\n\nif __name__=='__main__':\n    company = Company.from_file(\"sample.yml\") \n    print(f\"company.address:  {company.address}\")\n    print(f\"company.boss:  {company.boss}\")\n    print(f\"company.boss.name:  {company.boss.name}\")\n    print(f\"company.boss.linkman.name:  {company.boss.linkman.name}\")\n    print(f\"company.members:  {company.members}\")\n    print(f\"company.members[1]: {company.members[1]}\")\n    print(f\"company.members[1].name: {company.members[1].name}\")\n    print(f\"company.members[1].linkman: {company.members[1].linkman}\")\n```\n\nrun above to get below,\n\n```python\ncompany.address:  #368 GuangZhou District, GZ, GD\ncompany.boss:  {\n  \"name\": \"alpha\",\n  \"id\": 1,\n  \"age\": 40,\n  \"linkman\": {\n    \"name\": \"omega\",\n    \"id\": \"na\",            # with default value as the config file not set\n    \"age\": \"na\"            # with default value\n  }\n}\ncompany.boss.name:  alpha\ncompany.boss.linkman.name:  omega\ncompany.members:  [{    # the optional linkman is not present here\n  \"name\": \"alpha\",\n  \"id\": 1,\n  \"age\": 40\n}, {\n  \"name\": \"beta\",\n  \"id\": 2,\n  \"age\": 33\n}, {\n  \"name\": \"sigma\",\n  \"id\": 3,\n  \"age\": 38\n}]\ncompany.members[1]: {\n  \"name\": \"beta\",\n  \"id\": 2,\n  \"age\": 33\n}\ncompany.members[1].name: beta\ncompany.members[1].linkman: \n# pack to yaml\ncompany.yamlize():  \naddress: '#368 GuangZhou District, GZ, GD'\ntelephone: '+86206666666666'\nboss:\n  name: alpha\n  id: 1\n  age: 40\n  linkman:\n    name: omega\n    id: na\n    age: na\nmembers:\n- name: alpha\n  id: 1\n  age: 40\n- name: beta\n  id: 2\n  age: 33\n- name: sigma\n  id: 3\n  age: 38\n```\n\n\n### Dump and Load, Json or Yaml\nA GenericItem classmethod 'from_file' is provided to load from file.\nA GenericItem method 'dump_to_file' is provide to dump to file.\nThe format is automatically recognized by the suffix of the filename you feed, 'json', 'yml', 'yaml' are supported.\n\nExample:\n\n```python\ncompany.dump_to_file(\"sample.json\")\nwith open(\"sample.json\", \"r\", encoding=\"utf-8\") as f:\n   print(f\"read sample.json file:\\n{f.read()}\\n\")\n\ncompany2 = Company.from_file(\"sample.json\")\nprint(f\"company2.yamlize():\\n{company2.yamlize()}\")\n```\n\nRun above to get below\n\n```python\nread sample.json file:\n{\n  \"address\": \"#368 GuangZhou District, GZ, GD\",\n  \"telephone\": \"+86206666666666\",\n  \"boss\": {\n    \"name\": \"alpha\",\n    \"id\": 1,\n    \"age\": 40,\n    \"linkman\": {\n      \"name\": \"omega\"\n    }\n  },\n  \"members\": [\n    {\n      \"name\": \"alpha\",\n      \"id\": 1,\n      \"age\": 40\n    },\n    {\n      \"name\": \"beta\",\n      \"id\": 2,\n      \"age\": 33\n    },\n    {\n      \"name\": \"sigma\",\n      \"id\": 3,\n      \"age\": 38\n    }\n  ]\n}\n\ncompany2.yamlize():\naddress: '#368 GuangZhou District, GZ, GD'\ntelephone: '+86206666666666'\nboss:\n  name: alpha\n  id: 1\n  age: 40\n  linkman:\n    name: omega\nmembers:\n- name: alpha\n  id: 1\n  age: 40\n- name: beta\n  id: 2\n  age: 33\n- name: sigma\n  id: 3\n  age: 38\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yaml-json-config-paco",
    "package_url": "https://pypi.org/project/yaml-json-config-paco/",
    "platform": null,
    "project_url": "https://pypi.org/project/yaml-json-config-paco/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pacopink/py_config/issues",
      "Homepage": "https://github.com/pacopink/py_config"
    },
    "release_url": "https://pypi.org/project/yaml-json-config-paco/0.1.0/",
    "requires_dist": [
      "pyyaml"
    ],
    "requires_python": ">=3.7",
    "summary": "load yaml/json to python object or pack it back",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16636399,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e404df9c1a83402d5fc20e9ab59d12177aa24bac372ee23b159c2ab30f847e5f",
          "md5": "560c5bea9182aabff20b17be3d8c7d51",
          "sha256": "f488f27551066a1725febdb7b4dc2f2df61dbba744aa8cb4060aa69d5fb6829a"
        },
        "downloads": -1,
        "filename": "yaml_json_config_paco-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "560c5bea9182aabff20b17be3d8c7d51",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9027,
        "upload_time": "2023-01-18T13:44:22",
        "upload_time_iso_8601": "2023-01-18T13:44:22.950926Z",
        "url": "https://files.pythonhosted.org/packages/e4/04/df9c1a83402d5fc20e9ab59d12177aa24bac372ee23b159c2ab30f847e5f/yaml_json_config_paco-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a78a5277b9ac014601b72d6adc11be151cedf7be5d0fa7c8b1322171aa323d6d",
          "md5": "6c1ad7827a62a587a928c67310e981df",
          "sha256": "4ec6a774f584d38a792def8e87649c654700d2e01547a651f807742c8e91b694"
        },
        "downloads": -1,
        "filename": "yaml_json_config_paco-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6c1ad7827a62a587a928c67310e981df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8110,
        "upload_time": "2023-01-18T13:44:25",
        "upload_time_iso_8601": "2023-01-18T13:44:25.487052Z",
        "url": "https://files.pythonhosted.org/packages/a7/8a/5277b9ac014601b72d6adc11be151cedf7be5d0fa7c8b1322171aa323d6d/yaml_json_config_paco-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18bb7bb5da35d6460899d1e033c300346a3bef26a6149e64c4720a9014956e7b",
          "md5": "cb758c51bf46515deee090041f1a2920",
          "sha256": "5f28acdbb687e078c4d055d73bf7fc8b0aeeba19a6583948f40811ac0e1f61b9"
        },
        "downloads": -1,
        "filename": "yaml_json_config_paco-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb758c51bf46515deee090041f1a2920",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9194,
        "upload_time": "2023-01-31T15:46:18",
        "upload_time_iso_8601": "2023-01-31T15:46:18.007999Z",
        "url": "https://files.pythonhosted.org/packages/18/bb/7bb5da35d6460899d1e033c300346a3bef26a6149e64c4720a9014956e7b/yaml_json_config_paco-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87254c4abfe04593d319d7044056cd4956d08f8a7f35bcbfad8ea646f17f8588",
          "md5": "7cb67f6b000b22671ee9815783e91d16",
          "sha256": "93800b468ac8c6257226fe3fe982bb0515eb0b4fa5a21db0b27b224865a98196"
        },
        "downloads": -1,
        "filename": "yaml_json_config_paco-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7cb67f6b000b22671ee9815783e91d16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9776,
        "upload_time": "2023-01-31T15:46:19",
        "upload_time_iso_8601": "2023-01-31T15:46:19.923615Z",
        "url": "https://files.pythonhosted.org/packages/87/25/4c4abfe04593d319d7044056cd4956d08f8a7f35bcbfad8ea646f17f8588/yaml_json_config_paco-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18bb7bb5da35d6460899d1e033c300346a3bef26a6149e64c4720a9014956e7b",
        "md5": "cb758c51bf46515deee090041f1a2920",
        "sha256": "5f28acdbb687e078c4d055d73bf7fc8b0aeeba19a6583948f40811ac0e1f61b9"
      },
      "downloads": -1,
      "filename": "yaml_json_config_paco-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb758c51bf46515deee090041f1a2920",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9194,
      "upload_time": "2023-01-31T15:46:18",
      "upload_time_iso_8601": "2023-01-31T15:46:18.007999Z",
      "url": "https://files.pythonhosted.org/packages/18/bb/7bb5da35d6460899d1e033c300346a3bef26a6149e64c4720a9014956e7b/yaml_json_config_paco-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87254c4abfe04593d319d7044056cd4956d08f8a7f35bcbfad8ea646f17f8588",
        "md5": "7cb67f6b000b22671ee9815783e91d16",
        "sha256": "93800b468ac8c6257226fe3fe982bb0515eb0b4fa5a21db0b27b224865a98196"
      },
      "downloads": -1,
      "filename": "yaml_json_config_paco-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7cb67f6b000b22671ee9815783e91d16",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9776,
      "upload_time": "2023-01-31T15:46:19",
      "upload_time_iso_8601": "2023-01-31T15:46:19.923615Z",
      "url": "https://files.pythonhosted.org/packages/87/25/4c4abfe04593d319d7044056cd4956d08f8a7f35bcbfad8ea646f17f8588/yaml_json_config_paco-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}