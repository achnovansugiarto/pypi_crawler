{
  "info": {
    "author": "Tyulis",
    "author_email": "tyulis@laposte.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# Rawutil\n\n*A pure-python and lightweight module to read and write binary data*\n\n## Introduction\n\nRawutil is a module aimed at reading and writing binary data in python in the same way as the built-in `struct` module, but with more features.\nThe rawutil's interface is thus compatible with `struct`, with a few small exceptions, and many things added.\nIt does not have any non-builtin dependency.\n\n### What is already in struct\n\n- Unpack and pack fixed structures from/to bytes (`pack`, `pack_into`, `unpack`, `unpack_from`, `iter_unpack`, `calcsize`)\n- `Struct` objects that allow to parse one and for all a structure that may be used several times\n\n### What is different compared to struct\n\n- Some rarely-used format characters are not in rawutil (`N`, `P` and `p` are not available, `n` is used for a different purpose)\n- There is no consideration for native size and alignment, thus the `@` characters simply applies system byte order with standard sizes and no alignment, just like `=`\n- There are several differences in error handling that are described below\n\n### What has been added to struct\n\n- Reading and writing files and file-like objects\n- New format characters, to handle padding, alignment, strings, ...\n- Internal references in structures\n- Loops in structures\n- New features to handle variable byte order\n\n## Usage\n\nRawutil exports more or less the same interface as `struct`. In all those functions, `structure` may be a simple format string or a `Struct` object.\n\n### unpack\n\n```python\nunpack(structure, data, names=None, refdata=())\n```\nUnpacks the given `data` according to the `structure`, and returns the unpacked values as a list.\n\n- `structure` is the structure of the data to unpack, as a format string or a `Struct` object\n- `data` may be a bytes-like or a file-like object. If it is a file-like object, the data will be unpacked starting from the current position in the file, and will leave the cursor at the end of the data that has been read (effectively reading the data to unpack from the file).\n- `names` may be a list of field names for a `namedtuple`, or a callable that takes all unpacked elements in order as arguments, like a `namedtuple` or a `dataclass`.\n- `refdata` may be used to easily input external data into the structure, as `#n` references. This will be described in the References part below\n\nUnlike `struct`, this function does not raises any error if the data is larger than the structure expected size.\n\nExamples :\n\n```python\n>>> unpack(\"4B 3s 3s\", b\"\\x01\\x02\\x03\\x04foobar\")\n(1, 2, 3, 4, b\"foo\", b\"bar\")\n>>> unpack(\"<4s #0I\", b\"ABCD\\x10\\x00\\x00\\x00\\x20\\x00\\x00\\x00\", names=(\"string\", \"num1\", \"num2\"), refdata=(2, ))\nRawutilNameSpace(string=b'ABCD', num1=16, num2=32)\n```\n\n### unpack_from\n\n```python\nunpack_from(structure, data, offset=None, names=None, refdata=(), getptr=False)\n```\n\nUnpacks the given `data` according to the `structure` starting from the given `position`, and returns the unpacked values as a list\n\nThis function works exactly like `unpack`, with two more optional arguments :\n\n- `offset` can be used to specify a starting position to read. In a file-like object, the cursor is moved to the given absolute `offset`, then the data to unpack is read and the cursor is left at the end of the data that has been read. If this parameter is not set, it works like `unpack` and reads from the current position\n- `getptr` can be set to True to return the final position in the data, after the unpacked data. The function will then return `(values, end_position)`. If left to False, it works like `unpack` and only returns the values.\n\nExamples :\n\n```python\n>>> unpack_from(\"<4s #0I\", b\"ABCD\\x10\\x00\\x00\\x00\\x20\\x00\\x00\\x00\", names=(\"string\", \"num1\", \"num2\"), refdata=(2, ))\nRawutilNameSpace(string=b'ABCD', num1=16, num2=32)\n>>> values, endpos = unpack_from(\"<2I\", b\"ABCD\\x10\\x00\\x00\\x00\\x20\\x00\\x00\\x00EFGH\", offset=4, getptr=True)\n>>> values\n[16, 32]\n>>> endpos\n12\n```\n\n### iter_unpack\n\n```python\niter_unpack(structure, data, names=None, refdata=())\n```\n\nReturns an iterator that will unpack according to the structure and return the values as a list at each iteration.\nThe data must be of a multiple of the structure’s length. If `names` is defined, each iteration will return a namedtuple, most like `unpack` and `unpack_from`. `refdata` also works the same.\n\nThis function is present mostly to ensure compatibility with `struct`. It is rather recommended to use iterators in structures, that are faster and offer much more control.\n\nExamples :\n```python\n>>> for a, b, c in iter_unpack(\"3c\", b\"abcdefghijkl\"):\n...     print(a.decode(\"ascii\"), b.decode(\"ascii\"), c.decode(\"ascii\"))\n...\na b c\nd e f\ng h i\nj k l\n```\n\n### pack\n\n```python\npack(self, *data, refdata=())\n```\n\nPacks the given `data` in the binary format defined by `structure`, and returns the packed data as a `bytes` object.\n`refdata` is still there to insert external data in the structure using the `#n` references, and is a named argument only.\n\nNote that if the last element of `data` is a writable file-like object, the data will be written into it instead of being returned. This behaviour is deprecated and kept only for backwards-compatibility, to pack into a file you should rather use `pack_file`.\n\nExamples :\n```python\n>>> pack(\"<2In\", 10, 100, b\"String\")\nb'\\n\\x00\\x00\\x00\\n\\x00\\x00\\x00String\\x00'\n>>> pack(\">#0B #1I\", 10, 100, 1000, 10000, 100000, refdata=(2, 3))\nb\"\\nd\\x00\\x00\\x03\\xe8\\x00\\x00'\\x10\\x00\\x01\\x86\\xa0\"\n>>> unpack(\">2B3I\", _)\n[10, 100, 1000, 10000, 100000]\n```\n\n### pack_into\n\n```python\npack_into(structure, buffer, offset, *data, refdata=())\n```\n\nPacks the given `data` into the given `buffer` at the given `offset` according to the given `structure`. Refdata still has the same usage as everywhere else.\n\n- `buffer` must be a mutable bytes-like object (typically a `bytearray`). The data will be written directly into it at the given position\n- `offset` specifies the position to write the data to. It is a required argument.\n\nExamples :\n\n```python\n>>> b = bytearray(b\"AB----GH\")\n>>> pack_into(\"4s\", b, 2, b\"CDEF\")\n>>> b\nbytearray(b'ABCDEFGH')\n```\n\n### pack_file\n\n```python\npack_file(structure, file, *data, position=None, refdata=())\n```\n\nPacks the given `data` into the given `file` according to the given `structure`. `refdata` is still there for the external references data.\n\n- `file` can be any binary writable file-like object.\n- `position` can be set to pack the data at a specific position in the file. If it is left to `None`, the data will be packed at the current position in the file. In either case, the cursor will end up at the end of the packed data.\n\nExamples :\n\n```python\n>>> file = io.BytesIO(b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\")\n>>> rawutil.pack_file(\"2B\", file, 60, 61)  # Writes at the current position (0)\n>>> rawutil.pack_file(\"c\", file, b\"A\")     # Writes at the current position (now 2)\n>>> rawutil.pack_file(\"2c\", file, b\"y\", b\"z\", position=6)  # Writes at the given position (6)\n>>> file.seek(0)\n>>> file.read()\nb'<=A\\x00\\x00\\x00yz'\n```\n\n### calcsize\n\n```python\ncalcsize(structure, refdata=())\n```\n\nReturns the size of the data represented by the given `structure`.\n\nThis function is kept to ensure compatibility with `struct`.\nHowever, rawutil structure are not always of a fixed length, as they use internal references and variable length formats.\nHence `calcsize` only works on fixed-length structures, thus structures that only use :\n\n- Fixed-length format characters (basic types with set repeat count)\n- External references (`#0` type references, if you provide their value in `refdata`)\n- Iterators with fixed number of repeats (`2(…)` or `5[…]` will work)\n- Alignments (structures with `a` and `|`). As long as everything else is fixed, alignments are too.\n\nTrying to compute the size of a structure that includes any of those elements will raise an `FormatError` (basically, anything that depends on the data to read / write) :\n\n- Variable-length format characters (namely `n` and `$`)\n- `{…}` iterators, as they depend on the amount of data remaining.\n- Internal references (any `/1` or `/p1` types references)\n\n### Struct\n\n```python\nStruct(format, names=None, safe_references=True)\n```\n\nStruct objects allow to pre-parse format strings once and for all.\nIndeed, using only format strings will force to parse them every time you use them.\nIf a structure is used more than once, it will thus save time to wrap it in a Struct object.\nYou can also set the element names once, they will then be used by default every time you unpack data with that structure.\nAny function that accepts a format string also accepts Struct objects.\nA Struct object is initialized with a format string, and can take a `names` parameter that may be a namedtuple or a list of names, that allows to return data unpacked with this structure in a more convenient namedtuple. The `safe_references`, when set to `False`, allows some seemingly unsafe but sometimes desirable behaviours described in the *References* section.\nIt works exactly the same as the `names` parameter of `unpack` and its variants, but without having to specify it each time.\nFor convenience, Struct also defines the module-level functions, for the structure it represents (without the `structure` argument as it is for the represented structure) :\n\n```python\nunpack(self, data, names=None, refdata=())\nunpack_from(self, data, offset=None, names=None, refdata=(), getptr=False)\niter_unpack(self, data, names=None, refdata=())\npack(self, *data, refdata=())\npack_into(self, buffer, offset, *data, refdata=())\npack_file(self, file, *data, position=None, refdata=())\ncalcsize(self, refdata=None, tokens=None)\n```\n\nYou can retrieve the byte order with the `byteorder` attribute (can be `\"little\"` or `\"big\"`), and the format string (without byte order mark) with the `format` attribute.\nYou can also tell whether the structure has an assigned byte order with the `forcebyteorder` attribute.\n\nIt is also possible to add structures (it can add Struct and format strings transparently), and multiply a Struct object :\n\n```python\n>>> part1 = Struct(\"<4s\")\n>>> part2 = Struct(\"I /0(#0B #0b)\")\n>>> part3 = \"I /0s #0a\"\n>>> part1 + part2 + part3\nStruct(\"<4s I /1(#0B #0b) I /3s #1a\")\n>>> part2 * 3\nStruct(\"<I /0(#0B #0b) I /2(#1B #1b) I /4(#2B #2b)\")\n```\nAs you can see, the references are automatically fixed : all absolute references in the resulting structure point on the element they pointed to previously.\nExternal references are fixed too, and supposed to be in sequence in `refdata`.\n\nNote that if the added structures have different byte order marks, the resulting structure will always retain the byte order of the left operand.\n\n### Exceptions\n\nRawutil defines several exception types :\n\n- `rawutil.FormatError` : Raised when the format string parsing fails, or if the structure is invalid\n- `rawutil.OperationError` : Raised when operations on data fail\n\t- `rawutil.DataError` : Raised when data is at fault (e.g. when there is not enough data to unpack the entire format)\n\n\nIt also uses a few others :\n\n- `OverflowError` : When the data is out of range for its format\n\n## Format strings\n\nIn the same way as the `struct` module, binary data structures are defined with **format strings**.\n\n### Byte order marks\n\nThe first character of the format string may be used to specify the byte order to read the data in.\nThose are the same as in `struct`, except `@` that is equivalent to `=` instead of setting native sizes and alignments.\n\n| Chr. | Description |\n| ---- | ----------- |\n| =    | System byte order (as defined by sys.byteorder) |\n| @    | Equivalent to =, system byte order |\n| >    | Big endian (most significant byte first) |\n| <    | Little endian (least significant byte first) |\n| !    | Network byte order (big endian as defined by RFC 1700 |\n\nIf no byte order is defined in a structure, it is set to system byte order by default.\n\n### Elements\n\nThere are several format characters, that define various data types. Simple data types are described in the following table :\n\n| Chr. | Type   | Size | Description |\n| ---- | ------ | ---- | ----------- |\n| ?    | bool   | 1    | Boolean value, 0 for False and any other value for True (packed as 0 and 1) |\n| b    | int8   | 1    | 8 bits signed integer (7 bits + 1 sign bit) |\n| B    | uint8  | 1    | 8 bits unsigned integer |\n| h    | int16  | 2    | 16 bits signed integer |\n| H    | uint16 | 2    | 16 bits unsigned integer |\n| u    | int24  | 3    | 24 bits signed integer |\n| U    | uint24 | 3    | 24 bits unsigned integer |\n| i    | int32  | 4    | 32 bits signed integer |\n| I    | uint32 | 4    | 32 bits unsigned integer |\n| l    | int32  | 4    | 32 bits signed integer (same as `i`) |\n| L    | uint32 | 4    | 32 bits unsigned integer (same as `I`) |\n| q    | int64  | 8    | 64 bits signed integer |\n| Q    | uint64 | 8    | 64 bits unsigned integer |\n| e    | half   | 2    | IEEE 754 half-precision floating-point number |\n| f    | float  | 4    | IEEE 754 single-precision floating-point number |\n| d    | double | 8    | IEEE 754 double-precision floating-point number |\n| F    | quad   | 16   | IEEE 754 quadruple-precision floating-point number |\n| c    | char   | 1    | Character (returned as a 1-byte bytes object) |\n| x    | void   | 1    | Convenience padding byte. Takes no data to pack (it simply inserts a null byte) nor returns anything. **Does not fail** when there is no more data to read. To fail in that case, just use a normal `c` |\n\nA number before a simple format character may be added to indicate a repetition : `\"4I\"` means four 32-bits unsigned integers, and is equivalent to `\"IIII\"`.\n\nThere also exist \"special\" format characters that define more complex types and behaviours :\n\n| Chr. | Type   | Description |\n| ---- | ------ | ----------- |\n| s    | char[] | Fixed-length string. Represents a string of a given length, for example `\"16s\"` represents a 16-byte string. Returned as a single `bytes` object (as a contrary to `c` that only returns individual characters) |\n| n    | string | Null-terminated string. To unpack, reads until a null byte is found and returns the result as a `bytes` object, without the null byte. Packs the given bytes, and adds a null byte at the end.\n| X    | hex    | Works like `s`, but returns the result as an hexadecimal string. |\n| a    |        | Inserts null bytes / reads until the data length reaches the next multiple of the given number (for example, `\"4a\"` goes to the next multiple of 4). Does not return anything and does not take input data to pack. |\n| $    | char[] | When unpacking, returns all remaining data as a bytes object. When packing, simply packs the given bytes object. Must be the last element of the structure. |\n\nYou can also set the base position for alignment with the `|` character. An alignment will then be performed according to the latest `|`.\nFor example, `\"QBBB 4a\"` represents 1 uint64, 3 bytes and one alignment byte to get to the next multiple of 4 (12), whereas `\"QB| BB 4a\"` will align according to the `|` and give 1 uint64, 3 bytes and 2 alignment bytes, to get to 4 bytes since the last `|`.\n\nNote that `$` must be at the end of the structure. Any other element after a `$` element will cause a `FormatError`\n\n## References\n\nOne of the biggest additions of rawutil is references.\nWith rawutil, it is possible to use a value previously read as a repeat count for another element, and to insert custom values in a structure at run-time.\n\nThere are 3 types of references.\n\n### External references\n\nAn external reference is a reference to a value given at run-time — namely through the `refdata` argument of all rawutil functions\nIn the format string, those are denoted by a `#n` element, with the index in `refdata` as `n`.\nFor example, in the structure `\"#0B #1s\"`, `#0` will be replaced by the element 0 of `refdata`, and `#1` by the element 1.\n\nExample :\n```python\n>>> unpack(\"#0B #1s\", b\"\\x01\\x02\\x03foobar\", refdata=(3, 6))\n[1, 2, 3, b'foobar']\n```\n\nIn the case above, it is equivalent to have `\"3B 6s\"` as the structure — but when you have to use several times the same structures with different repeat counts, it is possible to pre-compile the structure in a Struct object with external references, and then use the same object every time with different value, and without re-parsing the structure each time.\n\n### Absolute references\n\nAbsolute references allow to use a value previously read as a repeat count for another element further in the structure.\nThose are denoted with `/N`, with the index of the referenced element in the structure as `N`.\nFor example, in the structure `\"I /0s\"`, the integer is used to tell the length of the string, and the reference allows to read the string with that length.\nFor absolute and relative references, a sub-structure counts for 1 element.\n\nExample :\n```python\n>>> unpack(\"3B /0s /1s /2s\", b\"\\x04\\x03\\x04spamhameggs\")\n[4, 3, 4, b'spam', b'ham', b'eggs']\n```\n\n### Relative references\n\nRelative references are similar to absolute references, except that they are relative to their location in the structure.\nThey are denoted with `/pN`, where `N` is the number of elements to go back in the structure to find the referenced element.\nIt works a bit like negative list indices in Python : `/p1` gives the immediately previous element, `/p2` the one before, and so on.\n\nExample :\n```python\n>>> unpack(\"B /p1s 2B /p2s /p2s\", b\"\\x04spam\\x03\\x04hameggs\")\n[4, b'spam', 3, 4, b'ham', b'eggs']\n```\n\nThis is especially useful in cases where there are a variable amount of elements before the referenced element, when the absolute references are unpractical — or when the structure is very long and absolute references become less practical.\n\n### Reference error checking\n\nReferences come with some error checking : errors are caught while parsing the format when possible. For instance, a reference that points to itself, an element beyond itself, or before the beginning of the format is invalid. Those errors raise a `FormatError`. However, even though it is quite unsafe to reference an element inside or beyond a part with an indeterminate amount of elements (typically, another reference), but that might be useful sometimes. Those \"unsafe behaviours\" are disabled by default : you need to use `Struct()` with argument `safe_references=False` to activate them.\n\n```python\n>>> # For instance, here we reference the last element of the first block, that itself uses a reference\n>>> unpack(\"B /0B /p1c\", b\"\\x02\\xFF\\x03ABC\")\n...\nrawutil.FormatError: In format 'B /0B /p1c', in subformat 'B/0B/p1c', at position 4 : Unsafe reference index : relative reference references in or beyond an indeterminate amount of elements (typically a reference). If it is intended, use the parameter safe_references=False of the Struct() constructor\n>>> Struct(\"B /0B /p1c\", safe_references=False).unpack(b\"\\x02\\xFF\\x03ABC\")\n[2, 255, 3, b'A', b'B', b'C']\n```\n\n## Sub-structures\n\nThe other big addition in rawutil is the substructures elements.\nThose can be used to isolate values in their own group instead of diluted in the global scope, or to easily read several times a similar group of structure elements. They can of course be nested.\n\nNote that a substructure always count as a single element towards references, and that references are local to their group : a `/0` reference inside of a substructure will point to the first element *of that substructure*.\n\nAlignments are also local to their substructure, thus will always align relative to the beginning of the substructure.\n\n### Groups\n\nA group is simply a group of values isolated in their own sub-list.\nThose are defined between parentheses `(…)`.\nThe values in a group are then extracted in a sub-list, and must be in a sub-list when packed.\n\nExample :\n```python\n>>> unpack(\"<I (3B) I\", b\"\\xff\\xff\\xff\\xff\\x01\\x02\\x03\\xff\\xff\\xff\\xff\")\n[4294967295, [1, 2, 3], 4294967295]\n>>> pack(\"<I (3B) I\", 0xFFFFFFFF, (1, 2, 3), 0xFFFFFFFF)\nb'\\xff\\xff\\xff\\xff\\x01\\x02\\x03\\xff\\xff\\xff\\xff'\n```\n\nWhen a repeat count is set to a group (as a number or as a reference, both are always valid), it will extract the group several times, but in the same sub-list, as a contrary to iterators that are described below.\n\nExample :\n```python\n>>> unpack(\"B 3(n)\", b\"\\x0afoo\\x00bar\\x00foo2\\x00\")\n[10, [b'foo', b'bar', b'foo2']]\n>>> unpack(\"B /0(n)\", b\"\\x03foo\\x00bar\\x00foo2\\x00\")\n[3, [b'foo', b'bar', b'foo2']]\n```\n\n### Iterators\n\nAn iterator will extract its substructure as many times as it is told by its repeat count, in separate sub-lists.\nIt is defined between square brackets `[…]`\n\nExample :\n```python\n>>> unpack(\"B /0[B /0s]\", b\"\\x03\\x03foo\\x03bar\\x06foobar\")\n[3, [[3, b'foo'], [3, b'bar'], [6, b'foobar']]]\n>>> pack(\"B /0[B /0s]\", 2, ((3, b\"foo\"), (3, b\"bar\")))\nb'\\x02\\x03foo\\x03bar'\n```\n\n### Unbound iterators\n\nWhile `[]` iterators are more or less equivalent to a `for i in range(count)`, those are equivalent to a `while`.\nThis kind of iterator is defined between curly brackets `{…}`, and extracts its substructure into a list of lists just like `[]`, except that it extracts until there are no more data left to read.\nThus you must not give it any repeat count (doing so will throw a `FormatError`), and it must always be the last element of its structure (it also raises an exception otherwise).\nThe data to read must be an exact multiple of that substructure, otherwise it will throw an `OperationError` when attempting to unpack it.\n\nExample :\n```python\n>>> unpack(\"4s {Bn}\", b\"TEST\\x00\\foo\\x00\\x01bar\\x00\\x02foobar\\x00\")\n[b'TEST', [[0, b'\\x0coo'], [1, b'bar'], [2, b'foobar']]]\n>>> pack(\"4s {Hn4a}\", b\"TEST\", ((1, b\"foo\"), (1295, b\"bar\")))\nb'TEST\\x01\\x00foo\\x00\\x00\\x00\\x0f\\x05bar\\x00\\x00\\x00'\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tyulis/rawutil",
    "keywords": "structures struct binary bytes formats",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rawutil",
    "package_url": "https://pypi.org/project/rawutil/",
    "platform": null,
    "project_url": "https://pypi.org/project/rawutil/",
    "project_urls": {
      "Homepage": "https://github.com/Tyulis/rawutil"
    },
    "release_url": "https://pypi.org/project/rawutil/2.7.4/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "A pure-python module to read and write binary data",
    "version": "2.7.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14790296,
  "releases": {
    "2.4.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b762ce9f3d1b2427f28b09d81a9ffcd4e50e7a43161803648448ee92f4580ce",
          "md5": "d98be61d23750c678f1b0b54b1e342f9",
          "sha256": "ea3f287830abf4a484560262f3e156c1652d50051b521f9f09421d0733584b03"
        },
        "downloads": -1,
        "filename": "rawutil-2.4.10.tar.gz",
        "has_sig": false,
        "md5_digest": "d98be61d23750c678f1b0b54b1e342f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13201,
        "upload_time": "2019-03-09T16:14:47",
        "upload_time_iso_8601": "2019-03-09T16:14:47.185752Z",
        "url": "https://files.pythonhosted.org/packages/5b/76/2ce9f3d1b2427f28b09d81a9ffcd4e50e7a43161803648448ee92f4580ce/rawutil-2.4.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8120c62493b6d8b7098f3b3ab3b5cf8f67c521df36cb6ab2e272059e54cef022",
          "md5": "4e143846b792b759508459cdc89ad06d",
          "sha256": "3ee6a5ed67e2fdd11ae707efb211e125cff8fbb4be920b7760fec0bdb216aef5"
        },
        "downloads": -1,
        "filename": "rawutil-2.4.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e143846b792b759508459cdc89ad06d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 9872,
        "upload_time": "2020-04-29T12:56:36",
        "upload_time_iso_8601": "2020-04-29T12:56:36.590361Z",
        "url": "https://files.pythonhosted.org/packages/81/20/c62493b6d8b7098f3b3ab3b5cf8f67c521df36cb6ab2e272059e54cef022/rawutil-2.4.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dab9d203156e6bf195b7d4ed913fa180bc57bdb8c5af3ba9dba3c09ca0b21766",
          "md5": "77d76b34828f02f2645d0cd805966c33",
          "sha256": "76fd9de9f3e20135d358acd66eedfa2b43a4c7eaf49c27a34e59340f91785ce0"
        },
        "downloads": -1,
        "filename": "rawutil-2.4.11.tar.gz",
        "has_sig": false,
        "md5_digest": "77d76b34828f02f2645d0cd805966c33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 12555,
        "upload_time": "2020-04-29T12:56:37",
        "upload_time_iso_8601": "2020-04-29T12:56:37.921915Z",
        "url": "https://files.pythonhosted.org/packages/da/b9/d203156e6bf195b7d4ed913fa180bc57bdb8c5af3ba9dba3c09ca0b21766/rawutil-2.4.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48c541d5508e82ed5fc123f997e85183632dddd3a5e733f25b87591693b18400",
          "md5": "69b7127352b5f3270e5b86bec4f38ba7",
          "sha256": "8f332cbfe0cfb1548015f427d80f85046bca3fc5389ca6ba3608bbf0042008ea"
        },
        "downloads": -1,
        "filename": "rawutil-2.4.8.tar.gz",
        "has_sig": false,
        "md5_digest": "69b7127352b5f3270e5b86bec4f38ba7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9272,
        "upload_time": "2017-12-03T16:01:39",
        "upload_time_iso_8601": "2017-12-03T16:01:39.814928Z",
        "url": "https://files.pythonhosted.org/packages/48/c5/41d5508e82ed5fc123f997e85183632dddd3a5e733f25b87591693b18400/rawutil-2.4.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44aca323325c0a0d541f27f6a8ef5b1eafb4dd4972b42c0e48dd3fa6148760f3",
          "md5": "8cde4117cff2e9a28b085d0286a85d09",
          "sha256": "cf99c83837cedc3b3a2e54ae2168dbd9dbc46837bbac60c0ac45d054195f9fa0"
        },
        "downloads": -1,
        "filename": "rawutil-2.4.9.tar.gz",
        "has_sig": false,
        "md5_digest": "8cde4117cff2e9a28b085d0286a85d09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10584,
        "upload_time": "2017-12-03T16:34:47",
        "upload_time_iso_8601": "2017-12-03T16:34:47.841748Z",
        "url": "https://files.pythonhosted.org/packages/44/ac/a323325c0a0d541f27f6a8ef5b1eafb4dd4972b42c0e48dd3fa6148760f3/rawutil-2.4.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05682bd14fa907dccc20a850066e807effa0d2e295663705051a511c4b99128e",
          "md5": "9a1445c6ba58cbd44d00c3938b6a6d32",
          "sha256": "5b946b806fe97ef1aeec7184298099c9b837d1779dbae0e37a95d51a5d0eb5d3"
        },
        "downloads": -1,
        "filename": "rawutil-2.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9a1445c6ba58cbd44d00c3938b6a6d32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 11694,
        "upload_time": "2020-11-15T18:03:22",
        "upload_time_iso_8601": "2020-11-15T18:03:22.183282Z",
        "url": "https://files.pythonhosted.org/packages/05/68/2bd14fa907dccc20a850066e807effa0d2e295663705051a511c4b99128e/rawutil-2.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dc87f44d9c8409c0dcd84fc3298a7e7c7340c873fa2d12604c07b7a897bccd6",
          "md5": "f6cd2c81a868679f376c7ad895f6dfb2",
          "sha256": "ac54458d8ac68e0bd615a64c061d4ea75f4609633847906015578ee4ceabd3d0"
        },
        "downloads": -1,
        "filename": "rawutil-2.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6cd2c81a868679f376c7ad895f6dfb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 15121,
        "upload_time": "2020-12-21T15:39:03",
        "upload_time_iso_8601": "2020-12-21T15:39:03.252424Z",
        "url": "https://files.pythonhosted.org/packages/9d/c8/7f44d9c8409c0dcd84fc3298a7e7c7340c873fa2d12604c07b7a897bccd6/rawutil-2.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dfb8be136a74b99b6e1c03953230af3965cbc753a8152a3822c4bc81081f37f",
          "md5": "b4ba3947cd2bedb7a37069b3c9df41fb",
          "sha256": "89b8d5739cbbf62d12f064218e19864da6a5067bbd679c5577f441aefc71ba27"
        },
        "downloads": -1,
        "filename": "rawutil-2.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b4ba3947cd2bedb7a37069b3c9df41fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 20660,
        "upload_time": "2020-12-21T15:39:05",
        "upload_time_iso_8601": "2020-12-21T15:39:05.982142Z",
        "url": "https://files.pythonhosted.org/packages/4d/fb/8be136a74b99b6e1c03953230af3965cbc753a8152a3822c4bc81081f37f/rawutil-2.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db9768cc68a3f555c2798fb5d772f324db83971db9b20cf512b0531545f9478c",
          "md5": "ec20f508de65bc16eb10af1e565b93d3",
          "sha256": "32da83c1e9c305d2a083aab5b5caec43b623ac264936905565d470e6c9f55bc4"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec20f508de65bc16eb10af1e565b93d3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4",
        "size": 15524,
        "upload_time": "2021-04-10T11:17:25",
        "upload_time_iso_8601": "2021-04-10T11:17:25.471042Z",
        "url": "https://files.pythonhosted.org/packages/db/97/68cc68a3f555c2798fb5d772f324db83971db9b20cf512b0531545f9478c/rawutil-2.7.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38a342ac7822fa0626966bda85de0e917acfed06c0a50d657384790ca4498a43",
          "md5": "00d813c366cbbfc782e9cbf0075225f9",
          "sha256": "2ea540e62259d93bae37f096c331f290c0a5169acc61bbd7d09ec06186cc73b9"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "00d813c366cbbfc782e9cbf0075225f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 17984,
        "upload_time": "2021-04-10T11:17:26",
        "upload_time_iso_8601": "2021-04-10T11:17:26.981287Z",
        "url": "https://files.pythonhosted.org/packages/38/a3/42ac7822fa0626966bda85de0e917acfed06c0a50d657384790ca4498a43/rawutil-2.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c45a3cada8a23fa439081362dd8fbf3f6df02b117f7f89c17d9ef911eeccb33",
          "md5": "dbb8738c1bae39a1bfe98b13ab18819e",
          "sha256": "5687941ea5c164a770c0463cc2e8df742ed7a897080e72f6c33cda379e814a0a"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbb8738c1bae39a1bfe98b13ab18819e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 15590,
        "upload_time": "2021-06-17T17:28:04",
        "upload_time_iso_8601": "2021-06-17T17:28:04.756369Z",
        "url": "https://files.pythonhosted.org/packages/4c/45/a3cada8a23fa439081362dd8fbf3f6df02b117f7f89c17d9ef911eeccb33/rawutil-2.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaf705372b7dfedffb5dbb2e67eb31e868852a38780c6c9b33f07f7b02c8c1cc",
          "md5": "16869fb3bdfb443dba127fd4275d8693",
          "sha256": "b8082ddddb23cbdd8097956e3c6aedf56406e80ce740557dbe6e13f3e6e886ad"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "16869fb3bdfb443dba127fd4275d8693",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 18744,
        "upload_time": "2021-06-17T17:27:40",
        "upload_time_iso_8601": "2021-06-17T17:27:40.714254Z",
        "url": "https://files.pythonhosted.org/packages/ea/f7/05372b7dfedffb5dbb2e67eb31e868852a38780c6c9b33f07f7b02c8c1cc/rawutil-2.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cb41e8654e16cfec052ee71846b5521380ec450ade026b43ff14ccc815a47c2",
          "md5": "e2e237957d414740cef9f70dbb9381d5",
          "sha256": "ee1bd76bb890311a4cb76fe4c7aa57591d4d69934012c673dfdbcc56450c1b6b"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2e237957d414740cef9f70dbb9381d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 17098,
        "upload_time": "2022-08-09T17:45:47",
        "upload_time_iso_8601": "2022-08-09T17:45:47.042739Z",
        "url": "https://files.pythonhosted.org/packages/8c/b4/1e8654e16cfec052ee71846b5521380ec450ade026b43ff14ccc815a47c2/rawutil-2.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f68b600759092be10b0da98fe1ddc45e51b47c618f656fdd88c511efd82cd04d",
          "md5": "92a141a5b3a82e899e12eadd4a3d61f4",
          "sha256": "e92ba5fab4b6fe806ddf7b90acb61905f1efde494fcb1a6da57bda7f2b228ac3"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "92a141a5b3a82e899e12eadd4a3d61f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 19975,
        "upload_time": "2022-08-09T17:46:31",
        "upload_time_iso_8601": "2022-08-09T17:46:31.178996Z",
        "url": "https://files.pythonhosted.org/packages/f6/8b/600759092be10b0da98fe1ddc45e51b47c618f656fdd88c511efd82cd04d/rawutil-2.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76cdc339e2267799ed625d4961dd2fab659741764ac34b2d79092026d055a1f7",
          "md5": "d2edff31ead07b974b243cc4ce84920b",
          "sha256": "b2eee57629e3151c5c280169c97d0eb343d555d7b06c4cca904c2913165a4982"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2edff31ead07b974b243cc4ce84920b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 17365,
        "upload_time": "2022-08-10T09:38:26",
        "upload_time_iso_8601": "2022-08-10T09:38:26.569750Z",
        "url": "https://files.pythonhosted.org/packages/76/cd/c339e2267799ed625d4961dd2fab659741764ac34b2d79092026d055a1f7/rawutil-2.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a2ba8c981fb59eccbfacb422b2db1abec1b3828f1204770a7c87f69b782c23a",
          "md5": "66d6649f700ad94805efdf4e3f1a99fa",
          "sha256": "55645cb3f271bb33868e55ac27b45ec5e8be35a340ea53117d614796d41d89b0"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "66d6649f700ad94805efdf4e3f1a99fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 20252,
        "upload_time": "2022-08-10T09:38:30",
        "upload_time_iso_8601": "2022-08-10T09:38:30.051822Z",
        "url": "https://files.pythonhosted.org/packages/4a/2b/a8c981fb59eccbfacb422b2db1abec1b3828f1204770a7c87f69b782c23a/rawutil-2.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c2889e2cd2bc2dcbc9fcdfcd044aa5a7e8b08d9302326f2926bb4419305af8a",
          "md5": "a47edde952636a030e4984f48d98e3ba",
          "sha256": "c4a5f1ebd160e54f04941ca1c4a058f86cc3360c529377a5cd9892a8e0d70e93"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a47edde952636a030e4984f48d98e3ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 20861,
        "upload_time": "2022-08-17T16:15:07",
        "upload_time_iso_8601": "2022-08-17T16:15:07.323204Z",
        "url": "https://files.pythonhosted.org/packages/3c/28/89e2cd2bc2dcbc9fcdfcd044aa5a7e8b08d9302326f2926bb4419305af8a/rawutil-2.7.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "187818c5b7b5a9d9899c56def3ecfa828fc782a36f6a0e6e03d16651bb75352e",
          "md5": "a3babfea1815ab2a45e854a5056b30e9",
          "sha256": "92ce5bbb6860d0deed58bdf07490af81bf957a50da8b1bc99225285c07d620e4"
        },
        "downloads": -1,
        "filename": "rawutil-2.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a3babfea1815ab2a45e854a5056b30e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 23511,
        "upload_time": "2022-08-17T16:15:10",
        "upload_time_iso_8601": "2022-08-17T16:15:10.105009Z",
        "url": "https://files.pythonhosted.org/packages/18/78/18c5b7b5a9d9899c56def3ecfa828fc782a36f6a0e6e03d16651bb75352e/rawutil-2.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c2889e2cd2bc2dcbc9fcdfcd044aa5a7e8b08d9302326f2926bb4419305af8a",
        "md5": "a47edde952636a030e4984f48d98e3ba",
        "sha256": "c4a5f1ebd160e54f04941ca1c4a058f86cc3360c529377a5cd9892a8e0d70e93"
      },
      "downloads": -1,
      "filename": "rawutil-2.7.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a47edde952636a030e4984f48d98e3ba",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 20861,
      "upload_time": "2022-08-17T16:15:07",
      "upload_time_iso_8601": "2022-08-17T16:15:07.323204Z",
      "url": "https://files.pythonhosted.org/packages/3c/28/89e2cd2bc2dcbc9fcdfcd044aa5a7e8b08d9302326f2926bb4419305af8a/rawutil-2.7.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "187818c5b7b5a9d9899c56def3ecfa828fc782a36f6a0e6e03d16651bb75352e",
        "md5": "a3babfea1815ab2a45e854a5056b30e9",
        "sha256": "92ce5bbb6860d0deed58bdf07490af81bf957a50da8b1bc99225285c07d620e4"
      },
      "downloads": -1,
      "filename": "rawutil-2.7.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a3babfea1815ab2a45e854a5056b30e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 23511,
      "upload_time": "2022-08-17T16:15:10",
      "upload_time_iso_8601": "2022-08-17T16:15:10.105009Z",
      "url": "https://files.pythonhosted.org/packages/18/78/18c5b7b5a9d9899c56def3ecfa828fc782a36f6a0e6e03d16651bb75352e/rawutil-2.7.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}