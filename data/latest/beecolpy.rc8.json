{
  "info": {
    "author": "Samuel Carlos Pessoa Oliveira",
    "author_email": "samuelcpoliveira@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "**BeeColPy**\n============\n\nBeeColPy is a module for function optimization through artificial bee colony\nalgorithm, a method developed by Karaboga [1], a variant of classical\nparticle swarm optimization.\n\n\n\n**Websites:**\n\n> Source code: https://github.com/renard162/BeeColPy/\n>\n> Introduction: https://en.wikipedia.org/wiki/Artificial_bee_colony_algorithm\n>\n\n\n\n**Installation**\n------------\n\n**Dependencies**\n\n> BeeColPy requires:\n>\n> - Python (>= 3.0)\n> - NumPy (>= 1.1.0)\n>\n> **BeeColPy do not support Python 2.7.**\n\n**User installation**\n\n~~~~~~~~~~~~~~~~~\npip install beecolpy\n~~~~~~~~~~~~~~~~~\n\n\n\n**Usage Instructions**\n----------\n\n**For cost functions with continuous domain:**\n\n~~~~~~~~~~~~~~~~~python\n#Step-by-step:\n#Create object and set the solver parameters:\nabc_obj = abc(function,\n              boundaries,\n              colony_size=40,\n              scouts=0.5,\n              iterations=50,\n              min_max='min',\n              nan_protection=True,\n              log_agents=True)\n\n#Execute algorithm: \nabc_obj.fit()\n\n#Get solution obtained after fit() execution:\nsolution = abc_obj.get_solution()\n\n\"\"\"\n    Obs.: Each time fit() was executed, the algorithm iterate \n    'iterations' times resuming from last fit() execution.\n\"\"\"\n\n\"\"\"\n    Parameters\n    ----------\n    function : Name\n        A name of a function to minimize/maximize.\n        Example: if the function is:\n            def my_func(x): return x[0]**2 + x[1]**2 + 5*x[1]\n            \n            Use \"my_func\" as parameter.\n\n\n    boundaries : List of Tuples\n        A list of tuples containing the lower and upper boundaries of \n        each dimension of function domain.\n\n        Obs.: The number of boundaries determines the dimension of \n        function.\n\n        Example: A function F(x1, x2) = y with:\n            (-5 <= x1 <= 5) and (-20 <= x2 <= 20) have the boundaries:\n                [(-5,5), (-20,20)]\n\n\n    [colony_size] : Int --optional-- (default: 40)\n        A value that determines the number of bees in algorithm. Half \n        of this amount determines the number of points analyzed (food \n        sources).\n\n        According articles, half of this number determines the amount \n        of Employed bees and other half is Onlooker bees.\n\n\n    [scouts] : Float --optional-- (default: 0.5)\n        Determines the limit of tries for scout bee discard a food \n        source and replace for a new one.\n            - If scouts = 0 : \n                Scout_limit = colony_size * dimension\n\n            - If scouts = (0 to 1) : \n                Scout_limit = colony_size * dimension * scouts\n                    Obs.: scouts = 0.5 is used in [3] as benchmark.\n\n            - If scouts >= 1 : \n                Scout_limit = scouts\n\n        Obs.: Scout_limit is rounded down in all cases.\n\n\n    [iterations] : Int --optional-- (default: 50)\n        The number of iterations executed by algorithm.\n\n\n    [min_max] : String --optional-- (default: 'min')\n        Determines if algorithm will minimize or maximize the function.\n            - If min_max = 'min' : (default)\n                Locate the minimum of function.\n\n            - If min_max = 'max' : \n                Locate the maximum of function.\n\n\n    [nan_protection] : Boolean --optional-- (default: True)\n        If true, re-generate food sources that get NaN value as cost \n        during initialization or during scout events. This option \n        usually helps the algorithm stability because, in rare cases, \n        NaN values can lock the algorithm in a infinite loop.\n        \n        Obs.: NaN protection can drastically increases calculation \n        time if analysed function has too many values of domain \n        returning NaN.\n\n\n    [log_agents] : Boolean --optional-- (default: False)\n        If true, beecolpy will register, before each iteration, the\n        position of each food source. Useful to debug but, if there a\n        high amount of food sources and/or iterations, this option\n        drastically increases memory usage.\n\n\n    [seed] : Int --optional-- (default: None)\n        If defined as an int, set the seed used in all random process.\n\n\n    Methods\n    ----------\n    fit()\n        Execute the algorithm with defined parameters.\n\n        Obs.: Returns a list with values found as minimum/maximum \n        coordinate.\n\n\n    get_solution()\n        Returns the value obtained after fit() the method.\n\n\n    get_status()\n        Returns a tuple with:\n            - Number of complete iterations executed\n            - Number of scout events during iterations\n            - Number of times that NaN protection was activated\n\n\n    get_agents()\n        Returns a list with the position of each food source during\n        each iteration if \"log_agents = True\".\n\n        Parameters\n        ----------\n        [reset_agents] : bool --optional-- (default: False)\n            If true, the food source position log will be cleaned in\n            next fit().\n\"\"\"\n~~~~~~~~~~~~~~~~~\n\n\n\n**For cost function with binary domain:**\n\n~~~~~~~~~~~~~~~~~python\n#Step-by-step:\n#Create object and set the solver parameters:\nbin_abc_obj = bin_abc(function,\n                      bits_count,\n                      method='am',\n                      colony_size=40,\n                      scouts=0.5,\n                      iterations=50,\n                      best_model_iterations=0,\n                      min_max='min',\n                      nan_protection=True,\n                      transfer_function='sigmoid',\n                      best_model_iterations=0,\n                      log_agents=True)\n\n#Execute algorithm: \nbin_abc_obj.fit()\n\n#Get solution after execute fit() without execute it again:\nsolution = bin_abc_obj.get_solution()\n\n\"\"\"\n    Obs.: Each time fit() was executed, the algorithm iterate \n    'iterations' times resuming from last fit() execution.\n\"\"\"\n\n\"\"\"\n    Parameters\n    ----------\n    function : Name\n        A name of a function to minimize/maximize.\n\n        Example: if the function is:\n            def my_func(x): return x[0] or (x[1] and x[2])\n\n            Use \"my_func\" as parameter.\n\n\n    -=x=--=x=--=x=--=x=--=x=-\n\n    Just one of these parameters are mandatory. If you don't know \n    exactly how binary solvers work, just inform the number of bits \n    (bits_count) and the default boundaries will be used. These \n    boundaries usually are enough to solve most problems.\n\n    bits_count : Int\n        The number of bits that compose the output vector.\n\n\n    boundaries : List of Tuples\n        A list of tuples containing the lower and upper boundaries \n        that will be applied over sigmoid or angle modulation function \n        to determine the probability to bit become 1.\n\n        Example: A function F(b1, b2) = y with:\n            (-5 <= b1 <= 5) and (-20 <= b2 <= 20) have the boundaries:\n                [(-5,5), (-20,20)]\n\n    Obs.:\n        - If boundaries are set: \n            boundaries take the priority over the bits_count.\n\n        - If boundaries are not set: \n            boundaries became (-2,2) to each bit in AMABC method or \n            (-10,10) to each bit in BABC method.\n\n    -=x=--=x=--=x=--=x=--=x=-\n\n\n    [method] : String --optional-- (default: 'am')\n        Select the applied solver:\n            - If method = 'am' : (default)\n                Applied Angle Modulated ABC (AMABC).\n\n            - If method = 'bin' : \n                Applied Binary ABC (BABC).\n\n\n    [colony_size] : Int --optional-- (default: 40)\n        A value that determines the number of bees in algorithm. Half \n        of this amount determines the number of points analyzed \n        (food sources).\n\n        According articles, half of this number determines the amount \n        of Employed bees and other half is Onlooker bees.\n\n\n    [scouts] : Float --optional-- (default: 0.5)\n        Determines the limit of tries for scout bee discard a food \n        source and replace for a new one.\n            - If scouts = 0 : \n                Scout_limit = colony_size * dimension\n\n            - If scouts = (0 to 1) : \n                Scout_limit = colony_size * dimension * scouts\n                    Obs.: scouts = 0.5 is used in [3] as benchmark.\n\n            - If scouts >= 1 : \n                Scout_limit = scouts\n\n        Obs.1: Scout_limit is rounded down in all cases.\n\n        Obs.2: In Binary form, the scouts tends to be more relevant \n        than in continuous form. If your problem are badly solved, \n        try to reduce the scouts value.\n\n\n    [iterations] : Int --optional-- (default: 50)\n        The number of iterations executed by algorithm.\n\n\n    [min_max] : String --optional-- (default: 'min')\n        Determines if algorithm will minimize or maximize the function.\n            - If min_max = 'min' : (default)\n                Locate the minimum of function.\n\n            - If min_max = 'max' : \n                Locate the maximum of function.\n\n\n    [nan_protection] : Boolean or Int --optional-- \n    (default (boolean): True)\n        With \"method='am'\", this variable are used as a boolean.\n\n        With \"method='bin'\", this variable determines the number of \n        times the function are recalculated when it returns a NaN. \n        (default (int): 3)\n\n        If true or greater than 0, re-generate food sources that get \n        NaN value as cost during initialization or during scout \n        events. This option usually helps the algorithm stability \n        because, in rare cases, NaN values can lock the algorithm in \n        a infinite loop.\n\n        Obs.: NaN protection can drastically increases calculation \n        time if analysed function has too many values of domain \n        returning NaN.\n\n\n    [transfer_function] : String --optional-- (default: 'sigmoid')\n        Only used with \"method='bin'\". Defines the transfer function \n        used to calculate the probability for each bit becomes '1'.\n\n        The possibilities are explained on article [6]:\n            - If transfer_function = 'sigmoid' : (default)\n                S(x) = 1/(1 + exp(-x))\n\n            - If transfer_function = 'sigmoid-2x' : \n                S(x) = 1/(1 + exp(-2*x))\n\n            - If transfer_function = 'sigmoid-x/2' : \n                S(x) = 1/(1 + exp(-x/2))\n\n            - If transfer_function = 'sigmoid-x/3' : \n                S(x) = 1/(1 + exp(-x/3))\n\n\n    [result_format] : String --optional-- (default: 'best')\n        Only used with \"method='bin'\". In a stochastic method, the \n        result vector are represented by a probability vector with\n        the probability of each bit becomes \"True\". This property \n        determines how output bit vector will be estimated.\n            - If result_format = 'average' :\n                Returns the most frequent bit vector after \n                \"best_model_iterations\" simulations of the probability\n                vector. This approach is ideal to solve problems with\n                highly random elements.\n                    Obs.: To use this method efficiently, use high \n                    values in \"best_model_iterations\". Usually values \n                    greater than 100 have better results.\n\n            - If result_format = 'best' : (default)\n                Returns the best result after \"best_model_iterations\" \n                simulations of the probability vector. This approach is \n                useful to solve highly noisy problems.\n\n\n    [best_model_iterations] : int --optional-- \n    (default: iterations count)\n        Only used with \"method='bin'\". Due stochastic aspect of \n        Binary form of particle based metaheuristic, after execution \n        of ABC, the cost function will be calculated \n        \"best_model_iterations\" times and the \"best\" or the \"most \n        frequent\" result will be returned.\n            - If best_model_iterations = 0 : (default)\n                Tries \"iterations\" times. \n\n            - If best_model_iterations = N : \n                Tries \"N\" times.\n\n            Obs.: If \"best_model_iterations\" (or \"iterations\") is even, \n            then \"best_model_iterations\" is increased by one.\n\n\n    [log_agents] : Boolean --optional-- (default: False)\n        If true, beecolpy will register, before each iteration, the\n        position of each food source. Useful to debug but, if there a\n        high amount of food sources and/or iterations, this option\n        drastically increases memory usage.\n\n\n    [seed] : Int --optional-- (default: None)\n        If defined as an int, set the seed used in all random process.\n\n\n    Methods\n    ----------\n    fit()\n        Execute the algorithm with defined parameters.\n\n        Obs.: Returns a list with values found as minimum/maximum \n        coordinate.\n\n\n    get_solution()\n        Returns the value obtained after fit() the method.\n\n        Parameters\n        ----------\n        [probability_vector] : bool --optional-- (default: False)\n            Only used with \"method='bin'\". Returns the vector with \n            probability of each bit becomes \"True\". Useful to use \n            probability as component of stopping criteria or to \n            evaluate solution stability.\n                - If probability_vector = True :\n                    \"get_solution\" returns a vector with the \n                    probability of each bit becomes \"True\".\n\n                - If probability_vector = False: (default)\n                    \"get_solution\" returns the solution bit vector.\n\n\n    get_status()\n        Returns a tuple with:\n            - Number of complete iterations executed\n            - Number of scout events during iterations\n            - Number of times that NaN protection was activated\n\n\n    get_agents()\n        Returns a list with the position of each food source during\n        each iteration if \"log_agents = True\".\n\n        Obs.: In binary form, this method returns the position of \n        each food source after transformation \"binary -> continuous\". \n        I.e. returns the values applied on angle modulation function \n        in AMABC or the values applied on transfer function in BABC.\n\n        Parameters\n        ----------\n        [reset_agents] : bool --optional-- (default: False)\n            If true, the food source position log will be cleaned in\n            next fit().\n\"\"\"\n~~~~~~~~~~~~~~~~~\n\n\n\n**Example**\n----------\n\n~~~~~~~~~~~~~~~~~python\n\"\"\"\nTo find the minimum  of sphere function on interval (-10 to 10) with\n2 dimensions in domain using default parameters:\n\"\"\"\n\nfrom beecolpy import abc\n\ndef sphere(x):\n\ttotal = 0\n\tfor i in range(len(x)):\n\t\ttotal += x[i]**2\n\treturn total\n\t\nabc_obj = abc(sphere, [(-10,10), (-10,10)]) #Load data\nabc_obj.fit() #Execute the algorithm\n\n#If you want to get the obtained solution after execute the fit() method:\nsolution = abc_obj.get_solution()\n\n#If you want to get the number of iterations executed, number of times that\n#scout event occur and number of times that NaN protection actuated:\niterations = abc_obj.get_status()[0]\nscout = abc_obj.get_status()[1]\nnan_events = abc_obj.get_status()[2]\n\n#If you want to get a list with position of all points (food sources) used in each iteration:\nfood_sources = abc_obj.get_agents()\n\n~~~~~~~~~~~~~~~~~\n\n\n\n**Author**\n--------------\n\n**Samuel Carlos Pessoa Oliveira** - samuelcpoliveira@gmail.com\n\n\n\n**License**\n--------------\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n\n\n**Bibliography**\n---------------\n\n[1] Karaboga, D. and Basturk, B., 2007 A powerful and efficient algorithm for numerical\tfunction optimization: artificial bee colony ABC) algorithm. Journal of global optimization, 39(3), pp.459-471. Doi: https://doi.org/10.1007/s10898-007-9149-x\n\n[2] Liu, T., Zhang, L. and Zhang, J., 2013 Study of binary artificial bee colony algorithm based on particle swarm optimization. Journal of Computational Information Systems, 9(16), pp.6459-6466. Link: https://api.semanticscholar.org/CorpusID:8789571\n\n[3] Anuar, S., Selamat, A. and Sallehuddin, R., 2016 A modified scout bee for artificial bee colony algorithm and its performance on optimization problems. Journal of King Saud University-Computer and Information Sciences, 28(4), pp. 95-406. Doi: https://doi.org/10.1016/j.jksuci.2016.03.001\n\t\n[4] Kennedy, J. and Eberhart, R.C., 1997, October. A discrete binary version of the particle swarm algorithm. In 1997 IEEE International conference on systems, man, and cybernetics. Computational cybernetics and simulation (Vol. 5, pp. 4104-4108). IEEE. Doi: https://doi.org/10.1109/ICSMC.1997.637339\n\n[5] PamparÃ¡, G. and Engelbrecht, A.P., 2011, April. Binary artificial bee colony optimization. In 2011 IEEE Symposium on Swarm Intelligence (pp. 1-8). IEEE. Doi: https://doi.org/10.1109/SIS.2011.5952562\n\n[6] Mirjalili, S., Hashim, S., Taherzadeh, G., Mirjalili, S.Z. and Salehi, S., 2011. A study of different transfer functions for binary version of particle swarm optimization. In International Conference on Genetic and Evolutionary Methods (Vol. 1, No. 1, pp. 2-7). Link: http://hdl.handle.net/10072/48831\n\n[7] Huang, S.C., 2015. Polygonal approximation using an artificial bee colony algorithm. Mathematical Problems in Engineering, 2015. Doi: https://doi.org/10.1155/2015/375926",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/renard162/BeeColPy",
    "keywords": "PSO,ABC,Bee,Colony,Binary,Angle Modulated,Solver,Optimize,metaheuristic",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "beecolpy",
    "package_url": "https://pypi.org/project/beecolpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/beecolpy/",
    "project_urls": {
      "Homepage": "https://github.com/renard162/BeeColPy"
    },
    "release_url": "https://pypi.org/project/beecolpy/2.3.2/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Artificial Bee Colony solver",
    "version": "2.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10296543,
  "releases": {
    "1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a7e4e15f025b3af4f66ad6b67b012acb4bb905a39eeb186ec81134d003abea5",
          "md5": "133e3090ff30f3aa06884fca0ffffbe2",
          "sha256": "863f420ff35da2fc6828eeafabd426436537b5f7fd67fcdc67769463e8c87d55"
        },
        "downloads": -1,
        "filename": "beecolpy-1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "133e3090ff30f3aa06884fca0ffffbe2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 6141,
        "upload_time": "2020-04-27T02:07:29",
        "upload_time_iso_8601": "2020-04-27T02:07:29.115604Z",
        "url": "https://files.pythonhosted.org/packages/9a/7e/4e15f025b3af4f66ad6b67b012acb4bb905a39eeb186ec81134d003abea5/beecolpy-1.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f22124e9a16809976bfbd20dfa686a093e78af353cc422d51647eafc8d3b1e0e",
          "md5": "d58f58c04ac64c6d6fb522cfc1185c2b",
          "sha256": "942302d2ca8bcad7d9f91e04719b021c8c312b737ebbb4ee4783dc143b076277"
        },
        "downloads": -1,
        "filename": "beecolpy-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d58f58c04ac64c6d6fb522cfc1185c2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 6136,
        "upload_time": "2020-05-30T03:14:46",
        "upload_time_iso_8601": "2020-05-30T03:14:46.217015Z",
        "url": "https://files.pythonhosted.org/packages/f2/21/24e9a16809976bfbd20dfa686a093e78af353cc422d51647eafc8d3b1e0e/beecolpy-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d92982ab90166600db6a4ca461498027d450e9a23c789eae4b03a36d4df409fe",
          "md5": "9d43732bac7881d655d029bf72f7c84a",
          "sha256": "d9552c61824e1de87388f772e5c9b744104c67ad8045eb47b583535361630ad3"
        },
        "downloads": -1,
        "filename": "beecolpy-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9d43732bac7881d655d029bf72f7c84a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 16006,
        "upload_time": "2020-09-28T11:19:37",
        "upload_time_iso_8601": "2020-09-28T11:19:37.134776Z",
        "url": "https://files.pythonhosted.org/packages/d9/29/82ab90166600db6a4ca461498027d450e9a23c789eae4b03a36d4df409fe/beecolpy-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47ffe7343bfd6d17af3c3af70fc78d11a2f62c0481e1495dd1d0678846ecd1cd",
          "md5": "297c28bac0835876cd4b6afcb358cb6a",
          "sha256": "fbfa1faa23eb43b3fa11981894c6adc3b715ee53f14da13251c761597df00d85"
        },
        "downloads": -1,
        "filename": "beecolpy-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "297c28bac0835876cd4b6afcb358cb6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 16447,
        "upload_time": "2020-10-14T05:44:53",
        "upload_time_iso_8601": "2020-10-14T05:44:53.308973Z",
        "url": "https://files.pythonhosted.org/packages/47/ff/e7343bfd6d17af3c3af70fc78d11a2f62c0481e1495dd1d0678846ecd1cd/beecolpy-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49fe4081c6b1e85af4e0bdbe1e551aacc2f8e86519ab0c63afdfdebf6f807131",
          "md5": "96eacc95cba002fef0896e1063296b79",
          "sha256": "ade0fb4783bd602ea9788cff462a44e44a9226a5418040e2d55b02a0a2a728a5"
        },
        "downloads": -1,
        "filename": "beecolpy-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "96eacc95cba002fef0896e1063296b79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 17184,
        "upload_time": "2020-11-07T11:10:42",
        "upload_time_iso_8601": "2020-11-07T11:10:42.766789Z",
        "url": "https://files.pythonhosted.org/packages/49/fe/4081c6b1e85af4e0bdbe1e551aacc2f8e86519ab0c63afdfdebf6f807131/beecolpy-2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed203c416f73112b058b34b1b9d4cf461be248c11dcb285dfff5a7defb1cd387",
          "md5": "429e9ce9c52b81ab301935366db55f90",
          "sha256": "1963f96fda985d1c7b6bcbe12cadf9ef6896bb6e70dfb807c228becb598e4d8a"
        },
        "downloads": -1,
        "filename": "beecolpy-2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "429e9ce9c52b81ab301935366db55f90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 20331,
        "upload_time": "2020-12-19T03:17:10",
        "upload_time_iso_8601": "2020-12-19T03:17:10.606039Z",
        "url": "https://files.pythonhosted.org/packages/ed/20/3c416f73112b058b34b1b9d4cf461be248c11dcb285dfff5a7defb1cd387/beecolpy-2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10636a223ce90b50a8f083d217865ebc33c25fc118c5deb5727c185477332f95",
          "md5": "22617b95a5242c970756f264ed88d970",
          "sha256": "e8edc698aa7f6efd8fc1c278d014488bca59ebd8355eff391ce5d4dffbcbce88"
        },
        "downloads": -1,
        "filename": "beecolpy-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "22617b95a5242c970756f264ed88d970",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 20770,
        "upload_time": "2021-01-30T16:29:42",
        "upload_time_iso_8601": "2021-01-30T16:29:42.233024Z",
        "url": "https://files.pythonhosted.org/packages/10/63/6a223ce90b50a8f083d217865ebc33c25fc118c5deb5727c185477332f95/beecolpy-2.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e4a7f09336e903613849c2cd8800f61a7ae057c360641747c7a5cd183cb17e3",
          "md5": "b683fca91bf5e7df9528e4fe16ab7a2a",
          "sha256": "c0a58cf69f99a7b94b2da3faf453dab19067025bb8d826fd3f5a6579b2fa2f0c"
        },
        "downloads": -1,
        "filename": "beecolpy-2.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b683fca91bf5e7df9528e4fe16ab7a2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 20408,
        "upload_time": "2021-05-08T19:58:56",
        "upload_time_iso_8601": "2021-05-08T19:58:56.122096Z",
        "url": "https://files.pythonhosted.org/packages/5e/4a/7f09336e903613849c2cd8800f61a7ae057c360641747c7a5cd183cb17e3/beecolpy-2.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e4a7f09336e903613849c2cd8800f61a7ae057c360641747c7a5cd183cb17e3",
        "md5": "b683fca91bf5e7df9528e4fe16ab7a2a",
        "sha256": "c0a58cf69f99a7b94b2da3faf453dab19067025bb8d826fd3f5a6579b2fa2f0c"
      },
      "downloads": -1,
      "filename": "beecolpy-2.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b683fca91bf5e7df9528e4fe16ab7a2a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 20408,
      "upload_time": "2021-05-08T19:58:56",
      "upload_time_iso_8601": "2021-05-08T19:58:56.122096Z",
      "url": "https://files.pythonhosted.org/packages/5e/4a/7f09336e903613849c2cd8800f61a7ae057c360641747c7a5cd183cb17e3/beecolpy-2.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}