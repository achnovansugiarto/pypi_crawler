{
  "info": {
    "author": "Vanessa Sochat",
    "author_email": "vsochat@stanford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Natural Language :: English",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Container Database (cdb)\n\nThis is the Python support tool for [containerdb](https://github.com/vsoch/containerdb)\nto support generation of [data containers](https://github.com/singularityhub/data-container).\nPython is more friendly to generating arbitrary data structures, and is popular among the\ndata science community, so I chose it for metadata generation instead of using GoLang.\n\n[![PyPI version](https://badge.fury.io/py/cdb.svg)](https://badge.fury.io/py/cdb)\n\n> Have your data and use it too!\n\n![assets/img/logo/logo.png](assets/img/logo/logo.png)\n\nFor documentation and full examples see [vsoch.github.io/cdb](https://vsoch.github.io/cdb). These\nexamples are also available in the [examples](examples) folder.\n\n## Getting Started\n\n### What is a Data Container?\n\nA data container is generally an operating-system-less container that is optimized\nto provide data, either for query/search, or binding for analysis. The qualities of\nthe data container should be:\n\n 1. It can be mounted to containers with operating systems to run analysis\n 2. It can be interacted with on it's own to search metadata about the data\n 3. It should not have an operating system.\n\n### How do we generate one?\n\nThe generation is fairly simple! It comes down to a three step multistage build:\n\n 1. **Step 1** We install [cdb](https://github.com/vsoch/cdb) to generate a GoLang template for an [in-memory database](https://github.com/vsoch/containerdb) for our data) \n 2. **Step 2** We compile the binary into an entrypoint\n 3. **Step 3** We add the data and the binary entrypoint to a scratch container (no operating system).\n\nAnd then we interact with it! This tutorial will show you the basic steps to\nperform the multistage-build using a simple [Dockerfile](https://github.com/vsoch/cdb/tree/master/examples/docker-simple/Dockerfile) along with the data folder. The [Dockerfile](Dockerfile) in the base of the repository also is a good example.\n\n## Usage\n\n### Docker Usage\n\nThe intended usage is via Docker, so you don't need to worry about installation of\nPython, GoLang, and multistage builds to basically:\n\n 1. Generate a db.go template\n 2. Compile it\n 3. Add to scratch with data as data container entrypoint.\n\nThus, to run the dummy example here using the [Dockerfile](Dockerfile):\n\n```bash\n$ docker build -t data-container .\n```\n\nWe then have a simple way to do the following:\n\n**metadata**\n\nIf we just run the container, we get a listing of all metadata alongside the key.\n\n```bash\n$ docker run entrypoint \n/data/avocado.txt {\"size\": 9, \"sha256\": \"327bf8231c9572ecdfdc53473319699e7b8e6a98adf0f383ff6be5b46094aba4\"}\n/data/tomato.txt {\"size\": 8, \"sha256\": \"3b7721618a86990a3a90f9fa5744d15812954fba6bb21ebf5b5b66ad78cf5816\"}\n```\n\n**list** \n\nWe can also just list data files with `-ls`\n\n```bash\n$ docker run entrypoint -ls\n/data/avocado.txt\n/data/tomato.txt\n```\n\n**orderby**\n\nOr we can list ordered by one of the metadata items:\n\n```bash\n$ docker run entrypoint -metric size\nOrder by size\n/data/tomato.txt: {\"size\": 8, \"sha256\": \"3b7721618a86990a3a90f9fa5744d15812954fba6bb21ebf5b5b66ad78cf5816\"}\n/data/avocado.txt: {\"size\": 9, \"sha256\": \"327bf8231c9572ecdfdc53473319699e7b8e6a98adf0f383ff6be5b46094aba4\"}\n```\n\n**search**\n\nOr search for a specific metric based on value.\n\n```bash\n$ docker run entrypoint -metric size -search 8\n/data/tomato.txt 8\n\n$ docker run entrypoint -metric sha256 -search 8\n/data/avocado.txt 327bf8231c9572ecdfdc53473319699e7b8e6a98adf0f383ff6be5b46094aba4\n/data/tomato.txt 3b7721618a86990a3a90f9fa5744d15812954fba6bb21ebf5b5b66ad78cf5816\n```\n\n**get**\n\nOr we can get a particular file metadata by it's name:\n\n```bash\n$ docker run entrypoint -get /data/avocado.txt\n/data/avocado.txt {\"size\": 9, \"sha256\": \"327bf8231c9572ecdfdc53473319699e7b8e6a98adf0f383ff6be5b46094aba4\"}\n```\n\nor a partial match:\n\n```bash\n$ docker run entrypoint -get /data/\n/data/avocado.txt {\"size\": 9, \"sha256\": \"327bf8231c9572ecdfdc53473319699e7b8e6a98adf0f383ff6be5b46094aba4\"}\n/data/tomato.txt {\"size\": 8, \"sha256\": \"3b7721618a86990a3a90f9fa5744d15812954fba6bb21ebf5b5b66ad78cf5816\"}\n```\n\n**start**\n\nThe start command is intended to keep the container running, if we are using\nit with an orchestrator.\n\n```bash\n$ docker run data-container -start\n```\n\n### Orchestration\n\nIt's more likely that you'll want to interact with files in the container via\nsome analysis, or more generally, another container. Let's put together\na quick `docker-compose.yml` to do exactly that.\n\n```\nversion: \"3\"\nservices:\n  base:\n    restart: always\n    image: busybox\n    entrypoint: [\"tail\", \"-f\", \"/dev/null\"]\n    volumes:\n      - data-volume:/data\n\n  data:\n    restart: always\n    image: data-container\n    command: [\"-start\"]\n    volumes:\n      - data-volume:/data\n\nvolumes:\n  data-volume:\n```\n\nNotice that the command for the data-container to start is `-start`, which\nis important to keep it running. After building our `data-container`, we can then bring these containers up:\n\n\n```bash\n$ docker-compose up -d\nStarting docker-simple_base_1   ... done\nRecreating docker-simple_data_1 ... done\n```\n```bash\n$ docker-compose ps\n        Name                Command         State   Ports\n---------------------------------------------------------\ndocker-simple_base_1   tail -f /dev/null    Up           \ndocker-simple_data_1   /entrypoint -start   Up           \n```\n\nWe can then shell inside and see our data!\n\n```bash\n$ docker exec -it docker-simple_base_1 sh\n/ # ls /data/\navocado.txt  tomato.txt\n```\n\nThe metadata is still available for query by interacting with the data-container\nentrypoint:\n\n```bash\n$ docker exec docker-simple_data_1 /entrypoint -ls\n/data/avocado.txt\n/data/tomato.txt\n```\n\nDepending on your use case, you could easily make this available inside the\nother container. This is very simple usage, but the idea is powerful! We can interact with the dataset\nand search it without needing an operating system. It follows that we can develop\ncustomized data-containers based on the format / organization of the data inside \n(e.g., a data-container that knows how to expose inputs, outputs, etc.)\n\n\n## Python Usage\n\nThe above doesn't require you to install the Container Database (cdb) metadata\ngenerator, however if you want to (to develop or otherwise interact) you\ncan do the following. First, install cdb from pypi or a local repository:\n\n```bash\n$ pip install cdb\n```\nor\n\n```bash\ngit clone git@github.com:vsoch/cdb\ncd cdb\npip install -e .\n```\n\n### Command Line \n\nThe next step is to generate the goLang file to compile.\nYou'll next want to change directory to somewhere you have a dataset folder.\nFor example, in [tests](tests) we have a dummy \"data\" folder.\n\n```bash\ncd tests/\n```\n\nWe might then run `cdb generate` to create a binary for our container, targeting\nthe [tests/data](tests/data) folder:\n\n```bash\n$ cdb generate data --out db.go\n```\n\nThe db.go file is then in the present working directory. You can either\nbuild it during a multistage build as is done in the [Dockerfile](Dockerfile),\nor do it locally with your own GoLang install and then add to the container.\nFor example, to compile:\n\n```bash\ngo get github.com/vsoch/containerdb && \\\nGOOS=linux GOARCH=amd64 go build -ldflags=\"-w -s\" -o /db -i /db.go\n```\n\nAnd then a very basic Dockerfile would need to add the data at the path specified,\nand the compiled entrypoint.\n\n```bash\nFROM scratch\nWORKDIR /data\nCOPY data/ .\nCOPY db /db\nCMD [\"/db\"]\n```\n\nA more useful entrypoint will be developed soon! This is just a very\nbasic start to the library.\n\n### Python\n\nYou can run the same generation functions interactively with Python.\n\n```python\nfrom cdb.main import ContainerDatabase\ndb = ContainerDatabase(path=\"data\")\n# <cdb.main.ContainerDatabase at 0x7fcaa9cb8950>\n```\n\nView that there is a files generator at `db.files`\n\n```python\ndb.files\n<generator object recursive_find at 0x7fcaaa4ae950>\n```\n\n\nAnd then generate! If you don't provide an output file, a string will be returned.\nOtherwise, the output file name is returned.\n\n```python\noutput = db.generate(output=\"db.go\", force=True)\n```\n\nCurrently, functions for parsing metadata are named in [cdb/functions.py](cdb/functions.py),\nhowever you can also define a custom import path. This has not yet been tested \nand will be soon. We will also be added more real world examples soon.\n\n## License\n\n * Free software: MPL 2.0 License",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vsoch/cdb",
    "keywords": "containers,metadata,database",
    "license": "LICENSE",
    "maintainer": "Vanessa Sochat",
    "maintainer_email": "vsochat@stanford.edu",
    "name": "cdb",
    "package_url": "https://pypi.org/project/cdb/",
    "platform": "",
    "project_url": "https://pypi.org/project/cdb/",
    "project_urls": {
      "Homepage": "https://github.com/vsoch/cdb"
    },
    "release_url": "https://pypi.org/project/cdb/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "container database (cdb) metadata generation tool.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7475214,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "712d5e39b9784c4b26aca8ead8c69232e15923f283d8dc5dfb6a26bc9f6d55ee",
          "md5": "1ac8f212f7a0615d759763151d7d1717",
          "sha256": "68c62642eb2be0dfdc8878c7c308b89bd25d96f83962daf3c32ab15ad6e9390c"
        },
        "downloads": -1,
        "filename": "cdb-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ac8f212f7a0615d759763151d7d1717",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19387,
        "upload_time": "2020-06-12T21:07:05",
        "upload_time_iso_8601": "2020-06-12T21:07:05.676649Z",
        "url": "https://files.pythonhosted.org/packages/71/2d/5e39b9784c4b26aca8ead8c69232e15923f283d8dc5dfb6a26bc9f6d55ee/cdb-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd416a1bed74b0c0294d2856d3a68bf26104e906a9d8d59d1d534dac6601618a",
          "md5": "a5cd1fba810968a880fcb708b00c6c0c",
          "sha256": "95195ea93dee9bbe9f1d2fd2d6060ec23e18405b83e04ace8d62d23fb44be953"
        },
        "downloads": -1,
        "filename": "cdb-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a5cd1fba810968a880fcb708b00c6c0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23588,
        "upload_time": "2020-06-14T19:54:28",
        "upload_time_iso_8601": "2020-06-14T19:54:28.245703Z",
        "url": "https://files.pythonhosted.org/packages/bd/41/6a1bed74b0c0294d2856d3a68bf26104e906a9d8d59d1d534dac6601618a/cdb-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd416a1bed74b0c0294d2856d3a68bf26104e906a9d8d59d1d534dac6601618a",
        "md5": "a5cd1fba810968a880fcb708b00c6c0c",
        "sha256": "95195ea93dee9bbe9f1d2fd2d6060ec23e18405b83e04ace8d62d23fb44be953"
      },
      "downloads": -1,
      "filename": "cdb-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a5cd1fba810968a880fcb708b00c6c0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23588,
      "upload_time": "2020-06-14T19:54:28",
      "upload_time_iso_8601": "2020-06-14T19:54:28.245703Z",
      "url": "https://files.pythonhosted.org/packages/bd/41/6a1bed74b0c0294d2856d3a68bf26104e906a9d8d59d1d534dac6601618a/cdb-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}