{
  "info": {
    "author": "Michel Wilson",
    "author_email": "michel@crondor.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Home Automation"
    ],
    "description": "# Python Homie client\n\nThis is a very basic implementation of a client for IoT devices following the\n[Homie](https://homieiot.github.io/) MQTT convention. Currently, it only\nreally supports sensor-like devices, i.e., those devices that publish retained\nnon-settable properties, as this is at this point in time the only use-case\nI personally have for it.\n\n### Usage\n\nCreate an instance of the client, and connect it to your MQTT server:\n\n```\nfrom homieclient import HomieClient\n\nc = HomieClient(server='10.42.0.1')\n```\n\nVarious callbacks can be registered, that will be called when a device, a node\nor a property is discovered or updated:\n\n```\n# Called when a new device is found. Note that at this point not all the nodes\n# of the devices might be discovered yet.\ndef device_discovered(device):\n    print(\"Found device %s, state is %s\" % (device.name, device.state))\nc.on_device_discovered = device_discovered\n\n# Called when an attribute on the device changes, such as $state\ndef device_updated(device, attribute, value):\n    print('Device %s updated: %s = %s' % (device.name, attribute, value))\nc.on_device_updated = device_updated\n\n# Called when a node on a device is found. The device for this node can be\n# accessed via node.device.\ndef node_discovered(node):\n    print('Found node %s on device %s' % (node.name, node.device.name))\n    print('Node properties: %s' % node.properties)\nc.on_node_discovered = node_discovered\n\n# Called when an attribute on a node changes.\ndef node_updated(node, attribute, value):\n    print('%s, node %s: %s = %s' % (node.device.name, node.name, attribute, value))\nc.on_node_updated = node_updated\n\n# Called when a new property on a node is found.\ndef property_discovered(node, property):\n    print('Found property %s on node %s, device %s' % (property, node.name, node.device.name))\nc.on_property_discovered = property_discovered\n\n# Called when a property on a node is updated. The value is a dict\n# containing the name, value and unit of the property\ndef property_updated(node, property, value):\n    print('%s: %s = %s' % (node.name, property, repr(value)))\nc.on_property_updated = property_updated\n```\n\nAfter registering the callbacks you need to connect the client to the broker:\n```\nc.connect()\n```\n\nIt is also possible to access all the devices, nodes and properties via the\nclient, without using any of the callbacks. Every device is exposed as a property\non the client, the nodes are exposed as properties on the device, and the properties\nas properties on the node. So if you have a device with id `outdoor_sensor` with\nnode `sensor` and property `temperature`, you can do\n```\ntemperature = c.outdoor_sensor.sensor.temperature\nprint('%s: %.1f %s' % (temperature.name, temperature.value, temperature.unit))\n```\nThis will print something like\n```\nTemperature: 21.4 Â°C\n```\nassuming the name of the property is `Temperature`, and it reports a `float` value,\nand the weather is quite nice.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/michelwilson/homieclient",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "homieclient",
    "package_url": "https://pypi.org/project/homieclient/",
    "platform": "any",
    "project_url": "https://pypi.org/project/homieclient/",
    "project_urls": {
      "Homepage": "https://github.com/michelwilson/homieclient"
    },
    "release_url": "https://pypi.org/project/homieclient/0.0.1/",
    "requires_dist": [
      "paho-mqtt (==1.5.1)"
    ],
    "requires_python": ">=3.0",
    "summary": "Client to interact with Homie IoT devices via MQTT",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9667664,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77a41bb1b6395af6878b5a582392b82a04e41cf5f5965d3fdaab2e05fa9cee85",
          "md5": "f09df06c2fc82cca3c47c3c66986ef70",
          "sha256": "d0f6fcf8572401dc9669af7f0bd65fffe05d069d516af818acb423c5846b96d9"
        },
        "downloads": -1,
        "filename": "homieclient-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f09df06c2fc82cca3c47c3c66986ef70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 7721,
        "upload_time": "2021-03-04T20:57:45",
        "upload_time_iso_8601": "2021-03-04T20:57:45.848660Z",
        "url": "https://files.pythonhosted.org/packages/77/a4/1bb1b6395af6878b5a582392b82a04e41cf5f5965d3fdaab2e05fa9cee85/homieclient-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3154decb74253a293ffba44311e12c3f31fd5f4179afce48abe2ea9c8b11d45e",
          "md5": "09f4349814375008cd73496e65a654b2",
          "sha256": "36c5573263d4fd7d8af151b8b0a72ca5301394e1f059ba25615fad01c30900fb"
        },
        "downloads": -1,
        "filename": "homieclient-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09f4349814375008cd73496e65a654b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 6884,
        "upload_time": "2021-03-04T20:57:47",
        "upload_time_iso_8601": "2021-03-04T20:57:47.139653Z",
        "url": "https://files.pythonhosted.org/packages/31/54/decb74253a293ffba44311e12c3f31fd5f4179afce48abe2ea9c8b11d45e/homieclient-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77a41bb1b6395af6878b5a582392b82a04e41cf5f5965d3fdaab2e05fa9cee85",
        "md5": "f09df06c2fc82cca3c47c3c66986ef70",
        "sha256": "d0f6fcf8572401dc9669af7f0bd65fffe05d069d516af818acb423c5846b96d9"
      },
      "downloads": -1,
      "filename": "homieclient-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f09df06c2fc82cca3c47c3c66986ef70",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 7721,
      "upload_time": "2021-03-04T20:57:45",
      "upload_time_iso_8601": "2021-03-04T20:57:45.848660Z",
      "url": "https://files.pythonhosted.org/packages/77/a4/1bb1b6395af6878b5a582392b82a04e41cf5f5965d3fdaab2e05fa9cee85/homieclient-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3154decb74253a293ffba44311e12c3f31fd5f4179afce48abe2ea9c8b11d45e",
        "md5": "09f4349814375008cd73496e65a654b2",
        "sha256": "36c5573263d4fd7d8af151b8b0a72ca5301394e1f059ba25615fad01c30900fb"
      },
      "downloads": -1,
      "filename": "homieclient-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "09f4349814375008cd73496e65a654b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 6884,
      "upload_time": "2021-03-04T20:57:47",
      "upload_time_iso_8601": "2021-03-04T20:57:47.139653Z",
      "url": "https://files.pythonhosted.org/packages/31/54/decb74253a293ffba44311e12c3f31fd5f4179afce48abe2ea9c8b11d45e/homieclient-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}