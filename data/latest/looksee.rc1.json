{
  "info": {
    "author": "Gigaquads",
    "author_email": "what@gigaquads.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Looksee Python Module Scanner\nLooksee is a tool for scanning Python packages for objects that match a custom\npredicate, and when there's a match, performing a custom callback, like adding\neach object to a global registry of some kind or triggering logic as an import\nside-effect.\n\nIt's similar to\n[Venusian](https://docs.pylonsproject.org/projects/venusian/en/latest/) but far\nless annoying. Venusian can be a pain in the arse when it comes to handling\nerrors. Often times, you're left scratching your head, trying to figure out\nwhat, if anything, went wrong.\n\n## Install Looksee\nClone the repo or just run...\n```sh\npip install looksee\n```\n\n## Basic Example\nHere's an example of looksee's `Scanner` being used to scan a fictitious\npackage, called `pooply`, for all `PooplyObject` subclasses. When found, we add\neach one to a growing \"context\" dict. Note that the `scan` method returns a\nshallow copy of the context dict, memoizing the original in `scanner.context`.\n\n\n```python\n\nfrom looksee import Scanner\nfrom pooply.base import PooplyObject\n\nscanner = Scanner(\n    predicate=lambda: obj: issubclass(obj, PooplyObject),\n    callback=lambda name, obj, ctx: ctx.update({name: obj})\n)\n\nfound = scanner.scan('pooply')\n\nfor name, class_obj in found.items():\n    print(f'detected {name} class: {class_obj}...')\n```\n\n## Use-cases\n\n### Class Factory Pattern\nSuppose you have a config file that specifies the name of a class to use in your\napplication. To translate the name of the class to an actual class object, you\nwrite code like this:\n\n```python\nfrom project.models.user import User\nfrom project.models.account import Account\n\nclass Model:\n\n    @classmethod\n    def factory(cls, class_name: Text) -> Type:\n        if class_name == 'User':\n            return User\n        if class_name == 'Account':\n            return Account\n        else:\n            raise TypeError(class_name)\n```\n\nBy itself, this seems fine, but when you try to run it, you realize that you've\ncaused a bunch of cyclic import errors by trying to import each subclass into\nthe module containing its base class. Not only that, but the if-statement must\nbe keep up-to-date manually with each new class added to the application. To fix\nthe import errors, you could try moving each import into the `factory` function\nitself, but this would be bad form, and you would still have to update the\nif-statement with each new class.\n\nBy using looksee, you could avoid this altogether by doing something like:\n\n```python\nfrom looksee import Scanner\n\nclass Model:\n\n    # lazy loaded global registry of model subclasses\n    model_classes = {}\n\n    # scanner that detects Model subclasses\n    scanner = Scanner(\n        predicate=lambda obj: issubclass(obj, cls),\n        callback=lambda name, obj, ctx: ctx.update({name: obj})\n    )\n\n    @classmethod\n    def factory(cls, class_name: Text) -> Type:\n        # lazily scan resource modules, picking up subclasses\n        if not cls.model_classes:\n            cls.model_classes = cls.scanner.scan('project.resources')\n\n        # return the named class from the model_classes dict\n        model_class = cls.model_classes.get(class_name)\n        if model_class is None:\n            raise TypeError(class_name)\n\n        return model_class\n```\n\n### Endpoint/Function Registration in a Framework\nMost Python web frameworks use decorators to register endpoints. It's likely that you've seen some form of...\n\n```python\n@app.get(url='/users/{user_id}')\ndef get_user(request, user_id):\n    return User.get(user_id)\n```\n\nInternally, `app.get()` adds the `get_user` function to the app as a route. In\norder to detect each endpoint, the framework must be able to scan the modules\ncontained a project, evaluating decorators as a side-effect. Looksee can be\nused for cases like this. Here is a sketch of how you might achieve this:\n\n```python\nclass Application(HttpServer):\n    def __init__(self, package: Text):\n        self.routes = []\n        self.scanner = Scanner()\n        self.package = package\n\n    def start(self):\n        self.scanner.scan(self.package)\n        self.serve_forever()\n\n    def get(self, url: Text):\n        \"\"\" Register an HTTP GET route \"\"\"\n        return Decorator(self, 'GET', url)\n\n    def post(self, url: Text):\n        \"\"\" Register an HTTP POST route \"\"\"\n        return Decorator(self, 'POST', url)\n\n\nclass Decorator:\n    def __init__(self, app, method: Text, url: Text):\n        self.app = app\n        self.method = method\n        self.url = url\n\n    def __call__(self, func: Callable):\n        self.app.routes.append(Route(url, func))\n\n\nclass Route:\n    def __init__(self, method: Text, url: Text, func: Callable):\n        self.method = method\n        self.url = url\n        self.func = func\n```\n\nNow, when someone using your framework calls `app.start()`, the app's scanner\nwill trigger each decorator in whatever module it resides, simply as a side-effect of being\nimported. This might look something like:\n\n```python\n# file: app.py\n\napp = Application('my_project')\napp.start()\n```\n\n```python\n# file: routes.py\n\nfrom .app import app\n\n@app.get('/users/{user_id}')\ndef get_user(request, user_id):\n    return User.get(user_id)\n```\n\n## Working Example\nA complete working example in which a `Scanner` is used to scan a fictitious project\nis located in the `example/` directory. To run it, just do: \n```sh\npython ./example/scan.py\n```\n\n## Event Hooks\nA couple things can go wrong while performing a scan: either (1) a module cannot\nbe imported due to an error or (2) your callback raises an exception while\nprocessing an object. You can override `Scanner` hook base methods to deal with\nboth of these cases.\n\n### Import Error Hook\n```python\ndef on_import_error(\n    self, exc: Exception, module_path: Text, context: Dict\n):\n    \"\"\"\n    Executes if the scanner can't import a module because of an error.\n    \"\"\"\n````\n\n### Callback Error Hook\n```python\ndef on_callback_error(\n    self, exc: Exception, module: ModuleType, context: Dict, name: Text, obj: Any\n):\n    \"\"\"\n    Execute if scanner encountered error inside custom callback function\n    \"\"\"\n````\n\n### Ignore Directory Hook\nIn addition to handling errors, the scanner can be directed to skip certain\ndirectories. To do so, it looks for a `.looksee` JSON file in the directory to\nskip. That file should contain a JSON object like:\n```json\n{\n  \"ignore\": true\n}\n```\n\nIf the scanner determines that it should ignore a directory, it triggers its\n`on_ignore_directory` hook:\n```python\ndef on_ignore_directory(self, dirpath: Text):\n    \"\"\"\n    Executes when scanner skips a directory because of .looksee file.\n    \"\"\"\n```\n\n## Logging\nYou can easily toggle the internal log level by either setting the\n`LOOKSEE_LOG_LEVEL` environment variable or by passing a custom logger into the\n`Scanner` initializer.\n\n## Questions & Comments\nIf you have any questions or comments, feel free to open an issue or email us directly. We appreciate your contributions and support!\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gigaquads/looksee.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "looksee",
    "package_url": "https://pypi.org/project/looksee/",
    "platform": "",
    "project_url": "https://pypi.org/project/looksee/",
    "project_urls": {
      "Homepage": "https://github.com/gigaquads/looksee.git"
    },
    "release_url": "https://pypi.org/project/looksee/3.0.4/",
    "requires_dist": [
      "appyratus"
    ],
    "requires_python": "",
    "summary": "Looksee walks python modules in the file system, scans them, and executes a custom callback for each object that matches a logical predicate.  This is a less annoying alternative to Venusian scanner.",
    "version": "3.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12072688,
  "releases": {
    "3.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b1513005cb84044a3d592fbca4b81f9cc4da69d4eafea4ee9f47433bbed410f",
          "md5": "8613ee38d91541f2ced8c6370234cd5a",
          "sha256": "30b949097f998104f3863b8ae1d9d4ada760daf3cd71ac5b59d6263d2a766393"
        },
        "downloads": -1,
        "filename": "looksee-3.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8613ee38d91541f2ced8c6370234cd5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7375,
        "upload_time": "2021-11-19T19:10:31",
        "upload_time_iso_8601": "2021-11-19T19:10:31.046677Z",
        "url": "https://files.pythonhosted.org/packages/5b/15/13005cb84044a3d592fbca4b81f9cc4da69d4eafea4ee9f47433bbed410f/looksee-3.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0d59ded3382bedc2b8cea6ee5dbf1d6ac0e00feb4237ed4cc94cb6712e6d065",
          "md5": "763d799597e07fdebe9fb9dd3f3525e0",
          "sha256": "63a83fb50f5e76d252e8467bab22e3aced3d45e32dd3062d02c9bd96b556aacd"
        },
        "downloads": -1,
        "filename": "looksee-3.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "763d799597e07fdebe9fb9dd3f3525e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7797,
        "upload_time": "2021-11-19T19:10:33",
        "upload_time_iso_8601": "2021-11-19T19:10:33.287854Z",
        "url": "https://files.pythonhosted.org/packages/d0/d5/9ded3382bedc2b8cea6ee5dbf1d6ac0e00feb4237ed4cc94cb6712e6d065/looksee-3.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b1513005cb84044a3d592fbca4b81f9cc4da69d4eafea4ee9f47433bbed410f",
        "md5": "8613ee38d91541f2ced8c6370234cd5a",
        "sha256": "30b949097f998104f3863b8ae1d9d4ada760daf3cd71ac5b59d6263d2a766393"
      },
      "downloads": -1,
      "filename": "looksee-3.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8613ee38d91541f2ced8c6370234cd5a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7375,
      "upload_time": "2021-11-19T19:10:31",
      "upload_time_iso_8601": "2021-11-19T19:10:31.046677Z",
      "url": "https://files.pythonhosted.org/packages/5b/15/13005cb84044a3d592fbca4b81f9cc4da69d4eafea4ee9f47433bbed410f/looksee-3.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0d59ded3382bedc2b8cea6ee5dbf1d6ac0e00feb4237ed4cc94cb6712e6d065",
        "md5": "763d799597e07fdebe9fb9dd3f3525e0",
        "sha256": "63a83fb50f5e76d252e8467bab22e3aced3d45e32dd3062d02c9bd96b556aacd"
      },
      "downloads": -1,
      "filename": "looksee-3.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "763d799597e07fdebe9fb9dd3f3525e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7797,
      "upload_time": "2021-11-19T19:10:33",
      "upload_time_iso_8601": "2021-11-19T19:10:33.287854Z",
      "url": "https://files.pythonhosted.org/packages/d0/d5/9ded3382bedc2b8cea6ee5dbf1d6ac0e00feb4237ed4cc94cb6712e6d065/looksee-3.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}