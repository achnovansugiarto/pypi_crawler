{
  "info": {
    "author": "hazbottles",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# flonb\n\n[![Build Status](https://github.com/hazbottles/flonb/workflows/build/badge.svg)](https://github.com/hazbottles/flonb/actions?query=workflow%3Abuild)\n\n`flonb` lets you develop data pipelines (a.k.a task graphs) with very rapid \"modify -> run -> inspect\" iteration loops.\n\nIt lets you:\n- __Label__ each run of the pipeline with a human-readable list of options. Easy to see what you did to the data, easy to reproduce.\n- __Cache__ results automagically based on the labels. Change an option, add a new option - `flonb` will manage the cache without extra boilerplate!\n- __Parallel__ execution of your pipeline. `flonb` pipelines are interoperable with [dask](https://docs.dask.org/en/latest/) schedulers.\n\nSo you can spend more time focussing on your logic, and less time on error-prone boilerplate code.\n\n# Installation\n\n`$ pip install flonb`\n\nNote this also installs `dask.core`. If you require dask extensions (e.g. _dask.bag_, _dask.dataframe_, _dask.delayed_, etc...) then make sure to install them yourself. It can be a bit unclear with `dask` what extensions you have installed! https://docs.dask.org/en/latest/install.html\n\n# Example basic usage\n\nHere is a simple pipeline that counts the number of times a word appears in a block of text.\n\nDefine a Task Graph using:\n\n- `flonb.task_func` decorator for each processing step.\n- `flonb.Dep` as the default parameter value to tell `flonb` which tasks to use as inputs.\n\n\n```python\nimport flonb\n\n\n@flonb.task_func\ndef parse_text(normalise):\n    text = (\n        \"Badger badger badger Mushroom mushroom \"\n        \"Badger badger badger Mushroom mushroom \"\n        \"Badger badger badger SNAKE its a SNAKE \"\n    )\n    words = text.split(\" \")\n    if normalise:\n        words = [w.lower() for w in words]\n    return words\n\n\n@flonb.task_func\ndef word_count(word, text=flonb.Dep(parse_text)):\n    return sum([w == word for w in text])\n```\n\n\nRun the Task Graph using the `.compute` method that `@flonb.task_func` adds to your function.\n\nNote that we supply all the options that specify the entire Task Graph. Even though the function `word_count` does not explicitly require the option `normalise`, its dependency `parse_text` does.\n\n\n```python\nword_count.compute(normalise=False, word=\"badger\")\n```\n\n    6\n\n\nYou can still run your pipeline by manually calling the functions the usual way. This can be handy for debugging:\n\n\n```python\ntext = parse_text(normalise=False)\nword_count(word=\"badger\", text=text)\n```\n\n    6\n\n\nChange the options, and everything works like you'd expect.\n\n\n```python\nword_count.compute(normalise=True, word=\"badger\")\n```\n\n    9\n\n\n\nImportantly, you can use a single option in multiple places in the same pipeline:\n\n\n```python\n@flonb.task_func\ndef summary_str(word, normalise, count=flonb.Dep(word_count)):\n    return f\"word={word}, normalise={normalise} -> count={count}\"\n\nprint(summary_str.compute(word=\"mushroom\", normalise=True))\n```\n\n    word=mushroom, normalise=True -> count=4\n\n\nA typical workflow using `flonb` is:\n\n1. Run pipeline with different options to see the impacts on your data.\n1. Add new options and/or steps.\n1. Repeat.\n\n`flonb` is especially useful because you can add new options early in the Task Graph without having to manually propagate the option through every function in the pipeline!\n\n# Task Graphs\n\nWe can visualize the graph using `dask[complete]` + `graphviz`. You can install these with conda:\n\n`$ conda install dask python-graphviz`\n\nSee https://docs.dask.org/en/latest/graphviz.html for other installation options.\n\n\n```python\nimport dask\ngraph, key = word_count.graph_and_key(normalise=False, word=\"badger\")\ndask.visualize(graph)\n```\n\n![png](./docs/output_17_0.png)\n\n\n\n\n# list dependencies\n\nOftentimes you will want to combine multiple computations with different versions of an __option__.\n\nYou can do this by supplying a `list` to `flonb.Dep` and using the `.partial(**options)` method.\n\n\n```python\n@flonb.task_func\ndef count_many_words(\n    counts=flonb.Dep(\n        [word_count.partial(word=\"badger\"), word_count.partial(word=\"mushroom\")]\n    )\n):\n    return counts  # so we can see how flonb substitutes the counts flonb.Dep parameter\n\ncount_many_words.compute(normalise=False)\n```\n\n    [6, 2]\n\n\n\nLists can be nested, and non-`flonb.Task` objects are ignored:\n\n\n```python\n@flonb.task_func\ndef count_many_words_heterogenous_nested_list(\n    counts=flonb.Dep(\n        [\n            [word, word_count.partial(word=word)]\n            for word in [\"badger\", \"mushroom\", \"snake\", \"cow\"]\n        ]\n    )\n):\n    return counts  # so we can see how flonb substitutes the counts flonb.Dep parameter\n\ncount_many_words_heterogenous_nested_list.compute(normalise=True)\n```\n\n    [['badger', 9], ['mushroom', 4], ['snake', 2], ['cow', 0]]\n\n\n\n# Caching\n\n`flonb` uses the options supplied to a task to uniquely identify it, and can automagically cache on disk the results using this identifier.\n\nIf a task has been cached, `flonb` will fetch the cached result instead of computing not only the task _but also any of its dependencies_.\n\n__Warning__: If you invalidate your cache by changing what an option means (e.g. fixing a bug in your code), make sure to delete your cache!\n\n\n```python\nflonb.set_cache_dir(\"/tmp\")\n\n@flonb.task_func(cache_disk=True)\ndef power(x, y):\n    print(f\"computing {x}**{y}\")  # side effect - doesn't happen when cached result called\n    return x**y\n\n\n# only prints once\npower.compute(x=3, y=3)\npower.compute(x=3, y=3)\n```\n\n    computing 3**3\n\n\n\n```python\n# each unique set of options labels the cache\npower.compute(x=3, y=2)\npower.compute(x=2, y=3)\n```\n\n    computing 3**2\n    computing 2**3\n\n\n\n# Dynamic dependencies\n\nSometimes you want to know the value of an option before you resolve the dependencies. `flonb.DynamicDep` has your back here.\n\n\n```python\n@flonb.task_func\ndef add(x, y):\n    return x + y\n\n@flonb.task_func\ndef multiply(a, b):\n    return a * b\n\n@flonb.task_func\ndef multiply_or_add(\n    result=flonb.DynamicDep(lambda mode: {\"add\": add, \"multiply\": multiply}[mode])\n):\n    return result\n```\n\nHere the option `'mode'` determines what the task graph looks like, and even what options are available:\n\n\n```python\nmultiply_or_add.compute(mode=\"multiply\", a=4, b=3)\n```\n\n    12\n\n\n\n\n```python\nmultiply_or_add.compute(mode=\"add\", x=4, y=3)\n```\n\n    7\n\n\n\n# Multiproccesing\n\n`flonb` implements the `dask` Task Graph specification.\n\n1. call `.graph_and_key()` on your task.\n1. feed into `dask` as required.\n\n\n```python\nimport dask.multiprocessing\nimport time\n\n@flonb.task_func\ndef add_one_in_one_second(x):\n    time.sleep(1)  # artifically slow down the task\n    result = x + 1\n    return result\n\n@flonb.task_func\ndef do_sums(data=flonb.Dep([add_one_in_one_second.partial(x=x) for x in range(10)])):\n    return data\n\n\ngraph, key = do_sums.graph_and_key()\n\n# single process\ntic = time.time()\ndask.get(graph, key)\nprint(f\"Single-process execution took {time.time() - tic:.2f} seconds.\")\n\nprint(\"------------\")\n\n# multiple process\ntic = time.time()\ndask.multiprocessing.get(graph, key, num_workers=4)\nprint(f\"Multiproccessing execution took {time.time() - tic:.2f} seconds.\")\n```\n\n    Single-process execution took 10.01 seconds.\n    ------------\n    Multiproccessing execution took 3.30 seconds.\n\n\n# Alternatives\n\nThere are many high quality frameworks that let you build and run task graphs. `flonb` is lightweight and easy to experiment with, but make sure to check out others if you want to delve further into your options. Here are some suggestions:\n\n- `dask`\n- `luigi`\n- `airflow`\n\n# Acknowledgements\n\nA big thanks to Solcast (https://solcast.com) for supporting the development of `flonb`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hazbottles/flonb",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flonb",
    "package_url": "https://pypi.org/project/flonb/",
    "platform": "",
    "project_url": "https://pypi.org/project/flonb/",
    "project_urls": {
      "Homepage": "https://github.com/hazbottles/flonb"
    },
    "release_url": "https://pypi.org/project/flonb/0.1.2/",
    "requires_dist": [
      "dask"
    ],
    "requires_python": ">=3.6",
    "summary": "Rapid-iteration data pipelines with automagic caching + parameter passing.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9493931,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a758b59b40230bdaf4eec7425e8436c42ee393c8f91de3a1bbb157b11b3f44d",
          "md5": "65896238a89cd8568b454d3322557537",
          "sha256": "0108b77cba6fc72e56f4f6a2de4b06ab0e13a57b3015ec6eb8eb9db51687ce83"
        },
        "downloads": -1,
        "filename": "flonb-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65896238a89cd8568b454d3322557537",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2324,
        "upload_time": "2020-09-30T18:05:26",
        "upload_time_iso_8601": "2020-09-30T18:05:26.071386Z",
        "url": "https://files.pythonhosted.org/packages/1a/75/8b59b40230bdaf4eec7425e8436c42ee393c8f91de3a1bbb157b11b3f44d/flonb-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b5b4fdbcc94bdf6271b1bcc4eb1d9352a888d13d23b20dc46f8092bb218827e",
          "md5": "65ddcfa3e4aa0edfa65b3ed3a0961adf",
          "sha256": "85dedace951ff07f57ed45b9f6ad00866df1f0a572acfb0059e2e3a182486584"
        },
        "downloads": -1,
        "filename": "flonb-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "65ddcfa3e4aa0edfa65b3ed3a0961adf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1391,
        "upload_time": "2020-09-30T18:05:28",
        "upload_time_iso_8601": "2020-09-30T18:05:28.993604Z",
        "url": "https://files.pythonhosted.org/packages/5b/5b/4fdbcc94bdf6271b1bcc4eb1d9352a888d13d23b20dc46f8092bb218827e/flonb-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1492b48bcff3f3494cb33386e50618bf2379c40e6f226919f45a5f7e581c31cd",
          "md5": "912a50abc1677e7a390bd5c6f0d1138b",
          "sha256": "57ec6e61b9900a97380fb617af364a0b8cdc6cc2f82c7a93b2562e88d0b7c946"
        },
        "downloads": -1,
        "filename": "flonb-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "912a50abc1677e7a390bd5c6f0d1138b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12829,
        "upload_time": "2020-11-02T14:30:39",
        "upload_time_iso_8601": "2020-11-02T14:30:39.358225Z",
        "url": "https://files.pythonhosted.org/packages/14/92/b48bcff3f3494cb33386e50618bf2379c40e6f226919f45a5f7e581c31cd/flonb-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90c9023e231fec01b1859683eee2b82db1dbd2a4dd653b0165ebd9e6be884992",
          "md5": "7c90ae4a413c41977f1c2120799d3637",
          "sha256": "af7b711c2792ff0513e8f48eca094f5f859424646e7ead445d83f1b309b9aefe"
        },
        "downloads": -1,
        "filename": "flonb-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7c90ae4a413c41977f1c2120799d3637",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11521,
        "upload_time": "2020-11-02T14:30:41",
        "upload_time_iso_8601": "2020-11-02T14:30:41.363976Z",
        "url": "https://files.pythonhosted.org/packages/90/c9/023e231fec01b1859683eee2b82db1dbd2a4dd653b0165ebd9e6be884992/flonb-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61866c3f629870efdc193d14e35d56e46fb4607accf3f460687c927143907ac1",
          "md5": "66f46a33f78c375e6aeb74104b52dddb",
          "sha256": "0fdc20265120c07dcb0f10a0aaf270639b71191e5688afa39ed6f00e9dabeecb"
        },
        "downloads": -1,
        "filename": "flonb-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66f46a33f78c375e6aeb74104b52dddb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12779,
        "upload_time": "2020-11-19T13:45:59",
        "upload_time_iso_8601": "2020-11-19T13:45:59.345865Z",
        "url": "https://files.pythonhosted.org/packages/61/86/6c3f629870efdc193d14e35d56e46fb4607accf3f460687c927143907ac1/flonb-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a5564ce1fa04fbb1ea931788827cd69a0e9cf62c36b16691d472e6b98c4e084",
          "md5": "3b5ca37870956495f4d76a9650f29a54",
          "sha256": "ee2166d1e8639b1dfbcf9a50872ed77e2abff768d2dbabdd8ecb592b9ada01d0"
        },
        "downloads": -1,
        "filename": "flonb-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3b5ca37870956495f4d76a9650f29a54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11379,
        "upload_time": "2020-11-19T13:46:00",
        "upload_time_iso_8601": "2020-11-19T13:46:00.377783Z",
        "url": "https://files.pythonhosted.org/packages/5a/55/64ce1fa04fbb1ea931788827cd69a0e9cf62c36b16691d472e6b98c4e084/flonb-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dde9446d8ac93512f012c33e74c3e5d50f66b3e42651967e34b7eb6aecee8515",
          "md5": "b8b9f5bb006c28ff60f4bf8b82b81bec",
          "sha256": "f7b04252fe4fc6d4a1f9a21d2ab7f61728c28baaf7f8dcaa5c87121ace121084"
        },
        "downloads": -1,
        "filename": "flonb-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8b9f5bb006c28ff60f4bf8b82b81bec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12970,
        "upload_time": "2021-02-22T22:34:58",
        "upload_time_iso_8601": "2021-02-22T22:34:58.462764Z",
        "url": "https://files.pythonhosted.org/packages/dd/e9/446d8ac93512f012c33e74c3e5d50f66b3e42651967e34b7eb6aecee8515/flonb-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e78754a45cafa93abf5d0df071bef49263f67d265618b232a47af953299ae5d7",
          "md5": "38a846f8cb708d6695b223d395f81b22",
          "sha256": "a01b0cd3ad158ba3b0b3fd263d5fda58a7aa544ca21c93bebd5db5262b6a674b"
        },
        "downloads": -1,
        "filename": "flonb-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "38a846f8cb708d6695b223d395f81b22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11546,
        "upload_time": "2021-02-22T22:35:00",
        "upload_time_iso_8601": "2021-02-22T22:35:00.666785Z",
        "url": "https://files.pythonhosted.org/packages/e7/87/54a45cafa93abf5d0df071bef49263f67d265618b232a47af953299ae5d7/flonb-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dde9446d8ac93512f012c33e74c3e5d50f66b3e42651967e34b7eb6aecee8515",
        "md5": "b8b9f5bb006c28ff60f4bf8b82b81bec",
        "sha256": "f7b04252fe4fc6d4a1f9a21d2ab7f61728c28baaf7f8dcaa5c87121ace121084"
      },
      "downloads": -1,
      "filename": "flonb-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b8b9f5bb006c28ff60f4bf8b82b81bec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12970,
      "upload_time": "2021-02-22T22:34:58",
      "upload_time_iso_8601": "2021-02-22T22:34:58.462764Z",
      "url": "https://files.pythonhosted.org/packages/dd/e9/446d8ac93512f012c33e74c3e5d50f66b3e42651967e34b7eb6aecee8515/flonb-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e78754a45cafa93abf5d0df071bef49263f67d265618b232a47af953299ae5d7",
        "md5": "38a846f8cb708d6695b223d395f81b22",
        "sha256": "a01b0cd3ad158ba3b0b3fd263d5fda58a7aa544ca21c93bebd5db5262b6a674b"
      },
      "downloads": -1,
      "filename": "flonb-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "38a846f8cb708d6695b223d395f81b22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11546,
      "upload_time": "2021-02-22T22:35:00",
      "upload_time_iso_8601": "2021-02-22T22:35:00.666785Z",
      "url": "https://files.pythonhosted.org/packages/e7/87/54a45cafa93abf5d0df071bef49263f67d265618b232a47af953299ae5d7/flonb-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}