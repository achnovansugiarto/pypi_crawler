{
  "info": {
    "author": "adfinis",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django Generic API Permissions\n\nDjango Generic API Permissions (DGAP) is a framework to make your Django Rest\nFramework API user-extensible for common use cases. Specifically, it provides\na simple API for your users to define specific visibilities, permissions, and\nvalidations.\n\nAssume you have an API service that implements a blogging backend. You have\na `Post`, and a `Comment` model.\n\nWhen deployed as a public blog, you want admins users to be able to post, and\nauthenticated users be able to comment. Everybody is allowed to read posts and\ncomments.\n\nBut the same software should also be used in a company-internal deployment where\nthe rules are different: Anonymous users should not see anything, and you have\nspecific rules as to who can write posts.\n\nDGAP makes it easy to implement the blog once, and make the permissions,\nvisibilities, and validations custom to each deployment.\n\n\n## Concepts\n\nDGAP provides you with three configuration settings: Visibilities, Permissions,\nand Validations.\n\n* The **visibilities** are run when getting data from the API. They define, on a\n  per-user base, who can see which data.\n* The **validations** are run on create and update operations, so\n  data can be checked and modified before the update takes place.\n* The **permissions** then define what a user can do with a given (visible) piece of\n  data.\n\n\n## Installation for app developers\n\nIf you want to integrate DGAP into your app, these are the steps you need.\nInstall DGAP (and add to your requirements files etc) first.\n\n\n```bash\npip install django-generic-api-permissions\n```\n\nThen, add `generic_permissions.apps.GenericPermissionsConfig` to your `INSTALLED_APPS`:\n\n```python\nINSTALLED_APPS = (\n    ...\n    \"generic_permissions.apps.GenericPermissionsConfig\",\n    ...\n)\n```\n\n### Visibility subsystem\n\nThe visibility part defines what you can see at all. Anything you cannot\nsee, you're implicitly also not allowed to modify. The visibility classes\ndefine what you see depending on your roles, permissions, etc. Building\non top of this follow the permission classes (see below) that define\nwhat you can do with the data you see.\n\nFor the visibilities, extend your DRF `ViewSet` classes with the\n`VisibilityViewMixin`:\n\n```python\n# views.py\nfrom rest_framework.viewsets import ModelViewSet\nfrom generic_permissions.visibilities import VisibilityViewMixin\nclass MyModelViewset(VisibilityViewMixin, ModelViewSet):\n    serializer_class = ...\n    queryset = ...\n```\n\n### Permission subsystem\n\nSimilarly, for the permissions system, add the `PermissionViewMixin` to your\nviews:\n\n```python\n# views.py\nfrom rest_framework.viewsets import ModelViewSet\nfrom generic_permissions.permissions import PermissionViewMixin\nclass MyModelViewset(PermissionViewMixin, VisibilityViewMixin, ModelViewSet):\n    serializer_class = ...\n    queryset = ...\n```\nYou may use only one of the two mixins, or both, depending on your needs.\n\n\n### Validation subsystem\n\nLast, for the validation system, you extend your **serializer** with a mixin:\n```python\n# serializers.py\nfrom rest_framework import serializers\n\nfrom generic_permissions.serializers import PermissionSerializerMixin\nfrom generic_permissions.validation import ValidatorMixin\n\nfrom myapp import models\nclass MyModelSerializer(ValidatorMixin, serializers.ModelSerializer):\n    # my field definitions...\n    class Meta:\n        model = models.MyModel\n        fields = \"__all__\"\n```\n\n\n## Usage - for people deploying a DGAP-equipped app\n\nSay you have an blog you want to deploy that uses DGAP. You want public blog\nposts, but the comment section should only be visible for authenticated users.\nFor this, you would define a custom visibility class that limits access\naccordingly.\n\n### Visibilities\n\nFirst, let's define the visibility class:\n```python\n# my_custom_visibilities.py\nfrom generic_permissions.visibilities import filter_queryset_for\nfrom my_app.models import Post, Comment\n\nclass CustomVisibility:\n    @filter_queryset_for(Post)\n    def filter_posts(self, queryset, request):\n        # no filtering on blog posts\n        return queryset\n    @filter_queryset_for(Comment)\n    def filter_comments(self, queryset, request):\n        # Only authenticated users shall see comments\n        if request.user.is_authenticated:\n            return queryset\n        else:\n            return queryset.none()\n```\n\nOnce done, open `settings.py` and point the `GENERIC_PERMISSIONS_VISIBILITY_CLASSES`\nsetting to the class you just defined. It is a list of strings that name the\nvisibility classes.\n\n```python\nGENERIC_PERMISSIONS_VISIBILITY_CLASSES = ['my_custom_visibilities.CustomVisibility']\n```\n\nNote: The setting may be defined using env variables depending on the\nproject. In that case, set the value via that way instead.\n\nSome times, you have visibilities that you want to combine: Say one visibility\nclass provides read access for user group A, another class provides access for\nuser group B. You want to combine those in a simple way. For this, we have\nprovided you the `Union` visibility:\n\n```python\nform generic_permissions.visibilities import Union\n\nclass MyFirstVisibility:\n    #  ...\nclass MySecondVisibility:\n    #  ...\n\nclass ResultingVisibility(Union):\n    # Define a property `visibility_classes`. Those\n    # will then be checked both, and if either one allows\n    # an object to be seen, it will be visible to the user.\n    visibility_classes = [MyFirstVisibility, MySecondVisibility]\n```\n\n\n### Permissions\n\nPermission classes define who may perform which data mutation. They can be configured\nvia `GENERIC_PERMISSIONS_PERMISSION_CLASSES`.\n\nTo write custom permission classes, you create a simple class, and decorate the\nmethods that define the permissions accordingly.\n\nThere are two types of methods in the permissions system:\n* `permission_for`: Marks methods that define generic access permissions for a\n  given model. They are always checked first.\n  Those methods will receive one positional argument, namely the `request` object\n* `object_permission_for`: Define whether access to a specific object shall be\n  granted. This called for all other operations **except** creation.\n  These methods will receive two positional arguments: First, the `request`\n  object, and second, the model instance that is being accessed in the request.\n\nThe following example carries on the Blog concept from above. We want only\nadmins to edit/update blog posts, and authenticated users to comment.\nNobody should be able to edit their comments.\n\nWe also show the concept of combining two permission classes here. DGAP looks at\nthe whole inheritance tree to figure out the permissions, so you can leverage\nthat to avoid code duplication.\n\nYou can find more information about the `request` object in the\n[Django documentation](https://docs.djangoproject.com/en/3.1/ref/request-response/#httprequest-objects)\n\n``` python\nfrom generic_permissions.permissions import permission_for, object_permission_for\nfrom my_app.models import Post, Comment\n\nclass OnlyAuthenticated:\n    @permission_for(object)\n    def has_permission_default(self, request):\n        # No permission is granted for any non-authenticated users\n        return request.user.is_authenticated\n        \nclass BlogPermissions:\n    @permission_for(Comment)\n    def has_permission_for_comment(self, request):\n        # comments can be added, but not updated\n        return request.method == 'POST'\n    @permission_for(Post)\n    def has_permission_for_post(self, request, instance):\n        # Only admins can work on Posts\n        return 'admin' in request.user.groups\n    @object_permission_for(Post)\n    def has_object_permission_for_post(self, request, instance):\n        # Of the admins, changing a Post is only allowed to the author.\n        return instance.author == request.user\n```\n\nThe following pre-defined classes are available:\n* `generic_permissions.permissions.AllowAny`: allow any users to perform any mutation (default)\n* `generic_permissions.permissions.DenyAll`: deny all operations to any object.\n  You can use this as a base class for your permissions - as long as you don't\n  allow something, it will be denied.\n\n\n### Data validation\n\nOnce the permission to access or modify an object is granted, you may want to\napply some custom validation as well.\n\nIn the example we're using here, we assume some user registration form. We want to\nensure that the username contains only lowercase letters.\n\nFor this, you can use the `GENERIC_PERMISSIONS_VALIDATION_CLASSES` setting. The settings is a\nlist of strings, representing a list of class names).\n\nHere's an example validator class that ensures the username is lower case.\n\n```python\nfrom generic_permissions.validation import validator_for\nfrom my_app.models import User\n\nclass LowercaseUsername:\n    @validator_for(User)\n    def lowercase_username(self, data, context):\n        data[\"username\"] = data[\"username\"].lower()\n        return data\n```\n\nThe `@validator_for` decorator tells DGAP that the method shall\nbe called when a `User` is modified. The data passed in is already\nparsed and validated by the REST framework, and it is expected that\nthe method returns a `dict` with a compatible structure. You may also\n`raise ValidationError(\"some message\")` if you don't want the validation\nto succeed.\nThe second parameter, `context`, is a `dict` containing the DRF context: Access\n`context['request']` to get the request (if validation depends on the user,\nfor example). \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adfinis-sygroup/django-generic-api-permissions",
    "keywords": "",
    "license": "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-generic-api-permissions",
    "package_url": "https://pypi.org/project/django-generic-api-permissions/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-generic-api-permissions/",
    "project_urls": {
      "Homepage": "https://github.com/adfinis-sygroup/django-generic-api-permissions"
    },
    "release_url": "https://pypi.org/project/django-generic-api-permissions/0.2.0/",
    "requires_dist": [
      "django (>=2.2)"
    ],
    "requires_python": ">=3.5",
    "summary": "Generic API permissions and visibilities for Django",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11283910,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03ee93d7bddb784392509a3237119d9ab87bcdeae8b785f8c23bab485864caa6",
          "md5": "049c5ba3f8aea05582f27ceb52febbbf",
          "sha256": "b08618b6d032f07d4b5d2d42875464785f830cfa275eaf712df9414059ec5d80"
        },
        "downloads": -1,
        "filename": "django_generic_api_permissions-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "049c5ba3f8aea05582f27ceb52febbbf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7732,
        "upload_time": "2020-12-18T12:25:41",
        "upload_time_iso_8601": "2020-12-18T12:25:41.388269Z",
        "url": "https://files.pythonhosted.org/packages/03/ee/93d7bddb784392509a3237119d9ab87bcdeae8b785f8c23bab485864caa6/django_generic_api_permissions-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1376ef5eb4be74ea0a021a6ec5cbd1c074dc47a9472920682533931d7c260640",
          "md5": "18d2043a4a650827850f2e1b60155342",
          "sha256": "f99e635af7da6165cbb54c2f0a732ecf282baf924546d695b1c57ddb26774b90"
        },
        "downloads": -1,
        "filename": "django-generic-api-permissions-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "18d2043a4a650827850f2e1b60155342",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12145,
        "upload_time": "2020-12-18T12:25:43",
        "upload_time_iso_8601": "2020-12-18T12:25:43.037836Z",
        "url": "https://files.pythonhosted.org/packages/13/76/ef5eb4be74ea0a021a6ec5cbd1c074dc47a9472920682533931d7c260640/django-generic-api-permissions-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d9b6b8d5c680e4411d7c21e6fe59e92e2a01be92e5b28054fde0796f8e3b1ce",
          "md5": "9c4518599c992e65d8f84a4f880c3c13",
          "sha256": "c99fd4dadf07baa0b003728222ce1412f1634f9c0a1346a2234971f8e8716a59"
        },
        "downloads": -1,
        "filename": "django_generic_api_permissions-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c4518599c992e65d8f84a4f880c3c13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7734,
        "upload_time": "2020-12-18T12:48:09",
        "upload_time_iso_8601": "2020-12-18T12:48:09.951561Z",
        "url": "https://files.pythonhosted.org/packages/9d/9b/6b8d5c680e4411d7c21e6fe59e92e2a01be92e5b28054fde0796f8e3b1ce/django_generic_api_permissions-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51fb3cf55609eabc42dad35990cd5a22717ab7be84be345c538919d90da701fc",
          "md5": "b258c11b78decc5309c893f9cd01ccc4",
          "sha256": "f0fc69a510b656bb13ae49c47bc9f4cfc28d5d0050ebca2f7d7a27708985c65c"
        },
        "downloads": -1,
        "filename": "django-generic-api-permissions-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b258c11b78decc5309c893f9cd01ccc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13191,
        "upload_time": "2020-12-18T12:48:10",
        "upload_time_iso_8601": "2020-12-18T12:48:10.912783Z",
        "url": "https://files.pythonhosted.org/packages/51/fb/3cf55609eabc42dad35990cd5a22717ab7be84be345c538919d90da701fc/django-generic-api-permissions-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dc43bba3d7e3270fb5fe4ed628a8c79cce12c1ee3a5eca4ffffee0ddf24d8e9",
          "md5": "5827086e01d579ce9a2e820fcbac1b82",
          "sha256": "60167bf51ca2753cbf38d3fe5032a61ef83198d5347706386a6aa7e27346d062"
        },
        "downloads": -1,
        "filename": "django_generic_api_permissions-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5827086e01d579ce9a2e820fcbac1b82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11174,
        "upload_time": "2021-08-26T12:24:12",
        "upload_time_iso_8601": "2021-08-26T12:24:12.590899Z",
        "url": "https://files.pythonhosted.org/packages/3d/c4/3bba3d7e3270fb5fe4ed628a8c79cce12c1ee3a5eca4ffffee0ddf24d8e9/django_generic_api_permissions-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc16a4cec28e111b9b7669eae0e985eed1d5c8caf2bc19329d53e5fd8c219de1",
          "md5": "c8e5f083dc45f4d6495e9eeb54098cf1",
          "sha256": "0503bd7533039d541509041cee2b7691e946686e7fa4fad341cf7b6438ca7ee2"
        },
        "downloads": -1,
        "filename": "django-generic-api-permissions-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c8e5f083dc45f4d6495e9eeb54098cf1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 16962,
        "upload_time": "2021-08-26T12:24:14",
        "upload_time_iso_8601": "2021-08-26T12:24:14.452850Z",
        "url": "https://files.pythonhosted.org/packages/cc/16/a4cec28e111b9b7669eae0e985eed1d5c8caf2bc19329d53e5fd8c219de1/django-generic-api-permissions-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3dc43bba3d7e3270fb5fe4ed628a8c79cce12c1ee3a5eca4ffffee0ddf24d8e9",
        "md5": "5827086e01d579ce9a2e820fcbac1b82",
        "sha256": "60167bf51ca2753cbf38d3fe5032a61ef83198d5347706386a6aa7e27346d062"
      },
      "downloads": -1,
      "filename": "django_generic_api_permissions-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5827086e01d579ce9a2e820fcbac1b82",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 11174,
      "upload_time": "2021-08-26T12:24:12",
      "upload_time_iso_8601": "2021-08-26T12:24:12.590899Z",
      "url": "https://files.pythonhosted.org/packages/3d/c4/3bba3d7e3270fb5fe4ed628a8c79cce12c1ee3a5eca4ffffee0ddf24d8e9/django_generic_api_permissions-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc16a4cec28e111b9b7669eae0e985eed1d5c8caf2bc19329d53e5fd8c219de1",
        "md5": "c8e5f083dc45f4d6495e9eeb54098cf1",
        "sha256": "0503bd7533039d541509041cee2b7691e946686e7fa4fad341cf7b6438ca7ee2"
      },
      "downloads": -1,
      "filename": "django-generic-api-permissions-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c8e5f083dc45f4d6495e9eeb54098cf1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 16962,
      "upload_time": "2021-08-26T12:24:14",
      "upload_time_iso_8601": "2021-08-26T12:24:14.452850Z",
      "url": "https://files.pythonhosted.org/packages/cc/16/a4cec28e111b9b7669eae0e985eed1d5c8caf2bc19329d53e5fd8c219de1/django-generic-api-permissions-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}