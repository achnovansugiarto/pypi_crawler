{
  "info": {
    "author": null,
    "author_email": "Vedran Sego <vsego@vsego.org>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Bottle",
      "Framework :: CherryPy",
      "Framework :: Django",
      "Framework :: Flask",
      "Framework :: Pyramid",
      "Framework :: TurboGears",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# Settings Collector\n\nThis Python 3.6+ package is meant to be used by other packages (i.e., not\ndirectly by final projects). Its purpose is to collect settings defined in\nvarious frameworks, so you don't have to make special implementations for\nthose.\n\nA typical use case would be to define something like this:\n\n```python\nfrom settings_collector import SettingsCollector, SC_Setting\n\nclass my_settings(SettingsCollector):\n    foo = SC_Setting(\"bar\")\n```\n\nand then use `my_settings.foo` in your code. The value of `foo` would come from\nDjango's `settings` if your package is used in a Django app, from Flask's app\nconfig if it's used in a Flask project, etc.\n\n# Content\n\n1. [Supported frameworks](#supported-frameworks)\n2. [How to use](#how-to-use)\n3. [Settings definitions](#settings-definitions)\n4. [Prefix](#prefix)\n5. [Name cases](#name-cases)\n6. [Scopes](#scopes)\n7. [Fine tuning](#fine-tuning)\n8. [Local function arguments](#local-function-arguments)\n9. [Settings in projects with no frameworks](#settings-in-projects-with-no-frameworks)\n10. [Custom loaders](#custom-loaders)\n11. [Testing custom loaders](#testing-custom-loaders)\n\n## Supported frameworks\n\nCurrently, Settings Collector supports [Bottle](https://bottlepy.org/docs/dev/),\n[CherryPy](https://cherrypy.dev/), [Django](http://www.djangoproject.com/),\n[Flask](https://flask.palletsprojects.com/),\n[Pyramid](https://trypyramid.com/), and [TurboGears](https://turbogears.org/).\nPlease note that the support for most of those was written just by reading\ntheir docs. I am experienced only with Django and Flask.\n\nEach framework is handled by its loader class. These are located in the\n`settings_collector.loader` package. Apart from the loaders for specific\nframeworks, there is also a loader for environment variables, called\n`SC_EnvironLoader`.\n\nSettings for frameworks are not normally loaded directly from the environment,\nbut they come from some sort of config file (which might import some of them\nfrom the environment), so `SC_EnvironLoader` is disabled by default. To enable\nit, one can run\n\n```python\nfrom settings_collector import SC_EnvironLoader\n\nSC_EnvironLoader.enabled = True\n```\n\n## How to use\n\nThe most general way to use this is to define a class similar to the models in\nORM frameworks:\n\n```python\nfrom settings_collector import SettingsCollector, SC_Setting\n\nclass my_settings(SettingsCollector):\n    foo = SC_Setting(\"bar\")\n```\n\nAfter this, just use `my_settings.foo`, which will fetch value `foo` from your\nproject's configuration (which can be standard Django, Flask, etc). If the\nvalue is not defined, it will be set to the default value (`\"bar\"`, in this\nexample).\n\nNote that the loaders adjust character cases as needed. This means that your\n`my_settings.foo` will come from `django.conf.settings.FOO` if your packages is\nused in a Django app, but from `cherrypy.config[\"foo\"]` or\n`cherrypy.request.app.config[\"foo\"]` if it's used in a CherryPy project. For\ndetails, see [Name cases](#name-cases).\n\nIf one needs to define only the default values for the settings, without\nfurther adjustments, this can be used as well:\n\n```python\nfrom settings_collector import SettingsCollector\n\nclass my_settings(SettingsCollector):\n    defaults = {\"bar\": \"foo\"}\n```\n\nThis example is equivalent to the previous one, but it doesn't allow\nadjustments described in the next section.\n\n## Settings definitions\n\nThe constructor of `SC_Setting` accepts the following arguments (presented here\nwith their default values):\n\n* `default_value` [optional]: The default value to be returned if it's not\n  defined in settings. If neither this nor the setting's value in the\n  framework's config is set, a `ValueError` exception is raised.\n\n* `no_cache=False` [optional, keyword only]: If `True`, skip cashing. This\n  means that the actual value of the setting is fetched every time it is\n  requested. Normally, the settings are set up when the app runs and they do\n  not change, so caching is usually the best way to go.\n\n* `value_type=None` [optional, keyword only]: A type to convert the value to\n  (for example, `int`). This can be used to ensure the correct type of the\n  value, even if the settings provide something else (for example, a string, as\n  is normal for `os.environ`).\n\n* `default_on_error=True` [optional, keyword only]: This affects the behaviour\n  when the value of a setting is set, but the casting to the given `value_type`\n  fails. If set to `True`, the returned value is `default_value` (a\n  `ValueError` exception is raised if that value is not set). However, if this\n  is set to `False`, requesting the value not defined in the app will result in\n  `TypeError` exception, regardless of `default_value`.\n\n## Prefix\n\nIf you want your config settings to be distinguished from all others (those\nused by other packages or the framework itself), you can define a prefix:\n\n```python\nfrom settings_collector import SettingsCollector, SC_Setting\n\nclass my_settings(SettingsCollector):\n    class SC_Config:\n        prefix = \"test\"\n    foo = SC_Setting(\"bar\")\n```\n\nNow, the value of `my_settings.foo` will come from `test__foo` in the\nframework's config.\n\n## Name cases\n\nEach loader (the class responsible for the actual loading of the settings'\nvalues from the frameworks' configs) can define the case for the names. For\nexample, Django keeps settings in variables that have upper-case names, so the\ncorresponding loader will change your names to upper-case as will the one for\n`os.environ`, but not the one for TurboGears.\n\nSo, in the previous example, the value of `my_settings.foo` will come from\n`TEST__FOO` if the running framework is Django, but it'll come from `test__foo`\nif your package is used in a TurboGears app.\n\n## Scopes\n\nSettings can get their values relative to scopes, not unlike names given to\nloggers. The default separator for scopes' names is double underscore (`\"__\"`).\n\nLet us take a look at the following Django example. Let's say that the settings\nare defined as follows (in some framework that uses upper-case names):\n```python\nFOO = \"bar\"\nSC1__SC2__FOO = \"bard\"\n```\n\nWe then define our settings collector:\n```python\nfrom settings_collector import SettingsCollector, SC_Setting\n\nclass my_settings(SettingsCollector):\n    foo = SC_Setting(\"bar\")\n```\n\nThe values obtained will be as follows:\n\n* `my_settings.foo == \"bar\"` is defined in the settings as `FOO=bar`;\n* `my_settings(\"sc1\").foo == \"bar\"` is inherited from the root scope because\n  there is no `foo` defined in the scope `\"sc1\"` (i.e., there is no\n  `SC1__FOO`);\n* `my_settings(\"sc1__sc2\").foo == \"bard\"` is directly defined in the settings\n  as `SC1__SC2__FOO = \"bard\"`;\n* `my_settings(\"sc1__sc2__sc3\").foo == \"bard\"` is again inherited from the\n  parent scope `\"sc1__sc2\"` because there is no `SC1__SC2__SC3__FOO`\n  definition.\n\n## Fine tuning\n\nEach subclass of `SettingsCollector` can have a class `SC_Config` in its\ndefinition, which has a similar role to `Meta` in Django's models: it defines\nvarious properties that define the settings collector's behaviour. The\navailable attributes are as follows:\n\n* `prefix` [default: `None`]: Explained [here](#prefix).\n\n* `sep` [default: `\"__\"`]: A string containing a separator used between prefix,\n  scopes, and settings' names.\n\n* `loaders` [default: `None`]: A sequence of loaders' names, defining the\n  loaders that should be skipped or used (see `exclude` property). This list\n  can contain loaders that are unknown to the Settings Collector, making it\n  possible to explicitly include or exclude loaders that might be defined only\n  in some frameworks (i.e., outside of `settings_collector`).\n\n* `exclude` [default: `True`]: If `True`, the loaders listed in `loaders` are\n  skipped; otherwise, they are the only ones used. Note that the loaders with\n  `enabled` set to `False` will always be skipped.\n\n* `load_all` [default: `False`]: If `False`, the settings are loaded by the\n  first loader that can provide them (i.e., the other loaders are not used). If\n  this is changed to `True`, the values are fetched from all the loaders, with\n  the latter ones overriding the former ones. This'll rarely make sense, since\n  each loader covers one framework and a project is not likely to use more than\n  one of them, but it might make sense if you want to combine settings in the\n  environment variables with those in the framework.\n\n* `greedy_load` [default: `True`]: If `True`, then all the settings are loaded\n  when one of them is requested, thus minimising the overhead of the settings\n  collector. If this is changed to `False`, each setting is loaded when\n  requested and not before.\n\n## Local function arguments\n\nBecause Settings Collectors are meant to be used by packages to pull the\nsettings' default values from various frameworks, the packages themselves are\nnot meant to be tied to any specific framework, which means that there could be\nno framework nor central configuration at all. One would still want their\nfunctions and classes to be configurable, and this is normally done through\nfunctions' and methods' arguments.\n\nTo make it easier to achieve this, the package provides `@sc_defaults`\ndecorator. Its purpose is to populate functions' and methods' arguments from a\nsettings collector during runtime, assuming that the values were not given in\nthe call nor as function's or method's defaults.\n\nA typical use case is this:\n\n```python\nclass my_settings(SettingsCollector):\n\n    foo = SC_Setting(\"food\")\n    bar = SC_Setting(\"bard\")\n\n\n@sc_defaults(my_settings)\ndef f(x, foo):\n    return f\"{x}:{foo}\"\n```\n\nHere, we can do several different calls (assuming that `foo` and `bar` are not\nset in the framework):\n\n* `f(17)` returns `\"17:food\"` because `x = 17` comes from the call, while `foo`\n  is unset and thus gets its value from `my_settings.foo`.\n\n* `f(17, \"afoot\")`, `f(17, foo=\"afoot\")`, and `f(x=17, foo=\"afoot\")` all return\n  `\"17:afoot\"` because both values were provided in the function call.\n\nThe same can be done with methods in classes, with one caveat: if the method in\nquestion is a class method, the `@classmethod` decorator must be put before\n`@sc_defaults`.\n\nIf some argument has its default defined in the function's or method's\nsignature, its value will never be picked from the attached settings collector.\n\nScopes are supported by an optional keyword argument `scope_arg` which holds\nthe name of the argument that defines scope. If not set, the scopes will not be\nused. Here is an example:\n\n```python3\n@sc_defaults(my_settings, scope_arg=\"namespace\")\ndef f(foo, namespace=None):\n    return f\"{foo}\"\n\nprint(\"Argument-provided foo: \", f(\"foot\"))\nprint(\"Default scope's foo:   \", f())\nprint(\"Value of foo in scope1:\", f(namespace=\"scope1\"))\n```\n\nFor more usage examples, see\n[`tests/test_defaults.py`](https://github.com/vsego/settings-collector/blob/master/tests/test_defaults.py).\n\n## Settings in projects with no frameworks\n\nProjects that do not use any of the supported or supporting frameworks can\nstill adjust settings for those packages that support Settings Collector. This\nis done through a dictionary-like object called `sc_settings` and is used like\nthis:\n\n```python\nfrom settings_collector import sc_settings\n\n# Set values one by one:\nsc_settings[\"prefix1__some_setting\"] = ...\nsc_settings[\"prefix2__scope1__scope2__some_setting\"] = ...\n...\n\n# Or, in bulk:\nsc_settings.update({\n    \"prefix1__some_setting\"]: ...,\n    \"prefix2__scope1__scope2__some_setting\"]: ...,\n    ...\n}\n```\n\nNote that you should never do `sc_setting = ...`. If you do, the loader\nresponsible for reading this data will rebel by raising a `SC_SettingsError`\nexception.\n\nThis can be used even without any other packages using Settings Collector, as a\nplaceholder for your project's configuration, although it's a bit questionable\nwhat the benefits would be (over just having your own Flask-like `config`\ndictionary or Django-like class `settings`), especially if one does not need\nscopes.\n\n## Custom loaders\n\nAdding the support for Settings Collector to your own framework is easy.\nObviously, you can submit it to me for inclusion in this package, but it is\njust as easy to include it in the package itself.\n\nAll you need to do is create a module:\n```python\ntry:\n    from settings_collector import SC_LoaderBase\nexcept ImportError:\n    pass\nelse:\n    class SC_MyFrameworkLoader(SC_LoaderBase):\n        ...\n```\n\nThe name of your loader class must begin with `SC_` and end with `Loader`.\n\nMake sure that this module is imported. The creation of a subclass of\n`SC_LoaderBase` automatically registers it with the one that Settings Collector\ncan recognise.\n\nNotice that this module does not require `settings_collector`, so your\nframework won't require it either. If no packages requiring\n`settings_collector` are used, the import above will be silently ignored.\n\nSince the configurations are usually defined as attributes in modules or\nclasses (like in Django) or as keys in a dictionary (like in Flask or\n`os.environ`), there are subclasses that make it easier to implement loaders\nfor any framework using one of these approaches. These are\n`SC_LoaderFromAttribs` and `SC_LoaderFromDict`. To see how they are used, see\nthe source code for\n[`SC_DjangoLoader`](https://github.com/vsego/settings-collector/blob/master/src/settings_collector/loaders/django.py) and for\n[`SC_EnvironLoader`](https://github.com/vsego/settings-collector/blob/master/src/settings_collector/loaders/env.py).\n\n## Testing custom loaders\n\nOne can easily test their shiny new loader.\n\n1. Install Settings Collector in some project using your framework:\n   ```bash\n   pip install settings_collector\n   ```\n\n2. Add your loader to the project and import its module (so that the loader\n   gets registered).\n\n3. Run the following code:\n   ```python\n   import settings_collector\n   settings_collector.sc_test_print_expected()\n   ```\n   This will print the testing variables as the test function expects them.\n\n4. Add these settings to your project's config. Make sure that they are named\n   consistently with how it is done in your framework. For example, the names\n   of these settings would be uppercased in Django's config, despite them\n   having mixed cases in the output of `sc_test_print_expected`.\n\n5. Restart your project and run:\n   ```python\n    import settings_collector\n    settings_collector.sc_test_run()\n    ```\n\nNote that you can also run `settings_collector.sc_test_run(False)` if you want\na bit less verbose output.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "configuration,django,environment,flask,frameworks,packages,settings",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "settings-collector",
    "package_url": "https://pypi.org/project/settings-collector/",
    "platform": null,
    "project_url": "https://pypi.org/project/settings-collector/",
    "project_urls": {
      "Bug Tracker": "https://github.com/vsego/settings-collector/issues",
      "Changelog": "https://github.com/vsego/settings-collector/blob/master/CHANGELOG.md",
      "Homepage": "https://github.com/vsego/settings-collector"
    },
    "release_url": "https://pypi.org/project/settings-collector/1.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package for collecting settings from various sources",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16118437,
  "releases": {
    "1.0.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e9923198fae4907e08bb4405c20097b5f3e844398246d4d81008cd80b425c754",
          "md5": "ffbb1ae12238e274ec41de92a34aaa0c",
          "sha256": "aa7cac9a85b84203412f9d0ae39882b6c45fde8f2aed96fe8bb42ae32cee77c6"
        },
        "downloads": -1,
        "filename": "settings_collector-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffbb1ae12238e274ec41de92a34aaa0c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18649,
        "upload_time": "2022-12-11T20:08:01",
        "upload_time_iso_8601": "2022-12-11T20:08:01.213521Z",
        "url": "https://files.pythonhosted.org/packages/e9/92/3198fae4907e08bb4405c20097b5f3e844398246d4d81008cd80b425c754/settings_collector-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9b630e90510a31b6f5a0a6917ce2990b5d52919ab007f4991fcd4e67569de148",
          "md5": "3fd4b8062f7626d10246b7c1ace33a79",
          "sha256": "48d142005df08c11a7a6ef203f854f03948f94b56de90852e004e758ae006e3b"
        },
        "downloads": -1,
        "filename": "settings_collector-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3fd4b8062f7626d10246b7c1ace33a79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20804,
        "upload_time": "2022-12-11T20:08:03",
        "upload_time_iso_8601": "2022-12-11T20:08:03.363940Z",
        "url": "https://files.pythonhosted.org/packages/9b/63/0e90510a31b6f5a0a6917ce2990b5d52919ab007f4991fcd4e67569de148/settings_collector-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "1d80f117367ee8482f8329d3c1e8659c5139a3f86ff584ede93f3899dd66a85a",
          "md5": "6562a7f29e84c61951fb40300d74192e",
          "sha256": "a490405f9d5e69b4c9231cc2ec5a9f3c974163945fbb5be02997f5836c01a339"
        },
        "downloads": -1,
        "filename": "settings_collector-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6562a7f29e84c61951fb40300d74192e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22620,
        "upload_time": "2022-12-11T20:12:41",
        "upload_time_iso_8601": "2022-12-11T20:12:41.944866Z",
        "url": "https://files.pythonhosted.org/packages/1d/80/f117367ee8482f8329d3c1e8659c5139a3f86ff584ede93f3899dd66a85a/settings_collector-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f7c50a84cd78c4619402e6ef0f87ba0069257fa5392796df7a361814b17f310a",
          "md5": "d75eab5a987f648f63cf87cb827da211",
          "sha256": "713a8c1b82a8bb772586cfa997adfe44d25adbcf80eb4d6343f47da673400dd1"
        },
        "downloads": -1,
        "filename": "settings_collector-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d75eab5a987f648f63cf87cb827da211",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21067,
        "upload_time": "2022-12-11T20:12:39",
        "upload_time_iso_8601": "2022-12-11T20:12:39.547834Z",
        "url": "https://files.pythonhosted.org/packages/f7/c5/0a84cd78c4619402e6ef0f87ba0069257fa5392796df7a361814b17f310a/settings_collector-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "2337bdd6158f951de9551179365f166df444fdab65eb2cbd93ea1f9eba8c57a5",
          "md5": "6fbf3891e09c482c5f938836b2112440",
          "sha256": "e3a4f313cd39015bdf1e0762f2da195ee946ae92c04d25bedd6388c1c2b8c468"
        },
        "downloads": -1,
        "filename": "settings_collector-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fbf3891e09c482c5f938836b2112440",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24372,
        "upload_time": "2022-12-12T18:49:01",
        "upload_time_iso_8601": "2022-12-12T18:49:01.139657Z",
        "url": "https://files.pythonhosted.org/packages/23/37/bdd6158f951de9551179365f166df444fdab65eb2cbd93ea1f9eba8c57a5/settings_collector-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "0604067a90deed887c76565eb51ea2b06d413724e7edfd1ea101ac97146dd49f",
          "md5": "381425a4e8078bff5d07b472166dc427",
          "sha256": "0dfe1be2529f9f24c71558c66f791d6804bb8daed631dd02a2089381f975b10a"
        },
        "downloads": -1,
        "filename": "settings_collector-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "381425a4e8078bff5d07b472166dc427",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23251,
        "upload_time": "2022-12-12T18:48:57",
        "upload_time_iso_8601": "2022-12-12T18:48:57.933033Z",
        "url": "https://files.pythonhosted.org/packages/06/04/067a90deed887c76565eb51ea2b06d413724e7edfd1ea101ac97146dd49f/settings_collector-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d2e0190301292686058607afe6d29e2bfad269d2669eed97123aab1926e7d580",
          "md5": "ea722946f2b2ca8f2f23be40a2db5474",
          "sha256": "bce4369517ee88846426bde9ccdc5ccbc7064f4d16c26f99ea6b6274b6a6718d"
        },
        "downloads": -1,
        "filename": "settings_collector-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea722946f2b2ca8f2f23be40a2db5474",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26144,
        "upload_time": "2022-12-14T20:31:49",
        "upload_time_iso_8601": "2022-12-14T20:31:49.736598Z",
        "url": "https://files.pythonhosted.org/packages/d2/e0/190301292686058607afe6d29e2bfad269d2669eed97123aab1926e7d580/settings_collector-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7e9887b34a36d125767596a7a3cf92b12422f50a30a4b6d409a13f55472eae94",
          "md5": "f43c64ec5bcb4110449c0aac4c7e2427",
          "sha256": "2da4b444af459d3639d803d939b8f53aec3bbe5f9474f05c714f69771e242039"
        },
        "downloads": -1,
        "filename": "settings_collector-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f43c64ec5bcb4110449c0aac4c7e2427",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25034,
        "upload_time": "2022-12-14T20:31:51",
        "upload_time_iso_8601": "2022-12-14T20:31:51.775422Z",
        "url": "https://files.pythonhosted.org/packages/7e/98/87b34a36d125767596a7a3cf92b12422f50a30a4b6d409a13f55472eae94/settings_collector-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "149613a7dc71dd659a257e8edff9c645f9563c8a08296213e5c27aca0055afd2",
          "md5": "ecc9366e7e1d7bb27cc18663c3b3b7cf",
          "sha256": "1ff4dd41503e6fd2bdb8d751c158af139844a1ae2027a5b15c83df6b8180f54a"
        },
        "downloads": -1,
        "filename": "settings_collector-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ecc9366e7e1d7bb27cc18663c3b3b7cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26290,
        "upload_time": "2022-12-15T20:45:26",
        "upload_time_iso_8601": "2022-12-15T20:45:26.871047Z",
        "url": "https://files.pythonhosted.org/packages/14/96/13a7dc71dd659a257e8edff9c645f9563c8a08296213e5c27aca0055afd2/settings_collector-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "90269c942f0538b39983b0600230c11624ccd47534c37590ebdb1f3452122c25",
          "md5": "3630abf704e8cf6e340f9d06aa3f1681",
          "sha256": "b478a37e7c2c8ee7eacc0129bfc373476c0bd175be0fa8f6e91fe94a93bc5dd4"
        },
        "downloads": -1,
        "filename": "settings_collector-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3630abf704e8cf6e340f9d06aa3f1681",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25156,
        "upload_time": "2022-12-15T20:45:29",
        "upload_time_iso_8601": "2022-12-15T20:45:29.015849Z",
        "url": "https://files.pythonhosted.org/packages/90/26/9c942f0538b39983b0600230c11624ccd47534c37590ebdb1f3452122c25/settings_collector-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "149613a7dc71dd659a257e8edff9c645f9563c8a08296213e5c27aca0055afd2",
        "md5": "ecc9366e7e1d7bb27cc18663c3b3b7cf",
        "sha256": "1ff4dd41503e6fd2bdb8d751c158af139844a1ae2027a5b15c83df6b8180f54a"
      },
      "downloads": -1,
      "filename": "settings_collector-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ecc9366e7e1d7bb27cc18663c3b3b7cf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 26290,
      "upload_time": "2022-12-15T20:45:26",
      "upload_time_iso_8601": "2022-12-15T20:45:26.871047Z",
      "url": "https://files.pythonhosted.org/packages/14/96/13a7dc71dd659a257e8edff9c645f9563c8a08296213e5c27aca0055afd2/settings_collector-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "90269c942f0538b39983b0600230c11624ccd47534c37590ebdb1f3452122c25",
        "md5": "3630abf704e8cf6e340f9d06aa3f1681",
        "sha256": "b478a37e7c2c8ee7eacc0129bfc373476c0bd175be0fa8f6e91fe94a93bc5dd4"
      },
      "downloads": -1,
      "filename": "settings_collector-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3630abf704e8cf6e340f9d06aa3f1681",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25156,
      "upload_time": "2022-12-15T20:45:29",
      "upload_time_iso_8601": "2022-12-15T20:45:29.015849Z",
      "url": "https://files.pythonhosted.org/packages/90/26/9c942f0538b39983b0600230c11624ccd47534c37590ebdb1f3452122c25/settings_collector-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}