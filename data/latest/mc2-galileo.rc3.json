{
  "info": {
    "author": "Thomas Rausch",
    "author_email": "t.rausch@dsg.tuwien.ac.at",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Galileo: MC2 Experimentation Environment\n========================================\n\n[![PyPI Version](https://badge.fury.io/py/mc2-galileo.svg)](https://badge.fury.io/py/mc2-galileo)\n\nThis project allows users to define operational experiments for the MC2 (Mini Compute Cluster),\nand interact with the experimentation environment during runtime.\nGalileo consists of two major components a user can interact with:\nthe experiment controller shell and the galileo dashboard.\nThe experiment controller can spawn emulated clients on workers, and control the amount of load they generate.\nFurthermore, a user can interact with Symmetry's routing table shell to control to which cluster node a service request\nis sent to.\n\nBuild\n-----\n\nCreate and activate a new virtual environment\n\n    virtualenv .venv\n    source .venv/bin/activate\n\nInstall requirements\n\n    pip install -r requirements.txt\n\nIf you have symmetry locally in the parent folder, link it via\n\n    pip install -e ../symmetry\n\n#### Docker\n\nTo create a Docker image that can run galileo components, run \n\n    make docker\n    \nTo create a arm32v7 Docker image that can run galileo components, run\n    \n    make docker-arm\n\nStart a worker with\n\n    cd docker/galileo-worker\n    docker-compose up\n\nCompose files for arm32v7 are located in \n    \n    docker/arm\n    \nStart a local dev environment, including: API, ExperimentDaemon, 1 worker, redis and database:\n\n    cd docker/dev\n    docker-compose up\n \nPreparing the Example Application\n---------------------------------\n\nWe prepare the cluster with an example application. Specifically a image classification service.\n\nRun the mxnet-model-server as a Docker container named 'mms', exposed on port 8080.\nFor example, to start mxnet-model-server with models squeezenet and alexnet, run the following command on a cluster node:\n\n    docker run -itd --name mms -p 8080:8080 -p 8081:8081 awsdeeplearningteam/mxnet-model-server:1.0.0-mxnet-cpu mxnet-model-server --start \\\n    --models squeezenet=https://s3.amazonaws.com/model-server/models/squeezenet_v1.1/squeezenet_v1.1.model,alexnet=https://s3.amazonaws.com/model-server/model_archive_1.0/alexnet.mar\n\n\nPrepare the Experiment Worker Hosts\n-----------------------------------\n\nThe devices hosting the workers that generate load need to run the experiment controller host application.\n\n    bin/run worker --logging=INFO\n\nAll runtime parameters are controlled via `galileo_*` environment variables. Check `docker/galileo-worker/worker.env` for some examples.\n\n\nRun the Experiment Controller Shell\n-----------------------------------\n\n```\n(.venv) pi@graviton:~/mc2/galileo $ bin/run shell\n                                   __  __\n .-.,=\"``\"=.          ____ _____ _/ (_) /__  ____\n '=/_       \\        / __ `/ __ `/ / / / _ \\/ __ \\\n  |  '=._    |      / /_/ / /_/ / / / /  __/ /_/ /\n   \\     `=./`.     \\__, /\\__,_/_/_/_/\\___/\\____/\n    '=.__.=' `='   /____/\n\n\nWelcome to the galileo shell!\n\nType `usage` to list available functions\n\ngalileo> usage\nthe galileo shell is an interactive python shell that provides the following commands\n\nCommands:\n  usage         show this message\n  env           show environment variables\n  pwd           show the current working directory\n\nFunctions:\n  sleep         time.sleep wrapper\n\nObjects:\n  g             Galileo object that allows you to interact with the system\n  show          Prints runtime information about the system to system out\n  exp           Galileo experiment\n  rtbl          Symmetry routing table\n\nType help(<function>) or help(<object>) to learn how to use the functions.\n\n```\n\n\n\nConfigure the routing table\n---------------------------\n\nThe `rtbl` object in the shell allows you to set load balancing policies. Run `help(rtbl)` in the galileo shell.\nHere is an example of how to set a record for the service `myservice`.\n```\ngalileo> rtbl.set('myservice', ['host1:8080', 'host2:8080'], [1,2])\nRoutingRecord(service='myservice', hosts=['host1:8080', 'host2:8080'], weights=[1, 2])\ngalileo> rtbl\n+---------------------------+----------------------+-----------+\n| Service                   |                Hosts |   Weights |\n+---------------------------+----------------------+-----------+\n| myservice                 |           host1:8080 |       1.0 |\n|                           |           host2:8080 |       2.0 |\n+---------------------------+----------------------+-----------+\n\n```\n\nRun the Experiment Daemon\n-------------------------\n\n---\n\n**FIXME: THIS IS OUTDATED**  \n\n---\n\nThe experiment daemon continuously reads from the blocking redis queue `galileo:experiments:instructions`.\nAfter receiving instructions, the controller will execute the commands and record the telemetry data\npublished via Redis. At the end the status of the experiment will be set to 'FINISHED' and the traces,\nthat were saved in the db by the clients, will be updated to reference the experiment.\n\nExample Redis command to inject a new experiment (where `exphost` is the hostname of the experiment host):\n\n    LPUSH galileo:experiments:instructions '{\"instructions\": \"spawn exphost squeezenet 1\\nsleep 2\\nrps exphost squeezenet 1\\nsleep 5\\nrps exphost squeezenet 0\\nsleep 2\\nclose exphost squeezenet\"}'\n\nyou can also specify `exp_id`, `creator`, and `name`, otherwise some generated/standard values will be used.\n\nYou can change the database used to store the experiment data via the env `galileo_expdb_driver` (`sqlite` or `mysql`).\nTo write the changes into MySQL (or MariaDB), set the following environment variables:\n`galileo_expdb_mysql_host`,\n`galileo_expdb_mysql_port`,\n`galileo_expdb_mysql_db`,\n`galileo_expdb_mysql_user`,\n`galileo_expdb_mysql_password`\n\nYou can create a mariadb docker instance with:\n\n    ./bin/run-db.sh\n\nThen execute the daemon with:\n\n    python -m galileo.cli.experimentd\n\nOr run the script, which exports the mariadb setup from the docker container (add `--logging DEBUG` for output)\n\n    ./bin/experimentd-mysql.sh\n\n\nRun the Galileo REST API\n------------------------\n\nServe the app with gunicorn\n\n    gunicorn -w 4 --preload -b 0.0.0.0:5001 \\\n        -c galileo/webapp/gunicorn.conf.py \\\n        galileo.webapp.wsgi:api",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.dsg.tuwien.ac.at/mc2/galileo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mc2-galileo",
    "package_url": "https://pypi.org/project/mc2-galileo/",
    "platform": "",
    "project_url": "https://pypi.org/project/mc2-galileo/",
    "project_urls": {
      "Homepage": "https://git.dsg.tuwien.ac.at/mc2/galileo"
    },
    "release_url": "https://pypi.org/project/mc2-galileo/0.5.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Galileo: Experimentation and Analytics Framework for MC2",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8458299,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b6b5334dbb1b979abbc8d02eb70a4904e643e9d4b448448283ef59de22267f4",
          "md5": "740b8784acf0d69cd9cf2b217f9e1cb3",
          "sha256": "4ad2cad286fbbe47fdc2a2efd62da745755094334e484bd6bb1a76e8e85eaa72"
        },
        "downloads": -1,
        "filename": "mc2-galileo-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "740b8784acf0d69cd9cf2b217f9e1cb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35782,
        "upload_time": "2020-10-19T22:27:05",
        "upload_time_iso_8601": "2020-10-19T22:27:05.606489Z",
        "url": "https://files.pythonhosted.org/packages/7b/6b/5334dbb1b979abbc8d02eb70a4904e643e9d4b448448283ef59de22267f4/mc2-galileo-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf3f2539a35f531567187e1925c30b81d96f7467b25ebc8a199282ae9c9fbb17",
          "md5": "2ccf5e03ba4d04e3eb3c4835f1adb663",
          "sha256": "687754bebc77d709fcc14d1d69b9b4a31701df90ea722916fd7e4af3c41d29b0"
        },
        "downloads": -1,
        "filename": "mc2-galileo-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ccf5e03ba4d04e3eb3c4835f1adb663",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36478,
        "upload_time": "2020-10-20T15:51:15",
        "upload_time_iso_8601": "2020-10-20T15:51:15.078783Z",
        "url": "https://files.pythonhosted.org/packages/cf/3f/2539a35f531567187e1925c30b81d96f7467b25ebc8a199282ae9c9fbb17/mc2-galileo-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bba2e33928606da89112bb49441085db0722342a000dfa629bdf3c7e2f96b00",
          "md5": "03c5ff1ff0ee701fb22e4a26e5bb9f17",
          "sha256": "56ff3e10845fd1eaa92819d584805b452098eb65ac0a78f1f18de1a1a7d80752"
        },
        "downloads": -1,
        "filename": "mc2-galileo-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "03c5ff1ff0ee701fb22e4a26e5bb9f17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36475,
        "upload_time": "2020-10-20T16:17:43",
        "upload_time_iso_8601": "2020-10-20T16:17:43.821708Z",
        "url": "https://files.pythonhosted.org/packages/1b/ba/2e33928606da89112bb49441085db0722342a000dfa629bdf3c7e2f96b00/mc2-galileo-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1bba2e33928606da89112bb49441085db0722342a000dfa629bdf3c7e2f96b00",
        "md5": "03c5ff1ff0ee701fb22e4a26e5bb9f17",
        "sha256": "56ff3e10845fd1eaa92819d584805b452098eb65ac0a78f1f18de1a1a7d80752"
      },
      "downloads": -1,
      "filename": "mc2-galileo-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "03c5ff1ff0ee701fb22e4a26e5bb9f17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36475,
      "upload_time": "2020-10-20T16:17:43",
      "upload_time_iso_8601": "2020-10-20T16:17:43.821708Z",
      "url": "https://files.pythonhosted.org/packages/1b/ba/2e33928606da89112bb49441085db0722342a000dfa629bdf3c7e2f96b00/mc2-galileo-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}