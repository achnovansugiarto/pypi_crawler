{
  "info": {
    "author": "Tiago G Cunha",
    "author_email": "tikx.batera@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Mocker Builder\nTesting tools for mocking and patching based on pytest_mock mocker features but with improvements.\n\n### Installation\n```\npip install mocker-builder\n```\n\n### Initializer\nTo start using mucker-builder features just create your Test class, inherit from MockerBuilder class,\nimplement the required abstract method mocker_builder_setup decorating it with the @MockerBuilder.initializer\ndecorator and start building your mocks and fixtures, adding mocks from your test_... methods, \nbut you must declare the mocker_builder_setup method and decorate it with the \n@MockerBuilder.initializer decorator to be able to use MockerBuilder features.\n\n```Python\n...\ndef print_io_test():\n    print(\"Ouieh!!!\")\n\nclass TestMyHeroes(MockerBuilder):\n\n    @MockerBuilder.initializer\n    def mocker_builder_setup(self):\n        pass\n...\ndef test_io(self):\n    mock_test_io = self.patch(\n        target='sys.stdout',\n        new_callable=StringIO\n    )\n    print_io_test()\n    assert mock_test_io().getvalue() == 'Ouieh!!!\\n'\n```\n\n### The self.patch TMocker.PatchType properties\nThe self.patch method creates a new patch/mock object. It is a patch/mock because by doing:\n```Python\nmy_tested_thing = self.patch(...)\n```\nmy_tested_thing has some properties of a mock.patch object, like start, stop and set_result. \nTo get access to the patched mock we can just:\n```Python\nassert my_tested_thing.mock.called\nOr\nassert my_tested_thing().called\n```\nBoth ways return an MagicMock or an AsyncMock if the tested method is async.\n\nFor a complete exemple flow just have a look bellow:\n\n```Python\nfrom unittest.mock import PropertyMock\nimport pytest\n\nfrom mocker_builder import MockerBuilder\nfrom testing_heroes import my_heroes\nfrom testing_heroes.my_heroes import (\n    Batman,\n    IHero,\n    JusticeLeague,\n    OtherHero,\n    PeakyBlinder,\n    MyHeroes,\n    Robin\n)\n\nclass Foo(IHero):\n    nickname: str = \"Bob\"\n\n    def eating_banana(self) -> str:\n        return \"have no banana\"\n\n    def wearing_pyjama(self) -> str:\n        return \"have no pyjama\"\n\n    def just_call_for(self) -> str:\n        return \"Bob Foo\"\n\n    def just_says(self) -> str:\n        return \"foo foo\"\n\n\nclass TestMyHeroes(MockerBuilder):\n\n    @MockerBuilder.initializer\n    def mocker_builder_setup(self):\n        # ================== Setting fixtures ===================\n        # TODO We will work on this feature to implement a real fixture\n        self.my_hero = self.add_fixture(\n            content=PeakyBlinder(\n                bananas=12,\n                pyjamas=7,\n                nickname=\"Thomas Shelby\"\n            )\n        )\n        # =================== Setting mocks ======================\n        self.mock_my_heroes_module = self.patch(\n            target=my_heroes.initialize_other_hero\n        )\n        self.mock_my_hero_attribue = self.patch(\n            target=MyHeroes,\n            attribute='_my_hero',\n            mock_configure={\n                'eating_banana.return_value': \"Banana Noooo!\",\n                'just_says.side_effect': [\"Nothing to say!\"]\n            }\n        )\n        self.mock_other_hero = self.patch(\n            target=OtherHero,\n            mock_configure={\n                'return_value.just_says.return_value': \"He feels good!\"\n            }\n        )\n        self.my_hero_batman = self.patch(\n            # XXX or target='main.Batman' to mock the Batman class imported from here.\n            target=Batman,\n            mock_configure={\n                'return_value.nickname': 'Bat Mock',\n                'return_value.eating_banana.return_value': \"doesn't like banana\",\n                'return_value.wearing_pyjama.return_value': \"doesn't wear pyjama\",\n                'return_value.just_call_for.return_value': \"just calls for Mocker\",\n                'return_value.just_says.return_value': \"I'm gonna mock you babe!\",\n            }\n        )\n        self.mock_justice_league__init__ = self.patch(\n            target=JusticeLeague.__init__\n        )\n        # ========================================================\n\n    @pytest.mark.asyncio\n    async def test_heroes_sleeping(self):\n        justce_league = JusticeLeague()\n        assert self.mock_justice_league__init__().called\n\n        async def hero_names():\n            yield Batman().nickname\n            yield Robin().nickname\n        _hero_names = hero_names()\n\n        async for result in justce_league.are_heroes_sleeping():\n            assert result == \"=== Heroes are awakened ===\"\n\n        self.mock_justice_league__init__.stop()\n        justce_league = JusticeLeague()\n\n        async for result in justce_league.are_heroes_sleeping():\n            _hero_name = await _hero_names.__anext__()\n            print(result, _hero_name)\n            assert result == f\"MagicMock=>({_hero_name}): ZZzzzz\"\n\n    @pytest.mark.asyncio\n    async def test_call_heroes(self):\n        # Remember that JusticeLeague.__init__ still mocked, so calling JusticeLeague() doesn't\n        # initialize JusticeLeague._heroes attribute.\n\n        justce_league = JusticeLeague()\n        assert await justce_league.call_everybody() == \"Uuhmm! Nobody here!\"\n\n        with pytest.raises(AttributeError) as ex:\n            justce_league.join_hero(Batman())\n        assert \"'JusticeLeague' object has no attribute '_heroes'\" == str(ex.value)\n\n        # We just stop mocking JusticeLeague.__init__ to test a different behavior below\n        self.mock_justice_league__init__.stop()\n        del justce_league\n\n        with self.patch(\n            JusticeLeague,\n            '_heroes',\n            create=True,\n            return_value=PropertyMock(spec=list, return_value=[])\n        ):\n\n            justce_league = JusticeLeague()\n            justce_league.join_hero(Batman())\n            # my_heroes.Batman() still mocked\n            justce_league.join_hero(my_heroes.Batman())\n\n            assert await justce_league.call_everybody() == [\n                ('Batman', 'Come on', 'Big Fat Bat'),\n                ('MagicMock', 'Come on', 'Bat Mock')\n            ]\n\n    def test_mock_my_heroes_class(self):\n        mock_my_heroes_class = self.patch(\n            target=MyHeroes\n        )\n        my_heroes.who_is_the_best_hero()\n        assert mock_my_heroes_class().called\n\n    def test_mock_my_heroes_module(self):\n        self.mock_my_heroes_module.stop()\n        my_heroes.who_is_the_best_hero()\n        assert not self.mock_my_heroes_module().called\n\n        self.mock_my_heroes_module.start()\n        my_heroes.who_is_the_best_hero()\n        assert self.mock_my_heroes_module().called\n\n    def test_mock_my_hero_attribute(self):\n        assert self.mock_my_hero_attribue().eating_banana() == \"Banana Noooo!\"\n        assert self.mock_my_hero_attribue.mock.just_says() == \"Nothing to say!\"\n\n    def test_mock_my_class(self):\n        response = my_heroes.asks_what_other_hero_have_to_say_about_been_hero()\n        assert response == \"He feels good!\"\n\n    def test_my_hero_batman(self):\n        my_heroes.who_is_my_hero(Batman())\n\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.Batman()\n        testing.who_is_my_hero()\n\n        assert self.my_hero_batman.mock.return_value.nickname == 'Bat Mock'\n        assert testing.my_hero.nickname == 'Bat Mock'\n\n    def test_mock_justice_league__init__(self):\n        justce_league = JusticeLeague()\n        assert justce_league.show_heroes() == \"Opss! No heroes over here!\"\n        assert justce_league.what_heroes_does() == \"Eita! Heroes are doing nothing!\"\n\n        self.mock_justice_league__init__.stop()\n\n        justce_league = JusticeLeague()\n        # my_heroes.Batman() is mocked\n        justce_league.join_hero(my_heroes.Batman())\n        justce_league.join_hero(Robin())\n\n        mock_test_io = self.patch(\n            target='sys.stdout',\n            new_callable=StringIO\n        )\n        justce_league.show_heroes()\n        expected = \"\"\"MagicMock just calls for Mocker\nRobin just calls for Little Bastard\\n\"\"\"\n        assert mock_test_io().getvalue() == expected\n\n        justce_league.what_heroes_does()\n        expected += \"\"\"===========================\nBat Mock\ndoesn't like banana\ndoesn't wear pyjama\nI'm gonna mock you babe!\n===========================\nLittle Bastard\nis eating 1 banana(s)\nis wearing 4 pyjama(s)\nI'm gonna have a pint!\\n\"\"\"\n        assert mock_test_io().getvalue() == expected\n\n        mock_test_io.stop()\n        self.mock_justice_league__init__.start()\n\n        justce_league = JusticeLeague()\n        assert justce_league.show_heroes() == \"Opss! No heroes over here!\"\n        assert justce_league.what_heroes_does() == \"Eita! Heroes are doing nothing!\"\n\n    def test_mock_ugly_hero(self):\n\n        assert my_heroes.UGLY_HERO == 'Me'\n\n        mock_ugly_hero = self.patch(\n            target=my_heroes,\n            attribute='UGLY_HERO',\n            mock_configure={\n                'third': 'You',\n                'who_is_the_most_ugly.return_value': 'Me'\n            },\n            first='Batman',\n            second='Robin',\n            call_me_a_hero=lambda: PeakyBlinder().nickname\n        )\n        mock_ugly_hero().configure_mock(\n            fourth='Me again',\n            **{\n                'who_is_my_hero.return_value': Batman().nickname,\n                'who_is_the_most_beautiful.side_effect': ValueError(\"There isn't any beautiful hero\")\n            }\n        )\n\n        assert mock_ugly_hero().first == 'Batman'\n        assert mock_ugly_hero().second == 'Robin'\n        assert mock_ugly_hero().third == 'You'\n        assert mock_ugly_hero().fourth == 'Me again'\n        assert mock_ugly_hero().who_is_the_most_ugly() == 'Me'\n        assert mock_ugly_hero().call_me_a_hero() == \"Tomas Shelby\"\n        assert mock_ugly_hero().who_is_my_hero() == \"Big Fat Bat\"\n\n        with pytest.raises(ValueError) as ex:\n            mock_ugly_hero().who_is_the_most_beautiful()\n        assert \"There isn't any beautiful hero\" == str(ex.value)\n\n    def test_how_can_we_call_for_heores(self):\n        self.mock_justice_league__init__.stop()\n        self.my_hero_batman.stop()\n\n        justce_league = JusticeLeague()\n        # my_heroes.Batman() is mocked but was stopped\n        justce_league.join_hero(my_heroes.Batman())\n        justce_league.join_hero(Robin())\n        assert justce_league.how_can_we_call_for_heores() == [\n            (\"Batman\", \"just calls for Big Fat Bat\"),\n            (\"Robin\", \"just calls for Little Bastard\")\n        ]\n        self.mock_justice_league__init__.start()\n        justce_league = JusticeLeague()\n        assert self.mock_justice_league__init__().called\n        assert justce_league.how_can_we_call_for_heores() == \"Opss! No heroes over here to call for!\"\n\n        self.my_hero_batman.start()\n        self.mock_justice_league__init__.stop()\n\n        justce_league = JusticeLeague()\n        # my_heroes.Batman() is mocked and was started again\n        justce_league.join_hero(my_heroes.Batman())\n        justce_league.join_hero(Robin())\n        assert justce_league.how_can_we_call_for_heores() == [\n            (\"MagicMock\", \"just calls for Mocker\"),\n            (\"Robin\", \"just calls for Little Bastard\")\n        ]\n        assert self.my_hero_batman.mock.called\n\n    def test_my_hero_robin(self):\n        my_hero_robin = self.patch(\n            target=Robin(),  # XXX we can mock from object instance! Ouieh!\n            return_value=PropertyMock(\n                nickname='Bastard Mock',\n                eating_banana=lambda: \"eat a lot of bananas\",\n                wearing_pyjama=lambda: \"likes to be naked\",\n                just_call_for=lambda: \"Little Mocker\",\n                just_says=lambda: \"Mock me baby!\"\n            )\n        )\n\n        my_heroes.who_is_my_hero(Robin())\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.Robin()\n        testing.who_is_my_hero()\n\n        assert my_hero_robin.mock.called\n        assert my_hero_robin.mock.return_value.nickname == 'Bastard Mock'\n        assert my_hero_robin.mock.return_value.eating_banana() == \"eat a lot of bananas\"\n        assert my_hero_robin.mock.return_value.wearing_pyjama() == \"likes to be naked\"\n        assert my_hero_robin.mock.return_value.just_call_for() == \"Little Mocker\"\n        assert my_hero_robin.mock.return_value.just_says() == \"Mock me baby!\"\n\n    def test_set_result_return_value(self):\n        my_hero_robin = self.patch(\n            target=Robin,\n            return_value=Foo()\n        )\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my hero:\")\n        print(\"--------------------------------------------------------------------------\")\n        my_heroes.who_is_my_hero(Robin())\n\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.Robin()\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my mocked hero with return_value = Foo():\")\n        print(\"--------------------------------------------------------------------------\")\n        testing.who_is_my_hero()\n\n        assert my_hero_robin.mock.called\n        assert isinstance(my_hero_robin.mock.return_value, Foo)\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Setting mock result return_value=PeakyBlinder()\")\n        print(\"--------------------------------------------------------------------------\")\n        my_hero_robin.set_result(\n            return_value=PeakyBlinder()\n        )\n        assert not isinstance(my_hero_robin.mock.return_value, Foo)\n        assert isinstance(my_hero_robin.mock.return_value, PeakyBlinder)\n\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.Robin()\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my mocked hero with return_value = PeakyBlinder():\")\n        print(\"--------------------------------------------------------------------------\")\n        testing.who_is_my_hero()\n\n    def test_set_result_side_effect(self):\n        my_hero_robin = self.patch(\n            target=PeakyBlinder,\n            side_effect=lambda: Foo()\n        )\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my hero:\")\n        print(\"--------------------------------------------------------------------------\")\n        my_heroes.who_is_my_hero(PeakyBlinder())\n\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.PeakyBlinder()\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my mocked hero with side_effect = Foo():\")\n        print(\"--------------------------------------------------------------------------\")\n        testing.who_is_my_hero()\n\n        assert my_hero_robin.mock.called\n        assert isinstance(testing.my_hero, Foo)\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"\"\"Setting mock result side_effect=[\n    OtherHero(), \n    TypeError('Ops! No hero like that!')\n]\"\"\")\n        print(\"--------------------------------------------------------------------------\")\n        my_hero_robin.set_result(\n            side_effect=[OtherHero(), TypeError(\"Ops! No hero like that!\")]\n        )\n        testing.my_hero = my_heroes.PeakyBlinder()\n\n        assert not isinstance(testing.my_hero, Foo)\n        assert isinstance(testing.my_hero, OtherHero)\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my mocked hero with side_effect = OtherHero():\")\n        print(\"--------------------------------------------------------------------------\")\n        testing.who_is_my_hero()\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Testing side_effect = TypeError('Ops! No hero like that!')\")\n        print(\"--------------------------------------------------------------------------\")\n        with pytest.raises(TypeError) as ex:\n            testing.my_hero = my_heroes.PeakyBlinder()\n            testing.who_is_my_hero()\n        assert \"Ops! No hero like that!\" == str(ex.value)\n\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tgc77/mocker_builder",
    "keywords": "pytest mock mocker",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mocker-builder",
    "package_url": "https://pypi.org/project/mocker-builder/",
    "platform": null,
    "project_url": "https://pypi.org/project/mocker-builder/",
    "project_urls": {
      "Documentation": "https://mocker-builder.readthedocs.io",
      "Homepage": "https://github.com/tgc77/mocker_builder",
      "Source": "https://github.com/tgc77/mocker_builder"
    },
    "release_url": "https://pypi.org/project/mocker-builder/0.1.3/",
    "requires_dist": [
      "pytest (==7.1.3)",
      "pytest-mock (==3.8.2)"
    ],
    "requires_python": "",
    "summary": "Python library to build mock tests dynamicaly using the mocker feature from pytest-mock lib",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17317665,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9913c14f609c1d0add0971c21fe9f8df5b71be2235b0346b5d0d635c4e467baf",
          "md5": "f93d39f59c2c4c88b2dd3f0e0f1779a6",
          "sha256": "ab7037f770b90ca4f7426310a171e81635ecc1ea9b2be88275304fd3fd5f5124"
        },
        "downloads": -1,
        "filename": "mocker_builder-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f93d39f59c2c4c88b2dd3f0e0f1779a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13064,
        "upload_time": "2022-10-31T21:18:41",
        "upload_time_iso_8601": "2022-10-31T21:18:41.078040Z",
        "url": "https://files.pythonhosted.org/packages/99/13/c14f609c1d0add0971c21fe9f8df5b71be2235b0346b5d0d635c4e467baf/mocker_builder-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34c6268178ffd7c2743adc0ec9b0d9432ac14420fe7e8a349fba8c956861de32",
          "md5": "fe7d64f81f84c47a681c1a9ea272d5d2",
          "sha256": "47641b7818b5e2bac7768486e695501639b2f09635f6e0c625c38a4435443cd7"
        },
        "downloads": -1,
        "filename": "mocker-builder-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fe7d64f81f84c47a681c1a9ea272d5d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15557,
        "upload_time": "2022-10-31T21:18:43",
        "upload_time_iso_8601": "2022-10-31T21:18:43.645160Z",
        "url": "https://files.pythonhosted.org/packages/34/c6/268178ffd7c2743adc0ec9b0d9432ac14420fe7e8a349fba8c956861de32/mocker-builder-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0ba216def2f58d2f3b4240b80c52d0f921bd43692e35c3e1cccf91b30e3a777",
          "md5": "c95f94588c9be7bc2880b498f5ca50c1",
          "sha256": "c159a2e0caf16d12b00f6db001a38d0571f484a0861aa76b8b8f30002ba46533"
        },
        "downloads": -1,
        "filename": "mocker_builder-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c95f94588c9be7bc2880b498f5ca50c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5378,
        "upload_time": "2023-02-04T16:10:24",
        "upload_time_iso_8601": "2023-02-04T16:10:24.655717Z",
        "url": "https://files.pythonhosted.org/packages/c0/ba/216def2f58d2f3b4240b80c52d0f921bd43692e35c3e1cccf91b30e3a777/mocker_builder-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2e880f632ff8091eea6f3048e4cfbfa9a9693b013898198648d3bc09724e41d",
          "md5": "c196802ad2460e06d76966d45546e920",
          "sha256": "aae0b5de390abf54012c597be233f7f2e34b623ea96e07d1d9e66893d7d29e2c"
        },
        "downloads": -1,
        "filename": "mocker-builder-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c196802ad2460e06d76966d45546e920",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15713,
        "upload_time": "2023-02-04T16:10:29",
        "upload_time_iso_8601": "2023-02-04T16:10:29.231535Z",
        "url": "https://files.pythonhosted.org/packages/c2/e8/80f632ff8091eea6f3048e4cfbfa9a9693b013898198648d3bc09724e41d/mocker-builder-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dc92114088db21a2151be5239f4674a0df81eb89ba6454bd24753fdf8559474",
          "md5": "2f09ed5bf6856af27e67f20d34e748cb",
          "sha256": "2d16218d161eb5b20aca1719cc1ade839ce9fd43bdde3b4befd709df0f1fc27c"
        },
        "downloads": -1,
        "filename": "mocker_builder-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f09ed5bf6856af27e67f20d34e748cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13136,
        "upload_time": "2023-02-12T17:36:07",
        "upload_time_iso_8601": "2023-02-12T17:36:07.288257Z",
        "url": "https://files.pythonhosted.org/packages/3d/c9/2114088db21a2151be5239f4674a0df81eb89ba6454bd24753fdf8559474/mocker_builder-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89f797f499c10c97e98e4a183e75d3bcd832ccfae16296f32a8c2b2048c0759d",
          "md5": "ffa2650c38600ac3e1f38dfb6da4c032",
          "sha256": "958fa0256e5ed4b878e7c317888c5109c8379fe2126ca33c028af4e98a16fce9"
        },
        "downloads": -1,
        "filename": "mocker-builder-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ffa2650c38600ac3e1f38dfb6da4c032",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15824,
        "upload_time": "2023-02-12T17:36:09",
        "upload_time_iso_8601": "2023-02-12T17:36:09.332845Z",
        "url": "https://files.pythonhosted.org/packages/89/f7/97f499c10c97e98e4a183e75d3bcd832ccfae16296f32a8c2b2048c0759d/mocker-builder-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "790a95b51e3716bad021ea7f5b315e877c111576cab8207ac69fef3e56feecb0",
          "md5": "7c0e64cb4289d2bb2039aae9d97351b3",
          "sha256": "9f97042592f843fae44b9b0d7e8860547c4d6ad26ec453f8a707f6b2bd5388c6"
        },
        "downloads": -1,
        "filename": "mocker_builder-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c0e64cb4289d2bb2039aae9d97351b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13260,
        "upload_time": "2023-03-16T11:08:26",
        "upload_time_iso_8601": "2023-03-16T11:08:26.782767Z",
        "url": "https://files.pythonhosted.org/packages/79/0a/95b51e3716bad021ea7f5b315e877c111576cab8207ac69fef3e56feecb0/mocker_builder-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7df11778b21f81a799c446ef08f3056573ecf3f3951edc73096c51e57b1215d7",
          "md5": "52fb17b57141736ac9af8a2e7cfdef41",
          "sha256": "6c74098218e1e244950b1bc1180fd47e6ba48aebea8b50e59f46f31eb818a3b7"
        },
        "downloads": -1,
        "filename": "mocker-builder-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "52fb17b57141736ac9af8a2e7cfdef41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15963,
        "upload_time": "2023-03-16T11:08:29",
        "upload_time_iso_8601": "2023-03-16T11:08:29.118610Z",
        "url": "https://files.pythonhosted.org/packages/7d/f1/1778b21f81a799c446ef08f3056573ecf3f3951edc73096c51e57b1215d7/mocker-builder-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "790a95b51e3716bad021ea7f5b315e877c111576cab8207ac69fef3e56feecb0",
        "md5": "7c0e64cb4289d2bb2039aae9d97351b3",
        "sha256": "9f97042592f843fae44b9b0d7e8860547c4d6ad26ec453f8a707f6b2bd5388c6"
      },
      "downloads": -1,
      "filename": "mocker_builder-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7c0e64cb4289d2bb2039aae9d97351b3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13260,
      "upload_time": "2023-03-16T11:08:26",
      "upload_time_iso_8601": "2023-03-16T11:08:26.782767Z",
      "url": "https://files.pythonhosted.org/packages/79/0a/95b51e3716bad021ea7f5b315e877c111576cab8207ac69fef3e56feecb0/mocker_builder-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7df11778b21f81a799c446ef08f3056573ecf3f3951edc73096c51e57b1215d7",
        "md5": "52fb17b57141736ac9af8a2e7cfdef41",
        "sha256": "6c74098218e1e244950b1bc1180fd47e6ba48aebea8b50e59f46f31eb818a3b7"
      },
      "downloads": -1,
      "filename": "mocker-builder-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "52fb17b57141736ac9af8a2e7cfdef41",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15963,
      "upload_time": "2023-03-16T11:08:29",
      "upload_time_iso_8601": "2023-03-16T11:08:29.118610Z",
      "url": "https://files.pythonhosted.org/packages/7d/f1/1778b21f81a799c446ef08f3056573ecf3f3951edc73096c51e57b1215d7/mocker-builder-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}