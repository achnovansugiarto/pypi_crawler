{
  "info": {
    "author": "ujay",
    "author_email": "897013045@qq.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Bilibili Tools  \n\n## 内容列表\n- [背景](#背景)\n- [已完成](#已完成)\n- [安装](#安装)\n- [使用说明](#使用说明)\n- [维护者](#维护者)\n\n## 背景   \n本项目主要是通过爬虫获取Bilibili各种信息，包括个人信息，视频下载，弹幕下载等。具体有多少功能主要取决于我自己有什么需求。但是会尽可能多\n的实现各种功能。这些功能并不会以web应用或者GUI等形式出现，更像是以一个可调用的库的形式出现，这样可以很方便的给我自己去构建很多应用。当\n然我自己感觉这个项目算是自己对于Python的一个实践吧。学了很多，但是平常写的机会挺少的，好些技巧都已经忘记了，借着这次机会也是重新学习和\n巩固（如果不是这次疫情还抽不出这么多时间来写）。最后本项目仅用于学习交流，请勿用于任何商业用途。\n\n## 已完成    \n* 目前所有的代码都是在Windows下完成的，并没有在Linux下进行测试，但是应该没有太大问题。   \n* 视频下载(在2020年2月23号B站开始使用BV号而不是AV号，昨天稍微修把项目修改了一下)\n* 视频信息获取(包括点赞数，弹幕等)\n\n## 安装   \n首先要确保你的电脑安装了ffmpeg并且设置了环境变量，如果没有，那么请前往它的[官网](http://ffmpeg.org/)下载。在确保你安装了ffmpeg的情况\n下，请在命令行输入如下的命令以此来安装运行该项目所必须的依赖。   \n```\npip3 install biget\n```   \n\n## 使用说明   \n首先导入该模块\n```\nfrom biget import Video\n```\n然后给Video类的构造函数传递参数来构建video对象，传入的参数就是视频的bv号\n```\nv = Video('BV1fE411F7AF')\n```\n在这个情况下v对象有如下的属性：   \n* bv：视频的bv号码\n* bv_url：视频地址\n* title：视频标题\n* date：视频发布日期\n* page_list：B站的视频可能一个视频有多个p也就是多集，这里是bv号下所有的视频的信息\n* page_num：集数也就是p的数量\n* data：关于视频的信息，在没有调用access方法之前改返回值为None否则返回值为下面的形式\n```\n{\n    'bvid': 视频bv号码,\n    'aid': 视频对应的av号码,\n    'page_num': 同一个bv下p的数量,\n    'title': 视频标题,\n    'date': 发布日期,\n    'owner': up主,\n    'owner_id': up主id,\n    'view': 观看量,\n    'danmaku': 弹幕数量,\n    'reply': 评论数,\n    'favorite': 收藏数量,\n    'coin': 投币数量,\n    'share': 转发数量,\n    'now_rank': 当前排名,\n    'his_rank': 全站排名,\n    'like': 点赞数,\n    'page': 每一个p的信息,\n    'tags': 视频的标签信息,\n}\n```\n* bullet_comments: 视频的弹幕内容，在默认情况下为None，在调用了get_bullet方法之后才会有数据。执行之后该对象的bullet_comments会是\n一个二维list对象，该对象存的每一个元素是一个bs4.element.Tag对象，要想获取里面的文本信息可以使用.text方法。\n\n对象方法(下面假设类对象是video)：\n* download(pages, path='.', cover=True, keep=True, bilingual=True, insert=False)\n    * pages：要下载该bv号下管理的哪几集视频，需要传入一个可迭代对象，如果想下载全集可以传入range(video.page_num)。如果你想选择跳跃\n    的集数，那么请记住，输入的集数要比真实的小1。例如你想要获取第2集，第5集，那么你可以传入[1, 4]。\n    * path：下载的路径，默认情况下会在当前如路径下载（下载的视频会在给定路径下创建文件夹，以视频名字命名）\n    * cover：当cover为True的时候会如果文件夹里有同名文件会直接覆盖\n    * keep：是否保存m4s文件，因为b站直接爬取保存的是m4s，将m4s做处理之后才是我们的最终文件\n    * bilingual：为True时，视频在合并字幕的时候会合并两个CC字幕，当然这个的前提是该视频有两个CC字幕（当CC字幕数量大于2的时候就会取前\n    两个CC字幕），否则只合并一个\n    * insert：是否将CC字幕作为内嵌字幕，为True是则是作为内嵌字幕，（如果为True可能会需要比较长的时间处理），该参数为True只有在\n    bilingual为false的情况下才有效\n* access()\n* get_bullet(pages)\n    * pages：因为bv下的每一个视频都有自己的弹幕，所以你可以选择要获取的集数，同download需要传入一个可迭代对象，如果想下载全集则传入\n    range(video.page_num)，如果你想选择跳跃的集数，那么请记住，输入的集数要比真实的小1。例如你想要获取第2集，第5集，那么你可以传入\n    [1, 4]。\n\n\n## 维护者    \n| 维护者                                         | 邮箱                                                        |\n| --------------------------------------------- | ------------------------------------------------------------ |\n|[@ujay-zheng](https://github.com/ujay-zheng)   | 897013045@qq.com|",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ujay-zheng/biget",
    "keywords": "pip,bilibili,video download,spider,B站视频下载,弹幕",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "biget",
    "package_url": "https://pypi.org/project/biget/",
    "platform": "any",
    "project_url": "https://pypi.org/project/biget/",
    "project_urls": {
      "Homepage": "https://github.com/ujay-zheng/biget"
    },
    "release_url": "https://pypi.org/project/biget/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "关于B站的一个爬虫，可以获取视频的信息，下载视频等",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6900019,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cd2c5cdf29b9a4ca31e7aed111b16b6046bc2ae3f9574cfb744caa169e424b8",
          "md5": "6b9eaed770de79a4926b6eb2015e5faf",
          "sha256": "db71d804e97398b9a9ba5a68bcb667294323dd0b49ac7953b937182fa9a080ac"
        },
        "downloads": -1,
        "filename": "biget-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6b9eaed770de79a4926b6eb2015e5faf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8304,
        "upload_time": "2020-03-28T01:59:43",
        "upload_time_iso_8601": "2020-03-28T01:59:43.380721Z",
        "url": "https://files.pythonhosted.org/packages/2c/d2/c5cdf29b9a4ca31e7aed111b16b6046bc2ae3f9574cfb744caa169e424b8/biget-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cd2c5cdf29b9a4ca31e7aed111b16b6046bc2ae3f9574cfb744caa169e424b8",
        "md5": "6b9eaed770de79a4926b6eb2015e5faf",
        "sha256": "db71d804e97398b9a9ba5a68bcb667294323dd0b49ac7953b937182fa9a080ac"
      },
      "downloads": -1,
      "filename": "biget-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6b9eaed770de79a4926b6eb2015e5faf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8304,
      "upload_time": "2020-03-28T01:59:43",
      "upload_time_iso_8601": "2020-03-28T01:59:43.380721Z",
      "url": "https://files.pythonhosted.org/packages/2c/d2/c5cdf29b9a4ca31e7aed111b16b6046bc2ae3f9574cfb744caa169e424b8/biget-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}