{
  "info": {
    "author": "Chinedu Nwoye",
    "author_email": "nwoye.chinedu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "|PyPI version|\n\nivtmetrics\n==========\n\nThe **ivtmetrics** library provides a Python implementation of metrics\nfor benchmarking surgical action triplet detection and recognition.\n\nFeatures at a glance\n--------------------\n\nThe following are available with ivtmetrics: \n\n1. **Recognition\nEvaluation**: Provides AP metrics to measure the performance of a model\non action triplet recognition. \n\n2. **Detection Evaluation**: Supports\nIntersection over Union distances measure of the triplet localization\nwith respect to the instruments. \n\n3. **Flexible Analysis**: (1) Supports\nfor switching between frame-wise to video-wise averaging of the AP. (2)\nSupports disentangle prediction and obtained filtered performance for\nthe various components of the triplets as well as their association\nperformances at various levels.\n\nInstallation\n------------\n\nInstall via PyPi\n~~~~~~~~~~~~~~~~\n\nTo install **ivtmetrics** use ``pip``\n\n::\n\n   pip install ivtmetrics\n\nInstall via Conda\n~~~~~~~~~~~~~~~~~\n\n::\n\n   conda install -c nwoye ivtmetrics\n\nPython 3.5-3.9 and numpy and scikit-learn are required.\n\nMetrics\n-------\n\nThe metrics have been aligned with what is reported by\n`CholecT50 <https://www.sciencedirect.com/science/article/abs/pii/S1361841522000846>`__ benchmark.\n**ivtmetrics** can be imported in the following way:\n\n.. code:: python\n\n   import ivtmetrics\n\nThe metrics implement both **recognition** and **detection** evaluation.\nThe metrics internally implement a disentangle function to help filter\nthe triplet components as well as triplet different levels of\nassociation.\n\nRecognition Metrics\n~~~~~~~~~~~~~~~~~~~\n\n**Recognition ivtmetrics** can be used in the following ways:\n\n.. code:: python\n\n   metric = ivtmetrics.Recognition(num_class)\n\nThis takes an argument ``num_class`` which is default to ``100``\n\nThe following function are possible with the ``Recognition`` class:\n\n+-----------------------------------+-----------------------------------+\n| Name                              | Description                       |\n+===================================+===================================+\n| update(``targets, predictions``)  | takes in a (batch of) vector      |\n|                                   | predictions and their             |\n|                                   | corresponding groundtruth. vector |\n|                                   | size must match ``num_class`` in  |\n|                                   | the class initialization.         |\n+-----------------------------------+-----------------------------------+\n| video_end()                       | Call to make the end of one video |\n|                                   | sequence.                         |\n+-----------------------------------+-----------------------------------+\n| reset()                           | Reset current records. Useful     |\n|                                   | during training and can be called |\n|                                   | at the begining of each epoch to  |\n|                                   | avoid overlapping epoch           |\n|                                   | performances.                     |\n+-----------------------------------+-----------------------------------+\n| reset_global()                    | Reset all records. Useful for     |\n|                                   | switching between                 |\n|                                   | training/validation/testing or    |\n|                                   | can be called at the begining of  |\n|                                   | new experiment.                   |\n+-----------------------------------+-----------------------------------+\n| compu                             | Obtain the average precision on   |\n| te_AP(``component, ignore_null``) | the fly. This gives the AP only   |\n|                                   | on examples cases after the last  |\n|                                   | ``reset()`` call. Useful for      |\n|                                   | epoch performance during          |\n|                                   | training.                         |\n+-----------------------------------+-----------------------------------+\n| compute_vid                       | (RECOMMENDED) compute video-wise  |\n| eo_AP(``component, ignore_null``) | AP performance as used in         |\n|                                   | CholecT50 benchmarks.             |\n+-----------------------------------+-----------------------------------+\n| compute_glob                      | compute frame-wise AP performance |\n| al_AP(``component, ignore_null``) | for all seen samples.             |\n+-----------------------------------+-----------------------------------+\n| topK(``k, component``)            | Obtain top K performance on       |\n|                                   | action triplet recognition for    |\n|                                   | all seen examples. args ``k`` can |\n|                                   | be any int between 1-99. k =      |\n|                                   | [5,10,15,20] have been used in    |\n|                                   | benchmark papers.                 |\n+-----------------------------------+-----------------------------------+\n| topClass(``k, component``)        | Obtain top K recognized classes   |\n|                                   | on action triplet recognition for |\n|                                   | all seen examples. args ``k`` can |\n|                                   | be any int between 1-99. k = 10   |\n|                                   | have been used in benchmark       |\n|                                   | papers.                           |\n+-----------------------------------+-----------------------------------+\n\nargs:\n~~~~~\n\n-  args ``component`` can be any of the following (‘i’, ‘v’, ‘t’, ‘iv’,\n   ‘it’,‘ivt’) to compute performance for (instrument, verb, target,\n   instrument-verb, instrument-target, instrument-verb-target)\n   respectively. default is ‘ivt’ for triplets.\n-  args ``ignore_null`` (optional, default=False): to ignore null\n   triplet classes in the evaluation. This option is enabled in\n   CholecTriplet2021 challenge.\n-  the output is a ``dict`` with keys(“AP”, “mAP”) for per-class and\n   mean AP respectively.\n\nExample usage\n~~~~~~~~~~~~~\n\n.. code:: python\n\n   import ivtmetrics\n   recognize = ivtmetrics.Recognition(num_class=100)\n   network = MyModel(...) # your model here \n   # training\n   for epoch in number-of-epochs:\n     recognize.reset()\n     for images, labels in dataloader(...): # your data loader\n       predictions = network(image)\n       recognize.update(labels, predictions)\n     results_i = recognize.compute_AP('i')\n     print(\"instrument per class AP\", results_i[\"AP\"])\n     print(\"instrument mean AP\", results_i[\"mAP\"])\n     results_ivt = recognize.compute_AP('ivt')\n     print(\"triplet mean AP\", results_ivt[\"mAP\"])\n\n   # evaluation\n   recognize.reset_global()\n   for video in videos:\n     for images, labels in dataloader(video, ..): # your data loader\n       predictions = network(image)\n       recognize.update(labels, predictions)\n     recognize.video_end()\n       \n   results_i = recognize.compute_video_AP('i')\n   print(\"instrument per class AP\", results_i[\"AP\"])\n   print(\"instrument mean AP\", results_i[\"mAP\"])\n\n   results_it = recognize.compute_video_AP('it')\n   print(\"instrument-target mean AP\", results_it[\"mAP\"])\n\n   results_ivt = recognize.compute_video_AP('ivt')\n   print(\"triplet mean AP\", results_ivt[\"mAP\"])\n\nAny ``nan`` value in results is for classes with no occurrence in the\ndata sample.\n\nDetection Metrics\n~~~~~~~~~~~~~~~~~\n\n**Detection ivtmetrics** can be used in the following ways:\n\n.. code:: python\n\n   metric = ivtmetrics.Detection(num_class, num_tool, threshold=0.5)\n\nThis takes an argument ``num_class`` which is default to ``100`` and\n``num_tool`` which is default to ``6``\n\nThe following function are possible with the ``Detection`` class:\n\n+-----------------------------------+-----------------------------------+\n| Name                              | Description                       |\n+===================================+===================================+\n| update(                           | input: takes in a (batch of)      |\n| ``targets, predictions, format``) | list/dict predictions and their   |\n|                                   | corresponding groundtruth. Each   |\n|                                   | frame prediction/groundtruth can  |\n|                                   | be either as a ``list of list``   |\n|                                   | or as a ``list of dict``.         |\n|                                   | (more details below).             |\n+-----------------------------------+-----------------------------------+\n| video_end()                       | Call to make the end of one video |\n|                                   | sequence.                         |\n+-----------------------------------+-----------------------------------+\n| reset()                           | Reset current records. Useful     |\n|                                   | during training and can be called |\n|                                   | at the begining of each epoch to  |\n|                                   | avoid overlapping epoch           |\n|                                   | performances.                     |\n+-----------------------------------+-----------------------------------+\n| reset_global()                    | Reset all records. Useful for     |\n|                                   | switching between                 |\n|                                   | training/validation/testing or    |\n|                                   | can be called at the begining of  |\n|                                   | new experiment.                   |\n+-----------------------------------+-----------------------------------+\n| compute_AP(``component``)         | Obtain the average precision on   |\n|                                   | the fly. This gives the AP only   |\n|                                   | on examples cases after the last  |\n|                                   | ``reset()`` call. Useful for      |\n|                                   | epoch performance during          |\n|                                   | training.                         |\n+-----------------------------------+-----------------------------------+\n| compute_video_AP(``component``)   | (RECOMMENDED) compute video-wise  |\n|                                   | AP performance as used in         |\n|                                   | CholecT50 benchmarks.             |\n+-----------------------------------+-----------------------------------+\n| compute_global_AP(``component``)  | compute frame-wise AP performance |\n|                                   | for all seen samples.             |\n+-----------------------------------+-----------------------------------+\n\n\nargs:\n~~~~~\n\n1. ``list of list format``: [[tripletID, toolID, toolProbs, x, y, w, h],\n   [tripletID, toolID, toolProbs, x, y, w, h], …], where:\n\n   -  ``tripletID`` = triplet unique identity\n   -  ``toolID`` = instrument unique identity\n   -  ``toolProbs`` = instrument detection confidence\n   -  ``x`` = bounding box x1 coordiante\n   -  ``y`` = bounding box y1 coordinate\n   -  ``w`` = width of the box\n   -  ``h`` = height of the box\n   -  The [x,y,w,h] are scaled between 0..1\n\n2. ``list of dict format``: [{“triplet”:tripletID, “instrument”:[toolID,\n   toolProbs, x, y, w, h]}, {“triplet”:tripletID, “instrument”:[toolID,\n   toolProbs, x, y, w, h]}, …].\n3. ``format`` args describes the input format with either of the values\n   (“list”, “dict”)\n4. ``component`` can be any of the following (‘i’, ‘v’, ‘t’, ‘iv’,\n   ‘it’,‘ivt’) to compute performance for (instrument, verb, target,\n   instrument-verb, instrument-target, instrument-verb-target)\n   respectively, default is ‘ivt’ for triplets.\n\n-  the output is a ``dict`` with keys(“AP”, “mAP”, “Rec”, “mRec”, “Pre”,\n   “mPre”) for per-class AP, mean AP, per-class Recall, mean Recall,\n   per-class Precision and mean Precision respectively.\n\nExample usage\n~~~~~~~~~~~~~\n\n.. code:: python\n\n   import ivtmetrics\n   detect = ivtmetrics.Detection(num_class=100)\n\n   network = MyModel(...) # your model here\n\n   # training\n\n   format = \"list\"\n   for epoch in number of epochs:\n     for images, labels in dataloader(...): # your data loader\n       predictions = network(image)\n       labels, predictions = formatYourLabels(labels, predictions)\n       detect.update(labels, predictions, format=format)\n         \n     results_i = detect.compute_AP('i')\n     print(\"instrument per class AP\", results_i[\"AP\"])\n     print(\"instrument mean AP\", results_i[\"mAP\"])\n       \n     results_ivt = detect.compute_AP('ivt')\n     print(\"triplet mean AP\", results_ivt[\"mAP\"])\n     detect.reset()\n\n\n   # evaluation\n\n   format = \"dict\"\n   for video in videos:\n     for images, labels in dataloader(video, ..): # your data loader\n       predictions = network(image)\n       labels, predictions = formatYourLabels(labels, predictions)\n       detect.update(labels, predictions, format=format)\n     detect.video_end()\n       \n   results_ivt = detect.compute_video_AP('ivt')\n   print(\"triplet mean AP\", results_ivt[\"mAP\"])\n   print(\"triplet mean recall\", results_ivt[\"mRec\"])\n   print(\"triplet mean precision\", results_ivt[\"mPre\"])\n\nAny ``nan`` value in results is for classes with no occurrence in the\ndata sample.\n\n\n\n\n\n\nDisentangle\n-----------\n\nAlthough, the ``Detection()`` and ``Recognition()`` classes uses the ``Disentangle()`` internally, this function can still be used independently for component filtering in the following ways:\n\n\n.. code:: python\n\n   filter = ivtmetrics.Disentangle()\n\n\nAfterwards, any of the component's predictions/labels can be filtered from the main triplet's predictions/labels as follows:\n\n.. code:: python\n\n   i_labels = filter.extract(inputs=ivt_labels, component=\"i\")\n   v_preds  = filter.extract(inputs=ivt_preds, component=\"v\")\n   t_preds  = filter.extract(inputs=ivt_preds, component=\"t\")\n   iv_labels = filter.extract(inputs=ivt_labels, component=\"iv\")\n   it_labels = filter.extract(inputs=ivt_labels, component=\"it\")\n\nIn this example, labels = (batch of) vector of groundtruth labels; preds = (batch of) vector of predicted probability scores.\n\n\n\n\nDocker\n------\n\ncoming soon ..\n\nCitation\n--------\n\nIf you use this metrics in your project or research, please consider\nciting the associated publication:\n\n::\n\n   @article{nwoye2022data,\n      title={Data Splits and Metrics for Benchmarking Methods on Surgical Action Triplet Datasets},\n      author={Nwoye, Chinedu Innocent and Padoy, Nicolas},\n      journal={arXiv preprint arXiv:2204.05235},\n      year={2022}\n   }\n\nReferences\n----------\n\n1. Nwoye, C. I., Yu, T., Gonzalez, C., Seeliger, B., Mascagni, P.,\n   Mutter, D., … & Padoy, N. (2021). Rendezvous: Attention Mechanisms\n   for the Recognition of Surgical Action Triplets in Endoscopic Videos.\n   arXiv preprint arXiv:2109.03223.\n2. Nwoye, C. I., Gonzalez, C., Yu, T., Mascagni, P., Mutter, D.,\n   Marescaux, J., & Padoy, N. (2020, October). Recognition of\n   instrument-tissue interactions in endoscopic videos via action\n   triplets. In International Conference on Medical Image Computing and\n   Computer-Assisted Intervention (pp. 364-374). Springer, Cham.\n3. http://camma.u-strasbg.fr/datasets\n4. https://cholectriplet2021.grand-challenge.org\n5. https://cholectriplet2022.grand-challenge.org\n\n\nLicense\n-------\n\n::\n\n   BSD 2-Clause License\n\n   Copyright (c) 2022, Research Group CAMMA\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions are met:\n\n   1. Redistributions of source code must retain the above copyright notice, this\n      list of conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.```\n\n.. |PyPI version| image:: https://badge.fury.io/py/motmetrics.svg\n   :target: https://pypi.org/project/ivtmetrics/0.0.1/\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/CAMMA-public/ivtmetrics/archive/refs/tags/v0.1.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CAMMA-public/ivtmetrics",
    "keywords": "triplet,average precision,AP,mAP",
    "license": "BSD 2-clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ivtmetrics",
    "package_url": "https://pypi.org/project/ivtmetrics/",
    "platform": null,
    "project_url": "https://pypi.org/project/ivtmetrics/",
    "project_urls": {
      "Download": "https://github.com/CAMMA-public/ivtmetrics/archive/refs/tags/v0.1.2.tar.gz",
      "Homepage": "https://github.com/CAMMA-public/ivtmetrics"
    },
    "release_url": "https://pypi.org/project/ivtmetrics/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python evaluation metrics package for action triplet recognition",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15211815,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4c3ff20dd9edeb60518505e9be68c08af3a66cdeac23570a8cf9b7fb69847aa",
          "md5": "0ff595e54c8cc39c8933bd1148f34cf2",
          "sha256": "16ac93ea13f12e470b176eff909c26886dda3f1afb0b1c2c3df87a331aab8e05"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0ff595e54c8cc39c8933bd1148f34cf2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6956,
        "upload_time": "2022-03-03T17:25:38",
        "upload_time_iso_8601": "2022-03-03T17:25:38.298364Z",
        "url": "https://files.pythonhosted.org/packages/d4/c3/ff20dd9edeb60518505e9be68c08af3a66cdeac23570a8cf9b7fb69847aa/ivtmetrics-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "534a55a92907f89b87d982266b572bdf4a5f83c66bce370219e0c56d71b8bd7d",
          "md5": "03e8910e137b7740a30877dadf8d1f00",
          "sha256": "10600a728aac7ffd211b0d6744f3bd8892765021722abcc9775c8089e72b83b8"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "03e8910e137b7740a30877dadf8d1f00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10442,
        "upload_time": "2022-03-15T13:38:03",
        "upload_time_iso_8601": "2022-03-15T13:38:03.671781Z",
        "url": "https://files.pythonhosted.org/packages/53/4a/55a92907f89b87d982266b572bdf4a5f83c66bce370219e0c56d71b8bd7d/ivtmetrics-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c49eb182fda810b062ea687a22826e9e76290cf75128c14c0d0ea49a41591227",
          "md5": "a0c27dc5c0f3a4b58263b83b7af0b487",
          "sha256": "d52128688fc80dc748b556a6d07c2e5703d1f55077a2cd40764c0667527e71ee"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a0c27dc5c0f3a4b58263b83b7af0b487",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17992,
        "upload_time": "2022-03-15T19:30:04",
        "upload_time_iso_8601": "2022-03-15T19:30:04.613484Z",
        "url": "https://files.pythonhosted.org/packages/c4/9e/b182fda810b062ea687a22826e9e76290cf75128c14c0d0ea49a41591227/ivtmetrics-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d8d618216f063e0fe3d87efb2470aad3782614a791a80c43a3f075cacaf0c20",
          "md5": "644b841e46b8bc033e75622d9e7f9f0d",
          "sha256": "9c7c8640fa64c89c57024236036fe489353162f68a93b9b2f5ff3dce927ce6ef"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "644b841e46b8bc033e75622d9e7f9f0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16848,
        "upload_time": "2022-03-15T19:46:55",
        "upload_time_iso_8601": "2022-03-15T19:46:55.011059Z",
        "url": "https://files.pythonhosted.org/packages/4d/8d/618216f063e0fe3d87efb2470aad3782614a791a80c43a3f075cacaf0c20/ivtmetrics-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88627458f006cf23c290b381103a5586c8a87407bf3776e2f1511428b4d5d9fd",
          "md5": "dc1de9db1968e55d4687fe72ca31311f",
          "sha256": "85925a1c25a6dad7beb5294c929ff0ab4b72d2246927632ce452c44e31b1da76"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "dc1de9db1968e55d4687fe72ca31311f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16942,
        "upload_time": "2022-03-15T20:22:45",
        "upload_time_iso_8601": "2022-03-15T20:22:45.867179Z",
        "url": "https://files.pythonhosted.org/packages/88/62/7458f006cf23c290b381103a5586c8a87407bf3776e2f1511428b4d5d9fd/ivtmetrics-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90f073a4ef14800714f65e5b7af467103cf34db8c26035078e2de2f8b14d2b37",
          "md5": "cb7253620406134f9660ad2250e8adb2",
          "sha256": "12c772fb26f271d1ceef5f39a3902adbdff6608fe21c1d6f81180cd36f4ad19a"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cb7253620406134f9660ad2250e8adb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17905,
        "upload_time": "2022-03-15T20:47:53",
        "upload_time_iso_8601": "2022-03-15T20:47:53.112160Z",
        "url": "https://files.pythonhosted.org/packages/90/f0/73a4ef14800714f65e5b7af467103cf34db8c26035078e2de2f8b14d2b37/ivtmetrics-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5493f5fc14678074262e77ba46a34eb2d576e1d9e0443387d369bfbc40a79395",
          "md5": "7d13329bd5af71f82ed308f67bb7ffe9",
          "sha256": "4b23122ede799d1d9b11139c634cc6cbd902c2f3b0181e2ab956ef6c51c1f2ff"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "7d13329bd5af71f82ed308f67bb7ffe9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19315,
        "upload_time": "2022-04-19T07:55:22",
        "upload_time_iso_8601": "2022-04-19T07:55:22.028019Z",
        "url": "https://files.pythonhosted.org/packages/54/93/f5fc14678074262e77ba46a34eb2d576e1d9e0443387d369bfbc40a79395/ivtmetrics-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ed8ae345e2694b59c4ade0f922d9745142a7253c5b748109d3c469d37599b46",
          "md5": "58a40c4b4aaeeab0126b4028bca12b2a",
          "sha256": "91c3ed22ceeb91d098999cadac2e6d6d53d0d0a630a462ebc812439b23b45af9"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "58a40c4b4aaeeab0126b4028bca12b2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20968,
        "upload_time": "2022-04-26T12:39:57",
        "upload_time_iso_8601": "2022-04-26T12:39:57.720840Z",
        "url": "https://files.pythonhosted.org/packages/8e/d8/ae345e2694b59c4ade0f922d9745142a7253c5b748109d3c469d37599b46/ivtmetrics-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c72a622c0a57b45b3ed91de3d4786cfcb0cd9ec8ce48cb708ee10f8d41f058a",
          "md5": "d624c38481e1be9fe19a2b8cc2b8f613",
          "sha256": "03d11268f797ad94462783d275ef50764e464083fd3b37911e2842520ba2dd93"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "d624c38481e1be9fe19a2b8cc2b8f613",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21142,
        "upload_time": "2022-05-30T08:55:40",
        "upload_time_iso_8601": "2022-05-30T08:55:40.973634Z",
        "url": "https://files.pythonhosted.org/packages/2c/72/a622c0a57b45b3ed91de3d4786cfcb0cd9ec8ce48cb708ee10f8d41f058a/ivtmetrics-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bf9944618e2cfbbcdca5e76f24c882008c3cc27e8890f9bae016e68412a5a87",
          "md5": "f2285506410369d7f73d467cf9ed8f93",
          "sha256": "e491b9ae639ee59ef6a7838235bb9fff258c70d7df89016c1508c8485d1ca425"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f2285506410369d7f73d467cf9ed8f93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21161,
        "upload_time": "2022-07-18T14:46:45",
        "upload_time_iso_8601": "2022-07-18T14:46:45.657282Z",
        "url": "https://files.pythonhosted.org/packages/6b/f9/944618e2cfbbcdca5e76f24c882008c3cc27e8890f9bae016e68412a5a87/ivtmetrics-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6426f6ca051a8d743e5d5fbd9c278ed04c7e8718787cecca48be255d4bee7fa",
          "md5": "017bf7cb339e3186e2c5f440b08dee21",
          "sha256": "9c39c001fd44f15280eec180bf927336d524137d1a6056cf3c1c345db5e9cce6"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "017bf7cb339e3186e2c5f440b08dee21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21322,
        "upload_time": "2022-09-26T07:59:11",
        "upload_time_iso_8601": "2022-09-26T07:59:11.613603Z",
        "url": "https://files.pythonhosted.org/packages/e6/42/6f6ca051a8d743e5d5fbd9c278ed04c7e8718787cecca48be255d4bee7fa/ivtmetrics-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65c47b2b0278e367f1c35a0cd1b5a4542e5c643ad791c485866e62fcec5c0162",
          "md5": "ba2ea5f7d1a96dd0af609095b27f2207",
          "sha256": "5a950c6185188153d37d5f9ab4442a51ecf3c90e819e07ec4ac2d3abb9bf3aed"
        },
        "downloads": -1,
        "filename": "ivtmetrics-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ba2ea5f7d1a96dd0af609095b27f2207",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21221,
        "upload_time": "2022-09-26T08:28:07",
        "upload_time_iso_8601": "2022-09-26T08:28:07.288612Z",
        "url": "https://files.pythonhosted.org/packages/65/c4/7b2b0278e367f1c35a0cd1b5a4542e5c643ad791c485866e62fcec5c0162/ivtmetrics-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65c47b2b0278e367f1c35a0cd1b5a4542e5c643ad791c485866e62fcec5c0162",
        "md5": "ba2ea5f7d1a96dd0af609095b27f2207",
        "sha256": "5a950c6185188153d37d5f9ab4442a51ecf3c90e819e07ec4ac2d3abb9bf3aed"
      },
      "downloads": -1,
      "filename": "ivtmetrics-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ba2ea5f7d1a96dd0af609095b27f2207",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21221,
      "upload_time": "2022-09-26T08:28:07",
      "upload_time_iso_8601": "2022-09-26T08:28:07.288612Z",
      "url": "https://files.pythonhosted.org/packages/65/c4/7b2b0278e367f1c35a0cd1b5a4542e5c643ad791c485866e62fcec5c0162/ivtmetrics-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}