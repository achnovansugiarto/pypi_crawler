{
  "info": {
    "author": "Uros Rapajic",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# **alph** - <b>al</b>tair for your gra<b>ph</b>\n\nA Python library using [Altair](https://altair-viz.github.io/) for declarative, data-driven network visualisation.\n\n<p align=\"center\"><img alt=\"Alph graph\" src=\"examples/images/small_graph.png\" width=60%/></p>\n\n## Why\n\nTidy, legible graph visualisations can be elusive. Alph helps by bringing together effective styling, layout and pruning options from across the Python ecosystem.\n\n## How it works\n\n1. Get your data into a NetworkX Graph\n2. Pick a network layout function, or bring your own node coordinates\n3. Define node and edge style attributes\n4. Plot using a simple function call\n\nBest bet is probably to dive straight into the [examples](./examples/), and come back to the API documentation below as needed.\n\n## Features\n\n- plot any NetworkX Graph\n- support for any layout expressed as a NetworkX `pos` structure (a dict like `{node_id: (x,y), ...}`)\n- several readily accessible and tunable layout functions (see [example](examples/3_layouts_gallery.ipynb))\n- Altair-style data driven node and edge styling - size, colour, stroke, opacity, scales, conditionals and more\n- convenience args for node labels, halos\n- experimental 1-level \"combo\" node support\n\n## Installation\n\n### Minimal\n\n```\npip install alph\n```\n\n### Recommended\n\n1. for graphviz layout support, install graphviz on your platform - e.g. `brew install graphviz` on Mac,\n   `sudo apt install graphviz` on Debian / Ubuntu etc - or [download the installer](https://graphviz.org/download/)\n\n2. Install alph with graphviz support:\n   ```\n   pip install alph[graphviz]\n   ```\n3. Install the ForceAtlas2 layout library from our fork, along with cython for speedup\n   ```\n   pip install cython git+https://github.com/connectedcompany/forceatlas2.git\n   ```\n\n> #### Why is the ForceAtlas2 install separate?\n>\n> [ForceAtlas2](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0098679) is a classic,\n> user feedback led layout algorithm from the [Gephi](https://gephi.org/) team, and the [ForceAtlas2 library](https://github.com/bhargavchippada/forceatlas2)\n> implementation is an excellent, performant Python port. There are two things to be aware of:\n>\n> 1. **GPL licence** - the ForceAtlas2 library, and some of the works it is derived from, are GPL licensed -\n>    hence care is needed when distributing and linking to it. We thus intend to keep its install optional\n>    long term. Since alph uses a plugin design for layout providers, this is straightforward for us to\n>    accommodate, and maintain explicit separation for use cases where GPL is an issue.\n>\n> 2. **Our fork** - recently, releases of the library have been sporradic - though there is stated intent for\n>    regular maintenance to resume. In the meantime, we've created a temporary fork to be able to roll in\n>    changes. Currently, our fork incorporates a simple change that enables deterministic layouts.\n\n## Usage\n\nSimply call the `alph` function with desired options.\n\nMinimally, given a weighted network G:\n\n```\nfrom alph import alph\n\nG = ...\nalph(G, weight_attr=\"weight\")\n```\n\n## Examples\n\nSee [`examples`](./examples). Here's a taster:\n\n- Some of the supported layouts (from the [layouts gallery example](examples/3_layouts_gallery.ipynb)):\n  ![Layouts gallery](examples/images/layouts.png)\n\n- Use of geolocation coordinates for graph layout, (from the [flight routes example](examples/5_flight_routes.ipynb)):\n  ![Geo-location based layout](examples/images/flight_routes.png)\n\n- A styled interaction network (from the [dolphins example](examples/4_dolphins.ipynb)):\n  ![Dolphins](examples/images/dolphins.png)\n\n- \"Combo\"-style layout (experimental) - category-driven node grouping with edge weight aggregation, from the [Les Mis example](examples/6_les_mis_experimental_combo.ipynb):\n  ![Combo layout](examples/images/combo.png)\n\n---\n\n# API\n\n### Supported layout functions\n\n- [NetworkX layouts](https://networkx.org/documentation/stable/reference/drawing.html#module-networkx.drawing.layout): Spring, Fruchterman-Reingold, etc\n- NetworkX-wrapped [graphviz layouts](https://networkx.org/documentation/stable/reference/generated/networkx.drawing.nx_agraph.graphviz_layout.html):\n  dot, neato etc\n- Gephi ForceAtlas2 based on the\n  [forceatlas2 Python implementation](https://github.com/bhargavchippada/forceatlas2) -\n  see [layout.py](./alph/layout.py) for configuration options, and\n  [this paper](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0098679)\n  for more detail\n- ForceAtlas implementation within [scikit-network](https://github.com/sknetwork-team/scikit-network)\n- Any other that returns a NetworkX-style node positions dictionary\n\n### Supported arguments\n\n| arg                              | type(s)                | default              | description                                                                                                                                                                                 |\n| -------------------------------- | ---------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| G                                | Networkx Graph         |                      | graph to visualise                                                                                                                                                                          |\n| weight_attr                      | str                    |                      | edge weight attribute, for weighted graphs                                                                                                                                                  |\n| layout_fn                        | function               | ForceAtlas2          | Function that, given a graph, returns a layout                                                                                                                                              |\n| node args                        | dict                   |                      | See below                                                                                                                                                                                   |\n| edge args                        | dict                   |                      | See below                                                                                                                                                                                   |\n| combo_group_by                   | str or list            |                      | Attribute to use to create grouped combo nodes                                                                                                                                              |\n| combo_layout_fn                  | function               | Fruchterman-Reingold | Layout function for combo nodes                                                                                                                                                             |\n| combo_node_args                  | dict                   |                      | See below                                                                                                                                                                                   |\n| combo_edge_args                  | dict                   |                      | See below                                                                                                                                                                                   |\n| combo_edge_weight_agg_attr       | dict                   |                      | Attribute to use to weigh combo edges; if set, overrides weight_attr. Can use values given via combo_edge_agg_attrs. If not set and weight_attr not given, falls back to simple edge count. |\n| combo_edge_agg_attrs             | dict                   |                      | Pandas groupby-style dict, describing how to aggregate edge attributes that span nodes - for example `{\"combo_edge_attr_name\": (\"edge_attr_name\", \"sum\")}`                                  |\n| combo_edge_weight_threshold      | dict                   |                      | Drop edges below this weight                                                                                                                                                                |\n| include_edgeless_combo_nodes     | dict                   |                      | Whether or not to incorporate disconnected combo nodes                                                                                                                                      |\n| combo_node_additional_attrs      | dict                   |                      | Attributes to add to combo nodes                                                                                                                                                            |\n| edge_node_additional_attrs       | dict                   |                      | Attributes to add to combo node edges, like `{\"edge_attr_name\": agg_fn}`; agg fn is applied across all attr values for edges that link grouped nodes                                        |\n| combo_empty_attr_action          | drop, group or promote | `drop`               | What to do with nodes that have an empty value for the combo_group_by attribute                                                                                                             |\n| combo_size_scale_domain          | 2-item list or tuple   | `[0, 25]`            | Lower/upper bound of num nodes to apply to combo node size range                                                                                                                            |\n| combo_size_scale_range           | 2-item list or tuple   | `[6^2, 180^2]`       | Combo node size range                                                                                                                                                                       |\n| combo_inner_graph_scale_factor   | float                  | `0.6`                | Scale down inner graph to fit inside combo nodes by this factor - normally <1                                                                                                               |\n| non_serializable_datetime_format | str                    | `%d %b %Y`           | Format string for non-serialisable date / time types that otherwise break Altair                                                                                                            |\n| width                            | int                    | `800`                | Figure width (px)                                                                                                                                                                           |\n| height                           | int                    | `600`                | Figure height (px)                                                                                                                                                                          |\n| prop_kwargs                      | dict                   |                      | Optional properties such as title                                                                                                                                                           |\n| padding                          | int                    |                      | Padding inside figure edges. No node centres will be placed outside this boundary.                                                                                                          |\n\n### Node args\n\n| arg              | type(s)       | default   |\n| ---------------- | ------------- | --------- |\n| size             | int, alt.\\*   | `400`     |\n| tooltip_attrs    | list          |           |\n| fill             | str, alt.\\*   | `#000`    |\n| opacity          | float, alt.\\* | `1`       |\n| stroke           | str, alt.\\*   | `#565656` |\n| strokeWidth      | int, alt.\\*   | `0`       |\n| halo_offset      | int           |           |\n| halo_opacity     | float, alt.\\* | `1`       |\n| halo_stroke      | str, alt.\\*   | `#343434` |\n| halo_strokeWidth | int, alt.\\*   | `2`       |\n| label_attr       | str           |           |\n| label_offset     | int           | `6`       |\n| label_size       | int           | `10`      |\n| label_color      | str           | `black`   |\n\n### Edge args\n\n| arg         | type(s)        | default                                                                            |\n| ----------- | -------------- | ---------------------------------------------------------------------------------- |\n| weight_attr | str            | `weight`                                                                           |\n| color       | str, alt.\\*    | `#606060`                                                                          |\n| opacity     | float , alt.\\* | `alt.Size(weight_attr, scale=alt.Scale(range=[0.3, 1])` if weighted, `1` otherwise |\n| strokeWidth | int, alt.\\*    | `alt.Size(weight_attr, scale=alt.Scale(range=[0.1, 5])` if weighted, `2` otherwise |\n\n---\n\n## Tips\n\n- Get to know your layout algos - especially the 2-3 most used ones. They can have a dramatic\n  effect on the results. A combination of FA2, Spring and Fruchterman is extremely versatile\n  if set up right.\n- Pass `seed` to layout functions where possible, for repeatable layouts\n- Set padding to ensure node elements stay within figure boundaries\n\n## Known limitations\n\n- Node `size` attribute does not support all Altair options - currently only\n  `alt.value` and `alt.Size` with linear `domain` and `range` scales. More can be\n  added as needed.\n\n  This is a design choice, made to not burden the user with calculating things like\n  label and halo positions when node sizes vary. Will review this tradeoff based\n  on in-use experience.\n\n- One combo level currently supported\n\n## See also\n\n- [nx-altair](https://github.com/Zsailer/nx_altair) is a nice project that takes a slightly\n  different approach to combining NetworkX and Altair for network viz.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/connectedcompany/alph",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alph",
    "package_url": "https://pypi.org/project/alph/",
    "platform": null,
    "project_url": "https://pypi.org/project/alph/",
    "project_urls": {
      "Homepage": "https://github.com/connectedcompany/alph"
    },
    "release_url": "https://pypi.org/project/alph/0.4.1/",
    "requires_dist": [
      "altair (>=4.1.0)",
      "jsonschema (<4.17)",
      "networkx (>=2.6.3)",
      "pandas (<1.5.0)",
      "scikit-network (>=0.27.1)",
      "pygraphviz (>=1.10) ; extra == 'graphviz'"
    ],
    "requires_python": ">=3.8",
    "summary": "alph",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16653556,
  "releases": {
    "0.3.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30fb1bfe9ba643428e1e247759f0928f9983bcb09d1b1caad267f3d18cca5952",
          "md5": "4395d49c173768e35bc3cddce89add12",
          "sha256": "806df46366e8545bcebcf0fa4039434e259ad77227453365a7a86ae0990a8293"
        },
        "downloads": -1,
        "filename": "alph-0.3.30-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4395d49c173768e35bc3cddce89add12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19467,
        "upload_time": "2022-10-14T16:39:05",
        "upload_time_iso_8601": "2022-10-14T16:39:05.095454Z",
        "url": "https://files.pythonhosted.org/packages/30/fb/1bfe9ba643428e1e247759f0928f9983bcb09d1b1caad267f3d18cca5952/alph-0.3.30-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56e010c20aaddf135184a272768a52a19afcebb9d0d6340f853891c7b2c825a3",
          "md5": "b547d8e17a13bc9b9d09b6679f08324b",
          "sha256": "01129b7a64b752c9a006e1eaf39c8028e4327be03eb517337fb663f337ef3c1c"
        },
        "downloads": -1,
        "filename": "alph-0.3.30.tar.gz",
        "has_sig": false,
        "md5_digest": "b547d8e17a13bc9b9d09b6679f08324b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20782,
        "upload_time": "2022-10-14T16:39:06",
        "upload_time_iso_8601": "2022-10-14T16:39:06.490054Z",
        "url": "https://files.pythonhosted.org/packages/56/e0/10c20aaddf135184a272768a52a19afcebb9d0d6340f853891c7b2c825a3/alph-0.3.30.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e80075385dbb176a61b38c62df4d0296d9a1b393ef76a5bc3075a5973796f91f",
          "md5": "71b64dff2a8187689ddadffc3a1ebddb",
          "sha256": "c4d1eedad43dc19ee91c22cad42566e03edc9a6a68394109d5908fe3ee700f3d"
        },
        "downloads": -1,
        "filename": "alph-0.3.32-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71b64dff2a8187689ddadffc3a1ebddb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19465,
        "upload_time": "2022-10-14T17:07:21",
        "upload_time_iso_8601": "2022-10-14T17:07:21.008113Z",
        "url": "https://files.pythonhosted.org/packages/e8/00/75385dbb176a61b38c62df4d0296d9a1b393ef76a5bc3075a5973796f91f/alph-0.3.32-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c84189ac70666fbb8fc722771e1148656f894015c71fd2ed7d92a527f68c431",
          "md5": "3bba261c03381470e46609c9bf9ab79f",
          "sha256": "a0c9890c7cb0596198b4dae550009e77643cdaef9f4c3e5713f74c83c03432e6"
        },
        "downloads": -1,
        "filename": "alph-0.3.32.tar.gz",
        "has_sig": false,
        "md5_digest": "3bba261c03381470e46609c9bf9ab79f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20784,
        "upload_time": "2022-10-14T17:07:22",
        "upload_time_iso_8601": "2022-10-14T17:07:22.148782Z",
        "url": "https://files.pythonhosted.org/packages/8c/84/189ac70666fbb8fc722771e1148656f894015c71fd2ed7d92a527f68c431/alph-0.3.32.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3002352fcb2981db076c468c01071b9b50e94d95a0be2e65f86bcbdc62220f1c",
          "md5": "b87a5524ba54a6a2f47ee3a4eb3bcb8a",
          "sha256": "5f534d9384baf45a5ee76cc1a46b073ea7ae9d2ec59934aaf0cd70f69d0a2187"
        },
        "downloads": -1,
        "filename": "alph-0.3.33-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b87a5524ba54a6a2f47ee3a4eb3bcb8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19593,
        "upload_time": "2022-10-19T15:26:47",
        "upload_time_iso_8601": "2022-10-19T15:26:47.636019Z",
        "url": "https://files.pythonhosted.org/packages/30/02/352fcb2981db076c468c01071b9b50e94d95a0be2e65f86bcbdc62220f1c/alph-0.3.33-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1185458f1ae64d1aef22d9d06ace4240fd5693ca03ac9409d43fe2acb896b81",
          "md5": "ecf9bd2c816a57454f24d57e35ccb0ca",
          "sha256": "561cd2e68b4f9489b33b85d663b18c81d59b9d87042994573b57082135975180"
        },
        "downloads": -1,
        "filename": "alph-0.3.33.tar.gz",
        "has_sig": false,
        "md5_digest": "ecf9bd2c816a57454f24d57e35ccb0ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20997,
        "upload_time": "2022-10-19T15:26:48",
        "upload_time_iso_8601": "2022-10-19T15:26:48.981019Z",
        "url": "https://files.pythonhosted.org/packages/f1/18/5458f1ae64d1aef22d9d06ace4240fd5693ca03ac9409d43fe2acb896b81/alph-0.3.33.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.34": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab9d0665326789111fdb0f05bcc06a05ec67eca47d738005e948322a8c4088f4",
          "md5": "bca0d4781e5e6456e8dbd234ce4b4221",
          "sha256": "1d8f213fd4e4d3dc67b8bc79df804466ab3d42577e41a0dbd06afb821ad091b6"
        },
        "downloads": -1,
        "filename": "alph-0.3.34-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bca0d4781e5e6456e8dbd234ce4b4221",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19783,
        "upload_time": "2022-10-19T17:54:02",
        "upload_time_iso_8601": "2022-10-19T17:54:02.336665Z",
        "url": "https://files.pythonhosted.org/packages/ab/9d/0665326789111fdb0f05bcc06a05ec67eca47d738005e948322a8c4088f4/alph-0.3.34-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "333042acd3624ed4c1e47eac2a6b27dadc13ca3d70149a75a5702cf1f49a2bb3",
          "md5": "95592bbe5809865f426eb29b8514096d",
          "sha256": "51042251cadf12fced1ad0af503774c7b72fca0718919c91203a41ae198d32f6"
        },
        "downloads": -1,
        "filename": "alph-0.3.34.tar.gz",
        "has_sig": false,
        "md5_digest": "95592bbe5809865f426eb29b8514096d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21396,
        "upload_time": "2022-10-19T17:54:03",
        "upload_time_iso_8601": "2022-10-19T17:54:03.870525Z",
        "url": "https://files.pythonhosted.org/packages/33/30/42acd3624ed4c1e47eac2a6b27dadc13ca3d70149a75a5702cf1f49a2bb3/alph-0.3.34.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23ee86434871e21e0de00986a7c002edb007d9acefbd7409ee9c7bf9623e95b1",
          "md5": "8d76a1cc2bf86324ca3b2cbfa280272b",
          "sha256": "962cdabfe7b2aec0900ab0a1d2e914e8d0b2e7dea9aa4d190e9280c055720c9e"
        },
        "downloads": -1,
        "filename": "alph-0.3.35-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d76a1cc2bf86324ca3b2cbfa280272b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19789,
        "upload_time": "2023-01-13T18:20:43",
        "upload_time_iso_8601": "2023-01-13T18:20:43.606025Z",
        "url": "https://files.pythonhosted.org/packages/23/ee/86434871e21e0de00986a7c002edb007d9acefbd7409ee9c7bf9623e95b1/alph-0.3.35-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be688733bdaf0ff1d5d491619e1818100aaee9d33a537958441b288f685b15a",
          "md5": "1fe6e319de6905deeff56d5c9c30a6c7",
          "sha256": "329e771c3f1fe896df0a292205523a25401dcee8f0be42c217978d4f7cb23cad"
        },
        "downloads": -1,
        "filename": "alph-0.3.35.tar.gz",
        "has_sig": false,
        "md5_digest": "1fe6e319de6905deeff56d5c9c30a6c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21463,
        "upload_time": "2023-01-13T18:20:44",
        "upload_time_iso_8601": "2023-01-13T18:20:44.941066Z",
        "url": "https://files.pythonhosted.org/packages/3b/e6/88733bdaf0ff1d5d491619e1818100aaee9d33a537958441b288f685b15a/alph-0.3.35.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5b8f46a2dc2faff10be7c49e640232391b349037cd28e1f3f6d0f5262c92524",
          "md5": "be8312960fda4f32e37718329dabe01a",
          "sha256": "df470757cb8261b89c6592c8e813983b98c691ca4faa4231ea1b32f52084ba9d"
        },
        "downloads": -1,
        "filename": "alph-0.3.36-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be8312960fda4f32e37718329dabe01a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19789,
        "upload_time": "2023-01-31T13:11:41",
        "upload_time_iso_8601": "2023-01-31T13:11:41.960772Z",
        "url": "https://files.pythonhosted.org/packages/b5/b8/f46a2dc2faff10be7c49e640232391b349037cd28e1f3f6d0f5262c92524/alph-0.3.36-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf3ab66746ba6fb4d3fd929bb2d58b2238f3fd4256d1d8e51fae4ca891c1b1b0",
          "md5": "66fed46e43d46050d7983fe249b5ee7a",
          "sha256": "d60f684e6488cb08407c829310dda85a78cc6dafccccab79f147b9af70b37d25"
        },
        "downloads": -1,
        "filename": "alph-0.3.36.tar.gz",
        "has_sig": false,
        "md5_digest": "66fed46e43d46050d7983fe249b5ee7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21465,
        "upload_time": "2023-01-31T13:11:43",
        "upload_time_iso_8601": "2023-01-31T13:11:43.233823Z",
        "url": "https://files.pythonhosted.org/packages/bf/3a/b66746ba6fb4d3fd929bb2d58b2238f3fd4256d1d8e51fae4ca891c1b1b0/alph-0.3.36.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23388beb00a68e79f5fe7b93a971dca79d03b5313deed67bc16e433c4eaa829f",
          "md5": "a9295180f589fb63ed69cbc0155f3c08",
          "sha256": "ecf0db4e7a775f3b6cf73ce6472a255c4effe92e24b85dc90bac2a95e3e8ea9c"
        },
        "downloads": -1,
        "filename": "alph-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9295180f589fb63ed69cbc0155f3c08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 20649,
        "upload_time": "2023-02-01T17:20:12",
        "upload_time_iso_8601": "2023-02-01T17:20:12.137696Z",
        "url": "https://files.pythonhosted.org/packages/23/38/8beb00a68e79f5fe7b93a971dca79d03b5313deed67bc16e433c4eaa829f/alph-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b01303b86529331d708a516e9aa08fcb5811b13ef0ce82565fc099c49958f38",
          "md5": "fe8523909e5390cb14705baa3dd67e47",
          "sha256": "0c0b9ce5454af61411aca5334199469a0569fa286887844f4317c511127ff642"
        },
        "downloads": -1,
        "filename": "alph-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe8523909e5390cb14705baa3dd67e47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22370,
        "upload_time": "2023-02-01T17:20:13",
        "upload_time_iso_8601": "2023-02-01T17:20:13.624404Z",
        "url": "https://files.pythonhosted.org/packages/7b/01/303b86529331d708a516e9aa08fcb5811b13ef0ce82565fc099c49958f38/alph-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23388beb00a68e79f5fe7b93a971dca79d03b5313deed67bc16e433c4eaa829f",
        "md5": "a9295180f589fb63ed69cbc0155f3c08",
        "sha256": "ecf0db4e7a775f3b6cf73ce6472a255c4effe92e24b85dc90bac2a95e3e8ea9c"
      },
      "downloads": -1,
      "filename": "alph-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a9295180f589fb63ed69cbc0155f3c08",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 20649,
      "upload_time": "2023-02-01T17:20:12",
      "upload_time_iso_8601": "2023-02-01T17:20:12.137696Z",
      "url": "https://files.pythonhosted.org/packages/23/38/8beb00a68e79f5fe7b93a971dca79d03b5313deed67bc16e433c4eaa829f/alph-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b01303b86529331d708a516e9aa08fcb5811b13ef0ce82565fc099c49958f38",
        "md5": "fe8523909e5390cb14705baa3dd67e47",
        "sha256": "0c0b9ce5454af61411aca5334199469a0569fa286887844f4317c511127ff642"
      },
      "downloads": -1,
      "filename": "alph-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fe8523909e5390cb14705baa3dd67e47",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 22370,
      "upload_time": "2023-02-01T17:20:13",
      "upload_time_iso_8601": "2023-02-01T17:20:13.624404Z",
      "url": "https://files.pythonhosted.org/packages/7b/01/303b86529331d708a516e9aa08fcb5811b13ef0ce82565fc099c49958f38/alph-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}