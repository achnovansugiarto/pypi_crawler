{
  "info": {
    "author": "Arvid Jakobsson",
    "author_email": "arvid.jakobsson@nomadic-labs.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# pytest-job-selection\n\n[![PyPI version](https://img.shields.io/pypi/v/pytest-job-selection.svg)](https://pypi.org/project/pytest-job-selection)\n\n[![Python versions](https://img.shields.io/pypi/pyversions/pytest-job-selection.svg)](https://pypi.org/project/pytest-job-selection)\n\nBy [Arvid Jakobsson](mailto:arvid.jakobsson@nomadic-labs.com).\n\n[pytest-job-selection](https://gitlab.com/arvidnl/pytest-job-selection) is a\n[pytest](https://github.com/pytest-dev/pytest) plugin for load\nbalancing test suites.\n\nIn short, the plugin provides a new pytest argument `--job` such that\nrunning `pytest --job X/Y [tests...]` (where `1 <= X <= Y`) groups the\nselected `tests` in `Y` jobs and then executes the tests of job\n`X`. By default, the plugin attempts to create jobs where the number\nof test cases are approximately close to each other.\n\nTo instead obtain jobs whose run time are close to each other, a JUnit\nXML file can be provided through the `--prev-junit-xml junit.xml`\nargument. In this mode, the plugin will balance jobs based on the\npreviously reported run time of test cases in `junit.xml`. Test cases\nlacking an entry in `junit.xml` are given a default run time, and\ncases in `junit.xml` that are not selected are ignored. See [JUnit XML\nfiles](#junit-xml-files) for more information on this feature.\n\nThis plugin enables convenient parallel execution of large pytest\nsuites in CIs such as [GitLab CI](https://docs.gitlab.com/ee/ci/)\nusing [parallel\njobs](https://docs.gitlab.com/ee/ci/jobs/job_control.html#parallelize-large-jobs).\nSee the section [GitLab CI integration](#gitlab-ci-integration) for\nmore details.\n\nThis plugin is inspired by a similar functionality in\n[Tezt](https://gitlab.com/nomadic-labs/tezt), an OCaml test framework.\n\n## Features\n\n-   Adds a `--job` pytest argument that executes a subset of selected\n    test.\n-   Adds a `--prev-junit-xml <junit.xml>` pytest argument. When\n    supplied, the plugin heuristically attempts to balance test jobs\n    using a greedy knapsack algorithm into jobs of even runtime, using\n    the timing information in `junit.xml`. This argument can only be\n    given once, but JUnit XML files can trivially be merged.\n-   Adds a `--jobs-dry-run` pytest argument that outputs debug\n    information on test balancing.\n\n## Requirements\n\n-   [pytest](https://github.com/pytest-dev/pytest)\n-   [typing_extensions](https://pypi.org/project/typing-extensions/)\n\nIn addition, [cram](https://bitheap.org/cram/) is used to test the\nplugin.\n\n## Installation\n\nYou can install `pytest-job-selection` via\n[pip](https://pypi.org/project/pip/) from\n[PyPI](https://pypi.org/project):\n\n    $ pip install pytest-job-selection\n\n## Usage\n\nThe following command should suffice for most use cases:\n\n    pytest --prev-junit-xml junit.xml --job X/Y [tests...]\n\nThis will group selected tests into `Y` jobs. It uses a\n[balancing heuristic](#balancing-heuristic) to group selected\ntests, based on the previously recorded timing information in the\nJUnit XML file `junit.xml`. It then executes all tests in job `X`. Jobs\nare 1-indexed, so that job `1` is the first job and job `Y` is the last\none. In other words, executing:\n\n    pytest --prev-junit-xml junit.xml --job 1/Y [tests...]\n    pytest --prev-junit-xml junit.xml --job 2/Y [tests...]\n    ...\n    pytest --prev-junit-xml junit.xml --job Y/Y [tests...]\n\nWill execute the same tests as:\n\n    pytest [tests...]\n\nThe plugin can be used without passing `--prev-junit-xml`. In this\ncase, jobs are instead balanced by number of tests.\n\n### JUnit XML files\n\nSee the [pytest\ndocumentation](https://docs.pytest.org/en/6.2.x/usage.html#creating-junitxml-format-files)\nfor more information on JUnit XML files.\nIn short, an JUnit XML file can be obtained file by executing a test suite with the\n`--junitxml=junit.xml` argument:\n\n    pytest --junitxml=junit.xml [tests...]\n\nIf a `junit.xml` is not provided to the `pytest-job-selection` plugin\nusing `--prev-junit-xml`, then its batching heuristic will assume that\nall test cases have the same running time, and consequently attempts\nto create batches with a balanced number of test cases.\n\nIf a test case is not present in the provided `junit.xml`, for\ninstance if a new test case has been added since `junit.xml` was\ngenerated, then a default run time of 1 minute will be\nassumed. Conversely, test cases present `junit.xml` which are not\nselected for execution, for instance test cases that has been removed\nsince `junit.xml` was generated, have no impact on balancing.\n\nConsequently, the `junit.xml` does not have to be up-to-date at each\nrun, but as a test suite grows, it will become gradually less\nwell-balanced. It is therefore good practice to update the file at\nregular intervals.\n\n### Dry run\n\nYou can simulate balancing run with the `--jobs-dry-run --job X/Y`\nflag. This will collect and group tests, and then output:\n\n - The list of jobs with:\n     - `weight`: its expected run time as per the previously\n       recorded timing information\n     - `#classes`: the number of test classes/modules in this job\n - The full list of test classes/modules sorted by job appartenance\n   and the weight of that test class/module (its weight is sum of the\n   running time of all test classes in that class as per the\n   previously recorded timing information)\n\n - Job statistics, including:\n     - the total number of jobs;\n     - the minimum, maximum and average job weight;\n     - the minimum, maximum and average number of classes/modules per job.\n\n - The test classes/modules of the currently selected jobs and their weight.\n\n - A list of *orphaned* test classes. These are test classes that\n   appear in the JUnit XML file supplied with `--prev-junit-xml` but\n   which does not correspond to any selected test. The presence of\n   orphans indicates that the JUnit XML file may be out-of-date, but\n   it will not impact balancing.\n\n## A Worked Example\n\nWe will use a simple dummy test (available\n[here](https://gitlab.com/arvidnl/pytest-job-selection/example/example_test.py):\n\n```python\nfrom time import sleep\n\nclass TestExampleA:\n    def test_a(self):\n        sleep(1)\n\nclass TestExampleB:\n    def test_b(self):\n        sleep(2)\n\nclass TestExampleC:\n    def test_c(self):\n        sleep(1)\n\nclass TestExampleD:\n    def test_d(self):\n        sleep(2)\n```\n\nThis module contains four test classes that do nothing but sleep for a\ngiven period of time. We can first try run these tests in two jobs\nwithout giving the job selection plugin any previous timings on which\nto base balancing:\n\n    $ pytest --job 1/2 example/example_test.py -v\n    example/example_test.py::TestExampleA::test_a PASSED [ 50%]\n    example/example_test.py::TestExampleC::test_c PASSED [100%]\n    $ pytest --job 2/2 example/example_test.py -v\n    example/example_test.py::TestExampleB::test_b PASSED [ 50%]\n    example/example_test.py::TestExampleD::test_d PASSED [100%]\n\nThis groups `TestExampleA` with `TestExampleC` and `TestExampleB` with\n`TestExampleD`. Each job contains an even number of test classes, but\nthe jobs are unbalanced in terms of run time, as the first job will\nrun in \\~2 seconds while the second will run in \\~4 seconds.\n\nNote that you can also preview the balancing using the pytest flag\n[--collect-only](https://docs.pytest.org/en/7.1.x/example/pythoncollection.html#finding-out-what-is-collected)\n(here in addition to the `--quiet` flag for terse output):\n\n    $ pytest --job 1/2 example/example_test.py --collect-only --quiet\n    (job selection: 1/2 with 4 timings from junit.xml)\n    example/example_test.py::TestExampleA::test_a\n    example/example_test.py::TestExampleB::test_b\n\n    4 tests collected in 0.01s\n    $ pytest --job 2/2 example/example_test.py --collect-only --quiet\n    (job selection: 2/2 with 4 timings from junit.xml)\n    example/example_test.py::TestExampleC::test_c\n    example/example_test.py::TestExampleD::test_d\n\n    4 tests collected in 0.01s\n\nTo balance the jobs based on the expected runtime of individual test\ncases, we record a `junit.xml` file:\n\n    $ pytest --junitxml=junit.xml example/example_test.py\n\nWe can inspect `junit.xml` and verify that it contains the expected\ntimings:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<testsuites>\n  <testsuite name=\"pytest\" errors=\"0\" failures=\"0\" skipped=\"0\" tests=\"4\" time=\"6.040\">\n    <testcase classname=\"example.example_test.TestExampleA\" name=\"test_a\" time=\"1.002\"/>\n    <testcase classname=\"example.example_test.TestExampleB\" name=\"test_b\" time=\"2.002\"/>\n    <testcase classname=\"example.example_test.TestExampleC\" name=\"test_c\" time=\"1.003\"/>\n    <testcase classname=\"example.example_test.TestExampleD\" name=\"test_d\" time=\"2.004\"/>\n  </testsuite>\n</testsuites>\n```\n\nAnd then feed the recording into the plugin:\n\n    $ pytest --prev-junit-xml junit.xml --job 1/2 example/example_test.py -v\n    example/example_test.py::TestExampleA::test_a PASSED [ 50%]\n    example/example_test.py::TestExampleD::test_d PASSED [100%]\n    $ pytest --prev-junit-xml junit.xml --job 2/2 example/example_test.py -v\n    example/example_test.py::TestExampleB::test_b PASSED [ 50%]\n    example/example_test.py::TestExampleC::test_c PASSED [100%]\n\nThis time, `TestExampleA` is grouped with `TestExampleD` and\n`TestExampleB` is grouped with `TestExampleC`, giving both jobs an\nexpected runtime of \\~3 seconds each.\n\nFinally, we can do a dry run with `--jobs-dry-run`` to obtain an\noverview of the obtained balancing:\n\n    $ pytest --prev-junit-xml junit.xml --job 2/2 --jobs-dry-run example/example_test.py\n    collecting ... (job selection: 2/2 with 4 timings from junit.xml)\n    dry run\n    Jobs: weight and contents\n    job       weight   #classes\n    1        0:00:03          2\n    2        0:00:03          2\n\n    Jobs: weight and full contents\n    job                                  class    weight\n    1        example.example_test.TestExampleD   0:00:02\n    1        example.example_test.TestExampleA   0:00:01\n    2        example.example_test.TestExampleB   0:00:02\n    2        example.example_test.TestExampleC   0:00:01\n\n    Jobs: statistics\n    jobs_total        weight: avg       min       max   #classes: avg   min   max\n    jobs_total=2          0:00:03   0:00:03   0:00:03             2.0     2     2\n    Can add 0:00:00.001000 without increasing wall-time.\n\n    Slowest classes (top 10):\n    weight                                   class\n    0:00:02      example.example_test.TestExampleD\n    0:00:02      example.example_test.TestExampleB\n    0:00:01      example.example_test.TestExampleC\n    0:00:01      example.example_test.TestExampleA\n\n    Would run test classes in job 2/2:\n    class                                   weight\n    example.example_test.TestExampleB      0:00:02\n    example.example_test.TestExampleC      0:00:01\n\n## Balancing Heuristic\n\nThe balancing heuristic is based on a greedy solution to the knapsack\nproblem. Each test that is missing a previously recorded run time\nprovided through `--prev-junit-xml` will be assigned a default runtime\nof 1 minute. If no previously recorded run times are provided, then\nthis applies to all test cases, and consequently the heuristic will\nbalance jobs based only on the number of assigned test cases (i.e.,\nattempting to create jobs whose number of test cases are close to\neach other).\n\n## GitLab CI integration\n\nThis plugin can conveniently be used in [GitLab\nCI](https://docs.gitlab.com/ee/ci/) to exploit [parallel\njobs](https://docs.gitlab.com/ee/ci/jobs/job_control.html#parallelize-large-jobs).\n\nFor instance, to parallelize a job like:\n\n```yaml\npytest:\n  script:\n    - pytest tests/\n```\n\nInstall the plugin in the CI, make sure that a `junit.xml` is available\nin the repository at e.g. `tests/junit.xml` and change the job to:\n\n```yaml\npytest:\n  parallel: 10\n  script:\n    - pytest --prev-junit-xml tests/junit.xml --job ${CI_NODE_INDEX}/${CI_NODE_TOTAL}\n      \"--junitxml=reports/report_${CI_NODE_INDEX}_${CI_NODE_TOTAL}.xml\"\n      tests/\n  artifacts:\n    paths:\n      - reports\n    when: always\n```\n\nThis will split the pytest job into 10 parallel jobs. The `--junitxml`\nargument has also been added to the pytest command so that new JUnit\nXML recordings are produced in the CI and then stored as artifacts\nusing the `artifacts` stanza.\n\nThis last point helps when rebalancing the suite, which you can now do\nby downloading the recordings from the CI, merging them and commiting\nthem to `tests/junit.xml`. In the next section, we describe the\nincluded script `glci_jobs_fetch_reports` that can be used to\npartially automate this process.\n\n### Retrieving JUnit XML files from GitLab CI\n\nUpdating the `junit.xml` file used for balancing becomes a hassle when\nthe number of jobs grow. This plugin installs a script\n`glci_jobs_fetch_reports` (located\n[here](https://gitlab.com/arvidnl/pytest-job-selection/scripts/jobs_fetch_reports.py) in this\nrepository) that can be used to this effect. For usage information,\ncall `glci_jobs_fetch_reports --help`.\n\n## Limitations\n\n### Test classes\n\nThis plugin balances tests at the granularity of modules or test\nclasses. All test cases of the same class will always execute in the\nsame job. Similarly, all test cases in a module that do not correspond\nto class methods will execute in the same job.\n\n### Missing timings\n\nIf timings are missing for test case, then the balancer will silently\nassume its running time is 1 minute.\n\n### Empty jobs\n\nIf there are more jobs than test classes or modules to balance, then at\nleast one job will be empty. In this case, `pytest` will\nexit with a non-zero error code.\n\n## Contributing\n\nContributions are very welcome. Tests can be run with\n[tox](https://tox.readthedocs.io/en/latest/), please ensure the coverage\nat least stays the same before you submit a pull request.\n\n## License\n\nDistributed under the terms of the\n[MIT](http://opensource.org/licenses/MIT) license,\n\"pytest-job-selection\" is free and open source software\n\n## Issues\n\nIf you encounter any problems, please [file an\nissue](https://gitlab.com/arvidnl/pytest-job-selection/-/issues) along with\na detailed description.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/arvidnl/pytest-job-selection",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Arvid Jakobsson",
    "maintainer_email": "arvid.jakobsson@nomadic-labs.com",
    "name": "pytest-job-selection",
    "package_url": "https://pypi.org/project/pytest-job-selection/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-job-selection/",
    "project_urls": {
      "Homepage": "https://gitlab.com/arvidnl/pytest-job-selection"
    },
    "release_url": "https://pypi.org/project/pytest-job-selection/0.1.2/",
    "requires_dist": [
      "pytest (>=3.5.0)",
      "typing-extensions (>=4.4.0)",
      "cram (>=0.6) ; extra == 'dev'"
    ],
    "requires_python": ">=3.5",
    "summary": "A pytest plugin for load balancing test suites",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16617183,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f909b3b6acdd411e4d56fc29646ab99de901d20672f0090076cd8be9887da25e",
          "md5": "d8e73156db28e6d040a6447f1517c11b",
          "sha256": "8424de3424a996cd7269e08c22316bfa23489ae095489b4c24ce9d917fd253f4"
        },
        "downloads": -1,
        "filename": "pytest_job_selection-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8e73156db28e6d040a6447f1517c11b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 10617,
        "upload_time": "2023-01-28T12:49:27",
        "upload_time_iso_8601": "2023-01-28T12:49:27.104746Z",
        "url": "https://files.pythonhosted.org/packages/f9/09/b3b6acdd411e4d56fc29646ab99de901d20672f0090076cd8be9887da25e/pytest_job_selection-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2c7b48af7dfc9148a1c48bc011af5b3065612f54a6ebd4c179d6b788e83fc6d",
          "md5": "e3b34fddf7e989ab9a37734a8a477daf",
          "sha256": "8226e1ee3dd1af357bc8481f78bfc112d6676cae14baf7303fe061d451bff20e"
        },
        "downloads": -1,
        "filename": "pytest-job-selection-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e3b34fddf7e989ab9a37734a8a477daf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 11424,
        "upload_time": "2023-01-28T12:49:28",
        "upload_time_iso_8601": "2023-01-28T12:49:28.966393Z",
        "url": "https://files.pythonhosted.org/packages/c2/c7/b48af7dfc9148a1c48bc011af5b3065612f54a6ebd4c179d6b788e83fc6d/pytest-job-selection-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b23eef5f480c152f67d69c07a898320721db699d59839a13b94c96e1f5fdf96",
          "md5": "0d192ae30d20abeee3d7a2f6f31efab4",
          "sha256": "440f270bd5d248ad8d4ca48814f2579bd82515c952c1e6963906798e79dcd7de"
        },
        "downloads": -1,
        "filename": "pytest_job_selection-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d192ae30d20abeee3d7a2f6f31efab4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11252,
        "upload_time": "2023-01-30T09:48:41",
        "upload_time_iso_8601": "2023-01-30T09:48:41.368696Z",
        "url": "https://files.pythonhosted.org/packages/4b/23/eef5f480c152f67d69c07a898320721db699d59839a13b94c96e1f5fdf96/pytest_job_selection-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fda7bfb84c37ab6fd6e5abee875e53bf51b1c6abacfe5cdc430ed7f68f7de346",
          "md5": "6e2765d9015c2c78d6caa65f8944ce61",
          "sha256": "35a7e45ebc8e34c577771c095274f9c8f9b538f93b4fda1e7cf452f189aa1d45"
        },
        "downloads": -1,
        "filename": "pytest-job-selection-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6e2765d9015c2c78d6caa65f8944ce61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12456,
        "upload_time": "2023-01-30T09:48:43",
        "upload_time_iso_8601": "2023-01-30T09:48:43.426961Z",
        "url": "https://files.pythonhosted.org/packages/fd/a7/bfb84c37ab6fd6e5abee875e53bf51b1c6abacfe5cdc430ed7f68f7de346/pytest-job-selection-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ecc693c538af5309dce05345197a4dd4cc5ddd43172cf7ec45656386925f70a",
          "md5": "ac0630fabf8173b35d62331f2e0f11e2",
          "sha256": "e2120507344da60d55f5da5fea6a2db503278894326c1b8da0f8614513f5da66"
        },
        "downloads": -1,
        "filename": "pytest_job_selection-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac0630fabf8173b35d62331f2e0f11e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11141,
        "upload_time": "2023-01-30T09:56:49",
        "upload_time_iso_8601": "2023-01-30T09:56:49.094492Z",
        "url": "https://files.pythonhosted.org/packages/5e/cc/693c538af5309dce05345197a4dd4cc5ddd43172cf7ec45656386925f70a/pytest_job_selection-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c543ab33e62dfca704e6e4bc39db661b52610cab0657bd29ebc5483eeb93809",
          "md5": "f8f71024dce121576d35b7c3ab2bebde",
          "sha256": "4abaf07bab2c5a7fb9d323dcf54b0d5764bfecb182aa994fa24055aec83b0562"
        },
        "downloads": -1,
        "filename": "pytest-job-selection-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f8f71024dce121576d35b7c3ab2bebde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12332,
        "upload_time": "2023-01-30T09:56:51",
        "upload_time_iso_8601": "2023-01-30T09:56:51.127319Z",
        "url": "https://files.pythonhosted.org/packages/7c/54/3ab33e62dfca704e6e4bc39db661b52610cab0657bd29ebc5483eeb93809/pytest-job-selection-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ecc693c538af5309dce05345197a4dd4cc5ddd43172cf7ec45656386925f70a",
        "md5": "ac0630fabf8173b35d62331f2e0f11e2",
        "sha256": "e2120507344da60d55f5da5fea6a2db503278894326c1b8da0f8614513f5da66"
      },
      "downloads": -1,
      "filename": "pytest_job_selection-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac0630fabf8173b35d62331f2e0f11e2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 11141,
      "upload_time": "2023-01-30T09:56:49",
      "upload_time_iso_8601": "2023-01-30T09:56:49.094492Z",
      "url": "https://files.pythonhosted.org/packages/5e/cc/693c538af5309dce05345197a4dd4cc5ddd43172cf7ec45656386925f70a/pytest_job_selection-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c543ab33e62dfca704e6e4bc39db661b52610cab0657bd29ebc5483eeb93809",
        "md5": "f8f71024dce121576d35b7c3ab2bebde",
        "sha256": "4abaf07bab2c5a7fb9d323dcf54b0d5764bfecb182aa994fa24055aec83b0562"
      },
      "downloads": -1,
      "filename": "pytest-job-selection-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f8f71024dce121576d35b7c3ab2bebde",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 12332,
      "upload_time": "2023-01-30T09:56:51",
      "upload_time_iso_8601": "2023-01-30T09:56:51.127319Z",
      "url": "https://files.pythonhosted.org/packages/7c/54/3ab33e62dfca704e6e4bc39db661b52610cab0657bd29ebc5483eeb93809/pytest-job-selection-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}