{
  "info": {
    "author": "Daniel Molina",
    "author_email": "daniel.molina@uca.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)"
    ],
    "description": "Introduction\n============\nThis is a Python wrapping using the C++ Implementation of the test suite for the Special Session on Large Scale Global Optimization at 2005 IEEE Congress on Evolutionary Computation.\n\n\nNote\n----\nIf you are to use any part of this code, please cite the following publications:\n\nP. N. Suganthan, N. Hansen, J. J. Liang, K. Deb, Y.-P. Chen, A. Auger and S. Tiwari, \"Problem Definitions and Evaluation Criteria for the CEC 2005 Special Session on Real-Parameter Optimization\", Technical Report, Nanyang Technological University, Singapore, May 2005 AND KanGAL Report #2005005, IIT Kanpur, India.\n\nhttp://www3.ntu.edu.sg/home/EPNSugan/index_files/CEC-05/CEC05.htm   \n\nRequirements\n------------\n- GNU Make\n- GNU G++\n- Python\n- Cython\n\nTesting Environment\n-------------------\n- Debian GNU/Linux jessie/sid\n- GNU Make 3.81\n- g++ (Debian 4.7.3-4) 4.7.3\n- Python 2.7 and Python 3.2\n- numpy 1.8.1\n- cython 0.20.1\n\nResults with Travis-CI\n~~~~~~~~~~~~~~~~~~~~~~\n.. image:: https://api.travis-ci.org/dmolina/cec2015real.svg?branch=master\n\nInstalation\n-----------\n\nVery easy, *pip install cec2005real* ;-). \n\nYou can also download from https://github.com/dmolina/cec2005real, and do *python setup.py install [--user]*.\n(the option *--user* is for installing the package locally, as a normal user (interesting when you want to \nrun the experiments in a cluster/server without administration permissions).\n\nTo compile the source code in C++\n----------------------------------\n\nThe source code in C++ is also available. If you want to compile only the C++\nversion type in 'make' in the root directory of source code. \n\nThere are two equivalents demo executables: demo and demo2. \n\n**REMEMBER: To run the C++ version the directory cdatafiles must be available in the working directory**. \nIn the python version, these files are included in the packages, so it is not needed. \n\nTests\n-----\n\nThe source code has tests to check the information about each function, and the results obtained\nwith the C version using the solution np.zeros(10) (a solution of zeros).\n\nQuickstart\n----------\n\nThe package is very simple to use. There is a class Function with two functions:\n\n- Give information for each function: their optimum, their dimensionality, the domain search, and the\n  expected threshold to achieve the optima.\n\n- Give a fitness function to evaluate solutions. It expect that these solutions are numpy arrays\n  (vectors) but it can also work with normal arrays.\n\nThese two functionalities are done with two methods in Benchmark class:\n\n- **get_num_functions()**\n\n  Return the number of functions in the benchmarks (15)\n\n- **get_info()**\n\n  Return an array with the following information, where /function_id/ is the identifier of the function, a int value between 1 and 15.\n\n    - lower, upper\n        *lower* and *upper* boundaries of the domain search. \n\n    - best\n        Optimum to achieve, it is always zero, thus it can be ignored.\n\n    - threshold\n        Threshold to obtain, it is always zero, thus it can also be ignored.\n\n    - dimension\n        Dimension for the function, it is always 1000.\n\n    It can be noticed that several data are the same for all functions. It is made for maintaining the \n    same interface to other cec20xx competitions.\n\n- **get_eval_function()**\n\n  It returns the fitness function to evaluate the solutions.\n\nExamples of use\n---------------\n\nObtain information about one function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n>>> from cec2005real.cec2005 import Function\n>>> fbench = Function(1, 10)\n>>> fbench.get_info()\n{'best': 0.0,\n 'dimension': 1000,\n 'lower': -100.0,\n 'threshold': 0,\n 'upper': 100.0}\n\nCreate random solution for the search\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n>>> from numpy.random import rand\n>>> info = fbench.get_info()\n>>> dim = info['dimension']\n>>> sol = info['lower']+rand(dim)*(info['upper']-info['lower'])\n\nEvaluate a solution\n~~~~~~~~~~~~~~~~~~~\n>>> fun_fitness = fbench.get_eval_function()\n>>> fun_fitness(sol)\n464006824710.75995\n\nContact\n-------\nPython package \n  Daniel Molina @ Computer Science Deparment, University of Cadiz\n  Please feel free to contact me at <daniel.molina@uca.es> for any enquiries or suggestions.\n\nLast Updated: \n\n- C++ version\n  2005\n\n- Python wrapping\n  <2015-10-30>",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dmolina/cec2005real",
    "keywords": null,
    "license": "GPL V3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "cec2005real",
    "package_url": "https://pypi.org/project/cec2005real/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/cec2005real/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/dmolina/cec2005real"
    },
    "release_url": "https://pypi.org/project/cec2005real/0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Package for benchmark for the Real     Optimization session on IEEE     Congress on Evolutionary Computation CEC'2005",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1795048,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "673022157a143d7c87f1577eb6bfe027e9593850c91ec70bc3f8146f2a46ddda",
          "md5": "916109d2d2f2cbb269d10f59feb90378",
          "sha256": "a82a6d0b8538ff9bc7e5cf73a56ece53717380c8fbcdae7452eb9538736f1055"
        },
        "downloads": -1,
        "filename": "cec2005real-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "916109d2d2f2cbb269d10f59feb90378",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3986434,
        "upload_time": "2015-10-31T12:47:06",
        "upload_time_iso_8601": "2015-10-31T12:47:06.944137Z",
        "url": "https://files.pythonhosted.org/packages/67/30/22157a143d7c87f1577eb6bfe027e9593850c91ec70bc3f8146f2a46ddda/cec2005real-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "673022157a143d7c87f1577eb6bfe027e9593850c91ec70bc3f8146f2a46ddda",
        "md5": "916109d2d2f2cbb269d10f59feb90378",
        "sha256": "a82a6d0b8538ff9bc7e5cf73a56ece53717380c8fbcdae7452eb9538736f1055"
      },
      "downloads": -1,
      "filename": "cec2005real-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "916109d2d2f2cbb269d10f59feb90378",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3986434,
      "upload_time": "2015-10-31T12:47:06",
      "upload_time_iso_8601": "2015-10-31T12:47:06.944137Z",
      "url": "https://files.pythonhosted.org/packages/67/30/22157a143d7c87f1577eb6bfe027e9593850c91ec70bc3f8146f2a46ddda/cec2005real-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}