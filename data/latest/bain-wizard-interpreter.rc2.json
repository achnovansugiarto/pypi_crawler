{
  "info": {
    "author": "Holt59",
    "author_email": "capelle.mikael@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# BAIN Wizard Interpreter\n\n![Python Versions](https://img.shields.io/pypi/pyversions/bain-wizard-interpreter)\n![PyPi](https://img.shields.io/pypi/v/bain-wizard-interpreter?style=flat-square)\n![Tests](https://img.shields.io/github/workflow/status/holt59/bain-wizard-interpreter/Tests?style=flat-square)\n![Linters](https://img.shields.io/github/workflow/status/holt59/bain-wizard-interpreter/Linters?style=flat-square)\n![MIT License](https://img.shields.io/github/license/holt59/bain-wizard-interpreter?style=flat-square)\n\nA BAIN Wizard Interpreter based on [`wizparse`](https://github.com/wrye-bash/wizparse) that can\nbe used in various settings to run BAIN Wizard installers.\n\n# Basic Usage\n\nThere are various way to use the interpreter.\nThe easiest way is to extends the `WizardScriptRunner` and add the missing\nfunctionalities that are mod-manager or game specific.\nYou can then use `WizardScriptRunner.run()` to execute a script, and everything will\nbe called when required.\n\n```python\nfrom pathlib import Path\nfrom typing import List\n\nfrom wizard.manager import SelectOption\nfrom wizard.scriptrunner import WizardScriptRunner\nfrom wizard.value import SubPackage, SubPackages\n\n\nclass MySubPackage(SubPackage):\n\n    \"\"\"\n    Implement your own SubPackage.\n    \"\"\"\n\n    _files: List[str]\n\n    def __init__(self, name: str, files: List[str]):\n        super().__init__(name)\n        self._files = files\n\n    @property\n    def files(self):\n        return iter(self._files)\n\n\nclass MyRunner(WizardScriptRunner):\n\n    \"\"\"\n    Extends the runner and implement the missing methods.\n    \"\"\"\n\n    # these are the methods you need to provide, see manager.ManagerModInterface\n    # and manager.ManagerUserInterface for the documentation of each method\n    #\n    # the WizardRunner class extends both interfaces and already implements many\n    # functions, but you can always override them\n\n    def selectOne(\n        self, description: str, options: List[SelectOption], default: SelectOption\n    ) -> SelectOption:\n        ...\n\n    def selectMany(\n        self,\n        description: str,\n        options: List[SelectOption],\n        default: List[SelectOption] = [],\n    ) -> List[SelectOption]:\n        ...\n\n    def compareGameVersion(self, version: str) -> int:\n        ...\n\n    def compareSEVersion(self, version: str) -> int:\n        ...\n\n    def compareGEVersion(self, version: str) -> int:\n        ...\n\n    def compareWBVersion(self, version: str) -> int:\n        ...\n\n    def dataFileExists(self, *filepaths: str) -> bool:\n        ...\n\n    def getPluginLoadOrder(self, filename: str, fallback: int = -1) -> int:\n        ...\n\n    def getPluginStatus(self, filename) -> int:\n        ...\n\n    def getFilename(self, path: str) -> str:\n        ...\n\n    def getFolder(self, path: str) -> str:\n        ...\n\n# create the sub-packages\nsubpackages = SubPackages([MySubPackage(...) for ...])\n\n# create the runner\nrunner = MyRunner(subpackages)\n\n# run a script - use a Path() object, otherwise the string will be interpreted\n# as a script\nstatus, result = runner.run(Path(\"wizard.txt\"))\n\nstatus  # status of the execution\nresult.subpackages  # list of selected sub-packages\nresult.plugins  # list of enabled plugins\nresult.notes  # list of notes\nresult.tweaks.disabled  # list of disabled INI settings\nresult.tweaks.modified  # list of new or modified INI settings\n```\n\n## Handling errors\n\nIf an error occurs during the script execution, the interpreter will call\nthe `WizardScriptRunner.error()` function with the Python exception. By default, this\nmethod re-raise the error, you can change it:\n\n```python\ndef error(self, exc: Exception):\n    # handle the error\n    ...\n```\n\nIf this method returns, `result.status` will be `WizardScriptRunnerStatus.ERROR`.\n\n## Extra features\n\nThe `WizardScriptRunner` exposes a few extra features through methods that you can use\nduring the execution, e.g. in `selectOne`, `selectMany`, `error`, `complete`, etc.\n\n```python\nrunner = WizardRunner(...)\n\n# abort the execution - Equivalent to a 'Cancel' keyword\nrunner.abort()\n\n# retrieve the current context\ncontext = runner.context()\n\n# rewind to the given context\nrunner.rewind(context)\n```\n\nThe `runner.abort` and `runner.rewind` method rely on exception to work, so these do\nnot return.\n\n# Dependencies\n\n## `wizparse`\n\nThe code under [`wizard/antlr4`](wizard/antlr4) is generated from [`wizard/antlr4/wizard.g4`](wizard/antlr4/wizard.g4)\nfrom the [`wizparse`](https://github.com/wrye-bash/wizparse) repository.\nTo generate the file, you need `antlr4`, and you simply have to run:\n\n```bash\n# IMPORTANT: use FORWARD SLASH (/) everywhere, otherwise it does not work\njava -jar antlr-4.10.1-complete.jar -visitor -Dlanguage=Python3 -o ./wizard/antlr4 ./vendor/wizparse/wizards/wizard.g4\n```\n\n## Run tests\n\nTo run the tests, you need the Python 3 ANTLR4 runtime and `pytest`:\n\n```bash\npip install antlr4-python3-runtime pytest\n```\n\nYou can then run the tests using `pytest`.\n\n# LICENSE\n\nUnless otherwise specified, the code in this repository is licensed under the MIT license.\nSee [LICENSE](LICENSE) for the full text.\n\nExceptions:\n\n- The code in [`wizard/antlr4`](wizard/antlr4) is generated from\n  the [`wizparse`](https://github.com/wrye-bash/wizparse) repository, so the `wizparse`\n  LICENSE applies to it.\n- The code in [`vendor/wizparse`](vendor/wizparse) is under the `wizparse` LICENSE.\n- The files in [`vendor/wizparse/tests`](vendor/wizparse/tests) have their own accompanying license. See the\n  [`wizparse`](https://github.com/wrye-bash/wizparse) repository for more details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Holt59/bain-wizard-interpreter",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bain-wizard-interpreter",
    "package_url": "https://pypi.org/project/bain-wizard-interpreter/",
    "platform": null,
    "project_url": "https://pypi.org/project/bain-wizard-interpreter/",
    "project_urls": {
      "Homepage": "https://github.com/Holt59/bain-wizard-interpreter"
    },
    "release_url": "https://pypi.org/project/bain-wizard-interpreter/1.0.3/",
    "requires_dist": [
      "chardet",
      "antlr4-python3-runtime (==4.10)",
      "black ; extra == 'dev'",
      "bump2version ; extra == 'dev'",
      "flake8-black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "types-chardet ; extra == 'dev'",
      "pytest ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "A BAIN Wizard Interpreter based on wizparse.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14009477,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fe843a629c22f495ceb7f804e3281d720c450ff00cde4eb97f7e982a9e7cd91",
          "md5": "d8926f1d00db15c64a08f0bd0651d09c",
          "sha256": "d66eac889ac1e408fdb2b16144086d38d3dc91ccf3906b6acae0b8c4ec7c2af5"
        },
        "downloads": -1,
        "filename": "bain_wizard_interpreter-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8926f1d00db15c64a08f0bd0651d09c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60935,
        "upload_time": "2022-06-02T06:34:44",
        "upload_time_iso_8601": "2022-06-02T06:34:44.592003Z",
        "url": "https://files.pythonhosted.org/packages/9f/e8/43a629c22f495ceb7f804e3281d720c450ff00cde4eb97f7e982a9e7cd91/bain_wizard_interpreter-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd7a4b421152b6acee4e02d340b223fe46f419f5e296f12a231549a462d1fdf2",
          "md5": "c0860e2486fe551cacf3c1d2574de39b",
          "sha256": "0d2e8c56c59992c1a770260d63a9c64d7797e444823274813c87232f074c2629"
        },
        "downloads": -1,
        "filename": "bain-wizard-interpreter-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c0860e2486fe551cacf3c1d2574de39b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51991,
        "upload_time": "2022-06-02T06:34:46",
        "upload_time_iso_8601": "2022-06-02T06:34:46.309596Z",
        "url": "https://files.pythonhosted.org/packages/fd/7a/4b421152b6acee4e02d340b223fe46f419f5e296f12a231549a462d1fdf2/bain-wizard-interpreter-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df0e0c7be8e910e9af39ea69cea54d136985ce3cb01f7e965ca41ac51792de0d",
          "md5": "e303178473772457f872e78f8f0ec573",
          "sha256": "5fc7c784233256dc10971cc59362721352a9d536a35f1ded14cfbbf49a35eb43"
        },
        "downloads": -1,
        "filename": "bain_wizard_interpreter-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e303178473772457f872e78f8f0ec573",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61062,
        "upload_time": "2022-06-02T07:45:05",
        "upload_time_iso_8601": "2022-06-02T07:45:05.784320Z",
        "url": "https://files.pythonhosted.org/packages/df/0e/0c7be8e910e9af39ea69cea54d136985ce3cb01f7e965ca41ac51792de0d/bain_wizard_interpreter-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e08713dfca5fe030b6cda838ec612dbaafee9cf5baa0440d5239bb9c7fa16bc9",
          "md5": "098163bb7ce877ea544e86b32d68b0a5",
          "sha256": "41c5cbc4f94233b02d8e101a04f28bdf280effe3e42f8cd7c245e2494db7d532"
        },
        "downloads": -1,
        "filename": "bain-wizard-interpreter-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "098163bb7ce877ea544e86b32d68b0a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52111,
        "upload_time": "2022-06-02T07:45:06",
        "upload_time_iso_8601": "2022-06-02T07:45:06.972223Z",
        "url": "https://files.pythonhosted.org/packages/e0/87/13dfca5fe030b6cda838ec612dbaafee9cf5baa0440d5239bb9c7fa16bc9/bain-wizard-interpreter-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df0e0c7be8e910e9af39ea69cea54d136985ce3cb01f7e965ca41ac51792de0d",
        "md5": "e303178473772457f872e78f8f0ec573",
        "sha256": "5fc7c784233256dc10971cc59362721352a9d536a35f1ded14cfbbf49a35eb43"
      },
      "downloads": -1,
      "filename": "bain_wizard_interpreter-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e303178473772457f872e78f8f0ec573",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 61062,
      "upload_time": "2022-06-02T07:45:05",
      "upload_time_iso_8601": "2022-06-02T07:45:05.784320Z",
      "url": "https://files.pythonhosted.org/packages/df/0e/0c7be8e910e9af39ea69cea54d136985ce3cb01f7e965ca41ac51792de0d/bain_wizard_interpreter-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e08713dfca5fe030b6cda838ec612dbaafee9cf5baa0440d5239bb9c7fa16bc9",
        "md5": "098163bb7ce877ea544e86b32d68b0a5",
        "sha256": "41c5cbc4f94233b02d8e101a04f28bdf280effe3e42f8cd7c245e2494db7d532"
      },
      "downloads": -1,
      "filename": "bain-wizard-interpreter-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "098163bb7ce877ea544e86b32d68b0a5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 52111,
      "upload_time": "2022-06-02T07:45:06",
      "upload_time_iso_8601": "2022-06-02T07:45:06.972223Z",
      "url": "https://files.pythonhosted.org/packages/e0/87/13dfca5fe030b6cda838ec612dbaafee9cf5baa0440d5239bb9c7fa16bc9/bain-wizard-interpreter-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}