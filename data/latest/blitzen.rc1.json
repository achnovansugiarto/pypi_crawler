{
  "info": {
    "author": "Blake Richey",
    "author_email": "blake.e.richey@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Blitzen  \n\nBlitzen is a python framework built on top of python's multiprocessing module intended to maximize processor utilization on individual computers and clusters.\n\n# Installation  \n\n```pip install blitzen```  \n\n# Usage:  \nBlitzen uses a `dispatcher` to provide concurrent processing features. \nBelow are the dispatchers available and their use case.\n\n## MulticoreDispatcher  \nMulticore dispatcher is similar to `multiprocessing.Pool` in that you initialize the dispatcher and can pass it tasks to complete concurrently. \n\nThe notable differences are:\n1. Workers you create with a dispatcher will remain open until you shutdown the dispatcher. \n2. You can queue multiple tasks, and the dispatcher will complete all of them using the specified number of processes.  \n3. Workers are Exception resistant, meaning if the worker subprocess crashes, the dispatcher will shut down the process and initialize a new one until the specified number of workers are actively monitor incoming tasks.\n\nExample:\n```Python\nimport time\nimport random\nfrom blitzen import MulticoreDispatcher\n\ndef f1():\n  delay = random.randint(3,5)\n  time.sleep(delay)\n  print('Finished after', delay, 'secs.')\n  return delay\n\ndef f2(delay):\n  time.sleep(delay)\n  raise ValueError('Throwing error')\n\n\nif __name__ == '__main__':\n  dispatcher = MulticoreDispatcher(workers=4)\n  task_id = dispatcher.run(f2, 4)\n  task_ids = [\n    dispatcher.run(f1)\n    for _ in range(5)\n  ]\n```  \nAll tasks are either started or queued immediately upon running the `dispatcher.run()` call.\n\n`dispatcher.run()` returns the dispatcher's task_id for the task you just passed it. This is used if you want to get specific task results from the dispatcher or tasks results in a specific order.\n\n### Getting results from the dispatcher:\n```Python\nprint('Fetching Results.')\nresults = dispatcher.get_results(task_ids)\nprint('Recevied results from dispatcher:', results)\n```\n\nThe results are always returned in the order of `task_ids`. \n\nEventually you will have to shutdown the dispatcher to close the underlying worker processes. \nYou can do this two ways.  \n1. `dispatcher.shutdown()` Terminates all worker subprocesses and deallocates memory resources.\n2. `dispatcher.join()` returns all results in task order as they were passed to the dispatcher, then calls `dispatcher.shutdown()`.\n\n```Python\nprint('Fetching Results.')\nresults = dispatcher.join()\nprint('Recevied results from dispatcher:', results)\n```\n\n**Critical Note: Once you request a result from the dispatcher, it is removed the dispatchers memory by default. To override this feature use dispatcher.get_results(clear=False)**  \n\nA full example is visible [here](https://github.com/BlakeERichey/blitzen/blob/main/examples/multicore/demo.py).\n\n## DistributedDispatcher  \nDistributedDispatcher lets you utilize a cluster for concurrent computing. It will handle packet synchronization between clients, servers, and drivers. It will also log all activity on the clients and servers.  \n\n### Define some common functions  \nThe clients and servers need access to the same functions, so it is likely a good idea to make a common file that will be used to import functions that arent natively in python.  \n\n```Python\n#common.py\nimport time\n\ndef time_consuming_function(delay):\n  time.sleep(delay)\n  return delay\n```\n\n### Initialize your server  \n```Python\nfrom blitzen.utils import get_local_ip\nfrom blitzen.distributed import DistributedDispatcher\nfrom common import time_consuming_function\n\nif __name__ == '__main__':\n  ip = get_local_ip()\n  dispatcher = DistributedDispatcher(server_ip=ip)\n  dispatcher.spawn_server(duration=30) #Run server for 30 seconds\n```\n\n### Initialize your clients  \n```Python\nfrom blitzen.utils import get_local_ip\nfrom blitzen.distributed import DistributedDispatcher\nfrom common import time_consuming_function\n\nif __name__ == '__main__':\n  ip = '192.168.1.2' #Server IP\n  dispatcher = DistributedDispatcher(server_ip=ip)\n  dispatcher.spawn_client(workers=6)\n```  \n\n### Run your driver code to be executed by the clients  \n```Python\nfrom blitzen.utils import get_local_ip\nfrom blitzen.distributed import DistributedDispatcher\nfrom common import time_consuming_function\n\nif __name__ == '__main__':\n  ip = '192.168.1.2' #Server IP\n  dispatcher = DistributedDispatcher(server_ip=ip)\n\n  #With DistributedDispatcher you can specify an amount\n  #of time each client has to finish their task\n  #with the `timeout` keyword\n  task_ids = [\n    dispatcher.run(time_consuming_function, i+5, timeout=7) \n    for i in range(5)\n  ]\n\n  print('Requesting results.')\n  results = dispatcher.join()\n  print(results)\n```\n\n### Logging  \nDistributedDispatchers provide some logging, using the python logging module, so you can monitor your cluster. By default the logger is configured to report all logging info of level `logging.INFO`. To some this can be excessive, so blitzen provides some functions to control the logger.  \n\nYou can get the logger using \n```logger = blitzen.logging.get_logger()```  \nThis logger is used by all blitzen submodules.  \n\nThe other blitzen.logging fuctions are:\n* `set_logfile(filename)` lets you set a file to log out to.\n* `set_loglevel(level)` lets you set the logging level using the same convention as python's `logging` module.\n* `disable()` disabled the logger.\n* `enable()` enables the logger.\n\n\n\nA full example visible [here](https://github.com/BlakeERichey/blitzen/tree/main/examples/distributed).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BlakeERichey/blitzen",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blitzen",
    "package_url": "https://pypi.org/project/blitzen/",
    "platform": "",
    "project_url": "https://pypi.org/project/blitzen/",
    "project_urls": {
      "Homepage": "https://github.com/BlakeERichey/blitzen"
    },
    "release_url": "https://pypi.org/project/blitzen/1.0.0/",
    "requires_dist": [
      "dill (>=0.3.3)"
    ],
    "requires_python": "",
    "summary": "Multiprocessing and Distributed computing dispatcher toolkit.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10520843,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24284367ea8d3d1ef8eb35f20e4c3d776e40568786ce7e2485dea34833206755",
          "md5": "720ee243e8c5fef79c9296a5000438ff",
          "sha256": "3124aa5cf0037135bd8ee27d5b6d69cbe3082e4eaf5ebd4a18272d3589882948"
        },
        "downloads": -1,
        "filename": "blitzen-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "720ee243e8c5fef79c9296a5000438ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17791,
        "upload_time": "2021-05-31T18:14:26",
        "upload_time_iso_8601": "2021-05-31T18:14:26.090169Z",
        "url": "https://files.pythonhosted.org/packages/24/28/4367ea8d3d1ef8eb35f20e4c3d776e40568786ce7e2485dea34833206755/blitzen-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98c0724dc53f25066eb2f27dd697d3c735c7ee64bb4e3b8e10268ebee1c75075",
          "md5": "98a722e856e3443f88740244a82702d5",
          "sha256": "2f1c274a7e149b7c68d69265ac59a498cf18bf75b704940eef4c06357c7cac0e"
        },
        "downloads": -1,
        "filename": "blitzen-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98a722e856e3443f88740244a82702d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13527,
        "upload_time": "2021-05-31T18:14:27",
        "upload_time_iso_8601": "2021-05-31T18:14:27.254781Z",
        "url": "https://files.pythonhosted.org/packages/98/c0/724dc53f25066eb2f27dd697d3c735c7ee64bb4e3b8e10268ebee1c75075/blitzen-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24284367ea8d3d1ef8eb35f20e4c3d776e40568786ce7e2485dea34833206755",
        "md5": "720ee243e8c5fef79c9296a5000438ff",
        "sha256": "3124aa5cf0037135bd8ee27d5b6d69cbe3082e4eaf5ebd4a18272d3589882948"
      },
      "downloads": -1,
      "filename": "blitzen-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "720ee243e8c5fef79c9296a5000438ff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17791,
      "upload_time": "2021-05-31T18:14:26",
      "upload_time_iso_8601": "2021-05-31T18:14:26.090169Z",
      "url": "https://files.pythonhosted.org/packages/24/28/4367ea8d3d1ef8eb35f20e4c3d776e40568786ce7e2485dea34833206755/blitzen-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98c0724dc53f25066eb2f27dd697d3c735c7ee64bb4e3b8e10268ebee1c75075",
        "md5": "98a722e856e3443f88740244a82702d5",
        "sha256": "2f1c274a7e149b7c68d69265ac59a498cf18bf75b704940eef4c06357c7cac0e"
      },
      "downloads": -1,
      "filename": "blitzen-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "98a722e856e3443f88740244a82702d5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13527,
      "upload_time": "2021-05-31T18:14:27",
      "upload_time_iso_8601": "2021-05-31T18:14:27.254781Z",
      "url": "https://files.pythonhosted.org/packages/98/c0/724dc53f25066eb2f27dd697d3c735c7ee64bb4e3b8e10268ebee1c75075/blitzen-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}