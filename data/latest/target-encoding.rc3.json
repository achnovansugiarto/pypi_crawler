{
  "info": {
    "author": "Tushin Kirill",
    "author_email": "tushin.ka@phystech.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "This package gives the opportunity to use a Target mean Encoding.\n\nTargetEncoder - The algorithm encodes all features that are submitted to the\ninput based on the target.\n\nParameters:\n\n    alpha (float): smoothing parameter for generalization.\n\n![fifth](img/5.png)\n\n    max_bins (int): maximum number of unique values in a feature.\n    split (tuple[Union[int, BaseCrossValidator]): tuple of int or\n        cross-validator classes.\n\n        If split len is 0, then algorithm\n        will encode features without cross-validation.\n        This situation features will over-fit on target.\n\n        If split len is 1, algorithm will encode features by using\n        cross-validation on folds.\n        In this situation you will not over-fit on tests,\n        but when you will validate, your score may over-fit.\n\n        If split len is 2, algorithm will separate data on first folds,\n        afterwords will encode features by using cross-validation\n        on second folds. This situation is the best way to\n        avoid over-fit, but algorithm will use small data for encode.\n\n---\n\nTargetEncoderRegressor - The algorithm encodes all feature and then takes the\naverage of encoded features as prediction.\n\n    alpha (float): smoothing parameter for generalization.\n    max_bins (int): maximum number of unique values in a feature.\n    used_features (int): Number of used features for prediction.\n        Value has to be between 1 and number of features.\n\n---\n\nTargetEncoderClassifier - The algorithm encodes all feature and then takes the\naverage of encoded features as probability.\n\n    alpha (float): smoothing parameter for generalization.\n    max_bins (int): maximum number of unique values in a feature.\n    used_features (int): Number of used features for prediction.\n        Value has to be between 1 and number of features.\n\n---\nCategorical features can be encoded in several ways. The first method is to\nencode just numbers from 0 to n-1, where n is the number of unique values. Such\nan encoding is called LabelEncoding.\n\n![first](img/1.png)\n\nHere we coded\n\"Moscow\": 0,\n\"New York\": 1,\n\"Rome\": 2\n\nAnother encoding method is called OneHotEncoding. Here we create instead of a\nsingle feature n features, where n is the number of unique values. Where for\neach object we put 0 everywhere except for the k-th element, where there is 1.\n\n![second](img/2.png)\n\nAnother method of encoding categorical features is used here - encoding by the\naverage value of the target.\n\n![third](img/3.png)\n\nAverage encoding is better than LabelEncoding, because a histogram of\npredictions using label & mean encoding show that mean encoding tend to group\nthe classes together whereas the grouping is random in case of LabelEncoding.\n\n![fourth](img/4.png)\n\n___\n\nConsider next example, here is a table with information about the categories in\nthe data. It can be seen that there are several categories, the number of which\nis very small, or did not occur in the dataset. Such data can interfere with the\nmodel, and this data can be retrained. As you can see Rome was presented only\nonce and its target was 0, then whenever we encode Rome we will replace it with\n0. That's the problem, our algorithm will be retrained. To avoid this, we will\nuse smoothing.\n\n![fifth](img/5.png)\n\n![sixth](img/6.png)\n\nAs you can see, we were able to solve the problem with small classes, their\nencodings have become more smoothed and shifted to the mean values.\n\n___\n\nNext we will be able to encode Train dataset and Test dataset.\n\nIn order to avoid over-fitting, we have to use the Folds split when encoding on\nthe Train, and if we use validation that would on validation also not to retrain\nwe inside each Fold have to do another split on the Folds.\n\nFor Test dataset, we use all the data from Train dataset for encoding.\n\n![seventh](img/7.png)\n\n___\n\nOnce we have coded average, there are 3 uses for these features.\n\n1. Train the model on our new data.\n2. Train the model on our new and old data.\n3. Take the average of the new data and use it as a prediction.\n\nThe \"experiments\" folder contains the results of comparing these methods.\n___\n\nExample of usage\n\n```python\n\"\"\"Example of usage\"\"\"\n\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\n\nfrom target_encoding import TargetEncoderClassifier\nfrom target_encoding import TargetEncoder\n\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42,\n)\n\nenc = TargetEncoder()\nnew_X_train = enc.transform_train(X_train, y_train)\nnew_X_test = enc.transform_test(X_test)\n\nrf = RandomForestClassifier(n_estimators=100, random_state=42)\nrf.fit(X_train, y_train)\npred = rf.predict_proba(X_test)[:, 1]\nprint(f'without target encoding {roc_auc_score(y_test, pred):.4f}')\n\nrf.fit(new_X_train, y_train)\npred = rf.predict_proba(new_X_test)[:, 1]\nprint(f'with target encoding {roc_auc_score(y_test, pred):.4f}')\n\nenc = TargetEncoderClassifier()\nenc.fit(X_train, y_train)\npred = enc.predict_proba(X_test)[:, 1]\nprint(f'target encoding classifier {roc_auc_score(y_test, pred):.4f}')\n\n```\n\n```\nwithout target encoding 0.9953\nwith target encoding 0.9993\ntarget encoding classifier 0.9974\n\n```\n\n___\nYou can install it by using pip\n\n```\npip install target_encoding\n```\n\n___\n\n```\nRequirements:\n    numpy>=1.16.2\n    scikit-learn>=0.20.3\n    pandas>=1.1.0\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/KirillTushin/target_encoding",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KirillTushin/target_encoding",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "target-encoding",
    "package_url": "https://pypi.org/project/target-encoding/",
    "platform": "",
    "project_url": "https://pypi.org/project/target-encoding/",
    "project_urls": {
      "Download": "https://github.com/KirillTushin/target_encoding",
      "Homepage": "https://github.com/KirillTushin/target_encoding"
    },
    "release_url": "https://pypi.org/project/target-encoding/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Module for target encoding",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11088498,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b38713f96e75b035569d994e040c9d7e7ae1139c17be460ba81cefec8f13eb39",
          "md5": "97fadb3200eb6e011f2d33952745240d",
          "sha256": "cf99cea2b5ef54d0569d3a209b1f57147d4d10bc12b1b968781bf0d0e6527004"
        },
        "downloads": -1,
        "filename": "target_encoding-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "97fadb3200eb6e011f2d33952745240d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5839,
        "upload_time": "2019-04-01T14:21:35",
        "upload_time_iso_8601": "2019-04-01T14:21:35.813971Z",
        "url": "https://files.pythonhosted.org/packages/b3/87/13f96e75b035569d994e040c9d7e7ae1139c17be460ba81cefec8f13eb39/target_encoding-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09a26fbd86b463b1aff46316efb9ac3d86ce7efdc39d65608d808fada5dae07f",
          "md5": "3e5e11f40862cf4eed3f0934ac6f7c1f",
          "sha256": "53fef6f46a253e04fa1c0ff4ef26360c56e331c135145eba92955ba2aad20b0c"
        },
        "downloads": -1,
        "filename": "target_encoding-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3e5e11f40862cf4eed3f0934ac6f7c1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5851,
        "upload_time": "2019-04-01T14:49:13",
        "upload_time_iso_8601": "2019-04-01T14:49:13.634828Z",
        "url": "https://files.pythonhosted.org/packages/09/a2/6fbd86b463b1aff46316efb9ac3d86ce7efdc39d65608d808fada5dae07f/target_encoding-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ab5aed5dc41aad744e995795ad19ef5e3ffa437894901f9024975b06f466a04",
          "md5": "d9f30aab82eea7fdb66de1f807864047",
          "sha256": "2e94a1e8246fafafd7a5d7a8287fd883400e9635398bd078f83674ff234703ef"
        },
        "downloads": -1,
        "filename": "target_encoding-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d9f30aab82eea7fdb66de1f807864047",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6673,
        "upload_time": "2021-08-04T09:41:00",
        "upload_time_iso_8601": "2021-08-04T09:41:00.171639Z",
        "url": "https://files.pythonhosted.org/packages/6a/b5/aed5dc41aad744e995795ad19ef5e3ffa437894901f9024975b06f466a04/target_encoding-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ab5aed5dc41aad744e995795ad19ef5e3ffa437894901f9024975b06f466a04",
        "md5": "d9f30aab82eea7fdb66de1f807864047",
        "sha256": "2e94a1e8246fafafd7a5d7a8287fd883400e9635398bd078f83674ff234703ef"
      },
      "downloads": -1,
      "filename": "target_encoding-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d9f30aab82eea7fdb66de1f807864047",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6673,
      "upload_time": "2021-08-04T09:41:00",
      "upload_time_iso_8601": "2021-08-04T09:41:00.171639Z",
      "url": "https://files.pythonhosted.org/packages/6a/b5/aed5dc41aad744e995795ad19ef5e3ffa437894901f9024975b06f466a04/target_encoding-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}