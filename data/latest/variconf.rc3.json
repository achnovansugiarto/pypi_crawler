{
  "info": {
    "author": "",
    "author_email": "Felix Kloss <felix.widmaier@tue.mpg.de>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "VariConf - Load Configurations from Various Types of Files\n==========================================================\n\nVariConf provides a wrapper around [OmegaConf](https://omegaconf.readthedocs.io) for\nloading configuration from various types of files.\n\nSupported file types are JSON, YAML and TOML.  Support for more file types can easily be\nadded by registering a custom loader function.\n\nThanks to the power of OmegaConf, you can provide a configuration schema which the\ndefines expected parameters, default values and optionally expected types.\n\n\nDesign Goals\n------------\n\nThis package is developed with the following goals in mind:\n\n- Load configuration from files with expected parameters and default values provided in\n  an easy way.\n- Provide config as a simple Namespace-like object (with option to convert to\n  dictionary).\n- Do not commit to a specific file format.  All formats that can easily be loaded into a\n  dictionary should be supported (json, toml, yaml, ...).\n- Optionally check types.\n- Optionally check for unknown parameters in the file (to raise an error).\n- Keep it simple.  Prefer fewer features over too complicated API.\n\n\nInstallation\n------------\n\nBasic (does not include dependencies for YAML and TOML):\n```\npip install variconf\n```\n\nWith optional dependencies:\n```bash\n# with TOML support\npip install \"variconf[toml]\"\n\n# with YAML support\npip install \"variconf[yaml]\"\n\n# to include everything:\npip install \"variconf[all]\"\n```\n\n\nUsage\n-----\n\nThe package provides a class `WConf` for loading and merging configurations from\ndifferent sources. When creating an instance of it, a configuration \"schema\" needs to be\ngiven, i.e. a structure (dictionary or dataclass) that defines what sections and\nparameters the configuration has and that provides default values.\n\nA number of \"load\"-methods is provided to load configurations from different sources\n(e.g. JSON files, YAML files, dictionaries from other sources, ...).  When called,\nthe corresponding parameters are merged into the existing configuration, overwriting\nexisting values.  This means that an input does not need to provide all parameters,\nin this case the default values are kept.  Further, if calling multiple\n\"load\"-methods after another, the later calls will overwrite values set by previous\nones.\n\nAll \"load\"-methods return ``self``, so they can be chained:\n\n```python\nimport variconf\n\nschema = {\"sec1\": {\"foo\": 42, \"bar\": 13}, \"sec2\": {\"bla\": \"\"}}\nwconf = variconf.WConf(schema)\nconfig = (\n    wconf.load_file(\"~/global_config.toml\")\n    .load_file(\"./local_config.yml\", fail_if_not_found=False)\n    .load_dotlist(sys.argv[1:])  # easily allow overwriting parameters via\n                                 # command-line arguments\n    .get()  # return the final config object\n)\n```\n\n\n### Allow Unknown Parameters\n\nBy default an error is raised if the loaded configuration contains parameters that are\nnot declared in the schema.  If you want to allow these unknown parameters, initialise\n`WConf` with `strict=False`:\n\n```python\nwconf = variconf.WConf(schema, strict=False)\n```\n\nThis will result in the unknown parameters being merged into the config object.\n\nWith this you can even omit the schema altogether by simply passing an empty dictionary:\n```python\nwconf = variconf.WConf({}, strict=False)\n```\n\n\n### Search File\n\nAssuming an application where the config file can be located in one of several places\n(e.g. `~`, `~/.config` or `/etc/myapp`).  This situation is supported by the optional\n`search_paths` argument of `load_file()`:\n\n```python\nwconf.load_file(\n    \"config.yml\",\n    search_paths=[os.expanduser(\"~\"), os.expanduser(\"~/.config\"), \"/etc/myapp\"],\n    fail_if_not_found=False,\n)\n```\nThis will search for a file \"config.yml\" in the listed directories (in the given order)\nand use the first match.\nBy setting `fail_if_not_found=False`, we specify that it's okay if the file is not found\nin any of these directories.  In this case, we simply keep the default values of all\nparameters.\n\n\n### Using XDG Base Directory Specification\n\nIf your application follows the [XDG Base Directory\nSpecification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)\nyou can use ``load_xdg_config()`` (currently not supported on Windows!):\n\n```python\nwconf.load_xdg_config(\"myapp/config.toml\")\n```\nWill search for the file in the directories specified in the environment variables\n`XDG_CONFIG_HOME` and `XDG_CONFIG_DIRS` (defaulting to `~/.config`).\n\nLike for `load_file()` there is an argument `fail_if_not_found` but here it defaults to\nFalse as providing a config in `XDG_CONFIG_HOME` is typically optional.\n\n\n### Supported File Types\n\nSupported file types are JSON, YAML and TOML.  Support for custom file types can be\nadded by providing a loader function.  Example for adding XML support:\n\n```python\nimport xml.etree.ElementTree as ET\n\ndef xml_loader(fp: typing.IO) -> dict:\n    xml_str = fp.read()\n    xml_tree = ET.fromstring(xml_str)\n    # do some magic to convert XML tree to dictionary\n    xml_dict = tree_to_dict(xml_tree)\n    return xml_dict\n\nwconf.add_file_loader(\"xml\", [\".xml\"], xml_loader)\n\n# now, XML files can be read by WConf.load and WConf.load_file\nwconf.load_file(\"config.xml\")\n```\n\n\n### Type Checking\n\nOmegaConf supports type-checking by providing a schema as dataclass with type hints:\n\n```python\n@dataclasses.dataclass\nclass ConfigSchema:\n    foo: int = 42\n    bar: str = 13\n\nwconf = variconf.WConf(ConfigSchema)\n\n# raises ValidationError: Value 'hi' of type 'str' could not be converted to Integer\nwconf.load_dict({\"foo\": \"hi\"})\n```\n\n### Required Values\n\nRequired parameters without default value are supported through OmegaConf's concept of\nmissing values.\n\nWhen using a dictionary schema:\n\n```python\nschema = {\n    \"optional_param\": \"default value\",\n    \"required_param\": \"???\",\n}\n```\n\nWhen using a dataclass schema:\n\n```python\n@dataclasses.dataclass\nclass Schema:\n    required_param1: float  # not providing a default makes it required\n    optional_param: str = \"default value\"\n    required_param2: int = omegaconf.MISSING  # alternative for required parameters\n```\n\nIf there is a required parameter for which no value has been provided by any of the\n`load*`-methods, calling `get()` will raise an error.\n\nYou can avoid that error by using `get(allow_missing=True)`.  However, the error is\nstill raised when trying to access the actual value of the missing parameter.\n\n\n### Variable Interpolation\n\nOmegaConf has a feature called [variable interpolation](https://omegaconf.readthedocs.io/en/latest/usage.html#variable-interpolation)\nthat allows to refer to other fields within the config file:\n\n```yaml\nserver:\n  host: localhost\n  port: 80\n\nclient:\n  url: http://${server.host}:${server.port}/\n  server_port: ${server.port}\n  # relative interpolation\n  description: Client of ${.url}\n```\nSee the documentation of OmegaConf for more information.\n\n\nCopyright and License\n---------------------\n\nVariConf is written and maintained by Felix Kloss at the Max Planck Institute for\nIntelligent Systems, TÃ¼bingen.\n\nCopyright (c) 2022, Max Planck Gesellschaft. All rights reserved.\n\nLicense: [BSD 3-clause](LICENSE)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "config,configuration",
    "license": "",
    "maintainer": "",
    "maintainer_email": "Felix Kloss <felix.widmaier@tue.mpg.de>",
    "name": "variconf",
    "package_url": "https://pypi.org/project/variconf/",
    "platform": null,
    "project_url": "https://pypi.org/project/variconf/",
    "project_urls": {
      "Bug Tracker": "https://github.com/MPI-IS/variconf/issues",
      "Source": "https://github.com/MPI-IS/variconf"
    },
    "release_url": "https://pypi.org/project/variconf/1.0.1/",
    "requires_dist": [
      "omegaconf",
      "variconf[toml,yaml] ; extra == 'all'",
      "variconf[test] ; extra == 'mypy'",
      "mypy ; extra == 'mypy'",
      "types-PyYAML ; extra == 'mypy'",
      "types-setuptools ; extra == 'mypy'",
      "variconf[all] ; extra == 'test'",
      "pytest ; extra == 'test'",
      "tomli ; extra == 'toml'",
      "pyyaml ; extra == 'yaml'"
    ],
    "requires_python": ">=3.7",
    "summary": "Wrapper around OmegaConf for loading configuration from various types of files.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16789225,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c33d4c5541e464ee4e9fb01455266016738b9c3a2b3224dd95881b0a609da25",
          "md5": "2e06460d00a618e0e1de9be735b1c375",
          "sha256": "05ac01100f0a54d0a6e6372b71cd98f77ee6a309dd34cb3ee2194f4692d64623"
        },
        "downloads": -1,
        "filename": "variconf-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e06460d00a618e0e1de9be735b1c375",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9581,
        "upload_time": "2022-11-02T15:54:14",
        "upload_time_iso_8601": "2022-11-02T15:54:14.599704Z",
        "url": "https://files.pythonhosted.org/packages/6c/33/d4c5541e464ee4e9fb01455266016738b9c3a2b3224dd95881b0a609da25/variconf-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1766f282d33e6bf8b38bb0cf0259fd8ed0a5e3fa2910da8839cb258edccd79cd",
          "md5": "a62536e089da2db9cabefcbe7b580eb4",
          "sha256": "28494b7c3bd53f262c5b3e03f2927ace1dac6be50c0b3b974b81e2874c9bf467"
        },
        "downloads": -1,
        "filename": "variconf-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a62536e089da2db9cabefcbe7b580eb4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14115,
        "upload_time": "2022-11-02T15:54:16",
        "upload_time_iso_8601": "2022-11-02T15:54:16.857569Z",
        "url": "https://files.pythonhosted.org/packages/17/66/f282d33e6bf8b38bb0cf0259fd8ed0a5e3fa2910da8839cb258edccd79cd/variconf-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b778d3f623f8a86875ee622d229d5b7c8f7441d015118bbf5c8e556e9d09c87",
          "md5": "ead5867c699d19b401bf6da35517764b",
          "sha256": "1330df14b4629e6a7bb29cf4b79a9da2b436cf9d36797568e25420a57de8c115"
        },
        "downloads": -1,
        "filename": "variconf-1.0.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ead5867c699d19b401bf6da35517764b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7928,
        "upload_time": "2022-10-20T12:22:08",
        "upload_time_iso_8601": "2022-10-20T12:22:08.364030Z",
        "url": "https://files.pythonhosted.org/packages/5b/77/8d3f623f8a86875ee622d229d5b7c8f7441d015118bbf5c8e556e9d09c87/variconf-1.0.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45424ef4b8bf5e8de533f854bded3e0f45289d3fbb31408025866e9f6b8d5a94",
          "md5": "ac177c5ce708c7a19b4c765c01c25d5d",
          "sha256": "b7d5ccb5df5f25c666ca851c110803ac3035da6d144eba1ac9b24bbdb9fabc8e"
        },
        "downloads": -1,
        "filename": "variconf-1.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac177c5ce708c7a19b4c765c01c25d5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9800,
        "upload_time": "2022-10-20T12:22:11",
        "upload_time_iso_8601": "2022-10-20T12:22:11.166818Z",
        "url": "https://files.pythonhosted.org/packages/45/42/4ef4b8bf5e8de533f854bded3e0f45289d3fbb31408025866e9f6b8d5a94/variconf-1.0.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3015716521b719ae5b72aa9f94de3602c0cab2744f31477faafdf2d5195728b",
          "md5": "9f7369b5b2d89573ee8a2520a2b60d94",
          "sha256": "4ae7b484b256e2eccf72d8c8b526e61d2e714779ab3de1bec740ea8e1a503fcd"
        },
        "downloads": -1,
        "filename": "variconf-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f7369b5b2d89573ee8a2520a2b60d94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9956,
        "upload_time": "2023-02-10T13:02:58",
        "upload_time_iso_8601": "2023-02-10T13:02:58.922539Z",
        "url": "https://files.pythonhosted.org/packages/e3/01/5716521b719ae5b72aa9f94de3602c0cab2744f31477faafdf2d5195728b/variconf-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "154ffcdeaa5e6d24c0256d5c4a941f521c36999c359d75ebe14e828e01e59c3b",
          "md5": "de7e44068ddf8cc39a3ef2b66b342b5b",
          "sha256": "4848da3f5335dd870b51221b68db42eb260216c1433d83a2e82ceb1401f69c45"
        },
        "downloads": -1,
        "filename": "variconf-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "de7e44068ddf8cc39a3ef2b66b342b5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14555,
        "upload_time": "2023-02-10T13:03:00",
        "upload_time_iso_8601": "2023-02-10T13:03:00.361404Z",
        "url": "https://files.pythonhosted.org/packages/15/4f/fcdeaa5e6d24c0256d5c4a941f521c36999c359d75ebe14e828e01e59c3b/variconf-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3015716521b719ae5b72aa9f94de3602c0cab2744f31477faafdf2d5195728b",
        "md5": "9f7369b5b2d89573ee8a2520a2b60d94",
        "sha256": "4ae7b484b256e2eccf72d8c8b526e61d2e714779ab3de1bec740ea8e1a503fcd"
      },
      "downloads": -1,
      "filename": "variconf-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f7369b5b2d89573ee8a2520a2b60d94",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9956,
      "upload_time": "2023-02-10T13:02:58",
      "upload_time_iso_8601": "2023-02-10T13:02:58.922539Z",
      "url": "https://files.pythonhosted.org/packages/e3/01/5716521b719ae5b72aa9f94de3602c0cab2744f31477faafdf2d5195728b/variconf-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "154ffcdeaa5e6d24c0256d5c4a941f521c36999c359d75ebe14e828e01e59c3b",
        "md5": "de7e44068ddf8cc39a3ef2b66b342b5b",
        "sha256": "4848da3f5335dd870b51221b68db42eb260216c1433d83a2e82ceb1401f69c45"
      },
      "downloads": -1,
      "filename": "variconf-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "de7e44068ddf8cc39a3ef2b66b342b5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14555,
      "upload_time": "2023-02-10T13:03:00",
      "upload_time_iso_8601": "2023-02-10T13:03:00.361404Z",
      "url": "https://files.pythonhosted.org/packages/15/4f/fcdeaa5e6d24c0256d5c4a941f521c36999c359d75ebe14e828e01e59c3b/variconf-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}