{
  "info": {
    "author": "ZhengYu, Xu",
    "author_email": "zen-xu@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: BDD",
      "Topic :: Utilities"
    ],
    "description": "# spock\n\n<div align=\"center\">\n  <a href=\"https://github.com/zen-xu/spock/actions\">\n    <img src=\"https://github.com/zen-xu/spock/actions/workflows/main.yaml/badge.svg\" alt=\"CI\"/>\n  </a>\n  <a href=\"https://codecov.io/gh/zen-xu/spock\">\n    <img src=\"https://codecov.io/gh/zen-xu/spock/branch/main/graph/badge.svg?token=WPG2V9w16r\"/>\n  </a>\n  <a href=\"https://pypi.org/project/pyspock\">\n    <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/pyspock\">\n  </a>\n  <img src=\"https://img.shields.io/pypi/pyversions/pyspock\">\n  <a href=\"https://github.com/zen-xu/spock/blob/main/LICENSE\">\n    <img src=\"https://img.shields.io/badge/MIT%202.0-blue.svg\" alt=\"License\">\n  </a>\n</div>\n<div align=\"center\">\n  <a href=\"https://results.pre-commit.ci/latest/github/zen-xu/spock/main\">\n    <img src=\"https://results.pre-commit.ci/badge/github/zen-xu/spock/propertiesmain.svg\">\n  </a>\n  <a href=\"https://github.com/psf/black\">\n    <img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\">\n  </a>\n  <a href=\"https://deepsource.io/gh/zen-xu/spock/?ref=repository-badge}\" target=\"_blank\">\n    <img alt=\"DeepSource\" title=\"DeepSource\" src=\"https://deepsource.io/gh/zen-xu/spock.svg/?label=active+issues&show_trend=true&token=mgZ7FgiJDAxSt9Ilav9vLFEo\"/>\n  </a>\n</div>\n\n`pyspock` is a BDD-style developer testing and specification framework for Python, and this is an implementation of the [`spock`](https://github.com/spockframework/spock).\n\nAn example of simple test:\n\n```python\nimport pytest\n\n\n@pytest.mark.spock(\"maximum of {a} and {b} is {c}\")\ndef test_maximum():\n    def expect(a, b, c):\n        assert max(a, b) == c\n\n    def where(_, a, b, c):\n        _ | a | b | c\n        _ | 3 | 7 | 7\n        _ | 5 | 4 | 5\n        _ | 9 | 9 | 9\n```\n\nIf you are using vscode, you can find there will be 3 test cases.\n\n![vscode-test-discovery](doc/en/img/vscode-testing-discovery.png)\n\n## Installation\n\n```bash\npip install pyspock\n```\n\nNote the minimum version of pytest is 6.2.4.\n\n## Mark\n\nIt is easy to define spock test cases, just use `pytest.mark.spock` to decorate your test function.\n\n```python\n@pytest.mark.spock\ndef test_bigger():\n    def expect():\n        assert 2 > 1\n```\n\nspock mark also accepts one parameter, which is used to render identity for each iteration arguments.\n\n```python\n@pytest.mark.spock(\"{a} > {b}\")\ndef test_bigger():\n    def expect(a, b):\n        assert a > b\n\n    def where(_, a, b):\n        _ | a | b\n        _ | 7 | 3\n        _ | 5 | 2\n```\n\n## Blocks\n\nThere are six kinds of blocks: `given`, `when`, `then`, `expect`, `cleanup` and `where` blocks. Each block is a function defined by its name.\n\nA test function must have at least one explicit block. Blocks divide a test function into distinct sections, and cannot be nested.\n\n![](doc/img/../en/img/Blocks2Phases.png)\n\nThe above picture shows how blocks map to the conceptual phases of a feature function. The where block has a special role, which will be revealed shortly. But first, let’s have a closer look at the other blocks.\n\n\n### 1. Given block\n\n```python\n@pytest.mark.spock\ndef test_demo():\n    def given(me):\n        me.stack = []\n        me.elem = 1\n```\n\nThe `given` block is where you do any setup work for the feature that you are describing. It may not be preceded by other blocks. A `given` block doesn’t have any special semantic, and it is optional and may be omitted.\n\nThe `given` accepts all pytest fixtures, besides it has a special fixture named `me`, which can take any setup values. Those setup values can be as fixtures in other blocks except the `where` block.\n\n### 2. When and Then blocks\n\n```python\n@pytest.mark.spock\ndef test_append_element():\n    def given(me):\n        me.stack = []\n        me.elem = 1\n\n    def when(stack, elem):\n        # stimulus\n        stack.append(elem)\n\n    def then(stack, elem):\n        # response\n        assert len(stack) == 1\n        assert stack.pop() == elem\n```\n\nThe `when` and `then` blocks always occur together. They describe a stimulus and the expected response. Whereas when blocks may contain arbitrary code, then blocks are restricted to conditions, exception conditions, interactions.\n\nThe `then` has a special fixture named `excinfo`, which represents whether the `when` block raises exception. If the `when` block not raises exception, then `excinfo` will be None. The `excinfo` type is [ExceptionInfo](https://docs.pytest.org/en/stable/reference.html#exceptioninfo).\n\n\n```python\n@pytest.mark.spock\ndef test_zero_division():\n    def when():\n        1 / 0\n\n    def then(excinfo):\n        assert excinfo.type is ZeroDivisionError\n```\n\n### 3. Expect block\n\nAn `expect` block is more limited than a `then` block in that it may only contain conditions and variable definitions. It is useful in situations where it is more natural to describe stimulus and expected response in a single expression. For example, compare the following two attempts to describe the `max` function:\n\n```python\n@pytest.mark.spock\ndef test_maximum():\n    def given(me):\n        me.x = max(1, 2)\n\n    def then(x):\n        assert x == 2\n```\n\nequals to:\n\n```python\n@pytest.mark.spock\ndef test_maximum():\n    def expect():\n        assert max(1, 2) == 2\n```\n\n### 4. Cleanup block\n\n```python\n@pytest.mark.spock\ndef test_file():\n    def given(me):\n        me.file = open(\"test.txt\", \"r+\")\n\n    def when(file):\n        file.write(\"hello\")\n\n    def then(file):\n        file.seek(0)\n        assert file.read() == \"hello\"\n\n    def cleanup(file):\n        file.close()\n```\n\n `cleanup` block is used to free any resources used by a test case, and will run even if (a previous part of) the test case has produced an exception. As a consequence, a `cleanup` block must be coded defensively.\n\n### 5. Where block\n\nA `where` block always comes last in a test function. It is used to write data-driven feature functions. To give you an idea how this is done, have a look at the following example:\n\n```python\n@pytest.mark.spock(\"max({a}, {b}) == {c}\")\ndef test_maximum_of_two_numbers():\n    def expect(a, b, c):\n        assert max(a, b) == c\n\n    def where(a, b, c):\n        a << [5, 3]\n        b << [1, 9]\n        c << [5, 9]\n```\n\nThis `where` block effectively creates two \"versions\" of the feature functions: One where a is 5, b is 1, and c is 5, and another one where a is 3, b is 9, and c is 9.\n\nAlthough it is declared last, the where block is evaluated before the feature function containing it runs.\n\n#### Data table\n\n`where` block support another syntax to specify the data.\n\n```python\n@pytest.mark.spock(\"max({a}, {b}) == {c}\")\ndef test_maximum_of_two_numbers():\n    def expect(a, b, c):\n        assert max(a, b) == c\n\n    def where(_, a, b, c):\n        _ | a | b | c\n        _ | 5 | 1 | 5\n        _ | 3 | 9 | 9\n```\n\nThe first line of the table, called the table header, declares the data variables. The subsequent lines, called table rows, hold the corresponding values. For each row, the feature method will get executed once; we call this an iteration of the function. If an iteration fails, the remaining iterations will nevertheless be executed. All failures will be reported.\n\nYou can also split the data table into multiple parts.\n\n```python\n@pytest.mark.spock(\"max({a}, {b}) == {c}\")\ndef test_maximum_of_two_numbers():\n    def expect(a, b, c):\n        assert max(a, b) == c\n\n    def where(_, a, b, c):\n        _ | a | b\n        _ | 5 | 1\n        _ | 3 | 9\n\n        _ | c\n        _ | 5\n        _ | 9\n```\n\n#### Accessing other data variables\n\n```python\ndef where(_, a, b):\n    _ | a | b\n    _ | 5 | a + 1\n    _ | 3 | a + 2\n```\n\nvariable supports all operators like `+`, `-`, `*`, `/`, `%`, `**`, `//`, `==`, `!=`, `<`, `<=`, `>`, `>=` and so on.\n\n#### adapter black\n\nif you are using `black`, you should close fmt when use data table.\n\n```python\ndef where(_, a, b, c):\n    # fmt: off\n    _ | a | b     | c\n    _ | 5 | a + 1 | 4\n    _ | 3 | a + 2 | 2\n    # fmt: on\n```\n\n### 6. Conclusion\n\n| block       | Support fixtures | Special fixtures | Optional                   |\n| ----------- | ---------------- | ---------------- | -------------------------- |\n| **given**   | ✅                | `me`             | ✅                          |\n| **when**    | ✅                | ❎                | ✅                          |\n| **then**    | ✅                | `excinfo`        | when `expect` block exists |\n| **expect**  | ❎                | ❎                | when `then` block exists   |\n| **cleanup** | ✅                | ❎                | ✅                          |\n| **where**   | ✅                | `_`              | ✅                          |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "test,unittest,spock,bdd",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyspock",
    "package_url": "https://pypi.org/project/pyspock/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyspock/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyspock/0.3.0/",
    "requires_dist": [
      "pytest (>=6.2.4,<7.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Python implementation for spock framework",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11397491,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59670672df2a083fc9044875b549d314cee11896f101a29efaacc0dffce00fb0",
          "md5": "2d59ca7ef93dda8a0fb3779a76d9dd74",
          "sha256": "c6f8cd6ed1b94ac2e0880dad3715526a018e0efbd474483c4cbc75f4e1604eb0"
        },
        "downloads": -1,
        "filename": "pyspock-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d59ca7ef93dda8a0fb3779a76d9dd74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 2105,
        "upload_time": "2021-08-16T14:06:04",
        "upload_time_iso_8601": "2021-08-16T14:06:04.776200Z",
        "url": "https://files.pythonhosted.org/packages/59/67/0672df2a083fc9044875b549d314cee11896f101a29efaacc0dffce00fb0/pyspock-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89c79e43a8b3cb809df4688334a789591d20bd460e2c6c05632d7d2309ac543b",
          "md5": "24a3bd39c6870d725e52312ab48a5d0b",
          "sha256": "5e3c42371c98cdb00dd540f30bcb7ed0a4cc52493538094f7549b6e6a4652cb1"
        },
        "downloads": -1,
        "filename": "pyspock-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "24a3bd39c6870d725e52312ab48a5d0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 2339,
        "upload_time": "2021-08-16T14:06:06",
        "upload_time_iso_8601": "2021-08-16T14:06:06.545758Z",
        "url": "https://files.pythonhosted.org/packages/89/c7/9e43a8b3cb809df4688334a789591d20bd460e2c6c05632d7d2309ac543b/pyspock-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be453aed74ddc8f83cae0cf67d9e1f7729f2398793b3fcfeb44735db47d9e032",
          "md5": "402bd873c12fa64843460096cbdf34f5",
          "sha256": "4f36bc6adb7a8e8fcfe7e34cdf75a68114acf53e0b032f3ecdf7b0d6403f6724"
        },
        "downloads": -1,
        "filename": "pyspock-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "402bd873c12fa64843460096cbdf34f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9067,
        "upload_time": "2021-09-04T15:02:56",
        "upload_time_iso_8601": "2021-09-04T15:02:56.502107Z",
        "url": "https://files.pythonhosted.org/packages/be/45/3aed74ddc8f83cae0cf67d9e1f7729f2398793b3fcfeb44735db47d9e032/pyspock-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af62d66b4a743716fea9d6412c39cbba6a914d7cbb2deaab6ea96a78ad2d0859",
          "md5": "d814480b506915a88b76486b5334d04e",
          "sha256": "84a83835e58700b8d31f5a2a00ecd1d5d537f732ad2c76b4c90b8496767f942a"
        },
        "downloads": -1,
        "filename": "pyspock-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d814480b506915a88b76486b5334d04e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8150,
        "upload_time": "2021-09-04T15:02:58",
        "upload_time_iso_8601": "2021-09-04T15:02:58.313393Z",
        "url": "https://files.pythonhosted.org/packages/af/62/d66b4a743716fea9d6412c39cbba6a914d7cbb2deaab6ea96a78ad2d0859/pyspock-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38e034492d370ff235148fddc8b08220a06aca140f25961001c51d0963d23523",
          "md5": "34c34e402b7c3c0b4fd78f697c5d8090",
          "sha256": "3e30b969389e093c08727c5746cab8c8840ec05e9d64bff4d190970c43c3ccae"
        },
        "downloads": -1,
        "filename": "pyspock-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34c34e402b7c3c0b4fd78f697c5d8090",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 12138,
        "upload_time": "2021-09-08T17:03:07",
        "upload_time_iso_8601": "2021-09-08T17:03:07.138099Z",
        "url": "https://files.pythonhosted.org/packages/38/e0/34492d370ff235148fddc8b08220a06aca140f25961001c51d0963d23523/pyspock-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33efdc8d263b378f149727c4547babb91207d4274d12f6661058509a749726aa",
          "md5": "8a02e74401d2a61a5d63c1953065b29c",
          "sha256": "5ad1c1d96e3957e5cef78abbe67e3d1f7025c951f85df1afcde6ce4684fa09d9"
        },
        "downloads": -1,
        "filename": "pyspock-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a02e74401d2a61a5d63c1953065b29c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 14216,
        "upload_time": "2021-09-08T17:03:08",
        "upload_time_iso_8601": "2021-09-08T17:03:08.787372Z",
        "url": "https://files.pythonhosted.org/packages/33/ef/dc8d263b378f149727c4547babb91207d4274d12f6661058509a749726aa/pyspock-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38e034492d370ff235148fddc8b08220a06aca140f25961001c51d0963d23523",
        "md5": "34c34e402b7c3c0b4fd78f697c5d8090",
        "sha256": "3e30b969389e093c08727c5746cab8c8840ec05e9d64bff4d190970c43c3ccae"
      },
      "downloads": -1,
      "filename": "pyspock-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34c34e402b7c3c0b4fd78f697c5d8090",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 12138,
      "upload_time": "2021-09-08T17:03:07",
      "upload_time_iso_8601": "2021-09-08T17:03:07.138099Z",
      "url": "https://files.pythonhosted.org/packages/38/e0/34492d370ff235148fddc8b08220a06aca140f25961001c51d0963d23523/pyspock-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33efdc8d263b378f149727c4547babb91207d4274d12f6661058509a749726aa",
        "md5": "8a02e74401d2a61a5d63c1953065b29c",
        "sha256": "5ad1c1d96e3957e5cef78abbe67e3d1f7025c951f85df1afcde6ce4684fa09d9"
      },
      "downloads": -1,
      "filename": "pyspock-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8a02e74401d2a61a5d63c1953065b29c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 14216,
      "upload_time": "2021-09-08T17:03:08",
      "upload_time_iso_8601": "2021-09-08T17:03:08.787372Z",
      "url": "https://files.pythonhosted.org/packages/33/ef/dc8d263b378f149727c4547babb91207d4274d12f6661058509a749726aa/pyspock-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}