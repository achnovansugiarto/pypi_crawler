{
  "info": {
    "author": "josugoar",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<p align=\"center\">\n  <img src=\"assets/argdeco.png\" alt=\"argdeco\" width=\"640\" height=\"320\" />\n</p>\n\n<h1></h1>\n\n> Unopinionated **argparse** wrapper\n\n* The EXACT same decorating order as regular **argparse** MUST be respected\n\n* It is recommended to install the development version directly from the repository\n\n# Why argdeco?\n\nThere are so many libraries out there for writing command line utilities; why does **argdeco** exist?\n\nThis question is easy to answer: because there is not a single command line utility for Python out there which ticks the following boxes: ([sound familiar?](https://click.palletsprojects.com/en/7.x/why/))\n\n* supports class callback method decoration and method instance binding with class instance forwarding (thank you [Graham Dumpleton](https://github.com/GrahamDumpleton) for [wrapt](https://github.com/GrahamDumpleton/wrapt)!)\n\n* supports callback callable instance binding with **argparse** context or parser instance forwarding\n\n* shares the EXACT same API as **argparse** using decorators\n\n# Installation\n\nYou can get the library directly from PyPI:\n\n```sh\n$ pip install argdeco-JoshGoA\n```\n\nThe installation into a [virtualenv](https://github.com/pypa/virtualenv) (or [pipenv](https://github.com/pypa/pipenv)) is heavily recommended.\n\n# API reference\n\n* **argdeco.argument_parser**(wrapped=None, parser_class=argparse.ArgumentParser, ctx=False, prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars=\"-\", fromfile_prefix_chars=None, argument_default=None, conflict_handler=\"error\", add_help=True, allow_abbrev=True)\n\n  * Create a new ArgumentParser object. All parameters should be passed as keyword arguments. Each parameter has its own more detailed description below, but in short they are:\n\n      * wrapped - The callback callable (default: None)\n\n      * parser_class - The class to instantiate the parser (default: argparse.ArgumentParser)\n\n      * ctx - Pass the **argparse** context or parser instance to the callback callable (default: False)\n\n      * prog - The name of the program (default: sys.argv[0])\n\n      * usage - The string describing the program usage (default: generated from arguments added to parser)\n\n      * description - Text to display before the argument help (default: __doc__)\n\n      * epilog - Text to display after the argument help (default: none)\n\n      * parents - A list of ArgumentParser objects whose arguments should also be included\n\n      * formatter_class - A class for customizing the help output\n\n      * prefix_chars - The set of characters that prefix optional arguments (default: \"-\")\n\n      * fromfile_prefix_chars - The set of characters that prefix files from which additional arguments should be read (default: None)\n\n      * argument_default - The global default value for arguments (default: None)\n\n      * conflict_handler - The strategy for resolving conflicting optionals (usually unnecessary)\n\n      * add_help - Add a -h/--help option to the parser (default: True)\n\n      * allow_abbrev - Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)\n\n```py\n>>> import argdeco\n>>> @argdeco.add_argument(\"--foo\", help=\"foo help\")\n... @argdeco.argument_parser\n... def parser(foo):\n...     pass\n...\n```\n\n```py\n>>> parser([\"--help\"])\nusage: myprogram.py [-h] [--foo FOO]\n\noptional arguments:\n -h, --help  show this help message and exit\n --foo FOO   foo help\n```\n\n* **argdeco.add_argument**(name or flags..., group=None, [, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])\n\n  * Define how a single command-line argument should be parsed. Each parameter has its own more detailed description below, but in short they are:\n\n    * name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.\n\n    * group - The group to add the argument. (default: None)\n\n    * action - The basic type of action to be taken when this argument is encountered at the command line.\n\n    * nargs - The number of command-line arguments that should be consumed.\n\n    * const - A constant value required by some action and nargs selections.\n\n    * default - The value produced if the argument is absent from the command line.\n\n    * type - The type to which the command-line argument should be converted.\n\n    * choices - A container of the allowable values for the argument.\n\n    * required - Whether or not the command-line option may be omitted (optionals only).\n\n    * help - A brief description of what the argument does.\n\n    * metavar - A name for the argument in usage messages.\n\n    * dest - The name of the attribute to be added to the object returned by parse_args().\n\n* **argdeco.add_subparsers**(wrapped=None, [title][, description][, prog][, parser_class][, action][, option_string][, dest][, required][, help][, metavar])\n\n  * Many programs split up their functionality into a number of sub-commands, for example, the svn program can invoke sub-commands like svn checkout, svn update, and svn commit. Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments. ArgumentParser supports the creation of such sub-commands with the add_subparsers() method. The add_subparsers() method is normally called with no arguments and returns a special action object. This object has a single method, add_parser(), which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual.\n\n  * Description of parameters:\n\n    * wrapped - The callback callable (default: None)\n\n    * title - title for the sub-parser group in help output; by default “subcommands” if description is provided, otherwise uses title for positional arguments\n\n    * description - description for the sub-parser group in help output, by default None\n\n    * prog - usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument\n\n    * parser_class - class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)\n\n    * action - the basic type of action to be taken when this argument is encountered at the command line\n\n    * dest - name of the attribute under which sub-command name will be stored; by default None and no value is stored\n\n    * required - Whether or not a subcommand must be provided, by default False (added in 3.7)\n\n    * help - help for sub-parser group in help output, by default None\n\n    * metavar - string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}\n\n```py\n>>> # create the top-level parser\n>>> @argdeco.add_subparsers(help=\"sub-command help\")\n... @argdeco.add_argument(\"--foo\", action=\"store_true\", help=\"foo help\")\n... @argdeco.argument_parser(prog=\"PROG\")\n... def parser(**kwargs):\n...     print(\"parser\")\n...     print(kwargs)\n...\n```\n\n```py\n>>> # create the parser for the \"a\" command\n>>> @argdeco.add_argument(\"bar\", type=int, help=\"bar help\")\n... @argdeco.add_parser(parser, \"a\", help=\"a help\")\n... def parser_a(**kwargs):\n...     print(\"parser_a\")\n...     print(kwargs)\n...\n```\n\n```py\n>>> # create the parser for the \"a\" command\n>>> @argdeco.add_argument(\"--baz\", choices=\"XYZ\", help=\"baz help\")\n... @argdeco.add_parser(parser, \"b\", help=\"b help\")\n... def parser_b(**kwargs):\n...     print(\"parser_b\")\n...     print(kwargs)\n...\n```\n\n```py\n>>> # parse some argument lists\n>>> parser([\"a\", \"12\"])\nparser_a\n{\"foo\": False, \"bar\": 12}\n>>> parser([\"--foo\", \"b\", \"--baz\", \"Z\"])\nparser_b\n{\"foo\": True, \"baz\": \"Z\"}\n```\n\n* **argdeco.add_argument_group**(title=None, description=None)\n\n  * By default, ArgumentParser groups command-line arguments into “positional arguments” and “optional arguments” when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the add_argument_group() method:\n\n```py\n>>> @argdeco.add_argument(\"bar\", group=\"group\", help=\"bar help\")\n... @argdeco.add_argument(\"--foo\", group=\"group\", help=\"foo help\")\n... @argdeco.add_argument_group(\"group\")\n... @argdeco.argument_parser(prog=\"PROG\", add_help=False)\n... def parser(**kwargs):\n...     pass\n...\n>>> parser.print_help()\nusage: PROG [--foo FOO] bar\n\ngroup:\n  bar    bar help\n  --foo FOO  foo help\n```\n\n* **ardeco.add_mutually_exclusive_group**(required=False)\n\n```py\n>>> @argdeco.add_argument(\"--bar\", group=\"group\", action=\"store_false\")\n... @argdeco.add_argument(\"--foo\", group=\"group\", action=\"store_true\")\n... @argdeco.add_mutually_exclusive_group(\"group\")\n... @argdeco.argument_parser(prog=\"PROG\")\n... def parser(**kwargs):\n...     print(kwargs)\n...\n>>> parser([\"--foo\"])\n{\"foo\": True, \"bar\": True}\n>>> parser([\"--bar\"])\n{\"foo\": False, \"bar\": False}\n>>> parser([\"--foo\", \"--bar\"])\nusage: PROG [-h] [--foo | --bar]\nPROG: error: argument --bar: not allowed with argument --foo\n```\n\n# Advanced usage\n\n## Accessing attributes\n\n**argdeco** does NOT override decorated functions so that they can be accessed by the user easily if needed. In order to access the **argparse** context or parser instance, it is recommended to use context forwarding.\n\n```py\n>>> @argdeco.argument_parser\n... def prog(self):\n...     pass\n...\n>>> prog.__wrapped__\n<function prog at 0x0000029BCBFABF70>\n>>> prog.parser\nArgumentParser(prog=\"argdeco.py\", usage=None, description=None, formatter_class=<class \"argparse.HelpFormatter\">, conflict_handler=\"error\", add_help=True)\n```\n\n## Class method decoration\n\n**argdeco** supports class callback method decoration, unlike the big majority of CLI decorator libraries, without any difference as regular callback callable decoration.\n\n```py\n>>> class Prog:\n...\n...     @argdeco.argument_parser\n...     def parser(self):\n...         pass\n...\n```\n\nDecorating a class will forward the arguments to the *\\_\\_init__* method (usually not the desired behaviour), as decorated callbacks will ALWAYS be treated as callables.\n\n```py\n>>> @argdeco.argument_parser\n... class Prog:\n...     pass\n...\n```\n\nDecorating the *\\_\\_call__* method will forward the arguments to the class itself, following standard decorator usage as specified by [wrapt](https://wrapt.readthedocs.io/en/latest/decorators.html#decorating-class-methods).\n\n```py\n>>> class Prog:\n...\n...     @argdeco.argument_parser\n...     def __call__(self):\n...         pass\n...\n```\n\n## Context forwarding\n\nDecorated callback callables can get access to the **argparse** context or parser instance.\n\n```py\n>>> @argdeco.argument_parser(ctx=True, prog=\"PROG\")\n... def parser(ctx):\n...     ctx.print_help()\n...\n>>> parser([])\nusage: PROG [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\nClass callback method context or parser instance forwarding is still respected on decorated class methods.\n\n```py\n>>> class Prog:\n...\n...     @argdeco.argument_parser(ctx=True, prog=\"PROG\")\n...     def __call__(self, ctx):\n...         ctx.print_help()\n...\n>>> prog = Prog()\n>>> prog([])\nusage: PROG [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/josugoar/argdeco/archive/v1.4.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/josugoar/argdeco",
    "keywords": "argparse cli library pipenv python wrapt",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argdeco-josugoar",
    "package_url": "https://pypi.org/project/argdeco-josugoar/",
    "platform": "",
    "project_url": "https://pypi.org/project/argdeco-josugoar/",
    "project_urls": {
      "Download": "https://github.com/josugoar/argdeco/archive/v1.4.0.tar.gz",
      "Homepage": "https://github.com/josugoar/argdeco",
      "Source": "https://github.com/josugoar/argdeco"
    },
    "release_url": "https://pypi.org/project/argdeco-josugoar/1.4.0/",
    "requires_dist": [
      "wrapt"
    ],
    "requires_python": ">=3.8",
    "summary": "Unopinionated argparse wrapper",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9913636,
  "releases": {
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b68470ac81fb5397106e82cf7d932cd79d6038f00acee0e1984f791f603363d",
          "md5": "60cda20b568b77dbd4b444bb10794b9f",
          "sha256": "ba4b110b67adae79f7c1f2378ba8366d6941a15e68baf2c2e2065910db3abcfe"
        },
        "downloads": -1,
        "filename": "argdeco_josugoar-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60cda20b568b77dbd4b444bb10794b9f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6753,
        "upload_time": "2021-03-21T11:08:04",
        "upload_time_iso_8601": "2021-03-21T11:08:04.025528Z",
        "url": "https://files.pythonhosted.org/packages/7b/68/470ac81fb5397106e82cf7d932cd79d6038f00acee0e1984f791f603363d/argdeco_josugoar-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "297a3f918d38a5758ef25c95667df72fa29eca2fd4cddb9aa4bf0c7d59cf18e2",
          "md5": "68fa36dfe17b9444247230ef3fda35a4",
          "sha256": "614c101498a534a01f2c7fc34e8dbd6c8b5ec4e2a9b6c5d6a03b95381ea87ed7"
        },
        "downloads": -1,
        "filename": "argdeco-josugoar-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "68fa36dfe17b9444247230ef3fda35a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7824,
        "upload_time": "2021-03-21T11:08:06",
        "upload_time_iso_8601": "2021-03-21T11:08:06.946859Z",
        "url": "https://files.pythonhosted.org/packages/29/7a/3f918d38a5758ef25c95667df72fa29eca2fd4cddb9aa4bf0c7d59cf18e2/argdeco-josugoar-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3983625620ca927d60b75e24be255fc939b19c887df2e5b9d8e9b2dee9e9fc23",
          "md5": "a3738ac271f7ad6f769fee9bce464174",
          "sha256": "1c2d251f9854bd6d892f07d6f851fecfa3fde92d3524820d49959b6179a3753a"
        },
        "downloads": -1,
        "filename": "argdeco_josugoar-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3738ac271f7ad6f769fee9bce464174",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6755,
        "upload_time": "2021-03-29T15:15:07",
        "upload_time_iso_8601": "2021-03-29T15:15:07.231231Z",
        "url": "https://files.pythonhosted.org/packages/39/83/625620ca927d60b75e24be255fc939b19c887df2e5b9d8e9b2dee9e9fc23/argdeco_josugoar-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d492a7316b7f6758134a1fb4ee4df398daae0c82dd5afb7c4393e825e56fd59c",
          "md5": "ef7b68f748706f4554da6decddb1a91d",
          "sha256": "53713227ed6f60be21950dda8da916e2684838edbbb8684e9a7e7dcf6e242fcb"
        },
        "downloads": -1,
        "filename": "argdeco-josugoar-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef7b68f748706f4554da6decddb1a91d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7791,
        "upload_time": "2021-03-29T15:15:09",
        "upload_time_iso_8601": "2021-03-29T15:15:09.354261Z",
        "url": "https://files.pythonhosted.org/packages/d4/92/a7316b7f6758134a1fb4ee4df398daae0c82dd5afb7c4393e825e56fd59c/argdeco-josugoar-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3983625620ca927d60b75e24be255fc939b19c887df2e5b9d8e9b2dee9e9fc23",
        "md5": "a3738ac271f7ad6f769fee9bce464174",
        "sha256": "1c2d251f9854bd6d892f07d6f851fecfa3fde92d3524820d49959b6179a3753a"
      },
      "downloads": -1,
      "filename": "argdeco_josugoar-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a3738ac271f7ad6f769fee9bce464174",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 6755,
      "upload_time": "2021-03-29T15:15:07",
      "upload_time_iso_8601": "2021-03-29T15:15:07.231231Z",
      "url": "https://files.pythonhosted.org/packages/39/83/625620ca927d60b75e24be255fc939b19c887df2e5b9d8e9b2dee9e9fc23/argdeco_josugoar-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d492a7316b7f6758134a1fb4ee4df398daae0c82dd5afb7c4393e825e56fd59c",
        "md5": "ef7b68f748706f4554da6decddb1a91d",
        "sha256": "53713227ed6f60be21950dda8da916e2684838edbbb8684e9a7e7dcf6e242fcb"
      },
      "downloads": -1,
      "filename": "argdeco-josugoar-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ef7b68f748706f4554da6decddb1a91d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7791,
      "upload_time": "2021-03-29T15:15:09",
      "upload_time_iso_8601": "2021-03-29T15:15:09.354261Z",
      "url": "https://files.pythonhosted.org/packages/d4/92/a7316b7f6758134a1fb4ee4df398daae0c82dd5afb7c4393e825e56fd59c/argdeco-josugoar-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}