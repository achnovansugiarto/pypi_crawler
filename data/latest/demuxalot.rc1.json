{
  "info": {
    "author": "Alex Rogozhnikov",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\">\n<img width=\"500\" alt=\"demuxalot_logo_small\" src=\"https://user-images.githubusercontent.com/6318811/118947887-a261da00-b90c-11eb-8932-a66e6d2caa1f.png\">\n</p>\n \n[![Run tests and deploy](https://github.com/herophilus/demuxalot/actions/workflows/run_test.yml/badge.svg)](https://github.com/herophilus/demuxalot/actions/workflows/run_test.yml)\n# Demuxalot \n\nReliable and efficient idenfitication of genotypes for individual cells \nin RNA sequencing that refines the knowledge about genotypes from the data.\n\nDemuxalot is fast and optimized to work with lots of genotypes.\n\n## Background\n\nDuring single-cell RNA-sequencing (scRnaSeq) we pool cells from different donors and process them together.\n\n- Pro: all cells come through the same pipeline, so preparation/biological variation effects are cancelled out from analysis automatically. \n  Also experiments are much cheaper!\n- Con: we don't know cell origin\n\nDemultiplexing step that demuxalot completes solves the con: \nit guesses genotype of each cell by matching reads coming from cell against genotypes.\n\nHerophilus uses scRnaSeq to study cells in organoids with multiple genetic backgrounds at scale.\n\n## Known genotypes and refined genotypes: the tale of two scenarios\n\nTypical approach to get genotype-specific mutations are \n \n- whole-genome sequencing (expensive, very good)\n  - you have information about all (ok, almost all) the genotype, and it is unlikely that you need to refine it\n  - so you just go straight to demultiplexing\n  - demuxlet solves this case\n- Bead arrays (aka SNP arrays aka DNA microarrays) are super cheap and practically more relevant\n  - you get information about 50k to 650k most common SNPs, and that's only a small fraction, but you also pay very little\n  - this case is covered by `demuxalot` (this package)\n  - [Illumina's video](https://www.youtube.com/watch?v=lVG04dAAyvY) about this technology\n\n## Why is it worth refining genotypes? \n   \nSNP array provides up to ~650k (as of 2021) positions in the genome.\nAround 20-30% of them would be specific for a genotype (i.e. deviate from majority).\n\n- Each genotype has around 10 times more SNV (single nucleotide variations) \n  that are not captured by array. Some of this missing SNPs are very valuable for demultiplexing\n\n## What's special power of demuxalot?\n\n- much better handling of multiple reads coming from the same UMI (i.e. same transcript)\n  - `demuxalot` efficiently combines information from multiple reads with same UMI and cross-checks it\n- default settings are CellRanger-specific (that is - optimized for 10X pipeline). Cellranger's and STAR's flags in BAM break some common conventions, \n  but we can still efficiently use them (by using filtering callbacks)  \n- ability to refine genotypes. without failing and diverging\n  - Vireo is a tool that was created with similar purposes. But it either diverges or does not learn better genotypes\n- optimized variant calling. It's also faster than `demuxlet` due to multiprocessing\n- this is not a command-line tool, and not meant to be \n  - write python code, this gives full control and flexibility of demultiplexing\n\n## Installation\n\nPackage is pip-installable. Requires python >= 3.6\n\n```bash\ngit clone <repo> \npip install ./demuxalot\n```\n\n## Running (simple scenario)\nOnly using provided genotypes\n\n```python\nfrom demuxalot import Demultiplexer, BarcodeHandler, ProbabilisticGenotypes, count_snps\n\n# Loading genotypes\ngenotypes = ProbabilisticGenotypes(genotype_names=['Donor1', 'Donor2', 'Donor3'])\ngenotypes.add_vcf('path/to/genotypes.vcf')\n\n# Loading barcodes\nbarcode_handler = BarcodeHandler.from_file('path/to/barcodes.csv')\n\nsnps = count_snps(\n    bamfile_location='path/to/sorted_alignments.bam',\n    chromosome2positions=genotypes.get_chromosome2positions(),\n    barcode_handler=barcode_handler, \n)\n\n# returns two dataframes with likelihoods and posterior probabilities \nlikelihoods, posterior_probabilities = Demultiplexer.predict_posteriors(\n    snps,\n    genotypes=genotypes,\n    barcode_handler=barcode_handler,\n    only_singlets=False\n)\n```\n\n\n## Running (complex scenario)\nRefinement of known genotypes\n\n```python\nfrom demuxalot import Demultiplexer, BarcodeHandler, ProbabilisticGenotypes, count_snps\n\n# Loading genotypes\ngenotypes = ProbabilisticGenotypes(genotype_names=['Donor1', 'Donor2', 'Donor3'])\ngenotypes.add_vcf('path/to/genotypes.vcf')\n\n# TODO add SNPs detection\n\n\n# Load barcodes\nbarcode_handler = BarcodeHandler.from_file('path/to/barcodes.csv')\n\nsnps = count_snps(\n    bamfile_location='path/to/sorted_alignments.bam',\n    chromosome2positions=genotypes.get_chromosome2positions(),\n    barcode_handler=barcode_handler, \n)\n\n# Infer refined genotypes \nrefined_genotypes, _posterior_probabilities = \\\n    Demultiplexer.learn_genotypes(snps, genotypes=genotypes, n_iterations=5)\n\n# Use learnt genotypes for demultiplexing\nlikelihoods, posterior_probabilities = Demultiplexer.predict_posteriors(\n    snps,\n    genotypes=refined_genotypes,\n    barcode_handler=barcode_handler,\n    only_singlets=False,\n)\n```\n\n## Saving/loading genotypes\n   \n```python\n# You can always export learnt genotypes to be used later\nrefined_genotypes.save_betas('learnt_genotypes.csv')\nrefined_genotypes = ProbabilisticGenotypes(genotype_names= <list which genotypes to load>)\nrefined_genotypes.add_prior_betas('learnt_genotypes.csv')\n```\n\n## Re-saving VCF genotypes with betas\n\nGenerally makes sense to export VCF to internal format only when you plan to load it many times.\nLoading of internal format is much faster \n\n```python\ngenotypes = ProbabilisticGenotypes(genotype_names=['Donor1', 'Donor2', 'Donor3'])\ngenotypes.add_vcf('path/to/genotypes.vcf')\ngenotypes.save_betas('learnt_genotypes.csv')\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "genotype learning,single cell RNA sequencing,demultiplexing,bayesian modelling",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "demuxalot",
    "package_url": "https://pypi.org/project/demuxalot/",
    "platform": "",
    "project_url": "https://pypi.org/project/demuxalot/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/demuxalot/0.2.0/",
    "requires_dist": [
      "pysam",
      "scipy",
      "numpy",
      "joblib",
      "pandas"
    ],
    "requires_python": "",
    "summary": "Scalable and reliable demultiplexing for single-cell RNA sequencing that refines genotypes",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10444905,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2faf2faebd4d67724e01d550544060656d415c0d5a28e3517b40dec44f325edf",
          "md5": "0f384f09ab3b99b4ad3069c6f33415e3",
          "sha256": "e64020a42baa9662e7b077ae97a43081fc36fdfb753b48a76fc49f73b6aa9a8c"
        },
        "downloads": -1,
        "filename": "demuxalot-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f384f09ab3b99b4ad3069c6f33415e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21651,
        "upload_time": "2021-05-23T04:23:22",
        "upload_time_iso_8601": "2021-05-23T04:23:22.575184Z",
        "url": "https://files.pythonhosted.org/packages/2f/af/2faebd4d67724e01d550544060656d415c0d5a28e3517b40dec44f325edf/demuxalot-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64235c83950d9f57d486da08582a8b909ec9f351a5b5aff7ca4aff8b38d2eb75",
          "md5": "c646d5e9079968d91440586a67c3668b",
          "sha256": "87b74952cd9c69555484cf099173830e5da3802c75ba7be993722df3773a87e0"
        },
        "downloads": -1,
        "filename": "demuxalot-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c646d5e9079968d91440586a67c3668b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21404,
        "upload_time": "2021-05-23T04:23:24",
        "upload_time_iso_8601": "2021-05-23T04:23:24.160238Z",
        "url": "https://files.pythonhosted.org/packages/64/23/5c83950d9f57d486da08582a8b909ec9f351a5b5aff7ca4aff8b38d2eb75/demuxalot-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2faf2faebd4d67724e01d550544060656d415c0d5a28e3517b40dec44f325edf",
        "md5": "0f384f09ab3b99b4ad3069c6f33415e3",
        "sha256": "e64020a42baa9662e7b077ae97a43081fc36fdfb753b48a76fc49f73b6aa9a8c"
      },
      "downloads": -1,
      "filename": "demuxalot-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0f384f09ab3b99b4ad3069c6f33415e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21651,
      "upload_time": "2021-05-23T04:23:22",
      "upload_time_iso_8601": "2021-05-23T04:23:22.575184Z",
      "url": "https://files.pythonhosted.org/packages/2f/af/2faebd4d67724e01d550544060656d415c0d5a28e3517b40dec44f325edf/demuxalot-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64235c83950d9f57d486da08582a8b909ec9f351a5b5aff7ca4aff8b38d2eb75",
        "md5": "c646d5e9079968d91440586a67c3668b",
        "sha256": "87b74952cd9c69555484cf099173830e5da3802c75ba7be993722df3773a87e0"
      },
      "downloads": -1,
      "filename": "demuxalot-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c646d5e9079968d91440586a67c3668b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21404,
      "upload_time": "2021-05-23T04:23:24",
      "upload_time_iso_8601": "2021-05-23T04:23:24.160238Z",
      "url": "https://files.pythonhosted.org/packages/64/23/5c83950d9f57d486da08582a8b909ec9f351a5b5aff7ca4aff8b38d2eb75/demuxalot-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}