{
  "info": {
    "author": "Gnarly Games",
    "author_email": "gnarlygames@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "\n# BridgeStream \n\n\nBridgeStream is a order oriented binary serialization library developed for performance and efficiency.\n\nBridgeStream is used as a part of an real-time online game to\ntransmit data between the client and servers.\n\nYou can encode/decode primitive types, collection on primitives, custom serializers and other BridgeStream's easily\nand efficiently.\n\n\n## Install\n\n```bash\npip install bridgestream\n```\n\n## Basic Usage\n\nCreate a stream\n\n```python\nfrom bridgestream import BridgeStream\n\nstream = BridgeStream()\n```\n\nWrite some data\n\n```python\nstream.write_int(1)\nstream.write_string(\"test\")\nstream.write_float(0.1)\nstream.write_bool(True)\n```\n\nEncode\n\n```python\ndata = stream.encode()\n```\n\nDecode\n\n```python\nstream = BridgeStream(data)\n```\n\nRead in order\n\n```python\nstream.read_int()  # 1\nstream.read_string()  # test\nstream.read_float()  # 0.1\nstream.read_bool()  # True\n```\n\n## Custom Types\n\nYou can define your own serializers to abstract your common data types using `BridgeSerializer`.\n\nYou must implement the `write` method of `BridgeSerializer` \nto be able to encode it as a **stream** and you must implement the `read` method to be able to decode it as a **stream**.\n\n```python\nfrom bridgestream import BridgeSerializer\n\n@dataclass  # dataclass is not required but recommended\nclass Vector3(BridgeSerializer):\n    x: int\n    y: int\n    z: int\n\n    def write(self, stream: BridgeStream):\n        stream.write_int(self.x)\n        stream.write_int(self.y)\n        stream.write_int(self.z)\n\n    def read(self, stream: BridgeStream):\n        self.x = stream.write_int(x)\n        self.y = stream.write_int(y)\n        self.z = stream.write_int(z)\n\n\n```\n\nYou can encode custom serializers using the `write` method of \n`BridgeStream`.\n\n```python\n\nvector = Vector3(1, 0, 2)\n\nstream = BridgeStream()\nstream.write(vector)\n\ndata = stream.encode()\n```\n\nYou can decode a custom serializer using the `read(BirdgeSerializer)` method of \n`BridgeStream`.\n\n```python\nstream = BridgeStream(data)\n\nvector = stream.read(Vector3)  # Vector3(x=1, y=0, z=2)\n```\n\nYou can also read/write list of custom serializers.\n```python\nvectors = [Vector3(1, 0, 2), Vector3(3, -1, 4)]\n\nstream = BridgeStream()\nstream.write_list(vector)\n\ndata = stream.encode()\n\n\nstream = BridgeStream(data)\n\nvector = stream.read_list(Vector3)  # [Vector3(x=1, y=0, z=2), ector3(x=3, y=-1, z=4)]\n```\n\n\n## Nested BridgeStream\n\nSome times it is necessary to write a bridgestream within another bridgestream. In this example; we have 2 different serializers that have the same purposes. Each Serializer can do its business logic within its own read/write methods and still can be serialized as a whole.\n\n\nClass definitions\n```python\n\n@dataclass\nclass WarriorLevel(BridgeSerializer):\n    health: int\n    attack_radious: int\n    shield: int\n\n    def write(self, stream: BridgeStream):\n        stream.write_int(self.health)\n        stream.write_int(self.attack_radious)\n        stream.write_int(self.shield)\n\n    def read(self, stream: BridgeStream):\n        self.health = stream.read_int()\n        self.attack_radious = stream.read_int()\n        self.shield = stream.read_int()\n\n@dataclass\nclass MageLevel(BridgeSerializer):\n    health: int\n    projectile_damage: int\n    regeneration: int\n\n    def write(self, stream: BridgeStream):\n        stream.write_int(self.health)\n        stream.write_int(self.projectile_damage)\n        stream.write_int(self.regeneration)\n\n    def read(self, stream: BridgeStream):\n        self.health = stream.read_int()\n        self.projectile_damage = stream.read_int()\n        self.regeneration = stream.read_int()\n\n\n@dataclass\nclass Warrior(BridgeSerializer):\n    id: str\n    attack_speed: float\n    atack_cooldown: float\n    levels: List[WarriorLevel]\n\n    def write(self, stream):\n        stream.write_string(self.id)\n        stream.write_float(self.attack_speed)\n        stream.write_float(self.atack_cooldown)\n        stream.write_list(self.levels)\n\n\n    def read(self, stream):\n        self.id = stream.read_string()\n        self.attack_speed = stream.read_float()\n        self.atack_cooldown = stream.read_float()\n        self.levels = stream.read_list(WarriorLevel)\n\n\n@dataclass\nclass Mage(BridgeSerializer):\n    id: str\n    projectile_range: float\n    projectile_speed: float\n    levels: List[MageLevel]\n\n    def write(self, stream: BridgeStream):\n        stream.write_string(self.id)\n        stream.write_float(self.projectile_range)\n        stream.write_float(self.projectile_speed)\n        stream.write_list(self.levels)\n\n\n    def read(self, stream: BridgeStream):\n        self.id = stream.read_string()\n        self.attack_speed = stream.read_float()\n        self.atack_cooldown = stream.read_float()\n        self.levels = stream.read_list(MageLevel)\n\n\n@dataclass\nclass Player(BridgeSerializer):\n    name: str\n    level: int\n    heroes: List[str]\n\n    def write(self, stream: BridgeStream):\n        stream.write_string(self.name)\n        stream.write_int(self.level)\n        stream.write_string_list(self.heroes)\n\n\n    def read(self, stream: BridgeStream):\n        self.name = stream.read_string()\n        self.level = stream.read_int()\n        self.heroes = stream.read_string_list()\n```\n\nInitialization\n\n```python\n\nplayer = Player(name=\"player-1\", level=5, heroes=[\"w-1\", \"m-1\"])\n\nhero_cofigurations = {\n    \"warrior\": Warrior(\n        id=\"w-1\",\n        attack_speed=0.4,\n        atack_cooldown=0.2,\n        levels=[WarriorLevel(300, 50, 1), WarriorLevel(340, 55, 1.2)]\n    ),\n    \"mage\": Mage(\n        id=\"m-1\",\n        projectile_range=400,\n        projectile_speed=1.4,\n        levels=[MageLevel(1.5, 30, 5), MageLevel(340, 35, 10)]\n    ),\n}\n\n```\n\nNested encoding & decoding\n\n```python\nstream = BridgeStream()\nstream.write(player)\n\nhero_config_stream = BridgeStream()\nfor class_name, config in hero_cofigurations.items():\n    hero_config_stream.write_string(class_name)\n    hero_config_stream.write(config)\n\nstream.write_stream(hero_config_stream)\n\ndata = stream.encode()\n\n\nstream = BridgeStream(data)\n\nplayer = stream.read(Player)  # Player(name=\"player-1\", level=5, heroes=[\"w-1\", \"m-1\"])\n\n# Read the stream to the end and create config by types\n\nhero_classes = {\"warrior\": Warrior, \"mage\": Mage}\nhero_cofigurations = {}\nwhile stream.has_more():\n    class_name = stream.read_string()\n    config = stream.read(hero_classes[class_name])\n    hero_cofigurations[class_name] = config\n\n\nhero_cofigurations\n\"\"\"\n{\n    \"warrior\": Warrior(\n        id=\"w-1\",\n        attack_speed=0.4,\n        atack_cooldown=0.2,\n        levels=[WarriorLevel(300, 50, 1), WarriorLevel(340, 55, 1.2)]\n    ),\n    \"mage\": Mage(\n        id=\"m-1\",\n        projectile_range=400,\n        projectile_speed=1.4,\n        levels=[MageLevel(1.5, 30, 5), MageLevel(340, 35, 10)]\n    ),\n}\n\"\"\"\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/gnarly-games/python-bridgestream",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bridgestream",
    "package_url": "https://pypi.org/project/bridgestream/",
    "platform": "",
    "project_url": "https://pypi.org/project/bridgestream/",
    "project_urls": {
      "Homepage": "https://gitlab.com/gnarly-games/python-bridgestream"
    },
    "release_url": "https://pypi.org/project/bridgestream/1.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.8.0",
    "summary": "Packet Serializer",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8547148,
  "releases": {
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43eefb6cb6dc32275b4993c309e91e96953a4095a06e9effb2498a56fb6c7c53",
          "md5": "ca0094d1dbeed51deda8e23bb5d0c664",
          "sha256": "e1b7cf2d523e4a39e90e23ede056aee0c78e1bcbf81f6b8842cfc360d2e2ee86"
        },
        "downloads": -1,
        "filename": "bridgestream-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca0094d1dbeed51deda8e23bb5d0c664",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 5858,
        "upload_time": "2020-10-31T02:04:27",
        "upload_time_iso_8601": "2020-10-31T02:04:27.868139Z",
        "url": "https://files.pythonhosted.org/packages/43/ee/fb6cb6dc32275b4993c309e91e96953a4095a06e9effb2498a56fb6c7c53/bridgestream-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd3a655856a23787c9c13de0fd971a5b4c3daca7ee7b28f0f1603382576b31dd",
          "md5": "ae940d69ebaf84417e621707fd1ad2f0",
          "sha256": "97d8aa173cf45b3145950857aab106b16848dedb2936bd327b4ee70928594a52"
        },
        "downloads": -1,
        "filename": "bridgestream-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae940d69ebaf84417e621707fd1ad2f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0",
        "size": 8057,
        "upload_time": "2020-10-31T02:04:30",
        "upload_time_iso_8601": "2020-10-31T02:04:30.137137Z",
        "url": "https://files.pythonhosted.org/packages/dd/3a/655856a23787c9c13de0fd971a5b4c3daca7ee7b28f0f1603382576b31dd/bridgestream-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43eefb6cb6dc32275b4993c309e91e96953a4095a06e9effb2498a56fb6c7c53",
        "md5": "ca0094d1dbeed51deda8e23bb5d0c664",
        "sha256": "e1b7cf2d523e4a39e90e23ede056aee0c78e1bcbf81f6b8842cfc360d2e2ee86"
      },
      "downloads": -1,
      "filename": "bridgestream-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca0094d1dbeed51deda8e23bb5d0c664",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.0",
      "size": 5858,
      "upload_time": "2020-10-31T02:04:27",
      "upload_time_iso_8601": "2020-10-31T02:04:27.868139Z",
      "url": "https://files.pythonhosted.org/packages/43/ee/fb6cb6dc32275b4993c309e91e96953a4095a06e9effb2498a56fb6c7c53/bridgestream-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd3a655856a23787c9c13de0fd971a5b4c3daca7ee7b28f0f1603382576b31dd",
        "md5": "ae940d69ebaf84417e621707fd1ad2f0",
        "sha256": "97d8aa173cf45b3145950857aab106b16848dedb2936bd327b4ee70928594a52"
      },
      "downloads": -1,
      "filename": "bridgestream-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ae940d69ebaf84417e621707fd1ad2f0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.0",
      "size": 8057,
      "upload_time": "2020-10-31T02:04:30",
      "upload_time_iso_8601": "2020-10-31T02:04:30.137137Z",
      "url": "https://files.pythonhosted.org/packages/dd/3a/655856a23787c9c13de0fd971a5b4c3daca7ee7b28f0f1603382576b31dd/bridgestream-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}