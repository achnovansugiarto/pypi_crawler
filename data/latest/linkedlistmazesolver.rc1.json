{
  "info": {
    "author": "badhex",
    "author_email": "badhex@inflict.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Linked-List Maze Solver\r\n\r\nThis python class provides an A* algorithm to solve linked list, represented as a dictonary, mazes. It can be used to find the shortest path between a start and end point in a maze.\r\n\r\nThe LinkedListMazeSolver class is optimized for readability and performance. It has been designed to work with mazes that contain linked list representations with no x,y,z coordinates.\r\n\r\n## Usage\r\n\r\n```python\r\nfrom LinkedListMazeSolver import AStarMazeSolver, BFSMazeSolver\r\n\r\nmaze = {\r\n    \"A\": {\"exit\": {\"n\": \"B\", \"e\": \"D\", \"w\": \"C\", \"ne\": \"G\", \"nw\": \"F\"}},\r\n    \"B\": {\"exit\": {\"s\": \"A\"}},\r\n    \"C\": {\"exit\": {\"e\": \"A\"}},\r\n    \"D\": {\"exit\": {\"w\": \"A\", \"ne\": \"G\", \"se\": \"H\", \"u\": \"K\"}},\r\n    \"E\": {\"exit\": {\"n\": \"F\", \"e\": \"H\", \"ne\": \"I\"}},\r\n    \"F\": {\"exit\": {\"s\": \"E\", \"ne\": \"G\", \"se\": \"C\"}},\r\n    \"G\": {\"exit\": {\"s\": \"A\", \"nw\": \"F\", \"sw\": \"E\"}},\r\n    \"H\": {\"exit\": {\"w\": \"D\", \"n\": \"I\", \"nw\": \"E\"}},\r\n    \"I\": {\"exit\": {\"s\": \"H\", \"sw\": \"D\"}},\r\n    \"J\": {\"exit\": {\"n\": \"K\", \"e\": \"L\"}},\r\n    \"K\": {\"exit\": {\"s\": \"J\", \"d\": \"D\"}},\r\n    \"L\": {\"exit\": {\"w\": \"J\", \"e\": \"M\"}},\r\n    \"M\": {\"exit\": {\"w\": \"L\"}},\r\n}\r\n\r\nsolver = AStarMazeSolver(maze, \"A\", \"M\")\r\nresult = solver.solve()\r\nprint(result)\r\nsolver = BFSMazeSolver(maze, \"A\", \"M\")\r\nresult = solver.solve()\r\nprint(result)\r\n```\r\n## Output\r\n```python\r\ne u s e e\r\ne u s e e\r\n```\r\n\r\n## Supported Maze Directions\r\n\r\nThis implementation was designed with a maze containing the following directions: \r\n```\r\nn, s, e, w, ne, nw, se, sw, u, d\r\n```\r\nHowever, you may define your own directions in your sample data.\r\n\r\n### Customization\r\n\r\nIf you need to customize the behavior of the BidirectionalAStarMazeSolver class, you can do so by subclassing the class and overriding its methods.\r\n\r\nFor example, if you want to use a different heuristic function, you can override the __heuristic__ method:\r\n```python\r\nclass CustomMazeSolver(AStarMazeSolver):\r\n    def __heuristic__(self, curr, end, maze):\r\n        # Custom heuristic function\r\n        pass\r\n```\r\n\r\n\r\n## Contributions\r\n\r\nContributions to the MazeSolver class are welcome! If you find a bug or want to suggest a new feature, please open an issue or submit a pull request on Github.\r\n\r\n## License\r\n\r\nThis implementation is licensed under the MIT License.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/badhex/LinkedListMazeSolver",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LinkedListMazeSolver",
    "package_url": "https://pypi.org/project/LinkedListMazeSolver/",
    "platform": null,
    "project_url": "https://pypi.org/project/LinkedListMazeSolver/",
    "project_urls": {
      "Homepage": "https://github.com/badhex/LinkedListMazeSolver"
    },
    "release_url": "https://pypi.org/project/LinkedListMazeSolver/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This class is designed to solve a linked-list dictonary maze using the A* or Breadth-First algorithms. It takes a maze as input, represented as a dictionary where each key represents a room and the exits value is another dictionary that contains the exits of the room.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17410437,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84cc9f882d07f80d8a9883c88dce2e79e5a3212dd48f67bf33c6a2b9a9971264",
          "md5": "7e75916d5ec33bfe92d0f3b2148d0ec9",
          "sha256": "7f2dddfc1d2361add5b49658137dc8872b4bd8929b0e47fc90ae80933bbecd5a"
        },
        "downloads": -1,
        "filename": "LinkedListMazeSolver-1.0.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "7e75916d5ec33bfe92d0f3b2148d0ec9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4801,
        "upload_time": "2023-03-23T05:32:34",
        "upload_time_iso_8601": "2023-03-23T05:32:34.176947Z",
        "url": "https://files.pythonhosted.org/packages/84/cc/9f882d07f80d8a9883c88dce2e79e5a3212dd48f67bf33c6a2b9a9971264/LinkedListMazeSolver-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46c739990959c9fd9ab45f897a31df2816fe7bb2a8d3bd0326b04bd0304efee0",
          "md5": "ef15d94708f7b9587a2893f987ed4f3c",
          "sha256": "a3e15adcbc182088b0d214fb46ff7178c17f65f7f9781c9b6785cdff1760d411"
        },
        "downloads": -1,
        "filename": "LinkedListMazeSolver-1.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "ef15d94708f7b9587a2893f987ed4f3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4872,
        "upload_time": "2023-03-23T05:32:36",
        "upload_time_iso_8601": "2023-03-23T05:32:36.786326Z",
        "url": "https://files.pythonhosted.org/packages/46/c7/39990959c9fd9ab45f897a31df2816fe7bb2a8d3bd0326b04bd0304efee0/LinkedListMazeSolver-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84cc9f882d07f80d8a9883c88dce2e79e5a3212dd48f67bf33c6a2b9a9971264",
        "md5": "7e75916d5ec33bfe92d0f3b2148d0ec9",
        "sha256": "7f2dddfc1d2361add5b49658137dc8872b4bd8929b0e47fc90ae80933bbecd5a"
      },
      "downloads": -1,
      "filename": "LinkedListMazeSolver-1.0.0-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "7e75916d5ec33bfe92d0f3b2148d0ec9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4801,
      "upload_time": "2023-03-23T05:32:34",
      "upload_time_iso_8601": "2023-03-23T05:32:34.176947Z",
      "url": "https://files.pythonhosted.org/packages/84/cc/9f882d07f80d8a9883c88dce2e79e5a3212dd48f67bf33c6a2b9a9971264/LinkedListMazeSolver-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46c739990959c9fd9ab45f897a31df2816fe7bb2a8d3bd0326b04bd0304efee0",
        "md5": "ef15d94708f7b9587a2893f987ed4f3c",
        "sha256": "a3e15adcbc182088b0d214fb46ff7178c17f65f7f9781c9b6785cdff1760d411"
      },
      "downloads": -1,
      "filename": "LinkedListMazeSolver-1.0.0.tar.gz",
      "has_sig": true,
      "md5_digest": "ef15d94708f7b9587a2893f987ed4f3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4872,
      "upload_time": "2023-03-23T05:32:36",
      "upload_time_iso_8601": "2023-03-23T05:32:36.786326Z",
      "url": "https://files.pythonhosted.org/packages/46/c7/39990959c9fd9ab45f897a31df2816fe7bb2a8d3bd0326b04bd0304efee0/LinkedListMazeSolver-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}