{
  "info": {
    "author": "Justin Lehnen",
    "author_email": "justin.lehnen@gmx.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: The Unlicense (Unlicense)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<div id=\"top\"></div>\n<!-- PROJECT LOGO -->\n<br />\n<div align=\"center\">\n  <a href=\"https://gitlab.com/justin_lehnen/zsim-cli\">\n    <img src=\"images/logo.png\" alt=\"Logo\" width=\"80\" height=\"80\">\n  </a>\n\n  <h3 align=\"center\">zsim-cli</h3>\n\n  <p align=\"center\">\n    A simulator for an assembly like toy-language\n    <br />\n    <a href=\"https://gitlab.com/justin_lehnen/zsim-cli\"><strong>Explore the docs »</strong></a>\n    <br />\n    <br />\n    <a href=\"https://gitlab.com/justin_lehnen/zsim-cli\">View Demo</a>\n    ·\n    <a href=\"https://gitlab.com/justin_lehnen/zsim-cli/issues\">Report Bug</a>\n    ·\n    <a href=\"https://gitlab.com/justin_lehnen/zsim-cli/issues\">Request Feature</a>\n  </p>\n</div>\n\n\n\n<!-- TABLE OF CONTENTS -->\n<details>\n  <summary>Table of Contents</summary>\n  <ol>\n    <li>\n      <a href=\"#about-the-project\">About The Project</a>\n      <ul>\n        <li><a href=\"#built-with\">Built With</a></li>\n      </ul>\n    </li>\n    <li>\n      <a href=\"#getting-started\">Getting Started</a>\n      <ul>\n        <li><a href=\"#prerequisites\">Prerequisites</a></li>\n        <li><a href=\"#installation\">Installation</a></li>\n      </ul>\n    </li>\n    <li>\n      <a href=\"#usage\">Usage</a>\n      <ul>\n        <li><a href=\"#tokenization\">Tokenization</a></li>\n        <li><a href=\"#validation\">Validation</a></li>\n        <li><a href=\"#simulating\">Simulating</a></li>\n        <li><a href=\"#using-interactive-mode\">Using interactive mode</a></li>\n      </ul>\n    </li>\n    <li><a href=\"#roadmap\">Roadmap</a></li>\n    <li><a href=\"#contributing\">Contributing</a></li>\n    <li><a href=\"#license\">License</a></li>\n    <li><a href=\"#contact\">Contact</a></li>\n    <li><a href=\"#acknowledgments\">Acknowledgments</a></li>\n  </ol>\n</details>\n\n\n\n<!-- ABOUT THE PROJECT -->\n## About The Project\n\n[![zsim-cli Demo][zsim-demo]](https://gitlab.com/justin_lehnen/zsim-cli)\n\nImplemented for the compiler building course after the winter semester 2020 on the Aachen University of Applied Sciences.<br />\nZ-Code is a simplified assembly like toy language created to prove that compiling to a temporary language like Java-Bytecode can be much easier than going from a high-level language directly to assembly.\n\nCheck out the syntax diagrams for detailed information on how the syntax of Z-Code is defined [here](ZCODE.md).\n\nSublime syntax highlighting for Z-Code available [here](zcode.sublime-syntax)!\n[![Z-Code syntax highlighting][zcode-syntax-highlighting]](zcode.sublime-syntax)\n\nIt even works on [Termux](https://termux.com/)!\n\n[![zsim on Termux][zsim-termux-screenshot]](https://termux.com/)\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n\n\n### Built With\n\nzsim-cli relies heavily on the following libraries.\n\n* [Click](https://click.palletsprojects.com)\n* [pytest](https://pytest.org)\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n\n\n<!-- GETTING STARTED -->\n## Getting Started\n\nTo get a local copy up and running follow these simple steps.\n\n### Prerequisites\n\n* Python 3.6\n  - Head over to _[https://python.org](https://www.python.org/downloads/)_ and install the binary suitable for your operation system. Make sure you can run it:\n  ```sh\n  python --version\n  ```\n* pip\n  - Check if pip is already installed:\n  ```sh\n  pip --version\n  ```\n  - If your python installation does not come with pip pre-installed visit _[https://pip.pypa.io](https://pip.pypa.io/en/stable/installation/)_ to install it and then check again.\n\n### Installation\n\n1. Clone the repository\n   ```sh\n   git clone https://gitlab.com/justin_lehnen/zsim-cli.git\n   cd zsim-cli\n   ```\n\n1. (Optionally) create a python virtual environment and enter it\n   ```sh\n   python -m venv venv\n   # Windows\n   venv/Scripts/activate.bat\n   # Unix or MacOS\n   source venv/bin/activate\n   ```\n\n1. Install using pip\n   ```sh\n   pip install -e .\n   ```\n\n1. Run unit tests\n   ```sh\n   pytest\n   ```\n\nAnd you're set!\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n\n\n<!-- USAGE EXAMPLES -->\n## Usage\n\n_For more examples, please refer to the [Documentation](https://gitlab.com/justin_lehnen/zsim-cli)_\n\n\n### Tokenization\n`zsim-cli tokenize [ZCODE]`\n#### --json / --no-json\nType: `Boolean`\nDefault: `False`\n\nIf the flag is set, the output will be in JSON format.<br />\nThe JSON schema is `[ { \"type\": \"<type>\", \"value\": \"<value>\" }, ... ]`.\n\nExamples:\n```bash\n# Tokenize code in JSON\nzsim-cli tokenize \"LIT 7; PRT;\" --json\n```\n```bash\n# Pipe output to a JSON parser like jq for powerful postprocessing!\nzsim-cli tokenize \"LIT 7; PRT;\" --json | jq -r .[].type\n```\n\n#### -i, --input FILENAME\nType: `String`\nDefault: `None`\n\nSet an input file to read the Z-Code from. `-` will use the stdin.\n>If you're using Windows, remember that the default `cmd.exe` requires two EOF characters followed by return (see examples).\n\nExamples:\n```bash\n# Tokenize file programs/test.zc\nzsim-cli tokenize -i programs/test.zc\n```\n```bash\n# Tokenize from stdin\nzsim-cli tokenize -i -\nLIT 7;\nPRT;\n# Windows\n^Z <ENTER>\n^Z <ENTER>\n# Unix or MacOS\n^D^D\n```\n\n#### --encoding TEXT\nType: `String`\nDefault: `\"utf_8\"`\n\nEncoding to use when opening files with `-i, --input`.<br />\nRefer to the [Python docs](https://docs.python.org/3/library/codecs.html#standard-encodings) for possible values.\n\nExamples:\n```bash\n# Use ASCII encoding\nzsim-cli tokenize -i ascii_encoded.zc --encoding ascii\n```\n\n### Validation\n`zsim-cli validate [ZCODE]`\n#### --json / --no-json\nType: `Boolean`\nDefault: `False`\n\nIf the flag is set, the output will be in JSON format.<br />\nThe JSON schema is `{ \"success\": <boolean>, \"message\": \"<string>\" }`.\n\nExamples:\n```bash\n# Validate code in JSON\nzsim-cli validate \"LIT 7; PRT;\" --json\n```\n```bash\n# Pipe output to a JSON parser like jq for powerful postprocessing!\nzsim-cli validate \"LIT 7; PRT;\" --json | jq -r .message\n```\n\n#### -i, --input FILENAME\nType: `String`\nDefault: `None`\n\nSet an input file to read the Z-Code from. `-` will use the stdin.\n>If you're using Windows, remember that the default `cmd.exe` requires two EOF characters followed by return (see examples).\n\nExamples:\n```bash\n# Validate file programs/test.zc\nzsim-cli validate -i programs/test.zc\n```\n```bash\n# Validate from stdin\nzsim-cli validate -i -\nLIT 7;\nPRT;\n# Windows\n^Z <ENTER>\n^Z <ENTER>\n# Unix or MacOS\n^D^D\n```\n\n#### --encoding TEXT\nType: `String`\nDefault: `\"utf_8\"`\n\nEncoding to use when opening files with `-i, --input`.<br />\nRefer to the [Python docs](https://docs.python.org/3/library/codecs.html#standard-encodings) for possible values.\n\nExamples:\n```bash\n# Use ASCII encoding\nzsim-cli validate -i ascii_encoded.zc --encoding ascii\n```\n\n### Simulating\n`zsim-cli run [ZCODE]`\n#### --json / --no-json\nType: `Boolean`\nDefault: `False`\n\nIf the flag is set, the output will be in JSON format.<br />\nThis flag is **not compatible** with `--step`!<br />\nThe JSON schema is either `{ \"success\": <boolean>, \"message\": \"<string>\" }` for invalid zcode or <br />\n```json\n{\n    \"success\": true,\n    \"instruction_set\": \"<z|zfp|zds|zfpds>\",\n    \"initial_memory\": { \"...\" },\n    \"code\": \"...\",\n    \"final_state\": {\n        \"m\": 1,\n        \"d\": [],\n        \"b\": [],\n        \"h\": {},\n        \"o\": \"\",\n    },\n    \"states\": [\n        {\n            \"state\": { \"Same as final_state\" },\n            \"next_instruction\": {\n                \"command\": \"...\",\n                \"mnemonic\": \"...\",\n                \"parameters\": [ 1, 2, 3 ],\n            },\n        },\n        \"...\"\n    ],\n}\n```\nwhen the execution was successful.\n\nExamples:\n```bash\n# Run code and output information about the states in JSON\nzsim-cli run \"LIT 7; PRT;\" --json\n```\n```bash\n# Pipe output to a JSON parser like jq for powerful postprocessing!\nzsim-cli run \"LIT 7; PRT;\" --json | jq -r .final_state.o\n```\n\n#### -i, --input FILENAME\nType: `String`\nDefault: `None`\n\nSet an input file to read the Z-Code from. `-` will use the stdin.\n>If you're using Windows, remember that the default `cmd.exe` requires two EOF characters followed by return (see examples).\n\nExamples:\n```bash\n# Run file programs/test.zc\nzsim-cli run -i programs/test.zc\n```\n```bash\n# Run from stdin\nzsim-cli run -i -\nLIT 7;\nPRT;\n# Windows\n^Z <ENTER>\n^Z <ENTER>\n# Unix or MacOS\n^D^D\n```\n\n#### --encoding TEXT\nType: `String`\nDefault: `\"utf_8\"`\n\nEncoding to use when opening files with `-i, --input`.<br />\nRefer to the [Python docs](https://docs.python.org/3/library/codecs.html#standard-encodings) for possible values.\n\nExamples:\n```bash\n# Use ASCII encoding\nzsim-cli run -i ascii_encoded.zc --encoding ascii\n```\n\n#### -h, --memory TEXT\nType: `String`\nDefault: `\"[]\"`\n\nOptionally overwrite the memory configuration for the executing code.<br />\nThe format is `[ <addr>/<value>, ... ]`.<br />\n<!--Many -h or --memory can be used.-->\n\nExamples:\n```bash\n# 10 + 5\nzsim-cli run \"LOD 1; LOD 2; ADD;\" -h \"[1/10, 2/5]\"\n```\n\n#### --instructionset\nType: `String`\nDefault: `\"zfpds\"`\n\nSet the instruction set. Each instruction set has different available instructions to use.<br />\nFor example `LODI` comes from `zds`, while `LODLOCAL` is defined in `zfp`.<br />\nWhen you are unsure, stick with `zfpds` where all instructions are available.\n\nExamples:\n```bash\n# Use a specific instruction-set\nzsim-cli run \"LIT 7; LIT 3; ADD;\" --instructionset \"z\"\n```\n\n#### --step / --no-step\nType: `Boolean`\nDefault: `False`\n\nIf this flag is set, the execution will ask for confirmation after each step of the execution.<br />\nThis flag is **not compatible** with `--json` or `--full-output`!<br />\n\nExamples:\n```bash\n# Go through Z-Code instruction by instruction\nzsim-cli run \"LIT 7; POP;\" --step\n```\n\n#### --format\nType: `String`\nDefault: `\"({m}, {d}, {b}, {h}, {o})\"`\n\nThe `--format` option allows you to customize the regular output of the simulation.\n\nAvailable placeholders:\n - `{m}` = instruction counter\n - `{d}` = data stack\n - `{b}` = procedure stack\n - `{h}` = heap memory\n - `{o}` = output\n\nExamples:\n```bash\n# Use less components from the machine. This will yield \"m: 5, h: [1/7], output: '7'\"\nzsim-cli run \"LIT 7; STO 1; LOD 1; PRT;\" --format \"m: {m}, h: {h}, output: '{o}'\"\n```\n\n#### --full-output / --no-full-output\nType: `Boolean`\nDefault: `False`\n\nIf this flag is given, all states are printed on the standard output.<br />\n`--step` will ignore this option.\n\nExamples:\n```bash\n# This will print all five states on the standard output\nzsim-cli run \"LIT 7; STO 1; LOD 1; PRT;\" --full-output\n```\n\n#### -it, --interactive / --no-interactive\nType: `Boolean`\nDefault: `False`\n\nUse this flag to start a Z-Code interpreter.<br />\nOnly `--format`, `--instructionset` and `-h, --memory` are compatible with this option.\n\nExamples:\n```bash\nzsim-cli run -it\n```\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n\n### Using interactive mode\n\nWith `zsim-cli run -it` you can start an interactive interpreter to execute Z-Code line by line.\n\n[![zsim-cli interactive mode Demo][zsim-interactive-demo]](https://gitlab.com/justin_lehnen/zsim-cli)\n\nUsing the interactive mode might present you with difficulties when using jumps or function calls.\n\nThe following code will **not** work in interactive mode:\n```\nLIT 6;\nCALL(increment, 1,);\nHALT;\nincrement: LODLOCAL 1;\nLIT 1;\nADD;\nRET;\n```\n`CALL(increment, 1,);` will fail since `increment` is not defined until later.<br />\nTo circumvent this issue two special commands have been added: `#noexec` and `#exec`.\n\nThese commands push and pop frames in which commands are not directly executed but parsed and saved.\nThe following example does the same as the Z-Code above, but uses `#noexec` and `#exec`:\n```\n> LIT 6;\n> #noexec\n#> f: LODLOCAL 1;\n#> LIT 1;\n#> ADD;\n#> RET;\n#> #exec\n> CALL(f, 1,);\n```\n>Note the `#` in front of the prompt that tell how many `#noexec` frames are running.\n\nYou are not limited to defining functions that way either! The next example uses `#noexec` differently:\n```\n> #noexec          \n#> add_and_sto: ADD;\n#> STO 1;\n#> HALT;     \n#> #exec           \n> LIT 4;           \n> LIT 1;\n> JMP add_and_sto;\n> LOD 1;\n> PRT;\n```\nIn the standard simulation mode `HALT` would jump after `PRT` but since the last typed command was `JMP add_and_sto;` it will jump continue right after the instruction we just sent off!<br />\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n<!-- ROADMAP -->\n## Roadmap\n\n- [x] Code execution\n- [x] Memory allocation in code\n- [x] Comments\n- [x] Interactive mode\n- [ ] Better -h, --memory parsing\n- [ ] Error handling\n- [ ] More instruction sets\n- [ ] Documentation\n- [ ] More sample programs\n\n\nSee the [open issues](https://gitlab.com/justin_lehnen/zsim-cli/issues) for a full list of proposed features (and known issues).\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n\n\n<!-- CONTRIBUTING -->\n## Contributing\n\nContributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.\n\nIf you have a suggestion that would make this better, please fork the repo and create a merge request. You can also simply open an issue with the label \"enhancement\".\nDon't forget to give the project a star! Thanks again!\n\n1. Fork the project\n1. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n1. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n1. Use pytest to run unit tests (`pytest`)\n1. Push to the branch (`git push origin feature/AmazingFeature`)\n1. Open a merge request\n\n### Codestyle\n\n* Four space indentation\n* One class per file\n* Variables and functions are written in **snake_case**\n* Class names are written in **PascalCase**\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n\n\n<!-- LICENSE -->\n## License\n\nDistributed under the Unlicense license. See [LICENSE][license-url] for more information.\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n\n\n<!-- CONTACT -->\n## Contact\n\nJustin Lehnen - justin.lehnen@alumni.fh-aachen.de - justin.lehnen@gmx.de\n\nProject Link: [https://gitlab.com/justin_lehnen/zsim-cli](https://gitlab.com/justin_lehnen/zsim-cli)\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n\n\n<!-- ACKNOWLEDGMENTS -->\n## Acknowledgments\n\n* [Aachen University of Applied Sciences](https://www.fh-aachen.de/en/)\n* [Choose an Open Source License](https://choosealicense.com)\n* [GitHub Emoji Cheat Sheet](https://www.webpagefx.com/tools/emoji-cheat-sheet)\n* [Img Shields](https://shields.io)\n\n<div align=\"right\">(<a href=\"#top\">back to top</a>)</div>\n\n\n\n<!-- MARKDOWN LINKS & IMAGES -->\n<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->\n[issues-url]: https://gitlab.com/justin_lehnen/zsim-cli/issues\n[license-url]: https://gitlab.com/justin_lehnen/zsim-cli/blob/main/LICENSE\n[zsim-screenshot]: images/screenshot.png\n[zsim-demo]: images/demo.gif\n[zsim-interactive-demo]: images/interactive.gif\n[zsim-termux-screenshot]: images/termux.png\n[zcode-syntax-highlighting]: images/syntax_highlighting.png\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/justin_lehnen/zsim-cli",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zsim-cli",
    "package_url": "https://pypi.org/project/zsim-cli/",
    "platform": "",
    "project_url": "https://pypi.org/project/zsim-cli/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/justin_lehnen/zsim-cli/issues",
      "Homepage": "https://gitlab.com/justin_lehnen/zsim-cli"
    },
    "release_url": "https://pypi.org/project/zsim-cli/0.6.1/",
    "requires_dist": [
      "click (>=5.1)",
      "pytest"
    ],
    "requires_python": ">=3.6",
    "summary": "A simulator for an assembly like toy-language.",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12111752,
  "releases": {
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a2521dbc3e35306a9ccf22b89380da7410379fd48c5b9040e8be0d9e68e8fd9",
          "md5": "d92d88e222b463af3f53d32aaad8e0be",
          "sha256": "2ca43f1011dca1b07e26b195e3851566758654554e3ca982364db196783ea909"
        },
        "downloads": -1,
        "filename": "zsim_cli-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d92d88e222b463af3f53d32aaad8e0be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22487,
        "upload_time": "2021-11-24T10:48:35",
        "upload_time_iso_8601": "2021-11-24T10:48:35.305300Z",
        "url": "https://files.pythonhosted.org/packages/6a/25/21dbc3e35306a9ccf22b89380da7410379fd48c5b9040e8be0d9e68e8fd9/zsim_cli-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fbb23a394cbb886cc06e3f9e5bc526e6d3b61516676cb899c89d958e8226f3d",
          "md5": "5fa325c4b902fc2dd3433b14d8a1d152",
          "sha256": "5ea75e460939078d30bf7d680b70258837f7102aa1836201978bbbdfc6dc44b0"
        },
        "downloads": -1,
        "filename": "zsim-cli-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5fa325c4b902fc2dd3433b14d8a1d152",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22271,
        "upload_time": "2021-11-24T10:48:37",
        "upload_time_iso_8601": "2021-11-24T10:48:37.019758Z",
        "url": "https://files.pythonhosted.org/packages/5f/bb/23a394cbb886cc06e3f9e5bc526e6d3b61516676cb899c89d958e8226f3d/zsim-cli-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a2521dbc3e35306a9ccf22b89380da7410379fd48c5b9040e8be0d9e68e8fd9",
        "md5": "d92d88e222b463af3f53d32aaad8e0be",
        "sha256": "2ca43f1011dca1b07e26b195e3851566758654554e3ca982364db196783ea909"
      },
      "downloads": -1,
      "filename": "zsim_cli-0.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d92d88e222b463af3f53d32aaad8e0be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22487,
      "upload_time": "2021-11-24T10:48:35",
      "upload_time_iso_8601": "2021-11-24T10:48:35.305300Z",
      "url": "https://files.pythonhosted.org/packages/6a/25/21dbc3e35306a9ccf22b89380da7410379fd48c5b9040e8be0d9e68e8fd9/zsim_cli-0.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fbb23a394cbb886cc06e3f9e5bc526e6d3b61516676cb899c89d958e8226f3d",
        "md5": "5fa325c4b902fc2dd3433b14d8a1d152",
        "sha256": "5ea75e460939078d30bf7d680b70258837f7102aa1836201978bbbdfc6dc44b0"
      },
      "downloads": -1,
      "filename": "zsim-cli-0.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5fa325c4b902fc2dd3433b14d8a1d152",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22271,
      "upload_time": "2021-11-24T10:48:37",
      "upload_time_iso_8601": "2021-11-24T10:48:37.019758Z",
      "url": "https://files.pythonhosted.org/packages/5f/bb/23a394cbb886cc06e3f9e5bc526e6d3b61516676cb899c89d958e8226f3d/zsim-cli-0.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}