{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Tycho\n[![Build Status](https://api.travis-ci.org/helxplatform/tycho.svg?branch=master)](https://travis-ci.org/heliumplusdatastage/tycho)\n\nTycho is an API, compiler, and executor for cloud native distributed systems.\n\n* A subset of [docker-compose](https://docs.docker.com/compose/) is the system specification syntax.\n* [Kubernetes](https://kubernetes.io/) is the first supported orchestrator.\n\n## Goals\n\n* **Application Simplity**: The Kubernetes API is reliable, extensive, and well documented. It is also large, complex, supports a range of possibilities greater than many applications need, and often requires the creation and control of many objects to execute comparatively simple scenarios. Tycho bridges the simplicity of Compose to the richness of the Kubernetes' architecture.\n* **Microservice**: We wanted an end to end Python 12-factory style OpenAPI microservice that fits seamlessly into a Python ecosystem (which is why we did not use the excellent Kompose tool as a starting point).\n* **Lifecycle Management**: Tycho treats distributed systems as programs whose entire lifecycle can be programmatically managed via an API.\n* **Pluggable Orchestrators**: The Tycho compiler abstracts clients from the orchestrator. It creates an abstract syntax tree to model input systems and generates orchestrator specific artifacts.\n* **Policy**: Tycho now generates network policy configurations governing the ingress and egress of traffic to systems. We anticipate generalizing the policy layer to allow security and other concerns to be woven into a deployment dynamically.\n\n## Prior Art\n\nThis work relies on these foundations:\n* **[PIVOT](https://renci.org/wp-content/uploads/2019/02/Cloud_19.pdf)**: A cloud agnostic scheduler with an API for executing distributed systems.\n* **[Kubernetes](https://kubernetes.io/)**: Widely deployed, highly programmable, horizontally scalable container orchestration platform. \n* **[Kompose](https://docs.docker.com/compose/)**: Automates conversion of Docker Compose to Kubernetes. Written in Go, does not provide an API. Supports Docker Compose to Kubernetes only.\n* **[Docker](https://www.docker.com/)**: Pervasive Linux containerization tool chain enabling programmable infrastructure and portability.\n* **[Docker-compose](https://docs.docker.com/compose/)**: Syntax and tool chain for executing distributed systems of containers.\n* **Docker Swarm**: Docker only container orchestration platform with minimal adoption.\n\n## Development environment\n1. git clone https://github.com/helxplatform/tycho.git --branch branch_name\n2. python3 -m venv /path/to/venv - could be any path\n3. source /path/to/venv/bin/activate \n4. pip install -r /tycho/requirements.txt\n5. export PYTHONPATH={PYTHONPATH}:/path/to/tycho/\n5. python /tycho/tycho/api.py -d\n\n## Quick Start\nsamples/jupyter-ds/docker-compose.yaml:\n```\n---\n# Docker compose formatted system.\nversion: \"3\"\nservices:\n  jupyter-datascience:\n    image: jupyter/datascience-notebook\n    entrypoint: start.sh jupyter lab --LabApp.token=\n    ports:\n      - 8888:8888\n```\nIn one shell, run the API:\n```\n$ export PATH=~/dev/tycho/bin:$PATH\n$ tycho api --debug\n```\nIn another, launch three notebook instances.\n```\n$ export PATH=~/dev/tycho/bin:$PATH\n$ tycho up -f sample/jupyter-ds/docker-compose.yaml\nSYSTEM                         GUID                                PORT   \njupyter-ds                     909f2e60b83340cd905ae3865d461156    32693  \n$ tycho up -f sample/jupyter-ds/docker-compose.yaml\nSYSTEM                         GUID                                PORT   \njupyter-ds                     6fc07ab865d14c4c8fd2d6e0380b270e    31333\n$ tycho up -f sample/jupyter-ds/docker-compose.yaml\nSYSTEM                         GUID                                PORT   \njupyter-ds                     38f01c140f0141d9b4dc1baa33960362    32270\n```\nThen make a request to each instance to show it's running. It may take a moment for the instances to be ready, especially if you're pulling a container for the first time.\n```\n$ for p in $(tycho status | grep -v PORT | awk '{ print $4 }'); do \n   url=http://$(minikube ip):$p; echo $url; wget -q -O- $url | grep /title;\ndone\nhttp://192.168.99.111:32270\n  <title>JupyterLab</title>\nhttp://192.168.99.111:31333\n  <title>JupyterLab</title>\nhttp://192.168.99.111:32693\n  <title>JupyterLab</title>\n```\nDelete all running deployments.\n```\n$ tycho down $(tycho status --terse)\n38f01c140f0141d9b4dc1baa33960362\n6fc07ab865d14c4c8fd2d6e0380b270e\n909f2e60b83340cd905ae3865d461156\n```\nAnd show that they're gone\n```\n$ tycho status\nNone running\n```\n\n### Architecture\n![image](https://user-images.githubusercontent.com/306971/60749878-ada4fa00-9f6e-11e9-9fb8-d720cf78c41d.png)\n\n## Install\n\n* Install python 3.7.x or greater.\n* Create a virtual environment.\n* Install the requirements.\n* Start the server.\n\n```\npython3 -m venv environmentName\nsource environmentName/bin/activate\npip install -r requirements.txt\nexport PATH=<tycho-repo-dir>/bin:$PATH\ntycho api\n```\n\n### Usage - A. Development Environment Next to Minikube\n\nThis mode uses a local minikube instance with Tycho running outside of Minikube. This is the easiest way to add and test new features quickly.\n\nRun minikube:\n```\nminikbue start\n```\nRun the minikube dashboard:\n```\nminikube dashboard\n```\nRun the Tycho API:\n```\ncd tycho\nPYTHONPATH=$PWD/.. python api.py\n```\n\nLaunch the Swagger interface `http://localhost:5000/apidocs/`.\n![image](https://user-images.githubusercontent.com/306971/53313133-f1337d00-3885-11e9-8aea-83ab4a92807e.png)\n\nUse the Tycho CLI client as shown above or invoke the API.\n\n### Usage - B. Development Environment Within Minikube\n\nWhen we deploy Tycho into Minikube it is now able to get its Kubernetes API configuration from within the cluster.\n\nIn the repo's kubernetes directory, we define deployment, pod, service, clusterrole, and clusterrolebinding models for Tycho. The following interaction shows deploying Tycho into Minikube and interacting with the API.\n\nWe first deploy all Kubernetes Tycho-api artifacts into Minkube:\n```\n(tycho) [scox@mac~/dev/tycho/tycho]$ kubectl create -f ../kubernetes/\ndeployment.extensions/tycho-api created\npod/tycho-api created\nclusterrole.rbac.authorization.k8s.io/tycho-api-access created\nclusterrolebinding.rbac.authorization.k8s.io/tycho-api-access created\nservice/tycho-api created\n```\nThen we use the client as usual.\n\n### Usage - C. Within Google Kubernetes Engine from the Google Cloud Shell\n\nStarting out, Tycho's not running on the cluster:\n![image](https://user-images.githubusercontent.com/306971/60748993-b511d680-9f61-11e9-8851-ff75ca74d079.png)\n\nFirst deploy the Tycho API \n```\n$ kubectl create -f ../kubernetes/\ndeployment.extensions/tycho-api created\npod/tycho-api created\nclusterrole.rbac.authorization.k8s.io/tycho-api-access created\nclusterrolebinding.rbac.authorization.k8s.io/tycho-api-access created\nservice/tycho-api created\n```\n\nNote, here we've edited the Tycho service def to create the service as type:LoadBalancer for the purposes of a command line demo. In general, we'll access the service from within the cluster rather than exposing it externally.\n\nThat runs Tycho:\n![image](https://user-images.githubusercontent.com/306971/60748922-c73f4500-9f60-11e9-8d48-fb49902dc836.png)\n\nInitialize the Tycho API's load balancer IP and node port. \n```\n$ lb_ip=$(kubectl get svc tycho-api -o json | jq .status.loadBalancer.ingress[0].ip | sed -e s,\\\",,g)\n$ tycho_port=$(kubectl get service tycho-api --output json | jq .spec.ports[0].port)\n```\nLaunch an application (deployment, pod, service). Note the `--command` flag is used to specify the command to run in the container. We use this to specify a flag that will cause the notebook to start without prompting for authentication credentials.\n```\n$ PYTHONPATH=$PWD/.. python client.py --up -n jupyter-data-science-3425 -c jupyter/datascience-notebook -p 8888 --command \"start.sh jupyter lab --LabApp.token='\n'\"\n200\n{\n  \"status\": \"success\",\n  \"result\": {\n    \"containers\": {\n      \"jupyter-data-science-3425-c\": {\n        \"port\": 32414\n      }\n    }\n  },\n  \"message\": \"Started system jupyter-data-science-3425\"\n}\n```\nRefreshing the GKE cluster monitoring UI will now show the service starting:\n![image](https://user-images.githubusercontent.com/306971/60749371-15574700-9f67-11e9-81cf-77ccb6724a08.png)\n\nThen running\n![image](https://user-images.githubusercontent.com/306971/60749074-e8a13080-9f62-11e9-81d2-37f6cdbfc9dc.png)\n\nGet the job's load balancer ip and make a request to test the service.\n```\n$ job_lb_ip=$(kubectl get svc jupyter-data-science-3425 -o json | jq .status.loadBalancer.ingress[0].ip | sed -e s,\\\",,g)\n$ wget --quiet -O- http://$job_lb_ip:8888 | grep -i /title\n    <title>Jupyter Notebook</title>\n```\nFrom a browser, that URL takes us directly to the Jupyter Lab IDE:\n![image](https://user-images.githubusercontent.com/306971/60755934-dfe14680-9fc4-11e9-9d3b-d3f32539621d.png)\n\nAnd shut the service down:\n```\n$ PYTHONPATH=$PWD/.. python client.py --down -n jupyter-data-science-3425 -s http://$lb_ip:$tycho_port\n200\n{\n  \"status\": \"success\",\n  \"result\": null,\n  \"message\": \"Deleted system jupyter-data-science-3425\"\n}\n```\nThis removes the deployment, pod, service, and replicasets created by the launcher.\n\n### Client Endpoint Autodiscovery\n\nUsing the command lines above without the `-s` flag for server will work on GKE. That is, the client is created by first using the K8s API to locate the Tycho-API endpoint and port. It builds the URL automatically and creates a TychoAPI object ready to use.\n```\nclient_factory = TychoClientFactory ()\nclient = client_factory.get_client ()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/helxplatform/tycho.git",
    "keywords": "",
    "license": "",
    "maintainer": "Renci",
    "maintainer_email": "muralikarthik.k@renci.org",
    "name": "tycho-1",
    "package_url": "https://pypi.org/project/tycho-1/",
    "platform": "",
    "project_url": "https://pypi.org/project/tycho-1/",
    "project_urls": {
      "Homepage": "https://github.com/helxplatform/tycho.git"
    },
    "release_url": "https://pypi.org/project/tycho-1/1.0.0/",
    "requires_dist": [
      "Flask (==1.0.2)",
      "Flask-Cors (==3.0.7)",
      "Flask-RESTful (==0.3.7)",
      "Jinja2 (==2.10)",
      "MarkupSafe (==1.1.1)",
      "PyJWT (==1.7.1)",
      "PyYAML (==3.13)",
      "Werkzeug (==0.14.1)",
      "adal (==1.2.1)",
      "aniso8601 (==4.1.0)",
      "asn1crypto (==0.24.0)",
      "atomicwrites (==1.3.0)",
      "attrs (==18.2.0)",
      "bcrypt (==3.2.0)",
      "cached-property (==1.5.2)",
      "cachetools (==3.1.0)",
      "certifi (==2018.11.29)",
      "cffi (==1.14.3)",
      "chardet (==3.0.4)",
      "coverage (==5.3)",
      "cryptography (==2.5)",
      "docker (==3.7.3)",
      "docker-compose (==1.24.1)",
      "docker-pycreds (==0.4.0)",
      "dockerpty (==0.4.1)",
      "docopt (==0.6.2)",
      "flasgger (==0.9.2)",
      "gitdb (==4.0.5)",
      "gitpython (==3.1.11)",
      "google-auth (==1.6.3)",
      "gunicorn (==19.9.0)",
      "idna (==2.7)",
      "itsdangerous (==1.1.0)",
      "jsonschema (==2.6.0)",
      "kubernetes (==8.0.1)",
      "mistune (==0.8.4)",
      "more-itertools (==6.0.0)",
      "netifaces",
      "oauthlib (==3.0.1)",
      "paramiko (==2.7.2)",
      "pluggy (==0.9.0)",
      "py (==1.8.0)",
      "pyasn1 (==0.4.5)",
      "pyasn1-modules (==0.2.4)",
      "pycparser (==2.19)",
      "pynacl (==1.4.0)",
      "pyrsistent (==0.14.11)",
      "pytest (==4.3.0)",
      "pytest-cov (==2.7.1)",
      "pytest-mock (==1.10.4)",
      "python-dateutil (==2.8.0)",
      "pytz (==2018.9)",
      "requests (==2.20.1)",
      "requests-cache (==0.5.2)",
      "requests-oauthlib (==1.2.0)",
      "rsa (==4.0)",
      "six (==1.12.0)",
      "smmap (==3.0.4)",
      "texttable (==0.9.1)",
      "urllib3 (==1.24.1)",
      "websocket-client (==0.55.0)",
      "Click (==7.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Tycho is an API, compiler, and executor for cloud native distributed systems.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9200753,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bdda6c6e6e1b58c98e188a216af00e372a64949ce17a0d1f0230ea3c77fd409",
          "md5": "19fc8378375a6f5e867f579f9bde48b1",
          "sha256": "6136f36c3f0ed569e2784bbb895c27402c67721ee412cc61b0167d117d24f303"
        },
        "downloads": -1,
        "filename": "tycho_1-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19fc8378375a6f5e867f579f9bde48b1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 51649,
        "upload_time": "2021-01-22T05:26:35",
        "upload_time_iso_8601": "2021-01-22T05:26:35.319099Z",
        "url": "https://files.pythonhosted.org/packages/4b/dd/a6c6e6e1b58c98e188a216af00e372a64949ce17a0d1f0230ea3c77fd409/tycho_1-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eae0965b95f21fb574f68b5158f8020f70858e88cc4322b68bded6be71fe7be5",
          "md5": "eedfd96e72d6f202d6c87cb38c4b481e",
          "sha256": "c1eef1ab9cb88641a0ebbee427bdf2ffe8ae3480a8b37db75962b4466eb6d99a"
        },
        "downloads": -1,
        "filename": "tycho-1-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eedfd96e72d6f202d6c87cb38c4b481e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 38971,
        "upload_time": "2021-01-22T05:26:36",
        "upload_time_iso_8601": "2021-01-22T05:26:36.745440Z",
        "url": "https://files.pythonhosted.org/packages/ea/e0/965b95f21fb574f68b5158f8020f70858e88cc4322b68bded6be71fe7be5/tycho-1-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bdda6c6e6e1b58c98e188a216af00e372a64949ce17a0d1f0230ea3c77fd409",
        "md5": "19fc8378375a6f5e867f579f9bde48b1",
        "sha256": "6136f36c3f0ed569e2784bbb895c27402c67721ee412cc61b0167d117d24f303"
      },
      "downloads": -1,
      "filename": "tycho_1-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "19fc8378375a6f5e867f579f9bde48b1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 51649,
      "upload_time": "2021-01-22T05:26:35",
      "upload_time_iso_8601": "2021-01-22T05:26:35.319099Z",
      "url": "https://files.pythonhosted.org/packages/4b/dd/a6c6e6e1b58c98e188a216af00e372a64949ce17a0d1f0230ea3c77fd409/tycho_1-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eae0965b95f21fb574f68b5158f8020f70858e88cc4322b68bded6be71fe7be5",
        "md5": "eedfd96e72d6f202d6c87cb38c4b481e",
        "sha256": "c1eef1ab9cb88641a0ebbee427bdf2ffe8ae3480a8b37db75962b4466eb6d99a"
      },
      "downloads": -1,
      "filename": "tycho-1-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "eedfd96e72d6f202d6c87cb38c4b481e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 38971,
      "upload_time": "2021-01-22T05:26:36",
      "upload_time_iso_8601": "2021-01-22T05:26:36.745440Z",
      "url": "https://files.pythonhosted.org/packages/ea/e0/965b95f21fb574f68b5158f8020f70858e88cc4322b68bded6be71fe7be5/tycho-1-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}