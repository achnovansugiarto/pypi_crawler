{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": ".. -*- mode: rst -*-\n\n|Travis|_ |AppVeyor|_ |Codecov|_ |CircleCI|_ |ReadTheDocs|_\n\n.. |Travis| image:: https://travis-ci.org/scikit-learn-contrib/project-template.svg?branch=master\n.. _Travis: https://travis-ci.org/scikit-learn-contrib/project-template\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/coy2qqaqr1rnnt5y/branch/master?svg=true\n.. _AppVeyor: https://ci.appveyor.com/project/glemaitre/project-template\n\n.. |Codecov| image:: https://codecov.io/gh/scikit-learn-contrib/project-template/branch/master/graph/badge.svg\n.. _Codecov: https://codecov.io/gh/scikit-learn-contrib/project-template\n\n.. |CircleCI| image:: https://circleci.com/gh/scikit-learn-contrib/project-template.svg?style=shield&circle-token=:circle-token\n.. _CircleCI: https://circleci.com/gh/scikit-learn-contrib/project-template/tree/master\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/neuro-evolution/badge/?version=latest\n.. _ReadTheDocs: https://neuro-evolution.readthedocs.io/en/latest/?badge=latest\n\n\n\nsklearn-neuro-evolution\n============================================================\n\n\n.. _scikit-learn: https://scikit-learn.org\n.. _neat: http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf\n.. _wann: https://weightagnostic.github.io/\n\n\n\nNEAT_ is a method developed by Kenneth O. Stanley for evolving arbitrary neural networks. It's an established topology search algorithm notable for its ability to optimize the weights and structure of networks simultaneously\n\n\nWeight Agnostic Neural Networks (WANN_) is a method developed by Adam Gaier and David Ha in 2019. The algorithm is inspired by NEAT and focuses on evolving only the topology of the neural network without evolving the weights. It is a search method for topologies that can perform a task without explicit weight training. The end result is a minimal neural network topology where with a single shared weight parameter.\n\n\n.. _sklearn-neuro-evolution: https://pypi.org/project/sklearn-neuro-evolution/\n.. _neat-python: https://github.com/CodeReclaimers/neat-python\n.. _weight-agnostic-neural-networks: https://github.com/google/brain-tokyo-workshop/tree/master/WANNRelease\n\nsklearn-neuro-evolution_ package is based on a pure python implementation of NEAT called neat-python_ with the addition\nof weight agnostic neural networks that are based on weight-agnostic-neural-networks_. It is compatible to use in the\nScikit-learn ecosystem\n\nInstallation\n============================================================\n\n.. code-block:: python\n\n    pip install sklearn-neuro-evolution\n\nNEAT Regression Example\n============================================================\n\n.. code-block:: python\n\n    \"\"\"\n    ============================\n    # Simple XOR regression example\n    ============================\n\n    An example of :class:`neuro_evolution._neat.NEATRegressor`\n    \"\"\"\n    from sklearn.metrics import r2_score, mean_squared_error\n    import numpy as np\n    from neuro_evolution import NEATRegressor\n\n    x_train = np.array([\n                        [0, 0],\n                        [1, 1],\n                        [1, 0],\n                        [0, 1],\n    ])\n    y_train = np.logical_xor(x_train[ :, 0 ] > 0.5, x_train[ :, 1 ] > 0.5).astype(int)\n\n    x_test = np.array([[0, 1], [1, 0], [1, 1], [0, 0]])\n    y_test = np.array([1, 1, 0, 0])\n\n    # #############################################################################\n    # Fit regression model\n    regr = NEATRegressor(number_of_generations=1000,\n                         fitness_threshold=0.95,\n                         pop_size=150,\n                         activation_mutate_rate=0.00,\n                         activation_default='sigmoid')\n    neat_genome = regr.fit(x_train, y_train)\n    print(\"Score\", neat_genome.score(x_test, y_test))\n\n    neat_predictions = neat_genome.predict(x_test)\n    print(\"R2 score: \", r2_score(y_test, neat_predictions))\n    print(\"MSE\", mean_squared_error(y_test, neat_predictions))\n\n\nNEAT Classification Example\n============================================================\n\n.. code-block:: python\n\n    \"\"\"\n    ============================\n    Plotting NEAT Classifier\n    ============================\n\n    An example plot of :class:`neuro_evolution._neat.NEATClassifier`\n    \"\"\"\n    from matplotlib import pyplot as plt\n    from sklearn.datasets import make_classification\n    from sklearn.metrics import classification_report\n    from sklearn.model_selection import train_test_split\n    from neuro_evolution import NEATClassifier\n\n    X, y = make_classification(n_features=2, n_redundant=0, n_informative=2,\n                               random_state=123, n_samples=200)\n\n    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25)\n\n    clf = NEATClassifier(number_of_generations=150,\n                         fitness_threshold=0.90,\n                         pop_size=150)\n\n    neat_genome = clf.fit(x_train, y_train)\n    y_predicted = neat_genome.predict(x_test)\n\n    fig = plt.figure()\n    ax = plt.axes(projection='3d')\n\n    # Data for three-dimensional scattered points\n    train_z_data = y_train\n    train_x_data = x_train[:, 1]\n    train_y_data = x_train[:, 0]\n    ax.scatter3D(train_x_data, train_y_data, train_z_data, c='Blue')\n\n    test_z_data = y_predicted\n    test_x_data = x_test[:, 1]\n    test_y_data = x_test[:, 0]\n    ax.scatter3D(test_x_data, test_y_data, test_z_data, c='Red')\n    ax.legend(['Actual', 'Predicted'])\n    plt.show()\n\n    print(classification_report(y_test, y_predicted))\n\n\nWANN Regression Example\n============================================================\n\n.. code-block:: python\n\n    \"\"\"\n    ============================\n    # Simple XOR regression example\n    ============================\n\n    An example of :class:`neuro_evolution._wann.WANNRegressor`\n    \"\"\"\n    from sklearn.metrics import r2_score, mean_squared_error\n    import numpy as np\n    from neuro_evolution import WANNRegressor\n\n    shared_weights = np.array((-2.0, -1.0, -0.5, 0.5, 1.0, 2.0))\n    num_of_shared_weights = len(shared_weights)\n    x_train = np.array([\n                        [0, 0],\n                        [1, 1],\n                        [1, 0],\n                        [0, 1],\n    ])\n    y_train = np.logical_xor(x_train[ :, 0 ] > 0.5, x_train[ :, 1 ] > 0.5).astype(int)\n\n    x_test = np.array([[0, 1], [1, 0], [1, 1], [0, 0]])\n    y_test = np.array([1, 1, 0, 0])\n\n    # #############################################################################\n    # Fit regression model\n    regr = WANNRegressor(single_shared_weights=shared_weights,\n                         number_of_generations=200,\n                         pop_size=150,\n                         activation_default='sigmoid',\n                         activation_options='sigmoid tanh gauss relu sin inv identity',\n                         fitness_threshold=0.92)\n\n    wann_genome = regr.fit(x_train, y_train)\n    print(\"Score: \", wann_genome.score(x_test, y_test))\n\n    wann_predictions = wann_genome.predict(x_test)\n    print(\"R2 score: \", r2_score(y_test, wann_predictions))\n    print(\"MSE\", mean_squared_error(y_test, wann_predictions))\n\nWANN Classification Example\n============================================================\n.. code-block:: python\n\n    \"\"\"\n    ============================\n    Plotting WANN Classifier\n    ============================\n\n    An example plot of :class:`neuro_evolution._wann.WANNClassifier`\n    \"\"\"\n    from matplotlib import pyplot as plt\n    from sklearn.datasets import make_classification\n    from sklearn.metrics import classification_report\n    from sklearn.model_selection import train_test_split\n    from neuro_evolution import WANNClassifier\n\n    X, y = make_classification(n_features=2, n_redundant=0, n_informative=2,\n                               random_state=123, n_samples=200)\n\n    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=123)\n\n    clf = WANNClassifier(single_shared_weights=[-2.0, -1.0, -0.5, 0.5, 1.0, 2.0],\n                         number_of_generations=150,\n                         pop_size=150,\n                         fitness_threshold=0.90,\n                         activation_default='relu')\n\n    wann_genome = clf.fit(x_train, y_train)\n    y_predicted = wann_genome.predict(x_test)\n\n    fig = plt.figure()\n    ax = plt.axes(projection='3d')\n\n    # Data for three-dimensional scattered points\n    train_z_data = y_train\n    train_x_data = x_train[:, 1]\n    train_y_data = x_train[:, 0]\n    ax.scatter3D(train_x_data, train_y_data, train_z_data, c='Blue')\n\n    test_z_data = y_predicted\n    test_x_data = x_test[:, 1]\n    test_y_data = x_test[:, 0]\n    ax.scatter3D(test_x_data, test_y_data, test_z_data, c='Red')\n    ax.legend(['Actual', 'Predicted'])\n    plt.show()\n\n    print(classification_report(y_test, y_predicted))",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/MarkoMlakar/sklearn-neuro-evolution/releases/tag/v1.2.2",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MarkoMlakar/sklearn-neuro-evolution",
    "keywords": "",
    "license": "new BSD",
    "maintainer": "M. Mlakar",
    "maintainer_email": "markomlakar2@gmail.com",
    "name": "sklearn-neuro-evolution",
    "package_url": "https://pypi.org/project/sklearn-neuro-evolution/",
    "platform": "",
    "project_url": "https://pypi.org/project/sklearn-neuro-evolution/",
    "project_urls": {
      "Download": "https://github.com/MarkoMlakar/sklearn-neuro-evolution/releases/tag/v1.2.2",
      "Homepage": "https://github.com/MarkoMlakar/sklearn-neuro-evolution"
    },
    "release_url": "https://pypi.org/project/sklearn-neuro-evolution/1.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "scikit-learn compatible package for neuro evolution.",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8614976,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3d4d9c5a606b58d066782e51a291be6ba924ceafb714f2622da2fb37195d246",
          "md5": "abc12cee3a16c3c4768c05f4a73f9c35",
          "sha256": "302934d6c972aa53b69974e15497721a7e8ddfd970233e039ecfde20bb1da880"
        },
        "downloads": -1,
        "filename": "sklearn-neuro-evolution-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "abc12cee3a16c3c4768c05f4a73f9c35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17934,
        "upload_time": "2020-10-14T14:39:28",
        "upload_time_iso_8601": "2020-10-14T14:39:28.554799Z",
        "url": "https://files.pythonhosted.org/packages/c3/d4/d9c5a606b58d066782e51a291be6ba924ceafb714f2622da2fb37195d246/sklearn-neuro-evolution-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "968914b0a7e5c01d1957efeb3bb428b90e2aa073a02970e3be10140c9bb06d80",
          "md5": "ad7832b4c26becbc0a8feec7491b131e",
          "sha256": "15fb499e6b4ad2f5751b83f5fa961d9a80fcc815e755518d58d9eae2c4ec0086"
        },
        "downloads": -1,
        "filename": "sklearn-neuro-evolution-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ad7832b4c26becbc0a8feec7491b131e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17932,
        "upload_time": "2020-10-14T14:51:34",
        "upload_time_iso_8601": "2020-10-14T14:51:34.794943Z",
        "url": "https://files.pythonhosted.org/packages/96/89/14b0a7e5c01d1957efeb3bb428b90e2aa073a02970e3be10140c9bb06d80/sklearn-neuro-evolution-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "654a43719e0570af602ab3c7d418f6439fb8338ce0134cbec987a44d190903d8",
          "md5": "d9781ebdb3fea2f2349be56d239300c5",
          "sha256": "6de4dba2bcb5a8b86e75b454f197b8856414b2f26382314bc52a2c93287acdb5"
        },
        "downloads": -1,
        "filename": "sklearn-neuro-evolution-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d9781ebdb3fea2f2349be56d239300c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16964,
        "upload_time": "2020-10-15T13:06:29",
        "upload_time_iso_8601": "2020-10-15T13:06:29.810291Z",
        "url": "https://files.pythonhosted.org/packages/65/4a/43719e0570af602ab3c7d418f6439fb8338ce0134cbec987a44d190903d8/sklearn-neuro-evolution-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df77cc66cc4e22c8f070b5c85cbd5995eec7c0ce9ee21683be7690ed1c5953d8",
          "md5": "5d08518a82cc6379c7be94817a078cd8",
          "sha256": "3ed2d28fca4e7e70b929badbfeaf819fbef1b8264985b7410bd342561d78a9ce"
        },
        "downloads": -1,
        "filename": "sklearn-neuro-evolution-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5d08518a82cc6379c7be94817a078cd8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19973,
        "upload_time": "2020-11-09T15:40:21",
        "upload_time_iso_8601": "2020-11-09T15:40:21.266779Z",
        "url": "https://files.pythonhosted.org/packages/df/77/cc66cc4e22c8f070b5c85cbd5995eec7c0ce9ee21683be7690ed1c5953d8/sklearn-neuro-evolution-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df77cc66cc4e22c8f070b5c85cbd5995eec7c0ce9ee21683be7690ed1c5953d8",
        "md5": "5d08518a82cc6379c7be94817a078cd8",
        "sha256": "3ed2d28fca4e7e70b929badbfeaf819fbef1b8264985b7410bd342561d78a9ce"
      },
      "downloads": -1,
      "filename": "sklearn-neuro-evolution-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5d08518a82cc6379c7be94817a078cd8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19973,
      "upload_time": "2020-11-09T15:40:21",
      "upload_time_iso_8601": "2020-11-09T15:40:21.266779Z",
      "url": "https://files.pythonhosted.org/packages/df/77/cc66cc4e22c8f070b5c85cbd5995eec7c0ce9ee21683be7690ed1c5953d8/sklearn-neuro-evolution-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}