{
  "info": {
    "author": "AIST",
    "author_email": "contact@aist.science",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![AistNet](documentation/aist_net.svg)\n\n# AistNET\n\nAistNET (Aist neural network) is a framework for simplifying the creation and training of neural networks\nusing [Python 3.8](https://www.python.org/)\nand [Tensorflow (V. 2.5.0)](https://github.com/tensorflow/tensorflow/tree/v2.5.0) with maximum flexibility. In context\nof this tasks AistNET provides interfaces for creating, training and managing trainings of model and to abstracts\nbuildings block for reusability.\n\n## Current known issues\n\n* **Loading a model is currently only supported on Linux.**\n\n## Main features which are missing in TensorFlow but are available in AistNet\n\n* Create Model the way you like it: Function, Class Method, Sequential\n* Add custom functions and use them without any issue (except callbacks because\n  of [tensorflow:36635](https://github.com/tensorflow/tensorflow/pull/36635) issue)\n* Automatic saving of all relevant information\n  * Model: H5 and ProtoBuf version and as JSON definition\n  * System: from TensorFlow version to used callbacks\n  * Custom functions are saved along with the model and the system\n* Restore where you stopped and resume the training including custom functions\n\n## Getting Started\n\nTo install the current release use pip:\n\n```pip\npip install aistnet\n```\n\nTo update AistNET to the latest version, add `--upgrade` flag to the above command.\n\nTo create your first model such as a Dense-Net or U-NET using AistNET follow the examples:\n\n### With Sequential Model\n\n```python\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom aistnet.core.builder import ModelBuilder\n\nlinear = Sequential([\n  layers.Dense(2, activation=\"relu\", name=\"layer1\"),\n  layers.Dense(3, activation=\"relu\", name=\"layer2\")\n])\ndims = (28,)\noptimizer = Adam()\nloss = BinaryCrossentropy()\nbuilder = ModelBuilder(dimension=dims, model=linear,\n                       optimizer=optimizer, loss=loss)\nmodel = builder.finalize()\n```\n\n### With Builder Function\n\n```python\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom aistnet.core.builder import ModelBuilder\nfrom aistnet.architectures.unet import cnn_2d_auto_encoder_with_skip\n\ndims = [240, 224, 1]\nbuilder_function = cnn_2d_auto_encoder_with_skip(blocks=2)\noptimizer = Adam()\nloss = BinaryCrossentropy()\nbuilder = ModelBuilder(dimension=dims, builder=builder_function,\n                       optimizer=optimizer, loss=loss)\nmodel = builder.finalize()\n```\n\nThe model can now be trained normally via the TensorFlow api.\n\n### Train your model with the Trainer and use the automatic tracing and saving capabilities:\n\nAfter creation, you can train the model as usually:\n\n```python\nimport tempfile\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom aistnet.core.builder import ModelBuilder\nfrom aistnet.core.trainer import Trainer\n\nlinear = Sequential([\n  layers.Dense(2, activation=\"relu\", name=\"layer1\"),\n  layers.Dense(3, activation=\"relu\", name=\"layer2\")\n])\ndims = (28,)\noptimizer = Adam()\nloss = BinaryCrossentropy()\nbuilder = ModelBuilder(dimension=dims, model=linear,\n                       optimizer=optimizer, loss=loss)\ntrainer = Trainer(builder=builder, store_path=tempfile.TemporaryDirectory().name)\ntrainer.fit(\n  x=tf.convert_to_tensor([1, 2, 3, 4, 5]),\n  y=tf.convert_to_tensor([2, 3, 4, 5, 6]),\n  batch_size=16,\n  epochs=10,\n  validation_data=(\n    tf.convert_to_tensor([1, 2, 3, 4, 5]),\n    tf.convert_to_tensor([2, 3, 4, 5, 6]),\n  ),\n)\n```\n\nThis runs the training of the model but also saves metric information, and the model itself to the file system.\n\nFinally, the model can be used or restored like this:\n\n```python\nimport tempfile\nimport tensorflow as tf\nfrom aistnet.core.trainer import Trainer\n\nbuilder, trainer = Trainer.load(tempfile.TemporaryDirectory().name)\ntrainer.fit(\n  x=tf.convert_to_tensor([1, 2, 3, 4, 5]),\n  y=tf.convert_to_tensor([2, 3, 4, 5, 6]),\n  batch_size=16,\n  epochs=20,\n  initial_epoch=10,\n  validation_data=(\n    tf.convert_to_tensor([1, 2, 3, 4, 5]),\n    tf.convert_to_tensor([2, 3, 4, 5, 6]),\n  ),\n)\n```\n\n### Use your own loss function\n\nAistNET lets you create or own loss function and other custom implementations. It tries to automatically locate them and\nto save them along with the model and the configuration. Further it restores the custom implementations with the loading\nof a saved state.\n\n```python\nfrom typing import Tuple\nimport tempfile\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import Input, Dense\n\nfrom aistnet.core.builder import ModelBuilder\nfrom aistnet.core.trainer import Trainer\n\nstore_path = tempfile.TemporaryDirectory().name\ndims = (1,)\noptimizer = \"adam\"\nmetrics = [\"accuracy\"]\n\n\ndef loss(y_true: tf.Tensor, y_pred: tf.Tensor) -> tf.Tensor:\n  return (y_true - y_pred) ** 2\n\n\ndef build(dimension: Tuple[int]) -> Tuple[layers.Layer, layers.Layer]:\n  in_ = Input(shape=dimension)\n  d1 = Dense(12, activation=\"relu\")(in_)\n  d2 = Dense(8, activation=\"relu\")(d1)\n  d3 = Dense(1)(d2)\n  return in_, d3\n\n\nbuilder = ModelBuilder(\n  builder=build, dimension=dims, optimizer=optimizer, loss=loss, metrics=metrics\n)\ntrainer = Trainer(builder=builder, store_path=store_path)\n# train and save the state\ntrainer.fit(\n  x=tf.convert_to_tensor([1, 2, 3, 4, 5]),\n  y=tf.convert_to_tensor([2, 3, 4, 5, 6]),\n  batch_size=16,\n  epochs=10,\n  validation_data=(\n    tf.convert_to_tensor([1, 2, 3, 4, 5]),\n    tf.convert_to_tensor([2, 3, 4, 5, 6]),\n  ),\n)\n\n# load the previous state and continue training in a new session\nbuilder_new, trainer_new = Trainer.load(store_path)\nx_true = tf.convert_to_tensor([[1.0]])\nx_pred = tf.convert_to_tensor([[1.0]])\n# check the reconstucted custom loss function and the previous epoch state\nprint(builder_new.loss(x_true, x_pred) == loss(x_true, x_pred))\nprint(trainer_new.run_metadata[\"epochs\"] == 10)\n\nbuilder_new.model.fit(\n  x=tf.convert_to_tensor([1, 2, 3, 4, 5]),\n  y=tf.convert_to_tensor([2, 3, 4, 5, 6]),\n  batch_size=16,\n  epochs=20,\n  initial_epoch=10,\n  validation_data=(\n    tf.convert_to_tensor([1, 2, 3, 4, 5]),\n    tf.convert_to_tensor([2, 3, 4, 5, 6]),\n  ),\n)\n```\n\n## FAQ\n\n1. Why another Tensorflow wrapper?\n\nThe reason for AistNET is the simplification of neural networks. It provides functionality to build, parameterize and\ntrain models with any architecture. The model can be customized in every way.\n\n2. Is there a possibility to use AistNET with other frameworks like [PyTorch](https://pytorch.org/)?\n\nNo currently, AistNET only supports Tensorflow. If you want to use PyTorch we\nrecommend [PyTorch Lightning](https://github.com/PyTorchLightning/pytorch-lightning), which follows a similar wrapping\nphilosophy.\n\n3. Does AistNET support any other model architectures?\n\nFor the moment AistNET has a builder function for U-Nets with skip layers. But we are going to extend AistNET step by\nstep.\n\n## Contributing\n\n**First make sure to read our general [contribution guidelines](https://fhooeaist.github.io/CONTRIBUTING.html).**\n\nIn addition to that, the following applies to this repository:\n\n- Due to the focus on performance dependencies (except as bridges to other loggers) are not allowed. IF you have a very\n  good reason to add a dependency please state so in the corresponding issue / pull request.\n\n## Licence\n\nCopyright (c) 2020 the original author or authors. DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not\ndistributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.\n\n## Research\n\nIf you are going to use this project as part of a research paper, we would ask you to reference this project by citing\nit.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FHOOEAIST/aistnet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aistnet",
    "package_url": "https://pypi.org/project/aistnet/",
    "platform": "",
    "project_url": "https://pypi.org/project/aistnet/",
    "project_urls": {
      "Bug Tracker": "https://github.com/FHOOEAIST/aistnet/issues",
      "Homepage": "https://github.com/FHOOEAIST/aistnet"
    },
    "release_url": "https://pypi.org/project/aistnet/1.0.0/",
    "requires_dist": [
      "tensorflow (>=2.4.0)",
      "numpy (==1.19.2)",
      "pandas (==1.3.0)",
      "dill (==0.3.4)"
    ],
    "requires_python": "<3.9",
    "summary": "AistNET is a framework for simplifying the creation and training of neural networks",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11150377,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "472d5db7f69cc93994bc88a21dd0e0f72233bdd479cb4ea3cf03ca57fc8ffd28",
          "md5": "8a754c41b4898e30c50b9141353ecc5d",
          "sha256": "6ac7a5742339fe67155d9268dff980b67ff1a0831ddff2890ccb0309e2b41e7f"
        },
        "downloads": -1,
        "filename": "aistnet-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a754c41b4898e30c50b9141353ecc5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.9",
        "size": 26158,
        "upload_time": "2021-08-11T13:41:04",
        "upload_time_iso_8601": "2021-08-11T13:41:04.342066Z",
        "url": "https://files.pythonhosted.org/packages/47/2d/5db7f69cc93994bc88a21dd0e0f72233bdd479cb4ea3cf03ca57fc8ffd28/aistnet-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bce7876b6f74e99105d1696c55bc2ae0fb45a5a066611c668419391d99e5a57",
          "md5": "0694514dcdd2d4d4e4f20d0a9d79c431",
          "sha256": "8828b6c9be2555b16408407b455dc5a1bcac7d3dc2e395ee9b5d94762f5fa413"
        },
        "downloads": -1,
        "filename": "aistnet-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0694514dcdd2d4d4e4f20d0a9d79c431",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<3.9",
        "size": 26009,
        "upload_time": "2021-08-11T13:41:06",
        "upload_time_iso_8601": "2021-08-11T13:41:06.356220Z",
        "url": "https://files.pythonhosted.org/packages/1b/ce/7876b6f74e99105d1696c55bc2ae0fb45a5a066611c668419391d99e5a57/aistnet-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "472d5db7f69cc93994bc88a21dd0e0f72233bdd479cb4ea3cf03ca57fc8ffd28",
        "md5": "8a754c41b4898e30c50b9141353ecc5d",
        "sha256": "6ac7a5742339fe67155d9268dff980b67ff1a0831ddff2890ccb0309e2b41e7f"
      },
      "downloads": -1,
      "filename": "aistnet-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a754c41b4898e30c50b9141353ecc5d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<3.9",
      "size": 26158,
      "upload_time": "2021-08-11T13:41:04",
      "upload_time_iso_8601": "2021-08-11T13:41:04.342066Z",
      "url": "https://files.pythonhosted.org/packages/47/2d/5db7f69cc93994bc88a21dd0e0f72233bdd479cb4ea3cf03ca57fc8ffd28/aistnet-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1bce7876b6f74e99105d1696c55bc2ae0fb45a5a066611c668419391d99e5a57",
        "md5": "0694514dcdd2d4d4e4f20d0a9d79c431",
        "sha256": "8828b6c9be2555b16408407b455dc5a1bcac7d3dc2e395ee9b5d94762f5fa413"
      },
      "downloads": -1,
      "filename": "aistnet-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0694514dcdd2d4d4e4f20d0a9d79c431",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<3.9",
      "size": 26009,
      "upload_time": "2021-08-11T13:41:06",
      "upload_time_iso_8601": "2021-08-11T13:41:06.356220Z",
      "url": "https://files.pythonhosted.org/packages/1b/ce/7876b6f74e99105d1696c55bc2ae0fb45a5a066611c668419391d99e5a57/aistnet-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}