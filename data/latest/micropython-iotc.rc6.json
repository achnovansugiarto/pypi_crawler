{
  "info": {
    "author": "Luca Druda",
    "author_email": "ludruda@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Azure IoTCentral SDK for MicroPython\n\n[![Join the chat at https://gitter.im/iotdisc/community](https://badges.gitter.im/iotdisc.svg)](https://gitter.im/iotdisc/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Licensed under the MIT License](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/iot-for-all/iotc-micropython-client/blob/master/LICENSE)\n[![PyPI version](https://badge.fury.io/py/micropython-iotc.svg)](https://badge.fury.io/py/micropython-iotc)\n\n### An Azure IoT Central device client library for Micropython.\nThis repository contains code for the Azure IoT Central SDK for Micropython. This enables micropython developers to easily create device solutions that semealessly connect to Azure IoT Central applications.\nIt can run on various boards with some tweaks for low-memory devices.\n\n\n## Prerequisites\n+ Micropython 1.12+ (recommended)\n\n## Import ``iotc``\nIn most of the micropython capable boards, is sufficient to import library or install it if missing through upip.\n\n```py\ntry:\n    import iotc\nexcept:\n    import upip\n    upip.install('micropython-iotc')\n    import iotc\n```\n\nThe same commands apply when running through Micropython REPL.\n\n> **NOTE:** for low-end devices like the **ESP8266**, importing as external module can cause out-of-memory exception during execution because of the limited amount of heap space.\nFor this kind of boards, putting the library on flash memory as a frozen module might be the only available option.<br/><br/>\nDetails on how to build a custom firmware for specific boards with frozen modules can be found on official micropython [github repository](https://github.com/micropython/micropython) and [website](http://docs.micropython.org/en/latest/).\n\n\n## Samples\nCheck out the [sample repository](samples) for example code showing how the SDK can be used in the various scenarios:\n\n\n## Connecting\nCurrently only connection through Shared Access Keys is supported.\nYou can use both device keys or group keys.\n\n### Init\n```py\nfrom iotc import IoTCConnectType\nid_scope = 'scopeID'\ndevice_id = 'device_id'\nsasKey = 'masterKey' # or use device key directly\nconn_type=IoTCConnectType.SYMM_KEY # or use DEVICE_KEY if working with device keys\nclient = IoTCClient(id_scope, device_id, conn_type, sasKey)\n```\n\nYou can pass a logger instance to have your custom log implementation. (see [#Logging](#logging))\n\ne.g.\n\n```py\nfrom iotc import ConsoleLogger,IoTCLogLevel\nlogger = ConsoleLogger(IoTCLogLevel.ALL)\nclient = IoTCClient(id_scope, device_id, conn_type, sasKey, logger)\n```\n\n### Connect\n\n```py\nclient.connect()\n```\nAfter successfull connection, IOTC context is available for further commands.\n\n## Operations\n\n### Send telemetry\n\n```py\nclient.send_telemetry(payload,properties=None)\n```\n\ne.g. Send telemetry every 3 seconds\n```py\nwhile client.is_connected():\n    print('Sending telemetry')\n    client.send_telemetry({'temperature':randint(0,20),'pressure':randint(0,20),'acceleration':{'x':randint(0,20),'y':randint(0,20)}})\n    sleep(3)\n```\nAn optional *properties* object can be included in the send methods, to specify additional properties for the message (e.g. timestamp,etc... ).\nProperties can be custom or part of the reserved ones (see list [here](https://github.com/Azure/azure-iot-sdk-csharp/blob/master/iothub/device/src/MessageSystemPropertyNames.cs#L36)).\n\n> **NOTE:** Payload content type and encoding are set by default to 'application/json' and 'utf-8'. Alternative values can be set using these functions:<br/>\n_iotc.set_content_type(content_type)_ # .e.g 'text/plain'\n_iotc.set_content_encoding(content_encoding)_ # .e.g 'ascii'\n\n### Send property update\n```py\nclient.send_property({'fieldName':'fieldValue'})\n```\n\n## Listen to events\nDue to limitations of the Mqtt library for micropython, you must explictely declare your will to listen for incoming messages. This client implements a non-blocking way of receiving messages so if no messages are present, it will not wait for them and continue execution.\n\nTo make sure your client receives all messages just call _listen()_ function in your main loop. Be aware that some sleeping time (200 ms +) is needed in order to let the underlying library listen for messages and release the socket.\n\n```py\nwhile client.is_connected():\n    client.listen() # listen for incoming messages\n    client.send_telemetry(...)\n    sleep(3)\n```\nYou also need to subscribe to specific events to effectively process messages, otherwise client would just skip them (see below).\n\n### Listen to properties update\nSubscribe to properties update event before calling _connect()_:\n```py\nclient.on(IoTCEvents.PROPERTIES, callback)\n```\nTo provide property sync aknowledgement, the callback must return the \nproperty value if has been successfully applied or nothing.\n\ne.g.\n```py\ndef on_props(prop_name, prop_value):\n    if prop_value>10:\n        # process property\n        return prop_value\n\nclient.on(IoTCEvents.PROPERTIES, on_props)\n```\n\n### Listen to commands\nSubscribe to command events before calling _connect()_:\n```py\nclient.on(IoTCEvents.COMMANDS, callback)\n```\nTo provide feedbacks for the command like execution result or progress, the client can call the **ack** function available in the callback.\n\nThe function accepts 2 arguments: the command instance and a custom response message.\n```py\ndef on_commands(command, ack):\n    print(command.name)\n    ack(command, 'Command received')\n\nclient.on(IoTCEvents.COMMANDS, on_commands)\n```\n\n## Logging\n\nThe default log prints to serial console operations status and errors.\nThis is the _API_ONLY_ logging level.\nThe function __set_log_level()__ can be used to change options or disable logs. It accepts a _IoTCLogLevel_ value among the following:\n\n-  IoTCLogLevel.DISABLED (log disabled)\n-  IoTCLogLevel.API_ONLY (information and errors, default)\n-  IoTCLogLevel.ALL (all messages, debug and underlying errors)\n\nThe device client also accepts an optional Logger instance to redirect logs to other targets than console.\nThe custom class must implement three methods:\n\n- info(message)\n- debug(message)\n- set_log_level(message);\n\n## Cache Credentials\nThe IoT Central device client accepts a storage manager to cache connection credentials. This allows to skip unnecessary device re-provisioning and requests to provisioning service.\nWhen valid credentials are present, device connects directly to IoT Central, otherwise it asks provisioning service for new credentials and eventually cache them.\n\nProvided class must have the following methods:\n\n```py\ndef retrieve(self):\n    # fetch credentials. return a Credentials object\n\ndef persist(self, credentials):\n    # save credentials object\n```\n\n## One-touch device provisioning and approval\nA device can send custom data during provision process: if a device is aware of its IoT Central template Id, then it can be automatically provisioned.\n\n### How to set IoTC template ID in your device\nDevice template id (a.k.a Model Id) is used when obtaining authorization codes for new devices and automatically assign them to the right template. By providing template id during credentials generation, user doesn't need to manually migrate or assign device from IoT Central site.\n\nIn order to get the unique identifier, open configuration page for required model under \"Device templates\" section.\n![Img](https://github.com/iot-for-all/iotc-micropython-client/tree/master/assets/modelId.png)\n\nClick on \"View Identity\" and in next screen copy model urn.\n![Img](https://github.com/iot-for-all/iotc-micropython-client/tree/master/assets/modelId_2.png)\n\n\nThen call this method before connect():\n\n```py\nclient.set_model_id(model_id)\n```\n\n### Automatic approval (default)\nBy default device auto-approval in IoT Central is enabled, which means that administrators don't need to approve device registration to complete the provisioning process when device is not already created.\n\n![Img](https://github.com/iot-for-all/iotc-micropython-client/tree/master/assets/auto_approval.jpg)\n\n### Manual approval\nIf auto-approval is disabled, administrators need to manually approve new devices.\nThis can be done from explorer page after selecting the device\n![Img](https://github.com/iot-for-all/iotc-micropython-client/tree/master/assets/manual_approval.jpg)\n\n## License\nThis samples is licensed with the MIT license. For more information, see [LICENSE](./LICENSE)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iot-for-all/iotc-micropython-client",
    "keywords": "",
    "license": "MIT",
    "maintainer": "IoT Central Developers",
    "maintainer_email": "",
    "name": "micropython-iotc",
    "package_url": "https://pypi.org/project/micropython-iotc/",
    "platform": "",
    "project_url": "https://pypi.org/project/micropython-iotc/",
    "project_urls": {
      "Homepage": "https://github.com/iot-for-all/iotc-micropython-client"
    },
    "release_url": "https://pypi.org/project/micropython-iotc/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Azure IoT Central client for MicroPython (mqtt protocol)",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9373155,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a48a9600dad360978a8cd6192a3e7b01ef22fc00c4c20248c9bb1c84d4418702",
          "md5": "1019b1777583b0d97486fce068b6dabf",
          "sha256": "60764e4526c64e06c889e7aa98f589e278c6325752183d49593a2f7a174d7224"
        },
        "downloads": -1,
        "filename": "micropython-iotc-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1019b1777583b0d97486fce068b6dabf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6862,
        "upload_time": "2020-07-28T16:00:21",
        "upload_time_iso_8601": "2020-07-28T16:00:21.702781Z",
        "url": "https://files.pythonhosted.org/packages/a4/8a/9600dad360978a8cd6192a3e7b01ef22fc00c4c20248c9bb1c84d4418702/micropython-iotc-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc1318bcf8753e3660af6e0712d3a9dae410644da11a17307f99828b419d6402",
          "md5": "0ebc0108a4832a8b018ef6109e7bc646",
          "sha256": "42e6a9e89cf81adb2f62039a0f779a276451476b357e089638d6cc661a7caa8d"
        },
        "downloads": -1,
        "filename": "micropython-iotc-1.0.2b1.tar.gz",
        "has_sig": false,
        "md5_digest": "0ebc0108a4832a8b018ef6109e7bc646",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 420,
        "upload_time": "2020-07-28T16:12:11",
        "upload_time_iso_8601": "2020-07-28T16:12:11.430096Z",
        "url": "https://files.pythonhosted.org/packages/bc/13/18bcf8753e3660af6e0712d3a9dae410644da11a17307f99828b419d6402/micropython-iotc-1.0.2b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0a78afed472ab9f1c8571bcf87f7e5bd4a2ca1db80240c4b5cea52037412646",
          "md5": "2e02b8a55e6389d9181e0aa703fa11b4",
          "sha256": "60afc02b5f0495be5b653539146055cc02899c9395b1493bed7dad4142f57f59"
        },
        "downloads": -1,
        "filename": "micropython-iotc-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2e02b8a55e6389d9181e0aa703fa11b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6767,
        "upload_time": "2020-07-29T10:37:35",
        "upload_time_iso_8601": "2020-07-29T10:37:35.598863Z",
        "url": "https://files.pythonhosted.org/packages/d0/a7/8afed472ab9f1c8571bcf87f7e5bd4a2ca1db80240c4b5cea52037412646/micropython-iotc-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf264825d9a096747429121cf5b4d06d40177e596ce4f5b1647745c77064ae23",
          "md5": "ba1d52aaa1ce0f669fcb39977fb640c2",
          "sha256": "544e87893036ece8fd49e99a0953fa855fb9acd210adef89537847e60080879e"
        },
        "downloads": -1,
        "filename": "micropython-iotc-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ba1d52aaa1ce0f669fcb39977fb640c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6834,
        "upload_time": "2020-07-29T14:21:05",
        "upload_time_iso_8601": "2020-07-29T14:21:05.439951Z",
        "url": "https://files.pythonhosted.org/packages/bf/26/4825d9a096747429121cf5b4d06d40177e596ce4f5b1647745c77064ae23/micropython-iotc-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8ff66254a7dd1d099bf14404e2732c8abd5a64f4994c08bc522314232ba4412",
          "md5": "24f08cc0802e22a914f70c2c04755288",
          "sha256": "eef13a5b412ead5c731c07259f58ea644862a848a093a0317f3f8cab56413bea"
        },
        "downloads": -1,
        "filename": "micropython-iotc-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "24f08cc0802e22a914f70c2c04755288",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9554,
        "upload_time": "2020-07-29T14:45:54",
        "upload_time_iso_8601": "2020-07-29T14:45:54.928501Z",
        "url": "https://files.pythonhosted.org/packages/c8/ff/66254a7dd1d099bf14404e2732c8abd5a64f4994c08bc522314232ba4412/micropython-iotc-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f92abc30d6ee3665ea68690695aee0e15118203a1643fc3fc180be7b72f893b5",
          "md5": "96d52a6500e58dd35f4adc2a45521129",
          "sha256": "271ddd1734c11e469164c22cc36513cd1905c8f8613988b20b236d8f6d7ed3cc"
        },
        "downloads": -1,
        "filename": "micropython-iotc-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "96d52a6500e58dd35f4adc2a45521129",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11545,
        "upload_time": "2021-02-10T10:43:02",
        "upload_time_iso_8601": "2021-02-10T10:43:02.475741Z",
        "url": "https://files.pythonhosted.org/packages/f9/2a/bc30d6ee3665ea68690695aee0e15118203a1643fc3fc180be7b72f893b5/micropython-iotc-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f92abc30d6ee3665ea68690695aee0e15118203a1643fc3fc180be7b72f893b5",
        "md5": "96d52a6500e58dd35f4adc2a45521129",
        "sha256": "271ddd1734c11e469164c22cc36513cd1905c8f8613988b20b236d8f6d7ed3cc"
      },
      "downloads": -1,
      "filename": "micropython-iotc-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "96d52a6500e58dd35f4adc2a45521129",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11545,
      "upload_time": "2021-02-10T10:43:02",
      "upload_time_iso_8601": "2021-02-10T10:43:02.475741Z",
      "url": "https://files.pythonhosted.org/packages/f9/2a/bc30d6ee3665ea68690695aee0e15118203a1643fc3fc180be7b72f893b5/micropython-iotc-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}