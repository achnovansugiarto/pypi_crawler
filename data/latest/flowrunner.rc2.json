{
  "info": {
    "author": "",
    "author_email": "Prithvijit Guha <prithvijit_guha2@hotmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# flowrunner: A lightweight Data Engineering/Science Flow package\n\n[![codecov](https://codecov.io/gh/prithvijitguha/FlowRunner/branch/main/graph/badge.svg?token=0B8X2WF0OA)](https://codecov.io/gh/prithvijitguha/FlowRunner)&nbsp;\n![build](https://github.com/prithvijitguha/FlowRunner/actions/workflows/build.yml/badge.svg?branch=main)&nbsp;\n![tests](https://github.com/prithvijitguha/FlowRunner/actions/workflows/tests.yml/badge.svg?branch=main)&nbsp;\n![documentation](https://github.com/prithvijitguha/FlowRunner/actions/workflows/docs.yml/badge.svg?branch=main)&nbsp;\n[![Documentation Status](https://readthedocs.org/projects/flowrunner/badge/?version=latest)](https://flowrunner.readthedocs.io/en/latest/?badge=latest)&nbsp;\n[![Python 3.8](https://img.shields.io/badge/python-3.8-%2334D058.svg)](https://www.python.org/downloads/release/python-380/)&nbsp;\n[![Python 3.9](https://img.shields.io/badge/python-3.9-%2334D058.svg)](https://www.python.org/downloads/release/python-390/)&nbsp;\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)&nbsp;\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)&nbsp;\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)\n\n## What is it?\n**flowrunner** is a lightweight package to organize and represent Data Engineering/Science workflows. Its designed to be\nintegrated with any pre-existing framework like pandas or PySpark\n\n## Main Features\n- Lazy evaluation of DAG: flowrunner does not force you to execute/run your dag until you want to, only run it when its explicitly mentioned as `run`\n- Easy syntax to build new Flows\n- Easy data sharing between methods in a `Flow` using attributes\n- Data store to store output of a function(incase it has `return`) for later\n- Param store to easily pass reusable parameters to `Flow`\n- Visualizing your flow as a DAG\n\n## Installing flowrunner\nTo install flowrunner, following commands will work\n\nSource code is hosted at https://github.com/prithvijitguha/flowRunner\n\n```sh\n$ pip install flowrunner\n```\n\nOr install from source\n```sh\n$ pip install git+https://github.com/prithvijitguha/flowrunner@main\n```\n\n\n## Usage\n\nHere is a quick example to run as is\n\n```python\n# example.py\nfrom flowrunner import BaseFlow, step, start, end\n\nclass ExampleFlow(BaseFlow):\n    @start\n    @step(next=['method2', 'method3'])\n    def method1(self):\n        self.a = 1\n\n    @step(next=['method4'])\n    def method2(self):\n        self.a += 1\n\n    @step(next=['method4'])\n    def method3(self):\n        self.a += 2\n\n    @end\n    @step\n    def method4(self):\n        self.a += 3\n        print(\"output of flow is:\", self.a)\n```\n\nYou can run the flow with the following command\n```console\n$ python -m flowrunner run example.py\noutput of flow is: 7\n```\n\nOr in a notebook/script like this:\n\n```python\nExampleFlow.run()\n```\n\n\n## Visualize Flow as DAG(Directed Acyclical Graph)\n\n```python\nExampleFlow().display()\n```\n\nYour output will look like this.\n\n![image](https://user-images.githubusercontent.com/71138854/227732793-d5ee52a5-a090-4b51-8b63-25e4af4909f2.png)\n\n\nOr can be run in cli like this:\n\n```sh\npython -m flowrunner display example.py\n```\n\n\nFor CLI usage we create a file called `exampleflow.html` in the current directory with the same output\n\n## Show your Flow\n\n```python\nExampleFlow().show()\n```\n\n```console\n2023-03-08 22:35:24 LAPTOP flowrunner.system.logger[12692] INFO Found flow ExampleFlow\n2023-03-08 22:35:24 LAPTOP flowrunner.system.logger[12692] DEBUG Validating flow for ExampleFlow\n✅ Validated number of start nodes\n✅ Validated start nodes 'next' values\n✅ Validate number of middle_nodes\n✅ Validated middle_nodes 'next' values\n✅ Validated end nodes\n✅ Validated start nodes 'next' values\n2023-03-08 22:35:24 LAPTOP  flowrunner.system.logger[12692] DEBUG Show flow for ExampleFlow\nmethod1\n\n?\n  Next=method2, method3\n\n\nmethod2\n\n?\n  Next=method4\n\n\nmethod3\n\n?\n  Next=method4\n```\n\nOr through CLI like below\n```console\npython -m flowrunner show example.py\n```\n\n## Pandas Example\n\n```python\n\n# -*- coding: utf-8 -*-\nimport pandas as pd\n\nfrom flowrunner import BaseFlow, end, start, step\n\n\nclass ExamplePandas(BaseFlow):\n    @start\n    @step(next=[\"transformation_function_1\", \"transformation_function_2\"])\n    def create_data(self):\n        \"\"\"\n        This method we create the dataset we are going use. In real use cases,\n        you'll have to read from a source (csv, parquet, etc)\n\n        For this example we create two dataframes for students ranked by marked scored\n        for when they attempted the example on 1st January 2023 and 12th March 2023\n\n        After creating the dataset we pass it to the next methods\n\n        - transformation_function_1\n        - transformation_function_2\n        \"\"\"\n        data1 = {\"Name\": [\"Hermione\", \"Harry\", \"Ron\"], \"marks\": [100, 85, 75]}\n\n        data2 = {\"Name\": [\"Hermione\", \"Ron\", \"Harry\"], \"marks\": [100, 90, 80]}\n\n        df1 = pd.DataFrame(data1, index=[\"rank1\", \"rank2\", \"rank3\"])\n\n        df2 = pd.DataFrame(data2, index=[\"rank1\", \"rank2\", \"rank3\"])\n\n        self.input_data_1 = df1\n        self.input_data_2 = df2\n\n    @step(next=[\"append_data\"])\n    def transformation_function_1(self):\n        \"\"\"\n        Here we add a snapshot_date to the input dataframe of 2023-03-12\n        \"\"\"\n        transformed_df = self.input_data_1\n        transformed_df.insert(1, \"snapshot_date\", \"2023-03-12\")\n        self.transformed_df_1 = transformed_df\n\n    @step(next=[\"append_data\"])\n    def transformation_function_2(self):\n        \"\"\"\n        Here we add a snapshot_date to the input dataframe of 2023-01-01\n        \"\"\"\n        transformed_df = self.input_data_2\n        transformed_df.insert(1, \"snapshot_date\", \"2023-01-01\")\n        self.transformed_df_2 = transformed_df\n\n    @step(next=[\"show_data\"])\n    def append_data(self):\n        \"\"\"\n        Here we append the two dataframe together\n        \"\"\"\n        self.final_df = pd.concat([self.transformed_df_1, self.transformed_df_2])\n\n    @end\n    @step\n    def show_data(self):\n        \"\"\"\n        Here we show the new final dataframe of aggregated data. However in real use cases. It would\n        be more likely to write the data to some final layer/format\n        \"\"\"\n        print(self.final_df)\n        return self.final_df\n```\n\nNow when you run `ExamplePandas().display()` you get the following output\n\n\n![image](https://user-images.githubusercontent.com/71138854/227732600-7bae5e21-3c9a-4ad9-85da-f926cded2636.png)\n\n\n## Documentation\nCheck out the latest documentation here: [FlowRunner documentation](https://flowrunner.readthedocs.io/en/latest/)\n\n## Contributing\nAll contributions are welcome :smiley:\n\nIf you are interested in contributing, please check out this page: [FlowRunner Contribution Page](https://flowrunner.readthedocs.io/en/latest/contributing_guide_code.html)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Data Engineering,Data Science",
    "license": "BSD 3-Clause License  Copyright (c) 2023, Prithvijit All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flowrunner",
    "package_url": "https://pypi.org/project/flowrunner/",
    "platform": null,
    "project_url": "https://pypi.org/project/flowrunner/",
    "project_urls": {
      "Documentation": "https://flowrunner.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/prithvijitguha/flowrunner",
      "Issues": "https://github.com/prithvijitguha/flowrunner/issues"
    },
    "release_url": "https://pypi.org/project/flowrunner/0.2.0/",
    "requires_dist": [
      "requests",
      "click (>=8.1.3)",
      "Jinja2 (>=3.1.2)",
      "coloredlogs (>=15.0.1)",
      "ipython (>=8.11.0)",
      "matplotlib (>=3.7.1)",
      "importlib-metadata ; python_version <= \"3.8\"",
      "click (>=8.1.3) ; extra == 'dev'",
      "Jinja2 (>=3.1.2) ; extra == 'dev'",
      "pylint (>=2.16.4) ; extra == 'dev'",
      "black (>=23.1.0) ; extra == 'dev'",
      "coverage (<=7.2.1) ; extra == 'dev'",
      "pytest (>=7.2.1) ; extra == 'dev'",
      "isort (>=5.12.0) ; extra == 'dev'",
      "pre-commit (>=3.1.1) ; extra == 'dev'",
      "pandas (>=1.5.3) ; extra == 'dev'",
      "ipython (>=8.11.0) ; extra == 'dev'",
      "matplotlib (>=3.7.1) ; extra == 'dev'",
      "pylint (>=2.17.0) ; extra == 'dev'",
      "coloredlogs (>=15.0.1) ; extra == 'dev'",
      "click (>=8.1.3) ; extra == 'doc'",
      "Jinja2 (>=3.1.2) ; extra == 'doc'",
      "Sphinx (>=6.1.3) ; extra == 'doc'",
      "sphinx-material (>=0.0.35) ; extra == 'doc'",
      "sphinxcontrib-mermaid (>=0.8.1) ; extra == 'doc'",
      "sphinx-autoapi (>=2.0.1) ; extra == 'doc'",
      "sphinx-tabs (>=3.4.1) ; extra == 'doc'",
      "isort (>=5.12.0) ; extra == 'doc'",
      "black (>=23.1.0) ; extra == 'doc'",
      "pre-commit (>=3.1.1) ; extra == 'doc'",
      "coverage (<=7.2.1) ; extra == 'doc'",
      "pytest (>=7.2.1) ; extra == 'doc'",
      "pylint (>=2.17.0) ; extra == 'doc'",
      "coloredlogs (>=15.0.1) ; extra == 'doc'",
      "pandas (>=1.5.3) ; extra == 'pandas'",
      "click (>=8.1.3) ; extra == 'test'",
      "Jinja2 (>=3.1.2) ; extra == 'test'",
      "pytest (>=7.2.1) ; extra == 'test'",
      "black (>=23.1.0) ; extra == 'test'",
      "coverage (<=7.2.1) ; extra == 'test'",
      "isort (>=5.12.0) ; extra == 'test'",
      "pre-commit (>=3.1.1) ; extra == 'test'",
      "pandas (>=1.5.3) ; extra == 'test'",
      "ipython (>=8.11.0) ; extra == 'test'",
      "matplotlib (>=3.7.1) ; extra == 'test'",
      "pylint (>=2.17.0) ; extra == 'test'",
      "coloredlogs (>=15.0.1) ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "Flowrunner is a lightweight package to organize and represent Data Engineering/Science workflows",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17443668,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef29aa559e8bfbcef5a20cf0e74efcea5ca0216f64b8a34bd412f96c0d3dbbfa",
          "md5": "d56ec85e68b0a30c9c8ebc2858256fc7",
          "sha256": "2162c9e243fc3eb4cd61b690b5e8e15227181d9614ec49667bf2b1d508c228db"
        },
        "downloads": -1,
        "filename": "flowrunner-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d56ec85e68b0a30c9c8ebc2858256fc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 20580,
        "upload_time": "2023-03-21T16:55:28",
        "upload_time_iso_8601": "2023-03-21T16:55:28.734042Z",
        "url": "https://files.pythonhosted.org/packages/ef/29/aa559e8bfbcef5a20cf0e74efcea5ca0216f64b8a34bd412f96c0d3dbbfa/flowrunner-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f3ce6fc587de26de1134896f623733fe0e12f9a2ea564c60ffc91bce95fe9c6",
          "md5": "3d82ffe98a1379d94eb6507bfc069c50",
          "sha256": "7f4f9a746a80d5eefb98cdfe694f11b24556fdced35df4fa5a0900575be04ac0"
        },
        "downloads": -1,
        "filename": "flowrunner-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d82ffe98a1379d94eb6507bfc069c50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 38289,
        "upload_time": "2023-03-21T16:55:30",
        "upload_time_iso_8601": "2023-03-21T16:55:30.909035Z",
        "url": "https://files.pythonhosted.org/packages/8f/3c/e6fc587de26de1134896f623733fe0e12f9a2ea564c60ffc91bce95fe9c6/flowrunner-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c7e6514fa01091f10669f866a61e50fa142a3907bfdba22d15f1a811f3f680e",
          "md5": "250c371938eeaf752b7422e55fdd9ba2",
          "sha256": "bb7fe4efff07179ca104c75123a09997836ef59e3717413f51edfcefa8b461d7"
        },
        "downloads": -1,
        "filename": "flowrunner-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "250c371938eeaf752b7422e55fdd9ba2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21335,
        "upload_time": "2023-03-25T17:59:51",
        "upload_time_iso_8601": "2023-03-25T17:59:51.901935Z",
        "url": "https://files.pythonhosted.org/packages/2c/7e/6514fa01091f10669f866a61e50fa142a3907bfdba22d15f1a811f3f680e/flowrunner-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56499835700a46f49898467355f8cdd17f214b7684f7df5765dfefcfaa9d659e",
          "md5": "e55cc944100f36777f127546c820b5f6",
          "sha256": "1573bd20e9ed189e1887feffeca51aa7fce8df02233eafeec8588098da5b01b8"
        },
        "downloads": -1,
        "filename": "flowrunner-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e55cc944100f36777f127546c820b5f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 42182,
        "upload_time": "2023-03-25T17:59:53",
        "upload_time_iso_8601": "2023-03-25T17:59:53.155014Z",
        "url": "https://files.pythonhosted.org/packages/56/49/9835700a46f49898467355f8cdd17f214b7684f7df5765dfefcfaa9d659e/flowrunner-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c7e6514fa01091f10669f866a61e50fa142a3907bfdba22d15f1a811f3f680e",
        "md5": "250c371938eeaf752b7422e55fdd9ba2",
        "sha256": "bb7fe4efff07179ca104c75123a09997836ef59e3717413f51edfcefa8b461d7"
      },
      "downloads": -1,
      "filename": "flowrunner-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "250c371938eeaf752b7422e55fdd9ba2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 21335,
      "upload_time": "2023-03-25T17:59:51",
      "upload_time_iso_8601": "2023-03-25T17:59:51.901935Z",
      "url": "https://files.pythonhosted.org/packages/2c/7e/6514fa01091f10669f866a61e50fa142a3907bfdba22d15f1a811f3f680e/flowrunner-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "56499835700a46f49898467355f8cdd17f214b7684f7df5765dfefcfaa9d659e",
        "md5": "e55cc944100f36777f127546c820b5f6",
        "sha256": "1573bd20e9ed189e1887feffeca51aa7fce8df02233eafeec8588098da5b01b8"
      },
      "downloads": -1,
      "filename": "flowrunner-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e55cc944100f36777f127546c820b5f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 42182,
      "upload_time": "2023-03-25T17:59:53",
      "upload_time_iso_8601": "2023-03-25T17:59:53.155014Z",
      "url": "https://files.pythonhosted.org/packages/56/49/9835700a46f49898467355f8cdd17f214b7684f7df5765dfefcfaa9d659e/flowrunner-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}