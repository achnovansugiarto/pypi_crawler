{
  "info": {
    "author": "Yesudeep Mangalapilly",
    "author_email": "yesudeep@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows :: Windows NT/2000",
      "Operating System :: OS Independent",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Filesystems",
      "Topic :: System :: Monitoring",
      "Topic :: Utilities"
    ],
    "description": "Watchdog\n========\nPython API and shell utilities to monitor file system events.\n\n\nExample API Usage\n-----------------\nA simple program that uses watchdog to monitor directories specified\nas command-line arguments and logs events generated:\n    \n.. code-block:: python\n\n    import sys\n    import time\n    import logging\n    from watchdog.observers import Observer\n    from watchdog.events import LoggingEventHandler\n\n    if __name__ == \"__main__\":\n        logging.basicConfig(level=logging.INFO,\n                            format='%(asctime)s - %(message)s',\n                            datefmt='%Y-%m-%d %H:%M:%S')\n        path = sys.argv[1] if len(sys.argv) > 1 else '.'\n        event_handler = LoggingEventHandler()\n        observer = Observer()\n        observer.schedule(event_handler, path, recursive=True)\n        observer.start()\n        try:\n            while True:\n                time.sleep(1)\n        except KeyboardInterrupt:\n            observer.stop()\n        observer.join()\n\n\nShell Utilities\n---------------\nWatchdog comes with a utility script called ``watchmedo``.\nPlease type ``watchmedo --help`` at the shell prompt to\nknow more about this tool.\n\nHere is how you can log the current directory recursively\nfor events related only to ``*.py`` and ``*.txt`` files while\nignoring all directory events:\n    \n.. code-block:: bash\n\n    watchmedo log \\\n        --patterns=\"*.py;*.txt\" \\\n        --ignore-directories \\\n        --recursive \\\n        .\n\nYou can use the ``shell-command`` subcommand to execute shell commands in\nresponse to events:\n    \n.. code-block:: bash\n\n    watchmedo shell-command \\\n        --patterns=\"*.py;*.txt\" \\\n        --recursive \\\n        --command='echo \"${watch_src_path}\"' \\\n        .\n\nPlease see the help information for these commands by typing:\n\n.. code-block:: bash\n\n    watchmedo [command] --help\n\n\nAbout ``watchmedo`` Tricks\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n``watchmedo`` can read ``tricks.yaml`` files and execute tricks within them in\nresponse to file system events. Tricks are actually event handlers that\nsubclass ``watchdog.tricks.Trick`` and are written by plugin authors. Trick\nclasses are augmented with a few additional features that regular event handlers\ndon't need.\n\nAn example ``tricks.yaml`` file:\n    \n.. code-block:: yaml\n\n    tricks:\n    - watchdog.tricks.LoggerTrick:\n        patterns: [\"*.py\", \"*.js\"]\n    - watchmedo_webtricks.GoogleClosureTrick:\n        patterns: ['*.js']\n        hash_names: true\n        mappings_format: json                  # json|yaml|python\n        mappings_module: app/javascript_mappings\n        suffix: .min.js\n        compilation_level: advanced            # simple|advanced\n        source_directory: app/static/js/\n        destination_directory: app/public/js/\n        files:\n          index-page:\n          - app/static/js/vendor/jquery*.js\n          - app/static/js/base.js\n          - app/static/js/index-page.js\n          about-page:\n          - app/static/js/vendor/jquery*.js\n          - app/static/js/base.js\n          - app/static/js/about-page/**/*.js\n\nThe directory containing the ``tricks.yaml`` file will be monitored. Each trick\nclass is initialized with its corresponding keys in the ``tricks.yaml`` file as\narguments and events are fed to an instance of this class as they arrive.\n\nTricks will be included in the 0.5.0 release. I need community input about them.\nPlease file enhancement requests at the `issue tracker`_.\n\n\nInstallation\n------------\nInstalling from PyPI using ``pip``:\n    \n.. code-block:: bash\n\n    $ pip install watchdog\n\nInstalling from PyPI using ``easy_install``:\n    \n.. code-block:: bash\n\n    $ easy_install watchdog\n\nInstalling from source:\n    \n.. code-block:: bash\n\n    $ python setup.py install\n\n\nInstallation Caveats\n~~~~~~~~~~~~~~~~~~~~\nThe ``watchmedo`` script depends on PyYAML_ which links with LibYAML_,\nwhich brings a performance boost to the PyYAML parser. However, installing\nLibYAML_ is optional but recommended. On Mac OS X, you can use homebrew_\nto install LibYAML:\n\n.. code-block:: bash\n\n    $ brew install libyaml\n\nOn Linux, use your favorite package manager to install LibYAML. Here's how you\ndo it on Ubuntu:\n    \n.. code-block:: bash\n\n    $ sudo aptitude install libyaml-dev\n\nOn Windows, please install PyYAML_ using the binaries they provide.\n\nDocumentation\n-------------\nYou can browse the latest release documentation_ online.\n\nContribute\n----------\nFork the `repository`_ on GitHub and send a pull request, or file an issue\nticket at the `issue tracker`_. For general help and questions use the official\n`mailing list`_ or ask on `stackoverflow`_ with tag `python-watchdog`.\n\nCreate and activate your virtual environment, then::\n\n    pip install pytest\n    pip install -e .\n    py.test tests\n\n\nSupported Platforms\n-------------------\n* Linux 2.6 (inotify)\n* Mac OS X (FSEvents, kqueue)\n* FreeBSD/BSD (kqueue)\n* Windows (ReadDirectoryChangesW with I/O completion ports;\n  ReadDirectoryChangesW worker threads)\n* OS-independent (polling the disk for directory snapshots and comparing them\n  periodically; slow and not recommended)\n\nNote that when using watchdog with kqueue, you need the\nnumber of file descriptors allowed to be opened by programs\nrunning on your system to be increased to more than the\nnumber of files that you will be monitoring. The easiest way\nto do that is to edit your ``~/.profile`` file and add\na line similar to::\n\n    ulimit -n 1024\n\nThis is an inherent problem with kqueue because it uses\nfile descriptors to monitor files. That plus the enormous\namount of bookkeeping that watchdog needs to do in order\nto monitor file descriptors just makes this a painful way\nto monitor files and directories. In essence, kqueue is\nnot a very scalable way to monitor a deeply nested\ndirectory of files and directories with a large number of\nfiles.\n\nAbout using watchdog with editors like Vim\n------------------------------------------\nVim does not modify files unless directed to do so.\nIt creates backup files and then swaps them in to replace\nthe files you are editing on the disk. This means that\nif you use Vim to edit your files, the on-modified events\nfor those files will not be triggered by watchdog.\nYou may need to configure Vim to appropriately to disable\nthis feature.\n\n\nDependencies\n------------\n1. Python 2.6 or above.\n2. pathtools_\n3. select_backport_ (select.kqueue replacement for 2.6 on BSD/Mac OS X)\n4. XCode_ (only on Mac OS X)\n5. PyYAML_ (only for ``watchmedo`` script)\n6. argh_ (only for ``watchmedo`` script)\n\n\nLicensing\n---------\nWatchdog is licensed under the terms of the `Apache License, version 2.0`_.\n\nCopyright 2011 `Yesudeep Mangalapilly`_.\n\nCopyright 2012 Google, Inc.\n\nProject `source code`_ is available at Github. Please report bugs and file\nenhancement requests at the `issue tracker`_.\n\nWhy Watchdog?\n-------------\nToo many people tried to do the same thing and none did what I needed Python\nto do:\n\n* pnotify_\n* `unison fsmonitor`_\n* fsmonitor_\n* guard_\n* pyinotify_\n* `inotify-tools`_\n* jnotify_\n* treewalker_\n* `file.monitor`_\n* pyfilesystem_\n\n.. links:\n.. _Yesudeep Mangalapilly: yesudeep@gmail.com\n.. _source code: http://github.com/gorakhargosh/watchdog\n.. _issue tracker: http://github.com/gorakhargosh/watchdog/issues\n.. _Apache License, version 2.0: http://www.apache.org/licenses/LICENSE-2.0\n.. _documentation: http://packages.python.org/watchdog/\n.. _stackoverflow: http://stackoverflow.com/questions/tagged/python-watchdog\n.. _mailing list: http://groups.google.com/group/watchdog-python\n.. _repository: http://github.com/gorakhargosh/watchdog\n.. _issue tracker: http://github.com/gorakhargosh/watchdog/issues\n\n.. _homebrew: http://mxcl.github.com/homebrew/\n.. _select_backport: http://pypi.python.org/pypi/select_backport\n.. _argh: http://pypi.python.org/pypi/argh\n.. _PyYAML: http://www.pyyaml.org/\n.. _XCode: http://developer.apple.com/technologies/tools/xcode.html\n.. _LibYAML: http://pyyaml.org/wiki/LibYAML\n.. _pathtools: http://github.com/gorakhargosh/pathtools\n\n.. _pnotify: http://mark.heily.com/pnotify\n.. _unison fsmonitor: https://webdav.seas.upenn.edu/viewvc/unison/trunk/src/fsmonitor.py?view=markup&pathrev=471\n.. _fsmonitor: http://github.com/shaurz/fsmonitor\n.. _guard: http://github.com/guard/guard\n.. _pyinotify: http://github.com/seb-m/pyinotify\n.. _inotify-tools: http://github.com/rvoicilas/inotify-tools\n.. _jnotify: http://jnotify.sourceforge.net/\n.. _treewalker: http://github.com/jbd/treewatcher\n.. _file.monitor: http://github.com/pke/file.monitor\n.. _pyfilesystem: http://code.google.com/p/pyfilesystem\n\n\n.. :changelog:\n\nAPI changes\n-----------\n\n0.8.2\n~~~~~\n\n- Event emitters are no longer started on schedule if ``Observer`` is not\n  already running.\n\n\n0.8.0\n~~~~~\n\n- ``DirectorySnapshot``: methods returning internal stat info replaced by\n  ``mtime``, ``inode`` and ``path`` methods.\n- ``DirectorySnapshot``: ``walker_callback`` parameter deprecated.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/gorakhargosh/watchdog",
    "keywords": "python filesystem monitoring monitor FSEvents kqueue inotify ReadDirectoryChangesW polling DirectorySnapshot",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "watchdog-lite",
    "package_url": "https://pypi.org/project/watchdog-lite/",
    "platform": "",
    "project_url": "https://pypi.org/project/watchdog-lite/",
    "project_urls": {
      "Homepage": "http://github.com/gorakhargosh/watchdog"
    },
    "release_url": "https://pypi.org/project/watchdog-lite/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Filesystem events monitoring",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2634089,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d64483c33d78ce492d671a47dd5cef6b39f0704f6f68d9a630b28dac48fdda48",
          "md5": "50b55e5b55bc6ed3f9ab4c8169a72dce",
          "sha256": "971e8dacb401a614d719fc25a20f133281454eb948d247548779098fb53adf64"
        },
        "downloads": -1,
        "filename": "watchdog-lite-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "50b55e5b55bc6ed3f9ab4c8169a72dce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 85011,
        "upload_time": "2017-02-10T18:50:17",
        "upload_time_iso_8601": "2017-02-10T18:50:17.331887Z",
        "url": "https://files.pythonhosted.org/packages/d6/44/83c33d78ce492d671a47dd5cef6b39f0704f6f68d9a630b28dac48fdda48/watchdog-lite-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d64483c33d78ce492d671a47dd5cef6b39f0704f6f68d9a630b28dac48fdda48",
        "md5": "50b55e5b55bc6ed3f9ab4c8169a72dce",
        "sha256": "971e8dacb401a614d719fc25a20f133281454eb948d247548779098fb53adf64"
      },
      "downloads": -1,
      "filename": "watchdog-lite-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "50b55e5b55bc6ed3f9ab4c8169a72dce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 85011,
      "upload_time": "2017-02-10T18:50:17",
      "upload_time_iso_8601": "2017-02-10T18:50:17.331887Z",
      "url": "https://files.pythonhosted.org/packages/d6/44/83c33d78ce492d671a47dd5cef6b39f0704f6f68d9a630b28dac48fdda48/watchdog-lite-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}