{
  "info": {
    "author": "Aaron Stanek",
    "author_email": "amr.stanek@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python Password Utility\n\n**Cryptographically secure, easy-to-use, password generator**\n\nMost password generators written in Python make use of Python's\nsecrets module to generate random values.\n**Python Password Utility** goes a step further: it chains together\na keyed version of the SHA-512 (or SHA3-512) hash function\nto create a password which is computationally infeasible to guess, even for someone\nwho knows the internal state of the secrets module.\n\n**Python Password Utility** can be\n[run directly from the command line](#running-from-the-command-line),\nor [called through a Python API](#calling-from-python).\n\nThis software requires Python 3.6 or later.\nMajor versions of Python after Python 3 are not supported.\n\n### Index\n\n1. [Description](#description)\n1. [Installation](#installation)\n1. [Running from the Command Line](#running-from-the-command-line)\n    1. [Character Sets](#character-sets)\n    1. [Advanced Examples of Character Sets](#advanced-examples)\n    1. [Getting the Size of a Character Set](#getting-the-size-of-a-character-set)\n    1. [Determining which Hashing Algorithm is being used](#hashing-algorithms)\n1. [Calling from Python](#calling-from-python)\n    1. [generate_password](#generate_password)\n    1. [charset_size](#charset_size)\n    1. [SHA512_number](#sha512_number)\n\n## Description\n\nThe algorithm operates in a loop; at each iteration of the loop one character\nis added to the password. The program takes the \"output state\" of the previous iteration,\nand hashes it alongside the current time, 64 random bytes from Python's secrets module,\na unique counter value, and the key. The result of this operation is the \"output state\"\nthat will be used by the next iteration of the loop.\n\nEach of the \"output states\" is then hashed again along with the time, a different 64 random bytes,\nand a different unique counter value. One byte is selected randomly\nfrom each of the resulting \"candidate states\"\nand is transformed into a password character.\n\nThe power of this technique comes from the keyed hash functions. For an attacker to have any hope\nof guessing a password generated in this way, they must first know the key which was used.\nIf the user creates a new somewhat-random key for each password, and then removes all record of the key,\nit eliminates any chance of retroactively recovering the password.\nThis holds true even in the absurdly unlikely case that an attacker knows both the time when the\npassword was generated and the internal state of Python's secrets module.\n\nDrawing randomness from multiple sources, and passing it through a SHA hash,\nguarantees that the resulting passwords will be patternless: knowing any part\nof the password will not give an attacker any information about the rest of the password.\nPasswords generated from **Python Password Utility** will have the maximum possible\nentropy for a password of their length and character set.\n\n## Installation\n\n```\npip install passutil\n```\n\nNote:\nThis software requires Python 3.6 or later.\nMajor versions of Python after Python 3 are not supported.\n\n## Running from the Command Line\n\n```\npython -m passutil <valid_chars> <length> <random keyboard smashing, optional>\n```\n\n`<valid_chars>` tells the program which characters are permitted in your password.\nThe format of this parameter is described below.\n`z` is generally the best option, unless there are restrictions on which\ncharacters may appear in the password.\nThis parameter may not correspond to an empty set;\nto be able to generate a password, at least one character must be\nallowed to exist in the password.\nThis parameter is case sensitive.\n\n`<length>` is the desired length of the password. This can be any nonnegative integer.\n\n`<random keyboard smashing>` is an optional parameter. The entire command is taken as the key\nfor the hash function, so going wild on the keyboard after the `<length>` will\nincrease the randomness of the generated password.\n\n### Character Sets\n\n#### The basic character sets include:\n- `u` or `c`  -> uppercase/capital: **A-Z** (26 characters)\n- `l` -> lowercase: **a-z** (26 characters)\n- `n` -> numeral: **0-9** (10 characters)\n- `p` -> ASCII punctuation: **\\`~\\!@\\#$%^&\\*\\(\\)\\-\\_=\\+\\[\\]\\{\\}\\\\|;:'\",<\\.>/?** (32 characters)\n- `r` -> subset of `p`, some systems prohibit which punctuation\ncharacters may be used in a password, `r` omits those characters\nwhich are most likely to be banned, leaving: **\\!@\\#$%&\\*\\(\\)\\-\\_\\+\\[\\]\\{\\};:,\\.?** (21 characters)\n- `s` -> the space character (1 character)\n- `H` -> uppercase hexadecimal characters: **0123456789ABCDEF** (16 characters)\n- `h` -> lowercase hexadecimal characters: **0123456789abcdef** (16 characters)\n\nThe names of the basic character sets are case sensitive;\nthey must all be lowercase, other than `H`.\n\n**Example:**\n\nThe command below will generate a password of length 4,\nonly containing the numerals **0-9**.\nIt does this by specifying the character set `n` for numerals,\nand the length `4`.\nThe output might look like: `7014`.\n\n```\npython -m passutil n 4\n```\n\n**Example:**\n\nThe command below will generate a password of length 25,\nonly containing ASCII punctuation characters.\nIt does this by specifying the character set `p` for punctuation,\nand the length `25`.\nThe output might look like: `$/:<\"/\\~(+#/=\";-:^(*)+'?-`.\n\n```\npython -m passutil p 25\n```\n\n#### If we want to use characters from multiple character sets, we can perform a union on the sets simply by concatenating their names in the command.\n\n**Example:**\n\nThe command below will generate a password of length 10,\nonly containing numerals, spaces, and lowercase letters.\nIt does this by combining the `n`, `s`, and `l` sets,\nto get the `nsl` set.\nThe output might look like: `p ltaj0k3p`.\n\n```\npython -m passutil nsl 10\n```\n\n#### It is also possible to combine many character sets at once using shorthands:\n- `a` = `ulnps`, all the characters (95 characters)\n- `ar` = `ulnrs`, all the characters, except those which are likely to be banned (84 characters)\n- `z` = `ulnp`, all the characters, except spaces (94 characters)\n- `zr` = `ulnr`, all the characters, except spaces, and those which are likely to be banned (83 characters)\n\nThe shorthands are case sensitive; they must all be lowercase.\n\n**Example:**\n\nThe command below will generate a password of length 16,\ncontaining any of the ASCII printable characters. It does this by using the `a`\nshorthand. The output may look like: `~VJ &FhC[_K8wu:+`.\n\n```\npython -m passutil a 16\n```\n\nNote that the above command is fully equivalent to:\n\n```\npython -m passutil ulnps 16\n```\n\n**Example:**\n\nThe command below will generate a password of length 7,\nonly containing uppercase letters, lowercase letters, numerals,\nrestricted punctuation characters, and spaces.\nIt does this by combining the `zr` shorthand with the `s`\ncharacter set.\nThe output may look like: `1A #T-x`.\n\n```\npython -m passutil zrs 7\n```\n\nNote: `zrs` = `szr` = `ulnrs` = `ar`\n\n(`zr` is expanded to its definition, and then merged with `s`)\n\nHowever: `zsr` = `ulnpsr` = `a`\n\n(`z` is expanded to its definition, the last `r` is ignored because it is already included in `p`)\n\n#### Individual characters may be included with `i` or excluded with `e`.\n\n**Example:**\n\nThe command below will generate a password of length 20,\nonly containing numerals, `A` characters and `b` characters.\nIt does this by first declaring the base set: `n`,\nindicating numerals, then modifying it\nwith `i`. The `Ab` after the `i` signals that `A` characters\nand `b` characters are allowed in the password.\nThe output may look like: `24b749b71A1669586098`.\n\n```\npython -m passutil niAb 20\n```\n\nThis feature is case sensitive;\nusing uppercase `I` would not work here.\n\n**Example:**\n\nThe command below will generate a password of length 18,\nonly containing capital letters and ASCII punctuation.\nHowever, it will not contain the characters `C`,\n`A`, `T`, `.`, or `/`.\nIt does this by first declaring the base set: `cp`,\nindicating capitals and punctuation, then modifying it\nwith `e`. The `CAT./` after the `e` signals that these\ncharacters may not appear in the password.\nThe output may look like: `[W*[*;{(UM@QL,_$XR`.\n\n```\npython -m passutil cpeCAT./ 18\n```\n\nThis feature is case sensitive;\nusing uppercase `E` would not work here.\n\nSome characters may need to be enclosed in parenthesis or prefixed with an escape backslash.\nSee: [https://www.shellscript.sh/escape.html](https://www.shellscript.sh/escape.html)\n\n#### To include/exclude lowercase `i` or `e`, escape them with a `..` prefix.\n\n**Example:**\n\nThe command below will generate a password of length 14,\nonly containing consonants in the English alphabet.\nIt does this by first declaring the base set: `l`,\nindicating lowercase letters, then modifying it\nwith `e` to exclude the vowel characters.\nNotice that in the exclusion, `e` and `i`\nare prefixed with `..` to prevent them\nfrom being interpreted as the beginning\nof an exclusion or inclusion.\nThe output may look like: `hgydslgfzpsqft`.\n\n```\npython -m passutil lea..e..iou 14\n```\n\n#### `i` and `e` may be used together\n\n**Example:**\n\nThe command below will generate a password of length 26,\nonly containing even numerals, `a` characters, and `m` characters.\nIt does this by first declaring the base set: `n`,\nindicating numerals, then modifying it\nwith `i` to include `a` and `m` characters.\nThe following `e` will then exclude\nthe `1`, `3`, `5`, `7`, and `9` characters from\nthe password.\nThe output may look like: `m6am6a264m6m4m884m40aa6ma2`.\n\n```\npython -m passutil niame13579 26\n```\n\n**Example:**\n\nThe command below will generate a password of length 7,\nonly containing numerals, `e` characters,\nand excluding the numeral `5`.\nIt does this by first declaring the base set: `n`,\nindicating numerals, then modifying it with `i`\nto include `e`. Note that the first `e` is escaped with a `..`,\nand is therefore included by the preceding `i`, while the second `e`\nis not escaped, and so signals the start of an exclusion.\n`5` is excluded by the second `e`.\nThe output may look like: `97739e8`.\n\n```\npython -m passutil ni..ee5 7\n```\n\n### Advanced Examples\n\n**Example:**\n\n```\nIN:  python -m passutil li234 30\nOUT: ppkksclllnihfghmrmxqklvcleiroe\n```\n\nWhere's the `234` in the output?\n\nThe `<valid_chars>` parameter controls which\ncharacters may appear in the password,\nnot which characters will appear in the password.\n\n**Example:**\n\n```\nIN:  python -m passutil aen 30\nOUT: x&deJD.PHG\\]-5]0d\\&!CX\\wRwHyNl\n```\n\nI wanted to generate a password using\nall the characters, except for numerals.\nWhat's that `5` doing in there?\n\nAfter an `i` or `e` starts an inclusion or exclusion,\nall subsequent characters (except for `i` and `e`)\nare interpreted literally.\n\nBefore any inclusions or exclusions, `u`, `c`,\n`l`, `n`, `p`, `r`, `s`, `H`, and `h` refer to sets of characters.\n(Definitions given above)\n\nWithin inclusions and exclusions, these same characters\nare interpreted as individual Latin alphabet\nletters to be included or excluded.\n\nSo, `aen` will generate a password using all available characters\nexcept for the lowercase letter `n`, which will be excluded.\nTo generate a password using all the available characters\nexcept numerals, use `ulps` or more inconveniently `ae0123456789`.\n\n**Example:**\n\n```\nIN:  python -m passutil iATCG 12\nOUT: CACCCCCGTCTG\n```\n\nDeclaring a base set is not required.\nThe `<valid_chars>` parameter may begin with an `i`,\nfollowed by the characters to include.\n\n**Example:**\n\n```\nIN:  python -m passutil ipeck 10\nOUT: pppppppppp\n```\n\nWhat's going on here?\nI wanted a password using the letters `p`,\n`e`, `c`, and `k`, but I only get a bunch of `p` characters.\n\nBecause the `e` is not escaped, it is treated as the beginning\nof an exclusion. `c` and `k` are excluded, leaving only `p`\nin the character set.\n\nTo create a character set with the characters\n`p`, `e`, `c`, and `k`, the `e` needs to be\nescaped: `ip..eck`.\n\n**Example:**\n\n```\nIN:  python -m passutil lebig 10\nOUT: wdaozsgput\n```\n\nWhy is there a `g` in the output? I wanted to exclude\nthe characters `b`, `i`, and `g`.\n\nSame thing as the previous example.\n`i` is not escaped.\nThe correct character set will be produced with: `leb..ig`.\n\n**Example:**\n\n```\nIN:  python -m passutil i..i 10\nOUT: iiiiiiiiii\n```\n\nWait, what?\n\nThe first `i` starts an inclusion.\nThe escaped second `i` is the sole character\nthat is included into the set.\n\n**Example:**\n\n```\nIN:  python -m passutil e..e 10\nOUT: valid_chars parameter has minimum size 1\n```\n\nWait, what?\n\nThe first `e` starts an exclusion.\nNo characters are added into the character set.\nThe program needs at least one valid character\nto be able to produce a password.\n\n**Example:**\n\n```\nIN:  python -m passutil ixiyey 10\nOUT: xxxxxxxxxx\n\nIN:  python -m passutil ixeyiy 10\nOUT: xyyyxyyyxy\n```\n\nWhat's going on here?\nWhy do such similar inputs produce such different outputs?\n\nThe generation of the character set operates from left to right.\n\nIn the first case: `ix` will add `x` to the set.\n`iy` will add `y` to the set.\nBut then, `ey` will remove `y` from the set,\nleaving only `x`.\n\nIn the second case: `ix` will add `x` to the set.\n`ey` will try to remove `y` from the set, but as\nthere is no `y` in the set, it will do nothing.\nThen, the program reaches `iy`, adding `y` to the set,\nresulting in a set containing both `x` and `y`.\n\n**Example:**\n\nAdding pseudorandomly generated keystrokes\n(e.g. pretending to type without actually making words)\nafter the core of the command can help increase the randomness\nof the generated password.\nIt is recommended that users make use of this feature\nto fully utilize the capacities of this software.\n\n```\nIN:  python -m passutil n 30 ju2ikntu i g rhtuirehtui3wh8r73hfsdnrrhtrthui\nOUT: 834040642994017327433140007821\n\nIN:  python -m passutil Hixyz 20 njfkern 4tio54n28r4 gmfd dginrekngtiosei8ufh\nOUT: 18C29C2A9Az472BC1D27\n\nIN:  python -m passutil zeI..i 5 min3w 12ji44tnf 4hNUFIWE 3U4ITR8H4RH283W7 fhu\nOUT: Ss#oL\n```\n\n### Getting the Size of a Character Set\n\nSometimes it is useful to know how many characters\nare in a character set before the character set\nis used. **Python Password Utility** allows\none to do this from the command line.\n\n```\npython -m passutil --size <valid_chars>\n```\n\n`<valid_chars>` has the same format as above.\nHowever, unlike when generating a password,\n`valid_chars` may correspond to an empty set.\nIn such a case, `0` is returned.\n\n**Example:**\n\n```\nIN:  python -m passutil --size une5\nOUT: 35\n```\n\n`u` has 26 characters. `n` has 10.\n`e5` removes one character, leaving 35.\n\n### Hashing Algorithms\n\n**Python Password Utility** generates passwords using either\nthe SHA-2 512 algorithm or the SHA-3 512 algorithm.\n\nTo determine which algorithm is being used:\n```\npython -m passutil --hash\n```\n\n## Calling from Python\n\n**Python Password Utility** provides three publicly accessible objects.\n- [generate_password](#generate_password)\n- [charset_size](#charset_size)\n- [SHA512_number](#sha512_number)\n\n### generate_password\n\n`generate_password` is a function. As the name suggests,\nit generates passwords in the same way that the\ncommand line interface does.\n\n```python\nimport passutil\n\npassword = passutil.generate_password(length, key, valid_chars)\n```\n\n`length` is a nonnegative `int` representing the desired number of characters in the password.\n\n`key` is of type `bytes` or `str`. Its length cannot be zero. This value will be used to key the\nSHA hash function.\nFor best results, use a different `key` value on each call to `generate_password`.\n\n`valid_chars` indicates which characters may appear in the output password. It may be a `str` of the same\nformat as the `<valid_chars>` parameter in the command line interface.\nAlternatively, `valid_chars` may be a `set`, `list`, or `tuple` containing permitted\ncharacters, encoded as single-character strings.\nAlternatively, `valid_chars` may be a `set`, `list`, or `tuple` containing\ncodepoints for permitted characters. Only ASCII printable characters,\nor their codepoints, may exist in `valid_chars`. `valid_chars` may not correspond to\nan empty set.\n\nThe function will output a `str` containing the password.\n\nRaises `TypeError` if `length` is not an `int`.\nOr if `key` is not a `bytes` or `str` object.\nOr if `valid_chars` is not a `str`, `set`,\n`list`, or `tuple`. Or if the contained elements are neither\n`str` nor `int`.\n\nRaises `ValueError` if `length` is negative.\nOr if `key` has length zero.\nOr if the format is incorrect.\nOr if non-ASCII-printable\ncharacters are given in `valid_chars`.\n\n**Example:**\n\n```python\nimport passutil\npassword = passutil.generate_password(4, \"hello world\", \"n\")\nprint(type(password)) # str\nprint(password) # 7014\n```\n\nThis is analogous to the very first example given in this document.\n\n**Example:**\n\n```python\nimport passutil\npassword = passutil.generate_password(12, b'\\xf0\\x9f\\x98\\x84', {\"A\",\"T\",67,71})\n# ASCII value 67 is \"C\", ASCII value 71 is \"G\"\nprint(password) # CACCCCCGTCTG\n```\nThis is analogous to one of the advanced examples above.\n\n### charset_size\n\n`charset_size` is the analog of `--size` in the command line interface.\nIt is a function called in the following way:\n\n```python\nimport passutil\n\nsize = passutil.charset_size(valid_chars)\n```\nIt returns an `int`. \n`valid_chars` has the same format as in `generate_password`.\nUnlike in `generate_password`, an input corresponding to an\nempty character set will not cause an exception; instead, the function\nwill simply return `0`, indicating a character set of size zero.\n\nRaises `TypeError` if `valid_chars` is not a `str`, `set`,\n`list`, or `tuple`. Or if the contained elements are neither\n`str` nor `int`.\n\nRaises `ValueError` if the format is incorrect or if non-ASCII-printable\ncharacters are given in `valid_chars`.\n\n### SHA512_number\n\n`SHA512_number` is the analog of `--hash` in the command line interface. \nIt is an `int` constant.\nA value of `2` indicates that SHA-2 512 will be used for hashing.\nA value of `3` indicates that SHA-3 512 will be used for hashing.\n\n```python\nimport passutil\n\nalgorithm_version = passutil.SHA512_number\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aaronstanek/PythonPasswordUtility",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "passutil",
    "package_url": "https://pypi.org/project/passutil/",
    "platform": "",
    "project_url": "https://pypi.org/project/passutil/",
    "project_urls": {
      "Bug Tracker": "https://github.com/aaronstanek/PythonPasswordUtility/issues",
      "Homepage": "https://github.com/aaronstanek/PythonPasswordUtility"
    },
    "release_url": "https://pypi.org/project/passutil/3.0.5/",
    "requires_dist": null,
    "requires_python": "~=3.6",
    "summary": "Cryptographically secure, easy-to-use, password generator",
    "version": "3.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11175692,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87d9e47da4487b753a0f0ced2430e794a75d2d6a4fcd0544b34adca592d10e94",
          "md5": "e562d9eede45a83b9c85a4688ccf8e8a",
          "sha256": "7aad0058e22a89aa37603863a7d4057060b9797a61508afe19501dd396bf03c2"
        },
        "downloads": -1,
        "filename": "passutil-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e562d9eede45a83b9c85a4688ccf8e8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 6995,
        "upload_time": "2021-08-05T23:09:18",
        "upload_time_iso_8601": "2021-08-05T23:09:18.725046Z",
        "url": "https://files.pythonhosted.org/packages/87/d9/e47da4487b753a0f0ced2430e794a75d2d6a4fcd0544b34adca592d10e94/passutil-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e79cbc2cbc287efc3e73f96fd36149f5f72c6fdb05b66d138676f8327954f8a",
          "md5": "8f3a45357982080b5ba1d61341a3a19f",
          "sha256": "0d721057cca3bc6d1d1f92aaeac5f18451f992cff654b2ac699a6ca1ae653f2f"
        },
        "downloads": -1,
        "filename": "passutil-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8f3a45357982080b5ba1d61341a3a19f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 7598,
        "upload_time": "2021-08-05T23:09:20",
        "upload_time_iso_8601": "2021-08-05T23:09:20.483108Z",
        "url": "https://files.pythonhosted.org/packages/4e/79/cbc2cbc287efc3e73f96fd36149f5f72c6fdb05b66d138676f8327954f8a/passutil-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29291ed9b99896f9c840b7fd5d907d9f2b5801a93205fcfcfb16fecff1a3c10b",
          "md5": "8ec6b8fa4abd6aab9f549439df609e76",
          "sha256": "41ca4fd2cb3faee84813412fedc9ed076deddc242551730b5b96a8128ab11811"
        },
        "downloads": -1,
        "filename": "passutil-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ec6b8fa4abd6aab9f549439df609e76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 7892,
        "upload_time": "2021-08-06T18:47:14",
        "upload_time_iso_8601": "2021-08-06T18:47:14.769955Z",
        "url": "https://files.pythonhosted.org/packages/29/29/1ed9b99896f9c840b7fd5d907d9f2b5801a93205fcfcfb16fecff1a3c10b/passutil-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea1ba5b340f524b727a206914a43b969e29e586303eb9d165cee61e94f51a502",
          "md5": "c3eb2094472120d4ef7fc98746590cbf",
          "sha256": "da62e31dc601dbbfca50493b90e6f7365ba8084d37aac88dddefe210ff001145"
        },
        "downloads": -1,
        "filename": "passutil-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3eb2094472120d4ef7fc98746590cbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 8816,
        "upload_time": "2021-08-06T18:47:16",
        "upload_time_iso_8601": "2021-08-06T18:47:16.510785Z",
        "url": "https://files.pythonhosted.org/packages/ea/1b/a5b340f524b727a206914a43b969e29e586303eb9d165cee61e94f51a502/passutil-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25152154b54a21003280a1f1b558dba3d2f1c1bc9fba307c0f07d284a05ce4c7",
          "md5": "389b6ccb5d88c928d6eb24ebf7d81774",
          "sha256": "7a9599ab69a3fb98af74ed814deaaf91637849c8cca41809e2653f4a7426d120"
        },
        "downloads": -1,
        "filename": "passutil-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "389b6ccb5d88c928d6eb24ebf7d81774",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 8886,
        "upload_time": "2021-08-06T23:19:11",
        "upload_time_iso_8601": "2021-08-06T23:19:11.007202Z",
        "url": "https://files.pythonhosted.org/packages/25/15/2154b54a21003280a1f1b558dba3d2f1c1bc9fba307c0f07d284a05ce4c7/passutil-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2122c308b54d9d69077e666a8a61428f57f5adf1fb05dd6dc649e9eadee15872",
          "md5": "4950ca6b67e7b0e808b5eb033d3c4394",
          "sha256": "7e06b7ba45553640e77141501e9fefae9088e359b77a80cef6e238456d79731f"
        },
        "downloads": -1,
        "filename": "passutil-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4950ca6b67e7b0e808b5eb033d3c4394",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 11023,
        "upload_time": "2021-08-06T23:19:13",
        "upload_time_iso_8601": "2021-08-06T23:19:13.906793Z",
        "url": "https://files.pythonhosted.org/packages/21/22/c308b54d9d69077e666a8a61428f57f5adf1fb05dd6dc649e9eadee15872/passutil-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d46db0739987b5d4a01ff918f030c60c420080e061511faa6110f9f6ada79ae9",
          "md5": "da5f4316ac6bc8bdb3ed8062c2f4ba0e",
          "sha256": "0ed2bf6a61e400ec64704f3c06a7d6e9aa7c17bf157bd3bcab93f24ed9037438"
        },
        "downloads": -1,
        "filename": "passutil-3.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da5f4316ac6bc8bdb3ed8062c2f4ba0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 13121,
        "upload_time": "2021-08-14T00:07:02",
        "upload_time_iso_8601": "2021-08-14T00:07:02.424920Z",
        "url": "https://files.pythonhosted.org/packages/d4/6d/b0739987b5d4a01ff918f030c60c420080e061511faa6110f9f6ada79ae9/passutil-3.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55409592f5f3ac8981a103f419f44bc6e3fe37e6d7bfd8849cef6399b32a962a",
          "md5": "2977067b46dad28c0a22d4172bd2bd0c",
          "sha256": "f48caf28f909ddf55cda4c9bfee12c6ea458590177c9bed0241ea4240993d41c"
        },
        "downloads": -1,
        "filename": "passutil-3.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2977067b46dad28c0a22d4172bd2bd0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 19301,
        "upload_time": "2021-08-14T00:07:03",
        "upload_time_iso_8601": "2021-08-14T00:07:03.550057Z",
        "url": "https://files.pythonhosted.org/packages/55/40/9592f5f3ac8981a103f419f44bc6e3fe37e6d7bfd8849cef6399b32a962a/passutil-3.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d46db0739987b5d4a01ff918f030c60c420080e061511faa6110f9f6ada79ae9",
        "md5": "da5f4316ac6bc8bdb3ed8062c2f4ba0e",
        "sha256": "0ed2bf6a61e400ec64704f3c06a7d6e9aa7c17bf157bd3bcab93f24ed9037438"
      },
      "downloads": -1,
      "filename": "passutil-3.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da5f4316ac6bc8bdb3ed8062c2f4ba0e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 13121,
      "upload_time": "2021-08-14T00:07:02",
      "upload_time_iso_8601": "2021-08-14T00:07:02.424920Z",
      "url": "https://files.pythonhosted.org/packages/d4/6d/b0739987b5d4a01ff918f030c60c420080e061511faa6110f9f6ada79ae9/passutil-3.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55409592f5f3ac8981a103f419f44bc6e3fe37e6d7bfd8849cef6399b32a962a",
        "md5": "2977067b46dad28c0a22d4172bd2bd0c",
        "sha256": "f48caf28f909ddf55cda4c9bfee12c6ea458590177c9bed0241ea4240993d41c"
      },
      "downloads": -1,
      "filename": "passutil-3.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "2977067b46dad28c0a22d4172bd2bd0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 19301,
      "upload_time": "2021-08-14T00:07:03",
      "upload_time_iso_8601": "2021-08-14T00:07:03.550057Z",
      "url": "https://files.pythonhosted.org/packages/55/40/9592f5f3ac8981a103f419f44bc6e3fe37e6d7bfd8849cef6399b32a962a/passutil-3.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}