{
  "info": {
    "author": "Neeratyoy, Noor, Frank",
    "author_email": "mallik@cs.uni-freiburg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# DEHB: Evolutionary Hyperband for Scalable, Robust and Efficient Hyperparameter Optimization\n\n### Installation\n```bash\n# from pypi\npip install dehb\n\n# to run examples, install from github\ngit clone https://github.com/automl/DEHB.git\npip install -e DEHB  # -e stands for editable, lets you modify the code and rerun things\n```\n\n### Tutorials/Example notebooks\n\n* [00 - A generic template to use DEHB for multi-fidelity Hyperparameter Optimization](examples/00_interfacing_DEHB.ipynb)\n* [01 - Using DEHB to optimize 4 hyperparameters of a Scikit-learn's Random Forest on a classification dataset](examples/01_Optimizing_RandomForest_using_DEHB.ipynb)\n* [02 - Optimizing Scikit-learn's Random Forest without using ConfigSpace to represent the hyperparameter space](examples/02_using%20DEHB_without_ConfigSpace.ipynb)\n* [03 - Hyperparameter Optimization for MNIST in PyTorch](examples/03_pytorch_mnist_hpo.py)\n\nTo run PyTorch example: (*note additional requirements*) \n```bash\npython examples/03_pytorch_mnist_hpo.py \\\n     --min_budget 1 --max_budget 3 --verbose --runtime 60\n```\n\n### Running DEHB in a parallel setting\n\nDEHB has been designed to interface a [Dask client](https://distributed.dask.org/en/latest/api.html#distributed.Client).\nDEHB can either create a Dask client during instantiation and close/kill the client during garbage colleciton. \nOr a client can be passed as an argument during instantiation.\n\n* Setting `n_workers` during instantiation \\\n    If set to `1` (default) then the entire process is a sequential run without invoking Dask. \\\n    If set to `>1` then a Dask Client is initialized with as many workers as `n_workers`. \\\n    This parameter is ignored if `client` is not None.\n* Setting `client` during instantiation \\\n    When `None` (default), the a Dask client is created using `n_workers` specified. \\\n    Else, any custom configured Dask Client can be created and passed as the `client` argument to DEHB.\n  \n#### Using GPUs in a parallel run\n\nCertain target function evaluations (especially for Deep Learning) requires computations to be \ncarried out on GPUs. The GPU devices are often ordered by device ID and if not configured, all \nspawned worker processes access these devices in the same order and can either run out of memory, or\nnot exhibit parallelism.\n\nFor `n_workers>1` and when running on a single node (or local), the `single_node_with_gpus` can be \npassed to the `run()` call to DEHB. Setting it to `False` (default) has no effect on the default setup \nof the machine. Setting it to `True` will reorder the GPU device IDs dynamically by setting the environment \nvariable `CUDA_VISIBLE_DEVICES` for each worker process executing a target function evaluation. The re-ordering \nis done in a manner that the first priority device is the one with the least number of active jobs assigned \nto it by that DEHB run.\n\nTo run the PyTorch MNIST example on a single node using 2 workers:  \n```bash\npython examples/03_pytorch_mnist_hpo.py --min_budget 1 --max_budget 3 \\\n  --verbose --runtime 60 --n_workers 2 --single_node_with_gpus\n```\n\n#### Multi-node runs\n\nMulti-node parallelism is often contingent on the cluster setup to be deployed on. Dask provides useful \nframeworks to interface various cluster designs. As long as the `client` passed to DEHB during \ninstantiation is of type `dask.distributed.Client`, DEHB can interact with this client and \ndistribute its optimisation process in a parallel manner. \n\nFor instance, `Dask-CLI` can be used to create a `dask-scheduler` which can dump its connection \ndetails to a file on a cluster node accessible to all processes. Multiple `dask-worker` can then be\ncreated to interface the `dask-scheduler` by connecting to the details read from the file dumped. Each\ndask-worker can be triggered on any remote machine. Each worker can be configured as required, \nincluding mapping to specific GPU devices. \n\nSome helper scripts can be found [here](utils/), that can be used as reference to run DEHB in a multi-node \nmanner on clusters managed by SLURM. (*not expected to work off-the-shelf*)\n\nTo run the PyTorch MNIST example on a multi-node setup using 4 workers:\n```bash\nbash utils/run_dask_setup.sh -f dask_dump/scheduler.json -e env_name -n 4\nsleep 5\npython examples/03_pytorch_mnist_hpo.py --min_budget 1 --max_budget 3 \\\n  --verbose --runtime 60 --scheduler_file dask_dump/scheduler.json \n```\n\n\n\n### DEHB Hyperparameters\n\n*We recommend the default settings*.\nThe default settings were chosen based on ablation studies over a collection of diverse problems \nand were found to be *generally* useful across all cases tested. \nHowever, the parameters are still available for tuning to a specific problem.\n\nThe Hyperband components:\n* *min\\_budget*: Needs to be specified for every DEHB instantiation and is used in determining \nthe budget spacing for the problem at hand.\n* *max\\_budget*: Needs to be specified for every DEHB instantiation. Represents the full-budget \nevaluation or the actual black-box setting.\n* *eta*: (default=3) Sets the aggressiveness of Hyperband's aggressive early stopping by retaining\n1/eta configurations every round\n  \nThe DE components:\n* *strategy*: (default=`rand1_bin`) Chooses the mutation and crossover strategies for DE. `rand1` \nrepresents the *mutation* strategy while `bin` represents the *binomial crossover* strategy. \\\n  Other mutation strategies include: {`rand2`, `rand2dir`, `best`, `best2`, `currenttobest1`, `randtobest1`}\\\n  Other crossover strategies include: {`exp`}\\\n  Mutation and crossover strategies can be combined with a `_` separator, for e.g.: `rand2dir_exp`.\n* *mutation_factor*: (default=0.5) A fraction within [0, 1] weighing the difference operation in DE\n* *crossover_prob*: (default=0.5) A probability within [0, 1] weighing the traits from a parent or the mutant\n\n---\n\n### To cite the paper or code\n\n```bibtex\n@inproceedings{awad-ijcai21,\n  author    = {N. Awad and N. Mallik and F. Hutter},\n  title     = {{DEHB}: Evolutionary Hyberband for Scalable, Robust and Efficient Hyperparameter Optimization},\n  pages     = {2147--2153},\n  booktitle = {Proceedings of the Thirtieth International Joint Conference on\n               Artificial Intelligence, {IJCAI-21}},\n  publisher = {ijcai.org},\n  editor    = {Z. Zhou},\n  year      = {2021}\n}\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/automl/DEHB",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dehb",
    "package_url": "https://pypi.org/project/dehb/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/dehb/",
    "project_urls": {
      "Documentation": "https://automl.org.github.io/DEHB/main",
      "Homepage": "https://github.com/automl/DEHB",
      "Source Code": "https://github.com/automl.org/dehb"
    },
    "release_url": "https://pypi.org/project/dehb/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Evolutionary Hyperband for Scalable, Robust and Efficient Hyperparameter Optimization",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16934391,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db1f8794f1bb9275acc2b81ee859fd1e0f21669301ce20f5be262074a75ac68c",
          "md5": "80e3355c79f7d2f3df55f5a867a09a60",
          "sha256": "0d3664131105e2e96de512e8d6735599b10c52065bf777de78c67a8b6ed10e74"
        },
        "downloads": -1,
        "filename": "dehb-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "80e3355c79f7d2f3df55f5a867a09a60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 29555,
        "upload_time": "2022-06-13T12:43:49",
        "upload_time_iso_8601": "2022-06-13T12:43:49.271900Z",
        "url": "https://files.pythonhosted.org/packages/db/1f/8794f1bb9275acc2b81ee859fd1e0f21669301ce20f5be262074a75ac68c/dehb-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8f7fd032735daf267e950536c9a9ae106ccbe96a284d76bd5b093d0509faeea",
          "md5": "ca18ca24d7a9a20f1dfb2294497af47d",
          "sha256": "b8f86e386507c96c7d293510a2ec827928c32f04d697a80643979841cb05048d"
        },
        "downloads": -1,
        "filename": "dehb-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ca18ca24d7a9a20f1dfb2294497af47d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 29778,
        "upload_time": "2022-06-13T17:46:48",
        "upload_time_iso_8601": "2022-06-13T17:46:48.182579Z",
        "url": "https://files.pythonhosted.org/packages/d8/f7/fd032735daf267e950536c9a9ae106ccbe96a284d76bd5b093d0509faeea/dehb-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10bdf05e1d976932221e4dec0acba21b9812b247341a86cf6a9c8797d79200d3",
          "md5": "32cd6a77f6315d94d69440f73207bd61",
          "sha256": "9af42b2d1f1907e0688121901ae4ea4dd226edaf8a461d300c5e1c75a504f53f"
        },
        "downloads": -1,
        "filename": "dehb-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "32cd6a77f6315d94d69440f73207bd61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 29808,
        "upload_time": "2022-08-17T13:01:19",
        "upload_time_iso_8601": "2022-08-17T13:01:19.811669Z",
        "url": "https://files.pythonhosted.org/packages/10/bd/f05e1d976932221e4dec0acba21b9812b247341a86cf6a9c8797d79200d3/dehb-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f20d421174dd404d7cd9d508c23ab47c7ded6ab1a5bf1b271aad36b8c87ef5f2",
          "md5": "5a40afd729e7e0d506f67862df0354bc",
          "sha256": "15876c14bcbc2fe172fa869c71fff0b245866460af966016ce96abcc15a8d122"
        },
        "downloads": -1,
        "filename": "dehb-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5a40afd729e7e0d506f67862df0354bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 29845,
        "upload_time": "2022-09-18T21:27:01",
        "upload_time_iso_8601": "2022-09-18T21:27:01.779259Z",
        "url": "https://files.pythonhosted.org/packages/f2/0d/421174dd404d7cd9d508c23ab47c7ded6ab1a5bf1b271aad36b8c87ef5f2/dehb-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13263ee2a752037d8447890d8dbcd97bd9982dba60705c2e1d18ddf82118facb",
          "md5": "7bc468adf0d0bdda800b4d1adb5f2fe8",
          "sha256": "e0eb9879b99a2c0aad1eaa05d59b21092a3eea76ced451f2ae7b603d4e4b407b"
        },
        "downloads": -1,
        "filename": "dehb-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7bc468adf0d0bdda800b4d1adb5f2fe8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 29821,
        "upload_time": "2023-02-19T22:54:24",
        "upload_time_iso_8601": "2023-02-19T22:54:24.901076Z",
        "url": "https://files.pythonhosted.org/packages/13/26/3ee2a752037d8447890d8dbcd97bd9982dba60705c2e1d18ddf82118facb/dehb-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13263ee2a752037d8447890d8dbcd97bd9982dba60705c2e1d18ddf82118facb",
        "md5": "7bc468adf0d0bdda800b4d1adb5f2fe8",
        "sha256": "e0eb9879b99a2c0aad1eaa05d59b21092a3eea76ced451f2ae7b603d4e4b407b"
      },
      "downloads": -1,
      "filename": "dehb-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "7bc468adf0d0bdda800b4d1adb5f2fe8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 29821,
      "upload_time": "2023-02-19T22:54:24",
      "upload_time_iso_8601": "2023-02-19T22:54:24.901076Z",
      "url": "https://files.pythonhosted.org/packages/13/26/3ee2a752037d8447890d8dbcd97bd9982dba60705c2e1d18ddf82118facb/dehb-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}