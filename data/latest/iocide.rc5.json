{
  "info": {
    "author": "David Finn",
    "author_email": "dsfinn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.6",
      "Topic :: Security"
    ],
    "description": "# iocide\n\nDefanged/Obfuscated Indicator of Compromise (IOC) Detection\n\n`iocide` uses programatically-generated regular expressions to capture IOC\nvalues that may have been defanged and/or obfuscated using a range of\ntechniques.\n\nExpressions for each IOC type have been tailored to the relevant specification\nstandard, allowing identification of values obfuscated with combinations of\ndefanging, alternate unicode characters, and unusual edge-case formatting.\n\n## Author\n\nDavid Finn: dsfinn@gmail.com\n\n## Features\n\n### Detected IOC Types\n\n`iocide` can detect multiple IOC types, including:\n\n- remote URLs\n- remote IPs\n- remote hostnames\n- email addresses\n- hashes\n\n### Document Types\n\n`iocide` automatically detects and decodes PDF and zip files, including modern\nMicrosoft Office documents.\nOther data will be inspected for text encoding using\n[`chardet`](https://pypi.org/project/chardet/).\n\nThis automatic decoding extends to embedded binary values in input text,\nmeaning that `iocide` is able to detected PDF, zip/Office, and text files\nencoded as text blobs to arbitrary depth.\n\n### Text Deobfuscation\n\nInvoking `iocide` without the `--raw` parameter will cause unicode characters\nin the input text to be converted to ASCII where possible using\n[`unidecode`](https://pypi.org/project/Unidecode/).\nIOC values will be extracted from this normalised text, neutralising\nobfuscation based on unicode character substitution.\n\n### Encoded Binary\n\n`iocide` can detect (and optionally refang) binary blobs encoded according to\n[RFC 3548](https://datatracker.ietf.org/doc/html/rfc3548.html),\nincluding:\n\n- base16\n- base32\n- base64\n\n### Binary-Embedded Text\n\n`iocide` can automatically inspect detected binary blobs for text encodings.\nDetected text can be searched for IOCs to arbitrary recursion depth.\nBy default, only embedded text binaries found in the top level text will be\nfurther inspected.\n\n## Installation\n\n```\npip install iocide\n```\n\n## Command Line Quickstart\n\nSee `iocide -h` for parameters and subcommands.\n\n`iocide` reads text from `stdin` and writes detected IOC values to `stdout`.\nIf invoked without arguments, it will search for all known IOC types including\nbinary blobs and binary-embedded text.\n\nThe `--refang` flag (shortcut `-r`) will cause `iocide` to normalise detected\nvalues to their 'fanged' representations if the IOC type supports refanging.\n\nBy default, `iocide` will normalise input text by replacing non-ASCII\ncharacters with ASCII where possible.\nThis behaviour can be deactivated using the `--raw` flag.\n\n### Finding defanged IOCs in text\n\n```\necho \"fake1,Ħ×Xƥŝ://ÀÇÈÌÐÑ<ąŧ>ƒơő[.ƃăr.)ḅȃź{ďōţ}çøm<fake2>\" | iocide\n```\nOutput:\n```\nHxXps://ACEIDN<at>foo[.bar.)baz\n//ACEIDN<at>foo[.bar.)baz\nfoo[.bar.)baz\n```\n\n### Refanging detected IOCs\n\n```\necho \"fake1,Ħ×Xƥŝ://ÀÇÈÌÐÑ<ąŧ>ƒơő[.ƃăr.)ḅȃź{ďōţ}çøm<fake2>\" | iocide --refang\n```\nOutput:\n```\nhttps://ACEIDN@foo.bar.baz\n//ACEIDN@foo.bar.baz\nfoo.bar.baz\n```\n\n### Finding a specific IOC type\n\n```\ncat suspicious_document.txt | iocide url\ncat suspicious_document.txt | iocide --refang url\n```\n\n### Finding binary-embedded text\n\n```\ncat suspicious_document.txt | iocide secrets\n```\n\n### Filter output for unique values\n```\ncat suspicious_document.txt | iocide | sort -u\n```\n\n### Specify an input path\n\nFor large input, buffering file content from stdin can be avoided by specifying\nan input file using `--input`:\n\n```\niocide --input some/path.txt\n```\n\n## Python Interface\n\n```python\nimport iocide\n\n\nsome_raw_text = ...\n\n# Normalise text characters to ascii where possible\nsome_text = iocide.normalise(some_raw_text)\n\n# extract_all will extract all known IOC types\n\nfor defanged_ioc in iocide.extract_all(text=some_text, refang=False):\n\t...\n\nfor refanged_ioc in iocide.extract_all(text=some_text, refang=True):\n\t...\n\n# Use the appropriate submodule to extract a specific IOC type\n# e.g. for url:\n\nfor defanged_url in iocide.url.extract(text=some_text, refang=False):\n\t...\n\nfor refanged_url in iocide.url.extract(text=some_text, refang=True):\n\t...\n\n\n# To find all text contents of data including encoded text embedded as binary\n# blobs to an arbitrary depth of recursion:\nwith open('some/file') as data_file:\n\tfor text in iocide.blobs.extract_text(data=data_file, depth=None):\n\t\t...\n\n\n# To exclude text from the top level of encoding, use blobs.extract_text with\n# `embedded_only=True`:\nwith open('some/file') as data_file:\n\tfor secret in iocide.blobs.extract_text(\n\t\t\tdata=data_file, embedded_only=True, depth=3):\n\t\t...\n\n```\n\nTo facilitate advanced use of detected IOC values, generated values are\ninstances of appropriate built-in Python types.\nFor example, URL values are instances of `urllib.parse.ParseResult`.\n\nSome IOC types don't correspond to a built-in Python type (such as hashes),\nand are generated as `str` objects.\n\nAll generated values can be converted to strings by calling the `str`\nconstructor:\n\n```python\nstr(defanged_url)\nstr(refanged_url)\n```\n\nCustom subclasses have been used to faciliate `str` construction and defanged\ntext preservation where necessary.\nThese subclasses can be inspected in the relevant module.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/dsfinn/iocide",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iocide",
    "package_url": "https://pypi.org/project/iocide/",
    "platform": "",
    "project_url": "https://pypi.org/project/iocide/",
    "project_urls": {
      "Homepage": "https://gitlab.com/dsfinn/iocide"
    },
    "release_url": "https://pypi.org/project/iocide/0.2.0/",
    "requires_dist": [
      "chardet (>=4.0.0)",
      "pdfminer.six (>=20201018)",
      "regex (>=2021.4.4)",
      "unidecode (>=1.2.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Indicator of Compromise (IOC) Detection Utility",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10712643,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "013458c3d7d0b1954f5a1951ac16ffadfd351768063202f6ad0e12bb34cab6bc",
          "md5": "1616b96faccdd1a724462080eaad7c4d",
          "sha256": "99907eb2df147bb5da2155b9909fec294e8bbc7c56fd48a3444f2f7218b091c3"
        },
        "downloads": -1,
        "filename": "iocide-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1616b96faccdd1a724462080eaad7c4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33783,
        "upload_time": "2021-06-19T13:13:19",
        "upload_time_iso_8601": "2021-06-19T13:13:19.869713Z",
        "url": "https://files.pythonhosted.org/packages/01/34/58c3d7d0b1954f5a1951ac16ffadfd351768063202f6ad0e12bb34cab6bc/iocide-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d05b444ae080e5d8590a0a7107aed9cc9b230cd8607974b6162254c2b89b0c8",
          "md5": "58a127fa56477a50eb159f64941a2527",
          "sha256": "8ea00cbfb8b571b42d2f2f763cc3705bc7473811ad1c32c21bb116057a7bb334"
        },
        "downloads": -1,
        "filename": "iocide-0.1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58a127fa56477a50eb159f64941a2527",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17391,
        "upload_time": "2021-06-17T09:43:17",
        "upload_time_iso_8601": "2021-06-17T09:43:17.887530Z",
        "url": "https://files.pythonhosted.org/packages/2d/05/b444ae080e5d8590a0a7107aed9cc9b230cd8607974b6162254c2b89b0c8/iocide-0.1.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e06cb55c983545285a6e403936d856c25821e2ad7c85a2e22cf5caeac1a76455",
          "md5": "50856cf74af3b837d33a6dab9209935a",
          "sha256": "25a72415ca5f218bdea340859696be6c0e4724e4d7d4e07708d8645ef033418e"
        },
        "downloads": -1,
        "filename": "iocide-0.1.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50856cf74af3b837d33a6dab9209935a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19471,
        "upload_time": "2021-06-19T05:49:35",
        "upload_time_iso_8601": "2021-06-19T05:49:35.961665Z",
        "url": "https://files.pythonhosted.org/packages/e0/6c/b55c983545285a6e403936d856c25821e2ad7c85a2e22cf5caeac1a76455/iocide-0.1.0a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27cf0555424fd7253eef957c91085fe022595590abf783f667682080d4c1a6a1",
          "md5": "0b6a7fe820361160450dec5323f0de35",
          "sha256": "c2952e7f0520a783fc604142cb5e98408bde85b10fc9a5ccbde934a1b8007f48"
        },
        "downloads": -1,
        "filename": "iocide-0.1.0a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b6a7fe820361160450dec5323f0de35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20896,
        "upload_time": "2021-06-19T09:09:02",
        "upload_time_iso_8601": "2021-06-19T09:09:02.839373Z",
        "url": "https://files.pythonhosted.org/packages/27/cf/0555424fd7253eef957c91085fe022595590abf783f667682080d4c1a6a1/iocide-0.1.0a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38e9b7428eb32f78666ce769d7f61a53fb6936345f1b951436d1f477bb25dd21",
          "md5": "10e74bfcbc8d83322573a422ff9fc72c",
          "sha256": "238cb9fab55e18559b23aa384bff4738b2dd7ade6bee22f2997a33fcba278001"
        },
        "downloads": -1,
        "filename": "iocide-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10e74bfcbc8d83322573a422ff9fc72c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35176,
        "upload_time": "2021-06-22T14:09:43",
        "upload_time_iso_8601": "2021-06-22T14:09:43.187461Z",
        "url": "https://files.pythonhosted.org/packages/38/e9/b7428eb32f78666ce769d7f61a53fb6936345f1b951436d1f477bb25dd21/iocide-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38e9b7428eb32f78666ce769d7f61a53fb6936345f1b951436d1f477bb25dd21",
        "md5": "10e74bfcbc8d83322573a422ff9fc72c",
        "sha256": "238cb9fab55e18559b23aa384bff4738b2dd7ade6bee22f2997a33fcba278001"
      },
      "downloads": -1,
      "filename": "iocide-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10e74bfcbc8d83322573a422ff9fc72c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 35176,
      "upload_time": "2021-06-22T14:09:43",
      "upload_time_iso_8601": "2021-06-22T14:09:43.187461Z",
      "url": "https://files.pythonhosted.org/packages/38/e9/b7428eb32f78666ce769d7f61a53fb6936345f1b951436d1f477bb25dd21/iocide-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}