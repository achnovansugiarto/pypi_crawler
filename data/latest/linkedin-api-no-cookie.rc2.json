{
  "info": {
    "author": "Alejandrina Gonzalez",
    "author_email": "me@alejandrina.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Unofficial Linkedin API\n\n👨‍💼 Linkedin API for Python\n\n[![Build Status](https://travis-ci.com/tomquirk/linkedin-api.svg?branch=master)](https://travis-ci.com/tomquirk/linkedin-api)\n[![Documentation Status](https://readthedocs.org/projects/linkedin-api/badge/?version=latest)](https://linkedin-api.readthedocs.io/en/latest/?badge=latest)\n\n> No \"official\" API access required - just use a valid Linkedin account!\n\nProgrammatically send messages, get jobs, search profiles and more, all with a regular Linkedin user account!\n\nBefore using this project, please consult the [Terms and Conditions](#terms-and-conditions) and [Legal Notice](#legal).\n\n## Installation\n\n> ⚠️ Python >= 3.6 required\n\nPyPI version:\n\n```bash\npip3 install linkedin-api-no-cookie==1.12\n```\n\n### Example usage\n\n```python\nfrom linkedin_api import Linkedin\n\n# Authenticate using any Linkedin account credentials\napi = Linkedin('reedhoffman@linkedin.com', '*******')\n\n# GET a profile\nprofile = api.get_profile('billy-g')\n\n# GET a profiles contact info\ncontact_info = api.get_profile_contact_info('billy-g')\n\n# GET 1st degree connections of a given profile\nconnections = api.get_profile_connections('1234asc12304')\n```\n\n## Documentation\n\nFor a complete reference documentation, see the [documentation website](https://linkedin-api.readthedocs.io/).\n\n## Overview\n\nThis project attempts to provide a simple Python interface for the Linkedin API.\n\n> Do you mean the [legit Linkedin API](https://developer.linkedin.com/)?\n\nNO! To retrieve structured data, the [Linkedin Website](https://linkedin.com) uses a service they call **Voyager**. Voyager endpoints give us access to pretty much everything we could want from Linkedin: profiles, companies, connections, messages, etc. - anything that you can see on linkedin.com, we can get from Voyager.\n\nSo specifically, this project aims to provide complete coverage for Voyager.\n\n[How do we do it?](#in-depth-overview)\n\n### How to contribute\n\n[Learn how to find endpoints](#to-find-endpoints)\n\n## Development Setup\n\n### Dependencies\n\n- Python 3.7\n- A valid Linkedin user account (don't use your personal account, if possible)\n- `pipenv` (optional)\n\n### Development installation\n\n1. Create a `.env` config file. An example is provided in `.env.example` - you include at least all of the settings set there.\n2. Using pipenv...\n\n   ```bash\n   pipenv install --dev\n   pipenv shell\n   ```\n\n### Running tests\n\n```bash\npython -m pytest tests\n```\n\n### Troubleshooting\n\n#### I keep getting a `CHALLENGE`\n\nLinkedin will throw you a curve ball in the form of a Challenge URL. We currently don't handle this, and so you're kinda screwed. We think it could be only IP-based (i.e. logging in from different location). Your best chance at resolution is to log out and log back in on your browser.\n\n**Known reasons for Challenge** include:\n\n- 2FA\n- Rate-limit - \"It looks like you’re visiting a very high number of pages on LinkedIn.\". Note - n=1 experiment where this page was hit after ~900 contiguous requests in a single session (within the hour) (these included random delays between each request), as well as a bunch of testing, so who knows the actual limit.\n\nPlease add more as you come across them.\n\n#### Search problems\n\n- Mileage may vary when searching general keywords like \"software\" using the standard `search` method. They've recently added some smarts around search whereby they group results by people, company, jobs etc. if the query is general enough. Try to use an entity-specific search method (i.e. search_people) where possible.\n\n## In-depth overview\n\nVoyager endpoints look like this:\n\n```text\nhttps://www.linkedin.com/voyager/api/identity/profileView/tom-quirk\n```\n\nOr, more clearly\n\n```text\n ___________________________________ _______________________________\n|             base path             |            resource           |\nhttps://www.linkedin.com/voyager/api /identity/profileView/tom-quirk\n```\n\nThey are authenticated with a simple cookie, which we send with every request, along with a bunch of headers.\n\nTo get a cookie, we POST a given username and password (of a valid Linkedin user account) to `https://www.linkedin.com/uas/authenticate`.\n\n### To find endpoints\n\nWe're looking at the Linkedin website and we spot some data we want. What now?\n\nThe most reliable method to find the relevant endpoint is to:\n\n1. `view source`\n2. `command-f`/search the page for some keyword in the data. This will exist inside of a `<code>` tag.\n3. Scroll down to the **next adjacent element** which will be another `<code>` tag, probably with an `id` that looks something like\n\n   ```html\n   <code style=\"display: none\" id=\"datalet-bpr-guid-3900675\">\n     {\"request\":\"/voyager/api/identity/profiles/tom-quirk/profileView\",\"status\":200,\"body\":\"bpr-guid-3900675\"}\n   </code>\n   ```\n\n4. The value of `request` is the url! 🤘\n\nYou can also use the `network` tab in you browsers developer tools, but you will encounter mixed results.\n\n### How Clients query Voyager\n\nlinkedin.com queries data using the [Rest-li Protocol](https://linkedin.github.io/rest.li/spec/protocol). Rest-li is an internal query language/syntax where clients (like linkedin.com) to specify what data they want (similar to the GraphQL concept).\n\nHere's an example of making a request for an organisation's `name` and `groups` (the Linkedin groups it manages):\n\n```text\n/voyager/api/organization/companies?decoration=(name,groups*~(entityUrn,largeLogo,groupName,memberCount,websiteUrl,url))&q=universalName&universalName=linkedin\n```\n\nThe \"querying\" happens in the `decoration` parameter, which looks like\n\n```text\n(\n    name,\n    groups*~(entityUrn,largeLogo,groupName,memberCount,websiteUrl,url)\n)\n```\n\nSo here, we request an organisation name, and a list of groups, where for each group we want `largeLogo`, `groupName`, etc.\n\nDifferent endpoints use different parameters (and perhaps even different syntaxes) to specify these queries. Notice that the above query had a parameter `q` whose value was `universalName`; the query was then specified with the `decoration` parameter.\n\nIn contrast, the `/search/cluster` endpoint uses `q=guided`, and specifies its query with the `guided` parameter, whose value is something like\n\n```text\nList(v->PEOPLE)\n```\n\nIt could be possible to document (and implement a nice interface for) this query language - as we add more endpoints to this project, I'm sure it will become more clear if such a thing would be possible (and if it's worth it).\n\n## Terms and Conditions\n\nBy using this project, you agree to the following Terms and Conditions. We reserve the right to block any user of this repository that does not meet these conditions.\n\n### Usage\n\nThis project may not be used for any of the following:\n\n- Commercial use\n- Spam\n- Storage of any Personally Identifiable Information\n- Personal abuse (i.e. verbal abuse)\n\n## Legal\n\nThis code is in no way affiliated with, authorized, maintained, sponsored or endorsed by Linkedin or any of its affiliates or subsidiaries. This is an independent and unofficial API. Use at your own risk.\n\nThis project violates Linkedin's User Agreement Section 8.2, and because of this, Linkedin may (and will) temporarily or permanently ban your account. We are not responsible for your account being banned.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/agonzalezreyes/linkedin-api",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "linkedin-api-no-cookie",
    "package_url": "https://pypi.org/project/linkedin-api-no-cookie/",
    "platform": null,
    "project_url": "https://pypi.org/project/linkedin-api-no-cookie/",
    "project_urls": {
      "Homepage": "https://github.com/agonzalezreyes/linkedin-api"
    },
    "release_url": "https://pypi.org/project/linkedin-api-no-cookie/1.12/",
    "requires_dist": [
      "requests",
      "beautifulsoup4",
      "lxml"
    ],
    "requires_python": "",
    "summary": "Python wrapper for the Linkedin API",
    "version": "1.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16563913,
  "releases": {
    "1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1418f42b9c441c7663e78567e3dffef01707de326cab03e1f66d93ca722043e6",
          "md5": "cc4953c6f1fc35a14764556c268ea5e4",
          "sha256": "c79206045ae4e7819dcf312661af29fc1bc60c41e2151513060cc87b16c9985c"
        },
        "downloads": -1,
        "filename": "linkedin_api_no_cookie-1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc4953c6f1fc35a14764556c268ea5e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22133,
        "upload_time": "2023-01-25T05:10:22",
        "upload_time_iso_8601": "2023-01-25T05:10:22.957124Z",
        "url": "https://files.pythonhosted.org/packages/14/18/f42b9c441c7663e78567e3dffef01707de326cab03e1f66d93ca722043e6/linkedin_api_no_cookie-1.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47432d9cb01f4d68b0227d33cc6a5f1481574ba2a7ed1c97a7198306869cc933",
          "md5": "e097ea8c72aa0ca7ff1230343124d1eb",
          "sha256": "d3788e29194996584e20e6c1ee24d653a2ffaa8b3286024f951b96eca2e62166"
        },
        "downloads": -1,
        "filename": "linkedin_api_no_cookie-1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "e097ea8c72aa0ca7ff1230343124d1eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23757,
        "upload_time": "2023-01-25T05:10:24",
        "upload_time_iso_8601": "2023-01-25T05:10:24.878108Z",
        "url": "https://files.pythonhosted.org/packages/47/43/2d9cb01f4d68b0227d33cc6a5f1481574ba2a7ed1c97a7198306869cc933/linkedin_api_no_cookie-1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68b345bdb249352b330c95ecf129238abd615c4d52734d96a417e592625c91e9",
          "md5": "2a908c005f6e766e3651656c59b29840",
          "sha256": "8d0bbef2ffec6636e39ba5a599f20aac0f2dda2e2896b9e3003af98b45aa6045"
        },
        "downloads": -1,
        "filename": "linkedin_api_no_cookie-1.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a908c005f6e766e3651656c59b29840",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22106,
        "upload_time": "2023-01-25T16:18:04",
        "upload_time_iso_8601": "2023-01-25T16:18:04.767289Z",
        "url": "https://files.pythonhosted.org/packages/68/b3/45bdb249352b330c95ecf129238abd615c4d52734d96a417e592625c91e9/linkedin_api_no_cookie-1.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "469f22ae51100153b3c81a86f593cb0961c5eaed4caf67cc3602db499c9b305d",
          "md5": "63b4279516636a89fade03e77c00c049",
          "sha256": "649bfd6d33c84d3e1b640a76827983194f1fda1ac299dcdec8868606c2081e0f"
        },
        "downloads": -1,
        "filename": "linkedin_api_no_cookie-1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "63b4279516636a89fade03e77c00c049",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23730,
        "upload_time": "2023-01-25T16:18:07",
        "upload_time_iso_8601": "2023-01-25T16:18:07.915092Z",
        "url": "https://files.pythonhosted.org/packages/46/9f/22ae51100153b3c81a86f593cb0961c5eaed4caf67cc3602db499c9b305d/linkedin_api_no_cookie-1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68b345bdb249352b330c95ecf129238abd615c4d52734d96a417e592625c91e9",
        "md5": "2a908c005f6e766e3651656c59b29840",
        "sha256": "8d0bbef2ffec6636e39ba5a599f20aac0f2dda2e2896b9e3003af98b45aa6045"
      },
      "downloads": -1,
      "filename": "linkedin_api_no_cookie-1.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2a908c005f6e766e3651656c59b29840",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22106,
      "upload_time": "2023-01-25T16:18:04",
      "upload_time_iso_8601": "2023-01-25T16:18:04.767289Z",
      "url": "https://files.pythonhosted.org/packages/68/b3/45bdb249352b330c95ecf129238abd615c4d52734d96a417e592625c91e9/linkedin_api_no_cookie-1.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "469f22ae51100153b3c81a86f593cb0961c5eaed4caf67cc3602db499c9b305d",
        "md5": "63b4279516636a89fade03e77c00c049",
        "sha256": "649bfd6d33c84d3e1b640a76827983194f1fda1ac299dcdec8868606c2081e0f"
      },
      "downloads": -1,
      "filename": "linkedin_api_no_cookie-1.12.tar.gz",
      "has_sig": false,
      "md5_digest": "63b4279516636a89fade03e77c00c049",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23730,
      "upload_time": "2023-01-25T16:18:07",
      "upload_time_iso_8601": "2023-01-25T16:18:07.915092Z",
      "url": "https://files.pythonhosted.org/packages/46/9f/22ae51100153b3c81a86f593cb0961c5eaed4caf67cc3602db499c9b305d/linkedin_api_no_cookie-1.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}