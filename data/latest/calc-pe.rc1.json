{
  "info": {
    "author": "Daniele Ongari",
    "author_email": "daniele.ongari@epfl.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python"
    ],
    "description": "# calc_pe\n\ncalc_pe computes the parasitic energy for CO<sub>2</sub> capture from CO<sub>2</sub> and N<sub>2</sub>  isotherms.\n\n### Install\n```\ngit clone https://github.com/danieleongari/calc_pe.git\ncd calc_pe\npip install .\n```\n\n### Input and run\n\n```\n$ calc_pe Mg-MOF74 coal -rho 914.88 -cp 896 -process TPSA -datapath ./tests/\n```\n\nSee `calc_pe --help` for the input description.\n\nUse `calc_pe --log` for printing the debug log file.\n\n#### NB:\n\n* The isotherm data should be put in the `{datapath}/{structure_name}` folder.\n\n* The temperature at which the isotherm data is calculated is automatically\nread from the filename `{datapath}/{structure_name}/{adsorbate_name}/{temperature}.csv`.\n\n* Isotherms are fitted using [`pyiast.InterpolatorIsotherm`](https://pyiast.readthedocs.io/en/latest/#interpolatorisotherm)\nwith `fill_value = uptake.max()`. Therefore, the isotherm should be well\nsaturated, because for higher pressures the loading is extrapolated as the\nmaximum uptake.\n\n* The heat of adsorption (HoA) needs to be provided in kJ/mol for all the\nloading pressures of the isotherm. It is needed to shift the original isotherm\nto a new temperature using the Classius-Clapyeron equation. Note that the HoA\nis defined here with a NEGATIVE value.\n\n* You can provide density and cp as single value files `cp.csv` and `rho.csv`:\nsee the tests as example.\n\n* For testing the minimal inputs are:\n```\n$ cd tests/\n$ calc_pe Mg-MOF74 coal\n$ calc_pe HKUST-1 coal\n```\n\n### Output\n\nIn the output, the program prints:\n\n```\nMg-MOF74: PE(MJ/kg)= 0.867: Pd(bar)= 0.01 Td(K)= 333.0 EL(-) = 0.235 Q(MJ/kg)= 0.124 Wcomp(MJ/kg)= 0.743 WCv(kg/m3)= 114.655 WCg(kg/kg)= 0.193 pur(-)= 0.967\n```\n\n* Name of the adsorbent\n* `PE(MJ/kg)`: parasitic energy per kg of CO<sub>2</sub> (Note: PE=Q+Wcomp)\n* `Pd(bar)`: optimal desorption pressure\n* `Td(K)`: optimal desorption temperature\n* `EL(J/J)`: fraction of electricity loss\n* `Q(MJ/kg)`: heat requirement\n* `Wcomp(MJ/kg)`: compression work\n* `WCv(kg/m3)`: volumetric working capacity, i.e.,\nmass of CO<sub>2</sub> produced per m<sup>2</sup> of bed,\nconsidering `-vf` void fraction.\n* `WCg(kg/kg)`: gravimetric working capacity, i.e.,\nmass of CO<sub>2</sub> produced per kg of bed,\nconsidering `-vf` void fraction.\n* `pur(mol/mol)`: molar fraction of CO<sub>2</sub> final purity (-)\n\nA warning is printed in case of negative working capacity\nfor all the tested desorption conditions, e.g.:\n\n```\n$ calc_pe HKUST-1 air\nHKUST-1: Unfeasible process!\n```\n\n#### NB:\n\n* The Henry coefficient for CO<sub>2</sub> is a good pre-screening parameter\n\n* The working capacity is also very important, since it allows for less cycles\nusing the same amount of adsorbent (or less adsorbent needed with the same\ncycles).\n\n* The final CO<sub>2</sub> purity is less than the imposed purity, `-yd`\n(default: 0.99): we use the `yd` value as an approximation of the gas phase at\ndesorption to get the uptake in the adsorbent at the desorption condition\n(using IAST). Note that the PE is not very sensitive to `yd`\n(see [Joos et al. (2016)](http://doi.org/10.1039/c6fd00031b))\nand there is not a motivated need for reiteration.\nThe final CO<sub>2</sub> purity is computed as the working capacity of\nCO<sub>2</sub> over the sum of the working capacities of both CO<sub>2</sub>\nand N<sub>2</sub>.\n\n* By default the program prints the results for optimal PE (i.e., the lowest).\nHowever, one can search for other optimal parameters by using the `-opt` command:\nlowest `Q` if he is not interest in compressing the CO<sub>2</sub>,\nhighest working capacity (`WC`) or highest CO<sub>2</sub> final purity (`pur`).\n*Note that these may not be anymore optimization problems, returning just\nthe max/min T and P conditions.*\n\n\n### Dependencies\n\ncalc_pe uses:\n\n* [pyIAST](https://github.com/CorySimon/pyIAST)\n* numpy\n* pandas\n\n### References\n\nIf you use calc_pe, please consider citing:\n\n* [Evaluating different classes of porous materials for carbon capture (2014)](http://doi.org/10.1039/C4EE02636E)\n* [In silico screening of carbon-capture materials (2012)](http://dx.doi.org/10.1038/nmat3336)\n\nThis program has been used in:\n\n* [Building a Consistent and Reproducible Database for Adsorption Evaluation in Covalentâ€“Organic Frameworks](https://pubs.acs.org/doi/abs/10.1021/acscentsci.9b00619)\n\n### Authors\n* Johanna M. Huck\n* Li-Chiang Lin\n* Cory M. Simon\n* Adam Berger\n* Daniele Ongari (restyling, December 2018)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danieleongari/calc_pe",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "calc-pe",
    "package_url": "https://pypi.org/project/calc-pe/",
    "platform": "",
    "project_url": "https://pypi.org/project/calc-pe/",
    "project_urls": {
      "Homepage": "https://github.com/danieleongari/calc_pe"
    },
    "release_url": "https://pypi.org/project/calc-pe/1.0.1/",
    "requires_dist": [
      "numpy",
      "pandas (>=0.24.0)",
      "pyiast"
    ],
    "requires_python": "",
    "summary": "Calculator for the CO2 parasitic energy from CO2 and N2 isotherms",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6137101,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02764c36b7a892c369d7b508d06bce385d4fc991198614277add72e91fa3dcea",
          "md5": "55571d9eac48a3bde53a9e27dcae5e42",
          "sha256": "cbfc4cad837297db846ab99554b164348763f0fd0ad1e8d7d2a9057d09739811"
        },
        "downloads": -1,
        "filename": "calc_pe-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55571d9eac48a3bde53a9e27dcae5e42",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 9865,
        "upload_time": "2019-11-14T15:10:46",
        "upload_time_iso_8601": "2019-11-14T15:10:46.917383Z",
        "url": "https://files.pythonhosted.org/packages/02/76/4c36b7a892c369d7b508d06bce385d4fc991198614277add72e91fa3dcea/calc_pe-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e79fc11c3e2ebb69052610d36f8fe8e34a72e74aac85a8539107ffc146174d8",
          "md5": "0bd1e2201e39a989c079c68745727d26",
          "sha256": "46fcc92974b06486864492f23aa9580aaee026d88a26476c533bd8dabd9d801c"
        },
        "downloads": -1,
        "filename": "calc_pe-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0bd1e2201e39a989c079c68745727d26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9713,
        "upload_time": "2019-11-14T15:10:49",
        "upload_time_iso_8601": "2019-11-14T15:10:49.403307Z",
        "url": "https://files.pythonhosted.org/packages/2e/79/fc11c3e2ebb69052610d36f8fe8e34a72e74aac85a8539107ffc146174d8/calc_pe-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02764c36b7a892c369d7b508d06bce385d4fc991198614277add72e91fa3dcea",
        "md5": "55571d9eac48a3bde53a9e27dcae5e42",
        "sha256": "cbfc4cad837297db846ab99554b164348763f0fd0ad1e8d7d2a9057d09739811"
      },
      "downloads": -1,
      "filename": "calc_pe-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55571d9eac48a3bde53a9e27dcae5e42",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 9865,
      "upload_time": "2019-11-14T15:10:46",
      "upload_time_iso_8601": "2019-11-14T15:10:46.917383Z",
      "url": "https://files.pythonhosted.org/packages/02/76/4c36b7a892c369d7b508d06bce385d4fc991198614277add72e91fa3dcea/calc_pe-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e79fc11c3e2ebb69052610d36f8fe8e34a72e74aac85a8539107ffc146174d8",
        "md5": "0bd1e2201e39a989c079c68745727d26",
        "sha256": "46fcc92974b06486864492f23aa9580aaee026d88a26476c533bd8dabd9d801c"
      },
      "downloads": -1,
      "filename": "calc_pe-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0bd1e2201e39a989c079c68745727d26",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9713,
      "upload_time": "2019-11-14T15:10:49",
      "upload_time_iso_8601": "2019-11-14T15:10:49.403307Z",
      "url": "https://files.pythonhosted.org/packages/2e/79/fc11c3e2ebb69052610d36f8fe8e34a72e74aac85a8539107ffc146174d8/calc_pe-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}