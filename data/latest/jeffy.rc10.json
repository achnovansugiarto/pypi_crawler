{
  "info": {
    "author": "Serverless Operations",
    "author_email": "info@serverless-operations.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/jeffy.svg)](https://badge.fury.io/py/jeffy) ![Jeffy CI](https://github.com/serverless-operations/jeffy/workflows/Jeffy%20CI/badge.svg) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Python Versions](https://img.shields.io/pypi/pyversions/jeffy.svg)](https://pypi.org/project/jeffy/)\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/serverless-operations/jeffy/master/logo.png\" alt=\"Serverless Application Framework Jeffy\" width=\"60%\">\n</div>\n\n<div align=\"center\">\n  <p><strong>Jeffy is Serverless Application Framework for Python AWS Lambda.</strong></p>\n</div>\n\n\n# Description\nJeffy is Serverless **\"Application\"** Framework for Python, which is\nsuite of Utilities for Lambda functions to make it easy to develop serverless applications.\n\nMainly, Jeffy is focusing on three things.\n\n- Logging: Providing easy to see JSON format logging. All decorators are capturing all events, responses and errors. And you can configure to inject additional attributes what you want to see to logs.\n- Decorators: To save time to implement common things for Lambda functions, providing some useful decorators and utiliies.\n- Tracing: Traceable events within related functions and AWS services with generating and passing `correlation_id`.\n- Configurable: You can customize the framework settings easily.\n\n<!-- vscode-markdown-toc -->\n* 1. [Logging](#Logging)\n\t* 1.1. [Basic Usage](#BasicUsage)\n\t* 1.2. [Injecting additional attributes to logs](#Injectingadditionalattributestologs)\n\t* 1.3. [Change the attribute name of correlation id](#Changetheattributenameofcorrelationid)\n\t* 1.4. [Change the log lervel](#Changetheloglervel)\n* 2. [Event handlers](#Eventhandlers)\n\t* 2.1. [common](#common)\n\t* 2.2. [rest_api](#rest_api)\n\t* 2.3. [sqs](#sqs)\n\t* 2.4. [sns](#sns)\n\t* 2.5. [kinesis_streams](#kinesis_streams)\n\t* 2.6. [dynamodb_streams](#dynamodb_streams)\n\t* 2.7. [s3](#s3)\n\t* 2.8. [schedule](#schedule)\n* 3. [SDK](#SDK)\n\t* 3.1. [Kinesis Clinent](#KinesisClinent)\n\t* 3.2. [SNS Client](#SNSClient)\n\t* 3.3. [SQS Client](#SQSClient)\n\t* 3.4. [S3 Client](#S3Client)\n* 4. [Encoding](#Encoding)\n* 5. [Validation](#Validation)\n\t* 5.1. [JSONSchemaValidator](#JSONSchemaValidator)\n\n<!-- vscode-markdown-toc-config\n\tnumbering=true\n\tautoSave=true\n\t/vscode-markdown-toc-config -->\n<!-- /vscode-markdown-toc -->\n\n# Install\n\n```sh\n$ pip install jeffy\n```\n\n# Features\n\n##  1. <a name='Logging'></a>Logging\n\n###  1.1. <a name='BasicUsage'></a>Basic Usage\nJeffy logger automatically inject some Lambda contexts to CloudWatchLogs.\n\n```python\nfrom jeffy.framework import get_app\n\napp = get_app()\n\ndef handler(event, context):\n    app.logger.info({'foo': 'bar'})\n```\n\nOutput in CloudWatchLogs\n```json\n{\n   \"msg\": {\"foo\":\"bar\"},\n   \"aws_region\":\"us-east-1\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]d7729c0ea59a4939abb51180cda859bf\",\n   \"correlation_id\":\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"\n}\n```\n\n###  1.2. <a name='Injectingadditionalattributestologs'></a>Injecting additional attributes to logs\nYou can inject some additional attributes what you want to output with using `update_context` method.\n\n```python\nfrom jeffy.framework import get_app\napp = get_app()\n\napp.logger.update_context({\n   'username': 'user1',\n   'email': 'user1@example.com'\n})\n\ndef handler(event, context):\n    app.logger.info({'foo': 'bar'})\n```\n\nOutput in CloudWatchLogs\n```json\n{\n   \"msg\": {\"foo\":\"bar\"},\n   \"username\":\"user1\",\n   \"email\":\"user1@example.com\",\n   \"aws_region\":\"us-east-1\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]d7729c0ea59a4939abb51180cda859bf\",\n   \"correlation_id\":\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"\n}\n```\n\n###  1.3. <a name='Changetheattributenameofcorrelationid'></a>Change the attribute name of correlation id\nYou can change the attribute name of correlation id in the setting options. \n\n```python\nfrom jeffy.framework import get_app\nfrom jeffy.settings import Logging\napp = get_app(logging=Logging(correlation_attr_name='my-trace-id'))\n\ndef handler(event, context):\n    app.logger.info({'foo': 'bar'})\n```\n\nOutput in CloudWatchLogs\n```json\n{\n   \"msg\": {\"foo\":\"bar\"},\n   \"aws_region\":\"us-east-1\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]d7729c0ea59a4939abb51180cda859bf\",\n   \"my-trace-id\":\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"\n}\n```\n\n###  1.4. <a name='Changetheloglervel'></a>Change the log lervel\nYou can change the log level of Jeffy logger. \n\n```python\nimport logging\nfrom jeffy.framework import get_app\nfrom jeffy.settings import Logging\napp = get_app(logging=Logging(log_level=logging.DEBUG))\n\ndef handler(event, context):\n    app.logger.info({'foo': 'bar'})\n```\n\n##  2. <a name='Eventhandlers'></a>Event handlers\nDecorators make simple to implement common lamdba tasks, such as parsing array from Kinesis, SNS, SQS events etc.\n\nHere are provided decorators\n\n###  2.1. <a name='common'></a>common\n`common` decorator allows you to output `event`, `response` and error infomations when you face Exceptions\n\n```python\nfrom jeffy.framework import get_app\napp = get_app()\n\napp.logger.update_context({\n   'username': 'user1',\n   'email': 'user1@example.com'\n})\n\n@app.handlers.common()\ndef handler(event, context):\n    ...\n```\n\nError output with auto_logging\n\n```json\n{\n   \"msg\": \"JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\", \n   \"exec_info\":\"Traceback (most recent call last):\n  File '/var/task/jeffy/decorators.py', line 41, in wrapper\n    raise e\n  File '/var/task/jeffy/decorators.py', line 36, in wrapper\n    result = func(event, context)\n  File '/var/task/handler.py', line 8, in hello\n    json.loads('s')\n  File '/var/lang/lib/python3.8/json/__init__.py', line 357, in loads\n    return _default_decoder.decode(s)\n  File '/var/lang/lib/python3.8/json/decoder.py', line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File '/var/lang/lib/python3.8/json/decoder.py', line 355, in raw_decode\n    raise JSONDecodeError('Expecting value', s, err.value) from None\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]90e1f70f6e774e07b681e704646feec0\",\n   \"correlation_id\":\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"\n}\n\n```\n\n###  2.2. <a name='rest_api'></a>rest_api\nDecorator for API Gateway event. Automatically get the correlation id from request header and set the correlation id to response header.\n\nDefault encoding is `jeffy.encoding.json.JsonEncoding`.\n\n```python\nfrom jeffy.framework import get_app\napp = get_app()\n\n@app.handlers.rest_api()\ndef handler(event, context):\n    return {\n        'statusCode': 200,\n        'headers': 'Content-Type':'application/json',\n        'body': json.dumps({\n            'resutl': 'ok.'\n        })\n    }\n```\n\nDefault header name is 'x-jeffy-correlation-id'. \nYou can change this name in the setting option.\n\n```python\nfrom jeffy.framework import get_app\nfrom jeffy.settings import RestApi\napp = get_app(\n    rest_api=RestApi(correlation_id_header='x-foo-bar'))\n\n@app.handlers.rest_api()\ndef handler(event, context):\n    return {\n        'statusCode': 200,\n        'headers': 'Content-Type':'application/json',\n        'body': json.dumps({\n            'resutl': 'ok.'\n        })\n    }\n```\n\n###  2.3. <a name='sqs'></a>sqs\nDecorator for sqs event. Automaticlly parse `\"event.Records\"` list from SQS event source to each items for making it easy to treat it inside main process of Lambda.\n\nDefault encoding is `jeffy.encoding.json.JsonEncoding`.\n\n```python\nfrom jeffy.framework import get_app\napp = get_app()\n\n@app.handlers.sqs()\ndef handler(event, context):\n    return event['foo']\n    \"\"\"\n    \"event.Records\" list from SQS event source was parsed each items\n    if event.Records value is the following,\n     [\n         {'foo': 1},\n         {'foo': 2}\n     ]\n\n    event['foo'] value is 1 and 2, event['correlation_id'] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n###  2.4. <a name='sns'></a>sns\nDecorator for sns event. Automaticlly parse `event.Records` list from SNS event source to each items for making it easy to treat it inside main process of Lambda.\n\nDefault encoding is `jeffy.encoding.json.JsonEncoding`.\n\n```python\nfrom jeffy.framework import get_app\napp = get_app()\n\n@app.handlers.sns()\ndef handler(event, context):\n    return event['foo']\n    \"\"\"\n    \"event.Records\" list from SNS event source was parsed each items\n    if event.Records value is the following,\n     [\n         {'foo': 1},\n         {'foo': 2}\n     ]\n\n    event['foo'] value is 1 and 2, event['correlation_id'] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n###  2.5. <a name='kinesis_streams'></a>kinesis_streams\nDecorator for kinesis stream event. Automaticlly parse `event.Records` list from Kinesis event source to each items and decode it with base64 for making it easy to treat it inside main process of Lambda.\n\nDefault encoding is `jeffy.encoding.json.JsonEncoding`.\n\n```python\nfrom jeffy.framework import get_app\napp = get_app()\n\n@app.handlers.kinesis_streams()\ndef handler(event, context):\n    return event['foo']\n    \"\"\"\n    \"event.Records\" list from Kinesis event source was parsed each items\n    and decoded with base64 if event.Records value is the following,\n     [\n         <base64 encoded value>,\n         <base64 encoded value>\n     ]\n\n    event['foo'] value is 1 and 2, event['correlation_id'] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n###  2.6. <a name='dynamodb_streams'></a>dynamodb_streams\nDecorator for dynamodb stream event. Automaticlly parse `event.Records` list from Dynamodb event source to  items for making it easy to treat it inside main process of Lambda.\n\n```python\nfrom jeffy.framework import get_app\napp = get_app()\n\n@app.handlers.dynamodb_streams()\ndef handler(event, context):\n    return event['foo']\n    \"\"\"\n    \"event.Records\" list from Dynamodb event source was parsed each items\n    if event.Records value is the following,\n     [\n         {'foo': 1},\n         {'foo': 2}\n     ]\n\n    event['foo'] value is 1 and 2, event['correlation_id'] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n###  2.7. <a name='s3'></a>s3\nDecorator for S3 event. Automatically parse body stream from triggered S3 object and S3 bucket and key name to Lambda.\n\n**This handler requires `s3:GetObject` permission.**\n\nDefault encoding is `jeffy.encoding.bytes.BytesEncoding`.\n\n```python\nfrom jeffy.framework import get_app\napp = get_app()\n\n@app.handlers.s3()\ndef handler(event, context):\n    event['key']            # S3 bucket key\n    event['bucket_name']    # S3 bucket name\n    event['body']           # Bytes data of the object\n    event['correlation_id'] # correlation_id\n    event['metadata']       # object matadata\n```\n\n###  2.8. <a name='schedule'></a>schedule\nDecorator for schedule event. just captures correlation id before main Lambda process. do nothing other than that.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.handlers.schedule()\ndef handler(event, context):\n    ...\n```\n\n##  3. <a name='SDK'></a>SDK\nJeffy has the original wrapper clients of AWS SDK(boto3). The clients automatically inject `correlation_id`  in the event payload and encode it to the specified(or default) encoding. \n\n###  3.1. <a name='KinesisClinent'></a>Kinesis Clinent\n\nDefault encoding is `jeffy.encoding.json.JsonEncoding`.\n\n```python\nfrom jeffy.framework import get_app\nfrom jeffy.sdk.kinesis import Kinesis\n\napp = get_app()\n\n@app.handlers.kinesis_streams()\ndef handler(event, context):\n    Kinesis().put_record(\n        stream_name=os.environ['STREAM_NAME'],\n        data={'foo': 'bar'},\n        partition_key='your_partition_key'\n    )\n```\n\n###  3.2. <a name='SNSClient'></a>SNS Client\n\nDefault encoding is `jeffy.encoding.json.JsonEncoding`.\n\n```python\nfrom jeffy.framework import get_app\nfrom jeffy.sdk.sns import Sns\n\napp = get_app()\n\n@app.handlers.sns()\ndef handler(event, context):\n    Sns().publish(\n        topic_arn=os.environ['TOPIC_ARN'],\n        subject='hello',\n        message='world'\n    )\n```\n\n###  3.3. <a name='SQSClient'></a>SQS Client\n\nDefault encoding is `jeffy.encoding.json.JsonEncoding`.\n\n```python\nfrom jeffy.framework import get_app\nfrom jeffy.sdk.sqs import Sqs\n\napp = get_app()\n\n@app.handlers.sqs()\ndef handler(event, context):\n    Sqs().send_message(\n        queue_url=os.environ['QUEUE_URL'],\n        message='hello world'\n    )\n```\n\n###  3.4. <a name='S3Client'></a>S3 Client\n\nDefault encoding is `jeffy.encoding.bytes.BytesEncoding`.\n\n```python\nfrom jeffy.framework import get_app\nfrom jeffy.sdk.s3 import S3\n\napp = get_app()\n\n@app.handlers.s3()\ndef handler(event, context):\n    S3().upload_file(\n        file_path='/path/to/file', \n        bucket_name=os.environ['BUCKET_NAME'],\n        key='key/of/object'\n    )\n```\n\n##  4. <a name='Encoding'></a>Encoding\nEach handler and SDK client has a default encoding and automatically encode/decode the data from/to python object. And you can change the encoding.\n\nCurrently, the encodings you can choose are:\n- `jeffy.encoding.bytes.BytesEncoding`\n- `jeffy.encoding.json.JsonEncoding`\n\nEach encoding class also has `encode` methods to encode `bytes` data into own encoding.\n\n```python\nfrom jeffy.framework import get_app\nfrom jeffy.encoding.bytes import BytesEncoding\nfrom jeffy.sdk.kinesis import Kinesis\n\napp = get_app()\nbytes_encoding = BytesEncoding()\n\n@app.handlers.kinesis_streams(encoding=bytes_encoding)\ndef handler(event, context):\n    kinesis = Kinesis(encoding=bytes_encoding)\n    kinesis.put_record(\n        stream_name=os.environ['STREAM_NAME'],\n        data=bytes_encoding.encode('foo'.encode('utf-8)),\n        partition_key='your-partition-key'\n    )\n```\n\n##  5. <a name='Validation'></a>Validation\n\n###  5.1. <a name='JSONSchemaValidator'></a>JSONSchemaValidator\n`JsonSchemaValidator` is automatically validate event payload with following json schema you define. raise `ValidationError` exception if the validation fails.\n\n```python\nfrom jeffy.framework import get_app\nfrom jeffy.validator.jsonschema import JsonSchemaValidator\n\napp = get_app()\n\n@app.handlers.rest_api(\n    validator=JsonSchemaValidator(schema={\n        'type': 'object',\n        'properties': {\n            'message': {'type': 'string'}}}))\ndef handler(event, context):\n    return {\n        'statusCode': 200,\n        'headers': 'Content-Type':'application/json',\n        'body': json.dumps({\n            'message': 'ok.'\n        })\n    }\n```\n\n# Requirements\n\n- Python 3.6 or higher\n\nDevelopment\n-----------\n\n-   Source hosted at [GitHub](https://github.com/serverless-operations/jeffy)\n-   Report issues/questions/feature requests on [GitHub\n    Issues](https://github.com/serverless-operations/jeffy/issues)\n\nPull requests are very welcome! Make sure your patches are well tested.\nIdeally create a topic branch for every separate change you make. For\nexample:\n\n1.  Fork the repo\n2.  Create your feature branch (`git checkout -b my-new-feature`)\n3.  Commit your changes (`git commit -am\"Added some feature\"`)\n4.  Push to the branch (`git push origin my-new-feature`)\n5.  Create new Pull Request\n\nAuthors\n-------\n\n- Bought up initial idea by [Masashi Terui](https://github.com/marcy-terui) (<marcy9114@gmail.com>)\n- Created and maintained by [Serverless Operations, Inc]()\n\nCredits\n-------\nJeffy is inspired by the following products.\n- [Lambda Powertools](https://github.com/awslabs/aws-lambda-powertools)\n- [DAZN Lambda Powertools](https://github.com/getndazn/dazn-lambda-powertools)\n- [lambda_decorators](https://github.com/dschep/lambda-decorators)\n\nLicense\n-------\n\nMIT License (see [LICENSE](https://github.com/serverless-operations/jeffy/blob/master/LICENSE))",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/serverless-operations/jeffy",
    "keywords": "aws lambda serverless faas",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jeffy",
    "package_url": "https://pypi.org/project/jeffy/",
    "platform": "",
    "project_url": "https://pypi.org/project/jeffy/",
    "project_urls": {
      "Homepage": "https://github.com/serverless-operations/jeffy"
    },
    "release_url": "https://pypi.org/project/jeffy/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Event and Contract Driven Serverless \"Application\" Framework",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7539010,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9e1f7ee1532f81dc38675b3b424eb3acf299e1d7ab964fb58c7babeebd493c7",
          "md5": "78af88d1f1854203e7d25cc5a9bf55d4",
          "sha256": "95a0633ddda8b2ce2af3087bb086c1e6f360a6da6d550acd610c42ace317818a"
        },
        "downloads": -1,
        "filename": "jeffy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78af88d1f1854203e7d25cc5a9bf55d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7600,
        "upload_time": "2020-01-21T13:09:34",
        "upload_time_iso_8601": "2020-01-21T13:09:34.861615Z",
        "url": "https://files.pythonhosted.org/packages/a9/e1/f7ee1532f81dc38675b3b424eb3acf299e1d7ab964fb58c7babeebd493c7/jeffy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3fd1b21f4d1115058143c9605536fa6d5f7bb9449b191a72f7839ed6d0b0af2",
          "md5": "287ee9d58be1c790b16fd8c192905180",
          "sha256": "393b057dd3ff0e66c98cb5ec30459f2d97faede416ab8a94a5ee42af04823a22"
        },
        "downloads": -1,
        "filename": "jeffy-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "287ee9d58be1c790b16fd8c192905180",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9543,
        "upload_time": "2020-01-21T16:13:54",
        "upload_time_iso_8601": "2020-01-21T16:13:54.348501Z",
        "url": "https://files.pythonhosted.org/packages/e3/fd/1b21f4d1115058143c9605536fa6d5f7bb9449b191a72f7839ed6d0b0af2/jeffy-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40d7ec0991c3a047bc100ab0deed5a0db22d728ff4b6cf06f932ad967d95d134",
          "md5": "7c0f2c7d8dc5b08b51a719af8c92fd36",
          "sha256": "3ef775a5758475016a060a669febb83ab4ee24ca4b8c72cebb15a74efdabedb2"
        },
        "downloads": -1,
        "filename": "jeffy-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c0f2c7d8dc5b08b51a719af8c92fd36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10308,
        "upload_time": "2020-01-22T07:36:07",
        "upload_time_iso_8601": "2020-01-22T07:36:07.768159Z",
        "url": "https://files.pythonhosted.org/packages/40/d7/ec0991c3a047bc100ab0deed5a0db22d728ff4b6cf06f932ad967d95d134/jeffy-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f016b28ba51bc9cd86f57d2b9fe414ea87c587878453c9d0aee5c1174ecbb20",
          "md5": "33557eed0d8db8cc53a249b315325f56",
          "sha256": "5fd60fc403a5b8d3b579435c2f61b8f18abeca3f46562a776a41e9588d0a0ea5"
        },
        "downloads": -1,
        "filename": "jeffy-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33557eed0d8db8cc53a249b315325f56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10705,
        "upload_time": "2020-01-23T09:48:00",
        "upload_time_iso_8601": "2020-01-23T09:48:00.589590Z",
        "url": "https://files.pythonhosted.org/packages/1f/01/6b28ba51bc9cd86f57d2b9fe414ea87c587878453c9d0aee5c1174ecbb20/jeffy-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9c0b6b4a583d824283997010e034153e171f524ccb76421d1b1233b0d7733a5",
          "md5": "594efd4dbc82a5c5fd00bd3932e20f6e",
          "sha256": "42ad41118f075ea6618677d29c577942ab450bb72b59b8e5e55d70c1178de29d"
        },
        "downloads": -1,
        "filename": "jeffy-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "594efd4dbc82a5c5fd00bd3932e20f6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10746,
        "upload_time": "2020-02-08T07:56:38",
        "upload_time_iso_8601": "2020-02-08T07:56:38.090785Z",
        "url": "https://files.pythonhosted.org/packages/e9/c0/b6b4a583d824283997010e034153e171f524ccb76421d1b1233b0d7733a5/jeffy-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcd6bda09cf955cb2fbd19b67e414ff161675cdc016e31d71ecb9b73750b35ac",
          "md5": "e64fa82842a8b029cbbe32bd92a60a7e",
          "sha256": "14c1ac39147a90e7a4655afbe834f3ac088598e1482c72c1eb0bfdb3788e0724"
        },
        "downloads": -1,
        "filename": "jeffy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e64fa82842a8b029cbbe32bd92a60a7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21381,
        "upload_time": "2020-06-05T03:16:02",
        "upload_time_iso_8601": "2020-06-05T03:16:02.448258Z",
        "url": "https://files.pythonhosted.org/packages/fc/d6/bda09cf955cb2fbd19b67e414ff161675cdc016e31d71ecb9b73750b35ac/jeffy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8d1c876916c35ec1fd2c49eed660af21eb23e0a0d61c065ed6646b2a16c6b91",
          "md5": "4bbb68ed403a4066e9ede7bb74aeca93",
          "sha256": "156840032fa8b0ae4f4e29f8ba9c9e4d2328a84008d302a1d726e8bfe5e596fb"
        },
        "downloads": -1,
        "filename": "jeffy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4bbb68ed403a4066e9ede7bb74aeca93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16888,
        "upload_time": "2020-06-05T03:16:04",
        "upload_time_iso_8601": "2020-06-05T03:16:04.195280Z",
        "url": "https://files.pythonhosted.org/packages/b8/d1/c876916c35ec1fd2c49eed660af21eb23e0a0d61c065ed6646b2a16c6b91/jeffy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0bdb3808eddeee72bc0e61515fc9aa7db3a0c8db0d99dda246ff2da7cb734e6",
          "md5": "519578a3fc62a1f9a30dd8bfd7302b26",
          "sha256": "eaa81564aaa5ede72c8e6130453c5c476f5f5b880d3bc27a4ab5a82692f85a69"
        },
        "downloads": -1,
        "filename": "jeffy-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "519578a3fc62a1f9a30dd8bfd7302b26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16027,
        "upload_time": "2020-06-10T07:28:49",
        "upload_time_iso_8601": "2020-06-10T07:28:49.161178Z",
        "url": "https://files.pythonhosted.org/packages/d0/bd/b3808eddeee72bc0e61515fc9aa7db3a0c8db0d99dda246ff2da7cb734e6/jeffy-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd4b38e4d05fa5bc2d88f9e9c57e51e27c837fb1f5a739a68f3406b68ed3414a",
          "md5": "fd8d4fa649fda4cb7d109d435b569325",
          "sha256": "7df6071fcc89f4a85a0be58c5e3db1949bd9c4730114ead9f66dedaf06d7582c"
        },
        "downloads": -1,
        "filename": "jeffy-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fd8d4fa649fda4cb7d109d435b569325",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16048,
        "upload_time": "2020-06-10T09:22:51",
        "upload_time_iso_8601": "2020-06-10T09:22:51.713375Z",
        "url": "https://files.pythonhosted.org/packages/bd/4b/38e4d05fa5bc2d88f9e9c57e51e27c837fb1f5a739a68f3406b68ed3414a/jeffy-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eecfbfe5fad47d85f66cf68f0c63ca01a9f47314fa905921689635caa00511c8",
          "md5": "069a4dd937807df50fe0a86a2fa78558",
          "sha256": "205cbf4b63085dedab235c9b0664d43dbfebfeee34b13188dd2d2a5c67b6a8e2"
        },
        "downloads": -1,
        "filename": "jeffy-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "069a4dd937807df50fe0a86a2fa78558",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17394,
        "upload_time": "2020-06-17T06:03:09",
        "upload_time_iso_8601": "2020-06-17T06:03:09.922636Z",
        "url": "https://files.pythonhosted.org/packages/ee/cf/bfe5fad47d85f66cf68f0c63ca01a9f47314fa905921689635caa00511c8/jeffy-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17e50f38c4e1d6ae69a66147b1be7ad1b79394b1632a9cbff917b62849526ac6",
          "md5": "1e6d07c25c7004b46c12f92d42a245c5",
          "sha256": "82c68f0daf8ccc889c664277d4513f4a6158d6dc9585e36ff0e4b5bbbe53b424"
        },
        "downloads": -1,
        "filename": "jeffy-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1e6d07c25c7004b46c12f92d42a245c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17398,
        "upload_time": "2020-06-23T01:09:55",
        "upload_time_iso_8601": "2020-06-23T01:09:55.113275Z",
        "url": "https://files.pythonhosted.org/packages/17/e5/0f38c4e1d6ae69a66147b1be7ad1b79394b1632a9cbff917b62849526ac6/jeffy-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17e50f38c4e1d6ae69a66147b1be7ad1b79394b1632a9cbff917b62849526ac6",
        "md5": "1e6d07c25c7004b46c12f92d42a245c5",
        "sha256": "82c68f0daf8ccc889c664277d4513f4a6158d6dc9585e36ff0e4b5bbbe53b424"
      },
      "downloads": -1,
      "filename": "jeffy-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1e6d07c25c7004b46c12f92d42a245c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17398,
      "upload_time": "2020-06-23T01:09:55",
      "upload_time_iso_8601": "2020-06-23T01:09:55.113275Z",
      "url": "https://files.pythonhosted.org/packages/17/e5/0f38c4e1d6ae69a66147b1be7ad1b79394b1632a9cbff917b62849526ac6/jeffy-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}