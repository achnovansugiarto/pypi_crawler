{
  "info": {
    "author": "Michele Cotrufo",
    "author_email": "michele.cotrufo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pyThorlabsPM100x\n\n```pyThorlabsPM100x``` is a Python library/GUI interface to control the Thorlabs consoles PM100A and PM100D. The package is composed of two parts, a\nlow-level driver to perform basic operations, and high-level GUI, written with PyQt5, which can be easily embedded into other GUIs.\n\n## Table of Contents\n - [Installation](#installation)\n - [Usage as a stand-alone GUI interface](#usage-as-a-stand-alone-GUI-interface)\n - [Usage via the low-level driver](#usage-via-the-low-level-driver)\n\t* [Examples](#examples)\n\n## Installation\n\nUse the package manager pip to install,\n\n```bash\npip install pyThorlabsPM100x\n```\n\nThis should automatically install all libraries needed by ```pyThorlabsPM100x```. If any error occurs during installation, try installing first\nthe required dependencies separately (one by one), via\n```bash\npip install \"PyQt5>=5.15.6\"\npip install \"pyqtgraph>=0.12.4\"\npip install pyvisa\npip install numpy\n```\nand then run again ```pip install pyThorlabsPM100x```\n\n**Important:** in order to be accessible from this library, the console needs to be set to \"NI-VISA driver\" modality, and not to\n\"TLPM modality\". Typically, if you used recent Thorlabs software to acquire from a console, that will automatically set the console to \"TLPM modality\".\nYou can use the utility [Power Meter Driver Switcher](https://www.thorlabs.com/software_pages/ViewSoftwarePage.cfm?Code=OPM) to switch between modalities.\n\n## Usage as a stand-alone GUI interface\nThe installation should set up an entry point for the GUI. Just typing\n```bash\npyThorlabsPM100x\n```\nin the command prompt will start the GUI.\n\n## Usage via the low-level driver\n\n`pyThorlabsPM100x` provides also a low-level driver, based on the library `pyvisa`, to directly interface with the powermeter console.\n\n```python\nfrom pyThorlabsPM100x.driver import ThorlabsPM100x\npowermeter = ThorlabsPM100x()\navailable_devices = powermeter.list_devices()\nprint(available_devices)\npowermeter.connect_device(device_addr = available_devices[0][0])\nprint(powermeter.power)\npowermeter.disconnect_device()\n```\nThe method `list_devices()` returns a list, with each element representing one available device in the format `[address,identity,model]`. The string `address` contains \nthe physical address of the device. The line `powermeter.connect_device(device_addr = available_devices[0][0])` establishes a connection to the first device found.\nWe then print the power currently read by the console, and finally disconnect from it.\n\nThe class `ThorlabsPM100x` supports several properties and methods to communicate with the console and to read/change its settings. Some of the properties are read-only, while others can be set. A full list of properties and methods is available here below\n\n**Properties**\n\n| Property | Type | Description | <div style=\"width:300px\"> Can be set?</div> | Notes |\n| --- | --- | --- | --- | --- |\n| `power` | (float,str) | First element of list is the power currently read by the console, second element is the power units. | No |\n| `power_units` | str | Power units | No |\n| `wavelength` | int | Operating wavelength (in nanometers) of the console. | Yes | Each powermerter head has a different range of acceptable wavelengths. The driver will **not** return an error when trying to set a wavelength outside of this range. |\n| `power_range` | float | Current power range, defined as the maximum power measurable in the current range | Yes | When setting this property to a particular value X, the console will change the power range to the smallest power range which allows to measure the desired power X. |\n| `min_power_range` | float | Minimum power range available. | No | For the same console/head, this value might vary for different wavelengths. |\n| `max_power_range` | float | Maximum power range available. | No | For the same console/head, this value might vary for different wavelengths. |\n| `auto_power_range`| bool | Determines whether the consol is in auto power range or not. | Yes | |\n| `being_zeroed`| bool | It is True if zero of the device is currently being set. | No | The property `power` will return (None,'') if read while `being_zeroed==True` |\n\n**Methods**\n| Method | Returns | Description  |\n| --- | --- | --- | \n| `list_devices()` | list |  Returns a list of all available devices. Each element of the list identifies a different device, and it is a three-element list in the form `[address,identity,model]`. The string `address` contains the physical address of the device. The string `idn` contains the 'identity' of the device (which is the answer of the device to the visa query '*IDN?'. The string `model` contains the device model (either 'PM100A' or 'PM100D').| \n| `connect_device(device_addr: str)` | (str,int) |  Attempt to connect to the device identified by the address in the string  `device_addr`. It returns a list of two elements. The first element is a string containing either the ID number of the connected device or an error message. The second element is an integer, equal to 1 if connection was succesful or to 0 otherwise. | \n| `disconnect_device()` | (str,int)  | Attempt to disconnect the currently connected device. If no device is currently connected, it raises a `RuntimeError`. It returns a list of two elements. The first element is a string containing info on succesful disconnection or an error message. The second element is an integer, equal to 1 if disconnection was succesful or to 0 otherwise.  |\n| `read_min_max_wavelength()` | (float,float) |  Returns the minimum and maximum operating wavelengths for the connected device. If no device is currently connected, it raises a `RuntimeError`. | \n| `set_zero()` | int | Set the zero to the currently connected (if any) console. The returned value is 1 if the operation was successful, or 0 if any error occurred. | \n| `move_to_next_power_range(direction: int)`| None | It increases or decreases the power range of the console, depending on whether the input parameter is `direction=+1` or `direction=-1`. | \n\n\n### Examples\n```python\nfrom pyThorlabsPM100x.driver import ThorlabsPM100x\npowermeter = ThorlabsPM100x()\navailable_devices = powermeter.list_devices() #Check which devices are available\nprint(available_devices)\npowermeter.connect_device(device_addr = available_devices[0][0]) #Connect to the first available device\nprint(powermeter.power) #print the power currently read\nprint(powermeter.wavelength) #print the operating wavelength\n(minWL,maxWL) = powermeter.read_min_max_wavelength() #read max and min available wavelengths\npowermeter.wavelength = maxWL #set wavelength to the max\nprint(powermeter.power_range) #print current power range\npowermeter.move_to_next_power_range(direction=+1) #increaase power range\nprint(powermeter.power_range) #print new power range\npowermeter.disconnect_device() #disconnect the device\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MicheleCotrufo/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyPhotonLLTFContrast",
    "package_url": "https://pypi.org/project/pyPhotonLLTFContrast/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyPhotonLLTFContrast/",
    "project_urls": {
      "Homepage": "https://github.com/MicheleCotrufo/"
    },
    "release_url": "https://pypi.org/project/pyPhotonLLTFContrast/0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python library/GUI to access and control the LLTF Contrast filters made by Photon.",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15572867,
  "releases": {
    "0.2rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67d606f378b2b041e4ba8ce968bc6445523d3a9e02c13ff89df0994f6eb1288e",
          "md5": "a6b474b578ca2dff383f1df9e507bb71",
          "sha256": "c48b7ed1b45edb896bc32d8121c4b27f886862b296fbfc4eb2754bbe3b385df5"
        },
        "downloads": -1,
        "filename": "pyPhotonLLTFContrast-0.2rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6b474b578ca2dff383f1df9e507bb71",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11700,
        "upload_time": "2022-10-06T21:06:32",
        "upload_time_iso_8601": "2022-10-06T21:06:32.660163Z",
        "url": "https://files.pythonhosted.org/packages/67/d6/06f378b2b041e4ba8ce968bc6445523d3a9e02c13ff89df0994f6eb1288e/pyPhotonLLTFContrast-0.2rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1642f5c54e0716e7d8b7f5dea43eed8f0b7c350a128285312fe4de95b46ffc92",
          "md5": "90d4d3e21f713aa66a60c807128558da",
          "sha256": "724968160d4c9d5d9aa93596defcace9d51aeceea4e1fbf69966c24ecc6a8a58"
        },
        "downloads": -1,
        "filename": "pyPhotonLLTFContrast-0.2rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "90d4d3e21f713aa66a60c807128558da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13183,
        "upload_time": "2022-10-06T21:06:34",
        "upload_time_iso_8601": "2022-10-06T21:06:34.232090Z",
        "url": "https://files.pythonhosted.org/packages/16/42/f5c54e0716e7d8b7f5dea43eed8f0b7c350a128285312fe4de95b46ffc92/pyPhotonLLTFContrast-0.2rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "769d7cec4f54f66109ed6798b9e70e65838bca6d01d88bb910b1766df44eb530",
          "md5": "801ad39f8f40d90a05efd79434fdae70",
          "sha256": "bad0ab21616009fa5f3ca1ca595d36d8860d0f9ff6b67eef1d75877159ff4f48"
        },
        "downloads": -1,
        "filename": "pyPhotonLLTFContrast-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "801ad39f8f40d90a05efd79434fdae70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13772,
        "upload_time": "2022-10-28T22:42:59",
        "upload_time_iso_8601": "2022-10-28T22:42:59.553389Z",
        "url": "https://files.pythonhosted.org/packages/76/9d/7cec4f54f66109ed6798b9e70e65838bca6d01d88bb910b1766df44eb530/pyPhotonLLTFContrast-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3aeff7dc608c6139969baa802700bc62d083a4016c74714ed435d31b6cd3c1ae",
          "md5": "7db5ebf42a13f9d81b7cec26bcdc0031",
          "sha256": "f650f230d3b5f833426e3f3ce4f962dc7d78c421ecd046201576c94de82233fb"
        },
        "downloads": -1,
        "filename": "pyPhotonLLTFContrast-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7db5ebf42a13f9d81b7cec26bcdc0031",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13664,
        "upload_time": "2022-10-28T22:43:01",
        "upload_time_iso_8601": "2022-10-28T22:43:01.727687Z",
        "url": "https://files.pythonhosted.org/packages/3a/ef/f7dc608c6139969baa802700bc62d083a4016c74714ed435d31b6cd3c1ae/pyPhotonLLTFContrast-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79ea1f08da36b64200856c281119e344d031c9809eabc8bd3cc8e45b7137b030",
          "md5": "9998eee010aa6f2d86b954dbe196ceb1",
          "sha256": "502a36f3104324def34a81b5e3baf759d74ea4f55ccabc65cb6e0869d5c9508c"
        },
        "downloads": -1,
        "filename": "pyPhotonLLTFContrast-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9998eee010aa6f2d86b954dbe196ceb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14570,
        "upload_time": "2022-10-28T22:46:49",
        "upload_time_iso_8601": "2022-10-28T22:46:49.677711Z",
        "url": "https://files.pythonhosted.org/packages/79/ea/1f08da36b64200856c281119e344d031c9809eabc8bd3cc8e45b7137b030/pyPhotonLLTFContrast-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21ec07c1d177473759b91a53efcfb6cfe38d775503b197913412547ffbfefdd3",
          "md5": "4a64c0f0fed11cfdd392af3ebb5884d6",
          "sha256": "6ceb14d196a23662afb5195f41c3cf63786e272473a8309f2d4723181d0180fe"
        },
        "downloads": -1,
        "filename": "pyPhotonLLTFContrast-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4a64c0f0fed11cfdd392af3ebb5884d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14000,
        "upload_time": "2022-10-28T22:46:52",
        "upload_time_iso_8601": "2022-10-28T22:46:52.129582Z",
        "url": "https://files.pythonhosted.org/packages/21/ec/07c1d177473759b91a53efcfb6cfe38d775503b197913412547ffbfefdd3/pyPhotonLLTFContrast-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79ea1f08da36b64200856c281119e344d031c9809eabc8bd3cc8e45b7137b030",
        "md5": "9998eee010aa6f2d86b954dbe196ceb1",
        "sha256": "502a36f3104324def34a81b5e3baf759d74ea4f55ccabc65cb6e0869d5c9508c"
      },
      "downloads": -1,
      "filename": "pyPhotonLLTFContrast-0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9998eee010aa6f2d86b954dbe196ceb1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14570,
      "upload_time": "2022-10-28T22:46:49",
      "upload_time_iso_8601": "2022-10-28T22:46:49.677711Z",
      "url": "https://files.pythonhosted.org/packages/79/ea/1f08da36b64200856c281119e344d031c9809eabc8bd3cc8e45b7137b030/pyPhotonLLTFContrast-0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21ec07c1d177473759b91a53efcfb6cfe38d775503b197913412547ffbfefdd3",
        "md5": "4a64c0f0fed11cfdd392af3ebb5884d6",
        "sha256": "6ceb14d196a23662afb5195f41c3cf63786e272473a8309f2d4723181d0180fe"
      },
      "downloads": -1,
      "filename": "pyPhotonLLTFContrast-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "4a64c0f0fed11cfdd392af3ebb5884d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14000,
      "upload_time": "2022-10-28T22:46:52",
      "upload_time_iso_8601": "2022-10-28T22:46:52.129582Z",
      "url": "https://files.pythonhosted.org/packages/21/ec/07c1d177473759b91a53efcfb6cfe38d775503b197913412547ffbfefdd3/pyPhotonLLTFContrast-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}