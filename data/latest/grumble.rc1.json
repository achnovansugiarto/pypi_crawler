{
  "info": {
    "author": "",
    "author_email": "Christian Hammond <christian@beanbaginc.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Grumble...\n==========\n\nGrumble is a Python library for print debuggers who are drowning in `print()`\nstatements..\n\nIt's for developers who need to capture lots of data between runs.\n\nIt's for developers banging their head against the wall trying to dive deep\ninto code that's not quite working right, or not working consistently.\n\n\nInstallation is easy\n--------------------\n\n```\n$ pip3 install grumble\n```\n\nWhy would you want to install Grumble? Well...\n\n\nIt's a Friday evening, and everything you wrote is busted\n---------------------------------------------------------\n\nYou spent all week trying to get your code work. And it should work, but it's\nnot. You're furiously trying to debug it as you get increasingly exhausted,\nyour brain begining to melt into a pile of goo.\n\nThe hours are ticking away with nothing to show for it. Your console is full\nof print output, and it's beginning to blur together into some kind of blended\nsoup of green Matrix code nonsense.\n\nLog messages mixed with tracebacks, mixed with variable dumps, all coming from\ndifferent classes, threads, processes. Screens full of it.\n\nThe details change between runs. You're writing it all down, trying to keep it\nstraight in your head. But it's begun to fall apart. And you're wondering\nwhy you turned to a life of coding instead of a life of farming.\n\nTrue story.\n\n\nThis is where Grumble comes in\n------------------------------\n\nGrumble gives one simple command to log debug output:\n\n```python\ndef grumble(msg='', state=None, category=None, log_tag=None):\n    ...\n```\n\nWhen you `grumble(...)`, it'll print a simple log message to standard output,\nand log details to a log file.\n\nBy default, the log message will show:\n\n1. An emoji (to help you visually separate that log statement from other noise).\n\n2. A timestamp of the log message.\n\n3. A log file with more details.\n\n   This identifies \"grumble\", the process name, the PID, a thread name (if using\n   threads), and an extra log tag name (if setting `log_tag`).\n\n4. A searchable hash within that log file.\n\nFor example:\n\n```python\n>>> from grumble import grumble\n>>> grumble()\nüò∂  üïß 2022-10-16 12:46:36  üíæ grumble-python3-86256.log [b6589fc6ab0dc82cf12099d1c2d40ab994e8410c]\n```\n\nGood at a glance, and you can customize that with a log message or category:\n\n```python\n>>> grumble('Look, a log message!', category='ui', log_tag='uilogs')\nüßê [ui] Look, a log message!  üïß 2022-10-16 12:47:10  üíæ grumble-python3-86256-uilogs.log [356a192b7913b04c54574d18c28d46e6395428ab]\n```\n\nAnd we can add some state. Anything at all.\n\n```python\n>>> grumble('Logging the generated object', state=some_object)\nü§® [ui] Look, a log message!  üïß2022-10-16 12:48:43  üíæ grumble-python3-86256.log [da4b9237bacccdf19c0760cab7aec4a8359010b0]\n```\n\nState will show up, nicely formatted, in the log file. Which we'll cover right\nabout... now.\n\n\nGoing deeper with logs\n----------------------\n\nThat log message is handy, but it doesn't tell us much more than a normal\n`print()` statement.\n\nIt does point to a log file, though. Let's look into that.\n\nLet's write a little program to print the output of a directory, filtered by\na file pattern:\n\n\n```python\nimport os\nfrom fnmatch import fnmatch\n\nfrom grumble import grumble\n\n\ndef filter_filenames(filenames, file_pattern):\n    return [\n        filename\n        for filename in filenames\n        if fnmatch(filename, file_pattern)\n    ]\n\n\ndef list_directory(path, file_pattern):\n    path = os.path.abspath(path)\n    results = filter_filenames(os.listdir(path),\n                               file_pattern)\n\n    grumble(\"Let's look at a directory\",\n            state={\n                'raw os.listdir output': os.listdir(path),\n            })\n\n    return results\n\nfilenames = list_directory('.', file_pattern='*.txt')\n\nprint('Files:')\nprint('\\n'.join(filenames))\n```\n\nAnd let's run it!\n\n```\n$ python3 dirtest.py\nüò∂ Let's look at a directory  üïí 2022-10-16 13:01:21  üíæ grumble-dirtest.py-7154.log [b6589fc6ab0dc82cf12099d1c2d40ab994e8410c]\nFiles:\nworld.txt\nhello.txt\n```\n\nWe have our Grumble log statement, and our resulting directory listing. Time to\nlook at what's in the log:\n\n```\nüò∂\nüò∂  Grumble ID:  b6589fc6ab0dc82cf12099d1c2d40ab994e8410c\nüò∂   Timestamp:  üïí 2022-10-16 13:01:21\nüò∂     Message:  Let's look at a directory\nüò∂\n\n## State:\n##   {'raw os.listdir output': ['world.txt',\n##                              'hello.txt',\n##                              'dirtest.py']}\n##\n\n>> Traceback:\n>>   File \"/tmp/grumble/dirtest.py\", line 28, in <module>\n>>     filenames = list_directory('.', file_pattern='*.txt')\n>>   File \"/tmp/grumble/dirtest.py\", line 20, in list_directory\n>>     grumble(\"Let's look at a directory\",\n>>\n\n$$ Locals:\n$$  {'file_pattern': '*.txt',\n$$   'path': '/tmp/grumble',\n$$   'results': ['world.txt', 'hello.txt']}\n$$\n```\n\nLook at all that debugging information! We have:\n\n1. An easy visual and searchable reference from the log output.\n2. Any and all state we passed to that call to `grumble()`.\n3. A traceback of where we are.\n4. All local variables.\n\nAs you `grumble()` your way through your debugging session, your log file\n(or files, if using threads or different logging tag names) will grow with\nhelpful information that you can read through or even diff.\n\nLogs are outputted in the current directory by default. You can specify a\ndifferent directory by setting the `GRUMBLE_LOG_DIR=...` environment variable,\n\nYou can also output full logs to the console by setting `GRUMBLE_OUT=1`.\n\n\nWorks great as an exception handler\n-----------------------------------\n\nThis log file can also help with exceptions. Say we had:\n\n```python\ntry:\n    raise Exception('bad things happened')\nexcept Exception as e:\n    grumble('Uh oh, we hit an exception: %s' % e)\n\nreturn results\n```\n\nOur log file would also contain:\n\n```\n!! Exception:\n!!   Type: <class 'type'>\n!!   Value: Exception('bad things happened')\n!!   String: bad things happened\n!!   __dict__:\n!!     {}\n!!\n```\n\nPretty handy. Especially for exceptions that contain additional state.\n\n\nWorks with threads and multiple processes!\n------------------------------------------\n\nLogs are differentiated by thread and process IDs. Lock files ensure that\nlogs don't get jumbled together. Because that would be annoying to deal with.\n\n\nEmojis and hashes are deterministic\n-----------------------------------\n\nGrumble will cycle through emojis in the following order, every time:\n\nüò∂ üßê ü§® üò¨ üôÑ üòë üòï ‚òπÔ∏è üòØ üòß üòµ üò† üò£ üòñ üò´ üò§ üò° ü§¨ üòí üò™\n\nHashes used to identify the matching part in a log file are also consistent\nbetween runs. They're a SHA1 of a 0-based index into the log.\n\nThis makes the log output more consistent between runs.\n\nIf you run the same process multiple times with different results or behavior,\nyou'll want to narrow down what's going on. By keeping the order of emojis and\nhashes the same, and tagging each log file with process/thread IDs, you'll be\nable to more easily diff two runs and see if anything has changed.\n\n\nWhat else can it do?\n--------------------\n\nNo, that's about it. Nothing hidden in the module. Nothing at all. Nope.\n\nInstall Grumble today!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "debugging,console,logs",
    "license": "Copyright (c) 2022 Christian Hammond Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grumble",
    "package_url": "https://pypi.org/project/grumble/",
    "platform": null,
    "project_url": "https://pypi.org/project/grumble/",
    "project_urls": {
      "documentation": "https://github.com/chipx86/grumble",
      "homepage": "https://github.com/chipx86/grumble",
      "repository": "https://github.com/chipx86/grumble"
    },
    "release_url": "https://pypi.org/project/grumble/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "For print debuggers drowning in print statements.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15429964,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "225436febd19efbeb43a3ac2247ebca4d7731ef8ba1e411b579cba8f3e399941",
          "md5": "094c4f0923513744b34700feee3a9d4a",
          "sha256": "affb6b3f19e1f289f1f4f972953a96cbf2c9e0247275ba70185e88248b9fc907"
        },
        "downloads": -1,
        "filename": "grumble-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "094c4f0923513744b34700feee3a9d4a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9832,
        "upload_time": "2022-10-16T22:12:30",
        "upload_time_iso_8601": "2022-10-16T22:12:30.432676Z",
        "url": "https://files.pythonhosted.org/packages/22/54/36febd19efbeb43a3ac2247ebca4d7731ef8ba1e411b579cba8f3e399941/grumble-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df18a8d424076d114e2d2383811532b26f5238ace78fabbd30ef1109d00ab002",
          "md5": "4d1a61f1bc695c8f2a74e32031fde960",
          "sha256": "8ada41d02c86e916d533944db645e7ef97538ef8029ea816f1830e49c3454aeb"
        },
        "downloads": -1,
        "filename": "grumble-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d1a61f1bc695c8f2a74e32031fde960",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9883,
        "upload_time": "2022-10-16T22:12:31",
        "upload_time_iso_8601": "2022-10-16T22:12:31.945802Z",
        "url": "https://files.pythonhosted.org/packages/df/18/a8d424076d114e2d2383811532b26f5238ace78fabbd30ef1109d00ab002/grumble-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "225436febd19efbeb43a3ac2247ebca4d7731ef8ba1e411b579cba8f3e399941",
        "md5": "094c4f0923513744b34700feee3a9d4a",
        "sha256": "affb6b3f19e1f289f1f4f972953a96cbf2c9e0247275ba70185e88248b9fc907"
      },
      "downloads": -1,
      "filename": "grumble-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "094c4f0923513744b34700feee3a9d4a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9832,
      "upload_time": "2022-10-16T22:12:30",
      "upload_time_iso_8601": "2022-10-16T22:12:30.432676Z",
      "url": "https://files.pythonhosted.org/packages/22/54/36febd19efbeb43a3ac2247ebca4d7731ef8ba1e411b579cba8f3e399941/grumble-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df18a8d424076d114e2d2383811532b26f5238ace78fabbd30ef1109d00ab002",
        "md5": "4d1a61f1bc695c8f2a74e32031fde960",
        "sha256": "8ada41d02c86e916d533944db645e7ef97538ef8029ea816f1830e49c3454aeb"
      },
      "downloads": -1,
      "filename": "grumble-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4d1a61f1bc695c8f2a74e32031fde960",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9883,
      "upload_time": "2022-10-16T22:12:31",
      "upload_time_iso_8601": "2022-10-16T22:12:31.945802Z",
      "url": "https://files.pythonhosted.org/packages/df/18/a8d424076d114e2d2383811532b26f5238ace78fabbd30ef1109d00ab002/grumble-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}