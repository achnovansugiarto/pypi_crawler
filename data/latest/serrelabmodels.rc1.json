{
  "info": {
    "author": "Akash Nagaraj",
    "author_email": "akash_n@brown.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Serre Lab In-house Models\n- Repository to create a public python library to import in-house models of the Serre Lab at Brown University.\n- The models can be imported exactly like any other PyTorch module (eg: GRU).\n- The models are plug-and-play and are designed to work out of the box, with no additional tinkering required. All the paramters are the same as the PyTorch GRU module.\n\n## Models:\nThe repository currently includes the following models:\n1. fGRU\n2. hGRU\n3. hGRU Example\n5. Gamanet\n\n## Usage:\n### Installing the module from pip\n\n```\npip install serrelabmodels\n```\n\n---\n\n### Importing the required model\n\n\n#### fGRU\n\n```python\nimport serrelabmodels.layers.fgru_cell as sl_fgru\nfgru_cell = sl_fgru.fRGUCell(5, 5, 3)\n```\n\n\n#### hGRU\n\n```python\nimport serrelabmodels.layers.hgru_cell as sl_hgru\nhgru_cell =  sl_hgru.hRGUCell(5, 5, 3)\n```\n\n\n#### hGRU Example\n\n```python\nimport serrelabmodels.hgru as sl_hgru_ex\nhgru_model = sl_hgru_ex.BasehGRU()\n```\n\n#### GamaNet\n\n```python\nimport serrelabmodels.base_gamanet as sl_gnet\ngamanet_model = sl_gnet.BaseGN()\n```\n\n## Examples:\n\n### fGRUCell\n\n```python\n>>> import serrelabmodels.layers.fgru_cell as sl_fgru\n>>> fgru_cell = sl_fgru.fGRUCell(5, 5, 3)\n>>> fgru_cell\nfGRUCell(\n  (ff_nl): ReLU()\n  (attention): GALA_Attention(\n    (se): SE_Attention(\n      (attention): Sequential(\n        (0): Conv2dSamePadding(5, 2, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)\n        (1): ReLU()\n        (2): Conv2dSamePadding(2, 5, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)\n        (3): ReLU()\n      )\n    )\n    (sa): SA_Attention(\n      (attention): Sequential(\n        (0): Conv2dSamePadding(5, 2, kernel_size=(5, 5), stride=(1, 1), padding_mode=reflect)\n        (1): ReLU()\n        (2): Conv2dSamePadding(2, 1, kernel_size=(5, 5), stride=(1, 1), padding_mode=reflect)\n        (3): ReLU()\n      )\n    )\n  )\n  (bn_g1): InstanceNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n  (bn_c1): InstanceNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n  (bn_g2): InstanceNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n  (bn_c2): InstanceNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n)\n\n```\n\n#### hGRUCell\n\n```python\n>>> import serrelabmodels.layers.hgru_base as hgru_base\n>>> h = hgru_base.hConvGRUCell(5, 5, 3)\n>>> h2 = hgru_base.hConvGRUCell(5, 5, 3, batchnorm = False)\n>>> h2\nhConvGRUCell(\n  (u1_gate): Conv2d(5, 5, kernel_size=(1, 1), stride=(1, 1))\n  (u2_gate): Conv2d(5, 5, kernel_size=(1, 1), stride=(1, 1))\n)\n>>> h\nhConvGRUCell(\n  (u1_gate): Conv2d(5, 5, kernel_size=(1, 1), stride=(1, 1))\n  (u2_gate): Conv2d(5, 5, kernel_size=(1, 1), stride=(1, 1))\n  (bn): ModuleList(\n    (0): BatchNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (1): BatchNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (2): BatchNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): BatchNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  )\n)\n```\n\n\n#### hGRU Example (VGG 16)\n\n```python\n>>> import serrelabmodels.base_hgru as sl_hgru_ex\nagg\n>>> b = sl_hgru_ex.BasehGRU()\nimporting  serrelabmodels.models.vgg_16 . VGG_16\n>>> b\nBasehGRU(\n  (base_ff): VGG_16(\n    (conv1_1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv1_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (maxpool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (conv2_1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv2_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (maxpool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (conv3_1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv3_2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv3_3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (maxpool3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (conv4_1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv4_2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv4_3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (maxpool4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (conv5_1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv5_2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv5_3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  )\n  ...\n  \n    (2): Sequential(\n      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (2): ReLU()\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (4): ReLU()\n      (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (6): ReLU()\n    )\n  )\n)\n\n```\n\n\n### GamaNet\n\n```python\n>>> import serrelabmodels.base_gamanet as sl_gnet\n>>> g = sl_gnet.BaseGN()\nimporting  serrelabmodels.models.vgg_16 . VGG_16\n>>> g\nBaseGN(\n  (base_ff): VGG_16(\n    (conv1_1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv1_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (maxpool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (conv2_1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv2_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (maxpool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (conv3_1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv3_2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv3_3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (maxpool3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (conv4_1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv4_2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv4_3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (maxpool4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (conv5_1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv5_2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (conv5_3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  )\n    ...\n    \n    (2): Sequential(\n      (0): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      (1): Conv2dSamePadding(256, 128, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)\n      (2): ReLU()\n      (3): Conv2dSamePadding(128, 128, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)\n      (4): ReLU()\n    )\n  )\n  (readout_norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n  (readout_conv): Conv2dSamePadding(128, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)\n)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/serre-lab/serrelabmodels",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "serrelabmodels",
    "package_url": "https://pypi.org/project/serrelabmodels/",
    "platform": "",
    "project_url": "https://pypi.org/project/serrelabmodels/",
    "project_urls": {
      "Documentation": "https://github.com/serre-lab/serrelabmodels/docs",
      "Homepage": "https://github.com/serre-lab/serrelabmodels"
    },
    "release_url": "https://pypi.org/project/serrelabmodels/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package to import in-house models from the Serre Lab at Brown University.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12042849,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d70644a9dfa93f6699bf332d8e8b9796c790e65ad6eca1e25401fac730ab607e",
          "md5": "9e0344cf855c73c882767db12c48c83b",
          "sha256": "fa8165af6e076a1c137eedbf24e7626261d71c888b19dc0376afb3b059a5f5b5"
        },
        "downloads": -1,
        "filename": "serrelabmodels-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9e0344cf855c73c882767db12c48c83b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16997,
        "upload_time": "2021-11-17T00:16:32",
        "upload_time_iso_8601": "2021-11-17T00:16:32.207067Z",
        "url": "https://files.pythonhosted.org/packages/d7/06/44a9dfa93f6699bf332d8e8b9796c790e65ad6eca1e25401fac730ab607e/serrelabmodels-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d70644a9dfa93f6699bf332d8e8b9796c790e65ad6eca1e25401fac730ab607e",
        "md5": "9e0344cf855c73c882767db12c48c83b",
        "sha256": "fa8165af6e076a1c137eedbf24e7626261d71c888b19dc0376afb3b059a5f5b5"
      },
      "downloads": -1,
      "filename": "serrelabmodels-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9e0344cf855c73c882767db12c48c83b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16997,
      "upload_time": "2021-11-17T00:16:32",
      "upload_time_iso_8601": "2021-11-17T00:16:32.207067Z",
      "url": "https://files.pythonhosted.org/packages/d7/06/44a9dfa93f6699bf332d8e8b9796c790e65ad6eca1e25401fac730ab607e/serrelabmodels-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}