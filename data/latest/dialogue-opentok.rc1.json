{
  "info": {
    "author": "TokBox, Inc.",
    "author_email": "support@tokbox.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Communications",
      "Topic :: Communications :: Chat",
      "Topic :: Communications :: Conferencing",
      "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
      "Topic :: Multimedia :: Sound/Audio :: Players",
      "Topic :: Multimedia :: Video :: Capture",
      "Topic :: Multimedia :: Video :: Display",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==================\nOpenTok Python SDK\n==================\n\n.. image:: https://travis-ci.org/opentok/Opentok-Python-SDK.svg\n   :target: https://travis-ci.org/opentok/Opentok-Python-SDK\n\nThe OpenTok Python SDK lets you generate\n`sessions <http://tokbox.com/opentok/tutorials/create-session/>`_ and\n`tokens <http://tokbox.com/opentok/tutorials/create-token/>`_ for `OpenTok <http://www.tokbox.com/>`_\napplications, and `archive <http://www.tokbox.com/platform/archiving>`_ OpenTok sessions.\n\nInstallation using Pip (recommended):\n-------------------------------------\n\nPip helps manage dependencies for Python projects using the PyPI index. Find more info here:\nhttp://www.pip-installer.org/en/latest/\n\nAdd the ``opentok`` package as a dependency in your project. The most common way is to add it to your\n``requirements.txt`` file::\n\n  opentok>=2.10.0\n\nNext, install the dependencies::\n\n  $ pip install -r requirements.txt\n\n\nUsage\n-----\n\nInitializing\n~~~~~~~~~~~~\n\nImport the package at the top of any file where you will use it. At the very least you will need the\n``OpenTok`` class. Then initialize an OpenTok instance with your own API Key and API Secret.\n\n.. code:: python\n\n  from opentok import OpenTok\n\n  opentok = OpenTok(api_key, api_secret)\n\nCreating Sessions\n~~~~~~~~~~~~~~~~~\n\nTo create an OpenTok Session, use the ``opentok.create_session()`` method. There are three optional\nkeyword parameters for this method:\n\n* ``location`` which can be set to a string containing an IP address.\n\n* ``media_mode`` which is a String (defined by the MediaModes class).\n  This determines whether the session will use the\n  `OpenTok Media Router <https://tokbox.com/developer/guides/create-session/#media-mode>`_\n  or attempt to send streams directly between clients. A routed session is required for some\n  OpenTok features (such as archiving).\n\n* ``archive_mode`` which specifies whether the session will be automatically archived (``always``)\n  or not (``manual``).\n\nThis method returns a ``Session`` object. Its ``session_id`` attribute is useful when saving to a persistent\nstore (such as a database).\n\n.. code:: python\n\n  # Create a session that attempts to send streams directly between clients (falling back\n  # to use the OpenTok TURN server to relay streams if the clients cannot connect):\n  session = opentok.create_session()\n\n  from opentok import MediaModes\n  # A session that uses the OpenTok Media Router, which is required for archiving:\n  session = opentok.create_session(media_mode=MediaModes.routed)\n\n  # An automatically archived session:\n  session = opentok.create_session(media_mode=MediaModes.routed, archive_mode=ArchiveModes.always)\n\n  # A session with a location hint\n  session = opentok.create_session(location=u'12.34.56.78')\n\n  # Store this session ID in the database\n  session_id = session.session_id\n\nGenerating Tokens\n~~~~~~~~~~~~~~~~~\n\nOnce a Session is created, you can start generating Tokens for clients to use when connecting to it.\nYou can generate a token either by calling the ``opentok.generate_token(session_id)`` method or by\ncalling the ``session.generate_token()`` method on a ``Session`` instance after creating it. Both\nhave a set of optional keyword parameters: ``role``, ``expire_time``, ``data``, and\n``initial_layout_class_list``.\n\n.. code:: python\n\n  # Generate a Token from just a session_id (fetched from a database)\n  token = opentok.generate_token(session_id)\n  # Generate a Token by calling the method on the Session (returned from create_session)\n  token = session.generate_token()\n\n  from opentok import Roles\n  # Set some options in a token\n  token = session.generate_token(role=Roles.moderator,\n                                 expire_time=int(time.time()) + 10,\n                                 data=u'name=Johnny'\n                                 initial_layout_class_list=[u'focus'])\n\nWorking with Archives\n~~~~~~~~~~~~~~~~~~~~~\n\nYou can only archive sessions that use the OpenTok Media\nRouter (sessions with the media mode set to routed).\n\nYou can start the recording of an OpenTok Session using the ``opentok.start_archive(session_id)``\nmethod. This method takes an optional keyword argument ``name`` to assign a name to the archive.\nThis method will return an ``Archive`` instance. Note that you can only start an Archive on\na Session that has clients connected.\n\n.. code:: python\n\n  archive = opentok.start_archive(session_id, name=u'Important Presentation')\n\n  # Store this archive_id in the database\n  archive_id = archive.id\n\nYou can also disable audio or video recording by setting the `has_audio` or `has_video` property of\nthe `options` parameter to `false`:\n\n.. code:: python\n\n  archive = opentok.start_archive(session_id, name=u'Important Presentation', has_video=False)\n\n  # Store this archive_id in the database\n  archive_id = archive.id\n\nBy default, all streams are recorded to a single (composed) file. You can record the different\nstreams in the session to individual files (instead of a single composed file) by setting the\n``output_mode`` parameter of the ``opentok.start_archive()`` method `OutputModes.individual`.\n\n.. code:: python\n\n  archive = opentok.start_archive(session_id, name=u'Important Presentation', output_mode=OutputModes.individual)\n\n  # Store this archive_id in the database\n  archive_id = archive.id\n\nComposed archives (output_mode=OutputModes.composed) have an optional ``resolution`` parameter.\nIf no value is supplied the opentok platform will use the default resolution \"640x480\".\nYou can set this to \"1280x720\" by setting the\n``resolution`` parameter of the ``opentok.start_archive()`` method.\n\nWarning: This value cannot be set for Individual output mode, an error will be thrown.\n\n.. code:: python\n\n  archive = opentok.start_archive(session_id, name=u'Important Presentation', resolution=\"1280x720\")\n\n  # Store this archive_id in the database\n  archive_id = archive.id\n\nYou can stop the recording of a started Archive using the ``opentok.stop_archive(archive_id)``\nmethod. You can also do this using the ``archive.stop()`` method of an ``Archive`` instance.\n\n.. code:: python\n\n  # Stop an Archive from an archive_id (fetched from database)\n  opentok.stop_archive(archive_id)\n  # Stop an Archive from an instance (returned from opentok.start_archive)\n  archive.stop()\n\nTo get an ``Archive`` instance (and all the information about it) from an archive ID, use the\n``opentok.get_archive(archive_id)`` method.\n\n.. code:: python\n\n  archive = opentok.get_archive(archive_id)\n\nTo delete an Archive, you can call the ``opentok.delete_archive(archive_id)`` method or the\n``archive.delete()`` method of an ``Archive`` instance.\n\n.. code:: python\n\n  # Delete an Archive from an archive ID (fetched from database)\n  opentok.delete_archive(archive_id)\n  # Delete an Archive from an Archive instance (returned from opentok.start_archive or\n  opentok.get_archive)\n  archive.delete()\n\nYou can also get a list of all the Archives you've created (up to 1000) with your API Key. This is\ndone using the ``opentok.list_archives()`` method. There are three optional keyword parameters:\n``count``, ``offset`` and ``session_id``; they can help you paginate through the results and\nfilter by session ID. This method returns an instance of the ``ArchiveList`` class.\n\n.. code:: python\n\n  archive_list = opentok.list_archive()\n\n  # Get a specific Archive from the list\n  archive = archive_list.items[i]\n\n  # Iterate over items\n  for archive in iter(archive_list):\n    pass\n\n  # Get the total number of Archives for this API Key\n  total = archive_list.total\n\nNote that you can also create an automatically archived session, by passing in\n``ArchiveModes.always`` as the ``archive_mode`` parameter when you call the\n``opentok.create_session()`` method (see \"Creating Sessions,\" above).\n\nFor composed archives, you can change the layout dynamically, using the `opentok.set_archive_layout(archive_id, type, stylesheet)` method:\n\n.. code:: python\n\n  opentok.set_archive_layout('ARCHIVEID', 'horizontalPresentation')\n\nSetting the layout of composed archives is optional. By default, composed archives use the `best fit` layout.  Other valid values are: `custom`, `horizontalPresentation`, `pip` and `verticalPresentation`. If you specify a `custom` layout type, set the stylesheet parameter:\n\n.. code:: python\n\n  opentok.set_archive_layout(\n      'ARCHIVEID',\n      'custom',\n      'stream.instructor {position: absolute; width: 100%;  height:50%;}'\n  )\n\nFor other layout types, do not set the stylesheet property. For more information see\n`Customizing the video layout for composed archives <https://tokbox.com/developer/guides/archiving/layout-control.html>`_.\n\nFor more information on archiving, see the\n`OpenTok archiving <https://tokbox.com/opentok/tutorials/archiving/>`_ programming guide.\n\nSending Signals\n~~~~~~~~~~~~~~~~~~~~~\n\nOnce a Session is created, you can send signals to everyone in the session or to a specific connection. You can send a signal by calling the ``signal(session_id, payload)`` method of the ``OpenTok`` class. The ``payload`` parameter is a dictionary used to set the ``type``, ``data`` fields. Ỳou can also call the method with the parameter ``connection_id`` to send a signal to a specific connection ``signal(session_id, data, connection_id)``.\n\n.. code:: python\n\n  # payload structure\n  payload = {\n      'type': 'type', #optional\n      'data': 'signal data' #required\n  }\n\n  connection_id = '2a84cd30-3a33-917f-9150-49e454e01572'\n\n  # To send a signal to everyone in the session:\n  opentok.signal(session_id, payload)\n\n  # To send a signal to a specific connection in the session:\n  opentok.signal(session_id, payload, connection_id)\n\nWorking with Streams\n~~~~~~~~~~~~~~~~~~~~~\n\nYou can get information about a stream by calling the `get_stream(session_id, stream_id)` method of the `OpenTok` class.\n\nThe method returns a Stream object that contains information of an OpenTok stream:\n\n* ``id``: The stream ID\n* ``videoType``: \"camera\" or \"screen\"\n* ``name``: The stream name (if one was set when the client published the stream)\n* ``layoutClassList``: It's an array of the layout classes for the stream\n\n.. code:: python\n\n  session_id = 'SESSIONID'\n  stream_id = '8b732909-0a06-46a2-8ea8-074e64d43422'\n\n  # To get stream info:\n  stream = opentok.get_stream(session_id, stream_id)\n\n  # Stream properties:\n  print stream.id #8b732909-0a06-46a2-8ea8-074e64d43422\n  print stream.videoType #camera\n  print stream.name #stream name\n  print stream.layoutClassList #['full']\n\nAlso, you can get information about all the streams in a session by calling the `list_streams(session_id)` method of the `OpenTok` class.\n\nThe method returns a StreamList object that contains a list of all the streams\n\n.. code:: python\n\n  # To get all streams in a session:\n  stream_list = opentok.list_streams(session_id)\n\n  # Getting the first stream of the list\n  stream = stream_list.items[0]\n\n  # Stream properties:\n  print stream.id #8b732909-0a06-46a2-8ea8-074e64d43422\n  print stream.videoType #camera\n  print stream.name #stream name\n  print stream.layoutClassList #['full']\n\nYou can change the layout classes for streams in a session by calling the `set_stream_class_lists(session_id, stream_list)` method of the `OpenTok` class.\n\nThe layout classes define how the stream is displayed in the layout of a composed OpenTok archive.\n\n.. code:: python\n\n  # This list contains the information of the streams that will be updated. Each element\n  # in the list is a dictionary with two properties: 'id' and 'layoutClassList'. The 'id'\n  # property is the stream ID (a String), and the 'layoutClassList' is an array of class\n  # names (Strings) to apply to the stream.\n  payload = [\n      {'id': '7b09ec3c-26f9-43d7-8197-f608f13d4fb6', 'layoutClassList': ['focus']},\n      {'id': '567bc941-6ea0-4c69-97fc-70a740b68976', 'layoutClassList': ['top']},\n      {'id': '307dc941-0450-4c09-975c-705740d08970', 'layoutClassList': ['bottom']}\n  ]\n\n  opentok.set_stream_class_lists('SESSIONID', payload)\n\nFor more information see\n`Changing the composed archive layout classes for an OpenTok stream <https://tokbox.com/developer/rest/#change-stream-layout-classes-composed>`_.\n\nForce Disconnect\n~~~~~~~~~~~~~~~~~~~~~\n\nYour application server can disconnect a client from an OpenTok session by calling the force_disconnect(session_id, connection_id) method of the OpenTok class, or the force_disconnect(connection_id) method of the Session class.\n\n.. code:: python\n\n  session_id = 'SESSIONID'\n  connection_id = 'CONNECTIONID'\n\n  # To send a request to disconnect a client:\n  opentok.force_disconnect(session_id, connection_id)\n\nWorking with SIP Interconnect\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can connect your SIP platform to an OpenTok session, the audio from your end of the SIP call is added to the OpenTok session as an audio-only stream. The OpenTok Media Router mixes audio from other streams in the session and sends the mixed audio to your SIP endpoint.\n\n.. code:: python\n\n  session_id = u('SESSIONID')\n  token = u('TOKEN')\n  sip_uri = u('sip:user@sip.partner.com;transport=tls')\n\n  # call the method with the required parameters\n  sip_call = opentok.dial(session_id, token, sip_uri)\n\n  # the method also support aditional options to establish the sip call\n\n  options = {\n      'from': 'from@example.com',\n      'headers': {\n          'headerKey': 'headerValue'\n      },\n      'auth': {\n          'username': 'username',\n          'password': 'password'\n      },\n      'secure': True\n  }\n\n  # call the method with aditional options\n  sip_call = opentok.dial(session_id, token, sip_uri, options)\n\nFor more information, including technical details and security considerations, see the\n`OpenTok SIP interconnect <https://tokbox.com/developer/guides/sip/>`_ developer guide.\n\nWorking with Broadcasts\n~~~~~~~~~~~~~~~~~~~~~~~\n\nOpenTok broadcast lets you share live OpenTok sessions with many viewers.\n\nYou can use the ``opentok.start_broadcast()`` method to start a live streaming for an OpenTok session. This broadcasts the session to an HLS (HTTP live streaming) or to RTMP streams.\n\nTo successfully start broadcasting a session, at least one client must be connected to the session.\n\nThe live streaming broadcast can target one HLS endpoint and up to five RTMP servers simulteneously for a session. You can only start live streaming for sessions that use the OpenTok Media Router; you cannot use live streaming with sessions that have the media mode set to relayed.\n\n.. code:: python\n\n  session_id = 'SESSIONID'\n  options = {\n    'layout': {\n      'type': 'custom',\n      'stylesheet': 'the layout stylesheet (only used with type == custom)'\n    },\n    'maxDuration': 5400,\n    'outputs': {\n      'hls': {},\n      'rtmp': [{\n        'id': 'foo',\n        'serverUrl': 'rtmp://myfooserver/myfooapp',\n        'streamName': 'myfoostream'\n      }, {\n        'id': 'bar',\n        'serverUrl': 'rtmp://mybarserver/mybarapp',\n        'streamName': 'mybarstream'\n      }]\n    },\n    'resolution': '640x480'\n  }\n\n  broadcast = opentok.start_broadcast(session_id, options)\n\nYou can stop a started Broadcast using the ``opentok.stop_broadcast(broadcast_id)`` method.\n\n.. code:: python\n\n  # getting the ID from a broadcast object\n  broadcast_id = broadcast.id\n\n  # stop a broadcast\n  broadcast = opentok.stop_broadcast(broadcast_id)\n\nYou can get details on a broadcast that is in-progress using the method ``opentok.get_broadcast(broadcast_id)``.\n\n.. code:: python\n\n  broadcast_id = '1748b7070a81464c9759c46ad10d3734'\n\n  # get broadcast details\n  broadcast = opentok.get_broadcast(broadcast_id)\n\n  print broadcast.json()\n\n  # print result\n  # {\n  #   \"createdAt\": 1437676551000,\n  #   \"id\": \"1748b707-0a81-464c-9759-c46ad10d3734\",\n  #   \"projectId\": 100,\n  #   \"resolution\": \"640x480\",\n  #   \"sessionId\": \"2_MX4xMDBfjE0Mzc2NzY1NDgwMTJ-TjMzfn4\",\n  #   \"status\": \"started\",\n  #   \"updatedAt\": 1437676551000,\n  #   \"broadcastUrls\": {\n  #       \"hls\": \"http://server/fakepath/playlist.m3u8\",\n  #       \"rtmp\": {\n  #           \"bar\": {\n  #               \"serverUrl\": \"rtmp://mybarserver/mybarapp\",\n  #               \"status\": \"live\",\n  #               \"streamName\": \"mybarstream\"\n  #           },\n  #           \"foo\": {\n  #               \"serverUrl\": \"rtmp://myfooserver/myfooapp\",\n  #               \"status\": \"live\",\n  #               \"streamName\": \"myfoostream\"\n  #           }\n  #       }\n  #   }\n  # }\n\nYou can dynamically change the layout type of a live streaming broadcast.\n\n.. code:: python\n\n  # Valid values to 'layout_type' are: 'custom', 'horizontalPresentation',\n  # 'pip' and 'verticalPresentation' \n  opentok.set_broadcast_layout('BROADCASTID', 'horizontalPresentation')\n\n  # if you specify a 'custom' layout type, set the stylesheet parameter:\n  opentok.set_broadcast_layout(\n      'BROADCASTID',\n      'custom',\n      'stream.instructor {position: absolute; width: 100%;  height:50%;}'\n  )\n\nFor more information about OpenTok live streaming broadcasts, see the\n`Broadcast developer guide <https://tokbox.com/developer/guides/broadcast/>`_.\n\nSamples\n-------\n\nThere are two sample applications included in this repository. To get going as fast as possible, clone the whole\nrepository and follow the Walkthroughs:\n\n- `HelloWorld <sample/HelloWorld/README.md>`_\n- `Archiving <sample/Archiving/README.md>`_\n\nDocumentation\n-------------\n\nReference documentation is available at <http://www.tokbox.com/opentok/libraries/server/python/reference/index.html>.\n\nRequirements\n------------\n\nYou need an OpenTok API key and API secret, which you can obtain at https://dashboard.tokbox.com/\n\nThe OpenTok Python SDK requires Python 2.6, 2.7, 3.3, 3.4, 3.5 or 3.6\n\nRelease Notes\n-------------\n\nSee the `Releases <https://github.com/opentok/Opentok-Python-SDK/releases>`_ page for details about\neach release.\n\nImportant changes since v2.2\n----------------------------\n\n**Changes in v2.2.1:**\n\nThe default setting for the create_session() method is to create a session with the media mode set\nto relayed. In previous versions of the SDK, the default setting was to use the OpenTok Media Router\n(media mode set to routed). In a relayed session, clients will attempt to send streams directly\nbetween each other (peer-to-peer); if clients cannot connect due to firewall restrictions, the\nsession uses the OpenTok TURN server to relay audio-video streams.\n\n**Changes in v2.2.0:**\n\nThis version of the SDK includes support for working with OpenTok archives.\n\nThe OpenTok.create_session() method now includes a media_mode parameter, instead of a p2p parameter.\n\nFor details, see the reference documentation at\n<http://www.tokbox.com/opentok/libraries/server/python/reference/index.html>.\n\nDevelopment and Contributing\n----------------------------\n\nInterested in contributing? We :heart: pull requests! See the `Development <DEVELOPING.md>`_ and\n`Contribution <CONTRIBUTING.md>`_ guidelines.\n\nSupport\n-------\n\nSee https://support.tokbox.com/ for all our support options.\n\nFind a bug? File it on the `Issues <https://github.com/opentok/opentok-python-sdk/issues>`_ page.\nHint: test cases are really helpful!\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/opentok/Opentok-Python-SDK",
    "keywords": "video chat tokbox tok opentok python media webrtc archiving realtime",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dialogue-opentok",
    "package_url": "https://pypi.org/project/dialogue-opentok/",
    "platform": "",
    "project_url": "https://pypi.org/project/dialogue-opentok/",
    "project_urls": {
      "Homepage": "https://github.com/opentok/Opentok-Python-SDK"
    },
    "release_url": "https://pypi.org/project/dialogue-opentok/2.10.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "OpenTok server-side SDK",
    "version": "2.10.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5194881,
  "releases": {
    "2.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d115166c535c4015908a08481d47d37afdd3fbc63453b51641130145254ff15",
          "md5": "1142aaefef168e09886411a12f7b1380",
          "sha256": "be81d9d4ba92ca57f9661fd7f8ec6ccd15419bc29e0beb9ca450eeed6e8ef267"
        },
        "downloads": -1,
        "filename": "dialogue-opentok-2.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1142aaefef168e09886411a12f7b1380",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24917,
        "upload_time": "2019-04-26T21:01:58",
        "upload_time_iso_8601": "2019-04-26T21:01:58.678849Z",
        "url": "https://files.pythonhosted.org/packages/5d/11/5166c535c4015908a08481d47d37afdd3fbc63453b51641130145254ff15/dialogue-opentok-2.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d115166c535c4015908a08481d47d37afdd3fbc63453b51641130145254ff15",
        "md5": "1142aaefef168e09886411a12f7b1380",
        "sha256": "be81d9d4ba92ca57f9661fd7f8ec6ccd15419bc29e0beb9ca450eeed6e8ef267"
      },
      "downloads": -1,
      "filename": "dialogue-opentok-2.10.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1142aaefef168e09886411a12f7b1380",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24917,
      "upload_time": "2019-04-26T21:01:58",
      "upload_time_iso_8601": "2019-04-26T21:01:58.678849Z",
      "url": "https://files.pythonhosted.org/packages/5d/11/5166c535c4015908a08481d47d37afdd3fbc63453b51641130145254ff15/dialogue-opentok-2.10.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}