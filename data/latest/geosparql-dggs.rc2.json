{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# RDFlib GeoSPARQL Functions for DGGS\n\nThis library provides support for the [GeoSPARQL 1.1 Simple Features Relation Family](https://opengeospatial.github.io/ogc-geosparql/geosparql11/spec.html#_simple_features_relation_family_relation_familysimple_features)\nfor geometries expressed as [DGGS Literals](https://opengeospatial.github.io/ogc-geosparql/geosparql11/spec.html#_rdfs_datatype_geodggsliteral).\nCurrently, [rHEALPix DGGS](https://iopscience.iop.org/article/10.1088/1755-1315/34/1/012012/pdf) Grids are supported.  \n\n## Installation\nFrom the python package index, PyPi: https://pypi.org/project/geosparql-dggs/  \n`pip install geosparql-dggs`\n\nThis package depends on to support the functions' use against graphs [RDFlib](https://pypi.org/project/rdflib/). The functions themselves depend on the [rHEAL-sf](https://github.com/surroundaustralia/rhealpix-sf/) \nlibrary, which in turn depends on the [rHEAL-geo](https://github.com/surroundaustralia/rhealpix-geo/) library for the base classes\nwhich represent DGGS Cells and collections of Cells. \n## Use\nThese functions are implemented in RDFlib Python in the file `gsdggs/sf_functions.py` and are imported into `gsdggs/__init__.py` and registered there in RDFlib as SPARQL extension functions with their IRIs.\n\nThis means they can be used like this (full working script):\n\n```python\nfrom rdflib import Literal, Graph, Namespace, URIRef\nfrom gsdggs import DGGS\n\nGEO = Namespace(\"http://www.opengis.net/ont/geosparql#\")\n\n# Define the DGGS Geometries\ng = Graph()\ngeom_a = URIRef('https://geom-a')\ngeom_b = URIRef('https://geom-b')\ngeom_c = URIRef('https://geom-c')\ng.add((geom_a, GEO.hasGeometry, Literal('CELLLIST ((R0 R10 R13 R16 R30 R31 R32 R40))')))\ng.add((geom_b, GEO.hasGeometry, Literal('CELLLIST ((R06 R07 R30 R31))')))\ng.add((geom_c, GEO.hasGeometry, Literal('CELLLIST ((R11 R12 R14 R15))')))\n\nq = \"\"\"\n    PREFIX geo: <http://www.opengis.net/ont/geosparql#>\n    PREFIX dggs: <https://placeholder.com/dggsfuncs/>\n    SELECT ?a ?b \n        {?a geo:hasGeometry ?a_geom .\n         ?b geo:hasGeometry ?b_geom .\n         FILTER dggs:sfWithin(?a_geom, ?b_geom)\n    }\"\"\"\nfor r in g.query(q):\n    print(f\"{r['a']} is within {r['b']}\")\n```\nThe above stript outputs:\n\n```bash\nhttps://geom-b is within https://geom-a\n```\n\nThe functions can also be used directly (without RDFLib) by direct import from _source, for example:\n```python\nfrom _source import sfEquals\n\nsfEquals(\"R1\", \"R1\")\n```\nThe above stript outputs:\n\n```bash\nTrue\n```\n## Function Definitions\nThe Simple Feature relations have been interpreted in the following way for the context of a nested square DGGS grid (such as rHEALPix grids).  \n\n* **dggs:sfEqual:** Two sets of cells are equal if they have the same identifier.  \n* **dggs:sfWithin:** One set of cells (A) is within some other set of cells (B) if the addition of A's cells to B results in a set of cells equal to B, where A is not equal to B.  \n* **dggs:sfContains:** One set of cells (A) is contains some other set of cells (B) if the addition of A's cells to B results in a set of cells equal to A, where A is not equal to B.  \n* **dggs:sfIntersects:** One set of cells (A) intersects some other set of cells (B) where they share any two cells, or any cell in A is the parent or child of a cell in B, or any cell in A or B touches.  \n* **dggs:sfTouches:** One set of cells (A) touches some other set of cells (B) where the cells meet at an edge, or vertex.  \n* **dggs:sfDisjoint:** One set of cells (A) is disjoint with some other set of cells (B) where they do not share any two cells, no cell in A is the parent or child of a cell in B, and no cells in A and B touch.  \n* **dggs:sfOverlaps:** One set of cells (A) overlaps some other set of cells (B) where the addition of A's cells to B results in a set of cells different from A and B, and A and B are not disjoint and do not touch.\n\n## Testing\nAll tests are in `tests/` and implemented using [pytest](https://docs.pytest.org/en/6.2.x/index.html).\n\nThere are individual tests for each function, along with more granular tests for supporting Python classes (Cells and CellCollections), as well as application of the functions without RDF. \n\n## Contributing\nVia GitHub, Issues & Pull Requests: \n\n* <https://github.com/rdflib/geosparql-dggs>\n\n## License\nThis code is licensed with the BSD 3-clause license as per [LICENSE](LICENSE) which is the same license as used for [rdflib](https://pypi.org/project/rdflib/).\n\n## Citation\n```bibtex\n@software{https://github.com/rdflib/geosparql-dggs,\n  author = {{David Habgood}},\n  title = {RDFlib GeoSPARQL Functions for DGGS},\n  version = {0.0.1},\n  date = {2021},\n  url = {https://github.com/rdflib/geosparql-dggs}\n}\n```\n\n## Contact\n_Creator & maintainer:_  \n**David Habgood**  \n_Application Architect_  \n[SURROUND Australia Pty Ltd](https://surroundaustralia.com)  \n<david.habgood@surroundaustrlaia.com>  \n\nhttps://orcid.org/0000-0002-3322-1868\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rdflib/geosparql-dggs",
    "keywords": "",
    "license": "BSD",
    "maintainer": "David Habgood",
    "maintainer_email": "david.habgood@surroundaustralia.com",
    "name": "geosparql-dggs",
    "package_url": "https://pypi.org/project/geosparql-dggs/",
    "platform": "any",
    "project_url": "https://pypi.org/project/geosparql-dggs/",
    "project_urls": {
      "Homepage": "https://github.com/rdflib/geosparql-dggs"
    },
    "release_url": "https://pypi.org/project/geosparql-dggs/0.2/",
    "requires_dist": [
      "rdflib (>=6.0.0)",
      "rhealpix-sf"
    ],
    "requires_python": "",
    "summary": "GeoSPARQL DGGS functions implemented as SPARQL extension in RDFLib",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11589374,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a14bc4e591cd3b5a346bcc4f093839e7e14da00144ce1ddc9ecedc8e238b8b7",
          "md5": "8362d0a4c06cf2336e2e1caa5cb8c05d",
          "sha256": "6d3b8332b1b4784c743883aa9c1025f5106a84e153c6ad4d1ec6c6f69b19e41c"
        },
        "downloads": -1,
        "filename": "geosparql_dggs-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8362d0a4c06cf2336e2e1caa5cb8c05d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5383,
        "upload_time": "2021-09-30T01:24:02",
        "upload_time_iso_8601": "2021-09-30T01:24:02.877871Z",
        "url": "https://files.pythonhosted.org/packages/6a/14/bc4e591cd3b5a346bcc4f093839e7e14da00144ce1ddc9ecedc8e238b8b7/geosparql_dggs-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf9c25ba868c4a57d5005258113a1d9c8fb088910919cf7534e0af104e47795f",
          "md5": "388a5364ce1dbd53f6bed44663576833",
          "sha256": "dba305ddc5d7693b0e12ea61b523b0712def9732fe13ec269346fe0b35a3cf8a"
        },
        "downloads": -1,
        "filename": "geosparql-dggs-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "388a5364ce1dbd53f6bed44663576833",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5024,
        "upload_time": "2021-09-30T01:24:04",
        "upload_time_iso_8601": "2021-09-30T01:24:04.749826Z",
        "url": "https://files.pythonhosted.org/packages/cf/9c/25ba868c4a57d5005258113a1d9c8fb088910919cf7534e0af104e47795f/geosparql-dggs-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "352e530337caad93d2c5919db93fcff6481756a97dfd2c5dd990550cce35b433",
          "md5": "d946b42258ed8e109994fce49bf30f1f",
          "sha256": "297eedc399711c5c307b612bcdc4f55ead86ee7e3a5e486976725218cdd8d773"
        },
        "downloads": -1,
        "filename": "geosparql_dggs-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d946b42258ed8e109994fce49bf30f1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5502,
        "upload_time": "2021-09-30T01:24:44",
        "upload_time_iso_8601": "2021-09-30T01:24:44.675716Z",
        "url": "https://files.pythonhosted.org/packages/35/2e/530337caad93d2c5919db93fcff6481756a97dfd2c5dd990550cce35b433/geosparql_dggs-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0737c3991c9e57682a15f49f65555f00fc007fa20fa2121afac4fc57c641894",
          "md5": "d28245e5bb19885fc86f36666116e0ae",
          "sha256": "0ffb5dd0d2c66854ce264b64562eb990278d7bf7e715853001b05f7ecd4b97b3"
        },
        "downloads": -1,
        "filename": "geosparql-dggs-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d28245e5bb19885fc86f36666116e0ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5200,
        "upload_time": "2021-09-30T01:24:46",
        "upload_time_iso_8601": "2021-09-30T01:24:46.761034Z",
        "url": "https://files.pythonhosted.org/packages/d0/73/7c3991c9e57682a15f49f65555f00fc007fa20fa2121afac4fc57c641894/geosparql-dggs-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "352e530337caad93d2c5919db93fcff6481756a97dfd2c5dd990550cce35b433",
        "md5": "d946b42258ed8e109994fce49bf30f1f",
        "sha256": "297eedc399711c5c307b612bcdc4f55ead86ee7e3a5e486976725218cdd8d773"
      },
      "downloads": -1,
      "filename": "geosparql_dggs-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d946b42258ed8e109994fce49bf30f1f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5502,
      "upload_time": "2021-09-30T01:24:44",
      "upload_time_iso_8601": "2021-09-30T01:24:44.675716Z",
      "url": "https://files.pythonhosted.org/packages/35/2e/530337caad93d2c5919db93fcff6481756a97dfd2c5dd990550cce35b433/geosparql_dggs-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0737c3991c9e57682a15f49f65555f00fc007fa20fa2121afac4fc57c641894",
        "md5": "d28245e5bb19885fc86f36666116e0ae",
        "sha256": "0ffb5dd0d2c66854ce264b64562eb990278d7bf7e715853001b05f7ecd4b97b3"
      },
      "downloads": -1,
      "filename": "geosparql-dggs-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d28245e5bb19885fc86f36666116e0ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5200,
      "upload_time": "2021-09-30T01:24:46",
      "upload_time_iso_8601": "2021-09-30T01:24:46.761034Z",
      "url": "https://files.pythonhosted.org/packages/d0/73/7c3991c9e57682a15f49f65555f00fc007fa20fa2121afac4fc57c641894/geosparql-dggs-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}