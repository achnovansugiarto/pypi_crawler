{
  "info": {
    "author": "Kukuster",
    "author_email": "KukusterMOP@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# CI methods analyser\nA toolkit for measuring the efficacy of various methods for calculating a confidence interval.\nCurrently provides with a toolkit for measuring the efficacy of methods for a confidence interval for the following statistics:\n\n - proportion\n - difference between two proportions\n\nThis library was mainly inspired by the library:\n[\"Five Confidence Intervals for Proportions That You Should Know About\" by Dr. Dennis Robert](https://towardsdatascience.com/five-confidence-intervals-for-proportions-that-you-should-know-about-7ff5484c024f)\n\n\n## Dependencies\n - numpy\n - scipy\n - matplotlib\n - tqdm\n\n## Usage\n\n### **Testing Wald Interval - a popular method for calculating confidence interval for proportion**\n\nWald Interval is defined as so:\n\n<div style=\"text-align: center; margin: auto\">\n    <img style=\"display: inline-block; margin: 5px\" src=\"https://latex.codecogs.com/png.latex?%5Cbg_white%20%28w%5E-%2C%20w%5E&plus;%29%20%3D%20%5Chat%7Bp%7D%5C%2C%5Cpm%5C%2Cz%5Csqrt%7B%5Cfrac%7B%5Chat%7Bp%7D%281-%5Chat%7Bp%7D%29%7D%7Bn%7D%7D\" alt=\"$$ (w^-, w^+) = p\\,\\pm\\,z\\sqrt{\\frac{p(1-p)}{n}} $$\" />\n</div>\n\n\n```python\nfrom CI_methods_analyser import CImethodForProportion_efficacyToolkit as toolkit, methods_for_CI_for_proportion\n\n# take an already implemented method for calculating CI for proportions\nwald_interval = methods_for_CI_for_proportion.wald_interval\n\n# initialize the toolkit\nwald_interval_test_toolkit = toolkit(\n    method=wald_interval, method_name=\"Wald Interval\")\n\n\n# calculate the real coverage that the method produces\n# for each case of a true population proportion (taken from the list `proportions`)\nwald_interval_test_toolkit.calculate_coverage_analytically(\n    sample_size=100, proportions=('0.001', '0.999', '0.01'), confidence=0.95)\n# now you can access the calculated coverage and a few statistics:\n# wald_interval_test_toolkit.coverage  # 1-d array of 0-100, the same shape as passed `proportions`\n# wald_interval_test_toolkit.average_coverage  # np.longdouble 0-100, avg of `coverage`\n# wald_interval_test_toolkit.average_deviation  # np.longdouble 0-100, avg abs diff w/ `confidence`\n\n# plots the calculated coverage in a matplotlib.pyplot figure\nwald_interval_test_toolkit.plot_coverage(\n    plt_figure_title=\"Wald Interval coverage\")\n# you can access the figure here:\n# wald_interval_test_toolkit.figure\n\n# shows the figure (non-blocking)\nwald_interval_test_toolkit.show_plot()\n\n# because show_plot() is non-blocking,\n# you have to pause the execution in order for the figure to be rendered completely\ninput('press Enter to exit')\n```\n\nThis will output the image:\n\n![Wald Interval - real coverage](https://github.com/Kukuster/CI_methods_analyser/raw/master/docs/wald_interval_p_0.001_0.999_0.01_n100_conf95.png)\n\nThe plot indicates overall bad performance of the method and particularly poor performance for extreme proportions. \n\n<hr>\n\n*You really might want to use a different method. Check out this wonderful medium.com article by **Dr. Dennis Robert**:*\n - ***[Five Confidence Intervals for Proportions That You Should Know About](https://towardsdatascience.com/five-confidence-intervals-for-proportions-that-you-should-know-about-7ff5484c024f)** [code in R]*\n\n<hr>\n\n<br>\n\nThe shortcut function `calculate_coverage_and_show_plot` will yield the equivalent calculation and render the same picture:\n\n\n```python\nfrom CI_methods_analyser import CImethodForProportion_efficacyToolkit as toolkit, methods_for_CI_for_proportion\n\ntoolkit(\n    method=methods_for_CI_for_proportion.wald_interval, method_name=\"Wald Interval\"\n).calculate_coverage_and_show_plot(\n    sample_size=100, proportions=('0.001', '0.999', '0.01'), confidence=0.95,\n    plt_figure_title=\"Wald Interval coverage\"\n)\n\n\ninput('press Enter to exit')\n```\n\nI personally prefer **night light-friendly** styling:\n\n```python\nfrom CI_methods_analyser import CImethodForProportion_efficacyToolkit as toolkit, methods_for_CI_for_proportion\n\n\ntoolkit(\n    method=methods_for_CI_for_proportion.wald_interval, method_name=\"Wald Interval\"\n).calculate_coverage_and_show_plot(\n    sample_size=100, proportions=('0.001', '0.999', '0.01'), confidence=0.95,\n    plt_figure_title=\"Wald Interval coverage\",\n    theme='dark_background', plot_color=\"green\", line_color=\"orange\"\n)\n\n\ninput('press Enter to exit')\n```\n\n![Wald Interval - real coverage (dark theme)](https://github.com/Kukuster/CI_methods_analyser/raw/master/docs/wald_interval_p_0.001_0.999_0.01_n100_conf95_dark.png)\n\n\n\n\n<br>\n\n### **Testing custom method for CI for proportion**\n\nYou can implement your own methods and test them:\n\n```python\nfrom CI_methods_analyser import CImethodForProportion_efficacyToolkit as toolkit\nfrom CI_methods_analyser.math_functions import normal_z_score_two_tailed\nfrom functools import lru_cache\n\n# not a particularly good method for calculating CI for proportion\n@lru_cache(100_000)\ndef im_telling_ya_test(x: int, n: int, conflevel: float = 0.95):\n    z = normal_z_score_two_tailed(conflevel)\n\n    p = float(x)/n\n    return (\n        p - 0.02*z,\n        p + 0.02*z\n    )\n\n\ntoolkit(\n    method=im_telling_ya_test, method_name='\"I\\'m telling ya\" test'\n).calculate_coverage_and_show_plot(\n    sample_size=100, proportions=('0.001', '0.999', '0.01'), confidence=0.95,\n    plt_figure_title='\"I\\'m telling ya\" coverage',\n    theme='dark_background', plot_color=\"green\", line_color=\"orange\"\n)\n\n\ninput('press Enter to exit')\n\n```\n![\"I'm telling ya\" test - real coverage](https://github.com/Kukuster/CI_methods_analyser/raw/master/docs/im_telling_ya_test_p_0.001_0.999_0.01_n100_conf95_dark.png)\n\n\n```python\nfrom CI_methods_analyser import CImethodForProportion_efficacyToolkit as toolkit\nfrom CI_methods_analyser.math_functions import normal_z_score_two_tailed\nfrom functools import lru_cache\n\n# you could say, this method is \"too good\"\n@lru_cache(100_000)\ndef God_is_my_witness_score(x: int, n: int, conflevel: float = 0.95):\n    z = normal_z_score_two_tailed(conflevel)\n\n    p = float(x)/n\n    return (\n        (0 + p)/2 - 0.005*z,\n        (1 + p)/2 + 0.005*z\n    )\n\n\ntoolkit(\n    method=God_is_my_witness_score, method_name='\"God is my witness\" score'\n).calculate_coverage_and_show_plot(\n    sample_size=100, proportions=('0.001', '0.999', '0.01'), confidence=0.95,\n    plt_figure_title='\"God is my witness\" score coverage', theme='dark_background'\n)\n\ninput('press Enter to exit')\n```\n\n![\"God is my witness\" score - real coverage](https://github.com/Kukuster/CI_methods_analyser/raw/master/docs/God_is_my_witness_score_p_0.001_0.999_0.01_n100_conf95_dark.png)\n\n\n### **Testing methods for CI for the difference between two proportions**\n\nLet's use the implemented **Pooled Z test**:\n\n<div style=\"text-align: center; margin: auto\">\n    <img style=\"display: inline-block; margin: 5px\" src=\"https://latex.codecogs.com/gif.latex?%5Cbg_white%20%28%5Cdelta%5E-%2C%20%5Cdelta%5E&plus;%29%20%3D%20%5Chat%7Bp%7D_T%20-%20%5Chat%7Bp%7D_C%20%5Cpm%20z_%7B%5Calpha%7D%5Csqrt%7B%5Cbar%7Bp%7D%281-%5Cbar%7Bp%7D%29%28%5Cfrac%7B1%7D%7Bn_T%7D&plus;%5Cfrac%7B1%7D%7Bn_C%7D%29%7D\" alt=\"$$ (\\delta^-, \\delta^+) = \\hat{p}_T - \\hat{p}_C \\pm z_{\\alpha}\\sqrt{\\bar{p}(1-\\bar{p})(\\frac{1}{n_T}+\\frac{1}{n_C})} $$\" />\n</div>\n, where:\n<div style=\"text-align: center; margin: auto\">\n    <img style=\"display: inline-block; margin: 5px\" src=\"https://latex.codecogs.com/gif.latex?%5Cbg_white%20%5Cbar%7Bp%7D%20%3D%20%5Cfrac%7Bn_T%5Chat%7Bp%7D_T%20&plus;%20n_C%5Chat%7Bp%7D_C%7D%7Bn_T%20&plus;%20n_C%7D\" alt=\"$$ \\bar{p} = \\frac{n_T\\hat{p}_T + n_C\\hat{p}_C}{n_T + n_C} $$\" />\n</div>\n\n\n```python\nfrom CI_methods_analyser import CImethodForDiffBetwTwoProportions_efficacyToolkit as toolkit_d, methods_for_CI_for_diff_betw_two_proportions as methods\n\n\ntoolkit_d(\n    method=methods.Z_test_pooled, method_name='Z test pooled'\n).calculate_coverage_and_show_plot(\n    sample_size1=100, sample_size2=100, proportions=('0.001', '0.999', '0.01'), confidence=0.95,\n    plt_figure_title='Z test pooled', theme='dark_background',\n)\n\ninput('press Enter to exit')\n```\n\n\n![Z test (unpooled) - real coverage](https://github.com/Kukuster/CI_methods_analyser/raw/master/docs/z_test_pooled_p_0.001_0.999_0.01_n1_100_n2_100_conf95.png)\n\nAs you can see, this test is generally very good for close proportions, unless proportions have extreme values [purple]\n\nAlso, this test is extremely concervative for the high and extreme differences between two proportions, i.e. for proportions which values a far apart [green]\n\n<br>\n\n\nYou may want to change the color palette (although I wouldn't):\n\n\n```python\nfrom CI_methods_analyser import CImethodForDiffBetwTwoProportions_efficacyToolkit as toolkit_d, methods_for_CI_for_diff_betw_two_proportions as methods\n\n\ntoolkit_d(\n    method=methods.Z_test_pooled, method_name='Z test pooled'\n).calculate_coverage_and_show_plot(\n    sample_size1=100, sample_size2=100, proportions=('0.001', '0.999', '0.01'), confidence=0.95,\n    plt_figure_title='Z test pooled', theme='dark_background',\n    colors=(\"gray\", \"purple\", \"white\", \"orange\", \"#d62728\")\n)\n\ninput('press Enter to exit')\n```\n\n![Z test (unpooled) - real coverage](https://github.com/Kukuster/CI_methods_analyser/raw/master/docs/z_test_pooled_p_0.001_0.999_0.01_n1_100_n2_100_conf95_hotcolors.png)\n\n\n<br>\n<br>\n\n## NOTES\n\n### Methods for measuring efficacy of CI methods\nTwo ways can be used to calculate the efficacy of CI methods:\n - approximately, with random simulation (as implemented in R by Dr. Dennis Robert, see link above). Here: `calculate_coverage_randomly`\n - precisely, with the analytical solution. Here: `calculate_coverage_analytically`\n\nBoth methods are implemented for CI for both statistics: *proportion*, and *difference between two proportions*. For the precise analytical solution, an optimization was made. Theoretically, it is lossy, but practically the error is always negligible (as proven by `test_z_precision_difference.py`). Optimization is regulated with the parameter `z_precision` and it is automatically estimated by default.\n\n<br>\n\n## Various links\n**1. Equivalence and Noninferiority Testing (as I understand, are fancy terms for 2-sided and 1-sided p tests for the difference between two proportions)**\n - **[https://ncss-wpengine.netdna-ssl.com/wp-content/themes/ncss/pdf/Procedures/PASS/Confidence_Intervals_for_the_Difference_Between_Two_Proportions.pdf](https://ncss-wpengine.netdna-ssl.com/wp-content/themes/ncss/pdf/Procedures/PASS/Confidence_Intervals_for_the_Difference_Between_Two_Proportions.pdf)**\n - **[https://ncss-wpengine.netdna-ssl.com/wp-content/themes/ncss/pdf/Procedures/PASS/Non-Inferiority_Tests_for_the_Difference_Between_Two_Proportions.pdf](https://ncss-wpengine.netdna-ssl.com/wp-content/themes/ncss/pdf/Procedures/PASS/Non-Inferiority_Tests_for_the_Difference_Between_Two_Proportions.pdf)**\n - [https://www.ncss.com/wp-content/themes/ncss/pdf/Procedures/NCSS/Two_Proportions-Non-Inferiority,_Superiority,_Equivalence,_and_Two-Sided_Tests_vs_a_Margin.pdf](https://www.ncss.com/wp-content/themes/ncss/pdf/Procedures/NCSS/Two_Proportions-Non-Inferiority,_Superiority,_Equivalence,_and_Two-Sided_Tests_vs_a_Margin.pdf) \n - [https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3019319/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3019319/)\n - [https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2701110/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2701110/)\n - [https://pubmed.ncbi.nlm.nih.gov/9595617/](https://pubmed.ncbi.nlm.nih.gov/9595617/)\n - [http://thescipub.com/pdf/10.3844/amjbsp.2010.23.31](http://thescipub.com/pdf/10.3844/amjbsp.2010.23.31) \n\n**2. Biostatistics course (Dr. Nicolas Padilla Raygoza, et al.)**\n - [https://docs.google.com/presentation/d/1t1DowyVDDRFYGHDlJgmYMRN4JCrvFl3q/edit#slide=id.p1](https://docs.google.com/presentation/d/1t1DowyVDDRFYGHDlJgmYMRN4JCrvFl3q/edit#slide=id.p1) \n - [https://www.google.com/search?q=Dr.+Sc.+Nicolas+Padilla+Raygoza+Biostatistics+course+Part+10&oq=Dr.+Sc.+Nicolas+Padilla+Raygoza+Biostatistics+course+Part+10&aqs=chrome..69i57.3448j0j7&sourceid=chrome&ie=UTF-8](https://www.google.com/search?q=Dr.+Sc.+Nicolas+Padilla+Raygoza+Biostatistics+course+Part+10&oq=Dr.+Sc.+Nicolas+Padilla+Raygoza+Biostatistics+course+Part+10&aqs=chrome..69i57.3448j0j7&sourceid=chrome&ie=UTF-8) \n - [https://slideplayer.com/slide/9837395/](https://slideplayer.com/slide/9837395/)\n\n**3. Using z-test instead of a binomial test:**\n - When can use [https://stats.stackexchange.com/questions/424446/when-can-we-use-a-z-test-instead-of-a-binomial-test](https://stats.stackexchange.com/questions/424446/when-can-we-use-a-z-test-instead-of-a-binomial-test) \n - How to use [https://cogsci.ucsd.edu/~dgroppe/STATZ/binomial_ztest.pdf](https://cogsci.ucsd.edu/~dgroppe/STATZ/binomial_ztest.pdf) \n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kukuster/CI_methods_analyser",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CI-methods-analyser",
    "package_url": "https://pypi.org/project/CI-methods-analyser/",
    "platform": "",
    "project_url": "https://pypi.org/project/CI-methods-analyser/",
    "project_urls": {
      "Homepage": "https://github.com/Kukuster/CI_methods_analyser"
    },
    "release_url": "https://pypi.org/project/CI-methods-analyser/1.1.0/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "scipy",
      "tqdm"
    ],
    "requires_python": "",
    "summary": "Analyse efficacy of your own methods for calculating confidence interval",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10578506,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e566d8190ce1ab79eeabd3003f2bbb58f4d05d753e1b0b0bb01c64c5462ec194",
          "md5": "7139c06e5ef32530b42d295d09c9f44b",
          "sha256": "91475605b837a543e184ed76a3883770929d365f230e8da7aba4f2f027f5a7f1"
        },
        "downloads": -1,
        "filename": "CI_methods_analyser-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7139c06e5ef32530b42d295d09c9f44b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23915,
        "upload_time": "2021-06-07T12:05:53",
        "upload_time_iso_8601": "2021-06-07T12:05:53.442619Z",
        "url": "https://files.pythonhosted.org/packages/e5/66/d8190ce1ab79eeabd3003f2bbb58f4d05d753e1b0b0bb01c64c5462ec194/CI_methods_analyser-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f8c4d85ba273b92a827679a0ab2c4cfb7c10d83e14ab80d19066b96a1474604",
          "md5": "698ef3980ba22bc1c8d1bbb36526b913",
          "sha256": "248b4a4dfb694da50bd84f98ef5ec19961a92c920b4778e4ac16affd5885e201"
        },
        "downloads": -1,
        "filename": "CI_methods_analyser-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "698ef3980ba22bc1c8d1bbb36526b913",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 259899,
        "upload_time": "2021-06-07T12:05:55",
        "upload_time_iso_8601": "2021-06-07T12:05:55.657879Z",
        "url": "https://files.pythonhosted.org/packages/7f/8c/4d85ba273b92a827679a0ab2c4cfb7c10d83e14ab80d19066b96a1474604/CI_methods_analyser-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e8c1f3eb26971a4203a0a2f8032ccf6bf4044e220718b5aea570ed48a9cec2b",
          "md5": "307573e75e75f89f8c0ec98b8c2ce53b",
          "sha256": "c6dd553e19c02bd6244350a1dc6a3f701b60e56d40c80ada0fe305822ba5e5fe"
        },
        "downloads": -1,
        "filename": "CI_methods_analyser-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "307573e75e75f89f8c0ec98b8c2ce53b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23931,
        "upload_time": "2021-06-07T12:19:23",
        "upload_time_iso_8601": "2021-06-07T12:19:23.354250Z",
        "url": "https://files.pythonhosted.org/packages/5e/8c/1f3eb26971a4203a0a2f8032ccf6bf4044e220718b5aea570ed48a9cec2b/CI_methods_analyser-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "534b9c7d08426c3dfde2d41e3a4be987287196a4765f56ef21901118345a4bf3",
          "md5": "7b5bd1e8c5ac4448e7d8372f1665b156",
          "sha256": "76fa77a8f9de1430597eba039492da85e1ca54c1a876010da877256c01cf573d"
        },
        "downloads": -1,
        "filename": "CI_methods_analyser-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b5bd1e8c5ac4448e7d8372f1665b156",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 259826,
        "upload_time": "2021-06-07T12:19:25",
        "upload_time_iso_8601": "2021-06-07T12:19:25.186356Z",
        "url": "https://files.pythonhosted.org/packages/53/4b/9c7d08426c3dfde2d41e3a4be987287196a4765f56ef21901118345a4bf3/CI_methods_analyser-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebbfb47c8b9d36792e29f341fb12cd0466bc43423219500614379a0874aff461",
          "md5": "f4df133389889b4ed7cf687313b736c8",
          "sha256": "9e250179cd88a09bd084a12974b340ebf02fb942400a0919fc9c9d0aa021bda9"
        },
        "downloads": -1,
        "filename": "CI_methods_analyser-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4df133389889b4ed7cf687313b736c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23916,
        "upload_time": "2021-06-07T12:53:19",
        "upload_time_iso_8601": "2021-06-07T12:53:19.199077Z",
        "url": "https://files.pythonhosted.org/packages/eb/bf/b47c8b9d36792e29f341fb12cd0466bc43423219500614379a0874aff461/CI_methods_analyser-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8036a9a71764d61159effb8c2e71938a5513a8ac03f977bfd41b5acbf0a225c",
          "md5": "dee3bc93fb4fdabb22ab6dcc6222ff8c",
          "sha256": "6cdf47bd58b9b387f25a0d39aa7ef8cfff176c57a2d1de6f9cc78bf036782f64"
        },
        "downloads": -1,
        "filename": "CI_methods_analyser-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dee3bc93fb4fdabb22ab6dcc6222ff8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 260085,
        "upload_time": "2021-06-07T12:53:21",
        "upload_time_iso_8601": "2021-06-07T12:53:21.190107Z",
        "url": "https://files.pythonhosted.org/packages/e8/03/6a9a71764d61159effb8c2e71938a5513a8ac03f977bfd41b5acbf0a225c/CI_methods_analyser-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "355a7f5be02e49abd43cf30fdedcbdd689176ea42d3919b69c65cf5e3617aef6",
          "md5": "ca2452064ec3990b658cdf49c956b293",
          "sha256": "9db929d015952894065cb1bca33d897f4543dd3d1fa937f965819c0e9bfbae8e"
        },
        "downloads": -1,
        "filename": "CI_methods_analyser-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca2452064ec3990b658cdf49c956b293",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23925,
        "upload_time": "2021-06-07T14:39:13",
        "upload_time_iso_8601": "2021-06-07T14:39:13.861041Z",
        "url": "https://files.pythonhosted.org/packages/35/5a/7f5be02e49abd43cf30fdedcbdd689176ea42d3919b69c65cf5e3617aef6/CI_methods_analyser-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca4ba9945bcdbd7465988c82b2d5a628a452119c328b72605a346ad06ce0847e",
          "md5": "cf1dc9483e254998ded9c94158edd56b",
          "sha256": "1bb0d2f287a38860e94e7911b066800996a9784ca1a67372fe32c9b806febf97"
        },
        "downloads": -1,
        "filename": "CI_methods_analyser-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cf1dc9483e254998ded9c94158edd56b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 260108,
        "upload_time": "2021-06-07T14:39:15",
        "upload_time_iso_8601": "2021-06-07T14:39:15.880867Z",
        "url": "https://files.pythonhosted.org/packages/ca/4b/a9945bcdbd7465988c82b2d5a628a452119c328b72605a346ad06ce0847e/CI_methods_analyser-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "355a7f5be02e49abd43cf30fdedcbdd689176ea42d3919b69c65cf5e3617aef6",
        "md5": "ca2452064ec3990b658cdf49c956b293",
        "sha256": "9db929d015952894065cb1bca33d897f4543dd3d1fa937f965819c0e9bfbae8e"
      },
      "downloads": -1,
      "filename": "CI_methods_analyser-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca2452064ec3990b658cdf49c956b293",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23925,
      "upload_time": "2021-06-07T14:39:13",
      "upload_time_iso_8601": "2021-06-07T14:39:13.861041Z",
      "url": "https://files.pythonhosted.org/packages/35/5a/7f5be02e49abd43cf30fdedcbdd689176ea42d3919b69c65cf5e3617aef6/CI_methods_analyser-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca4ba9945bcdbd7465988c82b2d5a628a452119c328b72605a346ad06ce0847e",
        "md5": "cf1dc9483e254998ded9c94158edd56b",
        "sha256": "1bb0d2f287a38860e94e7911b066800996a9784ca1a67372fe32c9b806febf97"
      },
      "downloads": -1,
      "filename": "CI_methods_analyser-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cf1dc9483e254998ded9c94158edd56b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 260108,
      "upload_time": "2021-06-07T14:39:15",
      "upload_time_iso_8601": "2021-06-07T14:39:15.880867Z",
      "url": "https://files.pythonhosted.org/packages/ca/4b/a9945bcdbd7465988c82b2d5a628a452119c328b72605a346ad06ce0847e/CI_methods_analyser-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}