{
  "info": {
    "author": "Sunny Sharma",
    "author_email": "sunnysharmagts@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Monitoring"
    ],
    "description": "Git-Heimdall\n=============\n\nGit-Heimdall is a guardian/gatekeeper tool for scanning sensitive data before\ncommitting files to github. It also provides functionality for creating\nconfiguration files from existing template files.\n\n.. image:: https://img.shields.io/badge/source-blue.svg?\n   :target: https://github.com/sunnysharmagts/git-heimdall/tree/master/heimdall\n\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg?\n   :target: https://github.com/sunnysharmagts/git-heimdall/blob/master/LICENSE.md\n\nContents\n--------\n\n.. contents:: Table of Contents:\n    :backlinks: none\n\nWhat is Git-Heimdall?\n----------------------\n\nGit-Heimdall is a tool for scanning sensitive data before the staged files are\nadded to a commit. So, if a developer makes some changes in his repository and\ntries to commit those changes via `git commit`, those files will be first\nscanned by *Git-Heimdall* to check whether there are any sensitive data in those\nchanges and informs developer about it.\n\nThis process is automated. You don't have to run extra commands in order to scan those files. Infact those files are scanned automatically when git commit is called.\n\n\nWhy Git-Heimdall?\n------------------\n\nCommitting sensitive data has been one of the most common vulnerabilities in\nsecurity world. Developers commit sensitive data and expose it to internet\nwithout even realising about it.\n\nThis is where Git-Heimdall comes in. Git-Heimdall provides a set of functionalities like :-\n\n- Scanning files before commit to track secrets\n- Keep configuration files in template format so that there are less chances\n  of everytime modifying the config file and committing of secrets.(`More about\n  Git-Heimdall secretfy`_)\n\n\nInstallation\n------------\n\nThis section provides quick steps of how to setup this tool.\n\n1. Create a virtual Python environment and install Git-heimdall in it.\n\n   .. code-block:: sh\n\n    python3 -m venv vheimdall\n    . vheimdall/bin/activate\n    pip3 install git-heimdall\n    heimdall -i\n\n2. Run Sanity test\n\n   .. code-block:: sh\n\n    heimdall secretfy -m\n\n   The above command creates mock templates, secrets file at\n   ``/tmp/git-heimdall`` directory. The ``-c`` or ``--config``\n   option is for providing your config.yaml file.\n\n3. Register current project with git-heimdall\n\n   .. code-block:: sh\n\n    heimdall -a <absolute-path-of-project>\n\n   The above command registers your project with heimdall scans. Next time when\n   you try to commit staged files, it would start scanning those files before\n   it gets added to commit and pushed to github.\n\n\nMore about Git-Heimdall secretfy\n--------------------------------\n\ngit-heimdall provides ``secretfy`` option for generating config files\ndynamically from your template files. The templates are nothing but\nconfiguration files, which holds your configuration in mustache format.\n\n``secretfy`` tool generates the required configuration file with help of secrets\nfile which would contain the real values required for actual config/properties\nfile.\n\nLet's just say you have a set of configuration which you keep in a file\nconfig.yaml, config.json, application.properties etc. These configuration might\nhave some highly sensitive information required to execute your project like\nyour user credentials, email, phone number, private key etc. Everytime, in your\ndevelopment process, you need to add these sensitive values to the config file\nand remove them before committing the code into github.\n\nThis process is pretty painful and often you endup committing one or the other\nsensitive information to git.\n\nSo, instead of having a config file, you can have a template which resembles\nyour config file. Now before executing your project. All you need to do is\ngenerate the desired config file with the help of this tool and then follow the\nusual approach of running the project. The best part is that you don't have to\nworry about accidently commit the actual config file to the git repo. That file\nwon't be shown in git status unless you forcibly add it.\n\n\nDevelopment\n------------\n\nThis section describes how to set up a development environment for\nGit-Heimdall. This section is useful for those who would like to contribute to\nGit-Heimdall or run Git-Heimdall directly from its source.\n\nWe use primarily three tools to perform development on this project: Python 3,\nGit, and Make. Your system may already have these tools. But if not, here are\nsome brief instructions on how they can be installed.\n\n1. On macOS, if you have `Homebrew <https://brew.sh/>`_ installed, then these tools can be be installed easily with the following command:\n\n   .. code-block:: sh\n\n    brew install python git\n\n   On a Debian GNU/Linux system or in another Debian-based Linux distribution, they can be installed with the following commands:\n\n   .. code-block:: sh\n\n    apt-get update\n    apt-get install python3 python3-venv git make\n\n   On any other system, we hope you can figure out how to install these tools yourself.\n\n2. Clone the project repository and enter its top-level directory:\n\n   .. code-block:: sh\n\n    git clone https://github.com/sunnysharmagts/git-heimdall\n    cd git-heimdall\n\n3. Create a virtual Python environment for development purpose:\n\n   .. code-block:: sh\n\n    make vheimdall deps\n\n   This creates a virtual Python environment at ``~/.vheimdall/git-heimdall``.\n   Additionally, it also creates a convenience script named ``vheimdall`` in\n   the current directory to easily activate the virtual Python\n   environment which we will soon see in the next point.\n\n   To undo this step at anytime in future, i.e., delete the virtual\n   Python environment directory, either enter\n   ``rm -rf vheimdall ~/.vheimdall/``.\n\n4. Activate the virtual Python environment:\n\n   .. code-block:: sh\n\n    . ./vheimdall\n\n5. In the top-level directory of the project, enter this command:\n\n   .. code-block:: sh\n\n    python3 -m heimdall -i\n\n   This initializes git-heimdall tool. This is just a **one time process** and\n   need not be run everytime, unless if there is any change in the template\n   resources. This command just updates in the location of the git templateDir\n   in git configuration.\n\n   .. code-block:: sh\n\n    python3 -m heimdall secretfy -m\n\n   This generates mock data at ``/tmp/git-heimdall``. This step serves as a\n   sanity check that ensures that the development environment is correctly set\n   up. Also, it gives a brief idea of how to create a config in form of\n   template.\n\n6. Now to simulate the environment and test the tool. Do the following:-\n\n   .. code-block:: sh\n\n    . ~/.vheimdall/git-heimdall/bin/activate\n    mkdir /tmp/git-heimdall-tool-test\n    cd /tmp/git-heimdall-tool-test\n    echo -n \"print('<insert-some-sensitive-value>')\" >> sample.py\n    git init\n    git add .\n    git commit -m \"Sample commit\"\n\n   This will start scanning the sample.py file and will provide you with the sensitive data that you have in this file. Add more files and play with the tool to familiar yourself.\n\n\nHow to Use\n----------\n\nThis section provides samples of how to use this tool.\n\n``heimdall`` is initialized once after installation. That can be done for the following :-\n\n.. code-block:: sh\n\n  heimdall -i\n\nAfter initialization, any new repository created or cloned will be scanned by\nheimdall once any staged files are committed.\n\nYou can register existing repositories to heimdall to integrate scanning process.\n\n.. code-block:: sh\n\n  heimdall -reg <absolute-path-of-repo>\n\n``heimdall secretfy`` consist of 3 components :-\n\n**Secrets file** - This file can be in yaml, json and xml format.\n\n**Template files** - These files are configuration files in template format. For\neg:- If you have a file `config.json` then your template file will be\n`config.json.mustache`.\n\n**Extension** - This is the file extension of your configuration file. Following\nare the example config files and their respective extension.\n\n.. code-block:: sh\n\n  a. config.yaml       : yaml\n  b. config.xml        : xml\n  c. config.json       : json\n  d. config.properties : properties\n\nThese parameters can be added to a ``baseconfig.yaml`` file in the following way\n\n.. code-block:: sh\n\n  heimdall:\n      secret: res/secrets.yaml\n      templates:\n          -\n            file: res/example.yaml.mustache\n            extension: yaml\n          -\n            file: res/example.json.mustache\n            extension: json\n          -\n            file: res/example.xml.mustache\n            extension: xml\n\n\nThe ``baseconfig.yaml`` file starts with ``heimdall`` tag.\n\n1. ``secret`` is the absolute path of the secrets file containing sensitive\nvalues.\n\n2. ``templates`` tag is an array of template files. All these files are in\n``.mustache`` format whose sensitive values resides in ``secrets.yaml`` file.\n\n* ``file`` is the absolute path of the template file.\n* ``extension`` is the extension of the configuration file which will be\n  generated from the template file.\n\n``NOTE: Make sure that the template file are in <file_name>.<extension>.<mustache> format.``\n\nRun the following command to generate the config files.\n\n.. code-block:: sh\n\n  heimdall secretfy -c baseconfig.yaml\n\nThis will create config files in the respective directories. Note that these\nconfigurations won't be seen in git history. You can check that by doing ``git\nstatus``.\n\n\nConfig template file samples\n----------------------------\n\n**secrets.yaml**\n\n.. code-block:: sh\n\n  secrets:\n      item:\n          val1: foo@bar.com\n          val2: my_password\n      item1:\n          val3: username\n          val4: my_private_key\n\n\n**example.yaml.mustache**\n\n.. code-block:: sh\n\n  secrets:\n    item:\n        val1: {{secrets.item.val1}}\n        val2: {{secrets.item.val2}}\n        result: This is just a dummy description.\n    item1:\n        val3: {{secrets.item1.val3}}\n        val4: {{secrets.item1.val4}}\n        result: This is another dummy description.\n\n\nThe `secrets.yaml` file contains the sensitive information and\n`example.yaml.mustache` is the template file which contains the keys in\n`mustache` format. Hence the key `secrets.item.val2` has value `my_password`\nwhich will be populated via `heimdall secretfy` tool.\n\n``NOTE: You can run `heimdall secretfy -m` to get more sample baseconfig, templates, secret files. These files will get generated at `/tmp/git-heimdall`.``\n\n\nFAQ\n---\n\n**How can i deploy my code in CICD pipeline or on remote server since it\ndoesn't have config files and needs to be generated.**\n\nYou can generate all the config files required for your repository to compile\nand run in CICD pipeline or at remote server by the following command.\n\n.. code-block:: sh\n\n  heimdall secretfy -e mustache -s <secrets_file_path> -r <repository_path>\n\n``-e`` is the template extension, ``-s`` is the absolute path of the secrets file\nand ``-r`` is absolute path of the repository\n\n\nSupport\n-------\n\nTo report bugs, suggest improvements, or ask questions, please create a\nnew issue at https://github.com/sunnysharmagts/git-heimdall/issues.\n\n\nLicense\n-------\n\nThis is free software. You are permitted to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of it, under the\nterms of the MIT License. See `LICENSE.md`_ for the complete license.\n\nThis software is provided WITHOUT ANY WARRANTY; without even the implied\nwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See\n`LICENSE.md`_ for the complete disclaimer.\n\n.. _LICENSE.md: https://github.com/sunnysharmagts/git-heimdall/blob/master/LICENSE.md",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "git-heimdall",
    "package_url": "https://pypi.org/project/git-heimdall/",
    "platform": "",
    "project_url": "https://pypi.org/project/git-heimdall/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/git-heimdall/0.0.4.dev0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tool to scan staged files before commit and provide functionality to create configuration file from secret                    templates",
    "version": "0.0.4.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7579584,
  "releases": {
    "0.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de637c4111013fbb790e990eedb8a259baabefe2d8e4d60b237545a7c4ee50bb",
          "md5": "973027121d2fdb4377f68efa98f9649c",
          "sha256": "a009e8d86a73148ad5e13fc7bb4177a15436bfb1f8b7a871a1947395514e85bb"
        },
        "downloads": -1,
        "filename": "git-heimdall-0.0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "973027121d2fdb4377f68efa98f9649c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13831,
        "upload_time": "2020-04-10T13:26:45",
        "upload_time_iso_8601": "2020-04-10T13:26:45.161705Z",
        "url": "https://files.pythonhosted.org/packages/de/63/7c4111013fbb790e990eedb8a259baabefe2d8e4d60b237545a7c4ee50bb/git-heimdall-0.0.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "583520b70a8a2766442edb56b722f69d52fd6c4f0c5cfbb42f911504d815c4cd",
          "md5": "e300d526f90abbb5f3f17666a74f9151",
          "sha256": "c929f3cf06a2651a17dde5ced5d8bfc26ba263fd72f224a3cae97f52c969cfc4"
        },
        "downloads": -1,
        "filename": "git-heimdall-0.0.2.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "e300d526f90abbb5f3f17666a74f9151",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14623,
        "upload_time": "2020-04-21T07:10:16",
        "upload_time_iso_8601": "2020-04-21T07:10:16.823060Z",
        "url": "https://files.pythonhosted.org/packages/58/35/20b70a8a2766442edb56b722f69d52fd6c4f0c5cfbb42f911504d815c4cd/git-heimdall-0.0.2.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99da40e2e9035ef9b835803130db89d09b5bbc5e303fbbceb5c969eb3f73ff4d",
          "md5": "5ecd42426988111cb29dc46503ad0161",
          "sha256": "b5afe23e8ad8bcfbe550f4a5d0082d5072e7f1486528d96fdcb21bcfe5120c3e"
        },
        "downloads": -1,
        "filename": "git-heimdall-0.0.3.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "5ecd42426988111cb29dc46503ad0161",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14814,
        "upload_time": "2020-04-23T15:29:59",
        "upload_time_iso_8601": "2020-04-23T15:29:59.440524Z",
        "url": "https://files.pythonhosted.org/packages/99/da/40e2e9035ef9b835803130db89d09b5bbc5e303fbbceb5c969eb3f73ff4d/git-heimdall-0.0.3.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "608c6fa8e9eb7ff6078ec274b0ad026acbbe22f77fd6fad3b6f9af63106fc39a",
          "md5": "a4d2387d26a666f5a88b6471c3c4933c",
          "sha256": "c443a565663df90aaa90bb5ca2b15ba89a42130ed3c281601ccbae49d8079472"
        },
        "downloads": -1,
        "filename": "git-heimdall-0.0.4.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "a4d2387d26a666f5a88b6471c3c4933c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18018,
        "upload_time": "2020-06-28T07:20:29",
        "upload_time_iso_8601": "2020-06-28T07:20:29.297919Z",
        "url": "https://files.pythonhosted.org/packages/60/8c/6fa8e9eb7ff6078ec274b0ad026acbbe22f77fd6fad3b6f9af63106fc39a/git-heimdall-0.0.4.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "608c6fa8e9eb7ff6078ec274b0ad026acbbe22f77fd6fad3b6f9af63106fc39a",
        "md5": "a4d2387d26a666f5a88b6471c3c4933c",
        "sha256": "c443a565663df90aaa90bb5ca2b15ba89a42130ed3c281601ccbae49d8079472"
      },
      "downloads": -1,
      "filename": "git-heimdall-0.0.4.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "a4d2387d26a666f5a88b6471c3c4933c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18018,
      "upload_time": "2020-06-28T07:20:29",
      "upload_time_iso_8601": "2020-06-28T07:20:29.297919Z",
      "url": "https://files.pythonhosted.org/packages/60/8c/6fa8e9eb7ff6078ec274b0ad026acbbe22f77fd6fad3b6f9af63106fc39a/git-heimdall-0.0.4.dev0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}