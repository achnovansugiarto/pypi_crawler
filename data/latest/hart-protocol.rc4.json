{
  "info": {
    "author": "Blaise Thompson",
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# hart-protocol\n\n[![PyPI](https://img.shields.io/pypi/v/hart-protocol)](https://pypi.org/project/hart-protocol)\n[![Conda](https://img.shields.io/conda/vn/conda-forge/hart-protocol)](https://anaconda.org/conda-forge/hart-protocol)\n[![black](https://img.shields.io/badge/code--style-black-black)](https://black.readthedocs.io/)\n[![ver](https://img.shields.io/badge/calver-YYYY.M.MICRO-blue)](https://calver.org/)\n[![log](https://img.shields.io/badge/change-log-informational)](https://github.com/yaq-project/hart-protocol/-/blob/main/CHANGELOG.md)\n\nA sans I/O Python implementation of the [Highway Adressable Remote Transducer Protocol](https://en.wikipedia.org/wiki/Highway_Addressable_Remote_Transducer_Protocol).\n\n## Introduction\n\nThis Python package contains tooling for encoding and decoding bytestrings for communication with HART peripherals.\nHART has been implemented using a variety of transport layers---Bell 202, RS485, Ethernet, etc.\nIn persuit of simplicity and reusability, this package does not contain any interface capabilities.\nUse something like [pySerial](https://pyserial.readthedocs.io) for transport.\nRead the [sans I/O manifesto](https://sans-io.readthedocs.io/) for more motivation regarding this design pattern.\n\nBriefly, HART is an open protocol for industrial automation supported by multiple device manufacturers.\nHART has a concept of \"address\", so that many peripherals can share the same communication channel.\nHART has limited support for multiple controllers, and generic handheld controllers exist.\nHART peripherals respond to numbered commands, which can be thought of as primative [remote procedure calls](https://en.wikipedia.org/wiki/Remote_procedure_call).\nThe standard specifies a number of universal commands which should be supported by any peripheral, and there are also so-called \"common\" commands which many peripherals implement.\nIt's strongly recommended that you check the documentation of your own peripheral---implementations may be inconsistent.\nIn addition to universal and common commands, it's likely that your peripheral implements many device-specific commands.\n\nThis package aims to have complete and accurate support for all universal and common commands.\nIn addition, this package has tooling for packing and unpacking generic command data for device-specific commands.\nThis package is intentionally simple and narrowly scoped.\nThere is no documentation beyond this README.\nPlease open an issue or PR to the GitHub repository if you find any errors or missing functionality.\n\n## Sending Commands\n\nThe following functions return bytestrings that can be fed to your transport layer.\n\nUniversal Commands\n| command | function                                                    |\n| ------- | ----------------------------------------------------------- |\n| 0       | `read_unique_identifier(address)`                           |\n| 1       | `read_primary_variable(address)`                            |\n| 2       | `read_loop_current_and_percent(address)`                    |\n| 3       | `read_dynamic_variables_and_loop_current(address)`          |\n| 6       | `write_polling_address(address, new_short_address)`         |\n| 11      | `read_unique_identifier_associated_with_tag(tag)`           |\n| 12      | `read_message(address)`                                     |\n| 13      | `read_tag_descriptor_date(address)`                         |\n| 14      | `read_primary_variable_information(address)`                |\n| 15      | `read_output_information(address)`                          |\n| 16      | `read_final_assembly_number(address)`                       |\n| 17      | `write_message(address, message)`                           |\n| 18      | `write_tag_descriptor_date(address, tag, descriptor, date)` |\n| 19      | `write_final_assembly_number(address, number)`              |\n\nCommon-Practice Commands\n| command | function                                                 |\n| ------- | -------------------------------------------------------- |\n| 37      | `set_primary_variable_lower_range_value(address, value)` |\n| 38      | `reset_configuration_changed_flag(address)`              |\n| 42      | `perform_master_reset(address)`                          |\n| 48      | `read_additional_transmitter_status(address)`            |\n| 50      | `read_dynamic_variable_assignments(address)`             |\n| 59      | `write_number_of_response_preambles(address, number)`    |\n| 66      | `toggle_analog_output_mode(address)`                     |\n| 67      | `trim_analog_output_zero(address)`                       |\n| 68      | `trim_analog_output_span(address)`                       |\n| 123     | `select_baud_rate(address, rate)`                        |\n\nArbitrary additional command bytestrings can also be generated as shown below.\nThis is a device-specific command for Brooks GF40 Mass Flow Controllers, which takes an IEE-754 floating point number as well as a unique code.\n\n```python\nimport struct\nimport hart_protocol\ncode = 0\nvalue = 32.1\ndata = struct.pack(\">Bf\", code, value)\ncommand = hart_protocol.pack_command(address=123, command_id=236, data=data)\n```\n\n## Parsing Responses\n\nAll responses are parsed into named tuples.\nEvery single response will have the following keys.\n\nGeneric Response\n| key             | value     |\n| --------------- | --------- |\n| `address`       | `<int>`   |\n| `bytecount`     | `<int>`   |\n| `command`       | `<int>`   |\n| `command_name`  | `<str>`   |\n| `data`          | `<bytes>` |\n| `full_response` | `<bytes>` |\n| `device_status` | `<bytes>` |\n| `response_code` | `<bytes>` |\n\nYou can parse the raw `data` according to the particulars of your peripheral.\nCertain standard responses are parsed further as shown below.\n\nResponse 0\n| key                                           | value                      |\n| --------------------------------------------- | -------------------------- |\n| `command_name`                                | `\"read_unique_identifier\"` |\n| `command`                                     | `0`                        |\n| `device_id`                                   | `<bytes>`                  |\n| `hardware_revision_level`                     | `<int>`                    |\n| `manufacturer_device_type`                    | `<bytes>`                  |\n| `manufacturer_id`                             | `<int>`                    |\n| `number_response_preamble_charachters`        | `<int>`                    |\n| `software_revision_level`                     | `<int>`                    |\n| `transmitter_specific_command_revision_level` | `<int>`                    |\n| `universal_command_revision_level`            | `<int>`                    |\n\nResponse 1\n| key                | value                     |\n| ------------------ | ------------------------- |\n| `command_name`     | `\"read_primary_variable\"` |\n| `command`          | `1`                       |\n| `primary_variable` | `<float>`                 |\n\nResponse 11\n| key                                           | value                      |\n| --------------------------------------------- | -------------------------- |\n| `command_name`                                | `\"read_unique_identifier\"` |\n| `command`                                     | `11`                       |\n| `device_id`                                   | `<bytes>`                  |\n| `hardware_revision_level`                     | `<int>`                    |\n| `manufacturer_device_type`                    | `<bytes>`                  |\n| `manufacturer_id`                             | `<int>`                    |\n| `number_response_preamble_charachters`        | `<int>`                    |\n| `software_revision_level`                     | `<int>`                    |\n| `transmitter_specific_command_revision_level` | `<int>`                    |\n| `universal_command_revision_level`            | `<int>`                    |\n\nMany other universal and common responses are also parsed..., give it a try!\n\n## Integration Example\n\n```python\n>>> import hart_protocol\n>>> import serial\n>>>\n>>> port = serial.Serial(\"/dev/ttyUSB0\", 19200, timeout=0.1)\n>>> port.parity = \"O\"\n>>> port.stopbits = 1\n>>> tag = hart_protocol.tools.pack_ascii(\"06C22300517\"[-8:])\n>>> port.write(hart_protocol.universal.read_unique_identifier_associated_with_tag(tag))\n>>>\n>>> unpacker = hart_protocol.Unpacker(port)\n>>> for msg in unpacker:\n...     print(msg)\n...\n>>>\n```\n\n## Maintainers\n\n- [Blaise Thompson](https://github.com/untzag)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yaq-project/hart-protocol",
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "hart-protocol",
    "package_url": "https://pypi.org/project/hart-protocol/",
    "platform": null,
    "project_url": "https://pypi.org/project/hart-protocol/",
    "project_urls": {
      "Homepage": "https://github.com/yaq-project/hart-protocol",
      "Issues": "https://github.com/yaq-project/hart-protocol/issues",
      "Source": "https://github.com/yaq-project/hart-protocol"
    },
    "release_url": "https://pypi.org/project/hart-protocol/2023.3.0/",
    "requires_dist": [
      "black ; extra == \"dev\"",
      "pre-commit ; extra == \"dev\""
    ],
    "requires_python": ">=3.7",
    "summary": "A sans-io python implementation of the Highway Addressable Remote Transducer Protocol.",
    "version": "2023.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17243546,
  "releases": {
    "2022.8.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "8eb1f4875d4232b8da06bc91b4fbf26009d4f84f24598b33e9039030d8d455f5",
          "md5": "f7e2fa94e4d065c7e3c2827a9106a6f4",
          "sha256": "7bba56b8a1cc1534edcef84e84108fbbc1748f15bb2fb7c20f58286906d8c030"
        },
        "downloads": -1,
        "filename": "hart_protocol-2022.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7e2fa94e4d065c7e3c2827a9106a6f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10865,
        "upload_time": "2022-08-09T15:20:39",
        "upload_time_iso_8601": "2022-08-09T15:20:39.393405Z",
        "url": "https://files.pythonhosted.org/packages/8e/b1/f4875d4232b8da06bc91b4fbf26009d4f84f24598b33e9039030d8d455f5/hart_protocol-2022.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "21690475bb8528413546a5caf2a69fc47098c6c386d4635ff2c088a8399a7ee4",
          "md5": "a254089a0d97757661277477f56f2fd4",
          "sha256": "c22244f03a3e6bceb771194c3391dbba55ac33bd496be6b295d5bedf5c190d1a"
        },
        "downloads": -1,
        "filename": "hart-protocol-2022.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a254089a0d97757661277477f56f2fd4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12096,
        "upload_time": "2022-08-09T15:20:43",
        "upload_time_iso_8601": "2022-08-09T15:20:43.941572Z",
        "url": "https://files.pythonhosted.org/packages/21/69/0475bb8528413546a5caf2a69fc47098c6c386d4635ff2c088a8399a7ee4/hart-protocol-2022.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.8.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c68e8e3f9b48433b2014b46e5f8e98452b0be8979c49edc0b1d42480e6399b44",
          "md5": "7ca255fcb765f5491553a950e639b013",
          "sha256": "f4ea068e298c5bd551533f7fa963283faf768af56ad50b18b7563a4c3d641fbd"
        },
        "downloads": -1,
        "filename": "hart_protocol-2022.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ca255fcb765f5491553a950e639b013",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10915,
        "upload_time": "2022-08-29T16:18:19",
        "upload_time_iso_8601": "2022-08-29T16:18:19.935707Z",
        "url": "https://files.pythonhosted.org/packages/c6/8e/8e3f9b48433b2014b46e5f8e98452b0be8979c49edc0b1d42480e6399b44/hart_protocol-2022.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b89272abe807ae6fbb17d70be5b6258a0386f81113656580184e548fe0229c0e",
          "md5": "ce34be7c0c2e657ea9af80c26b654204",
          "sha256": "a7ff3b0e519a7b08be6f6cc3570555f87988108402ece0f539ec629b84f9132e"
        },
        "downloads": -1,
        "filename": "hart-protocol-2022.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce34be7c0c2e657ea9af80c26b654204",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12011,
        "upload_time": "2022-08-29T16:18:21",
        "upload_time_iso_8601": "2022-08-29T16:18:21.504416Z",
        "url": "https://files.pythonhosted.org/packages/b8/92/72abe807ae6fbb17d70be5b6258a0386f81113656580184e548fe0229c0e/hart-protocol-2022.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.8.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c5856b4b40826e8bdb6dd3ad32bb122c2a47738c7a5327716eb79896673ce6b6",
          "md5": "075aabd8bc5358394b7e54ae817ef382",
          "sha256": "7300b00ce101b8cd9382fff4848572d5c4856d2ddc87c59cf2f4007c72193721"
        },
        "downloads": -1,
        "filename": "hart_protocol-2022.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "075aabd8bc5358394b7e54ae817ef382",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10815,
        "upload_time": "2022-08-30T16:49:11",
        "upload_time_iso_8601": "2022-08-30T16:49:11.848791Z",
        "url": "https://files.pythonhosted.org/packages/c5/85/6b4b40826e8bdb6dd3ad32bb122c2a47738c7a5327716eb79896673ce6b6/hart_protocol-2022.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "1c3836591accb62efc39d06f52ec9a327cc2e9c8ae955cd7024b9796e8962677",
          "md5": "1fb00a55b80f6a99151f66a420aa6878",
          "sha256": "5032617861f6a49397919b4dd6b9f0d0ef3a5ffb43ca752c0e2277eefd592759"
        },
        "downloads": -1,
        "filename": "hart-protocol-2022.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1fb00a55b80f6a99151f66a420aa6878",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11958,
        "upload_time": "2022-08-30T16:49:13",
        "upload_time_iso_8601": "2022-08-30T16:49:13.806817Z",
        "url": "https://files.pythonhosted.org/packages/1c/38/36591accb62efc39d06f52ec9a327cc2e9c8ae955cd7024b9796e8962677/hart-protocol-2022.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.3.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "0ae157e3fe9446a6c23fa81280b3ea74deabd40848e205d46ed8ce235da8d66e",
          "md5": "a19f9adf2cc2984a54d3963e8daf2f4b",
          "sha256": "3cd25b05446ee920544b900d51e512d5ac5d51b601eb77222ade3fba2d8717d2"
        },
        "downloads": -1,
        "filename": "hart_protocol-2023.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a19f9adf2cc2984a54d3963e8daf2f4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10889,
        "upload_time": "2023-03-10T18:31:19",
        "upload_time_iso_8601": "2023-03-10T18:31:19.589424Z",
        "url": "https://files.pythonhosted.org/packages/0a/e1/57e3fe9446a6c23fa81280b3ea74deabd40848e205d46ed8ce235da8d66e/hart_protocol-2023.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "21d02cc814f583aca108920e2f388dc0d7e59cddd983b0798ca37af21ad7e376",
          "md5": "0ab62d173b6d3633772b8c53ed7fc8e4",
          "sha256": "6038135ada16966df3179b187e17648f7195a7f13f016a59e012187a3da3debd"
        },
        "downloads": -1,
        "filename": "hart-protocol-2023.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ab62d173b6d3633772b8c53ed7fc8e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12156,
        "upload_time": "2023-03-10T18:31:21",
        "upload_time_iso_8601": "2023-03-10T18:31:21.319613Z",
        "url": "https://files.pythonhosted.org/packages/21/d0/2cc814f583aca108920e2f388dc0d7e59cddd983b0798ca37af21ad7e376/hart-protocol-2023.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "0ae157e3fe9446a6c23fa81280b3ea74deabd40848e205d46ed8ce235da8d66e",
        "md5": "a19f9adf2cc2984a54d3963e8daf2f4b",
        "sha256": "3cd25b05446ee920544b900d51e512d5ac5d51b601eb77222ade3fba2d8717d2"
      },
      "downloads": -1,
      "filename": "hart_protocol-2023.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a19f9adf2cc2984a54d3963e8daf2f4b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 10889,
      "upload_time": "2023-03-10T18:31:19",
      "upload_time_iso_8601": "2023-03-10T18:31:19.589424Z",
      "url": "https://files.pythonhosted.org/packages/0a/e1/57e3fe9446a6c23fa81280b3ea74deabd40848e205d46ed8ce235da8d66e/hart_protocol-2023.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "21d02cc814f583aca108920e2f388dc0d7e59cddd983b0798ca37af21ad7e376",
        "md5": "0ab62d173b6d3633772b8c53ed7fc8e4",
        "sha256": "6038135ada16966df3179b187e17648f7195a7f13f016a59e012187a3da3debd"
      },
      "downloads": -1,
      "filename": "hart-protocol-2023.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0ab62d173b6d3633772b8c53ed7fc8e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12156,
      "upload_time": "2023-03-10T18:31:21",
      "upload_time_iso_8601": "2023-03-10T18:31:21.319613Z",
      "url": "https://files.pythonhosted.org/packages/21/d0/2cc814f583aca108920e2f388dc0d7e59cddd983b0798ca37af21ad7e376/hart-protocol-2023.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}