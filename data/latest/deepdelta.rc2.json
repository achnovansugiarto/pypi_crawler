{
  "info": {
    "author": "William JIANG",
    "author_email": "williamjiang0218@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DeepDelta\n\n## Overview\n\nDeepDelta is a compact Python library to compare any two objects with a rich set of configurable options and comparators with any desirable output format.\n\n\n## Installation\n\nInstall from PyPi:\n\n`>pip install deepdelta`\n\n\n## How to use\n\nThe main function to be called is ![DeepDelta.compare()|](https://github.com/Cruisoring/DeepDelta/blob/master/deepdelta/core.py):\n```\ndef compare(lhs: Any, rhs: Any,\n             options: DeltaConfig = None,\n             type_comparators: Dict[Union[Tuple[Type, Type], Type], Callable[[Any, Any], bool]] = None,\n             named_comparators: Dict[str, Callable[[Any, Any], bool]] = None,\n             *excluded_keys: List[Union[str, Pattern]]) -> Union[None, Tuple, Dict, str]\n```\n\nThere are 4 optional parameters in addition to the 2 data to be compared:\n1. **options** of type [DeltaConfig](https://github.com/Cruisoring/DeepDelta/blob/master/deepdelta/delta_config.py): Flag/Enum based settings to specify how comparison to be performed.\n2. **type_comparators** of type *Dict[Union[Tuple[Type, Type], Type], Callable[[Any, Any], bool]]*: specifies how values of different types shall be compared.\n3. **named_comparators** of type *Dict[str, Callable[[Any, Any], bool]]*: defines how values with specific names would be compared with customised comparator.\n4. **excluded_keys** of type *List[Union[str, Pattern]]*: keys to be excluded from comparison if their path matched by either str or Pattern.\n\nThe output of comparing two values would be None/Tuple/Dict/str as specified by the flags of `0b11111 << 7`: None means no reportable difference found if presented.\n\n### Set comparison preferences\n\nThe optional [DeltaConfig](https://github.com/Cruisoring/DeepDelta/blob/master/deepdelta/delta_config.py) defines how DeepDelta would behave with options of:\n- Case sensitivity of keys and/or values\n- If spaces of keys and/or values shall be trimmed\n- Should keys ended/started with 'id' shall be treated as unique key to convert sequences to dicts\n- If default values (0, '', False, [] and ect.) can be treated as equal to None\n- If missing keys can be treated as whose values to be Nones\n- Output rules with pre-defined means to show the comparison result, the None/tuples is used by default\n\nIf it is not specified, then the DEFAULT_DELTA_CONFIG defined in [core.py](https://github.com/Cruisoring/DeepDelta/blob/master/deepdelta/core.py) as:\n```\nDEFAULT_DELTA_CONFIG: DeltaConfig = DeltaConfig.CaseIgnored\\\n                                    | DeltaConfig.SpaceTrimmed\\\n                                    | DeltaConfig.IdAsKey \\\n                                    | DeltaConfig.MissingAsNone \\\n                                    | DeltaConfig.OutputDefault\n```\nThus the DeepDelta would compare two values by:\n1) Ignore cases of key and value\n2) Trim spaces of keys before comparison\n3) Try to use the IDs as keys to convert list to dict\n4) Missing of a key is treated as if its value is defined as None\n5) Output in default format: Deltas as tuples of (left_value, right_value) if values are different, otherwise None    \n\nThere are many examples of how it works in [test_deep_delta.py](https://github.com/Cruisoring/DeepDelta/blob/master/tests/test_deep_delta.py).\n\n### Compare values of different types\n\nWhen comparing Python objects with their deserialized formats like JSON files, instead of convert the picked values back to their original types, like *str* back to *datetime*/*float*/*bool*, making *str* comparable with these Python build-in types would save us quite some boiler-plate codes.\n\nThis is enabled with the optional **type_comparators** argument to initialize the **DeepDelta** with values of function/lambda to compare the two values.\n\nYou can define any type based comparator in two ways:\n1) The tuple of two types of the value to compare as the key. Like *(int, datetime)* as the key, then the associated function/lambda would be used to compare a *int* with a *datetime*, or a *datetime* with an *int*.\n2) The type of one value to be compared as the key. Hopefully you don't need it when there could be potential conflictions with other entries.\n\nThe [comparator.py](https://github.com/Cruisoring/DeepDelta/blob/master/deepdelta/comparator.py) has defined a common set of methods like:\n- compare two values of *float*/*int*/*Decimal*/*str* types as two float point numbers with optional digits to compare.\n- treat dedicated values (*{True, 'True', 'Yes', 'Y', 'Positive', 1, 'TRUE', 'yes'}*  as boolean **True** by default) as **True** and **False** that could be appended/modified with the static variables **TRUE_VALUES** and **FALSE_VALUES** of the [comparator.py](https://github.com/Cruisoring/DeepDelta/blob/master/deepdelta/comparator.py).\n- compare str with *datetime* by convert it to *datetime* by trying a set of formats of **DATETIME_FORMATS** in the [comparator.py](https://github.com/Cruisoring/DeepDelta/blob/master/deepdelta/comparator.py) that is also modifiable.\n_ treat **None** equal to Python default values (like 0, False, [] and etc.) when **DeltaConfig.NoneUnequalDefault** is set.\n\nIf the **type_comparators** argument is not set, then the **DEFAULT_TYPE_COMPARATOR: Dict[Union[Tuple[Type, Type], Type], Callable[[Any, Any], bool]]** defined in the [comparator.py](https://github.com/Cruisoring/DeepDelta/blob/master/deepdelta/comparator.py) would be used as a blue-print to enable inter-types comparisons between common values.\n\n### Compare values of specific names\n\nThe **named_comparators** argument in above *compare()* method means to enable most specific comparisons on targeted keys/fields of the two objects under comparison.\n\nThe sample below shows how it works:\n```\ndef test_named_comparator():\n    comparators = DeepDelta(DEFAULT_DELTA_CONFIG ^ DeltaConfig.ValueCaseIgnored)\n    compare_p = lambda l, r, p: DeepDelta.convert_to_compare(l, r, comparators, lambda n, case_ignored: 'no' in n)\n    named = {\n        'Id': lambda l, r, p: None if l==r or l+r==0 else (l, r),\n        'products': compare_p,\n        'Purchased': lambda l, r, p: None if Comparator.compare_as_datetime_values(l, r) else (l, r)}\n    order1 = {'id': 100, 'purchased': '2020 Aug 6', 'products': products1}\n    order2 = {'ID': -100, 'PURCHASED': '6/Aug/2020', 'PRODUCTS': products2}\n    delta = DeepDelta.compare(order1, order2, None, None, named)\n    assert delta == {'products': {'1202': {'description': ('Subway', 'SUBWAY')},\n                                  '2009': {'description': ('Hochy', 'Hochey'),\n                                           'name': ('wipes', 'Wipes')},\n                                  '5001': {'unit': ('per', 'piece')}}}\n``` \n\nThe keys in above example ('Id', 'products', 'Purchased') would be matched case-ignored with the actual keys in the two values *order1* and *order2*. It is also possible to define more complex key patterns to match multiple fields/keys to compare with shared logic.\n\n### Exclude fields/keys\n\nThe **excluded_keys** arguments specified any keys/key_paths to be neglected during the comparison process.\n\n### Compare two lists\n\nFor normal Python class instances, the **vars()** would be called to get their variables as dicts.\n\nA key idea of comparing two lists of similar objects is that both list would be converted to dicts, then the objects sharing the same/similar keys would be compared side by side.\n\nThe other static method DeepDelta.convert_to_compare() is defined as: \n```\n    def convert_to_compare(lhs: Sequence, rhs: Sequence,\n                           comparator: DeepDelta = None,\n                           is_key: Callable = None,\n                           *keys: List[Any]) -> Union[None, Tuple, Dict, str]:\n```\n\nThe above **comparator** allows you to specify all configurable settings as compare any generic values. The *keys* can be used to denote keys of both *lhs* and *rhs* directly. Alternatively, the predicate *is_key* would detect all concerned keys or detect any keys starts or ends with 'id'.\n\nThe key part of the test shows how it works to compare two lists of *Product* instances:\n```\ndef test_convert_to_compare():\n    delta = DeepDelta.convert_to_compare(products1, products2, None, lambda name, case_ignored: 'no' in name)\n    assert delta == { '2009': {'description': ('Hochy', 'Hochey')},\n        '5001': {'unit': ('per', 'piece')}}\n\n    comparators = DeepDelta(DEFAULT_DELTA_CONFIG ^ DeltaConfig.ValueCaseIgnored)\n    delta = DeepDelta.convert_to_compare(products1, products2, comparators, lambda name, case_ignored: 'no' in name)\n    assert delta == {'1202': {'description': ('Subway', 'SUBWAY')},\n                     '2009': {'description': ('Hochy', 'Hochey'), 'name': ('wipes', 'Wipes')},\n                     '5001': {'unit': ('per', 'piece')}}\n```\n\n## Summary\n\nThe DeepDelta can be used to compare two objects by calling the static *DeelDelta.compare(lhs, rhs)* directly, with many default functions, to get a decent outcome with deltas highlighted.\n\nFor advanced comparison scenarios, the Functional Programming design makes it possible to define and enforce complex logics upon concerned types or keys directly.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Cruisoring/DeepDelta",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "deepdelta",
    "package_url": "https://pypi.org/project/deepdelta/",
    "platform": "",
    "project_url": "https://pypi.org/project/deepdelta/",
    "project_urls": {
      "Homepage": "https://github.com/Cruisoring/DeepDelta"
    },
    "release_url": "https://pypi.org/project/deepdelta/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python comparator with rich options, configurable named or typed comparators to get deep differences of any two objects.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10074088,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "078e0511138d9da8f917fd85c5126fddef09efb766bf8134945122618755bde3",
          "md5": "9c72863872e2fdb54459b7f28f7b6012",
          "sha256": "0e3cd4864b4917ccb88fe1ec790ba1caa34d4eaa86ed88df989610bcc4686042"
        },
        "downloads": -1,
        "filename": "deepdelta-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c72863872e2fdb54459b7f28f7b6012",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17184,
        "upload_time": "2020-08-10T13:36:10",
        "upload_time_iso_8601": "2020-08-10T13:36:10.982986Z",
        "url": "https://files.pythonhosted.org/packages/07/8e/0511138d9da8f917fd85c5126fddef09efb766bf8134945122618755bde3/deepdelta-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c46e9675fece68add4df24b9dc654c58041e7e1a3a7f4704494572311897ef8d",
          "md5": "977b976cb2828afd2fdeafa388d2a8b5",
          "sha256": "a5550c36033f5ccd1ea05833b3348d6b904f7d6fbee337661eb72c641c8f3e20"
        },
        "downloads": -1,
        "filename": "deepdelta-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "977b976cb2828afd2fdeafa388d2a8b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23787,
        "upload_time": "2020-08-10T13:36:13",
        "upload_time_iso_8601": "2020-08-10T13:36:13.421345Z",
        "url": "https://files.pythonhosted.org/packages/c4/6e/9675fece68add4df24b9dc654c58041e7e1a3a7f4704494572311897ef8d/deepdelta-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28d40d5d03f699d1f0227a580af00d1b7a56c7a79d4e212c0b292c3e9b3e2971",
          "md5": "8f82c3a6b3c29bd861df2cb3177c04c8",
          "sha256": "b29fea3ee0d603a001334795e2cd48cab313e021fadc2356d3311903e0c74034"
        },
        "downloads": -1,
        "filename": "deepdelta-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f82c3a6b3c29bd861df2cb3177c04c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17381,
        "upload_time": "2021-04-15T13:32:01",
        "upload_time_iso_8601": "2021-04-15T13:32:01.140122Z",
        "url": "https://files.pythonhosted.org/packages/28/d4/0d5d03f699d1f0227a580af00d1b7a56c7a79d4e212c0b292c3e9b3e2971/deepdelta-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7efdb59a6519e9b49404edffa8a31ca3d662bab4cf5d2e9f646a615224e3be74",
          "md5": "e8d65d5a1fc02b790634d5222208ebac",
          "sha256": "28d255e93808ba5993db78bd67e8efb293a8aedc83da71daedcad28ebd94d441"
        },
        "downloads": -1,
        "filename": "deepdelta-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e8d65d5a1fc02b790634d5222208ebac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24592,
        "upload_time": "2021-04-15T13:32:02",
        "upload_time_iso_8601": "2021-04-15T13:32:02.541132Z",
        "url": "https://files.pythonhosted.org/packages/7e/fd/b59a6519e9b49404edffa8a31ca3d662bab4cf5d2e9f646a615224e3be74/deepdelta-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28d40d5d03f699d1f0227a580af00d1b7a56c7a79d4e212c0b292c3e9b3e2971",
        "md5": "8f82c3a6b3c29bd861df2cb3177c04c8",
        "sha256": "b29fea3ee0d603a001334795e2cd48cab313e021fadc2356d3311903e0c74034"
      },
      "downloads": -1,
      "filename": "deepdelta-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8f82c3a6b3c29bd861df2cb3177c04c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17381,
      "upload_time": "2021-04-15T13:32:01",
      "upload_time_iso_8601": "2021-04-15T13:32:01.140122Z",
      "url": "https://files.pythonhosted.org/packages/28/d4/0d5d03f699d1f0227a580af00d1b7a56c7a79d4e212c0b292c3e9b3e2971/deepdelta-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7efdb59a6519e9b49404edffa8a31ca3d662bab4cf5d2e9f646a615224e3be74",
        "md5": "e8d65d5a1fc02b790634d5222208ebac",
        "sha256": "28d255e93808ba5993db78bd67e8efb293a8aedc83da71daedcad28ebd94d441"
      },
      "downloads": -1,
      "filename": "deepdelta-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e8d65d5a1fc02b790634d5222208ebac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24592,
      "upload_time": "2021-04-15T13:32:02",
      "upload_time_iso_8601": "2021-04-15T13:32:02.541132Z",
      "url": "https://files.pythonhosted.org/packages/7e/fd/b59a6519e9b49404edffa8a31ca3d662bab4cf5d2e9f646a615224e3be74/deepdelta-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}