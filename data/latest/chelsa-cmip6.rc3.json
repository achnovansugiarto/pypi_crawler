{
  "info": {
    "author": "Dirk Nikolaus Karger",
    "author_email": "dirk.karger@wsl.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "chelsa_cmip6\n-----------\nThis package contains functions to creates monthly high-resolution \nclimatologies for min-, max-, and mean temperature, precipitation rate \nand bioclimatic variables from anomalies and using CHELSA V2.1 as \nbaseline high resolution climatology. Only works for GCMs for\nhich tas, tasmax, tasmin, and pr are available. It is part of the\nCHELSA Project: (CHELSA, <https://www.chelsa-climate.org/>).\n\n\n# INSTALLATION\n------------\nchelsa-cmip6 can be installed on your machine in different ways. It is compatible with Windows, MacOS, and Linux systems.\n## On Linux\n\nLinux usually come already with a version of python preinstalled. \n#### From Github\nIf you want the latest version its best if you install it directly from github:\nExample for Ubuntu 20.04\nif you have not installed Git on your linux machine yet, the apt package management tool is the easiest way to install Git.\n\n1. To update the packages, launch a terminal window, and enter:\n```bash\nsudo apt-get update\n```\n\n2. To install from the default repositories, enter the following:\n```bash\nsudo apt-get install git\n```\n\n3. you can now install the latest version from github by typing the following command in the terminal:\n```bash\npython -m pip install git+https://gitlabext.wsl.ch/karger/chelsa_cmip6.git\n```\n\n#### From PyPI:\nIf you want the latest release version, you can also install it from PyPI using:\n\nusing pip:\n```bash\npython -m pip install chelsa-cmip6\n```\n## On Windows\n#### Install python:\n1. Check if python is already installed on your machine. To do so open the command line interface by:\nPress: Win + R\n\n2. This will open a run window:\nType: cmd.exe and press enter\nThis should open the command line interface of Windows\n\n3. In the command line interface type:\n```bash\npython\n```\nIf python is already installed, you will automatically enter the command line interpreter of python. If\nPython is not already installed, a Microsoft Store window will open asking you to install Python. Click 'Get'\nand install Python. Make sure your version is at least 3.8.\n\n4. Verify your installation by typing the following in the command line interface:\n```bash\npython --version\n```\n\n#### Install the chelsa-cmip6 package:\n##### Using pip\nIf you want the latest release version, you can also install it from PyPI using:\n\n```bash\npython -m pip install chelsa-cmip6\n```\n\n##### Using Git\nIf you want the latest version, you can also install it from Github. If you dont have Git\ninstalled on your machine, you can find the installers here: \nhttps://git-scm.com/download/win\n\nFollow the steps in the installer and after completion open a new command line interface in windows and type:\n```bash\npython -m pip install git+https://gitlabext.wsl.ch/karger/chelsa_cmip6.git\n```\n\n##### GDAL and rasterio\nchelsa-cmip6 depends on rasterio, which in turn depends on GDAL. Sometimes these two modules can create problems with the \ninstallation routine. If the installation hangs while installing the rasterio module, you can try installing both modules manually\nbefore installing chelsa-cmip6.\n\nGDAL can be quite complex to build and install, particularly on Windows and MacOS\nIf you run into problems follow the steps provided for your respective system here:\n\nYou can get information how to install GDAL on your system here: https://pypi.org/project/GDAL/\n\nAfter the manual installation of GDAL you can install rasterio by:\n```bash\npython -m pip install rasterio\n```\n\n# HOW TO USE\n----------\nThe chelsa_cmip6 module provides functions to create monthly climatologies from climate\nsimulation data from CMIP6 using climate observation data from CHELSA V.2.1\nat a 0.0083333° grid resolution for a given area of choice.\n\nThe GetClim module contains classes and functions to connect to CMIP6 data\nvia the Google cloud storage and to read the data into xarrays. It also creates\nmonthly climatologies using the delta change anomally correction method for a given \ntime period. \n\nThe BioClim module contains classes calculating various bioclimatic parameters\nfrom climatological data (see: https://chelsa-climate.org/bioclim).\n\nThe delta change method that is applied is relatively insensitive towards individual model \nbias of a GCM, as it only uses the difference (ratio) for a given variable between\na reference period and a future period. In case of temperature an additive delta change \nis applied. In case of precipitation a multiplicative delta change is applied by \nadding a constant of 0.0000001 kg m^-2 s^⁻1 to both the reference and the future data\nto avoid division by zero. \n\nThe code only runs for CMIP6 models for which all needed variables tas, tasmax, tasmin, pr,\nare available for both the reference and the future period.\n\nThe standard reference period is 1981-01-01 - 2010-12-31. If another reference period is \nchosen, the code conducts a delta change for this period as well. Best practice would be to \nchoose the standard reference period.\n\n\nEXAMPLE: \n------------\nYou can use the package in two ways 1. by importing the module in python, and 2. by using\nthe run_chelsa_cmip6.py wrapper function in the terminal (Linux, MAC) or command prompt (Windows).\n\nTo create future climate data within python, first import the main function by:\n\n## Using python\n------------\n```python\nfrom chelsa_cmip6.GetClim import chelsa_cmip6\n```\n\nYou can then set the parameters of the chelsa_cmip6 function to create the climate data for the CMIP6 model you want.\nIf we want to create climatologies and bioclimatic variables for the model MPI-ESM1-2-LR and ssp585 for the years\n2041-2070 for the region between 5.3° - 10.4° longitude, and 46.0° - 47.5° latitude and save them in your home \ndirectory (~/, on a linux system), we need to set the parameters of the function as follows: \n```python\nchelsa_cmip6(activity_id='ScenarioMIP', \n             table_id='Amon', \n             experiment_id='ssp585', \n             institution_id='MPI-M', \n             source_id='MPI-ESM1-2-LR', \n             member_id='r1i1p1f1', \n             refps='1981-01-15', \n             refpe='2010-12-15', \n             fefps='2041-01-15', \n             fefpe='2070-12-15', \n             xmin=5.3, \n             xmax=10.4,\n             ymin=46.0, \n             ymax=47.5,\n             output='~/') \n```\n#### on Windows:\nIf you are on a windows system the 'output' parameter should be in the form windows requires it, e.g.\n\n```python\noutput='C:/Users/your_user_name/' # the directory you want the output to be saved in \n```\n\n## Use chelsa_cmip6 without using python directly\n------------\nYou can also use the function directly from the terminal if you like. The chelsa_cmip6 package comes with a wrapper function,\nrun_chelsa_cmip6.py that allows you to simply use it via the terminal without any python knowledge required. It means however that you have to add directory where the wrapper function run_chelsa_cmip6.py is located to your PATH variable, so that your system knows where to look for it. \n\n#### on Linux\n1. Find the directory in which chelsa_cmip6 is located by typing the following in the terminal:\n```bash\npython -c \"import chelsa_cmip6; print(chelsa_cmip6.__file__);\"\n```\nThe printed path without the '\\__init__.py' at the end is the path you will need to add to your PATH variable.\n\n2. You can now add it to your PATH variable by using:\n```bash\nexport PATH=\"your_path:$PATH\"\n```\n\n3. Restart your terminal. You should now be able to use chelsa_cmip6 by running e.g. the following in the terminal:\n```bash \nrun_chelsa_cmip6.py --activity_id \"ScenarioMIP\" --table_id \"Amon\" --experiment_id \"ssp585\" --institution_id \"MPI-M\" --source_id \"MPI-ESM1-2-LR\" --member_id \"r1i1p1f1\" --refps \"1981-01-15\" --refpe \"2010-12-15\" --fefps \"2041-01-15\" --fefpe \"2070-12-15\" --xmin 5.3 --xmax 10.4 --ymin 46.0 --ymax 47.5 --output \"~/\"\n```\n\n#### on Windows\nOn Windows you need to first find out where the python package is installed. You can do so by typing the following in the command line interface:\n\n```bash\npython -c \"import chelsa_cmip6; print(chelsa_cmip6.__file__);\"\n```\n\nThe printed path without the '\\__init__.py' at the end is the path you will need to add to your path variable. On my machine it \nlooks like this:\n\n```bash \nC:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\chelsa_cmip6\\__init__.py\n```\n\nYou need to add this path to your PATH environment variable. To do so you need to open a command prompt as Administrator. To do so, you need to:\n1. Press: Win + R\n2. Type: cmd.exe\n3. Use Ctrl + Shift + Click/Tap on the OK button\n\n4. Type the following in the command prompt, replacing C:\\your\\path\\here with the your local path\n```bash \nsetx /M path \"%path%;C:\\your\\path\\here\"\n```\n5. Close the command prompt and open a new one. You now should be able to run the the function now by e.g. typing:\n```bash \nrun_chelsa_cmip6.py --activity_id \"ScenarioMIP\" --table_id \"Amon\" --experiment_id \"ssp585\" --institution_id \"MPI-M\" --source_id \"MPI-ESM1-2-LR\" --member_id \"r1i1p1f1\" --refps \"1981-01-15\" --refpe \"2010-12-15\" --fefps \"2041-01-15\" --fefpe \"2070-12-15\" --xmin 5.3 --xmax 10.4 --ymin 46.0 --ymax 47.5 --output \"C:/Users/<your_user_name>/\"\n```\n\n```bash\nrun_chelsa_cmip6.py --activity_id \"ScenarioMIP\" --table_id \"Amon\" --experiment_id \"ssp585\" --institution_id \"MPI-M\" --source_id \"MPI-ESM1-2-LR\" --member_id \"r1i1p1f1\" --refps \"1981-01-15\" --refpe \"2010-12-15\" --fefps \"2041-01-15\" --fefpe \"2070-12-15\" --xmin 5.3 --xmax 10.4 --ymin 46.0 --ymax 47.5 --output \"~/\"\n```\n\nimportant is that the combination of activity_id 'ScenarioMIP' and e.g. experiment_id 'ssp585' is set to a combination that exists.\nYou can also get historical data but in that case, activity_ID, experiment_id, and fefps and fefps need to be changed. E.g. \n\n```bash\nrun_chelsa_cmip6.py --activity_id \"CMIP\" --table_id \"Amon\" --experiment_id \"historical\" --institution_id \"MPI-M\" --source_id \"MPI-ESM1-2-LR\" --member_id \"r1i1p1f1\" --refps \"1981-01-15\" --refpe \"2010-12-15\" --fefps \"1851-01-15\" --fefpe \"1880-12-15\" --xmin 5.3 --xmax 10.4 --ymin 46.0 --ymax 47.5 --output '~/'\n```\n\nit is also important that your fefps and fefpe are covered by the experiment_id and activity_id.\n\nThese reference periods are possible for example:\n\n'ScenarioMIP' - 2016-01-01 - 2100-12-31\n\n'CMIP' - 1850-01-01 - 2015-12-31\n\nrefps and refpe need to be in the range 1850-01-01 - 2015-12-31.\n\n## chelsa_cmip6 in R via the reticulate package\n------------\nYou can also use the chelsa_cmip6 package in R if you want to itegrate it into your R workflow. To do so open an R console or R Studio and follow the steps below. Important: You still need to have python and the chelsa_cmip6 package installed (see instructions above).\n\nInstall and load the reticulate package\n```R\ninstall.packages(\"reticulate\",dependencies = TRUE)\nlibrary(reticulate)\n```\n\nThe import() function enables you to import the chelsa_cmip6 module and call it’s functions directly from R.\n```R\nchelsa_cmip6 <- import('chelsa_cmip6')\n```\n\nYou can then use the chelsa_cmip6 function in R the same you would in python.\n```R\n\n```\n\n\n# REQUIREMENTS\n------------\nchelsa_cmip6 is written in Python 3. It has been tested to run well with the\nfollowing Python release and package versions. The dependencies will be installed automatically.\n- python 3.8.10\n- xarray 0.16.2\n- requests 2.25.1\n- numpy 1.19.5\n- rasterio 1.2.1\n- pandas 1.1.5\n- zarr 2.6.1\n- gcsfs 0.7.2\n- datetime 3.9.2\n- scipy 0.19.1\n\n\n## SINGULARITY\n------------\nAll dependencies are also resolved in the singularity container '/singularity/chelsa_cmip6.sif'. Singularity needs to be installed on the respective linux system you are using. \nAn installation guide can be found here: https://sylabs.io/guides/3.3/user-guide/quick_start.html#quick-installation-steps\n\nIf you use chelsa_cmip6 together with singularity the command should be slightly modified:\n\n```bash\nsingularity exec /singularity/chelsa_cmip6.sif python3 chelsa_cmip6.py --activity_id 'CMIP' --table_id 'Amon' --experiment_id 'historical' --institution_id 'MPI-M' --source_id 'MPI-ESM1-2-LR' --member_id 'r1i1p1f1' --refps '1981-01-15' --refpe '2010-12-15' --fefps '1851-01-15' --fefpe '1880-12-15' --xmin 5.3 --xmax 10.4 --ymin 46.0 --ymax 47.5 --output '/home/karger/scratch/'\n```\n\ntested with singularity version 3.3.0-809.g78ec427cc\nbut newer versions usually work as well.\n\n\n## CHECKING IF ALL NEEDED INPUT IS AVAILABLE\n------------\nNot all models and activities provide all the necessary input needed for chelsa_cmip6.py.\nchelsa_cmip6.py will only work for GCMs that are both available for the historical period\nand the respective scenario of interest. You can check this by using the CMIP6 data search\ninterface on e.g. https://esgf-node.llnl.gov/search/cmip6/ \nThere you can filter for the different parameters (e.g. experiment_id) and see if a dataset\nexists. E.g. by using the parameters given in the example. To check if also the historical\ndata exists for the model, just change the activity_id to 'CMIP' and the experiment_id to 'historical'.\nMake sure the four variables needed do exist both for the scenario and the historical period:\n\nThese variables are needed:\n- pr\n- tas\n- tasmax\n- tasmin\n\n\n## OUTPUT\n------------\nThe output consist of netCDF4 files. There will be different files for each variable and seperatly for\nthe reference (refps - refpe) and the future period (fefps - fefpe). \nAdditionally, there will be netCDF4 files for the \ndifferent bioclimatic variables each for both the reference (refps - refpe) and the future period (fefps - fefpe). \n\n\n# COPYRIGHT\n---------\n(C) 2022 Dirk Nikolaus Karger\n\n\n# LICENSE\n-------\nchelsa_cmip6 is free software: you can redistribute it and/or modify it under\nthe terms of the GNU Affero General Public License as published by the\nFree Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nchelsa_cmip6 is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with chelsa_cmip6. If not, see <http://www.gnu.org/licenses/>.\n\n\n## CITATION:\n------------\nIf you need a citation for the output, please refer to the article describing the high\nresolution climatologies:\n\nKarger, D.N., Conrad, O., Böhner, J., Kawohl, T., Kreft, H., Soria-Auza, R.W., Zimmermann, N.E., Linder, P., Kessler, M. (2017). Climatologies at high resolution for the Earth land surface areas. Scientific Data. 4 170122. https://doi.org/10.1038/sdata.2017.122\n\n\n## CONTACT\n-------\n<dirk.karger@wsl.ch>\n\n\n## AUTHOR\n------\nDirk Nikolaus Karger\nSwiss Federal Research Institute WSL\nZürcherstrasse 111\n8903 Birmensdorf \nSwitzerland\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://gitlabext.wsl.ch/karger/chelsa_cmip6/-/archive/v1.0/chelsa_cmip6-v1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlabext.wsl.ch/karger/chelsa_cmip6.git",
    "keywords": "CMIP6,climate,delta-change,CHELSA,bioclimate,growing degree days,gdd,bio",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chelsa-cmip6",
    "package_url": "https://pypi.org/project/chelsa-cmip6/",
    "platform": null,
    "project_url": "https://pypi.org/project/chelsa-cmip6/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pypa/chelsa_cmip6/issues",
      "Download": "https://gitlabext.wsl.ch/karger/chelsa_cmip6/-/archive/v1.0/chelsa_cmip6-v1.0.tar.gz",
      "Homepage": "https://gitlabext.wsl.ch/karger/chelsa_cmip6.git"
    },
    "release_url": "https://pypi.org/project/chelsa-cmip6/1.1/",
    "requires_dist": [
      "numpy",
      "xarray",
      "rasterio",
      "pandas",
      "zarr",
      "gcsfs",
      "scipy"
    ],
    "requires_python": ">=3.6",
    "summary": "This package contains function to create monthly high-resolution climatologies for a selected geographic area for min-, max-, and mean temperature, precipitation rate and bioclimatic variables from anomalies and using CHELSA V2.1 as baseline high resolution climatology. Only works for GCMs for which tas, tasmax, tasmin, and pr are available.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15594212,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16a5a7686568ecd97b4bab4bc48d5b314a58194c29755aab46aca9ebc45dfac4",
          "md5": "20501a58e7f967617590d99355fdea64",
          "sha256": "ba53cc09b42917e75da588e2044e6436daa6b848eab595b77e9a31db00e4d5c5"
        },
        "downloads": -1,
        "filename": "chelsa_cmip6-1.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "20501a58e7f967617590d99355fdea64",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": ">=3.6",
        "size": 25318,
        "upload_time": "2022-10-31T09:37:57",
        "upload_time_iso_8601": "2022-10-31T09:37:57.632596Z",
        "url": "https://files.pythonhosted.org/packages/16/a5/a7686568ecd97b4bab4bc48d5b314a58194c29755aab46aca9ebc45dfac4/chelsa_cmip6-1.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7925eb76c54a79cecd7761bc4aeedc79d57e402610d7383dc8848ed51d1dc695",
          "md5": "0b2bd7e3d255b0645687571003892d41",
          "sha256": "7673520e0a05be20a0c144902067401c59efdbb22dee00bace68e8d0021ae5e7"
        },
        "downloads": -1,
        "filename": "chelsa_cmip6-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b2bd7e3d255b0645687571003892d41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23896,
        "upload_time": "2022-07-26T15:45:12",
        "upload_time_iso_8601": "2022-07-26T15:45:12.120659Z",
        "url": "https://files.pythonhosted.org/packages/79/25/eb76c54a79cecd7761bc4aeedc79d57e402610d7383dc8848ed51d1dc695/chelsa_cmip6-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a934ed509e4298e22efed865dde387d22b64fc136ece061fee1443b38e88d462",
          "md5": "f069cb256f214207281b2013fd3daeaf",
          "sha256": "91f968defb4ab9d6a599304d5966a67e9a13c14ca9e16c84939541d7f093e891"
        },
        "downloads": -1,
        "filename": "chelsa_cmip6-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f069cb256f214207281b2013fd3daeaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25282,
        "upload_time": "2022-07-26T15:45:13",
        "upload_time_iso_8601": "2022-07-26T15:45:13.550626Z",
        "url": "https://files.pythonhosted.org/packages/a9/34/ed509e4298e22efed865dde387d22b64fc136ece061fee1443b38e88d462/chelsa_cmip6-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "802a0569a4ec2c74d6b78ff87601e5276fa9d997abdd077c6acb3c62e3246963",
          "md5": "a34df23cb87a4f5c403f03475c1d4f51",
          "sha256": "e3830cc1d77be604107911deb3df2c2594937a44d04803c30095488e9d42b669"
        },
        "downloads": -1,
        "filename": "chelsa_cmip6-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a34df23cb87a4f5c403f03475c1d4f51",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27778,
        "upload_time": "2022-10-31T09:37:56",
        "upload_time_iso_8601": "2022-10-31T09:37:56.398591Z",
        "url": "https://files.pythonhosted.org/packages/80/2a/0569a4ec2c74d6b78ff87601e5276fa9d997abdd077c6acb3c62e3246963/chelsa_cmip6-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bc6a15dca602dfda8ddbf28326637ad096b5dac1c2140199c63bc5d1a836d68",
          "md5": "e17ccb37802d58b63f3edc37f1ed6e0d",
          "sha256": "50d187e982ea5b57b9a6367c7f23b82f64921850e20e7c03007daec01954f5ba"
        },
        "downloads": -1,
        "filename": "chelsa_cmip6-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e17ccb37802d58b63f3edc37f1ed6e0d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27754,
        "upload_time": "2022-10-31T09:42:13",
        "upload_time_iso_8601": "2022-10-31T09:42:13.423738Z",
        "url": "https://files.pythonhosted.org/packages/7b/c6/a15dca602dfda8ddbf28326637ad096b5dac1c2140199c63bc5d1a836d68/chelsa_cmip6-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40eca401319d9dd27b9ea121274febfd2126af74dfa286737aa069a085a23927",
          "md5": "cfcb93db17d0cb498d9cf58ffe859092",
          "sha256": "b27f2ea130fba77126ce861401f51ac6d17839e6e3282fe0db5849cb3fb0c73b"
        },
        "downloads": -1,
        "filename": "chelsa_cmip6-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cfcb93db17d0cb498d9cf58ffe859092",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30663,
        "upload_time": "2022-10-31T09:42:14",
        "upload_time_iso_8601": "2022-10-31T09:42:14.806240Z",
        "url": "https://files.pythonhosted.org/packages/40/ec/a401319d9dd27b9ea121274febfd2126af74dfa286737aa069a085a23927/chelsa_cmip6-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bc6a15dca602dfda8ddbf28326637ad096b5dac1c2140199c63bc5d1a836d68",
        "md5": "e17ccb37802d58b63f3edc37f1ed6e0d",
        "sha256": "50d187e982ea5b57b9a6367c7f23b82f64921850e20e7c03007daec01954f5ba"
      },
      "downloads": -1,
      "filename": "chelsa_cmip6-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e17ccb37802d58b63f3edc37f1ed6e0d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 27754,
      "upload_time": "2022-10-31T09:42:13",
      "upload_time_iso_8601": "2022-10-31T09:42:13.423738Z",
      "url": "https://files.pythonhosted.org/packages/7b/c6/a15dca602dfda8ddbf28326637ad096b5dac1c2140199c63bc5d1a836d68/chelsa_cmip6-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40eca401319d9dd27b9ea121274febfd2126af74dfa286737aa069a085a23927",
        "md5": "cfcb93db17d0cb498d9cf58ffe859092",
        "sha256": "b27f2ea130fba77126ce861401f51ac6d17839e6e3282fe0db5849cb3fb0c73b"
      },
      "downloads": -1,
      "filename": "chelsa_cmip6-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cfcb93db17d0cb498d9cf58ffe859092",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30663,
      "upload_time": "2022-10-31T09:42:14",
      "upload_time_iso_8601": "2022-10-31T09:42:14.806240Z",
      "url": "https://files.pythonhosted.org/packages/40/ec/a401319d9dd27b9ea121274febfd2126af74dfa286737aa069a085a23927/chelsa_cmip6-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}