{
  "info": {
    "author": "mrbean-bremen",
    "author_email": "hansemrbean@googlemail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Healthcare Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "# dicom-validator\n\n[![PyPI version](https://badge.fury.io/py/dicom-validator.svg)](https://pypi.org/project/dicom-validator) [![Test Suite](https://github.com/pydicom/dicom-validator/workflows/Python%20package/badge.svg)](https://github.com/pydicom/dicom-validator/actions) [![Python version](https://img.shields.io/pypi/pyversions/dicom-validator.svg)](https://pypi.org/project/dicom-validator)\n\n*dicom-validator* provides the command line tool `validate_iods` that \nchecks a DICOM file for missing or unexpected attributes. The check is done by\ncomparing the contents of the DICOM file against the modules and \nattributes required by the DICOM standard for the SOP class of the given  \ndataset.\n\nThe tool gets its input from the newest version of the DICOM standard (or a \nspecific version given as command line parameter) as provided by\n[ACR NEMA](http://medical.nema.org/) in docbook format.\n[pydicom](https://github.com/pydicom/pydicom) is used to read and parse \nthe DICOM files. \n\nAdditionally, the command line tool `dump_dcm_info` is available that displays \nthe tag values of one or several DICOM files in a readable format. It is\nprovided as a proof of concept of getting information directly from the\nDICOM standard.\n\n*Disclaimer:*  \nNo guarantees are given for the correctness of the results.\nThis is alpha-stage software and mostly thought as a proof of concept.\nAlso check the limitations for `validate_iods` described below.\n\n*Note:*\nThe original name of the package (`dcm-spec-tools`) has been \nchanged to `dicom-validator` together with the move to the `pydicom` \norganization to reflect the fact that no other tools are planned, and that the \nDICOM validator is the relevant tool.\n\n\n## Installation\n\nThe latest version is available on pypi and can be installed via\n```\npip install dicom-validator\n```\n\n## Usage\n```\ndump_dcm_info [-r <revision>] [-src <spec dir>] <DICOM filename>\nvalidate_iods [-r <revision>] [-src <spec dir>] [-v] <DICOM files or directories>\n```\nUse the `--help` option for each script do get usage info.\n\n## Access to the DICOM standard\n\nUpon first start of a tool, part of the latest version of the DICOM standard\nin docbook format (specifically, parts 3.3, 3.4 and 3.6) are downloaded, \nparsed, and the needed information saved in json files. If the `--src` \nparameter is not provided, the files are downloaded to and looked up in\n`<user home>/dicom-validator/`.    \nThese files are then used by the tools. Periodically (once a month), the tools\ncheck for a newer version of the DICOM standard and download it if found.\n\nIt is also possible to use older versions of the standard via the command line \noption `--revision` or `-r`, provided they are available for download \n(at the time of writing, standards are available since revision 2014a). A \nlist of currently available editions can be found in\n*<user home>/dicom-validator/editions.json* after a tool has been called \nthe first time.\n\n## validate_iods\n\nThis checks a given DICOM file, or all DICOM files recursively in a given\ndirectory, for correct tags for the related SOP class. Only the presence or  \nabsence of the tag, and the presence of a tag value is checked, not the\ncontained value itself (a check for correct enumerated values may be added later).\nThis is done by looking up all required and optional modules for this\nSOP class, and checking the tags for these modules. Tags that are not allowed or\nmissing in a module are listed. Parts 3 and 4 of the DICOM standard are used\nto collect the needed information.\nConditions for type 1C and 2C modules and tags are evaluated if possible.\nIf the evaluation fails, the respective modules and tags are considered\noptional. \n\nThe output for a single file may look like this:\n```\n(py3_test) c:\\dev\\GitHub\\dicom-validator>validate_iods \"c:\\dev\\DICOM Data\\SR\\test.dcm\"\n\nProcessing DICOM file \"c:\\dev\\DICOM Data\\SR\\test.dcm\"\nSOP class is \"1.2.840.10008.5.1.4.1.1.88.33\" (Comprehensive SR IOD)\n\nErrors\n======\nModule \"SR Document Content\":\nTag (0040,A043) (Concept Name Code Sequence) is not allowed due to condition:\n  Value Type is equal to \"TEXT\", \"NUM\", \"CODE\", \"DATETIME\", \"DATE\", \"TIME\", \"UIDREF\" or \"PNAME\"\nTag (0040,A300) (Measured Value Sequence) is missing\nTag (0040,A168) (Concept Code Sequence) is missing\nTag (0008,1199) (Referenced SOP Sequence) is missing\nTag (0070,0022) (Graphic Data) is missing\nTag (0070,0023) (Graphic Type) is missing\nTag (3006,0024) (Referenced Frame of Reference UID) is missing\nTag (0040,A130) (Temporal Range Type) is missing\nTag (0040,A138) (Referenced Time Offsets) is missing due to condition:\n  Referenced Sample Positions is not present and Referenced DateTime is not present\nTag (0040,A13A) (Referenced DateTime) is missing due to condition:\n  Referenced Sample Positions is not present and Referenced Time Offsets is not present\n```\n\n### Limitations\n\n#### Condition evaluation\nAs mentioned, if the evaluation of conditions fails, the related module or \ntag is considered optional, which may hide some non-conformity.  \nCondition evaluation may fail if:\n- the needed information is not contained in the DICOM file (e.g. verbose\n  descriptions like \"if the Patient is an animal\")\n- the information is related to other DICOM files (e.g. referenced images)\n- the parsing failed because the condition is too complicated, unexpected,\n  or due to a bug (please write an issue if you encounter such a problem)\n\n#### Retired tags \nAlso note that only the given standard is used to evaluate the files. If \nthe DICOM file has been written using an older standard, it may conform to \nthat standard, but not to the newest one. Tags that are retired in the \nversion of the standard used for parsing are not considered at all.\n\n#### Unsupported cases (support may be added in future versions)\n- SOP classes not in the table in PS3.3 such as Presentation States are not \n  handled\n- functional groups in EnhancedXXX SOP classes are not handled\n\n\n## dcm_dump_info\n\nThis is a very simple DICOM dump tool, which uses \nthe DICOM dictionary as read from part 6 of the standard. It prints the \nDICOM header of the given DICOM file, or of all DICOM files recursively in a \ngiven directory. The output looks like this:\n```\n(py3_test) c:\\dev\\GitHub\\dicom-validator>dump_dcm_info \"c:\\dev\\DICOM \nData\\SR\\image12.dcm\"\n\nc:\\dev\\DICOM Data\\SR\\image12.dcm\n(0005,0010) [Unknown]                                LO    1  [AEGIS_DICOM_2.00]\n(0005,1000) [Unknown]                                UN    1  [\\x00\\x05 \\x08\\x00\\x00\\x00\\n  RIGHT   \\x00\\x05\\xc1X\\x00\\x00\\x00\\x06 0.09 \\x00\\x05...]\n(0008,0008) Image Type                               CS    0  []\n(0008,0016) SOP Class UID                            UI    1  [Ultrasound Image Storage (Retired)]\n(0008,0018) SOP Instance UID                         UI    1  [1.2.840.113680.3.103.775.2873347909.282313.2]\n(0008,0020) Study Date                               DA    1  [19950119]\n(0008,0030) Study Time                               TM    1  [092854.0]\n(0008,0050) Accession Number                         SH    1  [ACN000001]\n(0008,0060) Modality                                 CS    1  [US]\n(0008,0070) Manufacturer                             LO    1  [Acuson]\n(0008,0090) Referring Physician's Name               PN    1  []\n(0008,1010) Station Name                             SH    1  [QV-00775]\n(0008,1030) Study Description                        LO    1  [ABDOMEN]\n(0008,1050) Performing Physician's Name              PN    1  [DOE,JOHN]\n(0008,1060) Name of Physician(s) Reading Study       PN    1  []\n(0008,1070) Operators' Name                          PN    1  [DO]\n(0008,1080) Admitting Diagnoses Description          LO    1  [RSNA'95 Data Not Delete]\n(0009,0010) [Unknown]                                LO    1  [AEGIS_DICOM_2.00]\n...\n```\n\nIf you want to show only specific tags, you can use the option `--show-tags`:\n```\n(py3_test) c:\\dev\\GitHub\\dicom-validator>dump_dcm_info \"c:\\dev\\DICOM Data\\SR\\image12.dcm\" --show-tags 0010,0010 PatientID\n\nc:\\dev\\DICOM Data\\SR\\image12.dcm\n(0010,0010) Patient's Name                           PN    1  [DOE^JANE]\n(0010,0020) Patient ID                               LO    1  [ACN000001]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/pydicom/dicom-validator",
    "keywords": "dicom python",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dicom-validator",
    "package_url": "https://pypi.org/project/dicom-validator/",
    "platform": "",
    "project_url": "https://pypi.org/project/dicom-validator/",
    "project_urls": {
      "Homepage": "http://github.com/pydicom/dicom-validator"
    },
    "release_url": "https://pypi.org/project/dicom-validator/0.3.4/",
    "requires_dist": [
      "pydicom"
    ],
    "requires_python": "",
    "summary": "Python DICOM tools using input from DICOM specs in docbook format",
    "version": "0.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12095646,
  "releases": {
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0774a150f551fe3abadcb4178b71c4a81b59d8f5720905e2b3230e5aee9c6dd",
          "md5": "7559f3f8c1511d63bd5ad6b58bb541dc",
          "sha256": "b98ea77f6d85e25eb8754d24c73a74885ed6ae149cd01338d47fb3ae85d1eb70"
        },
        "downloads": -1,
        "filename": "dicom_validator-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7559f3f8c1511d63bd5ad6b58bb541dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42866,
        "upload_time": "2021-07-30T17:26:52",
        "upload_time_iso_8601": "2021-07-30T17:26:52.016883Z",
        "url": "https://files.pythonhosted.org/packages/a0/77/4a150f551fe3abadcb4178b71c4a81b59d8f5720905e2b3230e5aee9c6dd/dicom_validator-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a78f2e2cec1ae359dcb54ea23748de924756b1a3f85461ac5a1394048be7383",
          "md5": "493dd601a5012fe3a7bc8d87a8aa7ea9",
          "sha256": "c9326e418b0124354ba82ed53e847154c139137cd1dc81d159624f37a3c3b875"
        },
        "downloads": -1,
        "filename": "dicom-validator-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "493dd601a5012fe3a7bc8d87a8aa7ea9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32011,
        "upload_time": "2021-07-30T17:26:54",
        "upload_time_iso_8601": "2021-07-30T17:26:54.016216Z",
        "url": "https://files.pythonhosted.org/packages/6a/78/f2e2cec1ae359dcb54ea23748de924756b1a3f85461ac5a1394048be7383/dicom-validator-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a54616ec70e5d008a7128a6f600e1d11cc6c615a3f574c4a4d71984983874b87",
          "md5": "09f42caa520bc20434acd8b816ffcc86",
          "sha256": "0bbd485241b92a4f5edb7e6601aa65c259a4a5a63b9f920791faa21ae53421c1"
        },
        "downloads": -1,
        "filename": "dicom_validator-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09f42caa520bc20434acd8b816ffcc86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43133,
        "upload_time": "2021-11-20T18:26:31",
        "upload_time_iso_8601": "2021-11-20T18:26:31.334974Z",
        "url": "https://files.pythonhosted.org/packages/a5/46/16ec70e5d008a7128a6f600e1d11cc6c615a3f574c4a4d71984983874b87/dicom_validator-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "598506e266dd96c97ebb18c0025b6b3df222282a5e21f45fa0f6daba87e9911a",
          "md5": "1010e7afd0583eed6a32d08813080ca4",
          "sha256": "57ce7c7431847cf038fd6b0b1264bba6c54d20da9421be2bed01fd661a150f42"
        },
        "downloads": -1,
        "filename": "dicom-validator-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1010e7afd0583eed6a32d08813080ca4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32335,
        "upload_time": "2021-11-20T18:26:32",
        "upload_time_iso_8601": "2021-11-20T18:26:32.826543Z",
        "url": "https://files.pythonhosted.org/packages/59/85/06e266dd96c97ebb18c0025b6b3df222282a5e21f45fa0f6daba87e9911a/dicom-validator-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb3b3e864f4bf6c76fc86566976ab0b6923f003694dd7c4040f53bd238cc64e1",
          "md5": "0709db0caed28a9882a76bf6fe881492",
          "sha256": "468b9018e719c3ac86038d7b04a9dad05407320ff53ac663153f83380d49f031"
        },
        "downloads": -1,
        "filename": "dicom_validator-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0709db0caed28a9882a76bf6fe881492",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44564,
        "upload_time": "2021-11-22T20:53:19",
        "upload_time_iso_8601": "2021-11-22T20:53:19.688160Z",
        "url": "https://files.pythonhosted.org/packages/cb/3b/3e864f4bf6c76fc86566976ab0b6923f003694dd7c4040f53bd238cc64e1/dicom_validator-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b8a88f9f786cc35f4e8bbe4de7b3e8e64a273ca7bfb52caa64f01bf7e1b072d",
          "md5": "e76a33c1cb9bd217388599839609e158",
          "sha256": "2e5446c4beaea24aec45bad0e97b98881c8939b2798512dc70aab2900ac37567"
        },
        "downloads": -1,
        "filename": "dicom-validator-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e76a33c1cb9bd217388599839609e158",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33330,
        "upload_time": "2021-11-22T20:53:21",
        "upload_time_iso_8601": "2021-11-22T20:53:21.627828Z",
        "url": "https://files.pythonhosted.org/packages/0b/8a/88f9f786cc35f4e8bbe4de7b3e8e64a273ca7bfb52caa64f01bf7e1b072d/dicom-validator-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb3b3e864f4bf6c76fc86566976ab0b6923f003694dd7c4040f53bd238cc64e1",
        "md5": "0709db0caed28a9882a76bf6fe881492",
        "sha256": "468b9018e719c3ac86038d7b04a9dad05407320ff53ac663153f83380d49f031"
      },
      "downloads": -1,
      "filename": "dicom_validator-0.3.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0709db0caed28a9882a76bf6fe881492",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 44564,
      "upload_time": "2021-11-22T20:53:19",
      "upload_time_iso_8601": "2021-11-22T20:53:19.688160Z",
      "url": "https://files.pythonhosted.org/packages/cb/3b/3e864f4bf6c76fc86566976ab0b6923f003694dd7c4040f53bd238cc64e1/dicom_validator-0.3.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b8a88f9f786cc35f4e8bbe4de7b3e8e64a273ca7bfb52caa64f01bf7e1b072d",
        "md5": "e76a33c1cb9bd217388599839609e158",
        "sha256": "2e5446c4beaea24aec45bad0e97b98881c8939b2798512dc70aab2900ac37567"
      },
      "downloads": -1,
      "filename": "dicom-validator-0.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "e76a33c1cb9bd217388599839609e158",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 33330,
      "upload_time": "2021-11-22T20:53:21",
      "upload_time_iso_8601": "2021-11-22T20:53:21.627828Z",
      "url": "https://files.pythonhosted.org/packages/0b/8a/88f9f786cc35f4e8bbe4de7b3e8e64a273ca7bfb52caa64f01bf7e1b072d/dicom-validator-0.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}