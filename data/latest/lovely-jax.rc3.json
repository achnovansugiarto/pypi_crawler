{
  "info": {
    "author": "Alexey Zaytsev",
    "author_email": "alexey.zaytsev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "üíò Lovely JAX\n================\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\n<div>\n\n## [Read full docs](https://xl0.github.io/lovely-jax) \\| ‚ù§Ô∏è [Lovely Tensors](https://github.com/xl0/lovely-tensors) \\| üíü [Lovely `NumPy`](https://github.com/xl0/lovely-numpy) \\| [Discord](https://discord.gg/4NxRV7NH)\n\n</div>\n\n## Note: I‚Äôm pretty new to JAX\n\nIf something does not make sense, shoot me an\n[Issue](https://github.com/xl0/lovely-jax/issues) or ping me on Discord\nand let me know how it‚Äôs supposed to work!\n\nBetter support for sharded arrays and solid jit/pmap/vmap support coming\nsoon!\n\n## Install\n\n``` sh\npip install lovely-jax\n```\n\n## How to use\n\nHow often do you find yourself debugging JAX code? You dump an array to\nthe cell output, and see this:\n\n``` python\nnumbers\n```\n\n    Array([[[-0.354, -0.337, -0.405, ..., -0.56 , -0.474,  2.249],\n            [-0.405, -0.423, -0.491, ..., -0.919, -0.851,  2.163],\n            [-0.474, -0.474, -0.542, ..., -1.039, -1.039,  2.198],\n            ...,\n            [-0.902, -0.834, -0.936, ..., -1.467, -1.296,  2.232],\n            [-0.851, -0.782, -0.936, ..., -1.604, -1.501,  2.18 ],\n            [-0.834, -0.816, -0.971, ..., -1.656, -1.553,  2.112]],\n\n           [[-0.197, -0.197, -0.303, ..., -0.478, -0.373,  2.411],\n            [-0.25 , -0.232, -0.338, ..., -0.705, -0.67 ,  2.359],\n            [-0.303, -0.285, -0.39 , ..., -0.74 , -0.81 ,  2.376],\n            ...,\n            [-0.425, -0.232, -0.373, ..., -1.09 , -1.02 ,  2.429],\n            [-0.39 , -0.232, -0.425, ..., -1.23 , -1.23 ,  2.411],\n            [-0.408, -0.285, -0.478, ..., -1.283, -1.283,  2.341]],\n\n           [[-0.672, -0.985, -0.881, ..., -0.968, -0.689,  2.396],\n            [-0.724, -1.072, -0.968, ..., -1.247, -1.02 ,  2.326],\n            [-0.828, -1.125, -1.02 , ..., -1.264, -1.16 ,  2.379],\n            ...,\n            [-1.229, -1.473, -1.386, ..., -1.508, -1.264,  2.518],\n            [-1.194, -1.456, -1.421, ..., -1.648, -1.473,  2.431],\n            [-1.229, -1.526, -1.508, ..., -1.682, -1.526,  2.361]]], dtype=float32)\n\nWas it really useful for you, as a human, to see all these numbers?\n\nWhat is the shape? The size?  \nWhat are the statistics?  \nAre any of the values `nan` or `inf`?  \nIs it an image of a man holding a tench?\n\n``` python\nimport lovely_jax as lj\n```\n\n``` python\nlj.monkey_patch()\n```\n\n## Summary\n\n``` python\nnumbers\n```\n\n    Array[196, 196, 3] n=115248 x‚àà[-2.118, 2.640] Œº=-0.388 œÉ=1.073 gpu:0\n\nBetter, huh?\n\n``` python\nnumbers[1,:6,1] # Still shows values if there are not too many.\n```\n\n    Array[6] x‚àà[-0.408, -0.232] Œº=-0.340 œÉ=0.075 gpu:0 [-0.250, -0.232, -0.338, -0.408, -0.408, -0.408]\n\n``` python\nspicy = numbers.flatten()[:12].copy()\n\nspicy = (spicy  .at[0].mul(10000)\n                .at[1].divide(10000)\n                .at[2].set(float('inf'))\n                .at[3].set(float('-inf'))\n                .at[4].set(float('nan'))\n                .reshape((2,6)))\nspicy # Spicy stuff\n```\n\n    Array[2, 6] n=12 x‚àà[-3.541e+03, -1.975e-05] Œº=-393.848 œÉ=1.113e+03 +Inf! -Inf! NaN! gpu:0\n\n``` python\njnp.zeros((10, 10)) # A zero array - make it obvious\n```\n\n    Array[10, 10] all_zeros gpu:0\n\n``` python\nspicy.v # Verbose\n```\n\n    Array[2, 6] n=12 x‚àà[-3.541e+03, -1.975e-05] Œº=-393.848 œÉ=1.113e+03 +Inf! -Inf! NaN! gpu:0\n    Array([[-3.541e+03, -1.975e-05,        inf,       -inf,        nan, -9.853e-01],\n           [-4.054e-01, -3.025e-01, -8.807e-01, -4.397e-01, -3.025e-01, -7.761e-01]], dtype=float32)\n\n``` python\nspicy.p # The plain old way\n```\n\n    Array([[-3.541e+03, -1.975e-05,        inf,       -inf,        nan, -9.853e-01],\n           [-4.054e-01, -3.025e-01, -8.807e-01, -4.397e-01, -3.025e-01, -7.761e-01]], dtype=float32)\n\n## Going `.deeper`\n\n``` python\nnumbers.deeper\n```\n\n    Array[196, 196, 3] n=115248 x‚àà[-2.118, 2.640] Œº=-0.388 œÉ=1.073 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.912, 2.411] Œº=-0.728 œÉ=0.519 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.861, 2.359] Œº=-0.778 œÉ=0.450 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.758, 2.379] Œº=-0.838 œÉ=0.437 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.656, 2.466] Œº=-0.878 œÉ=0.415 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.717, 2.448] Œº=-0.882 œÉ=0.399 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.717, 2.431] Œº=-0.905 œÉ=0.408 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.563, 2.448] Œº=-0.859 œÉ=0.416 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.475, 2.431] Œº=-0.791 œÉ=0.463 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.526, 2.429] Œº=-0.759 œÉ=0.499 gpu:0\n      ...\n\n``` python\n# You can go deeper if you need to\nnumbers[:3,:5,:3].deeper(2)\n```\n\n    Array[3, 5, 3] n=45 x‚àà[-1.316, -0.197] Œº=-0.593 œÉ=0.302 gpu:0\n      Array[5, 3] n=15 x‚àà[-0.985, -0.197] Œº=-0.491 œÉ=0.267 gpu:0\n        Array[3] x‚àà[-0.672, -0.197] Œº=-0.408 œÉ=0.197 gpu:0 [-0.354, -0.197, -0.672]\n        Array[3] x‚àà[-0.985, -0.197] Œº=-0.507 œÉ=0.343 gpu:0 [-0.337, -0.197, -0.985]\n        Array[3] x‚àà[-0.881, -0.303] Œº=-0.530 œÉ=0.252 gpu:0 [-0.405, -0.303, -0.881]\n        Array[3] x‚àà[-0.776, -0.303] Œº=-0.506 œÉ=0.199 gpu:0 [-0.440, -0.303, -0.776]\n        Array[3] x‚àà[-0.916, -0.215] Œº=-0.506 œÉ=0.298 gpu:0 [-0.388, -0.215, -0.916]\n      Array[5, 3] n=15 x‚àà[-1.212, -0.232] Œº=-0.609 œÉ=0.302 gpu:0\n        Array[3] x‚àà[-0.724, -0.250] Œº=-0.460 œÉ=0.197 gpu:0 [-0.405, -0.250, -0.724]\n        Array[3] x‚àà[-1.072, -0.232] Œº=-0.576 œÉ=0.360 gpu:0 [-0.423, -0.232, -1.072]\n        Array[3] x‚àà[-0.968, -0.338] Œº=-0.599 œÉ=0.268 gpu:0 [-0.491, -0.338, -0.968]\n        Array[3] x‚àà[-0.968, -0.408] Œº=-0.651 œÉ=0.235 gpu:0 [-0.577, -0.408, -0.968]\n        Array[3] x‚àà[-1.212, -0.408] Œº=-0.761 œÉ=0.336 gpu:0 [-0.662, -0.408, -1.212]\n      Array[5, 3] n=15 x‚àà[-1.316, -0.285] Œº=-0.677 œÉ=0.306 gpu:0\n        Array[3] x‚àà[-0.828, -0.303] Œº=-0.535 œÉ=0.219 gpu:0 [-0.474, -0.303, -0.828]\n        Array[3] x‚àà[-1.125, -0.285] Œº=-0.628 œÉ=0.360 gpu:0 [-0.474, -0.285, -1.125]\n        Array[3] x‚àà[-1.020, -0.390] Œº=-0.651 œÉ=0.268 gpu:0 [-0.542, -0.390, -1.020]\n        Array[3] x‚àà[-1.003, -0.478] Œº=-0.708 œÉ=0.219 gpu:0 [-0.645, -0.478, -1.003]\n        Array[3] x‚àà[-1.316, -0.513] Œº=-0.865 œÉ=0.336 gpu:0 [-0.765, -0.513, -1.316]\n\n## Now in `.rgb` color\n\nThe important queston - is it our man?\n\n``` python\nnumbers.rgb\n```\n\n![](index_files/figure-gfm/cell-13-output-1.png)\n\n*Maaaaybe?* Looks like someone normalized him.\n\n``` python\nin_stats = ( (0.485, 0.456, 0.406),     # mean \n             (0.229, 0.224, 0.225) )    # std\n\n# numbers.rgb(in_stats, cl=True) # For channel-last input format\nnumbers.rgb(in_stats)\n```\n\n![](index_files/figure-gfm/cell-14-output-1.png)\n\nIt‚Äôs indeed our hero, the Tenchman!\n\n## `.plt` the statistics\n\n``` python\n(numbers+3).plt\n```\n\n![](index_files/figure-gfm/cell-15-output-1.svg)\n\n``` python\n(numbers+3).plt(center=\"mean\", max_s=1000)\n```\n\n![](index_files/figure-gfm/cell-16-output-1.svg)\n\n``` python\n(numbers+3).plt(center=\"range\")\n```\n\n![](index_files/figure-gfm/cell-17-output-1.svg)\n\n## See the `.chans`\n\n``` python\n# .chans will map values betwen [-1,1] to colors.\n# Make our values fit into that range to avoid clipping.\nmean = jnp.array(in_stats[0])\nstd = jnp.array(in_stats[1])\nnumbers_01 = (numbers*std + mean)\nnumbers_01\n```\n\n    Array[196, 196, 3] n=115248 x‚àà[0., 1.000] Œº=0.361 œÉ=0.248 gpu:0\n\n``` python\nnumbers_01.chans\n```\n\n![](index_files/figure-gfm/cell-19-output-1.png)\n\n## Grouping\n\n``` python\n# Make 8 images with progressively higher brightness and stack them 2x2x2.\neight_images = (jnp.stack([numbers]*8) + jnp.linspace(-2, 2, 8)[:,None,None,None])\neight_images = (eight_images\n                     *jnp.array(in_stats[1])\n                     +jnp.array(in_stats[0])\n                ).clip(0,1).reshape(2,2,2,196,196,3)\n\neight_images\n```\n\n    Array[2, 2, 2, 196, 196, 3] n=921984 x‚àà[0., 1.000] Œº=0.382 œÉ=0.319 gpu:0\n\n``` python\neight_images.rgb\n```\n\n![](index_files/figure-gfm/cell-21-output-1.png)\n\n## Options \\| [Docs](utils.config.html)\n\n``` python\nfrom lovely_jax import set_config, config, lovely, get_config\n```\n\n``` python\nset_config(precision=5, sci_mode=True, color=False)\njnp.array([1., 2, jnp.nan])\n```\n\n    Array[3] Œº=1.50000e+00 œÉ=5.00000e-01 NaN! gpu:0 [1.00000e+00, 2.00000e+00, nan]\n\n``` python\nset_config(precision=None, sci_mode=None, color=None) # None -> Reset to defaults\n```\n\n``` python\nprint(jnp.array([1., 2]))\n# Or with config context manager.\nwith config(sci_mode=True, precision=5):\n    print(jnp.array([1., 2]))\n\nprint(jnp.array([1., 2]))\n```\n\n    Array[2] Œº=1.500 œÉ=0.500 gpu:0 [1.000, 2.000]\n    Array[2] Œº=1.50000e+00 œÉ=5.00000e-01 gpu:0 [1.00000e+00, 2.00000e+00]\n    Array[2] Œº=1.500 œÉ=0.500 gpu:0 [1.000, 2.000]\n\n## Without `.monkey_patch`\n\n``` python\nlj.lovely(spicy)\n```\n\n    Array[2, 6] n=12 x‚àà[-3.541e+03, -1.975e-05] Œº=-393.848 œÉ=1.113e+03 +Inf! -Inf! NaN! gpu:0\n\n``` python\nlj.lovely(spicy, verbose=True)\n```\n\n    Array[2, 6] n=12 x‚àà[-3.541e+03, -1.975e-05] Œº=-393.848 œÉ=1.113e+03 +Inf! -Inf! NaN! gpu:0\n    Array([[-3.541e+03, -1.975e-05,        inf,       -inf,        nan, -9.853e-01],\n           [-4.054e-01, -3.025e-01, -8.807e-01, -4.397e-01, -3.025e-01, -7.761e-01]], dtype=float32)\n\n``` python\nlj.lovely(numbers, depth=1)\n```\n\n    Array[196, 196, 3] n=115248 x‚àà[-2.118, 2.640] Œº=-0.388 œÉ=1.073 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.912, 2.411] Œº=-0.728 œÉ=0.519 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.861, 2.359] Œº=-0.778 œÉ=0.450 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.758, 2.379] Œº=-0.838 œÉ=0.437 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.656, 2.466] Œº=-0.878 œÉ=0.415 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.717, 2.448] Œº=-0.882 œÉ=0.399 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.717, 2.431] Œº=-0.905 œÉ=0.408 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.563, 2.448] Œº=-0.859 œÉ=0.416 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.475, 2.431] Œº=-0.791 œÉ=0.463 gpu:0\n      Array[196, 3] n=588 x‚àà[-1.526, 2.429] Œº=-0.759 œÉ=0.499 gpu:0\n      ...\n\n``` python\nlj.rgb(numbers, in_stats)\n```\n\n![](index_files/figure-gfm/cell-29-output-1.png)\n\n``` python\nlj.plot(numbers, center=\"mean\")\n```\n\n![](index_files/figure-gfm/cell-30-output-1.svg)\n\n``` python\nlj.chans(numbers_01)\n```\n\n![](index_files/figure-gfm/cell-31-output-1.png)\n\n## Matplotlib integration \\| [Docs](matplotlib.html)\n\n``` python\nnumbers.rgb(in_stats).fig # matplotlib figure\n```\n\n![](index_files/figure-gfm/cell-32-output-1.svg)\n\n``` python\n(numbers*0.3+0.5).chans.fig # matplotlib figure\n```\n\n![](index_files/figure-gfm/cell-33-output-1.svg)\n\n``` python\nnumbers.plt.fig.savefig('pretty.svg') # Save it\n```\n\n``` python\n!file pretty.svg; rm pretty.svg\n```\n\n    pretty.svg: SVG Scalable Vector Graphics image\n\n### Add content to existing Axes\n\n``` python\nfig = plt.figure(figsize=(8,3))\nfig.set_constrained_layout(True)\ngs = fig.add_gridspec(2,2)\nax1 = fig.add_subplot(gs[0, :])\nax2 = fig.add_subplot(gs[1, 0])\nax3 = fig.add_subplot(gs[1,1:])\n\nax2.set_axis_off()\nax3.set_axis_off()\n\nnumbers_01.plt(ax=ax1)\nnumbers_01.rgb(ax=ax2)\nnumbers_01.chans(ax=ax3);\n```\n\n![](index_files/figure-gfm/cell-36-output-1.svg)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xl0/lovely-jax",
    "keywords": "nbdev jupyter jax",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lovely-jax",
    "package_url": "https://pypi.org/project/lovely-jax/",
    "platform": null,
    "project_url": "https://pypi.org/project/lovely-jax/",
    "project_urls": {
      "Homepage": "https://github.com/xl0/lovely-jax"
    },
    "release_url": "https://pypi.org/project/lovely-jax/0.1.0/",
    "requires_dist": [
      "fastcore",
      "numpy",
      "matplotlib",
      "jax[cpu]",
      "lovely-numpy (>=0.2.8.dev2)"
    ],
    "requires_python": ">=3.7",
    "summary": "üíò Lovely JAX",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16388594,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "439d66a3e177c41248bc68cdc009ed968d5ce047423b5b44d026d7aa98793465",
          "md5": "c932ad8d0dcdef8064d592638a4f7ab9",
          "sha256": "dfffdfd87a167165d3aa7c0d9300fc864ae1f2c81a1bc02ebcbf57af698cb058"
        },
        "downloads": -1,
        "filename": "lovely_jax-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c932ad8d0dcdef8064d592638a4f7ab9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8492,
        "upload_time": "2022-11-08T08:26:21",
        "upload_time_iso_8601": "2022-11-08T08:26:21.219117Z",
        "url": "https://files.pythonhosted.org/packages/43/9d/66a3e177c41248bc68cdc009ed968d5ce047423b5b44d026d7aa98793465/lovely_jax-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "698ae4e5c44f21ab639e3da8a4cd40f380c2ed2dbe77689a6bd2b6b282805485",
          "md5": "1881e8cdffc2bea970233b4919216485",
          "sha256": "605ab1c0b15bb97615d64444bda2f8f076b03157831f84c50499a916b6c9469b"
        },
        "downloads": -1,
        "filename": "lovely-jax-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1881e8cdffc2bea970233b4919216485",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 149730,
        "upload_time": "2022-11-08T08:26:24",
        "upload_time_iso_8601": "2022-11-08T08:26:24.642879Z",
        "url": "https://files.pythonhosted.org/packages/69/8a/e4e5c44f21ab639e3da8a4cd40f380c2ed2dbe77689a6bd2b6b282805485/lovely-jax-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1256e78dc937e4cb12c73fe9d5e4a51224bfcbd1a97ac2adc9f2e2e9edbb7fc",
          "md5": "cad576b442d9a6f01606d5bc41538b15",
          "sha256": "8f7c66633c5d4e336a4d36fb3cd049d257a3dd919cb2eeca2723a108d92b3a6d"
        },
        "downloads": -1,
        "filename": "lovely_jax-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cad576b442d9a6f01606d5bc41538b15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16742,
        "upload_time": "2022-12-27T12:11:03",
        "upload_time_iso_8601": "2022-12-27T12:11:03.367756Z",
        "url": "https://files.pythonhosted.org/packages/a1/25/6e78dc937e4cb12c73fe9d5e4a51224bfcbd1a97ac2adc9f2e2e9edbb7fc/lovely_jax-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "124eb7416498e84ca8394afe7c75f7fbd8b13db141f81049695569b97e560e9e",
          "md5": "d5651f55a8de08465aa06da92c42362e",
          "sha256": "50d4ec9d067faa82fcb58b5cae70d98b66f45f8a6df7bbfa98d4a6f4a410b65c"
        },
        "downloads": -1,
        "filename": "lovely-jax-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d5651f55a8de08465aa06da92c42362e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2620022,
        "upload_time": "2022-12-27T12:11:07",
        "upload_time_iso_8601": "2022-12-27T12:11:07.930181Z",
        "url": "https://files.pythonhosted.org/packages/12/4e/b7416498e84ca8394afe7c75f7fbd8b13db141f81049695569b97e560e9e/lovely-jax-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f1be22df838c67148808c486e98f96d8364cf182f732336a239aebb37172f4f",
          "md5": "f206f65fd11670ccd381509b43bec16e",
          "sha256": "534f3773fc29863774e30462993da313453e8e69d2b4cc57c21f69c2ca0ec7b9"
        },
        "downloads": -1,
        "filename": "lovely_jax-0.1.1.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f206f65fd11670ccd381509b43bec16e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16906,
        "upload_time": "2023-01-11T11:27:34",
        "upload_time_iso_8601": "2023-01-11T11:27:34.837195Z",
        "url": "https://files.pythonhosted.org/packages/9f/1b/e22df838c67148808c486e98f96d8364cf182f732336a239aebb37172f4f/lovely_jax-0.1.1.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "873949180ef58184cd34ab77aabee5d4d713bdb2b9cf0856afb265c56fc3d126",
          "md5": "d8721df1f9a0b0baff51a51ae4709ebe",
          "sha256": "292cd94da41121f73033da708054fdf1c78d1ecc474cefd669e2e53e57d2f81c"
        },
        "downloads": -1,
        "filename": "lovely-jax-0.1.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8721df1f9a0b0baff51a51ae4709ebe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2620189,
        "upload_time": "2023-01-11T11:27:38",
        "upload_time_iso_8601": "2023-01-11T11:27:38.798194Z",
        "url": "https://files.pythonhosted.org/packages/87/39/49180ef58184cd34ab77aabee5d4d713bdb2b9cf0856afb265c56fc3d126/lovely-jax-0.1.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1256e78dc937e4cb12c73fe9d5e4a51224bfcbd1a97ac2adc9f2e2e9edbb7fc",
        "md5": "cad576b442d9a6f01606d5bc41538b15",
        "sha256": "8f7c66633c5d4e336a4d36fb3cd049d257a3dd919cb2eeca2723a108d92b3a6d"
      },
      "downloads": -1,
      "filename": "lovely_jax-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cad576b442d9a6f01606d5bc41538b15",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16742,
      "upload_time": "2022-12-27T12:11:03",
      "upload_time_iso_8601": "2022-12-27T12:11:03.367756Z",
      "url": "https://files.pythonhosted.org/packages/a1/25/6e78dc937e4cb12c73fe9d5e4a51224bfcbd1a97ac2adc9f2e2e9edbb7fc/lovely_jax-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "124eb7416498e84ca8394afe7c75f7fbd8b13db141f81049695569b97e560e9e",
        "md5": "d5651f55a8de08465aa06da92c42362e",
        "sha256": "50d4ec9d067faa82fcb58b5cae70d98b66f45f8a6df7bbfa98d4a6f4a410b65c"
      },
      "downloads": -1,
      "filename": "lovely-jax-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d5651f55a8de08465aa06da92c42362e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 2620022,
      "upload_time": "2022-12-27T12:11:07",
      "upload_time_iso_8601": "2022-12-27T12:11:07.930181Z",
      "url": "https://files.pythonhosted.org/packages/12/4e/b7416498e84ca8394afe7c75f7fbd8b13db141f81049695569b97e560e9e/lovely-jax-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}