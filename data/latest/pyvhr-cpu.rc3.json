{
  "info": {
    "author": "Vittorio Cuculo <vittorio.cuculo@unimi.it>, Donatello Conte <donatello.conte@univ-tours.fr>, Alessandro D'Amelio <alessandro.damelio@unimi.it>, Giuliano Grossi <giuliano.grossi@unimi.it>, Edoardo Mortara <edoardo.mortara@studenti.unimi.it>",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img src=\"https://raw.githubusercontent.com/phuselab/pyVHR/master/img/pyVHR-logo.png\" alt=\"pyVHR logo\" width=\"300\"/>\n\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pyvhr)\n[![PyPI](https://img.shields.io/pypi/v/pyvhr)](https://pypi.org/project/pyVHR/)\n![GitHub last commit](https://img.shields.io/github/last-commit/phuselab/pyVHR)\n[![GitHub license](https://img.shields.io/github/license/phuselab/pyVHR)](https://github.com/phuselab/pyVHR/blob/master/LICENSE)\n\n\n**Package pyVHR** (short for Python framework for Virtual Heart Rate) is a comprehensive framework for studying methods of pulse rate estimation relying on video, also known as remote photoplethysmography (rPPG).\n\n## Description\n\nThe methodological rationale behind the framework is that in order to study, develop and compare new rPPG methods in a principled and reproducible way, the following conditions should be met: *i)* a structured pipeline to monitor rPPG algorithms' input, output, and main control parameters; *ii)* the availability and the use of multiple datasets; *iii)* a sound statistical assessment of methods' performance.\npyVHR allows to easily handle rPPGmethods  and  data,  while  simplifying  the  statistical  assessment. Its main features lie in the following.\n- **Analysis-oriented**. It  constitutes  a  platform  for  experiment design, involving an arbitrary number of methods applied to multiple video datasets. It provides a systemic end-to-end  pipeline,  allowing  to  assess  different  rPPG  algorithms, by easily setting parameters and meta-parameters.\n- **Openness**. It comprises both method and dataset factory, so to easily extend the pool of elements to be evaluatedwith newly developed rPPG methods and any kind of videodatasets.\n- **Robust assessment**. The outcomes are arranged intostructured data ready for in-depth analyses. Performance comparison is carried out based on robust nonparametric statistical tests.\n\nEight well-known rPPG methods, namely  *ICA*,  *PCA*, *GREEN*, *CHROM*, *POS*, *SSR*, *LGI*, *PBV*, are evaluated through extensive experiments across five public video datasets,  i.e. *PURE*, *LGI*, *UBFC*, *MAHNOB* and *COHFACE*, and subsequent nonparametric statistical analysis.  \n\n![pipeline](https://user-images.githubusercontent.com/642555/138317542-41d4988a-bb68-4cd6-8abc-43ad86061c9b.png)\n\n## Getting started\n\n### Dependencies\n\nThe quickest way to get started is to install the [miniconda](http://conda.pydata.org/miniconda.html) distribution, a lightweight minimal installation of Anaconda Python.\n\nOnce installed, create a new `conda` environment and automatically fetch all the dependencies based on your architecture (with or without GPU), using one of the following commands:\n\n**CPU-only version**\n```bash\nconda env create --file https://raw.githubusercontent.com/phuselab/pyVHR/pyVHR_CPU/pyVHR_CPU_env.yml\n```\n\n**CPU+GPU version**  \nThis yml environment is for cudatoolkit=10.2 and python=3.8.\n```bash\nconda env create --file https://raw.githubusercontent.com/phuselab/pyVHR/master/pyVHR_env.yml\n```\n\n### Installation\n\nEnter the newly created conda environment and install the latest stable release build of pyVHR with:\n\n**CPU-only version**\n```bash\nconda activate pyvhr\n(pyvhr) pip install pyvhr-cpu\n```\n\n**CPU+GPU version**  \n```bash\nconda activate pyvhr\n(pyvhr) pip install pyvhr\n```\n\n## Basic usage and Notebooks\nRun the following code to obtain BPM estimates over time for a single video:\n\n```python\nfrom pyVHR.analysis.pipeline import Pipeline\nimport matplotlib.pyplot as plt\n\npipe = Pipeline()\ntime, BPM, uncertainty = pipe.run_on_video('/path/to/video', roi_approach=\"patches\", roi_method=\"faceparsing\")\n\nplt.figure()\nplt.plot(time, BPM)\nplt.fill_between(time, BPM-uncertainty, BPM+uncertainty, alpha=0.2)\nplt.show()\n```\nThe full documentation of `run_on_video` method, with all the possible parameters, can be found here: [https://phuselab.github.io/pyVHR/](https://phuselab.github.io/pyVHR/pyVHR.analysis.html?highlight=run_on_video#pyVHR.analysis.pipeline.Pipeline.run_on_video)\n\n\nThe `notebooks` folder contains useful Jupyter notebooks.\n\n### GUI\nIn the folder `realtime` you can find an example of a simple GUI created using the pyVHR package.\nYou can launch it by going into the path `pyVHR/realtime/` and using the command \n\n```bash\npython GUI.py\n```\n\nIf you want to use a specific rPPG method and pre-post filterings, you must set them in the last lines of `GUI.py`. \n\nBelow is a video showing the use of the GUI.\n\nhttps://user-images.githubusercontent.com/34277835/136981161-8799051a-ca0d-45c6-b4dd-e146457c7bdd.mp4\n\n\n## Developing\n\nThe latest unstable development build of pyVHR is available on GitHub, and can be obtained downloading from source and installing via:\n```bash\ngit clone git@github.com:phuselab/pyVHR.git\ncd pyVHR/\npython setup.py install\n```\n\nThe `main` branch refers to the full pyVHR framework (requires GPU), while the `pyVHR_CPU` branch is dedicated to the CPU-only architectures.\n\n### Custom installation\nIf you want to create your environment from scratch you should follow these steps:\n- Install PyTorch ([here](https://pytorch.org/))\n- Install Numba ([here](https://numba.pydata.org/numba-doc/latest/user/installing.html))\n- Install Cupy (for GPU only) with the correct CUDA version ([here](https://docs.cupy.dev/en/stable/install.html#installing-cupy))\n- Install CuSignal (for GPU only) using conda and remove from the command 'cudatoolkit=x.y' ([here](https://github.com/rapidsai/cusignal))\n- Install Kaleido ([here](https://pypi.org/project/kaleido/))\n- Install PyTables ([here](https://anaconda.org/anaconda/pytables))\n- Install pyVHR as shown above.\n\n## Methods\n\nThe framework contains the implementation of the most common methods for remote-PPG measurement, and are located in the `methods` folder. Currently implemented methods with reference publications are:\n\n**Green** / *Verkruysse, W., Svaasand, L. O., & Nelson, J. S. (2008). Remote plethysmographic imaging using ambient light. Optics express, 16(26), 21434-21445.*\n\n**CHROM** / *De Haan, G., & Jeanne, V. (2013). Robust pulse rate from chrominance-based rPPG. IEEE Transactions on Biomedical Engineering, 60(10), 2878-2886.*\n\n**ICA** / *Poh, M. Z., McDuff, D. J., & Picard, R. W. (2010). Non-contact, automated cardiac pulse measurements using video imaging and blind source separation. Optics express, 18(10), 10762-10774.*\n\n**LGI** / *Pilz, C. S., Zaunseder, S., Krajewski, J., & Blazek, V. (2018). Local group invariance for heart rate estimation from face videos in the wild. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition Workshops (pp. 1254-1262).*\n\n**PBV** / *De Haan, G., & Van Leest, A. (2014). Improved motion robustness of remote-PPG by using the blood volume pulse signature. Physiological measurement, 35(9), 1913.*\n\n**PCA** / *Lewandowska, M., Rumiński, J., Kocejko, T., & Nowak, J. (2011, September). Measuring pulse rate with a webcam—a non-contact method for evaluating cardiac activity. In 2011 federated conference on computer science and information systems (FedCSIS) (pp. 405-410). IEEE.*\n\n**POS** / *Wang, W., den Brinker, A. C., Stuijk, S., & de Haan, G. (2016). Algorithmic principles of remote PPG. IEEE Transactions on Biomedical Engineering, 64(7), 1479-1491.*\n\n**SSR** / *Wang, W., Stuijk, S., & De Haan, G. (2015). A novel algorithm for remote photoplethysmography: Spatial subspace rotation. IEEE transactions on biomedical engineering, 63(9), 1974-1984.*\n\n## Datasets\n\nInterfaces for five different datasets are provided in the `datasets` folder. Once the datasets are obtained, the respective files must be edited to match the correct path.  \nCurrently supported datasets are:\n\n**COHFACE** / *https://www.idiap.ch/dataset/cohface*\n\n**LGI-PPGI** / *https://github.com/partofthestars/LGI-PPGI-DB*\n\n**MAHNOB-HCI** / *https://mahnob-db.eu/hci-tagging/*\n\n**PURE** / *https://www.tu-ilmenau.de/en/neurob/data-sets-code/pulse/*\n\n**UBFC1** / *https://sites.google.com/view/ybenezeth/ubfcrppg*\n\n**UBFC2** / *https://sites.google.com/view/ybenezeth/ubfcrppg*\n\n## Documentation\n\nThe full documentation of the pyVHR framework is available at [https://phuselab.github.io/pyVHR/](https://phuselab.github.io/pyVHR/).\n\n## Reference\n\nIf you use this code, please cite the paper:\n\n```\n@article{Boccignone2020,\n  doi = {10.1109/access.2020.3040936},\n  url = {https://doi.org/10.1109/access.2020.3040936},\n  year = {2020},\n  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},\n  pages = {1--1},\n  author = {Giuseppe Boccignone and Donatello Conte and Vittorio Cuculo and Alessandro D’Amelio and Giuliano Grossi and Raffaella Lanzarotti},\n  title = {An Open Framework for Remote-{PPG} Methods and their Assessment},\n  journal = {{IEEE} Access}\n}\n```\n\n## License\n\nThis project is licensed under the GPL-3.0 License - see the [LICENSE](LICENSE) file for details\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phuselab/pyVHR",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyVHR-cpu",
    "package_url": "https://pypi.org/project/pyVHR-cpu/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyVHR-cpu/",
    "project_urls": {
      "Homepage": "https://github.com/phuselab/pyVHR"
    },
    "release_url": "https://pypi.org/project/pyVHR-cpu/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package for rPPG methods",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11859119,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5630e3fae97e2f60a29fdc587680fb079d5912053bebc99924d02076274c5d3c",
          "md5": "625c880df370992863f0115eb14d90e8",
          "sha256": "790715358da787336faca224e593fcc6a078288920c8ecbe5371917dafec61eb"
        },
        "downloads": -1,
        "filename": "pyVHR_cpu-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "625c880df370992863f0115eb14d90e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 112499,
        "upload_time": "2021-10-21T20:41:04",
        "upload_time_iso_8601": "2021-10-21T20:41:04.348881Z",
        "url": "https://files.pythonhosted.org/packages/56/30/e3fae97e2f60a29fdc587680fb079d5912053bebc99924d02076274c5d3c/pyVHR_cpu-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7649da2283b985d257e8456369087425652d2e75652608b9b9bcd886ff11238b",
          "md5": "7d26629c1a220374ce1185539bb3e7db",
          "sha256": "1f2742adae0e4b04a4f4da8fda3d56d15eb132974d74bbbdec4174aa5c718f10"
        },
        "downloads": -1,
        "filename": "pyVHR-cpu-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d26629c1a220374ce1185539bb3e7db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 92622,
        "upload_time": "2021-10-21T20:41:06",
        "upload_time_iso_8601": "2021-10-21T20:41:06.860990Z",
        "url": "https://files.pythonhosted.org/packages/76/49/da2283b985d257e8456369087425652d2e75652608b9b9bcd886ff11238b/pyVHR-cpu-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dccdcf2955b17b5f962e9947c84911f8c5fc5bb9dccce9ba35a7f34ea39fdb5",
          "md5": "022b3d6b247c9fe6aeca0676aa7cb291",
          "sha256": "a591ff62870572ccaf321100a963c061ac3e701cd1b070434f03ce1011763009"
        },
        "downloads": -1,
        "filename": "pyVHR_cpu-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "022b3d6b247c9fe6aeca0676aa7cb291",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 112706,
        "upload_time": "2021-10-24T21:55:37",
        "upload_time_iso_8601": "2021-10-24T21:55:37.055844Z",
        "url": "https://files.pythonhosted.org/packages/0d/cc/dcf2955b17b5f962e9947c84911f8c5fc5bb9dccce9ba35a7f34ea39fdb5/pyVHR_cpu-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a83fdc453a9a5c496b421764e46189c2db00e79691d3fe7555f834b9aaf1ab3c",
          "md5": "c4b288c72708f574aa1a205600f410e8",
          "sha256": "88f72496694266d8aafa807381fb729eb6bc85925f281dcb33df3daa1a4dae62"
        },
        "downloads": -1,
        "filename": "pyVHR-cpu-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c4b288c72708f574aa1a205600f410e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 92799,
        "upload_time": "2021-10-24T21:55:38",
        "upload_time_iso_8601": "2021-10-24T21:55:38.222493Z",
        "url": "https://files.pythonhosted.org/packages/a8/3f/dc453a9a5c496b421764e46189c2db00e79691d3fe7555f834b9aaf1ab3c/pyVHR-cpu-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78339731ba2168712f7604d07d5004024ad5a17d8e741eac5053e83353381c29",
          "md5": "fdc10ff5e2fbbb6d356be03619695393",
          "sha256": "fb7ae40826f25984a9b7c21a6fb5ad90e5a1babe933346d789a4b94f8c0faa9a"
        },
        "downloads": -1,
        "filename": "pyVHR_cpu-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdc10ff5e2fbbb6d356be03619695393",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 112728,
        "upload_time": "2021-10-28T16:19:38",
        "upload_time_iso_8601": "2021-10-28T16:19:38.491999Z",
        "url": "https://files.pythonhosted.org/packages/78/33/9731ba2168712f7604d07d5004024ad5a17d8e741eac5053e83353381c29/pyVHR_cpu-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4f0c6de8b7f65073db762a0094e5314e1a0ab222ab6a7a2d9b8b2446b984dc3",
          "md5": "547e32f917c4facda7d5467b6e076d84",
          "sha256": "3504379db7d751d5c23f2906f954f125176520b4e1fae4ab8ea5d37860d6f4b1"
        },
        "downloads": -1,
        "filename": "pyVHR-cpu-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "547e32f917c4facda7d5467b6e076d84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 92859,
        "upload_time": "2021-10-28T16:19:39",
        "upload_time_iso_8601": "2021-10-28T16:19:39.749799Z",
        "url": "https://files.pythonhosted.org/packages/b4/f0/c6de8b7f65073db762a0094e5314e1a0ab222ab6a7a2d9b8b2446b984dc3/pyVHR-cpu-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78339731ba2168712f7604d07d5004024ad5a17d8e741eac5053e83353381c29",
        "md5": "fdc10ff5e2fbbb6d356be03619695393",
        "sha256": "fb7ae40826f25984a9b7c21a6fb5ad90e5a1babe933346d789a4b94f8c0faa9a"
      },
      "downloads": -1,
      "filename": "pyVHR_cpu-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fdc10ff5e2fbbb6d356be03619695393",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 112728,
      "upload_time": "2021-10-28T16:19:38",
      "upload_time_iso_8601": "2021-10-28T16:19:38.491999Z",
      "url": "https://files.pythonhosted.org/packages/78/33/9731ba2168712f7604d07d5004024ad5a17d8e741eac5053e83353381c29/pyVHR_cpu-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4f0c6de8b7f65073db762a0094e5314e1a0ab222ab6a7a2d9b8b2446b984dc3",
        "md5": "547e32f917c4facda7d5467b6e076d84",
        "sha256": "3504379db7d751d5c23f2906f954f125176520b4e1fae4ab8ea5d37860d6f4b1"
      },
      "downloads": -1,
      "filename": "pyVHR-cpu-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "547e32f917c4facda7d5467b6e076d84",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 92859,
      "upload_time": "2021-10-28T16:19:39",
      "upload_time_iso_8601": "2021-10-28T16:19:39.749799Z",
      "url": "https://files.pythonhosted.org/packages/b4/f0/c6de8b7f65073db762a0094e5314e1a0ab222ab6a7a2d9b8b2446b984dc3/pyVHR-cpu-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}