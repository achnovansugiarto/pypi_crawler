{
  "info": {
    "author": "Trevor Edwin Pogue",
    "author_email": "trevorpogue@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Utilities"
    ],
    "description": ".. start-badges\n\n.. |coveralls| image:: https://coveralls.io/repos/github/trevorpogue/sections/badge.svg\n    :alt: Coverage Status\n    :target: https://coveralls.io/github/trevorpogue/sections\n\n.. |codacy| image:: https://app.codacy.com/project/badge/Grade/92804e7a0df44f09b42bc6ee1664bc67\n    :alt: Codacy Code Quality Status\n    :target: https://www.codacy.com/gh/trevorpogue/sections/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=trevorpogue/sections&amp;utm_campaign=Badge_Grade\n\n.. |codeclimate| image:: https://codeclimate.com/github/trevorpogue/sections/badges/gpa.svg\n   :alt: CodeClimate Quality Status\n   :target: https://codeclimate.com/github/trevorpogue/sections\n\n.. |version| image:: https://img.shields.io/pypi/v/sections.svg\n    :alt: PyPI Package latest release\n    :target: https://pypi.org/project/sections\n\n.. |supported-versions| image:: https://img.shields.io/pypi/pyversions/sections.svg\n    :alt: Supported versions\n    :target: https://pypi.org/project/sections\n\n.. |supported-implementations| image:: https://img.shields.io/pypi/implementation/sections.svg\n    :alt: Supported implementations\n    :target: https://pypi.org/project/sections\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/sections.svg\n    :alt: PyPI Wheel\n    :target: https://pypi.org/project/sections\n\n.. |downloads| image:: https://pepy.tech/badge/sections\n    :alt: downloads\n    :target: https://pepy.tech/project/sections\n\n.. |downloads-week| image:: https://pepy.tech/badge/sections/week\n    :alt: downloads\n    :target: https://pepy.tech/project/sections\n\n.. |docs| image:: https://readthedocs.org/projects/sections/badge/?style=flat\n    :alt: Documentation Status\n    :target: https://sections.readthedocs.io/\n\n.. |requires| image:: https://requires.io/github/trevorpogue/sections/requirements.svg?branch=main\n    :alt: Requirements Status\n    :target: https://requires.io/github/trevorpogue/sections/requirements/?branch=main\n\n.. |commits-since| image:: https://img.shields.io/github/commits-since/trevorpogue/sections/v0.0.3.svg\n    :alt: Commits since latest release\n    :target: https://github.com/trevorpogue/sections/compare/v0.0.3...main\n\n.. end-badges\n\n[ s e | c t | i o | n s ]\n*************************\n\n|coveralls| |codacy| |codeclimate| |requires|\n\n|version| |supported-versions| |supported-implementations| |wheel|\n\n|docs| |commits-since| |downloads-week| |downloads|\n\nPython package providing flexible tree data structures for organizing lists and dicts into sections.\n\nSections is designed to be:\n\n* **Intuitive**: Start quickly, spend less time reading the docs.\n\n* **Scalable**: Grow arbitrarily complex trees as your problem scales.\n\n* **Flexible**: Rapidly build nodes with custom attributes, properties, and methods on the fly.\n\n* **Fast**: Made with performance in mind - access lists and sub-lists/dicts in Θ(1) time in many cases. See the Performance section for the full details.\n\n* **Reliable**: Contains an exhaustive test suite and 100% code coverage.\n\n\nLinks\n=====\n\n* `GitHub <https://github.com/trevorpogue/sections>`_\n\n* `Documentation <https://sections.readthedocs.io>`_\n\n\nUsage\n*****\n\n.. code-block:: bash\n\n   $ pip install sections\n\n.. code-block:: python\n\n   import sections\n\n   menu = sections(\n       'Breakfast', 'Dinner',\n       main=['Bacon&Eggs', 'Burger'],\n       side=['HashBrown', 'Fries'],\n   )\n\n.. code-block:: python\n\n   $ print(menu)\n    _________________________\n   │  _____________________  │\n   │ │ 'Breakfast'         │ │\n   │ │ main = 'Bacon&Eggs' │ │\n   │ │ side = 'HashBrown'  │ │\n   │  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯  │\n   │  _________________      │\n   │ │ 'Dinner'        │     │\n   │ │ main = 'Burger' │     │\n   │ │ side = 'Fries'  │     │\n   │  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯      │\n    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n\n.. code-block:: python\n\n   # menu's API with the expected results:\n   assert menu.mains == ['Bacon&Eggs', 'Burger']\n   assert menu.sides == ['HashBrown', 'Fries']\n   assert menu['Breakfast'].main == 'Bacon&Eggs'\n   assert menu['Breakfast'].side == 'HashBrown'\n   assert menu['Dinner'].main == 'Burger'\n   assert menu['Dinner'].side == 'Fries'\n   assert menu('sides', list) == ['HashBrown', 'Fries']\n   assert menu('sides', dict) == {'Breakfast': 'HashBrown', 'Dinner': 'Fries'}\n   # root section/node:\n   assert isinstance(menu, sections.Section)\n   # child sections/nodes:\n   assert isinstance(menu['Breakfast'], sections.Section)\n   assert isinstance(menu['Dinner'], sections.Section)\n\n**Scale in size:**\n\n.. code-block:: python\n\n   library = sections(\n       \"My Bookshelf\",\n       sections({'Fiction'},\n                'LOTR', 'Harry Potter',\n                author=['JRR Tolkien', 'JK Rowling'],\n                topic=[{'Fantasy'}, 'Hobbits', 'Wizards'],),\n       sections({'Non-Fiction'},\n                'General Relativity', 'A Brief History of Time',\n                author=['Albert Einstein', 'Steven Hawking'],\n                topic=[{'Physics'}, 'Time, Gravity', 'Black Holes'],\n                ),\n   )\n\n.. code-block:: python\n\n   $ print(menu)\n    ________________________________________\n   │ 'My Bookshelf'                         │\n   │    ______________________________      │\n   │   │ 'Fiction'                    │     │\n   │   │ topic = 'Fantasy'            │     │\n   │   │    ________________________  │     │\n   │   │   │ 'LOTR'                 │ │     │\n   │   │   │ author = 'JRR Tolkien' │ │     │\n   │   │   │ topic  = 'Hobbits'     │ │     │\n   │   │    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯  │     │\n   │   │    _______________________   │     │\n   │   │   │ 'Harry Potter'        │  │     │\n   │   │   │ author = 'JK Rowling' │  │     │\n   │   │   │ topic  = 'Wizards'    │  │     │\n   │   │    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   │     │\n   │    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯      │\n   │    __________________________________  │\n   │   │ 'Non-Fiction'                    │ │\n   │   │ topic = 'Physics'                │ │\n   │   │    ____________________________  │ │\n   │   │   │ 'General Relativity'       │ │ │\n   │   │   │ author = 'Albert Einstein' │ │ │\n   │   │   │ topic  = 'Time, Gravity'   │ │ │\n   │   │    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯  │ │\n   │   │    ___________________________   │ │\n   │   │   │ 'A Brief History of Time' │  │ │\n   │   │   │ author = 'Steven Hawking' │  │ │\n   │   │   │ topic  = 'Black Holes'    │  │ │\n   │   │    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   │ │\n   │    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯  │\n    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\n\n\nAttrs: Plural/singular hybrid attributes and more\n=================================================\n\nSpend less time deciding between using the singular or plural form for an attribute name:\n\n.. code-block:: python\n\n   tasks = sections('pay bill', 'clean', status=['completed', 'started'])\n   assert tasks.statuses == ['completed', 'started']\n   assert tasks['pay bill'].status == 'completed'\n   assert tasks['clean'].status == 'started'\n\nIf you don’t like this feature, simply turn it off as shown in the **Details - Plural/singular attributes** section.\n\n\nProperties: Easily add on the fly\n=================================\n\nProperties and methods are automatically added to all nodes in a structure returned from a ``sections()`` call when passed as keyword arguments:\n\n.. code-block:: python\n\n   schedule = sections(\n       'Weekdays', 'Weekend',\n       hours_per_day=[[8, 8, 6, 10, 8], [4, 6]],\n       hours=property(lambda self: sum(self.hours_per_day)),\n   )\n   assert schedule['Weekdays'].hours == 40\n   assert schedule['Weekend'].hours == 10\n   assert schedule.hours == 50\n\nAdding properties and methods this way doesn’t affect the class definitions of Sections/nodes from other structures. See the **Details - Properties/methods** section for how this works.\n\n\nConstruction: Build gradually or all at once\n============================================\n\nConstruct section-by-section, section-wise, attribute-wise, or other ways:\n\n.. code-block:: python\n\n   def demo_different_construction_techniques():\n       \"\"\"Example construction techniques for producing the same structure.\"\"\"\n       # Building section-by-section\n       books = sections()\n       books['LOTR'] = sections(topic='Hobbits', author='JRR Tolkien')\n       books['Harry Potter'] = sections(topic='Wizards', author='JK Rowling')\n       demo_resulting_object_api(books)\n\n       # Section-wise construction\n       books = sections(\n           sections('LOTR', topic='Hobbits', author='JRR Tolkien'),\n           sections('Harry Potter', topic='Wizards', author='JK Rowling')\n       )\n       demo_resulting_object_api(books)\n\n       # Attribute-wise construction\n       books = sections(\n           'LOTR', 'Harry Potter',\n           topics=['Hobbits', 'Wizards'],\n           authors=['JRR Tolkien', 'JK Rowling']\n       )\n       demo_resulting_object_api(books)\n\n       # setattr post-construction\n       books = sections(\n           'LOTR', 'Harry Potter',\n       )\n       books.topics = ['Hobbits', 'Wizards']\n       books['LOTR'].author = 'JRR Tolkien'\n       books['Harry Potter'].author = 'JK Rowling'\n       demo_resulting_object_api(books)\n\n   def demo_resulting_object_api(books):\n       \"\"\"Example Section structure API and expected results.\"\"\"\n       assert books.names == ['LOTR', 'Harry Potter']\n       assert books.topics == ['Hobbits', 'Wizards']\n       assert books.authors == ['JRR Tolkien', 'JK Rowling']\n       assert books['LOTR'].topic == 'Hobbits'\n       assert books['LOTR'].author == 'JRR Tolkien'\n       assert books['Harry Potter'].topic == 'Wizards'\n       assert books['Harry Potter'].author == 'JK Rowling'\n\n   demo_different_construction_techniques()\n\n\nDetails\n*******\n\n\nSection names\n=============\n\nThe non-keyword arguments passed into a ``sections()`` call define the section names and are accessed through the attribute ``name``. The names are used like ``keys`` in a ``dict`` to access each child section of the root section node:\n\n.. code-block:: python\n\n   books = sections(\n       'LOTR', 'Harry Potter',\n       topic=['Hobbits', 'Wizards'],\n       author=['JRR Tolkien', 'JK Rowling']\n   )\n   assert books.names == ['LOTR', 'Harry Potter']\n   assert books['LOTR'].name == 'LOTR'\n   assert books['Harry Potter'].name == 'Harry Potter'\n\nNames are optional, and by default, children names are assigned as integer values corresponding to indices in an array, while a root has a default keyvalue of ``sections.SectionNone``:\n\n.. code-block:: python\n\n   sect = sections(x=['a', 'b'])\n   assert sect.sections.names == [0, 1]\n   assert sect.name is sections.SectionNone\n\n   # the string representation of sections.SectionNone is 'section':\n   assert str(sect.name) == 'sections'\n\n\nParent names and attributes\n===========================\n\nA parent section name can optionally be provided as the first argument in a ``sections()`` call by defining it in a set (surrounding it with curly brackets). This strategy avoids an extra level of braces when instantiating Section objects. This idea applies also for defining parent attributes:\n\n.. code-block:: python\n\n   library = sections(\n       {\"My Bookshelf\"},\n       [{'Fantasy'}, 'LOTR', 'Harry Potter'],\n       [{'Academic'}, 'Advanced Mathematics', 'Physics for Engineers'],\n       topic=[{'All my books'},\n              [{'Imaginary things'}, 'Hobbits', 'Wizards'],\n              [{'School'}, 'Numbers', 'Forces']],\n   )\n   assert library.name == \"My Bookshelf\"\n   assert library.sections.names == ['Fantasy', 'Academic']\n   assert library['Fantasy'].sections.names == ['LOTR', 'Harry Potter']\n   assert library['Academic'].sections.names == [\n       'Advanced Mathematics', 'Physics for Engineers'\n   ]\n   assert library['Fantasy']['Harry Potter'].name == 'Harry Potter'\n   assert library.topic == 'All my books'\n   assert library['Fantasy'].topic == 'Imaginary things'\n   assert library['Academic'].topic == 'School'\n\n\nReturn attributes as a list, dict, or iterable\n==============================================\n\nAccess the data in different forms with the ``gettype`` argument in `Section.__call__() <https://sections.readthedocs.io/en/latest/reference/#sections.Section.__call__>`_ as follows:\n\n.. code-block:: python\n\n   menu = sections('Breakfast', 'Dinner', sides=['HashBrown', 'Fries'])\n\n   # return as list always, even if a single element is returned\n   assert menu('sides', list) == ['HashBrown', 'Fries']\n   assert menu['Breakfast']('side', list) == ['HashBrown']\n\n   # return as dict\n   assert menu('sides', dict) == {'Breakfast': 'HashBrown', 'Dinner': 'Fries'}\n   assert menu['Breakfast']('side', dict) == {'Breakfast': 'HashBrown'}\n\n   # return as iterator over elements in list (fastest method, theoretically)\n   for i, value in enumerate(menu('sides', iter)):\n       assert value == ['HashBrown', 'Fries'][i]\n   for i, value in enumerate(menu['Breakfast']('side', iter)):\n       assert value == ['HashBrown'][i]\n\nSee the `Section.__call__() <https://sections.readthedocs.io/en/latest/reference/#sections.Section.__call__>`_ method in the References section of the docs for more options.\n\nSet the default return type when accessing structure attributes by changing ``Section.default_gettype`` as follows:\n\n.. code-block:: python\n\n   menu = sections('Breakfast', 'Dinner', sides=['HashBrown', 'Fries'])\n\n   menu['Breakfast'].default_gettype = dict  # set for only 'Breakfast' node\n   assert menu.sides == ['HashBrown', 'Fries']\n   assert menu['Breakfast']('side') == {'Breakfast': 'HashBrown'}\n\n   menu.cls.default_gettype = dict           # set for all nodes in `menu`\n   assert menu('sides') == {'Breakfast': 'HashBrown', 'Dinner': 'Fries'}\n   assert menu['Breakfast']('side') == {'Breakfast': 'HashBrown'}\n\n   sections.Section.default_gettype = dict   # set for all structures\n   tasks1 = sections('pay bill', 'clean', status=['completed', 'started'])\n   tasks2 = sections('pay bill', 'clean', status=['completed', 'started'])\n   assert tasks1('statuses') == {'pay bill': 'completed', 'clean': 'started'}\n   assert tasks2('statuses') == {'pay bill': 'completed', 'clean': 'started'}\n\nThe above will also work for accessing attributes in the form ``object.attr`` but only if the node does not contain the attribute ``attr``, otherwise it will return the non-iterable raw value for ``attr``. Therefore, for consistency, access attributes using `Section.__call__() <https://sections.readthedocs.io/en/latest/reference/#sections.Section.__call__>`_ like above if you wish to **always receive an iterable** form of the attributes.\n\n\nPlural/singular attributes\n==========================\n\nWhen an attribute is not found in a Section node, both the plural and singular\nforms of the word are then checked to see if the node contains the attribute\nunder those forms of the word. If they are still not found, the node will\nrecursively repeat the same search on each of its children, concatenating the\nresults into a list or dict. The true attribute name in each node supplied a\ncorresponding value is whatever name was given in the keyword argument’s key\n(i.e. ``status`` in the example below).\n\nIf you don’t like this feature, simply turn it off using the following:\n\n::\n\n   import pytest\n   tasks = sections('pay bill', 'clean', status=['completed', 'started'])\n   assert tasks.statuses == ['completed', 'started']\n   # turn off for all future structures:\n   sections.Section.use_pluralsingular = False\n   tasks = sections('pay bill', 'clean', status=['completed', 'started'])\n   with pytest.raises(AttributeError):\n       tasks.statuses  # this now raises an AttributeError\n\nNote, however, that this will still traverse descendant nodes to see if they\ncontain the requested attribute. To stop using this feature also, access\nattributes using the `Section.get_node_attr() <https://sections.readthedocs.io/en/latest/reference/#sections.Section.get_node_attr>`_ method instead.\n\n\nProperties/methods\n==================\n\nEach ``sections()`` call returns a structure containing nodes of a unique class created in a class factory function, where the unique class definition contains no logic except that it inherits from the Section class. This allows properties/methods added to one structure’s class definition to not affect the class definitions of nodes from other structures.\n\n\nSubclassing\n===========\n\nInheriting Section is easy, the only requirement is to call ``super().__init__(**kwds)`` at some point in ``__init__()``  like below if you override that method:\n\n.. code-block:: python\n\n   class Library(sections.Section):\n       \"\"\"My library class.\"\"\"\n\n       def __init__(self, price=\"Custom default value\", **kwds):\n           \"\"\"Pass **kwds to super.\"\"\"\n           super().__init__(**kwds)\n           self.price = price\n\n       @property\n       def genres(self):\n           \"\"\"A synonym for sections.\"\"\"\n           if self.isroot:\n               return self.sections\n           else:\n               raise AttributeError('This library has only 1 level of genres')\n\n       @property\n       def books(self):\n           \"\"\"A synonym for leaves.\"\"\"\n           return self.leaves\n\n       @property\n       def titles(self):\n           \"\"\"A synonym for names.\"\"\"\n           return self.leaves.names\n\n       def critique(self, review=\"Haven't read it yet\", rating=0):\n           \"\"\"Set the book price based on the rating.\"\"\"\n           self.review = review\n           self.price = rating * 2\n\n   library = Library(\n       [{'Fantasy'}, 'LOTR', 'Harry Potter'],\n       [{'Academic'}, 'Advanced Math.', 'Physics for Engineers']\n   )\n   assert library.genres.names == ['Fantasy', 'Academic']\n   assert library.books.titles == [\n       'LOTR', 'Harry Potter', 'Advanced Math.', 'Physics for Engineers'\n   ]\n   library.books['LOTR'].critique(review='Good but too long', rating=7)\n   library.books['Harry Potter'].critique(\n       review=\"I don't like owls\", rating=4)\n   assert library.books['LOTR'].review == 'Good but too long'\n   assert library.books['LOTR'].price == 14\n   assert library.books['Harry Potter'].review == \"I don't like owls\"\n   assert library.books['Harry Potter'].price == 8\n   import pytest\n   with pytest.raises(AttributeError):\n       library['Fantasy'].genres\n\n``Section.__init__()`` assigns the kwds values passed to it to the object attributes, and the passed kwds are generated during instantiation by a metaclass.\n\n\nPerformance\n===========\n\nEach non-leaf Section node keeps a cache containing quickly readable references to attribute dicts previously parsed from manually traversing through descendant nodes in an earlier read. The caches are invalidated accordingly for modified nodes and their ancestors when the tree structure or node attribute values change.\n\nThe caches allow instant reading of sub-lists/dicts in Θ(1) time and can often\nmake structure attribute reading faster by 5x, or even much more when the\nstructure is rarely being modified.\nIf preferred, turn this feature off to avoid the extra memory consumption it causes by modifying the node or structure’s class attribute ``use_cache`` to ``False`` as follows:\n\n.. code-block:: python\n\n   sect = sections(*[[[[[42] * 10] * 10] * 10] * 10])\n   sect.use_cache = False              # turn off for just the root node\n   sect.cls.use_cache = False          # turn off for all nodes in `sect`\n   sections.Section.use_cache = False  # turn off for all structures\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trevorpogue/sections",
    "keywords": "tree,data,structure,organize,section,category,attr,dict,list,node,vertex,graph",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sections",
    "package_url": "https://pypi.org/project/sections/",
    "platform": "",
    "project_url": "https://pypi.org/project/sections/",
    "project_urls": {
      "Changelog": "https://sections.readthedocs.io/en/latest/changelog.html",
      "Documentation": "https://sections.readthedocs.io/",
      "Homepage": "https://github.com/trevorpogue/sections",
      "Issue Tracker": "https://github.com/trevorpogue/sections/issues"
    },
    "release_url": "https://pypi.org/project/sections/0.0.3/",
    "requires_dist": [
      "pluralizer (>=0.0.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Flexible tree data structures for organizing lists and dicts into sections.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10820427,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f903a0184dfe6d9d779c7e5823d630fc1d580a17397c76e4e85f706dcd978f5",
          "md5": "af5d3b8a691927ff31a44ca9fde3732f",
          "sha256": "f2677349567db476bdd8311b50ae9d7f8758b08f6c2d7aea126fec4a81737519"
        },
        "downloads": -1,
        "filename": "sections-0.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af5d3b8a691927ff31a44ca9fde3732f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 15386,
        "upload_time": "2021-06-23T22:33:56",
        "upload_time_iso_8601": "2021-06-23T22:33:56.486442Z",
        "url": "https://files.pythonhosted.org/packages/7f/90/3a0184dfe6d9d779c7e5823d630fc1d580a17397c76e4e85f706dcd978f5/sections-0.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71efeaafffa2f8606bf67c4ee0015db478fd6a00b6f30086adc4a5916aff8995",
          "md5": "f95ffa31ce665c5e047c038b36c39e93",
          "sha256": "e916e8682af6ee4e1f816621f74776c70d3e4e168b16814179ab243fe0e528dc"
        },
        "downloads": -1,
        "filename": "sections-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f95ffa31ce665c5e047c038b36c39e93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 97083,
        "upload_time": "2021-06-23T22:33:59",
        "upload_time_iso_8601": "2021-06-23T22:33:59.140289Z",
        "url": "https://files.pythonhosted.org/packages/71/ef/eaafffa2f8606bf67c4ee0015db478fd6a00b6f30086adc4a5916aff8995/sections-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd0d82c88c5bc432869472baa32d0610dad983a71f44925d5fa0f181ff750c03",
          "md5": "14cd83a0a587da6d06d26cfce9d6cf8d",
          "sha256": "32617161a5fcf3c123f3bd7444cfd6dcad281cb1a1ccbd9da4e54441423da8d2"
        },
        "downloads": -1,
        "filename": "sections-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14cd83a0a587da6d06d26cfce9d6cf8d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 20591,
        "upload_time": "2021-06-25T22:29:36",
        "upload_time_iso_8601": "2021-06-25T22:29:36.324601Z",
        "url": "https://files.pythonhosted.org/packages/cd/0d/82c88c5bc432869472baa32d0610dad983a71f44925d5fa0f181ff750c03/sections-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "241dd01420801159a4cb0cbb40c0108c63193c9410aa9bc01cc7bfcfedefdcbe",
          "md5": "7ff621f9a4a3431f6501835cb4217304",
          "sha256": "1f52d3d4b8a3a9d7b2752f794ff314300bdd319c5f7e6a2515c8346d15f6880b"
        },
        "downloads": -1,
        "filename": "sections-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7ff621f9a4a3431f6501835cb4217304",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 42632,
        "upload_time": "2021-06-25T22:29:38",
        "upload_time_iso_8601": "2021-06-25T22:29:38.343468Z",
        "url": "https://files.pythonhosted.org/packages/24/1d/d01420801159a4cb0cbb40c0108c63193c9410aa9bc01cc7bfcfedefdcbe/sections-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c38cd5cc37b75419834d5a4bf29da084925c8b056618c82dc84a0a5867b6aa66",
          "md5": "e019eb3cada0e816b662bde3a3097d16",
          "sha256": "81f5c311526d0caa60d6a1d969ff95cb2adc7784454b6841d371e57145a8e327"
        },
        "downloads": -1,
        "filename": "sections-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e019eb3cada0e816b662bde3a3097d16",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 20906,
        "upload_time": "2021-06-26T21:23:58",
        "upload_time_iso_8601": "2021-06-26T21:23:58.012502Z",
        "url": "https://files.pythonhosted.org/packages/c3/8c/d5cc37b75419834d5a4bf29da084925c8b056618c82dc84a0a5867b6aa66/sections-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26f41f93c335f595b52cda82e7cb5bd3c4b8d308ab7a3a5a24965cb6baca1048",
          "md5": "53ca74039399063a2a365a4d8a935de4",
          "sha256": "c8acb8bca956ae782a6cb2d635af24d6075263493f7f42e1a44d402383008118"
        },
        "downloads": -1,
        "filename": "sections-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "53ca74039399063a2a365a4d8a935de4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43810,
        "upload_time": "2021-06-26T21:24:00",
        "upload_time_iso_8601": "2021-06-26T21:24:00.129347Z",
        "url": "https://files.pythonhosted.org/packages/26/f4/1f93c335f595b52cda82e7cb5bd3c4b8d308ab7a3a5a24965cb6baca1048/sections-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bacfc75742db44486db32a7c53e88b3f356cc27ef1aa08686f11a19eaa01c3f2",
          "md5": "e4bb27f8215f5cf76e0e3e1993c3ddae",
          "sha256": "a87213d4031ccaa3ac2f303015cea227e15fa76454f14d9f36a7f1f6a9b61ca3"
        },
        "downloads": -1,
        "filename": "sections-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4bb27f8215f5cf76e0e3e1993c3ddae",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 22412,
        "upload_time": "2021-07-04T16:46:40",
        "upload_time_iso_8601": "2021-07-04T16:46:40.387823Z",
        "url": "https://files.pythonhosted.org/packages/ba/cf/c75742db44486db32a7c53e88b3f356cc27ef1aa08686f11a19eaa01c3f2/sections-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bda105d80c1abbb3f40288a94b0b56b59121a60b8ee003e98b5dcba60da06052",
          "md5": "002a0e05285f084b777990bdc10927d3",
          "sha256": "a1733eb99a4a5a5c13565f39e440e0f77c59558e97b2fd8190a07f5a820cf062"
        },
        "downloads": -1,
        "filename": "sections-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "002a0e05285f084b777990bdc10927d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 46563,
        "upload_time": "2021-07-04T16:46:42",
        "upload_time_iso_8601": "2021-07-04T16:46:42.639075Z",
        "url": "https://files.pythonhosted.org/packages/bd/a1/05d80c1abbb3f40288a94b0b56b59121a60b8ee003e98b5dcba60da06052/sections-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bacfc75742db44486db32a7c53e88b3f356cc27ef1aa08686f11a19eaa01c3f2",
        "md5": "e4bb27f8215f5cf76e0e3e1993c3ddae",
        "sha256": "a87213d4031ccaa3ac2f303015cea227e15fa76454f14d9f36a7f1f6a9b61ca3"
      },
      "downloads": -1,
      "filename": "sections-0.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e4bb27f8215f5cf76e0e3e1993c3ddae",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 22412,
      "upload_time": "2021-07-04T16:46:40",
      "upload_time_iso_8601": "2021-07-04T16:46:40.387823Z",
      "url": "https://files.pythonhosted.org/packages/ba/cf/c75742db44486db32a7c53e88b3f356cc27ef1aa08686f11a19eaa01c3f2/sections-0.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bda105d80c1abbb3f40288a94b0b56b59121a60b8ee003e98b5dcba60da06052",
        "md5": "002a0e05285f084b777990bdc10927d3",
        "sha256": "a1733eb99a4a5a5c13565f39e440e0f77c59558e97b2fd8190a07f5a820cf062"
      },
      "downloads": -1,
      "filename": "sections-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "002a0e05285f084b777990bdc10927d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 46563,
      "upload_time": "2021-07-04T16:46:42",
      "upload_time_iso_8601": "2021-07-04T16:46:42.639075Z",
      "url": "https://files.pythonhosted.org/packages/bd/a1/05d80c1abbb3f40288a94b0b56b59121a60b8ee003e98b5dcba60da06052/sections-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}