{
  "info": {
    "author": "思文伟",
    "author_email": "hotswwkyo@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Chinese (Simplified)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# unittest_seven_helper\n 基于unittest开发的测试框架，更友好、更灵活的编写、管理与运行测试，生成更加美观的独立单文件HTML报告。内置参数化测试数据存取方案，省去设计的烦恼，节省更多的时间，从而更快的投入到编写用例阶段。\n * notes\n    > 为方便使用，已更名为[stest](https://pypi.org/project/stest/)。该版本相当于stest的1.0.0版，后续的更新只会更新到stest\n * 现已支持的功能\n    >* 支持命名测试方法且不与方法的doc string（文档字符串）冲突\n    >* 支持设置测试方法编写人，修改人，最后修改人以及最后一次修改时间等额外记录信息\n    >* 支持设置测试方法的执行顺序\n    >* 支持参数化功能\n    >* 支持数据驱动测试\n    >* 支持设置用例依赖\n    >* 内置参数化数据存取方案(使用excel（xlsx或xls格式）存取和管理维护参数化测试数据，简洁直观，易于修改维护)\n    >* 支持生成更加简洁美观且可作为独立文件发送的HTML测试报告\n    >    ![](https://github.com/hotswwkyo/unittest_seven_helper/blob/main/img/htmlreport.png)\n\n\n## 安装\n\npip方式安装\n> pip install unittest_seven_helper\n\n源码方式安装(注意以管理员方式执行)\n> python setup.py install\n\n## 执行测试\n命令行执行\n> python -m unittest_seven_helper -v -html D:\\temp\\tms_apitest.html calculation_test.py\n\n查看命令行参数\n> python -m unittest_seven_helper -h\n\n代码中调unittest_seven_helper.main()执行\n\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n\n    import unittest_seven_helper\n    from unittest_seven_helper import AbstractTestCase\n    from unittest_seven_helper import Test as testcase\n\n\n    def get_testdatas(test_class_name, test_method_name, *args, **kwargs):\n\n        return [[1,2,3], [3,4,7]]\n\n\n    class Demo1Test(AbstractTestCase):\n\n        @testcase(priority=1, enabled=True, data_provider=get_testdatas, author='思文伟', description='两数加法测试01')\n        def integer_addition_02(self, number_1, number_2, expected):\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n    if __name__ == '__main__':\n        # Demo1Test.run_test()\n        unittest_seven_helper.main()\n    ```\n\n## 快速开始\n\n1. 导入抽象测试类（AbstractTestCase）和测试方法装饰器（Test）\n2. 编写继承自AbstractTestCase的测试子类，子类提供以下实用方法\n    - collect_testcases()\n        > 获取类下所有使用Test装饰的enable为True，并根据priority排序后的测试用例对象列表\n    - build_self_suite()\n        > 构建该类测试用例构成的测试套件\n    - run_test()\n        > 执行该类所有使用Test装饰的enable为True，并根据priority排序后的测试用例\n3. 使用Test标记测试方法。\n4. 直接调用测试类的run_test()执行测试\n* 简单示例\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n\n    from unittest_seven_helper import AbstractTestCase\n    from unittest_seven_helper import Test as testcase\n\n\n    def get_testdatas(test_class_name, test_method_name, *args, **kwargs):\n\n        return [[1,2,3], [3,4,7]]\n\n\n    class Demo1Test(AbstractTestCase):\n\n        @testcase(priority=1, enabled=True, data_provider=get_testdatas, author='思文伟', description='两数加法测试01')\n        def integer_addition_02(self, number_1, number_2, expected):\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n    if __name__ == '__main__':\n        Demo1Test.run_test()\n    ```\n\n* 综合示例（来自源码包下的samples/calculation_test.py）\n\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    @Date: 2021/03/30 15:49:32\n    '''\n    import os\n\n    from unittest_seven_helper import GLOBAL_CONFIG\n    from unittest_seven_helper import AbstractTestCase\n    from unittest_seven_helper import Test as testcase\n\n\n    class DataProvider01(object):\n        def get_testdatas(self, testclass, testmethod, *args, **kwargs):\n\n            datas = [\n                {'加数1':1,'加数2':2,'预期':3},\n                {'加数1':4,'加数2':5,'预期':9}\n            ]\n            return datas\n\n    class DataProvider02(object):\n        def get_testdatas(self, testclass, testmethod, *args, **kwargs):\n\n            datas = [\n                [{'加数1':7}, {'加数2':5}, {'预期':12}],\n                [{'加数1':10}, {'加数2':5}, {'预期':15}]\n            ]\n            return datas\n\n    TEST_DATA_FILE_DIRPATH = os.path.dirname(os.path.abspath(__file__))\n\n    # 全局配置 配置默认内置参数数据提供者 测试数据文件所在的目录路径\n    # GLOBAL_CONFIG.seven_data_provider_data_file_dir = r'E:\\sw'\n\n\n    class CalculationTest(AbstractTestCase):\n        \"\"\"数学运算测试\"\"\"\n        @classmethod\n        def setUpClass(cls):\n            pass\n\n        def setUp(self):\n            pass\n\n        @testcase(priority=1, enabled=True, data_provider=DataProvider01().get_testdatas, author='思文伟', description='整数加法测试01')\n        def integer_addition_01(self, testdata):\n            \"\"\"自定义数据提供者 - 测试方法一个参数化示例\"\"\"\n\n            number_1 = testdata.get(\"加数1\")\n            number_2 = testdata.get(\"加数2\")\n            expected = testdata.get(\"预期\")\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n        @testcase(priority=2, enabled=True, data_provider=DataProvider02().get_testdatas, author='思文伟', description='整数加法测试02')\n        def integer_addition_02(self, testdata_01, testdata_02, testdata_03):\n            \"\"\"自定义数据提供者 - 测试方法多个参数化示例\"\"\"\n\n            number_1 = testdata_01.get(\"加数1\")\n            number_2 = testdata_02.get(\"加数2\")\n            expected = testdata_03.get(\"预期\")\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n        @testcase(priority=3, enabled=True, author='思文伟', description='整数减法测试01')\n        def integer_subtraction_01(self):\n            \"\"\"不参数化示例\"\"\"\n\n            number_1 = 21\n            number_2 = 10\n            result = number_1 - number_2\n            expected = 11\n            self.assertEqual(result, expected)\n\n        @testcase(priority=4, enabled=True, author='思文伟', data_provider_kwargs={'data_file_dir_path':TEST_DATA_FILE_DIRPATH}, description='整数减法测试02')\n        def integer_subtraction_02(self, testdata):\n            \"\"\"使用内置的数据提供者 - 传入测试数据文件所在的目录路径\"\"\"\n\n            number_1 = testdata.get(\"减数1\")\n            number_2 = testdata.get(\"减数2\")\n            expected = testdata.get(\"预期\")\n\n            result = int(number_1) - int(number_2)\n            self.assertEqual(result, int(expected))\n\n        @testcase(priority=5, enabled=True, author='思文伟', description='整数减法测试03')\n        def integer_subtraction_03(self,testdata):\n            \"\"\"使用内置的数据提供者 - 不传入测试数据文件所在的目录路径,\n            则会检测GLOBAL_CONFIG.seven_data_provider_data_file_dir 是否设置\n            ，没有设置则会使用该方法所属的测试类所在的模块目录路径作为测试数据文件的查找目录\n            \"\"\"\n\n            number_1 = testdata.get(\"减数1\")\n            number_2 = testdata.get(\"减数2\")\n            expected = testdata.get(\"预期\")\n\n            result = int(number_1) - int(number_2)\n            self.assertEqual(result, int(expected))\n\n        def tearDown(self):\n            pass\n\n        @classmethod\n        def tearDownClass(cls):\n            pass\n\n    if __name__ == '__main__':\n        CalculationTest.run_test()\n\n    ```\n\n## Test参数说明\n\n| 参数 | 类型 | 描述 |\n| ---- | ---- | ---- |\n| author | 字符串 | 用例编写者 |\n| editors | 列表 | 修改者列表 |\n| dname | 字符串或列表 | 用于给用例起一个用于设置依赖的名称 |\n| depends | 列表 | 用于设置用例依赖，是一个用例依赖列表 |\n| groups | 列表 | 方法所属的组的列表|\n| enabled | 布尔值 | 是否启用执行该测试方法 |\n| priority | 整数 | 测试方法的执行优先级，数值越小执行越靠前 |\n| alway_run | 布尔值 | 如果设置为true，则此测试方法将始终运行，即使它依赖于失败的方法也是如此 --- 该功能暂未实现 |\n| description | 字符串 | 测试用例名称 |\n| data_provider | object | 测试方法的参数化数据提供者，默认值是None，AbsractDataProvider的子类或者一个可调用的对象，返回数据集列表（当测试方法只有一个参数化时，应返回一维列表，多个参数化时返回二维列表） |\n| data_provider_args | 元祖 | 数据提供者变长位置参数(args) |\n| data_provider_kwargs | 字典 | 数据提供者变长关键字参数(kwargs) |\n| last_modifyied_by | 字符串 | 最后修改者 |\n| last_modified_time | 字符串 | 最后一次修改的时间 |\n| enable_default_data_provider | 布尔值 | 是否使用内置数据提供者(SevenDataProvider)，默认值是True，未设置data_provider，且该值为True 才会使用内置数据提供者(SevenDataProvider) |\n\n## 用例依赖设置\n用例依赖于其它用例成功后执行，如用例所依赖的用例不成功或没有执行，则该用例会被设置为失败。在实际当中，有时会需要用到两个或多个测试用例依赖运行，比如这一种场景：添加和删除设备，如果只有一台设备，那么添加和删除这两个用例就会共用测试数据，就会产生依赖（即：删除设备用例依赖于添加设备用例成功后执行）\n\n* dname和depends参数使用示例\n\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    @Date: 2021/09/29\n    '''\n\n    import unittest_seven_helper\n    from unittest_seven_helper import AbstractTestCase\n    from unittest_seven_helper import Test as testcase\n\n\n    class DependTest(AbstractTestCase):\n        \"\"\"依赖设置测试\"\"\"\n        @classmethod\n        def setUpClass(cls):\n            pass\n\n        def setUp(self):\n            pass\n\n        @testcase(priority=1, enabled=True, author='思文伟', description='dtest1', depends=['vnctest.py'])\n        def dtest1(self):\n            \"\"\" 用例依赖于vnctest.py模块中的所有用例 \"\"\"\n\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest2', depends=['vnctest.py.LoginTest'])\n        def dtest2(self):\n            \"\"\" 用例依赖于vnctest.py模块中LoginTest类的所有用例 \"\"\"\n\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest3', depends=['vnctest.py.LoginTest.login'])\n        def dtest3(self):\n            \"\"\" 用例依赖于vnctest.py模块中LoginTest类的login用例 \"\"\"\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest4', dname='four')\n        def dtest4(self):\n            \"\"\" 命名用例为 four \"\"\"\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest5', depends=['dtest6'])\n        def dtest5(self):\n            \"\"\" 用例依赖于当前类的dtest6用例 \"\"\"\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest6', depends=['four'])\n        def dtest6(self):\n            \"\"\" 用例依赖于当前类的命名为four的dtest4用例 \"\"\"\n            pass\n\n        def tearDown(self):\n            pass\n\n        @classmethod\n        def tearDownClass(cls):\n            pass\n\n\n    if __name__ == '__main__':\n        unittest_seven_helper.main()\n\n    ```\n\n## 参数化数据提供者(data provider)\n\n 测试方法装饰器Test会调用数据提供者(data provider), 传测试类名称和测试方法名称给data provider的前两个固定位置参数, data_provider_args参数传给data provider的变长位置参数，data_provider_kwargs参数传给data provider的变长关键字参数\n\n### 内置参数化数据提供者 - SevenDataProvider\n\n实现了参数化测试数据存取方案，使用excel（xlsx或xls格式）存取和管理维护参数化测试数据，简洁直观，易于修改维护。数据在文件中以用例数据块的方式存储。\n\n* 数据块定义：\n    >- 所有行中的第一列是标记列，第一行第一列是数据块开始标记\n    >- 第一行: 用例名称信息(标记列的下一列是用例方法名称列，之后是用例名称列)\n    >- 第二行: 用例数据标题\n    >- 第三行 开始 每一行都是一组完整的测试数据直至遇见空行或者下一个数据块\n\n    >![](https://github.com/hotswwkyo/unittest_seven_helper/blob/main/img/testcase_data_excel_file.png)\n\n* kwargs变长关键字参数接收参数:\n    >- data_file_name - 数据文件名称\n    >- data_file_dir_path - 数据文件所在目录路径\n    >- sheet_name_or_index - 数据文件中数据所在的工作表索引(从0开始)或名称\n\n* 返回值\n    测试数据行信息字典构成的一维列表, 如：\n    > [{\"减数1\": \"36\", \"减数2\": \"10\", \"预期\": \"26\"}, {\"减数1\": \"57\", \"减数2\": \"30\", \"预期\": \"27\"}]\n    >![](https://github.com/hotswwkyo/unittest_seven_helper/blob/main/img/testcase_data_excel_file.png)\n\n* 使用\n    框架是默认启用内置的数据提供者（SevenDataProvider）所以不需要做任何设置，返回值是测试数据行信息字典构成的一维列表，所以测试方法统一接收一个参数化参数\n    - 启用条件\n        >- 测试方法装饰器Test参数enable_default_data_provider 为True，默认值是True\n        >- 测试方法装饰器Test参数data_provider 为None（即未设置数据提供者），默认值是True为None\n\n    - 数据文件存放目录\n        通过测试方法装饰器Test参数data_provider_kwargs传入data_file_dir_path，如果没有传入，则会去检查全局配置unittest_seven_helper.GLOBAL_CONFIG.seven_data_provider_data_file_dir是否设置，设置了则取该值作为参数化测试数据文件的查找目录，否则以被装饰的测试方法所在的模块目录作为查找目录\n        > data_provider_kwargs={'data_file_dir_path':'E:\\\\mytestdatas'}\n\n    - 数据文件名\n        通过测试方法装饰器Test参数data_provider_kwargs传入data_file_name，如果没有传入，则取测试方法所属的测试类名作为测试数据文件名称\n        > data_provider_kwargs={'data_file_name':'mytest'}\n\n* 示例\n```python\nclass CalculationTest(AbstractTestCase):\n        @classmethod\n        def setUpClass(cls):\n            pass\n\n        def setUp(self):\n            pass\n\n        @testcase(priority=4, enabled=True, author='思文伟', data_provider_kwargs={'data_file_dir_path':'E:\\\\alltest'}, description='整数减法测试02')\n        def integer_subtraction_02(self, testdata):\n            \"\"\"使用内置的数据提供者 - 传入测试数据文件所在的目录路径\"\"\"\n\n            number_1 = testdata.get(\"减数1\")\n            number_2 = testdata.get(\"减数2\")\n            expected = testdata.get(\"预期\")\n\n            result = int(number_1) - int(number_2)\n            self.assertEqual(result, int(expected))\n\n        @testcase(priority=5, enabled=True, author='思文伟', description='整数减法测试03')\n        def integer_subtraction_03(self,testdata):\n            \"\"\"使用内置的数据提供者 - 不传入测试数据文件所在的目录路径,\n            则会检测GLOBAL_CONFIG.seven_data_provider_data_file_dir 是否设置\n            ，没有设置则会使用该方法所属的测试类所在的模块目录路径作为测试数据文件的查找目录\n            \"\"\"\n\n            number_1 = testdata.get(\"减数1\")\n            number_2 = testdata.get(\"减数2\")\n            expected = testdata.get(\"预期\")\n\n            result = int(number_1) - int(number_2)\n            self.assertEqual(result, int(expected))\n\n        def tearDown(self):\n            pass\n\n        @classmethod\n        def tearDownClass(cls):\n            pass\n\n    if __name__ == '__main__':\n        CalculationTest.run_test()\n```\n\n\n### 自定义参数化数据提供者\n\n自定义参数化数据提供者，可以是AbsractDataProvider的子类或者一个可调用的对象，返回数据集列表（当测试方法只有一个参数化时，应返回一维列表，多个参数化时返回二维列表），必须接收两个固定位置参数，变长位置参数(args)和变长关键字参数(kwargs)，固定位置参数，第一个是测试类名，第二个是测试方法名。\n\n* 返回值\n    > 返回测试方法的参数化测试数据列表\n    >- 测试方法只有一个参数化时, 返回一维列表 如: demotest(self, testdata), data provider 返回 [{'name':'zhansan', 'age':17}, {'name':'xiaoming', 'age':18}]，方法demotest会执行两次，第一次参数testdata是：{'name':'zhansan', 'age':17}，\n    第二次则是：{'name':'xiaoming', 'age':18}\n    >- 测试方法有多个参数化时，返回二维列表 如: demotest(self, name, age), data provider 返回 [['zhansan', 17], ['xiaoming', 18]], 方法demotest会执行两次，第一次参数name和age的值分别是：'zhansan', 18，\n    第二次则是：'xiaoming', 18\n\n* 实现方式\n    >- 继承AbsractDataProvider，实现get_testdatas(self, test_class_name, test_method_name, *args, **kwargs)方法\n    >- 其他类型的类似接收以下参数的可调用对象 ------> get_testdatas(test_class_name, test_method_name, *args, **kwargs)\n\n* 使用\n    > 通过测试方法装饰器Test参数data_provider来设置为自己的数据提供者（data provider）, 参数data_provider_args和data_provider_kwargs分别用来传给数据提供者（data provider）对应的变长位置参数(args)和变长关键字参数(kwargs)\n\n* 示例\n    > 继承自AbsractDataProvider的数据提供者示例(来自内置数据提供者 - SevenDataProvider)\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    '''\n\n    import os\n    from unittest_seven_helper import utils\n    from unittest_seven_helper.attrs_marker import AttributeMarker\n    from unittest_seven_helper.abstract_data_provider import AbsractDataProvider\n    from unittest_seven_helper.excel_file_reader import TestCaseExcelFileReader as ExcelReader\n\n\n    class SevenDataProvider(AbsractDataProvider):\n\n        FILE_EXT = AttributeMarker(\".xlsx\", True, \"数据文件拓展名\")\n        BLOCK_FLAG = AttributeMarker(\"用例名称\", True, \"用例分隔标记\")\n        DEFAULT_SHEET_INDEX = AttributeMarker(0, True, \"默认从索引为0的工作表读取数据\")\n\n        # get_datasets方法变长字典参数kwargs接收的参数的键名\n        PARAM_DATA_FILE_NAME = AttributeMarker(\"data_file_name\", True, \"数据文件名称参数\")\n        PARAM_DATA_FILE_DIR_PATH = AttributeMarker(\"data_file_dir_path\", True, \"数据文件所在目录路径参数\")\n        PARAM_SHEET_NAME_OR_INDEX = AttributeMarker(\"sheet_name_or_index\", True, \"数据文件中数据所在的工作表索引(从0开始)或名称参数\")\n        KWARGS_NAMES = AttributeMarker((PARAM_DATA_FILE_NAME, PARAM_DATA_FILE_DIR_PATH, PARAM_SHEET_NAME_OR_INDEX), True, \"接收的参数名\")\n\n        def _get_data_file_name(self, kwargs, default_value=None):\n\n            param = self.PARAM_DATA_FILE_NAME\n            filename = kwargs.get(param, default_value)\n            if utils.is_blank_space(filename):\n                raise ValueError(\"数据文件名必须是字符串类型且不能为空\")\n            return filename\n\n        def _get_data_file_dir_paht(self, kwargs):\n\n            param = self.PARAM_DATA_FILE_DIR_PATH\n            if param not in kwargs.keys():\n                raise AttributeError(\"没有传入数据文件目录\")\n            dirpath = kwargs[param]\n            if utils.is_blank_space(dirpath):\n                raise ValueError(\"数据文件目录必须是字符串类型且不能为空\")\n            return dirpath\n\n        def _get_sheet_name_or_index(self, kwargs):\n            return kwargs.get(self.PARAM_SHEET_NAME_OR_INDEX, self.DEFAULT_SHEET_INDEX)\n\n        def _build_file_full_path(self, data_file_dir_path, data_file_name):\n            \"\"\"构建完整的excel数据文件路径\n\n            Args:\n                data_file_dir_path: 文件目录\n                data_file_name: 文件名称\n            \"\"\"\n\n            name = data_file_name\n            ext = self.FILE_EXT\n            if utils.is_blank_space(data_file_dir_path):\n                raise ValueError(\"传入的数据文件目录路径不能为空：{}\".format(data_file_dir_path))\n            dir_path = data_file_dir_path\n            if name and not utils.is_blank_space(name):\n                full_name = name if name.endswith(ext) else name + ext\n            else:\n                raise ValueError(\"无效数据文件名称：{}\".format(name))\n            return os.path.join(dir_path, full_name)\n\n        def get_testdatas(self, test_class_name, test_method_name, *args, **kwargs):\n            \"\"\"根据文件名从指定的excel文件(xlsx文件格式)读取出数据, 返回一维列表，每个元素是excel表中一行测试数据信息字典.\n            eg: [{\"减数1\": \"36\", \"减数2\": \"10\", \"预期\": \"26\"}, {\"减数1\": \"57\", \"减数2\": \"30\", \"预期\": \"27\"}]\n\n            Args:\n                kwargs:\n                    file_name 数据文件名, 不提供则测试类名称作为文件名\n                    file_dir_path 数据文件所在目录路径\n                    sheet_index_or_name Excel工作表索引(从0开始)或名称,不提供则默认取索引0的工作表\n            \"\"\"\n\n            datasets = []\n\n            filename = self._get_data_file_name(kwargs, test_class_name)\n            dirpath = self._get_data_file_dir_paht(kwargs)\n            full_file_path = self._build_file_full_path(dirpath, filename)\n\n            reader = ExcelReader(full_file_path, testcase_block_separators=self.BLOCK_FLAG, sheet_index_or_name=self._get_sheet_name_or_index(kwargs))\n            datas_blocks = reader.load_testcase_data()\n            for block in datas_blocks:\n                if block.name == test_method_name:\n                    for row in block.datas:\n                        line = {}\n                        for cell in row:\n                            for title, value in cell.items():\n                                if title in line.keys():\n                                    continue\n                                else:\n                                    line[title] = value\n                        datasets.append(line)\n                    break\n            return datasets\n\n\n    class CalculationTest(AbstractTestCase):\n        @classmethod\n        def setUpClass(cls):\n            pass\n\n        def setUp(self):\n            pass\n\n        @testcase(priority=1, enabled=True, data_provider=SevenDataProvider, data_provider_kwargs={'data_file_dir_path':'E:\\\\mytestdatas'}, author='思文伟', description='整数加法测试01')\n        def integer_addition_01(self, testdata):\n            \"\"\"自定义数据提供者 - 测试方法一个参数化示例\"\"\"\n\n            number_1 = testdata.get(\"加数1\")\n            number_2 = testdata.get(\"加数2\")\n            expected = testdata.get(\"预期\")\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n        def tearDown(self):\n            pass\n\n        @classmethod\n        def tearDownClass(cls):\n            pass\n\n    if __name__ == '__main__':\n        CalculationTest.run_test()\n\n    ```\n\n    > 非AbsractDataProvider子类数据提供者示例\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    '''\n\n    from unittest_seven_helper import AbstractTestCase\n    from unittest_seven_helper import Test as testcase\n\n\n    class Demo1DataProvider(object):\n\n        def get_testdatas(self, test_class_name, test_method_name, *args, **kwargs):\n\n            return [[1,2,3],[3,4,7]]\n\n\n    class Demo1Test(AbstractTestCase):\n\n        @testcase(priority=1, enabled=True, data_provider=Demo1DataProvider().get_testdatas, author='思文伟', description='两数加法测试01')\n        def integer_addition_02(self, number_1, number_2, expected):\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n    if __name__ == '__main__':\n\n        Demo1Test.run_test()\n    ```\n\n    > 函数数据提供者示例\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    '''\n\n    from unittest_seven_helper import AbstractTestCase\n    from unittest_seven_helper import Test as testcase\n\n\n    def get_testdatas(test_class_name, test_method_name, *args, **kwargs):\n\n        return [[1,2,3], [3,4,7]]\n\n\n    class Demo1Test(AbstractTestCase):\n\n        @testcase(priority=1, enabled=True, data_provider=get_testdatas, author='思文伟', description='两数加法测试01')\n        def integer_addition_02(self, number_1, number_2, expected):\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n    if __name__ == '__main__':\n\n        Demo1Test.run_test()\n    ```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hotswwkyo/unittest_seven_helper",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unittest-seven-helper",
    "package_url": "https://pypi.org/project/unittest-seven-helper/",
    "platform": "",
    "project_url": "https://pypi.org/project/unittest-seven-helper/",
    "project_urls": {
      "Homepage": "https://github.com/hotswwkyo/unittest_seven_helper"
    },
    "release_url": "https://pypi.org/project/unittest-seven-helper/2.1.0/",
    "requires_dist": [
      "xlrd (==1.2.0)"
    ],
    "requires_python": ">=3",
    "summary": "基于unittest开发的测试框架，更友好、更灵活的编写、管理与运行测试，生成更加美观的独立单文件HTML报告。内置参数化测试数据存取方案，省去设计的烦恼，节省更多的时间，从而更快的投入到编写用例阶段",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11650745,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "434d07f727b5387034981754b77b07116ff61b82b2182ce3ac62ad1512add358",
          "md5": "4ded3bb285ed92e83b74c381e98c6f82",
          "sha256": "d419c31818bb1368e913e3f0deafb73b2876774cfc76b55444d2dea31b1e2d0e"
        },
        "downloads": -1,
        "filename": "unittest_seven_helper-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ded3bb285ed92e83b74c381e98c6f82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 38623,
        "upload_time": "2021-04-28T10:32:49",
        "upload_time_iso_8601": "2021-04-28T10:32:49.622834Z",
        "url": "https://files.pythonhosted.org/packages/43/4d/07f727b5387034981754b77b07116ff61b82b2182ce3ac62ad1512add358/unittest_seven_helper-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f02430f76658b31ff62a9fc65c76fbd9fccd09069c618e8f217f25fd2b0cdf0d",
          "md5": "0830fb84cf9140110cec3c8d24794b95",
          "sha256": "3fa85d3045a2d31a8a8b3e00afd85c418d44d358582af0b67305ce3d08cca18e"
        },
        "downloads": -1,
        "filename": "unittest_seven_helper-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0830fb84cf9140110cec3c8d24794b95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 39685,
        "upload_time": "2021-04-28T10:32:51",
        "upload_time_iso_8601": "2021-04-28T10:32:51.397489Z",
        "url": "https://files.pythonhosted.org/packages/f0/24/30f76658b31ff62a9fc65c76fbd9fccd09069c618e8f217f25fd2b0cdf0d/unittest_seven_helper-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a51c7588277b5075a3be7d194cf65c6526ed4a54b78665fa7d0d8de621727a78",
          "md5": "d1c52384a16e0900762c4667db9517b6",
          "sha256": "52748911919d191cc514fc35f0c4a67fb024c8a5d1fa01bb0039d59daaeff0e3"
        },
        "downloads": -1,
        "filename": "unittest_seven_helper-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1c52384a16e0900762c4667db9517b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 209011,
        "upload_time": "2021-09-19T04:13:46",
        "upload_time_iso_8601": "2021-09-19T04:13:46.441320Z",
        "url": "https://files.pythonhosted.org/packages/a5/1c/7588277b5075a3be7d194cf65c6526ed4a54b78665fa7d0d8de621727a78/unittest_seven_helper-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47c30b5b645ed269bb74395fd166f2faaa819a11798f98488a86d483ae82bdd9",
          "md5": "45997f3e4ea19eea251e3542528502d6",
          "sha256": "16324cfb5c41c21ca1a1ecd188061ea7930977b1071e695f85004b77a346b41e"
        },
        "downloads": -1,
        "filename": "unittest_seven_helper-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45997f3e4ea19eea251e3542528502d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 205775,
        "upload_time": "2021-09-19T04:13:48",
        "upload_time_iso_8601": "2021-09-19T04:13:48.392641Z",
        "url": "https://files.pythonhosted.org/packages/47/c3/0b5b645ed269bb74395fd166f2faaa819a11798f98488a86d483ae82bdd9/unittest_seven_helper-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "969d964c566668843b18979f33e428c878acc17e7379fbc81f9b403bcfad8c0b",
          "md5": "b5daed3482794be308c047f57d876deb",
          "sha256": "c5dea512106c42c54eb20b649a5953cb394b16f22cf45524ede5788337f21434"
        },
        "downloads": -1,
        "filename": "unittest_seven_helper-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5daed3482794be308c047f57d876deb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 209001,
        "upload_time": "2021-09-19T04:31:10",
        "upload_time_iso_8601": "2021-09-19T04:31:10.303349Z",
        "url": "https://files.pythonhosted.org/packages/96/9d/964c566668843b18979f33e428c878acc17e7379fbc81f9b403bcfad8c0b/unittest_seven_helper-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a123c5572c7a19a2f4992a6aeb39c8e1ea75eea2c1654ccdc1f9d24b60df0fb5",
          "md5": "ab133c3f1127718dc3707229c0ec2a84",
          "sha256": "b9f5e82ca494b0bbc00e507d8acc15ba36363cdbc678fe1bc989c3ef263b2663"
        },
        "downloads": -1,
        "filename": "unittest_seven_helper-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ab133c3f1127718dc3707229c0ec2a84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 205768,
        "upload_time": "2021-09-19T04:31:12",
        "upload_time_iso_8601": "2021-09-19T04:31:12.520748Z",
        "url": "https://files.pythonhosted.org/packages/a1/23/c5572c7a19a2f4992a6aeb39c8e1ea75eea2c1654ccdc1f9d24b60df0fb5/unittest_seven_helper-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5f29c164a8acf7d0ac851b4157228824a8256599e5defa050c264843ba29f6e",
          "md5": "fd943b119d2423e7f72b522e440691aa",
          "sha256": "6d3111cdf685f10fee62d6abbb5b610cf012beb5b720a7046088faf6b5ab22bf"
        },
        "downloads": -1,
        "filename": "unittest_seven_helper-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd943b119d2423e7f72b522e440691aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 216982,
        "upload_time": "2021-10-07T05:08:38",
        "upload_time_iso_8601": "2021-10-07T05:08:38.046737Z",
        "url": "https://files.pythonhosted.org/packages/f5/f2/9c164a8acf7d0ac851b4157228824a8256599e5defa050c264843ba29f6e/unittest_seven_helper-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fdaa934f49f4cf8c4f20e4adecd879c66da4960ac101943a6f44d9a873c8573",
          "md5": "11143903c4fd68ee5163aeedb7840fd0",
          "sha256": "ca741e0b007e92acaae7ae1ec306a718a3812ede5db4e4bc408d7e7edcd38605"
        },
        "downloads": -1,
        "filename": "unittest_seven_helper-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "11143903c4fd68ee5163aeedb7840fd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 212634,
        "upload_time": "2021-10-07T05:08:39",
        "upload_time_iso_8601": "2021-10-07T05:08:39.625173Z",
        "url": "https://files.pythonhosted.org/packages/3f/da/a934f49f4cf8c4f20e4adecd879c66da4960ac101943a6f44d9a873c8573/unittest_seven_helper-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5f29c164a8acf7d0ac851b4157228824a8256599e5defa050c264843ba29f6e",
        "md5": "fd943b119d2423e7f72b522e440691aa",
        "sha256": "6d3111cdf685f10fee62d6abbb5b610cf012beb5b720a7046088faf6b5ab22bf"
      },
      "downloads": -1,
      "filename": "unittest_seven_helper-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fd943b119d2423e7f72b522e440691aa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 216982,
      "upload_time": "2021-10-07T05:08:38",
      "upload_time_iso_8601": "2021-10-07T05:08:38.046737Z",
      "url": "https://files.pythonhosted.org/packages/f5/f2/9c164a8acf7d0ac851b4157228824a8256599e5defa050c264843ba29f6e/unittest_seven_helper-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fdaa934f49f4cf8c4f20e4adecd879c66da4960ac101943a6f44d9a873c8573",
        "md5": "11143903c4fd68ee5163aeedb7840fd0",
        "sha256": "ca741e0b007e92acaae7ae1ec306a718a3812ede5db4e4bc408d7e7edcd38605"
      },
      "downloads": -1,
      "filename": "unittest_seven_helper-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "11143903c4fd68ee5163aeedb7840fd0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 212634,
      "upload_time": "2021-10-07T05:08:39",
      "upload_time_iso_8601": "2021-10-07T05:08:39.625173Z",
      "url": "https://files.pythonhosted.org/packages/3f/da/a934f49f4cf8c4f20e4adecd879c66da4960ac101943a6f44d9a873c8573/unittest_seven_helper-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}