{
  "info": {
    "author": "Illia Shkroba",
    "author_email": "is@pjwstk.edu.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Typing :: Typed"
    ],
    "description": "# NOnion\n\nNOnion is a Python package that provides tools for Functional Programming. One of its aims is to eliminate nested function calls such as **z(g(f(x)))** which remind an __onion__.\n\n# Installing\n\n```bash\npip install nonion\n```\n\n# Tutorial\n\nNOnion contains a set of functions and types that __might__ simplify your workflow with Functional Programming in Python. Those tools are designed (but not limited) to work with *Function* and *Pipeline* wrappers.\n\n* *Function* - a wrapper of **any** Python *Callable*,\n* *Pipeline* - a wrapper of **any** Python *Iterable*.\n\nIt is important to understand that *NOnion* provides tools used for FP in context of Python. Because it is impossible to fully implement some constructs from FP languages in Python, *NOnion* provides tools that resemble some of those constructs.\n\n## *Function*\n\nIn order to create a *Function*, you simply pass any *Callable*:\n\n```python\nf = Function(lambda x: x + 1)\nf(5) # 6\n```\n\nYou can also create an identity *Function*:\n\n```python\ng = Function()\n```\n\nNotice, that a *Function* takes exactly single value and returns exactly single value.\n\n### *compose*\n\nA ``Function composition\" defined as $( f \\circ g )(x) = f(g(x))$ could be done in the following way:\n\n```python\nz = f @ g\n\n# alternatively\n\nz = f.compose(g)\n```\n\nYou can also use *compose* several times:\n\n```python\nz = f @ g @ f\n```\n\nInstead of wrapping each *Callable* with a *Function*, you can wrap only __first__ *Callable* and use *compose* on the rest.\n\n```python\ndef f(x):\n  return x + 1\n\ng = Function() @ (lambda x: x * 2) @ f\ng(5) # 12\n```\n\n### *then*\n\nFunction composition sometimes might be hard to read, because you have to read it from right-to-left.\nIn order to achieve better readability, you can use *then*.\n\n```python\ng = Function() / (lambda x: x * 2) / f\ng(5) # 11\n\n# alternatively\n\ng = Function().then(lambda x: x * 2).then(f)\ng(5) # 11\n```\n\n### *fanout*\n\nIf you need to pass an argument to two functions, you can use *fanout*:\n\n```python\ng = Function() / (lambda x: x + 1) & (lambda x: x * 2)\ng(5) # (6, 10)\n\nmean = (Function() / sum & len) / star(op.truediv)\nmean([1, 2, 3]) # 2.0\n\n# alternatively\n\ng = Function().then(lambda x: x + 1).fanout(lambda x: x * 2)\ng(5) # (6, 10)\n\nmean = (Function().then(sum).fanout(len)).then(star(op.truediv))\nmean([1, 2, 3]) # 2.0\n```\n\n### *split*\n\nIf you need to apply first value of a pair to a first function and a second value of the pair to a second function, you can use *split*:\n\n```python\ng = Function() / (lambda x: x + 1) ^ (lambda x: x * 2)\ng((2, 3)) # (3, 6)\n\nteams = {\"team a\": [\"member 1\", \"member 2\"], \"team b\": [\"member 3\"]}\nf = Function() / str.capitalize ^ len\nfor t in teams.items():\n  print(f(t))\n\n# ('Team a', 2)\n# ('Team b', 1)\n\n# alternatively\n\ng = Function().then(lambda x: x + 1).split(lambda x: x * 2)\ng((2, 3)) # (3, 6)\n\nf = Function().then(str.capitalize).split(len)\nfor t in teams.items():\n  print(f(t))\n\n# ('Team a', 2)\n# ('Team b', 1)\n```\n\n### *call*\n\nSometimes you want to call a function ``inline'' after several compositions. In this case, you might use:\n\n```python\n(Function() / (lambda x: x * 2) / f)(5) # 11\n```\n\nBut it might be hard to read. Especially, when you mostly pass lambdas. A better way to call a function is by using:\n\n```python\nFunction() / (lambda x: x * 2) / f | 5 # 11\n```\n\n### *star* (function)\n\nSuppose, that you defined a function with multiple arguments such as:\n\n```python\ndef f(x, y):\n  return x + y * x\n```\n\nAnd you want to wrap that function using Function. In this case, you have to use *star*.\n\n```python\nFunction() @ star(f) | (1, 2) # 3\n```\n\n*star* simply passes arguments to a function using Python *\\** (star) operator.\n\n### *unstar* (function)\n\n*unstar* is the opposite function to *star*:\n\n```python\nnames = unstar(\", \".join)(\"Haskell Curry\", \"John Smith\", \"George Sand\")\nprint(names) # Haskell Curry, John Smith, George Sand\n```\n\n### *foreach*\n\nYou can also call a function for each value in some *Iterable* in the following way:\n\n```python\nys = Function() / (lambda x: x * 2) / (lambda x: x + 1) * range(5)\n\nfor y in ys:\n  print(y)\n\n# 1\n# 3\n# 5\n# 7\n# 9\n#\n```\n\n## *Pipeline*\n\nIn order to create a *Pipeline*, you simply pass any *Iterable*:\n\n```python\nxs = Pipeline(range(5))\n\n# notation abuse, do not use that:\n\nxs = Function() / Pipeline | range(5)\n```\n\nYou can also create an empty *Pipeline*:\n\n```python\nxs = Pipeline()\n```\n\nUnder the hood *Pipeline* is simply uses *iter* on a passed *Iterable*. It means, that if you will pass an *Iterable*, that could be exhausted, you iterate over *Pipeline* only once.\n\n```python\nxs = Pipeline(range(2))\n\nfor x in xs:\n  print(x)\n\n# 1\n# 2\n#\n\n# perfectly fine, because range(x) returns a special object\nfor x in xs:\n  print(x)\n\n# 1\n# 2\n#\n\nxs = Pipeline(x for x in range(2))\n\nfor x in xs:\n  print(x)\n\n# 1\n# 2\n#\n\n# xs already exhausted\nfor x in xs:\n  print(x)\n```\n\n### *map*\n\n*map* allows you to call a *Callable*, which takes a single value and returns a single value, on each value of the *Pipeline*.\n\n```python\nys = Pipeline(range(3)) / (lambda x: x + 1) / (lambda x: (x, x + 1)) / star(lambda x, y: x + y * x)\n\nfor y in ys:\n  print(y)\n\n# 3\n# 8\n# 15\n#\n\n# alternatively\n\nys = Pipeline(range(3)).map(lambda x: x + 1).map(lambda x: (x, x + 1)).map(star(lambda x, y: x + y * x))\n```\n\n### *filter*\n\n*filter* allows you to filter *Pipeline* values.\n\n```python\nys = Pipeline(range(3)) % (lambda x: x > 1)\n\nfor y in ys:\n  print(y)\n\n# 2\n#\n\n# alternatively\n\nys = Pipeline(range(3)).filter(lambda x: x > 1)\n```\n\n### *flatmap*\n\n*flatmap* allows you to call a *Callable*, which takes a single value and returns an *Iterable*, on each value of the *Pipeline* and flatten results into single *Pipeline*.\n\n```python\nys = Pipeline(range(2)) / (lambda x: x + 1) * (lambda x: (x, x + 1))\n\nfor y in ys:\n  print(y)\n\n# 1\n# 2\n# 2\n# 3\n#\n\n# alternatively\n\nys = Pipeline(range(2)).map(lambda x: x + 1).flatmap(lambda x: (x, x + 1))\n```\n\n### *apply*\n\n*apply* allows you to call a *Callable*, which takes an *Iterable* and returns an *Iterable*, on whole *Pipeline*.\n\n```python\nys = Pipeline(range(2)) / (lambda x: x + 1) // tuple # internally Pipeline now has a tuple\n\nfor y in ys:\n  print(y)\n\n# 1\n# 2\n#\n\n# now multiple itertations is possible\nfor y in ys:\n  print(y)\n\n# 1\n# 2\n#\n\n# alternatively\n\nys = Pipeline(range(2)).map(lambda x: x + 1).apply(tuple)\n```\n\n### *collect*\n\n*collect* allows you to call a *Callable*, which takes an *Iterable* and returns any single value, on whole *Pipeline*. The difference between *apply* and *collect* is that *collect* returns the result of a function instead of wrapping it with *Pipeline*.\n\n```python\nys = Pipeline(range(2)) / (lambda x: x + 1) >> tuple\nprint(ys)\n\n# (1, 2)\n#\n\n# alternatively\n\nys = Pipeline(range(2)).map(lambda x: x + 1).collect(tuple)\n```\n\nYou can also combine *collect* with any function which takes an *Iterator*:\n\n```python\nys = Pipeline(range(2)) / (lambda x: x + 1) >> next_\nprint(ys) # (1,)\n\nys = Pipeline(range(2)) % (lambda x: x == 5) >> next_\nprint(ys) # ()\n\nys = Pipeline(range(5)) >> shift(islice, 2)\n\nfor y in ys:\n  print(y)\n\n# 0\n# 1\n\n# alternatively you can use apply\n\nys = Pipeline(range(5)) // shift(islice, 2) | print\n\n# 0\n# 1\n```\n\n### *foreach*\n\n*foreach* allows you to call a *Callable*, which takes a single value, on each value of the *Pipeline*.\n\n```python\nPipeline(range(2)) / (lambda x: x + 1) | print\n\n# 1\n# 2\n#\n\n# alternatively\n\nPipeline(range(2)).map(lambda x: x + 1).foreach(print)\n```\n\n## *groupon*\n\n*groupon* is a function which takes a function *Callable[[X], Y]*, and returns some function which takes *Iterable[X]* and returns *Iterable[X]* grouped on *Callable[[X], Y]* function. The *groupon* function uses Python *groupby* function under the hood. *groupon* adds a grouping key using passed *Callable[[X], Y]* function and sorts values by that key before applying *groupby*.\n\n```python\nxs = -3, 1, 0, -1, 5\n\n(\n  Pipeline(xs)\n  // groupon(lambda x: x > 0)\n  / value(tuple)\n  | print\n)\n\n# (False, (-3, 0, -1))\n# (True, (1, 5))\n```\n\n## *nonion.tools*\n\n### *Either*\n\n*Either* is a type alias. *Either* is defined as follows:\n\n```python\nEither = Tuple[Maybe[X], Maybe[Y]]\n```\n\n*Either* can be used when you need to return either left (bad) value or a right (good) value:\n\n```python\ndef readline(path: str) -> Either[str, str]:\n  h: Maybe[IOBase] = try_(open)(path)\n\n  if not h:\n    return ((\"error occurred during open\",), ())\n\n  h, *_ = h\n  line = h.readline()\n  h.close()\n\n  return ((), line)\n\nerror, line = readline(\"requirements.txt\")\n\nif line:\n  print(*line)\nelse:\n  print(*error)\n```\n\nBecause *Either* is simply a type alias, it does not checks whether only left or only right value is passed.\n\n### *Maybe*\n\n*Maybe* is a type alias. *Maybe* resembles Haskell's *Maybe* in Python. *Maybe* is defined as follows:\n\n```python\nMaybe = Union[Tuple[X], Tuple[()]]\n```\n\nAs we can see *Maybe* is simply some *tuple* that might contain a single value or be an empty *tuple*.\nIt means that in order to initialize an *Maybe* you can simply write:\n\n```python\nx = () # empty Maybe\ny = (3,) # Maybe with value 3\n```\n\nYou can easily check whether an *Maybe* is empty:\n\n```python\ndef f(x: int) -> Maybe[int]:\n  return (x,) if x < 3 else ()\n\nx: Maybe[int] = f(5)\n\nif not x:\n  print(\"Maybe is empty\") # Maybe is empty\n```\n\nYou can also provide an alternative value if *Maybe* is empty and immediately try to unwrap the *Maybe*:\n\n```python\nx: Maybe[int] = f(5)\ny, *_ = x or (42,)\n\nprint(y) # 42\n```\n\n```python\n# alternatively\n\nx: Maybe[int] = f(1)\nz = x or (42,)\n\n# notice: if you pass an empty *z to a single argument function, you will get an error\nprint(*z) # 1\n```\n\nBecause *Maybe* is simply a *tuple* under the hood, you can apply any Python function (that operates on *tuple*) to an instance of an *Maybe*.\n\n### *as_catch*\n\n*as_catch* is simply:\n\n```python\n@curry\ndef as_catch(default: Callable[[X], Y], xys: Iterable[Tuple[X, Y]]) -> Callable[[X], Y]:\n  return catch(as_match(xys), default=default)\n```\n\nExample of *as_catch* usage:\n\n```python\nsuccessor: Callable[[int], int] = Pipeline(range(10)) // zipmapr(lambda x: x + 1) >> as_catch(lambda _: -1)\nprint(successor(1)) # 2\nprint(successor(100)) # -1\n```\n\n### *as_match*\n\n*as_match* is simply:\n\n```python\ndef as_match(xys: Iterable[Tuple[X, Y]]) -> Callable[[X], Maybe[Y]]:\n  x_to_y = dict(xys)\n\n  def lookup(x: X) -> Maybe[Y]:\n    return (x_to_y[x],) if x in x_to_y else ()\n\n  return lookup\n```\n\nExample of *as_match* usage:\n\n```python\nsuccessor: Callable[[int], Maybe[int]] = Pipeline(range(10)) // zipmapr(lambda x: x + 1) >> as_match\nprint(successor(1)) # (2,)\nprint(successor(100)) # ()\n```\n\n### *between*\n\n*between* is simply:\n\n```python\ndef between(low: float, high: float) -> Callable[[float], bool]:\n  return lambda x: low <= x and x <= high\n```\n\nExample of *between* usage:\n\n```python\nys = filter(between(3, 5), range(10))\nprint(tuple(ys)) # (3, 4, 5)\n```\n\n### *both*\n\n*both* is a function that takes a function *Callable[[X], Y]* and returns a function *Callable[[Tuple[X, X]], Tuple[Y, Y]]*. The returned function takes a pair and applies *Callable[[X], Y]* to both values.\n\n```python\nboth(lambda x: x + 1)((1, 2)) # (2, 3)\n```\n\n### *cache*\n\n*cache* is a decorator which returns a function that always returns a value that was returned in the first call.\n\n```python\ndef f(x: int) -> int:\n  return x + 5\n\ng = cache(f)\nprint(g(5)) # 10\nprint(g()) # 10\nprint(g(\"abc\", 1, {})) # 10\n\nh = cache(f)\nprint(h(7)) # 12\n```\n\n### *catch*\n\n*catch* is a function that resembles pattern-matching in Python. It takes some functions `*fs: Callable[..., Maybe[Y]]` with some catch-all function `default: Callable[..., Y]` and returns a function `Callable[..., Y]` which executes `fs` functions one by one until some function will return non-empty `Maybe[Y]`. If none of those functions will return a non-empty `Maybe[Y]`, the result of `default` function is returned.\n\n```python\n# let's say that we want to parse age ranges that we have in our data:\nage_ranges = (\n  \"10-20\",\n  \"20-30\",\n  \"30+\",\n  \"60+\",\n  \"invalid input\"\n)\n\n# we consider 30+ to be a valid range <30, 100)\n\ndef parse_range(x: str) -> Tuple[int, int]:\n  raw = x.split(\"-\")\n  low, high, *_ = map(int, raw)\n\n  return low, high\n\ndef parse_unbounded_range(x: str) -> Tuple[int, int]:\n  raw, *_ = x.split(\"+\")\n  return int(raw), 100\n\n# we will use <18, 100) as our default range\nparse = catch(\n  try_(parse_range),\n  try_(parse_unbounded_range),\n  default=lambda _: (18, 100)\n)\n\nfor x in age_ranges:\n  print(parse(x))\n\n# (10, 20)\n# (20, 30)\n# (30, 100)\n# (60, 100)\n# (18, 100)\n```\n\n### *compose*\n\n*compose* is an implementation of a ``Function composition\" defined as $( f \\circ g )(x) = f(g(x))$.\n\n```python\nxs = \"a\", \"ab\", \"c\"\nyxs = enumerate(xs)\n\np: Callable[[Tuple[int, str]], bool] = compose(lambda x: x.startswith(\"a\"), snd)\nfiltered: Iterable[Tuple[int, str]] = filter(p, yxs)\n\nys = map(fst, filtered)\nprint(tuple(ys)) # (0, 1)\n```\n\n### *cons*\n\n*cons* allows you to prepend value of type *X* to an *Iterable[X]*.\n\n```python\nprint(tuple(cons(1)((2, 3, 4, 5)))) # (1, 2, 3, 4, 5)\n```\n\n### *const*\n\n*const* is a function that takes a value of type *X* and returns a function of type *Callable[[Y], X]*. The returned function will ignore its argument and will return the value that was passed to *const*.\n\n```python\nprint(const(1)(\"abc\")) # 1\n```\n\n### *curry*\n\n*curry* is simply:\n\n```python\ndef curry(f: Callable[..., Y]) -> Callable[..., Y]:\n  return lambda *args, **kwargs: partial(f, *args, **kwargs)\n```\n\n### *cycle*\n\n*cycle* is a function which takes *Tuple[X, ...]* and returns *Iterable[X]*. *Iterable[X]* is created by repeatedly yielding elements from passed *Tuple[X, ...]*.\n\n```python\nxs = take(10)(cycle([1, 2, 3]))\nprint(tuple(xs)) # (1, 2, 3, 1, 2, 3, 1, 2, 3, 1)\n```\n\n### *drop*\n\n*drop* is simply:\n\n```python\ndef drop(n: int) -> Callable[[Iterable[X]], Iterable[X]]:\n  return (lambda xs: islice(xs, n, None)) if n > 0 else (lambda _: ())\n```\n\nExample of *drop* usage:\n\n```python\nxs = drop(1)(range(3))\nprint(tuple(xs)) # (1, 2)\n\nxs = islice(range(3), 1, None)\nprint(tuple(xs)) # (1, 2)\n```\n\n### *either*\n\n*either* is a function that takes a function of type *Callable[[X], Z]* and a function of type *Callable[[Y], Z]* and returns a function of type *Callable[[Either[X, Y]], Z]*. The returned function takes *Either[X, Y]*. If the *Either* contains left value, the value will be applied to *Callable[[X], Z]*. If the *Either* contains right value, the value will be applied to *Callable[[Y], Z]*. The result of application is returned.\n\n```python\nf = either(lambda x: f\"Error: {x}\", lambda y: f\"OK: {y}\")\nprint(f(((\"unable to parse\",), ()))) # Error: unable to parse\nprint(f(((), (1,)))) # OK: 1\n```\n\n### *either_to_maybe*\n\n*either_to_maybe* is an alias for *snd*.\n\n### *except_*\n\n*except_* is a decorator which returns a function that returns *Either* with some value or an *Exception* that was raised.\n\n```python\nf = except_(next)\nxs = iter(range(2))\n\nprint(f(xs)) # ((), (0,))\nprint(f(xs)) # ((), (1,))\nprint(f(xs)) # ((StopIteration(),), ())\n```\n\n### *fail*\n\n*fail* is a function which takes a function *Callable[[Exception], Y]* and returns a decorator which takes a function *Callable[..., Y]* and returns *Callable[..., Y]*. The function returned by the decorator uses passed *Callable[[Exception], Y]* to handle possible errors produced by a decorated function. If no errors produced, *Callable[[Exception], Y]* will not be executed and the result of the decorated function will be returned.\n\n```python\n# Let's say that you want to write is_repeated function\n# which tells you whether you have a collection consisting\n# only from the single value.\n\n# The simplest function you could think of might look like this:\n\ndef is_repeated(xs: Iterable[X]) -> bool:\n  x, *rest = xs\n  return all(x == y for y in rest)\n\n# It works on collections that have at least one value:\n\nprint(is_repeated((1, 1))) # True\nprint(is_repeated((1, 2, 3))) # False\n\n# but when you have an empty collection, this function will result\n# in an error:\n\nprint(is_repeated(()))\n# ValueError: not enough values to unpack (expected at least 1, got 0)\n\n# In order to handle this case, you can rewrite this function in a\n# following manner:\n\ndef is_repeated(xs: Iterable[X]) -> bool:\n  xs = iter(xs)\n  wrapped_x = next_(xs)\n\n  if wrapped_x:\n    x, *_ = wrapped_x\n    return all(x == y for y in xs)\n  else: return True\n\n# And it would work:\n\nprint(is_repeated((1, 1))) # True\nprint(is_repeated((1, 2, 3))) # False\nprint(is_repeated(())) # True\n\n# You might also use a *fail* function which will surround your\n# function with try-except clause, to deal with empty collection.\n\n@fail(lambda _: True)\ndef is_repeated(xs: Iterable[X]) -> bool:\n  x, *rest = xs\n  return all(x == y for y in rest)\n\n# In case when error is raised by is_repeated, the\n# lambda _: True\n# function will be executed. The raised error will be passed to\n# that function.\n\ndef g(e: Exception) -> bool:\n  print(e)\n  return True\n\n@fail(g)\ndef is_repeated(xs: Iterable[X]) -> bool:\n  x, *rest = xs\n  return all(x == y for y in rest)\n\nprint(is_repeated((1,))) # True\nprint(is_repeated(()))\n# not enough values to unpack (expected at least 1, got 0)\n# True\n```\n\n### *find*\n\n*find* is a function which takes a predicate and returns a function which takes some *Iterable* and returns an *Maybe* with value that matches the predicate if such value exists:\n\n```python\nx: Maybe[int] = find(lambda x: x == 3)(range(5))\nprint(x) # (3,)\n\nx: Maybe[int] = find(lambda x: x == -1)(range(5))\nprint(x) # ()\n```\n\n### *findindex*\n\n*findindex* is a function that works like *find*, but instead of returning a function which returns a value in *Iterable* that matches some predicate, it returns a function which returns an index of that value in *Iterable*.\n\n```python\nx: Maybe[int] = findindex(lambda x: x == 8)(range(5, 10))\nprint(x) # (3,)\n\nx: Maybe[int] = findindex(lambda x: x == -1)(range(5, 10))\nprint(x) # ()\n```\n\n### *finds*\n\n*finds* is a function which takes an *Iterable[Callable[[X], bool]]* of predicates and returns a function which takes some *Iterable[X]* and returns an *Iterable[Maybe[X]]*. *finds* iterates over each predicate and searches for a matching value for that predicate in the passed *Iterable[X]*. *finds* will store checked *Iterable[X]* values in a buffer, so that the buffer will be checked at first and (if needed) the remaining *Iterable[X]* will be checked at last.\n\n```python\nfs = (lambda x: x == 2), (lambda x: x == 4), (lambda x: x == 1), (lambda x: x == -1)\nys: Iterable[Maybe[int]] = finds(fs)(range(5))\n\nfor y in ys:\n  print(y)\n\n# (2,)\n# (4,)\n# (1,)\n# ()\n```\n\n### *flattenl*\n\n*flattenl* is a function which takes a *Tuple* which contains another *Tuple* on the beginning and flattens that inner *Tuple* inside of outer *Tuple*.\n\n```python\nxys = {\"A\": 2.5, \"B\": 3.14}\nPipeline(xys.items()) // zipr(count(1)) / flattenl | print\n\n# ('A', 2.5, 1)\n# ('B', 3.14, 2)\n```\n\n### *flattenr*\n\n*flattenr* is a function which takes a *Tuple* which contains another *Tuple* on the end and flattens that inner *Tuple* inside of outer *Tuple*.\n\n```python\nxys = {\"A\": 2.5, \"B\": 3.14}\nPipeline(xys.items()) // zipl(count(1)) / flattenr | print\n\n# (1, 'A', 2.5)\n# (2, 'B', 3.14)\n```\n\n### *flip*\n\n*flip* is simply:\n\n```python\ndef flip(f: Callable[[Y, X], Z]) -> Callable[[X, Y], Z]:\n  return lambda x, y: f(y, x)\n```\n\nExample of *flip* usage:\n\n```python\nxs = \"A\", \"B\", \"C\"\nPipeline(enumerate(xs)) / key(lambda x: x + 1) * star(flip(repeat)) | print\n\n# A\n# B\n# B\n# C\n# C\n# C\n```\n\n### *foldl*\n\n*foldl* is a function which takes a binary function *Callable[[Y, X], Y]* and some accumulator *Y* and returns a function which takes *Iterable[X]* and returns *Y*. This function allows you to fold *Iterable[X]* from __left__ using passed binary function. The accumulator is being passed as the __first__ argument of the binary function.\n\nExample of *foldl* usage:\n\n```python\nxs = range(ord(\"A\"), ord(\"Z\") + 1)\nalphabet = Pipeline(xs) / chr >> foldl(operator.add, \"\")\n\nprint(alphabet)\n\n# ABCDEFGHIJKLMNOPQRSTUVWXYZ\n```\n\n### *foldl1*\n\n*foldl1* is a similar function to *foldl*. The difference between *foldl1* and *foldl* is that *foldl1* takes *Callable[[X, X], X]*, uses *Iterable[X]* __first__ element as the accumulator and returns *X*. *foldl1* will raise an error if the supplied *Iterable[X]* is empty.\n\n### *foldr*\n\n*foldr* is a function which takes a binary function *Callable[[X, Y], Y]* and some accumulator *Y* and returns a function which takes *Iterable[X]* and returns *Y*. This function allows you to fold *Iterable[X]* from __right__ using passed binary function. The accumulator is being passed as the __last__ argument of the binary function.\n\nExample of *foldr* usage:\n\n```python\nxs = range(ord(\"A\"), ord(\"Z\") + 1)\nreversed_alphabet = (\n  Pipeline(xs)\n  / chr\n  // foldr(lambda x, acc: acc + [x], [])\n  >> foldl(operator.add, \"\")\n)\n\nprint(reversed_alphabet)\n\n# ZYXWVUTSRQPONMLKJIHGFEDCBA\n```\n\n### *foldr1*\n\n*foldr1* is a similar function to *foldr*. The difference between *foldr1* and *foldr* is that *foldr1* takes *Callable[[X, X], X]*, uses *Iterable[X]* __last__ element as the accumulator and returns *X*. *foldr1* will raise an error if the supplied *Iterable[X]* is empty. Under the hood *foldr1* will use *tuple* on passed *Iterable[X]* in order to extract the accumulator.\n\n### *fst*\n\n*fst* is simply:\n\n```python\ndef fst(xy: Tuple[X, Y]) -> X:\n  return xy[0]\n```\n\n### *group*\n\n*group* is a function which takes *Iterable[X]* and returns *Iterable[Tuple[X, ...]]*. This function groups passed elements by equality comparison `==`.\n\n```python\nxs = 1, 1, 2, 2, 2, 3, 1, 1, 1\nprint(tuple(group(xs))) # ((1, 1), (2, 2, 2), (3,), (1, 1, 1))\n```\n\n### *groupby*\n\n*groupby* is a function which takes an equality comparison function *Callable[[X, X], bool]* and returns a function *Callable[[Iterable[X]], Iterable[Tuple[X, ...]]]* which groups passed elements by the equality comparison function.\n\n```python\npeople = (\n  (\"Alex\", 23),\n  (\"John\", 23),\n  (\"Sam\", 27),\n  (\"Kate\", 27),\n  (\"Fred\", 23),\n)\n\ngrouped = groupby(lambda x, y: snd(x) == snd(y))(people)\nprint(tuple(grouped))\n# ((('Alex', 23), ('John', 23)), (('Sam', 27), ('Kate', 27)), (('Fred', 23),))\n\n# or you can use *on* function:\n\ngrouped = groupby(on(operator.eq, snd))(people)\nprint(tuple(grouped))\n# ((('Alex', 23), ('John', 23)), (('Sam', 27), ('Kate', 27)), (('Fred', 23),))\n```\n\n### *in_*\n\n*in_* is simply:\n\n```python\ndef in_(xs: Tuple[X, ...]) -> Callable[[X], bool]:\n  return lambda x: x in xs\n```\n\n### *key*\n\n*key* is simply:\n\n```python\ndef key(f: Callable[[X], Z]) -> Callable[[Tuple[X, Y]], Tuple[Z, Y]]:\n  g: Callable[[Tuple[X, Y]], Z] = compose(f, fst)\n  return lambda xy: (g(xy), snd(xy))\n```\n\nExample of *key* usage:\n\n```python\nxys = {\"A\": [1, 2, 3], \"B\": [3, 4]}\nzys = map(key(str.casefold), xys.items())\n\nfor zy in zys:\n  print(zy)\n\n# ('a', [1, 2, 3])\n# ('b', [3, 4])\n```\n\n### *length*\n\n*length* is a function which takes an *Iterable* and returns number of elements in that *Iterable*. *length* exhausts the *Iterable*.\n\n```python\nxs = 1, 2, 3\nprint(len(xs)) # 3\n\n# len(iter(xs)) will raise an error\nprint(length(iter(xs))) # 3\n```\n\n### *lift*\n\n*lift* is simply:\n\n```python\nlift = curry(map)\n```\n\n### *match_*\n\n*match_* is a function that resembles pattern-matching in Python. It takes some functions `*fs: Callable[..., Maybe[Y]]` and returns a function `Callable[..., Maybe[Y]]` which executes `fs` functions one by one until some function will return non-empty `Maybe[Y]`. If none of those functions will return a non-empty `Maybe[Y]`, an empty `Maybe[Y]` (i.e. `()`) is returned.\n\n```python\n# let's say that we want to parse age ranges that we have in our data:\nage_ranges = (\n  \"10-20\",\n  \"20-30\",\n  \"30+\",\n  \"60+\",\n  \"invalid input\"\n)\n\n# we consider 30+ to be a valid range <30, 100)\n\ndef parse_range(x: str) -> Tuple[int, int]:\n  raw = x.split(\"-\")\n  low, high, *_ = map(int, raw)\n\n  return low, high\n\ndef parse_unbounded_range(x: str) -> Tuple[int, int]:\n  raw, *_ = x.split(\"+\")\n  return int(raw), 100\n\nparse = match_(\n  try_(parse_range),\n  try_(parse_unbounded_range)\n)\n\nfor x in age_ranges:\n  print(parse(x))\n\n# ((10, 20),)\n# ((20, 30),)\n# ((30, 100),)\n# ((60, 100),)\n# ()\n```\n\n### *maybe*\n\n*maybe* is a function that takes a function of type *Callable[[], Y]* and a function of type *Callable[[X], Y]* and returns a function of type *Callable[[Maybe[X]], Y]*. The returned function takes *Maybe[X]*. If the *Maybe* contains value, the value will be applied to *Callable[[X], Y]* and a result of application is returned. If the *Maybe* contains no value, the *Callable[[], Y]* is called and a result is returned.\n\n```python\nf = maybe(lambda: \"Error\", lambda x: f\"OK: {x}\")\nprint(f(())) # Error\nprint(f((1,))) # OK: 1\n```\n\n### *maybe_to_either*\n\n*maybe_to_either* is a function which allows you to create an *Either[Y, X]* from an *Maybe[X]*. *maybe_to_either* takes a function *Callable[[], Y]* and returns a function *Callable[[Maybe[X]], Either[Y, X]]*.\n\n```python\nraw_numbers = \"1\\n22\\nten\\n333\".splitlines()\n\nxs = (\n  Pipeline(raw_numbers)\n  / try_(int)\n  / maybe_to_either(lambda: f\"Failed to parse.\")\n  | print\n)\n\n# ((), (1,))\n# ((), (22,))\n# (('Failed to parse.',), ())\n# ((), (333,))\n```\n\nThe difference between using *maybe_to_either* and explicitly creating *Either* using tuples is that *maybe_to_either* will not evaluate the left part if the right part is present. That is why *Callable[[], Y]* is being passed to *maybe_to_either* instead of *Y*.\n\n### *merge*\n\n*merge* is a function which takes two sorted *Iterable[X]* and merges them into single sorted *Iterable[X]*. It uses *lambda x, y: x <= y* comparison function. Use *key* parameter to specify a function *Callable[[X], Y]* to be called on each element prior to making comparisons.\n\n```python\nxs = merge((1, 3, 5), (1, 2, 4))\nprint(tuple(xs)) # (1, 1, 2, 3, 4, 5)\n\nxs, ys = [(1, \"a\"), (3, \"d\"), (5, \"f\")], [(1, \"b\"), (2, \"c\"), (4, \"e\")]\nprint(tuple((merge(xs, ys, key=fst))))\n# ((1, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e'), (5, 'f'))\n```\n\n### *next_*\n\n*next_* is simply:\n\n```python\nnext_: Callable[[Iterator[X]], Maybe[X]] = try_(next)\n```\n\nExample of *next_* usage:\n\n```python\nxs = iter(range(2))\n\nprint(next_(xs)) # (0,)\nprint(next_(xs)) # (1,)\nprint(next_(xs)) # ()\n```\n\n### *not_*\n\n*not_* is a function which takes a predicate and returns negation of that predicate.\n\n```python\nprint(not_(lambda x, y: x == y)(1, 5)) # True\n```\n\n### *on*\n\n*on* is simply:\n\n```python\ndef on(f: Callable[[Y, Y], Z], g: Callable[[X], Y]) -> Callable[[X, X], Z]:\n  return lambda p, n: f(g(p), g(n))\n```\n\nExample of *on* usage could be found in *groupby* section.\n\n### *padl*\n\n*padl* is a function which allows you to pad some *Iterable* from the __left__ using a filler. This function takes a number *n* and a filler *x*. In case when **exact=False** option is passed, it returns a function which prepends *n - k* fillers to the passed *Iterable*, where *k* is a length of the passed *Iterable*. In case when **exact=True** option is passed, it returns a function which prepends __exactly__ *n* fillers to the passed *Iterable*.\n\n```python\nxs = \"\".join(padl(5, \"x\")(\"abc\"))\nprint(xs) # xxabc\n\nxs = \"\".join(padl(5, \"x\", exact=True)(\"abc\"))\nprint(xs) # xxxxxabc\n```\n\n### *padr*\n\n*padr* is a function which allows you to pad some *Iterable* from the __right__ using a filler. This function takes a number *n* and a filler *x*. In case when **exact=False** option is passed, it returns a function which appends *n - k* fillers to the passed *Iterable*, where *k* is a length of the passed *Iterable*. In case when **exact=True** option is passed, it returns a function which appends __exactly__ *n* fillers to the passed *Iterable*.\n\n```python\nxs = \"\".join(padr(5, \"x\")(\"abc\"))\nprint(xs) # abcxx\n\nxs = \"\".join(padr(5, \"x\", exact=True)(\"abc\"))\nprint(xs) # abcxxxxx\n```\n\n### *partition*\n\n*partition* is a function which takes a predicate and returns a function *Callable[[Iterable[X]], Tuple[Tuple[X, ...], Tuple[X, ...]]]*. This returned function splits passed elements into those that do match the predicate and the rest. The difference between *span* and *partition* is that *span* stops when it finds the first element that does not match the predicate and *partition* goes until the end.\n\n```python\nxs = 1, 1, 2, 2, 2, 3, 1, 1, 1\nmatched, rest = partition(lambda x: x == 1)(xs)\n\nprint(matched) # (1, 1, 1, 1, 1)\nprint(rest) # (2, 2, 2, 3)\n```\n\n### *peek*\n\n*peek* is a decorator which allows you to apply some function to a passed argument and return back the passed argument instead of a function's result.\n\n```python\nx = peek(print)(5) # 5\nprint(x) # 5\n\nxs = (\n  Pipeline(range(3, 0, -1))\n  / peek(print, \"Countdown:\", file=sys.stderr)\n  >> tuple\n)\n# Countdown: 3\n# Countdown: 2\n# Countdown: 1\n\nprint(xs) # (3, 2, 1)\n```\n\n### *pick*\n\n*pick* is a function which takes some aggregate function *Callable[[Tuple[X, ...]], X]* and returns a function *Callable[[Iterable[X]], Iterable[X]]*. This returned function __picks__ all elements from the passed collection *Iterable[X]* which are equal to the value returned by the aggregate function. The equal function might be substituted with any other function of type signature *Callable[[X, X], bool]* by passing a *compare* parameter.\n\n```python\nprint(min([1, 2, 1, 1, 3, 1])) # 1\n\nys = tuple(pick(min)([1, 2, 1, 1, 3, 1]))\nprint(ys) # (1, 1, 1, 1)\n\nprint(min([]))\n# ValueError: min() arg is an empty sequence\n\nys = tuple(pick(min)([]))\nprint(ys) # ()\n```\n\n### *pickby*\n\n*pickby* is a function which takes a function *Callable[[X], Y]*, an aggregate function *Callable[[Tuple[Y, ...]], Y]* and returns a function *Callable[[Iterable[X]], Iterable[X]]*. This returned function __picks__ all elements from the passed collection *Iterable[X]* which corresponding *Y* values, created by the *Callable[[X], Y]* function, are equal to the value returned by the aggregate function. The equal function might be substituted with any other function of type signature *Callable[[Y, Y], bool]* by passing a *compare* parameter. The function *Callable[[X], Y]* will be used exactly once on the whole collection.\n\n```python\ncars_and_prices = (\n  (\"Audi\", 25000),\n  (\"BMW\", 70000),\n  (\"Mercedes\", 25000),\n)\n\ncheapest_car = min(cars_and_prices, key=snd)\nprint(cheapest_car) # ('Audi', 25000)\n\ncheapest_cars = pickby(snd, min)(cars_and_prices)\nprint(tuple(cheapest_cars)) # (('Audi', 25000), ('Mercedes', 25000))\n```\n\n### *powerset*\n\n*powerset* is a function which takes a *Tuple[X, ...]* and produces power set of those elements in form of *Iterable[Iterable[X]]*.\n\n```python\nxs = tuple(range(3))\nps = tuple(map(tuple, powerset(xs)))\n\nprint(ps) # ((), (2,), (1,), (1, 2), (0,), (0, 2), (0, 1), (0, 1, 2))\n```\n\n### *replicate*\n\n*replicate* is a function which takes a number *n* and returns a function, which takes some value *x* and repeats *n* times value *x*.\n\n```python\nxs = tuple(replicate(5)(\"hello\"))\nprint(xs)\n# ('hello', 'hello', 'hello', 'hello', 'hello')\n```\n\n### *reverse*\n\n*reverse* is a function which takes an *Iterable[X]* and returns *Deque[X]* which contains elements from *Iterable[X]* in reversed order.\n\n```python\nxs = range(ord(\"A\"), ord(\"Z\") + 1)\n\nreversed_alphabet = (\n  Pipeline(xs)\n  / chr\n  // reverse # Python reversed would not work on Iterable\n  >> foldl(operator.add, \"\")\n)\n\nprint(reversed_alphabet)\n\n# ZYXWVUTSRQPONMLKJIHGFEDCBA\n```\n\n### *scanl*\n\n*scanl* is a similar function to *foldl*. The difference between *scanl* and *foldl* is that *scanl* instead of returning a function which takes *Iterable[X]* and returns *Y*, returns a function which takes *Iterable[X]* and returns *Iterable[Y]*. The resulting *Iterable[Y]* contains all accumulators used in *foldl*.\n\n```python\nxs = scanl(operator.mul, 1)((1, 2, 3, 4, 5))\nprint(tuple(xs))\n# (1, 1, 2, 6, 24, 120)\n```\n\n### *scanl1*\n\n*scanl1* is a similar function to *foldl1*. The difference between *scanl1* and *foldl1* is that *scanl1* instead of returning a function which takes *Iterable[X]* and returns *X*, returns a function which takes *Iterable[X]* and returns *Iterable[X]*. The resulting *Iterable[X]* contains all accumulators used in *foldl1*.\n\n```python\nxs = scanl1(operator.mul)((1, 2, 3, 4, 5))\nprint(tuple(xs))\n# (1, 2, 6, 24, 120)\n```\n\n### *scanr*\n\n*scanr* is a similar function to *foldr*. The difference between *scanr* and *foldr* is that *scanr* instead of returning a function which takes *Iterable[X]* and returns *Y*, returns a function which takes *Iterable[X]* and returns *Deque[Y]*. The resulting *Deque[Y]* contains all accumulators used in *foldr*.\n\n```python\nxs = scanr(operator.mul, 1)((1, 2, 3, 4, 5))\nprint(xs)\n# deque([120, 120, 60, 20, 5, 1])\n```\n\n### *scanr1*\n\n*scanr1* is a similar function to *foldr1*. The difference between *scanr1* and *foldr1* is that *scanr1* instead of returning a function which takes *Iterable[X]* and returns *X*, returns a function which takes *Iterable[X]* and returns *Deque[X]*. The resulting *Deque[X]* contains all accumulators used in *foldr1*.\n\n```python\nxs = scanr1(operator.mul)((1, 2, 3, 4, 5))\nprint(xs)\n# deque([120, 120, 60, 20, 5])\n```\n\n### *search*\n\n*search* is a function which takes a predicate *Callable[[X], bool]* along with *Iterable[Y]* and returns a function which takes *Iterable[X]* and returns *Iterable[Y]*. This function zips *Iterable[Y]* with *Iterable[X]* and returns those *Y*s for which corresponding *X*s match the predicate.\n\n```python\nxs = search(lambda x: x > 3, count())(range(1, 6))\nprint(tuple(xs))\n# (3, 4)\n```\n\n### *shift*\n\n*shift* is a decorator which returns a partially applied function. The difference between Python's *functools.partial* and *shift* is that *shift* will return a function which prepends *\\*args* and *\\*\\*kwargs*:\n\n```python\ndef dummy(*args: object, **kwargs: object):\n  print(args)\n  print(kwargs)\n\npartial(dummy, 1, 2, a=1, b=\"b\")(3, 4, c=\"c\")\nprint(\"-\" * 10)\nshift(dummy, 1, 2, a=1, b=\"b\")(3, 4, c=\"c\")\n\n# (1, 2, 3, 4)\n# {'a': 1, 'b': 'b', 'c': 'c'}\n# ----------\n# (3, 4, 1, 2)\n# {'c': 'c', 'a': 1, 'b': 'b'}\n```\n\nExample of *shift* usage:\n\n```python\ntake_3 = shift(islice, 3)\nxs: Iterable[int] = take_3(range(5))\n\nfor x in xs:\n  print(x)\n\n# 0\n# 1\n# 2\n```\n\n### *slide*\n\n*slide* is a function which takes a sliding window length **n** and a **step**, and returns a function which takes an *Iterable* and applies sliding window over it resulting in an *Iterable* of *tuple*s. Each *tuple* has at most length equal to **n**. In case when **exact=True** option is passed, each *tuple* has length equal to **n**. **step** is simply a shift of a sliding window.\n\n```python\nxs: Iterable[Tuple[int, ...]] = slide()(range(10))\nprint(tuple(xs))\n# ((0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9,))\n\nxs: Iterable[Tuple[int, ...]] = slide(n=3, step=2)(range(10))\nprint(tuple(xs))\n# ((0, 1, 2), (2, 3, 4), (4, 5, 6), (6, 7, 8), (8, 9))\n\nxs: Iterable[Tuple[int, ...]] = slide(n=3, step=2, exact=True)(range(10))\nprint(tuple(xs))\n# ((0, 1, 2), (2, 3, 4), (4, 5, 6), (6, 7, 8))\n\ndef is_sorted(xs: Iterable[X], compare: Callable[[X, X], bool] = operator.le) -> bool:\n  return (\n    Pipeline(slide(exact=True)(xs))\n    / star(compare)\n    >> all\n  )\n\nprint(is_sorted((1, 2, 5))) # True\nprint(is_sorted((1, 2, -5))) # False\n```\n\n### *snd*\n\n*snd* is simply:\n\n```python\ndef snd(xy: Tuple[X, Y]) -> Y:\n  return xy[1]\n```\n\n### *span*\n\n*span* is a function which takes a predicate and returns a function *Callable[[Iterable[X]], Tuple[Tuple[X, ...], Iterable[X]]]*. This returned function splits passed elements into those that do match the predicate on the beginning and the rest.\n\n```python\nxs = 1, 1, 2, 2, 2, 3, 1, 1, 1\nmatched, rest = span(lambda x: x == 1)(xs)\n\nprint(matched) # (1, 1)\nprint(tuple(rest)) # (2, 2, 2, 3, 1, 1, 1)\n```\n\n### *splitat*\n\n*splitat* is a function which takes an index *i* and returns a function which splits an *Iterable[X]* into *Tuple[X, ...]* and *Iterable[X]*. The *Tuple[X, ...]* will contain first *i* elements and the *Iterable[X]* will contain the rest.\n\n```python\nxs, rest = splitat(1)(range(5))\nprint(xs) # (0,)\nprint(tuple(rest)) # (1, 2, 3, 4)\n```\n\n### *strip*\n\n*strip* is a function which takes an *Iterable[X]* and returns an *Iterable[X]* with removed consecutive duplicates. *strip* functions uses only equality comparison `==`.\n\n```python\nxs = 1, 1, 2, 2, 2, 3, 1, 1, 1\nprint(tuple(strip(xs))) # (1, 2, 3, 1)\n```\n\n### *stripby*\n\n*stripby* is a function which takes an equality comparison function *Callable[[X, X], bool]* and returns a function *Callable[[Iterable[X]], Iterable[X]]* which removes consecutive duplicates in terms of the equality comparison function.\n\n```python\npeople = (\n  (\"Alex\", 23),\n  (\"John\", 23),\n  (\"Sam\", 27),\n  (\"Kate\", 27),\n  (\"Fred\", 23),\n)\n\nstripped = stripby(lambda x, y: snd(x) == snd(y))(people)\nprint(tuple(stripped))\n# (('Alex', 23), ('Sam', 27), ('Fred', 23))\n\n# or you can use *on* function:\n\nstripped = stripby(on(operator.eq, snd))(people)\nprint(tuple(stripped))\n# (('Alex', 23), ('Sam', 27), ('Fred', 23))\n```\n\n### *take*\n\n*take* is simply:\n\n```python\ndef take(n: int) -> Callable[[Iterable[X]], Iterable[X]]:\n  return (lambda xs: islice(xs, n)) if n > 0 else (lambda _: ())\n```\n\nExample of *take* usage:\n\n```python\nxs = take(1)(range(3))\nprint(tuple(xs)) # (0,)\n\nxs = islice(range(3), 1)\nprint(tuple(xs)) # (0,)\n```\n\n### *try_*\n\n*try_* is a decorator which returns a function that returns *Maybe* with some value or an empty *Maybe* if an *Exception* was raised.\n\n```python\nload_json = try_(json.loads)\n\nprint(load_json(\"{}\")) # ({},)\nprint(load_json(\"[1, 2, 3]\")) # ([1, 2, 3],)\nprint(load_json(\"abc\")) # ()\n```\n\n### *unfoldr*\n\n*unfoldr* is a function that takes a function of type *Callable[[X], Maybe[Tuple[Y, X]]]* and returns a function of type *Callable[[X], Iterable[Y]]*. The returned function will repeatedly apply *X* to the function passed to *unfoldr* until it returns value *()*.\n\n```python\nuntil_3 = unfoldr(lambda acc: ((acc, acc + 1),) if acc < 3 else ())\nprint(tuple(until_3(0))) # (0, 1, 2)\n```\n\n### *value*\n\n*value* is simply:\n\n```python\ndef value(f: Callable[[Y], Z]) -> Callable[[Tuple[X, Y]], Tuple[X, Z]]:\n  g: Callable[[Tuple[X, Y]], Z] = compose(f, snd)\n  return lambda xy: (fst(xy), g(xy))\n```\n\nExample of *value* usage:\n\n```python\nxys = {\"A\": [1, 2, 3], \"B\": [3, 4]}\nxzs = map(value(len), xys.items())\n\nfor xz in xzs:\n  print(xz)\n\n# ('A', 3)\n# ('B', 2)\n```\n\n### *where*\n\n*where* is a similar function to *findindex*. The difference between *where* and *findindex* is that *where* returns indices of all elements that match given predicate instead of one. The other difference is that *where* returns a function which takes *Iterable[X]* and returns *Iterable[Y]*, on the other hand *findindex* returns a function which takes *Iterable[X]* and returns *Maybe[int]*.\n\n```python\nxs = where(lambda x: x >= 8)(range(5, 10))\nprint(tuple(xs)) # (3, 4)\n\nxs = where(lambda x: x == -1)(range(5, 10))\nprint(tuple(xs)) # ()\n```\n\n### *zipflatl*\n\n*zipflatl* is a function which takes a function *Callable[[X], Maybe[Y]]*, and returns some function which takes *Iterable[X]* and returns *Iterable[Tuple[X, Y]]* with only those elements from *Iterable[X]* that are mapped to non-empty *Maybe[Y]* by the function *Callable[[X], Maybe[Y]]*.\n\n```python\nxs = \"1\", \"hello\", \"2\"\nf = try_(int)\n\nys = zipflatl(f)(xs)\nprint(tuple(ys)) # ((1, '1'), (2, '2'))\n```\n\n### *zipflatr*\n\n*zipflatr* is a function which takes a function *Callable[[X], Maybe[Y]]*, and returns some function which takes *Iterable[X]* and returns *Iterable[Tuple[Y, X]]* with only those elements from *Iterable[X]* that are mapped to non-empty *Maybe[Y]* by the function *Callable[[X], Maybe[Y]]*.\n\n```python\nxs = \"1\", \"hello\", \"2\"\nf = try_(int)\n\nys = zipflatr(f)(xs)\nprint(tuple(ys)) # (('1', 1), ('2', 2))\n```\n\n### *zipif*\n\n*zipif* is a function which allows you to zip *Iterable[X]* elements with *Iterable[Y]* elements that match a predicate *Callable[[X, Y], bool]*, using a binary function *Callable[[X, Y], Z]*, into *Iterable[Z]*.\n\nWhen a pair *x* and *y* do not match the predicate, a function *Callable[[X], Z]* is applied to *x* and its result is yielded. Also, in the next iteration only the first element *x* of the pair will be substituted with it's successor *x'* and *y* will remain unchanged (so that the predicate will get *x'* and *y*).\n\n```python\nparticipants = (\n  (\"Alex\", 160.0),\n  (\"Sam\", 0.0),\n  (\"Kate\", 150.0),\n  (\"John\", 155.0),\n  (\"Fred\", 35.0)\n)\nname = fst\nbalance = snd\n\ntickets = (\n  (1, 160),\n  (2, 150),\n  (3, 300)\n)\nticket_id = fst\nprice = snd\n\nsell_tickets = zipif(\n  lambda user, ticket: balance(user) >= price(ticket),\n  lambda user, ticket: (name(user), balance(user) - price(ticket), (ticket,)),\n  lambda user: (*user, ())\n)\n\nfor x in sell_tickets(tickets)(participants):\n  print(x)\n\n# ('Alex', 0.0, ((1, 160),))\n# ('Sam', 0.0, ())\n# ('Kate', 0.0, ((2, 150),))\n# ('John', 155.0, ())\n# ('Fred', 35.0, ())\n```\n\n### *zipl*\n\n*zipl* is simply:\n\n```python\ndef zipl(xs: Iterable[X]) -> Callable[[Iterable[Y]], Iterable[Tuple[X, Y]]]:\n  return lambda ys: zip(xs, ys)\n```\n\nExample of *zipl* usage:\n\n```python\nxs = \"A\", \"B\", \"C\"\nPipeline(xs) // zipl(count(1)) * star(flip(repeat)) | print\n\n# A\n# B\n# B\n# C\n# C\n# C\n```\n\n### *zipmapl*\n\n*zipmapl* is simply:\n\n```python\ndef zipmapl(f: Callable[[X], Y]) -> Callable[[Iterable[X]], Iterable[Tuple[Y, X]]]:\n  return lambda xs: map(lambda x: (f(x), x), xs)\n```\n\nExample of *zipmapl* usage:\n\n```python\nxs = range(ord(\"a\"), ord(\"z\") + 1)\nupper_to_lower = Pipeline(xs) / chr // zipmapl(str.upper) >> dict\n\nPipeline(upper_to_lower.items()) // take(5) | print\n\n# ('A', 'a')\n# ('B', 'b')\n# ('C', 'c')\n# ('D', 'd')\n# ('E', 'e')\n```\n\n### *zipmapr*\n\n*zipmapr* is simply:\n\n```python\ndef zipmapr(f: Callable[[X], Y]) -> Callable[[Iterable[X]], Iterable[Tuple[X, Y]]]:\n  return lambda xs: map(lambda x: (x, f(x)), xs)\n```\n\nExample of *zipmapr* usage:\n\n```python\nxs = range(ord(\"a\"), ord(\"z\") + 1)\nupper_to_lower = Pipeline(xs) / chr // zipmapr(str.upper) >> dict\n\nPipeline(upper_to_lower.items()) // take(5) | print\n\n# ('a', 'A')\n# ('b', 'B')\n# ('c', 'C')\n# ('d', 'D')\n# ('e', 'E')\n```\n\n### *zipr*\n\n*zipr* is simply:\n\n```python\ndef zipr(ys: Iterable[Y]) -> Callable[[Iterable[X]], Iterable[Tuple[X, Y]]]:\n  return lambda xs: zip(xs, ys)\n```\n\nExample of *zipl* usage:\n\n```python\nxys = {\"A\": 2.5, \"B\": 3.14}\nPipeline(xys.items()) // zipr(count(1)) / flattenl | print\n\n# ('A', 2.5, 1)\n# ('B', 3.14, 2)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/shkroba/nonion",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nonion",
    "package_url": "https://pypi.org/project/nonion/",
    "platform": null,
    "project_url": "https://pypi.org/project/nonion/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/shkroba/nonion"
    },
    "release_url": "https://pypi.org/project/nonion/0.4.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python Functional Programming for Humans.",
    "version": "0.4.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14507410,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3833894f71e148f896df2c8ce57939dd1aa5f637737ed51e6aa072ce1dfa7c14",
          "md5": "87aa745e0806bcdff0d0cb54e8aff278",
          "sha256": "e2e813541e6df46417beddf103ad31cdaf09d625735ae9216ecdf40f8e584984"
        },
        "downloads": -1,
        "filename": "nonion-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87aa745e0806bcdff0d0cb54e8aff278",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4910,
        "upload_time": "2020-10-01T18:10:11",
        "upload_time_iso_8601": "2020-10-01T18:10:11.632775Z",
        "url": "https://files.pythonhosted.org/packages/38/33/894f71e148f896df2c8ce57939dd1aa5f637737ed51e6aa072ce1dfa7c14/nonion-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ae3a6761cd7674b2480e9f43b9223cc85637076853d9bd2a8a2475fdf024be8",
          "md5": "bf5bb0609f80939764a7e26af8f6de71",
          "sha256": "c3bb5171b6921092de3d130ab732741e0ea836ca5c6ac8d0401415f848bbe08a"
        },
        "downloads": -1,
        "filename": "nonion-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bf5bb0609f80939764a7e26af8f6de71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4560,
        "upload_time": "2020-10-01T18:10:14",
        "upload_time_iso_8601": "2020-10-01T18:10:14.379163Z",
        "url": "https://files.pythonhosted.org/packages/2a/e3/a6761cd7674b2480e9f43b9223cc85637076853d9bd2a8a2475fdf024be8/nonion-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc92b4b18aced8e8917d9c5490a4b0b647ff6420afc78130299005398e49b801",
          "md5": "6e59c2470cbcef2abe535797045390bc",
          "sha256": "e8be65012853924159807fc60e5c681ab6ced7cb63a055a97ddfe723b60a7299"
        },
        "downloads": -1,
        "filename": "nonion-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e59c2470cbcef2abe535797045390bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7275,
        "upload_time": "2020-12-20T14:24:34",
        "upload_time_iso_8601": "2020-12-20T14:24:34.372115Z",
        "url": "https://files.pythonhosted.org/packages/fc/92/b4b18aced8e8917d9c5490a4b0b647ff6420afc78130299005398e49b801/nonion-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07973e1e1f66248d6e98749e5d2add0d222aca16d1ce6bbe101a9d799e3092c7",
          "md5": "43a9e69945d38574b0834c34b8d78dd9",
          "sha256": "e92d8b50cad886cf53081cd8d47df73cf99eebe9fc6bfe6d24a4651487257556"
        },
        "downloads": -1,
        "filename": "nonion-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "43a9e69945d38574b0834c34b8d78dd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7902,
        "upload_time": "2020-12-20T14:24:35",
        "upload_time_iso_8601": "2020-12-20T14:24:35.514866Z",
        "url": "https://files.pythonhosted.org/packages/07/97/3e1e1f66248d6e98749e5d2add0d222aca16d1ce6bbe101a9d799e3092c7/nonion-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b7c60001d519f14d05b5a250d6c49fd2b0ab1349534ccba9953176e93c04752",
          "md5": "0aa73bbb4b9086a33b87eb466a48e440",
          "sha256": "0c2ba9fadc4a8a03e346cb742b123b98f921f8b41e7d9c48f032bdfa57dfb74e"
        },
        "downloads": -1,
        "filename": "nonion-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0aa73bbb4b9086a33b87eb466a48e440",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11214,
        "upload_time": "2020-12-25T19:55:32",
        "upload_time_iso_8601": "2020-12-25T19:55:32.569156Z",
        "url": "https://files.pythonhosted.org/packages/4b/7c/60001d519f14d05b5a250d6c49fd2b0ab1349534ccba9953176e93c04752/nonion-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3db12cbf8e58dc7872c531cd885d361477d35ff0502dd6d331a2ea77e46a1ce1",
          "md5": "9bb3320e07c568e0f7ecbcc27d941716",
          "sha256": "cee506c1a666e83af188bf585ff0d81e3d2c4eb49d420c6c59f72f604c36faaf"
        },
        "downloads": -1,
        "filename": "nonion-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9bb3320e07c568e0f7ecbcc27d941716",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16840,
        "upload_time": "2020-12-25T19:55:34",
        "upload_time_iso_8601": "2020-12-25T19:55:34.387859Z",
        "url": "https://files.pythonhosted.org/packages/3d/b1/2cbf8e58dc7872c531cd885d361477d35ff0502dd6d331a2ea77e46a1ce1/nonion-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c5c036b1f9144b08c5f37e238321b98bc0743d370f08edfec3deb73b4a2ebcb",
          "md5": "0ad2ab43c259fe8fb03821c395220e28",
          "sha256": "6b14bd3a3993082dab41617c4a3888848815d3c1ce49cb793f2c967844a3d641"
        },
        "downloads": -1,
        "filename": "nonion-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ad2ab43c259fe8fb03821c395220e28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11504,
        "upload_time": "2021-01-01T11:48:20",
        "upload_time_iso_8601": "2021-01-01T11:48:20.011595Z",
        "url": "https://files.pythonhosted.org/packages/3c/5c/036b1f9144b08c5f37e238321b98bc0743d370f08edfec3deb73b4a2ebcb/nonion-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0520e4493e43719fe454202e53f0e1258cd1f7d722ebdd2fed230d80b38984a5",
          "md5": "ce191f5093c267ce771f3fbf2c98bee3",
          "sha256": "17e8d5f21acd7d8789afb1fc5158591ffe9bbab28098527eb32b46be8a443b58"
        },
        "downloads": -1,
        "filename": "nonion-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ce191f5093c267ce771f3fbf2c98bee3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17374,
        "upload_time": "2021-01-01T11:48:21",
        "upload_time_iso_8601": "2021-01-01T11:48:21.718194Z",
        "url": "https://files.pythonhosted.org/packages/05/20/e4493e43719fe454202e53f0e1258cd1f7d722ebdd2fed230d80b38984a5/nonion-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94544c9c401d82f766db99921af8d416622786ca9be412220fd5407f76ac038a",
          "md5": "dccad706d5270cb8c53008ba5e8c0c58",
          "sha256": "96c4da5ad38cbb481f4a554d1739c6b7e529bfbed3d0aa2af3823100f47d45f7"
        },
        "downloads": -1,
        "filename": "nonion-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dccad706d5270cb8c53008ba5e8c0c58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12122,
        "upload_time": "2021-01-27T00:06:00",
        "upload_time_iso_8601": "2021-01-27T00:06:00.779575Z",
        "url": "https://files.pythonhosted.org/packages/94/54/4c9c401d82f766db99921af8d416622786ca9be412220fd5407f76ac038a/nonion-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76884ab55ef180b565f859258cc8a20be85d93a659e43d2e852c3765f6222424",
          "md5": "63e7a519890c4b015cc4a0ddfa0b5521",
          "sha256": "6f5b555a92834d70142c74df46768e2a205db5f806d4bb41313ae583567fee34"
        },
        "downloads": -1,
        "filename": "nonion-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "63e7a519890c4b015cc4a0ddfa0b5521",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18867,
        "upload_time": "2021-01-27T00:06:02",
        "upload_time_iso_8601": "2021-01-27T00:06:02.891185Z",
        "url": "https://files.pythonhosted.org/packages/76/88/4ab55ef180b565f859258cc8a20be85d93a659e43d2e852c3765f6222424/nonion-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21b3ec41eaf8a19ba995424e9dbfa960800b347ec6f9ff14bdb59b03a8f7959f",
          "md5": "45d401b84e8d6c28d79afd949f206402",
          "sha256": "7382783d9279156891883f92b9214b0ba6fa846c52c703c01e8f1b408b4ade4d"
        },
        "downloads": -1,
        "filename": "nonion-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45d401b84e8d6c28d79afd949f206402",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12430,
        "upload_time": "2021-01-30T14:37:30",
        "upload_time_iso_8601": "2021-01-30T14:37:30.078814Z",
        "url": "https://files.pythonhosted.org/packages/21/b3/ec41eaf8a19ba995424e9dbfa960800b347ec6f9ff14bdb59b03a8f7959f/nonion-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c542d97d1fe0c18e3c60bd4cf76ca40d177febcfe583ddd794ee39e5673e8e2",
          "md5": "cd23fefc2488c69dedc8eae933f720f2",
          "sha256": "229b65e028e97860e1b6a6127620a3231c8e4d5ce20f1f21332ad01046639e9c"
        },
        "downloads": -1,
        "filename": "nonion-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cd23fefc2488c69dedc8eae933f720f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19848,
        "upload_time": "2021-01-30T14:37:32",
        "upload_time_iso_8601": "2021-01-30T14:37:32.175713Z",
        "url": "https://files.pythonhosted.org/packages/9c/54/2d97d1fe0c18e3c60bd4cf76ca40d177febcfe583ddd794ee39e5673e8e2/nonion-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de57a997afffa30c5acd2873654d432bb5a8ca1ea9b444d040f6c0051b65645d",
          "md5": "544c36eb411d2e117aee0eef51016181",
          "sha256": "44479dc9acabebf05244c25541dd68a7d977376585450122adfa278d82d595bd"
        },
        "downloads": -1,
        "filename": "nonion-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "544c36eb411d2e117aee0eef51016181",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12791,
        "upload_time": "2021-02-06T21:08:58",
        "upload_time_iso_8601": "2021-02-06T21:08:58.987574Z",
        "url": "https://files.pythonhosted.org/packages/de/57/a997afffa30c5acd2873654d432bb5a8ca1ea9b444d040f6c0051b65645d/nonion-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b17a36306d2e6423fe2d63991d8ec0bc91f09a4977547fa1f3d8b5926851afe",
          "md5": "c95a2414e5d1051c9f64b7f794006689",
          "sha256": "b41f28f338dd5267156b4a77ad0287a119808f0057ae0e8ecb9cae65dc79d639"
        },
        "downloads": -1,
        "filename": "nonion-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c95a2414e5d1051c9f64b7f794006689",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21306,
        "upload_time": "2021-02-06T21:09:01",
        "upload_time_iso_8601": "2021-02-06T21:09:01.133126Z",
        "url": "https://files.pythonhosted.org/packages/6b/17/a36306d2e6423fe2d63991d8ec0bc91f09a4977547fa1f3d8b5926851afe/nonion-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "351a65fa6991ebc60a5c42fa7011ecaceaca5ea89ef58e80701e339dbf6b65b8",
          "md5": "333ac9cc95a464f49f2d8e1122a685ce",
          "sha256": "e97dacfc8e1a7411720d3eb44b23556ad224a0ed94881ee4ad255cf202026488"
        },
        "downloads": -1,
        "filename": "nonion-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "333ac9cc95a464f49f2d8e1122a685ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12811,
        "upload_time": "2021-02-06T21:21:07",
        "upload_time_iso_8601": "2021-02-06T21:21:07.852679Z",
        "url": "https://files.pythonhosted.org/packages/35/1a/65fa6991ebc60a5c42fa7011ecaceaca5ea89ef58e80701e339dbf6b65b8/nonion-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fafe8c140499a730495498f6114ed353c36037a42def7d78460e8411cba0a7c",
          "md5": "5a73a559f4705abc92ee758b750581ee",
          "sha256": "2ca24c0cc508934477adc581563d14b59f268b190c41f2ec2f49b23d6e75c4e1"
        },
        "downloads": -1,
        "filename": "nonion-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "5a73a559f4705abc92ee758b750581ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21361,
        "upload_time": "2021-02-06T21:21:10",
        "upload_time_iso_8601": "2021-02-06T21:21:10.212130Z",
        "url": "https://files.pythonhosted.org/packages/4f/af/e8c140499a730495498f6114ed353c36037a42def7d78460e8411cba0a7c/nonion-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06f501cb4115729937de7dd3fd17a850763e080654f6e0a2eaea7fd9240d0f82",
          "md5": "c7f030f40d1bf7ce636af72b872d7290",
          "sha256": "4310a302c3602e9ba6fd44f8659c2a60d95322e49e7e51d20cbc6de0b0e75492"
        },
        "downloads": -1,
        "filename": "nonion-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7f030f40d1bf7ce636af72b872d7290",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12984,
        "upload_time": "2021-03-01T17:03:37",
        "upload_time_iso_8601": "2021-03-01T17:03:37.927313Z",
        "url": "https://files.pythonhosted.org/packages/06/f5/01cb4115729937de7dd3fd17a850763e080654f6e0a2eaea7fd9240d0f82/nonion-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7715170b9263917e13c3c9eb88b7fed121b35e89bb6a89532fb2f59e16000446",
          "md5": "47b1f943c2c1008e42baaa0996855d57",
          "sha256": "89d3daad9923d24763a409e0dbca6b5a9ded984e816a063989b818780d2ac8eb"
        },
        "downloads": -1,
        "filename": "nonion-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "47b1f943c2c1008e42baaa0996855d57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22036,
        "upload_time": "2021-03-01T17:03:44",
        "upload_time_iso_8601": "2021-03-01T17:03:44.715015Z",
        "url": "https://files.pythonhosted.org/packages/77/15/170b9263917e13c3c9eb88b7fed121b35e89bb6a89532fb2f59e16000446/nonion-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14cba1fd37c5c61590b023244ab2002171155daad835e13291887a254fba2b40",
          "md5": "3945c15090e9dcec2f2381ce09ba3902",
          "sha256": "9766584330230977bd37198b565f4a3c80745f57f4ea8cde8d15e9bb24d393fb"
        },
        "downloads": -1,
        "filename": "nonion-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3945c15090e9dcec2f2381ce09ba3902",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13195,
        "upload_time": "2021-03-05T15:44:52",
        "upload_time_iso_8601": "2021-03-05T15:44:52.762569Z",
        "url": "https://files.pythonhosted.org/packages/14/cb/a1fd37c5c61590b023244ab2002171155daad835e13291887a254fba2b40/nonion-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70aebb4f2f3ebf795810f98c722ea5e0ea8f379fb4cf8e1f946100846c787493",
          "md5": "3130ba0e7cf040832146bd4c32e01575",
          "sha256": "7ba5073ffc25170b2973193754da02ec217f6229eef02e1103008d7e71db901e"
        },
        "downloads": -1,
        "filename": "nonion-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3130ba0e7cf040832146bd4c32e01575",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22927,
        "upload_time": "2021-03-05T15:44:54",
        "upload_time_iso_8601": "2021-03-05T15:44:54.985697Z",
        "url": "https://files.pythonhosted.org/packages/70/ae/bb4f2f3ebf795810f98c722ea5e0ea8f379fb4cf8e1f946100846c787493/nonion-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f468c519c7cb5a7114cff9c239e2859e21aee4397f99fbfb12ea07bb397f62d1",
          "md5": "2b3904cb540a6813eb50277db8a01269",
          "sha256": "69706d1a59c0706eb51ef2fe21225aab49eaa0c6b564ddc7f9622264e010f741"
        },
        "downloads": -1,
        "filename": "nonion-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b3904cb540a6813eb50277db8a01269",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13236,
        "upload_time": "2021-03-06T11:15:09",
        "upload_time_iso_8601": "2021-03-06T11:15:09.099925Z",
        "url": "https://files.pythonhosted.org/packages/f4/68/c519c7cb5a7114cff9c239e2859e21aee4397f99fbfb12ea07bb397f62d1/nonion-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "786a74afa7f79dd9ad30e68c6281dc7ebc32bc7065a08c0dc1ed27304c4bb5ce",
          "md5": "76695f8efd1860bcc4c5aa9a9075ca3d",
          "sha256": "cb082879c6e3bc5ea7dd199d1cf1841fb31762db995193d4dca1eee594e7bad6"
        },
        "downloads": -1,
        "filename": "nonion-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "76695f8efd1860bcc4c5aa9a9075ca3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22956,
        "upload_time": "2021-03-06T11:15:11",
        "upload_time_iso_8601": "2021-03-06T11:15:11.222793Z",
        "url": "https://files.pythonhosted.org/packages/78/6a/74afa7f79dd9ad30e68c6281dc7ebc32bc7065a08c0dc1ed27304c4bb5ce/nonion-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ab1b82eb2f092d5d5678e5b9090dd84883016fbee5ce0f8b9d7e4bcbe623c09",
          "md5": "d65e528226c0b9a51fb84e256b14b7d0",
          "sha256": "fe0d472ade285fe06e805bc0bf52d09b644e64eccf529e13f98f63ef68249a46"
        },
        "downloads": -1,
        "filename": "nonion-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d65e528226c0b9a51fb84e256b14b7d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13288,
        "upload_time": "2021-03-06T16:13:11",
        "upload_time_iso_8601": "2021-03-06T16:13:11.374216Z",
        "url": "https://files.pythonhosted.org/packages/2a/b1/b82eb2f092d5d5678e5b9090dd84883016fbee5ce0f8b9d7e4bcbe623c09/nonion-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6db045b1853f21611ae2a782534158dd32adcca40be18bd5bb0c9a6b4cd860f4",
          "md5": "4bb6d740c78489eff8f03e31e9cf0cf8",
          "sha256": "1964c254c356d9cacff8755121f3a304d679d297e70e1ce753dd1217eb984fc1"
        },
        "downloads": -1,
        "filename": "nonion-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4bb6d740c78489eff8f03e31e9cf0cf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23007,
        "upload_time": "2021-03-06T16:13:13",
        "upload_time_iso_8601": "2021-03-06T16:13:13.511367Z",
        "url": "https://files.pythonhosted.org/packages/6d/b0/45b1853f21611ae2a782534158dd32adcca40be18bd5bb0c9a6b4cd860f4/nonion-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75c8699f62056e13947849a616093d59a25697af95ac20931f372b395c1919e2",
          "md5": "ff9d27e67f84497fc12c06c39ed7cdba",
          "sha256": "b4652e72dd943ce4efba2ccfaec099b0b6090e9b03fc7cab1dd72cf66ceb7233"
        },
        "downloads": -1,
        "filename": "nonion-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff9d27e67f84497fc12c06c39ed7cdba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13876,
        "upload_time": "2021-03-07T18:15:25",
        "upload_time_iso_8601": "2021-03-07T18:15:25.398800Z",
        "url": "https://files.pythonhosted.org/packages/75/c8/699f62056e13947849a616093d59a25697af95ac20931f372b395c1919e2/nonion-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "984c57c19f9dcc002f4a5e1d2a2404316b86824f9b93b91e35d6b455d9cb9626",
          "md5": "c7f8db31bef6da5676dd0743f1ec68e6",
          "sha256": "5bf12df37fee8f947b27f9d48e452fef2e759b9dd99e2f8cad11438263f6770f"
        },
        "downloads": -1,
        "filename": "nonion-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c7f8db31bef6da5676dd0743f1ec68e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25222,
        "upload_time": "2021-03-07T18:15:27",
        "upload_time_iso_8601": "2021-03-07T18:15:27.786046Z",
        "url": "https://files.pythonhosted.org/packages/98/4c/57c19f9dcc002f4a5e1d2a2404316b86824f9b93b91e35d6b455d9cb9626/nonion-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e443513d71f0a24f9fb097ee30924467a4788915953003da18062b3bbac31bec",
          "md5": "3475e306228f3d205b4a9236358e760f",
          "sha256": "0ba5c0a6ff68f672b24c3d52a716396fc910d4c1fd3cbaf5263db64958c5ca59"
        },
        "downloads": -1,
        "filename": "nonion-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3475e306228f3d205b4a9236358e760f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13880,
        "upload_time": "2021-03-09T14:20:09",
        "upload_time_iso_8601": "2021-03-09T14:20:09.701457Z",
        "url": "https://files.pythonhosted.org/packages/e4/43/513d71f0a24f9fb097ee30924467a4788915953003da18062b3bbac31bec/nonion-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5a72b8d47eb9e836afea921e8e77579b945ac549895415ee2dfaa1ed60595eb",
          "md5": "e0d006f137984bb7905db833b0aa19b3",
          "sha256": "0158e9c6e39c52d7441a0c4a5cadd8af6f16c8067a1ab3bb9fc738df6c808777"
        },
        "downloads": -1,
        "filename": "nonion-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e0d006f137984bb7905db833b0aa19b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25233,
        "upload_time": "2021-03-09T14:20:11",
        "upload_time_iso_8601": "2021-03-09T14:20:11.971815Z",
        "url": "https://files.pythonhosted.org/packages/d5/a7/2b8d47eb9e836afea921e8e77579b945ac549895415ee2dfaa1ed60595eb/nonion-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4862e8b1bd2a604d87ceb818622d9d88fb6f147d5265d86a5e7106a82096d12",
          "md5": "a292e0a8153fc7f505f4eda3c2842a27",
          "sha256": "015ccea060c68e7980703bf40b92d876de5fcda0c79238f57944135dcf41c72d"
        },
        "downloads": -1,
        "filename": "nonion-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a292e0a8153fc7f505f4eda3c2842a27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14032,
        "upload_time": "2021-03-11T18:32:38",
        "upload_time_iso_8601": "2021-03-11T18:32:38.606298Z",
        "url": "https://files.pythonhosted.org/packages/d4/86/2e8b1bd2a604d87ceb818622d9d88fb6f147d5265d86a5e7106a82096d12/nonion-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6f4b369c7d65a8aa9077189570fc7a43687e6cd6564e0815b16fe449649814e",
          "md5": "b64de86dd980684049b952f91db58c2d",
          "sha256": "1664e00d2486c07759feb0e56c89dbe1b6a4d9495c5cf1863170d917eaf351b6"
        },
        "downloads": -1,
        "filename": "nonion-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b64de86dd980684049b952f91db58c2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25776,
        "upload_time": "2021-03-11T18:32:41",
        "upload_time_iso_8601": "2021-03-11T18:32:41.015033Z",
        "url": "https://files.pythonhosted.org/packages/b6/f4/b369c7d65a8aa9077189570fc7a43687e6cd6564e0815b16fe449649814e/nonion-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "813f8ded75a3e14302aaeedd37cd7a4591bfc5a52f68249fd765ca9fc4bb17e9",
          "md5": "e12c5114e0290dcef1bb1656be2b708b",
          "sha256": "0cc8dd31949aae84f5f0a981011033651ecf3f980020646c03cf5930011ba7dd"
        },
        "downloads": -1,
        "filename": "nonion-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e12c5114e0290dcef1bb1656be2b708b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14721,
        "upload_time": "2021-03-11T21:11:35",
        "upload_time_iso_8601": "2021-03-11T21:11:35.880954Z",
        "url": "https://files.pythonhosted.org/packages/81/3f/8ded75a3e14302aaeedd37cd7a4591bfc5a52f68249fd765ca9fc4bb17e9/nonion-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a18c88e2a40a8a3faa614959f3127307dd8d429ae7a1ee1523625923e31c80d",
          "md5": "7e5bc59af79f13cec6d08d62298d6d81",
          "sha256": "1a97744bea3364aec3ba8a43a19320b6b7c117ebd1cd2aa9d50c5518eeec63d3"
        },
        "downloads": -1,
        "filename": "nonion-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "7e5bc59af79f13cec6d08d62298d6d81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28228,
        "upload_time": "2021-03-11T21:11:38",
        "upload_time_iso_8601": "2021-03-11T21:11:38.155128Z",
        "url": "https://files.pythonhosted.org/packages/8a/18/c88e2a40a8a3faa614959f3127307dd8d429ae7a1ee1523625923e31c80d/nonion-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23a23321695016c091fec91528aef5fd9303e3e6265fa8391c1563a1fa5d0b4d",
          "md5": "88271cf4255a669ead1665b51e95e6e8",
          "sha256": "ea0f5d9b43d41751c023586976259c4e2ea612e746d92633cb52151b259342d6"
        },
        "downloads": -1,
        "filename": "nonion-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88271cf4255a669ead1665b51e95e6e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14841,
        "upload_time": "2021-03-26T12:51:15",
        "upload_time_iso_8601": "2021-03-26T12:51:15.894637Z",
        "url": "https://files.pythonhosted.org/packages/23/a2/3321695016c091fec91528aef5fd9303e3e6265fa8391c1563a1fa5d0b4d/nonion-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7d61521ff20011a8653f308d40ce8e234d80b2a0bc9d603d95b9ac9201f69b0",
          "md5": "9156cbface7d558e6d79972279c3fd84",
          "sha256": "e73bf7b1b83fda70057cff15e36f21f9135739dc81894d4c6cfac063d8d265f9"
        },
        "downloads": -1,
        "filename": "nonion-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9156cbface7d558e6d79972279c3fd84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28709,
        "upload_time": "2021-03-26T12:51:18",
        "upload_time_iso_8601": "2021-03-26T12:51:18.184723Z",
        "url": "https://files.pythonhosted.org/packages/e7/d6/1521ff20011a8653f308d40ce8e234d80b2a0bc9d603d95b9ac9201f69b0/nonion-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08bab9fe1602351b5598484be44fcc8b08444ed93e6591abaec78c0f3c30935c",
          "md5": "8e5586f2471b21b47a82841f51541862",
          "sha256": "3f8901f8f9c3875b33c979622f8650886c32c42840c3c472e8202d404c93ee6b"
        },
        "downloads": -1,
        "filename": "nonion-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e5586f2471b21b47a82841f51541862",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16853,
        "upload_time": "2021-03-31T21:34:25",
        "upload_time_iso_8601": "2021-03-31T21:34:25.018764Z",
        "url": "https://files.pythonhosted.org/packages/08/ba/b9fe1602351b5598484be44fcc8b08444ed93e6591abaec78c0f3c30935c/nonion-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99a8006ac443e92e07fecb6997f98442e145eaac7724322e023054f10e06f3c1",
          "md5": "3a955ab7e32aa8711efc8be45b5446e1",
          "sha256": "9825ff72738e6ac31758b879067c6ce4862f410e1406eda7597d9280113007d8"
        },
        "downloads": -1,
        "filename": "nonion-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "3a955ab7e32aa8711efc8be45b5446e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28789,
        "upload_time": "2021-03-31T21:34:27",
        "upload_time_iso_8601": "2021-03-31T21:34:27.583556Z",
        "url": "https://files.pythonhosted.org/packages/99/a8/006ac443e92e07fecb6997f98442e145eaac7724322e023054f10e06f3c1/nonion-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79bb3351820e4f41595b3268fa1c0d1a81780e549871238dcd49df8d6fdc7d2a",
          "md5": "10b015feb2c901dae6b0198eeddbfddb",
          "sha256": "adb8dc0f6c67f62ee8aa11c35490a0d6b98bbb6a6237c42a4f72a2a448c4c5fe"
        },
        "downloads": -1,
        "filename": "nonion-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10b015feb2c901dae6b0198eeddbfddb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17319,
        "upload_time": "2021-04-01T18:29:55",
        "upload_time_iso_8601": "2021-04-01T18:29:55.496363Z",
        "url": "https://files.pythonhosted.org/packages/79/bb/3351820e4f41595b3268fa1c0d1a81780e549871238dcd49df8d6fdc7d2a/nonion-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0c6b973163f416a7e2ef4a5455f7ad0e28ab8287dbed5b76bb766dbfec2a137",
          "md5": "0494e0575fa712079593888c2b23a147",
          "sha256": "286337874d0f67ce1afc6e41b0acd044f6ebc7d890155633b2f213692b7caba8"
        },
        "downloads": -1,
        "filename": "nonion-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "0494e0575fa712079593888c2b23a147",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29861,
        "upload_time": "2021-04-01T18:29:58",
        "upload_time_iso_8601": "2021-04-01T18:29:58.029379Z",
        "url": "https://files.pythonhosted.org/packages/b0/c6/b973163f416a7e2ef4a5455f7ad0e28ab8287dbed5b76bb766dbfec2a137/nonion-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cc2445fd5388d2a9c31bdea1b2ee07915940f9b744a5c288532ec6bc1fc5142",
          "md5": "9550d82f64b270aedf1c53c6bcf983c9",
          "sha256": "27920f253519b4b72eacc26c5498f4acd47c9dad7e9984b1789fbda5b1c64306"
        },
        "downloads": -1,
        "filename": "nonion-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9550d82f64b270aedf1c53c6bcf983c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17490,
        "upload_time": "2021-04-02T14:12:13",
        "upload_time_iso_8601": "2021-04-02T14:12:13.113789Z",
        "url": "https://files.pythonhosted.org/packages/9c/c2/445fd5388d2a9c31bdea1b2ee07915940f9b744a5c288532ec6bc1fc5142/nonion-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2cbec6eb710da62bcaf5241cd4027707a6cdeda20a1acc9b25bcfe1826af3f8",
          "md5": "c989358fcf4f29dd95c227ae2b6ccdff",
          "sha256": "6782bf6414417606c31415138e1e48585b643a7400fb51c388725f4346155dba"
        },
        "downloads": -1,
        "filename": "nonion-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c989358fcf4f29dd95c227ae2b6ccdff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30252,
        "upload_time": "2021-04-02T14:12:15",
        "upload_time_iso_8601": "2021-04-02T14:12:15.559877Z",
        "url": "https://files.pythonhosted.org/packages/d2/cb/ec6eb710da62bcaf5241cd4027707a6cdeda20a1acc9b25bcfe1826af3f8/nonion-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "522cec584936f5b06df502428a3db5cbd94acf168f5a65601a770a1545cdca81",
          "md5": "70fb7eb4b0ff3284714c2863f198ed0d",
          "sha256": "e6eb732ddd6a95c5ecb26d5b94fa496e39698569987c51badb2acc467e42bce7"
        },
        "downloads": -1,
        "filename": "nonion-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70fb7eb4b0ff3284714c2863f198ed0d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17629,
        "upload_time": "2021-04-05T12:44:04",
        "upload_time_iso_8601": "2021-04-05T12:44:04.300093Z",
        "url": "https://files.pythonhosted.org/packages/52/2c/ec584936f5b06df502428a3db5cbd94acf168f5a65601a770a1545cdca81/nonion-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3f69698b0daaa365c5de6a4cdfb9381f00e3ad7bee950d1e0d8fea1b9d961a7",
          "md5": "55793258773e6ad44d10a62ebd626271",
          "sha256": "9e25bd1c6d64bebae8eccd6eb5f3561e2a37abd6225dd2b49e21ba87ad017201"
        },
        "downloads": -1,
        "filename": "nonion-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "55793258773e6ad44d10a62ebd626271",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30711,
        "upload_time": "2021-04-05T12:44:09",
        "upload_time_iso_8601": "2021-04-05T12:44:09.143890Z",
        "url": "https://files.pythonhosted.org/packages/a3/f6/9698b0daaa365c5de6a4cdfb9381f00e3ad7bee950d1e0d8fea1b9d961a7/nonion-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8df5968cfb7546df8ee4e1b7e2d75fdbec83f807d2fcb4bd59379282110d38e2",
          "md5": "8cd4497d09215a13f1d27547c0846001",
          "sha256": "48599184f0177b110cfaa76b44eeb738c7cb8235c7023e31d933617e5df8a343"
        },
        "downloads": -1,
        "filename": "nonion-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8cd4497d09215a13f1d27547c0846001",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17832,
        "upload_time": "2021-04-06T14:29:23",
        "upload_time_iso_8601": "2021-04-06T14:29:23.211236Z",
        "url": "https://files.pythonhosted.org/packages/8d/f5/968cfb7546df8ee4e1b7e2d75fdbec83f807d2fcb4bd59379282110d38e2/nonion-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a0a48d0fb94d7e6a6c774e9b159e49363bc52a4df9c00a9332192771c1d73c7",
          "md5": "dc77328922e3cb58c5c44006b436ef98",
          "sha256": "a4ce98efc112c3428f801c072be970064fab3c1a05a9d50563b2b82e8f38900f"
        },
        "downloads": -1,
        "filename": "nonion-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc77328922e3cb58c5c44006b436ef98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31584,
        "upload_time": "2021-04-06T14:29:26",
        "upload_time_iso_8601": "2021-04-06T14:29:26.139844Z",
        "url": "https://files.pythonhosted.org/packages/5a/0a/48d0fb94d7e6a6c774e9b159e49363bc52a4df9c00a9332192771c1d73c7/nonion-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "693a99309373741a2b3050f3cc6facde30f031934fbe38acafc2042aba8b8bdb",
          "md5": "8862fa549f34b726c736f43341dbb536",
          "sha256": "0f08fdfc215c562c2e2c81fee78c8e7cd133785ce908bc66b5a09684f95f87b6"
        },
        "downloads": -1,
        "filename": "nonion-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8862fa549f34b726c736f43341dbb536",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17941,
        "upload_time": "2021-04-08T20:03:53",
        "upload_time_iso_8601": "2021-04-08T20:03:53.775652Z",
        "url": "https://files.pythonhosted.org/packages/69/3a/99309373741a2b3050f3cc6facde30f031934fbe38acafc2042aba8b8bdb/nonion-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97c7c278a948a430d758a9d5e0f2e1369ad73eb63ff9ec04614bd836c8f710e2",
          "md5": "06e06fad7c292c7c4a944afb37f902b5",
          "sha256": "fb8ed218214ad1a8e757e60c9e4c04483deeefaf88fe88b359e215717ccfbdfe"
        },
        "downloads": -1,
        "filename": "nonion-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "06e06fad7c292c7c4a944afb37f902b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31848,
        "upload_time": "2021-04-08T20:03:56",
        "upload_time_iso_8601": "2021-04-08T20:03:56.050790Z",
        "url": "https://files.pythonhosted.org/packages/97/c7/c278a948a430d758a9d5e0f2e1369ad73eb63ff9ec04614bd836c8f710e2/nonion-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dc586b3324eb1730e20142e73a38aae5470e0350080fab7979bd2f649ca246c",
          "md5": "94bb95bdd489284e2cda3a48be633c03",
          "sha256": "d1b558bfde3fcf5dd74f8dc4e65351f024e7f37a47f3aafe13a7a006c1f0b5d0"
        },
        "downloads": -1,
        "filename": "nonion-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94bb95bdd489284e2cda3a48be633c03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18007,
        "upload_time": "2021-04-09T15:33:41",
        "upload_time_iso_8601": "2021-04-09T15:33:41.043329Z",
        "url": "https://files.pythonhosted.org/packages/9d/c5/86b3324eb1730e20142e73a38aae5470e0350080fab7979bd2f649ca246c/nonion-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b613c6aff37630b6d7681ad936e07a4a974252716417d158a9348022a805053f",
          "md5": "17d022ffcbd955540661c1447503ae17",
          "sha256": "61693bcb3772ed7e37f1f73eafc19460108e5664ff06ea0e7ed6b7eeb3fdd0d6"
        },
        "downloads": -1,
        "filename": "nonion-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "17d022ffcbd955540661c1447503ae17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34593,
        "upload_time": "2021-04-09T15:33:43",
        "upload_time_iso_8601": "2021-04-09T15:33:43.497738Z",
        "url": "https://files.pythonhosted.org/packages/b6/13/c6aff37630b6d7681ad936e07a4a974252716417d158a9348022a805053f/nonion-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b49144eb3d0e663f03ef264e59fc38426d089082cb63770966fd1d0deb843496",
          "md5": "504542928ebe0c972b9962f3e14f3a8e",
          "sha256": "a14f3220d77f2cac7770ee9cb4d69cb56d4e3d9fc0bd2639b1ae8b2678e81d0e"
        },
        "downloads": -1,
        "filename": "nonion-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "504542928ebe0c972b9962f3e14f3a8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18000,
        "upload_time": "2021-04-11T18:15:12",
        "upload_time_iso_8601": "2021-04-11T18:15:12.279536Z",
        "url": "https://files.pythonhosted.org/packages/b4/91/44eb3d0e663f03ef264e59fc38426d089082cb63770966fd1d0deb843496/nonion-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba6e828a98771959321e545bf1d27e9ce9f7634adefd9cd6610f59e5d2b06046",
          "md5": "63b1593e85a634824574c18f4b31e63f",
          "sha256": "cf5d483806023ca2a6f0507587a6cd7a4d408578fcddf86e3a9bc5b631a2d0dc"
        },
        "downloads": -1,
        "filename": "nonion-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "63b1593e85a634824574c18f4b31e63f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34574,
        "upload_time": "2021-04-11T18:15:14",
        "upload_time_iso_8601": "2021-04-11T18:15:14.710878Z",
        "url": "https://files.pythonhosted.org/packages/ba/6e/828a98771959321e545bf1d27e9ce9f7634adefd9cd6610f59e5d2b06046/nonion-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23f796aa1ff2ef2bc4d4d5b992c8ec99df8da0c349cf87d8baddbaee07a77640",
          "md5": "900750b1f4b95554eb778bbb045dffd5",
          "sha256": "95c7d9499fae3bfc8b4012075f857c67a8cd4acf9d34a4e55878c492f14a8dd1"
        },
        "downloads": -1,
        "filename": "nonion-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "900750b1f4b95554eb778bbb045dffd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18588,
        "upload_time": "2021-04-14T20:30:30",
        "upload_time_iso_8601": "2021-04-14T20:30:30.658785Z",
        "url": "https://files.pythonhosted.org/packages/23/f7/96aa1ff2ef2bc4d4d5b992c8ec99df8da0c349cf87d8baddbaee07a77640/nonion-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec05b818e5f220e4f3d13c7eb91a89a51cf30b5a2d5a673200465737e89f3bf8",
          "md5": "50b5caae26f22f2e4fabdbe22e2ca098",
          "sha256": "c10902136f9c0b684df55fe25639322713796b8eabc506328cb35f4d0d980be7"
        },
        "downloads": -1,
        "filename": "nonion-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "50b5caae26f22f2e4fabdbe22e2ca098",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36147,
        "upload_time": "2021-04-14T20:30:33",
        "upload_time_iso_8601": "2021-04-14T20:30:33.771129Z",
        "url": "https://files.pythonhosted.org/packages/ec/05/b818e5f220e4f3d13c7eb91a89a51cf30b5a2d5a673200465737e89f3bf8/nonion-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90a1e5b42b79943e3fbb14c85f6e619c5051461bff01e7e325efaa75e1bfbd6d",
          "md5": "3815d30e15858c3e28591b84136b1ae8",
          "sha256": "cc6863ab978b6ce2f798e81be31b173a6ee7856364821de5d77ba717e7bd713d"
        },
        "downloads": -1,
        "filename": "nonion-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3815d30e15858c3e28591b84136b1ae8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18789,
        "upload_time": "2021-04-22T18:11:20",
        "upload_time_iso_8601": "2021-04-22T18:11:20.912323Z",
        "url": "https://files.pythonhosted.org/packages/90/a1/e5b42b79943e3fbb14c85f6e619c5051461bff01e7e325efaa75e1bfbd6d/nonion-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d32b73fe5def56a325d05939f2dc0e092d67803792a26d66406087e7ae3a3e6e",
          "md5": "884c24c6bfc4ba820ebb81ce1780ace1",
          "sha256": "7df45fe295420e7087d4c43e401afa5a8a247dcd07c2dd797a4d3bb3097266ce"
        },
        "downloads": -1,
        "filename": "nonion-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "884c24c6bfc4ba820ebb81ce1780ace1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36688,
        "upload_time": "2021-04-22T18:11:23",
        "upload_time_iso_8601": "2021-04-22T18:11:23.773288Z",
        "url": "https://files.pythonhosted.org/packages/d3/2b/73fe5def56a325d05939f2dc0e092d67803792a26d66406087e7ae3a3e6e/nonion-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "954b2ad8097b638c30cc3c5311f187c52fd3a3ea52b86c44197e76095bcaf3d2",
          "md5": "cac768ec926891fb49ac1f8908cb3c3a",
          "sha256": "104c30d565c48a1f07cece9c0edb64f7eeb7a2d3b0feab60ca576d21b8ba2618"
        },
        "downloads": -1,
        "filename": "nonion-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cac768ec926891fb49ac1f8908cb3c3a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18545,
        "upload_time": "2021-05-03T20:04:41",
        "upload_time_iso_8601": "2021-05-03T20:04:41.790785Z",
        "url": "https://files.pythonhosted.org/packages/95/4b/2ad8097b638c30cc3c5311f187c52fd3a3ea52b86c44197e76095bcaf3d2/nonion-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e259bf91182f8191c44de1ee4e1207b60600645acf640b539dded904470103da",
          "md5": "bd24f9aa0c772f46446a10d7785743bc",
          "sha256": "2781037b1835e8db2b27aa09a6021ebe0188d68f7cc47afd1f4e7b4795f97f2f"
        },
        "downloads": -1,
        "filename": "nonion-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "bd24f9aa0c772f46446a10d7785743bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35869,
        "upload_time": "2021-05-03T20:04:59",
        "upload_time_iso_8601": "2021-05-03T20:04:59.746093Z",
        "url": "https://files.pythonhosted.org/packages/e2/59/bf91182f8191c44de1ee4e1207b60600645acf640b539dded904470103da/nonion-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7277f778534a17aecd70acf4ef4815f198dfdbdd2f9869fcb42b628871af14a4",
          "md5": "30a549275e9d2f27e957c7250be4b842",
          "sha256": "d3ca7c5e3cc2c982ab8c26d937b01986b8625d57e8b07ce4c02477554f366a7c"
        },
        "downloads": -1,
        "filename": "nonion-0.2.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30a549275e9d2f27e957c7250be4b842",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18702,
        "upload_time": "2021-05-09T10:28:51",
        "upload_time_iso_8601": "2021-05-09T10:28:51.813327Z",
        "url": "https://files.pythonhosted.org/packages/72/77/f778534a17aecd70acf4ef4815f198dfdbdd2f9869fcb42b628871af14a4/nonion-0.2.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcd7324e333458d541dea77a8b71757011625e8ff0debb2e5daaffb7a341fd46",
          "md5": "90026bbdfc5f3e04d8edb963184785e0",
          "sha256": "1ed9bf19c6295243cf71707b74e49a124fa134c022f2e469be91a2fb34a9868c"
        },
        "downloads": -1,
        "filename": "nonion-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "90026bbdfc5f3e04d8edb963184785e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36305,
        "upload_time": "2021-05-09T10:28:55",
        "upload_time_iso_8601": "2021-05-09T10:28:55.026786Z",
        "url": "https://files.pythonhosted.org/packages/fc/d7/324e333458d541dea77a8b71757011625e8ff0debb2e5daaffb7a341fd46/nonion-0.2.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a738d235351dadb0082fdb3257768f5e23de47214808e8658b7b28162d1f04bd",
          "md5": "5cb5867d724dc0d1cb9c5f3eb2e54faf",
          "sha256": "b763250982c68a5cea4860bf6a1fa680f97a9e24404652eaa529ed61ad02530a"
        },
        "downloads": -1,
        "filename": "nonion-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cb5867d724dc0d1cb9c5f3eb2e54faf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18678,
        "upload_time": "2021-05-09T10:30:54",
        "upload_time_iso_8601": "2021-05-09T10:30:54.966437Z",
        "url": "https://files.pythonhosted.org/packages/a7/38/d235351dadb0082fdb3257768f5e23de47214808e8658b7b28162d1f04bd/nonion-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b81e6875424147f75f902bd6bdb82fd08abccfa6053ce919e287c0763a296cd",
          "md5": "d900db5a406c051e93eac13705ce6869",
          "sha256": "0cb026ec3d52023579b761c636d2ed87082bc040658a2e53fdb02b5a9ffa5578"
        },
        "downloads": -1,
        "filename": "nonion-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d900db5a406c051e93eac13705ce6869",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36288,
        "upload_time": "2021-05-09T10:30:58",
        "upload_time_iso_8601": "2021-05-09T10:30:58.227991Z",
        "url": "https://files.pythonhosted.org/packages/2b/81/e6875424147f75f902bd6bdb82fd08abccfa6053ce919e287c0763a296cd/nonion-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ec924c084cd3b856c7ef2f2cb4b708b94cfa92a99e060a4c229de423759be68",
          "md5": "b3fe91b2031f4d6598d0396e2ffd8799",
          "sha256": "d2272eba7e3163b3ca254f87b83723f01c327c4304112060e1730dd63fd5faa3"
        },
        "downloads": -1,
        "filename": "nonion-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3fe91b2031f4d6598d0396e2ffd8799",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18562,
        "upload_time": "2021-05-16T11:17:07",
        "upload_time_iso_8601": "2021-05-16T11:17:07.588718Z",
        "url": "https://files.pythonhosted.org/packages/8e/c9/24c084cd3b856c7ef2f2cb4b708b94cfa92a99e060a4c229de423759be68/nonion-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1e3c2e32b8923e170483c93e44256ea8867d637a457ec4d364ba27203e8f83f",
          "md5": "ab4b4ae49553c91af12c4516c85807b3",
          "sha256": "75cf9d8857fae6ad79d59dd9567a8e56d6d45aa1fee89a4bad20787a5960b7fc"
        },
        "downloads": -1,
        "filename": "nonion-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ab4b4ae49553c91af12c4516c85807b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36043,
        "upload_time": "2021-05-16T11:17:10",
        "upload_time_iso_8601": "2021-05-16T11:17:10.888520Z",
        "url": "https://files.pythonhosted.org/packages/c1/e3/c2e32b8923e170483c93e44256ea8867d637a457ec4d364ba27203e8f83f/nonion-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fd58402a371722e2cece373ce1311fe1d0852c158c8ffafafe0673ab91bae97",
          "md5": "6e7933f178a658c38335153d6ec4429a",
          "sha256": "89bcc12181e9b4ebf1d8648ded6ead378fbd7412e12abde534cedd6e8b06c69f"
        },
        "downloads": -1,
        "filename": "nonion-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e7933f178a658c38335153d6ec4429a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19706,
        "upload_time": "2021-07-03T15:31:43",
        "upload_time_iso_8601": "2021-07-03T15:31:43.445496Z",
        "url": "https://files.pythonhosted.org/packages/9f/d5/8402a371722e2cece373ce1311fe1d0852c158c8ffafafe0673ab91bae97/nonion-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3cfe8417c025ee330ea704cc6da0c86ef375d95457754b48466b58a8a23d823",
          "md5": "6822f92cc09be310ee80f35e0039eeaa",
          "sha256": "debfc19fc3b9a33070e587cb4d63d8e06f07ccba90552e11afd3b915a47abbdf"
        },
        "downloads": -1,
        "filename": "nonion-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6822f92cc09be310ee80f35e0039eeaa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37011,
        "upload_time": "2021-07-03T15:31:46",
        "upload_time_iso_8601": "2021-07-03T15:31:46.432283Z",
        "url": "https://files.pythonhosted.org/packages/e3/cf/e8417c025ee330ea704cc6da0c86ef375d95457754b48466b58a8a23d823/nonion-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ba6d9f93d6c15d7e73c4fff959ad54853b741554f9b0b7e034f3abd39e587c5",
          "md5": "220bdcc06e170d677832573900a1c6a1",
          "sha256": "ea9cbf69726703c8340c39e7b6a716b028fccd7d5fd281a457987faf80df7cbd"
        },
        "downloads": -1,
        "filename": "nonion-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "220bdcc06e170d677832573900a1c6a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20467,
        "upload_time": "2021-07-07T16:48:19",
        "upload_time_iso_8601": "2021-07-07T16:48:19.299181Z",
        "url": "https://files.pythonhosted.org/packages/2b/a6/d9f93d6c15d7e73c4fff959ad54853b741554f9b0b7e034f3abd39e587c5/nonion-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ce11862769adf8614332b0e47bc54d47865c743087c1c2bd18a404f94ca2683",
          "md5": "7a1fa649af74178ed768e0c4929f6a88",
          "sha256": "2b219602d084edf64c8dabe0ac9d881a39ca3d6704879f2c143e65e84bd36b21"
        },
        "downloads": -1,
        "filename": "nonion-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7a1fa649af74178ed768e0c4929f6a88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39249,
        "upload_time": "2021-07-07T16:48:22",
        "upload_time_iso_8601": "2021-07-07T16:48:22.448382Z",
        "url": "https://files.pythonhosted.org/packages/9c/e1/1862769adf8614332b0e47bc54d47865c743087c1c2bd18a404f94ca2683/nonion-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95fddb984fd65c3d412365237b3e1fa492e1db8231c1ff8c48913760a738cdf0",
          "md5": "017ca5e5cfd76d4cf077a70ed2bf9422",
          "sha256": "fa69516bda4c09f55fcb137dc3eb8075125102eee48ecd8c216f6db162dc5c42"
        },
        "downloads": -1,
        "filename": "nonion-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "017ca5e5cfd76d4cf077a70ed2bf9422",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21015,
        "upload_time": "2021-07-13T11:15:57",
        "upload_time_iso_8601": "2021-07-13T11:15:57.314776Z",
        "url": "https://files.pythonhosted.org/packages/95/fd/db984fd65c3d412365237b3e1fa492e1db8231c1ff8c48913760a738cdf0/nonion-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed72ba4462934d338501e1854b0e6703a5dee5712c6dfde4acc88eb2fd822a09",
          "md5": "a5322513267fa0d557bf95e2350072f3",
          "sha256": "acce2c679b83705c3af2953b7a91a13aeafac0f1b23e9465f2cf1fd5ef5633d2"
        },
        "downloads": -1,
        "filename": "nonion-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a5322513267fa0d557bf95e2350072f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40898,
        "upload_time": "2021-07-13T11:16:00",
        "upload_time_iso_8601": "2021-07-13T11:16:00.062805Z",
        "url": "https://files.pythonhosted.org/packages/ed/72/ba4462934d338501e1854b0e6703a5dee5712c6dfde4acc88eb2fd822a09/nonion-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f30f132ed1a6a75a66b307fa25e53fa215a6e7aa508eaeed4c3b8888515e65f",
          "md5": "fe2f2a5ea56931a444746345ad890a94",
          "sha256": "aaaaf0a9bab8619eb91851ae6efd7991996373967dfda8461463e2eab03f10cc"
        },
        "downloads": -1,
        "filename": "nonion-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe2f2a5ea56931a444746345ad890a94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21223,
        "upload_time": "2021-07-27T12:26:50",
        "upload_time_iso_8601": "2021-07-27T12:26:50.111808Z",
        "url": "https://files.pythonhosted.org/packages/6f/30/f132ed1a6a75a66b307fa25e53fa215a6e7aa508eaeed4c3b8888515e65f/nonion-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "949fdd4b4de1b88289c9caf25ec10d8905d4386818734bb7b4db77137c346dca",
          "md5": "0c69001dc72b53b96132c3c0b446832e",
          "sha256": "cef31486b3ffc8a6a7a9ebaaffe732a61d8a348564bee8bb793164c97b492a1e"
        },
        "downloads": -1,
        "filename": "nonion-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0c69001dc72b53b96132c3c0b446832e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41332,
        "upload_time": "2021-07-27T12:26:52",
        "upload_time_iso_8601": "2021-07-27T12:26:52.938302Z",
        "url": "https://files.pythonhosted.org/packages/94/9f/dd4b4de1b88289c9caf25ec10d8905d4386818734bb7b4db77137c346dca/nonion-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a14cc82d9e3332a21ab19bdc5916b84dc5456469615d889e141ef94e71c85f9b",
          "md5": "0d47f05db910af7768f186bcb08ec79d",
          "sha256": "63824d9a7951c11656f4b97dbc3f151627e479176a01dc83189ac3d7359f2ed8"
        },
        "downloads": -1,
        "filename": "nonion-0.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d47f05db910af7768f186bcb08ec79d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21491,
        "upload_time": "2021-08-17T15:34:06",
        "upload_time_iso_8601": "2021-08-17T15:34:06.106958Z",
        "url": "https://files.pythonhosted.org/packages/a1/4c/c82d9e3332a21ab19bdc5916b84dc5456469615d889e141ef94e71c85f9b/nonion-0.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8f856929cf6469ac6a5ab542233efb7781e2990d4f19ef3de25d1440b82e614",
          "md5": "470e21e472ebfe0eaf7c5013fbeecb58",
          "sha256": "00003d1bd7b704819f2423adfb3fd01edcb1ef127f72b321e962c689caa6a974"
        },
        "downloads": -1,
        "filename": "nonion-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "470e21e472ebfe0eaf7c5013fbeecb58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41923,
        "upload_time": "2021-08-17T15:34:12",
        "upload_time_iso_8601": "2021-08-17T15:34:12.214797Z",
        "url": "https://files.pythonhosted.org/packages/a8/f8/56929cf6469ac6a5ab542233efb7781e2990d4f19ef3de25d1440b82e614/nonion-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07ad430e296428900b0e1935e4ec0216ff6821be2ff38139006af9047b299109",
          "md5": "57caa2e8e209b1c8f34d8a3cf74875a9",
          "sha256": "4c2740044c918f95bc218024be08afe1ad17d5c710d4c751efbfeaa68eeab0a1"
        },
        "downloads": -1,
        "filename": "nonion-0.3.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57caa2e8e209b1c8f34d8a3cf74875a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21526,
        "upload_time": "2021-08-17T15:54:12",
        "upload_time_iso_8601": "2021-08-17T15:54:12.628941Z",
        "url": "https://files.pythonhosted.org/packages/07/ad/430e296428900b0e1935e4ec0216ff6821be2ff38139006af9047b299109/nonion-0.3.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6024f2dd0ad424e42fc2c53d0b16738f5c2e0b6fb379d60814be6751e4209326",
          "md5": "2c4b974412c14999a42f609328ed8228",
          "sha256": "5667dda777a4777f17b180b15dfc8a1ff93180ef6603daa3a743ca5f626eda62"
        },
        "downloads": -1,
        "filename": "nonion-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "2c4b974412c14999a42f609328ed8228",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41972,
        "upload_time": "2021-08-17T15:54:15",
        "upload_time_iso_8601": "2021-08-17T15:54:15.623096Z",
        "url": "https://files.pythonhosted.org/packages/60/24/f2dd0ad424e42fc2c53d0b16738f5c2e0b6fb379d60814be6751e4209326/nonion-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8faa0b846e63471f49deddd054e101d876fa32ffc13263882d0b029c8191ccf9",
          "md5": "bdb941bccf8c471c12daf7a9b5911d73",
          "sha256": "cfc8542941a4f7bb637a302c2f4c0f4b6c64f35cd134d9d9c442a7e5328800dc"
        },
        "downloads": -1,
        "filename": "nonion-0.3.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bdb941bccf8c471c12daf7a9b5911d73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21894,
        "upload_time": "2021-08-18T10:22:54",
        "upload_time_iso_8601": "2021-08-18T10:22:54.511003Z",
        "url": "https://files.pythonhosted.org/packages/8f/aa/0b846e63471f49deddd054e101d876fa32ffc13263882d0b029c8191ccf9/nonion-0.3.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "519d349657a88872485707553ee8805b482a26ef835bf0d0e72056f69ea8921d",
          "md5": "03c23e4c4046ad62b65185b2b533a893",
          "sha256": "3d4d2604f0c2f49ec2e7401c6e668024039486ff154acf76609b18ff4f726c72"
        },
        "downloads": -1,
        "filename": "nonion-0.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "03c23e4c4046ad62b65185b2b533a893",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 42943,
        "upload_time": "2021-08-18T10:22:57",
        "upload_time_iso_8601": "2021-08-18T10:22:57.235952Z",
        "url": "https://files.pythonhosted.org/packages/51/9d/349657a88872485707553ee8805b482a26ef835bf0d0e72056f69ea8921d/nonion-0.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5627b1b2c5a5787150a3160cacbd060f0554917e589f3910bbbc27f764329fc",
          "md5": "c560dbed4d0afa1d0a8c2196fc6f2b60",
          "sha256": "1c58e9520393a87a70dd72bab34ed933fdda814849f906f23498cb774e84acd6"
        },
        "downloads": -1,
        "filename": "nonion-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c560dbed4d0afa1d0a8c2196fc6f2b60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18730,
        "upload_time": "2021-09-27T14:47:05",
        "upload_time_iso_8601": "2021-09-27T14:47:05.897458Z",
        "url": "https://files.pythonhosted.org/packages/b5/62/7b1b2c5a5787150a3160cacbd060f0554917e589f3910bbbc27f764329fc/nonion-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a97dee522494ad992d056dd0f64be9ba5456352f05489bc1e8f3eb74ace9259e",
          "md5": "f5c912df4d563d24fa75b43303502375",
          "sha256": "8d10e0dd473a5f8cddf9c176486fd2900b0d41a023e7353029eb55ce6eab2b1a"
        },
        "downloads": -1,
        "filename": "nonion-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f5c912df4d563d24fa75b43303502375",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36252,
        "upload_time": "2021-09-27T14:47:11",
        "upload_time_iso_8601": "2021-09-27T14:47:11.527589Z",
        "url": "https://files.pythonhosted.org/packages/a9/7d/ee522494ad992d056dd0f64be9ba5456352f05489bc1e8f3eb74ace9259e/nonion-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5024a44d5f96748cd476976a2dc5399451217e303c5ca4bf9d54d573d242fe4d",
          "md5": "8e56764aa3adfb7a95a7d206fb5668f8",
          "sha256": "8e85ecdf64261492b08c1245babf41da9dc9c16f8e7f0d86548c0cbc11afedc8"
        },
        "downloads": -1,
        "filename": "nonion-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e56764aa3adfb7a95a7d206fb5668f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19214,
        "upload_time": "2022-01-23T11:02:45",
        "upload_time_iso_8601": "2022-01-23T11:02:45.824116Z",
        "url": "https://files.pythonhosted.org/packages/50/24/a44d5f96748cd476976a2dc5399451217e303c5ca4bf9d54d573d242fe4d/nonion-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2faca01255f20d3824c8c82f932222c32da5fd9b02e578c4f8352c2e77841c7",
          "md5": "3a0dbefc8f2bd6c9497f5027ca5a8bb3",
          "sha256": "872caef8921a823540667427ff1126316faf1650c6c2ffa0efa2129cc3d25e31"
        },
        "downloads": -1,
        "filename": "nonion-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3a0dbefc8f2bd6c9497f5027ca5a8bb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37235,
        "upload_time": "2022-01-23T11:02:49",
        "upload_time_iso_8601": "2022-01-23T11:02:49.405562Z",
        "url": "https://files.pythonhosted.org/packages/f2/fa/ca01255f20d3824c8c82f932222c32da5fd9b02e578c4f8352c2e77841c7/nonion-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ac89621f2fdbaf6875955148e19f2eb5f9aa10474df5521b2b7f355aa939170",
          "md5": "d0cde07932f4bc10adbc6f1b66626042",
          "sha256": "e43d2c292be0d3d869c672c0bf70208df139d2f2fbdc3808ce76ee753aaae379"
        },
        "downloads": -1,
        "filename": "nonion-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0cde07932f4bc10adbc6f1b66626042",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19497,
        "upload_time": "2022-04-13T14:23:10",
        "upload_time_iso_8601": "2022-04-13T14:23:10.112360Z",
        "url": "https://files.pythonhosted.org/packages/3a/c8/9621f2fdbaf6875955148e19f2eb5f9aa10474df5521b2b7f355aa939170/nonion-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d3d138122602d09994329058f5573413e51d2e9911bda1ae7e8d9be8f9703c9",
          "md5": "ebb4c4385f39d85384d252bf86e9c8c8",
          "sha256": "c6b8e8e3979cae7e8a47f83f35fdc4a9ff5123980159db1da497ac3ff235a428"
        },
        "downloads": -1,
        "filename": "nonion-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ebb4c4385f39d85384d252bf86e9c8c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37996,
        "upload_time": "2022-04-13T14:23:14",
        "upload_time_iso_8601": "2022-04-13T14:23:14.584458Z",
        "url": "https://files.pythonhosted.org/packages/5d/3d/138122602d09994329058f5573413e51d2e9911bda1ae7e8d9be8f9703c9/nonion-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac282478e647f9bae0fce5475d131ddb0060114f015211c582492b695f916cd6",
          "md5": "6028ba956c1221ec81ed0e9e7e719ad2",
          "sha256": "8e811db9f60d78aece6ee83b163632310017ef335ffa2eb437ab7cdb99e027c2"
        },
        "downloads": -1,
        "filename": "nonion-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6028ba956c1221ec81ed0e9e7e719ad2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19567,
        "upload_time": "2022-05-11T16:21:52",
        "upload_time_iso_8601": "2022-05-11T16:21:52.895986Z",
        "url": "https://files.pythonhosted.org/packages/ac/28/2478e647f9bae0fce5475d131ddb0060114f015211c582492b695f916cd6/nonion-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9468712338e9b9049fd4b7ac314ad7852f158a333fe364de2b698d42608f8fe7",
          "md5": "27c9eb0b8792a46d56c7b6aab3c11741",
          "sha256": "0c49f08be519f6d584a3fa891b4b01f68a6d4b7552ec83c0a266c51b3753a796"
        },
        "downloads": -1,
        "filename": "nonion-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "27c9eb0b8792a46d56c7b6aab3c11741",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38156,
        "upload_time": "2022-05-11T16:21:59",
        "upload_time_iso_8601": "2022-05-11T16:21:59.140884Z",
        "url": "https://files.pythonhosted.org/packages/94/68/712338e9b9049fd4b7ac314ad7852f158a333fe364de2b698d42608f8fe7/nonion-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42f89cf07398319fafe7e25bec71b5e08b7a5a50d68392d77569c713a72bada0",
          "md5": "a3b34543b035479f1e912c487490dc5d",
          "sha256": "a806ee7950727224174a9c3dcd56b22e9e313abfbb3e118caa4e757f259397aa"
        },
        "downloads": -1,
        "filename": "nonion-0.4.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3b34543b035479f1e912c487490dc5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19953,
        "upload_time": "2022-07-21T16:39:28",
        "upload_time_iso_8601": "2022-07-21T16:39:28.244908Z",
        "url": "https://files.pythonhosted.org/packages/42/f8/9cf07398319fafe7e25bec71b5e08b7a5a50d68392d77569c713a72bada0/nonion-0.4.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f77281e8bc2dbb61761b13c7dabda055296a0c32ef50749c69e5d103d0538d2e",
          "md5": "d7ec4dd056fd3824691f352023db4079",
          "sha256": "837e38cc8c3fe1d4278dee15734eee05e89554b3f5bf4cc1e1bac2eeb5d7b62f"
        },
        "downloads": -1,
        "filename": "nonion-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d7ec4dd056fd3824691f352023db4079",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39379,
        "upload_time": "2022-07-21T16:39:38",
        "upload_time_iso_8601": "2022-07-21T16:39:38.596246Z",
        "url": "https://files.pythonhosted.org/packages/f7/72/81e8bc2dbb61761b13c7dabda055296a0c32ef50749c69e5d103d0538d2e/nonion-0.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42f89cf07398319fafe7e25bec71b5e08b7a5a50d68392d77569c713a72bada0",
        "md5": "a3b34543b035479f1e912c487490dc5d",
        "sha256": "a806ee7950727224174a9c3dcd56b22e9e313abfbb3e118caa4e757f259397aa"
      },
      "downloads": -1,
      "filename": "nonion-0.4.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a3b34543b035479f1e912c487490dc5d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19953,
      "upload_time": "2022-07-21T16:39:28",
      "upload_time_iso_8601": "2022-07-21T16:39:28.244908Z",
      "url": "https://files.pythonhosted.org/packages/42/f8/9cf07398319fafe7e25bec71b5e08b7a5a50d68392d77569c713a72bada0/nonion-0.4.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f77281e8bc2dbb61761b13c7dabda055296a0c32ef50749c69e5d103d0538d2e",
        "md5": "d7ec4dd056fd3824691f352023db4079",
        "sha256": "837e38cc8c3fe1d4278dee15734eee05e89554b3f5bf4cc1e1bac2eeb5d7b62f"
      },
      "downloads": -1,
      "filename": "nonion-0.4.4.tar.gz",
      "has_sig": false,
      "md5_digest": "d7ec4dd056fd3824691f352023db4079",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 39379,
      "upload_time": "2022-07-21T16:39:38",
      "upload_time_iso_8601": "2022-07-21T16:39:38.596246Z",
      "url": "https://files.pythonhosted.org/packages/f7/72/81e8bc2dbb61761b13c7dabda055296a0c32ef50749c69e5d103d0538d2e/nonion-0.4.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}