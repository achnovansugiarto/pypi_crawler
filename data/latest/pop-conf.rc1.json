{
  "info": {
    "author": "Thomas S Hatch",
    "author_email": "thatch45@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "========\nPop Conf\n========\n\nPop-conf a legacy tool to allow for creating and app-merging\nconfiguration options for `pop` projects. Plugin Oriented Programming\npresents a means to merge multiple applications together dynamically.\nThis capabilities requires that the startup of these applications needs\nto be managed from within the programming paradigm.\n`pop-config` is a more advanced version of this tool and should be used instead.\n\nPop-conf is not just about being able to work with `pop` projects\nto facilitate app-merging, it has also been designed to make the startup\nof an application much simpler, and to make the expensive boiler plate\nof startup and configuration as transparent as possible. When making\n`pop` projects the idea is that projects are developed in very small\nchunks and are then dynamically merged together. So the creation of\nthese mergeable apps needs to be quick and easy!\n\nPop-conf also solves a problem with configuration of applications,\nwhen making a new application, if you want robust configuration\nloading, you need to be able to take options from the command line,\nenvironment variables, and configuration files. Pop-conf does all\nof this for you, and loads them in the correct order, all behind the\nscenes, making your life easier.\n\nUnderstanding the conf.py\n=========================\n\nPop relies on a configuration file to manage how to merge apps, and\nalso how to manage and merge configuration data. The data in this file\nis presented in 4 Python dictionaries and defines every aspect of\nconfiguration loading.\n\nThe 4 dictionaries are called *CONFIG*, *CLI_CONFIG*, *SUBCOMMANDS*\nand *DYNE*. Each dictionary serves a specific purpose. Between them\nyou can define how the cli arguments are presented, all configuration\ndefaults, documentation, etc.\n\nThe CONFIG Dictionary\n=====================\n\nThe bulk of the configuration will be present in the *CONFIG* dictionary.\nall of your configuration options are defined here. Most entries in the\n*CONFIG* dictionary will be very simple and just expose the most basic\nvalues:\n\n.. code-block:: python\n\n    CONFIG = {\n        \"name\": {\n            \"default\": \"frank\",\n            \"help\": \"Enter the name to use\",\n        },\n    }\n\nThis simple example presents the documentation for the configuration value\nand what the default value should be.\n\nVertically app-merged projects can add config items to their parent dynes like so:\n\n.. code-block:: python\n\n    CONFIG = {\n        \"new_item\": {\n            \"type\": int,\n            \"default\": 1,\n            \"dyne\": \"idem\",\n        },\n    }\n\nMany more options can be used, but they will be covered in the reference\ndocument.\n\nThe CLI_CONFIG Dictionary\n=========================\n\nAdding a configuration value does not make it appear on the command line.\nEach application can be extended to include command line options.\nLets extend our earlier example to expose the \"name\" option as a command\nline argument:\n\n.. code-block:: python\n\n    CLI_CONFIG = {\n        \"name\": {},\n    }\n    CONFIG = {\n        \"name\": {\n            \"default\": \"frank\",\n            \"help\": \"Enter the name to use\",\n        },\n    }\n\nThat's it! The \"name\" option is now available on the command line and can\nbe used as `--name bob`.\n\nBut what if we want it to be a positional argument? Simple! Just add the\npositional option to the *CLI_CONFIG*:\n\n.. code-block:: python\n\n    CLI_CONFIG = {\n        \"name\": {\n            \"positional\": True,\n        },\n    }\n    CONFIG = {\n        \"name\": {\n            \"default\": \"frank\",\n            \"help\": \"Enter the name to use\",\n        },\n    }\n\nYou can inherit cli args from another project.  Say, for example that you want to implement the `--output` flag\nexactly the same way `rend` does, you can source it like this:\n\n.. code-block:: python\n\n    CLI_CONFIG = {\n        \"output\": {\n            \"source\": \"rend\",\n        },\n    }\n\nMany more options exist that allow you to control every aspect of the user's\ncommand line experience.\n\nThe SUBCOMMANDS Dictionary\n==========================\n\nSometimes it is desirable to have subcommands. Subcommands allow your CLI\nto work in a way similar to the git cli, where you have multiple routines\nthat all can be called from a single command.\n\nLets add a few more things to our example so that we can have subcommands.\n\n.. code-block:: python\n\n    CLI_CONFIG = {\n        \"name\": {\n            \"subcommands\": [\"test\", \"apply\"],\n        },\n        \"weight\": {},\n        \"power\": {\n            \"subcommands\": [\"apply\"],\n        },\n    }\n    CONFIG = {\n        \"name\": {\n            \"default\": \"frank\",\n            \"help\": \"Enter the name to use\",\n        },\n        \"weight\": {\n            \"default\": \"150\",\n            \"help\": \"Enter how heavy it should be\",\n        },\n        \"power\": {\n            \"default\": \"100\",\n            \"help\": \"Enter how powerful it should be\",\n        },\n    }\n\n    SUBCOMMANDS = {\n        \"test\": {\n            \"help\": \"Used to test\",\n            \"desc\": \"When running in test mode, things will be tested\",\n        },\n        \"apply\": {\n            \"help\": \"Used to apply\",\n            \"desc\": \"When running in apply mode, things will be applied\",\n        },\n    }\n\n\nIn this example we see that the option `name` will be available under\nthe subcommands `test` and `apply`. The option `power` will be available\nonly under the subcommand `apply` and the option `weight` is globally\navailable.\n\nThe DYNE Dictionary\n===================\n\nThe *DYNE* dictionary allows you to control what dynamic names your app is\npresenting to other `pop` projects. This name gets used not only inside\nof `pop-conf` but also inside of `pop` to determine what plugin subsystems\nthis application merges with. The *DYNE* system allows for your cli to be\nextended by third party code, enabling configuration options to be made\navailable to your application via external code.\n\nThe *DYNE* system is very powerful. But since it is not critical to getting\nstarted with `pop-conf` it will be covered in more depth in another document.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.saltstack.com",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pop-conf",
    "package_url": "https://pypi.org/project/pop-conf/",
    "platform": "",
    "project_url": "https://pypi.org/project/pop-conf/",
    "project_urls": {
      "Homepage": "https://www.saltstack.com"
    },
    "release_url": "https://pypi.org/project/pop-conf/1.0.0/",
    "requires_dist": [
      "pop",
      "PyYAML"
    ],
    "requires_python": ">=3.6",
    "summary": "Legacy config module for pop",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11874045,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d054e8127bc9fd8d245b86c341f2144fd76afb789e8f8eb0ebbd0e1c455aff8",
          "md5": "cc050d729055bde24d83937f29f393fe",
          "sha256": "d11a30ee5f64dc07201e080c2638e6755ff5cd9a59d4d8b872389cb0a2c23b68"
        },
        "downloads": -1,
        "filename": "pop_conf-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc050d729055bde24d83937f29f393fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19973,
        "upload_time": "2021-05-05T02:39:58",
        "upload_time_iso_8601": "2021-05-05T02:39:58.130780Z",
        "url": "https://files.pythonhosted.org/packages/2d/05/4e8127bc9fd8d245b86c341f2144fd76afb789e8f8eb0ebbd0e1c455aff8/pop_conf-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acc18b4e64ea2510789aa4868429f09c34a0ee4f76d41be156e0aba9406c1ddf",
          "md5": "c695320139fe233e9b9b4789a1b8f433",
          "sha256": "50e99131198dd7c286c6c79ac9900cf772ee1e278c40e7e0dc3ebd5d9f8bcef0"
        },
        "downloads": -1,
        "filename": "pop-conf-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c695320139fe233e9b9b4789a1b8f433",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18692,
        "upload_time": "2021-05-05T02:40:00",
        "upload_time_iso_8601": "2021-05-05T02:40:00.530839Z",
        "url": "https://files.pythonhosted.org/packages/ac/c1/8b4e64ea2510789aa4868429f09c34a0ee4f76d41be156e0aba9406c1ddf/pop-conf-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d054e8127bc9fd8d245b86c341f2144fd76afb789e8f8eb0ebbd0e1c455aff8",
        "md5": "cc050d729055bde24d83937f29f393fe",
        "sha256": "d11a30ee5f64dc07201e080c2638e6755ff5cd9a59d4d8b872389cb0a2c23b68"
      },
      "downloads": -1,
      "filename": "pop_conf-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cc050d729055bde24d83937f29f393fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19973,
      "upload_time": "2021-05-05T02:39:58",
      "upload_time_iso_8601": "2021-05-05T02:39:58.130780Z",
      "url": "https://files.pythonhosted.org/packages/2d/05/4e8127bc9fd8d245b86c341f2144fd76afb789e8f8eb0ebbd0e1c455aff8/pop_conf-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "acc18b4e64ea2510789aa4868429f09c34a0ee4f76d41be156e0aba9406c1ddf",
        "md5": "c695320139fe233e9b9b4789a1b8f433",
        "sha256": "50e99131198dd7c286c6c79ac9900cf772ee1e278c40e7e0dc3ebd5d9f8bcef0"
      },
      "downloads": -1,
      "filename": "pop-conf-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c695320139fe233e9b9b4789a1b8f433",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18692,
      "upload_time": "2021-05-05T02:40:00",
      "upload_time_iso_8601": "2021-05-05T02:40:00.530839Z",
      "url": "https://files.pythonhosted.org/packages/ac/c1/8b4e64ea2510789aa4868429f09c34a0ee4f76d41be156e0aba9406c1ddf/pop-conf-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}