{
  "info": {
    "author": "Adam Sussman",
    "author_email": "adam.sussman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: FastAPI",
      "Framework :: Flask",
      "Framework :: Pydantic",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "\n# Better pydantic serialization for API use cases\n\nEnhance pydantic's output serialization with features that can help make better APIs:\n\n1) Output only fields and sets of fields requested by the caller, instead of all fields.\n\nFor example:\n\n```\n    api caller: Give me a User object with only the email and id fields.\n\n    api response: Ok, instead of the usual 20 User fields, here is the object with only two.\n```\n\n2) Expand field values into more complex objects when requested\n\n```\n    api caller: Give me 10 Blog objects AND the User Objects that created them in ONE API response.\n\n    api response: Ok, in addition to Blog.user_id, I will also give you Blog.User and its fields.\n```\n\n\nBoth features are useful if you are using pydantic models to drive\nREST APIs (ie: FastAPI) and you want to emulate the field/expansion\nrequest model of GraphQL or other sophisticated APIs.\n\n## Features\n\n* Simply formatted \"Fields\" Request: When serializing a model, specify which fields you want and get ONLY those fields\n* \"Field Sets\": Ask for specific fields or named groupings of fields\n* \"Expansions\": Create new field names that \"expand\" into bigger objects via complex loading (for example,\n  if you have a user id field, you can ask for the entire user object to be loaded and included\n  in the serialization.\n* Nested Model: Full support for nested models, lists of models, etc...\n* Schema: Augment pydantic json schema generation with fieldset options\n* Integration examples are given for:\n    - Django Ninja\n    - FastAPI\n    - Flask\n\n## Installation\n\n```console\n$ pip install pydantic-enhanced-serializer\n```\n\n## Help\n\n\nSee [documentation](https://github.com/adamsussman/pydantic-enhanced-serializer/tree/main/docs) for full details.\n\n## Quickstart Example - Python\n\nBasically: use `render_fieldset_model` instead of `model.dict()` or `model.json()`.\n\nNote that `render_fieldset_model` is an async function, so you may need\nto await it, depending on your application.\n\n```Python\n    from pydantic import BaseModel\n    from pydantic_enhanced_serializer import render_fieldset_model\n\n    class MyModel(BaseModel):\n        field_1: str\n        field_2: str\n        field_3: str\n        field_4: str\n        expensive_field_5: str\n        expensive_field_6: str\n\n        class Config:\n            # This is the key config\n            fieldsets = {\n                \"default\": [\"field_1\", \"field_2\"],\n                \"extra\": [\"field_3\", \"field_4\"],\n            }\n```\n\nGet only \"default\" fields:\n\n```Python\n    model = MyModel(\n        field_1=\"field1 value\",\n        field_2=\"field2 value\",\n        field_3=\"field3 value\",\n        field_4=\"field4 value\",\n        expensive_field_5=\"field5 value\",\n        expensive_field_6=\"field6 value\",\n    )\n\n    # instead of model.dict() do:\n    result = await render_fieldset_model(\n        model=model,\n        fieldsets=[]\n    )\n```\n\nResult:\n\n```Python\n    # Only \"default\" fieldset fields returned\n    result == {\n        \"field_1\": \"field1 value\",\n        \"field_2\": \"field2 value\",\n    }\n```\n\nAsk for specific fields:\n\n```Python\n    result = await render_fieldset_model(\n        model=model,\n        fieldsets=[\"extra\", \"expensive_field_5\"],\n    )\n```\n\nResult:\n\n```Python\n    # \"default\" fieldset fields, \"extra\" fieldset fields and\n    # \"expensive_field_5\" returned, but NOT \"expensive_field_6\"\n    result == {\n        \"field_1\": \"field1 value\",\n        \"field_2\": \"field2 value\",\n        \"field_3\": \"field3 value\",\n        \"field_4\": \"field4 value\",\n        \"expensive_field_5\": field5 value\",\n    }\n```\n\n## Nested Fields example\n\n```Python\n    class SubModel(BaseModel):\n        subfield1: str\n        subfield2: str\n\n        class Config:\n            fieldsets = {\n                \"default\": [\"subfield1\"],\n            }\n\n    class MyModel(BaseModel):\n        field1: str\n        subfield: SubModel\n\n        class Config:\n            fieldsets = {\n                \"default\": [\"field1\"],\n            }\n\n    result = await render_fieldset_model(\n        model=mymodel_instance,\n        fields=[\"subfield.field2\"]\n    )\n```\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamsussman/pydantic-enhanced-serializer",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydantic-enhanced-serializer",
    "package_url": "https://pypi.org/project/pydantic-enhanced-serializer/",
    "platform": null,
    "project_url": "https://pypi.org/project/pydantic-enhanced-serializer/",
    "project_urls": {
      "Homepage": "https://github.com/adamsussman/pydantic-enhanced-serializer"
    },
    "release_url": "https://pypi.org/project/pydantic-enhanced-serializer/1.0.1/",
    "requires_dist": [
      "pydantic (>=1.8)",
      "mypy ; extra == 'dev'",
      "black ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "flake8-bugbear ; extra == 'dev'",
      "flake8-debugger ; extra == 'dev'",
      "ipdb ; extra == 'dev'",
      "asgiref ; extra == 'test'",
      "aiodataloader ; extra == 'test'",
      "django ; extra == 'test'",
      "django-ninja ; extra == 'test'",
      "fastapi ; extra == 'test'",
      "flask ; extra == 'test'",
      "httpx ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "requests (<3.0.0,>=2.24.0) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Pydantic extension that allows user selection of object fields or expanded inline when serializing models",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17215977,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e00a7f9b09853dededa59a23af5a32b67db3464169d872be68fa88c7fa0f6507",
          "md5": "e0948e8c0ff8cc3e386cf2bc3f54f863",
          "sha256": "ea002d440ab8b3334d4287c38d95aa8ed8235a8aed967ebdc505db658fac3a9f"
        },
        "downloads": -1,
        "filename": "pydantic_enhanced_serializer-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0948e8c0ff8cc3e386cf2bc3f54f863",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15749,
        "upload_time": "2023-03-09T00:20:20",
        "upload_time_iso_8601": "2023-03-09T00:20:20.888078Z",
        "url": "https://files.pythonhosted.org/packages/e0/0a/7f9b09853dededa59a23af5a32b67db3464169d872be68fa88c7fa0f6507/pydantic_enhanced_serializer-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f046a33ee0b4ff6a3dbcd392b5f65ed09f8d97403b6a62cab49c4244aa8ed15c",
          "md5": "f1e89034af5f83c4d72925bffdfdcfcd",
          "sha256": "1be30fb6565d2858a2accd98c44678903467b33bce9d1165b6425dea2e71f486"
        },
        "downloads": -1,
        "filename": "pydantic_enhanced_serializer-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1e89034af5f83c4d72925bffdfdcfcd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17154,
        "upload_time": "2023-03-09T00:54:11",
        "upload_time_iso_8601": "2023-03-09T00:54:11.969605Z",
        "url": "https://files.pythonhosted.org/packages/f0/46/a33ee0b4ff6a3dbcd392b5f65ed09f8d97403b6a62cab49c4244aa8ed15c/pydantic_enhanced_serializer-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f046a33ee0b4ff6a3dbcd392b5f65ed09f8d97403b6a62cab49c4244aa8ed15c",
        "md5": "f1e89034af5f83c4d72925bffdfdcfcd",
        "sha256": "1be30fb6565d2858a2accd98c44678903467b33bce9d1165b6425dea2e71f486"
      },
      "downloads": -1,
      "filename": "pydantic_enhanced_serializer-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1e89034af5f83c4d72925bffdfdcfcd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17154,
      "upload_time": "2023-03-09T00:54:11",
      "upload_time_iso_8601": "2023-03-09T00:54:11.969605Z",
      "url": "https://files.pythonhosted.org/packages/f0/46/a33ee0b4ff6a3dbcd392b5f65ed09f8d97403b6a62cab49c4244aa8ed15c/pydantic_enhanced_serializer-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}