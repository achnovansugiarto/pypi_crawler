{
  "info": {
    "author": "Pablo E.",
    "author_email": "pabloem@apache.org",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# Airflow DAG invariant testing\n\nNote: **Contributions welcome**. I hope this library will belong to the Airflow\ncommunity.\n\nDagcheck is a framework to assert for DAG invariants. Users of dagcheck can\ndefine DAG invariants to test via assertions, and dagcheck will generate DAG\nrun scenarios that verify these invariants.\n\nDagcheck was created so that Airflow users could write tests for their\nDAGs with these characteristics:\n\n- They are easy to read through and understand\n- They do not orchestrate real infrastructure changes\n- They run on a local development environment\n- They run quickly as part of a developer's flow\n- They can be run in CI/CD and catch issues in the future\n\n`dagcheck` is especially useful for DAGs that are complex, and that change\nover time. Tests from `dagcheck` allow you to offload complex dependency\nchecks from your head onto an automatic test.\n\n## Examples\n\nConsider this [example of a complex DAG](https://airflow.apache.org/docs/apache-airflow/stable/usage-cli.html#exporting-dag-structure-as-an-image).\nThis DAG has several possible execution paths - and in case of failures, we may\nwant to ensure that it will not leak resources. For example, we may write a\ntest that checks that if we create a resource successfully, we will always\nclean it up independently of any failure scenario.\n\nFor example, if the task `create_entry_group` succeeds, then we check that\nthe task `delete_entry_group` will **always** run, like so:\n\n\n```python\nexample_dag = DagBag().get_dag(\"example_complex\")\n\n# First check: If we create an entry group, we want to make sure\n# it will be cleaned up.\nassert_that(\n    given(example_dag)\n    .when(task(\"create_entry_group\"), succeeds())\n    .then(task(\"delete_entry_group\"), will_run())\n)\n```\n\nBy creating this test, and running it in CI, we can quickly make sure that\nour DAG will behave as expected, no matter how much it changes.\n\nTo see other examples of usage of the API, look at [our unit tests](\ndagcheck/tests/dagcheck_simple_api_test.py) and our [small sample DAGs](\ndagcheck/tests/dagcheck_test_example_dags_utils.py).\n\n## Configuring `dagcheck`\n\nTODO(pabloem)\n\n## Caveats and pitfalls\n\nDagcheck works by simulating DAG execution scenarios.\n\n### DAGs that are dependent on side effects\n\nDagcheck simulates DAG executions, but it will not orchestrate any changes. If\nparts of your DAG execution depend on side effects from other operators, then\nDagcheck **will not know** about this.\n\nFor example, consider a DAG that performs a database export operation, checks\nthe output of those files, and uses them for something else. Something like:\n\n```python\n(\n  DatabaseExportOperator(\n    'data_warehouse_export'\n    destination='database_export_file',\n    ...\n  ) >>\n  CheckFileExistsOperator(\n    'check_export_went_well'\n    filename='database_export_file'\n  ) >>\n  ArchiveFileInColdStorageOperator(\n    'save_backup_to_storage'\n    ...\n  )\n)\n```\n\nIn the above code sample, the following statement is true:\n\n- **If the database export runs properly**, then the file existence check\n   **should** succeed. and the archiving operator will run.\n- This is because there is an implicit assumption that if `data_warehouse_export`\n    runs properly (i.e. succeeds), then `check_export_went_well` *will succeed*.\n\nBut the following dagcheck test will fail:\n\n```python\n# Bad test example:\nassert_that(\n  given(the_dag)\n  .when('data_warehouse_export', succeeds())\n  .then('save_backup_to_storage', will_run())\n)\n```\n\nThis test fails because Dagcheck does not know about the implicit assumption,\nand assumes that the intermediate task between `data_warehouse_export` and\n`save_backup_to_storage` *may still fail*.\n\nThere are a couple ways to write this test to work well with dagcheck. Here's\none of them:\n\n```python\n# Good test example:\n\nassert_that(\n  given(the_dag)\n  .when('data_warehouse_export', succeeds())\n  .then('check_export_went_well', will_run())\n\nassert_that(\n  given(the_dag)\n  .when('check_export_went_well', succeeds())\n  .then('save_backup_to_storage', will_run())\n)\n```\n\n## TODOs before first launch\n\n- Figure out the name of the library (dagcheck? dagtest? flowtest? ilikedags? flowcheck?, assertflow?)\n- Figure out whether this belongs to airflow or is an independent library\n- Implement DAG-failure and DAG-assumption checkers.\n\n### Raw Development Notes\n\n- 2022/09/16: Picking up the development environment again\n\nI started developing the library as part of airflow/, and later put it in the\n`airflow_play/dagcheck/` directory. Because of this, a lot of import paths in the \n`dagcheck/` directory are hacked up.\n\nCurrently, dagcheck tests require an Airflow instance running. To set up the local\ndevelopment environment for dagcheck, you need to run:\n\n```shell\n# From airflow_play/\n\n# Activate your local virtualenv\n. venv/bin/activate\n\n# Run your standalone Airflow instance that runs beside the code\nexport AIRFLOW_HOME=~/codes/airflow_play/home/\nairflow standalone\n```\n\nOnce that is set up, you can run tests.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "airflow,testing,apache airflow,apache",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dagcheck",
    "package_url": "https://pypi.org/project/dagcheck/",
    "platform": null,
    "project_url": "https://pypi.org/project/dagcheck/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dagcheck/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A local testing framework for Airflow DAGs.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15364362,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60e55883785bb331098f1a8605093a03f55538bdeb276bc647a8cee9bc3d4636",
          "md5": "98e5150a61f7723fe57873705de8f6ed",
          "sha256": "76d7c2a7e5e97880656937668ccf86f746b5874d5d6513ba122794f4788134b5"
        },
        "downloads": -1,
        "filename": "dagcheck-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98e5150a61f7723fe57873705de8f6ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17764,
        "upload_time": "2022-10-06T19:29:48",
        "upload_time_iso_8601": "2022-10-06T19:29:48.151479Z",
        "url": "https://files.pythonhosted.org/packages/60/e5/5883785bb331098f1a8605093a03f55538bdeb276bc647a8cee9bc3d4636/dagcheck-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d62bb0943c8acf82fba9ed0855e664c89095b57415760ead88aa6ebb6e5b90c",
          "md5": "25babfdea27baecb4f562b8b63cae772",
          "sha256": "a51b96dde2b85b57e25c35bc8f96b80e384a3344eda612dc3699d035128ac53a"
        },
        "downloads": -1,
        "filename": "dagcheck-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25babfdea27baecb4f562b8b63cae772",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19262,
        "upload_time": "2022-10-06T19:36:00",
        "upload_time_iso_8601": "2022-10-06T19:36:00.051275Z",
        "url": "https://files.pythonhosted.org/packages/1d/62/bb0943c8acf82fba9ed0855e664c89095b57415760ead88aa6ebb6e5b90c/dagcheck-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "429c3354fe85995f8ca6dd56972c404ade7fbc2dede38d083752327e910c68f4",
          "md5": "ac2fa292dcb11784afea3d73dd73dbe9",
          "sha256": "a4de65440e24eb35aa49b4cb0ab16cef82bbc0507b14d7dd98261952fd0fdd97"
        },
        "downloads": -1,
        "filename": "dagcheck-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ac2fa292dcb11784afea3d73dd73dbe9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20279,
        "upload_time": "2022-10-10T17:06:35",
        "upload_time_iso_8601": "2022-10-10T17:06:35.936175Z",
        "url": "https://files.pythonhosted.org/packages/42/9c/3354fe85995f8ca6dd56972c404ade7fbc2dede38d083752327e910c68f4/dagcheck-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "429c3354fe85995f8ca6dd56972c404ade7fbc2dede38d083752327e910c68f4",
        "md5": "ac2fa292dcb11784afea3d73dd73dbe9",
        "sha256": "a4de65440e24eb35aa49b4cb0ab16cef82bbc0507b14d7dd98261952fd0fdd97"
      },
      "downloads": -1,
      "filename": "dagcheck-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ac2fa292dcb11784afea3d73dd73dbe9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20279,
      "upload_time": "2022-10-10T17:06:35",
      "upload_time_iso_8601": "2022-10-10T17:06:35.936175Z",
      "url": "https://files.pythonhosted.org/packages/42/9c/3354fe85995f8ca6dd56972c404ade7fbc2dede38d083752327e910c68f4/dagcheck-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}