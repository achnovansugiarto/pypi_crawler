{
  "info": {
    "author": "Markus Ressel",
    "author_email": "mail@markusressel.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# telegram-click-aio [![Contributors](https://img.shields.io/github/contributors/markusressel/telegram-click-aio.svg)](https://github.com/markusressel/telegram-click-aio/graphs/contributors) [![MIT License](https://img.shields.io/github/license/markusressel/telegram-click-aio.svg)](/LICENSE) ![Code Size](https://img.shields.io/github/languages/code-size/markusressel/telegram-click-aio.svg) [![Latest Version](https://badge.fury.io/py/telegram-click-aio.svg)](https://pypi.org/project/telegram-click-aio/) [![Build Status](https://travis-ci.org/markusressel/telegram-click-aio.svg?branch=master)](https://travis-ci.org/markusressel/telegram-click-aio)\n\n[Click](https://github.com/pallets/click/) \ninspired command-line interface creation toolkit for \n[aiogram](https://github.com/aiogram/aiogram).\n\nFor a [python-telegram-bot](https://github.com/python-telegram-bot/python-telegram-bot) compatible variant\nhave a look at [telegram-click](https://github.com/markusressel/telegram-click)!\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/markusressel/telegram-click/master/screenshots/demo1.png\" width=\"400\"> <img src=\"https://raw.githubusercontent.com/markusressel/telegram-click/master/screenshots/demo2.png\" width=\"400\"> \n</p>\n\n# Features\n* [x] POSIX style argument parsing\n  * [x] Quoted arguments (`/command \"Hello World\"`)\n  * [x] Named arguments (`/command --text \"Hello World\"`)\n  * [x] Value Separator (`/command --text=myvalue` )\n  * [x] Flags (`/command --yes`)\n  * [x] Multiple combined Flags (`/command -Syu`)\n  * [x] Optional arguments\n  * [x] Type conversion including support for custom types\n  * [x] Argument input validation\n* [x] Automatic help messages\n  * [x] Show help messages when a command was used with invalid arguments\n  * [x] List all available commands with a single method\n* [x] Permission handling\n  * [x] Set up permissions for each command separately\n  * [x] Limit command execution to private chats or group admins\n  * [x] Combine permissions using logical operators\n  * [x] Create custom permission handlers\n* [x] Error handling\n  * [x] Automatically send error and help messages if something goes wrong\n  * [x] Write custom error handlers\n\n# How to use\n\nInstall this library as a dependency to use it in your project.\n\n```shell\npip install telegram-click-aio\n```\n\nThen annotate your command handler functions with the `@command` decorator\nof this library:\n\n```python\nfrom aiogram.types import Message\nfrom telegram_click_aio.decorator import command\nfrom telegram_click_aio.argument import Argument\n\nclass MyBot:\n\n    [...]\n\n    @command(name='start', description='Start bot interaction')\n    def _start_command_callback(self, message: Message):\n        # do something\n        pass\n\n    @command(name='age', \n             description='Set age',\n             arguments=[\n                 Argument(name='age',\n                          description='The new age',\n                          type=int,\n                          validator=lambda x: x > 0,\n                          example='25')\n             ])\n    def _age_command_callback(self, message: Message, age: int):\n        context.bot.send_message(message.chat.id, \"New age: {}\".format(age))\n```\n\n## Arguments\n\n**telegram-click-aio** parses arguments using a custom tokenizer:\n* space acts as an argument delimiter, except when quoted (supporting both `\"` and `'`)\n* argument keys are prefixed with `--`, `—` (long dash) or `-` (for single character keys)\n* quoted arguments are never considered as argument keys, even when prefixed with `--` or `—`\n* flags can be combined in a single argument (f.ex. `-AxZ`)\n\nThe behaviour should be pretty intuitive. If it's not, let's discuss and improve it!\n\n### Naming\n\nArguments can have multiple names to allow for abbreviated names. The\nfirst name you specify for an argument will be used for the \ncallback parameter name (normalized to snake-case). Because of this\nit is advisable to specify a full word argument name as the first one.\n\n### Types\n\nSince all user input initially is of type `str` there needs to be a type\nconversion if the expected type is not a `str`. For basic types like\n`bool`, `int`, `float` and `str` converters are built in to this library.\nIf you want to use other types you have to specify how to convert the \n`str` input to your type using the `converter` attribute of the \n`Argument` constructor:\n\n```python\nfrom telegram_click_aio.argument import Argument\n\nArgument(name='age',\n         description='The new age',\n         type=MyType,\n         converter=lambda x: MyType(x),\n         validator=lambda x: x > 0,\n         example='25')\n```\n\n### Flags\n\nTechnically you can use the `Argument` class to specify a flag, but since \nmany of its parameters are implicit for a flag the `Flag` class can be used\ninstead:\n\n```python\nfrom telegram_click_aio.argument import Flag\n\nFlag(name='flag',\n     description='My boolean flag')\n```\n\n## Permission handling\n\nIf a command should only be executable when a specific criteria is met \nyou can specify those criteria using the `permissions` parameter:\n\n```python\nfrom aiogram.types import Message\nfrom telegram_click_aio.decorator import command\nfrom telegram_click_aio.permission import GROUP_ADMIN\n\n@command(name='permission', \n         description='Needs permission',\n         permissions=GROUP_ADMIN)\ndef _permission_command_callback(self, message: Message):\n```\n\nMultiple permissions can be combined using `&`, `|` and `~` (not) operators.\n\nIf a user does not have permission to use a command it will not be displayed\nwhen this user generate a list of commands.\n\n### Integrated permission handlers\n\n| Name                  | Description                                |\n|-----------------------|--------------------------------------------|\n| `PRIVATE_CHAT`        | The command can only be executed in a private chat |\n| `NORMAL_GROUP_CHAT`   | The command can only be executed in a normal group  |\n| `SUPER_GROUP_CHAT`    | The command can only be executed in a supergroup  |\n| `GROUP_CHAT`          | The command can only be executed in either a normal or a supergroup |\n| `USER_ID`             | Only users whose user id is specified have permission |\n| `USER_NAME`           | Only users whose username is specified have permission |\n| `GROUP_CREATOR`       | Only the group creator has permission               |\n| `GROUP_ADMIN`         | Only the group admin has permission                 |\n| `NOBODY`              | Nobody has permission (useful for callbacks triggered via code instead of user interaction f.ex. \"unknown command\" handler) |\n| `ANYBODY`             | Anybody has permission (this is the default) |\n\n### Custom permissions\n\nIf none of the integrated permissions suit your needs you can simply write \nyour own permission handler by extending the `Permission` base class \nand pass an instance of the `MyPermission` class to the list of `permissions`:\n\n```python\nfrom aiogram.types import Message\nfrom telegram_click_aio.decorator import command\nfrom telegram_click_aio.permission.base import Permission\nfrom telegram_click_aio.permission import GROUP_ADMIN\n\nclass MyPermission(Permission):\n    def evaluate(self, message: Message) -> bool:\n        from_user = message.from_user\n        return from_user.id in [12345, 32435]\n\n@command(name='permission', description='Needs permission',\n         permissions=MyPermission() & GROUP_ADMIN)\ndef _permission_command_callback(self, message: Message):\n```\n\n### Show \"Permission denied\" message\n\nThis behaviour is defined by the error handler. The `DefaultErrorHandler` silently ignores \ncommand messages from users without permission. To change this simply define your own, \ncustomized `ErrorHandler` class as shown in the [example.py](example.py).\n\n## Targeted commands\n\nTelegram supports the `@` notation to target commands at specific bot\nusernames:\n\n```\n/start               # unspecified\n/start@myAwesomeBot  # targeted at self\n/start@someOtherBot  # targeted at other bot\n```\n\nWhen using a `MessageHandler` instead of a `CommandHandler`\nit is possible to catch even commands that are targeted at other bots.\nBy default only messages without a target, and messages that are targeted \ndirectly at your bot are processed.\n\nTo control this behaviour specify the `command_target` parameter:\n\n```python\nfrom aiogram.types import Message\nfrom telegram_click_aio.decorator import command\nfrom telegram_click_aio import CommandTarget\nfrom telegram_click_aio.permission import NOBODY\n\n@command(name=\"commands\",\n         description=\"List commands supported by this bot.\",\n         permissions=NOBODY,\n         command_target=CommandTarget.UNSPECIFIED | CommandTarget.SELF)\ndef _unknown_command_callback(self, message: Message):\n```\n\nYou can combine `CommandTarget`'s using logical operators like in the \nexample above.\n\n## Hidden commands\n\nIn rare cases it can be useful to hide a command from the help output.\nTo do this you can use the `hidden` parameter on the `@command` decorator\nby either passing `True` or `False`, or a callable like f.ex. this one:\n```python\ndef hide_whois_if_admin(message: Message):\n    user_id = message.from_user.id\n    return user_id not in [123456]\n```\n\nThis function is evaluated on each message and therefore provides\nthe `message` object from **aiogram**, which\nallows you to make decisions based on chat and user properties\namong other things.\n\n## Error handling\n\n**telegram-click-aio** automatically handles errors in most situations.\n\nErrors are divided into three categories:\n* Permission errors\n* Input validation errors\n* Command execution errors\n\nThe `DefaultErrorHandler` will handle these categories in the following way:\n\n* Permission errors will be silently ignored.\n* Input validation errors like\n  * an argument can not be parsed correctly\n  * an invalid value is passed for an argument\n\n  will send the exception message, as well as a help message of the command the user was trying to use.\n* On command execution errors the user will be notified that his \n  command has crashed, without any specific error message. \n\nTo modify the behaviour for each of those categories, define an `ErrorHandler` and \npass an instance of it to the `error_handler` parameter of the `@command` decorator,\nlike shown in the [example.py](example.py).\n\n# Contributing\n\nGitHub is for social coding: if you want to write code, I encourage contributions through pull requests from forks\nof this repository. Create GitHub tickets for bugs and new features and comment on the ones that you are interested in.\n\n\n# License\n```text\ntelegram-click-aio\nCopyright (c) 2020 Markus Ressel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/markusressel/telegram-click-aio",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "telegram-click-aio",
    "package_url": "https://pypi.org/project/telegram-click-aio/",
    "platform": "",
    "project_url": "https://pypi.org/project/telegram-click-aio/",
    "project_urls": {
      "Homepage": "https://github.com/markusressel/telegram-click-aio"
    },
    "release_url": "https://pypi.org/project/telegram-click-aio/1.0.0/",
    "requires_dist": [
      "aiogram",
      "aiohttp",
      "async-timeout",
      "attrs",
      "babel",
      "certifi",
      "chardet",
      "emoji",
      "idna",
      "multidict",
      "pytz",
      "typing-extensions",
      "yarl"
    ],
    "requires_python": "",
    "summary": "Click inspired command interface toolkit for aiogram",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8494515,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac7ba0b44053bdeb356ebf001eb47790de1834fa45ce16975e3060110e03c52b",
          "md5": "bda0c5dd98742d2a55fff13ec07a80e2",
          "sha256": "5ca9ce9144d2dc5df25d909a97a7ca680e9ce3be01712a8a806d5ac22a900b0e"
        },
        "downloads": -1,
        "filename": "telegram_click_aio-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bda0c5dd98742d2a55fff13ec07a80e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27993,
        "upload_time": "2020-10-25T08:13:34",
        "upload_time_iso_8601": "2020-10-25T08:13:34.450705Z",
        "url": "https://files.pythonhosted.org/packages/ac/7b/a0b44053bdeb356ebf001eb47790de1834fa45ce16975e3060110e03c52b/telegram_click_aio-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da89d810b8a953fb2076a73cd618b9ea723c76f8764662dc715eee71e11ec068",
          "md5": "fcdff76cf03d42914a7fe4debbe7a7bf",
          "sha256": "56cd35791334ab318928218af9a17885552f7de927e633697f7ff0abb690f5bf"
        },
        "downloads": -1,
        "filename": "telegram_click_aio-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fcdff76cf03d42914a7fe4debbe7a7bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21318,
        "upload_time": "2020-10-25T08:13:36",
        "upload_time_iso_8601": "2020-10-25T08:13:36.977653Z",
        "url": "https://files.pythonhosted.org/packages/da/89/d810b8a953fb2076a73cd618b9ea723c76f8764662dc715eee71e11ec068/telegram_click_aio-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac7ba0b44053bdeb356ebf001eb47790de1834fa45ce16975e3060110e03c52b",
        "md5": "bda0c5dd98742d2a55fff13ec07a80e2",
        "sha256": "5ca9ce9144d2dc5df25d909a97a7ca680e9ce3be01712a8a806d5ac22a900b0e"
      },
      "downloads": -1,
      "filename": "telegram_click_aio-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bda0c5dd98742d2a55fff13ec07a80e2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27993,
      "upload_time": "2020-10-25T08:13:34",
      "upload_time_iso_8601": "2020-10-25T08:13:34.450705Z",
      "url": "https://files.pythonhosted.org/packages/ac/7b/a0b44053bdeb356ebf001eb47790de1834fa45ce16975e3060110e03c52b/telegram_click_aio-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da89d810b8a953fb2076a73cd618b9ea723c76f8764662dc715eee71e11ec068",
        "md5": "fcdff76cf03d42914a7fe4debbe7a7bf",
        "sha256": "56cd35791334ab318928218af9a17885552f7de927e633697f7ff0abb690f5bf"
      },
      "downloads": -1,
      "filename": "telegram_click_aio-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fcdff76cf03d42914a7fe4debbe7a7bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21318,
      "upload_time": "2020-10-25T08:13:36",
      "upload_time_iso_8601": "2020-10-25T08:13:36.977653Z",
      "url": "https://files.pythonhosted.org/packages/da/89/d810b8a953fb2076a73cd618b9ea723c76f8764662dc715eee71e11ec068/telegram_click_aio-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}