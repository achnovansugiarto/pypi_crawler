{
  "info": {
    "author": "",
    "author_email": "Del Pino Agustín <dpinoagustin@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Lexandra\n\nCreate a lexer by decorators.\n\n# How to use it\n\n```python\nimport lexandra.core as lxd\n\nlexer: lxd.Lexer = lxd.Lexer(\n    numbers='0123456789'\n)\n\n@lexer.numbers\ndef lex_numbers(c: lxd.Cursor, s: lxd.Settings) -> lxd.Token:\n    t = lxd.Token(\n        type='number',\n        value=c.char\n    )\n\n    c.advance()\n\n    while c.char in s.numbers:\n        t.value += c.char\n        c.advance()\n\n    return t\n\n\nif __name__ == '__main__':\n    print(lexer('123'))\n```\n\n# Factory\n\nToo much work? Use the factory for predefined lexers.\n\n```python\nimport lexandra as lxd\n\nnumbs_lexer: lxd.Lexer = lxd.factory.numbs_lexer()\nwords_lexer: lxd.Lexer = lxd.factory.words_lexer()\ncustom_lexer: lxd.Lexer = lxd.factory.custom_lexer(\n    numbers='0123456789',\n    words='qwertyuiopasdfghjklñzxcvbnm',\n    allow_uppercase=True,\n    ignore_space=True\n)\n\n\nif __name__ == '__main__':\n    print(numbs_lexer('123 456 789 0'))\n    print(words_lexer('Hello World'))\n    print(custom_lexer('Hello 123 World 456'))\n\n```\n\n# Cool stuffs with lexandra\n\nCreate a highlight code in the terminal\n\n```python\nimport lexandra as lxd\n\n\nclass Colors:\n    Black = '\\u001b[30m'\n    Red = '\\u001b[31m'\n    Green = '\\u001b[32m'\n    Yellow = '\\u001b[33m'\n    Blue = '\\u001b[34m'\n    Magenta = '\\u001b[35m'\n    Cyan = '\\u001b[36m'\n    White = '\\u001b[37m'\n    _Reset = '\\u001b[0m'\n\n    @classmethod\n    def colorize(cls, color: str, text: str) -> str:\n        return f'{color}{text}{cls._Reset}'\n\n\njson_lexer: lxd.core.Lexer = lxd.factory.custom_lexer(\n    numbers=lxd.factory.NUMBERS,\n    letters=lxd.factory.LETTERS,\n    strings='\"',\n    delimiters='{},:[]\\n ',\n    allow_float=True,\n    allow_uppercase=True\n)\n\nhighlight_colors = {\n    lxd.factory.NUMB_TOKEN: Colors.Blue,\n    lxd.factory.WORD_TOKEN: Colors.Cyan,\n    lxd.factory.STR_TOKEN: Colors.Green,\n    lxd.factory.DLT_TOKEN: Colors.White,\n}\n\n\ndef highlight(tokens: lxd.core.TokenList) -> str:\n    highlighted = \"\"\n\n    for token in tokens:\n        highlighted += Colors.colorize(\n            highlight_colors[token.type], token.value)\n\n    return highlighted\n\n\nif __name__ == '__main__':\n    tks = json_lexer('''{\n        \"json\":{\n            \"type\": \"array\",\n            \"length\": 5,\n            \"items\": [true, false, \"lexandra\", 123456789]\n        }\n    }''')\n\n    print(highlight(tks))\n\n```\n\nWhy not do the same but with CSS. No new lexer is needed, just replace the ASCII Color by HTML/CSS.\n\n```python\nfrom string import Template\nimport base64 as b64\nimport webbrowser\nimport lexandra as lxd\n\nBASE_HTML = Template(f'''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>JSON Highlight</title>\n    <style>\n    * {{\n        white-space: pre-wrap;\n        font-size: 30px;\n        font-family: monospace;\n    }}\n    body {{\n        background-color: #2e2e2e;\n        border: 1px solid white;\n        border-radius: 5px;\n        width: fit-content;\n        padding: 30px;\n        margin: 0 auto;\n    }}\n    .token-{lxd.factory.NUMB_TOKEN} {{\n        color: blue;\n    }}\n    .token-{lxd.factory.WORD_TOKEN} {{\n        color: cyan;\n    }}\n    .token-{lxd.factory.STR_TOKEN} {{\n        color: green;\n    }}\n    .token-{lxd.factory.DLT_TOKEN} {{\n        color: magenta;\n    }}\n    </style>\n</head>\n<body>\n    $content\n</body>\n</html>\n''')\n\n\njson_lexer: lxd.core.Lexer = lxd.factory.custom_lexer(\n    numbers=lxd.factory.NUMBERS,\n    letters=lxd.factory.LETTERS,\n    strings='\"',\n    delimiters='{},:[]\\n ',\n    allow_float=True,\n    allow_uppercase=True\n)\n\ndef highlight(tokens: lxd.core.TokenList) -> str:\n    content = \"\"\n\n    for token in tokens:\n        content += f'<span class=\"token-{token.type}\">{token.value}</span>'\n\n    return BASE_HTML.substitute(content=content)\n\n\nif __name__ == '__main__':\n    tokens = json_lexer('''{\n        \"json\":{\n            \"type\": \"array\",\n            \"length\": 5,\n            \"items\": [true, false, \"lexandra\", 123456789]\n        }\n    }''')\n\n    html = highlight(tokens).encode(\"utf-8\")\n    url = f'data:text/html;base64,{b64.b64encode(html).decode(\"utf-8\")}'\n\n    webbrowser.open(url)\n\n```\n\n# Need more decorators? Just extends!.\n\n```python\nimport lexandra as lxd\n\n\nclass MathSettings(lxd.core.Settings):\n    def __init__(self, numbers: str, operators: str, letters: str = '', strings: str = '', delimiters: str = '', ignores: str = '') -> None:\n        super(MathSettings, self).__init__(\n            numbers, letters, strings, delimiters, ignores)\n\n        self.__Operators = operators\n\n    @property\n    def operators(self):\n        return self.__Operators\n\n\nclass MathLexer(lxd.core.Lexer):\n    def __init__(self, settings: MathSettings) -> None:\n        super(MathLexer, self).__init__(settings)\n        self.__LexOperators = None\n\n        # Workaround for typing (avoid the use of generic just for keep it simple)\n        self._Settings = settings\n\n    def operators(self, func: lxd.core.LexFunction):\n        self.__LexOperators = func\n\n    def _extended_lex(self, cursor: lxd.core.Cursor, tokens: lxd.core.TokenList) -> bool:\n        # Extending the lex conditions\n\n        if cursor.char in self._Settings.operators:\n            tokens.append(self.__LexOperators(cursor, self._Settings))\n            # The char is acceptable\n            return True\n\n        # The char is not acceptable\n        return False\n\n\nlexer: MathLexer = MathLexer(\n    MathSettings(\"0123456789\", \"+-*/\", ignores=\" \")\n)\n\n\n@lexer.numbers\ndef lex_numbs(cursor: lxd.core.Cursor, settings: lxd.core.Settings) -> lxd.core.Token:\n    token = lxd.core.Token(token_type=\"nums\", value=cursor.char)\n\n    cursor.advance()\n\n    while cursor.has_char and cursor.char in settings.numbers:\n        token.value += cursor.char\n        cursor.advance()\n\n    return token\n\n\n@lexer.operators\ndef lex_ops(cursor: lxd.core.Cursor, _: lxd.core.Settings) -> lxd.core.Token:\n    token = lxd.core.Token(token_type=\"mathop\", value=cursor.char)\n    cursor.advance()\n    return token\n\n\nif __name__ == \"__main__\":\n    print(lexer(\"1234 + 5678 * 333 / 111 - 698\"))\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lexandra",
    "package_url": "https://pypi.org/project/lexandra/",
    "platform": null,
    "project_url": "https://pypi.org/project/lexandra/",
    "project_urls": {
      "Bug Tracker": "https://github.com/agustin-del-pino/lexandra/issues",
      "Homepage": "https://github.com/agustin-del-pino/lexandra"
    },
    "release_url": "https://pypi.org/project/lexandra/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Create a lexer by decorators.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16008720,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3e57cc2316ac563f713120257985a940b8915bafaae94d3bd2d7caf105fbf50",
          "md5": "3ec15ff46673b42ac47ade6f24dc0fc5",
          "sha256": "9e6376a24943e93ce8bba79038409b7bff43c5dd398a33cc0b04448d7a4d3115"
        },
        "downloads": -1,
        "filename": "lexandra-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ec15ff46673b42ac47ade6f24dc0fc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8478,
        "upload_time": "2022-12-06T14:09:31",
        "upload_time_iso_8601": "2022-12-06T14:09:31.070220Z",
        "url": "https://files.pythonhosted.org/packages/e3/e5/7cc2316ac563f713120257985a940b8915bafaae94d3bd2d7caf105fbf50/lexandra-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "035fd2f88434f65df6c95761dd6b2ed2d835884990df38ef3cae37185455b7ea",
          "md5": "34364f4fac5eb5d20edb4b09bec26a3d",
          "sha256": "e4984deb04599b353ed9adfeba76b972b7d6c747e0fb15e89c5a0c4dfa11bd89"
        },
        "downloads": -1,
        "filename": "lexandra-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34364f4fac5eb5d20edb4b09bec26a3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8603,
        "upload_time": "2022-12-06T14:09:32",
        "upload_time_iso_8601": "2022-12-06T14:09:32.695855Z",
        "url": "https://files.pythonhosted.org/packages/03/5f/d2f88434f65df6c95761dd6b2ed2d835884990df38ef3cae37185455b7ea/lexandra-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3e57cc2316ac563f713120257985a940b8915bafaae94d3bd2d7caf105fbf50",
        "md5": "3ec15ff46673b42ac47ade6f24dc0fc5",
        "sha256": "9e6376a24943e93ce8bba79038409b7bff43c5dd398a33cc0b04448d7a4d3115"
      },
      "downloads": -1,
      "filename": "lexandra-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3ec15ff46673b42ac47ade6f24dc0fc5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8478,
      "upload_time": "2022-12-06T14:09:31",
      "upload_time_iso_8601": "2022-12-06T14:09:31.070220Z",
      "url": "https://files.pythonhosted.org/packages/e3/e5/7cc2316ac563f713120257985a940b8915bafaae94d3bd2d7caf105fbf50/lexandra-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "035fd2f88434f65df6c95761dd6b2ed2d835884990df38ef3cae37185455b7ea",
        "md5": "34364f4fac5eb5d20edb4b09bec26a3d",
        "sha256": "e4984deb04599b353ed9adfeba76b972b7d6c747e0fb15e89c5a0c4dfa11bd89"
      },
      "downloads": -1,
      "filename": "lexandra-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "34364f4fac5eb5d20edb4b09bec26a3d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 8603,
      "upload_time": "2022-12-06T14:09:32",
      "upload_time_iso_8601": "2022-12-06T14:09:32.695855Z",
      "url": "https://files.pythonhosted.org/packages/03/5f/d2f88434f65df6c95761dd6b2ed2d835884990df38ef3cae37185455b7ea/lexandra-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}