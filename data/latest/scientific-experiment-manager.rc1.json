{
  "info": {
    "author": "Nicolò Ruggeri",
    "author_email": "nicolo.ruggeri@tuebingen.mpg.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<h2 align=\"center\"><i>SEM</i>: Scientific Experiment Manager</h2>\n<p align=\"center\"><i>Streamline IO operations, storage, and retrieval of your scientific results</i></p>\n\n<p align=\"center\">\n<a href=\"https://github.com/nickruggeri/scientific-experiment-manager/blob/main/LICENSE\">\n<img alt=\"License: MIT\" src=\"https://img.shields.io/github/license/nickruggeri/scientific-experiment-manager\">\n</a>\n<a href=\"https://www.python.org/\">\n<img alt=\"Made with Python\" src=\"https://img.shields.io/badge/made%20with-python-1f425f.svg\">\n</a>\n<a href=\"https://github.com/psf/black\">\n<img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\">\n</a>\n</p>\n\n\nSEM helps streamline IO operations and organization of scientific results\nin Python. \\\nAt its core, SEM is based on \n[regular expressions](https://docs.python.org/3/library/re.html) \nand simply creates, parses and manages intricate folder structures containing \nexperimental results.  \n\n<br/><br/>\n## Minimal example\nConsider the results organized in the `example/example_results` folder. \\\nThese are different directories containing the results of the same experiment, where two\nparameters are varied: the random `seed` and a threshold value `eps`. Every one of the \nfolders contains some output files from  \n```\nexample_results\n│\n└───seed=111\n│   └───eps_1.3\n│   │   └───...\n│   └───eps_7.4\n│       └───...\n│   \n└───seed=222\n│   └───...\n│\n└───seed=333\n│   └───...\n│   \n└───useless_files\n```\nSEM does not take care of loading and/or saving files. \\\nRather, it takes care of the folder structure, leaving the user the freedom to manage the result's \nformat. \\\nTo retrieve the parameters relative to these results, `ResultManager` parses the folders'\nnames and only returns the path relative to those that match. \n```python\nimport re\nfrom pathlib import Path\n\nfrom sem.manager import ResultManager\n\nexample_res = Path(\"./example_results\")\n\nparsers = [re.compile(r\"seed=(?P<seed_value>\\d+)\"), re.compile(r\"eps_(?P<eps>\\d+.\\d+)\")]\nmanager = ResultManager(root_dir=example_res, parsers=parsers)\nmanager.parse_paths()\n```\nIn the case above, the parser for `seed_value` expects a positive integer, specified by \nthe regular expression `\"\\d+\"`, and `eps` a float format. \\\nThe results are stored in \n`manager.df`, a pandas \n[DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html), which \ncontains the parsed parameter values, as well as the path to the deepest sub-directories  \n```\n                           __PATH__ seed_value  eps\n0  example_results/seed=333/eps_1.1        333  1.1\n1  example_results/seed=333/eps_0.3        333  0.3\n2  example_results/seed=222/eps_7.4        222  7.4\n3  example_results/seed=222/eps_2.7        222  2.7\n4  example_results/seed=111/eps_1.3        111  1.3\n5  example_results/seed=111/eps_7.4        111  7.4\n...\n```\nDirectories whose names don't match the patterns are ignored, e.g. \n`example_results/useless_files`. \\\nNotice that, since they are the results of parsing, all the values in the data frame are\nstrings. \\\nThe conversion to a different data type can be performed after parsing:\n```python\nmanager.df[\"seed_value\"] = manager.df[\"seed_value\"].astype(int)\nmanager.df[\"eps\"] = manager.df[\"eps\"].astype(float)\n```\n\n### Utilizing the parsed directories\nOnce the directory names have been parsed, the main utility of the manager is to have a \ncoupling between the parameters and the results. \\\nFor example, one can read and insert the computational time of every experiment in the \ndata frame:\n```python\ndef read_comp_time(res_dir):\n    with open(res_dir / \"computational_time.txt\", \"r\") as file:\n        time = float(file.read())\n    return time\n\n\nmanager.df[\"time\"] = manager.df[\"__PATH__\"].map(read_comp_time)\n```\nFrom there, conventional pandas operations can be used. For example, the average \ncomputational time for seed `111` is given by\n```python\ndf = manager.df\ntimes = df[\"time\"].loc[df[\"seed_value\"] == 111]\ntimes.mean()\n```\n\n### Loading more complex objects\nPandas data frames can contain arbitrary objects. \nFor example, one can create a column of numpy arrays from a model:\n```python\nimport numpy as np\n\n\ndef load_mat(path):\n    return np.load(path / \"result_params.npy\")\n\n\ndf[\"mat\"] = df[\"__PATH__\"].map(load_mat)\n```\n\n<br/><br/>\n## Creating default paths\nStandardizing result structure reduces the amount of code needed for \nsimple IO operations, and eases compatibility across machines, e.g. local vs cloud or \ncluster results. \\\nTo this end, <i>SEM</i> offers a way to create saving paths \nwhich only depend on the parameters specified by the user. \\\nFor example, the paths of a repository with three levels and different parameters, \ncan be created as:\n```python\nroot_dir = Path(\".\") / \"tmp\"\nfor param1 in [True, False]:\n    for param2 in [\"a\", \"b\"]:\n        for param3 in [1, 2, 3]:\n            values = [\n                {\"param1\": param1, \"param2\": param2},\n                \"results_of_my_experiments\",\n                {\"param3\": param3},\n            ]\n            new_path = ResultManager.create_default_path(\n                root_dir, values, auto_sort=True\n            )\n            new_path.mkdir(parents=True)\n            print(new_path)\n```\nwhich produces\n```\ntmp/param1=True_param2=a/results_of_my_experiments/param3=1\ntmp/param1=True_param2=a/results_of_my_experiments/param3=2\ntmp/param1=True_param2=a/results_of_my_experiments/param3=3\ntmp/param1=True_param2=b/results_of_my_experiments/param3=1\n...\ntmp/param1=False_param2=a/results_of_my_experiments/param3=1\n...\n```\nIf desired, the argument `auto_sort` imposes a uniform order at every directory level.\\\nFor example, using\n`{\"param2\": param2, \"param1\": param1}` would produce the same paths a above if\n`auto_sort=True`. \\\nParsing directories with this structure is similarly easy:\n```python\nmanager = ResultManager.from_arguments(\n    root_dir,\n    arguments=[\n        {\"param1\": \"True|False\", \"param2\": \"a|b\"},\n        \"results_of_my_experiments\",\n        {\"param3\": r\"\\d+\"},\n    ],\n    auto_sort=True\n)\nmanager.parse_paths()\n```\nwhich yields\n```\n                                             __PATH__ param1 param2 param3\n0   tmp/param1=False_param2=b/results_of_my_experi...  False      b      1\n1   tmp/param1=False_param2=b/results_of_my_experi...  False      b      3\n2   tmp/param1=False_param2=b/results_of_my_experi...  False      b      2\n3   tmp/param1=True_param2=b/results_of_my_experim...   True      b      1\n...\n```\n\n<br/><br/>\n## Initialization\nNotice that the advantage of using the default directory naming, as opposed to a custom\none, is that the `ResultManager` can be initialized as above, by only specifying the \narguments in `ResultManager.from_arguments`. \\\nA more flexible initialization for custom paths, can be performed by giving as input \nregular expression patterns. For example, an equivalent initialization to that above is \ngiven by: \n\n```python\nparsers = [\n    re.compile(\"param1=(?P<param1>True|False)_param2=(?P<param2>a|b)\"),\n    re.compile(\"results_of_my_experiments\"),\n    re.compile(\"param3=(?P<param3>\\d+)\"),\n]\nmanager = ResultManager(root_dir, parsers)\nmanager.parse_paths()\n```\n\n<br/><br/>\n## Other utilities and tricks\n### Filtering results\nAnother useful `ResultManager` method is `ResultManager.filter`. This method filters the\n<i>rows</i> of the results' data frame. Results can be selected by specifying exact \ncolumn values or a list of possible values. For example, for a manager whose data frame \nhas columns\n```\n                                             __PATH__ param1 param2 param3\n0   tmp/param1=False_param2=b/results_of_my_experi...  False      b      1\n1   tmp/param1=False_param2=b/results_of_my_experi...  False      b      3\n2   tmp/param1=False_param2=b/results_of_my_experi...  False      b      2\n3   tmp/param1=True_param2=b/results_of_my_experim...   True      b      1\n...\n```\nthe query\n```python\nmanager.filter_results(\n    equal={\"param1\": True},\n    contained={\"param3\": [1, 3]}\n)\n```\nyields a filtered data frame\n```\n                                             __PATH__ param1 param2 param3\n3   tmp/param1=True_param2=b/results_of_my_experim...   True      b      1\n4   tmp/param1=True_param2=b/results_of_my_experim...   True      b      3\n9   tmp/param1=True_param2=a/results_of_my_experim...   True      a      1\n10  tmp/param1=True_param2=a/results_of_my_experim...   True      a      3\n```\n\n### Loading fewer results\nWhile results can be filtered a posteriori as just explained, one can also load fewer \nresults in the first place. \\\nThis is done by specifying an appropriate regular expression \nparser in the first place.  \nFor example, to select only configurations where \n`param1` is equal to `True`, one can write\n```python\nparsers = [\n    re.compile(\"param1=(?P<param1>True)_param2=(?P<param2>a|b)\"),\n    re.compile(\"results_of_my_experiments\"),\n    re.compile(\"param3=(?P<param3>\\d+)\"),\n]\nmanager = ResultManager(root_dir, parsers)\n```\nIn general, any regular expression with named groups is considered valid, check \n[the docs](https://docs.python.org/3/library/re.html) \nfor further details. \n\n### Common parsing patterns\nSome common regular expression patterns are available at `sem.re_patterns`. \\\nThese are strings that can be utilized for initializing parsers \n```python\nfrom sem.re_patterns import INT_PATTERN\n\nparsers = [\n    re.compile(\"param1=(?P<param1>True|False)_param2=(?P<param2>a|b)\"),\n    re.compile(\"results_of_my_experiments\"),\n    re.compile(f\"param3=(?P<param3>{INT_PATTERN})\"),\n]\nmanager = ResultManager(root_dir, parsers)\n```\nor `ResultManager` arguments\n```python\nmanager = ResultManager.from_arguments(\n    root_dir,\n    arguments=[\n        {\"param1\": \"True|False\", \"param2\": \"a|b\"},\n        \"results_of_my_experiments\",\n        {\"param3\": INT_PATTERN},\n    ],\n)\n```\n\n\n### Common type conversion from string\nSome common type conversion functions from string are available at `sem.str_to_type`. \\\nThese are useful in combination with the `argparse` package, for command line inputs\n```python\nfrom argparse import ArgumentParser\nfrom sem.str_to_type import bool_type, unit_float_or_positive_integer, none_or_type\n\nparser = ArgumentParser()    \nparser.add_argument(\"--flag\", type=bool_type)\nparser.add_argument(\"--train_size\", type=unit_float_or_positive_integer)\nparser.add_argument(\"--K\", type=none_or_type(int))\n```\nImportantly, `bool_type` correctly converts both string inputs `\"0\"` or `\"1\"`, as well \nas the case-insensitive strings `\"true\"`, `\"True\"`, `\"False\"`, etc. \n\n\nAlternatively, these functions can also be used for type conversion inside pandas data \nframes\n```python\nmanager = ResultManager(root_dir, parsers)\nmanager.parse_paths()\n\nmanager.df[\"flag\"] = manager.df[\"flag\"].map(bool_type)\n```\n\n<br/><br/>\n## Installation\nYou can install this package by downloading the GitHub repository and, from inside the\ndownloaded folder, running\n```\npip install .\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scientific-experiment-manager",
    "package_url": "https://pypi.org/project/scientific-experiment-manager/",
    "platform": null,
    "project_url": "https://pypi.org/project/scientific-experiment-manager/",
    "project_urls": {
      "Documentation": "https://github.com/nickruggeri/scientific-experiment-manager",
      "Source": "https://github.com/nickruggeri/scientific-experiment-manager"
    },
    "release_url": "https://pypi.org/project/scientific-experiment-manager/0.1.0/",
    "requires_dist": [
      "numpy (>=1.23.0)",
      "pandas (>=1.5.0)"
    ],
    "requires_python": "",
    "summary": "SEM: streamline your scientific experiment management",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16991396,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8efbbb8c8f23267e5d04403af2a5d2d70ab3450038d6bcd15287d3947c4d8071",
          "md5": "591f41075d543b64af1302210eec45e1",
          "sha256": "52d9181a1e3b68f10267831fe98be9bec1fbb815661eb3014ae1eccd685555ac"
        },
        "downloads": -1,
        "filename": "scientific_experiment_manager-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "591f41075d543b64af1302210eec45e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10240,
        "upload_time": "2023-02-23T10:17:30",
        "upload_time_iso_8601": "2023-02-23T10:17:30.425994Z",
        "url": "https://files.pythonhosted.org/packages/8e/fb/bb8c8f23267e5d04403af2a5d2d70ab3450038d6bcd15287d3947c4d8071/scientific_experiment_manager-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf8d55967d2592f52ef0c5ee7f76dd7e0bee5b4886194a67a8aba3e00cb6baae",
          "md5": "5e30548568025103f62171465f3b09c7",
          "sha256": "db188e5d6d40645fb50203244d2e3197e3faea994909ee652253d879d378d3bb"
        },
        "downloads": -1,
        "filename": "scientific-experiment-manager-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5e30548568025103f62171465f3b09c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10213,
        "upload_time": "2023-02-23T10:17:31",
        "upload_time_iso_8601": "2023-02-23T10:17:31.680460Z",
        "url": "https://files.pythonhosted.org/packages/cf/8d/55967d2592f52ef0c5ee7f76dd7e0bee5b4886194a67a8aba3e00cb6baae/scientific-experiment-manager-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8efbbb8c8f23267e5d04403af2a5d2d70ab3450038d6bcd15287d3947c4d8071",
        "md5": "591f41075d543b64af1302210eec45e1",
        "sha256": "52d9181a1e3b68f10267831fe98be9bec1fbb815661eb3014ae1eccd685555ac"
      },
      "downloads": -1,
      "filename": "scientific_experiment_manager-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "591f41075d543b64af1302210eec45e1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10240,
      "upload_time": "2023-02-23T10:17:30",
      "upload_time_iso_8601": "2023-02-23T10:17:30.425994Z",
      "url": "https://files.pythonhosted.org/packages/8e/fb/bb8c8f23267e5d04403af2a5d2d70ab3450038d6bcd15287d3947c4d8071/scientific_experiment_manager-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf8d55967d2592f52ef0c5ee7f76dd7e0bee5b4886194a67a8aba3e00cb6baae",
        "md5": "5e30548568025103f62171465f3b09c7",
        "sha256": "db188e5d6d40645fb50203244d2e3197e3faea994909ee652253d879d378d3bb"
      },
      "downloads": -1,
      "filename": "scientific-experiment-manager-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5e30548568025103f62171465f3b09c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10213,
      "upload_time": "2023-02-23T10:17:31",
      "upload_time_iso_8601": "2023-02-23T10:17:31.680460Z",
      "url": "https://files.pythonhosted.org/packages/cf/8d/55967d2592f52ef0c5ee7f76dd7e0bee5b4886194a67a8aba3e00cb6baae/scientific-experiment-manager-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}