{
  "info": {
    "author": "Simon Praetorius",
    "author_email": "simon.praetorius@tu-dresden.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Dune-Vtk\nFile reader and writer for the VTK Format\n\n## Summary\nProvides structured and unstructured file writers for the VTK XML File Formats\nthat can be opened in the popular ParaView visualization application. Additionally\na file reader is provided to import VTK files into Dune grid and data objects.\n\n## Installation Instructions\n`dune-vtk` requires the DUNE core modules, version 2.7 or later.\nPlease see the [general instructions for building DUNE modules](https://www.dune-project.org/doc/installation)\nfor detailed instructions on how to build the module.\n\n## Usage\nThe VTK writer works similar to the dune-grid `VTKWriter`. It needs to be bound\nto a GridView and then data can be added to the points or cells in the grid.\nPoints are not necessarily grid vertices, but any coordinates placed inside the\ngrid cells, so the data must be provided as GridViewFunction to allow the local\nevaluation in arbitrary local coordinates.\n\nGeneral interface of a VtkWriter\n```c++\ntemplate <class GridView, class DataCollector = DefaultDataCollector<GridView>>\nclass Vtk[Type]Writer\n{\npublic:\n  // Constructor\n  Vtk[Type]Writer(GridView, Vtk::FormatTypes = Vtk::FormatTypes::BINARY, Vtk::DataTypes = Vtk::DataTypes::FLOAT32);\n\n  // Bind data to the writer\n  Vtk[Type]Writer& addPointData(Function [, std::string name, int numComponents, Vtk::FormatTypes]);\n  Vtk[Type]Writer& addCellData(Function [, std::string name, int numComponents, Vtk::FormatTypes]);\n\n  // Write file with filename\n  void write(std::string filename);\n};\n```\nwhere `Function` is either a `GridViewFunction`, i.e. supports `bind()`, `unbind()`, and `localFunction(Function)`, or is a legacy `VTKFunction` from Dune-Grid. The optional parameters `name`, `numComponents` and `format` may be given for a `GridViewFunction`.\n\nThe parameter `Vtk::FormatTypes` is one of `Vtk::FormatTypes::ASCII`, `Vtk::FormatTypes::BINARY`, or `Vtk::FormatTypes::COMPRESSED` and `Vtk::DataTypes` is one of `Vtk::DataTypes::FLOAT32`, or `Vtk::DataTypes::FLOAT64`. The `[Type]` of a VtkWriter is one of `UnstructuredGrid`, `StructuredGrid`, `RectilinearGrid`, `ImageData`, or `Timeseries`, see below for details. A `DataCollector` may be specified to control how point and cell values are extracted from the `GridView` and the bound data. See `dune/vtk/datacollectors/` of a list of poissible types. The default datacollector extracts a connected grid with continuous data, where points are grid vertices.\n\nSee also the `src/` directory for more examples.\n\n## Comparison with Dune::VTKWriter\nIn Dune-Grid there is a VTK writer available, that is a bit different from the\nproposed one. A comparison:\n\n| **Property**       | **Dune-Grid** | **Dune-Vtk** |\n| ------------------ | :-----------: | :----------: |\n| VTK version        | 0.1           | 0.1/1.0      |\n| UnstructuredGrid   | **x**         | **x**        |\n| PolyData           | (1d)          | -            |\n| StructuredGrid     | -             | **x**        |\n| RectilinearGrid    | -             | **x**        |\n| ImageData          | -             | **x**        |\n| ASCII              | **x**         | **x**        |\n| BASE64             | **x**         | -            |\n| APPENDED_RAW       | **x**         | **x**        |\n| APPENDED_BASE64    | **x**         | -            |\n| BASE64_COMPRESSED  | -             | -            |\n| APPENDED_COMPRESSED| -             | **x**        |\n| Parallel files     | **x**         | **x**        |\n| Conforming Data    | **x**         | **x**        |\n| NonConforming Data | **x**         | **x**        |\n| Quadratic Data     | -             | **x**        |\n| Higher-Order Data  | -             | **x**        |\n| Subdivided Data    | **x**         | -            |\n| Sequence (PVD)     | **x**         | **x**        |\n| Timeseries         | -             | **x**        |\n\n## Writers and Readers\nDune-Vtk provides nearly all file formats specified in VTK + 2 time series formats:\nPVD and VTK-Timeseries.\n\n### VtkUnstructuredGridWriter\nImplements a VTK file format for unstructured grids with arbitrary element types\nin 1d, 2d, and 3d. Coordinates are specified explicitly and a connectivity table +\nelement types are specified for all grid elements (of codim 0). Can be used with\nall Dune grid types.\n\n### VtkStructuredGridWriter\nImplements a writer for grid composed of cube elements (lines, pixels, voxels) with\nlocal numbering similar to Dunes `cube(d)` numbering. The coordinates of the vertices\ncan be arbitrary but the connectivity is implicitly given and equals that of\n`Dune::YaspGrid` or `Dune::SPGrid`. Might be chosen as writer for a transformed\nstructured grid, using, e.g., a `GeometryGrid` meta-grid. See `src/geometrygrid.cc`\nfor an example.\n\n### VtkRectilinearGridWriter\nRectilinear grids are tensor-product grids with given coordinates along the x, y,\nand z axes. Therefore, the grid must allow to extract these 1d coordinates and a\nspecialization for a `StructuredDataCollector` must be provided, that implements\nthe `ordinates()` function. By default, it assumes constant grid spacing starting\nfrom a lower left corner. For `YaspGrid` a specialization is implemented if the\ncoordinates type is `TensorProductCoordinates`. See `src/structuredgridwriter.cc`\nfor an example.\n\n### VtkImageDataWriter\nThe *most structured* grid is composed of axis-parallel cube elements with constant\nsize along each axis. The is implemented in the VtkImageDataWriter. A specialization\nof the `StructuredDataCollector` must implement `origin()` for the lower left corner,\n`wholeExtent()` for the range of cell numbers along each axis in the global grid,\n`extent()` for the range in the local grid, and `spacing()` for the constant grid\nspacing in each direction.\n\n### PvdWriter\nA sequence writer, i.e. a collection of timestep files, in the ParaView Data (PVD)\nformat. Supports all VtkWriters for the timestep output. In each timestep a collection\n(.pvd) file is created.\n\n### VtkTimseriesWriter\nA timeseries is a collection of timesteps stored in one file, instead of separate\nfiles for each timestep value. Since in the `Vtk::FormatTypes::APPENDED` mode, the data is written\nas binary blocks in the appended section of the file and references by an offset\nin the XML DataArray attributes, it allows to reuse written data. An example of\nusage is when the grid points and cells do not change over time, but just the\npoint-/cell-data. Then, the grid is written only once and the data is just appended.\n\nTimeseries file are create a bit differently from other Vtk file. There, in the\nfirst write the grid points and cells are stored in a separate file, and in each\ntimestep just the data is written also to temporary files. When you need the timeseries\nfile, these stored temporaries are collected and combined to one VTK file. Thus,\nonly the minimum amount of data is written in each timestep. The intermediate files\nare stored, by default, in a `/tmp` folder, with (hopefully) fast write access.\n\n## VtkReader\nReading unstructured grid files (.vtu files) and creating a new grid, using a GridFactory,\ncan be performed using the `VtkReader` class. The reader allows to create the grid in\nmultiple ways, by providing a `GridCreator` template parameter. The `ContinuousGridCreator`\nreads the connectivity of the grid as it is and assumes that the elements are already\nconnected correctly. On the other hand, a `DiscontinuousGridCreator` reconnects separated\nelements, by identifying matching coordinates of the cell vertices. See more possible\ngrid-creators in the directory `dune/vtk/gridcreators`.\n\nGeneral interface of a VtkReader\n```c++\ntemplate <class Grid, class GridCreator = ContinuousGridCreator<Grid>, class FieldType = double>\nclass VtkReader\n{\npublic:\n  // Constructors\n  VtkReader();                    // Construct a GridCreator with internal stored GridFactory\n  VtkReader(GridFactory<Grid>&);  // Construct a GridCreator referencing the passed GridFactory\n  VtkReader(GridCreator&);        // Reference the passed GridCreator\n\n  // Read the data from a file with filename\n  void read(std::string filename);\n\n  // Construct the Grid from the data read before.\n  std::unique_ptr<Grid> createGrid() const;\n\n  // Static method to construct the Grid directly\n  static std::unique_ptr<Grid> createGridFromFile(std::string file);\n\n  // Extract data from the reader\n  _PointDataGridFunction_ getPointData(std::string name) const;\n  _CellDataGridFunction_  getCellData(std::string name) const;\n};\n```\nwhere `Grid` is a dune grid type providing a `GridFactory` specialization, `GridCreator is\nthe policy type implementing how the raw data from the file is transformed in data that can\nbe passed to the GridFactory and `FieldType` is the data for for internal storage of value\ndata from the file, i.e. point-data or cell-data.\n\nThe grid can either be created using the static method `createGridFromFile()` or by first\nconstructing the `VtkReader` with its `GridCreator`, calling `read()` and finally `createGrid()`.\nThe latter allows to access data stored in the reader, like point-data or cell-data.\n\nValue from point-data or cell-data cannot be accessed directly, but through the interface\nof a grid-function. These grid-functions are provided by the `getPointData()` or `getCellData()`\nmember functions of the reader. The interface of a dune-functions grid-function concept is\nimplemented by these two types. The reason why the reader does not provide the data directly\nis, that it is quiet complicated to associate the specific value to a DOF in the grid, since\nthe GridFactory is allows to change the global indexing and even to change to local indexing\nin the elements such that even the local element coordinates might need a transformation\ncompared to that of the element stored in the file. All these renumbering and coordinate\ntransformations are performed by the grid-functions internally.\n\nThe VtkReader supports grid creation in parallel. If a partition file .pvtu is\nprovided, all partitions can be read by either one processor and distributed later on\n(`SerialGridCreator`) or read directly in parallel (`ParallelGridCreator`). The later\nis currently only available in dune-alugrid 2.6.\n\n\ngit-cb00bc20c196100dd0d31010fcf7f8d789d49f43",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.dune-project.org/extensions/dune-vtk",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dune-vtk",
    "package_url": "https://pypi.org/project/dune-vtk/",
    "platform": "",
    "project_url": "https://pypi.org/project/dune-vtk/",
    "project_urls": {
      "Homepage": "https://gitlab.dune-project.org/extensions/dune-vtk"
    },
    "release_url": "https://pypi.org/project/dune-vtk/2.8.0.dev20210524/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "File reader and writer for the VTK Format",
    "version": "2.8.0.dev20210524",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10487832,
  "releases": {
    "0.2.0.dev20201218": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "888322f19060c593ad7a6293b5579d16aff11de52cf177e1ff4fd6fd684f28a2",
          "md5": "197ea16206fd9735deab0fc27edc2e64",
          "sha256": "bed3b8302d06b758d4ce72f9f72a71b0d5a6c35aca8e6380b25aa137deba933b"
        },
        "downloads": -1,
        "filename": "dune-vtk-0.2.0.dev20201218.tar.gz",
        "has_sig": false,
        "md5_digest": "197ea16206fd9735deab0fc27edc2e64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 90459,
        "upload_time": "2020-12-18T22:29:38",
        "upload_time_iso_8601": "2020-12-18T22:29:38.972452Z",
        "url": "https://files.pythonhosted.org/packages/88/83/22f19060c593ad7a6293b5579d16aff11de52cf177e1ff4fd6fd684f28a2/dune-vtk-0.2.0.dev20201218.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0.dev20210318": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f45fbf2b1e7b3d5e9980da22c7552fefb75243ac28d8666b43a3bc4f900800b8",
          "md5": "7b9f3fdc545a6c77e87ccb319f969d98",
          "sha256": "7f3359938cd27e5a847225ff665f67a1a7542567e9af1a782f3f500639bb3dc3"
        },
        "downloads": -1,
        "filename": "dune-vtk-0.2.0.dev20210318.tar.gz",
        "has_sig": false,
        "md5_digest": "7b9f3fdc545a6c77e87ccb319f969d98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 90256,
        "upload_time": "2021-03-18T19:58:29",
        "upload_time_iso_8601": "2021-03-18T19:58:29.310192Z",
        "url": "https://files.pythonhosted.org/packages/f4/5f/bf2b1e7b3d5e9980da22c7552fefb75243ac28d8666b43a3bc4f900800b8/dune-vtk-0.2.0.dev20210318.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.8.0.dev20210521": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e7ec568fe8d3b8ea1c17f6234a5e537cb881cb633bbbe767a8df5304b04e042",
          "md5": "665b6489d59a13ca522fd895621d172d",
          "sha256": "21c7f0720d62005c42890679bc47871e65470e053e343767a1c21bb3a18a859c"
        },
        "downloads": -1,
        "filename": "dune-vtk-2.8.0.dev20210521.tar.gz",
        "has_sig": false,
        "md5_digest": "665b6489d59a13ca522fd895621d172d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 91944,
        "upload_time": "2021-05-27T11:38:46",
        "upload_time_iso_8601": "2021-05-27T11:38:46.596027Z",
        "url": "https://files.pythonhosted.org/packages/1e/7e/c568fe8d3b8ea1c17f6234a5e537cb881cb633bbbe767a8df5304b04e042/dune-vtk-2.8.0.dev20210521.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.8.0.dev20210522": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17bb3ca8d07a44c4188fea700294dc91987817fcca630e6a75b5f60c4cf8f238",
          "md5": "eef36b08e35260b1d4c2da8d6a2b557a",
          "sha256": "f52acc7a6d5475863115657e0e960e7b66645f757882d5baed5810a4502dcdc6"
        },
        "downloads": -1,
        "filename": "dune-vtk-2.8.0.dev20210522.tar.gz",
        "has_sig": false,
        "md5_digest": "eef36b08e35260b1d4c2da8d6a2b557a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 91965,
        "upload_time": "2021-05-27T11:48:20",
        "upload_time_iso_8601": "2021-05-27T11:48:20.481830Z",
        "url": "https://files.pythonhosted.org/packages/17/bb/3ca8d07a44c4188fea700294dc91987817fcca630e6a75b5f60c4cf8f238/dune-vtk-2.8.0.dev20210522.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.8.0.dev20210524": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "496de57e3d749ad6c38bdc3de94826104e02e6405b63dc5e245d1b2306ce7c01",
          "md5": "b27848ad719ebde139169f29dbcccd28",
          "sha256": "a7a5255fce0f4e0f00fe7b8ae7e5a52347fbbbb9feabe599fd1b6d0a84a37f04"
        },
        "downloads": -1,
        "filename": "dune-vtk-2.8.0.dev20210524.tar.gz",
        "has_sig": false,
        "md5_digest": "b27848ad719ebde139169f29dbcccd28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 91955,
        "upload_time": "2021-05-27T12:40:12",
        "upload_time_iso_8601": "2021-05-27T12:40:12.105487Z",
        "url": "https://files.pythonhosted.org/packages/49/6d/e57e3d749ad6c38bdc3de94826104e02e6405b63dc5e245d1b2306ce7c01/dune-vtk-2.8.0.dev20210524.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "496de57e3d749ad6c38bdc3de94826104e02e6405b63dc5e245d1b2306ce7c01",
        "md5": "b27848ad719ebde139169f29dbcccd28",
        "sha256": "a7a5255fce0f4e0f00fe7b8ae7e5a52347fbbbb9feabe599fd1b6d0a84a37f04"
      },
      "downloads": -1,
      "filename": "dune-vtk-2.8.0.dev20210524.tar.gz",
      "has_sig": false,
      "md5_digest": "b27848ad719ebde139169f29dbcccd28",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 91955,
      "upload_time": "2021-05-27T12:40:12",
      "upload_time_iso_8601": "2021-05-27T12:40:12.105487Z",
      "url": "https://files.pythonhosted.org/packages/49/6d/e57e3d749ad6c38bdc3de94826104e02e6405b63dc5e245d1b2306ce7c01/dune-vtk-2.8.0.dev20210524.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}