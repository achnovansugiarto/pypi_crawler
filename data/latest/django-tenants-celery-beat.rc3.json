{
  "info": {
    "author": "David Vaughan",
    "author_email": "david.vaughan@quickrelease.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django-tenants-celery-beat\n\nSupport for celery beat in multitenant Django projects. Schedule periodic tasks for a\nspecific tenant, with flexibility to run tasks with respect to each tenant's timezone. \n\nFor use with [django-tenants](https://github.com/django-tenants/django-tenants) and\n[tenant-schemas-celery](https://github.com/maciej-gol/tenant-schemas-celery).\n\nFeatures:\n- Configure static periodic tasks in `app.conf.beat_schedule` automatically for all\ntenants, optionally in their own timezones\n- Django admin modified to show and give you control over the tenant a task will run in\n- Filter the admin based on tenants\n- Tenant-level admin (e.g. tenant.domain.com) will only show tasks for that tenant\n\n## Installation\n\nInstall via pip:\n```commandline\npip install django-tenants-celery-beat\n```\n\n## Usage\n\nFollow the instructions for [django-tenants](https://github.com/django-tenants/django-tenants)\nand [tenant-schemas-celery](https://github.com/maciej-gol/tenant-schemas-celery).\n\nIn your `SHARED_APPS` (_not_ your `TENANT_APPS`):\n```python\nSHARED_APPS = [\n    # ...\n    \"django_celery_results\",\n    \"django_celery_beat\",\n    \"django_tenants_celery_beat\",\n    # ...\n]\n```\nDepending on your setup, you may also put `django_celery_results` in your `TENANT_APPS`.\n(Assuming you have followed the instructions for\n[django-tenants](https://github.com/django-tenants/django-tenants)\nall your `SHARED_APPS` will also appear in your `INSTALLED_APPS`.)\n\n`django-tenants-celery-beat` requires your `Tenant` model to have a `timezone` field in\norder to control periodic task scheduling. To this end, we provide a `TenantTimezoneMixin`\nthat you should inherit from in your `Tenant` model, e.g.:\n```python\nfrom django_tenants.models import TenantMixin\nfrom django_tenants_celery_beat.models import TenantTimezoneMixin\n\nclass Tenant(TenantTimezoneMixin, TenantMixin):\n    pass\n```\nYou can configure whether the timezones are displayed with the GMT offset, i.e.\n`Australia/Sydney` vs. `GMT+11:00 Australia/Sydney`, using the setting\n`TENANT_TIMEZONE_DISPLAY_GMT_OFFSET`. By default, the GMT offset is not shown.\n(If you later change this setting, you will need to run `makemigrations` to see any effect.)\n\nEnsure that `DJANGO_CELERY_BEAT_TZ_AWARE` is True (the default) for any timezone aware\nscheduling to work.\n\nIn order to make the link between your `Tenant` model and `PeriodicTask`, the app comes\nwith an abstract model. You simply need create a class that inherits from this mixin and\ndoes nothing else. Having this model in your own first-party app means that the migrations\ncan be managed properly.\n```python\nfrom django_tenants_celery_beat.models import PeriodicTaskTenantLinkMixin\n\nclass PeriodicTaskTenantLink(PeriodicTaskTenantLinkMixin):\n    pass\n```\nYou need to register which model is acting as the link. If your tenancy models live in\nan app called `tenancy` and the model is named as above, you need the following in your\nproject settings:\n```python\nPERIODIC_TASK_TENANT_LINK_MODEL = \"tenancy.PeriodicTaskTenantLink\"\n```\n\nOnce this has been done, you will need to run `makemigrations`. This will create the\nnecessary migrations for your `Tenant` and `PeriodicTaskTenantLink` models.\nTo apply the migrations, run:\n```commandline\npython manage.py migrate_schemas --shared\n```\n\n### Setting up a `beat_schedule`\n\nFor statically configured periodic tasks assigned via `app.conf.beat_schedule`, there\nis a helper utility function to produce a valid tenant-aware `beat_schedule`. You can take\nan existing `beat_schedule` and make minor modifications to achieve the desired behaviour.\n\nThe `generate_beat_schedule` function takes a dict that looks exactly like the usual\n`beat_schedule` dict, but each task contains an additional entry with the key `tenancy_options`.\nHere you can specify three things:\n- Should the task run in the `public` schema?\n- Should the task run on all tenant schemas?\n- Should the task scheduling use the tenant's timezone?\n\nAll of these are False by default, so you only need to include them if you set them to True,\nthough you may prefer to keep them there to be explicit about your intentions. At least one\nof the `public` or `all_tenants` keys must be True, otherwise the entry is ignored.\nAdditionally, if the `tenancy_option` key is missing from an entry, that entry will be ignored.\n\nExample usage:\n```python\napp.conf.beat_schedule = generate_beat_schedule(\n    {\n        \"tenant_task\": {\n            \"task\": \"app.tasks.tenant_task\",\n            \"schedule\": crontab(minute=0, hour=12, day_of_week=1),\n            \"tenancy_options\": {\n                \"public\": False,\n                \"all_tenants\": True,\n                \"use_tenant_timezone\": True,\n            }\n        },\n        \"hourly_tenant_task\": {\n            \"task\": \"app.tasks.hourly_tenant_task\",\n            \"schedule\": crontab(minute=0),\n            \"tenancy_options\": {\n                \"public\": False,\n                \"all_tenants\": True,\n                \"use_tenant_timezone\": False,\n            }\n        },\n        \"public_task\": {\n            \"task\": \"app.tasks.tenant_task\",\n            \"schedule\": crontab(minute=0, hour=0, day_of_month=1),\n            \"tenancy_options\": {\n                \"public\": True,\n                \"all_tenants\": False,\n            }\n        }\n    }\n)\n```\nThis `beat_schedule` will actually produce an entry for each tenant with the schema name\nas a prefix. For example, `tenant1: celery.backend_cleanup`. For public tasks, there is\nno prefix added to the name.\n\nThis function also sets some AMQP message headers, which is how the schema and timezone\nsettings are configured.\n\n#### Configuring `celery.backend_cleanup`\n\nNote that in many cases, tasks should not be both run on the `public` schema and on all\ntenant schemas, as the database tables are often very different. One example that most\nlikely should is the `celery.backend_cleanup` task that is automatically added. If you\ndo nothing with it, it will run only in the public schema, which may or may not suit your\nneeds. Assuming you have `django_celery_results` in `TENANT_APPS` you will need this task to\nbe run on all tenants, and if you also have it in `SHARED_APPS`, you will need it to run\non the `public` schema too. This task is also a case where you will likely want it to run\nin the tenant's timezone so it always runs during a quiet time.\n\nUsing the utility function, this is how we could set up the `celery.backend_cleanup` task:\n```python\nfrom django_tenants_celery_beat.utils import generate_beat_schedule\n\n# ...\n\napp.conf.beat_schedule = generate_beat_schedule(\n    {\n        \"celery.backend_cleanup\": {\n            \"task\": \"celery.backend_cleanup\",\n            \"schedule\": crontab(\"0\", \"4\", \"*\"),\n            \"options\": {\"expire_seconds\": 12 * 3600},\n            \"tenancy_options\": {\n                \"public\": True,\n                \"all_tenants\": True,\n                \"use_tenant_timezone\": True,\n            }\n        }\n    }\n)\n```\nThis will prevent the automatically created one being added, though the settings are\nidentical to the automatic one as of `django-celery-beat==2.2.0`. You could also set\n`public` to False here for exactly the same resulting schedule, as the public one will\nbe automatically created by `django-celery-beat`.\n\n### Modifying Periodic Tasks in the Django Admin\n\nYou can further manage periodic tasks in the Django admin.\n\nThe public schema admin will display the periodic tasks for each tenant as well as the\npublic tenant.\n\nWhen on a tenant-level admin (e.g. `tenant.domain.com`), you can only see\nthe tasks for the given tenant, and any filters are hidden so as to not show a list of\ntenants.\n\nWhen editing a `PeriodicTask`, there is an inline form for the `OneToOneModel` added by\nthis package that connects a `PeriodicTask` to a `Tenant`. You can toggle the\n`use_tenant_timezone` setting (but when restarting the beat service, the `beat_schedule`\nwill always take precedence). The tenant is shown as a read-only field, unless you are\non the public admin site, in which case you have the option edit the tenant. Editing the\ntenant here will take precedence over the `beat_schedule`.\n\n## Developer Setup\n\nTo set up the example app:\n1. Navigate into the `example` directory\n2. Create a virtual environment and install the requirements in `requirements.txt`\n3. Create a postgres database according to the `example.settings.DATABASES[\"default\"]` (edit the settings if necessary)\n4. Run `python manage.py migrate_schemas` to create the public schema\n5. Run `python manage.py create_tenant` to create the public tenant and any other tenants\n6. Create superusers with `python manage.py create_tenant_superuser`\n7. Run `celery -A example beat --loglevel=INFO` to run the beat scheduler\n8. Run `celery -A example worker --loglevel=INFO` (add `--pool=solo` if on Windows)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/QuickRelease/django-tenants-celery-beat",
    "keywords": "django tenants celery beat multitenancy postgres postgresql",
    "license": "MIT",
    "maintainer": "Quick Release (Automotive) Ltd.",
    "maintainer_email": "",
    "name": "django-tenants-celery-beat",
    "package_url": "https://pypi.org/project/django-tenants-celery-beat/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-tenants-celery-beat/",
    "project_urls": {
      "Homepage": "https://github.com/QuickRelease/django-tenants-celery-beat"
    },
    "release_url": "https://pypi.org/project/django-tenants-celery-beat/0.2.0/",
    "requires_dist": [
      "Django (>=2.0)",
      "django-tenants (>=3.0.0)",
      "tenant-schemas-celery (>=1.0.1)",
      "django-celery-beat (>=2.2.0)",
      "django-timezone-field (>=4.1.1)"
    ],
    "requires_python": "",
    "summary": "Support for celery beat in multitenant Django projects",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15176513,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f09d094ae1f6548ce1928d168f5ca3750bde66d7bd6cb6450170bd67b582bc3",
          "md5": "4847bb39b75315b1f99b86ef95a7b4c0",
          "sha256": "acd2be1c2e02efe4870185ec48c72aa6e65a358ce652003ed3c9f76f3fb50aed"
        },
        "downloads": -1,
        "filename": "django_tenants_celery_beat-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4847bb39b75315b1f99b86ef95a7b4c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9010,
        "upload_time": "2021-02-26T17:24:51",
        "upload_time_iso_8601": "2021-02-26T17:24:51.567712Z",
        "url": "https://files.pythonhosted.org/packages/7f/09/d094ae1f6548ce1928d168f5ca3750bde66d7bd6cb6450170bd67b582bc3/django_tenants_celery_beat-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "524b0dd39ad7e88cd1dd081d7446db9e520068b225088b448e86ce99b80062df",
          "md5": "36d1be5d82932524462243c138d11f6e",
          "sha256": "9a83eec9753d068d9698ad90736febd697743d334da2d21027dda2d79b3a3aa1"
        },
        "downloads": -1,
        "filename": "django-tenants-celery-beat-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "36d1be5d82932524462243c138d11f6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10702,
        "upload_time": "2021-02-26T17:24:52",
        "upload_time_iso_8601": "2021-02-26T17:24:52.677776Z",
        "url": "https://files.pythonhosted.org/packages/52/4b/0dd39ad7e88cd1dd081d7446db9e520068b225088b448e86ce99b80062df/django-tenants-celery-beat-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d6acff13b34aef314b6938a4bcba3f24568505c79b33229e81578c758903ffc",
          "md5": "a4e487de3bf68a09d60e02c8100ee7c3",
          "sha256": "04891802b4be5a722c5d6a44281759af4fb70df1e3ae709a7cbc6b78e190f81d"
        },
        "downloads": -1,
        "filename": "django_tenants_celery_beat-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4e487de3bf68a09d60e02c8100ee7c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9297,
        "upload_time": "2021-04-30T16:16:17",
        "upload_time_iso_8601": "2021-04-30T16:16:17.866859Z",
        "url": "https://files.pythonhosted.org/packages/3d/6a/cff13b34aef314b6938a4bcba3f24568505c79b33229e81578c758903ffc/django_tenants_celery_beat-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a6b2b31975a00fd29e977a6f4f29e9c37f44a415bee338878a8d86116eb08c5",
          "md5": "bac2c01ba46f852dd5775c37a21100ce",
          "sha256": "c7513e2c000d2d2db8a11bee91681dcc18c22b72dce88af897a3498047991349"
        },
        "downloads": -1,
        "filename": "django-tenants-celery-beat-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bac2c01ba46f852dd5775c37a21100ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10935,
        "upload_time": "2021-04-30T16:16:19",
        "upload_time_iso_8601": "2021-04-30T16:16:19.398786Z",
        "url": "https://files.pythonhosted.org/packages/2a/6b/2b31975a00fd29e977a6f4f29e9c37f44a415bee338878a8d86116eb08c5/django-tenants-celery-beat-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3843042476aee720a436a382f76399af2af5a5c10472ace9cf1b2e8c8661dff",
          "md5": "8dfea50ec48027ed7dac8dac09d6012a",
          "sha256": "7ead6b66751704d13c3bce40c7f2c71559438b40957d2562e25484c4c0b009ef"
        },
        "downloads": -1,
        "filename": "django_tenants_celery_beat-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8dfea50ec48027ed7dac8dac09d6012a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9877,
        "upload_time": "2022-09-22T08:54:15",
        "upload_time_iso_8601": "2022-09-22T08:54:15.193638Z",
        "url": "https://files.pythonhosted.org/packages/d3/84/3042476aee720a436a382f76399af2af5a5c10472ace9cf1b2e8c8661dff/django_tenants_celery_beat-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c28bdb3a75b36ebcbf27a2783f92b73a75bb820c23d1f9203d1787fae7d99942",
          "md5": "6374fdecc1c22ed7d223da52f8274ba7",
          "sha256": "6ae4d775007dff2cd7398ada09e6720597efa909bf112230d5c181321571fc5a"
        },
        "downloads": -1,
        "filename": "django-tenants-celery-beat-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6374fdecc1c22ed7d223da52f8274ba7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11319,
        "upload_time": "2022-09-22T08:54:16",
        "upload_time_iso_8601": "2022-09-22T08:54:16.997658Z",
        "url": "https://files.pythonhosted.org/packages/c2/8b/db3a75b36ebcbf27a2783f92b73a75bb820c23d1f9203d1787fae7d99942/django-tenants-celery-beat-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3843042476aee720a436a382f76399af2af5a5c10472ace9cf1b2e8c8661dff",
        "md5": "8dfea50ec48027ed7dac8dac09d6012a",
        "sha256": "7ead6b66751704d13c3bce40c7f2c71559438b40957d2562e25484c4c0b009ef"
      },
      "downloads": -1,
      "filename": "django_tenants_celery_beat-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8dfea50ec48027ed7dac8dac09d6012a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9877,
      "upload_time": "2022-09-22T08:54:15",
      "upload_time_iso_8601": "2022-09-22T08:54:15.193638Z",
      "url": "https://files.pythonhosted.org/packages/d3/84/3042476aee720a436a382f76399af2af5a5c10472ace9cf1b2e8c8661dff/django_tenants_celery_beat-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c28bdb3a75b36ebcbf27a2783f92b73a75bb820c23d1f9203d1787fae7d99942",
        "md5": "6374fdecc1c22ed7d223da52f8274ba7",
        "sha256": "6ae4d775007dff2cd7398ada09e6720597efa909bf112230d5c181321571fc5a"
      },
      "downloads": -1,
      "filename": "django-tenants-celery-beat-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6374fdecc1c22ed7d223da52f8274ba7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11319,
      "upload_time": "2022-09-22T08:54:16",
      "upload_time_iso_8601": "2022-09-22T08:54:16.997658Z",
      "url": "https://files.pythonhosted.org/packages/c2/8b/db3a75b36ebcbf27a2783f92b73a75bb820c23d1f9203d1787fae7d99942/django-tenants-celery-beat-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}