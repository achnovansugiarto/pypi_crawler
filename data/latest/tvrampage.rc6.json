{
  "info": {
    "author": "Christian Kreutzer",
    "author_email": "herr.kreutzer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "About\n-----\n\npython-tvrage is a python based object oriented client interface for tvrage.com's XML based api `feeds`_.\n\n.. _feeds: http://www.tvrage.com/xmlfeeds.php\n\nInstallation\n------------\n\nInstall from sources::\n\n    $ python setup.py install\n\nThe easiest way to get started with python-tvrage is to use `easy_install` or `pip`::\n    \n    $ easy_install -U python-tvrage\n\nFor `pip` you have to replace **'easy_install'** with **'pip install'**. Also your platform may require the use of `sudo`\n\nDocumentation\n-------------\n\nThe `tvrage` package consists of three modules\n\n- the tvrage.feeds module provides a wrapper function for each of tvrage's XML-feeds\n- the tvrage.api module provides an clean and object oriented interface on top of those services\n- the tvrage.quickinfo module is a simple pythonic wrapper for tvrage's quickinfo api. Values are returned as python dictionaries rather than dedicated objects for tv shows and episodes \n\nFetching XML data\n+++++++++++++++++\n\nThe `tvrage.feeds` module provides very basic and low level access to the tvrage.com data feeds. For more complex use cases it is recomended to use the object oriented module `tvrage.api`.\nNote: All functions in the `tvrage.feeds` module return XML data as ElementTree objects.\n\nsearching for TV shows using the general `search` feed (returns fuzzy search results)::\n\n    $ python\n    >>> from tvrage import feeds\n    >>> from xml.etree.ElementTree import tostring\n    >>>\n    >>> doctor_who = feeds.search('doctorwho2005')\n    >>> for node in doctor_who:\n    ...     print(tostring(node))\n    ... \n    <show>\n    <showid>3332</showid>\n    <name>Doctor Who (2005)</name>\n    <link>http://www.tvrage.com/DoctorWho_2005</link>\n    <country>UK</country>\n    <started>2005</started>\n    <ended>0</ended>\n    <seasons>5</seasons>\n    <status>Returning Series</status>\n    <classification>Scripted</classification>\n    <genres>\n    <genre01>Action</genre01><genre02>Adventure</genre02><genre03>Sci-Fi</genre03>\n    </genres>\n    </show>\n    \n    <show>\n    <showid>3331</showid>\n    <name>Doctor Who</name>\n    <link>http://www.tvrage.com/Doctor_Who_1963</link>\n    <country>UK</country>\n    <started>1963</started>\n    <ended>1989</ended>\n    <seasons>27</seasons>\n    <status>Canceled/Ended</status>\n    <classification>Scripted</classification>\n    <genres>\n    <genre01>Action</genre01><genre02>Adventure</genre02><genre03>Sci-Fi</genre03>\n    </genres>\n    </show>\n    \nusing `full_search` includes all availabe meta data about the shows into the search results::\n\n    >>> doctor_who = feeds.full_search('doctorwho2005')\n    >>> print(tostring(doctor_who[0]))\n    <show>\n    <showid>3332</showid>\n    <name>Doctor Who (2005)</name>\n    <link>http://www.tvrage.com/DoctorWho_2005</link>\n    <country>UK</country>\n    <started>Mar/26/2005</started>\n    <ended />\n    <seasons>5</seasons>\n    <status>Returning Series</status>\n    <runtime>50</runtime>\n    <classification>Scripted</classification>\n    <genres>\n    <genre>Action</genre><genre>Adventure</genre><genre>Sci-Fi</genre>\n    </genres>\n    <network country=\"UK\">BBC One</network>\n    <airtime>19:00</airtime>\n    <airday>Saturday</airday>\n    <akas>\n    <aka country=\"FR\">Docteur Who</aka>\n    <aka attr=\"Alternative Spelling\" country=\"UK\">Dr. Who</aka>\n    <aka country=\"IS\">T&#237;maflakk</aka>\n    <aka attr=\"Fake Working Title\" country=\"UK\">Torchwood</aka>\n    <aka country=\"BG\">&#1044;&#1086;&#1082;&#1090;&#1086;&#1088; &#1050;&#1086;&#1081;</aka>\n    <aka country=\"RU\">&#1044;&#1086;&#1082;&#1090;&#1086;&#1088; &#1050;&#1090;&#1086;</aka>\n    <aka country=\"IL\">&#1491;&#1493;&#1511;&#1496;&#1493;&#1512; &#1492;&#1493;</aka>\n    <aka country=\"IN\">&#2337;&#2377;&#2325;&#2381;&#2335;&#2352; &#2361;&#2370;</aka>\n    <aka country=\"CN\">&#30064;&#19990;&#22855;&#20154;</aka></akas>\n    </show>\n        \nThe `showinfo` feed retrieves all meta data about one single show using the given `showid`. The result is identical to one element from the `full_search` results.\n\nThe `episode_list` feed returns all meta data about episodes of a TV show sorted by season. The optional `node` argument causes the function to return the desired XML node as ElementTree object::\n    \n    >>> doctor_who_eps = feeds.episode_list('3332', node='Episodelist')\n    >>> print(tostring(doctor_who_eps[0]))\n    <Season no=\"1\">\n    <episode>\n    <epnum>1</epnum>\n    <seasonnum>01</seasonnum>\n    <prodnum>101</prodnum>\n    <airdate>2005-03-26</airdate>\n    <link>http://www.tvrage.com/DoctorWho_2005/episodes/52117</link>\n    <title>Rose</title></episode>\n    <episode>\n    <epnum>2</epnum>\n    <seasonnum>02</seasonnum>\n    <prodnum>102</prodnum>\n    <airdate>2005-04-02</airdate>\n    <link>http://www.tvrage.com/DoctorWho_2005/episodes/52118</link>\n    <title>The End of the World</title></episode>\n    ...\n    </Season>\n    \nThe `full_show_info` feed combines the results of both `showinfo` and `episode_list`.\n\nUsing objects\n+++++++++++++\n\nThe module `tvrage.api` provides wrapper classes for tvrage.com's data feeds. It contains the following classes: `Show`, `Season` and `Episode`.\n\nWorking with TV show objects::\n\n    $ python\n    >>> import tvrage.api\n    >>> doctor_who = tvrage.api.Show('doctorwho2005')\n    >>> doctor_who.country\n    'UK'\n    >>> doctor_who.current_season\n    {1: Doctor Who (2005) 5x01 The Eleventh Hour, 2: Doctor Who (2005) 5x02 The Beast... }\n    >>> doctor_who.ended\n    0\n    >>> doctor_who.episodes\n    {1: {1: Doctor Who (2005) 1x01 Rose, 2: Doctor Who (2005) 1x02 The End of the World, ... }}\n    >>> doctor_who.genres\n    ['Action', 'Adventure', 'Sci-Fi']\n    >>> doctor_who.latest_episode\n    Doctor Who (2005) 5x04 The Time of Angels (1)\n    >>> doctor_who.next_episode\n    Doctor Who (2005) 5x05 Flesh and Stone (2)\n    >>> doctor_who.link\n    'http://www.tvrage.com/DoctorWho_2005'\n    >>> doctor_who.name\n    'Doctor Who (2005)'\n    >>> doctor_who.pilot\n    Doctor Who (2005) 1x01 Rose\n    >>> doctor_who.season(2)\n    {1: Doctor Who (2005) 2x01 New Earth, 2: Doctor Who (2005) 2x02 Tooth and Claw, ... }\n    >>> doctor_who.seasons\n    5\n    >>> doctor_who.shortname\n    'doctorwho2005'\n    >>> doctor_who.showid\n    '3332'\n    >>> doctor_who.started\n    2005\n    >>> doctor_who.status\n    'Returning Series'\n    >>> doctor_who.upcoming_episodes\n    <generator object upcoming_episodes at 0x152f0a8>\n    \n    \nThe `Season` object is a python dict with additional properties::\n    \n    >>> s4 = doctor_who.season(4)\n    >>> s4.is_current\n    False\n    >>> s4.premiere\n    Doctor Who (2005) 4x01 Partners in Crime\n    >>> s4.finale\n    Doctor Who (2005) 4x13 Journey's End (3)\n    >>> s4.episode(3)\n    Doctor Who (2005) 4x03 Planet of the Ood\n    >>> s4.values()\n    [Doctor Who (2005) 4x01 Partners in Crime, Doctor Who (2005) 4x02 The Fires of... ]\n    >>> s4.keys()\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\nThe `Episode` object contains all information related to an certain episode::\n\n    >>> rose = doctor_who.season(1).episode(1)\n    >>> rose.airdate\n    datetime.date(2005, 3, 26)\n    >>> rose.link\n    'http://www.tvrage.com/DoctorWho_2005/episodes/52117'\n    >>> rose.number\n    1\n    >>> rose.prodnumber\n    '101'\n    >>> rose.season\n    1\n    >>> rose.show\n    'Doctor Who (2005)'\n    >>> rose.title\n    'Rose'\n\nFor some episodes there is detailed summary information available. This information is not provided by the XML feeds, so it has to be extracted from the episode's overview page via web scraping. Since it would be quite slow to load all those web pages for entire seasons upfront, the summary information is only loaded when the `Episode.summary` property is actually beeing read::\n\n    >>> nextff = tvrage.api.Show('flashforward').next_episode\n    >>> nextff\n    FlashForward 1x18 Goodbye Yellow Brick Road\n    >>> nextff.summary # spoilers alert!... you have to try this one for your self ;)\n   \nUsing the Quickinfo Feed\n++++++++++++++++++++++++\n\nThe modul `tvrage.quickinfo` provides easy access to the tvrage's `quickinfo feed`_.\n\n.. _quickinfo feed: http://services.tvrage.com/info.php?page=quickinfo\n\nYou can fetch meta data about a tv show alone::\n\n    >>> from tvrage import quickinfo\n    >>> quickinfo.fetch('doctor who 2005')\n    {'Status': 'Returning Series', 'Genres': ['Action', 'Adventure', 'Sci-Fi'], 'Network': 'BBC One (United Kingdom)', \n    'Classification': 'Scripted', 'Started': 'Mar/26/2005', 'Show Name': 'Doctor Who (2005)', 'Show URL': \n    'http://www.tvrage.com/DoctorWho_2005', 'Premiered': '2005', 'Airtime': 'Saturday at 07:00 pm', 'Ended': '', \n    'Show ID': '3332', 'Country': 'United Kingdom', 'Runtime': '50', 'Latest Episode': ['05x13', 'The Big Bang (2)', 'Jun/26/2010']} \n\nor you can fetch informations about an specific episode combined with the show's meta data::\n\n    >>> epinfo = quickinfo.fetch('doctor who 2005', ep='1x01')    \n    >>> epinfo\n    {'Status': 'Returning Series', 'Genres': ['Action', 'Adventure', 'Sci-Fi'], ...\n    >>> epinfo['Episode Info']\n    ['01x01', 'Rose', '26/Mar/2005']\n    >>> epinfo['Episode URL']\n    'http://www.tvrage.com/DoctorWho_2005/episodes/52117'",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ckreutzer/python-tvrage",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "tvrampage",
    "package_url": "https://pypi.org/project/tvrampage/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/tvrampage/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ckreutzer/python-tvrage"
    },
    "release_url": "https://pypi.org/project/tvrampage/1.0.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "python client for the tvrage.com XML API",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1524389,
  "releases": {
    "1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "075b92320150a81a36699d112fa39596d9b6f4458cfad5fe8ad2397ea661313a",
          "md5": "ed31bd5e091aba9605a0cc8eb3f04b1f",
          "sha256": "5a46a4f27c14685832996c8af883c34c8e83eb52f12637ea7acf372327eaabcd"
        },
        "downloads": -1,
        "filename": "tvrampage-1.tar.gz",
        "has_sig": true,
        "md5_digest": "ed31bd5e091aba9605a0cc8eb3f04b1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11122,
        "upload_time": "2014-12-16T08:52:45",
        "upload_time_iso_8601": "2014-12-16T08:52:45.659669Z",
        "url": "https://files.pythonhosted.org/packages/07/5b/92320150a81a36699d112fa39596d9b6f4458cfad5fe8ad2397ea661313a/tvrampage-1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9350ffba750594ff47cfce63341cf838e9d46ebf3cf0e857b75937419501f3c",
          "md5": "d05b26f2ca61f1602d4846eb3dcb849b",
          "sha256": "ab45e13aafd470e2125b38fad0730e54bbbe0a0e168711eadcefb83074452d61"
        },
        "downloads": -1,
        "filename": "tvrampage-1.0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "d05b26f2ca61f1602d4846eb3dcb849b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11189,
        "upload_time": "2014-12-16T22:23:39",
        "upload_time_iso_8601": "2014-12-16T22:23:39.940064Z",
        "url": "https://files.pythonhosted.org/packages/a9/35/0ffba750594ff47cfce63341cf838e9d46ebf3cf0e857b75937419501f3c/tvrampage-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc6d8d92784efffa749e728ff975de8b75763a27d56f212395f465f4cd250f58",
          "md5": "615653b33071e912d61a6f6dc0339bdb",
          "sha256": "258721d4fe4ff6509a0a0e0cb834f3b80cd0aa0ee4b0dcda8944416660e274d3"
        },
        "downloads": -1,
        "filename": "tvrampage-1.0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "615653b33071e912d61a6f6dc0339bdb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11217,
        "upload_time": "2014-12-18T11:23:10",
        "upload_time_iso_8601": "2014-12-18T11:23:10.154007Z",
        "url": "https://files.pythonhosted.org/packages/cc/6d/8d92784efffa749e728ff975de8b75763a27d56f212395f465f4cd250f58/tvrampage-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43f4ca270a6d4224d36f0113fa707132a14cffaa8e5ce826579ccdfa12c8bb09",
          "md5": "a8ef4fd6286d307a68531fa3f628fa51",
          "sha256": "49ff2ae25417dd58f5fe05e4322c0aeece4f2a5adb94a4dba07e3463d5eb8e62"
        },
        "downloads": -1,
        "filename": "tvrampage-1.0.3.tar.gz",
        "has_sig": true,
        "md5_digest": "a8ef4fd6286d307a68531fa3f628fa51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11254,
        "upload_time": "2014-12-18T11:40:03",
        "upload_time_iso_8601": "2014-12-18T11:40:03.642451Z",
        "url": "https://files.pythonhosted.org/packages/43/f4/ca270a6d4224d36f0113fa707132a14cffaa8e5ce826579ccdfa12c8bb09/tvrampage-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5223d6d3fea179041b7707377d7264f4c49b293808c4cef3cad3cfbd07ddeb3e",
          "md5": "265dd68e11fb5baacac2f5d0cd7ddc0a",
          "sha256": "b5327d4299ece4b9b0e2925ee41ffead574790e92bb7c1f0d41644e72a42d423"
        },
        "downloads": -1,
        "filename": "tvrampage-1.0.4.tar.gz",
        "has_sig": true,
        "md5_digest": "265dd68e11fb5baacac2f5d0cd7ddc0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11270,
        "upload_time": "2014-12-19T18:00:12",
        "upload_time_iso_8601": "2014-12-19T18:00:12.631673Z",
        "url": "https://files.pythonhosted.org/packages/52/23/d6d3fea179041b7707377d7264f4c49b293808c4cef3cad3cfbd07ddeb3e/tvrampage-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d07f7aea9f13c2af57a8d48a3b2cf26167f732a40f895915bb98ad69121d50ca",
          "md5": "7e8e48feea5a0bcc5b1ad7dffd3171dc",
          "sha256": "0dc129f6db85229c6a9724c89355922d93f5bb01a6121136757b1f9cfc223733"
        },
        "downloads": -1,
        "filename": "tvrampage-1.0.5.tar.gz",
        "has_sig": true,
        "md5_digest": "7e8e48feea5a0bcc5b1ad7dffd3171dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11370,
        "upload_time": "2015-04-28T12:29:06",
        "upload_time_iso_8601": "2015-04-28T12:29:06.760231Z",
        "url": "https://files.pythonhosted.org/packages/d0/7f/7aea9f13c2af57a8d48a3b2cf26167f732a40f895915bb98ad69121d50ca/tvrampage-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d07f7aea9f13c2af57a8d48a3b2cf26167f732a40f895915bb98ad69121d50ca",
        "md5": "7e8e48feea5a0bcc5b1ad7dffd3171dc",
        "sha256": "0dc129f6db85229c6a9724c89355922d93f5bb01a6121136757b1f9cfc223733"
      },
      "downloads": -1,
      "filename": "tvrampage-1.0.5.tar.gz",
      "has_sig": true,
      "md5_digest": "7e8e48feea5a0bcc5b1ad7dffd3171dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11370,
      "upload_time": "2015-04-28T12:29:06",
      "upload_time_iso_8601": "2015-04-28T12:29:06.760231Z",
      "url": "https://files.pythonhosted.org/packages/d0/7f/7aea9f13c2af57a8d48a3b2cf26167f732a40f895915bb98ad69121d50ca/tvrampage-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}