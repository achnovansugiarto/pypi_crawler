{
  "info": {
    "author": "TNO MPC Lab",
    "author_email": "mpclab@tno.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Security :: Cryptography",
      "Typing :: Typed"
    ],
    "description": "# TNO MPC Lab - Protocols - Secure Comparison\n\nThe TNO MPC lab consists of generic software components, procedures, and functionalities developed and maintained on a regular basis to facilitate and aid in the development of MPC solutions. The lab is a cross-project initiative allowing us to integrate and reuse previously developed MPC functionalities to boost the development of new protocols and solutions.\n\nThe package tno.mpc.secure_comparison is part of the TNO Python Toolbox.\n\n*Remark: This cryptography software may not be used in applications that violate international export control legislations.*  \n*This implementation of cryptographic software has not been audited. Use at your own risk.*\n\n## Documentation\n\nDocumentation of the tno.mpc.secure_comparison package can be found [here](https://docs.mpc.tno.nl/protocols/secure_comparison/4.1.2).\n\n## Install\n\nEasily install the tno.mpc.secure_comparison package using pip:\n```console\n$ python -m pip install tno.mpc.secure_comparison\n```\n\n## Note:\nA significant performance improvement for some algorithms can be achieved by installing the GMPY2 library.\n```console\n$ python -m pip install tno.mpc.secure_comparison[gmpy]\n```\n\n## Usage\n```python\nimport asyncio\n\nfrom tno.mpc.communication import Pool\nfrom tno.mpc.encryption_schemes.dgk import DGK\nfrom tno.mpc.encryption_schemes.paillier import Paillier\nfrom tno.mpc.encryption_schemes.utils import next_prime\n\nfrom tno.mpc.protocols.secure_comparison import Initiator, KeyHolder\n\n\nasync def run_protocol():\n    taskA = asyncio.create_task(alice.perform_secure_comparison(x_enc, y_enc))\n    taskB = asyncio.create_task(bob.perform_secure_comparison())\n\n    x_leq_y_enc, _ = await asyncio.gather(*[taskA, taskB])\n    x_leq_y = scheme_paillier.decrypt(x_leq_y_enc)\n    assert x_leq_y == 1\n\n\nif __name__ == \"__main__\":\n    # Set maximum bit length\n    l = 16\n    # Setup the Paillier scheme\n    scheme_paillier = Paillier.from_security_parameter(key_length=2048)\n    # Setup the DGK scheme\n    u = next_prime((1 << (l + 2)))\n    scheme_dgk = DGK.from_security_parameter(\n        v_bits=160, n_bits=2048, u=u, full_decryption=False\n    )\n\n    # Setup communication pools\n    pool_alice = Pool()\n    pool_alice.add_http_server(8040)\n    pool_alice.add_http_client(\"keyholder\", \"localhost\", 8041)\n    pool_bob = Pool()\n    pool_bob.add_http_server(8041)\n    pool_bob.add_http_client(\"initiator\", \"localhost\", 8040)\n\n    # Encrypt two numbers (x,y) for the protocol and set the maximum bit_length (l)\n    x = 23\n    y = 42\n    x_enc = scheme_paillier.encrypt(x)\n    y_enc = scheme_paillier.encrypt(y)\n\n    alice = Initiator(l, communicator=pool_alice, other_party=\"keyholder\")\n    bob = KeyHolder(\n        l,\n        communicator=pool_bob,\n        other_party=\"initiator\",\n        scheme_paillier=scheme_paillier,\n        scheme_dgk=scheme_dgk,\n    )\n\n    # Run entire protocol interactively:\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run_protocol())\n\n    # Or execute the protocol steps without interaction\n    z_enc, r = alice.step_1(x_enc, y_enc, l, scheme_paillier)\n    z, beta = bob.step_2(z_enc, l, scheme_paillier)\n    alpha = alice.step_3(r, l)\n    d_enc = bob.step_4a(z, scheme_dgk, scheme_paillier, l)\n    beta_is_enc = bob.step_4b(beta, l, scheme_dgk)\n    d_enc = alice.step_4c(d_enc, r, scheme_dgk, scheme_paillier)\n    alpha_is_xor_beta_is_enc = alice.step_4d(alpha, beta_is_enc)\n    w_is_enc, alpha_tilde = alice.step_4e(\n        r, alpha, alpha_is_xor_beta_is_enc, d_enc, scheme_paillier\n    )\n    w_is_enc = alice.step_4f(w_is_enc)\n    s, delta_a = alice.step_4g()\n    c_is_enc = alice.step_4h(\n        s, alpha, alpha_tilde, d_enc, beta_is_enc, w_is_enc, delta_a, scheme_dgk\n    )\n    c_is_enc = alice.step_4i(c_is_enc, scheme_dgk)\n    delta_b = bob.step_4j(c_is_enc, scheme_dgk)\n    zeta_1_enc, zeta_2_enc, delta_b_enc = bob.step_5(z, l, delta_b, scheme_paillier)\n    beta_lt_alpha_enc = alice.step_6(delta_a, delta_b_enc)\n    x_leq_y_enc = alice.step_7(\n        zeta_1_enc, zeta_2_enc, r, l, beta_lt_alpha_enc, scheme_paillier\n    )\n    x_leq_y = scheme_paillier.decrypt(x_leq_y_enc)\n    assert x_leq_y == 1\n```\n\nThe communicator object is required only when the protocol is ran through `perform_secure_comparison`. In that case, one may choose to pass any communicator object that adheres to the `tno.mpc.protocols.secure_comparison.Communicator` protocol. An example can be found in the unit tests.\n\n### ! SAFETY NOTICE ! ENSURE CIPHERTEXTS ARE RANDOMIZED\n\nSince version 2.0.0 of `tno.mpc.encryption_schemes.paillier` and `tno.mpc.encryption_schemes.dgk`, it is possible to (potentially) make protocols more efficient by delaying randomization of ciphertexts. This library always operates in this 'expert' mode and therefore several protocol steps yield non-randomized ciphertext outputs. As a consequence, if the user chooses to perform the secure comparison steps manually, she needs to make sure that the resulting ciphertexts are randomized before they are communicated. If the `tno.mpc.communication` library is used (or more specifically, the Paillier and DGK serialize methods), then this will be done automatically for you (but warnings might be raised).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/tno.mpc.protocols.secure_comparison/#files",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://mpc.tno.nl/",
    "keywords": "TNO,MPC,multi-party computation,protocols,secure comparison",
    "license": "Apache License, Version 2.0",
    "maintainer": "TNO MPC Lab",
    "maintainer_email": "mpclab@tno.nl",
    "name": "tno.mpc.protocols.secure-comparison",
    "package_url": "https://pypi.org/project/tno.mpc.protocols.secure-comparison/",
    "platform": "any",
    "project_url": "https://pypi.org/project/tno.mpc.protocols.secure-comparison/",
    "project_urls": {
      "Documentation": "https://docs.mpc.tno.nl/protocols/secure_comparison/4.1.2",
      "Download": "https://pypi.org/project/tno.mpc.protocols.secure_comparison/#files",
      "Homepage": "https://mpc.tno.nl/",
      "Source Code": "https://github.com/TNO-MPC/protocols.secure_comparison"
    },
    "release_url": "https://pypi.org/project/tno.mpc.protocols.secure-comparison/4.1.2/",
    "requires_dist": [
      "tno.mpc.communication (~=4.0)",
      "tno.mpc.encryption-schemes.dgk (~=2.0)",
      "tno.mpc.encryption-schemes.paillier (>=2.0.1,~=2.0)",
      "tno.mpc.encryption-schemes.templates (~=3.0)",
      "tno.mpc.encryption-schemes.utils (~=0.10)",
      "typing-extensions (~=4.0) ; python_version < \"3.8\"",
      "tno.mpc.encryption-schemes.dgk[gmpy] ; extra == 'gmpy'",
      "tno.mpc.encryption-schemes.paillier[gmpy] ; extra == 'gmpy'",
      "pytest ; extra == 'tests'",
      "pytest-asyncio ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Implementation of secure comparison protocol as given in https://eprint.iacr.org/2018/1100.pdf",
    "version": "4.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14642784,
  "releases": {
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72f27803b840db6a646810ffe912818717202371d49c20f72afe3278f0d72596",
          "md5": "9cdfc77ef7e59ffd0b561b5d4f2450a7",
          "sha256": "a7a245f9230110d72669d480f312454de422e623f80b49c13417f2360c86f0b7"
        },
        "downloads": -1,
        "filename": "tno.mpc.protocols.secure_comparison-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cdfc77ef7e59ffd0b561b5d4f2450a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14206,
        "upload_time": "2021-04-01T13:57:15",
        "upload_time_iso_8601": "2021-04-01T13:57:15.667898Z",
        "url": "https://files.pythonhosted.org/packages/72/f2/7803b840db6a646810ffe912818717202371d49c20f72afe3278f0d72596/tno.mpc.protocols.secure_comparison-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "102e59eb0c505afcbf6d435f187a37414496927f34266b7c9f1a35b8fcda1041",
          "md5": "ba7b18db48834583a800b090ac8a9e13",
          "sha256": "99dca835e724fda103cc1fc2cf099f319bb982e738fa8e924c1df370995f8cb0"
        },
        "downloads": -1,
        "filename": "tno.mpc.protocols.secure_comparison-4.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba7b18db48834583a800b090ac8a9e13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25952,
        "upload_time": "2022-08-03T14:39:40",
        "upload_time_iso_8601": "2022-08-03T14:39:40.700630Z",
        "url": "https://files.pythonhosted.org/packages/10/2e/59eb0c505afcbf6d435f187a37414496927f34266b7c9f1a35b8fcda1041/tno.mpc.protocols.secure_comparison-4.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "102e59eb0c505afcbf6d435f187a37414496927f34266b7c9f1a35b8fcda1041",
        "md5": "ba7b18db48834583a800b090ac8a9e13",
        "sha256": "99dca835e724fda103cc1fc2cf099f319bb982e738fa8e924c1df370995f8cb0"
      },
      "downloads": -1,
      "filename": "tno.mpc.protocols.secure_comparison-4.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ba7b18db48834583a800b090ac8a9e13",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25952,
      "upload_time": "2022-08-03T14:39:40",
      "upload_time_iso_8601": "2022-08-03T14:39:40.700630Z",
      "url": "https://files.pythonhosted.org/packages/10/2e/59eb0c505afcbf6d435f187a37414496927f34266b7c9f1a35b8fcda1041/tno.mpc.protocols.secure_comparison-4.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}