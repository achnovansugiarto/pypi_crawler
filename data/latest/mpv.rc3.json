{
  "info": {
    "author": "",
    "author_email": "jaseg <mpv@jaseg.de>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: X11 Applications",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Sound/Audio :: Players",
      "Topic :: Multimedia :: Video :: Display"
    ],
    "description": ".. vim: tw=120 sw=4 et\n\npython-mpv\n==========\n\npython-mpv is a ctypes-based python interface to the mpv media player. It gives you more or less full control of all\nfeatures of the player, just as the lua interface does.\n\nInstallation\n------------\n\n.. code:: bash\n\n    pip install mpv\n\n\n...though you can also realistically just copy `mpv.py`_ into your project as it's all nicely contained in one file.\n\nRequirements\n~~~~~~~~~~~~\n\nlibmpv\n......\n``libmpv.so`` either locally (in your current working directory) or somewhere in your system library search path. This\nmodule is somewhat lenient as far as ``libmpv`` versions are concerned but since ``libmpv`` is changing quite frequently\nyou'll only get all the newest features when using an up-to-date version of this module. The unit tests for this module\ndo some basic automatic version compatibility checks. If you discover anything missing here, please open an `issue`_ or\nsubmit a `pull request`_ on github.\n\nOn Windows you can place libmpv anywhere in your ``%PATH%`` (e.g. next to ``python.exe``) or next to this module's\n``mpv.py``.  Before falling back to looking in the mpv module's directory, python-mpv uses the DLL search order built\ninto ctypes, which is different to the one Windows uses internally. Consult `this stackoverflow post\n<https://stackoverflow.com/a/23805306>`__ for details.\n\nPython >= 3.7 (officially)\n..........................\nThe ``main`` branch officially only supports recent python releases (3.5 onwards), but there is the somewhat outdated\nbut functional `py2compat branch`_ providing Python 2 compatibility.\n\n.. _`py2compat branch`: https://github.com/jaseg/python-mpv/tree/py2compat\n.. _`issue`: https://github.com/jaseg/python-mpv/issues\n.. _`pull request`: https://github.com/jaseg/python-mpv/pulls\n\nSupported Platforms\n...................\n\n**Linux**, **Windows** and **OSX** all seem to work mostly fine. For some notes on the installation on Windows see\n`this comment`__. Shared library handling is quite bad on windows, so expect some pain there. On OSX there seems to be\nsome bug int the event logic. See `issue 36`_ and `issue 61`_ for details. Creating a pyQT window and having mpv draw\ninto it seems to be a workaround (about 10loc), but in case you want this fixed please weigh in on the issue tracker\nsince right now there is not many OSX users.\n\n.. __: https://github.com/jaseg/python-mpv/issues/60#issuecomment-352719773\n.. _`issue 61`: https://github.com/jaseg/python-mpv/issues/61\n.. _`issue 36`: https://github.com/jaseg/python-mpv/issues/36\n\nUsage\n-----\n\n.. code:: python\n\n    import mpv\n    player = mpv.MPV(ytdl=True)\n    player.play('https://youtu.be/DOmdB7D-pUU')\n    player.wait_for_playback()\n\npython-mpv mostly exposes mpv's built-in API to python, adding only some porcelain on top. Most \"`input commands <https://mpv.io/manual/master/#list-of-input-commands>`_\" are mapped to methods of the MPV class. Check out these methods and their docstrings in `the source <https://github.com/jaseg/python-mpv/blob/main/mpv.py>`__ for things you can do. Additional controls and status information are exposed through `MPV properties <https://mpv.io/manual/master/#properties>`_. These can be accessed like ``player.metadata``, ``player.fullscreen`` and ``player.loop_playlist``.\n\nThreading\n~~~~~~~~~\n\nThe ``mpv`` module starts one thread for event handling, since MPV sends events that must be processed quickly. The\nevent queue has a fixed maxmimum size and some operations can cause a large number of events to be sent.\n\nIf you want to handle threading yourself, you can pass ``start_event_thread=False`` to the ``MPV`` constructor and\nmanually call the ``MPV`` object's ``_loop`` function. If you have some strong need to not use threads and use some\nexternal event loop (such as asyncio) instead you can do that, too with some work. The API of the backend C ``libmpv``\nhas a function for producing a sort of event file descriptor for a handle. You can use that to produce a file descriptor\nthat can be passed to an event loop to tell it to wake up the python-mpv event handler on every incoming event.\n\nAll API functions are thread-safe. If one is not, please file an issue on github.\n\nAdvanced Usage\n~~~~~~~~~~~~~~\n\nLogging, Properties, Python Key Bindings, Screenshots and youtube-dl\n....................................................................\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    import mpv\n\n    def my_log(loglevel, component, message):\n        print('[{}] {}: {}'.format(loglevel, component, message))\n\n    player = mpv.MPV(log_handler=my_log, ytdl=True, input_default_bindings=True, input_vo_keyboard=True)\n\n    # Property access, these can be changed at runtime\n    @player.property_observer('time-pos')\n    def time_observer(_name, value):\n        # Here, _value is either None if nothing is playing or a float containing\n        # fractional seconds since the beginning of the file.\n        print('Now playing at {:.2f}s'.format(value))\n\n    player.fullscreen = True\n    player.loop_playlist = 'inf'\n    # Option access, in general these require the core to reinitialize\n    player['vo'] = 'gpu'\n\n    @player.on_key_press('q')\n    def my_q_binding():\n        print('THERE IS NO ESCAPE')\n\n    @player.on_key_press('s')\n    def my_s_binding():\n        pillow_img = player.screenshot_raw()\n        pillow_img.save('screenshot.png')\n\n    player.play('https://youtu.be/DLzxrzFCyOs')\n    player.wait_for_playback()\n\n    del player\n\nSkipping silence using libav filters\n....................................\n\nThe following code uses the libav silencedetect filter to skip silence at the beginning of a file. It works by loading\nthe filter, then parsing its output from mpv's log. Thanks to Sean DeNigris on github (#202) for the original code!\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    import sys\n    import mpv\n\n    p = mpv.MPV()\n    p.play(sys.argv[1])\n\n    def skip_silence():\n        p.set_loglevel('debug')\n        p.af = 'lavfi=[silencedetect=n=-20dB:d=1]'\n        p.speed = 100\n        def check(evt):\n            toks = evt['event']['text'].split()\n            if 'silence_end:' in toks:\n                return float(toks[2])\n        p.time_pos = p.wait_for_event('log_message', cond=check)\n        p.speed = 1\n        p.af = ''\n\n    skip_silence()\n    p.wait_for_playback()\n\nVideo overlays\n..............\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    import time\n    from PIL import Image, ImageDraw, ImageFont\n    import mpv\n\n    player = mpv.MPV()\n\n    player.loop = True\n    player.play('test.webm')\n    player.wait_until_playing()\n\n    font = ImageFont.truetype('DejaVuSans.ttf', 40)\n\n    while not player.core_idle:\n\n        time.sleep(0.5)\n        overlay = player.create_image_overlay()\n\n        for pos in range(0, 500, 5):\n            ts = player.time_pos\n            if ts is None:\n                break\n\n            img = Image.new('RGBA', (400, 150),  (255, 255, 255, 0))\n            d = ImageDraw.Draw(img)\n            d.text((10, 10), 'Hello World', font=font, fill=(0, 255, 255, 128))\n            d.text((10, 60), f't={ts:.3f}', font=font, fill=(255, 0, 255, 255))\n\n            overlay.update(img, pos=(2*pos, pos))\n            time.sleep(0.05)\n\n        overlay.remove()\n\n\nPlaylist handling\n.................\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    import mpv\n\n    player = mpv.MPV(ytdl=True, input_default_bindings=True, input_vo_keyboard=True)\n\n    player.playlist_append('https://youtu.be/PHIGke6Yzh8')\n    player.playlist_append('https://youtu.be/Ji9qSuQapFY')\n    player.playlist_append('https://youtu.be/6f78_Tf4Tdk')\n\n    player.playlist_pos = 0\n\n    while True:\n        # To modify the playlist, use player.playlist_{append,clear,move,remove}. player.playlist is read-only\n        print(player.playlist)\n        player.wait_for_playback()\n\nDirectly feeding mpv data from python\n.....................................\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    import mpv\n\n    player = mpv.MPV()\n    @player.python_stream('foo')\n    def reader():\n        with open('test.webm', 'rb') as f:\n            while True:\n                yield f.read(1024*1024)\n\n    player.play('python://foo')\n    player.wait_for_playback()\n\nUsing external subtitles\n........................\n\nThe easiest way to load custom subtitles from a file is to pass the ``--sub-file`` option to the ``loadfile`` call:\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    import mpv\n\n    player = mpv.MPV()\n    player.loadfile('test.webm', sub_file='test.srt')\n    player.wait_for_playback()\n\nNote that you can also pass many other options to ``loadfile``. See the mpv docs for details.\n\nIf you want to add subtitle files or streams at runtime, you can use the ``sub-add`` command. ``sub-add`` can only be\ncalled once the player is done loading the file and starts playing. An easy way to wait for this is to wait for the\n``core-idle`` property.\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    import mpv\n\n    player = mpv.MPV()\n    player.play('test.webm')\n    player.wait_until_playing()\n    player.sub_add('test.srt')\n    player.wait_for_playback()\n\nUsing MPV's built-in GUI\n........................\n\npython-mpv is using mpv via libmpv. libmpv is meant for embedding into other applications and by default disables most\nGUI features such as the OSD or keyboard input. To enable the built-in GUI, use the following options when initializing\nthe MPV instance. See `Issue 102`_ for more details\n\n.. _`issue 102`: https://github.com/jaseg/python-mpv/issues/61\n\n.. code:: python\n\n    # Enable the on-screen controller and keyboard shortcuts\n    player = mpv.MPV(input_default_bindings=True, input_vo_keyboard=True, osc=True)\n\n    # Alternative version using the old \"floating box\" style on-screen controller\n    player = mpv.MPV(player_operation_mode='pseudo-gui',\n                     script_opts='osc-layout=box,osc-seekbarstyle=bar,osc-deadzonesize=0,osc-minmousemove=3',\n                     input_default_bindings=True,\n                     input_vo_keyboard=True,\n                     osc=True)\n\nPyQT embedding\n..............\n\n.. code:: python\n    \n    #!/usr/bin/env python3\n    import mpv\n    import sys\n\n    from PyQt5.QtWidgets import *\n    from PyQt5.QtCore import *\n\n    class Test(QMainWindow):\n        def __init__(self, parent=None):\n            super().__init__(parent)\n            self.container = QWidget(self)\n            self.setCentralWidget(self.container)\n            self.container.setAttribute(Qt.WA_DontCreateNativeAncestors)\n            self.container.setAttribute(Qt.WA_NativeWindow)\n            player = mpv.MPV(wid=str(int(self.container.winId())),\n                    vo='x11', # You may not need this\n                    log_handler=print,\n                    loglevel='debug')\n            player.play('test.webm')\n\n    app = QApplication(sys.argv)\n\n    # This is necessary since PyQT stomps over the locale settings needed by libmpv.\n    # This needs to happen after importing PyQT before creating the first mpv.MPV instance.\n    import locale\n    locale.setlocale(locale.LC_NUMERIC, 'C')\n    win = Test()\n    win.show()\n    sys.exit(app.exec_())\n\nPyGObject embedding\n...................\n\n.. code:: python\n    \n    #!/usr/bin/env python3\n    import gi\n\n    import mpv\n\n    gi.require_version('Gtk', '3.0')\n    from gi.repository import Gtk\n\n\n    class MainClass(Gtk.Window):\n\n        def __init__(self):\n            super(MainClass, self).__init__()\n            self.set_default_size(600, 400)\n            self.connect(\"destroy\", self.on_destroy)\n\n            widget = Gtk.Frame()\n            self.add(widget)\n            self.show_all()\n\n            # Must be created >after< the widget is shown, else property 'window' will be None\n            self.mpv = mpv.MPV(wid=str(widget.get_property(\"window\").get_xid()))\n            self.mpv.play(\"test.webm\")\n\n        def on_destroy(self, widget, data=None):\n            self.mpv.terminate()\n            Gtk.main_quit()\n\n\n    if __name__ == '__main__':\n        # This is necessary since like Qt, Gtk stomps over the locale settings needed by libmpv.\n        # Like with Qt, this needs to happen after importing Gtk but before creating the first mpv.MPV instance.\n        import locale\n        locale.setlocale(locale.LC_NUMERIC, 'C')\n        \n        application = MainClass()\n        Gtk.main()\n\nUsing OpenGL from PyGObject\n...........................\n\nJust like it is possible to render into a GTK widget through X11 windows, it `also is possible to render into a GTK\nwidget using OpenGL <https://gist.github.com/jaseg/657e8ecca3267c0d82ec85d40f423caa>`__ through this python API.\n\nUsing OpenGL from PyQt5/QML\n...........................\n\nRobozman_ has mangaed to `make mpv render into a PyQt5/QML widget using OpenGL\n<https://gitlab.com/robozman/python-mpv-qml-example>`__ through this python API.\n\nUsing mpv inside imgui inside OpenGL via GLFW\n.............................................\n\ndfaker_ has written a demo (`link <https://github.com/dfaker/imgui_glfw_pythonmpv_demo/blob/main/main.py>`__) that uses mpv to render video into an `imgui <https://github.com/ocornut/imgui>`__ UI running on an OpenGL context inside `GLFW <https://www.glfw.org/>`__. Check out their demo to see how to integrate with imgui/OpenGL and how to access properties and manage the lifecycle of an MPV instance.\n\nRunning tests\n-------------\n\nUse pytest to run tests.\n\nCoding Conventions\n------------------\n\nThe general aim is `PEP 8`_, with liberal application of the \"consistency\" section. 120 cells line width. Four spaces.\nNo tabs. Probably don't bother making pure-formatting PRs except if you think it *really* helps readability or it\n*really* irks you if you don't.\n\nLicense\n-------\n\npython-mpv inherits the underlying libmpv's license, which can be either GPLv2 or later (default) or LGPLv2.1 or later.\nFor details, see `the mpv copyright page`_.\n\n.. _`PEP 8`: https://www.python.org/dev/peps/pep-0008/\n.. _`mpv.py`: https://raw.githubusercontent.com/jaseg/python-mpv/main/mpv.py\n.. _cosven: https://github.com/cosven\n.. _Robozman: https://gitlab.com/robozman\n.. _dfaker: https://github.com/dfaker\n.. _`the mpv copyright page`: https://github.com/mpv-player/mpv/blob/master/Copyright\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "mpv,library,video,audio,player,display,multimedia",
    "license": "GPLv2+ or LGPLv2.1+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mpv",
    "package_url": "https://pypi.org/project/mpv/",
    "platform": null,
    "project_url": "https://pypi.org/project/mpv/",
    "project_urls": {
      "homepage": "https://github.com/jaseg/python-mpv"
    },
    "release_url": "https://pypi.org/project/mpv/1.0.3/",
    "requires_dist": [
      "Pillow ; extra == 'screenshot_raw'",
      "xvfbwrapper ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "A python interface to the mpv media player",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17061874,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96edead27053ecf595f03f8c24f5eb1ade16813d9c7b3422bfd6afcef665699b",
          "md5": "48114a00be2dc8898a88b3a253362fae",
          "sha256": "dc3d26e1a9f8afe02345ad4073bc7874031cbe5d34d0e14638b9415dc169332d"
        },
        "downloads": -1,
        "filename": "mpv-0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "48114a00be2dc8898a88b3a253362fae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6171,
        "upload_time": "2015-04-28T15:21:40",
        "upload_time_iso_8601": "2015-04-28T15:21:40.161613Z",
        "url": "https://files.pythonhosted.org/packages/96/ed/ead27053ecf595f03f8c24f5eb1ade16813d9c7b3422bfd6afcef665699b/mpv-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "422052f4a253aaa0e15dc00bdebbb54e06063202e9719ce0cea3c6ea541a89d3",
          "md5": "90e651ea683f4799c33e1b617eeb86c8",
          "sha256": "a48008b7ff0ec3ab55e144a69a4cf690c016d9d47ccc7ad6ac8cc71c57c4f282"
        },
        "downloads": -1,
        "filename": "mpv-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90e651ea683f4799c33e1b617eeb86c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 44001,
        "upload_time": "2023-02-27T09:24:48",
        "upload_time_iso_8601": "2023-02-27T09:24:48.924159Z",
        "url": "https://files.pythonhosted.org/packages/42/20/52f4a253aaa0e15dc00bdebbb54e06063202e9719ce0cea3c6ea541a89d3/mpv-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a1a29d9096731f80c5b1df5e94d5548d2c169291c79fbb625dfa4622fc9f3d7",
          "md5": "e26c9a4d6c01a1a16cf30f3cb50834cd",
          "sha256": "8b0b230c6e11f5d13fba34159812330c89ef39ba33437f1dac38c75a44531a2f"
        },
        "downloads": -1,
        "filename": "mpv-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e26c9a4d6c01a1a16cf30f3cb50834cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 45413,
        "upload_time": "2023-02-27T09:24:51",
        "upload_time_iso_8601": "2023-02-27T09:24:51.448571Z",
        "url": "https://files.pythonhosted.org/packages/9a/1a/29d9096731f80c5b1df5e94d5548d2c169291c79fbb625dfa4622fc9f3d7/mpv-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e460ae846a7bf23f4c5b191c236d8d7ecba39fa90b551216914440fe2f2f9fb2",
          "md5": "67847641fbc736494eeab43daf0a7f5b",
          "sha256": "f8d9ef9d35c2afdb30b1da35217b85e60e25d92aaf7791772326078287172bc2"
        },
        "downloads": -1,
        "filename": "mpv-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67847641fbc736494eeab43daf0a7f5b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 44458,
        "upload_time": "2023-02-27T09:31:11",
        "upload_time_iso_8601": "2023-02-27T09:31:11.168409Z",
        "url": "https://files.pythonhosted.org/packages/e4/60/ae846a7bf23f4c5b191c236d8d7ecba39fa90b551216914440fe2f2f9fb2/mpv-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f85ed09d51625eb1da6977d159322cdd7f854dac74e63b3aa6b232de8c1d25b",
          "md5": "adb655bb74847963472db6d309038b70",
          "sha256": "b1c5eea91557f5d9a58a8ab0b92e8362d3f0e78c524c2eea3cefef2c5c06eb2c"
        },
        "downloads": -1,
        "filename": "mpv-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "adb655bb74847963472db6d309038b70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46073,
        "upload_time": "2023-02-27T09:31:13",
        "upload_time_iso_8601": "2023-02-27T09:31:13.337677Z",
        "url": "https://files.pythonhosted.org/packages/5f/85/ed09d51625eb1da6977d159322cdd7f854dac74e63b3aa6b232de8c1d25b/mpv-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e460ae846a7bf23f4c5b191c236d8d7ecba39fa90b551216914440fe2f2f9fb2",
        "md5": "67847641fbc736494eeab43daf0a7f5b",
        "sha256": "f8d9ef9d35c2afdb30b1da35217b85e60e25d92aaf7791772326078287172bc2"
      },
      "downloads": -1,
      "filename": "mpv-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67847641fbc736494eeab43daf0a7f5b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 44458,
      "upload_time": "2023-02-27T09:31:11",
      "upload_time_iso_8601": "2023-02-27T09:31:11.168409Z",
      "url": "https://files.pythonhosted.org/packages/e4/60/ae846a7bf23f4c5b191c236d8d7ecba39fa90b551216914440fe2f2f9fb2/mpv-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f85ed09d51625eb1da6977d159322cdd7f854dac74e63b3aa6b232de8c1d25b",
        "md5": "adb655bb74847963472db6d309038b70",
        "sha256": "b1c5eea91557f5d9a58a8ab0b92e8362d3f0e78c524c2eea3cefef2c5c06eb2c"
      },
      "downloads": -1,
      "filename": "mpv-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "adb655bb74847963472db6d309038b70",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 46073,
      "upload_time": "2023-02-27T09:31:13",
      "upload_time_iso_8601": "2023-02-27T09:31:13.337677Z",
      "url": "https://files.pythonhosted.org/packages/5f/85/ed09d51625eb1da6977d159322cdd7f854dac74e63b3aa6b232de8c1d25b/mpv-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}