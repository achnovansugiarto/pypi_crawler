{
  "info": {
    "author": "tasooshi",
    "author_email": "tasooshi@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "![version](https://img.shields.io/pypi/v/wordz) ![pyversions](https://img.shields.io/pypi/pyversions/wordz) ![license](https://img.shields.io/pypi/l/wordz) ![status](https://img.shields.io/pypi/status/wordz)\n\n# wordz\n\n> Wordlists builder\n\n## Introduction\n\nThis tool evolved from the helper scripts used for the [brutas](https://github.com/tasooshi/brutas/) project. It is used for generating and managing wordlists for password cracking, content discovery, fuzzing etc.\n\n## Requirements\n\n* GNU/Linux, macOS\n* `hashcat`\n* `hashcat-utils`\n* GNU tools: `cat`, `awk`, `comm`, `sort`, `uniq`\n\n### Recommended\n\n* If `lzop` is detected it will be used by `sort` to compress temporary file, especially useful with large datasets.\n\n## Usage\n\n### Sources\n\nLet's say you have some `tests/data/keywords.txt` like the following:\n\n```\nacapulco\ncerveja\n```\n\nAlso, you know of a few common suffixes (`tests/data/bits.txt`) used in this particular case, namely:\n\n```\n!\n123\n```\n\nWe would use a modest set of Hashcat rules (`tests/data/hashcat.rule`): one that simply passes a keyword, and the other one that makes it upper case. Like these:\n\n```\n:\nu\n```\n\n### Classes\n\nNow it's time to design a class that will build the wordlist for us according to some requirements, e.g.:\n* bits after each keyword\n* bits before each keyword\n* and on both sides of a keyword\n\n```\nfrom wordz import Combinator\n\n\nclass Passwords(Combinator):\n\n    wordlists = (\n        'data/keywords.txt',\n    )\n    rules = (\n        'data/hashcat.rule',\n    )\n\n    def process(self):\n\n        self.merge(\n            self.output('passwords.txt'),\n            (\n                self.right(self.temp('hashcat-data-keywords.txt'), self.base('data/bits.txt')),\n                self.left(self.temp('hashcat-data-keywords.txt'), self.base('data/bits.txt')),\n                self.both(self.temp('hashcat-data-keywords.txt'), self.base('data/bits.txt')),\n            )\n        )\n```\n\nWhat happens in the background is that `wordz` takes all `wordlists` defined on the class level and parses them using `rules`. It is done with the `setup` method which is launched before `process`, and which you can override with your own logic (however, you will probably want to keep `self.wordlists_process()` in there).\n\nThis is how we know the name of the file in the temporary directory: it is composed of the name of the rule (`hashcat`), the name of the parent directory (`data`) and name of the keywords file without extension (`keywords`).\n\nThere are three \"shortcuts\" for directories available in each `Combinator` instance: `base()`, `temp()` and `output()`.\n\n### Building\n\nNow it's time to build our lists:\n\n```\n$ mkdir tmp\n$ wordz -p data/classes.py::Passwords\n```\n\nThe result should now be in `passwords.txt`.\n\n### Advanced usage\n\nIf you want to see how it is used in more advanced cases, have a look into [tests](https://github.com/tasooshi/wordz/tree/main/tests) or the [brutas](https://github.com/tasooshi/brutas/) project.\n\n## Command line\n\nOnce installed, you can call `wordz` from the command line. Here are the arguments you can use:\n\n```\nusage: wordz [-h] -p PATH [-b BASE_DIR] [-t TEMP_DIR] [-o OUTPUT_DIR] [-v] [--min-length MIN_LENGTH] [--cores CORES] [--memory MEMORY] [--bin-hashcat BIN_HASHCAT] [--bin-combinator BIN_COMBINATOR] [--bin-rli2 BIN_RLI2] [-d | -q]\n\noptions:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  Class path (e.g. classes/passwords.py::ExtraPasswords)\n  -b BASE_DIR, --base-dir BASE_DIR\n                        Base directory path (default: .)\n  -t TEMP_DIR, --temp-dir TEMP_DIR\n                        Temporary directory path (default: tmp)\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        Output directory path (default: .)\n  -v, --version         Print version\n  --min-length MIN_LENGTH\n                        Minimal length for a password when merging lists (default: 4)\n  --cores CORES         Number of cores to be used for sorting (default: CPUs-based)\n  --memory MEMORY       Percentage of memory to be used for sorting (default: 80%)\n  --bin-hashcat BIN_HASHCAT\n                        Hashcat binary (default: hashcat)\n  --bin-combinator BIN_COMBINATOR\n                        Hashcat utils `combinator` binary (default: combinator.bin)\n  --bin-rli2 BIN_RLI2   Hashcat utils `rli2` binary (default: rli2.bin)\n  -d, --debug           Debug mode\n  -q, --quiet           Quiet mode\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tasooshi/wordz",
    "keywords": "wordlists,bruteforce,dictionary,generator,hashcat",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wordz",
    "package_url": "https://pypi.org/project/wordz/",
    "platform": null,
    "project_url": "https://pypi.org/project/wordz/",
    "project_urls": {
      "Homepage": "https://github.com/tasooshi/wordz"
    },
    "release_url": "https://pypi.org/project/wordz/0.1.5/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Wordlists builder",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16438391,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "844cbe326ad3b73b81613003e1dc7060de2fde33262b5b3c4e70d1dba3ed76de",
          "md5": "1bf9d09df94fd8e209bc73b1605fbe98",
          "sha256": "576d2644c28e55f62746ee218e4ec86e7272d2ba00b0e5e7e6531ab34d1c35ae"
        },
        "downloads": -1,
        "filename": "wordz-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1bf9d09df94fd8e209bc73b1605fbe98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 6145,
        "upload_time": "2022-07-15T00:55:48",
        "upload_time_iso_8601": "2022-07-15T00:55:48.214790Z",
        "url": "https://files.pythonhosted.org/packages/84/4c/be326ad3b73b81613003e1dc7060de2fde33262b5b3c4e70d1dba3ed76de/wordz-0.1.0.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e1fd7d27ab02bce3262d33d020cabe40a1f2be3de3ccf2494eb89eaefd2a8e0",
          "md5": "ec83b20e205fef6bb6c8eac5d76f9d36",
          "sha256": "1391270d22edeb854c89df15fe7c1ceb4ede223f805c8040c32574afaf244d24"
        },
        "downloads": -1,
        "filename": "wordz-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ec83b20e205fef6bb6c8eac5d76f9d36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9434,
        "upload_time": "2022-07-16T13:12:53",
        "upload_time_iso_8601": "2022-07-16T13:12:53.867948Z",
        "url": "https://files.pythonhosted.org/packages/9e/1f/d7d27ab02bce3262d33d020cabe40a1f2be3de3ccf2494eb89eaefd2a8e0/wordz-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "104cd8270a4608b44c1417798ae95fcc19cc51171ef6a6f739ea044fb49be091",
          "md5": "6a3b4bf53b6927d0a5ada0e211f2d537",
          "sha256": "c0b79250b2fade476181d180f7c2f462f387f055701b308a78bd12258cd357d4"
        },
        "downloads": -1,
        "filename": "wordz-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6a3b4bf53b6927d0a5ada0e211f2d537",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9655,
        "upload_time": "2023-01-12T21:17:13",
        "upload_time_iso_8601": "2023-01-12T21:17:13.899011Z",
        "url": "https://files.pythonhosted.org/packages/10/4c/d8270a4608b44c1417798ae95fcc19cc51171ef6a6f739ea044fb49be091/wordz-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "309bef41918239129bfa90729ed6cbf409dba74d8edeea53670e8b933f4e256a",
          "md5": "5e75a7204d189c2368804352a59cddcd",
          "sha256": "8637b17f2e855d2706eff4e3b8296545fe7e279721370b1a0480f2998f9bc922"
        },
        "downloads": -1,
        "filename": "wordz-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5e75a7204d189c2368804352a59cddcd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 10000,
        "upload_time": "2023-01-13T19:15:39",
        "upload_time_iso_8601": "2023-01-13T19:15:39.112128Z",
        "url": "https://files.pythonhosted.org/packages/30/9b/ef41918239129bfa90729ed6cbf409dba74d8edeea53670e8b933f4e256a/wordz-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66675613f7cb8f357ef6d197f2eb128bd8f424a0ef0637c17ac469651583c8b7",
          "md5": "549e939e13ef0ad431afe84be7473afa",
          "sha256": "ed237ca1e8fa8fab1a4e6e54b6ce81db38424575f3c2f7bb0d522ad2fcf7827f"
        },
        "downloads": -1,
        "filename": "wordz-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "549e939e13ef0ad431afe84be7473afa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9845,
        "upload_time": "2023-01-14T20:30:28",
        "upload_time_iso_8601": "2023-01-14T20:30:28.124061Z",
        "url": "https://files.pythonhosted.org/packages/66/67/5613f7cb8f357ef6d197f2eb128bd8f424a0ef0637c17ac469651583c8b7/wordz-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a623af6365bdd142ae68a3e94339bebae9dd5e4daa654992b9c651ebe3f33b5c",
          "md5": "e08920d86d3dcc70d79941ee42e2dccb",
          "sha256": "eff6f71148e9108261b7b4f0421f639a257f038be9a54198f405e0b9654b30ca"
        },
        "downloads": -1,
        "filename": "wordz-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e08920d86d3dcc70d79941ee42e2dccb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 10080,
        "upload_time": "2023-01-15T22:41:28",
        "upload_time_iso_8601": "2023-01-15T22:41:28.045429Z",
        "url": "https://files.pythonhosted.org/packages/a6/23/af6365bdd142ae68a3e94339bebae9dd5e4daa654992b9c651ebe3f33b5c/wordz-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a623af6365bdd142ae68a3e94339bebae9dd5e4daa654992b9c651ebe3f33b5c",
        "md5": "e08920d86d3dcc70d79941ee42e2dccb",
        "sha256": "eff6f71148e9108261b7b4f0421f639a257f038be9a54198f405e0b9654b30ca"
      },
      "downloads": -1,
      "filename": "wordz-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "e08920d86d3dcc70d79941ee42e2dccb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 10080,
      "upload_time": "2023-01-15T22:41:28",
      "upload_time_iso_8601": "2023-01-15T22:41:28.045429Z",
      "url": "https://files.pythonhosted.org/packages/a6/23/af6365bdd142ae68a3e94339bebae9dd5e4daa654992b9c651ebe3f33b5c/wordz-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}