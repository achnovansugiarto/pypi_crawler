{
  "info": {
    "author": "Marc Brinkmann",
    "author_email": "git@marcbrinkmann.de",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "data\n====\n\n``data`` is a small Python module that allows you to treat input in a singular\nway and leave it up to the caller to supply a byte-string, a unicode object, a\nfile-like or a filename.\n\n.. code-block:: python\n\n    >>> open('helloworld.txt', 'w').write('hello, world from a file')\n\n    >>> from data import Data as I\n    >>> a = I(u'hello, world')\n    >>> b = I(file='helloworld.txt')\n    >>> c = I(open('helloworld.txt'))\n\n    >>> print unicode(a)\n    hello, world\n    >>> print unicode(b)\n    hello, world from a file\n    >>> print unicode(c)\n    hello, world from a file\n\nThis can be made even more convenient using the ``data`` decorator:\n\n.. code-block:: python\n\n    >>> from data.decorators import data\n\n    >>> @data('buf')\n    ... def parse_buffer(buf, magic_mode=False):\n    ...   return 'buf passed in as ' + repr(buf)\n    ...\n\n    >>> parse_buffer('hello')\n    \"buf passed in as Data(data='hello', encoding='utf8')\"\n\n    >>> rv = parse_buffer(open('helloworld.txt'))\n    >>> assert 'file=' in rv\n\n\nFitting in\n----------\n\nAll instances support methods like ``read`` or ``__str__`` that make it easy to\nfit it into existing APIs:\n\n.. code-block:: python\n\n    >>> d = I('some data')\n    >>> d.read(4)\n    u'some'\n    >>> d.read(4)\n    u' dat'\n    >>> d.read(4)\n    u'a'\n    >>> e = I(u'more data')\n    >>> str(e)\n    'more data'\n\nNote how ``read`` returns unicode. Additionally, ``readb`` is available:\n\n.. code-block:: python\n\n    >>> f = I(u'I am \\xdcnicode.')\n    >>> f.readb()\n    'I am \\xc3\\x9cnicode.'\n\nEvery ``data`` object has an encoding attribute which is used for converting\nfrom and to unicode.\n\n.. code-block:: python\n\n    >>> g = I(u'I am \\xdcnicode.', encoding='latin1')\n    >>> g.readb()\n    'I am \\xdcnicode.'\n\nIteration and line reading are also supported:\n\n.. code-block:: python\n\n    >>> h = I('I am\\nof many\\nlines')\n    >>> h.readline()\n    u'I am\\n'\n    >>> h.readlines()\n    [u'of many\\n', u'lines']\n\n    >>> i = I('line one\\nline two\\n')\n    >>> list(iter(i))\n    [u'line one\\n', u'line two\\n']\n\n\nExtras\n------\n\nsave_to\n~~~~~~~\n\nSome useful convenience methods are available:\n\n.. code-block:: python\n\n    >>> j = I('example')\n    >>> j.save_to('example.txt')\n\nThe ``save_to`` method will use the most efficient way possible to save the\ndata to a file (``copyfileobj`` or ``write()``). It can also be passed a\nfile-like object:\n\n.. code-block:: python\n\n    >>> k = I('example2')\n    >>> with open('example2.txt', 'wb') as out:\n    ...     k.save_to(out)\n    ...\n\n\ntemp_saved\n~~~~~~~~~~\n\nIf you need the output inside a secure temporary file, ``temp_saved`` is\navailable:\n\n.. code-block:: python\n\n    >>> l = I('goes into tmp')\n    >>> with l.temp_saved() as tmp:\n    ...     print tmp.name.startswith('/tmp/tmp')\n    ...     print l.read()\n    ...\n    True\n    goes into tmp\n\n``temp_saved`` functions almost identically to ``tempfile.NamedTemporaryFile``,\nwith one difference: There is no ``delete`` argument. The file is removed only\nwhen the context manager exits.\n\n\nWhere it is useful\n------------------\n\n``data`` can be used on both sides of an API, either while passing values in:\n\n.. code-block:: python\n\n    >>> import json\n    >>> from data import Data as I\n\n    >>> m = I('{\"this\": \"json\"}')\n    >>> json.load(m)\n    {u'this': u'json'}\n\nor when getting values passed (see the data decorator example above). If\nnecessary, you can also support APIs that allow users to pass in filenames:\n\n.. code-block:: python\n\n    >>> class Parser(object):\n    ...   @data('input')\n    ...   def parse(self, input, parser_opt=False):\n    ...     return input\n    ...   def parse_file(self, input_file, *args, **kwargs):\n    ...     return self.parse(I(file=input_file), *args, **kwargs)\n    ...\n\n    >>> p = Parser()\n    >>> p.parse_file('/dev/urandom')\n    Data(file='/dev/urandom', encoding='utf8')\n\n\nSee the documentation at http://pythonhosted.org/data for an API reference.\n\n\nPython 2 and 3\n--------------\n\n``data`` works the same on Python 2 and 3 thanks to `six\n<https://pypi.python.org/pypi/six>`_, a few compatibility functions and a\ntestsuite.\n\nPython 3 is supported from 3.3 onwards, Python 2 from 2.6.",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/data/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/mbr/data",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "data",
    "package_url": "https://pypi.org/project/data/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/data/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/mbr/data"
    },
    "release_url": "https://pypi.org/project/data/0.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Work with unicode/non-unicode data from files or strings uniformly.",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1587257,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb32e9f0c3b35c5771c868ca49471333f36f66288bfa3e99de83c4808bed0ddc",
          "md5": "4014d14f153fa8abe37a501524ac7563",
          "sha256": "d74a7ca0df965237425d13fcf1caf0c39d7eef846ce78cb6ee2ea8ecf22416e2"
        },
        "downloads": -1,
        "filename": "data-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4014d14f153fa8abe37a501524ac7563",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1709,
        "upload_time": "2015-04-21T13:07:34",
        "upload_time_iso_8601": "2015-04-21T13:07:34.113828Z",
        "url": "https://files.pythonhosted.org/packages/cb/32/e9f0c3b35c5771c868ca49471333f36f66288bfa3e99de83c4808bed0ddc/data-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.dev1": [],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bee8f451c61bd9350c058c4715e2d9c839e6ca0a0b48a24ec094291ab1d3924",
          "md5": "8286fe2a242ff4dba8a73b6ec0d19639",
          "sha256": "7cfd78ccc63fcbfcc2b3966bc76a8c9b0df174641672537fd0f03dbcdb9caa22"
        },
        "downloads": -1,
        "filename": "data-0.3.tar.gz",
        "has_sig": true,
        "md5_digest": "8286fe2a242ff4dba8a73b6ec0d19639",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7001,
        "upload_time": "2015-04-24T11:42:51",
        "upload_time_iso_8601": "2015-04-24T11:42:51.368927Z",
        "url": "https://files.pythonhosted.org/packages/0b/ee/8f451c61bd9350c058c4715e2d9c839e6ca0a0b48a24ec094291ab1d3924/data-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ede9623be82fac4250fc614741f5b1ead83d339794f94b19ac8665b6ea12ee05",
          "md5": "e8b34bc3806cae346a7c54aad77b4fef",
          "sha256": "2726a65da1af31e2345b6bba81ae4cee87dddf17f7c62f5c63ba7327a8480667"
        },
        "downloads": -1,
        "filename": "data-0.4.tar.gz",
        "has_sig": true,
        "md5_digest": "e8b34bc3806cae346a7c54aad77b4fef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7042,
        "upload_time": "2015-06-10T22:53:59",
        "upload_time_iso_8601": "2015-06-10T22:53:59.635372Z",
        "url": "https://files.pythonhosted.org/packages/ed/e9/623be82fac4250fc614741f5b1ead83d339794f94b19ac8665b6ea12ee05/data-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ede9623be82fac4250fc614741f5b1ead83d339794f94b19ac8665b6ea12ee05",
        "md5": "e8b34bc3806cae346a7c54aad77b4fef",
        "sha256": "2726a65da1af31e2345b6bba81ae4cee87dddf17f7c62f5c63ba7327a8480667"
      },
      "downloads": -1,
      "filename": "data-0.4.tar.gz",
      "has_sig": true,
      "md5_digest": "e8b34bc3806cae346a7c54aad77b4fef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7042,
      "upload_time": "2015-06-10T22:53:59",
      "upload_time_iso_8601": "2015-06-10T22:53:59.635372Z",
      "url": "https://files.pythonhosted.org/packages/ed/e9/623be82fac4250fc614741f5b1ead83d339794f94b19ac8665b6ea12ee05/data-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}