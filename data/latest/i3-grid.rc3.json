{
  "info": {
    "author": "Sai Valla",
    "author_email": "saivdev@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# i3-grid.py\n\ni3-grid is a module to manage floating windows for the\ni3 tiling window manager. The code is split into several classes, each\nisolating the logic respective to its name. The process flow is as follows:\n\n- FloatManager: Manages the user input parsing and function dispatches\n\n- \\*Movements: Contains the functions that are directly\n  called by the user to invoke window actions\n\n- \\*MonitorCalculator: Manages the xrandr display settings\n  to make display agnostic window decisions\n\n- \\*FloatUtils: The meta functions of the manager that\n  directly assist the movements and calculator\n\n- Utils: Additional utilities to abstract debugging,\n  RPC calls, etc.\n\n- \\*Middleware: Manages socket connections for API bindings via\n  library or command line\n\n<sup>\\*Asterisk signifies meta classes that are under the hood.<sup>\n\nWe have utilized type hints and the typings library to make\nthe code easier to understand, as well as autocomplete for\nVSCode, PyCharm, Vim, etc.\n\n## Methods\n\nAs seen in the `__init__.py`, the classes we expose from the i3grid\nmodule are `Documentation, FloatManager, Utils`, and `BASE_CONFIG`.\nThe main classes used in a library will hail from FloatManager. We will discuss\nthe important methods below (the remaining are intuitive or not necessary for\nlibrary usage).\n\nYou will notice that not all methods will allow an id field. This is because\nof the limits of the i3-py library. I will try to patch the library to allow these\nif requested but an override is to focus on a window and then act on it.\n\nAdditional low-level comments are available in the source code. Doc strings\nare also available for all abstracted functions and most internal functions.\nCalling help(<func>) in a REPL will display this information. All commands\ncan also be seen by calling help on the CLI (`python3 -m i3grid -h`)\n\nThe method descriptions are as follows:\n\n        Class\n        - method_name\n                Function Header\n\n                Description\n\n### FloatManager\n\n<sup>\\*Asterisk signifies an abstracted command. Highly recommended for usage<sup>\n\n- run\\*\n\n      def run(self, cmd: str, **kwargs) -> list:\n\n      An abstraction over the raw action commands. Dispatches command, updates i3 state,\n      and cleans globals/grid leaks. The available commands are as seen in the CLI help menu.\n      All kwargs are passed to the specific command function (not needed most of the time).\n\n      Commands:\n            center, float, resize, snap, csize, hide, reset, listen, multi\n\n- all_override\\*\n\n      def all_override(self, commands: list, **kwargs) -> List[tuple]:\n\n      Used to apply functions to multiple windows. The methodology is to focus on the window\n      and apply the user defined action(s). Also applies any flags prior to running action (ex.\n      auto resizing, etc.) Returns the windows in the current workspace. Uses the run function under\n      the hood. The container id is available and can be activated by passing in a kwargs `id`\n      boolean to True. Important kwargs:\n            id {int} - Targets a specific window only (passed to the run function) *Not fully supported yet\n            floating {bool} - Targets the floating windows only (default: false)\n\n- update_config\\*\n\n      def update_config(self, val: dict) -> bool:\n\n      Updates the config value used by i3-grid during the runtime. The BASE_CONFIG class will\n      demonstrate how to utilize this mechanism. This will need to be called whenever you\n      would like to update the configuration. This allows for you to keep multiple copies of\n      BASE_CONFIG and call this function to change configurations on the fly.\n\n- custom_resize\n\n      def custom_resize(self, **kwargs) -> list:\n\n      Resize the current window to custom screen percentage. The percentage is\n      determined by the `DefaultResetPercentage` key in the BASE_CONFIG.\n\n- focus_window\n\n      def focus_window(self, **kwargs) -> list:\n\n      Focuses on the window with given kwargs `id`\n\n- hide_scratchpad\n\n      def hide_scratchpad(self, **kwargs) -> list:\n\n      Hides the scratchpad with given kwargs `id` or current window. If window\n      is not assigned to a scratchpad, it will not hide it.\n\n- make_float\n\n      def make_float(self, **kwargs) -> list:\n\n      Makes the current window float. If already float, do nothing.\n\n- make_resize\n\n      def make_resize(self, **kwargs) -> list:\n\n      Resizes the following window into the fixed grid size (There is a seperate function\n      for custom resizing) as determined by user input of Rows and Columns.\n\n- move_to_center\n\n      def move_to_center(self, **kwargs) -> list:\n\n      Moves the focused window to the center of the current monitor.\n\n- multi_select\n\n      def multi_select(self, \\*\\*kwargs) -> list:\n\n      Allows for free range select across a grid quadrants. Utilizes the\n      `multis` key from BASE_CONFIG to determine the upper and lower bound.\n\n- post_commands\n\n      def post_commands(self) -> None:\n\n      This function is under the hood and you will probably not need it (if you stick\n      to the abstracted methods) but it is important to know. This command syncs the state\n      of the workspace prior to each action to ensure data validity.\n\n- reset_win\n\n      def reset_win(self, **kwargs) -> list:\n\n      Resets the window to default i3 size.\n\n- snap_to_grid\n\n      def snap_to_grid(self, **kwargs) -> list:\n\n      Snaps the focused window to the grid location of choice. The location may\n      be changed via the `SnapLocation` key in BASE_CONFIG. Accepts a `tc`\n      kwargs for custom true center.\n\n- start_server\n\n      def start_server(self, data_mapper: collectionsAbc.Callable) -> None:\n\n      Starts the live socket server for receiving other thread actions. Can be utilized as a\n      data stream for bash or other message queues for daemon like features. Implemented for\n      future updates.\n\n### Utils\n\nA majority of these functions are for the library itself and may be ignored.\n\n- read_config\n\n      @staticmethod\n      def read_config() -> None:\n\n      This is called when FloatManager is instantiated but may be called manually to override\n      current settings.\n\n- i3_custom\n\n      @staticmethod\n      def i3_custom(cmd: str, id: str = None) -> str:\n\n      Constructs a command using the command string. If ID is passed it, it will customize\n      the raw function to apply to the window with the given ID.\n\n- dipatch_bash_command\n\n      @staticmethod\n      def dipatch_bash_command(command_str: str) -> str:\n\n      Dispatch a bash command and receive the output as a string. This opens a\n      bash subprocess. This can be combined with i3_custom to dispatch custom functions.\n\n## CLI Help Menu\n\n      > python3 -m i3grid -h\n      usage: __main__.py [-h] [--cols COLS] [--rows ROWS] [--offset OFFSET [OFFSET ...]] [--perc PERC] [--target TARGET] [--multis MULTIS [MULTIS ...]] [--port PORT] [--all] [--floating] [--noresize] [--nofloat]\n                         <action> [<action> ...]\n\n      Manage your floating windows with ease.\n\n      positional arguments:\n        <action>              Actions are the functions to execute on the current window. Order of operations matters here. For Example: \"python i3-grid.py snap float --target 3\" We can assume that this command is for\n                              a tiled window (as the user passed an option to make the window float). This will try to snap the window to grid position 3 but fails, as it is not floating. The proper order would be:\n                              \"python i3-grid.py float snap --target 3\". A minimum of one action is required to run the script.\n\n      optional arguments:\n        -h, --help            show this help message and exit\n        --cols COLS           Number of col slices in screen grid (default in rc file)\n        --rows ROWS           Number of row slices in screen grid (default in rc file)\n        --offset OFFSET [OFFSET ...]\n                              On the fly offset per window {Array[top, right, bottom, left]} | Ex: --offset 10 0 (Can take upto 4 integers. Less than 4 fills the remainingvalues with 0. This example is the same as:\n                              --offset 10 0 0 0)\n        --perc PERC           Flag for action: 'csize' (Percentage of screen {int}[1-100])\n        --target TARGET       The grid location to snap the window to (default in rc file)\n        --multis MULTIS [MULTIS ...]\n                              The range of numbers to strech the window across. Ex (4x4 grid): '1 2 3 4' or '1 4' (horizontal) or '1 5 9 13'or '1 13' (vertical) or '1 8' (2 horizontal rows)\n        --port PORT           The port number to listen for i3-grid events (Overriding port for server requires overriding for the client also)\n        --all                 Applies the action(s) to all windows windows in current workspace\n        --floating            Applies the action(s) to all floating windows windows in current workspace\n        --noresize            Override auto resize on the fly to be false\n        --nofloat             Override auto float on the fly to be false\n\n      Actions:\n        center                Center the focused window to a float window\n        float                 Toggle the float of a window (overrides config file for otf movements)\n        resize                Resize focused window (if float)\n        snap                  Runs grid placement of window (can be combined with all other actions). Flag args include rows, cols, and target\n        csize                 Resize the window into a custom size of screen (1-100)\n        hide                  Hide the current window to scratchpad (if scratchpad). Can be combined with 'all' flag to clear floating windows in workspace\n        reset                 Resets the focused window into the middle occupying 75ppt (i3 default) screen space\n        listen                Socket Listener (sole action) for event binding in native Python and command line (Listens on port flag or default: 65433)\n        multi                 Stretch a window across a range of numbers (Use flag 'multis')\n\n## Todos\n\n- The CLI is seemingly far more useful as this should be a somewhat minimal library. The GitHub README contains the future features that have been inquired.\n- An important TODO for the library is to allow for deep kwargs on dispatches for more granular control.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/justahuman1/i3-grid",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "i3-grid",
    "package_url": "https://pypi.org/project/i3-grid/",
    "platform": "",
    "project_url": "https://pypi.org/project/i3-grid/",
    "project_urls": {
      "Homepage": "https://github.com/justahuman1/i3-grid"
    },
    "release_url": "https://pypi.org/project/i3-grid/0.2.3b3/",
    "requires_dist": [
      "i3-py"
    ],
    "requires_python": ">=3.6",
    "summary": "A i3wm grid controller for floating window automation.",
    "version": "0.2.3b3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7484004,
  "releases": {
    "0.2.3b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "936bd112aafe6d4b8847f0351eeeb09aecdd430e3b270570585af5006437734d",
          "md5": "dac877d1ce164c1967490f8b4028fda9",
          "sha256": "c33a5af67da9d29dc7971de916fd8bb76c94d7fa631e1faf870ab40c57a1637a"
        },
        "downloads": -1,
        "filename": "i3_grid-0.2.3b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dac877d1ce164c1967490f8b4028fda9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32489,
        "upload_time": "2020-05-24T04:54:03",
        "upload_time_iso_8601": "2020-05-24T04:54:03.390003Z",
        "url": "https://files.pythonhosted.org/packages/93/6b/d112aafe6d4b8847f0351eeeb09aecdd430e3b270570585af5006437734d/i3_grid-0.2.3b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebfad7cfd984d9484ea86b547cd663110497175b7a829a08d22d80b8454997f0",
          "md5": "bbb6078e95e3a059421401f820b4cca9",
          "sha256": "5e0d56e97abd29648419925f4e9a40e6cd19a96bdd721d382e9c476dc34cad56"
        },
        "downloads": -1,
        "filename": "i3-grid-0.2.3b1.tar.gz",
        "has_sig": false,
        "md5_digest": "bbb6078e95e3a059421401f820b4cca9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18590,
        "upload_time": "2020-05-24T04:54:05",
        "upload_time_iso_8601": "2020-05-24T04:54:05.806341Z",
        "url": "https://files.pythonhosted.org/packages/eb/fa/d7cfd984d9484ea86b547cd663110497175b7a829a08d22d80b8454997f0/i3-grid-0.2.3b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a36b6791175cfbb08a715bf15d1a7221ba982668a7849631aa1189ff475d4f75",
          "md5": "b81ebc2b98c22738210e81630f1a4554",
          "sha256": "8026296c65c2131da91c4b87da6ba9a392af14fbea6de8c6686f8e254e368b4d"
        },
        "downloads": -1,
        "filename": "i3_grid-0.2.3b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b81ebc2b98c22738210e81630f1a4554",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34554,
        "upload_time": "2020-06-05T07:37:43",
        "upload_time_iso_8601": "2020-06-05T07:37:43.252131Z",
        "url": "https://files.pythonhosted.org/packages/a3/6b/6791175cfbb08a715bf15d1a7221ba982668a7849631aa1189ff475d4f75/i3_grid-0.2.3b2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac2af38475c92a041093756f693fce47a7ed17ca46acda8f6f3785b66cdf0623",
          "md5": "2d58b731d962ab2a885a7efabce7c65a",
          "sha256": "92960015e54a4530742e632807154e26a9479851d09ab2e945acc1c95aee584d"
        },
        "downloads": -1,
        "filename": "i3-grid-0.2.3b2.tar.gz",
        "has_sig": false,
        "md5_digest": "2d58b731d962ab2a885a7efabce7c65a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20002,
        "upload_time": "2020-06-05T07:37:44",
        "upload_time_iso_8601": "2020-06-05T07:37:44.571046Z",
        "url": "https://files.pythonhosted.org/packages/ac/2a/f38475c92a041093756f693fce47a7ed17ca46acda8f6f3785b66cdf0623/i3-grid-0.2.3b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d47d984caffb99487c1763913e83bd86cedd2e6754a4048260d4b8bd91e5f6f3",
          "md5": "14c4fb766ce226d04d7185144585bb7c",
          "sha256": "6df84f65f430ebe9a8db22a0a5a0a92d8d7b5fe044d2b562a5115ac58a6520ee"
        },
        "downloads": -1,
        "filename": "i3_grid-0.2.3b3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14c4fb766ce226d04d7185144585bb7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34612,
        "upload_time": "2020-06-15T21:19:50",
        "upload_time_iso_8601": "2020-06-15T21:19:50.302706Z",
        "url": "https://files.pythonhosted.org/packages/d4/7d/984caffb99487c1763913e83bd86cedd2e6754a4048260d4b8bd91e5f6f3/i3_grid-0.2.3b3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4929f96b8a9ede685cd686e0fbd7f896479cbc97ade399c7afe570cd5bdf8a1c",
          "md5": "7fb45dbe8ee8ab495ff18c5158faec24",
          "sha256": "0fd5cd00ac7e62ee32a6d32add2852c5c91f3e1b0d114fee82332979b78a1b01"
        },
        "downloads": -1,
        "filename": "i3-grid-0.2.3b3.tar.gz",
        "has_sig": false,
        "md5_digest": "7fb45dbe8ee8ab495ff18c5158faec24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20024,
        "upload_time": "2020-06-15T21:19:51",
        "upload_time_iso_8601": "2020-06-15T21:19:51.774783Z",
        "url": "https://files.pythonhosted.org/packages/49/29/f96b8a9ede685cd686e0fbd7f896479cbc97ade399c7afe570cd5bdf8a1c/i3-grid-0.2.3b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d47d984caffb99487c1763913e83bd86cedd2e6754a4048260d4b8bd91e5f6f3",
        "md5": "14c4fb766ce226d04d7185144585bb7c",
        "sha256": "6df84f65f430ebe9a8db22a0a5a0a92d8d7b5fe044d2b562a5115ac58a6520ee"
      },
      "downloads": -1,
      "filename": "i3_grid-0.2.3b3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14c4fb766ce226d04d7185144585bb7c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 34612,
      "upload_time": "2020-06-15T21:19:50",
      "upload_time_iso_8601": "2020-06-15T21:19:50.302706Z",
      "url": "https://files.pythonhosted.org/packages/d4/7d/984caffb99487c1763913e83bd86cedd2e6754a4048260d4b8bd91e5f6f3/i3_grid-0.2.3b3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4929f96b8a9ede685cd686e0fbd7f896479cbc97ade399c7afe570cd5bdf8a1c",
        "md5": "7fb45dbe8ee8ab495ff18c5158faec24",
        "sha256": "0fd5cd00ac7e62ee32a6d32add2852c5c91f3e1b0d114fee82332979b78a1b01"
      },
      "downloads": -1,
      "filename": "i3-grid-0.2.3b3.tar.gz",
      "has_sig": false,
      "md5_digest": "7fb45dbe8ee8ab495ff18c5158faec24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20024,
      "upload_time": "2020-06-15T21:19:51",
      "upload_time_iso_8601": "2020-06-15T21:19:51.774783Z",
      "url": "https://files.pythonhosted.org/packages/49/29/f96b8a9ede685cd686e0fbd7f896479cbc97ade399c7afe570cd5bdf8a1c/i3-grid-0.2.3b3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}