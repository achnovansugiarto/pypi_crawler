{
  "info": {
    "author": "Zach Wener-Fligner",
    "author_email": "zbwener@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Topic :: Utilities"
    ],
    "description": "**NOTE: I (@zachwe) didn't create this project and deserve none of the credit for\nit. All of the credit for this package should go to Jungil Kong, Jaehyeon\nKim, Jaekyoung Bae. Many thanks to them for creating such an awesome vocoder.\nAll I did was package it to make it easier to use.**\n\n# HiFi-GAN: Generative Adversarial Networks for Efficient and High Fidelity Speech Synthesis\n\n### Jungil Kong, Jaehyeon Kim, Jaekyoung Bae\n\nIn our [paper](https://arxiv.org/abs/2010.05646), \nwe proposed HiFi-GAN: a GAN-based model capable of generating high fidelity speech efficiently.<br/>\nWe provide our implementation and pretrained models as open source in this repository.\n\n**Abstract :**\nSeveral recent work on speech synthesis have employed generative adversarial networks (GANs) to produce raw waveforms. \nAlthough such methods improve the sampling efficiency and memory usage, \ntheir sample quality has not yet reached that of autoregressive and flow-based generative models. \nIn this work, we propose HiFi-GAN, which achieves both efficient and high-fidelity speech synthesis. \nAs speech audio consists of sinusoidal signals with various periods, \nwe demonstrate that modeling periodic patterns of an audio is crucial for enhancing sample quality. \nA subjective human evaluation (mean opinion score, MOS) of a single speaker dataset indicates that our proposed method \ndemonstrates similarity to human quality while generating 22.05 kHz high-fidelity audio 167.9 times faster than \nreal-time on a single V100 GPU. We further show the generality of HiFi-GAN to the mel-spectrogram inversion of unseen \nspeakers and end-to-end speech synthesis. Finally, a small footprint version of HiFi-GAN generates samples 13.4 times \nfaster than real-time on CPU with comparable quality to an autoregressive counterpart.\n\nVisit our [demo website](https://jik876.github.io/hifi-gan-demo/) for audio samples.\n\n\n## Pre-requisites\n1. Python >= 3.6\n2. Clone this repository.\n3. Install python requirements. Please refer [requirements.txt](requirements.txt)\n4. Download and extract the [LJ Speech dataset](https://keithito.com/LJ-Speech-Dataset/).\nAnd move all wav files to `LJSpeech-1.1/wavs`\n\n\n## Training\n```\npython train.py --config config_v1.json\n```\nTo train V2 or V3 Generator, replace `config_v1.json` with `config_v2.json` or `config_v3.json`.<br>\nCheckpoints and copy of the configuration file are saved in `cp_hifigan` directory by default.<br>\nYou can change the path by adding `--checkpoint_path` option.\n\nValidation loss during training with V1 generator.<br>\n![validation loss](./validation_loss.png)\n\n## Pretrained Model\nYou can also use pretrained models we provide.<br/>\n[Download pretrained models](https://drive.google.com/drive/folders/1-eEYTB5Av9jNql0WGBlRoi-WH2J7bp5Y?usp=sharing)<br/> \nDetails of each folder are as in follows:\n\n|Folder Name|Generator|Dataset|Fine-Tuned|\n|------|---|---|---|\n|LJ_V1|V1|LJSpeech|No|\n|LJ_V2|V2|LJSpeech|No|\n|LJ_V3|V3|LJSpeech|No|\n|LJ_FT_T2_V1|V1|LJSpeech|Yes ([Tacotron2](https://github.com/NVIDIA/tacotron2))|\n|LJ_FT_T2_V2|V2|LJSpeech|Yes ([Tacotron2](https://github.com/NVIDIA/tacotron2))|\n|LJ_FT_T2_V3|V3|LJSpeech|Yes ([Tacotron2](https://github.com/NVIDIA/tacotron2))|\n|VCTK_V1|V1|VCTK|No|\n|VCTK_V2|V2|VCTK|No|\n|VCTK_V3|V3|VCTK|No|\n|UNIVERSAL_V1|V1|Universal|No|\n\nWe provide the universal model with discriminator weights that can be used as a base for transfer learning to other datasets.\n\n## Fine-Tuning\n1. Generate mel-spectrograms in numpy format using [Tacotron2](https://github.com/NVIDIA/tacotron2) with teacher-forcing.<br/>\nThe file name of the generated mel-spectrogram should match the audio file and the extension should be `.npy`.<br/>\nExample:\n    ```\n    Audio File : LJ001-0001.wav\n    Mel-Spectrogram File : LJ001-0001.npy\n    ```\n2. Create `ft_dataset` folder and copy the generated mel-spectrogram files into it.<br/>\n3. Run the following command.\n    ```\n    python train.py --fine_tuning True --config config_v1.json\n    ```\n    For other command line options, please refer to the training section.\n\n\n## Inference from wav file\n1. Make `test_files` directory and copy wav files into the directory.\n2. Run the following command.\n    ```\n    python inference.py --checkpoint_file [generator checkpoint file path]\n    ```\nGenerated wav files are saved in `generated_files` by default.<br>\nYou can change the path by adding `--output_dir` option.\n\n\n## Inference for end-to-end speech synthesis\n1. Make `test_mel_files` directory and copy generated mel-spectrogram files into the directory.<br>\nYou can generate mel-spectrograms using [Tacotron2](https://github.com/NVIDIA/tacotron2), \n[Glow-TTS](https://github.com/jaywalnut310/glow-tts) and so forth.\n2. Run the following command.\n    ```\n    python inference_e2e.py --checkpoint_file [generator checkpoint file path]\n    ```\nGenerated wav files are saved in `generated_files_from_mel` by default.<br>\nYou can change the path by adding `--output_dir` option.\n\n\n## Acknowledgements\nWe referred to [WaveGlow](https://github.com/NVIDIA/waveglow), [MelGAN](https://github.com/descriptinc/melgan-neurips) \nand [Tacotron2](https://github.com/NVIDIA/tacotron2) to implement this.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zachwe/hifi_gan",
    "keywords": "speech synthesis machine learning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hifi-gan",
    "package_url": "https://pypi.org/project/hifi-gan/",
    "platform": "",
    "project_url": "https://pypi.org/project/hifi-gan/",
    "project_urls": {
      "Homepage": "https://github.com/zachwe/hifi_gan"
    },
    "release_url": "https://pypi.org/project/hifi-gan/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Package up hifi-gan",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10799274,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a6f90a0a5c95ad21f3c4f0959792d39358705073cfd8b0fa13762b9a548527f",
          "md5": "f478db21314b1477c8ffad929687ec9d",
          "sha256": "b5549b64c9f762e67f4aa295ba3fb7b876f12bc96f91a81f79174ffac3646eaf"
        },
        "downloads": -1,
        "filename": "hifi_gan-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f478db21314b1477c8ffad929687ec9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14057,
        "upload_time": "2021-02-04T00:05:40",
        "upload_time_iso_8601": "2021-02-04T00:05:40.974434Z",
        "url": "https://files.pythonhosted.org/packages/7a/6f/90a0a5c95ad21f3c4f0959792d39358705073cfd8b0fa13762b9a548527f/hifi_gan-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f39f1ff10e66c0cbb945402e047db5f647604fe96e1d9d2a819637edd2ea3b6",
          "md5": "b03db4618c9bc327c3070367d7955bd0",
          "sha256": "7e7c682bd6e1d4987b71e58f80b243b6b30b2f2c29c5eef18fbd5f058ce38c8a"
        },
        "downloads": -1,
        "filename": "hifi_gan-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b03db4618c9bc327c3070367d7955bd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13720,
        "upload_time": "2021-07-01T18:23:49",
        "upload_time_iso_8601": "2021-07-01T18:23:49.836822Z",
        "url": "https://files.pythonhosted.org/packages/6f/39/f1ff10e66c0cbb945402e047db5f647604fe96e1d9d2a819637edd2ea3b6/hifi_gan-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f39f1ff10e66c0cbb945402e047db5f647604fe96e1d9d2a819637edd2ea3b6",
        "md5": "b03db4618c9bc327c3070367d7955bd0",
        "sha256": "7e7c682bd6e1d4987b71e58f80b243b6b30b2f2c29c5eef18fbd5f058ce38c8a"
      },
      "downloads": -1,
      "filename": "hifi_gan-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b03db4618c9bc327c3070367d7955bd0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13720,
      "upload_time": "2021-07-01T18:23:49",
      "upload_time_iso_8601": "2021-07-01T18:23:49.836822Z",
      "url": "https://files.pythonhosted.org/packages/6f/39/f1ff10e66c0cbb945402e047db5f647604fe96e1d9d2a819637edd2ea3b6/hifi_gan-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}