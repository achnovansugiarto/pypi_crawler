{
  "info": {
    "author": "Allisson Azevedo, Sigfrido PÃ©rez",
    "author_email": "allisson@gmail.com, sigfrido.pmp@sigfrido.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-rest-framework-role-filters\n==================================\n\n.. image:: https://github.com/allisson/django-rest-framework-role-filters/workflows/tests/badge.svg\n    :target: https://github.com/allisson/django-rest-framework-role-filters/actions\n\n.. image:: https://img.shields.io/pypi/v/djangorestframework-security-filters.svg\n        :target: https://pypi.python.org/pypi/djangorestframework-security-filters\n\n.. image:: https://img.shields.io/github/license/allisson/django-rest-framework-role-filters.svg\n        :target: https://pypi.python.org/pypi/djangorestframework-security-filters\n\n.. image:: https://img.shields.io/pypi/pyversions/djangorestframework-security-filters.svg\n        :target: https://pypi.python.org/pypi/djangorestframework-security-filters\n\nHow to install\n--------------\n\n.. code:: shell\n\n    pip install pip install djangorestframework-security-filters\n\nWhy i wrote this project?\n-------------------------\n\nI want work easily with roles without multiple ifs in code\n\nHow to use\n----------\n\nCreate role_filters.py with your roles definitions\n\n.. code:: python\n    \n    from rest_framework_role_filters.role_filters import RoleFilter\n\n    from .serializers import PostSerializerForUser\n\n\n    class AdminRoleFilter(RoleFilter):\n        role_id = 'admin'\n\n\n    class UserRoleFilter(RoleFilter):\n        role_id = 'user'\n\n        def get_allowed_actions(self, request, view, obj=None):\n            # This example returns same list both for \"global permissions\" check,\n            # and for \"object\" permissions, but different list may be returned\n            # if `obj` argument is not None, and this list will be used to check\n            # if action is allowed during call to `ViewSet.check_object_permissions`\n            return ['create', 'list', 'retrieve', 'update', 'partial_update']\n\n        def get_queryset(self, request, view, queryset):\n            queryset = queryset.filter(user=request.user)\n            return queryset\n\n        def get_serializer_class(self, request, view):\n            return PostSerializerForUser\n\n        def get_serializer(self, request, view, serializer_class, *args, **kwargs):\n            fields = (\n                'body',\n                'created_at',\n                'id',\n                'serializer_name',\n                'title',\n                'updated_at',\n                'user',\n            )\n            return serializer_class(*args, fields=fields, **kwargs)\n\nCreate viewset and override get_role_id method\n\n.. code:: python\n\n    from rest_framework_role_filters.viewsets import RoleFilterModelViewSet\n\n    from .models import Post\n    from .role_filters import AdminRoleFilter, UserRoleFilter\n    from .serializers import PostSerializer\n\n\n    class PostViewSet(RoleFilterModelViewSet):\n        queryset = Post.objects.all()\n        serializer_class = PostSerializer\n        role_filter_classes = [AdminRoleFilter, UserRoleFilter]\n\n        def perform_create(self, serializer):\n            serializer.save(user=self.request.user)\n\nIf role_id is 'admin':\n\n* All actions are allowed\n* The default queryset is returned - :code:`Post.objects.all()`\n* The default :code:`serializer_class` is used - :code:`PostSerializer`\n* The default viewset :code:`get_serializer` method is used\n\nIf role_id is 'user':\n\n* Only actions 'create', 'list', 'retrieve', 'update', 'partial_update' are allowed\n* The queryset is filtered by user\n* The :code:`serializer_class=PostSerializerForUser` is used\n* The serializer initializing with :code:`fields` kwargs  (e.g. for modified serializer as described in\n  `DRF: Dynamically modifying fields <https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields>`_)\n\nCheck `testapp example <https://github.com/allisson/django-rest-framework-role-filters/tree/master/testproject/testapp>`_ code implementation.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/rivercom/django-rest-framework-security-filters",
    "keywords": "djangorestframework rest security permission",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorestframework-security-filters",
    "package_url": "https://pypi.org/project/djangorestframework-security-filters/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangorestframework-security-filters/",
    "project_urls": {
      "Homepage": "https://gitlab.com/rivercom/django-rest-framework-security-filters"
    },
    "release_url": "https://pypi.org/project/djangorestframework-security-filters/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django-rest-framework-security-filters",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10053840,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e81b8944a23cd99afca63fa4a830872471f81ea7b943bb0f06333976ac79fb08",
          "md5": "e34e621d99a020d7251b20a2e5503c8d",
          "sha256": "55946a081814f25315832b5e68150d08e160a24db2058dd226ca3adbfdb25458"
        },
        "downloads": -1,
        "filename": "djangorestframework-security-filters-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e34e621d99a020d7251b20a2e5503c8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6841,
        "upload_time": "2021-04-13T18:54:20",
        "upload_time_iso_8601": "2021-04-13T18:54:20.757842Z",
        "url": "https://files.pythonhosted.org/packages/e8/1b/8944a23cd99afca63fa4a830872471f81ea7b943bb0f06333976ac79fb08/djangorestframework-security-filters-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e81b8944a23cd99afca63fa4a830872471f81ea7b943bb0f06333976ac79fb08",
        "md5": "e34e621d99a020d7251b20a2e5503c8d",
        "sha256": "55946a081814f25315832b5e68150d08e160a24db2058dd226ca3adbfdb25458"
      },
      "downloads": -1,
      "filename": "djangorestframework-security-filters-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e34e621d99a020d7251b20a2e5503c8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6841,
      "upload_time": "2021-04-13T18:54:20",
      "upload_time_iso_8601": "2021-04-13T18:54:20.757842Z",
      "url": "https://files.pythonhosted.org/packages/e8/1b/8944a23cd99afca63fa4a830872471f81ea7b943bb0f06333976ac79fb08/djangorestframework-security-filters-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}