{
  "info": {
    "author": "ChaoqiYin",
    "author_email": "305111632@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# easy-excel  \n##### version: 2.0+\n\n**excel操作简化，包含导入和导出功能。省去平时频繁的重复操作，同时支持xls和xlsx**  \n\n需要条件\n\n- xlrd>=1.2\n\n- xlwt>=1.3\n\n- openpyxl>=3.0.5\n\n安装方式：  \n需要python3.6及以上\n\n1. 下载文件内的easy_excel_util包使用\n2. pip install easy-excel-util\n\n+ 最简单的使用方法\n\n    + 导出\n\n    ```python\n    from easy_excel_util import Builder, ExportField\n      \n    data = [{'id': 1, 'name': '姓名1', 'age': 18}, {'id': 2, 'name': '姓名2', 'age': 20}]\n    \n    Builder.build_export().sheet(\n        index=0, data=data, parse_map=dict(\n            id=ExportField(index=0, col_name='id', width=5), \n            name=ExportField(index=1, col_name='姓名', width=15), \n            age=ExportField(index=2, col_name='年龄', width=15)\n        )\n    ).do_export('/User/ChaoqiYin/excel1.xls')\n    ```\n\n    + 导入\n\n    ```python\n    from easy_excel_util import Builder, ImportField\n    \n    r = Builder.build_import('/User/ChaoqiYin/excel1.xls').do_import(dict(\n        id=ImportField(index=0), name=ImportField(index=1), age=ImportField(index=2)\n    ))\n    for field in r.result:\n        print(field.id, field.name, field.age)\n    ```\n\n+ 全局设置  \n    Builder类能进行一些导入或导出需要使用的全局统一配置，提供了以下几种类方法进行全局的配置：  \n    \n    * add_export_style(style, title_style=None, xlsx=False)：添加一个全局的导出样式，根据导出excel类型不同使用不同的style, xls和xlsx的样式可以同时存在    \n        ```python\n        # xlsx类型的excel样式, 样式必须是一个dict，key是openpyxl库中cell的样式对应的属性名，value是对应的属性值\n        from openpyxl.styles import Font\n        \n        Builder.add_export_style(style={\n            'font': Font(name='Arial', size=14),\n        }, title_style={\n            'font': Font(name='Arial', size=18, bold=True),\n        }, xlsx=True)\n        \n        # xls类型的excel样式，样式是一个xlwt库的XFStyle实例\n        import xlwt\n        \n        DEFAULT_STYLE = xlwt.XFStyle()\n        al = xlwt.Alignment()\n        al.wrap = 1  # 自动换行\n        al.horz = 0x02  # 设置水平居中\n        al.vert = 0x01  # 设置垂直居中\n        DEFAULT_STYLE.alignment = al\n        font = xlwt.Font()  # 为样式创建字体\n        # 字体大小，14为字号，20为衡量单位\n        font.name = 'Arial'\n        font.height = 10 * 20\n        DEFAULT_STYLE.font = font\n        \n        Builder.add_export_style(style=DEFAULT_STYLE)\n        ```\n    * add_export_converter(data_type_class, func)：添加一个全局的导出数据转换方法，data_type_class是需要待转换的python数据类型，根据data_type_class自动匹配数据进行转换  \n        ```python\n        Builder.add_export_converter(type(float), func=lambda float_value: float_value + 1)  # func接收一个value参数，返回转换后的值\n        ```\n    * add_import_converter(converter_key, func)：添加一个全局的导入数据转换方法，converter_key是excel中的数据格式对应key，根据数据格式自动匹配数据进行转换  \n        ```python\n        from easy_excel_util import EMPTY, TEXT, NUMBER, DATE, BOOLEAN, ERROR, BLANK\n        \n        Builder.add_import_converter(NUMBER, func=lambda number_value: number_value + 1)  # func接收一个value参数，返回转换后的值\n    ```\n    &nbsp;\n    \n+ 导出的其他设置  \n    * 导出xlsx类型的excel:   \n        ```python\n        # 默认导出xls格式\n        Builder.build_export(xlsx=True)...\n        ```\n    * build_export()的sheet方法支持多种配置参数:  \n        ```python\n        def sheet(index, data, parse_map, sheet_name=None, height=40, before=None, after=None,\n              style=None, title_style=None, row_del_class=None, max_workers=None):\n            '''\n            sheet的导出设置\n            :param index: sheet索引, 从0开始\n            :param parse_map: 解析的dict, key是data中要匹配的key值，value是ExportField类的实例\n            :param data: 用list装载导出的数据, 数据可以是字典，也可以是一个对象，只要对象有对应的属性\n            :param sheet_name: 表名，不传入时sheet的命名方式为sheet{索引}\n            :param height: 行高，默认40，单位为磅\n            :param before: 导入第一行前的操作，需要一个func(work_sheet, sheet_no, parse_map, row_del_class)\n                           参数分别为内部sheet类的实例、sheet索引、parse_map、行处理类，需要返回一个后续操作进行的起始行索引\n            :param after: 导入最后一行后的操作，需要一个func(work_sheet, sheet_no, row_num, parse_map, row_del_class)\n                          参数分别为内部sheet类的实例、sheet索引、当前行索引、parse_map、行处理类\n            :param style: 该sheet单元格样式，不传则使用全局样式, 可以是一个函数，func(row_num, data, value)\n                          参数分别为当前行数，源数据，转换后数据，需要返回一个样式\n            :param title_style: 该sheet标题样式，不传则使用全局样式，标题是第一行\n            :param row_del_class: 行处理的类，建议设为easy_excel_util.export_pack.export_row.ExportRow的子类\n            :param max_workers: 异步线程数，不传入时使用同步模式导出\n            :return:\n            '''\n            ...\n            return ...\n        ```\n    * ExportField支持多种属性设置:\n        ```python\n        ExportField(index, datetime_format=None, col_name=None, width=20, converter=None, style=None, merge_same=False)\n        \n        :param index: 导出到sheet的列索引, 从0开始\n        :param datetime_format: 如果数据是datetime或者time，根据format转换为对应格式的str\n        :param col_name: 第一行的title列名，如果所有字段都不传入col_name，则没有title行\n        :param width: 列宽，默认20，单位是字符\n        :param converter: 该列的数据转换方法，需要一个func，func接收一个value参数，返回转换后的值，会覆盖全局导出转换\n        :param style: 列样式，支持func，参数和返回值同sheet方法中的style，会覆盖sheet中设置的style\n        :param merge_same: 该列数据相同的单元格是否合并，默认不合并\n        ```\n    * 支持一个excel导出多组数据到不同的sheet:\n        ```python\n        data1 = [{'id': 1, 'name': '姓名1', 'age': 18}, {'id': 2, 'name': '姓名2', 'age': 20}]\n        data2 = [{'id': 11, 'name': '姓名11', 'age': 18}, {'id': 12, 'name': '姓名12', 'age': 20}]\n        \n        Builder.build_export().sheet(\n            index=0, data=data1, parse_map=dict(\n                id=ExportField(index=0, col_name='id', width=5), \n                name=ExportField(index=1, col_name='姓名', width=15), \n                age=ExportField(index=2, col_name='年龄', width=15)\n            )\n        ).sheet(\n            index=1, data=data2, parse_map=dict(\n                id=ExportField(index=0, col_name='id', width=5), \n                name=ExportField(index=1, col_name='姓名', width=15), \n                age=ExportField(index=2, col_name='年龄', width=15)\n            )\n        ).do_export('/User/ChaoqiYin/excel1.xls')\n        ```\n\n&nbsp;\n+ 导入的其他设置\n    * 支持导入文件路径或file对象，同时兼容xls和xlsx:\n        ```python\n        # 文件路径\n        Builder.build_import('/User/ChaoqiYin/excel1.xls')...\n        \n        # file对象, request中的file对象也可以\n        from flask import request\n        \n        f = request.files['file']\n        Builder.build_import(f)...\n        ```\n    * 针对单个excel添加数据转换方法:\n        ```python\n        # 同Builder.add_import_converter, 会覆盖全局设置\n        Builder.build_import().add_converter(converter_key, func)...\n        ```\n    * do_import方法支持多种配置参数:\n        ```python\n        def do_import(self, parse_map, error_message_prefix='第{row_num}行', sheet_no=0, start_row_num=0, end_row_num=None,\n                      row_del_class=None, row_validate_func=None, max_workers=None, title_row=None):\n            '''\n            导入启动\n            :param parse_map: 解析的dict, key是解析excel后result内data中的属性值，value是ImportField类的实例\n            :param error_message_prefix: 报错提示的前缀文字, 默认是'第{row_num}'\n            :param sheet_no: 解析的表格位置索引，从0开始\n            :param start_row_num: 从第几行开始解析，默认0\n            :param end_row_num: 到第几行结束，默认是到最后一行数据\n            :param row_del_class: 默认的行处理类, 建议是easy_excel_util.import_pack.import_row.ImportRow的子类\n            :param row_validate_func: 行验证方法，接收4个参数：（行索引，行原始数据，行转换后的数据，parse_map），返回None或一个list，里面是该行的错误消息，会自动拼接上error_message_prefix\n            :param max_workers: 异步线程数，不传入时使用同步模式导入\n            :param title_row: 字段col_name自动匹配的标题行索引，传入一个行索引，会根据parse_map中field的col_name去匹配该行的单元格，匹配成功时将index覆盖为对应的单元格index，为None时不匹配\n            :return: 返回一个结果对象，有success、result、error_message_list三个属性。success表示导入转换过程中是否有不匹配格式等错误，\n                      result是导入转换成功的结果列表，error_message_list是转换有错误时的提示信息列表\n            '''\n            ...\n            return ...\n        ```\n    * ImportField支持多种属性设置:\n        ```python\n        ImportField(index, datetime_format=None, col_name=None, converter=None, required_message=None)\n        \n        :param index: 解析列对应位置，从0开始\n        :param datetime_format: excel单元格字符串转换成datetime的格式模板，不满足则计入error_message_list，自动拼接上error_message_prefix\n        :param col_name: 列名, 用于报错提示或自动匹配标题行对应的列，匹配需要配合do_import的title_row使用\n        :param converter: 该列的数据转换方法，需要一个func，func接收一个单元格value参数，返回转换后的值，会覆盖全局导入转换\n        :param required_message: 是否验证非空必填，该列单元格为空时的校验报错信息，计入error_message_list，自动拼接上error_message_prefix\n        ```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ChaoqiYin/easy-excel.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easy-excel-util",
    "package_url": "https://pypi.org/project/easy-excel-util/",
    "platform": "",
    "project_url": "https://pypi.org/project/easy-excel-util/",
    "project_urls": {
      "Homepage": "https://github.com/ChaoqiYin/easy-excel.git"
    },
    "release_url": "https://pypi.org/project/easy-excel-util/2.1.1/",
    "requires_dist": [
      "xlrd (>=1.2)",
      "xlwt (>=1.3)",
      "openpyxl (>=3.0.5)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "a package to easy import or export excel | excel操作简化，包含导入和导出功能",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11744260,
  "releases": {
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dddcddaf88ed30d926d6df6373627b855dfa112df8f383672c9cb60c093c5958",
          "md5": "64a24b50719150727cc90fc060e6a46d",
          "sha256": "0d51867c2c502615ea426f8b7bf0dd3f2c2f6c8b28d6c05c200e773f4bdbed65"
        },
        "downloads": -1,
        "filename": "easy_excel_util-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64a24b50719150727cc90fc060e6a46d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 34397,
        "upload_time": "2020-11-14T05:30:07",
        "upload_time_iso_8601": "2020-11-14T05:30:07.636540Z",
        "url": "https://files.pythonhosted.org/packages/dd/dc/ddaf88ed30d926d6df6373627b855dfa112df8f383672c9cb60c093c5958/easy_excel_util-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6ff456eb9647f4140ee4e2efb835fa19812dd6bb001c8e26e4564efc7b05c91",
          "md5": "1c06eb89510b638905a9e29a143f1439",
          "sha256": "e2742dd63b72876a52b66b20c8895a0b4ae028c8fe7dc94f556ecbe1b4f89da0"
        },
        "downloads": -1,
        "filename": "easy_excel_util-2.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c06eb89510b638905a9e29a143f1439",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 34618,
        "upload_time": "2020-11-14T05:36:20",
        "upload_time_iso_8601": "2020-11-14T05:36:20.239575Z",
        "url": "https://files.pythonhosted.org/packages/a6/ff/456eb9647f4140ee4e2efb835fa19812dd6bb001c8e26e4564efc7b05c91/easy_excel_util-2.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "827bc40425b01cffcc82b0b3a21d404d3fa4367f8c6e429edfd1a2c7dcc1fba2",
          "md5": "4ae9187f2280fca82e52dc78042b5a56",
          "sha256": "2c6e58ac44b05e236367d4f3aa93877406a1373461ebb1df618ef2fe3333c625"
        },
        "downloads": -1,
        "filename": "easy_excel_util-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ae9187f2280fca82e52dc78042b5a56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 34880,
        "upload_time": "2021-10-16T10:10:04",
        "upload_time_iso_8601": "2021-10-16T10:10:04.582846Z",
        "url": "https://files.pythonhosted.org/packages/82/7b/c40425b01cffcc82b0b3a21d404d3fa4367f8c6e429edfd1a2c7dcc1fba2/easy_excel_util-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec1c4540470a19f72b7c92a2e05e835ff82635eb56ad0b2af5a2adda2cfa53cd",
          "md5": "fa41034dbd6ecddd5cf373442cae27d6",
          "sha256": "0fac4ab6472a6f383e31b8a5811cc64d3a017f3cb68d29b5f0622f674fac4bf1"
        },
        "downloads": -1,
        "filename": "easy-excel-util-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fa41034dbd6ecddd5cf373442cae27d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 26505,
        "upload_time": "2021-10-16T10:10:07",
        "upload_time_iso_8601": "2021-10-16T10:10:07.856887Z",
        "url": "https://files.pythonhosted.org/packages/ec/1c/4540470a19f72b7c92a2e05e835ff82635eb56ad0b2af5a2adda2cfa53cd/easy-excel-util-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "827bc40425b01cffcc82b0b3a21d404d3fa4367f8c6e429edfd1a2c7dcc1fba2",
        "md5": "4ae9187f2280fca82e52dc78042b5a56",
        "sha256": "2c6e58ac44b05e236367d4f3aa93877406a1373461ebb1df618ef2fe3333c625"
      },
      "downloads": -1,
      "filename": "easy_excel_util-2.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ae9187f2280fca82e52dc78042b5a56",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 34880,
      "upload_time": "2021-10-16T10:10:04",
      "upload_time_iso_8601": "2021-10-16T10:10:04.582846Z",
      "url": "https://files.pythonhosted.org/packages/82/7b/c40425b01cffcc82b0b3a21d404d3fa4367f8c6e429edfd1a2c7dcc1fba2/easy_excel_util-2.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec1c4540470a19f72b7c92a2e05e835ff82635eb56ad0b2af5a2adda2cfa53cd",
        "md5": "fa41034dbd6ecddd5cf373442cae27d6",
        "sha256": "0fac4ab6472a6f383e31b8a5811cc64d3a017f3cb68d29b5f0622f674fac4bf1"
      },
      "downloads": -1,
      "filename": "easy-excel-util-2.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fa41034dbd6ecddd5cf373442cae27d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 26505,
      "upload_time": "2021-10-16T10:10:07",
      "upload_time_iso_8601": "2021-10-16T10:10:07.856887Z",
      "url": "https://files.pythonhosted.org/packages/ec/1c/4540470a19f72b7c92a2e05e835ff82635eb56ad0b2af5a2adda2cfa53cd/easy-excel-util-2.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}