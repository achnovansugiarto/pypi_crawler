{
  "info": {
    "author": "Soami Charan",
    "author_email": "charansoami@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Education",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Py ToolBelt\nThis module contains basic functions for built-in datatypes for execute trivial tasks.\nThis functions are available as built-in datatype methods.\n\n## Installation\nInstall package using pip -> `pip install py-toolbelt`\n\n## Usage\nImport the module and activate toolbelt\n`\nimport py_toolbelt\npy_toolbelt.activate()\n`\nAfter activation, custom functions are available as built-in methods.\nFor example -\nBefore activation, in python console, create a list variable `list_object = [1, 2, 3]` and type `list_object.` and press tab to get prompt of available methods, you see -\n```python\n>>> list_object.\nl.append(   l.clear(    l.copy(     l.count(    l.extend(   l.index(    l.insert(   l.pop(      l.remove(   l.reverse(  l.sort(\n```\n\nAfter activation -\n```python\n>>> list_object.\nl.append(         l.count(          l.filter(         l.insert(         l.pop(            l.reverse(        l.to_tuple(\nl.clear(          l.count_all(      l.flat_list(      l.intersection(   l.remove(         l.sort(           l.transform(\nl.compact(        l.execute(        l.get_index(      l.is_none(        l.remove_index(   l.to_dict(        l.unique(\nl.copy(           l.extend(         l.index(          l.is_not_none(    l.remove_values(  l.to_set(\n```\n\nTo deactivate the toolbelt\n`\npy_toolbelt.deactivate()\n`\n\n## Available Functions\n### List\n#### unique()\nEliminate duplicate elements from list.<br>\n_**note -** elements should be hashable datatype i.e elements must be str, int, float, tuple, bool only._\n\n**Example**\n```python\n>>> list_obj = [1, 2, 3, 3, 2]\n>>> print(list_obj.unique())\n[1, 2, 3]\n```\n\n### to_set()\nConvert list to set.<br>\n_**note -** elements should be hashable datatype i.e elements must be str, int, float, tuple, bool only._\n\n**Example**\n```python\n>>> list_obj = [1, 2, 3, 3, 2]\n>>> print(list_obj.to_set())\n{1, 2, 3}\n```\n\n### to_tuple()\nConvert list to tuple.<br>\n_**note -** elements should be hashable datatype i.e elements must be str, int, float, tuple, bool only._\n\n**Example**\n```python\n>>> list_obj = [1, 2, 3, 3, 2]\n>>> print(list_obj.to_tuple())\n(1, 2, 3, 3, 2)\n```\n\n### to_dict(`key_function`=None, `value_function`=None)\nConvert list to dict with with keys using `key_function` and values using `value_function`.\n**Argument**\n* __key_function__- `function`, any number of argument are accepted. (_required_)\n* __value_function__ - `function`, any number of arguments are accepted. (_required_)\n\n**Example**\n```python\n>>> list_obj = [1, 2, 3, 4]\n>>> list_obj.to_dict(key_function=lambda x: x, value_function=lambda y: y * 2)\n{1: 1, 2: 4, 3: 6, 4: 8}\n```\n\n### remove_index(`index`=[], `**kwargs`)\nRemove indexes from list based on given index values in `index` argument and given `condition` keyword argument.\n_**note - ** `condition` is applicable on indexes, not on the elements of list_\n**Arguments**\n* __index__ - `list` / `int`, if single `int` is given then remove that index, if `list` is given then remove indexes given in list. (_optional_, _default: `[]`_)\n\n**Keyword arguments**\n* __condition__ - `function`, if condition function satisfy for index number then it will be removed.\n* __cast__ - `data_type`, cast the elements of list.\n\n**Example**\n```python\n>>> list_obj = ['hello', 'this', 'is', 'a', 'list']\n>>> list_obj.remove_index(1)\n['hello', 'is', 'a', 'list']\n\n>>> list_obj.remove_index([0, 1, 2])\n['a', 'list']\n\n>>> list_obj.remove_index(condition=lambda x: x % 2 == 0) # even indexes will be removed\n['is', 'list']\n\n>>> list_obj = [1, 2, 3, 4]\n>>> list_obj.remove_index([1, 2], condition=lambda x: x % 2 == 0, cast=str)\n['4']\n```\n\n### remove_values(`values`=[], `**kwargs`)\nRemove elements from list based on given values in `index` argument and given `condition` keyword argument.\n\n**Arguments**\n* __values__ - `list` / any data type, if any other data type is given (except list) then it exclude all occurences, if `list` is given then exclude elements if it exist in given list. (_optional_, _default: `[]`_)\n\n**Keyword arguments**\n* __condition__ - `function`, if condition function satisfy for list element then it will be removed.\n* __cast__ - `data_type`, cast the elements of list.\n\n**Example**\n```python\n>>> list_obj = ['hello', 'this', 'is', 'a', 'list']\n>>> list_obj.remove_values('this')\n['hello', 'is', 'a', 'list']\n\n>>> list_obj.remove_values(['hello', 'this', 'is'])\n['a', 'list']\n\n>>> list_obj.remove_values(condition=lambda x: x == 'hello')\n['this', 'is', 'a', 'list']\n\n>>> list_obj = [1, 2, 3, 4]\n>>> list_obj.remove_values([1, 2], condition=lambda x: x % 2 == 0, cast=str)\n['4']\n```\n\n### filter(`condition`, `**kwargs`)\nFilter list with given `condition` function.\nIt is equivalent to - `[element for element in list_object if condition(element)]`\n**Arguments**\n* __condition__ - `function`, if condition function not satisfy for list element then it will be excluded. (_required_)\n\n**Keyword arguments**\n* __cast__ - `data_type`, cast the elements of list.\n\n**Example**\n```python\n>>> list_obj = [1, 2, 3, 4, 5, 6]\n>>> list_obj.filter(lambda x: x > 3)\n[4, 5, 6]\n\n>>> list_obj.filter(lambda x: x <= 3, cast=float)\n[1.0. 2.0. 3.0]\n```\n\n### compact()\nExclude `None` or empty `list` / `dict` / `set` / `tuple` from list.\n\n**Example**\n```python\n>>> list_obj = [1, 2, 3, None, [], {}]\n>>> list_obj.compact()\n[1, 2, 3]\n```\n\n### transform(`element_function`)\nTransform the elements of list.\n\n**Arguments**\n* __element_function__ - `function`, list elements are passed to given function. (_required_)\n\n**Example**\n```python\n>>> list_obj = [1, 2, 3, 4]\n>>> list_obj.transform(lambda x: x ** 2)\n[1, 4, 9, 16]\n\n>>> list_obj = [*enumerate(list_object)]\n>>> list_obj.transform(lambda x, y: x + y)\n[1, 3, 5, 7]\n```\n\n### count_all()\nCount occurences of elements in list.<br>\n_**note -** elements should be hashable datatype i.e elements must be str, int, float, tuple, bool only._\n\n**Example**\n```python\n>>> list_obj = [1, 2, 2, 3, 3, 4]\n>>> list_obj.count_all()\n{1: 1, 2: 2, 3: 2, 4: 1}\n```\n\n### intersection(`target_list`)\nGive list of common elements.<br>\n_**note -** elements should be hashable datatype i.e elements must be str, int, float, tuple, bool only._\n\n**Example**\n```python\n>>> list_obj = [1, 2, 2, 3, 3, 4]\n>>> list_obj.intersection([2, 4, 5, 6, 7])\n[2, 4]\n```\n\n### flatten()\nConvert N-Dimention list into single flat 1-D list.\n\n**Example**\n```python\n>>> list_obj = [1, [2, 2], 3, [[[3]]], 4]\n>>> list_obj.flatten()\n[1, 2, 2, 3, 3, 4]\n```\n\n### get_index(`index`, `default_value=None`)\nFetch given index from list, if given index is out of range then return `default_value`.\n\n**Arguments**\n* __index__ - `int`, (_required_)\n* __default_value__ - any data type, (_optional_, _default: None_)\n\n**Example**\n```python\n>>> list_obj = [1, 2, 3, 4, 5]\n>>> list_obj.get_index(2)\n3\n\n>>> list_obj.get_index(10, 'N/A')\nN/A\n```\n\n### execute(`execute_function`)\nExecute function using elements of list.\n\n**Arguments**\n* __execute_function__ - `function`, it can accept any number of arguments (_required_)\n\n**Example**\n```python\n>>> list_obj = [1, 2, 3, 4, 5]\n>>> new_list = []\n>>> list_obj.execute(lambda x: new_list.append(x * 3))\n>>> new_list\n[3, 6, 9, 12, 15]\n\n>>> list_obj.execute(lambda x: print(x))\n1\n2\n3\n4\n5\n```\n\n## Dict\n### filter(`condition`, `**kwargs`)\nFilter dict based on keys and values.\n**Arguments**\n* __condition__ - `function`, `function` must accept 2 parameters, 1st parameter for key and 2nd parameter for value. (_required_)\n\n**Example**\n```python\n>>> dict_obj = {'a': 1, 'b': 2, 'c': 3}\n>>> dict_obj.filter(lambda key, value: value > 1)\n{'b': 2, 'c': 3}\n```\n\n### transform(`key_function=None`, `value_function=None`)\nTransform dict keys and values according to given functions.\n**Arguments**\n* __key_function__ - `function`, `function` can accept any number of arguments. (_optional_, _default: `None`_)\n* __value_function__ - `function`, `function` can accept any number of arguments. (_optional_, _default: `None`_)\n\n**Example**\n```python\n>>> dict_obj = {'a': 1, 'b': 2, 'c': 3}\n>>> dict_obj.transform(key_function=lambda x: 'a' + x)\n{'aa': 1, 'ab': 2, 'ac': 3}\n\n>>> dict_obj.transform(value_function=lambda x: x ** 2)\n{'a': 1, 'b': 4, 'c': 9}\n\n>>> dict_obj = {'a': (1, 2), 'b': (3, 4), 'c': (5, 6)}\n>>> dict_obj.transform(key_function=lambda key: key + '_sum', value_function=lambda x, y: x + y)\n{'a_sum': 3, 'b_sum': 7, 'c_sum': 11}\n```\n\n### keys_list()\nReturn keys of dict as list.\n\n**Example**\n```python\n>>> dict_obj = {'a': 1, 'b': 2, 'c': 3}\n>>> dict_obj.keys_list()\n['a', 'b', 'c']\n```\n\n### values_list()\nReturn values of dict as list.\n\n**Example**\n```python\n>>> dict_obj = {'a': 1, 'b': 2, 'c': 3}\n>>> dict_obj.values_list()\n[1, 2, 3]\n```\n\n### remove(`key_function=None`, `value_function=None`, `operator='and'`)\nRemove dict keys based on given `key_function` and `value_fucntion` and operation between `key_funciton` and `value_function` which is by default `and` operation.\n**Arguments**\n* __key_function__ - `function`, `function` can accept any number of arguments. (_optional_, _default: `None`_)\n* __value_function__ - `function`, `function` can accept any number of arguments. (_optional_, _default: `None`_)\n* __operator__ - `str`, accepted string - ['and', 'or'], (_optional_, _default='and'_)\n\n**Example**\n```python\n>>> dict_obj = {'a': 1, 'b': 2, 'c': 3}\n>>> dict_obj.remove(key_function=lambda x: x == 'b')\n{'a': 1, 'c': 3}\n\n>>> dict_object.remove(key_function=lambda key: key in ['b', 'c'], value_fucntion=lambda value: value % 2 == 1)\n{'a': 1, 'b': 2}\n\n>>> dict_object.remove(key_function=lambda key: key in ['b', 'c'], value_fucntion=lambda value: value % 2 == 1, operator='or')\n{'a': 1}\n```\n\n### reverse(`keep_duplicate=False`)\nReverse the dict, set values as keys and keys as values. If `keep_duplicate` is set true then it will merge duplicate value as list.<br>\n_**note -** dict values should be hashable datatype i.e elements must be str, int, float, tuple, bool only._\n\n**Arguments**\n* __keep_duplicate__ - `bool`, (_optional_, _default: `False`_)\n\n**Example**\n```python\n>>> dict_obj = {'a': 1, 'b': 2, 'c': 3, 'd': 3}\n>>> dict_obj.reverse()\n{1: 'a', 2: 'b', 3: 'd'}\n\n>>> dict_obj.reverse(keep_duplicate=True)\n{1: 'a', 2: 'b', 3: ['c', 'd']}\n```\n\n### deep_merge(`target_dict`, `max_depth=None`)\nIt will merge given `target_dict` with given `max_depth`. If `max_depth` is `None` then it go down to maximum depth for merging.\n**Arguments**\n* __target_dict__ - `dict`, (_required_)\n* __max_depth__ - `int`, `int` greater than 0, (_optional_, _default: `None`_)\n\n**Example**\n```python\n>>> dict_obj = {'a': 1, 'b': {'c': {'d': 3}, 'e': 2}}\n>>> dict_obj.deep_merge({'g': 4, 'b': {'c': {'d': 5}}})\n{'a': 1, 'b': {'c': {'d': [3, 5]}, 'e': 2}, 'g': 4}\n\n>>> dict_obj.deep_merge({'g': 4, 'b': {'c': {'d': 5}}}, max_depth=1)\n{'a': 1, 'b': [{'c': {'d': 3}, 'e': 2}, {'c': {'d': 5}}], 'g': 4}\n```\n\n### execute(`execute_function`)\nExecute function using keys and values of dict.\n\n**Arguments**\n* __execute_function__ - `function`, it must accept 2 arguments key and value, (_required_)\n\n**Example**\n```python\n>>> dict_obj = {'a': 1, 'b': 2, 'c': 3}\n>>> new_list = []\n>>> dict_obj.execute(lambda x, y: new_list.append(y))\n>>> new_list\n[1, 2, 3]\n\n>>> dict_obj.execute(lambda x, y: print(x))\n1\n2\n3\n```\n\n## Set\n### to_list()\nConvert set to list.\n\n## Tuple\n### to_list()\nConvert tuple to list.\n\n## Int & Float\n### is_positive(`**kwargs`)\nReturn `True` if number is positive else return `False`. If `on_true` or `on_false` keyword arguments are present then it will return keyword argument value respectively.\n\n**Keyword arguments**\n* __on_true__ - any data type, (_optional_, _default: `True`_)\n* __on_false__ - any data type, (_optional_, _default: `False`_)\n\n**Example**\n```python\n>>> num = 1\n>>> num.is_positive()\nTrue\n>>> num.is_positive(on_true='Yes')\nYes\n>>> num = -9\n>>> num.is_positive(on_false='No')\nNo\n>>> num.is_positive(on_true='Yes')\nFalse\n```\n\n### is_negetive(`**kwargs`)\nReturn `True` if number is negetive else return `False`. If `on_true` or `on_false` keyword arguments are present then it will return keyword argument value respectively.\n\n**Keyword arguments**\n* __on_true__ - any data type, (_optional_, _default: `True`_)\n* __on_false__ - any data type, (_optional_, _default: `False`_)\n\n**Example**\n```python\n>>> num = 1\n>>> num.is_negetive()\nFalse\n>>> num.is_negetive(on_true='Yes')\nFalse\n>>> num = -9\n>>> num.is_negetive(on_false='No')\nTrue\n>>> num.is_negetive(on_true='Yes', on_false='No')\nYes\n```\n\n### is_zero(`**kwargs`)\nReturn `True` if number is equal to zero else return `False`. If `on_true` or `on_false` keyword arguments are present then it will return keyword argument value respectively.\n\n**Keyword arguments**\n* __on_true__ - any data type, (_optional_, _default: `True`_)\n* __on_false__ - any data type, (_optional_, _default: `False`_)\n\n**Example**\n```python\n>>> num = 1\n>>> num.is_zero()\nFalse\n>>> num.is_zero(on_true='Yes')\nFalse\n>>> num = 0\n>>> num.is_zero(on_false='No')\nTrue\n>>> num.is_zero(on_true='Yes', on_false='No')\nYes\n```\n\n### safe_divide(`denominator`, `default=math.nan`)\nIt ensure if `denominator` is zero then return `default` value otherwise return divided value.\n**Arguments**\n* __denominator__ - `int` / `float`, (_required_)\n* __default__ - any data type, (_optional_, _default: `math.nan`_)\n\n**Example**\n```python\n>>> a = 4\n>>> a.safe_divide(2)\n2.0\n>>> a.safe_divide(0)\nnan\n>>> a.safe_divide(0, 0)\n0\n>>> a.safe_divde(0, 'N/A')\nN/A\n```\n\n## Others\nThis is common to all data types -\n### is_none(`**kwargs`)\nReturn `True` if object is `None` else return `False`. If `on_true` or `on_false` keyword arguments are present then it will return keyword argument value respectively.\n\n**Keyword arguments**\n* __on_true__ - any data type, (_optional_, _default: `True`_)\n* __on_false__ - any data type, (_optional_, _default: `False`_)\n\n**Example**\n```python\n>>> a, b, c, d = 2, 'hello', [], None\n>>> a.is_none()\nFalse\n>>> a.is_none(on_false=a + 1)\n3\n>>> b.is_none(on_true=\"Yes\")\nFalse\n>>> d.is_none()\nTrue\n```\n\n### is_not_none(`**kwargs`)\nReturn `True` if object is not `None` else return `False`. If `on_true` or `on_false` keyword arguments are present then it will return keyword argument value respectively.\n\n**Keyword arguments**\n* __on_true__ - any data type, (_optional_, _default: `True`_)\n* __on_false__ - any data type, (_optional_, _default: `False`_)\n\n**Example**\n```python\n>>> a, b, c, d = 2, 'hello', [], None\n>>> a.is_not_none()\nTrue\n>>> a.is_not_none(on_false=a + 1)\nTrue\n>>> b.is_not_none(on_true=\"Yes\")\nYes\n>>> d.is_not_none()\nFalse\n```\n### _s\n`_s` attribute is use to access any object attribute safely access.\n`_s(*args, *kwargs)` to safely call a method on the object\nYou can use as None-aware operation.\n\n**Example**\n```python\nclass Aclass:\n  def __init__(self):\n    self.a, self.b_ = 1, 2\n\n>>> obj = Aclass()\n>>> obj.a  # Attribute `a` exists in object\n1\n>>> obj.hello  # Attribute `hello` does not exists\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Aclass' object has no attribute 'hello'\n\n>>> obj._s.hello   # Accessing a non-existing attribute via `_s` attribute. It will return None\n\n>>> obj._s.hello._s.world._s.chain_whatever  # Consecutive chaining also evaluate None\n>>> obj._s.a  # Attribute `a` exist so it will return its value.\n1\n>>> str_value = 'hello'\n>>> str_value.find('e')  # find method exists on string object.\n1\n>>> str_value.find_new('e')  # find_new method does not exists so it will raise error\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'str' object has no attribute 'find_new'\n\n>>> str_value.find_new._s('e')  # Using _s(*args, **kwarg) to safely call the method and it will return None.\n```\n\n## Functions toolbelt\n\n### is_type(`obj`, `target_obj`)\nReturn `True` if object matches with given types else return `False`.\n\n**Arguments**\n* __obj__ - any data type / object\n* __target_obj__ - string or list of string\n\n**Example**\n```python\n>>> a, b, c = 2, 'hello', ['world']\n>>> is_type(a, 'int')\nTrue\n>>> is_type(b, 'int')\nFalse\n>>> is_type(c, ['list', 'set'])\nTrue\n>>> is_type(a, ['str', 'list'])\nFalse\n```\n\n### handle_division(`numerator`, `denominator`, `default=0`)\nReturn division value if `denominator` is not zero otherwise return `default` value.\n\n**Arguments**\n* __numerator__ - int / float\n* __denominator__ - int / float\n* __default__ - int / float, (_optional_, _default: `0`_)\n\n**Example**\n```python\n>>> handle_division(1, 2)\n0.5\n>>> handle_division(1.5, None)\n0\n>>> handle_division(2, 0, 2)\n2\n>>> handle_division(2, 0)\n0\n```\n\n### multithread_pool(`funcs`, `max_threads=5`)\nThis method execute given ``funcs`` dict of functions in multi-thread. Each thread execute one function.\n\n**Arguments**\n* __funcs__ - dict\n* __max_threads__ - int, (_optional_, _default: `5`_)\n\n**Example**\n`funcs` argument dict keys are function and value is either list of length 2 or ``None``.\nList 1st element should be list of positional arguments.\nList 2nd element should be dict of keyword arguments.\nIf key is ``None`` then it means function do not take any positional arguments and keyword\narguments.\nStructure -\n```python\n{test_func1: [[1, 2, 'Hello', [1,2,333]], {'arg_key': 12}],\n test_func2: [[1, 2, 'Hello', [1,2,333]],\n test_func3: [None, {'arg_key': 123}],}\n test_func: None}\n ```\n\n ### cache_db(`key`, `value=None`)\nThis function use to implement temporary small pickle database which is a json storing file.\nThis is not persistant database so it will be cleared out if you deploy new code / delete the pickle file.\nSo make sure to use in such cases where you need data to store for temporary purpose.\nThis function accept two parameters, first is `key` and second is `value`.\nIf only `key` parameter is provided then it will get data from database, if `key` not found return ``False``, otherwise return key's value.\nIf you pass both `key` and `value` parameters then it will set key value in database.\n\n**Arguments**\n* __key__ - str\n* __value__ - any basic datatype accepted by json format, (_optional_, _default: `None`_)\n\n**Example**\n```python\n>>> cache_db(key='hello')\nFalse\n>>> cache_db(key='hello', value='world')\nTrue\n>>> cache_db(key='hello')\nWorld\n```\n### none_safe(`object`, `default=None`)\nIf given `object` is not `None` then return object otherwise return `default` value.\n\n**Arguments**\n* __object__ - any data type / object\n* __default__ - any data type / object, (_optional_, _default: `None`_)\n\n**Example**\n```python\n>>> none_safe(5)\n5\n>>> none_safe('hello', 'world')\nhello\n>>> none_safe(None, 'world')\nworld\n```\n\n### iter_safe(`object`, `default=[]`)\nIf given `object` is not `None` and object is instance of iterable then return object otherwise return `default` value.\n\n**Arguments**\n* __object__ - any data type / object\n* __default__ - any data type / object, (_optional_, _default: `[]`_)\n\n**Example**\n```python\n>>> iter_safe(5)\n[]\n>>> iter_safe(['hello'], 'world')\n['hello']\n>>> iter_safe([], 'world')\n[]\n>>> iter_safe('hello')\n'hello'\n>>> iter_safe(1.4, ['hello', 'world'])\n['hello', 'world']\n```\n\n### empty_safe(`object`, `default=None`)\nIf given `object` is empty in sense of iterable then return `default` value else return `object`.\n\n**Arguments**\n* __object__ - any data type / object\n* __default__ - any data type / object, (_optional_, _default: `None`_)\n\n**Example**\n```python\n>>> empty_safe(5)\n5\n>>> empty_safe(['hello'], 'world')\n['hello']\n>>> empty_safe([], 'world')\n'world'\n>>> empty_safe('hello')\n'hello'\n>>> empty_safe(1.4, ['hello', 'world'])\n1.4\n```\n\n# MIT License\n\nCopyright (c) 2021 Soami Charan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,PyToolBelt",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-toolbelt",
    "package_url": "https://pypi.org/project/py-toolbelt/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-toolbelt/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/py-toolbelt/0.2.5/",
    "requires_dist": [
      "forbiddenfruit",
      "jsondatabase",
      "future"
    ],
    "requires_python": "",
    "summary": "PyToolBelt - Extend your built-in methods.",
    "version": "0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15126056,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10013ce4b268ec53fdc05c42c066ec1c41ebb7c365555438436d9eea40391604",
          "md5": "47a7e9bd011f435ca0ca24214acdeace",
          "sha256": "1c72e2e1cf174eba498a3a7914761d66a3f2550b7271bbe4f41954c0452dbb8b"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47a7e9bd011f435ca0ca24214acdeace",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4422,
        "upload_time": "2021-01-14T10:32:07",
        "upload_time_iso_8601": "2021-01-14T10:32:07.574787Z",
        "url": "https://files.pythonhosted.org/packages/10/01/3ce4b268ec53fdc05c42c066ec1c41ebb7c365555438436d9eea40391604/py_toolbelt-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7763cb223bcd7a6c307c79ef7b87b3db1684187ee5ec01faee81795743355a7",
          "md5": "4caae81026a8caa5de367560f9205e27",
          "sha256": "b715c30c75f36479262da6e6a2c0110681c71b32954a95ba012f9f5e3428f203"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4caae81026a8caa5de367560f9205e27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3806,
        "upload_time": "2021-01-14T10:32:09",
        "upload_time_iso_8601": "2021-01-14T10:32:09.719426Z",
        "url": "https://files.pythonhosted.org/packages/e7/76/3cb223bcd7a6c307c79ef7b87b3db1684187ee5ec01faee81795743355a7/py_toolbelt-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf22081531aecba3223481ca66bad64a12fe705946e6048a05a5916ae7d69b3b",
          "md5": "9f14509e1e585934a6ac1c3f970bc6e4",
          "sha256": "0aa09affd138813eab4b706b9c4616b4abf764d02bc4fb7f2a9bdb308c4c9862"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f14509e1e585934a6ac1c3f970bc6e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8419,
        "upload_time": "2021-01-15T09:07:14",
        "upload_time_iso_8601": "2021-01-15T09:07:14.771995Z",
        "url": "https://files.pythonhosted.org/packages/bf/22/081531aecba3223481ca66bad64a12fe705946e6048a05a5916ae7d69b3b/py_toolbelt-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "158285473db6594a1db91d29a116889f0a057d304490a54f4e1b4b3f529a2ab6",
          "md5": "af7fda0c4d065249159d476298470e33",
          "sha256": "664abb2cf094158cf42f3c3c6393ead79d9bd8379ed520827a3151a713d5ddda"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "af7fda0c4d065249159d476298470e33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10609,
        "upload_time": "2021-01-15T09:07:17",
        "upload_time_iso_8601": "2021-01-15T09:07:17.979504Z",
        "url": "https://files.pythonhosted.org/packages/15/82/85473db6594a1db91d29a116889f0a057d304490a54f4e1b4b3f529a2ab6/py_toolbelt-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b44e4bef443d0f39aede93da951f205a7e5a13b302bbe2a33c2674754e71154",
          "md5": "25445b33c9e08195dffb7442a1c8d89c",
          "sha256": "e8d3270b6fa7c55b6400b1b5596de5ef1e209663b2276f336b992dc5926bc9f2"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25445b33c9e08195dffb7442a1c8d89c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9065,
        "upload_time": "2021-01-15T09:42:26",
        "upload_time_iso_8601": "2021-01-15T09:42:26.454799Z",
        "url": "https://files.pythonhosted.org/packages/0b/44/e4bef443d0f39aede93da951f205a7e5a13b302bbe2a33c2674754e71154/py_toolbelt-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff1394f78975c9d186a7267b1eb747a6ca88cc7b0fbf082737a12010ba166292",
          "md5": "8931a3c13cfafed03b051faff52221d1",
          "sha256": "43782f4cf68d23612f2d4915f5660d3aca4aeef123b209ca00d216e707e4154d"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8931a3c13cfafed03b051faff52221d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11967,
        "upload_time": "2021-01-15T09:42:30",
        "upload_time_iso_8601": "2021-01-15T09:42:30.253996Z",
        "url": "https://files.pythonhosted.org/packages/ff/13/94f78975c9d186a7267b1eb747a6ca88cc7b0fbf082737a12010ba166292/py_toolbelt-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cef36379d5ee85e1e54ba1928f0a75ee1ecb5ae022119e55edd2dcf4ff77041",
          "md5": "1278d0a4567eb3a9a4dcd7ebab7e08ad",
          "sha256": "c6f442f9bce69486acc31456dc42ad1c50ac7a4f6a0afdc94730e1e9c91c62cc"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1278d0a4567eb3a9a4dcd7ebab7e08ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9100,
        "upload_time": "2021-01-15T10:14:43",
        "upload_time_iso_8601": "2021-01-15T10:14:43.317856Z",
        "url": "https://files.pythonhosted.org/packages/3c/ef/36379d5ee85e1e54ba1928f0a75ee1ecb5ae022119e55edd2dcf4ff77041/py_toolbelt-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "398fe5360c3165cd3ffef6d88c046d90ea0e4fa81956ef64bc5c3f48402dcb2e",
          "md5": "01d77c3fce0f19b499106a03b1e06f6c",
          "sha256": "b950bb8f12134f075850e7bc851d94eb97e92fc7a7bb38ccc9fe0a68767053b9"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "01d77c3fce0f19b499106a03b1e06f6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11985,
        "upload_time": "2021-01-15T10:14:45",
        "upload_time_iso_8601": "2021-01-15T10:14:45.771187Z",
        "url": "https://files.pythonhosted.org/packages/39/8f/e5360c3165cd3ffef6d88c046d90ea0e4fa81956ef64bc5c3f48402dcb2e/py_toolbelt-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "651a56528621cc9a3c91f6808c7b42e44e5305434369872c69a2d614eab163f8",
          "md5": "b700db3ffa61e32b3f436bfffa7be9b2",
          "sha256": "fea6c143585d31589b2ed4a949c6bd4734696d732359a99f0037264063ebc758"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b700db3ffa61e32b3f436bfffa7be9b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11898,
        "upload_time": "2021-07-23T09:22:14",
        "upload_time_iso_8601": "2021-07-23T09:22:14.082531Z",
        "url": "https://files.pythonhosted.org/packages/65/1a/56528621cc9a3c91f6808c7b42e44e5305434369872c69a2d614eab163f8/py_toolbelt-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc1f5ff5407b0b51f8f72eb1f8fb26fe5be9facd972e768417fa6a863deeb30f",
          "md5": "112e594168f3ffc169a720d57747896b",
          "sha256": "570c7b0e1340580676f713bd1638cc1c7b90c67cd729de7618dcab6b583443dc"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "112e594168f3ffc169a720d57747896b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15133,
        "upload_time": "2021-07-23T09:22:20",
        "upload_time_iso_8601": "2021-07-23T09:22:20.140874Z",
        "url": "https://files.pythonhosted.org/packages/fc/1f/5ff5407b0b51f8f72eb1f8fb26fe5be9facd972e768417fa6a863deeb30f/py_toolbelt-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfb89faac53e65db63d91b857244953d33eb5168d55ae4a2951af08b58e0479f",
          "md5": "f84cc829cbc359ee60383bdd7b47caa9",
          "sha256": "f3e412482a900f3995d54261a0b509b70cc2c1b929d1561d93614c2b72bccc6e"
        },
        "downloads": -1,
        "filename": "py_toolbelt-0.2.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f84cc829cbc359ee60383bdd7b47caa9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12562,
        "upload_time": "2022-09-17T09:22:59",
        "upload_time_iso_8601": "2022-09-17T09:22:59.213748Z",
        "url": "https://files.pythonhosted.org/packages/cf/b8/9faac53e65db63d91b857244953d33eb5168d55ae4a2951af08b58e0479f/py_toolbelt-0.2.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cfb89faac53e65db63d91b857244953d33eb5168d55ae4a2951af08b58e0479f",
        "md5": "f84cc829cbc359ee60383bdd7b47caa9",
        "sha256": "f3e412482a900f3995d54261a0b509b70cc2c1b929d1561d93614c2b72bccc6e"
      },
      "downloads": -1,
      "filename": "py_toolbelt-0.2.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f84cc829cbc359ee60383bdd7b47caa9",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12562,
      "upload_time": "2022-09-17T09:22:59",
      "upload_time_iso_8601": "2022-09-17T09:22:59.213748Z",
      "url": "https://files.pythonhosted.org/packages/cf/b8/9faac53e65db63d91b857244953d33eb5168d55ae4a2951af08b58e0479f/py_toolbelt-0.2.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}