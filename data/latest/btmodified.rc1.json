{
  "info": {
    "author": "Unknown",
    "author_email": "israel.osorioo@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "[![PyPI - Python](https://img.shields.io/badge/python-3.6%20|%203.7%20|%203.8-blue.svg)](https://pypi.org/project/bertopic/)\n[![PyPI - License](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/MaartenGr/VLAC/blob/master/LICENSE)\n[![PyPI - PyPi](https://img.shields.io/pypi/v/BERTopic)](https://pypi.org/project/bertopic/)\n[![Build](https://img.shields.io/github/workflow/status/MaartenGr/BERTopic/Code%20Checks/master)](https://pypi.org/project/bertopic/)\n[![docs](https://img.shields.io/badge/docs-Passing-green.svg)](https://maartengr.github.io/BERTopic/)\n[![DOI](https://zenodo.org/badge/297672263.svg)](https://zenodo.org/badge/latestdoi/297672263)\n\n\n# BERTopic\n\n<img src=\"images/logo.png\" width=\"35%\" height=\"35%\" align=\"right\" />\n\nBERTopic is a topic modeling technique that leverages ðŸ¤— transformers and c-TF-IDF to create dense clusters\nallowing for easily interpretable topics whilst keeping important words in the topic descriptions. It even supports \nvisualizations similar to LDAvis! \n\nCorresponding medium post can be found [here](https://towardsdatascience.com/topic-modeling-with-bert-779f7db187e6?source=friends_link&sk=0b5a470c006d1842ad4c8a3057063a99) \nand [here](https://towardsdatascience.com/interactive-topic-modeling-with-bertopic-1ea55e7d73d8?sk=03c2168e9e74b6bda2a1f3ed953427e4).\n\n## Installation\n\nInstallation can be done using [pypi](https://pypi.org/project/bertopic/):\n\n```bash\npip install bertopic\n```\n\nTo use the visualization options, install BERTopic as follows:\n\n```bash\npip install bertopic[visualization]\n```\n\nTo use Flair embeddings, install BERTopic as follows:\n```bash\npip install bertopic[flair]\n```\n\n## Getting Started\nFor an in-depth overview of the features of `BERTopic` \nyou can check the full documentation [here](https://maartengr.github.io/BERTopic/) or you can follow along \nwith the Google Colab notebook [here](https://colab.research.google.com/drive/1FieRA9fLdkQEGDIMYl0I3MCjSUKVF8C-?usp=sharing).\n\n### Quick Start\nWe start by extracting topics from the well-known 20 newsgroups dataset which is comprised of english documents:\n\n```python\nfrom bertopic import BERTopic\nfrom sklearn.datasets import fetch_20newsgroups\n\ndocs = fetch_20newsgroups(subset='all',  remove=('headers', 'footers', 'quotes'))['data']\n\ntopic_model = BERTopic()\ntopics, _ = topic_model.fit_transform(docs)\n```\n\nAfter generating topics and their probabilities, we can access the frequent topics that were generated:\n\n```python\n>>> topic_model.get_topic_freq().head()\nTopic\tCount\n-1\t7288\n49\t3992\n30\t701\n27\t684\n11\t568\n```\n\n-1 refers to all outliers and should typically be ignored. Next, let's take a look at the most \nfrequent topic that was generated, `topic 49`:\n\n```python\n>>> topic_model.get_topic(49)\n[('windows', 0.006152228076250982),\n ('drive', 0.004982897610645755),\n ('dos', 0.004845038866360651),\n ('file', 0.004140142872194834),\n ('disk', 0.004131678774810884),\n ('mac', 0.003624848635985097),\n ('memory', 0.0034840976976789903),\n ('software', 0.0034415334250699077),\n ('email', 0.0034239554442333257),\n ('pc', 0.003047105930670237)]\n```  \n\n**NOTE**: Use `BERTopic(language=\"multilingual\")` to select a model that supports 50+ languages. \n\n### Visualize Topics\nAfter having trained our `BERTopic` model, we can iteratively go through perhaps a hundred topic to get a good \nunderstanding of the topics that were extract. However, that takes quite some time and lacks a global representation. \nInstead, we can visualize the topics that were generated in a way very similar to \n[LDAvis](https://github.com/cpsievert/LDAvis):\n\n```python\ntopic_model.visualize_topics()\n``` \n\n<img src=\"images/topic_visualization.gif\" width=\"60%\" height=\"60%\" align=\"center\" />\n\n\n### Embedding Models\nThe parameter `embedding_model` takes in a string pointing to a sentence-transformers model, \na SentenceTransformer, or a Flair DocumentEmbedding model. \n\n**Sentence-Transformers**  \nYou can select any model from `sentence-transformers` [here](https://www.sbert.net/docs/pretrained_models.html) \nand pass it through BERTopic with `embedding_model`:\n\n```python\nfrom bertopic import BERTopic\ntopic_model = BERTopic(embedding_model=\"xlm-r-bert-base-nli-stsb-mean-tokens\")\n```\n\nOr select a SentenceTransformer model with your own parameters:\n\n```python\nfrom bertopic import BERTopic\nfrom sentence_transformers import SentenceTransformer\n\nsentence_model = SentenceTransformer(\"distilbert-base-nli-mean-tokens\", device=\"cpu\")\ntopic_model = BERTopic(embedding_model=sentence_model)\n```\n\n**Flair**  \n[Flair](https://github.com/flairNLP/flair) allows you to choose almost any embedding model that \nis publicly available. Flair can be used as follows:\n\n```python\nfrom bertopic import BERTopic\nfrom flair.embeddings import TransformerDocumentEmbeddings\n\nroberta = TransformerDocumentEmbeddings('roberta-base')\ntopic_model = BERTopic(embedding_model=roberta)\n```\n\nYou can select any ðŸ¤— transformers model [here](https://huggingface.co/models).\n\n**Custom Embeddings**    \nYou can also use previously generated embeddings by passing it through `fit_transform()`:\n\n```python\ntopic_model = BERTopic()\ntopics, _ = topic_model.fit_transform(docs, embeddings)\n```\n\n### Dynamic Topic Modeling\nDynamic topic modeling (DTM) is a collection of techniques aimed at analyzing the evolution of topics \nover time. These methods allow you to understand how a topic is represented across different times. \nHere, we will be using all of Donald Trump's tweet so see how he talked over certain topics over time: \n\n```python\nimport re\nimport pandas as pd\n\ntrump = pd.read_csv('https://drive.google.com/uc?export=download&id=1xRKHaP-QwACMydlDnyFPEaFdtskJuBa6')\ntrump.text = trump.apply(lambda row: re.sub(r\"http\\S+\", \"\", row.text).lower(), 1)\ntrump.text = trump.apply(lambda row: \" \".join(filter(lambda x:x[0]!=\"@\", row.text.split())), 1)\ntrump.text = trump.apply(lambda row: \" \".join(re.sub(\"[^a-zA-Z]+\", \" \", row.text).split()), 1)\ntrump = trump.loc[(trump.isRetweet == \"f\") & (trump.text != \"\"), :]\ntimestamps = trump.date.to_list()\ntweets = trump.text.to_list()\n```\n\nThen, we need to extract the global topic representations by simply creating and training a BERTopic model:\n\n```python\nfrom bertopic import BERTopic\n\nmodel = BERTopic(verbose=True)\ntopics, _ = model.fit_transform(tweets)\n```\n\nFrom these topics, we are going to generate the topic representations at each timestamp for each topic. We do this \nby simply calling `topics_over_time` and pass in his tweets, the corresponding timestamps, and the related topics:\n\n```python\ntopics_over_time = model.topics_over_time(tweets, topics, timestamps)\n```\n\nFinally, we can visualize the topics by simply calling `visualize_topics_over_time()`: \n\n```python\nmodel.visualize_topics_over_time(topics_over_time, top_n=6)\n```\n\n<img src=\"images/dtm.gif\" width=\"80%\" height=\"80%\" align=\"center\" />\n\n\n### Overview\n\n| Methods | Code  | \n|-----------------------|---|\n| Fit the model    |  `topic_model.fit(docs])` |\n| Fit the model and predict documents    |  `topic_model.fit_transform(docs])` |\n| Predict new documents    |  `topic_model.transform([new_doc])` |\n| Access single topic   | `topic_model.get_topic(12)`  |   \n| Access all topics     |  `topic_model.get_topics()` |\n| Get topic freq    |  `topic_model.get_topic_freq()` |\n| Get all topic information|  `topic_model.get_topic_info()` |\n| Visualize Topics    |  `topic_model.visualize_topics()` |\n| Visualize Topic Probability Distribution    |  `topic_model.visualize_distribution(probabilities[0])` |\n| Update topic representation | `topic_model.update_topics(docs, topics, n_gram_range=(1, 3))` |\n| Reduce nr of topics | `topic_model.reduce_topics(docs, topics, nr_topics=30)` |\n| Find topics | `topic_model.find_topics(\"vehicle\")` |\n| Save model    |  `topic_model.save(\"my_model\")` |\n| Load model    |  `BERTopic.load(\"my_model\")` |\n| Get parameters |  `topic_model.get_params()` |\n\n\n### Citation\nTo cite BERTopic in your work, please use the following bibtex reference:\n\n```bibtex\n@misc{grootendorst2020bertopic,\n  author       = {Maarten Grootendorst},\n  title        = {BERTopic: Leveraging BERT and c-TF-IDF to create easily interpretable topics.},\n  year         = 2020,\n  publisher    = {Zenodo},\n  version      = {v0.5.0},\n  doi          = {10.5281/zenodo.4430182},\n  url          = {https://doi.org/10.5281/zenodo.4430182}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Israel-osorio-ortiz/BERTmodified",
    "keywords": "none",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "btmodified",
    "package_url": "https://pypi.org/project/btmodified/",
    "platform": "",
    "project_url": "https://pypi.org/project/btmodified/",
    "project_urls": {
      "Homepage": "https://github.com/Israel-osorio-ortiz/BERTmodified"
    },
    "release_url": "https://pypi.org/project/btmodified/0.6.0/",
    "requires_dist": [
      "numpy (>=1.19.2)",
      "umap-learn (>=0.5.0)",
      "pandas (>=1.1.5)",
      "scikit-learn (>=0.22.2.post1)",
      "tqdm (>=4.41.1)",
      "torch (>=1.4.0)",
      "sentence-transformers (>=0.4.1)",
      "matplotlib (>=3.2.2) ; extra == 'all'",
      "plotly (<4.14.3,>=4.7.0) ; extra == 'all'",
      "flair (==0.7) ; extra == 'all'",
      "mkdocs (>=1.1) ; extra == 'dev'",
      "mkdocs-material (>=4.6.3) ; extra == 'dev'",
      "mkdocstrings (>=0.8.0) ; extra == 'dev'",
      "pytest (>=5.4.3) ; extra == 'dev'",
      "pytest-cov (>=2.6.1) ; extra == 'dev'",
      "matplotlib (>=3.2.2) ; extra == 'dev'",
      "plotly (<4.14.3,>=4.7.0) ; extra == 'dev'",
      "flair (==0.7) ; extra == 'dev'",
      "mkdocs (>=1.1) ; extra == 'docs'",
      "mkdocs-material (>=4.6.3) ; extra == 'docs'",
      "mkdocstrings (>=0.8.0) ; extra == 'docs'",
      "flair (==0.7) ; extra == 'flair'",
      "pytest (>=5.4.3) ; extra == 'test'",
      "pytest-cov (>=2.6.1) ; extra == 'test'",
      "matplotlib (>=3.2.2) ; extra == 'visualization'",
      "plotly (<4.14.3,>=4.7.0) ; extra == 'visualization'"
    ],
    "requires_python": ">=3.6",
    "summary": "Modified version of Bertopics",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10088816,
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c5274d0f6eefb4fcfd16b887702f3f62e11596b84fec5e258a8e62e890c13cd",
          "md5": "c5166dc2745102c11a8ad6012de788bf",
          "sha256": "5b43cc87119673f4fd41249ca87f81d41acda376c51c26802466b8ece2563bbf"
        },
        "downloads": -1,
        "filename": "btmodified-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5166dc2745102c11a8ad6012de788bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24983,
        "upload_time": "2021-04-16T21:24:53",
        "upload_time_iso_8601": "2021-04-16T21:24:53.858050Z",
        "url": "https://files.pythonhosted.org/packages/8c/52/74d0f6eefb4fcfd16b887702f3f62e11596b84fec5e258a8e62e890c13cd/btmodified-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b2ce73a243b666b4743ab5b2f64a9af5f0bd851207ad719afb36c56d90e12bb",
          "md5": "3d1b97945cc7813faec38967989b23ed",
          "sha256": "395f66dbd2f129803acd346ab5dc903b96874b9ca419197c79cc8fac5159564d"
        },
        "downloads": -1,
        "filename": "btmodified-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d1b97945cc7813faec38967989b23ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26476,
        "upload_time": "2021-04-16T21:24:55",
        "upload_time_iso_8601": "2021-04-16T21:24:55.379380Z",
        "url": "https://files.pythonhosted.org/packages/9b/2c/e73a243b666b4743ab5b2f64a9af5f0bd851207ad719afb36c56d90e12bb/btmodified-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c5274d0f6eefb4fcfd16b887702f3f62e11596b84fec5e258a8e62e890c13cd",
        "md5": "c5166dc2745102c11a8ad6012de788bf",
        "sha256": "5b43cc87119673f4fd41249ca87f81d41acda376c51c26802466b8ece2563bbf"
      },
      "downloads": -1,
      "filename": "btmodified-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c5166dc2745102c11a8ad6012de788bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24983,
      "upload_time": "2021-04-16T21:24:53",
      "upload_time_iso_8601": "2021-04-16T21:24:53.858050Z",
      "url": "https://files.pythonhosted.org/packages/8c/52/74d0f6eefb4fcfd16b887702f3f62e11596b84fec5e258a8e62e890c13cd/btmodified-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b2ce73a243b666b4743ab5b2f64a9af5f0bd851207ad719afb36c56d90e12bb",
        "md5": "3d1b97945cc7813faec38967989b23ed",
        "sha256": "395f66dbd2f129803acd346ab5dc903b96874b9ca419197c79cc8fac5159564d"
      },
      "downloads": -1,
      "filename": "btmodified-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3d1b97945cc7813faec38967989b23ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26476,
      "upload_time": "2021-04-16T21:24:55",
      "upload_time_iso_8601": "2021-04-16T21:24:55.379380Z",
      "url": "https://files.pythonhosted.org/packages/9b/2c/e73a243b666b4743ab5b2f64a9af5f0bd851207ad719afb36c56d90e12bb/btmodified-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}