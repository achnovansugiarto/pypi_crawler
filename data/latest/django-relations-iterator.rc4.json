{
  "info": {
    "author": "Alex Zayets",
    "author_email": "alex.consp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django-relations-Iterator\n\nProvides utilities for iterating over django model instances hierarchy\n\n## Example:\n#### Simple instances tree clone\n\n\n```python\n#models.py\nfrom django.conf import settings\nfrom django.db import models\n\n\nclass Meeting(models.Model):\n    title = models.CharField(max_length=200)\n    time = models.DateTimeField(null=True, blank=True)\n    participants = models.ManyToManyField(settings.AUTH_USER_MODEL, through='Participation', blank=True)\n\n\nclass Participation(models.Model):\n    meeting = models.ForeignKey('Meeting', on_delete=models.CASCADE, related_name='participations')\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='participations')\n\n\nclass Invitation(models.Model):\n    STATUS_SENT = 'sent'\n    STATUS_ACCEPTED = 'accepted'\n    STATUS_DECLINED = 'declined'\n    STATUS_CHOICES = (\n        (STATUS_SENT, STATUS_SENT),\n        (STATUS_ACCEPTED, STATUS_ACCEPTED),\n        (STATUS_DECLINED, STATUS_DECLINED),\n    )\n\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default=STATUS_SENT)\n    participation = models.ForeignKey('Participation', on_delete=models.CASCADE, related_name='invitations')\n\n\nclass Comment(models.Model):\n    meeting = models.ForeignKey('Meeting', on_delete=models.CASCADE, related_name='comments')\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    description = models.TextField(max_length=3000)\n\n```\n\n```python\n#clone.py\nfrom relations_iterator import TreeNode, AbstractVisitor, RelationTreeIterator, ConfigurableRelationTree\nfrom .models import Meeting\n\n# because of config, tree will ignore comments, but will consider all participations and invitations\nCLONE_STRUCTURE = {\n    'participations': {\n        'invitations': {}\n    }\n}\n\n\nclass CloneVisitor(AbstractVisitor):\n    def visit(self, node: TreeNode):\n        node.instance.pk = None\n        if node.parent is not None:\n            parent_joining_column, instance_joining_column = node.relation.get_joining_columns()[0]\n            setattr(\n                node.instance,\n                instance_joining_column,\n                getattr(node.parent.instance, parent_joining_column)\n            )\n        node.instance.save()\n\n\ndef clone(instance, config):\n    \n    visitor = CloneVisitor()\n    tree = ConfigurableRelationTree(root=instance, structure=config)\n    for node in RelationTreeIterator(tree=tree):\n        visitor.visit(node)\n\n        \nmeeting = Meeting.objects.last()\nclone(meeting, CLONE_STRUCTURE)\n\n```\n## Installation\n\n```shell\npip install django-relations-iterator\n```\n\n## Features\n\n### Instance tree\n\n```python\nfrom relations_iterator import ConfigurableRelationTree\n```\n\nCollects all related instances from model hierarchy accordingly to the provided config\n\n```python\nfrom pprint import pprint\nfrom django.contrib.auth.models import User\nfrom relations_iterator import ConfigurableRelationTree\nfrom tests.meetings.models import Meeting, Participation, Invitation, Comment \n\n\ntom = User.objects.create(username='Tom')\njerry = User.objects.create(username='Jerry')\nmeeting = Meeting.objects.create(title='dinner')\ntom_participation = Participation.objects.create(user_id=tom.id, meeting_id=meeting.id)\njerry_participation = Participation.objects.create(user_id=jerry.id, meeting_id=meeting.id)\nInvitation.objects.create(user_id=jerry.id, meeting_id=meeting.id)\nComment.objects.create(user_id=jerry.id, meeting_id=meeting.id)\n\n\nconfig = {\n    'participations': {\n        'invitations': {}\n    }\n}\n\nmeeting = Meeting.objects.last()\ntree = ConfigurableRelationTree(root=instance, structure=config)\npprint(tree.tree)\n```\n\n```python\n# Output:\n{\n    <TreeNode for Meeting: Meeting object (1)>: {\n        <ManyToOneRel: meetings.participation>: {\n            <TreeNode for Participation: Participation object (1)>: {\n                <ManyToOneRel: meetings.invitation>: {\n                    <TreeNode for Invitation: Invitation object (1)>: {}\n                }\n            },\n            <TreeNode for Participation: Participation object (2)>: {\n                <ManyToOneRel: meetings.invitation>: {}\n            }\n        }\n    }\n}\n```\n\nFor provided config tree will build himself only with `participations` and `invitations` relations and will ignore any other relations.\n\n### Tree iterator\n\n```python\nfrom relations_iterator import RelationTreeIterator\n```\n\nIterates over provided tree and yieds nodes one by one\n\nFor example above it will look like\n\n```python\npprint(list(node for node in RelationTreeIterator(tree)))\n```\n\n```python\n# Output\n[<TreeNode for Meeting: Meeting object (1)>,\n <TreeNode for Participation: Participation object (1)>,\n <TreeNode for Invitation: Invitation object (1)>,\n <TreeNode for Participation: Participation object (2)>]\n```\n\n### Abstract Visitor iterator\n\n```python\nfrom relations_iterator import AbstractVisitor\n```\n\nProvides abstract class, with interface to implement visitor pattern. You must implement `.visit(node)` method, to complete implementation\n\n#### Examples:\n#### Clone visitor\n\n```python\nfrom relations_iterator import TreeNode\n\n\nclass CloneVisitor(AbstractVisitor):\n    def visit(self, node: TreeNode):\n        node.instance.pk = None\n        if node.parent is not None:\n            parent_joining_column, instance_joining_column = node.relation.get_joining_columns()[0]\n            setattr(\n                node.instance,\n                instance_joining_column,\n                getattr(node.parent.instance, parent_joining_column)\n            )\n        node.instance.save()\n\n```\n\nClone visitor will clone every instance in hierarchy and set proper parent, so it can be used to implement instance hierarchy clone\n\n```python\nCLONE_STRUCTURE = {\n    'participations': {\n        'invitations': {}\n    }\n}\n\ndef clone(instance, config):\n    visitor = CloneVisitor()\n    tree = ConfigurableRelationTree(root=instance, structure=config)\n    for node in RelationTreeIterator(tree=tree):\n        visitor.visit(node)\n\nclone(meeting, CLONE_STRUCTURE)\n\ncloned_meeting = Meeting.objects.last()\ntree = ConfigurableRelationTree(root=cloned_meeting, structure=CLONE_STRUCTURE)\npprint(tree.tree)\n```\n\n```python\n# Output\n{\n    <TreeNode for Meeting: Meeting object (2)>: {\n        <ManyToOneRel: meetings.participation>: {\n            <TreeNode for Participation: Participation object (3)>: {\n                <ManyToOneRel: meetings.invitation>: {\n                    <TreeNode for Invitation: Invitation object (2)>: {}\n                }\n            },\n            <TreeNode for Participation: Participation object (3)>: {\n                <ManyToOneRel: meetings.invitation>: {}\n            }\n        }\n    }\n}\n```\n\n#### Path print visitor\n\nPath print visitor will print all parent nodes from root to curent node\n\n```python\nclass PathPrintVisitor(AbstractVisitor):\n    def visit(self, node: TreeNode):\n        print(list(reversed(self.get_path(node))))\n\n    def get_path(self, node: TreeNode):\n        path = [node]\n        if node.parent:\n            path.extend(self.get_path(node.parent))\n        return path\n\nvisitor = PathPrintVisitor()\nfor node in RelationTreeIterator(tree):\n    visitor.visit(node)\n```\n\n```python\n# Output\n[<TreeNode for Meeting: Meeting object (2)>]\n[<TreeNode for Meeting: Meeting object (2)>, <TreeNode for Participation: Participation object (3)>]\n[<TreeNode for Meeting: Meeting object (2)>, <TreeNode for Participation: Participation object (3)>, <TreeNode for Invitation: Invitation object (2)>]\n[<TreeNode for Meeting: Meeting object (2)>, <TreeNode for Participation: Participation object (4)>]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/regqueryvalueex/django-relations-iterator",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-relations-iterator",
    "package_url": "https://pypi.org/project/django-relations-iterator/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-relations-iterator/",
    "project_urls": {
      "Bug Tracker": "https://github.com/regqueryvalueex/django-relations-iterator/issues",
      "Homepage": "https://github.com/regqueryvalueex/django-relations-iterator"
    },
    "release_url": "https://pypi.org/project/django-relations-iterator/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Tool to iterate over django relation tree",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11723907,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9636992f5f19846c3f92ad6aebdb4a8ddf847650940b4604643d5912951fc070",
          "md5": "26754a6ef6cb1aa00595dc7e5427354c",
          "sha256": "fa75e12ed97551b77be080c41f8746ac7eed20cd215b2ae2f6ed3a93dc04fae9"
        },
        "downloads": -1,
        "filename": "django_relations_iterator-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26754a6ef6cb1aa00595dc7e5427354c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4227,
        "upload_time": "2021-10-14T10:58:00",
        "upload_time_iso_8601": "2021-10-14T10:58:00.168900Z",
        "url": "https://files.pythonhosted.org/packages/96/36/992f5f19846c3f92ad6aebdb4a8ddf847650940b4604643d5912951fc070/django_relations_iterator-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e46a2b0caadb8257474caccb0c244853fe6f1453e71ff849d0a92ca53ca3bfcf",
          "md5": "5015cd6fdc5e5ed2040da99fc845e813",
          "sha256": "e65fb75fda8142706ab6097e7022e7a4f8e23ee3a1af030b96f449d8678af9c4"
        },
        "downloads": -1,
        "filename": "django-relations-iterator-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5015cd6fdc5e5ed2040da99fc845e813",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3178,
        "upload_time": "2021-10-14T10:58:02",
        "upload_time_iso_8601": "2021-10-14T10:58:02.949074Z",
        "url": "https://files.pythonhosted.org/packages/e4/6a/2b0caadb8257474caccb0c244853fe6f1453e71ff849d0a92ca53ca3bfcf/django-relations-iterator-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c54cf4b386a22b902a5a409acbd28a64eb14645bde5fe3b78f2ebd937db4f55a",
          "md5": "4482f0d11e906f1d294d617f30ad9d40",
          "sha256": "56a7c26af043b73ad87082a1ff81776da0eef813087baa0338d162dec0112747"
        },
        "downloads": -1,
        "filename": "django_relations_iterator-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4482f0d11e906f1d294d617f30ad9d40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5176,
        "upload_time": "2021-10-14T11:00:19",
        "upload_time_iso_8601": "2021-10-14T11:00:19.332887Z",
        "url": "https://files.pythonhosted.org/packages/c5/4c/f4b386a22b902a5a409acbd28a64eb14645bde5fe3b78f2ebd937db4f55a/django_relations_iterator-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78e88424623a593c0aecaa3a7838d533528e8ef1ae36490ee5c6f7ffc6772f12",
          "md5": "a565a50bf0709f3c7abb96c1b9a0cbd7",
          "sha256": "9fc300c8e4a1fd986d35a77bcf25c84e75540b8ef83e6c75c75d6d751b2c96d5"
        },
        "downloads": -1,
        "filename": "django-relations-iterator-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a565a50bf0709f3c7abb96c1b9a0cbd7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4088,
        "upload_time": "2021-10-14T11:00:21",
        "upload_time_iso_8601": "2021-10-14T11:00:21.593078Z",
        "url": "https://files.pythonhosted.org/packages/78/e8/8424623a593c0aecaa3a7838d533528e8ef1ae36490ee5c6f7ffc6772f12/django-relations-iterator-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c84f25510a9e6b39ef8885588167691f00b6e1ee9ea47181b5d486c1d566f0a",
          "md5": "66b68d2fe6b029b4f0757aa5c85e404f",
          "sha256": "3460cfcaeb6556dbf882546554c3811d6c31f7c6410959f9229785ddcf040930"
        },
        "downloads": -1,
        "filename": "django_relations_iterator-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66b68d2fe6b029b4f0757aa5c85e404f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5160,
        "upload_time": "2021-10-14T11:08:56",
        "upload_time_iso_8601": "2021-10-14T11:08:56.044947Z",
        "url": "https://files.pythonhosted.org/packages/2c/84/f25510a9e6b39ef8885588167691f00b6e1ee9ea47181b5d486c1d566f0a/django_relations_iterator-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "547c6ebb23f824435e5c00b056ad7191889d05c001bed28c50fa1511aac8d666",
          "md5": "f9d212adbc5f1bdc26d35782803fb73b",
          "sha256": "59b02524216c392711b15ef285e9cc38f9b67c3ff7c9538f5e09b92c1b7cd835"
        },
        "downloads": -1,
        "filename": "django-relations-iterator-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f9d212adbc5f1bdc26d35782803fb73b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4083,
        "upload_time": "2021-10-14T11:08:57",
        "upload_time_iso_8601": "2021-10-14T11:08:57.853705Z",
        "url": "https://files.pythonhosted.org/packages/54/7c/6ebb23f824435e5c00b056ad7191889d05c001bed28c50fa1511aac8d666/django-relations-iterator-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fc7a27b8dd0474b8e5a6f16b59649797f2fcac7cb933f36ac80ff68dd445686",
          "md5": "fe90da2d11b94eced0d66f635f4f395d",
          "sha256": "3f4bb357f879eb29b49c137e0e9de40dd153d92095d31f4f564d30cf2c9e318d"
        },
        "downloads": -1,
        "filename": "django_relations_iterator-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe90da2d11b94eced0d66f635f4f395d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6015,
        "upload_time": "2021-10-14T12:08:21",
        "upload_time_iso_8601": "2021-10-14T12:08:21.380882Z",
        "url": "https://files.pythonhosted.org/packages/9f/c7/a27b8dd0474b8e5a6f16b59649797f2fcac7cb933f36ac80ff68dd445686/django_relations_iterator-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "579c3ba202ab0d30aedfb4b5237e959ccaeb60972a2bb13c32f027b7723361af",
          "md5": "e25fd52f5a5ff3d4f123ba21d3949b24",
          "sha256": "53441ae513d44527e4c757bc1b28fe1fe1466000cadafa5fd3458ed4da401ca1"
        },
        "downloads": -1,
        "filename": "django-relations-iterator-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e25fd52f5a5ff3d4f123ba21d3949b24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5055,
        "upload_time": "2021-10-14T12:08:24",
        "upload_time_iso_8601": "2021-10-14T12:08:24.901240Z",
        "url": "https://files.pythonhosted.org/packages/57/9c/3ba202ab0d30aedfb4b5237e959ccaeb60972a2bb13c32f027b7723361af/django-relations-iterator-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9fc7a27b8dd0474b8e5a6f16b59649797f2fcac7cb933f36ac80ff68dd445686",
        "md5": "fe90da2d11b94eced0d66f635f4f395d",
        "sha256": "3f4bb357f879eb29b49c137e0e9de40dd153d92095d31f4f564d30cf2c9e318d"
      },
      "downloads": -1,
      "filename": "django_relations_iterator-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe90da2d11b94eced0d66f635f4f395d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6015,
      "upload_time": "2021-10-14T12:08:21",
      "upload_time_iso_8601": "2021-10-14T12:08:21.380882Z",
      "url": "https://files.pythonhosted.org/packages/9f/c7/a27b8dd0474b8e5a6f16b59649797f2fcac7cb933f36ac80ff68dd445686/django_relations_iterator-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "579c3ba202ab0d30aedfb4b5237e959ccaeb60972a2bb13c32f027b7723361af",
        "md5": "e25fd52f5a5ff3d4f123ba21d3949b24",
        "sha256": "53441ae513d44527e4c757bc1b28fe1fe1466000cadafa5fd3458ed4da401ca1"
      },
      "downloads": -1,
      "filename": "django-relations-iterator-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "e25fd52f5a5ff3d4f123ba21d3949b24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5055,
      "upload_time": "2021-10-14T12:08:24",
      "upload_time_iso_8601": "2021-10-14T12:08:24.901240Z",
      "url": "https://files.pythonhosted.org/packages/57/9c/3ba202ab0d30aedfb4b5237e959ccaeb60972a2bb13c32f027b7723361af/django-relations-iterator-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}