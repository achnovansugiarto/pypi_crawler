{
  "info": {
    "author": "_ThaaoBlues_",
    "author_email": "thaaoblues81@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n# QSYNC\n\n## introduction\n> sync_module is the simplest way to set-up a one/two ways syncronisations between folders and even between two distinct devices, from a single python script ! just use it like so :\n\n```python\nfrom qsync import SyncIniter\nfrom sys import argv\nfrom multiprocessing import freeze_support\nimport argparse\nfrom qsync import server\n\n\ndef main():\n\n    # nothing usefull, just parsing command line args\n\n    parser = argparse.ArgumentParser(description=\"\")\n\n    parser.add_argument('sync_src', type=str,\n                        help='sync source directory')\n\n    parser.add_argument('sync_dst', type=str,\n                        help='sync destination directory')\n\n    parser.add_argument('-bd', action='store_true',\n                        help='bi directionnal mode')\n\n    parser.add_argument('--force-id', type=str,\n                        help='force a specific id associated to the sync process (necessary to acces via http)')\n\n    parser.add_argument('--remote', type=str,\n                        help='open sync server, specify destination ip')\n\n    parser.add_argument('--loop-time', type=float,\n                        help='adjust the time between two sync (each use has it\\'s own optimal inter-loop time to avoid sync errors'))\n\n    args = parser.parse_args()\n\n    sync_src = args.sync_src.replace(\"\\\\\", \"/\")\n    sync_dst = args.sync_dst.replace(\"\\\\\", \"/\")\n    bi_d = args.bd\n    if args.remote:\n        remote_ip = args.remote\n        remote = True\n    else:\n        remote_ip = \"\"\n        remote = False\n\n    force_id = args.force_id\n    loop_time = args.loop_time\n\n    # sync_src and sync_dst must be two strings containing two path\n    # bi_directionnal is an optionnal boolean, default set to False\n    # remote is an optionnal boolean, set to True if the sync_dst path is on a remote location\n    # force_id let you specify the sync id, usefull in case of remote and/or want to keep a sync state after shutdown\n    # loop_time let you adjust the time between two sync (each use has it\\'s own optimal inter-loop time to avoid sync errors)\n    s = SyncIniter(sync_src, sync_dst, bi_directionnal=bi_d,\n                   remote=remote, force_id=force_id, remote_ip=remote_ip,loop_time=loop_time)\n     \n    s.start_sync()\n    print(f\"started to sync, bi directionnal mode : {bi_d}, remote: {remote}\")\n\n    print(f\"\\n\\nSYNC ID :\\n{s.sync_id}\\n\\n\")\n\n    # start the server if the other side is on a remote machine if not already running\n    if remote:\n        try:\n            get(\"https://127.0.0.1:2121/is_running\", timeout=1, verify=False)\n        except TimeoutError:\n            server.app.run(host=\"0.0.0.0\", port=2121, ssl_context='adhoc')\n\n\nif __name__ == \"__main__\":\n\n    freeze_support()\n\n    main()\n\n\n    \n```\n\n## A cli is also available with this module :\n\n```\nusage: __main__.py [-h] [-bd] [--force-id FORCE_ID] [--remote REMOTE] [--loop-time LOOP_TIME]\n                   sync_src sync_dst\n\npositional arguments:\n  sync_src              sync source directory\n  sync_dst              sync destination directory\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -bd                   bi directionnal mode\n  --force-id FORCE_ID   force a specific id associated to the sync process (necessary to acces via\n                        http)\n  --remote REMOTE       open sync server, specify destination ip\n  --loop-time LOOP_TIME\n                        adjust the time between two sync (each use has it's own optimal inter-loop\n                        time to avoid sync errors)\n```\n(remote sync does not need to be in real time, each device will store changes and wait the other when they can't connect to each other)\n\n### Example :\n\n```\nC:\\> python -m qsync \"D:\\test_src\" \"C:\\Users\\USER\\Documents\\test_dst\" -bd --remote \"192.168.0.64\" --force-id \"0x1bfdc4f5e421fe563476d2441980349d79c32ccae555134b3eb7a4b62f68f1e66aa574f933289edbc6043b25977b69f2c921961fd60596e4281464fc84f76d3c16df24db5c15fcf98ab071aaf6711da44efcc0024f37a0213b98e42739eb5398cf760a307149cfb58dfa5a\" --loop-time 10\n```\n\n\n## Errors :\n\n#### InvalidPathError\n> raised in start_sync() when a path don't exists\n\n\n\n## how qsync server works in a remote context :\n(Sync does not need to be in real time, each device will store changes and wait the other when they can't connect to each other)\n#### Specifications :\n- The qsync sync server is an http server, to encrypt data it uses on-the-fly certificates.\n- Because of these certificates, you must force whatever client you use to not verify certificates.\nfor example, qsync uses ```requests.get(< args >,verify=False)```. \n- This server enable a great range of uses of qsync, from mobile-to-pc folders sync at multiple-pc sync.\n- the sync id is an hexadecimal representation of a 256 digits lenght number and must be present on any http requests, so the two sync ends must share this id. Once you got this id, to start the other sync process you need to use --force-id FORCE_ID optionnal argument. Or place it in your script as optionnal argument into the SyncIniter class : ``SyncIniter(< args >, remote=True, force_id=force_id, remote_ip=remote_ip)`` \n\n#### How does it make its things to syncronize :\n\n\n- The main infinite loop make two requests :\n  - \"https://{self.sRemoteIP}:2121/remote_map\" to try to syncronize the folders map between two devices\n  - \"https://{self.sRemoteIP}:2121/sync_map\" to try to ask the other device what's new, trigger multiple requests from the other device\n\n\n- The server has 7 URLs :\n    - ``/is_running``, to check if the server is already running\n    - ``/sync_map?sync_id=...``, to trigger many requests that will make pending changes on your filesystem\n    - ``/remote_map?sync_id=...``, return a JSON response containing the current filesystem map\n    - ``/get_file?sync_id=...&full_path=...``, make you download a specific file. Full_path is the full path to get the file from the other side's filesystem (server side).\n    - ``/upload_file?sync_id=...&full_path=...``, POST only. Upload a specific file. Full_path is thefull path to upload the file from the other side's filesystem (server side).\n    - ``/remove?sync_id=...&full_path=...``, Suppress something. File or folder (server side).\n    - ``/mkdir?sync_id=...&full_path=...``, Create a folder (server side). Full_path is the full path to create the folder from the other side's filesystem (server side).\n\n### The server make sure each request don't tries to download/modify... things outside the root folder of your sync. If anything wrong is made, an explicit error message will be return as response. Each uploaded file's name is also checked. \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ThaaoBlues/qsync",
    "keywords": "",
    "license": "CC BY-NC-ND 4.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qsync",
    "package_url": "https://pypi.org/project/qsync/",
    "platform": "",
    "project_url": "https://pypi.org/project/qsync/",
    "project_urls": {
      "Homepage": "https://github.com/ThaaoBlues/qsync"
    },
    "release_url": "https://pypi.org/project/qsync/0.1.8/",
    "requires_dist": [
      "flask",
      "pyopenssl",
      "requests"
    ],
    "requires_python": ">=3.6.0",
    "summary": "The simplest one/two ways local/remote sync module in python.",
    "version": "0.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12078822,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "207fdabe3ba4635d1b5b0fa1c28905ee0bb747b5ee812ae3a288b1e9d4b6a975",
          "md5": "a08c898504bf703a08794d758e84a035",
          "sha256": "bc06887567691ecf8912e3be469bd1e0569e6851f1b824aa23b8d6a72a83aace"
        },
        "downloads": -1,
        "filename": "qsync-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a08c898504bf703a08794d758e84a035",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 4853,
        "upload_time": "2021-10-03T16:36:55",
        "upload_time_iso_8601": "2021-10-03T16:36:55.883677Z",
        "url": "https://files.pythonhosted.org/packages/20/7f/dabe3ba4635d1b5b0fa1c28905ee0bb747b5ee812ae3a288b1e9d4b6a975/qsync-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddcc59d091482270a7daea6a2ef82aeb3916d8b133b40d74eb10f9750f3d4cfe",
          "md5": "f2c404bd7af74c84d028269846571785",
          "sha256": "6eb6bc4daf04e4d6053d88a3f4596dbfa012b299ad42f179db444b1f73c33b67"
        },
        "downloads": -1,
        "filename": "qsync-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f2c404bd7af74c84d028269846571785",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 5078,
        "upload_time": "2021-10-03T16:36:58",
        "upload_time_iso_8601": "2021-10-03T16:36:58.682589Z",
        "url": "https://files.pythonhosted.org/packages/dd/cc/59d091482270a7daea6a2ef82aeb3916d8b133b40d74eb10f9750f3d4cfe/qsync-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "363aba61ff5aa4a051c658775fd061a252ae99bb3e54d04634edaa64b6a4b7cc",
          "md5": "671a1d81df4f2c22d3366d179b915f86",
          "sha256": "50b140aa9021838fc608498574eca2e196623332eca486b613ae301032f2d3fb"
        },
        "downloads": -1,
        "filename": "qsync-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "671a1d81df4f2c22d3366d179b915f86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 11007,
        "upload_time": "2021-11-20T17:28:21",
        "upload_time_iso_8601": "2021-11-20T17:28:21.451970Z",
        "url": "https://files.pythonhosted.org/packages/36/3a/ba61ff5aa4a051c658775fd061a252ae99bb3e54d04634edaa64b6a4b7cc/qsync-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a3ce499226bb89c11c0fb258e63ed048ab4d7e84c9a8b1f07427eb292f85f43",
          "md5": "b583ffaedc4a6853a26715e1d2cf3ad5",
          "sha256": "eed56b8836e5c53d09217a811c165de8c4c548ee82a316d042bb03c514b66aff"
        },
        "downloads": -1,
        "filename": "qsync-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "b583ffaedc4a6853a26715e1d2cf3ad5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 11936,
        "upload_time": "2021-11-20T17:28:23",
        "upload_time_iso_8601": "2021-11-20T17:28:23.568805Z",
        "url": "https://files.pythonhosted.org/packages/7a/3c/e499226bb89c11c0fb258e63ed048ab4d7e84c9a8b1f07427eb292f85f43/qsync-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "363aba61ff5aa4a051c658775fd061a252ae99bb3e54d04634edaa64b6a4b7cc",
        "md5": "671a1d81df4f2c22d3366d179b915f86",
        "sha256": "50b140aa9021838fc608498574eca2e196623332eca486b613ae301032f2d3fb"
      },
      "downloads": -1,
      "filename": "qsync-0.1.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "671a1d81df4f2c22d3366d179b915f86",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 11007,
      "upload_time": "2021-11-20T17:28:21",
      "upload_time_iso_8601": "2021-11-20T17:28:21.451970Z",
      "url": "https://files.pythonhosted.org/packages/36/3a/ba61ff5aa4a051c658775fd061a252ae99bb3e54d04634edaa64b6a4b7cc/qsync-0.1.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a3ce499226bb89c11c0fb258e63ed048ab4d7e84c9a8b1f07427eb292f85f43",
        "md5": "b583ffaedc4a6853a26715e1d2cf3ad5",
        "sha256": "eed56b8836e5c53d09217a811c165de8c4c548ee82a316d042bb03c514b66aff"
      },
      "downloads": -1,
      "filename": "qsync-0.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "b583ffaedc4a6853a26715e1d2cf3ad5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 11936,
      "upload_time": "2021-11-20T17:28:23",
      "upload_time_iso_8601": "2021-11-20T17:28:23.568805Z",
      "url": "https://files.pythonhosted.org/packages/7a/3c/e499226bb89c11c0fb258e63ed048ab4d7e84c9a8b1f07427eb292f85f43/qsync-0.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}