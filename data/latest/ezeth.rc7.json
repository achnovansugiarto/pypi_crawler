{
  "info": {
    "author": "Ahmad Fahadh Ilyas",
    "author_email": "fahadhilyas4@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Utilities"
    ],
    "description": "Simple Ethereum Client\r\n======================\r\n\r\nThis repository is a python client to access ethereum network.\r\n\r\nRequirements\r\n------------\r\n\r\n-  `Web3.py <https://web3py.readthedocs.io/en/stable/index.html>`__\r\n-  `py-solc-x <https://solcx.readthedocs.io/en/latest/>`__\r\n\r\nUsage\r\n-----\r\n\r\n-  `Instantiate client <#instantiate-client>`__\r\n-  `Check connection <#check-connection>`__\r\n-  `Connect to new node <#connect-to-new-node>`__\r\n-  `Create new ethereum account <#create-new-ethereum-account>`__\r\n-  `Get account instance <#get-account-instance>`__\r\n-  `Get account properties <#get-account-properties>`__\r\n-  `Change account password <#change-account-password>`__\r\n-  `Transfer balance to another\r\n   account <#transfer-balance-to-another-account>`__\r\n-  `Compile smart contract <#compile-smart-contract>`__\r\n-  `Deploy smart contract <#deploy-smart-contract>`__\r\n-  `Get contract <#get-contract>`__\r\n-  `Modify contract's storage <#modify-contracts-storage>`__\r\n-  `Parse contract event log <#parse-contract-event-log>`__\r\n-  `Call contract <#call-contract>`__\r\n-  `Cancel transaction <#cancel-transaction>`__\r\n-  `Get blockchain data <#get-blockchain-data>`__\r\n\r\nInstantiate client\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nInitialize the client\r\n\r\n.. code:: python\r\n\r\n   from ezeth import ETHClient\r\n\r\n   node_host = 'localhost'\r\n   node_port = 8545\r\n   node_connection_type = 'http'\r\n   node_consensus = 'PoW'\r\n\r\n   client = ETHClient(\r\n       node_host=node_host,\r\n       node_port=node_port,\r\n       node_connection_type=node_connection_type,\r\n       node_consensus=node_consensus\r\n   )\r\n\r\nCheck connection\r\n~~~~~~~~~~~~~~~~\r\n\r\n.. code:: python\r\n\r\n   print(client.isConnected)\r\n   # True\r\n\r\nConnect to new node\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\n.. code:: python\r\n\r\n   node_host = 'localhost'\r\n   node_port = 8546\r\n   node_connection_type = 'http'\r\n   node_consensus = 'PoW'\r\n\r\n   client.connect(\r\n       node_host=node_host,\r\n       node_port=node_port,\r\n       node_connection_type=node_connection_type,\r\n       node_consensus=node_consensus\r\n   )\r\n\r\nCreate new ethereum account\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe returned object is dictionary with 2 keys,\r\n\r\n-  ``\"account\"``, contains the instance of ``LocalAccount``\r\n-  ``\"encrypted_key\"``, contains the dictionary that contains address\r\n   and private key of the account encrypted with password input from the\r\n   parameter\r\n\r\n.. code:: python\r\n\r\n   import json\r\n   from eth_account.signers.local import LocalAccount\r\n\r\n   password = 'pass123'\r\n\r\n   new_account = client.create_account(password)\r\n\r\n   print(isinstance(new_account, LocalAccount))\r\n   # True\r\n\r\n   with open('account_data.json', 'w') as f:\r\n       json.dump(new_account['encrypted_key'], f)\r\n\r\nGet account instance\r\n~~~~~~~~~~~~~~~~~~~~\r\n\r\nTo get account instance from encrypted private key, use this method\r\n\r\n.. code:: python\r\n\r\n   import json\r\n   from eth_account.signers.local import LocalAccount\r\n\r\n   password = 'pass123'\r\n\r\n   with open('account_data.json') as f:\r\n       encrypted_key = json.load(f)\r\n\r\n   account = client.get_account(\r\n       password,\r\n       encrypted_key\r\n   )\r\n\r\n   print(isinstance(account, LocalAccount))\r\n   # True\r\n\r\nTo get account instance from private key, use this method\r\n\r\n.. code:: python\r\n\r\n   # don't use this private key in development\r\n   private_key = '0xd69ff3bd9e6a4455c13974be6ac741996c94eedf9725ad3c7fbccb833d3fae79'\r\n\r\n   account = client.get_account_from_key(private_key)\r\n\r\n   print(isinstance(account, LocalAccount))\r\n   # True\r\n\r\nGet account properties\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe returned object is dictionary with 3 keys,\r\n\r\n-  ``\"address\"``, the address of the account\r\n-  ``\"balance\"``, the balance of the account at current network\r\n-  ``\"nonce\"``, the current nonce (number of transactions) of the\r\n   account at current network\r\n\r\n.. code:: python\r\n\r\n   account_address = account.address\r\n\r\n   account_properties = client.get_account_properties(account_address)\r\n\r\n   print(account_properties)\r\n   # {'address': '0xf3cCa25419069bcd6B94bE3876Ac3400070E4796', 'balance': 0, 'nonce': 0}\r\n\r\nChange account password\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nTo change password of the encrypted private key, use this method\r\n\r\n.. code:: python\r\n\r\n   import json\r\n\r\n   old_password = 'pass123'\r\n   new_password = 'newpasss123'\r\n\r\n   with open('account_data.json') as f:\r\n       encrypted_key = json.load(f)\r\n\r\n   new_encrypted_key = client.change_account_password(\r\n       old_password,\r\n       new_password,\r\n       encrypted_key\r\n   )\r\n\r\n   with open('new_account_data.json', 'w') as f:\r\n       json.dump(new_encrypted_key, f)\r\n\r\nTransfer balance to another account\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n.. code:: python\r\n\r\n   receiver_address = '0xf3cCa25419069bcd6B94bE3876Ac3400070E4796'\r\n   value = 10\r\n   message = 'here is the money'\r\n\r\n   transaction = client.transfer(\r\n       receiver_address,\r\n       value,\r\n       message,\r\n       account=account\r\n   )\r\n\r\nTo estimate the cost to transfer, use this\r\n\r\n.. code:: python\r\n\r\n   cost = client.estimate_transfer_price(\r\n       value,\r\n       message\r\n   )\r\n\r\n   print(cost)\r\n   # {'cost': 664680000000000, 'value': 10, 'total': 664680000000010}\r\n\r\nCompile smart contract\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe returned object is dictionary with keys in format\r\n``<filename>:<contractname>`` (ex. ``\"Storage.sol:Storage\"``) and the\r\nvalue is dictionary with 2 keys,\r\n\r\n-  ``\"abi\"``, contains ABI of the contract\r\n-  ``\"bin\"``, contains bytecode of the contract\r\n\r\n.. code:: python\r\n\r\n   solc_version = '0.8.11'\r\n   sol_file = 'Storage.sol'\r\n\r\n   compiled_contract = client.compile_contract(\r\n       sol_file,\r\n       solc_version\r\n   )\r\n\r\nHere is example of contract\r\n\r\n.. code:: solidity\r\n\r\n   // SPDX-License-Identifier: GPL-3.0\r\n\r\n   // Storage.sol\r\n\r\n   pragma solidity >=0.4.16 <0.9.0;\r\n\r\n   contract Storage {\r\n       uint storedData;\r\n\r\n       event ValueModified(\r\n           uint oldValue,\r\n           uint newValue\r\n       );\r\n\r\n       constructor(uint initValue) {\r\n           storedData = initValue;\r\n       }\r\n\r\n       function set(uint newValue) public {\r\n           emit ValueModified(storedData, newValue);\r\n           storedData = newValue;\r\n       }\r\n\r\n       function get() public view returns (uint) {\r\n           return storedData;\r\n       }\r\n   }\r\n\r\nDeploy smart contract\r\n~~~~~~~~~~~~~~~~~~~~~\r\n\r\n.. code:: python\r\n\r\n   storage_contract = compiled_contract['Storage.sol:Storage']\r\n   contract_bytecode = storage_contract['bin']\r\n   contract_abi = storage_contract['abi']\r\n\r\n   # for contract constructor\r\n   init_value = 10\r\n\r\n   deployed_contract_data = client.deploy_contract(\r\n       contract_bytecode,\r\n       contract_abi,\r\n       account=account,\r\n       initValue=init_value\r\n   )\r\n\r\nTo estimate the cost to deploy smart contract, use this\r\n\r\n.. code:: python\r\n\r\n   cost = client.estimate_deploy_contract_price(\r\n       contract_bytecode,\r\n       contract_abi,\r\n       account_address=account.address,\r\n       initValue=init_value\r\n   )\r\n\r\n   print(cost)\r\n   # {'cost': 5166480000000000, 'value': 0, 'total': 5166480000000000}\r\n\r\n..\r\n\r\n   The account which deployed the smart contract must have a sufficient\r\n   balance to estimate the cost if the constructor is payable method.\r\n\r\nGet contract\r\n~~~~~~~~~~~~\r\n\r\nTo get the deployed smart contract address, use this\r\n\r\n.. code:: python\r\n\r\n   transaction_hash = deployed_contract_data['transaction_hash']\r\n\r\n   contract_address = client.get_contract_address(transaction_hash)\r\n\r\n   print(contract_address)\r\n   # 0x7c0ce101E6712DD4E447CE2af81AAD5f8fbF34D0\r\n\r\nTo get the instance of the deployed smart contract, use this\r\n\r\n.. code:: python\r\n\r\n   contract = client.get_contract(\r\n       contract_address,\r\n       contract_abi\r\n   )\r\n\r\nModify contract's storage\r\n~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nTo modify contract storage by contract method, use this\r\n\r\n.. code:: python\r\n\r\n   contract_method = 'set'\r\n   new_value = 13\r\n\r\n   transaction = client.contract_method(\r\n       contract_method,\r\n       contract=contract,\r\n       account=account,\r\n       newValue=new_value\r\n   )\r\n\r\nTo test contract method locally without sending transaction to network, use this\r\n\r\n.. code:: python\r\n\r\n   # will raise exception if something wrong, else return True\r\n   client.contract_method_test(\r\n      contract_method,\r\n      contract=contract,\r\n      account_address=account.address,\r\n      newValue=new_value\r\n   )\r\n\r\nTo estimate the cost, use this\r\n\r\n.. code:: python\r\n\r\n   cost = client.estimate_contract_method_price(\r\n       contract_method,\r\n       contract=contract,\r\n       account_address=account.address,\r\n       newValue=new_value\r\n   )\r\n\r\n   print(cost)\r\n   # {'cost': 811560000000000, 'value': 0, 'total': 811560000000000}\r\n\r\n..\r\n\r\n   The account which modify the smart contract's storage must have a\r\n   sufficient balance to estimate the cost if the method is payable\r\n   method.\r\n\r\nParse contract event log\r\n~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nTo parse event log that is emitted from modified smart contract, use\r\nthis\r\n\r\n.. code:: python\r\n\r\n   event_name = 'ValueModified'\r\n   transaction_hash = transaction['hash']\r\n\r\n   event_log = client.parse_contract_event_log(\r\n       event_name,\r\n       transaction_hash,\r\n       contract=contract\r\n   )\r\n\r\nCall contract\r\n~~~~~~~~~~~~~\r\n\r\nTo call contract's ``pure`` and ``view`` methods, use this\r\n\r\n.. code:: python\r\n\r\n   contract_method = 'get'\r\n\r\n   currentValue = client.contract_call(\r\n       contract_method,\r\n       contract=contract\r\n   )\r\n\r\n   print(currentValue)\r\n   # 13\r\n\r\nCancel transaction\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nTo cancel any transaction from account, use this\r\n\r\n.. code:: python\r\n\r\n   transaction_hash = transaction['hash']\r\n\r\n   new_transaction = client.cancel_transaction(\r\n       transaction_hash,\r\n       account=account\r\n   )\r\n\r\nTo estimate the cost, use this\r\n\r\n.. code:: python\r\n\r\n   cost = client.estimate_cancel_transaction_price(\r\n       transaction_hash\r\n   )\r\n\r\n   print(cost)\r\n   # {'cost': 811590000000000, 'value': 0, 'total': 811590000000000}\r\n\r\n..\r\n\r\n   Transaction that already verified or mined can't be canceled. The way\r\n   the transaction canceled is by sending new empty transaction with the\r\n   same nonce but higher gas price so the empty transaction will be\r\n   mined and the old one will be discarded.\r\n\r\nGet blockchain data\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nTo get detailed transaction from transaction hash, use this\r\n\r\n.. code:: python\r\n\r\n   transaction = client.get_transaction(transaction_hash)\r\n\r\nTo get transaction receipt (the prove that transaction is verified or\r\nmined), use this\r\n\r\n.. code:: python\r\n\r\n   receipt = client.get_transaction_receipt(transaction_hash)\r\n\r\nTo get detailed block, use this\r\n\r\n.. code:: python\r\n\r\n   block = client.get_block('latest')\r\n\r\n\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fahadh4ilyas/Simple-Ethereum-Client.git",
    "keywords": "ethereum,web3,solidity",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ezeth",
    "package_url": "https://pypi.org/project/ezeth/",
    "platform": null,
    "project_url": "https://pypi.org/project/ezeth/",
    "project_urls": {
      "Homepage": "https://github.com/fahadh4ilyas/Simple-Ethereum-Client.git"
    },
    "release_url": "https://pypi.org/project/ezeth/1.3.1/",
    "requires_dist": null,
    "requires_python": ">=3.7,<3.11",
    "summary": "simple python client to access ethereum network",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17268421,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "196bcf1d97bdf7afeeaec2860537e955d72045ef7195c6d8c72ebedd2f4a2199",
          "md5": "2a251c54da22f11b20f142f4aae14e09",
          "sha256": "c1b26659001b3aadb584d1509961a3ef82bbbc2b1f881ad35dc8ecb5fab31a18"
        },
        "downloads": -1,
        "filename": "ezeth-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2a251c54da22f11b20f142f4aae14e09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 13726,
        "upload_time": "2022-04-01T08:08:22",
        "upload_time_iso_8601": "2022-04-01T08:08:22.984615Z",
        "url": "https://files.pythonhosted.org/packages/19/6b/cf1d97bdf7afeeaec2860537e955d72045ef7195c6d8c72ebedd2f4a2199/ezeth-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12f50e6027e246532085be4f7113f3ebbce8b2fde848c95c8ee48e83216d534a",
          "md5": "5c4d5a6e8fd3b9e836916dd9d4bd6880",
          "sha256": "7a0dbf4b8ae064b047119aae0465b32aa00a2b1f76df5b8531cc73aecfb3d63d"
        },
        "downloads": -1,
        "filename": "ezeth-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c4d5a6e8fd3b9e836916dd9d4bd6880",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 13696,
        "upload_time": "2022-04-05T06:09:57",
        "upload_time_iso_8601": "2022-04-05T06:09:57.435721Z",
        "url": "https://files.pythonhosted.org/packages/12/f5/0e6027e246532085be4f7113f3ebbce8b2fde848c95c8ee48e83216d534a/ezeth-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "806eadbdc0d620abf10c9bfca11337ab46cd4409cffa50b6566187cece9036dd",
          "md5": "5abdf047b659dbd89de2bad56f383d9a",
          "sha256": "d5189523860726758ef59f5109f70765b3adba6473c3e51658e3801e77ed48da"
        },
        "downloads": -1,
        "filename": "ezeth-1.1.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "5abdf047b659dbd89de2bad56f383d9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 13711,
        "upload_time": "2022-04-05T06:32:59",
        "upload_time_iso_8601": "2022-04-05T06:32:59.667305Z",
        "url": "https://files.pythonhosted.org/packages/80/6e/adbdc0d620abf10c9bfca11337ab46cd4409cffa50b6566187cece9036dd/ezeth-1.1.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a90b241f3b4aaf9b960aaa2163346d347ef6cb65df97332f763e135a8c56ecf",
          "md5": "56b1c0c11313497078ef8d4634eb68fd",
          "sha256": "06a44bd56da568dd5c230fa1297a9c16ebf9d8eb3c0fb9e1c32a10810968a9a2"
        },
        "downloads": -1,
        "filename": "ezeth-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "56b1c0c11313497078ef8d4634eb68fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 13965,
        "upload_time": "2022-05-31T16:38:31",
        "upload_time_iso_8601": "2022-05-31T16:38:31.424515Z",
        "url": "https://files.pythonhosted.org/packages/1a/90/b241f3b4aaf9b960aaa2163346d347ef6cb65df97332f763e135a8c56ecf/ezeth-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "169c0672f063c6dae29db0630a365b6db9e90239665e07dddd8bb6a4211550e7",
          "md5": "02b0a6e6053a12b8c753dd658b6370e7",
          "sha256": "e4150cde2e195d75f3aa9d12a6b3305a9b8da583d82ec5036e38fd6f0018e2f8"
        },
        "downloads": -1,
        "filename": "ezeth-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "02b0a6e6053a12b8c753dd658b6370e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 14033,
        "upload_time": "2022-06-13T06:17:37",
        "upload_time_iso_8601": "2022-06-13T06:17:37.314709Z",
        "url": "https://files.pythonhosted.org/packages/16/9c/0672f063c6dae29db0630a365b6db9e90239665e07dddd8bb6a4211550e7/ezeth-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79c30133f09e0caad30a24f014e4313417e391f4d5d31dff73c6d6f1750ad88b",
          "md5": "8da39fe807dab815a1ab04ffe108ce86",
          "sha256": "2edc67e359c95a032daea8f21212d656167440ff3274ba66b76d065d5cc40530"
        },
        "downloads": -1,
        "filename": "ezeth-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8da39fe807dab815a1ab04ffe108ce86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 15004,
        "upload_time": "2023-03-03T07:20:06",
        "upload_time_iso_8601": "2023-03-03T07:20:06.948392Z",
        "url": "https://files.pythonhosted.org/packages/79/c3/0133f09e0caad30a24f014e4313417e391f4d5d31dff73c6d6f1750ad88b/ezeth-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f159bece0e173f7c96df400a4b6df0e25d61ee6274ed0f5f5f8b6511ea1c820d",
          "md5": "cda1fab9b696c0b55050237db2147a75",
          "sha256": "f1879539d297aa010c5a1f10eb12a23e7cfb022b83d28df88b046d6a90a7ab0e"
        },
        "downloads": -1,
        "filename": "ezeth-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cda1fab9b696c0b55050237db2147a75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 15114,
        "upload_time": "2023-03-13T09:26:34",
        "upload_time_iso_8601": "2023-03-13T09:26:34.841401Z",
        "url": "https://files.pythonhosted.org/packages/f1/59/bece0e173f7c96df400a4b6df0e25d61ee6274ed0f5f5f8b6511ea1c820d/ezeth-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f159bece0e173f7c96df400a4b6df0e25d61ee6274ed0f5f5f8b6511ea1c820d",
        "md5": "cda1fab9b696c0b55050237db2147a75",
        "sha256": "f1879539d297aa010c5a1f10eb12a23e7cfb022b83d28df88b046d6a90a7ab0e"
      },
      "downloads": -1,
      "filename": "ezeth-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cda1fab9b696c0b55050237db2147a75",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<3.11",
      "size": 15114,
      "upload_time": "2023-03-13T09:26:34",
      "upload_time_iso_8601": "2023-03-13T09:26:34.841401Z",
      "url": "https://files.pythonhosted.org/packages/f1/59/bece0e173f7c96df400a4b6df0e25d61ee6274ed0f5f5f8b6511ea1c820d/ezeth-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}