{
  "info": {
    "author": "Amazon Web Service - SNS",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Amazon SNS Extended Client Library for Python\n\n### Implements the functionality of [amazon-sns-java-extended-client-lib](https://github.com/awslabs/amazon-sns-java-extended-client-lib) in Python\n\n## Getting Started\n\n* **Sign up for AWS** -- Before you begin, you need an AWS account. For more information about creating an AWS account, see [create and activate aws account](https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/).\n* **Minimum requirements** -- Python 3.x (or later) and pip\n* **Download** -- Download the latest preview release or pick it up from pip:\n```\npip install amazon-sns-extended-client\n```\n\n\n## Overview\nsns-extended-client allows for publishing large messages through SNS via S3. This is the same mechanism that the Amazon library\n[amazon-sns-java-extended-client-lib](https://github.com/awslabs/amazon-sns-java-extended-client-lib) provides.\n\n## Additional attributes available on `boto3` SNS `client`, `Topic` and `PlatformEndpoint` objects.\n* large_payload_support -- the S3 bucket name that will store large messages.\n* use_legacy_attribute -- if `True`, then all published messages use the Legacy reserved message attribute (SQSLargePayloadSize) instead of the current reserved message attribute (ExtendedPayloadSize).\n* message_size_threshold -- the threshold for storing the message in the large messages bucket. Cannot be less than `0` or greater than `262144`. Defaults to `262144`.\n* always_through_s3 -- if `True`, then all messages will be serialized to S3. Defaults to `False`\n* s3 -- the boto3 S3 `resource` object to use to store objects to S3. Use this if you want to control the S3 resource (for example, custom S3 config or credentials). Defaults to `boto3.resource(\"s3\")` on first use if not previously set.\n\n## Usage\n\n#### Note:\n> The s3 bucket must already exist prior to usage, and be accessible by whatever credentials you have available\n\n### Enabling support for large payloads (>256Kb)\n\n```python\nimport boto3\nimport sns_extended_client\n\n# Low level client\nsns = boto3.client('sns')\nsns.large_payload_support = 'bucket-name'\n\n# boto SNS.Topic resource\nresource = boto3.resource('sns')\ntopic = resource.Topic('topic-arn')\n\n# Or\ntopic = resource.create_topic(Name='topic-name')\n\ntopic.large_payload_support = 'my-bucket-name'\n\n# boto SNS.PlatformEndpoint resource\nresource = boto3.resource('sns')\nplatform_endpoint = resource.PlatformEndpoint('endpoint-arn')\n\nplatform_endpoint.large_payload_support = 'my-bucket-name'\n```\n\n### Enabling support for large payloads (>64K)\n```python\nimport boto3\nimport sns_extended_client\n\n# Low level client\nsns = boto3.client('sns')\nsns.large_payload_support = 'BUCKET-NAME'\nsns.message_size_threshold = 65536\n\n# boto SNS.Topic resource\nresource = boto3.resource('sns')\ntopic = resource.Topic('topic-arn')\n\n# Or\ntopic = resource.create_topic('topic-name')\n\ntopic.large_payload_support = 'bucket-name'\ntopic.message_size_threshold = 65536\n\n# boto SNS.PlatformEndpoint resource\nresource = boto3.resource('sns')\nplatform_endpoint = resource.PlatformEndpoint('endpoint-arn')\n\nplatform_endpoint.large_payload_support = 'my-bucket-name'\nplatform_endpoint.message_size_threshold = 65536\n```\n### Enabling support for large payloads for all messages\n```python\nimport boto3\nimport sns_extended_client\n\n# Low level client\nsns = boto3.client('sns')\nsns.large_payload_support = 'my-bucket-name'\nsns.always_through_s3 = True\n\n# boto SNS.Topic resource\nresource = boto3.resource('sns')\ntopic = resource.Topic('topic-arn')\n\n# Or\ntopic = resource.create_topic(Name='topic-name')\n\ntopic.large_payload_support = 'my-bucket-name'\ntopic.always_through_s3 = True\n\n# boto SNS.PlatformEndpoint resource\nresource = boto3.resource('sns')\nplatform_endpoint = resource.PlatformEndpoint('endpoint-arn')\n\nplatform_endpoint.large_payload_support = 'my-bucket-name'\nplatform_endpoint.always_through_s3 = True\n```\n### Setting a custom S3 resource\n```python\nimport boto3\nfrom botocore.config import Config\nimport sns_extended_client\n\n# Low level client\nsns = boto3.client('sns')\nsns.large_payload_support = 'my-bucket-name'\nsns.s3 = boto3.resource(\n  's3', \n  config=Config(\n    signature_version='s3v4',\n    s3={\n      \"use_accelerate_endpoint\": True\n    }\n  )\n)\n\n# boto SNS.Topic resource\nresource = boto3.resource('sns')\ntopic = resource.Topic('topic-arn')\n\n# Or\ntopic = resource.topic(Name='topic-name')\n\ntopic.large_payload_support = 'my-bucket-name'\ntopic.s3 = boto3.resource(\n  's3', \n  config=Config(\n    signature_version='s3v4',\n    s3={\n      \"use_accelerate_endpoint\": True\n    }\n  )\n)\n\n# boto SNS.PlatformEndpoint resource\nresource = boto3.resource('sns')\nplatform_endpoint = resource.PlatformEndpoint('endpoint-arn')\n\nplatform_endpoint.large_payload_support = 'my-bucket-name'\nplatform_endpoint.s3 = boto3.resource(\n  's3', \n  config=Config(\n    signature_version='s3v4',\n    s3={\n      \"use_accelerate_endpoint\": True\n    }\n  )\n)\n```\n\n### Setting a custom S3 Key\nPublish Message Supports user defined S3 Key used to store objects in the specified Bucket.\n\nTo use custom keys add the S3 key as a Message Attribute in the MessageAttributes argument with the MessageAttribute.\n\n**Key - \"S3Key\"**\n```python\nsns.publish(\n    Message=\"message\",\n    MessageAttributes={\n        \"S3Key\": {\n            \"DataType\": \"String\",\n            \"StringValue\": \"--S3--Key--\",\n        }\n    },\n)\n```\n\n### Using SQSLargePayloadSize as reserved message attribute\nInitial versions of the Java SNS Extended Client used 'SQSLargePayloadSize' as the reserved message attribute to determine that a message is an S3 message.\n\nIn the later versions it was changed to use 'ExtendedPayloadSize'.\n\nTo use the Legacy reserved message attribute set use_legacy_attribute parameter to `True`.\n\n```python\nimport boto3\nimport sns_extended_client\n\n# Low level client\nsns = boto3.client('sns')\nsns.large_payload_support = 'bucket-name'\n\nsns.use_legacy_attribute = True\n\n# boto SNS.Topic resource\nresource = boto3.resource('sns')\ntopic = resource.Topic('topic-arn')\n\n# Or\ntopic = resource.create_topic(Name='topic-name')\n\ntopic.large_payload_support = 'my-bucket-name'\ntopic.use_legacy_attribute = True\n\n# boto SNS.PlatformEndpoint resource\nresource = boto3.resource('sns')\nplatform_endpoint = resource.PlatformEndpoint('endpoint-arn')\n\nplatform_endpoint.large_payload_support = 'my-bucket-name'\nplatform_endpoint.use_legacy_attribute = True \n```\n\n## CODE SAMPLE\nHere is an example of using the extended payload utility:\n\nHere we create an SNS Topic and SQS Queue, then subscribe the queue to the topic.\n\nWe publish messages to the created Topic and print the published message from the queue along with the original message retrieved from S3.\n\n```python\nimport boto3\nfrom sns_extended_client import SNSExtendedClientSession\nfrom json import loads\n\ns3_extended_payload_bucket = \"extended-client-bucket-store\"  # S3 bucket with the given bucket name is a resource which is created and accessible with the given AWS credentials\nTOPIC_NAME = \"---TOPIC-NAME---\"\nQUEUE_NAME = \"---QUEUE-NAME---\"\n\ndef get_msg_from_s3(body):\n    \"\"\"Handy Helper to fetch message from S3\"\"\"\n    json_msg = loads(body)\n    s3_client = boto3.client(\"s3\")\n    s3_object = s3_client.get_object(\n        Bucket=json_msg[1].get(\"s3BucketName\"), Key=json_msg[1].get(\"s3Key\")\n    )\n    msg = s3_object.get(\"Body\").read().decode()\n    return msg\n\n\ndef fetch_and_print_from_sqs(sqs, queue_url):\n    message = sqs.receive_message(\n        QueueUrl=queue_url, MessageAttributeNames=[\"All\"], MaxNumberOfMessages=1\n    ).get(\"Messages\")[0]\n    message_body = message.get(\"Body\")\n    print(\"Published Message: {}\".format(message_body))\n    print(\"Message Stored in S3 Bucket is: {}\\n\".format(get_msg_from_s3(message_body)))\n\n\nsns_extended_client = boto3.client(\"sns\", region_name=\"us-east-1\")\ncreate_topic_response = sns_extended_client.create_topic(Name=TOPIC_NAME)\ndemo_topic_arn = create_topic_response.get(\"TopicArn\")\n\n# create and subscribe an sqs queue to the sns client\nsqs = boto3.client(\"sqs\")\ndemo_queue_url = sqs.create_queue(QueueName=QUEUE_NAME).get(\"QueueUrl\")\ndemo_queue_arn = sqs.get_queue_attributes(\n    QueueUrl=demo_queue_url, AttributeNames=[\"QueueArn\"]\n)[\"Attributes\"].get(\"QueueArn\")\n\n# Set the RawMessageDelivery subscription attribute to TRUE if you want to use\n# SQSExtendedClient to help with retrieving msg from S3\nsns_extended_client.subscribe(TopicArn=demo_topic_arn, Protocol=\"sqs\", \nEndpoint=demo_queue_arn, Attributes={\"RawMessageDelivery\":\"true\"})\n\n# Below is the example that all the messages will be sent to the S3 bucket\nsns_extended_client.large_payload_support = s3_extended_payload_bucket\nsns_extended_client.always_through_s3 = True\nsns_extended_client.publish(\n    TopicArn=demo_topic_arn, Message=\"This message should be published to S3\"\n)\nprint(\"\\n\\nPublished using SNS extended client:\")\nfetch_and_print_from_sqs(sqs, demo_queue_url)  # Prints message stored in s3\n\n# Below is the example that all the messages larger than 32 bytes will be sent to the S3 bucket\nprint(\"\\nUsing decreased message size threshold:\")\n\nsns_extended_client.always_through_s3 = False\nsns_extended_client.message_size_threshold = 32\nsns_extended_client.publish(\n    TopicArn=demo_topic_arn,\n    Message=\"This message should be published to S3 as it exceeds the limit of the 32 bytes\",\n)\n\nfetch_and_print_from_sqs(sqs, demo_queue_url)  # Prints message stored in s3\n\n\n# Below is the example to publish message using the SNS.Topic resource\nsns_extended_client_resource = SNSExtendedClientSession().resource(\n    \"sns\", region_name=\"us-east-1\"\n)\n\ntopic = sns_extended_client_resource.Topic(demo_topic_arn)\ntopic.large_payload_support = s3_extended_payload_bucket\ntopic.always_through_s3 = True\n# Can Set custom S3 Keys to be used to store objects in S3\ntopic.publish(\n    Message=\"This message should be published to S3 using the topic resource\",\n    MessageAttributes={\n        \"S3Key\": {\n            \"DataType\": \"String\",\n            \"StringValue\": \"347c11c4-a22c-42e4-a6a2-9b5af5b76587\",\n        }\n    },\n)\nprint(\"\\nPublished using Topic Resource:\")\nfetch_and_print_from_sqs(sqs, demo_queue_url)\n```\n\nPRODUCED OUTPUT:\n```\nPublished using SNS extended client:\nPublished Message: [\"software.amazon.payloadoffloading.PayloadS3Pointer\", {\"s3BucketName\": \"extended-client-bucket-store\", \"s3Key\": \"465d51ea-2c85-4cf8-9ff7-f0a20636ac54\"}]\nMessage Stored in S3 Bucket is: This message should be published to S3\n\n\nUsing decreased message size threshold:\nPublished Message: [\"software.amazon.payloadoffloading.PayloadS3Pointer\", {\"s3BucketName\": \"extended-client-bucket-store\", \"s3Key\": \"4e32bc6c-e67e-4e09-982b-66dfbe0c588a\"}]\nMessage Stored in S3 Bucket is: This message should be published to S3 as it exceeds the limit of the 32 bytes\n\n\nPublished using Topic Resource:\nPublished Message: [\"software.amazon.payloadoffloading.PayloadS3Pointer\", {\"s3BucketName\": \"extended-client-bucket-store\", \"s3Key\": \"347c11c4-a22c-42e4-a6a2-9b5af5b76587\"}]\nMessage Stored in S3 Bucket is: This message should be published to S3 using the topic resource\n```\n\n## DEVELOPMENT\n\nWe have built-in Makefile to run test, format check or fix in one command. Please check [Makefile](Makefile) for more information.\n\nJust run below command, and it will do format check and run unit test:\n```\nmake ci\n```\n\n## Security\n\nSee [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.\n\n## License\n\nThis project is licensed under the Apache-2.0 License.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/awslabs/amazon-sns-python-extended-client-lib",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "amazon-sns-extended-client",
    "package_url": "https://pypi.org/project/amazon-sns-extended-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/amazon-sns-extended-client/",
    "project_urls": {
      "Homepage": "https://github.com/awslabs/amazon-sns-python-extended-client-lib",
      "Repository": "https://github.com/awslabs/amazon-sns-python-extended-client-lib"
    },
    "release_url": "https://pypi.org/project/amazon-sns-extended-client/1.0.0/",
    "requires_dist": [
      "boto3 (>=1.26.91,<2.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Python version of AWS SNS extended client to publish large payload message",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17499843,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a068dbe8a6625856e0aae60cd0bdcd30631278e1a259e7726b45ce0af549b10",
          "md5": "f428576d3654462ba12046f7637541a8",
          "sha256": "1d47d0444547ca8913c56873f4ca1007f84d7fbd96bf9bc0b21e51a1c650350f"
        },
        "downloads": -1,
        "filename": "amazon_sns_extended_client-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f428576d3654462ba12046f7637541a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 11507,
        "upload_time": "2023-03-29T21:16:41",
        "upload_time_iso_8601": "2023-03-29T21:16:41.833204Z",
        "url": "https://files.pythonhosted.org/packages/4a/06/8dbe8a6625856e0aae60cd0bdcd30631278e1a259e7726b45ce0af549b10/amazon_sns_extended_client-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1ee0f1422ef64dd90cbdfcfdc5a266ef2fd9ef6d7cdeef87d698cbf388f27fa",
          "md5": "90dd319f5040b081b32c539756246f91",
          "sha256": "a01041f0ed1b8c9305da0327d8168bed513b0b1aec7dd9bc23bfaab30c52f130"
        },
        "downloads": -1,
        "filename": "amazon_sns_extended_client-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "90dd319f5040b081b32c539756246f91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 12650,
        "upload_time": "2023-03-29T21:16:43",
        "upload_time_iso_8601": "2023-03-29T21:16:43.362938Z",
        "url": "https://files.pythonhosted.org/packages/e1/ee/0f1422ef64dd90cbdfcfdc5a266ef2fd9ef6d7cdeef87d698cbf388f27fa/amazon_sns_extended_client-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a068dbe8a6625856e0aae60cd0bdcd30631278e1a259e7726b45ce0af549b10",
        "md5": "f428576d3654462ba12046f7637541a8",
        "sha256": "1d47d0444547ca8913c56873f4ca1007f84d7fbd96bf9bc0b21e51a1c650350f"
      },
      "downloads": -1,
      "filename": "amazon_sns_extended_client-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f428576d3654462ba12046f7637541a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 11507,
      "upload_time": "2023-03-29T21:16:41",
      "upload_time_iso_8601": "2023-03-29T21:16:41.833204Z",
      "url": "https://files.pythonhosted.org/packages/4a/06/8dbe8a6625856e0aae60cd0bdcd30631278e1a259e7726b45ce0af549b10/amazon_sns_extended_client-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1ee0f1422ef64dd90cbdfcfdc5a266ef2fd9ef6d7cdeef87d698cbf388f27fa",
        "md5": "90dd319f5040b081b32c539756246f91",
        "sha256": "a01041f0ed1b8c9305da0327d8168bed513b0b1aec7dd9bc23bfaab30c52f130"
      },
      "downloads": -1,
      "filename": "amazon_sns_extended_client-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "90dd319f5040b081b32c539756246f91",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 12650,
      "upload_time": "2023-03-29T21:16:43",
      "upload_time_iso_8601": "2023-03-29T21:16:43.362938Z",
      "url": "https://files.pythonhosted.org/packages/e1/ee/0f1422ef64dd90cbdfcfdc5a266ef2fd9ef6d7cdeef87d698cbf388f27fa/amazon_sns_extended_client-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}