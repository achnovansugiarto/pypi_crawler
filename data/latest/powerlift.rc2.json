{
  "info": {
    "author": "InterpretML Team",
    "author_email": "interpret@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Powerlift\n\n![License](https://img.shields.io/github/license/microsoft/interpret.svg?style=flat-square)\n<br/>\n> ### Advancing the state of machine learning?\n> ### With 5-10 datasets? Wake me up when I'm dead.\n\nPowerlift is all about testing machine learning techniques across many, many datasets. So many, that we had run into design of experiment concerns. So many, that we had to develop a package for it.\n\nYes, we run this for InterpretML on as many docker containers we can run in parallel on. Why wait days for benchmark evalations when you can wait for minutes? Rhetorical question, please don't hurt me.\n\n```python\ndef trials(task):\n    if task.problem == \"binary\" and task.scalar_measure(\"n_rows\") <= 10000:\n        return [\"rf\", \"svm\"]\n    return []\n\ndef benchmark(trial):\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.svm import LinearSVC\n    from sklearn.calibration import CalibratedClassifierCV\n    from sklearn.model_selection import train_test_split\n    from sklearn.metrics import roc_auc_score\n    from sklearn.pipeline import Pipeline\n    from sklearn.preprocessing import OneHotEncoder, FunctionTransformer\n    from sklearn.compose import ColumnTransformer\n    from sklearn.impute import SimpleImputer\n\n    if trial.task.problem == \"binary\" and trial.task.origin == \"openml\":\n        X, y, meta = trial.task.data([\"X\", \"y\", \"meta\"])\n\n        # Holdout split\n        X_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.3)\n\n        # Build preprocessor\n        is_cat = meta[\"categorical_mask\"]\n        cat_cols = [idx for idx in range(X.shape[1]) if is_cat[idx]]\n        num_cols = [idx for idx in range(X.shape[1]) if not is_cat[idx]]\n        cat_ohe_step = (\"ohe\", OneHotEncoder(sparse=True, handle_unknown=\"ignore\"))\n        cat_pipe = Pipeline([cat_ohe_step])\n        num_pipe = Pipeline([(\"identity\", FunctionTransformer())])\n        transformers = [(\"cat\", cat_pipe, cat_cols), (\"num\", num_pipe, num_cols)]\n        ct = Pipeline(\n            [\n                (\"ct\", ColumnTransformer(transformers=transformers)),\n                (\n                    \"missing\",\n                    SimpleImputer(add_indicator=True, strategy=\"most_frequent\"),\n                ),\n            ]\n        )\n        # Connect preprocessor with target learner\n        if trial.method.name == \"svm\":\n            clf = Pipeline([(\"ct\", ct), (\"est\", CalibratedClassifierCV(LinearSVC()))])\n        else:\n            clf = Pipeline([(\"ct\", ct), (\"est\", RandomForestClassifier())])\n\n        # Train\n        clf.fit(X_tr, y_tr)\n\n        # Predict\n        predictions = clf.predict_proba(X_te)[:, 1]\n\n        # Score\n        auc = roc_auc_score(y_te, predictions)\n        trial.log(\"auc\", auc)\n\n# Create experiment within database.\nfrom powerlift.bench import Experiment\nexperiment = Experiment(\"postgresql://localhost/powerlift\", name=\"SVM vs RF\")\n\n# Only run this once for the database (downloads PMLB and OpenML CC18 datasets).\nfrom powerlift.bench import populate_with_datasets\npopulate_with_datasets(experiment.store, cache_dir=\"~/.powerlift\")\n\n# Run experiment\nexecutor = experiment.run(benchmark, trials, timeout=10)\nexecutor.join()\n```\n\nThis can also be run on Azure Container Instances where needed.\n```python\n# Run experiment (but in ACI).\nfrom powerlift.executors import AzureContainerInstance\nazure_tenant_id = os.getenv(\"AZURE_TENANT_ID\")\nazure_client_id = os.getenv(\"AZURE_CLIENT_ID\")\nazure_client_secret = os.getenv(\"AZURE_CLIENT_SECRET\")\nsubscription_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nresource_group = os.getenv(\"AZURE_RESOURCE_GROUP\")\nstore = Store(os.getenv(\"AZURE_DB_URL\"))\n\nexecutor = AzureContainerInstance(\n    store,\n    azure_tenant_id,\n    azure_client_id,\n    azure_client_secret,\n    subscription_id,\n    resource_group,\n    n_running_containers=5,\n    num_cores=1,\n    mem_size_gb=2,\n    raise_exception=True,\n)\nexperiment = Experiment(store, \"SVM vs RF\")\nexecutor = experiment.run(benchmark, trials, timeout=10, executor=executor)\nexecutor.join()\n```\n\n## Install\n`pip install powerlift`\n\nThat's it, go get 'em boss.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/interpretml/interpret",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "powerlift",
    "package_url": "https://pypi.org/project/powerlift/",
    "platform": null,
    "project_url": "https://pypi.org/project/powerlift/",
    "project_urls": {
      "Bug Tracker": "https://github.com/interpretml/interpret/issues",
      "Homepage": "https://github.com/interpretml/interpret"
    },
    "release_url": "https://pypi.org/project/powerlift/0.0.2/",
    "requires_dist": [
      "SQLAlchemy (>=1.4)",
      "sqlalchemy-utils (>=0.38)",
      "tqdm",
      "fastparquet",
      "stopit",
      "pandas",
      "numpy",
      "pytz",
      "msrestazure ; extra == 'aci'",
      "azure-common ; extra == 'aci'",
      "azure-mgmt-sql ; extra == 'aci'",
      "azure-mgmt-resource ; extra == 'aci'",
      "azure-mgmt-containerinstance ; extra == 'aci'",
      "azure-identity ; extra == 'aci'",
      "pmlb (>=1.0) ; extra == 'datasets'",
      "openml (>=0.12) ; extra == 'datasets'",
      "docker ; extra == 'docker'",
      "pyodbc ; extra == 'mssql'",
      "psycopg2 (>=2.9) ; extra == 'postgres'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "scikit-learn ; extra == 'testing'",
      "python-dotenv ; extra == 'testing'"
    ],
    "requires_python": ">=3.7",
    "summary": "Interactive Benchmarking for Machine Learning.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14295388,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fa4e328601b829dc22907dd00815a2621f557fe87c8aebbc0695c1b1b084f80",
          "md5": "b57814c3f7dfd8868e5ae096d2c80d36",
          "sha256": "4f99a8e998f8737198c0d1b24f909e5117b211044c0bbecf3d43b29105fdd7e4"
        },
        "downloads": -1,
        "filename": "powerlift-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b57814c3f7dfd8868e5ae096d2c80d36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25821,
        "upload_time": "2022-06-30T10:23:18",
        "upload_time_iso_8601": "2022-06-30T10:23:18.052424Z",
        "url": "https://files.pythonhosted.org/packages/9f/a4/e328601b829dc22907dd00815a2621f557fe87c8aebbc0695c1b1b084f80/powerlift-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9b6b003b596b6b313f496bb6f425f6b68f469ac1e827221695bbdbcbaf21cce",
          "md5": "4e7298eda61d422d0eb3bcb840f0e764",
          "sha256": "57c7170309410d33f4b3fc8e66cbb94bd9ccdd0cceaa25cdef8e2aae02715864"
        },
        "downloads": -1,
        "filename": "powerlift-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4e7298eda61d422d0eb3bcb840f0e764",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23528,
        "upload_time": "2022-06-30T10:23:20",
        "upload_time_iso_8601": "2022-06-30T10:23:20.846899Z",
        "url": "https://files.pythonhosted.org/packages/e9/b6/b003b596b6b313f496bb6f425f6b68f469ac1e827221695bbdbcbaf21cce/powerlift-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c3ceec501e88d99e7724310854b94f55ba3908e22113eac79da470d89c442b4",
          "md5": "0284d91df61c97bc12fd8fc1e186d752",
          "sha256": "64e71727335a15e6ed39f802d858ad79279433212b1b65b7647261988beeb406"
        },
        "downloads": -1,
        "filename": "powerlift-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0284d91df61c97bc12fd8fc1e186d752",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25855,
        "upload_time": "2022-06-30T11:25:07",
        "upload_time_iso_8601": "2022-06-30T11:25:07.867683Z",
        "url": "https://files.pythonhosted.org/packages/6c/3c/eec501e88d99e7724310854b94f55ba3908e22113eac79da470d89c442b4/powerlift-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6259d8a2a88393f78fbdd7fde3dbb09c7065481b2e54a5fb42b1b02b5a7c4d39",
          "md5": "e9457622aec4394badc4a20a8e8e5217",
          "sha256": "361f410cc66cb25e85574dd46ac8fb817dbc9881fe396adc9ff15007b6549a2c"
        },
        "downloads": -1,
        "filename": "powerlift-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e9457622aec4394badc4a20a8e8e5217",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23612,
        "upload_time": "2022-06-30T11:25:09",
        "upload_time_iso_8601": "2022-06-30T11:25:09.555543Z",
        "url": "https://files.pythonhosted.org/packages/62/59/d8a2a88393f78fbdd7fde3dbb09c7065481b2e54a5fb42b1b02b5a7c4d39/powerlift-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c3ceec501e88d99e7724310854b94f55ba3908e22113eac79da470d89c442b4",
        "md5": "0284d91df61c97bc12fd8fc1e186d752",
        "sha256": "64e71727335a15e6ed39f802d858ad79279433212b1b65b7647261988beeb406"
      },
      "downloads": -1,
      "filename": "powerlift-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0284d91df61c97bc12fd8fc1e186d752",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25855,
      "upload_time": "2022-06-30T11:25:07",
      "upload_time_iso_8601": "2022-06-30T11:25:07.867683Z",
      "url": "https://files.pythonhosted.org/packages/6c/3c/eec501e88d99e7724310854b94f55ba3908e22113eac79da470d89c442b4/powerlift-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6259d8a2a88393f78fbdd7fde3dbb09c7065481b2e54a5fb42b1b02b5a7c4d39",
        "md5": "e9457622aec4394badc4a20a8e8e5217",
        "sha256": "361f410cc66cb25e85574dd46ac8fb817dbc9881fe396adc9ff15007b6549a2c"
      },
      "downloads": -1,
      "filename": "powerlift-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e9457622aec4394badc4a20a8e8e5217",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 23612,
      "upload_time": "2022-06-30T11:25:09",
      "upload_time_iso_8601": "2022-06-30T11:25:09.555543Z",
      "url": "https://files.pythonhosted.org/packages/62/59/d8a2a88393f78fbdd7fde3dbb09c7065481b2e54a5fb42b1b02b5a7c4d39/powerlift-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}