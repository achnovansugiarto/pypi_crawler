{
  "info": {
    "author": "Adrian Ornelas",
    "author_email": "afornelas@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3"
    ],
    "description": "# linearWinVolume\n > A Python implementation of pycaw that doesn't function on a decibel scale\n\nIn order to linearly interface with Windows' volume control in a manner that matches the UI's output, linearWinVolume computes a logarithmic regression from user collected sample data points. From there it optionally applies a linear correction value such that when setting and getting the volume state it is accurate to rougly ~1 unit of Windows volume at all times.\n\n## Installation\n\nWindows:\n\n```bash\npip install linearwinvolume\n```\nSetup (Need to setup every sound device individually):\n```python\n# With desired sound device as Output Device under windows\nimport linearwinvolume\nlinearwinvolume.setup()\n# From here, follow the CLI prompts to callibrate your sound device's dB levels\n```\nIn order to complete setup:\n1) Select a sample size of data points (Windows volume units)\n2) Input Windows volume values until Windows volume is 0\n3) (OPTIONAL) Compute a linear correction\n    * This massively improves accuracy on some sound devices\n    * The setup function will count down from 100 to 0 setting your volume accordingly\n    * Enter any letter once the guessed value matches the true Windows value\n\n## Usage examples\n\nThis python module offers 4 functions. The first, ```linearwinvolume.setup()```, is used to callibrate the sound device. The rest are:\n```python\n# Set volume to 55%\nlinearwinvolume.set_volume(55)\n\n# Get current volume, returns integer from 0 - 100\nlinearwinvolume.get_volume()\n\n# Change volume, to increase volume, use a positive integer, to decrease use a negative value\nlinearwinvolume.change_volume()\n```\n\n## Explanation\n\nIn order to derive an equation that accurately represents all volume values form 0 to 100, a logarithmic regression is preformed on the collected sample values.\n\nInitially, the program computes the logarithmic regression which takes the form of ```y = A ln(x) + B```\n\nOftentimes, this is enough to maintain ~1 unit of Windows volume unit error.\n\nIn order to improve accuracy on some devices, an additional linear term is added such that the new function takes the form of ```y = A ln(x) + C x + (B + D)```\n\nC is defined as 100 - intersect divided by the max volume in Db - initial logarithmic regression for x =100\n\nD is defined as the difference between the max volume and ```y = A ln(x) + C x + B``` solved for x = 100\n\nUsing Mathematica, the resultant equation, ```y = A ln(x) + C x + (B + D)```, is solved for x, to reveal a new [Equation](https://www.wolframalpha.com/input/?i=%28A+ProductLog%28%28C+e%5E%28-B%2FA+%2B+y%2FA%29%29%2FA%29%29%2FC), in order to use the get_volume() function. As a result of it using the Lambert W function W(z), this package requires scipy.\n\nThe configuration file where values are saved is stored inside the pip directory and is global for a python installation. It takes the form of:\n\n```ini\n[Headset (Headphone adapter)]\nnatural logarithm coeff = 10.690485218963337\nconstant offset = -54.99262202770247\ncorrection coeff = 0.05761118223586133\nmin_vol = -50.0\nmax_vol = 0.0\nsamples = 25\n```\n\n## Release History\n\n* 1.1.0\n    * Added linear correction algorithm that dramatically improves accuracy on some devices\n* 1.0.0\n    * Initial Release\n\n## Credits\n\nAdrian Ornelas â€“ afornelas@outlook.com\n\nDistributed under the MIT license. See ``LICENSE`` for more information.\n\n[https://github.com/That-CC](https://github.com/That-CC)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/That-CC/linearWinVolume",
    "keywords": "python,pycaw,volume,windows volume,windows volume control",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "linearwinvolume",
    "package_url": "https://pypi.org/project/linearwinvolume/",
    "platform": "",
    "project_url": "https://pypi.org/project/linearwinvolume/",
    "project_urls": {
      "Homepage": "https://github.com/That-CC/linearWinVolume"
    },
    "release_url": "https://pypi.org/project/linearwinvolume/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python implementation of pycaw that doesn't function on a decibel scale",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11177334,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad54d42e389e4b9d7b04ea6e041cf850fc4070e1b21b0c9a88813aed84921802",
          "md5": "721f862b343af52ab6e12122d3b690b9",
          "sha256": "26059ecf26c1e09a8cf47ab870ecba92111b1944743866174f6b2eb770cdd08d"
        },
        "downloads": -1,
        "filename": "linearwinvolume-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "721f862b343af52ab6e12122d3b690b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3890,
        "upload_time": "2021-08-13T05:33:08",
        "upload_time_iso_8601": "2021-08-13T05:33:08.850871Z",
        "url": "https://files.pythonhosted.org/packages/ad/54/d42e389e4b9d7b04ea6e041cf850fc4070e1b21b0c9a88813aed84921802/linearwinvolume-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ac87d6a5c91e5a97d453b6769c3158e61f7cde964fdb9f36af7469265251a29",
          "md5": "cf84cdd3821738321c4de80092f29b87",
          "sha256": "7974fdf9972d22510a3aa59ad0d27220b210f185510418dd356a32266d836bdd"
        },
        "downloads": -1,
        "filename": "linearwinvolume-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cf84cdd3821738321c4de80092f29b87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6110,
        "upload_time": "2021-08-14T08:35:25",
        "upload_time_iso_8601": "2021-08-14T08:35:25.701064Z",
        "url": "https://files.pythonhosted.org/packages/5a/c8/7d6a5c91e5a97d453b6769c3158e61f7cde964fdb9f36af7469265251a29/linearwinvolume-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ac87d6a5c91e5a97d453b6769c3158e61f7cde964fdb9f36af7469265251a29",
        "md5": "cf84cdd3821738321c4de80092f29b87",
        "sha256": "7974fdf9972d22510a3aa59ad0d27220b210f185510418dd356a32266d836bdd"
      },
      "downloads": -1,
      "filename": "linearwinvolume-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cf84cdd3821738321c4de80092f29b87",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6110,
      "upload_time": "2021-08-14T08:35:25",
      "upload_time_iso_8601": "2021-08-14T08:35:25.701064Z",
      "url": "https://files.pythonhosted.org/packages/5a/c8/7d6a5c91e5a97d453b6769c3158e61f7cde964fdb9f36af7469265251a29/linearwinvolume-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}