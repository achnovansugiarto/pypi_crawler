{
  "info": {
    "author": "Matteo Barbetti",
    "author_email": "matteo.barbetti@fi.infn.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/mbarbetti/optunapi/main/.github/images/optunapi-logo.png\" width=\"800\"/>\n</div>\n\n<h3 align=\"center\">\n  <em>API to distribute hyperparameters optimization through HTTP requests</em>\n</h3>\n\n[![PyPI license](https://img.shields.io/pypi/l/optunapi.svg)](https://pypi.python.org/pypi/optunapi/)\n[![PyPI version shields.io](https://img.shields.io/pypi/v/optunapi.svg)](https://pypi.python.org/pypi/optunapi/)\n[![PyPI status](https://img.shields.io/pypi/status/optunapi.svg)](https://pypi.python.org/pypi/optunapi/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/optunapi.svg)](https://pypi.python.org/pypi/optunapi/)\n[![GitHub issues](https://img.shields.io/github/issues/mbarbetti/optunapi.svg)](https://github.com/mbarbetti/optunapi/issues/)\n[![GitHub pull-requests](https://img.shields.io/github/issues-pr/mbarbetti/optunapi.svg)](https://github.com/mbarbetti/optunapi/pulls/)\n[![Downloads](https://pepy.tech/badge/optunapi)](https://pepy.tech/project/optunapi)\n[![DOI](https://zenodo.org/badge/357996871.svg)](https://zenodo.org/badge/latestdoi/357996871)\n[![GitHub stars](https://img.shields.io/github/stars/mbarbetti/optunapi?style=social)](https://github.com/mbarbetti/optunapi)\n\n_OptunAPI_ is a simple API designed for Machine Learning applications that allows to distribute an automatic \nhyperparameters optimization over different machines through **HTTP requests**. Each set of hyperparameters \ncan be studied independently since the minima research does't require any gradients computation, but instead \nis performed through a **Bayesian optimization** based on [Optuna](https://optuna.org/). The machine running \nOptuna manages centrally the optimization studies -- the so-called \"Optuna-server\" -- providing sets of \nhyperparameters and assessing them by the scores evaluated and sent back by the single computing instance, \nnamed \"Trainer-client\". The HTTP requests underlying such client-server system are powered by [FastAPI](https://fastapi.tiangolo.com).\n\n## Key Features\n\nOptunAPI inherits most of the modern functionalities of Optuna and FastAPI:\n\n- **Lightweight and versatile**\n  - OptunAPI is entirely written in Python and has few dependencies.\n- **Easy to configure**\n  - For hyperparameters sampling, OptunAPI relies on [configuration files](#configuration-file) easy to set up.\n- **Easy to integrate**\n  - The hyperparameters values can be easily recover [decoding the HTTP response content](#trainer-client) from the server.\n- **Easy parallelization**\n  - Different machines can run the hyperparameters study in parallel, centrally coordinated by the server.\n- **Efficient optimization algorithms**\n  - The optimization task is headed by Optuna and its state-of-the-art algorithms.\n- **Quick visualization for study analysis**\n  - _TODO_ - OptunAPI provides a set of reports to monitor the status of the hyperparameters study.\n\n## Key Components\n\nTo understand how OptunAPI works, we need to spend a couple of words about its components:\n\n- [`Study`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.Study.html#optuna.study.Study) and\n  [`Trial`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.trial.Trial.html#optuna.trial.Trial) objects\n  from Optuna\n- Optuna's Ask-and-Tell interface\n- HTTP requests to map the hyperparameters space\n\n### Study and Trial\n\nA _study_ corresponds to an optimization task, i.e., a set of trials. This object provides interfaces to run a new\n[`Trial`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.trial.Trial.html#optuna.trial.Trial)\nand access trials' history. OptunAPI is designed so that, when the first machine ask for a hyperparameters set, it\nstarts a new study ([`create_study()`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html#optuna.study.create_study)) identified according to the HTTP request submitted. Any other machines referring \nto the same optimization session don't initialize a new study, but recover the previous one ([`load_study()`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.load_study.html#optuna.study.load_study)) contributing \nto mapping the hyperparameters space.\n\nA _trial_ allows to prepare a particular set of hyperparameters and evaluate its capability of optimizing a objective\nfunction, not necessarily available in an explicit form as in the case of very complex Machine Learning algorithms.\nThis object provides the following interfaces to get parameter suggestion: \n\n- [`optuna.trial.Trial.suggest_categorical()`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.trial.Trial.html#optuna.trial.Trial.suggest_categorical) for categorical parameters\n- [`optuna.trial.Trial.suggest_int()`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.trial.Trial.html#optuna.trial.Trial.suggest_int) for integer parameters\n- [`optuna.trial.Trial.suggest_float()`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.trial.Trial.html#optuna.trial.Trial.suggest_float) for floating point parameters\n\nWith optional arguments of `step` and `log`, we can discretize or take the logarithm of integer and floating point parameters.\nThe following code block is taken from the [Optuna tutorial](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/002_configurations.html) and shows a standard use of these features:\n\n```Python\nimport optuna\n\ndef objective (trial):\n    # Categorical parameter\n    optimizer = trial.suggest_categorical ('optimizer', ['RMSprop', 'Adam'])\n\n    # Integer parameter\n    num_layers = trial.suggest_int ('num_layers', 1, 3)\n\n    # Integer parameter (log)\n    num_channels = trial.suggest_int ('num_channels', 32, 512, log = True)\n\n    # Integer parameter (discretized)\n    num_units = trial.suggest_int ('num_units', 10, 100, step = 5)\n\n    # Floating point parameter\n    dropout_rate = trial.suggest_float ('dropout_rate', 0.0, 1.0)\n\n    # Floating point parameter (log)\n    learning_rate = trial.suggest_float ('learning_rate', 1e-5, 1e-2, log = True)\n\n    # Floating point parameter (discretized)\n    drop_path_rate = trial.suggest_float ('drop_path_rate', 0.0, 1.0, step = 0.1)\n```\n\nOptunAPI uses these methods internally and requires only a [configuration file](#configuration-file) \ncorrectly filled to run the studies.\n\n### Ask-and-Tell Interface\n\nThe Optuna's _Ask-and-Tell_ interface provides a more flexible interface for hyperparameter optimization\nbased on the two following methods:\n\n- [`optuna.study.Study.ask()`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.Study.html#optuna.study.Study.ask) creates a trial that can sample hyperparameters\n- [`optuna.study.Study.tell()`](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.Study.html#optuna.study.Study.tell) finishes the trial by passing `trial` and an objective value\n\nOptunAPI uses these methods in two different moments. When a machine ask for a set of hyperparameters,\nthat set belongs to a trial resulting from an _ask_ instance. Then, once the objective function was\nevaluated with that particular set of hyperparameters, the machine sends a new request encoding the\nobjective value allowing to close the corresponding trial with a _tell_ instance.\n\n### HTTP Requests\n\nOptunAPI provides a simple Python module to run a server able to centrally manage the optimization studies:\n[`optuna/optuna/server.py`](https://github.com/mbarbetti/optunapi/blob/main/optunapi/server.py). It is\nequipped with a set of _path operation functions_ relying on the FastAPI ecosystem:\n\n- `ping_server`\n  - the _path_ is `/optunapi/ping`\n  - the _operation_ is `GET`\n  - the _function_ allows to verify if the server is running\n- `read_hparams`\n  - the _path_ is `/optuna/hparams/{model_name}` (`model_name` is a _path parameter_)\n  - the _operation_ is `GET`\n  - the _function_ allows to start (or load) an Optuna study and send sets of hyperparameters\n- `send_score`\n  - the _path_ is `/optuna/score/{model_name}?trail_id=TRIAL_ID&score=SCORE` (with _query parameters_)\n  - the _operation_ is `GET`\n  - the _function_ allows to finish the trial identified by `trial_id` with the `score` value\n\n## Requirements\n\nPython 3.6+\n\nOptunAPI is based on two modern and highly performant frameworks:\n\n- [Optuna](https://optuna.org/) for the optimization parts.\n- [FastAPI](https://fastapi.tiangolo.com) for the HTTP requests parts.\n\n## Installation\n\nOptunAPI is a [public repository](https://github.com/mbarbetti/optunapi) on GitHub.\n\n<div class=\"termy\">\n\n```console\n$ git clone https://github.com/mbarbetti/optunapi.git\n\n---> 100%\n```\n\n</div>\n\nTo run and use OptunAPI it's preferable to create a virtual environment with Python 3.6+ and install Optuna and FastAPI within it.\n\n<div class=\"termy\">\n\n```console\n$ pip install optuna fastapi\n\n---> 100%\n```\n\n</div>\n\nStanding on the shoulder of FastAPI, OptunAPI needs an ASGI server to run the so-called Optuna-server, \nsuch as [Uvicorn](https://www.uvicorn.org) or [Hypercorn](https://gitlab.com/pgjones/hypercorn).\n\n<div class=\"termy\">\n\n```console\n$ pip install uvicorn[standard]\n\n---> 100%\n```\n\n</div>\n\n## Example\n\n### Configuration file\n\nThe high-level functions provided by Optuna [to suggest values for the hyperparameters](#study-and-trial) \nare replaced with an appropriate _configuration file_ in OptunAPI. Referring to the example reported in\nthe [Optuna tutorial](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/002_configurations.html),\nwhat follows is the corresponding YAML configuration file:\n\n```YAML\n# Categorical parameter\noptimizer:\n  name    : optimizer\n  type    : categorical\n  choices : \n            - RMSprop\n            - Adam\n\n# Integer parameter\nnum_layers:\n  name : num_layers\n  type : int\n  low  : 1\n  high : 3\n\n# Integer parameter (log)\nnum_channels:\n  name : num_channels\n  type : int\n  low  : 32\n  high : 52\n  log  : True\n\n# Integer parameter (discretized)\nnum_units:\n  name : num_units\n  type : int\n  low  : 10\n  high : 100\n  step : 5\n\n# Floating point parameter\ndropout_rate:\n  name : dropout_rate\n  type : float\n  low  : 0.0\n  high : 1.0\n\n# Floating point parameter (log)\nlearning_rate:\n  name : learning_rale\n  type : float\n  low  : 1e-5\n  high : 1e-2\n  log  : True\n\n# Floating point parameter (discretized)\ndrop_path_rate:\n  name : drop_path_rate\n  type : float\n  low  : 0.0\n  high : 1.0\n  step : 0.1\n```\n\n### Optuna-server\n\nPrepared the configuration file for the optimization session and saved it into \n[`optunapi/optunapi/config`](https://github.com/mbarbetti/optunapi/tree/main/optunapi/config),\nwe are ready to run the Optuna-server.\n\n<div class=\"termy\">\n\n```console\n$ uvicorn server:optunapi\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n</div>\n\n<details markdown=\"1\">\n<summary>What does the command <code>uvicorn server:optunapi</code> mean?</summary>\n\nThe command `uvicorn server:optunapi` refers to:\n\n* `server`: the file `server.py` (the Python \"module\") in \n  [optunapi/optunapi](https://github.com/mbarbetti/optunapi/tree/main/optunapi).\n* `optunapi`: the object created inside of `server.py` with the line `optunapi = FastAPI()`.\n\n</details>\n\nNote that Uvicorn sets `127.0.0.1` and `8000` as default values for the server IP and port.\nTo change the defaults it's enough launching the previous command with the arguments \n`--host` and `--port` followed by the chosen values.\n\n### Trainer-client\n\nThe optimization session is managed by an Optuna _study_, initialized with the first client HTTP request, \nor loaded and expanded by any other connecting machines. To refer to a particular optimization session a \nclient has to encode the name of the corresponding configuration file within its HTTP request.\n\nConsider the simple use-case provided by OptunAPI, where we want to find the minimum of a 2D-paraboloid:\n[`optunapi/tests/simple_client.py`](https://github.com/mbarbetti/optunapi/blob/main/tests/simple_client.py).\nSince the provided configuration file is named `optuna-test.yaml`, then the GET request submitted by the client \nto receive the hyperparameters set has to contain the string `'optuna-test'`:\n\n```Python\nimport requests\n\nHOST = 'http://127.0.0.1:8000'\n\nread_hparams = requests.get (HOST + '/optunapi/hparams/optunapi-test')\nhp_req = read_hparams.json()\n\nTRIAL_ID = hp_req ['trial_id']\nPARAMS   = hp_req [ 'params' ]\n```\n\nWhat happens behind the scenes is that the above HTTP request calls an _ask_ instance to the Optuna \n_study_, stored in [`optunapi/optunapi/db`](https://github.com/mbarbetti/optunapi/tree/main/optunapi/db) \nonce created and named `optunapi-test.db`. As already said, an _ask_ instance is a _trial_ equipped with \na set of hyperparameters and the client can recover those values decoding the corresponding HTTP response. \nIn the example above, `hp_req` is a dictionary containing, among others, the identifier number of the current \n_trial_ (`TRIAL_ID`) and a dictionary for the hyperparameters values (`PARAMS`). \n\nHaving accessed to the hyperparameters values, we can perform whatever learning algorithm one prefers and \nevaluate the associated training score, that will be used as _objective value_ to finish the _trial_ instance.\nThis is done with a new GET request referring to the same optimization session (again, `'optunapi-test'` in the path) \nand passing `TRIAL_ID` and `SCORE` as query parameters:\n\n```Python\nimport requests\n\nHOST = 'http://127.0.0.1:8000'\n\nsend_score = requests.get (HOST + '/optunapi/score/optunapi-test?trial_id=TRIAL_ID&score=SCORE')\nscore_req  = send_score.json()\n\nBEST_TRIAL_ID = score_req ['best_score_id']\nBEST_PARAMS   = score_req [ 'best_params' ]\n```\n\nEach running client allows to refine the search for minima performed by the Optuna algorithms, focusing \non smaller and smaller space portion and enhancing the mapping of the hyperparameters space.\n\n## Securing HTTP requests\n\nOptunAPI is designed to be used within a VPN not directly opened to the public Internet. On the other hand, \nopening the Optuna-server to Internet allows to exploit easily a wide variety of computing resources, from \non-premises machines to instances deriving from different cloud computing services (AWS, Azure, GCP, etc.).\nSuch design raises a security issue since anyone can submit a request to the server or catch its response, \nopening the system to cyberattack.\n\nA possible solution to this issue relies on the SSH protocol. The idea is to set up the Optuna-server\nas a _private server_ (from the perspective of `REMOTE SERVER`) not directly visible from the outside \n(`LOCAL CLIENT`’s perspective). This configuration, schematically represented in the sketch below, \nallows a _local client_ to still access the _private server_ passing through the _remote server_ \nauthenticating with SSH credentials. \n\n```\n    ----------------------------------------------------------------------\n\n                                |\n    -------------+              |    +----------+               +---------\n        LOCAL    |              |    |  REMOTE  |               | PRIVATE\n        CLIENT   | <== SSH ========> |  SERVER  | <== local ==> | SERVER\n    -------------+              |    +----------+               +---------\n                                |\n                             FIREWALL (only port 22 is open)\n\n    ----------------------------------------------------------------------\n```\n\nOptunAPI provides a very simple implementation of this scheme: \n[`optunapi/tests/secured_client.py`](https://github.com/mbarbetti/optunapi/blob/main/tests/secured_client.py).\nIt is based on [sshtunnel](https://github.com/pahaz/sshtunnel/) and allows to submit a HTTP request to the\n_private server_ after having specifying our SSH credentials (`ssh_username`, `ssh_pkey`).\n\n```Python\nimport sshtunnel\nimport requests\n\nwith sshtunnel.open_tunnel (\n  (REMOTE_SERVER_IP, 22),\n  ssh_username = 'mbarbetti',\n  ssh_pkey = '/home/mbarbetti/.ssh/id_rsa',\n  remote_bind_address = (PRIVATE_SERVER_IP, PRIVATE_SERVER_PORT),\n  local_bind_address  = ('127.0.0.1', 10022)\n) as tunnel:\n  ping_server = requests.get ('http://localhost:10022/optunapi/ping')\n  ping_msg = ping_server.json()\n  print (ping_msg)\n```\n\n<details markdown=\"1\">\n<summary>How to run the server in this case?</summary>\n\nIn this configuration the Optuna-server acts as _private server_, \nthen its IP and port are the ones declared within the `with` statement:\n\n```\n$ uvicorn server:optunapi --host PRIVATE_SERVER_IP --port PRIVATE_SERVER_PORT\n```\n</details>\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mbarbetti/optunapi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "optunapi",
    "package_url": "https://pypi.org/project/optunapi/",
    "platform": "",
    "project_url": "https://pypi.org/project/optunapi/",
    "project_urls": {
      "Homepage": "https://github.com/mbarbetti/optunapi"
    },
    "release_url": "https://pypi.org/project/optunapi/0.1.4/",
    "requires_dist": [
      "optuna",
      "fastapi",
      "requests",
      "uvicorn[standard]"
    ],
    "requires_python": ">=3.6",
    "summary": "API to distribute hyperparameters optimization through HTTP requests",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11679286,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b95a5661371bfb9f0c366e550b79a8367b8add1418033731e7010a633225214",
          "md5": "e52fa9f9510334ab10cc8cd9d2f1e87e",
          "sha256": "e33f04158f691d48c478f4e73233e7d4dfc8e7d043b1c0a184574bae46ee14f5"
        },
        "downloads": -1,
        "filename": "optunapi-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e52fa9f9510334ab10cc8cd9d2f1e87e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7318,
        "upload_time": "2021-05-25T17:56:36",
        "upload_time_iso_8601": "2021-05-25T17:56:36.181426Z",
        "url": "https://files.pythonhosted.org/packages/9b/95/a5661371bfb9f0c366e550b79a8367b8add1418033731e7010a633225214/optunapi-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf4f1dfb5de8ceb0e493bcb775e1523a761d3357266c67a0819088cf8b8dd96c",
          "md5": "e355ca2eca43cc0ab611752d520df51b",
          "sha256": "fc216bc9ba75ce7f11c205380f6090b9cd89b4548cd76e442f45fc2db810dc04"
        },
        "downloads": -1,
        "filename": "optunapi-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e355ca2eca43cc0ab611752d520df51b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7646,
        "upload_time": "2021-09-29T18:06:32",
        "upload_time_iso_8601": "2021-09-29T18:06:32.743719Z",
        "url": "https://files.pythonhosted.org/packages/bf/4f/1dfb5de8ceb0e493bcb775e1523a761d3357266c67a0819088cf8b8dd96c/optunapi-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b43c64927702b9ac7dd6c33467f05f0e8f02288fb42f7c73499592818c4db16",
          "md5": "11202281bf0b861a62bed2c4b871ce53",
          "sha256": "adf9dbfcab23d0574a71c958823b2cb140653cd77e6e5001e876c7b336e759e1"
        },
        "downloads": -1,
        "filename": "optunapi-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11202281bf0b861a62bed2c4b871ce53",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7645,
        "upload_time": "2021-09-29T18:32:07",
        "upload_time_iso_8601": "2021-09-29T18:32:07.890643Z",
        "url": "https://files.pythonhosted.org/packages/8b/43/c64927702b9ac7dd6c33467f05f0e8f02288fb42f7c73499592818c4db16/optunapi-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb3c00d8a733bca6612cbb65cd2fdac1e924689b359fe7453d9cc56d088f3838",
          "md5": "654d386a2d1926c9f5fda6418876edfc",
          "sha256": "ad1eec5e0a6829b848bf375b64072a470584ade61ff3f936b9f1498a83c36f64"
        },
        "downloads": -1,
        "filename": "optunapi-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "654d386a2d1926c9f5fda6418876edfc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7647,
        "upload_time": "2021-09-29T18:40:27",
        "upload_time_iso_8601": "2021-09-29T18:40:27.896988Z",
        "url": "https://files.pythonhosted.org/packages/cb/3c/00d8a733bca6612cbb65cd2fdac1e924689b359fe7453d9cc56d088f3838/optunapi-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb3c00d8a733bca6612cbb65cd2fdac1e924689b359fe7453d9cc56d088f3838",
        "md5": "654d386a2d1926c9f5fda6418876edfc",
        "sha256": "ad1eec5e0a6829b848bf375b64072a470584ade61ff3f936b9f1498a83c36f64"
      },
      "downloads": -1,
      "filename": "optunapi-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "654d386a2d1926c9f5fda6418876edfc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7647,
      "upload_time": "2021-09-29T18:40:27",
      "upload_time_iso_8601": "2021-09-29T18:40:27.896988Z",
      "url": "https://files.pythonhosted.org/packages/cb/3c/00d8a733bca6612cbb65cd2fdac1e924689b359fe7453d9cc56d088f3838/optunapi-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}