{
  "info": {
    "author": "Tyler Gordon",
    "author_email": "tagordon@uw.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![tests](https://github.com/tagordon/gefera/actions/workflows/tests.yml/badge.svg)\n[![Documentation Status](https://readthedocs.org/projects/gefera/badge/?version=latest)](https://gefera.readthedocs.io/en/latest/?badge=latest)\n\n# gefera\n\n[Installation](#installation)\n\n[Basic Usage](#basic-usage)\n\n[The Likelihood](#the-likelihood)\n\n## Installation\n\nTo install gefera begin by cloning the github repository. \n\n```\ngit clone https://www.github.com/tagordon/gefera\n```\n\nOnce the repository has downloaded cd into the main directory and install with pip.\n\n```\ncd gefera; pip install .\n``` \n \n## Basic Usage\n\nGefera has two components: the dynamical model which is used to compute the positions of two bodies at a given time or array of times, and the photometric model which computes the observed flux given the positions of the bodies. Gefera implements two dynamical systems. The first is a `HierarchicalSystem`, which describes an exomoon/exoplanet pair. To instantiate this system let's start by defining the dynamical parameters:\n\nFor the planet:\n\n```python\nap = 215.0\t\t\t# semimajor axis in stellar radii\ntp = -91.25\t\t\t# starting epoch in days\nep = 0.0\t\t\t# eccentricity \npp = 365\t\t\t# period in days\nwp = 0.1 * np.pi / 180\t\t# longitude of periastron in degrees\nip = 89.8 * np.pi / 180\t\t# inclination in degrees\n```\n\nand for the moon:    \n\n```python\nam = 2\t\t\t# semimajor axis of the moon's orbit around the planet in stellar radii\ntm = -4.2\t\t\t# starting epoch in days\nem = 0.0\t\t\t# eccentricity\npm = 8\t\t\t\t# period in days\nom = 90 * np.pi / 180\t\t# longitude of the ascending node in degrees\nwm = -90 * np.pi / 180\t\t# longitude of periastron in degrees\nim = 90.0 * np.pi / 180\t\t# inclination in degrees\nmm = 0.01\t\t\t# mass of the moon in units of the mass of the planet\n```\n\nWe can then instantiate the system as follows: \n\n```python\nimport gefera as gf\n\npo = gf.orbits.PrimaryOrbit(ap, tp, ep, pp, wp, ip)\nmo = gf.orbits.SatelliteOrbit(am, tm, em, pm, om, wm, im, mm)\nsys = gf.systems.HierarchicalSystem(po, mo)\n```\n\nTo compute the light curve we also need the radii of both bodies and the quadratic limb darkening parameters (right now gefera only supports quadratic limb darkening)\n\n```python\nrp = 0.1\nrm = 0.05\nu1 = 0.5\nu2 = 0.3\n```\n\nWe can then compute the light curve:\n\n```python\nt = np.linspace(-0.6, 0.3, 10000)\n# The out-of-transit flux is set to zero by default, so we add 1 to get the normalized flux.\nflux = sys.lightcurve(t, u1, u2, rp, rm) + 1\n```\nWhen plotted, the lightcurve for this system looks like this:\n![exomoon lightcurve](https://github.com/tagordon/gefera/blob/master/notebooks/readme_plot_light.png#gh-light-mode-only)\n![exomoon lightcurve](https://github.com/tagordon/gefera/blob/master/notebooks/readme_plot_dark.png#gh-dark-mode-only)\n\nIf the gradient is required we use\n\n```python\nflux, grad = sys.lightcurve(t, u1, u2, rp, rm, grad=True)\n```\n\nThis will return the gradient of the light curve with respect to each of the input parameters as a dictionary keyed by the name of the parameter. The keys are `a1, t1, e1... a2, t2, e2...` where the `1` parameters are for the larger body and `2` refers to the smaller body. \n\n## The Likelihood \n\nIn order to conduct inference using the gefera model we need to compute the likelihood with respect to some observations. If `t` is an array containing the times of the observations and `y` is an array containing flux measurements (normalized to an out-of-transit flux of 1) then we can compute the likelihood for the model as follows:\n\n```python\nll = sys.loglike(y - 1, t, u1, u2, r1, r2, sigma)\n``` \n\nwhere `sigma` is the uncertainty, assumed to be the same for each measurement. If we want to make use of the gradient in our inference then we can call:\n\n```python\nll, dll = sys.loglike(y - 1, t, u1, u2, r1, r2, sigma, grad=True)\n```\n\nThe gradient is returned as an array of arrays containing the gradients with respect to each parameter in the order `a1, t1, e1, p1, w1, i1, a2, t2, e2, p2, om2, w2, i2, mm2, r1, r2, u1, u2`. If `func` is a callable function that returns `-ll, -dll` and `init` is an array of initial parameter guesses in the same order as the gradients are returned then we can use `scipy.optimize.minimize` to optimize the model as follows:\n\n```python\nres = minimize(func, init, jac=True, method='TNC')\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/tagordon/gefera",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gefera",
    "package_url": "https://pypi.org/project/gefera/",
    "platform": null,
    "project_url": "https://pypi.org/project/gefera/",
    "project_urls": {
      "Homepage": "http://github.com/tagordon/gefera"
    },
    "release_url": "https://pypi.org/project/gefera/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Light curves for mutual transits of limb-darkened stars",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14396956,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c639922ae9a141882a2494cbaf8529e853dffea5c2f4ebe92c57107c484cb33e",
          "md5": "2b4d33661cdd090b8b267047b8ea3879",
          "sha256": "5cc003762f2676820fe3c17c10c9d50f4550cba94a51b9a434489ad371dec767"
        },
        "downloads": -1,
        "filename": "gefera-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2b4d33661cdd090b8b267047b8ea3879",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2258273,
        "upload_time": "2022-07-11T09:07:18",
        "upload_time_iso_8601": "2022-07-11T09:07:18.186218Z",
        "url": "https://files.pythonhosted.org/packages/c6/39/922ae9a141882a2494cbaf8529e853dffea5c2f4ebe92c57107c484cb33e/gefera-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c639922ae9a141882a2494cbaf8529e853dffea5c2f4ebe92c57107c484cb33e",
        "md5": "2b4d33661cdd090b8b267047b8ea3879",
        "sha256": "5cc003762f2676820fe3c17c10c9d50f4550cba94a51b9a434489ad371dec767"
      },
      "downloads": -1,
      "filename": "gefera-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2b4d33661cdd090b8b267047b8ea3879",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2258273,
      "upload_time": "2022-07-11T09:07:18",
      "upload_time_iso_8601": "2022-07-11T09:07:18.186218Z",
      "url": "https://files.pythonhosted.org/packages/c6/39/922ae9a141882a2494cbaf8529e853dffea5c2f4ebe92c57107c484cb33e/gefera-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}