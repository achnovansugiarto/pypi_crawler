{
  "info": {
    "author": "Moray Grieve, Ben Spiller",
    "author_email": "pysys-dev@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Education :: Testing",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": "Welcome to PySys!\n=================\n\nPySys is a powerful cross-platform framework for writing great system/integration tests. \n\nIt provides a comprehensive package of methods to make all the common system/integration testing operations a breeze, \nwith all the flexibility and power of the Python language at your fingertips. PySys is a framework that gives you a \nsingle unified way to control the selection, ordering and reporting of every type of test including system \ncorrectness, performance, soak/robustness testing, unit testing and manual testing.\n\nWhatever language the application you're testing is written in, and whatever platforms it needs to run on, \nPySys can help!\n\nKey features include:\n\n- A comprehensive library of assertion methods appropriate for system-level \n  testing, such as checking for error/success messages in log files and \n  comparing the contents of output files.\n- A comprehensive library of methods to automate platform-independent process \n  starting, orchestration, and cleanup, for both Windows and Unix-based \n  systems. Includes common operations such as:\n\n  * dynamically picking a free TCP/IP port, \n  * waiting until a server is running on a specified port,\n  * waiting until a file contains a specified message, \n  * powerful primitives for pre-processing text files (e.g. configuration input files, or output logs)\n  * aborting early with a clear failure messages if an error is detected in a log file\n\n- Support for executing tests in parallel to significantly speed up execution \n  time, with a flexible mechanism for controlling execution order.\n- Ability to cycle a test many times (and in parallel) to reproduce rare race \n  conditions. \n- Support for executing the same test in several modes during your test \n  run (for example against different web browsers, databases, or for writing \n  parameterized tests). Python expressions give the power to easily create \n  complex and dynamic lists of modes that combine multi-dimensional sets of parameters. \n- A performance monitoring framework for recording and aggregating latency, \n  throughput and other performance metrics.\n- A process memory monitoring framework to monitor memory usage when soak \n  testing your application.\n- A pluggable \"writers\" framework for recording test outcomes in any format. Includes \n  a test output archiver, a writer for the ubiquitous JUnit/Ant(TM) XML file format, \n  and built-in support for running tests \n  under CI providers such as GitHub(R) Actions and Travis CI(R).\n- Integrated support for running PyUnit tests and doctests, in case your \n  application is also written in Python.\n- Integrated support for executing manual/interactively driven test cases.\n- Test categorization and selective include/exclude execution, using per-test \n  classification groups.\n- Support for Windows, Linux and macOS. \n\nPySys was created by Moray Grieve. The maintainer is now Ben Spiller. \nThis is a community project so we welcome your contributions, whether \nenhancement issues or GitHub pull requests! \n\nProject Links\n=============\n.. image:: https://img.shields.io/pypi/v/PySys\n\t:target: https://pypi.org/project/PySys/\n\n.. image:: https://img.shields.io/badge/license-LGPL-blue\n\t:target: https://pysys-test.github.io/pysys-test/license.html\n\n.. image:: https://github.com/pysys-test/pysys-test/actions/workflows/pysys-test.yml/badge.svg\n\t:target: https://github.com/pysys-test/pysys-test/actions/workflows/pysys-test.yml\n\n.. image:: https://codecov.io/gh/pysys-test/pysys-test/branch/master/graph/badge.svg\n\t:target: https://codecov.io/gh/pysys-test/pysys-test\n\n- Documentation: https://pysys-test.github.io/pysys-test\n- Stack Overflow tag for questions: https://stackoverflow.com/questions/ask?tags=pysys\n- Bug/enhancement issue tracker: https://github.com/pysys-test/pysys-test/issues\n- Source repository and sample projects: https://github.com/pysys-test\n\n.. inclusion-marker-section-start-installation\n\nInstallation\n============\n\nPySys can be installed into any Python version from 3.6 to 3.10. \n\nThe best way to install PySys is using the standard ``pip`` installer which \ndownloads and install the binary package for the current PySys \nrelease, by executing::\n\n\t> python -m pip install PySys\n\nAlternatively, you can download the binary ``.whl`` package from \nhttps://github.com/pysys-test/pysys-test/releases and use \n``python -m pip install PySys-<VERSION>.whl`` instead. \n\nMake sure you have an up-to-date pip using ``python -m pip install --upgrade pip``.\nSee https://packaging.python.org/tutorials/installing-packages for \nmore information about using ``pip``.\n\nWindows\n-------\nOn Windows, pip will automatically install the \n`pywin32 <https://pypi.org/project/pywin32/>`_ and \n`colorama <https://pypi.org/project/colorama/>`_ \nlibraries that PySys depends upon.\n\nThe executable launcher script ``pysys.py`` is installed into the ``Scripts\\`` \ndirectory of the Python installation, e.g. ``c:\\Python\\Scripts\\pysys.py``. \nTo allow easy invocation of PySys from any test directory you may wish to add \nthe Scripts directory to your ``PATH`` or copy the script to a location that is \nalready on ``PATH``. Alternatively you can run PySys using ``python -m pysys``.\n\n\nUnix\n----\nThe executable launcher script ``pysys.py`` is installed into Python's binary \ndirectory, e.g. ``/usr/local/bin``, and hence should be on the current user's \n``PATH`` automatically; if not, just add it. Alternatively you can run PySys \nusing ``python -m pysys``.\n\nThose wishing to use the manual tester should ensure they have \ninstalled the tcl/tk libraries on the host machine and are using a Python \nversion that was compiled with tcl/tk support.\n\n.. inclusion-marker-section-start-getting-started\n\nGetting Started\n===============\nAfter installation, to see the available options to the pysys.py script use::\n\n\t> pysys.py --help\n \nThe script has four main commands: \n\n- ``makeproject`` to create your top-level testing project configuration file, \n- ``make`` to create individual testcases, \n- ``run`` to execute them, and \n- ``clean`` to delete testcase output after execution.\n\nFor detailed information, see the ``--help`` command line. \n\nTo get started, create a new directory to hold your tests. Then run the \n``makeproject`` command from that directory to add a ``pysysproject.xml`` \nfile which will hold default settings for your tests::\n\n\t> mkdir test\n\t> cd test\n\t> pysys.py makeproject\n\nThen to create your first test, run::\n\n\t> pysys.py make MyApplication_001\n\nThis will create a ``MyApplication_001`` subdirectory with a ``pysystest.py`` file that contains both \"descriptor\" \nmetadata about the test such as its title, and a Python class where you can add the logic to ``execute`` your test, \nand to ``validate`` that the results are as expected. \n\nTo run your testcases, simply execute::\n\n\t> pysys.py run\n\nTo give a flavour for what's possible, here's a system test for checking the behaviour of a server application \ncalled MyServer, which shows of the most common PySys methods:\n\n.. code-block:: python\n\n  __pysys_title__   = r\"\"\" MyServer startup - basic sanity test (+ demo of PySys basics) \"\"\"\n  \n  __pysys_purpose__ = r\"\"\" To demonstrate that MyServer can startup and response to basic requests. \n    \"\"\"\n\n  class PySysTest(pysys.basetest.BaseTest):\n    def execute(self):\n      # Ask PySys to allocate a free TCP port to start the server on (this allows running many tests in \n      # parallel without clashes)\n      serverPort = self.getNextAvailableTCPPort()\n      \n      # A common system testing task is pre-processing a file, for example to substitute in required \n      # testing parameters\n      self.copy(self.input+'/myserverconfig.json', self.output+'/', mappers=[\n        lambda line: line.replace('@SERVER_PORT@', str(serverPort)),\n      ])\n      \n      # Start the server application we're testing (as a background process)\n      # self.project provides access to properties in pysysproject.xml, such as appHome which is the \n      # location of the application we're testing\n      server = self.startProcess(\n        command   = self.project.appHome+'/my_server.%s'%('bat' if IS_WINDOWS else 'sh'), \n        arguments = ['--configfile', self.output+'/myserverconfig.json', ], \n        environs  = self.createEnvirons(addToExePath=os.path.dirname(PYTHON_EXE)),\n        stdouterr = 'my_server', displayName = 'my_server<port %s>'%serverPort, background = True,\n        )\n      \n      # Wait for the server to start by polling for a grep regular expression. The errorExpr/process \n      # arguments ensure we abort with a really informative message if the server fails to start\n      self.waitForGrep('my_server.out', 'Started MyServer .*on port .*', errorExpr=[' (ERROR|FATAL) '], process=server) \n      \n      # Run a test tool (in this case, written in Python) from this test's Input/ directory.\n      self.startPython([self.input+'/httpget.py', f'http://localhost:{serverPort}/data/myfile.json'], \n        stdouterr='httpget_myfile')\n    \n    def validate(self):\n      # This method is called after execute() to perform validation of the results by checking the \n      # contents of files in the test's output directory. Note that during test development you can \n      # re-run validate() without waiting for a full execute() run using \"pysys run --validateOnly\". \n      \n      # It's good practice to check for unexpected errors and warnings so they don't go unnoticed\n      self.assertGrep('my_server.out', ' (ERROR|FATAL|WARN) .*', contains=False)\n      \n      # Checking for exception stack traces is also a good idea; and joining them into a single line with a mapper will \n      # give a more descriptive error if the test fails\n      self.assertGrep('my_server.out', r'Traceback [(]most recent call last[)]', contains=False, \n        mappers=[pysys.mappers.JoinLines.PythonTraceback()])\n      \n      self.assertThat('message == expected', \n        message=pysys.utils.fileutils.loadJSON(self.output+'/httpget_myfile.out')['message'], \n        expected=\"Hello world!\", \n        )\n      \n      self.logFileContents('my_server.out')\n\nIf you're curious about any of the functionality demonstrated above, there's lots of helpful information on these \nmethods and further examples in the documentation:\n\n- `pysys.basetest.BaseTest.getNextAvailableTCPPort()`\n- `pysys.basetest.BaseTest.copy()`\n- `pysys.basetest.BaseTest.startProcess()` (+ `pysys.basetest.BaseTest.createEnvirons()` and `pysys.basetest.BaseTest.startPython()`)\n- `pysys.basetest.BaseTest.waitForGrep()`\n- `pysys.basetest.BaseTest.assertGrep()`\n- `pysys.basetest.BaseTest.assertThat()`\n- `pysys.basetest.BaseTest.logFileContents()`\n- `pysys.mappers`\n\nNow take a look at `pysys.basetest` to begin exploring more of the powerful functionality \nPySys provides to help you implement your own ``pysystest.py`` system tests. \n\nThe sample projects under https://github.com/pysys-test are a great starting point for learning more about PySys, and \nfor creating your first project. \n\n.. inclusion-marker-section-start-license\n\nLicense\n=======\n\nPySys System Test Framework\n\nCopyright (C) 2006-2022 M.B. Grieve\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pysys-test.github.io/pysys-test",
    "keywords": "testing,qa,system testing,integration testing,unit testing",
    "license": "GNU Lesser General Public License",
    "maintainer": "Ben Spiller",
    "maintainer_email": "pysys-dev@googlegroups.com",
    "name": "PySys",
    "package_url": "https://pypi.org/project/PySys/",
    "platform": "Operating System :: Microsoft :: Windows",
    "project_url": "https://pypi.org/project/PySys/",
    "project_urls": {
      "Ask a Question": "https://stackoverflow.com/questions/ask?tags=pysys",
      "Change Log": "https://pysys-test.github.io/pysys-test/ChangeLog.html",
      "Homepage": "https://pysys-test.github.io/pysys-test",
      "Repository": "https://github.com/pysys-test/pysys-test",
      "Sample": "https://github.com/pysys-test/sample-getting-started",
      "Tracker": "https://github.com/pysys-test/pysys-test/issues"
    },
    "release_url": "https://pypi.org/project/PySys/2.1/",
    "requires_dist": [
      "pywin32 ; sys_platform == \"win32\"",
      "colorama ; sys_platform == \"win32\""
    ],
    "requires_python": ">=3, <4",
    "summary": "Python System Test Framework",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15871161,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4834106b1d28fbb1942cb91b78626988d3f9f07234cde4fc606ef6c8bfef58ee",
          "md5": "0da9ac93d2ef949f115814a1605d690d",
          "sha256": "b7cafa97d62ade71911d0887799584ac34222935615542a219ea31db120573ab"
        },
        "downloads": -1,
        "filename": "PySys-0.9.0.win32.exe",
        "has_sig": false,
        "md5_digest": "0da9ac93d2ef949f115814a1605d690d",
        "packagetype": "bdist_wininst",
        "python_version": "any",
        "requires_python": null,
        "size": 304129,
        "upload_time": "2012-10-27T16:14:36",
        "upload_time_iso_8601": "2012-10-27T16:14:36.226072Z",
        "url": "https://files.pythonhosted.org/packages/48/34/106b1d28fbb1942cb91b78626988d3f9f07234cde4fc606ef6c8bfef58ee/PySys-0.9.0.win32.exe",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d4db536d1f4e2f68b3cc5282624622c20827fbedb4998eb0a1cc80dfd42754a",
          "md5": "9eb7cd3404e811856307363fbd55449a",
          "sha256": "e12637b097290e3dd7e016d1f98e3995ec12d4d41ddc4a2d5499d76595d1c12c"
        },
        "downloads": -1,
        "filename": "PySys-0.9.0.zip",
        "has_sig": false,
        "md5_digest": "9eb7cd3404e811856307363fbd55449a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 109120,
        "upload_time": "2012-10-27T16:13:29",
        "upload_time_iso_8601": "2012-10-27T16:13:29.924067Z",
        "url": "https://files.pythonhosted.org/packages/6d/4d/b536d1f4e2f68b3cc5282624622c20827fbedb4998eb0a1cc80dfd42754a/PySys-0.9.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ba665a9427d378bfe52e28d3e2c7b67c855e3132308c6a96d13be488dcf03c6",
          "md5": "6f1252fd076e1110ef75c5f34c2357f4",
          "sha256": "e0c74b3872bd3bbc087670262b22a9acf1684b82c9c223ca0c7cef9ea7ef5459"
        },
        "downloads": -1,
        "filename": "PySys-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6f1252fd076e1110ef75c5f34c2357f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 84178,
        "upload_time": "2017-04-28T20:46:35",
        "upload_time_iso_8601": "2017-04-28T20:46:35.176599Z",
        "url": "https://files.pythonhosted.org/packages/4b/a6/65a9427d378bfe52e28d3e2c7b67c855e3132308c6a96d13be488dcf03c6/PySys-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f407ca7228131b08e8fb6dc365bd2012f988f65ce4eb8e6bcb80625aea88495",
          "md5": "e1da95db80cc53bffdb90a700c3b334d",
          "sha256": "913feac6bdd077f458b86befd7b2b4d44e936bb7dea08230e8f7f16a91e031a3"
        },
        "downloads": -1,
        "filename": "PySys-1.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1da95db80cc53bffdb90a700c3b334d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, <4",
        "size": 189794,
        "upload_time": "2019-04-02T11:39:45",
        "upload_time_iso_8601": "2019-04-02T11:39:45.899009Z",
        "url": "https://files.pythonhosted.org/packages/2f/40/7ca7228131b08e8fb6dc365bd2012f988f65ce4eb8e6bcb80625aea88495/PySys-1.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98f5e886f410db0417dd0fde2fd9e566ee06788471929fa4d92060499d5c69ac",
          "md5": "910b5ce050c1dd30ac29b567866cd459",
          "sha256": "6dca15023a1c3c243387fb044733776c44fd9f6af8c6bcccfda1413c22655dc3"
        },
        "downloads": -1,
        "filename": "PySys-1.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "910b5ce050c1dd30ac29b567866cd459",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, <4",
        "size": 231297,
        "upload_time": "2019-07-29T15:02:15",
        "upload_time_iso_8601": "2019-07-29T15:02:15.810791Z",
        "url": "https://files.pythonhosted.org/packages/98/f5/e886f410db0417dd0fde2fd9e566ee06788471929fa4d92060499d5c69ac/PySys-1.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b18cbf59761f742cd417d294ae7a5d0d05946f31725bd79b8dacd6afbd2d434",
          "md5": "f7482e046b05be02f7c0d9a9643de68c",
          "sha256": "25ff9e8464f18664b3209beaed6b6737e8fc7f3d93af713da317b7a2c2fc3b8c"
        },
        "downloads": -1,
        "filename": "PySys-1.5.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7482e046b05be02f7c0d9a9643de68c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, <4",
        "size": 267024,
        "upload_time": "2020-05-06T17:34:19",
        "upload_time_iso_8601": "2020-05-06T17:34:19.682999Z",
        "url": "https://files.pythonhosted.org/packages/7b/18/cbf59761f742cd417d294ae7a5d0d05946f31725bd79b8dacd6afbd2d434/PySys-1.5.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d26269a16a410581410c8fa1379ae2c48e9ec15fe9d055c904afa3ef16b1aba7",
          "md5": "170a476b109f892ae928b02edfd69056",
          "sha256": "19c163478dccdbeae07d1f1125c170394f896f83bffec35a0e572a97795774be"
        },
        "downloads": -1,
        "filename": "PySys-1.6.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "170a476b109f892ae928b02edfd69056",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, <4",
        "size": 328275,
        "upload_time": "2020-08-10T18:57:12",
        "upload_time_iso_8601": "2020-08-10T18:57:12.201399Z",
        "url": "https://files.pythonhosted.org/packages/d2/62/69a16a410581410c8fa1379ae2c48e9ec15fe9d055c904afa3ef16b1aba7/PySys-1.6.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1315750f397e496290436261ce6c6ff8f698a616a118cc9affee57bfaaf2aff3",
          "md5": "d87a44a757883041a2b821d5d8afe72a",
          "sha256": "0f90697c60ea8acf354959c17ed52ce57fd8ddd338ba6ef51353eb4101eee420"
        },
        "downloads": -1,
        "filename": "PySys-1.6.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d87a44a757883041a2b821d5d8afe72a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, <4",
        "size": 330411,
        "upload_time": "2020-08-14T17:14:54",
        "upload_time_iso_8601": "2020-08-14T17:14:54.199256Z",
        "url": "https://files.pythonhosted.org/packages/13/15/750f397e496290436261ce6c6ff8f698a616a118cc9affee57bfaaf2aff3/PySys-1.6.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "823fce09e5552584dd82fa2f03254b2d352470b8f1ade7888200521d47baef83",
          "md5": "30bdbddb416a95b6cabfb8b8c789647c",
          "sha256": "2cec5379f10f56a23ffd7381eecf065c2897a5b5be9cff23c25b92a7877a70a9"
        },
        "downloads": -1,
        "filename": "PySys-2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30bdbddb416a95b6cabfb8b8c789647c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 394252,
        "upload_time": "2021-08-22T21:43:24",
        "upload_time_iso_8601": "2021-08-22T21:43:24.352677Z",
        "url": "https://files.pythonhosted.org/packages/82/3f/ce09e5552584dd82fa2f03254b2d352470b8f1ade7888200521d47baef83/PySys-2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e2fe013dbdc0e493de3690a0cee44da770bf5c153a0e566d0708e1d025b2e20",
          "md5": "3aef8f1a1733cb14cd80ca1d889ad955",
          "sha256": "9afd9d7a05f839aad1f13084bd8298c891b1361c6674b7815fbba35aec25aee8"
        },
        "downloads": -1,
        "filename": "PySys-2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3aef8f1a1733cb14cd80ca1d889ad955",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 421530,
        "upload_time": "2022-03-17T13:42:05",
        "upload_time_iso_8601": "2022-03-17T13:42:05.474389Z",
        "url": "https://files.pythonhosted.org/packages/5e/2f/e013dbdc0e493de3690a0cee44da770bf5c153a0e566d0708e1d025b2e20/PySys-2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e2fe013dbdc0e493de3690a0cee44da770bf5c153a0e566d0708e1d025b2e20",
        "md5": "3aef8f1a1733cb14cd80ca1d889ad955",
        "sha256": "9afd9d7a05f839aad1f13084bd8298c891b1361c6674b7815fbba35aec25aee8"
      },
      "downloads": -1,
      "filename": "PySys-2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3aef8f1a1733cb14cd80ca1d889ad955",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3, <4",
      "size": 421530,
      "upload_time": "2022-03-17T13:42:05",
      "upload_time_iso_8601": "2022-03-17T13:42:05.474389Z",
      "url": "https://files.pythonhosted.org/packages/5e/2f/e013dbdc0e493de3690a0cee44da770bf5c153a0e566d0708e1d025b2e20/PySys-2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}