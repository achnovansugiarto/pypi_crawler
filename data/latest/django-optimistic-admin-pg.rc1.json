{
  "info": {
    "author": "Riccardo Magliocchetti",
    "author_email": "riccardo.magliocchetti@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-optimistic-admin-pg\n\nThis app provides a couple of mixins to implement [optimistic concurrency](https://en.wikipedia.org/wiki/Optimistic_concurrency_control) in the Django admin leveraging\nPostgreSQL specific features.\n\nPostgreSQL implements an MVCC concurrency model, that means that rows are duplicated on update.\nPostgreSQL stores an id on each row to store the transaction identifier called *xmin*.\n\nThis application provides mixins for Django *ModelForm* and *ModelAdmin* using the *xmin* value\nto inhibit the saving of data via the Django admin if it has been updated in the meantime.\n\n## Notes on safety\n\nPlease note that this application does not remove completely the races between updates via the admin\ninterfaces but it narrows them by a lot.\n\n## Similar Projects\n\n[django-concurrency](https://github.com/saxix/django-concurrency) implements the same pattern with\n *batteries included* in a *database-independent* way.\n\n## Requirements\n\nThe app is tested on Python 3.8+ with Django 3.2 and 4.0.\n\n## Setup\n\n```shell\npython -m pip install django-optimistic-admin-pg\n```\n\n## How to use\n\nThis application provides a couple of mixins: one for *ModelAdmin* instances and one for *ModelForm*\ninstances.\n\nFirst a *ModelForm* inheriting from *OptimisticAdminModelFormMixin* should be used as form the\n *ModelAdmin*.\nA field called *row_version* should be added to this form in order to send the row version read\nfrom the database.\nAssuming you have forms in `forms.py`:\n\n```python\nfrom django import forms\nfrom optimisticadmin.mixins import OptimisticAdminModelFormMixin\n\nclass MyModelForm(OptimisticAdminModelFormMixin, forms.ModelForm):\n    row_version = forms.IntegerField(required=False, widget=forms.HiddenInput())\n```\n\nThen in `admin.py` your *ModelAdmin* need to inherit from *OptimisticAdminMixin* and use the form\n implemented before:\n\n```python\nfrom django.contrib import admin\nfrom optimisticadmin.mixins import OptimisticAdminMixin\nfrom .forms import MyModelForm\n\n@admin.register(MyModel)\nclass MyModelAdmin(OptimisticAdminMixin, admin.ModelAdmin):\n    form = MyModelForm\n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/djungle-io/django-optimistic-admin-pg",
    "keywords": "django,admin,concurrency,postgresql",
    "license": "MIT License",
    "maintainer": "Djungle Studio",
    "maintainer_email": "tech@djungle.io",
    "name": "django-optimistic-admin-pg",
    "package_url": "https://pypi.org/project/django-optimistic-admin-pg/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-optimistic-admin-pg/",
    "project_urls": {
      "Homepage": "https://github.com/djungle-io/django-optimistic-admin-pg"
    },
    "release_url": "https://pypi.org/project/django-optimistic-admin-pg/1.0.0/",
    "requires_dist": [
      "Django (>=3.2)"
    ],
    "requires_python": "",
    "summary": "django-optimistic-admin-pg providing mixins for implementing optimistic concurrency in Django using PostgreSQL",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13707422,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90c3699700f5d71f5fef6c6763fb75919c7b29ab99252868907e1f8b63b76ab9",
          "md5": "51063818e82875ecebf4e9745c5c45b3",
          "sha256": "349c5f2af79fcda1013ae4b33e56158016f095cd65640e69a2f489c43cc337f4"
        },
        "downloads": -1,
        "filename": "django_optimistic_admin_pg-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51063818e82875ecebf4e9745c5c45b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4749,
        "upload_time": "2022-05-04T08:14:22",
        "upload_time_iso_8601": "2022-05-04T08:14:22.940908Z",
        "url": "https://files.pythonhosted.org/packages/90/c3/699700f5d71f5fef6c6763fb75919c7b29ab99252868907e1f8b63b76ab9/django_optimistic_admin_pg-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddfc4e30f069cefa4d66d0e9d127af68efc339c338296bfc7225e70a52237031",
          "md5": "f1b32b16bc161d511ca2b28d02b7ef2e",
          "sha256": "cbee6a3fe4c01b4809b33c790ff1052d2d407b53985b8d94f3ff31d0c9e0abc6"
        },
        "downloads": -1,
        "filename": "django-optimistic-admin-pg-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f1b32b16bc161d511ca2b28d02b7ef2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4722,
        "upload_time": "2022-05-04T08:14:24",
        "upload_time_iso_8601": "2022-05-04T08:14:24.862823Z",
        "url": "https://files.pythonhosted.org/packages/dd/fc/4e30f069cefa4d66d0e9d127af68efc339c338296bfc7225e70a52237031/django-optimistic-admin-pg-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90c3699700f5d71f5fef6c6763fb75919c7b29ab99252868907e1f8b63b76ab9",
        "md5": "51063818e82875ecebf4e9745c5c45b3",
        "sha256": "349c5f2af79fcda1013ae4b33e56158016f095cd65640e69a2f489c43cc337f4"
      },
      "downloads": -1,
      "filename": "django_optimistic_admin_pg-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "51063818e82875ecebf4e9745c5c45b3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4749,
      "upload_time": "2022-05-04T08:14:22",
      "upload_time_iso_8601": "2022-05-04T08:14:22.940908Z",
      "url": "https://files.pythonhosted.org/packages/90/c3/699700f5d71f5fef6c6763fb75919c7b29ab99252868907e1f8b63b76ab9/django_optimistic_admin_pg-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddfc4e30f069cefa4d66d0e9d127af68efc339c338296bfc7225e70a52237031",
        "md5": "f1b32b16bc161d511ca2b28d02b7ef2e",
        "sha256": "cbee6a3fe4c01b4809b33c790ff1052d2d407b53985b8d94f3ff31d0c9e0abc6"
      },
      "downloads": -1,
      "filename": "django-optimistic-admin-pg-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f1b32b16bc161d511ca2b28d02b7ef2e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4722,
      "upload_time": "2022-05-04T08:14:24",
      "upload_time_iso_8601": "2022-05-04T08:14:24.862823Z",
      "url": "https://files.pythonhosted.org/packages/dd/fc/4e30f069cefa4d66d0e9d127af68efc339c338296bfc7225e70a52237031/django-optimistic-admin-pg-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}