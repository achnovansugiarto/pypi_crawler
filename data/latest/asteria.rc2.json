{
  "info": {
    "author": "isidentical",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Asteria (`Al2O3`)\nMissing AST features\n\n## Features\n- Repr implementation to every node (uses `astpretty` if it is available, if not fall backs to the `ast.dump`)\n- AST Comparisons with other nodes\n- Custom initializer with finding default values according to ASDL spec\n- Shortcuts for `fix_missing_locations`, `compile` (e.g `ast.parse(\"2+2\").compile()`)\n- Unparsing shortcuts, `ast.parse(\"2+2\").to_source()`. It uses astor if its available, if not it fallbacks to the `ast.unparse` interface.\n- Parent/Child relationships to nodes\n- Helpers functions for mutating tree (like `add_global` method to `Module` nodes which inserts given node at the top of body)\n- Symbol table access with `get_symbol_table` method\n- and many more...\n\n## Demo\n```py\n>>> import ast\n>>> import asteria\n>>> ast.parse(\"2+2\") == ast.parse(\"2+2\")\nTrue\n>>> ast.parse(\"2+2\").body[0].value\nBinOp(\n    left=Constant(value=2, kind=None),\n    op=Add(),\n    right=Constant(value=2, kind=None),\n)\n>>> ast.parse(\"print(2+2)\").compile()\n<code object <module> at 0x7f2602f21450, file \"<ASTERIA>\", line 1>\n>>> eval(_)\n4\n>>> ast.parse(\"import asteria\").to_source()\n'import asteria'\n>>> sample = ast.parse(\"2+2\")\n>>> sample.parentize()\n>>> sample.body[0].value.left.parent\nBinOp(\n    left=Constant(value=2, kind=None),\n    op=Add(),\n    right=Constant(value=2, kind=None),\n)\n>>> sample.body[0].value.parent\nExpr(\n    value=BinOp(\n        left=Constant(value=2, kind=None),\n        op=Add(),\n        right=Constant(value=2, kind=None),\n    ),\n)\n>>> some_try = ast.parse(\"\"\"\\\n... try:                \n...     def x():        \n...             print(1)\n... finally: pass       \n... \"\"\")\n>>> some_try.parentize()\n>>> some_try.body[0].body[0].body[0].value\nCall(\n    func=Name(id='print', ctx=Load()),\n    args=[Constant(value=1, kind=None)],\n    keywords=[],\n)\n>>> len(tuple(some_try.body[0].body[0].body[0].value.until_parented_by(ast.Try)))\n3\n>>> some_try.add_global(ast.parse(\"print('lol')\").body[0])\n>>> print(some_try.to_source())\nprint('lol')\ntry:\n\n    def x():\n        print(1)\nfinally:\n    pass\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/isidentical/asteria",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asteria",
    "package_url": "https://pypi.org/project/asteria/",
    "platform": "",
    "project_url": "https://pypi.org/project/asteria/",
    "project_urls": {
      "Homepage": "https://github.com/isidentical/asteria"
    },
    "release_url": "https://pypi.org/project/asteria/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Missing AST features",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6635947,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bcd43c480ef2f12f1ea300b370340f5539a15087534404c4819164f76b59cf9",
          "md5": "a8db9a9e54dd3f6a16ab905fc788ee11",
          "sha256": "80b76d210fd6504b669c53aaaea45c8ffb60c6017d73a85b9e9e2d619d922c40"
        },
        "downloads": -1,
        "filename": "asteria-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a8db9a9e54dd3f6a16ab905fc788ee11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3592,
        "upload_time": "2020-02-15T09:19:10",
        "upload_time_iso_8601": "2020-02-15T09:19:10.877052Z",
        "url": "https://files.pythonhosted.org/packages/0b/cd/43c480ef2f12f1ea300b370340f5539a15087534404c4819164f76b59cf9/asteria-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0445ef5cc71cdb44a91b4a0aa3fff8c6f660d082911ade053ca7bb2de0e1f940",
          "md5": "8ac25bcc5d889567654241651f55848e",
          "sha256": "852ced0ee2bb064908b98748c0b4ddc2d0c7d8d71a4885b9efe0c1aff49a8e7b"
        },
        "downloads": -1,
        "filename": "asteria-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8ac25bcc5d889567654241651f55848e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 4750,
        "upload_time": "2020-02-15T10:33:52",
        "upload_time_iso_8601": "2020-02-15T10:33:52.322887Z",
        "url": "https://files.pythonhosted.org/packages/04/45/ef5cc71cdb44a91b4a0aa3fff8c6f660d082911ade053ca7bb2de0e1f940/asteria-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0445ef5cc71cdb44a91b4a0aa3fff8c6f660d082911ade053ca7bb2de0e1f940",
        "md5": "8ac25bcc5d889567654241651f55848e",
        "sha256": "852ced0ee2bb064908b98748c0b4ddc2d0c7d8d71a4885b9efe0c1aff49a8e7b"
      },
      "downloads": -1,
      "filename": "asteria-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8ac25bcc5d889567654241651f55848e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 4750,
      "upload_time": "2020-02-15T10:33:52",
      "upload_time_iso_8601": "2020-02-15T10:33:52.322887Z",
      "url": "https://files.pythonhosted.org/packages/04/45/ef5cc71cdb44a91b4a0aa3fff8c6f660d082911ade053ca7bb2de0e1f940/asteria-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}