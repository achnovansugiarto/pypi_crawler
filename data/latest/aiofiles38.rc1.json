{
  "info": {
    "author": "Tin Tvrtkovic",
    "author_email": "tinchester@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: System :: Filesystems"
    ],
    "description": "aiofiles: file support for asyncio\n==================================\n\n.. image:: https://img.shields.io/pypi/v/aiofiles.svg\n        :target: https://pypi.python.org/pypi/aiofiles\n\n.. image:: https://travis-ci.org/Tinche/aiofiles.svg?branch=master\n        :target: https://travis-ci.org/Tinche/aiofiles\n\n.. image:: https://codecov.io/gh/Tinche/aiofiles/branch/master/graph/badge.svg\n        :target: https://codecov.io/gh/Tinche/aiofiles\n\n.. image:: https://img.shields.io/pypi/pyversions/aiofiles.svg\n        :target: https://github.com/Tinche/aiofiles\n        :alt: Supported Python versions\n\n**aiofiles** is an Apache2 licensed library, written in Python, for handling local\ndisk files in asyncio applications.\n\nOrdinary local file IO is blocking, and cannot easily and portably made\nasynchronous. This means doing file IO may interfere with asyncio applications,\nwhich shouldn't block the executing thread. aiofiles helps with this by\nintroducing asynchronous versions of files that support delegating operations to\na separate thread pool.\n\n.. code-block:: python\n\n    async with aiofiles.open('filename', mode='r') as f:\n        contents = await f.read()\n    print(contents)\n    'My file contents'\n\nAsynchronous iteration is also supported.\n\n.. code-block:: python\n\n    async with aiofiles.open('filename') as f:\n        async for line in f:\n            ...\n\nFeatures\n--------\n\n- a file API very similar to Python's standard, blocking API\n- support for buffered and unbuffered binary files, and buffered text files\n- support for ``async``/``await`` (:PEP:`492`) constructs\n\n\nInstallation\n------------\n\nTo install aiofiles, simply:\n\n.. code-block:: bash\n\n    $ pip install aiofiles\n\nUsage\n-----\n\nFiles are opened using the ``aiofiles.open()`` coroutine, which in addition to\nmirroring the builtin ``open`` accepts optional ``loop`` and ``executor``\narguments. If ``loop`` is absent, the default loop will be used, as per the\nset asyncio policy. If ``executor`` is not specified, the default event loop\nexecutor will be used.\n\nIn case of success, an asynchronous file object is returned with an\nAPI identical to an ordinary file, except the following methods are coroutines\nand delegate to an executor:\n\n* ``close``\n* ``flush``\n* ``isatty``\n* ``read``\n* ``readall``\n* ``read1``\n* ``readinto``\n* ``readline``\n* ``readlines``\n* ``seek``\n* ``seekable``\n* ``tell``\n* ``truncate``\n* ``writable``\n* ``write``\n* ``writelines``\n\nIn case of failure, one of the usual exceptions will be raised.\n\nThe ``aiofiles.os`` module contains executor-enabled coroutine versions of\nseveral useful ``os`` functions that deal with files:\n\n* ``stat``\n* ``sendfile``\n* ``rename``\n* ``remove``\n* ``mkdir``\n* ``rmdir``\n\nWriting tests for aiofiles\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReal file IO can be mocked by patching ``aiofiles.threadpool.sync_open``\nas desired. The return type also needs to be registered with the\n``aiofiles.threadpool.wrap`` dispatcher:\n\n.. code-block:: python\n\n    aiofiles.threadpool.wrap.register(mock.MagicMock)(\n        lambda *args, **kwargs: threadpool.AsyncBufferedIOBase(*args, **kwargs))\n\n    async def test_stuff():\n        data = 'data'\n        mock_file = mock.MagicMock()\n\n        with mock.patch('aiofiles.threadpool.sync_open', return_value=mock_file) as mock_open:\n            async with aiofiles.open('filename', 'w') as f:\n                await f.write(data)\n\n            mock_file.write.assert_called_once_with(data)\n\nHistory\n~~~~~~~\n\n0.4.0 (2018-08-11)\n``````````````````\n- Python 3.7 support.\n- Removed Python 3.3/3.4 support. If you use these versions, stick to aiofiles 0.3.x.\n\n0.3.2 (2017-09-23)\n``````````````````\n- The LICENSE is now included in the sdist.\n  `#31 <https://github.com/Tinche/aiofiles/pull/31>`_\n\n0.3.1 (2017-03-10)\n``````````````````\n\n- Introduced a changelog.\n- ``aiofiles.os.sendfile`` will now work if the standard ``os`` module contains a ``sendfile`` function.\n\nContributing\n~~~~~~~~~~~~\nContributions are very welcome. Tests can be run with ``tox``, please ensure\nthe coverage at least stays the same before you submit a pull request.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kasheemlew/aiofiles",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiofiles38",
    "package_url": "https://pypi.org/project/aiofiles38/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiofiles38/",
    "project_urls": {
      "Homepage": "https://github.com/kasheemlew/aiofiles"
    },
    "release_url": "https://pypi.org/project/aiofiles38/0.5.0.dev0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "this will be removed after the origin aiofiles38 supports new versions of Python",
    "version": "0.5.0.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6285413,
  "releases": {
    "0.5.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cea10d6892392519edc817eca63361ea2787f155f003701a48e95c2bf5d29b8",
          "md5": "eb305b24ec8084676c13f16be9bb5029",
          "sha256": "f05fdfa125364521897cbbf43b0974b3936e2c27496c6a7b25aa15d7a1e4f1b5"
        },
        "downloads": -1,
        "filename": "aiofiles38-0.5.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "eb305b24ec8084676c13f16be9bb5029",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9317,
        "upload_time": "2019-12-12T11:23:44",
        "upload_time_iso_8601": "2019-12-12T11:23:44.474302Z",
        "url": "https://files.pythonhosted.org/packages/5c/ea/10d6892392519edc817eca63361ea2787f155f003701a48e95c2bf5d29b8/aiofiles38-0.5.0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cea10d6892392519edc817eca63361ea2787f155f003701a48e95c2bf5d29b8",
        "md5": "eb305b24ec8084676c13f16be9bb5029",
        "sha256": "f05fdfa125364521897cbbf43b0974b3936e2c27496c6a7b25aa15d7a1e4f1b5"
      },
      "downloads": -1,
      "filename": "aiofiles38-0.5.0.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "eb305b24ec8084676c13f16be9bb5029",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9317,
      "upload_time": "2019-12-12T11:23:44",
      "upload_time_iso_8601": "2019-12-12T11:23:44.474302Z",
      "url": "https://files.pythonhosted.org/packages/5c/ea/10d6892392519edc817eca63361ea2787f155f003701a48e95c2bf5d29b8/aiofiles38-0.5.0.dev0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}