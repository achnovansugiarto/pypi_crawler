{
  "info": {
    "author": "Stefan Binder",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# pipecutter <!-- omit in toc -->\n[![PyPI version](http://img.shields.io/pypi/v/pipecutter.svg?style=flat-square&color=blue)](https://pypi.python.org/pypi/pipecutter/) [![Python versions](https://img.shields.io/pypi/pyversions/pipecutter.svg?style=flat-square&color=blue)]() [![build status](http://img.shields.io/travis/binste/pipecutter/master.svg?style=flat)](https://travis-ci.org/binste/pipecutter) [![coverage](https://img.shields.io/codecov/c/github/binste/pipecutter/master.svg?style=flat)](https://codecov.io/gh/binste/pipecutter?branch=master)\n\npipecutter provides a few tools for luigi such that it works better with data science libraries and environments such as pandas, scikit-learn, and Jupyter notebooks.\n\n# Table of contents <!-- omit in toc -->\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Debug in an interactive environment](#debug-in-an-interactive-environment)\n  - [Targets](#targets)\n  - [Full example](#full-example)\n\n# Installation\n```bash\npip install pipecutter\n```\n\nPython 3.6+ is required. pipecutter follows [semantic versioning](https://semver.org/).\n\n# Usage\npipecutter currently provides\n\n* a more convenient way to run and debug luigi tasks in interactive environments such as Jupyter notebooks\n* some luigi targets for saving pandas dataframes to parquet, scikit-learn models with joblib, ...\n\n## Debug in an interactive environment\nWith luigi, you can already run tasks in a Python script/Jupyter notebook/Python console by using the `luigi.build` function (probably with `local_scheduler=True` as arugment). However, if the tasks throws an exception this will be caught by luigi and you are not able to drop into a post mortem debugging session. `pipecutter.run` is a light wrapper around `luigi.build` which disables this exception handling.\n\n```python\nIn [1]: import luigi\nIn [2]: import pipecutter\n\nIn [3]: class TaskWhichFails(luigi.Task):\n   ...:     def run(self):\n   ...:         raise Exception(\"Something is wrong\")\n\n# Traceback below is shortened for readability\nIn [4]: pipecutter.run(TaskWhichFails())\n---------------------------------------------------------------------------\nException                                 Traceback (most recent call last)\n<ipython-input-5-a970d52d810a> in <module>\n----> 1 pipecutter.run(TaskWhichFails())\n\n...\n\n<ipython-input-3-4e27674090fa> in run(self)\n      1 class TaskWhichFails(luigi.Task):\n      2     def run(self):\n----> 3         raise Exception\n\nException: Something is wrong\n\n# Drop straight into the debugger\nIn [5]: %debug\n> <ipython-input-6-e7528a27d82e>(3)run()\n      1 class TaskWhichFails(luigi.Task):\n      2     def run(self):\n----> 3         raise Exception\n      4\nipdb>\n```\nThis should reduce the barrier for already using luigi tasks while developing a model and thereby making it easier to move into production later on.\n\nAdditionally, you can print the dependencies of tasks with `pipecutter.print_tree` (wrapper around `luigi.tools.deps_tree.print_tree`) or build a graphviz Graph with `pipecutter.build_graph` which you can save as .png, .pdf, etc. or directly view in your Jupyter notebook. See the Full Example for a screenshot of how this looks. The `build_graph` function requires you to have [graphviz installed](https://graphviz.readthedocs.io/en/stable/manual.html#installation).\n\n## Targets\nIn `pipecutter.targets` you find a few targets which build on luigi's `LocalTarget` but additionally have a `load` and a `dump` method. A convenient way to name the targets is hereby to use the `task_id` in the name, which is unique with respect to the task name and its passed in parameters.\n\n```python\nimport luigi\nimport pipecutter\nfrom pipecutter.targets import JoblibTarget\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nclass TrainModel(luigi.Task):\n    n_estimators = luigi.IntParameter()\n\n    def output(self):\n        return JoblibTarget(self.task_id + \".joblib\")\n\n    def run(self):\n        model = RandomForestClassifier(n_estimators=self.n_estimators)\n        self.output().dump(model)\n\n\npipecutter.run(TrainModel(n_estimators=100))\n# -> Produces a file called TrainModel_100_0b0ec0cdea.joblib\n```\n\nIf you use `task_id` in the filename the above task can be written more concise with the `pipecutter.targets.outputs` decorator which adds the `output` method. By default it puts the files in a folder called `data`. This can be adjusted by the optional `folder` argument.\n\n```python\nfrom pipeline.targets import outputs\n\n\n@outputs(JoblibTarget)\nclass TrainModel(luigi.Task):\n    n_estimators = luigi.IntParameter()\n\n    def run(self):\n        model = RandomForestClassifier(n_estimators=self.n_estimators)\n        self.output().dump(model)\n```\n\n## Full example\n```python\nimport luigi\nimport pandas as pd\nimport numpy as np\nimport pipecutter\nfrom luigi.util import requires\nfrom pipecutter.targets import outputs, JoblibTarget, ParquetTarget\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n@outputs(ParquetTarget)\nclass PrepareData(luigi.Task):\n    drop_missings = luigi.BoolParameter()\n\n    def run(self):\n        train_df = pd.DataFrame.from_dict({\"A\": [0, 1, np.nan], \"B\": [5, 1, 2], \"label\": [0, 1, 1]})\n        if self.drop_missings:\n            train_df = train_df.dropna()\n\n        self.output().dump(train_df)\n\n\n@requires(PrepareData)\n@outputs(JoblibTarget)\nclass TrainModel(luigi.Task):\n    n_estimators = luigi.IntParameter()\n\n    def run(self):\n        train_df = self.input().load()\n        X, y = train_df.drop(\"label\", axis=1), train_df[\"label\"]\n\n        model = RandomForestClassifier(n_estimators=self.n_estimators)\n        model.fit(X, y)\n\n        self.output().dump(model)\n\n\ntrain_model = TrainModel(n_estimators=100, drop_missings=True)\npipecutter.build_graph(train_model)\n```\n\nThe last command can be used to visualize the dependency tree, which is especially useful if your pipelines are more complex. It returns a `graphviz.Digraph` object which will render in a Jupyter Notebook as\n\n![build graph example](https://raw.githubusercontent.com/binste/pipecutter/master/images/build_graph_example.png)\n\nFinally, run the tasks with:\n```\npipecutter.run(train_model)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/binste/pipecutter",
    "keywords": "luigi,spotify,pipeline,plumber,workflow,batch,dependency resolution,jupyter,interactive,targets",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pipecutter",
    "package_url": "https://pypi.org/project/pipecutter/",
    "platform": "",
    "project_url": "https://pypi.org/project/pipecutter/",
    "project_urls": {
      "Homepage": "https://github.com/binste/pipecutter"
    },
    "release_url": "https://pypi.org/project/pipecutter/2.0.0/",
    "requires_dist": [
      "pandas (>=0.21)",
      "joblib (>=0.11)",
      "luigi (>=2.8.5)",
      "pyarrow",
      "black ; extra == 'dev'",
      "graphviz ; extra == 'graphviz'",
      "pytest ; extra == 'test'",
      "flake8 ; extra == 'test'",
      "mypy ; extra == 'test'",
      "black ; extra == 'test'"
    ],
    "requires_python": ">=3.6,<3.8",
    "summary": "pipecutter provides a few tools for luigi such that it works better with data science libraries and environments such as pandas, scikit-learn, and Jupyter notebooks.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6521288,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3819dc584560f4e0d51bef0bcfb1c6ab7438cdbf221fbcfc8962aa01c17e9de5",
          "md5": "da967e3248c18e591318b8da4bc405d5",
          "sha256": "9b16dc57695c98f21dd5f8d243feee132686bddac25a971c3e517b852384cefe"
        },
        "downloads": -1,
        "filename": "pipecutter-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da967e3248c18e591318b8da4bc405d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.8",
        "size": 4046,
        "upload_time": "2020-01-03T10:26:12",
        "upload_time_iso_8601": "2020-01-03T10:26:12.186607Z",
        "url": "https://files.pythonhosted.org/packages/38/19/dc584560f4e0d51bef0bcfb1c6ab7438cdbf221fbcfc8962aa01c17e9de5/pipecutter-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7745956c043180450943550ad281dab0f894d0f3467a735f916f513365c15607",
          "md5": "3c623274b3a45e45b3602d5ce3e8b00e",
          "sha256": "ea656ca80a4b27cd4f36949c17ee68b6e95e68596a09dce2abddb72e5fe4f2b4"
        },
        "downloads": -1,
        "filename": "pipecutter-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c623274b3a45e45b3602d5ce3e8b00e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.8",
        "size": 2614,
        "upload_time": "2020-01-03T10:26:14",
        "upload_time_iso_8601": "2020-01-03T10:26:14.606205Z",
        "url": "https://files.pythonhosted.org/packages/77/45/956c043180450943550ad281dab0f894d0f3467a735f916f513365c15607/pipecutter-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "567b93deb829813abdc541241bdebe95ba55987e449d4be02b9f10b557429c0c",
          "md5": "eca5ee8b85488523caa5c9fceececa1c",
          "sha256": "9ff2bdf50e3d2f2a57b4771ba53fb80717eb5747f350cfda0c2b45561fff60bc"
        },
        "downloads": -1,
        "filename": "pipecutter-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eca5ee8b85488523caa5c9fceececa1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.8",
        "size": 4044,
        "upload_time": "2020-01-03T10:32:03",
        "upload_time_iso_8601": "2020-01-03T10:32:03.171753Z",
        "url": "https://files.pythonhosted.org/packages/56/7b/93deb829813abdc541241bdebe95ba55987e449d4be02b9f10b557429c0c/pipecutter-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9280c707c80dbc899a35f8745fb7993abe8b8709103986b4b47627e1cf3d8d04",
          "md5": "1a8066866bda70006639bb8c4522337b",
          "sha256": "db109155b44f1d34a393d75868300e85c682261d2e0723aa27fbcac7ec01c4fd"
        },
        "downloads": -1,
        "filename": "pipecutter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a8066866bda70006639bb8c4522337b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.8",
        "size": 2555,
        "upload_time": "2020-01-03T10:32:05",
        "upload_time_iso_8601": "2020-01-03T10:32:05.133872Z",
        "url": "https://files.pythonhosted.org/packages/92/80/c707c80dbc899a35f8745fb7993abe8b8709103986b4b47627e1cf3d8d04/pipecutter-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7737605303a5bb36000a20acbce7efb4f68de4395170f796a0d8571f472aa323",
          "md5": "1d1729fda1bee009e8415a7670ca5de1",
          "sha256": "d2bfdf5f09ce209bfbda28f9f5838e9276433411ece7160d93f865aca03cf515"
        },
        "downloads": -1,
        "filename": "pipecutter-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d1729fda1bee009e8415a7670ca5de1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.8",
        "size": 5309,
        "upload_time": "2020-01-05T19:38:30",
        "upload_time_iso_8601": "2020-01-05T19:38:30.927902Z",
        "url": "https://files.pythonhosted.org/packages/77/37/605303a5bb36000a20acbce7efb4f68de4395170f796a0d8571f472aa323/pipecutter-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "066c5cb026439367bd92fb9f72b9f980ea828f8c7ec66b778bc884c32cab745d",
          "md5": "6268dd09bf0f301087ce383fea491c23",
          "sha256": "a7f780fad5741129f64735b7277905002098421575109c88b2e62b8745e051ac"
        },
        "downloads": -1,
        "filename": "pipecutter-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6268dd09bf0f301087ce383fea491c23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.8",
        "size": 4109,
        "upload_time": "2020-01-05T19:38:34",
        "upload_time_iso_8601": "2020-01-05T19:38:34.018874Z",
        "url": "https://files.pythonhosted.org/packages/06/6c/5cb026439367bd92fb9f72b9f980ea828f8c7ec66b778bc884c32cab745d/pipecutter-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55c34d0a4669cc130a19a2fc1a051540e9e7c934500fc6a13dd177e90c642d44",
          "md5": "bcb6df273e86dd9e84b502e3c787f3e1",
          "sha256": "62a48b82eb003660fcec8c9a6a432af4a5d24e401299fdcd33093d958853ac95"
        },
        "downloads": -1,
        "filename": "pipecutter-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcb6df273e86dd9e84b502e3c787f3e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.8",
        "size": 5383,
        "upload_time": "2020-01-11T13:03:36",
        "upload_time_iso_8601": "2020-01-11T13:03:36.649945Z",
        "url": "https://files.pythonhosted.org/packages/55/c3/4d0a4669cc130a19a2fc1a051540e9e7c934500fc6a13dd177e90c642d44/pipecutter-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baf50dfc287d9847693108e4e22f7356a5bac6a1c67ae66f7a334a29a10464cb",
          "md5": "4710d80e0d96f878742b39e718255652",
          "sha256": "3f022bfb6fc962d0e36bb318ab6caaf4d7747d861513b6c765e35f8c8cd459a7"
        },
        "downloads": -1,
        "filename": "pipecutter-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4710d80e0d96f878742b39e718255652",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.8",
        "size": 4278,
        "upload_time": "2020-01-11T13:03:41",
        "upload_time_iso_8601": "2020-01-11T13:03:41.150415Z",
        "url": "https://files.pythonhosted.org/packages/ba/f5/0dfc287d9847693108e4e22f7356a5bac6a1c67ae66f7a334a29a10464cb/pipecutter-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56fae4f48b2d755374669b7544de1c9d0a6ffd0422e6b0eca25a12451136dd50",
          "md5": "420b5df6f22f2a68973d645596316622",
          "sha256": "46cccd9a0c9567725acfdf591c1ae594d182c8b626f3caf8fc7d6a7a23f1598e"
        },
        "downloads": -1,
        "filename": "pipecutter-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "420b5df6f22f2a68973d645596316622",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.8",
        "size": 6014,
        "upload_time": "2020-01-18T16:30:44",
        "upload_time_iso_8601": "2020-01-18T16:30:44.186792Z",
        "url": "https://files.pythonhosted.org/packages/56/fa/e4f48b2d755374669b7544de1c9d0a6ffd0422e6b0eca25a12451136dd50/pipecutter-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16ebd210848a78f81c63afa1ede9f70dd8600031f245215d3e94d36154c9b5f8",
          "md5": "ec14b870ef00fa919dd83bde28b73e6b",
          "sha256": "256a89fd1296392539b0f9919b556be410263f5008e2b71daac2e3f392cec0f0"
        },
        "downloads": -1,
        "filename": "pipecutter-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ec14b870ef00fa919dd83bde28b73e6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.8",
        "size": 4976,
        "upload_time": "2020-01-18T16:30:52",
        "upload_time_iso_8601": "2020-01-18T16:30:52.150977Z",
        "url": "https://files.pythonhosted.org/packages/16/eb/d210848a78f81c63afa1ede9f70dd8600031f245215d3e94d36154c9b5f8/pipecutter-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbbffd3282c5cc8e1eaaab30d1d1b10d74c44684ec1a99d03990391757fa2b5a",
          "md5": "dda8a663906cd8f831b20a35c016afad",
          "sha256": "90445c92548ff8ec7eb9b78cba826c3fd7b9ad71b14b2e72f851641168b3788e"
        },
        "downloads": -1,
        "filename": "pipecutter-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dda8a663906cd8f831b20a35c016afad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.8",
        "size": 7133,
        "upload_time": "2020-01-26T08:55:39",
        "upload_time_iso_8601": "2020-01-26T08:55:39.454616Z",
        "url": "https://files.pythonhosted.org/packages/bb/bf/fd3282c5cc8e1eaaab30d1d1b10d74c44684ec1a99d03990391757fa2b5a/pipecutter-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbbffd3282c5cc8e1eaaab30d1d1b10d74c44684ec1a99d03990391757fa2b5a",
        "md5": "dda8a663906cd8f831b20a35c016afad",
        "sha256": "90445c92548ff8ec7eb9b78cba826c3fd7b9ad71b14b2e72f851641168b3788e"
      },
      "downloads": -1,
      "filename": "pipecutter-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dda8a663906cd8f831b20a35c016afad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<3.8",
      "size": 7133,
      "upload_time": "2020-01-26T08:55:39",
      "upload_time_iso_8601": "2020-01-26T08:55:39.454616Z",
      "url": "https://files.pythonhosted.org/packages/bb/bf/fd3282c5cc8e1eaaab30d1d1b10d74c44684ec1a99d03990391757fa2b5a/pipecutter-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}