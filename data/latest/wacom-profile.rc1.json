{
  "info": {
    "author": "Aaron Segura",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Flake8",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# wacom_profile\n\nThis python script will allow you to control the modes of your Wacom Intuos Pro tablet touch ring in linux by clicking the button in the middle of the ring.\n\nInstallation\n------------\n\n\t$ python -mpip install wacom_profile\n\nMake sure you have `xsetwacom` installed in your operating system.\n\nUsage\n-----\n\twacom_profile [-h] [-c /path/to/file.ini] [-p PROFILE] [-d]\n\n\tHandle Wacom Intuos Pro 5 ring function swapping. You know, for kids.\n\n\toptional arguments:\n  \t-h, --help            show this help message and exit\n  \t-c /path/to/file.ini  Configuration File. Default $HOME/.wacomProfile\n  \t-p PROFILE            Profile to execute.\n  \t-d                    Debug - Crank up the output\n\nConfig File Format\n------------------\n\nDefault location is $HOME/.wacomProfile\n\nConfiguration is in argparse/INI format.  The only required section is `[defaults]` and the only required option is `device_id`.  This `device_id` can be found by running `lsusb` and copying the ID from the output there.  See the example config.cfg file.\n\nYou must also supply at least one stanza for each profile you want to create.\n\n\t[defaults]\n\tdevice_id = XXXX:XXXX\n\n\nProfiles\n--------\n\nProfiles are defined in the config file in the section headers.  For example:\n\n\t[krita:0]\n\tAbsWheelDown =  Button +4\n\tAbsWheelUp = Button +5\n\tButton 2 = key +ctrl +shift +z\n\tButton 8 = key +ctrl +z\n\tButton 9 = key +ctrl\n\nThis section header defines the actions that will be taken when `-p krita` is passed and the LED is in position 0 (upper-left corner).\n\nLED Positions:\n\n\t0 - Upper-left\n\t1 - Upper-right\n\t2 - Lower-right\n\t3 - Lower-left\n\nButtons:\n\n\tButton 2 - Upper top button\n   \tButton 3 - Middle top Button\n   \tButton 8 - Lower top Button\n\n   \tButton 9 -  Upper bottom button\n   \tButton 10 - Middle bottom button\n   \tButton 11 - Lower bottom button\n\nTouchRing Actions:\n\n   \tAbsWheelUp - Scroll Up\n   \tAbsWheelDown - Scroll Down\n\nYou don't have to define all LED positions.  No action will be taken if you select a mode that isn't defined.\n\nValid options in each section are either buttons or touchring actions.  If you define a blank action (eg, \"`button 1 = `\"), that item is reset to tablet defaults.\n\nSee the example config.cfg for a working example.\n\nIf no profile is provided on the command line with -p, the script will look for a profile called \"defaults\".\n\nJust Turrible\n-------------\n* Unpredictable results if using multiple tablets.  Do people even do that?\n* USB Stuff is mostly untested in most situations.  It worked once for me, so it might work for you.  Submit a bug if not.\n* Only works on Linux.\n* Uses `lsusb` and `sysfs` to get LED status.  Anyone willing to help port over to pyusb, if possible, would be appreciated.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "wacom,intuos",
    "license": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wacom-profile",
    "package_url": "https://pypi.org/project/wacom-profile/",
    "platform": null,
    "project_url": "https://pypi.org/project/wacom-profile/",
    "project_urls": {
      "Bug Tracker": "https://github.com/aaronsegura/wacom_profile/issues",
      "Homepage": "https://github.com/aaronsegura/wacom_profile"
    },
    "release_url": "https://pypi.org/project/wacom-profile/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Wacom Intuos tablet command mapping.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17529125,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6b5b1948c2230251228c520291e400d240d677d108e1d92a52986ff8b4cccd0",
          "md5": "c02a00a53439a4076169e65e4d93112a",
          "sha256": "8c26305773154962a1648916c9b9479773c503f680dd1571850aef9df2f85cb0"
        },
        "downloads": -1,
        "filename": "wacom_profile-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c02a00a53439a4076169e65e4d93112a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 5448,
        "upload_time": "2023-03-31T15:48:04",
        "upload_time_iso_8601": "2023-03-31T15:48:04.462421Z",
        "url": "https://files.pythonhosted.org/packages/f6/b5/b1948c2230251228c520291e400d240d677d108e1d92a52986ff8b4cccd0/wacom_profile-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f7b501d8fcd3444f85a60036c92f44dad72a162929a0ac0d1877d69e70592f3",
          "md5": "4d13a4768cbf234a2210b5560c0f02cb",
          "sha256": "d034297b46f1097322ff884640798995fd90a3f742cf6ef5a9ace156e9c15711"
        },
        "downloads": -1,
        "filename": "wacom_profile-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d13a4768cbf234a2210b5560c0f02cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5671,
        "upload_time": "2023-03-31T15:48:08",
        "upload_time_iso_8601": "2023-03-31T15:48:08.370749Z",
        "url": "https://files.pythonhosted.org/packages/6f/7b/501d8fcd3444f85a60036c92f44dad72a162929a0ac0d1877d69e70592f3/wacom_profile-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6b5b1948c2230251228c520291e400d240d677d108e1d92a52986ff8b4cccd0",
        "md5": "c02a00a53439a4076169e65e4d93112a",
        "sha256": "8c26305773154962a1648916c9b9479773c503f680dd1571850aef9df2f85cb0"
      },
      "downloads": -1,
      "filename": "wacom_profile-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c02a00a53439a4076169e65e4d93112a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 5448,
      "upload_time": "2023-03-31T15:48:04",
      "upload_time_iso_8601": "2023-03-31T15:48:04.462421Z",
      "url": "https://files.pythonhosted.org/packages/f6/b5/b1948c2230251228c520291e400d240d677d108e1d92a52986ff8b4cccd0/wacom_profile-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f7b501d8fcd3444f85a60036c92f44dad72a162929a0ac0d1877d69e70592f3",
        "md5": "4d13a4768cbf234a2210b5560c0f02cb",
        "sha256": "d034297b46f1097322ff884640798995fd90a3f742cf6ef5a9ace156e9c15711"
      },
      "downloads": -1,
      "filename": "wacom_profile-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4d13a4768cbf234a2210b5560c0f02cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 5671,
      "upload_time": "2023-03-31T15:48:08",
      "upload_time_iso_8601": "2023-03-31T15:48:08.370749Z",
      "url": "https://files.pythonhosted.org/packages/6f/7b/501d8fcd3444f85a60036c92f44dad72a162929a0ac0d1877d69e70592f3/wacom_profile-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}