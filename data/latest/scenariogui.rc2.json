{
  "info": {
    "author": "Tobias Blanke",
    "author_email": "blanke@fh-aachen.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ScenarioGUI: An open-source tool for an easy way to create graphical user interfaces\r\n\r\n[![PyPI version](https://badge.fury.io/py/ScenarioGUI.svg)](https://badge.fury.io/py/ScenarioGUI)\r\n[![Tests](https://github.com/tblanke/ScenarioGUI/actions/workflows/test.yml/badge.svg)](https://github.com/tblanke/ScenarioGUI/actions/workflows/test.yml)\r\n[![codecov](https://codecov.io/gh/tblanke/ScenarioGUI/branch/main/graph/badge.svg?token=P7WX73BTVH)](https://codecov.io/gh/tblanke/ScenarioGUI)\r\n[![Downloads](https://static.pepy.tech/personalized-badge/scenariogui?period=total&units=international_system&left_color=black&right_color=blue&left_text=Downloads)](https://pepy.tech/project/scenariogui)\r\n[![Downloads](https://static.pepy.tech/personalized-badge/scenariogui?period=week&units=international_system&left_color=black&right_color=orange&left_text=Downloads%20last%20week)](https://pepy.tech/project/scenariogui)\r\n[![Documentation Status](https://readthedocs.org/projects/scenariogui/badge/?version=latest)](https://scenariogui.readthedocs.io/en/latest/?badge=latest)\r\n\r\n## What is *ScenarioGUI*?\r\n\r\n<img src=\"https://raw.githubusercontent.com/tblanke/ScenarioGUI/main/ScenarioGUI/icons/icon.svg?token=GHSAT0AAAAAAB35NE3HTGDVH5ORMOVJSVC4ZAUOABA\" width=\"110\" align=\"left\">\r\n\r\nScenarioGUI is a Python package that contains many functionalities to design your own Graphical User Interfaces (GUI). It should help to create and maintain \r\nscenario based GUIs.\r\n\r\n#### Read The Docs\r\nScenarioGUI has an elaborate documentation were all the functionalities of the tool are explained, with examples.\r\nThis can be found on [ScenarioGUI.readthedocs.io](https://scenariogui.readthedocs.io).\r\n\r\n\r\n## Requirements\r\nThis code is tested with Python 3.10 and 3.11 and requires the following libraries (the versions mentioned are the ones with which the code is tested)\r\n\r\n* PySide6>=6.4.1\r\n* matplotlib>=3.5.2\r\n* numpy>=1.23.1\r\n* pandas>=1.4.3\r\n* black>=23.1.0\r\n\r\nFor the tests\r\n\r\n* pytest>=7.1.2\r\n* pytest-cov>=3.0.0\r\n* pytest-timeout>=2.1.0\r\n* pytest-qt>=4.1.0\r\n* keyboard>=0.13.5\r\n\r\n## Quick start\r\n### Installation\r\n\r\nOne can install ScenarioGUI by running Pip and running the command\r\n\r\n```\r\npip install ScenarioGUI\r\n```\r\n\r\nDevelopers can clone this repository.\r\n\r\nIt is a good practise to use virtual environments (venv) when working on a (new) Python project so different Python and package versions don't conflict with \r\neachother. For ScenarioGUI, Python 3.10 or higher is recommended. General information about Python virtual environments can be found [here](https://docs.\r\nPython.org/3.9/library/venv.html) and in [this article](https://www.freecodecamp.org/news/how-to-setup-virtual-environments-in-python/).\r\n\r\n\r\n### Get started with ScenarioGUI\r\n\r\nThe GUI can be customized using a gui_config.ini file. There the font and font size can be set. Furthermore, the gui name, icon, version, saving file \r\nextension can be set. Several colors like the DARK background and the LIGHT Foreground color can be set as well. A folder containing an icons folder can be given. This one needs to \r\ncontain at least the icon contained under ScenarioGUI/icons. \r\n\r\n```file\r\n[COLORS]\r\nWHITE: rgb(255, 255, 255)\r\nLIGHT: rgb(84, 188, 235)\r\nLIGHT_SELECT: rgb(42, 126, 179)\r\nDARK: rgb(0, 64, 122)\r\nGREY: rgb(100, 100, 100)\r\nWARNING: rgb(255, 200, 87)\r\nBLACK: rgb(0, 0, 0)\r\n\r\n[DEFAULT]\r\nFILE_EXTENSION: scenario\r\nGUI_NAME: Scenario GUI\r\nICON_NAME: icon.svg\r\nPATH_2_ICONS: ./ScenarioGUI/\r\nFONT_WINDOWS: Arial\r\nFONT_MAC: Helvetica\r\nFONT_SIZE_WINDOWS: 12\r\nFONT_SIZE_MAC: 14\r\n```\r\n\r\nTo create your own GUI part you can inherit from the GuiStructure provided by this lib and add more pages, categories and input field as you like.\r\n\r\n```Python\r\nfrom ScenarioGUI.gui_classes.gui_structure import GuiStructure\r\nfrom ScenarioGUI.gui_classes.gui_structure_classes import (\r\n    Aim,\r\n    ButtonBox,\r\n    Category,\r\n    FigureOption,\r\n    FileNameBox,\r\n    FloatBox,\r\n    FunctionButton,\r\n    Hint,\r\n    IntBox,\r\n    ListBox,\r\n    Page,\r\n    ResultFigure,\r\n    ResultText,\r\n)\r\nfrom typing import TYPE_CHECKING\r\n\r\nif TYPE_CHECKING:\r\n    import PySide6.QtWidgets as QtW\r\n    from examples.translation_class import Translations\r\n\r\nclass GUI(GuiStructure):\r\n    \"\"\"your own customized GUI\"\"\"\r\n    def __init__(self, default_parent: QtW.QWidget, translations: Translations):\r\n        # first init the parent clas\r\n        super().__init__(default_parent, translations)\r\n        # add a first page called \"Inputs\" and has a button name of \"Input\" and has an icon \"Add.svg\"\r\n        self.page_inputs = Page(name=\"Inputs\", button_name=\"Input\", icon=\"Add.svg\")\r\n        # Then several aims can be added to the page with different names and icons\r\n        self.aim_add = Aim(label=\"Adding\", icon=\"Add\", page=self.page_inputs)\r\n        self.aim_sub = Aim(label=\"Substract\", icon=\"Delete\", page=self.page_inputs)\r\n        self.aim_plot = Aim(label=\"Plot\", icon=\"Parameters\", page=self.page_inputs)\r\n        # a category with the label \"Inputs\" can be added to the inputs page like:\r\n        self.category_inputs = Category(label=\"Inputs\", page=self.page_inputs)\r\n        # an integer box can be added with different options like this (some of these options are optional):\r\n        self.int_a = IntBox(label=\"a\",default_value=2,minimal_value=0,maximal_value=200,step=2,category=self.category_inputs)\r\n        # a float box can be added with different options like this (some of these options are optional):\r\n        self.float_b = FloatBox(\r\n            label=\"b\",\r\n            default_value=100,\r\n            minimal_value=0,\r\n            maximal_value=1000,\r\n            decimal_number=2,\r\n            step=0.5,\r\n            category=self.category_inputs,\r\n        )\r\n        # a button box can be added with different options like this\r\n        self.button_box = ButtonBox(label=\"a or b?\", default_index=0, entries=[\"a\", \"b\"], category=self.category_inputs)\r\n        # the button box can also be a list box for many options\r\n        self.list_box = ListBox(label=\"a or b?\", default_index=0, entries=[\"a\", \"b\"], category=self.category_inputs)\r\n        # a filename box can be added with different options like this\r\n        file = \"./example_data.csv\"\r\n        self.filename = FileNameBox(label=\"Filename\", default_value=file, dialog_text=\"Hello\", error_text=\"no file found\", category=self.category_inputs)\r\n        # a function button can be implemented like this:\r\n        self.function_button = FunctionButton(button_text=\"function\", icon=\"Add\", category=self.category_inputs)\r\n        # the function (\"func\") which will be called every time the button is clicked can be defined as follows:\r\n        self.page_inputs.add_function_called_if_button_clicked(func)\r\n        # A Hint can be implemented (if warning is True the option is displayed in WARNING color) like:\r\n        self.hint = Hint(hint=\"Very important hint\", category=self.category_inputs, warning=False)\r\n        # The results page must be created like this:\r\n        self.create_results_page()\r\n        # then a category for numerical results can be added\r\n        self.numerical_results = Category(page=self.page_result, label=\"Numerical results\")\r\n        # A text result calling the get_results function from the ResultsClass and rounding it to 2 decimals can be set like this: \r\n        self.result_text_add = ResultText(\"Result\", category=self.numerical_results, prefix=\"Result: \", suffix=\"m\")\r\n        self.result_text_add.text_to_be_shown(\"ResultsClass\", \"get_result\")\r\n        self.result_text_add.function_to_convert_to_text(lambda x: round(x, 2))\r\n        # a results figure calling the create_plot function from ResultsClass which is returning a tuple of a plt.Figure and plt.Axes can be implemented \r\n        # like this:\r\n        self.figure_results = ResultFigure(label=\"Plot\", page=self.page_result)\r\n        self.figure_results.fig_to_be_shown(class_name=\"ResultsClass\", function_name=\"create_plot\")\r\n        # this figure can then be linked to an option to display the legend like this:\r\n        self.legend_figure_results = FigureOption(\r\n            category=self.figure_results, label=\"Legend on\", param=\"legend\", default=0, entries=[\"No\", \"Yes\"], entries_values=[False, True]\r\n        )        \r\n        # with this function the results options will be displayed if one of the aims is selected\r\n        self.aim_add.add_link_2_show(self.result_text_add)\r\n        self.aim_plot.add_link_2_show(self.figure_results)\r\n        # The settings page must be created like this:\r\n        self.create_settings_page()\r\n        # This function needs to be called to update the page, category and option lists\r\n        self.create_lists()\r\n        # links to next or previous pages can be set like this:\r\n        self.page_inputs.set_next_page(self.page_result)\r\n        self.page_result.set_previous_page(self.page_inputs)\r\n        self.page_result.set_next_page(self.page_settings)\r\n        self.page_result.set_previous_page(self.page_result)\r\n```\r\n\r\nThe ResultsClass needs to have a \"_to_dict\", \"_from_dict\" and all function defined in the ResulText and ResultFigure options. Furthermore, it needs to be \r\ncreatable without any inputs.\r\n\r\n```Python\r\nfrom collections.abc import Callable\r\nimport matplotlib.pyplot as plt\r\n\r\nclass ResultsClass:\r\n    \"\"\"Example results class\"\"\"\r\n    def __init__(self, a: int = 1, b: int = 2):\r\n        self.a = a\r\n        self.b = b\r\n        self.result = None\r\n\r\n    def adding(self):\r\n        \"\"\"adding a and b\"\"\"\r\n        self.result = self.a + self.b\r\n\r\n    def get_result(self) -> float:\r\n        \"\"\"returns the result\"\"\"\r\n        return self.result\r\n\r\n    def create_plot(self, legend: bool = False) -> tuple[plt.Figure, plt.Axes]:\r\n        \"\"\"Creates a plot\"\"\"\r\n        fig = plt.figure()\r\n        ax = fig.add_subplot(111)\r\n        # set axes labels\r\n        ax.set_xlabel(r\"Time (year)\")\r\n        ax.set_ylabel(r\"Temperature ($^\\circ C$)\")\r\n        ax.hlines(self.a, 0, self.b, colors=\"r\", linestyles=\"dashed\", label=\"line\", lw=1)\r\n        if legend:\r\n            ax.legend()\r\n        return fig, ax\r\n\r\n    def _to_dict(self) -> dict:\r\n        \"\"\"creates a dictionary from the class variables\"\"\"\r\n        return {\"a\": self.a, \"b\": self.b, \"result\": self.result}\r\n\r\n    def _from_dict(self, dictionary: dict):\r\n        \"\"\"creates the class from a dictionary\"\"\"\r\n        self.a = dictionary[\"a\"]\r\n        self.b = dictionary[\"b\"]\r\n        self.result = dictionary[\"result\"]\r\n\r\ndef data_2_results(data) -> tuple[ResultsClass, Callable[[], None]]:\r\n    \"\"\"casts the data in the Datastorage to the results class and the function which should be called\"\"\"\r\n    result = ResultsClass(data.int_a, data.float_b)\r\n    return result, result.adding\r\n```\r\n\r\nThe gui can then be start like this:\r\n\r\n```Python\r\nfrom sys import argv, exit as sys_exit\r\n\r\ndef run(path_list=None):  # pragma: no cover\r\n    import PySide6.QtWidgets as QtW\r\n\r\n    from ScenarioGUI.global_settings import FILE_EXTENSION\r\n    from ScenarioGUI.gui_classes.gui_combine_window import MainWindow\r\n    from ScenarioGUI.gui_classes.translation_class import Translations\r\n\r\n    # init application\r\n    app = QtW.QApplication()\r\n    # init window\r\n    window = QtW.QMainWindow()\r\n    # init gui window\r\n    main_window = MainWindow(window, app, GUI, Translations, result_creating_class=ResultsClass, data_2_results_function=data_2_results)\r\n    # load file if it is in path list\r\n    if path_list is not None:\r\n        main_window.filename = (\r\n            [path for path in path_list if path.endswith(f\".{FILE_EXTENSION}\")][0],\r\n            0,\r\n        )\r\n        main_window.fun_load_known_filename()\r\n\r\n    # show window\r\n    window.showMaximized()\r\n    # close app\r\n    sys_exit(app.exec())\r\n\r\n\r\nif __name__ == \"__main__\":  # pragma: no cover\r\n    # pass system args like a file to read\r\n    run(argv if len(argv) > 1 else None)\r\n```\r\n\r\nA full list of functionalities is given below.\r\n\r\n## Functionalities\r\nScenarioGUI offers functionalities of value to all different disciplines which would like to create a GUI for different scenarios. These scenario can thern \r\nbe easily compared. \r\nFor more information about the functionalities of ScenarioGUI, please visit the [ReadTheDocs](https://scenariogui.readthedocs.org).\r\n\r\n## License\r\n\r\n*ScenarioGUI* is licensed under the terms of the 3-clause BSD-license.\r\nSee [ScenarioGUI license](LICENSE).\r\n\r\n## Contact ScenarioGUI\r\n- Do you want to contribute to ScenarioGUI?\r\n- Do you have a great idea for a new feature?\r\n- Do you have a specific remark/problem?\r\n\r\nPlease do contact us at [blanke@fh-aachen.de](mailto:blanke@fh-aachen.de).\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tblanke/ScenarioGUI",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ScenarioGUI",
    "package_url": "https://pypi.org/project/ScenarioGUI/",
    "platform": null,
    "project_url": "https://pypi.org/project/ScenarioGUI/",
    "project_urls": {
      "Homepage": "https://github.com/tblanke/ScenarioGUI"
    },
    "release_url": "https://pypi.org/project/ScenarioGUI/0.1.1/",
    "requires_dist": [
      "matplotlib (>=3.5.2)",
      "numpy (>=1.23.1)",
      "PySide6 (>=6.4.1)",
      "pyside6 (>=6.4.1) ; extra == 'gui'"
    ],
    "requires_python": ">=3.8",
    "summary": "Python package for a scenario based GUI",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17488949,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d693047c4e6db387547b64f303e0a9f52331dc4268d162122260c1a3558a9072",
          "md5": "ac0d0d61ab4496599830a7c7c87b21a0",
          "sha256": "a3a7f7a016754b80eb1c70a864fde8788d38d396ab39fd8101fd62a614215363"
        },
        "downloads": -1,
        "filename": "ScenarioGUI-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac0d0d61ab4496599830a7c7c87b21a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 97817,
        "upload_time": "2023-03-22T06:00:22",
        "upload_time_iso_8601": "2023-03-22T06:00:22.057931Z",
        "url": "https://files.pythonhosted.org/packages/d6/93/047c4e6db387547b64f303e0a9f52331dc4268d162122260c1a3558a9072/ScenarioGUI-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1686adaf0b2dfef90328ec004aeca02a8c4ef7b01cff0d9db7dc7815510d0bb5",
          "md5": "89374fafb01f575131904a0604fa5f75",
          "sha256": "8cf278ed1070d344ec929239a94a5e18d2535d28c2b9fda3c670761fa2e3ab2d"
        },
        "downloads": -1,
        "filename": "ScenarioGUI-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "89374fafb01f575131904a0604fa5f75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 65509,
        "upload_time": "2023-03-22T06:00:25",
        "upload_time_iso_8601": "2023-03-22T06:00:25.021084Z",
        "url": "https://files.pythonhosted.org/packages/16/86/adaf0b2dfef90328ec004aeca02a8c4ef7b01cff0d9db7dc7815510d0bb5/ScenarioGUI-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8f1aa8867d7f26eec691763d7d9628086c5671a6c0c50285ffe716955bc8ebb",
          "md5": "e86653813a72460f41a7f8d9f56658c2",
          "sha256": "0009f6073e888041f7ccc7d3a4750b1927f5070afa3da1c69347b37de98ba0b1"
        },
        "downloads": -1,
        "filename": "ScenarioGUI-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e86653813a72460f41a7f8d9f56658c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 104020,
        "upload_time": "2023-03-29T05:50:35",
        "upload_time_iso_8601": "2023-03-29T05:50:35.325187Z",
        "url": "https://files.pythonhosted.org/packages/b8/f1/aa8867d7f26eec691763d7d9628086c5671a6c0c50285ffe716955bc8ebb/ScenarioGUI-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d03efcddb10b0d82ce8e3d29ddf9cffeef4432bce0bd759d00624df1d6328f11",
          "md5": "c5d98b28f5a43ff2cd25cd78f66a5ff9",
          "sha256": "bf8cb9ab10e330772c5954bb8157e151a599afdf9147df3068b1eba191539a51"
        },
        "downloads": -1,
        "filename": "ScenarioGUI-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c5d98b28f5a43ff2cd25cd78f66a5ff9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 69596,
        "upload_time": "2023-03-29T05:50:38",
        "upload_time_iso_8601": "2023-03-29T05:50:38.125274Z",
        "url": "https://files.pythonhosted.org/packages/d0/3e/fcddb10b0d82ce8e3d29ddf9cffeef4432bce0bd759d00624df1d6328f11/ScenarioGUI-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8f1aa8867d7f26eec691763d7d9628086c5671a6c0c50285ffe716955bc8ebb",
        "md5": "e86653813a72460f41a7f8d9f56658c2",
        "sha256": "0009f6073e888041f7ccc7d3a4750b1927f5070afa3da1c69347b37de98ba0b1"
      },
      "downloads": -1,
      "filename": "ScenarioGUI-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e86653813a72460f41a7f8d9f56658c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 104020,
      "upload_time": "2023-03-29T05:50:35",
      "upload_time_iso_8601": "2023-03-29T05:50:35.325187Z",
      "url": "https://files.pythonhosted.org/packages/b8/f1/aa8867d7f26eec691763d7d9628086c5671a6c0c50285ffe716955bc8ebb/ScenarioGUI-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d03efcddb10b0d82ce8e3d29ddf9cffeef4432bce0bd759d00624df1d6328f11",
        "md5": "c5d98b28f5a43ff2cd25cd78f66a5ff9",
        "sha256": "bf8cb9ab10e330772c5954bb8157e151a599afdf9147df3068b1eba191539a51"
      },
      "downloads": -1,
      "filename": "ScenarioGUI-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c5d98b28f5a43ff2cd25cd78f66a5ff9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 69596,
      "upload_time": "2023-03-29T05:50:38",
      "upload_time_iso_8601": "2023-03-29T05:50:38.125274Z",
      "url": "https://files.pythonhosted.org/packages/d0/3e/fcddb10b0d82ce8e3d29ddf9cffeef4432bce0bd759d00624df1d6328f11/ScenarioGUI-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}