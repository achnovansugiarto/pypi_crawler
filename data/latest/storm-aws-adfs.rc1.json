{
  "info": {
    "author": "Federico BARBERO",
    "author_email": "f.barbero@reply.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Python Software Foundation License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# storm-aws-adfs\n\n\n\n\n\n\nFork of aws-adfs\n\nOriginal doc:\n\n[![PyPI version](https://badge.fury.io/py/aws-adfs.svg)](https://badge.fury.io/py/aws-adfs)\n[![Travis build](https://api.travis-ci.org/venth/aws-adfs.svg?branch=master)](https://api.travis-ci.org/venth/aws-adfs.svg?branch=master)\n![Build Status](https://github.com/venth/aws-adfs/workflows/Build/badge.svg?branch=master)\n\nThe project provides command line tool - `aws-adfs` to ease AWS cli authentication against ADFS (multi factor authentication with active directory).\n\n## `aws-adfs` command line tool\n\n* allows you to re-login to STS without entering credentials for an extended period of time, without having to store the user's actual credentials. It also lets an organization control the period in which a user can re-login to STS without entering credentials, by altering the ADFS session lifetime.\n\n* supports automation tools like ansible by providing security token in `AWS_SESSION_TOKEN`/`AWS_SECURITY_TOKEN` environment variables.\n\n* supports using Security Support Provider Interface (SSPI) on Windows OS.\n\n### MFA integration\n\naws-adfs integrates with:\n* [duo security](https://duo.com) MFA provider with support for FIDO U2F (CTAP1) / FIDO2 (CTAP2) hardware authenticators\n* [Symantec VIP](https://vip.symantec.com/) MFA provider\n* [RSA SecurID](https://www.rsa.com/) MFA provider\n\n# Installation\n\n* user local installation with [pipx](https://github.com/pypa/pipx)\n\n    ```\n    pipx install aws-adfs\n    ```\n\n* user local installation with pip\n\n    ```\n    pip install aws-adfs\n    ```\n\n    Please note, that you need to add $HOME/.local/bin to your PATH\n\n* system wide installation\n\n    ```\n    sudo pip install aws-adfs\n    ```\n\n* virtualenvs\n\n    ```\n    virtualenv aws-adfs\n    source aws-adfs/bin/activate\n    pip install aws-adfs\n    ...\n    ...\n    deactivate\n    ```\n\n* Windows 10\n\n   - Install latest supported Visual C++ downloads from Microsoft for Visual Studio 2015, 2017 and 2019:\n      - https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads\n      - https://aka.ms/vs/16/release/vc_redist.x64.exe\n    - Install Python 3.7 from Microsoft Store:\n      - https://www.microsoft.com/en-us/p/python-37/9nj46sx7x90p\n    - Start PowerShell as Administrator\n    - Go to `C:\\Program Files`:\n        ```\n        C:\n        cd 'C:\\Program Files\\'\n        ```\n    - Create virtual env:\n      ```\n      python3 -m venv aws-adfs\n      ```\n    - Install `aws-adfs`:\n      ```\n      & 'C:\\Program Files\\aws-adfs\\Scripts\\pip' install aws-adfs\n      ```\n    - Run it:\n      ```\n      & 'C:\\Program Files\\aws-adfs\\Scripts\\aws-adfs' login --adfs-host=your-adfs-hostname\n      ```\n\n# Examples of usage\n\n## `aws-adfs`\n* login to your adfs host with disabled ssl verification on aws cli profile: adfs\n\n    ```\n    aws-adfs login --adfs-host=your-adfs-hostname --no-ssl-verification\n    ```\n\n    and verification\n\n    ```\n    aws --profile=adfs s3 ls\n    ```\n\n* login to your adfs host with disabled ssl verification on specified aws cli profile: specified-profile\n\n    ```\n    aws-adfs login --profile=specified-profile --adfs-host=your-adfs-hostname --no-ssl-verification\n    ```\n\n    and verification\n\n    ```\n    aws --profile=specified-profile s3 ls\n    ```\n\n* login to your adfs host and fetch roles for AWS GovCloud (US)\n\n    ```\n    aws-adfs login --adfs-host=your-adfs-hostname --provider-id urn:amazon:webservices:govcloud --region us-gov-west-1\n    ```\n\n    and verification\n\n    ```\n    aws s3 ls\n    ```\n\n* login to your adfs host within ansible playbook\n\n    ```\n    ---\n    - name: \"Auth sts aws\"\n      command: \"aws-adfs login --adfs-host sts.example.com --env --stdout --role-arn arn:aws:iam::000123456789:role/ADMIN\"\n      register: sts_result\n      environment:\n        - username: \"{{ ansible_user }}@example.com\"\n        - password: \"{{ ansible_ssh_pass }}\"\n\n    - name: \"Set sts facts\"\n      set_fact:\n        sts: \"{{ sts_result.stdout | from_json }}\"\n\n    - name: \"List s3 Buckets\"\n      aws_s3_bucket_facts:\n        aws_access_key: \"{{ sts.AccessKeyId }}\"\n        aws_secret_key: \"{{ sts.SecretAccessKey }}\"\n        security_token: \"{{ sts.SessionToken }}\"\n        region: \"us-east-1\"\n      register: buckets\n\n    - name: \"Print Buckets\"\n      debug:\n        var: buckets\n    ```\n\n* login to your adfs host by passing username and password credentials via a file\n\n    ```\n    aws-adfs login --adfs-host=your-adfs-hostname --authfile=/path/and/file/name\n    ```\n\n    Auth file should be in format of\n\n    ```\n    [profile_name]\n    username = your_username\n    password = your_password\n    ```\n\n* .aws/config profile for automatically refreshing credentials\n    ```\n    [profile example-role-ue1]\n    credential_process=aws-adfs login --region=us-east-1 --role-arn=arn:aws:iam::1234567891234:role/example-role --adfs-host=adfs.example.com --stdout\n    ```\n    Warning: see [AWS documentation](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sourcing-external.html) about security considerations to take when sourcing credentials with an external process.\n\n* help, help, help?\n    ```\n    $ aws-adfs --help\n    Usage: aws-adfs [OPTIONS] COMMAND [ARGS]...\n\n    Options:\n      --version  Show current tool version\n      --help  Show this message and exit.\n\n    Commands:\n      list   lists available profiles\n      login  Authenticates an user with active directory...\n      reset  removes stored profile\n    ```\n\n    ```\n    $ aws-adfs list --help\n    Usage: aws-adfs list [OPTIONS]\n\n      lists available profiles\n\n    Options:\n      --version  Show current tool version\n      --help  Show this message and exit.\n    ```\n\n    ```\n    $ aws-adfs login --help\n    Usage: aws-adfs login [OPTIONS]\n\n      Authenticates an user with active directory credentials\n\n    Options:\n      --profile TEXT                  AWS cli profile that will be authenticated.\n                                      After successful authentication just use:\n                                      aws --profile <authenticated profile>\n                                      <service> ...\n      --region TEXT                   The default AWS region that this script will\n                                      connect to for all API calls\n      --ssl-verification / --no-ssl-verification\n                                      SSL certificate verification: Whether or not\n                                      strict certificate verification is done,\n                                      False should only be used for dev/test\n      --adfs-ca-bundle TEXT           Override CA bundle for SSL certificate\n                                      verification for ADFS server only.\n      --adfs-host TEXT                For the first time for a profile it has to\n                                      be provided, next time for the same profile\n                                      it will be loaded from the stored\n                                      configuration\n      --output-format [json|text|table]\n                                      Output format used by aws cli\n      --provider-id TEXT              Provider ID, e.g urn:amazon:webservices\n                                      (optional)\n      --s3-signature-version [s3v4]   s3 signature version: Identifies the version\n                                      of AWS Signature to support for\n                                      authenticated requests. Valid values: s3v4\n      --username-password-command TEXT\n                                      Read username and password from the output\n                                      of a shell command (expected JSON format:\n                                      `{\"username\": \"myusername\", \"password\":\n                                      \"mypassword\"}`)\n      --env                           Read username, password from environment\n                                      variables (username and password).\n      --stdin                         Read username, password from standard input\n                                      separated by a newline.\n      --authfile TEXT                 Read username, password from a local file\n                                      (optional)\n      --stdout                        Print aws_session_token in json on stdout.\n      --printenv                      Output commands to set AWS_ACCESS_KEY_ID,\n                                      AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN,\n                                      AWS_DEFAULT_REGION environmental variables\n                                      instead of saving them to the aws\n                                      configuration file.\n      --print-console-signin-url      Output a URL that lets users who sign in to\n                                      your organization's network securely access\n                                      the AWS Management Console.\n      --console-role-arn TEXT         Role to assume for use in conjunction with\n                                      --print-console-signin-url\n      --console-external-id TEXT      External ID to pass in assume role for use\n                                      in conjunction with --print-console-signin-\n                                      url\n      --role-arn TEXT                 Predefined role arn to selects, e.g. aws-\n                                      adfs login --role-arn arn:aws:iam::123456789\n                                      012:role/YourSpecialRole\n      --session-duration INTEGER      Define the amount of seconds you want to\n                                      establish your STS session, e.g. aws-adfs\n                                      login --session-duration 3600\n      --no-session-cache              Do not use AWS session cache in\n                                      ~/.aws/adfs_cache/ directory.\n      --assertfile TEXT               Use SAML assertion response from a local\n                                      file\n      --sspi / --no-sspi              Whether or not to use Kerberos SSO\n                                      authentication via SSPI (Windows only,\n                                      defaults to True).\n      --help                          Show this message and exit.\n    ```\n    ```\n    $ aws-adfs reset --help                                                                                                                                              13:39\n    Usage: aws-adfs reset [OPTIONS]\n\n      removes stored profile\n\n    Options:\n      --profile TEXT  AWS cli profile that will be removed\n      --help          Show this message and exit.\n    ```\n\n# Known issues\n\n* duo-security\n\n    `Error: Cannot begin authentication process. The error response: {\"message\": \"Unknown authentication method.\", \"stat\": \"FAIL\"}`\n\n    Please setup preferred auth method in duo-security settings (settings' -> 'My Settings & Devices').\n\n* USB FIDO2 does not work in Windows Subsystem for Linux (WSL)\n\n    `OSError: [Errno 2] No such file or directory: '/sys/class/hidraw'`\n\n    USB devices are not accessible in WSL, please install and run `aws-adfs` on the Windows 10 host and then access the credentials in WSL from the filesystem. Example:\n\n    ```\n    export AWS_CONFIG_FILE=/mnt/c/Users/username/.aws/config\n    export AWS_SHARED_CREDENTIALS_FILE=/mnt/c/Users/username/.aws/credentials\n    ```\n\n*  FIDO2 devices are not detected on Windows 10 build 1903 or newer\n\n    Running `aws-adfs` as Administrator is required since Windows 10 build 1903 to access FIDO2 devices, cf. https://github.com/Yubico/python-fido2/issues/55)\n\n* in cases of trouble with lxml please install\n\n  ```\n  sudo apt-get install python-dev libxml2-dev libxslt1-dev zlib1g-dev\n  ```\n\n* in cases of trouble with pykerberos please install\n\n  ```\n  sudo apt-get install python-dev libkrb5-dev\n  ```\n\n* in cases of trouble with OSX Sierra (obsolete OpenSSL), upgrade OpenSSL. Example:\n  ```\n  brew upgrade openssl\n  ```\n  AND add explicit directive to .bash_profile:\n  ```\n  export PATH=$(brew --prefix openssl)/bin:$PATH\n  ```\n\n* only python >= 3.6 to <4.0 are supported:\n  - python 2.6 is not supported\n  - python 2.7 is not supported\n  - python 3.2 is not supported\n  - python 3.3 is not supported\n  - python 3.4 is not supported\n  - python 3.5 is not supported\n\n# Development\n\n* update dependencies:\n```\npoetry update\n```\n\n* run unit tests:\n```\npoetry run pytest\n```\n\n* release:\n\n```\npoetry version patch # or minor, major, prepatch, preminor, premajor, prerelease\nexport CHANGELOG_GITHUB_TOKEN=$(gopass show -o pins/Github/github-changelog-generator)\ndocker run -it --rm -v \"$(pwd)\":/usr/local/src/your-app -e CHANGELOG_GITHUB_TOKEN githubchangeloggenerator/github-changelog-generator -u venth -p aws-adfs --future-release=$(poetry version -s)\ngit add .\ngit commit -m \"Release $(poetry version -s)\"\ngit tag --annotate -m \"Release $(poetry version -s)\" $(poetry version -s)\ngit push && git push --tags\n```\n\n# Changelog\n\nSee the [CHANGELOG.md](CHANGELOG.md) file, which is generated using [github-changelog-generator](https://github.com/github-changelog-generator/github-changelog-generator).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "aws,adfs,console,tool",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "storm-aws-adfs",
    "package_url": "https://pypi.org/project/storm-aws-adfs/",
    "platform": null,
    "project_url": "https://pypi.org/project/storm-aws-adfs/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/storm-aws-adfs/1.0.0/",
    "requires_dist": [
      "boto3 (>=1.20.50,<2.0.0)",
      "botocore (>=1.12.6)",
      "click",
      "configparser",
      "fido2 (>=0.9.3)",
      "lxml",
      "requests",
      "requests-kerberos; platform_system != \"Windows\"",
      "requests-negotiate-sspi (>=0.3.4); platform_system == \"Windows\""
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "AWS CLI authenticator via ADFS - small command-line tool to authenticate via ADFS and assume chosen role",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13795820,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "156c8374564ac8b3939a60df3ad6b8a0849887d43ddae178e316f585560507cb",
          "md5": "4007f49dc4c28cd872d4f8b3558894dd",
          "sha256": "b78d4c3a518637d3243e046a130fe5f18306930adf998cb2078f4d04293b2471"
        },
        "downloads": -1,
        "filename": "storm_aws_adfs-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4007f49dc4c28cd872d4f8b3558894dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 33431,
        "upload_time": "2022-05-12T15:28:51",
        "upload_time_iso_8601": "2022-05-12T15:28:51.805321Z",
        "url": "https://files.pythonhosted.org/packages/15/6c/8374564ac8b3939a60df3ad6b8a0849887d43ddae178e316f585560507cb/storm_aws_adfs-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "777be6e6af51a7170c9f07054200d58236e783674ba412a80a3e532b572ec010",
          "md5": "026dcbe487ec544766fa82bc0d3f3039",
          "sha256": "f50509b375edc5cf10852027d7c7447d55e679cc337ab5f06f1dd74ba8422016"
        },
        "downloads": -1,
        "filename": "storm-aws-adfs-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "026dcbe487ec544766fa82bc0d3f3039",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 30354,
        "upload_time": "2022-05-12T15:28:53",
        "upload_time_iso_8601": "2022-05-12T15:28:53.974616Z",
        "url": "https://files.pythonhosted.org/packages/77/7b/e6e6af51a7170c9f07054200d58236e783674ba412a80a3e532b572ec010/storm-aws-adfs-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "156c8374564ac8b3939a60df3ad6b8a0849887d43ddae178e316f585560507cb",
        "md5": "4007f49dc4c28cd872d4f8b3558894dd",
        "sha256": "b78d4c3a518637d3243e046a130fe5f18306930adf998cb2078f4d04293b2471"
      },
      "downloads": -1,
      "filename": "storm_aws_adfs-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4007f49dc4c28cd872d4f8b3558894dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 33431,
      "upload_time": "2022-05-12T15:28:51",
      "upload_time_iso_8601": "2022-05-12T15:28:51.805321Z",
      "url": "https://files.pythonhosted.org/packages/15/6c/8374564ac8b3939a60df3ad6b8a0849887d43ddae178e316f585560507cb/storm_aws_adfs-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "777be6e6af51a7170c9f07054200d58236e783674ba412a80a3e532b572ec010",
        "md5": "026dcbe487ec544766fa82bc0d3f3039",
        "sha256": "f50509b375edc5cf10852027d7c7447d55e679cc337ab5f06f1dd74ba8422016"
      },
      "downloads": -1,
      "filename": "storm-aws-adfs-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "026dcbe487ec544766fa82bc0d3f3039",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 30354,
      "upload_time": "2022-05-12T15:28:53",
      "upload_time_iso_8601": "2022-05-12T15:28:53.974616Z",
      "url": "https://files.pythonhosted.org/packages/77/7b/e6e6af51a7170c9f07054200d58236e783674ba412a80a3e532b572ec010/storm-aws-adfs-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}