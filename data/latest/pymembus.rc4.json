{
  "info": {
    "author": "Robert Umbehant",
    "author_email": "pymembus@wheresjames.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# pymembus\n\n\n---------------------------------------------------------------------\n## Table of contents\n\n* [Install from pypi](#install-from-pypi)\n* [Local Build](#local-build)\n* [Administration](#administration)\n* [Examples](#examples)\n* [References](#references)\n\n&nbsp;\n\n\n---------------------------------------------------------------------\n## Install from pypi\n\n    Install dependencies (see below) then run...\n\n    $ pip install pymembus\n\n&nbsp;\n\n\n---------------------------------------------------------------------\n## Local Build\n\n### Windows dependencies\n\n- Install [CMake](https://cmake.org/download/)\n- Install [git](https://git-scm.com/downloads)\n- Install [boost](https://sourceforge.net/projects/boost/files/boost-binaries/)\n- Install [Visual Studio 2017](https://visualstudio.microsoft.com/downloads/). *The free **Community Edition** is fine*\n\n\n### Linux dependencies\n\n    $ sudo apt-get update\n    $ sudo apt-get -yq install build-essential git cmake libboost-all-dev doxygen graphviz go-md2man\n    $ sudo apt-get -yq install python3 python3-pip python3-python11\n    $ python3 -m pip install scikit-build\n\n\n### Local Build / Install\n\n    $ python3 -m pip install .\n\nOR\n\n    $ pip3 install .\n\n\n### Uninstall\n\n    $ pip3 uninstall -y pymembus\n\n\n### Create wheel\n\n    Software dist\n    $ python3 setup.py sdist\n\n    Binary dist\n    $ python3 setup.py bdist_wheel\n\nOR\n\n    $ pip3 wheel . --use-feature=in-tree-build\n\n&nbsp;\n\n\n---------------------------------------------------------------------\n## Administration (Linux only)\n\nLibrary commands, for once you have it installed\n\n- Display help\n\n    **$ pymembus help**\n\n- Uninstall\n\n    **$ sudo pymembus uninstall**\n\n- Show installation roots\n\n    **$ pymembus files**\n\n- Get installation information.  (Change this info in **PROJECT.txt**)\n\n    **$ pymembus info \\<variable\\>**\n\n    variable = One of [name, description, url, version, build, company, author, lib, include, bin, share]\n\n&nbsp;\n\n\n---------------------------------------------------------------------\n## Examples\n\n``` Python\n\n    import pymembus\n\n    #----------------------------------------------------------------\n    # Map shared memory\n\n    sm = pymembus.memmap()\n    assert sm.open(\"/myshare\", 1024, True)\n\n    # Write string\n    msg = str(time.time())\n    assert 0 < sm.write(msg)\n\n    # Read the string\n    assert sm.read(len(msg)) == msg\n\n    mem = numpy.array(sm, copy = False)\n    print(\"MEM: %s\" % str(mem))\n\n    sm.close()\n\n\n    #----------------------------------------------------------------\n    # Shared message buffer\n\n    tx = pymembus.memmsg()\n    assert tx.open(\"/mymsg\", 1024, True, True)\n    assert not tx.existing()\n\n    rx = pymembus.memmsg()\n    assert rx.open(\"/mymsg\", 1024, False, False)\n    assert rx.existing()\n\n    for i in range(0, 10):\n        assert tx.write(\"Message %s\" % i)\n\n    i = 0\n    max = 20\n    while 10 > i and 0 < max:\n        max -= 1\n        msg = rx.read(0)\n        if 0 < len(msg):\n            # print(\"READ : %s\" % msg)\n            i += 1\n\n    print(\"i = %s\" % i)\n\n    assert 10 <= i\n\n    tx.close()\n    rx.close()\n\n\n    #----------------------------------------------------------------\n    # Shared image\n    imgs = pymembus.memvid()\n\n    # Open a share\n    w = 320\n    h = 240\n    bpp = 24\n    fps = 30\n    bufs = 10\n    assert imgs.open(\"/myvideo\", True, w, h, bpp, fps, bufs)\n\n    # Check values\n    assert imgs.getWidth() == w\n    assert imgs.getHeight() == h\n    assert imgs.getBpp() == bpp\n    assert imgs.getFps() == fps\n    assert imgs.getBufs() == bufs\n    assert imgs.getPtr(0) == 0\n    assert imgs.next(1) == 1\n    assert imgs.next(-1) == 0\n    assert imgs.getPtrErr(3, 1) == 2\n    assert len(imgs) == bufs\n\n    # Check second share\n    imgs2 = pymembus.memvid()\n    assert imgs2.open_existing(\"/myvideo\")\n    assert imgs2.getWidth() == w\n    assert imgs2.getHeight() == h\n    assert imgs2.getBpp() == bpp\n    assert imgs2.getFps() == fps\n    assert imgs2.getBufs() == bufs\n    imgs2.close()\n\n    # Write into the image buffer\n    img = numpy.array(imgs[0], copy = False)\n\n    try:\n        import cv2\n        cv2.rectangle(img, (10, 10), (60, 60), (50,255,50), -1)\n        cv2.rectangle(img, (50, 50), (110, 110), (255,50,50), -1)\n        cv2.rectangle(img, (100, 100), (150, 150), (50,50,255), -1)\n\n    except Exception as e:\n        print(e)\n\n\n    #----------------------------------------------------------------\n    # Shared audio\n    auds = pymembus.memaud()\n\n    ch = 2\n    bps = 16\n    abr = 48000\n    fps = 50\n    bufs = 10\n    assert auds.open(\"/myaudio\", True, ch, bps, abr, fps, bufs)\n    assert auds.getChannels() == ch\n    assert auds.getBps() == bps\n    assert auds.getBitRate() == abr\n    assert auds.getFps() == fps\n    assert auds.getBufs() == bufs\n    assert len(auds) == bufs\n    print(\"%s -- %s\" % (auds.getBufSize(), (abr / fps)))\n    assert auds.getBufSize() == (abr / fps)\n\n    auds2 = pymembus.memaud()\n    assert auds2.open_existing(\"/myaudio\")\n    assert auds2.getChannels() == ch\n    assert auds2.getBps() == bps\n    assert auds2.getBitRate() == abr\n    assert auds2.getFps() == fps\n    assert auds2.getBufs() == bufs\n\n    aud = numpy.array(auds[0], copy = False)\n    aud2 = numpy.array(auds2[0], copy = False)\n\n    # Create numpy audio buffer\n    msamples = int(abr / fps)\n    nsamples = msamples * ch\n    src = numpy.zeros((1, nsamples), dtype='int16')\n    src.fill(0)\n\n    dch, dsz = aud.shape\n    sch, ssz = src.shape\n\n    # Ensure channel sizes match\n    print(\"%s : %s --- %s : %s\" % (dch, dsz, sch, ssz))\n    assert dch == sch\n    assert dsz == ssz\n\n    # Check share\n    aud[0][3] = 1234\n    assert aud[0][3] == aud2[0][3]\n\n    # Check the fill function\n    auds.fill(0, 0)\n    assert aud[0][3] == 0\n\n    # Copy data\n    aud = src\n\n    auds.close()\n    auds2.close()\n\n```\n\n&nbsp;\n\n\n---------------------------------------------------------------------\n## References\n\n- Python\n    - https://www.python.org/\n\n- CMake\n    - https://cmake.org\n\n- pip\n    - https://pip.pypa.io/en/stable/\n\n- git\n    - https://git-scm.com/\n\n- Boost\n    - https://www.boost.org/\n\n- Visual Studio\n    - https://visualstudio.microsoft.com/\n\n- Doxygen\n    - https://github.com/doxygen/doxygen\n\n- Graphviz\n    - https://graphviz.org/\n\n- Md2man\n    - https://sunaku.github.io/md2man/man/man5/md2man.5.html\n    - https://github.com/sunaku/md2man\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wheresjames/pymembus",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymembus",
    "package_url": "https://pypi.org/project/pymembus/",
    "platform": null,
    "project_url": "https://pypi.org/project/pymembus/",
    "project_urls": {
      "Homepage": "https://github.com/wheresjames/pymembus"
    },
    "release_url": "https://pypi.org/project/pymembus/0.1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python shared memory library",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16170146,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9b7faa4fdf65b788c35f269f578bd2a59a15bd5979ab37b386d3bc576f74554",
          "md5": "5609aef6baccedbe76b355494198b11d",
          "sha256": "83cf3fc8485cd0f91b22f5cc753dd8aec8f97c93c8fa2d1e7d3393aae30dd433"
        },
        "downloads": -1,
        "filename": "pymembus-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5609aef6baccedbe76b355494198b11d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69158,
        "upload_time": "2022-12-20T01:25:27",
        "upload_time_iso_8601": "2022-12-20T01:25:27.096928Z",
        "url": "https://files.pythonhosted.org/packages/a9/b7/faa4fdf65b788c35f269f578bd2a59a15bd5979ab37b386d3bc576f74554/pymembus-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba5e98dfdb048abf3e0a5be3eea0e391e69f9cd84d09990c41c09fbe4ca3ed59",
          "md5": "c96c3dc0204f7f9ee55cec556dbd8d38",
          "sha256": "e6eb4896264c8e66e95591ebb9b0d285886431ad65abb4726a2017fd345fde66"
        },
        "downloads": -1,
        "filename": "pymembus-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c96c3dc0204f7f9ee55cec556dbd8d38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70861,
        "upload_time": "2022-12-20T06:17:54",
        "upload_time_iso_8601": "2022-12-20T06:17:54.022418Z",
        "url": "https://files.pythonhosted.org/packages/ba/5e/98dfdb048abf3e0a5be3eea0e391e69f9cd84d09990c41c09fbe4ca3ed59/pymembus-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4c0883eeab51a67ee884e2d6394e532ee994662489d1d21d5c6a26bbdf97e9d",
          "md5": "a128acf77cd65f0091a125156471853d",
          "sha256": "935327ba77bc8490c4af0e9d6505bcd89ebc5f1bb17bf1aec8bbcadb98270027"
        },
        "downloads": -1,
        "filename": "pymembus-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a128acf77cd65f0091a125156471853d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70934,
        "upload_time": "2022-12-20T06:43:11",
        "upload_time_iso_8601": "2022-12-20T06:43:11.752170Z",
        "url": "https://files.pythonhosted.org/packages/e4/c0/883eeab51a67ee884e2d6394e532ee994662489d1d21d5c6a26bbdf97e9d/pymembus-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9636ddf042fe3fdd03a040d68a90aeea497c7e42293faa26ad30df22bd5dd03e",
          "md5": "ba8c597249da07ed09ce7f21bc9bdce6",
          "sha256": "e4af5a3b62429ee09ea4ed5a0e746a7dff96589983a340b8421095666b8440ff"
        },
        "downloads": -1,
        "filename": "pymembus-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ba8c597249da07ed09ce7f21bc9bdce6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71227,
        "upload_time": "2022-12-21T05:53:13",
        "upload_time_iso_8601": "2022-12-21T05:53:13.474227Z",
        "url": "https://files.pythonhosted.org/packages/96/36/ddf042fe3fdd03a040d68a90aeea497c7e42293faa26ad30df22bd5dd03e/pymembus-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9636ddf042fe3fdd03a040d68a90aeea497c7e42293faa26ad30df22bd5dd03e",
        "md5": "ba8c597249da07ed09ce7f21bc9bdce6",
        "sha256": "e4af5a3b62429ee09ea4ed5a0e746a7dff96589983a340b8421095666b8440ff"
      },
      "downloads": -1,
      "filename": "pymembus-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "ba8c597249da07ed09ce7f21bc9bdce6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 71227,
      "upload_time": "2022-12-21T05:53:13",
      "upload_time_iso_8601": "2022-12-21T05:53:13.474227Z",
      "url": "https://files.pythonhosted.org/packages/96/36/ddf042fe3fdd03a040d68a90aeea497c7e42293faa26ad30df22bd5dd03e/pymembus-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}