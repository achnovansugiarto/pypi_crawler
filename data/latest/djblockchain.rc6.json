{
  "info": {
    "author": "James Pic",
    "author_email": "jamespic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "djblockchain is a Django app which provides tables to store data about\nblockchain transactions with a blockchain abstraction layer and a deployment\nspooler workflow.\n\nThe Transaction table holds transaction data such as the contract name,\naddress, function to call if any, and arguments in a JSONField, so you don't\nhave to query the blockchain to display transaction informations to users.\n\nWhen you create a Transaction in djblockchain, it's \"state\" will be \"held\" by\ndefault. Nothing happens when the state is \"held\", but change it to \"deploy\"\nand the spooler will find that there is a new Transaction to deploy on the\nblockchain.\n\nThe spooler will then set the Transaction.state to \"deploying\" to indicate that\nit is trying to deploy, and then call Transaction.deploy() which is in charge\nof deploying the contract or calling a function. It will retry as long as you\nwant, to prevent failing just because of a network error or something. In case\nof success, it will set the Transaction.state to \"watch\" and then spool itself\nagain to ensure any further modification will be done in its own database\ntransaction.\n\nNote that djblockchain supports custom Transaction subclasses which translates\ninto new tables with a foreign key to the Transaction table, thanks to Django\nModel Inheritance feature. This allows Equisafe to have a dedicated subclass\nper contract type of method call type, and override the deploy method to add\ncustom logic when needed.\n\nThe spooler will find the Transaction with state=\"watch\" and call\nTransaction.watch() which will wait until enough blocks append on the\nblockchain to reduce the risk of loosing the transaction. It waits 5 minutes by\ndefault, in the case of an error it will return and the spooler will try to\nwatch this Transaction again later because it will still be in the \"watch\"\nstate, trying to move forward the state of the other Transactions that you may\nhave in the database. In the case of success, it will set the state to\n\"postdeploy\", and return to ensure that nothing else causes a database\ntransaction abort.\n\nThe spooler will then find the Transaction with state=\"postdeploy\", and if your\ncustom Transaction class has a postdeploy() method then it will set the state\nto \"postdeploying\" and call that. This is were you can chain calls on the\nblockchain, for example with NyX, the IssuingEntity Transaction class\nrepresents an issuing entity contract which is used to create the KYCIssuer\ncontract. So, we have IssuingEntity.postdeploy() which creates a KYCIssuer\nTransaction subclass that the spooler will find and try to deploy and so on.\n\nNote that the deploy and watch implementation are Provider based, we currently\nhave 3 providers:\n\n- Tezos\n- Ethereum\n- Fake\n\nAs such, it makes it easy to migrate from Ethereum to Tezos, and the Fake\nprovider is, well, a fake blockchain provider that fakes contract addresses in\nthe deploy() and watch() functions. This makes it easy to test/develop your\nuser interface without even involving the blockchain. Note that we also\nmaintain a Tezos sandbox which behaves like the Ethereum sandbox to make tests\neasier.\n\nAs per requirements, there should only be one spooled job per transaction\nsender at the time. The spooler will do several sender accounts in parallel,\nbut not treat several transactions of a same sender in parallel.\n\nWhile nothing can prevent that in theory with uWSGI spooler, this is ensured by\nthe Account.spool method which retrieves the Caller responsible for this\nAccount sender_spool, and only spools it if it's not currently running. So, the\nsender_queue job should only be spooled by the Account.spool() method.\n\nThis is tested by the test_concurrency, which creates two accounts and creates\n3 transactions in parallel, the two first with the first user account and the\nlast one with the second user account.\n\nIt will then wait until all transactions are finished, and compare the state\nhistory entries as such:\n\n- the second transaction should not start prior to the first one finishing,\n  because they are of the same sender account, avoiding nonce race conditions\n- the third transaction should start in parallel with the first transaction,\n  because they are of different sender accounts, so that one failing sender\n  account does not block other sender accounts\n\nNote that state_set will also add a new entry with the timestamp and the state\nname in the new Transaction.history JSON list field. This is also logged with\nthe INFO level.\n\nStates recap:\n\n- held: this transaction is only stored in the database\n- deploy: this transaction should be deployed when possible\n- deploying: this transaction is currently being deployed\n- watch: this transaction has been deployed, it needs to be watched\n- watching: this transaction is currently being watched\n- postdeploy: this transaction has been watched and it needs to execute postdeploy\n- postdeploying: this transaction's postdeploy method is currently being executed\n- done: this transaction is finished\n\nThis is tested in the test_state, that runs a uWSGI server in a process fork\nwith a mini-project dedicated to testing djblockchain.djblockchain offers an easy fault-tolerant Django app to maintain a database of\ncontracts with blockchain synchronization.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://yourlabs.io/oss/cli2",
    "keywords": "cli",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djblockchain",
    "package_url": "https://pypi.org/project/djblockchain/",
    "platform": "",
    "project_url": "https://pypi.org/project/djblockchain/",
    "project_urls": {
      "Homepage": "https://yourlabs.io/oss/cli2"
    },
    "release_url": "https://pypi.org/project/djblockchain/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "djblockchain is a Django app which provides tables to store data about",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9989362,
  "releases": {
    "0.0.1.dev52": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b56250a76ebbd24ed78f902e7fa94b3478db3dfd0cb0bb546fb5b0c7e27475fd",
          "md5": "e863eab7c4ecc827bfb326f17d66981d",
          "sha256": "43864d9fdbb6d412d36f921f603330c117adec6992083e515d9f16226c5147a7"
        },
        "downloads": -1,
        "filename": "djblockchain-0.0.1.dev52.tar.gz",
        "has_sig": false,
        "md5_digest": "e863eab7c4ecc827bfb326f17d66981d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22922,
        "upload_time": "2021-01-26T08:12:41",
        "upload_time_iso_8601": "2021-01-26T08:12:41.527758Z",
        "url": "https://files.pythonhosted.org/packages/b5/62/50a76ebbd24ed78f902e7fa94b3478db3dfd0cb0bb546fb5b0c7e27475fd/djblockchain-0.0.1.dev52.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.dev55": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "975d1165db127fd18fbf4cdb2cf3a322b4e7e2f2cd5da8458fbf958bb8fe4014",
          "md5": "8875db1b3e7d2e93e79392d089ed537a",
          "sha256": "9ec70c36905134541dc4f268fc7de4c5ddee181c439ff131b7859ffa1c3b6e52"
        },
        "downloads": -1,
        "filename": "djblockchain-0.0.1.dev55.tar.gz",
        "has_sig": false,
        "md5_digest": "8875db1b3e7d2e93e79392d089ed537a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23095,
        "upload_time": "2021-02-01T20:35:09",
        "upload_time_iso_8601": "2021-02-01T20:35:09.897839Z",
        "url": "https://files.pythonhosted.org/packages/97/5d/1165db127fd18fbf4cdb2cf3a322b4e7e2f2cd5da8458fbf958bb8fe4014/djblockchain-0.0.1.dev55.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.dev84": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e3f1969b349419bbf0ad2e09ee7bcf487960ee80c7153869865960e9e6f3236",
          "md5": "5ba90863856d8fb2a4bae6882dffa39c",
          "sha256": "04586d53451cfdb251ff11bd21660d0e07745503e7e391a41d353bbe6c329ee1"
        },
        "downloads": -1,
        "filename": "djblockchain-0.0.1.dev84.tar.gz",
        "has_sig": false,
        "md5_digest": "5ba90863856d8fb2a4bae6882dffa39c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22950,
        "upload_time": "2021-01-26T07:57:11",
        "upload_time_iso_8601": "2021-01-26T07:57:11.845456Z",
        "url": "https://files.pythonhosted.org/packages/6e/3f/1969b349419bbf0ad2e09ee7bcf487960ee80c7153869865960e9e6f3236/djblockchain-0.0.1.dev84.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b3a67018c3d34a0e194416414ddfa17463cf611fb1106370b08fd7942b8c5b6",
          "md5": "87485da81530a6b68e36fc1a079f0e41",
          "sha256": "dc5795692ca76096518dff337d23114a244ca50f161940c4ea545149542fc5e9"
        },
        "downloads": -1,
        "filename": "djblockchain-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "87485da81530a6b68e36fc1a079f0e41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23084,
        "upload_time": "2021-02-01T20:41:27",
        "upload_time_iso_8601": "2021-02-01T20:41:27.969815Z",
        "url": "https://files.pythonhosted.org/packages/6b/3a/67018c3d34a0e194416414ddfa17463cf611fb1106370b08fd7942b8c5b6/djblockchain-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad2a5a69ae30bf4421de5019853e7036cbbfb1943c1785888fa8446c986686f8",
          "md5": "b06571669988271a7adb6e22e7dd8f8b",
          "sha256": "d1027e1fe9d210416b4ea1c2256af02899300c1908d1b19679aae9da6f4fa3db"
        },
        "downloads": -1,
        "filename": "djblockchain-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b06571669988271a7adb6e22e7dd8f8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23869,
        "upload_time": "2021-04-06T18:15:33",
        "upload_time_iso_8601": "2021-04-06T18:15:33.190139Z",
        "url": "https://files.pythonhosted.org/packages/ad/2a/5a69ae30bf4421de5019853e7036cbbfb1943c1785888fa8446c986686f8/djblockchain-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b686e3a61c1d79c6f90b8e0c3e7acce605182c6c2510be0db08fed6f755c7a0",
          "md5": "b834c8b0d6a0fed8f10004c038b424d9",
          "sha256": "543450c17f922ccb4cc1fc9991fcdf9de504733d4be96171ca51a35429765372"
        },
        "downloads": -1,
        "filename": "djblockchain-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b834c8b0d6a0fed8f10004c038b424d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23685,
        "upload_time": "2021-04-06T19:32:35",
        "upload_time_iso_8601": "2021-04-06T19:32:35.327703Z",
        "url": "https://files.pythonhosted.org/packages/4b/68/6e3a61c1d79c6f90b8e0c3e7acce605182c6c2510be0db08fed6f755c7a0/djblockchain-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b686e3a61c1d79c6f90b8e0c3e7acce605182c6c2510be0db08fed6f755c7a0",
        "md5": "b834c8b0d6a0fed8f10004c038b424d9",
        "sha256": "543450c17f922ccb4cc1fc9991fcdf9de504733d4be96171ca51a35429765372"
      },
      "downloads": -1,
      "filename": "djblockchain-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b834c8b0d6a0fed8f10004c038b424d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 23685,
      "upload_time": "2021-04-06T19:32:35",
      "upload_time_iso_8601": "2021-04-06T19:32:35.327703Z",
      "url": "https://files.pythonhosted.org/packages/4b/68/6e3a61c1d79c6f90b8e0c3e7acce605182c6c2510be0db08fed6f755c7a0/djblockchain-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}