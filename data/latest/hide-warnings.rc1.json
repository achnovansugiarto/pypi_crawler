{
  "info": {
    "author": "Rainbow-Dreamer",
    "author_email": "1036889495@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# hide_warnings\n This is a python module that can hide any annoying warning messages from external C and C++ libraries in your python project. There is a decorator called `hide_warnings` in this module, you can decorate any of your functions with this decorator, then no warning messages from external C and C++ libraries (if invoked) in your function will be printed to cmd/terminal.\n\n## Installation\n`pip install hide_warnings`\n\n## Usage\nFor example, here is a function that when you run it, a warning message from external C and C++ libraries will be forcibly printed to cmd/terminal, which is very annoying, and in python normally it is hard to prevent the warning messages from non-python libraries, especially when the functions that throw out these warning messages are from compiled C and C++ executables (which means you cannot modify the code inside it) and you pretty much need to modify the source code and rebuild yourself to prevent these warning messages, which takes some work, and what's even worse is that some closed source C and C++ projects does not give out source code for you to build.\n\nWhat we want is to directly hide the warning messages we do not want to see from external C and C++ libraries in our python projects.\n\n```python\ndef func(a, b):\n    function_throw_external_warnings()\n    result = a + b\n    return result\n\n>>> func(1, 2)\nwarning: This is some warnings from some external C and C++ functions\n3\n```\n\nBy decorating the function with `hide_warnings`, you can prevent these warning messages.\n\n```python\nfrom hide_warnings import hide_warnings\n\n@hide_warnings\ndef func(a, b):\n    function_throw_external_warnings()\n    result = a + b\n    return result\n\n>>> func(1, 2)\n3\n```\n\n**Note that by default, all of the printed messages will be prevented inside the decorated function, including python's own `print` functions. If you still want to use python's `print` function to print some messages that is useful to you, you can set the keyword argument `out` to `False` for the decorator, which makes the decorated function could still use python's own `print` function.**\n\n```python\nfrom hide_warnings import hide_warnings\n\n@hide_warnings(out=False)\ndef func(a, b):\n    function_throw_external_warnings()\n    print('this is a message')\n    result = a + b\n    return result\n\n>>> func(1, 2)\nthis is a message\n3\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Rainbow-Dreamer/hide_warnings/archive/0.17.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Rainbow-Dreamer/hide_warnings",
    "keywords": "python,hide warnings",
    "license": "LGPLv2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hide-warnings",
    "package_url": "https://pypi.org/project/hide-warnings/",
    "platform": "",
    "project_url": "https://pypi.org/project/hide-warnings/",
    "project_urls": {
      "Download": "https://github.com/Rainbow-Dreamer/hide_warnings/archive/0.17.tar.gz",
      "Homepage": "https://github.com/Rainbow-Dreamer/hide_warnings"
    },
    "release_url": "https://pypi.org/project/hide-warnings/0.17/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This is a python module that can hide any annoying warning messages from external C and C++ libraries in your python project",
    "version": "0.17",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12166222,
  "releases": {
    "0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "326f6f1af28a72e53eb9ea5947b2ec1180c3bc91eca8439e931a7d247368f525",
          "md5": "c553cb2324805e2e175bdfe6615b827d",
          "sha256": "ab8682f5c89b413a95ce79c357c03d6ebace0031875c723f8b07784781a6d16c"
        },
        "downloads": -1,
        "filename": "hide_warnings-0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "c553cb2324805e2e175bdfe6615b827d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11971,
        "upload_time": "2021-11-30T14:00:20",
        "upload_time_iso_8601": "2021-11-30T14:00:20.148615Z",
        "url": "https://files.pythonhosted.org/packages/32/6f/6f1af28a72e53eb9ea5947b2ec1180c3bc91eca8439e931a7d247368f525/hide_warnings-0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "326f6f1af28a72e53eb9ea5947b2ec1180c3bc91eca8439e931a7d247368f525",
        "md5": "c553cb2324805e2e175bdfe6615b827d",
        "sha256": "ab8682f5c89b413a95ce79c357c03d6ebace0031875c723f8b07784781a6d16c"
      },
      "downloads": -1,
      "filename": "hide_warnings-0.17.tar.gz",
      "has_sig": false,
      "md5_digest": "c553cb2324805e2e175bdfe6615b827d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11971,
      "upload_time": "2021-11-30T14:00:20",
      "upload_time_iso_8601": "2021-11-30T14:00:20.148615Z",
      "url": "https://files.pythonhosted.org/packages/32/6f/6f1af28a72e53eb9ea5947b2ec1180c3bc91eca8439e931a7d247368f525/hide_warnings-0.17.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}