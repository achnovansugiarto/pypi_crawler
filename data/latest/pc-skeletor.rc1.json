{
  "info": {
    "author": "Lukas Meyer",
    "author_email": "lukas.meyer@fau.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PC Skeletor - Point Cloud Skeletonization <img align=\"right\" height=\"250\" src=\"img/PCSkeletor.png\">\n\n<a href=\"https://img.shields.io/pypi/pyversions/pc_skeletor\"><img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/pc_skeletor\"></a>\n<a href=\"https://github.com/meyerls/PC-Skeletor/actions\"><img alt=\"GitHub Workflow Status\" src=\"https://img.shields.io/github/workflow/status/meyerls/PC-Skeletor/Python%20package\"></a>\n<a href=\"https://github.com/meyerls/PC-Skeletor/blob/main/LICENSE\"><img alt=\"license\" src=\"https://img.shields.io/github/license/meyerls/PC-Skeletor\"></a>\n\n## About\n\n**PC Skeletor** is a Python library for extracting a 1d skeleton from 3d point clouds using the algorithm from\n[Laplacian-Based Contraction](https://taiya.github.io/pubs/cao2010cloudcontr.pdf) or\n[L1-Medial Skeleton](https://www.cs.sfu.ca/~haoz/pubs/huang_sig13_l1skel.pdf) (Not yet implemented!).\n\n\n<p align=\"center\">\n    <img width=\"70%\" src=\"img/tree_sceleton_small.gif\">\n</p>\n\n## ‚ö°Ô∏è Quick Start\n\n### Installation\n\nFirst install [Python](https://www.python.org/downloads/) Version 3.7 or higher. The python package can be installed via\nfrom [PyPi](https://pypi.org/project/pc-skeletor/) using pip.\n\n ````bash\npip install pc-skeletor\n ````\n\n### Basic Usage\n\nBelow is the code to execute the skeletonization algorithm with a downloaded example point cloud. Additionally to the\nextraction an animation with the original point cloud and the skeleton is created and exported as a gif.\n\n````python\nimport pc_skeletor\nfrom pc_skeletor import skeletor\nfrom pc_skeletor.download import Dataset\nimport numpy as np\n\n# Download test tree dataset\ndownloader = Dataset()\ndownloader.download_tree_dataset()\n\n# Init tree skeletonizer\nskeletor = skeletor.Skeletonizer(point_cloud=downloader.file_path,\n                                 down_sample=0.01,\n                                 debug=False)\nlaplacian_config = {\"MAX_LAPLACE_CONTRACTION_WEIGHT\": 1024,\n                    \"MAX_POSITIONAL_WEIGHT\": 1024,\n                    \"INIT_LAPLACIAN_SCALE\": 100}\nsceleton = skeletor.extract(method='Laplacian', config=laplacian_config)\n# save results\nskeletor.save(result_folder='./data/')\n# Make animation of original point cloud and skeleton\nskeletor.animate(init_rot=np.asarray([[1, 0, 0],\n                                      [0, 0, 1],\n                                      [0, 1, 0]]), steps=200, out='./data/')\n# Interactive visualization\nskeletor.visualize()\n````\n\n## Œ© Parametrization\n\n### Laplacian-Based Contraction\n\nLaplacian-Based Contraction is a method based on contraction of point clouds to extract curve skeletons by iteratively\ncontracting the point cloud. This method is robust to missing data and noise. Additionally no prior knowledge on the\ntopology of the object has to be made.\n\nThe contraction is computed by iteratively solving the linear system\n\n```math\n\\begin{bmatrix}\n\\mathbf{W_L} \\mathbf{L}\\\\\n\\mathbf{W_H}\n\\end{bmatrix} \\mathbf{P}^{'} =\n\\begin{bmatrix}\n\\mathbf{0}\\\\\n\\mathbf{W_H} \\mathbf{P}\n\\end{bmatrix}\n```\n\nobtained from [Kin-Chung Au et al.](http://graphics.csie.ncku.edu.tw/Skeleton/skeleton-paperfinal.pdf)\n$\\mathbf{L}$ is a $n \\times n$\n[Laplacian Matrix](http://rodolphe-vaillant.fr/entry/101/definition-laplacian-matrix-for-triangle-meshes)\nwith cotangent weights. The Laplacian of a point cloud (Laplace-Beltrami Operator) can be used to compute the [mean\ncurvature Vector](http://www.cs.cmu.edu/~kmcrane/Projects/DDG/paper.pdf)(p. 88 & p. 100). $\\mathbf{P}$ is the original\npoint cloud, $\\mathbf{P}^{'}$ a contracted point cloud and $\\mathbf{W_L}$ and $\\mathbf{W_H}$ are diagonal weight\nmatrices balancing the contraction and attraction forces. During the contraction the point clouds get thinner and\nthinner until the solution converges. Afterwards the contracted point cloud aka. skeleton is sampled using\nfarthest-point method.\n\nTo archive good contraction result and avoid over- and under-contraction it is necessary to initialize and update the\nweights $\\mathbf{W_L}$ and $\\mathbf{W_H}$. Therefore the initial values and the maximum values for both diagonal\nweighting matrices have to adjusted to archive good results.\n\n#### Hyperparameters\n\n* **MAX_LAPLACE_CONTRACTION_WEIGHT** [default: 1024]: indicates the maximum contraction factor. If the skeleton is not\n  shrunk to a line and has a net-like structure, this factor should be increased.\n* **MAX_POSITIONAL_WEIGHT** [default: 1024]: indicates the maximum positional or attraction factor. If the skeleton has\n  lost its shape, this factor can be increased to maintain the shape.\n* **INIT_LAPLACIAN_SCALE** [default: 100]: this parameter gives the initial amplification of the laplace weights. At the\n  beginning the laplace weights are calculated over $\\frac{1}{\\alpha \\sum_i m_{ii}}$. $\\alpha$ is the\n  amplification factor and $m_{ii}$ are the diagonal elements of the\n  computed [Mass Matrix](http://rodolphe-vaillant.fr/entry/101/definition-laplacian-matrix-for-triangle-meshes)\n  $\\mathbf{M}$. A large $\\alpha$ might lead to a fast convergence with a loss of the original shape. This value should\n  be adjusted regarding the size of the original point cloud.\n\n### L1-Medial Skeleton\n\ntbd\n\n## üìñ Literature and Code used for implementation\n\n#### Laplacian based contraction\n\nOur implementation\nof [Point Cloud Skeletons via Laplacian-Based Contraction](https://taiya.github.io/pubs/cao2010cloudcontr.pdf) is a\npython reimplementation of the original [Matlab code](https://github.com/taiya/cloudcontr).\n\n#### L1-Medial Skeleton of Point Cloud (NOT YET IMPLEMENTED!)\n\nPaper: https://www.cs.sfu.ca/~haoz/pubs/huang_sig13_l1skel.pdf\n\nSource Code: https://github.com/HongqiangWei/L1-Skeleton\n\n````bash\n@ARTICLE{Huang2013,\ntitle = {L1-Medial Skeleton of Point Cloud},\nauthor = H. Huang and S. Wu and D. Cohen-Or and M. Gong and H. Zhang and G. Li and B.Chen},\njournal = {ACM Transactions on Graphics},\nvolume = {32},\nissue = {4},\npages = {65:1--65:8},\nyear = {2013}\n}\n````\n\n#### Robust Laplacian for Point Clouds\n\nComputation of the discrete laplacian operator\nvia [Nonmanifold Laplace](http://www.cs.cmu.edu/~kmcrane/Projects/NonmanifoldLaplace/NonmanifoldLaplace.pdf) can be\nfound in the [robust-laplacians-py](https://github.com/nmwsharp/robust-laplacians-py) repository.\n\n## Limitation / Improvements\n\n- [ ] Implement L1-Medial skeleton of point cloud\n- [ ] Add graph extraction\n- [ ] Test code\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meyerls/PC-Skeletor",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pc-skeletor",
    "package_url": "https://pypi.org/project/pc-skeletor/",
    "platform": null,
    "project_url": "https://pypi.org/project/pc-skeletor/",
    "project_urls": {
      "Homepage": "https://github.com/meyerls/PC-Skeletor"
    },
    "release_url": "https://pypi.org/project/pc-skeletor/0.0.6/",
    "requires_dist": [
      "numpy",
      "scipy",
      "matplotlib",
      "open3d",
      "robust-laplacian",
      "dgl",
      "torch",
      "tqdm",
      "imageio",
      "wget"
    ],
    "requires_python": "",
    "summary": "Point Cloud Skeletonizer",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15856355,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef64991f8e17a76de3dddf078f7b605458502089a0edfc6fa8e6090fb343a8b9",
          "md5": "6f95e0cdaa692e7185d5c4de5ea33266",
          "sha256": "99c8956a3748face2f9d7b629e3ef92f5d9f394cc352903402a7e99c960c6594"
        },
        "downloads": -1,
        "filename": "pc_skeletor-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f95e0cdaa692e7185d5c4de5ea33266",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12017,
        "upload_time": "2022-11-22T16:42:41",
        "upload_time_iso_8601": "2022-11-22T16:42:41.589504Z",
        "url": "https://files.pythonhosted.org/packages/ef/64/991f8e17a76de3dddf078f7b605458502089a0edfc6fa8e6090fb343a8b9/pc_skeletor-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b770265d20963ed1da41e11de110e526b4ba8863ec0638fb271f91d983c1baf7",
          "md5": "a17593538fe81816e35bfb7d57621c92",
          "sha256": "14ee0b57cb7792b1a91494dcfe1a32aa39e0a7a9fdb96a701fb0bb8053e288c2"
        },
        "downloads": -1,
        "filename": "pc_skeletor-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a17593538fe81816e35bfb7d57621c92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9421,
        "upload_time": "2022-11-22T16:42:43",
        "upload_time_iso_8601": "2022-11-22T16:42:43.649031Z",
        "url": "https://files.pythonhosted.org/packages/b7/70/265d20963ed1da41e11de110e526b4ba8863ec0638fb271f91d983c1baf7/pc_skeletor-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef64991f8e17a76de3dddf078f7b605458502089a0edfc6fa8e6090fb343a8b9",
        "md5": "6f95e0cdaa692e7185d5c4de5ea33266",
        "sha256": "99c8956a3748face2f9d7b629e3ef92f5d9f394cc352903402a7e99c960c6594"
      },
      "downloads": -1,
      "filename": "pc_skeletor-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f95e0cdaa692e7185d5c4de5ea33266",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12017,
      "upload_time": "2022-11-22T16:42:41",
      "upload_time_iso_8601": "2022-11-22T16:42:41.589504Z",
      "url": "https://files.pythonhosted.org/packages/ef/64/991f8e17a76de3dddf078f7b605458502089a0edfc6fa8e6090fb343a8b9/pc_skeletor-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b770265d20963ed1da41e11de110e526b4ba8863ec0638fb271f91d983c1baf7",
        "md5": "a17593538fe81816e35bfb7d57621c92",
        "sha256": "14ee0b57cb7792b1a91494dcfe1a32aa39e0a7a9fdb96a701fb0bb8053e288c2"
      },
      "downloads": -1,
      "filename": "pc_skeletor-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a17593538fe81816e35bfb7d57621c92",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9421,
      "upload_time": "2022-11-22T16:42:43",
      "upload_time_iso_8601": "2022-11-22T16:42:43.649031Z",
      "url": "https://files.pythonhosted.org/packages/b7/70/265d20963ed1da41e11de110e526b4ba8863ec0638fb271f91d983c1baf7/pc_skeletor-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}