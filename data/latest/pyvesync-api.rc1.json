{
  "info": {
    "author": "Tim Empringham",
    "author_email": "tim.empringham@live.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# pyvesync [![build status](https://img.shields.io/pypi/v/pyvesync.svg)](https://pypi.python.org/pypi/pyvesync) <!-- omit in toc -->\n\npyvesync is a library to manage VeSync compatible [smart home devices](#supported-devices)\n\n## Table of Contents <!-- omit in toc -->\n\n- [Installation](#installation)\n- [Supported Devices](#supported-devices)\n- [Usage](#usage)\n- [Configuration](#configuration)\n- [Example Usage](#example-usage)\n  - [Get electricity metrics of outlets](#get-electricity-metrics-of-outlets)\n- [API Details](#api-details)\n  - [Manager API](#manager-api)\n  - [Device API](#device-api)\n  - [Outlet Specific Energy Methods and Properties](#outlet-specific-energy-methods-and-properties)\n  - [Model ESW15-USA 15A/1800W Methods](#model-esw15-usa-15a1800w-methods)\n  - [Air Purifier LV-PUR131S Methods](#air-purifier-lv-pur131s-methods)\n  - [Dimmable Smart Light Bulb Method and Properties](#dimmable-smart-light-bulb-method-and-properties)\n  - [Tunable Smart Light Bulb Methods and Properties](#tunable-smart-light-bulb-methods-and-properties)\n  - [Dimmable Switch Methods and Properties](#dimmable-switch-methods-and-properties)\n  - [JSON Output API](#json-output-api)\n    - [JSON Output for All Devices](#json-output-for-all-devices)\n    - [JSON Output for Outlets](#json-output-for-outlets)\n    - [JSON Output for Dimmable Switch](#json-output-for-dimmable-switch)\n    - [JSON Output for Bulbs](#json-output-for-bulbs)\n    - [JSON Output for Air Purifier](#json-output-for-air-purifier)\n- [Notes](#notes)\n- [Integration with Home Assistant](#integration-with-home-assistant)\n\n## Installation\n\nInstall the latest version from pip:\n\n```python\npip install pyvesync\n```\n\n## Supported Devices\n\n1. Etekcity Voltson Smart WiFi Outlet (7A model ESW01-USA)\n2. Etekcity Voltson Smart WiFi Outlet (10A model ESW01-EU)\n3. Etekcity Voltson Smart Wifi Outlet (10A model ESW03-USA)\n4. Etekcity Voltson Smart WiFi Outlet (15A model ESW15-USA)\n5. Etekcity Two Plug Outdoor Outlet (ESO15-TB) (Each plug is a separate object, energy readings are for both plugs combined)\n6. Etekcity Smart WiFi Light Switch (model ESWL01)\n7. Levoit Smart Wifi Air Purifier (LV-PUR131S)\n8. Etekcity Soft White Dimmable Smart Bulb (ESL100)\n9. Etekcity Cool to Soft White Tunable Dimmable Bulb (ESL100CW)\n10. Etekcity Wifi Dimmer Switch (ESD16)\n\n## Usage\n\nTo start with the module:\n\n```python\nfrom pyvesync import VeSync\n\nmanager = VeSync(\"EMAIL\", \"PASSWORD\", time_zone=DEFAULT_TZ)\nmanager.login()\n\n# Get/Update Devices from server - populate device lists\nmanager.update()\n\nmy_switch = manager.outlets[0]\n# Turn on the first switch\nmy_switch.turn_on()\n# Turn off the first switch\nmy_switch.turn_off()\n\n# Get energy usage data\nmanager.update_energy()\n\n# Display outlet device information\nfor device in manager.outlets:\n    device.display()\n```\n\n## Configuration\n\nThe `time_zone` argument is optional but the specified time zone must match time zone in the tz database (IANNA Time Zone Database), see this link for reference:\n[tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\nThe time zone determines how the energy history is generated for the smart outlets, i.e. for the week starts at 12:01AM Sunday morning at the specified time zone.  If no time zone or an invalid time zone is entered the default is America/New_York\n\n```python\n#Devices are respectively located in their own lists that can be iterated over\nmanager.outlets = [VeSyncOutletObjects]\nmanager.switches = [VeSyncSwitchObjects]\nmanager.fans = [VeSyncFanObjects]\nmanger.bulbs = [VeSyncBulbObjects]\n```\n\nIf outlets are going to be continuously polled, a custom energy update interval can be set - The default is 6 hours (21600 seconds)\n\n```python\nmanager.energy_update_interval = time # time in seconds\n```\n\n## Example Usage\n\n### Get electricity metrics of outlets\n\n```python\nfor s in manager.outlets:\n  s.update_energy(check_bypass=False) # Get energy history for each device\n```\n\n## API Details\n\n### Manager API\n\n`VeSync.get_devices()` - Returns a list of devices\n\n`VeSync.login()` - Uses class username and password to login to VeSync\n\n`VeSync.update()` - Fetch updated information about devices\n\n`VeSync.update_all_devices()` - Fetch details for all devices (run `VeSyncDevice.update()`)\n\n`VeSync.update_energy(bypass_check=False)` - Get energy history for all outlets - Builds week, month and year nested energy dictionary.  Set `bypass_check=True` to disable the library from checking the update interval\n\n### Device API\n\n`VeSyncDevice.turn_on()` - Turn on the device\n\n`VeSyncDevice.turn_off()` - Turn off the device\n\n`VeSyncDevice.update()` - Fetch updated information about device\n\n`VeSyncDevice.active_time` - Return active time of the device in minutes\n\n`VeSyncDevice.get_config()` - Retrieve Configuration data such as firmware version for device and store in the `VeSyncDevice.config` dictionary\n\n`VeSyncDevice.firmware_update` - Return true if Firmware has update available. `VeSyncDevice.get_config()` must be called first\n\n### Outlet Specific Energy Methods and Properties\n\n`VeSyncOutlet.update_energy(bypass_check=False)` - Get outlet energy history - Builds week, month and year nested energy dictionary. Set `bypass_check=True` to disable the library from checking the update interval\n\n`VeSyncOutlet.energy_today` - Return current energy usage in kWh\n\n`VeSyncOutlet.power` - Return current power in watts of the device\n\n`VeSyncOutlet.voltage` - Return current voltage reading\n\n`VesyncOutlet.weekly_energy_total` - Return total energy reading for the past week in kWh, starts 12:01AM Sunday morning\n\n`VesyncOutlet.monthly_energy_total` - Return total energy reading for the past month in kWh\n\n`VesyncOutlet.yearly_energy_total` - Return total energy reading for the past year in kWh\n\n### Model ESW15-USA 15A/1800W Methods\n\nThe rectangular smart switch model supports some additional functionality on top of the regular api call\n\n`VeSyncOutlet.turn_on_nightlight()` - Turn on the nightlight\n\n`VeSyncOutlet.turn_off_nightlight()` - Turn off the nightlight\n\n### Air Purifier LV-PUR131S Methods\n\n`VeSyncFan.fan_level` - Return the level of the fan (1-3) or 0 for off\n\n`VeSyncFan.filter_life` - Return the percentage of filter life remaining\n\n`VeSyncFan.air_quality` - Return air quality reading\n\n`VeSyncFan.auto_mode()` - Change mode to auto\n\n`VeSyncFan.manual_mode()` - Change fan mode to manual with fan level 1\n\n`VeSyncFan.sleep_mode()` - Change fan mode to sleep  \n\n`VeSyncFan.change_fan_speed(speed)` - Change fan speed with level 1, 2 or 3\n\n`VeSyncFan.screen_status` - Get Status of screen on/off\n\n### Dimmable Smart Light Bulb Method and Properties\n\n`VeSyncBulb.brightness` - Return brightness in percentage (1 - 100)\n\n`VeSyncBulb.set_brightness(brightness)` - Set bulb brightness values from 1 - 100\n\n### Tunable Smart Light Bulb Methods and Properties\n\n`VeSyncBulb.color_temp_pct` - Return color temperature in percentage (0 - 100)\n\n`VeSyncBulb.color_temp_kelvin` - Return brightness in Kelvin\n\n`VeSyncBulb.set_color_temp(color_temp)` - Set color temperature in percentage (0 - 100)\n\n### Dimmable Switch Methods and Properties\n\n`VeSyncSwitch.brightness` - Return brightness of switch in percentage (1 - 100)\n\n`VeSyncSwitch.indicator_light_status` - return status of indicator light on switch\n\n`VeSyncSwitch.rgb_light_status` - return status of rgb light on faceplate\n\n`VeSyncSwitch.rgb_light_value` - return dictionary of rgb light color (0 - 255)\n\n`VeSyncSwitch.set_brightness(brightness)` - Set brightness of switch (1 - 100)\n\n`VeSyncSwitch.indicator_light_on()` - Turn indicator light on\n\n`VeSyncSwitch.indicator_light_off()` - Turn indicator light off\n\n`VeSyncSwitch.rgb_color_on()` - Turn rgb light on\n\n`VeSyncSwitch.rgb_color_off()` - Turn rgb light off\n\n`VeSyncSwitch.rgb_color_set(red, green, blue)` - Set color of rgb light (0 - 255)\n\n### JSON Output API\n\nThe `device.displayJSON()` method outputs properties and status of the device\n\n#### JSON Output for All Devices\n\n```python\ndevice.displayJSON()\n\n#Returns:\n\n{\n  'Device Name': 'Device 1',\n  'Model': 'Device Model',\n  'Subdevice No': '1',\n  'Status': 'on',\n  'Online': 'online',\n  'Type': 'Device Type',\n  'CID': 'DEVICE-CID'\n}\n```\n\n#### JSON Output for Outlets\n\n```python\n{\n  'Active Time': '1', # in minutes\n  'Energy': '2.4', # today's energy in kWh\n  'Power': '12', # current power in W\n  'Voltage': '120', # current voltage\n  'Energy Week': '12', # totaly energy of week in kWh\n  'Energy Month': '50', # total energy of month in kWh\n  'Energy Year': '89', # total energy of year in kWh\n}\n```\n\n#### JSON Output for Dimmable Switch\n\nThis output only applies to dimmable switch.  The standard switch has the default device JSON output shown [above](#json-output-for-all-devices)\n\n```python\n{\n  'Indicator Light': 'on', # status of indicator light\n  'Brightness': '50', # percent brightness\n  'RGB Light': 'on' # status of RGB Light on faceplate\n}\n```\n\n#### JSON Output for Bulbs\n\n```python\n# output for dimmable bulb\n{\n  'Brightness': '50' # brightness in percent\n}\n\n# output for tunable bulb\n{\n  'Kelvin': '5400' # color temperature in Kelvin\n}\n\n```\n\n#### JSON Output for Air Purifier\n\n```python\n{\n  'Active Time': '50', # minutes\n  'Fan Level': '2', # fan level 1-3\n  'Air Quality': '95', # air quality in percent\n  'Mode': 'auto',\n  'Screen Status': 'on',\n  'Filter Life': '99' # remaining filter life in percent\n}\n```\n\n## Notes\n\nMore detailed data is available within the `VesyncOutlet` by inspecting the `VesyncOutlet.energy` dictionary.\n\nThe `VesyncOutlet.energy` object includes 3 nested dictionaries `week`, `month`, and `year` that contain detailed weekly, monthly and yearly data\n\n```python\nVesyncOutlet.energy['week']['energy_consumption_of_today']\nVesyncOutlet.energy['week']['cost_per_kwh']\nVesyncOutlet.energy['week']['max_energy']\nVesyncOutlet.energy['week']['total_energy']\nVesyncOutlet.energy['week']['data'] # which itself is a list of values\n```\n\n## Integration with Home Assistant\n\nThis library is integrated with Home Assistant and documentation can be found at <https://www.home-assistant.io/components/vesync/>. The library version included with Home Assistant may lag behind development compared to this repository so those wanting to use the latest version can do the following to integrate with HA.\n\n1. Add a `custom_components` directory to your Home Assistant configuration directory\n2. Add a `vesync` directory as a directory within `custom_components`\n3. Add `switch.py` to the `vesync` directory\n4. Add `__init__.py` to the `vesync` directory\n5. Add `manifest.json` to the `vesync` directory\n6. Add the following config to your Home Assistant `configuration.yaml` file:\n\n```python\nvesync:\n  username: VESYNC_USERNAME\n  password: VESYNC_PASSWORD\n```\n\n1. Restart Home Assistant\n\nThe `custom_components` directory should include the following files:\n\n```bash\ncustom_components/vesync/__init__.py\ncustom_components/vesync/switch.py\ncustom_components/vesync/fan.py\ncustom_components/vesync/manifest.json\n```\n\nThe version of the library defined in `manifest.json` should now get loaded within Home Assistant.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/djtimca/pyvesync",
    "keywords": "iot,vesync",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyvesync-api",
    "package_url": "https://pypi.org/project/pyvesync-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyvesync-api/",
    "project_urls": {
      "Homepage": "https://github.com/djtimca/pyvesync"
    },
    "release_url": "https://pypi.org/project/pyvesync-api/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "pyvesync is a library to manage Etekcity                 Devices and Levoit Air Purifier",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8316469,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e8a358db32bad3873dee02b46c8d28f0ff264517560d973f3ca3de94b801146",
          "md5": "ec0f900dd4b540ead816675ef2feb812",
          "sha256": "89a5d626533d62939422013453302dacca752e92d077c4095dbf1b27438342a3"
        },
        "downloads": -1,
        "filename": "pyvesync-api-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ec0f900dd4b540ead816675ef2feb812",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 33858,
        "upload_time": "2020-10-01T14:13:54",
        "upload_time_iso_8601": "2020-10-01T14:13:54.226776Z",
        "url": "https://files.pythonhosted.org/packages/4e/8a/358db32bad3873dee02b46c8d28f0ff264517560d973f3ca3de94b801146/pyvesync-api-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e8a358db32bad3873dee02b46c8d28f0ff264517560d973f3ca3de94b801146",
        "md5": "ec0f900dd4b540ead816675ef2feb812",
        "sha256": "89a5d626533d62939422013453302dacca752e92d077c4095dbf1b27438342a3"
      },
      "downloads": -1,
      "filename": "pyvesync-api-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ec0f900dd4b540ead816675ef2feb812",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 33858,
      "upload_time": "2020-10-01T14:13:54",
      "upload_time_iso_8601": "2020-10-01T14:13:54.226776Z",
      "url": "https://files.pythonhosted.org/packages/4e/8a/358db32bad3873dee02b46c8d28f0ff264517560d973f3ca3de94b801146/pyvesync-api-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}