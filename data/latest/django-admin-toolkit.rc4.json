{
  "info": {
    "author": "FrankHood Business Solutions srl",
    "author_email": "info@frankhood.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "=============================\nDjango Admin Toolkit\n=============================\n\n.. image:: https://badge.fury.io/py/django-admin-toolkit.svg/?style=flat-square\n    :target: https://badge.fury.io/py/django-admin-toolkit\n\n.. image:: https://readthedocs.org/projects/pip/badge/?version=latest&style=flat-square\n    :target: https://django-admin-toolkit.readthedocs.io/en/latest/\n\n.. image:: https://img.shields.io/coveralls/github/frankhood/django-admin-toolkit/master?style=flat-square\n    :target: https://coveralls.io/github/frankhood/django-admin-toolkit?branch=master\n    :alt: Coverage Status\n\nThis package offers a wide choice of admin mixins to best customize your Django admin site,\nwith a multitude of useful features that will simplify your development.\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-admin-toolkit.readthedocs.io.\n\nQuickstart\n----------\n\nInstall Django Admin Toolkit::\n\n    pip install django-admin-toolkit\n\nAdd it to your ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'admin_toolkit',\n        ...\n    )\n\nAfterSaveAdminMixin\n_________________________\n\nThrough this mixin it is possible to insert your own logics at the end of saving the model via Django admin site.\n\n.. code-block:: python\n\n    from admin_toolkit.admin_mixins import AfterSaveAdminMixin\n\n    @admin.register(app_models.AfterSaveExampleModel)\n    class AfterSaveExampleModelAdmin(AfterSaveAdminMixin, admin.ModelAdmin):\n        list_display = (\"__str__\", \"test_text\")\n        fields = (\"test_text\",)\n\n\nAllReadonlyAdminMixin\n_____________________\n\nThis admin mixin will turn all your admin fields into read only fields.\n\n\n.. code-block:: python\n\n    from admin_toolkit.admin_mixins import AllReadonlyAdminMixin\n\n    @admin.register(app_models.AllReadonlyExampleModel)\n    class AllReadonlyExampleModelAdmin(AllReadonlyAdminMixin, admin.ModelAdmin):\n        list_display = (\"id\", \"test_text\",)\n        fields = (\"test_text\",)\n\nIn the image you can see that there is no permission to add other objects because in the mixin ``has_add_permission()`` returns False.\n\n.. image:: docs/readme_images/all_readonly_changelist.png\n    :alt: ChangeList Image.\n\nAnd in the detail page it is possible to see that all the fields present are readonly.\n\n.. image:: docs/readme_images/all_readonly_changeform.png\n    :alt: ChangeForm Image.\n\nAllReadonlyAdminInlineMixin\n___________________________\n\nThis admin mixin will turn all your inline admin fields into read only fields.\n\n.. code-block:: python\n\n    from admin_toolkit.admin_mixins import AllReadonlyAdminInlineMixin\n\n    class AllReadonlyExampleModelAdminInline(AllReadonlyAdminInlineMixin, admin.TabularInline):\n        model = app_models.AllReadonlyExampleModel\n        fields = (\"test_text\",)\n\nIn the image you can see that there is no permission to add other objects in inline because in the mixin ``has_add_permission()`` returns False.\nAnd it is possible to see that all the fields present are readonly.\n\n.. image:: docs/readme_images/all_readonly_inline.png\n    :alt: Inline Image.\n\n\nBaseAdminMixin\n______________\n\nThis mixin provides a wide variety of display methods for all (or almost all)\nof the readonly fields that you will need to display in your Django admin site.\n\n\nCreate your model and add the ``admin_changelist_url()`` method and the ``get_ct()`` method to it.\n\n.. code-block:: python\n\n    class BaseExampleModel(models.Model):\n        objects = app_managers.BaseExampleModelManager.from_queryset(app_queryset.BaseExampleModelQuerySet)()\n\n        test_boolean = models.BooleanField(\n            \"Test bool\",\n            null=True\n        )\n        test_datetime = models.DateTimeField(\n            \"Test datetime\"\n        )\n        test_fk = models.ForeignKey(\n            \"example.BaseExampleFkModel\",\n            verbose_name=\"Test fk\",\n            on_delete=models.CASCADE,\n            related_name=\"example_for_base_admin_mixins\"\n        )\n        test_image = models.ImageField(\n            \"Test image\",\n            upload_to=\"example/images/\"\n        )\n        test_m2m = models.ManyToManyField(\n            \"example.BaseExampleM2MModel\",\n            related_name=\"example_for_base_admin_mixins\",\n        )\n        example_generic_relation_model_for_base_admin_mixin = GenericRelation(\n            \"example.BaseExampleGenericRelationModel\",\n            related_query_name='example_model_for_base_admin_mixin'\n        )\n\n        def __str__(self):\n            return str(self.id)\n\n        @classmethod\n        def admin_changelist_url(cls):\n            return reverse(\"admin:example_baseexamplemodel_changelist\")\n\n        def get_ct(self):\n            return ContentType.objects.get(\n                app_label=self._meta.app_label, model=self._meta.model_name\n            )\n\n\nThen register ``BaseExampleModel`` and start to add all yours displays.\n\n.. code-block:: python\n\n    from admin_toolkit.admin_mixins import BaseAdminMixin\n\n\n    @admin.register(app_models.BaseExampleModel)\n    class BaseExampleModelAdmin(BaseAdminMixin, admin.ModelAdmin):\n        list_display = (\n            \"__str__\",\n            \"display_test_boolean\",\n            \"display_test_datetime\",\n            \"display_test_date\",\n            \"display_test_time\",\n            \"display_test_fk\",\n            \"display_test_image\",\n            \"display_test_m2m\",\n        )\n        fields = (\"test_boolean\", \"test_datetime\", \"test_fk\", \"test_image\", \"test_m2m\")\n        readonly_fields = (\n            \"display_test_boolean\",\n            \"display_test_datetime\",\n            \"display_test_date\",\n            \"display_test_time\",\n            \"display_test_fk\",\n            \"display_test_image\",\n            \"display_test_m2m\",\n            \"display_generic_relation\",\n        )\n\n\n#. How to display a boolean field:\n\n    .. code-block:: python\n\n        @mark_safe\n        def display_test_boolean(self, obj):\n            if obj and obj.test_boolean:\n                return self._display_boolean(obj.test_boolean)\n            return \"\"\n\n\n    .. image:: docs/readme_images/base_example_boolean.png\n        :alt: BaseAdminMixin boolean field Image.\n\n#. How to display a datetime (work only with datetime):\n\n    .. code-block:: python\n\n        @mark_safe\n        def display_test_datetime(self, obj):\n            if obj and obj.test_datetime:\n                return self._display_datetime(obj.test_datetime)\n            return \"\"\n\n    .. image:: docs/readme_images/base_example_datetime.png\n        :alt: BaseAdminMixin datetime field Image.\n\n#. How to display a date (work only with datetime):\n\n    .. code-block:: python\n\n        @mark_safe\n        def display_test_date(self, obj):\n            if obj and obj.test_datetime:\n                return self._display_date(obj.test_datetime)\n            return \"\"\n\n    .. image:: docs/readme_images/base_example_date.png\n        :alt: BaseAdminMixin date field Image.\n\n#. How to display a time (work only with datetime):\n\n    .. code-block:: python\n\n        @mark_safe\n        def display_test_time(self, obj):\n            if obj and obj.test_datetime:\n                return self._display_time(obj.test_datetime)\n            return \"\"\n\n    .. image:: docs/readme_images/base_example_time.png\n        :alt: BaseAdminMixin time field Image.\n\n#. How to display a ForeignKey:\n\n    .. code-block:: python\n\n        @mark_safe\n        def display_test_fk(self, obj):\n            if obj and obj.test_fk:\n                return self._display_fk_object(obj.test_fk)\n            return \"\"\n\n    .. image:: docs/readme_images/base_example_fk.png\n        :alt: BaseAdminMixin FK field Image.\n\n#. How to display an image:\n\n    .. code-block:: python\n\n        @mark_safe\n        def display_test_image(self, obj):\n            if obj and obj.test_image:\n                return self._display_image(obj.test_image)\n            return \"\"\n\n    .. image:: docs/readme_images/base_example_image.png\n        :alt: BaseAdminMixin image field Image.\n\n#. How to display a ManyToMany:\n\n    .. code-block:: python\n\n        @mark_safe\n        def display_test_m2m(self, obj):\n            if obj and obj.test_m2m:\n                return self._display_m2m_objects(\n                    obj, m2m_field_name=\"test_m2m\", label=\"Example M2Ms\"\n                )\n            return \"\"\n\n    .. image:: docs/readme_images/base_example_m2m.png\n        :alt: BaseAdminMixin image field Image.\n\n#. How to display a GenericRelation:\n\n    .. code-block:: python\n\n        @mark_safe\n        def display_generic_relation(self, obj):\n            if obj and obj.id:\n                return self._display_generic_related_objects(\n                    obj,\n                    \"example_generic_relation_model_for_base_admin_mixin\",\n                    \"Example Generic Relations\"\n                )\n            return \"\"\n\n    .. image:: docs/readme_images/base_example_generic_relation.png\n        :alt: BaseAdminMixin generic relation field Image.\n\nThis is the final changelist result:\n\n.. image:: docs/readme_images/base_example_changelist.png\n    :alt: BaseAdminMixin example result ChangeList Image.\n\n\nConfigurableWidgetsAdminMixin\n_____________________________\n\nUse ConfigurableWidgetsMixinAdmin if you want to customize quickly\ndefault widget/label/help_text or every related admin form configurations\nwithout doing modifications of the auto created ModelForm.\n\nIn this example I am going to modify the help_text and the widgets of the three fields.\n\n.. code-block:: python\n\n    # ==================\n    # project/models.py\n    # ==================\n\n    class ConfigurableWidgetsExampleModel(models.Model):\n        objects = ConfigurableWidgetsExampleModelManager.from_queryset(\n            ConfigurableWidgetsExampleModelQuerySet)()\n\n        test_text = models.CharField(\"Test Text\", max_length=500, default=\"\", blank=True)\n        test_fk = models.ForeignKey(\n            ConfigurableWidgetsExampleFKModel,\n            verbose_name=\"Test FK\",\n            on_delete=models.SET_NULL,\n            null=True\n        )\n        test_m2m = models.ManyToManyField(\n            ConfigurableWidgetsExampleM2MModel,\n            verbose_name=\"Test M2M\"\n        )\n\n        class Meta:\n            verbose_name = \"Configurable widgets example model\"\n            verbose_name_plural = \"Configurable widgets example models\"\n\n    # ==================\n    # project/admin.py\n    # ==================\n    from admin_toolkit.admin_mixins import ConfigurableWidgetsAdminMixin\n\n\n    @admin.register(app_models.ConfigurableWidgetsExampleModel)\n    class ConfigurableWidgetsExampleModelAdmin(ConfigurableWidgetsAdminMixin, admin.ModelAdmin):\n        list_display = (\"id\", \"test_text\",)\n        fieldsets = (\n            (None, {\"fields\": (\n                (\"test_text\",),\n                (\"test_fk\", \"test_m2m\",),\n            )}),\n        )\n        filter_horizontal = (\"test_m2m\",)\n        dbfield_overrides = {\n            \"test_text\": {\"help_text\": \"Test Text Example help text\", \"widget\": forms.Textarea},\n        }\n        fkfield_overrides = {\n            \"test_fk\": {\"help_text\": \"Test FK Example help text\", \"widget\": forms.RadioSelect},\n        }\n        m2mfield_overrides = {\n            \"test_m2m\": {\"help_text\": \"Test M2M Example help text\", \"widget\": forms.CheckboxSelectMultiple}\n        }\n\nThis is the final result:\n\n.. image:: docs/readme_images/configurable_widgets_changeform.png\n    :alt: Configurable Widgets Mixin change form Image.\n\n\nDetailInInlineAdminMixin\n________________________\n\nThis admin mixin allows you to have in each line of the inline a button that redirects to the change form of the element created.\n\n.. code-block:: python\n\n    from admin_toolkit.admin_mixins import DetailInInlineAdminMixin\n\n\n    class DetailInInlineExampleModelAdminInline(DetailInInlineAdminMixin, admin.TabularInline):\n        fields = (\"test_text\",)\n        model = app_models.DetailInInlineExampleModel\n\nThis is the final result:\n\n.. image:: docs/readme_images/detail_in_inline_changeform.png\n    :alt: Configurable Widgets Mixin change form Image.\n\n\nEmptyValueAdminMixin\n____________________\n\nThis admin mixin allows you to define a label for a foreign key field for the empty value.\n\n.. code-block:: python\n\n    @admin.register(app_models.EmptyValueExampleModel)\n    class EmptyValueExampleModelAdmin(EmptyValueAdminMixin, admin.ModelAdmin):\n        list_display = (\"id\", \"test_text\", \"test_fk\",)\n        fields = (\"test_text\", \"test_fk\")\n        empty_values = {\n            \"test_fk\": _(\"NO TEST FK\")\n        }\n\nThis is the final result:\n\n.. image:: docs/readme_images/empty_value_change_form.png\n    :alt: Empty value admin mixin change form Image.\n\n\nExtraButtonAdminMixin\n_____________________\n\nThis admin mixin allows you to add extra buttons links next to the add button in a simple and immediate way.\n\n.. code-block:: python\n\n    @admin.register(app_models.ExtraButtonExampleModel)\n    class ExtraButtonExampleModelAdmin(ExtraButtonAdminMixin, admin.ModelAdmin):\n        list_display = (\"id\", \"test_text\")\n        fields = (\"test_text\",)\n        extra_button = [\n            {\n                \"label\": \"Example Extra Button\",\n                \"url\": \"http://example.com\",\n                \"class\": \"\"\n            }\n        ]\n\nThis is the final result:\n\n.. image:: docs/readme_images/extra_button_changelist.png\n    :alt: Extra button admin mixin changelist Image.\n\n\nFloatingAdminMixin\n__________________\n\nThis mixin makes the list filters collapsible vertically\nin such a way as to have more space for any columns that otherwise would not be seen.\n\n.. code-block:: python\n\n    @admin.register(app_models.FloatingExampleModel)\n    class FloatingExampleModelAdmin(FloatingAdminMixin, admin.ModelAdmin):\n        list_display = (\"id\", \"test_text\")\n        list_filter = (\"test_text\",)\n        fields = (\"test_text\",)\n\n\nThis is the final result:\n\n\n#. When the list filter is collapsed.\n    .. image:: docs/readme_images/floating_changelist_collapsed.png\n        :alt: Floating admin mixin collapsed in changelist Image.\n\n#. When the list filter is decollapsed.\n    .. image:: docs/readme_images/floating_changelist_decollapsed.png\n        :alt: Floating admin mixin decollapsed in changelist Image.\n\n\nImprovedRawIdFieldsAdminMixin\n_____________________________\n\nThis admin mixin allows you to view the link of the changelist/changeform\nof the selected objects inside the raw_id_field on ForeignKey and ManyToMany.\n\n.. code-block:: python\n\n    @admin.register(app_models.ImprovedRawIdFieldsExampleModel)\n    class ImprovedRawIdFieldsExampleModelAdmin(ImprovedRawIdFieldsAdminMixin, admin.ModelAdmin):\n        improved_raw_id_fields = [\"test_fk\", \"test_m2m\"]\n        list_display = (\"id\", \"test_name\",)\n        fieldsets = (\n            (None, {\"fields\": (\n                (\"test_name\",),\n                (\"test_fk\", \"test_m2m\"),\n            )}),\n        )\n\n\nThis is the result:\n\n\n#. When adding an object.\n    .. image:: docs/readme_images/improve_raw_fields_changeform_add.png\n        :alt: Improve Raw Id Fields admin mixin in changeform add Image.\n\n\n#. When changing an object.\n    .. image:: docs/readme_images/improve_raw_fields_changeform_change.png\n        :alt: Improve Raw Id Fields admin mixin in changeform change Image.\n\n\nADMIN FILTERS\n_____________\nThis package also comes with a set of list filters\nthat you can use to make it easier to write filters with special queries.\n\n\n.. image:: docs/readme_images/admin_filters_changelist.png\n    :alt: Admin filters changelist Image.\n\nCustomRelatedSelectFilter\n=========================\nUsing this filter on Many to Many or Foreign Key it is possible\nto have a list of elements associated with the field inserted in the list_filter\nwhich becomes a select if the list exceeds 4 elements ordered according to a specific\nfield of the foreign key or many to many.\n\n.. code-block:: python\n\n    class CustomRelatedSelectFilterForTestFK(admin_filters.CustomRelatedSelectFilter):\n\n        def get_related_order(self):\n            return [\"test_char\"]\n\n\n    class CustomRelatedSelectFilterForTestM2M(admin_filters.CustomRelatedSelectFilter):\n\n        def get_related_order(self):\n            return [\"test_char\"]\n\n    @admin.register(app_models.AdminFilterExampleModel)\n    class AdminFilterExampleModelAdmin(admin.ModelAdmin):\n        list_display = (\"id\", \"test_char\", \"get_test_choice_display\", \"test_fk\")\n        list_filter = (\n            (\"test_fk\", CustomRelatedSelectFilterForTestFK),\n            (\"test_m2m\", CustomRelatedSelectFilterForTestM2M),\n        )\n        fieldsets = (\n            (None, {\"fields\": (\n                (\"test_char\", \"test_choice\", \"test_fk\", \"test_m2m\"),\n            )}),\n        )\n\n\nThis are the results:\n\n* For the field test_fk:\n\n    .. image:: docs/readme_images/admin_custom_related_filter_fk.png\n        :alt: Admin custom related filter for FK\n\n\n* For the field test_m2m:\n\n    .. image:: docs/readme_images/admin_custom_related_filter_m2m.png\n        :alt: Admin custom related filter for M2M\n\n\nRelatedSelectFilter\n===================\nUsing this filter on Many to Many or Foreign Key it is possible\nto have a list of elements associated with the field inserted in the list_filter\nwhich becomes a select if the list exceeds 4 elements.\n\n.. code-block:: python\n\n    @admin.register(app_models.AdminFilterExampleModel)\n    class AdminFilterExampleModelAdmin(admin.ModelAdmin):\n        list_display = (\"id\", \"test_char\", \"get_test_choice_display\", \"test_fk\")\n        list_filter = (\n            (\"test_fk\", RelatedSelectFilter),\n        )\n        fieldsets = (\n            (None, {\"fields\": (\n                (\"test_char\", \"test_choice\", \"test_fk\", \"test_m2m\"),\n            )}),\n        )\n\n\nSelectFilter\n============\nThis filter can be used on fields that contain choices to be able to display them in a select instead of seeing a bulleted list.\n\n.. code-block:: python\n\n    @admin.register(app_models.AdminFilterExampleModel)\n    class AdminFilterExampleModelAdmin(admin.ModelAdmin):\n        list_display = (\"id\", \"test_char\", \"get_test_choice_display\", \"test_fk\")\n        list_filter = (\n            (\"test_choice\", SelectFilter),\n        )\n        fieldsets = (\n            (None, {\"fields\": (\n                (\"test_char\", \"test_choice\", \"test_fk\", \"test_m2m\"),\n            )}),\n        )\n\n\nThis is the result:\n\n.. image:: docs/readme_images/admin_select_filter.png\n    :alt: Admin select filter for choices Image.\n\n\nSimpleBooleanListFilter\n=======================\nThis filter can be used to give a given query a boolean filter like this example:\n\n.. code-block:: python\n\n    # tests/example/admin_filters.py\n\n    class SimpleBooleanTestInTestCharFilter(admin_filters.SimpleBooleanListFilter):\n        title = \"Test word is in Test char?\"\n        parameter_name = \"test_char\"\n\n        def get_true_queryset_values(self, queryset):\n            return queryset.filter(test_char__icontains=\"test\")\n\n        def get_false_queryset_values(self, queryset):\n            return queryset.exclude(test_char__icontains=\"test\")\n\n    # tests/example/admin.py\n\n    from tests.example import admin_filters as app_admin_filters\n\n    @admin.register(app_models.AdminFilterExampleModel)\n    class AdminFilterExampleModelAdmin(admin.ModelAdmin):\n        list_display = (\"id\", \"test_char\", \"get_test_choice_display\", \"test_fk\")\n        list_filter = (\n            app_admin_filters.SimpleBooleanTestInTestCharFilter,\n        )\n        fieldsets = (\n            (None, {\"fields\": (\n                (\"test_char\", \"test_choice\", \"test_fk\", \"test_m2m\"),\n            )}),\n        )\n\n\nThis is the result:\n\n.. image:: docs/readme_images/admin_boolean_filters.png\n    :alt: Admin boolean filter Image.\n\nRunning Tests\n-------------\n\nDoes the code actually work?\n\n::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install tox\n    (myenv) $ tox\n\n\nDevelopment commands\n---------------------\n\n::\n\n    pip install -r requirements_dev.txt\n    invoke -l\n\n\nCredits\n-------\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n\n0.1.0 (2021-11-10)\n__________________\n\n* First release on PyPI.\n\n0.1.1 (2021-11-10)\n__________________\n\n* Fixed HISTORY.rst problems with long_description_content_type\n\n\n0.1.3 (2021-11-10)\n__________________\n\n* Fixed HISTORY.rst problems changing + to _ for versions.\n\n\n0.1.4 (2021-12-6)\n__________________\n\n* Fixed bug on ConfigurableWidgetsAdminMixin.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/frankhood/django-admin-toolkit",
    "keywords": "django-admin-toolkit",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-admin-toolkit",
    "package_url": "https://pypi.org/project/django-admin-toolkit/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-admin-toolkit/",
    "project_urls": {
      "Homepage": "https://github.com/frankhood/django-admin-toolkit"
    },
    "release_url": "https://pypi.org/project/django-admin-toolkit/0.1.6/",
    "requires_dist": [
      "Django (<4)",
      "Pillow"
    ],
    "requires_python": "",
    "summary": "Multiple admin mixin for yours Django Admins",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15102842,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27744ca2a9c0fa30f1749822cfe0f783f1bccad169c75c0afd52b61f8cefca82",
          "md5": "a5d0d4ff91b943b45cadb0a317be4701",
          "sha256": "4f7565230d58cc83266c546cbb835b99c55400503f3421f7edd4b062f41ed3b5"
        },
        "downloads": -1,
        "filename": "django_admin_toolkit-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5d0d4ff91b943b45cadb0a317be4701",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 28993,
        "upload_time": "2021-11-10T19:02:49",
        "upload_time_iso_8601": "2021-11-10T19:02:49.127852Z",
        "url": "https://files.pythonhosted.org/packages/27/74/4ca2a9c0fa30f1749822cfe0f783f1bccad169c75c0afd52b61f8cefca82/django_admin_toolkit-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35c2d2f22b1260b5b61c79e76dabcea50c3e77d4037ec45f65cadd21157270ed",
          "md5": "a2c1c115abcd3eb34b9d86f10e5182ce",
          "sha256": "55e90452dfb58366e49832ce0e24f9daaba08ad27f7bfa838cbadaef66c608b0"
        },
        "downloads": -1,
        "filename": "django-admin-toolkit-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a2c1c115abcd3eb34b9d86f10e5182ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35740,
        "upload_time": "2021-11-10T19:02:50",
        "upload_time_iso_8601": "2021-11-10T19:02:50.688760Z",
        "url": "https://files.pythonhosted.org/packages/35/c2/d2f22b1260b5b61c79e76dabcea50c3e77d4037ec45f65cadd21157270ed/django-admin-toolkit-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98282739180dc5a9587ecfbf4e17b26a534af27b1fd9d5b3b73fc2c0257d3714",
          "md5": "996943bdb9db927a81aa0e03155012d8",
          "sha256": "a9acacf53f6e2e965ab9dabdecc0243bb476528f87c5ef07be9c6d74853b8409"
        },
        "downloads": -1,
        "filename": "django_admin_toolkit-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "996943bdb9db927a81aa0e03155012d8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 28993,
        "upload_time": "2021-11-10T19:06:18",
        "upload_time_iso_8601": "2021-11-10T19:06:18.745361Z",
        "url": "https://files.pythonhosted.org/packages/98/28/2739180dc5a9587ecfbf4e17b26a534af27b1fd9d5b3b73fc2c0257d3714/django_admin_toolkit-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a352287d4d48c024248d7193f79663fa9b4539c231fdcd845b922cb35cd1f80",
          "md5": "3d8cfb4161e89c969fddbef298fb1c5a",
          "sha256": "f6937c94c8b25e2314f254e59a6eb282dc2e4eaa2d423fa465dbeb10ffd6cb33"
        },
        "downloads": -1,
        "filename": "django-admin-toolkit-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3d8cfb4161e89c969fddbef298fb1c5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35739,
        "upload_time": "2021-11-10T19:06:20",
        "upload_time_iso_8601": "2021-11-10T19:06:20.150721Z",
        "url": "https://files.pythonhosted.org/packages/4a/35/2287d4d48c024248d7193f79663fa9b4539c231fdcd845b922cb35cd1f80/django-admin-toolkit-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3b353b09401cf69fda26088c71e5ebf583cfaf239ce420bbaa5501b213d97db",
          "md5": "5c869474ce081619eddb79ce9515d4c7",
          "sha256": "cab4b69edaa7cc9332118e084d08eb67b757e9baf002e349483b42b3e9062b2e"
        },
        "downloads": -1,
        "filename": "django_admin_toolkit-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c869474ce081619eddb79ce9515d4c7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 29139,
        "upload_time": "2022-09-14T16:06:19",
        "upload_time_iso_8601": "2022-09-14T16:06:19.165476Z",
        "url": "https://files.pythonhosted.org/packages/f3/b3/53b09401cf69fda26088c71e5ebf583cfaf239ce420bbaa5501b213d97db/django_admin_toolkit-0.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ef5281efeda36d1959e3534b55849c63e80ad49708d191a9ed5b65533281bef",
          "md5": "c72beb943edb7617569da3ee82db6e17",
          "sha256": "d73374f13276bbc9ff2d8463c9fbd2343168871585a9660b5bf7588a8605c09f"
        },
        "downloads": -1,
        "filename": "django-admin-toolkit-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c72beb943edb7617569da3ee82db6e17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35928,
        "upload_time": "2022-09-14T16:06:22",
        "upload_time_iso_8601": "2022-09-14T16:06:22.065559Z",
        "url": "https://files.pythonhosted.org/packages/9e/f5/281efeda36d1959e3534b55849c63e80ad49708d191a9ed5b65533281bef/django-admin-toolkit-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6d1323aa4477c2a96a7c2319d879dacd9f91a45cd830e3e849adc7f3dfd5087",
          "md5": "68559c1adad7cef77ac490a0205e5d61",
          "sha256": "b980413448784f89f74db8a22f7d88068d9f4c828a4c49364250f88b025bf11c"
        },
        "downloads": -1,
        "filename": "django_admin_toolkit-0.1.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68559c1adad7cef77ac490a0205e5d61",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 29249,
        "upload_time": "2022-09-15T09:35:06",
        "upload_time_iso_8601": "2022-09-15T09:35:06.062458Z",
        "url": "https://files.pythonhosted.org/packages/d6/d1/323aa4477c2a96a7c2319d879dacd9f91a45cd830e3e849adc7f3dfd5087/django_admin_toolkit-0.1.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f394e72cff935e0562adb7fe6fae9f2d1c6e587c2a48dc98b113f685a0e3bb3",
          "md5": "d3f68ac678440da002d41fede311041c",
          "sha256": "7b4367e7185263c7a2cbf8badcc83f709e82aca5fdfe4b81b2de3e378a3197e6"
        },
        "downloads": -1,
        "filename": "django-admin-toolkit-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d3f68ac678440da002d41fede311041c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36050,
        "upload_time": "2022-09-15T09:35:08",
        "upload_time_iso_8601": "2022-09-15T09:35:08.124180Z",
        "url": "https://files.pythonhosted.org/packages/3f/39/4e72cff935e0562adb7fe6fae9f2d1c6e587c2a48dc98b113f685a0e3bb3/django-admin-toolkit-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6d1323aa4477c2a96a7c2319d879dacd9f91a45cd830e3e849adc7f3dfd5087",
        "md5": "68559c1adad7cef77ac490a0205e5d61",
        "sha256": "b980413448784f89f74db8a22f7d88068d9f4c828a4c49364250f88b025bf11c"
      },
      "downloads": -1,
      "filename": "django_admin_toolkit-0.1.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68559c1adad7cef77ac490a0205e5d61",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 29249,
      "upload_time": "2022-09-15T09:35:06",
      "upload_time_iso_8601": "2022-09-15T09:35:06.062458Z",
      "url": "https://files.pythonhosted.org/packages/d6/d1/323aa4477c2a96a7c2319d879dacd9f91a45cd830e3e849adc7f3dfd5087/django_admin_toolkit-0.1.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f394e72cff935e0562adb7fe6fae9f2d1c6e587c2a48dc98b113f685a0e3bb3",
        "md5": "d3f68ac678440da002d41fede311041c",
        "sha256": "7b4367e7185263c7a2cbf8badcc83f709e82aca5fdfe4b81b2de3e378a3197e6"
      },
      "downloads": -1,
      "filename": "django-admin-toolkit-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "d3f68ac678440da002d41fede311041c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36050,
      "upload_time": "2022-09-15T09:35:08",
      "upload_time_iso_8601": "2022-09-15T09:35:08.124180Z",
      "url": "https://files.pythonhosted.org/packages/3f/39/4e72cff935e0562adb7fe6fae9f2d1c6e587c2a48dc98b113f685a0e3bb3/django-admin-toolkit-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}