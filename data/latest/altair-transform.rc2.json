{
  "info": {
    "author": "Jake VanderPlas",
    "author_email": "jakevdp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# altair-transform\n\nPython evaluation of Altair/Vega-Lite transforms.\n\n[![build status](http://img.shields.io/travis/altair-viz/altair-transform/master.svg)](https://travis-ci.org/altair-viz/altair-transform)\n[![code style black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n``altair-transform`` requires Python 3.6 or later. Install with:\n\n    $ pip install altair_transform\n\nAltair-transform evaluates [Altair](http://altair-viz.github.io) and [Vega-Lite](http://vega.github.io/vega-lite)\ntransforms directly in Python. This can be useful in a number of contexts, illustrated in the examples below.\n\n## Example: Extracting Data\n\nThe Vega-Lite specification includes the ability to apply a\nwide range of transformations to input data within the chart\nspecification. As an example, here is a sliding window average\nof a Gaussian random walk, implemented in Altair:\n\n```python\nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\nrand = np.random.RandomState(12345)\n\ndf = pd.DataFrame({\n    'x': np.arange(200),\n    'y': rand.randn(200).cumsum()\n})\n\npoints = alt.Chart(df).mark_point().encode(\n    x='x:Q',\n    y='y:Q'\n)\n\nline = alt.Chart(df).transform_window(\n    ymean='mean(y)',\n    sort=[alt.SortField('x')],\n    frame=[5, 5]\n).mark_line(color='red').encode(\n    x='x:Q',\n    y='ymean:Q'\n)\n\npoints + line\n```\n![Altair Visualization](https://raw.githubusercontent.com/altair-viz/altair-transform/master/images/random_walk.png)\n\nBecause the transform is encoded within the renderer, however, the\ncomputed values are not directly accessible from the Python layer.\n\nThis is where ``altair_transform`` comes in. It includes a (nearly)\ncomplete Python implementation of Vega-Lite's transform layer, so\nthat you can easily extract a pandas dataframe with the computed\nvalues shown in the chart:\n\n```python\nfrom altair_transform import extract_data\ndata = extract_data(line)\ndata.head()\n```\n<table border=\"0\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n      <th>ymean</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>-0.204708</td>\n      <td>0.457749</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.274236</td>\n      <td>0.771093</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>-0.245203</td>\n      <td>1.041320</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>-0.800933</td>\n      <td>1.336943</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1.164847</td>\n      <td>1.698085</td>\n    </tr>\n  </tbody>\n</table>\n\nFrom here, you can work with the transformed data directly\nin Python.\n\n## Example: Pre-Aggregating Large Datasets\n\nAltair creates chart specifications containing the full dataset.\nThe advantage of this is that the data used to make the chart is entirely transparent; the disadvantage is that it causes issues as datasets grow large.\nTo prevent users from inadvertently crashing their browsers by trying to send too much data to the frontend, Altair limits the data size by default.\nFor example, a histogram of 20000 points:\n\n```python\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(12345)\n\ndf = pd.DataFrame({\n    'x': np.random.randn(20000)\n})\nchart = alt.Chart(df).mark_bar().encode(\n    alt.X('x', bin=True),\n    y='count()'\n)\nchart\n```\n```pyerr\nMaxRowsError: The number of rows in your dataset is greater than the maximum allowed (5000). For information on how to plot larger datasets in Altair, see the documentation\n```\nThere are several possible ways around this, as mentioned in Altair's [FAQ](https://altair-viz.github.io/user_guide/faq.html#maxrowserror-how-can-i-plot-large-datasets).\nAltiar-transform provides another option via the ``transform_chart()`` function, which will pre-transform the data according to the chart specification, so that the final chart specification holds the aggregated data rather than the full dataset:\n```python\nfrom altair_transform import transform_chart\nnew_chart = transform_chart(chart)\nnew_chart\n```\n![Altair Visualization](https://raw.githubusercontent.com/altair-viz/altair-transform/master/images/histogram.png)\n\nExamining the new chart specification, we can see that it contains the pre-aggregated dataset:\n```python\nnew_chart.data\n```\n<table border=\"0\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x_binned</th>\n      <th>x_binned2</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-4.0</td>\n      <td>-3.0</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-3.0</td>\n      <td>-2.0</td>\n      <td>444</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-2.0</td>\n      <td>-1.0</td>\n      <td>2703</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.0</td>\n      <td>0.0</td>\n      <td>6815</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>6858</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2706</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>423</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>22</td>\n    </tr>\n  </tbody>\n</table>\n\n## Limitations\n\n``altair_transform`` currently works only for non-compound charts; that is, it cannot transform or extract data from layered, faceted, repeated, or concatenated charts.\n\nThere are also a number of less-used transform options that are not yet fully supported. These should explicitly raise a ``NotImplementedError`` if you attempt to use them.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "http://github.com/altair-viz/altair-transform/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/altair-viz/altair-transform/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "altair-transform",
    "package_url": "https://pypi.org/project/altair-transform/",
    "platform": "",
    "project_url": "https://pypi.org/project/altair-transform/",
    "project_urls": {
      "Download": "http://github.com/altair-viz/altair-transform/",
      "Homepage": "http://github.com/altair-viz/altair-transform/"
    },
    "release_url": "https://pypi.org/project/altair-transform/0.2.0/",
    "requires_dist": [
      "ply",
      "altair (>=3.0)",
      "numpy",
      "pandas",
      "dataclasses ; python_version < \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "A python engine for evaluating Altair transforms.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6239611,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d576d45712f332c0cc0a1853195972fd92a82d37369986bdda9992b0a0e9c5a8",
          "md5": "b90571579f10d6dc8a153c9ff83d3cb9",
          "sha256": "0f861a864aceaf8347e197bddedb7343e5300064305e28ed8f5cc4ef57755a51"
        },
        "downloads": -1,
        "filename": "altair_transform-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b90571579f10d6dc8a153c9ff83d3cb9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 34392,
        "upload_time": "2019-07-19T03:24:58",
        "upload_time_iso_8601": "2019-07-19T03:24:58.164071Z",
        "url": "https://files.pythonhosted.org/packages/d5/76/d45712f332c0cc0a1853195972fd92a82d37369986bdda9992b0a0e9c5a8/altair_transform-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1537d8135fc0600c3c7e9768d22eda145ced7f9fbea8f34fb157f9a0555e4f5f",
          "md5": "f263ae04969647ef4937f80cab10dd33",
          "sha256": "6d910832091aee289e8582c168e37794f62076bcea6d9333aa4a919cad0c8c37"
        },
        "downloads": -1,
        "filename": "altair_transform-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f263ae04969647ef4937f80cab10dd33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27551,
        "upload_time": "2019-07-19T03:25:00",
        "upload_time_iso_8601": "2019-07-19T03:25:00.725015Z",
        "url": "https://files.pythonhosted.org/packages/15/37/d8135fc0600c3c7e9768d22eda145ced7f9fbea8f34fb157f9a0555e4f5f/altair_transform-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11909a08fee17264b0ff2a4a563b0412adecf46086c350bc2fe6df60e64ed422",
          "md5": "40b6e748d434bfc2b0ebe0a8f45a6e0a",
          "sha256": "5c69161dd423b0f6a456abe765dbfb2ab7d5e9cef3a77b91e185179c6da328b2"
        },
        "downloads": -1,
        "filename": "altair_transform-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40b6e748d434bfc2b0ebe0a8f45a6e0a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 51474,
        "upload_time": "2019-12-04T04:28:29",
        "upload_time_iso_8601": "2019-12-04T04:28:29.890425Z",
        "url": "https://files.pythonhosted.org/packages/11/90/9a08fee17264b0ff2a4a563b0412adecf46086c350bc2fe6df60e64ed422/altair_transform-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d015f84008e6cd08d0f99976091cd82e1b39796f5abdbcfc2d6890261fdb1c87",
          "md5": "7f7e4e531d4fe72b3b024b7253a16e34",
          "sha256": "b348c94a3a71254baac626635f38300121dc61a98eb46b25568a6aecc4202d66"
        },
        "downloads": -1,
        "filename": "altair_transform-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f7e4e531d4fe72b3b024b7253a16e34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 42320,
        "upload_time": "2019-12-04T04:28:31",
        "upload_time_iso_8601": "2019-12-04T04:28:31.876372Z",
        "url": "https://files.pythonhosted.org/packages/d0/15/f84008e6cd08d0f99976091cd82e1b39796f5abdbcfc2d6890261fdb1c87/altair_transform-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11909a08fee17264b0ff2a4a563b0412adecf46086c350bc2fe6df60e64ed422",
        "md5": "40b6e748d434bfc2b0ebe0a8f45a6e0a",
        "sha256": "5c69161dd423b0f6a456abe765dbfb2ab7d5e9cef3a77b91e185179c6da328b2"
      },
      "downloads": -1,
      "filename": "altair_transform-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "40b6e748d434bfc2b0ebe0a8f45a6e0a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 51474,
      "upload_time": "2019-12-04T04:28:29",
      "upload_time_iso_8601": "2019-12-04T04:28:29.890425Z",
      "url": "https://files.pythonhosted.org/packages/11/90/9a08fee17264b0ff2a4a563b0412adecf46086c350bc2fe6df60e64ed422/altair_transform-0.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d015f84008e6cd08d0f99976091cd82e1b39796f5abdbcfc2d6890261fdb1c87",
        "md5": "7f7e4e531d4fe72b3b024b7253a16e34",
        "sha256": "b348c94a3a71254baac626635f38300121dc61a98eb46b25568a6aecc4202d66"
      },
      "downloads": -1,
      "filename": "altair_transform-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7f7e4e531d4fe72b3b024b7253a16e34",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 42320,
      "upload_time": "2019-12-04T04:28:31",
      "upload_time_iso_8601": "2019-12-04T04:28:31.876372Z",
      "url": "https://files.pythonhosted.org/packages/d0/15/f84008e6cd08d0f99976091cd82e1b39796f5abdbcfc2d6890261fdb1c87/altair_transform-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}