{
  "info": {
    "author": "lidatong",
    "author_email": "charles.dt.li@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Dataclasses JSON\n\n![](https://github.com/lidatong/dataclasses-json/workflows/dataclasses-json/badge.svg)\n\nThis library provides a simple API for encoding and decoding [dataclasses](https://docs.python.org/3/library/dataclasses.html) to and from JSON.\n\nIt's very easy to get started.\n\n[README / Documentation website](https://lidatong.github.io/dataclasses-json). Features a navigation bar and search functionality, and should mirror this README exactly -- take a look!\n\n## Quickstart\n\n`pip install dataclasses-json`\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n\n\nperson = Person(name='lidatong')\nperson.to_json()  # '{\"name\": \"lidatong\"}' <- this is a string\nperson.to_dict()  # {'name': 'lidatong'} <- this is a dict\nPerson.from_json('{\"name\": \"lidatong\"}')  # Person(1)\nPerson.from_dict({'name': 'lidatong'})  # Person(1)\n\n# You can also apply _schema validation_ using an alternative API\n# This can be useful for \"typed\" Python code\n\nPerson.from_json('{\"name\": 42}')  # This is ok. 42 is not a `str`, but\n                                  # dataclass creation does not validate types\nPerson.schema().loads('{\"name\": 42}')  # Error! Raises `ValidationError`\n```\n\n**What if you want to work with camelCase JSON?**\n\n```python\n# same imports as above, with the additional `LetterCase` import\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json, LetterCase\n\n@dataclass_json(letter_case=LetterCase.CAMEL)  # now all fields are encoded/decoded from camelCase\n@dataclass\nclass ConfiguredSimpleExample:\n    int_field: int\n\nConfiguredSimpleExample(1).to_json()  # {\"intField\": 1}\nConfiguredSimpleExample.from_json('{\"intField\": 1}')  # ConfiguredSimpleExample(1)\n```\n\n## Supported types\n\nIt's recursive (see caveats below), so you can easily work with nested dataclasses.\nIn addition to the supported types in the \n[py to JSON table](https://docs.python.org/3/library/json.html#py-to-json-table), this library supports the following:\n\n- any arbitrary [Collection](https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection) type is supported.\n[Mapping](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping) types are encoded as JSON objects and `str` types as JSON strings. \nAny other Collection types are encoded into JSON arrays, but decoded into the original collection types.\n\n- [datetime](https://docs.python.org/3/library/datetime.html#available-types) \nobjects. `datetime` objects are encoded to `float` (JSON number) using \n[timestamp](https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp).\nAs specified in the `datetime` docs, if your `datetime` object is naive, it will \nassume your system local timezone when calling `.timestamp()`. JSON numbers \ncorresponding to a `datetime` field in your dataclass are decoded \ninto a datetime-aware object, with `tzinfo` set to your system local timezone.\nThus, if you encode a datetime-naive object, you will decode into a \ndatetime-aware object. This is important, because encoding and decoding won't \nstrictly be inverses. See [this section](#Overriding) if you want to override this default\nbehavior (for example, if you want to use ISO).\n\n- [UUID](https://docs.python.org/3/library/uuid.html#uuid.UUID) objects. They \nare encoded as `str` (JSON string).\n\n- [Decimal](https://docs.python.org/3/library/decimal.html) objects. They are\nalso encoded as `str`.\n\n**The [latest release](https://github.com/lidatong/dataclasses-json/releases/latest) is compatible with both Python 3.7 and Python 3.6 (with the dataclasses backport).**\n\n## Usage\n\n#### Approach 1: Class decorator\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n\nlidatong = Person('lidatong')\n\n# Encoding to JSON\nlidatong.to_json()  # '{\"name\": \"lidatong\"}'\n\n# Decoding from JSON\nPerson.from_json('{\"name\": \"lidatong\"}')  # Person(name='lidatong')\n```\n\nNote that the `@dataclass_json` decorator must be stacked above the `@dataclass`\ndecorator (order matters!)\n\n#### Approach 2: Inherit from a mixin\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import DataClassJsonMixin\n\n@dataclass\nclass Person(DataClassJsonMixin):\n    name: str\n\nlidatong = Person('lidatong')\n\n# A different example from Approach 1 above, but usage is the exact same\nassert Person.from_json(lidatong.to_json()) == lidatong\n```\n\nPick whichever approach suits your taste. Note that there is better support for\n the mixin approach when using _static analysis_ tools (e.g. linting, typing),\n but the differences in implementation will be invisible in _runtime_ usage.\n\n## How do I...\n\n\n\n### Use my dataclass with JSON arrays or objects?\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n```\n\n**Encode into a JSON array containing instances of my Data Class**\n\n```python\npeople_json = [Person('lidatong')]\nPerson.schema().dumps(people_json, many=True)  # '[{\"name\": \"lidatong\"}]'\n```\n\n**Decode a JSON array containing instances of my Data Class**\n\n```python\npeople_json = '[{\"name\": \"lidatong\"}]'\nPerson.schema().loads(people_json, many=True)  # [Person(name='lidatong')]\n```\n\n**Encode as part of a larger JSON object containing my Data Class (e.g. an HTTP \nrequest/response)**\n\n```python\nimport json\n\nresponse_dict = {\n    'response': {\n        'person': Person('lidatong').to_dict()\n    }\n}\n\nresponse_json = json.dumps(response_dict)\n```\n\nIn this case, we do two steps. First, we encode the dataclass into a \n**python dictionary** rather than a JSON string, using `.to_dict`. \n\nSecond, we leverage the built-in `json.dumps` to serialize our `dataclass` into \na JSON string.\n\n**Decode as part of a larger JSON object containing my Data Class (e.g. an HTTP \nresponse)**\n\n```python\nimport json\n\nresponse_dict = json.loads('{\"response\": {\"person\": {\"name\": \"lidatong\"}}}')\n\nperson_dict = response_dict['response']\n\nperson = Person.from_dict(person_dict)\n```\n\nIn a similar vein to encoding above, we leverage the built-in `json` module.\n\nFirst, call `json.loads` to read the entire JSON object into a \ndictionary. We then access the key of the value containing the encoded dict of \nour `Person` that we want to decode (`response_dict['response']`).\n\nSecond, we load in the dictionary using `Person.from_dict`.\n\n\n### Encode or decode into Python lists/dictionaries rather than JSON?\n\nThis can be by calling `.schema()` and then using the corresponding \nencoder/decoder methods, ie. `.load(...)`/`.dump(...)`.\n\n**Encode into a single Python dictionary**\n\n```python\nperson = Person('lidatong')\nperson.to_dict()  # {'name': 'lidatong'}\n```\n\n**Encode into a list of Python dictionaries**\n\n```python\npeople = [Person('lidatong')]\nPerson.schema().dump(people, many=True)  # [{'name': 'lidatong'}]\n```\n\n**Decode a dictionary into a single dataclass instance**\n\n```python\nperson_dict = {'name': 'lidatong'}\nPerson.from_dict(person_dict)  # Person(name='lidatong')\n```\n\n**Decode a list of dictionaries into a list of dataclass instances**\n\n```python\npeople_dicts = [{\"name\": \"lidatong\"}]\nPerson.schema().load(people_dicts, many=True)  # [Person(name='lidatong')]\n```\n\n### Encode or decode from camelCase (or kebab-case)?\n\nJSON letter case by convention is camelCase, in Python members are by convention snake_case.\n\nYou can configure it to encode/decode from other casing schemes at both the class level and the field level.\n\n```python\nfrom dataclasses import dataclass, field\n\nfrom dataclasses_json import LetterCase, config, dataclass_json\n\n\n# changing casing at the class level\n@dataclass_json(letter_case=LetterCase.CAMEL)\n@dataclass\nclass Person:\n    given_name: str\n    family_name: str\n    \nPerson('Alice', 'Liddell').to_json()  # '{\"givenName\": \"Alice\"}'\nPerson.from_json('{\"givenName\": \"Alice\", \"familyName\": \"Liddell\"}')  # Person('Alice', 'Liddell')\n\n# at the field level\n@dataclass_json\n@dataclass\nclass Person:\n    given_name: str = field(metadata=config(letter_case=LetterCase.CAMEL))\n    family_name: str\n    \nPerson('Alice', 'Liddell').to_json()  # '{\"givenName\": \"Alice\"}'\n# notice how the `family_name` field is still snake_case, because it wasn't configured above\nPerson.from_json('{\"givenName\": \"Alice\", \"family_name\": \"Liddell\"}')  # Person('Alice', 'Liddell')\n```\n\n**This library assumes your field follows the Python convention of snake_case naming.**\nIf your field is not `snake_case` to begin with and you attempt to parameterize `LetterCase`, \nthe behavior of encoding/decoding is undefined (most likely it will result in subtle bugs).\n\n### Encode or decode using a different name\n\n```python\nfrom dataclasses import dataclass, field\n\nfrom dataclasses_json import config, dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    given_name: str = field(metadata=config(field_name=\"overriddenGivenName\"))\n\nPerson(given_name=\"Alice\")  # Person('Alice')\nPerson.from_json('{\"overriddenGivenName\": \"Alice\"}')  # Person('Alice')\nPerson('Alice').to_json()  # {\"overriddenGivenName\": \"Alice\"}\n```\n\n### Handle missing or optional field values when decoding?\n\nBy default, any fields in your dataclass that use `default` or \n`default_factory` will have the values filled with the provided default, if the\ncorresponding field is missing from the JSON you're decoding.\n\n**Decode JSON with missing field**\n\n```python\n@dataclass_json\n@dataclass\nclass Student:\n    id: int\n    name: str = 'student'\n\nStudent.from_json('{\"id\": 1}')  # Student(id=1, name='student')\n```\n\nNotice `from_json` filled the field `name` with the specified default 'student'\nwhen it was missing from the JSON.\n\nSometimes you have fields that are typed as `Optional`, but you don't \nnecessarily want to assign a default. In that case, you can use the \n`infer_missing` kwarg to make `from_json` infer the missing field value as `None`.\n\n**Decode optional field without default**\n\n```python\n@dataclass_json\n@dataclass\nclass Tutor:\n    id: int\n    student: Optional[Student] = None\n\nTutor.from_json('{\"id\": 1}')  # Tutor(id=1, student=None)\n```\n\nPersonally I recommend you leverage dataclass defaults rather than using \n`infer_missing`, but if for some reason you need to decouple the behavior of \nJSON decoding from the field's default value, this will allow you to do so.\n\n\n### Handle unknown / extraneous fields in JSON?\n\nBy default, it is up to the implementation what happens when a `json_dataclass` receives input parameters that are not defined.\n(the `from_dict` method ignores them, when loading using `schema()` a ValidationError is raised.)\nThere are three ways to customize this behavior.\n\nAssume you want to instantiate a dataclass with the following dictionary:\n```python\ndump_dict = {\"endpoint\": \"some_api_endpoint\", \"data\": {\"foo\": 1, \"bar\": \"2\"}, \"undefined_field_name\": [1, 2, 3]}\n```\n\n1. You can enforce to always raise an error by setting the `undefined` keyword to `Undefined.RAISE`\n (`'RAISE'` as a case-insensitive string works as well). Of course it works normally if you don't pass any undefined parameters.\n    \n```python\nfrom dataclasses_json import Undefined\n\n@dataclass_json(undefined=Undefined.RAISE)\n@dataclass()\nclass ExactAPIDump:\n    endpoint: str\n    data: Dict[str, Any]\n\ndump = ExactAPIDump.from_dict(dump_dict)  # raises UndefinedParameterError\n```\n\n2. You can simply ignore any undefined parameters by setting the `undefined` keyword to `Undefined.EXCLUDE`\n (`'EXCLUDE'` as a case-insensitive string works as well). Note that you will not be able to retrieve them using `to_dict`:\n    \n```python\nfrom dataclasses_json import Undefined\n\n@dataclass_json(undefined=Undefined.EXCLUDE)\n@dataclass()\nclass DontCareAPIDump:\n    endpoint: str\n    data: Dict[str, Any]\n\ndump = DontCareAPIDump.from_dict(dump_dict)  # DontCareAPIDump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'})\ndump.to_dict()  # {\"endpoint\": \"some_api_endpoint\", \"data\": {\"foo\": 1, \"bar\": \"2\"}}\n```\n\n3. You can save them in a catch-all field and do whatever needs to be done later. Simply set the `undefined`\nkeyword to `Undefined.INCLUDE` (`'INCLUDE'` as a case-insensitive string works as well) and define a field\nof type `CatchAll` where all unknown values will end up.\n This simply represents a dictionary that can hold anything. \n If there are no undefined parameters, this will be an empty dictionary.\n    \n```python\nfrom dataclasses_json import Undefined, CatchAll\n\n@dataclass_json(undefined=Undefined.INCLUDE)\n@dataclass()\nclass UnknownAPIDump:\n    endpoint: str\n    data: Dict[str, Any]\n    unknown_things: CatchAll\n\ndump = UnknownAPIDump.from_dict(dump_dict)  # UnknownAPIDump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'}, unknown_things={'undefined_field_name': [1, 2, 3]})\ndump.to_dict()  # {'endpoint': 'some_api_endpoint', 'data': {'foo': 1, 'bar': '2'}, 'undefined_field_name': [1, 2, 3]}\n```\n\nNotes:\n- When using `Undefined.INCLUDE`, an `UndefinedParameterError` will be raised if you don't specify\nexactly one field of type `CatchAll`.\n- Note that `LetterCase` does not affect values written into the `CatchAll` field, they will be as they are given.\n- When specifying a default (or a default factory) for the the `CatchAll`-field, e.g. `unknown_things: CatchAll = None`, the default value will be used instead of an empty dict if there are no undefined parameters.\n- Calling __init__ with non-keyword arguments resolves the arguments to the defined fields and writes everything else into the catch-all field.\n\n4. All 3 options work as well using `schema().loads` and `schema().dumps`, as long as you don't overwrite it by specifying `schema(unknown=<a marshmallow value>)`.\nmarshmallow uses the same 3 keywords ['include', 'exclude', 'raise'](https://marshmallow.readthedocs.io/en/stable/quickstart.html#handling-unknown-fields).\n\n5. All 3 operations work as well using `__init__`, e.g. `UnknownAPIDump(**dump_dict)` will **not** raise a `TypeError`, but write all unknown values to the field tagged as `CatchAll`.\n   Classes tagged with `EXCLUDE` will also simply ignore unknown parameters. Note that classes tagged as `RAISE` still raise a `TypeError`, and **not** a `UndefinedParameterError` if supplied with unknown keywords.\n\n\n### Override the default encode / decode / marshmallow field of a specific field?\n\nSee [Overriding](#Overriding)\n\n### Handle recursive dataclasses?\nObject hierarchies where fields are of the type that they are declared within require a small\ntype hinting trick to declare the forward reference.\n```python\nfrom typing import Optional\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Tree():\n    value: str\n    left: Optional['Tree']\n    right: Optional['Tree']\n```\n\nAvoid using\n```python\nfrom __future__ import annotations\n```\nas it will cause problems with the way dataclasses_json accesses the type annotations.\n\n\n## Marshmallow interop\n\nUsing the `dataclass_json` decorator or mixing in `DataClassJsonMixin` will\nprovide you with an additional method `.schema()`.\n\n`.schema()` generates a schema exactly equivalent to manually creating a\nmarshmallow schema for your dataclass. You can reference the [marshmallow API docs](https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema)\nto learn other ways you can use the schema returned by `.schema()`.\n\nYou can pass in the exact same arguments to `.schema()` that you would when\nconstructing a `PersonSchema` instance, e.g. `.schema(many=True)`, and they will\nget passed through to the marshmallow schema.\n\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n\n# You don't need to do this - it's generated for you by `.schema()`!\nfrom marshmallow import Schema, fields\n\nclass PersonSchema(Schema):\n    name = fields.Str()\n```\n\nBriefly, on what's going on under the hood in the above examples: calling \n`.schema()` will have this library generate a\n[marshmallow schema]('https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema)\nfor you. It also fills in the corresponding object hook, so that marshmallow\nwill create an instance of your Data Class on `load` (e.g.\n`Person.schema().load` returns a `Person`) rather than a `dict`, which it does\nby default in marshmallow.\n\n**Performance note**\n\n`.schema()` is not cached (it generates the schema on every call), so if you\nhave a nested Data Class you may want to save the result to a variable to \navoid re-generation of the schema on every usage.\n\n```python\nperson_schema = Person.schema()\nperson_schema.dump(people, many=True)\n\n# later in the code...\n\nperson_schema.dump(person)\n```\n\n## Overriding / Extending\n\n#### Overriding\n\nFor example, you might want to encode/decode `datetime` objects using ISO format\nrather than the default `timestamp`.\n\n```python\nfrom dataclasses import dataclass, field\nfrom dataclasses_json import dataclass_json, config\nfrom datetime import datetime\nfrom marshmallow import fields\n\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: datetime = field(\n        metadata=config(\n            encoder=datetime.isoformat,\n            decoder=datetime.fromisoformat,\n            mm_field=fields.DateTime(format='iso')\n        )\n    )\n```\n\n#### Extending\n\nSimilarly, you might want to extend `dataclasses_json` to encode `date` objects.\n\n```python\nfrom dataclasses import dataclass, field\nfrom dataclasses_json import dataclass_json, config\nfrom datetime import date\nfrom marshmallow import fields\n\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: date = field(\n        metadata=config(\n            encoder= date.isoformat,\n            decoder= date.fromisoformat,\n            mm_field= fields.DateTime(format='iso')\n        ))\n```\n\nAs you can see, you can **override** or **extend** the default codecs by providing a \"hook\" via a \ncallable:\n- `encoder`: a callable, which will be invoked to convert the field value when encoding to JSON\n- `decoder`: a callable, which will be invoked to convert the JSON value when decoding from JSON\n- `mm_field`: a marshmallow field, which will affect the behavior of any operations involving `.schema()`\n\nNote that these hooks will be invoked regardless if you're using \n`.to_json`/`dump`/`dumps`\nand `.from_json`/`load`/`loads`. So apply overrides / extensions judiciously, making sure to \ncarefully consider whether the interaction of the encode/decode/mm_field is consistent with what you expect!\n\n\n#### What if I have other dataclass field extensions that rely on `metadata`\n\nAll the `dataclasses_json.config` does is return a mapping, namespaced under the key `'dataclasses_json'`.\n\nSay there's another module, `other_dataclass_package` that uses metadata. Here's how you solve your problem:\n\n```python\nmetadata = {'other_dataclass_package': 'some metadata...'}  # pre-existing metadata for another dataclass package\ndataclass_json_config = config(\n            encoder=datetime.isoformat,\n            decoder=datetime.fromisoformat,\n            mm_field=fields.DateTime(format='iso')\n        )\nmetadata.update(dataclass_json_config)\n\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: datetime = field(metadata=metadata)\n```\n\nYou can also manually specify the dataclass_json configuration mapping.\n\n```python\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: date = field(\n        metadata={'dataclasses_json': {\n            'encoder': date.isoformat,\n            'decoder': date.fromisoformat,\n            'mm_field': fields.DateTime(format='iso')\n        }}\n    )\n```\n\n## A larger example\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\nfrom typing import List\n\n@dataclass_json\n@dataclass(frozen=True)\nclass Minion:\n    name: str\n\n\n@dataclass_json\n@dataclass(frozen=True)\nclass Boss:\n    minions: List[Minion]\n\nboss = Boss([Minion('evil minion'), Minion('very evil minion')])\nboss_json = \"\"\"\n{\n    \"minions\": [\n        {\n            \"name\": \"evil minion\"\n        },\n        {\n            \"name\": \"very evil minion\"\n        }\n    ]\n}\n\"\"\".strip()\n\nassert boss.to_json(indent=4) == boss_json\nassert Boss.from_json(boss_json) == boss\n```\n\n## Performance\n\nTake a look at [this issue](https://github.com/lidatong/dataclasses-json/issues/228)\n\n## Versioning\n\nNote this library is still pre-1.0.0 (SEMVER).\n\nThe current convention is:\n- **PATCH** version upgrades for bug fixes and minor feature additions.\n- **MINOR** version upgrades for big API features and breaking changes.\n\nOnce this library is 1.0.0, it will follow standard SEMVER conventions.\n\n\n## Roadmap\n\nCurrently the focus is on investigating and fixing bugs in this library, working\non performance, and finishing [this issue](https://github.com/lidatong/dataclasses-json/issues/31).\n\nThat said, if you think there's a feature missing / something new needed in the\nlibrary, please see the contributing section below.\n\n\n## Contributing\n\nFirst of all, thank you for being interested in contributing to this library.\nI really appreciate you taking the time to work on this project.\n\n- If you're just interested in getting into the code, a good place to start are \nissues tagged as bugs.\n- If introducing a new feature, especially one that modifies the public API, \nconsider submitting an issue for discussion before a PR. Please also take a look \nat existing issues / PRs to see what you're proposing has  already been covered \nbefore / exists.\n- I like to follow the commit conventions documented [here](https://www.conventionalcommits.org/en/v1.0.0/#summary)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lidatong/dataclasses-json",
    "keywords": "dataclasses json",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dataclasses-json-speakeasy",
    "package_url": "https://pypi.org/project/dataclasses-json-speakeasy/",
    "platform": null,
    "project_url": "https://pypi.org/project/dataclasses-json-speakeasy/",
    "project_urls": {
      "Homepage": "https://github.com/lidatong/dataclasses-json"
    },
    "release_url": "https://pypi.org/project/dataclasses-json-speakeasy/0.5.8/",
    "requires_dist": [
      "marshmallow (<4.0.0,>=3.3.0)",
      "marshmallow-enum (<2.0.0,>=1.5.1)",
      "typing-inspect (>=0.4.0)",
      "dataclasses ; python_version == \"3.6\"",
      "pytest (>=6.2.3) ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "mypy (>=0.710) ; extra == 'dev'",
      "hypothesis ; extra == 'dev'",
      "portray ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "simplejson ; extra == 'dev'",
      "types-dataclasses ; (python_version == \"3.6\") and extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Easily serialize dataclasses to and from JSON",
    "version": "0.5.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15710090,
  "releases": {
    "0.5.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fddb6baca6033e0078c0fc3c2e05b69ed6887058d9665b49cb15fbbf6e1ef29",
          "md5": "01b34fea844f504e5ab88a1c11ab3a37",
          "sha256": "9ab60b49a47baa0a61c59cfa624f20fc94bf731f15f3024917d9f5adf9ce37e5"
        },
        "downloads": -1,
        "filename": "dataclasses_json_speakeasy-0.5.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01b34fea844f504e5ab88a1c11ab3a37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26275,
        "upload_time": "2022-11-09T10:29:24",
        "upload_time_iso_8601": "2022-11-09T10:29:24.603030Z",
        "url": "https://files.pythonhosted.org/packages/8f/dd/b6baca6033e0078c0fc3c2e05b69ed6887058d9665b49cb15fbbf6e1ef29/dataclasses_json_speakeasy-0.5.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53236183ee773dd1725d8bd5b4f2eb341415557ce3ab49f584478ade6842320a",
          "md5": "ddb857029685534f6737cdaf206814ad",
          "sha256": "4403a89939b29a2f9cd1dba6357b6d3bbfa92dc40f526d2c4c8616022475e146"
        },
        "downloads": -1,
        "filename": "dataclasses-json-speakeasy-0.5.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ddb857029685534f6737cdaf206814ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29851,
        "upload_time": "2022-11-09T10:29:27",
        "upload_time_iso_8601": "2022-11-09T10:29:27.288259Z",
        "url": "https://files.pythonhosted.org/packages/53/23/6183ee773dd1725d8bd5b4f2eb341415557ce3ab49f584478ade6842320a/dataclasses-json-speakeasy-0.5.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fddb6baca6033e0078c0fc3c2e05b69ed6887058d9665b49cb15fbbf6e1ef29",
        "md5": "01b34fea844f504e5ab88a1c11ab3a37",
        "sha256": "9ab60b49a47baa0a61c59cfa624f20fc94bf731f15f3024917d9f5adf9ce37e5"
      },
      "downloads": -1,
      "filename": "dataclasses_json_speakeasy-0.5.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01b34fea844f504e5ab88a1c11ab3a37",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 26275,
      "upload_time": "2022-11-09T10:29:24",
      "upload_time_iso_8601": "2022-11-09T10:29:24.603030Z",
      "url": "https://files.pythonhosted.org/packages/8f/dd/b6baca6033e0078c0fc3c2e05b69ed6887058d9665b49cb15fbbf6e1ef29/dataclasses_json_speakeasy-0.5.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53236183ee773dd1725d8bd5b4f2eb341415557ce3ab49f584478ade6842320a",
        "md5": "ddb857029685534f6737cdaf206814ad",
        "sha256": "4403a89939b29a2f9cd1dba6357b6d3bbfa92dc40f526d2c4c8616022475e146"
      },
      "downloads": -1,
      "filename": "dataclasses-json-speakeasy-0.5.8.tar.gz",
      "has_sig": false,
      "md5_digest": "ddb857029685534f6737cdaf206814ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 29851,
      "upload_time": "2022-11-09T10:29:27",
      "upload_time_iso_8601": "2022-11-09T10:29:27.288259Z",
      "url": "https://files.pythonhosted.org/packages/53/23/6183ee773dd1725d8bd5b4f2eb341415557ce3ab49f584478ade6842320a/dataclasses-json-speakeasy-0.5.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}