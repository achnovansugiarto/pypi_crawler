{
  "info": {
    "author": "Guillaume Plique",
    "author_email": "guillaume.plique@sciencespo.fr",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Build Status](https://github.com/medialab/pelote/workflows/Tests/badge.svg)](https://github.com/medialab/pelote/actions)\n\n# Pelote\n\nPelote is a python library full of graph-related functions that can be used to complement [networkx](https://networkx.org/) for higher-level tasks.\n\nIt mainly helps with the following things:\n\n- Conversion of tabular data to graphs (bipartites, citation etc. in the spirit of [Table2Net](https://medialab.github.io/table2net/))\n- Conversion of graphs to tabular data\n- Monopartite projections of bipartite graphs\n- Miscellaneous graph helper functions (filtering out nodes, edges etc.)\n- Sparsification of graphs\n- Reading & writing of graph formats not found in `networkx` (such as [graphology](https://graphology.github.io/) JSON)\n\nAs such it is the perfect companion to [ipysigma](https://github.com/Yomguithereal/ipysigma), our Jupyter widget that can render interactive graphs directly within your notebooks.\n\n## Installation\n\nYou can install `pelote` with pip with the following command:\n\n```\npip install pelote\n```\n\nIf you want to be able to use the library with `pandas`, you will need to install it also:\n\n```\npip install pandas\n```\n\n## Usage\n\n* [Tabular data to graphs](#tabular-data-to-graphs)\n  * [table_to_bipartite_graph](#table_to_bipartite_graph)\n  * [tables_to_graph](#tables_to_graph)\n  * [edges_table_to_graph](#edges_table_to_graph)\n* [Graphs to tabular data](#graphs-to-tabular-data)\n  * [graph_to_nodes_dataframe](#graph_to_nodes_dataframe)\n  * [graph_to_edges_dataframe](#graph_to_edges_dataframe)\n  * [graph_to_dataframes](#graph_to_dataframes)\n* [Graph projection](#graph-projection)\n  * [monopartite_projection](#monopartite_projection)\n* [Graph sparsification](#graph-sparsification)\n  * [global_threshold_sparsification](#global_threshold_sparsification)\n  * [multiscale_backbone](#multiscale_backbone)\n* [Miscellaneous graph-related metrics](#miscellaneous-graph-related-metrics)\n  * [edge_disparity](#edge_disparity)\n  * [triangular_strength](#triangular_strength)\n* [Graph utilities](#graph-utilities)\n  * [union_of_maximum_spanning_trees](#union_of_maximum_spanning_trees)\n  * [largest_connected_component](#largest_connected_component)\n  * [crop_to_largest_connected_component](#crop_to_largest_connected_component)\n  * [largest_connected_component_subgraph](#largest_connected_component_subgraph)\n  * [remove_edges](#remove_edges)\n  * [filter_edges](#filter_edges)\n  * [remove_nodes](#remove_nodes)\n  * [filter_nodes](#filter_nodes)\n  * [remove_leaves](#remove_leaves)\n  * [filter_leaves](#filter_leaves)\n* [Learning](#learning)\n  * [floatsam_threshold_learner](#floatsam_threshold_learner)\n* [Reading & Writing](#reading-&-writing)\n  * [read_graphology_json](#read_graphology_json)\n  * [write_graphology_json](#write_graphology_json)\n\n---\n\n### Tabular data to graphs\n\n#### table_to_bipartite_graph\n\nFunction creating a bipartite graph from the given tabular data.\n\n*Arguments*\n\n* **table** *Iterable[Indexable] or pd.DataFrame* - input tabular data. It can\nbe a large variety of things as long as it is 1. iterable and 2.\nyields indexable values such as dicts or lists. This can for instance\nbe a list of dicts, a csv.DictReader stream etc. It also supports\npandas DataFrame if the library is installed.\n* **first_part_col** *Hashable* - the name of the column containing the\nvalue representing a node in the resulting graph's first part.\nIt could be the index if your rows are lists or a key if your rows\nare dicts instead.\n* **second_par_col** *Hashable* - the name of the column containing the\nvalue representing a node in the resulting graph's second part.\nIt could be the index if your rows are lists or a key if your rows\nare dicts instead.\n* **node_part_attr** *str, optional* `\"part\"` - name of the node attribute containing\nthe part it belongs to.\n* **edge_weight_attr** *str, optional* `\"weight\"` - name of the edge attribute containing\nits weight, i.e. the number of times it was found in the table.\n* **first_part_data** *Sequence or Callable or Mapping, optional* `None` - sequence (i.e. list, tuple etc.)\nof column from rows to keep as node attributes for the graph's first part.\nCan also be a mapping (i.e. dict) from row column to node attribute\nname to create.\nCan also be a function returning a dict of those attributes.\nNote that the first row containing a given node will take precedence over\nsubsequent ones regarding data to include.\n* **second_part_data** *Sequence or Callable or Mapping, optional* `None` - sequence (i.e. list, tuple etc.)\nof column from rows to keep as node attributes for the graph's second part.\nCan also be a mapping (i.e. dict) from row column to node attribute\nname to create.\nCan also be a function returning a dict of those attributes.\nNote that the first row containing a given node will take precedence over\nsubsequent ones regarding data to include.\n* **first_part_name** *Hashable, optional* `None` - can be given to rename the first part.\n* **second_part_name** *Hashable, optional* `None` - can be given to rename the second part.\nto display as graph's second part's name.\n* **disjoint_keys** *bool, optional* `False` - set this to True as an optimization\nmechanism if you know your part keys are disjoint, i.e. if no\nvalue for `first_part_col` can also be found in `second_part_col`.\nIf you enable this option wrongly, the result can be incorrect.\n\n*Returns*\n\n*nx.AnyGraph* - the bipartite graph.\n\n#### tables_to_graph\n\nFunction creating a graph from two tables: a table of nodes and a table of edges.\n\n```python\nfrom pelote import tables_to_graph\n\ntable_nodes = [\n    {\"name\": \"alice\", \"age\": 50},\n    {\"name\": \"bob\", \"age\": 12}\n]\n\ntable_edges = [\n    {\"source\": \"alice\", \"target\": \"bob\", \"weight\": 0.8},\n    {\"source\": \"bob\", \"target\": \"alice\", \"weight\": 0.2}\n]\n\ng = tables_to_graph(\n    table_nodes, table_edges, node_col=\"name\", node_data=[\"age\"], edge_data=[\"weight\"], directed=True\n)\n```\n\n*Arguments*\n\n* **nodes_table** *Iterable[Indexable] or pd.DataFrame* - input nodes in tabular\nformat. It can be a large variety of things as long as it is 1. iterable\nand 2. yields indexable values such as dicts or lists. This can for\ninstance be a list of dicts, a csv.DictReader stream etc. It also supports\npandas DataFrame if the library is installed.\n* **edges_table** *Iterable[Indexable] or pd.DataFrame* - input edges in tabular\nformat.\n* **node_col** *Hashable, optional* `\"key\"` - the name of the column containing the nodes in the nodes_table.\nIt could be the index if your rows are lists or a key if your rows\nare dicts instead.\n* **edge_source_col** *Hashable, optional* `\"source\"` - the name of the column containing the edges' source\nnodes in the edges_table.\n* **edge_target_col** *Hashable, optional* `\"target\"` - the name of the column containing the edges' target\nnodes in the edges_table.\n* **node_data** *Sequence, optional* `[]` - sequence (i.e. list, tuple etc.)\nof columns' names from the nodes_table to keep as node attributes in the resulting graph.\n* **edge_data** *Sequence, optional* `[]` - sequence (i.e. list, tuple etc.) of columns' names\nfrom the edges_table to keep as edge attributes in the resulting graph, e.g. [\"weight\"].\n* **count_rows_as_weight** *bool, optional* `False` - set this to True to compute a weight\nattribute for each edge, corresponding to the number of times it was\nfound in the table. The name of this attribute is defined by the\n`edge_weight_attr` parameter. If set to False, only the last occurrence of\neach edge will be kept in the graph.\n* **edge_weight_attr** *str, optional* `\"weight\"` - name of the edge attribute containing\nits weight, i.e. the number of times it was found in the table, if\n`count_rows_as_weight` is set to True.\n* **add_missing_nodes** *bool, optional* `True` - set this to True to check that the edges' sources and targets\nin the edges_table are all defined in the nodes_table.\n* **directed** *bool, optional* `False` - whether the resulting graph must be directed.\n\n*Returns*\n\n*nx.AnyGraph* - the resulting graph.\n\n#### edges_table_to_graph\n\nFunction creating a graph from a table of edges.\n\n*Arguments*\n\n* **edges_table** *Iterable[Indexable] or pd.DataFrame* - input edges in tabular\nformat. It can be a large variety of things as long as it is 1. iterable\nand 2. yields indexable values such as dicts or lists. This can for\ninstance be a list of dicts, a csv.DictReader stream etc. It also supports\npandas DataFrame if the library is installed.\n* **edge_source_col** *Hashable, optional* `\"source\"` - the name of the column containing the edges' source\nnodes in the edges_table.\n* **edge_target_col** *Hashable, optional* `\"target\"` - the name of the column containing the edges' target\nnodes in the edges_table.\n* **edge_data** *Sequence, optional* `[]` - sequence (i.e. list, tuple etc.) of columns' names\nfrom the edges_table to keep as edge attributes in the resulting graph, e.g. [\"weight\"].\n* **count_rows_as_weight** *bool, optional* `False` - set this to True to compute a weight\nattribute for each edge, corresponding to the number of times it was\nfound in the table. The name of this attribute is defined by the\n`edge_weight_attr` parameter. If set to False, only the last occurrence of\neach edge will be kept in the graph.\n* **edge_weight_attr** *str, optional* `\"weight\"` - name of the edge attribute containing\nits weight, i.e. the number of times it was found in the table, if\n`count_rows_as_weight` is set to True.\n* **directed** *bool, optional* `False` - whether the resulting graph must be directed.\n\n*Returns*\n\n*nx.AnyGraph* - the resulting graph.\n\n---\n\n### Graphs to tabular data\n\n#### graph_to_nodes_dataframe\n\nFunction converting the given networkx graph into a pandas DataFrame of\nits nodes.\n\n```python\nfrom pelote import graph_to_nodes_dataframe\n\ndf = graph_to_nodes_dataframe(graph)\n```\n\n*Arguments*\n\n* **nx.AnyGraph**  - a networkx graph instance\n* **node_key_col** *str, optional* `\"key\"` - name of the DataFrame column containing\nthe node keys. If None, the node keys will be used as the DataFrame\nindex.\n\n*Returns*\n\n*pd.DataFrame* - A pandas DataFrame\n\n#### graph_to_edges_dataframe\n\nFunction converting the given networkx graph into a pandas DataFrame of\nits edges.\n\n*Arguments*\n\n* **nx.AnyGraph**  - a networkx graph instance\n* **edge_source_col** *str, optional* `\"source\"` - name of the DataFrame column containing\nthe edge source.\n* **edge_target_col** *str, optional* `\"target\"` - name of the DataFrame column containing\nthe edge target.\n* **source_node_data** *Iterable or Mapping, optional* `None` - iterable of attribute names\nor mapping from attribute names to column name to be used to add\ncolumns to the resulting dataframe based on source node data.\n* **target_node_data** *Iterable or Mapping, optional* `None` - iterable of attribute names\nor mapping from attribute names to column name to be used to add\ncolumns to the resulting dataframe based on target node data.\n\n*Returns*\n\n*pd.DataFrame* - A pandas DataFrame\n\n#### graph_to_dataframes\n\nFunction converting the given networkx graph into two pandas DataFrames:\none for its nodes, one for its edges.\n\n*Arguments*\n\n* **nx.AnyGraph**  - a networkx graph instance\n* **node_key_col** *str, optional* `\"key\"` - name of the node DataFrame column containing\nthe node keys. If None, the node keys will be used as the DataFrame\nindex.\n* **edge_source_col** *str, optional* `\"source\"` - name of the edge DataFrame column containing\nthe edge source.\n* **edge_target_col** *str, optional* `\"target\"` - name of the edge DataFrame column containing\nthe edge target.\n* **source_node_data** *Iterable or Mapping, optional* `None` - iterable of attribute names\nor mapping from attribute names to column name to be used to add\ncolumns to the edge dataframe based on source node data.\n* **target_node_data** *Iterable or Mapping, optional* `None` - iterable of attribute names\nor mapping from attribute names to column name to be used to add\ncolumns to the edge dataframe based on target node data.\n\n*Returns*\n\n*None* - (pd.DataFrame, pd.DataFrame)\n\n---\n\n### Graph projection\n\n#### monopartite_projection\n\nFunction returning the monopartite projection of a given bipartite graph\nwrt one of both partitions of the graph.\n\nThat is to say the resulting graph will keep a single type of nodes sharing\nweighted edges based on the neighbors they shared in the bipartite graph.\n\n```python\nimport networkx as nx\nfrom pelote import monopartite_projection\n\nbipartite = nx.Graph()\nbipartite.add_nodes_from([1, 2, 3], part='account')\nbipartite.add_nodes_from([4, 5, 6], part='color')\nbipartite.add_edges_from([\n    (1, 4),\n    (1, 5),\n    (2, 6),\n    (3, 4),\n    (3, 6)\n])\n\n# Resulting graph will only contain nodes [1, 2, 3]\n# with edges: (1, 3) and (2, 3)\nmonopartite = monopartite_projection(bipartite, 'account')\n```\n\n*Arguments*\n\n* **bipartite_graph** *nx.AnyGraph* - target graph. The function will raise\nif given graph is not truly bipartite.\n* **part_to_keep** *Hashable or Collection* - partition to keep in the projected\ngraph. It can either be the value of the part node attribute in the\ngiven graph (a string, most commonly), or a collection (a set, list etc.)\nholding the nodes composing the part to keep.\n* **node_part_attr** *str, optional* `\"part\"` - name of the node attribute containing\nthe part the node belongs to.\n* **edge_weight_attr** *str, optional* `\"weight\"` - name of the edge attribute containing\nthe edge's weight.\n* **metric** *str, optional* `None` - one of \"jaccard\", \"overlap\", \"cosine\", \"dice\",\n\"binary_cosine\", \"pmi\" or \"dot_product\". If not given, resulting weight\nwill be set to the size of neighbor intersection.\n* **bipartition_check** *bool, optional* `True` - whether to check if given graph\nis truly bipartite. You can disable this as an optimization\nstrategy if you know what you are doing.\n* **weight_threshold** *float, optional* `None` - if an edge weight should be less\nthan this threshold we would not add it to the projected\nmonopartite graph.\n\n*Returns*\n\n*nx.Graph* - the projected monopartite graph.\n\n---\n\n### Graph sparsification\n\n#### global_threshold_sparsification\n\nFunction returning a copy of the given graph without edges whose weight\nis less than a given threshold.\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - target graph.\n* **weight_threshold** *float* - weight threshold.\n* **edge_weight_attr** *str, optional* - name of the edge weight attribute.\n* **reverse** *bool, optional* - whether to reverse the threshold condition.\nThat is to say an edge would be removed if its weight is greater\nthan the threshold.\n* **keep_connected** *bool, optional* `False` - whether to keep the graph connected\nas it is using the UMST method.\n\n*Returns*\n\n*nx.AnyGraph* - the sparse graph.\n\n#### multiscale_backbone\n\nFunction returning the multiscale backbone of the given graph, i.e. a copy\nof the graph were we only kept \"relevant\" edges, as defined by a\nstatistical test where we compare the likelihood of a weighted edge existing\nvs. the null model.\n\n*Article*\n> Serrano, M. Ángeles, Marián Boguná, and Alessandro Vespignani. \"Extracting the multiscale backbone of complex weighted networks.\" Proceedings of the national academy of sciences 106.16 (2009): 6483-6488.\n\n*References*\n\n- https://www.pnas.org/content/pnas/106/16/6483.full.pdf\n- https://en.wikipedia.org/wiki/Disparity_filter_algorithm_of_weighted_network\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - target graph.\n* **alpha** *float, optional* `0.05` - alpha value for the statistical test. It can\nbe intuitively thought of as a p-value score for an edge to be\nkept in the resulting graph.\n* **edge_weight_attr** *str, optional* `\"weight\"` - name of the edge attribute holding\nthe edge's weight.\n* **keep_connected** *bool, optional* `False` - whether to keep the graph connected\nas it is using the UMST method.\n\n*Returns*\n\n*nx.AnyGraph* - the sparse graph.\n\n---\n\n### Miscellaneous graph-related metrics\n\n#### edge_disparity\n\nFunction computing the disparity score of each edge in the given graph. This\nscore is typically used to extract the multiscale backbone of a weighted\ngraph.\n\nThe formula from the paper (relying on integral calculus) can be simplified\nto become:\n\n```\ndisparity(u, v) = min(\n    (1 - normalizedWeight(u, v)) ^ (degree(u) - 1)),\n    (1 - normalizedWeight(v, u)) ^ (degree(v) - 1))\n)\n```\n\nwhere\n\n```\nnormalizedWeight(u, v) = weight(u, v) / weightedDegree(u)\nweightedDegree(u) = sum(weight(u, v) for v in neighbors(u))\n```\n\nThis score can sometimes be found reversed likewise:\n\n```\ndisparity(u, v) = max(\n    1 - (1 - normalizedWeight(u, v)) ^ (degree(u) - 1)),\n    1 - (1 - normalizedWeight(v, u)) ^ (degree(v) - 1))\n)\n```\n\nso that higher score means better edges. We chose to keep the metric close\nto the paper to keep the statistical test angle. This means that, in this\nimplementation at least, a low score for an edge means a high relevance and\nincreases its chances to be kept in the backbone.\n\nNote that this algorithm has no proper definition for directed graphs and\nis only useful if edges have varying weights. This said, it could be\npossible to compute the disparity score only based on edge direction, if\nwe drop the min part.\n\n*Article*\n> Serrano, M. Ángeles, Marián Boguná, and Alessandro Vespignani. \"Extracting the multiscale backbone of complex weighted networks.\" Proceedings of the national academy of sciences 106.16 (2009): 6483-6488.\n\n*References*\n\n- https://www.pnas.org/content/pnas/106/16/6483.full.pdf\n- https://en.wikipedia.org/wiki/Disparity_filter_algorithm_of_weighted_network\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - target graph.\n* **edge_weight_attr** *str, optional* `\"weight\"` - name of the edge attribute containing\nits weight.\n* **reverse** *bool, optional* `False` - whether to reverse the metric, i.e. higher weight\nmeans more relevant edges.\n\n*Returns*\n\n*dict* - Dictionnary with edges - (source, target) tuples - as keys and the disparity scores as values\n\n#### triangular_strength\n\nFunction returning a graph edges triangular strength, sometimes also called\nSimmelian strength, i.e. the number of triangles each edge is a part of.\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - target graph.\n* **full** *bool, optional* `False` - whether to return strength for every edge,\nincluding those with strength = 0.\n\n*Returns*\n\n*dict* - mapping of edges to their triangular strength.\n\n---\n\n### Graph utilities\n\n#### union_of_maximum_spanning_trees\n\nGenerator yielding the edges belonging to any Maximum Spanning Tree (MST) of\nthe given networkx graph.\n\nNote that this function will give to each edge with no weight a default\nweight of 1.\n\n*Article*\n> Arlind Nocaj, Mark Ortmann, and Ulrik Brandes \"Untangling Hairballs. From 3 to 14 Degrees of Separation.\" Computer & Information Science, University of Konstanz, Germany, 2014, https://dx.doi.org/10.1007/978-3-662-45803-7_9.\n\n*References*\n\n- https://kops.uni-konstanz.de/bitstream/handle/123456789/30583/Nocaj_0-284485.pdf\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - target graph.\n* **edge_weight_attr** *str, optional* `\"weight\"` - name of the edge weight attribute.\n\n*Yields*\n\n*tuple* - source, target, attributes\n\n#### largest_connected_component\n\nFunction returning the largest connected component of given networkx graph\nas a set of nodes.\n\nNote that this function will consider any given graph as undirected and\nwill therefore work with weakly connected components in the directed case.\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - target graph.\n\n*Returns*\n\n*set* - set of nodes representing the largest connected component.\n\n#### crop_to_largest_connected_component\n\nFunction mutating the given networkx graph in order to keep only the\nlargest connected component.\n\nNote that this function will consider any given graph as undirected and\nwill therefore work with weakly connected components in the directed case.\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - target graph.\n\n#### largest_connected_component_subgraph\n\nFunction returning the largest connected component subgraph of the given\nnetworkx graph.\n\nNote that this function will consider any given graph as undirected and\nwill therefore work with weakly connected components in the directed case.\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - target graph.\n* **as_view** *bool, optional* `False` - whether to return the subgraph as a view.\n\n*Returns*\n\n*nx.AnyGraph* - the subgraph.\n\n#### remove_edges\n\nFunction removing all edges that do not pass a predicate function from a\ngiven networkx graph.\n\nNote that this function mutates the given graph.\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - a networkx graph.\n* **predicate** *callable* - a function taking each edge source, target and\nattributes and returning True if you want to keep the edge or False\nif you want to remove it.\n\n#### filter_edges\n\nFunction returning a copy of the given networkx graph but without the edges\nfiltered out by the given predicate function\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - a networkx graph.\n* **predicate** *callable* - a function taking each edge source, target and\nattributes and returning True if you want to keep the edge or False\nif you want to remove it.\n\n*Returns*\n\n*nx.AnyGraph* - the filtered graph.\n\n#### remove_nodes\n\nFunction removing all nodes that do not pass a predicate function from a\ngiven networkx graph.\n\nNote that this function mutates the given graph.\n\n```python\nfrom pelote import remove_nodes\n\ng = nx.Graph()\ng.add_node(1, weight=22)\ng.add_node(2, weight=4)\ng.add_edge(1, 2)\n\nremove_nodes(g, lambda n, a: a[\"weight\"] >= 10)\n```\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - a networkx graph.\n* **predicate** *callable* - a function taking each node and node attributes\nand returning True if you want to keep the node or False if you want\nto remove it.\n\n#### filter_nodes\n\nFunction returning a copy of the given networkx graph but without the nodes\nfiltered out by the given predicate function\n\n```python\nfrom pelote import filter_nodes\n\ng = nx.Graph()\ng.add_node(1, weight=22)\ng.add_node(2, weight=4)\ng.add_edge(1, 2)\n\nh = filter_nodes(g, lambda n, a: a[\"weight\"] >= 10)\n```\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - a networkx graph.\n* **predicate** *callable* - a function taking each node and node attributes\nand returning True if you want to keep the node or False if you want\nto remove it.\n\n*Returns*\n\n*nx.AnyGraph* - the filtered graph.\n\n#### remove_leaves\n\nFunction removing all leaves of the graph, i.e. the nodes incident to a\nsingle edge, i.e. the nodes with degree 1.\n\nThis function is not recursive and will only remove one layer of leaves.\n\nNote that this function mutates the given graph.\n\n```python\nfrom pelote import remove_leaves\n\ng = nx.Graph()\ng.add_edge(1, 2)\ng.add_edge(2, 3)\n\nremove_leaves(g)\n\nlist(g.nodes)\n>>> [2]\n```\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - a networkx graph.\n\n#### filter_leaves\n\nFunction returning a copy of the given networkx graph but without its leaves,\ni.e. the nodes incident to a single edge, i.e. the nodes with degree 1.\n\nThis function is not recursive and will only filter only one layer of leaves.\n\n```python\nfrom pelote import remove_leaves\n\ng = nx.Graph()\ng.add_edge(1, 2)\ng.add_edge(2, 3)\n\nh = filter_leaves(g)\n\nlist(h.nodes)\n>>> [2]\n```\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - a networkx graph.\n\n---\n\n### Learning\n\n#### floatsam_threshold_learner\n\nFunction using an iterative algorithm to try and find the best weight\nthreshold to apply to trim the given graph's edges while keeping the\nunderlying community structure.\n\nIt works by iteratively increasing the threshold and stopping as soon as\na significant connected component starts to drift away from the principal\none.\n\nThis is basically an optimization algorithm applied to a complex nonlinear\nfunction using a very naive cost heuristic, but it works decently for typical\ncases as it emulates the method used by hand by some researchers when they\nperform this kind of task on Gephi, for instance.\n\nWhen working on metrics where lower is better (i.e. edge disparity), you\ncan reverse the logic of the algorithm by tweaking `starting_threshold`\nand giving a negative `learning_rate`.\n\n*Arguments*\n\n* **graph** *nx.Graph* - Graph to sparsify.\n* **starting_threshold** *float, optional* `0.0` - Starting similarity threshold.\n* **learning_rate** *float, optional* `0.05` - How much to increase the threshold\nat each step of the algorithm.\n* **max_drifter_order** *int, optional* - Max order of component to detach itself\nfrom the principal one before stopping the algorithm. If not\nprovided it will default to the logarithm of the graph's largest\nconnected component's order.\n* **edge_weight_attr** *str, optional* `\"weight\"` - Name of the weight attribute.\n* **on_epoch** *callable, optional* - Function called on each epoch of the\nalgorithm with some metadata about iteration state.\n\n*Returns*\n\n*float* - The found threshold\n\n---\n\n### Reading & Writing\n\n#### read_graphology_json\n\nFunction reading and parsing the given json file representing a serialized\n[graphology](https://graphology.github.io/) graph as a networkx graph.\n\nNote that this function cannot parse a true mixed graph since this is not\nsupported by networkx.\n\n*Arguments*\n\n* **target** *str or Path or file or dict* - target to read and parse. Can\nbe a string path, a Path instance, a file buffer or already\nparsed JSON data as a dict.\n\n*Returns*\n\n*nx.AnyGraph* - a networkx graph instance.\n\n#### write_graphology_json\n\nFunction serializing the given networkx graph as JSON, using the\n[graphology](https://graphology.github.io/) format.\n\nNote that both node keys and attribute names will be cast to string so\nthey can safely be represented in JSON. As such in some cases (where\nyour node keys and/or attribute names are not strings), this function\nwill not be bijective when used with `read_graphology_json`.\n\n*Arguments*\n\n* **graph** *nx.AnyGraph* - graph to serialize.\n* **allow_mixed_keys** *bool, optional* `False` - whether to allow graph with mixed\nnode key types to be serialized nonetheless. Keys will always be\ncast to string so keys might clash and produce an invalid\nserialization. Only use this if you know what you are doing.\n* **allow_invalid_attr_names** *bool, optional* `False` - whether to allow non-string\nattribute names. Note that if you chose to allow them, some might\nclash and produce an invalid serialization. Only use this if you\nknow what you are doing.\n\n*Returns*\n\n*dict* - JSON data\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/medialab/pelote",
    "keywords": "network",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pelote",
    "package_url": "https://pypi.org/project/pelote/",
    "platform": null,
    "project_url": "https://pypi.org/project/pelote/",
    "project_urls": {
      "Homepage": "http://github.com/medialab/pelote"
    },
    "release_url": "https://pypi.org/project/pelote/0.8.1/",
    "requires_dist": [
      "ebbe (<2,>=1.9.0)",
      "llist",
      "networkx (<3,>=2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Collection of network-related utilities for python.",
    "version": "0.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15336923,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ef78d04aa607bda33be1c93ddd0ba8d3255770e54a7dbaa5d68ce796f6c28a6",
          "md5": "37f555e28bb5a23e7119b24cd75a41f8",
          "sha256": "ba10fc9362955bbfa3ab29819ff0677bc92a798c683ab37c76977ecac0d38794"
        },
        "downloads": -1,
        "filename": "pelote-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37f555e28bb5a23e7119b24cd75a41f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6121,
        "upload_time": "2022-03-03T11:17:14",
        "upload_time_iso_8601": "2022-03-03T11:17:14.652962Z",
        "url": "https://files.pythonhosted.org/packages/7e/f7/8d04aa607bda33be1c93ddd0ba8d3255770e54a7dbaa5d68ce796f6c28a6/pelote-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f6fe9ffba9bc9835e9609f61464a84c396771100c9ae20b51479e110099b0ac",
          "md5": "0aff82c51f1072e1724f03e1711bc915",
          "sha256": "ca7e3bf6d2a03d07bd430a68992db5eb203959a212edaf99cc9c59116cdc63a3"
        },
        "downloads": -1,
        "filename": "pelote-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0aff82c51f1072e1724f03e1711bc915",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3452,
        "upload_time": "2022-03-03T11:17:16",
        "upload_time_iso_8601": "2022-03-03T11:17:16.444221Z",
        "url": "https://files.pythonhosted.org/packages/0f/6f/e9ffba9bc9835e9609f61464a84c396771100c9ae20b51479e110099b0ac/pelote-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9689a1c09187c3f48e4749f1c7180522ff1f412e57cea2362d7f108c5bb1beb4",
          "md5": "2c5597a592da6eff2e56fa56a97e5440",
          "sha256": "ffe5bf9cc427992f95f4fc95cfff99e0c266a49e77ca8c6d3ec0401932ad9941"
        },
        "downloads": -1,
        "filename": "pelote-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c5597a592da6eff2e56fa56a97e5440",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6150,
        "upload_time": "2022-03-03T11:24:04",
        "upload_time_iso_8601": "2022-03-03T11:24:04.981964Z",
        "url": "https://files.pythonhosted.org/packages/96/89/a1c09187c3f48e4749f1c7180522ff1f412e57cea2362d7f108c5bb1beb4/pelote-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ae63595d0084ea9713b3c2461d37b9caef967804738eb22409c21d6541412ca",
          "md5": "ce5c9e91577fe472a4a147c1dab5e06b",
          "sha256": "efd79cbecc9501e6721aaa0c842754074eeac8289bee1347ed9e7a6506107271"
        },
        "downloads": -1,
        "filename": "pelote-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce5c9e91577fe472a4a147c1dab5e06b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3475,
        "upload_time": "2022-03-03T11:24:06",
        "upload_time_iso_8601": "2022-03-03T11:24:06.155401Z",
        "url": "https://files.pythonhosted.org/packages/6a/e6/3595d0084ea9713b3c2461d37b9caef967804738eb22409c21d6541412ca/pelote-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6112a5e954523f5a298ffc527f4be8d28a4210248cb2e8a90bc64c496ae61e3e",
          "md5": "6aacde2f2fbd9383523b33a230d09ae0",
          "sha256": "85c9cf1e705f44fb4fbcafd691666e2a48995f0bc802acbb1d145f5aa5bb3dc0"
        },
        "downloads": -1,
        "filename": "pelote-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6aacde2f2fbd9383523b33a230d09ae0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6432,
        "upload_time": "2022-03-03T13:25:44",
        "upload_time_iso_8601": "2022-03-03T13:25:44.450590Z",
        "url": "https://files.pythonhosted.org/packages/61/12/a5e954523f5a298ffc527f4be8d28a4210248cb2e8a90bc64c496ae61e3e/pelote-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8f63f8a00c616750f5cb8c264ff5f3d9355d8b86622638ee92f8356b7254bba",
          "md5": "e371e52ba05062d34bd4eabfdbf9467a",
          "sha256": "eda8fa5968f7968f1208a445612490d4e73594429d026b813aa59d20af84dfbc"
        },
        "downloads": -1,
        "filename": "pelote-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e371e52ba05062d34bd4eabfdbf9467a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3713,
        "upload_time": "2022-03-03T13:25:46",
        "upload_time_iso_8601": "2022-03-03T13:25:46.141316Z",
        "url": "https://files.pythonhosted.org/packages/b8/f6/3f8a00c616750f5cb8c264ff5f3d9355d8b86622638ee92f8356b7254bba/pelote-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f105ff2248ebce5bb441582f33468d52a530bdf27148206104971574a72e282",
          "md5": "dadd10f93929b4ab59bde3bc0837eb74",
          "sha256": "f1c1ba85cf4ccb1a43fc07de09c699f9e4917181b095a5bc4a01b5fa7810b220"
        },
        "downloads": -1,
        "filename": "pelote-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dadd10f93929b4ab59bde3bc0837eb74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16429,
        "upload_time": "2022-03-11T10:11:30",
        "upload_time_iso_8601": "2022-03-11T10:11:30.659839Z",
        "url": "https://files.pythonhosted.org/packages/0f/10/5ff2248ebce5bb441582f33468d52a530bdf27148206104971574a72e282/pelote-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fde41f7e344c036f76b133eef4ba7c3926fbdcf50a8d72ecd232a27d6bbcc47d",
          "md5": "df62d1269da85e9298a71f008c07a219",
          "sha256": "4ad534381046d598cca5bb6bf72edfda830ed12891df69c542000ddc126aa369"
        },
        "downloads": -1,
        "filename": "pelote-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "df62d1269da85e9298a71f008c07a219",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12822,
        "upload_time": "2022-03-11T10:11:33",
        "upload_time_iso_8601": "2022-03-11T10:11:33.006716Z",
        "url": "https://files.pythonhosted.org/packages/fd/e4/1f7e344c036f76b133eef4ba7c3926fbdcf50a8d72ecd232a27d6bbcc47d/pelote-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77a6d4e60b880a8c60c1be2c869b27b8db1388f541ec383d81f4572d03180b0a",
          "md5": "3c0a807d6806e43b27838f0aca4ee210",
          "sha256": "5c8840a378cf030f712862d121d7414141d01768443ee9715e701ab21b54cd4e"
        },
        "downloads": -1,
        "filename": "pelote-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c0a807d6806e43b27838f0aca4ee210",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20889,
        "upload_time": "2022-03-21T19:29:47",
        "upload_time_iso_8601": "2022-03-21T19:29:47.482911Z",
        "url": "https://files.pythonhosted.org/packages/77/a6/d4e60b880a8c60c1be2c869b27b8db1388f541ec383d81f4572d03180b0a/pelote-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd3010c0562445d88e8cdc0cd4163fc5a4a68362965335786353c51639a94d54",
          "md5": "88180773cde78359a94f571e2506dfb8",
          "sha256": "d9d506da58b67ef0b63f9ea013ba7a07ad4d3ba43791c6b04e1f4c3ee39c7e3d"
        },
        "downloads": -1,
        "filename": "pelote-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "88180773cde78359a94f571e2506dfb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14957,
        "upload_time": "2022-03-21T19:29:49",
        "upload_time_iso_8601": "2022-03-21T19:29:49.463492Z",
        "url": "https://files.pythonhosted.org/packages/bd/30/10c0562445d88e8cdc0cd4163fc5a4a68362965335786353c51639a94d54/pelote-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc5a8425dfe05f38ab95efef2ee1e1a54dfd8b02d63ec7845ae4362a513277e8",
          "md5": "c17c62ea2f7cea18f07af9a57226857b",
          "sha256": "2e59a8d51bbd35ec53cdc96cfb36bcf681664f9a2877688aafa458c7116c0575"
        },
        "downloads": -1,
        "filename": "pelote-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c17c62ea2f7cea18f07af9a57226857b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23783,
        "upload_time": "2022-03-23T13:05:41",
        "upload_time_iso_8601": "2022-03-23T13:05:41.920996Z",
        "url": "https://files.pythonhosted.org/packages/bc/5a/8425dfe05f38ab95efef2ee1e1a54dfd8b02d63ec7845ae4362a513277e8/pelote-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "898ab4a1ea5adcdb35442c55534deb6a542316bb6d54d46ab3d72db632659745",
          "md5": "ae4374b0c1384f512ebc92a5a23908cf",
          "sha256": "37e36da32f117902365974e6a23c0f176ce53d40286bf66e66cd85387c4e9125"
        },
        "downloads": -1,
        "filename": "pelote-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ae4374b0c1384f512ebc92a5a23908cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21175,
        "upload_time": "2022-03-23T13:05:43",
        "upload_time_iso_8601": "2022-03-23T13:05:43.573948Z",
        "url": "https://files.pythonhosted.org/packages/89/8a/b4a1ea5adcdb35442c55534deb6a542316bb6d54d46ab3d72db632659745/pelote-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a277cc66997dc0a4d048d67137e448d5dc4da373192df2a6002fa3b8e59e2265",
          "md5": "83ee5018783a3948ba8d701492a68b07",
          "sha256": "e26b0c5d1eb154b226b23b5f79beb1e15f86f70f1478d596777acb3fc2a7b493"
        },
        "downloads": -1,
        "filename": "pelote-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83ee5018783a3948ba8d701492a68b07",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21977,
        "upload_time": "2022-03-23T17:03:58",
        "upload_time_iso_8601": "2022-03-23T17:03:58.469524Z",
        "url": "https://files.pythonhosted.org/packages/a2/77/cc66997dc0a4d048d67137e448d5dc4da373192df2a6002fa3b8e59e2265/pelote-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "690644c25b4884200f4f74138f1ad3f221014d61fafe0a5419ae8bd31a881858",
          "md5": "0a30c2520acb592d012f2a5799f7e85f",
          "sha256": "7543f1ba29c8544871260e2cba5f6cf021fefa24d2361aeea9068fe4d35f7c47"
        },
        "downloads": -1,
        "filename": "pelote-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a30c2520acb592d012f2a5799f7e85f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19984,
        "upload_time": "2022-03-23T17:04:00",
        "upload_time_iso_8601": "2022-03-23T17:04:00.638040Z",
        "url": "https://files.pythonhosted.org/packages/69/06/44c25b4884200f4f74138f1ad3f221014d61fafe0a5419ae8bd31a881858/pelote-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56fbbbcd29389d3eb771b0d5d6246111d7a0a04c5a37ba5a918ab39d0f2e4d1e",
          "md5": "6001c92961581f320b8cb7bdc16eb0d7",
          "sha256": "68b37485e3dac08960c2d234ecad5c308bad369b3625193c4e3346a73fe3ac04"
        },
        "downloads": -1,
        "filename": "pelote-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6001c92961581f320b8cb7bdc16eb0d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29576,
        "upload_time": "2022-04-07T10:50:18",
        "upload_time_iso_8601": "2022-04-07T10:50:18.962755Z",
        "url": "https://files.pythonhosted.org/packages/56/fb/bbcd29389d3eb771b0d5d6246111d7a0a04c5a37ba5a918ab39d0f2e4d1e/pelote-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba4f90d5498255317574c1f95f82962ab7726d14ba7963c84477357e25399311",
          "md5": "696ceda91d811a7d60297907e48b0ad3",
          "sha256": "a6abcc8c576b376a17d6040b0305272ae720f98534207968dad9c947e0507b3f"
        },
        "downloads": -1,
        "filename": "pelote-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "696ceda91d811a7d60297907e48b0ad3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26825,
        "upload_time": "2022-04-07T10:50:21",
        "upload_time_iso_8601": "2022-04-07T10:50:21.565600Z",
        "url": "https://files.pythonhosted.org/packages/ba/4f/90d5498255317574c1f95f82962ab7726d14ba7963c84477357e25399311/pelote-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05fb2a3cac05354dd01b68dc7653ddc24e6bb357c8775c6cbb020e2137d3ac82",
          "md5": "670f07d1d1f2593112aa4066a361d9ac",
          "sha256": "cd602395139c727e7cf9d7a778ca0e01ada85765e62bc6a88c46f30dd86dd5d6"
        },
        "downloads": -1,
        "filename": "pelote-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "670f07d1d1f2593112aa4066a361d9ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33154,
        "upload_time": "2022-09-26T14:38:31",
        "upload_time_iso_8601": "2022-09-26T14:38:31.072259Z",
        "url": "https://files.pythonhosted.org/packages/05/fb/2a3cac05354dd01b68dc7653ddc24e6bb357c8775c6cbb020e2137d3ac82/pelote-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de3ba8db64725e7c03dcf57577823e0cd2daa23959ae54f99e509a58fdcaef0e",
          "md5": "470e4aed6b7070d531b8d01b1d26af11",
          "sha256": "910f77a01ed75613c2be8fb0be4275a4d26cdb1a288bca0bfdfaebaeb5fa2d5c"
        },
        "downloads": -1,
        "filename": "pelote-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "470e4aed6b7070d531b8d01b1d26af11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30036,
        "upload_time": "2022-09-26T14:38:33",
        "upload_time_iso_8601": "2022-09-26T14:38:33.195185Z",
        "url": "https://files.pythonhosted.org/packages/de/3b/a8db64725e7c03dcf57577823e0cd2daa23959ae54f99e509a58fdcaef0e/pelote-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a951efc2632530a661aa360cb075aaa8922b256c70be39c02d554751483b667",
          "md5": "4f93778168d796c1b8b20227b2acbc9d",
          "sha256": "6d731a9e0c57940cca471ffdb0e44f87c041907c29bab26d559586ebb9a5904a"
        },
        "downloads": -1,
        "filename": "pelote-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f93778168d796c1b8b20227b2acbc9d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39814,
        "upload_time": "2022-10-07T12:52:13",
        "upload_time_iso_8601": "2022-10-07T12:52:13.710873Z",
        "url": "https://files.pythonhosted.org/packages/5a/95/1efc2632530a661aa360cb075aaa8922b256c70be39c02d554751483b667/pelote-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac4fdc002e820bce8e193b7fca94de3ff3a14fbe7e38ff5ff12fbbbf453064bc",
          "md5": "10213a796bcfd0d200bc5bb33639ebd1",
          "sha256": "69aa56feb750bbbdf640fa1a8a6a9e7e10802ee917e3f1938f2370d23c5f3218"
        },
        "downloads": -1,
        "filename": "pelote-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10213a796bcfd0d200bc5bb33639ebd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40980,
        "upload_time": "2022-10-07T12:52:16",
        "upload_time_iso_8601": "2022-10-07T12:52:16.123910Z",
        "url": "https://files.pythonhosted.org/packages/ac/4f/dc002e820bce8e193b7fca94de3ff3a14fbe7e38ff5ff12fbbbf453064bc/pelote-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6605e58767e91e7c08845c880c20874d54fb3558aaea60bae080f161039e249c",
          "md5": "edf3fa515d186b2ae5deaf700f905370",
          "sha256": "b1abdc33af53f2d59aba4a100cd4eef1f13d757c662a035ddf829a89035b4489"
        },
        "downloads": -1,
        "filename": "pelote-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edf3fa515d186b2ae5deaf700f905370",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39928,
        "upload_time": "2022-10-07T13:33:05",
        "upload_time_iso_8601": "2022-10-07T13:33:05.964581Z",
        "url": "https://files.pythonhosted.org/packages/66/05/e58767e91e7c08845c880c20874d54fb3558aaea60bae080f161039e249c/pelote-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1e6263b5e0ee282a621934ed0da87bcad4a47f9eeaeb75290cff92d65fb8ed2",
          "md5": "1ad8ed07f02d5c1d3aac1292d0b44e07",
          "sha256": "a7d341dfb62a974b2c6deae29c300a3add8194028669620990fbec29dfd7c36f"
        },
        "downloads": -1,
        "filename": "pelote-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ad8ed07f02d5c1d3aac1292d0b44e07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40929,
        "upload_time": "2022-10-07T13:33:07",
        "upload_time_iso_8601": "2022-10-07T13:33:07.783302Z",
        "url": "https://files.pythonhosted.org/packages/c1/e6/263b5e0ee282a621934ed0da87bcad4a47f9eeaeb75290cff92d65fb8ed2/pelote-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d98a690e5c279b3935e707706d4948484f561dd071dc21498bfb96fbcaa2e0f",
          "md5": "a6c6a04a304a2a7fc8eb32ce450a5e97",
          "sha256": "617b90e34fac458caa7fc9d127db6d66d19f12b34b33b219b7e2622b6ac4f07d"
        },
        "downloads": -1,
        "filename": "pelote-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6c6a04a304a2a7fc8eb32ce450a5e97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39947,
        "upload_time": "2022-10-07T14:32:05",
        "upload_time_iso_8601": "2022-10-07T14:32:05.595435Z",
        "url": "https://files.pythonhosted.org/packages/6d/98/a690e5c279b3935e707706d4948484f561dd071dc21498bfb96fbcaa2e0f/pelote-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fbd8ed28e0a05d1648632bbf9e5c597ed1fc709b25a694fd7ac44f3ab6e7ab0",
          "md5": "e7d3461025b500a7217009fda8454d3e",
          "sha256": "4e8ddf449f7c995013fa045aa2c0f79f2c2106dbc0891e3b29d1629544693038"
        },
        "downloads": -1,
        "filename": "pelote-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e7d3461025b500a7217009fda8454d3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40919,
        "upload_time": "2022-10-07T14:32:08",
        "upload_time_iso_8601": "2022-10-07T14:32:08.010932Z",
        "url": "https://files.pythonhosted.org/packages/4f/bd/8ed28e0a05d1648632bbf9e5c597ed1fc709b25a694fd7ac44f3ab6e7ab0/pelote-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d98a690e5c279b3935e707706d4948484f561dd071dc21498bfb96fbcaa2e0f",
        "md5": "a6c6a04a304a2a7fc8eb32ce450a5e97",
        "sha256": "617b90e34fac458caa7fc9d127db6d66d19f12b34b33b219b7e2622b6ac4f07d"
      },
      "downloads": -1,
      "filename": "pelote-0.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6c6a04a304a2a7fc8eb32ce450a5e97",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 39947,
      "upload_time": "2022-10-07T14:32:05",
      "upload_time_iso_8601": "2022-10-07T14:32:05.595435Z",
      "url": "https://files.pythonhosted.org/packages/6d/98/a690e5c279b3935e707706d4948484f561dd071dc21498bfb96fbcaa2e0f/pelote-0.8.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fbd8ed28e0a05d1648632bbf9e5c597ed1fc709b25a694fd7ac44f3ab6e7ab0",
        "md5": "e7d3461025b500a7217009fda8454d3e",
        "sha256": "4e8ddf449f7c995013fa045aa2c0f79f2c2106dbc0891e3b29d1629544693038"
      },
      "downloads": -1,
      "filename": "pelote-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e7d3461025b500a7217009fda8454d3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 40919,
      "upload_time": "2022-10-07T14:32:08",
      "upload_time_iso_8601": "2022-10-07T14:32:08.010932Z",
      "url": "https://files.pythonhosted.org/packages/4f/bd/8ed28e0a05d1648632bbf9e5c597ed1fc709b25a694fd7ac44f3ab6e7ab0/pelote-0.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}