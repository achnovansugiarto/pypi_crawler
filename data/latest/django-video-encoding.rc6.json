{
  "info": {
    "author": "Alexander Frenzel",
    "author_email": "alex@relatedworks.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-video-encoding\n\n![PyPI](https://img.shields.io/pypi/v/django-video-encoding?style=flat-square)\n![GitHub Workflow Status (master)](https://img.shields.io/github/workflow/status/escaped/django-video-encoding/Test%20&%20Lint/master?style=flat-square)\n![Coveralls github branch](https://img.shields.io/coveralls/github/escaped/django-video-encoding/master?style=flat-square)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-video-encoding?style=flat-square)\n![PyPI - License](https://img.shields.io/pypi/l/django-video-encoding?style=flat-square)\n\ndjango-video-encoding helps to convert your videos into different formats and resolutions.\n\n## Requirements\n\n* Python 3.6.1 or newer\n* ffmpeg and ffprobe\n\n## Installation\n\n1. Install django-video-encoding\n\n   ```sh\n   pip install django-video-encoding\n   ```\n\n2. Add `video_encoding` to your `INSTALLED_APPS`.\n\n## Integration\n\nAdd a `VideoField` and a `GenericRelation(Format)` to your model.\nYou can optionally store the `width`, `height` and `duration` of the video\nby supplying the corresponding field names to the `VideoField`.\n\n```python\nfrom django.contrib.contenttypes.fields import GenericRelation\nfrom django.db import models\nfrom video_encoding.fields import VideoField\nfrom video_encoding.models import Format\n\n\nclass Video(models.Model):\n   width = models.PositiveIntegerField(editable=False, null=True)\n   height = models.PositiveIntegerField(editable=False, null=True)\n   duration = models.FloatField(editable=False, null=True)\n\n   file = VideoField(width_field='width', height_field='height',\n                     duration_field='duration')\n\n   format_set = GenericRelation(Format)\n```\n\nTo show all converted videos in the admin, you should add the `FormatInline`\nto your `ModelAdmin`\n\n```python\nfrom django.contrib import admin\nfrom video_encoding.admin import FormatInline\n\nfrom .models import Video\n\n\n@admin.register(Video)\nclass VideoAdmin(admin.ModelAdmin):\n   inlines = (FormatInline,)\n\n   list_dispaly = ('get_filename', 'width', 'height', 'duration')\n   fields = ('file', 'width', 'height', 'duration')\n   readonly_fields = fields\n```\n\n\nThe conversion of the video should be done in a separate process. Typical\noptions are [django-rq] or [celery]. We will use `django-rq` in the\nfollowing example. The configuration for `celery` is similar.\n`django-video-encoding` already provides a task (`convert_all_videos`)\nfor converting all videos on a model.\nThis task should be triggered when a video was uploaded. Hence we listen to\nthe `post-save` signal and enqueue the saved instance for processing.\n\n```python\n# signals.py\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django_rq import enqueue\n\nfrom video_encoding import tasks\n\nfrom .models import Video\n\n\n@receiver(post_save, sender=Video)\ndef convert_video(sender, instance, **kwargs):\n    enqueue(tasks.convert_all_videos,\n            instance._meta.app_label,\n            instance._meta.model_name,\n            instance.pk)\n```\n\nAfter a while You can access the converted videos using\n\n```python\nvideo = Video.objects.get(...)\nfor format in video.format_set.complete().all():\n   # do something\n```\n\n[django-rq]: https://github.com/ui/django-rq\n[celery]: http://www.celeryproject.org/\n\n### Generate a video thumbnail\n\nThe backend provides a `get_thumbnail()` method to extract a thumbnail from a video.\nHere is a basic example on how to generate the thumbnail and store it in the model.\n\n```python\n# models.py\nfrom django.db import models\n\nclass Video(models.Model):\n   width = models.PositiveIntegerField(editable=False, null=True)\n   height = models.PositiveIntegerField(editable=False, null=True)\n   duration = models.FloatField(editable=False, null=True)\n\n   thumbnail = ImageField(blank=True)\n   file = VideoField(width_field='width', height_field='height',\n                     duration_field='duration')\n\n   format_set = GenericRelation(Format)\n\n\n# tasks.py\nfrom django.core.files import File\nfrom video_encoding.backends import get_backend\n\nfrom .models import Video\n\n\ndef create_thumbnail(video_pk):\n   video = Video.objects.get(pk=video_pk)\n   if not video.file:\n      # no video file attached\n      return\n\n   if video.thumbnail:\n      # thumbnail has already been generated\n      return\n\n   encoding_backend = get_backend()\n   thumbnail_path = encoding_backend.get_thumbnail(video.file.path)\n   filename = os.path.basename(self.url),\n\n   try:\n      with open(thumbnail_path, 'rb') as file_handler:\n         django_file = File(file_handler)\n         video.thumbnail.save(filename, django_file)\n      video.save()\n   finally:\n      os.unlink(thumbnail_path)\n```\n\nYou should run this method in a separate process by using `django-rq`, `celery`\nor similar) and enqueue execution from within a `post_save` signal.\n\n```python\n# signals.py\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django_rq import enqueue\n\nfrom . import tasks\nfrom .models import Video\n\n\n@receiver(post_save, sender=Video)\ndef create_thumbnail(sender, instance, **kwargs):\n    enqueue(tasks.create_thumbnail, instance.pk)\n```\n\n### Signals\n\nDuring the encoding multiple signals are emitted to report the progress.\nYou can register to the signals as described in the [Django documentation](https://docs.djangoproject.com/en/3.1/topics/signals/#connecting-to-signals-sent-by-specific-senders).\n\nThis simple example demonstrates, on how to update the \"video model\" once the convertion is finished.\n\n```python\n# apps.py\nfrom django.apps import AppConfig\n\n\nclass MyAppConfig(AppConfig):\n   # ...\n\n    def ready(self) -> None:\n      from . import signals  # register signals\n\n\n# signals.py\nfrom typing import Type\n\nfrom django.dispatch import receiver\nfrom video_encoding import signals\n\nfrom myapp.models import Video\n\n\n@receiver(signals.encoding_finished, sender=Video)\ndef mark_as_finished(sender: Type[Video], instance: Video) -> None:\n   \"\"\"\n   Mark video as \"convertion has been finished\".\n   \"\"\"\n   video.processed = True\n   video.save(update_fields=['processed'])\n```\n\n#### `signals.encoding_started`\n\nThis is sent before the encoding starts.\n\n_Arguments_  \n`sender: Type[models.Model]`: Model which contains the `VideoField`.  \n`instance: models.Model)`: Instance of the model containing the `VideoField`.\n\n#### `signals.encoding_finished`\n\nLike `encoding_started()`, but sent after the file had been converted into all formats.\n\n_Arguments_  \n`sender: Type[models.Model]`: Model which contains the `VideoField`.  \n`instance: models.Model)`: Instance of the model containing the `VideoField`.\n\n#### `signals.format_started`\n\nThis is sent before the video is converted to one of the configured formats.\n\n_Arguments_  \n`sender: Type[models.Model]`: Model which contains the `VideoField`.  \n`instance: models.Model)`: Instance of the model containing the `VideoField`.  \n`format: Format`: The format instance, which will reference the encoded video file.\n\n#### `signals.format_finished`\n\nLike `format_finished`, but sent after the video encoding process and includes whether the encoding was succesful or not.\n\n_Arguments_  \n`sender: Type[models.Model]`: Model which contains the `VideoField`.  \n`instance: models.Model)`: Instance of the model containing the `VideoField`.  \n`format: Format`: The format instance, which will reference the encoded video file.  \n`result: ConversionResult`: Instance of `video_encoding.signals.ConversionResult` and indicates whether the convertion `FAILED`, `SUCCEEDED` or was `SKIPPED`.\n\n\n## Configuration\n\n**VIDEO_ENCODING_THREADS** (default: `1`)  \nDefines how many threads should be used for encoding. This may not be supported\nby every backend.\n\n**VIDEO_ENCODING_BACKEND** (default: `'video_encoding.backends.ffmpeg.FFmpegBackend'`)  \nChoose the backend for encoding. `django-video-encoding`  only supports `ffmpeg`,\nbut you can implement your own backend. Feel free to pulish your plugin and\nsubmit a pull request.\n\n**VIDEO_ENCODING_BACKEND_PARAMS** (default: `{}`)  \nIf your backend requires some special configuration, you can specify them here\nas `dict`.\n\n**VIDEO_ENCODING_FORMATS** (for defaults see `video_encoding/config.py`)  \nThis dictionary defines all required encodings and has some resonable defaults.\nIf you want to customize the formats, you have to specify `name`,\n`extension` and `params` for each format. For example\n\n```python\nVIDEO_ENCODING_FORMATS = {\n    'FFmpeg': [\n        {\n            'name': 'webm_sd',\n            'extension': 'webm',\n            'params': [\n                '-b:v', '1000k', '-maxrate', '1000k', '-bufsize', '2000k',\n                '-codec:v', 'libvpx', '-r', '30',\n                '-vf', 'scale=-1:480', '-qmin', '10', '-qmax', '42',\n                '-codec:a', 'libvorbis', '-b:a', '128k', '-f', 'webm',\n           ],\n        },\n     ]\n```\n\n## Encoding Backends\n\n### video_encoding.backends.ffmpeg.FFmpegBackend (default)\n\nBackend for using `ffmpeg` and `ffprobe` to convert your videos.\n\n#### Options\n\n**VIDEO_ENCODING_FFMPEG_PATH**  \nPath to `ffmpeg`. If no path is provided, the backend uses `which` to\nlocate it.\n**VIDEO_ENCODING_FFPROBE_PATH**  \nPath to `ffprobe`. If no path is provided, the backend uses `which` to\nlocate it.\n\n### Custom Backend\n\nYou can implement a custom encoding backend. Create a new class which inherits from\n[`video_encoding.backends.base.BaseEncodingBackend`](video_encoding/backends/base.py).\nYou must set the property `name` and implement the methods `encode`, `get_media_info`\nand `get_thumbnail`. For further details see the reference implementation:\n[`video_encoding.backends.ffmpeg.FFmpegBackend`](video_encoding/backends/ffmpeg.py).\n\nIf you want to open source your backend, follow these steps.\n\n1. create a packages named django-video-encoding-BACKENDNAME\n2. publish your package to [pypi]\n3. Submit a pull requests with the following changes:\n\n   * add the package to `extra_requires`\n   * provide reasonable defaults for `VIDEO_ENCODING_FORMATS`\n\n[pypi]: https://pypi.python.org/pypi\n\n## Development\n\nThis project uses [poetry](https://poetry.eustace.io/) for packaging and\nmanaging all dependencies and [pre-commit](https://pre-commit.com/) to run\n[flake8](http://flake8.pycqa.org/), [isort](https://pycqa.github.io/isort/),\n[mypy](http://mypy-lang.org/) and [black](https://github.com/python/black).\n\nClone this repository and run\n\n```bash\npoetry install\npoetry run pre-commit install\n```\n\nto create a virtual enviroment containing all dependencies.\nAfterwards, You can run the test suite using\n\n```bash\npoetry run pytest\n```\n\nThis repository follows the [Conventional Commits](https://www.conventionalcommits.org/)\nstyle.\n\n### Cookiecutter template\n\nThis project was created using [cruft](https://github.com/cruft/cruft) and the\n[cookiecutter-pyproject](https://github.com/escaped/cookiecutter-pypackage) template.\nIn order to update this repository to the latest template version run\n\n```sh\ncruft update\n```\n\nin the root of this repository.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/escaped/django-video-encoding",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-video-encoding",
    "package_url": "https://pypi.org/project/django-video-encoding/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-video-encoding/",
    "project_urls": {
      "Documentation": "https://github.com/escaped/django-video-encoding/blob/master/README.md",
      "Homepage": "https://github.com/escaped/django-video-encoding",
      "Repository": "https://github.com/escaped/django-video-encoding"
    },
    "release_url": "https://pypi.org/project/django-video-encoding/1.0.0/",
    "requires_dist": [
      "django-appconf (>=1.0,<2.0)",
      "django (>=2.2)",
      "pillow (>=5.0)"
    ],
    "requires_python": ">=3.6.1,<4.0",
    "summary": "django-video-encoding helps to convert your videos into different formats and resolutions.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9044134,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62103fe4b4582bd9ea4a50745c582fd35cf17798bb5c51921bed9ae21d18a3ab",
          "md5": "d6329198c12502006cec0d2591bdc220",
          "sha256": "94877ba8fb0f66a947664c74d2834e787d62e4c747fb274201687ce136d951a1"
        },
        "downloads": -1,
        "filename": "django_video_encoding-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6329198c12502006cec0d2591bdc220",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "requires_python": null,
        "size": 16385,
        "upload_time": "2017-04-24T11:50:01",
        "upload_time_iso_8601": "2017-04-24T11:50:01.769167Z",
        "url": "https://files.pythonhosted.org/packages/62/10/3fe4b4582bd9ea4a50745c582fd35cf17798bb5c51921bed9ae21d18a3ab/django_video_encoding-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00e5ec351a673ba87cef01d5b65f540e72e8342d1e61ca230716b78f116df94f",
          "md5": "8b65e3d44d071e2d200fe83a9c2cf129",
          "sha256": "ea7e66732ee8bae23902913ded39028eecca1e1a2edb7791990f0a3ed7f6880c"
        },
        "downloads": -1,
        "filename": "django-video-encoding-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8b65e3d44d071e2d200fe83a9c2cf129",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12174,
        "upload_time": "2017-04-24T11:49:59",
        "upload_time_iso_8601": "2017-04-24T11:49:59.138548Z",
        "url": "https://files.pythonhosted.org/packages/00/e5/ec351a673ba87cef01d5b65f540e72e8342d1e61ca230716b78f116df94f/django-video-encoding-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45d4b14a2ffa85d81c26ed12eb8e37344f23ea45d26f2bd32dc63d724ca57ed1",
          "md5": "a3362d9e03751e61594669106f0d6a61",
          "sha256": "99f54c48d57f3ae0a0ce43f2eb1ae27327a10b6ae556881ccd93d6d163d473c8"
        },
        "downloads": -1,
        "filename": "django_video_encoding-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3362d9e03751e61594669106f0d6a61",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "requires_python": null,
        "size": 16539,
        "upload_time": "2018-01-21T17:14:11",
        "upload_time_iso_8601": "2018-01-21T17:14:11.617026Z",
        "url": "https://files.pythonhosted.org/packages/45/d4/b14a2ffa85d81c26ed12eb8e37344f23ea45d26f2bd32dc63d724ca57ed1/django_video_encoding-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "369256ef2586bcee52482d65b9f6945bf6b38357d431ac20bd34a797b7d96762",
          "md5": "6fc64c8e2da399d897779588adf56773",
          "sha256": "ce20b8c44b99a20ed3d2c5813ad26e9961e5bb8f2bd37f21144a3acd27e1b8a1"
        },
        "downloads": -1,
        "filename": "django_video_encoding-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fc64c8e2da399d897779588adf56773",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 28533,
        "upload_time": "2018-11-16T00:43:47",
        "upload_time_iso_8601": "2018-11-16T00:43:47.081353Z",
        "url": "https://files.pythonhosted.org/packages/36/92/56ef2586bcee52482d65b9f6945bf6b38357d431ac20bd34a797b7d96762/django_video_encoding-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac5470c8417d028e1d576903ac0e267103739a26e2e90807dc8b8a19bd996355",
          "md5": "04fdc1311643dd620f3a59756443e423",
          "sha256": "aca05aeb9e292a64831e61687905cc4b3a896ed534414bc0e388b4a15c0ae296"
        },
        "downloads": -1,
        "filename": "django-video-encoding-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04fdc1311643dd620f3a59756443e423",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 12549,
        "upload_time": "2018-11-16T00:43:44",
        "upload_time_iso_8601": "2018-11-16T00:43:44.919862Z",
        "url": "https://files.pythonhosted.org/packages/ac/54/70c8417d028e1d576903ac0e267103739a26e2e90807dc8b8a19bd996355/django-video-encoding-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "324836f20e0857933d6ec3a9813cb74df8450b48f0069aff8bd5bce26a4c0a79",
          "md5": "6f1f57284d4cde3d743222aa82f6d275",
          "sha256": "2ed0f60ff7b9c6df701ee02ffe385d9ea628512c8efa090d388612718e6dd6f9"
        },
        "downloads": -1,
        "filename": "django_video_encoding-0.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f1f57284d4cde3d743222aa82f6d275",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 30811,
        "upload_time": "2018-11-16T00:50:43",
        "upload_time_iso_8601": "2018-11-16T00:50:43.235162Z",
        "url": "https://files.pythonhosted.org/packages/32/48/36f20e0857933d6ec3a9813cb74df8450b48f0069aff8bd5bce26a4c0a79/django_video_encoding-0.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1faa139607a8172d02e6a90697fd2100c2affd703a1acc37b41ea4414117393a",
          "md5": "182c4bfa5ad6b352f5a3dd0e37da4a9f",
          "sha256": "aca2cc25a8143c400487d9d21fe86f78c67f05bf93a582fad5b25b50b5021940"
        },
        "downloads": -1,
        "filename": "django-video-encoding-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "182c4bfa5ad6b352f5a3dd0e37da4a9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 12964,
        "upload_time": "2018-11-16T00:50:41",
        "upload_time_iso_8601": "2018-11-16T00:50:41.352462Z",
        "url": "https://files.pythonhosted.org/packages/1f/aa/139607a8172d02e6a90697fd2100c2affd703a1acc37b41ea4414117393a/django-video-encoding-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c00671b23ed5485ead8b5a09d0488a5a51bcbcf22bbbb2eea350e6c458d6736",
          "md5": "098096e9481edbfcfc426bf3b42c2a97",
          "sha256": "7d430d77291628095fe94a1dff42b9f043e34e6258eab04f705981ec4d99ce2b"
        },
        "downloads": -1,
        "filename": "django_video_encoding-0.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "098096e9481edbfcfc426bf3b42c2a97",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 31404,
        "upload_time": "2018-12-04T21:56:42",
        "upload_time_iso_8601": "2018-12-04T21:56:42.534766Z",
        "url": "https://files.pythonhosted.org/packages/0c/00/671b23ed5485ead8b5a09d0488a5a51bcbcf22bbbb2eea350e6c458d6736/django_video_encoding-0.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c37e088ab12422bab6d8bf8d0042f3ea3cfe12e1a0c02b591d88984cfa30f662",
          "md5": "8fe30c5ce35adefa31714b6d3578b31c",
          "sha256": "c5b5fd8ea25e868d0cd056bfc63b9018e75f17bf01c5cc1ed0de5551365d7eb3"
        },
        "downloads": -1,
        "filename": "django-video-encoding-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8fe30c5ce35adefa31714b6d3578b31c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 13136,
        "upload_time": "2018-12-04T21:56:40",
        "upload_time_iso_8601": "2018-12-04T21:56:40.895262Z",
        "url": "https://files.pythonhosted.org/packages/c3/7e/088ab12422bab6d8bf8d0042f3ea3cfe12e1a0c02b591d88984cfa30f662/django-video-encoding-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e1e14ea39842be5f77dbefefd22a36ce2fc82fe0b772df2d9ed32d81091dbb7",
          "md5": "035132d950db2111eb770779b72502b9",
          "sha256": "a30fd6e48389d379963965102dc1ae9090394a1ad85e6d0b98091ada2dece658"
        },
        "downloads": -1,
        "filename": "django_video_encoding-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "035132d950db2111eb770779b72502b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0",
        "size": 17730,
        "upload_time": "2021-01-03T20:42:47",
        "upload_time_iso_8601": "2021-01-03T20:42:47.636020Z",
        "url": "https://files.pythonhosted.org/packages/5e/1e/14ea39842be5f77dbefefd22a36ce2fc82fe0b772df2d9ed32d81091dbb7/django_video_encoding-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fce514861849efd731b5d6320306bce835c2e831efbe795cc1afa6c92a297cc6",
          "md5": "b60469c4e7e9b07b4efd92a9dc535e45",
          "sha256": "933901782f127200ae63b03b95c846eecec98a5d75cc2db27decbc862692ed49"
        },
        "downloads": -1,
        "filename": "django-video-encoding-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b60469c4e7e9b07b4efd92a9dc535e45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0",
        "size": 17954,
        "upload_time": "2021-01-03T20:42:46",
        "upload_time_iso_8601": "2021-01-03T20:42:46.323335Z",
        "url": "https://files.pythonhosted.org/packages/fc/e5/14861849efd731b5d6320306bce835c2e831efbe795cc1afa6c92a297cc6/django-video-encoding-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e1e14ea39842be5f77dbefefd22a36ce2fc82fe0b772df2d9ed32d81091dbb7",
        "md5": "035132d950db2111eb770779b72502b9",
        "sha256": "a30fd6e48389d379963965102dc1ae9090394a1ad85e6d0b98091ada2dece658"
      },
      "downloads": -1,
      "filename": "django_video_encoding-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "035132d950db2111eb770779b72502b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1,<4.0",
      "size": 17730,
      "upload_time": "2021-01-03T20:42:47",
      "upload_time_iso_8601": "2021-01-03T20:42:47.636020Z",
      "url": "https://files.pythonhosted.org/packages/5e/1e/14ea39842be5f77dbefefd22a36ce2fc82fe0b772df2d9ed32d81091dbb7/django_video_encoding-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fce514861849efd731b5d6320306bce835c2e831efbe795cc1afa6c92a297cc6",
        "md5": "b60469c4e7e9b07b4efd92a9dc535e45",
        "sha256": "933901782f127200ae63b03b95c846eecec98a5d75cc2db27decbc862692ed49"
      },
      "downloads": -1,
      "filename": "django-video-encoding-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b60469c4e7e9b07b4efd92a9dc535e45",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1,<4.0",
      "size": 17954,
      "upload_time": "2021-01-03T20:42:46",
      "upload_time_iso_8601": "2021-01-03T20:42:46.323335Z",
      "url": "https://files.pythonhosted.org/packages/fc/e5/14861849efd731b5d6320306bce835c2e831efbe795cc1afa6c92a297cc6/django-video-encoding-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}