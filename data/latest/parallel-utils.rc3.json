{
  "info": {
    "author": "Fernando Enzo Guarini",
    "author_email": "fernandoenzo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# parallel-utils\n\n[![PyPI](https://img.shields.io/pypi/v/parallel-utils?label=latest)](https://pypi.org/project/parallel-utils/)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/parallel-utils)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/parallel-utils)\n![PyPI - Status](https://img.shields.io/pypi/status/parallel-utils)\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/fernandoenzo/parallel-utils)\n[![GitHub last commit](https://img.shields.io/github/last-commit/fernandoenzo/parallel-utils)](https://github.com/fernandoenzo/parallel-utils)\n[![Build Status](https://img.shields.io/travis/com/fernandoenzo/parallel-utils?label=tests)](https://travis-ci.com/fernandoenzo/parallel-utils)\n![Maintenance](https://img.shields.io/maintenance/yes/2022)\n\nThis library implements a class [**Monitor**](https://en.wikipedia.org/wiki/Monitor_(synchronization)), as defined by [**Per\n Brinch Hansen**](https://en.wikipedia.org/wiki/Per_Brinch_Hansen) and [**C.A.R. Hoare**](https://en.wikipedia.org/wiki/Tony_Hoare),\n for **synchronization and concurrent management of threads and processes in Python**. It also provides **other\n  functions to ease the creation and collection of results for both threads and processes**. \n\n## Table of contents\n\n<!--ts-->\n  * [Installation](#installation)\n  * [Usage](#usage)\n     * [Monitor class](#monitor-class)\n        * [First example](#first-example)\n           * [@synchronized](#synchronized)\n        * [Second example](#second-example)\n           * [@synchronized_priority](#synchronized_priority)\n     * [StaticMonitor class](#staticmonitor-class)\n     * [Launching threads and processes](#launching-threads-and-processes)\n  * [Contributing](#contributing)\n  * [License](#license)\n<!--te-->\n\n## Installation\n\nUse the package manager [**pip**](https://pip.pypa.io/en/stable/) to install **parallel-utils**.\n\n```bash\npip3 install parallel-utils\n```\n## Usage\n\n### Monitor class\n\nThere are two implementations of the `Monitor` class: one is located in the `thread` module and the other in the \n`process` module of `parallel-utils`.\n\nAlthough it's safe to always use the `Monitor` class located in the `process` module, even if you're working only with\n threads, you will get slightly better performance when using the one located in the `thread` module. Therefore, it is\n  recommended to use each one for what it is intended for.\n\nFrom now on, for ease of reading, every time we say _thread_ we will also be including _process_ unless stated otherwise.\n\nAlso, from now until the end of this section, when we say _function_, we will not only refer to \"whole\" functions but we\n will also include pieces of code contained within a function.\n\nA monitor essentially does two things:\n1. It controls the maximum number of threads that can simultaneously access a function.\n\n2. It organizes a set of functions so that they follow a strict order in their execution, regardless of the thread\n from which they are called.\n\n\n#### First example\n> 1. It allows controlling the maximum number of threads that can simultaneously access a function.\n\nTo achieve this first goal, the Monitor class includes the following couple of functions:\n\n```python\ndef lock_code(self, uid: Union[str, int], max_threads: int = 1)\n\ndef unlock_code(self, uid: Union[str, int])\n```\n\nThe first one, `lock_code`, must be called at the beginning of the piece of code for which we want to control the maximum\n number of threads that can access it simultaneously.\n\nThe `unlock_code` function sets the limit of the scope of the `lock_code` function.\n\nTo do this, both functions must share a same unique identifier (`uid`), that can be either a string or\n an integer number. Let's see an example:\n\n```python\nimport concurrent.futures\nfrom time import sleep\nfrom parallel_utils.thread import Monitor, create_thread\n\nm = Monitor()\n\ndef print_and_sleep():\n    print('Hello')\n    m.lock_code('example', max_threads=1)\n    sleep(2)\n    m.unlock_code('example')\n    print('Goodbye')\n\nth1 = create_thread(print_and_sleep)\nth2 = create_thread(print_and_sleep)\nth3 = create_thread(print_and_sleep)\n\nconcurrent.futures.wait([th1, th2, th3])\n```\n\nThe example shown above takes 6 seconds to finalize its execution, since we have a `lock_code` that only allows one thread\n each time to execute the `sleep` function, and we are launching three threads.\n\nIf we set the `lock_code` to allow up to three threads at the same time, then the code only needs 2 seconds to finalize\n its execution, since all the three threads can make the `sleep` blocking call at the same time.\n\nWe'll se more about the `create_thread` and `create_process` functions later.\n\nThe last line, [`concurrent.futures.wait`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait)\n is a blocking call that waits until all the three threads finish running.\n\n#### @synchronized\n\nIn the previous example, we just were protecting the piece of code wrapping the `sleep` call. But, what if we want to wrap\n the entire function?\n\nOf course we could call `lock_code` on the first line, and `unlock_code` on the last one, and that would work\n just fine. Like this:\n\n ```python\ndef print_and_sleep():\n    m.lock_code('example', 1)\n    print('Hello')\n    sleep(2)\n    print('Goodbye')\n    m.unlock_code('example')\n```  \n\nBut, to simplify life for the programmer and for improving readability, there's some syntactic sugar we could use. And this is\n where the `@synchronized` decorator comes in and turns the above code into this:\n\n```python\nfrom parallel_utils.thread import synchronized\n\n@synchronized()\ndef print_and_sleep():\n    print('Hello')\n    sleep(2)\n    print('Goodbye')\n```\n\nLet's see the decorator prototype:\n\n```python\n@synchronized(max_threads: int = 1)\n```\n\nAs you can see, the `@synchronized` decorator doesn't need an identifier, and by default only allows one thread to enter the\n function at the same time. However, we can override that default behavior with the optional `max_threads` argument.\n\nIf we want, for example, to allow up to two threads to enter the function at the same time, we only need to write:\n\n```python\n@synchronized(2)\ndef print_and_sleep():\n    print('Hello')\n    sleep(2)\n    print('Goodbye')\n```\n\nNote that **this decorator has its own namespace for uids**, which is completely independent of the namespace of the\n `lock_code` and `unlock_code` functions.\n\n#### Second example\n\n> &nbsp;2. It organizes a set of functions so that they follow a strict order in their execution, regardless of the thread\n from which they are called.\n\nTo achieve the second goal, the Monitor class includes the following couple of functions:\n\n```python\ndef lock_priority_code(uid: Union[str, int], order: int = 1, total: int = 1)\n\ndef unlock_code(uid: Union[str, int], order: int)\n```\n\nYes, the `unlock_code` function is the same as before. And these two functions work quite similarly to the previous example, \n wrapping the code snippet that we want to control and sharing the same `uid` between them.\n\nThe main difference is that, in this case, we have to specify the `order` in which the code snippet will run and the `total`\n number of functions to sync with the supplied `uid`.\n\nLet's see an example:\n\n```python\nfrom time import sleep\nfrom parallel_utils.process import Monitor, create_process\n\nm = Monitor()\n\ndef say_hello(name):\n    print('Entering hello')\n    m.lock_priority_code('id1', order=1, total=2)\n    print(f'Hello {name}!')\n    m.unlock_code('id1')\n\ndef say_goodbye(name):\n    print('Entering goodbye')\n    m.lock_priority_code('id1', order=2)\n    print(f'Goodbye {name}!')\n    m.unlock_code('id1')\n\ncreate_process(say_goodbye, 'Peter')\nsleep(3)\ncreate_process(say_hello, 'Peter')\n```\n\nthis example will always print:\n\n```\nEntering goodbye\n. . . (3 secs after)\nEntering hello\nHello Peter!\nGoodbye Peter!\n```\n\neven if you start the `say_goodbye` function long before the `say_hello` function. This is because the snippet in `say_goobye` has\n not the first turn, but the second, so it will make a blocking call and wait until `say_hello` calls `unlock_code`.\n\nThe `total` argument must be supplied **at least once** in any of the calls to `lock_priority_code`.\n\nWith these two functions, you can sort the execution of as many code snippets as you need.\n\nNote that `lock_code` and `lock_priority_code` share the same namespace for uids. \n\n#### @synchronized_priority\n\nJust like before, there is a decorator that we can use to wrap a complete function and set its relative order of execution\n with respect to others.\n\nThis is its prototype:\n\n```python\n@synchronized_priority(uid: Union[str, int], order: int = 1, total: int = None)\n```\n\nWith it, the last example would look like this:\n\n```python\nfrom parallel_utils.process import create_process, synchronized_priority\n\n@synchronized_priority('id1', order=1)\ndef say_hello(name):\n    print('Entering hello')\n    print(f'Hello {name}!')\n\n@synchronized_priority('id1', order=2, total=2)\ndef say_goodbye(name):\n    print('Entering goodbye')\n    print(f'Goodbye {name}!')\n\ncreate_process(say_goodbye, 'Peter')\nsleep(3)\ncreate_process(say_hello, 'Peter')\n```\n\nNote that this time we've provided the `total` argument in the second call instead of the first one. Never mind. You\n could even supply it in both.\n\nThe above example will always print:\n\n```\n. . . (sleeps 3 secs)\nEntering hello\nHello Peter!\nEntering goodbye\nGoodbye Peter!\n```\n\nNote that **this decorator has its own namespace for uids**, which is completely independent of the namespace of the\n `lock_priority_code` and `unlock_code` functions.\n\n### StaticMonitor class\n\nThe `StaticMonitor` class has exactly the same methods as the `Monitor` class. And it also has two implementations: one can\n be imported from `parallel_utils.process` and the other can be imported from `parallel_utils.thread`.\n\nThis class saves you the need to instantiate a `Monitor`, store it in a variable, and then use it. Instead of that, you can\n just call its methods like this:\n\n```python\nfrom parallel_utils.process import StaticMonitor\n\ndef say_hello(name):\n    print('Entering hello')\n    StaticMonitor.lock_priority_code('id1', order=1, total=2)\n    print(f'Hello {name}!')\n    StaticMonitor.unlock_code('id1')\n```\n\nNote that this class, since it is static, has a unique namespace for uids that is shared among all calls to its methods. \n\n### Launching threads and processes\n\nThis library includes two very useful functions to quickly start processes and threads, and retrieve their results, which we\n have already seen in our examples:\n\n```python\ndef create_thread(func: Callable, *args: Any, **kwargs: Any) -> Future\n\ndef create_process(func: Callable, *args: Any, **kwargs: Any) -> Future\n``` \n\nLike the rest of classes and objects in this library, they are located in `parallel_utils.thread` and\n `parallel_utils.process` respectively.\n\nTheir first argument is a Callable that, in turn, is called with `*args` and `**kwargs`.\n\nThey both return a [`Future`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future)\n object, which encapsulates the asynchronous execution of a callable.\n\nAlthough the [`Future`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future) class has\n several interesting methods that you should read in the official documentation, by far the most interesting one is probably\n  **the `result()` method, which makes a blocking call until the thread finishes and returns**.\n\nAnother interesting feature of these two methods is that **you don't need to worry about zombie processes anymore** due to a\n forgotten `join()` call, since all this logic is handled automatically. Just focus on making calls and retrieving results.\n\nIn this example, we compute two factorials, each one in a different process, to bypass the Python GIL and have real\n parallelism, and then we retrieve and print their results:\n\n```python\nfrom parallel_utils.process import create_process\n\ndef factorial(n):\n    res = 1\n    for i in range(1,n+1):\n        res *= i\n    return res\n\nf1 = create_process(factorial, 5)\nf2 = create_process(factorial, 7)\n\nprint(f1.result(), f2.result())\n``` \n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\n![PyPI - License](https://img.shields.io/pypi/l/private-attrs)\n\nThis library is licensed under the\n [GNU General Public License v3 or later (GPLv3+)](https://choosealicense.com/licenses/gpl-3.0/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/fernandoenzo/parallel-utils/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fernandoenzo/parallel-utils/",
    "keywords": "concurrency concurrent concurrent-programming distributed library lock locker locker-manager module monitor multiprocess multiprocessing multithreading parallel parallelism process semaphore sync synchronize synchronization thread threading",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parallel-utils",
    "package_url": "https://pypi.org/project/parallel-utils/",
    "platform": null,
    "project_url": "https://pypi.org/project/parallel-utils/",
    "project_urls": {
      "Download": "https://github.com/fernandoenzo/parallel-utils/",
      "Homepage": "https://github.com/fernandoenzo/parallel-utils/",
      "Source": "https://github.com/fernandoenzo/parallel-utils/"
    },
    "release_url": "https://pypi.org/project/parallel-utils/1.2/",
    "requires_dist": [
      "private-attrs"
    ],
    "requires_python": ">=3.9",
    "summary": "This library implements a class Monitor, as defined by Per Brinch Hansen and C.A.R. Hoare, for synchronization and concurrent management of threads and processes in Python. It also provides other functions to ease the creation and collection of results for both threads and processes.",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14534397,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0baa2a55bac6b4953d6d5a0eb3551995672405f07e62dfab5f17bea3d3d34bc3",
          "md5": "9961c7640b2b44033434a02b22eba08e",
          "sha256": "5f2da17b03c77921a61dfb91fabd24d5d787b0d69c79740b1aaf078ab7863929"
        },
        "downloads": -1,
        "filename": "parallel_utils-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9961c7640b2b44033434a02b22eba08e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26979,
        "upload_time": "2020-09-07T09:25:23",
        "upload_time_iso_8601": "2020-09-07T09:25:23.056368Z",
        "url": "https://files.pythonhosted.org/packages/0b/aa/2a55bac6b4953d6d5a0eb3551995672405f07e62dfab5f17bea3d3d34bc3/parallel_utils-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adcef21069441c13a96cb18a41f398498acf39f3ed1b11e4a6014b24dd48d076",
          "md5": "263dd8e83458ada0b8d473e38c1bac6d",
          "sha256": "dd87779b0ce9b0ec077abef3398b48b25e1b5feca51bde5aefd2066af0e21995"
        },
        "downloads": -1,
        "filename": "parallel-utils-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "263dd8e83458ada0b8d473e38c1bac6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14429,
        "upload_time": "2020-09-07T09:25:24",
        "upload_time_iso_8601": "2020-09-07T09:25:24.571915Z",
        "url": "https://files.pythonhosted.org/packages/ad/ce/f21069441c13a96cb18a41f398498acf39f3ed1b11e4a6014b24dd48d076/parallel-utils-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "428c8ab168b4ac54b0350b142b7c8424af166276eadc2f74a70dc91d08dcb9b8",
          "md5": "8550c9e5f73b143554a7c6f7715ad0a7",
          "sha256": "b73816160e624d51a00f2bd06a2c74dd976a99526ec3e9e78c9b225c7979124f"
        },
        "downloads": -1,
        "filename": "parallel_utils-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8550c9e5f73b143554a7c6f7715ad0a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27004,
        "upload_time": "2022-02-06T11:26:40",
        "upload_time_iso_8601": "2022-02-06T11:26:40.494271Z",
        "url": "https://files.pythonhosted.org/packages/42/8c/8ab168b4ac54b0350b142b7c8424af166276eadc2f74a70dc91d08dcb9b8/parallel_utils-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c3836c41fff6e1205f39f5b3bc3583fd7be15601d685e700399ac713b8878e4",
          "md5": "263c3a3af20ab6e2befa9b0519ccb487",
          "sha256": "2a9440efd451504c802e5384349d8f348f1dbe1d180914a62dcd025d4b206fb0"
        },
        "downloads": -1,
        "filename": "parallel-utils-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "263c3a3af20ab6e2befa9b0519ccb487",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24963,
        "upload_time": "2022-02-06T11:26:42",
        "upload_time_iso_8601": "2022-02-06T11:26:42.332099Z",
        "url": "https://files.pythonhosted.org/packages/7c/38/36c41fff6e1205f39f5b3bc3583fd7be15601d685e700399ac713b8878e4/parallel-utils-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f865eb8ff2b3a9081efb5e67e45d6a229f729762983c8b671655e2db7d1cd53",
          "md5": "89f4fcaf16dda12d0ae2ac3c2e96f552",
          "sha256": "aa2ca88d3bdc311806aedd6700d209ecce5baddac3a238784e3c185181be2a2c"
        },
        "downloads": -1,
        "filename": "parallel-utils-1.2.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "89f4fcaf16dda12d0ae2ac3c2e96f552",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 16657,
        "upload_time": "2022-07-24T21:30:15",
        "upload_time_iso_8601": "2022-07-24T21:30:15.064434Z",
        "url": "https://files.pythonhosted.org/packages/0f/86/5eb8ff2b3a9081efb5e67e45d6a229f729762983c8b671655e2db7d1cd53/parallel-utils-1.2.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1b19d3540f54f90a7d1a18593956604495c2b6bb977fb5e70521f468ffe81b3",
          "md5": "68cef081fece79992d27ce4abe585d89",
          "sha256": "e9899d6b63b001990fe5f17a64a97e587fcb9b28ae1c92b82205726e3aac59f0"
        },
        "downloads": -1,
        "filename": "parallel_utils-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68cef081fece79992d27ce4abe585d89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 26904,
        "upload_time": "2022-07-24T21:30:12",
        "upload_time_iso_8601": "2022-07-24T21:30:12.566318Z",
        "url": "https://files.pythonhosted.org/packages/f1/b1/9d3540f54f90a7d1a18593956604495c2b6bb977fb5e70521f468ffe81b3/parallel_utils-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f865eb8ff2b3a9081efb5e67e45d6a229f729762983c8b671655e2db7d1cd53",
        "md5": "89f4fcaf16dda12d0ae2ac3c2e96f552",
        "sha256": "aa2ca88d3bdc311806aedd6700d209ecce5baddac3a238784e3c185181be2a2c"
      },
      "downloads": -1,
      "filename": "parallel-utils-1.2.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "89f4fcaf16dda12d0ae2ac3c2e96f552",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 16657,
      "upload_time": "2022-07-24T21:30:15",
      "upload_time_iso_8601": "2022-07-24T21:30:15.064434Z",
      "url": "https://files.pythonhosted.org/packages/0f/86/5eb8ff2b3a9081efb5e67e45d6a229f729762983c8b671655e2db7d1cd53/parallel-utils-1.2.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1b19d3540f54f90a7d1a18593956604495c2b6bb977fb5e70521f468ffe81b3",
        "md5": "68cef081fece79992d27ce4abe585d89",
        "sha256": "e9899d6b63b001990fe5f17a64a97e587fcb9b28ae1c92b82205726e3aac59f0"
      },
      "downloads": -1,
      "filename": "parallel_utils-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68cef081fece79992d27ce4abe585d89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 26904,
      "upload_time": "2022-07-24T21:30:12",
      "upload_time_iso_8601": "2022-07-24T21:30:12.566318Z",
      "url": "https://files.pythonhosted.org/packages/f1/b1/9d3540f54f90a7d1a18593956604495c2b6bb977fb5e70521f468ffe81b3/parallel_utils-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}