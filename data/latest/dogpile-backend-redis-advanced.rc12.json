{
  "info": {
    "author": "Jonathan Vanasco",
    "author_email": "jonathan@findmeon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "![Python package](https://github.com/jvanasco/dogpile_backend_redis_advanced/workflows/Python%20package/badge.svg)\n\nThis package supports Python2 and Python3\n\ndogpile_backend_redis_advanced\n==============================\n\nThis is a plugin for the **dogpile.cache** system that offers some alternatives\nto the standard **Redis** datastore implementation.\n\nTwo new backends are offered:\n\n| backend | description |\n| --- | --- |\n| `dogpile_backend_redis_advanced` | extends the `dogpile.cache.redis` backend and allows for custom pickling overrides |\n| `dogpile_backend_redis_advanced_hstore` | extends `dogpile_backend_redis_advanced` and allows for some specific hstore operations |\n\nThere is a negligible performance hit in `dogpile_backend_redis_advanced_hstore`,\nas cache keys must be inspected to determine if they are an hstore or not -- and\nthere are some operations involved to coordinate values.\n\nAdditionally, some behavior is changed:\n\n* The constructor now accepts a ``lock_class`` argument, which can be used to\n  wrap a mutex and alter how releases are handled.  This can be necessary if you\n  have a distributed lock and timeout or flush issues (via LRU or otherwise).\n  A lock disappearing in Redis will raise a fatal exception under the standard\n  Redis backend.\n* The constructor now accepts a ``lock_prefix`` argument, which can be used to\n  alter the prefix used for locks.  The standard Redis backend uses `_lock` as\n  the prefix -- which can be hard to read or isolate for tests.  One might want\n  to use \"\\_\" as the lock prefix (so that `keys \"\\_*\"` will show all locks).\n\nPurpose:\n--------\n\nMike Bayer's **dogpile.cache** is an excellent package for general purpose\ndevelopment.\n\nThe system offers 3 key features:\n\n1. Elegant read-through caching functionality.\n2. A locking mechanism that ensures only the first request of a cache-miss will\n   create the resource (turning the rest into consumers of the first-requestor's\n   creation).\n3. Integrated cache expiry against time and library versions.\n\n\nUnfortunately, the integrated cache expiry feature comes at a cost -- objects\nare wrapped into a tuple with some metadata and pickled before hitting the\ndatastore.\n\nThe additional metadata or pickle format may not be needed or wanted.  Look how\nthe size of \"a\" grows by the time it becomes something passed off to Redis:\n\n\n| type  | example |\n| ----- | ------- |\n| string                        | a                                                                                                               |\n| pickle(string)                | S'a'\\np0\\n.                                                                                                     |\n| CachedValue(string)           | ('a', {'ct': 1471113698.76127, 'v': 1})                                                                         |\n| pickle(CachedValue(string) )  | cdogpile.cache.api\\nCachedValue\\np0\\n(S'a'\\np1\\n(dp2\\nS'ct'\\np3\\nF1471113698.76127\\nsS'v'\\np4\\nI1\\nstp5\\nRp6\\n. |\n\nBy adding in hooks for custom serializers, this backend lets developers choose\nbetter ways to cache data.  \n\nYou may want a serializer that doesn't care about the expiry of cached data, so\njust uses simpler strings.:\n\n| type  | example 1 | example 2 |\n| ----- | --------- | --------- |\n| string                                | a                         | mellifluous                         |\n| json.dumps(string)                    | \"a\"                       | \"mellifluous\"                       |\n| msgpack.packb(string)                 | \\xa1a                     | \\xabmellifluous                     |\n\nOr, you may want to fool **dogpile.cache** by manipulating what the cached is. \nInstead of using a Python dict, of time and API version, you might just track\nthe time but only to the second. \n\n| type | example 1 | example 2 |\n| ---- | --------- | --------- |\n| AltCachedValue(string)                | ('a', 1471113698)         | ('mellifluous', 1471113698)         |\n| json.dumps(AltCachedValue(string))    | '[\"a\", 1471113698]'       | '[\"mellifluous\", 1471113698]'       |\n| msgpack.packb(AltCachedValue(string)) | '\\x92\\xa1a\\xceW\\xafi\\xe2' | '\\x92\\xabmellifluous\\xceW\\xafi\\xe2' |\n\n\nThis is how **dogpile.cache** stores \"a\":\n\n\tcdogpile.cache.api\\nCachedValue\\np0\\n(S'a'\\np1\\n(dp2\\nS'ct'\\np3\\nF1471113698.76127\\nsS'v'\\np4\\nI1\\nstp5\\nRp6\\n.\n\nThis package lets us cache a raw string and trick **dogpile.cache** into\nthinking our data parcel is \"timely\":\n\n\ta\n\nOr, we include a simpler version of the time, along with a different serializer.\n\nThis packet of data and time:\n\n\t[\"a\", 1471113698]\n\nIs then serialized to:\n\n\t\\x92\\xa1a\\xceW\\xafi\\xe2\n\t\nIf you cache lots of big objects, **dogpile.cache**'s overhead is minimal -- but\nif you have a cache that works for mapping short bits of text, like ids to\nusernames (and vice-versa) you will see considerable savings.\n\nAnother way to make **Redis** more efficient is to use hash storage.\n\nLet's say you have a lot of keys that look like this:\n\n\tregion.set(\"user-15|posts\", x)\n\tregion.set(\"user-15|friends\", y)\n\tregion.set(\"user-15|profile\", z)\n\tregion.set(\"user-15|username\", z1)\n\nYou could make **Redis** a bit more efficient by using hash storage, in which\nyou have 1 key with multiple fields:\n\n\tregion.hset(\"user-15\", {'posts': x,\n\t\t\t\t\t\t\t'friends', y,\n\t\t\t\t\t\t\t'profile', z,\n\t\t\t\t\t\t\t'username', z1,\n\t\t\t\t\t\t\t})\n\nRedis tends to operate much more efficiently in this situation (more below),\nbut you can also save some bytes by not repeating the key prefix. Instagram's\nengineering team has a great article on this\n[Instagram Engineering](http://instagram-engineering.tumblr.com/post/12202313862/storing-hundreds-of-millions-of-simple-key-value).\n\n90% of **dogpile.cache** users who choose **Redis** will never need this\npackage.  A decent number of other users with large datasets have been trying to\nsqueeze every last bit of memory and performance out of their machines -- and\nthis package is designed to facilitate that.\n\n\nUsage:\n------\n\nmyfile.py\n\n    # importing will register the plugins\n    import dogpile_backend_redis_advanced\n\nthen simply configure **dogpile.cache** with `dogpile_backend_redis_advanced` or \n`dogpile_backend_redis_advanced_hstore` as the backend.\n\n\nRedisAdvancedBackend\n--------------------\n\nTwo new configuration options are offered to specify custom serializers via \n`loads` and `dumps`.  The default selection is to use **dogpile.cache**'s choice\nof  `pickle`.\n\nThis option was designed to support `msgpack` as the serializer:\n\n    import msgpack\n    from dogpile.cache.api import CachedValue\n\n    def msgpack_loads(value):\n        \"\"\"pickle maintained the `CachedValue` wrapper of the tuple\n           msgpack does not, so it must be added back in.\n           \"\"\"\n        value = msgpack.unpackb(value, use_list=False)\n        return CachedValue(*value)\n\n    region = make_region().configure(\n        arguments= {'loads': msgpack_loads,\n                    'dumps': msgpack.packb,\n                    }\n        )\n\n\nOne can also abuse/misuse **dogpile.cache** and defer all cache expiry to\n**Redis** using this serializer hook.\n\n**dogpile.cache** doesn't cache your value as-is, but wraps it in a CachedValue\nobject which contains an API version and a timestamp for the expiry.\n\nThis format is necessary for most cache backends, but **Redis** offers the\nability to handle expiry in the cloud.  By using the slim msgpack format and\nonly storing the payload, you can drastically cut down the bytes needed to store\nthis information.\n\nThis approach SHOULD NOT BE USED by 99% of users.  However, if you do aggressive\ncaching, this will allow you to leverage **dogpile.cache**'s excellent locking\nmechanism for handling read-through caching while slimming down your cache size\nand the traffic on-the-wire.  \n\n    import time\n    from dogpile.cache.api import CachedValue\n    from dogpile.cache.region import value_version\n    import msgpack\n\n    def raw_dumps(value):\n        ''''pull the payload out of the CachedValue and serialize that\n        '''\n        value = value.payload\n        value = msgpack.packb(value)\n        return value\n\n    def raw_loads(value):\n        ''''unpack the value and return a CachedValue with the current time\n        '''\n        value = msgpack.unpackb(value, use_list=False)\n        return CachedValue(\n            value,\n            {\n                \"ct\": time.time(),\n                \"v\": value_version\n            })\n\n    region = make_region().configure(\n        arguments= {'loads': msgpack_loads,\n                    'dumps': msgpack.packb,\n                    'redis_expiration_time': 1,\n                    }\n        )\n\n\nRedisAdvancedHstoreBackend\n--------------------------\n\nThis backend extends **RedisAdvancedBackend** with drop-in support for Hash\nstorage under Redis.\n\n* If key names are tuples, they will be treated as hash operations on Redis.\n* By setting `redis_expiration_time_hash` to a boolean value, you can control\n  how expiry times work within Redis\n\nThis backend has a slight, negligible, overhead:\n\n* All key operations (`get`/`get_multi`/`set`/`set_multi`/`delete`) require an\n  inspection of keys.\n* `get_multi` requires the order of keys to be tracked, and results from\n  multiple `get`/`hget` operations are then correlated.\n* `set_multi` requires the mapping to be analyzed and bucketed into different\n  hmsets\n\n`redis_expiration_time_hash` allows some extended management of expiry in Redis.\nBy default it is set to `None`.\n\n* `False` - ignore hash expiry. (never set a TTL in Redis)\n* `None` - set `redis_expiration_time` on new hash creation only. This requires\n  a check to the **Redis** key before a set.\n* `True` - unconditionally set `redis_expiration_time` on every hash key\n  set/update.\n\nPlease note the following:\n\n* **Redis** manages the expiry of hashes on the key, making it global for all\n  fields in the hash.\n* **Redis** does not support setting a TTL on hashes while doing another\n  operation.  TTL must be set via another request.\n* If `redis_expiration_time_hash` is set to `True`, there will be 2 calls to\n  the **Redis** API for every key: `hset` or `hmset` then `expires`.\n* If `redis_expiration_time_hash` is set to `None`, there will be 2-3 calls to\n  the **Redis** API for every key: `exists`, `hset` or `hmset`, and possibly\n  `expires`.\n\n\nMemory Savings and Suggested Usage\n--------------------------------------\n\nRedis is an in-memory datastore that offers persistence -- optimizing storage is\nincredibly important because the entire set must be held in-memory.\n\n### Example Demo\n\nThe attached `demo.py` (results in `demo.txt`) shows some potential approaches\nto caching and hashing by priming a **Redis** datastore with some possible\nstrategies of a single dataset.\n\nIt's worth looking at `demo.txt` to see how the different serializesr encode the\ndata -- sample keys are pulled for each format.\n\n| test                     | memory bytes | memory human | relative | ttl on Redis? | ttl in dogpile? | backend                                 | encoder |\n| ------------------------ | ------------ | ------------ | -------- | ------------- | --------------- | --------------------------------------- | ------- |\n| region_redis             | 249399504    | 237.85M      | 0%       | Y             | Y               | `dogpile.cache.redis`                   | pickle  |\n| region_json              | 222924496    | 212.60M      | 89.38%   | Y             | Y               | `dogpile_backend_redis_advanced`        | json    |\n| region_msgpack           | 188472048    | 179.74M      | 75.57%   | Y             | Y               | `dogpile_backend_redis_advanced`        | msgpack |\n| region_redis_local       | 181501200    | 173.09M      | 72.78%   | -             | Y               | `dogpile.cache.redis`                   | pickle  |\n| region_json_raw          | 171554880    | 163.61M      | 68.79%   | Y             | -               | `dogpile_backend_redis_advanced`        | json    |\n| region_msgpack_raw       | 170765872    | 162.86M      | 68.47%   | Y             | -               | `dogpile_backend_redis_advanced`        | msgpack |\n| region_json_local        | 162612752    | 155.08M      | 65.20%   | -             | Y               | `dogpile_backend_redis_advanced`        | json    |\n| region_json_local_int    | 128648576    | 122.69M      | 57.71%   | -             | Y, `int(time)`  | `dogpile_backend_redis_advanced`        | json    |\n| region_msgpack_local     | 128160048    | 122.22M      | 51.39%   | -             | Y               | `dogpile_backend_redis_advanced`        | msgpack |\n| region_msgpack_local_int | 126938576    | 121.06M      | 50.89%   | -             | Y, `int(time)`  | `dogpile_backend_redis_advanced`        | msgpack |\n| region_json_raw_local    | 111241280    | 106.09M      | 44.60%   | -             | -               | `dogpile_backend_redis_advanced`        | json    |\n| region_msgpack_raw_local | 110455968    | 105.34M      | 44.29%   | -             | -               | `dogpile_backend_redis_advanced`        | msgpack |\n| region_msgpack_raw_hash  | 28518864     | 27.20M       | 11.44%   | Y, only keys  | -               | `dogpile_backend_redis_advanced_hstore` | msgpack |\n| region_json_raw_hash     | 24836160     | 23.69M       |  9.96%   | Y, only keys  | -               | `dogpile_backend_redis_advanced_hstore` | json    |\n\nNotes:\n\n* the `_local` variants do not set a TTL on Redis\n* the `_raw` variants strip out the dogpile CachedValue wrapper and only store\n  the payload\n* the `_msgpack` variants use msgpack instead of pickle \n* the `_json` variants use json instead of pickle \n* the `_int` variant applies int() to the dogpile timestamp, dropping a few\n  bytes per entry\n\nWait WHAT? LOOK AT `region_msgpack_raw_hash` and `region_json_raw_hash` - that's\na HUGE savings!\n\nYes.\n\nThe HSTORE has considerable savings due to 2 reasons:\n\n* **Redis** internally manages a hash much more effectively than keys.\n* **Redis** will only put an expiry on the keys (buckets), not the hash fields\n\nHSTORE ends up being a much tighter memory usage for this example set, as we're\nsetting 100 fields in each key.  The savings would not be so severe if you were\nsetting 5-10 fields per key\n\nNote that `region_msgpack_raw_local` and `region_json_raw_local` should not be\nused unless you're running a LRU -- they have no expiry.\n\n### Assumptions\n\nThis demo is assuming a few things that are not tested here (but there are\nplenty of benchmarks on the internet showing this):\n\n* msgpack is the fastest encoder for serializing and deserializing data.\n* json outperforms cpickle on serializing; cpickle outperforms json on\n  deserializing data.\n\nHere are some benchmarks and links:\n\n* https://gist.github.com/justinfx/3174062\n* https://gist.github.com/cactus/4073643\n* http://www.benfrederickson.com/dont-pickle-your-data/\n\n#### Caveats\n\nIn the examples above, we deal with (de)serializing simple, native, datatypes:\n`string`, `int`, `bool`, `list`, `dict`, `tuple`.  For these datatypes, msgpack\nis both the smallest datastore and the fastest performer.\n\nIf you need to store more complex types, you will need to provide a custom\nencoder/decoder and will likely suffer a performance hit on the speed of\n(de)serialization.  Unfortunately, the more complex data types that require\ncustom encoding/decoding include standard `datetime` objects, which can be\nannoying.\n\nThe file `custom_serializer.py` shows an example class for handling\n(de)serialization -- `MsgpackSerializer`.  Some common `datetime` formats are\nsupported; they are encoded as a specially formatted dict, and decoded\ncorrespondingly.  A few tricks are used to shave off time and make it roughly\ncomparable to the speed of pickle.\n\n\n### Key Takeaways\n\n* this was surprising - while the differences are negligible on small datasets,\n  using **Redis** to track expiry on long data-sets is generally not a good\n  idea(!). **dogpile.cache** tracks this data much more efficiently.  you can\n  enable an LRU policy in **Redis** to aid in expiry.\n* msgpack and json are usually fairly comparable in size [remember the\n  assumption that msgpack is better for speed].\n* reformatting the **dogpile.cache** metadata (replacing a `dict` an `int()` of\n  the expiry) saves a lot of space under JSON when you have small payloads. the\n  strings are a fraction of the size.\n* msgpack is really good with nested data structures \n\nThe following payloads for `1` are strings:\n\n    region_json_local =        '[10, {\"v\": 1, \"ct\": 1471113698.76127}]'\n    region_json_local_int =    '[10, 1471113753]'\n    region_msgpack_local =     '\\x92\\n\\x82\\xa1v\\x01\\xa2ct\\xcbA\\xd5\\xeb\\x92\\x83\\xe9\\x97\\x9a'\n    region_msgpack_local_int = '\\x92\\n\\xceW\\xafct'\n\n\n### So what should you use?\n\nThere are several tradeoffs and concepts to consider:\n\n1. Do you want to access information outside of **dogpile.cache** (in Python\n   scripts, or even in another language)\n2. Are you worried about the time to serialize/deserialize?  are you write-heavy\n   or read-heavy?\n3. Do you want the TTL to be handled by **Redis** or within Python?\n4. What are your expiry needs?  what do your keys look like?  there may not be\n   any savings possible.  but if you have a lot of recycled prefixes, there\n   could be.\n5. What do your values look like?  How many are there?\n\nThis test uses a particular dataset, and differences are inherent to the types\nof data and keys. Using the strategies from the `region_msgpack_raw_hash` on\nour production data has consistently dropped a 300MB **Redis** imprint to the\n60-80MB range.\n\nThe **Redis** configuration file is also enclosed. The above tests are done with\n**Redis** compression turned on (which is why memory size fluctuates in the full\ndemo reporting).   \n\n\nCustom Lock Classes\n-------------------\n\nIf your Redis db gets flushed the lock will disappear. This will cause the Redis\nbackend to raise an exception EVEN THOUGH you have succeeded in generating your\ndata.\n\nBy using a ``lock_class``, you can catch the exception and decide what to do --\nlog it?, continue on, raise an error?  It's up to you!\n\n\timport redis.exceptions\n\n\tclass RedisDistributedLockProxy(object):\n\t\t\"\"\"example lock wrapper\n\t\tthis will silently pass if a LockError is encountered\n\t\t\"\"\"\n\t\tmutex = None\n\n\t\tdef __init__(self, mutex):\n\t\t\tself.mutex = mutex\n\n\t\tdef acquire(self, *_args, **_kwargs):\n\t\t\treturn self.mutex.acquire(*_args, **_kwargs)\n\n\t\tdef release(self):\n\t\t\t# defer imports until backend is used\n\t\t\tglobal redis\n\t\t\timport redis  # noqa\n\t\t\ttry:\n\t\t\t\tself.mutex.release()\n\t\t\texcept redis.exceptions.LockError, e:\n\t\t\t\t# log.debug(\"safe lock timeout\")\n\t\t\t\tpass\n\t\t\texcept Exception as e:\n\t\t\t\traise\n\n\n\nTo Do\n--------------------------------------\n\nI've been experimenting with handling the TTL within a hash bucket (instead of\nusing the **Redis** or **dogpile.cache** methods). This looks promising.  The\nrationale is that it is easier for **Redis** to get/set an extra field from the\nsame hash, than it is to do separate calls to TTL/EXPIRES.  \n\nin code:\n\n\t- hset('example', 'foo', 'bar')\n\t- expires('example', 3600)\n\t+ hmset('example', {'foo': 'bar',\n\t\t\t\t\t\t'expires': time.time() + 3600,\n\t\t\t\t\t\t}\n\nI've also been experimenting with blessing the result into a subclass of `dict`\nthat would do the object pair decoding lazily as-needed.\nThat would speed up most use cases.\n\n\nMaturity\n--------------------------------------\n\nThis package is pre-release.  I've been using these strategies in production\nvia a custom fork of **dogpile.cache** for several years, but am currently\nmigrating it to a plugin.\n\n\nMaintenance and Upstream Compatibility\n--------------------------------------\n\nSome files in /tests are entirely from **dogpile.cache** as-is:\n\n*   /tests/conftest.py\n*   /tests/cache/\\__init__.py\n*   /tests/cache/\\_fixtures.py\n        \nThey are versions from **dogpile.cache** 0.6.2\n\nThe core file, `/cache/backends/redis_advanced.py` inherits from\n**dogpile.cache**'s `/cache/backends/redis.py`\n\n\nTesting\n-------\n\nThis ships with full tests.  \n\nMuch of the core package and test fixtures are from **dogpile.cache** and\ncopyright from that project, which is available under the MIT license.\n\nTests are handled through tox\n\nExamples:\n\n```\ntox\ntox -e py27 -- tests/cache/test_redis_backend.py\ntox -e py27 -- tests/cache/test_redis_backend.py::RedisAdvanced_SerializedRaw_Test\ntox -e py27 -- tests/cache/test_redis_backend.py::HstoreTest\n``` \n\nTests pass on the enclosed `redis.conf` file:\n\n```/usr/local/Cellar/redis/3.0.7/redis-server ./redis-server--6379.conf```\n\n\n\nLicense\n-------\n\nThis project is available under the same MIT license as **dogpile.cache**.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jvanasco/dogpile_backend_redis_advanced",
    "keywords": "caching dogpile",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dogpile-backend-redis-advanced",
    "package_url": "https://pypi.org/project/dogpile-backend-redis-advanced/",
    "platform": "",
    "project_url": "https://pypi.org/project/dogpile-backend-redis-advanced/",
    "project_urls": {
      "Homepage": "https://github.com/jvanasco/dogpile_backend_redis_advanced"
    },
    "release_url": "https://pypi.org/project/dogpile-backend-redis-advanced/0.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Advanced Redis plugins for `dogpile.cache`.",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9882415,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5991a9ac276eff7639fa878811aa0ed96fcd6ed8717e424af5c3bfd3a052033a",
          "md5": "75115fbc8547647cbe0d4be478253933",
          "sha256": "6de21651c0cee10926e6ebdcf01beb64856b7119417104f8d6a2ec0c3add1695"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "75115fbc8547647cbe0d4be478253933",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11072,
        "upload_time": "2016-08-13T22:58:13",
        "upload_time_iso_8601": "2016-08-13T22:58:13.860735Z",
        "url": "https://files.pythonhosted.org/packages/59/91/a9ac276eff7639fa878811aa0ed96fcd6ed8717e424af5c3bfd3a052033a/dogpile_backend_redis_advanced-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b05d55746abbb4e028c843564c36e42b40181210e487e8b1f3994fc683498633",
          "md5": "4bac4c2505e646fdd839010c53d071c4",
          "sha256": "e6e031ea1a2f5e2de34139a9d05d6355acdc11d9a049f4d12f488ef52029a6c4"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4bac4c2505e646fdd839010c53d071c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4844,
        "upload_time": "2016-08-18T19:11:31",
        "upload_time_iso_8601": "2016-08-18T19:11:31.753872Z",
        "url": "https://files.pythonhosted.org/packages/b0/5d/55746abbb4e028c843564c36e42b40181210e487e8b1f3994fc683498633/dogpile_backend_redis_advanced-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98f0b1a8992663251bd00e8baf4f997205add2a4594351d8ff0c575b82c6bdcd",
          "md5": "ab2723d572c3cc7f1a648d4bfdfba9a2",
          "sha256": "7475ac8ac70acd39c0ece93667eef82cb436234409b3c3f61f6e8cc7afaf0e23"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ab2723d572c3cc7f1a648d4bfdfba9a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5503,
        "upload_time": "2016-09-15T22:59:49",
        "upload_time_iso_8601": "2016-09-15T22:59:49.519706Z",
        "url": "https://files.pythonhosted.org/packages/98/f0/b1a8992663251bd00e8baf4f997205add2a4594351d8ff0c575b82c6bdcd/dogpile_backend_redis_advanced-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a27b7904b28659040f0f5776f4dd92c440f54558d085b560c355635350c3158",
          "md5": "8099ac5b156e0b97fa970a88fcb30455",
          "sha256": "b547112252ebd526b9d13b81fff32044e054d8e10571873391868f80d8c52fc8"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8099ac5b156e0b97fa970a88fcb30455",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5502,
        "upload_time": "2016-09-19T20:02:44",
        "upload_time_iso_8601": "2016-09-19T20:02:44.792400Z",
        "url": "https://files.pythonhosted.org/packages/5a/27/b7904b28659040f0f5776f4dd92c440f54558d085b560c355635350c3158/dogpile_backend_redis_advanced-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "513f37288b545804080395b96e2df00f3e0018c8dc262dc0d68cb4e172c38e7a",
          "md5": "dd06768466f054984128f484aa2e6982",
          "sha256": "72caa8c1c80aa7c234bbf9193add2946c5c20414e76d79504b1ca5b8b2575a35"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dd06768466f054984128f484aa2e6982",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5540,
        "upload_time": "2016-10-05T21:56:24",
        "upload_time_iso_8601": "2016-10-05T21:56:24.978439Z",
        "url": "https://files.pythonhosted.org/packages/51/3f/37288b545804080395b96e2df00f3e0018c8dc262dc0d68cb4e172c38e7a/dogpile_backend_redis_advanced-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e13e1c5a6a82fd01b9813fe8190b27fdeac7e96f351a0584cf93639c68a440d",
          "md5": "29a1173ca403f69bea74eac03e4993dd",
          "sha256": "c01bf08f1a693aa03a414274304b7eb6a7fc8ab0666b7efe75176dacbc2f5287"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "29a1173ca403f69bea74eac03e4993dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5791,
        "upload_time": "2016-10-17T21:02:09",
        "upload_time_iso_8601": "2016-10-17T21:02:09.550342Z",
        "url": "https://files.pythonhosted.org/packages/5e/13/e1c5a6a82fd01b9813fe8190b27fdeac7e96f351a0584cf93639c68a440d/dogpile_backend_redis_advanced-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc30252b4afc6a42f6ae56003f1c5dc56aa96679917a3ef94c0b84207a284c46",
          "md5": "a605b4194c71f6c3935c2f05124dcc2e",
          "sha256": "6d509447a0756be3f5018fb40d55c8370da680f786f6b561689a5760835ea04c"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a605b4194c71f6c3935c2f05124dcc2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5802,
        "upload_time": "2016-10-17T21:53:16",
        "upload_time_iso_8601": "2016-10-17T21:53:16.561140Z",
        "url": "https://files.pythonhosted.org/packages/fc/30/252b4afc6a42f6ae56003f1c5dc56aa96679917a3ef94c0b84207a284c46/dogpile_backend_redis_advanced-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d323f00635dc6ba86cd0bff93911acac796a39c268edd24314670c0a4c6a1fb3",
          "md5": "748319650e073beaa3dc5c93a9c14852",
          "sha256": "c60f0cd4c58154b2a52a73b41c19ae5d3055c6459cc15e0b961a201f37af33c5"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "748319650e073beaa3dc5c93a9c14852",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12756,
        "upload_time": "2019-04-24T23:18:45",
        "upload_time_iso_8601": "2019-04-24T23:18:45.267053Z",
        "url": "https://files.pythonhosted.org/packages/d3/23/f00635dc6ba86cd0bff93911acac796a39c268edd24314670c0a4c6a1fb3/dogpile_backend_redis_advanced-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2153a90af6b9f4ec768351aa607ef3862e3328eeb83da46940304d41be132761",
          "md5": "28c3e5171d8e5379b475c95208faa286",
          "sha256": "6aecca62980d77b19f9ea0c1dc6b69ab5506a1fd4a9638ece45a90bafab8dceb"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "28c3e5171d8e5379b475c95208faa286",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12790,
        "upload_time": "2020-06-08T15:44:49",
        "upload_time_iso_8601": "2020-06-08T15:44:49.459430Z",
        "url": "https://files.pythonhosted.org/packages/21/53/a90af6b9f4ec768351aa607ef3862e3328eeb83da46940304d41be132761/dogpile_backend_redis_advanced-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7996d8ea7fb1c84680a497b73e50c6c9d5dda787e0533410128ffac1a0dead6",
          "md5": "19ae272f47504cfae9fbc4f98fd1b5ec",
          "sha256": "ffee14fbb19ad1ae1d3198934544b1c188e7ec97c5961de5bf83b7db4a64c872"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "19ae272f47504cfae9fbc4f98fd1b5ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12968,
        "upload_time": "2020-10-20T16:45:35",
        "upload_time_iso_8601": "2020-10-20T16:45:35.371264Z",
        "url": "https://files.pythonhosted.org/packages/d7/99/6d8ea7fb1c84680a497b73e50c6c9d5dda787e0533410128ffac1a0dead6/dogpile_backend_redis_advanced-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d794bc752524b77fcf1188385863782785f0eda33b34cf56380fa82bd06017cf",
          "md5": "430b673d9bce438d823c616b5ef3b21e",
          "sha256": "234a96468ec9830b35a73918e8f2660aad37f46e5200906f949737d2d4a6b845"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "430b673d9bce438d823c616b5ef3b21e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14569,
        "upload_time": "2020-10-20T16:48:09",
        "upload_time_iso_8601": "2020-10-20T16:48:09.790570Z",
        "url": "https://files.pythonhosted.org/packages/d7/94/bc752524b77fcf1188385863782785f0eda33b34cf56380fa82bd06017cf/dogpile_backend_redis_advanced-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aec8b0de4f2eb24e011538b79dbef541e24cf90a3d7734040cccd165e2403a35",
          "md5": "8ce4cd654d4b48b2131d154053db98d1",
          "sha256": "b7345748a58587f85f577730666e13b2c681f064b7314b4efdb1b0c86c0e3db6"
        },
        "downloads": -1,
        "filename": "dogpile_backend_redis_advanced-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8ce4cd654d4b48b2131d154053db98d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31578,
        "upload_time": "2021-03-25T21:50:26",
        "upload_time_iso_8601": "2021-03-25T21:50:26.217185Z",
        "url": "https://files.pythonhosted.org/packages/ae/c8/b0de4f2eb24e011538b79dbef541e24cf90a3d7734040cccd165e2403a35/dogpile_backend_redis_advanced-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aec8b0de4f2eb24e011538b79dbef541e24cf90a3d7734040cccd165e2403a35",
        "md5": "8ce4cd654d4b48b2131d154053db98d1",
        "sha256": "b7345748a58587f85f577730666e13b2c681f064b7314b4efdb1b0c86c0e3db6"
      },
      "downloads": -1,
      "filename": "dogpile_backend_redis_advanced-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8ce4cd654d4b48b2131d154053db98d1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31578,
      "upload_time": "2021-03-25T21:50:26",
      "upload_time_iso_8601": "2021-03-25T21:50:26.217185Z",
      "url": "https://files.pythonhosted.org/packages/ae/c8/b0de4f2eb24e011538b79dbef541e24cf90a3d7734040cccd165e2403a35/dogpile_backend_redis_advanced-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}