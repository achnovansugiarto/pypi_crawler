{
  "info": {
    "author": "Mohammad Amin Tahavori, Lorenzo Rinaldi, Nicolo Golinucci",
    "author_email": "mohammadamin.tahavori@polimi.it",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Utilities"
    ],
    "description": "\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. image:: https://readthedocs.org/projects/mario-suite/badge/?version=latest\n    :target: https://mario-suite.readthedocs.io/en/latest/index.html\n    :alt: Documentation Status  \n\n.. image:: https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\n    :target: https://creativecommons.org/licenses/by-nc-sa/4.0/ \n\n.. image:: https://raw.githubusercontent.com/SESAM-Polimi/MARIO/767d2c0e9e42ae0b6acf7c3a1cc379d7bcd367fa/doc/source/_static/images/polimi.svg\n   :width: 200\n   :align: right\n\n*******\nMARIO\n*******\nMultifunctional Analysis of Regions through Input-Output \n\n\nWhat is it\n-----------\n**MARIO** is a python package for handling input-output tables and models.\nMARIO aims to provide a *simple* & *intuitive* API for common IO tasks without\nneeding in-depth programming knowledge. MARIO supporst automatic parsing of different\nstructured tables such EXIOBASE, EORA, EUROSTAT in different formats namely:\n\n* Single region \n* Multi region\n* Hybrid tables\n* Monetary tables\n* Input-Output tables\n* Supply-Use tables\n\nWhen databases are not structured, MARIO supports parsing data from xlsx, csv, txt files\nor pandas.DataFrames.\n\nMore than parsing data, MARIO includes some basic functionalities:\n\n* Aggregation of databases\n* SUT to IOT transformation\n* Modifying database in terms of adding:\n   * New sectors, activities or commodities to the database\n   * Adding new extensions to the satellite account\n* Scneario and shock analysis\n* Backward and forward linkages analysis\n* Extracting single region database from multi region databases\n* Balance test \n* Productivity test\n* Exporting the databases into different formats for scenarios analyzed\n* Interactive visualization routines\n\n\nRequirements\n------------\n\nMARIO has been tested on macOS and Windows.\n\nTo run MARIO, a couple of things are needed:\n\n#. Being in love with Input-Output :-)\n#. The Python programming language, version 3.7 or higher\n#. A number of Python adds-on packages\n#. For some functionalities a solver may needed (optional)\n#. MARIO software itself\n\nRecommended installation method\n-------------------------------\n\nThe easiest way to make MARIO software working is to use the free\nconda package manager which can install the current and future MARIO\ndepencies in an easy and user friendly way.\n\nTo get conda, `download and install \"Anaconda Distribution\" <https://www.anaconda.com/products/individual>`_ \n. Between differnet options for running python codes, we strongly suggest, `Spyder <https://www.spyder-ide.org/>`_, \nwhich is  a free and open source scientific environment written in Python, for Python, and designed by and for scientists,\nengineers and data analysts.\n\nWhen Anaconda and Spyder are installed, you have two options to install mario:\n\n*Option.1: Creating mario environment*\n\ncreate a new environment called \"mario\" with all the necessary modules,\nby running the following command in a terminal or command-line window\n\n.. code-block:: python\n\n   conda create -c conda-forge -n mario mario\n\nIf you create a new environment for mario, to use it, you need to activate the mario environment each time by writing\nthe following line in *Anaconda Prompt*\n\n.. code-block:: python\n\n   conda activate mario\n\n*Option.2: Installing mario package on base environment*\n\nIf you would prefer not to create new environment, you can install mario in your base environment in three different ways:\n\n#. pip\n\n   .. code-block:: python\n\n      pip install mario\n\n#. conda\n\n   .. code-block:: python\n\n      conda install -c conda-forge mario\n\n#. installing from source code\n\n\nQuickstart\n----------\nA simple test for Input-Output Table (IOT) and Supply-Use Table (SUT) is included in mario.\n\nTo use the IOT test, call\n\n.. code-block:: python\n\n   import mario\n   test_iot = mario.load_test('IOT')\n\nand to use the SUT test, call\n\n.. code-block:: python\n\n   test_sut = mario.load_test('SUT')\n\nTo see the configurations of the data, you can print them:\n\n.. code-block:: python\n\n   print(test_iot)\n   print(test_sut)\n\nTo see specific sets of the tables like regions or value added,\nget_index function can be used:\n\n.. code-block:: python\n\n   print(test_iot.get_index('Region'))\n   print(test_sut.get_index('Factor of production'))\n\nTo visualize some data, various plot functions can be used:\n\n.. code-block:: python\n\n   test_iot.plot_matrix(....)\n\nSpecific modifications on the database can be done, such as\nSUT to IOT transformation:\n\n.. code-block:: python\n\n   reformed_iot = test.sut_to_iot(method='B')\n\nThe changes can be tracked by metadata. The history can be checked by calling:\n\n.. code-block:: python\n\n   reformed_iot.meta_history\n\nThe new database can be saved into excel,txt or csv file:\n\n.. code-block:: python\n\n   reformed_iot.to_excel(path='a folder//database.xlsx')\n\n.. _RST pckgs:\n\nPython module requirements\n--------------------------\nSome of the key packages the mario relies on are:\n\n* `Pandas  <https://pandas.pydata.org/>`_ \n* `Numpy  <https://numpy.org/>`_ \n* `Plotly  <https://plotly.com/>`_ \n* `Tabulate  <https://pypi.org/project/tabulate/>`_ \n* `Cvxpy  <https://pypi.org/project/tabulate/>`_ (Optional in this version)\n\n\n\n.. note::\n   * This project is under active development. \n   * More examples will be uploaded through time to the gellery.\n   * More parsers will be added to the next version.\n   * The next version will cover some optimization models within the IO framework\n\n\nLicense\n-------\n\n.. image:: https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\n    :target: https://creativecommons.org/licenses/by-nc-sa/4.0/\n\n\nThis work is licensed under a `Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) <https://creativecommons.org/licenses/by-nc-sa/4.0/>`_\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SESAM-Polimi/MARIO",
    "keywords": "",
    "license": "Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mariopy",
    "package_url": "https://pypi.org/project/mariopy/",
    "platform": "",
    "project_url": "https://pypi.org/project/mariopy/",
    "project_urls": {
      "Homepage": "https://github.com/SESAM-Polimi/MARIO"
    },
    "release_url": "https://pypi.org/project/mariopy/0.1.0/",
    "requires_dist": [
      "pandas (>=1.3.3)",
      "numpy (>=1.21.2)",
      "xlsxwriter (<=1.3.7)",
      "plotly (>=4.12.0)",
      "tabulate (>=0.8.9)",
      "openpyxl (>=3.0.6)",
      "IPython (>=7.22.0)"
    ],
    "requires_python": ">.3.7.0",
    "summary": "A python package for automating input-output (IO) calculations, models,visualization and scenario analysis",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11912394,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5de903ea16c40844f9bc635f3e46e782dac0b3ff7e4083155d40d6cb77f2094",
          "md5": "743816252e72e31ff4b879ad01b21f91",
          "sha256": "1710a5e165edfb2e0a3fb49916fb3f453b756e77e46fbebdd56f12d2c4d779ad"
        },
        "downloads": -1,
        "filename": "mariopy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "743816252e72e31ff4b879ad01b21f91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">.3.7.0",
        "size": 104546,
        "upload_time": "2021-11-01T12:47:27",
        "upload_time_iso_8601": "2021-11-01T12:47:27.268340Z",
        "url": "https://files.pythonhosted.org/packages/d5/de/903ea16c40844f9bc635f3e46e782dac0b3ff7e4083155d40d6cb77f2094/mariopy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5de903ea16c40844f9bc635f3e46e782dac0b3ff7e4083155d40d6cb77f2094",
        "md5": "743816252e72e31ff4b879ad01b21f91",
        "sha256": "1710a5e165edfb2e0a3fb49916fb3f453b756e77e46fbebdd56f12d2c4d779ad"
      },
      "downloads": -1,
      "filename": "mariopy-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "743816252e72e31ff4b879ad01b21f91",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">.3.7.0",
      "size": 104546,
      "upload_time": "2021-11-01T12:47:27",
      "upload_time_iso_8601": "2021-11-01T12:47:27.268340Z",
      "url": "https://files.pythonhosted.org/packages/d5/de/903ea16c40844f9bc635f3e46e782dac0b3ff7e4083155d40d6cb77f2094/mariopy-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}