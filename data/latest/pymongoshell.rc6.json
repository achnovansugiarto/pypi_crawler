{
  "info": {
    "author": "Joe Drumgoole",
    "author_email": "joe@joedrumgoole.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# pymongoshell :  MongoDB in the python shell\n\nThe Python shell is the ideal environment for Python developers to interact\nwith MongoDB. However output cursors and interacting with the database requires\na little more boilerplate than is convenient. the `pymongoshell` package \nprovides a set a convenience functions and objects to allow easier\ninteraction with MongoDB via the Python interpreter. \n\nThe key value adds for the `pymongoshell` over the standard `pymongo`\npackage are:\n\n * Proper pagination of output\n * Pretty printing of output\n * Ability to stream output to a file in parallel to the screen\n * Full compatibility with pymongo API\n\nThe shell is actually a shim class that wraps the \n[`pymongo.Collection`](https://api.mongodb.com/python/current/api/pymongo/collection.html) class. The\nclass `pymongoshell` intercepts method and property requests and forwards\nthem to that class. \n\nWe then process the return values using the properties:\n* `pagination`\n* `linenumbers`\n* `prettyprinting` \n\nto format the output sensibly for\na human viewer.  \n\n## Installation\n\nyou can install the software with `pip3`. The `pymongoshell` only\nsupports Python 3. \n\n```shell script\n$ pip3 install pymongoshell\n```\n\n## Using the pymongoshell\n\nFirst we create a `MongoClient` object. This is a proxy for all the \ncommands we can run using `pymongoshell`. It is exactly analogous to \nthe PyMongo `MongoClient` and is in fact just a shim. We support one\nadditional argument `banner`. This argument controls whether we output a banner\ndetailing which version and which collections \n\n```python\n>>> import pymongoshell\n>>> c = pymongoshell.MongoClient()\npymongoshell 1.1.0b5\nUsing collection 'test.test'\nServer selection timeout set to 5.0 seconds\n>>> c\npymongoshell.MongoClient(banner=True,\n                         database_name='test',\n                         collection_name='test',\n                         host= 'mongodb://localhost:27017')\n>>>\n```\n\nWe can also access the native `MongoClient` object by using the `.client` property.\n\n```python\n>>> c.client\nMongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True, serverselectiontimeoutms=5000)\n>>>\n```\n\nEach `pymongoshell.MongoClient` object has a set of standard properties that \nrepresent the `pymongo` objects. In normal use you will not reference these\nobjects:\n\n```python\n>>> c.database\nDatabase(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True, serverselectiontimeoutms=5000), 'test')\n>>> c.collection\nCollection(Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True, serverselectiontimeoutms=5000), 'test'), 'test')\n>>> c.uri\n'mongodb://localhost:27017'\n>>> c.database_name\n'test'\n>>> c.collection_name\n'test.test'\n>>>\n```\n\n## Pick a collection\nTo use a particular collection just assign the name to the collection object. You\ncan use dotted notation to pick a new database and collection at the same time.\nJust specify the new database and collection name by assigning them to \nthe collection object.\n\n\n```python\n>>> import pymongoshell\n>>> c=pymongoshell.MongoClient()\npymongoshell 1.1.0b6\nUsing collection 'test.test'\nServer requests set to timeout after 5.0 seconds\n>>> c.collection_name\n'test.test'\n>>> c.collection_name=\"hello\"\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Users\\joe\\GIT\\pymongoshell\\pymongoshell\\mongoclient.py\", line 747, in __setattr__\n    object.__setattr__(self, name, value)\nAttributeError: can't set attribute\n>>> c.collection=\"test2\"\n>>> c.collection_name\n'test.test2'\n>>> c.collection=\"dummy.test3\"\n>>> c.collection_name\n'dummy.test3'\n>>> c.collection\nCollection(Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True, serverselectiontimeoutms=5000), 'dummy'), 'test3')\n>>>\n```\n\n\n# Changing Format of Output\n\nThe `pymongoshell` supports three formatting directives. All are boolean values\nand all are true by default.\n```python\n>>> c.paginate\nTrue\n>>> c.pretty_print\nTrue\n>>> c.line_numbers\nTrue\n>>>\n```\n\n## Paginate\nPagination ensures that the results of the output don't scroll off the screen. \nThe pagination uses the screen dimensions to properly format and wrap the output\nso that regardless of screen size changes the output can always be viewed. The \nviewport is recalcuated dynamically so the user can change the terminal window\nsize while paging throughout. Pagination can be turned off by setting `paginate`\nto false.\n```python\n>>> c.paginate=False\n>>> c.paginate\nFalse\n```\n\n## pretty_print\nPretty printing is used to ensure that the JSON documents output are properly\nformatted and easy to read. For small documents turning pretty printing off will\nresult in the documents printing on a single line which can sometimes be easier\nto read.\n\nTo turn off `pretty_print` just set the value to `False`.\n```python\n>>> c.pretty_print=False\n>>>\n```\n## line_numbers\nLine numbers are added by default to allow a user to keep track of location\nin a large stream output. Similarily to the other properties `line_numbers`\ncan be toggled on and off by settting the flag.\n```python\n>>> c.line_numbers=False\n>>>\n```\n# Convenience Functions\n\nThe class provides a number of convenience functions to allow easy access\nto some of the more common administrative functions.\n\n## lcols\n\nlist the collections in the current database.\n\n## ldbs\n\nList the databases on the current cluster.\n\n## drop_database\n\nTo drop a database from a server you can run the `drop_database` command.\n\n```python\n>>> c.collection=\"dummy.data\"\n>>> c.insert_one({\"name\":\"Joe Drumgoole\"})\nInserted: 5e9790385b17a0269489bfcc\n>>> c.ldbs\n1  : admin\n2  : config\n3  : dummy\n4  : geo_example\n5  : local\n>>> c.drop_database()\nDrop database: 'dummy' [y/Y]: y\n>>> c.ldbs\n1  : admin\n2  : config\n3  : geo_example\n4  : local\n>>>\n```\n\n## is_master\n\nThe [`is_master`](https://docs.mongodb.com/manual/reference/method/db.isMaster/) command returns the status and configuration of the Mongod server \nand/or cluster thatthe client is connected to. This represents the typical \nresults from a single`mongod` running locally. The `is_master` is the canonical\nway to determine if a client is connected to a `mongod` or `mongod` cluster.\n```python\n>>> c.is_master()\n1  : {'connectionId': 9,\n2  :  'ismaster': True,\n3  :  'localTime': datetime.datetime(2020, 4, 1, 11, 32, 46, 753000),\n4  :  'logicalSessionTimeoutMinutes': 30,\n5  :  'maxBsonObjectSize': 16777216,\n6  :  'maxMessageSizeBytes': 48000000,\n7  :  'maxWireVersion': 8,\n8  :  'maxWriteBatchSize': 100000,\n9  :  'minWireVersion': 0,\n10 :  'ok': 1.0,\n11 :  'readOnly': False}\n>>>\n```\n\n## coll_stats \nThe [`coll_stats`](https://docs.mongodb.com/manual/reference/command/collStats/)\ncommand returns collection stats for the current collection defined by `c.collection`.\nThere is no directly analogous command in PyMongo. In instead it is constructed\nusing the [`command`](https://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.command) operation. \nfunction in PyMongo.\n\n## command\nMany admin operations in MongoDB are too esoteric to warrant a specific API call in the\ndriver. For these operations we support the generic \n[`command`](https://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.command) \noption. \n```python\n>>> c.command('buildinfo')\n1  : {'allocator': 'tcmalloc',\n2  :  'bits': 64,\n3  :  'buildEnvironment': {'cc': 'cl: Microsoft (R) C/C++ Optimizing Compiler '\n4  :                             'Version 19.16.27032.1 for x64',\n5  :                       'ccflags': '/nologo /EHsc /W3 /wd4068 /wd4244 /wd4267 '\n6  :                                  '/wd4290 /wd4351 /wd4355 /wd4373 /wd4800 '\n7  :                                  '/wd5041 /wd4291 /we4013 /we4099 /we4930 /WX '\n8  :                                  '/errorReport:none /MD /O2 /Oy- /bigobj '\n9  :                                  '/utf-8 /permissive- /Zc:__cplusplus '\n10 :                                  '/Zc:sizedDealloc /volatile:iso '\n11 :                                  '/diagnostics:caret /std:c++17 /Gw /Gy '\n12 :                                  '/Zc:inline',\n13 :                       'cxx': 'cl: Microsoft (R) C/C++ Optimizing Compiler '\n14 :                              'Version 19.16.27032.1 for x64',\n15 :                       'cxxflags': '/TP',\n16 :                       'distarch': 'x86_64',\n17 :                       'distmod': '2012plus',\n18 :                       'linkflags': '/nologo /DEBUG /INCREMENTAL:NO '\n19 :                                    '/LARGEADDRESSAWARE /OPT:REF',\n20 :                       'target_arch': 'x86_64',\n21 :                       'target_os': 'windows'},\n22 :  'debug': False,\n23 :  'gitVersion': 'a4b751dcf51dd249c5865812b390cfd1c0129c30',\n24 :  'javascriptEngine': 'mozjs',\n25 :  'maxBsonObjectSize': 16777216,\n26 :  'modules': [],\n27 :  'ok': 1.0,\n28 :  'openssl': {'running': 'Windows SChannel'},\n29 :  'storageEngines': ['biggie', 'devnull', 'ephemeralForTest', 'wiredTiger'],\n30 :  'sysInfo': 'deprecated',\n31 :  'targetMinOS': 'Windows 7/Windows Server 2008 R2',\n32 :  'version': '4.2.0',\n33 :  'versionArray': [4, 2, 0, 0]}\n>>>\n```\n\n## count_documents\nTo accurately count a number of documents in a collection we can use the \n[`count_documents`](https://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.count_documents)\noperation. You can apply a filter to limit the number of documents returned.\n\nIn this example lets connect to a [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) \ndatabase hosted in the cloud. \n```python\nc=pymongoshell.MongoClient(\"mongodb+srv://readonly:readonly@demodata-rgl39.mongodb.net/test?retryWrites=true\")\npymongoshell 1.1.0b5\nUsing collection 'test.test'\nServer selection timeout set to 5.0 seconds\n>>> c.collection=\"demo.zipcodes\"\n>>> c.count_documents()\n29350\n>>> c.count_documents({\"city\" : \"NEW YORK\"})\n40\n>>>\n```\nThis tells us there are 29350 zip codes in the USA and 49 in New York. This is an\nold data set so those numbers may not be quite up to date with the latest\nUS zipcodes. \n\n# Find Examples\n\nLet's create an example dataset.\n\n```python\n>>> import pymongoshell\n>>> c=pymongoshell.MongoClient()\npymongoshell 1.1.0b5\nUsing collection 'test.test'\nServer requests set to timeout after 5.0 seconds\n>>>\n>>> d1 = {\"name\" : \"Heracles\"}\n>>> d2 = {\"name\" : \"Orpheus\"}\n>>> d3 = {\"name\" : \"Jason\"}\n>>> d4 = {\"name\" : \"Odysseus\"}\n>>> d5 = {\"name\" : \"Achilles\"}\n>>> d6 = {\"name\" : \"Menelaeus\"}\n>>> c.insert_one(d1)\nInserted: 5e9479265b17a0612c508328\n>>> c.insert_many([d2,d3,d4,d5])\n1  : [ObjectId('5e9479275b17a0612c508329'),\n2  :  ObjectId('5e9479275b17a0612c50832a'),\n3  :  ObjectId('5e9479275b17a0612c50832b'),\n4  :  ObjectId('5e9479275b17a0612c50832c')]\n>>>\n>>> p1 = {\"name\" : \"Joe Drumgoole\",\n...       \"social\": [\"twitter\", \"instagram\", \"linkedin\"],\n...       \"mobile\": \"+353 87xxxxxxx\",\n...       \"email\" : \"Joe.Drumgoole@mongodb.com\"}\n>>> p2 = {\"name\" : \"Hercules Mulligan\",\n...       \"social\": [\"twitter\", \"linkedin\"],\n...       \"mobile\": \"+1 12345678\",\n...       \"email\" : \"Hercules.Mulligan@example.com\"}\n>>> p3 = {\"name\" : \"Aaron Burr\",\n...       \"social\": [\"instagram\"],\n...       \"mobile\": \"+1 67891011\",\n...       \"email\" : \"Aaron.Burr@example.com\"}\n>>> c.insert_many([p1,p2,p3])\n1  : [ObjectId('5e9478e75b17a0612c508325'),\n2  :  ObjectId('5e9478e75b17a0612c508326'),\n3  :  ObjectId('5e9478e75b17a0612c508327')]\n>>>\n```\n### Find all documents\n```python\n>>> c.find()\n1  : {'_id': ObjectId('5e9478e75b17a0612c508325'),\n2  :  'email': 'Joe.Drumgoole@mongodb.com',\n3  :  'mobile': '+353 87xxxxxxx',\n4  :  'name': 'Joe Drumgoole',\n5  :  'social': ['twitter', 'instagram', 'linkedin']}\n6  : {'_id': ObjectId('5e9478e75b17a0612c508326'),\n7  :  'email': 'Hercules.Mulligan@example.com',\n8  :  'mobile': '+1 12345678',\n9  :  'name': 'Hercules Mulligan',\n10 :  'social': ['twitter', 'linkedin']}\n11 : {'_id': ObjectId('5e9478e75b17a0612c508327'),\n12 :  'email': 'Aaron.Burr@example.com',\n13 :  'mobile': '+1 67891011',\n14 :  'name': 'Aaron Burr',\n15 :  'social': ['instagram']}\n16 : {'_id': ObjectId('5e9479265b17a0612c508328'), 'name': 'Heracles'}\n17 : {'_id': ObjectId('5e9479275b17a0612c508329'), 'name': 'Orpheus'}\n18 : {'_id': ObjectId('5e9479275b17a0612c50832a'), 'name': 'Jason'}\n19 : {'_id': ObjectId('5e9479275b17a0612c50832b'), 'name': 'Odysseus'}\n20 : {'_id': ObjectId('5e9479275b17a0612c50832c'), 'name': 'Achilles'}\n>>>\n```\n### Find all documents with an instagram social setting\n\nNote that MongoDB knows to look inside an array when the target\nfield is an array.\n\n```python\n\n\n>>> c.find({'social':'instagram'})\n1  : {'_id': ObjectId('5e9478e75b17a0612c508325'),\n2  :  'email': 'Joe.Drumgoole@mongodb.com',\n3  :  'mobile': '+353 87xxxxxxx',\n4  :  'name': 'Joe Drumgoole',\n5  :  'social': ['twitter', 'instagram', 'linkedin']}\n6  : {'_id': ObjectId('5e9478e75b17a0612c508327'),\n7  :  'email': 'Aaron.Burr@example.com',\n8  :  'mobile': '+1 67891011',\n9  :  'name': 'Aaron Burr',\n10 :  'social': ['instagram']}\n>>>\n```\n\n##Connecting to a specific MongoDB URI\n\nYou can connect to a different database by passing in a different URI to the `host` \nparameter for `pymongoshell.MongoClient`. Here is an\nexample connection to a [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) \nhosted database. \n\nThe example below is a live read-only database. You can try it out at the \nMongoDB URI:\n\n```shell script\n\"mongodb+srv://readonly:readonly@demodata-rgl39.mongodb.net/test?retryWrites=true\"\n```\n\nIn the `pymongoshell`:\n\n```python\n>>> import pymongoshell\n>>> atlas=pymongoshell.MongoClient(host=\"mongodb+srv://readonly:readonly@demodata-rgl39.mongodb.net/test?retryWrites=true\", database=\"demo\", collection=\"zipcodes\")\n>>> atlas.find_one()\n1    {'_id': '01069',\n2     'city': 'PALMER',\n3     'loc': [-72.328785, 42.176233],\n4     'pop': 9778,\n5     'state': 'MA'}\n\n```\n\n## Outputting to a file\n\nThe `MongoDB` class can send output to a file by setting the `output_file` property\non the `MongoDB` class. \n\n```python\n>>> atlas.output_file=\"zipcodes.txt\"\n>>> atlas.find()\nOutput is also going to 'zipcodes.txt'\n1    {'_id': '01069', 'city': 'PALMER', 'loc': [-72.328785, 42.176233], 'pop': 9778, 'state': 'MA'}\n2    {'_id': '01002', 'city': 'CUSHMAN', 'loc': [-72.51565, 42.377017], 'pop': 36963, 'state': 'MA'}\n3    {'_id': '01012', 'city': 'CHESTERFIELD', 'loc': [-72.833309, 42.38167], 'pop': 177, 'state': 'MA'}\n4    {'_id': '01073', 'city': 'SOUTHAMPTON', 'loc': [-72.719381, 42.224697], 'pop': 4478, 'state': 'MA'}\n5    {'_id': '01096', 'city': 'WILLIAMSBURG', 'loc': [-72.777989, 42.408522], 'pop': 2295, 'state': 'MA'}\n6    {'_id': '01262', 'city': 'STOCKBRIDGE', 'loc': [-73.322263, 42.30104], 'pop': 2200, 'state': 'MA'}\n7    {'_id': '01240', 'city': 'LENOX', 'loc': [-73.271322, 42.364241], 'pop': 5001, 'state': 'MA'}\n8    {'_id': '01370', 'city': 'SHELBURNE FALLS', 'loc': [-72.739059, 42.602203], 'pop': 4525, 'state': 'MA'}\n9    {'_id': '01340', 'city': 'COLRAIN', 'loc': [-72.726508, 42.67905], 'pop': 2050, 'state': 'MA'}\n10   {'_id': '01462', 'city': 'LUNENBURG', 'loc': [-71.726642, 42.58843], 'pop': 9117, 'state': 'MA'}\n11   {'_id': '01473', 'city': 'WESTMINSTER', 'loc': [-71.909599, 42.548319], 'pop': 6191, 'state': 'MA'}\n12   {'_id': '01510', 'city': 'CLINTON', 'loc': [-71.682847, 42.418147], 'pop': 13269, 'state': 'MA'}\n13   {'_id': '01569', 'city': 'UXBRIDGE', 'loc': [-71.632869, 42.074426], 'pop': 10364, 'state': 'MA'}\n14   {'_id': '01775', 'city': 'STOW', 'loc': [-71.515019, 42.430785], 'pop': 5328, 'state': 'MA'}\n>>> print(open('zipcodes.txt').read())\n{'_id': '01069', 'city': 'PALMER', 'loc': [-72.328785, 42.176233], 'pop': 9778, 'state': 'MA'}\n{'_id': '01002', 'city': 'CUSHMAN', 'loc': [-72.51565, 42.377017], 'pop': 36963, 'state': 'MA'}\n{'_id': '01012', 'city': 'CHESTERFIELD', 'loc': [-72.833309, 42.38167], 'pop': 177, 'state': 'MA'}\n{'_id': '01073', 'city': 'SOUTHAMPTON', 'loc': [-72.719381, 42.224697], 'pop': 4478, 'state': 'MA'}\n{'_id': '01096', 'city': 'WILLIAMSBURG', 'loc': [-72.777989, 42.408522], 'pop': 2295, 'state': 'MA'}\n{'_id': '01262', 'city': 'STOCKBRIDGE', 'loc': [-73.322263, 42.30104], 'pop': 2200, 'state': 'MA'}\n{'_id': '01240', 'city': 'LENOX', 'loc': [-73.271322, 42.364241], 'pop': 5001, 'state': 'MA'}\n{'_id': '01370', 'city': 'SHELBURNE FALLS', 'loc': [-72.739059, 42.602203], 'pop': 4525, 'state': 'MA'}\n{'_id': '01340', 'city': 'COLRAIN', 'loc': [-72.726508, 42.67905], 'pop': 2050, 'state': 'MA'}\n{'_id': '01462', 'city': 'LUNENBURG', 'loc': [-71.726642, 42.58843], 'pop': 9117, 'state': 'MA'}\n{'_id': '01473', 'city': 'WESTMINSTER', 'loc': [-71.909599, 42.548319], 'pop': 6191, 'state': 'MA'}\n{'_id': '01510', 'city': 'CLINTON', 'loc': [-71.682847, 42.418147], 'pop': 13269, 'state': 'MA'}\n{'_id': '01569', 'city': 'UXBRIDGE', 'loc': [-71.632869, 42.074426], 'pop': 10364, 'state': 'MA'}\n{'_id': '01775', 'city': 'STOW', 'loc': [-71.515019, 42.430785], 'pop': 5328, 'state': 'MA'}\n```\nOutput will continue to be sent to the `output_file` until the output_file is assigned\n`None` or the empty string (\"\").\n\n## Result\nIf you need the actual value returned by a query it is stored\nin the `result` property. Note that if the result is a cursor and\nyou have paged through some of the result then the cursor value may\nat an indeterminate location. \n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jdrumgoole/pymongoshell",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymongoshell",
    "package_url": "https://pypi.org/project/pymongoshell/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymongoshell/",
    "project_urls": {
      "Homepage": "https://github.com/jdrumgoole/pymongoshell"
    },
    "release_url": "https://pypi.org/project/pymongoshell/1.2.1b5/",
    "requires_dist": [
      "pymongo",
      "dnspython"
    ],
    "requires_python": ">=3.6.0",
    "summary": "pymongoshell is a class that makes it easy to use MongoDB in the python shell",
    "version": "1.2.1b5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7443684,
  "releases": {
    "1.1.0b9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "359f23c50b3223ff6760d035aecc4c30a5b36d0218b5e5450bcbb3f492cf5808",
          "md5": "47b74cf03c7a1eaa36c79848c1ed4050",
          "sha256": "06ebbfd39115ef40a16c33eee302752c64708d47a9094c3d81dbc53d4e20f013"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.1.0b9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47b74cf03c7a1eaa36c79848c1ed4050",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 29555,
        "upload_time": "2020-06-08T16:18:03",
        "upload_time_iso_8601": "2020-06-08T16:18:03.294109Z",
        "url": "https://files.pythonhosted.org/packages/35/9f/23c50b3223ff6760d035aecc4c30a5b36d0218b5e5450bcbb3f492cf5808/pymongoshell-1.1.0b9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da22b793372ae8627aad0bf28d4af25044b44ea9a6e464335142c0046c434b9a",
          "md5": "dcb6443c650bf5fa8e95db3ba9f73ce1",
          "sha256": "c65e766029fe8df55a94cbc0e718a2b13f83b89d16598af70c2df1051fdfb722"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.1.0b9.tar.gz",
        "has_sig": false,
        "md5_digest": "dcb6443c650bf5fa8e95db3ba9f73ce1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 27472,
        "upload_time": "2020-06-08T16:18:06",
        "upload_time_iso_8601": "2020-06-08T16:18:06.179269Z",
        "url": "https://files.pythonhosted.org/packages/da/22/b793372ae8627aad0bf28d4af25044b44ea9a6e464335142c0046c434b9a/pymongoshell-1.1.0b9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60f6ccff6e610cbcda66f053353165f6f1dccb5f7e65a60bfe20edb7c93f325",
          "md5": "95e498bc8aedf6917124f93dbc3b7d53",
          "sha256": "48e3daa1df833a941d97c399fc467b48e5f898deee4f06ad3dd504b3c21b5f2e"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95e498bc8aedf6917124f93dbc3b7d53",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 29614,
        "upload_time": "2020-06-08T21:26:05",
        "upload_time_iso_8601": "2020-06-08T21:26:05.126860Z",
        "url": "https://files.pythonhosted.org/packages/b6/0f/6ccff6e610cbcda66f053353165f6f1dccb5f7e65a60bfe20edb7c93f325/pymongoshell-1.2.1b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d316f0d80ec1b05025802c40b252697aa90fcc8883ccf591cee00ba829f13a99",
          "md5": "63982be348220792e57354cac8979e55",
          "sha256": "888a18e07337985a4d1d746ea1a71bffb45274a428c2f469efb90719d1995a6f"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b1.tar.gz",
        "has_sig": false,
        "md5_digest": "63982be348220792e57354cac8979e55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 27551,
        "upload_time": "2020-06-08T21:26:06",
        "upload_time_iso_8601": "2020-06-08T21:26:06.824504Z",
        "url": "https://files.pythonhosted.org/packages/d3/16/f0d80ec1b05025802c40b252697aa90fcc8883ccf591cee00ba829f13a99/pymongoshell-1.2.1b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6430b2f236c0bba28ee02a22a27142bff7cc49261fc7ab334d6d4e9a454db85d",
          "md5": "ee25cb22f1e2fb6be8a4bf8144666377",
          "sha256": "b42fca8b026f6e3e392030b181296df542784051c63c636c7ee902ba092c6efd"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee25cb22f1e2fb6be8a4bf8144666377",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 29607,
        "upload_time": "2020-06-08T23:42:49",
        "upload_time_iso_8601": "2020-06-08T23:42:49.833706Z",
        "url": "https://files.pythonhosted.org/packages/64/30/b2f236c0bba28ee02a22a27142bff7cc49261fc7ab334d6d4e9a454db85d/pymongoshell-1.2.1b2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7253659502d124d1fe00f94f9c9a22e8f1fffde394872b56b585a30c7d08856",
          "md5": "62055a78b8dff384e44ed38068180bdd",
          "sha256": "49408d4cf7f28233905cdad633b1fefa7622bef679660df1b2c8ae1e806e8419"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b2.tar.gz",
        "has_sig": false,
        "md5_digest": "62055a78b8dff384e44ed38068180bdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 27539,
        "upload_time": "2020-06-08T23:42:51",
        "upload_time_iso_8601": "2020-06-08T23:42:51.410325Z",
        "url": "https://files.pythonhosted.org/packages/e7/25/3659502d124d1fe00f94f9c9a22e8f1fffde394872b56b585a30c7d08856/pymongoshell-1.2.1b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac2c528ab2f3d35976315241b9b2a32de9912a88262e1977f34b0c6974e1970c",
          "md5": "0365dcbc0cd212dc4eac224f1250e028",
          "sha256": "0f3e7d82a9f4a9771a44e6ab8b58bfca01394eda55ded42549e38e412bde606b"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0365dcbc0cd212dc4eac224f1250e028",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 29644,
        "upload_time": "2020-06-08T23:56:28",
        "upload_time_iso_8601": "2020-06-08T23:56:28.566436Z",
        "url": "https://files.pythonhosted.org/packages/ac/2c/528ab2f3d35976315241b9b2a32de9912a88262e1977f34b0c6974e1970c/pymongoshell-1.2.1b3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62a9127de6f81b3fd68ec802ec6f911b68af96a21db4b73026daeb57a313419e",
          "md5": "be4e818de013a27fa758c7f9e0f7cebb",
          "sha256": "c0d6df044653836887b52dfc1b3d16c5d1455d8496de3ba72f64004b053fc479"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b3.tar.gz",
        "has_sig": false,
        "md5_digest": "be4e818de013a27fa758c7f9e0f7cebb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 27604,
        "upload_time": "2020-06-08T23:56:30",
        "upload_time_iso_8601": "2020-06-08T23:56:30.414799Z",
        "url": "https://files.pythonhosted.org/packages/62/a9/127de6f81b3fd68ec802ec6f911b68af96a21db4b73026daeb57a313419e/pymongoshell-1.2.1b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "936b15617680ffa0d94879b31cc0696ab9863522aa9098ea1b39915eaeb420cb",
          "md5": "2cd6c9d481c3b6c3a9010706eb8fe27f",
          "sha256": "ab9fac22bf026c24b0a2e78dbeaa7d21c246f52fa0422453503e0c7ea13d588a"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cd6c9d481c3b6c3a9010706eb8fe27f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 29826,
        "upload_time": "2020-06-09T23:10:03",
        "upload_time_iso_8601": "2020-06-09T23:10:03.102788Z",
        "url": "https://files.pythonhosted.org/packages/93/6b/15617680ffa0d94879b31cc0696ab9863522aa9098ea1b39915eaeb420cb/pymongoshell-1.2.1b4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fed6d2c637ecfbde2fe353f9d17d3c8e9fe8d66e03fa510d31f2c6c3d59978bd",
          "md5": "25ae848af184c5027c63f8f751113b41",
          "sha256": "d01bbaf5715657fcd76b1818d8de8d6c24c9ddb8d21356ce24429de91e673051"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b4.tar.gz",
        "has_sig": false,
        "md5_digest": "25ae848af184c5027c63f8f751113b41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 27854,
        "upload_time": "2020-06-09T23:10:04",
        "upload_time_iso_8601": "2020-06-09T23:10:04.892495Z",
        "url": "https://files.pythonhosted.org/packages/fe/d6/d2c637ecfbde2fe353f9d17d3c8e9fe8d66e03fa510d31f2c6c3d59978bd/pymongoshell-1.2.1b4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1b5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c3589ba3efa4d9352ceb84e77e6bad553cf92674d096dddbcd1f79594be461b",
          "md5": "c22c9903fdd1aa5c3f77a391c0054107",
          "sha256": "3b1a8565b25a52295006e9683ba585297d70f92238eb8b93be91a5857c57e5bc"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c22c9903fdd1aa5c3f77a391c0054107",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 29890,
        "upload_time": "2020-06-10T14:12:56",
        "upload_time_iso_8601": "2020-06-10T14:12:56.634651Z",
        "url": "https://files.pythonhosted.org/packages/2c/35/89ba3efa4d9352ceb84e77e6bad553cf92674d096dddbcd1f79594be461b/pymongoshell-1.2.1b5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "748e1b1036f53e4884eb0ab9bfb15df4b845c6fe7b042f2764cf8c84002be854",
          "md5": "23220cfbabcd0825946267b273878461",
          "sha256": "7a84ab219dba72eecab991a58daaef6dd3fec7812251c2eecb7a8b8aa5f28b09"
        },
        "downloads": -1,
        "filename": "pymongoshell-1.2.1b5.tar.gz",
        "has_sig": false,
        "md5_digest": "23220cfbabcd0825946267b273878461",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 27908,
        "upload_time": "2020-06-10T14:12:58",
        "upload_time_iso_8601": "2020-06-10T14:12:58.967601Z",
        "url": "https://files.pythonhosted.org/packages/74/8e/1b1036f53e4884eb0ab9bfb15df4b845c6fe7b042f2764cf8c84002be854/pymongoshell-1.2.1b5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c3589ba3efa4d9352ceb84e77e6bad553cf92674d096dddbcd1f79594be461b",
        "md5": "c22c9903fdd1aa5c3f77a391c0054107",
        "sha256": "3b1a8565b25a52295006e9683ba585297d70f92238eb8b93be91a5857c57e5bc"
      },
      "downloads": -1,
      "filename": "pymongoshell-1.2.1b5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c22c9903fdd1aa5c3f77a391c0054107",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 29890,
      "upload_time": "2020-06-10T14:12:56",
      "upload_time_iso_8601": "2020-06-10T14:12:56.634651Z",
      "url": "https://files.pythonhosted.org/packages/2c/35/89ba3efa4d9352ceb84e77e6bad553cf92674d096dddbcd1f79594be461b/pymongoshell-1.2.1b5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "748e1b1036f53e4884eb0ab9bfb15df4b845c6fe7b042f2764cf8c84002be854",
        "md5": "23220cfbabcd0825946267b273878461",
        "sha256": "7a84ab219dba72eecab991a58daaef6dd3fec7812251c2eecb7a8b8aa5f28b09"
      },
      "downloads": -1,
      "filename": "pymongoshell-1.2.1b5.tar.gz",
      "has_sig": false,
      "md5_digest": "23220cfbabcd0825946267b273878461",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 27908,
      "upload_time": "2020-06-10T14:12:58",
      "upload_time_iso_8601": "2020-06-10T14:12:58.967601Z",
      "url": "https://files.pythonhosted.org/packages/74/8e/1b1036f53e4884eb0ab9bfb15df4b845c6fe7b042f2764cf8c84002be854/pymongoshell-1.2.1b5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}