{
  "info": {
    "author": "pyprg",
    "author_email": "pyprg@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dssex\r\n\r\n## Experimental Distribution System State Estimator\r\n\r\nPrototype of a balanced medium voltage network state estimator\r\n(distribution system state estimator - DSSE). The prototype is intended\r\nfor studying state estimation with tiny details of network configurations.\r\n\r\nValues are processed 'per unit'.\r\n\r\n## Domain\r\n\r\n**dssex** focusses on problem formulation. Automatic Differentiation and\r\ncontrol of numerical computation is provided by the CasADi package\r\nhttps://web.casadi.org/ which delegates solving of the non-linear programs to\r\nIPOPT https://coin-or.github.io/Ipopt/ which in turn deploys MUMPS as a solver\r\nfor linear subproblems. IPOPT and MUMPS are installed with CasADi.\r\n(CasADi supports other solvers, including commercial ones.)\r\nPre- and post-processing is supported by Pandas https://pandas.pydata.org/.\r\n\r\nNon-goals:\r\n\r\n    * detection of faulty measurements\r\n    * performance\r\n\r\n## Kick Start\r\n\r\n__dssex.print_power_flow(*args)__ calculates power flow for a given network\r\nand prints the results. If args are not provided the function calculates\r\nthe power flow for a simple configuration, prints this simple configuration\r\nand the results.\r\n\r\n## Abstract Elements\r\n\r\n**dssex** processes two types of network devices and connectivity nodes.\r\n\r\nTransformers and lines share the PI-equivalent circuit. Both are mapped to the\r\n**Branch** type. The same is true for series capacitors.\r\n\r\nLoads, PV/PQ-generators, batteries, and shunt capacitors are instances of\r\n**Injection**. Injections have attributes P10 and Q10 for active and reactive\r\npower at voltage of 1&nbsp;pu and Exp_v_p and Exp_v_q for modeling the voltage\r\ndependency. The voltage exponents of the injection instances Exp_v_p,\r\nExp_v_q are set to 0 for PQ-generators, constant and measured loads. Those\r\ninjections and the injections of shunt capacitors are not scaled. Injections\r\nof shunt capacitors have an active power setting P10 of 0 and a negative\r\nreactive power setting Q10. Its voltage exponent for reactive power Exp_v_q\r\nis 2 (constant reactance). Injections of loads can have different voltage\r\nexponents and can be scaled during estimation.\r\n\r\nThe optimization problem is setup using instance of:\r\n\r\n    * branch (with one or two taps) (line, transformer (winding), series capacitor)\r\n    * injection (consumer, generator, shunt capacitor, battery)\r\n    * node (given by reference id from other elements only)\r\n    * slack node, marker of a node, source of given complex voltage\r\n    * given flow value (PQI-measurements, real value)\r\n    * given node value (measurement or setpoint of voltage, real value)\r\n\r\n## Math Aproach\r\n\r\nIPOPT is an Interior Point solver which minimizes a scalar-valued objective\r\nfunction with respect to multiple constraints of different types\r\n(equality, smaller than, ...).\r\n\r\nThe estimation goal is to scale injections in order to meet the measured\r\nvalues or setpoints as accurately as possible. **dssex** creates a\r\n'non-linear program' consisting of constraint formulations and an\r\nobjective function.\r\n\r\nThe objective function is the sum of terms having the structure\r\n(measured_value_or_setpoint - calculated_value)\\*\\*2. The search is\r\nan iterative process requiring a start value. A part of the constraints\r\nare the power flow relations. The sum of current flowing through branches\r\ninto a node equals the injected current&nbsp;- except for slacks\r\n(current injection method).\r\n\r\n    Y * V - I = 0          Y - complex branch admittance matrix\r\n                           V - complex node voltage vector\r\n                           I - complex node current vector\r\n\r\nScaling factors and node voltages are the results of the optimization process.\r\nVariables for voltages and factors are named decision variables. The injected\r\nnode current I is expressed in terms of the node voltages and scaling factors.\r\nThe objective function is also expressed in decision variables and attributes\r\nof the devices and the topology. P_calculated in the term of an active power\r\nmeasurement at the terminals of a branch (P_measured - P_calculated)\\*\\*2,\r\nfor example, is expressed in decision variables of the node voltages and\r\nadmittance values of the branch.\r\n\r\nInitial node voltages for the optimization process are currently calculated\r\nby a rootfinding function created and solved by CasADi (using IPOPT).\r\n\r\nThe complete estimation process can consist of several minimization steps.\r\nEach step has a specific objective funtion. E.g. after opimizing towards\r\nP/Q measurements the next step might optimize to meet the voltage\r\nmeasurements/setpoints. P and Q values of the first step can be\r\nfixed by adding constraints accordingly. A separate handling of flow and\r\nvoltage measurements and optimization of additional criteria is thus possible.\r\nThis split avoids numeric problems created by different magnitudes of\r\nvoltages, powers and currents. Weighting factors shall be avoided.\r\nIncluding additional (consistent) measurements shall yield better results.\r\n\r\nFunction **estim.estimate** implements described method.\r\n\r\n## Separate Real and Imaginary Parts\r\n\r\nThe non-linear solver and the CasADi-package do not support complex numbers.\r\nHence, complex values are calculated with separate real and imaginary parts.\r\nEach complex number is transformed in a 2x2-matrix:\r\n\r\n         +-      -+\r\n         | Re -Im |          C  - complex number\r\n    C -> |        |          Re - real part of complex number\r\n         | Im  Re |          Im - imaginary part of complex number\r\n         +-      -+\r\n\r\nMultiplication of two complex number expressed as matrices is equivalent to\r\nmultiplication of two matrices.\r\n\r\n    +-        -+   +-        -+   +-                                         -+\r\n    | Yre -Yim |   | Vre -Vim |   | (Yre*Vre - Yim*Vim)  -(Yre*Vim + Yim*Vre) |\r\n    |          | * |          | = |                                           |\r\n    | Yim  Yre |   | Vim  Vre |   | (Yim*Vre + Yre*Vim)   (Yre*Vre - Yim*Vim) |\r\n    +-        -+   +-        -+   +-                                         -+\r\n\r\n## Numeric Power Flow Calculation and Result Processing\r\n\r\nFunction **pfcnum.calculate_power_flow** solves the non-linear\r\npower-flow-problem. It is an experimental implementation deploying the\r\nschema of separated real and imaginary parts of complex values internally while\r\naccepting an egrid.model.Model as input and returning a vector of\r\ncomplex voltages.\r\n\r\nFunction **pfcnum.calculate_electric_data** accepts an egrid.model.Model and\r\na voltage vector as input and calculates the power and current flow for\r\nbranches and injections as well as losses for branches. The returned\r\nobject additionally provides a method for calculating the residual node current\r\nwhich can be used to evaluate the quality of the obtained estimation and\r\npower flow calculation results.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pyprg/dssex",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dssex",
    "package_url": "https://pypi.org/project/dssex/",
    "platform": null,
    "project_url": "https://pypi.org/project/dssex/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pyprg/dssex/issues",
      "Homepage": "https://github.com/pyprg/dssex"
    },
    "release_url": "https://pypi.org/project/dssex/0.0.3/",
    "requires_dist": [
      "casadi (==3.5.5.post2)",
      "egrid (==0.0.3)",
      "numpy (==1.22.3)",
      "pandas (==1.4.0)",
      "scipy (==1.8.0)"
    ],
    "requires_python": "==3.9",
    "summary": "Means for experimental State Estimation of electric Distribution Networks",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17197895,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a6d27cadb57896bf5f5aca9db0e11faaab074c030a9def006285692ff792101",
          "md5": "5e9dc43bd70cec47babe3e3d472f0af2",
          "sha256": "a06f636ce91a7fa176f34d541fc890c24d056931b4c817b18ea70890aa604007"
        },
        "downloads": -1,
        "filename": "dssex-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e9dc43bd70cec47babe3e3d472f0af2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.9",
        "size": 55675,
        "upload_time": "2023-03-07T23:57:02",
        "upload_time_iso_8601": "2023-03-07T23:57:02.180149Z",
        "url": "https://files.pythonhosted.org/packages/7a/6d/27cadb57896bf5f5aca9db0e11faaab074c030a9def006285692ff792101/dssex-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d8a18917dc29ed0b84fc8eb835e670a637a2afa71b8729b94407b7a3ebac4a5",
          "md5": "2792dad337a45c2fa4807699c061d53d",
          "sha256": "aaf88507da3a2e12db0d76410cfecfbb59f56a6726137aac79d4df381a2ff77f"
        },
        "downloads": -1,
        "filename": "dssex-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2792dad337a45c2fa4807699c061d53d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "==3.9",
        "size": 53434,
        "upload_time": "2023-03-07T23:57:04",
        "upload_time_iso_8601": "2023-03-07T23:57:04.386842Z",
        "url": "https://files.pythonhosted.org/packages/1d/8a/18917dc29ed0b84fc8eb835e670a637a2afa71b8729b94407b7a3ebac4a5/dssex-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a6d27cadb57896bf5f5aca9db0e11faaab074c030a9def006285692ff792101",
        "md5": "5e9dc43bd70cec47babe3e3d472f0af2",
        "sha256": "a06f636ce91a7fa176f34d541fc890c24d056931b4c817b18ea70890aa604007"
      },
      "downloads": -1,
      "filename": "dssex-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5e9dc43bd70cec47babe3e3d472f0af2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "==3.9",
      "size": 55675,
      "upload_time": "2023-03-07T23:57:02",
      "upload_time_iso_8601": "2023-03-07T23:57:02.180149Z",
      "url": "https://files.pythonhosted.org/packages/7a/6d/27cadb57896bf5f5aca9db0e11faaab074c030a9def006285692ff792101/dssex-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d8a18917dc29ed0b84fc8eb835e670a637a2afa71b8729b94407b7a3ebac4a5",
        "md5": "2792dad337a45c2fa4807699c061d53d",
        "sha256": "aaf88507da3a2e12db0d76410cfecfbb59f56a6726137aac79d4df381a2ff77f"
      },
      "downloads": -1,
      "filename": "dssex-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2792dad337a45c2fa4807699c061d53d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "==3.9",
      "size": 53434,
      "upload_time": "2023-03-07T23:57:04",
      "upload_time_iso_8601": "2023-03-07T23:57:04.386842Z",
      "url": "https://files.pythonhosted.org/packages/1d/8a/18917dc29ed0b84fc8eb835e670a637a2afa71b8729b94407b7a3ebac4a5/dssex-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}