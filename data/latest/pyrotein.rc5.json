{
  "info": {
    "author": "Cong Wang",
    "author_email": "wangimagine@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n<!-- What is this for? -->\n\n## Get started with `pyrotein`\n\nA tiny package for structure analysis of macromolecules.  Atomic coordinates\nretrieved from a PDB file are stored in two formats: **list** and\n**dictionary**.  So you can create your own methods on top of either format.\nThis package provides structure analysis capability based on distance matrix.\n\n\n## Install with `pip`\n\n```\npip install git+https://github.com/carbonscott/pyrotein --upgrade --user\n```\n\nIf upgrading doesn't work as expected, run `pip uninstall pyrotein` before\ninstalling it.  \n\n\n<!-- Why it might be a good choice? -->\n\n<!-- Minimal dependency -->\n\n## Dependencies\n\nThis package has only one dependency -- [`numpy`](https://numpy.org/).  \n\n### Why this package doesn't come with a visualization tool?\n\nYou can create graphics using your preferred visualization tools.  For\nsimplicity, it's a design choice not to include a specific visualization library\nin `pyrotein`.  However, examples of using `Gnuplot` and `matplotlib` are\nincluded in the `examples` directory.  \n\nThe colorschemes used in RMSD distance matrix and SVD analysis are inspired by\n[this paper](https://academic.oup.com/nar/article/44/15/7457/2457750) from Zhong Ren.  \n\n## Basic structure analysis capabilities\n\n### Import the library\n\n```Python\nimport pyrotein as pr\n```\n\n### Load a PDB structure\n\nThe following code snippet loads a PDB file `6cmo.pdb` under `pdb` directory.  \n\n```Python\nimport pyrotein as pr\nimport os\n\n# Read coordinates from a PDB file...\ndrc       =  \"pdb\"\npdb       =  \"6cmo\"\nfl_pdb    = f\"{pdb}.pdb\"\npdb_path  = os.path.join(drc, fl_pdb)\natoms_pdb = pr.atom.read(pdb_path)\n```\n\n### Create a lookup table to navigate the molecule\n\nThe method `pr.atom.read` returns molecular information encapsulated in a Python\nList.  However, a lookup table can be very handy for tasks such as accesssing a\nparticular atom `CA` from residue `1002` in chain `A`.  The following example\nshows how to achieve it using lookup table.\n\n#### Access an atom\n\n```Python\n# Create a lookup table for this pdb...\natom_dict = pr.atom.create_lookup_table(atoms_pdb)\n\n# Demo: Access atom `CA` from residue 1002 in chain A\natom_dict[\"A\"][1002][\"CA\"]\n```\n\n#### Select a segment by range\n\nThe following example demos how to select a segment of protein that represents\nvisual rhodopsin from entry `6cmo`.  \n\n```Python\n# Create a lookup table for this pdb...\natom_dict = pr.atom.create_lookup_table(atoms_pdb)\n\n# Fetch residues that form rhodopsin...\nchain = \"A\"\nnterm = 1\ncterm = 348\nrho_dict = pr.atom.extract_segment(atom_dict, chain, nterm, cterm)\n```\n\n## Establish metadata table\n\nA metadata table keeps track of protein information (PDB, ligand, method, etc).\nIt is vital in understanding clustering in the SVD analysis stage.  Meanwhile,\nthe metadata table should be computer readable.  For example, I keep metadata in\na `xlsx` file that can be read by a Python module `openpyxl`.  If you decide to\nuse the same module, install it by `pip install openpyxl --user`.  Check out\n`loaddata.py` in `examples` directory to see how to load data from an `xlsx`\nusing `openpyxl`.  \n\n![Metadata table](./figures/metadata.rhodopsin.png)\n\n## Advanced structure analysis capabilities\n\n`pyrotein` is initially designed to perform distance matrix analysis of protein\nstructures.  Distance matrix encodes pairwise atomic distance found in a protein\nstructure.  \n\n![Distance matrix of a bovine rhodopsin structure](./figures/diag.distancematrix.png)\n\n### Obtain a distance matrix\n\n#### Main chain only (N, CA, C, O)\n\n```Python\nimport os\nimport numpy as np\nimport pyrotein as pr\nfrom loaddata import load_xlsx, label_TMs\nfrom display import plot_dmat\n\n# Specify chains to process...\nfl_chain = \"chains.comp.xlsx\"\nlines    = load_xlsx(fl_chain)\ndrc      = \"pdb\"\n\n# Define atoms used for distance matrix analysis...\npeptide = [\"N\", \"CA\", \"C\", \"O\"]\n\n# Specify the range of atoms from adrenoceptor...\nnterm = 1\ncterm = 322\n\n# The first element is to facilitate the indexing during assignment\nlen_segments = [ 0,\n                 cterm - nterm + 1,\n               ]\nlen_peptide = np.sum(len_segments) * len(peptide)\n\ndrc_dmat = \"dmats\"\npal = \"set palette defined ( 0 '#F6FF9E', 0 'white', 0.5 'blue', 1 'navy' )\"\nfor i_fl, line in enumerate(lines[-1]):\n    # Unpack parameters\n    _, pdb, chain, species = line[:4]\n    betatype = line[10]\n\n    # Read coordinates from a PDB file...\n    fl_pdb    = f\"{pdb}.pdb\"\n    pdb_path  = os.path.join(drc, fl_pdb)\n    atoms_pdb = pr.atom.read(pdb_path)\n\n    # Create a lookup table for this pdb...\n    atom_dict = pr.atom.create_lookup_table(atoms_pdb)\n\n    # Obtain coordinates...\n    xyzs = pr.atom.extract_xyz_by_atom(peptide, atom_dict, chain, nterm, cterm)\n\n    # Calculate distance matrix...\n    dmat = pr.distance.calc_dmat(xyzs, xyzs)\n\n    # It is a common practice to visualize a few distance matrix.  \n    # Here is just a way how I use Gnuplot to do so, but you can use\n    # your favourite tool to visualize it.  \n    fl_dmat = os.path.join(drc_dmat, f\"{pdb}.{chain}.dmat\")\n    plot_dmat(dmat, fl_dmat, lbl = {}, palette = pal, NaN = 0)\n```\n\n#### Main chain + side chain\n\nIf all atoms in main chain and side chain are your interests, `pyrotein` is\ncapable of extracting coordinates and build up data correspondence by means of\nsequence alignment result (You have to be careful about the result of sequecne\nalignment.  It can be problematic).  Sequecne related functionalities are\nsupposed to be found in `pyrotein.fasta` submodule.  \n\n```Python\nimport os\nimport numpy as np\nimport pyrotein as pr\nfrom loaddata import load_xlsx\nfrom display import plot_dmat\n\n# [[[ OBTAIN THE CONSENSUS SEQUENCE ]]]\n# Read the sequence alignment result...\n# [WARNING] !!!sequence alignment is not trustworthy\nfl_aln   = 'seq.align.fasta'\nseq_dict = pr.fasta.read(fl_aln)\n\n# Obtain the consensus sequence (super seq)...\ntally_dict = pr.fasta.tally_resn_in_seqs(seq_dict)\nsuper_seq  = pr.fasta.infer_super_seq(tally_dict)\n\n\n# [[[ FIND SIZE OF DISTANCE MATRIX ]]]\n# Get the sequence index (alignment) on the n-term side...\nnseqi = pr.fasta.get_lseqi(super_seq)\n\n# User defined range...\nnterm, cterm = 1, 322\nlen_seg = cterm - nterm + 1\nsuper_seg = super_seq[nseqi : nseqi + len_seg]\n\n# Load constant -- atomlabel...\nlabel_dict = pr.atom.constant_atomlabel()\naa_dict    = pr.atom.constant_aminoacid_code()\n\n# [[[ ANALYZE PDB ENTRIES ]]]\n# Specify chains to process...\nfl_chain = \"chains.comp.xlsx\"\nlines    = load_xlsx(fl_chain, sheet = \"Sheet1\")\ndrc      = \"pdb\"\ndrc_dmat = \"dmats.full\"\npal = \"set palette defined ( 0 '#F6FF9E', 0 'white', 0.5 'blue', 1 'navy' )\"\nfor i_fl, line in enumerate(lines[-1:]):\n    # Unpack parameters\n    _, pdb, chain, _ = line[:4]\n\n    # Read coordinates from a PDB file...\n    fl_pdb    = f\"{pdb}.pdb\"\n    pdb_path  = os.path.join(drc, fl_pdb)\n    atoms_pdb = pr.atom.read(pdb_path)\n\n    # Create a lookup table for this pdb...\n    atom_dict = pr.atom.create_lookup_table(atoms_pdb)\n\n    # Obtain the target protein by range...\n    tar_seq = seq_dict[f\"{pdb}_{chain}\"]\n    tar_seg = tar_seq[nseqi : nseqi + len_seg]\n\n    # Standardize sidechain atoms...\n    pr.atom.standardize_sidechain(atom_dict)\n\n    # Obtain coordinates...\n    xyzs = pr.atom.extract_xyz_by_seq(tar_seg, super_seg, atom_dict, chain, nterm, cterm)\n\n    # Calculate distance matrix...\n    dmat = pr.distance.calc_dmat(xyzs, xyzs)\n\n    fl_dmat = os.path.join(drc_dmat, f\"{pdb}.{chain}.dmat\")\n    plot_dmat(dmat, fl_dmat, lbl = {}, palette = pal, NaN = 0)\n```\n\nDistance matrix that depict both main chain and side chain.\n\n![](./figures/1f88.A.dmat.png)\n\n### RMSD distance matrix (for structure alignment)\n\nWhat can we do by putting all distance matrix together like below?\n\n![](./figures/table.distancematrix.png)\n\nIf you consider a distance matrix is a picture full of pixels, RMSD distance\nmatrix encodes RMSD of all pixel values at a specific location.  RMSD distance\nmatrix enables the understanding of rigidity of a protein, that is to say,\nsmaller deviation means more rigid, and vice versa.  So it can provide a\nso-called rigid protein framework for structure alignment.  \n\n![](./figures/rmsd.align.png)\n\nOf course, the analysis can be carried out on both main chain only or main +\nside chain scenarios.  You can see how much details are captured while\nconsidering both main chain and side chain for each residue.  \n\n![](./figures/rmsds.png)\n\n\n### SVD analysis to understand the similarities and differences of protein structures\n\nA significant protein structure analysis `pyrotein` enables is SVD analysis.  An\nexample code to enable it:\n\n```Python\nimport numpy as np\nimport pyrotein as pr\nimport os\nfrom loaddata import load_xlsx\n\n# [[[ OBTAIN THE CONSENSUS SEQUENCE ]]]\n# Read the sequence alignment result...\n# [WARNING] !!!sequence alignment is not trustworthy, need to check manually\nfl_aln   = 'seq.align.fasta'\nseq_dict = pr.fasta.read(fl_aln)\n\n# Obtain the consensus sequence (super seq)...\ntally_dict = pr.fasta.tally_resn_in_seqs(seq_dict)\nsuper_seq  = pr.fasta.infer_super_seq(tally_dict)\n\n\n# [[[ FIND SIZE OF DISTANCE MATRIX ]]]\n# Get the sequence index (alignment) on the n-term side...\nnseqi = pr.fasta.get_lseqi(super_seq)\n\n# User defined range...\nnterm, cterm = 1, 322\nlen_seg = cterm - nterm + 1\nsuper_seg = super_seq[nseqi : nseqi + len_seg]\n\n# Load constant -- atomlabel...\nlabel_dict = pr.atom.constant_atomlabel()\naa_dict    = pr.atom.constant_aminoacid_code()\n\n# Calculate the total length of distance matrix...\nlen_dmat = np.sum( [ len(label_dict[aa_dict[i]]) for i in super_seg ] )\n\n# [[[ ANALYZE PDB ENTRIES ]]]\n# Specify chains to process...\nfl_chain = \"chains.comp.xlsx\"\nlines    = load_xlsx(fl_chain, sheet = \"Sheet1\")\ndrc      = \"pdb\"\n## dmats = np.zeros((len(lines), len_dmat, len_dmat))\nlen_lower_tri = (len_dmat * len_dmat - len_dmat) // 2\ndmats = np.zeros((len(lines), len_lower_tri))\n\n# Process each entry...\nfor i_fl, line in enumerate(lines):\n    # Unpack parameters\n    _, pdb, chain, species = line[:4]\n\n    print(f\"Processing {pdb}_{chain}\")\n\n    # Read coordinates from a PDB file...\n    fl_pdb    = f\"{pdb}.pdb\"\n    pdb_path  = os.path.join(drc, fl_pdb)\n    atoms_pdb = pr.atom.read(pdb_path)\n\n    # Create a lookup table for this pdb...\n    atom_dict = pr.atom.create_lookup_table(atoms_pdb)\n\n    # Obtain the target protein by range...\n    tar_seq = seq_dict[f\"{pdb}_{chain}\"]\n    tar_seg = tar_seq[nseqi : nseqi + len_seg]\n\n    # Standardize sidechain atoms...\n    pr.atom.standardize_sidechain(atom_dict)\n\n    # Obtain coordinates...\n    xyzs = pr.atom.extract_xyz_by_seq(tar_seg, super_seg, atom_dict, chain, nterm, cterm)\n\n    # Calculate distance matrix...\n    dmat = pr.distance.calc_dmat(xyzs, xyzs)\n\n    # Convert dmat into one-dimensional array and keep it in dmats...\n    dmats[i_fl, :] = pr.utils.mat2tril(dmat, offset = -1)\n\n# Replace np.nan with mean across samples...\npr.utils.fill_nan_with_mean(dmats.T, axis = 1)\n\n# SVD...\n# Column as example\n# Row    as feature\nu, s, vh = np.linalg.svd( dmats.T, full_matrices = False )\n\n# Export data for downstream analysis...\nnp.save(\"dmats.full.npy\" , dmats)\nnp.save(\"u.full.npy\" , u)\nnp.save(\"s.full.npy\" , s)\nnp.save(\"vh.full.npy\", vh)\n```\n\nA comparison of left singular values is shown below.  \n\n![](./figures/u02s.png)\n\nIt also distinguishes entries in the analysis better in main + side chain\nscenario.  Check out the follow scatter plot.  (Rotation might require to make\nthem look better.)\n\n![](./figures/c02s.png)\n\n\n## Thoughts behind building data correspondence\n\n### Standardize sidechain atoms\n\nSidechain atoms can be interchangeable, such as `NH1` and `NH2` in `ARG`, `OD1`\nand `ND2` in `ASN`.  The figure below illustrates the possible ambiguous\nscenarios and specifies the swapping rules leading to a standard ordering.  \n\n![](./figures/sidechain.standardize1.png)\n![](./figures/sidechain.standardize2.png)\n\nSample code to consider sidechain atom standardization.  \n\n```Python\nimport pyrotein as pr\nimport numpy as np\nimport os\n\n# Read atomic information...\npdb       = \"1f88\"\nchain     = \"A\"\ndrc_pdb   = \"pdb\"\nfl_pdb    = f\"{pdb}.pdb\"\npath_pdb  = os.path.join(drc_pdb, fl_pdb)\natom_list = pr.atom.read(path_pdb)\natom_dict = pr.atom.create_lookup_table(atom_list)\n\n# Standardize sidechain atoms...\npr.atom.standardize_sidechain(atom_dict)\n```\n\n\n### Examples\n\nThe `examples` directory contains two examples about distance matrix and RMSD\ndistance matrix.  Two visualization choices are provided via `Gnuplot` and\n`matplotlib`.  \n\n## Caveats\n\nThe warning `RuntimeWarning: Mean of empty slice` is triggered by `np.nanmean`\nwhen the input array has nothing but `np.nan` values.  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/carbonscott/pyrotein",
    "keywords": "PDB,structure biology,protein,analysis",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyrotein",
    "package_url": "https://pypi.org/project/pyrotein/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyrotein/",
    "project_urls": {
      "Homepage": "https://github.com/carbonscott/pyrotein"
    },
    "release_url": "https://pypi.org/project/pyrotein/0.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A tiny package for structure analysis of macromolecules.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10296443,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8906c9310a498e670bb76138c2b3a1ed7a76658c9e7d3a9f2cdacd086802d9bf",
          "md5": "b206f6ad340b0db4394906fefde59dfd",
          "sha256": "1b9308078047315b346ca41cff243b212a8e898e75619ea102018951cc0d5d6a"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b206f6ad340b0db4394906fefde59dfd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10629,
        "upload_time": "2020-12-15T00:21:37",
        "upload_time_iso_8601": "2020-12-15T00:21:37.340447Z",
        "url": "https://files.pythonhosted.org/packages/89/06/c9310a498e670bb76138c2b3a1ed7a76658c9e7d3a9f2cdacd086802d9bf/pyrotein-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "026e9144d4a516407f55d94c285e8e633acafa870ef65c621fb19939545f2db5",
          "md5": "1e751d71a8a92d444445fc851acd33f3",
          "sha256": "5cc060d62548d25632ad86692d93d5a85646b81931001e9880e24c44609d393e"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1e751d71a8a92d444445fc851acd33f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10836,
        "upload_time": "2020-12-15T00:21:38",
        "upload_time_iso_8601": "2020-12-15T00:21:38.649379Z",
        "url": "https://files.pythonhosted.org/packages/02/6e/9144d4a516407f55d94c285e8e633acafa870ef65c621fb19939545f2db5/pyrotein-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "239e8423419e3d7ef2ac5e79f808ad436b4542f301f5a21119202ca013845bd6",
          "md5": "40869a93ebc6654cb2045d226dd6f38d",
          "sha256": "47f14621c657e5a36eb5b76a9f6705e99cd6ebff818649ee60b4c64073d4dae4"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40869a93ebc6654cb2045d226dd6f38d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11316,
        "upload_time": "2020-12-16T05:44:32",
        "upload_time_iso_8601": "2020-12-16T05:44:32.930157Z",
        "url": "https://files.pythonhosted.org/packages/23/9e/8423419e3d7ef2ac5e79f808ad436b4542f301f5a21119202ca013845bd6/pyrotein-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "825e7ffb495895ad700bfef3b457c3f8949ab07fa0bbbeeb4b3efe9050fdffcc",
          "md5": "9184c2dda8c744bc753a4fe2470e11c5",
          "sha256": "574e0a65d037d3d154cd818132edbf23fddf689f741a35bef85110fda92b769b"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9184c2dda8c744bc753a4fe2470e11c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11530,
        "upload_time": "2020-12-16T05:44:34",
        "upload_time_iso_8601": "2020-12-16T05:44:34.307840Z",
        "url": "https://files.pythonhosted.org/packages/82/5e/7ffb495895ad700bfef3b457c3f8949ab07fa0bbbeeb4b3efe9050fdffcc/pyrotein-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3ae00120a38c062cebb3d0f9317e63f03857f16e069d9df24a99202ffdfa372",
          "md5": "ae40ac8fec9eb3e6501bdfbddc3c132e",
          "sha256": "2d0f4a9d5519a3ad3dfe8616aaa43f7a327f4a0c911e10b3e3cdfc554e72b60a"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae40ac8fec9eb3e6501bdfbddc3c132e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11433,
        "upload_time": "2020-12-16T16:13:25",
        "upload_time_iso_8601": "2020-12-16T16:13:25.742318Z",
        "url": "https://files.pythonhosted.org/packages/c3/ae/00120a38c062cebb3d0f9317e63f03857f16e069d9df24a99202ffdfa372/pyrotein-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc911fc688ac3ccb2ad4c45c8a39b00a8dabc31747e7a52dab0f115e1d1da41a",
          "md5": "8b4cda037057b62c8a9beb14f9d36faa",
          "sha256": "bdee7d91e86d355f51b4af39c5c3470186bb5f1a454d68465136b7ff68941148"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8b4cda037057b62c8a9beb14f9d36faa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11735,
        "upload_time": "2020-12-16T16:13:27",
        "upload_time_iso_8601": "2020-12-16T16:13:27.487657Z",
        "url": "https://files.pythonhosted.org/packages/dc/91/1fc688ac3ccb2ad4c45c8a39b00a8dabc31747e7a52dab0f115e1d1da41a/pyrotein-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09e07019f874229197aa7414be58dbee6cb0378dfb7197658d13a1901aedf4f4",
          "md5": "773d106e1e99accd7ede3a595846132a",
          "sha256": "19fc9242115b23114773c10f6b3a29df564ac4997f051fcd1bfa9764d345dc69"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "773d106e1e99accd7ede3a595846132a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11422,
        "upload_time": "2020-12-18T03:08:46",
        "upload_time_iso_8601": "2020-12-18T03:08:46.735760Z",
        "url": "https://files.pythonhosted.org/packages/09/e0/7019f874229197aa7414be58dbee6cb0378dfb7197658d13a1901aedf4f4/pyrotein-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb8630cf0143e2b37f5b32810fd1d8c59b4ac44f533bb1b6d5015adcd0d7397b",
          "md5": "2eee7131d463f5cf609d9e285f65a51c",
          "sha256": "55549769ed521626929bef41952b5c301340cd45f1de2b8e1cc00620a974aab7"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2eee7131d463f5cf609d9e285f65a51c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10739,
        "upload_time": "2020-12-18T03:08:47",
        "upload_time_iso_8601": "2020-12-18T03:08:47.917242Z",
        "url": "https://files.pythonhosted.org/packages/fb/86/30cf0143e2b37f5b32810fd1d8c59b4ac44f533bb1b6d5015adcd0d7397b/pyrotein-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61c5b4d806fc25afe5dbae87b0ea90af14a5a3080f72509c27cbb8be140e681f",
          "md5": "8ff97230bf807766e5a9ffd7e4533e9a",
          "sha256": "195bee446548e41a64f9beaab4af7afbcb8313f645513e64c5b2550c24ab6414"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ff97230bf807766e5a9ffd7e4533e9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18539,
        "upload_time": "2021-05-08T19:26:37",
        "upload_time_iso_8601": "2021-05-08T19:26:37.454650Z",
        "url": "https://files.pythonhosted.org/packages/61/c5/b4d806fc25afe5dbae87b0ea90af14a5a3080f72509c27cbb8be140e681f/pyrotein-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c00679beeaeb314b611d1f3f8bdd2faa9dbcc67255e19989c3f903c24af9482",
          "md5": "182f8b8cd2169cf6cefb197c98b08df4",
          "sha256": "ddba1eb13b62e61c614c72f92700ab4ddb420dbda700453937786a1853e25b4a"
        },
        "downloads": -1,
        "filename": "pyrotein-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "182f8b8cd2169cf6cefb197c98b08df4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19561,
        "upload_time": "2021-05-08T19:26:38",
        "upload_time_iso_8601": "2021-05-08T19:26:38.695799Z",
        "url": "https://files.pythonhosted.org/packages/2c/00/679beeaeb314b611d1f3f8bdd2faa9dbcc67255e19989c3f903c24af9482/pyrotein-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61c5b4d806fc25afe5dbae87b0ea90af14a5a3080f72509c27cbb8be140e681f",
        "md5": "8ff97230bf807766e5a9ffd7e4533e9a",
        "sha256": "195bee446548e41a64f9beaab4af7afbcb8313f645513e64c5b2550c24ab6414"
      },
      "downloads": -1,
      "filename": "pyrotein-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ff97230bf807766e5a9ffd7e4533e9a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18539,
      "upload_time": "2021-05-08T19:26:37",
      "upload_time_iso_8601": "2021-05-08T19:26:37.454650Z",
      "url": "https://files.pythonhosted.org/packages/61/c5/b4d806fc25afe5dbae87b0ea90af14a5a3080f72509c27cbb8be140e681f/pyrotein-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c00679beeaeb314b611d1f3f8bdd2faa9dbcc67255e19989c3f903c24af9482",
        "md5": "182f8b8cd2169cf6cefb197c98b08df4",
        "sha256": "ddba1eb13b62e61c614c72f92700ab4ddb420dbda700453937786a1853e25b4a"
      },
      "downloads": -1,
      "filename": "pyrotein-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "182f8b8cd2169cf6cefb197c98b08df4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19561,
      "upload_time": "2021-05-08T19:26:38",
      "upload_time_iso_8601": "2021-05-08T19:26:38.695799Z",
      "url": "https://files.pythonhosted.org/packages/2c/00/679beeaeb314b611d1f3f8bdd2faa9dbcc67255e19989c3f903c24af9482/pyrotein-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}