{
  "info": {
    "author": "Yukihiko Shinoda",
    "author_email": "yuk.hik.future@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Multimedia :: Graphics :: Capture",
      "Topic :: Multimedia :: Graphics :: Graphics Conversion",
      "Topic :: Multimedia :: Sound/Audio",
      "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
      "Topic :: Multimedia :: Sound/Audio :: Conversion",
      "Topic :: Multimedia :: Video",
      "Topic :: Multimedia :: Video :: Capture",
      "Topic :: Multimedia :: Video :: Conversion",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System",
      "Topic :: System :: Archiving",
      "Topic :: System :: Archiving :: Compression",
      "Topic :: System :: Archiving :: Packaging",
      "Typing :: Typed"
    ],
    "description": "# Asynchronous FFmpeg\n\n[![Test](https://github.com/yukihiko-shinoda/asyncffmpeg/workflows/Test/badge.svg)](https://github.com/yukihiko-shinoda/asyncffmpeg/actions?query=workflow%3ATest)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/d0715bdfc5dd7725e0a2/test_coverage)](https://codeclimate.com/github/yukihiko-shinoda/asyncffmpeg/test_coverage)\n[![Maintainability](https://api.codeclimate.com/v1/badges/d0715bdfc5dd7725e0a2/maintainability)](https://codeclimate.com/github/yukihiko-shinoda/asyncffmpeg/maintainability)\n[![Code Climate technical debt](https://img.shields.io/codeclimate/tech-debt/yukihiko-shinoda/asyncffmpeg)](https://codeclimate.com/github/yukihiko-shinoda/asyncffmpeg)\n[![Updates](https://pyup.io/repos/github/yukihiko-shinoda/asyncffmpeg/shield.svg)](https://pyup.io/repos/github/yukihiko-shinoda/asyncffmpeg/)\n[![Python versions](https://img.shields.io/pypi/pyversions/asyncffmpeg.svg)](https://pypi.org/project/asyncffmpeg)\n[![Twitter URL](https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Fgithub.com%2Fyukihiko-shinoda%2Fasyncffmpeg)](http://twitter.com/share?text=Asynchronous%20FFmpeg&url=https://pypi.org/project/asyncffmpeg/&hashtags=python)\n\nSupports async / await pattern for FFmpeg operations.\n\n## Advantage\n\n1. Support async / await pattern for FFmpeg operations\n2. Support Ctrl + C\n\n### 1. Support async / await pattern for FFmpeg operations\n\nThis package supports FFmpeg asynchronously invoke with async / await pattern\nwrapping [`ffmpeg.run_async()`] of [ffmpeg-python] and returned [`subprocess.Popen`].\n\nThe async / await syntax makes asynchronous code as:\n\n- Simple\n- Readable\n\n### 2. Support Ctrl + C\n\nUser can stop FFmpeg process gracefully by Ctrl + C.\nThis works as same as sending `q` key to running FFmpeg.\nThis action is guaranteed by pytest.\n\n## Quickstart\n\n### 1. Install\n\n```console\npip install asyncffmpeg\n```\n\n### 2. Implement\n\n`asyncffmpeg.FFmpegCoroutine` class has asynchronous method: `execute()`.\nTo run concurrently, it requires not multi threading but multi processing\nsince FFmpeg process is CPU-bound operation.\nThe package [`asynccpu`] is helpful to simple implement.\n\nEx:\n\n```python\nimport ffmpeg\nfrom asynccpu import ProcessTaskPoolExecutor\nfrom asyncffmpeg import FFmpegCoroutineFactory, StreamSpec\n\n\nasync def create_stream_spec_copy() -> StreamSpec:\n    stream = ffmpeg.input(\"input.mp4\")\n    return ffmpeg.output(stream, \"output1.mp4\", c=\"copy\")\n\n\nasync def create_stream_spec_filter() -> StreamSpec:\n    stream = ffmpeg.input(\"input.mp4\")\n    stream = ffmpeg.filter(stream, \"scale\", 768, -1)\n    return ffmpeg.output(stream, \"output2.mp4\")\n\n\nasync def main() -> None:\n    ffmpeg_coroutine = FFmpegCoroutineFactory.create()\n\n    with ProcessTaskPoolExecutor(max_workers=3, cancel_tasks_when_shutdown=True) as executor:\n        awaitables = (\n            executor.create_process_task(ffmpeg_coroutine.execute, create_stream_spec)\n            for create_stream_spec in [create_stream_spec_copy, create_stream_spec_filter]\n        )\n        await asyncio.gather(*awaitables)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n#### Why not [`asyncio`] but [`asynccpu`] ?\n\nUnfortunately High-level APIs of [`asyncio`] doesn't support CPU-bound operations\nsince it works based on not [`ProcessPoolExecutor`] but [`ThreadPoolExecutor`].\nWhen we want to run CPU-bound operations concurrently with [`asyncio`],\nwe need to use Low-level APIs which need finer control over the event loop behavior.\n\n### Note\n\nThe argument of [`Coroutine`] requires not \"raw [`Coroutine`] object\" but \"[`Coroutine`] function\"\nsince raw [`Coroutine`] object is not picklable.\n\nThis specification is depend on the one of Python [`multiprocessing`] package:\n\n[multiprocessing — Process-based parallelism]\n\n> Note When an object is put on a queue, the object is pickled\n> and a background thread later flushes the pickled data to an underlying pipe.\n\n<!-- markdownlint-disable-next-line no-inline-html -->\nSee: [Answer: Python multiprocessing PicklingError: Can't pickle <type 'function'> - Stack Overflow]\n\n## API\n\n### FFmpegCoroutineFactory\n\n```python\nclass FFmpegCoroutineFactory:\n    @staticmethod\n    def create(\n        *,\n        time_to_force_termination: int = 8\n    ) -> FFmpegCoroutine:\n```\n\n#### time_to_force_termination: int = 8\n\nThe time limit (second) to wait stopping FFmpeg process gracefully\nwhen send Ctrl + C.\nAt first, subprocess will try to send `q` key to FFmpeg process.\nIn case when FFmpeg process doesn't stop gracefully by time limit,\nsubprocess will terminate process.\n\n### FFmpegCoroutine\n\n```python\nclass FFmpegCoroutine:\n    async def execute(\n        self,\n        create_stream_spec: Callable[[], Awaitable[StreamSpec]],\n        *,\n        after_start: Optional[Callable[[FFmpegProcess], Awaitable]] = None\n    ) -> None:\n```\n\n#### create_stream_spec: Callable[[], Awaitable[StreamSpec]]\n\n[`Coroutine`] function to create [stream spec] for FFmpeg process.\nCreated [stream spec] will be set the first argument of [`ffmpeg.run_async()`] of [ffmpeg-python] inside of `FFmpegCoroutine`.\n[stream spec] is a Stream, list of Streams, or label-to-Stream dictionary mapping\nin [ffmpeg-python].\n\n#### after_start: Optional[Callable[[FFmpegProcess], Awaitable]] = None\n\n[`Coroutine`] function to execute after start FFmpeg process.\n\n## Credits\n\nThis package was created with [Cookiecutter] and the [yukihiko-shinoda/cookiecutter-pypackage] project template.\n\n[`ffmpeg.run_async()`]: https://kkroening.github.io/ffmpeg-python/#ffmpeg.run_async\n[ffmpeg-python]: https://pypi.org/project/ffmpeg-python/\n[`subprocess.Popen`]: https://docs.python.org/3/library/subprocess.html#popen-objects\n[`asyncio`]: https://docs.python.org/3/library/asyncio.html\n[`ProcessPoolExecutor`]: https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor\n[`ThreadPoolExecutor`]: https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor\n[`asynccpu`]: https://pypi.org/project/asynccpu/\n[`Coroutine`]: https://docs.python.org/3/library/asyncio-task.html#coroutines\n[`multiprocessing`]: https://docs.python.org/3/library/multiprocessing.html\n[multiprocessing — Process-based parallelism]: https://docs.python.org/3/library/multiprocessing.html\n<!-- markdownlint-disable-next-line no-inline-html -->\n[Answer: Python multiprocessing PicklingError: Can't pickle <type 'function'> - Stack Overflow]: https://stackoverflow.com/a/8805244/12721873\n[stream spec]: https://ffmpeg.org/ffmpeg.html#Stream-specifiers-1\n[Cookiecutter]: https://github.com/audreyr/cookiecutter\n[yukihiko-shinoda/cookiecutter-pypackage]: https://github.com/audreyr/cookiecutter-pypackage\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yukihiko-shinoda/asyncffmpeg",
    "keywords": "asyncffmpeg",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncffmpeg",
    "package_url": "https://pypi.org/project/asyncffmpeg/",
    "platform": "",
    "project_url": "https://pypi.org/project/asyncffmpeg/",
    "project_urls": {
      "Homepage": "https://github.com/yukihiko-shinoda/asyncffmpeg"
    },
    "release_url": "https://pypi.org/project/asyncffmpeg/1.2.0/",
    "requires_dist": [
      "ffmpeg-python",
      "pywin32 ; sys_platform == \"win32\""
    ],
    "requires_python": ">=3.9",
    "summary": "Supports async / await pattern for FFmpeg operations.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11188100,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cefb19176a29c4eb450c6b7cb4caed83aa6c43a787d98c54525bb30c37ace99c",
          "md5": "5fd89dba64e0c1ad816c353c22ab6295",
          "sha256": "3e2ceef344b88c57801bd85e3d8aef5d237c260800f8c04b04921540ae7deb35"
        },
        "downloads": -1,
        "filename": "asyncffmpeg-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fd89dba64e0c1ad816c353c22ab6295",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 12904,
        "upload_time": "2021-03-18T14:54:55",
        "upload_time_iso_8601": "2021-03-18T14:54:55.947939Z",
        "url": "https://files.pythonhosted.org/packages/ce/fb/19176a29c4eb450c6b7cb4caed83aa6c43a787d98c54525bb30c37ace99c/asyncffmpeg-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccb02738d9950fdc96d0dbc7ebed16cc63e06726dded4249438e3fcef7a65663",
          "md5": "6ecd1d04e62a7431bbc99a0be998936a",
          "sha256": "1b5dd1ec7668fdcde67989322b2b40f7116fcefea861fb3204261f27b3331397"
        },
        "downloads": -1,
        "filename": "asyncffmpeg-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6ecd1d04e62a7431bbc99a0be998936a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14356,
        "upload_time": "2021-03-18T14:54:57",
        "upload_time_iso_8601": "2021-03-18T14:54:57.232052Z",
        "url": "https://files.pythonhosted.org/packages/cc/b0/2738d9950fdc96d0dbc7ebed16cc63e06726dded4249438e3fcef7a65663/asyncffmpeg-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a94fbafb6beb3a94dd284104b8577512ee90e1aeda3dfd7feb5066461aa91070",
          "md5": "abcd89629a604ec7880d37504505ade8",
          "sha256": "55ca519611b3036d42487e1d2360673eec2156d8ae566b7479355edb5548e945"
        },
        "downloads": -1,
        "filename": "asyncffmpeg-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abcd89629a604ec7880d37504505ade8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 13331,
        "upload_time": "2021-03-18T17:17:59",
        "upload_time_iso_8601": "2021-03-18T17:17:59.330381Z",
        "url": "https://files.pythonhosted.org/packages/a9/4f/bafb6beb3a94dd284104b8577512ee90e1aeda3dfd7feb5066461aa91070/asyncffmpeg-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3968379b94cae198e3e2a9ea9010d9a28ed84f91860f84e6651064a9eb47a025",
          "md5": "86da4fe2e131497e4ad1687ed19a970e",
          "sha256": "4725c386c7baaa75903f49835ed65030a6c6b05b0da516c8ee38765f13e8abcb"
        },
        "downloads": -1,
        "filename": "asyncffmpeg-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "86da4fe2e131497e4ad1687ed19a970e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14678,
        "upload_time": "2021-03-18T17:18:00",
        "upload_time_iso_8601": "2021-03-18T17:18:00.456574Z",
        "url": "https://files.pythonhosted.org/packages/39/68/379b94cae198e3e2a9ea9010d9a28ed84f91860f84e6651064a9eb47a025/asyncffmpeg-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63113f68d6d737345ecc8306babecc23697e9b6ed3e8f840f1873497277c3e51",
          "md5": "0e70cfe90f9128c7e5240eff1a808141",
          "sha256": "ec05ce72f5bf4096a51e7d5b613491e8afce8f2c94ec73934ecb6b6191ca547e"
        },
        "downloads": -1,
        "filename": "asyncffmpeg-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e70cfe90f9128c7e5240eff1a808141",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 13919,
        "upload_time": "2021-08-16T04:58:58",
        "upload_time_iso_8601": "2021-08-16T04:58:58.202346Z",
        "url": "https://files.pythonhosted.org/packages/63/11/3f68d6d737345ecc8306babecc23697e9b6ed3e8f840f1873497277c3e51/asyncffmpeg-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dff9c4609611246cd505058ecd97f6c72c248aa7c066896d7311f9bb7c62364a",
          "md5": "480b7e5c83f61c64ce7859a7a6e8c6f9",
          "sha256": "3bbcda5de526698be84c9e5ec1763596fc99df621e7fb850b8d05a27ea772dad"
        },
        "downloads": -1,
        "filename": "asyncffmpeg-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "480b7e5c83f61c64ce7859a7a6e8c6f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14813,
        "upload_time": "2021-08-16T04:58:59",
        "upload_time_iso_8601": "2021-08-16T04:58:59.116867Z",
        "url": "https://files.pythonhosted.org/packages/df/f9/c4609611246cd505058ecd97f6c72c248aa7c066896d7311f9bb7c62364a/asyncffmpeg-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "309bdc693dcbb9cd53b51a8de0570db7f71765a762027476ef4ce8bf4790a93d",
          "md5": "498031e247c70daebd77d486c15bd671",
          "sha256": "1a022ca32eb08ec6f9852f1c43ac53de9714ee93c434c83d1aa6a17a59c023bd"
        },
        "downloads": -1,
        "filename": "asyncffmpeg-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "498031e247c70daebd77d486c15bd671",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 13974,
        "upload_time": "2021-08-16T08:05:47",
        "upload_time_iso_8601": "2021-08-16T08:05:47.273838Z",
        "url": "https://files.pythonhosted.org/packages/30/9b/dc693dcbb9cd53b51a8de0570db7f71765a762027476ef4ce8bf4790a93d/asyncffmpeg-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a22d71a2844f5de785f3416753e72db1e3a21d3e63e07054130b613773b77a56",
          "md5": "5fccfbc1de6fb0779b7784eb69387233",
          "sha256": "f4aeb8200fbace64d28a3e7dffe66dc84780f8d97f0514f96c3c41c9e5102c4b"
        },
        "downloads": -1,
        "filename": "asyncffmpeg-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5fccfbc1de6fb0779b7784eb69387233",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14874,
        "upload_time": "2021-08-16T08:05:48",
        "upload_time_iso_8601": "2021-08-16T08:05:48.223559Z",
        "url": "https://files.pythonhosted.org/packages/a2/2d/71a2844f5de785f3416753e72db1e3a21d3e63e07054130b613773b77a56/asyncffmpeg-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "309bdc693dcbb9cd53b51a8de0570db7f71765a762027476ef4ce8bf4790a93d",
        "md5": "498031e247c70daebd77d486c15bd671",
        "sha256": "1a022ca32eb08ec6f9852f1c43ac53de9714ee93c434c83d1aa6a17a59c023bd"
      },
      "downloads": -1,
      "filename": "asyncffmpeg-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "498031e247c70daebd77d486c15bd671",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 13974,
      "upload_time": "2021-08-16T08:05:47",
      "upload_time_iso_8601": "2021-08-16T08:05:47.273838Z",
      "url": "https://files.pythonhosted.org/packages/30/9b/dc693dcbb9cd53b51a8de0570db7f71765a762027476ef4ce8bf4790a93d/asyncffmpeg-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a22d71a2844f5de785f3416753e72db1e3a21d3e63e07054130b613773b77a56",
        "md5": "5fccfbc1de6fb0779b7784eb69387233",
        "sha256": "f4aeb8200fbace64d28a3e7dffe66dc84780f8d97f0514f96c3c41c9e5102c4b"
      },
      "downloads": -1,
      "filename": "asyncffmpeg-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5fccfbc1de6fb0779b7784eb69387233",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 14874,
      "upload_time": "2021-08-16T08:05:48",
      "upload_time_iso_8601": "2021-08-16T08:05:48.223559Z",
      "url": "https://files.pythonhosted.org/packages/a2/2d/71a2844f5de785f3416753e72db1e3a21d3e63e07054130b613773b77a56/asyncffmpeg-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}