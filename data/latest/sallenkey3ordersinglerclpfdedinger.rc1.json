{
  "info": {
    "author": "hathaway",
    "author_email": "944769849@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Project Introduce\n=================\n\nThe project will help hardware engineers or student design a Sallen-Kay\n3-Order filters with single amplifier. You can learn about how a\nSallen-Kay 3-Order filter is designed.It also supports checking the\ntime-domain and frequency-domain characteristics of the filter which you\nhave designed.Finally, it helps you easily analyze the impact of\ntolerances of tolerances.\n\nTo Solve a filter in the figure,a classic approach is to preset that\nsome component have the same value.But if you want to find different\nsolution, you must make mathematical derivations. In the project, we can\nsolve the filter by preset **R1,C1,C3**.\n\n|img.png| Notice:So far, The project only support design of a unity gain\nSallen-Kay 3-Order filters with single amplifier.\n\nGetting Started\n---------------\n\n::\n\n   pip install SallenKey3OrderSingleRCLPFDedinger\n\nPrerequisites\n~~~~~~~~~~~~~\n\nThe project requires importing 3 necessary libraries.We suggest users\nconfigure the environment via Anaconda\n\n::\n\n   pip install numpy\n   pip install scipy\n   pip install matplotlib\n\nTheoretical preparation\n-----------------------\n\n**H(s)** is the mathematical expression of the filter, we need to use\ncapacitances and resistances to fit that **H(s)** you want.\n\n.. figure:: img_1.png\n   :alt: img_1.png\n\n\n\nRunning the tests\n-----------------\n\nDesign and Check mathematical expression of the filter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nImport the necessary libraries\n\n::\n\n   from SallenKey3OrderSingleRCLPFDedinger import FilterDesign\n   import numpy as np\n   import matplotlib.pyplot as plt\n\nInput poles of the filter and create an instance\n\n::\n\n   # (The real part of the pole1,\n   #  The Natural frequency of the pole2&3,\n   #  The Damping factor of the pole2&3,\n   #  The Gain of the filter )\n   MFD = FilterDesign(100, 100, 0.5, 1)\n   f, hs = MFD.GetMathFreq(1, 10000, 10000)\n\nCheck the time-domain and frequency-domain characteristics\n\nBode plot:\n\n::\n\n   # (start Freq,Total Points,end Freq)\n   f, hs = MFD.GetMathFreq(1, 10000, 10000)\n   # 20:scale of ordinate ,could be 0 :Adaptive\n   # [100, 10, 500]:cursor list, will be marked on the points you select\n   MFD.ShowFreq(f,hs,\"Theoretical Frequency Response\",\"freq/Hz\", \"Gain/dB\", 20, [100, 10, 500])\n\n.. figure:: img_2.png\n   :alt: img_2.png\n\n\n\nStep Plot:\n\n::\n\n   # (Start time,Minimum interval,End time)\n   Math_step_t, Math_step_ht=MFD.GetMathTime(0,5E-6,1.5E-1)\n   MFD.ShowMTime(Math_step_t,Math_step_ht,\"Theoretical step response\",\"T/s\",\"Gain/Uint\",15,[1E-3,1E-2,1E-1])\n\n.. figure:: img_3.png\n   :alt: img_3.png\n\n\n\nYou can also check poles:\n\n::\n\n   print([MFD.ps1,MFD.ps2,MFD.ps3])\n\n[-628.3185307179587, (-314.1592653589793+544.1398092702653j),\n(-314.1592653589793-544.1398092702653j)] ### Design RC filter\n\nPrepare a resistance list\n\n::\n\n   Rlist = np.array(\n       [100, 110, 120, 130, 150, 160, 180, 200, 220, 240, 270, 300, 330, 360, 390, 430, 470, 510, 560, 620, 680, 750, 820,\n        910,\n        1000, 1100, 1200, 1300, 1500, 1600, 1800, 2000, 2200, 2400, 2700, 3000, 3300, 3600, 3900, 4300, 4700, 5100, 5600,\n        6200, 6800, 7500, 8200, 9100,\n        10000, 11000, 12000, 13000, 15000, 16000, 18000, 20000, 22000, 24000, 27000, 30000, 33000, 36000, 39000, 43000,\n        47000, 51000, 56000\n           , 62000, 68000, 75000, 82000, 91000,\n        100000, 110000, 120000, 130000, 150000, 160000, 180000, 200000, 220000, 240000, 270000, 300000, 330000, 360000,\n        390000, 430000, 470000\n           , 510000, 560000, 620000, 680000, 750000, 820000, 910000])\n\nTry to solve filter\n\n::\n\n   # (R1,C1,C2,Rlist,\n   Acceptable error(AE): there are 2 roots R2a and R2b锛宻olutions are all (R2a+R2b)/2 that conform to ABS(R2a-R2b)<AE)\n   flag, flist, R2a, R2b = MFD.SolveComponent(10000, 1e-6, 1e-6, Rlist, 100)\n\nCheck the solutions, The intersection of curves R2a and R2b is the\nsolution to the filter.If R2a and R2b have no intersection, you should\nchange **R1,C1,C2** to find the solution.This process may seem\ncumbersome, but it takes the place of you deriving the formula\n\n::\n\n   if flag == True:\n       print(\"Solved successfully:\")\n       print(flist)\n   else:\n       print(\"Solved unsuccessfully\")\n       plt.semilogx(Rlist, R2a, c='red',label='R2a')\n       plt.semilogx(Rlist, R2b, c='blue',label='R2b')\n       plt.ylim((-1E1, 1E4))\n       plt.legend()\n       plt.show()\n\nSolved unsuccessfully\n\n.. figure:: img_4.png\n   :alt: img_4.png\n\n\n\n::\n\n   flag, flist, R2a, R2b = MFD.SolveComponent(10000, 2.2e-7, 2.2e-7, Rlist, 100)\n   if flag == True:\n       print(\"Solved successfully:\")\n       print(flist)\n\n       plt.semilogx(Rlist, R2a, c='red',label='R2a')\n       plt.semilogx(Rlist, R2b, c='blue',label='R2b')\n\n       plt.ylim((100, 1E5))\n       plt.legend()\n       plt.show()\n\nSolved successfully:\n\n[[10000, 13030.026054497392, 43000, 2.2e-07, 2.2e-07,\n1.489417544705754e-08]]\n\n|img_5.png| ## Verify\n\n::\n\n   RC_freqres_f, RC_freqres_hs, RC_step_t, RC_step_h, polylist =\\\n       MFD.EvalFilter([10000, 13000, 43000, 2.2e-07, 2.2e-07, 1.5e-08],1,1, 10000, 10000,0,5E-6,1.5E-1)\n   MFD.ShowFreq(RC_freqres_f,RC_freqres_hs,\"RC Frequency Response\",\"freq/Hz\", \"Gain/dB\", 20, [100, 10, 500])\n\n.. figure:: img_6.png\n   :alt: img_6.png\n\n\n\n::\n\n   MFD.ShowMTime(RC_step_t, RC_step_h, \"RC Step Response\", \"T/s\", \"step H(t)/V\", 15, [1E-3,1E-2,1E-1])\n\n.. figure:: img_7.png\n   :alt: img_7.png\n\n\n\nVerify by LTspice XVII:\n\n|img_9.png| |img_10.png| ## Tolerance analysis The sensitivity of the\nfrequency response to component **x**\n\n|img_12.png|!\n\nThus, sensitivity of the frequency response to tolerance is |img_13.png|\n\nWhere Tol_x is tolerance of component **x**\n\n::\n\n   freqlist, TotalSen, Sen_R1_list, Sen_R2_list, Sen_R3_list, Sen_C1_list, Sen_C2_list, Sen_C3_list, Sen_Rf_list \\\n       , Sen_Rg_list = MFD.Gettolerance([10000, 13000, 43000, 2.2e-07, 2.2e-07, 1.5e-08],0,MFD.OpenImp, [0.12, 0.02, 0.02, 0.1, 0.1, 0.1, 0.02, 0.02],1, 1000, 1000)\n   MFD.Showtolerance(freqlist,TotalSen,\"Total Sensitivity\",\"freq/Hz\",\"Sensitivity/Uint\",10,[10,100,1000])\n\n.. figure:: img_14.png\n   :alt: img_14.png\n\n\n\n::\n\n   MFD.Showtolerance(freqlist,Sen_R1_list,\"R1 Sensitivity\",\"freq/Hz\",\"Sensitivity/Uint\",10,[10,100,1000])\n\n.. figure:: img_15.png\n   :alt: img_15.png\n\n\n\n.. |img.png| image:: img.png\n.. |img_5.png| image:: img_5.png\n.. |img_9.png| image:: img_9.png\n.. |img_10.png| image:: img_10.png\n.. |img_12.png| image:: img_12.png\n.. |img_13.png| image:: img_13.png\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "hathaway",
    "maintainer_email": "944769849@qq.com",
    "name": "SallenKey3OrderSingleRCLPFDedinger",
    "package_url": "https://pypi.org/project/SallenKey3OrderSingleRCLPFDedinger/",
    "platform": null,
    "project_url": "https://pypi.org/project/SallenKey3OrderSingleRCLPFDedinger/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/SallenKey3OrderSingleRCLPFDedinger/0.0.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "matplotlib"
    ],
    "requires_python": ">=3.9",
    "summary": "",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16208228,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6803b70b6c4976dabb6f3ac928c146a9b4c60b6fb274a8cc30ccd048d67c7065",
          "md5": "02096c2a40c9cf68f84ed522f65a6d52",
          "sha256": "c87dc06689cf0948f8ca7710ed087286726464e1ada58164c26ecab6825d1204"
        },
        "downloads": -1,
        "filename": "SallenKey3OrderSingleRCLPFDedinger-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02096c2a40c9cf68f84ed522f65a6d52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 3791,
        "upload_time": "2022-12-25T07:22:32",
        "upload_time_iso_8601": "2022-12-25T07:22:32.747102Z",
        "url": "https://files.pythonhosted.org/packages/68/03/b70b6c4976dabb6f3ac928c146a9b4c60b6fb274a8cc30ccd048d67c7065/SallenKey3OrderSingleRCLPFDedinger-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6803b70b6c4976dabb6f3ac928c146a9b4c60b6fb274a8cc30ccd048d67c7065",
        "md5": "02096c2a40c9cf68f84ed522f65a6d52",
        "sha256": "c87dc06689cf0948f8ca7710ed087286726464e1ada58164c26ecab6825d1204"
      },
      "downloads": -1,
      "filename": "SallenKey3OrderSingleRCLPFDedinger-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02096c2a40c9cf68f84ed522f65a6d52",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 3791,
      "upload_time": "2022-12-25T07:22:32",
      "upload_time_iso_8601": "2022-12-25T07:22:32.747102Z",
      "url": "https://files.pythonhosted.org/packages/68/03/b70b6c4976dabb6f3ac928c146a9b4c60b6fb274a8cc30ccd048d67c7065/SallenKey3OrderSingleRCLPFDedinger-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}