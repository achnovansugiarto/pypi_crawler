{
  "info": {
    "author": "Benoit Hamelin",
    "author_email": "benoit@benoithamelin.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Interpreters"
    ],
    "description": "# External artifacts inlining in web-able documents  using `jupyter nbconvert`\n\nWeb-able documents, typically based on HTML 5, such as ye olde webpage or as Jupyter notebooks, facilitate document associations through hyperlinking. However, there are situations where we would rather contain subdocuments *inline* rather than as separate files. For instance, if one is to send a report that includes figures, one must care to include all those as separate image files from some HTML document where the report is written, and then hope that the recipient unpacks all of that into a common directory. Another example is for documents declined in distinct formats -- audience member reading the document off of a screen may prefer having a HTML document that typesets according to their preferences and constraints, whereas folks that prefer reading off of paper will prefer having a well-typeset PDF file to send to the printer (given how printing on most web browsers is an tacked-on, disused feature). In both cases, one would rather incorporate all figures or alternative declinations of the document into a single file.\n\nA common [URL specification](https://datatracker.ietf.org/doc/html/rfc2397) enables such incorporation: the data that make up images or alternative documents is embedded directly as into the URL. Modern web browsers support such *data URLs* fully, either displaying such embedded images as if they were externally linked, or enabling the user to \"download\" inline documents as if they were hosted remotely.\nHowever, document authoring tools do not make the addition of such inline artifacts easy.\nThis project aim at filling this gap when the document being authored is a Jupyter notebook, which can be processed into a form distributable on the web: HTML, Markdown, even merely a modified notebook.\nThe key consists in a `jupyter nbconvert` [preprocessor](https://nbconvert.readthedocs.io/en/latest/api/preprocessors.html).\n\n## Usage\n\nFirst step is to write up a [Jupyter notebook](https://jupyter.org/try-jupyter/lab/). Even folks who don't require interactive computation can make good, productive use of Jupyter as an authoring environment based on [Markdown](https://www.markdownguide.org/basic-syntax/) notation.\n\n### Inlining external files\n\n*Inlining* external *artifacts* refers to the incorporation of assets usually stored in external files, such as images and alternative texts, directly in the core document, in the form of [data URLs](https://datatracker.ietf.org/doc/html/rfc2397).\nAs suggested, this can be figures, or other documents one would want to bundle with their main text so they can be \"downloaded offline,\" so to speak.\nSuch artifacts must be described among the Markdown cells of the notebook in any place one would otherwise write up a URL. The artifact description is as follows:\n\n    artifact:mime/type:path/to/file/to/inline\n\nEvent on Windows, components of the path must be separated by forward slashes (`/`).\nExamples:\n\n| Notation | Purpose           | Artifact description in context                                                                    |\n|:--------:|:------------------|:---------------------------------------------------------------------------------------------------|\n| Markdown | Figure            | `![Alt text](artifact:image/png:images/figure.png)`                                                |\n|          | Embedded document | `[Text of the link](artifact:application/pdf:embed-this.pdf)`                                      |\n| HTML     | Figure            | `<img src=\"artifact:image/png:images/figure.png\" alt=\"Alt text\">`                                  |\n|          | Embedded document | `<a href=\"artifact:application/pdf:embed-this.pdf\" download=\"embed-this.pdf\">Text of the link</a>` |\n\n### Building the incorporated document from the command line\n\nOne can produce the document with embedded artifacts with a command such as this:\n\n```sh\njupyter nbconvert --preprocessors nbconvert_inline_artifacts.ArtifactInlinePreprocessor #... <rest of the command>\n```\n\nFor instance, to export a HTML file with inline artifacts:\n\n```sh\njupyter nbconvert --preprocessors nbconvert_inline_artifacts.ArtifactInlinePreprocessor --to html document-as-notebook.ipynb\n```\n\n### Scripting the incorporated document build in Python\n\nThe nbconvert tool is also productively used from a [Python scripting](https://nbconvert.readthedocs.io/en/latest/nbconvert_library.html) perspective.\nThis usage pattern enables the inlining of artifacts that exist in a process' memory, as opposed to external files. Such artifacts are *named* instead using a unique identifier, which is mapped in turn to an artifact expressed as a Python bytes string.\nFor instance, consider a source notebook where one Markdown cell tagged `pdf-version` contains the following text:\n\n    [Get the PDF version](artifact::pdf)\n\nThe following script would generate first a PDF version of this notebook (requires a LaTeX install and Pandoc) without that cell, then a HTML version where that PDF version is inlined:\n\n```python\nfrom nbconvert import PDFExporter, HTMLExporter\nfrom traitlets.config import Config\n\nc_pdf = Config()\nc_pdf.Exporter.preprocessors = [\"nbconvert.preprocessors.TagRemovePreprocessor\"]\nc_pdf.TagRemovePreprocessor.remove_cell_tags = [\"pdf-version\"]\npdf_exporter = PDFExporter(config=c_pdf)\npdf = pdf_exporter.from_filename(\"document.ipynb\")\n\nc_html = Config()\nc_html.Exporter.preprocessors = [\"nbconvert_inline_artifacts.ArtifactInlinePreprocessor\"]\nc_html.ArtifactInlinePreprocessor.artifacts = {\n    \"pdf\": {\n        \"mime_type\": \"application/pdf\",\n        \"content\": pdf\n    }\n}\nhtml_exporter = HTMLExporter(config=c_html)\nwith open(\"document.html\", \"wb\") as file:\n    file.write(pdf_exporter.from_filename(\"document.ipynb\"))\n```\n\nLook [here](examples/named_artifacts_scripted/example.ipynb) for a larger example.\n\n## Development\n\nThe development environment is put together easily using [Conda](https://docs.conda.io/en/latest/):\n\n```sh\nconda env create\n```\n\nChecks on PEP8 conformance, typing coherence and unit tests:\n\n```sh\nconda run -n nbconvert-inline-artifacts --no-capture-output python script/checks.py\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hamelin/nbconvert-inline-artifacts",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nbconvert-inline-artifacts",
    "package_url": "https://pypi.org/project/nbconvert-inline-artifacts/",
    "platform": null,
    "project_url": "https://pypi.org/project/nbconvert-inline-artifacts/",
    "project_urls": {
      "Homepage": "https://github.com/hamelin/nbconvert-inline-artifacts"
    },
    "release_url": "https://pypi.org/project/nbconvert-inline-artifacts/1.0/",
    "requires_dist": [
      "nbconvert"
    ],
    "requires_python": ">=3.7",
    "summary": "Augmentations to nbconvert to facilitate the incorporation of inline artifacts into web-able documents.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14265435,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb0bc061875ac3490360ea36c3fe0fa8f5467e36ae122a0e785e14322a44f85a",
          "md5": "e8d506388aa7b598289efaebb5576bc8",
          "sha256": "8a0f9c0efa8220445f4080f2ffd096a858d4f7c1cfdda718613771da0ba9585a"
        },
        "downloads": -1,
        "filename": "nbconvert_inline_artifacts-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8d506388aa7b598289efaebb5576bc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6295,
        "upload_time": "2022-06-27T22:15:02",
        "upload_time_iso_8601": "2022-06-27T22:15:02.541263Z",
        "url": "https://files.pythonhosted.org/packages/bb/0b/c061875ac3490360ea36c3fe0fa8f5467e36ae122a0e785e14322a44f85a/nbconvert_inline_artifacts-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afa5ee936838ab467fa02dac0a0d3929f7a5d945d83568ff65731263aff3bb16",
          "md5": "215bb0307d37dd4bf14d033d27fa758e",
          "sha256": "ec92ba72906a0b93183fe96b704be899d5e179b521d3583f0e1e5a887841e383"
        },
        "downloads": -1,
        "filename": "nbconvert_inline_artifacts-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "215bb0307d37dd4bf14d033d27fa758e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6606,
        "upload_time": "2022-06-27T22:15:04",
        "upload_time_iso_8601": "2022-06-27T22:15:04.142947Z",
        "url": "https://files.pythonhosted.org/packages/af/a5/ee936838ab467fa02dac0a0d3929f7a5d945d83568ff65731263aff3bb16/nbconvert_inline_artifacts-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb0bc061875ac3490360ea36c3fe0fa8f5467e36ae122a0e785e14322a44f85a",
        "md5": "e8d506388aa7b598289efaebb5576bc8",
        "sha256": "8a0f9c0efa8220445f4080f2ffd096a858d4f7c1cfdda718613771da0ba9585a"
      },
      "downloads": -1,
      "filename": "nbconvert_inline_artifacts-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e8d506388aa7b598289efaebb5576bc8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6295,
      "upload_time": "2022-06-27T22:15:02",
      "upload_time_iso_8601": "2022-06-27T22:15:02.541263Z",
      "url": "https://files.pythonhosted.org/packages/bb/0b/c061875ac3490360ea36c3fe0fa8f5467e36ae122a0e785e14322a44f85a/nbconvert_inline_artifacts-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "afa5ee936838ab467fa02dac0a0d3929f7a5d945d83568ff65731263aff3bb16",
        "md5": "215bb0307d37dd4bf14d033d27fa758e",
        "sha256": "ec92ba72906a0b93183fe96b704be899d5e179b521d3583f0e1e5a887841e383"
      },
      "downloads": -1,
      "filename": "nbconvert_inline_artifacts-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "215bb0307d37dd4bf14d033d27fa758e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6606,
      "upload_time": "2022-06-27T22:15:04",
      "upload_time_iso_8601": "2022-06-27T22:15:04.142947Z",
      "url": "https://files.pythonhosted.org/packages/af/a5/ee936838ab467fa02dac0a0d3929f7a5d945d83568ff65731263aff3bb16/nbconvert_inline_artifacts-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}