{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<h1 align=\"center\">\n    <b>\n        sv-dlp \n    </b>\n</h1>\n\nsv-dlp is a versatile panorama scraper for a wide range of street view platforms. \nIt is designed to make it easy for terminal users & developers to download panoramic images, \nacquire detailed metadata, and generate short URLs for the panoramas. The tool is built with a robust \nback-end that can handle multiple services and provides a wide range of functionalities \nsuch as the ability to extract metadata information, handle panorama stitching, and much more. \nFurthermore, it is designed to be easily integrable with other scripts, providing developers with \nthe flexibility to incorporate its capabilities into their own projects and applications.\n\nsv-dlp heavily relies on reverse-engineered APIs to function, as such, it is dependent on the \nstability and availability of these APIs; it's important to note that some services might change\ntheir APIs without notice. In the event of a service not working properly, it is \nrecommended to submit an issue with the Dead API label, this way, I (or a collaborator) can investigate \nand resolve the issue as soon as possible. Additionally, some services might have limitations on usage \nand it's important to respect them. In any case, I will do my best to keep sv-dlp up to date and working \nsmoothly for all supported services.\n\nThis project has been made for educational purposes and all content scraped from\nis owned by their respective authors.\n\nFor detailed documentation and usage examples, please refer to the [official documentation](https://juanpisss.github.io/sv-dlp/).\n\n## **Features**\n- Download Panoramas\n    - A panorama ID, a coordinate or a short URL can be parsed\n        - **[Google]** Radius can be parsed if input is coordinates \n    - Is multithreaded; each panorama tile row is in different threads for faster downloads\n    - Saves individual tiles if `--save-tiles` is parsed\n    - Download from .csv/.json files\n- Fully print metadata\n    - Coords, Date, Panorama ID and Gen can be printed separately\n- Coordinates and short URLs are automatically turned to Panorama IDs\n- Short links with a Panorama ID or coordinates\n\n## **Services**\nService|Status|Notes\n:------|:-----|:----\nGoogle |100%  |Zoom 5 only obtains a portion of the face.\nBaidu  |99%   |Translation between BD09MC and WGS84 is innacurate.\nNavae  |99%   |Short Link function does not use its appropiate API call.\nYandex |99%   |Short Link function does not use the `shortenPath` API call.\nApple  |95%   |Misc features not supported; can only obtain metadata by coords - credit to [sk-zk & retroplasma](https://github.com/juanpisss/sv-dlp/blob/master/CREDITS)\nBing   |95%   |Misc features not implemented; can only obtain metadata by coords - credit to [sk-zk](https://github.com/juanpisss/sv-dlp/blob/master/CREDITS)\n\n## **Installation**\nTo install sv-dlp, download it via PIP, as long as Python >3.10 is installed\n```bash\n$ pip install sv_dlp\n$ py -m sv_dlp\n``` \n## Manual\nIf you prefer using a binary instead, check out the binaries [here](https://github.com/juanpisss/sv-dlp/releases/latest)\nand add them to your `PATH` folder. Check out this [guide](https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/)\nfor more information.\n\n## Getting Started\nsv_dlp's features are contained within a class for syntax convenience, so to begin\nimport the module and declare a variable of the class\n```python\nimport sv_dlp\nsv_dlp = sv_dlp.sv_dlp()\n```\n\n### Notes\n- Whenever you call any function that is relating to downloading, or translating coordinates\nto Panorama ID, `self.get_metadata()` is called within that function, therefore it is \nallocated in `self.metadata`. If you plan on tinkering with the metadata,\nit is is recommended to call `self_get_metadata()` first \nbefore calling any other function for syntax readibility.\n- Metadata is returned as a `MetadataStructure` object. If you wish to use\na dictionary instead, consider using the `.dict()` method\n- If you wish to call a function with a different service than google, please use\n`self.set_service()` first before doing anything - input **must be lowercase**\n\n## Downloading\nTo download panorama directly from coordinates:\n```python\npano_img = sv_dlp.download_panorama(lat=6.603079535799973, lng=-73.99819681137278)\nsv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata)\n```\n\nTo download panorama directly from Panorama ID:\n```python\npano_id = sv_dlp.get_pano_id(lat=6.603079535799973, lng=-73.99819681137278)\n\npano_img = sv_dlp.download_panorama(pano_id)\nsv_dlp.postdownload.save_panorama(pano_img, sv_dlp.metadata)\n```\n\nTo download panorama directly from metadata:\n```python\nmetadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278)\n\npano_img = sv_dlp.download_panorama(metadata.pano_id, zoom=max)\nsv_dlp.postdownload.save_panorama(pano_img, metadata)\n```\n\nTo download tiles individually:\n```python\npano, tiles = sv_dlp.download_panorama(\"YV7i9WYmvPqT5nEtFLq3SA\")\nsv_dlp.postdownload.save_tiles(tiles, sv_dlp.metadata)\n```\nYou can also pass a single variable to `sv_dlp.download_panorama`,\nas postdownload will automatically determine \nif it holds the panorama and tiles.\n\n## Metadata Tinkering\nTo obtain older and linked panoramas from given location:\n```python\nmetadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278, get_linked_panos=True)\n\nfor pano in metadata.timeline:\n    print(pano)\nfor pano in metadata.linked_panos:\n    print(pano)\n```\n\nTo obtain a panorama's date:\n```python\nmetadata = sv_dlp.get_metadata(lat=6.603079535799973, lng=-73.99819681137278)\n\ndate = metadata.date\nprint(date)\n```\n\n## **FAQ**\n## **Metadata is being returned as a `MetadataStrucutre` object. Any other way to access it?**\nYes! You can use the `.dict()` method to retrieve the metadata as a dictionary\ninstead.\n## **Why aren't all my coordinates from .csv downloading?**\nDepending on how close the given coordinates are, it'll download the same panorama ID \nno matter the difference. It's recommended to use .json or .csv with panorama IDs instead.\n## **Can X Service be added?**\nDepending on how accesible it is scraping-wise, yes.\n**Feel free to submit in an issue** about the specific service and I'll gladly see \nwhat I can do about it. If you're a developer though, refer to the next question.\n## **I'm a developer and I want to add X service or improve the code. Can I?**\nSure! You're welcome to submit in a pull request as long as its to improve\nthis program, such as improving performance, fixing a bug, adding a service, etc.\nFor those who want to add a service, check out [the documentation for it](https://juanpisss.github.io/sv-dlp/contributing_services/).\n\n## **License**\n[MIT](https://raw.githubusercontent.com/juanpisss/sv-dlp/master/LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/juanpisss/sv-dlp",
    "keywords": "",
    "license": "",
    "maintainer": "juanpisss",
    "maintainer_email": "juanpiss@basedtakes.co",
    "name": "sv-dlp",
    "package_url": "https://pypi.org/project/sv-dlp/",
    "platform": null,
    "project_url": "https://pypi.org/project/sv-dlp/",
    "project_urls": {
      "Homepage": "https://github.com/juanpisss/sv-dlp"
    },
    "release_url": "https://pypi.org/project/sv-dlp/2023.2.6.1/",
    "requires_dist": [
      "altgraph (==0.17.2)",
      "certifi (==2022.12.7)",
      "charset-normalizer (==2.1.0)",
      "colorama (==0.4.5)",
      "future (==0.18.3)",
      "idna (==3.3)",
      "pefile (==2022.5.30)",
      "Pillow (==9.3.0)",
      "pillow-heif (==0.6.0)",
      "piexif (==1.1.3)",
      "pyinstaller (==5.7)",
      "pyinstaller-hooks-contrib (==2022.3)",
      "pyproj (==3.4.1)",
      "pywin32-ctypes (==0.2.0)",
      "requests (==2.28.1)",
      "tqdm (==4.64.0)",
      "urllib3 (==1.26.11)",
      "protobuf (==4.21.6)",
      "pycryptodome (==3.15.0)"
    ],
    "requires_python": ">=3.10",
    "summary": "Obtain Street View panoramas, scrape metadata, and generate short URLs for panoramas from multiple Street View services",
    "version": "2023.2.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16718417,
  "releases": {
    "2023.1.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da5162538c0eb58171200f9f2761a9942b3b6bfd084aad80b5554a32d71fed19",
          "md5": "5c6ffe4602a698d306f7c7f9e82a62be",
          "sha256": "b661a7af0256c39672aa0cd7d02f2e90e571a9b324ff0bc9cc6ae8d61d77901d"
        },
        "downloads": -1,
        "filename": "sv_dlp-2023.1.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c6ffe4602a698d306f7c7f9e82a62be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 31909,
        "upload_time": "2023-01-16T03:05:07",
        "upload_time_iso_8601": "2023-01-16T03:05:07.116523Z",
        "url": "https://files.pythonhosted.org/packages/da/51/62538c0eb58171200f9f2761a9942b3b6bfd084aad80b5554a32d71fed19/sv_dlp-2023.1.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f295ad9d3dbbf7e7c14329912599627eb684f7dc8433d020f66473e971706dd0",
          "md5": "53680d17d15e5acbc6b11f041fe9e3c5",
          "sha256": "6d86a99098b23ecd26b3f6b282049e196acef23448f224c47b86cb348a12db2c"
        },
        "downloads": -1,
        "filename": "sv-dlp-2023.1.16.tar.gz",
        "has_sig": false,
        "md5_digest": "53680d17d15e5acbc6b11f041fe9e3c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 27293,
        "upload_time": "2023-01-16T03:05:08",
        "upload_time_iso_8601": "2023-01-16T03:05:08.685175Z",
        "url": "https://files.pythonhosted.org/packages/f2/95/ad9d3dbbf7e7c14329912599627eb684f7dc8433d020f66473e971706dd0/sv-dlp-2023.1.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.2.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1974b5d55233ea7e59901d2f2c71ca96bf0de085202b8a8f19bdbd1d3b2c340",
          "md5": "18c82c926e2c5450ae0de245c691a7e3",
          "sha256": "8438933bb43992ed370bbf5750153aa31920d49a87611d8be59f4a1420fbe249"
        },
        "downloads": -1,
        "filename": "sv_dlp-2023.2.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18c82c926e2c5450ae0de245c691a7e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 37878,
        "upload_time": "2023-02-06T23:18:16",
        "upload_time_iso_8601": "2023-02-06T23:18:16.156162Z",
        "url": "https://files.pythonhosted.org/packages/e1/97/4b5d55233ea7e59901d2f2c71ca96bf0de085202b8a8f19bdbd1d3b2c340/sv_dlp-2023.2.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b3a28fc28b36d554860fc39fe97fb6613d07066427477f8c6ec1277350ea0b7",
          "md5": "e402dc6a7cf404ab45d661eb3ac01676",
          "sha256": "df26f784e55b3adcdac58bc041e134b1bce7efed5b691a2861feaaa36ff67e2e"
        },
        "downloads": -1,
        "filename": "sv-dlp-2023.2.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e402dc6a7cf404ab45d661eb3ac01676",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 33295,
        "upload_time": "2023-02-06T23:18:17",
        "upload_time_iso_8601": "2023-02-06T23:18:17.717184Z",
        "url": "https://files.pythonhosted.org/packages/3b/3a/28fc28b36d554860fc39fe97fb6613d07066427477f8c6ec1277350ea0b7/sv-dlp-2023.2.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1974b5d55233ea7e59901d2f2c71ca96bf0de085202b8a8f19bdbd1d3b2c340",
        "md5": "18c82c926e2c5450ae0de245c691a7e3",
        "sha256": "8438933bb43992ed370bbf5750153aa31920d49a87611d8be59f4a1420fbe249"
      },
      "downloads": -1,
      "filename": "sv_dlp-2023.2.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "18c82c926e2c5450ae0de245c691a7e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 37878,
      "upload_time": "2023-02-06T23:18:16",
      "upload_time_iso_8601": "2023-02-06T23:18:16.156162Z",
      "url": "https://files.pythonhosted.org/packages/e1/97/4b5d55233ea7e59901d2f2c71ca96bf0de085202b8a8f19bdbd1d3b2c340/sv_dlp-2023.2.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b3a28fc28b36d554860fc39fe97fb6613d07066427477f8c6ec1277350ea0b7",
        "md5": "e402dc6a7cf404ab45d661eb3ac01676",
        "sha256": "df26f784e55b3adcdac58bc041e134b1bce7efed5b691a2861feaaa36ff67e2e"
      },
      "downloads": -1,
      "filename": "sv-dlp-2023.2.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e402dc6a7cf404ab45d661eb3ac01676",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 33295,
      "upload_time": "2023-02-06T23:18:17",
      "upload_time_iso_8601": "2023-02-06T23:18:17.717184Z",
      "url": "https://files.pythonhosted.org/packages/3b/3a/28fc28b36d554860fc39fe97fb6613d07066427477f8c6ec1277350ea0b7/sv-dlp-2023.2.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}