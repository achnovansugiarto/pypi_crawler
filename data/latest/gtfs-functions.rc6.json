{
  "info": {
    "author": "",
    "author_email": "Santiago Toso <santiagoa.toso@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# GTFS functions\n\nThis package allows you to create various layers directly from the GTFS and visualize the results in the most straightforward way possible.\n\n## Update March 2023:\n* Removed dependency with [partridge](https://github.com/remix/partridge). As much as we love this package and think it is absolutely great, removing a dependency gives us more control and keeps this package from failing whenever something changes in `partridge`.\n* We treat the GTFS as a class, where each file is a property. See examples below to find out how to work with it. We hope this simplifies your code.\n* Fixed and enhanced **segment cutting**. Shout out to [Mattijs De Paepe](https://github.com/mattijsdp)\n* Support to identify route patterns!! Check it out using `feed.routes_patterns`. Shout out to [Tobias Bartsch](https://github.com/tobiasbartsch)\n* The rest should stay the same.\n\n#### Warning! \nMake sure `stop_times.txt` has no `Null` values in the columns `arrival_time` and `departure_time`. If this is not the case, some functions on this package might fail.\n\n## Table of contents\n* [Installation](#installation)\n* [GTFS parsing](#gtfs_parsing)\n* [Stop frequencies](#stop_freq)\n* [Line frequencies](#line_freq)\n* [Cut in Bus segments](#segments)\n* [Speeds](#speeds)\n* [Segment frequencies](#segments_freq)\n* [Mapping the results](#map_gdf)\n* [Other plots](#plotly)\n\n## Python version\nThe package requires `python>=3.10`. You can create a new environment with this version using conda:\n```console\nconda create -n new-env python=3.10\n```\n\n## Installation <a class=\"anchor\" id=\"installation\"></a>\n\nYou can install the package running the following in your console:\n```console\npip install gtfs_functions==2.0.0\n```\n\nImport the package in your script/notebook\n```python\nfrom gtfs_functions import Feed, map_gdf\n```\n\n# GTFS Import <a class=\"anchor\" id=\"gtfs_parsing\"></a>\nNow you can interact with your GTFS with the class `Feed`. Take a look at the class with `?Feed` to check what arguments you can specify. \n\n\n```python\ngtfs_path = 'data/sfmta.zip'\n\n# It also works with URL's\ngtfs_path = 'https://transitfeeds.com/p/sfmta/60/latest/download'\n\nfeed = Feed(gtfs_path)\n```\n\n\n```python\nroutes = feed.routes\nroutes.head(2)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>route_id</th>\n      <th>agency_id</th>\n      <th>route_short_name</th>\n      <th>route_long_name</th>\n      <th>route_desc</th>\n      <th>route_type</th>\n      <th>route_url</th>\n      <th>route_color</th>\n      <th>route_text_color</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15761</td>\n      <td>SFMTA</td>\n      <td>1</td>\n      <td>CALIFORNIA</td>\n      <td></td>\n      <td>3</td>\n      <td>https://SFMTA.com/1</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15766</td>\n      <td>SFMTA</td>\n      <td>5</td>\n      <td>FULTON</td>\n      <td></td>\n      <td>3</td>\n      <td>https://SFMTA.com/5</td>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n```python\nstops = feed.stops\nstops.head(2)\n```\n\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stop_id</th>\n      <th>stop_code</th>\n      <th>stop_name</th>\n      <th>stop_desc</th>\n      <th>zone_id</th>\n      <th>stop_url</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>390</td>\n      <td>10390</td>\n      <td>19th Avenue &amp; Holloway St</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>POINT (-122.47510 37.72119)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3016</td>\n      <td>13016</td>\n      <td>3rd St &amp; 4th St</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>POINT (-122.38979 37.77262)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nstop_times = feed.stop_times\nstop_times.head(2)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>trip_id</th>\n      <th>arrival_time</th>\n      <th>departure_time</th>\n      <th>stop_id</th>\n      <th>stop_sequence</th>\n      <th>stop_headsign</th>\n      <th>pickup_type</th>\n      <th>drop_off_type</th>\n      <th>shape_dist_traveled</th>\n      <th>route_id</th>\n      <th>service_id</th>\n      <th>direction_id</th>\n      <th>shape_id</th>\n      <th>stop_code</th>\n      <th>stop_name</th>\n      <th>stop_desc</th>\n      <th>zone_id</th>\n      <th>stop_url</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9413147</td>\n      <td>81840.0</td>\n      <td>81840.0</td>\n      <td>4015</td>\n      <td>1</td>\n      <td></td>\n      <td>NaN</td>\n      <td></td>\n      <td>NaN</td>\n      <td>15761</td>\n      <td>1</td>\n      <td>0</td>\n      <td>179928</td>\n      <td>14015</td>\n      <td>Clay St &amp; Drumm St</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>POINT (-122.39682 37.79544)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9413147</td>\n      <td>81902.0</td>\n      <td>81902.0</td>\n      <td>6294</td>\n      <td>2</td>\n      <td></td>\n      <td>NaN</td>\n      <td></td>\n      <td>NaN</td>\n      <td>15761</td>\n      <td>1</td>\n      <td>0</td>\n      <td>179928</td>\n      <td>16294</td>\n      <td>Sacramento St &amp; Davis St</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>POINT (-122.39761 37.79450)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ntrips = feed.trips\ntrips.head(2)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>trip_id</th>\n      <th>route_id</th>\n      <th>service_id</th>\n      <th>direction_id</th>\n      <th>shape_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9547346</td>\n      <td>15804</td>\n      <td>1</td>\n      <td>0</td>\n      <td>180140</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9547345</td>\n      <td>15804</td>\n      <td>1</td>\n      <td>0</td>\n      <td>180140</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nshapes = feed.shapes\nshapes.head(2)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>shape_id</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>179928</td>\n      <td>LINESTRING (-122.39697 37.79544, -122.39678 37...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>179929</td>\n      <td>LINESTRING (-122.39697 37.79544, -122.39678 37...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# Stop frequencies <a class=\"anchor\" id=\"stop_freq\"></a>\n\nReturns a geodataframe with the frequency for each combination of `stop`, `time of day` and `direction`. Each row with a **Point** geometry. The user can optionally specify `cutoffs` as a list in case the default is not good. These `cutoffs` should be specified at the moment of reading the `Feed` class. These `cutoffs` are the times of days to use as aggregation.\n\n\n```python\ncutoffs = [0,6,9,15.5,19,22,24]\n\nfeed = Feed(gtfs_path, cutoffs=cutoffs)\nstop_freq = feed.stops_freq\nstop_freq.head(2)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stop_id</th>\n      <th>dir_id</th>\n      <th>window</th>\n      <th>ntrips</th>\n      <th>min_per_trip</th>\n      <th>stop_name</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8157</th>\n      <td>5763</td>\n      <td>Inbound</td>\n      <td>0:00-6:00</td>\n      <td>1</td>\n      <td>360</td>\n      <td>Noriega St &amp; 48th Ave</td>\n      <td>POINT (-122.50785 37.75293)</td>\n    </tr>\n    <tr>\n      <th>13102</th>\n      <td>7982</td>\n      <td>Outbound</td>\n      <td>0:00-6:00</td>\n      <td>1</td>\n      <td>360</td>\n      <td>Moscow St &amp; RussiaAvet</td>\n      <td>POINT (-122.42996 37.71804)</td>\n    </tr>\n    <tr>\n      <th>9539</th>\n      <td>6113</td>\n      <td>Inbound</td>\n      <td>0:00-6:00</td>\n      <td>1</td>\n      <td>360</td>\n      <td>Portola Dr &amp; Laguna Honda Blvd</td>\n      <td>POINT (-122.45526 37.74310)</td>\n    </tr>\n    <tr>\n      <th>12654</th>\n      <td>7719</td>\n      <td>Inbound</td>\n      <td>0:00-6:00</td>\n      <td>1</td>\n      <td>360</td>\n      <td>Middle Point &amp; Acacia</td>\n      <td>POINT (-122.37952 37.73707)</td>\n    </tr>\n    <tr>\n      <th>9553</th>\n      <td>6116</td>\n      <td>Inbound</td>\n      <td>0:00-6:00</td>\n      <td>1</td>\n      <td>360</td>\n      <td>Portola Dr &amp; San Pablo Ave</td>\n      <td>POINT (-122.46107 37.74040)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# Line frequencies <a class=\"anchor\" id=\"line_freq\"></a>\n\nReturns a geodataframe with the frequency for each combination of `line`, `time of day` and `direction`. Each row with a **LineString** geometry. The user can optionally specify `cutoffs` as a list in case the default is not good. These `cutoffs` should be specified at the moment of reading the `Feed` class. These `cutoffs` are the times of days to use as aggregation.\n\n\n```python\ncutoffs = [0,6,9,15.5,19,22,24]\nline_freq = gtfs.lines_freq(stop_times, trips, shapes, routes, cutoffs = cutoffs)\nline_freq.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>route_id</th>\n      <th>route_name</th>\n      <th>dir_id</th>\n      <th>window</th>\n      <th>min_per_trip</th>\n      <th>ntrips</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>376</th>\n      <td>15808</td>\n      <td>44 O'SHAUGHNESSY</td>\n      <td>Inbound</td>\n      <td>0:00-6:00</td>\n      <td>360</td>\n      <td>1</td>\n      <td>LINESTRING (-122.46459 37.78500, -122.46352 37...</td>\n    </tr>\n    <tr>\n      <th>378</th>\n      <td>15808</td>\n      <td>44 O'SHAUGHNESSY</td>\n      <td>Inbound</td>\n      <td>0:00-6:00</td>\n      <td>360</td>\n      <td>1</td>\n      <td>LINESTRING (-122.43416 37.73355, -122.43299 37...</td>\n    </tr>\n    <tr>\n      <th>242</th>\n      <td>15787</td>\n      <td>25 TREASURE ISLAND</td>\n      <td>Inbound</td>\n      <td>0:00-6:00</td>\n      <td>360</td>\n      <td>1</td>\n      <td>LINESTRING (-122.39611 37.79013, -122.39603 37...</td>\n    </tr>\n    <tr>\n      <th>451</th>\n      <td>15814</td>\n      <td>54 FELTON</td>\n      <td>Inbound</td>\n      <td>0:00-6:00</td>\n      <td>360</td>\n      <td>1</td>\n      <td>LINESTRING (-122.38845 37.73994, -122.38844 37...</td>\n    </tr>\n    <tr>\n      <th>241</th>\n      <td>15787</td>\n      <td>25 TREASURE ISLAND</td>\n      <td>Inbound</td>\n      <td>0:00-6:00</td>\n      <td>360</td>\n      <td>1</td>\n      <td>LINESTRING (-122.39542 37.78978, -122.39563 37...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# Bus segments <a class=\"anchor\" id=\"segments\"></a>\n\nReturns a geodataframe where each segment is a row and has a **LineString** geometry.\n\n\n```python\nsegments_gdf = feed.segments\nsegments_gdf.head(2)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>route_id</th>\n      <th>direction_id</th>\n      <th>stop_sequence</th>\n      <th>start_stop_name</th>\n      <th>end_stop_name</th>\n      <th>start_stop_id</th>\n      <th>end_stop_id</th>\n      <th>segment_id</th>\n      <th>shape_id</th>\n      <th>geometry</th>\n      <th>distance_m</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15761</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Clay St &amp; Drumm St</td>\n      <td>Sacramento St &amp; Davis St</td>\n      <td>4015</td>\n      <td>6294</td>\n      <td>4015-6294</td>\n      <td>179928</td>\n      <td>LINESTRING (-122.39697 37.79544, -122.39678 37...</td>\n      <td>205.281653</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15761</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Sacramento St &amp; Davis St</td>\n      <td>Sacramento St &amp; Battery St</td>\n      <td>6294</td>\n      <td>6290</td>\n      <td>6294-6290</td>\n      <td>179928</td>\n      <td>LINESTRING (-122.39761 37.79446, -122.39781 37...</td>\n      <td>238.047505</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# Scheduled Speeds <a class=\"anchor\" id=\"speeds\"></a>\n\nReturns a geodataframe with the `speed_kmh` for each combination of `route`, `segment`, `time of day` and `direction`. Each row with a **LineString** geometry. The user can optionally specify `cutoffs` as explained in previous sections.\n\n\n```python\n# Cutoffs to make get hourly values\nspeeds = feed.avg_speeds\nspeeds.head(1)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>route_id</th>\n      <th>route_name</th>\n      <th>direction_id</th>\n      <th>segment_id</th>\n      <th>window</th>\n      <th>speed_kmh</th>\n      <th>start_stop_id</th>\n      <th>start_stop_name</th>\n      <th>end_stop_id</th>\n      <th>end_stop_name</th>\n      <th>distance_m</th>\n      <th>stop_sequence</th>\n      <th>runtime_sec</th>\n      <th>segment_max_speed_kmh</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15761</td>\n      <td>1 CALIFORNIA</td>\n      <td>Inbound</td>\n      <td>4015-6294</td>\n      <td>10:00-11:00</td>\n      <td>12.0</td>\n      <td>4015</td>\n      <td>Clay St &amp; Drumm St</td>\n      <td>6294</td>\n      <td>Sacramento St &amp; Davis St</td>\n      <td>205.281653</td>\n      <td>1</td>\n      <td>61.9</td>\n      <td>12.0</td>\n      <td>LINESTRING (-122.39697 37.79544, -122.39678 37...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# Segment frequencies <a class=\"anchor\" id=\"segments_freq\"></a>\n\n\n```python\nsegments_freq = feed.segments_freq\nseg_freq.head(2)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>route_id</th>\n      <th>route_name</th>\n      <th>direction_id</th>\n      <th>segment_name</th>\n      <th>window</th>\n      <th>min_per_trip</th>\n      <th>ntrips</th>\n      <th>start_stop_id</th>\n      <th>start_stop_name</th>\n      <th>end_stop_name</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>23191</th>\n      <td>ALL_LINES</td>\n      <td>All lines</td>\n      <td>NA</td>\n      <td>3628-3622</td>\n      <td>0:00-6:00</td>\n      <td>360</td>\n      <td>1</td>\n      <td>3628</td>\n      <td>Alemany Blvd &amp; St Charles Ave</td>\n      <td>Alemany Blvd &amp; Arch St</td>\n      <td>LINESTRING (-122.46949 37.71045, -122.46941 37...</td>\n    </tr>\n    <tr>\n      <th>6160</th>\n      <td>15787</td>\n      <td>25 TREASURE ISLAND</td>\n      <td>Inbound</td>\n      <td>7948-8017</td>\n      <td>0:00-6:00</td>\n      <td>360</td>\n      <td>1</td>\n      <td>7948</td>\n      <td>Transit Center Bay 29</td>\n      <td>Shoreline Access Road</td>\n      <td>LINESTRING (-122.39611 37.79013, -122.39603 37...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# Map your work <a class=\"anchor\" id=\"map_gdf\"></a>\n\n## Stop frequencies\n```python\n# Stops\ncondition_dir = stop_freq.dir_id == 'Inbound'\ncondition_window = stop_freq.window == '6:00-9:00'\n\ngdf = stop_freq.loc[(condition_dir & condition_window),:].reset_index()\n\ngtfs.map_gdf(gdf = gdf, \n              variable = 'ntrips', \n              colors = [\"#d13870\", \"#e895b3\" ,'#55d992', '#3ab071', '#0e8955','#066a40'], \n              tooltip_var = ['min_per_trip'] , \n              tooltip_labels = ['Frequency: '], \n              breaks = [10, 20, 30, 40, 120, 200])\n```\n![stops](/images/map_stop_freq.jpg)\n\n## Line frequencies\n```python\n# Line frequencies\ncondition_dir = line_freq.dir_id == 'Inbound'\ncondition_window = line_freq.window == '6:00-9:00'\n\ngdf = line_freq.loc[(condition_dir & condition_window),:].reset_index()\n\ngtfs.map_gdf(gdf = gdf, \n              variable = 'ntrips', \n              colors = [\"#d13870\", \"#e895b3\" ,'#55d992', '#3ab071', '#0e8955','#066a40'], \n              tooltip_var = ['route_name'] , \n              tooltip_labels = ['Route: '], \n              breaks = [5, 10, 20, 50])\n```\n![line](/images/map_line_freq.jpg)\n\n## Speeds\nIf you are looking to visualize data at the segment level for all lines I recommend you go with something more powerful like kepler.gl (AKA my favorite data viz library). For example, to check the scheduled speeds per segment:\n```python\n# Speeds\nimport keplergl as kp\nm = kp.KeplerGl(data=dict(data=speeds, name='Speed Lines'), height=400)\nm\n```\n![kepler_speeds](/images/kepler_speeds.jpg)\n\n## Segment frequencies\n```python\n# Segment frequencies\nimport keplergl as kp\nm = kp.KeplerGl(data=dict(data=seg_freq, name='Segment frequency'), height=400)\nm\n```\n![kepler_segment_freq](/images/kepler_seg_freq.jpg)\n\n# Other plots <a class=\"anchor\" id=\"plotly\"></a>\n## Histogram\n```python\n# Histogram\nimport plotly.express as px\npx.histogram(\n    stop_freq.loc[stop_freq.min_per_trip<50], \n    x='frequency', \n    title='Stop frequencies',\n    template='simple_white', \n    nbins =20)\n```\n![histogram](/images/histogram.jpg)\n\n## Heatmap\n```python\n# Heatmap\nimport plotly.graph_objects as go\ndir_0 = speeds.loc[(speeds.dir_id=='Inbound')&(speeds.route_name=='1 CALIFORNIA')].sort_values(by='stop_sequence') \ndir_0['hour'] = dir_0.window.apply(lambda x: int(x.split(':')[0]))\ndir_0.sort_values(by='hour', ascending=True, inplace=True)\n\nfig = go.Figure(data=go.Heatmap(\n                   z=dir_0.speed_kmh,\n                   y=dir_0.start_stop_name,\n                   x=dir_0.window,\n                   hoverongaps = False,\n                   colorscale=px.colors.colorbrewer.RdYlBu, \n                   reversescale=False\n))\n\nfig.update_yaxes(title_text='Stop', autorange='reversed')\nfig.update_xaxes(title_text='Hour of day', side='top')\nfig.update_layout(showlegend=False, height=600, width=1000,\n                 title='Speed heatmap per direction and hour of the day')\n\nfig.show()\n```\n![heatmap](/images/heatmap.jpg)\n\n## Line chart\n```python\nby_hour = speeds.pivot_table('speed_kmh', index = ['window'], aggfunc = ['mean','std'] ).reset_index()\nby_hour.columns = ['_'.join(col).strip() for col in by_hour.columns.values]\nby_hour['hour'] = by_hour.window_.apply(lambda x: int(x.split(':')[0]))\nby_hour.sort_values(by='hour', ascending=True, inplace=True)\n\n# Scatter\nfig = px.line(by_hour, \n           x='window_', \n           y='mean_speed_kmh', \n           template='simple_white', \n           #error_y = 'std_speed_kmh'\n                )\n\nfig.update_yaxes(rangemode='tozero')\n\nfig.show()\n```\n![line_chart](/images/speed_hour.jpg)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gtfs-functions",
    "package_url": "https://pypi.org/project/gtfs-functions/",
    "platform": null,
    "project_url": "https://pypi.org/project/gtfs-functions/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Bondify/gtfs_functions/issues",
      "Homepage": "https://github.com/Bondify/gtfs_functions/tree/master"
    },
    "release_url": "https://pypi.org/project/gtfs-functions/2.0.3/",
    "requires_dist": [
      "branca>=0.6.0",
      "folium>=0.14.0",
      "geopandas>=0.12.2",
      "jenkspy>=0.3.2",
      "numpy>=1.24.2",
      "pandas>=1.5.3",
      "pendulum>=2.0.0",
      "plotly>=5.13.0",
      "shapely>=2.0.1",
      "unicode>=2.9",
      "utm>=0.7.0"
    ],
    "requires_python": ">=3.8",
    "summary": "Package to easily wrangle GTFS files geospatially.",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17274689,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9ad00570ce448879787f2e77a2ae9b234b5ac60bde45bbcf8f99464eb4baed1",
          "md5": "5623a6fa197918606ea89613acac780c",
          "sha256": "accdcb39df4cd40107f032dd04df10402a370ab2a623bfb960390cfd5488c917"
        },
        "downloads": -1,
        "filename": "gtfs_functions-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5623a6fa197918606ea89613acac780c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 187988,
        "upload_time": "2020-12-05T21:56:25",
        "upload_time_iso_8601": "2020-12-05T21:56:25.105182Z",
        "url": "https://files.pythonhosted.org/packages/a9/ad/00570ce448879787f2e77a2ae9b234b5ac60bde45bbcf8f99464eb4baed1/gtfs_functions-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf12ecf2315c88607ab0ad93abb3bc6be8c3bbe33b84a9b9aa07121fa1fcaa76",
          "md5": "8de61d452af5a936c7c7ac2957a5a574",
          "sha256": "a9513cfb33729733559e95d5640de2e84d0ca8cd3771a170fc0c64cd0a9fb103"
        },
        "downloads": -1,
        "filename": "gtfs_functions-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8de61d452af5a936c7c7ac2957a5a574",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 523659,
        "upload_time": "2020-12-05T21:56:28",
        "upload_time_iso_8601": "2020-12-05T21:56:28.282344Z",
        "url": "https://files.pythonhosted.org/packages/cf/12/ecf2315c88607ab0ad93abb3bc6be8c3bbe33b84a9b9aa07121fa1fcaa76/gtfs_functions-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0942e3958a1d2bc2a3d0b7c3efb5537d69bdb5332ab4485e907e1e04b5e8b80e",
          "md5": "eea5cb1b4767a87421965d8392942c8a",
          "sha256": "55325bd97fb66ccd3ea2ef9f2eb51a6e33e44501098246f59d58d690a4aa71f2"
        },
        "downloads": -1,
        "filename": "gtfs_functions-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eea5cb1b4767a87421965d8392942c8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 187973,
        "upload_time": "2020-12-07T21:50:57",
        "upload_time_iso_8601": "2020-12-07T21:50:57.529446Z",
        "url": "https://files.pythonhosted.org/packages/09/42/e3958a1d2bc2a3d0b7c3efb5537d69bdb5332ab4485e907e1e04b5e8b80e/gtfs_functions-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7739d6a6aaabd869853079c7228ba7055d1e60d9dc6d98824c5bd8fd931fd700",
          "md5": "a25cfa35ae2e6df3b853036849783c0e",
          "sha256": "d1427005066dfcde6e94e5f30cf987ee8a6928fec98352ed24d70df3b837d54b"
        },
        "downloads": -1,
        "filename": "gtfs_functions-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a25cfa35ae2e6df3b853036849783c0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 523637,
        "upload_time": "2020-12-07T21:51:02",
        "upload_time_iso_8601": "2020-12-07T21:51:02.510097Z",
        "url": "https://files.pythonhosted.org/packages/77/39/d6a6aaabd869853079c7228ba7055d1e60d9dc6d98824c5bd8fd931fd700/gtfs_functions-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebab8e5c3c23c1bbab097bada5c92c1cc14faabd3d9753206c6cd10582e36adb",
          "md5": "9deb1ea625e53c2f99a90c212ea89201",
          "sha256": "2ea722488cacb0dde196604617eac4743ea98d300d68b999875e1e6a27af795e"
        },
        "downloads": -1,
        "filename": "gtfs_functions-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9deb1ea625e53c2f99a90c212ea89201",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 17137,
        "upload_time": "2023-03-13T14:06:26",
        "upload_time_iso_8601": "2023-03-13T14:06:26.543480Z",
        "url": "https://files.pythonhosted.org/packages/eb/ab/8e5c3c23c1bbab097bada5c92c1cc14faabd3d9753206c6cd10582e36adb/gtfs_functions-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0aa3e3f27c17136649bb9216b4b197f056f0078baabfdec241605230348deab3",
          "md5": "1ce770fff68e4f9e2e08e2f0eead79b7",
          "sha256": "4b28e63fd766617903e2f8d5637ae3189d781e635da4d4156ffd1f78d50f5bfe"
        },
        "downloads": -1,
        "filename": "gtfs_functions-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ce770fff68e4f9e2e08e2f0eead79b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 959670,
        "upload_time": "2023-03-13T14:06:29",
        "upload_time_iso_8601": "2023-03-13T14:06:29.011460Z",
        "url": "https://files.pythonhosted.org/packages/0a/a3/e3f27c17136649bb9216b4b197f056f0078baabfdec241605230348deab3/gtfs_functions-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbe42b326c137cacd733c69eadbbf0d826189425e3ab1e6746aac55e73898d67",
          "md5": "f176f423d727accab6d5f3e9ee146cc8",
          "sha256": "64af0b080de1fd388c77350a34f196692a851918bec69c26a2ed4a5ca856c57f"
        },
        "downloads": -1,
        "filename": "gtfs_functions-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f176f423d727accab6d5f3e9ee146cc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17306,
        "upload_time": "2023-03-13T17:05:36",
        "upload_time_iso_8601": "2023-03-13T17:05:36.915495Z",
        "url": "https://files.pythonhosted.org/packages/db/e4/2b326c137cacd733c69eadbbf0d826189425e3ab1e6746aac55e73898d67/gtfs_functions-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e875ca9bac68f2af71998e892df9c9cb6433b9f1178d439bf34a020a2223e1df",
          "md5": "71eb360f169d9a9a458c0978813ae969",
          "sha256": "4f0c174d042dc1f752e005c0afd2ab486667dfd53372d69124f974498e452329"
        },
        "downloads": -1,
        "filename": "gtfs_functions-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "71eb360f169d9a9a458c0978813ae969",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 959856,
        "upload_time": "2023-03-13T17:05:39",
        "upload_time_iso_8601": "2023-03-13T17:05:39.663473Z",
        "url": "https://files.pythonhosted.org/packages/e8/75/ca9bac68f2af71998e892df9c9cb6433b9f1178d439bf34a020a2223e1df/gtfs_functions-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51024df6c445cbd9e4cca14159d8ea3774685f433cf33b3ae7585d8dd92ada2e",
          "md5": "90ffc9eb39356002d5f7f3ed911173d5",
          "sha256": "f17b8f8d231980c00e4da3d4cda386a0bfa1275d57b7f89f866d888d8611333e"
        },
        "downloads": -1,
        "filename": "gtfs_functions-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90ffc9eb39356002d5f7f3ed911173d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17313,
        "upload_time": "2023-03-13T17:22:05",
        "upload_time_iso_8601": "2023-03-13T17:22:05.536817Z",
        "url": "https://files.pythonhosted.org/packages/51/02/4df6c445cbd9e4cca14159d8ea3774685f433cf33b3ae7585d8dd92ada2e/gtfs_functions-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8df4a5b790d2f1e246ffe2e8b1c8ea2cc026b2e987327c190bf58fa2a50adb0",
          "md5": "ebdd9768a307312e4164b7d42e0c894e",
          "sha256": "b59a16871c8b45763602de62f9ad424d21293318a38dea0aecaed4a4be9f9c1d"
        },
        "downloads": -1,
        "filename": "gtfs_functions-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ebdd9768a307312e4164b7d42e0c894e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 959869,
        "upload_time": "2023-03-13T17:22:07",
        "upload_time_iso_8601": "2023-03-13T17:22:07.767604Z",
        "url": "https://files.pythonhosted.org/packages/b8/df/4a5b790d2f1e246ffe2e8b1c8ea2cc026b2e987327c190bf58fa2a50adb0/gtfs_functions-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a207d06931cd7efaa3d17e705268c3eefdef7f98c99c787d3df34cf6adfc025",
          "md5": "1fcb1def5f04c9e1e7f20752c06a77a8",
          "sha256": "f0abc2ee233b04c9222f191e217a73972bf6a277eabc0f282257785273878535"
        },
        "downloads": -1,
        "filename": "gtfs_functions-2.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fcb1def5f04c9e1e7f20752c06a77a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17314,
        "upload_time": "2023-03-13T17:40:20",
        "upload_time_iso_8601": "2023-03-13T17:40:20.175415Z",
        "url": "https://files.pythonhosted.org/packages/1a/20/7d06931cd7efaa3d17e705268c3eefdef7f98c99c787d3df34cf6adfc025/gtfs_functions-2.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39763a7c98a3ea444271271459cd0a5269de8cc116d2587959c6a39e6011771a",
          "md5": "3ae84862206dcf5727dedde934494174",
          "sha256": "dd5905505bb0ef6a6524b052e0e1199c7534f925e8522c8f2a9a7729ee5e9244"
        },
        "downloads": -1,
        "filename": "gtfs_functions-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3ae84862206dcf5727dedde934494174",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14724154,
        "upload_time": "2023-03-13T17:40:24",
        "upload_time_iso_8601": "2023-03-13T17:40:24.096362Z",
        "url": "https://files.pythonhosted.org/packages/39/76/3a7c98a3ea444271271459cd0a5269de8cc116d2587959c6a39e6011771a/gtfs_functions-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a207d06931cd7efaa3d17e705268c3eefdef7f98c99c787d3df34cf6adfc025",
        "md5": "1fcb1def5f04c9e1e7f20752c06a77a8",
        "sha256": "f0abc2ee233b04c9222f191e217a73972bf6a277eabc0f282257785273878535"
      },
      "downloads": -1,
      "filename": "gtfs_functions-2.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1fcb1def5f04c9e1e7f20752c06a77a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 17314,
      "upload_time": "2023-03-13T17:40:20",
      "upload_time_iso_8601": "2023-03-13T17:40:20.175415Z",
      "url": "https://files.pythonhosted.org/packages/1a/20/7d06931cd7efaa3d17e705268c3eefdef7f98c99c787d3df34cf6adfc025/gtfs_functions-2.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39763a7c98a3ea444271271459cd0a5269de8cc116d2587959c6a39e6011771a",
        "md5": "3ae84862206dcf5727dedde934494174",
        "sha256": "dd5905505bb0ef6a6524b052e0e1199c7534f925e8522c8f2a9a7729ee5e9244"
      },
      "downloads": -1,
      "filename": "gtfs_functions-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3ae84862206dcf5727dedde934494174",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14724154,
      "upload_time": "2023-03-13T17:40:24",
      "upload_time_iso_8601": "2023-03-13T17:40:24.096362Z",
      "url": "https://files.pythonhosted.org/packages/39/76/3a7c98a3ea444271271459cd0a5269de8cc116d2587959c6a39e6011771a/gtfs_functions-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}