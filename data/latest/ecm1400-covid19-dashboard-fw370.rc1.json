{
  "info": {
    "author": "Frederick Westhead",
    "author_email": "fw370@exeter.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# README User Manual\n\n## Introduction:\n\nThis Python project receives the latest COVID-19 Data for the COVID-19 outbreak in the United Kingdom using the publichealthengland COVID-19 API Service. We also receive COVID-19 relevant news from newsapi.org. This data is then displayed on a localhost webpage that allows users to view the data and schedule data updates, acting as a COVID-19 dashboard. This project was built for the purpose of ECM1400 Programming Continuous Assessment. \n\n### Prerequisites:\n\nPython 3.10.0 used for development of this project. Visit https://python.org/downloads/ on a web browser to install.\n\n### Installations:\n\n###### All should be installed within the project environment.\n\nFlask: A micro web framework that allows us to localhost a webpage. \n\n```\n$ pip install Flask\n```\n\nUk-covid19: Library used for retrieving the latest COVID-19 Data.\n\n```\n$ pip install uk-covid19\n```\n\npytest: Used to test the code and ensure it is working correctly.\n\n```\n$ pip install -U pytest\n```\n\n\n\n### Getting started:\n\nWith python 3.10.0 installed and both Flask and uk-covid19 also installed, we may now make a start running the project. First step is obtaining a API key for the newsapi.org. If you do not already have an active API key for newsapi.org , visit https://newsapi.org/register to register for an API key. Once you have obtained your own API key, navigate to config.json within the python package and paste the API key within the apikey dictionary.\n\n```json\n{\"apikey\": [{\"apikey\": \"Paste API key here\"}]}\n```\n\nWith the API key set, we may now run the project. To do this, we must open the command line terminal, navigate to the folder in which the package is located\n\n```\ncd C:\\example\n```\n\n and enter the following commands (assuming the python file containing Flask is named main.py)\n\n```\nset FLASK_APP=main\nset FLASK_ENV=development\nflask run\n```\n\nIf we have a successful launch of main.py, we should see:\n\n```\n* Serving Flask app 'main' (lazy loading)\n* Environment: development\n* Debug mode: on\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: xxx-xxx-xxx\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```\n\nThe final line in the terminal tells us where to visit to see our project working. Open a web browser and enter http://127.0.0.1:5000/index which will lead us to a localhost webpage running the template and code.\n\nFrom this webpage, a client may schedule data and news updates. In the centre column of the page, below the COVID-19 data, is a series of forms to allow updates to be scheduled. Filling these in and pressing the submit button will call this and an update will be scheduled. \n\nTo finish running the localhost webpage, simply press CTRL+C in the terminal. \n\n### Testing:\n\nTo run the tests provided within test_ecm1400.py, navigate to the project directory within terminal and enter the following command (assuming the test file has not been renamed):\n\n```\n\npytest test_ecm1400.py\n```\n\nPytest will respond with how many tests have passed, and if any tests have failed have specified which one(s). Each test has logging built in and will record whether the test passed or failed within the logging file.\n\n##### test_config():\n\nThis test checks whether the config file returns a dictionary when loaded. If the config file does not return a dictionary, the data within will not be accessed properly. \n\n### Developer Details:\n\n##### Files contained within the package:\n\nnation_2021-10-28.csv : Contains the CSV data for parse_csv_data and process_csv_data functions within covid_data_handler.\n\nconfig.json: Config file used to enter api key and edit default arguments.\n\ncovid_data.json: Stores the covid data from covid_data_handler.py\n\ncovid_news.json: Stores the news updates from covid_news_handling.py\n\nscheduled_updates.json: Stores what updates are scheduled.\n\ncovid_data_handler.py: Retrieves data from the publichealthengland API.\n\ncovid_news_handling.py: Retrieves Covid-19 data from newsapi.org\n\ntest_ecm1400.py: Contains the testing functions to use with pytest.\n\napp.py: The main file of the code. This is where the code is executed from.\n\nREADME.md: This file, containing information on the project.\n\nTemplates folder containing index.html: Frontend for the Covid-19 Dashboard.\n\necm1400_logging: Contains logged information on the status of the executed code.\n\n##### Usage of the code:\n\nThe config file allows the API key along with the default search parameters for the news API and Covid-19 data API to be entered. For multiple terms in covid_terms whitespace should separate each term. The other json files should not be edited manually as the executed code will do so correctly.\n\n##### Explanation of each function:\n\n###### Functions within covid_data_handler.py:\n\n###### parse_csv_data:\n\nReads data from a specified file and returns it in a list.\n\nOpens a csv file with the name given as an argument, and appends an empty list with each item\nbeing seperated by a newline in the csv file.\n\nParameters:\ncsv_filename (str) Provides the name of the desired csv file to open.\n\nReturns:\ncovid_csv_data: A list of data separated by newline.\n\n###### process_covid_csv_data:\n\nManipulates the list provided from the given argument and returns desired varaibles.\n\nCreates two items, an empty list and an integer variable. Splits each item in the list again\nby seperating between commas to create a nested list. Deletes first two items due to them\nbeing useless. Assigns the required integer data to named variables.\n\nParameters:\ncovid_csv_data: List of covid data returned from the function \"parse_csv_data\".\n\nReturns:\nlast7days_cases (int): Integer value of the Covid cases for the previous week.\ncurrent_hospital_cases (int): Integer value of the number current number of patients\nhospitalised with Covid-19.\ntotal_deaths (int): Total Number of Deaths due to Covid-19.\n\n###### covid_API_request:\n\nRequests certain data from the Cov19API and writes to a file.\n\nRequests Covid-19 data as a json from the publichealthengland Cov19API/uk_covid19 module\nbefore reading the json as a dictionary object and assigning the most recent data to named\nvariables. Finally writes this data into a JSON file\nfor permanence across modules and functions.\n\nParameters:\nlocation (str): Provides areaName for the covid19API structure, with default value \"Exeter\".\nlocation_type (str): Provides areaType, with default value \"ltla\".\n\nReturns:\ncovid_data.json: \"Returns\" a json file with the desired data.\n\n###### schedule_covid_updates:\n\nUses sched module to run functions with a delay of a desired time in seconds\n\nRuns the function \"covid_API_request\" in a delay given. If a repeat is called\nfrom the client side through flask requests, then the function will schedule\nanother call of the same function 24 hours from the originally scheduled time.\n\nParameters:\nupdate_interval (int): Specifies the desired delay.\nupdate_name (str): Specifies the name of the scheduled event.\nrepeat_update (str): Used to call a repeat of the scheduled update.\n\n###### news_API_request:\n\nRetrieves Covid News from newsapi and writes it into a json file.\n\nFirst retrieves the apikey from a config json file. Specifies some parameters for the\nrequests function, which retrieves covid news titles and a short description of each\narticle_update from the newsapi. Writes this news in json format to\na file named 'covid_news.json'.\n\nParameters:\ncovid_terms (str): used in the query line of the newsapi to only return covid data.\n\nReturns:\nnews_articles: Writes to a json formatted file.\n\n###### update_news: \n\nWorking in the same way as schedule_covid_updates, uses sched module to run functions with a delay of a desired time in seconds.\n\nRuns the function \"news_API_request\" in a delay given. If a repeat is called\nfrom the client side through flask requests, then the function will schedule\nanother call of the same function 24 hours from the originally scheduled time.\n\nParameters:\nupdate_interval (int): Specifies the desired delay.\nupdate_name (str): Specifies the name of the scheduled event.\nrepeat_update (str): Used to call a repeat of the scheduled update.\n\n###### @app.route('/index', methods = ['GET']):\n\nThis specifies the URL of the flask template to run index on. Methods refers to the method used to retrieve client side information. In this case it is GET, which sends a message to the server which in response returns data.\n\n###### index:\n\nThis function links the HTML template and the data processed from python.\n    \n\nOpens the two json files containing desired data and assigning them to variables\nto be rendered in the template. Then uses requests.get to retrieve client side\ninputs from the flask. Using these retrieved inputs and if statements,\nthe code responds accordingly to what has been requested by the client.\n\nReturn:\nA built-in function that renders the HTML template by matching HTML variables\nand python variables.\n\n### Details:\n\nAuthor: Frederick Westhead\nIndex.html template written by Matt Collison\nLicense: MIT Licence\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fw370/ecm1400-covid-dashboard-fw370",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ecm1400-covid19-dashboard-fw370",
    "package_url": "https://pypi.org/project/ecm1400-covid19-dashboard-fw370/",
    "platform": "",
    "project_url": "https://pypi.org/project/ecm1400-covid19-dashboard-fw370/",
    "project_urls": {
      "Homepage": "https://github.com/fw370/ecm1400-covid-dashboard-fw370"
    },
    "release_url": "https://pypi.org/project/ecm1400-covid19-dashboard-fw370/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Local hosted webpage displaying a Covid-19 dashboard for ECM1400 Programming Continuous Assesment",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12259314,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eae557469d5b0516ba940a09e6d59cca930dfd316f01627836f38e52b65e837c",
          "md5": "8082b87a058ebd26e85da7563c7671de",
          "sha256": "e4be9319e9e588ca8fedb970562639115a8f8fb477ad473017812bb581d2c0b6"
        },
        "downloads": -1,
        "filename": "ecm1400_covid19_dashboard_fw370-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8082b87a058ebd26e85da7563c7671de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 5627,
        "upload_time": "2021-12-09T19:40:35",
        "upload_time_iso_8601": "2021-12-09T19:40:35.523592Z",
        "url": "https://files.pythonhosted.org/packages/ea/e5/57469d5b0516ba940a09e6d59cca930dfd316f01627836f38e52b65e837c/ecm1400_covid19_dashboard_fw370-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbf5fc694ed1d07c988b398493a9e0ec7df963922813ae015e41e14d7d55f05a",
          "md5": "eaf7006a3d42e5b7ee8e09419877ed78",
          "sha256": "21796e392f484a371523be1d14840b72454c2b6307baeb9a30c8488eeb21361d"
        },
        "downloads": -1,
        "filename": "ecm1400-covid19-dashboard-fw370-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eaf7006a3d42e5b7ee8e09419877ed78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5536,
        "upload_time": "2021-12-09T19:40:37",
        "upload_time_iso_8601": "2021-12-09T19:40:37.124805Z",
        "url": "https://files.pythonhosted.org/packages/fb/f5/fc694ed1d07c988b398493a9e0ec7df963922813ae015e41e14d7d55f05a/ecm1400-covid19-dashboard-fw370-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eae557469d5b0516ba940a09e6d59cca930dfd316f01627836f38e52b65e837c",
        "md5": "8082b87a058ebd26e85da7563c7671de",
        "sha256": "e4be9319e9e588ca8fedb970562639115a8f8fb477ad473017812bb581d2c0b6"
      },
      "downloads": -1,
      "filename": "ecm1400_covid19_dashboard_fw370-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8082b87a058ebd26e85da7563c7671de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 5627,
      "upload_time": "2021-12-09T19:40:35",
      "upload_time_iso_8601": "2021-12-09T19:40:35.523592Z",
      "url": "https://files.pythonhosted.org/packages/ea/e5/57469d5b0516ba940a09e6d59cca930dfd316f01627836f38e52b65e837c/ecm1400_covid19_dashboard_fw370-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbf5fc694ed1d07c988b398493a9e0ec7df963922813ae015e41e14d7d55f05a",
        "md5": "eaf7006a3d42e5b7ee8e09419877ed78",
        "sha256": "21796e392f484a371523be1d14840b72454c2b6307baeb9a30c8488eeb21361d"
      },
      "downloads": -1,
      "filename": "ecm1400-covid19-dashboard-fw370-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "eaf7006a3d42e5b7ee8e09419877ed78",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 5536,
      "upload_time": "2021-12-09T19:40:37",
      "upload_time_iso_8601": "2021-12-09T19:40:37.124805Z",
      "url": "https://files.pythonhosted.org/packages/fb/f5/fc694ed1d07c988b398493a9e0ec7df963922813ae015e41e14d7d55f05a/ecm1400-covid19-dashboard-fw370-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}