{
  "info": {
    "author": "Nail Ibragimov",
    "author_email": "ibragwork@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Real-time captcha-to-text decodings for asyncio\n===============================================\n.. image:: https://travis-ci.org/nibrag/aio_anticaptcha.svg?branch=master\n   :target: https://travis-ci.org/nibrag/aio_anticaptcha\n   :align: right\n\n.. image:: https://coveralls.io/repos/github/nibrag/aio_anticaptcha/badge.svg?branch=master\n   :target: https://coveralls.io/github/nibrag/aio_anticaptcha?branch=master\n   :align: right\n\nAPI documentation\n-----------------\n- https://anti-captcha.com/apidoc\n- http://antigate.com/?action=api#algo\n\nInstallation\n------------\nYou can install it using Pip:\n\n.. code-block::\n\n    pip install aio_anticaptcha\n\nIf you want the latest development version, you can install it from source:\n\n.. code-block::\n\n    git clone git@github.com:nibrag/aio_anticaptcha.git\n    cd aio_anticaptcha\n    python setup.py install\n\n**Requirements:**\n\n.. code-block::\n\n    python 3.4+\n    aiohttp\n\nUsage\n-----\nWith context manager\n\n.. code-block:: python\n\n    import asyncio\n    from aio_anticaptcha import AntiCaptcha, ServiceError\n\n    async def run(loop):\n        try:\n            with AntiCaptcha('API-KEY', loop=loop) as ac:\n                # io.IOBase\n                fh = open('captcha.jpg')\n                resolved, captcha_id = await ac.resolve(fh)\n\n                # or bytes, bytearray\n                bytes_buff = open('captcha.jpg', 'rb').read()\n                resolved, captcha_id = await ac.resolved(bytes_buff)\n        except ZeroBalanceError:\n            print('Zero balance')\n        except UserKeyError:\n            print('Invalid api key...')\n        except ServiceError as e:\n            print('Something else', str(e))\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(run(loop))\n        loop.close()\n\nWithout context manager\n\n.. code-block:: python\n\n    import asyncio\n    from aio_anticaptcha import AntiCaptcha, ServiceError\n\n    async def run(loop):\n        ac = AntiCaptcha('API-KEY', loop=loop)\n        try:\n            # io.IOBase\n            resolved, captcha_id = await ac.resolve(open('captcha.jpg'))\n\n            # or bytes, bytearray\n            bytes_buff = open('captcha.jpg', 'rb').read()\n            resolved, captcha_id = await ac.resolved(bytes_buff)\n        except ServiceError as e:\n            print(e)\n        finally:\n            # do'nt forget call close method\n            ac.close()\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(run(loop))\n        loop.close()\n\nIf you wish to complain about a mismatch results, use ``abuse`` method:\n\n.. code-block:: python\n\n    import asyncio\n    from aio_anticaptcha import AntiCaptcha\n\n    async def run(loop):\n        with AntiCaptcha('API-KEY', loop=loop) as ac:\n            resolved, captcha_id = await ac.resolve(open('captcha.jpg'))\n            await ac.abuse(captcha_id)\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(run(loop))\n        loop.close()\n\nAfter all manipulations, you can get your account balance:\n\n.. code-block:: python\n\n    import asyncio\n    from aio_anticaptcha import AntiCaptcha\n\n    async def run(loop):\n        with AntiCaptcha('API-KEY', loop=loop) as ac:\n            balance = await ac.get_balance()\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(run(loop))\n        loop.close()\n\nAdditional options for sending Captcha:\n---------------------------------------\n\nRead documentation about all available options:\nhttps://anti-captcha.com/apidoc\n\n.. code-block:: python\n\n    import asyncio\n    from aio_anticaptcha import AntiCaptcha\n\n    async def run(loop):\n        with AntiCaptcha('API-KEY', loop=loop) as ac:\n            resolved, captcha_id = await ac.resolve(open('captcha.jpg'), max_len=5, is_russian=True)\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(run(loop))\n        loop.close()\n\nCustomizing anticaptcha service\n-------------------------------\n\n.. code-block:: python\n\n    import asyncio\n    from aio_anticaptcha import AntiCaptcha\n\n    async def run(loop):\n        with AntiCaptcha('API-KEY', loop=loop, domain='antigate.com', port=80) as ac:\n            balance = await ac.get_balance()\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(run(loop))\n        loop.close()\n\nAntiGate.com supported\n----------------------\n\n.. code-block:: python\n\n    import asyncio\n    from aio_anticaptcha import AntiGate\n\n    async def run(loop):\n        with AntiGate('API-KEY', loop=loop) as ag:\n            balance = await ag.get_balance()\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(run(loop))\n        loop.close()",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nibrag/aio_anticaptcha",
    "keywords": "antigate captcha anticaptcha",
    "license": "Apache 2",
    "maintainer": null,
    "maintainer_email": null,
    "name": "aio_anticaptcha",
    "package_url": "https://pypi.org/project/aio_anticaptcha/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/aio_anticaptcha/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/nibrag/aio_anticaptcha"
    },
    "release_url": "https://pypi.org/project/aio_anticaptcha/0.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Real-time captcha-to-text decodings",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2159464,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d19757dac0c4a9eb8f23e80292a089da2f0386fbd366a158867fceb324cf3239",
          "md5": "383b41d35e7e14d4e7520c356b5176cd",
          "sha256": "c1e486d6a02cf6f9a9f2999a334a9c0ade4b9b812f127c1eacf3a1c0dbd92867"
        },
        "downloads": -1,
        "filename": "aio_anticaptcha-0.1.0.zip",
        "has_sig": false,
        "md5_digest": "383b41d35e7e14d4e7520c356b5176cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7879,
        "upload_time": "2016-06-09T21:09:03",
        "upload_time_iso_8601": "2016-06-09T21:09:03.567028Z",
        "url": "https://files.pythonhosted.org/packages/d1/97/57dac0c4a9eb8f23e80292a089da2f0386fbd366a158867fceb324cf3239/aio_anticaptcha-0.1.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d19757dac0c4a9eb8f23e80292a089da2f0386fbd366a158867fceb324cf3239",
        "md5": "383b41d35e7e14d4e7520c356b5176cd",
        "sha256": "c1e486d6a02cf6f9a9f2999a334a9c0ade4b9b812f127c1eacf3a1c0dbd92867"
      },
      "downloads": -1,
      "filename": "aio_anticaptcha-0.1.0.zip",
      "has_sig": false,
      "md5_digest": "383b41d35e7e14d4e7520c356b5176cd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7879,
      "upload_time": "2016-06-09T21:09:03",
      "upload_time_iso_8601": "2016-06-09T21:09:03.567028Z",
      "url": "https://files.pythonhosted.org/packages/d1/97/57dac0c4a9eb8f23e80292a089da2f0386fbd366a158867fceb324cf3239/aio_anticaptcha-0.1.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}