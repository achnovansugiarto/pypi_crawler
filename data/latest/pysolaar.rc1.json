{
  "info": {
    "author": "Richard Hadden",
    "author_email": "richard.hadden@oeaw.ac.at",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "PySolaar\n========\n\nA highly opinionated, Django-like wrapper round PySolr, for when you want to ridiculously de-normalise some complex data at runtime, and then query it with a pretty interface.\n\n<br/><br/>\n\n\n# Features\n\n## Managing your Solr data\n- Create document types with a Django-like class-based approach\n- Define how a document instance should get its data. It's just a function you define, so how you get the data is up to you: from a database, by mushing together data from different Django classes, by HTTP request...\n- Define a function for PySolaar to call in order to generate the documents...\n- Declaratively define the structure of your documents, if you want to do any complex embedding or reuse documents.\n- **Press go!**\n- PySolaar automatically encodes, embeds, etc. all the data and pushes it to Solr.\n- Fields are \"namespaced\" to document-type (like Python's `__name_mangling`), so no clashes! The `id` field's value is also prefixed with the class name, so it's unique for a specific class.\n\n\n## Querying your Solr data\n- A nice Django QuerySet-like approach (wraps a modified version of [SolrQ](https://pypi.org/project/solrq/), which you can also use for more complex queries) \n- Automatically prefixes all the queries to deal with the name-mangling.\n- Declaratively define the document you want returned, including a set of transformations for unpacking data, turning dates back into Python `datetime` objects, or whatever you want.\n- Lazy query evaluation\n\n<br/><br/>\n\n# Basics\n## Creating PySolaar Documents\n\nPySolaar allows documents to be defined using Django-like classes, which represent entity types:\n\n1. Create an entity type, by subclassing `PySolaar`.\n3. Define a `build_document` method:\n    - This is \"how you get the data to index\".\n    - This method defines a single document or set of documents that correspond to a single identifier. \n    - It should take an identifier as an argument, and return a `self.Document` object or an iterable of `self.Document` objects.\n    - Pass your data as key words to `self.Document` initialiser or unpack a dict.\n4. Define a `build_document_set` method that iterates through a series of identifiers and returns a call to `self.build_document` for each identifier.\n\n<br/>\n\n\n```python\nfrom pysolaar import PySolaar\n\n# Create a thing that inherits from PySolaar\nclass Person(PySolaar):\n\n    # Write a `build_document` method -- this gets the data corresponding\n    # to a particular value of `identifier`\n\n    def build_document(self, identifier):\n\n        # Return an instance of self.Document containing the data\n        return self.Document(\n            id=\"person-{}\".format(identifier), \n            name=\"Claudius the {}\".format(identifier), \n            height=100 * identifier,\n            moustache=[\"No\", \"Yes\"][bool(identifier % 2 == 0)] # It's odd not to have a moustache!\n        )\n\n    # Write `build_document_set` that produces an iterator of Person.build_document calls\n    def build_document_set(self):\n        for identifier in [1, 2, 3, 4, 5]:\n            yield self.build_document(identifier)\n\n\n# Configure PySolaar by setting up the underlying PySolr instance\nPySolaar.configure_pysolr(\"http://your-solr-instance\")\n\n# Then run PySolaar.update() to push data to Solr\nPySolaar.update()\n```\n\nWhen `PySolaar.update()` is called, PySolaar goes through all its subclasses' `build_document_set` functions, in order to generate the documents, and then pushes them to Solr. Obviously, there's a reasonable amount of magic.\n\n<br/>\n\n\n## Querying the data\n\nPySolaar provides a Django-like interface for querying data. Or just pass a [SolrQ](https://pypi.org/project/solrq/) object to `.filter()`\n\n```python\nfrom PySolaar import Q\nfrom __above__ import Person\n\n# Get all the persons\npersons = Person.all() \n\n# Filter by anything ...\nclaudiuses = Person.filter(name=\"Claudius\")\n\n# ... and chain QuerySets as in Django\ntall_with_moustache = claudiuses.filter(height__gt=250, moustache=\"Yes\")\n\n# ... or use a Q object\neither_tall_or_moustache = claudiuses.filter( Q(height__gt=250) | Q(moustache=\"Yes\") )\n\n# ... and paginate\nfirst_page = tall_with_moustache.paginate(page_size=2, page_number=0)\n\n# Results aren't evaluated until you need them:\ntall_with_moustache.count() # -> 2\n\nfor c in first_page:\n    print(c[\"id\"])\n\n# And a few other features — see the Advanced section.\n```\n\n## Restrictions when defining documents\nMost of the restrictions here stem from the limitations of Solr and the PySolr library.\n\nA single field can be contain:\n- A value (string, int, datetime, etc.)\n- A `list` of values (probably a `set` as well)\n- A `dict`, whose values are either more dicts or values or lists of values. (Dicts are collapsed down to single value fields using double underscores, i.e. `field={\"one\": \"something\", \"two\": \"something else\"}` becomes `field__one=\"something\"` and `field__two=\"something else\"` — to an arbitrary depth!)\n- **NOT** a list of dicts. To index a list of associated values (e.g. lists of dicts), instead use Child Documents.\n\n<br/><br/><br/>\n\n# Advanced features\n\n## The `Meta` class (as borrowed from Django)\n\nEach class can define a `Meta` class, which can be used to declaratively define a number of aspects regarding how data is stored in Solr. (The Meta class is passed around in the background to apply settings where appropriate.)\n\nUsing the `Meta` class, you can:\n- _Independently from the data-definition method_ (`build_document`), declare a `store_document_fields` structure, defining which fields should be pushed to Solr and in which format. This allows the `build_document` method to be a 'generic' method for getting whatever data is required and allows easy embedding and reuse.\n- Define a `return_document_fields` structure to limit the fields that are returned from Solr (so you can have fields that are just there for querying, but you're not interested in)\n- Or (older version, probably will be deprecated), independently define lists of fields such as `fields_as_child_docs`.\n\n<br/>\n\n## Child documents\n\nThe Solr \"child field\" feature is used to allow one document type to be nested inside another.\n\nTo associate a nested document with a particular field, first define a `fields_as_child_docs` list in the `Meta` class and add the field name. Then set the value of the parent field to `Child.items([identifiers])`. See the example below.\n\n```python\nfrom pysolaar import PySolaar\n\n\nclass Person(PySolaar):\n    class Meta:\n        # Define a Meta class with `fields_as_child_docs`\n        # in order to declare a field is a child doc\n        fields_as_child_docs = [\"pets\"]\n\n    def build_document(self, identifier):\n        return self.Document(\n            id=\"thing-{}\".format(identifier), \n            name=\"Claudius\", \n            # Embed another document type by calling Class.items([identifiers])\n            pets=Pets.items([1, 2, 3])\n        )\n\nclass Pets(PySolaar):\n\n    def build_document(self, identifier):\n        return self.Document(\n            id=\"pet-{}\".format(identifier), \n            name=\"Gordon\"\n        )\n\n```\nIn the background, `PySolaar.items` calls `build_document` with the listed identifiers, and embeds the document as a child (using PySolr's `_doc` keyword).\n\nNesting searchable documents works up to one level of embedding. After this, documents can be stored as JSON strings and recovered automatically, but not queried. After three levels of embedding a particular type, this embedding will stop (preventing infinite recursion).\n\n<br/><br/><br/>\n\n## `store_document_fields`\n\nIn general, the `build_document` function should define __all__ the fields required for every use-case. The results of calling this function with a particular identifier are cached, so the data can be re-used if embedded as a child document elsewhere (n.b. the cache is cleared after an update!)\n\n`DocumentFields` classes provides a convenient way to describe how the document should be stored in Solr. \n\nSet the `store_document_fields` value in your class `Meta` to a `DocumentFields` instance where you list the fields you want to include (set them to `True`). \n\nAlso use this structure to declare child fields using `ChildDocument` (in place of using the `fields_as_child_docs`, as above) _and_ to control which fields in the `ChildDocument` are included.\n\nThis is useful (as in the example below) as we can have `Person` documents with their pets' names embedded as searchable child documents, but also have more detailed `Pets` documents (in turn with  certain `owner` fields).\n\n```python\nimport datetime\nfrom pysolaar import PySolaar, DocumentFields, ChildDocument\n\nclass Person(PySolaar):\n    class Meta:\n        store_document_fields = (\n            DocumentFields(\n                name=True,\n                school=True,\n                work=True,\n                has_pets=ChildDocument( # Here we can start selecting fields from the Pets class\n                    name=True,\n                    weight=True,\n                    # date_of_birth=True ... we don't care about, so omit it\n                    owner=ChildDocument(\n                        name=True, # Here, we embed a Person instance again, this time just selecting the name\n                                # n.b. this `owner` field will be converted to JSON for storage (see above)\n                    ),\n                ),\n            ),\n        )\n\n    def build_document(self, identifier):\n        return self.Document(\n            id=\"thing-{}\".format(identifier), \n            name=\"Claudius\",\n            school=\"St Somethings\",\n            work=\"Bus driver\",\n            has_pets=Pets.items([1, 2, 3])\n        )\n\nclass Pets(PySolaar):\n\n    def build_document(self, identifier):\n        return self.Document(\n            id=\"pet-{}\".format(identifier), \n            name=\"Gordon\"\n            weight=123,\n            date_of_birth=datetime.datetime(1996, 1, 3),\n            # Re-embed the Person as the owner, as it might be useful\n            # if we ever want a 'Pets' top-level document.\n            owner=Person.items(f\"owner_of_{identifier}\")\n        )\n```\n\n`store_document_field` allows the following structures:\n\n- `DocumentFields`: this is the root wrapper for the whole document\n- `ChildDocument`: embeds another document (with the specified fields) as a Solr child document\n- `JsonChildDocument`: embeds a child document by converting it to a JSON string. It can be returned and unpacked back to Python, but not queried in Solr (except as a hit-and-miss string-matching exercise...)\n- `SplattedChildDocument`: embeds a child document as a list of searchable fields (it works recursively through the child document as a dict, accumulating all the values in a list). Useful for creating a searchable version of a child document, where you don't care about any field in particular, just matching something. Probably don't return this from Solr — unlike `JsonChildDocument` it cannot be reverted back to anything particularly useful.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/richardhadden/pysolaar",
    "keywords": "Solr,PySolr",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysolaar",
    "package_url": "https://pypi.org/project/pysolaar/",
    "platform": "",
    "project_url": "https://pypi.org/project/pysolaar/",
    "project_urls": {
      "Homepage": "https://gitlab.com/richardhadden/pysolaar"
    },
    "release_url": "https://pypi.org/project/pysolaar/0.8.0/",
    "requires_dist": [
      "pysolr (>=3.9.0,<4.0.0)",
      "solrq (>=1.1.1,<2.0.0)"
    ],
    "requires_python": ">=3.6,<4",
    "summary": "Opinionated wrapper round PySolr",
    "version": "0.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10720237,
  "releases": {
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d12ae83531ccaff45d0f212458123c47376176d63f96a5ddf74f2920b0a38097",
          "md5": "4d0f341e5a3b803dcfa33b36ee2e8595",
          "sha256": "10324dcbcfbe6ff12956635d57e642d008bb2fae5b40aeaf07510269415aa118"
        },
        "downloads": -1,
        "filename": "pysolaar-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d0f341e5a3b803dcfa33b36ee2e8595",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4",
        "size": 23676,
        "upload_time": "2021-06-23T10:46:34",
        "upload_time_iso_8601": "2021-06-23T10:46:34.707653Z",
        "url": "https://files.pythonhosted.org/packages/d1/2a/e83531ccaff45d0f212458123c47376176d63f96a5ddf74f2920b0a38097/pysolaar-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b24a9aa633b7f149e2837b1d62641742381f49256a61d248f55a4c34cf71375",
          "md5": "33311c016f0dd14713774b1a761f1ad2",
          "sha256": "d428ae4ceea0d5129a246de84de93dd37d705dd61a9bb094d7197c9389b08a2f"
        },
        "downloads": -1,
        "filename": "pysolaar-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "33311c016f0dd14713774b1a761f1ad2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 20114,
        "upload_time": "2021-06-23T10:46:36",
        "upload_time_iso_8601": "2021-06-23T10:46:36.610973Z",
        "url": "https://files.pythonhosted.org/packages/1b/24/a9aa633b7f149e2837b1d62641742381f49256a61d248f55a4c34cf71375/pysolaar-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d12ae83531ccaff45d0f212458123c47376176d63f96a5ddf74f2920b0a38097",
        "md5": "4d0f341e5a3b803dcfa33b36ee2e8595",
        "sha256": "10324dcbcfbe6ff12956635d57e642d008bb2fae5b40aeaf07510269415aa118"
      },
      "downloads": -1,
      "filename": "pysolaar-0.8.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d0f341e5a3b803dcfa33b36ee2e8595",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 23676,
      "upload_time": "2021-06-23T10:46:34",
      "upload_time_iso_8601": "2021-06-23T10:46:34.707653Z",
      "url": "https://files.pythonhosted.org/packages/d1/2a/e83531ccaff45d0f212458123c47376176d63f96a5ddf74f2920b0a38097/pysolaar-0.8.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b24a9aa633b7f149e2837b1d62641742381f49256a61d248f55a4c34cf71375",
        "md5": "33311c016f0dd14713774b1a761f1ad2",
        "sha256": "d428ae4ceea0d5129a246de84de93dd37d705dd61a9bb094d7197c9389b08a2f"
      },
      "downloads": -1,
      "filename": "pysolaar-0.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "33311c016f0dd14713774b1a761f1ad2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 20114,
      "upload_time": "2021-06-23T10:46:36",
      "upload_time_iso_8601": "2021-06-23T10:46:36.610973Z",
      "url": "https://files.pythonhosted.org/packages/1b/24/a9aa633b7f149e2837b1d62641742381f49256a61d248f55a4c34cf71375/pysolaar-0.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}