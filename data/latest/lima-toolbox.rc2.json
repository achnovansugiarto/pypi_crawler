{
  "info": {
    "author": "Jose Tiago Macara Coutinho",
    "author_email": "coutinhotiago@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Lima tool box\n\nA set of command line tools which hopefully ease the configuration and\ndevelopment of [Lima](http://github.com/esrf-bliss/lima) cameras.\n\n![Lima toolbox in action](doc/lima_toolbox.svg)\n\n## Installation\n\n**TL;DR**\n\nFrom within your favorite python environment, type:\n\n```pip install lima-toolbox[all]```\n\n<br/>\nThe toolbox is composed of a core library and plug-ins for diverse set of\ncameras.\n\nThe core can be installed with:\n\n```pip install lima-toolbox```\n\nTo install support for specific camera(s) use (example):\n\n```pip install lima-toolbox[basler,eiger]```\n\nAt the end you can find a mini-catalog of the available cameras.\n\nPRs which implement new cameras (or improve, or fix existing ones) are most\nwelcome.\n\n## CLI\n\nProbably the most useful tool is the CLI. You can use it to discover cameras\non the network, display information about a specfic camera and even perform\nacquisitions.\n\nThe lima CLI provides global commands like `scan` which are not camera specific.\nIn addtition, each camera provides its own set of sub-commands. They are accessible\nby typing `lima <camera> <sub-command>` (ex: `lima eiger --host=bl99eiger info`).\n\nTyping ```lima --help``` will display help. Help is context sensitive, so\ntyping ```lima basler --help``` will display help for the basler subset of\ncommands.\n\n### camera discovery\n\ncamera toolbox plug-ins which provide *scan* capability allow you to\ndiscover them by using the `scan` command:\n\n```console\n$ lima scan --table-style=box_rounded\n\nBasler:\n╭──────────────┬──────────────────────────────┬───────────────────────┬───────────┬────────────┬───────────┬────────╮\n│    Class     │        Friendly name         │       Full name       │   Name    │ Serial Nb. │ User name │ Vendor │\n├──────────────┼──────────────────────────────┼───────────────────────┼───────────┼────────────┼───────────┼────────┤\n│ BaslerCamEmu │ Basler Emulation (0815-0000) │ Emulation (0815-0000) │ Emulation │ 0815-0000  │           │ Basler │\n├──────────────┼──────────────────────────────┼───────────────────────┼───────────┼────────────┼───────────┼────────┤\n│ BaslerCamEmu │ Basler Emulation (0815-0001) │ Emulation (0815-0001) │ Emulation │ 0815-0001  │           │ Basler │\n├──────────────┼──────────────────────────────┼───────────────────────┼───────────┼────────────┼───────────┼────────┤\n│ BaslerCamEmu │ Basler Emulation (0815-0002) │ Emulation (0815-0002) │ Emulation │ 0815-0002  │           │ Basler │\n╰──────────────┴──────────────────────────────┴───────────────────────┴───────────┴────────────┴───────────┴────────╯\n\nEiger:\n╭───────────┬───────────┬─────────────┬──────┬───────╮\n│   Host    │ Alias(es) │ Address(es) │ Port │  API  │\n├───────────┼───────────┼─────────────┼──────┼───────┤\n│ bl04eiger │           │ 172.95.4.11 │ 8000 │ 1.6.0 │\n╰───────────┴───────────┴─────────────┴──────┴───────╯\n\nMythenSLS:\n╭────────────┬─────────────┬──────┬────────┬──────────┬──────────┬───────────┬────────────╮\n│    Host    │     IP      │ Port │  Type  │ #Modules │ Settings │ Threshold │ Dyn. Range │\n├────────────┼─────────────┼──────┼────────┼──────────┼──────────┼───────────┼────────────┤\n│ bl04mythen │ 172.95.4.10 │ 1952 │ MYTHEN │    6     │ STANDARD │   9071    │     32     │\n╰────────────┴─────────────┴──────┴────────┴──────────┴──────────┴───────────┴────────────╯\n```\n\nHere you can see 3 simulated [Basler](https://github.com/esrf-bliss/lima-camera-basler) cameras, an\n[Eiger](https://github.com/esrf-bliss/lima-camera-eiger) camera and a [Mythen SLS](https://github.com/alba-synchrotron/sls-detector) camera are available.\n\n### Common camera commands\n\nAs mentioned above, each camera provides its own set of specific sub-commands.\nThe sub-commands `info` and `acquire` are common to all cameras (altough the specific\nsub-command options could vary).\n\nThe set of options which identify a camera are specific to each camera. For example,\nto identify an eiger you must provide the `--url=<hostname>` option.\n\nNote that there is nothing enforcing a specific camera to implement any of the\ncommon sub-commands. But it is considered good taste if a plugin does it (for the sake\nof coherency).\n\nA camera plugin may optionally implement the `scan` command. It should provide the same\nresult as the global scan with results restricted to the camera type.\n\n#### Camera information\n\nBasic information about a camera can be retrieved with the `info` sub-command.\n\nExamples:\n\n```console\n$ lima eiger --url=bl04eiger info\n    CurrImageType: 10\n     DefImageType: 10\nDetectorImageSize: <3110x3269>\n    DetectorModel: Dectris Eiger 9M\n     DetectorType: E-18-0102\n   InstrumentName: instrument\n     MaxImageSize: <3110x3269>\n        PixelSize: (7.5e-05, 7.5e-05)\n UserDetectorName: E-18-0102\n\n$ lima mythensls --url bl04mythen info\n      CurrImageType   10\n       DefImageType   10\n  DetectorImageSize   <7680x1>\n      DetectorModel   Mythen-II\n       DetectorType   MythenSLS\n     InstrumentName   instrument\n       MaxImageSize   <7680x1>\n          PixelSize   (1.0, 1.0)\n   UserDetectorName   MythenSLS\n\n      Detector type   MYTHEN\n      Serial number   1719109785\n   Software version   1867412\n             Status   IDLE\n      Dynamic range   32\n   Energy threshold   9071\n      Exposure time   1.0\n   Number of frames   0\n   Number of cycles   0\n    Number of gates   0\n             Master   NO_MASTER\n    Synchronization   NONE\n             Timing   AUTO_TIMING\n Delay after triger   0.0\n            Readout   NORMAL_READOUT\n           Settings   STANDARD\n   External signals   ['GATE_OUT_ACTIVE_HIGH', 'TRIGGER_IN_RISING_EDGE', 'OFF',\n                       'OFF']\n```\n\n### Camera acquisition\n\nAquisitions can be made with the `acquire` sub-command.\n\nThe common options include `-nb-frames`, `--exposure-time`, `--latency-time`. You\ncan see the complete list of options with `lima <camera> acquire --help`.\n\nHere is an example performing an acquisition on an eiger camera:\n\n![eiger acquisition](doc/eiger_acq.svg)\n\n## How to write a plug-in for your camera\n\nYou have two options:\n\n### 1. Add a plug-in extension to Lima-toolbox\n\nWrite a PR to this repo with the camera you intend to add. This should always be\npossible independently of the type of camera you are writing the plug-in for.\n\nLet's say you want to create a plugin for the\n[Simulator](http://github.com/esrf-bliss/lima-camera-simulator) camera.\n\nFirst,create a new file in `src/limatb/camera` called `simulator.py`.\nThe lima toolbox CLI uses the [click](https://click.palletsprojects.com) library\nto help create a powerful command line interface.\n\nTo create a `simulator` sub-command you can simply use the lima toolbox `camera`\ndecorator (a `click.group` helper) and write a function which should return a\n`Lima.Interface` object:\n\n```python\n# src/limatb/camera/simulator.py\n\nfrom limatb.cli import camera\nfrom Lima.Simulator import Camera, Interface\n\n\n@camera(name='simulator')\ndef simulator():\n    camera = Simulator.Camera()\n    interface = Interface(camera)\n    return interface\n```\n\nThe second and last thing to do is to register the new command in the lima\ntoolbox setup.py like this:\n\n```python\nextras_require = {\n    \"simulator\": []  #  add any extra python dependencies if necessary\n}\n\nsetup(\n    ...,\n    entry_points={\n        \"lima.cli.camera\": [\n            ...\n            \"Simulator = limatb.camera.simulator:simulator [simulator]\"\n        ]\n    }\n)\n```\n\nThat's it. Next time you install lima-toolbox there should be a `simulator`\ncamera available with the default `info` and `acquire` sub-commands available\n*out of the box*.\n\nCongratulations! You are now ready to make a PR to this repo with your new camera.\n\nRead further to find how to implement camera options, details about the camera\ndecorator and how to implement your own camera specific sub-commands.\n\nExamples of existing cameras can be found in the `src/limatb/camera` directory.\n\n#### Custom options\n\nIf you need to add any option to the command line to identify or configure your\ncamera you can do it using `click.option`. Here is an example extending the\nprevious one:\n\n```python\nimport click\n\n@camera(name='simulator')\n@click.option(\n   '--fill-type',\n   click.Choice(['gauss', 'diffraction'],\n   case_sensitive=False),\n   default='gauss')\ndef simulator(fill_type):\n    camera = Simulator.Camera()\n    interface = Interface(camera)\n    fill_type = getattr(Lima.Simulator.FrameBuilder, fill_type.capitalize())\n    frame_getter = camera.getFrameGetter()\n    frame_getter.setFillType(fill_type)\n    return interface\n```\n\n#### The `camera` decorator\n\nThe `@camera` decorator helper provides a `click.group` decorator enhanced with\nthe `info` and `acquire` sub-commands by default and the facility that the\nreturned interface gets inserted into the click context object\n`ctx.obj['interface']` which can be accessed by any camera sub-commands you\ndecide to implement.\n\nHere is an example on how to implement a specific sub-command:\n\n```python\n\n@simulator.command(\"initialize\")\ndef initialize(self):\n    # Initialization code here\n    ...\n\n```\n\n### scan command\n\nThe lima toolbox CLI implements global `scan` command which has the purpose\nof discovering all the cameras in the system.\n\nTo make the specific `scan` command of your system visible to the global scan\ncommand you need to register a scan function with the signature:\n\n```python\n[async] def scan(timeout: float = None) -> beautifultable.BeautifulTable\n```\n\nand register the entry point in setup.py with:\n\n```python\nsetup(\n    ...,\n    entry_points={\n        \"lima.cli.camera.scan\": [\n            ...\n            \"Simulator = limatb.camera.simulator:scan [simulator]\"\n        ]\n    }\n)\n```\n\nThe scan function can have any name you which. If you provide a coroutine\n(with `async` keyword) the lima t\n\nIf now you type `lima scan` on the command line, the cameras\n\n\n### 2. Write a Lima-toolbox entry point in an external project\n\nAnother option, if your camera plugin is installable via a `setup.py`, is to apply the\nsame recipes above, where the only difference resides in implementing the code in your\nown python detector package and modifying your setup.py instead.\n\nAn example of a project which following this phylosophy is the\n[SLS Mythen](http://github.com/alba-synchrotron/sls-detector).\n\n## Supported cameras\n\n\n### Provided inside lima toolbox\n\n* [Basler](src/limatb/camera/basler.py)\n* [Eiger](src/limatb/camera/eiger.py)\n\n### Known third party cameras\n\n* [SLS Mythen](http://github.com/alba-synchrotron/sls-detector)\n\nFeel free to make a PR adding your own camera to this list. They are most welcome!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tiagocoutinho/lima-toolbox",
    "keywords": "Lima,CLI,toolbox,detector",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lima-toolbox",
    "package_url": "https://pypi.org/project/lima-toolbox/",
    "platform": "",
    "project_url": "https://pypi.org/project/lima-toolbox/",
    "project_urls": {
      "Homepage": "https://github.com/tiagocoutinho/lima-toolbox"
    },
    "release_url": "https://pypi.org/project/lima-toolbox/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Lima toolbox",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7812710,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48cf40d11e3044fe0927bf46694f40a99e89ea0ad0760a42db73743dad2ad170",
          "md5": "6f885c83812574478cdd1d81dceccc02",
          "sha256": "ef75deffdeffc7387dbbb30872e39e153a7bc3265d1b481bdd7a49caf322cc1f"
        },
        "downloads": -1,
        "filename": "lima-toolbox-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6f885c83812574478cdd1d81dceccc02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 16977,
        "upload_time": "2020-05-19T17:57:08",
        "upload_time_iso_8601": "2020-05-19T17:57:08.383665Z",
        "url": "https://files.pythonhosted.org/packages/48/cf/40d11e3044fe0927bf46694f40a99e89ea0ad0760a42db73743dad2ad170/lima-toolbox-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38afcbd0cdfa44d0b76f86fb86d71a13dfa064770697ad4a41fb0dddb2c89925",
          "md5": "9c90b47e2d3f25a160fcbcf692286ad9",
          "sha256": "98d2a534f1721824f8942f17bfe177aabfeb5f7c16249225e719c9108b0b7c98"
        },
        "downloads": -1,
        "filename": "lima-toolbox-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9c90b47e2d3f25a160fcbcf692286ad9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12871,
        "upload_time": "2020-07-28T17:14:45",
        "upload_time_iso_8601": "2020-07-28T17:14:45.466521Z",
        "url": "https://files.pythonhosted.org/packages/38/af/cbd0cdfa44d0b76f86fb86d71a13dfa064770697ad4a41fb0dddb2c89925/lima-toolbox-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38afcbd0cdfa44d0b76f86fb86d71a13dfa064770697ad4a41fb0dddb2c89925",
        "md5": "9c90b47e2d3f25a160fcbcf692286ad9",
        "sha256": "98d2a534f1721824f8942f17bfe177aabfeb5f7c16249225e719c9108b0b7c98"
      },
      "downloads": -1,
      "filename": "lima-toolbox-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9c90b47e2d3f25a160fcbcf692286ad9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 12871,
      "upload_time": "2020-07-28T17:14:45",
      "upload_time_iso_8601": "2020-07-28T17:14:45.466521Z",
      "url": "https://files.pythonhosted.org/packages/38/af/cbd0cdfa44d0b76f86fb86d71a13dfa064770697ad4a41fb0dddb2c89925/lima-toolbox-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}