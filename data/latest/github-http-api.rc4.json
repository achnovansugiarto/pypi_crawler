{
  "info": {
    "author": "_ThaaoBlues_",
    "author_email": "thaaoblues81@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n<main>\n\n<article id=\"content\">\n\n<header>\n\n# Package `github_http_api`\n\n* available on [pypi](https://pypi.org/project/github-http-api/)\n\n* install it by typing ``python -m pip install github-http-api``\n\n* example of use available in the file [example.py](https://github.com/ThaaoBlues/github_api/blob/master/example.py)\n\n</header>\n\n<section id=\"section-intro\"><details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    from requests import get\n    from typing import List\n    from base64 import b64decode\n\n    class GithubHTTPApi():\n\n        def __init__(self):\n            self.ac_username = \"\"\n            self.ac_password = \"\"\n\n            #best api endpoints \n            self.base_repos_url = \"https://api.github.com/repos/\"\n            self.base_user_url = \"https://api.github.com/users/\"\n            self.base_raw_url = \"https://raw.githubusercontent.com/\"\n\n        def login():\n            pass\n\n        #private methods :\n\n        def __is_json_key(self,json:dict,key:str) -> bool:\n            try:\n                json[key]\n                return True\n            except:\n                return False\n\n        #public methods :\n\n        def get_last_event_date(self,username:str)->str:\n            \"\"\"\n            Basically just get the last event that an user made and return the date.\n            May be usefull to determine if an user is active or not.\n\n            :returns: a string containing the date\n\n            :raises UnknownUserException: \n\n            \"\"\"\n\n            if not self.user_exists(username):\n                raise UserNotFoundException\n\n            return get(self.base_user_url+username+\"/events\").json()[0]['created_at']\n\n        def try_determine_email(self,username:str,events_number:int=10)->List[str]:\n            \"\"\"\n\n            tries to gather user email address by events api endpoint, it may be very usefull if the user didn't put it as personnal information and for OSINT people ;)\n\n            :param username: the username (str)\n\n            :returns: A list of potential email addresses (List[str])\n\n            :raises UserNotFoundException:\n\n            \"\"\"\n\n            if not self.user_exists(username):\n                raise UserNotFoundException\n\n            json = get(self.base_user_url+username+\"/events\").json()[:events_number]\n\n            emails = []\n            for event in json:\n                if self.__is_json_key(event['payload'],'commits'):\n                    for commit in event['payload']['commits']:\n                        emails.append(commit['author']['email'])\n\n            return list(set(emails))\n\n        def user_exists(self,username:str)->bool:\n\n            \"\"\"\n\n            :param username: the username\n\n            :returns: a boolean\n\n            \"\"\"\n\n            #check if user exists\n            if self.__is_json_key(get(self.base_user_url+username).json(),\"message\"):\n                return False\n            else:\n                return True\n\n        def get_user_repos(self,username:str)-> list:\n\n            \"\"\"\n            list the publics repositories of the specified user\n\n            :raises: UserNotFoundException if user is not found\n\n            :returns: A list of dict containing repository 'repo_name' and 'repo_url' of user public repositories \n\n            \"\"\"\n\n            if not self.user_exists(username):\n                raise UserNotFoundException\n\n            json = get(f\"{self.base_user_url}{username}/repos\").json()\n            repos_names = [repo['full_name'] for repo in json]\n            repos_urls = [repo['html_url'] for repo in json]\n\n            ret = []\n            for i in range(len(repos_names)):\n                ret.append({'repo_name':repos_names[i],'repo_url':repos_urls[i],})\n\n            return ret\n\n        def repo_exists(self,repository_full_name:str) -> bool:\n            \"\"\"\n\n            :return: True if the repo exists False if not\n\n            \"\"\"\n\n            if self.__is_json_key(get(f\"{self.base_repos_url}{repository_full_name}/releases\").json(),'message'):\n                return False\n\n            else:\n                return True\n\n        def get_release_download_count(self,repository_full_name:str,release_number:int=0) -> List[tuple]:\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param release_number: (default is 0), the more you increase it, the more the release \n            will be an old one.\n\n            :returns: the release download count by assets (list of tuples ('asset_name',downloads_count) (from the lastest release by default) \n\n            :raises InvalidRepoNameException:\n\n            :raises InvalidReleaseIndexException:\n\n            :raises NoReleaseException:\n\n            \"\"\"\n\n            #get http response content\n            json = get(f\"{self.base_repos_url}{repository_full_name}/releases\").json()\n\n            #takes care of exceptions\n            if json == []:\n                raise NoReleaseException\n\n            elif not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            elif release_number > len(json):\n                raise InvalidReleaseIndexException\n\n            release_json = json[release_number]\n            assets = release_json['assets']\n\n            return [(asset['name'],asset['download_count']) for asset in assets]\n\n        def get_release_infos(self,repository_full_name:str,release_number:int=0) -> List[dict]:\n\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param release_number: (default is 0), the more you increase it, the more the release \n            will be an old one.\n\n            :returns: a dict of all the release stats that may be boring but quite usefull sometimes\n\n                - creation_date : when the release has been created (str)\n\n                - release_date : when the release has been..released :) (str)\n\n                - released_by : author of the release (github login) (str)\n\n                - version : tag name of the release (ofter the version) (str)\n\n                - title : title of the release (str)\n\n                - desc : description of the release (str)\n\n                - assets : assets files names (list of str)\n\n            :raises InvalidRepoNameException:\n\n            :raises InvalidReleaseIndexException:\n\n            :raises NoReleaseException:\n\n            \"\"\"\n\n            #get http response content\n            json = get(f\"{self.base_repos_url}{repository_full_name}/releases\").json()\n\n            #takes care of exceptions\n            if json == []:\n                raise NoReleaseException\n            elif not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n            elif release_number > len(json):\n                raise InvalidReleaseIndexException\n\n            #now that we are sure no errors are coming, get the right release\n            json = json[release_number]\n\n            return {'title':json['name'],'version':json['tag_name'],'desc':json['body'],\"creation_date\":json['created_at'],\"release_date\":json['published_at'],\"released_by\":json['author']['login'],\"assets\":[asset[0] for asset in self.get_release_download_count(repository_full_name,release_number=release_number)]}\n\n        def get_raw_file_content(self,repository_full_name:str,file_name:str) -> str:\n            \"\"\"\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param file_name: the file which you wanna get the raw content\n\n            :raises InvalidRepoNameException:\n\n            :raises UnknownFileException:\n\n            :returns: a string containing the raw file content\n            \"\"\"\n\n            if not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            content = get(f\"{self.base_raw_url}{repository_full_name}/master/{file_name}\").text\n\n            if content == \"404: Not Found\":\n                raise UnknownFileException\n\n            return content\n\n        def get_release_asset_download_link(self,repository_full_name:str,asset_name:str,release_number:int=0) -> str:\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param asset_name: the release asset file name \n\n            :param release_number:  (default is 0), the more you increase it, the more the release \n            will be an old one.\n\n            :returns: a string containing the release asset's download url\n\n            :raises InvalidRepoNameException:\n\n            :raises InvalidReleaseIndexException:\n\n            :raises NoReleaseException:\n\n            :raises UnknownAssetException:\n            \"\"\"\n\n            #get http response content\n            json = get(f\"{self.base_repos_url}{repository_full_name}/releases\").json()\n\n            #takes care of exceptions\n            if json == []:\n                raise NoReleaseException\n\n            elif not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            elif release_number > len(json):\n                raise InvalidReleaseIndexException\n\n            json = json[release_number]\n\n            for asset in json['assets']:\n                if asset['name'] == asset_name:\n                    return asset['browser_download_url']\n\n            raise UnknownAssetException\n\n        def download_release_asset(self,repository_full_name:str,asset_name:str,release_number:int=0,output_path:str=\"\"):\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param asset_name: the release asset file name\n\n            :param release_number:  (default is 0), the more you increase it, the more the release \n            will be an old one.\n\n            :param output_path: (default is cwd), the path where the asset will be stored after download. \n\n            :returns: nothing\n\n            :raises InvalidRepoNameException:\n\n            :raises InvalidReleaseIndexException:\n\n            :raises NoReleaseException:\n\n            :raises UnknownAssetException:\n            \"\"\"\n\n            url = self.get_release_asset_download_link(repository_full_name,asset_name,release_number=release_number)\n\n            with open(f\"{output_path}/{asset_name}\" if output_path != \"\" else asset_name,\"wb\") as f:\n                f.write(get(url).content)\n                f.close()\n\n        def get_repo_license(self,repository_full_name:str)->dict:\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :returns: {'url':str,'name':str,'content':str,'type':str}:\n\n            :raises InvalidRepoNameException:\n\n            \"\"\"\n\n            if not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            json = get(self.base_repos_url+repository_full_name+\"/license\").json()\n\n            return {\"url\":json['html_url'],\"name\":json['name'],\"content\":b64decode(json['content']),\"type\":json['type']}\n\n        def get_repo_issues(self,repository_full_name:str)->List[dict]:\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :returns: a list of dictionnary (1 by issue) containing:\n\n                - author : the issue's author username (str)\n\n                - created_at : the date/time when the author created the issue (str)\n\n                - updated_at : the date/time when the author modified the issue (str)\n\n                - title : the issue title (str)\n\n                - body : the issue's content (str)\n\n                - state : \"open\" or \"closed\"\n\n                - url : the url to open the issue on a web browser (str)\n\n                - labels : the issue labels List[str]\n\n                - comments_number : the number of comments under the issue (int)\n\n            :raises InvalidRepoNameException:\n\n            \"\"\"\n\n            if not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            json = get(self.base_repos_url+repository_full_name+\"/issues\").json()\n\n            issues = []\n            for ele in json:\n                issues.append({\"author\":ele['user']['login'],\"created_at\":ele['created_at'],\"updated_at\":ele['updated_at'],\"title\":ele['title'],\"body\":ele['body'],\"state\":ele['state'],   \"url\":ele[\"url\"],\"labels\":ele['labels'],\"comments_number\":ele['comments']})\n\n            return issues\n\n        def get_user_infos(self,username:str) -> dict:\n\n            \"\"\"\n            get additionnal informations on a user like\n\n            - id (str)\n\n            - bio (str)\n\n            - name (str)\n\n            - twitter_account (null if not) (str)\n\n            - followers (list of usernames)\n\n            - following (list of usernames)\n\n            - starred_repos (list of urls)\n\n            - blog_url (null if not) (str)\n\n            - is_hireable (null if not specified) (bool)\n\n            - email (null if not specified) (str)\n\n            - user_location (null if not specified) (str)\n\n            - user_type (str)\n\n            - avatar_url (str)\n\n            - company (str)\n\n            - creation_date (str)\n\n            - url (str)\n\n            - organizations (List[dict{'login','url'}])\n\n            :raises UserNotFoundException if user is not found:\n\n            :returns: A dict with the upper specified keys\n\n            \"\"\"\n\n            if not self.user_exists(username):\n                raise UserNotFoundException\n\n            #getting basic infos\n            json = get(self.base_user_url+username).json()\n\n            #getting infos from special urls\n            followers = get(json['followers_url']).json()\n\n            following = get(str(json['following_url']).replace(\"{/other_user}\",\"\",1)).json()\n\n            starred_repos = [repo['html_url'] for repo in get(json['starred_url'].replace(\"{/owner}{/repo}\",\"\",1)).json()]\n\n            organizations = [{\"login\":org['login'],\"url\":org[\"url\"]} for org in get(json['organizations_url']).json()]\n\n            return {\"id\": json['id'],\"bio\":json['bio'],\"name\":json['name'],\"twitter_account\":json['twitter_username'],\"followers\" : [f['login'] for f in followers], \"following\":[f['login'] for f in following],\"starred_repos\": starred_repos,\"blog_url\":json['blog'],\"is_hireable\":json['hireable'],\"email\":json['email'],\"user_location\":json['location'],\"user_type\":json['type'],\"avatar_url\":json['avatar_url'],\"company\":json['company'],\"creation_date\":json['created_at'],\"url\":json['url'],\"organizations\":organizations}\n\n    class UserNotFoundException(Exception):\n        \"\"\"\n        Exception raised if an username don't exists.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"Username not found on github.\"):\n            self.message = message\n            super().__init__(self.message)\n\n    class InvalidRepoNameException(Exception):\n        \"\"\"\n        Exception raised if a repository name does not exists or is malformed\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"Invalid repository name. It must look like : thaaoblues/github_api\"):\n            self.message = message\n            super().__init__(self.message)\n\n    class InvalidReleaseIndexException(Exception):\n        \"\"\"\n        Exception raised if you decided to pass a certain release index to get stats not on the lastest but this index does not exists.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"Invalid release index. The user must not have released that amount of versions\"):\n            self.message = message\n            super().__init__(self.message)\n\n    class NoReleaseException(Exception):\n        \"\"\"\n        Exception raised if you wanted to get stats from a release but the repo does not have any.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"No release found. The user must not have released anything.\"):\n            self.message = message\n            super().__init__(self.message)\n\n    class UnknownAssetException(Exception):\n        \"\"\"\n        Exception raised if you wanted to get download url for a specific release's asset but no assets has this name.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"No release's assets found with this name.\"):\n            self.message = message\n            super().__init__(self.message)\n\n    class UnknownFileException(Exception):\n        \"\"\"\n        Exception raised if you wanted to get raw content for a specific file but the file does not exists.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"No file found with this name.\"):\n            self.message = message\n            super().__init__(self.message)\n\n</details></section>\n\n<section>\n\n## Classes\n\n<dl>\n\n<dt id=\"github_http_api.GithubHTTPApi\">`<span>class <span class=\"ident\">GithubHTTPApi</span></span>`</dt>\n\n<dd><details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    class GithubHTTPApi():\n\n        def __init__(self):\n            self.ac_username = \"\"\n            self.ac_password = \"\"\n\n            #best api endpoints \n            self.base_repos_url = \"https://api.github.com/repos/\"\n            self.base_user_url = \"https://api.github.com/users/\"\n            self.base_raw_url = \"https://raw.githubusercontent.com/\"\n\n        def login():\n            pass\n\n        #private methods :\n\n        def __is_json_key(self,json:dict,key:str) -> bool:\n            try:\n                json[key]\n                return True\n            except:\n                return False\n\n        #public methods :\n\n        def get_last_event_date(self,username:str)->str:\n            \"\"\"\n            Basically just get the last event that an user made and return the date.\n            May be usefull to determine if an user is active or not.\n\n            :returns: a string containing the date\n\n            :raises UnknownUserException: \n\n            \"\"\"\n\n            if not self.user_exists(username):\n                raise UserNotFoundException\n\n            return get(self.base_user_url+username+\"/events\").json()[0]['created_at']\n\n        def try_determine_email(self,username:str,events_number:int=10)->List[str]:\n            \"\"\"\n\n            tries to gather user email address by events api endpoint, it may be very usefull if the user didn't put it as personnal information and for OSINT people ;)\n\n            :param username: the username (str)\n\n            :returns: A list of potential email addresses (List[str])\n\n            :raises UserNotFoundException:\n\n            \"\"\"\n\n            if not self.user_exists(username):\n                raise UserNotFoundException\n\n            json = get(self.base_user_url+username+\"/events\").json()[:events_number]\n\n            emails = []\n            for event in json:\n                if self.__is_json_key(event['payload'],'commits'):\n                    for commit in event['payload']['commits']:\n                        emails.append(commit['author']['email'])\n\n            return list(set(emails))\n\n        def user_exists(self,username:str)->bool:\n\n            \"\"\"\n\n            :param username: the username\n\n            :returns: a boolean\n\n            \"\"\"\n\n            #check if user exists\n            if self.__is_json_key(get(self.base_user_url+username).json(),\"message\"):\n                return False\n            else:\n                return True\n\n        def get_user_repos(self,username:str)-> list:\n\n            \"\"\"\n            list the publics repositories of the specified user\n\n            :raises: UserNotFoundException if user is not found\n\n            :returns: A list of dict containing repository 'repo_name' and 'repo_url' of user public repositories \n\n            \"\"\"\n\n            if not self.user_exists(username):\n                raise UserNotFoundException\n\n            json = get(f\"{self.base_user_url}{username}/repos\").json()\n            repos_names = [repo['full_name'] for repo in json]\n            repos_urls = [repo['html_url'] for repo in json]\n\n            ret = []\n            for i in range(len(repos_names)):\n                ret.append({'repo_name':repos_names[i],'repo_url':repos_urls[i],})\n\n            return ret\n\n        def repo_exists(self,repository_full_name:str) -> bool:\n            \"\"\"\n\n            :return: True if the repo exists False if not\n\n            \"\"\"\n\n            if self.__is_json_key(get(f\"{self.base_repos_url}{repository_full_name}/releases\").json(),'message'):\n                return False\n\n            else:\n                return True\n\n        def get_release_download_count(self,repository_full_name:str,release_number:int=0) -> List[tuple]:\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param release_number: (default is 0), the more you increase it, the more the release \n            will be an old one.\n\n            :returns: the release download count by assets (list of tuples ('asset_name',downloads_count) (from the lastest release by default) \n\n            :raises InvalidRepoNameException:\n\n            :raises InvalidReleaseIndexException:\n\n            :raises NoReleaseException:\n\n            \"\"\"\n\n            #get http response content\n            json = get(f\"{self.base_repos_url}{repository_full_name}/releases\").json()\n\n            #takes care of exceptions\n            if json == []:\n                raise NoReleaseException\n\n            elif not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            elif release_number > len(json):\n                raise InvalidReleaseIndexException\n\n            release_json = json[release_number]\n            assets = release_json['assets']\n\n            return [(asset['name'],asset['download_count']) for asset in assets]\n\n        def get_release_infos(self,repository_full_name:str,release_number:int=0) -> List[dict]:\n\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param release_number: (default is 0), the more you increase it, the more the release \n            will be an old one.\n\n            :returns: a dict of all the release stats that may be boring but quite usefull sometimes\n\n                - creation_date : when the release has been created (str)\n\n                - release_date : when the release has been..released :) (str)\n\n                - released_by : author of the release (github login) (str)\n\n                - version : tag name of the release (ofter the version) (str)\n\n                - title : title of the release (str)\n\n                - desc : description of the release (str)\n\n                - assets : assets files names (list of str)\n\n            :raises InvalidRepoNameException:\n\n            :raises InvalidReleaseIndexException:\n\n            :raises NoReleaseException:\n\n            \"\"\"\n\n            #get http response content\n            json = get(f\"{self.base_repos_url}{repository_full_name}/releases\").json()\n\n            #takes care of exceptions\n            if json == []:\n                raise NoReleaseException\n            elif not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n            elif release_number > len(json):\n                raise InvalidReleaseIndexException\n\n            #now that we are sure no errors are coming, get the right release\n            json = json[release_number]\n\n            return {'title':json['name'],'version':json['tag_name'],'desc':json['body'],\"creation_date\":json['created_at'],\"release_date\":json['published_at'],\"released_by\":json['author']['login'],\"assets\":[asset[0] for asset in self.get_release_download_count(repository_full_name,release_number=release_number)]}\n\n        def get_raw_file_content(self,repository_full_name:str,file_name:str) -> str:\n            \"\"\"\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param file_name: the file which you wanna get the raw content\n\n            :raises InvalidRepoNameException:\n\n            :raises UnknownFileException:\n\n            :returns: a string containing the raw file content\n            \"\"\"\n\n            if not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            content = get(f\"{self.base_raw_url}{repository_full_name}/master/{file_name}\").text\n\n            if content == \"404: Not Found\":\n                raise UnknownFileException\n\n            return content\n\n        def get_release_asset_download_link(self,repository_full_name:str,asset_name:str,release_number:int=0) -> str:\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param asset_name: the release asset file name \n\n            :param release_number:  (default is 0), the more you increase it, the more the release \n            will be an old one.\n\n            :returns: a string containing the release asset's download url\n\n            :raises InvalidRepoNameException:\n\n            :raises InvalidReleaseIndexException:\n\n            :raises NoReleaseException:\n\n            :raises UnknownAssetException:\n            \"\"\"\n\n            #get http response content\n            json = get(f\"{self.base_repos_url}{repository_full_name}/releases\").json()\n\n            #takes care of exceptions\n            if json == []:\n                raise NoReleaseException\n\n            elif not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            elif release_number > len(json):\n                raise InvalidReleaseIndexException\n\n            json = json[release_number]\n\n            for asset in json['assets']:\n                if asset['name'] == asset_name:\n                    return asset['browser_download_url']\n\n            raise UnknownAssetException\n\n        def download_release_asset(self,repository_full_name:str,asset_name:str,release_number:int=0,output_path:str=\"\"):\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :param asset_name: the release asset file name\n\n            :param release_number:  (default is 0), the more you increase it, the more the release \n            will be an old one.\n\n            :param output_path: (default is cwd), the path where the asset will be stored after download. \n\n            :returns: nothing\n\n            :raises InvalidRepoNameException:\n\n            :raises InvalidReleaseIndexException:\n\n            :raises NoReleaseException:\n\n            :raises UnknownAssetException:\n            \"\"\"\n\n            url = self.get_release_asset_download_link(repository_full_name,asset_name,release_number=release_number)\n\n            with open(f\"{output_path}/{asset_name}\" if output_path != \"\" else asset_name,\"wb\") as f:\n                f.write(get(url).content)\n                f.close()\n\n        def get_repo_license(self,repository_full_name:str)->dict:\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :returns: {'url':str,'name':str,'content':str,'type':str}:\n\n            :raises InvalidRepoNameException:\n\n            \"\"\"\n\n            if not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            json = get(self.base_repos_url+repository_full_name+\"/license\").json()\n\n            return {\"url\":json['html_url'],\"name\":json['name'],\"content\":b64decode(json['content']),\"type\":json['type']}\n\n        def get_repo_issues(self,repository_full_name:str)->List[dict]:\n            \"\"\"\n\n            :param repository_full_name: the repository full name like thaaoblues/github_api\n\n            :returns: a list of dictionnary (1 by issue) containing:\n\n                - author : the issue's author username (str)\n\n                - created_at : the date/time when the author created the issue (str)\n\n                - updated_at : the date/time when the author modified the issue (str)\n\n                - title : the issue title (str)\n\n                - body : the issue's content (str)\n\n                - state : \"open\" or \"closed\"\n\n                - url : the url to open the issue on a web browser (str)\n\n                - labels : the issue labels List[str]\n\n                - comments_number : the number of comments under the issue (int)\n\n            :raises InvalidRepoNameException:\n\n            \"\"\"\n\n            if not self.repo_exists(repository_full_name):\n                raise InvalidRepoNameException\n\n            json = get(self.base_repos_url+repository_full_name+\"/issues\").json()\n\n            issues = []\n            for ele in json:\n                issues.append({\"author\":ele['user']['login'],\"created_at\":ele['created_at'],\"updated_at\":ele['updated_at'],\"title\":ele['title'],\"body\":ele['body'],\"state\":ele['state'],   \"url\":ele[\"url\"],\"labels\":ele['labels'],\"comments_number\":ele['comments']})\n\n            return issues\n\n        def get_user_infos(self,username:str) -> dict:\n\n            \"\"\"\n            get additionnal informations on a user like\n\n            - id (str)\n\n            - bio (str)\n\n            - name (str)\n\n            - twitter_account (null if not) (str)\n\n            - followers (list of usernames)\n\n            - following (list of usernames)\n\n            - starred_repos (list of urls)\n\n            - blog_url (null if not) (str)\n\n            - is_hireable (null if not specified) (bool)\n\n            - email (null if not specified) (str)\n\n            - user_location (null if not specified) (str)\n\n            - user_type (str)\n\n            - avatar_url (str)\n\n            - company (str)\n\n            - creation_date (str)\n\n            - url (str)\n\n            - organizations (List[dict{'login','url'}])\n\n            :raises UserNotFoundException if user is not found:\n\n            :returns: A dict with the upper specified keys\n\n            \"\"\"\n\n            if not self.user_exists(username):\n                raise UserNotFoundException\n\n            #getting basic infos\n            json = get(self.base_user_url+username).json()\n\n            #getting infos from special urls\n            followers = get(json['followers_url']).json()\n\n            following = get(str(json['following_url']).replace(\"{/other_user}\",\"\",1)).json()\n\n            starred_repos = [repo['html_url'] for repo in get(json['starred_url'].replace(\"{/owner}{/repo}\",\"\",1)).json()]\n\n            organizations = [{\"login\":org['login'],\"url\":org[\"url\"]} for org in get(json['organizations_url']).json()]\n\n            return {\"id\": json['id'],\"bio\":json['bio'],\"name\":json['name'],\"twitter_account\":json['twitter_username'],\"followers\" : [f['login'] for f in followers], \"following\":[f['login'] for f in following],\"starred_repos\": starred_repos,\"blog_url\":json['blog'],\"is_hireable\":json['hireable'],\"email\":json['email'],\"user_location\":json['location'],\"user_type\":json['type'],\"avatar_url\":json['avatar_url'],\"company\":json['company'],\"creation_date\":json['created_at'],\"url\":json['url'],\"organizations\":organizations}\n\n</details>\n\n### Methods\n\n<dl>\n\n<dt id=\"github_http_api.GithubHTTPApi.download_release_asset\">`<span>def <span class=\"ident\">download_release_asset</span></span>(<span>self, repository_full_name: str, asset_name: str, release_number: int = 0, output_path: str = '')</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\n:param repository_full_name: the repository full name like thaaoblues/github_api\n\n:param asset_name: the release asset file name\n\n:param release_number: (default is 0), the more you increase it, the more the release will be an old one.\n\n:param output_path: (default is cwd), the path where the asset will be stored after download.\n\n:returns: nothing\n\n:raises InvalidRepoNameException:\n\n:raises InvalidReleaseIndexException:\n\n:raises NoReleaseException:\n\n:raises UnknownAssetException:\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def download_release_asset(self,repository_full_name:str,asset_name:str,release_number:int=0,output_path:str=\"\"):\n        \"\"\"\n\n        :param repository_full_name: the repository full name like thaaoblues/github_api\n\n        :param asset_name: the release asset file name\n\n        :param release_number:  (default is 0), the more you increase it, the more the release \n        will be an old one.\n\n        :param output_path: (default is cwd), the path where the asset will be stored after download. \n\n        :returns: nothing\n\n        :raises InvalidRepoNameException:\n\n        :raises InvalidReleaseIndexException:\n\n        :raises NoReleaseException:\n\n        :raises UnknownAssetException:\n        \"\"\"\n\n        url = self.get_release_asset_download_link(repository_full_name,asset_name,release_number=release_number)\n\n        with open(f\"{output_path}/{asset_name}\" if output_path != \"\" else asset_name,\"wb\") as f:\n            f.write(get(url).content)\n            f.close()\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.get_last_event_date\">`<span>def <span class=\"ident\">get_last_event_date</span></span>(<span>self, username: str) ‑> str</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\nBasically just get the last event that an user made and return the date. May be usefull to determine if an user is active or not.\n\n:returns: a string containing the date\n\n:raises UnknownUserException:\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def get_last_event_date(self,username:str)->str:\n        \"\"\"\n        Basically just get the last event that an user made and return the date.\n        May be usefull to determine if an user is active or not.\n\n        :returns: a string containing the date\n\n        :raises UnknownUserException: \n\n        \"\"\"\n\n        if not self.user_exists(username):\n            raise UserNotFoundException\n\n        return get(self.base_user_url+username+\"/events\").json()[0]['created_at']\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.get_raw_file_content\">`<span>def <span class=\"ident\">get_raw_file_content</span></span>(<span>self, repository_full_name: str, file_name: str) ‑> str</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\n:param repository_full_name: the repository full name like thaaoblues/github_api\n\n:param file_name: the file which you wanna get the raw content\n\n:raises InvalidRepoNameException:\n\n:raises UnknownFileException:\n\n:returns: a string containing the raw file content\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def get_raw_file_content(self,repository_full_name:str,file_name:str) -> str:\n        \"\"\"\n        :param repository_full_name: the repository full name like thaaoblues/github_api\n\n        :param file_name: the file which you wanna get the raw content\n\n        :raises InvalidRepoNameException:\n\n        :raises UnknownFileException:\n\n        :returns: a string containing the raw file content\n        \"\"\"\n\n        if not self.repo_exists(repository_full_name):\n            raise InvalidRepoNameException\n\n        content = get(f\"{self.base_raw_url}{repository_full_name}/master/{file_name}\").text\n\n        if content == \"404: Not Found\":\n            raise UnknownFileException\n\n        return content\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.get_release_asset_download_link\">`<span>def <span class=\"ident\">get_release_asset_download_link</span></span>(<span>self, repository_full_name: str, asset_name: str, release_number: int = 0) ‑> str</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\n:param repository_full_name: the repository full name like thaaoblues/github_api\n\n:param asset_name: the release asset file name\n\n:param release_number: (default is 0), the more you increase it, the more the release will be an old one.\n\n:returns: a string containing the release asset's download url\n\n:raises InvalidRepoNameException:\n\n:raises InvalidReleaseIndexException:\n\n:raises NoReleaseException:\n\n:raises UnknownAssetException:\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def get_release_asset_download_link(self,repository_full_name:str,asset_name:str,release_number:int=0) -> str:\n        \"\"\"\n\n        :param repository_full_name: the repository full name like thaaoblues/github_api\n\n        :param asset_name: the release asset file name \n\n        :param release_number:  (default is 0), the more you increase it, the more the release \n        will be an old one.\n\n        :returns: a string containing the release asset's download url\n\n        :raises InvalidRepoNameException:\n\n        :raises InvalidReleaseIndexException:\n\n        :raises NoReleaseException:\n\n        :raises UnknownAssetException:\n        \"\"\"\n\n        #get http response content\n        json = get(f\"{self.base_repos_url}{repository_full_name}/releases\").json()\n\n        #takes care of exceptions\n        if json == []:\n            raise NoReleaseException\n\n        elif not self.repo_exists(repository_full_name):\n            raise InvalidRepoNameException\n\n        elif release_number > len(json):\n            raise InvalidReleaseIndexException\n\n        json = json[release_number]\n\n        for asset in json['assets']:\n            if asset['name'] == asset_name:\n                return asset['browser_download_url']\n\n        raise UnknownAssetException\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.get_release_download_count\">`<span>def <span class=\"ident\">get_release_download_count</span></span>(<span>self, repository_full_name: str, release_number: int = 0) ‑> List[tuple]</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\n:param repository_full_name: the repository full name like thaaoblues/github_api\n\n:param release_number: (default is 0), the more you increase it, the more the release will be an old one.\n\n:returns: the release download count by assets (list of tuples ('asset_name',downloads_count) (from the lastest release by default)\n\n:raises InvalidRepoNameException:\n\n:raises InvalidReleaseIndexException:\n\n:raises NoReleaseException:\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def get_release_download_count(self,repository_full_name:str,release_number:int=0) -> List[tuple]:\n        \"\"\"\n\n        :param repository_full_name: the repository full name like thaaoblues/github_api\n\n        :param release_number: (default is 0), the more you increase it, the more the release \n        will be an old one.\n\n        :returns: the release download count by assets (list of tuples ('asset_name',downloads_count) (from the lastest release by default) \n\n        :raises InvalidRepoNameException:\n\n        :raises InvalidReleaseIndexException:\n\n        :raises NoReleaseException:\n\n        \"\"\"\n\n        #get http response content\n        json = get(f\"{self.base_repos_url}{repository_full_name}/releases\").json()\n\n        #takes care of exceptions\n        if json == []:\n            raise NoReleaseException\n\n        elif not self.repo_exists(repository_full_name):\n            raise InvalidRepoNameException\n\n        elif release_number > len(json):\n            raise InvalidReleaseIndexException\n\n        release_json = json[release_number]\n        assets = release_json['assets']\n\n        return [(asset['name'],asset['download_count']) for asset in assets]\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.get_release_infos\">`<span>def <span class=\"ident\">get_release_infos</span></span>(<span>self, repository_full_name: str, release_number: int = 0) ‑> List[dict]</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\n:param repository_full_name: the repository full name like thaaoblues/github_api\n\n:param release_number: (default is 0), the more you increase it, the more the release will be an old one.\n\n:returns: a dict of all the release stats that may be boring but quite usefull sometimes\n\n    - creation_date : when the release has been created (str)\n\n    - release_date : when the release has been..released :) (str)\n\n    - released_by : author of the release (github login) (str)\n\n    - version : tag name of the release (ofter the version) (str)\n\n    - title : title of the release (str)\n\n    - desc : description of the release (str)\n\n    - assets : assets files names (list of str)\n\n:raises InvalidRepoNameException:\n\n:raises InvalidReleaseIndexException:\n\n:raises NoReleaseException:\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def get_release_infos(self,repository_full_name:str,release_number:int=0) -> List[dict]:\n\n        \"\"\"\n\n        :param repository_full_name: the repository full name like thaaoblues/github_api\n\n        :param release_number: (default is 0), the more you increase it, the more the release \n        will be an old one.\n\n        :returns: a dict of all the release stats that may be boring but quite usefull sometimes\n\n            - creation_date : when the release has been created (str)\n\n            - release_date : when the release has been..released :) (str)\n\n            - released_by : author of the release (github login) (str)\n\n            - version : tag name of the release (ofter the version) (str)\n\n            - title : title of the release (str)\n\n            - desc : description of the release (str)\n\n            - assets : assets files names (list of str)\n\n        :raises InvalidRepoNameException:\n\n        :raises InvalidReleaseIndexException:\n\n        :raises NoReleaseException:\n\n        \"\"\"\n\n        #get http response content\n        json = get(f\"{self.base_repos_url}{repository_full_name}/releases\").json()\n\n        #takes care of exceptions\n        if json == []:\n            raise NoReleaseException\n        elif not self.repo_exists(repository_full_name):\n            raise InvalidRepoNameException\n        elif release_number > len(json):\n            raise InvalidReleaseIndexException\n\n        #now that we are sure no errors are coming, get the right release\n        json = json[release_number]\n\n        return {'title':json['name'],'version':json['tag_name'],'desc':json['body'],\"creation_date\":json['created_at'],\"release_date\":json['published_at'],\"released_by\":json['author']['login'],\"assets\":[asset[0] for asset in self.get_release_download_count(repository_full_name,release_number=release_number)]}\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.get_repo_issues\">`<span>def <span class=\"ident\">get_repo_issues</span></span>(<span>self, repository_full_name: str) ‑> List[dict]</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\n:param repository_full_name: the repository full name like thaaoblues/github_api\n\n:returns: a list of dictionnary (1 by issue) containing:\n\n    - author : the issue's author username (str)\n\n    - created_at : the date/time when the author created the issue (str)\n\n    - updated_at : the date/time when the author modified the issue (str)\n\n    - title : the issue title (str)\n\n    - body : the issue's content (str)\n\n    - state : \"open\" or \"closed\"\n\n    - url : the url to open the issue on a web browser (str)\n\n    - labels : the issue labels List[str]\n\n    - comments_number : the number of comments under the issue (int)\n\n:raises InvalidRepoNameException:\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def get_repo_issues(self,repository_full_name:str)->List[dict]:\n        \"\"\"\n\n        :param repository_full_name: the repository full name like thaaoblues/github_api\n\n        :returns: a list of dictionnary (1 by issue) containing:\n\n            - author : the issue's author username (str)\n\n            - created_at : the date/time when the author created the issue (str)\n\n            - updated_at : the date/time when the author modified the issue (str)\n\n            - title : the issue title (str)\n\n            - body : the issue's content (str)\n\n            - state : \"open\" or \"closed\"\n\n            - url : the url to open the issue on a web browser (str)\n\n            - labels : the issue labels List[str]\n\n            - comments_number : the number of comments under the issue (int)\n\n        :raises InvalidRepoNameException:\n\n        \"\"\"\n\n        if not self.repo_exists(repository_full_name):\n            raise InvalidRepoNameException\n\n        json = get(self.base_repos_url+repository_full_name+\"/issues\").json()\n\n        issues = []\n        for ele in json:\n            issues.append({\"author\":ele['user']['login'],\"created_at\":ele['created_at'],\"updated_at\":ele['updated_at'],\"title\":ele['title'],\"body\":ele['body'],\"state\":ele['state'],   \"url\":ele[\"url\"],\"labels\":ele['labels'],\"comments_number\":ele['comments']})\n\n        return issues\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.get_repo_license\">`<span>def <span class=\"ident\">get_repo_license</span></span>(<span>self, repository_full_name: str) ‑> dict</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\n:param repository_full_name: the repository full name like thaaoblues/github_api\n\n:returns: {'url':str,'name':str,'content':str,'type':str}:\n\n:raises InvalidRepoNameException:\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def get_repo_license(self,repository_full_name:str)->dict:\n        \"\"\"\n\n        :param repository_full_name: the repository full name like thaaoblues/github_api\n\n        :returns: {'url':str,'name':str,'content':str,'type':str}:\n\n        :raises InvalidRepoNameException:\n\n        \"\"\"\n\n        if not self.repo_exists(repository_full_name):\n            raise InvalidRepoNameException\n\n        json = get(self.base_repos_url+repository_full_name+\"/license\").json()\n\n        return {\"url\":json['html_url'],\"name\":json['name'],\"content\":b64decode(json['content']),\"type\":json['type']}\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.get_user_infos\">`<span>def <span class=\"ident\">get_user_infos</span></span>(<span>self, username: str) ‑> dict</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\nget additionnal informations on a user like\n\n*   id (str)\n\n*   bio (str)\n\n*   name (str)\n\n*   twitter_account (null if not) (str)\n\n*   followers (list of usernames)\n\n*   following (list of usernames)\n\n*   starred_repos (list of urls)\n\n*   blog_url (null if not) (str)\n\n*   is_hireable (null if not specified) (bool)\n\n*   email (null if not specified) (str)\n\n*   user_location (null if not specified) (str)\n\n*   user_type (str)\n\n*   avatar_url (str)\n\n*   company (str)\n\n*   creation_date (str)\n\n*   url (str)\n\n*   organizations (List[dict{'login','url'}])\n\n:raises UserNotFoundException if user is not found:\n\n:returns: A dict with the upper specified keys\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def get_user_infos(self,username:str) -> dict:\n\n        \"\"\"\n        get additionnal informations on a user like\n\n        - id (str)\n\n        - bio (str)\n\n        - name (str)\n\n        - twitter_account (null if not) (str)\n\n        - followers (list of usernames)\n\n        - following (list of usernames)\n\n        - starred_repos (list of urls)\n\n        - blog_url (null if not) (str)\n\n        - is_hireable (null if not specified) (bool)\n\n        - email (null if not specified) (str)\n\n        - user_location (null if not specified) (str)\n\n        - user_type (str)\n\n        - avatar_url (str)\n\n        - company (str)\n\n        - creation_date (str)\n\n        - url (str)\n\n        - organizations (List[dict{'login','url'}])\n\n        :raises UserNotFoundException if user is not found:\n\n        :returns: A dict with the upper specified keys\n\n        \"\"\"\n\n        if not self.user_exists(username):\n            raise UserNotFoundException\n\n        #getting basic infos\n        json = get(self.base_user_url+username).json()\n\n        #getting infos from special urls\n        followers = get(json['followers_url']).json()\n\n        following = get(str(json['following_url']).replace(\"{/other_user}\",\"\",1)).json()\n\n        starred_repos = [repo['html_url'] for repo in get(json['starred_url'].replace(\"{/owner}{/repo}\",\"\",1)).json()]\n\n        organizations = [{\"login\":org['login'],\"url\":org[\"url\"]} for org in get(json['organizations_url']).json()]\n\n        return {\"id\": json['id'],\"bio\":json['bio'],\"name\":json['name'],\"twitter_account\":json['twitter_username'],\"followers\" : [f['login'] for f in followers], \"following\":[f['login'] for f in following],\"starred_repos\": starred_repos,\"blog_url\":json['blog'],\"is_hireable\":json['hireable'],\"email\":json['email'],\"user_location\":json['location'],\"user_type\":json['type'],\"avatar_url\":json['avatar_url'],\"company\":json['company'],\"creation_date\":json['created_at'],\"url\":json['url'],\"organizations\":organizations}\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.get_user_repos\">`<span>def <span class=\"ident\">get_user_repos</span></span>(<span>self, username: str) ‑> list</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\nlist the publics repositories of the specified user\n\n:raises: UserNotFoundException if user is not found\n\n:returns: A list of dict containing repository 'repo_name' and 'repo_url' of user public repositories\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def get_user_repos(self,username:str)-> list:\n\n        \"\"\"\n        list the publics repositories of the specified user\n\n        :raises: UserNotFoundException if user is not found\n\n        :returns: A list of dict containing repository 'repo_name' and 'repo_url' of user public repositories \n\n        \"\"\"\n\n        if not self.user_exists(username):\n            raise UserNotFoundException\n\n        json = get(f\"{self.base_user_url}{username}/repos\").json()\n        repos_names = [repo['full_name'] for repo in json]\n        repos_urls = [repo['html_url'] for repo in json]\n\n        ret = []\n        for i in range(len(repos_names)):\n            ret.append({'repo_name':repos_names[i],'repo_url':repos_urls[i],})\n\n        return ret\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.login\">`<span>def <span class=\"ident\">login</span></span>(<span>)</span>`</dt>\n\n<dd><details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def login():\n        pass\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.repo_exists\">`<span>def <span class=\"ident\">repo_exists</span></span>(<span>self, repository_full_name: str) ‑> bool</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\n:return: True if the repo exists False if not\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def repo_exists(self,repository_full_name:str) -> bool:\n        \"\"\"\n\n        :return: True if the repo exists False if not\n\n        \"\"\"\n\n        if self.__is_json_key(get(f\"{self.base_repos_url}{repository_full_name}/releases\").json(),'message'):\n            return False\n\n        else:\n            return True\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.try_determine_email\">`<span>def <span class=\"ident\">try_determine_email</span></span>(<span>self, username: str, events_number: int = 10) ‑> List[str]</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\ntries to gather user email address by events api endpoint, it may be very usefull if the user didn't put it as personnal information and for OSINT people ;)\n\n:param username: the username (str)\n\n:returns: A list of potential email addresses (List[str])\n\n:raises UserNotFoundException:\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def try_determine_email(self,username:str,events_number:int=10)->List[str]:\n        \"\"\"\n\n        tries to gather user email address by events api endpoint, it may be very usefull if the user didn't put it as personnal information and for OSINT people ;)\n\n        :param username: the username (str)\n\n        :returns: A list of potential email addresses (List[str])\n\n        :raises UserNotFoundException:\n\n        \"\"\"\n\n        if not self.user_exists(username):\n            raise UserNotFoundException\n\n        json = get(self.base_user_url+username+\"/events\").json()[:events_number]\n\n        emails = []\n        for event in json:\n            if self.__is_json_key(event['payload'],'commits'):\n                for commit in event['payload']['commits']:\n                    emails.append(commit['author']['email'])\n\n        return list(set(emails))\n\n</details></dd>\n\n<dt id=\"github_http_api.GithubHTTPApi.user_exists\">`<span>def <span class=\"ident\">user_exists</span></span>(<span>self, username: str) ‑> bool</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\n:param username: the username\n\n:returns: a boolean\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    def user_exists(self,username:str)->bool:\n\n        \"\"\"\n\n        :param username: the username\n\n        :returns: a boolean\n\n        \"\"\"\n\n        #check if user exists\n        if self.__is_json_key(get(self.base_user_url+username).json(),\"message\"):\n            return False\n        else:\n            return True\n\n</details></dd>\n\n</dl>\n\n</dd>\n\n<dt id=\"github_http_api.InvalidReleaseIndexException\">`<span>class <span class=\"ident\">InvalidReleaseIndexException</span></span> <span>(</span><span>message='Invalid release index. The user must not have released that amount of versions')</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\nException raised if you decided to pass a certain release index to get stats not on the lastest but this index does not exists.\n\n## Attributes\n\nmessage – explanation of the error\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    class InvalidReleaseIndexException(Exception):\n        \"\"\"\n        Exception raised if you decided to pass a certain release index to get stats not on the lastest but this index does not exists.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"Invalid release index. The user must not have released that amount of versions\"):\n            self.message = message\n            super().__init__(self.message)\n\n</details>\n\n### Ancestors\n\n*   builtins.Exception\n*   builtins.BaseException\n\n</dd>\n\n<dt id=\"github_http_api.InvalidRepoNameException\">`<span>class <span class=\"ident\">InvalidRepoNameException</span></span> <span>(</span><span>message='Invalid repository name. It must look like : thaaoblues/github_api')</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\nException raised if a repository name does not exists or is malformed\n\n## Attributes\n\nmessage – explanation of the error\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    class InvalidRepoNameException(Exception):\n        \"\"\"\n        Exception raised if a repository name does not exists or is malformed\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"Invalid repository name. It must look like : thaaoblues/github_api\"):\n            self.message = message\n            super().__init__(self.message)\n\n</details>\n\n### Ancestors\n\n*   builtins.Exception\n*   builtins.BaseException\n\n</dd>\n\n<dt id=\"github_http_api.NoReleaseException\">`<span>class <span class=\"ident\">NoReleaseException</span></span> <span>(</span><span>message='No release found. The user must not have released anything.')</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\nException raised if you wanted to get stats from a release but the repo does not have any.\n\n## Attributes\n\nmessage – explanation of the error\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    class NoReleaseException(Exception):\n        \"\"\"\n        Exception raised if you wanted to get stats from a release but the repo does not have any.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"No release found. The user must not have released anything.\"):\n            self.message = message\n            super().__init__(self.message)\n\n</details>\n\n### Ancestors\n\n*   builtins.Exception\n*   builtins.BaseException\n\n</dd>\n\n<dt id=\"github_http_api.UnknownAssetException\">`<span>class <span class=\"ident\">UnknownAssetException</span></span> <span>(</span><span>message=\"No release's assets found with this name.\")</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\nException raised if you wanted to get download url for a specific release's asset but no assets has this name.\n\n## Attributes\n\nmessage – explanation of the error\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    class UnknownAssetException(Exception):\n        \"\"\"\n        Exception raised if you wanted to get download url for a specific release's asset but no assets has this name.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"No release's assets found with this name.\"):\n            self.message = message\n            super().__init__(self.message)\n\n</details>\n\n### Ancestors\n\n*   builtins.Exception\n*   builtins.BaseException\n\n</dd>\n\n<dt id=\"github_http_api.UnknownFileException\">`<span>class <span class=\"ident\">UnknownFileException</span></span> <span>(</span><span>message='No file found with this name.')</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\nException raised if you wanted to get raw content for a specific file but the file does not exists.\n\n## Attributes\n\nmessage – explanation of the error\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    class UnknownFileException(Exception):\n        \"\"\"\n        Exception raised if you wanted to get raw content for a specific file but the file does not exists.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"No file found with this name.\"):\n            self.message = message\n            super().__init__(self.message)\n\n</details>\n\n### Ancestors\n\n*   builtins.Exception\n*   builtins.BaseException\n\n</dd>\n\n<dt id=\"github_http_api.UserNotFoundException\">`<span>class <span class=\"ident\">UserNotFoundException</span></span> <span>(</span><span>message='Username not found on github.')</span>`</dt>\n\n<dd>\n\n<div class=\"desc\">\n\nException raised if an username don't exists.\n\n## Attributes\n\nmessage – explanation of the error\n\n</div>\n\n<details class=\"source\"><summary><span>Expand source code</span></summary>\n\n    class UserNotFoundException(Exception):\n        \"\"\"\n        Exception raised if an username don't exists.\n\n        Attributes:\n            message -- explanation of the error\n\n        \"\"\"\n\n        def __init__(self, message=\"Username not found on github.\"):\n            self.message = message\n            super().__init__(self.message)\n\n</details>\n\n### Ancestors\n\n*   builtins.Exception\n*   builtins.BaseException\n\n</dd>\n\n</dl>\n\n</section>\n\n</article>\n\n<nav id=\"sidebar\">\n\n# Index\n\n*   ### [Classes](#header-classes)\n\n    *   #### `[GithubHTTPApi](#github_http_api.GithubHTTPApi \"github_http_api.GithubHTTPApi\")`\n\n        *   `[download_release_asset](#github_http_api.GithubHTTPApi.download_release_asset \"github_http_api.GithubHTTPApi.download_release_asset\")`\n        *   `[get_last_event_date](#github_http_api.GithubHTTPApi.get_last_event_date \"github_http_api.GithubHTTPApi.get_last_event_date\")`\n        *   `[get_raw_file_content](#github_http_api.GithubHTTPApi.get_raw_file_content \"github_http_api.GithubHTTPApi.get_raw_file_content\")`\n        *   `[get_release_asset_download_link](#github_http_api.GithubHTTPApi.get_release_asset_download_link \"github_http_api.GithubHTTPApi.get_release_asset_download_link\")`\n        *   `[get_release_download_count](#github_http_api.GithubHTTPApi.get_release_download_count \"github_http_api.GithubHTTPApi.get_release_download_count\")`\n        *   `[get_release_infos](#github_http_api.GithubHTTPApi.get_release_infos \"github_http_api.GithubHTTPApi.get_release_infos\")`\n        *   `[get_repo_issues](#github_http_api.GithubHTTPApi.get_repo_issues \"github_http_api.GithubHTTPApi.get_repo_issues\")`\n        *   `[get_repo_license](#github_http_api.GithubHTTPApi.get_repo_license \"github_http_api.GithubHTTPApi.get_repo_license\")`\n        *   `[get_user_infos](#github_http_api.GithubHTTPApi.get_user_infos \"github_http_api.GithubHTTPApi.get_user_infos\")`\n        *   `[get_user_repos](#github_http_api.GithubHTTPApi.get_user_repos \"github_http_api.GithubHTTPApi.get_user_repos\")`\n        *   `[login](#github_http_api.GithubHTTPApi.login \"github_http_api.GithubHTTPApi.login\")`\n        *   `[repo_exists](#github_http_api.GithubHTTPApi.repo_exists \"github_http_api.GithubHTTPApi.repo_exists\")`\n        *   `[try_determine_email](#github_http_api.GithubHTTPApi.try_determine_email \"github_http_api.GithubHTTPApi.try_determine_email\")`\n        *   `[user_exists](#github_http_api.GithubHTTPApi.user_exists \"github_http_api.GithubHTTPApi.user_exists\")`\n    *   #### `[InvalidReleaseIndexException](#github_http_api.InvalidReleaseIndexException \"github_http_api.InvalidReleaseIndexException\")`\n\n    *   #### `[InvalidRepoNameException](#github_http_api.InvalidRepoNameException \"github_http_api.InvalidRepoNameException\")`\n\n    *   #### `[NoReleaseException](#github_http_api.NoReleaseException \"github_http_api.NoReleaseException\")`\n\n    *   #### `[UnknownAssetException](#github_http_api.UnknownAssetException \"github_http_api.UnknownAssetException\")`\n\n    *   #### `[UnknownFileException](#github_http_api.UnknownFileException \"github_http_api.UnknownFileException\")`\n\n    *   #### `[UserNotFoundException](#github_http_api.UserNotFoundException \"github_http_api.UserNotFoundException\")`\n\n</nav>\n\n</main>\n\n<footer id=\"footer\">\n\nGenerated by [<cite>pdoc</cite> 0.9.2](https://pdoc3.github.io/pdoc).\n\n</footer>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ThaaoBlues/github_api",
    "keywords": "",
    "license": "CC BY-NC-ND 4.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "github-http-api",
    "package_url": "https://pypi.org/project/github-http-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/github-http-api/",
    "project_urls": {
      "Homepage": "https://github.com/ThaaoBlues/github_api"
    },
    "release_url": "https://pypi.org/project/github-http-api/0.2.5/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A simple github HTTP api handler in python.",
    "version": "0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11007504,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b5dd9ecf5045a19027025409bf135def1c14fab5ac00a44e1fd1d6033e8c235",
          "md5": "5cd52ce9e780dfe37d23928ea018189e",
          "sha256": "ed1bec5a950e98c8aa9ddb9ab765fc77ce43d22277aff968a01261fa469d4f3b"
        },
        "downloads": -1,
        "filename": "github_http_api-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cd52ce9e780dfe37d23928ea018189e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 9699,
        "upload_time": "2021-07-24T20:50:31",
        "upload_time_iso_8601": "2021-07-24T20:50:31.604680Z",
        "url": "https://files.pythonhosted.org/packages/9b/5d/d9ecf5045a19027025409bf135def1c14fab5ac00a44e1fd1d6033e8c235/github_http_api-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "755e7cded91fc6f2ba6ed8bfe0c402e1ff2c79336334c93feaacabc1e0bed879",
          "md5": "3731133487eb4767a4a6e11ae1914b8d",
          "sha256": "c32c66442634395b847490001d3651e894303f4349a676b408ff15d7953a06cd"
        },
        "downloads": -1,
        "filename": "github_http_api-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3731133487eb4767a4a6e11ae1914b8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13635,
        "upload_time": "2021-07-24T20:50:33",
        "upload_time_iso_8601": "2021-07-24T20:50:33.693513Z",
        "url": "https://files.pythonhosted.org/packages/75/5e/7cded91fc6f2ba6ed8bfe0c402e1ff2c79336334c93feaacabc1e0bed879/github_http_api-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d44bb73f06e78fe89b6e54cb6aa70b74fa0f998bcffca6d8d09cd0b7c6092451",
          "md5": "1a82adc48dddf9a376034321c1c8ca61",
          "sha256": "1d66e26bf77aa4421f4e313457fe332212f218808bc5c5abcf2e2aa939c88999"
        },
        "downloads": -1,
        "filename": "github_http_api-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a82adc48dddf9a376034321c1c8ca61",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 6747,
        "upload_time": "2021-07-24T21:10:10",
        "upload_time_iso_8601": "2021-07-24T21:10:10.977683Z",
        "url": "https://files.pythonhosted.org/packages/d4/4b/b73f06e78fe89b6e54cb6aa70b74fa0f998bcffca6d8d09cd0b7c6092451/github_http_api-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cee9bd94d3d3361ea1ffa86d33b2c11ec514485eaf7ef1206c101648a7da3c0",
          "md5": "faea8ffab1d785bdd528be2b745ce0b2",
          "sha256": "a6cac60dbb12322da1bdf453ba7a7ec65642c63684e0d845c4af554e02e2c9e6"
        },
        "downloads": -1,
        "filename": "github_http_api-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "faea8ffab1d785bdd528be2b745ce0b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13179,
        "upload_time": "2021-07-24T21:10:12",
        "upload_time_iso_8601": "2021-07-24T21:10:12.984339Z",
        "url": "https://files.pythonhosted.org/packages/8c/ee/9bd94d3d3361ea1ffa86d33b2c11ec514485eaf7ef1206c101648a7da3c0/github_http_api-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "496d89c4f23def2e3dd638ef4a1558c763d8ae103d891d5dbf6eb9fc93491e82",
          "md5": "5d38b96180ce729f70dd6ad839120c5a",
          "sha256": "f3e4109db6e83ebfd5fba609fa675152ca5c5bef9de519c591007c1de646094f"
        },
        "downloads": -1,
        "filename": "github_http_api-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d38b96180ce729f70dd6ad839120c5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 11074,
        "upload_time": "2021-07-26T16:45:14",
        "upload_time_iso_8601": "2021-07-26T16:45:14.102195Z",
        "url": "https://files.pythonhosted.org/packages/49/6d/89c4f23def2e3dd638ef4a1558c763d8ae103d891d5dbf6eb9fc93491e82/github_http_api-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e274120ce15a9691234fc8d04d5fa8c1df1c6ed50390687f2bc4b4eac62ea4e8",
          "md5": "0b983f1f5e848ae64a6dac6941a511e0",
          "sha256": "add3dbc52fc9a462afe41e6ec8991633c3f1896e498d3c54d51f9d98168a0513"
        },
        "downloads": -1,
        "filename": "github_http_api-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0b983f1f5e848ae64a6dac6941a511e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 16740,
        "upload_time": "2021-07-26T16:45:15",
        "upload_time_iso_8601": "2021-07-26T16:45:15.712409Z",
        "url": "https://files.pythonhosted.org/packages/e2/74/120ce15a9691234fc8d04d5fa8c1df1c6ed50390687f2bc4b4eac62ea4e8/github_http_api-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be3b6142baef88c61bad2d3be60a9fb960594bac5532c798d0df151d4c16b09e",
          "md5": "ccfc2db35a4ce905353fda8062e7810a",
          "sha256": "ed685ea50771753b471d321e43e1a7138f646cb29976ed67eee915074423218c"
        },
        "downloads": -1,
        "filename": "github_http_api-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ccfc2db35a4ce905353fda8062e7810a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 12254,
        "upload_time": "2021-07-26T17:50:52",
        "upload_time_iso_8601": "2021-07-26T17:50:52.808672Z",
        "url": "https://files.pythonhosted.org/packages/be/3b/6142baef88c61bad2d3be60a9fb960594bac5532c798d0df151d4c16b09e/github_http_api-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "842d515fb26a268d798bb8ec8492669f8d588203be55f6181dfcb35a9c59888b",
          "md5": "eba706df5bdf70d79bb49869a865d84c",
          "sha256": "3f0a184f7cfdbbf9deb3297bd80495b49ab10869795107d133a0699a90a7d985"
        },
        "downloads": -1,
        "filename": "github_http_api-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "eba706df5bdf70d79bb49869a865d84c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18615,
        "upload_time": "2021-07-26T17:50:54",
        "upload_time_iso_8601": "2021-07-26T17:50:54.912449Z",
        "url": "https://files.pythonhosted.org/packages/84/2d/515fb26a268d798bb8ec8492669f8d588203be55f6181dfcb35a9c59888b/github_http_api-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be3b6142baef88c61bad2d3be60a9fb960594bac5532c798d0df151d4c16b09e",
        "md5": "ccfc2db35a4ce905353fda8062e7810a",
        "sha256": "ed685ea50771753b471d321e43e1a7138f646cb29976ed67eee915074423218c"
      },
      "downloads": -1,
      "filename": "github_http_api-0.2.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ccfc2db35a4ce905353fda8062e7810a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 12254,
      "upload_time": "2021-07-26T17:50:52",
      "upload_time_iso_8601": "2021-07-26T17:50:52.808672Z",
      "url": "https://files.pythonhosted.org/packages/be/3b/6142baef88c61bad2d3be60a9fb960594bac5532c798d0df151d4c16b09e/github_http_api-0.2.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "842d515fb26a268d798bb8ec8492669f8d588203be55f6181dfcb35a9c59888b",
        "md5": "eba706df5bdf70d79bb49869a865d84c",
        "sha256": "3f0a184f7cfdbbf9deb3297bd80495b49ab10869795107d133a0699a90a7d985"
      },
      "downloads": -1,
      "filename": "github_http_api-0.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "eba706df5bdf70d79bb49869a865d84c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 18615,
      "upload_time": "2021-07-26T17:50:54",
      "upload_time_iso_8601": "2021-07-26T17:50:54.912449Z",
      "url": "https://files.pythonhosted.org/packages/84/2d/515fb26a268d798bb8ec8492669f8d588203be55f6181dfcb35a9c59888b/github_http_api-0.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}