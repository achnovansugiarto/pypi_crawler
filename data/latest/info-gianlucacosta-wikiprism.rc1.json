{
  "info": {
    "author": "Gianluca Costa",
    "author_email": "gianluca@gianlucacosta.info",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# WikiPrism\n\n_Parse wiki pages and create dictionaries, fast, with Python_\n\n## Introduction\n\n**WikiPrism** is a Python library designed to:\n\n1. Parse a **wiki XML file** in order to extract its **pages** - contained within \\<page\\> tags\n\n1. Parse each page so as to extract **terms** from it - that will be added to a custom **Dictionary** instance\n\nThe above tasks can be easily combined in a sophisticated but user-friendly automated process called **extraction pipeline** - configurable via a dedicated descriptor object.\n\nWikiPrism focuses on **speed** - a goal achieved by introducing careful design choices, including the _transparent_ use of **parallelism** via both _multithreading_ and _multiprocessing_, while orchestrating several elements provided by the Eos library and without losing architectural _simplicity_.\n\nIn this guide, we are going to see an overview of the library.\n\n## Installation\n\nTo install **WikiPrism**, just run:\n\n> pip install info.gianlucacosta.wikiprism\n\nor, if you are using Poetry:\n\n> poetry add info.gianlucacosta.wikiprism\n\nThen, you'll be able to access the **info.gianlucacosta.wikiprism** package and its subpackages.\n\n## Extracting pages from a wiki source\n\nTo perform _blazing-fast_ parsing, WikiPrism relies on customized **SAX**; more precisely, it expects a wiki file having whatever structure one prefers, as long as its pages comply with the following schema:\n\n```xml\n<page>\n  ...\n  <title>The page title</title>\n  ...\n  <text>The page content</text>\n  ...\n</page>\n```\n\nAutrement dit, as long as the XML file contains - anywhere - one or more **\\<page\\>** tags having the described structure, WikiPrism will be able to detect them.\n\n### In practice\n\nParsing can be performed via Python's standard functions within the [xml.sax](https://docs.python.org/3.10/library/xml.sax.html) namespace - especially:\n\n- **parse()** - to parse an XML file\n\n- **parseString()** - to parse an XML string\n\nBoth functions require a **ContentHandler** and an optional **ErrorHandler** - and that's precisely why WikiPrism provides two dedicated classes:\n\n- **WikiContentHandler**\n\n- **WikiErrorHandler**\n\nIn particular, **WikiContentHandler**'s constructor expects:\n\n- a _callback_, that receives a **Page** object - containing just the **title** and **text** attributes - as soon as a valid page is found by the SAX parser\n\n- a _ContinuationProvider_, that is a () -> bool function periodically called: should it return False, the parsing would end by raising a **WikiSaxCanceledException**\n\nFor more details, please consult the docstrings.\n\n## Creating dictionaries\n\nPython has dictionaries - intended as hash maps - but WikiPrism introduces the abstract class named **Dictionary\\[TTerm\\]** as a generic container of _terms_, which can be language elements like nouns, verbs, conjunctions, or even anything else, according to one's linguistic model... the exact purpose of each dictionary is up to the developer.\n\n**Dictionary\\[TTerm\\]** is a sort of generic repository for _terms_, via its 2 main abstract methods:\n\n- **add_term()**: adds a term to the dictionary - actually writing to the storage technology and maybe preventing duplication\n\n- **execute_command()**: runs a command string on the (arbitrary) underlying storage and returns a **Result\\[DictionaryView\\]** - that is, Ã  la Rust, either a **DictionaryView** object (a table-like DTO with both headers and data rows) or an **Exception**\n\nDictionary also has other abstract methods to implement, but it never makes assumptions about its internal data storage; consequently, for convenience, WikiPrism also provides concrete subclasses:\n\n- **InMemoryDictionary\\[TTerm\\]** - adding terms to a Python set, but unable to perform commands\n\n- **SqliteDictionary\\[TTerm\\]** - dictionary backed by a SQLite db and passing commands to the related SQL interpreter\n\nFor further details, please consult the docstrings.\n\n## The extraction pipeline\n\nTo combine wiki page extraction and dictionary creation into a performant, automated and easy-to-use process, WikiPrism defines _extraction pipelines_.\n\nRunning an extraction pipeline basically resolves to:\n\n1. Creating a custom subclass of **PipelineStrategy\\[TTerm\\]** - or its SQLite-oriented subclass, **SqlitePipelineStrategy\\[TTerm\\]**\n\n1. Invoking the **run_extraction_pipeline()** function, which only expects an instance of the strategy\n\n**run_extraction_pipeline()** executes the pipeline _in a separate thread_ (plus its own subthreads and a process pool), therefore it returns a **PipelineHandle** - an object with the following methods:\n\n- **join()** - to wait for its completion - and supporting the same parameters as Thread's [join()](https://docs.python.org/3.10/library/threading.html?highlight=thread#threading.Thread.join) method\n\n- **request_cancel()** - to stop the pipeline in a clean way, as soon as possible\n\nFor more details, please consult the docstrings, the tests, and possibly the whole open source [Cervantes](https://github.com/giancosta86/Cervantes/) project.\n\n## Related projects\n\n- [Cervantes](https://github.com/giancosta86/Cervantes/) - WikiPrism applied to Wikcionario in order to explore **Spanish** morphology with Python\n\n- [Eos-core](https://github.com/giancosta86/Eos-core) - type-checked and dependency-free modern utility library for Python\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/giancosta86/WikiPrism",
    "keywords": "library,extract,wiki,pages,dictionary,terms,pipeline",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "info.gianlucacosta.wikiprism",
    "package_url": "https://pypi.org/project/info.gianlucacosta.wikiprism/",
    "platform": null,
    "project_url": "https://pypi.org/project/info.gianlucacosta.wikiprism/",
    "project_urls": {
      "Documentation": "https://github.com/giancosta86/WikiPrism",
      "Homepage": "https://github.com/giancosta86/WikiPrism",
      "Repository": "https://github.com/giancosta86/WikiPrism"
    },
    "release_url": "https://pypi.org/project/info.gianlucacosta.wikiprism/1.0.0/",
    "requires_dist": [
      "info.gianlucacosta.eos.core (>=1.0.0,<2.0.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "Parse wiki pages and create dictionaries, fast, with Python",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13551182,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbded90c7d9aa952e8eef8c9f896bf7537a666d180c47ca07ffe14e35e1b9e57",
          "md5": "f133110f527aeef91d733817eed95b7c",
          "sha256": "f8e774d93a95e6837c90dfc0f5f86453ac65e72b3770dd596e9fc7d0d4c9dab9"
        },
        "downloads": -1,
        "filename": "info.gianlucacosta.wikiprism-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f133110f527aeef91d733817eed95b7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 18002,
        "upload_time": "2022-04-19T00:39:34",
        "upload_time_iso_8601": "2022-04-19T00:39:34.992381Z",
        "url": "https://files.pythonhosted.org/packages/cb/de/d90c7d9aa952e8eef8c9f896bf7537a666d180c47ca07ffe14e35e1b9e57/info.gianlucacosta.wikiprism-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8f09786dc47377ec7f2009cb5476b1cffc491675f05d838b22434408e8a8b79",
          "md5": "4b9cf37c2a0d642977ccf1d9a380bdd8",
          "sha256": "abdc2c6792bfc7fc37d32c27b000c59b17ca8096ebf0af99c7863067fa28ae8b"
        },
        "downloads": -1,
        "filename": "info.gianlucacosta.wikiprism-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b9cf37c2a0d642977ccf1d9a380bdd8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 15179,
        "upload_time": "2022-04-19T00:39:36",
        "upload_time_iso_8601": "2022-04-19T00:39:36.403097Z",
        "url": "https://files.pythonhosted.org/packages/e8/f0/9786dc47377ec7f2009cb5476b1cffc491675f05d838b22434408e8a8b79/info.gianlucacosta.wikiprism-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbded90c7d9aa952e8eef8c9f896bf7537a666d180c47ca07ffe14e35e1b9e57",
        "md5": "f133110f527aeef91d733817eed95b7c",
        "sha256": "f8e774d93a95e6837c90dfc0f5f86453ac65e72b3770dd596e9fc7d0d4c9dab9"
      },
      "downloads": -1,
      "filename": "info.gianlucacosta.wikiprism-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f133110f527aeef91d733817eed95b7c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 18002,
      "upload_time": "2022-04-19T00:39:34",
      "upload_time_iso_8601": "2022-04-19T00:39:34.992381Z",
      "url": "https://files.pythonhosted.org/packages/cb/de/d90c7d9aa952e8eef8c9f896bf7537a666d180c47ca07ffe14e35e1b9e57/info.gianlucacosta.wikiprism-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8f09786dc47377ec7f2009cb5476b1cffc491675f05d838b22434408e8a8b79",
        "md5": "4b9cf37c2a0d642977ccf1d9a380bdd8",
        "sha256": "abdc2c6792bfc7fc37d32c27b000c59b17ca8096ebf0af99c7863067fa28ae8b"
      },
      "downloads": -1,
      "filename": "info.gianlucacosta.wikiprism-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4b9cf37c2a0d642977ccf1d9a380bdd8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 15179,
      "upload_time": "2022-04-19T00:39:36",
      "upload_time_iso_8601": "2022-04-19T00:39:36.403097Z",
      "url": "https://files.pythonhosted.org/packages/e8/f0/9786dc47377ec7f2009cb5476b1cffc491675f05d838b22434408e8a8b79/info.gianlucacosta.wikiprism-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}