{
  "info": {
    "author": "shx2",
    "author_email": "shx222@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "=========\nApeGears\n=========\n\nAn improved ``ArgumentParser``, fully compatible with the standard ``argparse.ArgumentParser``.\n\n\nWhat is ApeGears?\n====================================\n\nApeGears' goal is making it easier to use the ``ArgumentParser``.\nIt provides simple and intuitive tools for achieving the most common use cases.\n\nApeGears defines an ``ArgumentParser`` which is a subclass of ``argparse.ArgumentParser``, and\nis fully compatible with it.\n\n\nWhat is wrong with ``argparse``?\n---------------------------------\n\nNothing.  It works great.\n\nHowever, it seems to be putting too much emphasis on being powerful, and too little on being intuitive.\nFor some actions, its interface is overly complicated.\nThe most common operations (e.g. defining flags and list arguments) are sometimes not perfectly intuitive.\n\nFurthermore, it seems to be missing some useful options, such as support for ``dict`` arguments.\nAlso, using arguments of custom types (using the ``type`` parameter) doesn't work as smoothly as you'd hope.\n\nAnother annoyance is that when using ``FileType`` in write-mode, the output file is created very early (while\nparsing cli args), not giving the option in your script to decide not to write to it after all.\n\n\n\nFeaures\n====================================\n\nFollowing is an overview of the main features.  See below for more details on each.\n\n- Intuitive \"adder\" methods for defining arguments: ``add_positional``, ``add_optional``, ``add_flag``, ``add_list``.\n\n  - These cover the most common use cases.  You'd hardly ever need to use the basic ``add_argument`` method.\n\n- Dict arguments, using ``add_dict`` method.\n- Defining custom argument-types is simpler and more powerful, using \"specs\".\n- Builtin support for some standard python types.\n\n  - E.g. ``range``, ``date``, ``datetime``, ``Path``, literals, IP address, regular expression.\n\n- An alternative ``FileType`` argument type, better than ``argparse.FileType``.\n- Smooth integration with ``fileinput``.\n- Builtin support for enum arguments.\n- Builtin support for overriding log levels from cli, using `lo99ing <https://pypi.org/project/lo99ing/>`_.\n- Can extract `description <https://docs.python.org/3/library/argparse.html#description>`_\n  from docstring of caller module, to avoid doc duplication\n  (enable by passing: ``description=CALLER_DOC``)\n- Integration with other ``ArgumentParser``-related tools.\n\n  - `argcomplete <https://pypi.org/project/argcomplete/>`_\n  - `func_argparse <https://pypi.org/project/func-argparse/>`_\n\n\nAvoiding ``argparse`` bugs:\n\n- `Issue16399 <https://bugs.python.org/issue16399>`_ *append-with-nonempty-default*:\n  apegears includes an easy-to-use workaround.\n- `Issue13041 <https://bugs.python.org/issue13041>`_ *terminal width is not detected properly*:\n  this is fixed in python 3.8, but using apegears avoids the issue for all version.\n\n\nAdder methods\n---------------------------------------\n\nThe standard all-in-one ``add_argument`` method is powerful, but not intuitive for some uses.\nIt has many kwargs, and not all combinations make sense.\n\nInstead, in most cases, you can use the more precise and convenient adder methods:\n\n- ``add_positional`` -- for defining positional arguments.\n- ``add_optional`` -- for defining optional (i.e. non-positional) arguments.\n- ``add_flag`` -- for defining (optional) flags (\"switches\").\n- ``add_list`` -- for defining (optional) list arguments.\n\n  - Multiple values can be passed in a single arg, or multiple.  The following are equivalent,\n    and result with ``{'chars': ['a', 'b', 'c', 'd']}``::\n\n        % prog.py --chars a b c d\n        % prog.py --chars a b --chars c d\n        % prog.py --chars a --chars b --chars c --chars d\n\nYou can still use the ``add_argument`` method for \"advanced\" argument definitions, but you'd rarely need to.\n\n\nDict arguments\n----------------\n\nUse ``add_dict`` for defining dict optional arguments.  E.g.::\n\n    parser.add_dict('--overrides')\n    parser.parse_args('--overrides log_level=debug logfile=out.log'.split()).overrides\n    => OrderedDict([('log_level', 'debug'), ('logfile', 'out.log')])\n\nSimilar to list arguments, multiple key-value pairs can be passed in a single arg, or multiple.\n\n\nCustom argument types\n-------------------------\n\n``argparse`` supports adding argument types by passing ``type=callable``, where ``callable``\nconverts the CLI string value to whatever you want (e.g. ``int`` converts the string to an integer).\n\nThis is not powerful enough, because often, when defining how a new argument type behaves, you'd want to include more\nthan just how to convert a CLI string.\n\nApeGears makes use of *Argument Type Specs*, which supports defining defaults for several fields:\n\n- names\n- default\n- choices\n- help\n- metavar\n\nEach of these can be explicitly overridden when calling the adder function.\n\nSuppose you have a type ``T`` which you want to use with the parser, so you define\na spec for it, ``Tspec``.\n\nFor supporting usage like ``parser.add_xxx(..., type=T, ...)``, you either:\n\n- register the spec: ``register_spec(T, Tspec)``\n- define a class attribute named ``__argparse__``. E.g.: ``T.__argparse__ = Tspec``\n\n\nAlternatively, this also works: ``parser.add_xxx(..., type=Tspec, ...)``\n\n\nArgument types for standard python types\n------------------------------------------\n\nArgument type specs are predefined for some standard python types.\nE.g., range, date, datetime, path, literals, IP address, regular expression.\n\nCan be used like this::\n\n    parser.add_optional(..., type='date', ...)  # also works: type=datetime.date\n    parser.parse_args('--date 2020-03-04'.split()).date\n    => datetime.date(2020, 3, 4)\n\nAnother example::\n\n    parser.add_optional('indexes', ..., type='range', ...)  # also works: type=range\n    parser.parse_args('--indexes 0:100:10'.split()).indexes\n    => range(0, 100, 10)\n\nAnother example, for using literals (inspired by ``python-fire``):\n\n    parser.add_optional('val', ..., type='literal', ...)\n    parser.parse_args('--val {\"four\":4,\"six\":6}'.split()).val\n    {'four': 4, 'six': 6}  # this is a dict\n\n\nImproved ``FileType``\n--------------------------\n\nThe problem with ``argparse.FileType``, is that in write-mode, the file is opened (created)\nduring cli-parsing, even in cases where you wouldn't want to write to the file.\n\nFor example, if your script is using ``argparse`` and takes a positional output file (``mode='w'``),\nThe following invocations will create an empty file named ``foo`` (deleting it if already exists)::\n\n    % myscript.py foo -h  # will create the file, and print help message\n    % myscript.py foo --no-such-option  # will create the file, and print argparse error message\n\nThere are other cases where you would decide not to write to output file (e.g. you fail generating\nthe content), but using ``argparse.FileType`` would still create an empty file (deleting existing\none).\n\nThe solution is using ``apegears.FileType`` instead, which lazily opens the file, when it is first\naccessed.\n\n\n\n``fileinput`` arguments\n--------------------------\n\nWhen you want to use `fileinput <https://docs.python.org/3/library/fileinput.html>`_ in\nyour script, ``apegears`` can save you a few lines of code::\n\n    from apegears import ArgumentParser, fileinput\n    parser = ArgumentParser()\n    parser.add_positional(type=fileinput(decompress=True), nargs='*')\n    args = parser.parse_args()\n    for line in args.infiles:\n        ...\n\n\nAlso, passing ``decompress=True`` handles compressed files better than using\n``fileinput`` directly with ``hook_compressed``\n(see `issue5758 <https://bugs.python.org/issue5758>`_).\n\n\nEnum arguments\n----------------\n\nEnum types are also supported as argument types::\n\n    class Direction(Enum):\n        UP = 1\n        DOWN = 2\n        LEFT = 3\n        RIGHT = 4\n\n    parser.add_optional(type=Direction)\n    parser.parse_args('--direction LEFT'.split()).direction\n    => <Direction.LEFT: 3>\n\n\nOverriding log levels from cli\n--------------------------------\n\nIf you're using `lo99ing <https://pypi.org/project/lo99ing/>`_, the parser automatically\nincludes a -L/--log-level option for overriding log levels from cli.\n\nE.g., to override from cli::\n\n    myscript.py -L mylogger.traffic=debug yourlogger=error\n\n\nThe append-with-nonempty-default issue\n------------------------------------------\n\nYou might have encountered a `bug <https://bugs.python.org/issue16399>`_ when using list arguments\nin the standard ``ArgumentParser``::\n\n    from argparse import ArgumentParser\n    parser = ArgumentParser()\n    parser.add_argument('list', action='append', default=['D'])\n    parser.parse_args('X'.split()).list\n    => ['D', 'X']  # expected: ['X']\n\nBasically, ``default``, instead of being used as a *default* value, is used as an *initial* value.\n\nThere is no easy-to-use workaround in the argparser level, but ApeGears provides one.\n\nThe ``add_list`` and ``add_dict`` methods include a workaround this issue.  It is enabled by default.\n\nIf you use the ``add_argument`` method directly, the workaround is disabled (for being compatible with ``argparse``),\nbut you can enable it by passing ``strict_default=True``.\n\n\nIntegration with other ``ArgumentParser``-related tools\n===========================================================\n\nargcomplete\n---------------\n\n`argcomplete <https://pypi.org/project/argcomplete/>`_ allows\n\"command line tab completion of arguments for your Python script\".\n\nFor argcomplete users, there are a few (minor) advantages to using ApeGears ``ArgumentParser``, over ``argparse``'s:\n\n- No need to call ``argcomplete.autocomplete(parser)``, it is called automatically for you\n- Better completion of enum types\n- Avoids the awkward way of setting a custom completer\n\n  - use like: ``parser.add_argument(..., completer=MyCompleter)``\n  - instead of: ``parser.add_argument(...).completer = MyCompleter``\n\n- If you define custom argument types, you can also define a completer as part of their spec\n\n\nfunc_argparse\n---------------\n\n`func_argparse <https://pypi.org/project/func-argparse/>`_ is used for\n\"Generating a nice command line interface for a list of functions or a module\".\n\nApeGears lets you use func_argparse for generating an ApeGears ``ArgumentParser``, instead of ``argparse``'s.\n\nThe main advantages of using ``apegears + func_argparse`` over using ``func_argparse`` alone:\n\n- Dict options\n- Custom argument types, and argument types for standard python types\n\nTo use it, simply replace your import lines::\n\n    import func_argparse            -->    import apegears.func_argparse\n    from func_argparse import ...   -->    from apegears.func_argparse import ...\n\n\n\nGetting Started\n====================================\n\nInstallation\n---------------\n\nUsing pip::\n\n    pip install apegears\n\n\nStart using the ``ArgumentParser``\n-----------------------------------\n\n``apegears.ArgumentParser`` is fully compatible with ``argparse``'s, so you can start\nby replacing your import lines::\n\n    import argparse            -->  import apegears\n    from argparse import ...   -->  from apegears import ...\n\n... to unleash the apes.\n\n\nWhat does the Name Mean?\n============================\nNothing. ::\n\n    argparse = list('argparse')\n    apegears = list('apegears')\n    while argparse != apegears:\n        random.shuffle(argparse)\n    print('Got it?')\n    print('Probably not...')",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shx2/apegears",
    "keywords": "CLI argparse ArgumentParser optparse func_argparse",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "apegears",
    "package_url": "https://pypi.org/project/apegears/",
    "platform": "POSIX",
    "project_url": "https://pypi.org/project/apegears/",
    "project_urls": {
      "Homepage": "https://github.com/shx2/apegears"
    },
    "release_url": "https://pypi.org/project/apegears/0.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An improved ArgumentParser, fully compatible with argparse.",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7634659,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd963a97446113f5a356c59b9b1297be3e54cc2d118e0e47f9bbe8df88d0a326",
          "md5": "5c6b7745fd103bfb266f1c50b55c7643",
          "sha256": "43610c93d1a83fe23a2a1bfcd5184c2a382341a226335c0347431856e2ad4317"
        },
        "downloads": -1,
        "filename": "apegears-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c6b7745fd103bfb266f1c50b55c7643",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13386,
        "upload_time": "2020-05-03T12:07:17",
        "upload_time_iso_8601": "2020-05-03T12:07:17.910705Z",
        "url": "https://files.pythonhosted.org/packages/dd/96/3a97446113f5a356c59b9b1297be3e54cc2d118e0e47f9bbe8df88d0a326/apegears-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2875270bd7ec1f3ec0c1816d4db39629f76daa8c42633a0713a0f95cd5fd0fab",
          "md5": "d92d51750a2e898a64facb6703ed14a6",
          "sha256": "c08fcbdc5dbcf92eb89db2e3ad0953d640d5f7149e165c4dc85e8f70c5808e14"
        },
        "downloads": -1,
        "filename": "apegears-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d92d51750a2e898a64facb6703ed14a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16342,
        "upload_time": "2020-05-25T18:26:13",
        "upload_time_iso_8601": "2020-05-25T18:26:13.248212Z",
        "url": "https://files.pythonhosted.org/packages/28/75/270bd7ec1f3ec0c1816d4db39629f76daa8c42633a0713a0f95cd5fd0fab/apegears-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62987caf328164b56c1e2476d8b54e7423db80a4f092b3ecc1283e185eb78007",
          "md5": "f34b819ada9c6756a5aa6bdaace41010",
          "sha256": "878ea089f7cbf902cb806c7270af4b65eb9ba5f5f7f2b006d27a9bf7907f1e1e"
        },
        "downloads": -1,
        "filename": "apegears-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f34b819ada9c6756a5aa6bdaace41010",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17491,
        "upload_time": "2020-05-31T06:59:14",
        "upload_time_iso_8601": "2020-05-31T06:59:14.918404Z",
        "url": "https://files.pythonhosted.org/packages/62/98/7caf328164b56c1e2476d8b54e7423db80a4f092b3ecc1283e185eb78007/apegears-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d82666051cf6adf4b5921c8b3326d3500218d8781368e844b1b56a2b320ca1e7",
          "md5": "1abcb423d554387cb963e93e4dd65634",
          "sha256": "f03d6ca2d4701af9410614c5a1209a4ccf432be4245078207e8b5d98a4df0f08"
        },
        "downloads": -1,
        "filename": "apegears-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1abcb423d554387cb963e93e4dd65634",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18229,
        "upload_time": "2020-06-15T11:12:04",
        "upload_time_iso_8601": "2020-06-15T11:12:04.315740Z",
        "url": "https://files.pythonhosted.org/packages/d8/26/66051cf6adf4b5921c8b3326d3500218d8781368e844b1b56a2b320ca1e7/apegears-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "618d2362e7379c7bfc3663e015ebb669aa4756e5811d733b342d482efc005c5e",
          "md5": "3a5da9c41e8ef26c86d6ac1c932cb158",
          "sha256": "c63958f732314f088cdb3561c484e9c36a3740daacc9b3aaa7f0c8c8aeb92fa9"
        },
        "downloads": -1,
        "filename": "apegears-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3a5da9c41e8ef26c86d6ac1c932cb158",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18389,
        "upload_time": "2020-07-05T19:18:04",
        "upload_time_iso_8601": "2020-07-05T19:18:04.361306Z",
        "url": "https://files.pythonhosted.org/packages/61/8d/2362e7379c7bfc3663e015ebb669aa4756e5811d733b342d482efc005c5e/apegears-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "618d2362e7379c7bfc3663e015ebb669aa4756e5811d733b342d482efc005c5e",
        "md5": "3a5da9c41e8ef26c86d6ac1c932cb158",
        "sha256": "c63958f732314f088cdb3561c484e9c36a3740daacc9b3aaa7f0c8c8aeb92fa9"
      },
      "downloads": -1,
      "filename": "apegears-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3a5da9c41e8ef26c86d6ac1c932cb158",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18389,
      "upload_time": "2020-07-05T19:18:04",
      "upload_time_iso_8601": "2020-07-05T19:18:04.361306Z",
      "url": "https://files.pythonhosted.org/packages/61/8d/2362e7379c7bfc3663e015ebb669aa4756e5811d733b342d482efc005c5e/apegears-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}