{
  "info": {
    "author": "Luke Parry",
    "author_email": "dev@lukeparry.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering"
    ],
    "description": "PyCCX - Python Library for Calculix\n=======================================\n\n.. image:: https://github.com/drlukeparry/pyccx/workflows/Python%20application/badge.svg\n    :target: https://github.com/drlukeparry/pyccx/actions\n.. image:: https://readthedocs.org/projects/pyccx/badge/?version=latest\n    :target: https://pyccx.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n.. image:: https://badges.gitter.im/pyccx/community.svg\n    :target: https://gitter.im/pyccx/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\n    :alt: Chat on Gitter\n\nProvides a library for creating and running 3D FEA simulations using the opensource Calculix FEA Package.\n\nThe aims of this project was to provide a simple framework for implemented 3D FEA Analysis using the opensource `Calculix <http://www.calculix.de>`_ solver.\nThe analysis is complimented by use of the recent introduction of the\n`GMSH-SDK <http://https://gitlab.onelab.info/gmsh/gmsh/api>`_ , an extension to `GMSH <http://gmsh.info/>`_  to provide API bindings for different programming languages\nby the project authors to provide sophisticated 3D FEA mesh generation outside of the GUI implementation. This project aims to provide an integrated approach for generating full 3D FEA analysis\nfor use in research, development and prototyping in a Python environment. Along with setting up and processing the analysis,\nconvenience functions are included.\n\nThe inception of this project was a result of finding no native Python/Matlab package available to perfom full non-linear FEA analysis\nof 3D CAD models in order to prototype a concept related to 3D printing. The project aims to compliment the work of\nthe `PyCalculix project <https://github.com/spacether/pycalculix>`_, which currently is limited to providing capabilities\nto generate 2D Meshes and FEA analysis for 2D planar structures. The potential in the future is to provide\na more generic extensible framework compatible with different opensource and commercial FEA solvers (e.g. Abaqus, Marc, Z88, Elmer).\n\nAn interface that built upon GMSH was required to avoid the use of the GUI, and the domain specific .geo scripts.\n`Learn more <http://lukeparry.uk/>`_.\n\nStructure\n##############\n\nPyCCX framework consists of classes for specifying common components on the pre-processing phase, including the following\ncommon operations:\n\n* Mesh generation\n* Creating and applying boundary conditions\n* Creating load cases\n* Creating and assigning material models\n* Performing the simulation\n\nIn addition, a meshing class provides an interface with GMSH for performing the meshing routines and for associating\nboundary conditions with the elements/faces generated from geometrical CAD entities. The Simulation class assembles the\nanalysis and performs the execution to the Calculix Solver. Results obtained upon completion of the analysis can be processed.\nCurrently the analysis is unit-less, therefore the user should ensure that all constant, material paramters, and geometric\nlengths are consistent - by default GMSH assumes 'mm' units.\n\nCurrent Features\n******************\n\n**Meshing:**\n\n* Integration with GMSH for generation 3D FEA Meshes (Tet4, Tet10 currently supported)\n* Merging CAD assemblies using GMSH\n* Attaching boundary conditions to Geometrical CAD entities\n\n**FEA Capabilities:**\n\n* **Boundary Conditions** (Acceleration, Convection, Fixed Displacements, Forces, Fluxes, Pressure, Radiation)\n* **Loadcase Types** (Structural Static, Thermal, Coupled Thermo-Mechanical)\n* **Materials** (Non-linear Elasto-Plastic Material)\n\n**Results Processing:**\n\n* Element and Nodal Results can be obtained across timesteps\n\n\nInstallation\n*************\nInstallation is currently supported on Windows, all this further support will be added for\nLinux environments. PyCCX can be installed along with dependencies for GMSH automatically using.\n\n.. code:: bash\n\n    pip install pyccx\n\n\nDepending on your environment, you will need to install the latest version of Calculix. This can be done through\nthe conda-forge `calculix package <https://anaconda.org/conda-forge/calculix>`_ in the Anaconda distribution,\n\n.. code:: bash\n\n    conda install -c conda-forge calculix\n\n\nor alternatively downloading the package directly. On Windows platforms the path of the executable needs to be initialised before use.\n\n.. code:: python\n\n    from pyccx.core import Simulation\n\n    # Set the path for Calculix in Windows\n    Simulation.setCalculixPath('Path')\n\n\nUsage\n******\n\nThe following code excerpt shows an example for creating and running a steady state thermal analysis of model using PyCCX\nof an existing mesh generated using the pyccx.mesh.mesher class.\n\n.. code:: python\n\n    from pyccx.core import DOF, ElementSet, NodeSet, SurfaceSet, Simulation\n    from pyccx.results import ElementResult, NodalResult, ResultProcessor\n    from pyccx.loadcase import  LoadCase, LoadCaseType\n    from pyccx.material import ElastoPlasticMaterial\n\n    # Set the path for Calculix in Windows\n    Simulation.setCalculixPath('Path')\n\n    # Create a thermal load case and set the timesettings\n    thermalLoadCase = LoadCase('Thermal Load Case')\n\n    # Set the loadcase type to thermal - eventually this will be individual analysis classes with defaults\n    thermalLoadCase.setLoadCaseType(LoadCaseType.THERMAL)\n\n    # Set the thermal analysis to be a steady state simulation\n    thermalLoadCase.isSteadyState = True\n\n    # Attach the nodal and element result options to each loadcase\n    # Set the nodal and element variables to record in the results (.frd) file\n    nodeThermalPostResult = NodalResult('VolumeNodeSet')\n    nodeThermalPostResult.useNodalTemperatures = True\n\n    elThermalPostResult = ElementResult('Volume1')\n    elThermalPostResult.useHeatFlux = True\n\n    # Add the result configurations to the loadcase\n    thermalLoadCase.resultSet = [nodeThermalPostResult, elThermalPostResult]\n\n    # Set thermal boundary conditions for the loadcase using specific NodeSets\n    thermalLoadCase.boundaryConditions.append(\n        {'type': 'fixed', 'nodes': 'surface6Nodes', 'dof': [DOF.T], 'value': [60]})\n\n    thermalLoadCase.boundaryConditions.append(\n        {'type': 'fixed', 'nodes': 'surface1Nodes', 'dof': [DOF.T], 'value': [20]})\n\n    # Material\n    # Add a elastic material and assign it to the volume.\n    # Note ensure that the units correctly correspond with the geometry length scales\n    steelMat = ElastoPlasticMaterial('Steel')\n    steelMat.density = 1.0    # Density\n    steelMat.cp =  1.0        # Specific Heat\n    steelMat.k = 1.0          # Thermal Conductivity\n\n    analysis.materials.append(steelMat)\n\n    # Assign the material the volume (use the part name set for geometry)\n    analysis.materialAssignments = [('PartA', 'Steel')]\n\n    # Set the loadcases used in sequential order\n    analysis.loadCases = [thermalLoadCase]\n\n    # Analysis Run #\n    # Run the analysis\n    analysis.run()\n\n    # Open the results  file ('input') is currently the file that is generated by PyCCX\n    results = analysis.results()\n    results.load()\n\n\nThe basic usage is split between the meshing facilities provided by GMSH and analysing a problem using the Calculix Solver. Documented\nexamples are provided in `examples <https://github.com/drlukeparry/pyccx/tree/master/examples>`_ .\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/drlukeparry/pyccx",
    "keywords": "FEA,Finite Element Analysis,Simulation,Calculix,GMSH",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyCCX",
    "package_url": "https://pypi.org/project/PyCCX/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyCCX/",
    "project_urls": {
      "Documentation": "https://pyccx.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/drlukeparry/pyccx",
      "Source": "https://github.com/drylukeparry/pyccx/pyccx/",
      "Tracker": "https://github.com/drlukeparry/pyccx/issues"
    },
    "release_url": "https://pypi.org/project/PyCCX/0.1/",
    "requires_dist": [
      "gmsh-sdk",
      "numpy",
      "setuptools",
      "jupyter ; extra == 'docs'",
      "sphinx ; extra == 'docs'",
      "autodocsumm ; extra == 'docs'",
      "pypandoc ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "setuptools ; extra == 'easy'",
      "colorlog ; extra == 'easy'"
    ],
    "requires_python": ">=3.5",
    "summary": "Simulation FEA environment for Python built upon Calculix and GMSH",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7203800,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "847d3dffe2da969cc0924e11b74e407702a9c67014d89c64344b3011958bf5b6",
          "md5": "91dabe9fdee021a151779e4897fdeeb6",
          "sha256": "90f47deaf51b5f8418b3f590acb43f04b23032fca5a731600e11badd5f1ddda4"
        },
        "downloads": -1,
        "filename": "PyCCX-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91dabe9fdee021a151779e4897fdeeb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 32129,
        "upload_time": "2020-05-09T13:46:46",
        "upload_time_iso_8601": "2020-05-09T13:46:46.438704Z",
        "url": "https://files.pythonhosted.org/packages/84/7d/3dffe2da969cc0924e11b74e407702a9c67014d89c64344b3011958bf5b6/PyCCX-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ef78cb170595fdd08074ec4de88d54ba0f4e2257881ac850501f27950b40fb4",
          "md5": "6ed6c877514e1173caa1cc9a97ffe8d6",
          "sha256": "5530c266d683b3182a681b91ac551c3e341f8b6a7252e8600ea3ac45a95de3b8"
        },
        "downloads": -1,
        "filename": "PyCCX-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ed6c877514e1173caa1cc9a97ffe8d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 29309,
        "upload_time": "2020-05-09T13:46:49",
        "upload_time_iso_8601": "2020-05-09T13:46:49.764492Z",
        "url": "https://files.pythonhosted.org/packages/5e/f7/8cb170595fdd08074ec4de88d54ba0f4e2257881ac850501f27950b40fb4/PyCCX-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "847d3dffe2da969cc0924e11b74e407702a9c67014d89c64344b3011958bf5b6",
        "md5": "91dabe9fdee021a151779e4897fdeeb6",
        "sha256": "90f47deaf51b5f8418b3f590acb43f04b23032fca5a731600e11badd5f1ddda4"
      },
      "downloads": -1,
      "filename": "PyCCX-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "91dabe9fdee021a151779e4897fdeeb6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 32129,
      "upload_time": "2020-05-09T13:46:46",
      "upload_time_iso_8601": "2020-05-09T13:46:46.438704Z",
      "url": "https://files.pythonhosted.org/packages/84/7d/3dffe2da969cc0924e11b74e407702a9c67014d89c64344b3011958bf5b6/PyCCX-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ef78cb170595fdd08074ec4de88d54ba0f4e2257881ac850501f27950b40fb4",
        "md5": "6ed6c877514e1173caa1cc9a97ffe8d6",
        "sha256": "5530c266d683b3182a681b91ac551c3e341f8b6a7252e8600ea3ac45a95de3b8"
      },
      "downloads": -1,
      "filename": "PyCCX-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6ed6c877514e1173caa1cc9a97ffe8d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 29309,
      "upload_time": "2020-05-09T13:46:49",
      "upload_time_iso_8601": "2020-05-09T13:46:49.764492Z",
      "url": "https://files.pythonhosted.org/packages/5e/f7/8cb170595fdd08074ec4de88d54ba0f4e2257881ac850501f27950b40fb4/PyCCX-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}