{
  "info": {
    "author": "Pi Esposito",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# TanD - Train and Deploy\n\nTanD is a simple, no-code, flexible and customizable framework to automatize the Machine Learning workflow. \n\nWith TanD you can go through the whole ML workflow without writing a single line of code (for both `sklearn` and `torch` based models): by creating a project template and setting some configurations on a `.json` file you are able to train a ML model of your choice, store it to `mlflow` to control its lifecycle and create a ready-to-deploy API to serve your it.\n\nAlthough TanD lets you run your workflows (from train to deploy) with no code at all, it is highly customizable, letting you introduce your chunks of code to enhance your modelling pipelines in anyway you want.\n\nOur mission is to let you avoid repetitive tasks so you can focus on what matters. TanD brings Machine-Learning laziness to a whole new level.\n\n## Rodamap \nThe project's roadmap (which is not defined in order of priority) is:\n * Create project templates (`torch` and `sklearn`) for regression tasks in structured data;\n * ~Create a `Dockerfile` in project templates to ease deployment~ OK;\n * ~Create a `cron` job in Docker to update model parameters~ OK;\n * Create tutorials for train and deploy with `tand`;\n * Create project templates (`torch` / `transformers`) for classification tasks in text data;\n * Create project templates (`torch`) for classification in image data;\n * Create `documentation` for the project\n\n # Index\n * [Install](#Install)\n * [Documentation](#Documentation)\n * [Quick start](#Quick-start)\n\n ## Install\n\nTo install `tand` you can use pip command:\n\n```\npip install train-and-deploy\n```\n\nYou can also clone the repo and `pip install .` it locally:\n\n```\ngit clone https://github.com/piEsposito/TanD.git\ncd TanD\npip install .\n```\n\n ## Documentation\nDocumentation for `tand.util` and explanation of project templates:\n * [util](doc/util.md)\n\nDocumentation for `tand.deployment` with utils to ease deployment to cloud:\n * [deployment](doc/deployment.md)\n\nDocumentation for project templates:\n * [PyTorch structured data classification task](doc/pytorch-structured-classification.md)\n * [PyTorch structured data regression task](doc/pytorch-structured-regression.md)\n * [Sklearn structured data regression task](doc/sklearn-structured-classification.md)\n\n\n---\n\n## Quick start\n\nAfter installing `tand` you can train and deploy on a sample project using the [UCI heart disease dataset](https://www.kaggle.com/ronitf/heart-disease-uci). Notice that you can perform the process on your own datasets by only changing the `.csv` file and setting some configurations. By following this steps, this tutorial will let you:\n\n * Train a `torch` model with a dataset and log all of its metrics to `mlflow`;\n * Automatically generate a `fastapi` based API service for serving the model (which receives a json with the features);\n * Deploy the model to AWS ElasticBeanstalk with two lines of code.\n\n\nTo create the project with a `torch` based model, on an empty folder, type:\n\n```\ntand-create-project --template pytorch-structured-classification\n```\n\nThat will create all the needed files on the folder. We should first check `config.json`:\n\n```json\n{\n  \"train\": {\n    \"__help\": \"Configurations for the training of the project (of the model, etc...)\",\n    \"data_path\": \"data/data.csv\",\n    \"labels_column\": \"target\",\n\n    \"log_every\": 250,\n    \"epochs\": 50,\n\n    \"hidden_dim\": 256,\n    \"batch_size\": 32,\n    \"device\": \"cpu\",\n    \"labels\": [\"no_heart_disease\", \"heart_disease\"],\n    \"to_drop\": []\n\n  },\n\n  \"test\": {\n    \"__help\": \"Configurations for the testing of this project (train + app)\"\n  },\n\n  \"app\": {\n    \"__help\": \"Configurations for the service generated by this project\",\n    \"token\": null\n  },\n\n  \"mlflow\": {\n    \"__help\": \"Configurations for the mlflow model manager of the project\",\n    \"model_name\": \"pytorch-classifier-nn-heart-disease\",\n    \"experiment_name\": \"heart-disease-experiment\"\n  }\n}\n```\n\nThe project is all set, but is important to check:\n * If the `data_path` attribute of `train` is set properly;\n * If the `labels_column` attribute of `train` is set according to the dataset label column;\n * If the `labels` attribute of `train` is set in proper order with the names.\n\nWe should also see the `mlflow` pathes for both database and model logging. As we want to keep it simple, we will use `sqlite` and a local storage, but you can set it to remote buckets and database in a production environment. They are set in all the `env_files` folder files as:\n\n```\nMLFLOW_TRACKING_URI=sqlite:///database.db\nMLFLOW_DEFAULT_ARTIFACT_ROOT=./mlruns/\n```\n\nBut feel free to change it, according to [`mlflow` documentation](https://www.mlflow.org/docs/latest/tracking.html).\n\nTo train the model is as easy as running:\n\n```\nsource env_files/train.env\npython train.py\n```\n\nAnd you can see lots of metrics for the model at `mlflow`:\n\n```\nbash mlflow-server.sh\n```\n\nIf you are running an `mlflow` experiment for first time on a project, it will be automatically set for production. If you rerun the experiment with a different dataset or parameters, you can set the production model at `mlflow` followint the [documentation](https://www.mlflow.org/docs/latest/model-registry.html). That will be useful once you deploy it.\n\nThat command also creates `request_model.json`, which is used both to validate request bodies for the API service and reordering it to comply with model. This file will be also used for unit-testing the API (this is also automatically generated).\n\n```json\n{\n    \"age\": 1,\n    \"sex\": 1,\n    \"cp\": 1,\n    \"trestbps\": 1,\n    \"chol\": 1,\n    \"fbs\": 1,\n    \"restecg\": 1,\n    \"thalach\": 1,\n    \"exang\": 1,\n    \"oldpeak\": 1,\n    \"slope\": 1,\n    \"ca\": 1,\n    \"thal\": 1\n}\n```\n\n### Moving to the API creation\n\nIf you want to generate value with a ML model, you should deploy it. `tand` helps you with creating the API, a `Dockerfile` and all the configurations files needed to deploy the model with no code. Notice that the API is protected with a token, which defaults to `TOKEN123` but you can change it on `env_files/app.env` and `env_files/docker_app.env`.\n\nThe API contains simple authentication token, a `/` route for health checking, `/update-model` for model uptading (POST at it with proper credentials and it fetches the latest production model at `mlflow`), and `/predict`, which grabs the features from the request body and returns the prediction.\n\nTo test the API, just run:\n\n```\nsource env_files/app.env\npytest\n```\n\nIt should pass everything.\n\nYou now have some options for deployment. You can, using some arbitrary VM, run the app, build and run the image generated by `Dockerfile` or use `tand` features designed for AWS ElasticBeanstalk, which lets your model to be deployed cheap and scalable. We will cover both:\n\nTo run the app, just type:\n\n```\nuvicorn app:app --reload --host 0.0.0.0 --port 8000\n```\n\nYou can test it with:\n\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"TOKEN: $API_TOKEN\" \\\n  --request POST \\\n  --data '{\"age\":1,\"sex\":1,\"cp\":1,\"trestbps\":1,\"chol\":1,\"fbs\":1,\"restecg\":1,\"thalach\":1,\"exang\":1,\"oldpeak\":1,\"slope\":1,\"ca\":1,\"thal\":1}' \\\n  http://localhost:8000/predict\n```\n\nRemember to `source env_files/app.env` before performing the request or else it will return status 401 Unauthorized.\n\nYou can build the Docker image with:\n\n```\ndocker build . -t tand-app:v1\n```\n\nAnd run it with:\n\n```\ndocker run -p 8000:8000 --env-file env_files/docker_app.env tand-app:v1\n```\n\nYou can test it with:\n\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"TOKEN: $API_TOKEN\" \\\n  --request POST \\\n  --data '{\"age\":1,\"sex\":1,\"cp\":1,\"trestbps\":1,\"chol\":1,\"fbs\":1,\"restecg\":1,\"thalach\":1,\"exang\":1,\"oldpeak\":1,\"slope\":1,\"ca\":1,\"thal\":1}' \\\n  http://localhost:8000/predict\n```\n\nRemember to `source env_files/app.env` before performing the request or else it will return status 401 Unauthorized.\n\nLast, we can deploy it to AWS ElasticBeanstalk. To do that, first you [should set your AWS credentials](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html) at your machine and then [install `eb` CLI](https://docs.amazonaws.cn/en_us/elasticbeanstalk/latest/dg/eb-cli3-install-linux.html). That should be done at your root environment, not `conda` or `virtualenv`.\n\nYou can generate the configurations with:\n\n```\ntand-prepare-aws-eb-deployment --init-git\n```\n\nWe pass this `--init-git` flag because `eb` CLI uses some files from `.git` repository to upload the files to be deployed.\n\nThat will generate `deploy-aws-eb.sh`, which will be run for deployment. It will also generate `.ebextensions` containing:\n * `cron.config` - which runs, on each instance, a daily task to update the instance ML model by fetching the last production one from `mlflow` (which is properly used when we set cloud-based `mlflow` backend);\n * `options.config` - which sets the API token and `mlflow` backend env variables for the deployment; and \n * `scaling.config` - which sets the scalability configurations for the deployment, including the maximum and minimum number of replicas and criteria for scaling (defaults to latency)\n\nTo finally deploy it to AWS, run:\n\n```\nbash deploy-aws.eb.sh\n```\n\nIt takes about 5 minutes, after what you can `eb open` to get the link and then try it with\n\n```\ncurl --header \"Content-Type: application/json\" \\\n  --header \"TOKEN: $API_TOKEN\" \\\n  --request POST \\\n  --data '{\"age\":1,\"sex\":1,\"cp\":1,\"trestbps\":1,\"chol\":1,\"fbs\":1,\"restecg\":1,\"thalach\":1,\"exang\":1,\"oldpeak\":1,\"slope\":1,\"ca\":1,\"thal\":1}' \\\n  http://YOUR_LINK_GOES_HERE/predict\n```\n\nRemember to properly set the token for testing.\n\nAnd with that, we showed how can we train and deploy a model with `tand` with a couple terminal commands and no coding at all.\n\n---\n\n###### Made by Pi Esposito\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/piEsposito/tand",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "train-and-deploy",
    "package_url": "https://pypi.org/project/train-and-deploy/",
    "platform": "",
    "project_url": "https://pypi.org/project/train-and-deploy/",
    "project_urls": {
      "Homepage": "https://github.com/piEsposito/tand"
    },
    "release_url": "https://pypi.org/project/train-and-deploy/0.1.4/",
    "requires_dist": [
      "torch (==1.6.0)",
      "scikit-learn (==0.22.2)",
      "mlflow (==1.10.0)",
      "pandas (==1.0.4)",
      "numpy (==1.19.1)",
      "seaborn (==0.10.1)",
      "matplotlib (==3.2.1)",
      "unidecode (==1.1.1)",
      "fastapi (==0.60.1)"
    ],
    "requires_python": "",
    "summary": "Train and Deploy is a framework to automatize the Machine Learning workflow.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8044657,
  "releases": {
    "0.1.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a79fc5a803a797a75fd7382fa7f0c97d055cbdeb783afc8694e551aca0b4b004",
          "md5": "be866f8e9f1c65ca0104fb1c8d18a8ef",
          "sha256": "c42fd576eb79b01843e160d4968dc2927b55ad209a33f7f7c0fa97fa6f3414ad"
        },
        "downloads": -1,
        "filename": "train_and_deploy-0.1.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be866f8e9f1c65ca0104fb1c8d18a8ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33726,
        "upload_time": "2020-08-22T20:37:09",
        "upload_time_iso_8601": "2020-08-22T20:37:09.676562Z",
        "url": "https://files.pythonhosted.org/packages/a7/9f/c5a803a797a75fd7382fa7f0c97d055cbdeb783afc8694e551aca0b4b004/train_and_deploy-0.1.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea9bd70042f542580913d5797f031e7e656c420fc500218f041724571b42a31f",
          "md5": "21bac683798515331c2039a53a6fd894",
          "sha256": "b73fa65f4b1b39410a2915c5342aa568b2e7ed58619fbe214a6c8e6bb18c52b2"
        },
        "downloads": -1,
        "filename": "train-and-deploy-0.1.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "21bac683798515331c2039a53a6fd894",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24213,
        "upload_time": "2020-08-22T20:37:10",
        "upload_time_iso_8601": "2020-08-22T20:37:10.787096Z",
        "url": "https://files.pythonhosted.org/packages/ea/9b/d70042f542580913d5797f031e7e656c420fc500218f041724571b42a31f/train-and-deploy-0.1.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed671490c65503738bf75a8bcf53a4f4d3fcfd1f5394e71ac1db9a71a17125af",
          "md5": "1087546457dd159c6345b525b095658d",
          "sha256": "0a6660d7c1b109c4a6ccad68d40a427d6bc191d71b2fb7ba0a626948df822119"
        },
        "downloads": -1,
        "filename": "train_and_deploy-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1087546457dd159c6345b525b095658d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33967,
        "upload_time": "2020-08-23T21:58:43",
        "upload_time_iso_8601": "2020-08-23T21:58:43.071191Z",
        "url": "https://files.pythonhosted.org/packages/ed/67/1490c65503738bf75a8bcf53a4f4d3fcfd1f5394e71ac1db9a71a17125af/train_and_deploy-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12a89cffb436364e842ec08ec6fe15c9582e2133f9490314127a24ec6d9c615b",
          "md5": "afd6dc5ed3009803a22c0076ea68e12b",
          "sha256": "2285582edcee9874237dfc0522fe8ceed70bb4a86f4ed2e996ca3f2de00361f9"
        },
        "downloads": -1,
        "filename": "train-and-deploy-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "afd6dc5ed3009803a22c0076ea68e12b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24372,
        "upload_time": "2020-08-23T21:58:44",
        "upload_time_iso_8601": "2020-08-23T21:58:44.262993Z",
        "url": "https://files.pythonhosted.org/packages/12/a8/9cffb436364e842ec08ec6fe15c9582e2133f9490314127a24ec6d9c615b/train-and-deploy-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70deda49a9b7fea42e472f677144068c070230b2ebaabf5ebf12a430bc912c05",
          "md5": "ed7b2ad5e16f85a0c8f30162f647207a",
          "sha256": "7e9c5bc0f5e55a4047ab8ca1ccd901aa4d073360c152690b1c24a0c2487bf57a"
        },
        "downloads": -1,
        "filename": "train_and_deploy-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed7b2ad5e16f85a0c8f30162f647207a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70508,
        "upload_time": "2020-08-25T15:26:24",
        "upload_time_iso_8601": "2020-08-25T15:26:24.365607Z",
        "url": "https://files.pythonhosted.org/packages/70/de/da49a9b7fea42e472f677144068c070230b2ebaabf5ebf12a430bc912c05/train_and_deploy-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d6255743d32ca279a738bc37f3e633ccadcf897fed69e9f8a06d661aa7acd09",
          "md5": "2e2d3399fb5e934350be210eca413f1c",
          "sha256": "0f85568fd0e591826c0132ca6e8b6887e08b035ce3ab9e8a365c67419c7e1107"
        },
        "downloads": -1,
        "filename": "train-and-deploy-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2e2d3399fb5e934350be210eca413f1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59975,
        "upload_time": "2020-08-25T15:26:25",
        "upload_time_iso_8601": "2020-08-25T15:26:25.886086Z",
        "url": "https://files.pythonhosted.org/packages/6d/62/55743d32ca279a738bc37f3e633ccadcf897fed69e9f8a06d661aa7acd09/train-and-deploy-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e3e69dd2f12c81b2ecebac24a6538b5aed5edb484422912a0f5c7deeeb846c9",
          "md5": "f2f3f8ba4b4fa9a0267eea7d0737739d",
          "sha256": "93ba2033c734f81b11f2c7bd669b55ba313f06d2cac52864d28868aa5e4e4856"
        },
        "downloads": -1,
        "filename": "train_and_deploy-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2f3f8ba4b4fa9a0267eea7d0737739d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70508,
        "upload_time": "2020-08-26T15:28:28",
        "upload_time_iso_8601": "2020-08-26T15:28:28.982359Z",
        "url": "https://files.pythonhosted.org/packages/1e/3e/69dd2f12c81b2ecebac24a6538b5aed5edb484422912a0f5c7deeeb846c9/train_and_deploy-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7db2b284871a646d6f940e4d33e8edf20b4b2ec42983b2e90082e79d20d36618",
          "md5": "4cb0fc47ca5788af60124df89f10a017",
          "sha256": "e332eacea8a71effb49a78ee7457c38504723c76df694c5ccba1223fa1e2ed12"
        },
        "downloads": -1,
        "filename": "train-and-deploy-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4cb0fc47ca5788af60124df89f10a017",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59967,
        "upload_time": "2020-08-26T15:28:30",
        "upload_time_iso_8601": "2020-08-26T15:28:30.387105Z",
        "url": "https://files.pythonhosted.org/packages/7d/b2/b284871a646d6f940e4d33e8edf20b4b2ec42983b2e90082e79d20d36618/train-and-deploy-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e3e69dd2f12c81b2ecebac24a6538b5aed5edb484422912a0f5c7deeeb846c9",
        "md5": "f2f3f8ba4b4fa9a0267eea7d0737739d",
        "sha256": "93ba2033c734f81b11f2c7bd669b55ba313f06d2cac52864d28868aa5e4e4856"
      },
      "downloads": -1,
      "filename": "train_and_deploy-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2f3f8ba4b4fa9a0267eea7d0737739d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 70508,
      "upload_time": "2020-08-26T15:28:28",
      "upload_time_iso_8601": "2020-08-26T15:28:28.982359Z",
      "url": "https://files.pythonhosted.org/packages/1e/3e/69dd2f12c81b2ecebac24a6538b5aed5edb484422912a0f5c7deeeb846c9/train_and_deploy-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7db2b284871a646d6f940e4d33e8edf20b4b2ec42983b2e90082e79d20d36618",
        "md5": "4cb0fc47ca5788af60124df89f10a017",
        "sha256": "e332eacea8a71effb49a78ee7457c38504723c76df694c5ccba1223fa1e2ed12"
      },
      "downloads": -1,
      "filename": "train-and-deploy-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "4cb0fc47ca5788af60124df89f10a017",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 59967,
      "upload_time": "2020-08-26T15:28:30",
      "upload_time_iso_8601": "2020-08-26T15:28:30.387105Z",
      "url": "https://files.pythonhosted.org/packages/7d/b2/b284871a646d6f940e4d33e8edf20b4b2ec42983b2e90082e79d20d36618/train-and-deploy-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}