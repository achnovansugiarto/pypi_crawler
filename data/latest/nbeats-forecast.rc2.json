{
  "info": {
    "author": "Amitesh Sharma",
    "author_email": "amitesh863@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# nbeats_forecast\n\n##### Neural Beats implementation library\n\nnbeats_forecast is an end to end library for univariate time series forecasting using N-BEATS (https://arxiv.org/pdf/1905.10437v3.pdf - Published as conference paper in ICLR).\nThis library uses nbeats-pytorch (https://github.com/philipperemy/n-beats) as base and simplifies the task of forecasting using N-BEATS by providing a interface similar to scikit-learn and keras.\n\n\n### Required: Python >=3.6\n\n### Installation\n\n```sh\n$ pip install nbeats_forecast\n```\n\n#### Import\n```sh\nfrom nbeats_forecast import NBeats\n```\n\n#### Input\nnumpy array of size nx1 \n\n#### Output\nForecasted values as numpy array of size mx1 \n\nMandatory Parameters for the model:\n- data\n- period_to_forecast\n\nBasic model with only mandatory parameters can be used to get forecasted values as shown below:\n```sh\nimport pandas as pd\nfrom nbeats_forecast import NBeats\n\ndata = pd.read_csv('data.csv')   \ndata = data.values        #univariate time series data of shape nx1 (numpy array)\n\nmodel = NBeats(data=data, period_to_forecast=12)\nmodel.fit()\nforecast = model.predict()\n```\n\nOther optional parameters for the object of the model  (as described in the paper) can be tweaked for better performance. If these parameters are not passed, default values as mentioned in the table below are considered.\n\n#### Optional parameters\n| Parameter | Type | Default Value| Description|\n| ------ | ------ | --------------|------------|\n| backcast_length | integer | 3* period_to_forecast |Explained in the paper|\n| path | string | '  ' |path to save intermediate training checkpoint |\n| checkpoint_file_name | string | 'nbeats-training-checkpoint.th'| name for checkpoint file ending in format  .th |\n|mode| string| 'cpu'| Any of the torch.device modes|\n| batch_size | integer | len(data)/15 | size of batch|\n|  thetas_dims | list of integers | [7, 8] | Explained in the paper|\n| nb_blocks_per_stack | integer | 3| Explained in the paper|\n| share_weights_in_stack | boolean | False | Explained in the paper|\n| train_percent | float(below 1)  | 0.8 | Percentage of data to be used for training |\n| save_checkpoint| boolean | False | save intermediate checkpoint files|\n| hidden_layer_units | integer | 128 | hissen layer units|\n| stack | list of integers | [1,1] | adding stacks in the model as per the paper passed in list as integer. Mapping is as follows -- 1: GENERIC_BLOCK,  2: TREND_BLOCK , 3: SEASONALITY_BLOCK|\n\n\n#### Methods\n\n#### fit(epoch,optimiser,plot,verbose):\nThis method is used to train the model for number of gradient steps passed in the object of the model.\n\n###### Parameter - epoch : integer\n\nepoch is 100 * gradient steps. 25 epoch means 2500 weight updation steps.\nIf optimizer is not passed, default value is 25.\n\n###### Parameter - optimiser\n\noptimizer from torch.optim can be passed as a parameter by including model.parameters as the variable.\n\nExample: \n\nmodel.fit(epoch=5,optimiser=torch.optim.AdamW(model.parameters, lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=0.01, amsgrad=False))\n\nIf optimizer is not passed, default optimizer used is Adam.\n\n###### Parameter- plot : boolean\nDefault value - False\n\nIf True, plots during training are shown.\n\n###### Parameter- verbose : boolean\n\nDefault value - True\n\nIf True, training details are printed.\n\n#### predict(predict_data):\n\n###### Parameter - predict_data (optional) : numpy array of size backcast_length x 1\n\nIf predict_data is not passed, forecasted values returned will be continued from the last value of data passed in fit() during training.\n\n\n### UPDATE:\n##### Added functionality:\n##### Predicting for other data\n\nPassing predict_data:\n\nTo get predictions for the some other data from trained model, pass the predict_data as a numpy array of shape backcast_length x 1 (default value for backcast length is 3* preiod_to_forecast).\n\n#### Example:\nYou have trained a model for temperature forecast with hourly temperature data, period_to_forecast=4 and backcast_length=16 for Timestamp \"13-12-2019 08:00:00\" to \"31-12-2019 08:00:00\". \n\nNow you want to predict temperature from Timestamp \"14-01-2020 17:00:00\" using the trained model. You need to pass past data as predict_data with window equal to backcast_length(16 here). Here you need to pass values from \"14-01-2020 01:00:00\" to \"14-01-2020 16:00:00\"(16 values here) as numpy array of shape backcast_length x 1 (Here 16 x 1).\n\n\n \nReturns forecasted values.\n\n#### save(file):\nSaves the current step model after training. File needs to be passed a string. Format of the model to be saved is .th\n\nExample: model.save('model.th')\n\n#### load(file,optimizer):\n###### Parameter - file\nLoad the saved model with format .th \n\n###### Parameter - optimiser\n\noptimizer from torch.optim can be passed as a parameter by including model.parameters as the variable.\n\nExample: model.load('model.th')\n\n## EXAMPLES BELOW\n1. Model with a different optimiser and different stack is shown here.\n2. Predicting for other data\n3. Continue training via the saved file or retrain with new data(load saved model and retrain)\n4. Load saved model and predict with data\n\n\n### Example 1\nModel with a different optimiser and different stack is shown here.\n\nHere  2: TREND_BLOCK and 3: SEASONALITY_BLOCK stacks are used.\n```sh\nimport pandas as pd\nfrom nbeats_forecast import NBeats\nfrom torch import optim\n\ndata = pd.read_csv('data.csv')   \ndata = data.values #univariate time series data of shape nx1(numpy array)\n\nmodel=NBeats(data=data,period_to_forecast=12,stack=[2,3],nb_blocks_per_stack=3,thetas_dims=[2,8])\n\nmodel.fit(epoch=5,optimiser=optim.AdamW(model.parameters, lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=0.01, amsgrad=False))\n\nforecast=model.predict()\n```\n\n\n### Example 2\nPredicting for other data with backcast_length=12.\n\n```sh\nimport pandas as pd\nfrom nbeats_forecast import NBeats\nfrom torch import optim\n\ndata = pd.read_csv('new_data.csv')   \ndata = data.values #univariate time series data of shape nx1(numpy array)\n\nmodel=NBeats(data=data,period_to_forecast=12,stack=[2,3],nb_blocks_per_stack=3,thetas_dims=[2,8]) \n\nmodel.fit()\n\nlist1=[36.7,38.5,39.4,36.75,38,39,38,37.45,38,39,39.5,40]\npred=np.asarray(list1)\n\nforecast=model.predict(predict_data=pred)\n```\n\n### Example 3\nContinue training via the saved file or retrain with new data\n\n```sh\nimport pandas as pd\nfrom nbeats_forecast import NBeats\nfrom torch import optim\n\nnew_datdata = pd.read_csv('new_data.csv')   \ndata = data.values #univariate time series data of shape nx1(numpy array)\n\nmodel=NBeats(data=data,period_to_forecast=12,stack=[2,3],nb_blocks_per_stack=3,thetas_dims=[2,8]) \n# use same model definition as saved model\nmodel.load('nbeats.th',optimiser=optim.AdamW(model.parameters, lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=0.01, amsgrad=False))\n)\nmodel.fit()\n\n\nforecast=model.predict()\n```\n\n### Example 4\nLoad saved model and predict with data\n\n```sh\nfrom nbeats_forecast import NBeats\nimport numpy as np\n\n# use same model definition as saved model\nmodel=NBeats(period_to_forecast=4,stack=[2,3],nb_blocks_per_stack=3,thetas_dims=[2,8]) \n\nmodel.load(file='nbeats.th')\n\nlist1=[36.7,38.5,39.4,36.75,38,39,38,37.45,38,39,39.5,40]\npred=np.asarray(list1)\nforecast=model.predict(pred)\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/amitesh863/nbeats_forecast/archive/1.3.7.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/amitesh863/nbeats_forecast",
    "keywords": "nbeats,timeseries,forecast,nueral beats,univariate timeseries forecast ,timeseries forecast,univariate timeseries forecast",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nbeats-forecast",
    "package_url": "https://pypi.org/project/nbeats-forecast/",
    "platform": "",
    "project_url": "https://pypi.org/project/nbeats-forecast/",
    "project_urls": {
      "Download": "https://github.com/amitesh863/nbeats_forecast/archive/1.3.7.tar.gz",
      "Homepage": "https://github.com/amitesh863/nbeats_forecast"
    },
    "release_url": "https://pypi.org/project/nbeats-forecast/1.3.7/",
    "requires_dist": null,
    "requires_python": ">=3.6, <4",
    "summary": "This library uses nbeats-pytorch as base and simplifies the task of univariate time series forecasting using N-BEATS by providing a interface similar to scikit-learn and keras.",
    "version": "1.3.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7958726,
  "releases": {
    "1.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bb80799514d8afb2fcd029e9e049fd7c00dbe855ff8eb6a4028c0de3e853bfa",
          "md5": "50258a28cfb5753738e457454b9bdbdd",
          "sha256": "0103cda757e0160b2aba3ede65be8d6cb808d04eb46535a9bb81866cd51e8d4c"
        },
        "downloads": -1,
        "filename": "nbeats_forecast-1.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "50258a28cfb5753738e457454b9bdbdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6526,
        "upload_time": "2020-02-06T13:18:50",
        "upload_time_iso_8601": "2020-02-06T13:18:50.774790Z",
        "url": "https://files.pythonhosted.org/packages/1b/b8/0799514d8afb2fcd029e9e049fd7c00dbe855ff8eb6a4028c0de3e853bfa/nbeats_forecast-1.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e13d53e580b5e4c6f29f36ed8bd4a76f2b0c8be871cfb0527fffacb63ff9fd25",
          "md5": "a15f1ce53ad17f32fb5fb7765cecc4ef",
          "sha256": "9407a9ce5015db7e05b99933d8ad4a633521acb25fa7395c7ca89300976a7813"
        },
        "downloads": -1,
        "filename": "nbeats_forecast-1.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a15f1ce53ad17f32fb5fb7765cecc4ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 7634,
        "upload_time": "2020-08-14T08:27:26",
        "upload_time_iso_8601": "2020-08-14T08:27:26.282174Z",
        "url": "https://files.pythonhosted.org/packages/e1/3d/53e580b5e4c6f29f36ed8bd4a76f2b0c8be871cfb0527fffacb63ff9fd25/nbeats_forecast-1.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e13d53e580b5e4c6f29f36ed8bd4a76f2b0c8be871cfb0527fffacb63ff9fd25",
        "md5": "a15f1ce53ad17f32fb5fb7765cecc4ef",
        "sha256": "9407a9ce5015db7e05b99933d8ad4a633521acb25fa7395c7ca89300976a7813"
      },
      "downloads": -1,
      "filename": "nbeats_forecast-1.3.7.tar.gz",
      "has_sig": false,
      "md5_digest": "a15f1ce53ad17f32fb5fb7765cecc4ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 7634,
      "upload_time": "2020-08-14T08:27:26",
      "upload_time_iso_8601": "2020-08-14T08:27:26.282174Z",
      "url": "https://files.pythonhosted.org/packages/e1/3d/53e580b5e4c6f29f36ed8bd4a76f2b0c8be871cfb0527fffacb63ff9fd25/nbeats_forecast-1.3.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}