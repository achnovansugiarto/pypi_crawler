{
  "info": {
    "author": "Quantum Computer Architectures, Quantum & Computer Engineering, QuTech, Delft University of Technology",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# DQCsim OpenQL-mapper operator\n\n[![PyPi](https://badgen.net/pypi/v/dqcsim-openql-mapper)](https://pypi.org/project/dqcsim-openql-mapper/)\n\nSee also: [DQCsim](https://github.com/mbrobbel/dqcsim) and\n[OpenQL](https://github.com/QE-Lab/OpenQL/).\n\nThis repository contains some glue code to use the OpenQL Mapper as a DQCsim\noperator.\n\nNOTE: this only works on Linux. Your mileage may vary in general; try building\nand installing from source if installing through pip doesn't work.\n\n## Compile-time mapping (OpenQL) vs runtime mapping (DQCsim + OpenQL)\n\nIt is very important to note that DQCsim is a *simulator* framework, and\noperators are placed in the purely-quantum gatestream that results from\nexecuting any and all classical and mixed quantum-classical instructions, such\nas loops, if statements, and anything based on measurement results. This\nresults in two major differences between mapping a program with OpenQL and then\nsimulating versus using DQCsim to do it.\n\n - As a DQCsim operator, the mapper does not have access to the whole program\n   before it is executed; it can only see gates up to the first measurement.\n   This is because any subsequent gate may depend on the measurement result\n   through the classical instructions in the frontend; trying to receive gates\n   past this point may result in a deadlock. This may adversely affect the\n   quality of the mapping.\n\n - As a DQCsim operator, the mapper maps exactly the actually executed gates.\n   If you for instance have an if-else statement based on a measurement result,\n   the mapper will only see the block that was actually executed based on that\n   measurement. This also means that the virtual-to-physical mappings may\n   change based on the stochastic measurement results from the quantum\n   simulation. Furthermore, if you have a loop, the mapper will be invoked for\n   each loop iteration; this may make it significantly slower, but may in fact\n   improve the mapping result as the mapper doesn't need to insert swaps at\n   the end of the loop body to return to the mapping at the start of the loop.\n   The effect is as if all loops (even those with dynamic conditions) are\n   unrolled. Ultimately, these things should improve the mapping result as more\n   information is available, but may result in longer simulation times.\n\nThe computer engineers among us may note that this is exactly the difference\nbetween compile-time scheduling (including predication, loop unrolling, etc)\nand runtime scheduling (Tomasulo, speculation, etc.) in classical computer\narchitecture. Neither is necessarily better than the other, but the results\nare different. Please keep this in mind when evaluating the mapper results.\n\n## Installation\n\nInstallation is done through `pip`, even though this is largely not a Python\npackage. It's just convenient to use it regardlessly. Install as follows:\n\n    sudo pip3 install dqcsim-openql-mapper\n\nThis allows you to use the `openql-mapper` operator in DQCsim, and exposes the\n`platform2gates` command (more on this in a bit).\n\n### Local build/install from source using setup.py\n\nThis mimics a complete installation.\n\n    git clone https://github.com/QE-Lab/dqcsim-openql-mapper.git --recursive\n\nNote the `--recursive` there. A working version of OpenQL is included as a\nsubrepo; if you don't check out recursively (or init the subrepo afterwards)\ncompilation will fail.\n\n    export DQCSIM_DEBUG=yes # only if you want to do a debug instead of release build.\n    python3 setup.py build\n    python3 setup.py bdist_wheel\n\nYou'll have to uninstall the previous version (if any) before installation will\nwork:\n\n    sudo pip3 uninstall dqcsim-openql-mapper -y\n\nNow you can install:\n\n    sudo pip3 install target/python/dist/*\n\nNote that this wheel should NOT be distributed as is; it will probably only\nwork on your system. See release.md for info on complete release builds.\n\n### Build from source using CMake\n\nThe `setup.py` script simply defers to CMake for the build. So you can build\nwith any tool based on that for building as well. Your mileage may vary with\nthe install target though, it is not tested.\n\n### Running tests\n\nA very rudimentary test is included, which you can run using\n\n    python3 setup.py test\n\nThe test currently uses the INSTALLED operator. So you always need to reinstall\nfirst if you make changes!\n\n## Usage\n\nThis section assumes you know how DQCsim works. If you don't, start reading\n[here](https://mbrobbel.github.io/dqcsim/).\n\nTo use the `openql-mapper` operator you need two things:\n\n - an OpenQL platform description JSON file;\n - a DQCsim <-> OpenQL gatemap JSON file.\n\nThe former describes the quantum platform you're compiling for. I'm assuming\nyou already have it, considering you're trying to map an algorithm to some\narchitecture. If you don't, well, look for the relevant OpenQL documentation.\nProbably its source files.\n\nThe latter provides a mapping between DQCsim's gate format (based on\nnon-controlled submatrices and a number of control qubits) and OpenQL's format\n(based on names). Basically, it tells the operator what for instance a gate\nwith the name `\"prepz\"` means.\n\n### Initialization arbs\n\nIn order to tell the mapper where it should look for the JSON files, you have\nto either pass it some initialization arbs or set environment variables. Here's\nthe list of commands you can pass:\n\n - `openql_mapper.hardware_config`: specifies the hardware config JSON file.\n   The filename must be specified through the first binary string argument.\n\n - `openql_mapper.gatemap`: specifies the gatemap JSON file. The filename must\n   be specified through the first binary string argument.\n\n - `openql_mapper.option`: sets some OpenQL option (`ql::options::set()`). The\n   key is specified through the first binary string argument; the value through\n   the second. This command can be specified zero or more times.\n\nIf you're working from the command line, using environment variables is easier.\nThe following variables are queried if the above initialization arbs are\nmissing:\n\n - `DQCSIM_OPENQL_HARDWARE_CONFIG`: default path for the hardware config file.\n\n - `DQCSIM_OPENQL_GATEMAP`: default path for the gatemap config file.\n\n### Gatemap JSON files\n\nThe format of a gatemap JSON file is quite simple compared to the platform JSON\nfile. It's just a single object mapping from the OpenQL gate name to a DQCsim\ngate description. Like this:\n\n```json\n{\n    \"<openql-gate-1>\": \"<dqcsim-gate-1\",\n    \"<openql-gate-2>\": \"<dqcsim-gate-2\",\n    \"<openql-gate-3>\": \"<dqcsim-gate-3\"\n}\n```\n\nThe DQCsim gate description can be one of the following:\n\n - A dictionary with the entries described in the following sections;\n - A string, which is just a simplification of the above. If the string has\n   \"C-\" prefixes, they are counted and the result is mapped to the \"controlled\"\n   key; the remainder is interpreted as the type.\n\nMost of the time, the DQCsim gate descriptions are also just simple strings;\nyou should only have to write a more complicated description for exotic gates.\n\nTo get started quickly, you can use the `platform2gates` command-line tool to\nheuristically convert your platform JSON file into a gatemap file. Usually the\ntool will guess correctly, but it's worth checking the result even when it\nmanages to generate the complete file. If it doesn't recognize a gate, it just\noutputs a placeholder for you to fill in.\n\n#### File format\n\nAs stated, the file consists of a mapping from OpenQL gate names to DQCsim gate\ndescriptions. Such a description is one of the following:\n\n - A dictionary with the entries described in the following sections;\n - A string, which is just a simplification of the above. If the string has\n   \"C-\" prefixes, they are counted and the result is mapped to the \"controlled\"\n   key; the remainder is interpreted as the type.\n\n#### Types\n\nThe dictionary described above must contain at least a \"type\" key, mapping to\none of the following built-in strings (case-insensitive):\n\n - \"I\" - single-qubit identity gate.\n - \"X\" - Pauli X.\n - \"Y\" - Pauli Y.\n - \"Z\" - Pauli Z.\n - \"H\" - Hadamard.\n - \"S\" - 90-degree Z rotation.\n - \"S_DAG\" - -90-degree Z rotation.\n - \"T\" - 45-degree Z rotation.\n - \"T_DAG\" - -45-degree Z rotation.\n - \"RX_90\" - RX(90).\n - \"RX_M90\" - RX(-90).\n - \"RX_180\" - RX(180).\n - \"RX\" - RX gate with custom angle in radians.\n - \"RY_90\" - RY(90).\n - \"RY_M90\" - RY(-90).\n - \"RY_180\" - RY(180).\n - \"RY\" - RY gate with custom angle in radians.\n - \"RZ_90\" - RZ(90).\n - \"RZ_M90\" - RZ(-90).\n - \"RZ_180\" - RZ(180).\n - \"RZ\" - RZ gate with custom angle in radians.\n - \"PHASE\" - Z rotation with custom angle in radians, affecting the\n   bottom-right matrix entry only.\n   \"matrix\" or \"submatrix\" key.\n - \"SWAP\" - swap gate.\n - \"SQSWAP\" - square-root-of-swap gate.\n - \"unitary\" - custom unitary gate. Refer to the section on custom unitaries\n   for more info.\n - \"measure\" - measurement gate. Refer to the section on measurements for more\n   info.\n - \"prep\" - state preparation gate. Refer to the section on prep gates for more\n   info.\n\n#### Custom unitary gates\n\nThe \"unitary\" type allows you to specify the unitary matrix directly, using the\n\"matrix\" key. Matrices are specified as a list of lists, where each inner list\ncontains two float entries representing the real and imaginary value of the\nmatrix entry, and the outer list represents the matrix entries in row-major\nform. Integers are coerced to floats, so you can omit the decimal separator for\n-1, 0, and 1. The size of the matrix (plus the number of control qubits, if any -\nsee next section) implies the number of qubits affected by the gate. To prevent\nhaving to write out irrationals like 1/sqrt(2), the matrices will automatically\nbe normalized. After that, a unitary check is done to detect most typos.\n\nFor instance, RX(90) could be written like this:\n\n    {\n        \"type\": \"unitary\",\n        \"matrix\": [\n            [1,  0], [0, -1],\n            [0, -1], [1,  0]\n        ]\n    }\n\nIt becomes:\n\n                /  1  -i \\\n    1/sqrt(2) * |        |\n                \\ -i   1 /\n\nOf course, you can just use \"RX_90\" for this.\n\nDon't try to specify controlled gates by giving the full matrix, because then\nDQCsim won't detect them properly. Controlled gates are specified as follows.\n\n#### Controlled gates\n\nTo make controlled gates, the above predefined or custom matrices are\ninterpreted as the non-controlled submatrix, automatically extended for the\nnumber of control qubits specified in the \"controlled\" key, which must be a\npositive integer. If not specified, a non-controlled gate is implied. For\nexample,\n\n    {\n        \"controlled\": 1,\n        \"type\": \"X\",\n    }\n\nrepresents a CNOT gate. You can also use the \"C-\" shorthand in the string\nnotation to do this; just using \"C-X\" instead of the dictionary is equivalent.\n\nBeware the \"global\" phase of the submatrix; it matters due to DQCsim\nsynthesizing the controlled matrix by padding at the top-left side with the\nidentity matrix. This is why the difference between \"rz\" and \"phase\" exists.\n\n#### Measurements\n\n\"measure\" gates by default represent a measurement in the Z basis. You can\nspecify a different Pauli basis by supplying the \"basis\" key, which must then\nbe \"X\", \"Y\", or \"Z\". Alternatively, you can specify an arbitrary basis by\nspecifying a 2x2 matrix using \"matrix\". The operation then becomes equivalent\nto the following:\n\n - apply a unitary gate to the qubit defined by the Hermitian transpose of the\n   given matrix;\n - measure the qubit in the Z axis;\n - apply a unitary gate to the qubit defined by the given matrix.\n\n#### Prep gates\n\n\"prep\" gates, like measurements, default to the Z basis, accept a \"basis\" key\nto select a different Pauli basis, or accept a 2x2 matrix, making the operation\nequivalent to the following:\n\n - set the state of the qubit to |0>;\n - apply a unitary gate to the qubit defined by the given matrix.\n\n#### Example file\n\nHere's an example, generated from the QX platform file.\n\n```json\n{\n    \"prep_x\": {\n        \"type\": \"prep\",\n        \"basis\": \"x\"\n    },\n    \"prep_y\": {\n        \"type\": \"prep\",\n        \"basis\": \"y\"\n    },\n    \"prep_z\": \"prep\",\n    \"i\": \"I\",\n    \"h\": \"H\",\n    \"x\": \"X\",\n    \"y\": \"Y\",\n    \"z\": \"Z\",\n    \"x90\": \"RX_90\",\n    \"y90\": \"RY_90\",\n    \"x180\": \"RX_180\",\n    \"y180\": \"RY_180\",\n    \"mx90\": \"RX_M90\",\n    \"my90\": \"RY_M90\",\n    \"rx\": \"RZ\",\n    \"ry\": \"RY\",\n    \"rz\": \"RZ\",\n    \"s\": \"S\",\n    \"sdag\": \"S_DAG\",\n    \"t\": \"T\",\n    \"tdag\": \"T_DAG\",\n    \"cnot\": \"C-X\",\n    \"toffoli\": \"C-C-X\",\n    \"cz\": \"C-Z\",\n    \"swap\": \"SWAP\",\n    \"measure\": \"measure\",\n    \"measure_x\": {\n        \"type\": \"measure\",\n        \"basis\": \"x\"\n    },\n    \"measure_y\": {\n        \"type\": \"measure\",\n        \"basis\": \"y\"\n    },\n    \"measure_z\": \"measure\"\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/QE-Lab/dqcsim-openql-mapper",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dqcsim-openql-mapper",
    "package_url": "https://pypi.org/project/dqcsim-openql-mapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/dqcsim-openql-mapper/",
    "project_urls": {
      "Homepage": "https://github.com/QE-Lab/dqcsim-openql-mapper",
      "Source Code": "https://github.com/QE-Lab/dqcsim-openql-mapper"
    },
    "release_url": "https://pypi.org/project/dqcsim-openql-mapper/0.0.3/",
    "requires_dist": [
      "dqcsim (>=0.0.13)"
    ],
    "requires_python": "",
    "summary": "The OpenQL mapper wrapped in a DQCsim operator",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6499374,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9c268e15a2f001831f98bcd2acc405eb18c75b96fa930be96e72e10f4166536",
          "md5": "130bef489f0b467853ef1a5b0bc5e12b",
          "sha256": "66669cf2eb9c98423f2ff8b05acca81d057653abdffc6173f08a663f0e1aa3a8"
        },
        "downloads": -1,
        "filename": "dqcsim_openql_mapper-0.0.3-py35-none-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "130bef489f0b467853ef1a5b0bc5e12b",
        "packagetype": "bdist_wheel",
        "python_version": "py35",
        "requires_python": null,
        "size": 484609,
        "upload_time": "2020-01-22T09:41:35",
        "upload_time_iso_8601": "2020-01-22T09:41:35.700024Z",
        "url": "https://files.pythonhosted.org/packages/c9/c2/68e15a2f001831f98bcd2acc405eb18c75b96fa930be96e72e10f4166536/dqcsim_openql_mapper-0.0.3-py35-none-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8672907440a90c3f2c0079ead106d74b6f88363961ad180caa387e4ff22324dd",
          "md5": "807eb2236caed97be2a713248a3407a3",
          "sha256": "cee783efc3d070efb7beca20798de5d1967e5f6265450e1a1d6c86f32cd7a7e9"
        },
        "downloads": -1,
        "filename": "dqcsim_openql_mapper-0.0.3-py36-none-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "807eb2236caed97be2a713248a3407a3",
        "packagetype": "bdist_wheel",
        "python_version": "py36",
        "requires_python": null,
        "size": 484609,
        "upload_time": "2020-01-22T09:41:37",
        "upload_time_iso_8601": "2020-01-22T09:41:37.991112Z",
        "url": "https://files.pythonhosted.org/packages/86/72/907440a90c3f2c0079ead106d74b6f88363961ad180caa387e4ff22324dd/dqcsim_openql_mapper-0.0.3-py36-none-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2847823c2f337ba97e8c281e23ed6f55cfa8d6ec31a4d9aec371d416fa5e49a1",
          "md5": "25e029fddbcb7b16e0b87bbe96b0ea4c",
          "sha256": "f5d1b8dcb3fc410d25dcc9c48fa48b54385320acccef5134372a99a9bd01445c"
        },
        "downloads": -1,
        "filename": "dqcsim_openql_mapper-0.0.3-py37-none-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "25e029fddbcb7b16e0b87bbe96b0ea4c",
        "packagetype": "bdist_wheel",
        "python_version": "py37",
        "requires_python": null,
        "size": 484609,
        "upload_time": "2020-01-22T09:41:39",
        "upload_time_iso_8601": "2020-01-22T09:41:39.950776Z",
        "url": "https://files.pythonhosted.org/packages/28/47/823c2f337ba97e8c281e23ed6f55cfa8d6ec31a4d9aec371d416fa5e49a1/dqcsim_openql_mapper-0.0.3-py37-none-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79ef1d851be7a6a3b10c350f0915b9a3a51c79f8752ba8ef2642b72467580883",
          "md5": "4859ca956f0d72de8465ffed91473088",
          "sha256": "208d4342d6657639921c3dd834e0e02826dfd9962e6b806e523847713b053732"
        },
        "downloads": -1,
        "filename": "dqcsim_openql_mapper-0.0.3-py38-none-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "4859ca956f0d72de8465ffed91473088",
        "packagetype": "bdist_wheel",
        "python_version": "py38",
        "requires_python": null,
        "size": 484609,
        "upload_time": "2020-01-22T09:41:41",
        "upload_time_iso_8601": "2020-01-22T09:41:41.749424Z",
        "url": "https://files.pythonhosted.org/packages/79/ef/1d851be7a6a3b10c350f0915b9a3a51c79f8752ba8ef2642b72467580883/dqcsim_openql_mapper-0.0.3-py38-none-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53eb1339db8a41dca9204e1744a47f7e1a941ae42e3ccdcf2cdbab34a8318adc",
          "md5": "35d36212feacb1e8aa0eee13c0c22f67",
          "sha256": "4d8fea7c96280736633453387dd7fc7db952be71392d7b08af0c0e8bc56e5b68"
        },
        "downloads": -1,
        "filename": "dqcsim_openql_mapper-0.0.3-py3-none-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "35d36212feacb1e8aa0eee13c0c22f67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 484609,
        "upload_time": "2020-01-21T16:18:36",
        "upload_time_iso_8601": "2020-01-21T16:18:36.065981Z",
        "url": "https://files.pythonhosted.org/packages/53/eb/1339db8a41dca9204e1744a47f7e1a941ae42e3ccdcf2cdbab34a8318adc/dqcsim_openql_mapper-0.0.3-py3-none-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9c268e15a2f001831f98bcd2acc405eb18c75b96fa930be96e72e10f4166536",
        "md5": "130bef489f0b467853ef1a5b0bc5e12b",
        "sha256": "66669cf2eb9c98423f2ff8b05acca81d057653abdffc6173f08a663f0e1aa3a8"
      },
      "downloads": -1,
      "filename": "dqcsim_openql_mapper-0.0.3-py35-none-manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "130bef489f0b467853ef1a5b0bc5e12b",
      "packagetype": "bdist_wheel",
      "python_version": "py35",
      "requires_python": null,
      "size": 484609,
      "upload_time": "2020-01-22T09:41:35",
      "upload_time_iso_8601": "2020-01-22T09:41:35.700024Z",
      "url": "https://files.pythonhosted.org/packages/c9/c2/68e15a2f001831f98bcd2acc405eb18c75b96fa930be96e72e10f4166536/dqcsim_openql_mapper-0.0.3-py35-none-manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8672907440a90c3f2c0079ead106d74b6f88363961ad180caa387e4ff22324dd",
        "md5": "807eb2236caed97be2a713248a3407a3",
        "sha256": "cee783efc3d070efb7beca20798de5d1967e5f6265450e1a1d6c86f32cd7a7e9"
      },
      "downloads": -1,
      "filename": "dqcsim_openql_mapper-0.0.3-py36-none-manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "807eb2236caed97be2a713248a3407a3",
      "packagetype": "bdist_wheel",
      "python_version": "py36",
      "requires_python": null,
      "size": 484609,
      "upload_time": "2020-01-22T09:41:37",
      "upload_time_iso_8601": "2020-01-22T09:41:37.991112Z",
      "url": "https://files.pythonhosted.org/packages/86/72/907440a90c3f2c0079ead106d74b6f88363961ad180caa387e4ff22324dd/dqcsim_openql_mapper-0.0.3-py36-none-manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2847823c2f337ba97e8c281e23ed6f55cfa8d6ec31a4d9aec371d416fa5e49a1",
        "md5": "25e029fddbcb7b16e0b87bbe96b0ea4c",
        "sha256": "f5d1b8dcb3fc410d25dcc9c48fa48b54385320acccef5134372a99a9bd01445c"
      },
      "downloads": -1,
      "filename": "dqcsim_openql_mapper-0.0.3-py37-none-manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "25e029fddbcb7b16e0b87bbe96b0ea4c",
      "packagetype": "bdist_wheel",
      "python_version": "py37",
      "requires_python": null,
      "size": 484609,
      "upload_time": "2020-01-22T09:41:39",
      "upload_time_iso_8601": "2020-01-22T09:41:39.950776Z",
      "url": "https://files.pythonhosted.org/packages/28/47/823c2f337ba97e8c281e23ed6f55cfa8d6ec31a4d9aec371d416fa5e49a1/dqcsim_openql_mapper-0.0.3-py37-none-manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79ef1d851be7a6a3b10c350f0915b9a3a51c79f8752ba8ef2642b72467580883",
        "md5": "4859ca956f0d72de8465ffed91473088",
        "sha256": "208d4342d6657639921c3dd834e0e02826dfd9962e6b806e523847713b053732"
      },
      "downloads": -1,
      "filename": "dqcsim_openql_mapper-0.0.3-py38-none-manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "4859ca956f0d72de8465ffed91473088",
      "packagetype": "bdist_wheel",
      "python_version": "py38",
      "requires_python": null,
      "size": 484609,
      "upload_time": "2020-01-22T09:41:41",
      "upload_time_iso_8601": "2020-01-22T09:41:41.749424Z",
      "url": "https://files.pythonhosted.org/packages/79/ef/1d851be7a6a3b10c350f0915b9a3a51c79f8752ba8ef2642b72467580883/dqcsim_openql_mapper-0.0.3-py38-none-manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53eb1339db8a41dca9204e1744a47f7e1a941ae42e3ccdcf2cdbab34a8318adc",
        "md5": "35d36212feacb1e8aa0eee13c0c22f67",
        "sha256": "4d8fea7c96280736633453387dd7fc7db952be71392d7b08af0c0e8bc56e5b68"
      },
      "downloads": -1,
      "filename": "dqcsim_openql_mapper-0.0.3-py3-none-manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "35d36212feacb1e8aa0eee13c0c22f67",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 484609,
      "upload_time": "2020-01-21T16:18:36",
      "upload_time_iso_8601": "2020-01-21T16:18:36.065981Z",
      "url": "https://files.pythonhosted.org/packages/53/eb/1339db8a41dca9204e1744a47f7e1a941ae42e3ccdcf2cdbab34a8318adc/dqcsim_openql_mapper-0.0.3-py3-none-manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}