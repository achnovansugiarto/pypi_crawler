{
  "info": {
    "author": "Julin S",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n# colorviews\n\nA module to handle colors.\n\nInter-convert colors with and without alpha between RGB(A), HSL(A) and HSV(A) color schemes.\n\n---\n\n - Installation\n - [Quickstart](#quickstart)\n - Color objects\n   + Creating color objects\n   + Accessing color component values\n - AlphaColor objects\n   + Creating color objects\n   + Accessing color component values\n - Scaling color component values to int equivalent\n - Comparing colors\n - Duplicating or copying color objects\n - Caveats\n\n# Installation\nPython>=3.6 is needed for colorviews.\n\nCan be installed with pip from PyPI using\n\n```\npip install tzview\n```\n\n# Quickstart\nColors may be represented using `Color` (for colors without alpha value) and `AlphaColor` (for colors with alpha value) objects.\n\nAll colors are stored internally using their RGB(A) values and are converted to other color schemes when needed using appropriate ColorView objects.\n\n - `ColorViewRGB`: RGB color view for `Color` objects.\n - `ColorViewHSL`: HSL color view for `Color` objects.\n - `ColorViewHSV`: HSV color view for `Color` objects.\n - `ColorViewRGBA`: RGBA color view for `AlphaColor` objects.\n - `ColorViewHSLA`: HSLA color view for `AlphaColor` objects.\n - `ColorViewHSVA`: HSVA color view for `AlphaColor` objects.\n\nAll color component values are handled as float values between and including 0.0 and 1.0.\n\nThese float values may be converted to their integer equivalent using `scale()`function of the colorviews package.\n\n## Color objects\n`Color` objects can be store colors without alpha value.\n\n### Creating Color objects\n#### From color RGB integer value\nWith `Color.from_int(value: int)`.\n\n    from colorviews import Color\n    color = Color.from_int(0xabcdef)  # <Color(<Color(0xabcdef)>)>\n\n#### From color name\nWith `Color.from_name()`.\n\n[CSS3 extended color keywords](https://www.w3.org/wiki/CSS3/Color/Extended_color_keywords) are recognized.\n\nCase of the color name doesn't matter.\n\n    from colorviews import Color\n    color = Color.from_name(\"darkgrey\")  # <Color(0xa9a9a9)>\n\n#### From RGB values\nWith constructor or `Color.from_rgb(r: float, g: float, b: float)`.\n\n    from colorviews import Color\n    color = Color(0.2, 0.4, 0.8)  # <Color(0x3366cc)>\n    color = Color.from_rgb(0.2, 0.4, 0.8)  # <Color(0x3366cc)>\n\n#### From HSL values\nWith `Color.from_hsl(h: float, s: float, l: float)`.\n\n    from colorviews import Color\n    color = Color.from_hsl(0.5, 1.0, 0.52)  # <Color(0xaffff)>\n\n#### From HSV values\nWith `Color.from_hsv(h: float, s: float, v: float)`.\n\n    from colorviews import Color\n    color = Color.from_hsv(0.5, 1.0, 0.52)  # <Color(0x8585)>\n\n### Accessing color component values\n#### Hex value of color\n\n    from colorviews import Color\n    color = Color.from_int(0xabcdef)  # <Color(0xabcdef)>\n    hex(color)  # '0xabcdef'\n    str(color)  # 'abcdef'\n\n#### RGB color view\nRGB color view has the following attributes which may be read or written:\n\n - `r`: red component of RGB color value.\n - `g`: green component of RGB color value.\n - `b`: blue component of RGB color value.\n - `vals`: red, green and blue components as a tuple.\n\n```\nfrom colorviews import Color\ncolor = Color.from_int(0xabcdef)  # <Color(0xabcdef)>\n\n# Red component\ncolor.rgb.r  # 0.6705882352941176\n\n# Green component\ncolor.rgb.g  # 0.803921568627451\n\n# Blue component\ncolor.rgb.b  # 0.9372549019607843\n\n# All RGB components as a tuple\ncolor.rgb.vals  # (0.6705882352941176, 0.803921568627451,\n                #  0.9372549019607843)\n\n# New red component value\ncolor.rgb.r = 0.52\ncolor.rgb.vals  # (0.52, 0.803921568627451, 0.9372549019607843)\n\n# Change all RGB values\ncolor.rgb.vals = (0.25, 0.50, 0.75)\ncolor  # <Color(0x4080bf)>\n```\n\n#### HSL color view\nHSL color view has the following attributes which may be read or written:\n\n - `h`: hue component of HSL color value.\n - `s`: saturation component of HSL color value.\n - `l`: lightness component of HSL color value.\n - `vals`: hue, saturation and lightness components as a tuple.\n\n```\nfrom colorviews import Color\ncolor = Color.from_int(0xabcdef)  # <Color(0xabcdef)>\n\n# Hue component\ncolor.hsl.h  # 0.5833333333333334\n\n# Saturation component\ncolor.hsl.s  # 0.68\n\n# Lightness component\ncolor.hsl.l  # 0.803921568627451\n\n# All HSL components as a tuple\ncolor.hsl.vals  # (0.5833333333333334, 0.68, 0.803921568627451)\n\n# New saturation component value\ncolor.hsl.s = 0.87\ncolor.hsl.vals  # (0.5833333333333334, 0.8700000000000002, 0.68)\n\n# Change all HSL values\ncolor.hsl.vals = (0.25, 0.50, 0.75)\ncolor  # <Color(0xbfdf9f)>\n```\n\n#### HSV color view\nHSV color view has the following attributes which may be read or written:\n\n - `h`: hue component of HSV color value.\n - `s`: saturation component of HSV color value.\n - `v`: value component of HSV color value.\n - `vals`: hue, saturation and value components as a tuple.\n\n```\nfrom colorviews import Color\ncolor = Color.from_int(0xabcdef)  # <Color(0xabcdef)>\n\n# Hue component\ncolor.hsv.h  # 0.5833333333333334\n\n# Saturation component\ncolor.hsv.s  # 0.2845188284518829\n\n# Value component\ncolor.hsv.v  # 0.9372549019607843\n\n# All HSV components as a tuple\ncolor.hsv.vals\n# (0.5833333333333334, 0.2845188284518829, 0.9372549019607843)\n\n# New hue component value\ncolor.hsv.h = 0.82\ncolor.hsv.vals  # (0.82, 0.6799999999999992, 0.803921568627451)\n\n# Change all HSV values\ncolor.hsv.vals = (0.25, 0.50, 0.75)\ncolor  # <Color(0x8fbf60)>\n```\n\n## AlphaColor objects\n\n`AlphaColor` objects can be store colors with alpha value.\n\n### Creating AlphaColor objects\n#### From color name\nWith `AlphaColor.from_name()`.\n\n\n```\nfrom colorviews import AlphaColor\ncolor = AlphaColor.from_name(\"darkgrey\")  # <AlphaColor(0xa9a9a900)>\n```\n####  From RGBA values\nWith the constructor or `AlphaColor.from_rgba(r: float, g: float, b: float, a: float)`.\n\n```\nfrom colorviews import AlphaColor\ncolor = AlphaColor(0.2, 0.4, 0.8, 0.5)  # <AlphaColor(0x3366cc80)>\ncolor = AlphaColor.from_rgba(0.2, 0.4, 0.8, 0.75)  # <AlphaColor(0x3366ccbf)>\n```\n\n#### From color RGBA integer value\nWith `AlphaColor.from_int()`.\n\n```\nfrom colorviews import AlphaColor\ncolor = AlphaColor.from_int(0xabcdef80)  # <AlphaColor(0xabcdef80)>\n```\n\n#### From HSLA values\nWith `AlphaColor.from_hsla(h: float, s: float, l: float, a: float)`.\n\n```\nfrom colorviews import AlphaColor\ncolor = AlphaColor.from_hsla(0.5, 1.0, 0.52, 0.8)  # <AlphaColor(0xaffffcc)>\n```\n\n#### From HSVA values\nWith `Color.from_hsva(h: float, s: float, v: float, a: float)`.\n\n```\nfrom colorviews import AlphaColor\ncolor = AlphaColor.from_hsva(0.5, 1.0, 0.52, 0.8)  # <AlphaColor(0x8585cc)>\n```\n\n\n## Accessing color component values\n### Hex value of color\n\n```\nfrom colorviews import AlphaColor\ncolor = AlphaColor.from_int(0xabcdef80)  # <AlphaColor(0xabcdef80)>\nhex(color)  # '0xabcdef80'\nstr(color)  # 'abcdef80'\n```\n\n### RGBA color view\nRGBA color view has the following attributes which may be read or written:\n\n - `r`: red component of RGBA color value.\n - `g`: green component of RGBA color value.\n - `b`: blue component of RGBA color value.\n - `a`: alpha component of RGBA color value.\n - `vals`: red, green and blue components as a tuple.\n\n```\nfrom colorviews import AlphaColor\ncolor = AlphaColor.from_int(0xabcdef80)  # <AlphaColor(0xabcdef80)>\n\n# Red component\ncolor.rgba.r  # 0.6705882352941176\n\n# Green component\ncolor.rgba.g  # 0.803921568627451\n\n# Blue component\ncolor.rgba.b  # 0.9372549019607843\n\n# Alpha component\ncolor.rgba.a  # 0.5019607843137255\n\n# All RGBA components as a tuple\ncolor.rgba.vals\n# (0.6705882352941176, 0.803921568627451, 0.9372549019607843,\n#  0.5019607843137255)\n\n# New red component value\ncolor.rgba.r = 0.52\ncolor.rgba.vals  # (0.52, 0.803921568627451, 0.9372549019607843)\n\n# Change all RGBA values\ncolor.rgba.vals = (0.25, 0.50, 0.75, 0.2)\ncolor  # <AlphaColor(0x4080bf33)>\n```\n\n### HSLA color view\nHSLA color view has the following attributes which may be read or written:\n\n - `h`: hue component of HSLA color value.\n - `s`: saturation component of HSLA color value.\n - `l`: lightness component of HSLA color value.\n - `a`: alpha component of HSLA color value.\n - `vals`: hue, saturation and lightness components as a tuple.\n\n```\nfrom colorviews import AlphaColor\ncolor = AlphaColor.from_int(0xabcdef80)  # <AlphaColor(0xabcdef80)>\n\n# Hue component\ncolor.hsla.h  # 0.5833333333333334\n\n# Saturation component\ncolor.hsla.s  # 0.68\n\n# Lightness component\ncolor.hsla.l  # 0.803921568627451\n\n# Alpha component\ncolor.hsla.a  # 0.5019607843137255\n\n# All HSLA components as a tuple\ncolor.hsla.vals\n# (0.5833333333333334, 0.68, 0.803921568627451, 0.5019607843137255)\n\n# New lightness component value\ncolor.hsla.l = 0.24\ncolor.hsla.vals\n# (0.5833333333333334, 0.803921568627451, 0.24, 0.5019607843137255)\n\n# Change all HSLA values\ncolor.hsla.vals = (0.25, 0.50, 0.75, 0.2)\ncolor  # <AlphaColor(0xbfdf9f33)>\n```\n\n### HSVA color view\nHSVA color view has the following attributes which may be read or written:\n\n - `h`: hue component of HSVA color value.\n - `s`: saturation component of HSVA color value.\n - `v`: value component of HSVA color value.\n - `a`: alpha component of HSVA color value.\n - `vals`: hue, saturation and value components as a tuple.\n\n```\nfrom colorviews import AlphaColor\ncolor = AlphaColor.from_int(0xabcdef80)  # <AlphaColor(0xabcdef80)>\n\n# Hue component\ncolor.hsva.h  # 0.5833333333333334\n\n# Saturation component\ncolor.hsva.s  # 0.2845188284518829\n\n# Value component\ncolor.hsva.v  # 0.9372549019607843\n\n# Alpha component\ncolor.hsva.a  # 0.5019607843137255\n\n# All HSVA components as a tuple\ncolor.hsva.vals\n# (0.5833333333333334, 0.2845188284518829, 0.9372549019607843,\n#  0.5019607843137255)\n\n# New value (brightness) component value\ncolor.hsva.v = 0.11\ncolor.hsva.vals\n# (0.5833333333333334, 0.28451882845188287, 0.11, 0.5019607843137255)\n\n# Change all HSVA values\ncolor.hsva.vals = (0.25, 0.50, 0.75, 0.2)\ncolor  # <AlphaColor(0x8fbf6033)>\n```\n\n\n# Scaling color component values to int equivalent\n`scale()` function may be used to convert the color component values from float values to integer equivalent.\n\nIt multiplies a value with another scaling factor and returns this product value rounded off to the closest integer.\n\nFor example,\n\n```\nfrom colorviews import Color, AlphaColor, scale\ncolor = Color.from_int(0xabcdef)\nalphacolor = AlphaColor.from_int(0xabcdef80)\n\n# Unsigned integer values: [0.0, 1.0] -> [0, 255]\nred = [color.rgb.r, scale(color.rgb.r, 255)]\n# [0.6705882352941176, 171]\n\n# Percentage values: [0.0, 1.0] -> [0, 100]\nalpha = [alphacolor.hsla.a, scale(alphacolor.hsla.a, 100)]\n# [0.5019607843137255, 50]\n\n# Angle value in degrees: [0.0, 1.0] -> [0, 360)\nhue = [color.hsv.h, scale(color.hsv.h, 360)]\n# [0.5833333333333334, 210]\n```\n\n# Comparing colors\nColors can be compared using the usual comparison operators.\n\nComparions will done based on the integer RGB(A) values.\n\n```\ndarkred = Color.from_name(\"darkred\")  # <Color(0x8b0000)>\ncrimson = Color.from_name(\"crimson\")  # <Color(0xdc143c)>\ncrimson < darkred  # False\ncrimson > darkred  # True\ncrimson <= darkred  # False\ncrimson >= darkred  # True\ncrimson == darkred  # False\ncrimson != darkred  # True\n```\n\nLikewise with `AlphaColor`:\n\n```\nfaint_red = AlphaColor.from_name(\"red\", 0.5)  # <AlphaColor(0xff000080)>\nfainter_red = AlphaColor.from_name(\"red\", 0.2)  # <AlphaColor(0xff000033)>\nfaint_red < fainter_red  # False\nfaint_red > fainter_red  # True\n```\n\nBut comparison between a `Color` object and a `AlphaColor` object is not supported. Even when their RGB values match.\n\n```\nred_noalpha = Color.from_name(\"red\")  # <Color(0xff0000)>\nred_alpha = AlphaColor.from_name(\"red\")  # <AlphaColor(0xff0000)>\nred_noalpha < red_alpha  # Exception!\n```\n\n# Duplicating or copying color objects\n`copy()` method of the color classes can be used to duplicate a color object.\n\n```\n# Duplicating Color objects\ncolor = Color.from_int(0xabcdef)  # <Color(0xabcdef)>\ncolor_copy = color.copy()\nid(color_copy) != id(color)  # True\n\n# Duplicating AlphaColor objects\nalphacolor = AlphaColor.from_name(\"red\")  # <AlphaColor(0xff0000)>\nalphacolor_copy = alphacolor.copy()\nid(alphacolor_copy) != id(alphacolor)  # True\n```\n\n# Caveats\nThe color component values are stored internally as RGB(A) float values in the [0.0, 1.0] range.\n\nDepending on the way in which the color objects are created, there may be a slight difference in this RGB(A) values.\n\nFor example, consider two AlphaColor objects where one as is made using an integer value and the other is made using RGBA values as in\n\n```\nt1=cvs.AlphaColor.from_int(0xffffff80)  # <AlphaColor(0xffffff80)>\nt2=cvs.AlphaColor.from_rgba(1,1,1,0.5)  # <AlphaColor(0xffffff80)>\n```\n\nBoth `t1` and `t2` would have the same integer value.\n\n```\nt1 == t2  # True\n```\n\nBut their alpha values would be slighlty different.\n\n```\nt1.rgba.a  # 0.5019607843137255\nt2.rgba.a  # 0.5\n```\n\nThis is because the alpha value 0x80 being converted to its float equivalent like\n\n```\n0x80 / 0xff  # 0.5019607843137255\n```\n\n\n\n\n\n\n---\n\n\n\n\n# Long version\n\n## Color objects\nRepresents colors without alpha value.\n\nColor value is stored internally using RGB color scheme.\n\n```\nclass Color(red: float, green: float, blue: float)\n```\n\nArguments:\n\n - `r`: Value of red component.\n - `g`: Value of green component.\n - `b`: Value of blue component.\n\nAll arguments must have value between 0.0 and 1.0, inclusive of the limits.\n\n### Attributes\n\n - `rgb`: RGB color view. A `ColorViewRGB` object.\n - `hsl`: HSL color view. A `ColorViewHSL` object.\n - `hsv`: HSV color view. A `ColorViewHSV` object.\n\n### Methods\n\n#### `Color.from_int(value: int)`\n\nCreate a `Color` object using the RGB integer value of the color.\n\nArguments:\n\n - value: RGB integer value of color\n\nReturns: `Color` object whose RGB value is the given integer.\n\n#### `Color.from_name(name: str)`\n\nCreate a `Color` object using the color's name.\n\n[CSS3 extended color keywords](https://www.w3.org/wiki/CSS3/Color/Extended_color_keywords) are recognized.\n\nCase of the color name doesn't matter.\n\nArguments:\n\n - `name`: Name of the color\n\nReturns: `Color` object for color corresponding to given color name.\n\n#### `Color.from_rgb(r: float, g: float, b: float)`\n\nCreate a `Color` object from RGB values.\n\nSame as using the constructor of `Color`.\n\nArguments:\n\n - `r`: Value of red component.\n - `g`: Value of green component.\n - `b`: Value of blue component.\n\nReturns: `Color` object of given RGB value.\n\n\n#### `Color.from_hsl(h: float, s: float, l: float)`\n\nCreate a `Color` object from HSL values.\n\nArguments:\n\n - `h`: Value of hue component.\n - `s`: Value of saturation component.\n - `l`: Value of lightness component.\n\nReturns: `Color` object of given HSL value.\n\n\n#### `Color.from_hsv(h: float, s: float, v: float)`\n\nCreate a `Color` object from HSV values.\n\nArguments:\n\n - `h`: Value of hue component.\n - `s`: Value of saturation component.\n - `v`: Value of the value component.\n\nReturns: `Color` object of given HSV value.\n\n\n#### `Color.copy()`\n\nDuplicate the `Color` object.\n\nReturns: A separate copy of the `Color` object.\n\n\n## AlphaColor objects\nRepresents colors with alpha value.\n\nColor value is stored internally using RGBA color scheme.\n\n```\nclass AlphaColor(red: float, green: float, blue: float, alpha: float)\n```\n\nArguments:\n\n - `r`: Value of red component\n - `g`: Value of green component\n - `b`: Value of blue component\n - `a`: Value of alpha component\n\nAll arguments must have value between 0.0 and 1.0, inclusive of the limits.\n\n### Attributes\n\n - `rgba`: RGBA color view. A `ColorViewRGBA` object.\n - `hsla`: HSLA color view. A `ColorViewHSLA` object.\n - `hsva`: HSVA color view. A `ColorViewHSVA` object.\n\n### Methods\n\n#### `AlphaColor.from_int(value: int)`\n\nCreate an `AlphaColor` object using the RGBA integer value of the color.\n\nArguments:\n\n - `value`: RGBA integer value of color\n\nReturns: `AlphaColor` object whose RGBA value is the given integer.\n\n#### `AlphaColor.from_name(name: str, a: float = 0.0)`\n\nCreate an `AlphaColor` object with RGB values of the named color and given alpha value.\n\nAlpha value is 0.0 by default.\n\n[CSS3 extended color keywords](https://www.w3.org/wiki/CSS3/Color/Extended_color_keywords) are recognized.\n\nCase of the color name doesn't matter.\n\nArguments:\n\n - `name`: Name of the color\n - `a`: Alpha value of the color\n\nReturns: `AlphaColor` object for color corresponding to given color name and alpha value.\n\n#### `AlphaColor.from_rgba(r: float, g: float, b: float, a: float)`\n\nCreate an `AlphaColor` object from RGBA values.\n\nSame as using the constructor of `AlphaColor`.\n\nArguments:\n\n - `r`: Value of red component.\n - `g`: Value of green component.\n - `b`: Value of blue component.\n - `a`: Value of alpha component.\n\nReturns: `AlphaColor` object of given RGBA value.\n\n\n#### `AlphaColor.from_hsla(h: float, s: float, l: float, a: float)`\n\nCreate an `AlphaColor` object from HSLA values.\n\nArguments:\n\n - `h`: Value of hue component.\n - `s`: Value of saturation component.\n - `l`: Value of lightness component.\n - `a`: Value of alpha component.\n\nReturns: `AlphaColor` object of given HSLA value.\n\n\n#### `AlphaColor.from_hsva(h: float, s: float, v: float, a: float)`\n\nCreate an `AlphaColor` object from HSVA values.\n\nArguments:\n\n - `h`: Value of hue component.\n - `s`: Value of saturation component.\n - `v`: Value of the value component.\n - `a`: Value of alpha component.\n\nReturns: `AlphaColor` object of given HSVA value.\n\n\n#### `AlphaColor.copy()`\n\nDuplicate the `AlphaColor` object.\n\nReturns: A separate copy of the `AlphaColor` object.\n\n\n## ColorViewRGB objects\nRGB color view for `Color` objects.\n\n```\nclass ColorViewRGB(color: Color)\n```\n\nArguments:\n\n - `color`: `Color` object to be associated with the RGB view\n\n### Attributes\n\n - `r`: Red component of RGB value.\n - `g`: Green component of RGB value.\n - `b`: Blue component of RGB value.\n - `vals`: Red, green and blue component values as a tuple.\n - `color`: `Color` object associated with the RGB view.\n\n### Methods\n\n#### `ColorViewRGB.replace(r: float = None, g: float = None, b: float = None) -> Color`\n\nCreates a new `Color` object by replacing RGB components of the `Color` object associated with the RGB color view.\n\nArguments:\n\n - `r`: New value for red component.\n - `g`: New value for green component.\n - `b`: New value for blue component.\n\nReturns: A new `Color` object made by replacing RGB components of the `Color` object with given values.\n\n## ColorViewHSL objects\nHSL color view for `Color` objects.\n\n```\nclass ColorViewHSL(color: Color)\n```\n\nArguments:\n\n - `color`: `Color` object to be associated with the HSL view.\n\n### Attributes\n\n - `h`: Hue component of HSL value.\n - `s`: Saturation component of HSL value.\n - `l`: Lightness component of HSL value.\n - `vals`: Hue, saturation and lightness component values as a tuple.\n - `color`: `Color` object associated with the HSL view.\n\n### Methods\n\n#### `ColorViewHSL.replace(h: float = None, s: float = None, l: float = None) -> Color`\n\nCreates a new `Color` object by replacing HSL components of the `Color` object associated with the HSL color view.\n\nArguments:\n\n - `h`: New value for hue component.\n - `s`: New value for saturation component.\n - `l`: New value for lightness component.\n\nReturns: A new `Color` object made by replacing HSL components of the `Color` object with given values.\n\n## ColorViewHSV objects\nHSV color view for `Color` objects.\n\n```\nclass ColorViewHSV(color: Color)\n```\n\nArguments:\n\n - `color`: `Color` object to be associated with the HSV view.\n\n### Attributes\n\n - `h`: Hue component of HSV value.\n - `s`: Saturation component of HSV value.\n - `v`: Value component of HSV value.\n - `vals`: Hue, saturation and value component values as a tuple.\n - `color`: `Color` object associated with the HSV view.\n\n### Methods\n\n#### `ColorViewHSV.replace(h: float = None, s: float = None, v: float = None) -> Color`\n\nCreates a new `Color` object by replacing HSV components of the `Color` object associated with the HSV color view.\n\nArguments:\n\n - `h`: New value for hue component.\n - `s`: New value for saturation component.\n - `v`: New value for value component.\n\nReturns: A new `Color` object made by replacing HSV components of the `Color` object with given values.\n\n## ColorViewRGBA objects\nRGBA color view for `AlphaColor` objects.\n\n```\nclass ColorViewRGBA(color: AlphaColor)\n```\n\nArguments:\n\n - `color`: `AlphaColor` object to be associated with the RGBA view\n\n### Attributes\n\n - `r`: Red component of RGBA value.\n - `g`: Green component of RGBA value.\n - `b`: Blue component of RGBA value.\n - `a`: Alpha component of RGBA value.\n - `vals`: Red, green and blue component values as a tuple.\n - `color`: `AlphaColor` object associated with the RGBA view.\n\n### Methods\n\n#### `ColorViewRGBA.replace(r: float = None, g: float = None, b: float = None, a: float = None) -> AlphaColor`\n\nCreates a new `AlphaColor` object by replacing RGBA components of the `AlphaColor` object associated with the RGBA color view.\n\nArguments:\n\n - `r`: New value for red component.\n - `g`: New value for green component.\n - `b`: New value for blue component.\n - `a`: New value for alpha component.\n\nReturns: A new `AlphaColor` object made by replacing RGBA components of the `AlphaColor` object with given values.\n\n## ColorViewHSLA objects\nHSLA color view for `AlphaColor` objects.\n\n```\nclass ColorViewHSLA(color: AlphaColor)\n```\n\nArguments:\n\n - `color`: `AlphaColor` object to be associated with the HSLA view.\n\n### Attributes\n\n - `h`: Hue component of HSLA value.\n - `s`: Saturation component of HSLA value.\n - `l`: Lightness component of HSLA value.\n - `a`: Alpha component of HSLA value.\n - `vals`: Hue, saturation and lightness component values as a tuple.\n - `color`: `AlphaColor` object associated with the HSLA view.\n\n### Methods\n\n#### `ColorViewHSLA.replace(h: float = None, s: float = None, l: float = None, a: float = None) -> AlphaColor`\n\nCreates a new `AlphaColor` object by replacing HSLA components of the `AlphaColor` object associated with the HSLA color view.\n\nArguments:\n\n - `h`: New value for hue component.\n - `s`: New value for saturation component.\n - `l`: New value for lightness component.\n - `a`: New value for alpha component.\n\nReturns: A new `AlphaColor` object made by replacing HSLA components of the `AlphaColor` object with given values.\n\n## ColorViewHSVA objects\nHSVA color view for `AlphaColor` objects.\n\n```\nclass ColorViewHSVA(color: AlphaColor)\n```\n\nArguments:\n\n - `color`: `AlphaColor` object to be associated with the HSVA view.\n\n### Attributes\n\n - `h`: Hue component of HSVA value.\n - `s`: Saturation component of HSVA value.\n - `v`: Lightness component of HSVA value.\n - `a`: Alpha component of HSVA value.\n - `vals`: Hue, saturation and lightness component values as a tuple.\n - `color`: `AlphaColor` object associated with the HSVA view.\n\n### Methods\n\n#### `ColorViewHSVA.replace(h: float = None, s: float = None, v: float = None, a: float = None) -> AlphaColor`\n\nCreates a new `AlphaColor` object by replacing HSVA components of the `AlphaColor` object associated with the HSVA color view.\n\nArguments:\n\n - `h`: New value for hue component.\n - `s`: New value for saturation component.\n - `v`: New value for value component.\n - `a`: New value for alpha component.\n\nReturns: A new `AlphaColor` object made by replacing HSVA components of the `AlphaColor` object with given values.\n\n\n# Scaling float values to integers\n\n## `scale(val: float, multiplier: int) -> int`\n\nScales a value by a factor.\n\nMultiplies a value with a scaling factor and returns the product value rounded off to the closest integer.\n\nArguments:\n\n - `val`: Value to be scaled.\n - `factor`: Scaling factor.\n\nReturns: Integer closest to the product of `val` and `factor`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ju-sh/colorviews",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "colorviews",
    "package_url": "https://pypi.org/project/colorviews/",
    "platform": "",
    "project_url": "https://pypi.org/project/colorviews/",
    "project_urls": {
      "Changelog": "https://github.com/ju-sh/colorviews/blob/master/CHANGELOG.md",
      "Homepage": "https://github.com/ju-sh/colorviews",
      "Issue Tracker": "https://github.com/ju-sh/colorviews/issues"
    },
    "release_url": "https://pypi.org/project/colorviews/0.1a1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A simple module to handle colors",
    "version": "0.1a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10524230,
  "releases": {
    "0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40b60f35ef7f8530ef6678d24eac780d9224eab19639951b6bb4e4bb361506cd",
          "md5": "3aae9f5764fa6b67996bd9e34abb2950",
          "sha256": "d38a01c961a403dea3da92218cdd033848c6adfca0f0796e7d6e514ab4689ee3"
        },
        "downloads": -1,
        "filename": "colorviews-0.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3aae9f5764fa6b67996bd9e34abb2950",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12356,
        "upload_time": "2021-05-17T17:53:01",
        "upload_time_iso_8601": "2021-05-17T17:53:01.862920Z",
        "url": "https://files.pythonhosted.org/packages/40/b6/0f35ef7f8530ef6678d24eac780d9224eab19639951b6bb4e4bb361506cd/colorviews-0.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44840206b06031a8c1345ba340d8198798fe1b3d8fa7a9cf8afa57ad1d4f8722",
          "md5": "4dc740f7437247333fae6f14b5d4266c",
          "sha256": "97bf785b5f17b766adf4e74f9b73b7e55d02b832fd7769ec1e1708e2b0ad50cb"
        },
        "downloads": -1,
        "filename": "colorviews-0.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "4dc740f7437247333fae6f14b5d4266c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22079,
        "upload_time": "2021-05-17T17:53:05",
        "upload_time_iso_8601": "2021-05-17T17:53:05.934787Z",
        "url": "https://files.pythonhosted.org/packages/44/84/0206b06031a8c1345ba340d8198798fe1b3d8fa7a9cf8afa57ad1d4f8722/colorviews-0.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dd5841c1cfbc97f1980170579fa31a321765c0661165e2e6c7c531804cd562e",
          "md5": "21c3724ef2226371ce26b8ae4f307fca",
          "sha256": "752c120ac18470dff76b0c44c696d8a979980b1a26bad6d5aaecda91976ebe6c"
        },
        "downloads": -1,
        "filename": "colorviews-0.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21c3724ef2226371ce26b8ae4f307fca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12444,
        "upload_time": "2021-06-01T06:13:47",
        "upload_time_iso_8601": "2021-06-01T06:13:47.442675Z",
        "url": "https://files.pythonhosted.org/packages/0d/d5/841c1cfbc97f1980170579fa31a321765c0661165e2e6c7c531804cd562e/colorviews-0.1a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d558243712721e5866a44ae216d14b3a5fe9af9925325790d30f93a6cb0966ec",
          "md5": "28d73b5906e07e91b96b02d1ff0d4185",
          "sha256": "7aec1a4459e0281be011946415b2e95c72b319bcfc8eec540627493d12797ea1"
        },
        "downloads": -1,
        "filename": "colorviews-0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "28d73b5906e07e91b96b02d1ff0d4185",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22794,
        "upload_time": "2021-06-01T06:13:49",
        "upload_time_iso_8601": "2021-06-01T06:13:49.171657Z",
        "url": "https://files.pythonhosted.org/packages/d5/58/243712721e5866a44ae216d14b3a5fe9af9925325790d30f93a6cb0966ec/colorviews-0.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0dd5841c1cfbc97f1980170579fa31a321765c0661165e2e6c7c531804cd562e",
        "md5": "21c3724ef2226371ce26b8ae4f307fca",
        "sha256": "752c120ac18470dff76b0c44c696d8a979980b1a26bad6d5aaecda91976ebe6c"
      },
      "downloads": -1,
      "filename": "colorviews-0.1a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "21c3724ef2226371ce26b8ae4f307fca",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12444,
      "upload_time": "2021-06-01T06:13:47",
      "upload_time_iso_8601": "2021-06-01T06:13:47.442675Z",
      "url": "https://files.pythonhosted.org/packages/0d/d5/841c1cfbc97f1980170579fa31a321765c0661165e2e6c7c531804cd562e/colorviews-0.1a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d558243712721e5866a44ae216d14b3a5fe9af9925325790d30f93a6cb0966ec",
        "md5": "28d73b5906e07e91b96b02d1ff0d4185",
        "sha256": "7aec1a4459e0281be011946415b2e95c72b319bcfc8eec540627493d12797ea1"
      },
      "downloads": -1,
      "filename": "colorviews-0.1a1.tar.gz",
      "has_sig": false,
      "md5_digest": "28d73b5906e07e91b96b02d1ff0d4185",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22794,
      "upload_time": "2021-06-01T06:13:49",
      "upload_time_iso_8601": "2021-06-01T06:13:49.171657Z",
      "url": "https://files.pythonhosted.org/packages/d5/58/243712721e5866a44ae216d14b3a5fe9af9925325790d30f93a6cb0966ec/colorviews-0.1a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}