{
  "info": {
    "author": "Karol Zak",
    "author_email": "karol.zak@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![CI Build](https://github.com/karolzak/boxdetect/workflows/CI%20Build/badge.svg)](https://github.com/karolzak/boxdetect/actions?query=workflow%3A%22CI+Build%22)\n[![PyPI - Version](https://img.shields.io/pypi/v/boxdetect.svg \"PyPI version\")](https://pypi.org/project/boxdetect/) \n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/boxdetect)](https://pypi.org/project/boxdetect/)\n[![Downloads](https://pepy.tech/badge/boxdetect)](https://pepy.tech/project/boxdetect)\n[![Downloads/Month](https://pepy.tech/badge/boxdetect/month)](https://pepy.tech/project/boxdetect/month)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/karolzak/boxdetect/blob/master/LICENSE)\n\n**Share:**  \n[![Twitter URL](https://img.shields.io/twitter/url?url=https%3A%2F%2Fgithub.com%2karolzak%2Fboxdetect)](http://twitter.com/share?text=Check%20out%20BoxDetect%20Python%20package%20which%20helps%20you%20extract%20rectangular%20boxes%20from%20images&url=https://github.com/karolzak/boxdetect/&hashtags=python,computervision,boxesdetection,shapesdetection,opencv)\n[![LinkedIn URL](https://raw.githubusercontent.com/karolzak/boxdetect/master/images/linkedin_share4.png)](http://www.linkedin.com/shareArticle?mini=true&url=https://github.com/karolzak/boxdetect&title=Boxdetect%20python%20package)\n\n\n**BoxDetect** is a Python package based on OpenCV which allows you to easily detect rectangular shapes like character or checkbox boxes on scanned forms.\n\nMain purpose of this library is to provide helpful functions for processing document images like bank forms, applications, etc. and extract regions where character boxes or tick/check boxes are present.\n\n![](https://raw.githubusercontent.com/karolzak/boxdetect/master/images/example1.png)\n\n## Features\n- `boxdetect.pipelines.get_boxes` - basic pipeline for boxes extraction\n- `boxdetect.pipelines.get_checkboxes` - pipeline which returns only the checkboxes with simple estimation of the state (checked/unchecked)\n- `boxdetect.config.PipelinesConfig` - advanced config class used to run pipelines\n- `boxdetect.config.PipelinesConfig.save_yaml/load_yaml` - allows to save and load configs into and from yaml files\n- `boxdetect.config.PipelinesConfig.autoconfigure` - simple mechanism to automatically set config based on box sizes list you're looking for\n- `boxdetect.config.PipelinesConfig.autoconfigure_from_vott` - automatically sets up config based on ground truth/annotation json files from [VoTT](https://github.com/microsoft/VoTT)\n- `boxdetect.img_proc` and `boxdetect.rect_proc` - utility functions which can be used to build custom pipelines\n\n## Getting Started\n\nCheckout [usage examples below](#Usage-examples) to get a better understanding of how it works or go to [get-started-pipelines.ipynb](https://github.com/karolzak/boxdetect/blob/master/notebooks/get-started-pipelines.ipynb) and [get-started-autoconfig.ipynb](https://github.com/karolzak/boxdetect/blob/master/notebooks/get-started-autoconfig.ipynb) notebooks which holds step by step examples for using **BoxDetect** with premade `boxdetect.pipelines` functions.\n\n## Installation\n\n**BoxDetect** can be installed directly from this repo using `pip`:\n\n```\npip install git+https://github.com/karolzak/boxdetect\n```\n\nor through [PyPI](https://pypi.org/project/boxdetect/)\n\n```\npip install boxdetect\n```\n\n# Usage examples\n\nYou can use `BoxDetect` either by leveraging one of the pre-made pipelines or by treating `BoxDetect` functions as your toolbox to compose your own pipelines that fits your needs perfectly.\n\n- [Using pre-made pipelines](#using-boxdetectpipelines)  \n    - [Detecting boxes and grouping them together with `boxdetect.pipelines.get_boxes`](#Detect-character-boxes-and-group-them-together)  \n    - [Changing `group_size_range` param to highlight checkboxes](#highlighting-just-the-checkboxes)  \n    - [Using `boxdetect.pipelines.get_checkboxes` to retrieve checkboxes and their values](#using-boxdetectpipelinesget_checkboxes-to-retrieve-and-recognize-just-the-checkboxes)  \n    - [Using `boxdetect.config.PipelinesConfig.autoconfigure` to setup a config params based on the box sizes list](#using-boxdetectconfigpipelinesconfigautoconfigure-to-quickly-and-easily-setup-a-config-params-based-on-the-box-sizes-list)  \n    - [Using `boxdetect.config.PipelinesConfig.autoconfigure_from_vott` to setup a config params based on the annotated ground truth](#using-boxdetectconfigpipelinesconfigautoconfigure_from_vott-to-quickly-and-easily-setup-a-config-params-based-on-the-annotated-ground-truth)  \n    - [Saving and loading configuration to and from `yaml` files](#Saving-and-loading-configuration-to-and-from-yaml-files)  \n\n\n## Using `boxdetect.pipelines`\n\n### Detect character boxes and group them together\n[[back to usage examples]](#usage-examples)\n\nStart with getting the default `PipelinesConfig` and adjusting it for your requirements and data:\n```python\nfrom boxdetect import config\n\nfile_name = 'form_example1.png'\n\ncfg = config.PipelinesConfig()\n\n# important to adjust these values to match the size of boxes on your image\ncfg.width_range = (30,55)\ncfg.height_range = (25,40)\n\n# the more scaling factors the more accurate the results but also it takes more time to processing\n# too small scaling factor may cause false positives\n# too big scaling factor will take a lot of processing time\ncfg.scaling_factors = [0.7]\n\n# w/h ratio range for boxes/rectangles filtering\ncfg.wh_ratio_range = (0.5, 1.7)\n\n# group_size_range starting from 2 will skip all the groups\n# with a single box detected inside (like checkboxes)\ncfg.group_size_range = (2, 100)\n\n# num of iterations when running dilation tranformation (to engance the image)\ncfg.dilation_iterations = 0\n```\n\nAs a second step simply run:\n```python\nfrom boxdetect.pipelines import get_boxes\n\nrects, grouping_rects, image, output_image = get_boxes(\n    file_name, cfg=cfg, plot=False)\n```\n\nEach of the returned elements in `grouping_rects` are rectangular bounding boxes representing grouped character boxes (x, y, w, h)\n```python\nprint(grouping_rects)\n\nOUT:\n# (x, y, w, h)\n[(276, 276, 1221, 33),\n (324, 466, 430, 33),\n (384, 884, 442, 33),\n (985, 952, 410, 32),\n (779, 1052, 156, 33),\n (253, 1256, 445, 33)]\n```\nDisplay output image with bounding rectangles drawn on it\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,20))\nplt.imshow(output_image)\nplt.show()\n```\n\n![](https://raw.githubusercontent.com/karolzak/boxdetect/master/images/example1.png)\n\n### Highlighting just the checkboxes\n[[back to usage examples]](#usage-examples)\n\nAnd if you would like to highlight only the checkboxes you just need to change a single parameter:\n```python\n# limit down the grouping algorithm to just singular boxes (e.g. checkboxes)\ncfg.group_size_range = (1, 1)\n```\n\n![](https://raw.githubusercontent.com/karolzak/boxdetect/master/images/checkbox-example.jpg)\n\n### Using `boxdetect.pipelines.get_checkboxes` to retrieve and recognize just the checkboxes\n[[back to usage examples]](#usage-examples)\n\nAssuming we're using the same image and config is already adjusted ([look above](#Detect-character-boxes-and-group-them-together)) we just need to run:\n\n```python\nfrom boxdetect.pipelines import get_checkboxes\n\ncheckboxes = get_checkboxes(\n    file_path, cfg=cfg, px_threshold=0.1, plot=False, verbose=True)\n```\nIf `verbose=True` it will print out bunch of details of checkboxes being detected and estimation being made about their state:\n```\nProcessing file:  ../images/form_example1.png\n----------------------------------\nnonzero_px_count:  3\nall_px_count:  858\nnonzero_px_count / all_px_count =  0.0034965034965034965\n----------------------------------\n----------------------------------\nnonzero_px_count:  363\nall_px_count:  858\nnonzero_px_count / all_px_count =  0.4230769230769231\n----------------------------------\n```\n\nNow looking into the details of our results:\n```python\nprint(\"Output object type: \", type(checkboxes))\nfor checkbox in checkboxes:\n    print(\"Checkbox bounding rectangle (x,y,width,height): \", checkbox[0])\n    print(\"Result of `contains_pixels` for the checkbox: \", checkbox[1])\n    print(\"Display the cropout of checkbox:\")\n    plt.figure(figsize=(1,1))\n    plt.imshow(checkbox[2])\n    plt.show()\n```\nWe should see the following:\n\n![](https://raw.githubusercontent.com/karolzak/boxdetect/master/images/checkboxes-details.jpg)\n\n\n### Using `boxdetect.config.PipelinesConfig.autoconfigure` to quickly and easily setup a config params based on the box sizes list\n[[back to usage examples]](#usage-examples)\n\nBoxDetect allows you to provide a list of sizes (h, w) of boxes which you are interested in and based on that list it would automatically set up the config to detect those.\n\n```python\nfrom boxdetect import config\n\ncfg = config.PipelinesConfig()\n\n# The values I'm providing below is a list of box sizes I'm interested in and want to focus on\n# [(h, w), (h, w), ...]\ncfg.autoconfigure([(46, 46), (44, 43)])\n```\n\nAnd after doing that you can use any of the `boxdetect.pipelines` functions as bellow:\n\n```python\nfrom boxdetect.pipelines import get_checkboxes\n\ncheckboxes = get_checkboxes(file_path, cfg=cfg, plot=False)\n```\n\n### Using `boxdetect.config.PipelinesConfig.autoconfigure_from_vott` to quickly and easily setup a config params based on the annotated ground truth\n[[back to usage examples]](#usage-examples)\n\nAnother option is to use ground truth annotations from VoTT.  \nCheck VoTT repo and docs on how to create a new project and start labelling your data: https://github.com/microsoft/VoTT\n\nFor this example I used VoTT to label my input image and my VoTT project looks somewhat like that:\n\n![](https://raw.githubusercontent.com/karolzak/boxdetect/master/images/vott1.JPG)\n\nIn principle you only need to mark a single box for each different size however the more boxes you will annotate - the more accurate the results should be.\n\n```python\nfrom boxdetect import config\n\ncfg = config.PipelinesConfig()\n\ncfg.autoconfigure_from_vott(\n    vott_dir=\"../tests/data/autoconfig_simple\", class_tags=[\"box\"])\n```\n\nAnd after doing that you can use any of the `boxdetect.pipelines` functions as bellow:\n\n```python\nfrom boxdetect.pipelines import get_checkboxes\n\ncheckboxes = get_checkboxes(file_path, cfg=cfg, plot=False)\n```\n\n### Saving and loading configuration to and from `yaml` files\n[[back to usage examples]](#usage-examples)\n\nIf you want to save a specific configuration for later reusability or automation purposes you can do so by using `PipelinesConfig` functions: `save_yaml` and `load_yaml` like below:\n\n```python\nfrom boxdetect import config\n\ncfg = config.PipelinesConfig()\ncfg.morph_kernels_thickness = 10\ncfg.save_yaml('test_cfg.yaml')\n\ncfg2.load_yaml('test_cfg.yaml')\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/karolzak/boxdetect",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "boxdetect",
    "package_url": "https://pypi.org/project/boxdetect/",
    "platform": null,
    "project_url": "https://pypi.org/project/boxdetect/",
    "project_urls": {
      "Homepage": "http://github.com/karolzak/boxdetect"
    },
    "release_url": "https://pypi.org/project/boxdetect/1.0.2/",
    "requires_dist": [
      "opencv-python",
      "numpy",
      "imutils",
      "pyyaml",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "boxdetect is a Python package based on OpenCV which allows you to easily detect rectangular shapes like characters boxes on scanned forms.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16477743,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "719043bb5f914350fab6d705ad9881fa39134e897b1b636cdd384325ab7eab10",
          "md5": "6208797c9f3813b87bacc48b49db2e61",
          "sha256": "aa1b592e953b9d09adb26987a53a4c049c01c0ff4ea7232b5b9e16107588d76e"
        },
        "downloads": -1,
        "filename": "boxdetect-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6208797c9f3813b87bacc48b49db2e61",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7272,
        "upload_time": "2020-06-04T12:20:20",
        "upload_time_iso_8601": "2020-06-04T12:20:20.823592Z",
        "url": "https://files.pythonhosted.org/packages/71/90/43bb5f914350fab6d705ad9881fa39134e897b1b636cdd384325ab7eab10/boxdetect-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6409ee937df78b0bb7bb5c113db6f4b4ffa2760a278ff9596097340cf3b88597",
          "md5": "e9ff528f7216c06b1a5fbcc2ef99dae3",
          "sha256": "56eedaf6e6faca861f4d2accec877f60aa3be4d9033b1fd3a1a7a0d8672df899"
        },
        "downloads": -1,
        "filename": "boxdetect-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e9ff528f7216c06b1a5fbcc2ef99dae3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5824,
        "upload_time": "2020-06-04T12:20:22",
        "upload_time_iso_8601": "2020-06-04T12:20:22.823200Z",
        "url": "https://files.pythonhosted.org/packages/64/09/ee937df78b0bb7bb5c113db6f4b4ffa2760a278ff9596097340cf3b88597/boxdetect-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4963ce53af804125ebd28279f82b7ea9a8db1c4b2f919490150eea97e9ce34f6",
          "md5": "ea9c19f8eaa96e1594a3bb6b10e0e703",
          "sha256": "1e555531009afd3d0f4bc910112dfc147fa6e1e5edb17a673988eb1561b711fd"
        },
        "downloads": -1,
        "filename": "boxdetect-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea9c19f8eaa96e1594a3bb6b10e0e703",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7259,
        "upload_time": "2020-06-05T08:44:21",
        "upload_time_iso_8601": "2020-06-05T08:44:21.360382Z",
        "url": "https://files.pythonhosted.org/packages/49/63/ce53af804125ebd28279f82b7ea9a8db1c4b2f919490150eea97e9ce34f6/boxdetect-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e665c17b881c215c82c836823151a7c1bde58493be11faa123caa8d919fc34ff",
          "md5": "3880b90da9f0d5817d8b34593fa5e70e",
          "sha256": "6bd7f52d22dd2e09793b3abdd217da3d1433eac418d1dc593fec2ca2a3a1fed8"
        },
        "downloads": -1,
        "filename": "boxdetect-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3880b90da9f0d5817d8b34593fa5e70e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5829,
        "upload_time": "2020-06-05T08:44:23",
        "upload_time_iso_8601": "2020-06-05T08:44:23.036942Z",
        "url": "https://files.pythonhosted.org/packages/e6/65/c17b881c215c82c836823151a7c1bde58493be11faa123caa8d919fc34ff/boxdetect-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fc91e408cf9ca6c106b46021b6c12e5a89b55802e1f8419a5e1cbbc26a151c8",
          "md5": "287c5961175b9b9e954b26bdebd73774",
          "sha256": "4aefcbd9b1ef680aad1db52a46546fc66d1b761e955202dc783518fb18ee85f6"
        },
        "downloads": -1,
        "filename": "boxdetect-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "287c5961175b9b9e954b26bdebd73774",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18061,
        "upload_time": "2020-07-16T06:26:04",
        "upload_time_iso_8601": "2020-07-16T06:26:04.906024Z",
        "url": "https://files.pythonhosted.org/packages/5f/c9/1e408cf9ca6c106b46021b6c12e5a89b55802e1f8419a5e1cbbc26a151c8/boxdetect-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c1068b96956218a63ceb129acdb86fd1cb0a54f3f41f7d94061d73de7e36571",
          "md5": "ebe6c667cd4ecc297a3bdfff8246d854",
          "sha256": "99896a083310ad5421e6488dfac2f8b73b9df5e2757ffd4062c70115341c2c8e"
        },
        "downloads": -1,
        "filename": "boxdetect-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ebe6c667cd4ecc297a3bdfff8246d854",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19042,
        "upload_time": "2020-07-16T06:26:06",
        "upload_time_iso_8601": "2020-07-16T06:26:06.734484Z",
        "url": "https://files.pythonhosted.org/packages/8c/10/68b96956218a63ceb129acdb86fd1cb0a54f3f41f7d94061d73de7e36571/boxdetect-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbb3045fb194fa719b53a610273b8b0b1cd0d14083d008dc58899e3a511f84b5",
          "md5": "459e0f64957fa44bbefdcb70cdb5a198",
          "sha256": "4eaa4aa02da31b5ed4d7f16b28faabc49cafe59c706be0d5b87130468d9a7e89"
        },
        "downloads": -1,
        "filename": "boxdetect-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "459e0f64957fa44bbefdcb70cdb5a198",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18103,
        "upload_time": "2022-12-27T03:57:59",
        "upload_time_iso_8601": "2022-12-27T03:57:59.240093Z",
        "url": "https://files.pythonhosted.org/packages/cb/b3/045fb194fa719b53a610273b8b0b1cd0d14083d008dc58899e3a511f84b5/boxdetect-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10cef4349718a00cec0308a55422ff48aed4c87989820005d55f0a1997319207",
          "md5": "1de90650a077b5ba29886f5de03b786f",
          "sha256": "de6449370259c400238a7d0b7151d9176970bc059eaa35c021bbc7711ab1bf60"
        },
        "downloads": -1,
        "filename": "boxdetect-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1de90650a077b5ba29886f5de03b786f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19274,
        "upload_time": "2022-12-27T03:58:00",
        "upload_time_iso_8601": "2022-12-27T03:58:00.772753Z",
        "url": "https://files.pythonhosted.org/packages/10/ce/f4349718a00cec0308a55422ff48aed4c87989820005d55f0a1997319207/boxdetect-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcbba7c6080c10c35af3392e383ade955eeda3adc719e6763e1c31f79a730865",
          "md5": "5cb255474d1774ca5a0ce64dd32da584",
          "sha256": "2be75fe6194f9c6c146c028fe096a9991f929ccadb3d21ec2dc6f49bd4ac384c"
        },
        "downloads": -1,
        "filename": "boxdetect-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cb255474d1774ca5a0ce64dd32da584",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18125,
        "upload_time": "2023-01-18T23:27:56",
        "upload_time_iso_8601": "2023-01-18T23:27:56.213279Z",
        "url": "https://files.pythonhosted.org/packages/bc/bb/a7c6080c10c35af3392e383ade955eeda3adc719e6763e1c31f79a730865/boxdetect-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93cce3772109a295a719b52c0a4a625a7c1e8f6eaef759551f116b155c4fab5d",
          "md5": "24781d80f6f929e0ef9b4e2eb66a9f58",
          "sha256": "07bef139176c2291bb252a0d1489ef71fca89ac5776318567c823731f0d1ae43"
        },
        "downloads": -1,
        "filename": "boxdetect-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "24781d80f6f929e0ef9b4e2eb66a9f58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19299,
        "upload_time": "2023-01-18T23:27:58",
        "upload_time_iso_8601": "2023-01-18T23:27:58.156739Z",
        "url": "https://files.pythonhosted.org/packages/93/cc/e3772109a295a719b52c0a4a625a7c1e8f6eaef759551f116b155c4fab5d/boxdetect-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcbba7c6080c10c35af3392e383ade955eeda3adc719e6763e1c31f79a730865",
        "md5": "5cb255474d1774ca5a0ce64dd32da584",
        "sha256": "2be75fe6194f9c6c146c028fe096a9991f929ccadb3d21ec2dc6f49bd4ac384c"
      },
      "downloads": -1,
      "filename": "boxdetect-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5cb255474d1774ca5a0ce64dd32da584",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18125,
      "upload_time": "2023-01-18T23:27:56",
      "upload_time_iso_8601": "2023-01-18T23:27:56.213279Z",
      "url": "https://files.pythonhosted.org/packages/bc/bb/a7c6080c10c35af3392e383ade955eeda3adc719e6763e1c31f79a730865/boxdetect-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93cce3772109a295a719b52c0a4a625a7c1e8f6eaef759551f116b155c4fab5d",
        "md5": "24781d80f6f929e0ef9b4e2eb66a9f58",
        "sha256": "07bef139176c2291bb252a0d1489ef71fca89ac5776318567c823731f0d1ae43"
      },
      "downloads": -1,
      "filename": "boxdetect-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "24781d80f6f929e0ef9b4e2eb66a9f58",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19299,
      "upload_time": "2023-01-18T23:27:58",
      "upload_time_iso_8601": "2023-01-18T23:27:58.156739Z",
      "url": "https://files.pythonhosted.org/packages/93/cc/e3772109a295a719b52c0a4a625a7c1e8f6eaef759551f116b155c4fab5d/boxdetect-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}