{
  "info": {
    "author": "Robert Tjarko Lange",
    "author_email": "robertlange0@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<h1 align=\"center\">\n  <a href=\"https://github.com/RobertTLange/gymnax/blob/main/docs/logo.png\">\n    <img src=\"https://github.com/RobertTLange/gymnax/blob/main/docs/logo.png?raw=true\" width=\"215\" /></a><br>\n  <b>Reinforcement Learning Environments in JAX üåç</b><br>\n</h1>\n\n<p align=\"center\">\n      <a href=\"https://pypi.python.org/pypi/gymnax\">\n        <img src=\"https://img.shields.io/pypi/pyversions/gymnax.svg?style=flat-square\" /></a>\n       <a href= \"https://badge.fury.io/py/gymnax\">\n        <img src=\"https://badge.fury.io/py/gymnax.svg\" /></a>\n       <a href= \"https://github.com/RobertTLange/gymnax/blob/master/LICENSE.md\">\n        <img src=\"https://img.shields.io/badge/license-Apache2.0-blue.svg\" /></a>\n       <a href= \"https://codecov.io/gh/RobertTLange/gymnax\">\n        <img src=\"https://codecov.io/gh/RobertTLange/gymnax/branch/main/graph/badge.svg?token=OKKPDRIQJR\" /></a>\n       <a href= \"https://github.com/psf/black\">\n        <img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" /></a>\n</p>\n\nAre you fed up with slow CPU-based RL environment processes? Do you want to leverage massive vectorization for high-throughput RL experiments? `gymnax` brings the power of `jit` and `vmap`/`pmap` to the classic gym API. It supports a range of different environments including [classic control](https://github.com/openai/gym/tree/master/gym/envs/classic_control), [bsuite](https://github.com/deepmind/bsuite), [MinAtar](https://github.com/kenjyoung/MinAtar/) and a collection of classic/meta RL tasks. `gymnax` allows explicit functional control of environment settings (random seed or hyperparameters), which enables accelerated & parallelized rollouts for different configurations (e.g. for meta RL). By executing both environment and policy on the accelerator, it facilitates the Anakin sub-architecture proposed in the Podracer paper [(Hessel et al., 2021)](https://arxiv.org/pdf/2104.06272.pdf) and highly distributed evolutionary optimization (using e.g. [`evosax`](https://github.com/RobertTLange/evosax)). We provide training & checkpoints for both PPO & ES in [`gymnax-blines`](https://github.com/RobertTLange/gymnax-blines). Get started here üëâ [![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/RobertTLange/gymnax/blob/main/examples/getting_started.ipynb).\n\n## Basic `gymnax` API Usage üç≤\n\n```python\nimport jax\nimport gymnax\n\nrng = jax.random.PRNGKey(0)\nrng, key_reset, key_act, key_step = jax.random.split(rng, 4)\n\n# Instantiate the environment & its settings.\nenv, env_params = gymnax.make(\"Pendulum-v1\")\n\n# Reset the environment.\nobs, state = env.reset(key_reset, env_params)\n\n# Sample a random action.\naction = env.action_space(env_params).sample(key_act)\n\n# Perform the step transition.\nn_obs, n_state, reward, done, _ = env.step(key_step, state, action, env_params)\n```\n\n## Implemented Accelerated Environments üèéÔ∏è\n\n\n| Environment Name | Reference | Source | ü§ñ Ckpt (Return) | Secs/1M ü¶∂ <br /> A100 (2k üåé)\n| --- | --- | --- | --- | --- |\n| [`Acrobot-v1`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/classic_control/acrobot.py) | [Brockman et al. (2016)](https://arxiv.org/abs/1606.01540)  | [Click](https://github.com/openai/gym/blob/master/gym/envs/classic_control/acrobot.py) | [PPO, ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/Acrobot-v1) (R: -80) | 0.07 \n| [`Pendulum-v1`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/classic_control/pendulum.py) | [Brockman et al. (2016)](https://arxiv.org/abs/1606.01540)  | [Click](https://github.com/openai/gym/blob/master/gym/envs/classic_control/pendulum.py)  | [PPO, ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/Pendulum-v1) (R: -130) | 0.07\n| [`CartPole-v1`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/classic_control/cartpole.py) | [Brockman et al. (2016)](https://arxiv.org/abs/1606.01540)  | [Click](https://github.com/openai/gym/blob/master/gym/envs/classic_control/cartpole.py) | [PPO, ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/CartPole-v1) (R: 500) | 0.05\n| [`MountainCar-v0`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/classic_control/mountain_car.py) | [Brockman et al. (2016)](https://arxiv.org/abs/1606.01540) | [Click](https://github.com/openai/gym/blob/master/gym/envs/classic_control/mountain_car.py) | [PPO, ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/MountainCar-v0) (R: -118) | 0.07\n| [`MountainCarContinuous-v0`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/classic_control/continuous_mountain_car.py) | [Brockman et al. (2016)](https://arxiv.org/abs/1606.01540)  | [Click](https://github.com/openai/gym/blob/master/gym/envs/classic_control/continuous_mountain_car.py) | [PPO, ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/MountainCarContinuous-v0) (R: 92) | 0.09\n|  |  |  |  | \n| [`Asterix-MinAtar`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/minatar/asterix.py) | [Young & Tian (2019)](https://arxiv.org/abs/1903.03176) | [Click](https://github.com/kenjyoung/MinAtar/blob/master/minatar/environments/asterix.py) | [PPO](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/Asterix-MinAtar) (R: 15) | 0.92\n| [`Breakout-MinAtar`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/minatar/breakout.py) | [Young & Tian (2019)](https://arxiv.org/abs/1903.03176) | [Click](https://github.com/kenjyoung/MinAtar/blob/master/minatar/environments/breakout.py) | [PPO](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/Breakout-MinAtar) (R: 28) | 0.19\n| [`Freeway-MinAtar`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/minatar/freeway.py) | [Young & Tian (2019)](https://arxiv.org/abs/1903.03176) | [Click](https://github.com/kenjyoung/MinAtar/blob/master/minatar/environments/freeway.py) | [PPO](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/Freeway-MinAtar) (R: 58) | 0.87\n| [`SpaceInvaders-MinAtar`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/minatar/space_invaders.py) | [Young & Tian (2019)](https://arxiv.org/abs/1903.03176) | [Click](https://github.com/kenjyoung/MinAtar/blob/master/minatar/environments/space_invaders.py) | [PPO](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/SpaceInvaders-MinAtar) (R: 131) | 0.33\n|  |  |  |  | \n| [`Catch-bsuite`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/bsuite/catch.py) | [Osband et al. (2019)](https://openreview.net/forum?id=rygf-kSYwH) | [Click](https://github.com/deepmind/bsuite/blob/master/bsuite/environments/catch.py) | [PPO, ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/Catch-bsuite) (R: 1) | 0.15\n| [`DeepSea-bsuite`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/bsuite/deep_sea.py) | [Osband et al. (2019)](https://openreview.net/forum?id=rygf-kSYwH) | [Click](https://github.com/deepmind/bsuite/blob/master/bsuite/environments/deep_sea.py) | [PPO, ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/DeepSea-bsuite) (R: 0) | 0.22\n| [`MemoryChain-bsuite`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/bsuite/memory_chain.py) | [Osband et al. (2019)](https://openreview.net/forum?id=rygf-kSYwH) | [Click](https://github.com/deepmind/bsuite/blob/master/bsuite/environments/memory_chain.py)  | [PPO, ES](https://github.com/RobertTLange/tree/main/gymnax-blines/agents/MemoryChain-bsuite) (R: 0.1) | 0.13\n| [`UmbrellaChain-bsuite`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/bsuite/umbrella_chain.py) | [Osband et al. (2019)](https://openreview.net/forum?id=rygf-kSYwH) | [Click](https://github.com/deepmind/bsuite/blob/master/bsuite/environments/umbrella_chain.py)  | [PPO, ES](https://github.com/RobertTLange/tree/main/gymnax-blines/agents/UmbrellaChain-bsuite) (R: 1) | 0.08\n| [`DiscountingChain-bsuite`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/bsuite/discounting_chain.py) | [Osband et al. (2019)](https://openreview.net/forum?id=rygf-kSYwH) | [Click](https://github.com/deepmind/bsuite/blob/master/bsuite/environments/discounting_chain.py)  | [PPO, ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/DiscountingChain-bsuite) (R: 1.1) | 0.06\n| [`MNISTBandit-bsuite`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/bsuite/mnist.py) | [Osband et al. (2019)](https://openreview.net/forum?id=rygf-kSYwH) | [Click](https://github.com/deepmind/bsuite/blob/master/bsuite/environments/mnist.py)  | - | -\n| [`SimpleBandit-bsuite`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/bsuite/bandit.py) | [Osband et al. (2019)](https://openreview.net/forum?id=rygf-kSYwH) | [Click](https://github.com/deepmind/bsuite/blob/master/bsuite/environments/bandit.py)  | - | -\n|  |  |  |  | \n| [`FourRooms-misc`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/misc/rooms.py) | [Sutton et al. (1999)](https://people.cs.umass.edu/~barto/courses/cs687/Sutton-Precup-Singh-AIJ99.pdf) | [Click](https://github.com/howardh/gym-fourrooms) | [PPO, ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/FourRooms-misc) (R: 1) | 0.07\n| [`MetaMaze-misc`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/misc/meta_maze.py) | [Micconi et al. (2020)](https://arxiv.org/abs/2002.10585)  | [Click](https://github.com/uber-research/backpropamine/blob/master/simplemaze/maze.py) | [ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/MetaMaze-misc) (R: 32) | 0.09\n| [`PointRobot-misc`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/misc/point_robot.py) | [Dorfman et al. (2021)](https://openreview.net/pdf?id=IBdEfhLveS) | [Click](https://github.com/Rondorf/BOReL/blob/main/environments/toy_navigation/point_robot.py) | [ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/PointRobot-misc) (R: 10) | 0.08\n| [`BernoulliBandit-misc`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/misc/bernoulli_bandit.py) | [Wang et al. (2017)](https://arxiv.org/abs/1611.05763) | [Click](https://github.com/RobertTLange/minimal-meta-rl/blob/main/bandits/bandit_env.py) | [ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/BernoulliBandit-misc) (R: 90) | 0.08\n| [`GaussianBandit-misc`](https://github.com/RobertTLange/gymnax/blob/main/gymnax/environments/misc/gaussian_bandit.py) | [Lange & Sprekeler (2022)](https://arxiv.org/abs/2010.04466) | [Click](https://github.com/RobertTLange/learning-not-to-learn) | [ES](https://github.com/RobertTLange/gymnax-blines/tree/main/agents/GaussianBandit-misc) (R: 0) | 0.07\n\n\\* All displayed speeds are estimated for 1M step transitions (random policy) on a NVIDIA A100 GPU using `jit` compiled episode rollouts with 2000 environment workers. For more detailed speed comparisons on different accelerators (CPU, RTX 2080Ti) and MLP policies, please refer to the [`gymnax-blines`](https://github.com/RobertTLange/gymnax-blines) documentation.\n\n\n## Installation ‚è≥\n\nThe latest `gymnax` release can directly be installed from PyPI:\n\n```\npip install gymnax\n```\n\nIf you want to get the most recent commit, please install directly from the repository:\n\n```\npip install git+https://github.com/RobertTLange/gymnax.git@main\n```\n\nIn order to use JAX on your accelerators, you can find more details in the [JAX documentation](https://github.com/google/jax#installation).\n\n## Examples üìñ\n* üìì [Environment API](examples/getting_started.ipynb) - Get started with the basic `gymnax` API.\n* üìì [Distributed Anakin Agent](examples/01_anakin.ipynb) - Train an Anakin [(Hessel et al., 2021)](https://arxiv.org/pdf/2104.06272.pdf) agent on `SpaceInvaders-MinAtar`.\n* üìì [ES with `gymnax`](examples/02_evolution.ipynb) - Meta-evolve an LSTM controller that controls 2 link pendula of different lengths.\n* üìì [Trained baselines](https://github.com/RobertTLange/gymnax-blines) - Check out the trained baseline agents (PPO/ES) in `gymnax-blines`.\n\n## Key Selling Points üíµ\n\n- **Environment vectorization & acceleration**: Easy composition of JAX primitives (e.g. `jit`, `vmap`, `pmap`):\n\n  ```python\n  # Jit-accelerated step transition\n  jit_step = jax.jit(env.step)\n\n  # map (vmap/pmap) across random keys for batch rollouts\n  reset_rng = jax.vmap(env.reset, in_axes=(0, None))\n  step_rng = jax.vmap(env.step, in_axes=(0, 0, 0, None))\n\n  # map (vmap/pmap) across env parameters (e.g. for meta-learning)\n  reset_params = jax.vmap(env.reset, in_axes=(None, 0))\n  step_params = jax.vmap(env.step, in_axes=(None, 0, 0, 0))\n  ```\n  For speed comparisons with standard vectorized NumPy environments check out [`gymnax-blines`](https://github.com/RobertTLange/gymnax-blines).\n\n- **Scan through entire episode rollouts**: You can also `lax.scan` through entire `reset`, `step` episode loops for fast compilation:\n\n  ```python\n  def rollout(rng_input, policy_params, env_params, steps_in_episode):\n      \"\"\"Rollout a jitted gymnax episode with lax.scan.\"\"\"\n      # Reset the environment\n      rng_reset, rng_episode = jax.random.split(rng_input)\n      obs, state = env.reset(rng_reset, env_params)\n\n      def policy_step(state_input, tmp):\n          \"\"\"lax.scan compatible step transition in jax env.\"\"\"\n          obs, state, policy_params, rng = state_input\n          rng, rng_step, rng_net = jax.random.split(rng, 3)\n          action = model.apply(policy_params, obs)\n          next_obs, next_state, reward, done, _ = env.step(\n              rng_step, state, action, env_params\n          )\n          carry = [next_obs, next_state, policy_params, rng]\n          return carry, [obs, action, reward, next_obs, done]\n\n      # Scan over episode step loop\n      _, scan_out = jax.lax.scan(\n          policy_step,\n          [obs, state, policy_params, rng_episode],\n          (),\n          steps_in_episode\n      )\n      # Return masked sum of rewards accumulated by agent in episode\n      obs, action, reward, next_obs, done = scan_out\n      return obs, action, reward, next_obs, done\n  ```\n\n- **Build-in visualization tools**: You can also smoothly generate GIF animations using the `Visualizer` tool, which covers all `classic_control`, `MinAtar` and most `misc` environments: \n  ```python\n  from gymnax.visualize import Visualizer\n\n  state_seq, reward_seq = [], []\n  rng, rng_reset = jax.random.split(rng)\n  obs, env_state = env.reset(rng_reset, env_params)\n  while True:\n      state_seq.append(env_state)\n      rng, rng_act, rng_step = jax.random.split(rng, 3)\n      action = env.action_space(env_params).sample(rng_act)\n      next_obs, next_env_state, reward, done, info = env.step(\n          rng_step, env_state, action, env_params\n      )\n      reward_seq.append(reward)\n      if done:\n          break\n      else:\n        obs = next_obs\n        env_state = next_env_state\n  \n  cum_rewards = jnp.cumsum(jnp.array(reward_seq))\n  vis = Visualizer(env, env_params, state_seq, cum_rewards)\n  vis.animate(f\"docs/anim.gif\")\n  ```\n\n- **Training pipelines & pretrained agents**: Check out [`gymnax-blines`](https://github.com/RobertTLange/gymnax-blines) for trained agents, expert rollout visualizations and PPO/ES pipelines. The agents are minimally tuned, but can help you get up and running.\n\n- **Simple batch agent evaluation**: *Work-in-progress*.\n  ```python\n  from gymnax.experimental import RolloutWrapper\n\n  # Define rollout manager for pendulum env\n  manager = RolloutWrapper(model.apply, env_name=\"Pendulum-v1\")\n\n  # Simple single episode rollout for policy\n  obs, action, reward, next_obs, done, cum_ret = manager.single_rollout(rng, policy_params)\n\n  # Multiple rollouts for same network (different rng, e.g. eval)\n  rng_batch = jax.random.split(rng, 10)\n  obs, action, reward, next_obs, done, cum_ret = manager.batch_rollout(\n      rng_batch, policy_params\n  )\n\n  # Multiple rollouts for different networks + rng (e.g. for ES)\n  batch_params = jax.tree_map(  # Stack parameters or use different\n      lambda x: jnp.tile(x, (5, 1)).reshape(5, *x.shape), policy_params\n  )\n  obs, action, reward, next_obs, done, cum_ret = manager.population_rollout(\n      rng_batch, batch_params\n  )\n  ```\n\n## Resources & Other Great Tools üìù\n* üíª [Brax](https://github.com/google/brax): JAX-based library for rigid body physics by Google Brain with JAX-style MuJoCo substitutes.\n* üíª [envpool](https://github.com/sail-sg/envpool): Vectorized parallel environment execution engine.\n\n\n### Acknowledgements & Citing `gymnax` ‚úèÔ∏è\n\nIf you use `gymnax` in your research, please cite it as follows:\n\n```\n@software{gymnax2022github,\n  author = {Robert Tjarko Lange},\n  title = {{gymnax}: A {JAX}-based Reinforcement Learning Environment Library},\n  url = {http://github.com/RobertTLange/gymnax},\n  version = {0.0.4},\n  year = {2022},\n}\n```\n\nWe acknowledge financial support by the [Google TRC](https://sites.research.google/trc/about/) and the Deutsche\nForschungsgemeinschaft (DFG, German Research Foundation) under Germany's Excellence Strategy - EXC 2002/1 [\"Science of Intelligence\"](https://www.scienceofintelligence.de/) - project number 390523135.\n\n## Development üë∑\n\nYou can run the test suite via `python -m pytest -vv --all`. If you find a bug or are missing your favourite feature, feel free to create an issue and/or start [contributing](CONTRIBUTING.md) ü§ó.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/RobertTLange/gymnax/archive/v0.0.5.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RobertTLange/gymnax",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gymnax",
    "package_url": "https://pypi.org/project/gymnax/",
    "platform": "any",
    "project_url": "https://pypi.org/project/gymnax/",
    "project_urls": {
      "Download": "https://github.com/RobertTLange/gymnax/archive/v0.0.5.tar.gz",
      "Homepage": "https://github.com/RobertTLange/gymnax"
    },
    "release_url": "https://pypi.org/project/gymnax/0.0.5/",
    "requires_dist": [
      "jax",
      "jaxlib",
      "chex",
      "flax",
      "pyyaml"
    ],
    "requires_python": ">=3.7",
    "summary": "JAX-compatible version of Open AI's gym environments",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14863063,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86550539e5434e3ddfb26b3cc8a7f500dc07bb070451b719862d33bf7a945617",
          "md5": "6ab05a909d87763bae70412888f45a12",
          "sha256": "dd6691436c774ffae2fe65ec3b88b17655bd6ed99d2596b031f738d328f76fe5"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ab05a909d87763bae70412888f45a12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 60076,
        "upload_time": "2021-11-22T09:08:13",
        "upload_time_iso_8601": "2021-11-22T09:08:13.876838Z",
        "url": "https://files.pythonhosted.org/packages/86/55/0539e5434e3ddfb26b3cc8a7f500dc07bb070451b719862d33bf7a945617/gymnax-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ac8740b3f11f2abc119f69a02b3d53799d018aec399497d0637e452acaecc97",
          "md5": "f6cac498b5f85dfe3c2eaa9fd7832706",
          "sha256": "88f3814cee2e106c9b4b1f8fc10880d5d715be8a2386677067b1a4009897ce3f"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6cac498b5f85dfe3c2eaa9fd7832706",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39223,
        "upload_time": "2021-11-22T09:08:15",
        "upload_time_iso_8601": "2021-11-22T09:08:15.433603Z",
        "url": "https://files.pythonhosted.org/packages/3a/c8/740b3f11f2abc119f69a02b3d53799d018aec399497d0637e452acaecc97/gymnax-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d927c5e1933c531085e00d9bd905b943061dc75292edc446aca18d7539f7736",
          "md5": "5203122a8fa5986d255ae6f41c6a6998",
          "sha256": "87a8d08675801e553797bdb4cddfa730e6f14a184ec8ba9cc132a2a23c71396f"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5203122a8fa5986d255ae6f41c6a6998",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17555,
        "upload_time": "2022-06-15T15:54:56",
        "upload_time_iso_8601": "2022-06-15T15:54:56.659565Z",
        "url": "https://files.pythonhosted.org/packages/1d/92/7c5e1933c531085e00d9bd905b943061dc75292edc446aca18d7539f7736/gymnax-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0aa21bae034deac4508c8352b9ceb446b8df94985b004f39b9a82b5925450ec",
          "md5": "42ba546cf046a8b7c6bd57d4408fdd14",
          "sha256": "d0572b91fb4872f0947bd01cafa750d0e523411da8e8fa885a2eec26ff24be6c"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "42ba546cf046a8b7c6bd57d4408fdd14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19412,
        "upload_time": "2022-06-15T15:54:58",
        "upload_time_iso_8601": "2022-06-15T15:54:58.748066Z",
        "url": "https://files.pythonhosted.org/packages/b0/aa/21bae034deac4508c8352b9ceb446b8df94985b004f39b9a82b5925450ec/gymnax-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d03c6fbd99ec01d0d6299f5e8ff2785d196afbd075f8e0a03c6cccdd84115a2",
          "md5": "64c2634abcb4f80dd525f77f10bdc761",
          "sha256": "5bba9484936760cbebce3307888b775e1e3818529eeb5f48bda1f731a5fda2c2"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64c2634abcb4f80dd525f77f10bdc761",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 71980,
        "upload_time": "2022-06-15T17:13:35",
        "upload_time_iso_8601": "2022-06-15T17:13:35.453653Z",
        "url": "https://files.pythonhosted.org/packages/3d/03/c6fbd99ec01d0d6299f5e8ff2785d196afbd075f8e0a03c6cccdd84115a2/gymnax-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10fbd96669c465c074595d9bcdde0d78da9d20b0a00fe9b9a593c661e061e0c3",
          "md5": "69f011cc6181e4cc78bc60384d3a792f",
          "sha256": "8435397df780b376c01235b7fe3c91df9d32d8c47183b648ca0dd8f75270ea17"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "69f011cc6181e4cc78bc60384d3a792f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 47510,
        "upload_time": "2022-06-15T17:13:37",
        "upload_time_iso_8601": "2022-06-15T17:13:37.499528Z",
        "url": "https://files.pythonhosted.org/packages/10/fb/d96669c465c074595d9bcdde0d78da9d20b0a00fe9b9a593c661e061e0c3/gymnax-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "766763f20f1513da374cbeac8e4f291a4c5340c828915f9f11b25a320dfd265a",
          "md5": "6cc795966affe25a55859bc0e70b013e",
          "sha256": "f6522b2e4e0c09992a1689c203239b8643e7d9fc8052ee44a94a087b692cec50"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6cc795966affe25a55859bc0e70b013e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 78591,
        "upload_time": "2022-06-25T13:12:21",
        "upload_time_iso_8601": "2022-06-25T13:12:21.423179Z",
        "url": "https://files.pythonhosted.org/packages/76/67/63f20f1513da374cbeac8e4f291a4c5340c828915f9f11b25a320dfd265a/gymnax-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "566edf3261b47980d32bd773afbe08cb3323c98099b066876b7e8f5cd558010d",
          "md5": "d0e95f43b894000852bf72c76fdee135",
          "sha256": "d96db23ceec06e897b9b950b99cb7fedd49a130868e991d6b6fc6662cdc14100"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d0e95f43b894000852bf72c76fdee135",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 52803,
        "upload_time": "2022-06-25T13:12:23",
        "upload_time_iso_8601": "2022-06-25T13:12:23.510088Z",
        "url": "https://files.pythonhosted.org/packages/56/6e/df3261b47980d32bd773afbe08cb3323c98099b066876b7e8f5cd558010d/gymnax-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dc12c987337f6804ee7b522e53f52dfefbc7edbdbc90f9d7ce2a5c7622557a0",
          "md5": "8e08072cc0a601fbd8d0b736e9527b14",
          "sha256": "e11ed79aeb5870a919fad463ef3e77e1348371b6efb56df2120f0b26729bbdbc"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e08072cc0a601fbd8d0b736e9527b14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 78578,
        "upload_time": "2022-08-24T10:34:39",
        "upload_time_iso_8601": "2022-08-24T10:34:39.627230Z",
        "url": "https://files.pythonhosted.org/packages/5d/c1/2c987337f6804ee7b522e53f52dfefbc7edbdbc90f9d7ce2a5c7622557a0/gymnax-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87e98f01f8e6364a006202a01595e8711d9ef8e93300b8cf71909accbc8d4961",
          "md5": "7a06eabb6b88e47fe0bcdb041912b5b3",
          "sha256": "6a8b3aa9f9490c1f79d1f5c00c44909a4a3a7f54bc691ad13056b14371266506"
        },
        "downloads": -1,
        "filename": "gymnax-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7a06eabb6b88e47fe0bcdb041912b5b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 52782,
        "upload_time": "2022-08-24T10:34:41",
        "upload_time_iso_8601": "2022-08-24T10:34:41.238483Z",
        "url": "https://files.pythonhosted.org/packages/87/e9/8f01f8e6364a006202a01595e8711d9ef8e93300b8cf71909accbc8d4961/gymnax-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5dc12c987337f6804ee7b522e53f52dfefbc7edbdbc90f9d7ce2a5c7622557a0",
        "md5": "8e08072cc0a601fbd8d0b736e9527b14",
        "sha256": "e11ed79aeb5870a919fad463ef3e77e1348371b6efb56df2120f0b26729bbdbc"
      },
      "downloads": -1,
      "filename": "gymnax-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8e08072cc0a601fbd8d0b736e9527b14",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 78578,
      "upload_time": "2022-08-24T10:34:39",
      "upload_time_iso_8601": "2022-08-24T10:34:39.627230Z",
      "url": "https://files.pythonhosted.org/packages/5d/c1/2c987337f6804ee7b522e53f52dfefbc7edbdbc90f9d7ce2a5c7622557a0/gymnax-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87e98f01f8e6364a006202a01595e8711d9ef8e93300b8cf71909accbc8d4961",
        "md5": "7a06eabb6b88e47fe0bcdb041912b5b3",
        "sha256": "6a8b3aa9f9490c1f79d1f5c00c44909a4a3a7f54bc691ad13056b14371266506"
      },
      "downloads": -1,
      "filename": "gymnax-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "7a06eabb6b88e47fe0bcdb041912b5b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 52782,
      "upload_time": "2022-08-24T10:34:41",
      "upload_time_iso_8601": "2022-08-24T10:34:41.238483Z",
      "url": "https://files.pythonhosted.org/packages/87/e9/8f01f8e6364a006202a01595e8711d9ef8e93300b8cf71909accbc8d4961/gymnax-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}