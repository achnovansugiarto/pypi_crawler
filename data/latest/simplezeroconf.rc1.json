{
  "info": {
    "author": "Sébastien Boisgérault",
    "author_email": "Sebastien.Boisgerault@mines-paristech.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Zeroconf\n================================================================================\n\nA simple Python interface to Zeroconf service discovery and registration.\nSupports python >= 2.7 <= 3.5\n\nInstallation\n--------------------------------------------------------------------------------\n\n### Requirements\n\nThe `zeroconf` module assumes that the [avahi](http://avahi.org/) command-line\ntools `avahi-browse` and `avahi-publish` are available.\nOn Ubuntu for example, they may me installed with:\n\n    $ sudo apt-get install avahi-tools\n\nThe module also depend on [Andrew Moffat's subprocess wrapper][sh]. Install\nit with\n\n    $ pip install sh\n\nIf you install the package using setup.py or pip it'll be automatically\nhandled so you normally don't need to do this.\n\n[sh]: http://amoffat.github.io/sh\n\n### Install\n\nDownload the source distribution and type:\n\n    $ python setup.py install\n\n### Running tests\n\nYou need py.test installed, just run:\n\n    $ py.test --doctest-modules zeroconf/\n\n\nUsage\n--------------------------------------------------------------------------------\n\n### Zeroconf Services Discovery\n\nSearching for all available Zeroconf services is done by\n\n    >>> from zeroconf import ZeroConf\n    >>> zc = ZeroConf()\n    >>> services = zc.search()\n\nThe search can be made more specific, for example:\n\n    >>> services = zc.search(name=None, type=\"_workstation._tcp\", domain=\"local\")\n\nThe arguments, all optional, to the `search` functions are:\n\n  - `name`: service name, defaults to `None` (interpreted as all),\n  - `type`: service type, defaults to `None` (interpreted as all),\n  - `domain`: domain name, defaults to `\"local\"`.\n\nSearch results are dictionaries:\n\n    >>> print services\n    {('tide [f0:7b:cb:42:ff:e0]', '_workstation._tcp', 'local'):\n       {'txt': '', 'hostname': 'tide.local', 'port': '9', 'address': '192.168.0.13'},\n     ('wreck [00:26:18:4c:3f:ee]', '_workstation._tcp', 'local'):\n       {'txt': '', 'hostname': 'wreck.local', 'port': '9', 'address': '192.168.0.10'},\n     ('biohazard [00:18:8b:ac:c8:45]', '_workstation._tcp', 'local'):\n       {'txt': '', 'hostname': 'biohazard.local', 'port': '9', 'address': '192.168.0.12'}}\n\nThe keys are `(name, type, domain)` tuples and the values are dictionaries with `txt`,\n`hostname`, `port` and `address` keys.\n\n### Zeroconf Services Registration\n\nRegister a new zeroconf service in the local domain with:\n\n    >>> zc = ZeroConf()\n    >>> zc.register(name=\"ghost [08:00:27:bf:49:e1]\", type=\"_workstation._tcp\", port=\"9\")\n\nand when you're done, unregister it with:\n\n    >>> zc = ZeroConf()\n    >>> zc.unregister(name=\"ghost [08:00:27:bf:49:e1]\", type=\"_workstation._tcp\", port=\"9\")\n\nAll arguments to `unregister` are optional, so we could have done:\n\n    >>> zc = ZeroConf()\n    >>> zc.unregister(name=\"ghost [08:00:27:bf:49:e1]\")\n\nor even, to unregister all services published during the Python session:\n\n    >>> zc = ZeroConf()\n    >>> zc.unregister()\n\nContributors\n--------------------------------------------------------------------------------\n\n  - Sébastien Boisgérault <Sebastien.Boisgerault@mines-paristech.fr>:\n    initial API design, Linux/avahi support.\n  - Olivier Huynh <olivierv.huynh@free.fr>: Windows/dns-sd support.\n  - David Francos Cuartero <me@davidfrancos.net>: OOP rewrite, Python3 support",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": "ZeroConf",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "simplezeroconf",
    "package_url": "https://pypi.org/project/simplezeroconf/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/simplezeroconf/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/simplezeroconf/2.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Simple pythonic ZeroConf implementation using system calls",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2137795,
  "releases": {
    "2.0.2": []
  },
  "urls": [],
  "vulnerabilities": []
}