{
  "info": {
    "author": "Andre Rendeiro",
    "author_email": "afrendeiro@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "<p align=\"center\">\n  <img width=\"460\" src=\"https://github.com/ElementoLab/imc/blob/main/imc/logo.png?raw=True\">\n</p>\n\n# Imaging mass cytometry\n\nA package for processing and analysis of imaging mass cytometry (IMC) data.\n\nIt implements image- and channel-wise quality control, quantification of cell\nintenstity and morphology, cell type discovery through clustering, automated\ncell type labeling, community and super-community finding and differential\ncomparisons between sample groups, in addition to many handy visualization tools.\nAbove all, it is a tool for the use of IMC data at scale.\n\nDevelopment is still underway, so use at your own risk.\n\n\n## Requirements and installation\n\nRequires `Python >= 3.8`.\n\nInstall with `pip` from [PyPI](https://pypi.org/project/imc/):\n```bash\npip install imc\n```\n\n## Quick start\n\nInstall the package from [PyPI](https://pypi.org/project/imc/) with extra packages required for all steps:\n```bash\npip install imc[extra]\n```\n\n### Use case 1 (pipeline processing)\n\n#### Example: Lung sample processing from MCD to single-cell h5ad\n\nOne-line IMC data processing:\n```bash\n# Run pipeline in one step with remote MCD file\nMCD_URL=https://zenodo.org/record/4110560/files/data/20200612_FLU_1923/20200612_FLU_1923.mcd\nimc process $MCD_URL\n```\n`imc` also supports TXT or TIFF files as input, local or remote files:\n```bash\n# Run pipeline in one step with remote TXT file\nTXT_URL=https://zenodo.org/record/5018260/files/COVID19_brain_Patient03_ROI3_COVID19_olfactorybulb.txt?download=1\nimc process $TXT_URL\n```\nInput can be MCD, TIFF, or TXT files.\nSeveral files can be given to `imc process` at once. See more with the `--help` option.\n\n`imc` is nonetheless very modular and allows the user to run any of the step seperately as well.\n\nThe above is also equivalent to the following:\n```bash\nMCD_URL=https://zenodo.org/record/4110560/files/data/20200612_FLU_1923/20200612_FLU_1923.mcd\nSAMPLE=20200612_FLU_1923\n\nwget -O data/${SAMPLE}.mcd $MCD_URL\n\n## output description of acquired data\nimc inspect data/${SAMPLE}.mcd\n\n## convert MCD to TIFFs and auxiliary files\nimc prepare \\\n  --ilastik \\\n  --n-crops 0 \\\n  --ilastik-compartment nuclear \\\n  data/${SAMPLE}.mcd\n\n## For each TIFF file, output prediction of mask probabilities and segment them \nTIFFS=processed/${SAMPLE}/tiffs/${SAMPLE}*_full.tiff\n\n## Output pixel probabilities of nucleus, membrane and background using ilastik\nimc predict $TIFFS\n\n## Segment cell instances with DeepCell\nimc segment \\\n  --from-probabilities \\\n  --model deepcell \\\n  --compartment both $TIFFS\n\n## Quantify channel intensity and morphology for each single cell in every image\nimc quantify $TIFFS\n\n## Phenotype cells into clusters\nimc phenotype processed/quantification.h5ad\n```\nThere are many customization options for each step. Do `imc --help` or `imc <subcommand> --help` to see all.\n\n`imc` also includes a lightweight interactive image viewer:\n```bash\nimc view $TIFFS\n```\n\nThere is also an interface to the more full fledged `napari` image viwer:\n```bash\nimc view --napari data/${SAMPLE}.mcd  # view MCD file\nnapari $TIFFS  # view TIFF files directly with napari. Requires napari\n```\n\nA quick example of further analysis steps of single cell data downstream in IPython/Jupyter notebook:\n```python\nimport scanpy as sc\na = sc.read('processed/quantification.h5ad')\nsc.pp.log1p(a)\nsc.pp.pca(a)\nsc.pp.neighbors(a)\nsc.tl.umap(a)\nsc.pl.umap(a, color=a.var.index)\n```\n\n### Use case 2 (API usage)\n\n#### Demo data (synthetic)\n```python\n>>> from imc.demo import generate_project\n>>> prj = generate_project(n_samples=2, n_rois_per_sample=3, shape=(8, 8))\n>>> prj\nProject 'project' with 2 samples and 6 ROIs in total.\n\n>>> prj.samples  # type: List[IMCSample]\n[Sample 'test_sample_01' with 3 ROIs,\n Sample 'test_sample_02' with 3 ROIs]\n\n>>> prj.rois  # type: List[ROI]\n[Region 1 of sample 'test_sample_01',\n Region 2 of sample 'test_sample_01',\n Region 3 of sample 'test_sample_01',\n Region 1 of sample 'test_sample_02',\n Region 2 of sample 'test_sample_02',\n Region 3 of sample 'test_sample_02']\n\n>>> prj.samples[0].rois  # type: List[ROI]\n[Region 1 of sample 'test_sample_01',\n Region 2 of sample 'test_sample_01',\n Region 3 of sample 'test_sample_01']\n\n>>> roi = prj.rois[0]  # Let's assign one ROI to explore it\n>>> roi.channel_labels  # type: pandas.Series; `channel_names`, `channel_metals` also available\n0    Ch01(Ch01)\n1    Ch02(Ch02)\n2    Ch03(Ch03)\nName: channel, dtype: object\n\n>>> roi.mask  # type: numpy.ndarray\narray([[0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 1, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 2, 0, 0, 0, 3, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 4, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]], dtype=int32)\n\n>>> roi.stack.shape  # roi.stack -> type: numpy.ndarray\n(3, 8, 8)\n\n>>> # QC\n>>> prj.channel_correlation()\n>>> prj.channel_summary()\n\n>>> # Cell type discovery\n>>> prj.cluster_cells()\n>>> prj.find_communities()\n\n```\n#### Demo data (real)\n```python\n>>> import imc.demo\n>>> imc.demo.datasets\n['jackson_2019_short', 'jackson_2019_short_joint']\n\n>>> prj = imc.demo.get_dataset('jackson_2019_short')\n>>> prj  # type: Project\nProject 'jackson_2019_short' with 4 samples and 4 ROIs in total.\n\n>>> prj.samples  # type: List[IMCSample]\n[Sample 'BaselTMA_SP41_15.475kx12.665ky_10000x8500_5_20170905_90_88_X11Y5_242_a0' with 1 ROI,\n Sample 'BaselTMA_SP41_25.475kx12.665ky_8000x8500_3_20170905_90_88_X11Y5_235_a0' with 1 ROI,\n Sample 'BaselTMA_SP41_33.475kx12.66ky_8500x8500_2_20170905_24_61_X3Y4_207_a0' with 1 ROI,\n Sample 'BaselTMA_SP41_33.475kx12.66ky_8500x8500_2_20170905_33_61_X4Y4_215_a0' with 1 ROI]\n\n>>> prj.samples[0].channel_labels  # type: pandas.Series\nchanel\n0                                  Ar80(Ar80)\n1                                  Ru96(Ru96)\n2                                  Ru98(Ru98)\n3                                  Ru99(Ru99)\n4                                Ru100(Ru100)\n5                                Ru101(Ru101)\n6                                Ru102(Ru102)\n7                                Ru104(Ru104)\n8                            HistoneH3(In113)\n9                                EMPTY(Xe126)\n10                                EMPTY(I127)\n11                           HistoneH3(La139)\n...\n42                            vWF-CD31(Yb172)\n43                                mTOR(Yb173)\n44                        Cytokeratin7(Yb174)\n45    PanCytokeratin-KeratinEpithelial(Lu175)\n46         CleavedPARP-CleavedCaspase3(Yb176)\n47                                DNA1(Ir191)\n48                                DNA2(Ir193)\n49                               EMPTY(Pb206)\n50                               EMPTY(Pb207)\n51                               EMPTY(Pb208)\nName: BaselTMA_SP41_15.475kx12.665ky_10000x8500_5_20170905_90_88_X11Y5_242_a0, dtype: object\n>>> prj.plot_channels(['DNA2', 'Ki67', \"Cytokeratin7\"])\n<Figure size 400x1200 with 12 Axes>\n```\n\n#### Your own data\n\nThe best way is to have a CSV file with one row per sample, or one row per ROI.\nThat will ensure additional sample/ROI metadata is passed to the objects and used later in analysis.\nPass the path to the CSV file to the `Project` object constructor:\n\n```python\nfrom imc import Project\n\nprj = Project()  # will search current directory for Samples/ROIs\n\nprj = Project(processed_dir=\"processed\")  # will search `processed` for Samples/ROIs\n\nprj = Project(\"path/to/sample/annotation.csv\", processed_dir=\"processed\")\n# ^^ will use metadata from CSV and use the files in `processed`.\n```\n\nHowever, if one is not given, `Project` will search the current directory or the\nargument of `processed_dir` for IMCSamples and ROIs.\n\nThe `processed_dir` directory can be structured in two ways:\n1. One directory per sample.\n  - Inside there is a directory `\"tiffs\"` which contains the stack `\"*_full.tiff\"`, channel labels\n  `\"*_full.csv\"` and optionally a segmentation `\"*_full_mask.tiff\"`.\n\n2. All samples in the same directory `processed_dir`.\n  - Inside the one directory there are stack `\"*_full.tiff\"`, channel label `\"*_full.csv\"` and\n  optionally segmentation `\"*_full_mask.tiff\"` files.\n\nThe default is option one. If you choose `2`, simply pass `subfolder_per_sample`:\n\n``` python\nprj = Project(subfolder_per_sample=True)\n```\n\nThe expected files are produced by common preprocessing pipelines such as\n[imcpipeline](https://github.com/elementolab/imcpipeline) or [imcyto](https://nf-co.re/imcyto).\n\n\n## Documentation\n\nDocumentation is for now mostly a skeleton but will be expanded soon:\n\n```bash\nmake docs\n```\n\n## Testing\n\nTests are still very limited, but you can run tests this way:\n\n```bash\npip install pytest  # install testing package\npython -m pytest --pyargs imc\n```\n\nFor data processing, running the example lung data should make sure eveything is running smoothly.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ElementoLab/imc",
    "keywords": "science,bioinformatics,bioimage analysis,imaging mass cytometry",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imc",
    "package_url": "https://pypi.org/project/imc/",
    "platform": null,
    "project_url": "https://pypi.org/project/imc/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ElementoLab/imc/issues",
      "Documentation": "https://imc.readthedocs.io",
      "Homepage": "https://github.com/ElementoLab/imc",
      "Source Code": "https://github.com/ElementoLab/imc"
    },
    "release_url": "https://pypi.org/project/imc/0.1.4/",
    "requires_dist": [
      "setuptools-scm",
      "ordered-set",
      "urlpath",
      "PyYAML",
      "parmap",
      "tqdm",
      "joblib",
      "numpy",
      "numpy-groupies",
      "scipy (>=1.7)",
      "pandas (>=1.0.1)",
      "matplotlib (>=3.5.0)",
      "imctools (>=2.1.0)",
      "tifffile (>=2020.6.3)",
      "scikit-image (>=0.17.2)",
      "leidenalg",
      "python-louvain",
      "networkx",
      "scanpy",
      "bbknn",
      "seaborn (>=0.11.1)",
      "seaborn-extensions (>=0.0.11)",
      "astir (<1.0.0,>=0.1.4) ; extra == 'astir'",
      "cellpose (<1.0.0,>=0.1.0.1) ; extra == 'cellpose'",
      "DeepCell (<1.0.0,>=0.8.3) ; extra == 'deepcell'",
      "wheel ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "black[d] ; extra == 'dev'",
      "mypy (>=0.900) ; extra == 'dev'",
      "pandas-stubs ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "git-lint ; extra == 'dev'",
      "pydocstyle ; extra == 'dev'",
      "rich ; extra == 'dev'",
      "data-science-types ; extra == 'dev'",
      "PyQt5 ; extra == 'dev'",
      "Sphinx ; extra == 'doc'",
      "sphinx-issues ; extra == 'doc'",
      "sphinx-rtd-theme ; extra == 'doc'",
      "sphinx-argparse ; extra == 'doc'",
      "myst-parser ; extra == 'doc'",
      "sphinx-autodoc-typehints ; extra == 'doc'",
      "DeepCell (<1.0.0,>=0.8.3) ; extra == 'extra'",
      "cellpose (<1.0.0,>=0.1.0.1) ; extra == 'extra'",
      "astir (<1.0.0,>=0.1.4) ; extra == 'extra'",
      "napari ; extra == 'extra'",
      "napari-imc ; extra == 'extra'",
      "napari ; extra == 'napari'",
      "napari-imc ; extra == 'napari'",
      "pytest (>=6) ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "A package for processing and analysis of imaging mass cytometry (IMC) data.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13177355,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d31ec9d2e11c933c90a1b23d6599e1245d93034915603a2ee14e14327c5b258",
          "md5": "08471347f4d72573da27aa992e841c5b",
          "sha256": "e4a9f52faa0ba286127d35feb0480dfb85713d8c21b1e4eb80c99959418a98b4"
        },
        "downloads": -1,
        "filename": "imc-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08471347f4d72573da27aa992e841c5b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 126768,
        "upload_time": "2022-03-15T02:20:56",
        "upload_time_iso_8601": "2022-03-15T02:20:56.911295Z",
        "url": "https://files.pythonhosted.org/packages/0d/31/ec9d2e11c933c90a1b23d6599e1245d93034915603a2ee14e14327c5b258/imc-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb9df381eb5479ae637415dd8e7b23a6398ba90096b23c8795c093ae0e72ee93",
          "md5": "412c7bd2282818f91d7a0d7e8d23f319",
          "sha256": "453d5e351597bd4ae795a11428e046ddabe188497ff983c30204cd4148b9799d"
        },
        "downloads": -1,
        "filename": "imc-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "412c7bd2282818f91d7a0d7e8d23f319",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 311897,
        "upload_time": "2022-03-15T02:20:58",
        "upload_time_iso_8601": "2022-03-15T02:20:58.913069Z",
        "url": "https://files.pythonhosted.org/packages/fb/9d/f381eb5479ae637415dd8e7b23a6398ba90096b23c8795c093ae0e72ee93/imc-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6a86125379122796c31a250a8fe9661d4a2c809b83c1fa85ab5a95c6febd894",
          "md5": "dc68342daa7bb9eea166720945a82c5c",
          "sha256": "b93b4845cc99567f3ef18b96d02ea2c2d9d205dfda2219be1c846d113f49884e"
        },
        "downloads": -1,
        "filename": "imc-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc68342daa7bb9eea166720945a82c5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 127096,
        "upload_time": "2022-03-15T02:33:03",
        "upload_time_iso_8601": "2022-03-15T02:33:03.033924Z",
        "url": "https://files.pythonhosted.org/packages/e6/a8/6125379122796c31a250a8fe9661d4a2c809b83c1fa85ab5a95c6febd894/imc-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c913f6010b98e800c96f2ca7a5fc4135d907735131906d12fb11e19f967b6a5e",
          "md5": "a59946957d3c758b3a801abf0d860975",
          "sha256": "67d8c1b5ea2e6fdd3f21c66a3bf732adc948db2ac554b3aa59f6c2a5cb530f99"
        },
        "downloads": -1,
        "filename": "imc-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a59946957d3c758b3a801abf0d860975",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 312698,
        "upload_time": "2022-03-15T02:33:04",
        "upload_time_iso_8601": "2022-03-15T02:33:04.834602Z",
        "url": "https://files.pythonhosted.org/packages/c9/13/f6010b98e800c96f2ca7a5fc4135d907735131906d12fb11e19f967b6a5e/imc-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e6446d77ab4c7aaa8baa97265cf329aee8f1e2348eea2fa52b58825c1d641ac",
          "md5": "0c089cd205b3c69183a6fcd29b702d5b",
          "sha256": "930dff2239776ef1231e73d8863473c07b4e8f3bff10457e73d0a2d7e55b555b"
        },
        "downloads": -1,
        "filename": "imc-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c089cd205b3c69183a6fcd29b702d5b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 319726,
        "upload_time": "2022-03-15T02:57:45",
        "upload_time_iso_8601": "2022-03-15T02:57:45.659691Z",
        "url": "https://files.pythonhosted.org/packages/8e/64/46d77ab4c7aaa8baa97265cf329aee8f1e2348eea2fa52b58825c1d641ac/imc-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "521e77ac0c9a0295545b560f14a716fac61db7e0a4d6bd767e8df5555903c3ed",
          "md5": "82d47ebe0590cccaa73a7298a78621fc",
          "sha256": "175ae8b4bc4c5c7bf86a671f8ba9ab0082f9f26f38fd59f1712a5c924f354002"
        },
        "downloads": -1,
        "filename": "imc-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "82d47ebe0590cccaa73a7298a78621fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 316482,
        "upload_time": "2022-03-15T02:57:47",
        "upload_time_iso_8601": "2022-03-15T02:57:47.736246Z",
        "url": "https://files.pythonhosted.org/packages/52/1e/77ac0c9a0295545b560f14a716fac61db7e0a4d6bd767e8df5555903c3ed/imc-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e6446d77ab4c7aaa8baa97265cf329aee8f1e2348eea2fa52b58825c1d641ac",
        "md5": "0c089cd205b3c69183a6fcd29b702d5b",
        "sha256": "930dff2239776ef1231e73d8863473c07b4e8f3bff10457e73d0a2d7e55b555b"
      },
      "downloads": -1,
      "filename": "imc-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c089cd205b3c69183a6fcd29b702d5b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 319726,
      "upload_time": "2022-03-15T02:57:45",
      "upload_time_iso_8601": "2022-03-15T02:57:45.659691Z",
      "url": "https://files.pythonhosted.org/packages/8e/64/46d77ab4c7aaa8baa97265cf329aee8f1e2348eea2fa52b58825c1d641ac/imc-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "521e77ac0c9a0295545b560f14a716fac61db7e0a4d6bd767e8df5555903c3ed",
        "md5": "82d47ebe0590cccaa73a7298a78621fc",
        "sha256": "175ae8b4bc4c5c7bf86a671f8ba9ab0082f9f26f38fd59f1712a5c924f354002"
      },
      "downloads": -1,
      "filename": "imc-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "82d47ebe0590cccaa73a7298a78621fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 316482,
      "upload_time": "2022-03-15T02:57:47",
      "upload_time_iso_8601": "2022-03-15T02:57:47.736246Z",
      "url": "https://files.pythonhosted.org/packages/52/1e/77ac0c9a0295545b560f14a716fac61db7e0a4d6bd767e8df5555903c3ed/imc-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}