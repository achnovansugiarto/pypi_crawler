{
  "info": {
    "author": "Juan Pablo Caram",
    "author_email": "jpcaram@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\nCurve - A waveform manipulation and analysis library for Python\n======================\n\nJuan Pablo Caram (c) 2018 - 2020\n\nIntroduction\n------------\n\nThe Curve class represents Y values that evolve as a function of X.\n\nExample:\n\n\n```python\nimport numpy as np\nfrom matplotlib.pyplot import *\nfrom curve import Curve\n\nx = np.linspace(0, 10)\ny = np.sin(x)\nmycurve = Curve(x, y)\n\nmycurve.plot()\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_1_0.png)\n\n\nThe class provides several operations for the data within the class:\n\nExample:\n\n\n```python\nsq_curve = mycurve**2\nint_curve = sq_curve.integrate().plot()\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_3_0.png)\n\n\nIt is also possible to carry out operations between Curve's even is their\nx-axis values don't match:\n\n\n```python\nx1 = np.linspace(0, 10, num=30)\nx2 = np.linspace(0, 10, num=100)\ny1 = np.sin(x1)\ny2 = np.cos(x2)\nsum_curve = Curve(x1, y1) + Curve(x2, y2)\nsum_curve.plot()\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_5_0.png)\n\n\nCurve API\n==========\n\nCurve(data, y=None, dtype=float)\n--------------------------------\n\n```\nInitilizes the Curve object with data.\n\nUsage:\n\n    mycurve = Curve(x, y)\n\nor\n\n    mycurve = Curve([x, y])\n\n:param data: A 2xn (or nx2) list or Numpy array, or a 1-d vector\n             for the x-axis values (In this case, must also provide\n             the y parameter).\n:param y: 1-d vector of y-axis values correspondind to the x-axis\n          values provided in the data parameter. If this is not\n          provided it assumes that data contains both x and y-axis data\n          in a 2-times-n data structure.\n:param dtype: Type in which the data is stored.\n```\n\nAddition: curve + other\n-----------------------\n\n```other``` may be a scalar or a Curve.\n\n\n\nMultiplication: curve * other\n-----------------------------\n\n```other``` may be a scalar or a Curve.\n\n\n```python\nx1 = np.linspace(0, 10, num=130)\nx2 = np.linspace(0, 10, num=100)\ny1 = np.sin(x1)\ny2 = np.cos(x2 * 3)\nc1 = Curve(x1, y1)\nc2 = Curve(x2, y2)\nc1.plot(label='c1')\nc2.plot(label='c2')\n(c1 * c2).plot(label='c1*c2')\nlegend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_10_0.png)\n\n\nDivision: curve / other\n-----------------------\n\n```other``` may be a scalar or a Curve. Reverse division, i.e., ```other / curve```, when other is a scalar is also supported.\n\n\n```python\nc1.plot(label='c1')\nc2.plot(label='c2')\n(c1 / c2).plot(label='c1/c2')\nlegend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_12_0.png)\n\n\nPower: curve ** other\n---------------------\n\nOnly scalar values of ```other``` are supported at this time.\n\nNegative: -curve\n----------------\n\nInverts the sign of the y-axis values.\n\ncurve.x\n-------\n\nX-axis values\n\ncurve.y\n-------\n\nY-axis values\n\ncurve.duration\n--------------\n\nThe difference between the first and last X-axis values.\n\ncurve.check(fix=0)\n------------------\n\n```\nCheck for proper data (Monotonicity of the x-axis values).\nFix it if necessary by sorting (x, y) pairs by x.\n\n:param fix: Fix non-monotonicity in the x-axis by sorting (x, y) pairs by x.\n            Default is False.\n```\n\ncurve.at(value, interpolate=True)\n---------------------------------\n\n```\nReturns y(x=value), interpolating values (trapezoid), otherwise\nreturns y for the closest existing x < value. If values is\na list, returns a list of corresponding values of y.\n\n:param value: X-axis value(s) for which the Y-axis value(s) is(are) returned.\n              May be a list/Numpy array of values or a scalar (float/int).\n:param interpolate: Wheather to interpolate between closest X values,\n                    or to approximate to the nearest available.\n                    Default is True.\n:return: Corresponding Y-axis value(s).\n```\n\n\n```python\ncurve = Curve([0, 3], [1, 9])\nx = [1.5, 2.5]\ny = curve.at(x)\n\nplot(curve.x, curve.y, 'o-', label='curve')\nplot(x, y, 'o', label='interpolation')\nlegend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_20_0.png)\n\n\ncurve.resample(max_grow=10)\n---------------------------\n\n```\nResamples the curve at uniform intervals. It chooses the minumum existing\nspacing between x-axis values as the sampling period unless the resulting\nnumber of samples is greater than max_grow times the current number of samples.\nIn such case, the period is set to be such that the resulting number of\nsamples is exactly max_grow times the current number of samples.\n\n:param max_grow: Maximum allowed increase in number of data points.\n:return: Resulting resampled curve.\n```\n\ncurve.envelope()\n----------------\n\n```\nCalculates the envelope of the curve. Uses the hilbert function from\nscipy.signal.\n\n:return: Envelope curve.\n```\n\n\n```python\nx = np.linspace(0, 100, num=200)\ny = np.sin(x/10) * np.sin(x)\ncurve = Curve(x, y)\nenv = curve.envelope()\n\ncurve.plot(label='curve')\nenv.plot(label='envelope')\nlegend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_23_0.png)\n\n\ncurve.envelope2(tc=None, numpoints=101)\n---------------------------------------\n\n```\nCalculates the envelope of the curve. Slices the curve into uniform intervals\nand computes the maximum of the interval to determine the envelope.\n\n:param tc: Interval width for computing the maximum as the envelope.\n           If not provided, tc = duration / (numpoints - 1).\n:param numpoints: Used if tc is not provided to calaculate tc.\n:return: Envelope curve.\n```\n\n\n```python\nx = np.linspace(0, 100, num=200)\ny = np.sin(x/10) * np.sin(x)\ncurve = Curve(x, y)\nenv = curve.envelope2(tc=5.0)\n\ncurve.plot(label='curve')\nenv.plot(label='envelope')\nlegend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_25_0.png)\n\n\ncurve.diff()\n------------\n\n```\nComputes the difference (derivative) of this curve.\n\n:return: A Curve containing the derivative of this curve.\n```\n\n\n```python\nx = np.linspace(0, 10)\ny = np.sin(x)\ncurve = Curve(x, y)\ncurve_diff = curve.diff()\n\ncurve.plot(label='curve')\ncurve_diff.plot(label='d(curve)/dx')\nlegend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_27_0.png)\n\n\ncurve.interval(xmin=None, xmax=None, include_edges=True, interpolate=True)\n--------------------------------------------------------------------------\n\n```\nExtracts a segment of the curve for xmin < x < xmax. If xmin or xmax\nare not specified, they are considered the min(x) or max(x)\nrespectively.\n\n:param xmin: Minimum x-axis value of the interval.\n:param xmax: Maximum x-axis value of the interval.\n:param include_edges: If xmin or xmax exceed the limits of the curve,\n                      whether to include these limits or truncate\n                      at the actual limits of the curve.\n                      Default is True.\n:param interpolate: If include_edge is True, whether to interpolate to\n                    compute the extremes. Default is True.\n:return: Curve for the specified interval.\n```\n\ncurve.integrate()\n-----------------\n\n```\nGenerates a new Curve with the integral (trapezoidal)\nof this Curve.\n\n:return: A Curve containing the integral of this curve.\n```\n\n\n```python\nx = np.linspace(0, 10)\ny = np.sin(x)\ncurve = Curve(x, y)\ncurve_integ = curve.integrate()\n\ncurve.plot(label='curve')\ncurve_integ.plot(label='integ(curve)')\nlegend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_30_0.png)\n\n\ncurve.average()\n---------------\n\n```\nComputes a curve whose value at any given x, are\nthe average of the y-axis values for all previous\nvalues of x.\n\n:return: Curve with the average of this Curve throughout x.\n```\n\n\n```python\nx = np.linspace(0, 30, num=200)\ny = np.sin(x)\ncurve = Curve(x, y)\ncurve.plot(label='curve')\ncurve.average().plot(label='average')\nlegend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_32_0.png)\n\n\ncurve.cross(edge=None)\n----------------------\n\n```\nComputes the times (or x-axis values) at which this curve\ncrosses 0 (in y-axis values).\n\nTo compute the crossing of a different threshold,\nshift the curve first:\n\n    mycurve = Curve(x, y)\n    cross_times = (mycurve - threshold).cross()\n\n:param edge: Whether to get just rising or falling edges.\n             Possible values are 'rise', 'fall' or None (default).\n             If None, it computes both rising and falling edges.\n:param which: Not implemented.\n:return: 1-d Numpy array of values corresponding to when/where\n         along the x-axis, the y-axis values cross 0.\n```\n\n\n```python\nx = np.linspace(0, 30, num=200)\ny = np.sin(x)\ncurve = Curve(x, y)\ncurve.plot(label='curve')\n\nzero_cross = curve.cross(edge='fall')\nplot(zero_cross, [0]*len(zero_cross), 'o', label='pos-neg 0 crossing')\nlegend(loc='lower left');\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_34_0.png)\n\n\ncurve.period(threshold=None, verbose=False)\n-------------------------------------------\n\n```\nComputes a curve with the period of this curve. The period\nis defined as the time between rising edges crossing the\nspecified threshold. If not provided, it is set to the\ncurve's average. Values are defined at the time of the\nthreshold crossing and are with respect to the previous\nthreshold crossing.\n\n:param verbose: If true, prints debug information.\n:param threshold: Value of the curve at which it is considered\n    to have completed/started a period.\n:return: Period Curve.\n```\n\n\n```python\nfig, ax = subplots(2, 1)\n\nx = np.linspace(0, 30, num=500)\nyp = 0.5 * np.sin(x/5)\ny = np.sin((3+yp)*x)\ncurve = Curve(x, y)\ncurve.plot(ax=ax[0], label='curve')\nax[0].legend()\n\nperiod = curve.period()\nperiod.plot(ax=ax[1], color='orange', marker='o', label='period')\nax[1].legend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_36_0.png)\n\n\ncurve.frequency(threshold=None, verbose=False)\n----------------------------------------------\n\n```\nComputes the frequency of the signal/curve. This is computed\nas 1/period. See Curve.period().\n\n:param threshold: Threshold used for computing the period of each cycle.\n:param verbose: Print out additional information.\n:return: Curve containing the frequency of this curve as a function of X.\n```\n\n\n```python\nfig, ax = subplots(2, 1)\n\nx = np.linspace(0, 30, num=500)\nyp = 0.5 * np.sin(x/5)\ny = np.sin((3+yp)*x)\ncurve = Curve(x, y)\ncurve.plot(ax=ax[0], label='curve')\nax[0].legend()\n\nfreq = curve.frequency()\nfreq.plot(ax=ax[1], color='orange', marker='o', label='frequency')\nax[1].legend();\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_38_0.png)\n\n\ncurve.plot()\n------------\n\n```\nPlots the curve using matplotlib.pyplot.plot().\n\n:param ax: If provided, plots on the given axes. Otherwise,\n           uses the current axes.\n:param xscale: Multiplier for x-axis values.\n:param yscale: Multiplier for y-axis values.\n:param kwargs: Additional keyword arguments passed to\n               matplotlib.pyplot.plot().\n```\n\ncurve.filter(self, fc, order=8, kind='low', fs=None)\n----------------------------------------------------\n\n```\nApplies a digital filter to the curve. The filter is either\na high-pass or a low-pass filter as specified by the kind\nparameter. The cut-off frequency is fc in Hz.\nThe curve is first resampled with a uniform sample spacing,\nwith a period of 1/fs.\n\nAt this time, the filter is a Butterworth filter and it is\napplied in both directions in order to get 0 phase shift.\n\n:param fc: 3-dB frequency in Hertz.\n:param order: Order of the filter.\n:param kind: 'low' or 'high' pass.\n:param fs: (Re-) sampling frequency. If not supplied,\n    it is computed as 20 * fc.\n:return: Filtered Curve.\n```\n\nExample:\n\n\n```python\nn = 1000\nx = np.linspace(0, 10, num=n)\nf0 = 0.3  # Hz\nfc = 2 * f0  # Filter 3dB bandwidth\n\ncurve0 = Curve(x, np.sin(2 * np.pi * f0 * x))  # Noiseless\ncurven = Curve(x, np.random.randn(n))  # Noise\ncurve0n = curve0 + 0.5 * curven  # Noisy\ncurvefilt = curve0n.filter(fc)  # Filtered\n```\n\n\n```python\ncurve0n.plot(label='noisy')\ncurve0.plot(label='noiseless')\ncurvefilt.plot(label='filtered')\nlegend()\n```\n\n\n![png](https://bitbucket.org/jpcgt/curve/raw/3f1f8672be66496581ba24063df91ab3432556d1/img/output_45_1.png)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/jpcgt/curve",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "curve",
    "package_url": "https://pypi.org/project/curve/",
    "platform": "",
    "project_url": "https://pypi.org/project/curve/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/jpcgt/curve"
    },
    "release_url": "https://pypi.org/project/curve/0.0.7/",
    "requires_dist": [
      "matplotlib",
      "numpy",
      "scipy"
    ],
    "requires_python": ">=3.6",
    "summary": "A waveform manipulation and analysis library for Python",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7469960,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6beae5a5acdb7409738b07463007cbe7c38d3be03f953cb2c06272ba3bf9deb",
          "md5": "f8c21d96e01c0002a05a45804ae771de",
          "sha256": "09b42835a28bc16beae2f118936c5d8f28c3b128cb169027aac40d81a17eb11f"
        },
        "downloads": -1,
        "filename": "curve-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8c21d96e01c0002a05a45804ae771de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18810,
        "upload_time": "2020-05-22T21:16:50",
        "upload_time_iso_8601": "2020-05-22T21:16:50.842620Z",
        "url": "https://files.pythonhosted.org/packages/a6/be/ae5a5acdb7409738b07463007cbe7c38d3be03f953cb2c06272ba3bf9deb/curve-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cee94131437fb0597d8286c3f8320bde5043f9d32b8c401e7a357ad749d8805",
          "md5": "1b1d5479738214d3e81cf50f835c8ee0",
          "sha256": "65aad5349f9b51a4716412215f8ac4b5a654d4bc98868a6880a43a15f706150e"
        },
        "downloads": -1,
        "filename": "curve-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1b1d5479738214d3e81cf50f835c8ee0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19027,
        "upload_time": "2020-05-22T21:16:51",
        "upload_time_iso_8601": "2020-05-22T21:16:51.956875Z",
        "url": "https://files.pythonhosted.org/packages/2c/ee/94131437fb0597d8286c3f8320bde5043f9d32b8c401e7a357ad749d8805/curve-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a81ec777fac1a8193fc1f5f4e902eafabe55e88d2197a0ecd091a3889b5d9dd",
          "md5": "3688e00fa2c68a406dba31d740be27ce",
          "sha256": "30c479faee94ea5d3f5dcd4526fa446886d2d22f044c2bc75391fc673a5ff8e1"
        },
        "downloads": -1,
        "filename": "curve-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3688e00fa2c68a406dba31d740be27ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18936,
        "upload_time": "2020-06-02T20:24:59",
        "upload_time_iso_8601": "2020-06-02T20:24:59.344778Z",
        "url": "https://files.pythonhosted.org/packages/1a/81/ec777fac1a8193fc1f5f4e902eafabe55e88d2197a0ecd091a3889b5d9dd/curve-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bfef92efec1e8360b007f349cb8bffb088e14c799f59d01bef0a450120bef47",
          "md5": "c060c2acaf60279115fd2c9229b72357",
          "sha256": "47c6d512588ba71aed6a0490670d069cdfddceb11b4d04e7bdc2a64d33e97665"
        },
        "downloads": -1,
        "filename": "curve-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c060c2acaf60279115fd2c9229b72357",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19177,
        "upload_time": "2020-06-02T20:25:00",
        "upload_time_iso_8601": "2020-06-02T20:25:00.606149Z",
        "url": "https://files.pythonhosted.org/packages/7b/fe/f92efec1e8360b007f349cb8bffb088e14c799f59d01bef0a450120bef47/curve-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14c655aa52824bd4af398c0f8b9e4d195d69cefdd00b3c9dbdab54460f024d3d",
          "md5": "ca7fb7aef62636be073abb235d0a2045",
          "sha256": "2692bbe431a4be2083f4b09f68ee4b67ef03aec7918979f8419b7d52131db98d"
        },
        "downloads": -1,
        "filename": "curve-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca7fb7aef62636be073abb235d0a2045",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18958,
        "upload_time": "2020-06-13T21:36:41",
        "upload_time_iso_8601": "2020-06-13T21:36:41.948123Z",
        "url": "https://files.pythonhosted.org/packages/14/c6/55aa52824bd4af398c0f8b9e4d195d69cefdd00b3c9dbdab54460f024d3d/curve-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6ae85980414b43d61b7ceaf09a9624f991c5f91f8692e983f4a495b62a2fe7e",
          "md5": "de9f3a86a011cda8724dccb25bde894f",
          "sha256": "fec7b4b80972aa1fbe6f53f20c6683071b4291862193f6ef0973b82bca198ea0"
        },
        "downloads": -1,
        "filename": "curve-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "de9f3a86a011cda8724dccb25bde894f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19203,
        "upload_time": "2020-06-13T21:36:43",
        "upload_time_iso_8601": "2020-06-13T21:36:43.302781Z",
        "url": "https://files.pythonhosted.org/packages/d6/ae/85980414b43d61b7ceaf09a9624f991c5f91f8692e983f4a495b62a2fe7e/curve-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14c655aa52824bd4af398c0f8b9e4d195d69cefdd00b3c9dbdab54460f024d3d",
        "md5": "ca7fb7aef62636be073abb235d0a2045",
        "sha256": "2692bbe431a4be2083f4b09f68ee4b67ef03aec7918979f8419b7d52131db98d"
      },
      "downloads": -1,
      "filename": "curve-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca7fb7aef62636be073abb235d0a2045",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18958,
      "upload_time": "2020-06-13T21:36:41",
      "upload_time_iso_8601": "2020-06-13T21:36:41.948123Z",
      "url": "https://files.pythonhosted.org/packages/14/c6/55aa52824bd4af398c0f8b9e4d195d69cefdd00b3c9dbdab54460f024d3d/curve-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6ae85980414b43d61b7ceaf09a9624f991c5f91f8692e983f4a495b62a2fe7e",
        "md5": "de9f3a86a011cda8724dccb25bde894f",
        "sha256": "fec7b4b80972aa1fbe6f53f20c6683071b4291862193f6ef0973b82bca198ea0"
      },
      "downloads": -1,
      "filename": "curve-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "de9f3a86a011cda8724dccb25bde894f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19203,
      "upload_time": "2020-06-13T21:36:43",
      "upload_time_iso_8601": "2020-06-13T21:36:43.302781Z",
      "url": "https://files.pythonhosted.org/packages/d6/ae/85980414b43d61b7ceaf09a9624f991c5f91f8692e983f4a495b62a2fe7e/curve-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}