{
  "info": {
    "author": "shirecoding",
    "author_email": "shirecoding@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Documentation Status](https://readthedocs.org/projects/verypowerfulagents/badge/?version=latest)](https://verypowerfulagents.readthedocs.io/en/latest/?badge=latest)\n[![CircleCI](https://circleci.com/gh/shirecoding/VeryPowerfulAgents.svg?style=shield)](https://app.circleci.com/pipelines/github/shirecoding/VeryPowerfulAgents)\n[![CodeFactor](https://www.codefactor.io/repository/github/shirecoding/verypowerfulagents/badge)](https://www.codefactor.io/repository/github/shirecoding/verypowerfulagents)\n\n# VeryPowerfulAgents\n\nAgents are lightweight microservices with built-in interprocess communications infrastructure using ZeroMQ\n\n## Documentation\n\n- [Github](https://github.com/shirecoding/VeryPowerfulAgents)\n- [readthedocs](https://verypowerfulagents.readthedocs.io/en/latest/)\n\n## Features\n\n#### Agents\n\n- Graceful boot & shutdown with resource cleanup done correctly\n- User setup/shutdown override methods for graceful boot & shutdown\n- ZeroMQ communications is done in a thread safe manner using queues (ZeroMQ is not threadsafe)\n- Socket data is received through Observables using RxPy\n- Nicely formatted logs using self.log\n\n#### Powerful Agents\n\n- Pub/sub notification facilities\n- Router/client facilities\n- Simple Messaging protocol for standard facilities (notifications, client, etc ..)\n- Elliptical curve encryption and authentication\n- Production ready communication architectures\n- Mesh networks (TODO)\n- ... (TODO)\n\n#### Very Powerful Agents\n\n- REST server routes (TODO)\n- RPC endpoints (TODO)\n- File sharing (TODO)\n- ... (TODO)\n\n```bash\n# install from git\ngit clone https://github.com/shirecoding/VeryPowerfulAgents.git\ncd VeryPowerfulAgents\npip3 install ./\n\n# install from pypi\npip install powerful-agents\n```\n\n# Examples\n\n## Simple Echo Server & Client\n\n```python\nimport zmq\nimport time\nimport threading\nfrom agents import Agent\n\nclass EchoServer(Agent):\n\n    def setup(self, name=None, address=None):\n        self.connection = self.bind_socket(zmq.REP, {}, address)\n        self.connection.observable.subscribe(self.echo)\n\n    def echo(self, xs):\n        self.connection.send(xs)\n\nclass Client(Agent):\n\n    def setup(self, name=None, address=None):\n        self.counter = 0\n\n        # receive\n        self.connection = self.connect_socket(zmq.REQ, {}, address)\n        self.connection.observable.subscribe(lambda x: self.log.info(f\"received: {x}\"))\n\n        # begin sending forever, add to managed threads for graceful cleanup\n        t = threading.Thread(target=self.send_forever)\n        self.threads.append(t)\n        t.start()\n\n    def send_forever(self):\n        # use exit event to gracefully exit loop and graceful cleanup\n        while not self.exit_event.is_set():\n            time.sleep(1)\n            self.counter += 1\n            multipart_message = [str(self.counter).encode()]\n            self.log.info(f\"sending: {multipart_message}\")\n            self.connection.send(multipart_message)\n\nif __name__ == '__main__':\n    echo_server = EchoServer(name='server', address='tcp://0.0.0.0:5000')\n    client = Client(name='client', address='tcp://0.0.0.0:5000')\n```\n\n```bash\nINFO     [agent=server] booting up ...\nINFO     [agent=server] running user setup ...\nINFO     [agent=server] binding 4 socket on tcp://0.0.0.0:5000 ...\nINFO     [agent=server] booted in 0.00168609619140625 seconds ...\nINFO     [agent=server] start processing sockets ...\nINFO     [agent=client] booting up ...\nINFO     [agent=client] running user setup ...\nINFO     [agent=client] connecting 3 socket to tcp://0.0.0.0:5000 ...\nINFO     [agent=client] booted in 0.0009851455688476562 seconds ...\nINFO     [agent=client] start processing sockets ...\nINFO     [agent=client] sending: [b'1']\nINFO     [agent=client] received: [b'1']\nINFO     [agent=client] sending: [b'2']\nINFO     [agent=client] received: [b'2']\nINFO     [agent=client] sending: [b'3']\nINFO     [agent=client] received: [b'3']\nINFO     [agent=client] sending: [b'4']\nINFO     [agent=client] received: [b'4']\nINFO     [agent=client] sending: [b'5']\nINFO     [agent=client] received: [b'5']\n```\n\n## Pub/sub notifications\n\n```python\nimport zmq\nimport time\nimport threading\nfrom agents import PowerfulAgent, Message\n\nclass NotificationBroker(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None):\n        self.create_notification_broker(pub_address, sub_address)\n\nclass Sender(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None):\n        self.counter = 0\n        self.pub, self.sub = self.create_notification_client(pub_address, sub_address)\n\n        # begin sending forever, add to managed threads for graceful cleanup\n        t = threading.Thread(target=self.send_forever)\n        self.threads.append(t)\n        t.start()\n\n    def send_forever(self):\n        # use exit event to gracefully exit loop and graceful cleanup\n        while not self.exit_event.is_set():\n            time.sleep(1)\n            self.counter += 1\n            self.log.info(f\"publishing: {self.counter}\")\n            self.pub.send(Message.notification(payload=self.counter))\n\nclass Listener(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None):\n        self.pub, self.sub = self.create_notification_client(pub_address, sub_address)\n        self.sub.observable.subscribe(lambda x: self.log.info(f\"received: { x['payload'] }\"))\n\nif __name__ == '__main__':\n    broker = NotificationBroker(name='broker', pub_address='tcp://0.0.0.0:5000', sub_address='tcp://0.0.0.0:5001')\n    sender = Sender(name='sender', pub_address='tcp://0.0.0.0:5000', sub_address='tcp://0.0.0.0:5001')\n    listener = Listener(name='listener', pub_address='tcp://0.0.0.0:5000', sub_address='tcp://0.0.0.0:5001')\n```\n\n```bash\nINFO     [agent=broker] booting up ...\nINFO     [agent=broker] running user setup ...\nINFO     [agent=broker] binding 9 socket on tcp://0.0.0.0:5001 ...\nINFO     [agent=broker] binding 10 socket on tcp://0.0.0.0:5000 ...\nINFO     [agent=broker] booted in 0.0032880306243896484 seconds ...\nINFO     [agent=broker] start processing sockets ...\nINFO     [agent=sender] booting up ...\nINFO     [agent=sender] running user setup ...\nINFO     [agent=sender] connecting 1 socket to tcp://0.0.0.0:5000 ...\nINFO     [agent=sender] connecting 2 socket to tcp://0.0.0.0:5001 ...\nINFO     [agent=sender] booted in 0.0016701221466064453 seconds ...\nINFO     [agent=sender] start processing sockets ...\nINFO     [agent=listener] booting up ...\nINFO     [agent=listener] running user setup ...\nINFO     [agent=listener] connecting 1 socket to tcp://0.0.0.0:5000 ...\nINFO     [agent=listener] connecting 2 socket to tcp://0.0.0.0:5001 ...\nINFO     [agent=listener] booted in 0.0013346672058105469 seconds ...\nINFO     [agent=listener] start processing sockets ...\nINFO     [agent=sender] publishing: 1\nINFO     [agent=listener] received: 1\nINFO     [agent=sender] publishing: 2\nINFO     [agent=listener] received: 2\nINFO     [agent=sender] publishing: 3\nINFO     [agent=listener] received: 3\nINFO     [agent=sender] publishing: 4\nINFO     [agent=listener] received: 4\nINFO     [agent=sender] publishing: 5\nINFO     [agent=listener] received: 5\n```\n\n## Router Client\n\n```python\nimport zmq\nimport time\nimport threading\nfrom agents import PowerfulAgent, Message\n\nclass Router(PowerfulAgent):\n\n    def setup(self, name=None, address=None):\n        self.create_router(address)\n\nclass Client1(PowerfulAgent):\n\n    def setup(self, name=None, address=None):\n        self.counter = 0\n        self.client = self.create_client(address)\n\n        # begin sending forever, add to managed threads for graceful cleanup\n        t = threading.Thread(target=self.send_forever)\n        self.threads.append(t)\n        t.start()\n\n    def send_forever(self):\n        # use exit event to gracefully exit loop and graceful cleanup\n        while not self.exit_event.is_set():\n            time.sleep(1)\n            self.counter += 1\n            target = 'client2'\n            self.log.info(f\"send to {target}: {self.counter}\")\n            self.client.send(Message.client(name=target, payload=self.counter))\n\nclass Client2(PowerfulAgent):\n\n    def setup(self, name=None, address=None):\n        self.client = self.create_client(address)\n        self.client.observable.subscribe(lambda x: self.log.info(f\"received: {x['payload']}\"))\n\nif __name__ == '__main__':\n    router = Router(name='router', address='tcp://0.0.0.0:5000')\n    client1 = Client1(name='client1', address='tcp://0.0.0.0:5000')\n    client2 = Client2(name='client2', address='tcp://0.0.0.0:5000')\n```\n\n```bash\nINFO     [agent=router] booting up ...\nINFO     [agent=router] running user setup ...\nINFO     [agent=router] binding 6 socket on tcp://0.0.0.0:5000 ...\nINFO     [agent=router] booted in 0.0019252300262451172 seconds ...\nINFO     [agent=router] start processing sockets ...\nINFO     [agent=client1] booting up ...\nINFO     [agent=client1] running user setup ...\nINFO     [agent=client1] connecting 5 socket to tcp://0.0.0.0:5000 ...\nINFO     [agent=client1] booted in 0.0019159317016601562 seconds ...\nINFO     [agent=client1] start processing sockets ...\nINFO     [agent=client2] booting up ...\nINFO     [agent=client2] running user setup ...\nINFO     [agent=client2] connecting 5 socket to tcp://0.0.0.0:5000 ...\nINFO     [agent=client2] booted in 0.0008869171142578125 seconds ...\nINFO     [agent=client2] start processing sockets ...\nINFO     [agent=client1] send to client2: 1\nINFO     [agent=client2] received: 1\nINFO     [agent=client1] send to client2: 2\nINFO     [agent=client2] received: 2\nINFO     [agent=client1] send to client2: 3\nINFO     [agent=client2] received: 3\nINFO     [agent=client1] send to client2: 4\nINFO     [agent=client2] received: 4\nINFO     [agent=client1] send to client2: 5\nINFO     [agent=client2] received: 5\n```\n\n## Elliptical Curve Encryption\n\nThis example allows any client with the server's public key to connect and communicate over a secure channel\n\n```python\nimport zmq\nimport time\nimport threading\nfrom agents import Agent, PowerfulAgent, Message\n\n# generate public and private keys for server and client\nserver_public_key, server_private_key = Agent.curve_keypair()\nwrong_server_public_key, wrong_server_private_key = Agent.curve_keypair()\nclient_public_key, client_private_key = Agent.curve_keypair()\nclient2_public_key, client2_private_key = Agent.curve_keypair()\n\nclass NotificationBroker(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None):\n        self.create_notification_broker(pub_address, sub_address, options=self.curve_server_config(server_private_key))\n\nclass Sender(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None):\n        self.counter = 0\n        self.pub, self.sub = self.create_notification_client(\n            pub_address,\n            sub_address,\n            options=self.curve_client_config(server_public_key, client_public_key, client_private_key)\n        )\n\n        # begin sending forever, add to managed threads for graceful cleanup\n        t = threading.Thread(target=self.send_forever)\n        self.threads.append(t)\n        t.start()\n\n    def send_forever(self):\n        # use exit event to gracefully exit loop and graceful cleanup\n        while not self.exit_event.is_set():\n            time.sleep(1)\n            self.counter += 1\n            self.log.info(f\"publishing: {self.counter}\")\n            self.pub.send(Message.notification(payload=self.counter))\n\nclass Listener(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None):\n        self.pub, self.sub = self.create_notification_client(\n            pub_address,\n            sub_address,\n            options=self.curve_client_config(server_public_key, client_public_key, client_private_key)\n        )\n        self.sub.observable.subscribe(lambda x: self.log.info(f\"received: { x['payload'] }\"))\n\nclass ListenerInvalid(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None):\n        self.pub, self.sub = self.create_notification_client(\n            pub_address,\n            sub_address,\n            options=self.curve_client_config(wrong_server_public_key, client2_public_key, client2_private_key)\n        )\n        self.sub.observable.subscribe(lambda x: self.log.info(f\"received: { x['payload'] }\"))\n\nif __name__ == '__main__':\n    broker = NotificationBroker(name='broker', pub_address='tcp://0.0.0.0:5000', sub_address='tcp://0.0.0.0:5001')\n    sender = Sender(name='sender', pub_address='tcp://0.0.0.0:5000', sub_address='tcp://0.0.0.0:5001')\n    listener = Listener(name='listener', pub_address='tcp://0.0.0.0:5000', sub_address='tcp://0.0.0.0:5001')\n    listener_invalid = ListenerInvalid(name='listener_invalid', pub_address='tcp://0.0.0.0:5000', sub_address='tcp://0.0.0.0:5001')\n\n```\n\n```bash\nINFO     [agent=broker] booting up ...\nINFO     [agent=broker] running user setup ...\nINFO     [agent=broker] binding 9 socket on tcp://0.0.0.0:5001 ...\nINFO     [agent=broker] binding 10 socket on tcp://0.0.0.0:5000 ...\nINFO     [agent=broker] booted in 0.0027320384979248047 seconds ...\nINFO     [agent=broker] start processing sockets ...\nINFO     [agent=sender] booting up ...\nINFO     [agent=sender] running user setup ...\nINFO     [agent=sender] connecting 1 socket to tcp://0.0.0.0:5000 ...\nINFO     [agent=sender] connecting 2 socket to tcp://0.0.0.0:5001 ...\nINFO     [agent=sender] booted in 0.0042607784271240234 seconds ...\nINFO     [agent=sender] start processing sockets ...\nINFO     [agent=listener] booting up ...\nINFO     [agent=listener] running user setup ...\nINFO     [agent=listener] connecting 1 socket to tcp://0.0.0.0:5000 ...\nINFO     [agent=listener] connecting 2 socket to tcp://0.0.0.0:5001 ...\nINFO     [agent=listener] booted in 0.0016052722930908203 seconds ...\nINFO     [agent=listener] start processing sockets ...\nINFO     [agent=listener_invalid] booting up ...\nINFO     [agent=listener_invalid] running user setup ...\nINFO     [agent=listener_invalid] connecting 1 socket to tcp://0.0.0.0:5000 ...\nINFO     [agent=listener_invalid] connecting 2 socket to tcp://0.0.0.0:5001 ...\nINFO     [agent=listener_invalid] booted in 0.0014069080352783203 seconds ...\nINFO     [agent=listener_invalid] start processing sockets ...\nINFO     [agent=sender] publishing: 1\nINFO     [agent=listener] received: 1\nINFO     [agent=sender] publishing: 2\nINFO     [agent=listener] received: 2\nINFO     [agent=sender] publishing: 3\nINFO     [agent=listener] received: 3\n```\n\n## Full Authentication\n\nThis example adds another layer of protection for the server by allowing only trusted clients to connect.\n\n```python\nimport os\nimport zmq\nimport time\nimport threading\nimport tempfile\nfrom agents import Agent, PowerfulAgent, Message\n\nclass NotificationBroker(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None, private_key=None, client_certificates_path=None):\n\n        # configure public key auth/encryption if private_key is provided\n        options = self.curve_server_config(private_key) if private_key else {}\n        self.create_notification_broker(pub_address, sub_address, options=options)\n\n        # start authenticator if client_certificates_path is provided\n        if client_certificates_path:\n            self.auth = self.start_authenticator(domain='*', certificates_path=client_certificates_path)\n\nclass Sender(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None, private_key=None, public_key=None, server_public_key=None):\n        # configure public key auth/encryption if keys are provided\n        if private_key and public_key and server_public_key:\n            options = self.curve_client_config(server_public_key, public_key, private_key)\n        else:\n            options = {}\n        self.counter = 0\n        self.pub, self.sub = self.create_notification_client(pub_address, sub_address, options=options)\n\n        # begin sending forever, add to managed threads for graceful cleanup\n        t = threading.Thread(target=self.send_forever)\n        self.threads.append(t)\n        t.start()\n\n    def send_forever(self):\n        # use exit event to gracefully exit loop and graceful cleanup\n        while not self.exit_event.is_set():\n            time.sleep(1)\n            self.counter += 1\n            self.log.info(f\"publishing: {self.counter}\")\n            self.pub.send(Message.notification(payload=self.counter))\n\nclass Listener(PowerfulAgent):\n\n    def setup(self, name=None, pub_address=None, sub_address=None, private_key=None, public_key=None, server_public_key=None):\n        # configure public key auth/encryption if keys are provided\n        if private_key and public_key and server_public_key:\n            options = self.curve_client_config(server_public_key, public_key, private_key)\n        else:\n            options = {}\n        self.pub, self.sub = self.create_notification_client(pub_address, sub_address, options=options)\n        self.sub.observable.subscribe(lambda x: self.log.info(f\"received: { x['payload'] }\"))\n\n\nif __name__ == '__main__':\n\n    with tempfile.TemporaryDirectory() as trusted_keys_path, \\\n    tempfile.TemporaryDirectory() as untrusted_keys_path:\n\n        # create key pairs in corresponding directories\n        Agent.create_curve_certificates(trusted_keys_path, 'server')\n        Agent.create_curve_certificates(trusted_keys_path, 'listener')\n        Agent.create_curve_certificates(untrusted_keys_path, 'listener2')\n\n        # load key pairs\n        server_public_key, server_private_key = Agent.load_curve_certificate(os.path.join(trusted_keys_path, \"server.key_secret\"))\n        listener_public_key, listener_private_key = Agent.load_curve_certificate(os.path.join(trusted_keys_path, \"listener.key_secret\"))\n        listener2_public_key, listener2_private_key = Agent.load_curve_certificate(os.path.join(untrusted_keys_path, \"listener2.key_secret\"))\n\n        broker = NotificationBroker(\n            name='broker',\n            pub_address='tcp://127.0.0.1:5000',\n            sub_address='tcp://127.0.0.1:5001',\n            private_key=server_private_key,\n            client_certificates_path=trusted_keys_path\n        )\n        sender = Sender(\n            name='sender',\n            pub_address='tcp://127.0.0.1:5000',\n            sub_address='tcp://127.0.0.1:5001',\n            private_key=server_private_key,\n            public_key=server_public_key,\n            server_public_key=server_public_key\n        )\n        listener = Listener(\n            name='listener',\n            pub_address='tcp://127.0.0.1:5000',\n            sub_address='tcp://127.0.0.1:5001',\n            private_key=listener_private_key,\n            public_key=listener_public_key,\n            server_public_key=server_public_key\n        )\n        listener2 = Listener(\n            name='listener2',\n            pub_address='tcp://127.0.0.1:5000',\n            sub_address='tcp://127.0.0.1:5001',\n            private_key=listener2_private_key,\n            public_key=listener2_public_key,\n            server_public_key=server_public_key\n        )\n```\n\n```bash\nINFO     [agent=broker] booting up ...\nINFO     [agent=broker] running user setup ...\nINFO     [agent=broker] binding 9 socket on tcp://127.0.0.1:5001 ...\nINFO     [agent=broker] binding 10 socket on tcp://127.0.0.1:5000 ...\nINFO     [agent=broker] trusted clients: {b'LJl(is$S!/A[3uj]lx}GosmI^28J+3TrR#N5L*C3': True, b'xHVFw-cZptp-.U=rMK)OdTM*p5iwnxX.6HEZWt9v': True}\nDEBUG    [agent=broker] Starting\nINFO     [agent=broker] authenticator started ...\nDEBUG    [agent=broker] auth received API command b'ALLOW'\nDEBUG    [agent=broker] Allowing\nDEBUG    [agent=broker] auth received API command b'CURVE'\nDEBUG    [agent=broker] Configure curve: *[/var/folders/v2/9dzql1f509n1rqnlgrxs9_180000gn/T/tmp6f67aogg]\nINFO     [agent=broker] booted in 0.006651878356933594 seconds ...\nINFO     [agent=broker] start processing sockets ...\nINFO     [agent=sender] booting up ...\nINFO     [agent=sender] running user setup ...\nINFO     [agent=sender] connecting 1 socket to tcp://127.0.0.1:5000 ...\nINFO     [agent=sender] connecting 2 socket to tcp://127.0.0.1:5001 ...\nINFO     [agent=sender] booted in 0.003384113311767578 seconds ...\nINFO     [agent=sender] start processing sockets ...\nINFO     [agent=listener] booting up ...\nINFO     [agent=listener] running user setup ...\nINFO     [agent=listener] connecting 1 socket to tcp://127.0.0.1:5000 ...\nINFO     [agent=listener] connecting 2 socket to tcp://127.0.0.1:5001 ...\nINFO     [agent=listener] booted in 0.001445770263671875 seconds ...\nINFO     [agent=listener] start processing sockets ...\nINFO     [agent=listener2] booting up ...\nINFO     [agent=listener2] running user setup ...\nINFO     [agent=listener2] connecting 1 socket to tcp://127.0.0.1:5000 ...\nINFO     [agent=listener2] connecting 2 socket to tcp://127.0.0.1:5001 ...\nINFO     [agent=listener2] booted in 0.0016427040100097656 seconds ...\nINFO     [agent=listener2] start processing sockets ...\nDEBUG    [agent=broker] version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'\nDEBUG    [agent=broker] ALLOWED (CURVE) domain=* client_key=b'LJl(is$S!/A[3uj]lx}GosmI^28J+3TrR#N5L*C3'\nDEBUG    [agent=broker] ZAP reply code=b'200' text=b'OK'\nDEBUG    [agent=broker] version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'\nDEBUG    [agent=broker] ALLOWED (CURVE) domain=* client_key=b'LJl(is$S!/A[3uj]lx}GosmI^28J+3TrR#N5L*C3'\nDEBUG    [agent=broker] ZAP reply code=b'200' text=b'OK'\nDEBUG    [agent=broker] version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'\nDEBUG    [agent=broker] ALLOWED (CURVE) domain=* client_key=b'xHVFw-cZptp-.U=rMK)OdTM*p5iwnxX.6HEZWt9v'\nDEBUG    [agent=broker] ZAP reply code=b'200' text=b'OK'\nDEBUG    [agent=broker] version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'\nDEBUG    [agent=broker] DENIED (CURVE) domain=* client_key=b're69C5>LWfw%//*Qc^6Ei]>ntoYZCc6E]rZXA=F9'\nDEBUG    [agent=broker] ZAP reply code=b'400' text=b'Unknown key'\nDEBUG    [agent=broker] version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'\nDEBUG    [agent=broker] ALLOWED (CURVE) domain=* client_key=b'xHVFw-cZptp-.U=rMK)OdTM*p5iwnxX.6HEZWt9v'\nDEBUG    [agent=broker] ZAP reply code=b'200' text=b'OK'\nDEBUG    [agent=broker] version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'\nDEBUG    [agent=broker] DENIED (CURVE) domain=* client_key=b're69C5>LWfw%//*Qc^6Ei]>ntoYZCc6E]rZXA=F9'\nDEBUG    [agent=broker] ZAP reply code=b'400' text=b'Unknown key'\nINFO     [agent=sender] publishing: 1\nINFO     [agent=listener] received: 1\nINFO     [agent=sender] publishing: 2\nINFO     [agent=listener] received: 2\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/shirecoding/VeryPowerfulAgents/archive/0.0.4.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shirecoding/VeryPowerfulAgents.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "powerful-agents",
    "package_url": "https://pypi.org/project/powerful-agents/",
    "platform": "",
    "project_url": "https://pypi.org/project/powerful-agents/",
    "project_urls": {
      "Download": "https://github.com/shirecoding/VeryPowerfulAgents/archive/0.0.4.tar.gz",
      "Homepage": "https://github.com/shirecoding/VeryPowerfulAgents.git"
    },
    "release_url": "https://pypi.org/project/powerful-agents/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11182813,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d621f362b90430d462a635ef136e320c14f2899da0ade1894c64da3b9678fb4f",
          "md5": "b9193c73c92497f6bf85ebda650877c1",
          "sha256": "0642783f29a25c93a39f88a3b271a994cae1b2b34363770f0d1422a0b875c264"
        },
        "downloads": -1,
        "filename": "powerful-agents-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b9193c73c92497f6bf85ebda650877c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3963,
        "upload_time": "2020-12-25T15:09:04",
        "upload_time_iso_8601": "2020-12-25T15:09:04.303562Z",
        "url": "https://files.pythonhosted.org/packages/d6/21/f362b90430d462a635ef136e320c14f2899da0ade1894c64da3b9678fb4f/powerful-agents-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "076fe925b73d8556276ff4559a4ed4c83b675ecfdad42b5fc92848b4d4981b5e",
          "md5": "6d1b24068007beb2ecb2ca43e4488ea9",
          "sha256": "35d26436d3f6d5ff1d7221d7951c0cee8fb17168110bfeac7fd4638779c36759"
        },
        "downloads": -1,
        "filename": "powerful-agents-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6d1b24068007beb2ecb2ca43e4488ea9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6607,
        "upload_time": "2020-12-26T07:55:45",
        "upload_time_iso_8601": "2020-12-26T07:55:45.953599Z",
        "url": "https://files.pythonhosted.org/packages/07/6f/e925b73d8556276ff4559a4ed4c83b675ecfdad42b5fc92848b4d4981b5e/powerful-agents-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d80d25c93394e34bbdc8b45e875f00f6275ff0fb28eff5099f3b52466666cdfc",
          "md5": "94a7434e6b29f21afd229258e3cf6c8e",
          "sha256": "8ad6bc64abf0d62a5f24c433b4c0d6d38140f5775e43b48333c5062754b28ff0"
        },
        "downloads": -1,
        "filename": "powerful-agents-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "94a7434e6b29f21afd229258e3cf6c8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18694,
        "upload_time": "2021-07-31T10:43:16",
        "upload_time_iso_8601": "2021-07-31T10:43:16.813641Z",
        "url": "https://files.pythonhosted.org/packages/d8/0d/25c93394e34bbdc8b45e875f00f6275ff0fb28eff5099f3b52466666cdfc/powerful-agents-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06fe0fa6b02e0a04e478c696c95d98acd359f30bf0942913f2e03573888246fe",
          "md5": "b90e06d6a43015ba88107ac9e93444db",
          "sha256": "1f60444e1a5d5db582fb65f04d7a45edbecbb95c912338f98a4a66939aecdd7b"
        },
        "downloads": -1,
        "filename": "powerful-agents-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b90e06d6a43015ba88107ac9e93444db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19929,
        "upload_time": "2021-08-15T10:41:02",
        "upload_time_iso_8601": "2021-08-15T10:41:02.695966Z",
        "url": "https://files.pythonhosted.org/packages/06/fe/0fa6b02e0a04e478c696c95d98acd359f30bf0942913f2e03573888246fe/powerful-agents-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06fe0fa6b02e0a04e478c696c95d98acd359f30bf0942913f2e03573888246fe",
        "md5": "b90e06d6a43015ba88107ac9e93444db",
        "sha256": "1f60444e1a5d5db582fb65f04d7a45edbecbb95c912338f98a4a66939aecdd7b"
      },
      "downloads": -1,
      "filename": "powerful-agents-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b90e06d6a43015ba88107ac9e93444db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19929,
      "upload_time": "2021-08-15T10:41:02",
      "upload_time_iso_8601": "2021-08-15T10:41:02.695966Z",
      "url": "https://files.pythonhosted.org/packages/06/fe/0fa6b02e0a04e478c696c95d98acd359f30bf0942913f2e03573888246fe/powerful-agents-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}