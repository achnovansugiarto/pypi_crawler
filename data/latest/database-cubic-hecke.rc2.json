{
  "info": {
    "author": "Sebastian Oehms",
    "author_email": "seb.oehms@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Database Cubic Hecke Algebras\n\nThis repository contains data for the representations of the\n*Cubic Hecke Algebra* calculated by [Ivan Marin](http://www.lamfa.u-picardie.fr/marin/representationH4-en.html).\nThe original data of Ivan Marin are published in a format which\ncan be read by [Maple](https://en.wikipedia.org/wiki/Maple_(software)).\nThe purpose of this repository is, to make them available in\na Python like style such that they can be easily installed into\n[SageMath](https://en.wikipedia.org/wiki/SageMath) using `pip`.\n\nThis repository was created as a part of the [SageMath](https://www.sagemath.org/)\nfunctionality for the cubic Hecke algebras (see Trac ticket\n[#29717](https://trac.sagemath.org/ticket/29717))\n\nIn addition to Ivan Marin's data it contains coefficients for linear forms\non the cubic Hecke algebras on up to four strands satisfying the Markov\ntrace condition (see for example\n[Louis Kauffman: Knots and Physics, sections 7.1 and 7.2](https://www.worldscientific.com/worldscibooks/10.1142/4256)).\nThis data has been precomputed with the SageMath functionality\nintroduced by the above mentioned ticket\n(see [Python module create_markov_trace_data.py](create_markov_trace_data.py)).\n\n## Usage\n\nIn Python, it can be used as follows:\n\n```python\n>>> from database_cubic_hecke import read_basis\n>>> b4 = read_basis()\n>>> len(b4)\n648\n>>> b2 = read_basis(num_strands=2); b2\n[[], [1], [-1]]\n>>> b3 = read_basis(num_strands=3)\n>>> len(b3)\n24\n\n>>> from database_cubic_hecke import read_irr\n>>> dim_list, repr_list, repr_list_inv = read_irr()\n>>> dim_list\n[1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 8, 8, 8, 9, 9]\n>>> repr_list[5][1]\n{(0, 0): c, (0, 1): -1, (1, 1): a}\n>>> from math import sqrt\n>>> j = (sqrt(3)*1j-1)/2\n>>> dim_list, repr_list, repr_list_inv = read_irr((5, 7, 3, j))\n>>> repr_list[23][0][(3, 8)]\n(1.5+6.06217782649107j)\n\n>>> from database_cubic_hecke import read_reg\n>>> dim_list, repr_list, repr_list_inv = read_reg()\n>>> dim_list\n[648]\n>>> [len(m) for m in repr_list[0]]\n[1080, 1701, 7862]\n>>> [len(m) for m in repr_list_inv[0]]\n[1080, 1728, 9370]\n>>> dim_list, repr_list, repr_list_inv = read_reg(num_strands=3)\n>>> dim_list\n[24]\n>>> [len(m) for m in repr_list[0]]\n[40, 63]\n\n>>> from database_cubic_hecke.markov_trace_coeffs import read_markov\n>>> read_markov('U2', (3,5,7,11), num_strands=3)\n[0, 11, 0.09090909090909091, 11, 0.09090909090909091, 0, 0, 0, 0, -55, 11, 11,\n -4.714285714285714, -0.45454545454545453, 0.09090909090909091, 0, 0, 0, 0,\n 0.09090909090909091, -0.03896103896103896, -0.45454545454545453, 0, 0]\n```\n\nIf you have [SymPy](https://de.wikipedia.org/wiki/SymPy) installed you can obtain\nrepresentation matrices directly:\n\n```python\n>>> from database_cubic_hecke import irr_reprs_matrices\n>>> m1, m2, m3 = irr_reprs_matrices(5)\n>>> m1i, m2i, m3i = irr_reprs_matrices(5, inverse=True)\n>>> m1 * m1i\nMatrix([\n[1, 0],\n[0, 1]])\n>>> m1*m2*m1 == m2*m1*m2\nTrue\n>>> m1i*m2i*m1i == m2i*m1i*m2i\nTrue\n\n>>> from database_cubic_hecke import reg_reprs_matrices\n>>> m1, m2, m3 = reg_reprs_matrices()\n>>> m1.shape\n(648, 648)\n>>> m1i, m2i = reg_reprs_matrices(inverse=True, num_strands=3)\n>>> m1i.shape\n(24, 24)\n>>> m1i*m2i*m1i == m2i*m1i*m2i\nTrue\n\n>>> from database_cubic_hecke.markov_trace_coeffs import read_markov\n>>> from sympy import var\n>>> u, v, w, s = var('u, v, w, s')\n>>> variables = (u, v, w, s)\n>>> read_markov('U2', variables, num_strands=3)\n[0, s, 1/s, s, 1/s, 0, 0, 0, 0, -s*v, s, s, -s*u/w, -v/s, 1/s,\n0, 0, 0, 0, 1/s, -u/(s*w), -v/s, 0, 0]\n```\n\nThe usage in Sage will be implicitely via the new class `CubicHeckeAlgebra` according to\nthe Trac ticket [#29717](https://trac.sagemath.org/ticket/29717). But anyway, it can also\nbe used indenpendently, for example:\n\n```python\nsage: from database_cubic_hecke import read_irr\nsage: F = CyclotomicField(3)\nsage: L.<a, b, c> = LaurentPolynomialRing(F)\nsage: T = L.gens_dict_recursive()\nsage: T['j'] = T['zeta3']\nsage: T.pop('zeta3')\nsage: irr = read_irr(tuple(T.values()))\nsage: dim_list, repr_list, repr_list_inv= irr\nsage: m1d, m2d , m3d = repr_list[23]\nsage: d = dim_list[23]\nsage: m1 = matrix(d, d, m1d)\nsage: m2 = matrix(d, d, m2d)\nsage: m3 = matrix(d, d, m3d)\nsage: m1\n[             c              0              0              0              0              0              0              0              0]\n[     b^2 + a*c              b              0              0              0              0   (-zeta3)*b*c              0              0]\n[             b              1              a              0              0              0              c              0              0]\n[             0              0              0              a              0              0             -c (-zeta3 - 1)*c    a + zeta3*b]\n[   zeta3*a - b              0              0              0              b              0              0              0              0]\n[       zeta3*a              0              0              0              b              a              0              0              0]\n[             0              0              0              0              0              0              c              0              0]\n[             0              0              0              0              0              0              0              c              0]\n[             0              0              0              0              0              0              0        zeta3*c              b]\n\nsage: m1*m2*m1 == m2*m1*m2\nTrue\nsage: m3*m2*m3 == m2*m3*m2\nTrue\nsage: m3*m1 == m1*m3\nTrue\n\n\nsage: from database_cubic_hecke import read_reg\nsage: R.<u, v, w> = ZZ[]\nsage: B = R.localization(w)\nsage: T = B.gens_dict_recursive()\nsage: reg = read_reg(tuple(T.values()))\nsage: dim_list, repr_list, repr_list_inv= reg\nsage: m1d, m2d , m3d = repr_list[0]\nsage: d = dim_list[0]\nsage: m1 = matrix(d, d, m1d)\nsage: m2 = matrix(d, d, m2d)\nsage: m3 = matrix(d, d, m3d)\nsage: m1\n648 x 648 sparse matrix over Multivariate Polynomial Ring in u, v, w over Integer Ring localized at (w,) (use the '.str()' method to see the entries)\n\nsage: m1*m2*m1 == m2*m1*m2\nTrue\nsage: m3*m2*m3 == m2*m3*m2\nTrue\nsage: m3*m1 == m1*m3\nTrue\n```\n\n\n\nTo build a new release, the files containing the data in Python syntax can be\n upgraded with the [create_marin_data script](create_marin_data.py). There is a\n[workflow](https://github.com/soehms/database_cubic_hecke/blob/main/.github/workflows/check_version_changed.yml)\nto run this script and build a new release if differences are detected. It can\nbe triggered manually.\n\n## Installation\n\n### Python\n\n```bash\npip install database_cubic_hecke\n```\n\nor\n\n```bash\npip install database_cubic_hecke==2022.3.5\n```\n\nif you want to install a former version.\n\n\n### SageMath\n\nAfter release of the above mentioned Trac ticket, the database can be installed in Sage by:\n\n```bash\nsage -i database_cubic_hecke\n```\n\nThis will contain integration with the cubic Hecke algebra functionality of Sage.\nBefore, or to use it independent on the new Sage functionality the installation\nworks as follows:\n\n```bash\nsage -pip install database_cubic_hecke\n```\n\nor\n\n```bash\nsage -pip install database_cubic_hecke==2022.3.5\n```\n\nfor a special version.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/soehms/database_cubic_hecke)\n\n\n## Versioning\n\nVersion numbers are automatically generated on a manually triggered workflow\n`Check version changed` if differences to the original databases are detected.\nThey follow the scheme\n\n\\<year\\>.\\<month\\>.\\<day\\>\n\nwith respect to the date the workflow is triggered.\n\n## Help\n\nIf you note a divergence between this repository and the original data in case\nthe current release is older than a month please create an issue about that.\n\n## Credits\n\nMany thanks to Ivan Marin to make his data available for their use in Sage.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/soehms/database_cubic_hecke",
    "keywords": "Hecke,algebra,SageMath,database,cyclotomic,Markov,mathematics",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "database-cubic-hecke",
    "package_url": "https://pypi.org/project/database-cubic-hecke/",
    "platform": null,
    "project_url": "https://pypi.org/project/database-cubic-hecke/",
    "project_urls": {
      "Homepage": "https://github.com/soehms/database_cubic_hecke"
    },
    "release_url": "https://pypi.org/project/database-cubic-hecke/2022.4.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Ivan Marin's representations of the cubic Hecke algebra on 4 strands as Python dictionaries",
    "version": "2022.4.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13402387,
  "releases": {
    "2022.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e92b5bbc13212304f03dcf400130a86c1f8d6b1c7bc608bc7d46afe40d34ad30",
          "md5": "4f83516e155515f17ebd88c56bc0f31b",
          "sha256": "1c45ea30431698b0604924172e7e934e65d7db7e381f4173197704030b0c3bce"
        },
        "downloads": -1,
        "filename": "database_cubic_hecke-2022.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4f83516e155515f17ebd88c56bc0f31b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 436681,
        "upload_time": "2022-03-14T20:21:17",
        "upload_time_iso_8601": "2022-03-14T20:21:17.469946Z",
        "url": "https://files.pythonhosted.org/packages/e9/2b/5bbc13212304f03dcf400130a86c1f8d6b1c7bc608bc7d46afe40d34ad30/database_cubic_hecke-2022.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04be849a98e3e8ec5096dd8aaefc7899b07abc0e227e1b511d6ed6ef33323ee6",
          "md5": "87f2014d8a6ea36db653ff68377c2982",
          "sha256": "8c9f2cf6975e51962c83ec8d10406bedeac009038123fd3ad33a9435eb20e277"
        },
        "downloads": -1,
        "filename": "database_cubic_hecke-2022.4.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87f2014d8a6ea36db653ff68377c2982",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 440283,
        "upload_time": "2022-04-04T17:15:39",
        "upload_time_iso_8601": "2022-04-04T17:15:39.537997Z",
        "url": "https://files.pythonhosted.org/packages/04/be/849a98e3e8ec5096dd8aaefc7899b07abc0e227e1b511d6ed6ef33323ee6/database_cubic_hecke-2022.4.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5da7dd4c6e5d71ab4823e729d5e6ec659cb8640381070ffbebe325b663b9073f",
          "md5": "7b1dc2d0cc396c36774c45ce73133419",
          "sha256": "553654a4ce987a277fe956a9a450d738bd1f58b96c45499075e28f2bca927ae9"
        },
        "downloads": -1,
        "filename": "database_cubic_hecke-2022.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7b1dc2d0cc396c36774c45ce73133419",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 436248,
        "upload_time": "2022-04-04T17:15:40",
        "upload_time_iso_8601": "2022-04-04T17:15:40.773941Z",
        "url": "https://files.pythonhosted.org/packages/5d/a7/dd4c6e5d71ab4823e729d5e6ec659cb8640381070ffbebe325b663b9073f/database_cubic_hecke-2022.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04be849a98e3e8ec5096dd8aaefc7899b07abc0e227e1b511d6ed6ef33323ee6",
        "md5": "87f2014d8a6ea36db653ff68377c2982",
        "sha256": "8c9f2cf6975e51962c83ec8d10406bedeac009038123fd3ad33a9435eb20e277"
      },
      "downloads": -1,
      "filename": "database_cubic_hecke-2022.4.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "87f2014d8a6ea36db653ff68377c2982",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 440283,
      "upload_time": "2022-04-04T17:15:39",
      "upload_time_iso_8601": "2022-04-04T17:15:39.537997Z",
      "url": "https://files.pythonhosted.org/packages/04/be/849a98e3e8ec5096dd8aaefc7899b07abc0e227e1b511d6ed6ef33323ee6/database_cubic_hecke-2022.4.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5da7dd4c6e5d71ab4823e729d5e6ec659cb8640381070ffbebe325b663b9073f",
        "md5": "7b1dc2d0cc396c36774c45ce73133419",
        "sha256": "553654a4ce987a277fe956a9a450d738bd1f58b96c45499075e28f2bca927ae9"
      },
      "downloads": -1,
      "filename": "database_cubic_hecke-2022.4.4.tar.gz",
      "has_sig": false,
      "md5_digest": "7b1dc2d0cc396c36774c45ce73133419",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 436248,
      "upload_time": "2022-04-04T17:15:40",
      "upload_time_iso_8601": "2022-04-04T17:15:40.773941Z",
      "url": "https://files.pythonhosted.org/packages/5d/a7/dd4c6e5d71ab4823e729d5e6ec659cb8640381070ffbebe325b663b9073f/database_cubic_hecke-2022.4.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}