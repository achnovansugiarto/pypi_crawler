{
  "info": {
    "author": "Miguel Romero",
    "author_email": "romeromiguelin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Welcome to Node Classification\n==============================\n\n* Written by Miguel Romero\n* Last update: 18/08/21\n\nNode classification\n-------------------\n\nThis package aims to provide different approaches to the *node classification*\nproblem (also known as *attribute prediction*) using machine learning\ntechniques. There are two approaches available: flat node classification (fnc)\nand hierarchical classification (hc). Both approaches are based on a gradient\nboosting decision tree algorithm called `XGBoost\n<https://xgboost.readthedocs.io/en/latest/>`_, in addition the approaches are\nequipped with an over-sampling technique call `SMOTE\n<https://imbalanced-learn.org/stable/references/generated/imblearn.over_sampling.SMOTE.html>`_.\n\nFlat classification\n^^^^^^^^^^^^^^^^^^^\n\nFlat node classification aims to valuate whether the structural (topological)\nproperties of a network are useful for predicting node attributes of\nnodes (i.e., node classification), without considering the (possible)\nrelationships between the classes of the node attribute to be predicted, i.e.,\nthe classes are predicted independently.\n\nHierarchical classification\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nHierarchical node classification considers the hierarchical organization of\nthe classes of a node attribute to be predicted. Using a top-down approach a\nbinary classifier is trained per class according to the hierarchy, which is\nrepresented as a DAG.\n\nInstallation\n------------\n\nThe node classification package can be install using pip, the requirements\nwill be automatically installed::\n\n  python3 -m pip install nodeclass\n\nThe source code and examples can be found in this\n`GitHub repository <https://github.com/migueleci/node_classification>`_.\n\nExample\n-------\n\nFlat classification\n^^^^^^^^^^^^^^^^^^^\n\nThis example illustrates how the node classification package can be used\nto check whether the structural properties of the gene co-expression network\nimprove the performance of the prediction of gene functions for rice\n(*Oryza sativa Japonica*). In this example, a gene co-expression network\ngathered from `ATTED II <https://atted.jp/>`_ is used.\n\nHow to run the example?\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe complete source code of the example can be found in the\n`GitHub repository <https://github.com/migueleci/node_classification>`_. First, the\n*xgbfnc* package need to be imported::\n\n  from nodeclass.models.xgbfnc import XGBfnc\n  from nodeclass.tools import data\n\nAfter creating adjacency matrix ``adj`` for the network, the structural\nproperties are computed using the module `data` of the package::\n\n  df, strc_cols = data.compute_strc_prop(adj)\n\nThis method returns a DataFrame with the structural properties of the network\nand a list of the names of these properties (i.e., column names). After adding\nthe additional features of the network to the DataFrame, the XGBhc module is\nused to instantiate the XGBhc class::\n\n  test = XGBhc()\n  test.load_data(df, strc_cols, y, term, output_path='output')\n  ans, pred, params = test.structural_test()\n\nThe data of the network is loaded using the ``load_data`` method. And the\nstructural test is execute using the ``structural_test`` method. The test\nreturns a boolean value which indicates whether the structural properties\nhelp to improve the prediction performance, the prediction for the model\nincluding the structural properties and its best parameters.\n\nTo run the example execute the following commands::\n\n  cd test/flat_classification\n  python3 test_small.py\n\nHierarchical classification\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis example illustrates how the hierarchical classification package can\nbe used to predict gene functions considering the hierachical structure of\ngene functions (as determined by `Gene Ontology <http://geneontology.org/>`_)\nbased on the gene co-expression network. This example uses the data for rice\n(*Oryza sativa Japonica*),the gene co-expression network (GCN) was\ngathered from `ATTED II <https://atted.jp/>`_.\n\nHow to run the example?\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe complete source code of the example can be found in the\n`GitHub repository <https://github.com/migueleci/node_classification>`_. First, the\n*xgbhc* package need to be imported::\n\n  from nodeclass.models.xgbhc import XGBhc\n  from nodeclass.tools import data\n\nThe adjacency matrix for the GCN and the gene functions (from ancestral\nrelations of biological processes), and the matrix of associations between\ngenes and functions are created using the packaga ``data`` as follows::\n\n  gcn, go_by_go, gene_by_go, G, T = data.create_matrices(data_ppi, data_isa, data_term_def, data_gene_term, OUTPUT_PATH, True)\n\nThe tree representation of the hierarchy is generated from the adjacency\nmatrix of the classes by removing the isolated classes, filtering the classes\naccording to the number of nodes associated (if required) and finding the\nsub-hierarchies remaining. Then a\n`minimum spanning tree <https://en.wikipedia.org/wiki/Minimum_spanning_tree>`_\n(MST) algorithm is applied to each sub-hierarchy to get the its tree\nrepresentation (the order and ancestors of the classes will be calculated)::\n\n  roots, subh_go_list = data.generate_hierarchy(gcn, go_by_go, gene_by_go, data_term_def, G, T, OUTPUT_PATH, filter=[5,300], trace=True)\n  root, subh_go = roots[13], subh_go_list[13]\n  subh_adj = data.hierarchy_to_tree(gcn, go_by_go, gene_by_go, T, subh_go, OUTPUT_PATH)\n\nAdditionally, the structural properties of the sub-graph of the GCN,\ncorresponding to the set of nodes associated to the classes in the\nsub-hierarchy, are computed using the module `data`::\n\n  data.compute_strc_prop(subh_adj, path=OUTPUT_PATH)\n\nFinally, the XGBhc class is instantiated, the data of the sub-hierarchy is\nloaded and the prediction is done as follows::\n\n  model = XGBhc()\n  model.load_data(data, root, hierarchy, ancestors, DATA_PATH, OUTPUT_PATH)\n  model.train_hierarchy()\n\nThe results of the prediction are saved on the ``OUTPUT_PATH``, including the\nroc and precision-recall curve, the confusion matrix and a csv file with some\nperformance metrics (such as the auc roc, average precision, recall, precision\nand F1, true positive and true negative rate and the execution time).\n\nTo run the example execute the following commands::\n\n  cd test/hierarchical_classification\n  python3 test_data.py\n  python3 test.py\n\nDocumentation\n=============\n\nDocumentation of the package can be found `here <https://nodeclass.readthedocs.io/en/latest/>`_.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/migueleci/node_classification",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nodeclass",
    "package_url": "https://pypi.org/project/nodeclass/",
    "platform": "",
    "project_url": "https://pypi.org/project/nodeclass/",
    "project_urls": {
      "Homepage": "https://github.com/migueleci/node_classification"
    },
    "release_url": "https://pypi.org/project/nodeclass/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Node classification package",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11216203,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bf50205ef44cb5e28e45811641e30f101f77daafce488b5aed45d650d3d1881",
          "md5": "4a50451b6ecef04e1df4e51b6facc180",
          "sha256": "279e661ed6ae068d45233f96f0640fae3e48ca24e335e098476ed0880b09b5ae"
        },
        "downloads": -1,
        "filename": "nodeclass-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4a50451b6ecef04e1df4e51b6facc180",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33037,
        "upload_time": "2021-08-18T21:26:05",
        "upload_time_iso_8601": "2021-08-18T21:26:05.078136Z",
        "url": "https://files.pythonhosted.org/packages/5b/f5/0205ef44cb5e28e45811641e30f101f77daafce488b5aed45d650d3d1881/nodeclass-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62f0d65f4f93572ff54a85f64df7ba6a9f34ffc748e3de1dc45b0dc45c64a289",
          "md5": "c9c45e9523f4ed2ccd3aa6bfbadfb1f5",
          "sha256": "dc8048c86d5e2882c632688eea0760df46dbc3315947c83c59df0923a51601a9"
        },
        "downloads": -1,
        "filename": "nodeclass-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c9c45e9523f4ed2ccd3aa6bfbadfb1f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32625,
        "upload_time": "2021-08-18T21:59:05",
        "upload_time_iso_8601": "2021-08-18T21:59:05.989592Z",
        "url": "https://files.pythonhosted.org/packages/62/f0/d65f4f93572ff54a85f64df7ba6a9f34ffc748e3de1dc45b0dc45c64a289/nodeclass-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29053adcac26e36013dbbbba36ba389e4d076f1072be38f40ec34ee1f816351c",
          "md5": "280a385d1c1ecf90424fb31e841daa09",
          "sha256": "332a540cdd264bcacd541d50b8c7411d561abc9a176e1d8d3e729274a491b00c"
        },
        "downloads": -1,
        "filename": "nodeclass-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "280a385d1c1ecf90424fb31e841daa09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32643,
        "upload_time": "2021-08-18T22:36:23",
        "upload_time_iso_8601": "2021-08-18T22:36:23.234402Z",
        "url": "https://files.pythonhosted.org/packages/29/05/3adcac26e36013dbbbba36ba389e4d076f1072be38f40ec34ee1f816351c/nodeclass-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29053adcac26e36013dbbbba36ba389e4d076f1072be38f40ec34ee1f816351c",
        "md5": "280a385d1c1ecf90424fb31e841daa09",
        "sha256": "332a540cdd264bcacd541d50b8c7411d561abc9a176e1d8d3e729274a491b00c"
      },
      "downloads": -1,
      "filename": "nodeclass-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "280a385d1c1ecf90424fb31e841daa09",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 32643,
      "upload_time": "2021-08-18T22:36:23",
      "upload_time_iso_8601": "2021-08-18T22:36:23.234402Z",
      "url": "https://files.pythonhosted.org/packages/29/05/3adcac26e36013dbbbba36ba389e4d076f1072be38f40ec34ee1f816351c/nodeclass-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}