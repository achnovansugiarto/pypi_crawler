{
  "info": {
    "author": "Ludvig Renbo Olsen",
    "author_email": "mail@ludvigolsen.dk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "nattrs\n--------\n\n**Nested attributes** utility functions for python. Allows getting/setting of object attributes and dict members interchangeably.\nUseful to populate nested dicts for storing outputs of a loop.\n\nAlpha stage. Subject to change.\n\n> https://pypi.python.org/pypi/nattrs/     \n\n\n# Installation\n\nInstall from pip:\n\n```shell\npip install nattrs\n```\n\nInstall from GitHub:\n\n```shell\npython -m pip install git+https://github.com/ludvigolsen/nattrs\n```\n\n\n# Main functions\n\n| Class/Function   | Description |\n|:-----------------|:------------|\n| `nested_getattr` | Get object attributes/dict members recursively, given by dot-separated names |\n| `nested_setattr` | Set object attribute/dict member by recursive lookup, given by dot-separated names. |\n| `nested_mutattr` | Apply function (mutate) to object attribute/dict member by recursive lookup, given by dot-separated names. |\n| `nested_hasattr` | Check whether recursive object attributes/dict members exist. |\n| `populate_product` | Create and populate nested dicts with specified layers and the same leaf value. |\n\n\n# Examples\n\nCreate class `B` with a dict `c` with the member `d`:\n\n```python\n\nclass B:\n    def __init__(self):\n        self.c = {\n            \"d\": 1\n        }\n\n```\n\nAdd to a dict `a`:\n\n```python\n\na = {\"b\": B()}\n\n```\n\n## nested_getattr\n\nGet the value of `d`:\n\n```python\n\nnested_getattr(a, \"b.c.d\")\n>> 1\n\n```\n\nGet default value when not finding an attribute:\n\n```python\n\nnested_getattr(a, \"b.o.p\", default=\"not found\")\n>> \"not found\"\n\n```\n\n## nested_setattr\n\nSet the value of `d`:\n\n```python\n\nnested_setattr(a, \"b.c.d\", 2)\n\n```\n\nCheck new value of `d`:\n\n```python\n\nnested_getattr(a, \"b.c.d\")\n>> 2\n\n```\n\n## nested_mutattr\n\nMutate `d` with an anonymous function (lambda):\n\n```python\n\nnested_mutattr(a, \"b.c.d\", lambda x: x * 5)\n\n```\n\nCheck new value of `d`:\n\n```python\n\nnested_getattr(a, \"b.c.d\")\n>> 10\n\n```\n\nNote: If your function performs the assignment *in-place*, remember to enable the `is_inplace_fn` argument.\n\n## nested_hasattr\n\nCheck presence of the member 'd':\n\n```python\n\nnested_hasattr(a, \"b.c.d\")\n>> True\n\n```\n\nFail to find member 'o':\n\n```python\n\nnested_hasattr(a, \"b.o.p\")\n>> False\n\n```\n\n## populate_product\n\nIn this example, we wish to pre-populate nested dicts with empty lists to allow appending within a `for` loop. First, we go through the manual approach of doing this. Second, we show how easy it is to do with `populate_product()`. \n\nSay we have 3 variables that can each hold 2 values. We want to compute *something* for each combination of these values. Let's first define these variables and their options:\n\n```python\n\nanimal = [\"cat\", \"dog\"]\nfood = [\"strawberry\", \"cucumber\"]\ntemperature = [\"cold\", \"warm\"]\n\n```\n\nLet's generate the product of these options:\n\n```python\n\nimport itertools\n\ncombinations = list(itertools.product(*[animal, food, temperature]))\ncombinations\n>> [('cat', 'strawberry', 'cold'),\n>>  ('cat', 'strawberry', 'warm'),\n>>  ('cat', 'cucumber', 'cold'),\n>>  ('cat', 'cucumber', 'warm'),\n>>  ('dog', 'strawberry', 'cold'),\n>>  ('dog', 'strawberry', 'warm'),\n>>  ('dog', 'cucumber', 'cold'),\n>>  ('dog', 'cucumber', 'warm')]\n\n```\n\nNow we can create a nested dict structure with a list in the leaf element:\n\n```python\n\n# Initialize empty dict\nnested_dict = {}\n\nfor leaf in combinations:\n    # Join each string with dot-separation:\n    attr = \".\".join(list(leaf))\n\n    # Assign empty list to the leafs\n    # `make_missing` creates dicts for each \n    # missing attribute/dict member\n    nattrs.nested_setattr(\n        obj=nested_dict,\n        attr=attr,\n        value=[],\n        make_missing=True\n    )\n\nnested_dict\n>> {'cat': {'strawberry': {'cold': [], 'warm': []},\n>>          'cucumber':   {'cold': [], 'warm': []}},\n>>  'dog': {'strawberry': {'cold': [], 'warm': []},\n>>          'cucumber':   {'cold': [], 'warm': []}}}\n\n```\n\nThis dict population is actually provided by `populate_product()`. Instead of an empty list, let's set the value to an \"edibility\" score that could be changed by a later function:\n\n```python\n\nlayers = [animal, food, temperature]\npopulate_product(\n    layers=layers,\n    val=False\n)\n>> {'cat': {'strawberry': {'cold': False, 'warm': False},\n>>          'cucumber':   {'cold': False, 'warm': False}},\n>>  'dog': {'strawberry': {'cold': False, 'warm': False},\n>>          'cucumber':   {'cold': False, 'warm': False}}}\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ludvigolsen/nattrs",
    "keywords": "attributes,dictionaries,class,recursive",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nattrs",
    "package_url": "https://pypi.org/project/nattrs/",
    "platform": null,
    "project_url": "https://pypi.org/project/nattrs/",
    "project_urls": {
      "Homepage": "https://github.com/ludvigolsen/nattrs",
      "Repository": "https://github.com/ludvigolsen/nattrs",
      "issues": "https://github.com/ludvigolsen/nattrs/issues"
    },
    "release_url": "https://pypi.org/project/nattrs/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Nested attribute getter/setter that works with dictionaries and objects interchangeably.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17301543,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b22c0e576e6aceaf3c3065c1a86cd04e5f0d42b8c304a783163a78b12b1e4f6d",
          "md5": "85f235af87152a403a45d4a6045152bf",
          "sha256": "7cc300e03a667ce6bc3c7f2915675276eda4e17181484f11968d9e7533f35ed3"
        },
        "downloads": -1,
        "filename": "nattrs-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85f235af87152a403a45d4a6045152bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7417,
        "upload_time": "2023-03-15T09:59:30",
        "upload_time_iso_8601": "2023-03-15T09:59:30.942973Z",
        "url": "https://files.pythonhosted.org/packages/b2/2c/0e576e6aceaf3c3065c1a86cd04e5f0d42b8c304a783163a78b12b1e4f6d/nattrs-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2dfd6875262853b2df131b319f3145572394ac08653421ab51ab627afa5a07f3",
          "md5": "daa0bbe9f0b74c2349873ca49509d7e1",
          "sha256": "fa2d627958204cf596eca1ae5e8ab69a1c51bac819af981eb1e244ed666f30e3"
        },
        "downloads": -1,
        "filename": "nattrs-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "daa0bbe9f0b74c2349873ca49509d7e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 6006,
        "upload_time": "2023-03-15T09:59:32",
        "upload_time_iso_8601": "2023-03-15T09:59:32.895117Z",
        "url": "https://files.pythonhosted.org/packages/2d/fd/6875262853b2df131b319f3145572394ac08653421ab51ab627afa5a07f3/nattrs-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "146cc87e7724ad5de1c972fa49d8ef55a0f7bc43f8aeb4a1f58873776c2b12e8",
          "md5": "0b2ca130f17fe14eaa7b737df0c94447",
          "sha256": "d117c0c7a9bc29705cc4d22463407c472392c455682125029e08fa56996fab86"
        },
        "downloads": -1,
        "filename": "nattrs-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b2ca130f17fe14eaa7b737df0c94447",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7407,
        "upload_time": "2023-03-15T10:08:32",
        "upload_time_iso_8601": "2023-03-15T10:08:32.111390Z",
        "url": "https://files.pythonhosted.org/packages/14/6c/c87e7724ad5de1c972fa49d8ef55a0f7bc43f8aeb4a1f58873776c2b12e8/nattrs-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0550657c0fb1b36776b408490a01bac43d723066eb3ccc5e8666f7caed3116f7",
          "md5": "c85ce2f6298bc5a397fd3208b755adf2",
          "sha256": "a106c537db90eca181083f5c7aca3b750ad7d003d7334d88693a725be0defddd"
        },
        "downloads": -1,
        "filename": "nattrs-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c85ce2f6298bc5a397fd3208b755adf2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 6004,
        "upload_time": "2023-03-15T10:08:33",
        "upload_time_iso_8601": "2023-03-15T10:08:33.984669Z",
        "url": "https://files.pythonhosted.org/packages/05/50/657c0fb1b36776b408490a01bac43d723066eb3ccc5e8666f7caed3116f7/nattrs-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "146cc87e7724ad5de1c972fa49d8ef55a0f7bc43f8aeb4a1f58873776c2b12e8",
        "md5": "0b2ca130f17fe14eaa7b737df0c94447",
        "sha256": "d117c0c7a9bc29705cc4d22463407c472392c455682125029e08fa56996fab86"
      },
      "downloads": -1,
      "filename": "nattrs-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0b2ca130f17fe14eaa7b737df0c94447",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 7407,
      "upload_time": "2023-03-15T10:08:32",
      "upload_time_iso_8601": "2023-03-15T10:08:32.111390Z",
      "url": "https://files.pythonhosted.org/packages/14/6c/c87e7724ad5de1c972fa49d8ef55a0f7bc43f8aeb4a1f58873776c2b12e8/nattrs-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0550657c0fb1b36776b408490a01bac43d723066eb3ccc5e8666f7caed3116f7",
        "md5": "c85ce2f6298bc5a397fd3208b755adf2",
        "sha256": "a106c537db90eca181083f5c7aca3b750ad7d003d7334d88693a725be0defddd"
      },
      "downloads": -1,
      "filename": "nattrs-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c85ce2f6298bc5a397fd3208b755adf2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 6004,
      "upload_time": "2023-03-15T10:08:33",
      "upload_time_iso_8601": "2023-03-15T10:08:33.984669Z",
      "url": "https://files.pythonhosted.org/packages/05/50/657c0fb1b36776b408490a01bac43d723066eb3ccc5e8666f7caed3116f7/nattrs-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}