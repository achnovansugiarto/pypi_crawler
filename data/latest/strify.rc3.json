{
  "info": {
    "author": "Eduard Konanau",
    "author_email": "aduard.kononov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Overview\n\nThe library allows you to get a string representation of a class at **RUNTIME**, without overloading ```__repr__```, ```__str__```\nor defining your own specific ```get_repr() -> str``` (or even several for different cases).  \nThe library provides a *lightweight* API using which you can _in a minute_ add a pattern processing function\n```stringify(pattern: str) -> str``` to any class.  \n\nThis tool is more **intended to help developers** that want to **allow users specify their own\ndata representation patterns**.\n\n# Motivation  \nYou're a developer. Let's assume that ```song_downloader``` is a library you wrote using ```strify```. ```song_downloader.search_in_web()``` searchs for a song \non the Internet and returns an instance of ```Song``` class that allows to download the song using\n```Song.download_mp3()```  \n\n```python\n>>> from song_downloader import search_in_web\n>>> song = search_in_web(title='Loosing My Mind', artist='Falling In Reverse')\n>>> print(song)\nSong(Loosing My Mind, Falling In Reverse, 2018)\n>>> song.download_mp3('[artist] — [title] ([year])')\n```\n\nThe code will download the mp3 and save it as \"Falling In Reverse — Loosing My Mind (2018).mp3\".\n\nYou may ask: \"**why should I use ```strify```** if I could do that like \\*the code below\\*?\"\n```python\n>>> from song_downloader import search_in_web\n>>> song = search_in_web(title='Loosing My Mind', artist='Falling In Reverse')\n>>> print(song)\nSong(Loosing My Mind, Falling In Reverse, 2018)\n>>> song.download_mp3(f'{song.artist} — {song.title} ({song.year})')\n```\n\nYou definitely can. But there is *no flexibility* for the end user that can't change sources;\nusually, he/she just is not assumed to do that, it's not a good practice.\n\n```strify```'s approach is to **ask a user to enter whatever pattern he/she wants** and supply it to\nthe program in any way (args, json, data base etc.) \nand just use the value in the script. That's the power: **it's not necessary to define a pattern in the source code**.\n\nNow we can change the example and save it as ```download_mp3.py```:\n```python\nfrom song_downloader import search_in_web\nargs = parse_args()\nsong = search_in_web(title=args['title'], artist=args['artist'])\nsong.download_mp3(args['mp3_name_pattern'])\n```\n\nThen run it like this:\n```\npython3 download_mp3.py --title='loosing my mind' --artist='falling in reverse' --mp3-name-pattern='[artist] — [title] ([year])'\n```\nAnd check what's happened:\n```shell script\nuser@computer:~/$ ls -1\n...\ndownload_mp3.py\nFalling In Reverse — Loosing My Mind (2018).mp3\n...\nuser@computer:~/$\n```\n\n# Usage Guide\nLet's continue with our Song class:\n```python\nfrom random import randrange\n\nclass Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n\n    def get_year(self):\n        year = randrange(1960, 2020)\n        return year\n```\n**Notice**: ```Song.get_year()``` is a mock. In a real code it has to connect to the net and\nfind all the data there using ```self.title``` and ```self.artist```.\n\n### Diving in\nFirst of all, you need to take a look at the terminology:\n* **stringification** — process of building class instance representation (according to a **pattern**)   \n* **pattern** — a string with **markers**. After **stringification** all the markers \nwill be replaced with **marker values** (or ```final_marker_value```, see **preprocessing function**)\n* **marker** — ```f'[{marker_name}]'```\n* **marker attribute** — name of a class instance attribute which value is used during **stringification**.  \n* **marker value**: the way ```strify``` gets **marker value** looks like this:\n```python\nimport inspect\ndef get_marker_value(class_instance, marker_attribute):\n    marker_value = getattr(class_instance, marker_attribute)\n    if inspect.ismethod(marker_value):\n        marker_value = marker_value()\n    return str(marker_value)\n```\n* **preprocessing function**:\n```python\ndef preprocessing_function(marker_value: str) -> str:\n    final_marker_value = whatever_magic_you_want(marker_value)\n    return final_marker_value\n```\n\n\n#### Way #1: use ```stringifiable``` and ```StringifyInfo```\n\n```stringifiable``` gets list of ```StringifyInfo``` and adds ```stringify(pattern: str) -> str```\nmethod to the class it decorates.  \nOne ```StringifyInfo``` in the list describes one **marker**.\n\nSignature:  \n```StringifyInfo(marker_name, marker_attribute=None, preprocessing_function=None)```  \nIf ```marker_attribute``` isn't passed to the constructor (i.e. is ```None```) then\nit's assumed to be the same as passed ```marker_name```.\n\n```python\nfrom strify import stringifiable, StringifyInfo\n\nfrom random import randrange\n\n# transforms 'tHis striNg' into 'This String'\ndef format_proper_name(string):\n    return ' '.join(word[0].upper() + word[1:].lower() for word in string.split(' '))\n\n@stringifiable([\n    StringifyInfo('title', None, format_proper_name),\n    StringifyInfo('artist', 'artist', format_proper_name),\n    StringifyInfo('year', 'get_year'),\n])\nclass Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n\n    def get_year(self):\n        year = randrange(1960, 2020)\n        return year\n```\n\nNow, the following is possible:\n```python\n>>> song = Song('loosing my mind', 'falling in reverse')\n>>> song.stringify('[artist] — [title] ([year])')\nFalling In Reverse — Loosing My Mind (2018)\n>>> song.stringify('[title]: [artist], [year]')\nLoosing My Mind: Falling In Reverse, 2018\n```\n\n#### Way #2: use ```stringifiable``` and ```stringify```\n\nSignature:  \n```stringify(preprocessing_func=None, marker_name=None)```  \nIf ```marker_name``` equals ```None``` (i.e. not passed) then it's assumed\nthat ```marker_name == func.__name__```  \n\n```python\nfrom strify import stringifiable, stringify\n\nfrom random import randrange\n\n# transforms 'tHis striNg' into 'This String'\ndef format_proper_name(string):\n    return ' '.join(word[0].upper() + word[1:].lower() for word in string.split(' '))\n\n@stringifiable()\nclass Song:\n    def __init__(self, title, artist):\n        self._title = title\n        self._artist = artist\n\n    @stringify(format_proper_name)\n    def artist(self):\n        return self._artist\n\n    @stringify(format_proper_name)\n    def title(self):\n        return self._title\n\n    @stringify(marker_name='year')\n    def get_year(self):\n        year = randrange(1960, 2020)\n        return year\n```\n\n**Notice**: it would be more usual to make properties.\nIn this case, ```stringify``` **must** be the first decorator that's applied to the function.\n```python\n@property\n@stringify(format_proper_name)\ndef title(self):\n    return self._title\n```\n\nNow you can test the code we ran at the end of **Way #1** and ensure that we achieved the same interface and results:\n```python\n>>> song = Song('loosing my mind', 'falling in reverse')\n>>> song.stringify('[artist] — [title] ([year])')\nFalling In Reverse — Loosing My Mind (2018)\n>>> song.stringify('[title]: [artist], [year]')\nLoosing My Mind: Falling In Reverse, 2018\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/aduard.kononov/strify",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "strify",
    "package_url": "https://pypi.org/project/strify/",
    "platform": "",
    "project_url": "https://pypi.org/project/strify/",
    "project_urls": {
      "Homepage": "https://gitlab.com/aduard.kononov/strify"
    },
    "release_url": "https://pypi.org/project/strify/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "The library provides a lightweight API using which you can in a minute add a pattern processing function \"stringify(pattern: str) -> str\" to any class.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7857445,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19f9f4bec673fe2359bd746d4572b08bc3d700af59665fd42675920b4f13a234",
          "md5": "b79b7cc860d3db19521db65559feaeb3",
          "sha256": "99e8b87e753525db7cf8614def395b6847a23426969c40aa8801940a7b244e90"
        },
        "downloads": -1,
        "filename": "strify-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b79b7cc860d3db19521db65559feaeb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13563,
        "upload_time": "2020-01-26T20:58:12",
        "upload_time_iso_8601": "2020-01-26T20:58:12.920234Z",
        "url": "https://files.pythonhosted.org/packages/19/f9/f4bec673fe2359bd746d4572b08bc3d700af59665fd42675920b4f13a234/strify-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1746b0879032e67ce688c86507f3c4763bde07fee6034d6602e6bd113453f67c",
          "md5": "434a34178dbd6bad2a87c0d126b8231c",
          "sha256": "9a11e97bcd26194735bc498a932dc7fea52bbb69c53432c1e9f6591865395d36"
        },
        "downloads": -1,
        "filename": "strify-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "434a34178dbd6bad2a87c0d126b8231c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9617,
        "upload_time": "2020-01-26T20:58:16",
        "upload_time_iso_8601": "2020-01-26T20:58:16.188295Z",
        "url": "https://files.pythonhosted.org/packages/17/46/b0879032e67ce688c86507f3c4763bde07fee6034d6602e6bd113453f67c/strify-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21b52b222cf22f24de1e9c479d6b056b340fde770c4f6adeb18a9d603b22a3fd",
          "md5": "26f5226824c64dd340b630145aa9542b",
          "sha256": "5b177afdac7d1bce444f709557fff5e44db8b09fba17f5bd26b87b04b9652b73"
        },
        "downloads": -1,
        "filename": "strify-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26f5226824c64dd340b630145aa9542b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13846,
        "upload_time": "2020-01-27T19:42:49",
        "upload_time_iso_8601": "2020-01-27T19:42:49.834782Z",
        "url": "https://files.pythonhosted.org/packages/21/b5/2b222cf22f24de1e9c479d6b056b340fde770c4f6adeb18a9d603b22a3fd/strify-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86ab3205dc8a1dc3f11b1415b678c656b4d90fcfeccd1c472b03f3f05d5a4f0f",
          "md5": "8dd682d9fad78ffa2b4d3269bc9c93eb",
          "sha256": "1cc8020be15d328eb7eca58e7c8bb62dc90bd6b4bcab37a264226f3f0ba18457"
        },
        "downloads": -1,
        "filename": "strify-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8dd682d9fad78ffa2b4d3269bc9c93eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9892,
        "upload_time": "2020-01-27T19:42:52",
        "upload_time_iso_8601": "2020-01-27T19:42:52.278779Z",
        "url": "https://files.pythonhosted.org/packages/86/ab/3205dc8a1dc3f11b1415b678c656b4d90fcfeccd1c472b03f3f05d5a4f0f/strify-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09bff9a8fa864a7afaaf8e59c280d77b926e7973204cfe53ef535f0fc712096a",
          "md5": "e71b772c43029ab83bbcf9ba7fa79ccc",
          "sha256": "31436d632605c7859e17435f532409dc889fb51866a69fc229aa3d367d4a8464"
        },
        "downloads": -1,
        "filename": "strify-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e71b772c43029ab83bbcf9ba7fa79ccc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13858,
        "upload_time": "2020-07-31T20:07:59",
        "upload_time_iso_8601": "2020-07-31T20:07:59.350780Z",
        "url": "https://files.pythonhosted.org/packages/09/bf/f9a8fa864a7afaaf8e59c280d77b926e7973204cfe53ef535f0fc712096a/strify-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3d84c0a2876752fa8cb06fea544925efd58cab947c7834cdbdd306bd35dacd9",
          "md5": "d50cfdc30e1ca3fab726225c2bf40e93",
          "sha256": "79914a3d40916f8d8f2530c1254fc54b032e2c31c4c98de7fbbc6825b5cc5aa7"
        },
        "downloads": -1,
        "filename": "strify-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d50cfdc30e1ca3fab726225c2bf40e93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9904,
        "upload_time": "2020-07-31T20:08:01",
        "upload_time_iso_8601": "2020-07-31T20:08:01.530780Z",
        "url": "https://files.pythonhosted.org/packages/f3/d8/4c0a2876752fa8cb06fea544925efd58cab947c7834cdbdd306bd35dacd9/strify-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09bff9a8fa864a7afaaf8e59c280d77b926e7973204cfe53ef535f0fc712096a",
        "md5": "e71b772c43029ab83bbcf9ba7fa79ccc",
        "sha256": "31436d632605c7859e17435f532409dc889fb51866a69fc229aa3d367d4a8464"
      },
      "downloads": -1,
      "filename": "strify-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e71b772c43029ab83bbcf9ba7fa79ccc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13858,
      "upload_time": "2020-07-31T20:07:59",
      "upload_time_iso_8601": "2020-07-31T20:07:59.350780Z",
      "url": "https://files.pythonhosted.org/packages/09/bf/f9a8fa864a7afaaf8e59c280d77b926e7973204cfe53ef535f0fc712096a/strify-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3d84c0a2876752fa8cb06fea544925efd58cab947c7834cdbdd306bd35dacd9",
        "md5": "d50cfdc30e1ca3fab726225c2bf40e93",
        "sha256": "79914a3d40916f8d8f2530c1254fc54b032e2c31c4c98de7fbbc6825b5cc5aa7"
      },
      "downloads": -1,
      "filename": "strify-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d50cfdc30e1ca3fab726225c2bf40e93",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9904,
      "upload_time": "2020-07-31T20:08:01",
      "upload_time_iso_8601": "2020-07-31T20:08:01.530780Z",
      "url": "https://files.pythonhosted.org/packages/f3/d8/4c0a2876752fa8cb06fea544925efd58cab947c7834cdbdd306bd35dacd9/strify-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}