{
  "info": {
    "author": "Dann Luciano",
    "author_email": "dannluciano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# keyring\n\nSimple encryption-at-rest with key rotation support for Python.\n\n![keyring: Simple encryption-at-rest with key rotation support for Python.](https://raw.githubusercontent.com/dannluciano/keyring-python/main/keyring.png)\n\nN.B.: **keyring** is _not_ for encrypting passwords--for that, you should use\nsomething like [bcrypt](https://pypi.org/project/bcrypt/). It's meant for\nencrypting sensitive data you will need to access in plain text (e.g. storing\nOAuth token from users). Passwords do not fall in that category.\n\nThis package is completely independent from any storage mechanisms; the goal is\nproviding a few functions that could be easily integrated with any ORM. \n\n## Installation\n\nAdd package to your `requirements.txt` or:\n\n```console\npip install keyring\n```\n\n## Usage\n\n### Encryption\n\nBy default, AES-128-CBC is the algorithm used for encryption. This algorithm\nuses 16 bytes keys, but you're required to use a key that's double the size\nbecause half of that keys will be used to generate the HMAC. The first 16 bytes\nwill be used as the encryption key, and the last 16 bytes will be used to\ngenerate the HMAC.\n\nUsing random data base64-encoded is the recommended way. You can easily generate\nkeys by using the following command:\n\n```console\n$ dd if=/dev/urandom bs=32 count=1 2>/dev/null | openssl base64 -A\nqUjOJFgZsZbTICsN0TMkKqUvSgObYxnkHDsazTqE5tM=\n```\n\nInclude the result of this command in the `value` section of the key description\nin the keyring. Half this key is used for encryption, and half for the HMAC.\n\n#### Key size\n\nThe key size depends on the algorithm being used. The key size should be double\nthe size as half of it is used for HMAC computation.\n\n- `aes-128-cbc`: 16 bytes (encryption) + 16 bytes (HMAC).\n- `aes-192-cbc`: 24 bytes (encryption) + 24 bytes (HMAC).\n- `aes-256-cbc`: 32 bytes (encryption) + 32 bytes (HMAC).\n\n#### About the encrypted message\n\nInitialization vectors (IV) should be unpredictable and unique; ideally, they\nwill be cryptographically random. They do not have to be secret: IVs are\ntypically just added to ciphertext messages unencrypted. It may sound\ncontradictory that something has to be unpredictable and unique, but does not\nhave to be secret; it is important to remember that an attacker must not be able\nto predict ahead of time what a given IV will be.\n\nWith that in mind, _keyring_ uses\n`base64(hmac(unencrypted iv + encrypted message) + unencrypted iv + encrypted message)`\nas the final message. If you're planning to migrate from other encryption\nmechanisms or read encrypted values from the database without using _keyring_,\nmake sure you account for this. The HMAC is 32-bytes long and the IV is 16-bytes\nlong.\n\n### Keyring\n\nKeys are managed through a keyring--a short python Dictionary describing your\nencryption keys. The keyring must be a Dictionary object mapping numeric ids of the\nkeys to the key values. A keyring must have at least one key. For example:\n\n```python\n{\n  \"1\": \"uDiMcWVNTuz//naQ88sOcN+E40CyBRGzGTT7OkoBS6M=\",\n  \"2\": \"VN8UXRVMNbIh9FWEFVde0q7GUA1SGOie1+FgAKlNYHc=\"\n}\n```\n\nThe `id` is used to track which key encrypted which piece of data; a key with a\nlarger id is assumed to be newer. The value is the actual bytes of the\nencryption key.\n\n### Key Rotation\n\nWith **keyring** you can have multiple encryption keys at once and key rotation\nis fairly straightforward: if you add a key to the _keyring_ with a higher id\nthan any other key, that key will automatically be used for encryption when\nobjects are either created or updated. Any keys that are no longer in use can be\nsafely removed from the _keyring_.\n\nIt's extremely important that you save the keyring id returned by `encrypt()`;\notherwise, you may not be able to decrypt values (you can always decrypt values\nif you still possess _all_ encryption keys).\n\nIf you're using **keyring** to encrypt database columns, it's recommended to use\na separated _keyring_ for each table you're planning to encrypt: this allows an\neasier key rotation in case you need (e.g. key leaking).\n\nN.B.: Keys are hardcoded on these examples, but you shouldn't do it on your code\nbase. You can retrieve _keyring_ from environment variables if you're deploying\nto [Heroku](https://heroku.com) and alike, or deploy a JSON file with your\nconfiguration management software (e.g. Ansible, Puppet, Chef, etc).\n\n### Basic usage of keyring\n\n```python\nfrom keyring import Keyring;\n\nkeys = { '1': \"uDiMcWVNTuz//naQ88sOcN+E40CyBRGzGTT7OkoBS6M=\" }\nencryptor = Keyring(keys, { \"digest_salt\": \"salt-n-pepper\" })\n\n# STEP 1: Encrypt message using latest encryption key.\nencrypted, keyringId, digest = encryptor.encrypt(\"super secret\")\nprint(f'üîí {encrypted}')\nprint(f'üîë {keyringId}')\nprint(f'üîé {digest}')\n#=> üîí Vco48O95YC4jqj44MheY8zFO2NLMPp/KILiUGbKxHvAwLd2/AN+zUG650CJzogttqnF1cGMFb//Idg4+bXoRMQ== \n#=> üîë 1\n#=> üîé c39ec9729dbacd45cecd5ea9a60b15b50b0cc857\n\n# STEP 2: Decrypted message using encryption key defined by keyring id.\ndecrypted = encryptor.decrypt(encrypted, keyringId)\nprint(f'‚úâÔ∏è {decrypted}')\n#=> ‚úâÔ∏è super secret\n```\n\n#### Change encryption algorithm\n\nYou can choose between `AES-128-CBC`, `AES-192-CBC` and `AES-256-CBC`. By\ndefault, `AES-128-CBC` will be used.\n\nTo specify the encryption algorithm, set the `encryption` option. The following\nexample uses `AES-256-CBC`.\n\n```python\nfrom keyring import Keyring\n\nkeys = { \"1\": \"uDiMcWVNTuz//naQ88sOcN+E40CyBRGzGTT7OkoBS6M=\" }\nencryptor = Keyring(keys, {\n  \"encryption\": \"aes-256-cbc\",\n  \"digest_salt\": \"<custom salt>\",\n})\n```\n\n### Exchange data with Ruby\n\nIf you use Ruby, you may be interested in\n<https://github.com/fnando/attr_keyring>, which is able to read and write\nmessages using the same format.\n\n### Exchange data with Node.js\n\nIf you use Node.js, you may be interested in\n<https://github.com/fnando/keyring-node>, which is able to read and write\nmessages using the same format.\n\n\n## Development\n\nAfter checking out the repo, run `pip install -r requirements.dev.txt` to install dependencies. Then,\nrun `pytest` to run the tests.\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at\n<https://github.com/dannluciano/keyring-python>. This project is intended to be a safe,\nwelcoming space for collaboration, and contributors are expected to adhere to\nthe [Contributor Covenant](http://contributor-covenant.org) code of conduct.\n\n## License\n\nThe gem is available as open source under the terms of the\n[MIT License](https://opensource.org/licenses/MIT).\n\n## Icon\n\nIcon made by [Icongeek26](https://www.flaticon.com/authors/icongeek26) from\n[Flaticon](https://www.flaticon.com/) is licensed by Creative Commons BY 3.0.\n\n## Code of Conduct\n\nEveryone interacting in the **keyring** project‚Äôs codebases, issue trackers,\nchat rooms and mailing lists is expected to follow the\n[code of conduct](https://github.com/dannluciano/keyring-python/blob/main/CODE_OF_CONDUCT.md).\n\n## Acknowledgments\n\nInspired:\n\n* by [@fnando](https://github.com/fnando) on [keyring-node](https://github.com/fnando/keyring-node) and [attr_keyring](https://github.com/fnando/attr_keyring)\n* and by Corona Virus\n\nThanks to [IFPI](https://www.ifpi.edu.br/) for pay my salary!\n\n![IFPI](https://github.com/dannluciano/liveboards/raw/master/doc/ifpi.png)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dannluciano/keyringpy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keyringpy",
    "package_url": "https://pypi.org/project/keyringpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/keyringpy/",
    "project_urls": {
      "Homepage": "https://github.com/dannluciano/keyringpy"
    },
    "release_url": "https://pypi.org/project/keyringpy/0.0.1/",
    "requires_dist": [
      "pycryptodome"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Simple encryption-at-rest with key rotation support for Python.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12383668,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aec7b0e4c5d1ac6c71195ebb1c4b4b7729e2da726cc8d1b178fb0e56e0d4515",
          "md5": "733edefb816e1a0416998973e6e15487",
          "sha256": "a3326ddecbce566423c561a05a6712bb709fb75883b952778047a52bcd8bd96e"
        },
        "downloads": -1,
        "filename": "keyringpy-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "733edefb816e1a0416998973e6e15487",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 7110,
        "upload_time": "2021-12-22T18:27:46",
        "upload_time_iso_8601": "2021-12-22T18:27:46.595629Z",
        "url": "https://files.pythonhosted.org/packages/5a/ec/7b0e4c5d1ac6c71195ebb1c4b4b7729e2da726cc8d1b178fb0e56e0d4515/keyringpy-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3877c3b66b366a08cbd147010a1216d40c52b3fe31b4814e57197e6a3a7ec55",
          "md5": "f4dbe8548677038eec99f30c4415fdb0",
          "sha256": "66fcee14a9a1bd5dbeb52bcdf814f9c4b7d0b88f44615436cce49c08f7d0765a"
        },
        "downloads": -1,
        "filename": "keyringpy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f4dbe8548677038eec99f30c4415fdb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 6548,
        "upload_time": "2021-12-22T18:27:48",
        "upload_time_iso_8601": "2021-12-22T18:27:48.645964Z",
        "url": "https://files.pythonhosted.org/packages/e3/87/7c3b66b366a08cbd147010a1216d40c52b3fe31b4814e57197e6a3a7ec55/keyringpy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5aec7b0e4c5d1ac6c71195ebb1c4b4b7729e2da726cc8d1b178fb0e56e0d4515",
        "md5": "733edefb816e1a0416998973e6e15487",
        "sha256": "a3326ddecbce566423c561a05a6712bb709fb75883b952778047a52bcd8bd96e"
      },
      "downloads": -1,
      "filename": "keyringpy-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "733edefb816e1a0416998973e6e15487",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 7110,
      "upload_time": "2021-12-22T18:27:46",
      "upload_time_iso_8601": "2021-12-22T18:27:46.595629Z",
      "url": "https://files.pythonhosted.org/packages/5a/ec/7b0e4c5d1ac6c71195ebb1c4b4b7729e2da726cc8d1b178fb0e56e0d4515/keyringpy-0.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3877c3b66b366a08cbd147010a1216d40c52b3fe31b4814e57197e6a3a7ec55",
        "md5": "f4dbe8548677038eec99f30c4415fdb0",
        "sha256": "66fcee14a9a1bd5dbeb52bcdf814f9c4b7d0b88f44615436cce49c08f7d0765a"
      },
      "downloads": -1,
      "filename": "keyringpy-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f4dbe8548677038eec99f30c4415fdb0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 6548,
      "upload_time": "2021-12-22T18:27:48",
      "upload_time_iso_8601": "2021-12-22T18:27:48.645964Z",
      "url": "https://files.pythonhosted.org/packages/e3/87/7c3b66b366a08cbd147010a1216d40c52b3fe31b4814e57197e6a3a7ec55/keyringpy-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}