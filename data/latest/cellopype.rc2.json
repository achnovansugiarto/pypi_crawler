{
  "info": {
    "author": "",
    "author_email": "Peter Kleynjan <peter.kleynjan@quantis.nl>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# cellopype: a reactive pipeline of executable cells\n\n## Introduction\n\nWith the cellopype `Cell` and `Pype` classes, you can build a network of **interconnected DataFrames**, each wrapped in its own cell. Each cell has its own 'construction rules' and an update to any cell value is cascaded through the rest of the network.\n\nThink of it as a Jupyter notebook with the cells being automatically (re-)run as required by changes at other points in the notebook. (And without the UI, obviously.)\n\nIn abstract terms, a cell consists of a custom `recalc` function that takes a number of inputs (`sources`), and recalculates the cell's `value` from the values of these sources. Any change in value for a given cell is propagated to any other cells depending on it. The network of cells must be one-directional, without any loops (i.e., it has to be a DAG). Lazy computation is default, but subscription-type 'push on change' is supported.\n\nPractically all the work is done by the Cell class, which is relatively small (approx. 50-60 lines). `Pype` is a utility class that adds name spacing logic and convenience methods to a collection of Cells. See below.\n\n## An example with three Cells\n\n![a+b=c](TcBWl.png)\n\n```python\nimport pandas as pd\nfrom cellopype import Cell\n```\n\n```python\n# example from https://stackoverflow.com/questions/62671185\ndfA = pd.DataFrame([1, 2, 3], columns=[\"value\"])\ndfB = pd.DataFrame([10, 20, 30], columns=[\"value\"])\n\ncell_a = Cell(recalc=lambda: dfA.copy())\ncell_b = Cell(recalc=lambda: dfB.copy())\n```\n\nThis is a bit contrived; cell_a and cell_b are 'recalculated' by returning a copy of an external dataframe. We make a copy in order to return a reference to a fresh object instance. Don't have your recalc functions poke around in (or return references to) existing compound objects!\n\nLet's define a recalc function for cell_c and create it:\n\n```python\ndef plus(a, b):\n    return a + b\ncell_c = Cell(recalc=plus, sources=[cell_a, cell_b])   # or: recalc=lambda a,b: a+b, sources=[...]\n```\n\nCheck that cell_a and cell_c are initialized: they are `_dirty`, with no cached `_value` yet:\n\n```python\nprint('cell_a:', cell_a._dirty, cell_a._value)\ncell_a: True None\n\nprint('cell_c:', cell_c._dirty, cell_c._value)\ncell_c: True None\n```\n\nNow comes the nice part. Reading `cell_c.value` triggers recalc of cell_c, which reads cell_a & cell_b values, which in turn triggers recalc of cell_a & cell_b:\n\n```python\nprint(cell_c.value)\n\n    value\n0   11\n1   22\n2   33\n```\n\nProof of the pudding, change source value for cell_a and recalculate:\n\n```python\ndfA.loc[0, \"value\"] = 222\ncell_a.recalc()\n```\n\nReading the value for cell_c again now triggers recalc across the pipeline. \\\nThe row 0 value of cell_c reflects the change in row 0 of cell_a:\n\n```python\nprint(cell_c.value)\n\n    value\n0   232\n1   22\n2   33\n```\n\n## Cell API: summary & example\n\n```python\nfrom cellopype import Cell\n```\n\nEvery cell must have a **recalc** function that defines how the cell value is (re)calculated from its **sources**:\n\n```python\ndef recalc_fn( a, b ):\n   \"\"\"Source.values are passed in, returns the new value for this cell\"\"\"\n   # the values of all its source cells are passed as args to this function\n   # args are positional, names do not have to match source names\n   return a.add(b)\n```\n\nGiven the definitions above, we can call the **Cell()** constructor:\n\n```python\nmy_cell = Cell(\n   sources[cell_a, cell_b], # specify the source cells for this cell's recalc\n   recalc = recalc_fn,      # calculate new cell.value (source.values as args) [1]\n   lazy = True,             # default=True: recalculate only when necessary    [2]\n   on_change = plot_it      # optional, called whenever cell 'value' changes   [3]\n)\n```\n\n1. Our `recalc` function here is pretty trivial. Alternatively, we could simply pass in `recalc=pd.DataFrame.add` \\\n   (When you pass a class method as recalc function, the first argument is taken as the instance, i.e., _self_.) \\\n\n2. If `lazy`=True: the cell's value property is recalculated when: \\\n   &ensp;&ensp;(1) cell.recalc() is called or \\\n   &ensp;&ensp;(2) cell.value is read (by your code or by another cell's recalc) and there is no valid cached \\_value.\\\n   If lazy=False, the cell is recalculated immediately when invalidated.\n\n3. `on_change` is called when the cell value changes (comparable to 'subscribe' in RX). The new value is passed as its single argument; no return value is expected. If an on_change handler is supplied, lazy recalculation is disabled.\n\nThe cell's **value** property is a getter/setter combo that reads and updates the internal cached `_value`. It can trigger recalc and/or invalidate other cells. A cell value can be a DataFrame, Series or scalar -- but most Python types should work, including lists and dictionaries.\n\nIf you want to force recalc for a cell at any time, you can call `my_cell.recalc()` This will only make sense for cells defined with `lazy=True`. In general, you should not have to: reading the output cell values you need should trigger recalc across the network.\n\nFinally, a subtle detail: in `sources` you specify the _cell_ instances that the new cell depends upon (i.e. `cell_a`). The `recalc` function gets passed the _values_ of these cells (i.e., `cell_a.value`). This means your recalc function has no knowledge of or access to the cell. It deals directly with DataFrames or other variables, without having to unwrap them.\n\n## Pype: API summary & example\n\n**Pype** is a helper class to make it easier to manage a network of Cells. A Pype simulates a dictionary with the cell name as key (and with\ndot-name access to the attributes). Let's initialize a pype and add some cells to it.\n\n```python\nfrom cellopype import Cell, Pype\n\npp = Pype()\n\npp.cell_a = Cell(recalc=lambda: [1,2,3])\npp.cell_b = Cell(recalc=lambda: [4,5,6])\n\npp.cell_c = Cell(recalc=lambda a, b: a+b, sources=[pp.cell_a, pp.cell_b])\n# note that the reference to the source cell instances includes the pype container,\n# allowing references to cells in other pypes (or outside of any pype)\n\npp.keys():\ndict_keys(['cell_a', 'cell_b', 'cell_c'])\n\nprint(pp.cell_a)\n<cellopype.cell.Cell at 0x7fb3100976d0>\n\nprint(pp.cell_c.value)\n[1, 2, 3, 4, 5, 6]\n```\n\nThe cell **name** is also added back to the cell:\n\n```python\nprint(pp.cell_a.name)\n'cell_a'    # handy for debugging if a cell can identity itself back to you\n```\n\nPype.**cells** gets all cells in the Pype into a name-based dictionary:\n\n```python\nprint(pp.cells)\n{   'cell_a': <cellopype.cell.Cell object at 0x7fb3100976d0>,\n    'cell_b': <cellopype.cell.Cell object at 0x7fb310097790>,\n    'cell_c': <cellopype.cell.Cell object at 0x7fb310097910>}\n```\n\nPype.**recalc_all()** forces recalculation of all cells in the Pype.\n\nPype.**dump_values**() dumps all cell values to a list of dicts while Pype.**load_values**(pld) restores them:\n\n```python\n# recalculate and dump all cell values to a list of dicts\npld = pp.dump_values()\nprint(pld)\n[   {'name': 'cell_a', 'value': [1, 2, 3]},\n    {'name': 'cell_b', 'value': [4, 5, 6]},\n    {'name': 'cell_c', 'value': [1, 2, 3, 4, 5, 6]}]\n\n# ... mess with pp contents\npp.load_values(pld)\n# pp values are restored\n```\n\nNote these functions only dump and load the _values_. If you want to dump & restore the entire pype, including recalc logic & handlers, use dill to pickle the Pype itself:\n\n```python\nimport dill  # not pickle, because lambdas\n\nwith open('pype_p.dill', 'wb') as file:\n    dill.dump(pp, file)\nwith open('pype_p.dill', 'rb') as inp:\n    pp2 = dill.load(inp)\n# but heed the warnings: this is not secure unless the dill file is secured;\n# and not suitable for structural persistence\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cellopype",
    "package_url": "https://pypi.org/project/cellopype/",
    "platform": null,
    "project_url": "https://pypi.org/project/cellopype/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kleynjan/cellopype/issues",
      "Homepage": "https://github.com/kleynjan/cellopype"
    },
    "release_url": "https://pypi.org/project/cellopype/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Build reactive networks using Cells and Pypes.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15751244,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54b7264ba72aa3796e2214c1502f48c7c0b93af1134a333675677b04f087dbc5",
          "md5": "f7c75f5d3072c327c4a0913a4f7f5383",
          "sha256": "aa68ee4b9251a020039e3d40a640d4da4df743f41cd530952cf800ed201343ab"
        },
        "downloads": -1,
        "filename": "cellopype-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7c75f5d3072c327c4a0913a4f7f5383",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8195,
        "upload_time": "2022-11-13T13:22:33",
        "upload_time_iso_8601": "2022-11-13T13:22:33.908243Z",
        "url": "https://files.pythonhosted.org/packages/54/b7/264ba72aa3796e2214c1502f48c7c0b93af1134a333675677b04f087dbc5/cellopype-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4e7212939f4783c4bdb96887f014c3683be1e8135ca2d4ec78dc34f4ee9ecc3",
          "md5": "bdfa8bc761ce0b767cdcfe2a325d8b2d",
          "sha256": "98197044651f683c3dad5461d2a4ac49176371106c5579010df6f53271f65542"
        },
        "downloads": -1,
        "filename": "cellopype-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bdfa8bc761ce0b767cdcfe2a325d8b2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7694,
        "upload_time": "2022-11-13T13:22:35",
        "upload_time_iso_8601": "2022-11-13T13:22:35.939016Z",
        "url": "https://files.pythonhosted.org/packages/d4/e7/212939f4783c4bdb96887f014c3683be1e8135ca2d4ec78dc34f4ee9ecc3/cellopype-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32aa12cc57dfc1cb203fc6e72f598295410c38050a685a0cb633f0b7aded65cd",
          "md5": "537589847aa5486d1bf943f9a202a8c3",
          "sha256": "a7fcd997e3f59b6ccbc6ec495879ae5a904bbc46a0f2cb32c638987af01ce2bf"
        },
        "downloads": -1,
        "filename": "cellopype-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "537589847aa5486d1bf943f9a202a8c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8193,
        "upload_time": "2022-11-13T13:41:05",
        "upload_time_iso_8601": "2022-11-13T13:41:05.980923Z",
        "url": "https://files.pythonhosted.org/packages/32/aa/12cc57dfc1cb203fc6e72f598295410c38050a685a0cb633f0b7aded65cd/cellopype-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2dcc3751ff8c3078b60bc61d946b150681cef94c600f7707eddb54e1c4ccb44",
          "md5": "321bac3780cd8efa55511777b3dd22ac",
          "sha256": "9d987a40b253179c1cb0f100708a97d42648e6f38d10070cc5325ffff1f71343"
        },
        "downloads": -1,
        "filename": "cellopype-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "321bac3780cd8efa55511777b3dd22ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7694,
        "upload_time": "2022-11-13T13:41:09",
        "upload_time_iso_8601": "2022-11-13T13:41:09.312920Z",
        "url": "https://files.pythonhosted.org/packages/f2/dc/c3751ff8c3078b60bc61d946b150681cef94c600f7707eddb54e1c4ccb44/cellopype-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32aa12cc57dfc1cb203fc6e72f598295410c38050a685a0cb633f0b7aded65cd",
        "md5": "537589847aa5486d1bf943f9a202a8c3",
        "sha256": "a7fcd997e3f59b6ccbc6ec495879ae5a904bbc46a0f2cb32c638987af01ce2bf"
      },
      "downloads": -1,
      "filename": "cellopype-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "537589847aa5486d1bf943f9a202a8c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 8193,
      "upload_time": "2022-11-13T13:41:05",
      "upload_time_iso_8601": "2022-11-13T13:41:05.980923Z",
      "url": "https://files.pythonhosted.org/packages/32/aa/12cc57dfc1cb203fc6e72f598295410c38050a685a0cb633f0b7aded65cd/cellopype-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2dcc3751ff8c3078b60bc61d946b150681cef94c600f7707eddb54e1c4ccb44",
        "md5": "321bac3780cd8efa55511777b3dd22ac",
        "sha256": "9d987a40b253179c1cb0f100708a97d42648e6f38d10070cc5325ffff1f71343"
      },
      "downloads": -1,
      "filename": "cellopype-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "321bac3780cd8efa55511777b3dd22ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7694,
      "upload_time": "2022-11-13T13:41:09",
      "upload_time_iso_8601": "2022-11-13T13:41:09.312920Z",
      "url": "https://files.pythonhosted.org/packages/f2/dc/c3751ff8c3078b60bc61d946b150681cef94c600f7707eddb54e1c4ccb44/cellopype-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}