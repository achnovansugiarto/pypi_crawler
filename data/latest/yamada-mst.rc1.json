{
  "info": {
    "author": "",
    "author_email": "dyh0110@bu.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# yamada\nPython implementation of the Yamada-Kataoka-Watanabe algorithm to find all minimum spanning trees in an undirected graph.\n\nImplementation mostly follows the `ALL_MST2` algorithm outlined in the original paper. The implementation differs slightly by performing a breadth-first search in liue of a depth-first search. This modification was made so that more variable spanning trees were returned when capping the total number of trees returned.\n\n[**Original Paper**](http://www.nda.ac.jp/~yamada/paper/enum-mst.pdf)\n\nYamada, T. Kataoka, S. Watanabe, K. \"Listing all the minimum spanning trees in an undirected graph\". *International Journal of Computer Mathematics*. Vol 87, No. 14. pp. 3175 - 3185. November 2010.\n \n## Installation\nThis module is not currently hosted through popular package managing tools such as `pip` or `conda`. Therefore, simply cloning, downloading, or forking this repository is the best way to install the package. To ensure global access to the module, you'll want to add the repository location to your `PYTHONPATH`.\n \n## Tests\nProper implementation was tested using the examples found in the original paper, and implementation of those tests can be found in the `test` subdirectory. The graph structure used in Figure 3 of the original paper, is used to explicitly test for exact minimum spanning tree membership. Meanwhile, the unit-weight, complete graphs k<sub>i</sub> are tested for unique membership and expected length for i in {3, 4, 5, 6}. The `Substitute()` algorithm is tested using the example found in table 3 of the original paper.\n \n To run the tests simply execute the following command:\n \n ```\n python tests/test_yamada.py\n ```\n \n## Dependencies\n \nThis module depends on the `numpy`, `networkx`, `collections`, `sortedcontainers`, `sys`, and `unittest` packages, and was written in Python 3.6. The exact requirements can be found in the `requirements.txt` file. A `yamada.yaml` file is also provided for `conda` environment creation.\n \n## Example\n```Python\nimport yamada\nimport networkx as nx\n \nexample = {1: {2: {'weight': 2},\n               3: {'weight': 1}},\n           2: {1: {'weight': 2},\n               3: {'weight': 3},\n               4: {'weight': 1}},\n           3: {1: {'weight': 1},\n               2: {'weight': 3},\n               4: {'weight': 2},\n               5: {'weight': 2}},\n           4: {2: {'weight': 1},\n               3: {'weight': 2},\n               5: {'weight': 1},\n               6: {'weight': 3}},\n           5: {3: {'weight': 2},\n               4: {'weight': 1},\n               6: {'weight': 3}},\n           6: {4: {'weight': 3},\n               5: {'weight': 3}}}\ngraph = nx.Graph(example)\n\n# retrieve all minimum spanning trees \ngraph_yamada = yamada.Yamada(graph)\nall_msts = graph_yamada.spanning_trees()\nprint(len(all_msts))\n\n# retrieve fixed number of minimum spanning trees\ngraph_yamada = yamada.Yamada(graph, n_trees=3)\nmsts = graph_yamada.spanning_trees()\nprint(len(msts))\n ```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dakota-hawkins/yamada",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yamada-mst",
    "package_url": "https://pypi.org/project/yamada-mst/",
    "platform": null,
    "project_url": "https://pypi.org/project/yamada-mst/",
    "project_urls": {
      "Homepage": "https://github.com/dakota-hawkins/yamada"
    },
    "release_url": "https://pypi.org/project/yamada-mst/0.1.0/",
    "requires_dist": [
      "networkx",
      "sortedcontainers",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Package to find all minimum spanning trees in a network graph.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14005831,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6078f99654c5b75fb8e92495e2c148c21b2fe2327c1c5bd357b0fb633e553ad0",
          "md5": "ef8262ae66f6d297685510237979d37a",
          "sha256": "6bb887dd1e04b15221f16f13344047e33f2ea1b84d5eac6cb1cc1d08fea0bee2"
        },
        "downloads": -1,
        "filename": "yamada_mst-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef8262ae66f6d297685510237979d37a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12525,
        "upload_time": "2022-06-01T23:20:50",
        "upload_time_iso_8601": "2022-06-01T23:20:50.999120Z",
        "url": "https://files.pythonhosted.org/packages/60/78/f99654c5b75fb8e92495e2c148c21b2fe2327c1c5bd357b0fb633e553ad0/yamada_mst-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e18c7d32691976ed8ee71eff68c70c64b97c8b105f0b6ec01ffdbb55fd6337a",
          "md5": "4870e7380853dffda742604c12ec4782",
          "sha256": "393ca1c8a70f04da6c9448f05d12e86a1a973c2e9bbcba9952835748a729a86c"
        },
        "downloads": -1,
        "filename": "yamada-mst-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4870e7380853dffda742604c12ec4782",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14724,
        "upload_time": "2022-06-01T23:20:53",
        "upload_time_iso_8601": "2022-06-01T23:20:53.703209Z",
        "url": "https://files.pythonhosted.org/packages/5e/18/c7d32691976ed8ee71eff68c70c64b97c8b105f0b6ec01ffdbb55fd6337a/yamada-mst-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6078f99654c5b75fb8e92495e2c148c21b2fe2327c1c5bd357b0fb633e553ad0",
        "md5": "ef8262ae66f6d297685510237979d37a",
        "sha256": "6bb887dd1e04b15221f16f13344047e33f2ea1b84d5eac6cb1cc1d08fea0bee2"
      },
      "downloads": -1,
      "filename": "yamada_mst-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ef8262ae66f6d297685510237979d37a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12525,
      "upload_time": "2022-06-01T23:20:50",
      "upload_time_iso_8601": "2022-06-01T23:20:50.999120Z",
      "url": "https://files.pythonhosted.org/packages/60/78/f99654c5b75fb8e92495e2c148c21b2fe2327c1c5bd357b0fb633e553ad0/yamada_mst-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e18c7d32691976ed8ee71eff68c70c64b97c8b105f0b6ec01ffdbb55fd6337a",
        "md5": "4870e7380853dffda742604c12ec4782",
        "sha256": "393ca1c8a70f04da6c9448f05d12e86a1a973c2e9bbcba9952835748a729a86c"
      },
      "downloads": -1,
      "filename": "yamada-mst-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4870e7380853dffda742604c12ec4782",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14724,
      "upload_time": "2022-06-01T23:20:53",
      "upload_time_iso_8601": "2022-06-01T23:20:53.703209Z",
      "url": "https://files.pythonhosted.org/packages/5e/18/c7d32691976ed8ee71eff68c70c64b97c8b105f0b6ec01ffdbb55fd6337a/yamada-mst-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}