{
  "info": {
    "author": "Anchal Gupta",
    "author_email": "anchal@caltech.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# CsdTools\n\nA collection of scripts wrapping scipy.signal.csd for some extra features. Most notably, wrapped csd allows one to get uncertainties when using averaging. Future goal is to have more averaging in higher frequency bins of spectrum while getting same number of points per decade.\n\n## Usage\n\nSee [example notebook](https://gitlab.com/anchal-physics/csdTools/-/blob/master/examples/csdToolsExamples.ipynb) for a working example.\n### Using welch with mean and get standard deviation\n\nImport csd and welch from csdTools.\n```python\nfrom csdTools import csd, welch\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom scipy import signal\nimport matplotlib.ticker as mticker\n#******************************************************************************\n#Setting RC Parameters for figure size and fontsizes\nimport matplotlib.pylab as pylab                           \nparams = {'figure.figsize': (16, 12),\n          'xtick.labelsize':'xx-large',\n          'ytick.labelsize':'xx-large',\n          'text.usetex': False,\n          'lines.linewidth': 4,\n          'font.family': 'serif',\n          'font.serif': 'Georgia',\n          'font.size': 20,\n          'xtick.direction': 'in',\n          'ytick.direction': 'in',\n          'xtick.labelsize': 'medium',\n          'ytick.labelsize': 'medium',\n          'axes.labelsize': 'medium',\n          'axes.titlesize':'medium',\n          'axes.grid.axis': 'both',\n          'axes.grid.which': 'both',\n          'axes.grid': True,\n          'grid.color': 'xkcd:cement',\n          'grid.alpha': 0.3,\n          'lines.markersize': 12,\n          'lines.linewidth': 2.0,\n          'legend.borderpad': 0.2,\n          'legend.fancybox': True,\n          'legend.fontsize': 'medium',\n          'legend.framealpha': 0.8,\n          'legend.handletextpad': 0.5,\n          'legend.labelspacing': 0.33,\n          'legend.loc': 'best',\n          'savefig.dpi': 140,\n          'savefig.bbox': 'tight',\n          'pdf.compression': 9}\npylab.rcParams.update(params)\n#******************************************************************************\n```\nGenerate two signal with some common features.\n```python\nfs = 10e3\nN = 1e6\namp = 20\nfreq = 1234.0\nnoise_power = 0.001 * fs / 2\ntime = np.arange(N) / fs\nb, a = signal.butter(2, 0.25, 'low')\nx = np.random.normal(scale=np.sqrt(noise_power), size=time.shape)\ny = signal.lfilter(b, a, x)\nx += amp*np.sin(2*np.pi*freq*time)\ny += np.random.normal(scale=0.1*np.sqrt(noise_power), size=time.shape)\n```\nUse welch function as you would for scipy.signal.welch but give extra argument ```getUnc=True```\n```python\nf, Pxx, Pxxstd = welch(x, fs, nperseg=1000, average='mean', getUnc=True)\nfig, ax = plt.subplots(1, 1, figsize=[16, 12])\nax.plot(f, np.abs(Pxx))\nax.fill_between(f, np.abs(Pxx) - np.abs(Pxxstd), np.abs(Pxx) + np.abs(Pxxstd), alpha=0.3)\nax.set_yscale('log')\nax.set_xscale('log')\nax.set_ylim(1e-6, 2e1)\nax.set_xlabel('frequency [Hz]', fontsize='xx-large')\nax.set_ylabel('PSD [$V^2$/Hz]', fontsize='xx-large')\nax.set_title('Using welch with mean averaging and 1-sigma region.',\n             fontsize='xx-large')\n```\n![](https://gitlab.com/anchal-physics/csdTools/-/raw/master/examples/welchMeanExample.png)\n\n### Using welch with median and get upper-lower bounds\n```python\nf, Pxx, Pxxlb, Pxxub = welch(x, fs, nperseg=2000, average='median', getUnc=True)\nfig, ax = plt.subplots(1, 1, figsize=[16, 12])\nax.plot(f, np.abs(Pxx))\nax.fill_between(f, np.abs(Pxxlb), np.abs(Pxxub), alpha=0.3)\nax.set_yscale('log')\nax.set_xscale('log')\nax.set_ylim(1e-4, 1e2)\nax.set_xlabel('frequency [Hz]', fontsize='xx-large')\nax.set_ylabel('PSD [$V^2$/Hz]', fontsize='xx-large')\nax.set_title('Using welch with median averaging\\nand 15.865% - 84.135% percentile region.',\n             fontsize='xx-large')\n```\n![](https://gitlab.com/anchal-physics/csdTools/-/raw/master/examples/welchMedianExample.png)\n\n### Using csd with 'no' averaging and getting full distribution of data\nSometimes, we are interested in how the PSD or CSD of data is distributed across time.\nWe can have no averaging by setting ```average='no'``` in csd or welch function and would\nget PSD or CSD with extra dimension containing individual PSD or CSD of each time window\nconsidered.\n```python\nf, Pxy = csd(x, y, fs, nperseg=1024, average='no', getUnc=True)\n```\nThis can be histogrammed at each frequency bin to understand the underlying\ndistribution.\n```python\nPxyhist = np.zeros((Pxy.shape[0], 70))\nbins = np.arange(-7, 0.1, 0.1)\nfor row in range(Pxy.shape[0]):\n    Pxyhist[row, :], be = np.histogram(np.log10(np.abs(Pxy[row, :])), bins=bins)\n    Pxyhist[row, :] /= np.linalg.norm(Pxyhist[row, :])\n```\nPlotting a pcolormesh.\n```python\nfig = plt.figure(figsize=[16,12])\nax = fig.gca()\nX, Y = np.meshgrid(f, be[:-1])\nZ = np.transpose(Pxyhist)\npcm = ax.pcolormesh(X, Y, Z, cmap=cm.Greys, shading='auto')\nax.set_ylim(-5, -0.8)\nticks_loc = ax.get_yticks().tolist()\nax.yaxis.set_major_locator(mticker.FixedLocator(ticks_loc))\nax.set_yticklabels([r'$10^{' + str(int(ele)) + '}$' for ele in ticks_loc], fontsize='xx-large')\nax.set_xlabel('frequency [Hz]', fontsize='xx-large')\nax.set_ylabel('CSD [$V^2$/Hz]', fontsize='xx-large')\n\nax.set_title('Absolute value of CSD distribution (no averaging)', fontsize='xx-large')\n\n# Add a color bar which maps values to colors.\nfig.colorbar(pcm, shrink=0.5, aspect=5, label='Normalized Histrogram')\n```\n![](https://gitlab.com/anchal-physics/csdTools/-/raw/master/examples/csdNoAvgExample.png)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://gitlab.com/anchal-physics/csdTools/-/archive/0.1.1/csdtools-0.1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/anchal-physics/csdTools",
    "keywords": "CSD,SCIPY,UNCERTAINTY,STANDARD DEVIATION",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "csdTools",
    "package_url": "https://pypi.org/project/csdTools/",
    "platform": "",
    "project_url": "https://pypi.org/project/csdTools/",
    "project_urls": {
      "Download": "https://gitlab.com/anchal-physics/csdTools/-/archive/0.1.1/csdtools-0.1.1.tar.gz",
      "Homepage": "https://gitlab.com/anchal-physics/csdTools"
    },
    "release_url": "https://pypi.org/project/csdTools/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A collection of scripts wrapping scipy.signal.csd for some extra features. Most notably, wrapped csd allows one to have more averaging in higher frequency bins of spectrum while getting same number of points per decade.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10580347,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "281f7e53b78dbebc4a9cadd7416a66567e8ceb2d2b226831e1d15d0c1a02dca0",
          "md5": "5f6226cf1fe259e6d6b754951935ab50",
          "sha256": "ec3495039bd170e8658d73b6ab0ea9583b7fdfd91567ef11fb03cd8b72b0b4dc"
        },
        "downloads": -1,
        "filename": "csdTools-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5f6226cf1fe259e6d6b754951935ab50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5262,
        "upload_time": "2021-06-07T18:17:15",
        "upload_time_iso_8601": "2021-06-07T18:17:15.292011Z",
        "url": "https://files.pythonhosted.org/packages/28/1f/7e53b78dbebc4a9cadd7416a66567e8ceb2d2b226831e1d15d0c1a02dca0/csdTools-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4a1024a9b12e6f379e475868ebd496f7a0294f03846be543edcebed95bea3a3",
          "md5": "228721be52d4b7ab5a81eaabd58b88e7",
          "sha256": "b856c3a59e3f16aafdc61e61f3f2eaf4345f9117b4302fe3cc73dd479aff2a2a"
        },
        "downloads": -1,
        "filename": "csdTools-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "228721be52d4b7ab5a81eaabd58b88e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 598027,
        "upload_time": "2021-06-07T18:43:34",
        "upload_time_iso_8601": "2021-06-07T18:43:34.002429Z",
        "url": "https://files.pythonhosted.org/packages/a4/a1/024a9b12e6f379e475868ebd496f7a0294f03846be543edcebed95bea3a3/csdTools-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4a1024a9b12e6f379e475868ebd496f7a0294f03846be543edcebed95bea3a3",
        "md5": "228721be52d4b7ab5a81eaabd58b88e7",
        "sha256": "b856c3a59e3f16aafdc61e61f3f2eaf4345f9117b4302fe3cc73dd479aff2a2a"
      },
      "downloads": -1,
      "filename": "csdTools-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "228721be52d4b7ab5a81eaabd58b88e7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 598027,
      "upload_time": "2021-06-07T18:43:34",
      "upload_time_iso_8601": "2021-06-07T18:43:34.002429Z",
      "url": "https://files.pythonhosted.org/packages/a4/a1/024a9b12e6f379e475868ebd496f7a0294f03846be543edcebed95bea3a3/csdTools-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}