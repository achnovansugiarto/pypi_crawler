{
  "info": {
    "author": "Gregor von Laszewski",
    "author_email": "laszewski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Other Environment",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: OS Independent",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: User Interfaces",
      "Topic :: System",
      "Topic :: System :: Distributed Computing",
      "Topic :: System :: Shells",
      "Topic :: Utilities"
    ],
    "description": "# Cloudmesh OpenAPI Service Generator\n\n\n> **Note:** The README.md page is outomatically generated, do not edit it.\n> To modify  change the content in\n> <https://github.com/cloudmesh/cloudmesh-openapi/blob/main/README-source.md>\n> Curley brackets must use two in README-source.md\n\n\n\n[![image](https://img.shields.io/pypi/v/cloudmesh-openapi.svg)](https://pypi.org/project/cloudmesh-openapi/)\n[![Python](https://img.shields.io/pypi/pyversions/cloudmesh-openapi.svg)](https://pypi.python.org/pypi/cloudmesh-openapi)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/cloudmesh/cloudmesh-openapi/blob/main/LICENSE)\n[![Format](https://img.shields.io/pypi/format/cloudmesh-openapi.svg)](https://pypi.python.org/pypi/cloudmesh-openapi)\n[![Status](https://img.shields.io/pypi/status/cloudmesh-openapi.svg)](https://pypi.python.org/pypi/cloudmesh-openapi)\n[![Travis](https://travis-ci.com/cloudmesh/cloudmesh-openapi.svg?branch=main)](https://travis-ci.com/cloudmesh/cloudmesh-openapi)\n\n## Publication\n\nA draft paper is available at\n\n* <https://github.com/laszewski/laszewski.github.io/raw/master/papers/vonLaszewski-openapi.pdf>\n\nThe source to the paper is at\n\n* <https://github.com/cyberaide/paper-openapi>\n\n## Prerequisites\n\n* We recommend Python 3.8.2 Python or newer.\n* We recommend pip version 20.0.2 or newer\n* We recommend that you use a venv (see developer install)\n* MongoDB installed as regular program not as service, which can\n  easily be done with cloudmesh on macOS, Linux, and Windows.\n* Please run `cms gui quick` to initialize the password for the mongodb\n  server\n\n> Note: On windows you can use [gitbash](https://gitforwindows.org/)\n> so you can use bash and can use the same commands as on Linux or\n> macOS. Otherwise, please use the appropriate backslashes to access\n> the path.\n\n## Installation\n\nThe installation is rather simple  and is documented next.\n\n```\npython -m venv ~/ENV3\nsource ~/ENV3/bin/activate \nmkdir cm\ncd cm\npip install cloudmesh-installer\ncloudmesh-installer get openapi \ncms help\ncms gui quick\n# fill out mongo variables\n# make sure autinstall is True\ncms config set cloudmesh.data.mongo.MONGO_AUTOINSTALL=True\ncms admin mongo install --force\n# Restart a new terminal to make sure mongod is in your path\ncms init\n```\n\nIf you like to know more about the installation of cloudmesh, please\nvisit the [Cloudmesh\nManual](https://cloudmesh.github.io/cloudmesh-manual/installation/install.html).\n\n## Command Overview\n\nWhen getting started using cloudmes `openapi`, please first call to\nget familiar with the options you have:\n\n```\ncms help openapi\n```\n\nWe include the manual page later on in this document.\n\n## Quick Start\n\nNext we provide a very simple quickstart guide to steps to generate a\nsimple microservice that returns the CPU information of your computer.\nWe demonstrate how to generate, start, and stop the servive.\n\nNavigate to `~/cm/cloudmesh-openapi` folder. In this folder you will\nhave a file called `cpu.py` from which we will generate the server.\n\nFirst, generate an OpenAPI YAML file with the convenient command\n\n```\ncms openapi generate get_processor_name \\\n    --filename=./tests/server-cpu/cpu.py\n```\n\nThis will create the file `cpu.yaml` that contains the OpenAPI\nspecification. To start the service from this specification simply use\nthe command\n\n```\ncms openapi server start ./tests/server-cpu/cpu.yaml\n```\n\nNow that the service is up and running, you can issue a request for\nexample via the commandline with\n\n```\ncurl -X GET \"http://localhost:8080/cloudmesh/get_processor_name\" \\\n     -H \"accept: text/plain\"\n```\n\nTo view the automatically generated documentation, you can go to your\nbrowser and open the link\n\n* <http://localhost:8080/cloudmesh/ui>\n\n![](images/openapi-ui.png)\n\nYou can also look at the status of the server with the command\n\n```\ncms openapi server list\n```\n\n![](images/openapi-info.png)\n\n\nOnce yo no longer need the service, you can stop it with \n\n```\ncms openapi server stop cpu\n```\n\n## Quickstart to Creating your own Microservice\n\nCloudmesh uses introspection to generate an OpenAPI compliant YAML\nspecification that will allow your Python code to run as a web\nservice. For this reason, any code you write must conform to a set of\nguidelines.\n\n- The parameters and return values of any functions you write must use\n  python typing\n- Your functions must include docstrings\n- If a function uses or returns a class, that class must be defined as\n  a dataclass in the same file\n\nNext we demonstrate how to create your own microservice. \nWe provide two examples. One in which we return a float, \nte other one in which the return value is wrapped in a \njson object.\n\n### Returning a Float\n\nWe define a function that adds tow values.  Note how x,\ny, and the return value are all typed. In this case they are all\n`float`, but other types are supported. The description in the\ndocstring will be added to your YAML specification to help describe\nwhat the function does.\n\n```\ndef add(x: float, y: float) -> float:\n    \"\"\"\n    adding float and float.\n    :param x: x value\n    :type x: float\n    :param y: y value\n    :type y: float\n    :return: result\n    :return type: float\n    \"\"\"\n    result = x + y\n\n    return result\n```\n\nTo generate, start, retrieve a result, and stop the service you can use the \nfollowing command sequence:\n\n```\ncms openapi generate add --filename=./tests/add-float/add.py\ncms openapi server start ./tests/add-float/add.yaml \ncurl -X GET \"http://localhost:8080/cloudmesh/add?x=1&y=2\" -H  \"accept: text/plain\"\n# This command returns\n> 3.0\ncms openapi server stop add\n```\n\n### Returning a Json Object\n\nOften we like to wrap the return value into a json string object, which can easily be \ndone by modifying the previous example as showcased next.\n\n```\nfrom flask import jsonify\n\ndef add(x: float, y: float) -> str:\n    \"\"\"\n    adding float and float.\n    :param x: x value\n    :type x: float\n    :param y: y value\n    :type y: float\n    :return: result\n    :return type: float\n    \"\"\"\n    result = {\"result\": x + y}\n\n    return jsonify(result)\n```\n\nTo generate, start, retrieve a result, and stop the service you can use the \nfollowing command sequence:\n\n```\ncms openapi generate add --filename=./tests/add-json/add.py\ncms openapi server start ./tests/add-json/add.yaml \ncurl -X GET \"http://localhost:8080/cloudmesh/add?x=1&y=2\" -H  \"accept: text/plain\"\n# This command returns\n> {\"result\":3.0}\ncms openapi server stop add\n``` \n\nAs usual in both cases the web browser can be used to inspect the documentation as well as to test running the \nexample, by filling out the form. \n\n## Details of the `cms openapi` command\n\nThe gaol as stated earlier is to transform a simple python function as a service\n\n### Generating OpenAPI specification\n\nOnce you have a Python function you would like to deploy as a web\nservice, you can generate the OpenAPI specification. Navigate to your\n.py file's directory and generate the YAML. This will print\ninformation to your console about the YAML file that was generated.\n\n```\ncms openapi generate [function_name] --filename=[filename.py]\n```\n\nIf you would like to include more than one function in your web\nservice, like addition and subtraction, use the `--all_functions`\nflag. This will ignore functions whose names start with '\\_'.\n\n```\ncms openapi generate --filename=[filename.py] --all_functions\n```\n\nYou can even write a class like Calculator that contains functions for\naddition, subtraction, etc. You can generate a specification for an\nentire class by using the `--import_class` flag.\n\n```\ncms openapi generate [ClassName] --filename=[filename.py] --import_class\n```\n\n### Starting a server\n\nOnce you have generated a specification, you can start the web service\non your localhost by providing the path to the YAML file. This will\nprint information to your console about the server\n\n```\ncms openapi server start ./[filename.yaml]\n\n  Starting: [server name]\n  PID:      [PID]\n  Spec:     ./[filename.py]\n  URL:      http://localhost:8080/cloudmesh\n  Cloudmesh UI:      http://localhost:8080/cloudmesh/ui\n```      \n\n### Sending requests to the server\n\nNow you have two options to interact with the web service. The first\nis to navigate the the Cloudmesh UI and click on each endpoint to test\nthe functionality. The second is to use curl commands to submit\nrequests.\n\nWe have already shown you earlier in our quickstart how to apply this to a \nservice such as our add service\n\n```\n$ curl -X GET \"http://localhost:8080/cloudmesh/add?x=1.2&y=1.5\" -H \"accept: text/plain\"\n>   2.7\n```\n\n### Stopping the server\n\nNow you can stop the server using the name of the server. If you\nforgot the name, use `cms openapi server ps` to get a list of server\nprocesses.\n\n```\n$ cms openapi server stop [server name]\n```\n\n### Basic Auth\n\nTo use basic http authentication with a user password for the\ngenerated API, add the following flag at the end of a `cms openapi\ngenerate` command:\n\n```\n--basic_auth=<username>:<password>\n```\n\nWe plan on supporting more security features in the future. Example:\n\n```\ncms openapi generate get_processor_name \\\n    --filename=./tests/server-cpu/cpu.py \\\n    --basic_auth=admin:secret\n```\n\n## Manual Page\n\n```\nopenapi generate [FUNCTION] --filename=FILENAME\n                         [--serverurl=SERVERURL]\n                         [--yamlfile=YAML]\n                         [--import_class]\n                         [--all_functions]\n                         [--enable_upload]\n                         [--verbose]\n                         [--basic_auth=CREDENTIALS]\nopenapi server start YAML [NAME]\n              [--directory=DIRECTORY]\n              [--port=PORT]\n              [--server=SERVER]\n              [--host=HOST]\n              [--verbose]\n              [--debug]\n              [--fg]\n              [--os]\nopenapi server stop NAME\nopenapi server list [NAME] [--output=OUTPUT]\nopenapi server ps [NAME] [--output=OUTPUT]\nopenapi register add NAME ENDPOINT\nopenapi register filename NAME\nopenapi register delete NAME\nopenapi register list [NAME] [--output=OUTPUT]\nopenapi TODO merge [SERVICES...] [--dir=DIR] [--verbose]\nopenapi TODO doc FILE --format=(txt|md)[--indent=INDENT]\nopenapi TODO doc [SERVICES...] [--dir=DIR]\nopenapi sklearn FUNCTION MODELTAG\nopenapi sklearnreadfile FUNCTION MODELTAG\nopenapi sklearn upload --filename=FILENAME\n\nArguments:\n  FUNCTION  The name for the function or class\n  MODELTAG  The arbirtary name choosen by the user to store the Sklearn trained model as Pickle object\n  FILENAME  Path to python file containing the function or class\n  SERVERURL OpenAPI server URL Default: https://localhost:8080/cloudmesh\n  YAML      Path to yaml file that will contain OpenAPI spec. Default: FILENAME with .py replaced by .yaml\n  DIR       The directory of the specifications\n  FILE      The specification\n\nOptions:\n  --import_class         FUNCTION is a required class name instead of an optional function name\n  --all_functions        Generate OpenAPI spec for all functions in FILENAME\n  --debug                Use the server in debug mode\n  --verbose              Specifies to run in debug mode\n                         [default: False]\n  --port=PORT            The port for the server [default: 8080]\n  --directory=DIRECTORY  The directory in which the server is run\n  --server=SERVER        The server [default: flask]\n  --output=OUTPUT        The outputformat, table, csv, yaml, json\n                         [default: table]\n  --srcdir=SRCDIR        The directory of the specifications\n  --destdir=DESTDIR      The directory where the generated code\n                         is placed\n\nDescription:\nThis command does some useful things.\n\nopenapi TODO doc FILE --format=(txt|md|rst) [--indent=INDENT]\n    Sometimes it is useful to generate teh openaopi documentation\n    in another format. We provide fucntionality to generate the\n    documentation from the yaml file in a different formt.\n\nopenapi TODO doc --format=(txt|md|rst) [SERVICES...]\n    Creates a short documentation from services registered in the\n    registry.\n\nopenapi TODO merge [SERVICES...] [--dir=DIR] [--verbose]\n    Merges tow service specifications into a single servoce\n    TODO: do we have a prototype of this?\n\n\nopenapi sklearn sklearn.linear_model.LogisticRegression\n    Generates the .py file for the Model given for the generator\n\nopenapi sklearnreadfile sklearn.linear_model.LogisticRegression\nGenerates the .py file for the Model given for the generator which supports reading files\n\nopenapi generate [FUNCTION] --filename=FILENAME\n                             [--serverurl=SERVERURL]\n                             [--yamlfile=YAML]\n                             [--import_class]\n                             [--all_functions]\n                             [--enable_upload]\n                             [--verbose]\n                             [--basic_auth=CREDENTIALS]\n    Generates an OpenAPI specification for FUNCTION in FILENAME and\n    writes the result to YAML. Use --import_class to import a class\n    with its associated class methods, or use --all_functions to \n    import all functions in FILENAME. These options ignore functions\n    whose names start with '_'. Use --enable_upload to add file\n    upload functionality to a copy of your python file and the\n    resulting yaml file.\n\n    For optional basic authorization, we support (temporarily) a single user\n    credential. CREDENTIALS should be formatted as follows:\n\n    user:password\n\n    Example: --basic_auth=admin:secret\n\nopenapi server start YAML [NAME]\n                  [--directory=DIRECTORY]\n                  [--port=PORT]\n                  [--server=SERVER]\n                  [--host=HOST]\n                  [--verbose]\n                  [--debug]\n                  [--fg]\n                  [--os]\n    starts an openapi web service using YAML as a specification\n    TODO: directory is hard coded as None, and in server.py it\n      defaults to the directory where the yaml file lives. Can\n      we just remove this argument?\n\nopenapi server stop NAME\n    stops the openapi service with the given name\n    TODO: where does this command has to be started from\n\nopenapi server list [NAME] [--output=OUTPUT]\n    Provides a list of all OpenAPI services in the registry\n\nopenapi server ps [NAME] [--output=OUTPUT]\n    list the running openapi service\n\nopenapi register add NAME ENDPOINT\n    Openapi comes with a service registry in which we can register\n    openapi services.\n\nopenapi register filename NAME\n    In case you have a yaml file the openapi service can also be\n    registerd from a yaml file\n\nopenapi register delete NAME\n    Deletes the names service from the registry\n\nopenapi register list [NAME] [--output=OUTPUT]\n    Provides a list of all registerd OpenAPI services\n```\n\n\n## Basic Examples\n\nPlease follow [Pytest Information](tests/README.md) document for\npytests related information\n\nWe have included a significant number of tests that aso serve as examples\n\n### Example: One function in a python file\n\n1. Please check [Python file](tests/server-cpu/cpu.py).\n\n2. Run below command to generate yaml file and start server\n\n   ```\n   cms openapi generate get_processor_name --filename=./tests/server-cpu/cpu.py\n   ```\n\n### Example: Multiple functions in python file\n\n1. Please check [Python file](tests/generator-calculator/calculator.py)\n\n2. Run below command to generate yaml file and start server\n\n   ```\n   cms openapi generate --filename=./tests/generator-calculator/calculator.py --all_functions\n   cms openapi generate server start ./tests/generator-calculator/calculator.py\n   ```\n\n### Example: Function(s) in python class file\n\n1. Please check [Python file](tests/generator-testclass/calculator.py)\n\n2. Run below command to generate yaml file and start server\n\n   ```\n   cms openapi generate Calculator \\\n       --filename=./tests/generator-testclass/calculator.py \\\n       --import_class\"\n   cms openapi server start ./tests/generator-testclass/calculator.yaml\n   curl -X GET \"http://localhost:8080/cloudmesh/Calculator/multiplyint?x=1&y=5\"\n   cms openapi server stop Calculator\n   ```\n\n### Example: Uploading data\n\nCode to handle uploads is located in\n`cloudmesh-openapi/tests/generator-upload`. The code snippet in\nuploadexample.py and the specification in uploadexample.yaml can be\nadded to existing projects by adding the `--enable_upload` flag to the\n`cms openapi generate` command. The web service will be able to\nretrieve the uploaded file from `~/.cloudmesh/upload-file/`.\n\n#### Upload example\n\nThis example shows how to upload a CSV file and how the web service\ncan retrieve it.\n\nFirst, generate the OpenAPI specification and start the server\n\n```\ncms openapi generate print_csv2np \\\n    --filename=./tests/generator-upload/csv_reader.py \\\n    --enable_upload\ncms openapi server start ./tests/generator-upload/csv_reader.yaml\n```\n\nNext, navigate to localhost:8080/cloudmesh/ui. Click to open\nthe /upload endpoint, then click 'Try it out.' Click to choose a file\nto upload, then upload `tests/generator-upload/np_test.csv`. Click\n'Execute' to complete the upload.\n\nThe uploaded file will be located at\n`~/.cloudmesh/upload-file/[filename]`. The file\n`tests/generator-upload/csv_reader.py` contains some example code to\nretrieve the array in the uploaded file. To see this in action, click\nto open the /print_csv2np endpoint, then click 'Try it out.' Enter\n\"np_test.csv\" in the field that prompts for a filename, and then click\nExecute to view the numpy array defined by the CSV file.\n\n### Example: Pipeline Anova SVM Example\n\nThis example is based on the sklearn example\n[here](https://scikit-learn.org/stable/auto_examples/feature_selection/plot_feature_selection_pipeline.html#sphx-glr-auto-examples-feature-selection-plot-feature-selection-pipeline-py)\n\nIn this example, we will upload a data set to the server, tell the\nserver to train the model, and utilize said model for predictions.\n\nFirstly, ensure we are in the correct directory.\n\n```\n$ pwd\n~/cm/cloudmesh-openapi\n```\n\nThen install some requirements needed for this example\n\n```\n$ pip install sklearn pandas\n```\n\nLet us generate the yaml file from our python file to generate the proper specs for our service.\n\n```\n$ cms openapi generate PipelineAnovaSVM \\\n      --filename=./tests/Scikitlearn-experimental/sklearn_svm.py \\\n      --import_class --enable_upload\n```\n\nNow let us start the server\n\n```\n$ cms openapi server start ./tests/Scikitlearn-experimental/sklearn_svm.yaml\n```\n\nThe server should now be active. Navigate to\n`http://localhost:8080/cloudmesh/ui`. We now have a nice user inteface\nto interact with our newly generated API. Let us upload the data\nset. We are going to use the iris data set in this example. We have\nprovided it for you to use. Simply navigate to the `/upload` endpoint\nby clicking on it, then click `Try it out`.\n\nWe can now upload the file. Click on `Choose File` and upload the data\nset located at `./tests/Scikitlearn-experimental/iris.data`.  Simply\nhit `Execute` after the file is uploaded. We should then get a return\ncode of 200 (telling us that everything went ok).\n\nThe server now has our dataset. Let us now navigate to the `/train`\nendpoint by, again, clicking on it. Similarly, click `Try it out`.\nThe parameter being asked for is the filename. The filename we are\ninterested in is `iris.data`. Then click `execute`.  We should get\nanother 200 return code with a Classification Report in the Response\nBody.  \n\n``` CLASSIFICATION_REPORT: precision recall f1-score support\n\n           0       1.00      1.00      1.00         8\n           1       0.85      1.00      0.92        11\n           2       1.00      0.89      0.94        19\n\n    accuracy                           0.95        38\n   macro avg       0.95      0.96      0.95        38\nweighted avg       0.96      0.95      0.95        38\n```\n\nOur model is now trained and stored on the server. Let us make a\nprediction now. As we have done, navigate to the `/make_prediction`\nendpoint.  The information we need to provide is the name of the model\nwe have trained as well as some test data. The name of the model will\nbe the same as the name of the data-file (ie. iris). So type in `iris`\ninto the `model_name` field. Finally for params, let us use the\nexample `5.1, 3.5, 1.4, 0.2` as the model expects 4 values\n(attributes). After clicking execute, we should received a response\nwith the classification the model has made given the parameters.\n\nThe response received should be as follows:\n\n```\n\"Classification: ['Iris-setosa']\"\n```\n\nWe can make as many predictions as we like. When finished, we can shut down the server.\n\n```\n$ cms openapi server stop sklearn_svm\n```\n\n\n## Example to Run AI Services in the Cloud \n\n### Google\n\nAfter you create your google cloud account, it is recommended to\ndownload and install Google's [Cloud\nSDK](https://cloud.google.com/sdk/docs/quickstarts).  This will\nenable CLI. Make sure you enable all the required services.\n\nFor example:\n\n```\ngcloud services enable servicemanagement.googleapis.com\ngcloud services enable endpoints.googleapis.com\n```\n\nand any other services you might be using for your specific Cloud API\nfunction.\n\nTo begin using the tests for any of the Google Cloud Platform AI\nservices you must first set up a Google account (set up a free tier\naccount): [Google Account\nSetup](https://cloud.google.com/billing/docs/how-to/manage-billing-account)\n\nAfter you create your google cloud account, it is recommended to\ndownload and install Google's [Cloud\nSDK](https://cloud.google.com/sdk/docs/quickstarts).  This will\nenable CLI. Make sure you enable all the required services.\n\nFor example:\n\n```\ngcloud services enable servicemanagement.googleapis.com\ngcloud services enable servicecontrol.googleapis.com\ngcloud services enable endpoints.googleapis.com\n```\n\nand any other services you might be using for your specific Cloud API\nfunction.\n\nIt is also required to install the cloudmesh-cloud package, if not\nalready installed:\n\n```\ncloudmesh-installer get cloud\ncloudmesh-installer install cloud\n```\n\nThis will allow you automatically fill out the cloudmesh yaml file\nwith your credentials once you generate the servcie account JSON file.\n\nAfter you have verified your account is created you must then give your account access to the proper APIs and create a\n project in the Google Cloud Platform(GCP) console.\n\n1. Go to the [project\n   selector](console.cloud.google.com/projectselector2/home/)\n\n2. Follow directions from Google to create a project linked to your\n   account\n\n### Quickstart Google Python API\n\n```\npip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib\n```\n\n* For quickstart in using Google API for Python visit [here](https://developers.google.com/docs/api/quickstart/python)\n\n### Setting up your Google account\n\nBefore you generate the service account JSON file for your account you\nwill want to enable a number of services in the GCP console.\n\n- Google Compute\n- Billing\n- Cloud Natural Language API\n- Translate API\n\n1. To do this you will need to click the menu icon in the Dashboard\n   navigation bar. Ensure you are in the correct porject.\n\n2. Once that menu is open hover over the \"APIs and Services\" menu item\n   and click on \"Dashboard\" in the submenu.\n\n3. At the dashboard click on the \"+ Enable APIs and Services\" button\n   at the top of the dashboard\n\n4. Search for **cloud natural language** to find the API in the search\n   results and click the result\n\n5. Once the page opens click \"Enable\"\n\n6. Do the same for the **translate** API to enable that as well\n\n7. Do the same for the **compute engine API** to enable that as well\n\nYou must now properly set up the account roles to ensure you will have\naccess to the API. Follow the directions from Google to [set up proper\nauthentication](https://cloud.google.com/natural-language/docs/setup#auth)\n\nMake you account an owner for each of the APIs in the IAM tool as\ndirected in the authentication steps for the natural language API.\nThis makes your service account have proper access to the required\nAPIs and once the private key is downloaded those will be stored\nthere.\n\nIt is VERY important that you create a service account and download\nthe private key as described in the directions from Google.  If you do\nnot the cms google commands will not work properly.\n\nOnce you have properly set up your permissions please make sure you\ndownload your JSON private key for the service account that has\npermissions set up for the required API services. These steps to\ndownload are found\n[here](https://cloud.google.com/natural-language/docs/setup#sa-create).\nPlease take note of where you store the downloaded JSON and copy the\npath string to a easily accessible location.\n\n\nThe client libraries for each API are included in teh requirements.txt file for the openapi proejct and should be isntalled when the\npackage is installed. If not, follow directions outlined by google install each package:\n\n```\ngoogle-cloud-translate\ngoogle-cloud-language\n```\n\nTo pass the information from your service account private key file ot\nthe cloudmesh yaml file run the following command:\n\n```\ncms register update --kind=google --service=compute --filename=GOOGLE_JSON_FILE\n```\n\n#### Running the Google Natural Language and Translate REST Services\n\n1. Navigate to the `~/.cloudmesh` repo and create a cache directory\n   for your text examples you would like to analyze.\n\n   ```    \n   mkdir text-cache\n   ```    \n\n2. Add any plain text files your would like to analyze to this\n   directory with a name that has no special characters or spaces.\n   You can copy the files at this location,\n   `./cloudmesh-openapi/tests/textanaysis-example-text/reviews/` into\n   the text-cache if you want to use provided examples.\n\n3. Navigate to the `./cloudmesh-openapi` directory on your machine\n\n4. Utilize the generate command to create the OpenAPI spec\n\n   ```    \n   cms openapi generate TextAnalysis --filename=./tests/generator-natural-lang/natural-lang-analysis.py --all_functions\n   ```\n\n5. Start the server after the yaml file is generated ot the same\n   directory as the .py file\n\n   ```    \n   cms openapie start server ./tests/generator-natural-lang/natural-lang-analysis.yaml\n   ```\n\n6. Run a curl command against the newly running server to verify it\n   returns a result as expected.\n\n    * Sample text file name is only meant to be the name of the file\n      not the full path.\n\n      ```    \n      curl -X GET \"http://127.0.0.1:8080/cloudmesh/analyze?filename=SAMPLE_TEXT_FILENAME&cloud=google\"\n      ```\n\n    * This is currently only ready to translate a single word through\n      the API.\n\n      ```    \n      curl -X GET \"http://127.0.0.1:8080/cloudmesh/translate_text?cloud=google&text=WORD_TO_TRANSLATE&lang=LANG_CODE\"\n      ``` \n7. Stop the server\n\n   ```    \n   cms openapi server stop natural-lang-analysis\n   ```\n### Example using AWS\n\nSign up for AWS\n\n* Go to [https://portal.aws.amazon.com/billing/signup](https://portal.aws.amazon.com/billing/signup)\n* Follow online instructions\n\nCreate an IAM User\n\n* For instructions, see \n[here](https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html)\n\nSet up AWS CLI and AWS SDKs\n\n* To download and instructions to install AWS CLI, see\n  [here](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install)\n\nInstall Boto 3\n\n```\npip install boto3\n```\n\n* For quickstart, vist [here](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html)\n\nAs long as you enable all the services you need for using AWS AI APIs you should be able to write your functions for OpenAPI\n\n\n### Example using Azure\n\n\n#### Setting up Azure Sentiment Analysis and Translation Services\n\n1.  Create an Azure subscription. If you do not have one, create a\n    [free account](https://azure.microsoft.com/try/cognitive-services/)\n\n2. Create a [Text Analysis resource](https://portal.azure.com/#create/Microsoft.CognitiveServicesTextAnalytics)\n\n    * This link will require you to be logged in to the Azure portal\n\n3. Create a [Translation Resource](https://docs.microsoft.com/en-us/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows)\n\n4. The microsoft packages are included in the openapi package\n   requirements file so they should be installed. If they are not,\n   install the following:\n\n   ```\n   pip install msrest \n   pip install azure-ai-textanalytics\n   ```\n\n5. Navigate to the `~/.cloudmesh` repo and create a cache directory for your text examples you would like to analyze.\n\n   ```    \n   mkdir text-cache\n   ```\n\n6. Add any plain text files your would like to analyze to this\n   directory with a name that has no special characters or spaces.\n   You can copy the files at this location,\n   `./cloudmesh-openapi/tests/textanaysis-example-text/reviews/` into\n   the text-cache if you want to use provided examples.\n\n7. Navigate to the `./cloudmesh-openapi` directory on your machine\n\n8. Utilize the generate command to create the OpenAPI spec\n\n   ```\n   cms openapi generate TextAnalysis --filename=./tests/generator-natural-lang/natural-lang-analysis.py --all_functions\n   ```\n\n9. Start the server after the yaml file is generated ot the same\n   directory as the .py file\n\n   ```    \n   cms openapie start server ./tests/generator-natural-lang/natural-lang-analysis.yaml\n   ```\n\n10. Run a curl command against the newly running server to verify it\n    returns a result as expected.\n\n    * Sample text file name is only meant to be the name of the file not the full path.\n\n      ```    \n      curl -X GET \"http://127.0.0.1:8080/cloudmesh/analyze?filename=<<sample text file name>>&cloud=azure\"\n      ```\n\n    * This is currently only ready to translate a single word through the API. \n    * Available language tags are described in the [Azure docs](https://docs.microsoft.com/en-us/azure/cognitive-services/translator/reference/v3-0-languages)\n\n      ```    \n      curl -X GET \"http://127.0.0.1:8080/cloudmesh/translate_text?cloud=azure&text=<<word to translate>>&lang=<<lang code>>\"\n      ```\n\n11. Stop the server\n\n    ```    \n    cms openapi server stop natural-lang-analysis\n    ```\n\nThe natural langauge analysis API can be improved by allowing for full\nphrase translation via the API. If you contribute to this API there is\nroom for improvement to add custom translation models as well if\npreferred to pre-trained APIs.\n\n#### Setting up Azure ComputerVision AI services\n\n##### Prerequisite \n\nUsing the Azure Computer Vision AI service, you can describe, analyze\nand/ or get tags for a locally stored image or you can read the text\nfrom an image or hand-written file.\n\n* Azure subscription. If you do not have one, create a [free\n  account](https://azure.microsoft.com/try/cognitive-services/) before\n  you continue further.\n* Create a Computer Vision resource and get the\n  `COMPUTER_VISION_SUBSCRIPTION_KEY` and\n  `COMPUTER_VISION_ENDPOINT`. Follow\n  [instructions](https://docs.microsoft.com/en-us/azure/cognitive-services/cognitive-services-apis-create-account?tabs=singleservice%2Cunix)\n  to get the same.\n* Install following Python packages in your virtual environment:\n\n  ```\n  pip install requests\n  pip install Pillow\n  ```\n\n* Install Computer Vision client library\n\n   ```\n   pip install --upgrade azure-cognitiveservices-vision-computervision\n   ```\n\n##### Steps to implement and use Azure AI image and text *REST-services*\n\n* Go to `./cloudmesh-openapi` directory\n\n* Run following command to generate the YAML files\n\n  ```  \n  cms openapi generate AzureAiImage --filename=./tests/generator-azureai/azure-ai-image-function.py --all_functions --enable_upload\n  cms openapi generate AzureAiText --filename=./tests/generator-azureai/azure-ai-text-function.py --all_functions --enable_upload\n  ```\n\n* Verify the *YAML* files created in `./tests/generator-azureai` directory\n\n  ```  \n  azure-ai-image-function.yaml\n  azure-ai-text-function.yaml\n  ```\n\n* Start the REST service by running following command in `./cloudmesh-openapi` directory\n\n  ```  \n  cms openapi server start ./tests/generator-azureai/azure-ai-image-function.yaml\n  ```\n\nThe default port used for starting the service is 8080. In case you\nwant to start more than one REST service, use a different port in\nfollowing command:\n\n```  \ncms openapi server start ./tests/generator-azureai/azure-ai-text-function.yaml --port=<**Use a different port than 8080**>\n```\n\n* Access the REST service using [http://localhost:8080/cloudmesh/ui/](http://localhost:8080/cloudmesh/ui/)\n\n* After you have started the azure-ai-image-function or azure-ai-text-function on default port 8080, run following command to upload the image or text_image file\n\n  ```  \n  curl -X POST \"http://localhost:8080/cloudmesh/upload\" -H  \"accept: text/plain\" -H  \"Content-Type: multipart/form-data\" -F \"upload=@tests/generator-azureai/<image_name_with_extension>;type=image/jpeg\"\n  ```\n\n  Keep your test image files at `./tests/generator-azureai/` directory\n\n* With *azure-ai-text-function* started on port=8080, in order to test the azure ai function for text detection in an image, run following command\n\n  ```  \n  curl -X GET \"http://localhost:8080/cloudmesh/azure-ai-text-function_upload-enabled/get_text_results?image_name=<image_name_with_extension_uploaded_earlier>\" -H \"accept: text/plain\"\n  ```\n\n* With *azure-ai-image-function* started on port=8080, in order to\n  test the azure ai function for describing an image, run following\n  command\n\n  ```  \n  curl -X GET \"http://localhost:8080/cloudmesh/azure-ai-image-function_upload-enabled/get_image_desc?image_name=<image_name_with_extension_uploaded_earlier>\" -H \"accept: text/plain\"\n  ```\n\n* With *azure-ai-image-function* started on port=8080, in order to\n  test the azure ai function for analyzing an image, run following\n  command\n\n  ```  \n  curl -X GET \"http://localhost:8080/cloudmesh/azure-ai-image-function_upload-enabled/get_image_analysis?image_name=<image_name_with_extension_uploaded_earlier>\" -H \"accept: text/plain\"\n  ```\n\n* With *azure-ai-image-function* started on port=8080, in order to\n  test the azure ai function for identifying tags in an image, run\n  following command\n\n  ```\n  curl -X GET \"http://localhost:8080/cloudmesh/azure-ai-image-function_upload-enabled/get_image_tags?image_name=<image_name_with_extension_uploaded_earlier>\" -H \"accept: text/plain\"\n  ```\n\n* Check the running REST services using following command:\n\n  ```\n  cms openapi server ps\n  ```\n\n* Stop the REST service using following command(s):\n\n  ```  \n  cms openapi server stop azure-ai-image-function\n  cms openapi server stop azure-ai-text-function\n  ```\n\n## List of Tests \n\nThe following table lists the different test we have, we provide additional \ninformation for the tests in the test directory in a README file. Summaries \nare provided below the table\n\n\n| Test   | Short Description  | Link  |\n| --- | --- | --- | \n| Generator-calculator   | Test to check if calculator api is generated correctly. This is to test multiple function in one python file   | [test_01_generator.py](https://github.com/cloudmesh/cloudmesh-openapi/blob/main/tests/generator-calculator/test_01_generator.py)  \n| Generator-testclass   |Test to check if calculator api is generated correctly. This is to test multiple function in one python class file  | [test_02_generator.py](https://github.com/cloudmesh/cloudmesh-openapi/blob/main/tests/generator-testclass/test_02_generator.py)  \n| Server-cpu    | Test to check if cpu api is generated correctly. This is to test single function in one python file and function name is different than file name  | [test_03_generator.py](https://github.com/cloudmesh/cloudmesh-openapi/blob/main/tests/server-cpu/test_03_generator.py)  \n| Server-cms   | Test to check if cms api is generated correctly. This is to test multiple function in one python file. | [test_04_generator.py](https://github.com/cloudmesh/cloudmesh-openapi/blob/main/tests/server-cms/test_04_generator.py)  \n| Registry    | test_001_registry.py - Runs tests for registry. Description is in tests/README.md| [Link](https://github.com/cloudmesh/cloudmesh-openapi/blob/main/tests/README.md)\n| Image-Analysis | image_test.py - Runs benchmark for text detection for Google Vision API and AWS Rekognition. Description in image-analysis/README.md | [image](https://github.com/cloudmesh/cloudmesh-openapi/blob/main/tests/image-analysis/README.md)\n\n\nFor more information about test cases ,please check [tests info](https://github.com/cloudmesh/cloudmesh-openapi/blob/main/tests/README.md)\n\n\n * [test_001_registry](tests/test_001_registry.py)\n * [test_003_server_manage_cpu](tests/test_003_server_manage_cpu.py)\n * [test_010_generator](tests/test_010_generator.py)\n * [test_011_generator_cpu](tests/test_011_generator_cpu.py)\n * [test_012_generator_calculator](tests/test_012_generator_calculator.py)\n * [test_015_generator_azureai](tests/test_015_generator_azureai.py)\n * [test_020_server_manage](tests/test_020_server_manage.py)\n * [test_server_cms_cpu](tests/test_server_cms_cpu.py)\n\nNote that there a many more tests that you can explore.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cloudmesh/cloudmesh-openapi",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cloudmesh-openapi",
    "package_url": "https://pypi.org/project/cloudmesh-openapi/",
    "platform": "",
    "project_url": "https://pypi.org/project/cloudmesh-openapi/",
    "project_urls": {
      "Homepage": "https://github.com/cloudmesh/cloudmesh-openapi"
    },
    "release_url": "https://pypi.org/project/cloudmesh-openapi/4.0.20/",
    "requires_dist": [
      "connexion[swagger-ui]",
      "cloudmesh-common",
      "cloudmesh-cmd5",
      "cloudmesh-sys",
      "cloudmesh-admin",
      "cloudmesh-gui",
      "docstring-parser",
      "numpydoc"
    ],
    "requires_python": "",
    "summary": "A command called openapi and foo for the cloudmesh shell",
    "version": "4.0.20",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10280461,
  "releases": {
    "1.4.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d49763e200b69031625fabc7c4dbe5c34fb58a062827367efa070dc0a373a07",
          "md5": "6d2291876906d9243f9a0a63604d0b25",
          "sha256": "cbce404361126065b98533dcd9f7c320ecd1fc71b9ae15f4ee3793ce699e1bac"
        },
        "downloads": -1,
        "filename": "cloudmesh.openapi-1.4.23-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d2291876906d9243f9a0a63604d0b25",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 7054,
        "upload_time": "2019-02-18T18:00:13",
        "upload_time_iso_8601": "2019-02-18T18:00:13.672648Z",
        "url": "https://files.pythonhosted.org/packages/3d/49/763e200b69031625fabc7c4dbe5c34fb58a062827367efa070dc0a373a07/cloudmesh.openapi-1.4.23-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5a3fdcd7ea192ef9993f740522b26c0cb2d723580c4b5f39d7f92e00459fd45",
          "md5": "e3ee889e1f5c532faf5a4d8aff2f7032",
          "sha256": "61d2b70d5f16f9be3ecdefb5b1c32fcdafe1630aebacb4879bf0296bf510be3a"
        },
        "downloads": -1,
        "filename": "cloudmesh.openapi-1.4.23.zip",
        "has_sig": false,
        "md5_digest": "e3ee889e1f5c532faf5a4d8aff2f7032",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11402,
        "upload_time": "2019-02-18T18:00:14",
        "upload_time_iso_8601": "2019-02-18T18:00:14.965327Z",
        "url": "https://files.pythonhosted.org/packages/d5/a3/fdcd7ea192ef9993f740522b26c0cb2d723580c4b5f39d7f92e00459fd45/cloudmesh.openapi-1.4.23.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f3a926c14c860c86d57e2ea4bbc90af937dfcc01b012245ae9cbc44261ce2d1",
          "md5": "d1050d1f842459a19c0a37dccf8a25ab",
          "sha256": "c6923c1ecc1800af7f019fb55f08c1cceedc13cfe994457fe4dc7b269e8a4b49"
        },
        "downloads": -1,
        "filename": "cloudmesh.openapi-1.4.24-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1050d1f842459a19c0a37dccf8a25ab",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 7815,
        "upload_time": "2019-02-19T15:29:06",
        "upload_time_iso_8601": "2019-02-19T15:29:06.195226Z",
        "url": "https://files.pythonhosted.org/packages/0f/3a/926c14c860c86d57e2ea4bbc90af937dfcc01b012245ae9cbc44261ce2d1/cloudmesh.openapi-1.4.24-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8240c3f8359fe08e9ef898684ac495c163a3eef9be1cd4b4469d3bd6450cc432",
          "md5": "f208ba326f2c338dde4dfe3290915a48",
          "sha256": "c0a530a4c422bd2bf732c33dc708b9bba3167bf921267428ab91f882101bc03d"
        },
        "downloads": -1,
        "filename": "cloudmesh.openapi-1.4.24.zip",
        "has_sig": false,
        "md5_digest": "f208ba326f2c338dde4dfe3290915a48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12162,
        "upload_time": "2019-02-19T15:29:07",
        "upload_time_iso_8601": "2019-02-19T15:29:07.730785Z",
        "url": "https://files.pythonhosted.org/packages/82/40/c3f8359fe08e9ef898684ac495c163a3eef9be1cd4b4469d3bd6450cc432/cloudmesh.openapi-1.4.24.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56c86ba7f05c9ba1995213c21927db74263779e423f1530fee96c84515858524",
          "md5": "37b64075590956454590fc750d084968",
          "sha256": "dc532ad192b463153920527836967ffbc23c8b8328bfc4d097c7859e92e6b6dd"
        },
        "downloads": -1,
        "filename": "cloudmesh_openapi-4.0.14-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37b64075590956454590fc750d084968",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 60971,
        "upload_time": "2020-10-07T15:53:48",
        "upload_time_iso_8601": "2020-10-07T15:53:48.601812Z",
        "url": "https://files.pythonhosted.org/packages/56/c8/6ba7f05c9ba1995213c21927db74263779e423f1530fee96c84515858524/cloudmesh_openapi-4.0.14-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cdabee21faad77ca81d2b6dd4539eebc20783581c269abcd343ebeaaef46ceb",
          "md5": "6fd722b9ce5be32d11726b2c9a68917b",
          "sha256": "ff52086d98a205dbcc53f99a13275a580ce3ba74f6dc5f5840781ca0254d572c"
        },
        "downloads": -1,
        "filename": "cloudmesh-openapi-4.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "6fd722b9ce5be32d11726b2c9a68917b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55404,
        "upload_time": "2020-10-07T15:53:49",
        "upload_time_iso_8601": "2020-10-07T15:53:49.946782Z",
        "url": "https://files.pythonhosted.org/packages/5c/da/bee21faad77ca81d2b6dd4539eebc20783581c269abcd343ebeaaef46ceb/cloudmesh-openapi-4.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "478de6463545ec9176610048d7a64212f1cd8b6eb80164c576569f300c86f7d3",
          "md5": "829c2e079fd2eeb36990d37e1dbf2001",
          "sha256": "058f2c11ce1476ee402cfb184e7fbd49aa2a6571cb65460d330c21a3fb64777c"
        },
        "downloads": -1,
        "filename": "cloudmesh_openapi-4.0.17-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "829c2e079fd2eeb36990d37e1dbf2001",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 60975,
        "upload_time": "2020-10-07T16:09:46",
        "upload_time_iso_8601": "2020-10-07T16:09:46.055854Z",
        "url": "https://files.pythonhosted.org/packages/47/8d/e6463545ec9176610048d7a64212f1cd8b6eb80164c576569f300c86f7d3/cloudmesh_openapi-4.0.17-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a75214c14d33b2e08d9ced1c09ea6ada47b32c8e1277167b8b4fc840e6a7492",
          "md5": "c85a3c1a9034a9d9fbcaedcc6eb44587",
          "sha256": "3c7866bc1067fd78108936458f132668e7e6024b7ec409de45f0bc4cafed179d"
        },
        "downloads": -1,
        "filename": "cloudmesh-openapi-4.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "c85a3c1a9034a9d9fbcaedcc6eb44587",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55373,
        "upload_time": "2020-10-07T16:09:47",
        "upload_time_iso_8601": "2020-10-07T16:09:47.675696Z",
        "url": "https://files.pythonhosted.org/packages/8a/75/214c14d33b2e08d9ced1c09ea6ada47b32c8e1277167b8b4fc840e6a7492/cloudmesh-openapi-4.0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ba0c95a61663303df623dfc9808333a49c080c2680b7557a78866ea7019b34a",
          "md5": "84b572ca9b716e9bcb084eb2f784745b",
          "sha256": "08c25248aa126eba77b2137e477d2d5a57aae1bee53d3d222f10b2d5d071da24"
        },
        "downloads": -1,
        "filename": "cloudmesh_openapi-4.0.18-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "84b572ca9b716e9bcb084eb2f784745b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 63256,
        "upload_time": "2020-10-09T16:42:21",
        "upload_time_iso_8601": "2020-10-09T16:42:21.542788Z",
        "url": "https://files.pythonhosted.org/packages/5b/a0/c95a61663303df623dfc9808333a49c080c2680b7557a78866ea7019b34a/cloudmesh_openapi-4.0.18-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb05c124a1da1ee55d98423360b6238d724309a38e78e89e69590329bef4f1a2",
          "md5": "7fbf9b2c1595a395e175f068c1597fd0",
          "sha256": "de377365645ffdb54bd5162d06acafe46fb24bebd8601c553e1827d18f3dba74"
        },
        "downloads": -1,
        "filename": "cloudmesh-openapi-4.0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "7fbf9b2c1595a395e175f068c1597fd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63387,
        "upload_time": "2020-10-09T16:42:23",
        "upload_time_iso_8601": "2020-10-09T16:42:23.026781Z",
        "url": "https://files.pythonhosted.org/packages/bb/05/c124a1da1ee55d98423360b6238d724309a38e78e89e69590329bef4f1a2/cloudmesh-openapi-4.0.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e83f81e2b380603963579b9ad12396742cef5068972ddf13f9bcd50c1451e407",
          "md5": "9daa34f42c0a4b0e655916eb4c018a25",
          "sha256": "b85ad50836da9d4fcf6dc48354814c5bba6cb8f48ed5a978651869abddc5e3d8"
        },
        "downloads": -1,
        "filename": "cloudmesh_openapi-4.0.19-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9daa34f42c0a4b0e655916eb4c018a25",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 63349,
        "upload_time": "2020-10-09T16:53:25",
        "upload_time_iso_8601": "2020-10-09T16:53:25.258786Z",
        "url": "https://files.pythonhosted.org/packages/e8/3f/81e2b380603963579b9ad12396742cef5068972ddf13f9bcd50c1451e407/cloudmesh_openapi-4.0.19-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f911c5110147d499ce77b59fc82d7921403543a26dddf4ae00b43e3e7c027a0",
          "md5": "f97bc5bdd16a311a25b86ddbd90362c8",
          "sha256": "240b0a34fcac94e1909911eb14af1d280cc8d49cb98e1d19718d580944e06d80"
        },
        "downloads": -1,
        "filename": "cloudmesh-openapi-4.0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "f97bc5bdd16a311a25b86ddbd90362c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63666,
        "upload_time": "2020-10-09T16:53:27",
        "upload_time_iso_8601": "2020-10-09T16:53:27.290972Z",
        "url": "https://files.pythonhosted.org/packages/3f/91/1c5110147d499ce77b59fc82d7921403543a26dddf4ae00b43e3e7c027a0/cloudmesh-openapi-4.0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cef6a130cc8b35149f02853aee1bcad01a833dfabf6c991f3684e9c961031097",
          "md5": "604a28745db28bcb2fcbeb225efb120d",
          "sha256": "b37a197a567486a25878a24356de10094f03023eb739d112edea505b920ca415"
        },
        "downloads": -1,
        "filename": "cloudmesh_openapi-4.0.20-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "604a28745db28bcb2fcbeb225efb120d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 73922,
        "upload_time": "2021-05-06T22:06:40",
        "upload_time_iso_8601": "2021-05-06T22:06:40.990964Z",
        "url": "https://files.pythonhosted.org/packages/ce/f6/a130cc8b35149f02853aee1bcad01a833dfabf6c991f3684e9c961031097/cloudmesh_openapi-4.0.20-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba96c069c6b205ba1d23c5cda24eb8e244c15cb273e189b9c55103496cd1686a",
          "md5": "d3dbb1723c84b6852b5db48ea42f52fc",
          "sha256": "dfe5d354ca7c8f53c401496c95cb11e5521d721c4eb3d6b4de3926dcd276d759"
        },
        "downloads": -1,
        "filename": "cloudmesh-openapi-4.0.20.tar.gz",
        "has_sig": false,
        "md5_digest": "d3dbb1723c84b6852b5db48ea42f52fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75663,
        "upload_time": "2021-05-06T22:06:43",
        "upload_time_iso_8601": "2021-05-06T22:06:43.250781Z",
        "url": "https://files.pythonhosted.org/packages/ba/96/c069c6b205ba1d23c5cda24eb8e244c15cb273e189b9c55103496cd1686a/cloudmesh-openapi-4.0.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cef6a130cc8b35149f02853aee1bcad01a833dfabf6c991f3684e9c961031097",
        "md5": "604a28745db28bcb2fcbeb225efb120d",
        "sha256": "b37a197a567486a25878a24356de10094f03023eb739d112edea505b920ca415"
      },
      "downloads": -1,
      "filename": "cloudmesh_openapi-4.0.20-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "604a28745db28bcb2fcbeb225efb120d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 73922,
      "upload_time": "2021-05-06T22:06:40",
      "upload_time_iso_8601": "2021-05-06T22:06:40.990964Z",
      "url": "https://files.pythonhosted.org/packages/ce/f6/a130cc8b35149f02853aee1bcad01a833dfabf6c991f3684e9c961031097/cloudmesh_openapi-4.0.20-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba96c069c6b205ba1d23c5cda24eb8e244c15cb273e189b9c55103496cd1686a",
        "md5": "d3dbb1723c84b6852b5db48ea42f52fc",
        "sha256": "dfe5d354ca7c8f53c401496c95cb11e5521d721c4eb3d6b4de3926dcd276d759"
      },
      "downloads": -1,
      "filename": "cloudmesh-openapi-4.0.20.tar.gz",
      "has_sig": false,
      "md5_digest": "d3dbb1723c84b6852b5db48ea42f52fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 75663,
      "upload_time": "2021-05-06T22:06:43",
      "upload_time_iso_8601": "2021-05-06T22:06:43.250781Z",
      "url": "https://files.pythonhosted.org/packages/ba/96/c069c6b205ba1d23c5cda24eb8e244c15cb273e189b9c55103496cd1686a/cloudmesh-openapi-4.0.20.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}