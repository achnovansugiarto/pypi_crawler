{
  "info": {
    "author": "bfzs",
    "author_email": "ydf0509@sohu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "## 1. pip install tps_threadpool_executor\n\n这个线程池和一般线程池不同，是自动控频的，能够将任意耗时大小的函数控制成指定的运行频率。\n\n此线程池入参不是设置并发大小(也可以设置并发大小)，而是设置tps大小(为0则不控频)。\n\n\n能够自动多进程 + 多线程消费。目前的所有三方包要么是进程池，要么是线程池，不够完美。这个是自动多进程+线程池。\n\n## 2. 4种控频线程池\n```\nTpsThreadpoolExecutor 基于单进程的当前线程池控频。\n\nDistributedTpsThreadpoolExecutor 基于多台机器的分布式控频，需要安装redis，统计出活跃线程池，从而平分任务。\n\nTpsThreadpoolExecutorWithMultiProcess  基于单机 多进程 + 智能线程池 的控频率，自动开启多进程,适合单台电脑但cpu核心多。\n\nDistributedTpsThreadpoolExecutorWithMultiProcess 基于多机的，每台机器自动开多进程 + 多线程 的控频率，适合多态电脑，但每台电脑的cpu核数不够强大。\n\n\n```\n\n\n## 实现代码\n```python\n\nimport json\nimport time\nfrom queue import Queue\nimport threading\nfrom threadpool_executor_shrink_able.sharp_threadpoolexecutor import ThreadPoolExecutorShrinkAble\nimport nb_log\nimport redis\nimport decorator_libs\nimport socket\n\nimport os\nimport multiprocessing\nimport atexit\n\n# 4种控频\n\n\n\"\"\"\nTpsThreadpoolExecutor 基于单进程的当前线程池控频。\n\nDistributedTpsThreadpoolExecutor 基于多台机器的分布式控频，需要安装redis，统计出活跃线程池，从而平分任务。\n\nTpsThreadpoolExecutorWithMultiProcess  基于单机 多进程 + 智能线程池 的控频率，自动开启多进程。\n\nDistributedTpsThreadpoolExecutorWithMultiProcess 基于多机的，每台机器自动开多进程的控频率。\n\n例如你有1台 128核的电脑作为压测客户机， 需要对web服务产生每秒1万次请求，则选择 TpsThreadpoolExecutorWithMultiProcess 合适（不需要安装redis）。\n例如你有6台 16核的电脑作为压测客户机， 需要对web服务产生每秒1万次请求，则选择 DistributedTpsThreadpoolExecutorWithMultiProcess 合适。\n\n\"\"\"\n\n\nclass ThreadPoolExecutorShrinkAbleWithSpecifyQueue(ThreadPoolExecutorShrinkAble):\n    def __init__(self, *args, specify_work_queue=None, **kwargs):\n        super(ThreadPoolExecutorShrinkAbleWithSpecifyQueue, self).__init__(*args, **kwargs)\n        self.work_queue = specify_work_queue\n\n\nclass TpsThreadpoolExecutor(nb_log.LoggerMixin):\n\n    def __init__(self, tps=0, max_workers=500, specify_work_queue=None):\n        \"\"\"\n        :param tps:   指定线程池每秒运行多少次函数，为0这不限制运行次数\n        \"\"\"\n        self.tps = tps\n        self.time_interval = 1 / tps if tps != 0 else 0\n        self.pool = ThreadPoolExecutorShrinkAbleWithSpecifyQueue(max_workers=max_workers,\n                                                                 specify_work_queue=specify_work_queue or Queue(\n                                                                     max_workers))  # 这是使用的智能线程池，所以可以写很大的数字，具体见另一个包的解释。\n        self._last_submit_task_time = time.time()\n        self._lock_for_count__last_submit_task_time = threading.Lock()\n\n    def submit(self, func, *args, **kwargs):\n        with self._lock_for_count__last_submit_task_time:\n            if self.time_interval:\n                time.sleep(self.time_interval)\n            return self.pool.submit(func, *args, **kwargs)\n\n    def shutdown(self, wait=True):\n        self.pool.shutdown(wait=wait)\n\n\ndef get_host_ip():\n    ip = ''\n    host_name = ''\n    # noinspection PyBroadException\n    try:\n        sc = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        sc.connect(('8.8.8.8', 80))\n        ip = sc.getsockname()[0]\n        host_name = socket.gethostname()\n        sc.close()\n    except Exception:\n        pass\n    return ip, host_name\n\n\nclass DistributedTpsThreadpoolExecutor(TpsThreadpoolExecutor, ):\n    \"\"\"\n    这个是redis分布式控频线程池，不是基于incr计数的，是基于统计活跃消费者，然后每个线程池平分频率的。\n    \"\"\"\n\n    def __init__(self, tps=0, max_workers=500, specify_work_queue=None, pool_identify: str = None,\n                 redis_url: str = 'redis://:@127.0.0.1/0'):\n        \"\"\"\n        :param tps: 指定线程池每秒运行多少次函数，为0这不限制运行次数\n        :param pool_identify: 对相同标识的pool，进行分布式控频,例如多台机器都有标识为 123 的线程池，则所有机器加起来的运行次数控制成指定频率。\n        :param redis_url:   'redis://:secret@100.22.233.110/7'\n        \"\"\"\n        if pool_identify is None:\n            raise ValueError('设置的参数错误')\n        self._pool_identify = pool_identify\n        super(DistributedTpsThreadpoolExecutor, self).__init__(tps=tps, max_workers=max_workers, specify_work_queue=specify_work_queue)\n        # self.queue = multiprocessing.Queue(500)\n        self.redis_db = redis.from_url(redis_url)\n        self.redis_key_pool_identify = f'DistributedTpsThreadpoolExecutor:{pool_identify}'\n        ip, host_name = get_host_ip()\n        self.current_process_flag = f'{ip}-{host_name}-{os.getpid()}-{id(self)}'\n        self._heartbeat_interval = 10\n        decorator_libs.keep_circulating(self._heartbeat_interval, block=False, daemon=True)(\n            self._send_heartbeat_to_redis)\n        threading.Thread(target=self._run__send_heartbeat_to_redis_2_times).start()\n        self._last_show_pool_instance_num = time.time()\n\n    def _run__send_heartbeat_to_redis_2_times(self):\n        \"\"\" 使开始时候快速检测两次\"\"\"\n        self._send_heartbeat_to_redis()\n        time.sleep(2)\n        self._send_heartbeat_to_redis()\n\n    def _send_heartbeat_to_redis(self):\n        all_identify = self.redis_db.smembers(self.redis_key_pool_identify)\n        for identify in all_identify:\n            identify_dict = json.loads(identify)\n            if identify_dict['current_process_flag'] == self.current_process_flag:\n                self.redis_db.srem(self.redis_key_pool_identify, identify)\n            if time.time() - identify_dict['last_heartbeat_ts'] > self._heartbeat_interval + 1:\n                self.redis_db.srem(self.redis_key_pool_identify, identify)\n        self.redis_db.sadd(self.redis_key_pool_identify, json.dumps(\n            {'current_process_flag': self.current_process_flag, 'last_heartbeat_ts': time.time(),\n             'last_heartbeat_time_str': time.strftime('%Y-%m-%d %H:%M:%S')}))\n        pool_instance_num = self.redis_db.scard(self.redis_key_pool_identify)\n        if time.time() - self._last_show_pool_instance_num > 60:\n            self.logger.debug(f'分布式环境中一共有 {pool_instance_num} 个  {self._pool_identify} 标识的线程池')\n        self.time_interval = (1.0 / self.tps) * pool_instance_num if self.tps != 0 else 0\n\n\nclass TpsThreadpoolExecutorWithMultiProcess(nb_log.LoggerMixin):\n    \"\"\" 自动开多进程 + 线程池的方式。 例如你有一台128核的压测机器 对 web服务端进行压测，要求每秒压测1万 tps，单进程远远无法做到，可以方便设置 process_num 为 100\"\"\"\n\n    def _start_a_threadpool(self, ):\n        ttp = TpsThreadpoolExecutor(tps=self.tps / self.process_num, max_workers=self._max_works)  # noqa\n        while True:\n            func, args, kwargs = self.queue.get()  # 结束可以放None，然后这里判断，终止。或者joinable queue\n            future = ttp.submit(func, *args, **kwargs)\n            future.add_done_callback(self._queue_call_back)\n\n    # noinspection PyUnusedLocal\n    def _queue_call_back(self, result):\n        self.queue.task_done()\n\n    def __init__(self, tps=0, max_workers=500, process_num=1):\n        # if os.name == 'nt':\n        #     raise EnvironmentError('不支持win')\n        # self.queue = multiprocessing.Queue(1)\n        self._max_works = max_workers\n        self.queue = multiprocessing.JoinableQueue(1)  # mu\n        self.tps = tps\n        self.process_num = process_num\n        self.time_interval = 1 / tps if tps != 0 else 0\n        self._lock_for_submit = multiprocessing.Lock()\n        for _ in range(process_num):\n            multiprocessing.Process(target=self._start_a_threadpool, daemon=True).start()\n        atexit.register(self._at_exit)\n\n    def submit(self, func, *args, **kwargs):\n        self.queue.put((func, args, kwargs))\n\n    def shutdown(self, wait=True):\n        self.queue.join()\n\n    def _at_exit(self):\n        self.logger.warning('触发atexit')\n        self.queue.join()\n\n\n# noinspection PyMethodOverriding\nclass DistributedTpsThreadpoolExecutorWithMultiProcess(TpsThreadpoolExecutorWithMultiProcess):\n    \"\"\" 自动开多进程 + 线程池的方式。 例如你有6台16核的压测机器 对 web服务端进行压测，要求每秒压测1万 tps，单进程远远无法做到，可以方便设置 process_num 为 100\"\"\"\n\n    def _start_a_threadpool(self):\n        ttp = DistributedTpsThreadpoolExecutor(tps=self.tps, max_workers=self._max_works, pool_identify=self.pool_identify, redis_url=self.redis_url)  # noqa\n        while True:\n            func, args, kwargs = self.queue.get()\n            future = ttp.submit(func, *args, **kwargs)\n            future.add_done_callback(self._queue_call_back)\n\n    # noinspection PyMissingConstructor\n    def __init__(self, tps=0, max_workers=500, process_num=1, pool_identify: str = None, redis_url: str = 'redis://:@127.0.0.1/0'):\n        self.pool_identify = pool_identify\n        self.redis_url = redis_url\n        self.queue = multiprocessing.JoinableQueue(1)\n        self.tps = tps\n        self.process_num = process_num\n        self.time_interval = 1 / tps if tps != 0 else 0\n        self._max_workers = max_workers\n        # self.ttp = DistributedTpsThreadpoolExecutor(tps=self.tps, pool_identify=self.pool_identify, redis_url=self.redis_url)\n        for _ in range(process_num):\n            multiprocessing.Process(target=self._start_a_threadpool, daemon=True).start()\n        atexit.register(self._at_exit)\n\n\ndef f1(x):\n    time.sleep(0.5)\n    print(os.getpid(),threading.get_ident(), x)\n\n\ndef f2(x):\n    time.sleep(7)\n    print(os.getpid(), x)\n\n\ndef request_baidu():\n    import requests\n    resp = requests.get('http://www.baidu.com/content-search.xml')\n    print(os.getpid(), resp.status_code, resp.text[:10])\n\n\nif __name__ == '__main__':\n    # tps_pool = TpsThreadpoolExecutor(tps=7)  # 这个是单机控频\n    # tps_pool = DistributedTpsThreadpoolExecutor(tps=7, pool_identify='pool_for_use_print')  # 这个是redis分布式控频，不是基于频繁incr计数的，是基消费者数量统计的。\n    tps_pool = TpsThreadpoolExecutorWithMultiProcess(tps=8, process_num=3)  # 这个是redis分布式控频，不是基于incr计数的，是基于\n    # tps_pool = DistributedTpsThreadpoolExecutorWithMultiProcess(tps=4, pool_identify='pool_for_use_print', redis_url='redis://:372148@127.0.0.1/0', process_num=5)  # 这个是redis分布式控频，不是基于incr计数的，是基于\n    for i in range(100):\n        tps_pool.submit(f1, i)\n        # tps_pool.submit(f2, i * 10)\n        # tps_pool.submit(request_baidu)\n\n\n\n\"\"\"",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "threadpool_executor,ThreadPoolExecutorShrinkAble,ThreadPoolExecutor,tps,qps",
    "license": "BSD License",
    "maintainer": "ydf",
    "maintainer_email": "ydf0509@sohu.com",
    "name": "tps-threadpool-executor",
    "package_url": "https://pypi.org/project/tps-threadpool-executor/",
    "platform": "all",
    "project_url": "https://pypi.org/project/tps-threadpool-executor/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/tps-threadpool-executor/1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "tps_threadpool_executor,it can run function specify times every second",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11866820,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baca5cb0899072b5d5bcc18212680b427c92e837c17935cd45030a1644152461",
          "md5": "a4b0da5a1a677f35fee2ad72b9f41e95",
          "sha256": "74fc471670e3b030a7a1cfcd7538b6e2cb1febaa98bc85779eaa638a24fd0084"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a4b0da5a1a677f35fee2ad72b9f41e95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2589,
        "upload_time": "2021-01-28T02:44:16",
        "upload_time_iso_8601": "2021-01-28T02:44:16.798513Z",
        "url": "https://files.pythonhosted.org/packages/ba/ca/5cb0899072b5d5bcc18212680b427c92e837c17935cd45030a1644152461/tps_threadpool_executor-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfc12b5e929a2249b23e7efcb6da9eb3b40a642d0fd9e42927af826ee21fd30a",
          "md5": "332d2f2dc8fc4ea0588156da7b705a7c",
          "sha256": "ea70c2cf416330d09ce86a484295f5a4b0557c0dc64ae7b8c6586731b0781fe7"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "332d2f2dc8fc4ea0588156da7b705a7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2662,
        "upload_time": "2021-01-28T02:46:23",
        "upload_time_iso_8601": "2021-01-28T02:46:23.477618Z",
        "url": "https://files.pythonhosted.org/packages/bf/c1/2b5e929a2249b23e7efcb6da9eb3b40a642d0fd9e42927af826ee21fd30a/tps_threadpool_executor-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c956f02197a6b990ee183fb2c945163147fcb0195f043876dce32cc9dad54afc",
          "md5": "b7e686feb77165b3d3968c31ad878b92",
          "sha256": "7cf49c8237fdeba8c2041cd260ec9bfcf51fc1ca7efeba1a0cb2518aa40642d0"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b7e686feb77165b3d3968c31ad878b92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4055,
        "upload_time": "2021-01-28T03:54:42",
        "upload_time_iso_8601": "2021-01-28T03:54:42.541553Z",
        "url": "https://files.pythonhosted.org/packages/c9/56/f02197a6b990ee183fb2c945163147fcb0195f043876dce32cc9dad54afc/tps_threadpool_executor-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73fa9b31bae7f69665d662d3bd80d5d3f7484f08e2a65a15e9d5768ad641d0b6",
          "md5": "4c741c113eb47b444d85eb87a24aaa11",
          "sha256": "bc463ee478600fbaf36dee42ff4dc046083671c849b8284037436e439f42b69c"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4c741c113eb47b444d85eb87a24aaa11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4092,
        "upload_time": "2021-01-28T04:00:14",
        "upload_time_iso_8601": "2021-01-28T04:00:14.279273Z",
        "url": "https://files.pythonhosted.org/packages/73/fa/9b31bae7f69665d662d3bd80d5d3f7484f08e2a65a15e9d5768ad641d0b6/tps_threadpool_executor-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d118eeef816317456d6b720881f454dc7343aab1dae0a8b086276f3cc3102a4",
          "md5": "25e19b23845413ff8fedbd289033d1e8",
          "sha256": "c0c7531c91f9d775472103edf6b0b64ee98d924bebdd3eb93ce5ce82a89d151e"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "25e19b23845413ff8fedbd289033d1e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4258,
        "upload_time": "2021-01-28T04:17:55",
        "upload_time_iso_8601": "2021-01-28T04:17:55.135616Z",
        "url": "https://files.pythonhosted.org/packages/2d/11/8eeef816317456d6b720881f454dc7343aab1dae0a8b086276f3cc3102a4/tps_threadpool_executor-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8b5f94e8efb67cbe8855a078619cd57eb723de4c6abffd71cd6acc88366d4f2",
          "md5": "798c077d564808fc0666dc69a060f9ca",
          "sha256": "bbaf6fe451caee31627c82a4ad678d3eab71d00a9372bf123b02439eae30356b"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "798c077d564808fc0666dc69a060f9ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5940,
        "upload_time": "2021-01-28T11:30:18",
        "upload_time_iso_8601": "2021-01-28T11:30:18.665572Z",
        "url": "https://files.pythonhosted.org/packages/e8/b5/f94e8efb67cbe8855a078619cd57eb723de4c6abffd71cd6acc88366d4f2/tps_threadpool_executor-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb6f40adf1df59963fdf5977051769b3d16d0fbaab47656d6bcd37a40dee0add",
          "md5": "002de9ac067fb2d14781d78e9c936fd1",
          "sha256": "09221fa08413a26adb39580923003dc46b58e99d81b3fc89146f73b05e349974"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "002de9ac067fb2d14781d78e9c936fd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6250,
        "upload_time": "2021-01-29T10:42:13",
        "upload_time_iso_8601": "2021-01-29T10:42:13.070782Z",
        "url": "https://files.pythonhosted.org/packages/bb/6f/40adf1df59963fdf5977051769b3d16d0fbaab47656d6bcd37a40dee0add/tps_threadpool_executor-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "775f3de0a0a8f643ea8532c42972e576f7d5100411f36688f7c3029ad376aa67",
          "md5": "1cec5b6bb278ea8251aa679d087a15ea",
          "sha256": "fc1d981fdac9d537fa87d425c3264a27bfda371efdd0ede1ac6e36ec2b3f79f9"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1cec5b6bb278ea8251aa679d087a15ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6216,
        "upload_time": "2021-01-29T10:45:04",
        "upload_time_iso_8601": "2021-01-29T10:45:04.830182Z",
        "url": "https://files.pythonhosted.org/packages/77/5f/3de0a0a8f643ea8532c42972e576f7d5100411f36688f7c3029ad376aa67/tps_threadpool_executor-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e09c0a5dad922a3fdd69ce19ddd9034d024adffd437724ac27b2e4b712ee579",
          "md5": "e8ec5d53583a01e1eb4169da260bf5d5",
          "sha256": "b42acd6ea44d4b5e8e896af2b30db952e6287be9f3b5d215709012a6cef8572e"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e8ec5d53583a01e1eb4169da260bf5d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6556,
        "upload_time": "2021-02-01T06:51:43",
        "upload_time_iso_8601": "2021-02-01T06:51:43.859032Z",
        "url": "https://files.pythonhosted.org/packages/1e/09/c0a5dad922a3fdd69ce19ddd9034d024adffd437724ac27b2e4b712ee579/tps_threadpool_executor-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2964ac7b406a19ecfd9a6afb6f5325651ee38d7887e8cb42cf008a00657e8ed",
          "md5": "131781a8ff7f131418d331f7e3e7821b",
          "sha256": "d304f32b4d03f42d7c4294b2f506a4b184cf0f37ff8d1afb1e6103f17cb418c7"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "131781a8ff7f131418d331f7e3e7821b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6684,
        "upload_time": "2021-02-01T09:41:58",
        "upload_time_iso_8601": "2021-02-01T09:41:58.029863Z",
        "url": "https://files.pythonhosted.org/packages/e2/96/4ac7b406a19ecfd9a6afb6f5325651ee38d7887e8cb42cf008a00657e8ed/tps_threadpool_executor-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "718c52827ab28a3bb40471dc6579fc6bb567103e640be9e180bead1d76f83f41",
          "md5": "d5b6da523093cb71803141d8f4e5b7c7",
          "sha256": "6243d33cc16595a754c369d35e652d27ad0efb19001f678cd76995cd0ac0a7f2"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d5b6da523093cb71803141d8f4e5b7c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5010,
        "upload_time": "2021-02-01T10:08:06",
        "upload_time_iso_8601": "2021-02-01T10:08:06.058139Z",
        "url": "https://files.pythonhosted.org/packages/71/8c/52827ab28a3bb40471dc6579fc6bb567103e640be9e180bead1d76f83f41/tps_threadpool_executor-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57d538a5f9306923c19c36dd728dfb940f7e9786c71f8225d74efee8a4abd1a9",
          "md5": "21c6472637d7893fb5958acb9e8fea81",
          "sha256": "165efb54c2607c05a965b1e79f9c836e5667ee052c4840d84983fa3bfe9b3bf8"
        },
        "downloads": -1,
        "filename": "tps_threadpool_executor-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "21c6472637d7893fb5958acb9e8fea81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6709,
        "upload_time": "2021-10-29T08:54:46",
        "upload_time_iso_8601": "2021-10-29T08:54:46.171698Z",
        "url": "https://files.pythonhosted.org/packages/57/d5/38a5f9306923c19c36dd728dfb940f7e9786c71f8225d74efee8a4abd1a9/tps_threadpool_executor-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57d538a5f9306923c19c36dd728dfb940f7e9786c71f8225d74efee8a4abd1a9",
        "md5": "21c6472637d7893fb5958acb9e8fea81",
        "sha256": "165efb54c2607c05a965b1e79f9c836e5667ee052c4840d84983fa3bfe9b3bf8"
      },
      "downloads": -1,
      "filename": "tps_threadpool_executor-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "21c6472637d7893fb5958acb9e8fea81",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6709,
      "upload_time": "2021-10-29T08:54:46",
      "upload_time_iso_8601": "2021-10-29T08:54:46.171698Z",
      "url": "https://files.pythonhosted.org/packages/57/d5/38a5f9306923c19c36dd728dfb940f7e9786c71f8225d74efee8a4abd1a9/tps_threadpool_executor-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}