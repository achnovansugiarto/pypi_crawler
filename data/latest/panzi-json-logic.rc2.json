{
  "info": {
    "author": "Mathias PanzenbÃ¶ck",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "panzi-json-logic\n================\n\nPure Python 3 [JsonLogic](https://jsonlogic.com/) and\n[CertLogic](https://github.com/ehn-dcc-development/dgc-business-rules/blob/main/certlogic/specification/README.md)\nimplementation.\n\nThe JsonLogic format is designed to allow you to share rules (logic) between\nfront-end and back-end code (regardless of language difference), even to store\nlogic along with a record in a database. JsonLogic is documented at\n[JsonLogic.com](http://jsonlogic.com), including examples of every\n[supported operation](http://jsonlogic.com/operations.html) and a place to\n[try out rules in your browser](http://jsonlogic.com/play.html).\n\nCertLogic is a dialect of JsonLogic with slightly different semantics and\noperations.\n\nThere are already other JsonLogic implementations in Python, but last I looked\nthey don't emulate all the JavaScript operator behaviors quite right and they\ndon't implement CertLogic at all. This implementation tries to be as close to\nthe [JavaScript implementation](https://github.com/jwadhams/json-logic-js) of\nJsonLogic as feasible.\n\n* [Installation](#installation)\n* [Examples](#examples)\n  * [Simple](#simple)\n  * [Compound](#compound)\n  * [Data-Driven](#data-driven)\n  * [Always and Never](#always-and-never)\n  * [CertLogic](#certlogic)\n* [Custom Operations](#custom-operations)\n* [Extras](#extras)\n* [Remarks](#remarks)\n* [Credits](#credits)\n\nInstallation\n------------\n\nInstall this package via pypi:\n\n```bash\npip install panzi-json-logic\n```\n\nExamples\n--------\n\n### Simple\n\n```python\nfrom json_logic import jsonLogic\njsonLogic( { \"==\" : [1, 1] } )\n# True\n```\n\nThis is a simple test, equivalent to `1 == 1`. A few things about the format:\n\n1. The operator is always in the \"key\" position. There is only one key per\n   JsonLogic rule.\n2. The values are typically an array.\n3. Each value can be a string, number, boolean, array (non-associative), or null\n\nNote that `==` tries to emulate the JavaScript `==` operator and as such it is\nadviseable to rather use `===`, which in this implementations simply uses\nPython's `==`.\n\n### Compound\n\nHere rules are nested.\n\n```Python\njsonLogic(\n  { \"and\" : [\n    { \">\" : [3, 1] },\n    { \"<\" : [1, 3] }\n  ] }\n)\n# True\n```\n\nIn an infix language (like Python) this could be written as:\n\n```Python\n( (3 > 1) and (1 < 3) )\n```\n\n### Data-Driven\n\nObviously these rules aren't very interesting if they can only take static\nliteral data. Typically `jsonLogic()` will be called with a rule object and a\ndata object. You can use the `var` operator to get attributes of the data object:\n\n```Python\njsonLogic(\n  { \"var\" : [\"a\"] }, # Rule\n  { a : 1, b : 2 }   # Data\n)\n# 1\n```\n\nIf you like, [syntactic sugar](https://en.wikipedia.org/wiki/Syntactic_sugar)\non unary operators to skip the array around values is supported:\n\n```Python\njsonLogic(\n  { \"var\" : \"a\" },\n  { a : 1, b : 2 }\n)\n# 1\n```\n\nYou can also use the `var` operator to access an array by numeric index:\n\n```Python\njsonLogic(\n  { \"var\" : 1 },\n  [ \"apple\", \"banana\", \"carrot\" ]\n)\n# \"banana\"\n```\n\nHere's a complex rule that mixes literals and data. The pie isn't ready to eat\nunless it's cooler than 110 degrees, *and* filled with apples.\n\n```Python\nrules = { \"and\" : [\n  { \"<\" : [ { \"var\" : \"temp\" }, 110 ]},\n  { \"==\" : [ { \"var\" : \"pie.filling\" }, \"apple\" ] }\n] }\n\ndata = { \"temp\" : 100, \"pie\" : { \"filling\" : \"apple\" } }\n\njsonLogic(rules, data)\n# True\n```\n\n### Always and Never\n\nSometimes the rule you want to process is \"Always\" or \"Never.\" If the first\nparameter passed to `jsonLogic()` is a non-object, non-associative-array, it is\nreturned immediately.\n\n```Python\n# Always\njsonLogic(True, data_will_be_ignored)\n# True\n\n# Never\njsonLogic(False, i_wasnt_even_supposed_to_be_here)\n# False\n```\n\n### CertLogic\n\nCertLogic is implemented in the `json_logic.cert_logic` sub-module:\n\n```Python\nfrom json_logic.cert_logic import certLogic\n\ncertLogic({\n    \"plusTime\": [\n        \"2022-01-02T15:00:00+02:00\",\n        2,\n        \"day\"\n    ]\n}).isoformat()\n# '2022-01-04T15:00:00+02:00'\n```\n\nCustom Operations\n-----------------\n\nIn contrast to other JsonLogic implementations you are not supposed to\nmanipulate the libraries dictionary of operations, but instead pass your own\ndictionary as optional 3rd argument to `jsonLogic()`. If you want to use\nthe predefined operations you have to manually include them:\n\n```Python\nfrom json_logic import jsonLogic\nfrom json_logic.builtins import BUILTINS\n\nops = { **BUILTINS, 'pow': lambda data, a, b: a ** b }\njsonLogic({ 'pow': [3, 2]}, None, ops)\n# 9\n```\n\nNote that in contrast to other Python JsonLogic libraries the data as passed to\nthe `jsonLogic()` function (or the context data in\n`map`/`filter`/`reduce`/`all`/`some`/`none`) is passed to operator functions as\nthe first argument (you can call it `self` if you want to, to be consistent with\nthe JavaScript implementation where it is the `this` argument).\n\nNote that not all operations can be overwritten with the operations dictionary.\nIn particular these operations are hard coded in because of their short circuit\nbehavior or because they execute one operand on all the items of a list: `if`\n(alternative spelling: `?:`), `and`, `or`, `map`, `filter`, `reduce`, `all`,\n`some`, `none`.\n\nThe `certLogic()` function can be called in the same way with extra operations.\nThe CertLogic builtins can be found under `json_logic.cert_logic.builtins.BUILTINS`.\n\nExtras\n------\n\nThis library also includes some extra operators that are not part of JsonLogic.\nYou can find them under `json_logic.extras.EXTRAS`. This dictionary already\nincludes `json_logic.builtins.BUILTINS`. The same extras but combined with\n`json_logic.cert_logic.builtins.BUILTINS` can be found under\n`json_logic.cert_logic.extras.EXTRAS`. The CertLogic extras also include all the\noperations from JsonLogic that are otherwise missing from CertLogic, but with\nCertLogic semantics for `!` and `!!` (i.e. empty objects are falsy in CertLogic,\nbut truthy in JsonLogic).\n\n### `now`\n\nRetrieve current time as Python `datetime` object in UTC.\n\n```\n{\n    \"now\": []\n}\n```\n\nExample:\n\n```Python\nfrom json_logic import jsonLogic\nfrom json_logic.extras import EXTRAS\njsonLogic({\"now\":[]}, None, EXTRAS)\n# datetime.datetime(2021, 9, 12, 0, 31, 25, 419443, tzinfo=datetime.timezone.utc)\n```\n\n### `parseTime`\n\nParse RFC 3339 date and date-time strings. Date-time strings without an explicit\ntime zone offset are assumed to be in UTC.\n\n```\n{\n    \"parseTime\": [\n        <string-or-datetime>\n    ]\n}\n```\n\nExample:\n\n```Python\njsonLogic({\"parseTime\":\"2022-01-02\"}, None, EXTRAS)\n# datetime.datetime(2022, 1, 2, 0, 0, tzinfo=datetime.timezone.utc)\njsonLogic({\"parseTime\":\"2022-01-02T15:00:00+02:00\"}, None, EXTRAS)\n# datetime.datetime(2022, 1, 2, 15, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=7200)))\n```\n\n**NOTE:**\n\nYou need to use `parseTime` before comparing actual `datetime` objects with\ndate-times provided as a string or you'll get wrong results. Assume the current\ntime is somewhen in 2021:\n\n```Python\njsonLogic({\"<\": [{\"now\":[]},\"2022-01-02\"]}, None, EXTRAS)\n# False\njsonLogic({\"<\": [{\"now\":[]},{\"parseTime\":\"2022-01-02\"}]}, None, EXTRAS)\n# True\n```\n\nHowever CertLogic has operators that are doing that for you:\n\n```Python\nfrom json_logic import certLogic\nfrom json_logic.cert_logic.extras import EXTRAS\ncertLogic({\"before\":[{\"now\":[]},\"2022-01-02\"]}, None, EXTRAS)\n# True\n```\n\nNote that `json_logic.cert_logic.extras.EXTRAS` (to get `now`) is used with\n`certLogic`.\n\n### `timeSince`\n\nMilliseconds since given date-time.\n\n```\n{\n    \"timeSince\": [\n        <string-or-datetime>\n    ]\n}\n```\n\nExmaple:\n\n```Python\njsonLogic({\"timeSince\":\"2021-01-02T15:00:00+02:00\"}, None, EXTRAS)\n# 21814538195.281\n```\n\n### `hours`\n\nConvert hours to milliseconds. Useful in combination with `timeSince`.\n\n```\n{\n    \"hours\": [\n        <number>\n    ]\n}\n```\n\nExample:\n\n```Python\njsonLogic({\"hours\": 2}, None, EXTRAS)\n# 7200000\n```\n\n### `days`\n\nConvert days to milliseconds. Useful in combination with `timeSince`.\n\n```\n{\n    \"hours\": [\n        <number>\n    ]\n}\n```\n\nExample:\n\n```Python\njsonLogic({\"days\": 2}, None, EXTRAS)\n# 172800000\n```\n\n### `combinations`\n\nReturn array of arrays that represent all combinations of the elements of all\nthe lists.\n\n```\n{\n    \"combinations\": [\n        <array>...\n    ]\n}\n```\n\nExample:\n\n```Python\nfrom json_logic import jsonLogic\nfrom json_logic.extras import EXTRAS\n\njsonLogic({\"combinations\": [\n    [1, 2, 3],\n    [\"a\", \"b\", \"c\"],\n    [\"x\", \"y\", \"z\"],\n]}, None, EXTRAS)\n# [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n```\n\n### `zip`\n\nLike Python's `zip()`, but returns array of arrays (instead of generator of\ntuples).\n\n```\n{\n    \"zip\": [\n        <array>...\n    ]\n}\n```\n\nExample:\n\n```Python\njsonLogic({\"zip\": [\n    [1, 2],\n    [\"a\", \"b\"],\n]}, None, EXTRAS)\n# [[1, 'a'], [2, 'b']]\n```\n\nRemarks\n-------\n\nThere is currently one known way where this implementation differs from the\n[JavaScript implementation](https://github.com/jwadhams/json-logic-js/) of\nJsonLogic: The `substr` operator in this implementation operates on code points,\nbut in json-logic-js it operates on UTF-16 code units. To emulate this in\nPython an UTF-16 encode/decode round-trip is needed in `substr`, and even then\nthere are differences where Python disallows broken UTF-16, but JavaScript\nallows it.\n\nBut if you really want the JavaScript behavior this library provides an\nalternative `substr` implementation that does the UTF-16 round-trip. You can use\nit like this:\n\n```Python\nfrom json_logic import jsonLogic\nfrom json_logic.builtins import BUILTINS, op_substr_utf16\n\nresult = jsonLogic(logic, data, { **BUILTINS, 'substr': op_substr_utf16 })\n```\n\nCredits\n-------\n\nSome of this README is copied from [json-logic-py](https://github.com/nadirizr/json-logic-py),\nsome of the tests are ported from [json-logic-js](https://github.com/jwadhams/json-logic-js)\nand the [JsonLogic test suite](https://jsonlogic.com/tests.json) and the\n[CertLogic test suite](https://github.com/ehn-dcc-development/dgc-business-rules/tree/main/certlogic/specification/testSuite)\nare included in the tests of this library.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/panzi/panzi-json-logic",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "panzi-json-logic",
    "package_url": "https://pypi.org/project/panzi-json-logic/",
    "platform": "",
    "project_url": "https://pypi.org/project/panzi-json-logic/",
    "project_urls": {
      "Bug Tarcker": "https://github.com/panzi/panzi-json-logic/issues",
      "Homepage": "https://github.com/panzi/panzi-json-logic"
    },
    "release_url": "https://pypi.org/project/panzi-json-logic/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Pure Python 3 JsonLogic and CertLogic implementation.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11426785,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2b7b76a11bebc7919f8f25a6b0d2ffb43f79d0f3c3e69a9a339c06cd3d3c7f3",
          "md5": "05ea2921d939e86b90802924f9b409eb",
          "sha256": "978cf91368cd070901ac184161c891763b97c8dd9faad7930856b788e754c581"
        },
        "downloads": -1,
        "filename": "panzi_json_logic-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05ea2921d939e86b90802924f9b409eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14290,
        "upload_time": "2021-09-11T02:44:08",
        "upload_time_iso_8601": "2021-09-11T02:44:08.812468Z",
        "url": "https://files.pythonhosted.org/packages/c2/b7/b76a11bebc7919f8f25a6b0d2ffb43f79d0f3c3e69a9a339c06cd3d3c7f3/panzi_json_logic-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd66ad93bb611dcb203c25c34c31391d12c3aba35ac6374184556f8767c330dc",
          "md5": "ceadd1bf1e379d2af6acfef54951b71a",
          "sha256": "5040915fc5c1dd6e1b830d4d951c274cbc5806f39c3a1884ba5159f1b65b97c4"
        },
        "downloads": -1,
        "filename": "panzi-json-logic-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ceadd1bf1e379d2af6acfef54951b71a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14225,
        "upload_time": "2021-09-11T02:44:10",
        "upload_time_iso_8601": "2021-09-11T02:44:10.102875Z",
        "url": "https://files.pythonhosted.org/packages/cd/66/ad93bb611dcb203c25c34c31391d12c3aba35ac6374184556f8767c330dc/panzi-json-logic-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e27e7d1042fa1323872647e4aaa43141154eea03aab1261c0bbdd81eb79b7b77",
          "md5": "4d7a234af8f83d1728a3616979b4aafd",
          "sha256": "3010a9b2233330d484f2b6e77a8d86f41830d33bd63c060008c4b576b5fa6076"
        },
        "downloads": -1,
        "filename": "panzi_json_logic-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d7a234af8f83d1728a3616979b4aafd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14866,
        "upload_time": "2021-09-12T00:58:27",
        "upload_time_iso_8601": "2021-09-12T00:58:27.403899Z",
        "url": "https://files.pythonhosted.org/packages/e2/7e/7d1042fa1323872647e4aaa43141154eea03aab1261c0bbdd81eb79b7b77/panzi_json_logic-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ade1efa00742ebb40f784a90d10ee05c1ef284730d6013d7d2427a9f4904d4c",
          "md5": "fac8c93579d873aa8ce05726cc428407",
          "sha256": "df80ec3902ef6b03d89f28642cf5031d8aa4fd86c17010133ca23415e6652253"
        },
        "downloads": -1,
        "filename": "panzi-json-logic-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fac8c93579d873aa8ce05726cc428407",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15301,
        "upload_time": "2021-09-12T00:58:28",
        "upload_time_iso_8601": "2021-09-12T00:58:28.773546Z",
        "url": "https://files.pythonhosted.org/packages/3a/de/1efa00742ebb40f784a90d10ee05c1ef284730d6013d7d2427a9f4904d4c/panzi-json-logic-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e27e7d1042fa1323872647e4aaa43141154eea03aab1261c0bbdd81eb79b7b77",
        "md5": "4d7a234af8f83d1728a3616979b4aafd",
        "sha256": "3010a9b2233330d484f2b6e77a8d86f41830d33bd63c060008c4b576b5fa6076"
      },
      "downloads": -1,
      "filename": "panzi_json_logic-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d7a234af8f83d1728a3616979b4aafd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14866,
      "upload_time": "2021-09-12T00:58:27",
      "upload_time_iso_8601": "2021-09-12T00:58:27.403899Z",
      "url": "https://files.pythonhosted.org/packages/e2/7e/7d1042fa1323872647e4aaa43141154eea03aab1261c0bbdd81eb79b7b77/panzi_json_logic-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ade1efa00742ebb40f784a90d10ee05c1ef284730d6013d7d2427a9f4904d4c",
        "md5": "fac8c93579d873aa8ce05726cc428407",
        "sha256": "df80ec3902ef6b03d89f28642cf5031d8aa4fd86c17010133ca23415e6652253"
      },
      "downloads": -1,
      "filename": "panzi-json-logic-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fac8c93579d873aa8ce05726cc428407",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15301,
      "upload_time": "2021-09-12T00:58:28",
      "upload_time_iso_8601": "2021-09-12T00:58:28.773546Z",
      "url": "https://files.pythonhosted.org/packages/3a/de/1efa00742ebb40f784a90d10ee05c1ef284730d6013d7d2427a9f4904d4c/panzi-json-logic-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}