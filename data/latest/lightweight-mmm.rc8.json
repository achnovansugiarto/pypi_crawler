{
  "info": {
    "author": "Google LLC",
    "author_email": "no-reply@google.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "<img align=\"left\" width=\"120\" height=\"120\" src=\"https://raw.githubusercontent.com/google/lightweight_mmm/main/images/lightweight_mmm_logo_colored_250.png\" alt=\"lightweight_mmm_logo_colored_250\"></img>\n\n# Lightweight (Bayesian) Marketing Mix Modeling\n### LMMM is a python library that helps organisations understand and optimise marketing spend across media channels.\n##### This is not an official Google product.\n\n[![PyPI](https://img.shields.io/pypi/v/lightweight_mmm?logo=pypi&logoColor=white&style=flat-square)](https://pypi.org/project/lightweight_mmm/)\n[![GitHub Workflow CI](https://img.shields.io/github/actions/workflow/status/google/lightweight_mmm/ci.yaml?branch=main&label=pytest&logo=python&logoColor=white&style=flat-square)](https://github.com/google/lightweight_mmm/actions/workflows/ci.yaml?branch=main)\n[![Read the Docs](https://img.shields.io/readthedocs/lightweight_mmm?label=ReadTheDocs&logo=readthedocs&logoColor=white&style=flat-square)](https://lightweight-mmm.readthedocs.io/en/latest/)\n[![Downloads](https://pepy.tech/badge/lightweight-mmm)](https://pepy.tech/project/lightweight-mmm)\n\n[Docs](https://lightweight-mmm.readthedocs.io/en/latest/) •\n[Introduction](#introduction) •\n[Theory](#theory) •\n[Getting Started](#getting-started) •\n[References](#references) •\n[Community Spotlight](#community-spotlight)\n\n## Introduction\n\n[Marketing Mix Modeling (MMM)](https://en.wikipedia.org/wiki/Marketing_mix_modeling) is used by advertisers to measure advertising effectiveness and inform budget allocation decisions across media channels. Measurement based on aggregated data allows comparison across online and offline channels in addition to being unaffected by recent ecosystem changes (some related to privacy) which may affect attribution modelling. MMM allows you to:\n\n- Estimate the optimal budget allocation across media channels.\n- Understand how media channels perform with a change in spend.\n- Investigate effects on your target KPI (such as sales) by media channel.\n\nTaking a Bayesian approach to MMM allows an advertiser to integrate prior information into modelling, allowing you to:\n\n- Utilise information from industry experience or previous media mix models using Bayesian priors.\n- Report on both parameter and model uncertainty and propagate it to your budget optimisation.\n- Construct hierarchical models, with generally tighter credible intervals, using breakout dimensions such as geography.\n\nThe LightweightMMM package (built using [Numpyro](https://github.com/pyro-ppl/numpyro) and [JAX](https://github.com/google/jax)) helps advertisers easily build Bayesian MMM models by providing the functionality to appropriately scale data, evaluate models, optimise budget allocations and plot common graphs used in the field.\n\n## Theory\n\n### Simplified Model Overview\n\nAn MMM quantifies the relationship between media channel activity  and sales, while controlling for other factors. A simplified model overview is shown below and the full model is set out in the [model documentation](https://lightweight-mmm.readthedocs.io/en/latest/models.html). An MMM is typically run using weekly level observations (e.g. the KPI could be sales per week), however, it can also be run at the daily level.\n\n$$kpi = \\alpha + trend + seasonality + media\\ channels + other\\ factors$$\n\nWhere *kpi* is typically the volume or value of sales per time period, $\\alpha$ is the model intercept, $trend$ is a flexible non-linear function that captures trends in the data, $seasonality$ is a sinusoidal function with configurable parameters that flexibly captures seasonal trends, $media\\ channels$ is a matrix of different media channel activity (typically impressions or costs per time period) which receives transformations depending on the model used (see Media Saturation and Lagging section) and $other\\ factors$ is a matrix of other factors that could influence sales.\n\n### Standard and Hierarchical models\n\nThe LightweightMMM can either be run using data aggregated at the national level (standard approach) or using data aggregated at a geo level (sub-national hierarchical approach).\n\n1. **National level (standard approach).** This approach is appropriate if the data available is only aggregated at the national level (e.g. The KPI could be national sales per time period). This is the most common format used in MMMs.\n\n2. **Geo level (sub-national hierarchical approach).** This approach is appropriate if the data can be aggregated at a sub-national level (e.g. the KPI could be sales per time period for each state within a country). This approach can yield more accurate results compared to the standard approach because it uses more data points to fit the model. We recommend using a sub-national level model for larger countries such as the US if possible.\n\n### Media Saturation and Lagging\n\nIt is likely that the effect of a media channel on sales could have a lagged effect which tapers off slowly over time. Our powerful Bayesian MMM model architecture is designed to capture this effect and offers three different approaches. We recommend users compare all three approaches and use the approach that works the best. The approach that works the best will typically be the one which has the best out-of-sample fit (which is one of the generated outputs). The functional forms of these three approaches are briefly described below and are fully expressed in our [model documentation](https://lightweight-mmm.readthedocs.io/en/latest/models.html).\n\n- [Adstock](https://en.wikipedia.org/wiki/Advertising_adstock): Applies an infinite lag that decreases its weight as time passes.\n- [Hill-Adstock](https://en.wikipedia.org/wiki/Hill_equation_(biochemistry)): Applies a sigmoid like function for diminishing returns to the output of the adstock function.\n- [Carryover](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/46001.pdf): Applies a [causal convolution](https://paperswithcode.com/method/causal-convolution) giving more weight to the near values than distant ones.\n\n### Flow chart\n\n<img src=\"https://raw.githubusercontent.com/google/lightweight_mmm/main/images/flowchart.png\" alt=\"flow_chart\"></img>\n\n\n## Getting started\n\n### Installation\n\nThe recommended way of installing lightweight_mmm is through PyPi:\n\n```bash\npip install --upgrade pip\npip install lightweight_mmm\n```\n\nIf you want to use the most recent and slightly less stable version you can install it from github:\n\n`pip install --upgrade git+https://github.com/google/lightweight_mmm.git`\n\n### Preparing the data\nHere we use simulated data but it is assumed you have your data cleaned at this\npoint. The necessary data will be:\n\n- Media data: Containing the metric per channel and time span (eg. impressions\n  per time period). Media values must not contain negative values.\n- Extra features: Any other features that one might want to add to the analysis.\n  These features need to be known ahead of time for optimization or you would need\n  another model to estimate them.\n- Target: Target KPI for the model to predict. For example, revenue amount, number of app installs. This will also be the metric\n  optimized during the optimization phase.\n- Costs: The total cost per media unit per channel.\n\n```python\n# Let's assume we have the following datasets with the following shapes (we use\nthe `simulate_dummy_data` function in utils for this example):\nmedia_data, extra_features, target, costs = utils.simulate_dummy_data(\n    data_size=160,\n    n_media_channels=3,\n    n_extra_features=2,\n    geos=5) # Or geos=1 for national model\n```\nScaling is a bit of an art, Bayesian techniques work well if the input data is\nsmall scale. We should not center variables at 0. Sales and media should have a\nlower bound of 0.\n\n1. `y` can be scaled as `y / jnp.mean(y)`.\n2. `media` can be scaled as `X_m / jnp.mean(X_m, axis=0)`, which means the new column mean will be 1.\n\nWe provide a `CustomScaler` which can apply multiplications and division scaling\nin case the wider used scalers don't fit your use case. Scale your data\naccordingly before fitting the model.\nBelow is an example of usage of this `CustomScaler`:\n\n```python\n# Simple split of the data based on time.\nsplit_point = data_size - data_size // 10\nmedia_data_train = media_data[:split_point, :]\ntarget_train = target[:split_point]\nextra_features_train = extra_features[:split_point, :]\nextra_features_test = extra_features[split_point:, :]\n\n# Scale data\nmedia_scaler = preprocessing.CustomScaler(divide_operation=jnp.mean)\nextra_features_scaler = preprocessing.CustomScaler(divide_operation=jnp.mean)\ntarget_scaler = preprocessing.CustomScaler(\n    divide_operation=jnp.mean)\n# scale cost up by N since fit() will divide it by number of time periods\ncost_scaler = preprocessing.CustomScaler(divide_operation=jnp.mean)\n\nmedia_data_train = media_scaler.fit_transform(media_data_train)\nextra_features_train = extra_features_scaler.fit_transform(\n    extra_features_train)\ntarget_train = target_scaler.fit_transform(target_train)\ncosts = cost_scaler.fit_transform(unscaled_costs)\n```\n\nIn case you have a variable that has a lot of 0s you can also scale by the mean\nof non zero values. For instance you can use a lambda function to do this:\n`lambda x: jnp.mean(x[x > 0])`. The same applies for cost scaling.\n\n### Training the model\nThe model requires the media data, the extra features, the costs of each media\nunit per channel and the target. You can also pass how many samples you would\nlike to use as well as the number of chains.\n\nFor running multiple chains in parallel the user would need to set\n`numpyro.set_host_device_count` to either the number of chains or the number of\nCPUs available.\n\nSee an example below:\n\n```python\n# Fit model.\nmmm = lightweight_mmm.LightweightMMM()\nmmm.fit(media=media_data,\n        extra_features=extra_features,\n        media_prior=costs,\n        target=target,\n        number_warmup=1000,\n        number_samples=1000,\n        number_chains=2)\n```\n\nIf you want to change any prior in the model (besides the media prior which you\nare already specifying always), you can do so with `custom_priors`:\n\n```python\n# See detailed explanation on custom priors in our documentation.\ncustom_priors = {\"intercept\": numpyro.distributions.Uniform(1, 5)}\n\n# Fit model.\nmmm = lightweight_mmm.LightweightMMM()\nmmm.fit(media=media_data,\n        extra_features=extra_features,\n        media_prior=costs,\n        target=target,\n        number_warmup=1000,\n        number_samples=1000,\n        number_chains=2,\n        custom_priors=custom_priors)\n```\n\nPlease refer to our [documentation on custom_priors](https://lightweight-mmm.readthedocs.io/en/latest/custom_priors.html)\nfor more details.\n\nYou can switch between daily and weekly data by enabling\n`weekday_seasonality=True` and `seasonality_frequency=365` or\n`weekday_seasonality=False` and `seasonality_frequency=52` (default). In case\nof daily data we have two types of seasonality: discrete weekday and smooth\nannual.\n\n### Model diagnostics\n#### Convergence Check\nUsers can check convergence metrics of the parameters as follows:\n\n```python\nmmm.print_summary()\n```\n\nThe rule of thumb is that `r_hat` values for all parameters are less than 1.1.\n\n#### Fitting check\nUsers can check fitting between true KPI and predicted KPI by:\n\n```python\nplot.plot_model_fit(media_mix_model=mmm, target_scaler=target_scaler)\n```\n\nIf `target_scaler` used for `preprocessing.CustomScaler()` is given, the target\nwould be unscaled. Bayesian R-squared and MAPE are shown in the chart.\n\n#### Predictive check\nUsers can get the prediction for the test data by:\n\n```python\nprediction = mmm.predict(\n    media=media_data_test,\n    extra_features=extra_data_test,\n    target_scaler=target_scaler\n)\n```\n\nReturned prediction are distributions; if point estimates are desired, users\ncan calculate those based on the given distribution. For example, if `data_size`\nof the test data is 20, `number_samples` is 1000 and `number_of_chains` is 2,\n`mmm.predict` returns 2000 sets of predictions with 20 data points. Users can\ncompare the distributions with the true value of the test data and calculate\nthe metrics such as mean and median.\n\n#### Parameter estimation check\nUsers can get detail of the parameter estimation by:\n\n```python\nmmm.print_summary()\n```\n\nThe above returns the mean, standard deviation, median and the credible interval\nfor each parameter. The distribution charts are provided by:\n\n```python\nplot.plot_media_channel_posteriors(media_mix_model=mmm, channel_names=media_names)\n```\n\n`channel_names` specifies media names in each chart.\n\n#### Media insights\nResponse curves are provided as follows:\n\n```python\nplot.plot_response_curves(media_mix_model=mmm, media_scaler=media_scaler, target_scaler=target_scaler)\n```\n\nIf `media_scaler` and `target_scaler` used for `preprocessing.CustomScaler()` are given, both the media and target values would be unscaled.\n\nTo extract the media effectiveness and ROI estimation, users can do the following:\n\n```python\nmedia_effect_hat, roi_hat = mmm.get_posterior_metrics()\n```\n\n`media_effect_hat` is the media effectiveness estimation and `roi_hat` is the ROI estimation. Then users can visualize the distribution of the estimation as follows:\n\n```python\nplot.plot_bars_media_metrics(metric=media_effect_hat, channel_names=media_names)\n```\n\n```python\nplot.plot_bars_media_metrics(metric=roi_hat, channel_names=media_names)\n```\n\n### Running the optimization\n\nFor optimization we will maximize the sales changing the media inputs such that\nthe summed cost of the media is constant. We can also allow reasonable bounds\non each media input (eg +- x%). We only optimise across channels and not over\ntime. For running the optimization one needs the following main parameters:\n\n- `n_time_periods`: The number of time periods you want to simulate (eg. Optimize\n  for the next 10 weeks if you trained a model on weekly data).\n- The model that was trained.\n- The `budget` you want to allocate for the next `n_time_periods`.\n- The extra features used for training for the following `n_time_periods`.\n- Price per media unit per channel.\n- `media_gap` refers to the media data gap between the end of training data and\n  the start of the out of sample media given. Eg. if 100 weeks of data were used\n  for training and prediction starts 2 months after training data finished we\n  need to provide the 8 weeks missing between the training data and the\n  prediction data so data transformations (adstock, carryover, ...) can take\n  place correctly.\n\nSee below and example of optimization:\n\n```python\n# Run media optimization.\nbudget = 40 # your budget here\nprices = np.array([0.1, 0.11, 0.12])\nextra_features_test = extra_features_scaler.transform(extra_features_test)\nsolution = optimize_media.find_optimal_budgets(\n    n_time_periods=extra_features_test.shape[0],\n    media_mix_model=mmm,\n    budget=budget,\n    extra_features=extra_features_test,\n    prices=prices)\n```\n\n### Save and load the model\nUsers can save and load the model as follows:\n\n```python\nutils.save_model(mmm, file_path='file_path')\n```\n\nUsers can specify `file_path` to save the model.\nTo load a saved MMM model:\n\n```python\nutils.load_model(file_path: 'file_path')\n```\n\n## Citing LightweightMMM\n\nTo cite this repository:\n\n```\n@software{lightweight_mmmgithub,\n  author = {Pablo Duque and Dirk Nachbar and Yuka Abe and Christiane Ahlheim and Mike Anderson and Yan Sun and Omri Goldstein and Tim Eck},\n  title = {LightweightMMM: Lightweight (Bayesian) Marketing Mix Modeling},\n  url = {https://github.com/google/lightweight_mmm},\n  version = {0.1.6},\n  year = {2022},\n}\n```\n\n\n## References\n\n- [Jin, Y., Wang, Y., Sun, Y., Chan, D., & Koehler, J. (2017). Bayesian Methods for Media Mix Modeling with Carryover and Shape Effects. Google Inc.](https://research.google/pubs/pub46001/)\n\n- [Chan, D., & Perry, M. (2017). Challenges and Opportunities in Media Mix Modeling.](https://research.google/pubs/pub45998/)\n\n- [Sun, Y., Wang, Y., Jin, Y., Chan, D., & Koehler, J. (2017). Geo-level Bayesian Hierarchical Media Mix Modeling.](https://research.google/pubs/pub46000/)\n\n## Community Spotlight\n\n- [How To Create A Marketing Mix Model With LightweightMMM](https://forecastegy.com/posts/how-to-create-a-marketing-mix-model-with-lightweightmmm/) by Mario Filho.\n\n- [How Google LightweightMMM Works](https://getrecast.com/google-lightweightmmm/) and [A walkthrough of Google’s LightweightMMM](https://www.youtube.com/watch?v=oRYN0V6sPlM) by Mike Taylor.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/google/lightweight_mmm",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lightweight-mmm",
    "package_url": "https://pypi.org/project/lightweight-mmm/",
    "platform": null,
    "project_url": "https://pypi.org/project/lightweight-mmm/",
    "project_urls": {
      "Homepage": "https://github.com/google/lightweight_mmm"
    },
    "release_url": "https://pypi.org/project/lightweight-mmm/0.1.7/",
    "requires_dist": [
      "absl-py",
      "arviz (==0.11.2)",
      "immutabledict (>=2.0.0)",
      "jax (>=0.3.18)",
      "jaxlib (>=0.3.18)",
      "matplotlib (==3.6.1)",
      "numpy (>=1.24)",
      "numpyro (>=0.9.2)",
      "pandas (>=1.1.5)",
      "scipy",
      "seaborn (==0.11.1)",
      "scikit-learn",
      "statsmodels (>=0.13.0)",
      "tensorflow (>=2.7.2)",
      "typing-extensions ; python_version < \"3.8\""
    ],
    "requires_python": "",
    "summary": "Package for Media-Mix-Modelling",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16321636,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bd6c82f1994061791044db83da11f9176800e39642dae8107bd9b6916a0cd26",
          "md5": "b498b88e10dfa557f84e2e9291b6dde5",
          "sha256": "9d44590005402334255db8250f1cacbe88d1c46c267f7c026bd959d081b6da4a"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b498b88e10dfa557f84e2e9291b6dde5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40613,
        "upload_time": "2022-02-14T12:56:21",
        "upload_time_iso_8601": "2022-02-14T12:56:21.098239Z",
        "url": "https://files.pythonhosted.org/packages/3b/d6/c82f1994061791044db83da11f9176800e39642dae8107bd9b6916a0cd26/lightweight_mmm-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "342f2356fb6845b28331a3266414023e4487abe4eb2a7e3e49be047dc94c0635",
          "md5": "6843205460ad985535a154d1faf6eec6",
          "sha256": "1729f5f6331f0dd3aafd5e8f1ca982a84a29cf174f960b0cf538625155489acd"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6843205460ad985535a154d1faf6eec6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32053,
        "upload_time": "2022-02-14T12:56:22",
        "upload_time_iso_8601": "2022-02-14T12:56:22.424524Z",
        "url": "https://files.pythonhosted.org/packages/34/2f/2356fb6845b28331a3266414023e4487abe4eb2a7e3e49be047dc94c0635/lightweight_mmm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52c12a11ef4d871427a9fe62dca36671001243a1dd36e7d591a113e3ec96e527",
          "md5": "7fddd912d42fe2f4743c033c1a6ef144",
          "sha256": "4342a376c63a8c0d1f2f096838e728930f5bcb8daee9e5b852d9d4396e7ad547"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fddd912d42fe2f4743c033c1a6ef144",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41045,
        "upload_time": "2022-02-18T19:35:07",
        "upload_time_iso_8601": "2022-02-18T19:35:07.843512Z",
        "url": "https://files.pythonhosted.org/packages/52/c1/2a11ef4d871427a9fe62dca36671001243a1dd36e7d591a113e3ec96e527/lightweight_mmm-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b331aca0e1b6074c2b4c2d559c3b149fbc3a611f72bf09501442e65d888d45b2",
          "md5": "6291652ab7635486458b5d7157ea90be",
          "sha256": "9f92a5d8c8e9ae69442f3af0ff51e8ef993b2b8b4a9ac710db4e6d86425bc4ec"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6291652ab7635486458b5d7157ea90be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32364,
        "upload_time": "2022-02-18T19:35:09",
        "upload_time_iso_8601": "2022-02-18T19:35:09.246782Z",
        "url": "https://files.pythonhosted.org/packages/b3/31/aca0e1b6074c2b4c2d559c3b149fbc3a611f72bf09501442e65d888d45b2/lightweight_mmm-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98a15924f6906bba0176695acaa623bae911b960152f167b1ec1cc921c7b11af",
          "md5": "70c3277529bfaae3389f7f60da31ecb2",
          "sha256": "d125407d464ca49653e27b6bb4282421d3344c258c079cd67e0b4a98e2d73f32"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70c3277529bfaae3389f7f60da31ecb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 48773,
        "upload_time": "2022-05-03T13:14:31",
        "upload_time_iso_8601": "2022-05-03T13:14:31.418642Z",
        "url": "https://files.pythonhosted.org/packages/98/a1/5924f6906bba0176695acaa623bae911b960152f167b1ec1cc921c7b11af/lightweight_mmm-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "225a8b3606ec717f1de7a64aad3f50303cec53eec0c57238b2e7d8128680bb41",
          "md5": "676c4cea81dac8fc07b9c4df434cbb08",
          "sha256": "197a3351fb8c04e56824aa0a510e50269c03890cdc0f897293f07eb90bd4637b"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "676c4cea81dac8fc07b9c4df434cbb08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41458,
        "upload_time": "2022-05-03T13:14:32",
        "upload_time_iso_8601": "2022-05-03T13:14:32.560104Z",
        "url": "https://files.pythonhosted.org/packages/22/5a/8b3606ec717f1de7a64aad3f50303cec53eec0c57238b2e7d8128680bb41/lightweight_mmm-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e57ae928e2ff0d6d1b437cecc5faff681a6d63db24fd9b7ebe3c5126482dc949",
          "md5": "d0143c02804c823bfc0c0a40c0d86a49",
          "sha256": "b843775e4f69e405e09754a9ca039fff4a4c69a26ce9964da6aad56250a66b5c"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0143c02804c823bfc0c0a40c0d86a49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 53887,
        "upload_time": "2022-06-07T11:16:38",
        "upload_time_iso_8601": "2022-06-07T11:16:38.681014Z",
        "url": "https://files.pythonhosted.org/packages/e5/7a/e928e2ff0d6d1b437cecc5faff681a6d63db24fd9b7ebe3c5126482dc949/lightweight_mmm-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a230bad2615de960fe88fcd56f50c83b264fa176708f27b448766fa19b3ee8ef",
          "md5": "8a6ecb55f789dfd3a10440c4aad2eac2",
          "sha256": "5df4545c377692abe68e17936cc94f3a442684576a8aea1b59e8baa1d5540dd5"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8a6ecb55f789dfd3a10440c4aad2eac2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47583,
        "upload_time": "2022-06-07T11:16:40",
        "upload_time_iso_8601": "2022-06-07T11:16:40.102193Z",
        "url": "https://files.pythonhosted.org/packages/a2/30/bad2615de960fe88fcd56f50c83b264fa176708f27b448766fa19b3ee8ef/lightweight_mmm-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55f2f0517fcd77977f6f70510734bb3f225affd0d26b7ec4c2424d5e2908d8ee",
          "md5": "36fff49f2c42d6a814ea70258c317309",
          "sha256": "df6374d438e4dfa1b5ffe4fd44b24f20e0593ce63aea4749e50588008bbec9ae"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36fff49f2c42d6a814ea70258c317309",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60430,
        "upload_time": "2022-06-30T09:37:39",
        "upload_time_iso_8601": "2022-06-30T09:37:39.413693Z",
        "url": "https://files.pythonhosted.org/packages/55/f2/f0517fcd77977f6f70510734bb3f225affd0d26b7ec4c2424d5e2908d8ee/lightweight_mmm-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ee177501830e7a5852efffc3c28b206c4f04eb7ba58f520414c7f1b74e2ea6e",
          "md5": "9204d5fb5e4d6212ec1083e5fed84c75",
          "sha256": "ad12570d8756b6fa6fe3622aabae86c43135c283bfacdba44f28a1a60cc9b014"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9204d5fb5e4d6212ec1083e5fed84c75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54826,
        "upload_time": "2022-06-30T09:37:41",
        "upload_time_iso_8601": "2022-06-30T09:37:41.083663Z",
        "url": "https://files.pythonhosted.org/packages/6e/e1/77501830e7a5852efffc3c28b206c4f04eb7ba58f520414c7f1b74e2ea6e/lightweight_mmm-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1972975493399b1b9a69733fcd31d2f52ea732a6683a50cfc246691ac0dafb62",
          "md5": "b553db92b83bd6419e240770423e232b",
          "sha256": "61f121416ea3d34bb042156de2cc9f5a662149bed366e76afad01b2344130450"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b553db92b83bd6419e240770423e232b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 63905,
        "upload_time": "2022-08-09T08:34:24",
        "upload_time_iso_8601": "2022-08-09T08:34:24.357602Z",
        "url": "https://files.pythonhosted.org/packages/19/72/975493399b1b9a69733fcd31d2f52ea732a6683a50cfc246691ac0dafb62/lightweight_mmm-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64be28e3f526beda016e19aa500fde9431f6596f2bc7fa05ee2a0d27f1acdd0c",
          "md5": "d218b400954c26fb1e36aecb43867269",
          "sha256": "0b348b8f98510bfe6053de9abdb85b581dadc3baab00b60dbe730a5c0dd2dbb3"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d218b400954c26fb1e36aecb43867269",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 58103,
        "upload_time": "2022-08-09T08:34:25",
        "upload_time_iso_8601": "2022-08-09T08:34:25.923135Z",
        "url": "https://files.pythonhosted.org/packages/64/be/28e3f526beda016e19aa500fde9431f6596f2bc7fa05ee2a0d27f1acdd0c/lightweight_mmm-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8334840909a60bf3fadc54fe54e58a9165a8bf1ed76f1e5b2ad6f06f56bde2f2",
          "md5": "0f859bc5a8e746c890e980bdaf54b6bf",
          "sha256": "3ad2cb2bf08dd956000dcd8a6fc14ce801d615f784517d9660720518bbe6908b"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f859bc5a8e746c890e980bdaf54b6bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 71304,
        "upload_time": "2022-10-20T21:10:53",
        "upload_time_iso_8601": "2022-10-20T21:10:53.966514Z",
        "url": "https://files.pythonhosted.org/packages/83/34/840909a60bf3fadc54fe54e58a9165a8bf1ed76f1e5b2ad6f06f56bde2f2/lightweight_mmm-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "983f0416905b9208e32f74b0f0887e7f081ce87b7c8bd67fde6901653cde9d3d",
          "md5": "20cfda8a36ad6a17941725b09b4388d4",
          "sha256": "224f6a301978d5f62c217fc358978c69a73f5cef1bc8b13254d16305f8ae35ab"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "20cfda8a36ad6a17941725b09b4388d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65553,
        "upload_time": "2022-10-20T21:10:55",
        "upload_time_iso_8601": "2022-10-20T21:10:55.228038Z",
        "url": "https://files.pythonhosted.org/packages/98/3f/0416905b9208e32f74b0f0887e7f081ce87b7c8bd67fde6901653cde9d3d/lightweight_mmm-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa43fc731b50033f8a46baf91d77b30192a86ef55e9b703405f4f15de6ed6d52",
          "md5": "dfda90ea795802ccb943f788a5b96abd",
          "sha256": "32b89aa150477ab792f6e7cb23b4763f41d5e084f8581c0b1a13deb0786657c2"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfda90ea795802ccb943f788a5b96abd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 103215,
        "upload_time": "2023-01-05T20:16:16",
        "upload_time_iso_8601": "2023-01-05T20:16:16.459070Z",
        "url": "https://files.pythonhosted.org/packages/aa/43/fc731b50033f8a46baf91d77b30192a86ef55e9b703405f4f15de6ed6d52/lightweight_mmm-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c2a695127ed894b85cd75e6862e63da6b62ecdc22a6bc799d876b9798892281",
          "md5": "60faec487cf16bd31c99b8b779a0e7f7",
          "sha256": "a3e51fe693dc491f008da7f81788dd480d2daa68efc79a3746345bc360659c9e"
        },
        "downloads": -1,
        "filename": "lightweight_mmm-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "60faec487cf16bd31c99b8b779a0e7f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83530,
        "upload_time": "2023-01-05T20:16:18",
        "upload_time_iso_8601": "2023-01-05T20:16:18.077067Z",
        "url": "https://files.pythonhosted.org/packages/1c/2a/695127ed894b85cd75e6862e63da6b62ecdc22a6bc799d876b9798892281/lightweight_mmm-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa43fc731b50033f8a46baf91d77b30192a86ef55e9b703405f4f15de6ed6d52",
        "md5": "dfda90ea795802ccb943f788a5b96abd",
        "sha256": "32b89aa150477ab792f6e7cb23b4763f41d5e084f8581c0b1a13deb0786657c2"
      },
      "downloads": -1,
      "filename": "lightweight_mmm-0.1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dfda90ea795802ccb943f788a5b96abd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 103215,
      "upload_time": "2023-01-05T20:16:16",
      "upload_time_iso_8601": "2023-01-05T20:16:16.459070Z",
      "url": "https://files.pythonhosted.org/packages/aa/43/fc731b50033f8a46baf91d77b30192a86ef55e9b703405f4f15de6ed6d52/lightweight_mmm-0.1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c2a695127ed894b85cd75e6862e63da6b62ecdc22a6bc799d876b9798892281",
        "md5": "60faec487cf16bd31c99b8b779a0e7f7",
        "sha256": "a3e51fe693dc491f008da7f81788dd480d2daa68efc79a3746345bc360659c9e"
      },
      "downloads": -1,
      "filename": "lightweight_mmm-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "60faec487cf16bd31c99b8b779a0e7f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 83530,
      "upload_time": "2023-01-05T20:16:18",
      "upload_time_iso_8601": "2023-01-05T20:16:18.077067Z",
      "url": "https://files.pythonhosted.org/packages/1c/2a/695127ed894b85cd75e6862e63da6b62ecdc22a6bc799d876b9798892281/lightweight_mmm-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}