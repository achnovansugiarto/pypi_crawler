{
  "info": {
    "author": "Caleb Hattingh",
    "author_email": "caleb.hattingh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": ".. image:: https://github.com/cjrh/coroexecutor/workflows/Python%20application/badge.svg\n    :target: https://github.com/cjrh/coroexecutor/actions\n\n.. image:: https://img.shields.io/badge/stdlib--only-yes-green.svg\n    :target: https://img.shields.io/badge/stdlib--only-yes-green.svg\n\n.. image:: https://coveralls.io/repos/github/cjrh/coroexecutor/badge.svg?branch=master\n    :target: https://coveralls.io/github/cjrh/coroexecutor?branch=master\n\n.. image:: https://img.shields.io/pypi/pyversions/coroexecutor.svg\n    :target: https://pypi.python.org/pypi/coroexecutor\n\n.. image:: https://img.shields.io/github/tag/cjrh/coroexecutor.svg\n    :target: https://img.shields.io/github/tag/cjrh/coroexecutor.svg\n\n.. image:: https://img.shields.io/badge/install-pip%20install%20coroexecutor-ff69b4.svg\n    :target: https://img.shields.io/badge/install-pip%20install%20coroexecutor-ff69b4.svg\n\n.. image:: https://img.shields.io/pypi/v/coroexecutor.svg\n    :target: https://img.shields.io/pypi/v/coroexecutor.svg\n\n.. image:: https://img.shields.io/badge/calver-YYYY.MM.MINOR-22bfda.svg\n    :target: http://calver.org/\n\n.. warning::\n    This is alpha. Please don't rely on this in a production\n    setting yet. I will remove this warning when it is ready.\n\ncoroexecutor\n============\n\n.. contents::\n    :local:\n    :depth: 2\n    :backlinks: top\n\nProvides an ``Executor`` interface for running a group of coroutines\ntogether in asyncio-native applications.\n\nDemo\n----\n\n.. code-block:: python3\n\n    import asyncio\n    from coroexecutor import CoroutineExecutor\n\n    async def f(dt, msg=''):\n        await asyncio.sleep(dt)\n        print(f'completion message: {msg}')\n\n    async def main():\n        async with CoroutineExecutor(max_workers=10) as exe:\n            t1 = await exe.submit(f, 0.01, msg=\"task 1\")\n            t2 = await exe.submit(f, 0.05, msg=\"task 2\")\n\n        assert t1.done()\n        assert t2.done()\n\n    asyncio.run(main())\n\n``max_workers`` controls how many submitted jobs can run concurrently.\nThese internal workers are lightweight of course, they're just\n``asyncio.Task`` instances. Millions of jobs can be pushed through\nthe executor. As is normal for asyncio, concurrency requires\nthat these jobs be IO-bound, and the upper bound for setting\n``max_workers`` is mainly going to depend on your CPU and RAM resources.\n\nDiscussion\n----------\n\nThe ``CoroutineExecutor`` context manager works very much like\nthe ``Executor`` implementations in the ``concurrent.futures``\npackage in the standard library. This is the intention of\nthis package. The basic components of the interface are:\n\n- The executor applies a context over the creation of jobs\n- Jobs are submitted to the executor\n- All jobs must be complete when the context manager for the executor exits.\n\nAfter creating a context manager using ``CoroutineExecutor``, the two\nmain features are the ``submit()`` method, and the ``map()`` method.\n\nIt is impossible to *exactly* match the ``Executor`` interface in the\n``concurrent.futures`` package because some functions in this interface\nneed to be ``async`` functions. But we can get close; certainly close\nenough that a user with experience using the ``ThreadPoolExecutor`` or\n``ProcessPoolExecutor`` should be able to figure things out pretty quickly.\n\nThere is a great deal of complexity that can arise. The \"happy path\" is\nsimple. You just submit jobs to the executor, and they will get\nexecuted accordingly. But there are many corner cases:\n\n- asyncio can concurrently execute thousands, or even tens of thousands\n  of (IO-bound) jobs concurrently. But how to handle more, say, millions\n  of jobs?\n- If one job raises an exception, how to terminate all the other jobs?\n  In the CTRL-C case, this is desired, but what about other cases? Do\n  you always want a single task failure (with an unexpected exception)\n  to cancel the entire batch? And is there a difference between\n  a job raising ``CancelledError`` versus raising some other kind of\n  exception?\n- The ``CoroutineExectutor`` provides a context manager API: if\n  some code within the body of the context manager (that is not a task)\n  raises an exception, should all the submitted tasks also\n  be cancelled?\n\nEach of these will be discussed in more detail in the sections\nthat follow.\n\nThrottling, using ``max_workers``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEven though it is possible to concurrently execute a much larger number\nof (IO bound) tasks with asyncio compared to threads or processes, there\nwill still be an upper limit the machine can handle based on either:\n\n- memory limitations: many task object instances\n- CPU limitations: too many concurrent task objects and events for the event loop to process.\n\nThus, we also have a ``max_workers`` setting to limit concurrency. It might\nnot be obvious how that limitation is applied, say, in the scenario of\nmillions of jobs.\n\nThe ``CoroutineExecutor.submit()`` is an ``async def`` method. This means\nthat you will have to await it, like so:\n\n.. code-block:: python3\n\n    import asyncio\n    from coroexecutor import CoroutineExecutor\n\n    async def f():\n        print('hi!')\n\n    async def main():\n        async with CoroutineExecutor(max_workers=10) as exe:\n            t1 = await exe.submit(f)\n\n    asyncio.run(main())\n\nIf the total number of jobs already submitted is less than ``max_workers``,\nthe call to ``await exe.submit()`` will return immediately: the job will\nbegin executing, and ``submit()`` returns an ``asyncio.Task`` instance\nfor that job. However, if the total number of concurrently-running jobs\nis greater than the ``max_workers`` setting, this call will wait until\nthe number of currently-running jobs drops below the threshold before\nadding the new job. This means that ``submit()`` applies *back-pressure*.\n\nSay you have a file containing ten million URLs that you want to fetch\nusing aiohttp. That program might look something like this:\n\n.. code-block:: python3\n\n    import asyncio, aiohttp\n    from coroexecutor import CoroutineExecutor\n\n    async def fetch(url: str):\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url) as response:\n                    print('body:', response.text())  # or whatever\n        except Exception:\n            print('Problem with url:', url)\n\n    async def main():\n        async with CoroutineExecutor(max_workers=10000) as exe:\n            for line in open('urls.txt'):\n                await exe.submit(fetch, line)\n\n    asyncio.run(main())\n\nAssuming it takes 3 seconds to fetch a single url, this program\nshould take around 1e7 / 1e4 => 1000 seconds to fetch all of them.\nAbout 17 minutes, since even though there are 10 million urls, we're\ndoing 10k concurrently. (In practice, some of the endpoints will be\nvery slow to respond, if they respond at all. So for real code you're\ngoing to want to either use aiohttp facilities for timeouts on the\n``.get()``, or wrap the work inside an ``asyncio.wait_for()`` wrapper.)\n\nNote that we're handling errors inside our job function ``fetch()``.\nBy default, if jobs raise exceptions these will cancel all pending jobs\ninside the executor, and shut it down. For long batch jobs, that may\nnot be what we want, and this is discussed next.\n\nDealing with errors and cancellation\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGenerally, there are these kinds of error situations:\n\n- A job is cancelled, and you want the executor to be shut down\n- A job is cancelled, and the executor must NOT be shut down\n- A job raises an exception (not ``CancelledError``), and\n  you want the executor to shut down\n- A job raises an exception (not ``CancelledError``), and the\n  executor must NOT be shut down\n\nConsider the previous example using aiohttp to fetch URLs: inside\nthe ``fetch()`` function, we're handling ``Exception``, which\nincludes ``asyncio.CancelledError``. In general, this is the\ncorrect thing to do because you can control what happens in\neach of the scenarios presented above. But what happens\nif your code is not supplying the jobs and you don't control\nhow error handling inside them is being managed? By default,\nif any job raises an exception (cancellation or otherwise)\nthat will initiate \"shutdown\" of the executor instance, and\nall other pending jobs on that executor will be cancelled.\n\nIf you have a situation where this is not desired, you can\nask ``CoroutineExecutor`` to ignore all task errors for you:\n\n.. code-block:: python3\n\n    import asyncio, aiohttp\n    from coroexecutor import CoroutineExecutor\n\n    async def naive_fetch(url: str):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url) as response:\n                print('body:', response.text())  # or whatever\n\n    async def main():\n        async with CoroutineExecutor(\n                max_workers=10000,\n                suppress_task_errors=True,\n        ) as exe:\n            for line in open('urls.txt'):\n                await exe.submit(naive_fetch, line)\n\n    asyncio.run(main())\n\nIn this modified example, the job function ``naive_fetch`` has\nno error handling. No matter, the ``suppress_task_errors``\nparameter will allow the executor to absorb them all. Be careful\nwith this. I recommend against doing this wherever possible, and\nhandle exceptions and ``CancelledError`` explicitly within\nyour job functions instead.\n\nExamples\n--------\n\nUsing ``map``\n^^^^^^^^^^^^^\n\nThe ``concurrent.futures.Executor`` interface also defines ``map()`` which\nreturns an iterator. However, it makes for sense for us to use an\n*asynchronous generator* for this purpose. Here's an example from the tests:\n\n.. code-block:: python3\n\n    times = [0.01, 0.02, 0.03]\n\n    async def f(dt):\n        await asyncio.sleep(dt)\n        return dt\n\n    async def main():\n        async with CoroutineExecutor() as exe:\n            results = exe.map(f, times)\n            assert [v async for v in results] == times\n\n    asyncio.run(main())\n\nYou can see how ``async for`` is used to asynchronously loop over the\nresult from calling ``map``.\n\nIf one of the function calls raises an error, all unfinished calls will\nbe cancelled, but you may still have received partial results. Here's\nanother example from the tests:\n\n.. code-block:: python3\n\n    times = [0.01, 0.02, 0.1, 0.2]\n    results = []\n\n    async def f(dt):\n        await asyncio.sleep(dt)\n        if dt == 0.1:\n            raise Exception('oh noes')\n        return dt\n\n    async def main():\n        async with CoroutineExecutor() as exe:\n            async for r in exe.map(f, times):\n                results.append(r)\n\n    with pytest.raises(Exception):\n        asyncio.run(main())\n\n    assert results == [0.01, 0.02]\n\nThe first two values of the batch finish quickly, and I saved these to the\n``results`` list in the outer scope. Then, one of the jobs fails with\nan exception. This results in the other pending jobs being cancelled (i.e.,\nthe \"0.2\" case in this example), the ``CoroutineExecutor`` instance\nre-raising the exception, and in this example, the exception raises all\nthe way out to the invocation of the ``run()`` function itself. However,\nnote that we still have the results from jobs that succeeded.\n\nNesting\n^^^^^^^\n\nYou don't always have to submit tasks to the executor in a single function.\nThe executor instance can be passed around and work can be added to it\nfrom several different places.\n\n.. code-block:: python3\n\n    from random import random\n\n    async def f(dt):\n        await asyncio.sleep(dt)\n\n    async def producer1(executor: CoroutineExecutor):\n        executor.submit(f, random())\n        executor.submit(f, random())\n        executor.submit(f, random())\n\n    async def producer2(executor: CoroutineExecutor):\n        executor.submit(f, random())\n        executor.submit(f, random())\n        executor.submit(f, random())\n\n    async def main():\n        async with CoroutineExecutor(timeout=0.5) as executor:\n            executor.submit(f, random())\n            executor.submit(f, random())\n            executor.submit(f, random())\n\n            executor.submit(producer1, executor)\n            executor.submit(producer2, executor)\n\n    run(main())\n\nYou can not only submit jobs within the executor context manager, but also\npass the instance around and collect jobs from other functions too. And the\ntimeout set when creating the ``CoroutineExecutor`` instance will still\nbe applied.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cjrh/coroexecutor",
    "keywords": "asyncio executor",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "coroexecutor",
    "package_url": "https://pypi.org/project/coroexecutor/",
    "platform": null,
    "project_url": "https://pypi.org/project/coroexecutor/",
    "project_urls": {
      "Homepage": "https://github.com/cjrh/coroexecutor"
    },
    "release_url": "https://pypi.org/project/coroexecutor/2022.8.1/",
    "requires_dist": [
      "check-manifest ; extra == 'dev'",
      "pygments ; extra == 'dev'",
      "wheel ; extra == 'dev'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "flake8 ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "A coroutine-based Executor implementation",
    "version": "2022.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14821437,
  "releases": {
    "2019.11.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "275283b23e56fbe34485056f5a2a0813c832cf161740ef297d9eff8a9e371d8f",
          "md5": "0f254f6f11022aced2129323c571cab8",
          "sha256": "f9eda2bf5a3589282d4f508585b4c879e247c637cb865ae086dcb0e75c0a06cc"
        },
        "downloads": -1,
        "filename": "coroexecutor-2019.11.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f254f6f11022aced2129323c571cab8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8715,
        "upload_time": "2019-12-01T03:04:57",
        "upload_time_iso_8601": "2019-12-01T03:04:57.001705Z",
        "url": "https://files.pythonhosted.org/packages/27/52/83b23e56fbe34485056f5a2a0813c832cf161740ef297d9eff8a9e371d8f/coroexecutor-2019.11.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db1263c31aba4896918ab9d3d57d252eb06cec198b697c2c137c94222d052665",
          "md5": "afbf866e47bf134b3197d99ce78668d2",
          "sha256": "edf947d3a44bc81f11d2eb71fdea22e9630695a9ae7c7a6524f65956b8214837"
        },
        "downloads": -1,
        "filename": "coroexecutor-2019.11.1.tar.gz",
        "has_sig": false,
        "md5_digest": "afbf866e47bf134b3197d99ce78668d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8773,
        "upload_time": "2019-12-01T03:04:59",
        "upload_time_iso_8601": "2019-12-01T03:04:59.754129Z",
        "url": "https://files.pythonhosted.org/packages/db/12/63c31aba4896918ab9d3d57d252eb06cec198b697c2c137c94222d052665/coroexecutor-2019.11.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76e202580cf7c07a847472856b6fe17b5df08eead3d2b08e9299a84d5ee4768c",
          "md5": "5880d7705e64c72bda7562fb661f463a",
          "sha256": "344e45e8f743c74ebdfd36932ffbfbd125af841ebcbd61f7e08b391e92712ca6"
        },
        "downloads": -1,
        "filename": "coroexecutor-2021.10.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5880d7705e64c72bda7562fb661f463a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12589,
        "upload_time": "2021-10-24T06:12:49",
        "upload_time_iso_8601": "2021-10-24T06:12:49.962092Z",
        "url": "https://files.pythonhosted.org/packages/76/e2/02580cf7c07a847472856b6fe17b5df08eead3d2b08e9299a84d5ee4768c/coroexecutor-2021.10.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14ebf3f8e26287305782d976dc82d99c5e14e61ade65d1816e35249db3183b2e",
          "md5": "847e4773239a1b14c98dcbcb3ff5f263",
          "sha256": "24e96bce8c61048dda2d37ef4d7c65a876161f181f9b7aabe83d64120080f480"
        },
        "downloads": -1,
        "filename": "coroexecutor-2021.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "847e4773239a1b14c98dcbcb3ff5f263",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36630,
        "upload_time": "2021-10-24T06:12:53",
        "upload_time_iso_8601": "2021-10-24T06:12:53.785778Z",
        "url": "https://files.pythonhosted.org/packages/14/eb/f3f8e26287305782d976dc82d99c5e14e61ade65d1816e35249db3183b2e/coroexecutor-2021.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "358c8a12b9e97e960364aa82a7c3e64c4faac8a190c9ccd7577ec373acfe2815",
          "md5": "01f03695c5e2772190ad87a3b0ca04a9",
          "sha256": "ac2bcc927a04b766a6f77b3408ccaf461827504f3cc01b0e4518026352552c74"
        },
        "downloads": -1,
        "filename": "coroexecutor-2021.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01f03695c5e2772190ad87a3b0ca04a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12558,
        "upload_time": "2021-05-22T04:15:41",
        "upload_time_iso_8601": "2021-05-22T04:15:41.735830Z",
        "url": "https://files.pythonhosted.org/packages/35/8c/8a12b9e97e960364aa82a7c3e64c4faac8a190c9ccd7577ec373acfe2815/coroexecutor-2021.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "858725b1c173d2281262b3cf2ad0bd5217b669b0b042407333f98adc2a8556af",
          "md5": "7dd848505c5e9a8eae9b4f6cbd64c0a3",
          "sha256": "c91c32ba7fc5834f1bc8502c86290421e877ab5bc916c28e519e0e49ec5d93a7"
        },
        "downloads": -1,
        "filename": "coroexecutor-2021.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7dd848505c5e9a8eae9b4f6cbd64c0a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29830,
        "upload_time": "2021-05-22T04:15:44",
        "upload_time_iso_8601": "2021-05-22T04:15:44.189144Z",
        "url": "https://files.pythonhosted.org/packages/85/87/25b1c173d2281262b3cf2ad0bd5217b669b0b042407333f98adc2a8556af/coroexecutor-2021.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a55c9f8291483edfa418e23e747e3ad235435efe391e71202fd13ca5c4cf9014",
          "md5": "350fa7f0b0e901761b8c5b57786301db",
          "sha256": "0f3508fe7bc210a76ff2f71b3badd15a57bfa2c6ae66e1481dfd6e5b7022798c"
        },
        "downloads": -1,
        "filename": "coroexecutor-2022.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "350fa7f0b0e901761b8c5b57786301db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12944,
        "upload_time": "2022-08-20T12:35:53",
        "upload_time_iso_8601": "2022-08-20T12:35:53.456895Z",
        "url": "https://files.pythonhosted.org/packages/a5/5c/9f8291483edfa418e23e747e3ad235435efe391e71202fd13ca5c4cf9014/coroexecutor-2022.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1ced39bda3c90945e3ed8b9389761480ff51b0ffd850a9296be74016c814cdc",
          "md5": "e94e26b776579e4f5ee4c9ba9efc1b56",
          "sha256": "2916965acc441223fd96531e93d60f66f1f1cfc3767c0a79654eb130cdfe6d87"
        },
        "downloads": -1,
        "filename": "coroexecutor-2022.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e94e26b776579e4f5ee4c9ba9efc1b56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37532,
        "upload_time": "2022-08-20T12:35:59",
        "upload_time_iso_8601": "2022-08-20T12:35:59.880778Z",
        "url": "https://files.pythonhosted.org/packages/e1/ce/d39bda3c90945e3ed8b9389761480ff51b0ffd850a9296be74016c814cdc/coroexecutor-2022.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a55c9f8291483edfa418e23e747e3ad235435efe391e71202fd13ca5c4cf9014",
        "md5": "350fa7f0b0e901761b8c5b57786301db",
        "sha256": "0f3508fe7bc210a76ff2f71b3badd15a57bfa2c6ae66e1481dfd6e5b7022798c"
      },
      "downloads": -1,
      "filename": "coroexecutor-2022.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "350fa7f0b0e901761b8c5b57786301db",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12944,
      "upload_time": "2022-08-20T12:35:53",
      "upload_time_iso_8601": "2022-08-20T12:35:53.456895Z",
      "url": "https://files.pythonhosted.org/packages/a5/5c/9f8291483edfa418e23e747e3ad235435efe391e71202fd13ca5c4cf9014/coroexecutor-2022.8.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1ced39bda3c90945e3ed8b9389761480ff51b0ffd850a9296be74016c814cdc",
        "md5": "e94e26b776579e4f5ee4c9ba9efc1b56",
        "sha256": "2916965acc441223fd96531e93d60f66f1f1cfc3767c0a79654eb130cdfe6d87"
      },
      "downloads": -1,
      "filename": "coroexecutor-2022.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e94e26b776579e4f5ee4c9ba9efc1b56",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37532,
      "upload_time": "2022-08-20T12:35:59",
      "upload_time_iso_8601": "2022-08-20T12:35:59.880778Z",
      "url": "https://files.pythonhosted.org/packages/e1/ce/d39bda3c90945e3ed8b9389761480ff51b0ffd850a9296be74016c814cdc/coroexecutor-2022.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}