{
  "info": {
    "author": "Luke Pratley",
    "author_email": "luke.pratley@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Faraday-Dreams\n\n[![Build Status](https://app.travis-ci.com/Luke-Pratley/Faraday-Dreams.svg?branch=master)](https://app.travis-ci.com/Luke-Pratley/Faraday-Dreams) [![codecov](https://codecov.io/gh/Luke-Pratley/Faraday-Dreams/branch/master/graph/badge.svg?token=V1LGYZVUF0)](https://codecov.io/gh/Luke-Pratley/Faraday-Dreams)\n\n\nNew developments that allow correction for channel averaging when reconstructing broad band polarimetric signals.\n\n\nThis code is built using [Optimus Primal](https://github.com/Luke-Pratley/Optimus-Primal) to apply convex optimization algorithms in deniosing.\n\n## Requirements\n- Python 3.8\n- [Optimus Primal](https://github.com/Luke-Pratley/Optimus-Primal)\n- [PyNUFFT](https://github.com/jyhmiinlin/pynufft) when using the NUFFT algorithm (Optional)\n\n## Install\nYou can install from the master branch\n```\npip install git+https://github.com/Luke-Pratley/Faraday-Dreams.git@master#egg=faradaydreams\n```\nor from a frozen version at [pypi](https://pypi.org/project/faradaydreams/)\n```\npip install faradaydreams\n```\n\n## Related Publications\n- Removing non-physical structure in fitted Faraday rotated signals: non-parametric QU-fitting, PASA (Accepted), L. Pratley and M. Johnston-Hollitt, and B. M. Gaensler, 2021\n- [Wide-band Rotation Measure Synthesis](https://ui.adsabs.harvard.edu/abs/2020ApJ...894...38P/abstract), ApJ, L. Pratley, M. Johnston-Hollitt, 2020\n\n## Basic example for 1d spectrum\nWe can import a simple solver using the following command\n```\nimport faradaydreams.recover_faraday_spectra as recover_faraday_spectra\n```\nWe can define a dictionary with variables such as the tolerance for convergence `tol`, the maximum number of iterations `iter`, and if we wish to enforce that $\\lambda^2 \\leq 0$ has zero flux `project_positive_lambda2`. We expect the Faraday depth signal to be complex valued, so the real and positivity constraints are `False`.\n```\noptions = {\n    'tol': 1e-5,\n    'iter': 50000,\n    'update_iter': 1000,\n    'record_iters': False,\n    'real': False,\n    'positivity': False,\n    'project_positive_lambda2': False\n}\n```\n\nBelow we pass data to the solver which returns a dictionary with processed result. We pass in the Stokes Q and U spectra and their associated errors in Jy.\nWe provide the channel frequencies (in Hz) and with `channel_width=None` we do not correct for channel averaging, if we pass the array of channel widths in Hz it will try to do a correction.\n\nThe size of a Faraday width pixel is chosen to be `dphi=15` rad/m^2 and we choose the spectrum to span `Nphi=320` pixels across centred at 0 rad/m^2. \nWe choose not to scale the uncertainty on the measurements that we wish to fit the solution with `sigma_factor=1`. \n`beta=1e-2` is the step size for the minimization, and `1e-0` to `1e-3` normally works well.\n```\nresults = recover_faraday_spectra.recover_1d_faraday_spectrum(\n    Q=data['Q'],\n    U=data['U'],\n    error_Q=data['e_Q'],\n    error_U=data['e_U'],\n    freq=freq,\n    dphi=15,\n    Nphi=320,\n    sigma_factor=1,\n    beta=1e-2,\n    options=options,\n    channel_widths=None)     \n```\nThe returned dictionary has the form\n```\n    return {\n        \"solution\": solution,\n        \"phi\": phi,\n        \"y_solution\": y_model,\n        \"solution_lambda2\": model_lambda2,\n        \"measurements\": y,\n        \"measurements_residuals\": y - m_op.dir_op(solution) / weights,\n        \"measurements_lambda2\": lambda2,\n        \"measurements_weights\": weights,\n        \"measurements_sigma\": sigma\n    }\n```\nwhere we can plot the solution `results['solution']` against `results['phi']`. `results['y_solution']` is the same signal in lambda^2 coordinates `results['solution_lambda2']`. The original measurements `results['measurements']` and the residuals of the solution `results['measurements_residuals']` are also returned. \n\nLook in the examples directory for a fully working example in the form of a python notebook.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Luke-Pratley/Faraday-Dreams",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "faradaydreams",
    "package_url": "https://pypi.org/project/faradaydreams/",
    "platform": "",
    "project_url": "https://pypi.org/project/faradaydreams/",
    "project_urls": {
      "Homepage": "https://github.com/Luke-Pratley/Faraday-Dreams"
    },
    "release_url": "https://pypi.org/project/faradaydreams/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Faraday Rotation Recovery using Convex Optimization",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12045485,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34221b9d1f494ba3b8a9b18c580e4a73e22b0ab42c77403fcd4f51cd31a24bf6",
          "md5": "3c058a0496d10ae98ae4bfac0c552013",
          "sha256": "323b2e7d91e2fddfa9b436a55c8b1f522c2ebd4aef47dce7cf9bb4ea360137b0"
        },
        "downloads": -1,
        "filename": "faradaydreams-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3c058a0496d10ae98ae4bfac0c552013",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7561,
        "upload_time": "2021-10-06T04:01:51",
        "upload_time_iso_8601": "2021-10-06T04:01:51.127052Z",
        "url": "https://files.pythonhosted.org/packages/34/22/1b9d1f494ba3b8a9b18c580e4a73e22b0ab42c77403fcd4f51cd31a24bf6/faradaydreams-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0138e35d191f6f1fe9ea8580b1ee8babdfbb2c0690cc12171b687a4a83a15149",
          "md5": "6f44c7f5573eda194b31cb58b1caaefd",
          "sha256": "e822d25be360975d286e1e5bcd0efa01fc015fbcb055c3ab9b4c6ef77d7f1a45"
        },
        "downloads": -1,
        "filename": "faradaydreams-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6f44c7f5573eda194b31cb58b1caaefd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9385,
        "upload_time": "2021-11-17T07:11:31",
        "upload_time_iso_8601": "2021-11-17T07:11:31.284221Z",
        "url": "https://files.pythonhosted.org/packages/01/38/e35d191f6f1fe9ea8580b1ee8babdfbb2c0690cc12171b687a4a83a15149/faradaydreams-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0138e35d191f6f1fe9ea8580b1ee8babdfbb2c0690cc12171b687a4a83a15149",
        "md5": "6f44c7f5573eda194b31cb58b1caaefd",
        "sha256": "e822d25be360975d286e1e5bcd0efa01fc015fbcb055c3ab9b4c6ef77d7f1a45"
      },
      "downloads": -1,
      "filename": "faradaydreams-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "6f44c7f5573eda194b31cb58b1caaefd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 9385,
      "upload_time": "2021-11-17T07:11:31",
      "upload_time_iso_8601": "2021-11-17T07:11:31.284221Z",
      "url": "https://files.pythonhosted.org/packages/01/38/e35d191f6f1fe9ea8580b1ee8babdfbb2c0690cc12171b687a4a83a15149/faradaydreams-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}