{
  "info": {
    "author": "Yifan Dai & Qiang Sun",
    "author_email": "yifandai@yeah.net, qsun.ustc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# tfHuber\n\nPython implementation of **T**uning-**F**ree **Huber** Estimation and Regression\n\n## Description\n\nThis package implements the Huber mean estimator, Huber covariance matrix estimation and adaptive Huber regression estimators efficiently. For all these methods, the robustification parameter *&tau;* is calibrated via a tuning-free principle.\n\nSpecifically, for Huber regression, assume the observed data vectors (*Y*, *X*) follow a linear model *Y = &theta;<sub>0</sub> + X &theta; + &epsilon;*, where *Y* is an *n*-dimensional response vector, *X* is an *n* &times; *d* design matrix, and *&epsilon;* is an *n*-vector of noise variables whose distributions can be asymmetric and/or heavy-tailed. The package computes the standard Huber's *M*-estimator when *d < n* and the Huber-Lasso estimator when *d > n*. The vector of coefficients *&theta;* and the intercept term *&theta;<sub>0</sub>* are estimated successively via a two-step procedure. See [Wang et al., 2020](https://www.math.ucsd.edu/~wez243/tfHuber.pdf) for more details of the two-step tuning-free framework.\n\n## Requirement  \n```\nnumpy\nsetuptools\nwheel\n```\n\n## Functions\n\nThere are four functions in this package: \n\n* `mean(X, grad=True, tol=1e-5, max_iter=500)`: Huber mean estimation. Return a tuple of mean, $\\tau$ and the number of iteration.  \n*X*: A 1-d array.  \n*grad*: Using gradient descent or weighed least square to optimize the mean, default *True*  \n*tol*: Tolerance of the error, default *1e-5*.  \n*max_iter*: Maximum times of iteration, default *500*.\n* `cov(X, type=\"element\", pairwise=False, tol=1e-5, max_iter=500)`: Huber covariance matrix estimation. Return a 2d covariance matrix.  \n*X*: A 2-d array.  \n*type*: If set to `\"element\"`, apply adaptive huber M-estimation; or if set to `\"spectrum\"`, apply spectrum-wise truncated estimation. Default `\"element\" `  \n*pairwise*: Pairwise covariance or difference based covariance. Default *false*.   \n*tol*: Tolerance of the error, default *1e-5*.  \n*max_iter*: Maximum times of iteration, default *500*.\n* `one_step_reg(X, Y, grad=True, tol=1e-5, max_iter=500\ntwo_step_reg(X, Y, grad=True, tol=1e-5, constTau=1.345, max_iter=500)`   \nOne or two step adaptive Huber regression. Return a tuple of coefficients, $\\tau$ and the number of iteration.   \n*X, Y*: Arrays of data.  \n*grad*: Using gradient descent or weighed least square to optimize the mean, default *True*.  \n*tol*: Tolerance of the error, default *1e-5*.  \n*constTau*: Default 1.345. Used only in two-step method.  \n*max_iter*: Maximum times of iteration, default *500*.  \n* `cvlasso(X, Y, lSeq=0, nlambda=30, constTau=2.5, phi0=0.001, gamma=1.5, tol=0.001, nfolds=3)`: K-fold cross validated Huber-lasso regression. Return a tuple of coefficients, $tau$, the number of iteration and minimun of $\\lambda$.   \n*X, Y*: Arrays of data.  \n*lSeq*: A list of Lasso parameter $\\lambda$. If not set, automatically find a range of $\\lambda$ to be cross validated.  \n*nlambda*: The number of $\\lambda$ used for validation.  \n*constTau, phi0, gamma*: Some parameters.  \n*tol*: Tolerance of the error, default *0.001*.  \n*nfolds*: Number of folds to be cross validated.\n\n\n\n\n## Examples \n\n\nWe present an example of adaptive Huber methods. Here we generate data from a linear model *Y = X &theta; + &epsilon;*, where *&epsilon;* follows a normal distribution, and estimate the intercept and coefficients by tuning-free Huber regression.\n\n```python\nimport numpy\nimport tfhuber\nX = np.random.uniform(-1.5, 1.5, (10000, 10))\nY = intercept + np.dot(X, beta) + np.random.normal(0, 1, 10000)\n\nmu, tau, iteration = tf.mean(Y, grad=True, tol=1e-5, max_iter=500)\ncov = tf.cov(X, method=1, tol=1e-5, max_iter=500)\n\ntheta, tau, iteration = tf.one_step_reg(X, Y, grad=True, tol=1e-5, max_iter=500)\ntheta, tau, iteration = tf.two_step_reg(X, Y, grad=True, tol=1e-5, consTau=1.345, max_iter=500)\n\ntheta, tau, iteration, lam = tf.cvlasso(X, Y) \n```\nSimulation result can be viewed in this [colab notebook](https://colab.research.google.com/drive/1XyBMNHog_RqFo3dkoQENt7wT2yMVEIdQ?usp=sharing).  \n\n## License\nGPL (>= 3)\n\n## Author(s)\n\nYifan Dai <yifandai@yeah.net>, Qiang Sun <qsun.ustc@gmail.com>\n\nDescription and algorithms refer to [Xiaoou Pan's page](https://github.com/XiaoouPan/tfHuber).\n\n## References\n\nGuennebaud, G. and Jacob B. and others. (2010). Eigen v3. [Website](http://eigen.tuxfamily.org)\n\nKe, Y., Minsker, S., Ren, Z., Sun, Q. and Zhou, W.-X. (2019). User-friendly covariance estimation for heavy-tailed distributions. *Statis. Sci.* **34** 454-471, [Paper](https://projecteuclid.org/euclid.ss/1570780979)\n\nPan, X., Sun, Q. and Zhou, W.-X. (2019). Nonconvex regularized robust regression with oracle properties in polynomial time. Preprint. [Paper](https://arxiv.org/abs/1907.04027)\n\nSanderson, C. and Curtin, R. (2016). Armadillo: A template-based C++ library for linear algebra. *J. Open Source Softw.* **1** 26. [Paper](http://conradsanderson.id.au/pdfs/sanderson_armadillo_joss_2016.pdf)\n\nSun, Q., Zhou, W.-X. and Fan, J. (2020). Adaptive Huber regression. *J. Amer. Stat. Assoc.* **115** 254-265. [Paper](https://doi.org/10.1080/01621459.2018.1543124)\n\nTibshirani, R. (1996). Regression shrinkage and selection via the lasso. *J. R. Stat. Soc. Ser. B. Stat. Methodol.* **58** 267â€“288. [Paper](https://www.jstor.org/stable/2346178?seq=1#metadata_info_tab_contents)\n\nWang, L., Zheng, C., Zhou, W. and Zhou, W.-X. (2020). A new principle for tuning-free Huber regression. *Stat. Sinica* to appear. [Paper](https://www.math.ucsd.edu/~wez243/tfHuber.pdf)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/IV012/tfHuber",
    "keywords": "",
    "license": "GPL (ver 3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tfHuber",
    "package_url": "https://pypi.org/project/tfHuber/",
    "platform": "",
    "project_url": "https://pypi.org/project/tfHuber/",
    "project_urls": {
      "Homepage": "https://github.com/IV012/tfHuber"
    },
    "release_url": "https://pypi.org/project/tfHuber/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Python Package for tuning-free Huber Regression",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11468545,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0d7b48dd14aa1c05586e0074fe437bdcddc01233798f6b233456338d4c830fe",
          "md5": "8964600cc79679e60a06eabe23545f3e",
          "sha256": "06954d0357344014ebf53b17989e814cd9f95e76c6a80c8c7feed2eea626a69a"
        },
        "downloads": -1,
        "filename": "tfHuber-0.0.1-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "8964600cc79679e60a06eabe23545f3e",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 87762,
        "upload_time": "2021-08-11T10:30:00",
        "upload_time_iso_8601": "2021-08-11T10:30:00.469693Z",
        "url": "https://files.pythonhosted.org/packages/f0/d7/b48dd14aa1c05586e0074fe437bdcddc01233798f6b233456338d4c830fe/tfHuber-0.0.1-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69fc4e7beef161152d212e71738e755245cf0db4f5bfaf7801ee58d21c0f4abb",
          "md5": "ff9fffd05e392da8ecb71f65cf5b2dbd",
          "sha256": "2c67c540ae80a38fb5b7ff8417078a500fffd2ed6e556e07ccf2afea3dfc1aa4"
        },
        "downloads": -1,
        "filename": "tfHuber-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff9fffd05e392da8ecb71f65cf5b2dbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 823571,
        "upload_time": "2021-08-11T10:30:06",
        "upload_time_iso_8601": "2021-08-11T10:30:06.101232Z",
        "url": "https://files.pythonhosted.org/packages/69/fc/4e7beef161152d212e71738e755245cf0db4f5bfaf7801ee58d21c0f4abb/tfHuber-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78b2255febed5dee49582cd4a7dbb86e7d63d13035f1f79fad98dc2588d4cc7e",
          "md5": "ef70bbd05b887e422622f77b396581cf",
          "sha256": "8be38e4d6ef0f8748c0b619170a8c47265cdb015221b301a7312c77b09ae7ba0"
        },
        "downloads": -1,
        "filename": "tfHuber-0.1.0-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "ef70bbd05b887e422622f77b396581cf",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.5",
        "size": 116083,
        "upload_time": "2021-09-16T13:42:39",
        "upload_time_iso_8601": "2021-09-16T13:42:39.595910Z",
        "url": "https://files.pythonhosted.org/packages/78/b2/255febed5dee49582cd4a7dbb86e7d63d13035f1f79fad98dc2588d4cc7e/tfHuber-0.1.0-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b035ecba4467be439239cbce589f5ef8300bf74d9166958e777f6ca9d5c46f85",
          "md5": "6e8355f2b0b72ff7e33b7d596a38eeef",
          "sha256": "0f0c1fb1b6ae1a9913403dce4e5bc9e971903df594b4c397a0727c3b138671eb"
        },
        "downloads": -1,
        "filename": "tfHuber-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e8355f2b0b72ff7e33b7d596a38eeef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 826470,
        "upload_time": "2021-09-16T13:42:45",
        "upload_time_iso_8601": "2021-09-16T13:42:45.078850Z",
        "url": "https://files.pythonhosted.org/packages/b0/35/ecba4467be439239cbce589f5ef8300bf74d9166958e777f6ca9d5c46f85/tfHuber-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bdb4ce98216f5e1bb17c34e0821cb95fef0f0aa222b4882a6a6e00e65f29b18",
          "md5": "05990f4277df61d13048db0fa889b2ef",
          "sha256": "36614308bde736b13f77cb21a036a829b4529608dc512736a88e711c32ca3b84"
        },
        "downloads": -1,
        "filename": "tfHuber-0.1.1-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "05990f4277df61d13048db0fa889b2ef",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.5",
        "size": 116027,
        "upload_time": "2021-09-16T14:26:10",
        "upload_time_iso_8601": "2021-09-16T14:26:10.049983Z",
        "url": "https://files.pythonhosted.org/packages/5b/db/4ce98216f5e1bb17c34e0821cb95fef0f0aa222b4882a6a6e00e65f29b18/tfHuber-0.1.1-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc407fac822edcb4b6462f8136382013cbce2f3fc82ab724032e84a6cad71a00",
          "md5": "ff845e2d093da4b50035952f054ee37f",
          "sha256": "1b86e9397434af00a43fa5ebb791a64dd00d1e6a458acf6ae180ad78cdfb5c35"
        },
        "downloads": -1,
        "filename": "tfHuber-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff845e2d093da4b50035952f054ee37f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 1020922,
        "upload_time": "2021-09-16T14:26:20",
        "upload_time_iso_8601": "2021-09-16T14:26:20.793114Z",
        "url": "https://files.pythonhosted.org/packages/cc/40/7fac822edcb4b6462f8136382013cbce2f3fc82ab724032e84a6cad71a00/tfHuber-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5bdb4ce98216f5e1bb17c34e0821cb95fef0f0aa222b4882a6a6e00e65f29b18",
        "md5": "05990f4277df61d13048db0fa889b2ef",
        "sha256": "36614308bde736b13f77cb21a036a829b4529608dc512736a88e711c32ca3b84"
      },
      "downloads": -1,
      "filename": "tfHuber-0.1.1-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "05990f4277df61d13048db0fa889b2ef",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.5",
      "size": 116027,
      "upload_time": "2021-09-16T14:26:10",
      "upload_time_iso_8601": "2021-09-16T14:26:10.049983Z",
      "url": "https://files.pythonhosted.org/packages/5b/db/4ce98216f5e1bb17c34e0821cb95fef0f0aa222b4882a6a6e00e65f29b18/tfHuber-0.1.1-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc407fac822edcb4b6462f8136382013cbce2f3fc82ab724032e84a6cad71a00",
        "md5": "ff845e2d093da4b50035952f054ee37f",
        "sha256": "1b86e9397434af00a43fa5ebb791a64dd00d1e6a458acf6ae180ad78cdfb5c35"
      },
      "downloads": -1,
      "filename": "tfHuber-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ff845e2d093da4b50035952f054ee37f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 1020922,
      "upload_time": "2021-09-16T14:26:20",
      "upload_time_iso_8601": "2021-09-16T14:26:20.793114Z",
      "url": "https://files.pythonhosted.org/packages/cc/40/7fac822edcb4b6462f8136382013cbce2f3fc82ab724032e84a6cad71a00/tfHuber-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}