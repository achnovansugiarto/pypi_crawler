{
  "info": {
    "author": "Sam Bull",
    "author_email": "sam@pocketuniverse.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Multilang URLs\n==============\n\nIntroduction\n------------\n\nThis application provides a collection of URL-related utilities for\nmulti-lingual projects.\n\nFeatures\n--------\n\n* **Localizable URLs** - the same page can have a different url in a different\n  language. (eg /products/ can be /produits/ in French)\n\n* **Language-in-Path** - a replacement for Django's language cookie that\n  makes URLs language-specific by storing the language code in the URL path.\n\n* **Language-in-Domain** - a replacement for Django's language cookie that\n  makes URLs language-specific by mapping each domain for the site onto a\n  language.\n\n\nInstallation\n------------\n\n* Add ``transurlvania`` to ``INSTALLED_APPS`` in your settings file\n\n* Add the following middlewares to ``MIDDLEWARE_CLASSES`` in your settings file:\n\n  * ``transurlvania.middleware.URLCacheResetMiddleware`` (must be before the\n    ``SessionMiddleware``)\n\n  * ``transurlvania.middleware.URLTransMiddleware`` (must be before the\n\t``CommonMiddleware`` in order for APPEND_SLASH to work)\n\n* Add ``transurlvania.context_processors.translate`` to\n  ``TEMPLATE_CONTEXT_PROCESSORS``.\n\nUsage\n-----\n\nLocalizing URLs\n~~~~~~~~~~~~~~~\n\nReplace the usual::\n\n    from django.conf.urls.defaults import *\n\nwith::\n\n    from transurlvania.defaults import *\n\nYou will need the ugettext_noop function if you want to mark any URL patterns\nfor localization::\n\n    from django.utils.translation import ugettext_noop as _\n\nTo make an URL pattern localizable, first ensure that it is in the\n``url(...)`` form, then wrap the URL pattern itself in a gettext function\ncall::\n\n    url(_(r'^about-us/$'), 'about_us', name='about_us'),\n\nNow, when you next run the ``makemessages`` management command, these URL\npatterns will be collected in the .po file along with all the other\nlocalizable strings.\n\nNotes:\n\n* because the strings in the po file are not raw strings, some regex\n  characters will be escaped, so the URL patterns are sometimes less readable\n\n* When providing a translation for a URL pattern that includes regex elements,\n  ensure that the translation contains the same regex elements, otherwise the\n  pattern matching behaviour may vary from language to language.\n\nLocalizing ``get_absolute_url``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAny language-aware models that define ``get_absolute_url`` should decorate it\nwith ``permalink_in_lang``, from ``transurlvania.decorators`` so that the\nreturned URLs will be properly translated to the language of the object.\n``permalink_in_lang`` accepts the same tuple values as ``permalink`` except\nthat the language code to be used for the URL should be inserted between the\nname of the view or URL and the ``view_args`` parameter::\n\n    @permalink_in_lang\n    def get_absolute_url(self):\n        ('name_of_view_or_url', self.language, (), {})\n\n\nMaking URLs Language-Specific\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ntransurlvania provides two ways for making URLs language-specific, meaning that\nthe URL itself will indicate what language to use when generating the\nresponse.\n\nLanguage in Path\n````````````````\n\n* Add ``transurlvania.middleware.LangInPathMiddleware`` to ``MIDDLEWARE_CLASSES``\n  after ``LocaleMiddleware``.\n\n* Make these changes to your root URL conf module:\n\n  * If you haven't already done so, replace\n    ``from django.conf.urls.defaults import *`` with\n    ``from transurlvania.defaults import *``.\n\n  * Replace the call to ``patterns`` that populates the ``urlpatterns``\n    variable with a call to ``lang_prefixed_patterns``.\n\n  * To handle requests to the root URL itself (\"/\") or any URLs you wish to\n    keep outside of the language prefixing, declare the URL patterns as\n    normal inside a call to ``patterns`` and append the result to the\n    ``urlpatterns`` variable.\n\n  Here's an example of what a root URLconf might look like before adding\n  language prefixing::\n\n      from django.contrib import admin\n      from django.utils.translation import ugettext_noop as _\n\n      from transurlvania.defaults import *\n\n      admin.autodiscover()\n\n      urlpatterns = patterns('example.views',\n          url(r'^$', 'home'),\n          url(r'^admin/', include(admin.site.urls)),\n          url(_(r'^about-us/$'), 'about_us', name='about_us'),\n      )\n\n  And here's what it would look like after it's been converted::\n\n      from django.contrib import admin\n      from django.utils.translation import ugettext_noop as _\n\n      from transurlvania.defaults import *\n\n      admin.autodiscover()\n\n      urlpatterns = lang_prefixed_patterns('example.views',\n          url(r'^$', 'home'),\n          url(r'^admin/', include(admin.site.urls)),\n          url(_(r'^about-us/$'), 'about_us', name='about_us'),\n      )\n\n\n      urlpatterns += patterns('example.views',\n          url(r'^$', 'language_selection_splash'),\n          )\n\nLanguage in Domain\n``````````````````\n\n* Add ``transurlvania.middleware.LangInDomainMiddleware`` to ``MIDDLEWARE_CLASSES``\n  after ``LocaleMiddleware``.\n\n* Add ``MULTILANG_LANGUAGE_DOMAINS`` to the project's settings module.\n\n  This settings should be a dictionary mapping language codes to two-element\n  tuples, where the first element is the domain for that language, and the\n  second element is the name of the site this represents.\n\n  Example::\n\n      MULTILANG_LANGUAGE_DOMAINS = {\n          'en': ('www.example-en.com', 'English Site'),\n          'fr': ('www.example-fr.com', 'French Site')\n      }\n\n\nLanguage Switching\n``````````````````\n\nDjango's language switching view is incompatible with transurlvania's\ntechniques for setting site language using the URL. transurlvania provides its\nown language switching tools that make it possible to link directly to the\nloaded page's alternate-language equivalent.\n\nThe main requirement for this functionality is that\n``transurlvania.middleware.URLTransMiddleware`` is in ``MIDDLEWARE_CLASSES``, and\n``transurlvania.context_processors.translate`` is in\n``TEMPLATE_CONTEXT_PROCESSORS``. With these installed you can then use the\n``this_page_in_lang`` template tag to get the URL for the page currently being\nviewed in the language requested.\n\nSo, ``{% this_page_in_lang \"fr\" %}`` would return the URL to the French\nversion of the page being displayed.\n\nThe language switching code has two schemes for determining the URL to use:\n\n1. If there's a variable named ``object`` in the context, and that variable\nimplements a method named ``get_translation``, the switcher will call the\nmethod with the requsted language, call ``get_absolute_url`` on what's\nreturned and then use that URL for the translation.\n\n2. If the first method fails, the switcher will call transurlvania's\nreverse_for_language function using the view name and the parameters that were\nresolved from the current request.\n\nThere are cases where neither of these schemes will work such as when the\nobject isn't named ``object``, or when the same view is used by multiple URLs.\nIn those cases, you can use the decorators provided by the ``translators``\nmodule to decorate the view and change which URL look-up scheme is used. You\ncan also define your own look-up schemes.\n\nLanguage Based Blocking\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``BlockLocaleMiddleware`` will block non-admins from accessing the site in any language\nlisted in the ``BLOCKED_LANGUAGES`` setting in the settings file.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trapeze/transurlvania",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "transurlvania",
    "package_url": "https://pypi.org/project/transurlvania/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/transurlvania/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/trapeze/transurlvania"
    },
    "release_url": "https://pypi.org/project/transurlvania/0.2.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "This application provides a collection of URL-related utilities for multi-lingual projects.",
    "version": "0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 744659,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1dd98d2db16e03e440724dcf7e8a0556bfe089d44b0a19162d6f6bd28a45113",
          "md5": "96fb86f15d52a41529cbe10710e1d1a1",
          "sha256": "ec99b27ff7cfe701953e4162875850fdbc9d8b2b57eca219c9b4859ff932b830"
        },
        "downloads": -1,
        "filename": "transurlvania-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "96fb86f15d52a41529cbe10710e1d1a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16971,
        "upload_time": "2011-01-05T16:14:37",
        "upload_time_iso_8601": "2011-01-05T16:14:37.242208Z",
        "url": "https://files.pythonhosted.org/packages/f1/dd/98d2db16e03e440724dcf7e8a0556bfe089d44b0a19162d6f6bd28a45113/transurlvania-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3e6cdda9d2a69a58a1fe4e73433490cb665ff3b1cda6d944ce9a7fec84497ba",
          "md5": "0d9dba58d5450155e4f6a9e71427cc1c",
          "sha256": "45458694144c241c5f4b1d7737cc570394903968fe9ec65e290d5a04aaaa7123"
        },
        "downloads": -1,
        "filename": "transurlvania-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0d9dba58d5450155e4f6a9e71427cc1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16999,
        "upload_time": "2011-01-05T16:53:04",
        "upload_time_iso_8601": "2011-01-05T16:53:04.678722Z",
        "url": "https://files.pythonhosted.org/packages/c3/e6/cdda9d2a69a58a1fe4e73433490cb665ff3b1cda6d944ce9a7fec84497ba/transurlvania-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9adedee97823b498cf47f2e34c545cfd2e8957c80825fa845d3eded26f44c1f3",
          "md5": "59fb894fdfa0d3ac40aec91cdcd38dd5",
          "sha256": "99a1b040aa8d2b812321814bcd041a6f7fcb6852b426aad93c3f809450ffcaaa"
        },
        "downloads": -1,
        "filename": "transurlvania-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "59fb894fdfa0d3ac40aec91cdcd38dd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17458,
        "upload_time": "2011-11-04T19:41:36",
        "upload_time_iso_8601": "2011-11-04T19:41:36.274952Z",
        "url": "https://files.pythonhosted.org/packages/9a/de/dee97823b498cf47f2e34c545cfd2e8957c80825fa845d3eded26f44c1f3/transurlvania-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9adedee97823b498cf47f2e34c545cfd2e8957c80825fa845d3eded26f44c1f3",
        "md5": "59fb894fdfa0d3ac40aec91cdcd38dd5",
        "sha256": "99a1b040aa8d2b812321814bcd041a6f7fcb6852b426aad93c3f809450ffcaaa"
      },
      "downloads": -1,
      "filename": "transurlvania-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "59fb894fdfa0d3ac40aec91cdcd38dd5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17458,
      "upload_time": "2011-11-04T19:41:36",
      "upload_time_iso_8601": "2011-11-04T19:41:36.274952Z",
      "url": "https://files.pythonhosted.org/packages/9a/de/dee97823b498cf47f2e34c545cfd2e8957c80825fa845d3eded26f44c1f3/transurlvania-0.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}