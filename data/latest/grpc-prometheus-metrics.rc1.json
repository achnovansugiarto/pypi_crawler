{
  "info": {
    "author": "Sergio Soldatov",
    "author_email": "soldatovsr97@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# grpc-prometheus-metrics\n\nFork of py-grpc-prometheus: https://github.com/lchenn/py-grpc-prometheus\n\nInstrument library to provide prometheus metrics similar to:\n\n- https://github.com/grpc-ecosystem/java-grpc-prometheus\n- https://github.com/grpc-ecosystem/go-grpc-prometheus\n\n\n## Status\nCurrently, the library has the parity metrics with the Java and Go library.\n\n### Server side:\n- grpc_server_started_total\n- grpc_server_handled_total\n- grpc_server_msg_received_total\n- grpc_server_msg_sent_total\n- grpc_server_handling_seconds\n\n### Client side:\n- grpc_client_started_total\n- grpc_client_handled_total\n- grpc_client_msg_received_total\n- grpc_client_msg_sent_total\n- grpc_client_handling_seconds\n- grpc_client_msg_recv_handling_seconds\n- grpc_client_msg_send_handling_seconds\n\n## How to use\n\n```\npip install py-grpc-prometheus\n```\n\n## Client side:\nClient metrics monitoring is done by intercepting the gPRC channel.\n\n```python\nimport grpc\nfrom grpc_prometheus_metrics.prometheus_client_interceptor import PromClientInterceptor\n\nchannel = grpc.intercept_channel(grpc.insecure_channel('server:6565'),\n                                         PromClientInterceptor())\n# Start an end point to expose metrics.\nstart_http_server(metrics_port)\n```\n\n## Server side:\nServer metrics are exposed by adding the interceptor when the gRPC server is started. Take a look at\n`tests/integration/hello_world/hello_world_client.py` for the complete example.\n\n```python\nimport grpc\nfrom concurrent import futures\nfrom grpc_prometheus_metrics.prometheus_server_interceptor import PromServerInterceptor\nfrom prometheus_client import start_http_server\n```\n\nStart the gRPC server with the interceptor, take a look at\n`tests/integration/hello_world/hello_world_server.py` for the complete example.\n\n```python\nserver = grpc.server(futures.ThreadPoolExecutor(max_workers=10),\n                         interceptors=(PromServerInterceptor(),))\n# Start an end point to expose metrics.\nstart_http_server(metrics_port)\n```\n\n## Histograms\n\n[Prometheus histograms](https://prometheus.io/docs/concepts/metric_types/#histogram) are a great way\nto measure latency distributions of your RPCs. However, since it is bad practice to have metrics\nof [high cardinality](https://prometheus.io/docs/practices/instrumentation/#do-not-overuse-labels)\nthe latency monitoring metrics are disabled by default. To enable them please call the following\nin your interceptor initialization code:\n\n```jsoniq\nserver = grpc.server(futures.ThreadPoolExecutor(max_workers=10),\n                     interceptors=(PromServerInterceptor(enable_handling_time_histogram=True),))\n```\n\nAfter the call completes, its handling time will be recorded in a [Prometheus histogram](https://prometheus.io/docs/concepts/metric_types/#histogram)\nvariable `grpc_server_handling_seconds`. The histogram variable contains three sub-metrics:\n\n * `grpc_server_handling_seconds_count` - the count of all completed RPCs by status and method\n * `grpc_server_handling_seconds_sum` - cumulative time of RPCs by status and method, useful for\n   calculating average handling times\n * `grpc_server_handling_seconds_bucket` - contains the counts of RPCs by status and method in respective\n   handling-time buckets. These buckets can be used by Prometheus to estimate SLAs (see [here](https://prometheus.io/docs/practices/histograms/))\n\n## Server Side:\n- enable_handling_time_histogram: Enables 'grpc_server_handling_seconds'\n\n## Client Side:\n- enable_client_handling_time_histogram: Enables 'grpc_client_handling_seconds'\n- enable_client_stream_receive_time_histogram: Enables 'grpc_client_msg_recv_handling_seconds'\n- enable_client_stream_send_time_histogram: Enables 'grpc_client_msg_send_handling_seconds'\n\n## Legacy metrics:\n\nMetric names have been updated to be in line with those from https://github.com/grpc-ecosystem/go-grpc-prometheus.\n\nThe legacy metrics are:\n\n### server side:\n- grpc_server_started_total\n- grpc_server_handled_total\n- grpc_server_handled_latency_seconds\n- grpc_server_msg_received_total\n- grpc_server_msg_sent_total\n\n### client side:\n- grpc_client_started_total\n- grpc_client_completed\n- grpc_client_completed_latency_seconds\n- grpc_client_msg_sent_total\n- grpc_client_msg_received_total\n\nIn order to be able to use these legacy metrics for backwards compatibility, the `legacy` flag can be set to `True` when initialising the server/client interceptors\n\nFor example, to enable the server side legacy metrics:\n```jsoniq\nserver = grpc.server(futures.ThreadPoolExecutor(max_workers=10),\n                     interceptors=(PromServerInterceptor(legacy=True),))\n```\n\n## How to run and test\n```sh\nmake initialize-development\nmake test\n```\n\n## TODO:\n- Unit test with https://github.com/census-instrumentation/opencensus-python/blob/master/tests/unit/trace/ext/grpc/test_server_interceptor.py\n\n## Reference\n- https://grpc.io/grpc/python/grpc.html\n- https://github.com/census-instrumentation/opencensus-python/blob/master/opencensus/trace/ext/grpc/utils.py\n- https://github.com/opentracing-contrib/python-grpc/blob/b4bdc7ce81fa75ede00f7c6bcf5dab8fae47332a/grpc_opentracing/grpcext/grpc_interceptor/server_interceptor.py\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grpc-prometheus-metrics",
    "package_url": "https://pypi.org/project/grpc-prometheus-metrics/",
    "platform": null,
    "project_url": "https://pypi.org/project/grpc-prometheus-metrics/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/grpc-prometheus-metrics/0.0.1/",
    "requires_dist": [
      "setuptools (>=39.0.1)",
      "grpcio (>=1.10.0)",
      "prometheus-client (>=0.3.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "Python gRPC Prometheus Interceptors, py-grpc-prometheus fork",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17377497,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20dd40b086ef496a83b3c14f29c169db70580e0079e3e29a7a16c1d72866645c",
          "md5": "0b84a15386210fba4bc5a8c64a668520",
          "sha256": "bab44cf3f3c197a1d0a8627fbe4c2f87256ad0015b6b7a3bb72e1098fd545096"
        },
        "downloads": -1,
        "filename": "grpc_prometheus_metrics-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b84a15386210fba4bc5a8c64a668520",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 15932,
        "upload_time": "2023-03-21T10:34:53",
        "upload_time_iso_8601": "2023-03-21T10:34:53.437654Z",
        "url": "https://files.pythonhosted.org/packages/20/dd/40b086ef496a83b3c14f29c169db70580e0079e3e29a7a16c1d72866645c/grpc_prometheus_metrics-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16d2179bd5ebc33ee417102b97e14189353186248f8a612fe6d36860c17dc77c",
          "md5": "4199d8373762bdf4754d1b8b9169ad89",
          "sha256": "d26e809f47692469f1b6fa559e444a0e2c840e08027db82df5dae09f1db51f48"
        },
        "downloads": -1,
        "filename": "grpc_prometheus_metrics-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4199d8373762bdf4754d1b8b9169ad89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 11761,
        "upload_time": "2023-03-21T10:34:55",
        "upload_time_iso_8601": "2023-03-21T10:34:55.175774Z",
        "url": "https://files.pythonhosted.org/packages/16/d2/179bd5ebc33ee417102b97e14189353186248f8a612fe6d36860c17dc77c/grpc_prometheus_metrics-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20dd40b086ef496a83b3c14f29c169db70580e0079e3e29a7a16c1d72866645c",
        "md5": "0b84a15386210fba4bc5a8c64a668520",
        "sha256": "bab44cf3f3c197a1d0a8627fbe4c2f87256ad0015b6b7a3bb72e1098fd545096"
      },
      "downloads": -1,
      "filename": "grpc_prometheus_metrics-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0b84a15386210fba4bc5a8c64a668520",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 15932,
      "upload_time": "2023-03-21T10:34:53",
      "upload_time_iso_8601": "2023-03-21T10:34:53.437654Z",
      "url": "https://files.pythonhosted.org/packages/20/dd/40b086ef496a83b3c14f29c169db70580e0079e3e29a7a16c1d72866645c/grpc_prometheus_metrics-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16d2179bd5ebc33ee417102b97e14189353186248f8a612fe6d36860c17dc77c",
        "md5": "4199d8373762bdf4754d1b8b9169ad89",
        "sha256": "d26e809f47692469f1b6fa559e444a0e2c840e08027db82df5dae09f1db51f48"
      },
      "downloads": -1,
      "filename": "grpc_prometheus_metrics-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4199d8373762bdf4754d1b8b9169ad89",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 11761,
      "upload_time": "2023-03-21T10:34:55",
      "upload_time_iso_8601": "2023-03-21T10:34:55.175774Z",
      "url": "https://files.pythonhosted.org/packages/16/d2/179bd5ebc33ee417102b97e14189353186248f8a612fe6d36860c17dc77c/grpc_prometheus_metrics-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}