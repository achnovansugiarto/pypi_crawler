{
  "info": {
    "author": "Lev Perla",
    "author_email": "levperla@mail.ru",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Time_Series_Prediction_RNN\n\n![code-size][code-size]\n![license][license]\n\n[code-size]: https://img.shields.io/github/languages/code-size/LevPerla/Time_Series_Prediction_RNN\n\n[license]: https://img.shields.io/badge/license-MIT-green\n\n## Requirements\n\nts_rnn requires the following to run:\n\n* [Python](node) 3.7.3+\n\n## Installation\n\n### From pip\n\nYou could install the latest version from PyPi:\n\n```sh\npip install ts-rnn\n```\n\n### From Github\n\nYou could install the latest version directly from Github:\n\n```sh\npip install https://github.com/LevPerla/Time_Series_Prediction_RNN/archive/master.zip\n```\n\n### From source\nDownload the source code by cloning the repository or by pressing ['Download ZIP'](https://github.com/pandas-profiling/pandas-profiling/archive/master.zip) on this page. \n\nInstall by navigating to the proper directory and running:\n\n```sh\npython setup.py install\n```\n## Example\n[Example](https://github.com/LevPerla/Time_Series_Prediction_RNN/blob/master/notebooks/Example.ipynb)\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/LevPerla/Time_Series_Prediction_RNN/blob/master/notebooks/Example.ipynb)\n\n\n## Documentation\n\nThe full documentation haven't ready yet. I hope, it will show later.\n\n### Getting started\nTo import TS_RNN model run\n\n```python\nfrom ts_rnn.model import TS_RNN\n```\n\nFirst of all, we need to set architecture of RNN in config in the way like this:\n```python\nrnn_arch = {\"layers\": [\n                        [\"LSTM\", {\"units\": 64,\n                                  \"return_sequences\": False,\n                                  \"kernel_initializer\": \"glorot_uniform\",\n                                  \"activation\": \"linear\"}],\n                        [\"Dropout\", {\"rate\": 0.2}],\n                        [\"Dense\", {\"activation\": \"linear\"}]\n                    ]}\n```\n\n> **WARNING**: *Last RNN block need to gave return_sequences: False, another - True*\n\n\n#### To set the architecture of RNN you can use some of this blocks:\n```python\n# LSTM block\n[\"LSTM\", {Keras layer params}],\n[\"GRU\", {Keras layer params}],\n[\"SimpleRNN\", {Keras layer params}],\n[\"Bidirectional\", {Keras layer params}],\n[\"Dropout\", {Keras layer params}],\n[\"Dense\", {Keras layer params}]\n```\n\n### TS_RNN class has 7 attributes:\n\n<ol>\n<li>n_lags - length of the input vector;</li>\n<li>horizon - length of prediction horizon;</li>\n<li>rnn_arch - description of the model's parameters in Python dictionary format;</li>\n<li>strategy - prediction strategy: \"Direct\", \"Recursive\", \"MiMo\", \"DirRec\", \"DirMo\"</li>\n<li>tuner - tupe of Keras.tuner: \"RandomSearch\", \"BayesianOptimization\", \"Hyperband\"</li>\n<li>tuner_hp - keras_tuner.HyperParameters class</li>\n<li>n_step_out - length of the output vector (Need to define only for DirMo strategy);</li>\n<li>loss - Keras loss to train model;</li>\n<li>optimizer - Keras optimizer to train model.</li>\n<li>n_features - number of time series in the input (only for factors forecasting);</li>\n<li>save_dir - dir to save logs</li>\n</ol>\n\n#### You can set model this way:\n```python\nmodel = TS_RNN(rnn_arch=rnn_arch,  # dict with model architecture\n               n_lags=12,  # length of the input vector\n               horizon=TEST_LEN,  # length of prediction horizon\n               strategy=\"MiMo\",  # Prediction strategy from \"Direct\", \"Recursive\", \"MiMo\", \"DirRec\", \"DirMo\"\n               loss=\"mae\",  # Keras loss\n               optimizer=\"adam\",  # Keras optimizer\n               n_features=X_train.shape[1]  # also you need to define this if use factors\n               )\n```\n\n### TS_RNN supports 5 methods:\n\n<ol>\n<li>fit - train the neural network;</li>\n<li>predict - predict by the neural network by input;</li>\n<li>forecast - predict by the neural network by last train values;</li>\n<li>summary - print NNs architecture</li>\n<li>save - save model files to dict</li>\n</ol>\n\nFIT\n\n```python\nmy_callbacks = [callbacks.EarlyStopping(patience=30, monitor='val_loss')]\n\nmodel.fit(factors_train=factors_val,  # pd.DataFrame with factors time series\n          target_train=target_val,  # pd.DataFrame or pd.Series with target time series\n          factors_val=factors_val,  # pd.DataFrame with factors time series\n          target_val=target_val,  # pd.DataFrame or pd.Series with target time series\n          epochs=100,  # num epoch to train\n          batch_size=12,  # batch_size\n          callbacks=my_callbacks,  # Keras callbacks\n          save_dir=\"../your_folder\",  # folder to image save \n          verbose=2)  # verbose\n```\n\nPREDICT\n\n```python\npredicted = model.predict(factors=factors_to_pred,\n                          target=target_to_pred,\n                          prediction_len=len(y_test))\n```\n\nFORECAST\n\n```python\npredicted = model.forecast(prediction_len=HORIZON)\n```\n\nSUMMARY\n\n```python\nmodel.summary()\n```\n\nSAVE\n\n```python\nmodel.save(model_name='tsrnn_model', save_dir='path')\n```\n\nAlso you may load TS_RNN model from folder\n\n```python\nfrom ts_rnn.model import load_ts_rnn\n\nmodel = load_ts_rnn(os.path.join('path', 'tsrnn_model'))\n```\n\n### Simple example of usage:\n\n> **Info**: For better performance use MinMaxScaler and Deseasonalizer before fitting\n\n```python\nfrom sklearn.model_selection import train_test_split\nfrom ts_rnn.model import TS_RNN\nimport pandas as pd\n\nHORIZON = 12\n\ndata_url = \"https://raw.githubusercontent.com/LevPerla/Time_Series_Prediction_RNN/master/data/series_g.csv\"\ntarget = pd.read_csv(data_url, sep=\";\").series_g\ntarget_train, target_test = train_test_split(target, test_size=HORIZON, shuffle=False)\n\nmodel = TS_RNN(n_lags=12, horizon=HORIZON)\nmodel.fit(target_train=target_train,\n          target_val=target_test,\n          epochs=40,\n          batch_size=12,\n          verbose=1)\n\nmodel.summary()\npredicted = model.predict(target=target_train[-model.n_lags:], prediction_len=HORIZON)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://https://github.com/LevPerla/Time_Series_Prediction_RNN",
    "keywords": "rnn time-series keras data-science data-analysis python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ts-rnn",
    "package_url": "https://pypi.org/project/ts-rnn/",
    "platform": null,
    "project_url": "https://pypi.org/project/ts-rnn/",
    "project_urls": {
      "Homepage": "http://https://github.com/LevPerla/Time_Series_Prediction_RNN"
    },
    "release_url": "https://pypi.org/project/ts-rnn/0.2.12/",
    "requires_dist": [
      "pandas (>=1.1.5)",
      "numpy (>=1.21.0)",
      "tqdm (>=4.46.1)",
      "tensorflow (>=2.1.0)",
      "matplotlib (>=3.1.3)",
      "keras-tuner (>=1.0.4)"
    ],
    "requires_python": ">= 3.7.3",
    "summary": "Package to forecast time series with recurrent neural network",
    "version": "0.2.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15844365,
  "releases": {
    "0.2.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "267b182ddadd68f7a5626325b29538a4092e6edbd04287b82de42c79eefd0736",
          "md5": "306fe204e2d8ec338ea046533c4ca6d3",
          "sha256": "76d8d986f3d6806386bdf32c1247d67dbc58885ef8c8993bae9eff3f46bcad62"
        },
        "downloads": -1,
        "filename": "ts_rnn-0.2.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "306fe204e2d8ec338ea046533c4ca6d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7.3",
        "size": 13706,
        "upload_time": "2022-11-16T10:48:57",
        "upload_time_iso_8601": "2022-11-16T10:48:57.807849Z",
        "url": "https://files.pythonhosted.org/packages/26/7b/182ddadd68f7a5626325b29538a4092e6edbd04287b82de42c79eefd0736/ts_rnn-0.2.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89caf80403cf9a8f1c246499961df068650829a1b696446b95f85e9b052afdbf",
          "md5": "12e98755ac4f0f427aef71fdbcb89dab",
          "sha256": "b0e4e3cd32f5cbd37ccb12e68e1b2716a938c17e915359da1b151b51ff881198"
        },
        "downloads": -1,
        "filename": "ts_rnn-0.2.11.tar.gz",
        "has_sig": false,
        "md5_digest": "12e98755ac4f0f427aef71fdbcb89dab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7.3",
        "size": 14944,
        "upload_time": "2022-11-16T10:49:00",
        "upload_time_iso_8601": "2022-11-16T10:49:00.703944Z",
        "url": "https://files.pythonhosted.org/packages/89/ca/f80403cf9a8f1c246499961df068650829a1b696446b95f85e9b052afdbf/ts_rnn-0.2.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fcd07c6a979fdec923ec772e40818b05e19e0ef0103e552aa54c7822f09e479",
          "md5": "9f3abe18269eb879dfebe46311abfd7d",
          "sha256": "a5dd8c90600e4aa27ed9932d78e570aeaae4361cec8ac1448e8e46ad16ed6723"
        },
        "downloads": -1,
        "filename": "ts_rnn-0.2.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f3abe18269eb879dfebe46311abfd7d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7.3",
        "size": 13571,
        "upload_time": "2022-11-21T19:02:40",
        "upload_time_iso_8601": "2022-11-21T19:02:40.336573Z",
        "url": "https://files.pythonhosted.org/packages/8f/cd/07c6a979fdec923ec772e40818b05e19e0ef0103e552aa54c7822f09e479/ts_rnn-0.2.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "358678ae1f58c4eb11c5c33f7782b36a5ea0c721be48e5bb8c6f35eff9e507e2",
          "md5": "54e770ed623bb7c331d811366afbaef8",
          "sha256": "18067c43590afc6194faf4e4b0fa49ac654e52d433d9dc909a73f86e1d0099e8"
        },
        "downloads": -1,
        "filename": "ts_rnn-0.2.12.tar.gz",
        "has_sig": false,
        "md5_digest": "54e770ed623bb7c331d811366afbaef8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7.3",
        "size": 14873,
        "upload_time": "2022-11-21T19:02:42",
        "upload_time_iso_8601": "2022-11-21T19:02:42.110543Z",
        "url": "https://files.pythonhosted.org/packages/35/86/78ae1f58c4eb11c5c33f7782b36a5ea0c721be48e5bb8c6f35eff9e507e2/ts_rnn-0.2.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fcd07c6a979fdec923ec772e40818b05e19e0ef0103e552aa54c7822f09e479",
        "md5": "9f3abe18269eb879dfebe46311abfd7d",
        "sha256": "a5dd8c90600e4aa27ed9932d78e570aeaae4361cec8ac1448e8e46ad16ed6723"
      },
      "downloads": -1,
      "filename": "ts_rnn-0.2.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f3abe18269eb879dfebe46311abfd7d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">= 3.7.3",
      "size": 13571,
      "upload_time": "2022-11-21T19:02:40",
      "upload_time_iso_8601": "2022-11-21T19:02:40.336573Z",
      "url": "https://files.pythonhosted.org/packages/8f/cd/07c6a979fdec923ec772e40818b05e19e0ef0103e552aa54c7822f09e479/ts_rnn-0.2.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "358678ae1f58c4eb11c5c33f7782b36a5ea0c721be48e5bb8c6f35eff9e507e2",
        "md5": "54e770ed623bb7c331d811366afbaef8",
        "sha256": "18067c43590afc6194faf4e4b0fa49ac654e52d433d9dc909a73f86e1d0099e8"
      },
      "downloads": -1,
      "filename": "ts_rnn-0.2.12.tar.gz",
      "has_sig": false,
      "md5_digest": "54e770ed623bb7c331d811366afbaef8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.7.3",
      "size": 14873,
      "upload_time": "2022-11-21T19:02:42",
      "upload_time_iso_8601": "2022-11-21T19:02:42.110543Z",
      "url": "https://files.pythonhosted.org/packages/35/86/78ae1f58c4eb11c5c33f7782b36a5ea0c721be48e5bb8c6f35eff9e507e2/ts_rnn-0.2.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}