{
  "info": {
    "author": "Matteo Ferla",
    "author_email": "matteo.ferla@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Chemistry"
    ],
    "description": "# remote-notebook-error-collection\n\n> This weekend project is an alpha release. It may be stay like the forever.\n\nThis aim to collect errors generated by other users using a notebook that was shared.\nThree classes presented here are successive steps in its construction.\n\nIn a Jupyter notebook, this is what is run:\n```python\n!pip install notebook-error-reporter\nfrom notebook_error_reporter import ErrorServer\n\nes = ErrorServer(url='https://errors.matteoferla.com', notebook='test')\nes.enable()\n```\nThen if an error is raised it gets logged (see lengthy privacy discussion below)\nand can be inspected:\n\n```python\nes.retrieve_errors()\n```\n\n[![https img shields io pypi v notebook error reporter logo python](https://img.shields.io/pypi/v/notebook-error-reporter?logo=python)](https://pypi.org/project/notebook-error-reporter)\n[![https img shields io pypi pyversions notebook error reporter logo python](https://img.shields.io/pypi/pyversions/notebook-error-reporter?logo=python)](https://pypi.org/project/notebook-error-reporter)\n[![https img shields io pypi wheel notebook error reporter logo python](https://img.shields.io/pypi/wheel/notebook-error-reporter?logo=python)](https://pypi.org/project/notebook-error-reporter)\n[![https img shields io pypi format notebook error reporter logo python](https://img.shields.io/pypi/format/notebook-error-reporter?logo=python)](https://pypi.org/project/notebook-error-reporter)\n[![https img shields io pypi status notebook error reporter logo python](https://img.shields.io/pypi/status/notebook-error-reporter?logo=python)](https://pypi.org/project/notebook-error-reporter)\n\n[![https img shields io codeclimate maintainability matteoferla notebook error reporter logo codeclimate](https://img.shields.io/codeclimate/maintainability/matteoferla/notebook-error-reporter?logo=codeclimate)](https://codeclimate.com/github/matteoferla/notebook-error-reporter)\n[![https img shields io codeclimate issues matteoferla notebook error reporter logo codeclimate](https://img.shields.io/codeclimate/issues/matteoferla/notebook-error-reporter?logo=codeclimate)](https://codeclimate.com/github/matteoferla/notebook-error-reporter)\n[![https img shields io codeclimate tech debt matteoferla notebook error reporter logo codeclimate](https://img.shields.io/codeclimate/tech-debt/matteoferla/notebook-error-reporter?logo=codeclimate)](https://codeclimate.com/github/matteoferla/notebook-error-reporter)\n\n[![https img shields io github forks matteoferla notebook error reporter label Fork style social logo github](https://img.shields.io/github/forks/matteoferla/notebook-error-reporter?label=Fork&style=social&logo=github)](https://github.com/matteoferla/notebook-error-reporter)\n[![https img shields io github stars matteoferla notebook error reporter style social logo github](https://img.shields.io/github/stars/matteoferla/notebook-error-reporter?style=social&logo=github)](https://github.com/matteoferla/notebook-error-reporter)\n[![https img shields io github watchers matteoferla notebook error reporter label Watch style social logo github](https://img.shields.io/github/watchers/matteoferla/notebook-error-reporter?label=Watch&style=social&logo=github)](https://github.com/matteoferla/notebook-error-reporter)\n[![https img shields io github last commit matteoferla notebook error reporter logo github](https://img.shields.io/github/last-commit/matteoferla/notebook-error-reporter?logo=github)](https://github.com/matteoferla/notebook-error-reporter)\n[![https img shields io github license matteoferla notebook error reporter logo github](https://img.shields.io/github/license/matteoferla/notebook-error-reporter?logo=github)](https://github.com/matteoferla/notebook-error-reporter/raw/main/LICENCE)\n[![https img shields io github commit activity m matteoferla notebook error reporter logo github](https://img.shields.io/github/commit-activity/m/matteoferla/notebook-error-reporter?logo=github)](https://github.com/matteoferla/notebook-error-reporter)\n[![https img shields io github issues matteoferla notebook error reporter logo github](https://img.shields.io/github/issues/matteoferla/notebook-error-reporter?logo=github)](https://github.com/matteoferla/notebook-error-reporter)\n[![https img shields io github issues closed matteoferla notebook error reporter logo github](https://img.shields.io/github/issues-closed/matteoferla/notebook-error-reporter?logo=github)](https://github.com/matteoferla/notebook-error-reporter)\n\n<!--[![https img shields io github release date matteoferla notebook error reporter logo github](https://img.shields.io/github/release-date/matteoferla/notebook-error-reporter?logo=github)](https://github.com/matteoferla/notebook-error-reporter)-->\n<!--[![https img shields io pypi dm notebook error reporter logo python](https://img.shields.io/pypi/dm/notebook-error-reporter?logo=python)](https://pypi.org/project/notebook-error-reporter)\n-->\n## Install\n\n    pip install notebook-error-reporter\n\n## Examples in action\n\n[![Fragmenstein](https://img.shields.io/badge/Run--demo--in--colab-fragmenstein-f9ab00?logo=googlecolab)](https://colab.research.google.com/github/matteoferla/Fragmenstein/blob/master/colab_fragmenstein.ipynb)\n[![boilerplate PyRosetta](https://img.shields.io/badge/Run--demo--in--colab-boilerplate--pyrosetta-f9ab00?logo=googlecolab)](https://colab.research.google.com/github/matteoferla/pyrosetta_help/blob/main/colab_notebooks/colab-pyrosetta.ipynb)\n[![colabfold dimer PyRosetta](https://img.shields.io/badge/Run--demo--in--colab-analysis--colabfold--dimer-f9ab00?logo=googlecolab)](https://colab.research.google.com/github/matteoferla/pyrosetta_help/blob/main/colab_notebooks/colab-pyrosetta-dimer.ipynb)\n[![ligand migration  PyRosetta](https://img.shields.io/badge/Run--demo--in--colab-ligand--migration-f9ab00?logo=googlecolab)](https://colab.research.google.com/github/matteoferla/pyrosetta_help/blob/main/colab_notebooks/colab-pyrosetta-migrate_ligands.ipynb)\n[![Add missing loops by cannibilising AlphaFold2](https://img.shields.io/badge/Run--demo--in--colab-cannibalise--AF2--for--missing--loops-f9ab00?logo=googlecolab)](https://colab.research.google.com/github/matteoferla/pyrosetta_help/blob/main/colab_notebooks/colab-thread_by_AF2_cannibalism.ipynb)\n\n## Aims\nI have a few notebooks that I have shared on Twitter and \nI occasionally get an email telling if the repo they use is broken\nor there is a case that causes an error.\nSimilar in concept to Sentry.io, I would like to know when error happen.\nMost users will not email about errors, so one sees the tip of an iceberg.\nThis is because:\n\n1. it is something silly they did\n2. they worry it may be something silly they did\n3. they deem the code crap\n\nPoint 1 implies there is a problem with user experience: it could have been clearer.\nThe user is never wrong: they have simply been misled.\n\nPoint 2 and 3 is an error that needs fixing.\nPoint 2 in particular means that better error handling is needed.\nPoint 3 Okay, the user is never wrong. However, instead of obfuscating the crapiness,\none can document the issue.\n\nI do not want any private or confidential data from the user or user given fields\nâ€”someone's target protein might be confidential.\nThe code therefore should not contain error codes raise someone's \npassword or credit card number or mutation.\n\nI only want to receive\n\n* the error type\n* the error message\n* some traceback details (line number, function name and filename minus path)\n* the notebook name\n* the cell's first line\n\nIn a regular locally hosted notebook there is the issue that servers collect IP addresses,\nwhich point to a user's location. This is not quite GDPR data, but still.\nNot collecting IP addresses is a terrible idea as fail2ban etc. rely on IP addressed to block wannabe hackers.\n\nIn a colab notebook this is rather straightforward as the IP of the request is\nfrom the server running the kernel, not the browser (for that a javascript function is required to pass this info over).\n\nData not sent is:\n\n* inputted values\n* (majorly) content of a mounted Google Drive\n\n## Store\n\nAn alternative option is storing the error details `error_details`.\n```\nfrom notebook_error_reporter import ErrorStore\nes = ErrorStore()\nes.enable()\nes.error_details\n```\n\n\n## Slack\nThe easiest way is getting slacked on error to a channel.\nA Slack webhook is easy to set up (just remember the subdomain to do so is api not app).\n\n```python\nimport os\nos.environ['SLACK_WEBHOOK'] = \"https://hooks.slack.com/services/XXXXXXXX\"\n\nfrom notebook_error_reporter import ErrorSlack\nes = ErrorSlack(os.environ['SLACK_WEBHOOK'])\nes.enable()\n```\n\nA regular cell does nothing. But one that is not successful will send a Slack message.\n\n    {\"error_name\": \"ValueError\", \n     \"error_message\": \"foo\", \n     \"traceback\": [{\"filename\": \"foo.py\",\n                    \"fun_name\": \"run_code\", \n                    \"lineno\": 666}, \n                    ...\n                   ], \n     \"first_line\": \"# cell that does foo\",\n     \"execution_count\": 111}\n\nThe 'filename' is stripped of the dist-packages path, \nbecause the `dist-packages` path in colab may have a username that _could_ have personal identifiable data.\n\nIf a Slack webhook is shared on GitHub, there are users that search GitHub for exposed webhooks \nand spam with adverts for their cybersecurity courses.\nAlso a single prankster user could make it really annoying.\nTherefore, a server needs to be set up ideally to collect this...\n\n## Server\n\n> For myself I have set-up https://errors.matteoferla.com\n> This is an Intel NUC acting as my homeserver connected to my\n> router. It could be even a Raspberry Pi.\n> (This is a weekend project so it's outside of the University's network\n> but privacy & confidentiality is as valued!)\n> If you like this project and want to replicate it\n> or use this server, just drop me an email.\n\nA FastAPI app to get the errors is also present.\nThis needs to be set up on a hosting server exposed to the internet.\n\nThis has the largest risk of vandalism.\n\nSo the server host would run `run_app.py`, which contains this code:\n```python\nimport uvicorn\nfrom fastapi import FastAPI\nfrom notebook_error_reporter.serverside import create_db, create_app\n\ncreate_db()\napp:FastAPI = create_app(debug=False, max_transparency=True, colab_only=False)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000, log_level=\"info\")\n```\n\nWhile a user activate logging on the notebook thusly:\n```python\nfrom notebook_error_reporter import ErrorServer\n\nes = ErrorServer(url='http://127.0.0.1:8000', notebook='mine')\nes.enable()\n```\n\nOn error a dictionary typehintinted as `EventMessageType` is sent:\n\n```python\nfrom notebook_error_reporter import EventMessageType\n\nEventMessageType.__annotations__\n```\n\n    {'execution_count': int,\n     'first_line': str,\n     'error_name': str,\n     'error_message': str,\n     'traceback': typing.List[notebook_error_reporter.error_event._traceback.TracebackDetailsType]}\n\nand `TracebackDetailsType.__annotations__` is:\n\n    {'filename': str, 'fun_name': str, 'lineno': int}\n\nThe server does keep track of IP addresses to prevent vandalism,\nbut it's the IP address of the colab notebook. No JavaScript call is present to get the browser IP.\n(Annoyingly I'd love to do some JS calls to get some useful data, but best not obfuscate!)\nTherefore the IP will be in the range: 142.250.0.0 - 142.251.255.255.\n\nTo see the errors sent:\n\n```python\nes.retrieve_errors()\n```\n\nI am unsure if to allow everyone to see the sessions and errors, hence the `max_transparency` argument.\nFor an internal server, this makes sense, but for a public one, revealing the session ids may \nresult in vandals adding errors to sessions randomly.\n\n## Colab\n\nColab runs on an ancient version of IPython (5.5, cf. 8.2).\nAs a result things are done a bit differently.\n\n`.enable` calls either `load_ipython_extension` or `monkeypatch_extension` depending on the ipython version.\nThe former adds an event callback function (`shell.events.callbacks`), which is all proper and good.\nThe latter monkeypatches a decorating function around `shell.showtraceback`, which knows about the\nErrorEvent/ErrorSlack/ErrorServer/ErrorStorage instance, \nbecause it was created in a factory method of the latter. As it does not have a result object,\nit does not know what is the excecution count nor the first line of the cell.\n\n```python\n!pip install notebook-error-reporter\nfrom notebook_error_reporter import ErrorServer\n\nes = ErrorServer(url='https://errors.matteoferla.com', notebook='test')\nes.enable()\n# raise an error:\nraise ValueError('Foo')\n```\nThe latter error can be seen to have been sent successfully:\n```python\nes.retrieve_errors()\n```\n\nHowever as I am not a Seattle/Arlington multinational\nhellbent on collecting data, I like to make it opt in:\n```python\n#@markdown Send error messages to errors.matteoferla.com for logging?\n#@markdown See [notebook-error-reporter repo for more](https://github.com/matteoferla/notebook-error-reporter)\nreport_errors = False #@param {type:\"boolean\"}\nif report_errors:\n    !pip install notebook-error-reporter\n    from notebook_error_reporter import ErrorServer\n\n    es = ErrorServer(url='https://errors.matteoferla.com', notebook='fragmenstein')\n    es.enable()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matteoferla/remote-notebook-error-collection",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "notebook-error-reporter",
    "package_url": "https://pypi.org/project/notebook-error-reporter/",
    "platform": null,
    "project_url": "https://pypi.org/project/notebook-error-reporter/",
    "project_urls": {
      "Homepage": "https://github.com/matteoferla/remote-notebook-error-collection"
    },
    "release_url": "https://pypi.org/project/notebook-error-reporter/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A error notification system for remote Jupyter notebooks",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15941256,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c44897bd5f2287835352bac2260740a1de543d4ce7675a88aeb27f36ca6f9b10",
          "md5": "6dd33711ddcf8a05cea3809a54b84330",
          "sha256": "974139d65eeb0f446a10eb78e388176101951861400f1df8825a5a20896223f4"
        },
        "downloads": -1,
        "filename": "notebook_error_reporter-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6dd33711ddcf8a05cea3809a54b84330",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12288,
        "upload_time": "2022-04-13T19:21:21",
        "upload_time_iso_8601": "2022-04-13T19:21:21.389204Z",
        "url": "https://files.pythonhosted.org/packages/c4/48/97bd5f2287835352bac2260740a1de543d4ce7675a88aeb27f36ca6f9b10/notebook_error_reporter-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3bb1d3bf12a3fa78d58b0cc2e78281ce9d5024258fa64526346cecab8639192",
          "md5": "1af38b3d1ae4f1e6cbe3b487ff8c0ada",
          "sha256": "fab611d75b9a412a03d9c306b6282a60ea43c36ada8d3cbea2e9d6597113597b"
        },
        "downloads": -1,
        "filename": "notebook-error-reporter-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1af38b3d1ae4f1e6cbe3b487ff8c0ada",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14878,
        "upload_time": "2022-04-13T19:21:23",
        "upload_time_iso_8601": "2022-04-13T19:21:23.260953Z",
        "url": "https://files.pythonhosted.org/packages/d3/bb/1d3bf12a3fa78d58b0cc2e78281ce9d5024258fa64526346cecab8639192/notebook-error-reporter-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc9b557ac629be623b5d8ef1b8238779844242062cc9f4d76e1a77e50104c77a",
          "md5": "aede457a5470d2e0bc0fdc841f7567a6",
          "sha256": "85c3b5964c5a0dca39cd028439fbdd2db31db8a5ba18b72047210b3a0c82e7ee"
        },
        "downloads": -1,
        "filename": "notebook-error-reporter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aede457a5470d2e0bc0fdc841f7567a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16892,
        "upload_time": "2022-11-30T11:29:44",
        "upload_time_iso_8601": "2022-11-30T11:29:44.891152Z",
        "url": "https://files.pythonhosted.org/packages/dc/9b/557ac629be623b5d8ef1b8238779844242062cc9f4d76e1a77e50104c77a/notebook-error-reporter-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc9b557ac629be623b5d8ef1b8238779844242062cc9f4d76e1a77e50104c77a",
        "md5": "aede457a5470d2e0bc0fdc841f7567a6",
        "sha256": "85c3b5964c5a0dca39cd028439fbdd2db31db8a5ba18b72047210b3a0c82e7ee"
      },
      "downloads": -1,
      "filename": "notebook-error-reporter-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "aede457a5470d2e0bc0fdc841f7567a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16892,
      "upload_time": "2022-11-30T11:29:44",
      "upload_time_iso_8601": "2022-11-30T11:29:44.891152Z",
      "url": "https://files.pythonhosted.org/packages/dc/9b/557ac629be623b5d8ef1b8238779844242062cc9f4d76e1a77e50104c77a/notebook-error-reporter-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}