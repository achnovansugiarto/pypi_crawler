{
  "info": {
    "author": "",
    "author_email": "Benedict Paten <bpaten@ucsc.edu>, Glenn Hickey <glenn.hickey@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# The TAF File Format\n\nThis is a specification for a \"transposed alignment format\", or maybe \"terrific alignment format\" (.taf). The idea\nis to describe a multiple sequence alignment as a series of columns, one per line, with bases in the\ncolumns optionally run-length encoded, and row coordinates given as needed after the bases in each column.\nWhere coordinates are not given it is assumed the coordinates continue from the previous column.\nUser defined tags, as key:value pairs, are also included to allow the alignment\ncolumns to be annotated.\n\nThe format supports line based indexing for rapid retrieval of any column or contiguous sequence of columns from\nthe file. The format is intentionally simple but should prove quite space efficient for large alignments \n(see stats below).\n\nIts key potential benefits over the MAF format are that:\n* it does not suffer the same issue with fragmentation as the number of sequences grows (there are no blocks!),\n* is often less verbose (particularly for large alignments), \n* is very easy to index, as each column of the alignment is a single line, \n* it supports extensible column annotations.\n\nThe format is composed of a header and then a sequence of columns.\nTokens are separated by white-space. The syntax is defined as follows:\n\n    .taf -> header '\\n' columns\n    \n    header -> '#taf' tags\n    \n    tags -> tag tags\n         -> ''   \n    \n    tag -> key':'value\n    \n    key -> alphanumerical string\n    value -> alphanumerical string'\n\n(The header is therefore just a possibly empty sequence of key:value pairs)\n\n    columns -> column '\\n' columns\n               column 'n'\n    \n    column -> bases coordinates_column tag_string \n           -> bases coordinates_column\n           -> bases tag_string\n           -> bases\n\n(Columns are encoded, one per line. Each column encodes an alignment of the\nbases in the column (see below) and then some optional coordinates and tags.)\n\n    tag_string -> '#' tags\n\n    bases -> run_length_encoded_bases\n          -> bases\n\n    run_length_encoded_bases -> base count run_length_encoded_bases\n                             -> base count\n    \n    count -> integer > 0\n    \n    base -> alphabet character or '-' or '*' ([A-Z,a-z,-,*])\n\n    bases -> string or alphabet characters or '-' or '*' ([A-Z,a-z,-,*]+)\n\n(Aligned bases are either a run-length encoded\nrepresentation or simply as a sequence of aligned characters. To specify\nwhich format to use we use the tag \"run_length_encode_bases=1\" in the header.\nIf \"run_length_encode_bases=0\" or the tag is not specified the format is\nto NOT use run length encoding.)\n\n    coordinates_column -> ';' coordinates\n    \n    coordinates -> coordinate_operation coordinates\n                -> ''\n    \n    coordinate_operation -> 'i' row coordinate\n                         -> 'd' row\n                         -> 's' row coordinate\n                         -> 'g' row gap_length\n                         -> 'G' row gap_string\n\n(The 'i' stands for insertion, the 'd' for deletion, the 's' for substitution, 'g' and 'G' for gap. These operations\nallow us to update the coordinates of the sequences as we go, and work as their name suggests. Rows are indexed from zero.\nThe operations are affected in order, so, for example, inserting a row at position i will shift all remaining column indices by one place\nfor any operations that are specified after an insertion.\nThe substitute operation can be used to change the coordinates for a sequence in a row, or it can be used to periodically repeat\ncoordinates to prevent needing to scan back more than N rows to find the coordinates of a row.\nUsing the 'g' gap operation can be used to increment the coordinate of a sequence by a specified amount and is useful to inserting\nlong substrings. Using the 'G' instead of 'g' allows one to instead specify the gap substring.)\n\n    row -> integer >= 0\n    \n    gap_length -> integer >= 0\n    \n    gap_string -> alphabet string ([A-Z,a-z]*)\n    \n    coordinate -> sequence_name offset strand sequence_length\n    \n    sequence_name -> string without white space\n    \n    offset -> integer >= 0\n    \n    strand -> '+'\n           -> '-'\n\n    sequence_length -> integer >= 0\n\nCoordinates in TAF use the same conventions as MAF format. That is,\nzero-based, half-open coordinates, with a negative strand meaning that \ncoordinates are with respect to the reverse complement sequence. The \ninclusion of the sequence_length in the coordinate, while bloating,\ndoes make it easy to convert back and forth between maf and taf.\n\n# Taf Example\n\nThe following shows by example the translation between the MAF format and TAF format.\n\nThe MAF file (602 bytes):\n\n    ##maf version=1 scoring=N/A\n    \n    a\n    s       simDog.chr6     437451  11      +       593897  CCCGTCAGTGT\n    s       simHuman.chr6   446327  11      +       601863  TCCGCCAAGGT\n    s       simMouse.chr6   460751  11      +       636262  TTCATCAGAGT\n    s       simRat.chr6     470339  11      +       647215  TTCATTAGGGT\n    \n    a\n    s       simCow.chr6     445326  8       +       602619  TTTTCCCA\n    s       simDog.chr6     437462  8       +       593897  TT-TTCCG\n    s       simHuman.chr6   446338  8       +       601863  TTCTTCCG\n    s       simMouse.chr6   460762  8       +       636262  TTTTACCG\n    s       simRat.chr6     470355  8       +       647215  TTTTACCG\n\nThe corresponding TAF file (265 bytes):\n\n    #taf version:1 scoring:N/A\n    CTTT ; i 0 simDog.chr6 437451 + i 1 simHuman.chr6 446327 + i 2 simMouse.chr6 460751 + i 3 simRat.chr6 470339 11\n    CCTT\n    CCCC\n    GGAA\n    CCCT\n    AAAA\n    GAGG\n    TGAG\n    GGGG\n    TTTT\n    TTTTT ; i 0 simCow.chr6 445326 + g 4 5\n    TTTTT\n    T-CTT\n    TTTTT\n    CTTAA\n    CCCCC\n    CCCCC\n    AGGGG\n\n# Installing Taf\n\nDo build this repo clone the repo as follows and then make:\n\n    git clone https://github.com/benedictpaten/taf.git --recursive\n    cd taf && make\n\nTo test the installation do:\n\n    make test\n\nThis will run the unitests. You should see that all tests pass okay. You will \nthen want to add the taf/bin directory to your path. \n\n# Taf Utilities\n\nThis repo contains various tools for working with taf files and converting to and \nfrom maf. For example, to convert a maf file to a taf use:\n\n    maf_to_taf -i MAF_FILE\n\nTo go back to maf use:\n\n    taf_to_maf -i TAF_FILE\n\nThere is also a utility for adding sequences between blocks to a taf file\n\n    taf_add_gap_bases SEQ_FILES -i TAF_FILE\n\nAnd finally, a utility to merge together short alignment blocks to create a more\n\"normalized\" maf/taf file:\n \n    taf_norm\n\nFor example, to normalize a maf file do the following:\n\n    maf_to_taf -i MAF_FILE | taf_add_gap_bases SEQUENCE_FILES | taf_norm -k > out.maf\n\nThe maf_to_taf converts MAF_FILE into taf, taf_add_gap_bases adds in missing\nunaligned sequences between maf blocks and taf_norm then merges together the blocks. The \n-k option causes the output to be in maf format.\n\n# C Library\n\nThere is also a simple C library for working with taf/maf files. See taf.h in the\ninc directory.\n\n# Comparison Stats\n\nUsing the file:  https://hgwdev.gi.ucsc.edu/~markd/cactus/cactus241way/ucscNames/chr3_KI270777v1_alt.maf\n(A randomly chosen alignment part of the Cactus 241-way alignment).\nRunning the command:\n\n    maf_to_taf -i ./chr3_KI270777v1_alt.maf > ./chr3_KI270777v1_alt.taf\n\nTook: \n    \n    22.29s user 0.34s system 99% cpu 22.685 total\n\nAnd results in:\n\n    -rw-r--r--   1 benedictpaten  staff  753714843 Dec 15  2020 chr3_KI270777v1_alt.maf\n    -rw-r--r--   1 benedictpaten  staff   50840928 Sep 15 11:28 chr3_KI270777v1_alt.taf\n\nThat is a 14.8x compression. Gzipped:\n\n    -rw-r--r--   1 benedictpaten  staff  89574699 Dec 15  2020 chr3_KI270777v1_alt.maf.gz\n    -rw-r--r--   1 benedictpaten  staff  14038446 Sep 15 11:28 chr3_KI270777v1_alt.taf.gz\n\nThe .taf.gzip is 6.39x smaller than the .maf.gz and 53x smaller than the .maf\nThe .taf is 1.9x smaller than the .maf.gz.\n\nNormalizing the maf file using the command:\n\n    maf_to_taf -i ./chr3_KI270777v1_alt.maf | taf_norm -k > ./chr3_KI270777v1_alt.norm.maf\n\nTook: \n\n    23.60s user 0.23s system 97% cpu 24.460 total\n\nResulting in:\n\n    -rw-r--r--   1 benedictpaten  staff  753714843 Dec 15  2020 chr3_KI270777v1_alt.maf\n    -rw-r--r--   1 benedictpaten  staff  156736026 Sep 15 11:35 chr3_KI270777v1_alt.norm.maf\n    -rw-r--r--   1 benedictpaten  staff   50840928 Sep 15 11:28 chr3_KI270777v1_alt.taf\n\nSo the normalized maf is 4.8x smaller than the maf and 3x larger than the taf.\nThe number of blocks in the maf file is also reduced as blocks are merged together by the \nnormalization process:\n\n    taf % grep '^a' ./chr3_KI270777v1_alt.maf | wc -l                                                                    \n        45924\n    taf % grep '^a' ./chr3_KI270777v1_alt.norm.maf | wc -l\n        7157\n\nWhich is a 6.97x reduction in block number.\n\n# TODOs\n\nThings that are ongoing:\n\n* Make taf_add_gap_bases use indexed fastas to avoid loading everything into memory\n* Create an index format for random access to TAF files\n* Add a binary/compressed version\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "taffy",
    "package_url": "https://pypi.org/project/taffy/",
    "platform": null,
    "project_url": "https://pypi.org/project/taffy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ComparativeGenomicsToolkit/taf/issues",
      "Homepage": "https://github.com/ComparativeGenomicsToolkit/taf"
    },
    "release_url": "https://pypi.org/project/taffy/0.0.1/",
    "requires_dist": [
      "cffi (>=1.0.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "For manipulating taf and maf format alignments",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15907729,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "821cd23f402ea44359de35d308954dd88438f73b2b2833fff87f16d8a507f36b",
          "md5": "87b58495dda2cdae20ee9d3596526aec",
          "sha256": "8a4e9bbf728d53cdfd76a22fa805648b4293a236f7e732e3cf24ee10f9fcf56d"
        },
        "downloads": -1,
        "filename": "taffy-0.0.1-cp39-cp39-macosx_13_0_arm64.whl",
        "has_sig": false,
        "md5_digest": "87b58495dda2cdae20ee9d3596526aec",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 265485,
        "upload_time": "2022-11-27T23:37:48",
        "upload_time_iso_8601": "2022-11-27T23:37:48.622765Z",
        "url": "https://files.pythonhosted.org/packages/82/1c/d23f402ea44359de35d308954dd88438f73b2b2833fff87f16d8a507f36b/taffy-0.0.1-cp39-cp39-macosx_13_0_arm64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c9b226255bcd20b9e9c6a088ce663e14d0c5770159e8558ea6af217a632b68a",
          "md5": "04eaa7f11051829f2aa81ce87041787d",
          "sha256": "379a2caf47d1aaeaefb4936bb1696006589f257bfce65c0652bcad78f2bf4fc8"
        },
        "downloads": -1,
        "filename": "taffy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "04eaa7f11051829f2aa81ce87041787d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 176456,
        "upload_time": "2022-11-27T23:37:50",
        "upload_time_iso_8601": "2022-11-27T23:37:50.615284Z",
        "url": "https://files.pythonhosted.org/packages/8c/9b/226255bcd20b9e9c6a088ce663e14d0c5770159e8558ea6af217a632b68a/taffy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "821cd23f402ea44359de35d308954dd88438f73b2b2833fff87f16d8a507f36b",
        "md5": "87b58495dda2cdae20ee9d3596526aec",
        "sha256": "8a4e9bbf728d53cdfd76a22fa805648b4293a236f7e732e3cf24ee10f9fcf56d"
      },
      "downloads": -1,
      "filename": "taffy-0.0.1-cp39-cp39-macosx_13_0_arm64.whl",
      "has_sig": false,
      "md5_digest": "87b58495dda2cdae20ee9d3596526aec",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7",
      "size": 265485,
      "upload_time": "2022-11-27T23:37:48",
      "upload_time_iso_8601": "2022-11-27T23:37:48.622765Z",
      "url": "https://files.pythonhosted.org/packages/82/1c/d23f402ea44359de35d308954dd88438f73b2b2833fff87f16d8a507f36b/taffy-0.0.1-cp39-cp39-macosx_13_0_arm64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c9b226255bcd20b9e9c6a088ce663e14d0c5770159e8558ea6af217a632b68a",
        "md5": "04eaa7f11051829f2aa81ce87041787d",
        "sha256": "379a2caf47d1aaeaefb4936bb1696006589f257bfce65c0652bcad78f2bf4fc8"
      },
      "downloads": -1,
      "filename": "taffy-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "04eaa7f11051829f2aa81ce87041787d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 176456,
      "upload_time": "2022-11-27T23:37:50",
      "upload_time_iso_8601": "2022-11-27T23:37:50.615284Z",
      "url": "https://files.pythonhosted.org/packages/8c/9b/226255bcd20b9e9c6a088ce663e14d0c5770159e8558ea6af217a632b68a/taffy-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}