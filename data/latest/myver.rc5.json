{
  "info": {
    "author": "Mark Bromell",
    "author_email": "markbromell.business@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MyVer\n\n[![Build Status][workflow-badge]][workflow-link]\n[![Coverage][coverage-badge]][coverage-link]\n[![Version][version-badge]][version-link]\n[![MIT License][license-badge]](LICENSE.md)\n\n---\n\nMyVer is a tool to help you manage and alter your project's version\nnumber. You can define your own configuration for your version, MyVer\ngives you complete freedom to enforce your own version spec, make it as\nsimple or as complex as you need it to be.\n\n# Table of Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Configuration](#configuration)\n  - [YAML Syntax](#yaml-syntax)\n    - [`files`](#files)\n    - [`files[*].path`](#filespath)\n    - [`files[*].patterns`](#filespatterns)\n    - [`parts`](#parts)\n    - [`parts.<part>`](#partspart)\n    - [`parts.<part>.value`](#partspartvalue)\n    - [`parts.<part>.requires`](#partspartrequires)\n    - [`parts.<part>.prefix`](#partspartprefix)\n    - [`parts.<part>.identifier`](#partspartidentifier)\n    - [`parts.<part>.identifier.strings`](#partspartidentifierstrings)\n    - [`parts.<part>.identifier.start`](#partspartidentifierstart)\n    - [`parts.<part>.number`](#partspartnumber)\n    - [`parts.<part>.number.label`](#partspartnumberlabel)\n    - [`parts.<part>.number.label-suffix`](#partspartnumberlabel-suffix)\n    - [`parts.<part>.number.start`](#partspartnumberstart)\n    - [`parts.<part>.number.show-start`](#partspartnumbershow-start)\n- [Examples](#examples)\n  - [SemVer](#semver)\n    - [Standard bumping scenarios](#standard-bumping-scenarios)\n    - [Bumping with non-required child](#bumping-with-non-required-child)\n    - [Part with a required child](#part-with-a-required-child)\n    - [Value overriding](#value-overriding)\n    - [Resetting optional part](#resetting-optional-part)\n    - [Implicit children](#implicit-children)\n\n# Installation\n\nTo install MyVer you can use [pip](https://pypi.org/project/pip/), which\nwill download and install the \n[MyVer package from PyPi](https://pypi.org/project/myver/)\n\n```bash\npip install myver\n```\n\n# Usage\n\n```\nUsage: myver [OPTIONS]\n\nOptions:\n  -h, --help               Show this help message and exit\n  -b, --bump strings       Bump version parts\n      --config string      Config file path\n  -c, --current [strings]  Get the current version or version parts\n  -r, --reset strings      Reset version parts\n  -v, --verbose            Log more details\n```\n\n# Configuration\n\nThis section will describe the configurations YAML syntax. This is for a\ndetailed explanation of each attribute in the configuration. While\nexamples may be present in this section, it is also beneficial to refer\nto the [Examples](#examples) section to see full practical\nimplementations of the configuration YAML.\n\n## YAML Syntax\n\n### `files`\n\n*Optional*. A list of files to update when the version is changed. It\nwill only change references to the current version value by default.\n\nAn unwanted file change is possible if you are referencing the version\nof another project in a file that happens to have the same version\nstring as your project, then both instances of that version string will\nbe updated. So lets say your project's version is `3.6.8`\nand you are updating a file that is referencing `Python 3.6.8`, then by\ndefault the python version reference will be updated. Although these\nunwanted file updates can be avoided with further configuration.\n\n```yaml\nfiles:\n  - path: 'setup.py'\n    patterns:\n      - \"version='{{ version }}'\"\n  - path: '/project/__version__.py'\n```\n\n### `files[*].path`\n\nThe path to a file that you want to update with each version change.\nThis path can use\n[globbing](https://en.wikipedia.org/wiki/Glob_(programming)) so that you\ncan define a range of files to update.\n\n```yaml\nfiles:\n  - path: '/path/to/file.md'\n  - path: '/can/also/glob/*.txt'\n```\n\n### `files[*].patterns`\n\nList of regex patterns to use for updating a file. Any instance of a\nversion string will not be updated if it does not match a pattern. The\npattern regex strings must contain `{{ version }}` to parse the current\nversion into the pattern, this will be parsed first before the regex is\nutilised in searching for file updates. We need to include\n`{{ version }}` because this signifies the part of the string to change\nin a pattern match.\n\nIf `files[*].patterns` is not configured, it is assumed that the default\npattern match is just `{{ version }}`, meaning that any string in the\nfile that is equal to the current version will be updated.\n\n```yaml\nfiles:\n  - path: 'setup.py'\n    patterns:\n      - \"version='{{ version }}'\"\n```\n\n### `parts`\n\n*Required*. Collection of parts configured for your project's version.\nYou must define at least 1 [`parts.<part>`](#partspart) in this\ncollection.\n\n### `parts.<part>`\n\nThe configuration of an individual part in a version. You define the key\nof the part through the name of the YAML attribute, in the example\nbelow the key of our only part is `major`, you can name these keys\nwhatever you like, although you cannot have 2 parts with the same key\nname.\n\nThere are 2 types of parts -- identifier parts and number parts. An\nidentifier part is a string part that can have a value based on a range\nof strings, see [`parts.<part>.identifier`](#partspartidentifier).\nWhereas a number part is simply a positive integer that can be\nincremented. The number part is the default type if a type is not\nexplicitly configured.\n\n```yaml\nparts:\n  major:\n    value: 3\n ```\n\n### `parts.<part>.value`\n\nEach part configuration needs to define a value attribute in its spec.\nIf your part has no value then use `value: null`. Depending on the part\ntype, the value of the part can be a string or a number. All parts can\nalso be `null`.\n\n```yaml\nparts:\n  major:\n    value: 3\n  minor:\n    value: null\n  pre:\n    value: 'beta'\n    identifier:\n      strings: [ 'beta' ]\n ```\n\n### `parts.<part>.requires`\n\nDefines a part that is required to exist by another part. It means that\nif a part has a non-null value, and it requires another part, the part\nthat it requires cannot be null. In the example below we see that\n`major` requires `minor`, this means that `minor` can only ever be null\nif `major` is null. So if `major` has a non-null value, then `minor`\nmust also have a non-null value.\n\n```yaml\nparts:\n  major:\n    value: 3\n    requires: 'minor'\n  minor:\n    value: 9\n ```\n\n### `parts.<part>.prefix`\n\nA string to display before the part. In the example below we have part\n`major` and `minor`, if we parse this version we will get `3.9`, where\nthe `.9` is the `minor` part where the `.` is the prefix of the part's\nvalue.\n\n```yaml\nparts:\n  major:\n    value: 3\n  minor:\n    value: 9\n    prefix: '.'\n ```\n\n### `parts.<part>.identifier`\n\nWhen this is configured on a part, it signifies that the part value is\na string. *You cannot configure `parts.<part>.identifier` and\n[`parts.<part>.number`](#partspartnumber) at the same time, they are\nmutually exclusive.*\n\nYou would use this when you have multiple possible strings for a part\nthat have a chronological order between each string. A common example\nare the pre-release identifiers of `alpha`, `beta`, and `rc`.\n\n### `parts.<part>.identifier.strings`\n\nA list of strings to be used in the part's value, if you have configured\n[`parts.<part>.identifier`](#partspartidentifier) for a part, then this\nlist of strings needs to be configured. The order of the strings matter\nas the bumping of an identifier part will move through the list in the\norder it is defined.\n\n```yaml\nparts:\n  pre:\n    identifier:\n      strings:\n        - 'alpha'\n        - 'beta'\n        - 'rc'\n```\n\n### `parts.<part>.identifier.start`\n\nThe starting value for the part. The start value is the value that the\npart will use when it is bumped from a `null` value, or when it is\nreset. By default, if this is not configured explicitly, the start value\nis assumed to be the first value in the\n[`parts.<part>.identifier.strings`](#partspartidentifierstrings) list.\n\n```yaml\nparts:\n  pre:\n    value: 'beta'\n    identifier:\n      strings:\n        - 'alpha'\n        - 'beta'\n        - 'rc'\n      start: 'beta'\n```\n\n### `parts.<part>.number`\n\nThis will configure a part to be a positive integer. *You cannot\nconfigure [`parts.<part>.identifier`](#partspartidentifier) and\n`parts.<part>.number` at the same time, they are mutually exclusive.*\n\n### `parts.<part>.number.label`\n\nSometimes you will want a label for a number part. In the example below\nwe have a `build` part, instead of just using a number to represent this\npart, you may instead want to parse it to something like `build4`, and\nthis is what the example below achieves.\n\n```yaml\nparts:\n  build:\n    value: 4\n    number:\n      label: 'build'\n```\n\n### `parts.<part>.number.label-suffix`\n\nA label may have a suffix (characters after the label) in order to\nseparate the label with the number. In the example below we see the `.`\nsuffix on a `build` label, which would give something like `build.4`\nwhen it is parsed.\n\n```yaml\nparts:\n  build:\n    value: 4\n    number:\n      label: 'build'\n      label-suffix: '.'\n```\n\n### `parts.<part>.number.start`\n\nThis defines the starting value for a number part, this the value that\nthe part will use when it is bumped out of a `null` value, or if it is\nreset. By default, it is assumed that the start value of a number part\nis `0` if it is not configured explicitly.\n\n```yaml\nparts:\n  build:\n    value: 4\n    number:\n      start: 1\n```\n\n### `parts.<part>.number.show-start`\n\nSometimes you may not want to show the first value of a number part. In\nthe example below we have a `dev` part, commonly you may see a version\nlike `3.4.5+dev` which would define the first dev instance of a version,\nthen the second dev instance would look like this `3.4.5+dev.2`. By\ndefault, this value will be assumed to be `true` if it is not\nconfigured explicitly.\n\n```yaml\nparts:\n  dev:\n    value: 1\n    number:\n      label: 'dev'\n      label-suffix: '.'\n      start: 1\n      show-start: false\n```\n\n# Examples\n\n## SemVer\n\nThis file handles how the version is formed. It will store the current\nvalues of each part, and it will also define the configuration of each\npart.\n\n```yaml\nparts:\n  major:\n    value: 3\n    requires: minor\n\n  minor:\n    value: 9\n    prefix: '.'\n    requires: patch\n\n  patch:\n    value: 2\n    prefix: '.'\n\n  pre:\n    value: null\n    prefix: '-'\n    requires: prenum\n    identifier:\n      strings: [ 'alpha', 'beta', 'rc' ]\n\n  prenum:\n    prefix: '.'\n    value: null\n    number:\n      start: 1\n\n  build:\n    value: null\n    prefix: '+'\n    number:\n      label: 'build'\n      label-suffix: '.'\n      start: 1\n\n  dev:\n    value: null\n    prefix: '+'\n    number:\n      label: 'build'\n      label-suffix: '.'\n      start: 1\n      show-start: false\n```\n\n### Preamble\n\nIn each of these scenarios we will show a snippet which is demonstrating\nhow you may interact with MyVer in a terminal environment. There may\nthen be a description of what is happening in the snippet demonstration\nbelow each snippet.\n\n### Standard bumping scenarios\n\n```\n➜ myver --current\n3.8.2\n\n➜ myver --bump patch\n3.8.2  >>  3.8.3\n\n➜ myver --bump minor\n3.8.3  >>  3.9.0\n```\n\n### Custom parsing of the version\n\n```\n➜ myver --current\n3.8.2\n\n➜ myver --current major minor\n3.8\n```\n\nSometimes you may want to parse the version with specific parts only.\nThere are many case by case reasons for this, but one case is to use\nthis for docker image tagging. In the example above if we do not specify\nwhat parts to parse then the whole version is parsed. Although we can\nspecify the parts to parse as seen above with `major` and `minor` being\nparsed in the second command, resulting in `3.8`.\n\n```\n➜ myver --current major minor prenum\n3.8\n\n➜ myver --bump pre\n3.8.2  >>  3.8.2-alpha.1\n\n➜ myver --current major minor prenum\n3.8.2-alpha.1\n```\n\nWe can also include a part that may not be set. In the example above\nwe include `prenum` part to be parsed, although it is not set which\nmeans it is ignored, so the remaining parts that are specified **and**\nset will be parsed.\n\nAfter setting the `prenum` value though, running the same command will\nresult in parsing every part that is set between `minor` and `prenum`.\nWhile our command only specifies `major`, `minor` and `prenum`, it does\nnot mean to only parse these values, think of them as ranges instead,\nso we are parsing `major` **to** `minor`, and then `minor` **to**\n`prenum`.\n\n### Bumping with non-required child\n\n```\n➜ myver --current\n3.8.2\n\n➜ myver --bump patch dev\n3.8.2  >>  3.8.3+dev\n```\n\nIn this example we show how the part ordering matters in the config. We\ncan see that the `dev` part is configured after the `patch` part, and\nthe `patch` part does not require any other part. This means that `dev`\nis a valid child for the `patch` part.\n\n```\n➜ myver --current\n3.8.3+dev\n\n➜ myver --bump patch\n3.8.3+dev  >>  3.8.4\n```\n\nIt is also important to keep in mind that non-required child parts will\nbe removed when its parent is bumped if you do not ask to keep the child\npart. In the above example we bump `patch` and the `dev` part gets\nremoved, if we wanted to have the `dev` part in the bumped version then\nwe would have to be more explicit and use `myver --bump patch dev`.\n\n### Part with a required child\n\n```\n➜ myver --current\n3.8.2\n\n➜ myver --bump patch pre\n3.8.2  >>  3.8.3-alpha.1\n```\n\nWe see that specifying `pre` to be brought along with the bump of\n`patch`, also brings along `prenum`. This is because `prenum` is\nconfigured to be required by `pre`.\n\nAlso note that having a null part and attempting to bump it will set it\nat its starting value, and it will bring along its required child if it\nhas one. A starting value by default is the first value in the list of\nits `strings` in the `identifier` configuration. In this case we see\nthat `pre` starts with the value of `alpha`. If it is a number part then\nthe start value is `0` by default.\n\n### Value overriding\n\n```\n➜ myver --current\n3.8.2\n\n➜ myver --bump minor pre=beta\n3.8.2  >>  3.9.0-beta.1\n\n➜ myver --bump patch=5\n3.9.0-beta.1  >>  3.9.5\n```\n\nSometimes you may not want to use the start value of a string part. Here\nwe see that `pre` is an identifier part (which is implied through having\nits `identifier` configuration). By providing the `'='` character and a\nvalid identifier directly after `pre`, it will use that identifier value\nfor the `pre` part, in this case it is `beta`, which is skipping\nthe `alhpa` value. It is important that you specify a part value that is\nvalid (i.e. it is in the `strings` list in the `identifier`\nconfiguration of the part)\n\nWe can also do the same for number parts, above we see that we used\nvalue overriding to set `patch` to `5`. For a number part, you cannot\nset the value to a negative number, and it cannot be a string either, it\nmust be an integer.\n\n### Resetting optional part\n\n```\n➜ myver --current\n3.9.0-beta.1+build.34\n\n➜ myver --reset pre\n3.9.0-beta.1+build.34  >>  3.9.0\n```\n\nYou may want to remove a part, this can easily be done with the\n`--reset` option. In the above scenario we see that resetting an\noptional part will also reset its descendants. Although we can keep a\ndescendant if we use `--bump`.\n\n```\n➜ myver --current\n3.9.0-beta.1+build.34\n\n➜ myver --reset pre --bump build\n3.9.0-beta.1+build.34  >>  3.9.0\n3.9.0  >>  3.9.0+build.1\n```\n\n### Implicit children\n\nThis may not even need to be explained as it is supposed to be\nintuitive, although I am including this section just to explain the\nimplicit children in a technical way so that people can debug any of\ntheir use cases which may be acting weird due to this feature. So you do\nnot have to understand this section to make use of implicit children, it\nshould hopefully come to you naturally.\n\n```\n➜ myver --current\n3.8.2+build.1\n\n➜ myver --bump dev\n3.8.2+build.1  >>  3.8.2+build.1-dev\n```\n\nThis is the clearest example of implicit children, in the config we do\nnot explicitly define the `dev` part to be required by the `buildnum`\npart, yet it becomes a child of `buildnum` when we add `dev` in a bump.\nThis is due to the order of the parts in the config, and also due to\n`dev` not being a required child of any other parts, so the only logical\nplace to put the `dev` part is after the last part that has a value,\nwhich in this case is `buildnum`.\n\n```\n➜ myver --current\n3.8.2+build.1-dev\n\n➜ myver --bump buildnum\n3.8.2+build.1-dev  >>  3.8.2+build.2\n```\n\nAlso keep in mind that implicit children will be removed if their parent\nis bumped. In the above example if you wanted to keep `dev` you need to\nbe explicit and use `myver --bump buildnum dev`\n\n```\n➜ myver --current\n3.8.2\n\n➜ myver --bump patch pre dev\n3.8.2  >>  3.8.3-alpha.1+dev\n```\n\nWhen bumping `patch` with `pre`, the `pre` will bring along its `prenum`\nchild since it is a required part. Although how did we bring along `dev`\nwith `prenum` if we do not specify `prenum` in the arguments of the\ncommand? In this scenario we can say that `dev` is implicitly a child of\nthe `prenum` part, and this happens due to `prenum` being a required\nchild of `pre`, and `prenum` is also defined before the `dev` part is\ndefined in the config, so it takes precedence.\n\nSo why are we allowed to ignore the `build` part? It's because\nthe `build` part is not required by any other part that is current set.\n\n```\n➜ myver --current\n3.8.3-alpha.1+dev\n\n➜ myver --bump build\n3.8.3-alpha.1+dev  >>  3.8.3-alpha.1+build.1\n```\n\nWhy did the `dev` part get removed in this case? This is because of the\nordering of the parts in the config. When an implicit parent-child\nrelationship is broken, the original child part is removed. In this\nscenario the `prenum` and `dev` implicit relationship is broken because\nadding the `build` and `buildnum` part introduces a new implicit child\nfor `prenum`. The `build` part is defined in the config before `dev` is\ndefined, so it takes precedence, which is why we do not get a new\nversion of something like `3.8.3-alpha.1+dev-build.1`\n\nThis scenario is a simple config, so it may be reasonable to think that\nwe should just keep the `dev` and make it a child of the `buildnum`\npart, but what happens in more complex scenarios with many possible\nimplicit children? Also, it is not a good thing to freely shift parts\naround as a side effect of bumping other parts, the command should\nexplicitly ask for a version outcome. In other words, having `dev` as a\nchild of one part, has no chronological relation with a different part\nhaving `dev` as its child, they are both dev instances of completely\ndifferent versions. Since `myver --bump build` does not explicitly ask\nfor `dev` to be in the bumped version, then we should not provide a\nversion that is not explicitly asked for.\n\n\n[version-badge]: https://img.shields.io/pypi/v/myver.svg?label=version\n\n[version-link]: https://pypi.python.org/pypi/myver/\n\n[coverage-badge]: https://coveralls.io/repos/github/mark-bromell/myver/badge.svg?branch=main\n\n[coverage-link]: https://coveralls.io/github/mark-bromell/myver?branch=main\n\n[workflow-badge]: https://github.com/mark-bromell/myver/workflows/Tests/badge.svg\n\n[workflow-link]: https://github.com/mark-bromell/myver/actions?query=workflow%3ATests\n\n[license-badge]: https://img.shields.io/badge/license-MIT-007EC7.svg\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mark-bromell/myver",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "myver",
    "package_url": "https://pypi.org/project/myver/",
    "platform": "",
    "project_url": "https://pypi.org/project/myver/",
    "project_urls": {
      "Homepage": "https://github.com/mark-bromell/myver",
      "Issue Tracker": "https://github.com/mark-bromell/myver/issues",
      "Source Code": "https://github.com/mark-bromell/myver"
    },
    "release_url": "https://pypi.org/project/myver/1.1.0/",
    "requires_dist": [
      "ruamel.yaml (==0.17.17)",
      "jinja2 (==3.0.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "Development tool for configuring and altering software versions.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12216502,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec587f5002c7c51c903cab7c403f8001c898aa84aaac0ce0b31043d76055183f",
          "md5": "13e6abb69ac5d7a9be59f986597670ac",
          "sha256": "cefe3b11697cc255359404b40c75135beb1a06294d7b95fe66eb0878f7b5920f"
        },
        "downloads": -1,
        "filename": "myver-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13e6abb69ac5d7a9be59f986597670ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11907,
        "upload_time": "2021-11-23T00:13:42",
        "upload_time_iso_8601": "2021-11-23T00:13:42.940984Z",
        "url": "https://files.pythonhosted.org/packages/ec/58/7f5002c7c51c903cab7c403f8001c898aa84aaac0ce0b31043d76055183f/myver-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fa9aa6c12d72d760cc9f151025408e442a06fe9d9428cb25d52aa3cad1457c0",
          "md5": "b2f35cdf27fa44362e5e6735fe31a557",
          "sha256": "2f6672d189eccb8bbaec27ff11632762fd05f8d13128c986b65ca8aea9c4372f"
        },
        "downloads": -1,
        "filename": "myver-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2f35cdf27fa44362e5e6735fe31a557",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14162,
        "upload_time": "2021-11-23T00:13:44",
        "upload_time_iso_8601": "2021-11-23T00:13:44.362822Z",
        "url": "https://files.pythonhosted.org/packages/2f/a9/aa6c12d72d760cc9f151025408e442a06fe9d9428cb25d52aa3cad1457c0/myver-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdd43b936b1190e72456dd74a20925f7e7eac9fabd505e062081303178cffce8",
          "md5": "f2b195b038ff6029048a6f5b63e56e40",
          "sha256": "69f29df63740b43bc6179d6326ea5abfbad7af69487a2d37bfcf37b01e55a0c2"
        },
        "downloads": -1,
        "filename": "myver-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2b195b038ff6029048a6f5b63e56e40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13204,
        "upload_time": "2021-11-24T23:33:11",
        "upload_time_iso_8601": "2021-11-24T23:33:11.872509Z",
        "url": "https://files.pythonhosted.org/packages/bd/d4/3b936b1190e72456dd74a20925f7e7eac9fabd505e062081303178cffce8/myver-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ee3366449e1ee598deda3f693b867ca68a6c93324b1329d30329d308309c874",
          "md5": "bc4808ef1080938ef6b652deed86273f",
          "sha256": "ef8ed407dbd81a2fbec321a722ea0ac0a86a816e1aa23333fb0c1ced63a19041"
        },
        "downloads": -1,
        "filename": "myver-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bc4808ef1080938ef6b652deed86273f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15689,
        "upload_time": "2021-11-24T23:33:12",
        "upload_time_iso_8601": "2021-11-24T23:33:12.904719Z",
        "url": "https://files.pythonhosted.org/packages/9e/e3/366449e1ee598deda3f693b867ca68a6c93324b1329d30329d308309c874/myver-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "983b8c2c73070e6df0d58005b3c601d7c1cfa1aeefd7cb11a730857e2aef537b",
          "md5": "205dbeebdb509572dc5e4dd1183fa192",
          "sha256": "18aaf77e40f3f46fe3f78cbabfc093a519e97b701566d4bb1e56a88f5c243423"
        },
        "downloads": -1,
        "filename": "myver-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "205dbeebdb509572dc5e4dd1183fa192",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13503,
        "upload_time": "2021-11-25T22:14:47",
        "upload_time_iso_8601": "2021-11-25T22:14:47.366007Z",
        "url": "https://files.pythonhosted.org/packages/98/3b/8c2c73070e6df0d58005b3c601d7c1cfa1aeefd7cb11a730857e2aef537b/myver-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2e07a8330bf921a78d2322c14d1541673ed36b4d90f36b023e4bed3912eac74",
          "md5": "e494c1360bfec6b8ee06055c428b7fe1",
          "sha256": "01157a81b669004a4e06fc9c2da568b32e3a066a9f156700924f5a8cee48ca53"
        },
        "downloads": -1,
        "filename": "myver-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e494c1360bfec6b8ee06055c428b7fe1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15853,
        "upload_time": "2021-11-25T22:14:48",
        "upload_time_iso_8601": "2021-11-25T22:14:48.768893Z",
        "url": "https://files.pythonhosted.org/packages/c2/e0/7a8330bf921a78d2322c14d1541673ed36b4d90f36b023e4bed3912eac74/myver-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ad690be0c03ee10157c5a1e60eaf3650a8314d393c126022f42b37521c6967c",
          "md5": "52aa2d4cd121ff86ecadeec6adbf0d75",
          "sha256": "e9fa423df57b5a4d082df39c134592f5fdd34e7232790d9f942375fcee59944c"
        },
        "downloads": -1,
        "filename": "myver-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52aa2d4cd121ff86ecadeec6adbf0d75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17340,
        "upload_time": "2021-12-03T23:42:09",
        "upload_time_iso_8601": "2021-12-03T23:42:09.652591Z",
        "url": "https://files.pythonhosted.org/packages/2a/d6/90be0c03ee10157c5a1e60eaf3650a8314d393c126022f42b37521c6967c/myver-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db806e7ff86870020cfe15eacd0ede7a5d561b072e74702b338653ed742ca3b8",
          "md5": "791d1c73354726a75c264e8f567b22b1",
          "sha256": "e45d24ecfca0cd83f92c5bf3b6613ea6da3389cffccddb35c15e1927b5372862"
        },
        "downloads": -1,
        "filename": "myver-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "791d1c73354726a75c264e8f567b22b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20974,
        "upload_time": "2021-12-03T23:42:11",
        "upload_time_iso_8601": "2021-12-03T23:42:11.336690Z",
        "url": "https://files.pythonhosted.org/packages/db/80/6e7ff86870020cfe15eacd0ede7a5d561b072e74702b338653ed742ca3b8/myver-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ca6485c7e58d139aefab67786af5f6bacecaa03dcf755d4a519c0c006794bed",
          "md5": "df0c163a4183fd98812c031cb5706de1",
          "sha256": "50567ee77dd04c9cd42ffeb4327881b3129edc3a9e8df2a7246b137b7f366ccd"
        },
        "downloads": -1,
        "filename": "myver-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df0c163a4183fd98812c031cb5706de1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18270,
        "upload_time": "2021-12-05T19:13:52",
        "upload_time_iso_8601": "2021-12-05T19:13:52.238918Z",
        "url": "https://files.pythonhosted.org/packages/8c/a6/485c7e58d139aefab67786af5f6bacecaa03dcf755d4a519c0c006794bed/myver-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d2982354974d6df608ab02abb57cb5da59ea4bb34c1aadc4edb18b447f0bed3",
          "md5": "efcf6763998cd5091b87b229bc941870",
          "sha256": "c8c1b1e52187fd63b97e13bb3e91c18601350ae76a48696ff9a751809cba6acf"
        },
        "downloads": -1,
        "filename": "myver-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efcf6763998cd5091b87b229bc941870",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22252,
        "upload_time": "2021-12-05T19:13:53",
        "upload_time_iso_8601": "2021-12-05T19:13:53.810555Z",
        "url": "https://files.pythonhosted.org/packages/1d/29/82354974d6df608ab02abb57cb5da59ea4bb34c1aadc4edb18b447f0bed3/myver-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ca6485c7e58d139aefab67786af5f6bacecaa03dcf755d4a519c0c006794bed",
        "md5": "df0c163a4183fd98812c031cb5706de1",
        "sha256": "50567ee77dd04c9cd42ffeb4327881b3129edc3a9e8df2a7246b137b7f366ccd"
      },
      "downloads": -1,
      "filename": "myver-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df0c163a4183fd98812c031cb5706de1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18270,
      "upload_time": "2021-12-05T19:13:52",
      "upload_time_iso_8601": "2021-12-05T19:13:52.238918Z",
      "url": "https://files.pythonhosted.org/packages/8c/a6/485c7e58d139aefab67786af5f6bacecaa03dcf755d4a519c0c006794bed/myver-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d2982354974d6df608ab02abb57cb5da59ea4bb34c1aadc4edb18b447f0bed3",
        "md5": "efcf6763998cd5091b87b229bc941870",
        "sha256": "c8c1b1e52187fd63b97e13bb3e91c18601350ae76a48696ff9a751809cba6acf"
      },
      "downloads": -1,
      "filename": "myver-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "efcf6763998cd5091b87b229bc941870",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 22252,
      "upload_time": "2021-12-05T19:13:53",
      "upload_time_iso_8601": "2021-12-05T19:13:53.810555Z",
      "url": "https://files.pythonhosted.org/packages/1d/29/82354974d6df608ab02abb57cb5da59ea4bb34c1aadc4edb18b447f0bed3/myver-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}