{
  "info": {
    "author": "Michael Wright",
    "author_email": "mjw@methodanalysis.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python singleton meta class (singleton-type)\n\n[![test](https://github.com/mwri/singleton-type/actions/workflows/test.yml/badge.svg)](https://github.com/mwri/singleton-type/actions/workflows/test.yml) [![codecov](https://codecov.io/gh/mwri/singleton-type/branch/main/graph/badge.svg?token=FZXOQQR4QM)](https://codecov.io/gh/mwri/singleton-type)\n\nOne of the problems with a lot of Python singleton implementations is they\nrequire you to do their thing. This is a true, and Pythonic, singleton\nimplementation which addresses the problem properly, allowing you to make\na class into a singleton without compromise, and without changing the way\nyou instantiate in any way.\n\nThe `Singleton` meta class alters the normal class/object behaviour to make the\ntarget class into a singleton, so that `__new__` and `__init__` will only be\ncalled once, and it is thread safe.\n\n## Standard use case\n\nThe meta class can be used like this:\n\n    class OneOfMe(metaclass=Singleton):\n        pass\n\n    assert id(OneOfMe()) == id(OneOfMe())\n\nIf a singleton class is inherited, all sub classes will be singletons (there\nwill be only one of each type), thus:\n\n    class AnotherOfMe(OneOfMe, metaclass=Singleton):\n        pass\n\n    assert id(AnotherOfMe()) == id(AnotherOfMe())\n    assert id(OneOfMe()) != id(AnotherOfMe())\n\nWhen creating a singleton in this fashion, the target class's `__new__` and\n`__init__` methods will be called only once, as you might expect. Any arguments\npassed to the constructor will be passed as normal, again as you might expect.\n\n## Advanced topics\n\nMost design scenarios calling for a singleton would not see the possibility that\nconstructor arguments would vary, but if they do, then the second set of\narguments will obviously be ineffective. This is almost never a problem because\nit would simply not be done when a singleton pattern is prescriptive. Some\ncases may arise where it is desirable to do something more interesting, such\nas a object/singleton per unique arguments... and this behaviour can be easily\nimplemented by providing some additional methods.\n\nThere are three such methods, and your target class must implement all or none\nof them.\n\nFirst `singleton_ref`, this class method is passed the constructor arguments\nand must return the existing singleton object, or `None` if not instantiated\nyet. The implementation need not be thread safe, the over all operation will\nstill be thread safe regardless.\n\nSecond `singleton_set_ref`, this class method is passed the object followed\nby the constructor arguments, and must SET the singleton object to the object\ngiven (such that `singleton_ref` will return it next time it is called). A\nlock will be acquired before this class method is called in order to protect\nthread safety.\n\nLast `singleton_detach_ref`, this is an object method rather than a class\nmethod, passed no arguments beyond the mandatory `self`, and it must undo\n`singleton_set_ref` such that there is no longer a singleton in effect (there\nmay still be references to the previous singleton object of course).\nThis is an object method rather than a class method so that the detach may\ndepend on object state than the class itself.\n\nIt should be clear then why all or none of these methods must be implemented\nby the target class, their operation must work in tandem and of necessity will\nentirely depend on the differential required behaviour.\n\nThe default implementations of these methods will simply get, set and delete\nan attribute on the class. Here's an example which provides for a different\nobject for different arguments (instead of the default different only for\ndifferent classes):\n\n    class ObjectCache(metaclass=Singleton):\n        _cache = {}\n\n        def __init__(self, id):\n            self._id = id\n\n        def __new__(cls, id):\n            return super().__new__(cls)\n\n        @classmethod\n        def singleton_ref(cls, id):\n            return cls._cache[id] if id in cls._cache else None\n\n        @classmethod\n        def singleton_set_ref(cls, obj, id):\n            cls._cache[id] = obj\n\n        def singleton_detach_ref(self):\n            del type(self)._cache[self._id]\n\nHere a `_cache` class attribute is used to retain all instances, one for each\nunique ID passed to the constructor, and the three singleton methods provide\nthe required implementation for this.\n\nIn this case then ObjectCache('foo') will always yield the same object, and\nObjectCache('bar') will always yield the same object, but the \"foo\" and \"bar\"\nobjects will be different to each other.\n\nThe intent here is that the mapping from the parameter domain (class being a\nparameter of course) to the set of instances, can governed in any\nway desired. Although a less likely requirement, the number of instances can\nbe reduced as well as expanded, so for example the following would cause all\nthe instances of a class and any instances of any sub class, to be a singleton\ntogether, so there would only ever be one instance for all the classes:\n\n    class SuperClass(metaclass=Singleton):\n        _singleton_ref = None\n\n        @classmethod\n        def singleton_ref(cls):\n            return SuperClass._singleton_ref\n\n        @classmethod\n        def singleton_set_ref(cls, obj):\n            SuperClass._singleton_ref = obj\n\n        def singleton_detach_ref(self):\n            SuperClass._singleton_ref = None\n\n    class SubClass(SuperClass):\n        pass\n\n    assert id(SubClass()) == id(SuperClass())\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mwri/singleton-type",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "singleton-type",
    "package_url": "https://pypi.org/project/singleton-type/",
    "platform": null,
    "project_url": "https://pypi.org/project/singleton-type/",
    "project_urls": {
      "Homepage": "https://github.com/mwri/singleton-type"
    },
    "release_url": "https://pypi.org/project/singleton-type/0.0.5/",
    "requires_dist": [
      "black (==22.3.0) ; extra == 'dev'",
      "coverage (==6.3.2) ; extra == 'dev'",
      "isort (==5.10.1) ; extra == 'dev'",
      "mypy (==0.961) ; extra == 'dev'",
      "pytest (==7.1.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Singleton meta class implementation",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14179049,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "999ce547806563d6d60ca4faff8c17d9d262a471579857d35648199b4f679765",
          "md5": "ba5b5cc13bcfd5ea78af03ee60f6da1e",
          "sha256": "9ff74c7ba5339756b41a1bc441a79b0517110d4ba3ea5bc3f82f1bcb583a2aab"
        },
        "downloads": -1,
        "filename": "singleton_type-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba5b5cc13bcfd5ea78af03ee60f6da1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6567,
        "upload_time": "2022-04-07T22:00:13",
        "upload_time_iso_8601": "2022-04-07T22:00:13.274700Z",
        "url": "https://files.pythonhosted.org/packages/99/9c/e547806563d6d60ca4faff8c17d9d262a471579857d35648199b4f679765/singleton_type-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "004b54820228ca7650331de93dc289c234733024ae6b8206a7433d11bc6fd479",
          "md5": "869164340df483fb6826ee8539f724e2",
          "sha256": "4e351d314c451dd00fd38be564ba8370c0851853a9ad81cd9c1840ab267e116a"
        },
        "downloads": -1,
        "filename": "singleton-type-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "869164340df483fb6826ee8539f724e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6617,
        "upload_time": "2022-04-07T22:00:15",
        "upload_time_iso_8601": "2022-04-07T22:00:15.233670Z",
        "url": "https://files.pythonhosted.org/packages/00/4b/54820228ca7650331de93dc289c234733024ae6b8206a7433d11bc6fd479/singleton-type-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a25ec2f4b5f3dd572bf3c0a9fce875d293821a3179453077213df1c57391a1e",
          "md5": "793f54ad3a2bee67423b1db3b791ad8a",
          "sha256": "c398c733b8085d986e134cd7c177327ba1cc0030fd73953a9f075191d1dd783b"
        },
        "downloads": -1,
        "filename": "singleton_type-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "793f54ad3a2bee67423b1db3b791ad8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7426,
        "upload_time": "2022-04-07T22:05:48",
        "upload_time_iso_8601": "2022-04-07T22:05:48.443879Z",
        "url": "https://files.pythonhosted.org/packages/2a/25/ec2f4b5f3dd572bf3c0a9fce875d293821a3179453077213df1c57391a1e/singleton_type-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa95b0cac73b510e52fef8b278f6d5feb4f2d0654b9a97aabd6caafc0f770145",
          "md5": "9e6831e3efc1245ce11f22e538026adc",
          "sha256": "25034ed1f6106c6b53be735a8a9816202ad60dc5f25349b158de30fb95b216f8"
        },
        "downloads": -1,
        "filename": "singleton-type-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9e6831e3efc1245ce11f22e538026adc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6626,
        "upload_time": "2022-04-07T22:05:50",
        "upload_time_iso_8601": "2022-04-07T22:05:50.625100Z",
        "url": "https://files.pythonhosted.org/packages/aa/95/b0cac73b510e52fef8b278f6d5feb4f2d0654b9a97aabd6caafc0f770145/singleton-type-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02f11abf4039d3bf897305c9fbc28d5e72f5a9afb735d3a05549e3051b84cbd8",
          "md5": "c8f04a11e63a3cace2e1784ee4579d76",
          "sha256": "f482093030dac636891523005388f1c98aae11c3cd84e5dbf3995fdeea8ca9e1"
        },
        "downloads": -1,
        "filename": "singleton_type-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8f04a11e63a3cace2e1784ee4579d76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7469,
        "upload_time": "2022-04-19T09:11:35",
        "upload_time_iso_8601": "2022-04-19T09:11:35.946327Z",
        "url": "https://files.pythonhosted.org/packages/02/f1/1abf4039d3bf897305c9fbc28d5e72f5a9afb735d3a05549e3051b84cbd8/singleton_type-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6424b49188253876044a3ae8082d1923b8c998a66a25775bf47fad1e55b48c5",
          "md5": "3e14a292617032de2ba7ee10b1214217",
          "sha256": "b6f60cbfed8e24e270daba170fb771cfd6c99e44f61486d24f0ac1698ebf3380"
        },
        "downloads": -1,
        "filename": "singleton-type-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3e14a292617032de2ba7ee10b1214217",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6771,
        "upload_time": "2022-04-19T09:11:37",
        "upload_time_iso_8601": "2022-04-19T09:11:37.956909Z",
        "url": "https://files.pythonhosted.org/packages/d6/42/4b49188253876044a3ae8082d1923b8c998a66a25775bf47fad1e55b48c5/singleton-type-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e81df98e31e80e4322d3921a8e26d900733fda6a9db4b44564678693cb491994",
          "md5": "7df254f9db2b4e9d50a552ec62235388",
          "sha256": "f63617e856afdf23a2c67ac050454508b3d00739ecdbb69803627e5c2c8cc02c"
        },
        "downloads": -1,
        "filename": "singleton_type-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7df254f9db2b4e9d50a552ec62235388",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7715,
        "upload_time": "2022-06-19T16:43:18",
        "upload_time_iso_8601": "2022-06-19T16:43:18.067595Z",
        "url": "https://files.pythonhosted.org/packages/e8/1d/f98e31e80e4322d3921a8e26d900733fda6a9db4b44564678693cb491994/singleton_type-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb9dad466bb2d879e951b2500639700e906c4d8d5e28ac39c1b0616a2087447a",
          "md5": "15bf6ea52d39b7f196fca30153493426",
          "sha256": "c2c7a052f3fb151db5fc7aff547b754f8c4649c6d3ac86a49560d54466d935cb"
        },
        "downloads": -1,
        "filename": "singleton-type-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "15bf6ea52d39b7f196fca30153493426",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6966,
        "upload_time": "2022-06-19T16:43:20",
        "upload_time_iso_8601": "2022-06-19T16:43:20.176913Z",
        "url": "https://files.pythonhosted.org/packages/cb/9d/ad466bb2d879e951b2500639700e906c4d8d5e28ac39c1b0616a2087447a/singleton-type-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e81df98e31e80e4322d3921a8e26d900733fda6a9db4b44564678693cb491994",
        "md5": "7df254f9db2b4e9d50a552ec62235388",
        "sha256": "f63617e856afdf23a2c67ac050454508b3d00739ecdbb69803627e5c2c8cc02c"
      },
      "downloads": -1,
      "filename": "singleton_type-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7df254f9db2b4e9d50a552ec62235388",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7715,
      "upload_time": "2022-06-19T16:43:18",
      "upload_time_iso_8601": "2022-06-19T16:43:18.067595Z",
      "url": "https://files.pythonhosted.org/packages/e8/1d/f98e31e80e4322d3921a8e26d900733fda6a9db4b44564678693cb491994/singleton_type-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb9dad466bb2d879e951b2500639700e906c4d8d5e28ac39c1b0616a2087447a",
        "md5": "15bf6ea52d39b7f196fca30153493426",
        "sha256": "c2c7a052f3fb151db5fc7aff547b754f8c4649c6d3ac86a49560d54466d935cb"
      },
      "downloads": -1,
      "filename": "singleton-type-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "15bf6ea52d39b7f196fca30153493426",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6966,
      "upload_time": "2022-06-19T16:43:20",
      "upload_time_iso_8601": "2022-06-19T16:43:20.176913Z",
      "url": "https://files.pythonhosted.org/packages/cb/9d/ad466bb2d879e951b2500639700e906c4d8d5e28ac39c1b0616a2087447a/singleton-type-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}