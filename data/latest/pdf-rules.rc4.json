{
  "info": {
    "author": "Sean Clouston",
    "author_email": "sean.clouston@tutanota.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Office/Business",
      "Topic :: Text Processing :: General",
      "Topic :: Utilities"
    ],
    "description": "# pdf_rules\n\nThis library is used to extract information from PDFs and output a CSV.\n\nThe library was designed to automate the extraction of data from invoices and other such documents; which hold data in hierarchical structures. The user must first define this structure with `add_level` and `add_field` functions, the library is designed to allow maximum user control.\n\n## Installation\n\n### From the PyPI\n\n\tpython -m pip install pdf_rules\n\n### From Source\n\n\tgit clone https://gitlab.com/sean-c/pdf_rules\n\tcd pdf_rules\n\tpython setup.py install\n\n### Dependencies\n\nThe module `pdftotext` is currently used to read the pdf files into a txt format before applying the rules, but this is currently not installed by default on Windows.  On Windows, you will have to find another way to convert the pdfs into txt and then pass the txt into the `PDF` class.\n\nPlease see [wsl-wrapper](https://gitlab.com/sean-c/wsl-wrapper) for a way to convert pdfs to good quality txts on Windows.\n\n## Tutorial\n\nFor the purpose of this example, please refer to `tests/test_pdf.pdf` (or `tests/test_txt.txt` if you couldn't install `pdftotext`), the example assumes the working directory to be the locaton of this document.\n\n### The Basics (no levels)\n\nBefore we extract data, we need to create an instance of the `pdf_rules.PDF` class, passing `tests/test_pdf.pdf` as an argument.\n\n\timport pdf_rules\n\n\tpdf = pdf_rules.PDF('tests/test_pdf.pdf')\n\n\tprint(pdf)\n\nThis creates the object `pdf` and reads the file `tests/test_pdf.pdf` into it as a list of strings, you can use `tests/test_txt.txt` instead by passing it in place of the pdf version.  The `print` function will print the file as held by the `pdf` object (with line numbers). Next, data can be found with the `add_field` method:\n\n\tpdf.add_field(\n\t\t'Account',\n\t\tlambda rd, i, l: 'Account' in l,\n\t\tlambda rd, i, l: l[-7:])\n\nWhere 'Account' is the field heading and the two `lambda` functions are the 'trigger' and the 'rule'. The trigger and rule have to follow the format `lambda rd, i, l: <expression>`, where `rd` is the whole document, `i` is the line number, and `l` is the line. Failiure to pass `rd`, `i`, and `l` in that order will result in an exception.\n\nThe library reads the document and stops when the 'trigger' returns `True`, the data is then extracted by the 'rule' function. The data is kept in `pdf.hierarchy`. To create a csv:\n\n\tcsv = pdf_rules.CSV(pdf)\n\tprint(csv)\n\tcsv.write()\n\nThis should output:\n\n\t['Account']\n\t['ABC1234']\n\nand the same output should be written to `tests/test_pdf_pdfrules.csv`.\n\n### Creating Levels\n\nIn order to extract the invoice data, we must create 'levels', these levels allow the extraction of recurring similar data, like the addresses in the example pdf.\n\n\tpdf.add_level(\n                lambda rd, i, l: 'Charges' in l,\n                lambda rd, i, l: l == '.')\n\tpdf.add_field(\n                'Address',\n                lambda rd, i, l: 'Charges' in l,\n                lambda rd, i, l: l.split(' - ')[1],\n\n                # IMPORTANT: always remember to pass the appropriate level!\n                level=1)\n\nHere, an extra level is added, which starts on every line containing 'Charges', and ends on every line containing just the '.' character. The tables each contain some unique data, which we can collect by creating another field 'Addrssses'.\n\n> Note that all `pdf` objects have a level 0, covering the whole document, so the `add_field` function needs the level stated if it is not intended for level 0\n\nThe output should be:\n\n\t['Account', 'Address']\n\t['ABC1234', '1234 Fake Street, London W15 6GH']\n\t['ABC1234', '5678 Fake Ave., Glasgow G3 6HJ'\n\n> Note that 'Address' items found in level 1 inherited the 'Account' from level 0\n\n### PDF.show\n\nYou can use `pdf.show()` to display a view of the pdf with the rows highlighted according to the levels picked up by all the `add_levels` calls.  This can help with troubleshooting and fine-tuning the `add_levels` trigger arguments.\n\nAs of v1.3, `pdf.show()` now has `T` and `D` in the left margin to indicate when an `add_field` trigger or rule callback is triggered.\n\n`PDF.show` currently relies on curses, so it will only work from a terminal.\n\n### Levels Within Levels\n\nThe `add_level` function can act within levels, where all data found in sub-levels will inherit data from higher ones.\n\nAdding another level, we can extract more data:\n\n\timport re\n\n\tpdf.add_level(\n                lambda rd, i, l: re.search(r'[A-Z]{2}/\\d{4}/[A-Z]', l),\n                lambda rd, i, l: False)\n\tpdf.add_field(\n                'ID',\n                lambda rd, i, l: re.search(r'[A-Z]{2}/\\d{4}/[A-Z]', l),\n                lambda rd, i, l: l.strip(),\n                level=2)\n\n> Notice that the 'trigger' for level 2 is set to `False`, this will cut off the table just before the start of the next one.\n\nOur output so far:\n\n\t['Account', 'Address', 'ID']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'IG/1234/H']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'ID/5678/I']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'RD/9012/P']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'IN/5724/O']\n\t['ABC1234', '5678 Fake Ave., Glasgow G3 6HJ', 'DH/0471/U']\n\t['ABC1234', '5678 Fake Ave., Glasgow G3 6HJ', 'JF/8364/N']\n\t['ABC1234', '5678 Fake Ave., Glasgow G3 6HJ', 'HD/1684/Q']\n\n\nAdding yet another level to find each line with charges, we will use trigger on every line with a date in, the line 'Invoice Date 01/10/2020' will not csuse a trigger as it is not in level 2.\n\n\tpdf.add_level(\n                lambda rd, i, l: re.search(r'\\d{2}/\\d{2}/\\d{4}', l),\n                lambda rd, i, l: False)\n\tpdf.add_field(\n                'Cost',\n                lambda rd, i, l: True,\n                lambda rd, i, l: pdf_rules.listify(l)[-1],\n                level=3)\n\n> Note the use of `pdf_rules.listify`, this is a helper function to crudely convery the line into a list, delimited by two+ spaces.\n> Also note the 'trigger' for 'Cost' is set to `True`, this means it will trigger on every line, use with caution.\n\nWe now have:\n\n\t['Account', 'Address', 'ID', 'Cost']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'IG/1234/H', '£100.00']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'IG/1234/H', '-$23.00']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'IG/1234/H', '£50.00']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'ID/5678/I', '£52.00']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'RD/9012/P', '£48.00']\n\t['ABC1234', '1234 Fake Street, London W15 6GH', 'IN/5724/O', '-£324.00']\n\t['ABC1234', '5678 Fake Ave., Glasgow G3 6HJ', 'DH/0471/U', '£64.00']\n\t['ABC1234', '5678 Fake Ave., Glasgow G3 6HJ', 'JF/8364/N', '£83.00']\n\t['ABC1234', '5678 Fake Ave., Glasgow G3 6HJ', 'HD/1684/Q', '£45.00']\n\nFrom here we could keep adding rules in order to catch all the data, just as we did with the cost field. \n\n### Helpful Things\n\nThere are some very useful features that I won't go into here, but you can see `tutorial.py` for examples of how to use them.\n\n#### Fallbacks\n\nAn optional argument of the `PDF.add_field` function is the `fallback`.  This is `None` by default but if you pass `fallback='1234'`, then pdf_rules will use '1234' for that field whenever the trigger doesn't trigger, or the rule returns `None` or throws an exception.\n\n#### Get last Entry\n\nYou can get the last entry found by pdf_rules for a given field with `pdf.last_entry('field')`\n\n\n## To Do\n\n1. Highlight matches in `PDF.show`\n2. Offer alternatives to curses for `PDF.show`, maybe use `pillow` to create an image and show in popup.\n0. More tests\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/sean-c/pdf_rules",
    "keywords": "automation,business,pdf,processing",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pdf-rules",
    "package_url": "https://pypi.org/project/pdf-rules/",
    "platform": "",
    "project_url": "https://pypi.org/project/pdf-rules/",
    "project_urls": {
      "Homepage": "https://gitlab.com/sean-c/pdf_rules"
    },
    "release_url": "https://pypi.org/project/pdf-rules/1.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Turn PDFs into CSVs by defining rules",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12397978,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a81e763e5f5d863584ee0f35594f522b65e0aa79082952cf4c7c42d955d7710",
          "md5": "b4e6bf817263e59f281afa70a402edfa",
          "sha256": "1731d3b24867826df4d40ee2dbc83d84458ef6b5ce4dee27e021596b4c4ebbaf"
        },
        "downloads": -1,
        "filename": "pdf_rules-0.0.4-py3.8.egg",
        "has_sig": false,
        "md5_digest": "b4e6bf817263e59f281afa70a402edfa",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": ">=3.6",
        "size": 12217,
        "upload_time": "2020-08-24T10:35:49",
        "upload_time_iso_8601": "2020-08-24T10:35:49.819351Z",
        "url": "https://files.pythonhosted.org/packages/9a/81/e763e5f5d863584ee0f35594f522b65e0aa79082952cf4c7c42d955d7710/pdf_rules-0.0.4-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4345de95884c6620544f6a917a91f94df2c1a806bc5df5f82e5183dd83f6eefa",
          "md5": "c1c387ef083dd62afe4d6d0e71093d0d",
          "sha256": "4f2f41aa2a6e67304aeec885dc37b98825bea985386c9f78a1abc4f2d8f6239c"
        },
        "downloads": -1,
        "filename": "pdf_rules-1.0.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "c1c387ef083dd62afe4d6d0e71093d0d",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": ">=3.6",
        "size": 12217,
        "upload_time": "2020-08-24T10:35:52",
        "upload_time_iso_8601": "2020-08-24T10:35:52.039338Z",
        "url": "https://files.pythonhosted.org/packages/43/45/de95884c6620544f6a917a91f94df2c1a806bc5df5f82e5183dd83f6eefa/pdf_rules-1.0.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9ad6945a82eb0648a8d5ffa85c4c87efd56624ea6286b65276c6cb27d7b0156",
          "md5": "9c6e06d478f80e3fabdde801d7c11dae",
          "sha256": "70c0c872971c20e4dd1944756186e1c2ff26b8c9fcf98b6ee2c4f4bbf1ecc6a0"
        },
        "downloads": -1,
        "filename": "pdf_rules-1.2.0.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "9c6e06d478f80e3fabdde801d7c11dae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16306,
        "upload_time": "2021-12-15T15:11:51",
        "upload_time_iso_8601": "2021-12-15T15:11:51.635565Z",
        "url": "https://files.pythonhosted.org/packages/d9/ad/6945a82eb0648a8d5ffa85c4c87efd56624ea6286b65276c6cb27d7b0156/pdf_rules-1.2.0.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59c44b40ac50f09c9611c23e3d04d0d226a701d5b5f9d0b0d9849339278443e1",
          "md5": "f02907acb3625f116c370f42fe781f49",
          "sha256": "1cbda031267214875e27c70048a0a688f73548e4a4bd33230a3521e4f03604ca"
        },
        "downloads": -1,
        "filename": "pdf_rules-1.3.0.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "f02907acb3625f116c370f42fe781f49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16818,
        "upload_time": "2021-12-24T12:16:52",
        "upload_time_iso_8601": "2021-12-24T12:16:52.176238Z",
        "url": "https://files.pythonhosted.org/packages/59/c4/4b40ac50f09c9611c23e3d04d0d226a701d5b5f9d0b0d9849339278443e1/pdf_rules-1.3.0.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59c44b40ac50f09c9611c23e3d04d0d226a701d5b5f9d0b0d9849339278443e1",
        "md5": "f02907acb3625f116c370f42fe781f49",
        "sha256": "1cbda031267214875e27c70048a0a688f73548e4a4bd33230a3521e4f03604ca"
      },
      "downloads": -1,
      "filename": "pdf_rules-1.3.0.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "f02907acb3625f116c370f42fe781f49",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16818,
      "upload_time": "2021-12-24T12:16:52",
      "upload_time_iso_8601": "2021-12-24T12:16:52.176238Z",
      "url": "https://files.pythonhosted.org/packages/59/c4/4b40ac50f09c9611c23e3d04d0d226a701d5b5f9d0b0d9849339278443e1/pdf_rules-1.3.0.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}