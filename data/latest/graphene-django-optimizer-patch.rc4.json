{
  "info": {
    "author": "Gabriel Sebag",
    "author_email": "hello@gabrielsebag.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# graphene-django-optimizer\n\n[![build status](https://img.shields.io/travis/tfoxy/graphene-django-optimizer.svg)](https://travis-ci.com/github/tfoxy/graphene-django-optimizer)\n[![coverage](https://img.shields.io/codecov/c/github/tfoxy/graphene-django-optimizer.svg)](https://codecov.io/gh/tfoxy/graphene-django-optimizer)\n[![PyPI version](https://img.shields.io/pypi/v/graphene-django-optimizer.svg)](https://pypi.org/project/graphene-django-optimizer/)\n![python version](https://img.shields.io/pypi/pyversions/graphene-django-optimizer.svg)\n![django version](https://img.shields.io/pypi/djversions/graphene-django-optimizer.svg)\n\nOptimize queries executed by [graphene-django](https://github.com/graphql-python/graphene-django) automatically, using [`select_related`](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#select-related), [`prefetch_related`](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#prefetch-related) and [`only`](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#only) methods of Django QuerySet.\n\n\n\n## Install\n\n```bash\npip install graphene-django-optimizer\n```\n\n*Note: If you are using Graphene V2, please install version `0.8`. v0.9 and forward will support only Graphene V3*\n\n## Usage\n\nHaving the following schema based on [the tutorial of graphene-django](http://docs.graphene-python.org/projects/django/en/latest/tutorial-plain/#hello-graphql-schema-and-object-types) (notice the use of `gql_optimizer`)\n\n```py\n# cookbook/ingredients/schema.py\nimport graphene\n\nfrom graphene_django.types import DjangoObjectType\nimport graphene_django_optimizer as gql_optimizer\n\nfrom cookbook.ingredients.models import Category, Ingredient\n\n\nclass CategoryType(DjangoObjectType):\n    class Meta:\n        model = Category\n\n\nclass IngredientType(DjangoObjectType):\n    class Meta:\n        model = Ingredient\n\n\nclass Query(graphene.ObjectType):\n    all_categories = graphene.List(CategoryType)\n    all_ingredients = graphene.List(IngredientType)\n\n    def resolve_all_categories(root, info):\n        return gql_optimizer.query(Category.objects.all(), info)\n\n    def resolve_all_ingredients(root, info):\n        return gql_optimizer.query(Ingredient.objects.all(), info)\n```\n\n\nWe will show some graphql queries and the queryset that will be executed.\n\nFetching all the ingredients with the related category:\n\n```graphql\n{\n  allIngredients {\n    id\n    name\n    category {\n        id\n        name\n    }\n  }\n}\n```\n\n```py\n# optimized queryset:\ningredients = (\n    Ingredient.objects\n    .select_related('category')\n    .only('id', 'name', 'category__id', 'category__name')\n)\n```\n\nFetching all the categories with the related ingredients:\n\n```graphql\n{\n  allCategories {\n    id\n    name\n    ingredients {\n        id\n        name\n    }\n  }\n}\n```\n\n```py\n# optimized queryset:\ncategories = (\n    Category.objects\n    .only('id', 'name')\n    .prefetch_related(Prefetch(\n        'ingredients',\n        queryset=Ingredient.objects.only('id', 'name'),\n    ))\n)\n```\n\n\n## Advanced usage\n\nSometimes we need to have a custom resolver function. In those cases, the field can't be auto optimized.\nSo we need to use `gql_optimizer.resolver_hints` decorator to indicate the optimizations.\n\nIf the resolver returns a model field, we can use the `model_field` argument:\n\n```py\nimport graphene\nimport graphene_django_optimizer as gql_optimizer\n\n\nclass ItemType(gql_optimizer.OptimizedDjangoObjectType):\n    product = graphene.Field('ProductType')\n\n    @gql_optimizer.resolver_hints(\n        model_field='product',\n    )\n    def resolve_product(root, info):\n        # check if user have permission for seeing the product\n        if info.context.user.is_anonymous():\n            return None\n        return root.product\n```\n\nThis will automatically optimize any subfield of `product`.\n\nNow, if the resolver uses related fields, you can use the `select_related` argument:\n\n```py\nimport graphene\nimport graphene_django_optimizer as gql_optimizer\n\n\nclass ItemType(gql_optimizer.OptimizedDjangoObjectType):\n    name = graphene.String()\n\n    @gql_optimizer.resolver_hints(\n        select_related=('product', 'shipping'),\n        only=('product__name', 'shipping__name'),\n    )\n    def resolve_name(root, info):\n        return '{} {}'.format(root.product.name, root.shipping.name)\n```\n\nNotice the usage of the type `OptimizedDjangoObjectType`, which enables\noptimization of any single node queries.\n\nFinally, if your field has an argument for filtering results,\nyou can use the `prefetch_related` argument with a function\nthat returns a `Prefetch` instance as the value.\n\n```py\nfrom django.db.models import Prefetch\nimport graphene\nimport graphene_django_optimizer as gql_optimizer\n\n\nclass CartType(gql_optimizer.OptimizedDjangoObjectType):\n    items = graphene.List(\n        'ItemType',\n        product_id=graphene.ID(),\n    )\n\n    @gql_optimizer.resolver_hints(\n        prefetch_related=lambda info, product_id: Prefetch(\n            'items',\n            queryset=gql_optimizer.query(Item.objects.filter(product_id=product_id), info),\n            to_attr='gql_product_id_' + product_id,\n        ),\n    )\n    def resolve_items(root, info, product_id):\n        return getattr(root, 'gql_product_id_' + product_id)\n```\n\nWith these hints, any field can be optimized.\n\n\n### Optimize with non model fields\n\nSometimes we need to have a custom non model fields. In those cases, the optimizer would not optimize with the Django `.only()` method.\nSo if we still want to optimize with the `.only()` method, we need to use `disable_abort_only` option:\n\n```py\n\nclass IngredientType(gql_optimizer.OptimizedDjangoObjectType):\n    calculated_calories = graphene.String()\n\n    class Meta:\n        model = Ingredient\n\n    def resolve_calculated_calories(root, info):\n        return get_calories_for_ingredient(root.id)\n\n\nclass Query(object):\n    all_ingredients = graphene.List(IngredientType)\n\n    def resolve_all_ingredients(root, info):\n        return gql_optimizer.query(Ingredient.objects.all(), info, disable_abort_only=True)\n```\n\n### Annotations\n\nThe queryset can be optimized with an annotation when and only if a field is requested. To\ndo so, the annotate resolver hint can be used.\n\n```py\nclass RecipeType(gql_optimizer.OptimizedDjangoObjectType):\n    ingredient_count = graphene.Int()\n    class Meta:\n        model = Recipe\n        fields = ('id',)\n\n    @gql_optimizer.resolver_hints(\n        annotate={\n            'gql_ingredient_count': Count('ingredients')\n        }\n    )\n    def resolve_ingredient_count(root, info):\n        return getattr(root, 'gql_ingredient_count')\nclass Query(object):\n    all_recipes = graphene.List(RecipeType)\n    def resolve_all_recipes(root, info):\n        return gql_optimizer.query(Recipe.objects.all(), info)\n```\n\nWhen using annotations there are two caveats.\n\n1) The queryset will not be annotated if the optimization fails.\n2) If an annotation is used in a related query that will usually\nresult in a optimized `select_related`, `prefetch_related` is used instead,\nadding one additional query. See example below.\n\n```py\nclass RecipeType(gql_optimizer.OptimizedDjangoObjectType):\n    ingredient_count = graphene.Int()\n    class Meta:\n        model = Recipe\n        fields = ('id',)\n\n    @gql_optimizer.resolver_hints(\n        annotate={\n            'gql_ingredient_count': Count('ingredients')\n        }\n    )\n    def resolve_ingredient_count(root, info):\n        return getattr(root, 'gql_ingredient_count')\nclass IngredientType(gql_optimizer.OptimizedDjangoObjectType):\n    recipe = gql_optimizer.field(\n        graphene.Field(RecipeType), model_field='recipe',\n    )\n    class Meta:\n        model = Ingredient\n        fields = ('id', name')\nclass Query(object):\n    all_ingredients = graphene.List(IngredientType)\n    def resolve_all_ingredients(root, info):\n        return gql_optimizer.query(Ingredient.objects.all(), info)\n```\nThe GraphQL query.\n```\nquery {\n  allIngredients {\n     id\n     name\n     recipe {\n       id\n       name\n       ingredientCount\n     }\n  }\n}\n```\nWill resolve in two SQL queries. One to fetch all ingredients, one to prefetch\nall recipes for those ingredients.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gabrielsebag/graphene-django-optimizer",
    "keywords": "graphene django optimizer optimize graphql query prefetch select related",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphene-django-optimizer-patch",
    "package_url": "https://pypi.org/project/graphene-django-optimizer-patch/",
    "platform": null,
    "project_url": "https://pypi.org/project/graphene-django-optimizer-patch/",
    "project_urls": {
      "Homepage": "https://github.com/gabrielsebag/graphene-django-optimizer"
    },
    "release_url": "https://pypi.org/project/graphene-django-optimizer-patch/0.9.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Optimize database access inside graphene queries.",
    "version": "0.9.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15896108,
  "releases": {
    "0.8.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "478ba3266ed61f993daa3c1a4789b7dc144f830cf54d1d263f4655ccefebd739",
          "md5": "851f9b4d87a3130d10c68182a458ce0f",
          "sha256": "2c0c3e6fdea3df7528dd948e1b52c57e723d95506fb98abc2c010d7e2b0bc9aa"
        },
        "downloads": -1,
        "filename": "graphene-django-optimizer-patch-0.8.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "851f9b4d87a3130d10c68182a458ce0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11698,
        "upload_time": "2022-11-20T14:34:50",
        "upload_time_iso_8601": "2022-11-20T14:34:50.013926Z",
        "url": "https://files.pythonhosted.org/packages/47/8b/a3266ed61f993daa3c1a4789b7dc144f830cf54d1d263f4655ccefebd739/graphene-django-optimizer-patch-0.8.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0a148387409ebf0ce01105d47bef27227e7f4f0f0022cfa8e586f2f26427943",
          "md5": "fc728fc6bdb8cff0b8bdb8c5ac43ef2d",
          "sha256": "01441b133886a0e28557cf5d2813acd6239e0e2426a4f84ad7e5171f5b85e429"
        },
        "downloads": -1,
        "filename": "graphene_django_optimizer_patch-0.8.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc728fc6bdb8cff0b8bdb8c5ac43ef2d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10811,
        "upload_time": "2022-11-21T13:16:30",
        "upload_time_iso_8601": "2022-11-21T13:16:30.136172Z",
        "url": "https://files.pythonhosted.org/packages/f0/a1/48387409ebf0ce01105d47bef27227e7f4f0f0022cfa8e586f2f26427943/graphene_django_optimizer_patch-0.8.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d536f9bf262030ebfb50995cb3b66f14e9fbaaf5477d94a68c5b41dff782028",
          "md5": "c0a19809dccaa3f71daad04fdafcb92d",
          "sha256": "cb1372397c20dd51a481d7103d103c93a99d04da9fff8abe828baf20ad9a943f"
        },
        "downloads": -1,
        "filename": "graphene-django-optimizer-patch-0.8.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c0a19809dccaa3f71daad04fdafcb92d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11668,
        "upload_time": "2022-11-21T13:16:32",
        "upload_time_iso_8601": "2022-11-21T13:16:32.375552Z",
        "url": "https://files.pythonhosted.org/packages/5d/53/6f9bf262030ebfb50995cb3b66f14e9fbaaf5477d94a68c5b41dff782028/graphene-django-optimizer-patch-0.8.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b04214e251d7307d0dde9f778b0005a0d5c68fe62bc2a221651eb3b36bdf82fa",
          "md5": "c1078353f21f09fdce1b9d365969bc56",
          "sha256": "65fcd55488fe08e4043d10f67ace34f9c538d01e437caf0eabf761c3fabe8dcb"
        },
        "downloads": -1,
        "filename": "graphene_django_optimizer_patch-0.8.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1078353f21f09fdce1b9d365969bc56",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11243,
        "upload_time": "2022-11-26T07:54:49",
        "upload_time_iso_8601": "2022-11-26T07:54:49.742040Z",
        "url": "https://files.pythonhosted.org/packages/b0/42/14e251d7307d0dde9f778b0005a0d5c68fe62bc2a221651eb3b36bdf82fa/graphene_django_optimizer_patch-0.8.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef5507c0bbd1be49a508c5a5c2edb3bab2ae978cf1e881d8dd3c24bc6f718d39",
          "md5": "d9b5d43d069af728604805a886623c82",
          "sha256": "f85c48e649dd8ad215c485b7fc24f817c4b46da9cdb7405e6faf207beaf3911e"
        },
        "downloads": -1,
        "filename": "graphene-django-optimizer-patch-0.8.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d9b5d43d069af728604805a886623c82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12090,
        "upload_time": "2022-11-26T07:54:54",
        "upload_time_iso_8601": "2022-11-26T07:54:54.251015Z",
        "url": "https://files.pythonhosted.org/packages/ef/55/07c0bbd1be49a508c5a5c2edb3bab2ae978cf1e881d8dd3c24bc6f718d39/graphene-django-optimizer-patch-0.8.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c1d9647c65210d2b36ffca5db04275cb470e2a1a5fd29e6e76aac86ea86fc17",
          "md5": "177bdf5294216b0493014fb774e04543",
          "sha256": "2479ed9a51dfb09a01bc08485a8ff9b5aed66e71becc5bd1eb1b312748c50c75"
        },
        "downloads": -1,
        "filename": "graphene-django-optimizer-patch-0.9.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "177bdf5294216b0493014fb774e04543",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12057,
        "upload_time": "2022-11-20T14:33:12",
        "upload_time_iso_8601": "2022-11-20T14:33:12.995276Z",
        "url": "https://files.pythonhosted.org/packages/3c/1d/9647c65210d2b36ffca5db04275cb470e2a1a5fd29e6e76aac86ea86fc17/graphene-django-optimizer-patch-0.9.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c1d9647c65210d2b36ffca5db04275cb470e2a1a5fd29e6e76aac86ea86fc17",
        "md5": "177bdf5294216b0493014fb774e04543",
        "sha256": "2479ed9a51dfb09a01bc08485a8ff9b5aed66e71becc5bd1eb1b312748c50c75"
      },
      "downloads": -1,
      "filename": "graphene-django-optimizer-patch-0.9.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "177bdf5294216b0493014fb774e04543",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12057,
      "upload_time": "2022-11-20T14:33:12",
      "upload_time_iso_8601": "2022-11-20T14:33:12.995276Z",
      "url": "https://files.pythonhosted.org/packages/3c/1d/9647c65210d2b36ffca5db04275cb470e2a1a5fd29e6e76aac86ea86fc17/graphene-django-optimizer-patch-0.9.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}