{
  "info": {
    "author": "Leonardo MÃ¶rlein",
    "author_email": "me@irrelefant.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# gluon-qemu-testlab\n\nThe *gluon-qemu-testlab* (formerly known as *pynet*) tool helps\nin creating virtual mesh topologies\nwith gluon firmwares using the qemu virtualization\ntechnology. It provides a simple language, where you can\nbuild your topology file in. You can create nodes by\nsimply calling a function `Node()` and connect them by\ncalling the `connect()` function. Then gluon-qemu-testlab\ndoes the rest:\n\n1. It starts a qemu instance for each node by using the `image.img` firmware image from the root of the project directory.\n2. It connects nodes together as expected using qemus network capabilities.\n3. It configures the node though the *config mode* of gluon using an ssh session.\n4. Shell accesses to the different nodes and clients is provided.\n\n![picture of random mesh generated by pynet](mesh.gif)\n\n## Requirements\n\n- Linux OS\n- At least python3.6\n- qemu\n- python lib asyncssh\n\n``` shell\npacman -S qemu tmux python python-pip\npip install -r requirements.txt\n```\n\n## Quickstart\n\n``` shell\nsh update_image.sh                                      # download an image\nsudo python36 scenarios/chain_4_nodes.py --run-forever  # start a scenario\n```\n\n## Example scenario\n\nHere we connect three nodes in a chain. The syntax is\nstandard python syntax.\n```\n#!/usr/bin/env python3\nimport sys\nsys.path.append(\".\")\nfrom pynet import *\n\na = Node()\nb = Node()\nc = Node()\n\nconnect(a, b)\nconnect(b, c)\n\nstart()\n# tests could go here\nfinish()\n```\n\n### Testing API\n\n``` python\nstdout = node.succeed(\"cmd\")                   # execute cmd via ssh and exit with failure if the command\n                                               # returns with non-zero exit status\n\nstdout = node.wait_until_succeeds(\"cmd\")       # retry executing cmd via ssh until it suceeds or timeouts\n\nstatus, stdout = node.execute(\"cmd\")           # execute command via ssh and return the status code in\n                                               # addition to stdout\n\nprocess = node.execute_in_background(\"cmd\")    # start a command in background (e.g. a server process)\nprocess.close()                                # send SIGINT to the command and wait until it exits.\n```\n\n### CLI\n\nThis CLI options currently exist:\n- `--run-forever`\n- `--run-tests-on-existing-instance`\n\nBecause starting up the qemu instances takes some time, the iteration process during test development can become\ntedious. The `--run-tests-on-existing-instance` switch is especially helpful here. You can start one instance of pynet\nusing the `--run-forever` switch and then invoke scenarios using the `--run-tests-on-existing-instance` switch. This \nnew pynet instances will not run their own qemus instances but reuse the already spawned ones. \n\n### SSH Access\n\nDuring config mode, the ssh instances are available from the host machine at port `localhost:22001`, `localhost:22002`,\nand so on. When the instances are configured, they are available on ports `localhost:22101`, `localhost:22102`, and\nso on.\n\nWhen they are configured, you can use the symlinked scripts:\n- `ssh/node1.sh`\n- `ssh/node2.sh`\n- ...\n\nto easily access the nodes. They provide a little more convinience as they disable known hosts checks.\n\n## Advanced gimmics\n\n- Nodes support resolving names of each other. ```ping node1```\n- Nodes also support this command for bat-hosts. ```batctl tr node2```\n- To manage ssh connections, pynet automatically generates an rsa key, which is added into the image during config mode.\n\n### set fastd secret\n\n``` python\nnode.set_fastd_secret('e88b6e7adf88ffb9448293ab008f2fde9a06d012973b7a73cb4947781f6020f2')\n```\n\n#### currently disabled features:\n- Client namespaces using network namespaces.\n- Spawing firefox as a client of a router is also possible. This is very helpful to see the statuspage of a router. Please note, that the shells opened by pynet are root shells. So if you directly start firefox inside such a shell, it has root access.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/freifunk-gluon/gluon-qemu-testlab",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gluon-qemu-testlab",
    "package_url": "https://pypi.org/project/gluon-qemu-testlab/",
    "platform": "",
    "project_url": "https://pypi.org/project/gluon-qemu-testlab/",
    "project_urls": {
      "Homepage": "https://github.com/freifunk-gluon/gluon-qemu-testlab"
    },
    "release_url": "https://pypi.org/project/gluon-qemu-testlab/0.0.5/",
    "requires_dist": [
      "asyncssh (==2.1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Python scripts to run qemu and gluon based virtual mesh networks",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7005660,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99b51208b466e6abf73ba4c295d3cf6cfb0595c7d3f61ab899e3ee8645d958a6",
          "md5": "1a65bd589d39878690e4b5d476e8bfe4",
          "sha256": "178ea57ac2fa4dc63a6f28b4b2020c0db9dc0d3c49813cef398215373d28ed14"
        },
        "downloads": -1,
        "filename": "gluon_qemu_testlab-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a65bd589d39878690e4b5d476e8bfe4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9852,
        "upload_time": "2020-04-04T12:19:36",
        "upload_time_iso_8601": "2020-04-04T12:19:36.546793Z",
        "url": "https://files.pythonhosted.org/packages/99/b5/1208b466e6abf73ba4c295d3cf6cfb0595c7d3f61ab899e3ee8645d958a6/gluon_qemu_testlab-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e7c21e15cbab3f9593bac0e49ce68852b5e016d372e984866fc1b5097466bcf",
          "md5": "fb014b4858c508d3940aafc9e8e4ee8a",
          "sha256": "33c26963828b41f3ac50836bebc12b471d3053cc8da010c223f56455e5a7b803"
        },
        "downloads": -1,
        "filename": "gluon-qemu-testlab-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fb014b4858c508d3940aafc9e8e4ee8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9263,
        "upload_time": "2020-04-04T12:19:38",
        "upload_time_iso_8601": "2020-04-04T12:19:38.920571Z",
        "url": "https://files.pythonhosted.org/packages/6e/7c/21e15cbab3f9593bac0e49ce68852b5e016d372e984866fc1b5097466bcf/gluon-qemu-testlab-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ed4358dc2582f16af8c9a2e4d8e17f0ed52b7e07c7dc63ee92c99b711b1812d",
          "md5": "564e68d890c5decafaabddd3ef33b556",
          "sha256": "61f656336a01a4f9abf6afcf6fc09c717796698c13cb76e22e21bab137b982f8"
        },
        "downloads": -1,
        "filename": "gluon_qemu_testlab-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "564e68d890c5decafaabddd3ef33b556",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10448,
        "upload_time": "2020-04-12T18:19:13",
        "upload_time_iso_8601": "2020-04-12T18:19:13.443614Z",
        "url": "https://files.pythonhosted.org/packages/7e/d4/358dc2582f16af8c9a2e4d8e17f0ed52b7e07c7dc63ee92c99b711b1812d/gluon_qemu_testlab-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23d3c85e2e2c4084f721d40137015a53c1d07d1f0ef5df65f90a40e58d2af36f",
          "md5": "d2278b6184957ceb8e764d55f5984b55",
          "sha256": "c4de8d5ee8cf483193d304bf0e36526b3d9ca621fdff6d8ed97ef61193afe633"
        },
        "downloads": -1,
        "filename": "gluon-qemu-testlab-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d2278b6184957ceb8e764d55f5984b55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9837,
        "upload_time": "2020-04-12T18:19:14",
        "upload_time_iso_8601": "2020-04-12T18:19:14.935680Z",
        "url": "https://files.pythonhosted.org/packages/23/d3/c85e2e2c4084f721d40137015a53c1d07d1f0ef5df65f90a40e58d2af36f/gluon-qemu-testlab-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ed4358dc2582f16af8c9a2e4d8e17f0ed52b7e07c7dc63ee92c99b711b1812d",
        "md5": "564e68d890c5decafaabddd3ef33b556",
        "sha256": "61f656336a01a4f9abf6afcf6fc09c717796698c13cb76e22e21bab137b982f8"
      },
      "downloads": -1,
      "filename": "gluon_qemu_testlab-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "564e68d890c5decafaabddd3ef33b556",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10448,
      "upload_time": "2020-04-12T18:19:13",
      "upload_time_iso_8601": "2020-04-12T18:19:13.443614Z",
      "url": "https://files.pythonhosted.org/packages/7e/d4/358dc2582f16af8c9a2e4d8e17f0ed52b7e07c7dc63ee92c99b711b1812d/gluon_qemu_testlab-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23d3c85e2e2c4084f721d40137015a53c1d07d1f0ef5df65f90a40e58d2af36f",
        "md5": "d2278b6184957ceb8e764d55f5984b55",
        "sha256": "c4de8d5ee8cf483193d304bf0e36526b3d9ca621fdff6d8ed97ef61193afe633"
      },
      "downloads": -1,
      "filename": "gluon-qemu-testlab-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d2278b6184957ceb8e764d55f5984b55",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9837,
      "upload_time": "2020-04-12T18:19:14",
      "upload_time_iso_8601": "2020-04-12T18:19:14.935680Z",
      "url": "https://files.pythonhosted.org/packages/23/d3/c85e2e2c4084f721d40137015a53c1d07d1f0ef5df65f90a40e58d2af36f/gluon-qemu-testlab-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}