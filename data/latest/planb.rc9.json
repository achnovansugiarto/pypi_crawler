{
  "info": {
    "author": "Alex Boonstra, Harm Geerts, Walter Doekes, OSSO B.V.",
    "author_email": "wjdoekes+planb@osso.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2",
      "Framework :: Django :: 3",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Archiving :: Backup"
    ],
    "description": "|PlanB|\n=======\n\nPlanB backs up your remote files to a local ZFS storage. Manage many\nhosts and host groups. Automate hourly, daily, weekly, monthly and\nyearly backups with snapshots.\n\nThe following data transfer methods are supported:\n\n* ssh+rsync (built-in);\n* ssh+rsync of Kubernetes volume mounts (through `kubersync\n  <./contrib/kubersync.sh>`_), like Rook managed Ceph;\n* snapshots of ZFS (encrypted) datasets (through `planb-zfssync\n  <./contrib/planb-zfssync.sh>`_);\n* snapshots of ZFS volumes (through `planb-zfssync\n  <./contrib/planb-zfssync.sh>`_);\n* copies of (large) *OpenStack Swift* containers (through `planb-swiftsync\n  <./contrib/planb-swiftsync.py>`_);\n* custom transfer (through your own custom ``transfer_exec`` script).\n\n\n------------------\nWhat it looks like\n------------------\n\nAt the moment, the interface is just a *Django* admin interface:\n\n.. image:: assets/example_hosts.png\n    :alt: A list of hosts configured in PlanB with most recent backup status\n\nThe files are stored on *ZFS* storage. It uses *ZFS* snapshots to keep earlier\nversions of files. See this example shell transscript::\n\n    # zfs list | grep mongo2\n    tank/BACKUP/experience-mongo2   9,34G  1,60T   855M  /srv/backups/experience-mongo2\n\n    # ls -l /srv/backups/experience-mongo2/data/srv/mongodb\n    total 646610\n    -rw------- 1 planb nogroup   67108864 jun 17 17:03 experience.0\n    -rw------- 1 planb nogroup  134217728 jun  9 16:01 experience.1\n    ...\n\nThose are the \"current\" files in the workspace. But you can go back in time::\n\n    # zfs list -r -t all tank/BACKUP/experience-mongo2 | head -n4\n    NAME                                                 USED  AVAIL  REFER  MOUNTPOINT\n    tank/BACKUP/experience-mongo2                       9,34G  1,60T   855M  /srv/backups/experience-mongo2\n    tank/BACKUP/experience-mongo2@planb-20170603T1147Z      0      -   809M  -\n    tank/BACKUP/experience-mongo2@planb-20170603T1211Z      0      -   809M  -\n\n    # cd /srv/backups/experience-mongo2/.zfs/\n    # ls -1\n    planb-20170603T1147Z\n    planb-20170603T1211Z\n    planb-20170604T0001Z\n    planb-20170605T0002Z\n    ...\n\n    # ls planb-20170603T1147Z/data/srv/mongodb -l\n    total 581434\n    -rw------- 1 planb nogroup   67108864 jun  2 18:21 experience.0\n    -rw------- 1 planb nogroup  134217728 mei 29 14:38 experience.1\n    ...\n\n\n--------------------\nRequirements / setup\n--------------------\n\nPlanB can be installed as a standalone Django_ application, or it can be\nintegrated in another Django project.\n\nSee `requirements.txt`_ or `setup.py`_ for up-to-date dependencies/requirements.\n\nBasically, you'll need: *ZFS* storage, ssh and rsync, a webserver\n(nginx), python hosting (uwsgi), a database (mysql), a\ncommunication/cache bus (redis) and a few python packages.\n\nFor more detailed steps, see `Setting it all up`_ below.\n\n.. _Django: https://www.djangoproject.com/\n.. _`requirements.txt`: ./requirements.txt\n.. _`setup.py`: ./setup.py\n\n\n----\nTODO\n----\n\n* Encryption: right now, encryption keys are still a bit of a mess:\n\n  - stuff is stored in tank/_local; should use some kind of vault;\n  - when removing/renaming, those keys are not updated alongside;\n  - planb-zfssync.sh does not clean up snapshots created before\n    send/recv failure (e.g. because remote did not support --raw)\n  - add key rotation example scripts?\n\n* Docs: add documentation for sync from previous unencrypted filesets?\n* Docs: add a bit of documentation on how to work with encrypted filesets\n* Consider: move the hostgroup contents to separate filesets, so as to\n  create a more readable fileset listing. tank/HOSTGROUP/FILESET instead\n  of tank/HOSTGROUP-FILESET.\n* RFE: Add post-backup.d directory somewhere where we can place\n  post-backup-done scripts to manually do X or Y.\n* RFE: Add planb group for better permission management.\n* RFE: Also store user/group permissions on/after rsync (using xattr\n  extended attributes?).\n* BUG: Items added to /exclude list are not deleted from destination if\n  they have already been backed up once. The rsync job would need some\n  way to keep track of changes in include/exclude settings, and run a\n  cleanup in case they are changed. (See metadata storage like\n  planb-swiftsync.* files.)\n* RFE: Standardize stdout/stderr output from Rsync/Exec success (and\n  prepend \"> \" to output) to be more in line with failure.\n* RFE: Add possibility to feed back snapshot size from the individual\n  Transport instead of using dutree. Parsing the swiftsync listings is\n  fast after all.\n* FIX: Add uwsgi-uid==djangoq-uid check?\n* Replace the exception mails for common errors (like failing rsync) to\n  use mail_admins style mail.\n* After using mail_admins style mail, we can start introducing mail digests\n  instead: daily summary of backup successes and failures.\n* Replace the \"daily report\" hack with a signal-receiver.\n* Clarify why there's a /contrib/ and a /planb/contrib/ directory.\n\n\n-------\nWARNING\n-------\n\nThe Django-Q task scheduler is highly configurable from the\n``/admin/``-view. With a little effort it will run user-supplied python\ncode directly. Any user with access to the schedulers will have\ntremendous powers\n\n**Recommendation**: don't give your users powers to edit the schedulers.\nUse the fine-grained permissions of the Django-admin systems to limit\nthem to Hosts and HostGroups only.\n\n*Perhaps we should disable web-access to it altogether.*\n\n\n-----------------\nSetting it all up\n-----------------\n\nIf you follow the HOWTO below, you'll set up PlanB as a standalone\nproject. Those familiar with Django_ will know how to integrate it into\ntheir own project.\n\nThe setup below assumes you'll be using the ``planb`` user. You're free\nto change that consistently of course.\n\n\nSetting up a ZFS pool\n~~~~~~~~~~~~~~~~~~~~~\n\nYou should really do your own research on this. If you're lucky, your\noperating system has native support for *ZFS*, and then this is\nrelatively easy.\n\nPlease read `README-zpool.rst <./README-zpool.rst>`_ for a quick\nintroduction. When you're done, things should look somewhat like this:\n\n.. code-block:: console\n\n    # zpool status\n      pool: tank\n     state: ONLINE\n      scan: none requested\n    config:\n\n      NAME                                  STATE\n      tank                                  ONLINE\n        raidz2-0                            ONLINE\n          scsi-SSEAGATE_ST10000NM0226_6351  ONLINE\n          scsi-SSEAGATE_ST10000NM0226_0226  ONLINE\n          scsi-SSEAGATE_ST10000NM0226_8412  ONLINE\n          scsi-SSEAGATE_ST10000NM0226_...   ONLINE\n          ...\n        raidz2-1                            ONLINE\n          scsi-SSEAGATE_ST10000NM0226_0123  ONLINE\n          scsi-SSEAGATE_ST10000NM0226_...   ONLINE\n          scsi-SSEAGATE_ST10000NM0226_...   ONLINE\n          scsi-SSEAGATE_ST10000NM0226_...   ONLINE\n          ...\n      spares\n        scsi-SSEAGATE_ST10000NM0226_9866    AVAIL\n        scsi-SSEAGATE_ST10000NM0226_5992    AVAIL\n\n\nSetting up the project\n~~~~~~~~~~~~~~~~~~~~~~\n\n*This section assumes you know a little about Python, pip and virtual\nenvs. Details may vary a slight bit across distro versions.*\n\nSet up a virtualenv (optional)::\n\n    mkdir -p /srv/virtualenvs\n    echo 'WORKON_HOME=/srv/virtualenvs' >>~/.bashrc\n    apt-get install python3-virtualenv python3-pip virtualenvwrapper\n    # you may need to log in/out once after this\n\n    # you may need /usr/share/bash-completion/completions/virtualenvwrapper\n    # sources in your bashrc\n    mkvirtualenv planb --python=$(which python3) --system-site-packages\n    workon planb\n\n    mkdir /etc/planb\n    cd /etc/planb\n    pwd >$VIRTUAL_ENV/.project  # or the src dir, if you're going to edit a lot\n\nInstall PlanB prerequisites::\n\n    apt-get install redis-server  # and: mysql-server or postgresql\n\nInstall PlanB dependencies through apt (optional)::\n\n    apt-get install python3-redis python3-setproctitle\n    # .. and: python3-mysqldb or python3-psycopg2\n\nInstall PlanB (including depedencies) from PyPI::\n\n    pip3 install planb\n\nInstall PlanB (including dependencies) from git::\n\n    pip3 install git+https://github.com/ossobv/planb.git@master#egg=planb\n\nSet up a local ``planb`` user::\n\n    adduser planb --disabled-password --home=/var/spool/planb \\\n      --shell=/bin/bash --system\n\n    sudo -H -u planb ssh-keygen -t ed25519      # use elliptic curve\n    sudo -H -u planb ssh-keygen -t rsa -b 8192  # or use RSA if you're old\n\n.. note:: *You may want to back that ssh key up somewhere.*\n\nSet up the local environment::\n\n    cat >/etc/planb/envvars <<EOF\n    USER=planb\n    PYTHONPATH=/etc/planb\n    DJANGO_SETTINGS_MODULE=settings\n    EOF\n\n.. note:: *PlanB looks for an environment file in the locations:*\n          - env PLANB_ENVFILE\n          - /etc/planb/envvars\n          - ./envvars\n          *The first file that can be loaded will be used.*\n\nSet up the local configuration::\n\n    cp ${VIRTUAL_ENV:-/usr/local}/share/planb/example_settings.py \\\n      /etc/planb/settings.py\n    ${EDITOR:-vi} /etc/planb/settings.py\n\n**Replace all *FIXME* entries in the ``settings.py``**\n\n.. note:: *For development you only need the settings module which can\n           be placed in the project root.*\n           ``cp -n example_settings.py settings.py``\n           *You can use* ``python setup.py develop`` *to install planb\n           in develop mode. This links the source directory to python\n           site-packages and is especially useful for production hacking.*\n\nMake sure the SQL database exists. How to do that is beyond the scope of\nthis readme.\n\nAt this point, you should be able to run the ``planb`` script.\n\nSet up the database and a web-user::\n\n    planb migrate\n    planb createsuperuser\n\nSet up uwsgi ``planb.ini``::\n\n    [uwsgi]\n    plugin = python3\n    workers = 4\n\n    chdir = /\n    virtualenv = /srv/virtualenvs/planb\n    wsgi-file = /srv/virtualenvs/planb/share/planb/wsgi.py\n\n    uid = planb\n    gid = www-data\n    chmod-socket = 660\n\n    for-readline = /etc/planb/envvars\n       env = %(_)\n    endfor =\n\nSet up static path, static files and log path::\n\n    # see the STATIC_ROOT entry in your settings.py\n    install -o planb -d /srv/http/YOURHOSTNAME/static\n\n    planb collectstatic\n\n    install -o planb -d /var/log/planb\n\nSet up nginx config::\n\n    server {\n        listen 80;\n        server_name YOURHOSTNAME;\n\n        root /srv/http/YOURHOSTNAME;\n\n        location / {\n            uwsgi_pass unix:/run/uwsgi/app/planb/socket;\n            include uwsgi_params;\n        }\n        location = /favicon.ico {\n            return 404;\n        }\n        location /static/ {\n        }\n    }\n\nGive *PlanB* *sudo* access to *ZFS* tools and fix paths::\n\n    cat >/etc/sudoers.d/planb <<EOF\n    planb ALL=NOPASSWD: /sbin/zfs, /bin/chown\n    EOF\n\n    zfs create tank/BACKUP -o mountpoint=/srv/backups\n    chown planb /srv/backups\n    chmod 700 /srv/backups\n\n(Note that setting up a different mount point is optional. See also\n`README-zpool.rst <./README-zpool.rst>`_ for additional tips.\n\nSet up ``qcluster`` for scheduled tasks::\n\n    # (in the source, this file is in rc.d)\n    cp ${VIRTUAL_ENV:-/usr/local}/share/planb/planb-queue.service \\\n      /etc/systemd/system/\n\n    ${EDITOR:-vi} /etc/systemd/system/planb-queue.service\n\n    systemctl daemon-reload &&\n      systemctl enable planb-queue &&\n      systemctl start planb-queue &&\n      systemctl status planb-queue\n\nSet up the ``qcluster`` for dutree tasks. If you do not use dutree\nor if you want to run dutree on the default qcluster you can set\n``Q_DUTREE_QUEUE='PlanB'`` in ``/etc/planb/settings.py``.::\n\n    cp ${VIRTUAL_ENV:-/usr/local}/share/planb/planb-queue-dutree.service \\\n      /etc/systemd/system/\n\n    ${EDITOR:-vi} /etc/systemd/system/planb-queue-dutree.service\n\n    systemctl daemon-reload &&\n      systemctl enable planb-queue-dutree &&\n      systemctl start planb-queue-dutree &&\n      systemctl status planb-queue-dutree\n\nInstall automatic jobs::\n\n    planb loaddata planb_jobs\n\nDon't forget a logrotate config::\n\n    cat >/etc/logrotate.d/planb <<EOF\n    /var/log/planb/*.log {\n            weekly\n            missingok\n            rotate 52\n            compress\n            delaycompress\n            notifempty\n            create 0644 planb www-data\n            sharedscripts\n    }\n    EOF\n\nCreate aliases to quickly mount/unmount the current working directory\nin your ``~/.bashrc``::\n\n    alias zfs-quick-mount=\"zfs load-key -L \\\n        \"'\"file:///tank/_local/zfskeys/${PWD#/}/_key.bin\" \"${PWD#/}\" &&\n        zfs mount \"${PWD#/}\" && cd .'\n    alias zfs-quick-umount='cd / && if zfs umount \"${OLDPWD#/}\"\n        then zfs unload-key \"${OLDPWD#/}\"; cd \"${OLDPWD}\"\n        else cd \"${OLDPWD}\"; false; fi'\n\n.. warning:: WARNING: The example above uses local key files! This will be\n             fixed/replaced in upcoming commits.\n\n\n-------------------------\nConfiguring a remote host\n-------------------------\n\nCreate a ``remotebackup`` user on the remote host (or ``encbackup`` for\nbackups encrypted at the source [#]_ [#]_, which is beyond the scope of\nthis document)::\n\n    useradd -m remotebackup\n\nConfigure *sudo* access using ``visudo -f /etc/sudoers.d/remotebackup``::\n\n    # Backup user needs to be able to get the files\n    remotebackup ALL=NOPASSWD: /usr/bin/rsync --server --sender *\n    remotebackup ALL=NOPASSWD: /usr/bin/ionice -c2 -n7 /usr/bin/rsync --server --sender *\n    remotebackup ALL=NOPASSWD: /usr/bin/ionice -c3 /usr/bin/rsync --server --sender *\n\n    # Optional, for planb-zfsync.sh (only destroy snapshots with @ in the name)\n    remotebackup ALL=NOPASSWD: /sbin/zfs destroy *@*\n    remotebackup ALL=NOPASSWD: /sbin/zfs list *\n    remotebackup ALL=NOPASSWD: /sbin/zfs send *\n    remotebackup ALL=NOPASSWD: /sbin/zfs set *\n    remotebackup ALL=NOPASSWD: /sbin/zfs snapshot *\n\nObserve how the ``--server --sender`` makes the rsync read-only.\n\nSet up the ssh key like you'd normally do::\n\n    mkdir -p ~remotebackup/.ssh\n    cat >>~remotebackup/.ssh/authorized_keys <<EOF\n    ... ssh public key from /var/spool/planb/.ssh/id_rsa.pub goes here ...\n    EOF\n\n    chmod 640 ~remotebackup/.ssh/authorized_keys\n    chown remotebackup -R ~remotebackup/.ssh\n\nWhen you use this pattern, you can tick ``use_sudo`` and set the remote\nuser to ``remotebackup``.\n\n\n-------------------------------\nAdding post-backup notification\n-------------------------------\n\nDo you want a notification when a backup succeeds? Or when it fails?\n\nYou can add something like this to your settings::\n\n    from datetime import datetime\n    from subprocess import check_call\n    from django.dispatch import receiver\n    from planb.signals import backup_done\n\n    @receiver(backup_done)\n    def notify_zabbix(sender, fileset, success, **kwargs):\n        if success:\n            key = 'planb.get_latest[{}]'.format(fileset.unique_name)\n            val = datetime.now().strftime('%s')\n            cmd = (\n                'zabbix_sender', '-c', '/etc/zabbix/zabbix_agentd.conf',\n                '-k', key, '-o', val)\n            check_call(cmd)\n\nThat combines nicely with a backup host discovery rule using ``blist``::\n\n    # Machine discovery (redirects stderr to mail).\n    UserParameter=planb.discovery, \\\n      ( planb blist --zabbix 3>&2 2>&1 1>&3 \\\n      | mail -E -s 'ERROR: planb.discovery (zabbix)' root ) 2>&1\n\n\n----------------\nDoing daily jobs\n----------------\n\nA quick hack to get daily reports up and running, is by placing something\nlike this in ``/etc/planb/planb_custom.py``::\n\n    from planb.contrib.billing import BossoBillingPoster, daily_hostgroup_report\n\n    def daily_billing_report():\n        \"\"\"\n        This function is added into: Home >> Task Queue >> Scheduled task\n        As: \"Report to Billing\" <planb_custom.daily_bosso_report>\n        \"\"\"\n        daily_hostgroup_report(BossoBillingPoster('http://my.url.here/'))\n\n\n------\nF.A.Q.\n------\n\nCan I use the software and customize it to my own needs?\n    It is licensed under the GNU GPL version 3.0 or higher. See the\n    LICENSE file for the full text. That means: probably yes, but you\n    may be required to share any changes you make. But you were going to\n    do that anyway, right?\n\n\nMails for backup success are sent, but mails for failure are not.\n    Check the ``DEBUG`` setting. At the moment, error-mails are sent\n    through the logging subsystem and that is disabled when running in\n    debug-mode.\n\n\nWhere are the ssh host fingerprints (``known_hosts`` files) stored?\n    They're in ``~planb/.ssh/known_hosts.d/``. If you want to ``ssh``\n    manually, you can add this to ``~planb/.profile``::\n\n        ssh() {\n            for arg in \"$@\"; do\n                case $arg in\n                -*) ;;\n                *) break ;;\n                esac\n            done\n            if test -n \"$arg\"; then\n                host=${arg##*@}\n                echo \"(adding: \\\n        -o UserKnownHostsFile=$HOME/.ssh/known_hosts.d/$host)\" >&2\n                /usr/bin/ssh -o HashKnownHosts=no \\\n                  -o UserKnownHostsFile=$HOME/.ssh/known_hosts.d/$host \"$@\"\n            else\n                /usr/bin/ssh \"$@\"\n            fi\n        }\n\n\nCan I use a *jump host*?\n    You can add ``-e 'ssh -J jumpuser@jumphost'`` to the *rsync*\n    transport flags. Observe that the known hosts file of *target* will\n    contain the fingerprint of the *jump host*.\n\n\nAre bandwidth limits in place?\n    Yes, the default for the *rsync* transport is 10MB/s (megabyte). You\n    can lower or raise this by adding ``--bwlimit=10M`` to the transport\n    flags.\n\n\nI've increased the bwlimit, but it's still slow.\n    If you notice that you're limited by ssh encryption CPU speed, you\n    can consider setting the preferred ciphers in ``~planb/.ssh/config``::\n\n        Host *\n            # The default is:\n            #\n            #   chacha20-poly1305@openssh.com,\n            #   aes128-ctr,aes192-ctr,aes256-ctr,\n            #   aes128-gcm@openssh.com,aes256-gcm@openssh.com\n            #\n            # The available ciphers may be obtained using \"ssh -Q cipher\".\n            # (Adding a non-existent one will yield a \"Bad SSH2 cipher spec\".)\n            #\n            # The AES ciphers are commonly hardware/CPU accelerated.\n            #\n            Ciphers aes128-ctr,aes128-gcm@openssh.com,aes256-ctr,\\\n                aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,3des-cbc\n\nRemoving a fileset does not wipe the filesystem from disk, what should I do?\n    This is done intentionally. You should periodically use ``planb slist\n    --stale`` to check for *stale* filesystems.\n\n    You can them remove them manually using ``zfs destroy [-r] FILESYSTEM``.\n\n\nRsync complains about ``failed to stat`` or ``mkdir failed``.\n    If rsync returns these messages::\n\n        rsync: recv_generator: failed to stat \"...\": Permission denied (13)\n        rsync: recv_generator: mkdir \"...\" failed: Permission denied (13)\n\n    Then you may be looking at parent directories with crooked\n    permissions, like 077. Fix the permissions on the remote end.\n\n    However, many of these problems have likely been fixed by the\n    addition of the ``--chmod=Du+rwx`` rsync option.\n\n\nRsync complains about ``Invalid or incomplete multibyte or wide character``.\n    If rsync returns with code 23 and says this::\n\n        rsync: recv_generator: failed to stat \"...\\#351es-BCS 27-09-11.csv\":\n          Invalid or incomplete multibyte or wide character (84)\n\n    Then you might be backing up old hosts with legacy Latin-1 encoding\n    on the filesystem. Adding ``--iconv=utf8,latin1`` to the rsync transport\n    flags should fix it.\n\n    You may need rsync version 3 or higher for that.\n\n    Right now we opt to *not* implement any of these workarounds:\n\n    * Patch rsync to cope with ``EILSEQ`` (84) \"Illegal byte sequence\".\n    * Cope with error code 23 and pretend that everything went fine.\n\n    Instead, you should install a recent rsync and/or fix the filenames\n    on your remote filesystem.\n\n\nThe ``mkvirtualenv`` said ``locale.Error: unsupported locale setting``.\n    You need to install the right locales until ``perl -e setlocale`` is\n    silent. How depends on your system and your config. See ``locale`` and\n    e.g. ``locale-gen en_US.UTF-8``.\n\n\nThe ``uwsgi`` log complains about *\"No module named site\"*.\n    If your uwsgi fails to start, and the log looks like this::\n\n        Python version: 2.7.12 (default, Nov 19 2016, 06:48:10)\n        Set PythonHome to /srv/virtualenvs/planb\n        ImportError: No module named site\n\n    Then your uWSGI is missing the Python 3 module. Go install\n    ``uwsgi-plugin-python3``.\n\n\n-------\nAuthors\n-------\n\nPlanB was started in 2013 as \"OSSO backup\" by Alex Boonstra at OSSO B.V. Since\nthen, it has been evolved into *PlanB*. When it was Open Sourced by Walter\nDoekes in 2017, the old commits were dropped to ensure that any private company\ninformation was not disclosed. Since then, Harm Geerts has also been\nbusy on the project.\n\n\n---------\nFootnotes\n---------\n\n.. [#] If you want your data encrypted before it gets sent to the PlanB server,\n       check out the OSSO blog:\n       `on the fly encrypted backups using gocryptfs (2020)\n       <https://www.osso.nl/blog/offsite-on-the-fly-encrypted-backups-gocryptfs/>`_\n.. [#] An older OSSO blog about on the fly encryption at the source:\n       `on the fly encrypted backups using encfs (2015)\n       <https://www.osso.nl/blog/on-the-fly-encrypted-backups/>`_\n\n.. |PlanB| image:: assets/planb_head.png\n    :alt: PlanB - automating remote backups and snapshots with zfs/rsync\n\n\n\n\n-------\nChanges\n-------\n\nv1.7 - *2022-09-20*\n~~~~~~~~~~~~~~~~~~~~~~~\n\n**Core**\n\n- Refactor ``Storage`` and ``Dataset`` classes.\n- Consolidate storage location in ``Fileset`` field ``dataset_name``.\n- Refactor ``Storage`` configuration.\n- Refactor backup retention.\n- Add support for hourly backups.\n- Add configurable blacklist hours.\n- Refactor snapshots, drop retention prefixes.\n- A backup now creates one snapshot.\n- Improve snapshot interval stability.\n- Replace custom planb script with normal python entry point.\n\n**Tasks**\n\n- Implement task to allow renaming of filesets in the Storage engine.\n- Enforce global ``Fileset`` locks to prevent race conditions.\n\n**Web interface**\n\n- Show a message when a rename task has spawned from a change.\n- Don't show manually queued Filesets in the backup failure warning.\n\n**Other**\n\n- Fix ``blist`` to show any transport type.\n- Fix ``bclone`` to also clone transport.\n- Fix ``bqueueflush`` to default to the main queue.\n- Cleanup ZFS workdir switching.\n- Fix many bugs.\n- Add many tests.\n- Add tox and travis-ci configuration.\n- Drop python 3.5 support.\n- Fix compatibility with latest django-q.\n- Fix model validation with choices in django>=2.1.\n- Exclude manual backups from triggering failure.\n- Improvements and bug fixes to swiftsync\n- Improvements and bug fixes to zfssync\n\n\nv1.6.post1 - *2019-03-20*\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Web interface**\n\n- Show last snapshot size distribution, and first backup success date,\n  in hostconfig edit-view.\n- Show real-used-size instead of apparent-used-size in snapshot data\n  distribution. If you have ZFS compression enabled, you'll see a drop\n  in the snapshot size summaries (not in the total disk usage).\n- Hide last-error message in hostconfig edit-view for hosts that are\n  disabled.\n\n**Other**\n\n- Single Sign-On (Discourse style) can be enabled (using the optional\n  kleides-dssoclient dependency). See KLEIDES_DSSO_ENDPOINT option.\n- Tweak permissions so you don't need is_superuser powers anymore.\n- Update BossoBillingPoster for posting backup data counts to (internal)\n  Bosso system.\n\n\nv1.5 - *2018-06-13*\n~~~~~~~~~~~~~~~~~~~\n\n**Web interface**\n\n- Show \"time since last backup\" in listing, instead of just OK/FAIL.\n\n**Tasks**\n\n- Add locking to dutree scanner, so the filesystem isn't raped. Only do\n  one dutree scan at a time.\n- Change scheduler: jobs are now scheduled ahead of time by deducting\n  the expected duration.\n- Fix rsync issue when remote directory permissions are wrong\n  (unreadable by user). In that case, the download (as root user) would\n  succeed, but later changes would fail locally (planb user).\n\n**Other**\n\n- Change schema, removing unnecessary weekly/monthly booleans.\n- Fix ``total_size_mb`` in report, which was too large.\n- Improve ``breport`` command to output to stdout by default.\n\n\nv1.4 - *2018-04-06*\n~~~~~~~~~~~~~~~~~~~\n\n**Web interface**\n\n- Show job failures in hostconfig detail view.\n- Reduce clutter in hostconfig list view, using smaller items and less\n  clutter.\n- Show average run time, instead of last run time.\n\n**Other**\n\n- Fix bug with sending of breport emails.\n- Use git version for pip-install if available; add makefile for quick\n  commands.\n- Update qcluster argv so it's still considered busy while doing the\n  dutree scan.\n\n\nv1.3 - *2018-03-19*\n~~~~~~~~~~~~~~~~~~~\n\n**Web interface**\n\n- Disallow deletion of non-empty host groups.\n\n**CLI**\n\n- Add ``breport`` command to send out backup reports. See the template\n  in templates/planb/report_email_body.txt. Note that the report is\n  still in alpha stage. NOTE: To get e-mail reports as well, you need\n  to have ``rst2html`` installed.\n- Add ``--with-disabled`` to ``confexport`` command to get complete\n  exports.\n- Fix that planb runserver can be used for development (through\n  PYTHONPATH propagation).\n\n**Other**\n\n- Dependency updates to Django 2.0+.\n- Add backup history record keeping, for better logging and averages.\n\n\nv1.2 - *2017-09-18*\n~~~~~~~~~~~~~~~~~~~\n\n- Fix release, this time without pyc files and with wheel package.\n  Run this for upload: python setup.py sdist bdist_wheel upload\n\n\nv1.1 - *2017-09-18*\n~~~~~~~~~~~~~~~~~~~\n\n**Settings**\n\n- Add ``PLANB_DEFAULT_INCLUDES``.\n- Rename ``ZFS_BIN``, ``SUDO_BIN`` and ``RSYNC_BIN`` to ``PLANB_<setting>``.\n- Fix allowing use of alternate ``DJANGO_SETTINGS_MODULE``.\n\n**Web interface**\n\n- Add hosts to hostgroup listing.\n- Allow ordering hosts by enabled/queued/running.\n\n**CLI**\n\n- Add \"stale mounts\" listing (planb slist).\n- Create \"hostconfig\" export in YAML or JSON format (planb confexport).\n\n**Queue**\n\n- Fix so long running jobs don't suffer from lost DB connections.\n\n**Other**\n\n- Misc refactoring/cleanup.\n\n\nv1.0 - *2017-07-11*\n~~~~~~~~~~~~~~~~~~~\n\n- Initial release.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ossobv/planb",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "planb",
    "package_url": "https://pypi.org/project/planb/",
    "platform": "linux",
    "project_url": "https://pypi.org/project/planb/",
    "project_urls": {
      "Homepage": "https://github.com/ossobv/planb"
    },
    "release_url": "https://pypi.org/project/planb/1.7/",
    "requires_dist": [
      "Django (<3.3,>=2.2)",
      "django-q (<2,>=1.2.1)",
      "django-multi-email-field (<0.7,>=0.6.1)",
      "dutree (<2,>=1.6)",
      "PyYAML (>=5.1.1)",
      "redis",
      "setproctitle (<2,>=1.1.8)",
      "python-dateutil (<3,>=2.8.1)"
    ],
    "requires_python": "",
    "summary": "PlanB automates remote SSH+rsync backups",
    "version": "1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15155067,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c95c0584f5a52c908f710e169ea84443c63b2d68bd3a57eacf3dd0c6935a1bec",
          "md5": "e19916e53a27e8e623feb14843e57f74",
          "sha256": "cbc4ad0f1b08493b5d42f826861b3e3042aa299091433f95bd7ef587377b68bb"
        },
        "downloads": -1,
        "filename": "planb-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e19916e53a27e8e623feb14843e57f74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46130,
        "upload_time": "2017-07-11T13:22:05",
        "upload_time_iso_8601": "2017-07-11T13:22:05.467877Z",
        "url": "https://files.pythonhosted.org/packages/c9/5c/0584f5a52c908f710e169ea84443c63b2d68bd3a57eacf3dd0c6935a1bec/planb-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7d0db7544875b26df6cb8d9fe8bccec79115b47a84a56780fdd54487dbcf043",
          "md5": "e13b19a7d1438413b307493906633649",
          "sha256": "c739f25d0819a60746e1239eb8da4035faf012946906f8be274d163e1e5d42fd"
        },
        "downloads": -1,
        "filename": "planb-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e13b19a7d1438413b307493906633649",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 78422,
        "upload_time": "2017-09-18T10:25:46",
        "upload_time_iso_8601": "2017-09-18T10:25:46.305707Z",
        "url": "https://files.pythonhosted.org/packages/e7/d0/db7544875b26df6cb8d9fe8bccec79115b47a84a56780fdd54487dbcf043/planb-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c9444148deee71a1b1b2f6896f49104c0f293e1c71a4854c7e033015d2fd4a7",
          "md5": "3300339f34513679ed37f32e125186e1",
          "sha256": "4e1d8970a564ab87cbf98338a8c7f7587e1d32427f74baf8db825334722187ba"
        },
        "downloads": -1,
        "filename": "planb-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3300339f34513679ed37f32e125186e1",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "requires_python": null,
        "size": 70012,
        "upload_time": "2017-09-18T10:47:13",
        "upload_time_iso_8601": "2017-09-18T10:47:13.182350Z",
        "url": "https://files.pythonhosted.org/packages/3c/94/44148deee71a1b1b2f6896f49104c0f293e1c71a4854c7e033015d2fd4a7/planb-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ac8933959100102828795e8d46a660fb923f0dde1d3332225822744b9b7e82f",
          "md5": "1771de5059a09bbf418648ce058629fa",
          "sha256": "2d66a1f5f8ab31d9603c2e1b41c02cd59aff15104b2a6e1945e0fef6f92174ca"
        },
        "downloads": -1,
        "filename": "planb-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1771de5059a09bbf418648ce058629fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47172,
        "upload_time": "2017-09-18T10:47:11",
        "upload_time_iso_8601": "2017-09-18T10:47:11.499396Z",
        "url": "https://files.pythonhosted.org/packages/9a/c8/933959100102828795e8d46a660fb923f0dde1d3332225822744b9b7e82f/planb-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b6bbeb8cf7bbc906dbeef5b32fc7c82a9eab025264fd9933f1717ee37340ed5",
          "md5": "4d3c44e6400359c0242647a71008f909",
          "sha256": "6aa916786f0bcbc62d1d82e2e25d66a14207c6f5e83d856756be8b559a47cf44"
        },
        "downloads": -1,
        "filename": "planb-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d3c44e6400359c0242647a71008f909",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "requires_python": null,
        "size": 70091,
        "upload_time": "2017-09-18T10:52:57",
        "upload_time_iso_8601": "2017-09-18T10:52:57.273549Z",
        "url": "https://files.pythonhosted.org/packages/6b/6b/beb8cf7bbc906dbeef5b32fc7c82a9eab025264fd9933f1717ee37340ed5/planb-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4942de97a4c927f819fdfcb9c7b4db769464faa0100ad86578cc3491410cda76",
          "md5": "52237d36ef78b7ca69960a5d4475c01a",
          "sha256": "3cd17a083d66208fdacd83766e026900e4f962a5aaa54d92706e6e25627da757"
        },
        "downloads": -1,
        "filename": "planb-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "52237d36ef78b7ca69960a5d4475c01a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47427,
        "upload_time": "2017-09-18T10:52:55",
        "upload_time_iso_8601": "2017-09-18T10:52:55.548452Z",
        "url": "https://files.pythonhosted.org/packages/49/42/de97a4c927f819fdfcb9c7b4db769464faa0100ad86578cc3491410cda76/planb-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78f3dcfdd5016e7d3671e2877c3307acfee8b94490f51e2ac67181fb6b6a1f71",
          "md5": "329b603ea8955caf3c386419fb930ecc",
          "sha256": "69250195e790483b8c012430509808857ddf3fbf5b36333f4cbbd0f884678a34"
        },
        "downloads": -1,
        "filename": "planb-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "329b603ea8955caf3c386419fb930ecc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 77040,
        "upload_time": "2018-03-19T10:14:25",
        "upload_time_iso_8601": "2018-03-19T10:14:25.096749Z",
        "url": "https://files.pythonhosted.org/packages/78/f3/dcfdd5016e7d3671e2877c3307acfee8b94490f51e2ac67181fb6b6a1f71/planb-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4880a2cc705922d254e0d21590d8a1a4d54df930b5e1c388320d819544db1b8",
          "md5": "3fccefbc503038ff5d68b2ed60a17922",
          "sha256": "5c91d62327fca9850a2ffbc45f7026a5400d4e838dd39285f93c8eaa8d28ec41"
        },
        "downloads": -1,
        "filename": "planb-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3fccefbc503038ff5d68b2ed60a17922",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57921,
        "upload_time": "2018-03-19T10:14:28",
        "upload_time_iso_8601": "2018-03-19T10:14:28.071828Z",
        "url": "https://files.pythonhosted.org/packages/c4/88/0a2cc705922d254e0d21590d8a1a4d54df930b5e1c388320d819544db1b8/planb-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90c794a8437ecba42555899c4ff77fcd3fbc4f618f6e9432f19077a7d0b2e22b",
          "md5": "41d7f83259d778a9eb85f6866a02b007",
          "sha256": "cab2029ffd700ea6301c7559762843129a23bfbecb35572b498ad8399f9bef40"
        },
        "downloads": -1,
        "filename": "planb-1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41d7f83259d778a9eb85f6866a02b007",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 81722,
        "upload_time": "2018-04-06T15:51:09",
        "upload_time_iso_8601": "2018-04-06T15:51:09.292843Z",
        "url": "https://files.pythonhosted.org/packages/90/c7/94a8437ecba42555899c4ff77fcd3fbc4f618f6e9432f19077a7d0b2e22b/planb-1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ed29e3c5848aad57cc7420ae44e86ce3fabad6bbe4e865e8ff4b8b034ef13e0",
          "md5": "5ef22672027389f583b83fc1028979a9",
          "sha256": "1538654af56175db43e70d0b56214e4c9996cc20b649172e49fa79d307310896"
        },
        "downloads": -1,
        "filename": "planb-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5ef22672027389f583b83fc1028979a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62035,
        "upload_time": "2018-04-06T15:51:10",
        "upload_time_iso_8601": "2018-04-06T15:51:10.767808Z",
        "url": "https://files.pythonhosted.org/packages/4e/d2/9e3c5848aad57cc7420ae44e86ce3fabad6bbe4e865e8ff4b8b034ef13e0/planb-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bda01cab0b133d2724afa3057f224b3c3d2d24a2e9d4818b14a2783a3cec74cd",
          "md5": "afec56378874820d609cea7871691051",
          "sha256": "11a0fb633d8094314cd886c39c90ae4da7122ea2cb931d08e25835fb54d84ee7"
        },
        "downloads": -1,
        "filename": "planb-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "afec56378874820d609cea7871691051",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57593,
        "upload_time": "2018-06-13T09:26:35",
        "upload_time_iso_8601": "2018-06-13T09:26:35.849428Z",
        "url": "https://files.pythonhosted.org/packages/bd/a0/1cab0b133d2724afa3057f224b3c3d2d24a2e9d4818b14a2783a3cec74cd/planb-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4abed1349a3c74c2ead231c313a865e1c51c85def1dc1cb939eb2a108ccb836a",
          "md5": "be25d4d899f9add9c8b29ddcbc2d674f",
          "sha256": "6e423954a4c20f4b2ce56b396dc818fada73936166c08ba1bf615763263696ca"
        },
        "downloads": -1,
        "filename": "planb-1.6.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "be25d4d899f9add9c8b29ddcbc2d674f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66721,
        "upload_time": "2019-03-20T12:51:08",
        "upload_time_iso_8601": "2019-03-20T12:51:08.731909Z",
        "url": "https://files.pythonhosted.org/packages/4a/be/d1349a3c74c2ead231c313a865e1c51c85def1dc1cb939eb2a108ccb836a/planb-1.6.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5328382d8bd7e10e226b5811c12a29ae86ec78c2ee2c3d669cd6200e36c41fa9",
          "md5": "eae64cc2fbb643513cd5e372bf7621c4",
          "sha256": "ce8fbbfadd5f78c2e2664ee86a03f7d30f13624b122e3a057fd0d900ca4eaec5"
        },
        "downloads": -1,
        "filename": "planb-1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eae64cc2fbb643513cd5e372bf7621c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 165669,
        "upload_time": "2022-09-20T14:01:32",
        "upload_time_iso_8601": "2022-09-20T14:01:32.213537Z",
        "url": "https://files.pythonhosted.org/packages/53/28/382d8bd7e10e226b5811c12a29ae86ec78c2ee2c3d669cd6200e36c41fa9/planb-1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "268b903bfda11de456419fa14450bbd65549bfbb96c02fe9ae47eea61939f6b5",
          "md5": "ceafa3cec1a95f593f1631959e7bcf69",
          "sha256": "ff0b81760eb70e0538e67c4c315104bddb701f8afcb04ba8d2fa2d36c50353d2"
        },
        "downloads": -1,
        "filename": "planb-1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ceafa3cec1a95f593f1631959e7bcf69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 121176,
        "upload_time": "2022-09-20T14:01:34",
        "upload_time_iso_8601": "2022-09-20T14:01:34.227454Z",
        "url": "https://files.pythonhosted.org/packages/26/8b/903bfda11de456419fa14450bbd65549bfbb96c02fe9ae47eea61939f6b5/planb-1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5328382d8bd7e10e226b5811c12a29ae86ec78c2ee2c3d669cd6200e36c41fa9",
        "md5": "eae64cc2fbb643513cd5e372bf7621c4",
        "sha256": "ce8fbbfadd5f78c2e2664ee86a03f7d30f13624b122e3a057fd0d900ca4eaec5"
      },
      "downloads": -1,
      "filename": "planb-1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eae64cc2fbb643513cd5e372bf7621c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 165669,
      "upload_time": "2022-09-20T14:01:32",
      "upload_time_iso_8601": "2022-09-20T14:01:32.213537Z",
      "url": "https://files.pythonhosted.org/packages/53/28/382d8bd7e10e226b5811c12a29ae86ec78c2ee2c3d669cd6200e36c41fa9/planb-1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "268b903bfda11de456419fa14450bbd65549bfbb96c02fe9ae47eea61939f6b5",
        "md5": "ceafa3cec1a95f593f1631959e7bcf69",
        "sha256": "ff0b81760eb70e0538e67c4c315104bddb701f8afcb04ba8d2fa2d36c50353d2"
      },
      "downloads": -1,
      "filename": "planb-1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "ceafa3cec1a95f593f1631959e7bcf69",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 121176,
      "upload_time": "2022-09-20T14:01:34",
      "upload_time_iso_8601": "2022-09-20T14:01:34.227454Z",
      "url": "https://files.pythonhosted.org/packages/26/8b/903bfda11de456419fa14450bbd65549bfbb96c02fe9ae47eea61939f6b5/planb-1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}