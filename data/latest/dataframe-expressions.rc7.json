{
  "info": {
    "author": "G. Watts (IRIS-HEP/UW Seattle)",
    "author_email": "gwatts@uw.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "# dataframe_expressions\n\n Simple accumulating of expressions for dataframe operations\n\n## Expression Samples\n\nYou start with a top level data frame:\n\n```python\nfrom dataframe_expressions import DataFrame\nd = DataFrame()\n```\n\nNow you can mask it with simple operations:\n\n```python\nd1 = d[d.x > 10]\n```\n\nThe operators `<,>, <=, >=, ==,` and `!=` are all supported. You can also combine logical expressions, though watch for operator precedence:\n\n```python\nd1 = d[(d.x > 10) & (d.x < 20)]\n```\n\nOf course, chaining is also allowed:\n\n```python\nd1 = d[dx > 10]\nd2 = d1[d1.x < 20]\n```\n\nAnd `d2` will be identical to d1 of the last example.\n\nThe basic 4 binary math operators work as well\n\n```python\nd1 = d.x/1000.0\n```\n\nExtension functions are supported:\n\n```python\nd1 = d.x.count()\n```\n\nAnd, much the same way, `numpy` functions are supported:\n\n```python\nimport numpy as np\nd1 = np.sin(d.x)\n```\n\nas well as some python function:\n\n```python\nd1 = abs(d.x)\n```\n\nInternally, this is rendered as `d.x.sin()`.\n\n## Lambda functions and captured variables\n\nIt is possible to use lambda's that capture variables, allowing combinations of objects. For example:\n\n```python\nd.jets.map(lambda j: d.eles.map(lambda e: j.DeltaR(e)))\n```\n\nWould produce a stream of `DataFrame`'s for each jet with each electron. It is up to the backend how a function like `map` is used (and of course `DeltaR`). Further, the backend must run the parsing as arguments can be arbitrary, so `dataframe_expressions` can't figure out the meaning on its own. The function `map` here, for example, has no special meaning in this library.\n\n## Backend Functions\n\nSometimes the backend defines some functions which are directly callable. For example, `DataR` which might take several parameters. With some hints, these are encoded as direct function calls in the final `ast`:\n\n```python\nfrom dataframe_expressions import user_func\n\n@user_func\ndef calc_it (pt1: float) -> float:\n    assert False, 'Should never be called'\n\ncalced = calc_it(d.jets.pt)\n```\n\nIn this case, `calced` would be expected to be a column of jet `pt`'s that were all put together.\n\n## Filter Functions\n\nIf a filter gets to be too complex (the code between a `[` and a `]`), then it might be simpler to put it in a separate function.\n\n```python\ndef good_jet(j):\n    (j.pt > 30) & (abs(j.eta) < 2.4)\n\ngood_jets_pt = df.jets[good_jet].pt\n```\n\n## Adding computed expressions to the Data Model\n\nThere are two ways to define _new columns_ in the data model. In both cases the idea is that a new computation expression can replace the old one. The first method looks more `pandas` like, and the second one looks more like a regular expression substitution. The second method is quite general, powerful, and thus quite likely to take your foot off. Not sure it will survive the prototype.\n\n### Adding a new computed expression column\n\nThis is the most common way to add a new expression to the data model: one provides a lambda function that is computed during rendering by `dataframe_expressions`:\n\n```python\ndf.jets['ptgev'] = lambda j: j.pt / 1000.0\n```\n\nBy default the argument is everything that proceeds the brackets - in this case `df.jets`. All the rules about capturing variables apply here, so it is possible to add a set of tracks near the jet, for example, using this (as long as it is implemented by the backend). For example:\n\n```python\ndef near(tks, j):\n    return tks[tks.map(lambda t: DeltaR(t, j) < 0.4)]\n\ndf.jets['tracks'] = lambda j: near(df.tracks, j)\n\n# This will now get you the number of tracks near each jet:\ndf.jets.tracks.Count()\n```\n\nThe above assumes a lot of backend implementation: `DeltaR`, `map`, `Count`, along with the detector data model that has jets and tracks, but hopefully gives one an idea of the power available.\n\n### Replacing the contents of a column\n\nIt is possible to graft one part of the data model into another part of the data model, when necessary. It can be done with the above lambda expression as well, but this is a short cut:\n\n```python\ndf.jets['mcs'] = df.mcs[df.mcs.pdgId == 11]\n\nhow_many_mcs = df.jets.mcs.Count()\n```\n\nThough that would have the same number for every jet.\n\nBecause of the way rendering works, the following also does what you expect:\n\n```python\ndf.jets['ptgev'] = df.jets.pt/1000.0\n\njetpt_in_gev = df.jets.ptgev\n```\n\nThis is because in the current `dataframe_expressions` model, every single appearance of a common expression, like `df.jets` corresponds to the same same set of jets. In sort, implied iterators are common here. In this prototype it isn't obvious this should be here.\n\nAll of this will work even through a filter, as you might expect:\n\n```python\ndf.jets['ptgev'] = df.jets.pt / 1000.0\n\njetpt_in_gev = df.jets[df.jets.ptgev > 30].ptgev\n```\n\nThe prototype implementation is particularly fragile - but that is due to poor design rather than a technical limitation.\n\n### Adding to the data model using objects\n\nAnother way to do this is build an object. For example, lets say you want to make it easy to do 3-vector operations. You might write something like this:\n\n```python\nclass vec(DataFrame):\n    def __init__(self, df: DataFrame):\n        DataFrame.__init__(self, df)\n\n    @property\n    def x(self) -> DataFrame:\n        return self.x\n    @property\n    def y(self) -> DataFrame:\n        return self.y\n    @property\n    def z(self) -> DataFrame:\n        return self.z\n\n    @property\n    def xy(self) -> DataFrame:\n        import numpy as np\n        return np.sqrt(self.x*self.x + self.y*self.y)\n```\n\nNow you can write `v.xy` and you have the `L_xy` distance from the origin. It is also possible to implement vector operations. This library doesn't help you with that, but it isn't difficult.\n\nYou can add the class decorator `exclusive_class` if you only want the supplied properties to be available (so `v.zz` would cause an error).\n\nThe extra work to support this is almost trivial - see test cases, even one with vector addition, in the file `test_object.py` for further examples.\n\n### Adding to the data model using an Alias\n\nThis is a simple feature which allows you to invent short hand for more complex expressions. This makes it easy to use. Further, the backend never knows about these short-hand scripts - they are just substituted in on the fly as the DAG is built. For example, in the ATLAS experiment I to access jet pT in GeV i need to always divide by 1000. So:\n\n```python\ndefine_alias('', 'pt', lambda o: o.pt / 1000.0)\n```\n\nNow if one enters `d.jets.pt`, the backend will see it as if I typed `df.jets.pt/1000.0`. The same can be done for collections. For example:\n\n```python\ndefine_alias('.', 'eles', lambda e: e.Electrons(\"Electrons\"))\n```\n\nAnd when one enters `d.eles.pt` the backend will see `df.Electrons(\"Electrons\").pt / 1000.0`.\n\nThe aliases can reference each other (though no recursion is allowed), so fairly complex expressions can be built up. This library's alias resolution is quite simple (it is a prototype). Matching is possible. For example, if the first argument is a `.`, then only references directly off the dataframe are translated. This feature could be used to define a _personality_ module for an analysis for an experiment.\n\n## Usage with a backend\n\nWhile the above shows you want the library can track, it says nothing about how you use it. The following steps are necessary.\n\n1. Subclass `dataframe_expressions.DataFrame` with your class. Make sure you initialize the `DataFrame` sub class. However, no need to pass any arguments. For this discussion lets call this `MyDF`\n\n1. Users build expression as you would expect, `df = MyDF(...)`, and `df1 = df.jets[df.jets.pt > 10]`\n\n1. Users trigger rendering of the expression in your library in some way that makes sense, `get_data(df1)`\n\n1. When you get control with the top level `DataFrame` expression, you can now do the following to render it:\n\n```python\nfrom dataframe_expressions import render\nexpression = render(df1)\n```\n\n`expression` is an `ast.AST` that describes what is being looked at (e.g. `df.jets.pt`). If the expression is something like `df.jets.pt` then the ast is a chain of python `ast.Attribute` nodes, and the bottom one will be a special `ast_Dataframe` object that contains a member `dataframe` which points to your original sub-classed `MyDF`.\n\nIf there are filters, there is another special ast object you need to be able to process, `ast_Filter`. For example, `df[df.met > 50].jets.pt`, will have `expression` starting with two `ast.Attribute` nodes, followed by a `ast_Filter` node. There are two members there, one is `expr` and in this case it will contain the `df`, or the `ast_Dataframe` that points to `df`. The second member is `filter` which points to an expression that is the filter. It should evaluate to true or false. As long as there is repeated phrase, like `df` in `df[df.met > 50].jets.pt` or `df.jets` in `df.jets[df.jets.count() == 2]`, they will point to the same `ast.AST` object - so you can use that in walking the tree to recognize the same expression(s).\n\n## Technology Choices\n\nNot sure these are the right thing, but...\n\n- Using the python `ast` module to record expressions. Mostly because it is already complete and there are nice visitor objects that make walking it easy. Down side is that python does change the ast every few versions.\n\n- An attribute on DataFrame refers to some data. A method call, however, does not refer to data. So, you can say `d.pt` to get at the pt, but if you said `d.pt()` that would be \"bad\". The reason for this is so that we can add functions that do things in a fluent way. For example, `d.jets.count()` to count the number of jets. Or `d.jets[d.jets.pt > 100].count()` or similar. Really, the back end can interpret this, but the front-end semantics sort-of make this assumption.\n\n## Architecture Questions\n\nThis isn't an exhaustive list. Just a list of some choices I had to make to get this off the ground.\n\n- Should there be a `Column` and `Dataset`?\n  - Yes - turns out we have rediscovered why there is a Mask and a column distinction in numpy. So the Column object is really a Mask object. This is bad naming, but hopefully for this prototype that won't make much of a difference. So we should definitely think a bit about why a Mask has to be treated differently from a `DataFrame` - it isn't intuitively obvious until you get into the code.\n  - No - since things can return \"bool\" values and we don't know it because we have no type system, they are identical to a column, except we assume they are a df: `df[df.hasProdVtx & df.hasDecayVtx]`, for example.\n  - We should get rid of the concept of a parent, dynamic, and replace it with ast_DataFrame - we have it in here already - so why not just stick to that rather than having both it and `p`.\n\n- Should we allow for \"&\" and \"|\" as logical operators, redefining what they mean in python? numpy defines several logical operators which should translate, but those aren't implemented yet.\n\n- I currently have a parent as \"p\" in the expression, but then we have a dataframe ast and column ast - which makes it not needed. Why not just convert to using the same thing to refer to a df in an ast?\n  - Internally, the \"parent\" dataframe is represented as `p` - which means nothing can ever have a `p` object on it or all hell is likely to break loose. A very good argument for not doing it this way.\n\n- For typing I do not know how to forward declare so I can use COlumn and DataFrame inside my method definitions. Static type checkers should pick this up for now by simple logic.\n\n- Using BitAnd and BitOr for and and or - but should I use the logical and and or here to make it clear in the AST what we are talking about?\n\n- What does `d1[d[d.x > 0].jets.pt > 20].pt` mean? Is this where we are hitting the limit of things? I'd say it means nothing and should create an error. Something like `d1[(d[d.x > 0].jets.pt > 20).count()].pt` works, however. Actually even the above - what does that mean? Isn't the right way to do that is `d1[(d[d.x > 0].jets[d.jets.pt>0].count())]` or similar? Ugh. Ok - the thing to do for now is be strict, and we can add things which make life easier later.\n\n- Sometimes functions are defined in places they make no sense. For example, the `abs` (or any `numpy` function) is defined always, even if your `DataFrame` represents a collection of jets. A reason to have `columns` and `collections` as different objects to help the user, and help editors guess possibilities.\n\n- There should be no concept of `parent` in a `DataFrame`. The expression should be everything, and point to any referenced objects. This will be especially true if multiple root `DataFrame`'s are ever to be used.\n\n- Is it important to define new columns using the '=' sign? e.g. `df.jets.ptgev = df.jets.pt/1000.0`?\n\n- The rule that every expression that is the same implies the same implied iterator. That means the current code can't do 2 jets, for example. There are several ways to \"fix\" this, however, the biggest question: is this reasonable?\n\n- The ability to have an `exclusive_object` is implemented at runtime - perhaps we can come up with a scheme where we just define objects and they \"fit\" in correctly? Thus editors, etc., would be able to tag this as a problem.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gordonwatts/dataframe_expressions",
    "keywords": "",
    "license": "TBD",
    "maintainer": "Gordon Watts (IRIS-HEP/UW Seattle)",
    "maintainer_email": "gwatts@uw.edu",
    "name": "dataframe-expressions",
    "package_url": "https://pypi.org/project/dataframe-expressions/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/dataframe-expressions/",
    "project_urls": {
      "Homepage": "https://github.com/gordonwatts/dataframe_expressions"
    },
    "release_url": "https://pypi.org/project/dataframe-expressions/1.0.0/",
    "requires_dist": [
      "coverage ; extra == 'complete'",
      "flake8 ; extra == 'complete'",
      "numpy ; extra == 'complete'",
      "pytest ; extra == 'complete'",
      "pytest-asyncio ; extra == 'complete'",
      "pytest-cov ; extra == 'complete'",
      "twine ; extra == 'complete'",
      "wheel ; extra == 'complete'",
      "pytest ; extra == 'test'",
      "pytest-asyncio ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "flake8 ; extra == 'test'",
      "coverage ; extra == 'test'",
      "twine ; extra == 'test'",
      "wheel ; extra == 'test'",
      "numpy ; extra == 'test'"
    ],
    "requires_python": ">=3.6, <3.8",
    "summary": "Library to help with accumulating expressions",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8462472,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "427ffe9ee363f50061580f41be5c7d078041dc6206ade36cd5cb788a1dc62117",
          "md5": "73a6fcf8446f6e5c9627dca02a5fa24f",
          "sha256": "3f079906c18f92078a8a39956295b524500c3ddddd107996fe3bc515d202475e"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73a6fcf8446f6e5c9627dca02a5fa24f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <3.8",
        "size": 19734,
        "upload_time": "2020-06-28T08:02:49",
        "upload_time_iso_8601": "2020-06-28T08:02:49.381814Z",
        "url": "https://files.pythonhosted.org/packages/42/7f/fe9ee363f50061580f41be5c7d078041dc6206ade36cd5cb788a1dc62117/dataframe_expressions-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c93ef904d85250ee3bd6a6cbe357464bfaffd7f4a573df9c9612b06dd999fc5",
          "md5": "b9e39c584e2124dfb4c650e81be47cb3",
          "sha256": "5a0b1b3e460c61f7cb8f5977015a41b5e87432a1b1c4087b356776b35748355b"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b9e39c584e2124dfb4c650e81be47cb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <3.8",
        "size": 22060,
        "upload_time": "2020-06-28T08:02:50",
        "upload_time_iso_8601": "2020-06-28T08:02:50.590852Z",
        "url": "https://files.pythonhosted.org/packages/8c/93/ef904d85250ee3bd6a6cbe357464bfaffd7f4a573df9c9612b06dd999fc5/dataframe_expressions-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d5ff756f693ada8652eaa4b96445af0d21eae363f096c99e8ac286465ea1580",
          "md5": "f98e52c1d43efcfac6ec00a908ea97cb",
          "sha256": "e295550ebf33feda31996442dfdf4245b41231b41d923f59240e4d398d2bbdf2"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.0.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f98e52c1d43efcfac6ec00a908ea97cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <3.8",
        "size": 19892,
        "upload_time": "2020-06-27T06:57:44",
        "upload_time_iso_8601": "2020-06-27T06:57:44.478016Z",
        "url": "https://files.pythonhosted.org/packages/6d/5f/f756f693ada8652eaa4b96445af0d21eae363f096c99e8ac286465ea1580/dataframe_expressions-1.0.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23c1e1fe44358bde62504540beea8979ee771f3df5660f5a1be96c992b2a1595",
          "md5": "b753724330a8433301616081fb943163",
          "sha256": "6603fbdfac457ab0f8fd7f1173723ad2ac128ad9edf587258b8ebbb3984585ed"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "b753724330a8433301616081fb943163",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <3.8",
        "size": 22294,
        "upload_time": "2020-06-27T06:57:47",
        "upload_time_iso_8601": "2020-06-27T06:57:47.073015Z",
        "url": "https://files.pythonhosted.org/packages/23/c1/e1fe44358bde62504540beea8979ee771f3df5660f5a1be96c992b2a1595/dataframe_expressions-1.0.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "666bd56d1637289dcd20abaa41d442361430eece8836f9432f2e10896b427f5a",
          "md5": "7b2a4367583843d1d576c6cbf17f65c1",
          "sha256": "ae587f67fb5ea42efb4e38ae8af324dc618a8e514282b7f591bfda474f8cd2ba"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b2a4367583843d1d576c6cbf17f65c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <3.8",
        "size": 22455,
        "upload_time": "2020-07-15T03:40:13",
        "upload_time_iso_8601": "2020-07-15T03:40:13.690268Z",
        "url": "https://files.pythonhosted.org/packages/66/6b/d56d1637289dcd20abaa41d442361430eece8836f9432f2e10896b427f5a/dataframe_expressions-1.1.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82c7926e5477c73a902211305f380acd6d20db1265e51a9b8c4de4236f1db266",
          "md5": "26970c5c74d69d00546c3de73e6f760e",
          "sha256": "bff4a9df598e45965c95c0f3b02bac8caa8d1e1ebd360656a6a8f261d85da15d"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "26970c5c74d69d00546c3de73e6f760e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <3.8",
        "size": 24531,
        "upload_time": "2020-07-15T03:40:15",
        "upload_time_iso_8601": "2020-07-15T03:40:15.011010Z",
        "url": "https://files.pythonhosted.org/packages/82/c7/926e5477c73a902211305f380acd6d20db1265e51a9b8c4de4236f1db266/dataframe_expressions-1.1.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7886e24651c66b9d25f6ca4ee256b5ce4b155745da160ad1f2855072a7f02cb7",
          "md5": "a4a8fcf0736890a04e4352a8da2601d2",
          "sha256": "71841b29bd6304f18c147344498d726e04acdc22ac806de469182b04f0a80681"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1.0b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4a8fcf0736890a04e4352a8da2601d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <3.8",
        "size": 24150,
        "upload_time": "2020-07-20T17:18:29",
        "upload_time_iso_8601": "2020-07-20T17:18:29.008830Z",
        "url": "https://files.pythonhosted.org/packages/78/86/e24651c66b9d25f6ca4ee256b5ce4b155745da160ad1f2855072a7f02cb7/dataframe_expressions-1.1.0b2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7042da9c60f972b3a79d89eab7a3172fade613dfc154aedd97b3d7980a43b8e2",
          "md5": "60c00f979311037b77b3ac1bd19717ab",
          "sha256": "42c61df93fa477bac12fb614aa7e401f8c5645d44bda52558dbf46671be8bd0d"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "60c00f979311037b77b3ac1bd19717ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <3.8",
        "size": 27070,
        "upload_time": "2020-07-20T17:18:30",
        "upload_time_iso_8601": "2020-07-20T17:18:30.194864Z",
        "url": "https://files.pythonhosted.org/packages/70/42/da9c60f972b3a79d89eab7a3172fade613dfc154aedd97b3d7980a43b8e2/dataframe_expressions-1.1.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e3a8ade75174fe6c10487afac79592ac1520b73b029df0fa935cbd13c0d36b9",
          "md5": "b91283843da1404770b4b5e23421247e",
          "sha256": "12ea3c7dbb8863421653cfbf350c8adcd60ee8bb8e859a676834323837c7f134"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1.0b3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b91283843da1404770b4b5e23421247e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <3.8",
        "size": 24150,
        "upload_time": "2020-07-23T01:33:26",
        "upload_time_iso_8601": "2020-07-23T01:33:26.351384Z",
        "url": "https://files.pythonhosted.org/packages/6e/3a/8ade75174fe6c10487afac79592ac1520b73b029df0fa935cbd13c0d36b9/dataframe_expressions-1.1.0b3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cddcc753e88ac5af3b15cf016b5eea1b2f5d59f8ce0df51139e35690f0e5c55",
          "md5": "2b022a092f44c78f1b6d0652d51c3981",
          "sha256": "d91befca0cbf46071f1fd8e25e6d78d122d1ea2e11b035fcc6db9ed8ee8b4227"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "2b022a092f44c78f1b6d0652d51c3981",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <3.8",
        "size": 27073,
        "upload_time": "2020-07-23T01:33:27",
        "upload_time_iso_8601": "2020-07-23T01:33:27.797023Z",
        "url": "https://files.pythonhosted.org/packages/4c/dd/cc753e88ac5af3b15cf016b5eea1b2f5d59f8ce0df51139e35690f0e5c55/dataframe_expressions-1.1.0b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "078514a325105b253c964f904669140b3b3146d3b4abbfa6af56bc762c5835ad",
          "md5": "f7c180af10edf375aa1323f00d8b0c48",
          "sha256": "f56cb62b8795287f0ef84376b0a9b406a8753e96834349e5980b865cb6e7e937"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1.0b4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7c180af10edf375aa1323f00d8b0c48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <3.8",
        "size": 24158,
        "upload_time": "2020-07-23T01:38:25",
        "upload_time_iso_8601": "2020-07-23T01:38:25.722697Z",
        "url": "https://files.pythonhosted.org/packages/07/85/14a325105b253c964f904669140b3b3146d3b4abbfa6af56bc762c5835ad/dataframe_expressions-1.1.0b4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35c11a820f13b0981ba7bb0aee8aeb7e63e4d789e1c29747e2e981c07cf789e2",
          "md5": "b56afbf33d24ff4db4dd2f2b45601985",
          "sha256": "69a2ddec9d310ea60b7298b05c96428cc96fbc72e595d2a579db2e60fbb01c88"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1.0b4.tar.gz",
        "has_sig": false,
        "md5_digest": "b56afbf33d24ff4db4dd2f2b45601985",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <3.8",
        "size": 27119,
        "upload_time": "2020-07-23T01:38:27",
        "upload_time_iso_8601": "2020-07-23T01:38:27.201961Z",
        "url": "https://files.pythonhosted.org/packages/35/c1/1a820f13b0981ba7bb0aee8aeb7e63e4d789e1c29747e2e981c07cf789e2/dataframe_expressions-1.1.0b4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1b7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46911de3e1d11c3cfcbffe327fb8d871e7d7f772c57f40bb11984aff774cc8d7",
          "md5": "ebf4f072d2937cbf36ee1c672ba6cbe5",
          "sha256": "5bfa564380a23e19d43417d22acb3e8d1d7241ef126e7e1682ca960e856c6204"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1b7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebf4f072d2937cbf36ee1c672ba6cbe5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <3.8",
        "size": 23999,
        "upload_time": "2020-10-21T01:20:15",
        "upload_time_iso_8601": "2020-10-21T01:20:15.771320Z",
        "url": "https://files.pythonhosted.org/packages/46/91/1de3e1d11c3cfcbffe327fb8d871e7d7f772c57f40bb11984aff774cc8d7/dataframe_expressions-1.1b7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cab6db82307a77145b745d77dea10b0b6c027bcb7533cb38ebff815ac75ebd64",
          "md5": "a38924716881a33981fd66c00c09a8a0",
          "sha256": "e89621a8deae3b67eb372ff8209a68d6e2cfd3ddb2031e331795a81f02fd1745"
        },
        "downloads": -1,
        "filename": "dataframe_expressions-1.1b7.tar.gz",
        "has_sig": false,
        "md5_digest": "a38924716881a33981fd66c00c09a8a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <3.8",
        "size": 27028,
        "upload_time": "2020-10-21T01:20:17",
        "upload_time_iso_8601": "2020-10-21T01:20:17.057297Z",
        "url": "https://files.pythonhosted.org/packages/ca/b6/db82307a77145b745d77dea10b0b6c027bcb7533cb38ebff815ac75ebd64/dataframe_expressions-1.1b7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "427ffe9ee363f50061580f41be5c7d078041dc6206ade36cd5cb788a1dc62117",
        "md5": "73a6fcf8446f6e5c9627dca02a5fa24f",
        "sha256": "3f079906c18f92078a8a39956295b524500c3ddddd107996fe3bc515d202475e"
      },
      "downloads": -1,
      "filename": "dataframe_expressions-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73a6fcf8446f6e5c9627dca02a5fa24f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <3.8",
      "size": 19734,
      "upload_time": "2020-06-28T08:02:49",
      "upload_time_iso_8601": "2020-06-28T08:02:49.381814Z",
      "url": "https://files.pythonhosted.org/packages/42/7f/fe9ee363f50061580f41be5c7d078041dc6206ade36cd5cb788a1dc62117/dataframe_expressions-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c93ef904d85250ee3bd6a6cbe357464bfaffd7f4a573df9c9612b06dd999fc5",
        "md5": "b9e39c584e2124dfb4c650e81be47cb3",
        "sha256": "5a0b1b3e460c61f7cb8f5977015a41b5e87432a1b1c4087b356776b35748355b"
      },
      "downloads": -1,
      "filename": "dataframe_expressions-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b9e39c584e2124dfb4c650e81be47cb3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <3.8",
      "size": 22060,
      "upload_time": "2020-06-28T08:02:50",
      "upload_time_iso_8601": "2020-06-28T08:02:50.590852Z",
      "url": "https://files.pythonhosted.org/packages/8c/93/ef904d85250ee3bd6a6cbe357464bfaffd7f4a573df9c9612b06dd999fc5/dataframe_expressions-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}