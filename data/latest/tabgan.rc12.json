{
  "info": {
    "author": "Insaf Ashrapov",
    "author_email": "iashrapov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Programming Language :: Python"
    ],
    "description": "[![CodeFactor](https://www.codefactor.io/repository/github/diyago/gan-for-tabular-data/badge)](https://www.codefactor.io/repository/github/diyago/gan-for-tabular-data)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n# GANs for tabular  data\n<img src=\"https://raw.githubusercontent.com/Diyago/GAN-for-tabular-data/e5a4d437655261755de962b9779c73203611d921/images/logo%20tabular%20gan.svg\" height=\"15%\" width=\"15%\">\n\nWe well know GANs for success in the realistic image generation. However, they can be applied in tabular data generation. We will review and examine some recent papers about tabular GANs in action.\n\n* Github project: [\"GAN-for-tabular-data\"](https://github.com/Diyago/GAN-for-tabular-data)\n* Arxiv article: [\"Tabular GANs for uneven distribution\"](https://arxiv.org/abs/2010.00638)\n* Medium post: [GANs for tabular data](https://towardsdatascience.com/review-of-gans-for-tabular-data-a30a2199342)\n\n### Library goal\n\nLet say we have **T_train** and **T_test** (train and test set respectively).\nWe need to train the model on **T_train** and make predictions on **T_test**.\nHowever, we will increase the train by generating new data by GAN,\nsomehow similar to **T_test**, without using ground truth labels.\n\n### How to use library\n\n* Installation: `pip install tabgan`\n* To generate new data to train by sampling and then filtering by adversarial\n  training call `GANGenerator().generate_data_pipe`:\n\n``` python\nfrom tabgan.sampler import OriginalGenerator, GANGenerator\nimport pandas as pd\nimport numpy as np\n\n# random input data\ntrain = pd.DataFrame(np.random.randint(-10, 150, size=(150, 4)), columns=list(\"ABCD\"))\ntarget = pd.DataFrame(np.random.randint(0, 2, size=(150, 1)), columns=list(\"Y\"))\ntest = pd.DataFrame(np.random.randint(0, 100, size=(100, 4)), columns=list(\"ABCD\"))\n\n# generate data\nnew_train1, new_target1 = OriginalGenerator().generate_data_pipe(train, target, test, )\nnew_train1, new_target1 = GANGenerator().generate_data_pipe(train, target, test, )\n\n# example with all params defined\nnew_train3, new_target3 = GANGenerator(gen_x_times=1.1, cat_cols=None,\n           bot_filter_quantile=0.001, top_filter_quantile=0.999, is_post_process=True,\n           adversarial_model_params={\n               \"metrics\": \"AUC\", \"max_depth\": 2, \"max_bin\": 100, \n               \"learning_rate\": 0.02, \"random_state\": 42, \"n_estimators\": 500,\n           }, pregeneration_frac=2, only_generated_data=False,\n           gan_params = {\"batch_size\": 500, \"patience\": 25, \"epochs\" : 500,}).generate_data_pipe(train, target,\n                                          test, deep_copy=True, only_adversarial=False, use_adversarial=True)\n```\n\nBoth samplers `OriginalGenerator` and `GANGenerator` have same input parameters:\n\n* **gen_x_times**: float = 1.1 - how much data to generate, output might be less because of postprocessing and\nadversarial filtering\n* **cat_cols**: list = None - categorical columns\n* **bot_filter_quantile**: float = 0.001 - bottom quantile for postprocess filtering\n* **top_filter_quantile**: float = 0.999 - bottom quantile for postprocess filtering\n* **is_post_process**: bool = True - perform or not postfiltering, if false bot_filter_quantile\n and top_filter_quantile ignored\n* **adversarial_model_params**: dict params for adversarial filtering model, default values for binary task\n* **pregeneration_frac**: float = 2 - for generataion step gen_x_times * pregeneration_frac amount of data\nwill be generated. However, in postprocessing (1 + gen_x_times) % of original data will be returned\n* **gan_params**: dict params for GAN training\n\n\nFor `generate_data_pipe` methods params:\n\n* **train_df**: pd.DataFrame Train dataframe which has separate target\n* **target**: pd.DataFrame Input target for the train dataset\n* **test_df**: pd.DataFrame Test dataframe - newly generated train dataframe should be close to it\n* **deep_copy**: bool = True - make copy of input files or not. If not input dataframes will be overridden\n* **only_adversarial**: bool = False - only adversarial fitering to train dataframe will be performed\n* **use_adversarial**: bool = True - perform or not adversarial filtering\n* **only_generated_data**: bool = False  - After generation get only newly generated, without \n  concating input train dataframe.  \n\n* **@return**: -> Tuple[pd.DataFrame, pd.DataFrame] -  Newly generated train dataframe and test data\n\nThus, you may use this library to improve your dataset quality:\n\n``` python\ndef fit_predict(clf, X_train, y_train, X_test, y_test):\n    clf.fit(X_train, y_train)\n    return sklearn.metrics.roc_auc_score(y_test, clf.predict_proba(X_test)[:, 1])\n\n\nif __name__ == \"__main__\":\n    dataset = sklearn.datasets.load_breast_cancer()\n    clf = sklearn.ensemble.RandomForestClassifier(n_estimators=25, max_depth=6)\n    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(\n        pd.DataFrame(dataset.data), pd.DataFrame(dataset.target, columns=[\"target\"]), test_size=0.33, random_state=42)\n    print(\"initial metric\", fit_predict(clf, X_train, y_train, X_test, y_test))\n\n    new_train1, new_target1 = OriginalGenerator().generate_data_pipe(X_train, y_train, X_test, )\n    print(\"OriginalGenerator metric\", fit_predict(clf, new_train1, new_target1, X_test, y_test))\n\n    new_train1, new_target1 = GANGenerator().generate_data_pipe(X_train, y_train, X_test, )\n    print(\"GANGenerator metric\", fit_predict(clf, new_train1, new_target1, X_test, y_test))\n```\n\n## Timeseries GAN generation TimeGAN\n\nYou can easily adjust code to generate multidimensional timeseries data.\nBasically it extracts days, months and year from _date_. Demo how to use in the example below:\n```python\nimport pandas as pd\nimport numpy as np\nfrom tabgan.utils import get_year_mnth_dt_from_date,make_two_digit,collect_dates\nfrom tabgan.sampler import OriginalGenerator, GANGenerator\n\n\ntrain_size = 100\ntrain = pd.DataFrame(\n        np.random.randint(-10, 150, size=(train_size, 4)), columns=list(\"ABCD\")\n    )\nmin_date = pd.to_datetime('2019-01-01')\nmax_date = pd.to_datetime('2021-12-31')\nd = (max_date - min_date).days + 1\n\ntrain['Date'] = min_date + pd.to_timedelta(pd.np.random.randint(d, size=train_size), unit='d')\ntrain = get_year_mnth_dt_from_date(train, 'Date')\n\nnew_train, new_target = GANGenerator(gen_x_times=1.1, cat_cols=['year'], bot_filter_quantile=0.001,\n                                     top_filter_quantile=0.999,\n                                     is_post_process=True, pregeneration_frac=2, only_generated_data=False).\\\n                                     generate_data_pipe(train.drop('Date', axis=1), None,\n                                                        train.drop('Date', axis=1)\n                                                                    )\nnew_train = collect_dates(new_train)\n```\n\n## Experiments\n### Datasets and experiment design\n\n**Running experiment**\n\nTo run experiment follow these steps:\n1. Clone the repository. All required dataset are stored in `./Research/data` folder\n2. Install requirements `pip install -r requirements.txt`\n4. Run all experiments  `python ./Research/run_experiment.py`. Run all experiments  `python run_experiment.py`. You may add more datasets, adjust validation type and categorical encoders.\n5. Observe metrics across all experiment in console or\n   in `./Research/results/fit_predict_scores.txt`\n\n\n\n## Acknowledgments\n\nThe author would like to thank Open Data Science community [7] for many\nvaluable discussions and educational help in the growing field of machine and\ndeep learning. Also, special big thanks to Sber [8] for allowing solving\nsuch tasks and providing computational resources.\n\n## References\n\n[1] Jonathan Hui. GAN â€” What is Generative Adversarial Networks GAN? (2018), medium article\n\n[2]Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, Yoshua Bengio. Generative Adversarial Networks (2014). arXiv:1406.2661\n\n[3] Lei Xu LIDS, Kalyan Veeramachaneni. Synthesizing Tabular Data using Generative Adversarial Networks (2018). arXiv:1811.11264v1 [cs.LG]\n\n[4] Lei Xu, Maria Skoularidou, Alfredo Cuesta-Infante, Kalyan Veeramachaneni. Modeling Tabular Data using Conditional GAN (2019). arXiv:1907.00503v2 [cs.LG]\n\n[5] Denis Vorotyntsev. Benchmarking Categorical Encoders (2019). Medium post\n\n[6] Insaf Ashrapov. GAN-for-tabular-data (2020). Github repository.\n\n[7] Tero Karras, Samuli Laine, Miika Aittala, Janne Hellsten, Jaakko Lehtinen, Timo Aila. Analyzing and Improving the Image Quality of StyleGAN (2019) arXiv:1912.04958v2 [cs.CV]\n\n[8]  ODS.ai: Open data science (2020), https://ods.ai/\n\n[9]  Sber (2020), https://www.sberbank.ru/\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Diyago/GAN-for-tabular-data",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tabgan",
    "package_url": "https://pypi.org/project/tabgan/",
    "platform": "any",
    "project_url": "https://pypi.org/project/tabgan/",
    "project_urls": {
      "Documentation": "https://github.com/Diyago/GAN-for-tabular-data",
      "Homepage": "https://github.com/Diyago/GAN-for-tabular-data"
    },
    "release_url": "https://pypi.org/project/tabgan/1.3.0/",
    "requires_dist": [
      "pandas",
      "numpy",
      "category-encoders",
      "torch (>=1.0)",
      "lightgbm (>=2.2.3)",
      "scikit-learn (>=1.0.2)",
      "torchvision",
      "python-dateutil",
      "tqdm",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": ">=3.5",
    "summary": "Applying GAN in tabular data generation for uneven distribution",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16330247,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65ba1f05497dfc9f4c0b5fcc4a8d0d77c9a5db5dee1c95d57cf7aec4bfefd25f",
          "md5": "4c176f8f824c951a50897753635f16fe",
          "sha256": "0c9741da9d0e0e58ec92f41514583f15513cb61b94b276dab9eee5df52fad5a5"
        },
        "downloads": -1,
        "filename": "tabgan-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c176f8f824c951a50897753635f16fe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 43412,
        "upload_time": "2021-02-18T21:19:24",
        "upload_time_iso_8601": "2021-02-18T21:19:24.220858Z",
        "url": "https://files.pythonhosted.org/packages/65/ba/1f05497dfc9f4c0b5fcc4a8d0d77c9a5db5dee1c95d57cf7aec4bfefd25f/tabgan-1.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3c86b89653726863feb0915aa1e6d497714d16dce59f4ae3f1071154ee47f0e",
          "md5": "3ca035944175a62007e3d49ba98af5b8",
          "sha256": "61201efeafdd433462918e7cde66dd393cf89f75f8b288be57583d9b9e4c8a29"
        },
        "downloads": -1,
        "filename": "tabgan-1.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ca035944175a62007e3d49ba98af5b8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 43748,
        "upload_time": "2021-03-20T18:50:22",
        "upload_time_iso_8601": "2021-03-20T18:50:22.472115Z",
        "url": "https://files.pythonhosted.org/packages/c3/c8/6b89653726863feb0915aa1e6d497714d16dce59f4ae3f1071154ee47f0e/tabgan-1.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fea1e1e4be926bf52329742a79ac87372c61f0a26399b69917545c5f7cf435ef",
          "md5": "44aa471476e9ecae2109bfc1041922da",
          "sha256": "4b8caf464fee075cf2f65b5ec87e3ea659923c3a43126ec3abf8934649b83c3a"
        },
        "downloads": -1,
        "filename": "tabgan-1.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44aa471476e9ecae2109bfc1041922da",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 43749,
        "upload_time": "2021-03-22T13:15:01",
        "upload_time_iso_8601": "2021-03-22T13:15:01.873682Z",
        "url": "https://files.pythonhosted.org/packages/fe/a1/e1e4be926bf52329742a79ac87372c61f0a26399b69917545c5f7cf435ef/tabgan-1.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb09644900ff75f5bb3e4444ffddc572624e376ddd5c069ec7a270d4075920a2",
          "md5": "500bfd6a8daf6f71a16df63971f896ec",
          "sha256": "35997e31822c375c9a9ba1cd72ed3477c6e8ba79954d056fb433a127b73e4155"
        },
        "downloads": -1,
        "filename": "tabgan-1.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "500bfd6a8daf6f71a16df63971f896ec",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 43728,
        "upload_time": "2021-03-27T11:15:16",
        "upload_time_iso_8601": "2021-03-27T11:15:16.811773Z",
        "url": "https://files.pythonhosted.org/packages/bb/09/644900ff75f5bb3e4444ffddc572624e376ddd5c069ec7a270d4075920a2/tabgan-1.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf38e3f4b6ca2833fb509037dd33d5fce20c4d332bffbf3ed2ed8a3021eb4412",
          "md5": "d790ac61305d239e79fd844e5968650c",
          "sha256": "4736afa1b145525da57a885f27a727372f989d16c7ec479991464f9a794efcf9"
        },
        "downloads": -1,
        "filename": "tabgan-1.0.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d790ac61305d239e79fd844e5968650c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 43732,
        "upload_time": "2021-03-27T13:03:08",
        "upload_time_iso_8601": "2021-03-27T13:03:08.675404Z",
        "url": "https://files.pythonhosted.org/packages/cf/38/e3f4b6ca2833fb509037dd33d5fce20c4d332bffbf3ed2ed8a3021eb4412/tabgan-1.0.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee96eb97cf1791b6b4eff35a6e3b71b13c55b470a89885d93e1b50cfdc750f74",
          "md5": "da4bca95ad2a1e337725305a88287f56",
          "sha256": "2bf2e3be8ff3bfda8e2f18278a00509551513042c709b386a8252afa1d9c788f"
        },
        "downloads": -1,
        "filename": "tabgan-1.0.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da4bca95ad2a1e337725305a88287f56",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 44565,
        "upload_time": "2021-06-14T21:17:34",
        "upload_time_iso_8601": "2021-06-14T21:17:34.368240Z",
        "url": "https://files.pythonhosted.org/packages/ee/96/eb97cf1791b6b4eff35a6e3b71b13c55b470a89885d93e1b50cfdc750f74/tabgan-1.0.9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e8604f0eaf7af8e921aca401e33a558fdd258e54df58465b1aaa878b74c57d3",
          "md5": "1180d7170f959e68aa4055fdeca45a3c",
          "sha256": "07d0207736c35d4b32c4d27a8062c9f04dee426481ae929d0a13e234471d5ef5"
        },
        "downloads": -1,
        "filename": "tabgan-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1180d7170f959e68aa4055fdeca45a3c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 44869,
        "upload_time": "2021-06-20T14:27:54",
        "upload_time_iso_8601": "2021-06-20T14:27:54.590585Z",
        "url": "https://files.pythonhosted.org/packages/9e/86/04f0eaf7af8e921aca401e33a558fdd258e54df58465b1aaa878b74c57d3/tabgan-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dd9cc89fb9286cd78f98046029442cd23e302519531d0ab08e0f53be898b9cc",
          "md5": "454af7daee8f2e339e748129af1361ea",
          "sha256": "32832bb0f0bf7311c19fa24acb668280483d6dc96bba9a64e5b915b1d814457d"
        },
        "downloads": -1,
        "filename": "tabgan-1.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "454af7daee8f2e339e748129af1361ea",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 44883,
        "upload_time": "2021-10-31T20:41:01",
        "upload_time_iso_8601": "2021-10-31T20:41:01.971387Z",
        "url": "https://files.pythonhosted.org/packages/3d/d9/cc89fb9286cd78f98046029442cd23e302519531d0ab08e0f53be898b9cc/tabgan-1.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc43be8f210681e6f780363486a233c4941185528b4896e5361b18c39e37d290",
          "md5": "a14dc07ea76b967db1b41f6475933371",
          "sha256": "ba7965300e7e42e8b03c48e70f2e9c10b9e5f317583e2a0cc438e86474766f1f"
        },
        "downloads": -1,
        "filename": "tabgan-1.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a14dc07ea76b967db1b41f6475933371",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 44899,
        "upload_time": "2021-12-16T18:55:57",
        "upload_time_iso_8601": "2021-12-16T18:55:57.439634Z",
        "url": "https://files.pythonhosted.org/packages/bc/43/be8f210681e6f780363486a233c4941185528b4896e5361b18c39e37d290/tabgan-1.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73f90d514a60ad472a64b02b7b0a0ba808c0200519354201b9b53bdbfa5d3e13",
          "md5": "0fdb97d1f854c3fcb34a05c34a3aee7d",
          "sha256": "e9ff101686f6cfa4e9f3c2d40bda61e4b42eb286282fd0f8a98ad55402314e75"
        },
        "downloads": -1,
        "filename": "tabgan-1.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fdb97d1f854c3fcb34a05c34a3aee7d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 45777,
        "upload_time": "2021-12-26T11:29:58",
        "upload_time_iso_8601": "2021-12-26T11:29:58.201426Z",
        "url": "https://files.pythonhosted.org/packages/73/f9/0d514a60ad472a64b02b7b0a0ba808c0200519354201b9b53bdbfa5d3e13/tabgan-1.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc35d2866d6cee6c0c38a63bcde4320335beb1f4a336ae8e0639c8c9576c171a",
          "md5": "898869a48d03f7576011473b6a5c1a4a",
          "sha256": "ea6f7d176e0ac2e05b500f1edda13163baf8d75d0ff0da287961628ab8de4d9b"
        },
        "downloads": -1,
        "filename": "tabgan-1.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "898869a48d03f7576011473b6a5c1a4a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 45790,
        "upload_time": "2022-07-06T20:09:28",
        "upload_time_iso_8601": "2022-07-06T20:09:28.724988Z",
        "url": "https://files.pythonhosted.org/packages/bc/35/d2866d6cee6c0c38a63bcde4320335beb1f4a336ae8e0639c8c9576c171a/tabgan-1.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3e6dfd3e4b5853f49cc0e249a0e5f5c7b4e783dcc88d7ff52d1e58e536bd425",
          "md5": "7aa1293e1fed65357d94d63c4b90794f",
          "sha256": "71b8eaf6f59affa6eba3c3eba7ca516f048e9362fec3789eba31e150254f57fa"
        },
        "downloads": -1,
        "filename": "tabgan-1.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7aa1293e1fed65357d94d63c4b90794f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 27152,
        "upload_time": "2023-01-06T12:27:35",
        "upload_time_iso_8601": "2023-01-06T12:27:35.152494Z",
        "url": "https://files.pythonhosted.org/packages/d3/e6/dfd3e4b5853f49cc0e249a0e5f5c7b4e783dcc88d7ff52d1e58e536bd425/tabgan-1.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3e6dfd3e4b5853f49cc0e249a0e5f5c7b4e783dcc88d7ff52d1e58e536bd425",
        "md5": "7aa1293e1fed65357d94d63c4b90794f",
        "sha256": "71b8eaf6f59affa6eba3c3eba7ca516f048e9362fec3789eba31e150254f57fa"
      },
      "downloads": -1,
      "filename": "tabgan-1.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7aa1293e1fed65357d94d63c4b90794f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 27152,
      "upload_time": "2023-01-06T12:27:35",
      "upload_time_iso_8601": "2023-01-06T12:27:35.152494Z",
      "url": "https://files.pythonhosted.org/packages/d3/e6/dfd3e4b5853f49cc0e249a0e5f5c7b4e783dcc88d7ff52d1e58e536bd425/tabgan-1.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}