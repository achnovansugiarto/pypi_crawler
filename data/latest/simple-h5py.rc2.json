{
  "info": {
    "author": "Arturo Mendoza",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<h1 align=\"center\">simple h5py</h1>\n<p align=\"center\">A simple wrapper for the h5py library<p>\n<p align=\"center\">\n<a href=\"https://github.com/amq92/simple_h5py/actions/workflows/python-publish-pypi.yml\">\n    <img src=\"https://github.com/amq92/simple_h5py/actions/workflows/python-publish-pypi.yml/badge.svg\" alt=\"Publish to PyPI\" />\n</a>\n<a href=\"https://github.com/amq92/simple_h5py/actions/workflows/python-package-conda.yml\">\n    <img src=\"https://github.com/amq92/simple_h5py/actions/workflows/python-package-conda.yml/badge.svg\" alt=\"Publish to Conda\" />\n</a>\n</p>\n\n\n```python\nimport numpy as np\nfrom simple_h5py import BasicH5File\n\n# Creating some data\n# >> notice the \"huge\" attribute !\ngroup_attrs = dict(a=1, b=2)\ndataset = np.ones((5, 4, 3))\ndataset_attrs = dict(new=5, huge=np.ones((1000000, 3)))\n\n# Write contents to file\nobj = BasicH5File('demo.h5')\nobj['my_group'] = None\nobj['my_group'].attrs = group_attrs.copy()\nobj['my_group']['my_dataset'] = dataset\nobj['my_group']['my_dataset'].attrs = dataset_attrs.copy()\n\n# Read contents from file\nobj = BasicH5File('demo.h5')\nprint(obj['my_group'].attrs)\nprint(obj['my_group']['my_dataset'][0])\nprint(obj['my_group']['my_dataset'].attrs)\n```\n\nThe above snippet creates a HDF5 file with the following \"content tree\".\n\n```bash\ndemo.h5\n│── my_group\n│   ├── .attrs\n│   │   ├── a (1)\n│   │   └── b (2)\n│   └── my_dataset (array)\n│       └── .attrs\n│           ├── new (5)\n│           └── huge (array ref)\n└── big_attrs\n    └── my_group.my_dataset.attrs.huge (array)\n```\n\n> See [below](#equivalent-snippet-using-h5py) for the equivalent snippet using *vanilla* `h5py`.\n\n\n## Contents\n+ [Installation instructions](#installation-instructions)\n+ [Library Features](#library-features)\n    - [Full Python experience ](#rocket-full-python-experience-)\n    - [Intelligent open/close of file](#zap-intelligent-open/close-of-file)\n    - [Handling of BIG ATTRIBUTES](#earth_americas-handling-of-big-attributes)\n    - [Nice `print` of the content-tree](#pencil2-nice-print-of-the-content-tree)\n    - [Define required attributes](#cake-extra-define-required-attributes)\n+ [Additional notes](#additional-notes)\n+ [Equivalent snippet using `h5py`](#equivalent-snippet-using-h5py)\n\n## Installation instructions\n\nFrom PyPI\n\n```bash\npip install simple_h5py\n```\n\nFrom Conda\n\n```bash\nconda install -c arturo.mendoza.quispe simple_h5py\n```\n\nFrom git\n\n```bash\npip install git+https://github.com/amq92/simple_h5py.git\n```\n\n\n## Library Features\n\n### :rocket: Full Python experience \n\nWhile [`h5py`](http://www.h5py.org/) does provide a *high-level interface to the HDF5 library using established Python and NumPy concepts*, it purposely does not go the extra mile to provide a full Python experience to the user.\nOf course, this design choice allows for great flexibility such as enabling chunked storage, allowing to store and manipulate the data in memory (using the `core` driver) and much more ! \n\nThe goal of `simple_h5py` is to allow easier creation and handling of HDF5 files using the fabulous `h5py` library as a support :+1:\n\nThe following example highlights the similarity between creating a python-only object and creating a HDF5 file using `simple_h5py` !\n\n```python\nobj = dict()\nobj['group'] = dict()\nobj['group']['attrs'] = dict(a=1, b=2)\nobj['group']['dataset'] = dict(contents=dataset)\nobj['group']['dataset']['attrs'] = dict(c=3, d=4)\n\nobj = BasicH5File('myfile.h5')\nobj['group'] = None\nobj['group'].attrs = dict(a=1, b=2)\nobj['group']['dataset'] = dataset\nobj['group']['dataset'].attrs = dict(c=3, d=4)\n```\n\n### :zap: Intelligent open/close of file\n\nIf the library is used for **creating** a new HDF5 file, it will open the file stream whenever a new value is given (either to a group, a dataset or an attribute instance) and subsequently closes it.\nThis is done only once for each `__setitem__` call.\nHence, setting an entire attribute group with a single dictionary will only require one open/close directive.\nHowever, setting each attribute group entry will require multiple ones.\n\nIt the library is used for **reading** a new HDF5 file, it will parse the complete content-tree and load it into memory.\nAdditionally, it will load all group and dataset attributes too.\nHowever, the **datasets will not be loaded** since they are assumed to be heavy.\nSince the returned object contains the correct HDF5 references, the datasets can be loaded at any time (either completely or partially).\n\n```python\nobj = BasicH5File('myfile.h5')           # Load content-tree & attrs from disk\nv1 = obj['group'].attrs                  # Inspect object in memory\nv2 = obj['group'].attrs['a']             # Inspect object in memory\nv3 = obj['group']['dataset'].attrs       # Inspect object in memory\nv4 = obj['group']['dataset'].attrs['c']  # Inspect object in memory\nv5 = obj['group']['dataset'][:]          # Load complete dataset from disk\nv6 = obj['group']['dataset'][:10]        # Partially load dataset from disk\n```\n\nThis strategy should allow a more *fluid* interaction with the HDF5 file since it can be fully inspected at any time, without requiring multiple open/close directives !\n\n### :earth_americas: Handling of BIG ATTRIBUTES\n\nThe section of HDF5 User's Guide dedicated to the case of [Large Attributes](https://support.hdfgroup.org/HDF5/doc1.6/UG/13_Attributes.html).\nSince, *Attributes are intended to be small objects*, most implementations limit the size of these meta-data (`h5py` will throw a RuntimeError).\nThe User's Guide proposes to point the attribute to another supplemental dataset.\n\n`simple_h5py` implements this and makes the issue completely transparent to the user.\nEvery large attribute will be stored into a dataset with full path `/big_attrs/<dataset_name>.<group_name>.attrs.<attribute_name>`.\n\n```python\nobj = BasicH5File('myfile.h5')\ndst = obj['group']['dataset']\ndst.attrs['e'] = np.ones((1000000, 3))  # silently creates large dataset in\n                                        # '/big_attrs/group.dataset.attrs.e'\ndst.attrs['f'] = np.ones((10, 3))       # normal attribute creation but with\n                                        # identical syntax ! \n```\n\nNote that `simple_h5py` automatically handles the `huge` attribute during both, reading and writing the contents !\n\n```python\nobj = BasicH5File('myfile.h5')\nv7 = obj['group']['dataset'].attrs['e']  # they are identical for the user !\nv8 = obj['group']['dataset'].attrs['f']\n```\n\n### :pencil2: Nice `print` of the content-tree\n\nSince the `BasicH5File` contains the entire content-tree at all times, displaying the object (either `__repr__` or `__str__`) allows for fast inspection of the file contents.\n\n```python\nprint(obj)\n# BasicH5File (myfile.h5)\n# > Group \"/group\"\n#   > Dataset \"/group/dataset\" (20, 30, 10)\n\ndisplay(obj['group'])\n# Group\n# > path: myfile.h5\n# > route: /group\n# > attrs: {'a': 1, 'b': 2}\n# > datasets: ['dataset']\n\nobj['group']['dataset']\n# Dataset\n# > path: myfile.h5\n# > route: /group/dataset\n# > attrs: {'c': 3, 'd': 4, 'e': array([[1., 1., 1.],\n#        ...,\n#        [1., 1., 1.]]), 'f': array([[1., 1., 1.],\n#        ...,\n#        [1., 1., 1.]])}\n# > shape: (20, 30, 10)\n```\n\n### :cake: **[EXTRA]** Define required attributes\n\nDefine required attributes for all groups and all datasets:\n\n```python\nobj = BasicH5File('myfile.h5',\n                  group_attrs_required=('a', 'b'),\n                  dataset_attrs_required=('c', 'd'))\n```\n\nAs such, if a file does not comply, an assertion error is raised.\nA file may have more attributes than those required, but no less.\n\nThis feature is useful for ensuring that the HDF5 files to be read comply with the desired criteria.\nOne can even subclass the `BasicH5File` for easier use:\n\n```python\nclass StrictH5File(BasicH5File):\n    def __init__(self, path: str):\n        super().__init__(path,\n                         group_attrs_required=('a', 'b'),\n                         dataset_attrs_required=('c', 'd'))\n\nobj = StrictH5File('myfile.h5')\n```\n\n## Additional notes\n\n`simple_h5py` is not meant to be a `h5py` replacement but a useful sidekick.\nIndeed, for \"simple\" use-cases, such as those shown here, `simple_h5py` allows faster development by *hiding* many of the implementation details.\nAs such, `h5py` should be employed for more advanced or custom needs.\nMoroever, a file can be written with `simple_h5py` and then be read using `h5py`, and viceversa.\n\n\n## Equivalent snippet using `h5py`\n\nThe following code performs has the same effect as the sample snippet.\n\n> Note the simpler syntax that allows `simple_h5py` !\n\n```python\nimport h5py\nimport numpy as np\n\ngroup_attrs = dict(a=1, b=2)\ndataset = np.ones((5, 4, 3))\ndataset_attrs = dict(new=5, huge=np.ones((1000000, 3)))\n\n# Use context manager to avoid open/close\nwith h5py.File('demo.h5', 'w') as obj:\n    # Create group\n    obj.create_group(name='my_group')\n\n    # Add attributes to group one at a time\n    for k, v in group_attrs.items():\n        obj['my_group'].attrs[k] = v\n\n    # Create dataset\n    obj['my_group'].create_dataset('my_dataset', data=dataset)\n\n    # Add attributes to dataset one at a time\n    for k, v in dataset_attrs.items():\n\n        # Use try/except for capturing the \"large attributes\"\n        try:\n            obj['my_group']['my_dataset'].attrs[k] = v\n        except BaseException:\n            # Create an auxiliary dataset called in a helper group 'big_attrs'\n            if 'big_attrs' not in obj:\n                obj.create_group(name='big_attrs')\n            obj['big_attrs'].create_dataset('huge_attr',\n                                            data=dataset_attrs['huge'])\n\n            # Store the reference to the auxiliary dataset\n            obj['my_group']['my_dataset'].attrs[k] = \\\n                obj['big_attrs']['huge_attr'].ref\n\n# Use context manager to avoid open/close\nwith h5py.File('demo.h5', 'r') as obj:\n\n    # Read attributes and convert to dictionary for further use\n    read_group_attrs = dict(obj['my_group'].attrs)\n    read_dataset_attrs = dict(obj['my_group']['my_dataset'].attrs)\n\n    # Read entire dataset\n    read_dataset = obj['my_group']['my_dataset'][:]\n\n    # Verify if any reference is present in the attributes (i.e. big attribute)\n    for k, v in read_dataset_attrs.items():\n        if isinstance(v, h5py.Reference):\n            read_dataset_attrs[k] = obj[v][:]\n\n# Display contents\nprint(read_group_attrs)\nprint(read_dataset_attrs)\nprint(read_dataset[0])\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/amq92/simple_h5py",
    "keywords": "",
    "license": "GNU Affero General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-h5py",
    "package_url": "https://pypi.org/project/simple-h5py/",
    "platform": "",
    "project_url": "https://pypi.org/project/simple-h5py/",
    "project_urls": {
      "Homepage": "https://github.com/amq92/simple_h5py"
    },
    "release_url": "https://pypi.org/project/simple-h5py/0.1.2/",
    "requires_dist": [
      "numpy",
      "h5py"
    ],
    "requires_python": ">=3.6",
    "summary": "A simple wrapper for the h5py library.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11649505,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56d832fada644619a3ce2419e1449c16f22512f822502e0bc6f1456f0bc52d6b",
          "md5": "6a24409aa946a355e1f466dc9655f020",
          "sha256": "a83c93832946c61ac1227fca4d66d4bd51bb1332a17875eb2b0b4b4a65bdf958"
        },
        "downloads": -1,
        "filename": "simple_h5py-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a24409aa946a355e1f466dc9655f020",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19409,
        "upload_time": "2021-10-06T22:46:57",
        "upload_time_iso_8601": "2021-10-06T22:46:57.665013Z",
        "url": "https://files.pythonhosted.org/packages/56/d8/32fada644619a3ce2419e1449c16f22512f822502e0bc6f1456f0bc52d6b/simple_h5py-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8010e6e5873c4189f6cb09adc804c251787ebb717fa41b09a07599b2f47b105a",
          "md5": "d01d572b4394005a8b22537ecfc2b4e2",
          "sha256": "3e92c0d701447c656f26d25de3f6500bd58db64b4ff93666a42414cdc50bffae"
        },
        "downloads": -1,
        "filename": "simple_h5py-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d01d572b4394005a8b22537ecfc2b4e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21988,
        "upload_time": "2021-10-06T22:46:59",
        "upload_time_iso_8601": "2021-10-06T22:46:59.656888Z",
        "url": "https://files.pythonhosted.org/packages/80/10/e6e5873c4189f6cb09adc804c251787ebb717fa41b09a07599b2f47b105a/simple_h5py-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51e2c944e681ff59c48ca3d453f06b0016b435de89fab1e9500c413d04782ecf",
          "md5": "e0b80b9f4aab118f0861203194f416be",
          "sha256": "bba85859769600205c69211e9daadf0b1d478793255fc1bb3de0a62067c3c674"
        },
        "downloads": -1,
        "filename": "simple_h5py-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0b80b9f4aab118f0861203194f416be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19508,
        "upload_time": "2021-10-06T23:15:54",
        "upload_time_iso_8601": "2021-10-06T23:15:54.882294Z",
        "url": "https://files.pythonhosted.org/packages/51/e2/c944e681ff59c48ca3d453f06b0016b435de89fab1e9500c413d04782ecf/simple_h5py-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea5a6bb642d2a127ef06912b2cfd21fcff21416cc8fac1d66a926b149c5aaf70",
          "md5": "75fc4354ca2616c783d49e1594714b22",
          "sha256": "c646df7b7a13b43cf7a0f16c4be6b988a22aa33cecf6aa2b6817ef082f5e398c"
        },
        "downloads": -1,
        "filename": "simple_h5py-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "75fc4354ca2616c783d49e1594714b22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22189,
        "upload_time": "2021-10-06T23:15:56",
        "upload_time_iso_8601": "2021-10-06T23:15:56.792255Z",
        "url": "https://files.pythonhosted.org/packages/ea/5a/6bb642d2a127ef06912b2cfd21fcff21416cc8fac1d66a926b149c5aaf70/simple_h5py-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51e2c944e681ff59c48ca3d453f06b0016b435de89fab1e9500c413d04782ecf",
        "md5": "e0b80b9f4aab118f0861203194f416be",
        "sha256": "bba85859769600205c69211e9daadf0b1d478793255fc1bb3de0a62067c3c674"
      },
      "downloads": -1,
      "filename": "simple_h5py-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e0b80b9f4aab118f0861203194f416be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19508,
      "upload_time": "2021-10-06T23:15:54",
      "upload_time_iso_8601": "2021-10-06T23:15:54.882294Z",
      "url": "https://files.pythonhosted.org/packages/51/e2/c944e681ff59c48ca3d453f06b0016b435de89fab1e9500c413d04782ecf/simple_h5py-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea5a6bb642d2a127ef06912b2cfd21fcff21416cc8fac1d66a926b149c5aaf70",
        "md5": "75fc4354ca2616c783d49e1594714b22",
        "sha256": "c646df7b7a13b43cf7a0f16c4be6b988a22aa33cecf6aa2b6817ef082f5e398c"
      },
      "downloads": -1,
      "filename": "simple_h5py-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "75fc4354ca2616c783d49e1594714b22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22189,
      "upload_time": "2021-10-06T23:15:56",
      "upload_time_iso_8601": "2021-10-06T23:15:56.792255Z",
      "url": "https://files.pythonhosted.org/packages/ea/5a/6bb642d2a127ef06912b2cfd21fcff21416cc8fac1d66a926b149c5aaf70/simple_h5py-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}