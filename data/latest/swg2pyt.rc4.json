{
  "info": {
    "author": "walkzombie",
    "author_email": "walkzombie@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pytest",
      "License :: Freeware",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3"
    ],
    "description": "# swg2pyt\n### 代码准备\n* 新建文件夹\n\n* 安装模块 python -m pip install swg2pyt\n\n* 生成swagger_client(路径分隔符有需要自行更正)\n    ```\n    java -jar .\\swagger-codegen-cli.jar generate -i .\\practice.json -l python -o .\\practice_interface\n    ```\n    记住这个 practice_interface 文件夹\n\n* 新建测试用例文件夹 practice_case\n\n    并在 practice_case 下，创建如下结构的文件夹和xmind文件：\n    ```\n    xxx/xxx_data/xxx.xmind\n    ```\n    example：\n    ```\n    practice/practice_data/practice.xmind\n    ```\n\n* 假设现在xmind中已有有效用例\n    ```\n    from swg2pyt.ClassGenerator import ClassGenerator\n\n    cg=ClassGenerator(\"practice_interface\",\"practice_case\")\n    cg.generate()\n    ```\n    将生成如下：\\\n    practice_case/auto/\\\n    ├──test_xxx.py\\\n    ├──marks\\\n    同时会在xmind所在位置生成同名的 case.json ，建议只上传json至git\n\n### xmind基本结构\n\n函数名->请求类型和地址->TestCase->具体用例\n\n其中：\n- 函数名\\\n生成的swaggerapi中的真正函数名最短的那个，如practice_interface\\\\swagger_client\\\\api\\\n文件夹下practice_api.py中，定义有如下函数:\n    ```\n    def practice_using_post():\n    和\n    def practice_using_post_with_http_info():\n    ```\n    则函数名为 practice_using_post\n\n- 请求类型和地址\\\n可于文档或代码中查找到：此处为\\\n    POST /return_as_is\n\n- TestCase\\\n用例汇聚节点\n\n### 用例结构\n* 用例的最丰富组成结构为\n    ```\n        |-请求体\n        |-其他入参\n        |-描述\n    用例名 |-预置条件\n        |-断言\n        |-mark\n        |-order\n    ```\n* 请求体：最常见的情况是大部分接口请求参数（GET请求的query param，POST请求的body）被打包为param，且位于函数入参首位，这部分参数放入请求体\n\n* 其他入参： 除请求体外直接出现在函数签名中的接口其他请求参数（可能用于header，url部分），这部分参数放入其他入参\n\n* 预置条件：用于处理除自身外其他结构的数据，以及决定大部分测试框架行为\n\n* 描述：功能无关的描述信息，生成test_xxx.py时，用作函数注释\n\n* 断言：决定测试用例是否通过，以及重试次数\n\n* mark用于标记用例，功能由pytest实现，只是可以写在这\n\n* order用于改变用例执行顺序，但优先级低于预置条件中的precase和fromcase函数\n\n### 用例基本执行流程\n* 开始\n* 由xmind 生成json（从这一步开始数据将从json中读取）\n* 生成test_xxx.py(在测试用例文件夹下auto文件夹)\n* pytest读取上一步生成的py，按mark collect用例\n* 在pytest 完成collect用例后，按order重新排序用例\n* （pytest执行用例期间）执行前置请求->预处理用例->发起请求->按设定次数重试\n* pytest收尾\n* 结束\n\n### 预置条件主要作用\n* 决定用例使用哪些fixture\n* 改变请求体或其他入参，实现大部分动态数据功能，明面上或间接影响用例行为（主要是执行顺序），实现位于 Pretreator.py\n\n### 断言主要作用\n* 对用例返回的header，body和status做断言，实现位于 Asserter.py\n* 当出现断言失败时，决定重试次数\n\n### order主要作用\n* 在用例中添加order并输入一个整数，可以变更用例执行顺序。默认的用例order为0（可以不写）。如果需要测试用例提前执行，填一个正数，如果需要测试用例延缓执行，则填一个负数，最终测试用例会按order从大到小的顺序执行，order相同的用例执行顺序暂不清楚，默认值的用例执行顺序可以参考它们在 test_xxx.py 中从上到下出现的顺序\n\n### mark主要作用\n* mark没有特别功能，pytest做什么，mark就做什么\n\n### 框架主要作用\n* 全自动读取测试用例，生成测试数据，执行\n* 分离代码和测试数据\n* 生成pytest可以识别的标准格式的test_*.py，使测试用例更易写易读易管理\n\n### 预处理如何使用及常用函数介绍\n\n* 预处理为一个字典，其中\\\n    顶级key为预处理范围，如请求体、其他入参、或断言\\\n    在顶级key的value（也是一个字典）中，次级key按xxx.yyy.zzz的格式选择将要处理的对象，次级value选择处理函数，例如\n    ```\n    请求体\n    ——————————————\n    {\n        \"xxx\":{\n            \"yyy\":{\n                \"zzz\":\"Hello world\"\n            }\n        }\n    }\n\n    预置条件\n    ——————————————\n    {\n        \"请求体\":{\n            \"xxx.yyy.zzz\":{\n                \"replace\":[\n                    \"world\"，\"pytest\"\n                ]\n            }\n        }\n    }\n    ```\n* 预置条件将用replace函数处理请求体中的xxx.yyy.zzz的值\\\n* 其中replace预处理函数接受一个或两个入参（放在列表中）\\\n* 当仅有一个入参时，整个xxx.yyy.zzz会被这个入参完全替换\\\n* 当有两个入参时，则效果参考python标准库函数的replace\\\n* 这个预置条件顺利执行后，会将请求体的xxx.yyy.zzz的值替换为Hello pytest\\\n* 预处理函数的入参，即列表中的项还可以是其他预处理函数（字典），以实现更复杂的预处理\\\n* 常用预处理函数功能介绍（具体入参见代码）：\n\n    - len 获取某个对象的长度，当对象为：\n        - 字符串：获取字符串长度\n        - 列表：获取列表个数\n        - 字典：获取字典key的个数\n    - toint：把字符串转换为整数\n    - tofloat：把字符串转换为浮点数\n    - tostr：把任何python支持的对象转换为str\n    - range：返回一个标准range的列表\n    - base64：返回一个字符串或文件内容的base64encode结果\n    - tolist：将入参组合成一个列表并返回\n    - todict：以入参奇数位为key，偶数位为value，返回一个字典\n    - fixture：对于有返回值的fixture，从fixture处取值\n    - replace：替换目标的全部或部分文本\n    - precase：在执行当前用例之前，强行先执行列出的用例\n    - fromcase：从目标用例处获取用例执行完成后的各来源值\n    - timestamp：返回一个秒级（int）或毫秒级（float）时间戳\n    - parametrize：使用了这个预处理函数的入参，入参列表有几个，该用例就会执行几次（与pytest无关），如果一个用例中有多个该预处理函数，则多个预处理函数并行，最终执行次数取决于入参列表最长的那个，不够长度的，取末尾值\n\n### 断言如何使用\n* 与预置条件类似，也是用keypath决定取值，但headers只需要一次key，status当前只返回status code\\\n    ```\n    response\n    ————————————————\n    status_code:200\n    headers:{\"Connection:keep-alive\"}\n    body:\n    {\n        \"xxx\":{\n            \"yyy\":{\n                \"zzz\":\"Success\"\n            }\n        }\n    }\n\n    断言\n    ————————————————\n    {\n        \"headers\":{\n            \"Connection\":{\n                \"eq\":\"keep-alive\"\n                }\n            }，\n        \"body\":{\n            \"xxx.yyy.zzz\":{\n                \"eq\":\"Success\"`\n            }\n        }，\n        \"status\":{\"eq\":200}，\n        \"retry\":3\n    }\n    ```\n* 可以使用的断言函数在 Asserter.py 中查看\\\n* 断言可以有多个，但整体用例断言结果为所有小断言的与值\\\n* 重试（retry）会在任意一个小断言失败时触发，效果为重新发起请求及再次尝试断言，断言失败继续重试，成功则通过用例。\\\n* 重试次数默认为1（不重试）\n\n### 给框架加功能\n* 实现简单的预处理和断言拓展，可以分别在 Pretreator.py 和 Asserer.py 中添加函数并“注册”到prtdict或astdict中，复杂的拓展可以配合修改 ClassGenerator.py ， Executor.py ， CaseCollector.py 实现\n* 添加更多fixture，可以在 conftest.py 中添加函数并使用Pytest.fixture装饰器\n* 想要改变pytest的行为，可以在 conftest.py 中添加“钩子函数”，或在预处理/断言代码中调用pytest函数\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "swg2pyt",
    "package_url": "https://pypi.org/project/swg2pyt/",
    "platform": null,
    "project_url": "https://pypi.org/project/swg2pyt/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/swg2pyt/0.2.9/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "A helper generate swagger_client code to pytest format",
    "version": "0.2.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15624476,
  "releases": {
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d70518c868fafce8d4be4a541e94bda6eb87d486ba5403ea760e87e618d5d16",
          "md5": "4a8ea392eeb1587931d84ab1c71b0a18",
          "sha256": "ad9f97e7696af2c97be88148f12f48043fd3e3ad78f84452ac36b273d8c49e44"
        },
        "downloads": -1,
        "filename": "swg2pyt-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a8ea392eeb1587931d84ab1c71b0a18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 17598,
        "upload_time": "2022-08-15T06:49:50",
        "upload_time_iso_8601": "2022-08-15T06:49:50.553383Z",
        "url": "https://files.pythonhosted.org/packages/6d/70/518c868fafce8d4be4a541e94bda6eb87d486ba5403ea760e87e618d5d16/swg2pyt-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b34b1c22935d857029810553a72969fd4e945d1266a10e72e9a899e80c80374",
          "md5": "b4a415d3f7cf3d955b346bc1680b9e83",
          "sha256": "62d2c3908182addc5253c28da1fc00cc150b60f4216ab822ef000adcb73ff61e"
        },
        "downloads": -1,
        "filename": "swg2pyt-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b4a415d3f7cf3d955b346bc1680b9e83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 18792,
        "upload_time": "2022-08-15T06:49:52",
        "upload_time_iso_8601": "2022-08-15T06:49:52.703547Z",
        "url": "https://files.pythonhosted.org/packages/2b/34/b1c22935d857029810553a72969fd4e945d1266a10e72e9a899e80c80374/swg2pyt-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f2591b502999922c65f61c78fad943a5e242a25f9915ae0a86f357ffdd82240",
          "md5": "2162dfd0795161b2cbf323506d4eec0a",
          "sha256": "5a125c3ac5bbde52b15471cca607b7cd15d68bf665f575d9be3e1603068fd715"
        },
        "downloads": -1,
        "filename": "swg2pyt-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2162dfd0795161b2cbf323506d4eec0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 17598,
        "upload_time": "2022-08-17T07:48:57",
        "upload_time_iso_8601": "2022-08-17T07:48:57.383955Z",
        "url": "https://files.pythonhosted.org/packages/9f/25/91b502999922c65f61c78fad943a5e242a25f9915ae0a86f357ffdd82240/swg2pyt-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b26d27308045f8f1b506b08ed15e6744f9c9167867d48bad08d5344ea659cf85",
          "md5": "0e3cb22f120d8b41a04525311703d919",
          "sha256": "dfe59661da65b27db7102c807c57b126e9afb6ab08ab61211845e2bf95b58b50"
        },
        "downloads": -1,
        "filename": "swg2pyt-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0e3cb22f120d8b41a04525311703d919",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 18820,
        "upload_time": "2022-08-17T07:48:59",
        "upload_time_iso_8601": "2022-08-17T07:48:59.005350Z",
        "url": "https://files.pythonhosted.org/packages/b2/6d/27308045f8f1b506b08ed15e6744f9c9167867d48bad08d5344ea659cf85/swg2pyt-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44e39b92c6a913952abd2cef0b1fca6a95823e626c38382642ce45dfc7884e97",
          "md5": "44d3aa3425d86fd3d729dade0c671da2",
          "sha256": "24b6d2acc642e470fc3a6eb57f09584e8dfbe9392b3488e1479c20dddae1731a"
        },
        "downloads": -1,
        "filename": "swg2pyt-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44d3aa3425d86fd3d729dade0c671da2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 17596,
        "upload_time": "2022-08-23T07:21:33",
        "upload_time_iso_8601": "2022-08-23T07:21:33.115183Z",
        "url": "https://files.pythonhosted.org/packages/44/e3/9b92c6a913952abd2cef0b1fca6a95823e626c38382642ce45dfc7884e97/swg2pyt-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b4270c395e38c9634fbd74a73539aba35a364d416ff6cb6766190f1086da592",
          "md5": "8849d2a641709125588e958344b6ea83",
          "sha256": "e520432b7db4fcd36143611d4b9b4f7d865298420b6d9aba8e91a04356a3900e"
        },
        "downloads": -1,
        "filename": "swg2pyt-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8849d2a641709125588e958344b6ea83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 18801,
        "upload_time": "2022-08-23T07:21:34",
        "upload_time_iso_8601": "2022-08-23T07:21:34.682949Z",
        "url": "https://files.pythonhosted.org/packages/1b/42/70c395e38c9634fbd74a73539aba35a364d416ff6cb6766190f1086da592/swg2pyt-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b91f48e6188de8558a07cb09efdb47d5f12dfec93088b5011bc31ccf21a06659",
          "md5": "a94be101ea0b561d8b301bf66beb789f",
          "sha256": "991962fc4ab598b40cfcf006bfdbef36cd0139efed7d538baff4d45b02c8418f"
        },
        "downloads": -1,
        "filename": "swg2pyt-0.2.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a94be101ea0b561d8b301bf66beb789f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 17625,
        "upload_time": "2022-11-02T09:21:50",
        "upload_time_iso_8601": "2022-11-02T09:21:50.683712Z",
        "url": "https://files.pythonhosted.org/packages/b9/1f/48e6188de8558a07cb09efdb47d5f12dfec93088b5011bc31ccf21a06659/swg2pyt-0.2.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf02d7aabced5ce49fb3d44086c09d95e38f77cb6488029c90a6b6d040b02975",
          "md5": "3811fced448a66e0f0ce0db74057c950",
          "sha256": "225e7914f9ca17bcfc568503ce366dc38bc9a70e1e501655d50a509c6b345f92"
        },
        "downloads": -1,
        "filename": "swg2pyt-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "3811fced448a66e0f0ce0db74057c950",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 18783,
        "upload_time": "2022-11-02T09:21:52",
        "upload_time_iso_8601": "2022-11-02T09:21:52.706904Z",
        "url": "https://files.pythonhosted.org/packages/cf/02/d7aabced5ce49fb3d44086c09d95e38f77cb6488029c90a6b6d040b02975/swg2pyt-0.2.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b91f48e6188de8558a07cb09efdb47d5f12dfec93088b5011bc31ccf21a06659",
        "md5": "a94be101ea0b561d8b301bf66beb789f",
        "sha256": "991962fc4ab598b40cfcf006bfdbef36cd0139efed7d538baff4d45b02c8418f"
      },
      "downloads": -1,
      "filename": "swg2pyt-0.2.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a94be101ea0b561d8b301bf66beb789f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 17625,
      "upload_time": "2022-11-02T09:21:50",
      "upload_time_iso_8601": "2022-11-02T09:21:50.683712Z",
      "url": "https://files.pythonhosted.org/packages/b9/1f/48e6188de8558a07cb09efdb47d5f12dfec93088b5011bc31ccf21a06659/swg2pyt-0.2.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf02d7aabced5ce49fb3d44086c09d95e38f77cb6488029c90a6b6d040b02975",
        "md5": "3811fced448a66e0f0ce0db74057c950",
        "sha256": "225e7914f9ca17bcfc568503ce366dc38bc9a70e1e501655d50a509c6b345f92"
      },
      "downloads": -1,
      "filename": "swg2pyt-0.2.9.tar.gz",
      "has_sig": false,
      "md5_digest": "3811fced448a66e0f0ce0db74057c950",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 18783,
      "upload_time": "2022-11-02T09:21:52",
      "upload_time_iso_8601": "2022-11-02T09:21:52.706904Z",
      "url": "https://files.pythonhosted.org/packages/cf/02/d7aabced5ce49fb3d44086c09d95e38f77cb6488029c90a6b6d040b02975/swg2pyt-0.2.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}