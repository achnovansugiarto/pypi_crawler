{
  "info": {
    "author": "aschofield",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Streamlit Elements with Fluence Enhancements\n\nThis package builds on the elegant and incredibly useful \"Streamlit Elements\" (<https://github.com/okld/streamlit-elements>). The \"enhancements\" are not so elegant but have proved to be useful in our application. The enhancements are:\n\n* Optional use of `<DataGridPro>` as a replacement for the simpler `<DataGrid>`. This requires a license for both development and deployment of production applications. You can buy a license and read the terms at <https://mui.com/r/x-get-license/>\n\n* Call JavaScript callbacks. This can be useful for example when defining a \"valueFormatter\" for a DataGrid.\n\n* Display a legacy mix of HTML and `<script>` tags using `<InnerHTML>`, see <https://github.com/christo-pr/dangerously-set-html-content-v1>\n\n## Example\n\n```python=\nimport streamlit as st\nfrom streamlit_elements_fluence import elements, mui, JSCallback, extras\n\nst.session_state.mui_license = \"a license that was purchased from https://mui.com/r/x-get-license\"\n\ncolumns = [\n    {\"field\": \"id\", \"headerName\": \"ID\", \"width\": 90},\n    {\"field\": \"firstName\", \"headerName\": \"First name\", \"width\": 150, \"editable\": True},\n    {\n        \"field\": \"lastName\",\n        \"headerName\": \"Last name\",\n        \"width\": 150,\n        \"editable\": True,   \n        \"valueFormatter\": JSCallback(\"\"\"(params) => {return params.value ? params.value.toUpperCase() : ''}\"\"\"),\n    },\n]\n\nrows = [\n    {\"id\": 1, \"lastName\": \"Snow\", \"firstName\": \"Jon\"},\n    {\"id\": 2, \"lastName\": \"Lannister\", \"firstName\": \"Cersei\"},\n    {\"id\": 3, \"lastName\": \"Lannister\", \"firstName\": \"Jaime\"},\n]\n\nwith elements(\"an_example\"):\n\n    mui.DataGridPro(\n        columns=columns,\n        rows=rows,\n        autoHeight=True,\n    )\n\n    mui.Typography(\"Click me!\", onClick=JSCallback(\"\"\"(params) => {alert('Clicked!')}\"\"\"))\n    \n    extras.InnerHTML(html=\"\"\"<div onClick=\"alert('Clicked!')\"<b>Click me!</b></div>\"\"\")\n```\n\nNotes:\n\n* This example (in Example.py) demonstrates all the additional features\n\n* You need to import 'extras' for 'InnerHTML' and 'JSCallback for JavaScript callbacks\n  \n* To use DatGridPro you need a license key. This is set in `st.session_state.mui_license`\n\n* `mui.DataGridPro` is used   in the same way as `mui.DataGrid`\n\n* You can use JSCallback to define, for example, a value formatter. This formatter changes the lastName value to upper case before display.\n\n* You can also use JSCallback to define a click handler (or anything else) on an element such as Typography. JSCallback is only really useful if you neeed to return a value from the callback. Otherwise it woudl be smipler to write the callback in Python.\n\n* `InnerHTML` can be used to display anything, do anything given a lump of HTML containing embedded JavaScript. This is not clean but can be useful for integrating legacy or 3rd party code.\n\n______________________________________________________________________________________________________\nOriginal README follows:\n______________________________________________________________________________________________________\n\nâœ¨ Streamlit Elements &nbsp; [![GitHub][github_badge]][github_link] [![PyPI][pypi_badge]][pypi_link]\n=====================\n\nCreate a draggable and resizable dashboard in Streamlit, featuring Material UI widgets, Monaco editor (Visual Studio Code), Nivo charts, and more!\n\nDemo\n----\n\n[![Open in Streamlit][share_badge]][share_link]\n\n[![Preview][share_video]][share_link]\n\n[share_badge]: https://static.streamlit.io/badges/streamlit_badge_black_white.svg\n[share_link]: https://share.streamlit.io/okld/streamlit-gallery/main?p=elements\n[share_video]: https://github.com/okld/streamlit-elements/raw/main/demo.gif\n\n[github_badge]: https://badgen.net/badge/icon/GitHub?icon=github&color=black&label\n[github_link]: https://github.com/okld/streamlit-elements\n\n[pypi_badge]: https://badgen.net/pypi/v/streamlit-elements?icon=pypi&color=black&label\n[pypi_link]: https://pypi.org/project/streamlit-elements\n\n\nGetting started\n---------------\n\n### 1. Introduction\n\nStreamlit Elements is a component that gives you the tools to compose beautiful applications with Material UI widgets, Monaco, Nivo charts, and more.\nIt also includes a feature to create draggable and resizable dashboards.\n\n#### Installation\n\n```sh\npip install streamlit-elements==0.1.*\n```\n\n**Caution**: It is recommended to pin the version to `0.1.*`. Future versions might introduce breaking API changes.\n\n#### Available elements and objects\n\nHere is a list of elements and objects you can import in your app:\n\nElement   | Description\n:--------:|:-----------\nelements  | Create a frame where elements will be displayed.\ndashboard | Build a draggable and resizable dashboard.\nmui       | Material UI (MUI) widgets and icons.\nhtml      | HTML objects.\neditor    | Monaco code and diff editor that powers Visual Studio Code.\nnivo      | Nivo chart library.\nmedia     | Media player.\nsync      | Callback to synchronize Streamlit's session state with elements events data.\nlazy      | Defer a callback call until another non-lazy callback is called.\n\n#### Caution\n\n- A few Material UI widgets may not work as expected (ie. modal dialogs and snackbars).\n- Using many element frames can significantly impact your app's performance. Try to gather elements in few frames at most.\n\n---\n\n### 2. Display elements\n\n#### 2.1. Create an element with a child\n\n```python\n# First, import the elements you need\n\nfrom streamlit_elements import elements, mui, html\n\n# Create a frame where Elements widgets will be displayed.\n#\n# Elements widgets will not render outside of this frame.\n# Native Streamlit widgets will not render inside this frame.\n#\n# elements() takes a key as parameter.\n# This key can't be reused by another frame or Streamlit widget.\n\nwith elements(\"new_element\"):\n\n    # Let's create a Typography element with \"Hello world\" as children.\n    # The first step is to check Typography's documentation on MUI:\n    # https://mui.com/components/typography/\n    #\n    # Here is how you would write it in React JSX:\n    #\n    # <Typography>\n    #   Hello world\n    # </Typography>\n\n    mui.Typography(\"Hello world\")\n```\n- MUI Typography: https://mui.com/components/typography/\n\n---\n\n#### 2.2. Create an element with multiple children\n\n```python\nwith elements(\"multiple_children\"):\n\n    # You have access to Material UI icons using: mui.icon.IconNameHere\n    #\n    # Multiple children can be added in a single element.\n    #\n    # <Button>\n    #   <EmojiPeople />\n    #   <DoubleArrow />\n    #   Hello world\n    # </Button>\n\n    mui.Button(\n        mui.icon.EmojiPeople,\n        mui.icon.DoubleArrow,\n        \"Button with multiple children\"\n    )\n\n    # You can also add children to an element using a 'with' statement.\n    #\n    # <Button>\n    #   <EmojiPeople />\n    #   <DoubleArrow />\n    #   <Typography>\n    #     Hello world\n    #   </Typography>\n    # </Button>\n\n    with mui.Button:\n        mui.icon.EmojiPeople()\n        mui.icon.DoubleArrow()\n        mui.Typography(\"Button with multiple children\")\n```\n- MUI button: https://mui.com/components/buttons/\n- MUI icons: https://mui.com/components/material-icons/\n\n---\n\n#### 2.3. Create an element with nested children\n\n```python\nwith elements(\"nested_children\"):\n\n    # You can nest children using multiple 'with' statements.\n    #\n    # <Paper>\n    #   <Typography>\n    #     <p>Hello world</p>\n    #     <p>Goodbye world</p>\n    #   </Typography>\n    # </Paper>\n\n    with mui.Paper:\n        with mui.Typography:\n            html.p(\"Hello world\")\n            html.p(\"Goodbye world\")\n```\n- MUI paper: https://mui.com/components/paper/\n\n---\n\n#### 2.4. Add properties to an element\n\n```python\nwith elements(\"properties\"):\n\n    # You can add properties to elements with named parameters.\n    #\n    # To find all available parameters for a given element, you can\n    # refer to its related documentation on mui.com for MUI widgets,\n    # on https://microsoft.github.io/monaco-editor/ for Monaco editor,\n    # and so on.\n    #\n    # <Paper elevation={3} variant=\"outlined\" square>\n    #   <TextField label=\"My text input\" defaultValue=\"Type here\" variant=\"outlined\" />\n    # </Paper>\n\n    with mui.Paper(elevation=3, variant=\"outlined\", square=True):\n        mui.TextField(\n            label=\"My text input\",\n            defaultValue=\"Type here\",\n            variant=\"outlined\",\n        )\n\n    # If you must pass a parameter which is also a Python keyword, you can append an\n    # underscore to avoid a syntax error.\n    #\n    # <Collapse in />\n\n    mui.Collapse(in_=True)\n\n    # mui.collapse(in=True)\n    # > Syntax error: 'in' is a Python keyword:\n```\n- MUI text field: https://mui.com/components/text-fields/\n\n---\n\n#### 2.5. Apply custom CSS styles\n\n##### 2.5.1. Material UI elements\n\n```python\nwith elements(\"style_mui_sx\"):\n\n    # For Material UI elements, use the 'sx' property.\n    #\n    # <Box\n    #   sx={{\n    #     bgcolor: 'background.paper',\n    #     boxShadow: 1,\n    #     borderRadius: 2,\n    #     p: 2,\n    #     minWidth: 300,\n    #   }}\n    # >\n    #   Some text in a styled box\n    # </Box>\n\n    mui.Box(\n        \"Some text in a styled box\",\n        sx={\n            \"bgcolor\": \"background.paper\",\n            \"boxShadow\": 1,\n            \"borderRadius\": 2,\n            \"p\": 2,\n            \"minWidth\": 300,\n        }\n    )\n```\n- MUI's **sx** property: https://mui.com/system/the-sx-prop/\n\n##### 2.5.2. Other elements\n\n```python\nwith elements(\"style_elements_css\"):\n\n    # For any other element, use the 'css' property.\n    #\n    # <div\n    #   css={{\n    #     backgroundColor: 'hotpink',\n    #     '&:hover': {\n    #         color: 'lightgreen'\n    #     }\n    #   }}\n    # >\n    #   This has a hotpink background\n    # </div>\n\n    html.div(\n        \"This has a hotpink background\",\n        css={\n            \"backgroundColor\": \"hotpink\",\n            \"&:hover\": {\n                \"color\": \"lightgreen\"\n            }\n        }\n    )\n```\n- Emotion's **css** property: https://emotion.sh/docs/css-prop#object-styles\n\n---\n\n### 3. Callbacks\n\n#### 3.1. Retrieve an element's data\n\n```python\nimport streamlit as st\n\nwith elements(\"callbacks_retrieve_data\"):\n\n    # Some element allows executing a callback on specific event.\n    #\n    # const [name, setName] = React.useState(\"\")\n    # const handleChange = (event) => {\n    #   // You can see here that a text field value\n    #   // is stored in event.target.value\n    #   setName(event.target.value)\n    # }\n    #\n    # <TextField\n    #   label=\"Input some text here\"\n    #   onChange={handleChange}\n    # />\n\n    # Initialize a new item in session state called \"my_text\"\n    if \"my_text\" not in st.session_state:\n        st.session_state.my_text = \"\"\n\n    # When text field changes, this function will be called.\n    # To know which parameters are passed to the callback,\n    # you can refer to the element's documentation.\n    def handle_change(event):\n        st.session_state.my_text = event.target.value\n\n    # Here we display what we have typed in our text field\n    mui.Typography(st.session_state.my_text)\n\n    # And here we give our 'handle_change' callback to the 'onChange'\n    # property of the text field.\n    mui.TextField(label=\"Input some text here\", onChange=handle_change)\n```\n- MUI text field event: https://mui.com/components/text-fields/#uncontrolled-vs-controlled\n- MUI text field API: https://mui.com/api/text-field/\n\n---\n\n#### 3.2. Synchronize a session state item with an element event using sync()\n\n```python\nwith elements(\"callbacks_sync\"):\n\n    # If you just want to store callback parameters into Streamlit's session state\n    # like above, you can also use the special function sync().\n    #\n    # When an onChange event occurs, the callback is called with an event data object\n    # as argument. In the example below, we are synchronizing that event data object with\n    # the session state item 'my_event'.\n    #\n    # If an event passes more than one parameter, you can synchronize as many session state item\n    # as needed like so:\n    # >>> sync(\"my_first_param\", \"my_second_param\")\n    #\n    # If you want to ignore the first parameter of an event but keep synchronizing the second,\n    # pass None to sync:\n    # >>> sync(None, \"second_parameter_to_keep\")\n\n    from streamlit_elements import sync\n\n    if \"my_event\" not in st.session_state:\n        st.session_state.my_event = None\n\n    if st.session_state.my_event is not None:\n        text = st.session_state.my_event.target.value\n    else:\n        text = \"\"\n\n    mui.Typography(text)\n    mui.TextField(label=\"Input some text here\", onChange=sync(\"my_event\"))\n```\n\n---\n\n#### 3.3. Avoid too many reloads with lazy()\n\n```python\nwith elements(\"callbacks_lazy\"):\n\n    # With the two first examples, each time you input a letter into the text field,\n    # the callback is invoked but the whole app is reloaded as well.\n    #\n    # To avoid reloading the whole app on every input, you can wrap your callback with\n    # lazy(). This will defer the callback invocation until another non-lazy callback\n    # is invoked. This can be useful to implement forms.\n\n    from streamlit_elements import lazy\n\n    if \"first_name\" not in st.session_state:\n        st.session_state.first_name = None\n        st.session_state.last_name = None\n\n    if st.session_state.first_name is not None:\n        first_name = st.session_state.first_name.target.value\n    else:\n        first_name = \"John\"\n\n    if st.session_state.last_name is not None:\n        last_name = st.session_state.last_name.target.value\n    else:\n        last_name = \"Doe\"\n\n    def set_last_name(event):\n        st.session_state.last_name = event\n\n    # Display first name and last name\n    mui.Typography(\"Your first name: \", first_name)\n    mui.Typography(\"Your last name: \", last_name)\n\n    # Lazily synchronize onChange with first_name and last_name state.\n    # Inputting some text won't synchronize the value yet.\n    mui.TextField(label=\"First name\", onChange=lazy(sync(\"first_name\")))\n\n    # You can also pass regular python functions to lazy().\n    mui.TextField(label=\"Last name\", onChange=lazy(set_last_name))\n\n    # Here we give a non-lazy callback to onClick using sync().\n    # We are not interested in getting onClick event data object,\n    # so we call sync() with no argument.\n    #\n    # You can use either sync() or a regular python function.\n    # As long as the callback is not wrapped with lazy(), its invocation will\n    # also trigger every other defered callbacks.\n    mui.Button(\"Update first namd and last name\", onClick=sync())\n```\n\n---\n\n#### 3.4. Invoke a callback when a sequence is pressed using event.Hotkey()\n\n```python\nwith elements(\"callbacks_hotkey\"):\n\n    # Invoke a callback when a specific hotkey sequence is pressed.\n    #\n    # For more information regarding sequences syntax and supported keys,\n    # go to Mousetrap's project page linked below.\n    #\n    # /!\\ Hotkeys work if you don't have focus on Streamlit Elements's frame /!\\\n    # /!\\ As with other callbacks, this reruns the whole app /!\\\n\n    from streamlit_elements import event\n\n    def hotkey_pressed():\n        print(\"Hotkey pressed\")\n\n    event.Hotkey(\"g\", hotkey_pressed)\n\n    # If you want your hotkey to work even in text fields, set bind_inputs to True.\n    event.Hotkey(\"h\", hotkey_pressed, bindInputs=True)\n    mui.TextField(label=\"Try pressing 'h' while typing some text here.\")\n\n    # If you want to override default hotkeys (ie. ctrl+f to search in page),\n    # set overrideDefault to True.\n    event.Hotkey(\"ctrl+f\", hotkey_pressed, overrideDefault=True)\n```\n- Mousetrap: https://craig.is/killing/mice\n- Github page: https://github.com/ccampbell/mousetrap\n\n---\n\n#### 3.5. Invoke a callback periodically using event.Interval()\n\n```python\nwith elements(\"callbacks_interval\"):\n\n    # Invoke a callback every n seconds.\n    #\n    # /!\\ As with other callbacks, this reruns the whole app /!\\\n\n    def call_every_second():\n        print(\"Hello world\")\n\n    event.Interval(1, call_every_second)\n```\n\n---\n\n### 4. Draggable and resizable dashboard\n\n```python\nwith elements(\"dashboard\"):\n\n    # You can create a draggable and resizable dashboard using\n    # any element available in Streamlit Elements.\n\n    from streamlit_elements import dashboard\n\n    # First, build a default layout for every element you want to include in your dashboard\n\n    layout = [\n        # Parameters: element_identifier, x_pos, y_pos, width, height, [item properties...]\n        dashboard.Item(\"first_item\", 0, 0, 2, 2),\n        dashboard.Item(\"second_item\", 2, 0, 2, 2, isDraggable=False, moved=False),\n        dashboard.Item(\"third_item\", 0, 2, 1, 1, isResizable=False),\n    ]\n\n    # Next, create a dashboard layout using the 'with' syntax. It takes the layout\n    # as first parameter, plus additional properties you can find in the GitHub links below.\n\n    with dashboard.Grid(layout):\n        mui.Paper(\"First item\", key=\"first_item\")\n        mui.Paper(\"Second item (cannot drag)\", key=\"second_item\")\n        mui.Paper(\"Third item (cannot resize)\", key=\"third_item\")\n\n    # If you want to retrieve updated layout values as the user move or resize dashboard items,\n    # you can pass a callback to the onLayoutChange event parameter.\n\n    def handle_layout_change(updated_layout):\n        # You can save the layout in a file, or do anything you want with it.\n        # You can pass it back to dashboard.Grid() if you want to restore a saved layout.\n        print(updated_layout)\n\n    with dashboard.Grid(layout, onLayoutChange=handle_layout_change):\n        mui.Paper(\"First item\", key=\"first_item\")\n        mui.Paper(\"Second item (cannot drag)\", key=\"second_item\")\n        mui.Paper(\"Third item (cannot resize)\", key=\"third_item\")\n```\n- Dashboard item properties: https://github.com/react-grid-layout/react-grid-layout#grid-item-props\n- Dashboard grid properties (Streamlit Elements uses the Responsive grid layout):\n  - https://github.com/react-grid-layout/react-grid-layout#grid-layout-props\n  - https://github.com/react-grid-layout/react-grid-layout#responsive-grid-layout-props\n\n---\n\n### 5. Other third-party elements\n\n#### 5.1. Monaco code and diff editor\n\n```python\nwith elements(\"monaco_editors\"):\n\n    # Streamlit Elements embeds Monaco code and diff editor that powers Visual Studio Code.\n    # You can configure editor's behavior and features with the 'options' parameter.\n    #\n    # Streamlit Elements uses an unofficial React implementation (GitHub links below for\n    # documentation).\n\n    from streamlit_elements import editor\n\n    if \"content\" not in st.session_state:\n        st.session_state.content = \"Default value\"\n\n    mui.Typography(\"Content: \", st.session_state.content)\n\n    def update_content(value):\n        st.session_state.content = value\n\n    editor.Monaco(\n        height=300,\n        defaultValue=st.session_state.content,\n        onChange=lazy(update_content)\n    )\n\n    mui.Button(\"Update content\", onClick=sync())\n\n    editor.MonacoDiff(\n        original=\"Happy Streamlit-ing!\",\n        modified=\"Happy Streamlit-in' with Elements!\",\n        height=300,\n    )\n```\n- Monaco examples and properties: https://github.com/suren-atoyan/monaco-react\n- Code editor options: https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IStandaloneEditorConstructionOptions.html\n- Diff editor options: https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IStandaloneDiffEditorConstructionOptions.html\n- Monaco project page: https://microsoft.github.io/monaco-editor/\n\n---\n\n#### 5.2. Nivo charts\n\n```python\nwith elements(\"nivo_charts\"):\n\n    # Streamlit Elements includes 45 dataviz components powered by Nivo.\n\n    from streamlit_elements import nivo\n\n    DATA = [\n        { \"taste\": \"fruity\", \"chardonay\": 93, \"carmenere\": 61, \"syrah\": 114 },\n        { \"taste\": \"bitter\", \"chardonay\": 91, \"carmenere\": 37, \"syrah\": 72 },\n        { \"taste\": \"heavy\", \"chardonay\": 56, \"carmenere\": 95, \"syrah\": 99 },\n        { \"taste\": \"strong\", \"chardonay\": 64, \"carmenere\": 90, \"syrah\": 30 },\n        { \"taste\": \"sunny\", \"chardonay\": 119, \"carmenere\": 94, \"syrah\": 103 },\n    ]\n\n    with mui.Box(sx={\"height\": 500}):\n        nivo.Radar(\n            data=DATA,\n            keys=[ \"chardonay\", \"carmenere\", \"syrah\" ],\n            indexBy=\"taste\",\n            valueFormat=\">-.2f\",\n            margin={ \"top\": 70, \"right\": 80, \"bottom\": 40, \"left\": 80 },\n            borderColor={ \"from\": \"color\" },\n            gridLabelOffset=36,\n            dotSize=10,\n            dotColor={ \"theme\": \"background\" },\n            dotBorderWidth=2,\n            motionConfig=\"wobbly\",\n            legends=[\n                {\n                    \"anchor\": \"top-left\",\n                    \"direction\": \"column\",\n                    \"translateX\": -50,\n                    \"translateY\": -40,\n                    \"itemWidth\": 80,\n                    \"itemHeight\": 20,\n                    \"itemTextColor\": \"#999\",\n                    \"symbolSize\": 12,\n                    \"symbolShape\": \"circle\",\n                    \"effects\": [\n                        {\n                            \"on\": \"hover\",\n                            \"style\": {\n                                \"itemTextColor\": \"#000\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            theme={\n                \"background\": \"#FFFFFF\",\n                \"textColor\": \"#31333F\",\n                \"tooltip\": {\n                    \"container\": {\n                        \"background\": \"#FFFFFF\",\n                        \"color\": \"#31333F\",\n                    }\n                }\n            }\n        )\n```\n- Nivo charts: https://nivo.rocks/\n- Github page: https://github.com/plouc/nivo\n\n---\n\n#### 5.3. Media player\n\n```python\nwith elements(\"media_player\"):\n\n    # Play video from many third-party sources: YouTube, Facebook, Twitch,\n    # SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, DailyMotion and Kaltura.\n    #\n    # This element is powered by ReactPlayer (GitHub link below).\n\n    from streamlit_elements import media\n\n    media.Player(url=\"https://www.youtube.com/watch?v=iik25wqIuFo\", controls=True)\n```\n- ReactPlayer properties: https://github.com/cookpete/react-player#props\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://fluence.world",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "streamlit-elements-fluence",
    "package_url": "https://pypi.org/project/streamlit-elements-fluence/",
    "platform": null,
    "project_url": "https://pypi.org/project/streamlit-elements-fluence/",
    "project_urls": {
      "Homepage": "https://fluence.world"
    },
    "release_url": "https://pypi.org/project/streamlit-elements-fluence/0.1.4/",
    "requires_dist": [
      "streamlit (>=1.4.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "React Components for Streamlit.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15290735,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a5945c531de6feebbdeeecfc696e6a14dddba2cf94837d42917d9dbd2be4845",
          "md5": "b83d0c73c19c1d85904a913c9b21f280",
          "sha256": "9a7636f63018f2ac67a36e4be0170bfef76ec3472ba398d412cc1c48e95ef1b6"
        },
        "downloads": -1,
        "filename": "streamlit_elements_fluence-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b83d0c73c19c1d85904a913c9b21f280",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4510097,
        "upload_time": "2022-09-18T20:12:10",
        "upload_time_iso_8601": "2022-09-18T20:12:10.966838Z",
        "url": "https://files.pythonhosted.org/packages/6a/59/45c531de6feebbdeeecfc696e6a14dddba2cf94837d42917d9dbd2be4845/streamlit_elements_fluence-0.1.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98aaf39eccc9d6f4f72f4d98c33d69d0912aa7f9bd345953f96da8918405ff4e",
          "md5": "3f5f523459b530e07f6a171e9194b80e",
          "sha256": "7189b512f7c17083293a075318c0cbbd0d9371e52724d6f69794089c3c0ae5d8"
        },
        "downloads": -1,
        "filename": "streamlit-elements-fluence-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3f5f523459b530e07f6a171e9194b80e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16950773,
        "upload_time": "2022-09-18T20:12:24",
        "upload_time_iso_8601": "2022-09-18T20:12:24.160325Z",
        "url": "https://files.pythonhosted.org/packages/98/aa/f39eccc9d6f4f72f4d98c33d69d0912aa7f9bd345953f96da8918405ff4e/streamlit-elements-fluence-0.1.0.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99f41f0e2f36efef994e838413057cbda3c2af51d9d4c6ecfdf05170b3708e70",
          "md5": "6c8deb1b1784e5e3e6020cd3e37580c4",
          "sha256": "99b1f8566070bd7a12ee8c2de21fd4b85b129ed9f7f3f8ddafb7ad7f683fa38a"
        },
        "downloads": -1,
        "filename": "streamlit_elements_fluence-0.1.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c8deb1b1784e5e3e6020cd3e37580c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4510108,
        "upload_time": "2022-09-18T20:32:02",
        "upload_time_iso_8601": "2022-09-18T20:32:02.926726Z",
        "url": "https://files.pythonhosted.org/packages/99/f4/1f0e2f36efef994e838413057cbda3c2af51d9d4c6ecfdf05170b3708e70/streamlit_elements_fluence-0.1.0rc1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb8e27bea93f9aa77fc659a4a0401a224174460a4b673127231d590acbaa0f08",
          "md5": "ac3ceda7e57a2f719e4895e019c1899b",
          "sha256": "0710310489107fb1d4fc0d04a2dc797df099133f253ea94b9a3be3c9ff44a061"
        },
        "downloads": -1,
        "filename": "streamlit-elements-fluence-0.1.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac3ceda7e57a2f719e4895e019c1899b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16950134,
        "upload_time": "2022-09-18T20:32:19",
        "upload_time_iso_8601": "2022-09-18T20:32:19.375001Z",
        "url": "https://files.pythonhosted.org/packages/bb/8e/27bea93f9aa77fc659a4a0401a224174460a4b673127231d590acbaa0f08/streamlit-elements-fluence-0.1.0rc1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7124e0db4a963ed27ece3ba5003ae089c0fb7faebfd40eac81ab144e56fa9d9b",
          "md5": "75494743ede2f6dc1458caf4370caeb5",
          "sha256": "20ccd632c5556ccff8b53a0a32a82473f0983537e30cfc570df32933e3235ca4"
        },
        "downloads": -1,
        "filename": "streamlit_elements_fluence-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75494743ede2f6dc1458caf4370caeb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4511306,
        "upload_time": "2022-09-19T07:56:09",
        "upload_time_iso_8601": "2022-09-19T07:56:09.931994Z",
        "url": "https://files.pythonhosted.org/packages/71/24/e0db4a963ed27ece3ba5003ae089c0fb7faebfd40eac81ab144e56fa9d9b/streamlit_elements_fluence-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "421c3b905160040116d8a575911566e079801814f403324886c062dbda6d59b8",
          "md5": "074890d9d76277eb5c5ed235cebd1a71",
          "sha256": "37804cb424b33d6ac9e3a7a024f5f7c40096cc3a33899f75d15b06ba133a30d8"
        },
        "downloads": -1,
        "filename": "streamlit_elements_fluence-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "074890d9d76277eb5c5ed235cebd1a71",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4510047,
        "upload_time": "2022-09-19T09:09:54",
        "upload_time_iso_8601": "2022-09-19T09:09:54.848827Z",
        "url": "https://files.pythonhosted.org/packages/42/1c/3b905160040116d8a575911566e079801814f403324886c062dbda6d59b8/streamlit_elements_fluence-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7d60b06f6f1e2c84c780aaa70bfbc4ef686367fb79e78bb95f266b44cdea293",
          "md5": "4a12fa68a5d03715b368ee3048bf908d",
          "sha256": "5abb0bdd203d6b6f08b535e5c5797ca387e52b560e824c47b976719e378cbe63"
        },
        "downloads": -1,
        "filename": "streamlit-elements-fluence-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4a12fa68a5d03715b368ee3048bf908d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16950715,
        "upload_time": "2022-09-19T09:10:09",
        "upload_time_iso_8601": "2022-09-19T09:10:09.146333Z",
        "url": "https://files.pythonhosted.org/packages/e7/d6/0b06f6f1e2c84c780aaa70bfbc4ef686367fb79e78bb95f266b44cdea293/streamlit-elements-fluence-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33b47db136a1b9d1e4eb71d7713abb0695ca2555c112add3ef0a4e01f58c77c4",
          "md5": "cb46331b328445a5f40354a6d2821a6c",
          "sha256": "6bf8c7ee582e4b0edf4603dc5b743888bb9df878ee1bd1780c8db287cd08c303"
        },
        "downloads": -1,
        "filename": "streamlit_elements_fluence-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb46331b328445a5f40354a6d2821a6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4510084,
        "upload_time": "2022-10-03T14:48:57",
        "upload_time_iso_8601": "2022-10-03T14:48:57.439911Z",
        "url": "https://files.pythonhosted.org/packages/33/b4/7db136a1b9d1e4eb71d7713abb0695ca2555c112add3ef0a4e01f58c77c4/streamlit_elements_fluence-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2455d4588a8467802505ca840ebf74d03bfa72dfcdcf94e64bd512b0449392d6",
          "md5": "17962920990349307838ea43b87d02ee",
          "sha256": "79263c002918b67ddc5a6ee929aa3f80f091ddc3df0b4703ffda134187e255ef"
        },
        "downloads": -1,
        "filename": "streamlit-elements-fluence-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "17962920990349307838ea43b87d02ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16950858,
        "upload_time": "2022-10-03T14:49:08",
        "upload_time_iso_8601": "2022-10-03T14:49:08.520134Z",
        "url": "https://files.pythonhosted.org/packages/24/55/d4588a8467802505ca840ebf74d03bfa72dfcdcf94e64bd512b0449392d6/streamlit-elements-fluence-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33b47db136a1b9d1e4eb71d7713abb0695ca2555c112add3ef0a4e01f58c77c4",
        "md5": "cb46331b328445a5f40354a6d2821a6c",
        "sha256": "6bf8c7ee582e4b0edf4603dc5b743888bb9df878ee1bd1780c8db287cd08c303"
      },
      "downloads": -1,
      "filename": "streamlit_elements_fluence-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb46331b328445a5f40354a6d2821a6c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4510084,
      "upload_time": "2022-10-03T14:48:57",
      "upload_time_iso_8601": "2022-10-03T14:48:57.439911Z",
      "url": "https://files.pythonhosted.org/packages/33/b4/7db136a1b9d1e4eb71d7713abb0695ca2555c112add3ef0a4e01f58c77c4/streamlit_elements_fluence-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2455d4588a8467802505ca840ebf74d03bfa72dfcdcf94e64bd512b0449392d6",
        "md5": "17962920990349307838ea43b87d02ee",
        "sha256": "79263c002918b67ddc5a6ee929aa3f80f091ddc3df0b4703ffda134187e255ef"
      },
      "downloads": -1,
      "filename": "streamlit-elements-fluence-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "17962920990349307838ea43b87d02ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16950858,
      "upload_time": "2022-10-03T14:49:08",
      "upload_time_iso_8601": "2022-10-03T14:49:08.520134Z",
      "url": "https://files.pythonhosted.org/packages/24/55/d4588a8467802505ca840ebf74d03bfa72dfcdcf94e64bd512b0449392d6/streamlit-elements-fluence-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}