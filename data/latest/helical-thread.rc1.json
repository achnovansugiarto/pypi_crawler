{
  "info": {
    "author": "Wink Saville",
    "author_email": "wink@saville.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "==============\nHelical Thread\n==============\n\n..\n  TODO: eventually we'll enable the badges\n  .. image:: https://img.shields.io/travis/winksaville/helical_thread.svg\n          :target: https://travis-ci.com/winksaville/helical_thread\n\n..\n  .. image:: https://img.shields.io/pypi/v/helical_thread.svg\n     :target: https://pypi.python.org/pypi/helical_thread\n\n..\n  .. image:: https://readthedocs.org/projects/helical-thread/badge/?version=latest\n      :target: https://helical-thread.readthedocs.io/en/latest/?badge=latest\n      :alt: Documentation Status\n\nCreate helical threads\n\n* GitHub repo: https://github.com/winksaville/py-helical-thread/\n* Documentation: https://helical-thread.readthedocs.io/\n* PyPi package: https://pypi.org/project/helical-thread/\n* Test PyPi package: https://test.pypi.org/project/helical-thread/\n* Free software: MIT license\n* Source: `helicalthread.py`_\n\n\nExamples\n--------\n\n* `int_ext_both.py`_\n\n.. code-block:: python\n\n        def add_traces(\n            name: str,\n            fig: go.Figure,\n            ths: ThreadHelixes,\n            helix_locations: List[HelixLocation],\n            vert_offset: float = 0,\n        ) -> None:\n\n            # Loop over each of the helexis adding a trace for each\n            for i, hl in enumerate(helix_locations):\n                # Create the helix funtion\n                f = ths.ht.helix(hl)\n\n                # Create a list of points using map to invoke \"f\"\n                # over 500 points between first_t and last_t inclusive.\n                points = list(\n                    map(f, linspace(ths.ht.first_t, ths.ht.last_t, num=500, dtype=float))\n                )\n\n                # Check if we should offset the points\n                if vert_offset != 0:\n                    points = [(x, y, z + vert_offset) for x, y, z in points]\n\n                # Add a trace decomposing points into three separate lists\n                fig.add_trace(\n                    go.Scatter3d(\n                        # Extract x, y, z\n                        x=[x for x, _, _ in points],\n                        y=[y for _, y, _ in points],\n                        z=[z for _, _, z in points],\n                        mode=\"lines\",\n                        name=f\"{name}{i}\",\n                    )\n                )\n\n\n        if __name__ == \"__main__\":\n            params = Parameters(argv[1:])\n            ths: ThreadHelixes = helical_thread(params.ht)\n\n            # Create a plotly figure\n            fig = go.Figure(\n                # layout_title_text=\"Helical Triangle\",\n                layout_scene_camera_projection_type=\"orthographic\",\n            )\n\n            # Add the traces for internal/external or both\n\n            if (params.int_ext_both == \"int\") or (params.int_ext_both == \"both\"):\n                add_traces(\"int\", fig, ths, ths.int_helixes)\n\n            if (params.int_ext_both == \"ext\") or (params.int_ext_both == \"both\"):\n                # When doing set the vert_offset to pitch / s so we see the thread alignment\n                vert_offset = ths.ht.pitch / 2 if params.int_ext_both == \"both\" else 0\n                add_traces(\"ext\", fig, ths, ths.ext_helixes, vert_offset)\n\n            # Show the figure\n            fig.show()\n\n            if params.write:\n                # Write the image is requested\n                try:\n                    fname = \"data/int_ext_both.webp\"\n                    fig.write_image(fname)\n                    print(f\"wrote: {fname}\")\n                except Exception as e:\n                    print(f\"Unable to write files; maybe run from project root: e={e}\")\n\n\n.. image:: https://raw.githubusercontent.com/winksaville/py-helical-thread/main/data/int_ext_both.webp\n\n\nPrerequisites\n-------------\n\nUsing\n#####\n\n* python >= 3.7\n\n\nDevelopment and Examples\n########################\n\nSee `dev-requirements.in`_ for most up to date list:\n\n* pip-tools\n* bump2version\n* wheel\n* isort\n* black\n* flake8\n* tox\n* tox-conda\n* coverage\n* Sphinx>=3.2\n* sphinx_rtd_theme\n* sphinx-autodoc-typehints\n* sphinx-prompt\n* sphinx_substitution_extensions>=2020.09.30, <2021.12.00\n* taperable-helix\n* twine\n* pytest\n* pytest-runner\n* kaleido\n* plotly\n* psutil\n* numpy\n* pandas\n\n.. _`helicalthread.py`: https://github.com/winksaville/py-helical-thread/blob/main/helical_thread/helicalthread.py\n.. _`int_ext_both.py`: https://github.com/winksaville/py-helical-thread/blob/main/examples/int_ext_both.py\n.. _`dev-requirements.in`: https://github.com/winksaville/py-helical-thread/blob/main/dev-requirements.in\n\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/winksaville/py-helical-thread",
    "keywords": "helical helix thread",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "helical-thread",
    "package_url": "https://pypi.org/project/helical-thread/",
    "platform": "any",
    "project_url": "https://pypi.org/project/helical-thread/",
    "project_urls": {
      "Homepage": "https://github.com/winksaville/py-helical-thread"
    },
    "release_url": "https://pypi.org/project/helical-thread/0.2.2/",
    "requires_dist": [
      "taperable-helix"
    ],
    "requires_python": ">=3.7",
    "summary": "Creates a helical thread",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8397961,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c44e3fd311d1b569dd7ef7bd4d60045e722db03d48da2bf771f8fd2f99bebaf",
          "md5": "b0754f4e0706967b2a447c01ce5fdde3",
          "sha256": "d3f76fd9991dfbab88c8fb130e599b5ad980b89c18b372482592baad3ce0fa67"
        },
        "downloads": -1,
        "filename": "helical_thread-0.2.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0754f4e0706967b2a447c01ce5fdde3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 6357,
        "upload_time": "2020-10-13T00:35:27",
        "upload_time_iso_8601": "2020-10-13T00:35:27.939764Z",
        "url": "https://files.pythonhosted.org/packages/6c/44/e3fd311d1b569dd7ef7bd4d60045e722db03d48da2bf771f8fd2f99bebaf/helical_thread-0.2.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5ddd71faf3984b9353b9414bd33b05c0f22cd8d965b2d661f1c16d6fbcfbc95",
          "md5": "9d070ebc7112c9aba58961f0369d883b",
          "sha256": "32e9276e71eb853662f5f067c7b8d9a61dbbf8a3064ac97dc5ee9296ec873a6d"
        },
        "downloads": -1,
        "filename": "helical_thread-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9d070ebc7112c9aba58961f0369d883b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5423,
        "upload_time": "2020-10-13T00:35:30",
        "upload_time_iso_8601": "2020-10-13T00:35:30.898611Z",
        "url": "https://files.pythonhosted.org/packages/d5/dd/d71faf3984b9353b9414bd33b05c0f22cd8d965b2d661f1c16d6fbcfbc95/helical_thread-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c44e3fd311d1b569dd7ef7bd4d60045e722db03d48da2bf771f8fd2f99bebaf",
        "md5": "b0754f4e0706967b2a447c01ce5fdde3",
        "sha256": "d3f76fd9991dfbab88c8fb130e599b5ad980b89c18b372482592baad3ce0fa67"
      },
      "downloads": -1,
      "filename": "helical_thread-0.2.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b0754f4e0706967b2a447c01ce5fdde3",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 6357,
      "upload_time": "2020-10-13T00:35:27",
      "upload_time_iso_8601": "2020-10-13T00:35:27.939764Z",
      "url": "https://files.pythonhosted.org/packages/6c/44/e3fd311d1b569dd7ef7bd4d60045e722db03d48da2bf771f8fd2f99bebaf/helical_thread-0.2.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5ddd71faf3984b9353b9414bd33b05c0f22cd8d965b2d661f1c16d6fbcfbc95",
        "md5": "9d070ebc7112c9aba58961f0369d883b",
        "sha256": "32e9276e71eb853662f5f067c7b8d9a61dbbf8a3064ac97dc5ee9296ec873a6d"
      },
      "downloads": -1,
      "filename": "helical_thread-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9d070ebc7112c9aba58961f0369d883b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5423,
      "upload_time": "2020-10-13T00:35:30",
      "upload_time_iso_8601": "2020-10-13T00:35:30.898611Z",
      "url": "https://files.pythonhosted.org/packages/d5/dd/d71faf3984b9353b9414bd33b05c0f22cd8d965b2d661f1c16d6fbcfbc95/helical_thread-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}