{
  "info": {
    "author": "Ricardo Nunes",
    "author_email": "sanunes.ricardo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Tweet Parser and Matcher\n\n### Requirements:\nPython version >= 3.7.9\n\n### Steps to run program:\n1. Install Dependencies:\n```\npip install -r requirements.txt \n```\n2. In project directory install package with wheel\n```\npip install .\n```\n\n3. See runs with different commands:\n```\n# Parsing directly from gz using given sample\npython -m tweet_matcher.matcher -nd ./sample/nodes_2/ -td ./sample/terms_2_3/ -tw ./sample/tweets/tweets.jsonl.gz -od ./output/\n# Concurrent partitioning by 400 tweets files 10x sample with 10% random user ids added\npython -m tweet_matcher.matcher -nd ./sample/nodes_2/ -td ./sample/terms_2_3/ -tw ./sample/tweets/tweets_x_10_r_10.jsonl.gz  -od ./output/ -cc 1 -p 400\n\n```\n\n4. Run command below for more options:\n```\npython -m tweet_matcher.matcher -h\n```\n\n5. See logs folder to see details from tests and runs\n\n\n### Steps to run nightly:\n1. Verify with upstream developers what time should the files be expected to be SFTPed to endpoint. Say 9PM.\n3. Set up cron job for with required parameters:\n```\n0 21 * * * python tweet_matcher.matcher -tw <tweet_file_dir> -nd <nodes_dir> -td <terms_directory> -od <output_dir>\n```\n\n\n### TODO:\n1. Explore stream for real time processing of tweet data and use part of implementation from concurrent solution to send async requests to another API.\n2. Implement API for nodes, terms update and matches.\n3. Add preprocessing step to filter tweets by node_id's.\n4. Improve benchmark to randomize groups of words in generated tweet text. Add generation of node_ids and terms.\n5. Benchmark more systems and get to best choice for batch work targeting nightly tweets processed, say 10% of daily tweets ~50M.\n6. In order to get more than just exact matches, apply TFIDF for more heuristic approaches over data being processed.\n7. Add more support for emojis.\n\n### Further considerations\n1. Storage Design:\n<p>a1) In most files, I suggest keeping it simple and just process it in batch, feeding to either a sqlite database, since in implementation it would only be done by 1 thread when under 10MB, or keeping it in a text file. </p>\n<p>a2) For large files, where gz is greater than 10MB, I suggest a versatile database server, e.g. postgresql, so both sql and nosql data can be easily stored and since my implementation makes the processing of each new partition of jsonl.gz concurrent, it would not lock, allowing multiple threads to access the db concurrently. A lock would need to be implemented in the db in case we store number of occurrences of the term by node_id, or in case we make it nosql, append message_id's to a list. Since we are only recording the occurrence, racing threads would end up with the same result.</p>\n<p> b) Create an index on date of occurrence using Y-m-d and another index for node_id, access it using composite of both indexes.</p>\n\n2. In order to take immediate action, I would implement a send email functionality when an exception is raised, with instructions about the error and how to fix it, initially sending it to a support email and providing the developer's email in case the one's in support cannot quickly figure it out. If a logging server (such as Splunk) is available, I would alert support by email based on the output in the log files. Please, see my implementation of the logger.\n\n3. If the files are simply being SFTPed to a given data directory, there is no need for an API. But in case we are streaming this data, I would implement a simple sanic server that would allow PUT and DELETE. A simple SQL database would suffice but make the requests async.\nEndpoints: /node and /term\nSlugs: <int category> and <int node_id/hashed(term)>\nTables: term and user\nIndex: categories both, hashed term for term table and node_id for user table\n\n4. I would implement a stream using a pub/sub design pattern to deal with tweets in real time if we are handling with more than 1% of twitter daily feed or in case batch processing is required, I would have a dedicated server with at least 64GB RAM and 1TB. These numbers are based on the jsonl.gz generated by my benchmark from sample tweets.jsonl.gz. Please see ./benchmark for implementation deatils.\nA concurrent approach did not prove to show many gains with local storage and due to Python limitation. In order to test this if your machine allows multithreading, generate large tweet files with ~8M tweets and 10% of node_ids randomly assigned to node ids that we have in the pool, this may take a few minutes for n > 50:\n```\npython benchmarks/create_random_tweets.py -n <multiplication_factor> -r <random_from_user_pool>\n\n```\nGenerated tweets files are placed in `./sample/tweets/` folder\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dlgiant/tweet_matcher",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tweet-matcher",
    "package_url": "https://pypi.org/project/tweet-matcher/",
    "platform": "",
    "project_url": "https://pypi.org/project/tweet-matcher/",
    "project_urls": {
      "Homepage": "https://github.com/dlgiant/tweet_matcher"
    },
    "release_url": "https://pypi.org/project/tweet-matcher/1.0.1/",
    "requires_dist": [
      "jsonlines",
      "pytest"
    ],
    "requires_python": "",
    "summary": "Describe your package in one sentence",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8347021,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ffb2f5687a30375d3608b2717093fea8ebc0dfc414938cc5bc74b0d7194edaf",
          "md5": "79ac1a1a236b33b7a8f0d54a105aa6eb",
          "sha256": "ee7c22b7c2dd4008ee7f72662f73442aa0d89722112fbe7b25e215865630f478"
        },
        "downloads": -1,
        "filename": "tweet_matcher-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79ac1a1a236b33b7a8f0d54a105aa6eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8566,
        "upload_time": "2020-10-06T02:47:45",
        "upload_time_iso_8601": "2020-10-06T02:47:45.479225Z",
        "url": "https://files.pythonhosted.org/packages/4f/fb/2f5687a30375d3608b2717093fea8ebc0dfc414938cc5bc74b0d7194edaf/tweet_matcher-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "486cfcc9cd8e0686ba002d905cb16db85dde2af440742a23d7778d61efa6cfe2",
          "md5": "8faad3192ca10de354599794abb76783",
          "sha256": "1ad0d3cb9c5ed01f112bdb747d82b125218f3586758967800b5b5334a0a1a093"
        },
        "downloads": -1,
        "filename": "tweet_matcher-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8faad3192ca10de354599794abb76783",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8085,
        "upload_time": "2020-10-06T02:47:47",
        "upload_time_iso_8601": "2020-10-06T02:47:47.811806Z",
        "url": "https://files.pythonhosted.org/packages/48/6c/fcc9cd8e0686ba002d905cb16db85dde2af440742a23d7778d61efa6cfe2/tweet_matcher-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ffb2f5687a30375d3608b2717093fea8ebc0dfc414938cc5bc74b0d7194edaf",
        "md5": "79ac1a1a236b33b7a8f0d54a105aa6eb",
        "sha256": "ee7c22b7c2dd4008ee7f72662f73442aa0d89722112fbe7b25e215865630f478"
      },
      "downloads": -1,
      "filename": "tweet_matcher-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "79ac1a1a236b33b7a8f0d54a105aa6eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8566,
      "upload_time": "2020-10-06T02:47:45",
      "upload_time_iso_8601": "2020-10-06T02:47:45.479225Z",
      "url": "https://files.pythonhosted.org/packages/4f/fb/2f5687a30375d3608b2717093fea8ebc0dfc414938cc5bc74b0d7194edaf/tweet_matcher-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "486cfcc9cd8e0686ba002d905cb16db85dde2af440742a23d7778d61efa6cfe2",
        "md5": "8faad3192ca10de354599794abb76783",
        "sha256": "1ad0d3cb9c5ed01f112bdb747d82b125218f3586758967800b5b5334a0a1a093"
      },
      "downloads": -1,
      "filename": "tweet_matcher-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8faad3192ca10de354599794abb76783",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8085,
      "upload_time": "2020-10-06T02:47:47",
      "upload_time_iso_8601": "2020-10-06T02:47:47.811806Z",
      "url": "https://files.pythonhosted.org/packages/48/6c/fcc9cd8e0686ba002d905cb16db85dde2af440742a23d7778d61efa6cfe2/tweet_matcher-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}