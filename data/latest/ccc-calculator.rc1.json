{
  "info": {
    "author": "Alex Riley",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# ccc\n\nCommand line Combinatorial Calculator for Counting Constrained Collections.\n\n## Introduction\n\nccc is a calculator that can:\n\n- tell you the *probability* of possible ways a certain collection of items can meet one or more constraints\n- *count* the number of possible ways a certain collection of items can meet one or more constraints\n\nFor example, consider the following problem (asked on [stats.stackexchange.com](https://stats.stackexchange.com/questions/24211)):\n\n> There are **232** tickets for an event. 363 people apply for a ticket, **12** of whom are from a particular group (so **351** are not from the group). Each ticket is allocated to one person at random and each person can recieve at most one ticket. What is the probability that **at most 2** tickets are given to people in the group?\n\nccc makes it easy to translate the problem into a single command, handling the tedious computational details from you:\n\n```\n$ ccc probability draw --from 'group=12; rest=351' \\\n                       --number 232 \\\n                       --constraints 'town <= 2' \\\n                       --float\n0.00093\n```\n\nThat's roughly 1 in 10000.\n\nOr suppose we're designing a *Magic: The Gathering* deck:\n\n> A deck of 60 cards contains **13** mountain cards and **12** swamp cards. What is the probability that we draw **7** cards and get **between 1 and 3 mountains** and **exactly 2 swamps**?\n\nUsing ccc, we can write these constraints very easily:\n\n```\n$ ccc prob draw --from 'mountain=13; swamp=12; rest=35' \\\n                --number 7 \\\n                --constraints '1 <= mountain <= 3, swamp == 2' \\\n                --float\n0.23264\n```\n\nAbout 23%.\n\nThese types of problem are common in everyday life but, depending on how familiar you are with statistics or combinatorics, they can be hard to calculate or even estimate accurately.\n\nSee below for numerous other examples and explanations.\n\n## Install\n\nInstallation requires Python 3.6 or newer.\n\n```\npip install ccc-calculator\n```\n\n## Development install\n\nClone the repo, create a virtual environment, install the development dependencies, install the module in editable mode, install pre-commit hooks:\n\n```\ngit clone https://github.com/ajcr/ccc\ncd ccc\npython -m venv venv\n. venv/bin/activate\npython -m pip requirements-dev.txt\npython -m pip install -e .\npre-commit install\n```\n\nUnit tests can be run with `pytest`. Pre-commit hooks will run on each git commit. The hooks can also be invoked with `pre-commit run -a`.\n\n## More examples\n\nThe easiest way to introduce ccc is to show various example calculations from the command-line.\n\nccc is always invoked in the following way:\n\n```\nccc [computation-type] [collection-type] [--args]\n```\n\nIn all of the examples below, notice how easy it is to express constraints that would otherwise necessitate writing complicated code, or performing repetitive arithmetic on paper.\n\n### Draws\n\nccc can tell you the probability of selecting particular counts of items from a collection (either with or without replacement).\n\nHere is an example:\n\n> A bag contains:\n>\n> - 3 red marbles (:red_circle::red_circle::red_circle:)\n> - 5 black marbles (:black_circle::black_circle::black_circle::black_circle::black_circle:)\n> - 7 blue marbles (:large_blue_circle::large_blue_circle::large_blue_circle::large_blue_circle::large_blue_circle::large_blue_circle::large_blue_circle:)\n>\n> You must draw at random (and without replacement) 4 of these marbles. You lose if you draw 1 or more of the blue marbles (:blue_circle:).\n>\n> What is your probability of winning?\n\nTo solve this with ccc we can easily specify the *collection* we draw from, the *size* of the draw we make, and any *constraints* on the draw:\n\n```\nccc probability draw --from \"red=3; black=5; blue=5\" \\\n                     --number 4 \\\n                     --constraints \"blue == 0\"\n```\nThis puts the probability of winning (not drawing a blue marble) at **2/39**, so perhaps we'd win once every 19 or so attempts.\n\nNotice how easy it is to specify the constraints. Just the item's name (*blue*) and its desired count (*0*). Any comparison operators can be used (`==`, `!=`, `<`, `<=`, `>`, `>=`).\n\nIf we wanted to allow a marble to be replaced after each draw, we would add the `--replace` flag.\n\n---\n\nWe can specify more complicated constraints on what we want to draw from the bag:\n\n> This time, draw **5** marbles without replacement from the same collection, but with 2 white marbles (:white_circle::white_circle:)  added.\n>\n> You win a toy if you draw a collection which comprises\n>\n> - both white marbles (:white_circle::white_circle:), **and**\n> - at least 1 black marble (:black_circle:**+**)\n>\n> What is you chance of winning the toy?\n\n```\nccc probability draw --from \"red=3; black=5; blue=7; white=2\" \\\n                     --number 5 \\\n                     --constraints \"white == 2, black >= 1\"\n```\nOur chance of winning is **3/119** according to ccc, so we would expect to win around once every 40 attempts.\n\nYou can see that to express multiple constraints on our draw, we simply used commas `,` to separate them.\n\n---\n\nLastly, it is possible to use `or` (any number of times) in constraints:\n\n> Draw **3** marbles such that you get:\n>\n> - 3 red marbles (:red_circle::red_circle::red_circle:) **or**\n> - 1 white, 1 black and 1 blue marble (:white_circle::black_circle::large_blue_circle:)\n>\n> What is the probability of succeeding now?\n\n```\nccc probability draw --from \"red=3; black=5; blue=7; white=2\" \\\n                     --number 3 \\\n                     --constraints \"red == 3 or (white == 1, black == 1, blue == 1)\"\n```\nThe probability is **0.1**.\n\n\n### Multisets\n\nMultisets are unordered collections (like sets) in which an item may appear multiple times.\n\n> How many ways can we gather up 20 pieces of fruit such that we have:\n>\n> - fewer than 10 apples (:green_apple:), **and**\n> - at least 5 bananas (:banana:), **and**\n> - the number of grapes is not 13 (:grapes:), **and**\n> - there are are even number of strawberries (:strawberry:)?\n\n```\nccc count multisets --size 20 \\\n                    --constraints 'apples < 10, bananas >= 5, grapes != 13, strawberries % 2 == 0'\n```\n\nThe answer is **406**.\n\nThe modulo (`%`) operator used above provides the facility to solve coin change problems, for example:\n\n> The UK currency has the following coins:\n>\n>   1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p)\n>\n> How many different ways can £5 be made using any number of coins?\n>\n> cf. [Project Euler problem 31](https://projecteuler.net/problem=31)\n\n```\nccc count multisets --constraints 'a%1==0, b%2==0, c%5==0, d%10==0, e%20==0, f%50==0, g%100==0, h%200==0' \\\n                    --size 500\n```\n\nThe answer is computed within a couple of seconds as **6,295,434** different ways.\n\nWe could also put additional contraints on the coins, such as restricting the number of times a coin may be used.\n\n### Permutations\n\nPermutations of words can be counted as follows:\n\n```\nccc count permutations MISSISSIPPI\n```\n\nThere are **34650** unique permutations of this famous river/state.\n\nWhat about if we only count permutations where instances of the same letter are not adjacent to each other?\n\n```\nccc count permutations MISSISSIPPI --constraints no_adjacent\n```\n\nUsing the 'no_adjacent' constraint, the answer comes back immediately as **2016**. The speed of this calculation is thanks to the use of [Generalised Larguerre Polynomials](https://arxiv.org/pdf/1306.6232.pdf).\n\nWe can also treat the letters as distinguishable (the `--same-distinct` flag) to solve a related type of problem:\n\n> Five couples are to seated in a row. How many ways can they be seated such no couples are seated together?\n\n```\nccc count permutations AABBCCDDEE --constraints no_adjacent --same-distinct\n```\n\n**1,263,360** ways.\n\nccc allows derangements (permutations where no item occupies its original place) to be counted.\n\n> Five couples draw names from a hat. What is the probability that nobody draws either their own name, or the name of their partner?\n\n```\nccc probability permutation AABBCCDDEE --constraints derangement --float\n```\n\nIt turns out that there is only a **0.121** probability of this occurring.\n\n### Sequences\n\nSequences are ordered collections of items.\n\n> How many 30 letter sequences can you make using no more than 20 each of **A**, **B** and **C**?\n\n```\nccc count sequences --size 30 --constraints 'A <= 20, B <= 20, C <= 20'\n```\n\nThe answer is a lot: there are **205,863,750,414,990** such sequences.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "count collection probability sequence permutation calculator",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ccc-calculator",
    "package_url": "https://pypi.org/project/ccc-calculator/",
    "platform": "",
    "project_url": "https://pypi.org/project/ccc-calculator/",
    "project_urls": {
      "Source": "https://github.com/ajcr/ccc/",
      "Tracker": "https://github.com/ajcr/ccc/issues"
    },
    "release_url": "https://pypi.org/project/ccc-calculator/0.1.0/",
    "requires_dist": [
      "sympy",
      "click"
    ],
    "requires_python": ">=3.6.0",
    "summary": "command-line combinatorial calculator",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6356925,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e68bb0dc6e9016685c489bea89a754749b8ff0178ba58e41fcb20f68757dc579",
          "md5": "388fde71880d76ea3c1bd7c661f1c750",
          "sha256": "05e97f616fdcaf91c58969649b44ceb2f92836aa1d66a6f6ec3308db0fa6fb2b"
        },
        "downloads": -1,
        "filename": "ccc_calculator-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "388fde71880d76ea3c1bd7c661f1c750",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 17749,
        "upload_time": "2019-12-24T23:16:18",
        "upload_time_iso_8601": "2019-12-24T23:16:18.201946Z",
        "url": "https://files.pythonhosted.org/packages/e6/8b/b0dc6e9016685c489bea89a754749b8ff0178ba58e41fcb20f68757dc579/ccc_calculator-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33498d67f4291166583aa0146640778082f823cb05eeb5d6954c0da58272c7bf",
          "md5": "f06b559cdf2b761d085f10da8b645b71",
          "sha256": "0b7b3219c4031e1c70c9334e3d41cfc61bb212a51c557168eeceab4a17d2be00"
        },
        "downloads": -1,
        "filename": "ccc-calculator-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f06b559cdf2b761d085f10da8b645b71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18805,
        "upload_time": "2019-12-24T23:16:21",
        "upload_time_iso_8601": "2019-12-24T23:16:21.446090Z",
        "url": "https://files.pythonhosted.org/packages/33/49/8d67f4291166583aa0146640778082f823cb05eeb5d6954c0da58272c7bf/ccc-calculator-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e68bb0dc6e9016685c489bea89a754749b8ff0178ba58e41fcb20f68757dc579",
        "md5": "388fde71880d76ea3c1bd7c661f1c750",
        "sha256": "05e97f616fdcaf91c58969649b44ceb2f92836aa1d66a6f6ec3308db0fa6fb2b"
      },
      "downloads": -1,
      "filename": "ccc_calculator-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "388fde71880d76ea3c1bd7c661f1c750",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 17749,
      "upload_time": "2019-12-24T23:16:18",
      "upload_time_iso_8601": "2019-12-24T23:16:18.201946Z",
      "url": "https://files.pythonhosted.org/packages/e6/8b/b0dc6e9016685c489bea89a754749b8ff0178ba58e41fcb20f68757dc579/ccc_calculator-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33498d67f4291166583aa0146640778082f823cb05eeb5d6954c0da58272c7bf",
        "md5": "f06b559cdf2b761d085f10da8b645b71",
        "sha256": "0b7b3219c4031e1c70c9334e3d41cfc61bb212a51c557168eeceab4a17d2be00"
      },
      "downloads": -1,
      "filename": "ccc-calculator-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f06b559cdf2b761d085f10da8b645b71",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 18805,
      "upload_time": "2019-12-24T23:16:21",
      "upload_time_iso_8601": "2019-12-24T23:16:21.446090Z",
      "url": "https://files.pythonhosted.org/packages/33/49/8d67f4291166583aa0146640778082f823cb05eeb5d6954c0da58272c7bf/ccc-calculator-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}