{
  "info": {
    "author": "furechan",
    "author_email": "furechan@xsmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# Minimalist Technical Analysis Library for Python\r\n\r\n\r\nThis project aims at offering a curated list of classical technical analysis indicators\r\nimplemented in cython for improved performance.\r\nThe library does not link numpy, pandas, or any third party binaries,\r\nso the installation should be straightforward.\r\n\r\nMost calculations are available either as `functions` or as `indicators`.\r\nFunctions and indicators are not interchangeable, and you should select one or the other\r\nexclusively depending on usage.\r\n\r\nThe library is mostly compatible with raw `numpy` arrays\r\nas well as `pandas` dataframes and series.Functions and indicators always wrap their result to match the type of the inputs.\r\nWhich means that numpy arrays will yield numpy array results\r\nwhile pandas based inputs will yield pandas based results.\r\nSupport for `polars` dataframes is experimental. \r\n\r\n\r\n> **Warning**\r\n> This is work in progress. For a related project with a mature api you may want to look into\r\n> [ta-lib](https://pypi.org/project/TA-Lib/).\r\n\r\n\r\n## Conventions\r\n\r\nFunctions accept either `prices` data or `series` data. Series data can be a numpy array or\r\na pandas series. Prices data is expected in the form of a dataframe with\r\ncolumns `open, high, low, close, volume`\r\nand a timestamp index called `date`, all in **lower case**. When working with pure numpy data,\r\nyou can represent prices data as a dictionary of numpy arrays with column names a keys,\r\nso as to mimic a dataframe. \r\n\r\n\r\n## Functions\r\nFunctions can be accessed via the `functions` module. All functions are **upper case**.\r\nIt is suggested to import the `functions` module aliased as `ta`.\r\n\r\nSome functions like `ATR` require prices data, while other functions like `SMA` work on a single series.\r\nFunction that work on s single series can also be called on prices data and will be applied by default\r\nto the `close` column or the column specified with the `item` parameter.\r\n\r\n\r\n```python\r\nfrom mintalib.utils import sample_prices\r\nfrom mintalib.functions import SMA, MAX, MACD\r\n\r\nprices = sample_prices()\r\n\r\nsma50 = SMA(prices, 50) # SMA of 'close' with period = 50\r\nvol20 = SMA(prices, 20, item='volume') # SMA of 'volume' with period = 20\r\nhigh200 = MAX(prices.high, 200) # MAX of 'high' with period = 200. Could also have called with item='high'\r\n\r\nmacd = MACD(prices) # MACD of 'close'. returns a dataframe with 'macd', 'macdsignal', 'macdhist' columns  \r\n```\r\n\r\n\r\n<details>\r\n<summary>List of Functions</summary>\r\n\r\n| name     | input   | description                           |\r\n|:---------|:--------|:--------------------------------------|\r\n| AVGPRICE | prices  | Average Price                         |\r\n| TYPPRICE | prices  | Typical Price                         |\r\n| WCLPRICE | prices  | Weighted Close Price                  |\r\n| MIDPRICE | prices  | Mid Price                             |\r\n| LOG      | series  | Logarithm                             |\r\n| EXP      | series  | Exponential                           |\r\n| ROC      | series  | Rate of Change                        |\r\n| DIFF     | series  | Difference                            |\r\n| MIN      | series  | Rolling Minimum                       |\r\n| MAX      | series  | Rolling Maximum                       |\r\n| SUM      | series  | Rolling Sum                           |\r\n| MAD      | series  | Mean Absolute Deviation               |\r\n| STDEV    | series  | Standard Deviation                    |\r\n| SMA      | series  | Simple Moving Average                 |\r\n| EMA      | series  | Exponential Moving Average            |\r\n| WMA      | series  | Weighted Moving Average               |\r\n| DEMA     | series  | Double Exponential Moving Average     |\r\n| TEMA     | series  | Triple Exponential Moving Average     |\r\n| MA       | series  | Generic Moving Average                |\r\n| RSI      | series  | Relative Strength Index               |\r\n| PLUSDI   | prices  | Plus Directional Index                |\r\n| MINUSDI  | prices  | Minus Directional Index               |\r\n| ADX      | prices  | Average Directional Index             |\r\n| TRANGE   | prices  | True Range                            |\r\n| ATR      | prices  | Average True Range                    |\r\n| NATR     | prices  | Average True Range (normalized)       |\r\n| LATR     | prices  | Average True Range (logarithmic)      |\r\n| PSAR     | prices  | Parabolic Stop and Reverse            |\r\n| CCI      | prices  | Commodity Channel Index               |\r\n| CMF      | prices  | Chaikin Money Flow                    |\r\n| MFI      | prices  | Money Flow Index                      |\r\n| BOP      | prices  | Balance of Power                      |\r\n| BBANDS   | prices  | Bollinger Bands                       |\r\n| KELTNER  | prices  | Keltner Channel                       |\r\n| KAMA     | series  | Kaufman Adaptive Moving Average       |\r\n| MACD     | series  | Moving Average Convergenge Divergence |\r\n| PPO      | series  | Price Percentage Oscillator           |\r\n| SLOPE    | series  | Slope (time linear regression)        |\r\n| CURVE    | series  | Curve (time curvilinear regression)   |\r\n| STOCH    | prices  | Stochastik Oscillator                 |\r\n| STREAK   | series  | Consecutive streak of ups/downs       |\r\n\r\n</details>\r\n\r\n## Indicators\r\n\r\nThe library also offers a set of indicators. An indicator is a class that be instantiated with its parameters\r\nand whose instance can be called as a function. The same indicator can then be reused on multiple different inputs.\r\nSo for example `SMA(50)` is a callable object that will return the 50 period simple moving average of its argument.\r\n\r\nFor convenience an indicator can be applied with the `@` operator without using parentheses.\r\nFor example `SMA(50) @ prices` can be used instead of the less readable `SMA(50)(prices)`. \r\nThe same `@` operator can also be used between indicators to mean composition.\r\nWhere for example `EMA(20) @ ROC(5)` means `EMA(20)` applied to `ROC(5)`.\r\n\r\n\r\nOne way to use indicators is with the pandas assign method,\r\nwhich allows to add many indicators to a prices dataframe in one go.\r\n\r\n```python\r\nfrom mintalib.indicators import EMA, SMA, ROC, RSI, SLOPE, EVAL\r\n\r\nprices = get_prices (...)\r\n\r\nprices = prices.assign(\r\n    sma50 = SMA(50),\r\n    sma200 = SMA(200),\r\n    rsi = RSI(14),\r\n    slope = SLOPE(20),\r\n    trend = EMA(20) @ ROC(5),\r\n    pos = EVAL(\"sma50 > sma200\")\r\n)\r\n    \r\n# you will notice that the last EVAL can use any series defined beforehand in the same function call\r\n```\r\n\r\n<details>\r\n<summary>List of Indicators</summary>\r\n\r\n| name           | description                           |\r\n|:---------------|:--------------------------------------|\r\n| PRICE          | Generic Price                         |\r\n| AVGPRICE       | Average Price Indicator               |\r\n| TYPPRICE       | Typical Price Indicator               |\r\n| WCLPRICE       | Weighted Close Price Indicator        |\r\n| MIDPRICE       | Mid Price Indicator                   |\r\n| VOLUME         | Volume Indicator                      |\r\n| LOG            | Logarithm                             |\r\n| EXP            | Exponential                           |\r\n| ROC            | Rate of Change                        |\r\n| DIFF           | Difference                            |\r\n| MIN            | Rolling Minimum                       |\r\n| MAX            | Rolling Maximum                       |\r\n| SUM            | Rolling Sum                           |\r\n| MAD            | Mean Absolue Deviation                |\r\n| STDEV          | Standard Deviation                    |\r\n| SMA            | Simple Moving Average                 |\r\n| EMA            | Exponential Moving Average            |\r\n| RMA            | Rolling Moving Average (RSI Style)    |\r\n| WMA            | Weighted Moving Average               |\r\n| DEMA           | Double Exponential Moving Average     |\r\n| TEMA           | Triple Exponential Moving Average     |\r\n| RSI            | Relative Streng Index                 |\r\n| ADX            | Average Directional Index             |\r\n| PLUSDI         | Plus Directional Index                |\r\n| MINUSDI        | Minus Directional Index               |\r\n| TRANGE         | True Range                            |\r\n| ATR            | Average True Range                    |\r\n| NATR           | Average True Range (normalized)       |\r\n| LATR           | Average True Range (log prices)       |\r\n| PSAR           | Parabolic Stop and Reverse            |\r\n| CCI            | Commodity Channel Index               |\r\n| CMF            | Chaikin Money Flow                    |\r\n| MFI            | Money Flow Index                      |\r\n| BOP            | Balance of Power                      |\r\n| BBANDS         | Bollinger Bands                       |\r\n| KELTNER        | Keltner Channel                       |\r\n| KAMA           | Kaufman Adaptative Moving Average     |\r\n| MACD           | Moving Average Convergence Divergence |\r\n| PPO            | Price Percentage Oscillator           |\r\n| SLOPE          | Slope (time linear regression)        |\r\n| SLOPE.RVALUE   | Slope R-Value (Correlation)           |\r\n| SLOPE.ERROR    | Slope Root Mean Square Error          |\r\n| SLOPE.FORECAST | Slope Forecast                        |\r\n| CURVE          | Curve (time curvilinear regression)   |\r\n| CURVE.RVALUE   | Curve R-Value                         |\r\n| CURVE.ERROR    | Curve Root Mean Square Error          |\r\n| STOCH          | Stockchastic Oscillator               |\r\n| EVAL           | Expression Eval (pandas only)         |\r\n\r\n</details>\r\n\r\n## Examples\r\n\r\nYou can find example notebooks in the [examples](https://github.com/furechan/mintalib/blob/main/examples/) folder. \r\n\r\n\r\n## Developer Notes\r\n\r\n\r\nYou can install the current version of this package with pip\r\n```console\r\npython3 -mpip install git+ssh://git@github.com/furechan/mintalib.git\r\n```\r\n\r\nOr to install from a local copy\r\n```console\r\npip install <folder>\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/furechan/mintalib",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mintalib",
    "package_url": "https://pypi.org/project/mintalib/",
    "platform": null,
    "project_url": "https://pypi.org/project/mintalib/",
    "project_urls": {
      "Homepage": "https://github.com/furechan/mintalib"
    },
    "release_url": "https://pypi.org/project/mintalib/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Minimalist Technical Analysis Library for Python",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15035536,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fff94f45be95eda46f31491ac7e18f170dc2a935215704586a62bab9be9bd6a2",
          "md5": "8bcbe0e164daa915287dbcf1e054d2e1",
          "sha256": "735310139152a3064ff811f9cb489bca86a513351073f767d880b1f10bcdc318"
        },
        "downloads": -1,
        "filename": "mintalib-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8bcbe0e164daa915287dbcf1e054d2e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 284024,
        "upload_time": "2022-08-22T17:55:46",
        "upload_time_iso_8601": "2022-08-22T17:55:46.272229Z",
        "url": "https://files.pythonhosted.org/packages/ff/f9/4f45be95eda46f31491ac7e18f170dc2a935215704586a62bab9be9bd6a2/mintalib-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d691d9f7a027519106d84c0703d0fb2a936f51f650cd9c667a18c417b74a736d",
          "md5": "40730726f90aff73c02f759ea8f16070",
          "sha256": "a5c9cf59b6071e833ea0f4f0194c9356a92f14edb5ba01dffcb5bb52d3c1d620"
        },
        "downloads": -1,
        "filename": "mintalib-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "40730726f90aff73c02f759ea8f16070",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 290720,
        "upload_time": "2022-08-25T17:31:43",
        "upload_time_iso_8601": "2022-08-25T17:31:43.694210Z",
        "url": "https://files.pythonhosted.org/packages/d6/91/d9f7a027519106d84c0703d0fb2a936f51f650cd9c667a18c417b74a736d/mintalib-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24f5bf4fa43fbf16682afffc25ca5356b4b4bce089a677d34724d84dd81015bb",
          "md5": "7df532f4c41adba7619b8acdc95c7ca9",
          "sha256": "03630be41af9f138cec035f2c13c39a7478b9fe36536bcdd7f68dae6d14bbc54"
        },
        "downloads": -1,
        "filename": "mintalib-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7df532f4c41adba7619b8acdc95c7ca9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 304375,
        "upload_time": "2022-09-08T16:24:46",
        "upload_time_iso_8601": "2022-09-08T16:24:46.101203Z",
        "url": "https://files.pythonhosted.org/packages/24/f5/bf4fa43fbf16682afffc25ca5356b4b4bce089a677d34724d84dd81015bb/mintalib-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24f5bf4fa43fbf16682afffc25ca5356b4b4bce089a677d34724d84dd81015bb",
        "md5": "7df532f4c41adba7619b8acdc95c7ca9",
        "sha256": "03630be41af9f138cec035f2c13c39a7478b9fe36536bcdd7f68dae6d14bbc54"
      },
      "downloads": -1,
      "filename": "mintalib-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7df532f4c41adba7619b8acdc95c7ca9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 304375,
      "upload_time": "2022-09-08T16:24:46",
      "upload_time_iso_8601": "2022-09-08T16:24:46.101203Z",
      "url": "https://files.pythonhosted.org/packages/24/f5/bf4fa43fbf16682afffc25ca5356b4b4bce089a677d34724d84dd81015bb/mintalib-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}