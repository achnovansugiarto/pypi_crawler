{
  "info": {
    "author": "Daniel Perez",
    "author_email": "tuvistavie@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# i18nice [![tests](https://github.com/Krutyi-4el/i18nice/actions/workflows/ci.yml/badge.svg)](https://github.com/Krutyi-4el/i18nice/actions/workflows/ci.yml) [![Coverage Status](https://coveralls.io/repos/github/Krutyi-4el/i18nice/badge.svg)](https://coveralls.io/github/Krutyi-4el/i18nice)\n\n\nThis library provides i18n functionality for Python 3 out of the box. The usage is mostly based on Rails i18n library.\n\n## Installation\n\nJust run\n\n    pip install i18nice\n\nIf you want to use YAML to store your translations, use\n\n    pip install i18nice[YAML]\n\n## Usage\n### Basic usage\n\nThe simplest, though not very useful usage would be\n\n    import i18n\n    i18n.add_translation('foo', 'bar')\n    i18n.t('foo') # bar\n\n### Using translation files\n\nYAML and JSON formats are supported to store translations. With the default configuration, if you have the following `foo.en.yml` file\n\n    en:\n      hi: Hello world !\n\nin `/path/to/translations` folder, you simply need to add the folder to the translations path.\n\n    import i18n\n    i18n.load_path.append('/path/to/translations')\n    i18n.t('foo.hi') # Hello world !\n\nPlease note that YAML format is used as default file format if you have `yaml` module installed.\nIf both `yaml` and `json` modules available and you want to use JSON to store translations, explicitly specify that: `i18n.set('file_format', 'json')`\n\n**!WARNING!**\n`yaml.FullLoader` is no longer used by default.\nIf you need full yaml functionalities, override it with a custom loader:\n\n    class MyLoader(i18n.loaders.YamlLoader):\n        loader = yaml.FullLoader\n\n    i18n.register_loader(MyLoader, [\"yml\", \"yaml\"])\n\n### Memoization\n\nSetting the configuration value `enable_memoization` will disable reloading of files every time when searching for missing translation.\nWhen translations are loaded, they're always stored in memory, hence it does not affect how existing translations are accessed.\n\nIf you want to reload all translations, you can use `i18n.reload_everything()`.\n \n### Namespaces\n\n#### File namespaces\nIn the above example, the translation key is `foo.hi` and not just `hi`. This is because the translation filename format is by default `{namespace}.{locale}.{format}`, so the {namespace} part of the file is used as translation.\n\nTo remove `{namespace}` from filename format please change the `filename_format` configuration.\n\n    i18n.set('filename_format', '{locale}.{format}')\n            \n#### Directory namespaces\nIf your files are in subfolders, the foldernames are also used as namespaces, so for example if your translation root path is `/path/to/translations` and you have the file `/path/to/translations/my/app/name/foo.en.yml`, the translation namespace for the file will be `my.app.name` and the file keys will therefore be accessible from `my.app.name.foo.my_key`.\n\n## Functionalities\n### Placeholder\n\nYou can of course use placeholders in your translations. With the default configuration, the placeholders are used by inserting `%{placeholder_name}` in the translation string. Here is a sample usage.\n\n    i18n.add_translation('hi', 'Hello %{name} !')\n    i18n.t('hi', name='Bob') # Hello Bob !\n\n### Pluralization\n\nPluralization is based on Rail i18n module. By passing a `count` variable to your translation, it will be pluralized. The translation value should be a dictionary with at least the keys `one` and `many`. You can add a `zero` or `few` key when needed, if it is not present `many` will be used instead. Here is a sample usage.\n\n    i18n.add_translation('mail_number', {\n        'zero': 'You do not have any mail.',\n        'one': 'You have a new mail.',\n        'few': 'You only have %{count} mails.',\n        'many': 'You have %{count} new mails.'\n    })\n    i18n.t('mail_number', count=0) # You do not have any mail.\n    i18n.t('mail_number', count=1) # You have a new mail.\n    i18n.t('mail_number', count=3) # You only have 3 new mails.\n    i18n.t('mail_number', count=12) # You have 12 new mails.\n\n### Fallback\n\nYou can set a fallback which will be used when the key is not found in the default locale.\n\n    i18n.set('locale', 'jp')\n    i18n.set('fallback', 'en')\n    i18n.add_translation('foo', 'bar', locale='en')\n    i18n.t('foo') # bar\n    \n### Skip locale from root\nSometimes i18n structure file came from another project or not contains root element with locale eg. `en` name.\n\n    {\n        \"foo\": \"FooBar\"\n    }\n\nHowever we would like to use this i18n .json file in our Python sub-project or micro service as base file for translations.\n`i18nice` has special configuration that is skipping locale eg. `en` root data element from the file.\n\n    i18n.set('skip_locale_root_data', True)\n\n### Error handling\n\nThere are three config options for handling different situations.\nSetting it to `None` disables handling (default), `\"error\"` enables error throwing.\nYou can also set your custom handlers:\n\n`on_missing_translation(key, locale, **kwargs)`\n\n`on_missing_plural(key, locale, translation, count)`\n\n`on_missing_placeholder(key, locale, translation, placeholder)`\n\nExample:\n\n    import logging, i18n\n\n    def handler(key, locale, text, name):\n        logging.warning(f\"Missing placeholder {name!r} while translating {key!r} to {locale!r} (in {text!r})\")\n        return \"undefined\"\n\n    i18n.set(\"on_missing_placeholder\", handler)\n    i18n.add_translation(\"am\", \"Amount is %{amount}\")\n    print(i18n.t(\"am\"))\n    # output:\n    # WARNING:root:Missing placeholder 'amount' while translating 'am' to 'en' (in 'Amount is %{amount}')\n    # Amount is undefined\n\n### Custom functions\n\nAdd your custom functions and choose translation variants during runtime.\nAll arguments given to `t` would be passed to the function as keyword arguments.\nThis may be an alternative for pluralization, especially if a language has more than one plural form.\n\nExample (correct plural form of days in Ukrainian):\n\n    i18n.set(\"locale\", \"uk\")\n    i18n.add_translation(\"days\", \"%{count} %{p(день|дні|днів)}\")\n\n    def determine_plural_form(*, count):\n        count = abs(count)\n        if count % 10 >= 5 or count % 10 == 0 or (count % 100) in range(11, 20):\n            return 2\n        elif count % 10 == 1:\n            return 0\n        return 1\n\n    i18n.add_function(\"p\", determine_plural_form, \"uk\")\n    i18n.t(\"days\", count=1) # 1 день\n    i18n.t(\"days\", count=2) # 2 дні\n    i18n.t(\"days\", count=5) # 5 днів\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Krutyi-4el/i18nice/archive/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Krutyi-4el/i18nice",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "i18nice",
    "package_url": "https://pypi.org/project/i18nice/",
    "platform": null,
    "project_url": "https://pypi.org/project/i18nice/",
    "project_urls": {
      "Download": "https://github.com/Krutyi-4el/i18nice/archive/master.zip",
      "Homepage": "https://github.com/Krutyi-4el/i18nice"
    },
    "release_url": "https://pypi.org/project/i18nice/0.6.2/",
    "requires_dist": [
      "pyyaml (>=3.10) ; extra == 'yaml'"
    ],
    "requires_python": "",
    "summary": "Translation library for Python",
    "version": "0.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17461782,
  "releases": {
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "371be1cc9e6b06768a8c73f3367725f205f2e7809a4c9c4dadf37d4b82adfb3e",
          "md5": "1d1f1b27766ae2928e358603f0ea808e",
          "sha256": "7f862ca1f98f7214297b0cefbebc8ec11e406dcae85c44d898e257b3614003ce"
        },
        "downloads": -1,
        "filename": "i18nice-0.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d1f1b27766ae2928e358603f0ea808e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17441,
        "upload_time": "2023-03-27T14:15:59",
        "upload_time_iso_8601": "2023-03-27T14:15:59.292534Z",
        "url": "https://files.pythonhosted.org/packages/37/1b/e1cc9e6b06768a8c73f3367725f205f2e7809a4c9c4dadf37d4b82adfb3e/i18nice-0.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0f0efe46377e850ce08e81eb9bddf0947561635bac1080f7d5876c8837f3d90",
          "md5": "6f3ba6f9d0c6bcede58145dd8c533045",
          "sha256": "4cbbf39d918883c29bb0e36035d0b07ece27a8267b3dd95255046af4ac42e9e0"
        },
        "downloads": -1,
        "filename": "i18nice-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6f3ba6f9d0c6bcede58145dd8c533045",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15874,
        "upload_time": "2023-03-27T14:16:00",
        "upload_time_iso_8601": "2023-03-27T14:16:00.615298Z",
        "url": "https://files.pythonhosted.org/packages/f0/f0/efe46377e850ce08e81eb9bddf0947561635bac1080f7d5876c8837f3d90/i18nice-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "371be1cc9e6b06768a8c73f3367725f205f2e7809a4c9c4dadf37d4b82adfb3e",
        "md5": "1d1f1b27766ae2928e358603f0ea808e",
        "sha256": "7f862ca1f98f7214297b0cefbebc8ec11e406dcae85c44d898e257b3614003ce"
      },
      "downloads": -1,
      "filename": "i18nice-0.6.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1d1f1b27766ae2928e358603f0ea808e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17441,
      "upload_time": "2023-03-27T14:15:59",
      "upload_time_iso_8601": "2023-03-27T14:15:59.292534Z",
      "url": "https://files.pythonhosted.org/packages/37/1b/e1cc9e6b06768a8c73f3367725f205f2e7809a4c9c4dadf37d4b82adfb3e/i18nice-0.6.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0f0efe46377e850ce08e81eb9bddf0947561635bac1080f7d5876c8837f3d90",
        "md5": "6f3ba6f9d0c6bcede58145dd8c533045",
        "sha256": "4cbbf39d918883c29bb0e36035d0b07ece27a8267b3dd95255046af4ac42e9e0"
      },
      "downloads": -1,
      "filename": "i18nice-0.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6f3ba6f9d0c6bcede58145dd8c533045",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15874,
      "upload_time": "2023-03-27T14:16:00",
      "upload_time_iso_8601": "2023-03-27T14:16:00.615298Z",
      "url": "https://files.pythonhosted.org/packages/f0/f0/efe46377e850ce08e81eb9bddf0947561635bac1080f7d5876c8837f3d90/i18nice-0.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}