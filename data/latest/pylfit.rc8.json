{
  "info": {
    "author": "Tony Ribeiro",
    "author_email": "tonyribeiro.research.aca@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pylfit\nPython implementation of the main algorithms of the Learning From Interpretation Transitions (LFIT) framework.\n- GULA: General Usage LFIT Algorithm\n- PRIDE: Polynomial Relational Inference of Dynamic Environnement\n- Synchronizer\n\nExample of the usage of the different algorithms can be found in the pylfit/tests/examples/ folder of https://github.com/Tony-sama/pylfit.\nUse the following command from the tests/ directory:\n```\npython3 examples/api_gula_and_pride_example.py\n```\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n\n- Python 3\n- only tested on Ubuntu 18.04 but should be multi-platform\n\n### Installing\n\nUse pip to install the last realease version of the pylfit library.\n```\npip install pylfit\n```\n\nImport the library in your script to use it.\n\n```\nimport pylfit\n```\n\nFormat your data into states transitions: list of tuple (list of string, list of string)\n```\ndata = [ \\\n([\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\"]), \\\n([\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]), \\\n([\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\"]), \\\n([\"0\",\"0\",\"1\"],[\"0\",\"0\",\"1\"]), \\\n([\"1\",\"1\",\"0\"],[\"1\",\"0\",\"0\"]), \\\n([\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\"]), \\\n([\"0\",\"1\",\"1\"],[\"1\",\"0\",\"1\"]), \\\n([\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\"])]\n```\n\nUse the pylfit.preprocessing api to load your data into the dataset format.\n```\ndataset = pylfit.preprocessing.discrete_state_transitions_dataset_from_array(data=data, feature_names=[\"p_t_1\",\"q_t_1\",\"r_t_1\"], target_names=[\"p_t\",\"q_t\",\"r_t\"])\n```\n\nUse the summary() method to get a look at your formated data.\n```\ndataset.summary()\n```\nsummary() print:\n```\nStateTransitionsDataset summary:\n Features:\n  p_t_1: ['0', '1']\n  q_t_1: ['0', '1']\n  r_t_1: ['0', '1']\n Targets:\n  p_t: ['0', '1']\n  q_t: ['0', '1']\n  r_t: ['0', '1']\n Data:\n  (['0', '0', '0'], ['0', '0', '1'])\n  (['1', '0', '0'], ['0', '0', '0'])\n  (['0', '1', '0'], ['1', '0', '1'])\n  (['0', '0', '1'], ['0', '0', '1'])\n  (['1', '1', '0'], ['1', '0', '0'])\n  (['1', '0', '1'], ['0', '1', '0'])\n  (['0', '1', '1'], ['1', '0', '1'])\n  (['1', '1', '1'], ['1', '1', '0'])\n```\n\nUse the pylfit.models api to initialize a Dynamic Multi-valued Logic Program (DMVLP) model with the features/targets variables of the dataset.\nUse compile(algorithm=\"gula\") or compile(algorithm=\"pride\") to prepare the model to be trained using GULA or PRIDE algorithm.\nGULA has exponential complexity but guaranty all possible minimal rules to be learned.\nPRIDE has polynomial complexity but only learn enough minimal rules to explain the dataset.\nPRIDE is adviced in practice and GULA for small tests (< 10 variables, < 3 domain values).\n```\nmodel = pylfit.models.DMVLP(features=dataset.features, targets=dataset.targets)\nmodel.compile(algorithm=\"pride\") # model.compile(algorithm=\"gula\")\nmodel.summary()\n```\nsummary() print:\n```\nDMVLP summary:\n Algorithm: GULA (<class 'pylfit.algorithms.gula.GULA'>)\n Features:\n  p_t_1: ['0', '1']\n  q_t_1: ['0', '1']\n  r_t_1: ['0', '1']\n Targets:\n  p_t: ['0', '1']\n  q_t: ['0', '1']\n  r_t: ['0', '1']\n Rules: []\n```\n\n\nTrain the model on the dataset using the fit() method\n```\nmodel.fit(dataset=dataset)\nmodel.summary()\n```\nsummary() print:\n```\nDMVLP summary:\n Algorithm: GULA (<class 'pylfit.algorithms.gula.GULA'>)\n Features:\n  p_t_1: ['0', '1']\n  q_t_1: ['0', '1']\n  r_t_1: ['0', '1']\n Targets:\n  p_t: ['0', '1']\n  q_t: ['0', '1']\n  r_t: ['0', '1']\n Rules:\n  p_t(0) :- q_t_1(0).\n  p_t(1) :- q_t_1(1).\n  q_t(0) :- p_t_1(0).\n  q_t(0) :- r_t_1(0).\n  q_t(1) :- p_t_1(1), r_t_1(1).\n  r_t(0) :- p_t_1(1).\n  r_t(1) :- p_t_1(0).\n```\n\nUse predict(feature_state) to make the model generate the possible targets states following a given feature states according to the model rules.\nDefault semantics is synchronous but you can request asynchronous or general transitions using predict(feature_state,semantics) as follows.\n```\n# Predict from ['0','0','0'] (default: synchronous)\nstate = (\"0\",\"0\",\"0\")\nprediction = model.predict([state])\nprint(\"Synchronous:\", [s for s in prediction[tuple(state)]])\n\n# Predict from ['1','0','1'] (synchronous)\nstate = (\"1\",\"0\",\"1\")\nprediction = model.predict([state], semantics=\"synchronous\", default=None)\nprint(\"Synchronous:\", [s for s in prediction[state]])\n\n# Predict from ['1','0','1'] (asynchronous)\nprediction = model.predict([state], semantics=\"asynchronous\")\nprint(\"Asynchronous:\", [s for s in prediction[state]])\n\n# Predict from ['1','0','1'] (general)\nprediction = model.predict([state], semantics=\"general\")\nprint(\"General:\", [s for s in prediction[state]])\n```\n\nprint:\n```\nSynchronous: [('0', '0', '1')]\nSynchronous: [('0', '1', '0')]\nAsynchronous: [('0', '0', '1'), ('1', '1', '1'), ('1', '0', '0')]\nGeneral: [('0', '0', '0'), ('0', '0', '1'), ('0', '1', '0'), ('0', '1', '1'), ('1', '0', '0'), ('1', '0', '1'), ('1', '1', '0'), ('1', '1', '1')]\n```\n\nUsing the previous code you get more or less the example file tests/examles/api_gula_and_pride_example.py.\nIts expected output is as follows.\n\n```\nStateTransitionsDataset summary:\n Features:\n  p_t_1: ['0', '1']\n  q_t_1: ['0', '1']\n  r_t_1: ['0', '1']\n Targets:\n  p_t: ['0', '1']\n  q_t: ['0', '1']\n  r_t: ['0', '1']\n Data:\n  (['0', '0', '0'], ['0', '0', '1'])\n  (['1', '0', '0'], ['0', '0', '0'])\n  (['0', '1', '0'], ['1', '0', '1'])\n  (['0', '0', '1'], ['0', '0', '1'])\n  (['1', '1', '0'], ['1', '0', '0'])\n  (['1', '0', '1'], ['0', '1', '0'])\n  (['0', '1', '1'], ['1', '0', '1'])\n  (['1', '1', '1'], ['1', '1', '0'])\n\nDMVLP summary:\n Algorithm: gula\n Features:\n  p_t_1: ['0', '1']\n  q_t_1: ['0', '1']\n  r_t_1: ['0', '1']\n Targets:\n  p_t: ['0', '1']\n  q_t: ['0', '1']\n  r_t: ['0', '1']\n Rules: []\n\nDMVLP summary:\n Algorithm: gula\n Features:\n  p_t_1: ['0', '1']\n  q_t_1: ['0', '1']\n  r_t_1: ['0', '1']\n Targets:\n  p_t: ['0', '1']\n  q_t: ['0', '1']\n  r_t: ['0', '1']\n Rules:\n  p_t(0) :- q_t_1(0).\n  p_t(1) :- q_t_1(1).\n  q_t(0) :- p_t_1(0).\n  q_t(0) :- r_t_1(0).\n  q_t(1) :- p_t_1(1), r_t_1(1).\n  r_t(0) :- p_t_1(1).\n  r_t(1) :- p_t_1(0).\nSynchronous: [('0', '0', '1')]\nSynchronous: [('0', '1', '0')]\nAsynchronous: [('0', '0', '1'), ('1', '1', '1'), ('1', '0', '0')]\nGeneral: [('0', '0', '0'), ('0', '0', '1'), ('0', '1', '0'), ('0', '1', '1'), ('1', '0', '0'), ('1', '0', '1'), ('1', '1', '0'), ('1', '1', '1')]\nAll transitions: [(('0', '0', '0'), ('0', '0', '1')), (('0', '0', '1'), ('0', '0', '1')), (('0', '1', '0'), ('1', '0', '1')), (('0', '1', '1'), ('1', '0', '1')), (('1', '0', '0'), ('0', '0', '0')), (('1', '0', '1'), ('0', '1', '0')), (('1', '1', '0'), ('1', '0', '0')), (('1', '1', '1'), ('1', '1', '0'))]\nSaving transitions to csv...\nSaved to tmp/output.csv\n```\n\n#### Synchronizer\n\n```\nimport pylfit\n```\n\nFormat your data into states transitions: list of tuple (list of string, list of string)\n```\ndata = [ \\\n([\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\"]), \\\n([\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]), \\\n([\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\"]), \\\n([\"0\",\"0\",\"1\"],[\"0\",\"0\",\"1\"]), \\\n([\"1\",\"1\",\"0\"],[\"1\",\"0\",\"0\"]), \\\n([\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\"]), \\\n([\"0\",\"1\",\"1\"],[\"1\",\"0\",\"1\"]), \\\n([\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\"])]\n```\n\nUse the pylfit.preprocessing api to load your data into the dataset format.\n```\ndataset = pylfit.preprocessing.discrete_state_transitions_dataset_from_array(data=data, feature_names=[\"p_t_1\",\"q_t_1\",\"r_t_1\"], target_names=[\"p_t\",\"q_t\",\"r_t\"])\n```\n\nUse the summary() method to get a look at your formated data.\n```\ndataset.summary()\n```\nsummary() print:\n```\nStateTransitionsDataset summary:\n Features:\n  p_t_1: ['0', '1']\n  q_t_1: ['0', '1']\n  r_t_1: ['0', '1']\n Targets:\n  p_t: ['0', '1']\n  q_t: ['0', '1']\n  r_t: ['0', '1']\n Data:\n  (['0', '0', '0'], ['0', '0', '1'])\n  (['1', '0', '0'], ['0', '0', '0'])\n  (['0', '1', '0'], ['1', '0', '1'])\n  (['0', '0', '1'], ['0', '0', '1'])\n  (['1', '1', '0'], ['1', '0', '0'])\n  (['1', '0', '1'], ['0', '1', '0'])\n  (['0', '1', '1'], ['1', '0', '1'])\n  (['1', '1', '1'], ['1', '1', '0'])\n```\n\nIf this is all the possible transitions of the system we need to learn constraint to prevent the transition ([0,0,0],[1,0,1]) in the synchronous semantics. For that we will use another type of model: Constrained Dynamic Multi-valued Logic Program (CDMVLP)\n\n```\nmodel = pylfit.models.CDMVLP(features=dataset.features, targets=dataset.targets)\nmodel.compile(algorithm=\"synchronizer\")\nmodel.summary()\n```\n\nprint:\n```\nCDMVLP summary:\n Algorithm: synchronizer\n Features:\n  p_t_1: ['0', '1']\n  q_t_1: ['0', '1']\n  r_t_1: ['0', '1']\n Targets:\n  p_t: ['0', '1']\n  q_t: ['0', '1']\n  r_t: ['0', '1']\n Rules: []\n Constraints: []\n```\n\nA CDMVLP is basically a DMVLP with an additional set of constraints rules preventing some combinations of feature/target variable values to occur in a transition.\nCDMVLP api is the same as DMVLP, use fit() to train the model on the dataset and summary() to have a look to the model.\n\n```\nmodel.fit(dataset=dataset) #Â optional targets\nmodel.summary()\n```\n\nprint:\n\n```\nCDMVLP summary:\n Algorithm: synchronizer\n Features:\n  p_t_1: ['0', '1']\n  q_t_1: ['0', '1']\n  r_t_1: ['0', '1']\n Targets:\n  p_t: ['0', '1']\n  q_t: ['0', '1']\n  r_t: ['0', '1']\n Rules:\n  p_t(0) :- q_t_1(0).\n  p_t(1) :- q_t_1(1).\n  p_t(1) :- p_t_1(0), r_t_1(0).\n  q_t(0) :- p_t_1(0).\n  q_t(0) :- r_t_1(0).\n  q_t(1) :- p_t_1(1), r_t_1(1).\n  r_t(0) :- p_t_1(1).\n  r_t(0) :- q_t_1(0), r_t_1(0).\n  r_t(1) :- p_t_1(0).\n Constraints:\n  :- q_t_1(0), p_t(1), r_t(1).\n  :- p_t_1(0), p_t(0), r_t(0).\n```\n\nPrediction are obtained the same way as for DMVLP, but no semantics option.\nUse predict(feature_state) to get the list of possible target states according to the model rules and constraints\n\n```\nstate = ['0','0','0']\nprint(\"Predict from\",state,\": \", end='')\nprediction = model.predict([state])\nprint([s for s in prediction[tuple(state)]])\n\nstate = ['1','1','1']\nprint(\"Predict from\",state,\": \", end='')\nprediction = model.predict([state])\nprint([s for s in prediction[tuple(state)]])\n```\n\nprint:\n```\nPredict from ['0', '0', '0'] : [('0', '0', '1'), ('1', '0', '0')]\nPredict from ['1', '1', '1'] : [('1', '1', '0')]\n```\n\n## Running the tests\n\nFrom the tests/ folder run the following comands once pylfit is installed (see above):\n\nFor each algorithm example:\n```\npython3 examples/api_gula_and_pride_example.py\n```\n```\npython3 examples/api_synchronizer_example.py\n```\n```\npython3 examples/api_weighted_prediction_and_explanation_example.py\n```\n\nFor complete regression tests\n```\npython3 regression_tests/all_tests.py\n```\n\nFor specific regression tests\n```\npython3 regression_tests/.../<script_name>\n```\nFor example\n```\npython3 regression_tests/algorithms/gula_benchmark_tests.py\n```\n\n## Built With\n\n* [Python 3](https://docs.python.org/3/) - The language used\n* [Atom](https://atom.io/) - Source code editor\n\n## Contributing\n\nPlease send a mail to tonyribeiro.contact@gmail.com if you want to add your own contribution to the LFIT framework to the repository.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/Tony-sama/pylfit/tags).\n\n## Authors\n\n* **Tony Ribeiro** - *Initial work* - [Tony-sama](https://github.com/Tony-sama)\n\nSee also the list of [contributors](https://github.com/Tony-sama/pylfit/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the GNU General Public License v3.0 - see the [LICENSE.md](LICENSE.md) file for details.\n\n## Acknowledgments\n\nMore material about the LFIT framework and its applications can be found at http://www.tonyribeiro.fr/\n- General explanation of the framework: http://www.tonyribeiro.fr/research_main.html\n- Biofinformatics applications: http://www.tonyribeiro.fr/research_bioinformatics.html\n- Robotics applications: http://www.tonyribeiro.fr/research_robotics.html\n- Publications: http://www.tonyribeiro.fr/index.html#publications\n\nMain related scientifics publications:\n\n- LF1T:\n\t- MLJ 2014: Learning from Interpretation Transition\n\t\t- http://link.springer.com/article/10.1007%2Fs10994-013-5353-8\n\t- ILP 2014: Learning Prime Implicant Conditions From Interpretation Transition\n\t\t- http://link.springer.com/chapter/10.1007%2F978-3-319-23708-4_8\n\t- PhD Thesis 2015: Studies on Learning Dynamics of Systems from State Transitions\n\t\t- http://www.tonyribeiro.fr/material/thesis/phd_thesis.pdf\n\n- LFkT:\n\t- Frontiers 2015: Learning delayed influences of biological systems\n\t\t- http://www.frontiersin.org/Journal/Abstract.aspx?s=1267&name=bioinformatics_and_computational_biology&ART_DOI=10.3389/fbioe.2014.00081\n\t- ILP 2015: Learning Multi-Valued Biological Models with Delayed Influence from Time-Series Observations\n\t\t- http://www.ilp2015.jp/papers/ILP2015_submission_44.pdf\n\t- ICMLA 2015: Learning Multi-Valued Biological Models with Delayed Influence from Time-Series Observations\n\t\t- https://ieeexplore.ieee.org/document/7424281\n\t- PhD Thesis 2015: Studies on Learning Dynamics of Systems from State Transitions\n\t\t- http://www.tonyribeiro.fr/material/thesis/phd_thesis.pdf\n\n- LUST:\n\t- ICLP 2015: Learning probabilistic action models from interpretation transitions\n\t\t- http://www.tonyribeiro.fr/material/publications/iclp_2015.pdf\n\t- PhD Thesis 2015: Studies on Learning Dynamics of Systems from State Transitions\n\t\t- http://www.tonyribeiro.fr/material/thesis/phd_thesis.pdf\n\n- GULA:\n\t- ILP 2018: Learning Dynamics with Synchronous, Asynchronous and General Semantics\n\t\t- https://hal.archives-ouvertes.fr/hal-01826564\n    - MLJ 2021: Learning any memory-less discrete semantics for dynamical systems represented by logic programs\n        - https://hal.archives-ouvertes.fr/hal-02925942/\n\n- ACEDIA:\n\t- ILP 2017: Inductive Learning from State Transitions over Continuous Domains\n\t\t- https://hal.archives-ouvertes.fr/hal-01655644\n\n- Synchronizer:\n    - MLJ 2021: Learning any memory-less discrete semantics for dynamical systems represented by logic programs\n        - https://hal.archives-ouvertes.fr/hal-02925942/\n\n- PRIDE:\n    - IJCLR 2021: Polynomial Algorithm For Learning From Interpretation Transition\n        - https://hal.archives-ouvertes.fr/hal-03347026\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tony-sama/pylfit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylfit",
    "package_url": "https://pypi.org/project/pylfit/",
    "platform": null,
    "project_url": "https://pypi.org/project/pylfit/",
    "project_urls": {
      "Homepage": "https://github.com/Tony-sama/pylfit"
    },
    "release_url": "https://pypi.org/project/pylfit/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "LFIT algorithms package",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15438317,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aad699ab1b70fdaa7b750c6fe4a7a4a11f705b932c8291c20cf400ac1bc03c9",
          "md5": "e97c420a6e2168faf341206f53b4a2fb",
          "sha256": "9f7f1b5012f4ff6946c30e122da03cd31c64c99191cc779c5360bc172a5859ef"
        },
        "downloads": -1,
        "filename": "pylfit-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e97c420a6e2168faf341206f53b4a2fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54504,
        "upload_time": "2020-12-07T17:16:29",
        "upload_time_iso_8601": "2020-12-07T17:16:29.889246Z",
        "url": "https://files.pythonhosted.org/packages/5a/ad/699ab1b70fdaa7b750c6fe4a7a4a11f705b932c8291c20cf400ac1bc03c9/pylfit-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26b7db74ff31f3a9d300cad756fc69ee67321d68ef27b5e7352f152178412b2c",
          "md5": "f7a647bc153fbf2760306613de696c31",
          "sha256": "375561ebebd5ae85fdfefe610e554e9f97fa91e80b788a690521bda62ff030ea"
        },
        "downloads": -1,
        "filename": "pylfit-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f7a647bc153fbf2760306613de696c31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24942,
        "upload_time": "2020-12-07T17:16:31",
        "upload_time_iso_8601": "2020-12-07T17:16:31.411102Z",
        "url": "https://files.pythonhosted.org/packages/26/b7/db74ff31f3a9d300cad756fc69ee67321d68ef27b5e7352f152178412b2c/pylfit-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8781993b2f7793a7bfac766c12da1fe804708bef0c129572180aff957500f0b",
          "md5": "cad197ffa80cebd22cbc50601ace7d74",
          "sha256": "951ad98bdca8f8cded274db606978b9426bb8f73de3af465a8ddcf09282d4cc1"
        },
        "downloads": -1,
        "filename": "pylfit-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cad197ffa80cebd22cbc50601ace7d74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 66323,
        "upload_time": "2021-01-21T18:05:18",
        "upload_time_iso_8601": "2021-01-21T18:05:18.134224Z",
        "url": "https://files.pythonhosted.org/packages/b8/78/1993b2f7793a7bfac766c12da1fe804708bef0c129572180aff957500f0b/pylfit-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34ef7250734807677de1a3b969b5b4ac4145d460edb9a4c36b08c2f17df09758",
          "md5": "511dbb2371787c47f060af7fb87b97a5",
          "sha256": "f4b603966e65c8d7fa73a2b9cdb60390c1c3c0c03bed27ff0374b0bf1870f26f"
        },
        "downloads": -1,
        "filename": "pylfit-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "511dbb2371787c47f060af7fb87b97a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34424,
        "upload_time": "2021-01-21T18:05:20",
        "upload_time_iso_8601": "2021-01-21T18:05:20.292665Z",
        "url": "https://files.pythonhosted.org/packages/34/ef/7250734807677de1a3b969b5b4ac4145d460edb9a4c36b08c2f17df09758/pylfit-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fdaf0c903b9430b04c6ba6b32793c48487d6ff902fb3a7b12aa6ddfa2569999",
          "md5": "082b184ec127c8f43c6257e5a1fd97a7",
          "sha256": "224036bd5db23993ac0e9d8751f1690515136041220f55881390f8ba122bd013"
        },
        "downloads": -1,
        "filename": "pylfit-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "082b184ec127c8f43c6257e5a1fd97a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 66921,
        "upload_time": "2021-01-26T17:22:55",
        "upload_time_iso_8601": "2021-01-26T17:22:55.746322Z",
        "url": "https://files.pythonhosted.org/packages/7f/da/f0c903b9430b04c6ba6b32793c48487d6ff902fb3a7b12aa6ddfa2569999/pylfit-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0125610c9b4ca7c300ea6375e82901423434302a90d070deca2c7ac5863b2c8",
          "md5": "f225a5219dcb821c640f38ec80481ee4",
          "sha256": "41179107065bf8c71e887e3c08c0a1709b8b29acb3b3307180801bcccc7b8ba3"
        },
        "downloads": -1,
        "filename": "pylfit-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f225a5219dcb821c640f38ec80481ee4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35063,
        "upload_time": "2021-01-26T17:22:57",
        "upload_time_iso_8601": "2021-01-26T17:22:57.569263Z",
        "url": "https://files.pythonhosted.org/packages/c0/12/5610c9b4ca7c300ea6375e82901423434302a90d070deca2c7ac5863b2c8/pylfit-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0961f799bb2357121352760ceda7574df71022c4dbe2094c17006a5513450ce",
          "md5": "7a532782cbc026b0b8779087c9c100cb",
          "sha256": "39a74fbe60b0899524a6c2d71db75a65a1451cfe5f53b88a2f7f953b0ad58432"
        },
        "downloads": -1,
        "filename": "pylfit-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a532782cbc026b0b8779087c9c100cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 78790,
        "upload_time": "2021-02-19T16:25:22",
        "upload_time_iso_8601": "2021-02-19T16:25:22.370812Z",
        "url": "https://files.pythonhosted.org/packages/d0/96/1f799bb2357121352760ceda7574df71022c4dbe2094c17006a5513450ce/pylfit-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fb6ff45ec9dc6f95cc2ad246e1f81f672eddcabd30779635b910853ae71d662",
          "md5": "c593583987a1b162c8987983e32dbd5a",
          "sha256": "0cfa756ac1123886c2ec9a25ce64426c790a28ee37e20568ecb66fa7182789c2"
        },
        "downloads": -1,
        "filename": "pylfit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c593583987a1b162c8987983e32dbd5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44417,
        "upload_time": "2021-02-19T16:25:24",
        "upload_time_iso_8601": "2021-02-19T16:25:24.690812Z",
        "url": "https://files.pythonhosted.org/packages/3f/b6/ff45ec9dc6f95cc2ad246e1f81f672eddcabd30779635b910853ae71d662/pylfit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56affffa00436c98fa10691879e6496e45a553ff535d48fbbfdbe58608957c07",
          "md5": "71f578e146e9d2a44514324a4defc468",
          "sha256": "bbdda8306e28e4f298ff3de1851cde67efb4e5c8754acca3d44092d35e67dba7"
        },
        "downloads": -1,
        "filename": "pylfit-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71f578e146e9d2a44514324a4defc468",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 83907,
        "upload_time": "2021-06-15T14:04:11",
        "upload_time_iso_8601": "2021-06-15T14:04:11.271425Z",
        "url": "https://files.pythonhosted.org/packages/56/af/fffa00436c98fa10691879e6496e45a553ff535d48fbbfdbe58608957c07/pylfit-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd003aa220a7fa716b4460d5fb53788b0e9f665ce3278f245079016de7bb546d",
          "md5": "c719acd100654302a7dd8fba64d95686",
          "sha256": "2155d1c1e750718d6f7d35d5a2ecf55a2e6a5ff62c73a50453d9cb67daa51825"
        },
        "downloads": -1,
        "filename": "pylfit-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c719acd100654302a7dd8fba64d95686",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 49287,
        "upload_time": "2021-06-15T14:04:13",
        "upload_time_iso_8601": "2021-06-15T14:04:13.604847Z",
        "url": "https://files.pythonhosted.org/packages/bd/00/3aa220a7fa716b4460d5fb53788b0e9f665ce3278f245079016de7bb546d/pylfit-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ca13f2f120ddfaf4ee79d95c8ca6a0a43d08b36f0c322744f46cda2e87bf759",
          "md5": "e5fb77a6b6de4aedeb8f82ab96473100",
          "sha256": "b83394fcb9c355641105ea613523dc3bec9ed23aaac2cb19811ec496a2a149b1"
        },
        "downloads": -1,
        "filename": "pylfit-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5fb77a6b6de4aedeb8f82ab96473100",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 83910,
        "upload_time": "2021-06-19T14:54:01",
        "upload_time_iso_8601": "2021-06-19T14:54:01.734820Z",
        "url": "https://files.pythonhosted.org/packages/1c/a1/3f2f120ddfaf4ee79d95c8ca6a0a43d08b36f0c322744f46cda2e87bf759/pylfit-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0977848eece342f75a8889d2f9729b4ec6f96e14c3f30f71381fb0d175a9c1d",
          "md5": "732dbf1e9ebc3c5385378ac062edc2a3",
          "sha256": "8c51101b41a47935746a2850bd4ad74f3fd41ebc7cff470eb4a622d7f22df235"
        },
        "downloads": -1,
        "filename": "pylfit-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "732dbf1e9ebc3c5385378ac062edc2a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 49287,
        "upload_time": "2021-06-19T14:54:04",
        "upload_time_iso_8601": "2021-06-19T14:54:04.257782Z",
        "url": "https://files.pythonhosted.org/packages/f0/97/7848eece342f75a8889d2f9729b4ec6f96e14c3f30f71381fb0d175a9c1d/pylfit-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ae080306871b0ea811966b314b421150eb693c2d7a135d1bda7c04f00aa3037",
          "md5": "43836f8ff59c0b4ba63de79004235ed9",
          "sha256": "5abfe4800dd062b8962382f4dd8d6ba7b1f268215582ffd48eb0b01105ac4240"
        },
        "downloads": -1,
        "filename": "pylfit-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43836f8ff59c0b4ba63de79004235ed9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 83910,
        "upload_time": "2021-06-20T22:58:26",
        "upload_time_iso_8601": "2021-06-20T22:58:26.392908Z",
        "url": "https://files.pythonhosted.org/packages/2a/e0/80306871b0ea811966b314b421150eb693c2d7a135d1bda7c04f00aa3037/pylfit-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e6d2b472e08a46d7e4254610f07ef051321d06d7df550af1aac73da00448d30",
          "md5": "659fa00cdb234ae0ed46dc3017b0f821",
          "sha256": "999a363f0c3104daddf7d482c2da62ece07a6c5415981ac72704b55da90e68d7"
        },
        "downloads": -1,
        "filename": "pylfit-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "659fa00cdb234ae0ed46dc3017b0f821",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 49332,
        "upload_time": "2021-06-20T22:58:28",
        "upload_time_iso_8601": "2021-06-20T22:58:28.349369Z",
        "url": "https://files.pythonhosted.org/packages/0e/6d/2b472e08a46d7e4254610f07ef051321d06d7df550af1aac73da00448d30/pylfit-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca44dffb536d302eafaa817c831da79544aa4c6f1c500c2da766a02e788246b3",
          "md5": "4733e51147d1c04a0c0b649684015c59",
          "sha256": "7234ca7c9e34755201073d392950f5d869c86cc43f052ff0fb3639e039cacf0d"
        },
        "downloads": -1,
        "filename": "pylfit-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4733e51147d1c04a0c0b649684015c59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 92362,
        "upload_time": "2022-10-17T15:45:19",
        "upload_time_iso_8601": "2022-10-17T15:45:19.308744Z",
        "url": "https://files.pythonhosted.org/packages/ca/44/dffb536d302eafaa817c831da79544aa4c6f1c500c2da766a02e788246b3/pylfit-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1035ff2e1f40633a5ec45fca4d25d8eef5bf2e741105dc906ac1278a3032cfb",
          "md5": "fae7d6d1607b9547a44f59b83506b5f2",
          "sha256": "57d6d2202063bec012c4e8661caefa953f416fcede5fc2b972c4dc8907705fa8"
        },
        "downloads": -1,
        "filename": "pylfit-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fae7d6d1607b9547a44f59b83506b5f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 52773,
        "upload_time": "2022-10-17T15:45:24",
        "upload_time_iso_8601": "2022-10-17T15:45:24.133618Z",
        "url": "https://files.pythonhosted.org/packages/a1/03/5ff2e1f40633a5ec45fca4d25d8eef5bf2e741105dc906ac1278a3032cfb/pylfit-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca44dffb536d302eafaa817c831da79544aa4c6f1c500c2da766a02e788246b3",
        "md5": "4733e51147d1c04a0c0b649684015c59",
        "sha256": "7234ca7c9e34755201073d392950f5d869c86cc43f052ff0fb3639e039cacf0d"
      },
      "downloads": -1,
      "filename": "pylfit-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4733e51147d1c04a0c0b649684015c59",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 92362,
      "upload_time": "2022-10-17T15:45:19",
      "upload_time_iso_8601": "2022-10-17T15:45:19.308744Z",
      "url": "https://files.pythonhosted.org/packages/ca/44/dffb536d302eafaa817c831da79544aa4c6f1c500c2da766a02e788246b3/pylfit-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1035ff2e1f40633a5ec45fca4d25d8eef5bf2e741105dc906ac1278a3032cfb",
        "md5": "fae7d6d1607b9547a44f59b83506b5f2",
        "sha256": "57d6d2202063bec012c4e8661caefa953f416fcede5fc2b972c4dc8907705fa8"
      },
      "downloads": -1,
      "filename": "pylfit-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fae7d6d1607b9547a44f59b83506b5f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 52773,
      "upload_time": "2022-10-17T15:45:24",
      "upload_time_iso_8601": "2022-10-17T15:45:24.133618Z",
      "url": "https://files.pythonhosted.org/packages/a1/03/5ff2e1f40633a5ec45fca4d25d8eef5bf2e741105dc906ac1278a3032cfb/pylfit-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}