{
  "info": {
    "author": "McMaster Mars Rover",
    "author_email": "marsatmac@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# jetson-SX126X\nSemtech SX126X LoRa driver for Jetson TX2.  \nThis library is ported and modified from [micropySX126X](https://github.com/ehong-tl/micropySX126X) by ehong-tl.  \n\n## Constructors (Similar for SX1261 and SX1268)  \n***class*** **sx1262.SX1262(cs, irq, rst, gpio, device='/dev/spidev3.0', baudrate=2000000)**  \nCreate and initialize SX1262 object.\n\nThe parameters are:  \n- cs : NSS pin\n- irq : DIO1 pin\n- rst : RESET pin\n- gpio : BUSY pin\n- device : spidev device path\n- baudrate : SPI bus baud rate\n\n## Methods (Similar for SX1261 and SX1268)  \n\n### General  \n**SX1262.setFrequency(freq)**  \nSet frequency in MHz.  \nReturn: Status (Refer to **Constants** Status dictionary)\n\n**SX1262.setOutputPower(power)**  \nSet TX power in dBm.  \nReturn: Status\n\n**SX1262.setBlockingCallback(blocking, callback=None)**  \nSet TX/RX blocking mode and interrupt callback.  \nIf blocking = True, TX/RX is set to blocking mode and callback function will be ignored.  \nIf blocking = False, TX/RX is set to non blocking mode and callback function will be triggered with events argument upon TX/RX events.  \nIf callback = None, events callback function will be disabled.\n\n**SX1262.getRSSI()**  \nGet RX RSSI in dBm.  \nReturn: RSSI value\n\n**SX1262.getTimeOnAir(len)**  \nGet RX time on air according to message length, len = message length.  \nReturn: Time on air value\n\n**SX1262.send(data)**  \nSend message, data type must be bytes or bytearray.  \nReturn: Payload length, status\n\n**SX1262.recv(len=0, timeout_en=False, timeout_ms=0)**  \nRead RX message.  \nlen = Message length, if 0, default to SX126X_MAX_PACKET_LENGTH  \ntimeout_en = Enable RX timeout, if False, function blocking indefinitely until message received (Only in blocking mode)  \ntimeout_ms = RX timeout in ms, 0 means timeout = 100 LoRa symbols length for LoRa or timeout = 500% expected time-on-air for FSK  (Only in blocking mode)  \nReturn: Payload, status\n\n### LoRa  \n**SX1262.begin(freq=434.0, bw=125.0, sf=9, cr=7, syncWord=0x12, power=14, currentLimit=60.0  \npreambleLength=8, implicit=False, implicitLen=0xFF, crcOn=True, txIq=False, rxIq=False,  \ntcxoVoltage=1.6, useRegulatorLDO=False, blocking=True)**  \nThis method is used to set LoRa configuration.\n\nThe parameters are:  \n- freq : Frequency in MHz\n- bw : Bandwidth in kHz\n- sf : Spreading factor, 5 to 12\n- cr : Coding rate, 5 to 8\n- syncWord : Sync word, private = 0x12, public = 0x34\n- power : TX power in dBm\n- currentLimit : Current limit in mA\n- preambleLength : Preamble length\n- implicit : Implicit or explicit header, implicit = True\n- implicitLen : Implicit header payload length\n- crcOn : CRC on or off\n- txIq : TX invert IQ\n- rxIq : RX invert IQ\n- tcxoVoltage : TCXO input voltage in V\n- useRegulatorLDO : Use LDO regulator = True, use DC-DC regulator = False\n- blocking : Blocking TX/RX = True, non blocking TX/RX = False\n\nReturn: Status\n\n**SX1262.setBandwidth(bw)**  \nSet LoRa bandwidth in kHz.  \nReturn: Status\n\n**SX1262.setCodingRate(cr)**  \nSet LoRa coding rate, 5 to 8.  \nReturn: Status\n\n**SX1262.setPreambleLength(preambleLength)**  \nSet LoRa preamble length.  \nReturn: Status\n\n**SX1262.setSpreadingFactor(sf)**  \nSet LoRa spreading factor, 5 to 12.  \nReturn: Status\n\n**SX1262.setSyncWord(syncWord, [controlBits])**  \nSet LoRa sync word, private = 0x12, public = 0x34.  \nOptional parameter controlBits, default value is 0x44.  \ne.g. syncWord = 0xAB, controlBits = 0xCD -> SX126x 2 bytes sync word = 0xACBD  \ne.g. syncWord = 0x12, controlBits = 0x44 -> SX126x 2 bytes sync word = 0x1424  \nReturn: Status\n\n**SX1262.explicitHeader()**  \nEnable LoRa explicit header mode.  \nReturn: Status\n\n**SX1262.implicitHeader(implicitLen)**  \nEnable LoRa implicit header mode with implicit length parameter.  \nReturn: Status\n\n**SX1262.forceLDRO(enable)**  \nForce enable Low Data Rate Optimization.  \nReturn: Status\n\n**SX1262.autoLDRO()**  \nEnable auto Low Data Rate Optimization.  \nReturn: Status\n\n**SX1262.setCRC(crcOn)**  \nSet LoRa CRC mode.  \nReturn: Status\n\n**SX1262.setTxIq(txIq)**  \nSet LoRa TX invert IQ mode.\n\n**SX1262.setRxIq(rxIq)**  \nSet LoRa RX invert IQ mode.\n\n**SX1262.getSNR()**  \nGet LoRa RX SNR in dB.  \nReturn: SNR value\n\n### FSK  \n**SX1262.beginFSK(freq=434.0, br=48.0, freqDev=50.0, rxBw=156.2, power=14, currentLimit=60.0,  \npreambleLength=16, dataShaping=0.5, syncWord=[0x2D, 0x01], syncBitsLength=16,  \naddrFilter=SX1262.ADDR_FILT_OFF, addr=0x00, crcLength=2, crcInitial=0x1D0F, crcPolynomial=0x1021,  \ncrcInverted=True, whiteningOn=True, whiteningInitial=0x0100,  \nfixedPacketLength=False, packetLength=0xFF, preambleDetectorLength=SX1262.PREAMBLE_DETECT_16,  \ntcxoVoltage=1.6, useRegulatorLDO=False,  \nblocking=True)**  \nThis method is used to set FSK configuration.\n\nThe parameters are:  \n- freq : Frequency in MHz\n- br : Bit rate in kbps\n- freqDev : Frequency deviation in kHz\n- rxBW : RX bandwidth in kHz\n- power : TX power in dBm\n- currentLimit : Current limit in mA\n- preambleLength : Preamble length\n- dataShaping : Time-bandwidth product of the Gaussian filter to be used for shaping\n- syncWord : Sync word\n- syncBitsLength : Sync word length in bit\n- addrFilter : Address filtering, refer to **Constants** FSK address filtering\n- addr : Address for address filtering\n- crcLength : CRC length, 0, 1 or 2\n- crcInitial: CRC initial value\n- crcPolynomial : Polynomial for CRC calculation\n- crcInverted : Invert CRC bytes\n- whiteningOn : Enable whitening\n- whiteningInitial : Initial value used for whitening LFSR\n- fixedPacketLength : Enable fixed packet length mode\n- packetLength : Packet length in bytes (fixed packet length mode) or maximum packet length in bytes (variable packet length mode)\n- preambleDetectorLength : Minimum preamble detection length, refer to **Constants** FSK preamble detector length\n- tcxoVoltage : TCXO input voltage in V\n- useRegulatorLDO : Use LDO regulator = True, use DC-DC regulator = False\n- blocking : Blocking TX/RX = True, non blocking TX/RX = False\n\nReturn: Status\n\n**SX1262.setBitRate(br)**  \nSet FSK bit rate in kbps.  \nReturn: Status\n\n**SX1262.setFrequencyDeviation(freqDev)**  \nSet FSK frequency deviation in kHz.  \nReturn: Status\n\n**SX1262.setRxBandwidth(rxBw)**  \nSet FSK RX bandwidth in kHz.  \nReturn: Status\n\n**SX1262.setDataShaping(dataShaping)**  \nSet FSK time-bandwidth product of the Gaussian filter to be used for shaping.  \nReturn: Status\n\n**SX1262.setSyncBits(syncWord, bitsLen)**  \nSet FSK sync word and sync bits length.  \nsyncWord = Sync word in list  \nbitsLen = Sync word bit length  \nReturn: Status\n\n**SX1262.setPreambleLength(preambleLength)**  \nSet FSK preamble length.  \nReturn: Status\n\n**SX1262.setPreambleDetectorLength(preambleDetectorLength)**  \nSet minimum preamble detection length, refer to **Constants** FSK preamble detector length.  \n\n**SX1262.setNodeAddress(addr)**  \nActivate address filtering on node address addr.  \nReturn: Status\n\n**SX1262.setBroadcastAddress(addr)**  \nActivate address filtering on node and broadcast address addr.  \nReturn: Status\n\n**SX1262.disableAddressFiltering()**  \nDisable address filtering.  \nReturn: Status\n\n**SX1262.setCRC(len, initial=0x1D0F, polynomial=0x1021, inverted=True)**  \nSet FSK CRC.  \nlen = CRC length, 0, 1 or 2  \ninitial = CRC initial  \npolynomial = Polynomial used for CRC calculation  \ninverted = Enable CRC bytes inversion  \nReturn: Status\n\n**SX1262.setWhitening(enabled, initial=0x0100)**  \nSet FSK whitening.  \ninitial = Initial value for whitening LFSR  \nReturn: Status\n\n**SX1262.fixedPacketLengthMode(len)**  \nSet FSK fixed packet length mode.  \nlen = Packet length in bytes  \nReturn: Status\n\n**SX1262.variablePacketLengthMode(maxLen)**  \nSet FSK variable packet length mode.  \nmaxLen = Max packet length in bytes  \nReturn: Status\n\n## Constants (Similar for SX1261 and SX1268)  \nEvents: SX1262.TX_DONE, SX1262.RX_DONE  \nFSK address filter: SX1262.ADDR_FILT_OFF, SX1262.ADDR_FILT_NODE, SX1262.ADDR_FILT_NODE_BROAD  \nFSK preamble detector length: SX1262.PREAMBLE_DETECT_OFF, SX1262.PREAMBLE_DETECT_X -> X = 8, 16, 24, 32  \nStatus dictionary: SX1262.STATUS\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MacRover/jetson-SX126X",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jetson-SX126X",
    "package_url": "https://pypi.org/project/jetson-SX126X/",
    "platform": null,
    "project_url": "https://pypi.org/project/jetson-SX126X/",
    "project_urls": {
      "Bug Tracker": "https://github.com/MacRover/jetson-SX126X/issues",
      "Homepage": "https://github.com/MacRover/jetson-SX126X",
      "MMRT Website": "https://www.marsatmac.ca/"
    },
    "release_url": "https://pypi.org/project/jetson-SX126X/1.0.0/",
    "requires_dist": [
      "Jetson.GPIO (>=2.0.18)",
      "python-periphery (>=2.3.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Semtech SX126X LoRa driver for Jetson TX2",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14122866,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07d5beff9bc604eff76163c6f8480e27b65ac073f4f481411432d6d5c1cda6d1",
          "md5": "776f0e05416f6b8566c62e7fd22aeb42",
          "sha256": "512599b5a78e369ecffa9ab4bf6f3f3b6f409cae079b32dbe6df47d3758dbbba"
        },
        "downloads": -1,
        "filename": "jetson_SX126X-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "776f0e05416f6b8566c62e7fd22aeb42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24392,
        "upload_time": "2022-06-14T03:07:21",
        "upload_time_iso_8601": "2022-06-14T03:07:21.306126Z",
        "url": "https://files.pythonhosted.org/packages/07/d5/beff9bc604eff76163c6f8480e27b65ac073f4f481411432d6d5c1cda6d1/jetson_SX126X-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3244430b085535e0f986a7aa9976918adb3400da874fdcc645d82c37eda0bfb2",
          "md5": "b8b68f96f76dbbda1347c0e14b85704b",
          "sha256": "1b5835e6f256b239c12445fdf3760e99367513b7f27135a09b24ce9ec4f390aa"
        },
        "downloads": -1,
        "filename": "jetson-SX126X-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b8b68f96f76dbbda1347c0e14b85704b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18986,
        "upload_time": "2022-06-14T03:07:23",
        "upload_time_iso_8601": "2022-06-14T03:07:23.287730Z",
        "url": "https://files.pythonhosted.org/packages/32/44/430b085535e0f986a7aa9976918adb3400da874fdcc645d82c37eda0bfb2/jetson-SX126X-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07d5beff9bc604eff76163c6f8480e27b65ac073f4f481411432d6d5c1cda6d1",
        "md5": "776f0e05416f6b8566c62e7fd22aeb42",
        "sha256": "512599b5a78e369ecffa9ab4bf6f3f3b6f409cae079b32dbe6df47d3758dbbba"
      },
      "downloads": -1,
      "filename": "jetson_SX126X-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "776f0e05416f6b8566c62e7fd22aeb42",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24392,
      "upload_time": "2022-06-14T03:07:21",
      "upload_time_iso_8601": "2022-06-14T03:07:21.306126Z",
      "url": "https://files.pythonhosted.org/packages/07/d5/beff9bc604eff76163c6f8480e27b65ac073f4f481411432d6d5c1cda6d1/jetson_SX126X-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3244430b085535e0f986a7aa9976918adb3400da874fdcc645d82c37eda0bfb2",
        "md5": "b8b68f96f76dbbda1347c0e14b85704b",
        "sha256": "1b5835e6f256b239c12445fdf3760e99367513b7f27135a09b24ce9ec4f390aa"
      },
      "downloads": -1,
      "filename": "jetson-SX126X-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b8b68f96f76dbbda1347c0e14b85704b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18986,
      "upload_time": "2022-06-14T03:07:23",
      "upload_time_iso_8601": "2022-06-14T03:07:23.287730Z",
      "url": "https://files.pythonhosted.org/packages/32/44/430b085535e0f986a7aa9976918adb3400da874fdcc645d82c37eda0bfb2/jetson-SX126X-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}