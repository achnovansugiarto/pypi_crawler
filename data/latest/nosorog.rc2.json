{
  "info": {
    "author": "Vyacheslav Lobanov",
    "author_email": "bartoldo@bk.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Security",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Nosorog\n## Introdaction\n\nAn assertive security library.\n\n## Requirements\n\n3.5 >= Python <= 3.10\n\n## Installing\n\n`pip install nosorog`\n\n## Testing\n\n```python\ncd /path/to/lib/\npython3 -m unittest discover\n```\n\n## How to use\n\n### Exceptions\n\nException | Default message |\n--- | --- |\n`NosorogMangledNameError` | \"Use method`s dunder name instead.\" |\n`NosorogWrongPlaceCallError` (1) | \"Protected method can be called from specified methods only.\" | \n`NosorogWrongPlaceCallError` (2) | \"Protected method can not be called from other object, use self instead.\" | \n`NosorogWentWrongError` | \"Something broken.\" |\n`NosorogTypeError` | child of `TypeError`. No especial message provided. |\n\nIt is possible to use a concatenation of predefined and custom messages:\n```python\nraise NosorogMangledNameError(\"Method __get accessible with _MangledName__get() call.\")\n# NosorogMangledNameError: \"Use method`s dunder name instead. Method __get accessible with _MangledName__get() call.\"\n```\nBut it is one exclusion:\n`NosorogWrongPlaceCallError` uses the message `\"Protected method can be called from specified methods only.\"` by default \nand or other instead:\n```python\nfrom nosorog.exceptions.mixins.nosorog_exception_messages import NosorogExceptionMessages\n\nraise NosorogWrongPlaceCallError(NosorogExceptionMessages.use_self)\n# NosorogExceptionMessages: \"Protected method can not be called from other object, use self instead.\"\n```\nIt is not concatenated.\n\n### Full list of predefined messages\n\nAttribute | Message\n--- | --- |\n`protected_from_not_private_call` | \"This method protected from not private call.\"\n`method_protected` | \"This method protected.\"\n`wrong_place` | \"Protected method can be called from specified places only.\"\n`use_self` | \"Protected method can not be called from other object, use self instead.\"\n`mangled_call_blocked` | \"Use method`s dunder name instead.\"\n\n### Class based decorators\n\n\nTo import class based decorators use:\n\n```python\nfrom nosorog.decorators import protect_private, copy_dicts, silent\n```\n\n\nDecorator | Description |\n--- | ---\n`@silent` | intercepts all the exceptions of `Nosorog` and returns `None` instead. |\n`@silent.include(exceptions)` | same as above and list of provided exceptions to. |\n--- | ---\n`@protect_private.block_mangled_call` | protect of name mangling usage. |\n`@protect_private.one_obj` | decorated method accessible with `self` usage only. |\n`@protect_private.one_method(\"method_name\")` | decorated method accessible from one method only. |\n`@protect_private.call_from(methods)` | decorated method accessible from the methods provided in list only. |\n--- | ---\n`@copy_dicts` | makes shallow copy of all the dicts in `args` and `kwargs` |\n`@copy_dicts.deep_args` | makes deep copy of all the dicts in `args` |\n`@copy_dicts.deep_kwargs` | makes deep copy of all the dicts in `kwargs` |\n`@copy_dicts.deep_all` | makes deep copy of all the dicts in `args` and `kwargs` |\n`@copy_dicts.shallow_args` | makes shallow copy of all the dicts in `args` |\n`@copy_dicts.shallow_kwargs` | makes shallow copy of all the dicts in `kwargs` |\n`@copy_dicts.shallow_all` | makes shallow copy of all the dicts in `args` and `kwargs` |\n\n\n### Function based decorators\n\n\nTo import function based decorators use:\n\n```python\nfrom nosorog.decorators.function_based_decorators import protect_private, copy_dicts, protect_ids, protected_call\n```\n\n\nDecorator | Description                                                                                                                                                                                                   |\n--- |---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n`@protect_private(allowed_list=list)`  | make a call with `_Class__private_method()` impossible. `allowed_list` it is `str` names of method which you can call the private method from. also support `'self'` (`str`) for calls from same object only. |\n`@protected_call(from_method=str, from_file=str)` | make the attack by the file injection impossible.                                                                                                                                                             |\n`@copy_dicts(deep_copy=bool)` | make a copy of `dicts` in `args` and `kwargs`.                                                                                                                                                                |\n`@protect_ids(id_names=[str])`| trying to convert id to `int` or throw `Exception`.                                                                                                                                                           |\n\n\n## Examples\n\nThis explanation written for the function based decorators. Class based decorators works the same way with some differences\nin the syntax. Read the full documentation on https://nosorog.readthedocs.io.\n### Private methods\n\nUsage of dunder methods ( `__method()` ) protects the code avoiding direct access to the method.\n\n```python\nclass Example:\n    def __get_data(self):\n        return 1\n\n>>> Example().__get_data()  # AttributeError: 'Example' object has no attribute '__get_data'\n```\nBut it is possible to use the name mangling.\n```python\n>>> Example()._Example__get_data()  # 1\n```\n`Nosorog` provides simple and pushy way to protect the dunder method.\n```python\nclass Example:\n    @protect_private(allowed_list=['trusted_func'])\n    def __get_data(self):\n        return 1\n\nclass Trusted:\n    @staticmethod\n    def trusted_func():\n        return Example()._Example__get_data()\n\n>>> Example().__get_data()  # AttributeError: 'Example' object has no attribute '__get_data'\n>>> Example()._Example__get_data()  # Exception: This method protected from not private call.\n>>> Trusted()._Example__get_data()  # 1\n```\nAlso, str `'self'` can be used as a list item to make impossible to call without `self`.\n```python\nclass Example:\n    @protect_private(allowed_list=['trusted_func', 'self'])\n    def __get_data(self):\n        return 1\n\n    def trusted_func(self):\n        return self.__get_data()\n\n\nclass Trusted:\n    @staticmethod\n    def trusted_func():\n        return Example()._Example__get_data()\n\n>>> Example().trusted_func()  # 1\n>>> Trusted().trusted_func()  # Exception: This method can not be called from other object, use self instead.\n```\n\n### Localization of method call\n\nPython does not provide an easy way to limit where the method can be called from. This makes it possible to conduct an\nattack by File Injection. With the help of the `Nosorog` library it is possible to specify the places from which the \nmethod can be called.\n```python\nclass Example:\n    @protected_call(from_method='safe_method', from_file=os.path.abspath(__file__))\n    def __get_data(self):\n        return 1\n\nclass Trusted:\n    # Place it to the same file as described in the decorator usage.\n    def safe_method():\n        return Example()._Example__get_data()  # 1\n```\nThis is just a variation of the previous decorator.\n\n### Protection of the dicts\n\nIn the projects where the undefined number of dicts can be passed in `args` and `kwargs`, it is possible to make a deep copy \nof each if needed.\n```python\nclass Example:\n    @copy_dicts(deep_copy=False)\n    def some_method(self, *args, **kwargs):\n        # now dicts are shallow copies\n        pass\n```\nUse `@copy_dicts(deep_copy=True)` to make deep copies.\n\n### Protection of ids\n\nThis method has been added just for fun.\nIt is converts all the ids in the list if possible or throws the `TypeError`.\n```python\nclass Example:\n    @protect_ids(id_names=['user_id', 'pk'])\n    def some_method(user_id=None, pk=None)\n        pass\n```\n\nPossible `Exceptions`\n```python\n@protect_ids(id_names=['user_id', dict()])\n>>> Example().some_method(user_id='1')  # TypeError: Wrong format of id_names in decorator. Must be list of str.\n\n@protect_ids(id_names=['user_id', 'pk'])\n>>> Example().some_method(user_id=1.234, pk='text_id')  # TypeError: Received the ids of wrong type.\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://nosorog.readthedocs.io",
    "keywords": "security,protect,nosorog",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nosorog",
    "package_url": "https://pypi.org/project/nosorog/",
    "platform": null,
    "project_url": "https://pypi.org/project/nosorog/",
    "project_urls": {
      "Documentation": "https://nosorog.readthedocs.io",
      "Homepage": "https://nosorog.readthedocs.io",
      "Source": "https://github.com/vyacheslavlobanov/nosorog"
    },
    "release_url": "https://pypi.org/project/nosorog/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7, <4",
    "summary": "An assertive security library.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14140619,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db7d02267dc547731ccb75800942aa28fdfeeb2dc8f511f2da33389c273032eb",
          "md5": "5a65726f7e43e775129a98a85b6bddfa",
          "sha256": "74d3efcfdaaf3d7553d3f060dfeacfe4b9cc91fb6c528dccd9c6956c76d29091"
        },
        "downloads": -1,
        "filename": "nosorog-0.1.1-py3.9.egg",
        "has_sig": false,
        "md5_digest": "5a65726f7e43e775129a98a85b6bddfa",
        "packagetype": "bdist_egg",
        "python_version": "0.1.1",
        "requires_python": ">=3.7, <4",
        "size": 3743,
        "upload_time": "2022-06-13T17:16:08",
        "upload_time_iso_8601": "2022-06-13T17:16:08.397477Z",
        "url": "https://files.pythonhosted.org/packages/db/7d/02267dc547731ccb75800942aa28fdfeeb2dc8f511f2da33389c273032eb/nosorog-0.1.1-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13a044fe7fd07064b56d988533cd80c4411ec349614ef1a906b1ee5daae75736",
          "md5": "73a12d41cf78b14a7d070f43042665f9",
          "sha256": "6d56cb7f3e74c87624a0a7265f15df6aa29d784f8940bea3d264fbd126652c33"
        },
        "downloads": -1,
        "filename": "nosorog-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73a12d41cf78b14a7d070f43042665f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 6906,
        "upload_time": "2022-06-13T17:16:06",
        "upload_time_iso_8601": "2022-06-13T17:16:06.602278Z",
        "url": "https://files.pythonhosted.org/packages/13/a0/44fe7fd07064b56d988533cd80c4411ec349614ef1a906b1ee5daae75736/nosorog-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95048a327ac20ab89e5b47b0d874e13497388822f6e85f7a92f9f4df0e790620",
          "md5": "c646cebf2df8c15538aa46c0250bf9d9",
          "sha256": "02ab9ed9b4a6ca547447b838cfd856c7f441f6b03260bd318b25ba2e5766c4a6"
        },
        "downloads": -1,
        "filename": "nosorog-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c646cebf2df8c15538aa46c0250bf9d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 7258,
        "upload_time": "2022-06-13T17:16:09",
        "upload_time_iso_8601": "2022-06-13T17:16:09.440910Z",
        "url": "https://files.pythonhosted.org/packages/95/04/8a327ac20ab89e5b47b0d874e13497388822f6e85f7a92f9f4df0e790620/nosorog-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc912396790af66417f91d7d39a7f694457541222ff9b6de16121efc6711463d",
          "md5": "75fd1d564ca7c38ba9b35e27354ae066",
          "sha256": "6966242f712f0ce25a559917ae869ade55b5216ad9938977116b589949b474d8"
        },
        "downloads": -1,
        "filename": "nosorog-0.2.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "75fd1d564ca7c38ba9b35e27354ae066",
        "packagetype": "bdist_egg",
        "python_version": "0.2.0",
        "requires_python": ">=3.7, <4",
        "size": 4563,
        "upload_time": "2022-06-15T14:49:04",
        "upload_time_iso_8601": "2022-06-15T14:49:04.828419Z",
        "url": "https://files.pythonhosted.org/packages/fc/91/2396790af66417f91d7d39a7f694457541222ff9b6de16121efc6711463d/nosorog-0.2.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a0cb60125a4da958ea77e78a74b98ff2d13874808688095b0992d1509d5326a",
          "md5": "1c78480a64f4f01f3905b6fe8f32ec70",
          "sha256": "3b3564657e1b8fa5443ab358d1835f22509f3977fd602433bb363ad782e6a10f"
        },
        "downloads": -1,
        "filename": "nosorog-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c78480a64f4f01f3905b6fe8f32ec70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 7727,
        "upload_time": "2022-06-15T14:49:03",
        "upload_time_iso_8601": "2022-06-15T14:49:03.765542Z",
        "url": "https://files.pythonhosted.org/packages/4a/0c/b60125a4da958ea77e78a74b98ff2d13874808688095b0992d1509d5326a/nosorog-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b42189fb462649d741f84735863678f722c555cd62e8ab850f7f0f87faf9bc0b",
          "md5": "d876bf89c77548aecd7c1ba113413262",
          "sha256": "9f6efc437f4adb2d1fe86b32079fd4ec31e0051a7dd44dab200bce4ba1f08cff"
        },
        "downloads": -1,
        "filename": "nosorog-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d876bf89c77548aecd7c1ba113413262",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 8164,
        "upload_time": "2022-06-15T14:49:06",
        "upload_time_iso_8601": "2022-06-15T14:49:06.552220Z",
        "url": "https://files.pythonhosted.org/packages/b4/21/89fb462649d741f84735863678f722c555cd62e8ab850f7f0f87faf9bc0b/nosorog-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc912396790af66417f91d7d39a7f694457541222ff9b6de16121efc6711463d",
        "md5": "75fd1d564ca7c38ba9b35e27354ae066",
        "sha256": "6966242f712f0ce25a559917ae869ade55b5216ad9938977116b589949b474d8"
      },
      "downloads": -1,
      "filename": "nosorog-0.2.0-py3.9.egg",
      "has_sig": false,
      "md5_digest": "75fd1d564ca7c38ba9b35e27354ae066",
      "packagetype": "bdist_egg",
      "python_version": "0.2.0",
      "requires_python": ">=3.7, <4",
      "size": 4563,
      "upload_time": "2022-06-15T14:49:04",
      "upload_time_iso_8601": "2022-06-15T14:49:04.828419Z",
      "url": "https://files.pythonhosted.org/packages/fc/91/2396790af66417f91d7d39a7f694457541222ff9b6de16121efc6711463d/nosorog-0.2.0-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a0cb60125a4da958ea77e78a74b98ff2d13874808688095b0992d1509d5326a",
        "md5": "1c78480a64f4f01f3905b6fe8f32ec70",
        "sha256": "3b3564657e1b8fa5443ab358d1835f22509f3977fd602433bb363ad782e6a10f"
      },
      "downloads": -1,
      "filename": "nosorog-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1c78480a64f4f01f3905b6fe8f32ec70",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <4",
      "size": 7727,
      "upload_time": "2022-06-15T14:49:03",
      "upload_time_iso_8601": "2022-06-15T14:49:03.765542Z",
      "url": "https://files.pythonhosted.org/packages/4a/0c/b60125a4da958ea77e78a74b98ff2d13874808688095b0992d1509d5326a/nosorog-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b42189fb462649d741f84735863678f722c555cd62e8ab850f7f0f87faf9bc0b",
        "md5": "d876bf89c77548aecd7c1ba113413262",
        "sha256": "9f6efc437f4adb2d1fe86b32079fd4ec31e0051a7dd44dab200bce4ba1f08cff"
      },
      "downloads": -1,
      "filename": "nosorog-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d876bf89c77548aecd7c1ba113413262",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 8164,
      "upload_time": "2022-06-15T14:49:06",
      "upload_time_iso_8601": "2022-06-15T14:49:06.552220Z",
      "url": "https://files.pythonhosted.org/packages/b4/21/89fb462649d741f84735863678f722c555cd62e8ab850f7f0f87faf9bc0b/nosorog-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}