{
  "info": {
    "author": "",
    "author_email": "Romain Damian <damian.romain@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Crudence : powerful yet discrete templates for CRUD endpoint controllers\n========================================================================\n\n*I think you’re a very special young man, or I wouldn’t have asked you\nto help me, now would I ?*\n\nInstallation\n------------\n\n.. code:: bash\n\n   pip install crud-templates\n\nUsage\n-----\n\n   A thorough documentation is in construction\n\nThe module provides template classes for CRUD controllers using\nSQLAlchemy connexions to a database. They are meant to provide easy to\nuse methods for executing ``GET``, ``PUT``, ``PATCH``, ``DELETE``\nstatements on single a table, or searches for entities using ``POST``\nstatements, within a model-views-controllers framework.\n\nFor all templates, the simplest usage is to inherit the template,\nsupercharge the ``__init__`` method to provide the target table and the\nSQLAlchemy session, and use the appropriate CRUD method.\n\nExamples\n--------\n\n``PUT`` entity creation or replacement\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDefine the controller using ``InsertMapperTemplate`` :\n\n.. code:: python\n\n   from logging import getLogger\n\n   from crudence import InsertMapperTemplate\n\n   from db.session import db_session\n   from db.models import Persons\n\n   class PersonsMapper(InsertMapperTemplate):\n       IDENTIFYING_FIELDS = [\"id\"]\n\n       def __init__(self):\n           super().__init__(target=Persons, session=db_session)\n           self.logger = getLogger(__name__)\n\nThe method for a ``PUT`` endpoint can then be something like :\n\n.. code:: python\n\n   from flask import app, request\n   from http import HTTPStatus\n\n   from mapper import PersonsMapper\n\n   @app.put(\"/person\")\n   def put_person() -> tuple:\n       body = request.get_json()\n       put_controller = PersonsMapper()\n       # you might want to validate the input body before calling the mapper\n       created_id = put_controller.put(body=body)\n\n       if created_id:\n           response = {\"message\": \"created\", \"id\": created_id}, HTTPStatus.CREATED\n       else:\n           response = {\"message\": \"replaced\"}, HTTPStatus.NO_CONTENT\n       return response\n\nIf ``id`` does not appear in the input body, a new row will be created\nwithin the target table. If it is provided, the corresponding row will\nbe replaced.\n\n``PATCH`` entity update\n~~~~~~~~~~~~~~~~~~~~~~~\n\nDefine the same controller as for ``PUT`` statements, since the logic is\nthe same as the one for creation or replacement. An ``EntityNotFound``\nwill be raised if the targeted entity is not found.\n\nThe method for a ``PATCH`` endpoint can then be something like :\n\n.. code:: python\n\n   from flask import app, request\n   from http import HTTPStatus\n\n   from mapper import PersonsMapper\n\n   @app.patch(\"/person\")\n   def patch_person() -> tuple:\n       body = request.get_json()\n       put_controller = PersonsMapper()\n       # you might want to validate the input body before calling the mapper\n       put_controller.patch(body=body)\n\n       response = {\"message\": \"updated\"}, HTTPStatus.NO_CONTENT\n       return response\n\n``GET`` or ``DELETE`` a target entity\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``GET`` and ``DELETE`` operations revolve around the same logic to\nidentify a target row, then either serialize its informations to a json\noutput or to delete it. It inherits from the ``InsertMapperTemplate`` to\nuse its target finding methods.\n\nDefine a controller using ``GetterDeleterTemplate``. ``TARGET_FIELDS``\nmust contain the columns to serialize ; ``DATE_FIELDS`` refers the date\nfields that are to be serialized as isoformat strings ; ``ENUM_FIELDS``\ncontains the fields of class Enum that are to be serialized as strings.\n\n.. code:: python\n\n   from logging import getLogger\n\n   from crudence import GetterDeleterTemplate\n\n   from db.session import db_session\n   from db.models import Persons\n\n   class PersonsGetter(GetterDeleterTemplate):\n       IDENTIFYING_FIELDS = [\"id\"]\n       TARGET_FIELDS = [\"id\", \"firstname\", \"lastname\", \"birthday\"]\n       DATE_FIELDS = [\"birthday\"]\n       ENUM_FIELDS = [\"gender\"]\n\n       def __init__(self):\n           super().__init__(target=Persons, session=db_session)\n           self.logger = getLogger(__name__)\n\nThe ``get`` and ``delete`` methods accepts any keywords arguments so\nthat you can pass the target field(s) with its value from the endpoint\ninput.\n\n.. code:: python\n\n   from flask import app\n   from http import HTTPStatus\n\n   from finder import PersonsGetter\n\n   @app.get(\"/person/<person_id>\")  # id is given as path parameter\n   def get_person(person_id: int) -> tuple:\n       get_controller = PersonsGetter()\n       try:\n           serialised_entity = get_controller.get(id=person_id)\n       except EntityNotFound:\n           response = {\"message\": \"Entity not found\"}, HTTPStatus.NOT_FOUND\n       else:\n           response = serialised_entity, HTTPStatus.OK\n\n       return response\n\nLet’s illustrate how you can easily use several identifying fields to\nget or delete an entity (works for put and patch controllers too), for\ninstance for a relationship table where the primary key is composed of\ntwo columns :\n\n.. code:: python\n\n   from logging import getLogger\n\n   from crudence import GetterDeleterTemplate\n\n   from db.session import db_session\n   from db.models import PersonRelatives\n\n   class RelativesDeleter(GetterDeleterTemplate):\n       IDENTIFYING_FIELDS = [\"person_id\", \"relative_id\"]\n\n       def __init__(self):\n           super().__init__(target=PersonRelatives, session=db_session)\n           self.logger = getLogger(__name__)\n\nThe method for the ``DELETE`` endpoint would then be\n\n.. code:: python\n\n   # identifiers are given as query parameters /person_relative?person_id=1&relative_id=2\n   @app.delete(\"/person_relative\")\n   def delete_relative() -> tuple:\n       controller = RelativesDeleter()\n       try:\n           # will be parsed as delete(person_id=1, relative_id=2)\n           controller.delete(**request.args)\n       except EntityNotFound:\n           response = {\"message\": \"not found\"}, HTTPStatus.NOT_FOUND\n       except MultipleResultsFound:\n           response = {\"message\": \"bad request\"}, HTTPStatus.BAD_REQUEST\n       else:\n           response = {\"message\", \"deleted\"}, HTTPStatus.OK\n\n       return response\n\n``POST`` to search entity ids (or other serialisable information)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``PostSearchControllerTemplate`` allows to search for entities\naccording to a set of customisable filters, that can easily be spread\nacross several joined tables.\n\nBy default, filters are key-values pairs corresponding to the target\ntable’s columns. The types *string, integers, dates, lists and enums*\nare automatically converted to the appropriate filtering behaviour, and\ndictionary allows to define more complex filters (ranges, joins or\ncustom).\n\nLet’s define a search controller for persons that can filter on the\n``Persons`` table as well as the ``PersonRelatives`` table.\n\n.. code:: python\n\n   from logging import getLogger\n\n   from sqlalchemy.orm import Query\n   from crudence import PostSearchControllerTemplate\n\n   from db.session import db_session\n   from db.models import Persons, PersonRelatives\n\n   class SearchPersonsController(PostSearchControllerTemplate):\n       JOINS_FILTERS = [\n           {\n               \"slot\": \"person_relatives\",\n               \"target\": PersonRelatives,\n               \"map_method\": \"map_relatives\"\n           }\n       ]\n       RANGE_FILTERS = [\n           {\n               \"slot\": \"birthday_range\",\n               \"target\": Persons.birthday,\n               \"is_date\": True\n           }\n       ]\n       DATE_FILTERS = [\"birthday\"]\n\n       def __init__(self):\n           super().__init__(target=Persons, session=db_session)\n           self.logger = getLogger(__name__)\n       \n       def map_relatives(self, partial: Query, filters: dict) -> Query:\n           # This method defines how to join with the PersonRelatives in order to\n           # apply filters onto it later\n           partial = partial.join(PersonRelatives, Persons.id == PersonRelatives.person_id)\n           return partial\n\nThe method for the ``POST`` controller can be simply called with\n``search(body)``. Contrary to other controllers, the input body\nstructure is constrained to conform ``PostInputSchema``, which must be\ninherited from for your controller. See the schema itself for details on\navailable fields.\n\nHere is an example of an input search and the corresponding method\n\n.. code:: python\n\n   from json_models import SearchPersonInputSchema, SearchPersonOutputSchema\n   from search_persons import SearchPersonsController\n\n   input_search = {\n       \"fields\": [\"id\", \"firstname\", \"lastname\", \"birthday\"]\n       \"order_by\": [\n           {\n               \"field\": \"id\",\n               \"direction\": \"desc\"\n           }\n       ],\n       \"filters\": {\n           \"firstname\": [\"John\", \"Mike\"]\n           \"person_relatives\": {\n               \"relative_id\": [1, 2, 4, 8]\n           },\n           \"birthday_range\": {\n               \"lower_bound\": \"1985-01-03\",\n               \"upper_bound\": \"1990-01-01\"\n           }\n       },\n       \"pagination\": {\n            \"size\": 10,\n            \"page\": 3,\n            \"compute\": False  # Compute total calculations only if you need it\n       }\n   }\n\n   @app.post(\"/person\")\n   def search_persons() -> tuple:\n       body = request.get_json()\n       validated_body = SearchPersonInputSchema().load(body)\n       controller = SearchPersonsController()\n       result = controller.search(**validated_body)\n\n       return SearchPersonOutputSchema().load(result), HTTPStatus.OK\n\n-  by default all filters are combined with an ``and`` operator, if you\n   want otherwise add ``operator_choice = \"or\"`` in the input body\n-  to serialise fields from any join table, supercharge the\n   ``_serialize`` method\n-  joining with table ``PersonRelatives`` occurs only *if a filter on\n   that table appear in the input body* (and the join is defined in\n   ``JOINS_FILTERS``)\n-  the mapping method provided in the joins filter definition is where\n   you define the joining behaviour for that filter. The corresponding\n   filter from the input body has to be passed on as second argument to\n   the method, so you can define complex joins depending on values if\n   needed. This might need some heavy customisation though, see below\n   for a example\n\nCustomisation\n-------------\n\nAll templates inherits from the ``PostSearchTemplateTools`` that\ncontains the filter building methods, which are used by all controllers\nto find the target identities.\n\nThis means that if you define the appropriate input body structure (as\njson for ``PUT`` and ``PATCH`` or keywords parameters for ``GET``) and\nSQLAlchemy query, you can define complex filtering to look for entities\nto update, to get, to delete. This implies to supercharge or rewrite\nsome methods from the controller as specified in each controller’s\ndocumentation.\n\nExample customisations for a ``GET``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe same goes for ``GET`` serialisation : its ``TARGET_FIELDS`` are\npassed as such as arguments to the ``_serialize`` method. If you\nsupercharge or rewrite it, you could then serialise fields from other\ntables than the target one, provided it was included in the partial\nquery as a join.\n\nLet’s define a ``GET`` controller to serialise found entities from a\n``POST`` search response, continuing on the previous example.\n\n.. code:: python\n\n   from logging import getLogger\n\n   from crudence import GetterDeleterTemplate\n\n   from db.session import db_session\n   from db.models import Persons, PersonOccupations, Occupations\n\n   class GetFamilyController(GetterDeleterTemplate):\n       IDENTIFYING_FIELDS = [\"id\"]\n       TARGET_FIELDS = [\"firstname\", \"lastname\"]\n       JOIN_FIELDS = [\n           {\n               \"table\": \"Occupations\",\n               \"fields\": [\"label\"],\n               \"output_key\": \"occupation\"\n           }\n       ]\n       def __init__(self):\n           super().__init__(target=Persons, session=db_session)\n           self.logger = getLogger(__name__)\n       \n       def _init_partial_query(self) -> Query:\n           # Adding Occupations to the query allow to get its columns in the result\n           return self.session.query(Persons, Occupations) \\\n               .join(PersonOccupations) \\\n               .join(Occupations)\n       \n       def _serialize(self, element: Tuple[Persons, Occupations], selected_fields: dict) -> dict:\n           # flat serialisation of fields from the main target table\n           output = super()._serialize(element.Persons, self.TARGET_FIELDS) \n           \n           # nested serialisation of fields from join table(s)\n           for join_fields_def in self.JOIN_FIELDS:\n               join_table = getattr(element, join_fields_def[\"table\"])  # element.Occupations\n               serialised_join = super()._serialize(element=join_table, selected_fields=join_fields_def[\"fields\"])\n               output[join_fields_def[\"output_key\"]] = serialised_join\n           return output\n\nThen a simple ``GetFamilyController().get(id=2)`` would return :\n\n.. code:: json\n\n   {\n       \"firstname\": \"John\",\n       \"lastname\": \"Doe\",\n       \"occupation\": {\n           \"label\": \"secret agent\"\n       }\n   }\n\nBeware that this can tremendously increase the charge on the database if\nthe join is heavy. In that case you should manually get the desired\nfields from the join table after serialisation, using a simple filter on\nthe join table from the found entities.\n\nHere’s another way to customise the controller that avoids a join to\nquery attributes from another table, for the same input and output.\n\n.. code:: python\n\n   from logging import getLogger\n\n   from crudence import GetterDeleterTemplate\n\n   from db.session import db_session\n   from db.models import Persons, PersonOccupations, Occupations\n\n   class GetFamilyController(GetterDeleterTemplate):\n       IDENTIFYING_FIELDS = [\"id\"]\n       TARGET_FIELDS = [\"firstname\", \"lastname\"]\n\n       def __init__(self):\n           super().__init__(target=Persons, session=db_session)\n           self.logger = getLogger(__name__)\n           \n       def _serialize(self, element: Persons, selected_fields: dict) -> dict:\n           # flat serialisation of fields from the main target table\n           output = super()._serialize(element.Persons, self.TARGET_FIELDS) \n           \n           # Manual get of the joined attributes for Occupations table\n           person_occupation = self.session.query(Occupations) \\\n               .filter(Occupations.person_id == element.id) \\\n               .first()\n           output[\"occupation\"] = super()._serialize(\n               element=person_occupation,\n               selected_fields=[\"label\"]\n           )\n            \n           return output\n\nHandling heavy joins\n~~~~~~~~~~~~~~~~~~~~\n\nThe ``PostSearchControllerTemplate`` works best for easy use cases when\nthe filtering query is not to costly to execute, often due to joins. The\ndefault behaviour is to join only if the filter on the join table is\nasked, but even this might not be sufficient to lighten the query.\n\nThere are many ways to customise the controller so that it behaves the\nway you need. In most cases writing appropriate mapping methods for the\njoin should be enough, but if not you would generally have to do one or\nall of the following :\n\n-  empty ``JOINS_FILTERS`` so that the native way of joining to the\n   query is deactivated\n-  rewrite or supercharge ``_init_partial_query`` to add joins\n-  supercharge the whole ``search`` method to build the exact partial\n   query you need then execute the search\n\nHere’s still an example of a controller with two joins : an easy join\nthat uses an intermediate table, and a two-step join using an\nintermediary filter to avoid joining on huge tables.\n\n.. code:: python\n\n   from logging import getLogger\n\n   from sqlalchemy.orm import Query\n   from crudence import PostSearchControllerTemplate\n\n   from db.session import db_session\n   from db.models import Persons, PersonRelatives, RelativeStatus, PersonLocation, Locations\n\n   class SearchPersonsController(PostSearchControllerTemplate):\n       JOINS_FILTERS = [\n           {\n               \"slot\": \"person_relatives\",\n               \"target\": RelativeStatus,\n               \"map_method\": \"map_relatives\"\n           },\n           {\n               \"slot\": \"person_locations\",\n               \"target\": Locations,\n               \"map_method\": \"map_locations \n           }\n       ]\n\n       def __init__(self):\n           super().__init__(target=Persons, session=db_session)\n           self.logger = getLogger(__name__)\n       \n       def map_relatives(self, partial: Query, filters: dict) -> Query:\n           # Simple join on relative status with an intermediary table\n           # If the filter is provided in the input this will be added to the partial,\n           # allowing to filter on relative statuses\n           partial = partial \\\n               .join(PersonRelatives, Persons.id == PersonRelatives.person_id) \\\n               .join(RelativeStatus, RelativeStatus.relative_id == PersonRelatives.relative_id)\n           return partial\n       \n       def map_locations(self, partial: Query, filters: dict) -> Query:\n           # The passed on filter is the whole filters slot in the input\n           # The person_locations filter is removed from it since its filtering\n           # action is made here and we don't want to apply it again\n           target_locations = filters.pop(\"person_locations\")[\"uid\"]\n\n           # Getting the target db ids to avoid joining on the Locations table\n           locations_ids = self.session.query(Locations.id).filter(Locations.uid.in_(target_locations)).all()\n\n           # Joining only with the PersonLocation table that is not huge. Or we could\n           # add another intermediate query an straight away filter on found person ids\n           # before returning the partial\n           partial = partial \\\n               .join(PersonLocation) \\\n               .filter(PersonLocation.location_id.in_(locations_ids))\n           return partial\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crud-templates",
    "package_url": "https://pypi.org/project/crud-templates/",
    "platform": null,
    "project_url": "https://pypi.org/project/crud-templates/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/crud-templates/0.1.1/",
    "requires_dist": [
      "marshmallow (>=3.0)",
      "sqlalchemy (>=2.0)"
    ],
    "requires_python": "",
    "summary": "Powerful yet discrete templates for CRUD controllers",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17538895,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c302fef00a87cbf60f51786b9456004806e823c44f9cbff30430f28640a647d",
          "md5": "10ae10be3cc7137019d6f41e2cf238c0",
          "sha256": "f15da52d1d9dbce1835b803b902e2fc0115b9bc3b9fdcb26c75f99ab94327952"
        },
        "downloads": -1,
        "filename": "crud_templates-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10ae10be3cc7137019d6f41e2cf238c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21802,
        "upload_time": "2023-02-21T23:31:17",
        "upload_time_iso_8601": "2023-02-21T23:31:17.819963Z",
        "url": "https://files.pythonhosted.org/packages/6c/30/2fef00a87cbf60f51786b9456004806e823c44f9cbff30430f28640a647d/crud_templates-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "424f19c06eaddce8b37c92d9576034efd1b3579feeae2958ac58558702725c4f",
          "md5": "779d431608422c1bd615c4d3d33f9cfd",
          "sha256": "554e470d6cb736a4eb90925360e4bc09dd358a6c84ed64f33284366768ae6c7c"
        },
        "downloads": -1,
        "filename": "crud-templates-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "779d431608422c1bd615c4d3d33f9cfd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16548,
        "upload_time": "2023-02-21T23:31:19",
        "upload_time_iso_8601": "2023-02-21T23:31:19.480358Z",
        "url": "https://files.pythonhosted.org/packages/42/4f/19c06eaddce8b37c92d9576034efd1b3579feeae2958ac58558702725c4f/crud-templates-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b1c09568456e33d7be74e9965f6dcfe67d248f188d83674e53d09d8f34d89bf",
          "md5": "19d9e2bb9366d286587b7b66ae867f6d",
          "sha256": "2429096b6964774fe64b005ae7bd4842c3a35fb50ce977fa86c9e3f896fc9f5f"
        },
        "downloads": -1,
        "filename": "crud_templates-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19d9e2bb9366d286587b7b66ae867f6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25739,
        "upload_time": "2023-04-01T10:52:14",
        "upload_time_iso_8601": "2023-04-01T10:52:14.465969Z",
        "url": "https://files.pythonhosted.org/packages/1b/1c/09568456e33d7be74e9965f6dcfe67d248f188d83674e53d09d8f34d89bf/crud_templates-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b9b0001d33f20fcd0b94e0c8c5bcbd08f201c234409ef44685e261b78555bd0",
          "md5": "9ada0d18832f1e4ffb4af08439098a33",
          "sha256": "7adb3ebe75a19cdb52a90dc4595810ca25d0d9428c0d19c7d0e719025cbb7e1b"
        },
        "downloads": -1,
        "filename": "crud-templates-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9ada0d18832f1e4ffb4af08439098a33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20970,
        "upload_time": "2023-04-01T10:52:16",
        "upload_time_iso_8601": "2023-04-01T10:52:16.492135Z",
        "url": "https://files.pythonhosted.org/packages/8b/9b/0001d33f20fcd0b94e0c8c5bcbd08f201c234409ef44685e261b78555bd0/crud-templates-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b1c09568456e33d7be74e9965f6dcfe67d248f188d83674e53d09d8f34d89bf",
        "md5": "19d9e2bb9366d286587b7b66ae867f6d",
        "sha256": "2429096b6964774fe64b005ae7bd4842c3a35fb50ce977fa86c9e3f896fc9f5f"
      },
      "downloads": -1,
      "filename": "crud_templates-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "19d9e2bb9366d286587b7b66ae867f6d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25739,
      "upload_time": "2023-04-01T10:52:14",
      "upload_time_iso_8601": "2023-04-01T10:52:14.465969Z",
      "url": "https://files.pythonhosted.org/packages/1b/1c/09568456e33d7be74e9965f6dcfe67d248f188d83674e53d09d8f34d89bf/crud_templates-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b9b0001d33f20fcd0b94e0c8c5bcbd08f201c234409ef44685e261b78555bd0",
        "md5": "9ada0d18832f1e4ffb4af08439098a33",
        "sha256": "7adb3ebe75a19cdb52a90dc4595810ca25d0d9428c0d19c7d0e719025cbb7e1b"
      },
      "downloads": -1,
      "filename": "crud-templates-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9ada0d18832f1e4ffb4af08439098a33",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20970,
      "upload_time": "2023-04-01T10:52:16",
      "upload_time_iso_8601": "2023-04-01T10:52:16.492135Z",
      "url": "https://files.pythonhosted.org/packages/8b/9b/0001d33f20fcd0b94e0c8c5bcbd08f201c234409ef44685e261b78555bd0/crud-templates-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}