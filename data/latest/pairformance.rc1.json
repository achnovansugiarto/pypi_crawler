{
  "info": {
    "author": "Maxime Peyrard",
    "author_email": "maxime.peyrard@epfl.ch",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# pairformance\nTool to perform paired evaluation of automatic systems.\n\nSee [published article](https://aclanthology.org/2021.acl-long.179/)\n\n## Motivation\n\nEvaluation in NLP is usually done by comparing the scores of competing systems independently averaged over a common set of test instances. \nIn our recent ACL publication, we question the use of averages for aggregating evaluation scores into a final number used to decide which system is best, \nsince the average, as well as alternatives such as the median, ignores the pairing arising from the fact that systems are evaluated on the same test instances. \nWe illustrate the importance of taking the instancelevel pairing of evaluation scores into account and demonstrate, both theoretically and empirically, \nthe advantages of aggregation methods based on pairwise comparisons, such as the Bradleyâ€“Terry (BT) model, a mechanism based on the estimated probability \nthat a given system scores better than another on the test set. \nBy re-evaluating 296 real NLP evaluation setups across four tasks and 18 evaluation metrics, \nwe show that the choice of aggregation mechanism matters and yields different conclusions as to which systems are state of the art in about 30% of the setups.\nTo facilitate the adoption of pairwise evaluation, we release this tool called `pairformance` a tool aggregate scores with mean, median, and BT.\n\n## Description\n\nThe pairformance tool takes a dataframe  as input with systems as columns\nand the system scores on test instances as rows (one row per test instance)\n\nIn standard evaluation practice focused only focusing on `mean`, one would obtain \nmean estimates simply by running: `eval_df.mean(axis=0)` if `eval_df` is the variable \ncontaining the dataframe.\n\nThe pairformance tool takes the pairing into account and provide:\n- Estimates of `mean`, `median`, and `BT` scores for each system\n- Confidence intervals for each estimate with bootstrap resampling of the data\n- Statistical testing for each of the three aggregation mechanisms\n- Pairwise comparison between each system. In particular, `pairformance` can produce the probability that any system has better score than any other system.\n- Diagnostic of the disagreement between `mean`, `median`, and `BT` about the ordering of systems\n- Diagnostic of the score distributions (outliers, measures of the strength of the pairing, score variances across systems and instances)\n- Plotting facilities to view global estimates, pairwise estimates, and the pairing structure for each pair of systems\n\n## Default Usage\n\nSuppose we have an evaluation data frame with evaluation scores for several systems\n(one column per system, one row per test instance):\n\n```python\nimport pandas as pd\n\neval_df = pd.read_csv('examples/dialogue_example_df.csv')\neval_df.head()\n```\n\n> | M0 | M1 | M2 | M3 | M4 |\n> |----|----|----|----|----|\n> | .495 | .506  | .483  | .506  |  .491  |\n> | .508  | .500  | .502  | .488  |  .498 |\n> | .483  |  .481 | .488  |  .491 |  .503 |\n\n\n```python\nfrom pairformance import Pairformance\n\npf_eval = Pairformance(df=eval_df)\npf_eval.eval()\n\nglobal_results = pf_eval.print_global_results()    \n```\n\nwill print to stdout:\n```buildoutcfg\n*** Mean ***\n\t     Systems       Est. score    (95% bootstrap CI)\n\t       M0             0.507      (0.504, 0.512) \n\t       M1             0.507      (0.496, 0.513) \n\t       M2             0.507      (0.497, 0.523) \n\t       M3             0.502      (0.497, 0.508) \n\t       M4             0.514      (0.509, 0.518) \n\n*** Median ***\n\t     Systems       Est. score    (95% bootstrap CI)\n\t       M0             0.503      (0.499, 0.508) \n\t       M1             0.495      (0.489, 0.500) \n\t       M2             0.497      (0.494, 0.499) \n\t       M3             0.495      (0.492, 0.499) \n\t       M4             0.507      (0.501, 0.512) \n\n*** BT ***\n\t     Systems       Est. score    (95% bootstrap CI)\n\t       M0             0.239      (0.191, 0.300) \n\t       M1             0.133      (0.109, 0.180) \n\t       M2             0.168      (0.121, 0.220) \n\t       M3             0.151      (0.126, 0.174) \n\t       M4             0.308      (0.259, 0.390) \n```\nFurthermore, `global_results` contains the same information in a dictionary.\n\nWith BT, it is possible to estimate the probability that one system is better than another\n\n```python\np_m0_m1, pval = pf_eval.prob_a_better_b('M0', 'M1')\nprint(f\"Prob that M0 is better than M1 {p_m0_m1}, pval {pval}\")\n```\n\n## Advanced Usage\nSeveral capabilities are available to provide better insights in the structure of system performances.\n\n#### Pairwise comparisons\nThe pairformance tool can analyze each pair of systems independently for all available aggregation mechanism:\n```python\nsystem_results = pf_eval.print_pairwise_results()\n```\n\n#### Plotting results\n```python\nfrom  pairformance import plotting_utils as pf_plot\n\n# plotting global results\npf_plot.plot_global_results(pf_eval, aggregation='BT')\n\n# plotting pairwise results\npf_plot.plot_matrix_results(pf_eval, aggregation='BT')\n```\n\n#### Diagnostics\n\n```python\nimport pprint\npp = pprint.PrettyPrinter(indent=4)\n\n# Diagnostic statistics from the distribution of system scores \npp.pprint(pf_eval.diagnostic_system_scores(eval_df))\n\n# disagreement measures between aggregation mechanisms\npf_eval.diagnostic_aggregation_agreement()\n\n# visualize the pairing structure for a pair of systems\npf_plot.plot_paired_graphs(eval_df, 'M2', 'M1')\n```\n\nMore details are available in the docstrings and in the example [notebook](examples/example_usage.ipynb)\n\n\n## Citation\n```\n@inproceedings{peyrard-etal-2021-better,\n    title = \"Better than Average: Paired Evaluation of {NLP} systems\",\n    author = \"Peyrard, Maxime  and\n      Zhao, Wei  and\n      Eger, Steffen  and\n      West, Robert\",\n    booktitle = \"Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)\",\n    month = aug,\n    year = \"2021\",\n    address = \"Online\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2021.acl-long.179\",\n    doi = \"10.18653/v1/2021.acl-long.179\",\n    pages = \"2301--2315\"\n}\n```\n\n#### Contact\nMaxime Peyrard, maxime.peyrard@epfl.ch\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/epfl-dlab/pairformance",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pairformance",
    "package_url": "https://pypi.org/project/pairformance/",
    "platform": "",
    "project_url": "https://pypi.org/project/pairformance/",
    "project_urls": {
      "Homepage": "https://github.com/epfl-dlab/pairformance"
    },
    "release_url": "https://pypi.org/project/pairformance/0.0.1/",
    "requires_dist": [
      "matplotlib",
      "numpy (>=1.10.4)",
      "pandas",
      "scipy (>=1.0.1)",
      "seaborn (>=0.9.1)"
    ],
    "requires_python": "",
    "summary": "Tool to perform paired evaluation of automatic systems.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11783701,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01e2b0a071c5a73f487780bf70a05114205b596486b7d91fa4b3a05ca322a20d",
          "md5": "82aa94d917164d8014b2121f55ec72ac",
          "sha256": "89efb7df8d0948e9920adc4e8c21cdb37cd9e3fce3b80f15de2876a2c95633ca"
        },
        "downloads": -1,
        "filename": "pairformance-0.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "82aa94d917164d8014b2121f55ec72ac",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 17523,
        "upload_time": "2021-10-20T19:10:14",
        "upload_time_iso_8601": "2021-10-20T19:10:14.698286Z",
        "url": "https://files.pythonhosted.org/packages/01/e2/b0a071c5a73f487780bf70a05114205b596486b7d91fa4b3a05ca322a20d/pairformance-0.0.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f3c8fbe69f5c60cf020382c40011b744e3a353e477dfb2c14cd18379018ceed",
          "md5": "933128a8a539a847161b0287c04eab79",
          "sha256": "3d4d60d694fe07787128cd6880b24d39066bee96d5fb10a865edb76a93d93d44"
        },
        "downloads": -1,
        "filename": "pairformance-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "933128a8a539a847161b0287c04eab79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 145673,
        "upload_time": "2021-10-20T19:10:18",
        "upload_time_iso_8601": "2021-10-20T19:10:18.683629Z",
        "url": "https://files.pythonhosted.org/packages/6f/3c/8fbe69f5c60cf020382c40011b744e3a353e477dfb2c14cd18379018ceed/pairformance-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01e2b0a071c5a73f487780bf70a05114205b596486b7d91fa4b3a05ca322a20d",
        "md5": "82aa94d917164d8014b2121f55ec72ac",
        "sha256": "89efb7df8d0948e9920adc4e8c21cdb37cd9e3fce3b80f15de2876a2c95633ca"
      },
      "downloads": -1,
      "filename": "pairformance-0.0.1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "82aa94d917164d8014b2121f55ec72ac",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 17523,
      "upload_time": "2021-10-20T19:10:14",
      "upload_time_iso_8601": "2021-10-20T19:10:14.698286Z",
      "url": "https://files.pythonhosted.org/packages/01/e2/b0a071c5a73f487780bf70a05114205b596486b7d91fa4b3a05ca322a20d/pairformance-0.0.1-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f3c8fbe69f5c60cf020382c40011b744e3a353e477dfb2c14cd18379018ceed",
        "md5": "933128a8a539a847161b0287c04eab79",
        "sha256": "3d4d60d694fe07787128cd6880b24d39066bee96d5fb10a865edb76a93d93d44"
      },
      "downloads": -1,
      "filename": "pairformance-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "933128a8a539a847161b0287c04eab79",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 145673,
      "upload_time": "2021-10-20T19:10:18",
      "upload_time_iso_8601": "2021-10-20T19:10:18.683629Z",
      "url": "https://files.pythonhosted.org/packages/6f/3c/8fbe69f5c60cf020382c40011b744e3a353e477dfb2c14cd18379018ceed/pairformance-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}