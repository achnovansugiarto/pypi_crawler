{
  "info": {
    "author": "Jihee Ryu",
    "author_email": "chrisjihee@naver.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "=========\nchrisdict\n=========\n\nchrisdict is an MIT-licensed library that provides mapping objects that allow\ntheir elements to be accessed both as keys and as attributes::\n\n    > from chrisdict import AttrDict\n    > a = AttrDict({'foo': 'bar'})\n    > a.foo\n    'bar'\n    > a['foo']\n    'bar'\n\nAttribute access makes it easy to create convenient, hierarchical settings\nobjects::\n\n    with open('settings.yaml') as fileobj:\n        settings = AttrDict(yaml.safe_load(fileobj))\n\n    cursor = connect(**settings.db.credentials).cursor()\n\n    cursor.execute(\"SELECT column FROM table;\")\n\nInstallation\n============\nchrisdict is in PyPI, so it can be installed directly using::\n\n    $ pip install chrisdict\n\nOr from Github::\n\n    $ git clone https://github.com/chrisjihee/chrisdict\n    $ cd chrisdict\n    $ python install .\n\nBasic Usage\n===========\nchrisdict comes with three different classes, `AttrMap`, `AttrDict`, and\n`AttrDefault`. They are all fairly similar, as they all are MutableMappings (\nread: dictionaries) that allow creating, accessing, and deleting key-value\npairs as attributes.\n\nValid Names\n-----------\nAny key can be used as an attribute as long as:\n\n#. The key represents a valid attribute (i.e., it is a string comprised only of\n   alphanumeric characters and underscores that doesn't start with a number)\n#. The key represents a public attribute (i.e., it doesn't start with an\n   underscore). This is done (in part) so that implementation changes between\n   minor and micro versions don't force major version changes.\n#. The key does not shadow a class attribute (e.g., get).\n\nAttributes vs. Keys\n-------------------\nThere is a minor difference between accessing a value as an attribute vs.\naccessing it as a key, is that when a dict is accessed as an attribute, it will\nautomatically be converted to an Attr object. This allows you to recursively\naccess keys::\n\n    > attr = AttrDict({'foo': {'bar': 'baz'}})\n    > attr.foo.bar\n    'baz'\n\nRelatedly, by default, sequence types that aren't `bytes`, `str`, or `unicode`\n(e.g., lists, tuples) will automatically be converted to tuples, with any\nmappings converted to Attrs::\n\n    > attr = AttrDict({'foo': [{'bar': 'baz'}, {'bar': 'qux'}]})\n    > for sub_attr in attr.foo:\n    >     print(sub_attr.foo)\n    'baz'\n    'qux'\n\nTo get this recursive functionality for keys that cannot be used as attributes,\nyou can replicate the behavior by calling the Attr object::\n\n    > attr = AttrDict({1: {'two': 3}})\n    > attr(1).two\n    3\n\nClasses\n-------\nchrisdict comes with three different objects, `AttrMap`, `AttrDict`, and\n`AttrDefault`.\n\nAttrMap\n^^^^^^^\nThe most basic implementation. Use this if you want to limit the number of\ninvalid keys, or otherwise cannot use `AttrDict`\n\nAttrDict\n^^^^^^^^\nAn Attr object that subclasses `dict`. You should be able to use this\nabsolutely anywhere you can use a `dict`. While this is probably the class you\nwant to use, there are a few caveats that follow from this being a `dict` under\nthe hood.\n\nThe `copy` method (which returns a shallow copy of the mapping) returns a\n`dict` instead of an `AttrDict`.\n\nRecursive attribute access results in a shallow copy, so recursive assignment\nwill fail (as you will be writing to a copy of that dictionary)::\n\n    > attr = AttrDict('foo': {})\n    > attr.foo.bar = 'baz'\n    > attr.foo\n    {}\n\nAssignment as keys will still work::\n\n    > attr = AttrDict('foo': {})\n    > attr['foo']['bar'] = 'baz'\n    > attr.foo\n    {'bar': 'baz'}\n\nIf either of these caveats are deal-breakers, or you don't need your object to\nbe a `dict`, consider using `AttrMap` instead.\n\nAttrDefault\n^^^^^^^^^^^\nAt Attr object that behaves like a `defaultdict`. This allows on-the-fly,\nautomatic key creation::\n\n    > attr = AttrDefault(int, {})\n    > attr.foo += 1\n    > attr.foo\n    1\n\nAttrDefault also has a `pass_key` option that passes the supplied key to the\n`default_factory`::\n\n    > attr = AttrDefault(sorted, {}, pass_key=True)\n    > attr.banana\n    ['a', 'a', 'a', 'b', 'n', 'n']\n\nMerging\n-------\nAll three Attr classes can be merged with eachother or other Mappings using the\n``+`` operator. For conflicting keys, the right dict's value will be\npreferred, but in the case of two dictionary values, they will be\nrecursively merged::\n\n    > a = {'foo': 'bar', 'alpha': {'beta': 'a', 'a': 'a'}}\n    > b = {'lorem': 'ipsum', 'alpha': {'bravo': 'b', 'a': 'b'}}\n    > AttrDict(a) + b\n    {'foo': 'bar', 'lorem': 'ipsum', 'alpha': {'beta': 'a', 'bravo': 'b', 'a': 'b'}}\n\nNOTE: AttrDict's add is not commutative, ``a + b != b + a``::\n\n    > a = {'foo': 'bar', 'alpha': {'beta': 'b', 'a': 0}}\n    > b = {'lorem': 'ipsum', 'alpha': {'bravo': 'b', 'a': 1}}\n    > b + AttrDict(a)\n    {'foo': 'bar', 'lorem': 'ipsum', 'alpha': {'beta': 'a', 'bravo': 'b', 'a': }}\n\nSequences\n---------\nBy default, items in non-string Sequences (e.g. lists, tuples) will be\nconverted to AttrDicts::\n\n    > adict = AttrDict({'list': [{'value': 1}, {'value': 2}]})\n    > for element in adict.list:\n    >     element.value\n    1\n    2\n\nThis will not occur if you access the AttrDict as a dictionary::\n\n    > adict = AttrDict({'list': [{'value': 1}, {'value': 2}]})\n    > for element in adict['list']:\n    >     isinstance(element, AttrDict)\n    False\n    False\n\nTo disable this behavior globally, pass the attribute ``recursive=False`` to\nthe constructor::\n\n    > adict = AttrDict({'list': [{'value': 1}, {'value': 2}]}, recursive=False)\n    > for element in adict.list:\n    >     isinstance(element, AttrDict)\n    False\n    False\n\nWhen merging an AttrDict with another mapping, this behavior will be disabled\nif at least one of the merged items is an AttrDict that has set ``recursive``\nto ``False``.\n\nLicense\n=======\nchrisdict is released under a MIT license.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chrisjihee/chrisdict",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chrisdict",
    "package_url": "https://pypi.org/project/chrisdict/",
    "platform": null,
    "project_url": "https://pypi.org/project/chrisdict/",
    "project_urls": {
      "Homepage": "https://github.com/chrisjihee/chrisdict"
    },
    "release_url": "https://pypi.org/project/chrisdict/2.0.3/",
    "requires_dist": [
      "six",
      "nose ; extra == 'test'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "A dictionary that allows attribute-style access.",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16454342,
  "releases": {
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5f12567c819af4f0a87b45d2ff0258695f27552fe044578b37550784bc937fc",
          "md5": "89519b20ad4fa2f8cebab04533a17523",
          "sha256": "93249b24b9a8ea3a53f8c5b924e6645ae35ae8267d6767bc0dca5a81fd815f01"
        },
        "downloads": -1,
        "filename": "chrisdict-2.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89519b20ad4fa2f8cebab04533a17523",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9898,
        "upload_time": "2023-01-17T07:24:48",
        "upload_time_iso_8601": "2023-01-17T07:24:48.987060Z",
        "url": "https://files.pythonhosted.org/packages/e5/f1/2567c819af4f0a87b45d2ff0258695f27552fe044578b37550784bc937fc/chrisdict-2.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec39f4eb85db9b8dff89eac1c9529bcd96d9ff876cc3e764fa920571df7ae746",
          "md5": "054072b8f1e6be9340b0920040df10e9",
          "sha256": "706ffdb99e469db9c6ba3ea66383448bd5a65bd611763dce151f3e1ac330acdc"
        },
        "downloads": -1,
        "filename": "chrisdict-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "054072b8f1e6be9340b0920040df10e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9916,
        "upload_time": "2023-01-17T07:24:50",
        "upload_time_iso_8601": "2023-01-17T07:24:50.726639Z",
        "url": "https://files.pythonhosted.org/packages/ec/39/f4eb85db9b8dff89eac1c9529bcd96d9ff876cc3e764fa920571df7ae746/chrisdict-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5f12567c819af4f0a87b45d2ff0258695f27552fe044578b37550784bc937fc",
        "md5": "89519b20ad4fa2f8cebab04533a17523",
        "sha256": "93249b24b9a8ea3a53f8c5b924e6645ae35ae8267d6767bc0dca5a81fd815f01"
      },
      "downloads": -1,
      "filename": "chrisdict-2.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89519b20ad4fa2f8cebab04533a17523",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9898,
      "upload_time": "2023-01-17T07:24:48",
      "upload_time_iso_8601": "2023-01-17T07:24:48.987060Z",
      "url": "https://files.pythonhosted.org/packages/e5/f1/2567c819af4f0a87b45d2ff0258695f27552fe044578b37550784bc937fc/chrisdict-2.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec39f4eb85db9b8dff89eac1c9529bcd96d9ff876cc3e764fa920571df7ae746",
        "md5": "054072b8f1e6be9340b0920040df10e9",
        "sha256": "706ffdb99e469db9c6ba3ea66383448bd5a65bd611763dce151f3e1ac330acdc"
      },
      "downloads": -1,
      "filename": "chrisdict-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "054072b8f1e6be9340b0920040df10e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9916,
      "upload_time": "2023-01-17T07:24:50",
      "upload_time_iso_8601": "2023-01-17T07:24:50.726639Z",
      "url": "https://files.pythonhosted.org/packages/ec/39/f4eb85db9b8dff89eac1c9529bcd96d9ff876cc3e764fa920571df7ae746/chrisdict-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}