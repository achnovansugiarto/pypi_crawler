{
  "info": {
    "author": "TangledHub",
    "author_email": "info@tangledgroup.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Topic :: Security :: Cryptography",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![Build][build-image]]()\n[![Status][status-image]][pypi-project-url]\n[![Stable Version][stable-ver-image]][pypi-project-url]\n[![Coverage][coverage-image]]()\n[![Python][python-ver-image]][pypi-project-url]\n[![License][bsd3-image]][bsd3-url]\n\n\n\n# thcrypto\n\n## Overview\n\nTangledHub library for cryptography.\n\n## Licencing\n\nthcrypto is licensed under the BSD license. Check the [LICENSE](https://opensource.org/licenses/BSD-3-Clause) for details.\n\n## Installation\n```bash\npip install thcrypto\n```\n\n---\n\n## Testing\n```bash\ndocker-compose build --no-cache thcrypto-test ; docker-compose run --rm thcrypto-test\n```\n\n## Building\n```bash\ndocker-compose build thcrypto-build ; docker-compose run --rm thcrypto-build\n```\n\n## Publish\n```bash\ndocker-compose build thcrypto-publish ; docker-compose run --rm -e PYPI_USERNAME=__token__ -e PYPI_PASSWORD=__SECRET__ thcrypto-publish\n```\n\n---\n\n## API\n\nthcrypto api is using the **thresult** library, so all api functions are returning result wrapped in **Ok** or **Err**\nobject.  \nTherefore, in order to reach into the result object, you should use **.unwrap()** as in examples.\n\n---\n\n## Bcrypt\n\n### cls.generate() -> Bcrypt\n\nGenerate bcrypt salt with custom parameters (4 < rounds: int > 31, prefix: bytes elem {b'2a', b'2b'}.  \nIf custom parameters are not passed, default values are used.\n\n#### Example:\n\n```python\nbcrypt_default: Bcrypt = Bcrypt.generate().unwrap()\n\nbcrypt_custom: Bcrypt = Bcrypt.generate(rounds=12, prefix=b'2b').unwrap()\n```\n\n### cls.load_or_generate() -> Bcrypt\n\nLoad bcrypt from file, if file does not exist, generate bcrypt key and writes it down to the file.  \nThis function can be called without parameters (in which case it is going to use default params  \n**(path: str='bcrypt.salt', rounds: int=12, prefix: bytes=b'2b'))**  \nor with custom params:  \n**(path: str='custom_path', 4 < rounds: int > 31, prefix: bytes elem {b'2a', b'2b'})**.  \nIn case that bcrypt is loaded from existing file, passed custom 'rounds' and 'prefix' params are ignored.\n\n#### Example:\n\n```python\nbcrypt_: Bcrypt = Bcrypt.load_or_generate_file().unwrap()\n\nbcrypt_: Bcrypt = Bcrypt.load_or_generate_file(path='bcrypt.salt', \n                                               rounds=12, \n                                               prefix=b'2b').unwrap()\n```\n\n### self.get_hashed_password() -> bytes\n\nHash password function accepts parameter(unhashed_password: bytes | str) which has to be max 72 bytes long.\n\n#### Example:\n\n```python\nhashed_password: bytes = bcrypt_.get_hashed_password(bcrypt_, 'test bcrypt').unwrap()\n```\n\n### cls.check_password() -> bool\n\nCheck password function accepts parameters(unhashed_password: bytes | str, hashed_password: bytes | str)\n\n#### Example:\n\n```python\nresult: bool = Bcrypt.check_password('test bcrypt', hashed_password).unwrap()\n```\n\n---\n\n## Edd25519\n\n### cls.generate() -> Ed25519\n\nGenerate Ed25519\n\n#### Example:\n\n```python\ngenerated_ed25519: Ed25519 = Ed25519.generate().unwrap()\n```\n\n### cls.load_or_generate_file() -> Ed25519\n\nLoad ed25519 keys from files - if files not exists then generates Ed25519, writes private and public keys to the files and returns Ed25519.  \nParameters:  \n**(private_path: str='custom_private_path.pem', public_path: str='custom_public_path.pem')**  \nare optional, if not passed then default params are used  \n**(private_path: str='sk_ed25519.pem', public_path: str='pk_ed25519.pem')**\n\n#### Example:\n\n```python\ned25519_: Ed25519 = Ed25519.load_or_generate_file().unwrap()\n\ned25519_: Ed25519 = Ed25519.load_or_generate_file(private_path='custom_path_to_sk_ed25519.pem',\n                                                  public_path='custom_path_to_pk_ed25519.pem').unwrap()\n```\n\n### self.sign(data: bytes) -> bytes\n\nSign data with ed25519 private key\n\n#### Example:\n\n```python\nsigned_data: bytes = ed25519_.sign(data=b'test_test_b').unwrap()\n```\n\n### self.verify(signature: bytes, data: bytes) -> bool\n\nVerify signature with ed25519 public key\n\n#### Example:\n\n```python\nverified: bool = ed25519_.verify(signature=signed_data, data=b'test_test_b').unwrap()\n```\n\n### self.get_raw_private_key_bytes() -> bytes\n\nGet serialized bytes from the private key.\n\n#### Example:\n\n```python\nraw_private_key_bytes: bytes = ed25519_.get_raw_private_key_bytes().unwrap()\n```\n\n### self.get_raw_private_key() -> str\n\nGet serialized bytes from the private key decoded to string\n\n#### Example:\n\n```python\nraw_private_key_string: str = ed25519_.get_raw_private_key().unwrap()\n```\n\n### self.get_raw_private_key_bytes() -> bytes\n\nGet serialized bytes from the private key.\n\n#### Example:\n\n```python\nraw_public_key_bytes: bytes = ed25519_.get_raw_public_key_bytes().unwrap()\n```\n\n### self.get_raw_private_key() -> str\n\nGet serialized bytes from the private key decoded to string\n\n#### Example:\n\n```python\nraw_private_key_string: str = ed25519_.get_raw_public_key().unwrap()\n```\n\n---\n\n## Secp2561\n\n### cls.generate() -> Secp2561\n\nGenerate Secp2561\n\n#### Example:\n\n```python\ngenerated_secp256k1: Secp2561 = Secp2561.generate().unwrap()\n```\n\n### cls.load_or_generate_file(private_path: str=None, public_path: str=None) -> Secp2561\n\nLoad secp256k1 keys from files - if files not exists then generates Secp2561, writes private and public keys to the \nfiles and returns Secp2561.  \nParameters:  \n**(private_path: str='custom_private_path.pem', public_path: str='custom_public_path.pem')**  \nare optional, if not passed then default params are used:  \n**(private_path: str='sk_secp256k1.pem', public_path: str='pk_secp256k1.pem')**\n\n#### Examples:\n\n```python\nsecp256k1_: Secp2561 = Secp2561.load_or_generate_file().unwrap()\n\nsecp256k1_: Secp2561 = Secp2561.load_or_generate_file(private_path='custom_path_to_sk_secp256k1.pem',\n                                                      public_path='custom_path_to_pk_secp256k1.pem').unwrap()\n```\n\n### self.sign(data: bytes) -> bytes\n\nSign data with SECP256K1 private key\n\n#### Example:\n\n```python\nsigned_data: bytes = secp256k1_.sign(data=b'test_test_b').unwrap()\n```\n\n### self.verify(signature: bytes, data: bytes) -> bool\n\nVerify signature with SECP256K1 public key\n\n#### Example:\n\n```python\nverified: bool = secp256k1_.verify(signature=b'signed_data', data=b'test_test_b').unwrap()\n```\n\n---\n\n## Rand\n\n### gen_random_int(bits: int) -> int\n\nGenerate a random integer, based on passed number of bits\n\n#### Example:\n\n```python\nrandom_int_bits: int = gen_random_int(bits=256).unwrap()\n```\n\n### gen_random_int_hex(bits: int) -> str\n\nGenerate random string, based on passed number of bits\n\n#### Example:\n\n```python\nrandom_int_hex: str = gen_random_int_hex(bits=256).unwrap()\n```\n\n### gen_random_int_hex_bytes(bits: int) -> bytes\n\nGenerate random string, based on passed number of bits\n\n#### Example:\n\n```python\nrandom_int_hex_bytes: bytes = gen_random_int_hex_bytes(bits=128).unwrap()\n```\n\n### gen_random_int128(bits: int) -> int\n\nGenerate a random integer, based on 128 bits\n\n#### Example:\n\n```python\nrandom_int_128: int = gen_random_int128().unwrap()\n```\n\n### gen_random_int128_hex(bits: int) -> str\n\nGenerate random string, based on 128 bits\n\n#### Example:\n\n```python\nrandom_int_128_hex: str = gen_random_int128_hex().unwrap()\n```\n\n### gen_random_int128_hex_bytes(bits: int) -> bytes\n\nGenerate random bytes, based on 128 bits\n\n#### Example:\n\n```python\nrandom_int_128_hex_bytes: bytes = gen_random_int128_hex_bytes().unwrap()\n```\n\n### gen_random_int256(bits: int) -> int\n\nGenerate a random integer, based on 256 bits\n\n#### Example:\n\n```python\nrandom_int_256: int = gen_random_int256().unwrap()\n```\n\n### gen_random_int256_hex(bits: int) -> str\n\nGenerate random string, based on 256 bits\n\n#### Example:\n\n```python\nrandom_int_256_hex: str = gen_random_int256_hex().unwrap()\n```\n\n### gen_random_int256_hex_bytes(bits: int) -> bytes\n\nGenerate random bytes, based on 256 bits\n\n#### Example:\n\n```python\nrandom_int_256_hex_bytes: bytes = gen_random_int256_hex_bytes().unwrap()\n```\n\n---\n\n## Fernet\n\n### cls.generate(cls) -> Fernet\n\nGenerate Fernet\n\n#### Example:\n\n```python\ngenerated_fernet: Fernet = Fernet.generate().unwrap()\n```\n\n### cls.load_or_generate_file(path: str='fernet.key') -> Fernet\n\nLoad Fernet from file or generate one This function tries to load the Fernet from file, if file does not exist then generate Fernet and writes it down to a file.  \nFunction accepts optional 'path' parameter **(path: str='custom_path.key')** or uses default value **(path: str='fernet.key')**\n\n#### Example:\n\n```python\nfernet_: Fernet = Fernet.load_or_generate_file().unwrap()\n\nfernet_: Fernet = Fernet.load_or_generate_file(path='custom_path_fernet.key').unwrap()\n```\n\n### self.encrypt_bytes(data_bytes: bytes, current_time: int | None=None) -> bytes\n\nEncrypt bytes with Fernet key This function takes required argument 'data_bytes' and optional argument 'current_time'\n\n#### Example:\n\n```python\nencrypted_bytes: bytes = fernet_.encrypt_bytes(data_bytes=b'test bytes', \n                                               current_time=int(time())).unwrap()\n```\n\n### self.decrypt_bytes(enc_data_bytes: bytes, ttl: int | None=None, current_time: int | None=None) -> bytes\n\nDecrypt bytes with Fernet key.  \nThis function takes required argument 'enc_data_bytes' and two optional arguments 'ttl' and 'current_time'\n\n#### Example:\n\n```python\ndecrypt_bytes: bytes = fernet_.decrypt_bytes(enc_data_bytes=encrypted_bytes, \n                                             ttl=100, \n                                             current_time=int(time())).unwrap()\n```\n\n### self.encrypt_dict(data_dict: dict, current_time: int | None=None) -> str\n\nEncrypt bytes with Fernet key This function takes required argument 'data_bytes' and optional argument 'current_time'\n\n#### Example:\n\n```python\nencrypted_dict: str = fernet_.encrypt_dict(data_dict={'test_key': 'test_value'}, current_time=int(time())).unwrap()\n```\n\n### self.decrypt_dict(enc_data_str: str, ttl: int | None=None, current_time: int | None=None) -> dict\n\nDecrypt bytes with Fernet key.  \nThis function takes required argument 'data_bytes' and two optional arguments 'ttl' and 'current_time'\n\n#### Example:\n\n```python\ndecrypted_dict: dict = fernet_.decrypt_dict(enc_data_str=encrypted_dict, ttl=100, current_time=int(time())).unwrap()\n```\n\n---\n\n## Multifernet\n\nCreate Multifernet instance\n\n#### Example:\n\n```python\nfernet_key_1: Fernet = Fernet.generate().unwrap()\nmulti_fernet_1: MultiFernet = MultiFernet([fernet_key_0])\n```\n\n### self.encrypt_bytes(data_bytes: bytes, current_time: int | None=None) -> bytes\n\nEncrypt bytes. This function takes required argument 'data_bytes' and optional argument 'current_time'\n\n#### Example:\n\n```python\nencrypted_bytes: bytes = multi_fernet_1.encrypt_bytes(data_bytes=b'12345', current_time=int(time())).unwrap()\n```\n\n### self.decrypt_bytes(enc_data_bytes: bytes, ttl: int | None=None, current_time: int | None=None) -> bytes\n\nDecrypt bytes. This function takes required argument 'enc_data_bytes' and two optional arguments 'ttl' and '\ncurrent_time'\n\n#### Example:\n\n```python\ndecrypted_bytes: bytes = multi_fernet_1.decrypt_bytes(enc_data_bytes=encrypted_bytes, ttl=100,\n                                                      current_time=int(time())).unwrap()\n```\n\n### self.encrypt_dict(data_dict: dict, current_time: int | None=None) -> str\n\nEncrypt dict. This function takes required argument 'data_dict' and optional argument 'current_time'\n\n#### Example:\n\n```python\nencrypted_dict: str = multi_fernet_1.encrypt_dict(data_dict={'test_key': 'test_value'},\n                                                  current_time=int(time())).unwrap()\n```\n\n### self.decrypt_dict(enc_data_str: str, ttl: int | None=None, current_time: int | None=None) -> dict\n\nDecrypt dict. This function takes required argument 'enc_data_bytes' and two optional arguments 'ttl' and 'current_time'\n\n#### Example:\n\n```python\ndecrypted_dict: dict = multi_fernet_1.decrypt_dict(enc_data_str=encrypted_dict, ttl=100,\n                                                   current_time=int(time())).unwrap()\n```\n\n### self.add_fernet(fernet: Fernet) -> MultiFernet\n\nAdd new fernet. This function takes required argument 'fernet' and returns new instance of MultiFernet with new fernet\nkey added to beginning of fernet key list\n\n#### Example:\n\n```python\nfernet_key_2: Fernet = Fernet.generate().unwrap()\nmulti_fernet_2: MultiFernet = multi_fernet_1.add_fernet(fernet_key_2).unwrap()\n```\n\n### self.rotate(enc_data_bytes: bytes) -> bytes\n\nRotate fernet keys (re-encrypt token)\n\n#### Example:\n\n```python\nrotated_msg_with_multi_fernet_2: bytes = multi_fernet_2.rotate(encrypted_bytes).unwrap()\n```\n\n<!-- Links -->\n\n<!-- Badges -->\n[bsd3-image]: https://img.shields.io/badge/License-BSD_3--Clause-blue.svg\n[bsd3-url]: https://opensource.org/licenses/BSD-3-Clause\n[build-image]: https://img.shields.io/badge/build-success-brightgreen\n[coverage-image]: https://img.shields.io/badge/Coverage-100%25-green\n\n[pypi-project-url]: https://pypi.org/project/thcrypto/\n[stable-ver-image]: https://img.shields.io/pypi/v/thcrypto?label=stable\n[python-ver-image]: https://img.shields.io/pypi/pyversions/thcrypto.svg?logo=python&logoColor=FBE072\n[status-image]: https://img.shields.io/pypi/status/thcrypto.svg\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/tangledlabs/thcrypto",
    "keywords": "tangled,tangledhub,tangledlabs,thcrypto",
    "license": "BSD 3-clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "thcrypto",
    "package_url": "https://pypi.org/project/thcrypto/",
    "platform": null,
    "project_url": "https://pypi.org/project/thcrypto/",
    "project_urls": {
      "Homepage": "https://gitlab.com/tangledlabs/thcrypto",
      "Repository": "https://gitlab.com/tangledlabs/thcrypto"
    },
    "release_url": "https://pypi.org/project/thcrypto/0.9.21/",
    "requires_dist": [
      "bcrypt (>=4.0.1,<5.0.0)",
      "cryptography (>=38.0.4,<39.0.0)",
      "thresult (>=0.9.25,<0.10.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "TangledHub Cryptography Library",
    "version": "0.9.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16111818,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07ae9a0d04cb93c528702729ec4a1c450ce52aa0fba4d39a3b3265445ca5f7ba",
          "md5": "ef094688c3ae8753e69499d3178f96d9",
          "sha256": "df6a398abda890ee7d1b5fc8cbf2cbce8da051b4f20f771445103339d3e30753"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef094688c3ae8753e69499d3178f96d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 11456,
        "upload_time": "2021-12-24T10:57:14",
        "upload_time_iso_8601": "2021-12-24T10:57:14.348001Z",
        "url": "https://files.pythonhosted.org/packages/07/ae/9a0d04cb93c528702729ec4a1c450ce52aa0fba4d39a3b3265445ca5f7ba/thcrypto-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8bd34182be93efa173c16e8c7caa49fb4b03668bd57e78e02b9fda079d05f6c",
          "md5": "5b3225ec1c01bb7847110bd6d27452fd",
          "sha256": "389b311c56836b6cc8b2904b25a07189935a891190a9d0f8e13d90ff90c95ce2"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5b3225ec1c01bb7847110bd6d27452fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 12005,
        "upload_time": "2021-12-24T10:57:16",
        "upload_time_iso_8601": "2021-12-24T10:57:16.078961Z",
        "url": "https://files.pythonhosted.org/packages/f8/bd/34182be93efa173c16e8c7caa49fb4b03668bd57e78e02b9fda079d05f6c/thcrypto-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51fec49f892198afc088ae0dc871fdaec28007d6cc0b2de6696e4600994dcb72",
          "md5": "1d566b3fac2e849578123fa76a549408",
          "sha256": "5e95ae87357cc14668768a2b0f358eec345c39decbe7da1557c7d39f13fc480f"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d566b3fac2e849578123fa76a549408",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 11391,
        "upload_time": "2021-12-24T11:24:19",
        "upload_time_iso_8601": "2021-12-24T11:24:19.256415Z",
        "url": "https://files.pythonhosted.org/packages/51/fe/c49f892198afc088ae0dc871fdaec28007d6cc0b2de6696e4600994dcb72/thcrypto-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f4b13d66e7669619f16ed2c2c8ad5aeb2bd7b61c27e5fea5292da923a4e1d60",
          "md5": "633ffec66a69d30bfb93458e5d520ae2",
          "sha256": "18413b429b9312fc06fe19b3f993cedc1eadde8a70fd9bfd794609c5175a20fb"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "633ffec66a69d30bfb93458e5d520ae2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 11871,
        "upload_time": "2021-12-24T11:24:20",
        "upload_time_iso_8601": "2021-12-24T11:24:20.348553Z",
        "url": "https://files.pythonhosted.org/packages/3f/4b/13d66e7669619f16ed2c2c8ad5aeb2bd7b61c27e5fea5292da923a4e1d60/thcrypto-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba1b846fbf722b5d91b32b3bb82547d76a7c174c51dafb6e09daf23ec649cbbd",
          "md5": "dd50d4891e9a4daeac12b8500d7f8627",
          "sha256": "0b2721489fedaea530137ec1cf9d39458bfb166fff7356d0a956a80d824ff231"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd50d4891e9a4daeac12b8500d7f8627",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 12410,
        "upload_time": "2021-12-27T14:14:08",
        "upload_time_iso_8601": "2021-12-27T14:14:08.742107Z",
        "url": "https://files.pythonhosted.org/packages/ba/1b/846fbf722b5d91b32b3bb82547d76a7c174c51dafb6e09daf23ec649cbbd/thcrypto-0.9.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7500bb0813642e9825e9a615085c17dfca42df28c971b168497d509a3502dcca",
          "md5": "8684a70d27292d5d14befd64d4e2b1c6",
          "sha256": "d832a5fc30feda256471e1c2fdeef02a26ed52a1c8df81e27108be07ccd6b7c3"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8684a70d27292d5d14befd64d4e2b1c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 12799,
        "upload_time": "2021-12-27T14:14:10",
        "upload_time_iso_8601": "2021-12-27T14:14:10.178181Z",
        "url": "https://files.pythonhosted.org/packages/75/00/bb0813642e9825e9a615085c17dfca42df28c971b168497d509a3502dcca/thcrypto-0.9.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10f118b0571dfa0aceb41b17b9f0829beb52c7758343b7d8b019a5839720a4eb",
          "md5": "01ae1c55380cf75639e65133a02aefba",
          "sha256": "2f16d0cf6f697ee2a06115ba8aa38f8bc2198e3c6ec4a0c86d14120196c209eb"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01ae1c55380cf75639e65133a02aefba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 12463,
        "upload_time": "2021-12-29T13:36:46",
        "upload_time_iso_8601": "2021-12-29T13:36:46.506940Z",
        "url": "https://files.pythonhosted.org/packages/10/f1/18b0571dfa0aceb41b17b9f0829beb52c7758343b7d8b019a5839720a4eb/thcrypto-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb813bb2b7e61ecd4dab0c533bf3267588b4110d0dff9295a11c05f020d10ab2",
          "md5": "13c43c10ce1aa4f993b1cc58f46e7049",
          "sha256": "6ba95f2c5b836428c0692ba4756fc790f86ad319a8a54f1f83d813f2a3575278"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "13c43c10ce1aa4f993b1cc58f46e7049",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 12963,
        "upload_time": "2021-12-29T13:36:47",
        "upload_time_iso_8601": "2021-12-29T13:36:47.718247Z",
        "url": "https://files.pythonhosted.org/packages/bb/81/3bb2b7e61ecd4dab0c533bf3267588b4110d0dff9295a11c05f020d10ab2/thcrypto-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07ac0af86b9050f8b9099f39a64d8ffe593a0f2250b0f5d62b59fa3e6959bcf5",
          "md5": "30c63ef35ed0289848bd92eaa648b027",
          "sha256": "9b24c20194206e4791ef1ee27d75097f22a791688eabc5361a4b4ab20ea4f11b"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.20-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30c63ef35ed0289848bd92eaa648b027",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 13006,
        "upload_time": "2022-10-19T21:46:30",
        "upload_time_iso_8601": "2022-10-19T21:46:30.185219Z",
        "url": "https://files.pythonhosted.org/packages/07/ac/0af86b9050f8b9099f39a64d8ffe593a0f2250b0f5d62b59fa3e6959bcf5/thcrypto-0.9.20-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "615aeb83e67fa22b6fe84a3323b292d946cb567db7ef56a2f3b1a38e17ae60fa",
          "md5": "0bfa9f6edcc919eecb90fbb28372e7fa",
          "sha256": "991cc5fa94da90c655b60714e0d24e2e9bf59189b4b080aa6eba7f95c8a1e23f"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.20.tar.gz",
        "has_sig": false,
        "md5_digest": "0bfa9f6edcc919eecb90fbb28372e7fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 13141,
        "upload_time": "2022-10-19T21:46:31",
        "upload_time_iso_8601": "2022-10-19T21:46:31.847958Z",
        "url": "https://files.pythonhosted.org/packages/61/5a/eb83e67fa22b6fe84a3323b292d946cb567db7ef56a2f3b1a38e17ae60fa/thcrypto-0.9.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a40a553f3921cd854eaaec5d1bd99452ca7da679a838aa4786b3d648975f956e",
          "md5": "9628c798627899251b29ee5c6363d4ff",
          "sha256": "82970a4d70e5e5148b768f93440793b5fbd1c7342de36d7ffaeb9992758c0a5f"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9628c798627899251b29ee5c6363d4ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 12524,
        "upload_time": "2022-12-15T10:50:42",
        "upload_time_iso_8601": "2022-12-15T10:50:42.029847Z",
        "url": "https://files.pythonhosted.org/packages/a4/0a/553f3921cd854eaaec5d1bd99452ca7da679a838aa4786b3d648975f956e/thcrypto-0.9.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0a3ef14fe739fe809292144730d9b5c16aee2b8120355758cf6c760206bd384",
          "md5": "594c55c4cc166e10d4ca0338f4d51439",
          "sha256": "25e686b20dbe5daef4ff9ec69a27aee40844d72d9460334b5c1ecc09835b477d"
        },
        "downloads": -1,
        "filename": "thcrypto-0.9.21.tar.gz",
        "has_sig": false,
        "md5_digest": "594c55c4cc166e10d4ca0338f4d51439",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 12955,
        "upload_time": "2022-12-15T10:50:43",
        "upload_time_iso_8601": "2022-12-15T10:50:43.517645Z",
        "url": "https://files.pythonhosted.org/packages/e0/a3/ef14fe739fe809292144730d9b5c16aee2b8120355758cf6c760206bd384/thcrypto-0.9.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a40a553f3921cd854eaaec5d1bd99452ca7da679a838aa4786b3d648975f956e",
        "md5": "9628c798627899251b29ee5c6363d4ff",
        "sha256": "82970a4d70e5e5148b768f93440793b5fbd1c7342de36d7ffaeb9992758c0a5f"
      },
      "downloads": -1,
      "filename": "thcrypto-0.9.21-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9628c798627899251b29ee5c6363d4ff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 12524,
      "upload_time": "2022-12-15T10:50:42",
      "upload_time_iso_8601": "2022-12-15T10:50:42.029847Z",
      "url": "https://files.pythonhosted.org/packages/a4/0a/553f3921cd854eaaec5d1bd99452ca7da679a838aa4786b3d648975f956e/thcrypto-0.9.21-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0a3ef14fe739fe809292144730d9b5c16aee2b8120355758cf6c760206bd384",
        "md5": "594c55c4cc166e10d4ca0338f4d51439",
        "sha256": "25e686b20dbe5daef4ff9ec69a27aee40844d72d9460334b5c1ecc09835b477d"
      },
      "downloads": -1,
      "filename": "thcrypto-0.9.21.tar.gz",
      "has_sig": false,
      "md5_digest": "594c55c4cc166e10d4ca0338f4d51439",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 12955,
      "upload_time": "2022-12-15T10:50:43",
      "upload_time_iso_8601": "2022-12-15T10:50:43.517645Z",
      "url": "https://files.pythonhosted.org/packages/e0/a3/ef14fe739fe809292144730d9b5c16aee2b8120355758cf6c760206bd384/thcrypto-0.9.21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}