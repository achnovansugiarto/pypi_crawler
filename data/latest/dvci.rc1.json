{
  "info": {
    "author": "NKDuy",
    "author_email": "kn145660@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Documentation"
    ],
    "description": "# dvci\n## Installation\n\nLike most Python projects, dvci uses [setuptools][setuptools], so installation\nis what you might expect:\n\n```sh\npip install dvci\n```\n\nOnce you've installed dvci, you might also want to set up shell-completion for\nit. If you have [shtab][shtab] installed, you can do this with\n`dvci generate-completion`, which will print the shell-completion code for your\nshell. For more details on how to set this up, consult shtab's\n[documentation][shtab-setup].\n\n## Usage\n\n### Initialization\n\nBefore using dvci for the first time, you may want to add the dvci plugin\nto your `docums.yml` file. This plugin is added by default when building your\ndocumentation with dvci, but by adding it explicitly, you can configure how it\nworks. The plugin adds a version selector to supported themes as well as\nupdating the `site_url` (if you set it) to point to the version of the docs that\nare being built:\n\n```yaml\nplugins:\n  - dvci:\n      # these fields are all optional; the defaults are as below...\n      version_selector: true   # set to false to leave out the version selector\n      css_dir: css             # the directory to put the version selector's CSS\n      javascript_dir: js       # the directory to put the version selector's JS\n      canonical_version: null  # the version for <link rel=\"canonical\">; `null`\n                               # uses the version specified via `dvci deploy`\n```\n\nNote: If you have existing documentation on your `gh-pages` branch, you may also\nwant to delete the old documentation before building your new versioned docs via\n[`dvci delete --all`](#deleting-docs).)\n\n### Building Your Docs\n\ndvci is designed to produce one version of your docs at a time. That way, you\ncan easily deploy a new version without touching any older versions of your\ndocs; this can be especially important if your old docs are no longer buildable\nwith the newest version of Docums (or if they weren't built with Docums at\nall!). To deploy the current version of your docs, simply run:\n\n```sh\ndvci deploy [version]\n```\n\nWhere `[version]` is the current version of your project, represented however\nyou like (I recommend using `[major].[minor]` and excluding the patch\nnumber). You can also pass aliases to the `deploy` command to host a\nparticularly-relevant version of your docs somewhere special (e.g. `latest`):\n\n```sh\ndvci deploy [version] [alias]...\n```\n\nIf `[version]` already exists, this command will *also* update all of the\npre-existing aliases for it. Normally, if an alias specified on the command line\nis already associated with another version, this will return an error. If you\n*do* want to move an alias from another version to this version (e.g. when\nreleasing a new version and updating the `latest` alias to point to this new\nversion), you can pass `-u`/`--update-aliases` to allow this.\n\nBy default, aliases create a simple HTML redirect to the real version of the\ndocs; to create a copy of the docs for each alias, you can pass `--no-redirect`.\nIf you're using redirects, you can customize the redirect template with\n`-T`/`--template`; this takes a path to a [Jinja][jinja] template that accepts\nan `{{href}}` variable.\n\nIf you'd like to specify a title for this version that doesn't match the version\nstring, you can pass `-t TITLE`/`--title=TITLE` as well.\n\nIn addition, you can specify where to deploy your docs via `-b`/`--branch`,\n`-r`/`--remote`, and `--prefix`, specifying the branch, remote, and directory\nprefix within the branch, respectively. Finally, to push your docs to a remote\nbranch, simply add `-p`/`--push` to your command.\n\n### Viewing Your Docs\n\nTo test that your docs have been built as expected, you can serve them locally\nfrom a dev server:\n\n```sh\ndvci serve\n```\n\nBy default, this serves the docs on `http://localhost:8000`, but you can\nchange this with `-a`/`--dev-addr`. Remember though, *this is for testing only*.\nTo host your docs for real, you should use a real web server.\n\n### Deleting Docs\n\nSometimes you need to delete an old version of your docs, either because you\nmade a mistake or you're pruning unsupported versions. You can do this via the\n`delete` subcommand:\n\n```sh\ndvci delete [version-or-alias]...\n```\n\nIf `version-or-alias` is a version, this will delete the version and all its\naliases from the branch; if it's an alias, it will only delete that alias.\n\nIf you'd like to *completely* wipe the contents of your docs branch, just run\n`dvci delete --all`. Like `deploy` above, you can specify `--branch`, `--push`,\netc to control how the commit is handled.\n\n### Listing Docs\n\nIf you ever need to see the list of all currently-deployed doc versions, you can\nrun:\n\n```sh\ndvci list\n```\n\nTo list the info for a particular version, you can just pass the version or\nalias:\n\n```sh\ndvci list [version-or-alias]\n```\n\nSometimes, you need this information to be consumed by another tool. In that\ncase, pass `-j`/`--json` to return the list of doc versions as JSON.\n\n### Setting the Default Version\n\nWith all the versions of docs you have, you may want to set a *default* version\nso that people going to the root of your site are redirected to the latest\nversion of the docs:\n\n```sh\ndvci set-default [version-or-alias]\n```\n\nIf you want to use a different template from the default, you can pass\n`-T`/`--template`; this takes a path to a [Jinja][jinja] template that accepts\nan `{{href}}` variable.\n\nLike `deploy` and `delete` above, you can specify `--branch`, `--push`,\netc to control how the commit is handled.\n\n### Changing a Version's Title\n\nAs you update your docs, you may want to change the title of a particular\nversion. For example, your `1.0` docs might have the title `1.0.0`, and when you\nrelease a new patch, you want to update the title to `1.0.1`. You can do this\nwith the `retitle` command:\n\n```sh\ndvci retitle [version-or-alias] [title]\n```\n\nAs with other commands that change your docs, you can specify `--branch`,\n`--push`, etc to control how the commit is handled.\n\n### Adding a New Version Alias\n\nSometimes, you might need to add a new alias for a version without rebuilding\nyour documentation. You can use the `alias` command for this:\n\n```sh\ndvci alias [version-or-alias] [alias]...\n```\n\nAs with `deploy`, you can pass `-u`/`--update-aliases` to change where an\nexisting alias points to.\n\nOnce again, you can specify `--branch`, `--push`, etc to control how the commit\nis handled.\n\n### More Details\n\nFor more details on the available options, consult the `--help` command for\ndvci.\n\n## Staying in Sync\n\ndvci will do its best to stay in-sync with your remote repository and will\nautomatically update your local branch to match the remote's if possible (note\nthat dvci *won't* automatically `git fetch` anything). If your local branch has\ndiverged from your remote, dvci will leave it as-is and ask you what to do. To\nignore the remote's state, just pass `--ignore`; to update to the remote's\nstate, pass `--rebase`.\n\n## `CNAME` (and Other Special Files)\n\nSome special files that you'd like to deploy along with your documentation (such\nas `CNAME`) aren't related to a particular version of the docs, and instead need\nto go in the root directory of your site. There's no special handling for this\nin dvci, but since your built docs live on a Git branch, it's still easy to\nmanage: check out your `gh-pages` branch (or wherever your built docs\nlive), and commit the necessary files to the root directory.\n\n## Deploying via CI\n\nSince dvci just generates commits to an ordinary Git branch, it should work\nsmoothly with your favorite CI system. However, you should keep in mind that\nsome CI systems make shallow clones of your repository, meaning that the CI job\nwon't have a local instance of your documentation branch to commit to. This will\nnaturally cause issues when trying to push the commit. This is easy to resolve\nthough; just manually fetch your `gh-pages` branch (or whichever you deploy to)\nbefore running dvci:\n\n```sh\ngit fetch origin gh-pages --depth=1\n```\n\nYou may also need to [configure a Git user][gh-action-commit] so that dvci can\nmake commits:\n\n```sh\ngit config user.name ci-bot\ngit config user.email ci-bot@example.com\n```\n\n## For Theme Authors\n\nIf you'd like to provide support for dvci in your theme, you just need to\nfetch `versions.json` and build a version selector. `versions.json` looks like\nthis:\n\n```js\n[\n  {\"version\": \"1.0\", \"title\": \"1.0.1\", \"aliases\": [\"latest\"]},\n  {\"version\": \"0.9\", \"title\": \"0.9\", \"aliases\": []}\n]\n```\n\nIf you're creating a third-party extension to an existing theme, you add a\nsetuptools entry point for `dvci.themes` pointing to a Python submodule that\ncontains `css/` and `js/` subdirectories containing the extra code to be\ninstalled into the user's documentation. This will then automatically be\nincluded via the `dvci` plugin in the user's `docums.yml` file.\n\nTo see some examples of how to work with this, check the\n[`dvci/themes/docums`](dvci/themes/docums) directory.\n\n## License\n\nThis project is licensed under the [BSD 3-clause license](LICENSE).\n\n[setuptools]: https://pythonhosted.org/setuptools/\n[shtab]: https://github.com/iterative/shtab\n[shtab-setup]: https://github.com/iterative/shtab#cli-usage\n[jinja]: https://jinja.palletsprojects.com/\n[gh-action-commit]: https://github.com/actions/checkout#push-a-commit-using-the-built-in-token",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/khanhduy1407/dvci",
    "keywords": "docums multiple versions",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dvci",
    "package_url": "https://pypi.org/project/dvci/",
    "platform": "",
    "project_url": "https://pypi.org/project/dvci/",
    "project_urls": {
      "Homepage": "https://github.com/khanhduy1407/dvci"
    },
    "release_url": "https://pypi.org/project/dvci/1.2.0.dev0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Manage multiple versions of your Docums-powered documentation",
    "version": "1.2.0.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12800690,
  "releases": {
    "1.2.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46ed38da1c0c39a6bab0db0011ad0efdb4a0577eb98a6e571655c854d66bcf77",
          "md5": "bc32cb7f64ce347455e527a13dd3b6bd",
          "sha256": "d113780623c7b4acabd98fbf6c982e4904a9e85d792e6b1b3337f8dde2328c68"
        },
        "downloads": -1,
        "filename": "dvci-1.2.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc32cb7f64ce347455e527a13dd3b6bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24859,
        "upload_time": "2022-02-06T07:06:16",
        "upload_time_iso_8601": "2022-02-06T07:06:16.128732Z",
        "url": "https://files.pythonhosted.org/packages/46/ed/38da1c0c39a6bab0db0011ad0efdb4a0577eb98a6e571655c854d66bcf77/dvci-1.2.0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46ed38da1c0c39a6bab0db0011ad0efdb4a0577eb98a6e571655c854d66bcf77",
        "md5": "bc32cb7f64ce347455e527a13dd3b6bd",
        "sha256": "d113780623c7b4acabd98fbf6c982e4904a9e85d792e6b1b3337f8dde2328c68"
      },
      "downloads": -1,
      "filename": "dvci-1.2.0.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "bc32cb7f64ce347455e527a13dd3b6bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24859,
      "upload_time": "2022-02-06T07:06:16",
      "upload_time_iso_8601": "2022-02-06T07:06:16.128732Z",
      "url": "https://files.pythonhosted.org/packages/46/ed/38da1c0c39a6bab0db0011ad0efdb4a0577eb98a6e571655c854d66bcf77/dvci-1.2.0.dev0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}