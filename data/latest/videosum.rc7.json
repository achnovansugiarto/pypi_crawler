{
  "info": {
    "author": "Luis C. Garcia-Peraza Herrera",
    "author_email": "luiscarlos.gph@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Description\n-----------\nCode for the `videosum` Python package. Given a video file, this package produces a single-image storyboard that summarises the video.\n\n\nInstall dependencies\n--------------------\n* Ubuntu/Debian:\n```\n$ sudo apt install ffmpeg\n```\n\nInstall with pip\n----------------\n```\n$ python3 -m pip install videosum --user\n```\n\n\nInstall from source\n-------------------\n```\n$ python3 setup.py install --user\n```\n\n\nRun video summarisation on a single video\n-----------------------------------------\n```\n$ python3 -m videosum.run --input video.mp4 --output collage.jpg --nframes 100 --height 1080 --width 1920 --algo time\n```\nOptions:\n  * `--input`: path to the input video file.\n  * `--output`: path where the output collage will be saved.\n  * `--nframes`: number of frames that you want to see in the collage image.\n  * `--height`: height of the collage image.\n  * `--width`: width of the collage image.\n  * `--time-segmentation`: set it to either `0` or `1`. If 1, the clustering results are displayed in a bar underneath the collage (i.e. the columns of the bar represent the frames of the video, and the colours represent the clustering label).\n  * `--fps`: number of frames you want to read per second of video, used to downsample the input video and have less frames to describe and cluster.\n  * `--time-smoothing`: weight in the range `[0.0, 1.0]` that regulates the importance of time for clustering frames. A higher weight will result in a segmentation of frames over time closer to that of the `time` method.\n  * `--processes`: number of processes to use when summarising a folder of videos.\n  * `--metric`: set it to True if you want to compute the [Frechet Inception Distance](https://en.wikipedia.org/wiki/Fr%C3%A9chet_inception_distance) between the frames in the summary and the frames in the original video.\n  * `--algo`: algorithm used to select the key frames of the video.\n    * `time`: evenly spaced frames are selected.\n    * `inception`: k-medoids clustering (l2-norm metric) on InceptionV3 latent space vectors.\n    * `uid`: in order to compute the distance between two images their InceptionV3 latent space vectors are computed, a univariate Gaussian is estimated for each of the two latent vectors, and the 2-Wasserstein distance is computed between the two Gaussians and used as clustering metric for k-medoids. `uid` stands for Univariate Inception Distance.\n    <!-- k-medoids clustering on 2-Wasserstein distances computed between univariate Gaussians estimated from the ([Frechet Inception Distance](https://en.wikipedia.org/wiki/Fr%C3%A9chet_inception_distance) metric) on InceptionV3 latent space vectors.-->\n    * `scda`: k-medoids clustering (l2-norm metric) on SCDA image descriptors ([Wei et al. 2017 Selective Convolutional Descriptor Aggregation for Fine-Grained Image Retrieval](https://arxiv.org/abs/1604.04994)). In this package we use InceptionV3 as opposed to VGG-16, which was the model used by Wei et al.\n\n\nRun video summarisation on multiple videos\n------------------------------------------\n\nPointing the command line parameter `-i` or `--input` to a folder of videos is enough. In this case, the path indicated by `-o` or `--output` will be used as output folder, each video summary will have the same filename as the video but a `.jpg` file extension. \n\nThe parameter `--processes` allows you to select the number of videos to summarise in parallel. This is necessary because some of the summarisation methods use GPU memory, which is typically a limiting factor. If the number of processes is too high you might get a CUDA out of memory error.\n\n```bash\n$ python3 -m videosum.run -i <input_folder> -o <output_folder> -n 16 --width 1920 --height 1080 -a inception --fps 1 --time-segmentation 1 --processes 5\n```\n\n\nExemplary code snippet\n----------------------\n```python\nimport cv2\nimport videosum\n\n# Choose the number of frames you want in the summary\nnframes = 100\n\n# Choose the dimensions of the collage\nwidtth = 1920\nheight = 1080\n\n# Choose the algotrithm that selects the key frames\nalgo = 'inception'  # The options are: 'time', 'inception', 'uid', 'scda'\n\n# Create video summariser object\nvs = videosum.VideoSummariser(algo, nframes, width, height)\n\n# Create collage image\nim = vs.summarise('video.mp4')\n\n# Save collage to file\ncv2.imwrite('collage.jpg', im)\n\n# Retrieve a list of Numpy/OpenCV BGR images corresponding to the key frames of the video\nkey_frames = vs.get_key_frames('video.mp4')       \n\n# Print the video frame indices of the key frames, available after calling summarise() or get_key_frames()\nprint(vs.indices_)\n\n# Print the video frame cluster labels, available after calling summarise() or get_key_frames()\nprint(vs.labels_)\n```\n\n\nExemplary result\n----------------\n\nThe storyboards have a bar underneath that is produced when the `--time-segmentation 1` option is passed. \nThis bar shows how frames have been clustered over time, with a colour for each cluster, and black vertical lines representing the key frames.\n\n* Exemplary video: [here](https://raw.githubusercontent.com/luiscarlosgph/videosum/main/test/data/video.mp4)\n\n* Summary based on `time` algorithm: \n\n```\n$ python3 -m videosum.run --input test/data/video.mp4 --output test/data/time.jpg --nframes 16 --height 1080 --width 1920 --algo time --time-segmentation 1\n```\n\n![](https://github.com/luiscarlosgph/videosum/blob/main/test/data/time.jpg) \n\n* Summary based on `inception` algorithm:\n\n```\n$ python3 -m videosum.run --input test/data/video.mp4 --output test/data/inception.jpg --nframes 16 --height 1080 --width 1920 --algo inception --time-segmentation 1\n```\n\n![](https://github.com/luiscarlosgph/videosum/blob/main/test/data/inception.jpg) \n\n* Summary based on `uid` algorithm:\n\n```\n$ python3 -m videosum.run --input test/data/video.mp4 --output test/data/uid.jpg --nframes 16 --height 1080 --width 1920 --algo uid --time-segmentation 1\n```\n\n![](https://github.com/luiscarlosgph/videosum/blob/main/test/data/uid.jpg) \n\n* Summary based on `scda` algorithm:\n\n```\n$ python3 -m videosum.run --input test/data/video.mp4 --output test/data/scda.jpg --nframes 16 --height 1080 --width 1920 --algo scda --time-segmentation 1\n```\n\n![](https://github.com/luiscarlosgph/videosum/blob/main/test/data/scda.jpg) \n\n\nRun unit testing\n----------------\n\n```\n$ python3 setup.py test\n```\n\n\nRun timing script\n-----------------\n\n```bash\n$ python3 -m videosum.timing \n```\n\n| Method | Time for a 1h video sampled at 1fps |\n| ------ | ----------------------------------- |\n| time       | 13s |\n| inception  | 86s |\n| uid        | 216s |\n| scda       | 74s |\n\n\nUse this package as an unsupervised spatial feature extractor\n-------------------------------------------------------------\n\nIf you have 2D RGB images and you want to obtain a feature vector for them, you can do so like this:\n\n1. Install `videosum` Python package:\n   ```\n   $ pip install videosum --user\n   ```\n\n2. Extract feature vectors for your images:\n   ```python\n   import cv2\n   import videosum\n\n   # Read a BGR image from file\n   im = cv2.imread('test/data/test_time.png', cv2.IMREAD_UNCHANGED)\n\n   # Extract latent space spatial feature vector for the image\n   model = videosum.InceptionFeatureExtractor('vector')\n   vec = model.get_latent_feature_vector(im)  # Here you can pass an image (H, W, 3) or a batch of images (B, H, W, 3)\n\n   # Print vector dimensions\n   print(vec)\n   print('Shape:', vec.shape)\n   ```\n\n   The output:\n\n   ```python\n   [0.34318596 0.11794803 0.04767929 ... 0.09731872 0.         1.1942172 ]\n   Shape: (2048,)\n   ```\n\n\nAuthor\n------\nLuis Carlos Garcia Peraza Herrera (luiscarlos.gph@gmail.com), 2022-2023.\n\n\nLicense\n-------\n\nThis code repository is shared under an [MIT license](https://github.com/luiscarlosgph/videosum/blob/main/LICENSE).\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/luiscarlosgph/endoseg",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "videosum",
    "package_url": "https://pypi.org/project/videosum/",
    "platform": null,
    "project_url": "https://pypi.org/project/videosum/",
    "project_urls": {
      "Homepage": "https://github.com/luiscarlosgph/endoseg"
    },
    "release_url": "https://pypi.org/project/videosum/0.0.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python module to summarise a video into a collage.",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16945511,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a90b0b8140d7f9b9b63f2922d14018f44ebf610d425c9f536fa76ea840963405",
          "md5": "8f6d62a8d1e32d6208c4192d3d12bbce",
          "sha256": "54edb330c1ed37bbf3a080c1bef40f6f1be3c74f0b3e763b52261d0a37b6e560"
        },
        "downloads": -1,
        "filename": "videosum-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8f6d62a8d1e32d6208c4192d3d12bbce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4806,
        "upload_time": "2022-06-07T12:23:52",
        "upload_time_iso_8601": "2022-06-07T12:23:52.040885Z",
        "url": "https://files.pythonhosted.org/packages/a9/0b/0b8140d7f9b9b63f2922d14018f44ebf610d425c9f536fa76ea840963405/videosum-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0313312ce3e5d9e148b177d7503497c2fa002e6706b560848dea914f4285e8de",
          "md5": "391810d9c23bbad37502083521929606",
          "sha256": "08ae329bfa550bbce3e2e071bf597ac51205dad2a2967f355ea6be5e9d40a83d"
        },
        "downloads": -1,
        "filename": "videosum-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "391810d9c23bbad37502083521929606",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11006,
        "upload_time": "2022-07-22T16:31:04",
        "upload_time_iso_8601": "2022-07-22T16:31:04.786837Z",
        "url": "https://files.pythonhosted.org/packages/03/13/312ce3e5d9e148b177d7503497c2fa002e6706b560848dea914f4285e8de/videosum-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8605a22139a3fa1a4b22ff3d4fdcd8c9496e44d23b7f6ed20d38c0cce63d77f2",
          "md5": "0704304671cd9a23a5f00c99cdce6278",
          "sha256": "24adc442673f0d832d01e7b3586143158debe49b223c2fec51ca096890dd290b"
        },
        "downloads": -1,
        "filename": "videosum-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0704304671cd9a23a5f00c99cdce6278",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12722,
        "upload_time": "2022-08-01T17:58:05",
        "upload_time_iso_8601": "2022-08-01T17:58:05.736885Z",
        "url": "https://files.pythonhosted.org/packages/86/05/a22139a3fa1a4b22ff3d4fdcd8c9496e44d23b7f6ed20d38c0cce63d77f2/videosum-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "854139791603bd560298b8e8d0f0f0727106807392efa1a1acbc66a7ddc41718",
          "md5": "02ff25e2618ae7e68a80f2358702b51a",
          "sha256": "46b25996572f3544519c0987bea61f073418f1c9b8f64a5bd1f4be835867335b"
        },
        "downloads": -1,
        "filename": "videosum-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "02ff25e2618ae7e68a80f2358702b51a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20482,
        "upload_time": "2022-12-07T12:19:36",
        "upload_time_iso_8601": "2022-12-07T12:19:36.003256Z",
        "url": "https://files.pythonhosted.org/packages/85/41/39791603bd560298b8e8d0f0f0727106807392efa1a1acbc66a7ddc41718/videosum-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04775bbe7d175bc3a8186461bad565e6cba573c5134507ff111db4d49b50cc79",
          "md5": "927e6b9e1e0b0d511af0762cdf3c3ffc",
          "sha256": "99770116aa406960dd5d12a217b318a53ab9dea7e8d05a9c604613aa310e3613"
        },
        "downloads": -1,
        "filename": "videosum-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "927e6b9e1e0b0d511af0762cdf3c3ffc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21352,
        "upload_time": "2022-12-14T15:29:29",
        "upload_time_iso_8601": "2022-12-14T15:29:29.172357Z",
        "url": "https://files.pythonhosted.org/packages/04/77/5bbe7d175bc3a8186461bad565e6cba573c5134507ff111db4d49b50cc79/videosum-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7d62b5e92fbd3e628cdbd1716073ca6735790eceb2d38d5656869f68a7b885a",
          "md5": "7674dc02d69d6636fbd7ac81cdd841c3",
          "sha256": "529d4bf084af606aa5fe63f298e14ef2d8f7837f257e55c9b8cbaaaa07d56786"
        },
        "downloads": -1,
        "filename": "videosum-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "7674dc02d69d6636fbd7ac81cdd841c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22916,
        "upload_time": "2023-02-10T15:07:30",
        "upload_time_iso_8601": "2023-02-10T15:07:30.814244Z",
        "url": "https://files.pythonhosted.org/packages/e7/d6/2b5e92fbd3e628cdbd1716073ca6735790eceb2d38d5656869f68a7b885a/videosum-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28346cd29dbd01cb777f178c1d2a7799f322e89aed229e6de4433cc28fa29b03",
          "md5": "f56cc5a99d301ef4edff268df1528b42",
          "sha256": "25c90ed33d0f987b9ba95b580d242471f0fd892310d147c32c6fa2721d2c3e22"
        },
        "downloads": -1,
        "filename": "videosum-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f56cc5a99d301ef4edff268df1528b42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25778,
        "upload_time": "2023-02-20T16:10:53",
        "upload_time_iso_8601": "2023-02-20T16:10:53.830521Z",
        "url": "https://files.pythonhosted.org/packages/28/34/6cd29dbd01cb777f178c1d2a7799f322e89aed229e6de4433cc28fa29b03/videosum-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28346cd29dbd01cb777f178c1d2a7799f322e89aed229e6de4433cc28fa29b03",
        "md5": "f56cc5a99d301ef4edff268df1528b42",
        "sha256": "25c90ed33d0f987b9ba95b580d242471f0fd892310d147c32c6fa2721d2c3e22"
      },
      "downloads": -1,
      "filename": "videosum-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "f56cc5a99d301ef4edff268df1528b42",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25778,
      "upload_time": "2023-02-20T16:10:53",
      "upload_time_iso_8601": "2023-02-20T16:10:53.830521Z",
      "url": "https://files.pythonhosted.org/packages/28/34/6cd29dbd01cb777f178c1d2a7799f322e89aed229e6de4433cc28fa29b03/videosum-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}