{
  "info": {
    "author": "Neongecko",
    "author_email": "developers@neon.ai",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# <img src='https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png' card_color=\"#FF8600\" width=\"50\" style=\"vertical-align:bottom\"> Custom Conversations\n\nCreate your own or use text script files shared by other users.\n\n## Description\nSkill, which works using the custom text parsing implementation, provides the functionality to create, share, modify, and use any script files obtained from the shared library.\n\n## Examples\n* \"Tell me available script files\"\n* \"What scripts are available\"\n* \"Update my conversations\"\n* \"Update my skill files\"\n* \"Set my startup script to\"\n\n## Credits\n[reginaneon](https://github.com/reginaneon)\n[NeonDaniel](https://github.com/neondaniel)\n[neongeckocom](https://neongecko.com/)\n\n## Category\n**Configuration**\n\n## Tags\n#NeonAI\n#NeonGecko Original\n#CustomConversations\n#Custom\n\n## How to Use\n\nScripts update automatically when Neon is started; you can start a script by saying:\n    \n- Run my (script name) skill file\n    \nIf the script has any synonyms specified, you may also use a synonym to start the script.\n\nIf the script has any defined [tags](#tag), you can start the script at the tag by saying:\n    \n- Run my (script name) skill file at (tag name)\n\nYou may also update scripts:\n\n- Update my scripts\n\nYou can request an emailed copy of a script:\n    \n- Email me my (script name) script\n\n## What are scripts?  \nScripts are user-constructed text files that contain various Neon commands. \nUsing a few simple keywords, described below in the detail, you can specify exactly what Neon should say, do, repeat, \nand answer; you can create new dialogs, routines, loops, and query lookups, while utilizing every skill, \nYAML variable, and other information that Neon knows.   \n  \n\nFor example:  \n  \n    Script: \"Demo Hello World Input\"\n    Variable: input\n    Neon speak: \"Hello World. Say anything or exit\"\n    voice_input(input)\n    Neon speak: \"you said {input}\"\n    Exit\n    \nScripts are easily sharable between other users via the Neongecko Scripts Library. You can submit your script there to \nshare with all the other Neon users.\n\nYou can also find various demo scripts there if you need somewhere to start or something to reference.\n\n## Script Syntax\nCommand syntax in general includes a Command and some command arguments, in the form:\n\n    Command: argument1, argument2\n    \nMultiple lines may be assigned to the same command if they are indented 4 spaces from the command declaration. An example\nof this with multiple spoken lines is:\n\n    Neon Speak: \"This is the first line I will speak.\"\n        \"I will also speak this line!\"\n        \nParentheses are used for some commands to accept parameters, for example voice_input:\n\n    voice_input(var_to_fill)\n    \nBraces are used to return variable values within a literal string, for example in a speak statement:\n\n    Neon Speak: \"You said: {var_to_fill}\"\n\n## Starting a Script File\nScripts must begin with a `Script: ` line containing the script name and then any optional \n[Variable](#variable), [Claps](#claps), [Language](#language), and [Synonym](#synonym) lines.\n\nNOTE: a script name should match the name of the script file. The dot (\".\") is not a valid character\nto include in the script name and should be avoided.\n\nAfter this, you can continue with any of the other script commands. It is recommended to include a \n[Neon Speak](#neon-speak) statement to tell the user what they can do/how to proceed prior to requesting any \n[user input](#voice_input).\n\n    Script: \"Demo Weather Time Population\"\n    Description: \"A Simple example script that can offer the weather, time, and population of different locations.\"\n    Author: Neongecko\n    Language: en-au, female\n    Variable: response\n    Synonym: \"WTP\"\n\n\n#### Language\nThis sets the language Neon will use for script responses while the script is active. This will not affect a user's \nprofile or responses they get from Neon outside of the script. The valid language codes are:\n\nzh-zh, da-dk, nl-nl, en-au, en-gb, en-in, en-us, en-gb-wls, fr-fr, fr-ca, de-de, hi-in, is-is, it-it, ja-jp, ko-kr, nb-no,\npl-pl, pt-br, pt-pt, ro-ro, ru-ru, es-es, es-mx, es-us, sv-se, tr-tr, cy-gb, cmn\n\nAny of the above language codes may also be used without the region code (i.e. \"en\" is equivalent to \"en-us\"). \"male\" or \n\"female\" may also be specified either before or after the language code; the default gender is \"female\".\n\n    Language: en-us, female\n\n#### Description\nThis is an optional short description of the script.\n\n#### Author\nThis is an optional author credit.\n\n#### Timeout\nThis is an optional parameter to handle situations where a user hasn't responded for a specified period of time. The first \nargument is the duration in seconds to wait for a response (max 3600). The second parameter is interpreted as a [goto](#goto) \nand can be a line number or tag.\n\nGo to the named tag \"example\" after 10 seconds of inactivity:\n```\nTimeout: 10, example\n...\n@example\n# Code here will be executed after 10 seconds of inactivity\n```\n\nGo to line 7 after 30 seconds of inactivity:\n```\nTimeout: 30, 7\n...\nNeon speak: Are you still there?  # If this is line 7 of the script file, this is spoken after 30s of inactivity\n```\n\n#### Variable\nA variety of parameters to be used later in the script. Can be preset or empty. All variables will be saved as a list\nwith the most recent value at index 0 and previous values appended. [table_scrape](#table_scrape) \nwill build a dictionary of named links as options and save that at the front of the list. Variables\nmay occupy more than one line; subsequent lines should be indented from the `Variable:` line. Variables used for \n[simple word substitutions](#sub_values) will contain pairs of strings where each pair is separated by a comma. \nVariables used for [conversational responses](#sub_key) will contain multiple quoted string sets with each set \nseparated by a comma. \n\nSimple Variable declarations:\n```\n    Variable: from_units\n    Variable: conversions = weight, volume, length, time, currency\n    Variable: options = table_scrape(https://www.neongecko.com/demos)\n```\nWord Substitutions:\n```\nVariable: input_sub = dont don't,\n    cant can't,\n    wont won't,\n    recollect remember\n```\nConversational Responses:\n```\nVariable: key_sub = \"[sorry] for *\" \"Please don't apologize about *\" \"No need to apologize about *\",\n    \"i remember when {1} said {2}\" \"Do I think of {1} or {2} often?\",\n    \"*\" \"I don't understand. Please elaborate.\" \" What do you mean by *?\"\n```\n#### Synonym\nSpecifies a phrase that can be used to start this skill file. After the script is run the first time, the synonym will \nbe added to the user's synonyms. After this, the synonym can be used to run the script. For example: \n\n    Case: \"Run My TPW Skill File\"  \n    Synonym: \"T P W 2\"\n\n#### Claps\nThe number of claps that should be associated with a command while the script is active.\n\n    Claps: 2, \"what time is it\"  \n\n## Script Keywords and Spacing\nNeon scripts follow the Python convention of 4 spaces to indent subordinate lines. A line without a command will be considered\na subordinate of the previous line that has one fewer indent; for example, all of the lines below after `Neon speak:` \nwould be spoken:\n\n    Neon speak:\n        \"Say 1 or World Times for world times\"\n        \"Say 2 or World Weather for world weather\"\n        \"Say 3 or World Populations for world populations\" \n\nThere are multiple keywords available and new ones are added frequently. The current list, starting with the core example above:\n\n#### Neon speak\nHave Neon say something. A single line to speak can be on the same line as `Neon speak:`. If multiple lines \nare to be spoken, they should follow `Neon speak:` and be indented. SSML is supported in `Neon speak` and `Name speak` \ncommands if they are supported by the selected TTS engine. Examples of ssml supported by Amazon Polly can be found \n[here](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html).\n\n```\nNeon speak: \"Hello World. Say anything or exit\"\n```\n```\nNeon speak:\n    \"Say 1 or World Times for world times\"\n    \"Say 2 or World Weather for world weather\"\n    \"Say 3 or World Populations for world populations\"\n```\n\n#### Name speak\nHave Neon say something with the specified name. Name is required, gender and language may optionally be specified \nas comma-separated parameters. If one of gender or language are specified, the other will use the user's profile setting \nor script setting if available. SSML is supported in `Neon speak` and `Name speak` \ncommands if they are supported by the selected TTS engine. Examples of ssml supported by Amazon Polly can be found \n[here](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html). SSML is supported in `Neon speak` and `Name speak` \ncommands if they are supported by the selected TTS engine. Examples of ssml supported by Amazon Polly can be found \n[here](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html).\n\n```\nName Speak: Nobody, \"Or I can speak as someone else.\"\n```\n```\nName Speak: Slow Male, male, \"<prosody volume=\"-2dB\" rate=\"x-slow\" pitch=\"x-low\">I can be quiet, slow, and deep</prosody>\"\n```\n```\nName Speak: English Male, male, en-us, \"<prosody volume=\"-2dB\" rate=\"x-slow\" pitch=\"x-low\">I can be quiet, slow, and deep</prosody>\"\n```\n\n#### Reconvey\nReconvey can be used in two ways: one in which a user's prior input to the script is used, and another in which specified\naudio files are played back.\n\nIn the first method, Neon plays back a user's original audio input (if available) \nand prints the transcription. The last value of the passed variable is used with the last audio_file available for that \nvariable. No Text-To-Speech will be generated, so nothing will be played if there is no input audio to use.\n\n*Note: The variable named should not be enclosed in braces unless its value is the name of the variable to be spoken* \n```\nvoice_input(var_to_use)\n\n...\n\nReconvey: var_to_use\n```\n\nIn the second method, a quoted text string or variable is provided along with a specified audio file. The audio file may be a \npublic URL, an absolute path to a local file, or the filename of a file saved in `script_audio/{script title}/` within \nthe skill directory.\n```\nReconvey: var_to_use, \"https://my_website/files/audio_to_play.mp3\"\n```\n```\nReconvey: \"This literal will be printed\", \"audio_file_in_script_directory.wav\"\n```\n```\nReconvey: \"Literal to print\", \"~/Music/audio-file.mp3\"\n```\n\n#### Execute \nString to be executed as if spoken by a user. A single line to execute can be on the same line as `Execute:`. \nIf multiple lines are to be executed, they should follow `Execute:` and be indented. When a string is executed, Neon \nwill wait several seconds for a response before continuing. *Any commands will be executed as if a wake word was heard,\nso \"Neon\" is not required in front of any commands*.\n\n```\nExecute: \"What time is it in Athens\"\n```\n\n```\nExecute:\n    \"translate cherry to russian\"\n    \"tell me my language setting\n    \"speak to me in english\n    \"speak to me in Russian and French\n    \"speak to me in english\n```\n\n#### Tag\nLines with `@` as the first non-whitespace character will be indexed as Goto tag lines. A tag line should be one word \nand contain only a string label.\n\n```\n@test_tag\n```\n\n####Goto\nCommand to go to the specified line or [tag](#tag) in the script. The argument to this command can be either a file line\nnumber (the line specified will be executed next) or a [tag](#tag) that is defined in the script (the line following the\ntag will be executed next). Tags may reference a line at any position in the file. *When writing a script with Goto \ncommands, avoid entering your script at [case](#case) option lines and consider where variables are set to avoid using\na variable before setting it (i.e. with [voice_input](#voice_input).*\n\n```\nGoto: test_tag\n```\n```\nGoto: 5\n```\n\n#### Comments\nLines with `#` as the first non-whitespace character will not be executed. Comment lines are useful for annotating a script\nor removing problematic lines when troubleshooting.\n(ex. you remove a line and leave a comment for why the line is commented out). Block comments are also allowed where \nblocks start and end with `\"\"\"`.\n\n```\n# Removed speak to troubleshoot voice_input\n    # Neon speak:\n    #     \"Say your first name or exit\" voice_input{first_name}\n```\n```\n\"\"\"\n    This is inside a block comment.\nYou can put in longer comment strings here, or surround a section of code\n\"\"\"\n```\n\n#### voice_input\nSpecifies when a variable needs to be filled with user input. If an optional list of options is provided, the script will \nwait for user input to match one of those options, otherwise the next user input will be used. Once the variable has \nbeen assigned a value, the script will continue at the following line. Variables will preserve a history of previous \nvalues in a list.\n*It is recommended that any voice_input follows a `Neon speak:` prompting the user to say something.*\n\n```\n    Variable: input\n    Neon speak: \"Hello World. Say anything or exit\"\n    voice_input(input)\n    Neon speak: \"you said {input}\"\n```\n```\n    Neon speak:\n        \"Say 1 or World Times for world times\"\n        \"Say 2 or World Weather for world weather\"\n        \"Say 3 or World Populations for world populations\"\n    voice_input(response)\n    Case {response}:\n```\n```\nVariable: selected\nVariable: conversions = weight, volume, length, time, currency\nNeon speak: \"Say convert {select_one(conversions)} to convert or exit when done\"\nvoice_input(selected,conversions)\n```\n\n#### If/Else\nIf statements can be used to evaluate variable values. If a comparator is not given, the variable will be evaluated as a \nboolean, where values of `0`, `false`, `none`, `null`, `no`, and `\"\"` are false and any other value is true. \nValid numeric comparators are: `>` ,`<`, `>=`, `<=`, `==`, `!=`.\nValid string/list comparators are: `CONTAINS`, `IN`, `STARTSWITH`, `ENDSWITH` and their inverses when prefixed with `!`\n (i.e. `!CONTAINS`). Variables may be compared to other variables \nor to static values. For string/list comparators, the first argument will be treated as a string, and the second\nwill be treated as a list of strings. \n`CONTAINS` returns true if the left value (string) contains any element the right value (list). \n`IN` returns true if an exact match of the left value (string) exists in the right value (list).\n`STARTSWITH` returns true if the left value (string) begins with any element in the right value (list).\n`ENDSWITH` returns true if the left value (string) ends with any element in the right value (list).\nStrings passed to numeric comparisons follow \n[Python3 rules](https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types).\n\n```\nVariable: {test}: \"False\"\n\nif {test}:\n    Neon speak: \"True\"\nelse:\n    Neon speak: \"False\"\n```\n\n```\nNeon speak: \"Say 'continue' to continue\"\nvoice_input{test}\n\nif {test} == \"continue\":\n    Neon speak: \"Okay, lets continue\"\nelse:\n    Neon speak: \"Okay, exiting.\"\n```\n\n```\nNeon speak: \"Say {conditional} to continue\"\nvoice_input(test)\n\nif {test} != {conditional}:\n    Neon speak: \"Not matched, exiting\"\n    Exit\nelse:\n    Neon speak: \"Okay, lets continue.\"\n\n```\n```\nif {input} CONTAINS \"help\":\n    # This block is executed if input contains the word 'help'\n```\n```\nif {input} CONTAINS help, assist, what:\n    # This block is executed if input contains any of the words: \"help\", \"assist\", \"what\"\n```\n#### Case\nCase statements can be used to execute different commands based on some variable value. Case statements often follow a \nvoice_input to assign a variable value, but may also use a variable that has already been defined. Case options should\nfollow the `Case:` line and be indented from that line by one. Commands to run if the case option is satisfied should be\nindented from that case option. A `Case:` will execute the first matched option and then continue at the next line \nfollowing the end of the case; if no option is matched, the script will go back to the voice_input line immediately \nbefore the case. Case options containing \"or\" will compare the Case variable against the string on either side of \"or\".\n\n```\nNeon speak:\n    \"Say A or Athens for Athens's time\"\n    \"Say B or Bombay for Bombay's time\"\n    \"Say S or Seattle for Seattle's time\"\nvoice_input(response)\nCase {response}:\n    \"A or Athens\"\n        Execute: \"What time is it in Athens\"\n    \"B or Bombay\"\n        Execute: \"What time is it in Bombay\"\n    \"S or Seattle\"\n        Execute: \"What time is it in Seattle\"\n# Script continues here\nExit\n```\n\n#### Python\nAny line of python 3 readable code will be executed in the order it was specified in the script file. These lines will \nexecute and then continue to the next line of the script; you may assign the output of a valid Python operation to a \nscript variable to use later in your script. The `time` module is available in addition to any builtin methods.\n\nCurrently, the following math operations are supported: `+`, `-`, `/`, `*`,\n`%` (modulus), `**` (power), `ln(x)`, `log(x)` (log base 10), `sqrt(x)`, and common trigonometry functions (sin, cos, \ntan, sinh, cosh, tanh, asin, acos, atan). The constants `e` and `pi` are also available.\n\n```\nPython: time.sleep(5)\n```\n```\nPython:\n    hypotenuse = sqrt({side_1}**2 + {side_2}**2)\n```\n\n#### Exit\nExit command to finish the script. Could be positioned anywhere in the document.\n*Note: your script should always exit somewhere, this is often simply on the last line and indented by 0.*\n\n    Exit  \n\n#### Loop\nLoops are defined by a starting line and an ending line with optional conditions. A loop begins where `LOOP` is declared \nwith a name and ends where a `LOOP END` or `LOOP UNTIL` line is reached. A loop can always be exited when the user says \n\"exit\", otherwise the loop will run until the `UNTIL` condition is met or indefinitely if no `UNTIL` condition is met.\nProvides familiar functionality as loops. Can be nested and combined with other statements. Positioned at the beginnings\nand end of a [Case](#case) statement. A loop is started with the keyword `LOOP` followed by a name and terminated by \nname with the keyword `END` as noted below.\n\nNo end condition defined, this loop will continue until the user says \"exit\".\n```\nLOOP WW\n    Neon speak:\n        \"Say A or Athens for the weather in Athens\"\n        \"Say B or Bombay for the weather in Bombay\"\n        \"Say S or Seattle for the weather in Seattle\"\n        \"Say exit to exit\"\n    voice_input(location)\n    Case {location}:\n        \"A or Athens\"\n            Execute: \"What is the weather in Athens\"\n            Neon speak: \"about to repeat A\"\n        ...\n     Neon speak:\n         \"End of loop WW.\"\nLOOP WW END\n```\n\n\nA loop until a specified variable has been filled in with the defined values:\n\n```\nLOOP WW\n    Neon speak:\n        \"Say A or Athens for the weather in Athens\"\n        \"Say B or Bombay for the weather in Bombay\"\n        \"Say S or Seattle for the weather in Seattle\"\n        \"Say exit to exit\"\n    voice_input(location)\n    Case {location}:\n        \"A or Athens\"\n            Execute: \"What is the weather in Athens\"\n            Neon speak: \"about to repeat A\"\n        ...\n     Neon speak:\n         \"End of loop WW.\"\nLOOP WW UNTIL location == \"b\"\n```\n\n#### Set\nYou may set variables equal to other variable values or static values with the keyword `Set` anywhere in a script. This \ncan be useful to save a variable value before modifying the variable.\n\n        Set: user_speech = {input}\n        \nIf this command is not indented from the previous line, it may be inferred\n\n        Neon Speak: \"Setting variable\"\n        user_speech = {input}\n\n#### Email\nYou may draft and send an email to the user running a script if their email is available. The title may be a quoted literal \nor a variable reference. The body may be a variable or a string literal.\n\n    Email: \"My Email Title\", variable_body\n\n#### Run\nYou may execute a different script from within your script. Users will be notified when the requested script is started \nor if a requested script isn't available. Upon exit from the script called via `Run`, the original script will resume at \nthe following line and continue normally. Variables from the calling script will be available to the called script if \nthat script does not have a variable of the same name defined or the variable is defined with no value.\nWhen the original script is resumed, any defined variables are restored to the same state they were in prior to the `Run` command.\n\n    Run: demo guess number\n\n#### sub_values\nAccepts a variable string to modify and a list variable containing substitution pairs. Any word matched to the first word of a \nsubstitution pair will be replaced with the second word of that pair in the passed variable.\n\n```\nVariable: input_sub = dont don't,\n    cant can't,\n    wont won't,\n    recollect remember\n...\nsub_values(input, input_sub)\n```\n\n#### sub_key\nsub_key is a simplified method for matching a user's input to a pattern and then generating a response associated with \nthat pattern. sub_key accepts a string variable to match and a list variable containing `strings to match` and `associated \nresponses`. Wildcards (`*`) and new variables (`{var_1}`) may be used in the `strings to match` and the `associated \nresponses` to include parts of the input in the response. Multiple wildcards will be evaluated positionally \n(i.e. the first wildcard in the input will be used as the first wildcard in the output). sub_key executes such that the \nfirst matched response in the `associated responses` list will be used; this allows a catch-all wildcard to be used at \nthe end of the list to handle any input that doesn't match a specified pattern. Bracketed strings (`[string]`) reference \na list variable so that any word in the variable is accepted as a match. *Note: wildcard variables are only available for\nthe current substitution; named variables are available for use later in the script until overwritten.*\n\n```\nVariable: sorry = sorry, i apologize\nVariable: key_sub = \"[sorry] for *\" \"Please don't apologize about *\" \"No need to apologize about *\",\n    \"i remember when {1} said {2}\" \"Do I think of {1} or {2} often?\",\n    \"*\" \"I don't understand. Please elaborate.\" \" What do you mean by *?\"\n...\nsub_key(input, key_sub)\n\n```\n### Functions (Used for variable assignment or inline text substitution):\nThe following functions accept one or more arguments in parentheses and return values that can be assigned to a variable\nor, in some cases, a value that can be substituted within a quoted string.\n\n#### select_one\nSpecifies that the value will have to be filled in by user's choice from the provided list of items before proceeding. \nUsed in [Neon speak](#neon-speak) statements to speak the available options for a variable.\n\n    Variable: conversions = weight, volume, length, time, currency  \n    Neon speak:  \n    \"Say convert {select_one(conversions)} to convert or exit when done\"\n\n#### table_scrape\nUses beautiful soup to give back a readable and searchable dictionary of text/link pair of any HTML table element \non a provided web page. \n\n    Variable: options = table_scrape(https://www.neongecko.com/demos)\n\n#### random\nReturns random elements of the given list variable. If used to set a [variable](#variable), one value will be assigned; \nin a [Neon speak](#neon-speak), 2-3 examples will be provided and spoken.\n```\nVariable: numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nVariable: neon_num = random(numbers)\n```\n```\n    Variable: options = table_scrape(https://www.neongecko.com/demos)  \n    Variable: chosen\n    Neon speak:  \n        \"Please tell me what kind of help video you would like to see. You can say things like {random(options)}\"\n```\n\n#### closest\nReturns the closest element of a list to the specified variable (generally used in combination with table scrape). \nOptimized for string processing.\n\n    Execute: \"av play {closest(chosen,options)}\"\n\n#### profile\nLookup a value from a user profile to use in a speak or execute command.\n\n    Variable: email = profile(user.email)\n\n\n#### skill\nCall a skill and extract a some specific data from it. You must pass a valid skill intent \n(same as you would to [Execute](#execute)), as well as a valid key from that intent's dialog data. In general, this option \nshould only be used if you maintain the required skill and script, as these parameters may change.\n\n    Neon Speak: \"It is currently {skill(\"what is the weather\", weather)}\"\n    \n*Note: \"weather\" is defined in the weather skill dialog for this intent*\n \n## How to Use Scripts \n\nScripts can be downloaded from Neongecko's library or drafted and added to the script_txt folder in the skill directory.\nThe demo skill files (found in the library at neongecko.net) and descriptions above provide a summary and examples \nof the available functionality and formatting requirements.\n\n\n  \n## Contact Support  \n  \nUse the [link](https://neongecko.com/ContactUs) or [submit an issue on GitHub](https://help.github.com/en/articles/creating-an-issue)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NeonGeckoCom/skill-custom_conversation",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neon-skill-custom-conversation",
    "package_url": "https://pypi.org/project/neon-skill-custom-conversation/",
    "platform": null,
    "project_url": "https://pypi.org/project/neon-skill-custom-conversation/",
    "project_urls": {
      "Homepage": "https://github.com/NeonGeckoCom/skill-custom_conversation"
    },
    "release_url": "https://pypi.org/project/neon-skill-custom-conversation/0.0.1a5/",
    "requires_dist": [
      "bs4",
      "gitpython (~=3.1)",
      "neon-utils (~=1.1)",
      "ovos-utils (~=0.0.28)"
    ],
    "requires_python": "",
    "summary": "",
    "version": "0.0.1a5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17137514,
  "releases": {
    "0.0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ae9ebe3968a297afbfc6325a67f025438110e548329934d106f7be7a41c135d",
          "md5": "54db311587fceba305cd8ff5ec540282",
          "sha256": "8e2c7f72962984c600a26ac56e09b4089e05b94c0e0ef117296c8fe2d361289f"
        },
        "downloads": -1,
        "filename": "neon_skill_custom_conversation-0.0.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54db311587fceba305cd8ff5ec540282",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 90262,
        "upload_time": "2022-07-13T17:10:40",
        "upload_time_iso_8601": "2022-07-13T17:10:40.043096Z",
        "url": "https://files.pythonhosted.org/packages/3a/e9/ebe3968a297afbfc6325a67f025438110e548329934d106f7be7a41c135d/neon_skill_custom_conversation-0.0.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e47eeaae2b138c1ff81cbede62c53ab7bb1bb7b66d434f4cc608fbcce06201f",
          "md5": "3c4699744f89e3fea34fdbc15404f830",
          "sha256": "045fba0ef0695ef1dfa446fd487f0a8dff9a55391ad4e079f56622689047f9e8"
        },
        "downloads": -1,
        "filename": "neon_skill_custom_conversation-0.0.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c4699744f89e3fea34fdbc15404f830",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 90259,
        "upload_time": "2022-07-26T22:44:37",
        "upload_time_iso_8601": "2022-07-26T22:44:37.285191Z",
        "url": "https://files.pythonhosted.org/packages/7e/47/eeaae2b138c1ff81cbede62c53ab7bb1bb7b66d434f4cc608fbcce06201f/neon_skill_custom_conversation-0.0.1a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1ad0cbaa96846f408e23176f1bebd8f83ee6165f38a6fb3ff839fe99da1c2e6",
          "md5": "09830a2f2614130a08837ecf733f1625",
          "sha256": "bb4daa783b8b005e460a0846c0d7bc674fa2624d7bcf0440e2f6fa5a55288f1e"
        },
        "downloads": -1,
        "filename": "neon_skill_custom_conversation-0.0.1a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09830a2f2614130a08837ecf733f1625",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 90259,
        "upload_time": "2022-12-09T00:36:10",
        "upload_time_iso_8601": "2022-12-09T00:36:10.041430Z",
        "url": "https://files.pythonhosted.org/packages/b1/ad/0cbaa96846f408e23176f1bebd8f83ee6165f38a6fb3ff839fe99da1c2e6/neon_skill_custom_conversation-0.0.1a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d0b1423611c8ddba57014ccfad83c61980462a4ca7b958f7d4d40549a26f887",
          "md5": "77e9aa1b5575626fe103958bb4c32fa8",
          "sha256": "d284245e3562fef6e32b9a878f2a00005b37a6f7fdcbd408c82f9cee76aa0593"
        },
        "downloads": -1,
        "filename": "neon_skill_custom_conversation-0.0.1a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77e9aa1b5575626fe103958bb4c32fa8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 90297,
        "upload_time": "2022-12-09T16:14:50",
        "upload_time_iso_8601": "2022-12-09T16:14:50.941968Z",
        "url": "https://files.pythonhosted.org/packages/2d/0b/1423611c8ddba57014ccfad83c61980462a4ca7b958f7d4d40549a26f887/neon_skill_custom_conversation-0.0.1a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bedc77d7a672d47bb2bc08d7ca1712cec2fb413aa13da8662839cfe62d2ad22",
          "md5": "181eb6002a9c9cccbf5b5ab392cb4e5c",
          "sha256": "ed3f50379d50b67710ffe238060cc4d16b9867496c030c030150258f97a234ab"
        },
        "downloads": -1,
        "filename": "neon_skill_custom_conversation-0.0.1a4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "181eb6002a9c9cccbf5b5ab392cb4e5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 90420,
        "upload_time": "2023-02-24T01:52:45",
        "upload_time_iso_8601": "2023-02-24T01:52:45.285844Z",
        "url": "https://files.pythonhosted.org/packages/9b/ed/c77d7a672d47bb2bc08d7ca1712cec2fb413aa13da8662839cfe62d2ad22/neon_skill_custom_conversation-0.0.1a4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86cea87a4db32861f6696ad74e12dbd77459fbf30c7c5ad2fd2fdc127d4d0bcb",
          "md5": "4ba179b81a7556ff6e8b38ec4eabef49",
          "sha256": "2ba85faac170f66f8b361405eaf4afbd041f7d6924e91aac5e76b4187960eab2"
        },
        "downloads": -1,
        "filename": "neon_skill_custom_conversation-0.0.1a5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ba179b81a7556ff6e8b38ec4eabef49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 96687,
        "upload_time": "2023-02-24T02:16:31",
        "upload_time_iso_8601": "2023-02-24T02:16:31.679588Z",
        "url": "https://files.pythonhosted.org/packages/86/ce/a87a4db32861f6696ad74e12dbd77459fbf30c7c5ad2fd2fdc127d4d0bcb/neon_skill_custom_conversation-0.0.1a5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86cea87a4db32861f6696ad74e12dbd77459fbf30c7c5ad2fd2fdc127d4d0bcb",
        "md5": "4ba179b81a7556ff6e8b38ec4eabef49",
        "sha256": "2ba85faac170f66f8b361405eaf4afbd041f7d6924e91aac5e76b4187960eab2"
      },
      "downloads": -1,
      "filename": "neon_skill_custom_conversation-0.0.1a5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ba179b81a7556ff6e8b38ec4eabef49",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 96687,
      "upload_time": "2023-02-24T02:16:31",
      "upload_time_iso_8601": "2023-02-24T02:16:31.679588Z",
      "url": "https://files.pythonhosted.org/packages/86/ce/a87a4db32861f6696ad74e12dbd77459fbf30c7c5ad2fd2fdc127d4d0bcb/neon_skill_custom_conversation-0.0.1a5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}