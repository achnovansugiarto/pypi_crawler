{
  "info": {
    "author": "Erre Quadro srl",
    "author_email": "paolo.arduin@errequadrosrl.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# SpikeX - SpaCy Pipes for Knowledge Extraction\n\nSpikeX is a collection of pipes ready to be plugged in a spaCy pipeline.\nIt aims to help in building knowledge extraction tools with almost-zero effort.\n\n[![Build Status](https://img.shields.io/azure-devops/build/erre-quadro/spikex/3/master?label=build&logo=azure-pipelines&style=flat-square)](https://dev.azure.com/erre-quadro/spikex/_build/latest?definitionId=3&branchName=master)\n[![pypi Version](https://img.shields.io/pypi/v/spikex.svg?style=flat-square&logo=pypi&logoColor=white)](https://pypi.org/project/spikex/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)\n\n## What's new in SpikeX 0.5.0\n\n**WikiGraph** has never been so lightning fast:\n- ðŸŒ• **Performance mooning**, thanks to the adoption of a *sparse adjacency matrix* to handle pages graph, instead of using *igraph*\n- ðŸš€ **Memory optimization**, with a consumption cut by ~40% and a compressed size cut by ~20%, introducing new *bidirectional dictionaries* to manage data\n- ðŸ“– **New APIs** for a faster and easier usage and interaction\n- ðŸ›  **Overall fixes**, for a better graph and a better pages matching \n \n## Pipes\n\n- **WikiPageX** links Wikipedia pages to chunks in text\n- **ClusterX** picks noun chunks in a text and clusters them based on a revisiting of the [Ball Mapper](https://arxiv.org/abs/1901.07410) algorithm, Radial Ball Mapper\n- **AbbrX** detects abbreviations and acronyms, linking them to their long form. It is based on [scispacy](https://github.com/allenai/scispacy/blob/master/scispacy/abbreviation.py)'s one with improvements\n- **LabelX** takes labelings of pattern matching expressions and catches them in a text, solving overlappings, abbreviations and acronyms\n- **PhraseX** creates a `Doc`'s underscore extension based on a custom attribute name and phrase patterns. Examples are **NounPhraseX** and **VerbPhraseX**, which extract noun phrases and verb phrases, respectively\n- **SentX** detects sentences in a text, based on [Splitta](https://github.com/dgillick/splitta) with refinements\n\n## Tools\n\n- **WikiGraph** with pages as leaves linked to categories as nodes\n- **Matcher** that inherits its interface from the [spaCy](https://github.com/explosion/spaCy/blob/master/spacy/matcher/matcher.pyx)'s one, but built using an engine made of RegEx which boosts its performance\n\n## Install SpikeX\n\nSome requirements are inherited from spaCy:\n\n- **spaCy version**: 2.3+\n- **Operating system**: macOS / OS X Â· Linux Â· Windows (Cygwin, MinGW, Visual\n  Studio)\n- **Python version**: Python 3.6+ (only 64 bit)\n- **Package managers**: [pip](https://pypi.org/project/spikex/)\n\nSome dependencies use **Cython** and it needs to be installed before SpikeX:\n\n```bash\npip install cython\n```\n\nRemember that a virtual environment is always recommended, in order to avoid modifying system state.\n### pip\n\nAt this point, installing SpikeX via pip is a one line command:\n\n```bash\npip install spikex\n```\n\n## Usage\n\n### Prerequirements\n\nSpikeX pipes work with spaCy, hence a model its needed to be installed. Follow official instructions [here](https://spacy.io/usage/models#download). The brand new spaCy 3.0 is supported!\n\n### WikiGraph\n\nA `WikiGraph` is built starting from some key components of Wikipedia: *pages*, *categories* and *relations* between them. \n\n#### Auto\n\nCreating a `WikiGraph` can take time, depending on how large is its Wikipedia dump. For this reason, we provide wikigraphs ready to be used:\n\n| Date | WikiGraph | Lang | Size (compressed) | Size (memory) | |\n| --- | --- | --- | --- | --- | --- |\n| 2021-05-20 | enwiki_core | EN | 1.3GB | 8GB | [![][dl]][enwiki_core_20210520] | \n| 2021-05-20 | simplewiki_core | EN | 20MB | 130MB | [![][dl]][simplewiki_core_20210520] |\n| 2021-05-20 | itwiki_core | IT | 208MB | 1.2GB | [![][dl]][itwiki_core_20210520] |\n| More coming... |\n\n[enwiki_core_20210520]: https://errequadrosrl-my.sharepoint.com/:u:/g/personal/paolo_arduin_errequadrosrl_onmicrosoft_com/EeIb238HAmtCruMvhzZdOl8BIEBU_09XV5FnHE4SVmYzBQ?Download=1\n[simplewiki_core_20210520]: https://errequadrosrl-my.sharepoint.com/:u:/g/personal/paolo_arduin_errequadrosrl_onmicrosoft_com/EWdpEV_R4JVEk_ZwvJTrAEUBsLpmJMxyWDa13sFOzQAo3Q?Download=1\n[itwiki_core_20210520]: https://errequadrosrl-my.sharepoint.com/:u:/g/personal/paolo_arduin_errequadrosrl_onmicrosoft_com/EcWYGXp5SUdGvFTHN9KQ_zkBW8Zu9p0hiwpC3oKyhibXtQ?Download=1\n\n[dl]: http://i.imgur.com/gQvPgr0.png\n\nSpikeX provides a command to shortcut downloading and installing a `WikiGraph` (Linux or macOS, Windows not supported yet):\n```bash\nspikex download-wikigraph simplewiki_core\n```\n\n#### Manual\n\nA `WikiGraph` can be created from command line, specifying which Wikipedia dump to take and where to save it:\n\n```bash\nspikex create-wikigraph \\\n  <YOUR-OUTPUT-PATH> \\\n  --wiki <WIKI-NAME, default: en> \\\n  --version <DUMP-VERSION, default: latest> \\\n  --dumps-path <DUMPS-BACKUP-PATH> \\\n```\n\nThen it needs to be packed and installed:\n\n```bash\nspikex package-wikigraph \\\n  <WIKIGRAPH-RAW-PATH> \\\n  <YOUR-OUTPUT-PATH>\n```\n\nFollow the instructions at the end of the packing process and install the distribution package in your virtual environment.\nNow your are ready to use your WikiGraph as you wish:\n\n```python\nfrom spikex.wikigraph import load as wg_load\n\nwg = wg_load(\"enwiki_core\")\npage = \"Natural_language_processing\"\ncategories = wg.get_categories(page, distance=1)\nfor category in categories:\n    print(category)\n\n>>> Category:Speech_recognition\n>>> Category:Artificial_intelligence\n>>> Category:Natural_language_processing\n>>> Category:Computational_linguistics\n\n```\n### Matcher\n\nThe **Matcher** is identical to the spaCy's one, but faster when it comes to handle many patterns at once (order of thousands), so follow official usage instructions [here](https://spacy.io/usage/rule-based-matching#matcher).\n\nA trivial example:\n```python\nfrom spikex.matcher import Matcher\nfrom spacy import load as spacy_load\n\nnlp = spacy_load(\"en_core_web_sm\")\nmatcher = Matcher(nlp.vocab)\nmatcher.add(\"TEST\", [[{\"LOWER\": \"nlp\"}]])\ndoc = nlp(\"I love NLP\")\nfor _, s, e in matcher(doc):\n  print(doc[s: e])\n\n>>> NLP\n```\n\n### WikiPageX\n\nThe `WikiPageX` pipe uses a `WikiGraph` in order to find chunks in a text that match Wikipedia page titles.\n\n``` python\nfrom spacy import load as spacy_load\nfrom spikex.wikigraph import load as wg_load\nfrom spikex.pipes import WikiPageX\n\nnlp = spacy_load(\"en_core_web_sm\")\ndoc = nlp(\"An apple a day keeps the doctor away\")\nwg = wg_load(\"simplewiki_core\")\nwpx = WikiPageX(wg)\ndoc = wpx(doc)\nfor span in doc._.wiki_spans:\n  print(span._.wiki_pages)\n\n>>> ['An']\n>>> ['Apple', 'Apple_(disambiguation)', 'Apple_(company)', 'Apple_(tree)']\n>>> ['A', 'A_(musical_note)', 'A_(New_York_City_Subway_service)', 'A_(disambiguation)', 'A_(Cyrillic)')]\n>>> ['Day']\n>>> ['The_Doctor', 'The_Doctor_(Doctor_Who)', 'The_Doctor_(Star_Trek)', 'The_Doctor_(disambiguation)']\n>>> ['The']\n>>> ['Doctor_(Doctor_Who)', 'Doctor_(Star_Trek)', 'Doctor', 'Doctor_(title)', 'Doctor_(disambiguation)']\n``` \n\n### ClusterX\n\nThe `ClusterX` pipe takes noun chunks in a text and clusters them using a Radial Ball Mapper algorithm.\n\n``` python\nfrom spacy import load as spacy_load\nfrom spikex.pipes import ClusterX\n\nnlp = spacy_load(\"en_core_web_sm\")\ndoc = nlp(\"Grab this juicy orange and watch a dog chasing a cat.\")\nclusterx = ClusterX(min_score=0.65)\ndoc = clusterx(doc)\nfor cluster in doc._.cluster_chunks:\n  print(cluster)\n\n>>> [this juicy orange]\n>>> [a cat, a dog]\n```\n\n### AbbrX\n\nThe **AbbrX** pipe finds abbreviations and acronyms in the text, linking short and long forms together:\n\n```python\nfrom spacy import load as spacy_load\nfrom spikex.pipes import AbbrX\n\nnlp = spacy_load(\"en_core_web_sm\")\ndoc = nlp(\"a little snippet with an abbreviation (abbr)\")\nabbrx = AbbrX(nlp.vocab)\ndoc = abbrx(doc)\nfor abbr in doc._.abbrs:\n  print(abbr, \"->\", abbr._.long_form)\n\n>>> abbr -> abbreviation\n```\n\n### LabelX\n\nThe `LabelX` pipe matches and labels patterns in text, solving overlappings, abbreviations and acronyms.\n\n```python\nfrom spacy import load as spacy_load\nfrom spikex.pipes import LabelX\n\nnlp = spacy_load(\"en_core_web_sm\")\ndoc = nlp(\"looking for a computer system engineer\")\npatterns = [\n  [{\"LOWER\": \"computer\"}, {\"LOWER\": \"system\"}],\n  [{\"LOWER\": \"system\"}, {\"LOWER\": \"engineer\"}],\n]\nlabelx = LabelX(nlp.vocab, (\"TEST\", patterns), validate=True, only_longest=True)\ndoc = labelx(doc)\nfor labeling in doc._.labelings:\n  print(labeling, f\"[{labeling.label_}]\")\n\n>>> computer system engineer [TEST]\n```\n\n### PhraseX\n\nThe `PhraseX` pipe creates a custom `Doc`'s underscore extension which fulfills with matches from phrase patterns.\n\n```python\nfrom spacy import load as spacy_load\nfrom spikex.pipes import PhraseX\n\nnlp = spacy_load(\"en_core_web_sm\")\ndoc = nlp(\"I have Melrose and McIntosh apples, or Williams pears\")\npatterns = [\n  [{\"LOWER\": \"mcintosh\"}],\n  [{\"LOWER\": \"melrose\"}],\n]\nphrasex = PhraseX(nlp.vocab, \"apples\", patterns)\ndoc = phrasex(doc)\nfor apple in doc._.apples:\n  print(apple)\n\n>>> Melrose\n>>> McIntosh\n```\n### SentX\n\nThe **SentX** pipe splits sentences in a text. It modifies tokens' *is_sent_start* attribute, so it's mandatory to add it before *parser* pipe in the spaCy pipeline:\n\n```python\nfrom spacy import load as spacy_load\nfrom spikex.pipes import SentX\nfrom spikex.defaults import spacy_version\n\nif spacy_version >= 3:\n  from spacy.language import Language\n\n  @Language.factory(\"sentx\")\n  def create_sentx(nlp, name):\n      return SentX()\n\nnlp = spacy_load(\"en_core_web_sm\")\nsentx_pipe = SentX() if spacy_version < 3 else \"sentx\"\nnlp.add_pipe(sentx_pipe, before=\"parser\")\ndoc = nlp(\"A little sentence. Followed by another one.\")\nfor sent in doc.sents:\n  print(sent)\n\n>>> A little sentence.\n>>> Followed by another one.\n```\n\n## That's all folks\nFeel free to contribute and have fun!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/erre-quadro/spikex",
    "keywords": "spikex",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spikex",
    "package_url": "https://pypi.org/project/spikex/",
    "platform": "",
    "project_url": "https://pypi.org/project/spikex/",
    "project_urls": {
      "Homepage": "https://github.com/erre-quadro/spikex"
    },
    "release_url": "https://pypi.org/project/spikex/0.5.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "SPIKEX - SpaCy Pipes for Knowledge Extraction",
    "version": "0.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10519283,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "657e2f34452e15a97b0bdfab0486b019c60a3a9cba6b4eef6d46e155affe1529",
          "md5": "5739c459b24d7e1a374919ec21899fa4",
          "sha256": "1c0b61be32019122d81bcc1cf1b55f32467c3db3626389ee8b512340a998d115"
        },
        "downloads": -1,
        "filename": "spikex-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5739c459b24d7e1a374919ec21899fa4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31219,
        "upload_time": "2020-07-20T17:00:56",
        "upload_time_iso_8601": "2020-07-20T17:00:56.727213Z",
        "url": "https://files.pythonhosted.org/packages/65/7e/2f34452e15a97b0bdfab0486b019c60a3a9cba6b4eef6d46e155affe1529/spikex-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6858710b6f3252f00e3052791ee9e37690df4eac0427bff2043f91624dc6411a",
          "md5": "1ddeb6dad9a93046fb6a22df72ff7f97",
          "sha256": "3e9d83c557ca36599024078971591a60e7f4ae4fed5af7353649e05c1c4d191b"
        },
        "downloads": -1,
        "filename": "spikex-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ddeb6dad9a93046fb6a22df72ff7f97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2768434,
        "upload_time": "2021-03-16T14:34:26",
        "upload_time_iso_8601": "2021-03-16T14:34:26.424497Z",
        "url": "https://files.pythonhosted.org/packages/68/58/710b6f3252f00e3052791ee9e37690df4eac0427bff2043f91624dc6411a/spikex-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "399e95caadbc8405ab8ecc349bf716cf9394ffe43a19d5fa20a4562e9fdee7cb",
          "md5": "738aed545c5b0899ffa18066c7c7bb28",
          "sha256": "287ce30856f0b82c72f2f9619cc2c826007626bfcc698c36f9f3acd9584b570e"
        },
        "downloads": -1,
        "filename": "spikex-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "738aed545c5b0899ffa18066c7c7bb28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2771883,
        "upload_time": "2021-04-20T14:13:05",
        "upload_time_iso_8601": "2021-04-20T14:13:05.771987Z",
        "url": "https://files.pythonhosted.org/packages/39/9e/95caadbc8405ab8ecc349bf716cf9394ffe43a19d5fa20a4562e9fdee7cb/spikex-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbe36970f4cc275636fbbeef3e7accfbf7758919c673972b0f4c1d311ed6d6c5",
          "md5": "d55b44e3a030857ef79be507df9253db",
          "sha256": "9bc1861136243cd31bbf78bb68c58889c641439ed2bf2c75f4b58a041b290b74"
        },
        "downloads": -1,
        "filename": "spikex-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d55b44e3a030857ef79be507df9253db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2772228,
        "upload_time": "2021-05-18T07:38:02",
        "upload_time_iso_8601": "2021-05-18T07:38:02.125037Z",
        "url": "https://files.pythonhosted.org/packages/fb/e3/6970f4cc275636fbbeef3e7accfbf7758919c673972b0f4c1d311ed6d6c5/spikex-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba014589d6e896a5b208a1f2dc2cada82ceebd311b6d61702cb37f1812cab868",
          "md5": "7e6a6e03a1389ce3d203280d838e1e3d",
          "sha256": "fca1e542f9a1ba43f0b279559ef561d3a6296ca3fd96bf985d62674797af122e"
        },
        "downloads": -1,
        "filename": "spikex-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7e6a6e03a1389ce3d203280d838e1e3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2772973,
        "upload_time": "2021-05-31T14:30:45",
        "upload_time_iso_8601": "2021-05-31T14:30:45.662410Z",
        "url": "https://files.pythonhosted.org/packages/ba/01/4589d6e896a5b208a1f2dc2cada82ceebd311b6d61702cb37f1812cab868/spikex-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba014589d6e896a5b208a1f2dc2cada82ceebd311b6d61702cb37f1812cab868",
        "md5": "7e6a6e03a1389ce3d203280d838e1e3d",
        "sha256": "fca1e542f9a1ba43f0b279559ef561d3a6296ca3fd96bf985d62674797af122e"
      },
      "downloads": -1,
      "filename": "spikex-0.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7e6a6e03a1389ce3d203280d838e1e3d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 2772973,
      "upload_time": "2021-05-31T14:30:45",
      "upload_time_iso_8601": "2021-05-31T14:30:45.662410Z",
      "url": "https://files.pythonhosted.org/packages/ba/01/4589d6e896a5b208a1f2dc2cada82ceebd311b6d61702cb37f1812cab868/spikex-0.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}