{
  "info": {
    "author": "Cedric Richter",
    "author_email": "cedricr.upb@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Code AST\n> Fast structural analysis of any programming language in Python\n\nProgramming Language Processing (PLP) brings the capabilities of modern NLP systems to the world of programming languages. \nTo achieve high performance PLP systems, existing methods often take advantage of the fully defined nature of programming languages. Especially the syntactical structure can be exploited to gain knowledge about programs.\n\n**code.ast** provides easy access to the syntactic structure of a program. By relying on [tree-sitter](https://github.com/tree-sitter) as the back end, the parser supports fast parsing of variety of programming languages. \n\nThe goal of code.ast is to combine the efficiency and variety of languages supported by tree-sitter with the convenience of more native parsers (like [libcst](https://github.com/Instagram/LibCST)). \n\nTo achieve this, code.ast adds the features:\n1. **Auto-loading:** Compile of source code parsers for any language supported by tree-sitter with a single keyword,\n2. **Visitors:** Search the AST quickly,\n3. **Transformers:** Transform source code easily by transforming the AST structure\n\n## Installation\nThe package is tested under Python 3. It can be installed via:\n```bash\npip install code-ast\n```\n\n## Quick start\ncode.ast can parse nearly any program code in a few lines of code:\n```python\nimport code_ast\n\n# Python\ncode_ast.ast(\n    '''\n        def my_func():\n            print(\"Hello World\")\n    ''',\nlang = \"python\")\n\n# Output:\n# PythonCodeAST [0, 0] - [4, 4]\n#    module [1, 8] - [3, 4]\n#        function_definition [1, 8] - [2, 32]\n#            identifier [1, 12] - [1, 19]\n#            parameters [1, 19] - [1, 21]\n#            block [2, 12] - [2, 32]\n#                expression_statement [2, 12] - [2, 32]\n#                    call [2, 12] - [2, 32]\n#                        identifier [2, 12] - [2, 17]\n#                        argument_list [2, 17] - [2, 32]\n#                            string [2, 18] - [2, 31]\n\n# Java\ncode_ast.ast(\n    '''\n    public class HelloWorld {\n        public static void main(String[] args){\n          System.out.println(\"Hello World\");\n        }\n    }\n    ''',\nlang = \"java\")\n\n# Output: \n# JavaCodeAST [0, 0] - [7, 4]\n#    program [1, 0] - [6, 4]\n#        class_declaration [1, 0] - [5, 1]\n#            modifiers [1, 0] - [1, 6]\n#            identifier [1, 13] - [1, 23]\n#            class_body [1, 24] - [5, 1]\n#                method_declaration [2, 8] - [4, 9]\n#                    ...\n\n\n```\n\n## Visitors\ncode.ast implements the visitor pattern to quickly traverse the AST structure:\n```python\nimport code_ast\nfrom code_ast import ASTVisitor\n\ncode = '''\n    def f(x, y):\n        return x + y\n'''\n\n# Count the number of identifiers\nclass IdentifierCounter(ASTVisitor):\n\n    def __init__(self):\n        self.count = 0\n    \n    def visit_identifier(self, node):\n        self.count += 1\n\n# Parse the AST and then visit it with our visitor\nsource_ast = code_ast.ast(code, lang = \"python\")\n\ncount_visitor = IdentifierCounter()\nsource_ast.visit(count_visitor)\n\ncount_visitor.count\n# Output: 5\n\n```\n\n## Transformers\nTransformers provide an easy way to transform source code. For example, in the following, we want to mirror each binary addition:\n```python\nimport code_ast\nfrom code_ast import ASTTransformer, FormattedUpdate, TreeUpdate\n\ncode = '''\n    def f(x, y):\n        return x + y + 0.5\n'''\n\n# Mirror binary operator on leave\nclass MirrorAddTransformer(ASTTransformer):\n    def leave_binary_operator(self, node):\n        if node.children[1].type == \"+\":\n            return FormattedUpdate(\n                \" %s + %s\",\n                [\n                    TreeUpdate(node.children[2]),\n                    TreeUpdate(node.children[0])\n                ]\n            )\n\n# Parse the AST and then visit it with our visitor\nsource_ast = code_ast.ast(code, lang = \"python\")\n\nmirror_transformer = MirrorAddTransformer()\n\n# Mirror transformer are initialized by running them as visitors\nsource_ast.visit(mirror_transformer)\n\n# Transformer provide a minimal AST edit\nmirror_transformer.edit()\n# Output: \n# module [2, 0] - [5, 0]\n#    function_definition [2, 0] - [3, 22]\n#        block [3, 4] - [3, 22]\n#            return_statement [3, 4] - [3, 22]\n#                binary_operator -> FormattedUpdate [3, 11] - [3, 22]\n#                    binary_operator -> FormattedUpdate [3, 11] - [3, 16]\n\n# And it can be used to directly transform the code\nmirror_transformer.code()\n# Output:\n# def f(x, y):\n#    return 0.5 + y + x\n\n```\n\n## Project Info\nThe goal of this project is to provide developer in the\nprogramming language processing community with easy\naccess to AST parsing. This is currently developed as a helper library for internal research projects. Therefore, it will only be updated\nas needed.\n\nFeel free to open an issue if anything unexpected\nhappens. \n\nDistributed under the MIT license. See ``LICENSE`` for more information.\n\nWe thank the developer of [tree-sitter](https://tree-sitter.github.io/tree-sitter/) library. Without tree-sitter this project would not be possible. \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/cedricrupb/code_ast/archive/refs/tags/v0.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cedricrupb/code_ast",
    "keywords": "code,ast,syntax,program,language processing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "code-ast",
    "package_url": "https://pypi.org/project/code-ast/",
    "platform": null,
    "project_url": "https://pypi.org/project/code-ast/",
    "project_urls": {
      "Download": "https://github.com/cedricrupb/code_ast/archive/refs/tags/v0.1.0.tar.gz",
      "Homepage": "https://github.com/cedricrupb/code_ast"
    },
    "release_url": "https://pypi.org/project/code-ast/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Fast structural analysis of any programming language in Python",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14269939,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d06a93923721b2dcd88431b093f0985264dea84c921239f1d3f722d13c9a3bed",
          "md5": "63551ea891acbb99e719688cc76e1413",
          "sha256": "b375140aba6fffb6ae2dff1b132e8ac1a89b840adf2797492e026feb9a0bb359"
        },
        "downloads": -1,
        "filename": "code_ast-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "63551ea891acbb99e719688cc76e1413",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12165,
        "upload_time": "2022-06-28T08:31:07",
        "upload_time_iso_8601": "2022-06-28T08:31:07.191732Z",
        "url": "https://files.pythonhosted.org/packages/d0/6a/93923721b2dcd88431b093f0985264dea84c921239f1d3f722d13c9a3bed/code_ast-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d06a93923721b2dcd88431b093f0985264dea84c921239f1d3f722d13c9a3bed",
        "md5": "63551ea891acbb99e719688cc76e1413",
        "sha256": "b375140aba6fffb6ae2dff1b132e8ac1a89b840adf2797492e026feb9a0bb359"
      },
      "downloads": -1,
      "filename": "code_ast-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "63551ea891acbb99e719688cc76e1413",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12165,
      "upload_time": "2022-06-28T08:31:07",
      "upload_time_iso_8601": "2022-06-28T08:31:07.191732Z",
      "url": "https://files.pythonhosted.org/packages/d0/6a/93923721b2dcd88431b093f0985264dea84c921239f1d3f722d13c9a3bed/code_ast-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}