{
  "info": {
    "author": "Mohamed Hmini",
    "author_email": "mo@mhmini.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# bn2vec\nBoolean Networks' embedding techniques &amp; ML based Boolean Networks' classification.\n\n## 0. Introduction:\nbn2vec is the result of an earlier research which has been conducted in 2021 (Mar-Sept) as part of a larger project named [BNediction](https://bnediction.github.io/), the goal of the research was fixated on developing new embedding techniques specifically built for dealing with Boolean Networks, the aim though was to use these techniques to help classifiy Boolean Networks and develop a solid set of features which would be able to explain the performance of a given BN. <br/>\n\nthe full master's thesis report which wraps the work done in this package could be found in [Master's Thesis](https://drive.google.com/file/d/1I8tlNt7-CV9RZhmOJ5rv5Hxi_padirUl/view?usp=sharing), any details regarding how the embedding or the classification work are discussed in the report. <br/>\n\nfor a walk through example please check [test.ipynb](./tests/test.ipynb).\n\n## 1. Setting up:\n\nstep 1. creating a new virtual env.\n```bash\npython -m venv env\n```\n\nfor a manual setup we should install the packages from the requirements.txt file and then install bn2vec using pip.\n\n```bash\npip install -r requirements.txt\n```\n\n```bash\npip install -e .\n```\n\n\n## 3. Config: \n\nwhen creating a ConfigParser object you will be asked to feed the path for your configuration file, the file should be a yaml type and it should conform to the validation rules for it to be used, in case of abscense of the config file a default file (allow-all) would be used, see [Default Config File](./bn2vec/config.yaml).<br/>\n\nunder section **Memory** 6 options are allowed:\n- memorize_dnf_graphs (resp. _bn_graphs): if set to true it allows for remembering graphs' data generated from DNFs (resp. BNs).\n- memorize_dnf_sequences (resp. _bn_sequences): if set to true it allows for remembering sequences' data generated from DNFs (resp. BNs).\n- hard_memory: if set to true it allows for storing the generated data from an ensemble of BNs into the desk.\n- hard_memory_loc: the path folder for hard_memory.\n\nunder section **Embeddings** we can specify any of the following options:\n- rsf: stands for **Relaxed Structural Features**, if specified the system generates RSF features of the given ensemble of BNs.\n- lsf: stands for **Lossy Structural Features**, if specified the system generates LSF features of the given ensemble of BNs.\n- ptnrs: acronym of **Patterns**, if specified the system generates PTRNS features of the given ensemble of BNs.\n- igf: stands for **Influence Graph Features**, if specified the system generates IGF features of the given ensemble of BNs.\n\nfor more details about the rest of the file please have a look at the [Default File](./bn2vec/config.yaml) and the [Full Report](https://drive.google.com/file/d/1I8tlNt7-CV9RZhmOJ5rv5Hxi_padirUl/view?usp=sharing).\n\n## 4. Embeddings: \n\nlet us have a look at the different ways of using the feature engineering module.<br/>\nnecessary imports:\n```python\nfrom colomoto import minibn\n\nfrom bn2vec.feature_engineering import Dnf2Vec, Bn2Vec, Ens2Mat\nfrom bn2vec.utils import ConfigParser\n```\n\nin the case of using **Dnf2Vec** (embedding a single DNF) or **Bn2Vec** (embedding a single BN, ensemble of DNFs), we have to tell the system to parse the config file ourselves.\n```python\nConfigParser.parse(\"path/to/configfile\")\n```\nwe use minibn.BooleanNetwork to parse Boolean Networks' files.\n```python\nbn = minibn.BooleanNetwork(\"path/to/boolean_network\")\nBN = list(bn.items())\n```\n\nthen when using **Dnf2Vec** we can perform the embedding to one of the BN's DNFs this way.\n```python\ngen = Dnf2Vec(dnf=BN[0][1], comp_name=BN[0][0])\ngraphs, seqs, features = gen.generate_features()\n```\n\nthe generate_features method returns three objects:\n- graphs (resp. seqs): is a dictionary containing the graphs' (res. sequences') data of the given DNF.(if asked for).\n- features: is a pandas Series object containing the final features extracted from the given DNF.\n\nlikewise we can embed the whole BN.\n```python\ngen = Bn2Vec(BN)\nbn_graphs, bn_seqs, dnfs_data, bn_features = gen.generate_features()\n```\n\nthis time we have more complicated semi-structed data to look at:\n- bn_graphs (resp. bn_seqs): is a dictionary containing the graphs' (res. sequences') data of the given BN.(if asked for).\n- dnfs_data: contains dnf graphs, sequences and features generated by Dnf2Vec for all dnfs in the given BN.\n- bn_features: is a pandas Series object containing the final features extracted from the given BN.\n\nif we want to embed an ensemble of BNs we simply use **Ens2Mat** (ensemble to matrix).\n```python\ngen = Ens2Mat(\n    config_path='path/to/config_file',\n    master_model_src = 'path/to/master_model'\n)\n\nX,Y = gen.vectorize_BNs(\n    'path/to/base_directory',\n    '', # bundle file name (under base_directory)\n    size = 'all' # or an integer (the number of BNs to embed)\n)\n```\n\n## 5. Features Selector: \n\nin order to use **BnFeaturesSelector** we should import one extra module:\n```python\nfrom bn2vec.feature_selection import BnFeaturesSelector\n```\n\nthis module has 3 main methods: \n- drop_zero_variance_features: literally removes features without any flactuations.\n- cluster_collinear_features_leiden: uses the leiden algorithm to cluster features based on their collinearities, then the method selects the best representative feature from each cluster, this method is only useful in the case of LSF and RSF (mostly LSF where elminiating collinearities is important but also deciding which to remove is more important).\n- correct_collinearity: takes a set of features and then returns another set of features (with high collinearity with the input features) which are better explainable than the originals.\n\n```python\nselector = BnFeaturesSelector(X, mode='lsf')\nX = selector.drop_zero_variance_features()\nX, clusters = selector.cluster_collinear_features_leiden(thresh = 0.8)\n```\n\nthe argument thresh is the threshold (minimal value) to decide that two features are correlated, it is calulated as the absolute value of the correlation value between the two features.\n\n## 6. Rules Extractor: \n\nnecessary imports for using the rules extraction module:\n```python\nfrom bn2vec.utils import BnDataset\nfrom bn2vec.rules_extraction import DTC, RulesExtractor\n```\n\ncreating a BnDataset object is necessary:\n```python\nbase_dir='path/to/base_directory'\nBN = BnDataset(\n    dataset_X = os.path.join(base_dir, 'path/to/X_file'), \n    dataset_Y= os.path.join(base_dir, 'path/to/Y_file'),\n    score_threshold = 1\n)\n```\n\nthen we can create our **DTC** (stands for Decision Tree Classifier) object:\n```python\ndtc = DTC(\n    dataset = BN,\n    save_dir = \"path/to/saving_directory\", \n    ensemble=\"ens1\",\n    embedding=\"ptrns\"\n)\n```\n\nthe arguments 'ensemble' and 'embedding' are there just for naming conventions, to train deep decision tree classifiers we use the train_deep_dtcs method: \n```python\ndtc.train_deep_dtcs(test_size=0.3)\n```\nthis well train a balanced and an unbalanced version of the tree, it will save the trees and the metrics in the save_dir folder and it will print the metrics for visual inspection.<br/>\n\nin order to extract useful rules from these trees we should use the **RulesExtractor** class: \n```python\nrule_extractor = RulesExtractor(\n    dataset = BN,\n    dtc = \"path/to/dtc\",\n)\nrules = rule_extractor.extract_rules(\n    thresh = 0,\n    tpr_weight = 0.5, # importance of the true positive rate\n    tnr_weight = 0.5  # importance of the true negative rate\n)\n```\n\nfor training singleton decision trees (trees with a single split) we use train_singleton_dtcs:\n```python\nrules = dtc.train_singleton_dtcs(\n    test_size=0.3,\n    balanced=False,\n    thresh=0.5,\n    tpr_weight=0.5,\n    tnr_weight=0.5\n)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bn2vec",
    "package_url": "https://pypi.org/project/bn2vec/",
    "platform": null,
    "project_url": "https://pypi.org/project/bn2vec/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/bn2vec/1.0.0/",
    "requires_dist": [
      "colomoto-jupyter (==0.8.2)",
      "igraph (==0.9.9)",
      "matplotlib (==3.5.1)",
      "numpy (==1.22.2)",
      "pandas (==1.4.1)",
      "scikit-learn (==1.0.2)",
      "tqdm (==4.63.0)",
      "PyYAML"
    ],
    "requires_python": "",
    "summary": "Boolean Network To Vector",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13472763,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54434739b7091c61127eda54e74dbb2a72e544a483de55f0f13a070f1005aba9",
          "md5": "04b1978d3088f9559a580c7c1f230274",
          "sha256": "5366d6387d39e7eeb06fdb5671b4f56cfb6492eb76bd73e5eb3f5a024ab1c4d5"
        },
        "downloads": -1,
        "filename": "bn2vec-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04b1978d3088f9559a580c7c1f230274",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28012,
        "upload_time": "2022-04-11T00:44:52",
        "upload_time_iso_8601": "2022-04-11T00:44:52.567986Z",
        "url": "https://files.pythonhosted.org/packages/54/43/4739b7091c61127eda54e74dbb2a72e544a483de55f0f13a070f1005aba9/bn2vec-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69f67e70b63e29f5caf739eedd54951c76c4f3ca055c2af5600968c7784727f7",
          "md5": "8da29acb89802e668350b9235ab60157",
          "sha256": "f01e394f011263d4c1303ba087d7ea58f08645c29dfc4786f36d7d44c315768f"
        },
        "downloads": -1,
        "filename": "bn2vec-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8da29acb89802e668350b9235ab60157",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25053,
        "upload_time": "2022-04-11T00:44:54",
        "upload_time_iso_8601": "2022-04-11T00:44:54.324503Z",
        "url": "https://files.pythonhosted.org/packages/69/f6/7e70b63e29f5caf739eedd54951c76c4f3ca055c2af5600968c7784727f7/bn2vec-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54434739b7091c61127eda54e74dbb2a72e544a483de55f0f13a070f1005aba9",
        "md5": "04b1978d3088f9559a580c7c1f230274",
        "sha256": "5366d6387d39e7eeb06fdb5671b4f56cfb6492eb76bd73e5eb3f5a024ab1c4d5"
      },
      "downloads": -1,
      "filename": "bn2vec-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "04b1978d3088f9559a580c7c1f230274",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28012,
      "upload_time": "2022-04-11T00:44:52",
      "upload_time_iso_8601": "2022-04-11T00:44:52.567986Z",
      "url": "https://files.pythonhosted.org/packages/54/43/4739b7091c61127eda54e74dbb2a72e544a483de55f0f13a070f1005aba9/bn2vec-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69f67e70b63e29f5caf739eedd54951c76c4f3ca055c2af5600968c7784727f7",
        "md5": "8da29acb89802e668350b9235ab60157",
        "sha256": "f01e394f011263d4c1303ba087d7ea58f08645c29dfc4786f36d7d44c315768f"
      },
      "downloads": -1,
      "filename": "bn2vec-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8da29acb89802e668350b9235ab60157",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25053,
      "upload_time": "2022-04-11T00:44:54",
      "upload_time_iso_8601": "2022-04-11T00:44:54.324503Z",
      "url": "https://files.pythonhosted.org/packages/69/f6/7e70b63e29f5caf739eedd54951c76c4f3ca055c2af5600968c7784727f7/bn2vec-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}