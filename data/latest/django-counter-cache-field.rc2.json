{
  "info": {
    "author": "Hat Dao",
    "author_email": "enjoy3013@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "====================\ndjango-counter-field\n====================\n.. image:: https://travis-ci.org/enjoy2000/django-counter-cache-field.svg?branch=master\n    :target: https://travis-ci.org/enjoy2000/django-counter-cache-field\n\n\nIt is sometimes useful to cache the total number of objects associated with another object through a ForeignKey\nrelation. For example the total number of comments associated with an article.\n\ndjango-counter-field makes it easy to denormalize and keep such counters up to date.\n\nQuick start\n-----------\n\n1. Install django-counter-field::\n\n    pip install django-counter-cache-field\n\n2. Add \"django_counter_field\" to your INSTALLED_APPS setting::\n\n    INSTALLED_APPS = (\n        ...\n        'django_counter_cache_field',\n    )\n\n3. Add a CounterCacheField to your model::\n\n    from django_counter_field import CounterCacheField\n\n\n    class Article(models.Model):\n        comment_count = CounterCacheField()\n\n4. Connect the related foreign key field with the counter field in your signals::\n\n    connect_counter('comment_count', Comment.article)\n\nWhenever a comment is created the comment_count on the associated Article will be incremented. If the comment is\ndeleted, the comment_count will be automatically decremented.\n\n\nOverview\n--------\n\nCreating a new counter requires three simple steps:\n\n1. Add a `CounterCacheField` field to the parent model.\n2. Add the `CounterMixin` mixin to the child model.\n3. Use `connect_counter` to connect the child model with the new counter.\n\nMost counters are simple in the sense that you want to count all child objects. Sometimes, however, objects should be\ncounted based on one or several conditions. For example you may not wish to count *all* comments on an article but\nonly comments that have been approved. You can create conditional counters by providing a third `is_in_counter_func`\nargument to `connect_counter`:\n\n    connect_counter('comment_count', Comment.article, lambda comment: comment.is_approved)\n\nThe `is_in_counter_func` function will be called with `Comment` objects and must return `True` if the given comment\nshould be counted. It must not concern itself with checking if the comment is deleted or not, django-counter-field\ndoes that by default.\n\nBackfilling\n-----------\n\nOften you will add a `CounterCacheField` to a model that already has a large number of associated objects. When a counter\nis created, it's value is initialized to zero. This value is likely incorrect. django-counter-field provides a couple\nof management commands that allow you to rebuild the value of a counter:\n\n1. List all available counters:\n\n    $ python manage.py list_counters\n\n2. Rebuild a counter using one of the counter names given by `list_counters`:\n\n    $ python manage.py rebuild_counter <counter_name>\n\nNote: The `rebuild_counter` management command will only update counters on objects that have at least one child\nobject. For example articles with at least one comment. Articles with no comments  will not be updated. This\nis a conscious limitation; the use cases for such a feature seem very limited, if existent at all.\n\n\nDocumentation\n-------------\n\n    $ pip install Sphinx\n    $ cd docs\n    $ make html\n    Open build/html/index.html",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/enjoy2000/django-counter-cache-field",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-counter-cache-field",
    "package_url": "https://pypi.org/project/django-counter-cache-field/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-counter-cache-field/",
    "project_urls": {
      "Homepage": "http://github.com/enjoy2000/django-counter-cache-field"
    },
    "release_url": "https://pypi.org/project/django-counter-cache-field/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django-counter-cache-field makes it extremely easy to denormalize and keep track of related model counts.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7925264,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "673ca7aa04a0048f57efa399a9fd3ed7555d2bc23968e11b0f86601c23cfa3b1",
          "md5": "be75f456d1c30ba68c8639475a84508b",
          "sha256": "549b587bc3bd49bf7736cee840723833a7ff050aeacdf41c60cce7e9834797a0"
        },
        "downloads": -1,
        "filename": "django-counter-cache-field-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "be75f456d1c30ba68c8639475a84508b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10821,
        "upload_time": "2020-08-10T12:28:39",
        "upload_time_iso_8601": "2020-08-10T12:28:39.846986Z",
        "url": "https://files.pythonhosted.org/packages/67/3c/a7aa04a0048f57efa399a9fd3ed7555d2bc23968e11b0f86601c23cfa3b1/django-counter-cache-field-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a6d54773788dce94122817410fa3769dde62b77e3c73798b1a37045b06fac17",
          "md5": "2d2db8e19a956b3be049fae99e7fd5ff",
          "sha256": "bd4478a316c2e6db4c4a0b16d2a60b3c060750dd0965227ad1724b685209395a"
        },
        "downloads": -1,
        "filename": "django-counter-cache-field-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2d2db8e19a956b3be049fae99e7fd5ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10935,
        "upload_time": "2020-08-10T12:57:51",
        "upload_time_iso_8601": "2020-08-10T12:57:51.440887Z",
        "url": "https://files.pythonhosted.org/packages/5a/6d/54773788dce94122817410fa3769dde62b77e3c73798b1a37045b06fac17/django-counter-cache-field-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a6d54773788dce94122817410fa3769dde62b77e3c73798b1a37045b06fac17",
        "md5": "2d2db8e19a956b3be049fae99e7fd5ff",
        "sha256": "bd4478a316c2e6db4c4a0b16d2a60b3c060750dd0965227ad1724b685209395a"
      },
      "downloads": -1,
      "filename": "django-counter-cache-field-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2d2db8e19a956b3be049fae99e7fd5ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10935,
      "upload_time": "2020-08-10T12:57:51",
      "upload_time_iso_8601": "2020-08-10T12:57:51.440887Z",
      "url": "https://files.pythonhosted.org/packages/5a/6d/54773788dce94122817410fa3769dde62b77e3c73798b1a37045b06fac17/django-counter-cache-field-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}