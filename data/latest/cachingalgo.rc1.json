{
  "info": {
    "author": "Surya Krishna Guthikonda",
    "author_email": "suryakguthikonda@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# cachingalgo\n\nThis project contains implementation different caching algorithms and request generation module to analyze the caching algorithms\n\n## Installation\n\nRun the following to install the package:\n\n```python\npip install cachingalgo\n```\n\nor Run the following to install in the Google Colab:\n\n```python\n# Clone the repo.\n!git clone https://github.com/SuryaKrishna02/caching-algorithms.git\n\n# Change the working directory to the repo root.\n%cd cachingalgo\n\n# Add the repo root to the Python path.\nimport sys, os\nsys.path.append(os.getcwd())\n```\n\n### Github Repository Notebooks\n\n- **Full Observation Single Cache:** LFU, WLFU, LFULite, CountSketch\n- **Full Observation Multiple Cache:** LRU, fLRU, LRUm\n- **Partial Observation Single Cache:** CBMPS, CBSI, CBSILite\n- **Tandem Model Static Data:** LFU-LFU, LFULite-LFULite\n- **Tandem Model Dynamic Data:** LU2, LU2-LFU, LU2-LFULite\n- **Dynamic Data:** LU, LU-LFU, LU-LFULite[C or 2C or 3C], LU-LFULite(V)[C or 2C or 3C]\n- **Cost Minimization:** CMSR, CMDR, CMDRM, CMDRP\n\n### Request Generation\n\n```python\nfrom cachingalgo.request_generation.continuous import szipf, dzipf, youtube, netflix\n\n# To generate requests which follows Static Zipf distribution.\n# 50,000 requests with library size = 1,61,085 and Zipf shape parameter = 1\n\nszdata = szipf(count=50_000, a=1, L=1_61_085)\n# Probabilty distribution\nszdataprob = szdata['prob']\n# Array of requests\nszdatareq = szdata['req']\n\n\n# To generate requests which follows Static Zipf distribution but with changing popularity.\n# 50,000 requests with library size = 1,61,085 and popularity changes for every 5,000 requests\n# by shifting probabilities of the top 500 items by 50.\n\ndzdata = dzipf(count=50_000, a=1, L=1_61_085, req_step=5_000, window=500, top=50, cache_size=10)\n# Array of requests\ndzdatareq = dzdata['req']\n# Array of size (count//req_step)*cache_size i.e optimal cache for each req_step requests\noptimalcache = dzdata['optim_cache']\n\n\n# To generate requests from the YouTube data.\n# 50,000 requests with the library size = 1,61,085\n\nytdata = youtube(count=50_000)\n# Probability distribution\nytdataprob = ytdata['prob']\n# Array of requests\nytdatareq = ytdata['req']\n\n\n# To generate requests from the Netflix data.\n# 50,000 requests with the library size = 17,770\n\nnetdata = netflix(count=50_000)\n# Probability distribution\nnetdataprob = netdata['prob']\n# Array of requests\nnetdatareq = netdata['req']\n```\n\nWe can use any of the four types of requests for analyzing the caching algorithms. In this documentation, we will use requests generated from the YouTube data.\n\n### Usage of LFU algorithm\n\n```python\nfrom cachingalgo.full_observation.single_cache import LFU\n\n# Initialising the algorithm\nalg = LFU(L=100, cache_size=5)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request)\n    # Returns the cache at current instant\n    currcache = alg.currcache()\n\n```\n\n### Usage of WLFU algorithm\n\n```python\nfrom cachingalgo.full_observation.single_cache import WLFU\n\n# Initialising the algorithm\nalg = WLFU(L=100, cache_size=5)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request)\n    # Returns the cache at current instant\n    currcache = alg.currcache()\n\n```\n\n### Usage of LFU-Lite algorithm\n\n```python\nfrom cachingalgo.full_observation.single_cache import LFULite\n\n# Initialising the algorithm\nalg = LFULite(L=100, cache_size=5)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request, i)\n    # Returns the cache at current instant\n    currcache = alg.currcache(i)\n\n```\n\n### Usage of LRU algorithm\n\n```python\nfrom cachingalgo.full_observation.single_cache import LRU\n\n# Initialising the algorithm\nalg = LRU(L=100, cache_size=5)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request)\n\n    # To check whether a request is present in the cache\n    present = request in alg\n```\n\n### Usage of Count-Sketch algorithm\n\n```python\nfrom cachingalgo.full_observation.single_cache import CountSketch\n\n# Initialising the algorithm\nalg = CountSketch(l=6, b=10, L=100)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request)\n    # Returns the cache at current instant\n    currcache = alg.currcache(request)\n```\n\n### Usage of f-LRU algorithm\n\n```python\nfrom cachingalgo.full_observation.multiple_cache import fLRU\n\n# Initialising the algorithm\nalg = fLRU(L=100, size=5, f=2)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request)\n\n    # To check whether a request is present in the cache\n    present = request in alg\n\n```\n\n### Usage of LRU(m) algorithm\n\n```python\nfrom cachingalgo.full_observation.multiple_cache import LRUm\n\n# Initialising the algorithm\nalg = LRUm(L=100, size=5, f=2, v=1)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request)\n\n    # To check whether a request is present in the cache\n    present = request in alg\n\n```\n\n### Usage of CB-MPS algorithm\n\n```python\nfrom cachingalgo.partial_observation.single_cache import CBMPS\n\n# Initialising the algorithm\nalg = CBMPS(L=100, cache_size=5)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Returns the cache at current instant\n    currcache = alg.currcache(request)\n    # Updates the counter\n    alg.update(request)\n\n```\n\n### Usage of CB-SI algorithm\n\n```python\nfrom cachingalgo.partial_observation.single_cache import CBSI, calculate_delta\n\n# Calculate the parameter which are to be provided for the CB-SI algorithms\ndelta, mu_c = calculate_delta(ytdataprob, cache_size=10)\n# Initialising the algorithm\nalg = CBSI(L=100, cache_size=5, delta=delta, mu_c=mu_c)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Returns the cache at current instant\n    currcache = alg.currcache(request)\n    # Updates the counter\n    alg.update(request)\n\n```\n\n### Usage of CB-SILite algorithm\n\n```python\nfrom cachingalgo.partial_observation.single_cache import CBSILite, calculate_delta\n\n# Calculate the parameter which are to be provided for the CB-SI algorithms\ndelta, mu_c = calculate_delta(ytdataprob, cache_size=10)\n# Initialising the algorithm\nalg = CBSILite(L=100, cache_size=5, delta=delta, mu_c=mu_c)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # update the counterbank\n    alg.counterbank_update(request)\n    # Returns the cache at current instant\n    currcache = alg.currcache(request)\n    # Updates the counter\n    alg.update(request)\n\n```\n\n### Usage of LU algorithm\n\n```python\nfrom cachingalgo.full_observation.single_cache import LU\n\n# Defining the parameters\nL = 100\ncache_size = 5\n\n# Freshness Constraint array\nF = np.ones((L,), dtype=int)\n\n# Initialising the algorithm\nalg = LU(L=L, F=F, cache_size=cache_size, arr=ytdataprob)\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Returns the cache and hit or miss information at current instant\n    currcache = alg.currcache(req=request, time=i)\n```\n\n### Usage of LU-LFU algorithm\n\n```python\nfrom cachingalgo.full_observation.single_cache import LU\n\n# Defining the parameters\nL = 100\ncache_size = 5\n\n# Freshness Constraint array\nF = np.ones((L,), dtype=int)\n\n# Initialising the algorithm\nalg = LU(L=L, F=F, cache_size=cache_size, method='lfu')\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request)\n    # Returns the cache and hit or miss information at current instant\n    currcache = alg.currcache(req=request, time=i)\n```\n\n### Usage of LU-LFULite[C or 2C or 3C] algorithm\n\n```python\nfrom cachingalgo.full_observation.single_cache import LU\nimport math\n# Defining the parameters\nL = 100\ncache_size = 5\nwindow = int((cache_size^2)*math.log(L))\n\n# Freshness Constraint array\nF = np.ones((L,), dtype=int)\n\n# Initialising the algorithm\nalg = LU(L=L, F=F, cache_size=cache_size, method='lfulite', window=window, freqtop=cache_size)\n\n# In the above initialisation changing freqtop, one can get\n# freqtop = 2*cache_size - LU-LFULite[2C] algorithm\n# freqtop = 3*cache_size - LU-LFULite[3C] algorithm\n\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request, ithreq=i)\n    # Returns the cache and hit or miss information at current instant\n    currcache = alg.currcache(req=request, time=i, ithreq=i)\n\n```\n\n### Usage of LU-LFULite(V)[C or 2C or 3C] algorithm\n\n```python\nfrom cachingalgo.full_observation.single_cache import LU\nimport math\n# Defining the parameters\nL = 100\ncache_size = 5\nwindow = int((cache_size^2)*math.log(L))\n\n# Freshness Constraint array\nF = np.ones((L,), dtype=int)\n\n# Initialising the algorithm\nalg = LU(L=L, F=F, cache_size=cache_size, method='lfulite', window=window, freqtop=cache_size, useF=True)\n\n# In the above initialisation changing freqtop, one can get\n# freqtop = 2*cache_size - LU-LFULite(V)[2C] algorithm\n# freqtop = 3*cache_size - LU-LFULite(V)[3C] algorithm\n\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request, ithreq=i)\n    # Returns the cache and hit or miss information at current instant\n    currcache = alg.currcache(req=request, time=i, ithreq=i)\n\n```\n\n### Usage of LU2 algorithm\n\n```python\nfrom cachingalgo.tandem_model.dynamic import LU2\n\n# Defining the parameters\nL = 100\n\n# Freshness Constraint array\nF = np.ones((L,), dtype=int)\n\n# Initialising the algorithm\nalg = LU2(L=L, F=F, cache_sizes=[5, 10], arr=ytdataprob)\n\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Returns the cache and hit or miss information at current instant\n    currcache = alg.currcache(req=request, time=i)\n```\n\n### Usage of LU2-LFU algorithm\n\n```python\nfrom cachingalgo.tandem_model.dynamic import LU2\n\n# Defining the parameters\nL = 100\n\n# Freshness Constraint array\nF = np.ones((L,), dtype=int)\n\n# Initialising the algorithm\nalg = LU2(L=L, F=F, cache_sizes=[5, 10], method='lfu')\n\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request)\n    # Returns the cache and hit or miss information at current instant\n    currcache = alg.currcache(req=request, time=i)\n```\n\n### Usage of LU2-LFULite(V)[3C] algorithm\n\n```python\nfrom cachingalgo.tandem_model.dynamic import LU2\nimport math\n\n# Defining the parameters\nL = 100\n# 5 is the size of cache 1\nwindow = int((5^2)*math.log(L))\n# Freshness Constraint array\nF = np.ones((L,), dtype=int)\n\n# Initialising the algorithm\nalg = LU2(L=L, F=F, cache_sizes=[5, 10], method='lfulite', window=window, fretop=3*5, useF=True)\n\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n    request = ytdatareq[i]\n    # Updates the counter\n    alg.update(request, ithreq=i)\n    # Returns the cache and hit or miss information at current instant\n    currcache = alg.currcache(req=request, time=i, ithreq=i)\n\n```\n\n### Usage of CMSR algorithm\n\n```python\nfrom cachingalgo.full_observation.cost_min import CMSR\n\n# Initialising the algorithm\nalg = CMSR(cache_size=5, L=100, beta=10, z=1.5, lambda_param=5, Cost=[1, 0.1, 0.05, 0.025], prob=ytdataprob, seed=7)\n\n# To retrieve the cache\nalgcache = alg.currcache()\n\n# To calculate the average system cost\navg_sys_cost = alg.avg_sys_cost(alg.mu_hat)\n\n```\n\n### Usage of CMDR algorithm\n\n```python\nfrom cachingalgo.full_observation.cost_min import CMDR\n\n# Defining the parameter\ncache_size = 5\n\n# Initialising the algorithm\nalg = CMDR(cache_size=cache_size, L=100, beta=10, z=1.5, lambda_param=5, Cost=[1, 0.1, 0.05, 0.025], prob=ytdataprob, C_hat=np.arange(cache_size, dtype='int'), seed=7)\n\n# To retrieve the cache\nalgcache = alg.currcache()\n\n# To calculate the average system cost\navg_sys_cost = alg.avg_sys_cost(alg.mu_hat)\n\n```\n\n### Usage of CMDRM algorithm\n\n```python\nfrom cachingalgo.full_observation.cost_min import CMDR\n\n# Defining the parameter\ncache_size = 5\n\n# Initialising the algorithm\nalg = CMDR(cache_size=cache_size, L=100, beta=10, z=1.5, lambda_param=5, Cost=[1, 0.1, 0.05, 0.025], cache_update='marg', seed=7)\n\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n  request = ytdatareq[i]\n\n  # To retrieve the cache\n  algcache = alg.currcache(request)\n\n  # To calculate the average system cost\n  avg_sys_cost = alg.avg_sys_cost(alg.mu_hat)\n```\n\n### Usage of CMDRP algorithm\n\n```python\nfrom cachingalgo.full_observation.cost_min import CMDR\n\n# Defining the parameter\ncache_size = 5\n\n# Initialising the algorithm\nalg = CMDR(cache_size=cache_size, L=100, beta=10, z=1.5, lambda_param=5, Cost=[1, 0.1, 0.05, 0.025], cache_update='pop', seed=7)\n\n# Total no. of requests\ntotalreq = ytdatareq.shape[0]\n\nfor i in range(totalreq):\n  request = ytdatareq[i]\n\n  # To retrieve the cache\n  algcache = alg.currcache(request)\n\n  # To calculate the average system cost\n  avg_sys_cost = alg.avg_sys_cost(alg.mu_hat)\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SuryaKrishna02/caching-algorithms",
    "keywords": "LFU,LFU-Lite,WLFU,LRU,LRUm,fLRU,CB-MPS,CB-SI,CB-SILite",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cachingalgo",
    "package_url": "https://pypi.org/project/cachingalgo/",
    "platform": null,
    "project_url": "https://pypi.org/project/cachingalgo/",
    "project_urls": {
      "Homepage": "https://github.com/SuryaKrishna02/caching-algorithms"
    },
    "release_url": "https://pypi.org/project/cachingalgo/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Package consists of implementation of caching algorithms and request generation modules",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15291459,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b291c9b9b13ac1882a0d1e1f0193ee421ca933e8d11484a32c9227f92b04000",
          "md5": "55a15ea79be00c6ebc41c9da4f014665",
          "sha256": "169e7450650185bf8543c81fd8fecda09582a6393f06ff36c60f3296fbc8497c"
        },
        "downloads": -1,
        "filename": "cachingalgo-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "55a15ea79be00c6ebc41c9da4f014665",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 784618,
        "upload_time": "2022-10-03T15:58:33",
        "upload_time_iso_8601": "2022-10-03T15:58:33.985279Z",
        "url": "https://files.pythonhosted.org/packages/2b/29/1c9b9b13ac1882a0d1e1f0193ee421ca933e8d11484a32c9227f92b04000/cachingalgo-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b291c9b9b13ac1882a0d1e1f0193ee421ca933e8d11484a32c9227f92b04000",
        "md5": "55a15ea79be00c6ebc41c9da4f014665",
        "sha256": "169e7450650185bf8543c81fd8fecda09582a6393f06ff36c60f3296fbc8497c"
      },
      "downloads": -1,
      "filename": "cachingalgo-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "55a15ea79be00c6ebc41c9da4f014665",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 784618,
      "upload_time": "2022-10-03T15:58:33",
      "upload_time_iso_8601": "2022-10-03T15:58:33.985279Z",
      "url": "https://files.pythonhosted.org/packages/2b/29/1c9b9b13ac1882a0d1e1f0193ee421ca933e8d11484a32c9227f92b04000/cachingalgo-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}