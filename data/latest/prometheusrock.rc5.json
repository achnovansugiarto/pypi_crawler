{
  "info": {
    "author": "Nikita Kozhushko (kozhushman)",
    "author_email": "kozhushman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PrometheusRock\n![Python package](https://github.com/kozhushman/prometheusrock/workflows/Python%20package/badge.svg?branch=main)\n![CodeQL](https://github.com/kozhushman/prometheusrock/workflows/CodeQL/badge.svg?branch=main)\n\nPrometheus middleware for Starlette and FastAPI\n\nThis middleware collects couple of basic metrics and allow you to add your own ones.\n\n**Basic metrics**:\n* Counter: requests_total\n* Histogram: request_processing_time\n\n\nBasic labels for them:\n* method\n* path\n* status_code\n* `User-Agent` and `Host` headers \n* application name\n\nExample:  \n```sh\nrequest_processing_time_sum{app_name=\"test_app\",headers=\"{'host': '127.0.0.1:8020', 'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:81.0) Gecko/20100101 Firefox/81.0'}\",path=\"/test\",status_code=\"200\"} 0.00036406517028808594\n```\n\nMetrics include labels for the HTTP method, the path, and the response status code.\n\nSet for path `/metrics` handler `metrics_route` and your metrics will be exposed on that url for Prometheus further use.\n\n## Usage\n\n### 1. I don't want anything custom, just give me the basics!\nIf you don't want nothing extra, this is for you. Grab the code and run to paste it!\n\nFor **starlette** and **FastAPI** init part pretty similar.\n\n1. First:\n    ```\n    pip install prometheusrock\n    ```\n2. Second:\n\n    Choose your fighter!\n    If you're using starlette:\n    ```python\n    from starlette.applications import Starlette\n   ```\n   And if you're using FastAPI:\n   ```python\n    from fastapi import FastAPI\n   ```\n   Moving further:\n   ```python\n    from prometheusrock import PrometheusMiddleware, metrics_route\n\n    app = # Starlette() or FastAPI()\n    app.add_middleware(PrometheusMiddleware)\n    app.add_route(\"/metrics\", metrics_route)\n    ...\n    ```\n\n    And that's it! Now go on `/metrics` and see your logs!\n\n### 2. Custom you say? Let me see...but just a little!\nIf you want to configure basic metrics let me show you how!\n\nWhen you declare middleware, you can pass following args:\n* `app_name` - the name you want to show in metrics as the name of your app. Default - \"ASGIApp\",\n* `additional_headers` - if you want to track additional headers (aside of default ones - `user-agent` and `host`)\nyou can pass `list` (that's important!) with names of that headers. They all cast to lowercase, so casing doesn't matters.\n* `remove_labels` - by default basic metrics labels are following: `method`, `path`, `status_code`, `headers`, `app_name`.\nIf you don't wanna some of them - pass `list` with their names here. And their gone!\n* `skip_paths` - sometimes you don't wanna log some of the endpoint. \n(Fore example you don't wanna log accesses to `/metrics` in your metrics).\nIf you want to exclude this paths from metric - pass here `list` with their urls.\nBy default this middleware ignores `/metrics` route, \nso if you initially moved your metric route to some other url - pass it here.\nIf you want to log all routes (even the default `/metrics` - pass an empty list!)\n* `disable_default_counter` - if you want to disable default Counter metric - pass `True` value to this optional param.\n* `disable_default_histogram` - if you want to disable default Histogram metric - pass `True` value to this optional param.\n* `custom_base_labels` - if you want change default labels to yours - pass them here.\n  **REWRITES DEFAULT LABLES**. Args `remove_labels` **WILL BE IGNORED**.   \n  example - `['path','method']` - and you have metric, that contains only `path` and `method` labels.\n* `custom_base_headers` - if you want change default headers to yours - pass them here.\n  **REWRITES DEFAULT HEADERS**. Args `additional_headers` **WILL BE IGNORED**.\n  If you use `custom_base_labels`, don't forget to pass `headers` in it, \n  otherwise `custom_base_headers` will have no effect.  \n  example - `['content-type','x-api-client']` - and now you write only these two headers.\n* `aggregate_paths` - if you have endpoints like `/item/{id}`, then, by default,\nyour logs will quickly overflow, showing you huge amount of numbers, when, in fact,\nendpoint is one. So pass here list of endpoints path to aggregate by.\nexample - `['/item/']`\n\nBut a picture is worth a thousand words, right? Let's see some code!\nFor example, we want our middleware to have a following settings:\nwe want a name `this_is_my_app`, we want to track header `accept-encoding`, we don't wanna label `path` (if you have one endpoint for example),\nand we don't want url `/_healthcheck` to be tracked.\n```python\napp.add_middleware(\n    PrometheusMiddleware,\n    app_name='this_is_my_app',\n    additional_headers=['accept-encoding'],\n    remove_labels=['path'],\n    skip_paths=['/_healthcheck']\n)\n```\n\nAnd after that, our metric will look something like that:\n```sh\nrequests_total{app_name=\"this_is_my_app\",headers=\"{'host': '127.0.0.1:8000', 'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:81.0) Gecko/20100101 Firefox/81.0', 'accept-encoding': 'gzip, deflate'}\",method=\"GET\",status_code=\"200\"} 1.0\n```\n\n## Let's go deeper! Add your own custom metric!\n\nAnd the star of the evening - custom metrics!\nSo, lets suppose you want to check how many are rows in your Database after each request. Let's explore this:\n\nFirst, we do all the same things - we initiate the app, we add PrometheusMiddleware.\nAnd the next steps are:\n1. We must decide what type of metric we want - [choose one from here](https://github.com/prometheus/client_python). Basically, you will need pass one of the types - `info, gauge, counter, histogram, summary, enum`.\n2. We declare the function that will act like our metric logic:\n   ```python\n   # async here isn't necessary, you can use ordinary function\n    async def query(middleware_proxy):\n        res = await db.execute_query(\n            \"SELECT COUNT(*) as count from MyTable\"\n        )\n        middleware_proxy.metric.labels(**res)\n    ```\n   Function **MUST** accept this argument. Obviously you can name it however you want,\n   as long is it still there. If you want to know what's inside - \n   `from prometheusrock import Metric`. I strongly recommend to pass it as typehinting:\n   ```python\n   from prometheusrock import Metric\n   ...\n   async def query(middleware_proxy: Metric):\n    ```\n   Metric have 3 attributes:\n   * metric - instance of `prometheus_client` metric object.\n   * metric_type - string with type.\n   * spent_time - time, that was spent on request. You may need it if you, for example, implementing Histogram metric.\n   * request - request object from app.\n\n   And now **IMPORTANT** remark - you *must* correctly invoke metric! \n   So if you, for example, chose `Counter` metric, in your custom function you must do `middleware_proxy.metric.labels(**res).inc()`,\n   or if you chose Histogram - `middleware_proxy.metric.labels(**res).observe(middleware_proxy.spent_time)` and so on,\n   according to [this docs](https://github.com/prometheus/client_python).\n   Value that you're passing there - `res` (or however you called it) must be a sequence of the parameters, \n   that you set as lables for your metric. For example, if your metric have labels `count` and `id`, `res` must be\n   a dictionary `{\"count\": count, \"id\": id}` or list with right positioning - `[count, id]`.\n\n3. And finally we tell our middleware about our custom metric:\n    ```python\n    from prometheusrock import AddMetric, PrometheusMiddleware\n    ...\n\n    app.add_middleware(PrometheusMiddleware)\n    ...\n\n   # async here isn't necessary, you can use ordinary function\n    async def query(middleware_proxy):\n        res = await db.execute_query(\n            \"SELECT COUNT(*) as count from MyTable\"\n        )\n        middleware_proxy.metric.labels(**res)\n\n    AddMetric(\n        function=query,  \n        metric_name='my_precious', \n        metric_type='info',  \n        labels=['row_count']\n    )\n    ```\n    AddMetric accept following params:\n    * function - function that will work as your metric logic\n    * metric_name - unique metric name, must be ONE-WORDED (e.g. unique_metric_name). Default - \"user_metric\".\n    * metric_description- description of your metric. Default- \"description of user metric\".\n    * labels - list of lables that you want your metric to contain. Default - [\"info\"].\n    * metric_type - one of `prometheus_client` metric types - described in paragraph 1.\n\n## Links and dependencies\n\nDependencies:\n[Starlette](https://github.com/encode/starlette), \n[client_python](https://github.com/prometheus/client_python)\n\nAdditional links:\n[FastAPI](https://github.com/tiangolo/fastapi)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kozhushman/prometheusrock",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "prometheusrock",
    "package_url": "https://pypi.org/project/prometheusrock/",
    "platform": "",
    "project_url": "https://pypi.org/project/prometheusrock/",
    "project_urls": {
      "Homepage": "https://github.com/kozhushman/prometheusrock"
    },
    "release_url": "https://pypi.org/project/prometheusrock/0.2.0/",
    "requires_dist": [
      "starlette",
      "prometheus-client"
    ],
    "requires_python": "",
    "summary": "Prometheus middleware for Starlette and FastAPI",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9956532,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dec525e4a745ecd1a5eb859f7919c2524491ecf6071e25f90688f15bf2636aac",
          "md5": "c68898e224087790c91a37b4b0bfa2f8",
          "sha256": "788ec5d7d84543a19f6e1424211e46ed470acbf771baef2495c9de3434ad6a4a"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c68898e224087790c91a37b4b0bfa2f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8821,
        "upload_time": "2020-10-12T07:44:58",
        "upload_time_iso_8601": "2020-10-12T07:44:58.582957Z",
        "url": "https://files.pythonhosted.org/packages/de/c5/25e4a745ecd1a5eb859f7919c2524491ecf6071e25f90688f15bf2636aac/prometheusrock-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74ac60220e4e10efc767489a4b3de01dc967d6d07f9b3d28240238b0551bab52",
          "md5": "428aeb37a73149f1390aeeb3f8dec734",
          "sha256": "408247d67cfbc03e4cf098a23cdfd93feb7ec7653cca7d1219b48455244995a8"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "428aeb37a73149f1390aeeb3f8dec734",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8008,
        "upload_time": "2020-10-12T07:45:01",
        "upload_time_iso_8601": "2020-10-12T07:45:01.652857Z",
        "url": "https://files.pythonhosted.org/packages/74/ac/60220e4e10efc767489a4b3de01dc967d6d07f9b3d28240238b0551bab52/prometheusrock-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef0dfdb6f9672696824839dd1672d8cc536ec0c9c9b2b49e88e4d4ab4e442926",
          "md5": "3035a93a8f5493e4f591b8954786d470",
          "sha256": "e7b62835179ccc079398dd292d06c3354e6cd912ce09ed47d57b3a6a8e256734"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3035a93a8f5493e4f591b8954786d470",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9200,
        "upload_time": "2020-11-06T14:33:04",
        "upload_time_iso_8601": "2020-11-06T14:33:04.930778Z",
        "url": "https://files.pythonhosted.org/packages/ef/0d/fdb6f9672696824839dd1672d8cc536ec0c9c9b2b49e88e4d4ab4e442926/prometheusrock-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19b8e197c54b982453b2d9d056495227aad62df56cada833e4d9305ff3512f06",
          "md5": "f2bf123dd619fa087970127fe1f34fec",
          "sha256": "c0bd75cca0530973f572efae36d1b9f2bcad774fb24e41840890fcd730d14945"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f2bf123dd619fa087970127fe1f34fec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9991,
        "upload_time": "2020-11-06T14:33:07",
        "upload_time_iso_8601": "2020-11-06T14:33:07.490775Z",
        "url": "https://files.pythonhosted.org/packages/19/b8/e197c54b982453b2d9d056495227aad62df56cada833e4d9305ff3512f06/prometheusrock-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d49b59b4c7da148cd4df6a6b049b410e94def94d75e99e379a763f4db7c8cb92",
          "md5": "35dbc71f6b1cf5cff55bc097301b2fce",
          "sha256": "e123d6dfab5bb14c227cecd034fb991f4a51bf73f370a5d8c494f3bf3825b539"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35dbc71f6b1cf5cff55bc097301b2fce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9195,
        "upload_time": "2020-11-24T09:52:51",
        "upload_time_iso_8601": "2020-11-24T09:52:51.589878Z",
        "url": "https://files.pythonhosted.org/packages/d4/9b/59b4c7da148cd4df6a6b049b410e94def94d75e99e379a763f4db7c8cb92/prometheusrock-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bc7dd05c304b64cdac2040c37ee7406ce0a49ffc129c073bddee773e4166845",
          "md5": "d4a120c38324432d61ebb1ae9552c817",
          "sha256": "f6880e083cbbf2e2a5d142c9ac9d97c7162e58817fe37e96767a5950c0ec7337"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d4a120c38324432d61ebb1ae9552c817",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9983,
        "upload_time": "2020-11-24T09:52:53",
        "upload_time_iso_8601": "2020-11-24T09:52:53.095876Z",
        "url": "https://files.pythonhosted.org/packages/0b/c7/dd05c304b64cdac2040c37ee7406ce0a49ffc129c073bddee773e4166845/prometheusrock-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "403079bcc613de8b9eeca9cd9baccb937ddb10b8aedd756e562c0b7990270cf8",
          "md5": "04ae52d38ff3e065c08cb2caced12510",
          "sha256": "75801b7c9c4f0f9de4732fdabbf5d5224e7e45191e24165e2d27c39793274845"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04ae52d38ff3e065c08cb2caced12510",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9227,
        "upload_time": "2020-12-11T06:56:21",
        "upload_time_iso_8601": "2020-12-11T06:56:21.115878Z",
        "url": "https://files.pythonhosted.org/packages/40/30/79bcc613de8b9eeca9cd9baccb937ddb10b8aedd756e562c0b7990270cf8/prometheusrock-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e13e0f55e571193be45773355d655d834d18106e718b9176f0f1d214970e8ab0",
          "md5": "34ef05fdd260b43ac897b3d68767ad22",
          "sha256": "3f0e69ea9cfabe6622972c4cec38e0f75ec8bb03e8dadecd5c6fa4fb5a5a7322"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "34ef05fdd260b43ac897b3d68767ad22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10034,
        "upload_time": "2020-12-11T06:56:22",
        "upload_time_iso_8601": "2020-12-11T06:56:22.651526Z",
        "url": "https://files.pythonhosted.org/packages/e1/3e/0f55e571193be45773355d655d834d18106e718b9176f0f1d214970e8ab0/prometheusrock-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "388d310fdf76cb960416f6df34b5930f102666ddf996165e648a9e560eed7f9d",
          "md5": "5fb95467287ace6e7981faf5e3010b3e",
          "sha256": "e98723a30ab2cfcfd173cc5fd25c2dd3a492e53ca07ee1fc21b0bf986a97944e"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fb95467287ace6e7981faf5e3010b3e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9965,
        "upload_time": "2021-04-02T11:00:10",
        "upload_time_iso_8601": "2021-04-02T11:00:10.330862Z",
        "url": "https://files.pythonhosted.org/packages/38/8d/310fdf76cb960416f6df34b5930f102666ddf996165e648a9e560eed7f9d/prometheusrock-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c13eab798d882544f0c69990c56fe1f8dfed8d1f6fce1b34294207bf9f63cd18",
          "md5": "a268648c2715def66b61227801d8682b",
          "sha256": "8855f2f1fea43ff7570c39b49755b9eb9f1b193395da241d805f1819eda0efe7"
        },
        "downloads": -1,
        "filename": "prometheusrock-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a268648c2715def66b61227801d8682b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11150,
        "upload_time": "2021-04-02T11:00:12",
        "upload_time_iso_8601": "2021-04-02T11:00:12.380058Z",
        "url": "https://files.pythonhosted.org/packages/c1/3e/ab798d882544f0c69990c56fe1f8dfed8d1f6fce1b34294207bf9f63cd18/prometheusrock-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "388d310fdf76cb960416f6df34b5930f102666ddf996165e648a9e560eed7f9d",
        "md5": "5fb95467287ace6e7981faf5e3010b3e",
        "sha256": "e98723a30ab2cfcfd173cc5fd25c2dd3a492e53ca07ee1fc21b0bf986a97944e"
      },
      "downloads": -1,
      "filename": "prometheusrock-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5fb95467287ace6e7981faf5e3010b3e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9965,
      "upload_time": "2021-04-02T11:00:10",
      "upload_time_iso_8601": "2021-04-02T11:00:10.330862Z",
      "url": "https://files.pythonhosted.org/packages/38/8d/310fdf76cb960416f6df34b5930f102666ddf996165e648a9e560eed7f9d/prometheusrock-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c13eab798d882544f0c69990c56fe1f8dfed8d1f6fce1b34294207bf9f63cd18",
        "md5": "a268648c2715def66b61227801d8682b",
        "sha256": "8855f2f1fea43ff7570c39b49755b9eb9f1b193395da241d805f1819eda0efe7"
      },
      "downloads": -1,
      "filename": "prometheusrock-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a268648c2715def66b61227801d8682b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11150,
      "upload_time": "2021-04-02T11:00:12",
      "upload_time_iso_8601": "2021-04-02T11:00:12.380058Z",
      "url": "https://files.pythonhosted.org/packages/c1/3e/ab798d882544f0c69990c56fe1f8dfed8d1f6fce1b34294207bf9f63cd18/prometheusrock-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}