{
  "info": {
    "author": "Vianney ADOU",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Python Mercure (pymcure) [Français]\r\n\r\nL'objectif de cette bibliothèque est de fournir un moyen rapide de publier et de consommer des messages sur Mercure. \r\nSi vous ne savez pas ce qu'est Mercure, jetez un coup d'œil ici: (https://github.com/dunglas/mercure).\r\n\r\nCette bibliothèque est actuellement en cours de développement, \r\ndonc si vous trouvez un bogue ou une chance d'amélioration, veuillez nous en faire part. :)\r\n\r\nNous nous sommes inspirés de la bibliotheque pymercure créée et maintenue par Vitor Villar (Salut Vitor :) ) qui est consultable ici https://github.com/vitorluis/python-mercure\r\n\r\n## Installation de la bibliothèque\r\n\r\nLa bibliothèque est disponible sur PyPi, vous pouvez donc l'installer en utilisant pip :\r\n\r\n     pip3 install pymcure\r\n\r\n## Publication des messages\r\n\r\nComme mentionné précédemment, l'objectif est de fournir un moyen rapide de publier des messages.\r\nEt pour ce faire, il a fourni les classes Sync et Async.\r\n \r\n \r\n### Publication des messages Synchrone\r\n\r\n```python\r\nimport json\r\nfrom pymcure.client.publisher.sync import SyncPublisher\r\nfrom pymcure.client.message import Message\r\n\r\ndata = json.dumps({'status': 'test'})\r\nmsg = Message(['mytopicname'], data)\r\npublisher = SyncPublisher(mercure_hub='http://127.0.0.1:3000/.well-known/mercure',mercure_jwt=None,secret='your.secret.phrase'\r\n)\r\npublisher.publish(msg)\r\n```\r\n#### La classe SyncPublisher a pour paramettre\r\n##### mercure_hub \r\nLe lien du hub mercure \r\n\r\n##### mercure_jwt\r\nLe token JWT pour s'authentifier sur le hub. Si vous ne voulez pas generer vous même votre token donner la valeur ```None```\r\net definissez les paramettres suivant\r\n\r\n##### secret\r\nJe mot secret utilisé pour demarrer le hub\r\n\r\n#### payload\r\nLe payload est defini par defaut, mais vous pouvez definir le votre\r\n\r\ndefinition par defaut\r\n```json\r\nPAYLOAD = {\r\n    \"mercure\": {\r\n        \"subscribe\": [\r\n        ],\r\n        \"publish\": [\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n#### header\r\nLe header est definir par defaut, mais vous pouvez definir le votre\r\n\r\ndefinition par defaut\r\n```json\r\nHEADER = {\r\n    \"typ\": \"JWT\",\r\n    \"alg\": \"HS256\"\r\n}\r\n```\r\n\r\n### Publication des messages Asynchrone\r\n\r\n```python\r\nimport json\r\nfrom pymcure.client.publisher.asynch import AsyncPublisher\r\nfrom pymcure.client.message import Message\r\n\r\ndata = json.dumps({'status': 'test'})\r\nmsg = Message(['mytopicname'], data)\r\npublisher = AsyncPublisher(\r\n     'http://127.0.0.1:3000/.well-known/mercure',\r\n     'your.Token.Here'\r\n)\r\npublisher.publish(msg)\r\n```\r\n\r\nDans le cas d'une asynchronisation, la demande sera faite en utilisant la bibliothèque de gevent.\r\n\r\n## Consommation de messages\r\n\r\nPour consommer des messages, c'est aussi assez simple. car le consommateur court dans un nouveau fil\r\nvous n'avez pas à vous en préoccuper, il vous suffit de lui passer une fonction de rappel:\r\n\r\n```python\r\nfrom pymcure.client.consumer import Consumer\r\n\r\ndef callback(message):\r\n    print(message.data)\r\n\r\n\r\nc = Consumer('http://127.0.0.1:3000/.well-known/mercure', ['mytopicname'], callback)\r\nc.start_consumption()\r\n```\r\n\r\nLors de votre rappel, vous recevrez toujours l'objet \"Message\", avec les données et les métadonnées du message.\r\n\r\n## BONUS\r\nPour demarrer le hub mercure il faut soit:\r\n\r\n### Docker\r\n\r\nMode demo\r\n```shell\r\ndocker run -e JWT_KEY='!ChangeMe!' -e DEMO=1 -e ALLOW_ANONYMOUS=1 -e CORS_ALLOWED_ORIGINS=* -e PUBLISH_ALLOWED_ORIGINS='*' -p 80:80 dunglas/mercure\r\n```\r\n\r\nMode prod\r\n```shell\r\ndocker run \\\r\n    -e JWT_KEY='!ChangeMe!' -e ACME_HOSTS='*' \\\r\n    -p 80:80 -p 443:443 \\\r\n    dunglas/mercure\r\n```\r\n\r\n### Binaire\r\nTéléchargez le binaire qui convient à votre système ici https://github.com/dunglas/mercure/releases\r\nSe déplacer dans le repertoire et executer le binaire avec les paramettre suivant\r\n\r\n```shell\r\nJWT_KEY='your.secrer.phrase' ADDR=:3000 DEMO=1 ALLOW_ANONYMOUS=1 PUBLISH_ALLOWED_ORIGINS='*' CORS_ALLOWED_ORIGINS='*' ./mercure\r\n```\r\n\r\n## Crédits\r\n\r\nCréé et maintenu par Vianney ADOU <adoujmv@gmail.com>\r\n\r\n\r\n# Python Mercure (pymcure) [English]\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ouleur/Pymcure",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymcure",
    "package_url": "https://pypi.org/project/pymcure/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pymcure/",
    "project_urls": {
      "Homepage": "https://github.com/Ouleur/Pymcure"
    },
    "release_url": "https://pypi.org/project/pymcure/0.0.1.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.0.1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12929757,
  "releases": {
    "0.0.1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4eabb0fc6be2545b57602cb78224a55942186fba5b2656616fe80c1d709983fb",
          "md5": "03b39028b7a1366595d7b069cce44fbb",
          "sha256": "3c8db80bb7349305c95abc8ff0a3669eba0c092556731d1cdeaff91aa52332cd"
        },
        "downloads": -1,
        "filename": "pymcure-0.0.1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "03b39028b7a1366595d7b069cce44fbb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8723,
        "upload_time": "2022-02-18T01:48:22",
        "upload_time_iso_8601": "2022-02-18T01:48:22.828421Z",
        "url": "https://files.pythonhosted.org/packages/4e/ab/b0fc6be2545b57602cb78224a55942186fba5b2656616fe80c1d709983fb/pymcure-0.0.1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4eabb0fc6be2545b57602cb78224a55942186fba5b2656616fe80c1d709983fb",
        "md5": "03b39028b7a1366595d7b069cce44fbb",
        "sha256": "3c8db80bb7349305c95abc8ff0a3669eba0c092556731d1cdeaff91aa52332cd"
      },
      "downloads": -1,
      "filename": "pymcure-0.0.1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "03b39028b7a1366595d7b069cce44fbb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8723,
      "upload_time": "2022-02-18T01:48:22",
      "upload_time_iso_8601": "2022-02-18T01:48:22.828421Z",
      "url": "https://files.pythonhosted.org/packages/4e/ab/b0fc6be2545b57602cb78224a55942186fba5b2656616fe80c1d709983fb/pymcure-0.0.1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}