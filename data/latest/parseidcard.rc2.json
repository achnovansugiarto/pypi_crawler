{
  "info": {
    "author": "潘高",
    "author_email": "pangao1990@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "更多内容，请访问我的 [个人博客](https://blog.pangao.vip/可能是Python中最好用的身份证解析工具—parseIdCard/)。\n\n---\n\n### 前言\n\n> 2021.08.03，武汉新冠疫情似有复苏的迹象，于是武汉政府立即采取果断措施，启动全城核酸检测。很荣幸，我们公司也积极参与核酸检测工作。我在其中参与了核酸实验和数据校对的工作。在数据校对过程中，主要矛盾体现在身份证不匹配的问题上。于是，我写了这个可能是 Python 中最好用的身份证解析工具--parseIdCard。\n\n### 身份证格式说明\n\n根据〖中华人民共和国国家标准 GB11643-1999〗中有关公民身份号码的规定，公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。如下所示：\n\n42 01 16 20200103 12 3 X\n\n- 42 => 湖北（省）\n- 01 => 武汉（市）\n- 16 => 黄陂（区）\n- 20200103 => 2020 年 01 月 03 日（出生日期）\n- 12 => 派出所代码\n- 3 => 性别码\n- X => 校验码\n\n### 具体代码实现\n\n#### 地区码校验\n\n地区码比较简单，就是地区与编码的一一对应关系，整理如下数据库就行。\n\n```\n420101\t湖北武汉市市辖区\n420102\t湖北武汉市江岸区\n420103\t湖北武汉市江汉区\n420104\t湖北武汉市乔口区\n420105\t湖北武汉市汉阳区\n420106\t湖北武汉市武昌区\n420107\t湖北武汉市青山区\n420111\t湖北武汉市洪山区\n420112\t湖北武汉市东西湖区\n420113\t湖北武汉市汉南区\n420114\t湖北武汉市蔡甸区\n420115\t湖北武汉市江夏区\n420116\t湖北武汉市黄陂区\n420117\t湖北武汉市新洲区\n......\n```\n\n再将地区码与数据库比对，用 Python 代码实现如下：\n\n```\ndef __checkArea(areaId):\n    '''校验地区。输入6位地区编码字符串，返回：{code, id, area}'''\n    if len(areaId) != 6:\n        return {'code': 'Error', 'id': areaId, 'area': '地区编码应该为6位'}\n    else:\n        if areaId.isdigit():\n            dbAreaPath = os.path.join(os.path.dirname(__file__), 'area')\n            conn = sqlite3.connect(dbAreaPath)\n            cur = conn.cursor()\n            cur.execute(\"SELECT DISTINCT area FROM area WHERE id = '\" + areaId + \"'\")\n            returnArea = ''\n            for c in cur:\n                returnArea = c[0]\n            conn.close()\n            if returnArea == '':\n                return {'code': 'Error', 'id': areaId, 'area': '未知地区编码'}\n            else:\n                return {'code': 'OK', 'id': areaId, 'area': returnArea}\n        return {'code': 'Error', 'id': areaId, 'area': '非法地区编码'}\n```\n\n#### 出生日期校验\n\n众所周知，日期是有一定的规律的。比如：年份是四位数字，月份和日是两位数字，月份最多只有 12 月，日最多只有 31，不过有的月份是 28、29、30。把这些常见的规则，用 Python 代码实现如下：\n\n```\ndef __checkBirthdate(ymd):\n    '''校验出生日期。输入8位出生日期字符串，返回：{code, id, age}'''\n    if len(ymd) != 8:\n        return {'code': 'Error', 'id': ymd, 'age': '出生日期应该为8位'}\n    else:\n        if ymd.isdigit():\n            yearInt = int(ymd[:4])\n            currentYearInt = datetime.now().year\n            age = currentYearInt - yearInt\n            if age >= 0:\n                # 闰年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))\n                # 平年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))\n                if (yearInt % 4 == 0 or yearInt % 100 == 0 and yearInt % 4 == 0):\n                    ereg = re.compile('([1-9][0-9]{3})((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))')\n                else:\n                    ereg = re.compile('([1-9][0-9]{3})((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))')\n                if (re.match(ereg, ymd)):\n                    # 校验通过\n                    return {'code': 'OK', 'id': ymd, 'age': age}\n        return {'code': 'Error', 'id': ymd, 'age': '非法出生日期'}\n```\n\n#### 性别校验\n\n性别校验的规则比较简单，奇数为男，偶数为女。用 Python 代码实现如下：\n\n```\ndef __checkGender(gender):\n    '''校验性别。输入1位性别编码字符串，返回：{code, id, gender}'''\n    if len(gender) != 1:\n        return {'code': 'Error', 'id': gender, 'gender': '性别编码应该为1位'}\n    else:\n        if gender.isdigit():\n            genderInt = int(gender)\n            if genderInt % 2 == 0:\n                # 偶数 => 女\n                return {'code': 'OK', 'id': gender, 'gender': '女'}\n            else:\n                # 奇数 => 男\n                return {'code': 'OK', 'id': gender, 'gender': '男'}\n        else:\n            return {'code': 'Error', 'id': gender, 'gender': '非法性别编码'}\n```\n\n#### 校验码\n\n其他组码都好理解，这最后一位的校验码，就比较复杂了。校验码是根据前面十七位数字码，按照 ISO7064:1983.MOD11-2 校验码计算出来的。详细步骤如下所示：\n\n```\n1、将身份证号码前17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2\n2、将这17位数字和系数相乘的结果相加\n3、用加出来和除以11，看余数是多少\n4、余数只可能有0 1 2 3 4 5 6 7 8 9 10这11个数字。其分别对应的校验码为1 0 X 9 8 7 6 5 4 3 2\n```\n\n按照以上逻辑，用 Python 代码实现如下：\n\n```\ndef __checkJYM(inStr):\n    '''校验校验码。输入17位字符串，返回：{code, id, area, age, gender, jym}'''\n    if len(inStr) != 17:\n        return {'code': 'Error', 'id': inStr, 'jym': '请输入身份证前17位'}\n    else:\n        if inStr.isdigit():\n            # 校验地区\n            resultArea = __checkArea(inStr[:6])\n            area = resultArea['area']\n            if resultArea['code'] == 'Error':\n                return {'code': 'Error', 'id': inStr, 'jym': area}\n            # 校验出生日期\n            resultBirthdate = __checkBirthdate(inStr[6:14])\n            age = resultBirthdate['age']\n            if resultBirthdate['code'] == 'Error':\n                return {'code': 'Error', 'id': inStr, 'jym': age}\n            # 校验性别\n            resultGender = __checkGender(inStr[16:17])\n            gender = resultGender['gender']\n            if resultGender['code'] == 'Error':\n                return {'code': 'Error', 'id': inStr, 'jym': gender}\n            S = (int(inStr[0]) + int(inStr[10])) * 7 + (int(inStr[1]) + int(inStr[11])) * 9 + (int(inStr[2]) + int(inStr[12])) * 10 + (int(inStr[3]) + int(inStr[13])) * 5 + (int(inStr[4]) + int(inStr[14])) * 8 + (int(inStr[5]) + int(inStr[15])) * 4 + (int(inStr[6]) + int(inStr[16])) * 2 + int(inStr[7]) * 1 + int(inStr[8]) * 6 + int(inStr[9]) * 3\n            Y = S % 11\n            jym = ''    # 校验码\n            jymList = '10X98765432'\n            if Y <= 10:\n                jym = jymList[Y]  # 校验码\n                return {'code': 'OK', 'id': inStr, 'area': area, 'age': age, 'gender': gender, 'jym': jym}\n        return {'code': 'Error', 'id': inStr, 'jym': '非法输入参数'}\n```\n\n#### 身份证编码校验\n\n综上，即可对整体身份证编码进行校验，用 Python 代码实现如下：\n\n```\ndef __checkIdCard(idCard):\n    '''校验身份证。输入18位身份证字符串，返回：{code, id, gender}'''\n    if len(idCard) != 18:\n        return {'code': 'Error', 'id': idCard, 'gender': '身份证编码应该为18位'}\n    else:\n        idCard17 = idCard[:17]    # 前17位\n        idCardLast = idCard[-1:]    # 最后一位\n        if idCard17.isdigit() and re.match('([0-9]|X|x)', idCardLast):\n            resultJYM = __checkJYM(idCard17)\n            if resultJYM['code'] == 'Error':\n                infoList = list()\n                if 'area' in resultJYM:\n                    infoList.append(resultJYM['area'])\n                    del resultJYM['area']\n                if 'age' in resultJYM:\n                    infoList.append(resultJYM['age'])\n                    del resultJYM['age']\n                if 'gender' in resultJYM:\n                    infoList.append(resultJYM['gender'])\n                    del resultJYM['gender']\n                if 'jym' in resultJYM:\n                    infoList.append(resultJYM['jym'])\n                    del resultJYM['jym']\n                resultJYM['info'] = '；'.join(infoList)\n                return resultJYM\n            if idCardLast == resultJYM['jym']:\n                del resultJYM['jym']\n                resultJYM['info'] = '身份证校验通过'\n                return resultJYM\n            else:\n                return {'code': 'Error', 'id': idCard, 'info': '身份证校验码错误'}\n        else:\n            return {'code': 'Error', 'id': idCard, 'info': '非法身份证编码'}\n```\n\n### parseIdCard 工具的使用\n\n安装 parseIdCard 工具，如下所示：\n\n```\npip install parseIdCard\n```\n\n使用方法，如下所示：\n\n```\nfrom parseIdCard import parseIdCard\n\n## 校验地区码。可以输入整型，列表，字符串(可用逗号等分割多条信息码)\nparseIdCard.parseArea(420116)\n# 输出 {'code': 'OK', 'id': '420116', 'area': '湖北武汉市黄陂区'}\n\nparseIdCard.parseArea(['429116', '42010'])\n# 输出 [{'code': 'Error', 'id': '429116', 'area': '未知地区编码'}, {'code': 'Error', 'id': '42010', 'area': '地区编码应该为6位'}]\n\nparseIdCard.parseArea('420116,420101')\n# 输出 [{'code': 'OK', 'id': '420116', 'area': '湖北武汉市黄陂区'}, {'code': 'OK', 'id': '420101', 'area': '湖北武汉市市辖区'}]\n\n\n## 校验出生日期。可以输入整型，列表，字符串(可用逗号等分割多条信息码)\nparseIdCard.parseBirthdate(20200103)\n# 输出 {'code': 'OK', 'id': '20200103', 'age': 1}\n\nparseIdCard.parseBirthdate(['00000000', '22221203'])\n# 输出 [{'code': 'Error', 'id': '00000000', 'age': '非法出生日期'}, {'code': 'Error', 'id': '22221203', 'age': '非法出生日期'}]\n\nparseIdCard.parseBirthdate('20200103, 20121222')\n# 输出 [{'code': 'OK', 'id': '20200103', 'age': 1}, {'code': 'OK', 'id': '20121222', 'age': 9}]\n\n\n## 校验性别。可以输入整型，列表，字符串(可用逗号等分割多条信息码)\nparseIdCard.parseGender(1)\n# 输出 {'code': 'OK', 'id': '1', 'gender': '男'}\n\nparseIdCard.parseGender(['2', 'X'])\n# 输出 [{'code': 'OK', 'id': '2', 'gender': '女'}, {'code': 'Error', 'id': 'X', 'gender': '非法性别编码'}]\n\nparseIdCard.parseGender('12;9')\n# 输出 [{'code': 'Error', 'id': '12', 'gender': '性别编码应该为1位'}, {'code': 'OK', 'id': '9', 'gender': '男'}]\n\n\n## 计算校验码。可以输入整型，列表，字符串(可用逗号等分割多条信息码)\nparseIdCard.parseJYM(42011620200103123)\n# 输出 {'code': 'OK', 'id': '42011620200103123', 'area': '湖北武汉市黄陂区', 'age': 1, 'gender': '男', 'jym': 'X'}\n\nparseIdCard.parseJYM(['02011620200103123', '4201162020010'])\n# 输出 [{'code': 'Error', 'id': '02011620200103123', 'jym': '未知地区编码'}, {'code': 'Error', 'id': '4201162020010', 'jym': '请输入身份证前17位'}]\n\nparseIdCard.parseJYM('02011620200103123，4201162020010')\n# 输出 [{'code': 'Error', 'id': '02011620200103123', 'jym': '未知地区编码'}, {'code': 'Error', 'id': '4201162020010', 'jym': '请输入身份证前17位'}]\n\n\n## 校验身份证编码。可以输入整型，列表，字符串(可用逗号等分割多条信息码)\nparseIdCard.parseIdCard(420116202001031248)\n# 输出 {'code': 'OK', 'id': '42011620200103124', 'area': '湖北武汉市黄陂区', 'age': 1, 'gender': '女', 'info': '身份证校验通过'}\n\nparseIdCard.parseIdCard([420116202001031248, '42011620200103123X'])\n# 输出 [{'code': 'OK', 'id': '42011620200103124', 'area': '湖北武汉市黄陂区', 'age': 1, 'gender': '女', 'info': '身份证校验通过'}, {'code': 'OK', 'id': '42011620200103123', 'area': '湖北武汉市黄陂区', 'age': 1, 'gender': '男', 'info': '身份证校验通过'}]\n\nparseIdCard.parseIdCard('42011620200103124X；42011620200103123')\n# 输出 [{'code': 'Error', 'id': '42011620200103124X', 'info': '身份证校验码错误'}, {'code': 'Error', 'id': '42011620200103123', 'info': '身份证编码应该为18位'}]\n```\n\n### 计划升级\n\n后续版本计划新增智能修复身份证编码的功能。\n\n### 后记\n\n附上一个我穿防护服的镇楼照。希望疫情尽快过去，以后一切顺利。\n\n![image](https://cdn.jsdelivr.net/gh/pangao1990/pangao1990.github.io@master/pic/可能是Python中最好用的身份证解析工具—parseIdCard.jpg)\n\n---\n\n更多编程教学请关注公众号：**潘高陪你学编程**\n\n![image](https://cdn.jsdelivr.net/gh/pangao1990/pangao1990.github.io@master/pic/潘高陪你学编程.jpg)\n\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pangao1990/parseIdCard",
    "keywords": "idard parse",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parseIdCard",
    "package_url": "https://pypi.org/project/parseIdCard/",
    "platform": "",
    "project_url": "https://pypi.org/project/parseIdCard/",
    "project_urls": {
      "Blog": "https://blog.pangao.vip/%E5%8F%AF%E8%83%BD%E6%98%AFPython%E4%B8%AD%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AF%81%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94parseIdCard/",
      "Homepage": "https://github.com/pangao1990/parseIdCard"
    },
    "release_url": "https://pypi.org/project/parseIdCard/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "一款解析身份证的工具",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12252417,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7d82e5b265d1f1a243533fa6b1ac459d23dbe79f42eebcf9a0d2ae0d184cf67",
          "md5": "4c05df277c42f77a3774a14cbdad3cd1",
          "sha256": "507b1855c9e683d72ab5a3e1ed1c243408ebaf7fd2a96d8eab7b71abb68c1f75"
        },
        "downloads": -1,
        "filename": "parseIdCard-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c05df277c42f77a3774a14cbdad3cd1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 519220,
        "upload_time": "2021-08-19T16:07:10",
        "upload_time_iso_8601": "2021-08-19T16:07:10.169453Z",
        "url": "https://files.pythonhosted.org/packages/b7/d8/2e5b265d1f1a243533fa6b1ac459d23dbe79f42eebcf9a0d2ae0d184cf67/parseIdCard-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9af28f6049c79db17c4f1e00d4a537263bb363ba2ea18067324bb80d793df51",
          "md5": "5724ba857e13822df377e6cf31cd44d0",
          "sha256": "c75e740e41758eca380e57b8deb077b14dc340de4832dd1f9131d29bc3b9b4da"
        },
        "downloads": -1,
        "filename": "parseIdCard-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5724ba857e13822df377e6cf31cd44d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 523192,
        "upload_time": "2021-08-19T16:07:12",
        "upload_time_iso_8601": "2021-08-19T16:07:12.778785Z",
        "url": "https://files.pythonhosted.org/packages/d9/af/28f6049c79db17c4f1e00d4a537263bb363ba2ea18067324bb80d793df51/parseIdCard-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63aa837ba736942729d62762aced91224ee55750dff1361fd60de9192c08952c",
          "md5": "32e668b541357b446f6d41db823e1cb9",
          "sha256": "70ab1b2e233c084676c21a2267bf3f1020a320f6f7842f2826ce9eda91d90720"
        },
        "downloads": -1,
        "filename": "parseIdCard-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32e668b541357b446f6d41db823e1cb9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 519259,
        "upload_time": "2021-12-09T05:58:59",
        "upload_time_iso_8601": "2021-12-09T05:58:59.717798Z",
        "url": "https://files.pythonhosted.org/packages/63/aa/837ba736942729d62762aced91224ee55750dff1361fd60de9192c08952c/parseIdCard-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba2b6dff8b20dd2356cf8414234274bc9f431e6844449e1082ddcc854b6896e8",
          "md5": "acd0bc4299e3c273de6445f117615cc7",
          "sha256": "ba64e33222f7d08b12599b7f8aff7887e7c3cfd2618e0a68518b8312402dbd87"
        },
        "downloads": -1,
        "filename": "parseIdCard-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "acd0bc4299e3c273de6445f117615cc7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 523205,
        "upload_time": "2021-12-09T05:59:05",
        "upload_time_iso_8601": "2021-12-09T05:59:05.807492Z",
        "url": "https://files.pythonhosted.org/packages/ba/2b/6dff8b20dd2356cf8414234274bc9f431e6844449e1082ddcc854b6896e8/parseIdCard-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63aa837ba736942729d62762aced91224ee55750dff1361fd60de9192c08952c",
        "md5": "32e668b541357b446f6d41db823e1cb9",
        "sha256": "70ab1b2e233c084676c21a2267bf3f1020a320f6f7842f2826ce9eda91d90720"
      },
      "downloads": -1,
      "filename": "parseIdCard-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "32e668b541357b446f6d41db823e1cb9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 519259,
      "upload_time": "2021-12-09T05:58:59",
      "upload_time_iso_8601": "2021-12-09T05:58:59.717798Z",
      "url": "https://files.pythonhosted.org/packages/63/aa/837ba736942729d62762aced91224ee55750dff1361fd60de9192c08952c/parseIdCard-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba2b6dff8b20dd2356cf8414234274bc9f431e6844449e1082ddcc854b6896e8",
        "md5": "acd0bc4299e3c273de6445f117615cc7",
        "sha256": "ba64e33222f7d08b12599b7f8aff7887e7c3cfd2618e0a68518b8312402dbd87"
      },
      "downloads": -1,
      "filename": "parseIdCard-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "acd0bc4299e3c273de6445f117615cc7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 523205,
      "upload_time": "2021-12-09T05:59:05",
      "upload_time_iso_8601": "2021-12-09T05:59:05.807492Z",
      "url": "https://files.pythonhosted.org/packages/ba/2b/6dff8b20dd2356cf8414234274bc9f431e6844449e1082ddcc854b6896e8/parseIdCard-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}