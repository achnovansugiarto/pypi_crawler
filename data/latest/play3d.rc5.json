{
  "info": {
    "author": "timabilov",
    "author_email": "timabilov33@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Education",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development"
    ],
    "description": "3D Playground - on Python from scratch.\n=====================================\n\n![Pygame integration example](example/sm-example.gif)\n\n[![Tests](https://github.com/timabilov/python-play3d/actions/workflows/python-package.yml/badge.svg?event=push)](https://github.com/timabilov/python-play3d/actions/workflows/python-package.yml)\n[![Latest PyPI version](https://img.shields.io/pypi/v/play3d)](https://pypi.python.org/pypi/play3d/)\n#### TL;DR: Basic 3D world playground with animations and [camera](#camera-keys-example) completely from scratch(only 2D pixels). \nThis implementation / API only for demonstration and *playground* purposes based on [Perspective projection](https://en.wikipedia.org/wiki/3D_projection#Perspective_projection).     \nCan be used on top of **any** 2d graphics engine/lib(frame buffers, sdl and etc.)\n\nNot implemented features due to low performance:\n* Face clipping not implemented, vertices clipping ignored too    \n* Flat shading and Gouraud shading not implemented.\n* Z-buffering \n\n`models.Model` API is open demonstration of [MVP](https://stackoverflow.com/questions/5550620/the-purpose-of-model-view-projection-matrix) model and is definitely a good starting point/topic for 3D graphics.\n\nAlso you can plot any function on 3D scene.\n\n\n* [Install](#install)\n* [How to use](#how-to-use)\n* [Model View Projection](#model-view-projection)\n  * [Projection](#projection)\n  * [Camera](#world-camera)\n    * [Camera scene example](#camera-keys-example)\n* [Mesh and Wireframe](#mesh-and-wireframe)\n* [Rasterization](#rasterization)\n* [3D Plotting](#3d-plotting) \n* [Basic Wavefront .obj format support](#obj-format)\n* [Model API](#models-api)\n* [Trajectory API](#trajectory-api)\n* [Pygame Example](#pygame-example)\n\n## Install\n\n```\npip install play3d\n```\n\n## How to use\n\nThere is only one requirement - to provide 2D pixel and line renderer(drawer)\n\nAs current example uses `pygame`,\n\n```\npip install pygame==2.0.1 # recommended version\n# You have to install sdl lib separately\n# for Mac OS:\nbrew install sdl2 sdl2_gfx sdl2_image sdl2_mixer sdl2_net sdl2_ttf\n```\n\n```python\nfrom play3d.three_d import Device\nimport pygame\n\n# our adapter will rely on pygame renderer\nput_pixel = lambda x, y, color: pygame.draw.circle(screen, color, (x, y), 1)\n# we certainly can draw lines ourselves using put_pixel three_d.drawline\n# but implementation below - much faster\nline_adapter = lambda p1, p2, color: pygame.draw.line(screen, color, (p1[x], p1[y]), (p2[x], p2[y]), 1)\n\nwidth, height = 1024, 768 # should be same as 2D provider \nDevice.viewport(width, height)\nDevice.set_renderer(put_pixel, line_adapter)\nscreen = pygame.display.set_mode(Device.get_resolution())\n\n```\n\nThat's all we need for setting up environment. \nNow we can create and render model objects by calling `Model.draw()` at each frame update (See [Example](#pygame-example))\\\nTo create model you can simply pass 3D world vertices as 2-d list `Model(data=data)`\n\nIt is possible to provide faces as 2d array  `Model(data=data, faces=faces)`. Face index starts from 1.  Only triangles supported. For more information see below.\n\nSimply by providing 3D (or 4D homogeneous where w=1) `data` vertices list - Model transforms this coordinates from 3D world space to projected screen space\n```python\nfrom play3d.models import Model\n\n# our 2D library renderer setup.. See above.\n\n# Cube model. Already built-in `models.Cube`  \ncube = Model(position=(0, 0, 0),\n                 data=[\n                    [-1, 1, 1, 1],\n                    [1, 1, 1, 1],\n                    [-1, -1, 1, 1],\n                    [1, -1, 1, 1],\n                    [-1, 1, -1, 1],\n                    [1, 1, -1, 1],\n                    [1, -1, -1, 1],\n                    [-1, -1, -1, 1]\n                ])\nwhile True: # your render lib/method\n    cube.draw()\n```\n## Model View Projection\n\n`models.Model` and `three_d.Camera` implements all MVP(See `Model.draw`).\n\n### Projection\n\nHere we use perspective projection matrix\\\nZ axis of clipped cube(from frustum) mapped to [-1, 1] and our camera directed to -z axis (OpenGL convention)\\\nProjection Matrix can be tuned there (aspect ratio, FOV and etc.) \\\n```python\nCamera.near = 1\nCamera.far = 10\nCamera.fov = 60\nCamera.aspect_ratio = 3/4\n```\n\n\n### World camera\n\nBy OpenGL standard we basically move our scene.\nFacing direction considered when we move our camera in case of rotations(direction vector will be transformed too)\\\nCamera can be moved through `three_d.Camera` API:\n```python\nfrom play3d.three_d import Camera\ncamera = Camera.get_instance()\n\n# move camera to x, y, z with 0.5 step considering facing direction\ncamera['x'] += 0.5\ncamera['y'] += 0.5\ncamera['z'] += 0.5\n\ncamera.move(0.5, 0.5, 0.5) # identical above\n\n# rotate camera to our left on XZ plane\ncamera.rotate('y', 2) # \n```\n\n#### Camera keys example\n![Pygame integration example](example/move-around.gif)\n\n## Mesh and Wireframe\n\nTo exploit mesh one should provide both `data` and `faces`. Face represents triple group of vertices index referenced from `data`. Face index starts from 1.\\\nBy default object rendered as wireframe\n```python\n\nfrom play3d.models import Model\ntriangle = Model(position=(-5, 3, -4),\n                 data=[\n                     [-3, 1, -7, 1],\n                     [-2, 2, -7, 1],\n                     [-1, 0, -7, 1],\n                 ], faces=[[1, 2, 3]])\n```\n\n![Triangle wireframe](https://i.imgur.com/A7ktUd7.png)\n\n\n## Rasterization\n\nBy default if data and faces provided, rasterization will be enabled.\\\nFor rasterization we use - standard slope algorithm with horizontal filling lines. \n```python\nfrom play3d.models import Model\n\nwhite = (230, 230, 230)\nsuzanne = Model.load_OBJ('suzanne.obj.txt', position=(-4, 2, -6), color=white, rasterize=True)\nsuzanne_wireframe = Model.load_OBJ('suzanne.obj.txt', position=(-4, 2, -6), color=white)\nsuzanne.rotate(0, -14)\nsuzanne_wireframe.rotate(0, 14)\n```\n\n![Suzanne wireframe and rasterized](https://i.imgur.com/1vVlLt9.png)\n\n## 3D plotting\n\nYou can plot any function you want by providing parametric equation as `func(*parameters) -> [x, y, z]`.\nFor example, sphere and some awesome wave both polar and parametric equations(Sphere built-in as `Models.Sphere`):\n```python\nimport math\nfrom play3d.models import Plot\n\ndef fn(phi, theta):\n\n    return [\n        math.sin(phi * math.pi / 180) * math.cos(theta * math.pi / 180),\n        math.sin(theta * math.pi / 180) * math.sin(phi * math.pi / 180),\n        math.cos(phi * math.pi / 180)\n    ]\n\nsphere_model = Plot(func=fn, allrange=[0, 360], position=(-4, 2, 1), color=(0, 64, 255))\n\nblow_your_head = Plot(\n    position=(-4, 2, 1), color=(0, 64, 255),\n    func=lambda x, t: [x, math.cos(x) * math.cos(t), math.cos(t)], allrange=[0, 2*math.pi], interpolate=75\n)\n\n```\n\n![Plots](https://i.imgur.com/utZexJ5.png)\n\n\n## OBJ format\n\nWawefront format is widely used as a standard in 3D graphics\n\nYou can import your model here. Only vertices and faces supported.\\\n`Model.load_OBJ(cls, path_or_url, wireframe=False, **all_model_kwargs)`\n\nYou can find examples here [github.com/alecjacobson/common-3d-test-models](https://github.com/alecjacobson/common-3d-test-models)\n\nYou might have to normalize(scale and etc.)each `.obj` sample differently \\\nOnly vertices and faces are supported.\n\n```python\nModel.load_OBJ('beetle.obj.txt', wireframe=True, color=white, position=(-2, 2, -4), scale=3)\n```\n\n\n![Beetle object](https://i.imgur.com/79fy4HK.png)\n\n## Models API\n\n`Models.Model`\n\n| Fields | Description    |\n| ------------- | ------------- |\n| `position`  | `tuple=(0, 0, 0)` with x, y, z world coordinates  |\n| `scale`  | `integer(=1)`  |\n| `color`  | `tuple`  `(255, 255, 255)`   |\n| `data`  | `list[[x, y, z, [w=1]]]` - Model vertices(points)  |\n| `faces`  | `list[[A, B, C]]` - Defines triangles See: [Mesh and Wireframe](#mesh-and-wireframe)  |\n| `rasterize`  | `bool(=True)` - Rasterize - \"fill\" an object  |\n| `shimmering`  | `bool(=False)` - color flickering/dancing  |\n\n\n\n```python\n# Initial Model Matrix\nmodel.matrix = Matrix([\n                          [1 * scale, 0, 0, 0],\n                          [0, 1 * scale, 0, 0],\n                          [0, 0, 1 * scale, 0],\n                          [*position, 1]\n                      ])\n\n```\n\n### Methods\n* `model_obj @ translate(x, y, z)`\n\n  translates object's model matrix (in world space)\n\n## Trajectory API\n\n`Models.Trajectory`\n\n| Fields | Description    |\n| ------------- | ------------- |\n| `func`  | `func` Parametrized math function which takes `*args` and returns world respective coordinates `tuple=(x, y, z)`    |\n\nTo move our object through defined path we can build Trajectory for our object. \nYou can provide any parametric equation with args.\\\nWorld coordinates defined by `func(*args)` tuple output.  \n\n\n### Methods\n* `rotate(self, angle_x, angle_y=0, angle_z=0)`\n\n  Rotates object relative to particular axis plane. First object translated from the world space back to local origin, then we rotate the object\n\n* `route(self, trajectory: 'Trajectory', enable_trace=False)` \n\n  Set the function-based  trajectory routing for the object.\n\n  - trajectory `Trajectory` - trajectory state\n  - enable_trace `bool` - Keep track of i.e. draw trajectory path (breadcrumbs)\n\n#### Example\n```python\nimport math\n\nfrom play3d.models import Sphere, Trajectory\nwhite = (230, 230, 230)\nmoving_sphere = Sphere(position=(1, 3, -5), color=white, interpolate=50)\nmoving_sphere.route(Trajectory.ToAxis.Z(speed=0.02).backwards())\n\nwhirling_sphere = Sphere(position=(1, 3, -5), color=white, interpolate=50)\n# Already built-in as Trajectory.SineXY(speed=0.1)\nwhirling_sphere.route(Trajectory(lambda x: [x, math.sin(x)], speed=0.1))\n\n\nwhile True: # inside your \"render()\"\n    moving_sphere.draw()\n    whirling_sphere.draw()\n```\n## Pygame example\n\n```python\nimport logging\nimport sys\n\nimport pygame\n\nfrom play3d.models import Model, Grid\nfrom pygame_utils import handle_camera_with_keys # custom keyboard handling - moving camera \nfrom play3d.three_d import Device, Camera\nfrom play3d.utils import capture_fps\n\nlogging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\nblack, white = (20, 20, 20), (230, 230, 230)\n\n\nDevice.viewport(1024, 768)\npygame.init()\nscreen = pygame.display.set_mode(Device.get_resolution())\n\n# just for simplicity - array access, we should avoid that\nx, y, z = 0, 1, 2\n\n# pygame sdl line is faster than default one\nline_adapter = lambda p1, p2, color: pygame.draw.line(screen, color, (p1[x], p1[y]), (p2[x], p2[y]), 1)\nput_pixel = lambda x, y, color: pygame.draw.circle(screen, color, (x, y), 1)\n\nDevice.set_renderer(put_pixel, line_renderer=line_adapter)\n\ngrid = Grid(color=(30, 140, 200), dimensions=(30, 30))\n\n# be aware of different scaling of .obj samples. Only vertices and faces supported! \nsuzanne = Model.load_OBJ(\n  'https://raw.githubusercontent.com/OpenGLInsights/OpenGLInsightsCode/master/Chapter%2026%20Indexing%20Multiple%20Vertex%20Arrays/article/suzanne.obj',\n  position=(3, 2, -7), color=white, rasterize=True)\nbeetle = Model.load_OBJ(\n  'https://raw.githubusercontent.com/alecjacobson/common-3d-test-models/master/data/beetle.obj',\n   wireframe=False, color=white, position=(0, 2, -11), scale=3)\nbeetle.rotate(0, 45, 50)\n\ncamera = Camera.get_instance()\n# move our camera up and back a bit, from origin\ncamera.move(y=1, z=2)\n\n\n@capture_fps\ndef frame():\n    if pygame.event.get(pygame.QUIT):\n        sys.exit(0)\n\n    screen.fill(black)\n    handle_camera_with_keys()  # to move our camera - walk, can be ignored\n    grid.draw()\n    beetle.draw()\n    suzanne.rotate(0, 1, 0).draw()\n    pygame.display.flip()\n\n\nwhile True:\n\n    frame()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/timabilov/python-play3d",
    "keywords": "python 3d play3d three_d projection mvp",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "play3d",
    "package_url": "https://pypi.org/project/play3d/",
    "platform": "",
    "project_url": "https://pypi.org/project/play3d/",
    "project_urls": {
      "Homepage": "https://github.com/timabilov/python-play3d"
    },
    "release_url": "https://pypi.org/project/play3d/0.1.5/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "Basic 3D world playground with animations and completely from scratch.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10184815,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03fa8aba819f5dbf128b9b97ef114fa6a2fce37de3d8eec61fc28a47024bca9f",
          "md5": "90c0d7981c8e146cba1e236e02f9b88e",
          "sha256": "6b05644689f08e41a46597e3209c54b14ded0f8f7ebb08bbf47ac673c97e9ee5"
        },
        "downloads": -1,
        "filename": "play3d-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90c0d7981c8e146cba1e236e02f9b88e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16495,
        "upload_time": "2021-04-26T10:25:34",
        "upload_time_iso_8601": "2021-04-26T10:25:34.968999Z",
        "url": "https://files.pythonhosted.org/packages/03/fa/8aba819f5dbf128b9b97ef114fa6a2fce37de3d8eec61fc28a47024bca9f/play3d-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66b354fe158755063b6a1eeabba84d4025b0d725f28925a30190dec31294d612",
          "md5": "a0069ded169bfa6cb151d40c5da3bc51",
          "sha256": "07e51e581a8e086220b2cfc7ab48703c10cc1b33c9934a9bfbbd57039746ddbf"
        },
        "downloads": -1,
        "filename": "play3d-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a0069ded169bfa6cb151d40c5da3bc51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19244,
        "upload_time": "2021-04-26T10:25:36",
        "upload_time_iso_8601": "2021-04-26T10:25:36.832147Z",
        "url": "https://files.pythonhosted.org/packages/66/b3/54fe158755063b6a1eeabba84d4025b0d725f28925a30190dec31294d612/play3d-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3ec6e7152c5b07720839e6f95e9b989004a8b8cd956fb0a2eb27f531c1a4928",
          "md5": "f2138a52d4fe0982b3c68f6a9435fdd8",
          "sha256": "cc348a17b202b8fab0e62148f5edfd02a272ac4dc8ccb8e8f1a27ec1999de26f"
        },
        "downloads": -1,
        "filename": "play3d-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2138a52d4fe0982b3c68f6a9435fdd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16614,
        "upload_time": "2021-04-26T12:40:43",
        "upload_time_iso_8601": "2021-04-26T12:40:43.046883Z",
        "url": "https://files.pythonhosted.org/packages/b3/ec/6e7152c5b07720839e6f95e9b989004a8b8cd956fb0a2eb27f531c1a4928/play3d-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe91ea78468d15390f0dcdfcce7845bc255b9e23da2b7d08f704cdbd941dfa90",
          "md5": "d3d44bba2bd424e40be3841750f622f2",
          "sha256": "16a7b9debaf10ebc77174c622ebe65c1ebbdefb2cbfa86afdc69c3f97eec6cbd"
        },
        "downloads": -1,
        "filename": "play3d-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d3d44bba2bd424e40be3841750f622f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19390,
        "upload_time": "2021-04-26T12:40:45",
        "upload_time_iso_8601": "2021-04-26T12:40:45.136300Z",
        "url": "https://files.pythonhosted.org/packages/fe/91/ea78468d15390f0dcdfcce7845bc255b9e23da2b7d08f704cdbd941dfa90/play3d-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83eeea48bb3971eb5093432318207eb5d616981bdae2d0fb7e0c4c13b9c99af7",
          "md5": "f8aff94c50e9c8390e5a79cce9dd2a3e",
          "sha256": "333e712a6aa45b1ba63aba55da2c5ee0f19f825cd9a4546d7b8c18787ab70608"
        },
        "downloads": -1,
        "filename": "play3d-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8aff94c50e9c8390e5a79cce9dd2a3e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16986,
        "upload_time": "2021-04-26T19:30:20",
        "upload_time_iso_8601": "2021-04-26T19:30:20.055304Z",
        "url": "https://files.pythonhosted.org/packages/83/ee/ea48bb3971eb5093432318207eb5d616981bdae2d0fb7e0c4c13b9c99af7/play3d-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "706439957c013fe54778509f5623530e641e41a67f0f668dfa5d0127792c5a2a",
          "md5": "11e767767cf4edf6fdc53bca0f9ca2a5",
          "sha256": "87f33807552bf5eea3105d97553a83a8bdace7ed6651e0da3f67e7b04b1aae92"
        },
        "downloads": -1,
        "filename": "play3d-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "11e767767cf4edf6fdc53bca0f9ca2a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20282,
        "upload_time": "2021-04-26T19:30:21",
        "upload_time_iso_8601": "2021-04-26T19:30:21.843968Z",
        "url": "https://files.pythonhosted.org/packages/70/64/39957c013fe54778509f5623530e641e41a67f0f668dfa5d0127792c5a2a/play3d-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b884b44b129a0f989a03dc58f41cf855af7e6936b62805a34c221876eb52201d",
          "md5": "49226eec3155529f9d1ff82bc570bdd5",
          "sha256": "c0f072071d58f3c9d3b59e1d5f4404f489fd79b543e696c017cf1f7a79d3e04b"
        },
        "downloads": -1,
        "filename": "play3d-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49226eec3155529f9d1ff82bc570bdd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16985,
        "upload_time": "2021-04-26T19:34:52",
        "upload_time_iso_8601": "2021-04-26T19:34:52.316397Z",
        "url": "https://files.pythonhosted.org/packages/b8/84/b44b129a0f989a03dc58f41cf855af7e6936b62805a34c221876eb52201d/play3d-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "889ce728b11b6e9e902f301cd99d6091047fac2e99184a1e72c0742ea6e079a9",
          "md5": "94cd3704182c5e4bebda1bc9d049fb5f",
          "sha256": "6a391de7e0e92ec53068908099318e98f3c02420dcc79b14c1851cbac9e7956c"
        },
        "downloads": -1,
        "filename": "play3d-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "94cd3704182c5e4bebda1bc9d049fb5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20287,
        "upload_time": "2021-04-26T19:34:53",
        "upload_time_iso_8601": "2021-04-26T19:34:53.670785Z",
        "url": "https://files.pythonhosted.org/packages/88/9c/e728b11b6e9e902f301cd99d6091047fac2e99184a1e72c0742ea6e079a9/play3d-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1dc85a161fd3bb2e08f81132c96b3085148e5084ad9c050c5ad8fce9dd91e73",
          "md5": "b5657b9ba42cc367489644255a1627c6",
          "sha256": "956f461ae99f5b7038093b288febd21442efe578382350ad294e6c41b2b4136e"
        },
        "downloads": -1,
        "filename": "play3d-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5657b9ba42cc367489644255a1627c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16941,
        "upload_time": "2021-04-27T12:58:20",
        "upload_time_iso_8601": "2021-04-27T12:58:20.403223Z",
        "url": "https://files.pythonhosted.org/packages/c1/dc/85a161fd3bb2e08f81132c96b3085148e5084ad9c050c5ad8fce9dd91e73/play3d-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "908d596f15b302ccea685feb13cd612379dbe5dfeaed556e31f7583ba65ced95",
          "md5": "01092cf8281237bb6be390043938ce13",
          "sha256": "87adc13976c133ebc208b7bf5bc41dad80a607ab1d6b7ea42cb76043f382a3d1"
        },
        "downloads": -1,
        "filename": "play3d-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "01092cf8281237bb6be390043938ce13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20059,
        "upload_time": "2021-04-27T12:58:21",
        "upload_time_iso_8601": "2021-04-27T12:58:21.846355Z",
        "url": "https://files.pythonhosted.org/packages/90/8d/596f15b302ccea685feb13cd612379dbe5dfeaed556e31f7583ba65ced95/play3d-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1dc85a161fd3bb2e08f81132c96b3085148e5084ad9c050c5ad8fce9dd91e73",
        "md5": "b5657b9ba42cc367489644255a1627c6",
        "sha256": "956f461ae99f5b7038093b288febd21442efe578382350ad294e6c41b2b4136e"
      },
      "downloads": -1,
      "filename": "play3d-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b5657b9ba42cc367489644255a1627c6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16941,
      "upload_time": "2021-04-27T12:58:20",
      "upload_time_iso_8601": "2021-04-27T12:58:20.403223Z",
      "url": "https://files.pythonhosted.org/packages/c1/dc/85a161fd3bb2e08f81132c96b3085148e5084ad9c050c5ad8fce9dd91e73/play3d-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "908d596f15b302ccea685feb13cd612379dbe5dfeaed556e31f7583ba65ced95",
        "md5": "01092cf8281237bb6be390043938ce13",
        "sha256": "87adc13976c133ebc208b7bf5bc41dad80a607ab1d6b7ea42cb76043f382a3d1"
      },
      "downloads": -1,
      "filename": "play3d-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "01092cf8281237bb6be390043938ce13",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20059,
      "upload_time": "2021-04-27T12:58:21",
      "upload_time_iso_8601": "2021-04-27T12:58:21.846355Z",
      "url": "https://files.pythonhosted.org/packages/90/8d/596f15b302ccea685feb13cd612379dbe5dfeaed556e31f7583ba65ced95/play3d-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}