{
  "info": {
    "author": "wushilin",
    "author_email": "wushilin.sg@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# A java like stream for python\nA stream is like java, everything is lazy, using iterative approach, we don't build large list in memory. \n\nA stream is like a list with cursor, it can only be consumed once! What if I need it again? build a new stream object\n\nA stream can be easily pipelined. you can call them like a chain. e.g. mapped stream can be further reduced or filtered.\n\n```python\nStream(range(0, 1000)).filter(lambda x: mod(x, 2) == 0).map(lambda x:x//2).count() # You know what this does!\n```\n\nIt has also parallel processing capability, make parallel programming easy.\n\nImaging managing many downloads can be done this way\n```python\n# This can replace most of the use case of parallem processing\nStream(urls).parallel_map(lambda x:download_to_file(x, \"/tmp\"), thread_count=10)\n\n# or you can reuse thread pool. \nStream(urls).parallel_map(lambda x:download_to_file(x, \"/tmp\"), thread_pool=my_thread_pool_executor)\n```\n\n## Installing\n```\n$ pip3 install pystream-wushilin\n```\n\n## Importing\n```python\nfrom pystream.pystream import Stream\n```\n\n## Using\n### Creating: stream can be created from iterable, or iterator\n```python\n# Create stream from iterable (e.g. collections)\n# This might be bounded or unbouded\nstream = Stream(range(0, 100))\nstream = Stream([1,2,3,4,5,6])\ndict1 = {'k1': 'v1', 'k2': 'v2'}\n\nkey_stream = Stream(dict1.keys())\nvalue_stream.map(lambda k: dict1[k])\n\n# Create stream from iterator!\n# This might be bounded or unbounded\nstring = \"hello, world\"\niterator = iter(string)\nstream = Stream(iterator)\n\n# Create stream from a file (read lines as stream):\n# You have to use with the \"WITH\" keyword so stream can be closed\nwith Stream.from_file_lines(\"example.txt\") as stream:\n   # use stream\n\n# Create stream from iterative function\n# effectively, [seed, func(seed), func(func(seed)), func(func(func(seed))), ...]\n# This generated is an unbounded stream, however generator can raise StopIteration for EOF\ndef adder(x):\n    return x + 1\n\nStream.iterate(1, adder).limit(5) # [0, 1, 2, 3, 4]\n\n# Stream can optionally attach a begin function and exit function so with keywords can be done gracefully.\n# begin_func is executed before the consumption\n# exit_func is executed after stream is out of scope so cleanup can be done.\n# This is useful for stream that is from network, or from file, or from database that has something to clean up\nwith Stream(dbcursor, begin_func=lambda x:print(\"I am executed before stream is consumed\"), exit_func=dbcursor.close) as stream:\n  stream.to_list() # or other ways you like\n\n# Creating from generator func, this stream is unbouded. don't reduce on them(count, sum, max, min etc), don't parallel map\n# but map, filter, limit etc is fine, since map, filter are lazy.\n# if your generator is bounded, raise StopIteration after last element then this stream is unbounded.\n# This is typically unbouded, unless generator raise StopIteration\ns1 = Stream.generate(lambda:5) # infinite number of 5s, if you count, it hangs!\ns1.limit(1000).sum() # should be 5000\n\na = 1\nb = 1\ndef fib():\n    global a\n    global b\n    a, b = b, a+b\n    if a > 100000000000:\n      raise StopIteration\n    return a\n# Generating stream from fibonacci sequence, up to 100000000000. \n# Generating is not an infinite loop, it is lazy!\nStream.generate(fib).limit(10).for_each(print)\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n# Quiz: How to generate random strings?\n\n\n```\n\n### Using stream\n```python\n# Mapping\nStream([1,2,3]).map(lambda x: x+1).for_each(print)\n2\n3\n4\n\n# Mapping in parallel. Note this consumes the entire stream, and return result in the original order. If it is infinite stream, this will cause out of memory error\n    def slow_map(x):\n        \"\"\" A slow mapping function that takes 2 seconds \"\"\"\n        sleep(2)\n        return x * 2\n\n    Stream.generate(lambda:5).limit(10).parallel_map(slow_map).for_each(print) # default using 10 threads\n    Stream.generate(lambda:5).limit(10).parallel_map(slow_map, thread_count=20).for_each(print) # using 20 threads to map concurrently\n    thread_pool = ThreadPoolExecutor(max_workers=50)\n    Stream.generate(lambda:5).limit(10).parallel_map(slow_map, thread_pool=thread_pool).for_each(print) # re-use thread pool\n\n    # All of above calls will take 2 seconds, instead of 20 seconds if executed in map instead of parallel_map\n# Filtering\nStream(range(0, 55)).filter(lambda x: x>50).for_each(print)\n51\n52\n53\n54\n\n# Limiting\nStream(range(0, 1000000)).limit(5).for_each(print)\n0\n1\n2\n3\n4\n\n# Skipping\nStream(range(0, 100)).skip(95).for_each(print)\n95\n96\n97\n98\n99\n\n# Summing\nStream(range(0,5)).sum() # 10 (0 + 1 + 2 + 3 + 4)\n\n# Max/Min\nStream(range(0, 5)).max() # 4\nStream(range(0, 5)).min() # 0\n\n# Reducing\nStream(range(0, 5)).reduce(lambda x, y: x + y) # 10 -> same as sum!\n\n# Reading from file from_file_lines\nwith Stream.from_file_lines(\"readme.txt\").with_index() as stream:\n  stream.for_each(print)\n\n(0, <line1>)\n(1, <line2>)\n(2, <line3>) ...\n\n# With index\nStream([1,3,5,7,9]).with_index().for_each(print)\n(0, 1)\n(1, 3)\n(2, 5)\n(3, 7)\n(4, 9)\n\n# Counting\nStream(range(0, 100)).count() # 100 (0...99)\n\n# Concating stream\ns1 = Stream([1,2,3])\ns2 = Stream([4,5,6])\n(s1 + s2).count() # 6\ns1.concat(s2).count() #6\n# Note: if you do both of above, second line will be 0 since first one consumed s1 and s2 already.\n\n# visiting with a func\nStream([1,2,3,4,5]).for_each(print)\n1\n2\n3\n4\n5\n\n\n# convert to list\nlist1 = Stream(range(0, 5)).to_list() # [0, 1, 2, 3, 4]\nlist2 = list(stream) # [0,1,2,3,4] since the stream itself is iterable\n\n# picking from tuple for each element\nstream = Stream(range(0, 10, 2)) # 0, 2, 4, 6, 8\nindexed_stream = stream.with_index() # (0, 0), (1, 2), (2, 4), (3, 6), (4, 8)\nindexed_stream.pick(0) # 0, 1, 2, 3, 4\nindexed_stream.pick(1) # 0, 2, 4, 6, 8\nindexed_stream.pick(3) # Index Out of Bound error\n\n# Reducing\nStream(range(0, 5)).reduce(lambda x, y: x * y) # 0 (0 * 1 * 2 * 3 * 4) \n\n# Flatten\nStream([1,2],[3,4]).flatten() # [1,2,3,4]\n\n# Packing\nStream([1,2,3,4,5,6,7]).pack(2) # [[1,2], [3,4], [5,6], [7, None]]\nStream([1,2,3,4,5,6,7].pack(3).flatten()) # [1,2,3,4,5,6,7,None,None]\n# If None not desired, filter them yourself.\n\n# Flap map\n# When your mapping returns a list, this call flattens it.\nStream([[2, 5], [3, 3]]).flat_map(lambda x: [x[0] for _ in range(x[1])]).for_each(print) # gives you 5 x 2s and 3 x 3s [2,2,2,2,2,3,3,3]\n\n# Ordering\nStream([4,3,2,1,5]).ordered(reverse=true).for_each(print) # [5,4,3,2,1]\n\n# Uniq\nStream([1,1,2,3,4,4,5]).uniq().for_each(print) # [1,2,3,4,5]\n\n# Repeating\nprint (Stream([1,2,3,4,5]).repeat(3).to_list()) # repeats by default repeat 2 times. this gives you [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]\n\n# To Set\nStream([1,2,3,4,5,5,6]).to_set() # {1,2,3,4,5,6}\n\n# To map stream (package of 2, or more!) When package has more than 2 elements, key is first of pack, value is rest of pack.\nStream([\"k1\", \"v1\", \"k2\", \"v2\"]).pack(2).to_maps() # [{k1:v1}, {k2:v2}]\n\n# To a single map\nStream([\"k1\", \"v1\", \"k2\", \"v2\"]).pack(2).to_map() # [{k1:v1,k2:v2}]\n\nStream([\"k1\", \"v1\", \"k2\", \"v2\"]).to_map() # value error!\nStream([\"k1\", \"v1\", \"k2\", \"v2\"]).to_maps() # value error!\n\nprint(Stream([\"k1\", \"v1\", \"k2\", \"v2\"]).pack(3).to_map()) # {'k1': ['v1', 'k2'], 'v2': [None, None]}\n\n# Repeating stream\nStream([\"I love python\"]).repeat(20) #[\"I love python\", .... \"I love python\"] (20 times)\n\n\n# Spliting stream\n\n# Note that pystreams can be split, however, first splitted stream is primary, others are secondary.\n# Secondary has such behaviors:\n# Consuming of secondary depends on consumption from primary, and it blocks for ever until elements of first is consumed.\n# Elements are available in stream as soon as primary consumes it.\n# begin_func, exit_func are attached to primary only. If you split the file stream, please make sure the first 1 (s1 is closed.)\n#\n    s1, s2, s3, s4 = Stream([1,2,3,4,5], lambda:print(\"Begin\"), lambda:print(\"end\")).split(4)\n    \n    def slow_consume(name, stream):\n        iter = stream.__iter__()\n        while True:\n            try:\n                i = iter.__next__()\n                print(f\"{name} => consumed {i}\")\n            except StopIteration:\n                break\n            sleep(1)\n\n    def consume_asap(name, stream):\n        for i in stream:\n            print(f\"{name} => consumed {i}\")\n\n    with s1, s2, s3, s4:\n        t1 = threading.Thread(target=slow_consume, args=(\"s1\", s1))\n        t2 = threading.Thread(target=consume_asap, args=(\"s2\", s2))\n        t3 = threading.Thread(target=consume_asap, args=(\"s3\", s3))\n        t4 = threading.Thread(target=consume_asap, args=(\"s4\", s4))\n        Stream([t1, t2, t3, t4]).for_each(lambda x: x.start())\n        Stream([t1, t2, t3, t4]).for_each(lambda x: x.join())\n\n\n\n    # Create random string from charset, with length\n    Stream.random_strings(\"ABCDEFG\", 12).limit(20).for_each(print)\n    \n    # Default length is 5\n    Stream.random_chars(\"ABCDEFG\").limit(20).for_each(print)\n    \n    # Create random integers with [lower, upper) range\n    Stream.random_ints(0, 10).limit(20).for_each(print)\n    \n    # Create floats with scale [0, scale)\n    Stream.random_floats(10).limit(20).for_each(print)\n    \n    # String for upper case characters\n    print(\"Upper\")\n    \n    # Lower case\n    Stream.random_alphabets(length=5, lower=False).limit(20).for_each(print)\n    print(\"Lower\")\n    Stream.random_alphabets(length=6, lower=True).limit(20).for_each(print)\n    \n    # Upper case hex of length 5\n    print(\"Upper \")\n    Stream.random_hex_strings(length=5).limit(20).for_each(print)\n    \n    # Lower case hex of length 10\n    print(\"Lower hex\")\n    Stream.random_hex_strings(length=10, lower=True).limit(20).for_each(print)\n    \n    # Random string in list\n    list_new = [x for x in Stream.random_strings().limit(10)]\n    print(list_new)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wushilin/pystream",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pystream-wushilin",
    "package_url": "https://pypi.org/project/pystream-wushilin/",
    "platform": "",
    "project_url": "https://pypi.org/project/pystream-wushilin/",
    "project_urls": {
      "Bug Tracker": "https://github.com/wushilin/pystream/issues",
      "Homepage": "https://github.com/wushilin/pystream"
    },
    "release_url": "https://pypi.org/project/pystream-wushilin/1.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "A python stream utility",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11005493,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0e82e2ae119834f1bbf93e2f4dee77302f9dcec6a317e8b5d93ea7b8044c52d",
          "md5": "809f213a01f549af9531780fefcb6089",
          "sha256": "3b9ca17e2dc371541be921cc44e73cdefe718774e40d97432c6d5e4d81ee215d"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "809f213a01f549af9531780fefcb6089",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8277,
        "upload_time": "2021-07-03T13:19:31",
        "upload_time_iso_8601": "2021-07-03T13:19:31.641435Z",
        "url": "https://files.pythonhosted.org/packages/a0/e8/2e2ae119834f1bbf93e2f4dee77302f9dcec6a317e8b5d93ea7b8044c52d/pystream_wushilin-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19225e6ea57dfe2f08adebcb0089efd2820d753382db2dd5a093fc8ac5c80a39",
          "md5": "a18c0a6552abeaa78aaa192d7ebd162f",
          "sha256": "44621f094d0fbd43a26562613fbc0bdeacae0649d74fc48da6f61b35dc27358d"
        },
        "downloads": -1,
        "filename": "pystream-wushilin-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a18c0a6552abeaa78aaa192d7ebd162f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7807,
        "upload_time": "2021-07-03T13:19:33",
        "upload_time_iso_8601": "2021-07-03T13:19:33.391011Z",
        "url": "https://files.pythonhosted.org/packages/19/22/5e6ea57dfe2f08adebcb0089efd2820d753382db2dd5a093fc8ac5c80a39/pystream-wushilin-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4defd705e81dc7d18032d7347370ba63bc878c39ba9db7b669f70faeb9dcf427",
          "md5": "2b2f31f5de44d10aa16ec8bd7e1cfdca",
          "sha256": "7fc02076663c3cec1c8309045b6cd7bfc5ff9553df1ae874a80b4f05ead943a3"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b2f31f5de44d10aa16ec8bd7e1cfdca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9470,
        "upload_time": "2021-07-03T14:03:34",
        "upload_time_iso_8601": "2021-07-03T14:03:34.822980Z",
        "url": "https://files.pythonhosted.org/packages/4d/ef/d705e81dc7d18032d7347370ba63bc878c39ba9db7b669f70faeb9dcf427/pystream_wushilin-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c1a9f397870c8c287d6a419c731ee6a6706c18105522470d2d9393fdfd012a7",
          "md5": "c24dc0e83282169539816947acf223d1",
          "sha256": "de9da7247ffe215d94fa59ccc2a7635b4cf0cb266237a543ab06a1192effb416"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c24dc0e83282169539816947acf223d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8923,
        "upload_time": "2021-07-03T14:03:36",
        "upload_time_iso_8601": "2021-07-03T14:03:36.569803Z",
        "url": "https://files.pythonhosted.org/packages/0c/1a/9f397870c8c287d6a419c731ee6a6706c18105522470d2d9393fdfd012a7/pystream_wushilin-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d39259b59f09ceaaa5a5f9b3fb5ecfa6076e183217ec371c7e1394719df4ccc",
          "md5": "04721415333003d6c6ef0a827fcd93cf",
          "sha256": "ac96d6edd0bdb3d294b89604ef66bc4beb3716676f65dfa63fa7d0bbc457d9fa"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04721415333003d6c6ef0a827fcd93cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10083,
        "upload_time": "2021-07-03T14:40:10",
        "upload_time_iso_8601": "2021-07-03T14:40:10.609797Z",
        "url": "https://files.pythonhosted.org/packages/3d/39/259b59f09ceaaa5a5f9b3fb5ecfa6076e183217ec371c7e1394719df4ccc/pystream_wushilin-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3e0d665168d6c648a72da97b6288201d2c20fa45289b41a1c6233443a4b3b7c",
          "md5": "e251dd87d9813bfd13e89cf0e1f5a53b",
          "sha256": "d812b65308e7fd0dd8d8ec32ffaa34bd6e152d9a531592101458c630015982fa"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e251dd87d9813bfd13e89cf0e1f5a53b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9665,
        "upload_time": "2021-07-03T14:40:12",
        "upload_time_iso_8601": "2021-07-03T14:40:12.352608Z",
        "url": "https://files.pythonhosted.org/packages/c3/e0/d665168d6c648a72da97b6288201d2c20fa45289b41a1c6233443a4b3b7c/pystream_wushilin-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d713c2cbce536a6aeb98d9ed3a9d6d752f708364898ad9fc5c29cccdba3becae",
          "md5": "5ba6cd8c02f0e952e768cdb887d81087",
          "sha256": "daeee6e1adbb656dfcd53b3b0b48dd99cf260dd7ed707dcdf9018a2cbf3992b9"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ba6cd8c02f0e952e768cdb887d81087",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 14329,
        "upload_time": "2021-07-04T05:19:26",
        "upload_time_iso_8601": "2021-07-04T05:19:26.449092Z",
        "url": "https://files.pythonhosted.org/packages/d7/13/c2cbce536a6aeb98d9ed3a9d6d752f708364898ad9fc5c29cccdba3becae/pystream_wushilin-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f8af5477a3f2a0b831b585b0db6f5b4bb7393e21402a2968c12016d05ed269e",
          "md5": "f2942ffc020620b39e12ab4af4fa754e",
          "sha256": "19fe9a587567096cc5a64ab1494e6f6e8c38464ee3e6ca720d838326e5311ecd"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f2942ffc020620b39e12ab4af4fa754e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 15849,
        "upload_time": "2021-07-04T05:19:28",
        "upload_time_iso_8601": "2021-07-04T05:19:28.305024Z",
        "url": "https://files.pythonhosted.org/packages/3f/8a/f5477a3f2a0b831b585b0db6f5b4bb7393e21402a2968c12016d05ed269e/pystream_wushilin-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e0e17c65e07d8e4f07cc3febebe7807f652d259045e25519c8b44e29db14ff3",
          "md5": "5db32e830401ff714a68d17faf6373e2",
          "sha256": "cf8e8ed16cc4ef11ea868ba5f2da96f8505ed640fa6244389aa891221fd54c25"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5db32e830401ff714a68d17faf6373e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 14891,
        "upload_time": "2021-07-08T05:01:57",
        "upload_time_iso_8601": "2021-07-08T05:01:57.483225Z",
        "url": "https://files.pythonhosted.org/packages/9e/0e/17c65e07d8e4f07cc3febebe7807f652d259045e25519c8b44e29db14ff3/pystream_wushilin-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cc44f28e800c86c1817292983a5c88c61f064524b2e3e50dcca2eadf08c4ce8",
          "md5": "9566145cb4fd8f9be564f13f99344b78",
          "sha256": "2959927d422b9c5602bee30b9243d50266a8ce61d04f705d4e50d3cb06f1d2b1"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9566145cb4fd8f9be564f13f99344b78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 16871,
        "upload_time": "2021-07-08T05:01:59",
        "upload_time_iso_8601": "2021-07-08T05:01:59.606193Z",
        "url": "https://files.pythonhosted.org/packages/7c/c4/4f28e800c86c1817292983a5c88c61f064524b2e3e50dcca2eadf08c4ce8/pystream_wushilin-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5428dc033b5709e87030c1a707c31e21356cdb252e7481485854cd822e7bdb24",
          "md5": "f1b17c72dd5a62c6fdbb33545da88ed3",
          "sha256": "3e9c738aeaf15203e3c86c69e3b1159be04f6c07f4642fb76a176a085e342863"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1b17c72dd5a62c6fdbb33545da88ed3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 15711,
        "upload_time": "2021-07-10T02:01:14",
        "upload_time_iso_8601": "2021-07-10T02:01:14.663447Z",
        "url": "https://files.pythonhosted.org/packages/54/28/dc033b5709e87030c1a707c31e21356cdb252e7481485854cd822e7bdb24/pystream_wushilin-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a1560bd562a8bb1406c75703ede4b2322dce660dd589bc57b6dba9d4d221a6b",
          "md5": "a673af9e8a29b6ea9667da7b0bc99d6a",
          "sha256": "c9ba4d886feed1c8d7de9ac45e7a87b8f9d6019f328b88c72745331d57e8629f"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a673af9e8a29b6ea9667da7b0bc99d6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 17885,
        "upload_time": "2021-07-10T02:01:16",
        "upload_time_iso_8601": "2021-07-10T02:01:16.564646Z",
        "url": "https://files.pythonhosted.org/packages/7a/15/60bd562a8bb1406c75703ede4b2322dce660dd589bc57b6dba9d4d221a6b/pystream_wushilin-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63c816ff5e7b46af244e5e0270bff4d675f52d513c4b9d23b42513abbdcc5915",
          "md5": "beee923f3cab09c3efb9e8448b872e19",
          "sha256": "5100d20a304353a03e4bf21f789db653e6f6338a594015be59973dc65b48eb67"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "beee923f3cab09c3efb9e8448b872e19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 15941,
        "upload_time": "2021-07-26T13:19:25",
        "upload_time_iso_8601": "2021-07-26T13:19:25.336471Z",
        "url": "https://files.pythonhosted.org/packages/63/c8/16ff5e7b46af244e5e0270bff4d675f52d513c4b9d23b42513abbdcc5915/pystream_wushilin-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0633a3994a69be978916a0c377128f97d6f09e4a8cce5978e400c3942cae2c7",
          "md5": "cf28726cf95ee5064c3065b38a35d3c1",
          "sha256": "316c7968e94c3aa98ebbd52c0a7ebc3ee735c02ffd02d91854b1188a3d84b69c"
        },
        "downloads": -1,
        "filename": "pystream_wushilin-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "cf28726cf95ee5064c3065b38a35d3c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 18137,
        "upload_time": "2021-07-26T13:19:27",
        "upload_time_iso_8601": "2021-07-26T13:19:27.405059Z",
        "url": "https://files.pythonhosted.org/packages/b0/63/3a3994a69be978916a0c377128f97d6f09e4a8cce5978e400c3942cae2c7/pystream_wushilin-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63c816ff5e7b46af244e5e0270bff4d675f52d513c4b9d23b42513abbdcc5915",
        "md5": "beee923f3cab09c3efb9e8448b872e19",
        "sha256": "5100d20a304353a03e4bf21f789db653e6f6338a594015be59973dc65b48eb67"
      },
      "downloads": -1,
      "filename": "pystream_wushilin-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "beee923f3cab09c3efb9e8448b872e19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 15941,
      "upload_time": "2021-07-26T13:19:25",
      "upload_time_iso_8601": "2021-07-26T13:19:25.336471Z",
      "url": "https://files.pythonhosted.org/packages/63/c8/16ff5e7b46af244e5e0270bff4d675f52d513c4b9d23b42513abbdcc5915/pystream_wushilin-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0633a3994a69be978916a0c377128f97d6f09e4a8cce5978e400c3942cae2c7",
        "md5": "cf28726cf95ee5064c3065b38a35d3c1",
        "sha256": "316c7968e94c3aa98ebbd52c0a7ebc3ee735c02ffd02d91854b1188a3d84b69c"
      },
      "downloads": -1,
      "filename": "pystream_wushilin-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "cf28726cf95ee5064c3065b38a35d3c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 18137,
      "upload_time": "2021-07-26T13:19:27",
      "upload_time_iso_8601": "2021-07-26T13:19:27.405059Z",
      "url": "https://files.pythonhosted.org/packages/b0/63/3a3994a69be978916a0c377128f97d6f09e4a8cce5978e400c3942cae2c7/pystream_wushilin-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}