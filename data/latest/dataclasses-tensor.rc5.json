{
  "info": {
    "author": "Oleksii Kachaiev",
    "author_email": "kachayev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Dataclasses Tensor\n\nThe library provides a simple API for encoding and decoding Python [`dataclasses`](https://docs.python.org/3/library/dataclasses.html) to and from tensors (PyTorch tensors or NumPy arrays) based on `typing` annotations.\n\nHeavily inspired by [`dataclasses-json`](https://github.com/lidatong/dataclasses-json) package.\n\n## Install\n\n```shell\npip install dataclasses-tensor\n```\n\n## Quickstart\n\nTensor representation for a game state in Chess:\n\n```python\nfrom dataclasses import dataclass, field\nfrom enum import Enum\nfrom typing import Optional, List\n\nfrom dataclasses_tensor import dataclass_tensor, config\n\nclass Player(Enum):\n  WHITE = 0\n  BLACK = 1\n\nclass PieceType(Enum):\n  PAWN = 0\n  BISHOP = 1\n  KNIGHT = 2\n  ROOK = 3\n  QUEEN = 4\n  KING = 5\n\n@dataclass\nclass Piece:\n  piece_type: PieceType\n  owner: Player\n\n@dataclass_tensor\n@dataclass\nclass Chess:\n  num_moves: float\n  next_move: Player\n  board: List[Optional[Piece]] = field(metadata=config(shape=(64,)))\n```\n\nWorking with tensors:\n\n```python\n>>> state = Chess(100., next_move=Player.WHITE, board=[Piece(PieceType.KING, Player.BLACK)])\n>>> t1 = state.to_numpy()\narray([100.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   0.,\n         1.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,\n...\n>>> t1.shape\n(579,)\n>>> Chess.from_numpy(t1)\nChess(num_moves=100., next_move=<Player.WHITE: 0>, board=[Piece(piece_type=<PieceType.KING: 5>, owner=<Player.BLACK: 1>), ...])\n```\n\n## Types\n\n### Data Classes\n\nThe library uses type annotations to determine appropriate encoding layout. Data class member variables serialized sequentially. See supported types listed below. \n\n### Primitives (int, float, bool)\n\nThe library supports numerical primitives (`int`, `float`) and `bool`. Strings and byte arrays are not supported.\n\nWarning: be careful with tensor `dtype` as an implicit type conversion could potentially lead to losing information (for example, writing `float` into `int32` tensor and reading it back won't produce expected result).\n\n### Enums\n\nPython [`Enums`](https://docs.python.org/3/library/enum.html) are encoded using one-hot encoding.\n\n```python\n>>> from dataclasses_tensor import dataclass_tensor\n>>> from dataclasses import dataclass\n>>> from enum import Enum\n>>>\n>>> class Matrix(Enum):\n...     THE_MATRIX = 1\n...     RELOADED = 2\n...     REVOLUTIONS = 3\n...\n>>> @dataclass_tensor\n... @dataclass\n... class WatchList:\n...     matrix: Matrix\n...\n>>> WatchList(Matrix.RELOADED).to_numpy()\narray([0., 0., 1.])\n>>> WatchList.from_numpy(_)\nWatchList(matrix=<Matrix.RELOADED: 2>)\n```\n\n### Optional\n\n[`typing.Optional`](https://docs.python.org/3/library/typing.html#typing.Optional) type is encoded using additional dimension prior to the main datatype.\n\n```python\n>>> from typing import Optional\n>>>\n>>> @dataclass_tensor\n... @dataclass\n... class MaybeWatchList:\n...     matrix: Optional[Matrix]\n>>>\n>>> MaybeWatchList(Matrix.RELOADED).to_numpy()\narray([0., 0., 1., 0.])\n>>> MaybeWatchList.from_numpy([0., 0., 1., 0.])\nMaybeWatchList(matrix=<Matrix.RELOADED: 2>)\n>>> MaybeWatchList.from_numpy([1., 0., 0., 0.])\nMaybeWatchList(matrix=None)\n```\n\nThe layout described for `Optional[Enum]` is consistent with having `None` as additional option into enumeration.\n\n### Arrays\n\nArrays, defined either using [`typing.List`](https://docs.python.org/3/library/typing.html#typing.List) or `[]` (supported in Python3.9+), require size to be statically provided. See example:\n\n```python\n>>> from typing import List\n>>> from dataclasses_tensor import config\n\n>>> @dataclass_tensor\n... @dataclass\n... class MultipleWatchList:\n...     matrices: List[Matrix] = field(metadata=config(shape=(2,)))\n>>>\n>>> MultipleWatchList([Matrix.THE_MATRIX, Matrix.RELOADED]).to_numpy()\narray([1., 0., 0., 0., 1., 0.])\n>>> MultipleWatchList.from_numpy([1., 0., 0., 0., 1., 0.])\nMultipleWatchList(matrices=[<Matrix.THE_MATRIX: 1>, <Matrix.RELOADED: 2>])\n```\n\nNested lists are supported, note multidimensional `shape` configuration:\n\n```python\n>>> @dataclass_tensor\n... @dataclass\n... class MultipleWatchList:\n...     matrices: List[List[Matrix]] = field(metadata=config(shape=(1,2)))\n>>>\n>>> MultipleWatchList([[Matrix.THE_MATRIX, Matrix.RELOADED]]).to_numpy()\narray([1., 0., 0., 0., 1., 0.])\n>>> MultipleWatchList.from_numpy([1., 0., 0., 0., 1., 0.])\nMultipleWatchList(matrices=[[<Matrix.THE_MATRIX: 1>, <Matrix.RELOADED: 2>]])\n```\n\nIf `List` argument is `Optional`, the list is automatically padded to the right shape with `None`s.\n\n```python\n>>> @dataclass_tensor\n... @dataclass\n... class MaybeMultipleWatchList:\n...     matrices: List[Optional[Matrix]] = field(metadata=config(shape=(3,)))\n>>>\n>>> MaybeMultipleWatchList([Matrix.THE_MATRIX, Matrix.RELOADED]).to_numpy()\narray([0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])\n>>> MaybeMultipleWatchList.from_numpy([0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])\nMaybeMultipleWatchList(matrices=[<Matrix.THE_MATRIX: 1>, <Matrix.RELOADED: 2>, None])\n```\n\n### Union\n\n[`typing.Union`]() is encoded by allocating one-hot tensor to determine which option from the union is given following by corresponding layouts for all options.\n\n```python\n>>> from typing import Union\n>>>\n>>> class Batman(Enum):\n...     BEGINS = 1\n...     DARK_KNIGHT = 2\n...     DARK_KINGHT_RISES = 3\n...\n>>> @dataclass_tensor\n... @dataclass\n... class WatchList:\n...     next_movie: Union[Matrix, Batman]\n...\n>>> WatchList(Matrix.RELOADED).to_numpy()\narray([1., 0., 0., 1., 0., 0., 0., 0.])\n>>> WatchList.from_numpy(_)\nWatchList(next_movie=<Matrix.RELOADED: 2>)\n>>> WatchList(Batman.DARK_KNIGHT).to_numpy()\narray([0., 1., 0., 0., 0., 0., 1., 0.])\n>>> WatchList.from_numpy(_)\nWatchList(next_movie=<Batman.DARK_KNIGHT: 2>)\n```\n\nDecoding is a fairly straigtforward process though encoding might be somewhat problematic: Python's `typing` is not designed to provide separation-by-construction for union types. The library uses simple `isinstance` checks to test out all types provided against a given value, first match is used. The library does not traverse generics, origins, supertypes, etc. So, be diligent defining of `Union`. \n\n### Recursive Definitions\n\nRecursive definitions, like linked lists, trees, graphs etc, are **not supported**. From a usability and performance point of view, it's crucial for encoder/decoder to be able to evaluate statically output tensor size.\n\n## Targets\n\nThe library supports the following containers as tensors:\n\n* [NumPy ndarray](https://numpy.org/doc/stable/reference/generated/numpy.array.html) with `to_numpy`/`from_numpy`\n* [PyTorch tensors](https://pytorch.org/docs/stable/tensors.html) with `to_torch`/`from_torch`\n\nThe best way to work with [TensorFlow tensors](https://www.tensorflow.org/api_docs/python/tf/Tensor) is to use NumPy ndarrays and convert result with `tensorflow.convert_to_tensor` (as the tensor stored in memory as a ndarray anywyas).\n\nNote, that dependencies are not installed with the library itself (TensorFlow, PyTorch or NumPy) and should be provided at runtime.\n\n## Performance\n\nTensor layout is not cached and is computed for each operation. When performing a lot of operations with class definition staying the same, it makes sense to re-use layout. For example:\n\n```python\n>>> class Matrix(Enum):\n...     THE_MATRIX = 1\n...     RELOADED = 2\n...     REVOLUTIONS = 3\n...\n>>> @dataclass_tensor\n... @dataclass\n... class WatchList:\n...     matrix: Matrix\n...\n>>> layout = WatchList.tensor_layout()\n>>> WatchList(Matrix.RELOADED).to_numpy(tensor_layout=layout)\narray([0., 0., 1.])\n>>> WatchList.from_numpy(_, tensor_layout=layout)\nWatchList(matrix=<Matrix.RELOADED: 2>)\n```\n\n## Advanced Features\n\n### Dtype\n\nThe library supports float and integer (long) tensors. The data type could be specified either as a parameter to the `dataclass_tensor` decorator (applied to all operations) or independently as an argument to `to_tensor` function call. See examples below.\n\n`dtype` argument is passed to the corresponding target library, e.g. NumPy ([docs](https://numpy.org/doc/stable/reference/arrays.dtypes.html)), PyTorch ([docs](https://pytorch.org/docs/stable/tensor_attributes.html#torch.torch.dtype)) or TensorFlow.\n\n```python\n>>> class Matrix(Enum):\n...     THE_MATRIX = 1\n...     RELOADED = 2\n...     REVOLUTIONS = 3\n...\n>>> @dataclass_tensor\n... @dataclass\n... class WatchList:\n...     matrix: Matrix\n...\n>>> WatchList(Matrix.RELOADED).to_numpy()\narray([0., 0., 1.], dtype=float32)\n>>> WatchList(Matrix.RELOADED).to_numpy(dtype=\"int32\")\narray([0, 0, 1], dtype=int32)\n```\n\nor with defaults setup in a decorator\n\n```python\n>>> class Matrix(Enum):\n...     THE_MATRIX = 1\n...     RELOADED = 2\n...     REVOLUTIONS = 3\n...\n>>> @dataclass_tensor(dtype=\"int32\")\n... @dataclass\n... class WatchList:\n...     matrix: Matrix\n...\n>>> WatchList(Matrix.RELOADED).to_numpy()\narray([0, 0, 1], dtype=int32)\n```\n\n### Batch\n\nTo create batch, use `batch=True` parameter. See examples:\n\n```python\n>>> class Matrix(Enum):\n...     THE_MATRIX = 1\n...     RELOADED = 2\n...     REVOLUTIONS = 3\n...\n>>> @dataclass_tensor\n... @dataclass\n... class WatchList:\n...     matrix: Matrix\n...\n>>> WatchList.to_numpy([\n...     WatchList(Matrix.THE_MATRIX),\n...     WatchList(Matrix.RELOADED),\n... ], batch=True)\narray([[1., 0., 0.],\n       [0., 1., 0.]], dtype=float32)\n>>> WatchList.from_numpy(_, batch=True)\n[WatchList(next_move=<Matrix.THE_MATRIX: 0>),\n WatchList(next_move=<Matrix.RELOADED: 1>)]\n```\n\n`batch_size` could be used to provide length hint (to ensure good performance when working with generators):\n\n```python\n>>> WatchList.to_numpy((\n...     WatchList(Matrix.THE_MATRIX),\n...     WatchList(Matrix.RELOADED),\n... ), batch_size=2)\narray([[1., 0., 0.],\n       [0., 1., 0.]], dtype=float32)\n>>> WatchList.from_numpy(_, batch_size=2)\n[WatchList(next_move=<Matrix.THE_MATRIX: 0>),\n WatchList(next_move=<Matrix.RELOADED: 1>)]\n```\n\n### Custom Attribute Resolver\n\nTBD\n\n## TODO\n\n- [ ] Custom attribute resolver (e.g. from dict instead of class instance)\n- [ ] Pretty-print for tensor layout object\n\n## Contributing\n\n* Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.\n* Fork the repository on Github & branch from `main` to `feature-*` to start making your changes.\n* Write a test which shows that the bug was fixed or that the feature works as expected.\n\nor simply...\n\n* Use it.\n* Enjoy it.\n* Spread the word.\n\n## License\n\nCopyright © 2021, Oleksii Kachaiev.\n\n`dataclasses-tensor` is licensed under the MIT license, available at MIT and also in the LICENSE file.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kachayev/dataclasses-tensor",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dataclasses-tensor",
    "package_url": "https://pypi.org/project/dataclasses-tensor/",
    "platform": "",
    "project_url": "https://pypi.org/project/dataclasses-tensor/",
    "project_urls": {
      "Homepage": "https://github.com/kachayev/dataclasses-tensor"
    },
    "release_url": "https://pypi.org/project/dataclasses-tensor/0.2.6/",
    "requires_dist": [
      "typing-inspect (>=0.4.0)",
      "dataclasses ; python_version == \"3.6\"",
      "pytest ; extra == 'tests'",
      "ipython ; extra == 'tests'",
      "flake8 ; extra == 'tests'",
      "numpy (>=1.18.5) ; extra == 'tests'",
      "torch (>=1.8.0) ; extra == 'tests'",
      "future ; extra == 'tests'",
      "hypothesis ; extra == 'tests'"
    ],
    "requires_python": ">=3.6",
    "summary": "Easily serialize dataclasses to and from tensors",
    "version": "0.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9832744,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7f0ae29e08137b5a349eaf67ad5329debbb03737c4fc91265acd15dcb84fcc6",
          "md5": "d848da7b99f7c750283a584c8c92595c",
          "sha256": "44ff17bba134e43e989cf30652f45e24206c3540e09c145463d28237efc6557b"
        },
        "downloads": -1,
        "filename": "dataclasses-tensor-0.2.0.macosx-10.15-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "d848da7b99f7c750283a584c8c92595c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13976,
        "upload_time": "2021-03-19T03:36:59",
        "upload_time_iso_8601": "2021-03-19T03:36:59.382458Z",
        "url": "https://files.pythonhosted.org/packages/d7/f0/ae29e08137b5a349eaf67ad5329debbb03737c4fc91265acd15dcb84fcc6/dataclasses-tensor-0.2.0.macosx-10.15-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64aca7ddb617bcb4742bd2a73989694de792e11fd173a0fcae1b4f79d1289185",
          "md5": "261de188114532fc9be0eda206631dd9",
          "sha256": "d809eec18e5b733b9a7386fd4bc6946cf07f8413ed840daaa902564f48c76df5"
        },
        "downloads": -1,
        "filename": "dataclasses_tensor-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "261de188114532fc9be0eda206631dd9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9504,
        "upload_time": "2021-03-19T03:36:57",
        "upload_time_iso_8601": "2021-03-19T03:36:57.724866Z",
        "url": "https://files.pythonhosted.org/packages/64/ac/a7ddb617bcb4742bd2a73989694de792e11fd173a0fcae1b4f79d1289185/dataclasses_tensor-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b12966d465fc161b75eaffd2bede414f99b01aad6abe6c194097b37433331e7f",
          "md5": "480cdffff7d55bc86dc093298c1f5256",
          "sha256": "a7a734012f054d5fee8f0e42c8c83d74c5e40e7553530c10f05e059c1f2b46b9"
        },
        "downloads": -1,
        "filename": "dataclasses_tensor-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "480cdffff7d55bc86dc093298c1f5256",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9528,
        "upload_time": "2021-03-20T00:17:55",
        "upload_time_iso_8601": "2021-03-20T00:17:55.435053Z",
        "url": "https://files.pythonhosted.org/packages/b1/29/66d465fc161b75eaffd2bede414f99b01aad6abe6c194097b37433331e7f/dataclasses_tensor-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96475f7e8cf446581089189c6fd54f2df03f455cbf0139680a043664aa0f7f5b",
          "md5": "b6f2e48cf47ae7c7aed5a873763cbd4f",
          "sha256": "42eb8ce3292c2cfee81d87be063e31241e22a3c358e54198dc014d04dcdd2519"
        },
        "downloads": -1,
        "filename": "dataclasses_tensor-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6f2e48cf47ae7c7aed5a873763cbd4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10151,
        "upload_time": "2021-03-20T01:43:31",
        "upload_time_iso_8601": "2021-03-20T01:43:31.920799Z",
        "url": "https://files.pythonhosted.org/packages/96/47/5f7e8cf446581089189c6fd54f2df03f455cbf0139680a043664aa0f7f5b/dataclasses_tensor-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7863e0e27dafbae6d591c6cfb5f92879135487f6e32d5caca1e6a92cd0c8f60c",
          "md5": "2447acac3568a773d467df109198ade4",
          "sha256": "d43f54d29d2d12c67d096550e1242cb5ca032219f349a60ce621d901da7a7ed3"
        },
        "downloads": -1,
        "filename": "dataclasses-tensor-0.2.5.macosx-10.15-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "2447acac3568a773d467df109198ade4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15406,
        "upload_time": "2021-03-20T03:50:19",
        "upload_time_iso_8601": "2021-03-20T03:50:19.196597Z",
        "url": "https://files.pythonhosted.org/packages/78/63/e0e27dafbae6d591c6cfb5f92879135487f6e32d5caca1e6a92cd0c8f60c/dataclasses-tensor-0.2.5.macosx-10.15-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db1cd51acf106f6ac25f221a1945a664cb2da3b2c020fa682a460ee30aa448b6",
          "md5": "053668f8c4c543f237313cdfbce1837c",
          "sha256": "9f9dd0955396866375030568e4932b3c6d7a8d5bfa076423f225215d50f9ab2f"
        },
        "downloads": -1,
        "filename": "dataclasses_tensor-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "053668f8c4c543f237313cdfbce1837c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10198,
        "upload_time": "2021-03-20T03:50:17",
        "upload_time_iso_8601": "2021-03-20T03:50:17.490047Z",
        "url": "https://files.pythonhosted.org/packages/db/1c/d51acf106f6ac25f221a1945a664cb2da3b2c020fa682a460ee30aa448b6/dataclasses_tensor-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73eab1836203072bbb0bd760c05d28685bcfe2b695fa0a400c3ae54a24229fcd",
          "md5": "9a64c6888ac5b26127393bacd192c5be",
          "sha256": "da54d4d4d7de6e8ed1ac8f78e31ba2cbe43c36bf8409c49fc136774e5383ca66"
        },
        "downloads": -1,
        "filename": "dataclasses-tensor-0.2.6.macosx-10.15-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "9a64c6888ac5b26127393bacd192c5be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15334,
        "upload_time": "2021-03-21T02:58:06",
        "upload_time_iso_8601": "2021-03-21T02:58:06.229238Z",
        "url": "https://files.pythonhosted.org/packages/73/ea/b1836203072bbb0bd760c05d28685bcfe2b695fa0a400c3ae54a24229fcd/dataclasses-tensor-0.2.6.macosx-10.15-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b9f4ff4bcb693f922a10038955b00f1f189f1eea165e3e2c80f792271547834",
          "md5": "0daa9034f63b48519ba8cdb62cc3bd2c",
          "sha256": "e840b5f35c7387c24226c133621fa5d30a3f8293c5a2d0a1fb8c01238f012cf3"
        },
        "downloads": -1,
        "filename": "dataclasses_tensor-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0daa9034f63b48519ba8cdb62cc3bd2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10196,
        "upload_time": "2021-03-21T02:58:04",
        "upload_time_iso_8601": "2021-03-21T02:58:04.548134Z",
        "url": "https://files.pythonhosted.org/packages/8b/9f/4ff4bcb693f922a10038955b00f1f189f1eea165e3e2c80f792271547834/dataclasses_tensor-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73eab1836203072bbb0bd760c05d28685bcfe2b695fa0a400c3ae54a24229fcd",
        "md5": "9a64c6888ac5b26127393bacd192c5be",
        "sha256": "da54d4d4d7de6e8ed1ac8f78e31ba2cbe43c36bf8409c49fc136774e5383ca66"
      },
      "downloads": -1,
      "filename": "dataclasses-tensor-0.2.6.macosx-10.15-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "9a64c6888ac5b26127393bacd192c5be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15334,
      "upload_time": "2021-03-21T02:58:06",
      "upload_time_iso_8601": "2021-03-21T02:58:06.229238Z",
      "url": "https://files.pythonhosted.org/packages/73/ea/b1836203072bbb0bd760c05d28685bcfe2b695fa0a400c3ae54a24229fcd/dataclasses-tensor-0.2.6.macosx-10.15-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b9f4ff4bcb693f922a10038955b00f1f189f1eea165e3e2c80f792271547834",
        "md5": "0daa9034f63b48519ba8cdb62cc3bd2c",
        "sha256": "e840b5f35c7387c24226c133621fa5d30a3f8293c5a2d0a1fb8c01238f012cf3"
      },
      "downloads": -1,
      "filename": "dataclasses_tensor-0.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0daa9034f63b48519ba8cdb62cc3bd2c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10196,
      "upload_time": "2021-03-21T02:58:04",
      "upload_time_iso_8601": "2021-03-21T02:58:04.548134Z",
      "url": "https://files.pythonhosted.org/packages/8b/9f/4ff4bcb693f922a10038955b00f1f189f1eea165e3e2c80f792271547834/dataclasses_tensor-0.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}