{
  "info": {
    "author": "Pavel Golovatenko-Abramov",
    "author_email": "p.golovatenko@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# pilsner\n\nPython implemented library servicing named entity recognition\n\n[![pypi][pypi-img]][pypi-url]\n\n[pypi-img]: https://img.shields.io/pypi/v/pilsner?style=plastic\n[pypi-url]: https://pypi.org/project/pilsner/\n\n## 1. Purpose\n\nThis library is Python implementation of toolkit for dictionary based named\nentity recognition. It is intended to store any thesaurus in a trie-like\nstructure and identify any of stored synonyms in a string.\n\n## 2. Installation and dependencies\n\n```bash\npip install pilsner\n```\n\n`pilsner` is tested in Python 3.6, 3.7, and 3.8.\n\nThe only dependency is `sic` package. While it can be automatically installed\nat the time of `pilsner` installation, manual installation of `sic` beforehand\nmight also be considered (see benchmark of cythonized vs pure Python\nimplementation in `sic` docimentation,\n[https://pypi.org/project/sic/](https://pypi.org/project/sic/)).\n\n## 3. Diagram\n\n`pilsner` consists of two major components: `Model` and `Utility`. `Model`\nclass provides storage for the dictionary and string normalization rules, as\nwell as low-level methods for populating this storage. `Utility` class provides\nhigh-level methods for storing and retrieving data to/from `Model` instance.\n\n![Diagram](https://github.com/pgolo/pilsner/blob/master/misc/pilsner-diagram.svg)\n\n## 4. Usage\n\n```python\nimport pilsner\n```\n\n### 4.1. Initialize model\n\n- To initialize empty model:\n\n```python\nm = pilsner.Model()\n```\n\n- To specify path to temporary database for empty model:\n\n```python\nm = pilsner.Model(storage_location='path/to/database.file')\n```\n\n- To create empty model that uses database created in memory rather than on\ndisk:\n\n```python\nm = pilsner.Model(storage_location=':memory:')\n```\n\n- To create empty model that does not store any attributes in a database at all:\n\n```python\nm = pilsner.Model(simple=True)\n```\n\n> If database is created in memory, the model cannot be later saved on disk\n(can only be used instantly).\n\n- To load model from disk:\n\n```python\nm = pilsner.Model(filename='path/to/model')\n```\n\n> More on how model is saved to and loaded from disk - see\n[4.6. Save model](#46-save-model) and [4.7. Load model](#47-load-model).\n\n### 4.2. Add string normalization units\n\n- Depending on the dictionary and nature of the text supposed to be parsed,\nstring normalization might not be required at all, and nothing specific is to\nbe done here in such case.\n- Without string normalization, synonyms from the dictionary will be stored as\nthey are and looked up by recognizer case-sensitively.\n- To add a single normalization unit:\n\n```python\n# Assuming m is pilsner.Model instance:\nm.add_normalizer(\n    normalizer_name='normalizer_tag',\n    filename='path/to/normalizer_config.xml'\n)\n```\n\n> String normalization is technically done by `sic` component. See\n> documentation for `sic` at\n> [https://pypi.org/project/sic/](https://pypi.org/project/sic/) to learn how\n> to design normalizer config.\n\n- Model can embed more than one normalization unit.\n- Default normalization unit for the model is the one added first or the last\none added with parameter `default` set to `True`.\n- Having multiple normalization units in one model makes perfect sense when the\nstored dictionary contains synonyms of different nature that should be\nnormalized in different ways (for example, abbreviations probably should not\nget normalized at all, while other synonyms might include tokens or punctuation\nmarks that should not affect entity recognition). For that purpose, Model class\nincludes `normalizer_map` dict that is supposed to map names of added\nnormalization units to values in specific field in a dictionary designating the\nway a synonym should be normalized (tokenizer field, or tokenizer column):\n\n```python\n# Assuming m is pilsner.Model instance:\nm.normalizer_map = {\n    'synonym_type_1': 'normalizer_1',\n    'synonym_type_2': 'normalizer_2'\n}\n```\n\n> The snippet above instructs `pilsner` to normalize synonyms that have\n> `synonym_type_1` value in `tokenizer` column with `normalizer_1`\n> normalization unit, and normalize synonyms that have `synonym_type_2` value\n> in `tokenizer` column with `normalizer_2` normalization unit. For more about\n> fields in a dictionary, see [4.4. Define dictionary](#44-define-dictionary).\n\n### 4.3. Initialize utility\n\n- To load dictionary into `Model` instance, as well as to parse text, the\n`Utility` instance is required:\n\n```python\nr = pilsner.Utility()\n```\n\n### 4.4. Define dictionary\n\n- Source dictionary for `pilsner` must be delimited text file.\n- Along with the source dictionary, specifications of the columns (fields) must\nbe provided as list where each item corresponds to a column (from left to\nright). Each item in this list must be a dict object with string keys `name`,\n`include`, `delimiter`, `id_flag`, `normalizer_flag`, and `value_flag`, so\nthat:\n  - `field['name']` is a string for column title;\n  - `field['include']` is a boolean that must be set to `True` for the column\n  to be included in the model, otherwise `False`;\n  - `field['delimiter']` is a string that is supposed to split single cell into\n  list of values if the column holds concatenated lists rather than individual\n  values;\n  - `field['id_flag]` is a boolean that must be set to `True` if the column is\n  supposed to be used for grouping synonyms (generally, entity ID is such\n  column), otherwise `False`;\n  - `field['normalizer_flag']` is a boolean that must be set to `True` if the\n  column holds indication on what normalization unit must be applied to this\n  particular synonym, otherwise `False`;\n  - `field['value_flag']` is a boolean that must be set to `True` if the column\n  holds synonyms that are supposed to be looked up when parsing a text,\n  otherwise `False`.\n\n> If dictionary has a column flagged with `normalizer_flag`, synonym in each\n> row will be normalized with string normalization unit which name is mapped on\n> value in this column using `pilsner.Model.normalizer_map` dict. If value is\n> not among `pilsner.Model.normalizer_map` keys, default normalization unit\n> will be used.\n\n### 4.5. Compile model\n\n- To store dictionary in `Model` instance, method `compile_model` of `Utility`\ninstance must be called with the following required parameters:\n  - `model`: pointer to initilized `Model` instance;\n  - `filename`: string with path and filename of source dictionary;\n  - `fields`: dict object with definitions of columns (see\n  [4.4. Define dictionary](#44-define-dictionary));\n  - `word_separator`: string defining what is to be considered word separator\n  (generally, it should be whitespace);\n  - `column_separator`: string defining what is to be considered column\n  separator (e.g. `\\t` for tab-delimited file);\n  - `column_enclosure`: string defining what is to be stripped away from cell\n  after row has been split into columns (typically, it should be `\\n` for new\n  line character to be trimmed from the rightmost column).\n\n```python\n# Assuming m is pilsner.Model instance and r is pilsner.Utility instance:\nr.compile_model(\n    model=m,\n    filename='path/to/dictionary_in_a_text_file.txt',\n    fields=fields,\n    word_separator=' ',\n    column_separator='\\t',\n    column_enclosure='\\n'\n)\n```\n\n- To review optional parameters, see comments in the code.\n\n### 4.6. Save model\n\n- If `Model` instance has compiled dictionary, and if database location for the\n`Model` instance is not explicitly set to `':memory:'`, the data such instance\nis holding can be saved to disk:\n\n```python\n# Assuming m is pilsner.Model instance\nm.save('path/to/model_name')\n```\n\n- The snippet above will write the following files:\n  - `path/to/model_name.attributes`: database with attributes (fields from the\n  dictionary that are not synonyms) - will only be written if `Model` instance\n  is not created with `simple=True` parameter;\n  - `path/to/model_name.keywords`: keywords used for disambiguation;\n  - `path/to/model_name.normalizers`: string normalization units;\n  - `path/to/model_name.0.dictionary`: trie with synonyms;\n  - `path/to/model_name.<N>.dictionary`: additional tries with synonyms (`<N>`\n  being integer number of a trie) in case more than one trie was created (see\n  comments in the code - `pilsner.Utility.compile_model` method, `item_limit`\n  parameter).\n\n### 4.7. Load model\n\n- To initialize new `Model` instance using previously saved data:\n\n```python\nm = pilsner.Model(filename='path/to/model_name')\n```\n\n- Alternatively, data can be loaded to previously initialized `Model` instance:\n\n```python\nm = pilsner.Model()\nm.load('path/to/model_name')\n```\n\n- In both cases, the program will look for the following files:\n  - `path/to/model_name.attributes`: database with attributes (fields from the\n  dictionary that are not synonyms) - if not found, `Model` instance will work\n  as if it is initialized with `simple=True` parameter, meaning no attributes\n  other than primary IDs could be processed;\n  - `path/to/model_name.keywords`: keywords used for disambiguation;\n  - `path/to/model_name.normalizers`: string normalization units;\n  - `path/to/model_name.<N>.dictionary`: tries with synonyms (`<N>` being\n  integer).\n\n### 4.8. Parse string\n\n- To parse a string without filtering out any synonyms and output all\nattributes of spotted entities:\n\n```python\n# Assuming m is pilsner.Model instance, r is pilsner.Utility instance,\n# and text_to_parse is string to parse\nparsed = r.parse(\n    model=m,\n    source_string=text_to_parse\n)\n```\n\n- The output will be dict object where keys are tuples for location of spotted\nentity in a string (begin, end) and values are dicts for attributes that are\nassociated with identified entity (`{'attribute_name': {attribute_values}}`).\n- To ignore entity by its label rather than some of its attributes, compiled\nmodel can be adjusted using `pilsnet.Utility.ignore_node()` method:\n\n```python\n# Assuming m is pilsner.Model instance, r is pilsner.Utility instance\nr.ignore_node(\n  model=m,\n  label='irrelevant substring'\n)\n# substring 'irrelevant substring' will not be found by pilsner.Utility.parse()\n# even if it is present in the model\n```\n\n- For details about optional parameters, see comments in the code -\n`pilsner.Utility.parse()` function.\n\n## 5. Example\n\nEverything written above is put together in example code,\nsee **/misc/example/** directory in the project's repository.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pgolo/pilsner",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pilsner",
    "package_url": "https://pypi.org/project/pilsner/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pilsner/",
    "project_urls": {
      "Homepage": "https://github.com/pgolo/pilsner"
    },
    "release_url": "https://pypi.org/project/pilsner/0.1.0/",
    "requires_dist": [
      "sic (>=1.2.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Utility for dictionary-based named entity recognition",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8629700,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7076879a4eee21c83011c9800ac8c46ac21c039bf27a368ba58da8013c09a5fa",
          "md5": "ee14c451174e0788d37efad22d8a8d10",
          "sha256": "83151cc14f909c029d9ce021b80b3663a7fe9172da4530fb231c7c9b744d85e8"
        },
        "downloads": -1,
        "filename": "pilsner-0.0.1-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "ee14c451174e0788d37efad22d8a8d10",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": ">=3.6",
        "size": 499423,
        "upload_time": "2020-10-09T02:49:02",
        "upload_time_iso_8601": "2020-10-09T02:49:02.950784Z",
        "url": "https://files.pythonhosted.org/packages/70/76/879a4eee21c83011c9800ac8c46ac21c039bf27a368ba58da8013c09a5fa/pilsner-0.0.1-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdf84501b357ca09064a63ec876479fdccb1ca0543607839a2f76d01868c2840",
          "md5": "37f986702dcc66e05f51c32847605342",
          "sha256": "7a39e5de4dfffd9f9ee7693b463805453fdd8bbdf36a3efee23f425ba1f195ba"
        },
        "downloads": -1,
        "filename": "pilsner-0.0.1-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "37f986702dcc66e05f51c32847605342",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.6",
        "size": 499455,
        "upload_time": "2020-10-09T02:49:06",
        "upload_time_iso_8601": "2020-10-09T02:49:06.478791Z",
        "url": "https://files.pythonhosted.org/packages/bd/f8/4501b357ca09064a63ec876479fdccb1ca0543607839a2f76d01868c2840/pilsner-0.0.1-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e735a919c00cac0ce6d727aa6c5726e3a8a378899151da36c7e0f4db373ca2b",
          "md5": "192e407da8e83c2d1e2533c0458b7d95",
          "sha256": "819ffac1bf68350e8a31b99c3d40bdbc3725570bfdc86356b5c5b36ccea36e6f"
        },
        "downloads": -1,
        "filename": "pilsner-0.0.1-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "192e407da8e83c2d1e2533c0458b7d95",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6",
        "size": 506415,
        "upload_time": "2020-10-09T02:49:07",
        "upload_time_iso_8601": "2020-10-09T02:49:07.972570Z",
        "url": "https://files.pythonhosted.org/packages/1e/73/5a919c00cac0ce6d727aa6c5726e3a8a378899151da36c7e0f4db373ca2b/pilsner-0.0.1-cp38-cp38-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f056f9f666fc81d85591bb8ed17d334e2717436de5b9e0a5d0f98767e57a53e7",
          "md5": "52bf9864a642babe784faced3c87149f",
          "sha256": "086d56b2f99d447bc0a58e84d4efd81fc9770e657b03b0232f4cdfe1ad984191"
        },
        "downloads": -1,
        "filename": "pilsner-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "52bf9864a642babe784faced3c87149f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20672,
        "upload_time": "2020-10-09T02:49:09",
        "upload_time_iso_8601": "2020-10-09T02:49:09.271006Z",
        "url": "https://files.pythonhosted.org/packages/f0/56/f9f666fc81d85591bb8ed17d334e2717436de5b9e0a5d0f98767e57a53e7/pilsner-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af26c2313b8c35e0793aa038f20a731ff93f2206e583eb95a9a2554fbb409a33",
          "md5": "fafc19f6ddb6ca6b80bdc07a5389c528",
          "sha256": "f26552a2258536df70bcea9af4c45a097b1c77af83fd9fbd1757029c17724368"
        },
        "downloads": -1,
        "filename": "pilsner-0.1.0-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "fafc19f6ddb6ca6b80bdc07a5389c528",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": ">=3.6",
        "size": 523160,
        "upload_time": "2020-11-11T05:56:12",
        "upload_time_iso_8601": "2020-11-11T05:56:12.359910Z",
        "url": "https://files.pythonhosted.org/packages/af/26/c2313b8c35e0793aa038f20a731ff93f2206e583eb95a9a2554fbb409a33/pilsner-0.1.0-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4f1aba9e1ccd1e28f0190361f05049ae5ec22e56978cecd7a15103fc84836f1",
          "md5": "092c31c4357a464fd07ca3d4272dd754",
          "sha256": "12a34a757d8d90cde10f82bcf68bc4839a841d52a4712f7ac147dd57719d22ef"
        },
        "downloads": -1,
        "filename": "pilsner-0.1.0-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "092c31c4357a464fd07ca3d4272dd754",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.6",
        "size": 523206,
        "upload_time": "2020-11-11T05:56:13",
        "upload_time_iso_8601": "2020-11-11T05:56:13.713637Z",
        "url": "https://files.pythonhosted.org/packages/e4/f1/aba9e1ccd1e28f0190361f05049ae5ec22e56978cecd7a15103fc84836f1/pilsner-0.1.0-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2aaaf0a531d241115a5130c5cabf2830e16d3ee23e9bc5b87edad4903b424de2",
          "md5": "a50cb0e14ceeb136630ff71a46980fc4",
          "sha256": "4164c94c4d8ce56fdc167f6ed56a8a466afdebf6fe19f2af94da414ab5596a56"
        },
        "downloads": -1,
        "filename": "pilsner-0.1.0-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "a50cb0e14ceeb136630ff71a46980fc4",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6",
        "size": 530566,
        "upload_time": "2020-11-11T05:56:15",
        "upload_time_iso_8601": "2020-11-11T05:56:15.074409Z",
        "url": "https://files.pythonhosted.org/packages/2a/aa/f0a531d241115a5130c5cabf2830e16d3ee23e9bc5b87edad4903b424de2/pilsner-0.1.0-cp38-cp38-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "034700198e040bb51fa49d0e0627c35369caeeed64c77daa1e10c144202aa7f2",
          "md5": "0f3be0bd1b6f890d204792acb5ca1c13",
          "sha256": "a0c04de0a2e3a72f22c52eb70c8c391dc611180d5f6e4b6e608d5b87768a490b"
        },
        "downloads": -1,
        "filename": "pilsner-0.1.0-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "0f3be0bd1b6f890d204792acb5ca1c13",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 529404,
        "upload_time": "2020-11-11T05:56:16",
        "upload_time_iso_8601": "2020-11-11T05:56:16.334489Z",
        "url": "https://files.pythonhosted.org/packages/03/47/00198e040bb51fa49d0e0627c35369caeeed64c77daa1e10c144202aa7f2/pilsner-0.1.0-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1f2a7884222a5ec1f66d925b8887825f9694c224c373cdbef1e83d23a0e8d35",
          "md5": "db9a73fa4b103a156537b724340ef715",
          "sha256": "7bf1a2afb8e3a66e43aad5a8f9e31a0829d072fdd9957ea98075613ea6fb7681"
        },
        "downloads": -1,
        "filename": "pilsner-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "db9a73fa4b103a156537b724340ef715",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22057,
        "upload_time": "2020-11-11T05:56:17",
        "upload_time_iso_8601": "2020-11-11T05:56:17.621131Z",
        "url": "https://files.pythonhosted.org/packages/a1/f2/a7884222a5ec1f66d925b8887825f9694c224c373cdbef1e83d23a0e8d35/pilsner-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af26c2313b8c35e0793aa038f20a731ff93f2206e583eb95a9a2554fbb409a33",
        "md5": "fafc19f6ddb6ca6b80bdc07a5389c528",
        "sha256": "f26552a2258536df70bcea9af4c45a097b1c77af83fd9fbd1757029c17724368"
      },
      "downloads": -1,
      "filename": "pilsner-0.1.0-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "fafc19f6ddb6ca6b80bdc07a5389c528",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6",
      "size": 523160,
      "upload_time": "2020-11-11T05:56:12",
      "upload_time_iso_8601": "2020-11-11T05:56:12.359910Z",
      "url": "https://files.pythonhosted.org/packages/af/26/c2313b8c35e0793aa038f20a731ff93f2206e583eb95a9a2554fbb409a33/pilsner-0.1.0-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4f1aba9e1ccd1e28f0190361f05049ae5ec22e56978cecd7a15103fc84836f1",
        "md5": "092c31c4357a464fd07ca3d4272dd754",
        "sha256": "12a34a757d8d90cde10f82bcf68bc4839a841d52a4712f7ac147dd57719d22ef"
      },
      "downloads": -1,
      "filename": "pilsner-0.1.0-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "092c31c4357a464fd07ca3d4272dd754",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6",
      "size": 523206,
      "upload_time": "2020-11-11T05:56:13",
      "upload_time_iso_8601": "2020-11-11T05:56:13.713637Z",
      "url": "https://files.pythonhosted.org/packages/e4/f1/aba9e1ccd1e28f0190361f05049ae5ec22e56978cecd7a15103fc84836f1/pilsner-0.1.0-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2aaaf0a531d241115a5130c5cabf2830e16d3ee23e9bc5b87edad4903b424de2",
        "md5": "a50cb0e14ceeb136630ff71a46980fc4",
        "sha256": "4164c94c4d8ce56fdc167f6ed56a8a466afdebf6fe19f2af94da414ab5596a56"
      },
      "downloads": -1,
      "filename": "pilsner-0.1.0-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "a50cb0e14ceeb136630ff71a46980fc4",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6",
      "size": 530566,
      "upload_time": "2020-11-11T05:56:15",
      "upload_time_iso_8601": "2020-11-11T05:56:15.074409Z",
      "url": "https://files.pythonhosted.org/packages/2a/aa/f0a531d241115a5130c5cabf2830e16d3ee23e9bc5b87edad4903b424de2/pilsner-0.1.0-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "034700198e040bb51fa49d0e0627c35369caeeed64c77daa1e10c144202aa7f2",
        "md5": "0f3be0bd1b6f890d204792acb5ca1c13",
        "sha256": "a0c04de0a2e3a72f22c52eb70c8c391dc611180d5f6e4b6e608d5b87768a490b"
      },
      "downloads": -1,
      "filename": "pilsner-0.1.0-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "0f3be0bd1b6f890d204792acb5ca1c13",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.6",
      "size": 529404,
      "upload_time": "2020-11-11T05:56:16",
      "upload_time_iso_8601": "2020-11-11T05:56:16.334489Z",
      "url": "https://files.pythonhosted.org/packages/03/47/00198e040bb51fa49d0e0627c35369caeeed64c77daa1e10c144202aa7f2/pilsner-0.1.0-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1f2a7884222a5ec1f66d925b8887825f9694c224c373cdbef1e83d23a0e8d35",
        "md5": "db9a73fa4b103a156537b724340ef715",
        "sha256": "7bf1a2afb8e3a66e43aad5a8f9e31a0829d072fdd9957ea98075613ea6fb7681"
      },
      "downloads": -1,
      "filename": "pilsner-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "db9a73fa4b103a156537b724340ef715",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22057,
      "upload_time": "2020-11-11T05:56:17",
      "upload_time_iso_8601": "2020-11-11T05:56:17.621131Z",
      "url": "https://files.pythonhosted.org/packages/a1/f2/a7884222a5ec1f66d925b8887825f9694c224c373cdbef1e83d23a0e8d35/pilsner-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}