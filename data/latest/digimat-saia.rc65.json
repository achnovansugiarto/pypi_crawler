{
  "info": {
    "author": "Frederic Hess",
    "author_email": "fhess@st-sa.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3"
    ],
    "description": "===================\nPython digimat.saia\n===================\n\nThis is a Python 3 module allowing anyone to create **client** and/or **server** `SAIA EtherSBus <https://wiki.wireshark.org/EtherSBus>`_  nodes.\nThis code allow you to create low cost, fast and reliable communication services with any EtherSBus device, reading and writing data from/to them. By data (items),\nwe mean inputs, outputs, flags, registers, timers and counters. In the exemple below, a local SBus node with address 253 (station number, or localid, or lid in our terminology) is created. \n\n.. code-block:: python\n\n    >>> from digimat.saia import SAIANode\n    >>> node=SAIANode(253)\n\nCongratulations ! You just have powered up your first EtherSNode device with 2 lines of code. A **background task handle now for you all the network SBus frames**. \nOpen your SAIA PG5 Debugger and try to read/write some data **to** your node. Of course, you can also talk to other SAIA PCD EtherSBus devices directly \nfrom your node trough le LAN (read/write flags, registers, ... on remote PCDs). This will be explained below (see \"EtherSBus Client\" chapter). To give you an idea on how to use this module, you will find a basic `Python interactive session demo here <https://www.youtube.com/watch?v=QEPai3HXICY>`_. \n\n.. image:: https://st-sa.ch/img/figures/digimat-saia-asciinema.png\n   :width: 360px\n   :target: https://www.youtube.com/watch?v=QEPai3HXICY\n\nWhen done, shutdown your node properly.\n\n.. code-block:: python\n\n    >>> node.stop()\n    >>> quit()\n\nWarning : if you observe a socket error at node start, this is probably due to the fact that the listening port is already opened on your machine from\nan other process. The default listening port is 5050. Try changing it to see if this fix the problem\n\n.. code-block:: python\n\n    >>> node=SAIANode(253, port=15050)\n\n\nNon exhaustive features list\n============================\n\nOut of the box features\n\n* EtherSbus Server (expose local data to other EtherSBus nodes)\n* EtherSBus Client (remote access to N remote EtherSBus nodes)\n* Local Server AND Remote Client(s) simultaneous communication support\n* Read/Write of local and remote Inputs/Outputs/Flags/Registers/Timers/Counters data values trough simple objects \".value\" get/set\n* Background task (thread) managing every server+clients messages once the node is started\n* Registers value encoders allowing working transparently with float, float32 and some other encodings\n* Automatic pooling in the background of every declared remote items (manual refresh is also possible)\n* Node station address automatic resolution\n* Automatic read/write requests aggregations (using one message for multiple items transfer)\n* Prioritized request queuing allowing urgent transactions to be processed first, providing good \n  responsiveness even with tons of pooled items\n* Lightweight enough to be comfortably run on \"poor\" hardware systems (Raspberry Pi)\n* Compatible with the SAIA PG5 Debugger (display/write/clear orders)\n\nOptional features\n\n* Automatic *on-the-fly* local items creation when accessed by remote nodes (without prior declaration). This\n  allows very easy EtherSBus node creation, working *out-of-the-box* once launched\n* Periodic remote node discovering and declaration (trough broadcast messages)\n* Automatic remote node information retrieval (trough READ_DBX blocks transfers),\n  allowing to guess the PG5 compiler generated .map symbol file name ;) you will learn to love your .map files\n* PG5 symbols files (.map) parsing, allowing flags, registers, timers and counters symbolic access !\n* Dynamic objects creation at runtime when .map file is loaded to enhance Python \n  interactive sessions experience (autocompletion)\n* Logging for local or remote debugging trough TCP/IP.\n\n\nSAIA EtherSBus\n==============\n\nThe EtherSBus is mainly an UDP encapsulated version of the serial SAIA S-Bus. The EtherSBus is `natively implemented <https://www.sbc-support.com/fr/product-category/communication-protocols/>`_\nin any SAIA nodes having a LAN port, providing a very easy way to exchange (read/write) information with 3rd party devices. Using native S-Bus protocol instead \nof something more *standard* like Modbus/IP or BACnet/IP has some advantages\n\n* No (or very few) setup is needed on the existing SAIA CPUs (means no or very few additional costs)\n* Mapping SAIA variables to Modbus/BACnet variables require additional specific config and hardware ressources that you may not have\n* Data communication using more sophisticated protocols like BACnet use more encapsulation around exchanged data. Using EtherSBus\n  is more *lightweight* and efficient.\n\nThe digimat.saia module was mainly created to partially explore the S-Bus mecanisms on Raspberry Pi devices \nbefore starting a deeper implementation on our `Digimat <https://www.st-sa.ch/digimat.html>`_ HVAC BMS infrastructures. SAIA Burgess\nhas absolutely **no implication** on this project and cannot be held responsible for any problem of any kind if you decide to use this module.\n\nAt this time, we don't have access to any S-Bus or EtherSBus protocol official specifications. This is the result of a \"blind\" protocol analysis, with\nno information given by SAIA (no pain, no gain). If you own such documentation, please forward it to us (fhess [at] st-sa [dot] ch), \nas SAIA doesn't want to provide it to us ;( If you need to learn about this protocol, some good starting points may include :\n\n* `WireShark EtherSBus plugin source code <https://github.com/boundary/wireshark/blob/master/epan/dissectors/packet-sbus.c>`_\n* `SBPoll Python EtherSBus source code <http://mblogic.sourceforge.net/mbtools/sbpoll.html>`_\n* `SAIA faq <http://www.sbc-support.ch/faq>`_\n* The protocol specification *should* be theorically available upon request per email to SAIA at support [at] saia-pcd [dot] com, \n  but you will need to sign a non disclosure agreement. Ask for the \"**Utilization Agreement for Saia S-Bus Developer Documentation**\" document.\n  We have never received any response to thoses requests ;(\n\nUsing the SAIA PG5 debugger may also help understanding how things works. Wireshark has an excellent protocol decoder \nand you will easily find some .pcap samples by googling \"sbus pcap\". Really useful.\n\nDon't forget that the SAIA dynamic addressing won't be your friend here as you must know the address of the variable\nyou want to access (read/write). Consider fixing your variables to \"static\" addresses in your PG5 configuration (**read SAIA FAQ 101533**, to knows actions that may affect variables\naddress change). We have implemented some helpers to provide limited symbolic access using the PG5 .map file if you have it (see chapter \"Symbolic Adressing\" below).\nThere are some tricks available to help you using items tag name ;)\n\nOh, and of course, EtherSBus communication has to be enabled on your PCD device ;)\n\n\nInstallation\n============\n\nNothing specific here, just use pip (which will also install modules dependencies)\n\n.. code-block:: bash\n\n    pip install -U digimat.saia\n\nOn Windows, you will need to install (if not already done) the `Microsoft Visual C++ Build Tool <https://visualstudio.microsoft.com/fr/downloads/>`_, required to install some dependencies. This can take some time to install it.\n\n\nEtherSBus Node (Server)\n=======================\n\nOnce created, the **SAIANode** object will implicitely start a background task responsible for protocol and bus variables management.\nThe task must be stop()ed before the program termination, to shutdown the background task. The node contains a server (allowing other nodes to read an write \ndata to it), and may also connect (acting as a client) to other remote SBus servers to read/write remote data. Each server (local-node or remote-node)\nhas it's own memory representation (SAIAMemory) in the SAIANode object. Local-node memory is accessible trough node.memory (which is a shortcut to node.server.memory).\n\nThe **SAIAMemory** object handle every SBus variables (**inputs**, **outputs**, **flags**, **registers**, **timers**, **counters**). The SAIAMemory object provide a **SAIAItemFlags** object, \naccessible trough a .flags property, itself providing access to every registered SAIAItemFlag object (item). The same principle is used for inputs \n(**SAIAItemInputs**), outputs (**SAIAItemOutputs**), registers (**SAIAItemRegisters**), timers (**SAIAItemTimers**) and counters (**SAIAItemCounters**). Note that there are shortcuts implemented : \n*node.flags* can be used instead of *node.memory.flags*.\n\n.. code-block:: python\n\n    >>> node=SAIANode(253)\n    >>> myflag=node.memory.flags[18]\n\n    >>> myflag\n    <SAIAItemFlag(index=18, value=OFF, age=1s)>\n\n    >>> myflag.value=True\n    >>> myflag.value\n    True\n\nThe SAIAMemory object is initially created *empty* (with no items declared). Items are dynamically instanciated \"on-the-fly\" when they are accessed. In the example above,\nthe flag 18 is created on the first call, and returned in a SAIAItemFlag object. Any further call to this item will always return the same object instance.\nEach item provide some helpers methods to facilitate value manipulation\n\n.. code-block:: python\n\n    >>> myflag.off()\n    >>> myflag.on()\n    >>> myflag.toggle()\n    >>> myflag.set()\n    >>> myflag.clear()\n    >>> myflag.value=1\n    >>> myflag.value=True\n    >>> myflag.value\n    1\n    >>> myflag.isSet()\n    True\n    >>> myflag.isClear()\n    False\n\nBy default, \"on-the-fly-item-creation\" is active. This means that any data item (flag, input, output, register) which is accessed (locally or remotely)\nwill be dynamically instanciated if it doesn't exists.  This can create a large amount of unwanted memory consumption in case of abuse or bug. This mode can\nbe disabled, and accessing a non pre-declared item will fail.\n\n.. code-block:: python\n\n    >>> node.memory.enableOnTheFlyItemCreation(False)\n    >>> node.memory.flags[19]\n    None\n\nItems can be manually-created by \"declaring\" them, individually or by range\n\n.. code-block:: python\n\n    >>> myflag=node.memory.flags.declare(index=18)\n    >>> myflags=node.flags.declareRange(index=100, count=3)\n    >>> myflags\n    [<SAIAItemFlag(index=100, value=OFF, age=3s)>,\n    <SAIAItemFlag(index=101, value=OFF, age=3s)>,\n    <SAIAItemFlag(index=102, value=OFF, age=3s)>]\n\nYou will also later discover a powerful .declareForTagMatching() feature allowing to works with symbols names instead of indexes. Inputs, Outputs and Flags are boolean items. \nRegisters, Timers and Counters are simple \"32 bits uint values\".\n\n.. code-block:: python\n\n    >>> myregister=node.memory.registers[0]\n    >>> myregister.value=100\n    >>> register.value\n    100\n\nRegisters are always stored as \"raw 32 bits\" values (without encoding, known as DWORD). Helpers are available to set/get the register value with common encodings\n\n.. code-block:: python\n\n    >>> myregister.float32=21.5\n    >>> myregister.value\n    1101791232\n    >>> myregister.float32\n    21.5\n\nActually, the following encoders/decoders accessors are implemented (each one is a derived class from **SAIAValueFormater**)\n\n+-----------------------+-----------------------------------------------------+\n| **.float32**          | IEEE float32 encoding (big-endian)                  |\n+-----------------------+-----------------------------------------------------+\n| **.sfloat32**         | Swapped IEEE float32 encoding (little-endian)       |\n+-----------------------+-----------------------------------------------------+\n| **.ffp**              | Motorola Fast Floating Point encoding (SAIA Float)  |\n+-----------------------+-----------------------------------------------------+\n| **.float**            | Alias for FFP encodings (easier to remember)        |\n+-----------------------+-----------------------------------------------------+\n| **.int10**            | x10 rounded value (21.5175 is encoded as 215)       |\n+-----------------------+-----------------------------------------------------+\n| **.formatedvalue**    | Reuse the last used formater                        |\n+-----------------------+-----------------------------------------------------+\n\nAs in SAIA float values *seems* to be FFP encoded (not really sure about that), the ffp encoder is automatically used\nwhen writing a float value to a register (instead of an int)\n\n.. code-block:: python\n\n    >>> myregister.value=2\n    >>> myregister.value\n    2\n    >>> myregister.value=2.0\n    >>> myregister.value\n    2147483714\n    >>> myregister.ffp\n    2.0\n    >>> myregister.float\n    2.0\n\nIf for any reason you want your localnode to be read-only (for any 3rd party EtherSBus client), you can\nlock your local memory\n\n.. code-block:: python\n\n    >>> node.memory.setReadOnly()\n\nThis can be very useful to implement a data-provider-only service, simply ignoring any incoming SBus write requests. Thoses\nrequests will be NAKed by your node. Timers are managed (those declared *in the local node*). This means that any timer created will be automatically decremented until reaching 0\n\n.. code-block:: python\n\n    >>> timer=node.server.timers[0]\n    >>> timer.value=1000\n    >>> # wait some time\n    >>> timer.value\n    874\n    >>> timer.value\n    510\n    >>> timer.isTimeout()\n    False\n    >>> timer.clear()\n    >>> timer.isTimeout()\n    True\n\nThe default tickBaseTime is 100ms (decrement each counter by 1 every 100ms), which can be set on the timers object \n\n.. code-block:: python\n\n    >>> node.server.timers.setTickBaseTimeMs(100)\n\n\nEtherSBus Client\n================\n\nNow the best part. The node object allow access to (as many) remote EtherSBus node servers you need, registered in a **SAIAServers** object\n\n.. code-block:: python\n\n    >>> server1=node.servers.declare('192.168.0.100')\n    >>> server2=node.servers.declare('192.168.0.101')\n    >>> myRemoteFlag=server1.memory.flags[5]\n\nThe declaration process provide a **SAIAServer** object, containing a **SAIAMemory** object to access remote items. You don't have to store your servers\ninto variables. You can always retrieve later your servers from the ip or the address (lid)\n\n.. code-block:: python\n\n    >>> pcd=node.servers['192.168.0.100']   # access by ip\n    >>> pcd=node.servers[50]                # access by address (lid)\n\nIn any case, redeclaring a server that was already declared don't create a double. The existing server, if found, is returned. Same concept with items (flags, registers, ...).\n\nThus, **local and remote data can be manipulated \nin the same manner**. When a remote data item (input, output, flag, register, timer or counter) is declared, an **automatic pooling mecanism** is launched in \nthe background task (manager). An **optimiser mecanism try to group many items per request**, avoiding to launch 1 request for 1 item refresh.\n\nThe default refresh rate is **60s** per item, modifiable with a myRemoteFlag.setRefreshDelay() call. Alternatively, the refresh rate can be specified \nfor the whole item collection, with a node.memory.flags.setRefreshDelay() call. Refresh can be triggered on demand with with theses kind of call\n\n.. code-block:: python\n\n    >>> node.servers.refresh() or node.refresh()\n    >>> server.memory.refresh() or server.refresh()\n    >>> server.memory.flags.refresh() or server.flags.refresh()\n    >>> myRemoteFlag.refresh()\n\nYou can query the elapsed time (in seconds) since the last value update (refresh) with the myRemoteFlag.age() method.  If you really need to get the very \nactual value of an item (and not the last refreshed one), you need to initiate an item.refresh() and then \nwait *a certain amount of time* allowing the read queue to be processed by the background task. This is a crucial point, everything is done asynchronously : modifying the\nvalue of a register, for example with register.value=100, simply queue a write order and returns (immediately). The write will be processed as soon as possible, but later.\nIf you have declared thousand of items, this *may* take a while. The whole thing can also be done more synchrounously with a simple item.read(),\nreturning the just refreshed item.value (or None in case of timeout)\n\n.. code-block:: python\n\n    >>> myRemoteFlag.read()\n    True\n\nTheses refresh orders are **processed with more priority** than other \"standard\" polling-read, providing better responsiveness.\nA timeout can be passed to the read() function. **Changing** (**writing**) the remote data value is fully transparent\n\n.. code-block:: python\n\n    >>> myRemoteFlag.value=1\n\nFor a non local object, **this will automatically queue a write order** in the SAIAServer object with the new given value. **The actual value of the item\nremains unchanged**. **When the write order has been executed**, **a refresh order is immediately triggered**, thus **allowing the actual value to be updated**. \nThis tend to keep the value synchronized with the remote value, even if something goes wrong. As for read() orders, the read-after-write is\nprocessed with **more priority** than standard pooling requests (more responsive). Please note that this approach *can* be problematic to write fast ON/OFF bursts.\n\nIf for any reason you want to deny writes to your remote server, you can lock your remote server memory as needed, \nallowing you to avoid some unwanted critical problems ;)\n\n.. code-block:: python\n\n    >>> server.setReadOnly()\n    >>> server.flags.setReadOnly()\n    >>> server.registers.setReadOnly()\n    >>> server.registers[100].setReadOnly()\n    >>> server.flags[10].setReadOnly()\n\nThe background manager try to be as reactive and idle as possible, keeping ressources for your application. Performance is really good, even with a lot of servers and/or items declared. \nWe tried to trap most of the possible errors, allowing using this module to be used as a standalone service. Note that automatic SAIA address \nresolution is implemented, so that only remote IP address is required to register a remote node. If known, the SAIA station address *can* be\ngiven during registration (this will avoid the initial address resolution requests to get the server address).\n\n.. code-block:: python\n\n    >>> server=node.servers.declare(host, lid=54, port=5050)\n\nAs with items, servers can be declared by range for more convenience, by giving the ip address of the first server. The example below creates for you\n10 servers (from 192.168.0.100 to 192.168.0.109, assigned with station addresses 200..209). \n\n.. code-block:: python\n\n    >>> servers=node.servers.declareRange('192.168.0.100', count=10, lid=200, port=5050)\n\nRemember that declared servers can be retrieved at any time by lid or by ip address using the SAIAServers object \n\n.. code-block:: python\n\n    >>> server=node.servers[200]\n    >>> server1=node.servers['192.168.0.100']\n\nThe background task poll each declared servers to maintain their running status (with READ_PCD_STATUS_OWN requests). The actual\nrun status of a server is accessible trough the .status property \n\n.. code-block:: python\n\n    >>> server.status\n    82 (0x52)\n    >>> server.isRunning()\n    True\n    >>> server.isStopped()\n    False\n    >>> server.isHalted()\n    False\n\nIf your remote servers are stopped, this can be annoying ;) You can start them with the .run() method without \nusing the PG5 or the Debugger programs (assuming that *you* know what your are doing) \n\n.. code-block:: python\n\n    >>> server.run()    # .stop() and .restart() are also available -- be careful\n    >>> servers.run()   # .stop() and .restart() are also available -- be careful\n\n\nData Transfers with Remote Servers\n==================================\n\nThe SAIAServer object contains a **SAIATransferQueue** service allowing to submit and queue **SAIATransfer** jobs in the background, used\nfor processing transfers that require multiple packet exchange like *read-block*, for example. **When a remote server is declared**, **some\nREAD_DBX requests will be automatically done using a SAIATransferReadDeviceInformation with the remote server to retrieve the device \ninformation memory block**, containing this kind of config\n\n.. code-block:: python\n\n    PG5Licensee=DEMONSTRATION VERSION\n    PG5DeveloperID=CH_xxxxxxxx\n    PCName=WINFHE\n    Originator=DEMONSTRATION VERSION\n    PG5Version=V2.2.230\n    ProjectName=Test1\n    DeviceName=Device1\n    PcdType=PCD1.M2220\n    ANSICodePage=1252\n    ProgramVersion=1.0\n    ProgramID=E291E0E08F55CBEC\n    ProgramCRC=061C66CD\n    BuildDateTime=2017/08/18 17:46:50\n    DownloadDateTime=2017/08/18 17:49:47\n\nOnce retrieved, theses informations may be accessed with the server.getDeviceInfo() method (case insensitive)\n\n.. code-block:: python\n\n    >>> server.getDeviceInfo('DeviceName')\n    'Device1'\n\nThe DeviceName, DeviceType (PcdType) and BuildDateTime can also be directly accessed as a server's property method\n\n.. code-block:: python\n\n    >>> server.deviceName\n    'Device1'\n    >>> server.deviceType\n    'PCD1.M2220'\n    >>> server.buildDateTime\n    datetime.datetime(2017, 8, 18, 17, 46, 50)\n\nYou can force a deviceInfo refresh later if anything goes wrong\n\n.. code-block:: python\n\n    >>> server.submitTransferReadDeviceInformation()\n\nIf the deviceName is compatible with Python class variable naming convention, the SAIAServer object is automatically mapped (mounted)\nto a variable with the same name (but lowercase and normalized) accessible in the node.servers (SAIAServers) object\n\n.. code-block:: python\n\n    >>> server=node.servers.device1\n\nThis is really useful in interactive sessions when combined with automatic node discovering (see below). \n\n\nNetwork nodes discovering\n=========================\n\nEvery SAIANode has a local SAIAServer object (node.server) allowing local data to be accessed by other SAIA EtherSBus clients. This local server\nhas a manager() periodically called by the background task. You can ask this task to periodically scan the network and potentially discover\nother EtherSBus servers online on the LAN\n\n.. code-block:: python\n\n    >>> node.server.enableNetworkScanner(True)\n\nThis will periodically broadcast a READ_STATIONNUMBER on the network (255.255.255.255) using a SAIATransferDiscoverNodes transfer service.\nWhen discovering mode is active, any response to this message received by the local node (not comming from a local network interface) will be \naccepted and the corresponding remote server will be automatically declared for you. For convenience, the discover process is automatically started in Python interactive mode. In fact,\nyou can decide if network scanning should be active or not at the node creation\n\n.. code-block:: python\n\n    >>> node=SAIANode()              # network scanner is enabled only in interactive sessions\n    >>> node=SAIANode(scanner=True)  # scanner is enabled\n    >>> node=SAIANode(scanner=False) # scanner is disabled\n\nWarning : we have seen some problems with node discovering enabled if nodes stations addresses are not unique. This has to be fixed in the future.\n\n\nSymbolic Addressing\n===================\n\nThe EtherSBus doesn't provide item access by name (symbol name, tag). But **if you own the PG5 .map file generated at compile time**, you may have some help by passing\nthis file during server declaration process. This will create a **SAIASymbols** object associated with the server, ready to serve you the requested **SAIASymbol**\n\n.. code-block:: python\n\n    >>> server=node.servers.declare('192.168.0.48', mapfile='xxxxx.map')\n    >>> server.symbols.count()\n    2140\n\n    >>> symbol=server.symbols['RIO.Station_A12.Sonde3_16_Cmd_Reduit_Ch'] \n    >>> symbol.index\n    2295\n    >>> symbol.attribute\n    'f'\n    >>> symbol.isFlag()\n    True\n\n    >>> symbol=server.symbols.register(2295)\n    >>> symbol.tag\n    'rio.station_a12.sonde3_16_cmd_reduit_ch' \n\n**This allows bidirectional mapping between symbols names (tag) and items indexes**, **assuming that your map file is uptodate** ! Cool. The symbolic access is in fact implemented\nin all SAIAItem objects index access, so that syntaxes like this are perfectly working\n\n.. code-block:: python\n\n    >>> server.registers[2295].value=99\n    >>> server.registers['rio.station_a12.sonde3_16_cmd_reduit_ch'].value\n    99\n\n    >>> flag=server.flags.declare('Sonde3_42_Lib')\n    >>> flag.index\n    4634\n\nThe SAIASymbols class may be used to retrieve any *existing item in a .map file*, allowing to declare easily \nany existing flag or registers in a given address range. The trick is to pass a range or an array of addresses (indexes) to\nthe symbols.register retrieve method. This will return an array of registers instead of a simple register. This returns\nonly items that are declared in the .map file.\n\n.. code-block:: python\n\n    >>> for symbol in server.symbols.register(range(1000, 2000)):\n    >>>    server.registers.declare(symbol.address)\n\n\nUse it carefully. For ease of use, symbolic access is implemented *case insensitive*. In interactive mode,\nyou can try to **mount** flags and registers symbols (SAIASymbol) as SAIASymbols object variables\nso that the **interpreter autocompletion** will save you some precious keystroke\n\n.. code-block:: python\n\n    >>> symbols=server.symbols\n    >>> symbols.mount()\n\n    >>> symbols.flags.sonde3_1<TAB>\n    s.sonde3_10_defaut    s.sonde3_13_defaut      s.sonde3_19_defaut\n    s.sonde3_10_lib       s.sonde3_13_lib         s.sonde3_19_setpoint\n    s.sonde3_10_timeout   s.sonde3_13_timeout     s.sonde3_19_temp\n    s.sonde3_11_defaut    s.sonde3_14_defaut      s.sonde3_19_timeout\n    s.sonde3_11_lib       s.sonde3_14_lib         s.sonde3_1_defaut\n    s.sonde3_11_timeout   s.sonde3_14_timeout     s.sonde3_1_timeout\n    s.sonde3_12_defaut    s.sonde3_15_defaut\n    s.sonde3_12_lib       s.sonde3_15_lib\n    s.sonde3_12_timeout   s.sonde3_15_timeout\n\n    >>> symbols.flags.sonde3_11_timeout.index\n    3936\n\nWhen Python interactive mode is detected, symbols.mount() is automatically called for you. Items declaration can also be passed \nas a SAIASymbol object, so that autocompletion is your friend\n\n.. code-block:: python\n\n    >>> server.flags.declare(symbols.flags.sonde3_11_timeout)\n    >>> server.flags.declare(symbols['sonde3_11_timeout'])\n\nAs said in the last section, we can access the deviceInformation properties, allowing to guess the .map filename. If the deviceName is \"MySuperDevice\", the associated \n.map file produced by the SAIA PG5 compiler will be \"MySuperDevice.map\" by default. In fact, this can help us to do things automagically. \n**When a server is declared, the deviceInformation block is automatically retrieved and a try is made to load the default associated .map file**. By default, the map\nfile has to be stored in the current directory. This can be changed with the node.setMapFileStoragePath() method.\n\nIn Python 2.7, you may need to `enable autocompletion <https://stackoverflow.com/questions/246725/how-do-i-add-tab-completion-to-the-python-shell>`_ \non your ~/.pythonrc setup file. Alternatively you can use IPython, Jupyter or something simpler like `ptpython <https://github.com/jonathanslenders/ptpython>`_ for\ninteractive sessions. **Don't miss** the excellent `bpython <https://www.bpython-interpreter.org/>`_ project.\n\nKeep an eye open on your memory ressources when enabling symbols ;) as this can declare thousands of variables.\n\n\nTips & Tricks\n=============\n\nServers (SAIAServers), items (SAIAItemFlags/Registers/Inputs/Outputs/Timers/Counters) are *iterable* objects. This allows things like\n\n.. code-block:: python\n\n    >>> server.flags.declareRange(0, 4096)\n    >>> # give a little time allowing the background task to refresh thoses 4K items\n    >>> flagsThatAreON=[flag for flag in server.flags if flag.value is True]\n\n    >>> for flag in server.flags:\n    >>>    flag.value=1\n\nWhen working with registers, timers and counters, accessing to the hex or bin value representation can be useful\n\n.. code-block:: python\n\n    >>> register=server.registers[50]\n    >>> register.value=100\n    >>> register.value\n    100\n    >>> register.hex\n    '0x64'\n    >>> register.bin\n    '1100100'\n\nWhen symbols are loaded, SAIAFlags, SAIARegisters, SAIATimers and SAIACounters objects can be declared by a *search* upon a *part* of their\ntag name.\n\n.. code-block:: python\n\n    >>> registers=server.registers.declareForTagMatching('sonde')\n    >>> len(registers)\n    626\n    >>> registers=server.registers['*sonde']  # equivalent trick, using a '*' prefix\n\nThe *searched argument* may also be a compiled regex\n\n.. code-block:: python\n\n    >>> pattern=re.compile('sonde[0-9]+_[0-9]+_temp')\n    >>> registers=server.registers.declareForTagMatching(pattern)\n\nIf for any reason you want to *pause* one remote server communications, you can use the server.pause(60) call (seconds). This is for example\ninternally used to stop server communications when a station address conflict (duplicate address) is detected.\n\n\nDumping & Debugging\n===================\n\nBy default, the module create and use a socket logger pointing on localhost. Launch your own tcp logger server\nand you will see the EtherSBus frames. If you don't have one, you can try our simple (and dirty) digimat.logserver\n\n.. code-block:: python\n\n    pip install -U digimat.logserver\n    python -m digimat.logserver\n\nYou can apply some basic output filtering with optional \"--filter string\" parameter. You can also give your own logger to the SAIANode\n\n.. code-block:: python\n\n    >>> node=SAIANode(253, logger=mylogger)\n\nBy default, the logging output is limited to maximize performance. You can enable (or disable) full messages logging with\n\n.. code-block:: python\n\n    >>> node.debug()\n    >>> node.debug(True)\n    >>> node.debug(False)\n\n    # or at node creation with\n    >>> node=SAIANode(..., debug=True)\n\nIf you want to completely disable the logger, just pass a logger=SAIALogger().null() parameter.  Limited dump-debug can \nalso be done with objects .dump() methods. Try node.dump(), node.memory.dump(), node.memory.flags.dump(), \nnode.servers.dump(), server.dump(), server.registers.dump(), server.flags.dump(), etc. You can also use .table() methods instead of .dump() to get a more \"human readable\" output style,\na bit like mysql does.\n\n.. code-block:: python\n\n    >>> node.table()\n    +-------+-------------------------+-------+------+\n    | index | tag                     | value | age  |\n    +-------+-------------------------+-------+------+\n    |  5848 | ep16.s2.zone01.t1.tm_me |   234 | 3.9s |\n    |  5859 | ep16.s2.zone02.t1.tm_me |   236 | 3.8s |\n    |  5870 | ep16.s2.zone03.t1.tm_me |   233 | 3.7s |\n    |  5881 | ep16.s2.zone04.t1.tm_me |   238 | 3.7s |\n    |  5965 | ep16.s2.zone21.t1.tm_me |   241 | 3.3s |\n    |  5974 | ep16.s2.zone89.t1.tm_me |   246 | 3.3s |\n    |  5983 | ep16.s2.zone90.t1.tm_me |   243 | 3.2s |\n    |  5992 | ep16.s2.zone91.t1.tm_me |   242 | 3.2s |\n    |  6001 | ep16.s2.zone96.t1.tm_me |   230 | 3.1s |\n    |  6010 | ep16.s2.zone98.t1.tm_me |   238 | 3.1s |\n    +-------+-------------------------+-------+------+\n\nYou can pass a \"filter\" argument to the .table() method to filter results, i.e node.table('temperature'). There is a little secret trick implemented \nin the SAIAServers object allowing you to be more efficient in interactive mode, simplifying the access \nto flags, registers and other items. Don't use this on your non interactive scripts.\n\n.. code-block:: python\n\n    >>> pcd=node.servers['192.168.0.100']\n    >>> register=pcd.r50 # equivalent to pcd.registers[50] or pcd.registers.declare(50)\n    >>> flag=pcd.f1000 # equivalent to pcd.flags[1000] or pcd.flags.declare(1000)\n\nIf you want to ping yours servers (your remote nodes), you can use the builtin server's ping command which force sending an immediate read-status request to the remote device, then wait for\nthe response and return True if someting was received. Remeber that you can log the communication traffic by enabling the debug mode on your node (with node.debug())\n\n.. code-block:: python\n\n    >>> server.ping()\n    True\n\nThere are some useful helpers to check for dead servers or items\n\n.. code-block:: python\n\n    >>> server.isAlive()\n    True\n    >>> server.flags[10].isAlive()\n    True\n    >>> node.servers.isAlive()\n    True # every server is alive\n    >>> onlineServers=node.servers.alive()\n    >>> offlineServer=node.servers.dead()\n    >>> onlineFlags=server.flags.alive()\n    >>> offlineRegisters=server.registers.dead()\n\nAn item is considered as alive if it's server is alive and if the item.age() is less than 1.5 times it's refresh delay (=90s by default). And now, a bit of brain manipulation. \nFor debugging purposes, you can simulate a remote node by registering a remote server pointing on yourself (woo!)\n\n.. code-block:: python\n\n    >>> server=node.servers.declare('127.0.0.1')\n    >>> localFlag=node.memory.flags[1]\n    >>> remoteFlag=server.memory.flags[1]\n\n    >>> localFlag.value, remoteFlag.value\n    False, False\n\n    >>> remoteFlag.value=1\n\n    # network data synchronisation is done by the background manager task\n    # so, remoteFlag and localFlag are two different registers but mirrored\n\n    >>> localFlag.value\n    True\n\nIn this example, localFlag and remoteFlag points to the same \"value\", but the remoteFlag is a networked synchronized \nmirror representation of the localFlag. Don't know if this feature could be useful yet, but this is fun.\n\nSAIA* objects *.__repr__* magic method are redefined to provide some useful information about the current state of the object.\nThis can be useful to gather some informations about your data\n\n.. code-block:: python\n\n    >>> node\n    <SAIANode(lid=253, port=5050, 2 servers, booster=0)>\n\n    >>> node.servers\n    <SAIAServers(2 items)>\n\n    >>> node.servers[101]\n    <SAIAServer(host=192.168.0.49, lid=101, status=0x52)>\n\n    >>> server.memory\n    <SAIAMemory(144 items, queues 0R:0R!:0W)>\n    # 0R  = number of actual pending item-read in queue (background polling/refresh process)\n    # 0R! = number of actual pending urgent item-read in queue (manual refresh, read-after-write)\n    # 0W  = number of actual pending item-write in queue\n\n    >>> server.flags\n    <SAIAFlags(48 items, max=65535, readOnly=0, current=32, refresh=60s)>\n\n    >>> server.flags[28]\n    <SAIAItemFlag(index=28, value=OFF, age=8s, refresh=60s)>\n\n\nItems groups\n============\n\nThe module is providing a concept of item group (item collection), allowing you to give more flexibility\non how to read/poll declared items. When your project has a lot of items to manage, this is not always\neasy to deal with the background refresh timing of some items. Do you remember the SAIAItem .read() and .refresh()\nmethods described above ? As a reminder, these refresh orders are **processed with more priority** than other \"standard\" polling-read, providing better responsiveness.\nRemember that the communication process is always fully asynchronous, so that a blocking read is equivalent to \"tag some items as poll-urgent and\nwait a certain amount of time until they are all refreshed by the background task\". \n\nThe SAIAItemGroup object provides a simple way to use this specific \"urgent\" polling for groups of items. An item group is an instance of the SAIAItemGroup object\n\n.. code-block:: python\n\n   >>> from digimat.saia import SAIAItemGroup\n   >>> group=SAIAItemGroup()\n\nwhich can be populated with any declared item (registers, flags, ...), via the .add() method, one by one\nor by array\n\n.. code-block:: python\n\n   >>> group.add(myflag)\n   >>> group.add([myflag, myregister])\n   >>> group.add(server.registers.declareRange(100, 200))\n   \n   # note that you can pass items in the group constructor\n   >>> group=SAIAItemGroup(server.registers.declareForTagMatching('temperature'))\n\n   # note that the SAIANode and the SAIAServer objects provide a method \n   # helper to create a group instance\n   >>> group=node.group(myflag)\n\nA group provide the same .dump() and .table() methods exposed above, allowing to trace this specific data content. An item can\nbe added to more than one group if needed. Groups can be compared to \"vitual structures\" that expose some useful methods\nto deal with the whole item content\n\n.. code-block:: python\n\n   # force a backgroud high priority refresh of every group's items (non blocking) \n   >>> group.refresh()\n\n   # force a blocking read (refresh and wait for refresh done) \n   # of every group's items (blocking)\n   >>> group.read()\n   >>> True\n\n   # you can pass the maximum blocking time (s) allowed \n   # return False if every item hasn't be refreshed\n   >>> group.read(3.0)\n   >>> True\n   >>> group.table()\n       +----+--------+-------+-------------------------+-------+------+\n       | #  | server | index | tag                     | value | age  |\n       +----+--------+-------+-------------------------+-------+------+\n       | 0  | 1_SUD  |  5994 | ep16.s1.zone01.t1.tm_me |   181 | 2.7s |\n       | 1  | 1_SUD  |  6005 | ep16.s1.zone02.t1.tm_me |   197 | 2.7s |\n       | 2  | 1_SUD  |  6016 | ep16.s1.zone03.t1.tm_me |   208 | 2.7s |\n       | 3  | 1_SUD  |  6027 | ep16.s1.zone11.t1.tm_me |   206 | 2.7s |\n       | 4  | 1_SUD  |  6038 | ep16.s1.zone12.t1.tm_me |   218 | 2.7s |\n       | 5  | 1_SUD  |  6049 | ep16.s1.zone13.t1.tm_me |   206 | 2.7s |\n       +----+--------+-------+-------------------------+-------+------+\n\nA group object is iterable and accessable as an array, allowing you to process items one by one. There are some useful other methods\n\n+-----------------------+-------------------------------------------------------------------------------------------------+\n| **.isAlive()**        | check if **every** item of the group is alive                                                   |\n+-----------------------+-------------------------------------------------------------------------------------------------+\n| **.isChanged()**      | return the **next** item of the group who's value was changed (see above), or None if no more   |\n+-----------------------+-------------------------------------------------------------------------------------------------+\n| **.isRaised()**       | return the **next** item of the group who's value was raised (see above), or None if no more    |\n+-----------------------+-------------------------------------------------------------------------------------------------+\n\n\nDemo Node\n=========\n\nUsing command line interpreter is cool, but for debugging, you will need to launch and relaunch your node. \nHere is a minimal empty node implementation, stopable with <CTRL-C> \n\n.. code-block:: python\n\n    from digimat.saia import SAIANode\n\n    node=SAIANode(253)\n\n    # customize your node here...\n\n    while node.isRunning():\n        try:\n            # using integrated node.sleep() will \n            # handle CTRL-C and propagate node.stop()\n            node.sleep(3.0)\n\n            node.dump()\n        except:\n            break\n\n    node.stop()\n\n\nOpen your SAIA Debugger on this node, and try reading/writing some items. \nYou can also use SBus *clear* requests with i,o,f and r items. For your convenience, \nyou can run the demo node shown above with this simple command line\n\n.. code-block:: python\n\n    python -m digimat.saia\n\n\nTODO\n====\n\nDocumentation is very incomplete. Don't know if this is useful for someone. Tell it to us.\n\nThere is still some more locking mecanisms to implement making the background task really thread safe. The\nPython GIL make things yet wrongly safe (but it works very fine).\n\nWe have no way to test what the 'S-Bus gateway' feature is. When enabled, a PCD may be able? to expose S-Bus\nsub nodes on its EtherSBus interface. This \"proxy\" mode access? is not supported yet.\n\nA nice idea would be to develop an user interface based on `npyscreen <https://npyscreen.readthedocs.io/#>`_ allowing\nrapid online debugging with saia devices ! \n\n\nSUPPORTING\n==========\n\nIf you like this module, or find a useful way to use it, please tell it to the world by posting a message \non your favorites social networks, including a link to this `digimat.saia's page <https://pypi.org/project/digimat.saia/>`_ !\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/digimat/digimat-saia",
    "keywords": "",
    "license": "PSF",
    "maintainer": "",
    "maintainer_email": "",
    "name": "digimat.saia",
    "package_url": "https://pypi.org/project/digimat.saia/",
    "platform": null,
    "project_url": "https://pypi.org/project/digimat.saia/",
    "project_urls": {
      "Homepage": "https://github.com/digimat/digimat-saia"
    },
    "release_url": "https://pypi.org/project/digimat.saia/0.1.67/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SAIA Burgess PCD EtherSBus Client+Server communication module",
    "version": "0.1.67",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16751633,
  "releases": {
    "0.0.100": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e65101d1b12a7ca805260b9ce24f220e8f834e6b4ab96c83b32dc1de9d11701",
          "md5": "36dec7e400970e2073c0397979076b0d",
          "sha256": "013df1146a4be66c61511a4e8b3485b55f3f95eae13fb3218a556aef7117cd4b"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.0.100.tar.gz",
        "has_sig": false,
        "md5_digest": "36dec7e400970e2073c0397979076b0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55371,
        "upload_time": "2017-09-08T15:18:01",
        "upload_time_iso_8601": "2017-09-08T15:18:01.896077Z",
        "url": "https://files.pythonhosted.org/packages/7e/65/101d1b12a7ca805260b9ce24f220e8f834e6b4ab96c83b32dc1de9d11701/digimat.saia-0.0.100.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "441830da22a4b18e18d4729aeba9b7b5f144230cf0efc8aef599d1a8d3e1297a",
          "md5": "99200a71ed3e9ff054fd92b8c349bb54",
          "sha256": "79f0e06fcba1640df280aac4d57f35da2e79ba01d57322ccbd8498b04858e118"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "99200a71ed3e9ff054fd92b8c349bb54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55542,
        "upload_time": "2017-09-11T10:23:53",
        "upload_time_iso_8601": "2017-09-11T10:23:53.947943Z",
        "url": "https://files.pythonhosted.org/packages/44/18/30da22a4b18e18d4729aeba9b7b5f144230cf0efc8aef599d1a8d3e1297a/digimat.saia-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a948bc7eae9a5d677ed9e5b264cf48755398709c9ed65fa27ce570e434be498",
          "md5": "d4f34dbef6d01a7f95cc85ea6c23e4b6",
          "sha256": "0c5193c4d7e99f47a55d8e10a15b1cd088006c4599b910a67e86faff89ffc4da"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "d4f34dbef6d01a7f95cc85ea6c23e4b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60884,
        "upload_time": "2017-10-25T20:34:14",
        "upload_time_iso_8601": "2017-10-25T20:34:14.962947Z",
        "url": "https://files.pythonhosted.org/packages/5a/94/8bc7eae9a5d677ed9e5b264cf48755398709c9ed65fa27ce570e434be498/digimat.saia-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a7c72306b4db1338a65367d8e5513f08fa221df56a6fb15488d1ed023815527",
          "md5": "477e6f2c7d9fcbec6ad5c07916322f78",
          "sha256": "950dba73947a6b8b171ab5ebeeca30839b809f6ff5659a43309859c8b144b015"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "477e6f2c7d9fcbec6ad5c07916322f78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60925,
        "upload_time": "2017-10-27T08:33:45",
        "upload_time_iso_8601": "2017-10-27T08:33:45.134634Z",
        "url": "https://files.pythonhosted.org/packages/3a/7c/72306b4db1338a65367d8e5513f08fa221df56a6fb15488d1ed023815527/digimat.saia-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da3852f67d1c52811c729d412fd0dc643de438ec7a512ae3bd0bc95f14e917c9",
          "md5": "8007d22cf08058dc2fe3ad41366c0f92",
          "sha256": "83eb684f67fce14809d8ae9a443d86914b8af7599a3bdbe755369ecd5bda8b70"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "8007d22cf08058dc2fe3ad41366c0f92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64573,
        "upload_time": "2018-02-07T20:29:44",
        "upload_time_iso_8601": "2018-02-07T20:29:44.645136Z",
        "url": "https://files.pythonhosted.org/packages/da/38/52f67d1c52811c729d412fd0dc643de438ec7a512ae3bd0bc95f14e917c9/digimat.saia-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e85f49577d892431c88d1850a02351daffdfae7bc1b50e1def3c0c17338f339e",
          "md5": "b4085f0fdf6bfc7ffcbab051a1c2eabc",
          "sha256": "f88766f945bec6c9053400c1fe4b40e07f379fcbde0fab1751ef89fcd1a5e65c"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "b4085f0fdf6bfc7ffcbab051a1c2eabc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61315,
        "upload_time": "2019-12-12T13:18:04",
        "upload_time_iso_8601": "2019-12-12T13:18:04.483914Z",
        "url": "https://files.pythonhosted.org/packages/e8/5f/49577d892431c88d1850a02351daffdfae7bc1b50e1def3c0c17338f339e/digimat.saia-0.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cf36a60144147647e99c652458392e3cd42bd764c2959b2f2e165d3ab68a843",
          "md5": "c59b9b15ee7afb7f8788fb21f8f4f3b1",
          "sha256": "1aefbd5a7f98e9f0a0d6903a4a4b4f2343265b06f916c220a47877f031f01c35"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "c59b9b15ee7afb7f8788fb21f8f4f3b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61462,
        "upload_time": "2019-12-13T11:03:22",
        "upload_time_iso_8601": "2019-12-13T11:03:22.862157Z",
        "url": "https://files.pythonhosted.org/packages/1c/f3/6a60144147647e99c652458392e3cd42bd764c2959b2f2e165d3ab68a843/digimat.saia-0.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "235e032fe4bd57803276f0e8277ca75e56d1941b92471f9467bec1cad3b57abb",
          "md5": "30ae2667c6b3550a6bd517eb7c0a37b5",
          "sha256": "b912d1fba12364faf4259f1edc464a632cf3f0f37f6f1b2d6ec5b4dffa1b273e"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "30ae2667c6b3550a6bd517eb7c0a37b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61477,
        "upload_time": "2019-12-13T13:21:00",
        "upload_time_iso_8601": "2019-12-13T13:21:00.782461Z",
        "url": "https://files.pythonhosted.org/packages/23/5e/032fe4bd57803276f0e8277ca75e56d1941b92471f9467bec1cad3b57abb/digimat.saia-0.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "576b4246ae8dad60e8e95dbb3222dee9430bd7e2f4e57a6aebb798b8e71bdf1d",
          "md5": "d96b999d9c70c1807c0ee351c07a69d7",
          "sha256": "c346b5d6f5c6056d798190ad04c431c744b86e1c56ca7eda20c0e927f6953c76"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.16.tar.gz",
        "has_sig": false,
        "md5_digest": "d96b999d9c70c1807c0ee351c07a69d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61478,
        "upload_time": "2019-12-13T21:55:57",
        "upload_time_iso_8601": "2019-12-13T21:55:57.401539Z",
        "url": "https://files.pythonhosted.org/packages/57/6b/4246ae8dad60e8e95dbb3222dee9430bd7e2f4e57a6aebb798b8e71bdf1d/digimat.saia-0.1.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95c99181594e39f725bcd8f530abb75d655757addc5ebf68a87e6308fcbc2935",
          "md5": "25edefdd5343e3848e32fe64cede6fab",
          "sha256": "b7f83768ff58d44af2fb1711085d9ad4efb7caafcd6af7bd441b28f433832c45"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.17.tar.gz",
        "has_sig": false,
        "md5_digest": "25edefdd5343e3848e32fe64cede6fab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61458,
        "upload_time": "2019-12-17T14:58:03",
        "upload_time_iso_8601": "2019-12-17T14:58:03.243562Z",
        "url": "https://files.pythonhosted.org/packages/95/c9/9181594e39f725bcd8f530abb75d655757addc5ebf68a87e6308fcbc2935/digimat.saia-0.1.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4b94ac64d79e2126147715a6e339e21e768dfee15c45c2aaf93ca7b33c682b3",
          "md5": "cfef82867907d8d97480c29b17f488d2",
          "sha256": "2357aefb7870da5ee98d9cd66ec821491d90e89d39583de0025be418cae0971d"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.18.tar.gz",
        "has_sig": false,
        "md5_digest": "cfef82867907d8d97480c29b17f488d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62346,
        "upload_time": "2020-01-14T15:52:59",
        "upload_time_iso_8601": "2020-01-14T15:52:59.846470Z",
        "url": "https://files.pythonhosted.org/packages/f4/b9/4ac64d79e2126147715a6e339e21e768dfee15c45c2aaf93ca7b33c682b3/digimat.saia-0.1.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63e576ac0724dfd312532e517e046c28827e2140fe87541529b5745d17d598fe",
          "md5": "30d1e94a7ec8c19f38a0fd6ad0cb8deb",
          "sha256": "79833c7ef5edd2b27e0830ce56ac0d4d7149d37b62775faf5daa09b79eeab4af"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.19.tar.gz",
        "has_sig": false,
        "md5_digest": "30d1e94a7ec8c19f38a0fd6ad0cb8deb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62457,
        "upload_time": "2020-01-15T14:56:49",
        "upload_time_iso_8601": "2020-01-15T14:56:49.560080Z",
        "url": "https://files.pythonhosted.org/packages/63/e5/76ac0724dfd312532e517e046c28827e2140fe87541529b5745d17d598fe/digimat.saia-0.1.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce88e533d572614d0890ff71db50156ea2717e17095b3d610562f10887d97149",
          "md5": "13ff0485bd49916d32d6be1910bb159f",
          "sha256": "f866295693b9bd79cf1624db39f2a9e4bdc27ada57a263fa0afb276585b1ee85"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "13ff0485bd49916d32d6be1910bb159f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56582,
        "upload_time": "2017-09-11T13:06:38",
        "upload_time_iso_8601": "2017-09-11T13:06:38.533446Z",
        "url": "https://files.pythonhosted.org/packages/ce/88/e533d572614d0890ff71db50156ea2717e17095b3d610562f10887d97149/digimat.saia-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03f7f6a8caf7f7553fe8ae44a9192c357a14985892a6d0993e901cb6f713351e",
          "md5": "a9e9f2418fe519e77a5575757e4618b4",
          "sha256": "b3834bc791ea99930e95555fd231ea7def11f9ba9bcdebd69744dc9d67699cd0"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.20.tar.gz",
        "has_sig": false,
        "md5_digest": "a9e9f2418fe519e77a5575757e4618b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62469,
        "upload_time": "2020-01-15T15:11:24",
        "upload_time_iso_8601": "2020-01-15T15:11:24.925710Z",
        "url": "https://files.pythonhosted.org/packages/03/f7/f6a8caf7f7553fe8ae44a9192c357a14985892a6d0993e901cb6f713351e/digimat.saia-0.1.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "835a1a69bce2c6b62a234ef0e6b1d725ceffb83f0abbe04009441e621909c968",
          "md5": "a4885b7f893f85fe884b601b9918a1ba",
          "sha256": "7fe42311d202ffa77dac93298a22cff5a403ab270dcd57a8afc2c59253adc43d"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.21.tar.gz",
        "has_sig": false,
        "md5_digest": "a4885b7f893f85fe884b601b9918a1ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62750,
        "upload_time": "2020-01-15T15:33:00",
        "upload_time_iso_8601": "2020-01-15T15:33:00.364889Z",
        "url": "https://files.pythonhosted.org/packages/83/5a/1a69bce2c6b62a234ef0e6b1d725ceffb83f0abbe04009441e621909c968/digimat.saia-0.1.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91e4081cf35f5f87e3f329b40555bbd2cb056017d2681301574386a768ad4be9",
          "md5": "2b13bc7777348e76e567af7c87705762",
          "sha256": "936cb2a24b74cc9eaae95e0c338feced966c1550496b59d4d4c3cb3293a39c67"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.22.tar.gz",
        "has_sig": false,
        "md5_digest": "2b13bc7777348e76e567af7c87705762",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64943,
        "upload_time": "2020-01-15T15:37:46",
        "upload_time_iso_8601": "2020-01-15T15:37:46.415385Z",
        "url": "https://files.pythonhosted.org/packages/91/e4/081cf35f5f87e3f329b40555bbd2cb056017d2681301574386a768ad4be9/digimat.saia-0.1.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "923b97196bf4286907acbd77a979e3e7aa8855246d0eb34ea56ffd331393d784",
          "md5": "42de033858d46cb2e938452d76b4db70",
          "sha256": "4e465074dc4c608012c165e086ad53acdd50a4cbc3aaf2772291a33935375592"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.23.tar.gz",
        "has_sig": false,
        "md5_digest": "42de033858d46cb2e938452d76b4db70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64171,
        "upload_time": "2020-01-15T15:39:35",
        "upload_time_iso_8601": "2020-01-15T15:39:35.055422Z",
        "url": "https://files.pythonhosted.org/packages/92/3b/97196bf4286907acbd77a979e3e7aa8855246d0eb34ea56ffd331393d784/digimat.saia-0.1.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3552af079b8a21aa6f53c75f71bbd8754bc1d5969ece0e976d194a058ad7d2d",
          "md5": "66a27ddbcf00bbf3be8dddf2a3a62dbf",
          "sha256": "ec9112c2e3dcf00c7f4ead35e90cf09ad95529661e1379529969a7a0ca707c25"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.25.tar.gz",
        "has_sig": false,
        "md5_digest": "66a27ddbcf00bbf3be8dddf2a3a62dbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65383,
        "upload_time": "2020-01-15T18:10:41",
        "upload_time_iso_8601": "2020-01-15T18:10:41.832036Z",
        "url": "https://files.pythonhosted.org/packages/a3/55/2af079b8a21aa6f53c75f71bbd8754bc1d5969ece0e976d194a058ad7d2d/digimat.saia-0.1.25.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53dfb383e7f0117ba9ca1a5ae3c6f7f7b06536d56889e8dcb78ad28b97fb333c",
          "md5": "67430d4ef2d6003a7efe47ec24c6f7f3",
          "sha256": "732ee29735213faa07000c7c58d2eeb0dd3d10ea3933a194370bc7b951bacbba"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.26.tar.gz",
        "has_sig": false,
        "md5_digest": "67430d4ef2d6003a7efe47ec24c6f7f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65911,
        "upload_time": "2020-01-15T20:41:33",
        "upload_time_iso_8601": "2020-01-15T20:41:33.797636Z",
        "url": "https://files.pythonhosted.org/packages/53/df/b383e7f0117ba9ca1a5ae3c6f7f7b06536d56889e8dcb78ad28b97fb333c/digimat.saia-0.1.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45207fd0e5f199364dac3e0413d4eaff0dbe551630a13e3b97a142abe3d60225",
          "md5": "9a7cafc7248609d5ef325cca94700f85",
          "sha256": "833bb88d7f2a831546c3e60cc8e4f86f04816555680465c0d4ec3b99862988e5"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.27.tar.gz",
        "has_sig": false,
        "md5_digest": "9a7cafc7248609d5ef325cca94700f85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66802,
        "upload_time": "2020-01-15T21:51:56",
        "upload_time_iso_8601": "2020-01-15T21:51:56.231201Z",
        "url": "https://files.pythonhosted.org/packages/45/20/7fd0e5f199364dac3e0413d4eaff0dbe551630a13e3b97a142abe3d60225/digimat.saia-0.1.27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.28": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b6e8425d27dc2d6679a09ca5327b45fbea0f2f21663d4574b20228ae5be2f5b",
          "md5": "f47f91ed7af2cfa3cc6abd0da9c6d761",
          "sha256": "c393225e3d76d1d5531d8b75ecff0597961225d3550a55fcda2275094b5c8dc7"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.28.tar.gz",
        "has_sig": false,
        "md5_digest": "f47f91ed7af2cfa3cc6abd0da9c6d761",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66662,
        "upload_time": "2020-01-16T07:43:02",
        "upload_time_iso_8601": "2020-01-16T07:43:02.573873Z",
        "url": "https://files.pythonhosted.org/packages/8b/6e/8425d27dc2d6679a09ca5327b45fbea0f2f21663d4574b20228ae5be2f5b/digimat.saia-0.1.28.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8991735ce7a362e69cf78b4c2418036266157dc3a904e328edbc0318744bfa0d",
          "md5": "bfed57212a24a48aad431b6155f5d7f6",
          "sha256": "cb8d42206128f5932310aa4b22c539f44e851b8b50ee378ee640ca15ea8c746a"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.29.tar.gz",
        "has_sig": false,
        "md5_digest": "bfed57212a24a48aad431b6155f5d7f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66654,
        "upload_time": "2020-01-16T09:13:56",
        "upload_time_iso_8601": "2020-01-16T09:13:56.834375Z",
        "url": "https://files.pythonhosted.org/packages/89/91/735ce7a362e69cf78b4c2418036266157dc3a904e328edbc0318744bfa0d/digimat.saia-0.1.29.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cf915163bcc625f0838f010dc773cc1d7f70ac2d147fb70ba907f2b7b047cce",
          "md5": "a9b6bc73145ecae080a0b9fad1a49083",
          "sha256": "6dc8c4f05809e2034dc4c4d09918257c1ffe088bba979aae438560f3f5a27e98"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a9b6bc73145ecae080a0b9fad1a49083",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56702,
        "upload_time": "2017-09-11T13:14:24",
        "upload_time_iso_8601": "2017-09-11T13:14:24.047526Z",
        "url": "https://files.pythonhosted.org/packages/5c/f9/15163bcc625f0838f010dc773cc1d7f70ac2d147fb70ba907f2b7b047cce/digimat.saia-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05dec6cdede0acad0496692624319e25dd9ceed2710ff56d091dd1fb96f8ce5a",
          "md5": "778a9d0c60b359755ee6a7d5e291e94b",
          "sha256": "c32665dd12390208fb48a12d51d5dbed30702dd5942274229c9b7e5039dcce97"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.30.tar.gz",
        "has_sig": false,
        "md5_digest": "778a9d0c60b359755ee6a7d5e291e94b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66745,
        "upload_time": "2020-01-16T10:06:49",
        "upload_time_iso_8601": "2020-01-16T10:06:49.483395Z",
        "url": "https://files.pythonhosted.org/packages/05/de/c6cdede0acad0496692624319e25dd9ceed2710ff56d091dd1fb96f8ce5a/digimat.saia-0.1.30.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d8e9293507fe0f627ca285c74ae7c67eaebe56d4d5b40a5dacfcf40af9187e1",
          "md5": "81ea31ac5c478f272404247274b1645f",
          "sha256": "eee5cf62d345f14873c5ee88d2daa3795aa84e870167eef7b975123ac84e89ea"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.31.tar.gz",
        "has_sig": false,
        "md5_digest": "81ea31ac5c478f272404247274b1645f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66760,
        "upload_time": "2020-01-16T11:12:32",
        "upload_time_iso_8601": "2020-01-16T11:12:32.903408Z",
        "url": "https://files.pythonhosted.org/packages/5d/8e/9293507fe0f627ca285c74ae7c67eaebe56d4d5b40a5dacfcf40af9187e1/digimat.saia-0.1.31.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cb7a4fa157200f1f1222eb19ad8f2da4481d884cfa663e10394fe589b16951d",
          "md5": "96a417ec332ce596c67c3913de56e524",
          "sha256": "5b134a6eea68cb697a3b580ebd7b363cc151fc4691a15955dcbc7f44074514e8"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.32.tar.gz",
        "has_sig": false,
        "md5_digest": "96a417ec332ce596c67c3913de56e524",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 67232,
        "upload_time": "2020-01-16T16:03:08",
        "upload_time_iso_8601": "2020-01-16T16:03:08.688324Z",
        "url": "https://files.pythonhosted.org/packages/0c/b7/a4fa157200f1f1222eb19ad8f2da4481d884cfa663e10394fe589b16951d/digimat.saia-0.1.32.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccb1635e6d48737906d1d5b29e584d477b7fdea67f4af43264748d3c120d946d",
          "md5": "299fc62383cbb4162fa4c63a427058b6",
          "sha256": "7b98463a88800527c261c16e9cf2a01883d21a1297789d8ce36607f3a3cd6a3e"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.33.tar.gz",
        "has_sig": false,
        "md5_digest": "299fc62383cbb4162fa4c63a427058b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 67294,
        "upload_time": "2020-01-16T17:21:05",
        "upload_time_iso_8601": "2020-01-16T17:21:05.466279Z",
        "url": "https://files.pythonhosted.org/packages/cc/b1/635e6d48737906d1d5b29e584d477b7fdea67f4af43264748d3c120d946d/digimat.saia-0.1.33.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.34": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c63f871c0cd5e2bd3313708cca407fe467519180e5f2d4968a1a1bf98f9b83b5",
          "md5": "58f2eeca39b98cd9d72f5eeff4f4da6b",
          "sha256": "d361898424aacec66ff357bc3e67c236ad4e050b687d22ce3555316b7c7920a8"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.34.tar.gz",
        "has_sig": false,
        "md5_digest": "58f2eeca39b98cd9d72f5eeff4f4da6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 68527,
        "upload_time": "2020-01-18T17:20:26",
        "upload_time_iso_8601": "2020-01-18T17:20:26.870625Z",
        "url": "https://files.pythonhosted.org/packages/c6/3f/871c0cd5e2bd3313708cca407fe467519180e5f2d4968a1a1bf98f9b83b5/digimat.saia-0.1.34.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce4ab8a41bebc3fc915f33039730fda05034b2c0e1dd8d52ed01dddc1f335dc4",
          "md5": "4429dc460d2db2ec1c7d84d81f38421a",
          "sha256": "125b44e73730341c37ec25e6537d0d7fbf7f2333834728aba75795e0ab2513c0"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.35.tar.gz",
        "has_sig": false,
        "md5_digest": "4429dc460d2db2ec1c7d84d81f38421a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 68573,
        "upload_time": "2020-01-19T12:36:38",
        "upload_time_iso_8601": "2020-01-19T12:36:38.344951Z",
        "url": "https://files.pythonhosted.org/packages/ce/4a/b8a41bebc3fc915f33039730fda05034b2c0e1dd8d52ed01dddc1f335dc4/digimat.saia-0.1.35.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7738d6f514ac0abdd784b9831e060747d9f4666754508fa83fb6eeae23c82b6",
          "md5": "fa3e5e1ac9e8fda21cdc55897572f5a9",
          "sha256": "b0cb69bbaaab77e810b3299c58d6c094252f7f650061e8332108e2d5ab28b740"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.36.tar.gz",
        "has_sig": false,
        "md5_digest": "fa3e5e1ac9e8fda21cdc55897572f5a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 68574,
        "upload_time": "2020-01-19T16:53:41",
        "upload_time_iso_8601": "2020-01-19T16:53:41.359092Z",
        "url": "https://files.pythonhosted.org/packages/a7/73/8d6f514ac0abdd784b9831e060747d9f4666754508fa83fb6eeae23c82b6/digimat.saia-0.1.36.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.37": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afb06fb603fecbc96cfd5118ed3e71809791f086ac266818532d73c0ad97c05a",
          "md5": "169c16aadc5287dedcd0640572b3fd25",
          "sha256": "bf908299f7a6f4b3cae16ab2909cedda1561c3698cdaacb0acd369a8afd7c336"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.37.tar.gz",
        "has_sig": false,
        "md5_digest": "169c16aadc5287dedcd0640572b3fd25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69093,
        "upload_time": "2020-01-20T18:00:52",
        "upload_time_iso_8601": "2020-01-20T18:00:52.614594Z",
        "url": "https://files.pythonhosted.org/packages/af/b0/6fb603fecbc96cfd5118ed3e71809791f086ac266818532d73c0ad97c05a/digimat.saia-0.1.37.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.38": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37bbb1ccbb046ac241725b67cab277eba09a92b79c9da1d6d735b21bef2a2fb4",
          "md5": "bb2aff212bf959e40e2e51984054c18e",
          "sha256": "c71d342a11a6380dc191499bbfb72eadc0dfb5987bacfe1c433a2fe55339e0d5"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.38.tar.gz",
        "has_sig": false,
        "md5_digest": "bb2aff212bf959e40e2e51984054c18e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69098,
        "upload_time": "2020-01-21T13:20:14",
        "upload_time_iso_8601": "2020-01-21T13:20:14.713423Z",
        "url": "https://files.pythonhosted.org/packages/37/bb/b1ccbb046ac241725b67cab277eba09a92b79c9da1d6d735b21bef2a2fb4/digimat.saia-0.1.38.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff8020d6aca2accfa82bb8b048e86f9895b619b1dc58be4af66a8359f2deec00",
          "md5": "3d648a8acd4c6b7cfcc73d7f981e8a2c",
          "sha256": "326a170bd075b9f53b3c5619f4f9989deb801c11e8fbc90366f47e47c51aa756"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3d648a8acd4c6b7cfcc73d7f981e8a2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56773,
        "upload_time": "2017-09-13T09:18:43",
        "upload_time_iso_8601": "2017-09-13T09:18:43.265015Z",
        "url": "https://files.pythonhosted.org/packages/ff/80/20d6aca2accfa82bb8b048e86f9895b619b1dc58be4af66a8359f2deec00/digimat.saia-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.40": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43992b3b1730de67fc8897beb7a44e9e24fc32753ae62f33ffec31d8ee6ae7c2",
          "md5": "fa5e1623f757d5010b0375f8a3f9a6f5",
          "sha256": "604f7ffb94994daac7ab77cc08e0557dc72e244f1241b4d699a64af6ad75457c"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.40.tar.gz",
        "has_sig": false,
        "md5_digest": "fa5e1623f757d5010b0375f8a3f9a6f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69757,
        "upload_time": "2020-01-23T10:55:22",
        "upload_time_iso_8601": "2020-01-23T10:55:22.972179Z",
        "url": "https://files.pythonhosted.org/packages/43/99/2b3b1730de67fc8897beb7a44e9e24fc32753ae62f33ffec31d8ee6ae7c2/digimat.saia-0.1.40.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.41": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0715406b7aabeb8f18268d6f98b4717e268818adbcef57c90b8e5d4aab28484",
          "md5": "4b5a7cc3056f38f0fdab2e1df363a0d0",
          "sha256": "7a49751ebe8436137a8e83243f22c285a980f8ad29b43ef22d80553188a54b18"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.41.tar.gz",
        "has_sig": false,
        "md5_digest": "4b5a7cc3056f38f0fdab2e1df363a0d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69855,
        "upload_time": "2020-01-29T18:28:20",
        "upload_time_iso_8601": "2020-01-29T18:28:20.240435Z",
        "url": "https://files.pythonhosted.org/packages/a0/71/5406b7aabeb8f18268d6f98b4717e268818adbcef57c90b8e5d4aab28484/digimat.saia-0.1.41.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.42": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "730175f98cea45a4e24668f56a52ee652e306f7b0c94872c0b688d9cdfc063b2",
          "md5": "c7046b9861d1f0abee146d90d8911c0c",
          "sha256": "91f898d9069880947f190763e9183552dd840232aa0ecef07c82da59e173a6e0"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.42.tar.gz",
        "has_sig": false,
        "md5_digest": "c7046b9861d1f0abee146d90d8911c0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69862,
        "upload_time": "2020-01-29T20:48:54",
        "upload_time_iso_8601": "2020-01-29T20:48:54.733164Z",
        "url": "https://files.pythonhosted.org/packages/73/01/75f98cea45a4e24668f56a52ee652e306f7b0c94872c0b688d9cdfc063b2/digimat.saia-0.1.42.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.43": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74658c0001d96208872dd63e664f3bd469e2063e8e025d779d50d36e302b32da",
          "md5": "50c70e7704e642f5c1f3712e93531c3b",
          "sha256": "26f1e976f7d91958d0c3dd0342568db0f75b6b96f9b67f89705ebcb2b876374b"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.43.tar.gz",
        "has_sig": false,
        "md5_digest": "50c70e7704e642f5c1f3712e93531c3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70561,
        "upload_time": "2020-01-31T07:55:16",
        "upload_time_iso_8601": "2020-01-31T07:55:16.047737Z",
        "url": "https://files.pythonhosted.org/packages/74/65/8c0001d96208872dd63e664f3bd469e2063e8e025d779d50d36e302b32da/digimat.saia-0.1.43.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.44": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "092d9972102e3ce07d1ad3102e14a0a752a57bb71f9dc68badca631d6ceae499",
          "md5": "c9003c68d4f803ce8268cea233676249",
          "sha256": "49dab07f46eb6dcb80cf4d5adfdd8e385737e6c309def643ef59cb1c798ced05"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.44.tar.gz",
        "has_sig": false,
        "md5_digest": "c9003c68d4f803ce8268cea233676249",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70680,
        "upload_time": "2020-01-31T15:36:13",
        "upload_time_iso_8601": "2020-01-31T15:36:13.911583Z",
        "url": "https://files.pythonhosted.org/packages/09/2d/9972102e3ce07d1ad3102e14a0a752a57bb71f9dc68badca631d6ceae499/digimat.saia-0.1.44.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.45": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e8541ac89d331d6ea1247fc8a9be216c560613ae6fd58ca00743f25a13e2b2e",
          "md5": "022ea025a867c83ddc628a8e64126ee0",
          "sha256": "e8e4c14e2e6ddc805e94c81efaab55d4f3c027c78086ea81e6020bc278d60ecc"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.45.tar.gz",
        "has_sig": false,
        "md5_digest": "022ea025a867c83ddc628a8e64126ee0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70688,
        "upload_time": "2020-02-01T19:49:26",
        "upload_time_iso_8601": "2020-02-01T19:49:26.563615Z",
        "url": "https://files.pythonhosted.org/packages/1e/85/41ac89d331d6ea1247fc8a9be216c560613ae6fd58ca00743f25a13e2b2e/digimat.saia-0.1.45.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.46": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11cb2961e87ff1c7bcbc00650723af74e681beec7febba39ffc2fb9776757cf6",
          "md5": "64573e126c6ce71ea50df60409ea5123",
          "sha256": "1ec4fc443a3865febc009e50bbe857d8214399da00c1c8bdd732bb19e116d0ec"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.46.tar.gz",
        "has_sig": false,
        "md5_digest": "64573e126c6ce71ea50df60409ea5123",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70780,
        "upload_time": "2020-02-03T10:44:37",
        "upload_time_iso_8601": "2020-02-03T10:44:37.070780Z",
        "url": "https://files.pythonhosted.org/packages/11/cb/2961e87ff1c7bcbc00650723af74e681beec7febba39ffc2fb9776757cf6/digimat.saia-0.1.46.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.47": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a5f39c7c9a0f813a18cb35dac8664dfc75ab1d327e7102c055c8c801199f70e",
          "md5": "a5d6dcd974ba6577549cce07d6b08fa9",
          "sha256": "40714bfc09511fd64b0f119383bc4052ab785edcae076ef18d2c98812cf86c3e"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.47.tar.gz",
        "has_sig": false,
        "md5_digest": "a5d6dcd974ba6577549cce07d6b08fa9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70902,
        "upload_time": "2020-02-04T22:05:16",
        "upload_time_iso_8601": "2020-02-04T22:05:16.488402Z",
        "url": "https://files.pythonhosted.org/packages/8a/5f/39c7c9a0f813a18cb35dac8664dfc75ab1d327e7102c055c8c801199f70e/digimat.saia-0.1.47.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.48": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cca253f05bd759759d066c73a4087079d74518f991d78d7b599c22d7147bcd9",
          "md5": "8befdabc490beddeb97edf8ebbcaecf3",
          "sha256": "3099f2c3e7c2d7338a3a51e8a9a518315c47d57bb086cbbb3c5c1c411175355b"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.48.tar.gz",
        "has_sig": false,
        "md5_digest": "8befdabc490beddeb97edf8ebbcaecf3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70958,
        "upload_time": "2020-02-24T10:29:32",
        "upload_time_iso_8601": "2020-02-24T10:29:32.273110Z",
        "url": "https://files.pythonhosted.org/packages/6c/ca/253f05bd759759d066c73a4087079d74518f991d78d7b599c22d7147bcd9/digimat.saia-0.1.48.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.49": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c732cc4fbca2d5ed9808fae761bd2cfec8d942177d37122ff172c13022e1b949",
          "md5": "eeeaf0c61a7b8589ac0df1fa85cb91e6",
          "sha256": "527938cb66ce861c2401c0ef16f938947374001787a43d238a018c12bf873ca5"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.49.tar.gz",
        "has_sig": false,
        "md5_digest": "eeeaf0c61a7b8589ac0df1fa85cb91e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71042,
        "upload_time": "2020-03-02T14:52:05",
        "upload_time_iso_8601": "2020-03-02T14:52:05.996177Z",
        "url": "https://files.pythonhosted.org/packages/c7/32/cc4fbca2d5ed9808fae761bd2cfec8d942177d37122ff172c13022e1b949/digimat.saia-0.1.49.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef30815afb30470f11c92231af3c1f343371731451795d9bea2ccb80df0ab10a",
          "md5": "9ce9506ef343e30ba702b8aa7d40ba1f",
          "sha256": "ad9f225256c3d4f5a295bc65d9a9af71cabf94a14a1f435c001bf55707053b4d"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9ce9506ef343e30ba702b8aa7d40ba1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59517,
        "upload_time": "2017-09-15T22:03:36",
        "upload_time_iso_8601": "2017-09-15T22:03:36.430285Z",
        "url": "https://files.pythonhosted.org/packages/ef/30/815afb30470f11c92231af3c1f343371731451795d9bea2ccb80df0ab10a/digimat.saia-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.50": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef846f5f33a0f30de026a082c41e5ad657f3464033b49e12c0dd979e7bb79807",
          "md5": "e1fa5a78d55d9d053a8eeb619f00c8a9",
          "sha256": "3e4b3a2af5bbc25566f71b9ae2a0900421425c37c7e6996e395b9e93c107f86e"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.50.tar.gz",
        "has_sig": false,
        "md5_digest": "e1fa5a78d55d9d053a8eeb619f00c8a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71054,
        "upload_time": "2020-04-03T14:55:09",
        "upload_time_iso_8601": "2020-04-03T14:55:09.333412Z",
        "url": "https://files.pythonhosted.org/packages/ef/84/6f5f33a0f30de026a082c41e5ad657f3464033b49e12c0dd979e7bb79807/digimat.saia-0.1.50.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.51": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42410b23b1d66ad0dd5a7db984594b0c40828c27a48298976f1ebe818b893e70",
          "md5": "1d68d0367b6eedeae539c3e7ef3a724e",
          "sha256": "f0800d8b18be831333273f058773f23e30e54c774be29ed0a3ff1e2ff1c5f464"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.51.tar.gz",
        "has_sig": false,
        "md5_digest": "1d68d0367b6eedeae539c3e7ef3a724e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71951,
        "upload_time": "2020-09-08T15:26:40",
        "upload_time_iso_8601": "2020-09-08T15:26:40.456353Z",
        "url": "https://files.pythonhosted.org/packages/42/41/0b23b1d66ad0dd5a7db984594b0c40828c27a48298976f1ebe818b893e70/digimat.saia-0.1.51.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.52": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29559a3fcb599c81aeefe9ff546f153ed6a6f1406692ec31b7a30f64ae98bb54",
          "md5": "1f73547f6b2af58c299205e5bf41eaf4",
          "sha256": "18556b15ec0c0c646e1374ee7c49462663252f34a3d8691d18c1fe9ac0416ee5"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.52.tar.gz",
        "has_sig": false,
        "md5_digest": "1f73547f6b2af58c299205e5bf41eaf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71869,
        "upload_time": "2020-09-08T15:43:14",
        "upload_time_iso_8601": "2020-09-08T15:43:14.685268Z",
        "url": "https://files.pythonhosted.org/packages/29/55/9a3fcb599c81aeefe9ff546f153ed6a6f1406692ec31b7a30f64ae98bb54/digimat.saia-0.1.52.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.53": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d44658563e01b40ae44203e0a4552b2f94ade0faea3810e84c6325933c8e2225",
          "md5": "10a9be101ce977b974fef97a10a888cb",
          "sha256": "3392e4fb03d514dbea30bd33c70144a6fed5990900eecaffb2acae0854b8948f"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.53.tar.gz",
        "has_sig": false,
        "md5_digest": "10a9be101ce977b974fef97a10a888cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71896,
        "upload_time": "2020-10-01T19:59:03",
        "upload_time_iso_8601": "2020-10-01T19:59:03.276642Z",
        "url": "https://files.pythonhosted.org/packages/d4/46/58563e01b40ae44203e0a4552b2f94ade0faea3810e84c6325933c8e2225/digimat.saia-0.1.53.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.54": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6af59f339220e94661658d12acb38ce1d21d7f0ec58185d760e684612cac369",
          "md5": "8d7ddcb3c82c28d78fba89b6af6c290c",
          "sha256": "93c4e2ca5b4a305ec5541048bf047e2b63d990390a7ad910af6151729a493716"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.54.tar.gz",
        "has_sig": false,
        "md5_digest": "8d7ddcb3c82c28d78fba89b6af6c290c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71962,
        "upload_time": "2020-10-29T13:13:23",
        "upload_time_iso_8601": "2020-10-29T13:13:23.664756Z",
        "url": "https://files.pythonhosted.org/packages/a6/af/59f339220e94661658d12acb38ce1d21d7f0ec58185d760e684612cac369/digimat.saia-0.1.54.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.55": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "654e63044d11dc1fdf22ea9ec7b3716a30eed2e2219fb2e98d2c8a1672379354",
          "md5": "601be5a2fe64dfa99b1bcaa8e537498f",
          "sha256": "cece533cfbf7d47622c254b5b60c34cda1dd218eaa02ebdcfc0e544b5d2b9c97"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.55.tar.gz",
        "has_sig": false,
        "md5_digest": "601be5a2fe64dfa99b1bcaa8e537498f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71959,
        "upload_time": "2020-10-29T13:14:39",
        "upload_time_iso_8601": "2020-10-29T13:14:39.894901Z",
        "url": "https://files.pythonhosted.org/packages/65/4e/63044d11dc1fdf22ea9ec7b3716a30eed2e2219fb2e98d2c8a1672379354/digimat.saia-0.1.55.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.56": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0df532ee62c14beeedae11744e19834cb66f7dba2652b4f6416c07c9bf03f40",
          "md5": "d8d236e3176e5415e15213b7448fc87b",
          "sha256": "51774079450ad838cc8c6fd84671bf59385493645cdfcfd5bcfbdd3f70b5e12b"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.56.tar.gz",
        "has_sig": false,
        "md5_digest": "d8d236e3176e5415e15213b7448fc87b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72252,
        "upload_time": "2020-11-05T22:36:07",
        "upload_time_iso_8601": "2020-11-05T22:36:07.129906Z",
        "url": "https://files.pythonhosted.org/packages/d0/df/532ee62c14beeedae11744e19834cb66f7dba2652b4f6416c07c9bf03f40/digimat.saia-0.1.56.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.57": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8340d129546a0b0b6b3279d8921f7cfd624eeedb414ec904c7689c5540724cd",
          "md5": "37b4e579672ac363a41d23212213f32d",
          "sha256": "c99d372f7f8f67c8b214fd94e01e6a4c6b1c1706aa2ee90c8fa596cbfd0b7f5b"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.57.tar.gz",
        "has_sig": false,
        "md5_digest": "37b4e579672ac363a41d23212213f32d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72379,
        "upload_time": "2020-11-06T13:11:08",
        "upload_time_iso_8601": "2020-11-06T13:11:08.323621Z",
        "url": "https://files.pythonhosted.org/packages/a8/34/0d129546a0b0b6b3279d8921f7cfd624eeedb414ec904c7689c5540724cd/digimat.saia-0.1.57.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.58": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f432c9f078f243a7ae77a5796c352472954856550ff58d5c554cbb4e68749e66",
          "md5": "637c5fc659c27b7038da18630ae20aae",
          "sha256": "dbcc4d66f9c713bfd2618dc1c68b5a7bb15e27417fa33677f778be5446be6e2d"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.58.tar.gz",
        "has_sig": false,
        "md5_digest": "637c5fc659c27b7038da18630ae20aae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72431,
        "upload_time": "2020-11-06T14:12:12",
        "upload_time_iso_8601": "2020-11-06T14:12:12.470947Z",
        "url": "https://files.pythonhosted.org/packages/f4/32/c9f078f243a7ae77a5796c352472954856550ff58d5c554cbb4e68749e66/digimat.saia-0.1.58.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.59": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c5ebad4b3b5ceb018eb13fb487884ee897c2d17e17f420a440c842372176373",
          "md5": "c97b14c5d20d046b34f4f3c52dbb8e81",
          "sha256": "c9daee1b4bbf2d644ad26809a59ee702dda491a925a9a28367bd688ef9dde2fc"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.59.tar.gz",
        "has_sig": false,
        "md5_digest": "c97b14c5d20d046b34f4f3c52dbb8e81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72593,
        "upload_time": "2020-11-06T20:15:30",
        "upload_time_iso_8601": "2020-11-06T20:15:30.484987Z",
        "url": "https://files.pythonhosted.org/packages/0c/5e/bad4b3b5ceb018eb13fb487884ee897c2d17e17f420a440c842372176373/digimat.saia-0.1.59.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e541c70b2efe19743ecb211a8c85a5bb841f349ea4feffae92d036f7d82a418",
          "md5": "824fe99460b2252480b7ee2721504ab0",
          "sha256": "e40a9ebf35a54fa616c23002c906d74330e1b69ea028dda655baecf4145d08a4"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "824fe99460b2252480b7ee2721504ab0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59579,
        "upload_time": "2017-09-15T22:19:51",
        "upload_time_iso_8601": "2017-09-15T22:19:51.934173Z",
        "url": "https://files.pythonhosted.org/packages/6e/54/1c70b2efe19743ecb211a8c85a5bb841f349ea4feffae92d036f7d82a418/digimat.saia-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.60": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ade8a450dd460e944d675955865121af5f62afd696ff6cffb9329b2f507c1a89",
          "md5": "1c7fc530e91cc95fbcc480874e5409a1",
          "sha256": "f32d87404c450c9e6351b04cc583ad5d7da36acbf2def2d8e09ee981ecdcc55e"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.60.tar.gz",
        "has_sig": false,
        "md5_digest": "1c7fc530e91cc95fbcc480874e5409a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72670,
        "upload_time": "2020-11-06T20:27:18",
        "upload_time_iso_8601": "2020-11-06T20:27:18.108127Z",
        "url": "https://files.pythonhosted.org/packages/ad/e8/a450dd460e944d675955865121af5f62afd696ff6cffb9329b2f507c1a89/digimat.saia-0.1.60.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.61": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc974b45314e5f14d40c183426ae945e14503612330973eabbbe43a59929a073",
          "md5": "064474e870d006f6a590a708dbd3f587",
          "sha256": "453795dae3c989c088f47935094b98bf0587dd2a3f1aa7271947f8a4beb351e7"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.61.tar.gz",
        "has_sig": false,
        "md5_digest": "064474e870d006f6a590a708dbd3f587",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75753,
        "upload_time": "2020-11-07T09:32:51",
        "upload_time_iso_8601": "2020-11-07T09:32:51.483395Z",
        "url": "https://files.pythonhosted.org/packages/bc/97/4b45314e5f14d40c183426ae945e14503612330973eabbbe43a59929a073/digimat.saia-0.1.61.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.62": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1261731dfc405b8368df20dc4fcb053d954570ec120f4bd17e1decf48d0f5da",
          "md5": "6505355602b5c29ef4b5c1fffa9eb906",
          "sha256": "8e7851e65ad33f93e34b2f8f32114819efe1329100b40ebee6ca0c3dff81fb72"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.62.tar.gz",
        "has_sig": false,
        "md5_digest": "6505355602b5c29ef4b5c1fffa9eb906",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75761,
        "upload_time": "2020-11-07T09:39:39",
        "upload_time_iso_8601": "2020-11-07T09:39:39.741253Z",
        "url": "https://files.pythonhosted.org/packages/c1/26/1731dfc405b8368df20dc4fcb053d954570ec120f4bd17e1decf48d0f5da/digimat.saia-0.1.62.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.63": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c36220e0e9f6ec4b392fbb0a85900d5acc911a2aa2a313f72881a2ab6dd31093",
          "md5": "8b48a1f7f11ddccca5b200cc4fcd5e91",
          "sha256": "bc70fda1274d5a0d661c8ddae1c29405f31e4591328ebe6ebfb7c4532b122326"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.63.tar.gz",
        "has_sig": false,
        "md5_digest": "8b48a1f7f11ddccca5b200cc4fcd5e91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75418,
        "upload_time": "2020-11-07T09:43:11",
        "upload_time_iso_8601": "2020-11-07T09:43:11.072763Z",
        "url": "https://files.pythonhosted.org/packages/c3/62/20e0e9f6ec4b392fbb0a85900d5acc911a2aa2a313f72881a2ab6dd31093/digimat.saia-0.1.63.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.64": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2161d6339efe82d6fff81203c8a8f6d4275c1bd5a59496c10a265b05d743fcec",
          "md5": "f65b5632088a9e0af38b8c48bcd02a9c",
          "sha256": "5497438bd01b352c6e65ab5f0928b0904e426857f1178b04b0a4fed18dd7a2e8"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.64.tar.gz",
        "has_sig": false,
        "md5_digest": "f65b5632088a9e0af38b8c48bcd02a9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75427,
        "upload_time": "2020-11-07T09:49:54",
        "upload_time_iso_8601": "2020-11-07T09:49:54.758782Z",
        "url": "https://files.pythonhosted.org/packages/21/61/d6339efe82d6fff81203c8a8f6d4275c1bd5a59496c10a265b05d743fcec/digimat.saia-0.1.64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.65": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fad883c86a4577d46c92ab7038c09c51b33ba5091249d1790bc054545817d8bf",
          "md5": "539b67f715056e85f3588d510cd5d2ca",
          "sha256": "7935fece2fb5e7dd4f2aff015dff6690d6c537f3c0f03548cfcae0f4f4515401"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.65.tar.gz",
        "has_sig": false,
        "md5_digest": "539b67f715056e85f3588d510cd5d2ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75395,
        "upload_time": "2020-11-19T22:04:06",
        "upload_time_iso_8601": "2020-11-19T22:04:06.546384Z",
        "url": "https://files.pythonhosted.org/packages/fa/d8/83c86a4577d46c92ab7038c09c51b33ba5091249d1790bc054545817d8bf/digimat.saia-0.1.65.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.66": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "721fa3dfc46b4938470aedcc4c278eca19cd84223a82caa2864bced00226a1b9",
          "md5": "dc286963ab1a16f2fcd50f3d24b29044",
          "sha256": "d31c1c192e79638d518a146b1af343b129825c778a7f169f5f654722df1c669f"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.66.tar.gz",
        "has_sig": false,
        "md5_digest": "dc286963ab1a16f2fcd50f3d24b29044",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75540,
        "upload_time": "2020-11-22T20:33:16",
        "upload_time_iso_8601": "2020-11-22T20:33:16.705536Z",
        "url": "https://files.pythonhosted.org/packages/72/1f/a3dfc46b4938470aedcc4c278eca19cd84223a82caa2864bced00226a1b9/digimat.saia-0.1.66.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.67": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bb9185db10fbe2eabbcb281a758f4c6f49019217fda0f112a3bdeab2f6634df",
          "md5": "e2e9c8212f185df5dc36f50e48af2783",
          "sha256": "a38d6eafe36628a52b37b4156bd479ef76d320dfb1601dc5bca3caa071962a47"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.67.tar.gz",
        "has_sig": false,
        "md5_digest": "e2e9c8212f185df5dc36f50e48af2783",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75194,
        "upload_time": "2023-02-08T17:32:39",
        "upload_time_iso_8601": "2023-02-08T17:32:39.385092Z",
        "url": "https://files.pythonhosted.org/packages/3b/b9/185db10fbe2eabbcb281a758f4c6f49019217fda0f112a3bdeab2f6634df/digimat.saia-0.1.67.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcae82aaf5913ecc51b26078613ced4aeb6c7ea5faa542f105453f92bb576f20",
          "md5": "c24b0efa54855c50197cad1c4d676258",
          "sha256": "64676b1c3d9d928db952f1515980f389a2c55a38ddf1a0ca168b5b776a819667"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c24b0efa54855c50197cad1c4d676258",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59579,
        "upload_time": "2017-09-15T22:21:52",
        "upload_time_iso_8601": "2017-09-15T22:21:52.639301Z",
        "url": "https://files.pythonhosted.org/packages/bc/ae/82aaf5913ecc51b26078613ced4aeb6c7ea5faa542f105453f92bb576f20/digimat.saia-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9038d3861b190f43ea998c109f64f73574a768fac5918bd34ed724cbf0675c3d",
          "md5": "3c8915e0ae319291be9f32b91938b475",
          "sha256": "8e59e184f9930aa01a2eeb6ad9ef8593c42d0aabc9014307a615cfdae5bca11f"
        },
        "downloads": -1,
        "filename": "digimat.saia-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "3c8915e0ae319291be9f32b91938b475",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60881,
        "upload_time": "2017-10-25T11:45:56",
        "upload_time_iso_8601": "2017-10-25T11:45:56.693903Z",
        "url": "https://files.pythonhosted.org/packages/90/38/d3861b190f43ea998c109f64f73574a768fac5918bd34ed724cbf0675c3d/digimat.saia-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bb9185db10fbe2eabbcb281a758f4c6f49019217fda0f112a3bdeab2f6634df",
        "md5": "e2e9c8212f185df5dc36f50e48af2783",
        "sha256": "a38d6eafe36628a52b37b4156bd479ef76d320dfb1601dc5bca3caa071962a47"
      },
      "downloads": -1,
      "filename": "digimat.saia-0.1.67.tar.gz",
      "has_sig": false,
      "md5_digest": "e2e9c8212f185df5dc36f50e48af2783",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 75194,
      "upload_time": "2023-02-08T17:32:39",
      "upload_time_iso_8601": "2023-02-08T17:32:39.385092Z",
      "url": "https://files.pythonhosted.org/packages/3b/b9/185db10fbe2eabbcb281a758f4c6f49019217fda0f112a3bdeab2f6634df/digimat.saia-0.1.67.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}