{
  "info": {
    "author": "MorvanZhou",
    "author_email": "morvanzhou@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MEvo\n\n---\n[![Unittest](https://github.com/MorvanZhou/mevo/actions/workflows/python-package.yml/badge.svg)](https://github.com/MorvanZhou/mevo/actions/workflows/python-package.yml)\n[![GitHub license](https://img.shields.io/github/license/MorvanZhou/mevo)](https://github.com/MorvanZhou/mevo/blob/master/LICENSE)\n\nMEvo is a evolutionary algorithm package, which implements Genetic Algorithm and Evolution Strategies Algorithms.\nIt can be used to form an agent strategy or optimize math problems.\n\n# Quick look\n\nTraining a cartpole policy by using Genetic Algorithm.\n\n```python\nimport mevo\nimport gymnasium\nimport numpy as np\n\n\n# define a fitness function to get fitness for every individual\ndef fitness_fn(ind: mevo.individuals.Individual, conf: dict) -> float:\n    ep_r = 0\n    env = gymnasium.make('CartPole-v1')\n    env.reset()\n    for _ in range(2):\n        s, _ = env.reset()\n        for _ in range(500):  # in one episode\n            logits = ind.predict(s)\n            a = np.argmax(logits)\n            s, r, done, _, _ = env.step(a)\n            ep_r += r\n            if done:\n                break\n    return ep_r\n\n\n# training\nwith mevo.GeneticAlgoNet(max_size=20, layer_size=[4, 8, 2], drop_rate=0.7, mutate_rate=0.5) as pop:\n    for generation in range(40):\n        pop.evolve(fitness_fn=fitness_fn)\n        print(f\"generation={generation}, top_fitness={pop.top.fitness:.f2}\")\n```\n\nAfter only 40 generations in a population (20 individuals), it gives a greate result.\nUse following code to visualize the learned policy.\n\n```python\n# deploy the best individual\nenv = gymnasium.make('CartPole-v1', render_mode=\"human\")\nwhile True:\n    s, _ = env.reset()\n    while True:  # in one episode\n        logits = pop.top.predict(s)\n        a = np.argmax(logits)\n        s, _, done = env.step(a)[:3]\n        if done:\n            break\n```\n\n![cartpole](https://github.com/MorvanZhou/mevo/raw/main/images/cartpole.gif)\n\n# What is MEvo\n\nIn the MEvo, the smallest data segment is Gene. A set of gene can be packed into a Chromosome.\nChromosomes then formed an Individual. A Population consists of many individuals.\n\n![data](https://github.com/MorvanZhou/mevo/raw/main/images/dataStructural.png)\n\nThis is different from the classical Genetic Algorithm which their chromosome only consists of a 1D array.\nIn other words, chromosome in the MEvo is n-D array with different shape.\n\n![data](https://github.com/MorvanZhou/mevo/raw/main/images/dataShape.png)\n\n**Why making data shape varied?**\n\nBecause we want to possibly evolve a neural network which has multiple layers in various shape.\n\nMEvo has two different algorithm families.\n\n- Genetic Algorithm family\n- Evolution Strategy family\n\nThe Genetic Algorithm basically has two steps:\n\n1. crossover the chromosomes in a population\n2. mutate gene in new generation\n\nThe following image shows how crossover on two parents chromosomes,\nand how to mutate the new chromosome.\n\n![crossoverMutation](https://github.com/MorvanZhou/mevo/raw/main/images/crossoverMutation.png)\n\nAnd MEvo's Evolution Strategy has different two steps:\n\n1. mutate gene (normal distribution) from one single chromosome\n2. update this chromosome by all mutated results\n\n![es](https://github.com/MorvanZhou/mevo/raw/main/images/es.png)\n\n# Parallel training\n\nMEvo support parallel training. Simply set `n_worker` > 1 to unlock your machine power for training on multiple cores.\nWhen `n_worker=-1` then use all your cores.\n\nSimply replace the `pop` definition by including `n_worker` from previous code.\n\n```python\n# parallel training\nif __name__ == \"__main__\":\n    with mevo.GeneticAlgoNet(max_size=20, layer_size=[4, 8, 2], n_worker=-1, drop_rate=0.7, mutate_rate=0.5) as pop:\n        for generation in range(40):\n            pop.evolve(fitness_fn=fitness_fn)\n            print(f\"generation={generation}, top_fitness={pop.top.fitness:.2f}\")\n```\n\nNote that the parallel code must be run under `if __name__ == \"__main__\"ï¼š` scope,\notherwise a python multiprocessing err will occur.\n\n# Install\n\nUsing pip to install MEvo\n\n```shell\npip3 install mevo\n```\n\n# Methods and Parameters\n\nMEvo support following populations:\n\n- mevo.GeneticAlgoInt()\n- mevo.GeneticAlgoFloat()\n- mevo.GeneticAlgoOrder()\n- mevo.GeneticAlgoNet()\n- mevo.EvolutionStrategyNet()\n\n## A classical genetic algorithm problem\n\nsuch as Travel Sales Problem (TSP) can be solved by following classical Populations:\n\n- mevo.GeneticAlgoInt()\n- mevo.GeneticAlgoFloat()\n- mevo.GeneticAlgoOrder()\n\n### A Travel Sales Problem example using `pop = mevo.GeneticAlgoOrder()`:\n\n```python\nimport mevo\nimport numpy as np\n\npositions = [np.random.rand(2) for _ in range(20)]\n\n\ndef distance_fitness_fn(ind: mevo.individuals.Individual, conf: dict) -> float:\n    order = [c.data[0] for c in ind.chromosomes]\n    cost = 0\n    for i in range(len(order) - 1):\n        p1, p2 = positions[order[i]], positions[order[i + 1]]\n        cost += np.square(p1 - p2).sum()\n    fitness = -cost\n    return fitness\n\n\npop = mevo.GeneticAlgoOrder(\n    max_size=50,\n    chromo_size=len(positions),\n    drop_rate=0.3,\n    mutate_rate=0.01,\n)\npop.run(fitness_fn=distance_fitness_fn, step=30)\n```\n\n### An optimization problem example using `pop = mevo.GeneticAlgoInt()`:\n\n```python\nimport mevo\nimport numpy as np\n\n\ndef wave_fitness_fn(ind: mevo.individuals.Individual, conf: dict) -> float:\n    binary = [c.data for c in ind.chromosomes]\n    c = np.concatenate(binary, axis=0)\n    a = 2 ** np.arange(len(c))[::-1]\n    decimal = c.dot(a)\n\n    x = decimal / float(2 ** len(c) - 1) * 5\n    o = np.sin(10 * x) * x + np.cos(2 * x) * x\n    return o\n\n\npop = mevo.GeneticAlgoInt(\n    max_size=20,\n    chromo_size=10,\n    drop_rate=0.3,\n    chromo_initializer=mevo.chromosomes.initializers.RandomInt(0, 2),\n    mutate_rate=0.01,\n)\npop.run(step=20, fitness_fn=wave_fitness_fn)\n```\n\n## Deep Net Evolution\n\nFor policy learning or Reinforcement learning alternative, the following two methods has their advantages.\n\n- mevo.GeneticAlgoNet()\n- mevo.EvolutionStrategyNet()\n\n|              | Reinforcement Learning               | MEvo                                                                                                  |\n|--------------|--------------------------------------|-------------------------------------------------------------------------------------------------------|\n| Training     | Has forward and backward propagation | Only has forward propagation, but need crossover or mutation operation (lighter than backpropagation) |\n| Exploration  | Needs carefully set explore policy   | Different children setting automatically ensure the exploration                                       |\n| Memory needs | Can only keep one set of parameters  | In each generation, must compute all children's parameters (parallel computing save time)             |\n| Network Size | Generally large and deep net         | With a large scale exploration, a relatively small net can perform a good job                         |\n\n### A `mevo.GeneticAlgoNet()` example:\n\n```python\nimport mevo\nimport gymnasium\nimport numpy as np\n\n\ndef fitness_fn(ind: mevo.individuals.Individual, conf: dict) -> float:\n    ep_r = 0\n    env = gymnasium.make('Pendulum-v1')\n    env.reset(seed=conf[\"seed\"])\n    for _ in range(2):\n        s, _ = env.reset()\n        for _ in range(150):  # in one episode\n            logits = ind.predict(s)\n            a = np.tanh(logits) * 2\n            s, r, _, _, _ = env.step(a)\n            ep_r += r\n    return ep_r\n\n\ndef train():\n    with mevo.GeneticAlgoNet(\n            max_size=30,\n            layer_size=[3, 32, 1],\n            drop_rate=0.7,\n            mutate_rate=0.5,\n            n_worker=-1,\n    ) as pop:\n        for ep in range(700):\n            pop.evolve(\n                fitness_fn=fitness_fn,\n            )\n            print(ep, pop.top.fitness)\n    return pop.top\n\n\ndef show(top):\n    env = gymnasium.make('Pendulum-v1', render_mode=\"human\")\n    while True:\n        s, _ = env.reset()\n        for _ in range(200):  # in one episode\n            logits = top.predict(s)\n            a = np.tanh(logits) * 2\n            s, _, _, _, _ = env.step(a)\n\n\nif __name__ == \"__main__\":\n    top = train()\n    show(top)\n```\n\n### A `mevo.EvolutionStrategyNet()` example:\n\n```python\nimport mevo\nimport gymnasium\nimport numpy as np\n\n\ndef fitness_fn(ind: mevo.individuals.EvolutionStrategyDense, conf: dict) -> float:\n    ep_r = 0\n    seed = conf[\"seed\"]\n    index = conf[\"index\"]\n\n    env = gymnasium.make('Pendulum-v1')\n\n    # ! must set seed and clone when using mevo.EvolutionStrategyNet()\n    env.reset(seed=conf[\"seed\"])\n    c_ind = ind.clone_with_mutate(index, seed)\n    # ###############\n\n    for _ in range(2):\n        s, _ = env.reset()\n        for _ in range(100):\n            logits = c_ind.predict(s)\n            a = np.tanh(logits) * 2\n            s, r, _, _, _ = env.step(a)\n            ep_r += r\n    return ep_r\n\n\ndef train():\n    with mevo.EvolutionStrategyNet(\n            max_size=15,\n            layer_size=[3, 32, 1],\n            mutate_strength=0.05,\n            learning_rate=0.1,\n            n_worker=-1,\n            seed=2\n    ) as pop:\n        for ep in range(700):\n            pop.evolve(fitness_fn=fitness_fn)\n            print(ep, pop.top.fitness)\n    return pop.top\n\n\ndef show(top):\n    env = gymnasium.make(\n        'Pendulum-v1',\n        render_mode=\"human\"\n    )\n    while True:\n        s, _ = env.reset()\n        for _ in range(200):  # in one episode\n            logits = top.predict(s)\n            a = np.tanh(logits) * 2\n            s, _, _, _, _ = env.step(a)\n\n\nif __name__ == \"__main__\":\n    top = train()\n    show(top)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MorvanZhou/mevo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mevo",
    "package_url": "https://pypi.org/project/mevo/",
    "platform": null,
    "project_url": "https://pypi.org/project/mevo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/MorvanZhou/mevo/issues",
      "Homepage": "https://github.com/MorvanZhou/mevo",
      "Source": "https://github.com/MorvanZhou/mevo"
    },
    "release_url": "https://pypi.org/project/mevo/0.0.2/",
    "requires_dist": [
      "numpy (>=1.20.0)",
      "tox (==3.24.3) ; extra == 'build'",
      "tox-conda ; extra == 'build'",
      "build ; extra == 'build'",
      "twine ; extra == 'build'",
      "pylint ; extra == 'build'",
      "gymnasium[classic_control] (>=0.27.1) ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "Evolutionary Algorithms in Python",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16722409,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45c29031db5b0423aa31ca00577ceab712f7ed0457808111da38a9c883b90b16",
          "md5": "6180e852c1a3afce405c820f27a8d5d5",
          "sha256": "b5bd607b4585fb8b9fcf18eaeb8371ace4ea618f38a24859d4ec9c5d40fe0fab"
        },
        "downloads": -1,
        "filename": "mevo-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6180e852c1a3afce405c820f27a8d5d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21611,
        "upload_time": "2023-02-07T04:38:45",
        "upload_time_iso_8601": "2023-02-07T04:38:45.753996Z",
        "url": "https://files.pythonhosted.org/packages/45/c2/9031db5b0423aa31ca00577ceab712f7ed0457808111da38a9c883b90b16/mevo-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b10e277c12a7fd60f57b0ed360bdc0bb2f32c4e3a6c07392e5b4b56b2a14ea9",
          "md5": "433aee948e0d8b7d1461be3e1be8dd85",
          "sha256": "66e7c1e1702a2fd235c6aa0749c12699603e81fee482b60312121b5b4f9334e6"
        },
        "downloads": -1,
        "filename": "mevo-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "433aee948e0d8b7d1461be3e1be8dd85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17365,
        "upload_time": "2023-02-07T04:38:48",
        "upload_time_iso_8601": "2023-02-07T04:38:48.228457Z",
        "url": "https://files.pythonhosted.org/packages/2b/10/e277c12a7fd60f57b0ed360bdc0bb2f32c4e3a6c07392e5b4b56b2a14ea9/mevo-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1511fc083022c28a074b9f12088d383d86f067f9c711120900603543eb370a27",
          "md5": "fa4cc545a8d9069e0be822a7b2dab9ec",
          "sha256": "7861359d085bb73be2dade7d728d448c7d3987e96b5ff3b281b0782acc81f6b8"
        },
        "downloads": -1,
        "filename": "mevo-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa4cc545a8d9069e0be822a7b2dab9ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21662,
        "upload_time": "2023-02-07T04:44:30",
        "upload_time_iso_8601": "2023-02-07T04:44:30.070536Z",
        "url": "https://files.pythonhosted.org/packages/15/11/fc083022c28a074b9f12088d383d86f067f9c711120900603543eb370a27/mevo-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c38414eaec0389b81d3d254a9a86d730d140fd3c4b7163a2e044fa15941ded71",
          "md5": "e0d1b20c73cd3547f6a29edaf1439d08",
          "sha256": "d044d370f5170004fbdb03708320634720ae05dd1bb194cadf53e3685168382f"
        },
        "downloads": -1,
        "filename": "mevo-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e0d1b20c73cd3547f6a29edaf1439d08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17444,
        "upload_time": "2023-02-07T04:44:33",
        "upload_time_iso_8601": "2023-02-07T04:44:33.645121Z",
        "url": "https://files.pythonhosted.org/packages/c3/84/14eaec0389b81d3d254a9a86d730d140fd3c4b7163a2e044fa15941ded71/mevo-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1511fc083022c28a074b9f12088d383d86f067f9c711120900603543eb370a27",
        "md5": "fa4cc545a8d9069e0be822a7b2dab9ec",
        "sha256": "7861359d085bb73be2dade7d728d448c7d3987e96b5ff3b281b0782acc81f6b8"
      },
      "downloads": -1,
      "filename": "mevo-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa4cc545a8d9069e0be822a7b2dab9ec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 21662,
      "upload_time": "2023-02-07T04:44:30",
      "upload_time_iso_8601": "2023-02-07T04:44:30.070536Z",
      "url": "https://files.pythonhosted.org/packages/15/11/fc083022c28a074b9f12088d383d86f067f9c711120900603543eb370a27/mevo-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c38414eaec0389b81d3d254a9a86d730d140fd3c4b7163a2e044fa15941ded71",
        "md5": "e0d1b20c73cd3547f6a29edaf1439d08",
        "sha256": "d044d370f5170004fbdb03708320634720ae05dd1bb194cadf53e3685168382f"
      },
      "downloads": -1,
      "filename": "mevo-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e0d1b20c73cd3547f6a29edaf1439d08",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 17444,
      "upload_time": "2023-02-07T04:44:33",
      "upload_time_iso_8601": "2023-02-07T04:44:33.645121Z",
      "url": "https://files.pythonhosted.org/packages/c3/84/14eaec0389b81d3d254a9a86d730d140fd3c4b7163a2e044fa15941ded71/mevo-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}