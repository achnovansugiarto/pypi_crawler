{
  "info": {
    "author": "Andrei Zhlobich",
    "author_email": "andrei.zhlobich@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing"
    ],
    "description": "votakvot\n========\n\nA simple tool helping to track information, metrics, and files during\ncode development, testing, probing, experimentation and analysis.\n\n\nThe idea\n--------\n\nYou write Python code, annotate a function, call it.\n\n*Votakvot* track what function parameters are, its result, git repo status, etc...\n\nChange your code, change parameters, try to rerun the function, experiment.\n\nThen *votakvot* may load back all information as pandas `DataFrame`.\n\nPlay with data and find the best combination of function parameters and version of a source code.\n\n\nBasic usage\n-----------\n\nWrite a function and wrap it with an annotation `votakvot.track`:\n\n```python\n@votakvot.track()\ndef my_experiment(one, two):\n    print(one, two)\n    return one + two\n```\n\nThen call `votakvot.init()` to initialize library internals:\n\n```python\nvotakvot.init(\n    path=\"./my-results\",  # path, where to store results, \".\" by default\n)\n```\n\nNow any invocation of `my_experiment(...)` creates a new unique folder\ninside *./my-results*. That new subfolder contains a file\n*votakvot.yaml* with:\n\n- globally unique id (uuid4)\n- timestamps (created, started, finished, duration)\n- function parameters\n- function result\n- git info (branch, commit, work directory tree-ish)\n- system information (machine, user, python version)\n- traceback text on exception\n- any additional ad-hoc information\n\nAdditional information added with `votakvot.inform`:\n\n```python\n@votakvot.track()\ndef my_experiment(one, two):\n    ...\n    votakvot.inform(\n        any_custom_field=\"any-value\",\n        other_custom_field=[\"structured\", \"data\"],\n    )\n    ...\n```\n\nPlease note that any parameter, returned, or informed value is serialized\nby [pyyaml](https://pyyaml.org/wiki/PyYAMLDocumentation). It supports\nall standard python types: int, float, complex, bool, str, bytes, list,\ndict, tuple, set, datetime, None. Also any pickleable python class may\nbe serialized (including namedtuples and dataclasses), however it is not\nrecommended.\n\nLoad reports\n------------\n\nContent of multiple *votakvot.yaml* files can be loaded into\n`pandas.DataFrame` by using function `votakvot.load_report()`. It gets\nfile path as a first argument. A path may be prefixed with a protocol\n(`ftp://`, `ssh://` etc).\nSome prefixes (like `gs://` or `s3://`) may require extra libraries to be installed (see\n[fsspec protocols](https://filesystem-spec.readthedocs.io/en/latest/?badge=latest#implementations)\nfor details).\n\nAlso path may contain glob patterns: `*` corresponds to any string\nwithout `/`, `**` corresponds to anything.\n\nBy default `@votakvot.track()`\nadds date-time of invocation into a subdirectory name:\n\n``` {.sourceCode .}\n{function module} / {function name} / {yy}-{mm}-{dd} / {hour}:{minute}:{second} / {unique uuid}\n```\n\nThis allows loading results only for a particular module, function, date\nor date-time only:\n\n```python\nroot = \"/path/to/directory/with/results\"\n\n# load all experiments from `root`\nvotakvot.load_report(root)\n\n# load all experiments with additinoal fields\nvotakvot.load_report(root, full=True)\n\n# load all experiemnts for specified function only\nvotakvot.load_report(f\"{root}/my_module/function_name\")\n\n# load experiments for a single day 2021-05-20 (any function)\nvotakvot.load_report(f\"{root}/**/21-05-20\")\n\n# load exprriments for a particular hour (any function)\nvotakvot.load_report(f\"{root}/**/21-05-20/15:*\")\n```\n\nA few dataframes may be merged with \\`pandas.concat\\`:\n\n```python\n# load results for 3 days\ndf = pandas.concat(\n    votakvot.load_report(f\"{root}/**/{day}/**\")\n    for day in [\"21-05-20\", \"21-05-21\", \"21-05-22\"]\n)\n```\n\nResult `DataFrame` can be filtered, sorted, updated, transformed,\nplotted, serialized, and analyzed with all power of Pandas. See\n[pandasttutorial](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html).\n\nAdditionally *raw* information may be obtained with `load_trials`\nfunction:\n\n```python\n# load dict of {id -> votakvot.Trial}\nvs = load_trials(root)\n\nprint(\"count\", len(vs))\nprint(\"ids:\", vs.keys())\n\n# print raw content of `votakvot.yaml` files\nprint(\"data\", [v.data for v in vs.values()])\n\n# print only git related information\nprint(\"git commits\", [v.meta.git.commit for v in vs.values()])\n```\n\nMetrics\n-------\n\nTracked function may produce metrics:\n\n```python\nvotakvot.meter(\n    metric_name=\"metric value\",\n)\n```\n\nMetrics are stored as series of csv files and can be loaded to single `pandas.DataFrame`:\n\n```python\nrep = votakvot.load_report()\ntid = rep.loc[0]['tid']             # trial id\nvotakvot.metrics.load_metrics(tid)  # instance of pd.DataFrame\n```\n\nAttached files\n--------------\n\nA regular file may be created next to *votakvot.yaml*. Use this to\nstore debug information (traceback, logs), create artifacts or even\nstore intermediate results of computation (see resumable tasks).\n\n```python\n@votakvot.track()\ndef my_experiment(one, two):\n    ...\n    with votakvot.attach(\"my-file-name.txt\", mode='tw') as f:\n        f.write(\"some text ...\")\n```\n\nMetadata\n--------\n\nLibrary automatically adds metadata to all generated *votakvot.yaml* files.\nMetadata includes information about python environment, git repo\n(commit, branch, and index hash), OS version. You can add extra\nmetadata by putting values into dictionary `votakvot.meta.providers`:\n\n```python\n# make copy of all providers\nmy_proivders = dict(votakvot.meta.providers)\n\n# add information about k8s\nmy_proivders['k8s.version'] = lambda: subprocess.getoutput(\"kubectl version\")\nmy_proivders['k8s.cluster_info'] = lambda: subprocess.getoutput(\"kubectl cluster-info\")\n\n# include list of all python libraries\nmy_proivders['python.pip_freeze'] = lambda: subprocess.getoutput(\"pip freeze\")\n\n# delete deafult medatata for 'git'\nmy_proivders = {\n    k: v\n    for k, v in votakvot.metadata_providers.items()\n    if not k.startswith(\"git.\")\n}\n\n# here 'kubectl' command is invoked, but 'git' does not\nvotakvot.init(\n    meta_providers=my_proivders,  # use custom set of meta providers\n)\n```\n\nResumable tasks\n---------------\n\nSome trials may take a lot of time to complete, it is possible to\nmake them resumable. A tracked function may be refactored into an iterable\npickleable object. If the program fails (or terminated manually) a pickled object\nis still left on the disk and *votakvot* will automatically loaded it during the next trial run.\n\n```python\nclass my_function(votakvot.resumable_fn):\n\n    snapshot_period = 5  # snapshot each 5sec, only in-between `self.loop()` calls\n\n    def init(self, one, two):\n        self.one = one\n        ...\n\n    def loop(self):\n        if ...:\n            return \"result\"  # non-None value to finish compution\n        else:\n            return None      # repeat `self.loop()` one more time\n\n# autoresume when there is a snapshot for this id on the filesystem\nvotakvot.run(\n    f\"resumable_pi/n={n}/seed={s}\",   # id must be explicitly specified for resumable tasks\n    my_function,\n    one=1,\n    two=2,\n)\n```\n\nvotakvot-ab\n-----------\n\nVotakvot comes with basic benchmarking tool `votakvot-ab`.\nIt behaves similar to the well known [ab](http://www.skrenta.com/rt/man/ab.8.html) utility,\nbut instead of making HTTP calls invokes a python callback.\n\nTool may patch sockets with [gevent](http://www.gevent.org/), allowing to\nrun IO-bounded code with bigger concurrency.\n\nGiven file `my_module.py`:\n```python\nimport requests\n\ndef get_example():\n   return requests.get(\"http://example.com/\").status_code\n```\n\nThen call the function 1000 times in 200 \"threads\" (using greenlets):\n```bash\nvotakvot-ab --gevent -n1000 -c200 my_module.get_example\n```\n\nAlso callback might be a class with custom initialization logic (usefull to create\nHTTP sessions and connection pools, perform precomputations, etc):\n\n```python\nimport requests\n\nclass HTTPGet:\n    def __init__(self, url):\n        self.url = url\n        self.session = requests.Session()  # reuse connections\n\n    def __call__(self):\n        return self.session.get(self.url).status_code\n```\n\nInstance of `HTTPGet` created once and then method `__call__` invoked 1000 times:\n\n```bash\nvotakvot-ab -g -n1000 -c200 my_module.HTTPGet url=http://example.com\n```\n\nSee `votakvot-ab --help` for all parameters.\n\n## License\n\n*Votakvot* is released under the Apache 2.0 license (see [LICENSE](LICENSE))\n\nIt is based on a project developed by Allegro https://github.com/allegro/votakvot\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anjensan/votakvot",
    "keywords": "",
    "license": "apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "votakvot",
    "package_url": "https://pypi.org/project/votakvot/",
    "platform": null,
    "project_url": "https://pypi.org/project/votakvot/",
    "project_urls": {
      "Homepage": "https://github.com/anjensan/votakvot"
    },
    "release_url": "https://pypi.org/project/votakvot/0.1rc1/",
    "requires_dist": [
      "pyyaml (>=5.4)",
      "fsspec (>=0.8)",
      "multiprocess (>=0.70)",
      "pandas (>=1.1.5)",
      "wrapt (>=1.12)",
      "gevent (>=21) ; extra == 'ab'",
      "apache-beam (>=2.28) ; extra == 'beam'",
      "gcsfs (>=0.72) ; extra == 'beam'",
      "google-cloud-monitoring (>=2.6) ; extra == 'gcm'",
      "gcsfs (>=0.72) ; extra == 'gcm'",
      "prometheus-client (>=0.11) ; extra == 'prometheus'"
    ],
    "requires_python": "<4.0.0,>=3.7.1",
    "summary": "Track information during code testing and researching.",
    "version": "0.1rc1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14923441,
  "releases": {
    "0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31587927cdf5c200a0dd789444a97ae85e00927a1ddd2ded9a0e0c903fb260b3",
          "md5": "6471a10550529b848c403fba9b352c37",
          "sha256": "1a47013c15a7e41a1cd07ab42c2419010fbe5b0a7c94cd07525335deb8f0e0ab"
        },
        "downloads": -1,
        "filename": "votakvot-0.1.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6471a10550529b848c403fba9b352c37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<4.0.0,>=3.7.1",
        "size": 33383,
        "upload_time": "2021-11-02T15:44:19",
        "upload_time_iso_8601": "2021-11-02T15:44:19.143517Z",
        "url": "https://files.pythonhosted.org/packages/31/58/7927cdf5c200a0dd789444a97ae85e00927a1ddd2ded9a0e0c903fb260b3/votakvot-0.1.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a159a17e0838d7126ebe9578524fb13d52c35b99153ce766d5448a19c0a9bea5",
          "md5": "71e5c1b72e37ea916239cca9ac0031ad",
          "sha256": "ffc3c7492ff6615507ab64f525b32586f9677998580c12cb767de607a7bfb2b4"
        },
        "downloads": -1,
        "filename": "votakvot-0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "71e5c1b72e37ea916239cca9ac0031ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4.0.0,>=3.7.1",
        "size": 24779,
        "upload_time": "2021-11-02T15:44:20",
        "upload_time_iso_8601": "2021-11-02T15:44:20.415562Z",
        "url": "https://files.pythonhosted.org/packages/a1/59/a17e0838d7126ebe9578524fb13d52c35b99153ce766d5448a19c0a9bea5/votakvot-0.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c44c2b2eaf25ef4fb4b06b67f41b1980c76c44c60217fc1a0a6516488ec5af38",
          "md5": "2d7d88881a9720e05512a79e57a8fae0",
          "sha256": "a3dc2b5e7fc8878b8c78c356fc46e94cf945b8e37ed44e9e48a00f7fcaad67e6"
        },
        "downloads": -1,
        "filename": "votakvot-0.1.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d7d88881a9720e05512a79e57a8fae0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<4.0.0,>=3.7.1",
        "size": 30232,
        "upload_time": "2021-11-03T16:31:32",
        "upload_time_iso_8601": "2021-11-03T16:31:32.606928Z",
        "url": "https://files.pythonhosted.org/packages/c4/4c/2b2eaf25ef4fb4b06b67f41b1980c76c44c60217fc1a0a6516488ec5af38/votakvot-0.1.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "816531fcdd2fb50cf173d64ba756703ece48033f8a96ddd5c2f255db20223798",
          "md5": "4d4519a66ccb662e4ab07731fbc5c6b9",
          "sha256": "fdc5609b8cc2a723f9f9ccc0fe541acd8d1b4b4cc60522fc0ae64b4cf0bff4ef"
        },
        "downloads": -1,
        "filename": "votakvot-0.1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d4519a66ccb662e4ab07731fbc5c6b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4.0.0,>=3.7.1",
        "size": 28739,
        "upload_time": "2021-11-03T16:31:34",
        "upload_time_iso_8601": "2021-11-03T16:31:34.645597Z",
        "url": "https://files.pythonhosted.org/packages/81/65/31fcdd2fb50cf173d64ba756703ece48033f8a96ddd5c2f255db20223798/votakvot-0.1.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9133e88b0d271289299c7910dd546e8389cb421d0771064569b0d062d3d592b",
          "md5": "5a2d3428e1032553ad7edb1e3e6f1ffb",
          "sha256": "c97909591ae2b2667b96bd9f2d1ea2196823c3220b618163f48b25f3968e2493"
        },
        "downloads": -1,
        "filename": "votakvot-0.1.dev2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a2d3428e1032553ad7edb1e3e6f1ffb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<4.0.0,>=3.7.1",
        "size": 31542,
        "upload_time": "2021-11-25T11:51:41",
        "upload_time_iso_8601": "2021-11-25T11:51:41.337728Z",
        "url": "https://files.pythonhosted.org/packages/a9/13/3e88b0d271289299c7910dd546e8389cb421d0771064569b0d062d3d592b/votakvot-0.1.dev2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da705825c365599c1de331a329bb65918b0117b1d92fb74a3dcb815247054b43",
          "md5": "fcb0f9922a249855f85426a5d9c21697",
          "sha256": "b782ab0b84b4392d3f2c90a6a37e29f3c8a7ae5c1f3e554f76b677d9f1d1fa9c"
        },
        "downloads": -1,
        "filename": "votakvot-0.1.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "fcb0f9922a249855f85426a5d9c21697",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4.0.0,>=3.7.1",
        "size": 30024,
        "upload_time": "2021-11-25T11:51:42",
        "upload_time_iso_8601": "2021-11-25T11:51:42.942620Z",
        "url": "https://files.pythonhosted.org/packages/da/70/5825c365599c1de331a329bb65918b0117b1d92fb74a3dcb815247054b43/votakvot-0.1.dev2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "684829cf0dcfea14432066c9685adacc0eda33f9bdf30c681e6be73a823f1df7",
          "md5": "797fccb4cc10390e8c89ce73d55da67d",
          "sha256": "8475dabbc38940711502725f2c2e1842dd67d6b605eaee61cdbea875f08bc7c0"
        },
        "downloads": -1,
        "filename": "votakvot-0.1rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "797fccb4cc10390e8c89ce73d55da67d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<4.0.0,>=3.7.1",
        "size": 31531,
        "upload_time": "2022-08-29T12:02:11",
        "upload_time_iso_8601": "2022-08-29T12:02:11.026751Z",
        "url": "https://files.pythonhosted.org/packages/68/48/29cf0dcfea14432066c9685adacc0eda33f9bdf30c681e6be73a823f1df7/votakvot-0.1rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dd09c5cc6fa4f47eb55162541832ef2b367325c22a6a1291a296be00b3a6f8f",
          "md5": "138c8591086c2c5e83a0439af336ebdc",
          "sha256": "36fa78e431707ff5984ba84b9f6ef1492439ec6846af5ff908e08c133a1d76cd"
        },
        "downloads": -1,
        "filename": "votakvot-0.1rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "138c8591086c2c5e83a0439af336ebdc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4.0.0,>=3.7.1",
        "size": 29988,
        "upload_time": "2022-08-29T12:02:13",
        "upload_time_iso_8601": "2022-08-29T12:02:13.360885Z",
        "url": "https://files.pythonhosted.org/packages/4d/d0/9c5cc6fa4f47eb55162541832ef2b367325c22a6a1291a296be00b3a6f8f/votakvot-0.1rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "684829cf0dcfea14432066c9685adacc0eda33f9bdf30c681e6be73a823f1df7",
        "md5": "797fccb4cc10390e8c89ce73d55da67d",
        "sha256": "8475dabbc38940711502725f2c2e1842dd67d6b605eaee61cdbea875f08bc7c0"
      },
      "downloads": -1,
      "filename": "votakvot-0.1rc1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "797fccb4cc10390e8c89ce73d55da67d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<4.0.0,>=3.7.1",
      "size": 31531,
      "upload_time": "2022-08-29T12:02:11",
      "upload_time_iso_8601": "2022-08-29T12:02:11.026751Z",
      "url": "https://files.pythonhosted.org/packages/68/48/29cf0dcfea14432066c9685adacc0eda33f9bdf30c681e6be73a823f1df7/votakvot-0.1rc1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4dd09c5cc6fa4f47eb55162541832ef2b367325c22a6a1291a296be00b3a6f8f",
        "md5": "138c8591086c2c5e83a0439af336ebdc",
        "sha256": "36fa78e431707ff5984ba84b9f6ef1492439ec6846af5ff908e08c133a1d76cd"
      },
      "downloads": -1,
      "filename": "votakvot-0.1rc1.tar.gz",
      "has_sig": false,
      "md5_digest": "138c8591086c2c5e83a0439af336ebdc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<4.0.0,>=3.7.1",
      "size": 29988,
      "upload_time": "2022-08-29T12:02:13",
      "upload_time_iso_8601": "2022-08-29T12:02:13.360885Z",
      "url": "https://files.pythonhosted.org/packages/4d/d0/9c5cc6fa4f47eb55162541832ef2b367325c22a6a1291a296be00b3a6f8f/votakvot-0.1rc1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}