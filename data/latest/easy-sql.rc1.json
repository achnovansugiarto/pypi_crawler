{
  "info": {
    "author": "ksust",
    "author_email": "admin@ksust.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "easy_sql\n^^^^^^^^^^\nEasy to use python sql(for kb-mysql first)\n\nBased on SQLAlchemy\n\nQuick Start\n-----------\n**Installation**: pip install easy_sql\n\n1.config\n>>>>>>>>\nEdit conf/conf.yml\n::\n\n    mysql: # mysql config\n      url: mysql://root:password@127.0.0.1:3306/db # mysql server\n      encoding: utf-8\n      pool_size: 5 # pool size\n      echo: false # echo sql while executing\n\n2.demo-mysql\n>>>>>>>>>>>>>>>>>>\nTable `demo`:\n::\n\n    -- ----------------------------\n    -- Table structure for demo\n    -- ----------------------------\n    DROP TABLE IF EXISTS `demo`;\n    CREATE TABLE `demo`  (\n      `id` int(11) NOT NULL AUTO_INCREMENT,\n      `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL,\n      `data` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL,\n      `time` datetime(0) NULL DEFAULT NULL,\n      PRIMARY KEY (`id`) USING BTREE\n    ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin ROW_FORMAT = Dynamic;\n\n    -- ----------------------------\n    -- Records of demo\n    -- ----------------------------\n    INSERT INTO `demo` VALUES (1, 'ksust', '{}', '2020-09-29 15:44:57');\n    INSERT INTO `demo` VALUES (2, 'ksust', '{}', '2020-09-29 15:44:57');\n\ndemo-mysql:\n::\n\n    \"\"\"\n    demo: using EasyMySQLBase\n    \"\"\"\n    import datetime\n    from sqlalchemy import Column, Integer, String, DateTime, or_\n    from easy_sql.easy_mysql_dao_base import EasyMySQLDAOBase\n    from easy_sql.easy_util import EasyMySQLUtil\n\n    # required\n    EasyMySQLUtil.init('../conf/conf.yml')\n\n\n    class Demo(EasyMySQLUtil.map_base):\n        __tablename__ = 'demo'\n        id = Column(Integer, primary_key=True)\n        name = Column(String(255))\n        data = Column(String(255))\n        time = Column(DateTime())\n\n\n    # Demo DAO: to operate table 'demo'\n    class DemoDAO(EasyMySQLDAOBase):\n        def __init__(self):\n            # required\n            EasyMySQLDAOBase.__init__(self, Demo)\n\n\n    def curd_example():\n        \"\"\"\n        EasyMySQLUtil CURD\n        :return:\n        \"\"\"\n        demo_dao = DemoDAO()\n        demo = Demo()\n        demo.name = 'test'\n        demo.data = '{}'\n        demo.time = datetime.datetime.now()\n        # create\n        result = demo_dao.add(demo)\n        print('MySQLUtil create', result.__dict__)\n        # retrieve\n        data_list = demo_dao.find_all(or_(Demo.name == 'ksust', Demo.id >= 40))\n        print('MySQLUtil retrieve or_')\n        for data in data_list:\n            print(data.__dict__)\n        data = demo_dao.find_one(Demo.name == 'yg', Demo.id > 40)\n        print('MySQLUtil retrieve and_ -> one')\n        print(data.__dict__)\n        # update\n        result = demo_dao.update(Demo.name == 'yg', time=datetime.datetime.now())\n        print('MySQLUtil update', result)\n        # delete\n        result = demo_dao.delete(Demo.name == 'test')\n        print('MySQLUtil delete', result)\n\n\n    def session_example():\n        # select\n        demo_dao = DemoDAO()\n        cursor = demo_dao.session.execute('select * from demo')\n        result = cursor.fetchall()\n        print('session_example', result)\n\n\n    if __name__ == '__main__':\n        curd_example()\n        session_example()\n\n\n\n3.demo-mysql-util\n>>>>>>>>>>>>>>>>>>>>>>>>>\n::\n\n    \"\"\"\n    demo: using EasyMySQLUtil to CURD operation\n    \"\"\"\n    import datetime\n    from sqlalchemy import Column, Integer, String, DateTime, or_\n    from easy_sql.easy_util import EasyMySQLUtil\n\n    # required\n    EasyMySQLUtil.init('../conf/conf.yml')\n\n\n    class Demo(EasyMySQLUtil.map_base):\n        __tablename__ = 'demo'\n        id = Column(Integer, primary_key=True)\n        name = Column(String(255))\n        data = Column(String(255))\n        time = Column(DateTime())\n\n\n    def curd_example():\n        \"\"\"\n        EasyMySQLUtil CURD\n        :return:\n        \"\"\"\n        demo = Demo()\n        demo.name = 'test'\n        demo.data = '{}'\n        demo.time = datetime.datetime.now()\n        # create\n        result = EasyMySQLUtil.add(demo)\n        print('MySQLUtil create', result.__dict__)\n        # retrieve\n        data_list = EasyMySQLUtil.find_all(Demo, or_(Demo.name == 'ksust', Demo.id >= 40))\n        print('MySQLUtil retrieve or_')\n        for data in data_list:\n            print(data.__dict__)\n        data = EasyMySQLUtil.find_one(Demo, Demo.name == 'yg', Demo.id > 40)\n        print('MySQLUtil retrieve and_ -> one')\n        print(data.__dict__)\n        # update\n        result = EasyMySQLUtil.update(Demo, Demo.name == 'yg', time=datetime.datetime.now())\n        print('MySQLUtil update', result)\n        # delete\n        result = EasyMySQLUtil.delete(Demo, Demo.name == 'test')\n        print('MySQLUtil delete', result)\n\n\n    def session_example():\n        # select\n        cursor = EasyMySQLUtil.session.execute('select * from demo')\n        result = cursor.fetchall()\n        print('session_example', result)\n\n\n    if __name__ == '__main__':\n        curd_example()\n        session_example()\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ksust/easy_sql",
    "keywords": "",
    "license": "",
    "maintainer": "ksust",
    "maintainer_email": "admin@ksust.com",
    "name": "easy-sql",
    "package_url": "https://pypi.org/project/easy-sql/",
    "platform": "all",
    "project_url": "https://pypi.org/project/easy-sql/",
    "project_urls": {
      "Homepage": "https://github.com/ksust/easy_sql"
    },
    "release_url": "https://pypi.org/project/easy-sql/0.0.4/",
    "requires_dist": [
      "SQLAlchemy (==1.3.13)",
      "PyYAML (==5.3.1)"
    ],
    "requires_python": "",
    "summary": "easy to use mysql(kb)",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8374560,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f081b4999cd88802afd72a1cea27c96cd3068bd18caeff2ab80cfff26af6e96",
          "md5": "4ec1562d714c1f4f7400281bd5a2724e",
          "sha256": "ddbc409377fd87cba17bdc4e5c153b9f9053e298239b82081401b8a0a5fcda67"
        },
        "downloads": -1,
        "filename": "easy_sql-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ec1562d714c1f4f7400281bd5a2724e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6210,
        "upload_time": "2020-10-09T09:21:18",
        "upload_time_iso_8601": "2020-10-09T09:21:18.735787Z",
        "url": "https://files.pythonhosted.org/packages/6f/08/1b4999cd88802afd72a1cea27c96cd3068bd18caeff2ab80cfff26af6e96/easy_sql-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc79775b23747845a94f484c2c615af09ecbe59ae73d2800faa394e34fd93401",
          "md5": "de7c3bef3f9307cd4c51ae044d1e73b7",
          "sha256": "83c82964cc6c13fa917caaa446134e2917dfc468a7b45587e5690a5d15674801"
        },
        "downloads": -1,
        "filename": "easy_sql-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "de7c3bef3f9307cd4c51ae044d1e73b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4896,
        "upload_time": "2020-10-09T09:21:20",
        "upload_time_iso_8601": "2020-10-09T09:21:20.102577Z",
        "url": "https://files.pythonhosted.org/packages/dc/79/775b23747845a94f484c2c615af09ecbe59ae73d2800faa394e34fd93401/easy_sql-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f081b4999cd88802afd72a1cea27c96cd3068bd18caeff2ab80cfff26af6e96",
        "md5": "4ec1562d714c1f4f7400281bd5a2724e",
        "sha256": "ddbc409377fd87cba17bdc4e5c153b9f9053e298239b82081401b8a0a5fcda67"
      },
      "downloads": -1,
      "filename": "easy_sql-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ec1562d714c1f4f7400281bd5a2724e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6210,
      "upload_time": "2020-10-09T09:21:18",
      "upload_time_iso_8601": "2020-10-09T09:21:18.735787Z",
      "url": "https://files.pythonhosted.org/packages/6f/08/1b4999cd88802afd72a1cea27c96cd3068bd18caeff2ab80cfff26af6e96/easy_sql-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc79775b23747845a94f484c2c615af09ecbe59ae73d2800faa394e34fd93401",
        "md5": "de7c3bef3f9307cd4c51ae044d1e73b7",
        "sha256": "83c82964cc6c13fa917caaa446134e2917dfc468a7b45587e5690a5d15674801"
      },
      "downloads": -1,
      "filename": "easy_sql-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "de7c3bef3f9307cd4c51ae044d1e73b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4896,
      "upload_time": "2020-10-09T09:21:20",
      "upload_time_iso_8601": "2020-10-09T09:21:20.102577Z",
      "url": "https://files.pythonhosted.org/packages/dc/79/775b23747845a94f484c2c615af09ecbe59ae73d2800faa394e34fd93401/easy_sql-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}