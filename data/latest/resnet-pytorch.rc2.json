{
  "info": {
    "author": "Liu Changyu",
    "author_email": "liuchangyu1111@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\n# ResNet-PyTorch\n\n### Update (Feb 20, 2020)\n\nThe update is for ease of use and deployment.\n\n * [Example: Export to ONNX](#example-export-to-onnx)\n * [Example: Extract features](#example-feature-extraction)\n * [Example: Visual](#example-visual)\n\nIt is also now incredibly simple to load a pretrained model with a new number of classes for transfer learning:\n\n```python\nfrom resnet_pytorch import ResNet \nmodel = ResNet.from_pretrained('resnet18', num_classes=10)\n```\n\n### Update (February 2, 2020)\n\nThis update allows you to use NVIDIA's Apex tool for accelerated training. By default choice `hybrid training precision` + `dynamic loss amplified` version, if you need to learn more and details about `apex` tools, please visit https://github.com/NVIDIA/apex.\n\n### Overview\nThis repository contains an op-for-op PyTorch reimplementation of [Deep Residual Learning for Image Recognition](http://arxiv.org/abs/1512.03385).\n\nThe goal of this implementation is to be simple, highly extensible, and easy to integrate into your own projects. This implementation is a work in progress -- new features are currently being implemented.  \n\nAt the moment, you can easily:  \n * Load pretrained ResNet models \n * Use ResNet models for classification or feature extraction \n\n_Upcoming features_: In the next few days, you will be able to:\n * Quickly finetune an ResNet on your own dataset\n * Export ResNet models for production\n\n### Table of contents\n1. [About ResNet](#about-resnet)\n2. [Installation](#installation)\n3. [Usage](#usage)\n    * [Load pretrained models](#loading-pretrained-models)\n    * [Example: Classify](#example-classification)\n    * [Example: Extract features](#example-feature-extraction)\n    * [Example: Export to ONNX](#example-export-to-onnx)\n    * [Example: Visual](#example-visual)\n4. [Contributing](#contributing) \n\n### About ResNet\n\nIf you're new to ResNets, here is an explanation straight from the official PyTorch implementation: \n\nResnet models were proposed in \"Deep Residual Learning for Image Recognition\". Here we have the 5 versions of resnet models, \nwhich contains 5, 34, 50, 101, 152 layers respectively. Detailed model architectures can be found in Table 1. \n\n### Installation\n\nInstall from pypi:\n```bash\n$ pip3 install resnet_pytorch\n```\n\nInstall from source:\n```bash\n$ git clone https://github.com/Lornatang/ResNet-PyTorch.git\n$ cd ResNet-PyTorch\n$ pip3 install -e .\n``` \n\n### Usage\n\n#### Loading pretrained models\n\nLoad an resnet18 network:\n```python\nfrom resnet_pytorch import ResNet\nmodel = ResNet.from_name(\"resnet18\")\n```\n\nLoad a pretrained resnet18: \n```python\nfrom resnet_pytorch import ResNet\nmodel = ResNet.from_pretrained(\"resnet18\")\n```\n\nTheir 1-crop error rates on imagenet dataset with pretrained models are listed below.\n\n| Model structure | Top-1 error | Top-5 error |\n| --------------- | ----------- | ----------- |\n|  resnet18       | 30.24       | 10.92       |\n|  resnet34       | 26.70       | 8.58        |\n|  resnet50       | 23.85       | 7.13        |\n|  resnet101      | 22.63       | 6.44        |\n|  resnet152      | 21.69       | 5.94        |\n\n*Option B of resnet-18/34/50/101/152 only uses projections to increase dimensions.*\n\nFor results extending to the cifar10 dataset, see `examples/cifar`\n\n#### Example: Classification\n\nWe assume that in your current directory, there is a `img.jpg` file and a `labels_map.txt` file (ImageNet class names). These are both included in `examples/simple`. \n\nAll pre-trained models expect input images normalized in the same way,\ni.e. mini-batches of 3-channel RGB images of shape `(3 x H x W)`, where `H` and `W` are expected to be at least `224`.\nThe images have to be loaded in to a range of `[0, 1]` and then normalized using `mean = [0.485, 0.456, 0.406]`\nand `std = [0.229, 0.224, 0.225]`.\n\nHere's a sample execution.\n\n```python\nimport json\n\nimport torch\nimport torchvision.transforms as transforms\nfrom PIL import Image\n\nfrom resnet_pytorch import ResNet \n\n# Open image\ninput_image = Image.open(\"img.jpg\")\n\n# Preprocess image\npreprocess = transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n])\ninput_tensor = preprocess(input_image)\ninput_batch = input_tensor.unsqueeze(0)  # create a mini-batch as expected by the model\n\n# Load class names\nlabels_map = json.load(open(\"labels_map.txt\"))\nlabels_map = [labels_map[str(i)] for i in range(1000)]\n\n# Classify with ResNet18\nmodel = ResNet.from_pretrained(\"resnet18\")\nmodel.eval()\n\n# move the input and model to GPU for speed if available\nif torch.cuda.is_available():\n    input_batch = input_batch.to(\"cuda\")\n    model.to(\"cuda\")\n\nwith torch.no_grad():\n    logits = model(input_batch)\npreds = torch.topk(logits, k=5).indices.squeeze(0).tolist()\n\nprint(\"-----\")\nfor idx in preds:\n    label = labels_map[idx]\n    prob = torch.softmax(logits, dim=1)[0, idx].item()\n    print(f\"{label:<75} ({prob * 100:.2f}%)\")\n```\n\n#### Example: Feature Extraction \n\nYou can easily extract features with `model.extract_features`:\n```python\nimport torch\nfrom resnet_pytorch import ResNet \nmodel = ResNet.from_pretrained('resnet18')\n\n# ... image preprocessing as in the classification example ...\ninputs = torch.randn(1, 3, 224, 224)\nprint(inputs.shape) # torch.Size([1, 3, 224, 224])\n\nfeatures = model.extract_features(inputs)\nprint(features.shape) # torch.Size([1, 512, 1, 1])\n```\n\n#### Example: Export to ONNX  \n\nExporting to ONNX for deploying to production is now simple: \n```python\nimport torch \nfrom resnet_pytorch import ResNet \n\nmodel = ResNet.from_pretrained('resnet18')\ndummy_input = torch.randn(16, 3, 224, 224)\n\ntorch.onnx.export(model, dummy_input, \"demo.onnx\", verbose=True)\n```\n\n#### Example: Visual\n\n```text\ncd $REPO$/framework\nsh start.sh\n```\n\nThen open the browser and type in the browser address [http://127.0.0.1:10004/](http://127.0.0.1:10004/).\n\nEnjoy it.\n\n#### ImageNet\n\nSee `examples/imagenet` for details about evaluating on ImageNet.\n\n### Credit\n\n#### Deep Residual Learning for Image Recognition\n\n*Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun*\n\n##### Abstract\n\nDeeper neural networks are more difficult to train. We\npresent a residual learning framework to ease the training\nof networks that are substantially deeper than those used\npreviously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual\nnetworks are easier to optimize, and can gain accuracy from\nconsiderably increased depth. On the ImageNet dataset we\nevaluate residual nets with a depth of up to 152 layers—8×\ndeeper than VGG nets [41] but still having lower complexity. An ensemble of these residual nets achieves 3.57% error\non the ImageNet test set. This result won the 1st place on the\nILSVRC 2015 classification task. We also present analysis\non CIFAR-10 with 100 and 1000 layers.\nThe depth of representations is of central importance\nfor many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep\nresidual nets are foundations of our submissions to ILSVRC\n& COCO 2015 competitions1\n, where we also won the 1st\nplaces on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation.\n\n[paper](http://arxiv.org/abs/1512.03385) [code](https://github.com/KaimingHe/deep-residual-networks)\n\n```text\n@article{He2015,\n\tauthor = {Kaiming He and Xiangyu Zhang and Shaoqing Ren and Jian Sun},\n\ttitle = {Deep Residual Learning for Image Recognition},\n\tjournal = {arXiv preprint arXiv:1512.03385},\n\tyear = {2015}\n}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Lornatang/ResNet-PyTorch",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "resnet-pytorch",
    "package_url": "https://pypi.org/project/resnet-pytorch/",
    "platform": "",
    "project_url": "https://pypi.org/project/resnet-pytorch/",
    "project_urls": {
      "Homepage": "https://github.com/Lornatang/ResNet-PyTorch"
    },
    "release_url": "https://pypi.org/project/resnet-pytorch/0.2.0/",
    "requires_dist": [
      "torch"
    ],
    "requires_python": ">=3.6.0",
    "summary": "An ResNet implements of PyTorch.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6818985,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b79aacd87bced2ed90bcf6109063bd4c21867f57531b9a607191eddc335dea4",
          "md5": "778a296552ad006de78205904402c4a4",
          "sha256": "ed7adda01188896ebcab522d9c7bde523a600b69ea819c139b2fb0e536b7fa4b"
        },
        "downloads": -1,
        "filename": "resnet_pytorch-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "778a296552ad006de78205904402c4a4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5.0",
        "size": 17259,
        "upload_time": "2020-02-20T06:35:51",
        "upload_time_iso_8601": "2020-02-20T06:35:51.529845Z",
        "url": "https://files.pythonhosted.org/packages/4b/79/aacd87bced2ed90bcf6109063bd4c21867f57531b9a607191eddc335dea4/resnet_pytorch-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef1a3a371507c4b9d5f78def988485af7245eaded2e21cfca93d862a637eb086",
          "md5": "aa21a9d62a9de304e10ebd298c930868",
          "sha256": "fecee9f41fb2368dca2b42c0ff95521e61528d55ebf93ea287ef6523fd40fdeb"
        },
        "downloads": -1,
        "filename": "resnet_pytorch-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aa21a9d62a9de304e10ebd298c930868",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 9733,
        "upload_time": "2020-02-20T06:35:55",
        "upload_time_iso_8601": "2020-02-20T06:35:55.340944Z",
        "url": "https://files.pythonhosted.org/packages/ef/1a/3a371507c4b9d5f78def988485af7245eaded2e21cfca93d862a637eb086/resnet_pytorch-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "780863f61c49fba28416244c98a425ac180d3cbea15884c5d29fafd720ae89e6",
          "md5": "29afe215aa07750db64cfe0bf6840cfe",
          "sha256": "f95612bf4fedb89d54f3b9503889d1e4f9c1d68216ae51920d39d0d9eac3a01a"
        },
        "downloads": -1,
        "filename": "resnet_pytorch-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29afe215aa07750db64cfe0bf6840cfe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 13887,
        "upload_time": "2020-03-16T06:34:25",
        "upload_time_iso_8601": "2020-03-16T06:34:25.657223Z",
        "url": "https://files.pythonhosted.org/packages/78/08/63f61c49fba28416244c98a425ac180d3cbea15884c5d29fafd720ae89e6/resnet_pytorch-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04ecc0608ca4737a69631a1c78e9ba834ced47113f4e7321afa329e5aa9ef97d",
          "md5": "7f41e4854157869ad19f68e27532890e",
          "sha256": "ba8f228c847037cceaa8c0213c9c8bf0fd04c00f44687edb7cc636259f871315"
        },
        "downloads": -1,
        "filename": "resnet_pytorch-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f41e4854157869ad19f68e27532890e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 9827,
        "upload_time": "2020-03-16T06:34:27",
        "upload_time_iso_8601": "2020-03-16T06:34:27.569409Z",
        "url": "https://files.pythonhosted.org/packages/04/ec/c0608ca4737a69631a1c78e9ba834ced47113f4e7321afa329e5aa9ef97d/resnet_pytorch-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "780863f61c49fba28416244c98a425ac180d3cbea15884c5d29fafd720ae89e6",
        "md5": "29afe215aa07750db64cfe0bf6840cfe",
        "sha256": "f95612bf4fedb89d54f3b9503889d1e4f9c1d68216ae51920d39d0d9eac3a01a"
      },
      "downloads": -1,
      "filename": "resnet_pytorch-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "29afe215aa07750db64cfe0bf6840cfe",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 13887,
      "upload_time": "2020-03-16T06:34:25",
      "upload_time_iso_8601": "2020-03-16T06:34:25.657223Z",
      "url": "https://files.pythonhosted.org/packages/78/08/63f61c49fba28416244c98a425ac180d3cbea15884c5d29fafd720ae89e6/resnet_pytorch-0.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04ecc0608ca4737a69631a1c78e9ba834ced47113f4e7321afa329e5aa9ef97d",
        "md5": "7f41e4854157869ad19f68e27532890e",
        "sha256": "ba8f228c847037cceaa8c0213c9c8bf0fd04c00f44687edb7cc636259f871315"
      },
      "downloads": -1,
      "filename": "resnet_pytorch-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7f41e4854157869ad19f68e27532890e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 9827,
      "upload_time": "2020-03-16T06:34:27",
      "upload_time_iso_8601": "2020-03-16T06:34:27.569409Z",
      "url": "https://files.pythonhosted.org/packages/04/ec/c0608ca4737a69631a1c78e9ba834ced47113f4e7321afa329e5aa9ef97d/resnet_pytorch-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}