{
  "info": {
    "author": "Mohammad Razavi, Mohammad Reza Moghaddas",
    "author_email": "mrazavi64@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Topic :: Education :: Testing",
      "Topic :: Software Development :: Testing :: Traffic Generation"
    ],
    "description": "..\n  This description is automatically generated from README.org file.\n\nAvalon\n======\n\n``Avalon`` is a extendable scalable high-performance streaming data\ngenerator that can be used to simulate the real-time input for various\nsystems.\n\nInstallation\n------------\n\nTo install ``avalon`` with all of its dependencies yon can use ``pip``:\n\n.. code:: shell\n\n   pip install avalon-generator[all]\n\nAvalon supports a lot of command-line arguments, so you probably want to\nenable its `argcomplete <https://github.com/kislyuk/argcomplete>`__\nsupport for tab completion of arguments. Just run the following command\nfor a single use or add it to your ``~/.bashrc`` to preserve it for the\nfuture uses:\n\n.. code:: shell\n\n   eval \"$(avalon --completion-script=bash)\"\n\nAlso if you install Avalon on Ubuntu using PPA the command line auto\ncompletion will be enabled automatically.\n\nInstallation on Ubuntu\n~~~~~~~~~~~~~~~~~~~~~~\n\nThere is a\n`PPA <https://launchpad.net/~mrazavi/+archive/ubuntu/avalon>`__ for\nAvalon which you may prefer to use if you are using Ubuntu. You can\ninstall Avalon using the PPA with the following commands:\n\n.. code:: shell\n\n   sudo add-apt-repository ppa:mrazavi/avalon\n   sudo apt update\n   sudo apt install avalon\n\nUsage\n-----\n\nAt the most simple from you can name a ``model`` as the command line\nargument of ``avalon`` and it will produce data for the specified model\non the standard output. The following command uses the ``--textlog``\nshortcut to generate logs similar to `snort <https://www.snort.org/>`__\nIDS:\n\n.. code:: shell\n\n   avalon snort --textlog\n\nMultiple models could be used at the same time. You can also see the\navailable models by the following command:\n\n.. code:: shell\n\n   avalon --list-models\n\nThe default output format (without ``--textlog``) is ``json-lines``\nwhich output a JSON document on each line. Other formats like ``csv`` is\nalso supported. To see the supported formats you can use the ``--help``\nargument and checkout the options for ``--output-format``, or just\nenable auto-complete and press <tab> key to see the available options.\n\nBesides ``--output-format``, the output media could also be specified\nvia ``--output-media``. A lot of output mediums like ``file``, ``http``,\n``grpc``, ``kafka``, direct insert on ``sql`` databases are also\nsupported out of the box.\n\nAlso, the number and the rate of the outputs could be controlled via\n``--number`` and ``--rate`` arguments.\n\nFor high rates, you might want to utilize your multiple CPU cores. To do\nso, just prefix your model name with the number of instances you want to\nrun at the same time, e.g. ``10snort`` to run 10 ``snort`` instances\n(with 10 Python processes that could utilize up to 10 CPU cores).\n\nYou can utilize multiple models at the same time. You can also provide a\nratio for the output of each model, e.g. ``10snort1000 5asa20``. That\nmeans 10 instances of ``snort`` model and 5 instances of ``asa`` model\nwith the ratio 1000 output for ``snort`` producers to 20 for ``asa``\nproducers.\n\nThe other important parameter to archived high resource utilization is\nby increasing the batch size by ``--batch-size`` argument.\n\nAlso, ``--output-writers`` argument determines the simultaneous writes\nto the output media. So if your sink is a ``file`` or a ``http`` server\nor any other forms of mediums that supports concurrent writes it is\npossible to provide ``--output-writers`` to tune the parallelism.\n\nHere is an example that use multiple processes to write to a CSV file,\n10000 items per second.\n\n.. code:: shell\n\n   # You don't need to enter --output-media=file because\n   # Avalon will automatically infer it after you enter an\n   # argument such as --file-name\n   #\n   avalon 20snort 5asa \\\n       --batch-size=1000 --rate=10000 --number=1000000 --output-writers=25 \\\n       --output-format=headered-csv --file-name=test.csv\n\nAvalon command line supports many more options that you could explore\nthem via ``--help`` argument or auto-complete by pressing <tab> key in\nthe command line.\n\nArchitecture\n------------\n\nAvalon architecture consists of several abstractions that give it great\nflexibility:\n\nModel\n   Each model is responsible to generate a specific kind of data. For\n   example a model might generate data similar to logs of a specific\n   application or appliance while another model might generate network\n   flows or packets.\n\n   Model output is usually an unlimited iteration of Python\n   dictionaries.\n\nMapping\n   Mappings could transform data model for a different purpose. For\n   example one might want to use different key names in a JSON or\n   different column names in CSV or SQL database. You can specify a\n   chain of multiple mappings to achieve your goal.\n\nFormat\n   Each format (or formatter) is responsible for converting a batch of\n   model data to a specific format, e.g. JSON or CSV.\n\n   Format output is usually a string or bytes array, although other\n   types could also be used according to the output media.\n\nMedia\n   Each media is responsible for transferring the batched formatted data\n   to a specific data sink. For example it could write data to a file or\n   send it to a remote server via network.\n\nGeneric Extension\n   Generics, currently in Beta stage, are a brand new type of extensions\n   that gives the user ultimate flexibility to modify input arguments or\n   execute any tasks according to them.\n\nExtension\n---------\n\nAvalon supports third-party extensions. So, you can develop your own\nmodels, formats, etc. to generate data for your specific use cases or\nsend them to a sink that Avalon does not support out of the box.\n\nYou can also publish your developed extensions publicly if you think\nthey could benefit other users.\n\nMore information is available at `EXTENSIONS.org <https://github.com/admirito/avalon/blob/master/EXTENSIONS.org>`__.\n\nMappings\n~~~~~~~~\n\nAlthough developing and running an Avalon extension is as trivial as\ncreating a specific directory structure and running ``avalon`` command\nwith a specific ``PYTHONPATH`` environment variable, there is an even\nsimpler method that might comes handy when you want to use a\nuser-defined mapping.\n\nA mapping could modify the model output dictionary before being used by\nthe formatter. Avalon supports a couple of useful mappings out of the\nbox, but new mappings could also be defined in a simple Python script\nand passing the file path as a URL in the ``avalon`` command line.\n\nFor example, the following script if put in a ``mymap.py`` file could be\nused as a mapping:\n\n.. code:: python\n\n   # Any valid name for the class is acceptable.\n   class MyMap:\n       def map(self, item):\n           # Item is the dictionary generated by the models\n\n           # Rename \"foo\" key to \"bar\"\n           item[\"bar\"] = item.pop(\"foo\", None)\n\n           item[\"new\"] = \"a whole new key value\"\n\n           # Don't forget to reutrn the item\n           return item\n\n**NOTE**: Despite normal extension mappings which has to inherit from a\nspecific base class, the mappings passed as ``file://`` URLs to\n``avalon`` does not have such obligations.\n\nNow, the mapping could be passed to Avalon with ``--map`` as a URL:\n\n.. code:: shell\n\n   avalon --map=file:///path/to/mymap.py\n\nAvalon also supports passing multiple ``--map`` arguments and all the\nprovided mappings will be applied in the specified order. One particular\nuseful use-case is to define many simple mappings and combine them do\nachieve the desired goal.\n\nAlso using curly braces you can pass a mapping to only a specific model\nwhen combining multiple models. Here is an example:\n\n.. code:: python\n\n   # mymap.py will applied to the first snort, the internal jsoncolumn\n   # mapping will be applied to asa and the last snort will be used\n   # without any mappings.\n   avalon \"snort{file:///path/to/mymap.py} asa{jsoncolumn} snort\"\n\nEtymology\n---------\n\nThe ``Avalan`` name is based on the name of a legendary island featured\nin the Arthurian legend and it has nothing to do with the proprietary\n`Spirent\nAvalanche <https://www.spirent.com/products/avalanche-security-testing>`__\ntraffic generator.\n\nAuthors\n-------\n\n-  Mohammad Razavi\n-  Mohammad Reza Moghaddas\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/admirito/avalon",
    "keywords": "test,data generation,fake data,simulation",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "avalon-generator",
    "package_url": "https://pypi.org/project/avalon-generator/",
    "platform": null,
    "project_url": "https://pypi.org/project/avalon-generator/",
    "project_urls": {
      "Homepage": "https://github.com/admirito/avalon"
    },
    "release_url": "https://pypi.org/project/avalon-generator/1.1.0/",
    "requires_dist": [
      "requests",
      "argcomplete",
      "suds-community ; extra == 'all'",
      "SQLAlchemy ; extra == 'all'",
      "psycopg2 ; extra == 'all'",
      "clickhouse-connect ; extra == 'all'",
      "kafka-python ; extra == 'all'",
      "grpcio-tools ; extra == 'all'",
      "grpc-requests ; extra == 'all'",
      "grpcio-tools ; extra == 'grpc'",
      "grpc-requests ; extra == 'grpc'",
      "kafka-python ; extra == 'kafka'",
      "suds-community ; extra == 'soap'",
      "SQLAlchemy ; extra == 'sql'",
      "psycopg2 ; extra == 'sql'",
      "clickhouse-connect ; extra == 'sql'"
    ],
    "requires_python": "",
    "summary": "Extendable scalable high-performance streaming test data generator",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16349275,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52e26babf4201c25da900b25a4e94b53f3a19ca3a87c2db610de0f479619f150",
          "md5": "ffbec1c2b3efc7acd85159cc87b27f33",
          "sha256": "9c0a1a78948c88ed438157a9d4a9cbe0735aa8f19990bfdc539acddbc779f1e4"
        },
        "downloads": -1,
        "filename": "avalon_generator-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffbec1c2b3efc7acd85159cc87b27f33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 65031,
        "upload_time": "2022-12-26T16:00:39",
        "upload_time_iso_8601": "2022-12-26T16:00:39.946227Z",
        "url": "https://files.pythonhosted.org/packages/52/e2/6babf4201c25da900b25a4e94b53f3a19ca3a87c2db610de0f479619f150/avalon_generator-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71c489e716d22fc211613f398316b8cad7e61efcd058be0d7a7f621a4e2ac621",
          "md5": "a58e31e735c98fd88efc4c3a8858ecf9",
          "sha256": "929f0922805823518d190f8e85fbd9a9037a58c928973fc5dab232da9b828898"
        },
        "downloads": -1,
        "filename": "avalon-generator-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a58e31e735c98fd88efc4c3a8858ecf9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65283,
        "upload_time": "2022-12-26T16:00:41",
        "upload_time_iso_8601": "2022-12-26T16:00:41.851472Z",
        "url": "https://files.pythonhosted.org/packages/71/c4/89e716d22fc211613f398316b8cad7e61efcd058be0d7a7f621a4e2ac621/avalon-generator-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ff379c033edf39be3b22241d8de12e7598cc8377ffefd1d78333d47f3b3e244",
          "md5": "cfcd192bc2c5ac747bf0341d90dc0239",
          "sha256": "0e28631d1c315bbda051c2581c7309060e59daad0ca8d12aca5204079781e28f"
        },
        "downloads": -1,
        "filename": "avalon_generator-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfcd192bc2c5ac747bf0341d90dc0239",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 87528,
        "upload_time": "2023-01-08T14:01:20",
        "upload_time_iso_8601": "2023-01-08T14:01:20.685835Z",
        "url": "https://files.pythonhosted.org/packages/9f/f3/79c033edf39be3b22241d8de12e7598cc8377ffefd1d78333d47f3b3e244/avalon_generator-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f39516b940bde0b810783acfcadb0a84d52fa2621ddbafee9a17ac379ee09a51",
          "md5": "9e51c7097ceee79aef0fae2dbc026f74",
          "sha256": "b8b2fe9f55626aa53a37f11213f943830d55b47a5601d34e259cffdb835f5e7d"
        },
        "downloads": -1,
        "filename": "avalon-generator-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e51c7097ceee79aef0fae2dbc026f74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 76952,
        "upload_time": "2023-01-08T14:01:22",
        "upload_time_iso_8601": "2023-01-08T14:01:22.863478Z",
        "url": "https://files.pythonhosted.org/packages/f3/95/16b940bde0b810783acfcadb0a84d52fa2621ddbafee9a17ac379ee09a51/avalon-generator-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ff379c033edf39be3b22241d8de12e7598cc8377ffefd1d78333d47f3b3e244",
        "md5": "cfcd192bc2c5ac747bf0341d90dc0239",
        "sha256": "0e28631d1c315bbda051c2581c7309060e59daad0ca8d12aca5204079781e28f"
      },
      "downloads": -1,
      "filename": "avalon_generator-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cfcd192bc2c5ac747bf0341d90dc0239",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 87528,
      "upload_time": "2023-01-08T14:01:20",
      "upload_time_iso_8601": "2023-01-08T14:01:20.685835Z",
      "url": "https://files.pythonhosted.org/packages/9f/f3/79c033edf39be3b22241d8de12e7598cc8377ffefd1d78333d47f3b3e244/avalon_generator-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f39516b940bde0b810783acfcadb0a84d52fa2621ddbafee9a17ac379ee09a51",
        "md5": "9e51c7097ceee79aef0fae2dbc026f74",
        "sha256": "b8b2fe9f55626aa53a37f11213f943830d55b47a5601d34e259cffdb835f5e7d"
      },
      "downloads": -1,
      "filename": "avalon-generator-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9e51c7097ceee79aef0fae2dbc026f74",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 76952,
      "upload_time": "2023-01-08T14:01:22",
      "upload_time_iso_8601": "2023-01-08T14:01:22.863478Z",
      "url": "https://files.pythonhosted.org/packages/f3/95/16b940bde0b810783acfcadb0a84d52fa2621ddbafee9a17ac379ee09a51/avalon-generator-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}