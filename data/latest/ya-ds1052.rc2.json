{
  "info": {
    "author": "Abel Deuring",
    "author_email": "adeuring@gmx.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Topic :: System :: Hardware :: Hardware Drivers"
    ],
    "description": "# Remote control of Rigol DS1000E/D series digital oscilloscopes.\n\n## Example usage:\n\n    >>> import matplotlib.pyplot as plt\n    >>> from ds1052 import DS1052, PointsMode\n    >>> with DS1052() as dso:\n    ...     # Acquire the waveform of channel 1 in \"normal\" points mode\n    ...     # which returns 600 data points.\n    ...     waveform = dso.read_waveforms([1], PointsMode.normal)[0]\n    ...\n    >>> # Vertical scale and offset.\n    >>> waveform.v_scale\n    1.0\n    >>> waveform.v_offset\n    0.52\n    >>> # Timebase scale and offset.\n    >>> waveform.tb_scale\n    0.0005\n    >>> waveform.tb_offset\n    0.0\n    >>> # waveform.t is a numpy array with time axis values. 0 is the trigger\n    >>> # time; waveform.v is a numpy array with the voltage values.\n    >>> plt.plot(waveform.t, waveform.v)\n    [<matplotlib.lines.Line2D object at 0x7f8b8e075640>]\n    >>> plt.show()\n    >>>\n\nMost settings of the DS1000 oscilloscopes are available as properties:\n\n    >>> import ds1052\n    >>> dso = ds1052.DS1052()\n    >>> dso.open()\n    >>> dso.timebase_scale\n    0.0005\n    >>> dso.timebase_offset\n    0.0\n    >>> dso.trigger.edge.level\n    1.48\n    >>> dso.trigger.edge.coupling\n    <TriggerCoupling.dc: 'DC'>\n    >>> dso.channel[2].coupling\n    <ChannelCoupling.dc: 'DC'>\n    >>> dso.channel[2].scale\n    1.0\n    >>> dso.channel[2].offset\n    -3.52\n    >>> dso.channel[2].scale = 0.6\n    >>> dso.channel[2].scale\n    0.6\n\n    >>> # Measurement values are returned as tuples (value, qualifier).\n    >>> dso.channel[1].voltage_rms\n    (2.14, <MeasurementQualifier.value: ('value',)>)\n    >>> # MeasurementQualifier.less_than indicates that the DSO could make\n    >>> # a measurement with sufficient precision. (Settings of this example:\n    >>> # Channel 1 input is a 1kHz square wave; the sampling rate is 500k/s.\n    >>> # 500 samples per period are clearly not enough to measure the rise\n    >>> # time.)\n    >>> dso.channel[1].rise_time\n    (3e-05, <MeasurementQualifier.less_than: 'less than'>)\n\n    >>> # Finally, DS1052.close() should be called to unlock the keyboard.\n    >>> # (If DS1052 is used as a context manager, the close() call is made\n    >>> # when the context is left.)\n    >>> dso.close()\n\n## Aims of ya_ds1052\n\n1. Provide an easy to use remote control interface to DS1000E/D oscilloscopes.\n\n2. Provide, where possible, workarounds for the many quirks of the DS1000E/D,\nwhich have a, well, unconventional SCPI implementation.\nThe most glaring problem is that the DSOs do not implement the command `*OPC?`\n(operation complete command). This makes it sometimes difficult, but at\nleast cumbersome, to figure out when the change of a setting is eventually\napplied. This library tries, where possible, to implement checks if such changes\nhave been fully applied and when an operation can be performed without\nslowing down the performance too drastically. (Rigol's own Ultrascope\nsoftware sends SCPI commands with a minimum time distance of 0.12 seconds.\nThis makes some operations like a read-out of all settings really slow and\ndoes not seems to be necessary.)\n\n## Installation:\n\n    pip install ya_ds1052\n\nThis installs the additional libraries `numpy` and `aenum`.\n\nOne important dependency must be installed manually in many cases: An\nimplementation of the USBTMC layer. `ya_ds1052` works with three USBTMC\ndrivers:\n\n- The `usbtmc` driver of the Linux kernel. Usage of this driver requires\n  no additional Python module.\n\n- The Python package `python-usbtmc`. This package in turn needs the `PyUSB`\n  package. See http://alexforencich.com/wiki/en/python-usbtmc/start for more\n  details. Note that this package has not been updated since a longer time.\n\n- The Python package `PyVISA`, together with a suitable backend. `ya_ds1052`\n  is tested with the backends `pyvisa-py` (another Python package) and with\n  the National Instruments VISA library for Linux (a bit tricky to install\n  for recent Linux kernel versions).\n\n  Be aware that the USBTMC implementation of the DS1000E/D is not fully\n  standard compliant. The VISA backend must provide some workarounds for\n  the DS1000's quirks.\n\n  Run `pyvisa-info` to check which backend is detected by PyVISA.\n\nOn Linux it can be necessary to add a udev rule to give users access to\nthe device files for the DS1000 oscilloscope. Add a file named\n`45-ds1000.rules` to the directory `/etc/udev/rules.d/' with the following\ncontent:\n\n    SUBSYSTEMS==\"usb\", ACTION==\"add\", ATTRS{idVendor}==\"1ab1\", ATTRS{idProduct}==\"0588\", GROUP=\"users\", MODE=\"0660\"\n\n(Change the group name `users` to whatever suits your needs to manage access\nrights for different users.)\n\nThen run\n\n    udevadm control --reload-rules && udevadm trigger\n\nto activate the new rule. Ensure that you and other users who will use the\noscilloscope are members of the user group specified in the udev rule.\nIf you must add yourself or other users to the user group, remember that a\nnew group memebership is recognized after a new login, i.e., users must\nlogout and login again before access to the device files is possible.\n\n## Changelog\n\n### 0.1.2\n- New method DS1052.screenshot(): Retrieves a BMP image from the DS1052.\n- Property DS1052.channel[<ch>].filter_enabled: Raise DS1052PropertySetError\n  on attempts to set this property while the DS1052 is in \"stop\" mode.\n- Improved range check of DS1052.trigger.{edge,pulse,video}.level:\n  Only allow values in the range (-6 * v_scale .. 6 * v_scale) - v_offset\n  where v_scale and v_offset are the vertical scale/offset ot the tirgger\n  source.\n- Same check as above for DS1052.trigger.slope.voltage_level_lower\n  and DS1052.trigger.slope.voltage_level_upper.\n- classes TriggerModeSettingsEdge, TriggerModeSettingsPulse,\n  TriggerModeSettingsVideo, TriggerModeSettingsSlope,\n  TriggerModeSettingsAlternation, Trigger, Channel, _Channels, DS1052:\n  Methods get_config() and set_config() added.\n- New properties Channel.offset_range, Channel.trigger_level_range\n  Channel.scale_range\n- Property Channel.offset: Incorrect calculation of value limits fixed.\n\n### 0.1.1\nFirst public release",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/adeuring/ya_ds1052",
    "keywords": "",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ya-ds1052",
    "package_url": "https://pypi.org/project/ya-ds1052/",
    "platform": null,
    "project_url": "https://pypi.org/project/ya-ds1052/",
    "project_urls": {
      "Homepage": "https://gitlab.com/adeuring/ya_ds1052"
    },
    "release_url": "https://pypi.org/project/ya-ds1052/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Remote control of Rigol DS1000E/D oscilloscopes",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14580791,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2133074de3abcc3eb11970806c9413ae498729a2b7ef9fb846cdf9ff3cf3adc9",
          "md5": "8caefd7737efadbdeda44b95accf5e83",
          "sha256": "e62d66a8d3c5ae69e88e02474a03a4c302b48530be50e0ce6a8d771a44a7995b"
        },
        "downloads": -1,
        "filename": "ya_ds1052-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8caefd7737efadbdeda44b95accf5e83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 78201,
        "upload_time": "2022-07-12T17:11:35",
        "upload_time_iso_8601": "2022-07-12T17:11:35.369785Z",
        "url": "https://files.pythonhosted.org/packages/21/33/074de3abcc3eb11970806c9413ae498729a2b7ef9fb846cdf9ff3cf3adc9/ya_ds1052-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "820e82b5bd6fc43b23b272330e3b8d2c154b14b0013db268f6a9c03b3c534d89",
          "md5": "833fbd5f63a827b7987b5b5844b4fd02",
          "sha256": "b832334513dd40f10246cace07a2671d060ba7370909e0b678664abde1619ee5"
        },
        "downloads": -1,
        "filename": "ya_ds1052-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "833fbd5f63a827b7987b5b5844b4fd02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 90237,
        "upload_time": "2022-07-28T19:09:24",
        "upload_time_iso_8601": "2022-07-28T19:09:24.074451Z",
        "url": "https://files.pythonhosted.org/packages/82/0e/82b5bd6fc43b23b272330e3b8d2c154b14b0013db268f6a9c03b3c534d89/ya_ds1052-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "820e82b5bd6fc43b23b272330e3b8d2c154b14b0013db268f6a9c03b3c534d89",
        "md5": "833fbd5f63a827b7987b5b5844b4fd02",
        "sha256": "b832334513dd40f10246cace07a2671d060ba7370909e0b678664abde1619ee5"
      },
      "downloads": -1,
      "filename": "ya_ds1052-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "833fbd5f63a827b7987b5b5844b4fd02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 90237,
      "upload_time": "2022-07-28T19:09:24",
      "upload_time_iso_8601": "2022-07-28T19:09:24.074451Z",
      "url": "https://files.pythonhosted.org/packages/82/0e/82b5bd6fc43b23b272330e3b8d2c154b14b0013db268f6a9c03b3c534d89/ya_ds1052-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}