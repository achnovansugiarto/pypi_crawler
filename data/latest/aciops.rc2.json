{
  "info": {
    "author": "Chris Oberdalhoff",
    "author_email": "cober91130@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "ACIOps\n==============\nDescription\n--------------\n\nACIOps is a collection of my personal method/functions used in my programs. The module will return all the the requested\ninformation for you unformatted. Within this module you will find the following\ntools:\n\n+ APIC Login\n+ Subnet Finder\n+ View Tenants\n+ Vlans Pools\n+ Encapsulation Finder\n+ Access Policy Mappings\n+ Tenant vrfs\n+ Application Profiles\n+ Endpoint Groups\n+ Bridge Domains\n+ Endpoint Finder\n\n**Version 2.0 additions\n\n+ Create Tenant\n+ Create App Profile\n+ Create EPG\n+ Create BD (l3/l2)\n+ Routing Scope\n+ Create VRF\n+ Enable Unicast\n\nDepedency Modules\n__________\n\n+ xml.etree.ElementTree\n+ ipaddress\n+ collections\n+ json\n+ warnings\n+ request\n+ re\n\nUsage\n_____\n\n**Import**\n\n        >>>import ACIOperations.ACIOps as ops\n\nExamples\n---\nSome method can be run without any argument and some dont. The seed method is always the login() which produces the session\n\n**Example 1 (Authentication: )**\n\n            >>> call_class = ops.AciOps()\n            >>> login = call_class.login(apic=\"192.168.1.1\", username=\"JoeSmo\", password=\"helpme!\")\n            >>> print(call_class.session)\n            <requests.sessions.Session object at 0x00000253743CFB48>\n            >>>\n\n**Example 2 (Fetch VLAN Pools: )**\n\n            >>>call_class.vlan_pools()\n            defaultdict(<class 'list'>, {'Pool1': 'vlan-10-vlan-20', 'Pool2': 'vlan-1000-vlan-2000'}\n            >>> pools = call_class.vlan_pools()\n            >>> for k, v in pools.items():\n                    print(\"Pool: {}    Range: {}\".format(k, v))\n\n                    Pool: Pool1    Range: vlan-10-vlan-20\n                    Pool: Pool2    Range: vlan-1000-vlan-2000\n\n**Example 3 (Find Encap: )**\n\n            >>>find_encap = call_class.find_encap(vlan=\"2000\")\n            * Output omitted due to length\n            This will produce all access policies associated with an external fabric encapsulation\n\n**Example 4 (Policy Mappings:)**\n\n            >>> policy_maps = call_class.policy_mappings()\n            * Output omitted due to length\n            This will map vlan pools, AAEP, phydoms, routeddoms, vmmdoms and return to user.\n\n**Example 5 (Infrastructure Info: )**\n\n            >>> infra = call_class.infr(pod=1)\n            >>> print(infra)\n            ['Leaf101', 'N9K-C93180YC-EX', 'FDO21eddfrr', 'Leaf102', 'N9K-C93108TC-EX', 'FDO21rfeff', 'Spine101', 'N9K-C9336PQ', 'FDO2rffere']\n\n**Example 6 (Find Subnet: )**\n\n            >>> find_subnet = call_class.subnet_finder(subnet=\"10.1.1.1/24\")\n            >>> print(find_subnet)\n            ('10.1.1.1/24', 'Customer1', 'BD-VL100', 'Customer1-VRF', 'Customer1-l3out', 'yes', 'public,shared', 'flood', ['ANP-Web'], ['EPG-WebServer'])\n\n**Example 7 (View Tenants: )**\n\n            >>> tenants = call_class.view_tenants()\n            >>> print(tenants)\n            ['infra', 'Customer-1', 'common', 'Customer-2']\n            >>>\n\n**Example 8 (View Vrf: )**\n\n            >>> vrf = call_class.tenant_vrf(tenant=\"Customer-1\")\n            >>> print(vrf)\n            defaultdict(<class 'list'>, {'vrf': ['Customer-1']})\n            >>>\n\n**Example 9 (View Bridge Domains: )**\n\n            >>>call_class.view_bd(tenant=\"Example\")\n            ['L3BD', 'BDL3']\n            >>>\n\n**Example 9 (View App Profiles: )**\n\n            >>>call_class.view_app_profiles(tenant=\"Example\")\n            ['Web', 'None']\n\n**Example 10 (View EPG: )**\n\n            >>>call_class.view_epgs(tenant=\"Example\", app=\"Web\")\n            ['Servers']\n            >>>\n\n**Example 11 (Endpoint Tracker: )**\n\n            >>> endpoint = call_class.enpoint_tracker(endpoint=\"10.1.1.10\")\n            >>> print(endpoint)\n            Name: 00:50:56:A0:77:88\n            EP: 00:50:56:A0:77:88\n            Encapsulation: vlan-200\n            Location: uni/tn-Customer-1/ap-ANP-WEB/epg-EPG-WEB/cep-00:50:56:A0:77:88\n            IP: 10.1.1.10\n            >>>\n\nSend Operations\n=====\n\nDescription\n----\n**The AciOpsSend class enables you to send configurations to ACI. You can run it from you own program or just use**\n**the python console. Simple and easy methods inherited from our parent class in v1.0.0**\n\n**Example 1 (Create Tenant: )**\n\n            >>> call_class = ops.AciOpsSend(apic=\"192.168.1.1\", username=\"JoeSmo\", password=\"Help!\")\n            >>> create_tenant = call_class.create_tenant(tenant=\"Example\")\n            >>> call_class.view_tenants()\n            ['Example']\n            >>>\n\n**Example 2 (Create App Profile: )**\n\n            >>> create_app = call_class.create_app_profile(tenant=\"Example\", app=\"Web\")\n            >>> call_class.create_app_profile()\n            >>> call_class.create_app_profile(tenant=\"Example\")\n            (<Response [200]>, defaultdict(<class 'list'>, {'name': ['Web', 'None']}))\n            >>>\n\n**Example 3 (Create EPG: )**\n\n            >>> call_class.create_epg(tenant=\"Example\", app=\"Web\", epg=\"Servers\")\n            (<Response [200]>, defaultdict(<class 'list'>, {'name': ['Servers']}))\n            >>>\n\n**Example 4 (Create BD: )**\n\n            >>> call_class.create_bd_l3(tenant=\"Example\", bd=\"L3BD\", subnet=\"4.4.4.4/32\")\n            (<Response [200]>, defaultdict(<class 'list'>, {'name': ['L3BD']}))\n            >>> call_class.subnet_finder(subnet=\"4.4.4.4/32\")\n            ('4.4.4.4/32', 'Example', 'L3BD', 'vrf', 'None', 'yes', 'private', 'proxy', 'None', 'None')\n            >>>\n\n**Example 5 (Create vrf: )**\n\n            >>> call_class.create_vrf(tenant=\"Example\", vrf=\"vrf-1\")\n            (<Response [200]>, defaultdict(<class 'list'>, {'vrf': ['vrf-1']}))\n            >>>\n\n**Example 6 (Enable Unicast Route: )**\n\n            >>> call_class.enable_unicast(tenant=\"Example\", bd=\"L3BD\", enable=\"no\") **yes/no**\n            (<Response [200]>, '{\"fvBD\":{\"attributes\": {\"name\": \"L3BD\", \"unicastRoute\": \"no\"}}}')\n            >>>\n\n**Example 7 (Assign Vrf to BridgeDomain: )**\n\n            >>>call_class.vrf_to_bd(tenant=\"Example\", bd=\"BDL3\", vrf=\"vrf-1\")\n            (<Response [200]>, defaultdict(<class 'list'>, {'vrf': ['vrf-1']}))\n            >>>\n\n**Example 8 (Routing Scope: )**\n\n            >>> call_class.routing_scope(tenant=\"Example\", bd=\"BDL3\", scope=\"private\", subnet=\"4.4.4.4/32\") **share|public|shared***\n            (<Response [200]>, defaultdict(<class 'list'>, {'name': ['L3BD', 'BDL3']}), {'IP': 'uni/tn-Example/BD-BDL3/subnet-[4.4.4.4/32]',\n            'Tenant': 'Example', 'BD': 'BDL3', 'vrf': 'vrf-1', 'L3Out': 'None', 'Route Enable': 'yes', 'Scope': 'private', 'Uni Flood': 'proxy',\n            'APs': 'None', 'EPGs': 'None'})\n            >>>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cober2019/Network-Automation/tree/master/DataCenter%20(ACI)/ACIOperations",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ACIOps",
    "package_url": "https://pypi.org/project/ACIOps/",
    "platform": "",
    "project_url": "https://pypi.org/project/ACIOps/",
    "project_urls": {
      "Homepage": "https://github.com/cober2019/Network-Automation/tree/master/DataCenter%20(ACI)/ACIOperations"
    },
    "release_url": "https://pypi.org/project/ACIOps/2.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "ACIOps allows you to fetch basic ACI information.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7482006,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b460e53fa616537486824e40416f8b9538c806272de9b606010181b0e4872874",
          "md5": "41be3ea1d52e5b6cac47783210c564d1",
          "sha256": "28a997f578032727fb1154d0f26e9f6f69d54e0d6095da2af9b6339e1236441e"
        },
        "downloads": -1,
        "filename": "ACIOps-1.0.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "41be3ea1d52e5b6cac47783210c564d1",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 13641,
        "upload_time": "2020-06-11T20:36:40",
        "upload_time_iso_8601": "2020-06-11T20:36:40.745631Z",
        "url": "https://files.pythonhosted.org/packages/b4/60/e53fa616537486824e40416f8b9538c806272de9b606010181b0e4872874/ACIOps-1.0.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b43f81f87df1dbe5404456e2ebaf377eb2a698560042a12cfddfeef300eef67",
          "md5": "e3660c9306d4f241334b99e452f40584",
          "sha256": "1787e8027ea8865b34372546ecf2b9beb04b8f59b0481eb9fe2dd62352a3df16"
        },
        "downloads": -1,
        "filename": "ACIOps-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e3660c9306d4f241334b99e452f40584",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6878,
        "upload_time": "2020-06-11T20:36:43",
        "upload_time_iso_8601": "2020-06-11T20:36:43.144540Z",
        "url": "https://files.pythonhosted.org/packages/6b/43/f81f87df1dbe5404456e2ebaf377eb2a698560042a12cfddfeef300eef67/ACIOps-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f77dfcac9cfa884288e8267733c2c95ddc8f3890ba8a4c58652352e2c4acdc68",
          "md5": "e84d856a7170f80a6fb9b79723a22082",
          "sha256": "4f3d9ece4c5fd600a269027944959113f79048b69af3f7301f8885416c7aa948"
        },
        "downloads": -1,
        "filename": "ACIOps-2.0.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "e84d856a7170f80a6fb9b79723a22082",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 18130,
        "upload_time": "2020-06-15T18:10:22",
        "upload_time_iso_8601": "2020-06-15T18:10:22.359203Z",
        "url": "https://files.pythonhosted.org/packages/f7/7d/fcac9cfa884288e8267733c2c95ddc8f3890ba8a4c58652352e2c4acdc68/ACIOps-2.0.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07a53114199c05a15ce5b377cba810f33eff20939158d5a761d1b07779367a07",
          "md5": "74bfa185c56abd20a32dee45d5154509",
          "sha256": "49db9ed49eafcd015594922587d56cde3f0f51e8186773cd9bfd7f64e255f7b3"
        },
        "downloads": -1,
        "filename": "ACIOps-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "74bfa185c56abd20a32dee45d5154509",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9220,
        "upload_time": "2020-06-15T18:10:23",
        "upload_time_iso_8601": "2020-06-15T18:10:23.921235Z",
        "url": "https://files.pythonhosted.org/packages/07/a5/3114199c05a15ce5b377cba810f33eff20939158d5a761d1b07779367a07/ACIOps-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f77dfcac9cfa884288e8267733c2c95ddc8f3890ba8a4c58652352e2c4acdc68",
        "md5": "e84d856a7170f80a6fb9b79723a22082",
        "sha256": "4f3d9ece4c5fd600a269027944959113f79048b69af3f7301f8885416c7aa948"
      },
      "downloads": -1,
      "filename": "ACIOps-2.0.0-py3.7.egg",
      "has_sig": false,
      "md5_digest": "e84d856a7170f80a6fb9b79723a22082",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": ">=3.6",
      "size": 18130,
      "upload_time": "2020-06-15T18:10:22",
      "upload_time_iso_8601": "2020-06-15T18:10:22.359203Z",
      "url": "https://files.pythonhosted.org/packages/f7/7d/fcac9cfa884288e8267733c2c95ddc8f3890ba8a4c58652352e2c4acdc68/ACIOps-2.0.0-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07a53114199c05a15ce5b377cba810f33eff20939158d5a761d1b07779367a07",
        "md5": "74bfa185c56abd20a32dee45d5154509",
        "sha256": "49db9ed49eafcd015594922587d56cde3f0f51e8186773cd9bfd7f64e255f7b3"
      },
      "downloads": -1,
      "filename": "ACIOps-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "74bfa185c56abd20a32dee45d5154509",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9220,
      "upload_time": "2020-06-15T18:10:23",
      "upload_time_iso_8601": "2020-06-15T18:10:23.921235Z",
      "url": "https://files.pythonhosted.org/packages/07/a5/3114199c05a15ce5b377cba810f33eff20939158d5a761d1b07779367a07/ACIOps-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}