{
  "info": {
    "author": "Mateusz Kruk, Rafał Masalek",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# j-pet-format-converter\n## version 2.0.2\n### Author: Rafał Masełek, Mateusz Kruk\n### Email: rafal.maselek@ncbj.gov.pl, mateusz64.kruk@student.uj.edu.pl\n### Modifications: Wojciech Krzemien \n\nThis script enables converting Interfile files to DICOM file format and importing meta-data from external file.\n\n### Installation:\n**Prerequisites:**\n+ Python (vers. 3.X.X recommended)\n+ Numpy  (python library)\n+ pyDicom (python library)\n+ dicomgenerator\n+ setuptools >= 42\n+ wheel (python library)\n\nIf you use Debian/Ubuntu/Linux Mint you can install python3 using 'apt-get install' command:\n```\nsudo apt-get install python3 \n```\n\nTo install a package, type following:\n```\npip install JPET-format-converter\n```\n\nTo download the required modules, please run:\n```\npip install -r Requirements.txt\n```\nWhere \"Requirements.txt\" is in the repository.\n\n### Usage:\nPackage provides an API for converting Interfile file into Dicom files. Interfile is specified by **two files**:\n\n+ header file (.hdr), that has CASToRv3.1 keyset\n+ image file (specified in the header)\n\nTo convert a file/files using a command line, run the **converter.py** file, for example:\n```\npython3 converter.py header.hdr -o dicom.dcm\n```\n\nUsing a ```--help``` flag will show all available commands.\n\n### Viewing the results:\nThere are many applications to visualize images in DICOM files. Personally, I recommend using Amide:\n\nhttp://amide.sourceforge.net/\n\nTo open a .dcm file use the FILE menu:\\\nFile > Import File(specify) > DICOM 3.0 via (X)MedCon.\n\nAmide uses a very useful tool called [(X)MedCon](http://xmedcon.sourceforge.net/),\nwhich can be downloaded from project's website or system's repositories, and it can be used alone to open DICOM files\n(but Amide provides better visualization).\n\nTo install (X)MedCon on Debian/Ubuntu/Linux Mint from repositories:\n```\nsudo apt-get install xmedcon\n```\n\nIn order to open DICOM file from Terminal, use command:\n```\nxmedcon -f name_of_file.dcm\n```\n\n(X)MedCon has many other options and supported formats, see project's documentation for \ndetails.\n\n### binary2DICOM (deprecated)\nThis section talks about previous binary2DICOM module, made by Rafał Masałek. In this version it's still partially used by the module, but it's deprecated and does not work correctly. It can still convert raw binary data into a dicom file, but it doesn't have mandatory tags.\n\n**Usage example:**\nThis is an example command used to convert Gate output to DICOM format.\nFile with simulated data is called in this example **collimator_20**.\n>python3 binary2DICOM.py --meta meta.txt collimator_20 collimator_20-conv.dcm 256 256 256 -bpp 4 -int -bo little\n+ **python3 binary2DICOM.py** uses python3 to run the script\n+ **--meta meta.txt** specifies that external file with meta data is used; it is called 'meta.txt' and is located in the same directory as the binary2DICOM.py script\n+ **collimator_20** name of the binary image file (input file for script)\n+ **collimator_20-conv.dcm** name of the output file, note the '.dcm' extension\n+ **256 256 256** X, Y and Z(no of frames) dimensions of encoded images (size in pixels)\n+ **-bpp 4** defines that 4 bytes were used to encode every pixel of input data (if you don't know encoding type, then ask the maker of the input file)\n+ **-int** specifies that signed integers were used to encode input image (use '-uint' for unsigned integers)\n+ **-bo little** specifies the byte order used to encode binary image; supported are **little/big**\n\nNot all parameters are necessary, optional ones have default values. You can get more information by using **--help** flag.\n\n### Supported encodings:\nThe script is capable of reading binary images encoded using signed or unsigned integers, 1/2/4/8 bytes per pixel.\nIn the future it might be developed to manage file encoded using floating point numbers.\n\n### External meta data file:\nExternal file with metadata must have apropriate format (see meta.txt):\nYou have to specify: **group tag**, **element tag**, **VR** and **value**.\nAll these elements have to be separated using comma.\nString values need to be inside **'** characters.\nDot is used as a decimal delimiter.\nYou can write comments using hash symbol (#) -- following characters are ignored.\n\n### Using binary2DICOM as module:\nThe script can be used as a python module in external program. To use it you have to import binary2DICOM to your script:\n>from binary2DICOM import convert\n\nThen you have to call convert() method, providing special dictionary as an argument.\nThe dictionary must have the following structure:\n\n\n{'meta': (meta_data_file_path, STRING),\\\n'in_file': (input_data_file_path, STRING),\\\n'out_file': (output_data_file_path, STRING),\\\n'width': (INT),\\\n'height': (INT),\\\n'frames': (INT),\\\n'is_signed': (BOOL),\\\n'byte_order': ('little' OR 'big'),\\\n'bytes_per_pix': (INT),\\\n'is_float': (BOOL)}\n\nKey-value pairs in the dictionary correspond to input parameters.\nYou code should look like this:\n\n```convert({'meta': 'meta.txt', 'width': 256, 'is_signed': True, 'in_file': 'collimator_20', 'byte_order': 'little', 'height': 256, 'frames': 256, 'bytes_per_pix': 4, 'out_file': 'collimator_20-conv.dcm', 'is_float': False})```\n\nOf course you can store dictionary in a variable and pass this variable to the *convert()* function.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JPETTomography/j-pet-format-converter",
    "keywords": "JPET,interfile,dicom,format,converter",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "JPET-format-converter",
    "package_url": "https://pypi.org/project/JPET-format-converter/",
    "platform": "",
    "project_url": "https://pypi.org/project/JPET-format-converter/",
    "project_urls": {
      "Homepage": "https://github.com/JPETTomography/j-pet-format-converter"
    },
    "release_url": "https://pypi.org/project/JPET-format-converter/2.0.2/",
    "requires_dist": [
      "dicomgenerator",
      "numpy",
      "pyDicom",
      "pylint",
      "python-coveralls",
      "setuptools (>=42)",
      "wheel"
    ],
    "requires_python": "",
    "summary": "This is a interfile to dicom converter created by Mateusz Kruk and Rafal Maselek.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12806931,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f2cd2d963fe12ad7065722f39f6f90931e48454b4bcd5417eddfc59bcf07635",
          "md5": "41260c021a53fb04a08a6a501fd76896",
          "sha256": "d19520e3b8b92e69226af0093727ee41153e6673b20489e8dc8f7dfa9ea4e3c9"
        },
        "downloads": -1,
        "filename": "JPET_format_converter-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41260c021a53fb04a08a6a501fd76896",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5573,
        "upload_time": "2022-02-07T01:15:51",
        "upload_time_iso_8601": "2022-02-07T01:15:51.642922Z",
        "url": "https://files.pythonhosted.org/packages/6f/2c/d2d963fe12ad7065722f39f6f90931e48454b4bcd5417eddfc59bcf07635/JPET_format_converter-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9a1be64c3de4ee345be6213148f2200fb7b9e1d93df5577a260ab35c64b3e5f",
          "md5": "721dc9c2cae1fc5d059c58a81af7e02c",
          "sha256": "d7b1c2d846350a18e90fcb33fbb62e453bac8d927c2d727f2187865985992315"
        },
        "downloads": -1,
        "filename": "JPET-format-converter-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "721dc9c2cae1fc5d059c58a81af7e02c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7546,
        "upload_time": "2022-02-07T01:15:53",
        "upload_time_iso_8601": "2022-02-07T01:15:53.715066Z",
        "url": "https://files.pythonhosted.org/packages/d9/a1/be64c3de4ee345be6213148f2200fb7b9e1d93df5577a260ab35c64b3e5f/JPET-format-converter-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fab27d1299b0a713f1a5753af8adf62f72b4e008abce1d11514af16c62e973eb",
          "md5": "0cf8b4d6879cd8082cac6c3b25fa23f9",
          "sha256": "47148080732565b16a1c5ceedc1f26166128a8cade1188e4473dc997e06b00ed"
        },
        "downloads": -1,
        "filename": "JPET_format_converter-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0cf8b4d6879cd8082cac6c3b25fa23f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7803,
        "upload_time": "2022-02-07T01:21:10",
        "upload_time_iso_8601": "2022-02-07T01:21:10.948690Z",
        "url": "https://files.pythonhosted.org/packages/fa/b2/7d1299b0a713f1a5753af8adf62f72b4e008abce1d11514af16c62e973eb/JPET_format_converter-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfdc593617c3b3269defdfcc0d0285075c95d6cf5c00b6f83ea0b20cd7fbcc92",
          "md5": "69078235f6f191e55037cdd63d61d668",
          "sha256": "ddf494a3da9218ab3019a86c9149123f8d9a9d88669d1e94cefc52c869818b2e"
        },
        "downloads": -1,
        "filename": "JPET-format-converter-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "69078235f6f191e55037cdd63d61d668",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8081,
        "upload_time": "2022-02-07T01:21:12",
        "upload_time_iso_8601": "2022-02-07T01:21:12.593835Z",
        "url": "https://files.pythonhosted.org/packages/bf/dc/593617c3b3269defdfcc0d0285075c95d6cf5c00b6f83ea0b20cd7fbcc92/JPET-format-converter-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df8ea346dddb08c707c7cd836b67dd4eef6e0e0ed91bb7178875284ffda74cb1",
          "md5": "0e6fd70ea125b2fe8b9654eab290dd8a",
          "sha256": "293623da1b1796f89b1ae00390f8283ab8715d894b109584eee6f8f0f0976237"
        },
        "downloads": -1,
        "filename": "JPET_format_converter-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e6fd70ea125b2fe8b9654eab290dd8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7800,
        "upload_time": "2022-02-07T01:49:35",
        "upload_time_iso_8601": "2022-02-07T01:49:35.486178Z",
        "url": "https://files.pythonhosted.org/packages/df/8e/a346dddb08c707c7cd836b67dd4eef6e0e0ed91bb7178875284ffda74cb1/JPET_format_converter-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48755d1e9433e75a1ea756a4704b805fc653c4516f22c0ce6e335cd614cdc7d5",
          "md5": "24f7dbc83905bec132f15237f4381a9a",
          "sha256": "2e173da96dcd23e7529bee635b4ac41b94af002a5f616205074beb7a0aa9bcdf"
        },
        "downloads": -1,
        "filename": "JPET-format-converter-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "24f7dbc83905bec132f15237f4381a9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8100,
        "upload_time": "2022-02-07T01:49:37",
        "upload_time_iso_8601": "2022-02-07T01:49:37.503712Z",
        "url": "https://files.pythonhosted.org/packages/48/75/5d1e9433e75a1ea756a4704b805fc653c4516f22c0ce6e335cd614cdc7d5/JPET-format-converter-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df8ea346dddb08c707c7cd836b67dd4eef6e0e0ed91bb7178875284ffda74cb1",
        "md5": "0e6fd70ea125b2fe8b9654eab290dd8a",
        "sha256": "293623da1b1796f89b1ae00390f8283ab8715d894b109584eee6f8f0f0976237"
      },
      "downloads": -1,
      "filename": "JPET_format_converter-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e6fd70ea125b2fe8b9654eab290dd8a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7800,
      "upload_time": "2022-02-07T01:49:35",
      "upload_time_iso_8601": "2022-02-07T01:49:35.486178Z",
      "url": "https://files.pythonhosted.org/packages/df/8e/a346dddb08c707c7cd836b67dd4eef6e0e0ed91bb7178875284ffda74cb1/JPET_format_converter-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48755d1e9433e75a1ea756a4704b805fc653c4516f22c0ce6e335cd614cdc7d5",
        "md5": "24f7dbc83905bec132f15237f4381a9a",
        "sha256": "2e173da96dcd23e7529bee635b4ac41b94af002a5f616205074beb7a0aa9bcdf"
      },
      "downloads": -1,
      "filename": "JPET-format-converter-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "24f7dbc83905bec132f15237f4381a9a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8100,
      "upload_time": "2022-02-07T01:49:37",
      "upload_time_iso_8601": "2022-02-07T01:49:37.503712Z",
      "url": "https://files.pythonhosted.org/packages/48/75/5d1e9433e75a1ea756a4704b805fc653c4516f22c0ce6e335cd614cdc7d5/JPET-format-converter-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}