{
  "info": {
    "author": "patgolez10",
    "author_email": "patgolez10@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Description\n=====================================\n\n``assignhooks`` allows you to instrument your python code so that assignments to a variable can execute an action before and/or after the fact. For instance:\n\n.. code-block:: python\n  \n class SampleClass():\n\n    name = ''\n\n    def __assignpre__(self, lhs_name, rhs_name, rhs):\n        print('PRE: assigning %s = %s' % (lhs_name, rhs_name))\n        # modify rhs if needed before assignment\n        rhs.name = lhs_name\n        return rhs\n\n    def __assignpost__(self, lhs_name, rhs_name):\n        print('POST: lhs', self)\n        print('POST: lhs_name', lhs_name)\n        print('POST: rhs_name', rhs_name)\n        print('POST: assigning %s = %s' % (lhs_name, rhs_name))\n        self.name = lhs_name\n\n b = SampleClass()\n c = b\n\n\nThe first assignment would generate a call to `__assignpost__` as `b` still has no contents so there is no information on its class and hence no way to find out if it has an `__assignpre__` method. `__assignpost__` allows `b` to find out its name in this case. In the example above b contains a `SampleClass` instance whose name is initialized to `b` (the variable name)\n\nIn the second assignment, b is being assigned on the right-hand-side. As b is already existing we can check if its class provides an `__assignpre__` implementation. `b` knows is being assigned before the fact so we can used `__assignpre__` to check on the assignment or to provide the suitable value to be assigned (the return from `__assignpre__` method)\n\nApplications:\n===================\n\n* Can be used to add automatically names to created objects, for debug for instance:\n\n.. code-block:: python\n\n    class MyClass:\n        \n        def __init__(self, val, name=None):\n            self.val = val\n            self.name = name\n\n        def __assignpost__(self, lhs_name, rhs_name):\n            if self.name is None:\n                self.name = lhs_name\n\n   # will assign x.name as 'x' automatically\n   x = MyClass(val=4)\n   assert x.name == 'x'\n\n\n* Can be used to control what gets assigned when a specific instance of a class is assigned\n\n\nHow to use it:\n===================\n\nCheckout ``test.py`` and ``testmod.py`` under `examples` directory. ``test.py`` contains an example of how to instrument and use ``testmod.py`` module (the module being object of instrumentation).\n\n\n1. Automatic patch\n\nSuppose that there is a `testmod.py` that contains a module to instrument. Importing 'assignhooks' gives access to 'assignhooks.instrument.start()'. It should be called before the imports you want to instrument. To stop this behavior invoke `assignhooks.instrument.stop()`\n\n\nAssuming `testmod.py` contains:\n\n``<testmod.py>``\n\n.. code-block:: python\n\n class T():\n    def __assignpre__(self, lhs_name, rhs_name, rhs):\n        print('%s has been copied to %s' % (rhs_name, lhs_name))\n        return rhs\n\n b = T()\n c = b\n\nAnd ``<test.py>``\n\n.. code-block:: python\n\n import assignhooks\n\n assignhooks.instrument.start() # instrument from now on\n\n import testmod\n\n assignhooks.instrument.stop() # stop instrumenting\n\n\nIf executed:\n\n `$ python3 ./test.py`\n\nwill produce\n\n  `b has been copied to c`\n\n2. manually patch\n\n.. code-block:: python\n\n from assignhooks.patch import patch_module\n import testmod\n\n patch_module(test)\n\nInstall\n=======\nJust do:\n\n``pip3 install assignhooks``\n\n\nHow does it work\n================\n\nInternally assignhooks.magic replaces __import__ by a new version that after the import patches the module AST tree. It performs the following transformations:\n\n.. code-block:: python\n\n x = T()\n\ngets replaced by:\n\n.. code-block:: python\n\n if True:\n     x = T()\n     if hasattr(x, '__assignpost__'):\n         x.__assignpost__('x', 'T')\n\n\nand\n\n.. code-block:: python\n\n x = y\n\ngets replaced by:\n\n.. code-block:: python\n\n if True:\n     if hasattr(y, '__assignpre__'):\n         x = y.__assignpre__('x', 'y', y)\n     else:\n         x = y\n     if hasattr(x, '__assignpost__'):\n         x.__assignpost__('x', 'y')\n\n\nNOTE: that ``if True:`` is only used to group the statements while doing node replacements in the AST.\n\nNotes\n=====\n\n* Tested with `Python 3.8.7` on MacOS\n\nCredits\n=======\nBased on original code from `assign <https://pypi.org/project/assign/>`_ module from  **ryankung**. Mainly adapted for my needs to handle object creation. Changes include:\n\n- Original had an ``__assign__`` overload only valid on existing objects (like ``__assignpre__``). Added ``__assignpost__`` to handle object creation cases \n- Renamed ``__assign__`` to ``__assignpre__`` and added extra parameters\n\n\nKnown Issues\n=============\n1. Won't work under `REPL`\n2. May slow down import operation. The effect in run-time is the replacement of raw assignments with conditional + assignment + hook\n3. May fail when patching standard modules",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/patgolez10/assignhooks",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "assignhooks",
    "package_url": "https://pypi.org/project/assignhooks/",
    "platform": "any",
    "project_url": "https://pypi.org/project/assignhooks/",
    "project_urls": {
      "Homepage": "https://github.com/patgolez10/assignhooks"
    },
    "release_url": "https://pypi.org/project/assignhooks/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Instrument code to support obj.__preassign__ / obk.__postassign__ methods. Based on assign package by ryankung",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9459496,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6c0ebcfd0248284fa545b58d9e367ed38b06a771fab2c526a6aabacf3e851f1",
          "md5": "4bb832d57f4f2dfae227b20a8955dfe6",
          "sha256": "ece5f162775542c78cb459444f750f281839fa18cefb298773cfafa3dae1df2d"
        },
        "downloads": -1,
        "filename": "assignhooks-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4bb832d57f4f2dfae227b20a8955dfe6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7072,
        "upload_time": "2021-02-18T06:14:44",
        "upload_time_iso_8601": "2021-02-18T06:14:44.454524Z",
        "url": "https://files.pythonhosted.org/packages/e6/c0/ebcfd0248284fa545b58d9e367ed38b06a771fab2c526a6aabacf3e851f1/assignhooks-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef2d4f07674fdc076ecc68761324d3bdd6677f6f7ee5d9b5371dc96294f19472",
          "md5": "190a2b940acf123a9941d243dc10d430",
          "sha256": "53e156056d7d3ed59ee75e50cc5ac11bbc861e27913b6b3cfea66476993921b6"
        },
        "downloads": -1,
        "filename": "assignhooks-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "190a2b940acf123a9941d243dc10d430",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7350,
        "upload_time": "2021-02-18T22:00:00",
        "upload_time_iso_8601": "2021-02-18T22:00:00.914783Z",
        "url": "https://files.pythonhosted.org/packages/ef/2d/4f07674fdc076ecc68761324d3bdd6677f6f7ee5d9b5371dc96294f19472/assignhooks-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef2d4f07674fdc076ecc68761324d3bdd6677f6f7ee5d9b5371dc96294f19472",
        "md5": "190a2b940acf123a9941d243dc10d430",
        "sha256": "53e156056d7d3ed59ee75e50cc5ac11bbc861e27913b6b3cfea66476993921b6"
      },
      "downloads": -1,
      "filename": "assignhooks-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "190a2b940acf123a9941d243dc10d430",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7350,
      "upload_time": "2021-02-18T22:00:00",
      "upload_time_iso_8601": "2021-02-18T22:00:00.914783Z",
      "url": "https://files.pythonhosted.org/packages/ef/2d/4f07674fdc076ecc68761324d3bdd6677f6f7ee5d9b5371dc96294f19472/assignhooks-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}