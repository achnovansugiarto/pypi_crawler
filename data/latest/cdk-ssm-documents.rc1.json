{
  "info": {
    "author": "Amazon Web Services",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved",
      "Operating System :: OS Independent",
      "Programming Language :: JavaScript",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "# SSM Document CDK\n\nThis library provides a utility implement SSM Documents using code. The SSM Document objects can be used to print the document to YAML/JSON and allows you to simulate a document execution locally.\n\n## Problem Statement\n\nWriting SSM documents is cumbersome because interacting with the JSON or YAML documents provides little compile time support for errors. While the SSM UI provides a rich experience for creating documents, the SSM UI provides no ability to reuse steps across documents.\n\nTesting documents can only be performed by running the SSM Execution which is time-consuming. There is also no way to mock results in SSM Execution so developers are forced to create the necessary infrastructure in the AWS account prior to executing the SSM Document.\n\nExceptions are at times difficult to find or understand from the SSM Execution because sometimes the underlying issue is hidden and the error that is propagated is unrelated.\n\n## Solution\n\nThis library provides a high level abstraction of the SSM Documents where each step as well as the document itself are objects. The properties required for construction of these objects correspond to the settings applicable them making them intuitive to create.\nYou can use this library to simulate your document locally before deploying to SSM.\n\nThe library is implemented using JSII and can therefore be exported to other JSII supported languages (Java, Python).\n\nYou would use this if you want:\n\n1. Ability to test without deploying resources or running a real SSM execution on AWS\n2. Ability to reuse steps between docs by reusing available objects\n3. Build higher level logical groupings of reusable groups of steps (\"Patterns\")\n4. Easy interface for creating Docs\n5. Test existing documents by importing them from a file (or string) and simulate them locally\n\n## Usage\n\n### Document Creation\n\nTypescript usage (Execute AWS API Step)...\nThe below creates the AutomationDocument in an AWS CDK stack.\n\n```python\nimport { AutomationDocument } from './automation-document';\n\nexport class HelloWorld extends Stack {\n  constructor(app: Construct, id: string) {\n    super(app, id);\n\n    // Create AutomationDocument\n    const myDoc = new AutomationDocument(this, \"MyDoc\", {\n      documentFormat: DocumentFormat.JSON,\n      documentName: \"MyDoc\",\n      docInputs: [{name: \"MyInput\", defaultValue: \"a\", inputType: DataTypeEnum.STRING}]\n    });\n\n    // Define your steps...\n    myDoc.addStep(new PauseStep(this, \"MyPauseStep\", { name: \"MyPauseStep\" }));\n\n    myDoc.addStep(new ExecuteScriptStep(this, \"MyExecuteStep\", {\n      name: \"step1\",\n      handlerName: \"my_func\",\n      language: ScriptLanguage.PYTHON,\n      fullPathToCode: resolve(\"test/test_file.py\"),\n      // OR .inlineCode(\"def my_func(args, context):\\n  return {'MyReturn': args['MyInput'] + '-suffix'}\\n\")\n      outputs: [{\n        outputType: DataTypeEnum.STRING,\n        name: \"MyFuncOut\",\n        selector: \"$.Payload.MyReturn\"\n      }],\n      inputs: [\"MyInput\"]\n    }));\n  }\n}\n```\n\n### Document JSON/YAML Export as YAML/JSON\n\nYou can deploy the above document using CDK.\nTo print the above document object as a JSON (or YAML), do the following:\n\n```python\nconst myDocJson = myDoc.print(); // Print YAML by setting the documentFormat to YAML\n```\n\n### Document Simulation\n\nTo run the document object in simulation mode, use the below. Simulation mode does NOT hit the SSM API, rather it mimics the execution that will happen in an SSM execution. The run happens locally and allows you to mock the calls to external services (AWS APIs for example) or to invoke those services using your local credentials.\n\n```python\nimport { Simulation } from './simulation';\n\nconst myDocJson = Simulation.ofAutomation(myDoc, {}).simulate({ MyInput: \"FooBar\" });\n```\n\n## Patterns (High-Level Constructs)\n\nIn typical CDK style, you can assemble often used groups of steps into higher level Constructs.\n\nConsider if you typically create AutomationDocuments that start with logging the time and end with logging the total time taken. You can create a high-level Automation Document and extend that when you implement an Automation.\n\nSee the `TimedDocument` class to see such implementation.\n\nOr consider the case of multiple steps that are always run together such as rebooting and instance and waiting for it to be active.\n\nThe below example is copied from the `RebootInstanceAndWait` class:\n\n```python\nexport class RebootInstanceAndWait extends CompositeAutomationStep {\n\n  readonly reboot: AwsApiStep;\n  readonly describe: WaitForResourceStep;\n\n  constructor(scope: Construct, id: string, instanceId: IStringVariable) {\n    super(scope, id);\n    this.reboot = new AwsApiStep(this, 'RebootInstances', {\n      service: 'ec2',\n      pascalCaseApi: 'RebootInstances',\n      apiParams: { InstanceIds: [instanceId] },\n      outputs: [],\n    });\n    this.describe = new WaitForResourceStep(this, 'DescribeInstances', {\n      service: 'ec2',\n      pascalCaseApi: 'DescribeInstances',\n      apiParams: { InstanceIds: [instanceId] },\n      selector: '$.Reservations[0].Instances[0].State.Name',\n      desiredValues: ['running'],\n    });\n  }\n\n  addToDocument(doc: AutomationDocumentBuilder): void {\n    doc.addStep(this.reboot);\n    doc.addStep(this.describe);\n  }\n}\n```\n\nNow, you can use `RebootInstanceAndWait` as a step in a document and the child steps will be included.\n\n## Existing Documents\n\nDo you have an existing document that you want to convert to code and/or test locally using the simulation?\n\n### Import Existing Document\n\nHere is an example of how you can import an existing document and then simulate it locally with mocked AWS resources:\n\n```python\n// Initialize Mocks\nconst sleeper = new MockSleep();\nconst awsInvoker = new MockAwsInvoker();\nawsInvoker.whenThen(\n    // when invoked with...\n    {awsApi: 'listBuckets', awsParams: {}, service: 'S3'},\n    // then response with...\n    {Owner: {ID: \"BUCKET_ID\"}})\n\n// ======> Create document from file <=======\nconst stack: Stack = new Stack();\nconst myAutomationDoc = StringDocument.fromFile(stack, \"MyAutomationDoc\", 'test/myAutomation.json', {\n                                                                        // ======================\n});\n\n// Execute simulation\nconst simOutput = Simulation.ofAutomation(myAutomationDoc, {\n  sleepHook: sleeper,\n  awsInvoker: awsInvoker\n}).simulate({});\n\n// Assert simulation result\nassert.deepEqual(awsInvoker.previousInvocations, [\n    { awsApi: 'listBuckets', awsParams: {}, service: 'S3' }]);\nassert.deepEqual(sleeper.sleepMilliInvocations, [3000]);\nassert.deepEqual(simOutput.outputs['simulationSteps'], ['MySleep', 'GetBucketId']);\n```\n\n### Import Existing Steps\n\nYou can also grab a string step (or steps) and import them as CDK step constructs.\nThis can be used to convert existing documents into CDK with each step defined separately.\nDoing so will allow you do modify steps and reuse them in other documents.\n\nHere's a simple example of a sleep step copy and pasted from its original yaml:\n\n```python\nStringStep.fromYaml(this, `\n    name: sleep\n    action: aws:sleep\n    inputs:\n      Duration: PT0M\n`, {});\n```\n\nThe above will return the CDK construct SleepStep.\n\n## What is Planned?\n\nThis library currently contains AutomationDocument steps.\n\nAlso planned is the ability to run Command documents.\n\nStay tuned!\n\n## Security\n\nSee [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.\n\n## License\n\nThis project is licensed under the Apache-2.0 License.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cdklabs/cdk-ssm-documents.git",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cdk-ssm-documents",
    "package_url": "https://pypi.org/project/cdk-ssm-documents/",
    "platform": null,
    "project_url": "https://pypi.org/project/cdk-ssm-documents/",
    "project_urls": {
      "Homepage": "https://github.com/cdklabs/cdk-ssm-documents.git",
      "Source": "https://github.com/cdklabs/cdk-ssm-documents.git"
    },
    "release_url": "https://pypi.org/project/cdk-ssm-documents/0.0.12/",
    "requires_dist": [
      "aws-cdk-lib (<3.0.0,>=2.0.0)",
      "constructs (<11.0.0,>=10.0.5)",
      "jsii (<2.0.0,>=1.58.0)",
      "publication (>=0.0.3)"
    ],
    "requires_python": "~=3.7",
    "summary": "cdk-ssm-documents",
    "version": "0.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14356400,
  "releases": {
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01c45a56c79448cf8063f2587a527bc237c545ceea0c20c96d8b157cf1c8ef93",
          "md5": "902ec94aa8599d640619892d993d61aa",
          "sha256": "bb1c16a004a663de64e76dccf793c9142dd6252a34fa901da2956019d92fd184"
        },
        "downloads": -1,
        "filename": "cdk_ssm_documents-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "902ec94aa8599d640619892d993d61aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 13855018,
        "upload_time": "2022-07-06T21:36:25",
        "upload_time_iso_8601": "2022-07-06T21:36:25.751832Z",
        "url": "https://files.pythonhosted.org/packages/01/c4/5a56c79448cf8063f2587a527bc237c545ceea0c20c96d8b157cf1c8ef93/cdk_ssm_documents-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d015754debd84bbde04edfbef5c725c45f61a10033fb7efa60a20b05a3c567b",
          "md5": "eec7729803ab32c0d1853340cef1ca60",
          "sha256": "45f6f19be7d39bc5600807c51ad2b8266e4480e0bdabc1119b3c1a4b3cf793cc"
        },
        "downloads": -1,
        "filename": "cdk-ssm-documents-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "eec7729803ab32c0d1853340cef1ca60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 13855580,
        "upload_time": "2022-07-06T21:36:29",
        "upload_time_iso_8601": "2022-07-06T21:36:29.951702Z",
        "url": "https://files.pythonhosted.org/packages/3d/01/5754debd84bbde04edfbef5c725c45f61a10033fb7efa60a20b05a3c567b/cdk-ssm-documents-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01c45a56c79448cf8063f2587a527bc237c545ceea0c20c96d8b157cf1c8ef93",
        "md5": "902ec94aa8599d640619892d993d61aa",
        "sha256": "bb1c16a004a663de64e76dccf793c9142dd6252a34fa901da2956019d92fd184"
      },
      "downloads": -1,
      "filename": "cdk_ssm_documents-0.0.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "902ec94aa8599d640619892d993d61aa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.7",
      "size": 13855018,
      "upload_time": "2022-07-06T21:36:25",
      "upload_time_iso_8601": "2022-07-06T21:36:25.751832Z",
      "url": "https://files.pythonhosted.org/packages/01/c4/5a56c79448cf8063f2587a527bc237c545ceea0c20c96d8b157cf1c8ef93/cdk_ssm_documents-0.0.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d015754debd84bbde04edfbef5c725c45f61a10033fb7efa60a20b05a3c567b",
        "md5": "eec7729803ab32c0d1853340cef1ca60",
        "sha256": "45f6f19be7d39bc5600807c51ad2b8266e4480e0bdabc1119b3c1a4b3cf793cc"
      },
      "downloads": -1,
      "filename": "cdk-ssm-documents-0.0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "eec7729803ab32c0d1853340cef1ca60",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.7",
      "size": 13855580,
      "upload_time": "2022-07-06T21:36:29",
      "upload_time_iso_8601": "2022-07-06T21:36:29.951702Z",
      "url": "https://files.pythonhosted.org/packages/3d/01/5754debd84bbde04edfbef5c725c45f61a10033fb7efa60a20b05a3c567b/cdk-ssm-documents-0.0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}