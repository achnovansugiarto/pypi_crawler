{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 3"
    ],
    "description": "lazystore\n#########\n\n``lazystore`` is a Python package that allows the user to declare objects and\nrelationships between them without really instantiating them. Instantiation\nhappens on demand when the user creates a store and asks for some objects.\n\n\nInstall\n=======\n\n.. code:: bash\n\n    pip install lazystore\n\n\nUsage\n=====\n\n``lazystore`` has two different types of stores:\n\n1. ``SpecStore``: which will hold \"specifications\" of objects. Those\n   specifications will contain information necessary for later instantiation of\n   objects.\n\n2. ``Store``: which will hold instantiated objects. Each instantiated object is\n   called an \"entry\" of the store.\n\nIn order to use ``lazystore`` you must use both types of stores. The first to\ndeclare the entries and the second to create the respective instances.\n\nCreating the spec store\n-----------------------\n\nAfter importing ``lazystore``::\n\n    >>> import lazystore\n\nWe create the spec store by calling the constructor like below::\n\n    >>> specs = lazystore.SpecStore()\n\nWith the spec store in place, we can begin declaring entries::\n\n    >>> specs.Person('john', name='John Doe')\n    Person('john')\n\n    >>> specs.Person('jane', name='Jane Doe')\n    Person('jane')\n\nOn the lines above:\n\n- We are declaring two entries of type ``Person``.\n\n- The id of such entry is passed as the first positional argument (``'john'``).\n  The id does not have to be a string: any hashable value is valid. The\n  combination of entry type and entry id must be unique across the spec store.\n\n- The rest of the arguments (positional and keyword) belong to the\n  specification for this entry (we will see later that those arguments are used\n  to instantiate the entry).\n\nYou can reference the entry by using the same syntax but using only the id\nargument. For example, we are referencing John's entry in the following::\n\n    >>> specs.Person('john')\n    Person('john')\n\nBoth calls (with full spec or only referencing) return the same type of object,\na ``ValuePromise``. This type implements ``__getattr__``, ``__getitem__``, and\n``__call__`` in such a way that you can use the promised value as if it was\nusing the real object::\n\n\n    >>> dialog = [\n    ...    specs.Person('john').say('Hello! My name is John.'),\n    ...    specs.Person('jane').say('Nice to meet you!'),\n    ... ]\n    >>> dialog\n    [Person('john').say('Hello! My name is John.'), Person('jane').say('Nice to meet you!')]\n\nNote that no instantiation has taken place yet::\n\n    >>> type(dialog[0])\n    <class 'lazystore._lazystore.ValuePromise'>\n\n\nCreating resolvers\n------------------\n\nIn order to know how to instantiate a spec, we need to tell ``lazystore`` what\nis the resolver for the respective entry type. The resolver for an entry type\nmust be a callable that accepts all positional and keyword arguments passed to\nthe spec store when creating the spec.\n\nThe first thing to do is to create a registry, which will hold the resolvers::\n\n    >>> registry = lazystore.Registry()\n\nThen we can define resolvers via ``registry.add_resolver`` or the decorator\n``registry.resolver``::\n\n    >>> @registry.resolver('Person')\n    ... class Person:\n    ...     def __init__(self, store, name):\n    ...         print(f'***Instantiating {name}***')\n    ...         self.name = name\n    ...\n    ...     def say(self, line):\n    ...         return f'{self.name}: {line}'\n\n\nNote that the resolver can be any type of callable: it could be a function,\nmethod, class or any other object that implements the ``__call__`` method. In\nour example, since we want our generated object to have the method ``say()``,\nwe defined it as a class.\n\nWhile this is a very simple example, resolvers can be very complex, they could\nmake requests for creating database records and perform other necessary\noperations. With resolvers, it is possible to encapsulate the \"imperative\" part\nof creating an entry and allow definition of entry specs and relationships\nbetween them in a more declarative way.\n\nNote that the first positional parameter (discarding ``self``) of\n``Person.__init__`` is ``store`` which will contain a reference to the store\nwhere the entry will be kept. The remaining parameters are what is expected to\nbe received from specs created for the entry type \"Person\".\n\n\nCreating the store and instantiating entries\n--------------------------------------------\n\nNow that we have both ``specs`` and ``registry``, we can create a store with::\n\n    >>> store = lazystore.Store(registry, specs)\n\nInstantiation is done by \"resolving\" value promises::\n\n    >>> john = store.resolve(specs.Person('john'))\n    ***Instantiating John Doe***\n    >>> john.say('Hi, there!')\n    'John Doe: Hi, there!'\n\nYou can use the ``__getattr__`` shortcut as well. The following is equivalent\nto the code above::\n\n    >>> john = store.Person('john')\n    >>> john.say('Hi, there!')\n    'John Doe: Hi, there!'\n\nNote that entries are cached in the store. The same object is returned for the\nsame combination of entry type and entry id::\n\n    >>> store.Person('john') is john\n    True\n\nThe method ``resolve()`` can accept different forms of objects. In the\nfollowing example, we use the ``dialog`` list created before::\n\n    >>> store.resolve(dialog)\n    ***Instantiating Jane Doe***\n    ['John Doe: Hello! My name is John.', 'Jane Doe: Nice to meet you!']\n\n(Note that Jane is instantiated only now, when it was needed. John was already\ninstantiated, so the cached value was returned).\n\nIn fact, ``resolve()`` can recurse into lists, tuples and dictionaries. In the\nfollowing example we create a dictionary representing a family::\n\n    >>> family_spec = {\n    ...     'father': specs.Person('john'),\n    ...     'mother': specs.Person('jane'),\n    ...     'children': (\n    ...         specs.Person('johnny'),\n    ...         specs.Person('jannet', name='Jannet Doe'),\n    ...     ),\n    ... }\n\nWe purposefully used only the reference for Johnny to show that the order the\nspecs are define does not matter. We define it now::\n\n    >>> specs.Person('johnny', name='John Doe Junior')\n    Person('johnny')\n\nWith all specs ready, we can get the resolved value::\n\n    >>> family = store.resolve(family_spec)\n    ***Instantiating John Doe Junior***\n    ***Instantiating Jannet Doe***\n\n    >>> family['father'].name\n    'John Doe'\n\n    >>> family['mother'].name\n    'Jane Doe'\n\n    >>> [c.name for c in family['children']]\n    ['John Doe Junior', 'Jannet Doe']\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/guludo/lazystore",
    "keywords": "lazy",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lazystore",
    "package_url": "https://pypi.org/project/lazystore/",
    "platform": "",
    "project_url": "https://pypi.org/project/lazystore/",
    "project_urls": {
      "Homepage": "https://github.com/guludo/lazystore"
    },
    "release_url": "https://pypi.org/project/lazystore/0.1.0/",
    "requires_dist": [
      "coverage (~=6.2) ; extra == 'dev'",
      "mypy (>=0.931<1) ; extra == 'dev'",
      "pytest (~=6.2) ; extra == 'dev'",
      "pytest-doctestplus (~=0.11.0) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Store of values created on demand.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12556048,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81067f6e140d1e7439f395fd12bd4e7b882edb17693f102d8f73bd3c16d01f86",
          "md5": "cc33b06914d9694a3957213deb0b1a4a",
          "sha256": "317ab435cc13bd887ba2d0b93e48b4347e31e71da0e75ef2cf6d77d99aa5389d"
        },
        "downloads": -1,
        "filename": "lazystore-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc33b06914d9694a3957213deb0b1a4a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13951,
        "upload_time": "2022-01-13T00:51:24",
        "upload_time_iso_8601": "2022-01-13T00:51:24.716286Z",
        "url": "https://files.pythonhosted.org/packages/81/06/7f6e140d1e7439f395fd12bd4e7b882edb17693f102d8f73bd3c16d01f86/lazystore-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e7c73c22da840be1f2ac9152afd2c9478b8deba6abd1c223ac754468225d8a4",
          "md5": "8feb3c06e5dfd5279fe367e758a2588d",
          "sha256": "91bdd8ea1601021519269fcfeeaaaabbbf1a14f5bc4774480afb3397ee743119"
        },
        "downloads": -1,
        "filename": "lazystore-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8feb3c06e5dfd5279fe367e758a2588d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15364,
        "upload_time": "2022-01-13T00:51:26",
        "upload_time_iso_8601": "2022-01-13T00:51:26.252059Z",
        "url": "https://files.pythonhosted.org/packages/8e/7c/73c22da840be1f2ac9152afd2c9478b8deba6abd1c223ac754468225d8a4/lazystore-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81067f6e140d1e7439f395fd12bd4e7b882edb17693f102d8f73bd3c16d01f86",
        "md5": "cc33b06914d9694a3957213deb0b1a4a",
        "sha256": "317ab435cc13bd887ba2d0b93e48b4347e31e71da0e75ef2cf6d77d99aa5389d"
      },
      "downloads": -1,
      "filename": "lazystore-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cc33b06914d9694a3957213deb0b1a4a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13951,
      "upload_time": "2022-01-13T00:51:24",
      "upload_time_iso_8601": "2022-01-13T00:51:24.716286Z",
      "url": "https://files.pythonhosted.org/packages/81/06/7f6e140d1e7439f395fd12bd4e7b882edb17693f102d8f73bd3c16d01f86/lazystore-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e7c73c22da840be1f2ac9152afd2c9478b8deba6abd1c223ac754468225d8a4",
        "md5": "8feb3c06e5dfd5279fe367e758a2588d",
        "sha256": "91bdd8ea1601021519269fcfeeaaaabbbf1a14f5bc4774480afb3397ee743119"
      },
      "downloads": -1,
      "filename": "lazystore-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8feb3c06e5dfd5279fe367e758a2588d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15364,
      "upload_time": "2022-01-13T00:51:26",
      "upload_time_iso_8601": "2022-01-13T00:51:26.252059Z",
      "url": "https://files.pythonhosted.org/packages/8e/7c/73c22da840be1f2ac9152afd2c9478b8deba6abd1c223ac754468225d8a4/lazystore-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}