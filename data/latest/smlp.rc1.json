{
  "info": {
    "author": "Carl Bai",
    "author_email": "carlbai66@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# 浅层机器学习平台用户指南\t\n\n​\t针对中文文本的预处理方法，包括文本清洗、分词、分句、同义词匹配等功能\n\n### 环境\n\nnumpy<br>\njieba<br>\ntextrank4zh<br>\npandas<br>\ntqdm<br>\n\n\n\n### 安装方法\n\n```\ngit clone git@git.huimeimt.com:carl.bai/shallow_machine_learning_platform.git\ncd shallow_machine_learning_platform/\npython3 setup.py install\n```\n\n\n\n### 功能及使用说明\n\n#### 文本预处理\n\n- 全角转半角\n\n  - ```python\n    def strQ2B(self, ustring)\n    ```\n\n  - 由于所获取的中文文本有部分是全角，对于数据清理不太方便，因此可以将文本全部转换为半角\n\n  - 该方法写在PreProcessing 类里面，被clean_up 文本清理方法所调用\n\n\n\n- 分句\n\n  - ```python\n    def cut_sent(self, para)\n    ```\n\n  - 为每个文本根据断句符、中英文省略号、换行符等做分句处理\n\n\n\n- 文本清理\n\n  - ```python\n    def cleanup(self, filepath: str)\n    def cleanup_txt(self, text: str)\n    ```\n\n  - 包括全角转半角，清洗()外的内容，分句，去除空格等\n\n  - 将括号外的所有字词都去除空格和异常符号，以方便处理分词\n\n  - 处理完成后根据分句方法进行分词\n\n\n\n- 分词\n\n  - ```python\n    def seg(self, contents: list, dictpath='default')\n    ```\n\n  - 为每个分句做分词处理\n\n  - 文本采用的是jieba分词工具，默认为自带的词典，如果需要新的词典需要输入路径，根据每个分句来进行分词\n\n\n\n- 文本预处理使用方法\n\n  ```python\n  from smlp.PreProcessing import PreProcessing\n\n  pp = PreProcessing()\t# 声明PreProcessing类实例\n  #content = pp.cleanup('test.txt')\t可以直接清理文本文件\n  content = pp.cleanup_txt(text: str)  # 直接清理string文本， 返回分句列表\n  segs = pp.seg(content, dictpath=sm)\t# 对已清理的分句进行分词，返回已分好词的分句的二维数组\n  # 注意：此处添加了自定义词典路径\n\n  ```\n\n\n\n#### 单位统一\n\n- 将所有单位转换为克并将百分数转换为小数\n\n  - ```python\n    def unit_cov_g(self, segments: list) # 需要上面分好词的分句数组进行转换\n    ```\n\n  - 使用方法\n\n    ```python\n    from smlp.unicov import unicov\n\n    uc = unicov()\t# 声明unicov类实例\n    for s in segs:\t#对每个分句里的分词列表进行处理\n        uc.unit_cov_g(s)\t\n\n    ```\n\n- 将所有单位转换为kg并将百分数转换为小数\n\n  - ```python\n    def unit_cov_kg(self, segments: list) # 需要上面分好词的分句数组进行转换\n    ```\n\n  - 使用方法同上\n\n- 将所有单位转换为mg并将百分数转换为小数\n\n  - ```python\n    def unit_cov_mg(self, segments: list) # 需要上面分好词的分句数组进行转换\n    ```\n\n  - 使用方法同上\n\n\n\n#### 同义词词典\n\n- 类初始化\n\n  ```python\n  class Thesaurus():\n      def __init__(self, contents: list): \t# 需要上面分好词的分句数组进行转换\n          self.contents = contents\t# 文本属性赋值\n          self.synonym = {}\t\t# 初始化同义词词典\n          return\n  ```\n\n\n\n- 找出同义词\n\n  - ```python\n    def synonymy(self, min_len=2, max_len=12)\n    ```\n\n  - 定义同义词的最小长度和最大长度，以此来避免非法词语的写入\n\n  - 返回类属性 synonym, 可通过类实例来调用\n\n\n\n- 同义词词典清洗\n\n  - ```python\n    def cleanup(self)\n    ```\n\n  - 若词典中key对应的list里有不符合规范的value词，将会移除该元素\n\n  - 若清洗后词典中key对应为空，则删除该key\n\n  - 清洗的词典为类属性synonym，不返回数值\n\n\n\n- 推荐词排序\n\n  - ```python\n        # 大写率\n        @staticmethod\n        def upper_rate(word):\n    \t\t……\n\n        # 推荐词排序\n        def sug_words(self, array):\n            return sorted(set(array), key=lambda x: self.upper_rate(x), reverse=True)\n    ```\n\n  - 根据对应key的list中大写率越大的词放在前面，表示简写（当然后续还可以按照其他的方法排序）\n\n\n\n- 同义词词典使用方法\n\n  ```python\n  from smlp.Thesaurus import Thesaurus\n\n  ts = Thesaurus(segs)\n  ts.synonymy()\n  ts.cleanup()\n  ```\n\n\n\n- 效果展示：\n\n  ```\n  {\n  ...\n   '美国癌症学会': ['ACCP',\n              'AATS',\n              'ACS',\n              'AL A',\n              'ACCP American Cancer Society',\n              'AATS A m er i c an Lu ng Association',\n              'AL A American College of Chest Physicians',\n              'American Association for Thoracic Surgery'],\n   '美国胸外科学会': ['AATS', 'American Association for Thoracic Surgery'],\n   '聚乙二醇': ['PEG'],\n   '聚合酶链反应': ['FISH',\n              'RT-PCR',\n              'FISH real time polymerase chain reaction',\n              'fluorescence in situ hybridization'],\n   '聚苯胺': ['PANI'],\n   ...\n   }\n  ```\n\n\n\n- 待处理的问题：\n\n  - (已解决)由于分词的原因，有一些单词会把 ',' 包含进去，导致无法将单词分割开来，例如:\n\n    ```\n     '生存期': ['overall survival, OS'],\n    ```\n\n    本来应该是两个同义词却包含在了一起\n\n  - 还是由于分词的原因，导致一些本来不是该词的同义词变成了该词的同义词，同时选取的专业词汇错误，例如：\n\n    ```\n     '材料': ['MOFS',\n            'Zeolitic Imidazolate Framework - 8, ZIF-8',\n            'Metal - Organic Frameworks'],\n    ```\n\n\n\n  - 同时对于同义词的分析还是不够完善，目前只能识别（）内的同义词，而且一些（）内的词不属于同义词，例如：\n\n    ```\n    '结果': ['SEER', 'and End Results', 'Surveillance', 'Epidemiology'],\n    ```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cbai066",
    "keywords": "shallow_machine_learning_platform nlp machine_learning jieba segment segments encoding serving",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "smlp",
    "package_url": "https://pypi.org/project/smlp/",
    "platform": "",
    "project_url": "https://pypi.org/project/smlp/",
    "project_urls": {
      "Homepage": "https://github.com/cbai066"
    },
    "release_url": "https://pypi.org/project/smlp/1.1.0/",
    "requires_dist": [
      "numpy",
      "jieba",
      "textrank4zh",
      "pandas",
      "tqdm",
      "pytest",
      "flask ; extra == 'http'",
      "flask-compress ; extra == 'http'",
      "flask-cors ; extra == 'http'",
      "flask-json ; extra == 'http'"
    ],
    "requires_python": "",
    "summary": "a shallow machine learning toolkit for text PreProcessing",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7671644,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8cd7ff8a20bd0139dff90fabbc501cffa23b0b77353c8e44db07d758aa96bf2",
          "md5": "62059ec3f901476170921ba847de6c67",
          "sha256": "233f24e76268cef92465aa80e32dd065f9623935f1cc3639e27c8f7925330ffe"
        },
        "downloads": -1,
        "filename": "smlp-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62059ec3f901476170921ba847de6c67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1835893,
        "upload_time": "2020-07-10T02:18:12",
        "upload_time_iso_8601": "2020-07-10T02:18:12.318790Z",
        "url": "https://files.pythonhosted.org/packages/a8/cd/7ff8a20bd0139dff90fabbc501cffa23b0b77353c8e44db07d758aa96bf2/smlp-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37e64029df600af4d238fcdf54bab1944c7850ec44e5f2cd0c91754ad3fd25a0",
          "md5": "e847a141b20243c5dce2826e87bb4c2b",
          "sha256": "ff8311cb50a6aa2103ba04d8eaf0a48645952e37ff179642da77955ecccc3538"
        },
        "downloads": -1,
        "filename": "smlp-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e847a141b20243c5dce2826e87bb4c2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12627,
        "upload_time": "2020-07-10T02:18:15",
        "upload_time_iso_8601": "2020-07-10T02:18:15.072830Z",
        "url": "https://files.pythonhosted.org/packages/37/e6/4029df600af4d238fcdf54bab1944c7850ec44e5f2cd0c91754ad3fd25a0/smlp-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8cd7ff8a20bd0139dff90fabbc501cffa23b0b77353c8e44db07d758aa96bf2",
        "md5": "62059ec3f901476170921ba847de6c67",
        "sha256": "233f24e76268cef92465aa80e32dd065f9623935f1cc3639e27c8f7925330ffe"
      },
      "downloads": -1,
      "filename": "smlp-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62059ec3f901476170921ba847de6c67",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1835893,
      "upload_time": "2020-07-10T02:18:12",
      "upload_time_iso_8601": "2020-07-10T02:18:12.318790Z",
      "url": "https://files.pythonhosted.org/packages/a8/cd/7ff8a20bd0139dff90fabbc501cffa23b0b77353c8e44db07d758aa96bf2/smlp-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37e64029df600af4d238fcdf54bab1944c7850ec44e5f2cd0c91754ad3fd25a0",
        "md5": "e847a141b20243c5dce2826e87bb4c2b",
        "sha256": "ff8311cb50a6aa2103ba04d8eaf0a48645952e37ff179642da77955ecccc3538"
      },
      "downloads": -1,
      "filename": "smlp-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e847a141b20243c5dce2826e87bb4c2b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12627,
      "upload_time": "2020-07-10T02:18:15",
      "upload_time_iso_8601": "2020-07-10T02:18:15.072830Z",
      "url": "https://files.pythonhosted.org/packages/37/e6/4029df600af4d238fcdf54bab1944c7850ec44e5f2cd0c91754ad3fd25a0/smlp-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}