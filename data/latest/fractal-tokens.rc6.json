{
  "info": {
    "author": "Douwe van der Meij",
    "author_email": "douwe@karibu-online.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Fractal Tokens\n\n> Fractal Tokens provides a flexible way to generate and verify JWT tokens for your Python applications.\n\n[![PyPI Version][pypi-image]][pypi-url]\n[![Build Status][build-image]][build-url]\n[![Code Coverage][coverage-image]][coverage-url]\n[![Code Quality][quality-image]][quality-url]\n\n<!-- Badges -->\n\n[pypi-image]: https://img.shields.io/pypi/v/fractal-tokens\n[pypi-url]: https://pypi.org/project/fractal-tokens/\n[build-image]: https://github.com/douwevandermeij/fractal-tokens/actions/workflows/build.yml/badge.svg\n[build-url]: https://github.com/douwevandermeij/fractal-tokens/actions/workflows/build.yml\n[coverage-image]: https://codecov.io/gh/douwevandermeij/fractal-tokens/branch/main/graph/badge.svg\n[coverage-url]: https://codecov.io/gh/douwevandermeij/fractal-tokens\n[quality-image]: https://api.codeclimate.com/v1/badges/9242f796b5edee2c327d/maintainability\n[quality-url]: https://codeclimate.com/github/douwevandermeij/fractal-tokens\n\n## Installation\n\n```sh\npip install fractal-tokens\n```\n\n## Development\n\nSetup the development environment by running:\n\n```sh\nmake deps\npre-commit install\n```\n\nHappy coding.\n\nOccasionally you can run:\n\n```sh\nmake lint\n```\n\nThis is not explicitly necessary because the git hook does the same thing.\n\n**Do not disable the git hooks upon commit!**\n\n## Usage\n\nA token is a digital key that gives (temporary) access to a certain (online) resource.\nThis can be anything, it can give a user access to a backend system (login/authentication), or allow a certain file to be downloaded, etc.\n\nIn any case, the token is stand-alone, contains its own permissions, is signed and can (thus) be validated and used in a stateless way.\nOnly to be able to validate the signature, a key related to the key that has been used to sign the token, is necessary to the validating service (the validator).\n\nIn case of a symmetric encryption key, the exact same \"secret key\" needs to be available to the validator.\\\nIn case of an asymmetric encryption key (public/private key pair), the public key needs to be available to the validator (assuming the token has been signed with the private key).\n\n### Dummy TokenService\n\nTo illustrate how the token service works we'll be using a dummy TokenService. This dummy TokenService doesn't use encryption.\nIn our case, it uses JSON to generate and verify tokens (json.dumps and json.loads respectively).\n\nConsider the following TokenService:\n\n```python\nclass DummyJsonTokenService(TokenService):\n    def __init__(self, token_payload_cls: Type[TokenPayload] = TokenPayload):\n        self.token_payload_cls = token_payload_cls\n\n    def generate(\n        self,\n        payload: dict,\n        token_type: str = \"access\",\n        seconds_valid: int = ACCESS_TOKEN_EXPIRATION_SECONDS,\n    ) -> str:\n        return json.dumps(self._prepare(payload, token_type, seconds_valid, \"dummy\"))\n\n    def verify(self, token: str, *, typ: str = \"access\") -> TokenPayload:\n        try:\n            return self.token_payload_cls(**self.decode(token))\n        except Exception:\n            raise TokenInvalidException()\n\n    def decode(self, token: str) -> dict:\n        return json.loads(token)\n\n    def get_unverified_claims(self, token: str) -> dict:\n        return self.decode(token)\n```\n\nNote the `generate` function calls `json.dumps` and the `decode` function, which is also called from `verify`, will call `json.loads`.\n\nThe generated tokens from this TokenService are in a JSON format. The JSON formatted tokens can be verified and a TokenPayload object will be returned.\n\nThis TokenService can be used during testing. The generated tokens are human-readable, so easy to debug.\n\nNotice the `verify` function returns a TokenPayload object.\n\n### TokenPayload\n\nThe `verify` function of a TokenService returns a TokenPayload object, or a subclass. To use a subclass, that class needs to be registered upon initialization of the TokenService.\n\nThe TokenPayload is a contract about the payload of the token.\n\nWhile generating and verifying tokens is stateless, it can be handy to make agreements about the payload structure of the tokens.\nStateless token authentication can be particularly handy in a microservice architecture, where one microservice generated the token\nand another consuming (validating) it to be able to process something on behalf of the token's subject.\nSince both microservices have their own application context, they don't share the same code (directly).\nThis means that the payload that is used to generate the token, may be of a different structure than the payload that is expected in the consuming service.\nThis may happen when one of the two microservices gets a change regarding the payload structure and the other doesn't.\n\nIt is a good habit to make at least some constraints around the token payload structure and the TokenPayload object may be of help here.\nBy default, the TokenPayload just contains default JWT claims and a custom claim `typ` (type of token).\nA JWT is a JSON Web Token (https://www.rfc-editor.org/rfc/rfc7519) that holds certain claims to be transferred between different applications/services.\n\n```python\n@dataclass\nclass TokenPayload:\n    iss: str  # Issuer\n    sub: str  # Subject\n    exp: int  # Expiration Time\n    nbf: int  # Not Before\n    iat: int  # Issued At\n    jti: str  # JWT ID\n    typ: str  # Type of token (custom)\n```\n\n#### The audience claim\n\nNote that we skipped the `aud` (Audience) claim, as specified in https://www.rfc-editor.org/rfc/rfc7519#section-4.1.\nThe reason for this is that when you use the `aud` claim, it implies that the generator knows who (which service) will/should be using the token,\nwhich (in my humble opinion) goes a bit against the stateless nature because upon generating the token, you need to supply the token consumer (audience) already,\nso it can be encoded in the token as well. The consumer should always provide its own identity (as audience) when verifying tokens.\nThe JWT library by design, will confirm the supplied audience value (the consumer's identity) against the provided `aud` claim in the token.\n\nIf you want to use the `aud` claim anyway, you need to extend the TokenPayload with a \"custom\" claim.\n\n##### Auth0 implementation of `aud` claim\n\n[Auth0](https://auth0.com), one of the leading authentication platform service providers, says the `aud` claim can be used for the recipients\naudience of the token ([source](https://community.auth0.com/t/what-is-the-audience/71414)). However, when you define an\n\"application\" in the Auth0 backend, they already provide a so-called \"Client ID\", which will be put in the `aud` claim.\nYou now have to copy/paste this \"Client ID\" in your own software, so you can use it as `aud` claim input to validate tokens.\n\nWhile this of course works fine, in essence the implementation like this is similar to the `iss` (Issuer) claim; it's the\ntoken generating service that defines the \"Client ID\" and it can be reused multiple times in different consuming applications.\nThe token generating service doesn't know anything about the actual consuming applications.\n\nIdeally, you would have to register each consuming application with a unique identifier in Auth0.\nPerhaps the decision makers at Auth0 decided that this would be too much of a burden for their customers, especially to have to\nimplement something in every application to generate a unique identifier, plus the (prone to be outdated) registry in their backend, so they decided\nto turn it around and already provide a unique identifier. Now it's up to their customers to use the \"Client ID\" in a single application only.\nThis is most probably also the reason why you have to define \"applications\" in Auth0 in the first place.\n\n#### Additional custom claims\n\nWhile the TokenPayload object is already quite usefull, it can be extended with more custom claims.\nFor example, when using role-based permissions, the role(s) can be added to the token as well.\n\nConsider the following TokenPayloadRoles object:\n\n```python\n@dataclass\nclass TokenPayloadRoles(TokenPayload):\n    roles: List[str]\n```\n\nThis new TokenPayloadRoles can be used as follows in both the generating service as the consuming service (the validator):\n\n```python\ntoken_service = DummyJsonTokenService(TokenPayloadRoles)\n```\n\nThe TokenPayloadRoles object needs to be available in all application's contexts.\nThis means it needs to be either copied over to all applications or injected via a dependency (shared module).\n\nThe generating service now needs to provide `roles` when generating the token:\n\n```python\ntoken_service = DummyJsonTokenService(TokenPayloadRoles)\ntoken = token_service.generate(\n    {\n        \"roles\": [\"admin\", \"user\"],\n    }\n)\n```\n\nFailing to provide a `roles` claim will result in an `InvalidPayloadException` error.\n\nThe consuming service can now verify the token and get a TokenPayloadRoles object.\n\n```python\ntoken_service = DummyJsonTokenService(TokenPayloadRoles)\npayload = token_service.verify(token)\n```\n\nThe roles themselves can also be verified, but that's out of scope for the TokenService.\nFor more information on how to validate roles, please check out the [**Fractal Roles**](https://github.com/douwevandermeij/fractal-roles) package.\n\n### Symmetric JWT TokenService\n\nSymmetric encryption means that the key that is used to encrypt/generate a token, should be the same key that should be used to decrypt/validate the token.\nThis key should be secret because when someone gets hold of the key, he can not only decrypt/validate tokens, but also encrypt/generate new ones.\nAny consumer needs to know the secret key to be able to validate tokens. This could be a security risk.\n\nHowever, if security of the secret key is covered, symmetric encryption is a viable solution for JWT tokens and can be used as follows:\n\n```python\ntoken_service = SymmetricJwtTokenService(issuer=\"example\", secret_key=\"**SECRET**\")\n\ntoken = token_service.generate(\n    {\n        \"sub\": str(uuid.uuid4()),  # any subject\n    }\n)\n\npayload = token_service.verify(token)\n```\n\nSimilar to the dummy TokenService, also the symmetric TokenService supports custom claims:\n\n```python\ntoken_service = SymmetricJwtTokenService(issuer=\"example\", secret_key=\"**SECRET**\", token_payload_cls=TokenPayloadRoles)\n```\n\n### Asymmetric JWT TokenService\n\nAsymmetric encryption means that there are two keys, a private one and a public one, that can be used to respectively encrypt/generate and decrypt/validate tokens.\nThe private key should be kept secret, but the public key doesn't have to be kept secret because it cannot be used to encrypt/generate new tokens, it can only be used to decrypt/validate.\nThis is useful, because this way any consumer can validate a token without knowing the secret/private key. This is different from symmetric encryption.\n\nTo be able to use asymmetric encryption, you need to have or generate a public/private key pair using the [RSA algorithm](https://en.wikipedia.org/wiki/RSA_(cryptosystem)).\nIn Python this can be accomplished as follows:\n\n```python\ndef rsa_key_pair():\n    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import rsa\n\n    key = rsa.generate_private_key(\n        backend=default_backend(),\n        public_exponent=65537,\n        key_size=4096,  # use at least 4096 in production\n    )\n\n    private_key = key.private_bytes(\n        serialization.Encoding.PEM,\n        serialization.PrivateFormat.PKCS8,\n        serialization.NoEncryption(),\n    ).decode(\"utf-8\")\n\n    return private_key, key.public_key()\n```\n\nHaving the public/private key pair, the asymmetric TokenService can be used as follows:\n\n```python\nprivate_key, public_key = rsa_key_pair()\ntoken_service = AsymmetricJwtTokenService(\n    issuer=\"example\", private_key=private_key, public_key=public_key\n)\n\ntoken = token_service.generate(\n    {\n        \"sub\": str(uuid.uuid4()),  # any subject\n    }\n)\n\npayload = token_service.verify(token)\n```\n\nSimilar to the dummy TokenService, also the asymmetric TokenService supports custom claims:\n\n```python\ntoken_service = AsymmetricJwtTokenService(\n    issuer=\"example\", private_key=private_key, public_key=public_key, token_payload_cls=TokenPayloadRoles\n)\n```\n\n#### Extended Asymmetric JWT TokenService\n\nWhen using asymmetric encryption, where the public key can be shared with other applications, this enables a lot of possibilities.\nFor example, a consuming applications can have a list of public keys from several different token generating services, using different private keys.\nAlso, a token generating service may change to a different private key, for any reason.\nWhen multiple public/private key pairs are in play, it is useful to know which private key has been used to generate the token,\nto be able to pick the correct/corresponding public key to validate the token.\nTo do this, the public/private key pair can be annotated with a **key ID** and can be included in the header of the JWT token.\n\nThe `ExtendedAsymmetricJwtTokenService` is similar to the regular `AsymmetricJwtTokenService`, but adds a `kid` (key ID) to the header of the JWT token.\nThis `kid` refers to a generated key pair (public/private key).\n\n```python\nprivate_key, public_key = rsa_key_pair()\nkid = str(uuid.uuid4())\ntoken_service = ExtendedAsymmetricJwtTokenService(\n    issuer=\"example\",\n    private_key=private_key,\n    public_key=public_key,\n    kid=kid,\n)\n```\n\nIn the code above an example is shown for generating asymmetric tokens having a `kid` in the header.\nWhile this code can also be used to validate these tokens, this isn't common since the consuming application most probably doesn't know the private key.\n\nA consuming application would use the following code to validate tokens with a `kid`:\n\n```python\nheaders = jwt.get_unverified_headers(token)\nkid = headers.get(\"kid\", None)\npublic_key_str = find_public_key(kid)  # find public key from a registry using `kid`\n\npublic_key = serialization.load_pem_public_key(\n    public_key_str.encode(\"utf-8\"), backend=default_backend()\n)\ntoken_service = AsymmetricJwtTokenService(\n    issuer=\"example\",\n    private_key=\"\",  # unknown\n    public_key=public_key,\n)\n\ntoken_service.verify(token)\n```\n\nNote that we first need to fetch the `kid` from the header and then do a lookup in a registry to find the public key corresponding to the `kid`.\nOnce we have the public key, we can just use a regular `AsymmetricJwtTokenService` to validate the token, providing the public key.\nHowever, the function `find_public_key(kid)` is not implemented in this example. For this, Fractal Tokens comes with a JWK service.\n\nAlso note that this TokenService cannot be used to generate new tokens, as the private key is unknown (or just an empty string).\nIf you still try to do so, the TokenService will raise an exception.\n\n#### JWK Service\n\nA JWK is a JSON Web Key (https://www.rfc-editor.org/rfc/rfc7517) that refers to a specific encryption key (pair).\nThe JWK service holds, or interfaces with, a registry with public keys and their respective key IDs.\nFor a local registry the `LocalJwkService` can be used. The `LocalJwkService` contains an in-memory list of `Jwk` objects.\n\n```python\n@dataclass\nclass Jwk:\n    id: str\n    public_key: str\n```\n\nCreating a `LocalJwkService` would go as follows:\n\n```python\nprivate_key, public_key = rsa_key_pair()\n\njwk_service = LocalJwkService(\n    [\n        Jwk(\n            id=kid,\n            public_key=public_key.public_bytes(\n                serialization.Encoding.PEM,\n                serialization.PublicFormat.SubjectPublicKeyInfo,\n            ).decode(\"utf-8\"),\n        )\n    ]\n)\n```\n\nUsing it in the `ExtendedAsymmetricJwtTokenService` would go as follows:\n\n```python\ntoken_service = ExtendedAsymmetricJwtTokenService(\n    issuer=\"\",\n    private_key=\"\",\n    kid=\"\",\n    jwk_service=jwk_service,\n)\n```\n\nThis TokenService is intended to be used _only_ to validate tokens. It cannot generate new tokens since it doesn't know any private key,\nnor kid and therefore the issuer is also not relevant. Hence, these three parameters are empty strings.\n\nWhen verifying a token with this TokenService, it will look up the `kid` from the token header and find a public key corresponding to the `kid`.\n\nSo just call:\n\n```python\ntoken_service.verify(token)\n```\n\nWhen all is fine a payload will be returned. When no public key can be found by `kid`, or `kid` is not present in the token header,\na `NotAllowedException` will be raised.\n\nIt might well be that the public key is invalidated/deleted in order to block all access from certain private key.\nFor example in the case of a security breach.\n\nThis might not be happening a lot in case of a `LocalJwkService`, but with a `RemoteJwkService` this makes more sense,\nas the public keys are managed in a separate remote service or application.\n\nThe `RemoteJwkService` opens an HTTP GET request on a certain endpoint upon calling `get_jwks(...)` on the JWK service.\nBy default, the `RemoteJwkService` assumes the endpoint will be `/public/keys` on a certain host, and the host is assumed to be in the `iss` (issuer) claim of the token.\nThe `iss` claim in the token to validate, should then start with (at least) `http`.\n\nBecause you can't know beforehand if a token to validate contains a host in the `iss` claim, you can also use the `AutomaticJwkService`\nwhich will check for the issuer to be a host or not and select the `RemoteJwkService` or `LocalJwkService` respectively.\n\n```python\nprivate_key, public_key = rsa_key_pair()\n\njwk_service = AutomaticJwkService(\n    [\n        Jwk(\n            id=kid,\n            public_key=public_key.public_bytes(\n                serialization.Encoding.PEM,\n                serialization.PublicFormat.SubjectPublicKeyInfo,\n            ).decode(\"utf-8\"),\n        )\n    ]\n)\n```\n\n### Automatic JWT TokenService\n\nTo be fully resilient for multiple types of tokens coming at your consuming application, you can use the `AutomaticJwtTokenService`.\n\n```python\ntoken_service = AutomaticJwtTokenService(\n    issuer=\"example\", secret_key=secret_key, jwk_service=jwk_service\n)\n```\n\nYou can supply it with a symmetric secret key and a JWK service.\n\nAn `AutomaticJwtTokenService` cannot be used for generating tokens. Token generation requires an explicit chosen TokenService to do so.\n\n#### How does it work?\n\nFirst, based on the algorithm used, which can be found in the `alg` claim of the token, either the `SymmetricJwtTokenService` or an `AsymmetricJwtTokenService` will be used.\nBased on the `kid` claim to be available in the token header the regular `AsymmetricJwtTokenService` will be used (in case of no `kid` claim) or the `ExtendedAsymmetricJwtTokenService` will be used.\nThe `ExtendedAsymmetricJwtTokenService` can be using an `AutomaticJwkService`, so even if the token contains a `kid` claim, it can still contain an `iss` claim which not represents a host.\n\nThis doesn't guarantee all tokens can be validated of course, it still depends on the right public key(s) and/or secret key to be available upon validating a token.\nBut of course this is the whole essence of security.\n\n### FastAPI implementation\n\nSince Fractal Tokens is designed in a generic way, it can be easily integrated in your FastAPI applications.\nYou can find the full example on a FastAPI demo in the examples in this repository.\n\nWe will make use of FastAPI's dependency injection system to verify tokens.\n\nA protected view may look like this:\n\n```python\n@app.get(\"/protected\")\ndef protected(\n    payload: TokenPayload = Depends(get_token_payload(token_service=token_service)),\n):\n    return {\"Protected\": \"Data\", \"TokenPayload\": payload}\n```\n\nA more complete example:\n\n```python\nfrom fastapi import Depends, FastAPI\nfrom fractal_tokens.services.generic import TokenPayload\nfrom fractal_tokens.services.jwt.asymmetric import AsymmetricJwtTokenService\n\nfrom fastapi_demo.utils import get_token_payload, rsa_key_pair\n\napp = FastAPI()\n\n# key pair will renew everytime you restart the app, store externally to reuse\nprivate_key, public_key = rsa_key_pair()\n\ntoken_service = AsymmetricJwtTokenService(\n    issuer=\"example\", private_key=private_key, public_key=public_key\n)\n\n\n@app.get(\"/protected\")\ndef protected(\n    payload: TokenPayload = Depends(get_token_payload(token_service=token_service)),\n):\n    return {\"Protected\": \"Data\", \"TokenPayload\": payload}\n```\n\nThe most important function here is `get_token_payload`. This dependency will be injected by FastAPI upon calling this function/endpoint.\n\nThe `get_token_payload` could be implemented as follows:\n\n```python\nfrom fastapi import Depends\nfrom fastapi.security import OAuth2PasswordBearer\n\nfrom fractal_tokens.services.generic import TokenPayload, TokenService\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n\n\ndef get_token_payload(\n    *,\n    token_service: TokenService,\n    typ: str = \"access\",\n):\n    def _get_payload(token: str = Depends(oauth2_scheme)) -> TokenPayload:\n        return token_service.verify(token, typ=typ)\n\n    return _get_payload\n```\n\nThe trick is of course calling `verify` on the `token_service`.\n\n```python\nreturn token_service.verify(token, typ=typ)\n```\n\n#### Including Roles Verification\n\nI mentioned `get_token_payload` _could_ be implemented like this, because variations or extensions are also possible.\nConsider validating roles, as provided in the [**Fractal Roles**](https://github.com/douwevandermeij/fractal-roles) package.\n\nUsing Fractal Tokens together with Fractal Roles could result in a function like this:\n\n```python\ndef get_token_payload_roles(\n    *,\n    token_service: TokenService,\n    roles_service: BaseRolesService,\n    endpoint: str = \"\",\n    method: str = \"get\",\n    typ: str = \"access\",\n):\n    def _get_payload(token: str = Depends(oauth2_scheme)) -> TokenPayloadRoles:\n        payload = token_service.verify(token, typ=typ)\n        payload = roles_service.verify(payload, endpoint, method)\n        return payload\n\n    return _get_payload\n```\n\nNotice the `roles_service` next to the `token_service` and the roles verification `roles_service.verify(payload, endpoint, method)`.\n\nThe protected view in this case may look like this:\n\n```python\n@app.get(\"/protected\")\ndef protected(\n    payload: TokenPayloadRoles = Depends(\n        get_token_payload_roles(\n            token_service=token_service,\n            roles_service=roles_service,\n            endpoint=\"protected\",\n            method=\"get\",\n        )\n    ),\n):\n    return {\"Protected\": \"Data\", \"TokenPayload\": payload}\n```\nCheckout the examples for a more complete overview of using FastAPI with Fractal Tokens and Fractal Roles.\n\nFor more information on how to validate roles, please check out the [**Fractal Roles**](https://github.com/douwevandermeij/fractal-roles) package.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/douwevandermeij/fractal-tokens",
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "fractal-tokens",
    "package_url": "https://pypi.org/project/fractal-tokens/",
    "platform": null,
    "project_url": "https://pypi.org/project/fractal-tokens/",
    "project_urls": {
      "Homepage": "https://github.com/douwevandermeij/fractal-tokens"
    },
    "release_url": "https://pypi.org/project/fractal-tokens/1.1.1/",
    "requires_dist": [
      "cryptography",
      "python-jose",
      "black ; extra == \"test\"",
      "flake8 ; extra == \"test\"",
      "isort ; extra == \"test\""
    ],
    "requires_python": ">=3.8",
    "summary": "Fractal Tokens provides a flexible way to generate and verify JWT tokens for your Python applications.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16499642,
  "releases": {
    "1.0.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ce503237d2e925a3ea094ffe94ea7c377788bb52d9aa20309c8a9641683da727",
          "md5": "b907ef0e9caebd89be252eda0fd397a9",
          "sha256": "bc881689e345b1514b67522b62ca1e0113b293b675994323f179dae6c81f9b34"
        },
        "downloads": -1,
        "filename": "fractal_tokens-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b907ef0e9caebd89be252eda0fd397a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14339,
        "upload_time": "2023-01-07T12:04:43",
        "upload_time_iso_8601": "2023-01-07T12:04:43.849310Z",
        "url": "https://files.pythonhosted.org/packages/ce/50/3237d2e925a3ea094ffe94ea7c377788bb52d9aa20309c8a9641683da727/fractal_tokens-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "519bfd0f1192fceea8299b1292c2efa54ec13468018bbe8dc5d1d1b51311d63c",
          "md5": "badcb258907909e5f188b8dc3c577a0a",
          "sha256": "5f0f1d560d41dc26d4633471695738c15f285efae79c0bf6ae36bde6d2a2d9a3"
        },
        "downloads": -1,
        "filename": "fractal-tokens-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "badcb258907909e5f188b8dc3c577a0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22583,
        "upload_time": "2023-01-07T12:04:45",
        "upload_time_iso_8601": "2023-01-07T12:04:45.473219Z",
        "url": "https://files.pythonhosted.org/packages/51/9b/fd0f1192fceea8299b1292c2efa54ec13468018bbe8dc5d1d1b51311d63c/fractal-tokens-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "02f1e42cfd753153c3af84139a4633749c9543d8b6800851b5c881802575d395",
          "md5": "1105caa89fc3e7eb49e3e225822ca2a8",
          "sha256": "66216d622d53f541b453be7ad1dff383de56ab32b213a67b70fc48c54ef6f1a1"
        },
        "downloads": -1,
        "filename": "fractal_tokens-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1105caa89fc3e7eb49e3e225822ca2a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14035,
        "upload_time": "2023-01-07T12:15:05",
        "upload_time_iso_8601": "2023-01-07T12:15:05.732537Z",
        "url": "https://files.pythonhosted.org/packages/02/f1/e42cfd753153c3af84139a4633749c9543d8b6800851b5c881802575d395/fractal_tokens-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e2d463ce2ac5618153ef657d8a619135a6658fbeb8fc384e956cec35f9dae61d",
          "md5": "d5294f1b454840a94fdce12b3206455e",
          "sha256": "88e66c73ac092047f9df2d2d83aa876ad5607a5b63b355dc522c8ebb0ea3a48d"
        },
        "downloads": -1,
        "filename": "fractal-tokens-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d5294f1b454840a94fdce12b3206455e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22277,
        "upload_time": "2023-01-07T12:15:07",
        "upload_time_iso_8601": "2023-01-07T12:15:07.441085Z",
        "url": "https://files.pythonhosted.org/packages/e2/d4/63ce2ac5618153ef657d8a619135a6658fbeb8fc384e956cec35f9dae61d/fractal-tokens-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "14468085ab485ebdba8ecc317dd523003802f184940c5dbd92475f38562289c1",
          "md5": "e9470274b0221b6c1f3295569e195f66",
          "sha256": "52477229e512ac03761c30c313b4523c6b9bf9bec31c44c4864087ff0d649654"
        },
        "downloads": -1,
        "filename": "fractal_tokens-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9470274b0221b6c1f3295569e195f66",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14172,
        "upload_time": "2023-01-08T16:04:11",
        "upload_time_iso_8601": "2023-01-08T16:04:11.854378Z",
        "url": "https://files.pythonhosted.org/packages/14/46/8085ab485ebdba8ecc317dd523003802f184940c5dbd92475f38562289c1/fractal_tokens-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7795edee9e1df153bcb80f1c67e85ffc75eae67ef7aab17134e7a198ef9f12e1",
          "md5": "31c68935bdf6b6e28b8b243b81ed0ce0",
          "sha256": "79ea639255ffefe58621711a4ab0e60a1ff04671c80e505739c6d00939ee4805"
        },
        "downloads": -1,
        "filename": "fractal-tokens-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "31c68935bdf6b6e28b8b243b81ed0ce0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22425,
        "upload_time": "2023-01-08T16:04:13",
        "upload_time_iso_8601": "2023-01-08T16:04:13.901867Z",
        "url": "https://files.pythonhosted.org/packages/77/95/edee9e1df153bcb80f1c67e85ffc75eae67ef7aab17134e7a198ef9f12e1/fractal-tokens-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a94397f7bcdebae29c8645e546b153af56a9664e338f78e5b4e10da68404e0cd",
          "md5": "ee6ac3df6a287169040daf888757a42d",
          "sha256": "de7e33deb49fe5358b68388bb1a858b737e38baa1963cbd4186c2b2c44bd76bc"
        },
        "downloads": -1,
        "filename": "fractal_tokens-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee6ac3df6a287169040daf888757a42d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15009,
        "upload_time": "2023-01-09T09:04:47",
        "upload_time_iso_8601": "2023-01-09T09:04:47.855929Z",
        "url": "https://files.pythonhosted.org/packages/a9/43/97f7bcdebae29c8645e546b153af56a9664e338f78e5b4e10da68404e0cd/fractal_tokens-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "1ab86ea33f60ace385e09dc2ef00697ea01bbea5ac6c0fa1f7b17cea50e23a37",
          "md5": "02c971616ce80502f4303a7799df4320",
          "sha256": "4a4eb3ec53fd35c45e0b094b28c02016329fc49f9a333fb20d8ba6d5e14d5f36"
        },
        "downloads": -1,
        "filename": "fractal-tokens-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "02c971616ce80502f4303a7799df4320",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 24972,
        "upload_time": "2023-01-09T09:04:49",
        "upload_time_iso_8601": "2023-01-09T09:04:49.580699Z",
        "url": "https://files.pythonhosted.org/packages/1a/b8/6ea33f60ace385e09dc2ef00697ea01bbea5ac6c0fa1f7b17cea50e23a37/fractal-tokens-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d4b847bde75949deb32d1a70fda2ea1b9e3261b192001fb1c8b1e5220f48f2b8",
          "md5": "c7ebe4e0c8db8eba9abd4a1c88f80d40",
          "sha256": "0bdd3f79dec0f27acb2d32455db2f841200e65d6db8c5b059f72bd8780c77e45"
        },
        "downloads": -1,
        "filename": "fractal_tokens-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7ebe4e0c8db8eba9abd4a1c88f80d40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15592,
        "upload_time": "2023-01-20T10:05:31",
        "upload_time_iso_8601": "2023-01-20T10:05:31.983180Z",
        "url": "https://files.pythonhosted.org/packages/d4/b8/47bde75949deb32d1a70fda2ea1b9e3261b192001fb1c8b1e5220f48f2b8/fractal_tokens-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "05b39c8651b7124945dd9bd11a2e3a4a1d713303b2dfb40ba00e302f675233ae",
          "md5": "49128560f835b9393bc03a1b7ab1a8e2",
          "sha256": "be7d49606325a668d1c1ac670c721bbc299033f2d9f9b36ca861b05b45c8ad22"
        },
        "downloads": -1,
        "filename": "fractal-tokens-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "49128560f835b9393bc03a1b7ab1a8e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 26123,
        "upload_time": "2023-01-20T10:05:33",
        "upload_time_iso_8601": "2023-01-20T10:05:33.999848Z",
        "url": "https://files.pythonhosted.org/packages/05/b3/9c8651b7124945dd9bd11a2e3a4a1d713303b2dfb40ba00e302f675233ae/fractal-tokens-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "766e4aef55212d86c92a2c987fe7227191bd76e40bdfe2c62fd4810f9e2c1b20",
          "md5": "d18d12abcef5067ff1ff18844cb40a9a",
          "sha256": "7f0b60d2280cb58841f118effaad6888d1503ff716a0995eb83929cb99ed241f"
        },
        "downloads": -1,
        "filename": "fractal_tokens-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d18d12abcef5067ff1ff18844cb40a9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15613,
        "upload_time": "2023-01-20T10:12:23",
        "upload_time_iso_8601": "2023-01-20T10:12:23.801374Z",
        "url": "https://files.pythonhosted.org/packages/76/6e/4aef55212d86c92a2c987fe7227191bd76e40bdfe2c62fd4810f9e2c1b20/fractal_tokens-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "39aee91cffa44859bb7dda8b78ce29a29a8cc6a026d4d47a74d6ce2dc059abec",
          "md5": "e419c7e0f66fcf6593394d3cc25a791b",
          "sha256": "dd2102e2e7edb5c28b615b7cd0aa58f5afe9d2cdead1915adfb9e19ad2bc1909"
        },
        "downloads": -1,
        "filename": "fractal-tokens-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e419c7e0f66fcf6593394d3cc25a791b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 26133,
        "upload_time": "2023-01-20T10:12:25",
        "upload_time_iso_8601": "2023-01-20T10:12:25.988951Z",
        "url": "https://files.pythonhosted.org/packages/39/ae/e91cffa44859bb7dda8b78ce29a29a8cc6a026d4d47a74d6ce2dc059abec/fractal-tokens-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "766e4aef55212d86c92a2c987fe7227191bd76e40bdfe2c62fd4810f9e2c1b20",
        "md5": "d18d12abcef5067ff1ff18844cb40a9a",
        "sha256": "7f0b60d2280cb58841f118effaad6888d1503ff716a0995eb83929cb99ed241f"
      },
      "downloads": -1,
      "filename": "fractal_tokens-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d18d12abcef5067ff1ff18844cb40a9a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 15613,
      "upload_time": "2023-01-20T10:12:23",
      "upload_time_iso_8601": "2023-01-20T10:12:23.801374Z",
      "url": "https://files.pythonhosted.org/packages/76/6e/4aef55212d86c92a2c987fe7227191bd76e40bdfe2c62fd4810f9e2c1b20/fractal_tokens-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "39aee91cffa44859bb7dda8b78ce29a29a8cc6a026d4d47a74d6ce2dc059abec",
        "md5": "e419c7e0f66fcf6593394d3cc25a791b",
        "sha256": "dd2102e2e7edb5c28b615b7cd0aa58f5afe9d2cdead1915adfb9e19ad2bc1909"
      },
      "downloads": -1,
      "filename": "fractal-tokens-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e419c7e0f66fcf6593394d3cc25a791b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 26133,
      "upload_time": "2023-01-20T10:12:25",
      "upload_time_iso_8601": "2023-01-20T10:12:25.988951Z",
      "url": "https://files.pythonhosted.org/packages/39/ae/e91cffa44859bb7dda8b78ce29a29a8cc6a026d4d47a74d6ce2dc059abec/fractal-tokens-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}