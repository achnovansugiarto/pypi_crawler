{
  "info": {
    "author": "",
    "author_email": "Leandro de Souza <leandrodesouzadev@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-apm\n\nA fully featured APM for django using django.\n\n## Features:\n\n- Know each view is getting more requests/errors;\n- Keep track of response times;\n- Registers errors and notify you/your team on slack/discord with the exception, traceback and logs;\n- Keep track of requests headers/query and payloads (on errors), making it easy to reproduce them in a separate environment.\n- Notify your team using celery if desired;\n\nNotifications example:\nOn slack:\n<img src=\"docs/examples/slack-notification.png\">\nOn discord:\n<img src=\"docs/examples/discord-notification.png\">\n\n## Installation\n\nInstall the package using your favorite packaging tool: pip / poetry / pdm, etc.\n\n1.  **Add `djapm.apm.apps.ApmConfig` to `INSTALLED_APPS` in your django settings. Make sure to add it before `django.contrib.admin`.** Otherwise, the dashboard link will not show up in Django admin.\n    If you're going to use the `apm_api_view`: Don't forget to add `rest_framework` to your `INSTALLED_APPS`.\n    It also requires the `django.contrib.sites` app installed. It must come before the `django.contrib.admin` for the dashboard link show up.\n\n2.  **Adding the middlewares**\n\n    - Adding the ApmMetricsMiddleware middleware (optional).\n      If you want to track the requests timing, add the `djapm.apm.middlewares.ApmMetricsMiddleware` to `MIDDLEWARE` in your django settings. Note that this will store into your database **all** requests that use the decorator `apm_api_view` (This decorator is explained later), no cleanup is done. Is up to you to clean the registers periodically if desired. It's better to keep this middleware the **closest to the top** of your `MIDDLEWARE` as possible , this way the `ellapsed` time is closer to the reality.\n\n    - Adding the ErrorTraceMiddleware (optional).\n      If you want to track errors and receive notifications, add the `djapm.apm.middlewares.ErrorTraceMiddleware` to `MIDDLEWARE` in your django settings. We recommend that you keep this middleware **closest to the bottom** of your `MIDDLEWARE` as possible. This middleware will notify any exception raised on your view to all integrations added (the setup is explained later).\n\n3.  **Including the URLs**\n\n    `djapm` comes with a dashboard that's accessible through the django-admin. It only allows superusers to view it. To enable the dashboard include the following in your root `urls.py` file:\n\n    ```python\n    from django.urls import include\n\n    urlpatterns = [\n      # Your other patterns...\n      path(\"apm/\", include(\"djapm.apm.urls\")),\n    ]\n    ```\n\n    Now go to the admin, you should be able to see the dashboard link.\n    <img src=\"./docs/examples/admin-apm-app-list.png\">\n\n    The dashboard shows the data collected from the middlewares. It uses `chart.js` to render the graphics. The data is get from the database via API. Example:\n    <img src=\"./docs/examples/dashboard.png\">\n\n4.  **Upgrading your views**\n    django-apm comes with 3 decorators: `apm_api_view`, `apm_view` and `apm_admin_view`. Also, it comes with two ClassBasedViews: `ApmView` and `ApmAPIView`. Also there's a ModelAdmin for tracking POST requests: `ApmModelAdmin`. Each of these adds some attributes to the `request`, they are:\n\n    - `id` (`str`): A string UUID4;\n    - `logger` (`logging.Logger`): A logger that you can use to log to the sdout and keep track of all logs emitted.\n    - `_log_handler` (`djapm.apm.log.ApmStreamHandler`): We use this handler so we can capture all logs emitted by your view; **Do not use this directly**.\n    - `_json` (`Any`): An alias to `rest_framework.Request.data` we store this because it's only available at the view, and if not stored, we wouldn't be able to track the payload in the middleware.\n\n    If you enabled the `ApmMetricsMiddleware`, this request and response will be saved to the database. If you enabled the `ErrorTraceMiddleware` any errors uncaught raised by your view will be notified to you. This does not includes the `rest_framework.serializers.ValidationError`, since `rest_framework` itself already handles this exception.\n\n    So, let's get started with each decorator:\n\n    - `apm_api_view`:\n      This decorator is an extension of the`rest*framework.decorators.api_view` decorator, so you don't need to wrap your view with the`rest_framework` decorator.\n\n      _Example api view_:\n\n      ```python\n      from djapm.apm.decorators import apm_api_view\n      from djapm.apm.types import ApmRequest\n\n      @apm_api_view([\"GET\"])\n      def your_view(request: ApmRequest, **kwargs):\n           logger = request.logger\n           req_id = request.id\n           ...\n      ```\n\n      **What's changed from the `rest_framework` function-based view:**\n      The `request` parameter is now of the type `ApmRequest`, it inherits from `rest_framework.request.Request` so you still have access to all it's attributes.\n      You receive a `logger` and a `id` that you can use. The `logger` was created just before your view using a default, if you need to use a different logger you can pass the logger name in the decorator.\n\n    - `apm_view`:\n      Add this decorator to all your django regular function-based view's that you want to keep track of.\n\n      _Example django view_:\n\n      ```python\n      from djapm.apm.decorators import apm_view\n      from djapm.apm.types import PatchedHttpRequest\n\n      @apm_view()\n      def your_django_regular_view(request: PatchedHttpRequest, **kwargs):\n          ...\n      ```\n\n    - `apm_admin_view`:\n      Add this decorator to all your django regular admin view's that you want to keep track of.\n\n      _Example django admin view_:\n\n      ```python\n      from django.contrib import admin\n      from djapm.apm.decorators import apm_admin_view\n      from djapm.apm.types import PatchedHttpRequest\n\n      class YourAdmin(admin.ModelAdmin):\n          @apm_admin_view()\n          def your_custom_admin_view(self, request: PatchedHttpRequest, **kwargs):\n              ...\n\n          # don't forget to override the `get_urls` the same way as when you did with your custom view.\n      ```\n\n    - The class-based-view (CBV) version:\n\n      If you want to keep track of your CBVs. Inherit the `ApmView` for your regular django views, or the `ApmAPIView` for your DRF's API views. This way we can add the required attributes before your view gets called.\n\n      _Example django CBV view_:\n\n      ```python\n      from django.views.generic import CreateView # or any other view\n      from djapm.apm.views import ApmView\n      from djapm.apm.types import PatchedHttpRequest\n\n      class YourCreateView(CreateView, ApmView):\n          ...\n          def post(self, request: PatchedHttpRequest, **kwargs):\n              ...\n      ```\n\n      _Example DRF CBV view:_\n      ```python\n      from djapm.apm.generics import ApmCreateAPIView  # or any other view\n      from djapm.apm.types import ApmRequest\n\n\n      class YourAPICreateView(ApmCreateAPIView):\n          ...\n          def create(self, request: ApmRequest, *args, **kwargs):\n              ...\n      ```\n\n    - The Django Admin POST requests:\n      If you want to keep track of your admin model Creations, inherit from `ApmModelAdmin` instead of the regular `admin.ModelAdmin`. Example:\n\n      ```python\n      from django.contrib import admin\n      from djapm.apm.admin import ApmModelAdmin\n      from yourapp.models import AModel\n\n      @admin.register(AModel)\n      class YourModelAdmin(ApmModelAdmin):\n        ...\n      ```\n\n5.  **Running the migrations:**\n\n    Since we rely on the database, you must migrate your database:\n    `python manage.py migrate`. This will create these models:\n\n    - `ApiRequest` - Keep tracks of requests, including headers, query parameters;\n    - `ApiResponse` - Keep tracks of responses, including status_code, ellapsed time.\n    - `ErrorTrace` - Keep tracks of errors on your views.\n    - `RequestLog` - Keep track of all logs that were logged from the `request.logger`;\n    - `Integration` - Keep track of all your integrations;\n    - `NotificationReceiver` - Keep track of all notifications receivers of an integration.\n\n6.  **Create an Integration**\n    Now go to the admin, you should now see the models registered there.\n    Go to integrations and create at least one integration. Current supported integrations:\n\n    - Slack;\n      Uses the Slack App key to send messages through to it's API. Here's a [guide](https://api.slack.com/authentication/basics) on how to create your app and get the key. Scopes required: `channels:read`, `chat:write`. After you get this configured. Install the slack app into the workspace that should send messages. Later, allow/invite the bot to a conversation/channel. When creating the `Integration` on the admin, the slack integration supports both the `name` and `id` of a channel conversation.\n      The `name` of the channel is the visible name that appear on slack, note that using the name will require that we fetch the `id` on the slack api.\n      The `id` of the channel can be retrieved on Slack. Click with the mouse's right button and click on `Copy` -> `Copy Link`, the `id` is the last part of the URL.\n      The same applies for a user.\n      <img src=\"./docs/examples/slack-integration.png\">\n    - Discord;\n      Uses a Discord Bot account to send messages through it's API. Here's a [guide](https://discord.com/developers/docs/intro) on how to create your Bot account. Required scopes: `guilds`, `SEND_MESSAGES`.\n      When creating the `Integration` on the admin, the discord integration supports both the `name` and `id` of a channel conversation.\n      The `name` of the channel is the visible name that appear on discord, note that using the name will require that we fetch the `id` on the discord api. So we need to: Get your Bot `guilds`, for each `guild` get it's `channels` and lookup for a channel with the exact name that was provided. The message is sent to the exact first channel found on any guild, so use a specific name.\n      The `id` of the channel can be retrieved on Discord. Click with the mouse's right button and click on `Copy Link`, the `id` is the last part of the URL.\n      The same applies for a user.\n      <img src=\"./docs/examples/discord-integration.png\">\n\n      That's it! You're setup to keep track of your Requests. Also, take a look into the source code `example` folder, that contains a django-project that uses the `djapm` package.\n\n7.  **Optional settings**\n\n    `django-apm` has a set of optional configurations, that can be set on your django settings module. Checkout them below:\n\n    - `APM_DEFAULT_LOGGER_NAME`: The default logger name that will be used if None is supplied to the `apm_view_decorator`. Defaults to: `apm_api_view`;\n    - `APM_REQUEST_SAVE_HEADERS`: Boolean that when set to `True` will save the request headers. Defaults to `True`;\n    - `APM_REQUEST_SAVE_QUERY_PARAMETERS`: Boolean that when set to `True` will save the request query parameters as json. Defaults to `True`;\n    - `APM_REQUEST_SAVE_QUERY_STRING`: Boolean that when set to `True` will save the request raw query string. Defaults to `True`;\n    - `APM_NOTIFY_USING_CELERY`: Boolean that when set to `True` will dispatch a celery task when notificating. Since the process of notificating Integration can take a long time, we suggest you to set this to `True`. Defaults to `False`.\n    - `APM_NOTIFY_ON_DEBUG_TRUE`: Boolean that when set to `True` will notify errors even when `DEBUG=True`. Defaults to `False`.\n    - `APM_USE_DATABASE`: String representing a key to the `DATABASES` django setting. Defaults to the django-default \"default\". Useful for changing which database apm will use to store it's data.\n\n## Storage considerations\n\nSince `djapm` uses the database to register, get metrics, this may lead to a lot of storage being used. `djapm` doesn't do cleanups, if you use celery-beat it may be useful to have a scheduled task to do the cleanup. Most of the data displayed on the dashboard is from the last 7 days.\n\nYou also may find useful to use a separate database for this metrics, errors. For that use the `APM_USE_DATABASE` setting.\n\n## Ellapsed time considerations\n\nThe ellapsed time displayed/registered is not precise from what your clients may be having. Since we only start keeping track of the time when the request first enters the `ApmMetricsMiddleware`.\n\n## Project Future\n\n- Include support for ViewSets.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-apm",
    "package_url": "https://pypi.org/project/django-apm/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-apm/",
    "project_urls": {
      "Homepage": "https://github.com/plathanus-tech/django-apm",
      "download_url": "https://github.com/plathanus-tech/django-apm/releases/tag/v0.3.0"
    },
    "release_url": "https://pypi.org/project/django-apm/0.3.0/",
    "requires_dist": [
      "Django>=4.1.1",
      "celery>=5.2.7",
      "djangorestframework>=3.14.0",
      "requests>=2.28.1"
    ],
    "requires_python": ">=3.9",
    "summary": "A fully featured APM for django using django",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15711447,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "324808cf4153e0f097ea2a9ac2ea9b62c763e500bdd1d32f903c5100741e9e8a",
          "md5": "5e07a6edf221197f77892c0bcd2c9a38",
          "sha256": "f40f05dae622d3bf7ea3e51968c18fe175129d1bf05a5479706ab4b152784061"
        },
        "downloads": -1,
        "filename": "django_apm-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e07a6edf221197f77892c0bcd2c9a38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 32057,
        "upload_time": "2022-10-07T14:43:32",
        "upload_time_iso_8601": "2022-10-07T14:43:32.819609Z",
        "url": "https://files.pythonhosted.org/packages/32/48/08cf4153e0f097ea2a9ac2ea9b62c763e500bdd1d32f903c5100741e9e8a/django_apm-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "924367001e5acb0e5aa75b4d3a96a6bb7e8285f61c7880a10b60db18effa752e",
          "md5": "9adbb7b6a0ee6c0b582c3159ceb1bcf7",
          "sha256": "e8662754d44706f253de30bafade25741d44a55d43b018e560c95911b46a3b16"
        },
        "downloads": -1,
        "filename": "django-apm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9adbb7b6a0ee6c0b582c3159ceb1bcf7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 27409,
        "upload_time": "2022-10-07T14:43:37",
        "upload_time_iso_8601": "2022-10-07T14:43:37.067057Z",
        "url": "https://files.pythonhosted.org/packages/92/43/67001e5acb0e5aa75b4d3a96a6bb7e8285f61c7880a10b60db18effa752e/django-apm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "049f8cf911c509398c8656ee846a6adb43acad5f8cc59a9d7e2a304b2cbee431",
          "md5": "2d37d05aa20f52f133a3955e70e93bc2",
          "sha256": "0e5ed4b6365a00982af1b1ff7fff4b8d9cede1de56706d07ca5e00b481e1fe69"
        },
        "downloads": -1,
        "filename": "django_apm-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d37d05aa20f52f133a3955e70e93bc2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 33113,
        "upload_time": "2022-10-31T17:25:56",
        "upload_time_iso_8601": "2022-10-31T17:25:56.812855Z",
        "url": "https://files.pythonhosted.org/packages/04/9f/8cf911c509398c8656ee846a6adb43acad5f8cc59a9d7e2a304b2cbee431/django_apm-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "680aecb41843e52fe29fae493c7d061071c3e23b2c7fa8b883483495cba3c98a",
          "md5": "2179442f9fa5116d80af1ae04d459063",
          "sha256": "f56ac290c9b776fabe72c7b398aafca9212a3990c3b0d797a9992f6a1b0e3e41"
        },
        "downloads": -1,
        "filename": "django-apm-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2179442f9fa5116d80af1ae04d459063",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 29107,
        "upload_time": "2022-10-31T17:25:59",
        "upload_time_iso_8601": "2022-10-31T17:25:59.733576Z",
        "url": "https://files.pythonhosted.org/packages/68/0a/ecb41843e52fe29fae493c7d061071c3e23b2c7fa8b883483495cba3c98a/django-apm-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6589c033bac503838314ca6c4e1b88568569810d85bc55a8520e874b295a40f",
          "md5": "6d8f7ecc22e745b82180e1f68a5667b2",
          "sha256": "2fe61542c745be5ec222825b9548ff33d896046486179b4ab439be79671ffd7f"
        },
        "downloads": -1,
        "filename": "django_apm-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d8f7ecc22e745b82180e1f68a5667b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 34411,
        "upload_time": "2022-11-09T13:05:01",
        "upload_time_iso_8601": "2022-11-09T13:05:01.591611Z",
        "url": "https://files.pythonhosted.org/packages/e6/58/9c033bac503838314ca6c4e1b88568569810d85bc55a8520e874b295a40f/django_apm-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac9bdf2e7a5acfcb0b57ca93a1f5f87ffab9e2f08b2b3566fb208f2e48d66960",
          "md5": "a6f8cf4986c93f42f0efa9947f41e79f",
          "sha256": "d3e6bba9f38aca9745afab6cf15f94f484c3b3bc53b6117cd0e65c0a98f037f1"
        },
        "downloads": -1,
        "filename": "django-apm-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a6f8cf4986c93f42f0efa9947f41e79f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 30097,
        "upload_time": "2022-11-09T13:05:04",
        "upload_time_iso_8601": "2022-11-09T13:05:04.203142Z",
        "url": "https://files.pythonhosted.org/packages/ac/9b/df2e7a5acfcb0b57ca93a1f5f87ffab9e2f08b2b3566fb208f2e48d66960/django-apm-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6589c033bac503838314ca6c4e1b88568569810d85bc55a8520e874b295a40f",
        "md5": "6d8f7ecc22e745b82180e1f68a5667b2",
        "sha256": "2fe61542c745be5ec222825b9548ff33d896046486179b4ab439be79671ffd7f"
      },
      "downloads": -1,
      "filename": "django_apm-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6d8f7ecc22e745b82180e1f68a5667b2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 34411,
      "upload_time": "2022-11-09T13:05:01",
      "upload_time_iso_8601": "2022-11-09T13:05:01.591611Z",
      "url": "https://files.pythonhosted.org/packages/e6/58/9c033bac503838314ca6c4e1b88568569810d85bc55a8520e874b295a40f/django_apm-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac9bdf2e7a5acfcb0b57ca93a1f5f87ffab9e2f08b2b3566fb208f2e48d66960",
        "md5": "a6f8cf4986c93f42f0efa9947f41e79f",
        "sha256": "d3e6bba9f38aca9745afab6cf15f94f484c3b3bc53b6117cd0e65c0a98f037f1"
      },
      "downloads": -1,
      "filename": "django-apm-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a6f8cf4986c93f42f0efa9947f41e79f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 30097,
      "upload_time": "2022-11-09T13:05:04",
      "upload_time_iso_8601": "2022-11-09T13:05:04.203142Z",
      "url": "https://files.pythonhosted.org/packages/ac/9b/df2e7a5acfcb0b57ca93a1f5f87ffab9e2f08b2b3566fb208f2e48d66960/django-apm-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}