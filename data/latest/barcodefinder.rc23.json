{
  "info": {
    "author": "Ping Wu",
    "author_email": "wpwupingwp@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "[![Build Status](https://travis-ci.com/wpwupingwp/BarcodeFinder.svg?branch=master)](https://travis-ci.com/wpwupingwp/BarcodeFinder)\n[![PyPI version](https://badge.fury.io/py/BarcodeFinder.svg)](https://badge.fury.io/py/BarcodeFinder)\n\n# Quick start\nDownload [the package](https://github.com/wpwupingwp/barcodefinder/releases),\nunzip, and run.\n\n__OR__\n\nOpen terminal, run\n   ```shell\n   # Install, using pip (recommended)\n   pip install BarcodeFinder --user\n\n   # Initiliaze with Internet\n   # Windows\n   python -m BarcodeFinder init\n   # Linux and MacOS\n   python3 -m BarcodeFinder init\n\n   # Run\n   # Windows\n   python -m BarcodeFinder\n   # Linux and MacOS\n   python3 -m BarcodeFinder\n   ```\n# Table of Contents\n   * [Quick start](#quickstart)\n   * [Feature](#feature)\n   * [Prerequisite](#prerequisite)\n      * [Hardware](#hardware)\n      * [Software](#software)\n   * [Installation](#installation)\n      * [Portable](#portable)\n      * [Install with pip](#Installwithpip)\n      * [Install with conda](#Installwithconda)\n      * [Initialization](#Initialization)\n   * [Usage](#usage)\n      * [Quick examples](#quick-examples)\n      * [Sequence ID](#sequence-id)\n      * [Command line](#commandline)\n   * [Input](#input)\n   * [Output](#output)\n   * [Options](#options)\n      * [gb2fasta](#gb2fasta)\n      * [evaluate](#evaluate)\n      * [primer](#primer)\n   * [Performance](#performance)\n   * [Citation](#citation)\n   * [License](#license)\n   * [Q&A](q&a)\n\n# Features\n:heavy_check_mark: Automatically collect, organize and clean sequence data\nfrom NCBI GenBank or local: collect data with abundant options; extract CDS,\nintergenic spacer, or any other annotations from original sequencep; remove\nredundant sequences according to species information; remove invalid or\nabnormal sequences/fragments; generate clean dataset with uniform sequence id. \n\n:heavy_check_mark: Evaluate variance of sequences by calculating nucleotide\ndiversity, observed resolution, Shannon index, tree resolution, phylogenetic\ndiversity (original and edited version), gap ratio, and others. Support\nsliding-window scanning.\n\n:heavy_check_mark: Design universal primer for the alignment. Support\nambiguous bases in primers.\n\n# Prerequisite\n## Hardware\nBarcodeFinder requires very few computational resources. A normal PC/laptop is\nenough. For downloading large amount of data, make sure the Internet\nconnection is stable and fast enough.\n\n## Software\nFor the portable version, nothing need to be installed manually.\n\nFor installing from pip, [Python](https://www.python.org/downloads/) is\nrequired. Notice that the python version should be higher than **3.6**.\n\n:white_check_mark: All third-party dependencies will be automatically\ninstalled with Internet, including `biopython`, `matplotlib`, `coloredlogs`,\n`numpy`, `primer3-py`, (python packages), and\n[MAFFT](https://mafft.cbrc.jp/alignment/software/),\n[IQTREE](http://www.iqtree.org/),\n[BLAST](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download).\n\n# Installation\nWe assume that users have already installed\n[Python3](https://www.python.org/downloads/) (3.7 or above).\n\n## Portable\nDownload from the [link](https://github.com/wpwupingwp/barcodefinder/releases),\nunpack and run with Internet for the first time.\n## Install with pip\n1. Install [Python](https://www.python.org/downloads/). 3.7 or newer is\n   required.\n\n2. Open command line, run\n```shell\npip install BarcodeFinder --user\n```\n## Initialization\nDuring the first running, `barcodefinder` will check and initialize the\nrunning environment.  Missing dependencies will be automatically installed.\n\nThis step requires Internet connection.\n```shell\n# Windows\npython -m BarcodeFinder init\n# Linux and MacOS\npython3 -m BarcodeFinder init\n```\n\nIf BarcodeFinder **FAILED** to install third-party software, please follow\nthese steps:\n\nFor Linux users with root privileges, just use the package manager:\n```\n# Ubuntu and Debian\nsudo apt install mafft ncbi-blast+ iqtree\n# Fedora (1)\nsudo dnf install mafft ncbi-blast+ iqtree\n# Fedora (2)\nsudo yum install mafft ncbi-blast+ iqtree\n# ArchLinux\nsudo pacman -S mafft ncbi-blast+ iqtree\n# FreeBSD\nsudo pkg install mafft ncbi-blast+ iqtree\n```\nFor MacOS users with root privileges, install `brew` if it has not been\ninstalled previously:\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\nIf any errors occur, install Xcode from the App Store and retry.\n\nThen:\n```\nbrew install blast mafft brewsci/science/iqtree\n```\nIf using Windows or lacking root privileges, users should follow these\ninstructions:\n1. BLAST+\n\n    * [Windows](https://www.ncbi.nlm.nih.gov/books/NBK52637/)\n    * [Linux and MacOS](https://www.ncbi.nlm.nih.gov/books/NBK52640/)\n2. MAFFT\n\n    * [Windows](https://mafft.cbrc.jp/alignment/software/windows.html)\n\n        Choose \"All-in-one version\", download and unzip. Then follow the steps\n        in the BLAST+ installation manual to set the `PATH`.\n    * [Linux](https://mafft.cbrc.jp/alignment/software/linux.html)\n\n        Choose \"Portable package\", download and unzip. Then follow the\n        instructions of BLAST+ to set the `PATH` for `MAFFT`.\n    * [MacOS](https://mafft.cbrc.jp/alignment/software/macosx.html)\n\n        Choose \"All-in-one version\", download and unzip. Then follow the steps\n        in the BLAST+ installation manual to set the `PATH`.\n3. IQ-TREE\n\n    * [Download](http://www.iqtree.org/#download)\n\n        Download the installer according to OS. Unzip and add the path of\n        subfolder `bin` to `PATH`.\n# Usage\nBarcodeFinder is a command-line program. Once a user opens the command line\n(Windows) or terminal (Linux and MacOS), just type the command:\n```\n# Windows\npython -m BarcodeFinder [input] -[options] -out [out_folder]\n# Linux and MacOS\npython3 -m BarcodeFinder [input] -[options] -out [out_folder]\n```\n## Quick examples\n1. Download all `rbcL` sequences of species in Poaceae family and do\n   pre-process.  \n```\n# Windows\npython -m BarcodeFinder.gb2fasta -gene rbcL -taxon Poaceae -out rbcL_Poaceae\n# Linux and macOS\npython3 -m BarcodeFinder.gb2fasta -gene rbcL -taxon Poaceae -out rbcL_Poaceae\n```\n2. Download all ITS sequences of _Rosa_ genus. Do pre-process and keep redundant\n   sequences:\n```\n# Windows\npython -m BarcodeFinder.gb2fasta -query internal transcribed spacer -taxon Rosa -out Rosa_its -uniq no\n# Linux and macOS\npython3 -m BarcodeFinder.gb2fasta -query internal transcribed spacer -taxon Rosa -out Rosa_its -uniq no\n```\n3. Download all Lamiaceae chloroplast genome sequences in the RefSeq database.\n   Then do pre-process and evaluation of variance (skip primer designing):\n```\n# Windows\npython -m BarcodeFinder -og cp -refseq -taxon Lamiaceae -out Lamiaceae_cp -skip_primer\n# Linux and macOS\npython3 -m BarcodeFinder -og cp -refseq -taxon Lamiaceae -out Lamiaceae_cp -skip_primer\n```\n4. Download sequences of _Zea mays_, set length between 100 bp and 3000 bp,\n   and then perform evaluation and primer designing. Note that the space in\n   the species name is replaced with underscore \"\\_\".\n```\n# Windows\npython -m BarcodeFinder -taxon Zea_mays -min_len 100 -max_len 3000 -out Zea_mays\n# Linux and macOS\npython3 -m BarcodeFinder -taxon Zea_mays -min_len 100 -max_len 3000 -out Zea_mays\n```\n5. Download all _Oryza_ mitochondria genomes in RefSeq database, keep the\n   longest sequence for each species and run a full analysis: \n```\n# Windows\npython -m BarcodeFinder -taxon Oryza -og mt -min_len 50000 -max_len 200000 -uniq longest -out Oryza_cp -refseq yes\n# Linux and macOS\npython3 -m BarcodeFinder -taxon Oryza -og mt -min_len 50000 -max_len 200000 -uniq longest -out Oryza_cp -refseq yes\n```\n## Sequence ID\nBarcodeFinder uses a uniform sequence id format for input fasta files and all output sequences.\n```\nLocus|Kingdom|Phylum|Class|Order|Family|Genus|Species|Accession|SpecimenID|Isolate\n# example\nrbcL|Viridiplantae|Streptophyta|Magnoliopsida|Poales|Poaceae|Oryza|longistaminata|MF998442|TAN:GB60B-2014|\n```\nThe order of the fields is fixed. The fields are separated by vertical bars\n(\"|\"). The space character (\" \") was disallowed and was replaced by an\nunderscore (\"\\_\"). Due to missing data, some fields may be empty. \n\n`Locus`: SeqName refers to the name of a sequence. Usually it is the gene\nname. For intergenic spacer, an underscore (\"\\_\") is used to connect two\ngene's names, e.g., \"geneA_geneB\".\n\nIf a valid sequence name cannot be found in the annotations of the GenBank\nfile, BarcodeFinder will use \"Unknown\" instead.\n\nFor chloroplast genes, if \"-rename\" option is set, the program will try to use\nregular expressions to fix potential errors in gene names.\n\n`Kingdom`: The kingdom (_Fungi, Viridiplantae, Metazoa_) of a species. For\nconvenience, a superkingdom (_Bacteria, Archaea, Eukaryota, Viruses, Viroids_)\nmay be used if the kingdom information for a sequence is missing.\n\n`Phylum`: The phylum of the species.\n\n`Class`: The class of the species.\n\nBecause some species' classes are empty (for instance, basal angiosperm), \nBarcodeFinder will guess the class of the species.\n\nGiven the taxonomy information in GenBank file:\n```\nEukaryota; Viridiplantae; Streptophyta; Embryophyta; Tracheophyta;\n    Spermatophyta; Magnoliophyta; basal Magnoliophyta; Amborellales;\n    Amborellaceae; Amborella.\n```\nBarcodeFinder will use \"basal Magnoliophyta\" as the class because this\nexpression locates before the order name (\"Amborellales\").\n\n`Order`: The order name of the species.\n\n`Family`: The family name of the species.\n\n`Genus`: The genus name of the species, i.e., the first part of the scientific\nname.\n\n`Species`: The specific epithet of the species, i.e., the second part of the\nscientific name of the species. It may contain the subspecies' name.\n\n`Accession`: The GenBank Accession number for the sequence. It does not\ncontain the record's version.\n\n`SpecimenID`: Specimen ID of the sequence. May be empty.\n\n`Isolate`: Isolate ID of the sequence. May be empty.\n\n## Command line\n:exclamation: In Linux and MacOS, Python2 is `python2` and Python3 is\n`python3`.  However, in Windows, Python3 is called `python`, too. Please\nnotice the difference.\n\n * Show help information of each module\n ```shell\n # Windows\n python -m BarcodeFinder -h\n python -m BarcodeFinder.gb2fasta -h\n python -m BarcodeFinder.evaluate -h\n python -m BarcodeFinder.primer -h\n # Linux and MacOS\n python3 -m BarcodeFinder.gb2fasta -h\n python3 -m BarcodeFinder.evaluate -h\n python3 -m BarcodeFinder.primer -h\n ```\n * Full process\n ```shell\n # Windows\n python -m BarcodeFinder -gene [gene name] -taxon [taxon name] -og [organelle type] -out [output name]\n # Linux and MacOS\n python3 -m BarcodeFinder -gene [gene name] -taxon [taxon name] -og [organelle type] -out [output name]\n ```\n * Collect, convert, and clean GenBank data with gb2fasta module\n ```shell\n # Windows\n python -m BarcodeFinder.gb2fasta -gene [gene name] -taxon [taxon name] -og [organelle type] -out [output name]\n # Linux and MacOS\n python3 -m BarcodeFinder.gb2fasta -gene [gene name] -taxon [taxon name] -og [organelle type] -out [output name]\n ```\n * Evaluate variance of given fasta files\n ```shell\n # Windows\n python -m BarcodeFinder.evaluate -fasta [fasta files]\n # Linux and MacOS\n python3 -m BarcodeFinder.evaluate -fasta [input file]\n ```\n * Design universal primers of given alignments.\n ```shell\n # Windows\n python -m BarcodeFinder.primer -aln [alignment files]\n # Linux and MacOS\n python3 -m BarcodeFinder.primer -aln [alignment files]\n ```\n# Input\nBarcodeFinder accepts:\n1. GenBank queries. Users can use \"-query\" or combine with any other filters;\n2. GenBank-format files.\n3. Unaligned fasta files. Each file is considered as one locus when evaluating\n   the variance;\n4. Alignments (fasta format).\n\n# Output\nAll results will be put in the output folder. If the user does not set the\noutput path via \"-out\", BarcodeFinder will create a folder labelled \"Result\".\n\nIn the output folder, several subfolders will be created.\n\n* GenBank\n\n    Raw GenBank files.\n\n* Divide\n\n    Fasta files converted from the GenBank file. Each file represents a\n    fragment of the original sequence according to the annotation.\n\n    For instance, a record in a \"rbcL.gb\" file may also contain atpB gene's\n    sequences. The \"rbcL.fasta\" file does not contain any upstream/downstream\n    sequences and \"atpB_rbcL.fasta\" does not have even one base of the atpB or\n    rbcL gene, just the spacer (assuming the annotation is precise).\n\n    User can skip this dividing step with the option \"-no_divide\".\n* Fasta\n\n    Raw fasta files users provided.\n* Unique\n\n    Fasta files after removing redundant sequences.\n* Expanded_fasta\n\n    To design primers, BarcodeFinder extend a sequence to its\n    upstream/downstream. Only used in the primer module.\n* Alignment\n\n    Aligned fasta files.\n\n    `.aln`: The aligned fasta files.\n\n    `.-consensus.fastq`: The fastq format of the consensus sequence of the\n    alignment. Note that it contains alignment gap (\"-\"). It is NOT\n    RECOMMENDED to be used directly because the consensus-generating algorithm is\n    optimised for primer design.\n* Evaluate\n\n    Including output files from the evaluation module.\n\n    `.pdf`: The PDF format of the figure containing the sliding-window scan\n    result of the alignment.\n\n    `.csv`: The CSV format file of the sliding-window scan result. `\"Index\"`\n    means the location of the base in the alignment.\n\n* Primer\n\n    Including output files from the primer module.\n\n    `.primer.fastq`: The fastq format file of a primer's sequence. It contains\n    two sequences, and the direction is 5' to 3'. The first is the forward\n    primer, and the second is the reverse primer. The quality of each base is\n    equal to its proportion of the column in the alignment. Note that the\n    sequence may contains ambiguous bases if it was not disabled.\n\n    `.primers.csv`: The list of primer pairs in CSV (comma-separated values\n    text) format.\n\n    `.candidate.fasta`: The candidate primers. This file may contains\n    thousands of records. Do not recommend paying attention to it.\n\n    `.candidate.fastq`: Again, the candidate primers. This time, each file has\n    the quality information that equals to the proportion of the bases in the \n    column of the alignment.\n\n* Temp\n\n    Including temporary files. Could be safely deleted .\n\n\nIn the output folder, there are some other important output files:\n\n* Primers.csv\n\n    The list of primer pairs in CSV (comma-separated values text) format.\n\n    Its title:\n    ```\n    Locus,Samples,Score,AvgProductLength,StdEV,MinProductLength,MaxProductLength,Coverage,Observed_Res,Tree_Res,PD_terminal,Entropy,LeftSeq,LeftTm,LeftAvgBitscore,LeftAvgMismatch,RightSeq,RightTm,RightAvgBitscore,RightAvgMismatch,DeltaTm,AlnStart,AlnEnd,AvgSeqStart,AvgSeqEnd\n    ```\n\n    `Locus`: The name of the locus/fragment.\n\n    `Samples`: The number of sequences used to find this pair of primers.\n\n    `Score`: The score of this pair of primers. Usually the higher, the better.\n\n    `AvgProductLength`: The average length of the DNA fragment amplified by\n    this pair of primers.\n\n    `StdEV`: The standard deviation of the AvgProductLength. A higher number\n    means the primer may amplify different lengths of DNA fragments.\n\n    `MinProductLength`: The minimum length of an amplified fragment.\n\n    `MaxProductLength`: The maximum length of an amplified fragment. Note that\n    all of these fields are calculated using given sequences.\n\n    `Coverage`: The coverage of this pair of primers over the sequences it\n    used.  Calculated with the BLAST result. High coverage means that the pair\n    is much more \"universal\".\n\n    `Observed_Res`: The `observed resolution` of the sub-alignment sliced by\n    the primer pair, which is equal to the number of unique sequences divided\n    by the number of total sequences. The value is between 0 and 1.\n\n    <img src=\"https://latex.codecogs.com/svg.latex?\\dpi{300}&space;R_{o}=\\frac{n_{uniq}}{n_{total}}\" title=\"R_{o}=\\frac{n_{uniq}}{n_{total}}\" />\n\n    `Tree_Res`: The `tree resolution` of the sub-alignment, which is equal to\n    the number of internal nodes on a phylogenetic tree (constructed from the\n    alignment) divided by number of terminal nodes. The value is between 0 and\n    1.\n\n    <img src=\"https://latex.codecogs.com/svg.latex?\\dpi{300}&space;R_{T}=\\frac{n_{internal}}{n_{terminal}}\" title=\"R_{T}=\\frac{n_{internal}}{n_{terminal}}\" />\n\n    `PD_terminal`: The average of the terminal branch's length. It's an edited\n    version of the `Phylogenetic Diversity` for DNA barcoding evaluation.\n\n    `Entropy`: The `Shannon equitability` index of the sub-alignment. The value\n    is between 0 and 1.\n\n    <img src=\"https://latex.codecogs.com/svg.latex?\\dpi{300}&space;E_{H}&space;=&space;\\frac{-&space;\\sum_{i=1}^{k}{p_{i}&space;\\log(p_{i})}}{\\log(k)}\" title=\"E_{H} = \\frac{- \\sum_{i=1}^{k}{p_{i} \\log(p_{i})}}{\\log(k)}\" />\n\n    `LeftSeq`: Sequence of the forward primer. The direction is 5' to 3'.\n\n    `LeftTm`: The melting temperature of the forward primer. The unit is\n    degree Celsius (掳C).\n\n    `LeftAvgBitscore`: The average raw bitscore of the forward primer, which\n    is calculated by BLAST.\n\n    `LeftAvgMismatch`: The average number of mismatched bases of the forward\n    primer, as counted by BLAST.\n\n    `RightSeq`: Sequence of reverse primer. The direction is 5' to 3'.\n\n    `RightTm`: The melting temperature of the reverse primer. The unit is\n    degrees Celsius (掳C).\n\n    `RightAvgBitscore`: The average raw bitscore of the reverse primer, which\n    is calculated by BLAST.\n\n    `RightAvgMismatch`: The average number of mismatched bases of the reverse\n    primer, as counted by BLAST.\n\n    `DeltaTm`: The difference in the melting temperatures of the forward and\n    reverse primers. A pair of primers with a high DeltaTm may result in\n    failure during the PCR experiment.\n\n    `AlnStart`: The location of the beginning of the forward primer (5',\n    leftmost of primer pairs) in the entire alignment.\n\n    `AlnEnd`: The location of the end of the reverse primer (5', rightmost of\n    primer pairs) in the entire alignment.\n\n    `AvgSeqStart`: The average beginning of the forward primer in the original\n    sequences.  *ONLY USED FOR DEBUG*.\n\n    `AvgSeqEnd`: The average end of the forward primer in the original\n    sequences.  *ONLY USED FOR DEBUG*.\n\n    The primer pairs are sorted by `Score`. Since the score may not fully\n    satisfy the user's specific considerations, it is suggested that primer\n    pairs be chosen manually if the first primer pair fails during the PCR\n    experiment.\n\n* Log.txt\n\n    The log file. Contains all the information printed on the screen.\n\n* Evaluation.csv\n\n    The summary of all loci/fragments, which only contains the variance\n    information for each fragment. One of the new field, `GapRatio`, means the\n    ratio of the gap (\"-\") in the alignment. `PD` means the original version\n    of the phylogenetic diversity and `PD_stem` means an alternative version\n    of it which only calculate the length of the stem branch in the\n    phylogenetic tree.\n\n# Options\n\nHere are some general options for the program and submodule:\n\n`-h`: Prints help messages of the program or one of the module. \n\n`-gb [filename]`: User-provided GenBank file or files.  Could be one or more\nfiles that separated by space.  \n\nFor instance,\n```\n# one file\n-gb sequence.gb\n# multiple files\n-gb matK.gb rbcL.gb Oryza.gb Homo_sapiens.gb\n```\n\n`-fasta [filename]`: User-provided unaligned fasta files. Could be one or\nmultiple.\n\n`-aln [filename]`: Alignment files that the user provides. Could be one ore\nmultiple.\n\nIt only supports the fasta format. Ambiguous bases and gaps (\"-\") are supported.\n\n`-out [folder name]`: The output folder's name. All results will be put into\nthe output folder.  If the user does not set an output path via \"-out\",\nBarcodeFinder will create a folder named \"Result\".\n\nBarcodeFinder does not overwrite the existing folder with the same name.\n\nIt is HIGHLY RECOMMENDED to use only letters, numbers and underscores (\"\\_\") in\nthe folder name to avoid mysterious errors caused by other Unicode characters.\n\nOptions below are for specific modules.\n\n## gb2fasta\n### Query \nOptions used for querying NCBI GenBank.\n\n`-taxon [taxonomy name]`: The taxonomy name. It could be any taxonomic rank\nfrom kingdom (same as \"-group\") to species, as long as the user inputs correct\nname (the scientific name of species or taxonomic group in latin, NOT\nENGLISH). It will restrict the query to the targeted taxonomy unit. Make sure\nto use quotation marks if `taxonomy` has more than one word or use underscore\nto replace space, for instance `\"Zea mays\"` or `Zea_mays`.  \n\n`-gene [gene name]`: The gene's name which the user wants to query in GenBank.\nIf the user wants to use logical expressions like \"OR\", \"AND\", \"NOT\", s/he\nshould use \"-query\" instead. If there is space in the gene's name, make sure\nto use quotation marks.\n\nNote that \"ITS\" is not a gene name--it is \"internal transcribed spacer\".\n\nSometimes \"-gene\" options may bring in unwanted sequences. For example, if a\nuser queries \"rbcL[gene]\" in GenBank, spacer sequences may contain _rbcL_ or\n_rbcL_'s upstream/downstream gene, such as \"atpB_rbcL spacer\" or _atpB_.\n\n`-og [ignore|both|no|mt|mitochondrion|cp|chloroplast|pl|plastid]`: Query\norganelle sequences or not. The default value is `ignore`.\n\n    - `ignore`: do not consider organelle type, same as GenBank website's\n      default setting.\n\n    - `both`: only query organelle sequences, including both plastid and\n      mitochondrion.\n\n    - `no`: exclude organelle sequences from the query.\n\n    - `cp` or `chloroplast` or `pl` or `plastid`: only query plastid sequences\n\n    - `mt` or `mitochondrion`: only query mitochondrion sequences.\n\n`-refseq [both|yes|no]`: query in RefSeq database or not. The default value is\n`both`.\n\n    - `both`: query all sequences in or not in RefSeq database, same as NCBI\n      website's default setting.\n\n    - `yes`: only query sequences in RefSeq database.\n\n    - `no`: exclude sequences in RefSeq database.\n\n[RefSeq](https://www.ncbi.nlm.nih.gov/refseq/about/) is considered to have \nhigher sequence and annotation quality than GenBank. This option could be used\nfor getting nuclear/organelle genomes from NCBI. In this situation (`-refseq\n    yes`), the length limit will be removed automatically.\n\n`-seq_n [number]`: Restrict numbers of sequences to be downloaded. The default\nvalue `0` means no restriction.\n\n`-min_len [length]`: The minimum length of the records downloaded from\nGenBank. The default value is `100` (bp). The number must be an integer.\n\n`-max_len [length]`: The maximum length of the records downloaded from\nGenBank. The default value is `10000` (bp). The number must be an integer.\n\n`-date_start [yyyy/mm/dd]`: The beginning of the release data range of the\nsequences, the format is yyyy/mm/dd.\n\n`-date_end [yyyy/mm/dd]`: The end of the release data range of the sequences,\nthe format is yyyy/mm/dd. \n\n`-molecular [all|DNA|RNA]`: The molecular type,\nwhich could be DNA or RNA. The\ndefault is `all`--no restriction.\n\n`-email [email address]`: NCBI GenBank database requires users to provide \nan email address in case of abnormal situations that NCBI need to contact \nthe user. For convenience, BarcodeFinder will use\n\"guest@example.com\" if the user does not provide an email address. _However_,\nit is better to provide a real email address for potential contact.\n\n`-query [expression]`: The query string provided by the user. It behaves in\nthe same manner as the query the user typed into the Search Box in NCBI\nGenBank's webpage.\n\nMake sure to follow NCBI's grammar for queries. It can contain several words.\nRemember to add quotation marks if an item contains more than one words, for\ninstance, `\"Homo sapiens\"[organism]`, or use underscore to replace space,\n`Homo_sapiens[organism]`.\n\n`-exclude [expression]`: Use this option to use negative option. For instance,\n\"-exclude Zea [organism]\" (do not include quotation marks) will add \" NOT\n(Zea[organism])\" to the query.\n\nThis option can be useful for excluding a specific taxon.\n```\n-taxon Zea -exclude \"Zea mays\"[organism]\n```\nThis will query all records in genus *Zea* while records of *Zea mays* will be\nexcluded.\n\nFor much more complex exclude options, please consider to use \"Advance search\"\nin GenBank website.\n\n`-group [all|animals|plants|fungi|protists|bacteria|archaea|viruses]`: To\nrestrict the query in given group.  The default value is `all`--no\nrestriction.\n\nIt is reported that the \"group\" filter may return abnormal records, for\ninstance, return plants' records when the group is \"animal\" and the\n\"organelle\" is \"chloroplast\". Furthermore, it may match a great number of\nrecords in GenBank. Hence, we strongly recommend using \"-taxon\" instead.\n\n### Divide\nOptions used for converting GenBank files to fasta files.\n\n`-no_divide`: If set, it will analyse the whole sequence instead of the\ndivided fragments. By default, BarcodeFinder divides one GenBank record into\nseveral fragments according to its annotation.\n\n`-rename`: If set, the program will try to rename genes. For instance, \"rbcl\"\nwill be renamed to \"rbcL\", and \"tRNA UAC\" will be renamed to \"trnVuac\", which\nconsists of \"trn\", the amino acid's letter and transcribed codon. This may be\nhelpful if the annotation has nonstandard uppercase/lowercase or naming format\nthat it can merge the same sequences to one file for the same locus having\nvariant names.\n\nIf using Windows operating system, consider using this option to avoid\ncontradictory filenames.\n\n`-unique [longest|first|no]`: The method used to remove redundant sequences.\nBarcodeFinder will remove redundant sequences to ensure only one sequence per\nspecies by default. A user can change its behaviour by setting different\nmethods.\n\n    - `first`: According to the records' order in the original GenBank file,\n      only the first sequence of the same species' same locus will be kept.\n      Others will be ignored directly. This is the default option due to\n      performance considerations.\n\n    - `longest`: Keep the longest sequence for one species. The program will\n      compare the sequence's length from the same species' same locus.\n\n    - `no`: Skip this step. All sequences will be kept.\n`-allow_mosaic_spacer`: If one gene nested with another gene, normally they\ndo not have spacers. The default value is `False`.\n\nHowever, some users want the fragments between two gene's beginnings and ends.\nThis option is for this specific purpose (e.g., matK-trnK_UUU). For normal\nusage, *do not recommend*.\n\n`-expand [number]`: The expansion length in upstream/downstream. If set,\nBarcodeFinder will expand the sequence to its upstream/downstream after the\ndividing step to find primer candidates. The default value is `0`.\n\nNote that this option is different with \"-max_len\". This option limits the\nlength of one annotation's sequence. The \"-max_len\" limits the whole\nsequence's length of one GenBank record.\n\n`-allow_repeat`: If genes repeated in downstream, this option will allow the\nrepeat region to be extracted, otherwise any repeated region will be omitted.\nThe default value is `False`.\n\n`-allow_invert_repeat`: If two genes invert-repeated in downstream, this\noption will allow the spacer of them to be extracted, otherwise the spacer\nwill be omitted. The default value is `False`.\n\nFor instance, geneA-geneB located in one invert-repeat region (IR) of\nchloroplast genome. In another IR region, there are geneB-geneA. This option\nwill extract sequences of two different direction as two unique spacers.\n\n`-max_name_len [number]`: The maximum length of a feature name. Some\nannotation's feature name in GenBank file is too long, and usually, they are\nnot the target sequence the user wants. By setting this option, BarcodeFinder\nwill truncate the annotation's feature name if it is too long. By default, the\nvalue is `50`.\n\n`-max_seq_len [value]`: The maximum length of a sequence for one annotation.\nSome annotations' sequences are too long (for instance, one gene has two\nexons, and its intron is longer than 10 Kb). This option will skip those long\nsequences.  By default, the value is `20000` (bp).\n\n## Evaluate\n`-ig` or `-ignore_gap`: ignore gaps in the alignment.\n\n`-iab` or `-ignore_ambigous`: ignore ambiguous bases in the alignment.\n\n`-quick`: skip sliding-window scan.\n\n`-size [number]`: the window size of the sliding window scan. The default\nvalue is `500`.\n\n`-step [number]`: the step size of the sliding window scan. The default value\nis `50`.\n\n`-skip_primer`: skip primer designing. The default value is `False`.\n\n## Primer design\n`-coverage [value]`: The minimum coverage of the base and primer. The default\nvalue is `0.5` (50%). It is used to remove primer candidates if its coverage\namong all sequences is smaller than the threshold. The coverage of primers is\ncalculated by BLAST.\n\n`-res [value]`: The minimum *observed resolution* of the fragments or primer\npairs. The default *value* is 0.3 (30%). The value should be in 0.0 to 1.0.\n\nBarcodeFinder uses the *observed resolution* instead of others because of the\nspeed. Also, it is considered to be the lower bound of the real resolution\nthat a fragment with a low *observed resolution* may not have a satisfactory\ntree resolution/phylogenetic diversity, either.\n\n`-pmin [length]`: The minimal length of the primer. The default *value* is 20.\n\n`-pmax [length]`: The maximal length of the primer. The default *value* is 25.\n\n`-topn [number]`: How many pairs of primers is kept for each input alignment.\nThe default value is `1`, i.e., only keep the _best_ primer pair according to\nits `score`.  To keep more pairs, set \"-t\" to more than 1.\n\n`-tmin [length]`: The minimum product length (include primer). The default\nvalue is `300` (bp). Note this limits the PCR product's length instead of the\nsub-alignment's length.\n\n`-tmax [length]`: The maximum product length (include primer). \n\nThe \"-tmin\" and \"-tmax\" are used to screen primer candidates. It uses BLAST\nresults to set the location of primers on each template sequence and\ncalculates the average lengths of the products. Because of the variance of\nspecies, the same locus may have different lengths in different species, plus\nwith the stretching of the alignment that gaps were added during the aligning,\nplease consider adding some *margins* for these two options.\n\nFor instance, if a user wants the amplified length to be smaller than 800 and\ngreater than 500, s/he could consider setting \"-tmin\" to 550 and \"-tmax\" to\n750.\n\n`-ambiguous [number]`: The maximum number of ambiguous bases allowed in one\nprimer. The default value is `4`.\n\n`-mismatch [number]`: The maximum number of mismatched bases in a primer. This\noptions is used to remove primer candidates if the BLAST results show that\nthere is too much mismatch. The default value is `4`.\n\n# Performance\nFor a taxon that is not very large and includes few fragments, BarcodeFinder\ncan finish the task in *minutes*. For a large taxon (such as the Asteraceae\nfamily or the whole class of the Poales) containing multiple fragments (such\nas the chloroplast genomes), the time to complete may be one hour or more on a\nPC or laptop.\n\nBarcodeFinder requires few memories (usually less than 0.5 GB, although, for a\nlarge taxon BLAST may require more) and few CPUs (one core is enough). It can\nrun very well on a normal PC. Multiple CPU cores may be helpful for the\nalignment and tree construction steps.\n\nFor Windows users, MAFFT [may be very slow due to anti-virus\nsoftware](https://mafft.cbrc.jp/alignment/software/windows_without_cygwin.html).\nPlease consider following [this instruction](https://mafft.cbrc.jp/alignment/software/ubuntu_on_windows.html) to install\nUbuntu on Windows to obtain better results.\n\n# Citation\nAs yet unpublished.\n\n# License\nThe software itself is licensed under\n[AGPL-3.0](https://github.com/wpwupingwp/barcodefinder/blob/master/LICENSE) (**not include third-party\nsoftware**).\n\n# Q&A\nPlease submit your questions in the\n[Issue](https://github.com/wpwupingwp/barcodefinder/issues) page :smiley:\n* Q: I got error message that the program failed to install\n  MAFFT/BLAST/IQTREE.\n\n  A: Uncommonly, users in specific area have connection issue for those\n  websites. Users have to manually download packages and install (see\n  [Software](#software) for the download links).\n\n  For Windows users, please download and unpack files into\n  `%HOMEDRIVE%%HOMEPATH%/.barcodefinder`.\n\n  For Linux  and MacOS users, please download and unpack files into\n  `~/.barcodefinder`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wpwupingwp/BarcodeFinder",
    "keywords": "",
    "license": "GNU AGPL v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BarcodeFinder",
    "package_url": "https://pypi.org/project/BarcodeFinder/",
    "platform": "",
    "project_url": "https://pypi.org/project/BarcodeFinder/",
    "project_urls": {
      "Homepage": "https://github.com/wpwupingwp/BarcodeFinder"
    },
    "release_url": "https://pypi.org/project/BarcodeFinder/0.9.49/",
    "requires_dist": [
      "biopython (>=1.72)",
      "certifi (>=2018.11.29)",
      "coloredlogs (>=10.0)",
      "matplotlib (>=3.0.0)",
      "numpy (>=1.15.2)",
      "pip (>=18.0)",
      "primer3-py (>=0.6.0)",
      "wheel (>=0.32.3)"
    ],
    "requires_python": "",
    "summary": "All-in-one solution for discovering novel DNA barcode",
    "version": "0.9.49",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10163735,
  "releases": {
    "0.9.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "551155603a3cbf4010b2dfb97c1b8131085bf2b84990935d97e95f4a31f7a7ea",
          "md5": "c51baa57a7b56b8f8a00eac82b94abf4",
          "sha256": "22a4fe9878eeb03cbaa238a79123bf64b775bbc70da62d2a9572ca18c93c4130"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.26-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c51baa57a7b56b8f8a00eac82b94abf4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42721,
        "upload_time": "2019-03-13T08:51:56",
        "upload_time_iso_8601": "2019-03-13T08:51:56.014653Z",
        "url": "https://files.pythonhosted.org/packages/55/11/55603a3cbf4010b2dfb97c1b8131085bf2b84990935d97e95f4a31f7a7ea/BarcodeFinder-0.9.26-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da5b022fa07a2eda2661f91baabf00fbe03c56544658bfe705c88afcaf91e856",
          "md5": "7845bd2bb553066e5f4fd489cb4e3bca",
          "sha256": "b5122b3ca6223879591feb8b7278d7553c3c9bd099804f249b166fd263d9f701"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.27-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7845bd2bb553066e5f4fd489cb4e3bca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42721,
        "upload_time": "2019-03-13T08:59:11",
        "upload_time_iso_8601": "2019-03-13T08:59:11.964184Z",
        "url": "https://files.pythonhosted.org/packages/da/5b/022fa07a2eda2661f91baabf00fbe03c56544658bfe705c88afcaf91e856/BarcodeFinder-0.9.27-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.28": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4a198c196d36a9a53193615f64fcc3be4a840a0204afc49da614fd818e6ceab",
          "md5": "81aa1c6932fdecfa9057d986dda8de73",
          "sha256": "45dc2de29ea1222d70cbde178790d362f178ab1285b54bc36414efed5210c43e"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.28-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81aa1c6932fdecfa9057d986dda8de73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42722,
        "upload_time": "2019-03-21T09:04:33",
        "upload_time_iso_8601": "2019-03-21T09:04:33.036006Z",
        "url": "https://files.pythonhosted.org/packages/a4/a1/98c196d36a9a53193615f64fcc3be4a840a0204afc49da614fd818e6ceab/BarcodeFinder-0.9.28-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e95f20fb640952ecfd99a7926073428df8f674503e954301571294967fbdbd26",
          "md5": "72215fe1f3ce7276cad0c62d7b4fa4c2",
          "sha256": "3534af65f9d444cb25cb1559fe49c6240db903681d224196db38a911749cccd8"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.29-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72215fe1f3ce7276cad0c62d7b4fa4c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42730,
        "upload_time": "2019-03-21T10:37:23",
        "upload_time_iso_8601": "2019-03-21T10:37:23.986424Z",
        "url": "https://files.pythonhosted.org/packages/e9/5f/20fb640952ecfd99a7926073428df8f674503e954301571294967fbdbd26/BarcodeFinder-0.9.29-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2c59f232e6a868c695c75414ed77158ddf2e08af2af78507344013452980e4a",
          "md5": "00248bccf3abeebbcac41dee17d69427",
          "sha256": "d616d1bef0617611bfc6548970a012308ebb6773a86a65737e2c4748b62c01e2"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.30-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00248bccf3abeebbcac41dee17d69427",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42730,
        "upload_time": "2019-03-21T10:44:31",
        "upload_time_iso_8601": "2019-03-21T10:44:31.722814Z",
        "url": "https://files.pythonhosted.org/packages/a2/c5/9f232e6a868c695c75414ed77158ddf2e08af2af78507344013452980e4a/BarcodeFinder-0.9.30-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "123236476f5e764dd2d270b7073a0194c0ad363bef37f4a9692d8d2123c0a48d",
          "md5": "e0d66c6c9a2ef0b20acf22265cef9e24",
          "sha256": "5fbedf554a69e89c4de9107ebd17308b65c72dabc5e3fe62c7a7886f26e6ddcc"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.31-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0d66c6c9a2ef0b20acf22265cef9e24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42765,
        "upload_time": "2019-03-22T03:22:00",
        "upload_time_iso_8601": "2019-03-22T03:22:00.520322Z",
        "url": "https://files.pythonhosted.org/packages/12/32/36476f5e764dd2d270b7073a0194c0ad363bef37f4a9692d8d2123c0a48d/BarcodeFinder-0.9.31-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "defb2e200713ea4812834ec06181b09ad87be00cb4234cdf6e7c3e2457511603",
          "md5": "e0e6a369a7bc09770b382d36727cf825",
          "sha256": "245af94cbc9fafe4e1ebfe7930e231ac6437c57908683a5ebea35d70f508ee28"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.32-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0e6a369a7bc09770b382d36727cf825",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43112,
        "upload_time": "2019-03-29T03:28:59",
        "upload_time_iso_8601": "2019-03-29T03:28:59.342158Z",
        "url": "https://files.pythonhosted.org/packages/de/fb/2e200713ea4812834ec06181b09ad87be00cb4234cdf6e7c3e2457511603/BarcodeFinder-0.9.32-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e627887ea70f2a5d07ed8686b4ad4711758061e9f669ffb17cd0a53776df898",
          "md5": "b6bf3dc40a90f321645078069702844e",
          "sha256": "af20c81f4dc6f6c298171937f7e57c0da19988fccd148cd9b1e8a1a7ecd892ce"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.33-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6bf3dc40a90f321645078069702844e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43101,
        "upload_time": "2019-04-01T03:35:13",
        "upload_time_iso_8601": "2019-04-01T03:35:13.945320Z",
        "url": "https://files.pythonhosted.org/packages/6e/62/7887ea70f2a5d07ed8686b4ad4711758061e9f669ffb17cd0a53776df898/BarcodeFinder-0.9.33-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.34": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6da4ad26bbdea05233a22049a3f9d5aeccee99e6713d0fe9929985cea05c3d0c",
          "md5": "1e15747c5d19c9643a78657a17a23398",
          "sha256": "2ef338a90c073b4f4c0067895c2e02ba19837b474c26208910fd371606aaa411"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.34-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e15747c5d19c9643a78657a17a23398",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43161,
        "upload_time": "2019-04-01T08:20:24",
        "upload_time_iso_8601": "2019-04-01T08:20:24.256851Z",
        "url": "https://files.pythonhosted.org/packages/6d/a4/ad26bbdea05233a22049a3f9d5aeccee99e6713d0fe9929985cea05c3d0c/BarcodeFinder-0.9.34-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a7030f152cc2ecb80568469f8f3aebf87f22b3249e1f2f9e69f689852ca4a50",
          "md5": "16ad671aa0f772f93d2023661d615e42",
          "sha256": "84c44a075b9e98b70abf71e5e1785ea468cc1f618b13a4a863b8f4a04e181a07"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.35-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16ad671aa0f772f93d2023661d615e42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43207,
        "upload_time": "2019-04-10T08:32:39",
        "upload_time_iso_8601": "2019-04-10T08:32:39.114790Z",
        "url": "https://files.pythonhosted.org/packages/3a/70/30f152cc2ecb80568469f8f3aebf87f22b3249e1f2f9e69f689852ca4a50/BarcodeFinder-0.9.35-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c72e47a8c9967921733b8245293738bb2fdf3c54c001b1d8a01a89107328244b",
          "md5": "da4527aa09fd83f6def4cf814564b8df",
          "sha256": "d54df62328fb97b2cfa94592627dd9af54cacc8f512528af15d1212bd80a870e"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.36-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da4527aa09fd83f6def4cf814564b8df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43264,
        "upload_time": "2019-05-13T02:18:34",
        "upload_time_iso_8601": "2019-05-13T02:18:34.827503Z",
        "url": "https://files.pythonhosted.org/packages/c7/2e/47a8c9967921733b8245293738bb2fdf3c54c001b1d8a01a89107328244b/BarcodeFinder-0.9.36-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.37": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4e7f49c535be9f0ed3a34832c9a7c33a186e6944e04306c22985c510b8b7c5d",
          "md5": "8bee2629319f847e2960d03d479e437f",
          "sha256": "77f69e7b11189a548232dae8ab06ec2d86ac81b8675ae1aa67e9858bede8aa3a"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.37-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bee2629319f847e2960d03d479e437f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43317,
        "upload_time": "2019-06-10T07:26:57",
        "upload_time_iso_8601": "2019-06-10T07:26:57.273425Z",
        "url": "https://files.pythonhosted.org/packages/d4/e7/f49c535be9f0ed3a34832c9a7c33a186e6944e04306c22985c510b8b7c5d/BarcodeFinder-0.9.37-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.38": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20677cb32c34e13d0b70889b945277489215dc57f95720f3b1c1c711e43e6599",
          "md5": "1d585fcbf8fb337d515ec154a127528e",
          "sha256": "37976277eb0434cea6c90905e2554482b98df10d8f039917c35172af755c2962"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.38-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d585fcbf8fb337d515ec154a127528e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43484,
        "upload_time": "2019-06-27T10:17:58",
        "upload_time_iso_8601": "2019-06-27T10:17:58.342062Z",
        "url": "https://files.pythonhosted.org/packages/20/67/7cb32c34e13d0b70889b945277489215dc57f95720f3b1c1c711e43e6599/BarcodeFinder-0.9.38-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.39": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66c011728a53b3fc45e845ba5740ba0a909385562c743796d3f0c74f14990d99",
          "md5": "636e3bc2ac94788f3b82f3d7f94d8bb2",
          "sha256": "157466680bf4d81ec463b904b80ede3ae04dd698f6a3161579c185d0410df3eb"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.39-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "636e3bc2ac94788f3b82f3d7f94d8bb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44107,
        "upload_time": "2019-07-08T09:13:32",
        "upload_time_iso_8601": "2019-07-08T09:13:32.929612Z",
        "url": "https://files.pythonhosted.org/packages/66/c0/11728a53b3fc45e845ba5740ba0a909385562c743796d3f0c74f14990d99/BarcodeFinder-0.9.39-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.40": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cd186e45f5c87aeb18a96b4c826f3adea16c3c862fb014356c7212af1f82c02",
          "md5": "012cf6a431979ba2182d6849cc57bbc0",
          "sha256": "4f2feb5ebd27aca209bc15b3392b2efe15d9e4453b0b284777952559f45f1e9d"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.40-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "012cf6a431979ba2182d6849cc57bbc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44716,
        "upload_time": "2019-07-16T02:10:01",
        "upload_time_iso_8601": "2019-07-16T02:10:01.388383Z",
        "url": "https://files.pythonhosted.org/packages/9c/d1/86e45f5c87aeb18a96b4c826f3adea16c3c862fb014356c7212af1f82c02/BarcodeFinder-0.9.40-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.41": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c88e423f4439ac193c3af82a982cb727b73ccc02e6ee2793f9d0d1081ca2596",
          "md5": "c6a48f1b96c4a7e4445775bab5534967",
          "sha256": "8ddcc875be7b9bb68895e570144c0f934dbf1fe8880f8ceaf309362b52600a14"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.41-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6a48f1b96c4a7e4445775bab5534967",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44709,
        "upload_time": "2019-07-30T04:17:44",
        "upload_time_iso_8601": "2019-07-30T04:17:44.708500Z",
        "url": "https://files.pythonhosted.org/packages/8c/88/e423f4439ac193c3af82a982cb727b73ccc02e6ee2793f9d0d1081ca2596/BarcodeFinder-0.9.41-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.42": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe2d5f8360106dbc25364ba451c2205c4baaab52bce61581f00c5bd0ca47c042",
          "md5": "17f875ff03e9e0c23424b4b9f2d767c3",
          "sha256": "ee078aac611d854f5dbeb26d3844aad5ce842fe26e37be39d7cf4a3189e26de7"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.42-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17f875ff03e9e0c23424b4b9f2d767c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56575,
        "upload_time": "2019-08-14T09:07:10",
        "upload_time_iso_8601": "2019-08-14T09:07:10.467256Z",
        "url": "https://files.pythonhosted.org/packages/fe/2d/5f8360106dbc25364ba451c2205c4baaab52bce61581f00c5bd0ca47c042/BarcodeFinder-0.9.42-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.43": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f03ea0c21a365842db701037b00f0953725bca218c0341551b516ce89bbeeaa7",
          "md5": "f62df5308bdd376a998921375e225e9a",
          "sha256": "e531e11ab0513b18a70e1ed532347c48798eb329d2f5d18fafc31d73212f37d0"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.43-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f62df5308bdd376a998921375e225e9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 62561,
        "upload_time": "2019-08-23T13:51:18",
        "upload_time_iso_8601": "2019-08-23T13:51:18.343485Z",
        "url": "https://files.pythonhosted.org/packages/f0/3e/a0c21a365842db701037b00f0953725bca218c0341551b516ce89bbeeaa7/BarcodeFinder-0.9.43-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.44": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee5ca8189ecc05b97270185f56a4ea14112aaca2c6554517460d7989fb43f401",
          "md5": "ab0b1a355d162ebb04e13c066902b6ba",
          "sha256": "18460e2a885f2f62caea85971fa2580d9ecbb921cc24dd1e8f4347c0b88911eb"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.44-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab0b1a355d162ebb04e13c066902b6ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 62529,
        "upload_time": "2019-09-17T07:43:49",
        "upload_time_iso_8601": "2019-09-17T07:43:49.187475Z",
        "url": "https://files.pythonhosted.org/packages/ee/5c/a8189ecc05b97270185f56a4ea14112aaca2c6554517460d7989fb43f401/BarcodeFinder-0.9.44-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.45": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0054e9207f6eb2d61646dfc2136daadb7ff31d5c6e264b6babb67f7db178c577",
          "md5": "abf46a1eb9ee163598a5acf69769c2e7",
          "sha256": "46871e594a86dd181a273a5567ae36762d0d607f26f76e196b8ffa36f62bb65f"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.45-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abf46a1eb9ee163598a5acf69769c2e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 49607,
        "upload_time": "2020-05-11T10:45:42",
        "upload_time_iso_8601": "2020-05-11T10:45:42.668420Z",
        "url": "https://files.pythonhosted.org/packages/00/54/e9207f6eb2d61646dfc2136daadb7ff31d5c6e264b6babb67f7db178c577/BarcodeFinder-0.9.45-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.47": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30ebfff9b0ad3c6e69f64f7071d89d2a5082605ee326e8f8de7206e70b2d805d",
          "md5": "173022c382d470cd7460ac1e5202911e",
          "sha256": "38061735739e66dcdda98a60fc19479e2995ad4fe68fdd21c9f01436dbff83fc"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.47-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "173022c382d470cd7460ac1e5202911e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 64002,
        "upload_time": "2020-05-17T13:36:52",
        "upload_time_iso_8601": "2020-05-17T13:36:52.589800Z",
        "url": "https://files.pythonhosted.org/packages/30/eb/fff9b0ad3c6e69f64f7071d89d2a5082605ee326e8f8de7206e70b2d805d/BarcodeFinder-0.9.47-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.48": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f013e72385950ced6e4250ef9b26fb48c43b5b3b935515b36c4abee3a808623",
          "md5": "cf5fe12b7b0749f9cc4c58b85429f890",
          "sha256": "e4abe601c3387cd43d5a974adf109887f3518ab1dd68270539b0d650bcae97a5"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.48-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf5fe12b7b0749f9cc4c58b85429f890",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70243,
        "upload_time": "2021-02-19T03:54:50",
        "upload_time_iso_8601": "2021-02-19T03:54:50.409195Z",
        "url": "https://files.pythonhosted.org/packages/7f/01/3e72385950ced6e4250ef9b26fb48c43b5b3b935515b36c4abee3a808623/BarcodeFinder-0.9.48-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.49": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39950bb339d195fe8b4b64fd0ea1ccc4cd5943ca6c79629091fe114db70fa3ec",
          "md5": "40af5a36a41766c21b86c7e44590e329",
          "sha256": "a9436122b4ef1571ade352184fbb6d81d59f808a9863bf26defa2283970c1322"
        },
        "downloads": -1,
        "filename": "BarcodeFinder-0.9.49-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40af5a36a41766c21b86c7e44590e329",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 71158,
        "upload_time": "2021-04-25T07:38:11",
        "upload_time_iso_8601": "2021-04-25T07:38:11.313940Z",
        "url": "https://files.pythonhosted.org/packages/39/95/0bb339d195fe8b4b64fd0ea1ccc4cd5943ca6c79629091fe114db70fa3ec/BarcodeFinder-0.9.49-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39950bb339d195fe8b4b64fd0ea1ccc4cd5943ca6c79629091fe114db70fa3ec",
        "md5": "40af5a36a41766c21b86c7e44590e329",
        "sha256": "a9436122b4ef1571ade352184fbb6d81d59f808a9863bf26defa2283970c1322"
      },
      "downloads": -1,
      "filename": "BarcodeFinder-0.9.49-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "40af5a36a41766c21b86c7e44590e329",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 71158,
      "upload_time": "2021-04-25T07:38:11",
      "upload_time_iso_8601": "2021-04-25T07:38:11.313940Z",
      "url": "https://files.pythonhosted.org/packages/39/95/0bb339d195fe8b4b64fd0ea1ccc4cd5943ca6c79629091fe114db70fa3ec/BarcodeFinder-0.9.49-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}