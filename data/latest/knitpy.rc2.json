{
  "info": {
    "author": "Jan Schulz",
    "author_email": "jasc@gmx.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Utilities"
    ],
    "description": "knitpy: Elegant, flexible and fast dynamic report generation with python\r\n========================================================================\r\n\r\nThis is a port of knitr (http://yihui.name/knitr/) and rmarkdown\r\n(http://rmarkdown.rstudio.com/) to python.\r\n\r\nTo start with, you can run the `example overview\r\ndocument <examples/knitpy_overview.pymd>`__. To convert to all defined\r\noutput formats, run\r\n``knitpy --to=\"all\"  -- examples\\knitpy_overview.pymd``. This will\r\nproduce a ``html``, ``docx`` and ``pdf`` output (if you have\r\n``pdflatex`` in path). You can view a `markdown\r\nrendered <examples/knitpy_overview.html_document.md>`__ and a `html\r\nrendered <http://htmlpreview.github.io/?https://github.com/JanSchulz/knitpy/blob/master/examples/knitpy_overview.html>`__\r\nversion of this file. It's not yet as pretty as the knitr version...\r\n\r\nFor a description of the code format see http://rmarkdown.rstudio.com/\r\nand replace ``{r <r style options>}`` by\r\n``{python <python style options>}`` and of course use python code\r\nblocks...\r\n\r\nIt uses the IPython kernel infrastructure to execute code, so all\r\nkernels for IPython are (aem... can potentially be) supported.\r\n\r\nWhat works:\r\n-----------\r\n\r\n-  code blocks and inline code\r\n-  plots are shown inline\r\n-  ``knitpy filename.pymd`` will convert filename ``filename.pymd`` to\r\n   the defaul output format ``html``.\r\n-  output formats ``html``, ``pdf`` and ``docx``. Change with\r\n   ``--to=<format>``\r\n-  ``--to=all`` will convert to all export formats specified in the yaml\r\n   header\r\n-  code chunk arguments ``eval``, ``results`` (apart form \"hold\"),\r\n   ``include`` and ``echo``\r\n-  errors in code chunks are shown in the document\r\n-  uses the IPython display framework, so rich output for objects\r\n   implementing ``_repr_html_()`` or ``_repr_markdown_()``. Mimetypes\r\n   not understood by the final output format are automatically converted\r\n   via pandoc.\r\n-  config files: generate an empty one with\r\n   ``knitpy --init --profile-dir=.``\r\n-  using it from python (-> your app/ ipython notebook):\r\n   ``import knitpy; knitpy.render(filename.pymd, output=\"html\")`` will\r\n   convert ``filename.pymd`` to ``filename.html``. ``output=all`` will\r\n   convert to all document types (as specified in the YAML header of the\r\n   document). The call will return a list of converted documents.\r\n-  debugging with \\`\\ ``--debug``, ``--kernel-debug=True``,\r\n   ``--output-debug=True``\r\n\r\nWhat does not work (=everything else :-) ):\r\n-------------------------------------------\r\n\r\n-  most YAML headers are currently ignored\r\n-  some advertised command-line options are ignored\r\n-  most code chunk arguments (apart from the ones above) are ignored\r\n-  probably lots of other stuff...\r\n\r\nTodo\r\n----\r\n\r\n-  fix the above...\r\n-  refactor the parsing, so that it is line based\r\n-  errors make more sense, because it knows the line (\"block starting at\r\n   line....\")\r\n-  add some traits for the default pdflatex/pandoc executeable, so they\r\n   don't have to be in path\r\n-  the final output has to configure the \"includeable\" markup docs\r\n-  html in html\r\n-  latex in html?\r\n-  ...\r\n-  more arguments for code blocks\r\n-  more output formats? -> make output format configurable\r\n-  more unit-/outputtests...\r\n-  codeblocks + inline\r\n-  yaml\r\n-  errors\r\n-  pandoc caller (via mocks?)\r\n-  Documentation\r\n-  what works? what is not supported?\r\n-  differences to rmarkdown / knitr?\r\n-  implement more kernel engines (R...) and make it possible to\r\n   supply/change ones (for installed kernels for python2/3 or coda\r\n   environments)\r\n-  implement a nice default html template\r\n-  Try https://github.com/timtylin/scholdoc-templates\r\n-  implement \"code tidying\"\r\n-  maybe use https://github.com/google/yapf?\r\n-  use metadata in keep\\_md output (like rmarkdown does...\r\n-  should output ``#<title>\\n<author>\\n<date>`` before the rest\r\n-  remove the first yaml block, but keep everything else...\r\n-  chunk caching",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/janschulz/knitpy/issues",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "knitpy",
    "package_url": "https://pypi.org/project/knitpy/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/knitpy/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/janschulz/knitpy/issues"
    },
    "release_url": "https://pypi.org/project/knitpy/0.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Elegant, flexible and fast dynamic report generation with python",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10945395,
  "releases": {
    "0.1.0": [],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03d59e5139a91ca35603b6a3d1767dece2f9b51535a764eb77b3dbef8c22c4e0",
          "md5": "139161de008277045f4ede28e499e9d4",
          "sha256": "c4e7f99d1d827f87fe691c3f28dc674dedc52b2bd362b0d45b4a0b54cae4cb94"
        },
        "downloads": -1,
        "filename": "knitpy-0.1.1.zip",
        "has_sig": false,
        "md5_digest": "139161de008277045f4ede28e499e9d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25559,
        "upload_time": "2015-04-01T07:46:36",
        "upload_time_iso_8601": "2015-04-01T07:46:36.940697Z",
        "url": "https://files.pythonhosted.org/packages/03/d5/9e5139a91ca35603b6a3d1767dece2f9b51535a764eb77b3dbef8c22c4e0/knitpy-0.1.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03d59e5139a91ca35603b6a3d1767dece2f9b51535a764eb77b3dbef8c22c4e0",
        "md5": "139161de008277045f4ede28e499e9d4",
        "sha256": "c4e7f99d1d827f87fe691c3f28dc674dedc52b2bd362b0d45b4a0b54cae4cb94"
      },
      "downloads": -1,
      "filename": "knitpy-0.1.1.zip",
      "has_sig": false,
      "md5_digest": "139161de008277045f4ede28e499e9d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25559,
      "upload_time": "2015-04-01T07:46:36",
      "upload_time_iso_8601": "2015-04-01T07:46:36.940697Z",
      "url": "https://files.pythonhosted.org/packages/03/d5/9e5139a91ca35603b6a3d1767dece2f9b51535a764eb77b3dbef8c22c4e0/knitpy-0.1.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}