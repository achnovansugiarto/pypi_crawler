{
  "info": {
    "author": "HPE CloudVolumes",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "[HPE Cloud Volumes](https://cloudvolumes.hpe.com) is an enterprise-based cloud storage service that provides block storage as a service for use with AWS and Azure cloud services. You can add volumes to your cloud virtual machines on an as-needed basis and at the size and performance level that best fits the needs of your company. For each volume that you add, you can also create snapshots, create clones, encrypt data, add users, and monitor performance. In addition, HPE Cloud Volumes enables you to replicate data between on-premises HPE Nimble Storage arrays and the public cloud without incurring the typical ingress costs.\n\nThis library provides a pythonic interface to the HPE Cloud Volumes REST API. The code abstracts the lower-level API calls into python objects that you can easily incorporate into any automation or devops workflows. Use it to create, modify and delete most resources, as well as perform other tasks like snapshotting, cloning, restoring data, etc.\n\n\n## Requirements\n* Python **3.6+**.\n* Valid HPE Cloud Volumes account.\n\n\n## Installation\n* Make a new python virtual environment with your tool of choice.\n* `pip install hpecloudvolumes` and you can now import the module and use it in any python script.\n\n\n## Getting Started\nThe HPE Cloud Volumes service is available in several regions around the world. These regions are grouped into geographies that contain the REST API servers we want to communicate with. You need to know which geo to talk to when instantiating the client. For example, if you have resources in `us-east`, then you need to connect with endpoints in the `us` geo.\n\nTo instantiate a client, run the following:\n\n```python\n>>> from cloudvolumes.client import CloudVolumesClient\n>>> client = CloudVolumesClient(GEO, access_key=YOUR_ACCESS_KEY, access_secret=YOUR_ACCESS_SECRET)\n```\n\nThe `access_key` and `access_secret` parameters don't need to be provided with the function call. You can use the `CLOUDVOLUMES_ACCESS_KEY` and `CLOUDVOLUMES_ACCESS_SECRET` environment variables instead. If you don't have an access key and secret, or simply misplaced them, you can visit the User Settings section of the Cloud Volumes portal to generate new ones.\n\n\n## Working with Resources\nEvery resource type available in the portal is accessible as property of the base `CloudVolumesClient` instance. Currently, that includes the following:\n* `client.cloud_volumes` - Block storage volumes with the networking in place that makes them available for use by cloud virtual machines.\n* `client.replication_stores` - Storage buckets that serve as replication targets.\n* `client.onprem_replication_partners` - The on-premises Nimble arrays that can serve as replication partners.\n* `client.replication_partnerships` - Currently established links between On-Premises arrays and Replication Stores.\n* `client.replica_volumes` - Block storage volumes that replicated to the service, but do not have the network configured for use by cloud virtual machines. They are located inside Replication Stores, and came from On-Premises Replication Partners through a Replication Partnership.\n\nEach resource type has a `list()` method that retrieves a list of resources, and a `get()` method to grab a specific one. The object returned will have all of its attributes available under a `.attrs` property and a number of methods that map to resource-specific actions (like clone).\n\n```python\n>>> client.cloud_volumes.list()\n[<CloudVolume(id=3214235, name=CloudVolumeTest)>]\n>>> cv = client.cloud_volumes.get(3214235)\n>>> cv.attrs\n{'assigned_initiators': [], 'cloud_accounts': [{'href': 'https://us.hpecloudvolumes.com/api/v2/session/cloud_accounts/ahewwetyriguy23hr',\n'id': 'ChYuNqkZCRBctJltRM1qErUEVgqSiaHL81fpFZ1C'}], 'cv_region': {'href': 'https://us.hpecloudvolumes.com/api/v2/cv_regions/3', 'id': 3,\n'name': 'us-test'}, 'limit_iops': 300, 'limit_mbps': 3, 'marked_for_deletion': False, 'name': 'test-cloud-account-clone.docker',\n'perf_policy': 'Other Workloads', 'private_cloud': {'aws': {'vpc': 'vpc-1f354a7b'}}, 'size': 1024, 'sn': 'wekrq43hbklsrt4', 'subnet':\n'192.168.0.0/16', 'user': {'id': 'wertuih2io345yhjk'}, 'volume_type': 'GPF'}\n>>> help(cv)\nHelp on CloudVolume in module cloudvolumes.cloud_volumes object:\n\nclass CloudVolume(cloudvolumes.resource.Resource)\n |  CloudVolume(id, attrs=None, client=None, collection=None)\n |\n |  Method resolution order:\n |      CloudVolume\n |      cloudvolumes.resource.Resource\n |      builtins.object\n |\n |  Methods defined here:\n |\n |  attach(self, initiator_ip)\n |\n |  convert(self, replication_store, replica_volume_collection)\n |\n |  create(self, name, region, size, iops, perf_policy, schedule, retention, private_cloud, existing_cloud_subnet, encryption, volume_type, private_cloud_resource_group=None, cloud_account_id=None)\n |\n |  delete(self, force=False)\n |\n |  detach(self, initiator_ip)\n |\n |  replicate(self, replication_store=None, replica_volume_collection=None, schedule=None, retention=None)\n |\n |  take_snapshot(self, name, description=None)\n |\n |  update(self, name=None, size=None, iops=None, schedule=None, retention=None, multi_initiator=None)\n |\n ...\n```\n\n### Errors\nAll errors inherit from a base `CloudVolumesError` exception.\n* `ConnectionError` maps to issues attempting to contact CloudVolumes.\n* `AuthenticationError` is raised for response status codes of `401` or `403`. These indicate that the login token expired or that you're accessing a restricted resource.\n* `InternalError` for any `500`+ status codes.\n* `APIError` covers everything else.\n\n\n## Command Line Interface\nThis module will install the `./cloudvolumes` shell script. Use `./cloudvolumes --help` for more information on the available commands.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://cloudvolumes.hpe.com",
    "keywords": "cloud volumes storage nimble hpe",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hpecloudvolumes",
    "package_url": "https://pypi.org/project/hpecloudvolumes/",
    "platform": "",
    "project_url": "https://pypi.org/project/hpecloudvolumes/",
    "project_urls": {
      "Homepage": "https://cloudvolumes.hpe.com",
      "Source": "https://github.com/nimblestorage/hpecloudvolumes"
    },
    "release_url": "https://pypi.org/project/hpecloudvolumes/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "HPE CloudVolumes Python Library",
    "version": "1.0.2",
    "yanked": true,
    "yanked_reason": null
  },
  "last_serial": 7112830,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6825e1de7213be30e7d177977c09e87ba87cecd778d2f05738e1514fba0031b",
          "md5": "8a4a350a35124ea021d798614e55aea9",
          "sha256": "3ef4fb8f16dc28554b18a4ae4890f5c3ac32f57eddd0cb124fef3c5ce032575e"
        },
        "downloads": -1,
        "filename": "hpecloudvolumes-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a4a350a35124ea021d798614e55aea9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15290,
        "upload_time": "2019-02-13T21:14:08",
        "upload_time_iso_8601": "2019-02-13T21:14:08.620342Z",
        "url": "https://files.pythonhosted.org/packages/a6/82/5e1de7213be30e7d177977c09e87ba87cecd778d2f05738e1514fba0031b/hpecloudvolumes-1.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "482571047429b577f8a8811254638d8248e52ba15cb08eb3a9b82a13185a8687",
          "md5": "815d9226776b9b7b59e1fc3085cdce22",
          "sha256": "975893f2e19e39bd7f06bff90d03e5eb948030d5cd82f0c2cc0fa1477e5ab92d"
        },
        "downloads": -1,
        "filename": "hpecloudvolumes-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "815d9226776b9b7b59e1fc3085cdce22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15296,
        "upload_time": "2019-02-13T21:20:53",
        "upload_time_iso_8601": "2019-02-13T21:20:53.515632Z",
        "url": "https://files.pythonhosted.org/packages/48/25/71047429b577f8a8811254638d8248e52ba15cb08eb3a9b82a13185a8687/hpecloudvolumes-1.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87dd4dbedcbb1a3dde5ceb4f978d7565f87aa514a086a72d273f0f2cb8b0ab7d",
          "md5": "61233e7299a6d918c0bfeed9b79038f8",
          "sha256": "b4d79aa29c76fac2f80abecb64fcdfb1d51bc7f2e56e3b7245e9f2a4b707dd32"
        },
        "downloads": -1,
        "filename": "hpecloudvolumes-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "61233e7299a6d918c0bfeed9b79038f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15295,
        "upload_time": "2019-02-13T21:54:47",
        "upload_time_iso_8601": "2019-02-13T21:54:47.167996Z",
        "url": "https://files.pythonhosted.org/packages/87/dd/4dbedcbb1a3dde5ceb4f978d7565f87aa514a086a72d273f0f2cb8b0ab7d/hpecloudvolumes-1.0.2.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87dd4dbedcbb1a3dde5ceb4f978d7565f87aa514a086a72d273f0f2cb8b0ab7d",
        "md5": "61233e7299a6d918c0bfeed9b79038f8",
        "sha256": "b4d79aa29c76fac2f80abecb64fcdfb1d51bc7f2e56e3b7245e9f2a4b707dd32"
      },
      "downloads": -1,
      "filename": "hpecloudvolumes-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "61233e7299a6d918c0bfeed9b79038f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15295,
      "upload_time": "2019-02-13T21:54:47",
      "upload_time_iso_8601": "2019-02-13T21:54:47.167996Z",
      "url": "https://files.pythonhosted.org/packages/87/dd/4dbedcbb1a3dde5ceb4f978d7565f87aa514a086a72d273f0f2cb8b0ab7d/hpecloudvolumes-1.0.2.tar.gz",
      "yanked": true,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}