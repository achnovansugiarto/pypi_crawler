{
  "info": {
    "author": "Jurriaan Oudenaarden",
    "author_email": "jurriaanoudenaarden@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ml-razor\n\nml-razor is used to find an optimal point keeping you machine learning model performance high, using the fewest features. It does so by eliminating features based on their inter-correlation or their pre-defined importance. When using the inter-correlation eliminator, the correlations between all features are calculated. If their correlation is higher than a certain threshold, the one with the lowest feature importance is eliminated. When using the importance eliminator, features are one-by-one eliminated, sorted by their importance. In both situations, the model is iteratively retrained. Subsequently, a Kolmogorov-Smirnov analysis is used to find the optimal point where model performance is kept, while eliminating as much as possible features.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install ml-razor.\n\n```bash\npip install ml-razor\n```\n\n## Usage\nSuppose you have a dataset with too many continuous features. You have little domain knowledge, and therefore you want a data-driven approach for minimizing the amount of features while keeping model performance high.\n```python\nfrom ml_razor import Razor\nfrom sklearn.datasets import load_breast_cancer\nimport ppscore as pps\nimport lightgbm as lgb\n\n\n# get data\ndata, target = load_breast_cancer(return_X_y = True, as_frame = True)\ndata['target'] = target\n\n# compute feature importances. this can be shapley values, importances from a random forest estimator for instance or\n# some other measure. here we choose the predictive power score. the importances should be in the form of a dict,\n# with all feature names as keys (str) and all importance values as values (float).\npps_results = pps.predictors(data, y='target')\npps_importances = {k: v for k, v in zip(pps_results['x'], pps_results['ppscore'])}\n\n# define an estimator. This could be anything. for now we choose a simple lgbm classifier.\nestimator = lgb.LGBMClassifier(max_depth=5)\n\n# initiate the Razor. only the estimator parameter is not optional. cv = 10 means that for every correlation value\n# between 1.00 and .25 (step size 0.01) the model is cross-validated with k=10. scoring='accuracy' for simplification\n# purposes (in case of breast cancer this is probably not the right metric). p_alpha=.05 is the hypothesis testing\n# threshold for the Kolmogorov-Smirnov analysis.\nrazor = Razor(estimator=estimator, cv=10, scoring='accuracy', lower_bound=.25, step=.01, method='correlation', p_alpha=.05)\n\n# with 'shave' we fit the models for every correlation value between 1.00 and 0.25 with step size 0.01. this means,\n# we compute the correlations between all features and when the correlation between feature_1 and feature_2 is\n# greater than, let's say, 0.99 and the importance score of feature_2 is greater than feature_1, we drop feature_1.\n# Then we proceed to correlation 0.98, and so on.\nrazor.shave(df=data, target='target', feature_importances=pps_importances)\n\n# with plot, the results of the Kolmogorov-Smirnov analysis is shown. Or when setting plot_type to 'feature_impact', the\n# feature impact and their corresponding importances are shown.\nrazor.plot(plot_type='ks_analysis')\n\n# correlation_features is a list with the names of the features left after shaving with the razor. (i.e. optimal set of\n# features for keeping model performance high with the least amount of features.)\ncorrelation_features = razor.features_left\n\n# correlation_importances is a dict, conserving only the predictive power scores (in this case) of the remaining\n# features (correlation_features in this case).\ncorrelation_importances = {k: v for k, v in pps_importances.items() if k in correlation_features}\n\n# now we proceed to the next phase. we can fit the razor with another method ('importance'), using the correlation\n# features as input. we start with all correlation_features and eliminate them one-by-one, beginning with the least\n# important feature.\nrazor = Razor(estimator=estimator, scoring='accuracy', method='importance')\nrazor.shave(df=data, target='target', feature_importances=correlation_importances)\n# in this particular case, it throws a warning saying that it didn't find an optimal point. this is due to the fact\n# that there are only 3 features needed to keep the performance of the model high. with this little amount of data the\n# Kolmogorov-Smirnov analysis has not enough evidence for rejecting the null-hypothesis. but this is beyond the scope\n# of this introduction.\n\nrazor.plot(plot_type='feature_impact')\n\n# the final_features is optimal set of features for keeping model performance high with the least amount of features.\nfinal_features = razor.features_left\n```\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://ml-razor.readthedocs.io/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ml-razor",
    "package_url": "https://pypi.org/project/ml-razor/",
    "platform": null,
    "project_url": "https://pypi.org/project/ml-razor/",
    "project_urls": {
      "Homepage": "https://ml-razor.readthedocs.io/"
    },
    "release_url": "https://pypi.org/project/ml-razor/0.1.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tool for minimizing amount of features, while keeping model performance high.",
    "version": "0.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14822235,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e743cba49f5d7ca8b93edcd784885524b5278704709328874fc9ec28ddb5942b",
          "md5": "d3285dfc9b350efb8c39b599294bcb18",
          "sha256": "a7f54d7dddd80ecbfa099d4d85af09486fe594f8c287b76831a58b2e41d04cad"
        },
        "downloads": -1,
        "filename": "ml_razor-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3285dfc9b350efb8c39b599294bcb18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9246,
        "upload_time": "2022-08-19T13:24:35",
        "upload_time_iso_8601": "2022-08-19T13:24:35.983098Z",
        "url": "https://files.pythonhosted.org/packages/e7/43/cba49f5d7ca8b93edcd784885524b5278704709328874fc9ec28ddb5942b/ml_razor-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9648992d1709246b54b76debdb86c65500b46e19e45b742f4f91ecca8a2e8bdc",
          "md5": "b433e924d0dd3cb0b75faf4e70d871ac",
          "sha256": "f69da9f4ae42db0917419cea02fd613c5162ed991bedd5429b9cfea9b2ad7a63"
        },
        "downloads": -1,
        "filename": "ml-razor-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b433e924d0dd3cb0b75faf4e70d871ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8778,
        "upload_time": "2022-08-19T13:24:38",
        "upload_time_iso_8601": "2022-08-19T13:24:38.162994Z",
        "url": "https://files.pythonhosted.org/packages/96/48/992d1709246b54b76debdb86c65500b46e19e45b742f4f91ecca8a2e8bdc/ml-razor-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25e56fd37e0803e2b9fb8be7539239062b974f380cdb7d2f8e1c019063f56b0f",
          "md5": "d3996cc7d7440508abeb108854061288",
          "sha256": "f01fa8169b5e5b56b44be63e63d95cf20731f099cb2b8670af1af6aaed02f0f7"
        },
        "downloads": -1,
        "filename": "ml-razor-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "d3996cc7d7440508abeb108854061288",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10333,
        "upload_time": "2022-08-20T16:26:09",
        "upload_time_iso_8601": "2022-08-20T16:26:09.656461Z",
        "url": "https://files.pythonhosted.org/packages/25/e5/6fd37e0803e2b9fb8be7539239062b974f380cdb7d2f8e1c019063f56b0f/ml-razor-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25e56fd37e0803e2b9fb8be7539239062b974f380cdb7d2f8e1c019063f56b0f",
        "md5": "d3996cc7d7440508abeb108854061288",
        "sha256": "f01fa8169b5e5b56b44be63e63d95cf20731f099cb2b8670af1af6aaed02f0f7"
      },
      "downloads": -1,
      "filename": "ml-razor-0.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "d3996cc7d7440508abeb108854061288",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10333,
      "upload_time": "2022-08-20T16:26:09",
      "upload_time_iso_8601": "2022-08-20T16:26:09.656461Z",
      "url": "https://files.pythonhosted.org/packages/25/e5/6fd37e0803e2b9fb8be7539239062b974f380cdb7d2f8e1c019063f56b0f/ml-razor-0.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}