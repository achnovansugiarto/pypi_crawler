{
  "info": {
    "author": "Developers Dashworks",
    "author_email": "support@dashworks.ai",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# notion-py\n\nUnofficial Python 3 client for Notion.so API v3.\n\n- Object-oriented interface (mapping database tables to Python classes/attributes)\n- Automatic conversion between internal Notion formats and appropriate Python objects\n- Local cache of data in a unified data store _(Note: disk cache now disabled by default; to enable, add `enable_caching=True` when initializing `NotionClient`)_\n- Real-time reactive two-way data binding (changing Python object -> live updating of Notion UI, and vice-versa) _(Note: Notion->Python automatic updating is currently broken and hence disabled by default; call `my_block.refresh()` to update, in the meantime, while monitoring is being fixed)_\n- Callback system for responding to changes in Notion (e.g. for triggering actions, updating another API, etc)\n\n![](https://raw.githubusercontent.com/jamalex/notion-py/master/ezgif-3-a935fdcb7415.gif)\n\n[Read more about Notion and Notion-py on Jamie's blog](https://medium.com/@jamiealexandre/introducing-notion-py-an-unofficial-python-api-wrapper-for-notion-so-603700f92369)\n\n# Usage\n\n## Quickstart\n\nNote: the latest version of **notion-py** requires Python 3.5 or greater.\n\n`pip install notion`\n\n```Python\nfrom notion.client import NotionClient\n\n# Obtain the `token_v2` value by inspecting your browser cookies on a logged-in (non-guest) session on Notion.so\nclient = NotionClient(token_v2=\"<token_v2>\")\n\n# Replace this URL with the URL of the page you want to edit\npage = client.get_block(\"https://www.notion.so/myorg/Test-c0d20a71c0944985ae96e661ccc99821\")\n\nprint(\"The old title is:\", page.title)\n\n# Note: You can use Markdown! We convert on-the-fly to Notion's internal formatted text data structure.\npage.title = \"The title has now changed, and has *live-updated* in the browser!\"\n```\n\n## Concepts and notes\n\n- We map tables in the Notion database into Python classes (subclassing `Record`), with each instance of a class representing a particular record. Some fields from the records (like `title` in the example above) have been mapped to model properties, allowing for easy, instantaneous read/write of the record. Other fields can be read with the `get` method, and written with the `set` method, but then you'll need to make sure to match the internal structures exactly.\n- The tables we currently support are **block** (via [`Block` class and its subclasses](https://github.com/jamalex/notion-py/blob/c65c9b14ed5dcd6d9326264f2e888ab343d2b831/notion/block.py#L143), corresponding to different `type` of blocks), **space** (via [`Space` class](https://github.com/jamalex/notion-py/blob/c65c9b14ed5dcd6d9326264f2e888ab343d2b831/notion/space.py#L6)), **collection** (via [`Collection` class](https://github.com/jamalex/notion-py/blob/c65c9b14ed5dcd6d9326264f2e888ab343d2b831/notion/collection.py#L91)), **collection_view** (via [`CollectionView` and subclasses](https://github.com/jamalex/notion-py/blob/c65c9b14ed5dcd6d9326264f2e888ab343d2b831/notion/collection.py#L175)), and **notion_user** (via [`User` class](https://github.com/jamalex/notion-py/blob/master/notion/user.py)).\n- Data for all tables are stored in a central [`RecordStore`](https://github.com/jamalex/notion-py/blob/c65c9b14ed5dcd6d9326264f2e888ab343d2b831/notion/store.py#L69), with the `Record` instances not storing state internally, but always referring to the data in the central `RecordStore`. Many API operations return updating versions of a large number of associated records, which we use to update the store, so the data in `Record` instances may sometimes update without being explicitly requested. You can also call the `refresh` method on a `Record` to trigger an update, or pass `force_update` to methods like `get`.\n- The API doesn't have strong validation of most data, so be careful to maintain the structures Notion is expecting. You can view the full internal structure of a record by calling `myrecord.get()` with no arguments.\n- When you call `client.get_block`, you can pass in either an ID, or the URL of a page. Note that pages themselves are just `blocks`, as are all the chunks of content on the page. You can get the URL for a block within a page by clicking \"Copy Link\" in the context menu for the block, and pass that URL into `get_block` as well.\n\n## Updating records\n\nWe keep a local cache of all data that passes through. When you reference an attribute on a `Record`, we first look to that cache to retrieve the value. If it doesn't find it, it retrieves it from the server. You can also manually refresh the data for a `Record` by calling the `refresh` method on it. By default (unless we instantiate `NotionClient` with `monitor=False`), we also [subscribe to long-polling updates](https://github.com/jamalex/notion-py/blob/master/notion/monitor.py) for any instantiated `Record`, so the local cache data for these `Records` should be automatically live-updated shortly after any data changes on the server. The long-polling happens in a background daemon thread.\n\n## Example: Traversing the block tree\n\n```Python\nfor child in page.children:\n    print(child.title)\n\nprint(\"Parent of {} is {}\".format(page.id, page.parent.id))\n```\n\n## Example: Adding a new node\n\n```Python\nfrom notion.block import TodoBlock\n\nnewchild = page.children.add_new(TodoBlock, title=\"Something to get done\")\nnewchild.checked = True\n```\n\n## Example: Deleting nodes\n\n```Python\n# soft-delete\npage.remove()\n\n# hard-delete\npage.remove(permanently=True)\n```\n\n## Example: Create an embedded content type (iframe, video, etc)\n\n```Python\nfrom notion.block import VideoBlock\n\nvideo = page.children.add_new(VideoBlock, width=200)\n# sets \"property.source\" to the URL, and \"format.display_source\" to the embedly-converted URL\nvideo.set_source_url(\"https://www.youtube.com/watch?v=oHg5SJYRHA0\")\n```\n\n## Example: Create a new embedded collection view block\n\n```Python\ncollection = client.get_collection(COLLECTION_ID) # get an existing collection\ncvb = page.children.add_new(CollectionViewBlock, collection=collection)\nview = cvb.views.add_new(view_type=\"table\")\n\n# Before the view can be browsed in Notion,\n# the filters and format options on the view should be set as desired.\n#\n# for example:\n#   view.set(\"query\", ...)\n#   view.set(\"format.board_groups\", ...)\n#   view.set(\"format.board_properties\", ...)\n```\n\n## Example: Moving blocks around\n\n```Python\n# move my block to after the video\nmy_block.move_to(video, \"after\")\n\n# move my block to the end of otherblock's children\nmy_block.move_to(otherblock, \"last-child\")\n\n# (you can also use \"before\" and \"first-child\")\n```\n\n## Example: Subscribing to updates\n\n_(Note: Notion->Python automatic updating is currently broken and hence disabled by default; call `my_block.refresh()` to update, in the meantime, while monitoring is being fixed)_\n\nWe can \"watch\" a `Record` so that we get a [callback](https://github.com/jamalex/notion-py/blob/master/notion/store.py) whenever it changes. Combined with the live-updating of records based on long-polling, this allows for a \"reactive\" design, where actions in our local application can be triggered in response to interactions with the Notion interface.\n\n```Python\n\n# define a callback (note: all arguments are optional, just include the ones you care about)\ndef my_callback(record, difference):\n    print(\"The record's title is now:\" record.title)\n    print(\"Here's what was changed:\")\n    print(difference)\n\n# move my block to after the video\nmy_block.add_callback(my_callback)\n```\n\n## Example: Working with databases, aka \"collections\" (tables, boards, etc)\n\nHere's how things fit together:\n\n- Main container block: `CollectionViewBlock` (inline) / `CollectionViewPageBlock` (full-page)\n  - `Collection` (holds the schema, and is parent to the database rows themselves)\n    - `CollectionRowBlock`\n    - `CollectionRowBlock`\n    - ... (more database records)\n  - `CollectionView` (holds filters/sort/etc about each specific view)\n\nNote: For convenience, we automatically map the database \"columns\" (aka properties), based on the schema defined in the `Collection`, into getter/setter attributes on the `CollectionRowBlock` instances. The attribute name is a \"slugified\" version of the name of the column. So if you have a column named \"Estimated value\", you can read and write it via `myrowblock.estimated_value`. Some basic validation may be conducted, and it will be converted into the appropriate internal format. For columns of type \"Person\", we expect a `User` instance, or a list of them, and for a \"Relation\" we expect a singular/list of instances of a subclass of `Block`.\n\n```Python\n# Access a database using the URL of the database page or the inline block\ncv = client.get_collection_view(\"https://www.notion.so/myorg/8511b9fc522249f79b90768b832599cc?v=8dee2a54f6b64cb296c83328adba78e1\")\n\n# List all the records with \"Bob\" in them\nfor row in cv.collection.get_rows(search=\"Bob\"):\n    print(\"We estimate the value of '{}' at {}\".format(row.name, row.estimated_value))\n\n# Add a new record\nrow = cv.collection.add_row()\nrow.name = \"Just some data\"\nrow.is_confirmed = True\nrow.estimated_value = 399\nrow.files = [\"https://www.birdlife.org/sites/default/files/styles/1600/public/slide.jpg\"]\nrow.person = client.current_user\nrow.tags = [\"A\", \"C\"]\nrow.where_to = \"https://learningequality.org\"\n\n# Run a filtered/sorted query using a view's default parameters\nresult = cv.default_query().execute()\nfor row in result:\n    print(row)\n\n# Run an \"aggregation\" query\naggregations = [{\n    \"property\": \"estimated_value\",\n    \"aggregator\": \"sum\",\n    \"id\": \"total_value\",\n}]\nresult = cv.build_query(aggregate=aggregate_params).execute()\nprint(\"Total estimated value:\", result.get_aggregate(\"total_value\"))\n\n# Run a \"filtered\" query (inspect network tab in browser for examples, on queryCollection calls)\nfilter_params = {\n    \"filters\": [{\n        \"filter\": {\n            \"value\": {\n                \"type\": \"exact\",\n                \"value\": {\"table\": \"notion_user\", \"id\": client.current_user.id}\n            },\n            \"operator\": \"person_contains\"\n        },\n        \"property\": \"assigned_to\"\n    }],\n    \"operator\": \"and\"\n}\nresult = cv.build_query(filter=filter_params).execute()\nprint(\"Things assigned to me:\", result)\n\n# Run a \"sorted\" query\nsort_params = [{\n    \"direction\": \"descending\",\n    \"property\": \"estimated_value\",\n}]\nresult = cv.build_query(sort=sort_params).execute()\nprint(\"Sorted results, showing most valuable first:\", result)\n```\n\nNote: You can combine `filter`, `aggregate`, and `sort`. See more examples of queries by setting up complex views in Notion, and then inspecting the full query: `cv.get(\"query2\")`.\n\nYou can also see [more examples in action in the smoke test runner](https://github.com/jamalex/notion-py/blob/master/notion/smoke_test.py). Run it using:\n\n```sh\npython run_smoke_test.py --page [YOUR_NOTION_PAGE_URL] --token [YOUR_NOTION_TOKEN_V2]\n```\n\n## Example: Lock/Unlock A Page\n\n```Python\nfrom notion.client import NotionClient\n\n# Obtain the `token_v2` value by inspecting your browser cookies on a logged-in session on Notion.so\nclient = NotionClient(token_v2=\"<token_v2>\")\n\n# Replace this URL with the URL of the page or database you want to edit\npage = client.get_block(\"https://www.notion.so/myorg/Test-c0d20a71c0944985ae96e661ccc99821\")\n\n# The \"locked\" property is available on PageBlock and CollectionViewBlock objects\n# Set it to True to lock the page/database\npage.locked = True\n# and False to unlock it again\npage.locked = False\n```\n\n## Example: Set the current user for multi-account user\n\n```python\nfrom notion.client import NotionClient\nclient = NotionClient(token_v2=\"<token_v2>\")\n\n# The initial current_user of a multi-account user may be an unwanted user\nprint(client.current_user.email) # → not_the_desired@email.co.jp\n\n# Set current_user to the desired user\nclient.set_user_by_email('desired@email.com')\nprint(client.current_user.email) # → desired@email.com\n\n# You can also set the current_user by uid.\nclient.set_user_by_uid('<uid>')\nprint(client.current_user.email) # → desired@email.com\n```\n\n# _Quick plug: Learning Equality needs your support!_\n\nIf you'd like to support notion-py development, please consider [donating to my open-source nonprofit, Learning Equality](https://learningequality.org/donate/), since when I'm not working on notion-py, it probably means I'm heads-down fundraising for our global education work (bringing resources like Khan Academy to communities with no Internet). COVID has further amplified needs, with over a billion kids stuck at home, and over half of them without the connectivity they need for distance learning. You can now also [support our work via GitHub Sponsors](https://github.com/sponsors/learningequality)!\n\n# Related Projects\n\n- [md2notion](https://github.com/Cobertos/md2notion): import Markdown files to Notion\n- [notion-export-ics](https://github.com/evertheylen/notion-export-ics): Export Notion Databases to ICS calendar files\n- [notion-tqdm](https://github.com/shunyooo/notion-tqdm): Progress Bar displayed in Notion like tqdm\n\n# TODO\n\n- Cloning pages hierarchically\n- Debounce cache-saving?\n- Support inline \"user\" and \"page\" links, and reminders, in markdown conversion\n- Utilities to support updating/creating collection schemas\n- Utilities to support updating/creating collection_view queries\n- Support for easily managing page permissions\n- Websocket support for live block cache updating\n- \"Render full page to markdown\" mode\n- \"Import page from html\" mode\n\n# Deployment\n\n- Update the version number in `setup.py`\n- `python setup.py sdist`\n- `twine upload dist/*`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dashworkstech/notion-dashworks",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "notion-dashworks-fork",
    "package_url": "https://pypi.org/project/notion-dashworks-fork/",
    "platform": null,
    "project_url": "https://pypi.org/project/notion-dashworks-fork/",
    "project_urls": {
      "Homepage": "https://github.com/dashworkstech/notion-dashworks"
    },
    "release_url": "https://pypi.org/project/notion-dashworks-fork/0.0.9/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Unofficial Python API client for Notion.so forked for dashworks",
    "version": "0.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15464411,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c199b4fec3a46062937fc2f5029a1b913e02501dd72622f7af30311d2e20bb05",
          "md5": "d450209ae04222dcf01603cf0ab9ce2d",
          "sha256": "740f809c8512eca6b4c9119ee2592950e1e01458459898c636eba7d256380d84"
        },
        "downloads": -1,
        "filename": "notion-dashworks-fork-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d450209ae04222dcf01603cf0ab9ce2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9566,
        "upload_time": "2022-06-30T23:19:35",
        "upload_time_iso_8601": "2022-06-30T23:19:35.646611Z",
        "url": "https://files.pythonhosted.org/packages/c1/99/b4fec3a46062937fc2f5029a1b913e02501dd72622f7af30311d2e20bb05/notion-dashworks-fork-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98fc4dd318e1a2336a9088b28930398f1403f70ea0632c5bcb36f7b5a53a4224",
          "md5": "a85c6200e7b8133856174505a7fe6e08",
          "sha256": "b931f6dbcd91e5f3decaada28190ef3a655b79100daf43ee0f98e905612b9bac"
        },
        "downloads": -1,
        "filename": "notion-dashworks-fork-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a85c6200e7b8133856174505a7fe6e08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9572,
        "upload_time": "2022-07-14T18:52:02",
        "upload_time_iso_8601": "2022-07-14T18:52:02.817030Z",
        "url": "https://files.pythonhosted.org/packages/98/fc/4dd318e1a2336a9088b28930398f1403f70ea0632c5bcb36f7b5a53a4224/notion-dashworks-fork-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef4a15c45b964ea91ebdec55a29c135ad639b2215571decf2afaf201c5e06bb9",
          "md5": "1240c8dee4cbc81e85dc5e57ea1f3a0d",
          "sha256": "805288f32a4a000948f8ee5e00017029ed6278c687b8a4605407ea785dd9c0ab"
        },
        "downloads": -1,
        "filename": "notion-dashworks-fork-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1240c8dee4cbc81e85dc5e57ea1f3a0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 43290,
        "upload_time": "2022-07-18T03:27:28",
        "upload_time_iso_8601": "2022-07-18T03:27:28.098695Z",
        "url": "https://files.pythonhosted.org/packages/ef/4a/15c45b964ea91ebdec55a29c135ad639b2215571decf2afaf201c5e06bb9/notion-dashworks-fork-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8487bb8c3de7ff83ec6dafc37c747f9e0c7def0a5de031a22037a65ca867e73",
          "md5": "e651169bb1238464bae4e1b7cecebcd2",
          "sha256": "ed1ff16b1fee11d3562380ed225d4e90c2b919f00b2afbb7cc900e631ca73df9"
        },
        "downloads": -1,
        "filename": "notion-dashworks-fork-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e651169bb1238464bae4e1b7cecebcd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 45939,
        "upload_time": "2022-07-18T03:34:32",
        "upload_time_iso_8601": "2022-07-18T03:34:32.165637Z",
        "url": "https://files.pythonhosted.org/packages/e8/48/7bb8c3de7ff83ec6dafc37c747f9e0c7def0a5de031a22037a65ca867e73/notion-dashworks-fork-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1ba67db69e4b1eab864100ff624f3972f0d5c748ff4b7916e76e7ae86345071",
          "md5": "22c2173da1259419db9a7aec1c418aca",
          "sha256": "d66b2afd98059928b16bace56f1b6427b86f15331d4c6deaf2ab953d0a0d0f03"
        },
        "downloads": -1,
        "filename": "notion-dashworks-fork-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "22c2173da1259419db9a7aec1c418aca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46177,
        "upload_time": "2022-07-19T18:38:21",
        "upload_time_iso_8601": "2022-07-19T18:38:21.885899Z",
        "url": "https://files.pythonhosted.org/packages/b1/ba/67db69e4b1eab864100ff624f3972f0d5c748ff4b7916e76e7ae86345071/notion-dashworks-fork-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e45a8b4e6a880d89d14795ceffb622aef08b9933287baf783398145d2c21b8c",
          "md5": "140ae1a1619565974245c95cedcb6f72",
          "sha256": "9bae50f139d1c490f5f856ffa0ab1cdf87ac379a53b4cade9622e738f65e78e9"
        },
        "downloads": -1,
        "filename": "notion_dashworks_fork-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "140ae1a1619565974245c95cedcb6f72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 44941,
        "upload_time": "2022-10-19T18:20:38",
        "upload_time_iso_8601": "2022-10-19T18:20:38.303350Z",
        "url": "https://files.pythonhosted.org/packages/5e/45/a8b4e6a880d89d14795ceffb622aef08b9933287baf783398145d2c21b8c/notion_dashworks_fork-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a08b147819ad14b65665e43369ffee4fead4484147fb0f9a75171ffd8abc605",
          "md5": "5ede01d070432c0ffc192685ed773a75",
          "sha256": "a5c654a4e88807934b0d5b52f37bf514c6f8d5c295ce63c70152278bafe431c9"
        },
        "downloads": -1,
        "filename": "notion-dashworks-fork-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "5ede01d070432c0ffc192685ed773a75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46210,
        "upload_time": "2022-07-20T03:08:57",
        "upload_time_iso_8601": "2022-07-20T03:08:57.636887Z",
        "url": "https://files.pythonhosted.org/packages/1a/08/b147819ad14b65665e43369ffee4fead4484147fb0f9a75171ffd8abc605/notion-dashworks-fork-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "307255cffb0c5dfd85299da4db55d3e7a5505b9e26a8e8a178ed04a32819fd01",
          "md5": "92b34ee721db865f88cd74a0af4920c2",
          "sha256": "83cf24fe36bf395d546ba1401c7d3d0218f4dd269a78865734a4a21d7d4195a9"
        },
        "downloads": -1,
        "filename": "notion-dashworks-fork-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "92b34ee721db865f88cd74a0af4920c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 45821,
        "upload_time": "2022-10-18T21:59:40",
        "upload_time_iso_8601": "2022-10-18T21:59:40.834400Z",
        "url": "https://files.pythonhosted.org/packages/30/72/55cffb0c5dfd85299da4db55d3e7a5505b9e26a8e8a178ed04a32819fd01/notion-dashworks-fork-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14bd8e1a1add9e782bdf6bd41e3fdb4bdc59fa82c832e4deba0f1fb5e182374d",
          "md5": "327592e63db12879186f49ca12a03132",
          "sha256": "37818c6cf92ffa635a3e32147fff0f3bb65c346626398c0fea75720220178d8d"
        },
        "downloads": -1,
        "filename": "notion-dashworks-fork-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "327592e63db12879186f49ca12a03132",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 45747,
        "upload_time": "2022-10-19T18:21:24",
        "upload_time_iso_8601": "2022-10-19T18:21:24.967680Z",
        "url": "https://files.pythonhosted.org/packages/14/bd/8e1a1add9e782bdf6bd41e3fdb4bdc59fa82c832e4deba0f1fb5e182374d/notion-dashworks-fork-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14bd8e1a1add9e782bdf6bd41e3fdb4bdc59fa82c832e4deba0f1fb5e182374d",
        "md5": "327592e63db12879186f49ca12a03132",
        "sha256": "37818c6cf92ffa635a3e32147fff0f3bb65c346626398c0fea75720220178d8d"
      },
      "downloads": -1,
      "filename": "notion-dashworks-fork-0.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "327592e63db12879186f49ca12a03132",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 45747,
      "upload_time": "2022-10-19T18:21:24",
      "upload_time_iso_8601": "2022-10-19T18:21:24.967680Z",
      "url": "https://files.pythonhosted.org/packages/14/bd/8e1a1add9e782bdf6bd41e3fdb4bdc59fa82c832e4deba0f1fb5e182374d/notion-dashworks-fork-0.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}