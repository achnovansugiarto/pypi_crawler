{
  "info": {
    "author": "Fictive Kin LLC",
    "author_email": "hello@fictivekin.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development"
    ],
    "description": "DB Auditing Utilities\n=====================\n\nThere comes a time when you require auditing to be present on a database table.\nIt usually looks like a painful process to implement it due to the vast changes\nrequired to your codebase. Wouldn't it be wonderful if you could implement it,\nwhile changing the minimal amount of lines of code, and even obtain an easy\naccess to its logged audit data?\n\n*Note: this library is specifically designed to work with SQLAlchemy_ and\nAlembic_. It also supports integration with Marshmallow_. If using a different\nORM layer, feel free to use the concepts herein, adapted to your needs.*\n\nA big thanks to the `Alembic cookbook`_, for the majority of the code used in\n`audit.utils.alembic`.\n\nExample usage\n-------------\n\nInstall `audit-utils` as one of your project dependencies::\n\n    pip3 install audit-utils\n\n\nYou will likely want to adjust the model you wish to audit, so that you have a\nbase model, from which to inherit in both the audited table and the audit table.\n\nAdd the appropriate mixins to your DB models and create an audit table model::\n\n    from audit.models import AuditTableMixin, AuditedMixin\n    from application import db\n\n    class UserBase:\n        username = db.Column(db.String, nullable=False)\n        first_name = db.Column(db.String)\n        last_name = db.Column(db.String)\n\n    class User(UserBase, AuditedMixin, db.Model):\n        id = db.Column(db.String, nullable=False, primary_key=True)\n\n    class UserAudit(UserBase, AuditTableMixin, db.Model):\n        # This is equivalent to User.id, but without being part of the\n        # primary key. You should create an index for it, for query\n        # performance on the audit data.\n        audited_id = db.Column(db.String, nullable=False, primary_key=False)\n\n\nAnd if you use Marshmallow_ schemas, you can import the provided schemas for\nsimplicity::\n\n    from audit.schemas import AuditLogSchema\n    from application import marshamallow as ma\n\n    class UserSchema(ma.Schema):\n        username = ma.String(required=True)\n        first_name = ma.String()\n        last_name = ma.String()\n\n        auditlog = ma.Nested(AuditLogSchema, dump_only=True)\n\n        \nFinally, generate a new Alembic_ migration that includes the audit table\ndefinition, and add the following bits::\n\n    from application.models import User\n\n    user_audit_sp = User().stored_procedure()\n    user_trigger = User().trigger()\n\n    def upgrade():\n        op.create_procedure(user_audit_sp)\n        op.create_trigger(user_trigger)\n\n    def downgrade():\n        op.drop_trigger(user_trigger)\n        op.drop_procedure(user_audit_sp)\n\n\n*Note: Before running the database upgrade, ensure that the generated\naudit model columns are in the _same_ order as the audited table. The\nstored procedure relies on the order being the same to not need updates\nevery time a column is added to the base table definition.*\n\nUpgrade your database and you should now have auditing on the user table, handled\nat the database level, so you don't need to implement all sorts of things in your code.\n\n\nImplementation Notes\n--------------------\n\nIt is entirely possible that you have a compound primary key for the table that you\nwish to be audited. This can be handled by overriding a couple of extra methods from\nthe model mixins.\n\nThe `id` and `audited_id` columns are not required to be string columns. They can be\nnumeric, provided that the types match in both models.\n\nThe default stored procedure does not include column names for your table, and as\nsuch does not need to be updated when columns are added/removed/changed.\n\nOccasionally, you will also have columns that you do not wish to include in the audit\nchangeset. While these columns must exist on both the audited table and the audit\ntable, you can add them to the list of ignored columns by overriding\n`audit_ignorable_columns` in your audited model.\n\n\n.. _SQLAlchemy: https://www.sqlalchemy.org/\n.. _Alembic: https://alembic.sqlalchemy.org/en/latest/\n.. _`Alembic cookbook`: https://alembic.sqlalchemy.org/en/latest/cookbook.html#replaceable-objects\n.. _Marshmallow: https://marshmallow.readthedocs.io/en/stable/",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fictivekin/audit-utils",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Fictive Kin LLC",
    "maintainer_email": "hello@fictivekin.com",
    "name": "audit-utils",
    "package_url": "https://pypi.org/project/audit-utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/audit-utils/",
    "project_urls": {
      "Homepage": "https://github.com/fictivekin/audit-utils"
    },
    "release_url": "https://pypi.org/project/audit-utils/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "DB Table Auditing Utilities",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8852806,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d13355b976fe5942b026218ad4bb072b48d880fa08d8e51c9764d22ac07a401",
          "md5": "279680804efbcee704f47440953c99ef",
          "sha256": "880bffc49a16a14f84c7b157a67d9c84982ffd2262f564c4cb9b75bd1926e700"
        },
        "downloads": -1,
        "filename": "audit-utils-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "279680804efbcee704f47440953c99ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10130,
        "upload_time": "2020-12-08T21:37:26",
        "upload_time_iso_8601": "2020-12-08T21:37:26.761919Z",
        "url": "https://files.pythonhosted.org/packages/8d/13/355b976fe5942b026218ad4bb072b48d880fa08d8e51c9764d22ac07a401/audit-utils-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d13355b976fe5942b026218ad4bb072b48d880fa08d8e51c9764d22ac07a401",
        "md5": "279680804efbcee704f47440953c99ef",
        "sha256": "880bffc49a16a14f84c7b157a67d9c84982ffd2262f564c4cb9b75bd1926e700"
      },
      "downloads": -1,
      "filename": "audit-utils-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "279680804efbcee704f47440953c99ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10130,
      "upload_time": "2020-12-08T21:37:26",
      "upload_time_iso_8601": "2020-12-08T21:37:26.761919Z",
      "url": "https://files.pythonhosted.org/packages/8d/13/355b976fe5942b026218ad4bb072b48d880fa08d8e51c9764d22ac07a401/audit-utils-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}