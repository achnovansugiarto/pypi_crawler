{
  "info": {
    "author": "Milan Balazs",
    "author_email": "milanbalazs01@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Database",
      "Typing :: Typed"
    ],
    "description": "<p align=\"center\">\n  <img src=\"https://github.com/milanbalazs/detti_db_server/blob/main/doc/pics/detti_db_logo.png?raw=true\" alt=\"detti db server logo\"/>\n</p>\n\n<h2 align=\"center\">Lightweight Json based key-value DB and/or server.</h2>\n\n<p align=\"center\">\n<img src=\"https://github.com/milanbalazs/detti_db/workflows/PythonBlack/badge.svg\">\n<img src=\"https://github.com/milanbalazs/detti_db/workflows/PythonStyle/badge.svg\">\n<img src=\"https://github.com/milanbalazs/detti_db/workflows/PythonUnitTest/badge.svg\">\n<img src=\"https://github.com/milanbalazs/detti_db_server/workflows/CodeQL/badge.svg\">\n</p>\n\n<p align=\"center\">\n<img src=\"https://pepy.tech/badge/detti-db-server\">\n</p>\n\n---\n\n## Introduction\n\n**Why:**\n   - Small, Fast, Efficient, Easy, Funny\n\n**Important:**\n\n - **The Detti DB handles string key, and many value types.**\n - **The Detti Server handles only string type as key and value (`Dict[str, str]`).**\n\n## Links\n\n* [PyPi](https://pypi.org/project/detti-db-server/)\n* [GitHub](https://github.com/milanbalazs/detti_db_server)\n* [PePy](https://pepy.tech/project/detti-db-server)\n* [Example DB usage file](examples/db_example_1.py)\n* [Example Server usage file](examples/server_example_1.py)\n\n## Easy install with PIP\n\n```bash\n>>> pip install detti-db-server\n```\n\n## Create environment and use virtual environment\n\n**Create a project folder and a venv folder within:**\n```bash\n>>> mkdir -p detti\n>>> cd detti\n```\n\n**Clone the source code from Git:**\n```bash\n>>> git clone https://github.com/milanbalazs/detti_db_server.git\n>>> cd detti_db_server\n```\n\n**Create and activate the virtual environment:**\n```bash\n>>> python3 -m venv venv\n>>> source venv/bin/activate\n```\n\n**Install the required modules from requirements.txt:**\n```bash\n>>> pip install -r requirements.txt\nOR\n>>> python setup.py install\n```\n\n## System\n\n**Requirements:**\n - Interpreter\n   - Python3.6.x <\n\n - Python packages\n   - They can find in the requirements.txt file ([pipreqs](https://github.com/bndr/pipreqs)).\n   - The required packages can be installed with `pip`.\n\n**Tested system:**\n - Interpreter:\n   - Python 3.6.9\n - Operation system:\n   - Linux Mint 19.1 Tessa\n - Bash:\n   - 4.4.20(1)-release\n - Curl\n   - curl 7.58.0 (x86_64-pc-linux-gnu)\n\n## detti DB\n\n### Configuration\n\nThe default config is `detti_conf.ini`.\n\nIt is in the root folder (next to the `detti_db.py` file).\n\nThe configuration file is a standard [INI file format](https://en.wikipedia.org/wiki/INI_file).\n\n**Default config:**\n```ini\n[DETTI_DB]\n# Path of the DB file. Recommended to define full path.\npath_of_db = test.db\n# Maximum length of the keys in DB (Avoid memory overload).\nlen_of_key = 100\n# Maximum length of the values in DB (Avoid memory overload).\nlen_of_val = 100\n# Level of the logger. Possible: DEBUG, INFO, WARNING, ERROR, CRITICAL\n# IMPORTANT: The generated log file will contain all log level messages!\nlog_level = WARNING\n```\n**Note:**\n - The default `detti_conf.ini` file contains more sections but only the `DETTI_DB` section is \n   related to the DB. Other sections are not used in case of DB. It is not problem if other \n   (default) sections are not in the config file.\n\n**Use own config file:**\n - There is `config_file` argument (`str`) of `DettiDB` class which set the used config file path.\n - Example:\n   - ```python\n      detti_db = DettiDB(config_file=\"own_config.ini\")\n     ```\n\n**Owerwrite config file parameters:**\n - You can overwrite all config file parameters as instance variables.\n - Example:\n   - ```python\n      detti_db = DettiDB(len_of_val=50)  # The parameter is set to 100 in config file but it will be overwrite to 50.\n     ```\n### Usage\n\n**Import `DettiDB` class from the `detti_db` module:**\n\n```python\nfrom detti_db import DettiDB\n```\n\n**Create instance from `DettiDB` class (Using the default init values):**\n\n```python\ndetti_db = DettiDB()\n```\n\n**Supported types in DB:**\n\n - Key\n   -  `str`\n - Value\n   - `str`\n   - `float`\n   - `int`\n   - `list`\n   - `dict`\n\n---\n\n:arrow_right: **Setters:**\n\n**Key: `str`, Value: `str`:**\n\nWith dictionary like solution:\n\n```python\ndetti_db[\"test_str_key\"] = \"test_val\"  # Set the value as \"test_val\" (str)\n```\n\n:Return: `True` if the setting is successful else `False`\n\nNote:\n - If you want to set a non-supported value type, you will get a warning message, and\n   the value won't be store to DB. Eg.:\n   - ```python\n     detti_db[\"test_key\"] = (1, 2, 3)  # Try to store Tuple type\n     >> [detti_db.py][WARNING]  The getting value type is not supported (<class 'tuple'>). The value won't be stored.\n     ```\n\n\nWith method usage:\n\n```python\ndetti_db.set(\"test_str_key_2\", \"test_val_2\")  # Set the value as \"test_val_2\" (str)\n```\n\n:Return: `True` if the setting is successful else `False`\n\nNote:\n - The `set()` method tries to cast the getting value to string. Eg.:\n - ```python\n   detti_db.set(\"test_str_key_3\", 123)  # Set the value as \"123\" (str)\n   ```\n\n---\n\n**Key: `str`, Value: `int`:**\n\nWith dictionary like solution:\n\n```python\ndetti_db[\"test_int_key\"] = 8  # Set the value as 8 (int)\n```\n\n:Return: `True` if the setting is successful else `False`\n\nWith method usage:\n\n```python\ndetti_db.set_int(\"test_int_key_2\", 9)  # Set the value as 9 (int)\n```\n\n:Return: `True` if the setting is successful else `False`\n\nNote:\n - The `set_int()` method tries to cast the getting value to integer. Eg.:\n - ```python\n   detti_db.set_int(\"test_int_key_3\", 123.123)  # Set the value as 123 (int)\n   detti_db.set_int(\"test_int_key_4\", \"888\")  # Set the value as 888 (int)\n   ```\n\n---\n\n**Key: `str`, Value: `float`:**\n\nWith dictionary like solution:\n\n```python\ndetti_db[\"test_float_key\"] = 8.8  # Set the value as 8.8 (float)\n```\n\n:Return: `True` if the setting is successful else `False`\n\nWith method usage:\n\n```python\ndetti_db.set_float(\"test_float_key_2\", 9.9)  # Set the value as 9.9 (float)\n```\n\n:Return: `True` if the setting is successful else `False`\n\nNote:\n - The `set_float()` method tries to cast the getting value to float. Eg.:\n - ```python\n   detti_db.set_float(\"test_float_key_3\", 123)  # Set the value as 123.0 (float)\n   detti_db.set_float(\"test_float_key_4\", \"888.888\")  # Set the value as 888.888 (float)\n   ```\n\n---\n\n**Key: `str`, Value: `List[Any]`:**\n\nWith dictionary like solution:\n\n```python\ndetti_db[\"test_list_key\"] = [\"a\", 1]  # Set the value as [\"a\", 1] (list)\n```\n\n:Return: `True` if the setting is successful else `False`\n\nWith method usage:\n\n```python\ndetti_db.set_list(\"test_list_key_2\", [\"a\", 1])  # Set the value as [\"a\", 1] (list)\n```\n\n:Return: `True` if the setting is successful else `False`\n\nNote:\n - The `set_list()` method tries to cast the getting value to float. Eg.:\n - ```python\n   detti_db.set_list(\"test_list_key_3\", (\"a\", 2))  # Set the value as [\"a\", 2] (list)\n   detti_db.set_list(\"test_list_key_4\", \"abc\")  # Set the value as [\"a\", \"b\", \"c\"] (list))\n   ```\n\n---\n\n**Append `Any` to `list`:**\n\n```python\ndetti_db.append_list(\"key\", \"value\")\n```\n\nExample:\n```python\ndetti_db.set_list(\"test_list\", [\"a\", 1])\ndetti_db.append_list(\"test_list\", 666)\nprint(detti_db[\"test_list\"])\n>>> [\"a\", 1, 666]\n```\n\n:Return: `True` if the appending is successful else `False`\n\nNote:\n - The return value is `False` if you try to append a new element to a not existing key in DB.\n - The return value is `False` if you try to append a new element to a key which value is not list type.\n\n---\n\n**Key: `str`, Value: `dict`:**\n\nWith dictionary like solution:\n\n```python\ndetti_db[\"test_dict_key\"] = {\"a\": 1}  # Set the value as {\"a\": 1} (dict)\n```\n\n:Return: `True` if the setting is successful else `False`\n\nWith method usage:\n\n```python\ndetti_db.set_dict(\"test_dict_key_2\", {\"a\": 1})  # Set the value as {\"a\": 1} (dict)\n```\n\n---\n\n:arrow_right: **Getters:**\n\n**Get element**\n\nWith dictionary like solution:\n\n```python\ndetti_db[\"test_key\"]  # Return: \"test_val\"\n```\n\n:Return: The requested value if it exists in DB else `None`\n\nWith method usage:\n\n```python\ndetti_db.get(\"test_key_2\")  # Return: \"test_val_2\"\n```\n\n:Return: The requested value if it exists in DB else `None`\n\nNote:\n - The above getter solutions can return any types.\n\nUsing default value in get:\n\n```python\ndetti_db.get(\"not_exist_key\", default_value=5)  # Return: 5 (Due to the \"not_exist_key\" key is not in DB.)\n```\n\n:Return: The requested value if it exists in DB else the set default value.\n\nNote:\n - The above getter solutions can return any types.\n - Any type can be set as default parameter.\n\n---\n\n**Get all elements:**\n\nThe `get_all()` method provides the all key-value pairs from DB in Json format. It supports any types.\n\n```python\ndetti_db.get_all()  # Return: {'test_key': 'test_val', 'test_key_2': 'test_val_2'}\n```\n\n:Return: The requested items in dict if any exists in DB else empty dict\n\n---\n\n**Check if key exists in DB:**\n\nThe `is_exist()` method returns `True` if the key is in DB else `False`.\n\n```python\ndetti_db.is_exist(\"elem_key\")\n```\n\n:Return: `True` if the key is in DB else `False`.\n\n---\n\n**Deletion:**\n\nWith dictionary like solution:\n\n```python\ndel detti_db[\"test_key\"]\n```\n\n:Return: `True` if the setting is successful else `False`\n\nWith method usage:\n\n```python\ndetti_db.delete(\"test_key_2\")  # Return True if it's success else False\n```\n\n:Return: `True` if the setting is successful else `False`\n\n---\n\n**Searching:**\n\n**Search keys based on provided prefix (Returning a `Dict[str, str]`):**\n\n```python\ndetti_db.search_keys_in_db(\"my_\")  # Return: {'my_test_key_4': 'test_val_4'}\n```\n\n:Return: The requested items in dict if any exists in DB else empty dict\n\n---\n\n**Search values based on provided prefix (Returning a `Dict[str, str]`):**\n\n```python\ndetti_db.search_values_in_db(\"my_\")  # Return: {'test_key_4': 'my_test_val_4'}\n```\n\n:Return: The requested items in dict if any exists in DB else empty dict\n\n---\n\n**Get size of DB:**\n\n```python\ndetti_db.size_of_db()  # Return: 666 (int)\n```\n\n:Return: Size of the DB is bytes (`int`).\n\n---\n\n**Get all keys of DB:**\n\n```python\ndetti_db.get_all_keys()  # Return: [\"test_key\", \"test\"key_2\"] (List[str])\n```\n\n:Return: All keys of the DB (`List[str]`).\n\n---\n\n**Dump the current loaded DB to Json file:**\n\n```python\ndetti_db.dump_to_json(\"dump.json\")\n```\n\nPossible parameters:\n - `file_path`: Path of the destination file.\n - `force`: If it is given the existing file will be overwritten.\n   - Default: False\n - `permissions`: Set the permission of file. It is true for overwritten files! Octal!\n   - Default: 0o600\n\nEg.:\n```python\ndetti_db.dump_to_json(file_path=\"dump.json\", force=True, permissions=0o664)\n```\n\n---\n\n**Complete example code (With not existing DB):**\n\n```python\nimport os\nimport sys\n\n# Get the path of the directory of the current file.\nPATH_OF_FILE_DIR: str = os.path.realpath(os.path.dirname(__file__))\n\n# Append the path of the tools folder to find modules.\nsys.path.append(os.path.join(PATH_OF_FILE_DIR, \"..\"))\n\nfrom detti_db import DettiDB  # noqa: E40\n\ndetti_db: DettiDB = DettiDB()\n\n# setters\ndetti_db[\"test_key\"] = \"test_val\"\ndetti_db.set(\"test_key_2\", \"test_val_2\")\ndetti_db.set_int(\"test_int_key\", 123)\ndetti_db.set_float(\"test_float_key\", 123.123)\ndetti_db.set_list(\"test_list_key\", [\"a\", 1])\ndetti_db.set_dict(\"test_dict_key\", {\"b\": 2})\n\n# getters\nprint(\"test_key -> {}\".format(detti_db[\"test_key\"]))\nprint(\"test_int_key -> {}\".format(detti_db.get(\"test_int_key\")))\nprint(\"test_list_key -> {}\".format(detti_db[\"test_list_key\"]))\nprint(\"test_dict_key -> {}\".format(detti_db[\"test_dict_key\"]))\nprint(\"All content: {}\".format(detti_db.get_all()))\nprint(\"Number of elements in DB: {}\".format(detti_db.get_number_of_elements()))\nprint(\"Size of DB: {}\".format(detti_db.size_of_db()))\nprint(\"All keys in DB: {}\".format(detti_db.get_all_keys()))\n\n# deletions\ndel detti_db[\"test_key\"]\ndetti_db.delete(\"test_key_2\")\n\n# Set some new items for searching\ndetti_db[\"test_key_3\"] = \"my_test_val_3\"\ndetti_db[\"my_test_key_4\"] = \"test_val_4\"\n\n# Searching\nprint(\"'my_' key prefixes -> {}\".format(detti_db.search_keys_in_db(\"my_\")))\nprint(\"'my_' value prefixes -> {}\".format(detti_db.search_values_in_db(\"my_\")))\n```\n\n**Output:**\n\n``` bash\n>>> python3 examples/db_example_1.py\ntest_key -> test_val\ntest_int_key -> 123\ntest_list_key -> ['a', 1]\ntest_dict_key -> {'b': 2}\nAll content: {'test_key': 'test_val', 'test_key_2': 'test_val_2', 'test_int_key': 123, 'test_float_key': 123.123, 'test_list_key': ['a', 1], 'test_dict_key': {'b': 2}}\nNumber of elements in DB: 6\nSize of DB: 216\nAll keys in DB: ['test_key', 'test_key_2', 'test_int_key', 'test_float_key', 'test_list_key', 'test_dict_key']\n'my_' key prefixes -> {'my_test_key_4': 'test_val_4'}\n'my_' value prefixes -> {'test_key_3': 'my_test_val_3'}\n\n```\n\n## detti Server (with RESTful API)\n\n### Configuration\n\nThe default config is `detti_conf.ini`.\n\nIt is in the root folder (next to the `detti_db.py` file).\n\nThe configuration file is a standard [INI file format](https://en.wikipedia.org/wiki/INI_file).\n\n**Default config:**\n```ini\n[DETTI_DB]\n# Path of the DB file. Recommended to define full path.\npath_of_db = test.db\n# Maximum length of the keys in DB (Avoid memory overload).\nlen_of_key = 100\n# Maximum length of the values in DB (Avoid memory overload).\nlen_of_val = 100\n# Level of the logger. Possible: DEBUG, INFO, WARNING, ERROR, CRITICAL\n# IMPORTANT: The generated log file will contain all log level messages!\nlog_level = WARNING\n\n[SERVER]\nhost = localhost\nport = 5000\ndebug = True\n# Setting the request limits in different unites. The most strict will be used!\nsec_limit = 5\nmin_limit = 300\nhour_limit = 18000\nday_limit = 432000\n# IMPORTANT\n# If you set the user and password parameter the DB will be accessed with JWT Token!\nuser =\npassword =\n```\n**Note:**\n - The default `detti_conf.ini` file contains more sections but the `SERVER` and `DETTI_DB` \n   sections are related (and mandatory) to the Server running. \n   Other sections are not used in case of DB. It is not problem if other \n   (default) sections are not in the config file.\n\n**Use own config file:**\n - There is `config_file` CLI argument (`str`).\n   - Force to use a config file. Default: `detti_conf.ini` (In root folder)\n - Example:\n   - `>>> python3 detti_server --config_file my_own_config.ini`\n\n### Usage\n\n**Start the server:**\n\n```bash\n>>> python3 detti_server.py\n```\n\n**Output in case of successful starting (with the default config):**\n\n```\n * Serving Flask app \"detti_server\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://localhost:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 217-599-780\n\n```\n---\n\n### Test server status\n\nThe server status can be checked to send a GET request to `/ping` end-point of the server.\n\nResponse if the server is up and running:\n\nCurl:\n```bash\n>>> curl http://localhost:5000/ping\n> \"PONG\"\n```\n\nPython:\n```python\nimport requests\nrequests.get(\"http://localhost:5000/ping\")  # Return: \"PONG\"\n```\n\nResponse if the server is down (Status code: 7):\n```bash\n>>> curl http://localhost:5000/ping\n> curl: (7) Failed to connect to localhost port 5000: Kapcsolat elutasítva\n```\n\n---\n\n### End-points (RESTful APIs)\n\n**`/get/<string:db_key>`**\n\nProviding the key-value pair based on getting key. The status code is 201 in case of error.\n\nCurl:\n```bash\n>>> curl http://localhost:5000/set -d \"exist=value_of_exist_key\" -X PUT\n> {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/get/exist\n> {\"exist\": \"value_of_exist_key\"}\n>>> curl http://localhost:5000/get/doesnt_exist\n> {\"doesnt_exist\": \"The key doesn't exist in DB.\"}\n```\n\nPython:\n```python\nimport requests\n\n# Set an element in the DB\nput_resp = requests.put(\"http://localhost:5000/set\", data={\"exist\": \"value_of_exist_key\"})\nprint(put_resp.json())  # Return: {\"STATUS\": \"OK\"}\n\n# Get the element from DB\nresp = requests.get(\"http://localhost:5000/get/exist\")\nprint(resp.json())  # Return: {\"exist\": \"value_of_exist_key\"}\n```\n---\n\n**`/set`**\n\nSetting/updating key-value pair in the DB.\n\nCurl:\n```bash\n>>> curl http://localhost:5000/set -d \"test_key=test_val\" -X PUT\n> {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/get/test_key\n> {\"test_key\": \"test_val\"}\n```\n\nPython:\n```python\nimport requests\n\n# Set an element in the DB\nput_resp = requests.put(\"http://localhost:5000/set\", data={\"test_key\": \"test_val\"})\nprint(put_resp.json())  # Return: {\"STATUS\": \"OK\"}\n\n# Get the element from DB\nresp = requests.get(\"http://localhost:5000/get/test_key\")\nprint(resp.json())  # Return: {\"test_key\": \"test_val\"}\n```\n\n---\n\n**`/search_key/<string:key_prefix>`**\n\nSearching keys in the DB based on provided key prefix.\n\nCurl:\n```bash\n>>> curl http://localhost:5000/set -d \"test_key=test_val\" -X PUT\n>  {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/set -d \"prod_key_1=prod_val_1\" -X PUT\n>  {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/set -d \"prod_key_2=prod_val_2\" -X PUT\n>  {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/search_key/prod_\n> {\n        \"prod_key_1\": \"prod_val_1\",\n        \"prod_key_2\": \"prod_val_2\"\n  }\n>>> curl http://localhost:5000/search_key/not_exist\n>  {\"not_exist\": \"Cannot find keys for prefix\"}\n```\n\nPython:\n```python\nimport requests\n\n# Set some elements in DB.\nrequests.put(\"http://localhost:5000/set\", data={\"dev_data\": \"dev\"})\nrequests.put(\"http://localhost:5000/set\", data={\"prod_key_1\": \"prod_val_1\"})\nrequests.put(\"http://localhost:5000/set\", data={\"prod_key_2\": \"prod_val_2\"})\n\n# Get the elements based on provided KEY prefix.\nresp = requests.get(\"http://localhost:5000/search_key/prod_\")\nprint(resp.json())  # Return: {\"prod_key_1\": \"prod_val_1\", \"prod_key_2\": \"prod_val_2\"}\n\n# Try a KEY prefix which is not contained in keys.\nresp = requests.get(\"http://localhost:5000/search_key/nonono\")\nprint(resp.json())  # Return: {\"nonono\": \"Cannot find keys for prefix\"}\n```\n\n---\n\n**`/search_val/<string:value_prefix>`**\n\nSearching values in the DB based on provided value prefix.\n\nCurl:\n```bash\n>>> curl http://localhost:5000/set -d \"test_key=test_val\" -X PUT\n>  {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/set -d \"prod_key_1=prod_val_1\" -X PUT\n>  {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/set -d \"prod_key_2=prod_val_2\" -X PUT\n>  {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/search_val/prod_\n> {\n        \"prod_key_1\": \"prod_val_1\",\n        \"prod_key_2\": \"prod_val_2\"\n  }\n>>> curl http://localhost:5000/search_val/not_exist\n> {\"not_exist\": \"Cannot find values for prefix\"}\n```\n\nPython:\n```python\nimport requests\n\n# Set some elements in DB.\nrequests.put(\"http://localhost:5000/set\", data={\"dev_data\": \"dev\"})\nrequests.put(\"http://localhost:5000/set\", data={\"prod_key_1\": \"prod_val_1\"})\nrequests.put(\"http://localhost:5000/set\", data={\"prod_key_2\": \"prod_val_2\"})\n\n# Get the elements based on provided VALUE prefix.\nresp = requests.get(\"http://localhost:5000/search_val/prod_\")\nprint(resp.json())  # Return: {\"prod_key_1\": \"prod_val_1\", \"prod_key_2\": \"prod_val_2\"}\n\n# Try a VALUE prefix which is not contained in keys.\nresp = requests.get(\"http://localhost:5000/search_val/nonono\")\nprint(resp.json())  # Return: {\"nonono\": \"Cannot find values for prefix\"}\n```\n\n---\n\n**`/delete/<string:db_key>`**\n\nDeleting an element from the DB.\n\nCurl:\n```bash\n>> curl http://localhost:5000/set -d \"test_key=test_val\" -X PUT\n> {\"STATUS\": \"OK\"}\n>> curl http://localhost:5000/get/test_key\n> {\"test_key\": \"test_val\"}\n>> curl http://localhost:5000/delete/test_key -X DELETE\n> {\"STATUS\": \"OK\"}\n>> curl http://localhost:5000/get/test_key\n> {\"test_key\": \"The key doesn't exist in DB.\"}\n```\n\nPython:\n```python\nimport requests\n\n# Set some elements in DB.\nrequests.put(\"http://localhost:5000/set\", data={\"to_be_deleted\": \"dummy\"})\n\n# Delete the created item\ndel_resp = requests.delete(\"http://localhost:5000/delete/to_be_deleted\")\nprint(del_resp.json())  # Return: {\"STATUS\": \"OK\"}\n\n# Try to get the deleted item\nresp = requests.get(\"http://localhost:5000/get/to_be_deleted\")\nprint(resp.status_code)  # Return: 201\nprint(resp.json())  # Return: {\"to_be_deleted\": \"The key doesn't exist in DB.\"}\n```\n\n---\n\n**`/ping`**\n\nChecking if the server is running.\n\nSuccess example:\n```bash\n>>> curl http://localhost:5000/ping\n> \"PONG\"\n```\n\nFailed example (Status code: 7):\n```bash\n>>> curl http://localhost:5000/ping\n> curl: (7) Failed to connect to localhost port 5000: Kapcsolat elutasítva\n```\n\n---\n\n**`/getall`**\n\nProviding all elements from the DB. {key: value, key: value}\n\nCurl:\n```bash\n>>> curl http://localhost:5000/set -d \"test_key=test_val\" -X PUT\n> {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/set -d \"test_key_1=test_val_1\" -X PUT\n> {\"STATUS\": \"OK\"}\n>>> curl http://localhost:5000/getall\n> {\n        \"test_key\": \"test_val\",\n        \"test_key_1\": \"test_val_1\"\n  }\n```\n\nPython:\n```python\nimport requests\n\n# Set some elements in DB.\nrequests.put(\"http://localhost:5000/set\", data={\"get_all_1\": \"dummy\"})\nrequests.put(\"http://localhost:5000/set\", data={\"get_all_2\": \"dummy\"})\n\n# Getting all elements from DB.\nresp = requests.get(\"http://localhost:5000/getall\")\nprint(resp.json()) # Return: {\"get_all_1\": \"dummy\", \"get_all_2\": \"dummy\"}\n```\n\n### JWT Authentication\n\nOfficial page of JWT:\n - [JSON Web Tokens](https://jwt.io)\n\n**Important:**\n - The JWT authentication is not active with the default configuration.\n\nThe \"user\" and \"password\" parameters have to be set in the configuration file\nto activate the JWT Authentication.\n\n**For example:**\n```ini\nuser = test_user\npassword = test_password\n```\n\n**Get the token from the server:**\n```bash\n>>> curl -i -X POST -H \"Content-Type: application/json\" -d '{\"username\":\"test_user\",\"password\":\"test_password\"}' http://localhost:5000/auth\n> {\n      \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTE4...\n  }\n```\n\n**Use the JWT authentication for APIs:**\n```bash\n>>> curl -H \"Authorization: jwt eyJ0eXAiOiJKV...\" http://localhost:5000/get/exist\n> {\n      \"exist\": \"exist_val\"\n  }\n```\n\n**If the token is not used, the APIs provide error message with 401 status code:**\n```bash\n>>> curl http://localhost:5000/get/exist\n> {\n      \"description\": \"Request does not contain an access token\",\n      \"error\": \"Authorization Required\",\n      \"status_code\": 401\n  }\n```\n\n## Production line\n\nCurrently, the production line support is not implemented in this repo (But it is in the road-map)!\nYou can run the server on the production line with Nginx and Gunicorn.\n\n**Tutorial:**\n - [How To Serve Flask Applications with Gunicorn and Nginx on Ubuntu 18.04](https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04)\n\n## Future\n - Introduce the multithreading/multiprocessing in searching methods\n   - In case of big data the multithreading/multiprocessing can reduce the execution time\n - Add support for more data types on server side.\n\n## Change log\n\n### 1.2.1\n - Pass the `**options` parameter in `run_server()` function.\n   - The options to be forwarded to the underlying Werkzeug server.\n     See :func:`werkzeug.serving.run_simple` for more information.\n - Add the `dump_to_json()` method to dump the current DB to Json file.\n - Add `Python Black` and `Flake8` pre-commit hooks to repo for better contributions.\n - Fix TypeError in case of `dict` type setting.\n - Add Cross Origin Resource Sharing (CORS) for server to make cross-origin AJAX possible.\n\n### 1.1.1\n - Add `get_number_of_elements()` method to get number of elements of DB.\n - Add `get_all_keys()` method to get all keys of DB.\n - Add `set_dict()` method as `dict` type setter.\n - Add `run_server()` function to server part for better integration.\n   - Now the `detti_server.py` file can be imported and configurable before starting the server.\n   - Eg.: `import detti_server; detti_server.run_server()`\n\n### 1.1.0\n - Get size of DB with `size_of_db()` method.\n - Implement `__contains__` magic method (Eg.: `\"a\" in detti_db`).\n - Add `default_value` option to `get` method (Eg.: `detti_db.get(\"not_exist_key\", default_value=5)`)\n - All parameters from config file can be overwritten as `__init__` argument (Eg.: `detti_db = DettiDB(len_of_val=50)`)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/milanbalazs/detti_db_server",
    "keywords": "",
    "license": "three-clause BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "detti-db-server",
    "package_url": "https://pypi.org/project/detti-db-server/",
    "platform": "",
    "project_url": "https://pypi.org/project/detti-db-server/",
    "project_urls": {
      "Homepage": "https://github.com/milanbalazs/detti_db_server"
    },
    "release_url": "https://pypi.org/project/detti-db-server/1.2.1/",
    "requires_dist": [
      "Flask-Limiter (==1.4)",
      "Flask-RESTful (==0.3.8)",
      "Werkzeug (==1.0.1)",
      "coverage (==5.4)",
      "pycodestyle (==2.6.0)",
      "requests (==2.25.1)",
      "Flask-JWT (==0.3.2)",
      "pre-commit (==2.11.0)",
      "Flask-Cors (==3.0.10)"
    ],
    "requires_python": ">=3.6",
    "summary": "Lightweight Json based key-value DB and/or server.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9786714,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05611d3370b16c1f8ada3fd555c16a68689372e5bc7fae2f7cda21ced968e035",
          "md5": "741d245ddc7794ea0ae4671e307aa5b4",
          "sha256": "1cff87a825d6174c6f7b7ac779cf5199cbdef9e24b9c6a4eeb3e086207191232"
        },
        "downloads": -1,
        "filename": "detti_db_server-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "741d245ddc7794ea0ae4671e307aa5b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22906,
        "upload_time": "2021-02-20T21:38:22",
        "upload_time_iso_8601": "2021-02-20T21:38:22.423464Z",
        "url": "https://files.pythonhosted.org/packages/05/61/1d3370b16c1f8ada3fd555c16a68689372e5bc7fae2f7cda21ced968e035/detti_db_server-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "479897cec6832fe1ce46b3312598b446f33cc78bc8e04426e2670c445af52f77",
          "md5": "74180886a77a9e8a604b1de39e3a1434",
          "sha256": "4c48f2cace76a422e2458e47ce8765d0df2d6d975f3e000b8e983b3b8e32e6fa"
        },
        "downloads": -1,
        "filename": "detti_db_server-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "74180886a77a9e8a604b1de39e3a1434",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22765,
        "upload_time": "2021-02-20T21:38:24",
        "upload_time_iso_8601": "2021-02-20T21:38:24.778029Z",
        "url": "https://files.pythonhosted.org/packages/47/98/97cec6832fe1ce46b3312598b446f33cc78bc8e04426e2670c445af52f77/detti_db_server-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1235a31d45a512fa6396089a7b2154215a2a3dc27e64217a9e3a2c823ddd612d",
          "md5": "ee8a1a1d6c876525e4d7a6ebc712f9a6",
          "sha256": "5c087320d02fd7f33508d1386c97b4c3b983f6fc455a62f8af08785abdf97c13"
        },
        "downloads": -1,
        "filename": "detti_db_server-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee8a1a1d6c876525e4d7a6ebc712f9a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 69171,
        "upload_time": "2021-02-23T18:45:18",
        "upload_time_iso_8601": "2021-02-23T18:45:18.361343Z",
        "url": "https://files.pythonhosted.org/packages/12/35/a31d45a512fa6396089a7b2154215a2a3dc27e64217a9e3a2c823ddd612d/detti_db_server-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ac7f8301dfc66118a88abcab17bcb7f2f088c5ce95ade4899e16dd141b3025c",
          "md5": "0a20aa02cf75a54c347f6355a0667f25",
          "sha256": "d1ed8acddc9446cb6cb7204e7478bdb688536ffe677974367092f6da63e578f2"
        },
        "downloads": -1,
        "filename": "detti_db_server-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0a20aa02cf75a54c347f6355a0667f25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70037,
        "upload_time": "2021-02-23T18:45:20",
        "upload_time_iso_8601": "2021-02-23T18:45:20.947797Z",
        "url": "https://files.pythonhosted.org/packages/0a/c7/f8301dfc66118a88abcab17bcb7f2f088c5ce95ade4899e16dd141b3025c/detti_db_server-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90caf975ad8bfe33edb4fd5b97837707e7afc2829d728a3c4eeab26f19312bd1",
          "md5": "8e4bdf34a9b671d9e01595300c69d7ad",
          "sha256": "77a98d7b2285c4351693b5c8ad2d6cf2e8c9890cf533d8e963f0ef9921144708"
        },
        "downloads": -1,
        "filename": "detti_db_server-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e4bdf34a9b671d9e01595300c69d7ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 70276,
        "upload_time": "2021-03-09T18:09:57",
        "upload_time_iso_8601": "2021-03-09T18:09:57.158145Z",
        "url": "https://files.pythonhosted.org/packages/90/ca/f975ad8bfe33edb4fd5b97837707e7afc2829d728a3c4eeab26f19312bd1/detti_db_server-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4697f008e9c255e26a6e2c416225f188cd64cb4ef9cd6d6f9e22d4ee69f79b9",
          "md5": "5e2a5e0becb7963a7e6f78f8d4a34a15",
          "sha256": "c599a8d40ca2fcef389ea96dce6cc231376abd73c5f3d3682ea8cdc38f475f7f"
        },
        "downloads": -1,
        "filename": "detti_db_server-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5e2a5e0becb7963a7e6f78f8d4a34a15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 76097,
        "upload_time": "2021-03-09T18:10:00",
        "upload_time_iso_8601": "2021-03-09T18:10:00.765705Z",
        "url": "https://files.pythonhosted.org/packages/b4/69/7f008e9c255e26a6e2c416225f188cd64cb4ef9cd6d6f9e22d4ee69f79b9/detti_db_server-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f07b63b471a351f3fe9cb95f22f2adcf81113a0597f4851f89de51c3660b6df",
          "md5": "849ef7dfddf4f5dc08e94c17dad65a9a",
          "sha256": "afa399c78868e3f55da55b0639e8fb6db09030d19476d5577098714ddb6f271f"
        },
        "downloads": -1,
        "filename": "detti_db_server-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "849ef7dfddf4f5dc08e94c17dad65a9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 71497,
        "upload_time": "2021-03-16T17:00:50",
        "upload_time_iso_8601": "2021-03-16T17:00:50.326932Z",
        "url": "https://files.pythonhosted.org/packages/7f/07/b63b471a351f3fe9cb95f22f2adcf81113a0597f4851f89de51c3660b6df/detti_db_server-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a52932e9e477c11372bd8c5311a845e44d04398746a4a0720f0c7112c36bf62",
          "md5": "370ef5271aef0394e42ab385cdac9c02",
          "sha256": "742871549c4b07f977a83505c3d1a83255509d38c73352697f21b34816bd34f2"
        },
        "downloads": -1,
        "filename": "detti_db_server-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "370ef5271aef0394e42ab385cdac9c02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 79868,
        "upload_time": "2021-03-16T17:00:52",
        "upload_time_iso_8601": "2021-03-16T17:00:52.977599Z",
        "url": "https://files.pythonhosted.org/packages/6a/52/932e9e477c11372bd8c5311a845e44d04398746a4a0720f0c7112c36bf62/detti_db_server-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f07b63b471a351f3fe9cb95f22f2adcf81113a0597f4851f89de51c3660b6df",
        "md5": "849ef7dfddf4f5dc08e94c17dad65a9a",
        "sha256": "afa399c78868e3f55da55b0639e8fb6db09030d19476d5577098714ddb6f271f"
      },
      "downloads": -1,
      "filename": "detti_db_server-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "849ef7dfddf4f5dc08e94c17dad65a9a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 71497,
      "upload_time": "2021-03-16T17:00:50",
      "upload_time_iso_8601": "2021-03-16T17:00:50.326932Z",
      "url": "https://files.pythonhosted.org/packages/7f/07/b63b471a351f3fe9cb95f22f2adcf81113a0597f4851f89de51c3660b6df/detti_db_server-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a52932e9e477c11372bd8c5311a845e44d04398746a4a0720f0c7112c36bf62",
        "md5": "370ef5271aef0394e42ab385cdac9c02",
        "sha256": "742871549c4b07f977a83505c3d1a83255509d38c73352697f21b34816bd34f2"
      },
      "downloads": -1,
      "filename": "detti_db_server-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "370ef5271aef0394e42ab385cdac9c02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 79868,
      "upload_time": "2021-03-16T17:00:52",
      "upload_time_iso_8601": "2021-03-16T17:00:52.977599Z",
      "url": "https://files.pythonhosted.org/packages/6a/52/932e9e477c11372bd8c5311a845e44d04398746a4a0720f0c7112c36bf62/detti_db_server-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}