{
  "info": {
    "author": "KOG",
    "author_email": "52204413@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# surfing_pylib\n\n#### Description\n\n冲浪科技python 库\n公司的Python库都在这个仓库中维护统一管理\n\n#### Installation\n\n​\t`pip install kog_lib`\n\n#### Instructions\n\n1. 查看帮助\n\n   `import kog_lib`\n\n   `kog_lib.help()`\n\n   `kog_lib.help(type)`\n\n   ​\t`type in {'excel','textgrid','metadata','wav','fs','utils'}`\n\n2. excel读取和写入\n\n   ```python\n       实例化：\n           my_excel = kog_lib.Excel(excel_path)\n           或，\n           my_excel = kog_lib.Excel()\n           my_excel.load(excel_path)\n   \n       数据读取：\n           my_excel.data = [\n               [第一行],\n               [第二行],\n               ...\n               [最后一行]\n           ]\n   \n       写入数据：\n           my_excel.make(data, filename='name1.xls', sheetname='sheet1')\n               data是一个二位的列表，如上述“数据读取”部分的“my_excel.data”\n   \n       打印内容：\n           my_excel.print(part,n)\n               part: \"all\" 、\"head\" 、\"tail\"：全部打印、 从头打印n个、 从尾部打印n个\n               n: 打印个数\n   ```\n   \n3. textgrid文件操作\n\n   ```python\n       类实例化\n           方式1:\n               my_tg = kog_lib.SFTextGrid()\n               my_tg.load(path)\n           方式2:\n               my_tg = kog_lib.SFTextGrid(path)\n   \n       获取有效时长等信息：\n           : t_file, t_effect, t_invalid, n_invalid =\n                           my_tg.get_textgrid_stat(re_str)  # re_str是正则表达式\n           : 返回， 总时长、有效时长、无效时长、无效个数\n   \n       修改textgrid中相关内容\n           : my_tg.sup_interval(item_ind,interval_ind,type,sup_str)\n               item_ind: item的序号, 0 或者 1\n               ind_ininterval_indterval:interval的序号，从1开始\n               type: 修改interval的哪个字段,maxtime、mintime、mark\n               sup_str:修改成sup_str\n   \n       textgrid中speaker检测：\n           : my_tg.check_with_txt(txt_path)\n               txt_path: 记录speaker相关信息的txt文件\n           先检查textgrid是否有误、在检查txt_path是否正确，最后看textgrid中的speaker是否在txt中\n   \n       textgrid检查：\n           : my_tg.check():\n   ```\n\n4. metadata文件操作\n\n   ```python\n       实例化:\n           my_metadata = kog_lib.SFMetadata()\n               此时会实例化一个默认的metadata模板\n   \n       导入metadata模板:\n           my_metadata.load_template(filepath)\n               也可以读取现有的metadata文件作为模板\n   \n       修改metadata文件内容:\n           my_metadata.set_metadata_element(key,value)\n               如: my_metadata.set_metadata_element(\"BIR\",\"北美\")\n   \n       获取metadata某个key的值:\n           my_metadata.get_metadata_element(key)\n               如: value = my_metadata.get_metadata_element(\"BIR\") # value=\"北美\"\n   \n       生产metadata文件:\n           my_metadata.make_metadata(output)\n               如: my_metadata.make_metadata(\"/data/xxxx.metadata\")\n   ```\n   \n5. wav音频分析处理\n\n   ```python\n       实例化：\n           my_wav = kog_lib.SFWav(wav_path)\n           或，\n           my_wav = kog_lib.SFWav()\n           my_wav.open(wav_path)\n   \n       获取主要参数：(声道数、样本宽度、采样率、总帧数)\n           my_wav.getparams()\n   \n       得到区间内峰值：\n           my_wav.get_peak(selected_channel,start_time,end_time)\n               selected_channel: 要得到哪个声道的数据，默认1声道\n               start_time: 起始时间，默认0\n               end_time: 终止时间，默认总时长\n   \n       切割音频: 从start_time开始且切到end_time时长的音频，保存到output\n           my_wav.cut_wav(output,start_time,end_time,selectedchannel=1)\n               默认切取第一个声道的信息，保存为单声道音频\n   \n       其他方法：\n           my_wav.readframes(nframes,start_frame) # 从第几帧开始读取多少帧\n           my_wav.readframes_bytime(start_time,end_time) # 从第几秒开始读到第几秒\n   ```\n   \n6. filesystem文件系统\n\n   ```python\n       实例化：此时会将当前目录挂载到文件系统\n           root_fs = kog_lib.SFFS()\n   \n       显示当前服务器配置：\n           root_fs.show_current_server_config()\n   \n       新增服务器系统配置：\n           root_fs.add_server_config(s_key,s_path)\n               s_key:服务器简称，例如 \"SVR1\"\n               s_path:服务器路径，例如 \"ssh://username:password@192.168.1.104:22\"\n   \n       挂载文件系统：\n           挂载本机其他路径：\n               root_fs.combine_fs(\"local_samples\",\"/samples\")\n           挂载ssh远程服务器\n               root_fs.combine_fs(\"my_ubuntu\",\"MY_UBUNTU\")\n                   ps：\"MY_UBUNTU\"的配置已经add_server_config过了\n           挂载FTP服务器\n               root_fs.combine_fs(\"surfing_ftp\",\"SFTP\")\n                   ps：\"SFTP\"的配置已经add_server_config过了\n           挂载tar和zip文件系统（系统根目录下的压缩包）\n               root_fs.combine_fs(\"tar_1\",\"/test.tar.gz\",write=True,compression=\"gz\")\n               root_fs.combine_fs(\"zip_1\",\"/test.zip\",write=True,compression=0)\n   \n       挂载文件系统后，可将各文件系统视为根目录下的子目录，可直接进行各种文件操作，如：\n           ***很多操作在root_fs.close()后才会生效***\n           返回根目录下列表\n               my_fs = root_fs.get_combined_fs()\n               my_fs.listdir(\"/\")\n           打印目录结构\n               my_fs.tree(path=\"/\",max_levels = 1)\n           复制 从my_ubuntu复制到tar压缩包内(仅可向新建的tar中写入，及write=True)\n               my_fs.copy(\"/my_ubuntu/p2.py\",\"/tar_1/1.py\",overwrite=True)\n           在tar中创建多层目录，并向此目录复制文件\n               my_fs.makedirs(\"/tar_1/x/xx\")(仅可向新建的tar中写入，及write=True)\n               my_fs.copy(\"/my_ubuntu/p2.py\",\"/tar_1/x/xx/1.py\",overwrite=True)\n           复制 从my_ubuntu复制到zip压缩包内(仅可向新建的zip中写入，及write=True)\n               my_fs.copy(\"/my_ubuntu/p2.py\",\"/zip_1/1.py\",overwrite=True)\n           在zip中创建多层目录，并向此目录复制文件(仅可向新建的zip中写入，及write=True)\n               my_fs.makedirs(\"/zip_1/x/xx\")\n               my_fs.copy(\"/my_ubuntu//p2.py\",\"/zip_1/x/xx/1.py\",overwrite=True)\n               my_fs.copydir(\"/my_ubuntu/scripts\",\"/local_current/scripts\",create=True)\n   \n           其他更详细的用法见pyfilesystem2的介绍:\n   ```\n   \n7. utils通用方法\n\n   ```python\n       按行读文件：\n           kog_lib.SFUtils.get_file_lines(path)\n   \n       按行读文件并去重：\n           kog_lib.SFUtils.get_uniq_lines_from_file(path)\n   \n       列表去重：\n           kog_lib.SFUtils.uniq_lines(lines)\n   \n       列表写入文件：\n           kog_lib.SFUtils.write_lines(filepath,lines)\n   \n       行（字符串）切割，并清洗：\n           kog_lib.SFUtils.split_clean_line(line,split_char,begin_re,end_re,clean_chinese)\n               line:要切割的字符串\n               split_char:以这个字符切分\n               begin_re: 清洗字符串line头部的正则，默认 儿童英语项目的正则\n               end_re: 清洗字符串line尾部的正则，默认 儿童英语项目的正则\n               clean_chinese: 是否清除汉字，默认 清除汉字\n   \n       根据正则表达式re_str清洗某行：\n           kog_lib.SFUtils.clean_line(line,re_str)\n   \n       根据正则表达式re_str按行清洗某列表：\n           kog_lib.SFUtils.clean_lines(lines,re_str)\n   \n       根据正则表达式re_str按行清洗某列表，返回列表元素是(新行，原行)的元组：\n           kog_lib.SFUtils.clean_lines_map_list(line,re_str)\n   \n       比较两个list，返回A中不再B的元素：\n           kog_lib.SFUtils.diff_list(A,B)\n   \n       以空格区分，返回某行的词数：\n           kog_lib.SFUtils.get_wordcount_from_line(line)\n   \n       以空格区分，返回某列表次数：\n           kog_lib.SFUtils.get_wordcount_from_line(lines)\n   \n       对列表lines分组，每组requaired_lines行，返回组列表的列表：\n           kog_lib.SFUtils.lines_split_2_sublines(lines,requaired_lines)\n   \n       获取str1到str2的编辑距离：\n           kog_lib.SFUtils.get_edit_distance(str1,str2)\n   \n       获取str1到str2的编辑步骤：\n           kog_lib.SFUtils.get_edit_ops(str1,str2)\n   \n       打印str1转换到str2的详细步骤：\n           kog_lib.SFUtils.print_edit_ops(str1,str2)\n   \n       打印列表：\n           kog_lib.SFUtils.print_lines(lines)\n   \n       打印字典：\n           kog_lib.SFUtils.print_dict(dict)\n   \n       批量重命名：\n           kog_lib.SFUtils.modify_name(path,prefix=\"\",suffix=\"\",mode=\"add\",deep=False)\n               path: 修改path路径下文件和文件夹的名称，不含path\n               prefix: 要加的前缀\n               suffix: 要加的后缀\n               mode: 模式，add/minus\n               deep: True：深度重命名（遍历path下文件及文件夹）\n                     False：仅对path下文件和文件夹进行重命名\n   ```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kog-lib",
    "package_url": "https://pypi.org/project/kog-lib/",
    "platform": "all",
    "project_url": "https://pypi.org/project/kog-lib/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/kog-lib/0.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple python lib, processing excel,mail,textgrid,metadata,wav; using for SurfingTech or others",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6413607,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d39a85c486871c4dab96f09790c1ff41ef926b3e31827d06994ad8c3d2c8f2e6",
          "md5": "1eaffadbf4364bea9ce15c4086f90e55",
          "sha256": "ae2ef7b8cf7060aadb88c8839b42146d0182e4884db97dec7c8d99fbbab23301"
        },
        "downloads": -1,
        "filename": "kog_lib-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1eaffadbf4364bea9ce15c4086f90e55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6897,
        "upload_time": "2019-12-20T05:50:23",
        "upload_time_iso_8601": "2019-12-20T05:50:23.145568Z",
        "url": "https://files.pythonhosted.org/packages/d3/9a/85c486871c4dab96f09790c1ff41ef926b3e31827d06994ad8c3d2c8f2e6/kog_lib-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9b2c2a4daa83b5d4a3c27f38bda64e9dd8c615897f9f1fd696bbcab70abd5fa",
          "md5": "f82dfa37c310d8a40d7c462e75fcafcb",
          "sha256": "e01516dcd75457d2eca7b534341b1f2c4141461a6255c977601b867956078bc1"
        },
        "downloads": -1,
        "filename": "kog_lib-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f82dfa37c310d8a40d7c462e75fcafcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13361,
        "upload_time": "2020-01-03T11:41:40",
        "upload_time_iso_8601": "2020-01-03T11:41:40.463860Z",
        "url": "https://files.pythonhosted.org/packages/d9/b2/c2a4daa83b5d4a3c27f38bda64e9dd8c615897f9f1fd696bbcab70abd5fa/kog_lib-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc02b0593f224ce0d9e28275cf7c4eddfbd7e9080b9a8c9aa4ed411a90c2430e",
          "md5": "c2691560d61902e8c9942bbd906e3c86",
          "sha256": "b5e58982a7004b08c5b2cb78f9dd3a599f0968b6f2d1cb22bda08cacce44ecd8"
        },
        "downloads": -1,
        "filename": "kog_lib-0.2.3-py3.6.egg",
        "has_sig": false,
        "md5_digest": "c2691560d61902e8c9942bbd906e3c86",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": null,
        "size": 60210,
        "upload_time": "2020-01-08T06:30:10",
        "upload_time_iso_8601": "2020-01-08T06:30:10.646779Z",
        "url": "https://files.pythonhosted.org/packages/cc/02/b0593f224ce0d9e28275cf7c4eddfbd7e9080b9a8c9aa4ed411a90c2430e/kog_lib-0.2.3-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73fba02c1fa769e8202c1fa45e8ab540acb0265bf2d4afc33fcf9fba15cf9895",
          "md5": "078713ce6982caabdd4e909ea2bac2ab",
          "sha256": "365dc83cfa5943c8826f8d6e47ad4ed12fe874e4e17b0b0e1d9522a8f8a9804a"
        },
        "downloads": -1,
        "filename": "kog_lib-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "078713ce6982caabdd4e909ea2bac2ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23043,
        "upload_time": "2020-01-08T06:30:12",
        "upload_time_iso_8601": "2020-01-08T06:30:12.610152Z",
        "url": "https://files.pythonhosted.org/packages/73/fb/a02c1fa769e8202c1fa45e8ab540acb0265bf2d4afc33fcf9fba15cf9895/kog_lib-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc02b0593f224ce0d9e28275cf7c4eddfbd7e9080b9a8c9aa4ed411a90c2430e",
        "md5": "c2691560d61902e8c9942bbd906e3c86",
        "sha256": "b5e58982a7004b08c5b2cb78f9dd3a599f0968b6f2d1cb22bda08cacce44ecd8"
      },
      "downloads": -1,
      "filename": "kog_lib-0.2.3-py3.6.egg",
      "has_sig": false,
      "md5_digest": "c2691560d61902e8c9942bbd906e3c86",
      "packagetype": "bdist_egg",
      "python_version": "3.6",
      "requires_python": null,
      "size": 60210,
      "upload_time": "2020-01-08T06:30:10",
      "upload_time_iso_8601": "2020-01-08T06:30:10.646779Z",
      "url": "https://files.pythonhosted.org/packages/cc/02/b0593f224ce0d9e28275cf7c4eddfbd7e9080b9a8c9aa4ed411a90c2430e/kog_lib-0.2.3-py3.6.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73fba02c1fa769e8202c1fa45e8ab540acb0265bf2d4afc33fcf9fba15cf9895",
        "md5": "078713ce6982caabdd4e909ea2bac2ab",
        "sha256": "365dc83cfa5943c8826f8d6e47ad4ed12fe874e4e17b0b0e1d9522a8f8a9804a"
      },
      "downloads": -1,
      "filename": "kog_lib-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "078713ce6982caabdd4e909ea2bac2ab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23043,
      "upload_time": "2020-01-08T06:30:12",
      "upload_time_iso_8601": "2020-01-08T06:30:12.610152Z",
      "url": "https://files.pythonhosted.org/packages/73/fb/a02c1fa769e8202c1fa45e8ab540acb0265bf2d4afc33fcf9fba15cf9895/kog_lib-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}