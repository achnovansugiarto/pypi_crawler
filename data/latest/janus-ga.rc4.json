{
  "info": {
    "author": "Gary Tom, AkshatKumar Nigam, Robert Pollice, Al√°n Aspuru-Guzik",
    "author_email": "akshat.nigam@mail.utoronto.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# JANUS: Parallel Tempered Genetic Algorithm Guided by Deep Neural Networks for Inverse Molecular Design\nThis repository contains code for the paper: [JANUS: Parallel Tempered Genetic Algorithm Guided by Deep Neural Networks for Inverse Molecular Design](https://arxiv.org/abs/2106.04011). \n\nOriginally by: AkshatKumar Nigam, Robert Pollice, Al√°n Aspuru-Guzik \n\nUpdated by: Gary Tom\n\n<img align=\"center\" src=\"https://github.com/aspuru-guzik-group/JANUS/blob/main/aux_files/logo.png\"/>\n\n\n## Prerequsites: \n\nUse [Python 3.7 or up](https://www.python.org/download/releases/3.0/).\n\nYou will need to separately install [RDKit](https://www.rdkit.org/docs/Install.html) version >= 2020.03.1. The easiest is to do this on conda.\n\nJANUS uses [SELFIES](https://github.com/aspuru-guzik-group/selfies) version 1.0.3. If you want to use a different version, pip install your desired version; this package will still be compatible. Note that you will have to change your input alphabets to work with other versions of SELFIES.\n\n\n## Major changes:\n\n- Support the use of any version of SELFIES (please check your installation).\n- Improved multiprocessing. Fitness function is not parallelized, in the case that the function already spawns multiple processes.\n- GPU acceleration of neural networks.\n- Early stopping for classifier. \n- Included SMILES filtering option.\n- Additional hyperparameters for controlling JANUS. Defaults used in paper are given in `tests` directory.\n\n## How to run: \n\nInstall JANUS using \n\n```bash\npip install janus-ga\n```\n\nExample script of how to use JANUS is found in [tests/example.py](https://github.com/aspuru-guzik-group/JANUS/blob/main/tests/example.py):\n\n```python\nfrom janus import JANUS, utils\nfrom rdkit import Chem, RDLogger\nfrom rdkit.Chem import AllChem, RDConfig, Descriptors\nRDLogger.DisableLog(\"rdApp.*\")\n\nimport selfies\n\ndef fitness_function(smi: str) -> float:\n    \"\"\" User-defined function that takes in individual smiles \n    and outputs a fitness value.\n    \"\"\"\n    # logP fitness\n    return Descriptors.MolLogP(Chem.MolFromSmiles(smi))\n\ndef custom_filter(smi: str):\n    \"\"\" Function that takes in a smile and returns a boolean.\n    True indicates the smiles PASSES the filter.\n    \"\"\"\n    # smiles length filter\n    if len(smi) > 81 or len(smi) == 0:\n        return False\n    else:\n        return True\n\n# all parameters to be set, below are defaults\nparams_dict = {\n    # Number of iterations that JANUS runs for\n    \"generations\": 200,\n\n    # The number of molecules for which fitness calculations are done, \n    # exploration and exploitation each have their own population\n    \"generation_size\": 5000,\n    \n    # Number of molecules that are exchanged between the exploration and exploitation\n    \"num_exchanges\": 5,\n\n    # Callable filtering function (None defaults to no filtering)\n    \"custom_filter\": custom_filter,\n\n    # Fragments from starting population used to extend alphabet for mutations\n    \"use_fragments\": True,\n\n    # An option to use a classifier as selection bias\n    \"use_classifier\": True,\n}\n\n# Set your SELFIES constraints (below used for manuscript)\ndefault_constraints = selfies.get_semantic_constraints()\nnew_constraints = default_constraints\nnew_constraints['S'] = 2\nnew_constraints['P'] = 3\nselfies.set_semantic_constraints(new_constraints)  # update constraints\n\n# Create JANUS object.\nagent = JANUS(\n    work_dir = 'RESULTS',                                   # where the results are saved\n    fitness_function = fitness_function,                    # user-defined fitness for given smiles\n    start_population = \"./DATA/sample_start_smiles.txt\",   # file with starting smiles population\n    **params_dict\n)\n\n# Alternatively, you can get hyperparameters from a yaml file\n# Descriptions for all parameters are found in default_params.yml\nparams_dict = utils.from_yaml(\n    work_dir = 'RESULTS',  \n    fitness_function = fitness_function, \n    start_population = \"./DATA/sample_start_smiles.txt\",\n    yaml_file = 'default_params.yml',       # default yaml file with parameters\n    **params_dict                           # overwrite yaml parameters with dictionary\n)\nagent = JANUS(**params_dict)\n\n# Run according to parameters\nagent.run()     # RUN IT!\n```\n\nWithin this file are examples for: \n1. A function for calculting property values (see function `fitness_function`). \n2. Custom filtering of SMILES (see function `custom_filter`).\n3. Initializing JANUS from dictionary of parameters.\n4. Generating hyperparameters from provided yaml file (see function `janus.utils.from_yaml`).\n\n\nYou can run the file with provided test files\n\n```bash\ncd tests\npython ./example.py\n```\n\n\nImportant parameters the user should provide:\n- `work_dir`: directory for outputting results\n- `fitness_function`: fitness function defined for an input smiles that will be maximized\n- `start_population`: path to text file of starting smiles one each new line\n- `generations`: number if evolution iterations to perform\n- `generation_size`: number of molecules in the populations per generation\n- `custom_filter`: filter function checked after mutation and crossover, returns `True` for accepted molecules\n- `use_fragments`: toggle adding fragments from starting population to mutation alphabet\n- `use_classifier`: toggle using classifier for selection bias\n\nSee [tests/default_params.yml](https://github.com/aspuru-guzik-group/JANUS/blob/main/tests/default_params.yml) for detailed description of adjustable parameters.\n\n\n## Outputs: \n\nAll results from running JANUS will be stored in specified `work_dir`. \n\nThe following files will be created: \n1. fitness_explore.txt: \n   Fitness values for all molecules from the exploration component of JANUS.    \n2. fitness_local_search.txt: \n   Fitness values for all molecules from the exploitation component of JANUS. \n3. generation_all_best.txt: \n   Smiles and fitness value for the best molecule encountered in every generation (iteration). \n4. init_mols.txt: \n   List of molecules used to initialte JANUS. \n5. population_explore.txt: \n   SMILES for all molecules from the exploration component of JANUS. \n6. population_local_search.txt: \n   SMILES for all molecules from the exploitation component of JANUS. \n7. hparams.json:\n   Hyperparameters used for initializing JANUS.\n\n\n## Paper Results/Reproducibility: \nOur code and results for each experiment in the paper can be found here: \n* Experiment 4.1: https://drive.google.com/file/d/1rscIyzpTvtyiEkoP1WsF-XtSHJGQStUU/view?usp=sharing\n* Experiment 4.3: https://drive.google.com/file/d/1tlIdfSWwzVeJ5kZ98l8G6osE9zf9wP1f/view?usp=sharing\n* GuacaMol: https://drive.google.com/file/d/1FqetwNg6VVc-C3eiPoosGZ4-47WpYBAt/view?usp=sharing\n\n\n## Questions, problems?\nMake a github issue üòÑ. Please be as clear and descriptive as possible. Please feel free to reach\nout in person: (akshat[DOT]nigam[AT]mail[DOT]utoronto[DOT]ca, rob[DOT]pollice[AT]utoronto[DOT]ca)\n\n## License\n\n[Apache License 2.0](https://choosealicense.com/licenses/apache-2.0/)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aspuru-guzik-group/janus",
    "keywords": "Genetic Algorithm,Inverse Molecular Design,Deep Neural Networks",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "janus-ga",
    "package_url": "https://pypi.org/project/janus-ga/",
    "platform": null,
    "project_url": "https://pypi.org/project/janus-ga/",
    "project_urls": {
      "Homepage": "https://github.com/aspuru-guzik-group/janus"
    },
    "release_url": "https://pypi.org/project/janus-ga/1.0.3/",
    "requires_dist": [
      "torch (>=1.9.0)",
      "selfies (==1.0.3)",
      "numpy (>=1.17.0)",
      "pyyaml (>=6.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "JANUS: Parallel Tempered Genetic Algorithm Guided by Deep Neural Networks for Inverse Molecular Design",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14560518,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0d32235dc78c06eef542092dedf03ed35b1424209f269e4a43fcaff4b1dad08",
          "md5": "12d8896b2ed6efdaaee1b76638a3cf51",
          "sha256": "27d47b9e4ed6b205730ca1837f3222b2c6e06fdd71eec394dcdd91f37455f2cd"
        },
        "downloads": -1,
        "filename": "janus_ga-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12d8896b2ed6efdaaee1b76638a3cf51",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25189,
        "upload_time": "2022-05-25T13:29:38",
        "upload_time_iso_8601": "2022-05-25T13:29:38.055919Z",
        "url": "https://files.pythonhosted.org/packages/b0/d3/2235dc78c06eef542092dedf03ed35b1424209f269e4a43fcaff4b1dad08/janus_ga-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90a8190d03585add885a40bbd71a2c383ded8a72bef38cf03c6cb4c71882dfac",
          "md5": "e1f978ca6ba86d67785c1d164039f11f",
          "sha256": "10616fb49c7a12fecde55a803aa40c9032554b8bc9f3aed75730e3ecb9e841a5"
        },
        "downloads": -1,
        "filename": "janus-ga-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e1f978ca6ba86d67785c1d164039f11f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24923,
        "upload_time": "2022-05-25T13:29:40",
        "upload_time_iso_8601": "2022-05-25T13:29:40.726487Z",
        "url": "https://files.pythonhosted.org/packages/90/a8/190d03585add885a40bbd71a2c383ded8a72bef38cf03c6cb4c71882dfac/janus-ga-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9ee5079eee943d0f4e1aaa645f2a16231c442305fcb57ec469cba3793784993",
          "md5": "ca7aba046aac4118b1736fe001cd7658",
          "sha256": "e2d113dc5e53670fafccf50b4e953f8891133be83fbb23f1ebca20052889f518"
        },
        "downloads": -1,
        "filename": "janus_ga-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca7aba046aac4118b1736fe001cd7658",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25213,
        "upload_time": "2022-06-07T18:48:42",
        "upload_time_iso_8601": "2022-06-07T18:48:42.293895Z",
        "url": "https://files.pythonhosted.org/packages/f9/ee/5079eee943d0f4e1aaa645f2a16231c442305fcb57ec469cba3793784993/janus_ga-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd5ffc313ec02548171df9fe68eabb577a2d2ec4b8872df3742c2cb93d4e0179",
          "md5": "9388b519982897af2e0dcdeb324fbf2b",
          "sha256": "d45130b75615ed2e91669ef5767cb2b8fa0b1965a45b69ef04e93ea4125c188a"
        },
        "downloads": -1,
        "filename": "janus-ga-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9388b519982897af2e0dcdeb324fbf2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24973,
        "upload_time": "2022-06-07T18:48:44",
        "upload_time_iso_8601": "2022-06-07T18:48:44.047334Z",
        "url": "https://files.pythonhosted.org/packages/bd/5f/fc313ec02548171df9fe68eabb577a2d2ec4b8872df3742c2cb93d4e0179/janus-ga-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec5ae1e52828853a47add0ffefe41a8ecf9a1c8914563f6fab3183c4ef6d015c",
          "md5": "4fe6552874c1258344011b669ac2457a",
          "sha256": "c2b88a95672e3d773869cb478bfb70f29dc64fbb1ae44b0d461ac86897ec91b6"
        },
        "downloads": -1,
        "filename": "janus_ga-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fe6552874c1258344011b669ac2457a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25278,
        "upload_time": "2022-07-20T23:06:07",
        "upload_time_iso_8601": "2022-07-20T23:06:07.964189Z",
        "url": "https://files.pythonhosted.org/packages/ec/5a/e1e52828853a47add0ffefe41a8ecf9a1c8914563f6fab3183c4ef6d015c/janus_ga-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae4ef1d9d65d7eb03caf3b4b26ec7861662bba33ea8f055ac6c4707ff096229d",
          "md5": "cb86479697b3fdaf313fe942a47db4ce",
          "sha256": "4723e5d584b25c51e88bf7d0c32a8937f8ec246e106f7aca3d2b52785d4407b3"
        },
        "downloads": -1,
        "filename": "janus-ga-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cb86479697b3fdaf313fe942a47db4ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24629,
        "upload_time": "2022-07-20T23:06:10",
        "upload_time_iso_8601": "2022-07-20T23:06:10.042161Z",
        "url": "https://files.pythonhosted.org/packages/ae/4e/f1d9d65d7eb03caf3b4b26ec7861662bba33ea8f055ac6c4707ff096229d/janus-ga-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "425ce0e31eb71f9135499a7ab1096009a89566189be513308bb2acf8779ad0f2",
          "md5": "d2815b2cf1871df33425da730f02defb",
          "sha256": "0365b87e2441cb85d4885712671f67f3b3c5b72b2fe981b9098b3319321f7be2"
        },
        "downloads": -1,
        "filename": "janus_ga-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2815b2cf1871df33425da730f02defb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25279,
        "upload_time": "2022-07-27T02:31:22",
        "upload_time_iso_8601": "2022-07-27T02:31:22.099502Z",
        "url": "https://files.pythonhosted.org/packages/42/5c/e0e31eb71f9135499a7ab1096009a89566189be513308bb2acf8779ad0f2/janus_ga-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ace593a3d0cf06f5fef9a271f57cd93ae4466914b57da443fb1ca4b566462694",
          "md5": "f70834ebde803315b524b555d7d30efb",
          "sha256": "bb084343bad558f0ef48380db08ccb36921957f0dc7bc8237e1a587c439e64c1"
        },
        "downloads": -1,
        "filename": "janus-ga-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f70834ebde803315b524b555d7d30efb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24622,
        "upload_time": "2022-07-27T02:31:23",
        "upload_time_iso_8601": "2022-07-27T02:31:23.719123Z",
        "url": "https://files.pythonhosted.org/packages/ac/e5/93a3d0cf06f5fef9a271f57cd93ae4466914b57da443fb1ca4b566462694/janus-ga-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "425ce0e31eb71f9135499a7ab1096009a89566189be513308bb2acf8779ad0f2",
        "md5": "d2815b2cf1871df33425da730f02defb",
        "sha256": "0365b87e2441cb85d4885712671f67f3b3c5b72b2fe981b9098b3319321f7be2"
      },
      "downloads": -1,
      "filename": "janus_ga-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d2815b2cf1871df33425da730f02defb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25279,
      "upload_time": "2022-07-27T02:31:22",
      "upload_time_iso_8601": "2022-07-27T02:31:22.099502Z",
      "url": "https://files.pythonhosted.org/packages/42/5c/e0e31eb71f9135499a7ab1096009a89566189be513308bb2acf8779ad0f2/janus_ga-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ace593a3d0cf06f5fef9a271f57cd93ae4466914b57da443fb1ca4b566462694",
        "md5": "f70834ebde803315b524b555d7d30efb",
        "sha256": "bb084343bad558f0ef48380db08ccb36921957f0dc7bc8237e1a587c439e64c1"
      },
      "downloads": -1,
      "filename": "janus-ga-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f70834ebde803315b524b555d7d30efb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 24622,
      "upload_time": "2022-07-27T02:31:23",
      "upload_time_iso_8601": "2022-07-27T02:31:23.719123Z",
      "url": "https://files.pythonhosted.org/packages/ac/e5/93a3d0cf06f5fef9a271f57cd93ae4466914b57da443fb1ca4b566462694/janus-ga-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}