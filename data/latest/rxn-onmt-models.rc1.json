{
  "info": {
    "author": "IBM RXN team",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# RXN package for OpenNMT-based models\n\n[![Actions tests](https://github.com/rxn4chemistry/rxn-onmt-models/actions/workflows/tests.yaml/badge.svg)](https://github.com/rxn4chemistry/rxn-onmt-models/actions)\n\nThis repository contains a Python package and associated scripts for training reaction models based on the OpenNMT library.\nThe repository is built on top of other RXN packages; see our other repositories [`rxn-utilities`](https://github.com/rxn4chemistry/rxn-utilities), [`rxn-chemutils`](https://github.com/rxn4chemistry/rxn-chemutils), and [`rxn-onmt-utils`](https://github.com/rxn4chemistry/rxn-onmt-utils).\n\nFor the evaluation of trained models, see the [`rxn-metrics`](https://github.com/rxn4chemistry/rxn-metrics) repository.\n\nThe documentation can be found [here](https://rxn4chemistry.github.io/rxn-onmt-models/).\n\nThis repository was produced through a collaborative project involving IBM Research Europe and Syngenta.\n\n## System Requirements\n\nThis package is supported on all operating systems.\nIt has been tested on the following systems:\n+ macOS: Big Sur (11.1)\n+ Linux: Ubuntu 18.04.4\n\nA Python version of 3.6, 3.7, or 3.8 is recommended.\nPython versions 3.9 and above are not expected to work due to compatibility with the selected version of OpenNMT.\n\n## Installation guide\n\nThe package can be installed from Pypi:\n```bash\npip install rxn-onmt-models[rdkit]\n```\nYou can leave out `[rdkit]` if RDKit is already available in your environment.\n\nFor local development, the package can be installed with:\n```bash\npip install -e \".[dev,rdkit]\"\n```\n\n## Training models.\n\nExample of usage for training RXN models\n\n### The easy way\n\nSimply execute the interactive program `rxn-plan-training` in your terminal and follow the instructions.\n\n### The complicated way\n\n0. Optional: set shell variables, to be used in the commands later on.\n\n```shell\nMODEL_TASK=\"forward\"\n\n# Existing TXT files\nDATA_1=\"/path/to/data_1.txt\"\nDATA_2=\"/path/to/data_2.txt\"\nDATA_3=\"/path/to/data_3.txt\"\n\n# Where to put the processed data\nDATA_DIR_1=\"/path/to/processed_data_1\"\nDATA_DIR_2=\"/path/to/processed_data_2\"\nDATA_DIR_3=\"/path/to/processed_data_3\"\n\n# Where to save the ONMT-preprocessed data\nPREPROCESSED=\"/path/to/onmt-preprocessed\"\n\n# Where to save the models\nMODELS=\"/path/to/models\"\nMODELS_FINETUNED=\"/path/to/models_finetuned\"\n```\n\n1. Prepare the data (standardization, filtering, etc.)\n\n```shell\nrxn-prepare-data --input_data $DATA_1 --output_dir $DATA_DIR_1\n```\n\n2. Preprocess the data with OpenNMT\n\n```shell\nrxn-onmt-preprocess --input_dir $DATA_DIR_1 --output_dir $PREPROCESSED --model_task $MODEL_TASK\n```\n\n3. Train the model (here with small parameter values, to make it fast on CPU for testing).\n\n```shell\nrxn-onmt-train --model_output_dir $MODELS --preprocess_dir $PREPROCESSED_SINGLE --train_num_steps 10 --batch_size 4 --heads 2 --layers 2 --transformer_ff 512 --no_gpu\n```\n\n### Multi-task training\n\nFor multi-task training, the process is similar. \nWe need to prepare also the second data set; in addition, the OpenNMT preprocessing and training take additional arguments.\nTo sum up:\n\n```shell\nrxn-prepare-data --input_data $DATA_1 --output_dir $DATA_DIR_1\nrxn-prepare-data --input_data $DATA_2 --output_dir $DATA_DIR_2\nrxn-prepare-data --input_data $DATA_2 --output_dir $DATA_DIR_3\nrxn-onmt-preprocess --input_dir $DATA_DIR_1 --output_dir $PREPROCESSED --model_task $MODEL_TASK \\\n  --additional_data $DATA_DIR_2 --additional_data $DATA_DIR_3\nrxn-onmt-train --model_output_dir $MODELS --preprocess_dir $PREPROCESSED --train_num_steps 30 --batch_size 4 --heads 2 --layers 2 --transformer_ff 256 --no_gpu \\\n  --data_weights 1 --data_weights 3 --data_weights 4\n```\n\n### Continuing the training\n\nContinuing training is possible (for both single-task and multi-task); it needs fewer parameters:\n```shell\nrxn-onmt-continue-training --model_output_dir $MODELS --preprocess_dir $PREPROCESSED --train_num_steps 30 --batch_size 4 --no_gpu \\\n  --data_weights 1 --data_weights 3 --data_weights 4\n```\n\n### Fine-tuning\n\nFine-tuning is in principle similar to continuing the training. \nThe main differences are the potential occurrence of new tokens, as well as the optimizer being reset.\nThere is a dedicated command for fine-tuning. For example:\n```shell\nrxn-onmt-finetune --model_output_dir $MODELS_FINETUNED --preprocess_dir $PREPROCESSED --train_num_steps 20 --batch_size 4 --no_gpu \\\n  --train_from $MODELS/model_step_30.pt\n```\nThe syntax is very similar to `rxn-onmt-train` and `rxn-onmt-continue-training`.\nThis is compatible both with single-task and multi-task.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rxn4chemistry/rxn-onmt-models",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rxn-onmt-models",
    "package_url": "https://pypi.org/project/rxn-onmt-models/",
    "platform": null,
    "project_url": "https://pypi.org/project/rxn-onmt-models/",
    "project_urls": {
      "Documentation": "https://rxn4chemistry.github.io/rxn-onmt-models/",
      "Homepage": "https://github.com/rxn4chemistry/rxn-onmt-models",
      "Repository": "https://github.com/rxn4chemistry/rxn-onmt-models"
    },
    "release_url": "https://pypi.org/project/rxn-onmt-models/1.0.0/",
    "requires_dist": [
      "attrs (>=21.2.0)",
      "click (>=8.0)",
      "rxn-chem-utils (>=1.1.4)",
      "rxn-onmt-utils (>=1.0.0)",
      "rxn-reaction-preprocessing (>=2.0.2)",
      "rxn-utils (>=1.1.9)",
      "black (>=22.3.0) ; extra == 'dev'",
      "bump2version (>=1.0.1) ; extra == 'dev'",
      "flake8 (>=3.8.4) ; extra == 'dev'",
      "freezegun (>=1.1.2) ; extra == 'dev'",
      "isort (>=5.10.1) ; extra == 'dev'",
      "mypy (>=0.910) ; extra == 'dev'",
      "pytest (>=5.3.4) ; extra == 'dev'",
      "types-setuptools (>=57.4.14) ; extra == 'dev'",
      "rdkit-pypi (>=2021.3.2) ; (python_version < \"3.7\") and extra == 'rdkit'",
      "rdkit (>=2022.3.4) ; (python_version >= \"3.7\") and extra == 'rdkit'"
    ],
    "requires_python": ">=3.6",
    "summary": "Training of OpenNMT-based RXN models",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17049500,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15a204aa5fee9f18cfe8867f77f07c25a99a09c74c3d5a163864f9609f887093",
          "md5": "c52aa6f52bd60f5fb03573d1e8cdc05b",
          "sha256": "a19fa258a616bdac4f0da4fae7b7ca292733a0c9997553a72ce8d6c762b2a740"
        },
        "downloads": -1,
        "filename": "rxn_onmt_models-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c52aa6f52bd60f5fb03573d1e8cdc05b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27913,
        "upload_time": "2023-02-24T09:21:21",
        "upload_time_iso_8601": "2023-02-24T09:21:21.509900Z",
        "url": "https://files.pythonhosted.org/packages/15/a2/04aa5fee9f18cfe8867f77f07c25a99a09c74c3d5a163864f9609f887093/rxn_onmt_models-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86fafa7dc9dfc9c54468b2921d2623cf7541345ce65f62ae6cbde942323adde8",
          "md5": "36290318c6aea51bb23631249ca5c223",
          "sha256": "6eb563652020de19ffb6b3d7658a7df6282f9a22a67af6d688c45e8e79ba9fe7"
        },
        "downloads": -1,
        "filename": "rxn-onmt-models-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "36290318c6aea51bb23631249ca5c223",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24178,
        "upload_time": "2023-02-24T09:21:22",
        "upload_time_iso_8601": "2023-02-24T09:21:22.821233Z",
        "url": "https://files.pythonhosted.org/packages/86/fa/fa7dc9dfc9c54468b2921d2623cf7541345ce65f62ae6cbde942323adde8/rxn-onmt-models-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15a204aa5fee9f18cfe8867f77f07c25a99a09c74c3d5a163864f9609f887093",
        "md5": "c52aa6f52bd60f5fb03573d1e8cdc05b",
        "sha256": "a19fa258a616bdac4f0da4fae7b7ca292733a0c9997553a72ce8d6c762b2a740"
      },
      "downloads": -1,
      "filename": "rxn_onmt_models-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c52aa6f52bd60f5fb03573d1e8cdc05b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 27913,
      "upload_time": "2023-02-24T09:21:21",
      "upload_time_iso_8601": "2023-02-24T09:21:21.509900Z",
      "url": "https://files.pythonhosted.org/packages/15/a2/04aa5fee9f18cfe8867f77f07c25a99a09c74c3d5a163864f9609f887093/rxn_onmt_models-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86fafa7dc9dfc9c54468b2921d2623cf7541345ce65f62ae6cbde942323adde8",
        "md5": "36290318c6aea51bb23631249ca5c223",
        "sha256": "6eb563652020de19ffb6b3d7658a7df6282f9a22a67af6d688c45e8e79ba9fe7"
      },
      "downloads": -1,
      "filename": "rxn-onmt-models-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "36290318c6aea51bb23631249ca5c223",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 24178,
      "upload_time": "2023-02-24T09:21:22",
      "upload_time_iso_8601": "2023-02-24T09:21:22.821233Z",
      "url": "https://files.pythonhosted.org/packages/86/fa/fa7dc9dfc9c54468b2921d2623cf7541345ce65f62ae6cbde942323adde8/rxn-onmt-models-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}