{
  "info": {
    "author": "Adam Kovacs, Gabor Recski",
    "author_email": "adam.kovacs@tuwien.ac.at, gabor.recski@tuwien.ac.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/adaamko/POTATO/dev/files/potato_logo.png\" />\n</p>\n\n# POTATO: exPlainable infOrmation exTrAcTion framewOrk\nPOTATO is a human-in-the-loop XAI framework for extracting and evaluating interpretable graph features for any classification problem in Natural Language Processing.\n\n## Built systems\n\nTo get started with rule-systems we provide rule-based features prebuilt with POTATO on different datasets (e.g. our paper _Offensive text detection on English Twitter with deep learning models and rule-based systems_ for the HASOC2021 shared task). If you are interested in that, you can go under _features/_ for more info!\n\n## Install and Quick Start\nCheck out our quick demonstration (~2 min) video about the tool:\nhttps://youtu.be/PkQ71wUSeNU\n\nThere is a longer version with a detailed method description and presented background research (~1 hour): https://youtu.be/6R_V1WfIjsU\n\n### Setup\nThe tool is heavily dependent upon the [tuw-nlp](https://github.com/recski/tuw-nlp) repository. You can install tuw-nlp with pip:\n\n```\npip install tuw-nlp\n```\nThen follow the [instructions](https://github.com/recski/tuw-nlp) to setup the package.\n\n\nThen install POTATO from pip:\n\n```\npip install xpotato\n```\n\nOr you can install it from source:\n\n```\npip install -e .\n```\n\n### Usage\n\n- POTATO is an IE tool that works on graphs, currently we support three types of graphs: AMR, UD and [Fourlang](https://github.com/kornai/4lang). \n\n- In the README we provide examples with fourlang semantic graphs. Make sure to follow the instructions in the [tuw_nlp](https://github.com/recski/tuw-nlp) repo to be able to build fourlang graphs. \n\n- If you are interested in AMR graphs, you can go to the [hasoc](https://github.com/adaamko/POTATO/tree/main/features/hasoc) folder To get started with rule-systems prebuilt with POTATO on the HASOC dataset (we also presented a paper named _Offensive text detection on English Twitter with deep learning models and rule-based systems_ for the HASOC2021 shared task). \n\n- We also provide experiments on the [CrowdTruth](https://github.com/CrowdTruth/Medical-Relation-Extraction) medical relation extraction datasets with UD graphs, go to the [crowdtruth](https://github.com/adaamko/POTATO/tree/main/features/crowdtruth) folder for more info!\n\n- POTATO can also handle unlabeled, or partially labeled data, see [advanced](###advanced-mode) mode to get to know more.\n\n__To see complete working examples go under the _notebooks/_ folder to see experiments on HASOC and on the Semeval relation extraction dataset.__\n\nFirst import packages from potato:\n```python\nfrom xpotato.dataset.dataset import Dataset\nfrom xpotato.models.trainer import GraphTrainer\n```\n\nFirst we demonstrate POTATO's capabilities with a few sentences manually picked from the dataset.\n\n__Note that we replaced the two entitites in question with _XXX_ and _YYY_.__\n\n```python\nsentences = [(\"Governments and industries in nations around the world are pouring XXX into YYY.\", \"Entity-Destination(e1,e2)\"),\n            (\"The scientists poured XXX into pint YYY.\", \"Entity-Destination(e1,e2)\"),\n            (\"The suspect pushed the XXX into a deep YYY.\", \"Entity-Destination(e1,e2)\"),\n            (\"The Nepalese government sets up a XXX to inquire into the alleged YYY of diplomatic passports.\", \"Other\"),\n            (\"The entity1 to buy papers is pushed into the next entity2.\", \"Entity-Destination(e1,e2)\"),\n            (\"An unnamed XXX was pushed into the YYY.\", \"Entity-Destination(e1,e2)\"),\n            (\"Since then, numerous independent feature XXX have journeyed into YYY.\", \"Other\"),\n            (\"For some reason, the XXX was blinded from his own YYY about the incommensurability of time.\", \"Other\"),\n            (\"Sparky Anderson is making progress in his XXX from YYY and could return to managing the Detroit Tigers within a week.\", \"Other\"),\n            (\"Olympics have already poured one XXX into the YYY.\", \"Entity-Destination(e1,e2)\"),\n            (\"After wrapping him in a light blanket, they placed the XXX in the YYY his father had carved for him.\", \"Entity-Destination(e1,e2)\"),\n            (\"I placed the XXX in a natural YYY, at the base of a part of the fallen arch.\", \"Entity-Destination(e1,e2)\"),\n            (\"The XXX was delivered from the YYY of Lincoln Memorial on August 28, 1963 as part of his famous March on Washington.\", \"Other\"),\n            (\"The XXX leaked from every conceivable YYY.\", \"Other\"),\n            (\"The scientists placed the XXX in a tiny YYY which gets channelled into cancer cells, and is then unpacked with a laser impulse.\", \"Entity-Destination(e1,e2)\"),\n            (\"The level surface closest to the MSS, known as the XXX, departs from an YYY by about 100 m in each direction.\", \"Other\"),\n            (\"Gaza XXX recover from three YYY of war.\", \"Other\"),\n            (\"This latest XXX from the animation YYY at Pixar is beautiful, masterly, inspired - and delivers a powerful ecological message.\", \"Other\")]\n```\n\nInitialize the dataset and also provide a label encoding. Then parse the sentences into graphs. Currently we provide three types of graphs: _ud_, _fourlang_, _amr_. Also provide the language you want to parse, currently we support English (en) and German (de).\n\n```python\ndataset = Dataset(sentences, label_vocab={\"Other\":0, \"Entity-Destination(e1,e2)\": 1}, lang=\"en\")\ndataset.set_graphs(dataset.parse_graphs(graph_format=\"ud\"))\n```\n\nCheck the dataset:\n```python\ndf = dataset.to_dataframe()\n```\n\nWe can also check any of the graphs:\n### Check any of the graphs parsed\n\n```python\nfrom xpotato.models.utils import to_dot\nfrom graphviz import Source\n\nSource(to_dot(df.iloc[0].graph))\n```\n![graph](https://raw.githubusercontent.com/adaamko/POTATO/main/files/re_example.svg)\n\n### Rules\n\nIf the dataset is prepared and the graphs are parsed, we can write rules to match labels. We can write rules either manually or extract\nthem automatically (POTATO also provides a frontend that tries to do both).\n\nThe simplest rule would be just a node in the graph:\n```python\n# The syntax of the rules is List[List[rules that we want to match], List[rules that shouldn't be in the matched graphs], Label of the rule]\nrule_to_match = [[[\"(u_1 / into)\"], [], \"Entity-Destination(e1,e2)\"]]\n```\n\nInit the rule matcher:\n```python\nfrom xpotato.graph_extractor.extract import FeatureEvaluator\nevaluator = FeatureEvaluator()\n```\n\nMatch the rules in the dataset:\n```python\n#match single feature\ndf = dataset.to_dataframe()\nevaluator.match_features(df, rule_to_match)\n```\n\n|    | Sentence                                                                                                                        | Predicted label           | Matched rule                                        |\n|---:|:--------------------------------------------------------------------------------------------------------------------------------|:--------------------------|:----------------------------------------------------|\n|  0 | Governments and industries in nations around the world are pouring XXX into YYY.                                                | Entity-Destination(e1,e2) | [['(u_1 / into)'], [], 'Entity-Destination(e1,e2)'] |\n|  1 | The scientists poured XXX into pint YYY.                                                                                        | Entity-Destination(e1,e2) | [['(u_1 / into)'], [], 'Entity-Destination(e1,e2)'] |\n|  2 | The suspect pushed the XXX into a deep YYY.                                                                                     | Entity-Destination(e1,e2) | [['(u_1 / into)'], [], 'Entity-Destination(e1,e2)'] |\n|  3 | The Nepalese government sets up a XXX to inquire into the alleged YYY of diplomatic passports.                                  | Entity-Destination(e1,e2) | [['(u_1 / into)'], [], 'Entity-Destination(e1,e2)'] |\n|  4 | The entity1 to buy papers is pushed into the next entity2.                                                                      | Entity-Destination(e1,e2) | [['(u_1 / into)'], [], 'Entity-Destination(e1,e2)'] |\n|  5 | An unnamed XXX was pushed into the YYY.                                                                                         | Entity-Destination(e1,e2) | [['(u_1 / into)'], [], 'Entity-Destination(e1,e2)'] |\n|  6 | Since then, numerous independent feature XXX have journeyed into YYY.                                                           | Entity-Destination(e1,e2) | [['(u_1 / into)'], [], 'Entity-Destination(e1,e2)'] |\n|  7 | For some reason, the XXX was blinded from his own YYY about the incommensurability of time.                                     |                           |                                                     |\n|  8 | Sparky Anderson is making progress in his XXX from YYY and could return to managing the Detroit Tigers within a week.           |                           |                                                     |\n|  9 | Olympics have already poured one XXX into the YYY.                                                                              | Entity-Destination(e1,e2) | [['(u_1 / into)'], [], 'Entity-Destination(e1,e2)'] |\n| 10 | After wrapping him in a light blanket, they placed the XXX in the YYY his father had carved for him.                            |                           |                                                     |\n| 11 | I placed the XXX in a natural YYY, at the base of a part of the fallen arch.                                                    |                           |                                                     |\n| 12 | The XXX was delivered from the YYY of Lincoln Memorial on August 28, 1963 as part of his famous March on Washington.            |                           |                                                     |\n| 13 | The XXX leaked from every conceivable YYY.                                                                                      |                           |                                                     |\n| 14 | The scientists placed the XXX in a tiny YYY which gets channelled into cancer cells, and is then unpacked with a laser impulse. | Entity-Destination(e1,e2) | [['(u_1 / into)'], [], 'Entity-Destination(e1,e2)'] |\n| 15 | The level surface closest to the MSS, known as the XXX, departs from an YYY by about 100 m in each direction.                   |                           |                                                     |\n| 16 | Gaza XXX recover from three YYY of war.                                                                                         |                           |                                                     |\n| 17 | This latest XXX from the animation YYY at Pixar is beautiful, masterly, inspired - and delivers a powerful ecological message.  |                           |                                                     |\n\n\n\nYou can see in the dataset that the rules only matched the instances where the \"into\" node was present.\n\nOne of the core features of our tool is that we are also able to match subgraphs. To describe a graph, we use the [PENMAN](https://github.com/goodmami/penman) notation. \n\nE.g. the string _(u_1 / into :1 (u_3 / pour))_ would describe a graph with two nodes (\"into\" and \"pour\") and a single directed edge with the label \"1\" between them.\n```python\n#match a simple graph feature\nevaluator.match_features(df, [[[\"(u_1 / into :1 (u_2 / pour) :2 (u_3 / YYY))\"], [], \"Entity-Destination(e1,e2)\"]])\n```\n\nDescribing a subgraph with the string \"(u_1 / into :1 (u_2 / pour) :2 (u_3 / YYY))\" will return only three examples instead of 9 (when we only had a single node as a feature)\n|    | Sentence                                                                                                                        | Predicted label           | Matched rule                                                                       |\n|---:|:--------------------------------------------------------------------------------------------------------------------------------|:--------------------------|:-----------------------------------------------------------------------------------|\n|  0 | Governments and industries in nations around the world are pouring XXX into YYY.                                                | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / pour) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n|  1 | The scientists poured XXX into pint YYY.                                                                                        | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / pour) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n|  2 | The suspect pushed the XXX into a deep YYY.                                                                                     |                           |                                                                                    |\n|  3 | The Nepalese government sets up a XXX to inquire into the alleged YYY of diplomatic passports.                                  |                           |                                                                                    |\n|  4 | The entity1 to buy papers is pushed into the next entity2.                                                                      |                           |                                                                                    |\n|  5 | An unnamed XXX was pushed into the YYY.                                                                                         |                           |                                                                                    |\n|  6 | Since then, numerous independent feature XXX have journeyed into YYY.                                                           |                           |                                                                                    |\n|  7 | For some reason, the XXX was blinded from his own YYY about the incommensurability of time.                                     |                           |                                                                                    |\n|  8 | Sparky Anderson is making progress in his XXX from YYY and could return to managing the Detroit Tigers within a week.           |                           |                                                                                    |\n|  9 | Olympics have already poured one XXX into the YYY.                                                                              | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / pour) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n| 10 | After wrapping him in a light blanket, they placed the XXX in the YYY his father had carved for him.                            |                           |                                                                                    |\n| 11 | I placed the XXX in a natural YYY, at the base of a part of the fallen arch.                                                    |                           |                                                                                    |\n| 12 | The XXX was delivered from the YYY of Lincoln Memorial on August 28, 1963 as part of his famous March on Washington.            |                           |                                                                                    |\n| 13 | The XXX leaked from every conceivable YYY.                                                                                      |                           |                                                                                    |\n| 14 | The scientists placed the XXX in a tiny YYY which gets channelled into cancer cells, and is then unpacked with a laser impulse. |                           |                                                                                    |\n| 15 | The level surface closest to the MSS, known as the XXX, departs from an YYY by about 100 m in each direction.                   |                           |                                                                                    |\n| 16 | Gaza XXX recover from three YYY of war.                                                                                         |                           |                                                                                    |\n| 17 | This latest XXX from the animation YYY at Pixar is beautiful, masterly, inspired - and delivers a powerful ecological message.  |                           |                                                                                    |\n\n\nWe can also add negated features that we don't want to match (e.g. this won't match the first row where 'pour' is present):\n```python\n#match a simple graph feature\nevaluator.match_features(df, [[[\"(u_1 / into :2 (u_3 / YYY))\"], [\"(u_2 / pour)\"], \"Entity-Destination(e1,e2)\"]])\n```\n\n|    | Sentence                                                                                                                        | Predicted label           | Matched rule                                                                     |\n|---:|:--------------------------------------------------------------------------------------------------------------------------------|:--------------------------|:---------------------------------------------------------------------------------|\n|  0 | Governments and industries in nations around the world are pouring XXX into YYY.                                                |                           |                                                                                  |\n|  1 | The scientists poured XXX into pint YYY.                                                                                        |                           |                                                                                  |\n|  2 | The suspect pushed the XXX into a deep YYY.                                                                                     | Entity-Destination(e1,e2) | [['(u_1 / into :2 (u_3 / YYY))'], ['(u_2 / pour)'], 'Entity-Destination(e1,e2)'] |\n|  3 | The Nepalese government sets up a XXX to inquire into the alleged YYY of diplomatic passports.                                  | Entity-Destination(e1,e2) | [['(u_1 / into :2 (u_3 / YYY))'], ['(u_2 / pour)'], 'Entity-Destination(e1,e2)'] |\n|  4 | The entity1 to buy papers is pushed into the next entity2.                                                                      |                           |                                                                                  |\n|  5 | An unnamed XXX was pushed into the YYY.                                                                                         | Entity-Destination(e1,e2) | [['(u_1 / into :2 (u_3 / YYY))'], ['(u_2 / pour)'], 'Entity-Destination(e1,e2)'] |\n|  6 | Since then, numerous independent feature XXX have journeyed into YYY.                                                           | Entity-Destination(e1,e2) | [['(u_1 / into :2 (u_3 / YYY))'], ['(u_2 / pour)'], 'Entity-Destination(e1,e2)'] |\n|  7 | For some reason, the XXX was blinded from his own YYY about the incommensurability of time.                                     |                           |                                                                                  |\n|  8 | Sparky Anderson is making progress in his XXX from YYY and could return to managing the Detroit Tigers within a week.           |                           |                                                                                  |\n|  9 | Olympics have already poured one XXX into the YYY.                                                                              |                           |                                                                                  |\n| 10 | After wrapping him in a light blanket, they placed the XXX in the YYY his father had carved for him.                            |                           |                                                                                  |\n| 11 | I placed the XXX in a natural YYY, at the base of a part of the fallen arch.                                                    |                           |                                                                                  |\n| 12 | The XXX was delivered from the YYY of Lincoln Memorial on August 28, 1963 as part of his famous March on Washington.            |                           |                                                                                  |\n| 13 | The XXX leaked from every conceivable YYY.                                                                                      |                           |                                                                                  |\n| 14 | The scientists placed the XXX in a tiny YYY which gets channelled into cancer cells, and is then unpacked with a laser impulse. |                           |                                                                                  |\n| 15 | The level surface closest to the MSS, known as the XXX, departs from an YYY by about 100 m in each direction.                   |                           |                                                                                  |\n| 16 | Gaza XXX recover from three YYY of war.                                                                                         |                           |                                                                                  |\n| 17 | This latest XXX from the animation YYY at Pixar is beautiful, masterly, inspired - and delivers a powerful ecological message.  |                           |                                                                                  |\n\nIf we don't want to specify nodes, regex can also be used in place of the node and edge-names:\n\n```python\n#regex can be used to match any node (this will match instances where 'into' is connected to any node with '1' edge)\nevaluator.match_features(df, [[[\"(u_1 / into :1 (u_2 / .*) :2 (u_3 / YYY))\"], [], \"Entity-Destination(e1,e2)\"]])\n```\n\n|    | Sentence                                                                                                                        | Predicted label           | Matched rule                                                                     |\n|---:|:--------------------------------------------------------------------------------------------------------------------------------|:--------------------------|:---------------------------------------------------------------------------------|\n|  0 | Governments and industries in nations around the world are pouring XXX into YYY.                                                | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / .*) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n|  1 | The scientists poured XXX into pint YYY.                                                                                        | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / .*) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n|  2 | The suspect pushed the XXX into a deep YYY.                                                                                     | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / .*) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n|  3 | The Nepalese government sets up a XXX to inquire into the alleged YYY of diplomatic passports.                                  | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / .*) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n|  4 | The entity1 to buy papers is pushed into the next entity2.                                                                      |                           |                                                                                  |\n|  5 | An unnamed XXX was pushed into the YYY.                                                                                         | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / .*) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n|  6 | Since then, numerous independent feature XXX have journeyed into YYY.                                                           | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / .*) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n|  7 | For some reason, the XXX was blinded from his own YYY about the incommensurability of time.                                     |                           |                                                                                  |\n|  8 | Sparky Anderson is making progress in his XXX from YYY and could return to managing the Detroit Tigers within a week.           |                           |                                                                                  |\n|  9 | Olympics have already poured one XXX into the YYY.                                                                              | Entity-Destination(e1,e2) | [['(u_1 / into :1 (u_2 / .*) :2 (u_3 / YYY))'], [], 'Entity-Destination(e1,e2)'] |\n| 10 | After wrapping him in a light blanket, they placed the XXX in the YYY his father had carved for him.                            |                           |                                                                                  |\n| 11 | I placed the XXX in a natural YYY, at the base of a part of the fallen arch.                                                    |                           |                                                                                  |\n| 12 | The XXX was delivered from the YYY of Lincoln Memorial on August 28, 1963 as part of his famous March on Washington.            |                           |                                                                                  |\n| 13 | The XXX leaked from every conceivable YYY.                                                                                      |                           |                                                                                  |\n| 14 | The scientists placed the XXX in a tiny YYY which gets channelled into cancer cells, and is then unpacked with a laser impulse. |                           |                                                                                  |\n| 15 | The level surface closest to the MSS, known as the XXX, departs from an YYY by about 100 m in each direction.                   |                           |                                                                                  |\n| 16 | Gaza XXX recover from three YYY of war.                                                                                         |                           |                                                                                  |\n| 17 | This latest XXX from the animation YYY at Pixar is beautiful, masterly, inspired - and delivers a powerful ecological message.  |                           |                                                                                  |\n\nWe can also train regex rules from a training data, this will automatically replace regex '.*' with nodes that are \n'good enough' statistically based on the provided dataframe.\n\n```python\nevaluator.train_feature(\"Entity-Destination(e1,e2)\", \"(u_1 / into :1 (u_2 / .*) :2 (u_3 / YYY))\", df)\n```\n\nThis returns '(u_1 / into :1 (u_2 / push|pour) :2 (u_3 / YYY))' (replaced '.*' with _push_ and _pour_)\n\n### Learning rules\n\nTo extract rules automatically, train the dataset with graph features and rank them based on relevancy:\n\n```python\ndf = dataset.to_dataframe()\ntrainer = GraphTrainer(df)\n#extract features\nfeatures = trainer.prepare_and_train()\n\nfrom xpotato.dataset.utils import save_dataframe\nfrom sklearn.model_selection import train_test_split\n\ntrain, val = train_test_split(df, test_size=0.2, random_state=1234)\n\n#save train and validation, this is important for the frontend to work\nsave_dataframe(train, 'train.tsv')\nsave_dataframe(val, 'val.tsv')\n\nimport json\n\n#also save the ranked features\nwith open(\"features.json\", \"w+\") as f:\n    json.dump(features, f)\n\n```\n\nYou can also save the parsed graphs for evaluation or for caching:\n\n```python\nimport pickle\nwith open(\"graphs.pickle\", \"wb\") as f:\n    pickle.dump(val.graph, f)\n```\n\n## Frontend\n\nIf the DataFrame is ready with the parsed graphs, the UI can be started to inspect the extracted rules and modify them. The frontend is a streamlit app, the simplest way of starting it is (the training and the validation dataset must be provided):\n\n```\nstreamlit run frontend/app.py -- -t notebooks/train.tsv -v notebooks/val.tsv -g ud\n```\n\nit can be also started with the extracted features:\n\n```\nstreamlit run frontend/app.py -- -t notebooks/train.tsv -v notebooks/val.tsv -g ud -sr notebooks/features.json\n```\n\nif you already used the UI and extracted the features manually and you want to load it, you can run:\n```\nstreamlit run frontend/app.py -- -t notebooks/train.tsv -v notebooks/val.tsv -g ud -sr notebooks/features.json -hr notebooks/manual_features.json\n```\n\n### Advanced mode\n\nIf labels are not or just partially provided, the frontend can be started also in _advanced_ mode, where the user can _annotate_ a few examples at the start, then the system gradually offers rules based on the provided examples. \n\n\nDataset without labels can be initialized with:\n```python\nsentences = [(\"Governments and industries in nations around the world are pouring XXX into YYY.\", \"\"),\n            (\"The scientists poured XXX into pint YYY.\", \"\"),\n            (\"The suspect pushed the XXX into a deep YYY.\", \"\"),\n            (\"The Nepalese government sets up a XXX to inquire into the alleged YYY of diplomatic passports.\", \"\"),\n            (\"The entity1 to buy papers is pushed into the next entity2.\", \"\"),\n            (\"An unnamed XXX was pushed into the YYY.\", \"\"),\n            (\"Since then, numerous independent feature XXX have journeyed into YYY.\", \"\"),\n            (\"For some reason, the XXX was blinded from his own YYY about the incommensurability of time.\", \"\"),\n            (\"Sparky Anderson is making progress in his XXX from YYY and could return to managing the Detroit Tigers within a week.\", \"\"),\n            (\"Olympics have already poured one XXX into the YYY.\", \"\"),\n            (\"After wrapping him in a light blanket, they placed the XXX in the YYY his father had carved for him.\", \"\"),\n            (\"I placed the XXX in a natural YYY, at the base of a part of the fallen arch.\", \"\"),\n            (\"The XXX was delivered from the YYY of Lincoln Memorial on August 28, 1963 as part of his famous March on Washington.\", \"\"),\n            (\"The XXX leaked from every conceivable YYY.\", \"\"),\n            (\"The scientists placed the XXX in a tiny YYY which gets channelled into cancer cells, and is then unpacked with a laser impulse.\", \"\"),\n            (\"The level surface closest to the MSS, known as the XXX, departs from an YYY by about 100 m in each direction.\", \"\"),\n            (\"Gaza XXX recover from three YYY of war.\", \"\"),\n            (\"This latest XXX from the animation YYY at Pixar is beautiful, masterly, inspired - and delivers a powerful ecological message.\", \"\")]\n```\n\n\nThen, the frontend can be started:\n```\nstreamlit run frontend/app.py -- -t notebooks/unsupervised_dataset.tsv -g ud -m advanced\n```\n\nOnce the frontend starts up and you define the labels, you are faced with the annotation interface. You can search elements by clicking on the appropriate column name and applying the desired filter. You can annotate instances by checking the checkbox at the beginning of the line. You can check multiple checkboxs at a time. Once you've selected the utterances you want to annotate, click on the _Annotate_ button. The annotated samples will appear in the lower table. You can clear the annotation of certain elements by selecting them in the second table and clicking _Clear annotation_.\n\nOnce you have some annotated data, you can train rules by clicking the _Train!_ button. It is recommended to set the _Rank features based on accuracy_ to True, if you have just a few samples. You will get a similar interface as in supervised mode, you can generate rule suggestions, and write your own rules as usual. Once you are satisfied with the rules, select each of them and click _annotate based on selected_. This process might take a while if you are working with large data. You should get all the rule matches marked in the first and the second tables. You can order the tables by each column, so it's easier to check. You will have to manually accept the annotations generated this way for them to appear in the second table.\n\n- You can read about the use of the advanced mode in the [docs](https://github.com/adaamko/POTATO/tree/main/docs/README_advanced_mode.md)\n\n\n## Evaluate\nIf you have the features ready and you want to evaluate them on a test set, you can run:\n\n```python\npython scripts/evaluate.py -t ud -f notebooks/features.json -d notebooks/val.tsv\n```\n\nThe result will be a _csv_ file with the labels and the matched rules.\n\n## Service\nIf you are ready with the extracted features and want to use our package in production for inference (generating predictions for sentences), we also provide a REST API built on POTATO (based on [fastapi](https://github.com/tiangolo/fastapi)).\n\nFirst install FastAPI and [Uvicorn](https://www.uvicorn.org/)\n```bash\npip install fastapi\npip install \"uvicorn[standard]\"\n```\n\nTo start the service, you should set _language_, _graph\\_type_ and the _features_  for the service. This can be done through enviroment variables.\n\nExample:\n```bash\nexport FEATURE_PATH=/home/adaamko/projects/POTATO/features/semeval/test_features.json\nexport GRAPH_FORMAT=ud\nexport LANG=en\n```\n\nThen, start the REST API:\n```python\npython services/main.py\n```\n\nIt will start a service running on _localhost_ on port _8000_ (it will also initialize the correct models).\n\nThen you can use any client to make post requests:\n```bash\ncurl -X POST localhost:8000 -H 'Content-Type: application/json' -d '{\"text\":\"The suspect pushed the XXX into a deep YYY.\\nSparky Anderson is making progress in his XXX from YYY and could return to managing the Detroit Tigers within a week.\"}'\n```\n\nThe answer will be a list with the predicted labels (if none of the rules match, it will return \"NONE\"):\n```bash\n[\"Entity-Destination(e1,e2)\",\"NONE\"]\n```\n\nThe streamlit frontend also has an inference mode, where the implemented rule-system can be used for inference. It can be started with:\n\n```bash\nstreamlit run frontend/app.py -- -hr features/semeval/test_features.json -m inference\n```\n\n## Contributing\n\nWe welcome all contributions! Please fork this repository and create a branch for your modifications. We suggest getting in touch with us first, by opening an issue or by writing an email to Adam Kovacs or Gabor Recski at firstname.lastname@tuwien.ac.at\n\n## Citing\n\nIf you use the library, please cite our [paper](https://arxiv.org/abs/2201.13230)\n\n```bib\n@article{Kovacs:2022,\n  title={{POTATO: exPlainable infOrmation exTrAcTion framewOrk}},\n  author={Kov{\\'a}cs, {\\'A}d{\\'a}m and G{\\'e}mes, Kinga and Ikl{\\'o}di, Eszter and Recski, G{\\'a}bor},\n  journal={arXiv preprint arXiv:2201.13230},\n  year={2022}\n}\n```\n\n## License \n\nMIT license\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adaamko/POTATO",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xpotato",
    "package_url": "https://pypi.org/project/xpotato/",
    "platform": null,
    "project_url": "https://pypi.org/project/xpotato/",
    "project_urls": {
      "Homepage": "https://github.com/adaamko/POTATO"
    },
    "release_url": "https://pypi.org/project/xpotato/0.1.4/",
    "requires_dist": [
      "pandas (>=1.3.5)",
      "tqdm",
      "stanza (==1.3.0)",
      "scikit-learn (==1.0.2)",
      "eli5 (==0.11.0)",
      "jinja2 (==3.0.1)",
      "graphviz (==0.18.2)",
      "penman (>=1.2.1)",
      "networkx (==2.6.3)",
      "rank-bm25 (==0.2.1)",
      "streamlit (==1.3.1)",
      "streamlit-aggrid (==0.2.3.post2)",
      "scikit-criteria (==0.5)",
      "tuw-nlp (==0.0.9)",
      "amrlib (==0.6.0)",
      "protobuf (==3.20.0)",
      "pytest (>=7.1.3)",
      "fastapi",
      "uvicorn[standard]"
    ],
    "requires_python": "",
    "summary": "XAI human-in-the-loop information extraction framework",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15290320,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5bededa47d30faeec12404d2459e21a81e8bc7a6a76bcb5ae72d4567ac365a6",
          "md5": "cf32220b643eba878e64c114a38d56c1",
          "sha256": "83c5d2196310310d7d01df0cab2eb9a96ec753d3f79c0ddf974c5768e240e441"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf32220b643eba878e64c114a38d56c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17423,
        "upload_time": "2021-11-29T11:53:04",
        "upload_time_iso_8601": "2021-11-29T11:53:04.328941Z",
        "url": "https://files.pythonhosted.org/packages/c5/be/deda47d30faeec12404d2459e21a81e8bc7a6a76bcb5ae72d4567ac365a6/xpotato-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87a232fb4c20121f834a5861513e79c7c4d3777c320141771dcb633115af3f27",
          "md5": "d7f3b5cb7260efe396c459bdda97dd4e",
          "sha256": "493d8549a46de3a8fa8d58462d2f1e5c6eefcf3d0cabdac1102dd88357a3ddb3"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d7f3b5cb7260efe396c459bdda97dd4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1538108,
        "upload_time": "2021-11-29T11:53:07",
        "upload_time_iso_8601": "2021-11-29T11:53:07.045107Z",
        "url": "https://files.pythonhosted.org/packages/87/a2/32fb4c20121f834a5861513e79c7c4d3777c320141771dcb633115af3f27/xpotato-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e71b3f793164041473ae43ddd376f7d83dd1ed7b2377eedd87de7ed84765c73",
          "md5": "9809cfd002c36538b3710b1edec8d771",
          "sha256": "e0eee8232934d3f51616525d8d8f736acf279028d593bccf92029451a7ae96ad"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9809cfd002c36538b3710b1edec8d771",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18500,
        "upload_time": "2021-12-03T12:15:43",
        "upload_time_iso_8601": "2021-12-03T12:15:43.676158Z",
        "url": "https://files.pythonhosted.org/packages/7e/71/b3f793164041473ae43ddd376f7d83dd1ed7b2377eedd87de7ed84765c73/xpotato-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fa91bb168494023ad955dcb34faa7b6c58a54ec52d8049785368cb0eae01008",
          "md5": "5d883bbe3769662fe8e62ebb4271e50b",
          "sha256": "e303ff882c99bf5da4e6f174b26ae75b0be1d38decb24951a9b24def11bf24cb"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5d883bbe3769662fe8e62ebb4271e50b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1552064,
        "upload_time": "2021-12-03T12:20:41",
        "upload_time_iso_8601": "2021-12-03T12:20:41.570348Z",
        "url": "https://files.pythonhosted.org/packages/1f/a9/1bb168494023ad955dcb34faa7b6c58a54ec52d8049785368cb0eae01008/xpotato-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d1110aa1c5d67f411e1a868f8d953a6e1386e9b6ea4e5afe5404f5df971d7ac",
          "md5": "ad1832a1920b63c49ec1ff9cb83898ef",
          "sha256": "76b07d1bd1b06313bfa48d1c7410940318a7b46f0ccf331349f4ec834d365398"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad1832a1920b63c49ec1ff9cb83898ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30637,
        "upload_time": "2021-12-17T11:43:33",
        "upload_time_iso_8601": "2021-12-17T11:43:33.643608Z",
        "url": "https://files.pythonhosted.org/packages/2d/11/10aa1c5d67f411e1a868f8d953a6e1386e9b6ea4e5afe5404f5df971d7ac/xpotato-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69bd862689c551a52641fc58e6f189ebf3312a20d4a2258c6fa4c9872255cedb",
          "md5": "8d7aca37eaad2ca1db217278905d7217",
          "sha256": "f8cf2ed12677e6de9da2087cf9f9efd1e0b5fef9ac47a53646dc767dc596ac63"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8d7aca37eaad2ca1db217278905d7217",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1572185,
        "upload_time": "2021-12-17T11:43:35",
        "upload_time_iso_8601": "2021-12-17T11:43:35.994564Z",
        "url": "https://files.pythonhosted.org/packages/69/bd/862689c551a52641fc58e6f189ebf3312a20d4a2258c6fa4c9872255cedb/xpotato-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d9c54aa9b13a50f577392dd70a0c74aeca6eb2b1b2a4fcfdb8c973b40f9ed03",
          "md5": "df109ff7e51af182149cb652bbc6ecf5",
          "sha256": "05eb2e236fe0cc5b7d0c652a082254eabcdf65b3c2e9988cc2c1a24a54c0ad57"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df109ff7e51af182149cb652bbc6ecf5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33344,
        "upload_time": "2022-01-11T14:11:36",
        "upload_time_iso_8601": "2022-01-11T14:11:36.739134Z",
        "url": "https://files.pythonhosted.org/packages/8d/9c/54aa9b13a50f577392dd70a0c74aeca6eb2b1b2a4fcfdb8c973b40f9ed03/xpotato-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "464c3fcf986b840ffd4c86be61f784fa4c07a416780f799c0a8119bab5174373",
          "md5": "07adbde8d6ce231d774d1b3cfee962d0",
          "sha256": "e37229cb445aa97066d60573d0154663f472f878600503f6e7bb543496fa9d84"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "07adbde8d6ce231d774d1b3cfee962d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54396,
        "upload_time": "2022-01-11T14:11:38",
        "upload_time_iso_8601": "2022-01-11T14:11:38.951133Z",
        "url": "https://files.pythonhosted.org/packages/46/4c/3fcf986b840ffd4c86be61f784fa4c07a416780f799c0a8119bab5174373/xpotato-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b013a75bfbee6d55b06f58e56c968101c8ec0fec27130358c539cb0776e650e",
          "md5": "65de8a277ba1075d15fe04754bcf5b4d",
          "sha256": "eea7afa4d32896ee558258d2e1721062cbb66bc7aad33c406e9bab3eeb464af4"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65de8a277ba1075d15fe04754bcf5b4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33467,
        "upload_time": "2022-01-18T11:35:57",
        "upload_time_iso_8601": "2022-01-18T11:35:57.606852Z",
        "url": "https://files.pythonhosted.org/packages/3b/01/3a75bfbee6d55b06f58e56c968101c8ec0fec27130358c539cb0776e650e/xpotato-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "916aa352da572fada0c26a1264651ff761b884585e5726b91bb3cc657f0617c8",
          "md5": "891b9513659a109690923cf05d9bd8a1",
          "sha256": "a9ff5a1b992278a22667b9456d163dd6e4a5d5d8be0f024222b38c14841cd082"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "891b9513659a109690923cf05d9bd8a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54580,
        "upload_time": "2022-01-18T11:35:59",
        "upload_time_iso_8601": "2022-01-18T11:35:59.599249Z",
        "url": "https://files.pythonhosted.org/packages/91/6a/a352da572fada0c26a1264651ff761b884585e5726b91bb3cc657f0617c8/xpotato-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4fe2ce5f82f6eeb5eadedbbed68e2edd8506fb8eb1062f91570ac95adfec1e2",
          "md5": "af64312111f9b65a90059f55fa1a5fb1",
          "sha256": "3d693e884b296d62f9cd747304974dac7f179b40677843a92df115f557ac6310"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af64312111f9b65a90059f55fa1a5fb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33466,
        "upload_time": "2022-01-18T11:58:52",
        "upload_time_iso_8601": "2022-01-18T11:58:52.274089Z",
        "url": "https://files.pythonhosted.org/packages/b4/fe/2ce5f82f6eeb5eadedbbed68e2edd8506fb8eb1062f91570ac95adfec1e2/xpotato-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d76315161d9e5d177f740bf42f1d55b1febdfa856fe54068519ba025f213de3c",
          "md5": "73b2b6e60aa19b84a3c222c902b16def",
          "sha256": "e57869cfac144885e55a83e4f037fc7f5576c0f4209eeb21109ba082503f5c3f"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "73b2b6e60aa19b84a3c222c902b16def",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54566,
        "upload_time": "2022-01-18T11:58:54",
        "upload_time_iso_8601": "2022-01-18T11:58:54.033715Z",
        "url": "https://files.pythonhosted.org/packages/d7/63/15161d9e5d177f740bf42f1d55b1febdfa856fe54068519ba025f213de3c/xpotato-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a93dc5d1c98f4ff397d4ac27dc7275d7b5cef5cf3f7885450eac303639aab7e9",
          "md5": "3d471aa31d8a2c09db54fb1ae2ae06c5",
          "sha256": "f1162851912d945269742be9922aa2cce8bc11756eceacb2ce8df858167998a8"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d471aa31d8a2c09db54fb1ae2ae06c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33596,
        "upload_time": "2022-01-25T10:32:58",
        "upload_time_iso_8601": "2022-01-25T10:32:58.159575Z",
        "url": "https://files.pythonhosted.org/packages/a9/3d/c5d1c98f4ff397d4ac27dc7275d7b5cef5cf3f7885450eac303639aab7e9/xpotato-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc5be2f11e0ae58d44e833d778e0f809bd8d23526b7dcc276c0034a26288b888",
          "md5": "5bfb5fbb658702e2bd3bd801bf4271a5",
          "sha256": "1693f0a2d71c4db43815d122f18168aea838c06deccf1a3310ad3aac8edb3713"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "5bfb5fbb658702e2bd3bd801bf4271a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55002,
        "upload_time": "2022-01-25T10:33:01",
        "upload_time_iso_8601": "2022-01-25T10:33:01.639491Z",
        "url": "https://files.pythonhosted.org/packages/bc/5b/e2f11e0ae58d44e833d778e0f809bd8d23526b7dcc276c0034a26288b888/xpotato-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acff6d97ba255ed79986ba6586903cb9bd58d50472939144a2e648434d023d16",
          "md5": "2337944b6abc53284243f7ddd965fd6e",
          "sha256": "edd445c8ac069bc961ff3e4b46a7a875e91101003bbc34956d19013bdcb0888e"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2337944b6abc53284243f7ddd965fd6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33589,
        "upload_time": "2022-01-25T10:37:12",
        "upload_time_iso_8601": "2022-01-25T10:37:12.911203Z",
        "url": "https://files.pythonhosted.org/packages/ac/ff/6d97ba255ed79986ba6586903cb9bd58d50472939144a2e648434d023d16/xpotato-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb87b5b9f964ce44344299b40705ff38c97a42ee27a88d8a330c03f620b62db0",
          "md5": "081ac47b5465b4c2c51b43e72aea2b7c",
          "sha256": "63aa49297fdb75cef7aadb0fcbf1ce7558172b9ca96a3a2f1f99af6be4028847"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "081ac47b5465b4c2c51b43e72aea2b7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54997,
        "upload_time": "2022-01-25T10:37:14",
        "upload_time_iso_8601": "2022-01-25T10:37:14.560869Z",
        "url": "https://files.pythonhosted.org/packages/cb/87/b5b9f964ce44344299b40705ff38c97a42ee27a88d8a330c03f620b62db0/xpotato-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27f258f34eeb72cd12660bcd30479f7a4d7f6cb07c1713a5d7fcd33067a41582",
          "md5": "6e445678320e5c09e438fcea4654084c",
          "sha256": "288d45d3112e75ca4e7a0f97894a44ecb34e9d0444c9c3239ccacb8e66a68748"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e445678320e5c09e438fcea4654084c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33750,
        "upload_time": "2022-01-31T13:47:27",
        "upload_time_iso_8601": "2022-01-31T13:47:27.894713Z",
        "url": "https://files.pythonhosted.org/packages/27/f2/58f34eeb72cd12660bcd30479f7a4d7f6cb07c1713a5d7fcd33067a41582/xpotato-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8506ecbfe117992cdc8badd3f21190c8add8d24a1d05a9b6ff1db7d060da52dc",
          "md5": "79ac4b902daa3741ab5d921c67342db7",
          "sha256": "24aab00ae5e53d39d41fd0bdf08e65b3a1c8195d634663eb8ee4bada3bc8b0bf"
        },
        "downloads": -1,
        "filename": "xpotato-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "79ac4b902daa3741ab5d921c67342db7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1577791,
        "upload_time": "2022-01-31T13:47:30",
        "upload_time_iso_8601": "2022-01-31T13:47:30.312779Z",
        "url": "https://files.pythonhosted.org/packages/85/06/ecbfe117992cdc8badd3f21190c8add8d24a1d05a9b6ff1db7d060da52dc/xpotato-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bf8e05f2bb66f42fa724e59065ad042eedebe56ed3f194517d1c52646b0f122",
          "md5": "0ba7d630954f1700ef0ea88d2038db74",
          "sha256": "606eee2533906f75f9fc5d8bd13cfbfb642f05222bd599f0708012ebd4e2a6e6"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ba7d630954f1700ef0ea88d2038db74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37025,
        "upload_time": "2022-03-09T10:47:09",
        "upload_time_iso_8601": "2022-03-09T10:47:09.790338Z",
        "url": "https://files.pythonhosted.org/packages/5b/f8/e05f2bb66f42fa724e59065ad042eedebe56ed3f194517d1c52646b0f122/xpotato-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdb139e3b6b5f3078490d0c65c9671ed4749938505c288f34420969ea5f43f09",
          "md5": "6d225c7bd70eb006e0305e28740516dc",
          "sha256": "c70ccfe1f3d95f7118cfec26ccc1a7ed6ae7916163f436b2ee5cdc928b247ab8"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d225c7bd70eb006e0305e28740516dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1590013,
        "upload_time": "2022-03-09T10:47:12",
        "upload_time_iso_8601": "2022-03-09T10:47:12.338297Z",
        "url": "https://files.pythonhosted.org/packages/cd/b1/39e3b6b5f3078490d0c65c9671ed4749938505c288f34420969ea5f43f09/xpotato-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9e125f51713950403d8172e5b962286832ee7a25761af864b9b966ae77116c5",
          "md5": "03fda1729e8b5802dc2deb2276418833",
          "sha256": "6ac4e4a0134e2a49b02f299a137a504b2f15043642a4b37fb395bd99855d3838"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.1-py3.9.egg",
        "has_sig": false,
        "md5_digest": "03fda1729e8b5802dc2deb2276418833",
        "packagetype": "bdist_egg",
        "python_version": "0.1.1",
        "requires_python": null,
        "size": 83663,
        "upload_time": "2022-04-12T08:44:41",
        "upload_time_iso_8601": "2022-04-12T08:44:41.515088Z",
        "url": "https://files.pythonhosted.org/packages/d9/e1/25f51713950403d8172e5b962286832ee7a25761af864b9b966ae77116c5/xpotato-0.1.1-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b5a55d7543bff4cddddab49dbff759d7c5f013df53f2fcb93885820e75ed5a5",
          "md5": "255f897241b946a6fe38f850d58a7e92",
          "sha256": "4b1a6e3d1c64336204349c2c8a1ee29a50739f7a68fedf86398fc16b7a6fd9a6"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "255f897241b946a6fe38f850d58a7e92",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37468,
        "upload_time": "2022-04-12T08:44:39",
        "upload_time_iso_8601": "2022-04-12T08:44:39.493161Z",
        "url": "https://files.pythonhosted.org/packages/7b/5a/55d7543bff4cddddab49dbff759d7c5f013df53f2fcb93885820e75ed5a5/xpotato-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4135829902a25489ae0e86d164423c4582e1abaf39938e5c20033f924c5b7f2e",
          "md5": "f3b1cddadc532f3436d019b85a220c0b",
          "sha256": "10e9e023d8e9a2ee7788ae34627f25e6e4ca5f11191233ebf03d99f1cf50c05d"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f3b1cddadc532f3436d019b85a220c0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1591081,
        "upload_time": "2022-04-12T08:44:44",
        "upload_time_iso_8601": "2022-04-12T08:44:44.442066Z",
        "url": "https://files.pythonhosted.org/packages/41/35/829902a25489ae0e86d164423c4582e1abaf39938e5c20033f924c5b7f2e/xpotato-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c65d88db3f72eddcf6648496294ef2fe5aa2a67661d1a49de8d1c5168c883a4",
          "md5": "74f9d144af701f758f5bdb8e3e1be7ab",
          "sha256": "3de9d62138f43fa01a22f91a1ca42caa7cb21b498bdfa3f59f3e1d3ed986678a"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.2.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "74f9d144af701f758f5bdb8e3e1be7ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 74150,
        "upload_time": "2022-04-20T07:22:57",
        "upload_time_iso_8601": "2022-04-20T07:22:57.916893Z",
        "url": "https://files.pythonhosted.org/packages/2c/65/d88db3f72eddcf6648496294ef2fe5aa2a67661d1a49de8d1c5168c883a4/xpotato-0.1.2.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e734e745ec3e0f5585afc87fd7c7175443dd8c34267f2090ce2abc5d69a711f9",
          "md5": "16d838b26519dc7a081c482b8f7ffe6b",
          "sha256": "7c8075d9c3e8ad110742c2b0fd9d6aa252529a2a44bd2bc422a34f049500da6b"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16d838b26519dc7a081c482b8f7ffe6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39070,
        "upload_time": "2022-04-20T07:22:55",
        "upload_time_iso_8601": "2022-04-20T07:22:55.810542Z",
        "url": "https://files.pythonhosted.org/packages/e7/34/e745ec3e0f5585afc87fd7c7175443dd8c34267f2090ce2abc5d69a711f9/xpotato-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1af14b7bc5021910bce9b151c9d948f70e6766bba5078fc169b06a1a35a23c01",
          "md5": "8262c92f57adb0275dd283623ff61f43",
          "sha256": "857ef3b65673cd41d8bfcbf309bceb32c6b3a52a73221089fab2a1357f78e97e"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8262c92f57adb0275dd283623ff61f43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40348,
        "upload_time": "2022-06-30T08:44:14",
        "upload_time_iso_8601": "2022-06-30T08:44:14.816509Z",
        "url": "https://files.pythonhosted.org/packages/1a/f1/4b7bc5021910bce9b151c9d948f70e6766bba5078fc169b06a1a35a23c01/xpotato-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d838a8706ff233c8828e38a20a066eb8dca628193a3925546d22b7501be2c23",
          "md5": "bcb420d489a4287bff90ee3a88e2362b",
          "sha256": "18742f3028d9365eba28155d61e68dca048913e2f88cca16e5acf2a7ec0c74e7"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bcb420d489a4287bff90ee3a88e2362b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 82413,
        "upload_time": "2022-06-30T08:44:18",
        "upload_time_iso_8601": "2022-06-30T08:44:18.006657Z",
        "url": "https://files.pythonhosted.org/packages/1d/83/8a8706ff233c8828e38a20a066eb8dca628193a3925546d22b7501be2c23/xpotato-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f66a91597b387f543ebe28ac8d566248c3ea90be1ed848ff28794c9ddeac391d",
          "md5": "943305ff6534082c7a4cffe4915046dd",
          "sha256": "a3e511c526d10ceaa56f5d5e6d5ec39c522fbc26ac056f235fe68fe54a0a763f"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "943305ff6534082c7a4cffe4915046dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40444,
        "upload_time": "2022-10-03T14:24:21",
        "upload_time_iso_8601": "2022-10-03T14:24:21.604134Z",
        "url": "https://files.pythonhosted.org/packages/f6/6a/91597b387f543ebe28ac8d566248c3ea90be1ed848ff28794c9ddeac391d/xpotato-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fe62e89504fa3ee3b835a557cb6d07665fefd9414ca4f093f40aed9f6f7f6eb",
          "md5": "46725b94de14793a26c2e62acb1d8f5b",
          "sha256": "f5009985c495d78a681f445f809c900b8be14785f12b707a9232efe0f858d4e4"
        },
        "downloads": -1,
        "filename": "xpotato-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "46725b94de14793a26c2e62acb1d8f5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1605031,
        "upload_time": "2022-10-03T14:24:25",
        "upload_time_iso_8601": "2022-10-03T14:24:25.351159Z",
        "url": "https://files.pythonhosted.org/packages/7f/e6/2e89504fa3ee3b835a557cb6d07665fefd9414ca4f093f40aed9f6f7f6eb/xpotato-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f66a91597b387f543ebe28ac8d566248c3ea90be1ed848ff28794c9ddeac391d",
        "md5": "943305ff6534082c7a4cffe4915046dd",
        "sha256": "a3e511c526d10ceaa56f5d5e6d5ec39c522fbc26ac056f235fe68fe54a0a763f"
      },
      "downloads": -1,
      "filename": "xpotato-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "943305ff6534082c7a4cffe4915046dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 40444,
      "upload_time": "2022-10-03T14:24:21",
      "upload_time_iso_8601": "2022-10-03T14:24:21.604134Z",
      "url": "https://files.pythonhosted.org/packages/f6/6a/91597b387f543ebe28ac8d566248c3ea90be1ed848ff28794c9ddeac391d/xpotato-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fe62e89504fa3ee3b835a557cb6d07665fefd9414ca4f093f40aed9f6f7f6eb",
        "md5": "46725b94de14793a26c2e62acb1d8f5b",
        "sha256": "f5009985c495d78a681f445f809c900b8be14785f12b707a9232efe0f858d4e4"
      },
      "downloads": -1,
      "filename": "xpotato-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "46725b94de14793a26c2e62acb1d8f5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1605031,
      "upload_time": "2022-10-03T14:24:25",
      "upload_time_iso_8601": "2022-10-03T14:24:25.351159Z",
      "url": "https://files.pythonhosted.org/packages/7f/e6/2e89504fa3ee3b835a557cb6d07665fefd9414ca4f093f40aed9f6f7f6eb/xpotato-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}