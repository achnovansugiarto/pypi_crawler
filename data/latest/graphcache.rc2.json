{
  "info": {
    "author": "wilspi",
    "author_email": "the.wilspi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# graphcache\n\nPython Library to store connected nodes and their properties on cache storage (redis)\n\n\nInstallation\n------------\n\nTo install `graphcache`, simply:   \n```sh\npip install graphcache\n```\n\n\n\nDevelopment\n-----------\n\n* Install [`pyenv`](https://github.com/pyenv/pyenv#installation) and [`pyenv-virtualenv`](https://github.com/pyenv/pyenv-virtualenv#installation)\n* Run\n  ```\n  pyenv install 3.7.0 --skip-existing\n  pyenv virtualenv 3.7.0 graphcache\n  ```\n* Update requirements\n  ```\n  pip install -r requirements.txt\n  ```\n* Install [`Redis`](https://gist.github.com/tomysmile/1b8a321e7c58499ef9f9441b2faa0aa8)\n\n\nBasic Use\n---------\n\nEnsure you have `redis` service running    \nOn macos\n```sh\nredis-server /usr/local/etc/redis.conf\n```\n\n\nTo use graphcache, you must first create an instance of GraphCache,\nand construct your nodes and edges:    \n\n```python\n# Import GraphCache\nfrom graphcache import GraphCache\n\n# default \n# host = localhost\n# port = 6379\n# db = 0\ng = GraphCache(host='localhost', port=6379, db=0)\n\n# Add optimisation keys\ng.optimise_for('bananas')\ng.optimise_for('apples')\n\n# Create Nodes (need 'apples', 'bananas' keys in all nodes, as they have been added to optimisation_keys)\nn1 = g.add_vertex({\n    'name': 'Tom',\n    'age': 24,\n    'bananas': 5,\n    'apples': 4\n})\nn2 = g.add_vertex({\n    'name': 'Bob',\n    'bananas': 0,\n    'apples': 8\n})\nn3 = g.add_vertex({\n    'name': 'Harry',\n    'gender': 'Male',\n    'bananas': 3,\n    'apples': 1\n})\nn4 = g.add_vertex({\n    'name': 'Jill',\n    'bananas': 8,\n    'apples': 1\n})\n\n# Connect them\ng.add_edge(g.entry, n2) # g.entry specifies the entry point for graph\ng.add_edge(g.entry, n3)\ng.add_edge(n2, n3)\ng.add_edge(n3, n4)\ng.add_edge(n2, n1)\n```\n\n![graphcache](http://i.imgur.com/mbWiYet.png)\n\n\nThen you can perform filter/sort operations on any of the node to get the required adjacent nodes from that node:\n\n```python\n# Filter By\n# Get all outgoing nodes (only adjacent) from n2 which have only 1 apples\nnodes1 = n2.get_outgoing().filter_by('apples', [1]).get_all_nodes()\n\n# Sort By\n# Get all incoming nodes (only adjacent) to n3 sorted by number of bananas they have\nnodes2 = n3.get_incoming().sort_by('bananas').get_all_nodes()\n\n# Get first incoming node to n1 sorted by bananas\nnode1 = n1.get_incoming().sort_by('bananas').get_node_indexed_at(0)\n```\n\n\nAlso you can perform chained complex operations:\n\n```python\n# Filter By, Sort By\n# Get all outgoing nodes (only adjacent) from n2 with apples less than 5 and sorted by bananas\nnodes1 = n2.get_outgoing().filter_by('apples', 5, \"lt\").sort_by('bananas').get_all_nodes()\n\n# Sort By, Filter By, Filter By\nnodes2 = n3.get_incoming().sort_by('bananas').filter_by('bananas', [1, 5], \"in\").filter_by('apples', [1]).get_all_nodes()\n```\n\n\nGet the key for the graphcache object\n```python\ng.cache_key\n# graphcache-MZ5SQR\n```\n\n\nRetrieve previously stored graphcache object from redis cache (cache_key = `graphcache-MZ5SQR`)\n```python\n# using default redis connection\n# host = localhost\n# port = 6379\n# db = 0\ng1 = GraphCache(graphcache_ref='graphcache-MZ5SQR')\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/wilspi/graphcache",
    "keywords": "graphcache graph cache python node redis",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphcache",
    "package_url": "https://pypi.org/project/graphcache/",
    "platform": "",
    "project_url": "https://pypi.org/project/graphcache/",
    "project_urls": {
      "Homepage": "http://github.com/wilspi/graphcache"
    },
    "release_url": "https://pypi.org/project/graphcache/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python library to store connected nodes and their properties on cache storage",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6970672,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f883da966a5a69e36580706a1099eed40f113fe3323d713418606bd38b45c71",
          "md5": "85acfcb8147d245296a7ef212f28bb02",
          "sha256": "a8db5651212db4902976e1476c3a2ed843851ee888e7a78c7de10e57a6a30918"
        },
        "downloads": -1,
        "filename": "graphcache-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "85acfcb8147d245296a7ef212f28bb02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7651,
        "upload_time": "2020-04-07T14:03:16",
        "upload_time_iso_8601": "2020-04-07T14:03:16.771404Z",
        "url": "https://files.pythonhosted.org/packages/3f/88/3da966a5a69e36580706a1099eed40f113fe3323d713418606bd38b45c71/graphcache-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b11c4ecdd69850165b353b2cff1153cbfc365450ddfa8b921892bd9d268b843",
          "md5": "29af15759c1e1a12f0d44c292ff75086",
          "sha256": "68eaacbf0a3813d5205e261ebd798a8cf263c3f87768131b0195d43b65fe8a23"
        },
        "downloads": -1,
        "filename": "graphcache-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "29af15759c1e1a12f0d44c292ff75086",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9221,
        "upload_time": "2020-04-07T15:08:49",
        "upload_time_iso_8601": "2020-04-07T15:08:49.459924Z",
        "url": "https://files.pythonhosted.org/packages/2b/11/c4ecdd69850165b353b2cff1153cbfc365450ddfa8b921892bd9d268b843/graphcache-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b11c4ecdd69850165b353b2cff1153cbfc365450ddfa8b921892bd9d268b843",
        "md5": "29af15759c1e1a12f0d44c292ff75086",
        "sha256": "68eaacbf0a3813d5205e261ebd798a8cf263c3f87768131b0195d43b65fe8a23"
      },
      "downloads": -1,
      "filename": "graphcache-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "29af15759c1e1a12f0d44c292ff75086",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9221,
      "upload_time": "2020-04-07T15:08:49",
      "upload_time_iso_8601": "2020-04-07T15:08:49.459924Z",
      "url": "https://files.pythonhosted.org/packages/2b/11/c4ecdd69850165b353b2cff1153cbfc365450ddfa8b921892bd9d268b843/graphcache-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}