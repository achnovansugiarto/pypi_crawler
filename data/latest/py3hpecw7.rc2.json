{
  "info": {
    "author": "HPE",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "This project is a fork of [HPENetworking/pyhpecw7][]. The most notable\nchange is the compatibility with Python 3. The original project is\nunfortunately inactive. As soon as the situation changes, the changes\nincluded in this fork will be proposed upstream and, hopefully, this\nfork will be terminated.\n\n![Build status](https://img.shields.io/github/workflow/status/vincentbernat/pyhpecw7/Tests)\n[![PyPI](https://img.shields.io/pypi/v/py3hpecw7.svg)](https://pypi.python.org/pypi/py3hpecw7)\n![PyPI versions](https://img.shields.io/pypi/pyversions/py3hpecw7.svg)\n[![Documentation](https://img.shields.io/readthedocs/py3hpecw7)](http://py3hpecw7.readthedocs.io/)\n\n[HPENetworking/pyhpecw7]: https://github.com/HPENetworking/pyhpecw7\n\n# Introduction\n\nThis library was built to simplify working with HP Comware 7 switches\nthat have a NETCONF API. Rather than to have network developers worry\nabout the underlying NETCONF API, this library provides a means to\nmanage HP Com7 switches through pre-built Python objects that make it\nextremely easy to get started programming in an HP environment.\n\nBefore getting started, it's important to understand the high level\nworkflow required when using this library, which again, is meant to be\nfairly straight forward and simple.\n\n### Step 1 - Create HPCOM7 object for each HP switch being managed\n\n```\n>>> from pyhpecw7.comware import HPCOM7\n>>> args = dict(host='hp1', username='hp', password='hp123')\n>>> device = HPCOM7(**args)\n```\n\n### Step 2 - Open a Connection to the Device\n\n```\n>>> device.open()\n<ncclient.manager.Manager object at 0x7fa5088f98d0>\n```\n\n### Step 3a - Get Config Data\n\nNearly all features supported such as `Vlan`, which is used in an\nexample below, have a `get_config()` method.\n\nThe object is imported, it is instantiated, and the `get_config()` can\nbe called. This method usually returns a Python dictionary with\nseveral key value pairs if the configuration resource exists and if it\ndoesn't it's an empty dictionary.\n\nExamples are below.\n\n### Step 3b - Configure the Device\n\nMaybe you don't want to get any data, but rather want to make a\nconfiguration change.\n\nMaking a configuration change is a two-step process (for most\nconfiguration features).\n\nBuild the configuration, which creates the appropriate configuration\nobject and places it in a *staging* area, but does not push it.\n\nMost methods of the feature class to *build* the configuration are\ncalled `build` or `remove`.\n\nExecute, or push, the configuration object(s) to the device.\n\nWhile in most cases, users may just want or need to push a single\nobject, it is possible to build, or stage, multiple configuration\nobjects and push them all at once in which case they are executed in\nthe order as they were built. Each time a `build` or `remove` is\nexecuted, a list is being appended to, which is storing the staged\nobjects.\n\nThe final execution (config push) happens by using the `execute`\nmethod of the `HPCOM7` object.\n\nExamples are below.\n\n# Getting Started\n\n## Initialize and Open Connection to the Device\n\n```\n>>> from pyhpecw7.comware import HPCOM7\n>>> args = dict(host='hp1', username='hp', password='hp123')\n>>> device = HPCOM7(**args)\n>>> device.open()\n<ncclient.manager.Manager object at 0x7fa5088f98d0>\n```\n\n## Examples\n\n### Get VLAN Information\n\n```\n>>> from pyhpecw7.features.vlan import Vlan\n>>> vlan = Vlan(device, '20')\n>>> vlan.get_config()\n{}\n>>> vlan = Vlan(device, '10')\n>>> vlan.get_config()\n{'name': 'VLAN10_WEB', 'vlanid': '10', 'descr': 'VLAN 0010'}\n```\n\nVLAN 20 did not exist on the switch, but VLAN 10 did.\n\nA VLAN object for any VLAN can also return all VLAN IDs that exist on\nthe switch.\n\n```\n>>> vlan.get_vlan_list()\n['1', '10']\n```\n\n### Configure a VLAN\n\nLet's create a new VLAN object.\n\n```\n>>> vlan = Vlan(device, '20')\n```\n\nNow add VLAN 20. To do this we'll use the `build` method.\n\n```\n>>> vlan.build(stage=True)\nTrue\n```\n\nWhen `True` is returned, it means that the config object that will be\npushed has successfully been staged.\n\nThe next step is to execute the change.\n\n```\n>>> response = device.execute_staged()\n>>> vlan.get_config()\n{'name': 'VLAN 0020', 'vlanid': '20', 'descr': 'VLAN 0020'}\n```\n\nSetting the vlan name or description could easily be sent in as\nadditional key value pairs (or with a dictionary) when using `build`.\n\n```\n>>> args = dict(name='NEWV20', descr='DESCR_20')\n>>> vlan.build(stage=True, **args)\nTrue\n>>> rsp = device.execute_staged()\n>>> vlan.get_config()\n{'name': 'NEWV20', 'vlanid': '20', 'descr': 'DESCR_20'}\n```\n\nTo remove the VLAN, the `remove` method is used.\n\n```\n>>> vlan.remove(stage=True)\nTrue\n>>> rsp = device.execute_staged()\n>>> vlan.get_config()\n{}\n```\n\n### Get Interface Information\n\n```\n>>> from pyhpecw7.features.interface import Interface\n>>> interface = Interface(device, 'FortyGigE1/0/4')\n>>> interface.get_config()\n{'admin': 'up', 'duplex': 'auto', 'speed': 'auto', 'description': 'DESCR104', 'type': 'routed'}\n```\n\n### Default an Interface\n\n```\n>>> interface.default(stage=True)\nTrue\n>>> response = device.execute_staged()\n>>> interface.get_config()\n{'admin': 'up', 'duplex': 'auto', 'speed': 'auto', 'description': 'FortyGigE1/0/4 Interface', 'type': 'switched'}\n```\n\n### Configure an Interface\n\n```\n>>> interface.build(stage=True, admin='down', description='TEST_DESCR')\nTrue\n>>> rsp = device.execute_staged()\n>>> interface.get_config()\n{'admin': 'down', 'duplex': 'auto', 'speed': 'auto', 'description': 'TEST_DESCR', 'type': 'switched'}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vincentbernat/pyhpecw7",
    "keywords": "HPE Comware7 FlexFabric Netconf API",
    "license": "Apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py3hpecw7",
    "package_url": "https://pypi.org/project/py3hpecw7/",
    "platform": "",
    "project_url": "https://pypi.org/project/py3hpecw7/",
    "project_urls": {
      "Homepage": "https://github.com/vincentbernat/pyhpecw7"
    },
    "release_url": "https://pypi.org/project/py3hpecw7/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python package to interact with HPE Comware7 based devices",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8014082,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "605e87aff84942a5cc8afac4d3db42ad73fcd8c372990e38bc77d16eee8e73a6",
          "md5": "725c82db9f4d61e0433bc16ac441dd45",
          "sha256": "d90801d3c80161a195b4e8fc9f4c5b0f70e6a28044faa29bd8a83c0df0eb9c3e"
        },
        "downloads": -1,
        "filename": "py3hpecw7-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "725c82db9f4d61e0433bc16ac441dd45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87530,
        "upload_time": "2020-08-21T18:01:08",
        "upload_time_iso_8601": "2020-08-21T18:01:08.973298Z",
        "url": "https://files.pythonhosted.org/packages/60/5e/87aff84942a5cc8afac4d3db42ad73fcd8c372990e38bc77d16eee8e73a6/py3hpecw7-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f93307af46f25bcf6e332bc3866ac1ee41c0ad6a855f060162381ab7d5f5898",
          "md5": "22de1bfe3891eea76954a0a95a2956bd",
          "sha256": "50ffe371c16a0b63699bdd2510e1ed1bbb0a0ab2d342959b713c74db9689ca2d"
        },
        "downloads": -1,
        "filename": "py3hpecw7-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "22de1bfe3891eea76954a0a95a2956bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 90175,
        "upload_time": "2020-08-21T18:09:37",
        "upload_time_iso_8601": "2020-08-21T18:09:37.014440Z",
        "url": "https://files.pythonhosted.org/packages/8f/93/307af46f25bcf6e332bc3866ac1ee41c0ad6a855f060162381ab7d5f5898/py3hpecw7-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f93307af46f25bcf6e332bc3866ac1ee41c0ad6a855f060162381ab7d5f5898",
        "md5": "22de1bfe3891eea76954a0a95a2956bd",
        "sha256": "50ffe371c16a0b63699bdd2510e1ed1bbb0a0ab2d342959b713c74db9689ca2d"
      },
      "downloads": -1,
      "filename": "py3hpecw7-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "22de1bfe3891eea76954a0a95a2956bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 90175,
      "upload_time": "2020-08-21T18:09:37",
      "upload_time_iso_8601": "2020-08-21T18:09:37.014440Z",
      "url": "https://files.pythonhosted.org/packages/8f/93/307af46f25bcf6e332bc3866ac1ee41c0ad6a855f060162381ab7d5f5898/py3hpecw7-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}