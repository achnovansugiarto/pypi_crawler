{
  "info": {
    "author": "Dmytro Popov",
    "author_email": "thedmitryp@ukr.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing"
    ],
    "description": "**Version 1.1.0 introduced logic reconsidering based on the [Dart implementation](https://github.com/mitryp/datifyDart). \r\nThat version changed the library configuration approach, allowing to extend the localizations and more.\r\nThe configuration after that version is not compatible with the 1.0.X and 0.X.X versions of Datify.\r\nMoreover, most of the methods in the library are deprecated since 1.1.0 and will be removed in 2.0.0, so it will break \r\nthe existing code that uses that methods.**\r\n\r\n**Since 1.1.0, the library will warn the users that continue using the deprecated methods.**\r\n\r\n## Automatic flexible date extracting from strings in any formats.\r\n\r\n**Datify** makes it easy to extract dates from strings in _(nearly)_ any formats.\r\n\r\nYou will need only to parse the date string with Datify, and it's all good.\r\n\r\nThe date formats supported by Datify are the following:\r\n\r\n* Day first digit-only dates: 20.02.2020, 09/07/2000, 9-1-2005;\r\n* Month first digit-only dates: 02 22 2020, 09.07.2000, 1.9/2005;\r\n* Dates in the general date format: 2020-04-15;\r\n* **Alphanumeric dates in different languages**: 11th of July 2020; 6 липня 2021; 31 декабря, 2021.\r\n\r\nSee the [Formats](#formats) section for the detailed information about the supported formats.\r\n\r\nThe behavior of Datify can be configured with the DatifyConfig - see [Configuration](#configuring-datify) section.\r\n\r\n### Month name languages supported by default:\r\n\r\n- [x] English\r\n- [x] Ukrainian\r\n- [x] Russian\r\n\r\n---\r\n\r\n## Installing\r\nSimply run `pip install datify` from your command line (pip must be installed).\r\n\r\n## Data parsing\r\n\r\nTo extract a date from a string, use the `.parse(string)` factory of the `Datify` class.\r\nThe method takes an input string and the optional parameters `year`, `month`, and `day`.\r\n\r\nAfter that the input string will be parsed. If the optional parameters were given, the respective object fields will\r\nhave the provided values.\r\n\r\n### Getting the result\r\n\r\nAfter the parsing is done, the result can be retrieved in a different ways:\r\n\r\n* If the date is complete, the result can be transformed into a `datetime` object with the `date()` getter.\r\n  > **!** The `date()` getter will be replaced with the `date` property in **2.0.0**.\r\n\r\n  However, if the date is incomplete the getter will return None.\r\n\r\n  The result is considered complete when the `year`, `month`, and `day` fields of the result are not None.\r\n\r\n  To make sure the parsed result is complete and can be transformed to a datetime, the `complete` property is used.\r\n  It returns True if the result is complete and can be transformed int a datetime object.\r\n\r\n\r\n* To get the not nullable result independent of the parsing result, use the `tuple()` getter.\r\n\r\n  It will return a tuple of the following structure: `(day, month, year)` where each element represents the \r\n  corresponding field of the Datify object.\r\n  > **!** The `tuple()` getter will be replaced with the `tuple` property that returns the tuple of the structure \r\n    (year, month, day) in **2.0.0**.\r\n\r\n* The Datify instance itself has the `year`, `month`, and `day` mutable nullable fields, that can be used to access\r\n  the parsing result.\r\n\r\n## Formats\r\n\r\n> In the formats below, the sign `$` represents any of the supported date splitters.\r\n>\r\n> The `$?` sign represents an optional separator character (the separator may or may not be present).\r\n\r\n- General date format: `YYYY$?MM$?DD` - e.g. _20210706_ or _2022-02-23_ etc;\r\n\r\n- `Alphanumeric dates in different languages` - e.g. _6th of July 2021_, _31st of December 2021_, _20 жовтня_, _1 июля_\r\n  etc;\r\n  > Datify tries to find different forms of month names in the natural languages where they are present.\r\n\r\nWhen the `day_first` is set to `true`:\r\n\r\n- The most common digit-only date format: `DD$MM$YYYY` - e.g. _20.01.2022_;\r\n\r\nWhen the `day_first` is set to `false`:\r\n\r\n- American digit date format (the month is first): `MM$DD$YYYY` - e.g. _12.31.2021_;\r\n\r\n> When the `day_first` is set to `false`, Datify will try to find the alphabetic month names before the parsing to avoid\r\nlosing the month values in the strings of the format '1 of July 2020'. However, this makes the parsing a bit slower with\r\nthis option enabled.\r\n\r\n## Configuring Datify\r\n\r\nThe library behavior can be customized with the `DatifyConfig` class fields and methods.\r\n\r\nThe following can be customized:\r\n\r\n1. Date splitters (`.`, `/`, `-`, ` ` by default).\r\n\r\n   Any of the supported splitters can be present in digit-only or alphanumeric dates (See [Formats](#formats) section\r\n   of the documentation).\r\n\r\n   To define a new custom separator, it must be added to the `DatifyConfig.splitters` set.\r\n\r\n   For instance, to add the `#` separator to the config, the following syntax is used:\r\n   ```python\r\n   DatifyConfig.splitters.add('#')\r\n   ```\r\n   After that the next `Datify.parse()` invocations will use the added splitter in the parsing operations.\r\n   > A splitter can also be string more than one character long\r\n\r\n\r\n2. Month names localizations, different month aliases.\r\n   By default, Datify supports English, English shortened, Ukrainian and Russian month names:\r\n   `{'january','jan','січень','январь',}`\r\n\r\n   More localizations can be added whenever they needed with the `DatifyConfig`:\r\n\r\n\r\n  * To add a new month name for the specified month, the `DatifyConfig.add_month_name(ordinal: int, name: str)` method\r\n    is used. The `ordinal` argument takes int number in range [1, 12] inclusive to represent the month number.\r\n\r\n    For example, to add the French name, `Septembre`, for the 9th month, the following syntax is used:\r\n    ```python\r\n    DatifyConfig.add_month_name(9, 'Septembre')\r\n    ```\r\n    _If the `ordinal` is not in the defined range, the ValueError will be raised._\r\n\r\n\r\n* To add a new entire localization, which consists of the 12 ordered month names, the\r\n  `DatifyConfig.add_months_locale(locale: Iterable[str])` method is used.\r\n\r\n  > The `locale` iterable must have a length of 12 and consist of the unique elements\r\n  If these conditions are not satisfied, the ArgumentError will be thrown.\r\n\r\n  For example, to add the French month localization, the following syntax is used:\r\n  ```python\r\n  french_months = (\r\n     'Janvier', 'Février', 'Mars', 'Avril', 'Peut', 'Juin',\r\n     'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', \r\n     'Décembre'\r\n   )\r\n  \r\n  DatifyConfig.add_months_locale(french_months)\r\n  ```\r\n  > Note: The months should be ordered in the months order for the correct work.\r\n\r\n> `DatifyConfig` can be accessed with Datify.config field\r\n---\r\n\r\n## Example:\r\n\r\nUnnecessary code was omitted from the example above. See the `example/datify_example.py` for the full code example.\r\n```python\r\nclass Events(abc.ABC):\r\n    \"\"\"Database emulation for the example.\r\n\r\n    This class stores dates and the corresponding event descriptions and provides the method for\r\n    record requesting from the storage.\r\n    \"\"\"\r\n    _records = {\r\n        Date(year=2021, month=12, day=31): 'New Year party 🎄',\r\n        Date(year=2022, month=1, day=20): 'Birthday celebration 🎁',\r\n        Date(year=2022, month=2, day=14): 'St. Valentines Day 💖',\r\n        Date(year=2022, month=2, day=23): 'The cinema attendance 📽',\r\n        Date(year=2022, month=5, day=23): 'A long-awaited Moment 🔥',\r\n    }\r\n    \"\"\"Stores the dates and the corresponding event descriptions.\"\"\"\r\n\r\n    @classmethod\r\n    def query(cls, year: int | None = None, month: int | None = None, day: int | None = None) -> str | None:\r\n        \"\"\"Returns an event descriptions based on the provided date parts.\r\n\r\n        If no date parts provided or no corresponding event descriptions are found, the method returns None.\r\n        \"\"\"\r\n\r\n        # handle empty requests\r\n        if all((year is None, month is None, day is None)):\r\n            return None\r\n\r\n        # return the first string corresponding to the Date that satisfies the query, if any\r\n        for record_date in cls._records:\r\n            if record_date.satisfies(year, month, day):\r\n                return cls._records[record_date]\r\n\r\n        return None\r\n\r\n\r\ndef handle_request(search_request: SearchRequest) -> str:\r\n    \"\"\"Handles the SearchRequest requests.\r\n\r\n    Returns a corresponding event description or the error message.\r\n    \"\"\"\r\n    date_query = search_request['date']\r\n\r\n    # Datify handles all the parsing inside freeing from even thinking about it!\r\n    parsed = Datify.parse(date_query)\r\n\r\n    response = Events.query(year=parsed.year, month=parsed.month, day=parsed.day)\r\n\r\n    return response if response is not None else 'No events found for this query 👀'\r\n\r\n\r\nif __name__ == '__main__':\r\n    # define dates in the different formats\r\n    dates = (\r\n        '31.12.2021',  # common digit-only date format\r\n        '2022-02-23',  # another commonly-used date format\r\n        '23-02/2022',  # the supported separators can be combined in the string\r\n        '20 of January',  # date is incomplete but still correctly parsed\r\n        'May',  # just a month name\r\n        '14 лютого 2022',  # Ukrainian date which stands for 14.02.2022\r\n        'not a date',  # not a date at all\r\n    )\r\n\r\n    # 'request' all the dates and print the result\r\n    for date in dates:\r\n        print(f'{date}: {handle_request({\"date\": date})}')\r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/mitryp/datify/archive/refs/tags/1.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mitryp/datify",
    "keywords": "str,string,user-experience,user-input,date,date-strings,datify,alpha-month,month,english,russian,ukrainian,natural-language,open-source",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datify",
    "package_url": "https://pypi.org/project/datify/",
    "platform": null,
    "project_url": "https://pypi.org/project/datify/",
    "project_urls": {
      "Download": "https://github.com/mitryp/datify/archive/refs/tags/1.1.0.tar.gz",
      "Homepage": "https://github.com/mitryp/datify"
    },
    "release_url": "https://pypi.org/project/datify/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An extensible library that provides the functionality of the parsing strings in different formats to extract dates.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14601162,
  "releases": {
    "0.91": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07874074a1937f21f91879066bbd0aa2cc6feed3c5b8b5733122f99eec4b82ef",
          "md5": "3ab4e1206129d26d9b4c9d713daf775f",
          "sha256": "0ddaa7452017bb611319a86f6d501882670ab6a6b382c1846040cd984dccc23e"
        },
        "downloads": -1,
        "filename": "datify-0.91.tar.gz",
        "has_sig": false,
        "md5_digest": "3ab4e1206129d26d9b4c9d713daf775f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5969,
        "upload_time": "2021-06-16T18:32:01",
        "upload_time_iso_8601": "2021-06-16T18:32:01.375392Z",
        "url": "https://files.pythonhosted.org/packages/07/87/4074a1937f21f91879066bbd0aa2cc6feed3c5b8b5733122f99eec4b82ef/datify-0.91.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.92": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93c730e597cced713ba25fe4e6fa376f188a889263fc1469b8e8080c5710624d",
          "md5": "e3f126def4a7798dfea050e971e577f5",
          "sha256": "cba65d69c71d049881ed4342e8be21df5d754507b2165e4010198113fb42bf81"
        },
        "downloads": -1,
        "filename": "datify-0.92.tar.gz",
        "has_sig": false,
        "md5_digest": "e3f126def4a7798dfea050e971e577f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6040,
        "upload_time": "2021-06-16T18:49:46",
        "upload_time_iso_8601": "2021-06-16T18:49:46.826880Z",
        "url": "https://files.pythonhosted.org/packages/93/c7/30e597cced713ba25fe4e6fa376f188a889263fc1469b8e8080c5710624d/datify-0.92.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3093b601ccbbdb619ca4c5af52e89334409c1228d7471b3d9dae902ed1e1703",
          "md5": "308566ede2f06aa540508713832f646f",
          "sha256": "27219637d9cce0c69e9ef73fdc31c8c6531db29f06cb48193ea46863601ade2c"
        },
        "downloads": -1,
        "filename": "datify-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "308566ede2f06aa540508713832f646f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6063,
        "upload_time": "2021-06-16T18:50:22",
        "upload_time_iso_8601": "2021-06-16T18:50:22.598796Z",
        "url": "https://files.pythonhosted.org/packages/f3/09/3b601ccbbdb619ca4c5af52e89334409c1228d7471b3d9dae902ed1e1703/datify-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19cd8ae285a36d9602bf0c30436e7af21a884067b331c98d92a6a4dac9e67482",
          "md5": "a30ca0c2ad8e05219c91d4da663e6af9",
          "sha256": "5ed3d354d8a6d8368944680c91d07523625a245e956189b15d9601fe0ec423a5"
        },
        "downloads": -1,
        "filename": "datify-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a30ca0c2ad8e05219c91d4da663e6af9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6067,
        "upload_time": "2021-06-17T15:31:22",
        "upload_time_iso_8601": "2021-06-17T15:31:22.479510Z",
        "url": "https://files.pythonhosted.org/packages/19/cd/8ae285a36d9602bf0c30436e7af21a884067b331c98d92a6a4dac9e67482/datify-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a153dd16c5cb6d7d4db40f9305aa4ce4dc8ba1244e290925a53a5582d73e4e75",
          "md5": "eb2aeff8d3bdea943f80c1be0f344fb0",
          "sha256": "2150fa2da04d7e0afa21689e27fdd6ada4c457062eab2c488f591f3b47f2bd32"
        },
        "downloads": -1,
        "filename": "datify-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "eb2aeff8d3bdea943f80c1be0f344fb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6108,
        "upload_time": "2021-07-01T15:06:55",
        "upload_time_iso_8601": "2021-07-01T15:06:55.400722Z",
        "url": "https://files.pythonhosted.org/packages/a1/53/dd16c5cb6d7d4db40f9305aa4ce4dc8ba1244e290925a53a5582d73e4e75/datify-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7209ba67be9195410bbdfa2c756938c071d46beb9020e28e18c2cbb87ee8425",
          "md5": "3843e1a7b14690078261288883800dd4",
          "sha256": "6d27e3309acdfc3d92ea306b6cc05e1d8349abd7b9fd1485d166e926c9d5f162"
        },
        "downloads": -1,
        "filename": "datify-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3843e1a7b14690078261288883800dd4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12046,
        "upload_time": "2022-01-02T20:06:38",
        "upload_time_iso_8601": "2022-01-02T20:06:38.825593Z",
        "url": "https://files.pythonhosted.org/packages/c7/20/9ba67be9195410bbdfa2c756938c071d46beb9020e28e18c2cbb87ee8425/datify-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae663b2fdbc7f4cd8ae2d478d2ca10d0428ead3e446a6f9ec4232cecf9ebd8e7",
          "md5": "b90176f670272d4a1bf6786135e4c970",
          "sha256": "db7b15347314f200bb2ce1e77b72f1fdcbb77093298f6e9a8b67e41364ba729b"
        },
        "downloads": -1,
        "filename": "datify-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b90176f670272d4a1bf6786135e4c970",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10106,
        "upload_time": "2022-02-11T18:16:17",
        "upload_time_iso_8601": "2022-02-11T18:16:17.311777Z",
        "url": "https://files.pythonhosted.org/packages/ae/66/3b2fdbc7f4cd8ae2d478d2ca10d0428ead3e446a6f9ec4232cecf9ebd8e7/datify-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61b534fc6f67e65fb4db28a3a43600a97bec03e51cae6139e867d325d6de961a",
          "md5": "c130c2d4f46628dae23ec679822902c1",
          "sha256": "4c7fc08ddb1f299e3f4cbb1b800db8320347ff0515bf780864c07c9e0fa6bdac"
        },
        "downloads": -1,
        "filename": "datify-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c130c2d4f46628dae23ec679822902c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12209,
        "upload_time": "2022-04-12T15:37:53",
        "upload_time_iso_8601": "2022-04-12T15:37:53.087406Z",
        "url": "https://files.pythonhosted.org/packages/61/b5/34fc6f67e65fb4db28a3a43600a97bec03e51cae6139e867d325d6de961a/datify-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a7cff43e77e71b12b05f5986572cf528d63aa890c563772b55704d22b1b3110",
          "md5": "7bc2004ffb1065191a8a5d1b0ee3e231",
          "sha256": "cf8f138484088bd299ff3f7e3a6bdda2dbe4d51686fd7a073648b57347c6dd9b"
        },
        "downloads": -1,
        "filename": "datify-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7bc2004ffb1065191a8a5d1b0ee3e231",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19182,
        "upload_time": "2022-07-30T22:46:28",
        "upload_time_iso_8601": "2022-07-30T22:46:28.910766Z",
        "url": "https://files.pythonhosted.org/packages/9a/7c/ff43e77e71b12b05f5986572cf528d63aa890c563772b55704d22b1b3110/datify-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a7cff43e77e71b12b05f5986572cf528d63aa890c563772b55704d22b1b3110",
        "md5": "7bc2004ffb1065191a8a5d1b0ee3e231",
        "sha256": "cf8f138484088bd299ff3f7e3a6bdda2dbe4d51686fd7a073648b57347c6dd9b"
      },
      "downloads": -1,
      "filename": "datify-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7bc2004ffb1065191a8a5d1b0ee3e231",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19182,
      "upload_time": "2022-07-30T22:46:28",
      "upload_time_iso_8601": "2022-07-30T22:46:28.910766Z",
      "url": "https://files.pythonhosted.org/packages/9a/7c/ff43e77e71b12b05f5986572cf528d63aa890c563772b55704d22b1b3110/datify-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}