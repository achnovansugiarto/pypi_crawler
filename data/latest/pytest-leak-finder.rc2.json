{
  "info": {
    "author": "Martín Gaitán",
    "author_email": "gaitan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# pytest-leak-finder\n\n[![PyPI version](https://badge.fury.io/py/pytest-leak-finder.svg)](https://badge.fury.io/py/pytest-leak-finder)\n[![tests](https://github.com/mgaitan/pytest-leak-finder/actions/workflows/pytest.yml/badge.svg)](https://github.com/mgaitan/pytest-leak-finder/actions/workflows/pytest.yml)\n[![black](https://github.com/mgaitan/pytest-leak-finder/actions/workflows/black.yml/badge.svg)](https://github.com/mgaitan/pytest-leak-finder/actions/workflows/black.yml)\n\n\nYou have a test that passes when executed alone but fails when running its suite. What's happening? My two cents that some previous test keeps the things dirty. But wich one/s, maybe the previous are a lot, right? \n\nThis plugin helps to find a culprit by doing a [binary search](https://en.wikipedia.org/wiki/Binary_search_algorithm) (*alla* [git bisect](https://git-scm.com/docs/git-bisect)) on the collected tests before the target. \n\nThe first time it will collect the first half of those tests plus the failing one (the target). If the target fails, we are in a good path, so, a new bisect is applied. When the target doesn't fail, it changes the \"half\" to bisect the next time. \n\nConsider the following example:\n\n```\n$ pytest -v demo/test_demo.py \ncollected 6 items                                                                                                                                            \ntests/test_demo.py::test1 PASSED                                                                             \ntests/test_demo.py::test2 PASSED                                                                              \ntests/test_demo.py::test3 PASSED                                                                              \ntests/test_demo.py::test4 PASSED                                                                             \ntests/test_demo.py::test5 FAILED                                                                              \ntests/test_demo.py::test6 PASSED \n\n$ pytest -v --lf demo/test_demo.py \ncollected 6 items / 5 deselected / 1 selected                                                                                                                \ntests/test_demo.py::test5 PASSED \n\n```\n\nYou can use pytest-leak-finder to find the problematic test. \n\nOn the first run will set the failed test as the \"target\" and will stop the session.  \n\n```\n$ pytest -v --leak-finder demo/test_demo.py \ncollected 6 items\n\ntests/test_demo.py::test1 PASSED                                                                              \ntests/test_demo.py::test2 PASSED                                                                              \ntests/test_demo.py::test3 PASSED                                                                              \ntests/test_demo.py::test4 PASSED                                                                              \ntests/test_demo.py::test5 FAILED\n\n===================================================== Leak finder =====================================================\nTarget set to: pytest-leak-finder/tests/test_demo.py::test5\n\nNext step: a\nCurrent target is: pytest-leak-finder/tests/test_demo.py::test5\n============================================= 1 failed, 4 passed in 0.13s =============================================\n```\n\nThe second execution will run the first half of the tests passed before the target (step \"a\", composed by `test1` and `test2`). \n\nIf the target still fail, that path would followed deeper by dividing again. But in this example \nit passes, so we'll discard it, and asumme the other half was the one that include the leak.\nThat's the reason why the \"next step\" will be \"ba\".\n\n```\n$ pytest -v --leak-finder demo/test_demo.py\ncollected 6 items / 3 deselected / 3 selected                                                                                                                \ndemo/test_demo.py::test1 PASSED                                                                                 [ 33%]\ndemo/test_demo.py::test2 PASSED                                                                                 [ 66%]\ndemo/test_demo.py::test5 PASSED                                                                                 [100%]\n\n\n===================================================== Leak finder =====================================================\nWe reach the target and nothing failed. Let's change the last half.\n\nNext step: ba\nCurrent target is: pytest-leak-finder/demo/test_demo.py::test5\n=========================================== 3 passed, 3 deselected in 0.03s ===========================================\n```\n\n\nSo, the new step will be \"B-A\", i.e. `test3`\n\n\n```\n$ pytest -v --leak-finder demo/test_demo.py\ncollected 6 items / 3 deselected / 3 selected                                                                                                                \ntests/test_demo.py::test3 PASSED                                                                              \ntests/test_demo.py::test5 FAILED\n\n===================================================== Leak finder =====================================================\nWe found a leak!\n\nLeak found in: pytest-leak-finder/demo/test_demo.py::test3\nLast step was: ba\n```\n\n\nAnd there it is, `test3` was the problematic test we were looking for! \n\n\n## Changelog\n\n### 0.2.0 (Feb 15, 2023)\n\n- Optimized number of steps \n- Better messages output\n- Setup black\n- Dropped suport for Python <3.7\n\nFull set of changes: [`0.2.0...0.1.0`](https://github.com/mgaitan/sphinxcontrib-mermaid/compare/0.2.0...0.1.0)\n\n### 0.1.0 (Apr 17, 2022)\n\n- First public release\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mgaitan/pytest-leak-finder",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Martín Gaitán",
    "maintainer_email": "gaitan@gmail.com",
    "name": "pytest-leak-finder",
    "package_url": "https://pypi.org/project/pytest-leak-finder/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-leak-finder/",
    "project_urls": {
      "Homepage": "https://github.com/mgaitan/pytest-leak-finder"
    },
    "release_url": "https://pypi.org/project/pytest-leak-finder/0.2.0/",
    "requires_dist": [
      "pytest (>=3.5.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Find the test that's leaking before the one that fails",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16871610,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f0f41dda462099b5e2fa011e6062d21718fbd69d27ecf0c70c7bae778231fd3",
          "md5": "7e7586150bd6e672f5024b826986b6c8",
          "sha256": "a5202fc0947696123a9b32960be916659a170aa588aea4d1747a49bf337cf272"
        },
        "downloads": -1,
        "filename": "pytest_leak_finder-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e7586150bd6e672f5024b826986b6c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 5013,
        "upload_time": "2022-04-17T23:59:49",
        "upload_time_iso_8601": "2022-04-17T23:59:49.087167Z",
        "url": "https://files.pythonhosted.org/packages/8f/0f/41dda462099b5e2fa011e6062d21718fbd69d27ecf0c70c7bae778231fd3/pytest_leak_finder-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0bbd60f41372edfba48630b95919fc13abfe78e77fc23f93f9698daa428659c",
          "md5": "8575b562c817a73b549764c3b2be17f1",
          "sha256": "36e7825258e1a5bb043587b68edff6bf5151b819e29a40d43fa64a546004f0d0"
        },
        "downloads": -1,
        "filename": "pytest-leak-finder-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8575b562c817a73b549764c3b2be17f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 4855,
        "upload_time": "2022-04-18T00:00:10",
        "upload_time_iso_8601": "2022-04-18T00:00:10.811077Z",
        "url": "https://files.pythonhosted.org/packages/d0/bb/d60f41372edfba48630b95919fc13abfe78e77fc23f93f9698daa428659c/pytest-leak-finder-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b234ea0eb30fa9e9f3e3ddd7986231d0d66ea18649e3a036aa6fdf9ec899689f",
          "md5": "1dc7b8271c306c87256685fcc9b5a2bd",
          "sha256": "7dcfe4ce24018b2e0635a29b66eb761d56dcc2aa3aac97500a22b60a9bcc7b0d"
        },
        "downloads": -1,
        "filename": "pytest_leak_finder-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1dc7b8271c306c87256685fcc9b5a2bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5603,
        "upload_time": "2023-02-15T13:53:10",
        "upload_time_iso_8601": "2023-02-15T13:53:10.483194Z",
        "url": "https://files.pythonhosted.org/packages/b2/34/ea0eb30fa9e9f3e3ddd7986231d0d66ea18649e3a036aa6fdf9ec899689f/pytest_leak_finder-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1a36c62a9a069ac775d9a7f1aa7086a10b5b71a90433ca67828923a424b2b8e",
          "md5": "b3bda1ae404d636ac0f0e7ee8b65d2e6",
          "sha256": "0402c084a74a125d078e3e045025e16c131199b4dc4f0d3d78f16d20fa15b9a2"
        },
        "downloads": -1,
        "filename": "pytest-leak-finder-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b3bda1ae404d636ac0f0e7ee8b65d2e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5964,
        "upload_time": "2023-02-15T13:53:12",
        "upload_time_iso_8601": "2023-02-15T13:53:12.373888Z",
        "url": "https://files.pythonhosted.org/packages/a1/a3/6c62a9a069ac775d9a7f1aa7086a10b5b71a90433ca67828923a424b2b8e/pytest-leak-finder-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b234ea0eb30fa9e9f3e3ddd7986231d0d66ea18649e3a036aa6fdf9ec899689f",
        "md5": "1dc7b8271c306c87256685fcc9b5a2bd",
        "sha256": "7dcfe4ce24018b2e0635a29b66eb761d56dcc2aa3aac97500a22b60a9bcc7b0d"
      },
      "downloads": -1,
      "filename": "pytest_leak_finder-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1dc7b8271c306c87256685fcc9b5a2bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5603,
      "upload_time": "2023-02-15T13:53:10",
      "upload_time_iso_8601": "2023-02-15T13:53:10.483194Z",
      "url": "https://files.pythonhosted.org/packages/b2/34/ea0eb30fa9e9f3e3ddd7986231d0d66ea18649e3a036aa6fdf9ec899689f/pytest_leak_finder-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1a36c62a9a069ac775d9a7f1aa7086a10b5b71a90433ca67828923a424b2b8e",
        "md5": "b3bda1ae404d636ac0f0e7ee8b65d2e6",
        "sha256": "0402c084a74a125d078e3e045025e16c131199b4dc4f0d3d78f16d20fa15b9a2"
      },
      "downloads": -1,
      "filename": "pytest-leak-finder-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b3bda1ae404d636ac0f0e7ee8b65d2e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5964,
      "upload_time": "2023-02-15T13:53:12",
      "upload_time_iso_8601": "2023-02-15T13:53:12.373888Z",
      "url": "https://files.pythonhosted.org/packages/a1/a3/6c62a9a069ac775d9a7f1aa7086a10b5b71a90433ca67828923a424b2b8e/pytest-leak-finder-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}