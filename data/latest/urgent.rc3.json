{
  "info": {
    "author": "thautawarm",
    "author_email": "twshere@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# 很急语言, 一个\"过渡\"语言.\n\n安装pip, 命令ugt\n\n(`pip install urgent`, `ugt --help`)\n\n运行3.6, 编译3.7\n\n(3.7, 3.8上, urgent编译出的字节码可以被3.6加载, 也就是没有使用ROT4和LOAD_METHOD这些新的指令)\n\n\n跨版本加载用`--raw_bytecode` flag.\n\n```shell script\nugt cc <xxx.ugt> <xxx.code> -- raw_bytecode --project bootstrap.toml\n```\n后,\n```\nimport marshal\ncode_object = marshal.load(open(\"xxx.code\", 'rb'))\nexec(code_object, globals())\n```\n\n## 语句(伪)\n\n- `let/def`和`rec`.\n\n```\nlet x = 1\ndef x = 1\n```\n一个意思.\n\n- `rec`\n```\nrec f = x -> (f, x)\n```\n是递归, 也就是自己的定义中可以出现自己.\n\n\n- `let ..., ... `\n\n```\nlet x = 1, y = 2, z = ...,\n```\n\n定义时`x, y, z`互不引用, 他们定义时用到的`x, y, z`来自外部.\n\n\n- `rec ..., ...`.\n\n```\nrec x = a -> (a, y), y = a -> (a, x) , z = ...,\n```\n\n定义时, `x, y, z`互相引用.\n\n\n## If\n\n```\n<expr> ?\n    <expr>\nelse\n    <expr>\n```\n\n我觉得语法还行.\n\n```shell script\nhow?\n  fine\nelse\n  emmm  \n```\n\n还阔以.\n\n## Match\n\n```shell script\nlet x  =\n(1, 2) match\n  (a, b, c) => a,\n  (1, 2) => 0\n```\n\n可以`match`的很多, 更多例子见后面的variants.\n\n注意, 二元运算符会被当作解构器.\n\n我们还支持view pattern.\n\n```shell script\nlet f = x -> (x, 2 * x)\n\n1 match (f -> (a, b)) => a + b # 1 + 2 * 1 \n5 match (f -> (a, b)) => a + b # 5 + 2 * 5 \n```\n\n## Open, Import\n\n项目根目录那个`hello.ugt`可以拿来试, 打开`ugt repl`,\n```shell script\nUrgent> import Hello\nUrgent> print 1\nUndef print\nUrgent> let x = Hello\nUrgent> x.print 1\n1\nUrgent> open x\nUrgent> print 1\n1\n```\n\n`import`导入模块但不加载它的成员, `open`加载成员.\n看起来似乎是python的`import <mod>`和`from <mod> import *`, 其实不是.\n\n一切都是静态的, 只有module可以被import和open. `x`之所以可以被open,\n是因为`x`被分析为是模块`Hello`的alias.\n\nUrgent是pure的, 变量不可以多次赋值(只有绑定), 所以, 上面代码里任何使用`x`的地方都会索引到模块`Hello`.\n\n如果说`python import *`是有运行时开销的, 那么, 已经加载过的模块在urgent里,\n无论在哪儿open都是0开销的.\n\n一种来自于ML语言的用法是, 在局部打开模块.\n```shell script\nUrgent> import Hello\nUrgent> let x = 1\nUrgent> print 1\nUndef print\n\nUrgent> let x = let y = 2 open Hello in print 1\n1\nUrgent> print 1\nUndef print\n```   \n\n## 语句引导的表达式\n\n`open`, `let`, `rec`, `def`这些语句后面可以跟一个`in`, 表示表达式.\n```shell script\nUrgent> let x = def x = 1 in open Hello in print <| x + 1\n2\n```\n\n连续的`let`, `open`, 这些语句, 可以不写`in`.\n\n```shell script\nUrgent> let x = let x = 1 let y = 2 let c = 3 open Hello in print <| x + y + c\n6\nUrgent> print <| 1 + 2 + 3\nUndef operator.<|\nUrgent> print (1+2)\nUndef operator.+\n```\n\n## 中缀定义\n\n`+`左结合，优先级10.\n\n```shell script\ninfixl + 10\n```\n\n\n`<|`右结合, 优先级0.\n\n```shell script\ninfixr <| 0\n```\n\n优先级是一个整数, 可以为负.\n\n如果想要使用其他模块定义的运算符优先级和结合性, 可以open该模块.\n如果不想污染作用域, 可以局部open该模块.\n\n只有`and`和`or`两个是固定的优先级, 他们的优先级都比其他二元运算符低.\n\n`and`和`or`也用在pattern matching中.\n`and`表示左右俩都要match, `or`表示只match一个.\n\n```shell script\nx match\n  1 or 2 or 3 => 0,\n  x and (y, z) => (y, x, z) \n```\n\n\n## Variants\n\n```shell script\ndata Nil, Cons(_, _) \ninfixr :: 1\nlet :: = Cons\n\nlet l1 = Cons 1 Nil\n\nlet print_lst = lst ->\n  lst match\n    1 :: Cons a b => ...,\n    Cons a b => ...,\n    Nil =>  ...\n```\n\n`[]`语法是`Nil`的简写, `[a, b]`这样的语法是`Cons a (Cons b Nil)`的简写, 所以我们可以\n\n```shell script\ndata Nil, Cons(_, _) \ninfixr :: 1\nlet :: = Cons\nlet l1 = [1]\n\nlet print_lst = lst ->\n  lst match\n    1 :: a :: b => ...,\n    a :: b => ...,\n    [] =>  ...\n```\n\n局部定义的variants:\n```shell script\nlet x = data A, B, C in\n  (A, B, C)\nA\n\n# Undef: A\n```\n\n这是用来动态create数据类型的. 注意这对于运行时来说比较缓慢. 一般来说, 还是把数据创建放到模块顶层. \n\nVariants的成员可以按名字访问:\n```shell script\ndata Either(left, right)\nlet x = Either(1, 2)\nx.left |> print\n```\n\n## 尾递归\n\nurgent实现了尾递归, 所以, 你可以随意地写递归函数定义.\n\n我们不能说这个速度非常快, 实际上, 比起python循环, 相同情况下我们的尾递归性能只有其一半,\n更别说我们还有柯里化.\n\n然而, 既然你在看了, 那我可以开心地向你保证, **这是Python世界最快的, 且货真价实的尾递归实现**.\n\n其基本原理相当简单, 你可以在`codegen.py`的`preload`方法里找到一个用字节码书写的,\n优化到极致的尾递归scheduler. \n\n我会在非尾递归调用点应用这个scheduler,\n你能同通过阅读`compiler.py`的`v_tco`以及`v_call`方法, 来进一步理解尾递归优化的实现.\n\n## Python函数调用\n\n```shell script\nf.(a, b, c)\n```\n\n像这样, 调用时加个点的函数, 就是按照Python的调用约定. 这并不和我们的尾递归优化冲突.\n\n## Imperative Programming\n\n下面的代码需要加载项目目录下的`base/prelude.ugt`.\n\n- `ref`\n```shell script\nUrgent> let x = ref 1\n=> ()\nUrgent> x\n=> ref 1\nUrgent> x := 2\n=> ()\nUrgent> x\n=> ref 2\nUrgent> !x + 2\n=> 4\n```\n\n- `for`\n\n```shell script\nUrgent> for [1, 2, 3] ( x -> \n  print x\n)\n1\n2\n3\n=> ()\n```\n\n- `while`\n\n```shell script\nUrgent> let x = ref 1\n=> ()\nUrgent> while { !x < 10 } {\n  do print !x\n  in x := !x + 1\n}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n=> ()\n```\n\n上面的循环暂时是尾递归写的, 之后会用Python字节码重写.\n\n`for`和`while`的实现如下:\n```shell script\nrec for = seq -> f ->\n    seq match\n        [] => (),\n        hd :: tl =>\n            do f hd\n            in for tl f\n\nrec while = cond -> f ->\n    cond () ?\n        do f ()\n        in while cond f\n    else ()\n```\n\n都可以良好地尾递归.\n\n## 项目构建\n\nurgent把所有代码编译成单个.pyc文件.\n\n\n```shell script\n# 编译\nsh> ugt cc <主模块.ugt> <a.pyc> --project <项目文件.toml>\n# 直接执行\nsh> ugt run <主模块.ugt> --project <项目文件.toml>\n# 启动REPL\nsh> ugt repl --project <项目文件.toml>\n```\n\n一个示例的项目文件见`bootstrap.toml`.\n\npackaging和project building这些方面其实还没设计好, 但先用着了. 做事第一.\n\n## WIP: Traits\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RemuLang/urgent",
    "keywords": "",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "urgent",
    "package_url": "https://pypi.org/project/urgent/",
    "platform": "any",
    "project_url": "https://pypi.org/project/urgent/",
    "project_urls": {
      "Homepage": "https://github.com/RemuLang/urgent"
    },
    "release_url": "https://pypi.org/project/urgent/0.1.2/",
    "requires_dist": [
      "rbnf-rts",
      "toml",
      "argser",
      "sijuiacion-lang",
      "remu-operator"
    ],
    "requires_python": ">=3.6.0",
    "summary": "",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6554213,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1055d3363a87ad87b67b87109fbd226dd86f4ce45c33703524c3b224f5e9d62a",
          "md5": "25b0626517d33bc1ab1458ca59866b1e",
          "sha256": "1b76d4ef3ebd7bbe3d98017ba99af0678caad01a5450ef8fdfe8bde02a4b6fa5"
        },
        "downloads": -1,
        "filename": "urgent-0.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "25b0626517d33bc1ab1458ca59866b1e",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6.0",
        "size": 111378,
        "upload_time": "2020-01-23T15:11:32",
        "upload_time_iso_8601": "2020-01-23T15:11:32.608251Z",
        "url": "https://files.pythonhosted.org/packages/10/55/d3363a87ad87b67b87109fbd226dd86f4ce45c33703524c3b224f5e9d62a/urgent-0.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc391f185ae15c0ca12e0d100fae7322dea667d42157e4cfc6173e9443dbd6c4",
          "md5": "f34b4b48b00970dc6f64b57233f3159b",
          "sha256": "73cdda4f2c41d358a50791a4a9b9257c7881fcecfa4bf0cb0606e04acf84ad3c"
        },
        "downloads": -1,
        "filename": "urgent-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f34b4b48b00970dc6f64b57233f3159b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 51282,
        "upload_time": "2020-01-23T15:11:29",
        "upload_time_iso_8601": "2020-01-23T15:11:29.938898Z",
        "url": "https://files.pythonhosted.org/packages/dc/39/1f185ae15c0ca12e0d100fae7322dea667d42157e4cfc6173e9443dbd6c4/urgent-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e041fec896ce5f7a7a918fe0d517ccc7aee5afb35c4bb9f8ff34a082c215fd2e",
          "md5": "516bf418d738f76b30391230f30bc881",
          "sha256": "e31b7bb1cdb951df71d4fb3a745559f3e554d9782f3766d831d21b07a07d8516"
        },
        "downloads": -1,
        "filename": "urgent-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "516bf418d738f76b30391230f30bc881",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 51383,
        "upload_time": "2020-01-25T12:09:35",
        "upload_time_iso_8601": "2020-01-25T12:09:35.794558Z",
        "url": "https://files.pythonhosted.org/packages/e0/41/fec896ce5f7a7a918fe0d517ccc7aee5afb35c4bb9f8ff34a082c215fd2e/urgent-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28f1df42225cdc73496b179011f0317140474a39a63e63f9316264fcd7bc51e5",
          "md5": "4bc766a16f5c5c0f86f20af1dbca7014",
          "sha256": "b1180a2d146028789210be588e6883c23c3998d0ea9e80c9c8b89208f4cf7e13"
        },
        "downloads": -1,
        "filename": "urgent-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4bc766a16f5c5c0f86f20af1dbca7014",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 51077,
        "upload_time": "2020-02-01T12:58:41",
        "upload_time_iso_8601": "2020-02-01T12:58:41.155293Z",
        "url": "https://files.pythonhosted.org/packages/28/f1/df42225cdc73496b179011f0317140474a39a63e63f9316264fcd7bc51e5/urgent-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28f1df42225cdc73496b179011f0317140474a39a63e63f9316264fcd7bc51e5",
        "md5": "4bc766a16f5c5c0f86f20af1dbca7014",
        "sha256": "b1180a2d146028789210be588e6883c23c3998d0ea9e80c9c8b89208f4cf7e13"
      },
      "downloads": -1,
      "filename": "urgent-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4bc766a16f5c5c0f86f20af1dbca7014",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 51077,
      "upload_time": "2020-02-01T12:58:41",
      "upload_time_iso_8601": "2020-02-01T12:58:41.155293Z",
      "url": "https://files.pythonhosted.org/packages/28/f1/df42225cdc73496b179011f0317140474a39a63e63f9316264fcd7bc51e5/urgent-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}