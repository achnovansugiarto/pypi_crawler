{
  "info": {
    "author": "glizzykingdreko",
    "author_email": "glizzykingdreko@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ascii_chiper\n`ascii_chiper `is a Python module for encrypting and decrypting strings, integers, and dictionaries using various encryption techniques. The module provides user-friendly and customizable encryption configurations to suit different use cases and levels of security.\n\n## Features\n- Accepts strings, integers, floats, lists and dictionaries as input for encryption\n- Supports multiple encryption techniques, including swapping, XOR shifting, interleaving, rotation, XOR base, XOR addition, and interleaving with key\n- Offers pre-configured encryption configurations for quick use\n- Allows users to create custom encryption configurations\n\n## Installation\nTo install the ascii_chiper module, use pip: \n```\npip install ascii_chiper\n```\n\n## Usage\n\nThis module is designed to be simple and easy to use. To get started, import the `Chiper` class and initialize an instance of it. You can then use the `encrypt` and `decrypt` methods to encrypt and decrypt your data.\n\nThe `encrypt` method takes the data to be encrypted, a base key, a length, and an encryption configuration as input. You can use one of the predefined encryption configurations or create your own custom configuration. The `decrypt` method requires the encrypted data, base key, length, and the same encryption configuration used during encryption.\n\n### Hello World\n```python\nfrom ascii_chiper import Chiper\n\n# Initialize the Chiper\nchiper = Chiper(123)\n\nencrypted = chiper.encrypt(\"Hello World!\", 113, 40, Chiper.BASIC_SWAP_INTERLEAVE)\nprint(f\"Encrypted: {encrypted}\")\n# Output 'xSJJSHNlQWyubF1vDyClV7RvfnKobCZkzyGUIg=='\n\ndecrypted = chiper.decrypt(encrypted)\nprint(f\"Decrypted: {decrypted}\")\n# Output 'Hello World!'\n```\n\n### Basic usage\n```python\nfrom ascii_chiper import Chiper\n\n# Initialize the Chiper\nchiper = Chiper.initialize()\n\n# Encrypt a message using a default encryption configuration\nmessage = \"This is a test message.\"\nbase, length = 123456789, 5\nencrypted_message = chiper.encrypt(message, base, length, encrypt_steps=Chiper.XORBASE_ROTATE)\n\n# Decrypt the encrypted message\ndecrypted_message = chiper.decrypt(encrypted_message)\n\nprint(\"Original message:\", message)\nprint(\"Encrypted message:\", encrypted_message)\nprint(\"Decrypted message:\", decrypted_message)\n```\n\n### Custom configuration\n```python\nfrom ascii_chiper import Chiper, EncryptionModel, DecryptionModel\n\n# Initialize the Chiper\nchiper = Chiper.initialize()\n\n# Encrypt a message using a custom encryption configuration\nmessage = \"A custom encryption example.\"\nbase, length = 987654321, 92\ncustom_config = [\n    {\"interleave\": {}},\n    {\"swap\": {}},\n    {\"rotate\": {\"index\": 5}},\n    {\"xor_base\": {\"base\": 137, \"start\": 0}},\n]\n\nencrypted_message = chiper.encrypt(message, base, length, encrypt_steps=custom_config)\n\n# Decrypt the encrypted message using a DecryptionModel\ndecryption_model = DecryptionModel.from_encryption_model(EncryptionModel(base, length, custom_config))\ndecrypted_message = chiper.decrypt(encrypted_message, model=decryption_model)\n\nprint(\"Original message:\", message)\nprint(\"Encrypted message:\", encrypted_message)\nprint(\"Decrypted message:\", decrypted_message)\n```\n\n### Advanced usage\n```python\nfrom ascii_chiper import Chiper, KeyGenerator, \\\n    EncryptionModel, DecryptionModel\n\n# Custom encryption configuration\ncustom_config = [\n    {\"interleave\": {}},\n    {\"rotate\": {\"index\": 2}},\n    {\"xor_add\": {\"start\": 0}},\n]\n\n# Create an encryption seed and model\nseed = KeyGenerator.generate_seed()\nencryption_model = EncryptionModel(123456789, 52, custom_config)\n\n# Encrypt a message using a custom encryption configuration\nmessage = {\n    \"example\": True,\n    \"message\": \"This is a test message.\"\n}\nencrypted_message = Chiper(seed).encrypt(message, model=encryption_model)\n\n# Decrypt the encrypted message using a DecryptionModel\ndecryption_model = DecryptionModel.from_encryption_model(encryption_model)\ndecrypted_message = Chiper(seed).decrypt(encrypted_message, model=decryption_model)\n\nprint(\"Original message:\", message)\nprint(\"Encrypted message:\", encrypted_message)\nprint(\"Decrypted message:\", decrypted_message)\n```\n\n### Custom configuration with lambda functions\n```python\nfrom ascii_chiper import Chiper, EncryptionModel, DecryptionModel\n\n# Initialize the Chiper\nchiper = Chiper.initialize()\n\n# Encrypt a message using a custom encryption configuration\nmessage = \"A custom encryption example.\"\nbase, length = 987654321, 92\ncustom_config = [\n    {\"swap\": {}},\n    {\"rotate\": {\n        #Â We can use a lambda function to define the index\n        # the len of the key is passed as the first argument\n        \"index\": lambda key: key % 5,\n    }},\n    {\"xor_base\": {\n        \"base\": 137,\n        # We can use predefined functions as well\n        \"start\": Chiper.MIDDLE_OF_KEY,\n        \"end\": Chiper.PENULTIMATE_OF_KEY,\n    }},\n]\n\nencrypted_message = chiper.encrypt(message, base, length, encrypt_steps=custom_config)\n\n# Decrypt the encrypted message using a DecryptionModel\ndecryption_model = DecryptionModel.from_encryption_model(EncryptionModel(base, length, custom_config))\ndecrypted_message = chiper.decrypt(encrypted_message, model=decryption_model)\n\nprint(\"Original message:\", message)\nprint(\"Encrypted message:\", encrypted_message)\nprint(\"Decrypted message:\", decrypted_message)\n```\n\n### Decrypt message by knowing key and steps\n```python\nfrom ascii_chiper import Chiper, EncryptionModel, DecryptionModel\n\n# Decrypt a message using a custom encryption configuration\nencrypted = \"2tqBEWERKhGjI3qxKsFLuaMbWhNaybG5s5IqkmrKapJyyypDm6IqklrBmrlrWSq5WyuBkmrKymJqoZoTarErYqOBG6l6yyoiaqLKkqOqOhNaU3paq9ObE5ODKpqTy1pSq4taQ2Oxm1qryyvDe4NrC0q6qwtbWYGLMpIqYnILW9ObyxtiY5FKU3KhaoOrgavTq8taoptZEZJh6hHaEYkRYSMqsaPBerkqG0sTo8lauVqSsZKzyiqSastqQ3KiKpKbwSq5WlmauWsrKpJbmoFTq8F7InqiK1NqksoTMqIqYlLDehOLg0u5e7kqUmKLgYuby1pag5p7g6uTKwtqupsLWqmri1tDOoNCIyrTMsuaU6upG1NyoRqDcstq03qaC2KjuVqSm1lb6ZvqEdphCxGDg0tjCxtLo3N7g3kzI2ERKhGjI3qxKsFLuaMbWhNaybG5s5IqkmrKapJyyypDm6IqklrBmrlrWSq5WyuBkmrKymJqoZoTarErYqOBG6l6yyoiaqLKkqOqOhNaU3paq9ObE5ODKpqTy1pSq4taQ2Oxm1qryyvDe4NrC0q6qwtbWYGLMpIqYnILW9ObyxtiY5FKU3KhaoOrgavTq8taoptZEZJh6hHaK6Ojw4N5MyNhESoRoyN6sSrBS7mjG1oTWsmxubOSKpJqymqScssqQ5uiKpJawZq5a1kquVsrgZKrmntTesErImqiylMykioTUqJ6YovDSxN7gyq5YrmBUpuLWouDy3taq5org2qTmwtauqsLW6k6i0JDKoMyI5rTq8sbU3KpGlNyoWqDessL06OaWmKbuVuSm1kR6erq\"\nused_encrypt_steps = [\n    {\"swap\": {}},\n    {\"xor_shift\": {}}\n]\nused_key = [114,114]\nexcepted_output = [[\"0\",\"Edt6O8E7ictbK9K76RvREYMRMyNhETsRE8K7S+m7EekR0YMLY4MbS6MLe0t5cyODETMRYUtbGjKKOzubsprSEyrJKquhK6lKsyuxepoamWIau+kq0RFLEaNzkysLc2ljI4NpM0uzuyuTK+sR\"],[\"1\",\"Edt6O8E7ictbK9K76RvREYMRMyNhETsRE8K7S+m7EekR0Sujo8ODeTMjYRFbETJLOxqbipo7E7LJ0qsqKypKoSuperMasWKau5kqGhHpEdFzSyujc5NjC4NpMyOzaStLK7sRk+s=\"],[\"application/pdf\",\"Edt6O8E7ictbK9K76RvREYMRMyNhETsRE8K7S+m7EekR0YMLY4MbS6MLe0t5cyODETMRYUtbGjKKOzubsprSEyrJKquhK6lKsyuxepoamWIau+kq0RFLEaNzkysLc2ljI4NpM0uzuyuTK+sR\"],[\"text/pdf\",\"Edt6O8E7ictbK9K76RvREYMRMyNhETsRE8K7S+m7EekR0Sujo8ODeTMjYRFbETJLOxqbipo7E7LJ0qsqKypKoSuperMasWKau5kqGhHpEdFzSyujc5NjC4NpMyOzaStLK7sRk+s=\"]]\n\n# Create the EncryptionModel\nenc_model = EncryptionModel(0, 0, encrypt_steps=used_encrypt_steps)\n\n# Initialize the Chiper\nchiper = Chiper.initialize()\n\n# Decrypt the encrypted message\ndecrypted_message = chiper.decrypt(encrypted, key=used_key, decrypt_steps=DecryptionModel.from_encryption_model(enc_model).decrypt_steps)\nprint(\"Decrypted message:\", decrypted_message)\nprint(f\"Decrypted message is equal to excepted output: {decrypted_message == excepted_output}\")\n# Have fun :P those looks like some mime_types encrypted\n```\nFor other examples usages, please refer to the Examples folder.\n\n## Encryption Methods\n\n`ascii_chiper` offers various encryption techniques that can be combined in different configurations to achieve the desired level of security:\n\n| Name            | Description                                          | Optional Parameters                 |\n|-----------------|------------------------------------------------------|-------------------------------------|\n| reverse         | Reverse the input data.                              |                                     |\n| swap            | Swaps pairs of characters in the input data.         |                                     |\n| rotate          | Rotates the input data by a specified index from the key. | Index from key to use           |\n| interleave      | Interleaves the input data, effectively rearranging the characters. | key start/end                 |\n| interleave_key  | Interleaves the input data based on the key start and end positions. | key start/end                 |\n| xor_shift       | Applies an XOR shift operation using a specified index from the key. | index of key to use           |\n| xor_base        | Performs XOR operation on the input data using the base and the key start and end positions. | base to use, start/end key to use |\n| xor_add         | Adds the key start and end values to the input data using XOR addition. | start/end key to use         |\n\nYou can combine these encryption methods in a custom configuration to suit your specific requirements.\n\n## Encryption Configurations\nIn addition to creating your own custom encryption configurations, `ascii_chiper` provides several pre-configured encryption configurations that cater to different use cases and security levels:\n\n- **BASIC_SWAP_INTERLEAVE**: A simple configuration that combines Swap and Interleave encryption methods for basic security.\n- **ROTATE_XORSHIFT**: Combines the Rotate and XorShift methods for an intermediate level of security.\n- **XORBASE_ROTATE**: Combines the XorBase and Rotate methods for enhanced security.\n- **XORADD_INTERLEAVE**: Combines the XorAdd and Interleave methods for a higher level of security.\n- **FULL_ENCRYPTION**: Uses all available encryption methods for maximum security.\n\nRemember to use the same encryption configuration for both encryption and decryption to ensure proper functionality.\n\n## Personal Thoughts\n\nI hope you find this module useful. This module is the exact Python implementation of the encryption method used by a well-known web anti-bot system. If you know what I'm talking about, you'll definitely find it useful. \nPlease feel free to contact me for any help or suggestions via [Email](mailto:glizzykingdreko@protonmail.com) or [Twitter](https://mobile.twitter.com/glizzykingdreko). I appreciate your feedback and contributions to the project.\n\n## License\nThis project is licensed under the MIT [License](LICENSE). See the LICENSE file for more details.\n\n## My links\n- [Project repository](https://github.com/glizzykingdreko/ascii_chiper)\n- [GitHub](https://github.com/glizzykingdreko)\n- [Twitter](https://mobile.twitter.com/glizzykingdreko)\n- [Medium](https://medium.com/@glizzykingdreko)\n- [Email](mailto:glizzykingdreko@protonmail.com)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/glizzykingdreko/ascii_chiper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ascii-chiper",
    "package_url": "https://pypi.org/project/ascii-chiper/",
    "platform": null,
    "project_url": "https://pypi.org/project/ascii-chiper/",
    "project_urls": {
      "Homepage": "https://github.com/glizzykingdreko/ascii_chiper"
    },
    "release_url": "https://pypi.org/project/ascii-chiper/0.1.3/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "A versatile Python module for encrypting and decrypting strings, integers, and dictionaries using a variety of encryption techniques.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17442406,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fafba9c33d1a789e3661b3fed69acd6826802b5bb85437c7f67f7f71ef0082e1",
          "md5": "620cd5461d5d96e44ad42d23c8b0c808",
          "sha256": "ae11da21277782691653209d9873e615d044b07951a804f0205dd17475ae6ed6"
        },
        "downloads": -1,
        "filename": "ascii_chiper-0.1.0-py3.11.egg",
        "has_sig": false,
        "md5_digest": "620cd5461d5d96e44ad42d23c8b0c808",
        "packagetype": "bdist_egg",
        "python_version": "0.1.0",
        "requires_python": ">=3.6",
        "size": 26176,
        "upload_time": "2023-03-24T13:50:02",
        "upload_time_iso_8601": "2023-03-24T13:50:02.644266Z",
        "url": "https://files.pythonhosted.org/packages/fa/fb/a9c33d1a789e3661b3fed69acd6826802b5bb85437c7f67f7f71ef0082e1/ascii_chiper-0.1.0-py3.11.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76b95ae8997e10e9939fdb14caf19d560be2c084c5e929a2e8f415f8a1dde888",
          "md5": "787cedc82e6bf5e769a9b50b5ee9734b",
          "sha256": "1f53dbd5832e97592b494097eacb99b663f3e1264afe31096119721ae9c7bbda"
        },
        "downloads": -1,
        "filename": "ascii_chiper-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "787cedc82e6bf5e769a9b50b5ee9734b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10972,
        "upload_time": "2023-03-24T13:49:59",
        "upload_time_iso_8601": "2023-03-24T13:49:59.148336Z",
        "url": "https://files.pythonhosted.org/packages/76/b9/5ae8997e10e9939fdb14caf19d560be2c084c5e929a2e8f415f8a1dde888/ascii_chiper-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2b84ee73074af238004b1f1a96f8c884d5c4ab6244b21bd30707b7f76e5e6fe",
          "md5": "df48bc093b64ba2c17344b25400bcac6",
          "sha256": "946b0b1c5d17f4c706d3913a521973e4d0a11fad701103222650dacec66efd4b"
        },
        "downloads": -1,
        "filename": "ascii_chiper-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "df48bc093b64ba2c17344b25400bcac6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11499,
        "upload_time": "2023-03-24T13:50:05",
        "upload_time_iso_8601": "2023-03-24T13:50:05.459625Z",
        "url": "https://files.pythonhosted.org/packages/f2/b8/4ee73074af238004b1f1a96f8c884d5c4ab6244b21bd30707b7f76e5e6fe/ascii_chiper-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8c6dfe094abd369c90c4371e5bac467d9e748e914d39897797681b7c615a312",
          "md5": "dae49b9d9129bea388aa12767bc8637f",
          "sha256": "f1c0739b70d546500e913e754718239aa99b0bf03fd98b031a248c0e13c68742"
        },
        "downloads": -1,
        "filename": "ascii_chiper-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dae49b9d9129bea388aa12767bc8637f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12346,
        "upload_time": "2023-03-24T15:56:39",
        "upload_time_iso_8601": "2023-03-24T15:56:39.066390Z",
        "url": "https://files.pythonhosted.org/packages/c8/c6/dfe094abd369c90c4371e5bac467d9e748e914d39897797681b7c615a312/ascii_chiper-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d9495d4e1eae34d333183ccebbdc79b9729e5107020cbd1bb9d1a162e441f0d",
          "md5": "a9f68d1c31e5d6fbb4f2672fa2313ee1",
          "sha256": "57769d98392cb5048c60b8bc912fc5d568c611f7a3eb4a06a2a648f5f5ca7a89"
        },
        "downloads": -1,
        "filename": "ascii_chiper-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9f68d1c31e5d6fbb4f2672fa2313ee1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13225,
        "upload_time": "2023-03-25T12:24:53",
        "upload_time_iso_8601": "2023-03-25T12:24:53.480082Z",
        "url": "https://files.pythonhosted.org/packages/3d/94/95d4e1eae34d333183ccebbdc79b9729e5107020cbd1bb9d1a162e441f0d/ascii_chiper-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2ae1b4d8d7eaea6b15eca7be7a4870f4952988ccf0c7737b31d4305b28e1f14",
          "md5": "f2575635f54aaf1e12da3b3c4216b21a",
          "sha256": "3469cd9e24f52b495e46c7bcc6802207946762736a904db66803eaf581d07b65"
        },
        "downloads": -1,
        "filename": "ascii_chiper-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f2575635f54aaf1e12da3b3c4216b21a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15076,
        "upload_time": "2023-03-25T12:24:55",
        "upload_time_iso_8601": "2023-03-25T12:24:55.991704Z",
        "url": "https://files.pythonhosted.org/packages/e2/ae/1b4d8d7eaea6b15eca7be7a4870f4952988ccf0c7737b31d4305b28e1f14/ascii_chiper-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93801df8d144551ac3faa9f967a6b748f0674a557d2f753d58f4edb73aca442a",
          "md5": "51d4af783e64243c850efb032a5b0845",
          "sha256": "e8a0abbd7e955c346c88670ed11ac6f6f6e04494295eb02349f90102411165d6"
        },
        "downloads": -1,
        "filename": "ascii_chiper-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51d4af783e64243c850efb032a5b0845",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13248,
        "upload_time": "2023-03-25T13:59:27",
        "upload_time_iso_8601": "2023-03-25T13:59:27.722115Z",
        "url": "https://files.pythonhosted.org/packages/93/80/1df8d144551ac3faa9f967a6b748f0674a557d2f753d58f4edb73aca442a/ascii_chiper-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37d39afbb0991718662bb5356801b85c7bae4792338a175ca0701cdd9403fab7",
          "md5": "fd5e27f05cb7b1d7c15081613301b23e",
          "sha256": "d5abc0f2800eb45f58ca4260aa522c38dafa6f73b86691b71b09cda36a86e696"
        },
        "downloads": -1,
        "filename": "ascii_chiper-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fd5e27f05cb7b1d7c15081613301b23e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15111,
        "upload_time": "2023-03-25T13:59:29",
        "upload_time_iso_8601": "2023-03-25T13:59:29.465493Z",
        "url": "https://files.pythonhosted.org/packages/37/d3/9afbb0991718662bb5356801b85c7bae4792338a175ca0701cdd9403fab7/ascii_chiper-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93801df8d144551ac3faa9f967a6b748f0674a557d2f753d58f4edb73aca442a",
        "md5": "51d4af783e64243c850efb032a5b0845",
        "sha256": "e8a0abbd7e955c346c88670ed11ac6f6f6e04494295eb02349f90102411165d6"
      },
      "downloads": -1,
      "filename": "ascii_chiper-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "51d4af783e64243c850efb032a5b0845",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13248,
      "upload_time": "2023-03-25T13:59:27",
      "upload_time_iso_8601": "2023-03-25T13:59:27.722115Z",
      "url": "https://files.pythonhosted.org/packages/93/80/1df8d144551ac3faa9f967a6b748f0674a557d2f753d58f4edb73aca442a/ascii_chiper-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37d39afbb0991718662bb5356801b85c7bae4792338a175ca0701cdd9403fab7",
        "md5": "fd5e27f05cb7b1d7c15081613301b23e",
        "sha256": "d5abc0f2800eb45f58ca4260aa522c38dafa6f73b86691b71b09cda36a86e696"
      },
      "downloads": -1,
      "filename": "ascii_chiper-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "fd5e27f05cb7b1d7c15081613301b23e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15111,
      "upload_time": "2023-03-25T13:59:29",
      "upload_time_iso_8601": "2023-03-25T13:59:29.465493Z",
      "url": "https://files.pythonhosted.org/packages/37/d3/9afbb0991718662bb5356801b85c7bae4792338a175ca0701cdd9403fab7/ascii_chiper-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}