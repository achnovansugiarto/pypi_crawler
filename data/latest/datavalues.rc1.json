{
  "info": {
    "author": "Ben Nassif",
    "author_email": "bennassif@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "Data Values\n===========\n\n|Pypi| |MIT licensed| |GitHub Release Date|\n\nSimple package for managing data units including conversions and\noperations\n\nInstallation\n------------\n\n.. code:: python\n\n   # PyPi Installation\n   pip install datavalues\n   # GitHub Installation\n   pip install git+'https://github.com/Scraps23/datavalues.git' \n\nGetting Started\n---------------\n\nThe package is a collection of sub-classed object classes for each data\nunit. To import all the object classes, use the import below in your\ncode:\n\n.. code:: python\n\n   from data.units import *\n\nThis is the import method used for all examples below. ### Object\nClasses There are nine 9 object classes, each named for the unit they\nrepresent. - Byte - KiloByte - MegaByte - GigaByte - TeraByte - PetaByte\n- ExaByte - YottaByte - ZettaByte ## Usage Each of the object classes\nsub-classes the BaseDataModel which allows for arithmetic and comparison\noperators, and a shared ``convert`` method. ### Conversion The\nconversion method is non-destructive and relies upon the class name of\nthe data object. Changing the names of the class(es) on import will\nbreak functionality.\n\n.. code:: python\n\n   # Converting the object does not alter it, it returns a new object\n   as_mb = MegaByte(100)\n   as_gb = as_mb.convert('gb')\n   print(as_mb, as_gb)\n   ## RETURNS:\n   100 MB 0.1 GB\n\n.. code:: python\n\n   import os\n   # Conversion can be done in-line to reduce memory usage\n   as_gb = MegaByte(100).convert('gb')\n   # This is especially useful for bytes-based systems and human-readable input being merged\n   selected_size = GigaByte(float(input('How many gigabytes? : ')))\n   os.environ['disk_size_var'] = selected_size.convert('b')\n\nOperators\n~~~~~~~~~\n\nData objects can have math applied against them, and be compared to each\nother and int/float objects to simplify operations like calculating\ntotal disk usage, RAID viability, and more.\n\nArithmetic Operators\n^^^^^^^^^^^^^^^^^^^^\n\nThe mathematical operators allow objects of different classes to\ninteract; if another data object is supplied as the other value, both\nvalues are converted to bytes, evaluated, and converted back to the\noriginal unit. Otherwise, if an integer or float is supplied, it is\nassumed that value is in the same unit as the original unit.\n\n.. code:: python\n\n   current_disk = GigaByte(1270)\n   end_goal = TeraByte(2)\n   # Will return in Terabytes (0.73 TB)\n   print(end_goal - current_disk)\n   # Will return in Gigabytes (730.0 GB)\n   print((end_goal - current_disk).convert('gb'))\n\nComparison Operators\n^^^^^^^^^^^^^^^^^^^^\n\nThe data objects can also be compared to each other using the comparison\noperators (i.e.Â >, <, >=, etc). In this case, they similarly convert\nboth values to bytes and compare that float object. Otherwise, if a\nfloat or int is supplied as the comparator, then it is assumed the\nnumber is in the same unit as the object being compared.\n\n.. code:: python\n\n   current_disk = GigaByte(1270)\n\n   if current_disk > 1000:\n       print(current_disk.convert('tb'))\n   else:\n       print(current_disk)\n\nReturning Values\n~~~~~~~~~~~~~~~~\n\n| The ``__str__`` method returns the value in a human-readable format\n  which allows for clean output in code.\n| The ``__repr__`` method returns the creation string for the object.\n\n.. code:: python\n\n   disk1 = Byte(150000000000).convert('gb')\n   disk2 = MegaByte(328000).convert('gb')\n\n   # Printing the disks returns the human-readable value\n   print(','.join([disk1, disk2]))\n   ## RETURNS:\n   150.0 GB 328.0 GB\n\n   # The object itself returns its creation string\n   disk1\n   ## RETURNS:\n   GigaByte(150.0)\n\n.. |Pypi| image:: https://img.shields.io/pypi/v/datavalues\n   :target: https://pypi.org/project/datavalues\n.. |MIT licensed| image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://raw.githubusercontent.com/Scraps23/datavalues/main/LICENSE\n.. |GitHub Release Date| image:: https://img.shields.io/github/release-date/Scraps23/datavalues\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Scraps23",
    "keywords": "",
    "license": " The MIT License (MIT) Copyright (c) 2022 Ben Nassif Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: 1. The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "Ben Nassif",
    "maintainer_email": "bennassif@gmail.com",
    "name": "datavalues",
    "package_url": "https://pypi.org/project/datavalues/",
    "platform": null,
    "project_url": "https://pypi.org/project/datavalues/",
    "project_urls": {
      "Homepage": "https://github.com/Scraps23"
    },
    "release_url": "https://pypi.org/project/datavalues/0.3.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Package for converting data units",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16646765,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ffd7a8be01593737a50139d925bb7f948c7742d73838c8467a46bc9984243ac",
          "md5": "9f35ca5a9344f51920947e0b38d40250",
          "sha256": "8505730e7eda97bd533b8d4978998e8e968827e88a8310b092cd926e5d13a5ad"
        },
        "downloads": -1,
        "filename": "datavalues-0.3.1-py3.8.egg",
        "has_sig": false,
        "md5_digest": "9f35ca5a9344f51920947e0b38d40250",
        "packagetype": "bdist_egg",
        "python_version": "0.3.1",
        "requires_python": null,
        "size": 8989,
        "upload_time": "2023-02-01T05:54:56",
        "upload_time_iso_8601": "2023-02-01T05:54:56.957631Z",
        "url": "https://files.pythonhosted.org/packages/6f/fd/7a8be01593737a50139d925bb7f948c7742d73838c8467a46bc9984243ac/datavalues-0.3.1-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "445f4f2a83f4917e03874da0e5abb3c909f756d3968f1196491e7c7e9dadfce1",
          "md5": "6887ff9afae3c54b146268ee8877d8d5",
          "sha256": "4783794a76c4decb4eb5788dee2533945c046fc9a48bddb4e7208d1420880275"
        },
        "downloads": -1,
        "filename": "datavalues-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6887ff9afae3c54b146268ee8877d8d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6366,
        "upload_time": "2023-02-01T05:54:54",
        "upload_time_iso_8601": "2023-02-01T05:54:54.899141Z",
        "url": "https://files.pythonhosted.org/packages/44/5f/4f2a83f4917e03874da0e5abb3c909f756d3968f1196491e7c7e9dadfce1/datavalues-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ffd7a8be01593737a50139d925bb7f948c7742d73838c8467a46bc9984243ac",
        "md5": "9f35ca5a9344f51920947e0b38d40250",
        "sha256": "8505730e7eda97bd533b8d4978998e8e968827e88a8310b092cd926e5d13a5ad"
      },
      "downloads": -1,
      "filename": "datavalues-0.3.1-py3.8.egg",
      "has_sig": false,
      "md5_digest": "9f35ca5a9344f51920947e0b38d40250",
      "packagetype": "bdist_egg",
      "python_version": "0.3.1",
      "requires_python": null,
      "size": 8989,
      "upload_time": "2023-02-01T05:54:56",
      "upload_time_iso_8601": "2023-02-01T05:54:56.957631Z",
      "url": "https://files.pythonhosted.org/packages/6f/fd/7a8be01593737a50139d925bb7f948c7742d73838c8467a46bc9984243ac/datavalues-0.3.1-py3.8.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "445f4f2a83f4917e03874da0e5abb3c909f756d3968f1196491e7c7e9dadfce1",
        "md5": "6887ff9afae3c54b146268ee8877d8d5",
        "sha256": "4783794a76c4decb4eb5788dee2533945c046fc9a48bddb4e7208d1420880275"
      },
      "downloads": -1,
      "filename": "datavalues-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6887ff9afae3c54b146268ee8877d8d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6366,
      "upload_time": "2023-02-01T05:54:54",
      "upload_time_iso_8601": "2023-02-01T05:54:54.899141Z",
      "url": "https://files.pythonhosted.org/packages/44/5f/4f2a83f4917e03874da0e5abb3c909f756d3968f1196491e7c7e9dadfce1/datavalues-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}