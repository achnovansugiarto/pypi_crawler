{
  "info": {
    "author": "Nuage Devops",
    "author_email": "devops@nuagenetworks.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Nuage MetroAE Configuration\n\nNuage MetroAE configuration template engine.\n\nVersion 1.1.0\n\nThis tool reads JSON or Yaml files of templates and user-data to\nwrite a configuration to a VSD or to revert (remove) said configuration.\n\n## Overview\n\nMetroAE config is a Python-based engine which can apply configuration to VSDs\nvia templates.  The templates provide an abstraction around the VSD\nconfiguration model simplifying and validating the required data.  Data is\nprovided by the user in the form of Yaml or JSON files and is transformed and\napplied to the VSD through the tool's templates.  The required data and proper\nformat for each template is defined by standardized JSON schema specifications.\n\n## Installation\n\n### Via Docker Container\n\nThere are several modes of operation for MetroAE config.  For most users, the\ntool should be consumed via the MetroAE Docker container.  Using this method\nensures that all of the libraries are properly installed and the `metroae`\ncommand-line tool can be utilized for config (as well as deploy).  Instructions\nfor the Docker container installation are available at:\n\nhttps://github.com/nuagenetworks/nuage-metroae/blob/master/Documentation/DOCKER.md\n\nIf using the Docker container, all remaining installation instructions can be\nskipped.\n\n### As Python Library\n\nThe MetroAE config tool is completely implemented as a Python library.  As such,\nthe functionality of the tool can be integrated into other Python tools or\nlibraries through the use of the APIs.  To do this, the library can be installed\nvia Python pip package from pypi.org:\n\n```\npip install nuage-metroae-config\n```\n\nThe pip installation of the package will pull in all dependent libraries\nautomatically.  The following section of installing from Github can be skipped.\nThe use of the Library APIs is documented in the `Python Library API` section.\n\n### From Github Python Source\n\nUsing the MetroAE config tool without the Docker container can be accomplished\nby pulling the source from Github.  You may want to use this method if you are\ncomfortable working with Python environments and don't want the overhead of a\ncontainer.   The instructions for this case is described in the next section.\nIf using this method, you would be responsible for installing all of the\nnecessary prerequiste libraries and to obtain the VSD API specs and templates.\n\n#### Installation of MetroAE Config from Github\n\nThis section describes how to install the MetroAE config tool from the Github\nrepo.  These steps will be necessary to use the metroae_config command-line\ntool directly.  If using the MetroAE Docker container, this section should be\nskipped.\n\nThe primary requirements for running MetroAE config are:\n1. Installation of Python and the necessary packages.\n2. Installation of the config engine python libraries\n3. Access to the Configuration templates\n4. Access to the VSD API Specification\n\n#### Installation of Python and required packages.\n\nMost linux distributions come with python bundled into the operating system.\nPython 2.7 is required. Currently Python 3.0 is not supported.\n\nTo verify that python is available we can do the following:\n\n*Ubuntu*\n\n```\nroot@ubuntu:~# python --version\nPython 2.7.5\n```\n\n*RHEL/Centos*\n\n```\n[root@rhel]# python --version\nPython 2.7.5\n```\n\nTo manage the python package installation we will use PIP. Install PIP via\napt-get or yum:\n\n*Ubuntu*\n\n```\nroot@ubuntu:~# apt-get install python-pip\n...\n```\n\n*RHEL/Centos*\n\n```\n[root@rhel]# yum install python-pip\n...\n```\n\nMost packages required by MetroAE config are available as part of the base\npython functionality. However we will need to install the following:\n\n- Bambou\n- Jinja2 (min version 2.10)\n- PyYAML\n- lark-parser\n\nAdditional packages for unit-test\n\n- mock\n- pytest\n- requests\n- requests-mock\n- lark_parser\n\nThe following packages are installed via the same method on both Ubuntu and RHEL/Centos.\n\n*Ubuntu and RHEL/Centos*\n\n```\n[root@rhel]# pip install -r requirements.txt\n...\n```\n\n#### Installation of configuration engine\n\nCurrently MetroAE config is available on github and will be installed via git\nclone. Check the MetroAE home page for latest master branch location.\n\nFirst we need to install git.\n\n*Ubuntu*\n\n```\nroot@ubuntu:~# apt-get install git\n```\n\n*RHEL/Centos*\n\n```\n[root@rhel]# yum install git\n```\n\nThe repository is available via Github:\n\n```\nhttps://github.com/nuagenetworks/nuage-metroae-config\n```\n\nDepending on the authentication method with github, ie. SSH Key, or\nUsername/Password the git clone command line may change.\n\n\nFor username/password authentication\n\n*Ubuntu and RHEL/Centos*\n\n```\n[root@rhel]# export GIT_SSL_NO_VERIFY=false\n[root@rhel]# git clone https://github.com/nuagenetworks/nuage-metroae-config.git\nCloning into 'levistate'...\nUsername for 'https://github.com/nuagenetworks/nuage-metroae-config.git': sfiddian\nPassword for 'https://sfiddian@github.mv.usa.alcatel.com':\nremote: Counting objects: 619, done.\nremote: Compressing objects: 100% (9/9), done.\nremote: Total 619 (delta 1), reused 0 (delta 0), pack-reused 610\nReceiving objects: 100% (619/619), 178.01 KiB | 0 bytes/s, done.\nResolving deltas: 100% (398/398), done.\n```\n\n\n#### Installation of the VSD API Specifications\n\nMetroAE Config requires a description of the VSD API to create, read, update and\ndelete the template contents into the VSD. We do this via reading the published\nVSD API Specification. This specificaiton is opensourced and is available on\nthe public Nuage Networks github repository.\n\n\n\n*Ubuntu and RHEL/Centos*\n\n```\n[root@rhel]# git clone https://github.com/nuagenetworks/vsd-api-specifications.git\nCloning into 'vsd-api-specifications'...\nremote: Counting objects: 23428, done.\nremote: Total 23428 (delta 0), reused 0 (delta 0), pack-reused 23428\nReceiving objects: 100% (23428/23428), 4.98 MiB | 1013.00 KiB/s, done.\nResolving deltas: 100% (18163/18163), done.\n```\n\n## Command-line Tool\n\nWhen using the MetroAE Docker container, all commands are accessed through the\n`metroae` command-line tool as:\n\n    metroae config ...\n\nIf you are using the Python source obtained through Github, then any reference\nto `metroae config` should substitute the equivalent Python source tool:\n\n    python metroae_config.py ...\n\n\n## Parameters\n\nMetroAE Config command-line tool usage:\n\n    usage: metroae config [-h]\n                          {create,revert,validate,list,schema,example,upgrade-templates,version,help}\n                          ...\n\n    Version 1.0 - This tool reads JSON or Yaml files of templates and user-data to\n    write a configuration to a VSD or to revert (remove) said configuration. See\n    README.md for more.\n\n    positional arguments:\n      {create,revert,validate,list,schema,example,upgrade-templates,version,help}\n\n    optional arguments:\n      -h, --help            show this help message and exit\n\n\n    usage: metroae config create [-h] [-tp TEMPLATE_PATH] [--version]\n                                 [-sp SPEC_PATH] [-dp DATA_PATH] [-d DATA]\n                                 [-v VSD_URL] [-u USERNAME] [-p PASSWORD]\n                                 [-e ENTERPRISE] [-lg]\n                                 [datafiles [datafiles ...]]\n\n    positional arguments:\n      datafiles             Optional datafile\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -tp TEMPLATE_PATH, --template_path TEMPLATE_PATH\n                            Path containing template files. Can also set using\n                            environment variable TEMPLATE_PATH\n      --version             Displays version information\n      -sp SPEC_PATH, --spec_path SPEC_PATH\n                            Path containing object specifications. Can also set\n                            using environment variable VSD_SPECIFICATIONS_PATH\n      -dp DATA_PATH, --data_path DATA_PATH\n                            Path containing user data. Can also set using\n                            environment variable USER_DATA_PATH\n      -d DATA, --data DATA  Specify user data as key=value\n      -v VSD_URL, --vsd_url VSD_URL\n                            URL to VSD REST API. Can also set using environment\n                            variable VSD_URL\n      -u USERNAME, --username USERNAME\n                            Username for VSD. Can also set using environment\n                            variable VSD_USERNAME\n      -p PASSWORD, --password PASSWORD\n                            Password for VSD. Can also set using environment\n                            variable VSD_PASSWORD\n      -e ENTERPRISE, --enterprise ENTERPRISE\n                            Enterprise for VSD. Can also set using environment\n                            variable VSD_ENTERPRISE\n      -lg, --logs           Show logs after run\n\n\n## Example Usage\n\nApply enterprise, domain and ACLs to VSD.\n\n    $ metroae config create -tp sample/templates -sp ~/vsd-api-specifications -v https://localhost:8443 sample/user_data/acls.yaml\n\n    Configuration\n        Enterprise\n            name = 'test_enterprise'\n            DomainTemplate\n                name = 'template_public'\n                [store id to name domain_template_id]\n            Domain\n                name = 'public'\n                templateID = [retrieve domain_template_id (DomainTemplate:id)]\n                IngressACLTemplate\n                    priority = 100\n                    defaultAllowNonIP = False\n                    allowAddressSpoof = False\n                    name = 'test_acl'\n                    defaultAllowIP = True\n                    IngressACLEntryTemplate\n                        networkID = ''\n                        stateful = True\n                        protocol = 6\n                        description = 'Test ACL'\n                        etherType = '0x0800'\n                        statsLoggingEnabled = True\n                        DSCP = '*'\n                        priority = 200\n                        action = 'FORWARD'\n                        locationID = ''\n                        destinationPort = '*'\n                        locationType = 'ANY'\n                        sourcePort = 80\n                        networkType = 'ANY'\n                        flowLoggingEnabled = True\n                EgressACLTemplate\n                    priority = 100\n                    defaultInstallACLImplicitRules = True\n                    defaultAllowNonIP = False\n                    name = 'test_acl'\n                    defaultAllowIP = True\n                    EgressACLEntryTemplate\n                        networkID = ''\n                        stateful = True\n                        protocol = 6\n                        description = 'Test ACL'\n                        etherType = '0x0800'\n                        statsLoggingEnabled = True\n                        DSCP = '*'\n                        priority = 200\n                        action = 'FORWARD'\n                        locationID = ''\n                        destinationPort = '*'\n                        locationType = 'ANY'\n                        sourcePort = 80\n                        networkType = 'ANY'\n                        flowLoggingEnabled = True\n\nRevert (remove) objects configured during application, use -r option\n\n    $ metroae config revert -tp sample/templates -sp ~/vsd-api-specifications sample/user_data/acls.yaml\n\n## User Data\n\nThe templates within the MetroAE config tool are applied using data provided by the\nuser.  Each set of data values provided allows the creation of an instance of\nconfiguration on the VSD.  The required format for the data of each template is\ndefined by a JSON schema describing the required fields, types and other\nconstraints on the data.\n\n### File Format\n\nThe user data for MetroAE config can be in either Yaml or JSON format.  Each entry\nin the file defines a template and the value sets to use against that template\nto instantiate configuration.\n\n    - template: Enterprise\n      values:\n        - enterprise_name: my_first_enterprise\n          description: The first\n\n        - enterprise_name: my_second_enterprise\n          description: The second\n\nIn this example, two data sets are provided for the Enterprise template and the\nresult will be that the two enterprises will be created on the VSD.  Only the\nenterprise_name is required, but description can be provided optionally.  The\nJSON schema for the Enterprise template defines the data format.\n\n### Children\n\nLet's now add domains to the enterprise objects.  In the Domain template, note\nthat in addition to a domain_name, it also needs the enterprise_name to be\nspecified so that the domain can be associated with the correct enterprise.  We\ncould define our user data as follows:\n\n    - template: Enterprise\n      values:\n        - enterprise_name: my_first_enterprise\n          description: The first\n\n        - enterprise_name: my_second_enterprise\n          description: The second\n\n    - template: Domain\n      values:\n        - enterprise_name: my_first_enterprise\n          description: The first\n          domain_name: my_first_domain\n\n        - enterprise_name: my_second_enterprise\n          description: The second\n          domain_name: my_second_domain\n\nThis user data is fully valid and will create two enterprises each with one\ndomain.  However, we are duplicating the enterprise names and it would be\ntedious and error prone if the names needed to change.  In order to simplify\nnested data, children can be utilized as follows:\n\n    - template: Enterprise\n      values:\n        - enterprise_name: my_first_enterprise\n          description: The first\n      children:\n        - template: Domain\n          values:\n            - domain_name: my_first_domain\n\n    - template: Enterprise\n      values:\n        - enterprise_name: my_second_enterprise\n          description: The second\n      children:\n        - template: Domain\n          values:\n            - domain_name: my_second_domain\n              description: Overriden description\n\nIn this case, each Domain is a child of a parent Enterprise.  As such, all of\nthe values from the parent are inherited in the children.  The children\ndomains automatically inherit the enterprise_name of the parent.  This also\napplies for the description.\n\nNote that values can be overriden if necessary as with the description of the second\ndomain.  The most specific value takes precendence.  To prevent ambiguity, any\ntemplate with child templates can only define one set of values.\n\n### Groups\n\nAnother mechanism for reducing duplication in data is by using groups.  A group\nentry is very similar to a template, except that no actual template is\ninstantiated.  Thus, the group defines a stand-alone data set.  Groups are\nuseful when common data sets need to be defined and referenced elsewhere.\n\n    - group: first\n      values:\n        - enterprise_name: my_first_enterprise\n          domain_name: my_first_domain\n\n    - group: second\n      values:\n        - enterprise_name: my_second_enterprise\n          domain_name: my_second_domain\n\n    - group: ssh\n      values:\n        - protocol: tcp\n          port: 22\n\n    - group: html\n      values:\n        - protocol: tcp\n          port: 80\n\n    - template: Acl\n      values:\n        - acl_name: http_acl\n          $group_domain: first\n          $group_traffic: http\n          action: permit\n\n        - acl_name: ssh_acl\n          $group_domain: second\n          $group_traffic: ssh\n          action: deny\n\nIn the above example, data sets for domains and traffic types are defined as\ngroups.  These are being applied to the http_acl and ssh_acl templates using\n$group fields and referencing by group name.  The template will inherit all of\nthe values from any group that is referenced.  The result in this case is that\nhttp_acl is created in the first domain and permits http traffic (tcp port 80)\nand the ssh_acl is created in the second domain and denies ssh traffic (tcp\nport 22).\n\nGroup definitions can be children or have children.  However, they should only\ndefine one set of values.  The field name for group references must start with\nthe string \"$group\", but can have any suffix following it.  The purpose of the\nsuffix is to allow multiple group references without name collision.  Although\nany suffix can be specified, it is recommended to choose one that is\ndescriptive of the reference meaning.\n\n### Field and Value Lists\n\nAn alternative way of specifying values is by using a field list and set of value\nlists.  This format is similar to Comma Separated Values (CSV) data and\ncan efficiently specify a large amount of data.\n\n    - template: Acl\n      fields: ['acl_name', '$group_domain', 'protocol', 'port', 'action']\n      values:\n          -   ['acl1',     'first',         'tcp',      22,     'deny']\n          -   ['acl2',     'first',         'udp',      5000,   'permit']\n          -   ['acl3',     'second',        'tcp',      80,     'deny']\n          -   ['acl4',     'second',        'udp',      5002,   'permit']\n\nA fields list must be specified to define the field name for each position of\nthe value lists.  The values data sets must be specified as lists with the same\nlength as the fields list.\n\n## Listing Templates\n\nThe templates that have been loaded into the MetroAE config tool can be listed\nwith the following:\n\n    $ metroae config -tp sample/templates --list\n\n    Domain\n    Enterprise\n    Subnet\n    Zone\n\n## Generating User Data Examples\n\nAn example of user data for any template can be provided using the following:\n\n    metroae config example -tp sample/templates Domain\n\n    # First template set - Create a L3 Domain\n    - template: Domain\n      values:\n        - enterprise_name: \"\"                      # (reference)\n          domain_name: \"\"                          # (string)\n          description: \"\"                          # (opt string)\n          underlay_enabled: enabled                # (['enabled', 'disabled', 'inherited'])\n          address_translation: enabled             # (['enabled', 'disabled', 'inherited'])\n\n## Generating JSON Schemas\n\nA JSON schema can be generated for the user data required for any template.\nThese schemas conform to the json-schema.org standard specification:\n\n    metroae config schema -tp sample/templates Domain\n\n    {\n      \"title\": \"Schema validator for Nuage Metro config template Domain\",\n      \"$id\": \"urn:nuage-metro:config:template:domain\",\n      \"required\": [\n        \"enterprise_name\",\n        \"domain_name\",\n        \"underlay_enabled\",\n        \"address_translation\"\n      ],\n      \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"underlay_enabled\": {\n          \"enum\": [\n            \"enabled\",\n            \"disabled\",\n            \"inherited\"\n          ],\n          \"title\": \"Underlay enabled\"\n        },\n        \"address_translation\": {\n          \"enum\": [\n            \"enabled\",\n            \"disabled\",\n            \"inherited\"\n          ],\n          \"title\": \"Address translation\"\n        },\n        \"domain_name\": {\n          \"type\": \"string\",\n          \"title\": \"Domain name\"\n        },\n        \"enterprise_name\": {\n          \"type\": \"string\",\n          \"title\": \"Enterprise name\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"title\": \"Description\"\n        }\n      }\n    }\n\n## Query Tool\n\n### Description\n\nMetroAE config can be used as a generic data querying tool to extract\ninformation from devices.  At the time of this writing VSD and ES are\nsupported.  The tool uses a simple language to describe the data that is to be\nretrieved.  The data will be displayed to the screen in a YAML like format, but\nit could (in addition) be written to a file.  The results are also returned as\na Python list when using query tool as a library.\n\n### Usage\n\nThe query tool is used by specifying \"query\" as the action to `metroae_config`.\nThe parameters are mostly the same as other actions supported by\n`metroae_config`.  The VSD specification path `-sp` is required if querying a\nVSD.  The other VSD parameters (i.e. user, pass, URL, etc) also apply for\nquery in the same way as configuration creation actions.\n\nThe query tool also supports queries to ElasticSearch (ES).  In this case, a\nnew `-es` parameter has been added to specify the address of the ES to query.\n\nThe `query language` can be specified to the tool directly on the command-line\nfor easy manual use using the `-q` query parameter.  An example follows:\n\n    metroae config query -v https://localhost:8443 -q 'enterprise.name'\n\n    Device: Nuage Networks VSD 20.5.1\n    - Shared Infrastructure\n    - public\n    - private\n    >>> All actions successfully applied\n\nMultiple queries can be specified on a single line using semicolon `;`:\n\n    metroae config query -v https://localhost:8443 -q 'apps = SAASApplicationType.name; ents = enterprise.name'\n\n    Device: Nuage Networks VSD 20.5.1\n    apps:\n    - Office365\n    - SalesForce\n    - WebEx\n    ents:\n    - Shared Infrastructure\n    - public\n    - private\n    >>> All actions successfully applied\n\nThe language definition for query tool can also be specifed in a file to be\nread.  One or more of these files (or a directory containing .query files) can\nbe specifed on the command-line for the tool to read and execute each file.\nNewlines in files separate commands.  However, semicolons are still\nsupported in files as well.\n\n    example.query:\n\n    apps = SAASApplicationType.name\n    ents = enterprise.name\n\n    metroae config query -v https://localhost:8443 example.query\n\n    Device: Nuage Networks VSD 20.5.1\n    apps:\n    - Office365\n    - SalesForce\n    - WebEx\n    ents:\n    - Shared Infrastructure\n    - public\n    - private\n    >>> All actions successfully applied\n\n### Language Definition\n\nThe query tool uses a `query language` to specify the data to be reteived from\ndevices.  This language is intended to be simple to read and use and is easily\nextendable.\n\n#### General Formatting\n\nEach query to be performed is specified one per-line.  Alternatively and\nequivalently, semicolons `;` can be used to separate multiple queries on a\nsingle line.  Any query beginning with a hash `#` indicates a comment and will\nbe ignored.  Outside of strings, any whitespace is ignored.\n\n#### Data Retrieval\n\nData retrieval commands are specified by providing nested object names\nseparated by dot `.` with the attribute as the last identifier.  A retrieval\ntraverses all instances of each level of the specified object tree and returns\nthe attribute value for every instance found.\n\nThe result is always a flat list of the attribute values.  Any heirarchy is\nflattened.  If no results are found or there is an error (such as missing child\nobject) then an empty list is returned.  With this procedure, processing\nresults is consistent as there will always be a list.\n\nFor VSD:\n\n    Enterprise.Domain.Zone.Subnet.name\n\nThe above (reading from right to left) returns a list of the names from all\nsubnets under all zones under all domains under all enterprises.  For VSD\nqueries, each object is a configuration object specified by entity name.  The\nnames here are case-insensitve although note that case may matter for other\ndevices (like ES).\n\nFor ElasticSearch:\n\n    nuage_sysmon.disks.available\n\nThe above (reading from right to left) returns the available values for all\ndisks under the nuage_sysmon index.  For ES, the first object is the ES index\nand then subsequent object names traverse the JSON objects stored in each ES\nrecord.  Since ES encodes using JSON, the object names and attribures are all\ncase-sensitive as required by the format.\n\n#### Attributes\n\nThe last identifier on a data retrieval is the attribute.  It determines which\nvalue to extract from the objects traversed.  In previous examples, a single\nvalue was extracted, however multiple attributes can be gathered by specifying\na comma-separated list in curly braces `{}`.  When retrieving multiple\nattributes, the result becomes a list of dictionaries with key/value pairs\nfor each of the attributes.  A star `*` can be used to get all available\nattributes.\n\nSingle attribute:\n\n    Enterprise.name\n\n    - Shared Infrastructure\n    - public\n    - private\n\nMultiple attributes:\n\n    Enterprise.{name,id}\n\n    - name: Shared Infrastructure\n      id: abcd-0001\n    - name: public\n      id: abcd-0002\n    - name: private\n      id: abcd-0003\n\nAll attributes:\n\n    Enterprise.{*}\n\n    - name: Shared Infrastructure\n      id: abcd-0001\n      bgpenabled: false\n      dhcpleaseinterval: 24\n      (Whole bunch of stuff omitted for brevity...)\n    - name: public\n      id: abcd-0002\n      bgpenabled: false\n      dhcpleaseinterval: 24\n      (Whole bunch of stuff omitted for brevity...)\n    - name: private\n      id: abcd-0003\n      bgpenabled: false\n      dhcpleaseinterval: 24\n      (Whole bunch of stuff omitted for brevity...)\n\n#### Filters\n\nFilters can be applied to each object of the data retrieval.  Filters are\nenclosed by square brackets `[]` and are separated by and `&` characters.  The\nchoice of `&` as a separator enforces that filters are combined together as\nlogical AND operations.\n\nThe filter applies only to the level where it is specified.  The filters\nmanipulate the results from the level, usually by removing unwanted records.\nAny subsequent object levels would operate on the filtered list.  For example:\n\n    Enterprise[name=public].domain.name\n\nThe filter on enterprise will limit enterprise results to only a single\nenterprise object (with name `public`).  However, let's say the `public`\nenterprise had 10 domains.  Then the 10 name results for those domains would be\nreturned.\n\n##### Range Filter\n\nA range filter can be used to limit the start and max number of results at the\nlevel.  The filter has a start index and an end index separated by colon `:`.\nIndexes are 0-based positions of the list.  Thus 0 is the first and 4 would be\nthe 5th item in the list.  The items from the query are returned starting at\nthe start index and ending one before the end index.  Any range out of bounds\nof the results are omitted.  Thus if the start index is after the end of the\nresults, an empty list is returned.\n\nIf the start index is omitted, a value of 0 is assumed (start at beginning).\nIf the end index is omitted, then the entire remainder of the list is returned.\n\nA single index (without colon specified) can be used to return the single\nitem from the results at the specified index.  If this is out of bounds of the\nresults, an empty list is returned.\n\nNegative indicies are allowed and count from the end of the list.  Thus -1 is\nthe last item and -5 is the 5th from last.\n\nThe behavior of the range filter is exactly the same as Python list slicing.\n\n    Note that ES index queries do not support negative range indicies.  Use a\n    reverse sort and positive indicies instead.\n\nExamples using enterpises: `e1, e2, e3, e4, e5`\n\n    enterprise[1:5].name\n    - e2\n    - e3\n    - e4\n\n    enterprise[1:99].name\n    - e2\n    - e3\n    - e4\n    - e5\n\n    enterprise[:5].name\n    - e1\n    - e2\n    - e3\n    - e4\n\n    enterprise[3:].name\n    - e4\n    - e5\n\n    enterprise[99:].name\n    []\n\n    enterprise[3].name\n    - e4\n\n    enterprise[99].name\n    []\n\n    enterprise[-3:-1].name\n    - e3\n    - e4\n\n##### Attribute Filter\n\nObject results can be filtered by attribute values.  Only results where the\nfield value of the object matches the filter value will be returned.  The\nformat for these filters is the field name equal `=` value.  A list of values\ncan be provided enclosed in square brackets `[]` and separated by comma `,`.\nThis denotes that any result matching any of the list values will be returned.\n\nGiven these enterprises:\n\n    - name: e1\n      BGPEnabled: true\n    - name: e2\n      BGPEnabled: false\n    - name: e3\n      BGPEnabled: true\n\nThe following examples produce:\n\n    enterprise[BGPEnabled=true].name\n    - e1\n    - e3\n\n    enterprise[name=[e2, e3]].name\n    - e2\n    - e3\n\n    enterprise[name=[e2, e3] & BGPEnabled=false].name\n    - e2\n\n    enterprise[name=[e1, e3] & BGPEnabled=false].name\n    []\n\n##### Sort Filter\n\nThe sort filter can be used to sort the results by an object field.  Note that\nthe sorting occurs only at the level where it is specified.  If there are\nchild objects under a sort fitler the children would not be sorted, but they\nwould be queried in the parent's sorted order.\n\nSorting is specified by the `%sort=` keyword followed by the field name of the\nobject to sort by.  There is also `%sort_desc=` to sort in descending order.\n\nGiven these enterprises:\n\n    - name: e3\n      dhcpleaseinterval: 1\n    - name: e1\n      dhcpleaseinterval: 2\n    - name: e2\n      dhcpleaseinterval: 3\n\nThe following examples produce:\n\n    enterprise[%sort=name].name\n    - e1\n    - e2\n    - e3\n\n    enterprise[%sort=DHCPLeaseInterval].name\n    - e3\n    - e1\n    - e2\n\n    enterprise[%sort_desc=name].name\n    - e3\n    - e2\n    - e1\n\n##### Group Filter\n\nA group filter can be specified to combine together results by the value of\nanother field.  This makes it easier to identify subsets of results given that\nthe query tool collapses them all into flat lists.\n\nThe group filter is specified by `%group=` followed by the field name to group\nby.  When using groups, results are returned as a list of pairs.  The first\nitem of the pair is the group field value and the second is the list of results\nmatching the group field value.\n\nFor example, normally results are flattened and thus it is difficult to\ndetermine which domain goes with which enterprise:\n\n    enterprise.domain.name\n\n    - domain1\n    - domain2\n    - domain3\n    - domain4\n\nHowever, using grouping the relationships can be determined:\n\n    enterprise[%group=name].domain.name\n\n    - - public\n      - - domain1\n        - domain2\n        - domain3\n    - - private\n      - - domain4\n    - - Shared Infrastructure\n      - []\n\n#### Variables\n\nResults can be stored in variables for identification and use in later queries.\nVariables are restricted to C-like names which cannot start with a number and\ncan contain capital letters, lower case letters, numbers or underscore `_`.\n\nVariable assignments are performed by specifying the variable name then equal\n`=` then the expression or data type to store in the variable.  The output of\nassigments changes to a dictionary.\n\n    enterprise_names = enterprise.name\n\n    enterprise_names:\n    - public\n    - private\n    - Shared Infrastructure\n\nVariables are dynamically typed and can contain any data type.  More\ninformation about data types will be provided in a later section.  Variables\ncan be dereferenced in later queries by specifying dollar `$` and the variable\nname.  Variables that have been dereferenced but not yet defined will cause an\nerror.\n\nVariables can be filtered:\n\n    enterprises = enterprise.{name,id}\n\n    enterprises:\n    - name: public\n      id: abcd-0001\n    - name: private\n      id: abcd-0002\n\n    $enterprises[%sort=name]\n\n    - name: private\n      id: abcd-0002\n    - name: public\n      id: abcd-0001\n\n    $enterprises[%sort=name].id\n\n    - abcd-0002\n    - abcd-0001\n\nVariables can also be used as the values for filters:\n\n    enterprises = enterprise.name\n\n    enterprises:\n    - e1\n    - e2\n    - e3\n    - e4\n\n    start = 2\n\n    start: 2\n\n    $enterprises[$start:]\n    - e3\n    - e4\n\n    name = \"e2\"\n\n    name: e2\n\n    enterprise[name=$name].{name,id}\n    - name: e2\n      id: abcd-0002\n\nVariable values can be specified on the command-line using the `-d` option.\nThe format is variable name `=` value. i.e. `-d name=enterprise1`.  When\nvariables are defined on the command-line, they override any assignment\nwithin queries.  This allows defaults to be set inside query files and `-d` to\noverride with a specific value.\n\n#### Data Types\n\nThe query language defines various data types to be specified.  Variables are\ndynamically typed and can accept any of these types.\n\nStrings are defined enclosed with single `'` or double `\"` quotes.  Multi-line\nblocks can be defined using triple single `'''` or double `\"\"\"` quotes.\n\n    string = 'this is a string'\n    string = \"another has ' in it\"\n    multiline = \"\"\"\n    this has\n    multiple lines\n    \"\"\"\n\nNumbers can be specified as positive or negative integers.  Floating point\nnumbers are not supported.\n\n    integer = 42\n    negative = -4\n\nFor Booleans, `true` specifies true and `false` specifies false.\n\n    is_true = true\n    is_false = false\n\nLists can be formed using square brackets `[]` and separating items by comma\n`,`.  Lists can contain any of the above data types even in combinations.\nHowever, lists of lists are not supported.\n\n    enterprise_names = ['e1', 'e2', 'e3']\n\n#### Functions\n\nThere are a set of functions that can operate on expressions such as data\nretrieval or variables.  These come in the form of function name followed by\nthe expression enclosed in parens `()`.\n\nThe `count` function returns the number of items in a list.  An error is\nproduced if the expression provided to count is not a list.\n\n    names = enterprise.name\n\n    names:\n    - e1\n    - e2\n    - e3\n\n    count($names)\n    3\n\nThe `reverse` function returns the items of a list in backward order.  An error\nis produced if the expression provided to reverse is not a list.\n\n    reverse(enterprise.name)\n    - e3\n    - e2\n    - e1\n\n#### Combine\n\nThere is a `combine` operator which combines expressions together depending on\nthe data types.  The format is expression1 plus `+` expression2.  The\nexpressions can be variables, data type constants or data retrieval.\n\nIf both expressions are lists, then the combine operator will return a list\nwith all of the items of both.\n\n    names = enterprise.name\n\n    names:\n    - e1\n    - e2\n    - e3\n\n    $names + [\"new1\", \"new2\"]\n    - e1\n    - e2\n    - e3\n    - new1\n    - new2\n\nIf both expressions are integers, then the combine operator will add the\nvalues.\n\n    count(enterprise.name) + 1\n    4\n\nIf both expressions are strings, then the strings will be concatenated.\n\n    filename = \"output\"\n    filename: output\n\n    path = \"/tmp/\" + $filename + \".txt\"\n    path: /tmp/output.txt\n\nAny other combination of data types will result in an error from combine.\n\n#### Actions\n\nThere are a set of actions that can change the state of later queries or\nperform a task.  These come in the form of action name followed by a list of\ncomma-separated arguments enclosed in parens `()`.  Actions do not return any\nvalue and they cannot be part of an assignment or expression.\n\nThe `connect` action sets up a new session with a device.  All subsequent\nqueries are directed to the new device.  The first argument to connect is the\ndevice type, then the remaining parameters are specific to the device.  Using\nconnect allows data to be gathered from multiple sources in the same query\nexecution.\n\nFor VSD:\n\n    connect(\"VSD\", url, username, password, enterprise, cert_file, cert_key_file)\n\n    Where:\n        url (required)           : URL of VSD to connect to\n        username (optional)      : Username to be used to connect (default \"csproot\")\n        password (optional)      : Password to be used to connect (default \"csproot\")\n        enterprise (optional)    : Enterprise to be used to connect (default \"csp\")\n        cert_file (optional)     : Path to a certificate file (instead of password)\n        cert_key_file (optional) : Path to a certificate key file (required if cert_file specified)\n\nFor ElasticSearch:\n\n    connect(\"ES\", address, port)\n\n    Where:\n        address (required) : Address of ElasticSearch to connect to\n        port (optional)    : Port of ElasticSearch (default 9200)\n\nThe `redirect_to_file` action causes all subsequent queries to write results\nto the specified file in addition to echoing to the screen.\n\n    redirect_to_file(\"/tmp/output.txt\")\n\nThe `echo` action turns on and off the printing of output of subsequent queries\nto the screen.  This only affects the display of the queries and they still\noperate normally in all other ways.  Variables would still be assigned and\noutput would still be written to file if redirected.  Echoing is on by default.\nit can be turned off with the string `off` and turned back on with the string\n`on`.  Disabling echoing is useful when huge amounts of data are expected to be\nreturned but it would clutter the screen.\n\n    echo(\"off\")\n\nThe `output` action turns on and off the writing of results to the screen,\nredirect file and Python returned results.  Variables are still assigned when\noutput is off.  Turning off output is useful for gathering all intermediate\nvariables and then turning it on to write out a single final report.  Output is\non by default.  It can be turned off with the string `off` and turned back on\nwith the string `on`.\n\n    output(\"off\")\n\nThe `render_template` action outputs the text of a variable substituted\ntemplate.  The action takes a [Python Jinja](https://jinja.palletsprojects.com/en/2.11.x/)\ntemplate string as an argument.  Jinja templates contain tags enclosed by\ndouble curly braces `{{` `}}` that reference variables to be substituted into\nthe text.  The variables assigned from queries are all available to be injected\ninto the text output.  Jinja templates support loops, conditionals, math and\nother filters.  See the [Python Jinja](https://jinja.palletsprojects.com/en/2.11.x/)\ndocumentation for more. Using Jinja templates, many file formats can be output\nincluding nice text reports, HTML pages, CSV or JSON.\n\nThe `render_yaml_template` action is exactly the same as `render_template`\nexcept that substituted variables are formatted properly for YAML/JSON output.\nFor example strings are quoted, booleans are converted to true/false, etc.\n\nExample query file:\n\n    output(\"off\")\n\n    connect(\"VSD\", \"https://localhost:8443\")\n\n    report_file = \"report.txt\"\n    ent_names = enterprise.name\n    ent_count = count($ent_names)\n    licenses_expires = License.expirytimestamp\n\n    template = \"\"\"============== VSD Health Report ===========\n    VSD:\n        Enterprises: {{ ent_names | join(', ') }} ({{ ent_count }})\n        License expiry: {{ ((licenses_expires[0] / 1000 - now) / (3600 * 24)) | int }} days\n    ===========================================\n    \"\"\"\n\n    redirect_to_file($report_file)\n    output(\"on\")\n    render_template($template)\n\nResulting output to `report.txt`:\n\n    ============== VSD Health Report ===========\n    VSD:\n        Enterprises: public, private, Shared Infrastructure (3)\n        License expiry: 90 days\n    ===========================================\n\n\n## Python Library API\n\nThe MetroAE Config engine is written entirely using Python.  It can be integrated\ninto other Python-based tools using the library APIs via the pip package\n`nuage-metroae-config`.  The following sections describe the use of the APIs.\n\n### Template Store Class\n\nThe `TemplateStore` class is a repository for all of the templates loaded into\nthe engine.  It will be used by the `Configuration` class to apply template\nactions to a device via a `DeviceWriterBase` class.\n\nfrom nuage_metroae_config.template import TemplateStore\n\n    Reads and parses configuration templates.\n\n- read_templates(path_or_file_name)\n\n        Reads and parses templates from either all templates in a\n        directory path, or a single template specified by filename.\n        Both yaml (.yml) and JSON (.json) files are supported.\n\n- add_template(template_string, filename=None)\n\n        Parses the specified string as a template in Yaml or JSON format.\n\n- get_template_names(software_type=None, software_version=None)\n\n        Returns a list of all template names currently loaded in store.\n        If software_version and/or software_type is provided, names will\n        be filtered by the specified version/type.\n\n- get_template(name, software_type=None, software_version=None)\n\n        Returns a Template object of the specified name.  If software_version\n        and/or software_type is provided, template of specified version/type\n        will be returned.\n\n### Template Class\n\nThe `Template` class is a read-only class which provides information about a\ntemplate that was read in via the `TemplateStore`.\n\nfrom nuage_metroae_config.template import Template\n\n    Configuration template.  This class is read-only.\n\n- get_name()\n\n        Returns the name of this template.\n\n- get_template_version()\n\n        Returns the template version\n\n- get_software_version()\n\n        Returns a dictionary of {\"software_version\": \"xxx\", \"software_type\": \"xxx\"}\n\n- get_schema()\n\n        Returns the schema for the template variables in json-schema form.\n\n- get_example()\n\n        Returns example user-data for template variables in YAML format.\n\n- get_documentation()\n\n        Returns template documentation in MarkDown format.\n\n- validate_template_data(template_data)\n\n        Validates that the template_data provided matches the variables schema.\n        Returns True if ok, otherwise an exception is raised.\n\n### VSD Writer Class\n\nThe `VsdWriter` class is a derived class of the `DeviceWriterBase` that applies\nconfiguration to a Nuage Networks VSD.  The writers are modular such that\nnew devices could be configured by defining derived device writer classes based\noff of the common `DeviceWriterBase` base class.  The remainder of the engine\nAPIs use the generic base class.  This provides great extendability to\nconfigure many different devices.  Note that the `VsdWriter` class also acts as\na reader for the `Query` class.\n\nfrom nuage_metroae_config.vsd_writer import VsdWriter\n\n    Writes configuration to a VSD.  This class is a derived class from\n    the DeviceWriterBase Abstract Base Class.\n\n- set_session_params(url, username=\"csproot\", password=None, enterprise=\"csp\", certificate=None)\n\n        Sets the parameters necessary to connect to the VSD.  This must\n        be called before writing or an exception will be raised.\n\n- get_version():\n\n        Returns the version running on the VSD in format:\n            {\"software_version\": \"xxx\", \"software_type\": \"xxx\"}\n\n- set_software_version(software_version):\n\n        Sets the software version of the VSD.  This can be obtained via the\n        get_version() method to get from the VSD itself or overwriten\n        to a specific value.\n\n- read_api_specifications(path_or_file_name):\n\n        Reads the VSD configuration API specifications from JSON files\n        in the specified path or file name.  This must be called before\n        writing or an exception will be raised.\n\n- set_logger(logger):\n\n        Set a custom logger for actions taken.  This should be based on the\n        logging Python library.  It will need to define an 'output' log level\n        which is intended to print to stdout.\n\n### User Data Parser Class\n\nThe `UserDataParser` class parses the YAML-based user-data format defined in\nthe `User Data` section of this document.  It is able to return the data in\ntemplate_name/data_dictionary pairs.  This data can be fed into the\n`Configuration` class to render templates and apply configuration.\n\nfrom nuage_metroae_config.user_data_parser import UserDataParser\n\n    Parses Yaml or JSON files containing template user data\n\n- read_data(path_or_file_name):\n\n        Reads and parses user data from either all files in a\n        directory path, or a single file specified by filename.\n        Both yaml (.yml) and JSON (.json) files are supported.\n\n- add_data(user_data_string):\n\n        Parses the specified string as user data in Yaml or JSON format.\n\n- get_template_name_data_pairs():\n\n        Returns parsed data as a list of (template_name, data_dict) pairs.\n\n### Configuration Class\n\nThe `Configuration` class puts all the above pieces together to configure a\ndevice.  It requires a `TemplateStore` object with loaded templates.  User data\nis applied to the `Configuration` object which can be taken directly from the\n`UserDataParser` class or from pure Python data via another source.  Finally,\nthe configuration is applied, updated or reverted to a device using one of the\nderived writer classes.\n\nfrom nuage_metroae_config.configuration import Configuration\n\n    Container for template instances.\n\n- set_software_version(software_type=None, software_version=None)\n\n        Sets the current software version of templates that is desired.\n        If not called, the latest software version of templates will be\n        used.\n\n- add_template_data(template_name, template_data)\n\n        Adds template data (user data) for the specified template name.\n        Data is specified in a kwargs dictionary with keys as the\n        attribute/variable name.  The data is validated against the\n        corresponding template schema.  An id is returned for reference.\n\n- apply(writer)\n\n        Applies this configuration to the provided device\n        writer.  Returns True if ok, otherwise an exception is\n        raised.\n\n- update(writer)\n\n        Applies this configuration to the provided device\n        writer as an update.  This means objects that exist will\n        not be considered conflicts.  Returns True if ok, otherwise\n        an exception is raised.\n\n- revert(writer)\n\n        Reverts (removes or undo) this configuration from the\n        provided device writer.  Returns True if ok, otherwise\n        an exception is raised.\n\n- set_logger(logger):\n\n        Set a custom logger for actions taken.  This should be based on the\n        logging Python library.  It will need to define an 'output' log level\n        which is intended to print to stdout.\n\n### Query Class\n\nThe `Query` class allows information to be retrieved from a device through\ndevice readers based on the `DeviceReaderBase`.  Note that the `VsdWriter`\nclass is also a reader derived off of this base and can be used for query.  The\ninformation to be retrieved is defined by a \"query language\" which is described\nin the `Language Definition` section of this document.  Results are returned\nfrom the `execute()` of the query language text.  Also, any variables set during\nthe query can be retrieved with `get_variables()`.\n\nfrom nuage_metroae_config.query import Query\n\n    A class which can retrieve information from a device using a\n    DeviceReaderBase reader object.  The information to be retrieved is defined\n    by query language text.\n\n- set_reader(reader)\n\n        Set the primary reader object for performing queries on the device.\n        The reader needs to be derived from the DeviceReaderBase class.\n\n- get_variables()\n\n        Returns a dictionary of all variables and values set during queries.\n\n- register_reader(reader_type, reader)\n\n        Register a reader object for each 'connect' type for performing queries\n        on the device.  This allows devices to be switched within the query\n        text.  The readers need to be derived from the DeviceReaderBase class.\n\n- add_query_file(path_or_file_name)\n\n        Reads and parses query sets from either all query files in a\n        directory path, or a single query file specified by filename.\n        Query files are expected to have .query extension\n\n- execute(query_text=None, override_variables)\n\n        Executes the query defined in query_text.  Variables in the query\n        text can be overriden using the override_variables kwargs dict.  The\n        results of the query are returned as a list with an entry for each\n        query text line.  If query_text is None, then query text is pulled\n        from query files defined by add_query_file.\n\n- set_logger(logger)\n\n        Set a custom logger for actions taken.  This should be based on the\n        logging Python library.  It will need to define an 'output' log level\n        which is intended to print to stdout.\n\n### ES Reader Class\n\nThe `EsReader` class can be used as another reader with the `Query` class.  It\nis derived from the `DeviceReaderBase` class and can retrieve information from\nElasticSearch.\n\nfrom nuage_metroae_config.es_reader import EsReader\n\n    Performs queries on ElasticSearch.  This class is a derived class from\n    the DeviceReaderBase Abstract Base Class.\n\n- set_session_params(address, port=None):\n\n        Sets the parameters necessary to connect to the ES.  This must\n        be called before reading or an exception will be raised.\n\n## Library API Example - Config\n\n    from nuage_metroae_config.configuration import Configuration\n    from nuage_metroae_config.template import TemplateStore\n    from nuage_metroae_config.user_data_parser import UserDataParser\n    from nuage_metroae_config.vsd_writer import VsdWriter\n\n    ENGINE_VERSION = \"1.1.0\"\n    VSD_API_SPEC_PATH = \"./vsd-api-specifications\"\n    TEMPLATE_PATH = \"./templates\"\n    USER_DATA_PATH = \"./user_data\"\n    VSD_URL = \"https://10.0.0.1:8443\"\n    VSD_USERNAME = \"username\"\n    VSD_PASSWORD = \"password\"\n    VSD_ENTERPRISE = \"csp\"\n\n\n    def setup_template_store(template_path):\n        store = TemplateStore(ENGINE_VERSION)\n\n        store.read_templates(template_path)\n\n        return store\n\n\n    def setup_vsd_writer(vsd_url):\n        vsd_writer = VsdWriter()\n        vsd_writer.add_api_specification_path(VSD_API_SPEC_PATH)\n\n        vsd_writer.set_session_params(vsd_url,\n                                      username=VSD_USERNAME,\n                                      password=VSD_PASSWORD,\n                                      enterprise=VSD_ENTERPRISE)\n\n        device_version = vsd_writer.get_version()\n        vsd_writer.set_software_version(device_version)\n\n        return vsd_writer\n\n\n    def setup_configuration(template_store, user_data_path):\n        config = Configuration(template_store)\n\n        parser = UserDataParser()\n        template_data_pairs = parser.read_data(user_data_path)\n\n        for data in template_data_pairs:\n            template_name = data[0]\n            template_data = data[1]\n            config.add_template_data(template_name, **template_data)\n\n        return config\n\n\n    # Setup\n    template_store = setup_template_store(TEMPLATE_PATH)\n    vsd_writer = setup_vsd_writer(VSD_URL)\n    config = setup_configuration(template_store, USER_DATA_PATH)\n\n    # Apply the configuration from user data\n    config.apply(vsd_writer)\n\n    # Revert the configuration from user data\n    config.revert(vsd_writer)\n\n\n## Library API Example - Query\n\n    from nuage_metroae_config.es_reader import EsReader\n    from nuage_metroae_config.query import Query\n    from nuage_metroae_config.vsd_writer import VsdWriter\n\n    VSD_API_SPEC_PATH = \"./vsd-api-specifications\"\n    VSD_URL = \"https://10.0.0.1:8443\"\n    VSD_USERNAME = \"username\"\n    VSD_PASSWORD = \"password\"\n    VSD_ENTERPRISE = \"csp\"\n\n    ES_ADDRESS = \"10.0.0.2\"\n    ES_PORT = 9200\n\n\n    def setup_vsd_query_tool(vsd_url):\n        vsd_reader = VsdWriter()\n        vsd_reader.add_api_specification_path(VSD_API_SPEC_PATH)\n\n        vsd_reader.set_session_params(vsd_url,\n                                      username=VSD_USERNAME,\n                                      password=VSD_PASSWORD,\n                                      enterprise=VSD_ENTERPRISE)\n\n        device_version = vsd_writer.get_version()\n        vsd_reader.set_software_version(device_version)\n\n        vsd_query = Query()\n        vsd_query.set_reader(vsd_reader)\n\n        return vsd_query\n\n\n    def setup_es_query_tool(es_address):\n        es_reader = EsReader()\n        es_reader.set_session_params(es_address, ES_PORT)\n\n        es_query = Query()\n        es_query.set_reader(es_reader)\n\n        return es_query\n\n\n    def get_subnetwork_usage(vsd_query):\n\n        query_string = \"\"\"\n        subnets = Enterprise.Domain.Zone.Subnet.{name, netmask}\n        zones = Enterprise.Domain.Zone[%group=name].Subnet.{name, netmask}\n        d_count = count(Enterprise.Domain)\n        s_count = count(Enterprise.Domain.Zone.Subnet)\n        z_count = count(Enterprise.Domain.Zone)\n        \"\"\"\n        vsd_query.execute(query_string)\n\n        results = vsd_query.get_variables()\n\n        domain_dict = dict()\n        domain_dict_agg = dict()\n\n        # [{\"name\": <subnet_name>, \"netmask\": <netmask>}, ...]\n        domain_dict[\"subnets\"] = results[\"subnets\"]\n        # [[<zone_name>, [{\"name\": <subnet_name>, \"netmask\": <netmask>}, ...]], ...]\n        domain_dict[\"zones\"] = results[\"zones\"]\n        domain_dict_agg[\"d_count\"] = results[\"d_count\"]\n        domain_dict_agg[\"s_count\"] = results[\"s_count\"]\n        domain_dict_agg[\"z_count\"] = results[\"z_count\"]\n\n        return domain_dict, domain_dict_agg\n\n\n    def get_enterprises_with_alarms(vsd_query):\n\n        query_string = \"\"\"\n        Enterprise[%group=name].Alarm[severity=\"CRITICAL\"].description\n        \"\"\"\n        results = vsd_query.execute(query_string)\n\n        # [[<enterprise_name>, [{\"description\": <alarm_descr>}, ...]], ...]\n\n        enterprises_with_critical_alarms = dict()\n        count = 0\n\n        for result in results:\n            ent_name = result[0]\n            alarms = result[1]\n            if len(alarms) > 0:\n                enterprises_with_critical_alarms[ent_name] = alarms\n                count += 1\n\n        enterprises_with_critical_alarms['total_enterprises_with_alarms'] = count\n\n        return enterprises_with_critical_alarms\n\n\n    # Setup query\n    vsd_query = setup_vsd_query_tool(VSD_URL)\n\n    # Perform queries\n    domain_dict, domain_dict_agg = get_subnetwork_usage(vsd_query)\n    enterprises_with_critical_alarms = get_enterprises_with_alarms(vsd_query)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nuagenetworks/nuage-metroae-config",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nuage-metroae-config",
    "package_url": "https://pypi.org/project/nuage-metroae-config/",
    "platform": "",
    "project_url": "https://pypi.org/project/nuage-metroae-config/",
    "project_urls": {
      "Homepage": "https://github.com/nuagenetworks/nuage-metroae-config"
    },
    "release_url": "https://pypi.org/project/nuage-metroae-config/1.1.0/",
    "requires_dist": [
      "bambou",
      "Jinja2",
      "lark-parser",
      "PyYAML"
    ],
    "requires_python": ">=2.7",
    "summary": "Template-based configuration tool for Nuage Networks VSD",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9676337,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4679f7d5e2163883c0db3730784699164715d9050f74639851569bf788e7dffb",
          "md5": "2fedb4691133ae6d8d639f9805164d84",
          "sha256": "88e1cf7dde2a204cacb9f8a241171d397435ab8cd4f13522a7404d390d1bce4e"
        },
        "downloads": -1,
        "filename": "nuage_metroae_config-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fedb4691133ae6d8d639f9805164d84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 59726,
        "upload_time": "2020-12-30T14:40:38",
        "upload_time_iso_8601": "2020-12-30T14:40:38.685570Z",
        "url": "https://files.pythonhosted.org/packages/46/79/f7d5e2163883c0db3730784699164715d9050f74639851569bf788e7dffb/nuage_metroae_config-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ad8970eabac60785d69378a625f131eab9de7659104f19d317312e6ff9fb17e",
          "md5": "aa4bd04d8cdc604c115f7873ee9fe847",
          "sha256": "d9f79a659642c1003362e513054be4ef0bafae9f11b7df77dbb30a5f210a6fed"
        },
        "downloads": -1,
        "filename": "nuage-metroae-config-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aa4bd04d8cdc604c115f7873ee9fe847",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 78297,
        "upload_time": "2020-12-30T14:40:39",
        "upload_time_iso_8601": "2020-12-30T14:40:39.944800Z",
        "url": "https://files.pythonhosted.org/packages/4a/d8/970eabac60785d69378a625f131eab9de7659104f19d317312e6ff9fb17e/nuage-metroae-config-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fa4dee79bced776771d14d51cbd77eb93df384e267a6376585720429cef709e",
          "md5": "658e8034d52fd6a87a2ba751876586c9",
          "sha256": "1d01b0ae0bf0468cc7125ca6ef54758b9002c33ee805d01377fdd490963dde44"
        },
        "downloads": -1,
        "filename": "nuage_metroae_config-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "658e8034d52fd6a87a2ba751876586c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 60343,
        "upload_time": "2021-03-05T16:20:29",
        "upload_time_iso_8601": "2021-03-05T16:20:29.055024Z",
        "url": "https://files.pythonhosted.org/packages/4f/a4/dee79bced776771d14d51cbd77eb93df384e267a6376585720429cef709e/nuage_metroae_config-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8487d05b302d182f523654f1894660aa7f6fac75443a094e5f66987c47265ad6",
          "md5": "574dac4500e8dd9ecbbbb02d3688c919",
          "sha256": "6889e8648164a1796eb51ea56a17f21ee0fd7cc04e570fa3eb708ca164ba902f"
        },
        "downloads": -1,
        "filename": "nuage-metroae-config-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "574dac4500e8dd9ecbbbb02d3688c919",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 79096,
        "upload_time": "2021-03-05T16:20:30",
        "upload_time_iso_8601": "2021-03-05T16:20:30.360298Z",
        "url": "https://files.pythonhosted.org/packages/84/87/d05b302d182f523654f1894660aa7f6fac75443a094e5f66987c47265ad6/nuage-metroae-config-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fa4dee79bced776771d14d51cbd77eb93df384e267a6376585720429cef709e",
        "md5": "658e8034d52fd6a87a2ba751876586c9",
        "sha256": "1d01b0ae0bf0468cc7125ca6ef54758b9002c33ee805d01377fdd490963dde44"
      },
      "downloads": -1,
      "filename": "nuage_metroae_config-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "658e8034d52fd6a87a2ba751876586c9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7",
      "size": 60343,
      "upload_time": "2021-03-05T16:20:29",
      "upload_time_iso_8601": "2021-03-05T16:20:29.055024Z",
      "url": "https://files.pythonhosted.org/packages/4f/a4/dee79bced776771d14d51cbd77eb93df384e267a6376585720429cef709e/nuage_metroae_config-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8487d05b302d182f523654f1894660aa7f6fac75443a094e5f66987c47265ad6",
        "md5": "574dac4500e8dd9ecbbbb02d3688c919",
        "sha256": "6889e8648164a1796eb51ea56a17f21ee0fd7cc04e570fa3eb708ca164ba902f"
      },
      "downloads": -1,
      "filename": "nuage-metroae-config-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "574dac4500e8dd9ecbbbb02d3688c919",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 79096,
      "upload_time": "2021-03-05T16:20:30",
      "upload_time_iso_8601": "2021-03-05T16:20:30.360298Z",
      "url": "https://files.pythonhosted.org/packages/84/87/d05b302d182f523654f1894660aa7f6fac75443a094e5f66987c47265ad6/nuage-metroae-config-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}