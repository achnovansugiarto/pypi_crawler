{
  "info": {
    "author": "YF",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Home Automation"
    ],
    "description": "# Zone API - an alternative approach to writing rules\nIn OpenHab, items are defined in a flat manner in the *.items* files under the */etc/openhab/items folder*.\nThey are typically linked to a channel exposed by the underlying hardware.\nThis flat structure has an impact on how rules (whether in Xtend or Jython) are organized. As there\nis no higher level abstraction, rules tend to listen to changes from the specific devices. When the\nrules need to interact with multiple devices of the same type, they can utilize the \n[group concept](https://www.openhab.org/docs/configuration/items.html#groups). An example of good\nusage of group is to turn off all lights. By linking all smart lights to a group switch, turning off\nall the lights can be done by changing the state of the group switch to OFF.\n                                                                                \nWhat is more tricky is when rules need to interact with different devices within the same area. The\ntypical solution is to group unrelated items that belong to the same zone either by using a naming\npattern, or by dedicated groups. For example, the light switch and motion sensor in the Foyer area\ncan be named like this: \"FF_Foyer_Light\", and \"FF_Foyer_MotionSensor\". When a sensor is triggered,\nthe zone can be derived from the name of the triggering item, and other devices/sensors can be\nretrieved using that naming convention. This works but as there is not sufficient abstraction, the\nrules are highly coupled to the naming pattern.\n                                                                                \nThe [Zone API](https://github.com/yfaway/zone-apis) provides another approach. It is a layer\nabove the devices / sensors. Each [ZoneManager](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/immutable_zone_manager.py)\n(i.e. a house) contains multiple [zones](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/zone.py)\n(i.e. rooms), and each zone contains multiple [devices](https://github.com/yfaway/zone-apis/tree/master/src/zone_api/core/devices).\nEach zone is associated with a set of [actions](https://github.com/yfaway/zone-apis/tree/master/src/zone_api/core/actions) \nthat are triggered by certain [events](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/zone_event.py).\nThe usual OpenHab events are routed in this manner:\n\n```\nOpenHab events --> ZoneManager --> Zones --> Actions\n```\n\nThe actions operate on the abstract devices and do not concern about the naming of the items or\nthe underlying hardware. They replace the traditional OpenHab rules. Actions can be unit-tested with\nvarious levels of mocking.\n\n**Most importantly, it enables reusing of action logics.** There is no need to reinvent the wheels for \ncommon rules such as turning on/off the lights. All ones need to do is to populate the zones and\ndevices / sensors, and the applicable actions will be added and processed automatically.\n\nZoneApi comes with a set of built-in [actions](https://github.com/yfaway/zone-apis/tree/master/src/zone_api/core/actions).\nThere is no need to determine what action to add to a system. Instead, they are added automatically based on the\nzones structure and based on the type of devices available in each zone.\n\nHere is a sample info log that illustrate the structure of the managed objects.\n```text\nZone: Kitchen, floor: FIRST_FLOOR, internal, displayIcon: kitchen, displayOrder: 3, 7 devices\n  AstroSensor: VT_Time_Of_Day                                                   \n  HumiditySensor: FF_Kitchen_Humidity                                           \n  IlluminanceSensor: FF_Kitchen_LightSwitch_Illuminance                         \n  Light: FF_Kitchen_LightSwitch, duration: 5 mins, illuminance: 8               \n  MotionSensor: FF_Kitchen_SecurityMotionSensor, battery powered                \n  MotionSensor: FF_Kitchen_LightSwitch_PantryMotionSensor, battery powered      \n  TemperatureSensor: FF_Kitchen_Temperature                                     \n                                                                                \n  Action: HUMIDITY_CHANGED -> AlertOnHumidityOutOfRange                         \n  Action: MOTION -> TurnOnSwitch                                                \n  Action: MOTION -> AnnounceMorningWeatherAndPlayMusic                          \n  Action: MOTION -> PlayMusicAtDinnerTime                                       \n  Action: SWITCH_TURNED_ON -> TurnOffAdjacentZones                              \n  Action: TEMPERATURE_CHANGED -> AlertOnTemperatureOutOfRange                   \n  Action: TIMER -> TellKidsToGoToBed                                            \n                                                                                \n  Neighbor: FF_Foyer, OPEN_SPACE                                                \n  Neighbor: FF_GreatRoom, OPEN_SPACE_MASTER\nZone: Foyer, floor: FIRST_FLOOR, internal, displayIcon: groundfloor, displayOrder: 4, 6 devices\n  AlarmPartition: FF_Foyer_AlarmPartition, armMode: ARM_STAY                    \n  AstroSensor: VT_Time_Of_Day                                                   \n  Door: FF_Foyer_Door                                                           \n  Light: FF_Foyer_LightSwitch, duration: 5 mins, illuminance: 8, no premature turn-off time range: 0-23:59\n  MotionSensor: FF_Foyer_LightSwitch_ClosetMotionSensor, battery powered        \n  MotionSensor: FF_Foyer_LightSwitch_MotionSensor, battery powered              \n                                                                                \n  Action: MOTION -> TurnOnSwitch                                                \n  Action: MOTION -> DisarmOnInternalMotion                                      \n  Action: MOTION -> ManagePlugs                                                 \n  Action: PARTITION_ARMED_AWAY -> ChangeThermostatBasedOnSecurityArmMode        \n  Action: PARTITION_ARMED_AWAY -> ManagePlugs                                   \n  Action: PARTITION_ARMED_AWAY -> TurnOffDevicesOnAlarmModeChange               \n  Action: PARTITION_DISARMED_FROM_AWAY -> ChangeThermostatBasedOnSecurityArmMode\n  Action: PARTITION_DISARMED_FROM_AWAY -> ManagePlugs                           \n  Action: PARTITION_DISARMED_FROM_AWAY -> TurnOffDevicesOnAlarmModeChange       \n  Action: SWITCH_TURNED_ON -> TurnOffAdjacentZones                              \n  Action: TIMER -> ArmStayIfNoMovement                                          \n  Action: TIMER -> ArmStayInTheNight                                            \n  Action: TIMER -> ManagePlugs                                                  \n                                                                                \n  Neighbor: SF_Lobby, OPEN_SPACE                                                \n  Neighbor: FF_Office, OPEN_SPACE_MASTER \n```\n\n\n**Running on top of HABApp but with minimal dependency:**\n> [The original Zone API modules](https://github.com/yfaway/openhab-rules/tree/master/legacy-jython-code)\n> were written in Jython. It was recently migrated over to the [HABApp](https://habapp.readthedocs.io/en/latest/installation.html)\n> framework with minimal changes needed to the core code. See [here](https://community.openhab.org/t/habapp-vs-jsr223-jython/112914)\n> for the comparison between HABApp and JSR223 Jython.\n> \n> There are 3 peripheral modules that are tightly coupled to the HABApp API. The rest of the modules\n> is framework neutral. It is possible to migrate Zone API to another framework running on top of GravVM when \n> it is available. Zone API is now written in Python 3 and thus is not compatible with Jython\n> (equivalent to Python 2.8).\n\n# Set up your home automation system with zone_api\n\n## 1. Name the OpenHab items using the default naming convention\n```Zone_api``` comes with a default parser that builds the zone manager using a pre-defined naming convention. See the\nZoneParser section at the end of this page for details.\n\nHere are a few sample .items files. Note that the file organization doesn't matter; all items can be defined in a single \nfile if desired.\n\n**zones.items**: defines two zones and their relationship.\n```csv\nString Zone_Office                                                                                  \n  { level=\"FF\", displayIcon=\"office\", displayOrder=\"2\",                                             \n    openSpaceSlaveNeighbors=\"FF_Foyer\" }\n    \nString Zone_Foyer                                                                                   \n  { level=\"FF\", displayIcon=\"groundfloor\", displayOrder=\"4\",                                        \n    openSpaceMasterNeighbors=\"FF_Office\",                                                           \n    openSpaceNeighbors=\"SF_Lobby\" }\n```\n\n**foyer.items**: defines the items in the Foyer zone.\n```csv\nSwitch FF_Foyer_LightSwitch \"Foyer Light\" (gWallSwitch, gLightSwitch, gFirstFloorLightSwitch)       \n  { channel=\"zwave:device:9e4ce05e:node2:switch_binary\",                                            \n    disableMotionTriggeringIfOtherLightIsOn=\"FF_Office_LightSwitch\",                                \n    durationInMinutes=\"5\"}                                                                          \nSwitch FF_Foyer_LightSwitch_ClosetMotionSensor \"Foyer Closet Motion Sensor\"                         \n  (gWallSwitchMotionSensor)                                                                         \n  { channel=\"mqtt:topic:myBroker:xiaomiMotionSensors:FoyerMotionSensor\"}                            \n```\n\n**office.items**: defines the items in the Office zone.\n```csv\nSwitch FF_Office_LightSwitch \"Office Light\" (gWallSwitch, gLightSwitch, gFirstFloorLightSwitch)     \n  [shared-motion-sensor]                                                                            \n  { channel=\"zwave:device:9e4ce05e:node8:switch_binary\",                                            \n    durationInMinutes=\"15\" }                                                                        \nSwitch FF_Office_LightSwitch_MotionSensor \"Office Motion Sensor\"                                    \n  (gWallSwitchMotionSensor, gFirstFloorMotionSensors)                                               \n  { channel=\"mqtt:topic:myBroker:xiaomiMotionSensors:OfficeMotionSensor\"} \n```\n\nThat's it. Once the system is fully set up, ZoneApi's default actions will be registered automatically depending on\nthe available devices.\n\nIn the example above, the two zones have light switches and motion sensor. Thus the light rule is applicable and will\nautomatically turn on the light when a motion sensor is triggered, and turn it off if there is no activity for the\npre-defined duration. It will also turn off lights in the dependent zones.\n\n## 2. Clone this repository\n```git clone git@github.com:yfaway/zone-apis.git```\n\n## 3. Install, configure, and run HABapp\n\nRefer to the instructions on the [official HABApp website](https://habapp.readthedocs.io/en/latest/installation.html). The instruction below is specifically for the zone_api.\n```bash\n  sudo apt-get install python3-venv # to install python3-venv library\n  cd zone_api # the cloned project in the section above\n  python3 -m venv .\n  source bin/activate # to get into our virtual environment\n  python3 -m pip install --upgrade pip # to upgrade the pip library.\n  python3 -m pip install habapp request schedule # request and schedule are required by zone_api\n```\n\nTo manually run HABApp, execute this command within the ```zone_api``` folder:\n```bash\n  ./bin/habapp --config ./habapp/config.yml\n```\n\nThe ```./habapp/rules``` folder contains the bootstrap [rule](https://github.com/yfaway/zone-apis/blob/master/habapp/rules/configure_zone_manager.py) to initialize the ```zone_api``` framework.\nThe rule is pretty simple with its entire content below.\n\n```python\nimport HABApp\n\nfrom zone_api import zone_parser as zp\nfrom zone_api.core.devices.activity_times import ActivityType, ActivityTimes\n\nclass ConfigureZoneManagerRule(HABApp.Rule):\n    def __init__(self):\n        super().__init__()\n\n        self.run_soon(self.configure_zone_manager)\n\n    # noinspection PyMethodMayBeStatic\n    def configure_zone_manager(self):\n        time_map = {\n            ActivityType.WAKE_UP: '6 - 9',\n            ActivityType.LUNCH: '12:00 - 13:30',\n            ActivityType.QUIET: '14:00 - 16:00, 20:00 - 22:59',\n            ActivityType.DINNER: '17:50 - 20:00',\n            ActivityType.SLEEP: '23:00 - 7:00',\n            ActivityType.AUTO_ARM_STAY: '20:00 - 2:00',\n            ActivityType.TURN_OFF_PLUGS: '23:00 - 2:00',\n        }\n        zone_manager = zp.parse(ActivityTimes(time_map))\n\nConfigureZoneManagerRule()\n```\nThe code above defines an ActivityTimes object with various activity time periods and pass it over\nto the [zone_parser](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/zone_parser.py)\nmodule. The zone_parser parses the OpenHab items following a specific naming pattern, and construct\nthe zones and the devices / sensors. It then registers the handlers for the events associated with\nthe devices / sensors. Finally, it loads all the actions and add them to the zones based on the\npre-declared execution rules associated with each action (more on this later). That's it; from this point\nforward, events generated by the devices / sensors will trigger the associated actions.\n\nIt is important to note that the zone_parser is just a default mechanism to build the ZoneManager.\nA custom module can be used to parse from a different naming pattern for the OpenHab items, or the ZoneManager can\nbe constructed manually. The role of the parser is no longer needed once the ZoneManager has been\nbuilt.\n\n# ZoneManager\nContains a set of zones and is responsible for dispatching the events to the zones.\n\n# Zone\nContains a set of devices, actions, and is responsible for dispatching the events to the actions.\n\nA zone is aware of its neighbors. Certain rules such as the [turning on/off of the lights](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/actions/turn_on_switch.py)\nis highly dependent on the layout of the zones. The following [neighbor](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/neighbor.py)\ntypes are available.\n1. ```CLOSED_SPACE```\n2. ```OPEN_SPACE```\n3. ```OPEN_SPACE_MASTER```\n4. ```OPEN_SPACE_SLAVE```\n\n# Devices\nThe [devices](https://github.com/yfaway/zone-apis/tree/master/src/zone_api/core/devices)\ncontains one or more underlying OpenHab items. Rather than operating on a SwitchItem or on a\nNumberItem, the device represents meaningful concrete things such as a [MotionSensor](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/devices/motion_sensor.py),\nor a [Light](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/devices/switch.py).\nDevices contain both attributes (e.g. 'is the door open') and behaviors (e.g. 'arm the security\nsystem').\n\n# Events\nSimilar to the abstraction for the devices, the events are also more concrete. Zone API maps the\nOpenHab items events to the event enums in [ZoneEvent](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/zone_event.py)\nsuch as ```ZoneEvent.HUMIDITY_CHANGED``` or ```ZoneEvent.PARTITION_ARMED_AWAY```.\nThere is also the special event ```ZoneEvent.TIMER``` that represents triggering from a scheduler.\n\nThe event is dispatched to the appropriate zones which then invokes the actions registered for that\nevent. See [EventInfo](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/event_info.py)\nfor more info.\n\n# Actions\nAll the [actions](https://github.com/yfaway/zone-apis/tree/master/src/zone_api/core/actions) implement the [Action](https://github.com/yfaway/zone-apis/blob/master/src/zone_api/core/action.py) interface.\nThe action's life cycle is represented by the three functions: \n1. ```on_startup()``` - invoked after the ZoneManager has been fully populated, via the event\n   ```ZoneEvent.STARTUP```.\n2. ```on_action()``` - invoked where the device generates an event or when a timer event is\n   triggered (via ```ZoneEvent.TIMER```).\n3. ```on_destroy()``` - currently not invoked.\n\nThe ```@action``` decorator provides execution rules for the action as well as basic validation.\nIf the condition (based on the execution rules) does not match, the action won't be executed.\nBelow are the currently supported decorator parameters:\n1. *devices* - the list of devices the zone must have in order to invoke the action.\n2. *events* - the list of events for which the action will response to.\n3. *internal* - if set, this action is only applicable for internal zone\n4. *external* - if set, this action is only applicable for external zone\n5. *levels* - the zone levels that this action is applicable to. the empty list default value indicates that the action is applicable to all zone levels.\n6. *unique_instance* - if set, do not share the same action instance across zones. This is the case when the action is stateful.\n7. *zone_name_pattern* - if set, the zone name regular expression that is applicable to this action.\n8. *external_events* - the list of events from other zones that this action processes. These events won't be filtered using the same mechanism as the internal events as they come from other zones.\n9. *priority* - the action priority with respect to other actions within the same zone. Actions with lower priority values are executed first.\n\nThese parameters are also available to the action and can be used as a filtering mechanism\nto make sure that the action is only added to the applicable zones.\n\nHere is a simple action to disarm the security system when a motion sensor is triggered:\n\n```python\nfrom zone_api import security_manager as sm\nfrom zone_api.core.devices.activity_times import ActivityTimes\nfrom zone_api.core.devices.motion_sensor import MotionSensor\nfrom zone_api.core.zone_event import ZoneEvent\nfrom zone_api.core.action import action\nfrom zone_api.core.devices.alarm_partition import AlarmPartition\n\n\n@action(events=[ZoneEvent.MOTION], devices=[AlarmPartition, MotionSensor])\nclass DisarmOnInternalMotion:\n    \"\"\"\n    Automatically disarm the security system when the motion sensor in the zone containing the\n    security panel is triggered and the current time is not in the auto-arm-stay or sleep\n    time periods.\n    \"\"\"\n\n    def on_action(self, event_info):\n        events = event_info.get_event_dispatcher()\n        zone_manager = event_info.get_zone_manager()\n\n        if not sm.is_armed_stay(zone_manager):\n            return False\n\n        activity = zone_manager.get_first_device_by_type(ActivityTimes)\n        if activity is None:\n            self.log_warning(\"Missing activities time; can't determine wake-up time.\")\n            return False\n\n        if activity.is_auto_arm_stay_time() or (activity.is_sleep_time() and not activity.is_wakeup_time()):\n            return False\n\n        sm.disarm(zone_manager, events)\n        return True\n```\n\nThe decorator for the action above indicates that it is triggered by the motion event, and should\nonly be added to a zone that contains both the AlarmPartition and the Motion devices.\n\n# ZoneParser\nThe default parser uses this naming pattern for the OpenHab items.\n\n 1. The zones are defined as a String item with this pattern Zone_{name}:\n    \n        String Zone_GreatRoom                                                           \n            { level=\"FF\", displayIcon=\"player\", displayOrder=\"1\",                         \n              openSpaceSlaveNeighbors=\"FF_Kitchen\" } \n      - The levels are the reversed mapping of the enums in Zone::Level.\n      - Here are the list of supported attributes: level, external, openSpaceNeighbors,\n        openSpaceMasterNeighbors, openSpaceSlaveNeighbors, displayIcon, displayOrder.\n       \n 2. The individual OpenHab items are named after this convention: ```{zone_id}_{device_type}_{device_name}```.\n    \n    Here's an example:\n    \n        Switch FF_Office_LightSwitch \"Office Light\" (gWallSwitch, gLightSwitch, gFirstFloorLightSwitch)\n            [shared-motion-sensor]                                                        \n            { channel=\"zwave:device:9e4ce05e:node8:switch_binary\",                        \n              durationInMinutes=\"15\" }                                                    \n\nSee here for a [sample .items](https://github.com/yfaway/openhab-rules/blob/master/items/switch-and-plug.items)\nfile that is parsable by ZoneParser.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/yfaway/zone-apis/archive/refs/tags/v_01.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yfaway/zone-apis",
    "keywords": "zone api,home automation,openhab,habapp",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zone-api",
    "package_url": "https://pypi.org/project/zone-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/zone-api/",
    "project_urls": {
      "Download": "https://github.com/yfaway/zone-apis/archive/refs/tags/v_01.tar.gz",
      "Homepage": "https://github.com/yfaway/zone-apis"
    },
    "release_url": "https://pypi.org/project/zone-api/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Reusable Home Automation rules.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10690975,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3047841f7ff81091529720f11e95936aab3d8fa2dce3b29553abc65c2ded8873",
          "md5": "132095b8389e9b765314ac67f3667db1",
          "sha256": "519caf9adcea2cba26680cba7b805826588f332b56477400cb059613eee66dab"
        },
        "downloads": -1,
        "filename": "zone_api-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "132095b8389e9b765314ac67f3667db1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60562,
        "upload_time": "2021-06-19T01:05:33",
        "upload_time_iso_8601": "2021-06-19T01:05:33.434198Z",
        "url": "https://files.pythonhosted.org/packages/30/47/841f7ff81091529720f11e95936aab3d8fa2dce3b29553abc65c2ded8873/zone_api-0.1.tar.gz",
        "yanked": true,
        "yanked_reason": "Bad dependency."
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33a774799d0aeaadec01643cd59d13f9afe2b930035ec6c8cc91639f31337eb2",
          "md5": "efd55761219637278d7153a7b5bfc0cf",
          "sha256": "b210d5da41d8e4718c5250b5a559cc17cb994edf41acf7ce1308c866a802a70b"
        },
        "downloads": -1,
        "filename": "zone_api-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "efd55761219637278d7153a7b5bfc0cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60560,
        "upload_time": "2021-06-19T01:17:53",
        "upload_time_iso_8601": "2021-06-19T01:17:53.132706Z",
        "url": "https://files.pythonhosted.org/packages/33/a7/74799d0aeaadec01643cd59d13f9afe2b930035ec6c8cc91639f31337eb2/zone_api-0.2.tar.gz",
        "yanked": true,
        "yanked_reason": "Newer dependency requires code change."
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "338ea660e0193c06714c6f0e84bbf47dc3c882b2771bdf736d52dc42e720ccc5",
          "md5": "fe6898a151718cd60ff3c68ae68ac3d9",
          "sha256": "5c0cb304933f67c58fc5056185928157ff402e20566a5d2d999bcd542e551700"
        },
        "downloads": -1,
        "filename": "zone_api-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe6898a151718cd60ff3c68ae68ac3d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 74833,
        "upload_time": "2021-06-19T16:38:34",
        "upload_time_iso_8601": "2021-06-19T16:38:34.054386Z",
        "url": "https://files.pythonhosted.org/packages/33/8e/a660e0193c06714c6f0e84bbf47dc3c882b2771bdf736d52dc42e720ccc5/zone_api-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "338ea660e0193c06714c6f0e84bbf47dc3c882b2771bdf736d52dc42e720ccc5",
        "md5": "fe6898a151718cd60ff3c68ae68ac3d9",
        "sha256": "5c0cb304933f67c58fc5056185928157ff402e20566a5d2d999bcd542e551700"
      },
      "downloads": -1,
      "filename": "zone_api-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fe6898a151718cd60ff3c68ae68ac3d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 74833,
      "upload_time": "2021-06-19T16:38:34",
      "upload_time_iso_8601": "2021-06-19T16:38:34.054386Z",
      "url": "https://files.pythonhosted.org/packages/33/8e/a660e0193c06714c6f0e84bbf47dc3c882b2771bdf736d52dc42e720ccc5/zone_api-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}