{
  "info": {
    "author": "Zaafirrahman",
    "author_email": "zaafir123rahman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# **LINEAR REGRESSOR**\nThis is a module of numerical statistic prediction using linear regression by determinant matrix method with intercept, slope, correlation coefficient, and determination coefficient calculations\n### **By Zaafirrahman**\n\n\n## **Installation**\n\nThis library can be installed by the pip command, open your terminal and type in the following command...\n\n```python\npip install linearregressor\n```\n\n## **Functions of this library**\n\nFirst import the library using this command \n```python\nimport linearregressor as lr\n```\n and then proceed to call the functions\n \n \n## **The parameters**\n\n**x (train independent variable)** - Dataframe of independent variable from train data\n\n**y (train dependent variable)** - Series of dependent variable from train data\n\n**test (test independent variable)** - Dataframe of independent variable from test data\n\n\n## Prediction\n\n## `lr.predict(x,y,test)`\n\nThis function can be used to predict dependent test data from given independent test data (test) by coefficient calculation from given dependent (y) and independent train data (x)\n\n**Example :**\n\nGiven a train data with correlation between dependent and independent variable as shown below:\n\n| X1   | X2   | Y    |\n| ---- | ---- | ---- |\n| 10   | 7    | 23   |\n| 2    | 3    | 7    |\n| 4    | 2    | 15   |\n| 6    | 4    | 17   |\n| 8    | 6    | 23   |\n| 7    | 5    | 22   |\n| 4    | 3    | 10   |\n| 6    | 3    | 14   |\n| 7    | 4    | 20   |\n| 6    | 3    | 19   |\n\nBased on train data above, predict the dependent value from test data below:\n\n| X1   | X2   |\n| ---- | ---- |\n| 9    | 6    |\n| 5    | 4    |\n| 7    | 5    |\n| 8    | 6    |\n| 5    | 6    |\n| 4    | 2    |\n| 9    | 5    |\n| 10   | 8    |\n| 6    | 7    |\n| 7    | 3    |\n\nCode:\n```python\n# Create train data as pandas dataframe format\ndf = pd.DataFrame({'Y':[23,7,15,17,23,22,10,14,20,19],\n                   'X1':[10,2,4,6,8,7,4,6,7,6],\n                   'X2':[7,3,2,4,6,5,3,3,4,3]})\n# For simplest way, you can just import your csv file using pd.read_csv() function\n\n# Split between dependent and independent data\ny = df['Y']\nx = df.drop(['Y'],axis=1)\n\n# Create test data as pandas dataframe format and predict the dependent value\ndf_test = pd.DataFrame({'X1':[9,5,7,8,5,4,9,10,6,7],\n                        'X2':[6,4,5,6,6,2,5,8,7,3]})\nlr.predict(x,y,df_test)\n```\nOutput:\n```\n[23.540636042402866,\n 14.508833922261505,\n 19.024734982332188,\n 21.04946996466434,\n 13.575971731448758,\n 12.950530035335726,\n 24.00706713780924,\n 25.098939929328644,\n 15.600706713780912,\n 19.957597173144933]\n```\n\n## Intercept\n\n## `lr.intercept(x,y)`\n\nThis function can be used to find intercept value from dependent (y) and independent train data (x)\n\n**Example:**\n\nWith the same train data, you can find the intercept value of the data\n\n```python\n>>> lr.intercept(x,y)\n3.918727915194365\n```\nAs shown in the output, it can be concluded that if the value of the independent variable is constant, then the average value of the dependent variable is `3.918727915194365`\n\n\n## Slope\n\n## `lr.slope(x,y)`\n\nThis function can be used to find slope value from dependent (y) and independent train data (x)\n\n**Example:**\n\nWith the same train data, you can find the slope value of the data\n\n```python\n>>> lr.slope(x,y)\n[2.4911660777385274, -0.46643109540637395]\n```\nAs shown in the output, it can be concluded that if the value of X1 increases by 1 unit, it will **increase** the value of the dependent variable by `2.4911660777385274` because the coefficient is marked (+) which means the effect is **positive**.\nMeanwhile, if the value of X2 increases by 1 unit, it will **decrease** the value of the dependent variable by `0.46643109540637395` because the coefficient is marked (-) which means the effect is **negative**.\n\n\n## Correlation Coefficient\n\n## `lr.r(x,y)`\n\nThis function can be used to find correlation coefficient from dependent (y) and independent train data (x)\n\n**Example:**\n\nWith the same train data, you can find the correlation coefficient of the data\n\n```python\n>>> lr.r(x,y)\n0.9145723194701728\n```\nAs shown in the output, it can be concluded that between the independent variable and the dependent variable, which has a very strong correlation because the correlation coefficient is very close to 1.\n\n\n## Determination Coefficient\n\n## `lr.rsquare(x,y)`\n\nThis function can be used to find determination coefficient from dependent (y) and independent train data (x)\n\n**Example:**\n\nWith the same train data, you can find the determination coefficient of the data\n\n```python\n>>> lr.rsquare(x,y)\n0.8364425275410518\n```\nAs shown in the output, it can be concluded that the value of the independent variable affects `0.8364425275410518` or `83.64%` of the value of the dependent variable, while the remaining `16.36%` is influenced by other variables.\n\n\n## Regression Information\n\n## `lr.info(x,y)`\n\nThis function can be used to easily show the information of your data such as constant (intercept), coefficient (slope), multiple r (correlation coefficient), and r squared (determination coefficient) together in just one function\n\n**Example:**\n\nWith the same train data, you can show the whole regression information about your data\n\n```python\n>>> lr.info(x,y)\nConstant :  3.918727915194365\nCoefficient_1 : 2.4911660777385274\nCoefficient_2 : -0.46643109540637395\nMultiple R :  0.9145723194701728\nR Squared :  0.8364425275410518\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zaafirrahman/linearregressor",
    "keywords": "linear regression,machine learning,prediction",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "linearregressor",
    "package_url": "https://pypi.org/project/linearregressor/",
    "platform": "",
    "project_url": "https://pypi.org/project/linearregressor/",
    "project_urls": {
      "Homepage": "https://github.com/zaafirrahman/linearregressor"
    },
    "release_url": "https://pypi.org/project/linearregressor/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Module of numerical statistic prediction using linear regression by determinant matrix method with intercept, slope, correlation coefficient, and determination coefficient calculations",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12402772,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef6d258f72760f81e49a3b012698aa4beb33fd1f9b1bebc1ae2357d0da97e339",
          "md5": "bd23a53f561278f530cd38f3ce8951d8",
          "sha256": "86dc19199f4c74176ca5bce89efeccda02b6ba506ce1c30a58162c8df44f08ac"
        },
        "downloads": -1,
        "filename": "linearregressor-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bd23a53f561278f530cd38f3ce8951d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5245,
        "upload_time": "2021-12-25T09:29:56",
        "upload_time_iso_8601": "2021-12-25T09:29:56.323608Z",
        "url": "https://files.pythonhosted.org/packages/ef/6d/258f72760f81e49a3b012698aa4beb33fd1f9b1bebc1ae2357d0da97e339/linearregressor-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef6d258f72760f81e49a3b012698aa4beb33fd1f9b1bebc1ae2357d0da97e339",
        "md5": "bd23a53f561278f530cd38f3ce8951d8",
        "sha256": "86dc19199f4c74176ca5bce89efeccda02b6ba506ce1c30a58162c8df44f08ac"
      },
      "downloads": -1,
      "filename": "linearregressor-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bd23a53f561278f530cd38f3ce8951d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5245,
      "upload_time": "2021-12-25T09:29:56",
      "upload_time_iso_8601": "2021-12-25T09:29:56.323608Z",
      "url": "https://files.pythonhosted.org/packages/ef/6d/258f72760f81e49a3b012698aa4beb33fd1f9b1bebc1ae2357d0da97e339/linearregressor-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}