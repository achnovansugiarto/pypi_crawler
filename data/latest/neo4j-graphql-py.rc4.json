{
  "info": {
    "author": "Muhammad Usama",
    "author_email": "aslam0121@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# neo4j-graphql-py\n\nA GraphQL to Cypher query execution layer for Neo4j and Python GraphQL implementations.\n\n## Installation and usage\n\nInstall\n\n```\npip install neo4j-graphql-py\n```\n\n\nThen call `neo4j_graphql()` in your GraphQL resolver. Your GraphQL query will be translated to Cypher and the query passed to Neo4j.\n\n~~~python\nfrom neo4j_graphql_py import neo4j_graphql\n\ndef resolve(obj, info, **kwargs):\n    return neo4j_graphql(obj, info.context, info, **kwargs)\n\nresolvers = {\n  'Query': {\n    'Movie':resolve\n  }\n}\n~~~\n\n## What is `neo4j-graphql-py`\n\nA package to make it easier to use GraphQL and [Neo4j](https://neo4j.com/) together. `neo4j-graphql-py` translates GraphQL queries to a single [Cypher](https://neo4j.com/developer/cypher/) query, eliminating the need to write queries in GraphQL resolvers and for batching queries. It also exposes the Cypher query language through GraphQL via the `@cypher` schema directive.\n\n## How it works\n\n### Start with a GraphQL schema\n\nGraphQL First Development is all about starting with a well defined GraphQL schema. Here we'll use the GraphQL schema IDL syntax:\n\n~~~python\ntype_defs = '''\ndirective @cypher(statement: String!) on FIELD_DEFINITION\ndirective @relation(name:String!, direction:String!) on FIELD_DEFINITION\n\ntype Movie {\n  movieId: ID!\n  title: String\n  year: Int\n  plot: String\n  poster: String\n  imdbRating: Float\n  similar(first: Int = 3, offset: Int = 0): [Movie] @cypher(statement: \"MATCH (this)-[:IN_GENRE]->(:Genre)<-[:IN_GENRE]-(o:Movie) RETURN o\")\n  degree: Int @cypher(statement: \"RETURN SIZE((this)-->())\")\n  actors(first: Int = 3, offset: Int = 0): [Actor] @relation(name: \"ACTED_IN\", direction:\"IN\")\n}\n\ntype Actor {\n  id: ID!\n  name: String\n  movies: [Movie]\n}\n\n\ntype Query {\n  Movie(id: ID, title: String, year: Int, imdbRating: Float, first: Int, offset: Int): [Movie]\n}\n'''\n~~~\n\nWe define two types, `Movie` and `Actor` as well as a top level Query `Movie` which becomes our entry point. This looks like a standard GraphQL schema, except for the use of two directives `@relation` and `@cypher`. In GraphQL directives allow us to annotate fields and provide an extension point for GraphQL.\n\n* `@cypher` directive - maps the specified Cypher query to the value of the field. In the Cypher query, `this` is bound to the current object being resolved.\n* `@relation` directive - used to indicate relationships in the data model. The `name` argument specifies the relationship type, and `direction` indicates the direction of the relationship (\"IN\" or \"OUT\" are valid values)\n\n\n\n### Translate GraphQL To Cypher\n\nInside each resolver, use `neo4j-graphql()` to generate the Cypher required to resolve the GraphQL query, passing through the query arguments, context and resolveInfo objects.\n\n~~~python\nfrom neo4j_graphql_py import neo4j_graphql\n\nresolvers = {\n  # entry point to GraphQL service\n  'Query': {\n    'Movie': lambda obj, info, **kwargs: neo4j_graphql(obj, info.context,info, **kwargs)\n  }\n}\n~~~\n\nGraphQL to Cypher translation works by inspecting the GraphQL schema, the GraphQL query and arguments. For example, this simple GraphQL query\n\n~~~graphql\n{\n  Movie(title: \"River Runs Through It, A\") {\n    title\n    year\n    imdbRating\n  }\n}\n~~~\n\nis translated into the Cypher query\n\n~~~cypher\nMATCH (movie:Movie {title: \"River Runs Through It, A\"})\nRETURN movie { .title , .year , .imdbRating } AS movie\nSKIP 0\n~~~\n\nA slightly more complicated traversal\n\n~~~graphql\n{\n  Movie(title: \"River Runs Through It, A\") {\n    title\n    year\n    imdbRating\n    actors {\n      name\n    }\n  }\n}\n~~~\n\nbecomes\n\n~~~cypher\nMATCH (movie:Movie {title: \"River Runs Through It, A\"})\nRETURN movie { .title , .year , .imdbRating, actors: [(movie)<-[:ACTED_IN]-(movie_actors:Actor) | movie_actors { .name }] }\nAS movie\nSKIP 0\n~~~\n\n## `@cypher` directive\n\n**NOTE: The `@cypher` directive has a dependency on the APOC procedure library, specifically the function `apoc.cypher.runFirstColumn` to run sub-queries. If you'd like to make use of the `@cypher` feature you'll need to install [appropriate version of APOC](https://github.com/neo4j-contrib/neo4j-apoc-procedures) in Neo4j**\n\nGraphQL is fairly limited when it comes to expressing complex queries such as filtering, or aggregations. We expose the graph querying language Cypher through GraphQL via the `@cypher` directive. Annotate a field in your schema with the `@cypher` directive to map the results of that query to the annotated GraphQL field. For example:\n\n~~~graphql\ntype Movie {\n  movieId: ID!\n  title: String\n  year: Int\n  plot: String\n  similar(first: Int = 3, offset: Int = 0): [Movie] @cypher(statement: \"MATCH (this)-[:IN_GENRE]->(:Genre)<-[:IN_GENRE]-(o:Movie) RETURN o ORDER BY COUNT(*) DESC\")\n}\n~~~\n\nThe field `similar` will be resolved using the Cypher query\n\n~~~cypher\nMATCH (this)-[:IN_GENRE]->(:Genre)<-[:IN_GENRE]-(o:Movie) RETURN o ORDER BY COUNT(*) DESC\n~~~\n\nto find movies with overlapping Genres.\n\nQuerying a GraphQL field marked with a `@cypher` directive executes that query as a subquery:\n\n*GraphQL:*\n~~~graphql\n{\n  Movie(title: \"River Runs Through It, A\") {\n    title\n    year\n    imdbRating\n    actors {\n      name\n    }\n    similar(first: 3) {\n      title\n    }\n  }\n}\n~~~\n\n*Cypher:*\n~~~cypher\nMATCH (movie:Movie {title: \"River Runs Through It, A\"})\nRETURN movie { .title , .year , .imdbRating,\n  actors: [(movie)<-[:ACTED_IN]-(movie_actors:Actor) | movie_actors { .name }],\n  similar: [ x IN apoc.cypher.runFirstColumn(\"\n        WITH {this} AS this\n        MATCH (this)-[:IN_GENRE]->(:Genre)<-[:IN_GENRE]-(o:Movie)\n        RETURN o\",\n        {this: movie}, true) | x { .title }][..3]\n} AS movie\nSKIP 0\n~~~\n\n\n### Query Neo4j\n\nInject a Neo4j driver instance in the context of each GraphQL request and `neo4j-graphql-py` will query the Neo4j database and return the results to resolve the GraphQL query.\n\n~~~python\nfrom neo4j_graphql_py import make_executable_schema\nschema = make_executable_schema(type_defs, resolvers)\n~~~\n\n~~~python\nimport neo4j\ndef context(request):\n    global driver\n    if driver is None:\n        driver = neo4j.GraphDatabase.driver(\"bolt://localhost:7687\", auth=(\"neo4j\", \"neo4j\"))\n\n    return {'driver': driver, 'request': request}\n~~~\n\n~~~python\nfrom ariadne.asgi import GraphQL\nimport uvicorn\nrootValue = {}\napp = GraphQL(schema=schema, root_value=rootValue, context_value=context, debug=True)\nuvicorn.run(app)\n~~~\n\nSee [/examples](https://github.com/Usama0121/neo4j-graphql-py/tree/master/examples/ariadne_uvicorn) for complete examples using different GraphQL server libraries.\n\n\n## Benefits\n\n* Send a single query to the database\n* No need to write queries for each resolver\n* Exposes the power of the Cypher query language through GraphQL\n\n## Examples\n\nSee [/examples](https://github.com/Usama0121/neo4j-graphql-py/tree/master/examples) for complete examples using different GraphQL server libraries.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Usama0121/neo4j-graphql-py",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neo4j-graphql-py",
    "package_url": "https://pypi.org/project/neo4j-graphql-py/",
    "platform": "",
    "project_url": "https://pypi.org/project/neo4j-graphql-py/",
    "project_urls": {
      "Homepage": "https://github.com/Usama0121/neo4j-graphql-py"
    },
    "release_url": "https://pypi.org/project/neo4j-graphql-py/0.1.4/",
    "requires_dist": [
      "neo4j (==4.1.0)",
      "graphql-core (==3.0.5)",
      "pydash (==4.8.0)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A GraphQL to Cypher query execution layer for Neo4j and Python GraphQL implementations.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7968827,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3e83f9496ea16629860ac7de1e11455f7fb6875bd33a4083e6db918e24c8c5e",
          "md5": "c6f3555195130acda5d8709da514a689",
          "sha256": "bd27abd9d7a83a5797eb6db8e14ad0293773ab715247e42eb3e97f5c2681130e"
        },
        "downloads": -1,
        "filename": "neo4j_graphql_py-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6f3555195130acda5d8709da514a689",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 7271,
        "upload_time": "2020-07-30T21:17:53",
        "upload_time_iso_8601": "2020-07-30T21:17:53.237144Z",
        "url": "https://files.pythonhosted.org/packages/f3/e8/3f9496ea16629860ac7de1e11455f7fb6875bd33a4083e6db918e24c8c5e/neo4j_graphql_py-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7aaf1e3f6e9557127d431d80205587379c61c09e45339488da75ed5bcd4d4f6",
          "md5": "cd57323775481a97eb1e55f64e3fac61",
          "sha256": "18a89dac6ee7bb6e1a74e7a30c76f80e2bb980b6eced99610c5804cdb43bd418"
        },
        "downloads": -1,
        "filename": "neo4j-graphql-py-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd57323775481a97eb1e55f64e3fac61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 7687,
        "upload_time": "2020-07-30T21:17:55",
        "upload_time_iso_8601": "2020-07-30T21:17:55.861583Z",
        "url": "https://files.pythonhosted.org/packages/f7/aa/f1e3f6e9557127d431d80205587379c61c09e45339488da75ed5bcd4d4f6/neo4j-graphql-py-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a614ce64b263605f4cd0b58eb425631ab8bb8413dbb187c51a70a2cbe3cb88f",
          "md5": "64c63fc3c84e21541bc72a9523927525",
          "sha256": "56343be9367e6ab2f1d730c084d9685d0c45cf00659f2a26c8fda4071b4f9532"
        },
        "downloads": -1,
        "filename": "neo4j_graphql_py-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64c63fc3c84e21541bc72a9523927525",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 7692,
        "upload_time": "2020-08-02T17:09:59",
        "upload_time_iso_8601": "2020-08-02T17:09:59.137369Z",
        "url": "https://files.pythonhosted.org/packages/1a/61/4ce64b263605f4cd0b58eb425631ab8bb8413dbb187c51a70a2cbe3cb88f/neo4j_graphql_py-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca4ac0c15efe2c87409e7d3006a640f8fdee8a65eb31549ce094699317d78a72",
          "md5": "0aaa06da287f71af57d9df7a70b4e968",
          "sha256": "3615a8b47561dc2742d0a1edc4fe4bdb739fdab040aee12bc924d2f542d6f9b2"
        },
        "downloads": -1,
        "filename": "neo4j-graphql-py-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0aaa06da287f71af57d9df7a70b4e968",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 7962,
        "upload_time": "2020-08-02T17:10:00",
        "upload_time_iso_8601": "2020-08-02T17:10:00.630778Z",
        "url": "https://files.pythonhosted.org/packages/ca/4a/c0c15efe2c87409e7d3006a640f8fdee8a65eb31549ce094699317d78a72/neo4j-graphql-py-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cff1cad74cba65737a0de29b585920c56210eacf7b064baed57dd3217b3288e2",
          "md5": "9897b43c6065093df905889406e4d740",
          "sha256": "1ab134dae3d1b651cf76eb88dd168aadab785d660a9fa79c045f3c973e748d5d"
        },
        "downloads": -1,
        "filename": "neo4j_graphql_py-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9897b43c6065093df905889406e4d740",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 8348,
        "upload_time": "2020-08-14T21:24:27",
        "upload_time_iso_8601": "2020-08-14T21:24:27.443408Z",
        "url": "https://files.pythonhosted.org/packages/cf/f1/cad74cba65737a0de29b585920c56210eacf7b064baed57dd3217b3288e2/neo4j_graphql_py-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13c9d28ee1c6f5c0e6db91e0d4dc8c0b1375b319410e794f5bda10da179eb184",
          "md5": "5c2eeab47da2296648d9de664733883e",
          "sha256": "47f723a93741ad2edbd98bf5783fed179adb8702deab0b5857016a8fa6136baa"
        },
        "downloads": -1,
        "filename": "neo4j-graphql-py-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5c2eeab47da2296648d9de664733883e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 9276,
        "upload_time": "2020-08-14T21:24:28",
        "upload_time_iso_8601": "2020-08-14T21:24:28.931475Z",
        "url": "https://files.pythonhosted.org/packages/13/c9/d28ee1c6f5c0e6db91e0d4dc8c0b1375b319410e794f5bda10da179eb184/neo4j-graphql-py-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efdb0d0b70b3142b5d38b5416d02a35ab8144a0107fc05e7df718d8339961ce7",
          "md5": "93ae8b5000364d4b497ba34935fbedc5",
          "sha256": "56c4df37a287ce4c0c4e3a1fd8682c97e8e41bcb672f7451c4d9f9d63c66a912"
        },
        "downloads": -1,
        "filename": "neo4j_graphql_py-0.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93ae8b5000364d4b497ba34935fbedc5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 11836,
        "upload_time": "2020-08-15T20:41:08",
        "upload_time_iso_8601": "2020-08-15T20:41:08.692428Z",
        "url": "https://files.pythonhosted.org/packages/ef/db/0d0b70b3142b5d38b5416d02a35ab8144a0107fc05e7df718d8339961ce7/neo4j_graphql_py-0.1.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fadc4b4efb322c4252353e6f85c9309cf766c179b3dd86f31b9a6280ed78370",
          "md5": "d277d154fc41a491c39e37169bc06f2e",
          "sha256": "70fbe3ca2f743eddb0f2d32c591896b372f1d3a6388a913011e2a8ea36ab36eb"
        },
        "downloads": -1,
        "filename": "neo4j-graphql-py-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d277d154fc41a491c39e37169bc06f2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13362,
        "upload_time": "2020-08-15T20:41:10",
        "upload_time_iso_8601": "2020-08-15T20:41:10.540427Z",
        "url": "https://files.pythonhosted.org/packages/2f/ad/c4b4efb322c4252353e6f85c9309cf766c179b3dd86f31b9a6280ed78370/neo4j-graphql-py-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efdb0d0b70b3142b5d38b5416d02a35ab8144a0107fc05e7df718d8339961ce7",
        "md5": "93ae8b5000364d4b497ba34935fbedc5",
        "sha256": "56c4df37a287ce4c0c4e3a1fd8682c97e8e41bcb672f7451c4d9f9d63c66a912"
      },
      "downloads": -1,
      "filename": "neo4j_graphql_py-0.1.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "93ae8b5000364d4b497ba34935fbedc5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 11836,
      "upload_time": "2020-08-15T20:41:08",
      "upload_time_iso_8601": "2020-08-15T20:41:08.692428Z",
      "url": "https://files.pythonhosted.org/packages/ef/db/0d0b70b3142b5d38b5416d02a35ab8144a0107fc05e7df718d8339961ce7/neo4j_graphql_py-0.1.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fadc4b4efb322c4252353e6f85c9309cf766c179b3dd86f31b9a6280ed78370",
        "md5": "d277d154fc41a491c39e37169bc06f2e",
        "sha256": "70fbe3ca2f743eddb0f2d32c591896b372f1d3a6388a913011e2a8ea36ab36eb"
      },
      "downloads": -1,
      "filename": "neo4j-graphql-py-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "d277d154fc41a491c39e37169bc06f2e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 13362,
      "upload_time": "2020-08-15T20:41:10",
      "upload_time_iso_8601": "2020-08-15T20:41:10.540427Z",
      "url": "https://files.pythonhosted.org/packages/2f/ad/c4b4efb322c4252353e6f85c9309cf766c179b3dd86f31b9a6280ed78370/neo4j-graphql-py-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}