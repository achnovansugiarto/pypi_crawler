{
  "info": {
    "author": "Quantum Technology Group, RWTH Aachen University",
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Utilities"
    ],
    "description": "# qutil / qutech_util\nLong term goal is to gather utility functions here.\nThe original name was `qutil` but we included the additional alias `qutech_util` so you can install it via [pipy](https://pypi.org/project/qutech-util).\nIt is not meant as a lightweight package but some heavy dependencies like qcodes are feature gated.\nIf you don't have a reason for a lightweight install you should install all features i.e. `qutil[complete]`.\nIf you just want to use it you can install the latest \"released\" version via\n```sh\npython -m pip install qutech-util[complete]\n```\nHowever, this package profits from everybody's work and the releases are infrequent. Please make a development install\nand contribute your changes. You can do this via\n```sh\npython -m pip install -e git+https://git.rwth-aachen.de/qutech/qutil.git#egg=qutech-util[complete]\n```\nThis will download the source code (i.e. clone the git repository) into a subdirectory of the `./src` argument and link the files into your environment instead of copying them. If you are on windows you can use [SourceTree](https://www.sourcetreeapp.com/) which is a nice GUI for git.\nYou can specify the source code directory with the `--src` argument (which needs to be BEFORE `-e`):\n```sh\npython -m pip install --src some_directory/my_python_source -e git+https://git.rwth-aachen.de/qutech/qutil.git#egg=qutech-util[complete]\n```\nIf you have already downloaded/cloned the package yourself you can use `python -m pip install .[complete] -e`.\n\nPlease file an issue if any of these instructions does not work.\n\n### Tests\nThere is no plan for writing extensive tests for the code in this package but please try to write proper docstrings for\nyour functions and include examples in them which can be checked via [`doctest`](https://docs.python.org/3/library/doctest.html).\nFollow the link for an example for an example :)\n\nYou can run the tests either via\n```sh\npython -m pytest --doctest-modules\n```\nor to check if everything works for a clean install (requires hatch to be installed)\n```sh\npython -m hatch run test:run\n```\n\n## Documentation\nThe auto-generated documentation can be found at [the Gitlab Pages](https://qutech.pages.rwth-aachen.de/qutil/index.html).\n\nTo build the documentation locally, navigate to `doc/` and run either\n\n```bat\n.\\make.bat html\n```\n\n(on Windows),\n\n```sh\nmake html\n```\n\n(on Unix), or\n\n```bat\nsphinx-build -b html source build\n```\n\nMake sure the dependencies are installed via\n\n```sh\npython -m pip install -e .[doc]\n```\n\nin the top-level directory.\n\n## qutil.plotting\nThis module contains useful classes and functions surrounding `maptlotlib` plots.\n\n`cycle_plots` helps you cycling through many plots with the arrow keys (there are probably much better functions for this out there)\n`plot_2d_dataframe` helps you plot 2d data frames with numeric indices\n`BlitManager` can be used to significantly speed up plotting when certain parts of the plot, such as the artists on the canvas (lines, annotations, etc.) change but others do not (axes, labels, etc.) does not.\n`CoordClicker` and `LineClicker` allow some interactive selection of data.\n`get_rwth_color_cycle` and the predefined `rwth_color_cycle` are cycler instances with the official RWTH corporate design colors:\n\n![cycler example](./doc/source/_static/cycles.png)\n\n## qutil.matlab\nIn this module there are functions that are helpful for reading `.mat` files, especially those created with special measure.\nIf you simply want to open a random `.mat` file you can use `hdf5storage.loadmat`.\n\nLoading matlab files with \"newer\" MATLAB classes like `table` requires connecting (and starting) MATLAB instance.\nThe function `load_special_measure_with_matlab_engine` can load most special measure scans by utilizing the MATLAB engine interface. To use it you require a \"sufficiently new\" version of MATLAB and then navigate to `C:\\Program Files\\MATLAB\\$VERSION\\extern\\engines\\python` and call `python setup.py install`.\n\nRecommended: There are dataclasses like `SimpleScan` or `VirtualScan` that are a python representation of certain common scan\ntypes and have a convenience `to_xarray` method. Use `load_simple_scan_with_matlab_engine` or `load_virtual_scan_with_matlab_engine` to load them.\n\nThere are the dataclasses `FigureData`, `AxesData` and `PlotData` that represent matlab figure data. They help inspecting saved matlab figures with the help of a matlab engine.\n\n## qutil.const\nThis module defines all the constants you could wish for as well as functions to convert temperatures (`convert_temperature`) or between wavelengths and frequencies (`lambda2nu`, `nu2lambda`). For an overview, see the module docstring.\n\n## qutil.linalg\nThis module provides several handy linear algebra functions. While some are implemented elsewhere, the implementation here is typically speedier for large arrays. For example, `pauli_expm` exploits the fact that a matrix exponential of Pauli matrices can be written as a cosine times the identity matrix plus a sine times the Paulis to speed up the calculation.\n\nFor an overview of the included functions, see the module docstring.\n\n## qutil.ui\nThis module collects UI helpers, such as a progress bar for loops that can be used like so:\n```python\nfor i in qutil.ui.progressbar(range(n)):\n    do_something()\n```\n\n## qutil.qi\nIn this module there are some quantities and functions related to quantum information, like the Pauli matrices in different data types.\n\n## qutil.random\nHere we collect functions for random numbers like `random_hermitian` to generate random Hermitian matrices.\n\n## qutil.itertools\nThis module contains everything from `itertools`, `more_itertools` and custom functions.\n\n## qutil.caching\nHere you find decorators, functions and classes that help you implement caching like `file_cache` and `lru_cache`. This is helpful if you need to call computationally expensive functions with the same arguments repeatedly.\n\n## qutil.io\nUser input related functions like `query_yes_no` or a `CsvLogger` interface (for reading use pandas.read_csv).\n\n`to_global_path` resolves all network drive mappings (such as `Z:\\`) as well as domain names \n(such as `\\\\janeway`) to their global address (`\\\\janeway.physik.rwth-aachen.de` in this case).\n\n## qutil.parallel\nFunctions and classes related to parallel execution i.e. multi-threading, multi-processing and asyncio.\nThere is a class for periodic callbacks from another thread `ThreadedPeriodicCallback`.\n\n## qutil.hardware\nThis package contains little scripts to talk to various hardware devices. For example reading the leak tester via serial interface.\n\n## qutil.electronics\n### lumped_elements\nExposes the contents of [fastz](https://github.com/whileman133/fastZ), a package for simple lumped-elements calculations. Overloads `+` and `//` to implement series and parallel connections, respectively.\n\nSee the `fastz` documentation for more information.\n\n## qutil.qcodes\nFunctions to convert from and to qcodes data sets. Currently only\nfrom `pandas.DataFrame` to `qcodes.data.data_set.DataSet`\n\n## qutil.measurement\nThis package contains measurement-related functionality.\n### spectrometer\nDefines a `Spectrometer` class that handles data acquisition, processing, storage, and\nvisualization. Several processing steps can be applied to the raw timeseries data, for instance\nto convert from a voltage signal to a current signal given a known impedance.\n\nSome example code using the Keysight DMM qcodes driver for data acquisition:\n```python\nfrom qutil.measurement.spectrometer import Spectrometer, daq\nfrom qcodes.instrument_drivers.Keysight.Keysight_34465A_submodules import Keysight_34465A\ndmm = Keysight_34465A('dmm', 'some_tcpip_address')\n\n# Pre-defined functions that set up and execute a measurement using a DMM\nsetup, acquire = daq.qcodes.keysight_344xxA(dmm)\nspect = Spectrometer(setup, acquire, procfn=lambda V: V/100,  # 100 Ohms\n                     raw_unit='V', processed_unit='A')\nsettings = {'f_min': 0.1, 'f_max': 1000}\nspect.take('a comment', n_avg=5, **settings)\nspect.hide(0)\nspect.show('a comment')  # same as spect.show(0)\n# Save and recall functionality\nspect.serialize_to_disk('./foo')\nspect_loaded = Spectrometer.recall_from_disk('./foo', setup, acquire)\nspect_loaded.show_keys()\n# (0, 'a comment')\n```\n\nYou can also play around with simulated noise (requires `qopt`):\n```python\nfrom qutil.measurement.spectrometer import Spectrometer, daq\nspect = Spectrometer(*daq.simulator.qopt_colored_noise(lambda f, A, **_: A/f))\nspect.take('foobar', n_avg=10, n_seg=5, A=42)\n```\n\n## qutil.typecheck\nFunctions and decorators to  help with runtime typechecking. Notably the `@check_literals` decorator to ensure that arguments match an annotated literal.\nImports the [`typeguard`](https://typeguard.readthedocs.io/en/latest/userguide.html) which provides the powerful `@typechecked` decorator.\n```python\nfrom typing import Literal, Sequence\nfrom qutil.typecheck import check_literals\n@check_literals\ndef my_function(a: Sequence[int], b: Literal['forward', 'backward']):\n    pass # do something\n\n# works\nmy_function([1, 2, 3], 'backward')\n\n# works because the first arguement is not checked at runtime\nmy_function({'no': 'sequence'}, 'backward')\n\n# runtime error because of typo in 'backward'\nmy_function('wrong', 'backwardd')\n```\n\n## qutil.pandas_tools\nPandas utility functions for common code patterns. `consecutive_groupby` is like `pandas.DataFrame.groupby` but only\ngroups consecutive rows.\n\n## qutil.image\nImage and video processing tools. `convert_tiff` converts a multipage `.tif` image to a video with a format of choice using `moviepy`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "qutech-util",
    "package_url": "https://pypi.org/project/qutech-util/",
    "platform": null,
    "project_url": "https://pypi.org/project/qutech-util/",
    "project_urls": {
      "Homepage": "https://git.rwth-aachen.de/qutech/qutil"
    },
    "release_url": "https://pypi.org/project/qutech-util/2023.3.1/",
    "requires_dist": [
      "dill",
      "hdf5storage",
      "lazy-loader",
      "matplotlib",
      "more-itertools",
      "numpy",
      "packaging",
      "pandas",
      "scipy",
      "typeguard",
      "qutech-util[complete]; extra == 'all'",
      "qutech-util[doc]; extra == 'complete'",
      "qutech-util[electronics]; extra == 'complete'",
      "qutech-util[fancy-progressbar]; extra == 'complete'",
      "qutech-util[gl]; extra == 'complete'",
      "qutech-util[hardware]; extra == 'complete'",
      "qutech-util[image]; extra == 'complete'",
      "qutech-util[qcodes]; extra == 'complete'",
      "myst-parser; extra == 'doc'",
      "pydata-sphinx-theme; extra == 'doc'",
      "sphinx; extra == 'doc'",
      "fastz; extra == 'electronics'",
      "ipynbname; extra == 'fancy-progressbar'",
      "tqdm; extra == 'fancy-progressbar'",
      "ezdxf; extra == 'gl'",
      "pyserial; extra == 'hardware'",
      "moviepy; extra == 'image'",
      "tifffile[all]; extra == 'image'",
      "qcodes; extra == 'qcodes'"
    ],
    "requires_python": ">=3.8",
    "summary": "Utility package of the Quantum Technology group of RWTH Aachen",
    "version": "2023.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17208123,
  "releases": {
    "2022.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d1479e2dff214e8552076bed57c72abf1340b13db991febbca804bbc4a9036e",
          "md5": "367938b0677e4be5303cf0a74661d29b",
          "sha256": "c32706ade3273791634f4c9488b445120c78d868f52c90335593720279926c96"
        },
        "downloads": -1,
        "filename": "qutech_util-2022.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "367938b0677e4be5303cf0a74661d29b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 50501,
        "upload_time": "2022-07-19T13:32:36",
        "upload_time_iso_8601": "2022-07-19T13:32:36.823386Z",
        "url": "https://files.pythonhosted.org/packages/0d/14/79e2dff214e8552076bed57c72abf1340b13db991febbca804bbc4a9036e/qutech_util-2022.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a748fca8e2bdbfb9ffc658d0d4cd4f08025588b406ba20a00173760d2029ae3",
          "md5": "82bd87a46c188d54fdd23ac07cb4e2d7",
          "sha256": "e71128c0c24df8129445989d9506f7bd8b2501a7e7e90b0b31dce2c0668da020"
        },
        "downloads": -1,
        "filename": "qutech-util-2022.7.tar.gz",
        "has_sig": false,
        "md5_digest": "82bd87a46c188d54fdd23ac07cb4e2d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 45901,
        "upload_time": "2022-07-19T13:32:39",
        "upload_time_iso_8601": "2022-07-19T13:32:39.529282Z",
        "url": "https://files.pythonhosted.org/packages/5a/74/8fca8e2bdbfb9ffc658d0d4cd4f08025588b406ba20a00173760d2029ae3/qutech-util-2022.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.3": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a49d2434d7f0656a8bb3fb3f0590293eee9e5be7e19dcb6f36eb259f175ae6a7",
          "md5": "afd11a91b07142972bb1c0c8f04697a8",
          "sha256": "2b6ed014a3d9b7d30a023d7ef9794e66c568f7360d6603307e78facf6bb8678b"
        },
        "downloads": -1,
        "filename": "qutech_util-2023.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afd11a91b07142972bb1c0c8f04697a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 126945,
        "upload_time": "2023-03-08T15:00:02",
        "upload_time_iso_8601": "2023-03-08T15:00:02.142880Z",
        "url": "https://files.pythonhosted.org/packages/a4/9d/2434d7f0656a8bb3fb3f0590293eee9e5be7e19dcb6f36eb259f175ae6a7/qutech_util-2023.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "20aec5b4cfb044da94f9b3de50585e6e09d60c1adf8a2dac537e693d6e640cb9",
          "md5": "e02d927b0644f642cb20ecd266d9b44b",
          "sha256": "d3a3cf1c68c8ef0eb582a099fa4f4d86c4d29288ddcc99ebc6e794919c412979"
        },
        "downloads": -1,
        "filename": "qutech_util-2023.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e02d927b0644f642cb20ecd266d9b44b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 103039,
        "upload_time": "2023-03-08T15:00:05",
        "upload_time_iso_8601": "2023-03-08T15:00:05.323490Z",
        "url": "https://files.pythonhosted.org/packages/20/ae/c5b4cfb044da94f9b3de50585e6e09d60c1adf8a2dac537e693d6e640cb9/qutech_util-2023.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.3.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a3b75957b4533ff32b2dd34a794675bd2ff249c2da1f448e250d9b07e214e06b",
          "md5": "09510038c6958468cadfd9f518261290",
          "sha256": "07ce2c0b977a551bae16270084609eb5ca7445af09a716108dc089dff1990cfc"
        },
        "downloads": -1,
        "filename": "qutech_util-2023.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09510038c6958468cadfd9f518261290",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 126980,
        "upload_time": "2023-03-08T15:01:55",
        "upload_time_iso_8601": "2023-03-08T15:01:55.907666Z",
        "url": "https://files.pythonhosted.org/packages/a3/b7/5957b4533ff32b2dd34a794675bd2ff249c2da1f448e250d9b07e214e06b/qutech_util-2023.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "cdf2ce1509a2abafb738e761c3c78ba24fe2511ef05f953ce90319f3b76ff19c",
          "md5": "ea2b065ea7c577cdc69cbd84adc7e31a",
          "sha256": "41556ead3abdeffa4a657b090a83589ed2720ad64464ab8f377c22408254e5d7"
        },
        "downloads": -1,
        "filename": "qutech_util-2023.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ea2b065ea7c577cdc69cbd84adc7e31a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 103049,
        "upload_time": "2023-03-08T15:01:59",
        "upload_time_iso_8601": "2023-03-08T15:01:59.462443Z",
        "url": "https://files.pythonhosted.org/packages/cd/f2/ce1509a2abafb738e761c3c78ba24fe2511ef05f953ce90319f3b76ff19c/qutech_util-2023.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "a3b75957b4533ff32b2dd34a794675bd2ff249c2da1f448e250d9b07e214e06b",
        "md5": "09510038c6958468cadfd9f518261290",
        "sha256": "07ce2c0b977a551bae16270084609eb5ca7445af09a716108dc089dff1990cfc"
      },
      "downloads": -1,
      "filename": "qutech_util-2023.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "09510038c6958468cadfd9f518261290",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 126980,
      "upload_time": "2023-03-08T15:01:55",
      "upload_time_iso_8601": "2023-03-08T15:01:55.907666Z",
      "url": "https://files.pythonhosted.org/packages/a3/b7/5957b4533ff32b2dd34a794675bd2ff249c2da1f448e250d9b07e214e06b/qutech_util-2023.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "cdf2ce1509a2abafb738e761c3c78ba24fe2511ef05f953ce90319f3b76ff19c",
        "md5": "ea2b065ea7c577cdc69cbd84adc7e31a",
        "sha256": "41556ead3abdeffa4a657b090a83589ed2720ad64464ab8f377c22408254e5d7"
      },
      "downloads": -1,
      "filename": "qutech_util-2023.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ea2b065ea7c577cdc69cbd84adc7e31a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 103049,
      "upload_time": "2023-03-08T15:01:59",
      "upload_time_iso_8601": "2023-03-08T15:01:59.462443Z",
      "url": "https://files.pythonhosted.org/packages/cd/f2/ce1509a2abafb738e761c3c78ba24fe2511ef05f953ce90319f3b76ff19c/qutech_util-2023.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}