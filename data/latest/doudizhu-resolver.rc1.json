{
  "info": {
    "author": "aohajin",
    "author_email": "maohaijian@xiimoon.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Copyright (c) 2018 Mao, Haijian\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\nDescription: # 斗地主明牌残局解答工具\r\n        [![PyPI Version](https://img.shields.io/badge/PyPI-0.1.5-orange.svg)](https://pypi.org/project/doudizhu-resolver/)\r\n        \r\n        基于Larry He先生提供的[斗地主引擎](https://github.com/onestraw/doudizhu)的一个玩具残局解答工具\r\n        \r\n        写这个的原因纯粹是在虎扑看了个帖子然后觉得有趣\r\n        \r\n        没怎么优化，性能比较差\r\n        \r\n        ## 首先是一些共识\r\n        - [策梅洛定理](https://en.wikipedia.org/wiki/Zermelo%27s_theorem_(game_theory)) 二人的有限游戏中，如果双方皆拥有完全的资讯，并且运气因素并不牵涉在游戏中，那先行或后行者当一必有一方有必胜/必不败的策略。\r\n        - 斗地主没有和局，残局只考虑双人博弈，明牌是完全资讯，并且不存在运气。因此任何残局先手方要么必胜，要么必败。\r\n        \r\n        ## 本工具能干嘛\r\n        提供了两个功能函数和一个辅助函数\r\n        - is_winable : 给出先后手方的手牌，判断胜负，True表示先手必胜，否则先手必败\r\n        - find_strategy : 给出先后手方的手牌，以及上一轮的出牌（可选），打印先手方必胜的可能出牌方式，如果没有则打印你已经输了\r\n        - clear_cache : 清缓存，因为效率问题计算会缓存所有的中间结果，这个会清理一下虽然并没有什么卵用\r\n        \r\n        ## 扑克的表示\r\n        ### 15种点数\r\n        \r\n            '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A', '2', 'BJ', 'CJ'\r\n        \r\n        - BJ: Black Joker    小王/花/鬼\r\n        - CJ: Colored Joker  大王/花/鬼\r\n        \r\n        ### 4种花色\r\n        \r\n            's': spades   黑桃 ♠\r\n            'h': hearts   红心 ❤\r\n            'd': diamonds 方块 ♦\r\n            'c': clubs    梅花 ♣\r\n        \r\n        ### 牌表字符串\r\n        \r\n            '2c': 单张[ 2 ♣ ]\r\n            '2h-2s-2d-2c-BJ-CJ': 四个2带两王[ 2 ❤ ] , [ 2 ♠ ] , [ 2 ♦ ] , [ 2 ♣ ] , [ BJ  ] , [ CJ  ]\r\n            '3c-4d-5h-6s-7s-8h-9h': 顺子[ 3 ♣ ] , [ 4 ♦ ] , [ 5 ❤ ] , [ 6 ♠ ] , [ 7 ♠ ] , [ 8 ❤ ] , [ 9 ❤ ]\r\n        \r\n        ## Quickstart\r\n        ### Installing\r\n        \r\n        `pip install doudizhu_resolver`\r\n        \r\n        ### 虎扑上给的经典对局demo\r\n        - 先手方手牌'2h-Qd-Qh-10d-10h-7d-7h-5d-5h-3h'\r\n        - 后手方手牌'As-Ac-9c'\r\n        - 首先初始化+看个结果\r\n        ```python\r\n        >>> import doudizhu_resolver\r\n        >>> doudizhu_resolver.find_strategy('2h-Qd-Qh-10d-10h-7d-7h-5d-5h-3h','As-Ac-9c')\r\n        you have already lost.\r\n        ```\r\n        - 结果是先手方必败局\r\n        - 那么有人不服了，我们先手跟程序对局试试\r\n        - 首先出3h，看程序怎么应对\r\n        ```\r\n        >>> doudizhu_resolver.find_strategy('As-Ac-9c','2h-Qd-Qh-10d-10h-7d-7h-5d-5h','3h')\r\n        all winable strategies:\r\n        pass\r\n        ```\r\n        - 程序说pass，那么我们再出5h\r\n        ```\r\n        >>> doudizhu_resolver.find_strategy('As-Ac-9c','2h-Qd-Qh-10d-10h-7d-7h-5d','5h')\r\n        all winable strategies:\r\n          [ 9 ♣ ]\r\n        ```\r\n        - 程序出9c，我们接着出10h\r\n        ```\r\n        >>> doudizhu_resolver.find_strategy('As-Ac','2h-Qd-Qh-10d-7d-7h-5d','10h')\r\n        all winable strategies:\r\n          [ A ♠ ]\r\n        ```\r\n        - 程序出Ac，我们2！\r\n        ```\r\n        >>> doudizhu_resolver.find_strategy('As','Qd-Qh-10d-7d-7h-5d','2h')\r\n        all winable strategies:\r\n        pass\r\n        ```\r\n        - 程序只能pass，然后牌局已经非常清楚了，程序只有一张A，我们手上两张单牌，已经是必败的局了，就不用再往下跑了\r\n        ### 测试一些其他的case\r\n        ```\r\n        >>> doudizhu_resolver.find_strategy('Qd-Qh-10d-10h', '3s')\r\n        all winable strategies:\r\n          [ 10 ❤ ]\r\n          [ Q ❤ ]\r\n          [ 10 ♦ ], [ 10 ❤ ]\r\n          [ Q ♦ ], [ Q ❤ ]\r\n        >>> doudizhu_resolver.find_strategy('Qd-Qh-10d-10h', 'As-3s')\r\n        all winable strategies:\r\n          [ 10 ♦ ], [ 10 ❤ ]\r\n          [ Q ♦ ], [ Q ❤ ]\r\n        >>> doudizhu_resolver.find_strategy('2h-Qd-Qh-10d-10h', 'As-3s')\r\n        all winable strategies:\r\n          [ 10 ❤ ]\r\n          [ Q ❤ ]\r\n          [ 2 ❤ ]\r\n          [ 10 ♦ ], [ 10 ❤ ]\r\n          [ Q ♦ ], [ Q ❤ ]\r\n        >>> doudizhu_resolver.find_strategy('2h-Qd-Qh-10d-10h-3h', 'As-3s')\r\n        all winable strategies:\r\n          [ 3 ❤ ]\r\n          [ 10 ❤ ]\r\n          [ Q ❤ ]\r\n          [ 2 ❤ ]\r\n          [ 10 ♦ ], [ 10 ❤ ]\r\n          [ Q ♦ ], [ Q ❤ ]\r\n        >>> doudizhu_resolver.find_strategy('2h-Qd-Qh-10d-10h-7d-7h-5d-5h-3h', 'As-3s')\r\n        all winable strategies:\r\n          [ 3 ❤ ]\r\n          [ 5 ❤ ]\r\n          [ 7 ❤ ]\r\n          [ 10 ❤ ]\r\n          [ Q ❤ ]\r\n          [ 2 ❤ ]\r\n          [ 5 ❤ ], [ 5 ♦ ]\r\n          [ 7 ❤ ], [ 7 ♦ ]\r\n          [ 10 ♦ ], [ 10 ❤ ]\r\n          [ Q ♦ ], [ Q ❤ ]\r\n        >>> doudizhu_resolver.find_strategy('2h-Qd-Qh-10d-10h-7d-7h-5d-5h-3h', 'As-9s')\r\n        all winable strategies:\r\n          [ 3 ❤ ]\r\n          [ 10 ❤ ]\r\n          [ Q ❤ ]\r\n          [ 2 ❤ ]\r\n          [ 5 ❤ ], [ 5 ♦ ]\r\n          [ 7 ❤ ], [ 7 ♦ ]\r\n          [ 10 ♦ ], [ 10 ❤ ]\r\n          [ Q ♦ ], [ Q ❤ ]\r\n        ```\r\n        \r\nPlatform: UNKNOWN\r\nClassifier: Intended Audience :: Developers\r\nClassifier: License :: OSI Approved :: MIT License\r\nClassifier: Operating System :: MacOS :: MacOS X\r\nClassifier: Operating System :: Microsoft :: Windows\r\nClassifier: Operating System :: POSIX\r\nClassifier: Programming Language :: Python :: 3\r\nClassifier: Topic :: Software Development :: Libraries :: Python Modules\r\nClassifier: Programming Language :: Python :: Implementation :: PyPy\r\nClassifier: Programming Language :: Python :: Implementation :: CPython\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aohajin/doudizhu_resolver",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "doudizhu-resolver",
    "package_url": "https://pypi.org/project/doudizhu-resolver/",
    "platform": "",
    "project_url": "https://pypi.org/project/doudizhu-resolver/",
    "project_urls": {
      "Homepage": "https://github.com/aohajin/doudizhu_resolver"
    },
    "release_url": "https://pypi.org/project/doudizhu-resolver/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "doudizhu puzzle resolver",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4867590,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "086eb65c4cef05dab66524d46172495a40d507501404d672ef3c592fba517c79",
          "md5": "3aa9ecf39b0bd71e494f8f93fcc1749e",
          "sha256": "b8adec5117b3aa8aad3b72bee947e7ac9223cc73909c78b5724f1e3d9b4e3956"
        },
        "downloads": -1,
        "filename": "doudizhu_resolver-0.1.2.tar.gz",
        "has_sig": true,
        "md5_digest": "3aa9ecf39b0bd71e494f8f93fcc1749e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15161,
        "upload_time": "2019-02-26T01:12:36",
        "upload_time_iso_8601": "2019-02-26T01:12:36.491395Z",
        "url": "https://files.pythonhosted.org/packages/08/6e/b65c4cef05dab66524d46172495a40d507501404d672ef3c592fba517c79/doudizhu_resolver-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "086eb65c4cef05dab66524d46172495a40d507501404d672ef3c592fba517c79",
        "md5": "3aa9ecf39b0bd71e494f8f93fcc1749e",
        "sha256": "b8adec5117b3aa8aad3b72bee947e7ac9223cc73909c78b5724f1e3d9b4e3956"
      },
      "downloads": -1,
      "filename": "doudizhu_resolver-0.1.2.tar.gz",
      "has_sig": true,
      "md5_digest": "3aa9ecf39b0bd71e494f8f93fcc1749e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15161,
      "upload_time": "2019-02-26T01:12:36",
      "upload_time_iso_8601": "2019-02-26T01:12:36.491395Z",
      "url": "https://files.pythonhosted.org/packages/08/6e/b65c4cef05dab66524d46172495a40d507501404d672ef3c592fba517c79/doudizhu_resolver-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}