{
  "info": {
    "author": "Yang.Y",
    "author_email": "yang@yangyubo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Applaud\n\n`Applaud` is a Python client library for accessing [App Store Connect API](https://developer.apple.com/documentation/appstoreconnectapi), generated by [Applaudgen](https://github.com/codinn/applaudgen).\n\n[![PyPI version](https://badge.fury.io/py/applaud.svg)](https://badge.fury.io/py/applaud)\n\n## Features\n\n- [x] Support App Store Connect API latest version 1.6\n- [x] Support `filter`, `fileds`, `include`, `limit`, `sort`, `exists` and other query parameters\n- [x] All endpoints / paths are implemented, include, but not limited to: App Information, TestFlight, Users and Roles, Sales and Finances\n- [x] Pythonic, all `camelCase` schema fields are represented as `snake_case` class attributes\n- [x] Embrace [Python type hints](https://www.python.org/dev/peps/pep-0483/)\n- [x] Use [Python Requests](https://docs.python-requests.org/en/latest/) to hanlde HTTP sessions\n- [x] [ErrorResponse](https://developer.apple.com/documentation/appstoreconnectapi/errorresponse) can be catched as exception\n\n## Installation\n\nInstall with `pip`:\n\n```\npip install applaud\n```\n\nInstall with [Poetry](https://python-poetry.org/):\n```\npoetry add applaud\n```\n\nInstall with [Pipenv](https://pipenv.pypa.io/en/latest/):\n```\npipenv install applaud\n```\n\n## Usage\n\nCalls to the API require authorization, so before we get started, you obtain keys to create the tokens from your organization’s App Store Connect account. See [Creating API Keys for App Store Connect API](https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api) to create your keys and tokens.\n\n\n### Connection\n\n`Connection` is the core class of `Applaud`, it holds a connection between client and remote service, [generate a new token](https://developer.apple.com/documentation/appstoreconnectapi/generating_tokens_for_api_requests#3878467) before it expires.\n\n```python\nfrom applaud.connection import Connection\n\n# Create a connection object using API keys\nconnection = Connection(APPSTORE_ISSUER_ID, APPSTORE_KEY_ID, APPSTORE_PRIVATE_KEY)\n```\n\nIn most of cases, all tasks you'd like to perform on remote service should be initiated from a `Connection` object. `Connection` has a bunch of functions help you create `…Endpoint` objects:\n\n```python\n# Return an AppListEndpoint object\nconnection.apps()\n```\n\n### Endpoint\n\nA `…Endpoint` class encapsulates all operations you can perform on a specific resource. For example, this snippet fetches first two (sort by app name) apps that \"ready for sale\" and have game center enabled versions:\n\n```python\n# Return an AppsResponse object\nconnection.apps().filter(\n    app_store_versions_app_store_state=AppStoreVersionState.READY_FOR_SALE\n).exists(\n    game_center_enabled_versions=True\n).limit(\n    2\n).sort(\n    name: SortOrder.ASC\n).get()\n```\n\n#### `…Endpoint.get()`\n\nThe `get()` operation initiates a HTTP `GET` request on the endpoint's path. For example, the URL of [List Apps](https://developer.apple.com/documentation/appstoreconnectapi/list_apps) service endpoint is:\n```\nGET https://api.appstoreconnect.apple.com/v1/apps\n```\n\nThe corresponding code in `Applaud`:\n```python\n# Return an AppsResponse object\nresponse = connection.apps().get()\n\nfor app in response.data:\n    print(f'{app.attributes.name}: {app.attributes.bundle_id}')\n```\n\nUnlike other operations (`create()`, `update()` and `delete()`), `get()` operation can be chained by query parameters functions:\n\n**`filter()`**\n\nYou use `filter()` function to extract matching resources. For example:\n```\nfilter[bundleId]  Attributes, relationships, and IDs by which to filter.\n        [string]\n```\n\nThe corresponding code in `Applaud`:\n```python\nresponse = connection.apps().filter(\n    bundle_id=\"com.exmaple.app1\"\n).get()\n# or\nconnection.apps().filter(\n    bundle_id=[\"com.exmaple.app1\", \"com.exmaple.app2\"]\n).get()\n\nfor app in response.data:\n    print(f'{app.attributes.name}: {app.attributes.bundle_id}')\n```\n\n**`include()`**\n\nYou use `include()` function to ask relationship data to include in the response. For example:\n```\n include  Relationship data to include in the response.\n[string]  Possible values: appClips, appInfos, appStoreVersions,\n          availableTerritories, betaAppLocalizations,\n          betaAppReviewDetail, betaGroups, betaLicenseAgreement,\n          builds, ciProduct, endUserLicenseAgreement,\n          gameCenterEnabledVersions, inAppPurchases, preOrder,\n          preReleaseVersions, prices\n```\n\nThe corresponding code in `Applaud`:\n```python\nresponse = connection.apps().include(\n    AppListEndpoint.Include.BETA_LICENSE_AGREEMENT\n).get()\n# or\nresponse = connection.apps().include(\n    [AppListEndpoint.Include.BETA_LICENSE_AGREEMENT, AppListEndpoint.Include.PRICES]\n).get()\n```\n\n**`fields()`**\n\nYou use `fields()` function to ask fields data to return for included related resources in a `get()` operation. Related resources specified in `fields()` function *MUST* be included explicitly in `include()` function, otherwise, the remote service may not return the fields data that you expect. For example:\n```\nfields[betaLicenseAgreements]  Fields to return for included related types.\n                     [string]  Possible values: agreementText, app\n```\n\nThe corresponding code in `Applaud`:\n```python\nconnection.apps().include(\n    AppListEndpoint.Include.BETA_LICENSE_AGREEMENT\n).fields(\n    beta_license_agreement=[BetaLicenseAgreementField.AGREEMENT_TEXT, BetaLicenseAgreementField.APP]\n).get()\n```\n\n**`limit()`**\n\nYou use `limit()` function to restrict the maximum number of resources to return in a `get()` operation. For example:\n```\n  limit  Number of resources to return.\ninteger  Maximum Value: 200\n```\n\nThe corresponding code in `Applaud`:\n```python\n# Return a response contains 10 apps at most\nconnection.apps().limit(10).get()\n\n# Raise a ValueError exception, the maxinmu allowed value is 200\nconnection.apps().limit(400).get()\n```\n\nYou can also included limit the number of related resources to return, as in `fields()` function, you *MUST* also specify the related resources explicitly in `include()` function. For example:\n```\nlimit[appStoreVersions]  integer\n                         Maximum Value: 50\n```\n\nThe corresponding code in `Applaud`:\n```python\n# All returned apps have 5 related app store version at most\nconnection.apps().include(\n    AppListEndpoint.Include.APP_STORE_VERSIONS\n).limit(app_store_versions=5).get()\n\n# Raise a ValueError exception, the maxinmu allowed value is 50\nconnection.apps().include(\n    AppListEndpoint.Include.APP_STORE_VERSIONS\n).limit(app_store_versions=100).get()\n```\n\nBy leverage `limit()` function with `sort()` function, your script can be more responsive.\n\n**`sort()`**\n\nYou use `sort()` function to sort the returned resources by attributes in ascending or descending order. For example:\n```\n    sort  Attributes by which to sort.\n[string]  Possible values: bundleId, -bundleId, name, -name, sku, -sku\n```\n\nThe corresponding code in `Applaud`:\n```python\nconnection.apps().sort(name=SortOrder.ASC, bundleId=SortOrder.DESC).get()\n```\n\n**`exists()`**\n\n`exists()` is a special type of filter – filter by existence or non-existence of related resource. For example:\n```\nexists[gameCenterEnabledVersions]  [string]\n```\n\nThe corresponding code in `Applaud`:\n```python\nconnection.apps().exists(game_center_enabled_versions=True).get()\n```\n\n#### `…Endpoint.create()`\n\nThe `create()` operation initiates a HTTP `POST` request on the endpoint's path. For example, the URL of [Create an App Store Version](https://developer.apple.com/documentation/appstoreconnectapi/create_an_app_store_version) service endpoint is:\n```\nPOST https://api.appstoreconnect.apple.com/v1/appStoreVersions\n```\n\nThe corresponding code in `Applaud`:\n```python\nrequest = AppStoreVersionCreateRequest(\n            data = AppStoreVersionCreateRequest.Data(\n                relationships = AppStoreVersionCreateRequest.Data.Relationships(\n                    app = AppStoreVersionCreateRequest.Data.Relationships.App(\n                        data = AppStoreVersionCreateRequest.Data.Relationships.App.Data(\n                            id = 'com.exmaple.app1'\n                        )\n                    )\n                ),\n                attributes = AppStoreVersionCreateRequest.Data.Attributes(\n                    version_string = '1.6',\n                    platform = Platform.IOS,\n                    copyright = f'Copyright © 2021 Codinn Technologies. All rights reserved.',\n                    release_type = AppStoreVersionReleaseType.AFTER_APPROVAL\n                )\n            )\n        )\n\n# Return an AppStoreVersionResponse object\nreponse = connection.app_store_versions().create(request)\n\nversion = response.data\nprint(f'{version.version_string}: {version.created_date}, {version.app_store_state}')\n```\n\n#### `…Endpoint.update()`\n\nThe `update()` operation initiates a HTTP `PATCH` request on the endpoint's path. For example, the URL of [Modify an App Store Version](https://developer.apple.com/documentation/appstoreconnectapi/modify_an_app_store_version) service endpoint is:\n```\nPATCH https://api.appstoreconnect.apple.com/v1/appStoreVersions/{id}\n```\n\nThe corresponding code in `Applaud`:\n```python\n# Get the version id created in previous example\nversion_id = version.data.id\n\n# Update version's information\nrequest = AppStoreVersionUpdateRequest(\n            data = AppStoreVersionUpdateRequest.Data(\n                id = version.data.id,\n\n                attributes = AppStoreVersionUpdateRequest.Data.Attributes(\n                    version_string = '1.6.1',\n                    platform = Platform.IOS,\n                    copyright = f'Copyright © 2022 Codinn Technologies. All rights reserved.',\n                    release_type = AppStoreVersionReleaseType.AFTER_APPROVAL\n                )\n            )\n        )\n\n# Return an AppStoreVersionResponse object\nreponse = connection.app_store_version(version_id).update(request)\n\nversion = response.data\nprint(f'{version.version_string}: {version.copyright}, {version.app_store_state}')\n```\n\n#### `…Endpoint.delete()`\n\nThe `delete()` operation initiates a HTTP `DELETE` request on the endpoint's path. For example, the URL of [Delete an App Store Version](https://developer.apple.com/documentation/appstoreconnectapi/delete_an_app_store_version) service endpoint is:\n```\nDELETE https://api.appstoreconnect.apple.com/v1/appStoreVersions/{id}\n```\n\nThe corresponding code in `Applaud`:\n```python\n# Get the version id created in previous example\nversion_id = version.data.id\n\nconnection.app_store_version(version_id).delete()\n```\n\n### Exceptions\n\n`…Endpoint.get()`, `…Endpoint.create()`, `…Endpoint.update()` and `…Endpoint.delete()` may raise two types of exceptions:\n\n1. HTTP request exceptions raised by [Python Requests](https://docs.python-requests.org/en/latest/api/#exceptions)\n2. Remote service returns an [ErrorResponse](https://developer.apple.com/documentation/appstoreconnectapi/errorresponse)\n\nFor the second case, `Applaud` raises an `EndpointException` exception, and attaches all [`ErrorResponse.Error`](https://developer.apple.com/documentation/appstoreconnectapi/errorresponse/errors) objects in `EndpointException.errors` attribute.\n\nSome errors are harmless, for example, App Store Connect has no API for you to tell whether a tester has accepted beta test invitation or not. When you trying to resend invitations to testers, you may encounter an `ALREADY_ACCEPTED` error, it's safe to just ignore such error:\n\n```python\ntry:\n    # Send / resend beta test invitations\n    response = connection.beta_tester_invitations().create(…)\nexcept EndpointException as err:\n    already_accepted_error = False\n    for e in err.errors:\n        if e.code == 'STATE_ERROR.TESTER_INVITE.ALREADY_ACCEPTED':\n            # silent this error\n            already_accepted_error = True\n            break\n\n    if not already_accepted_error:\n        raise err\n```\n\n## Caveats\n\n- Query parameters functions (`filter()`, `include`, `fields` …) play a role only when using with `…Endpoint.get()`. Though there is no side effects if chain it with `…Endpoint.create()`, `…Endpoint.update()` and `…Endpoint.delete()` operations, it is not adviced.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/codinn/applaud",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "applaud",
    "package_url": "https://pypi.org/project/applaud/",
    "platform": "",
    "project_url": "https://pypi.org/project/applaud/",
    "project_urls": {
      "Homepage": "https://github.com/codinn/applaud",
      "Repository": "https://github.com/codinn/applaud.git"
    },
    "release_url": "https://pypi.org/project/applaud/0.9.4/",
    "requires_dist": [
      "authlib (>=0.15.5,<0.16.0)",
      "pydantic[email] (>=1.9.0,<2.0.0)",
      "requests (>=2.27.0,<3.0.0)",
      "Deprecated (>=1.2.13,<2.0.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "The Python SDK to work with the App Store Connect API from Apple.",
    "version": "0.9.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12651270,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8a44bed1e3ef46e1750d193f9320ae2045c0788a85307fb648c2fba6b92c678",
          "md5": "3f566fb40d44a07a06a0e21ff826d30c",
          "sha256": "779e36075e1228073fcf21cfd7c2847ec9e77cb3a9298ae8a7e9e980f55a7636"
        },
        "downloads": -1,
        "filename": "applaud-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f566fb40d44a07a06a0e21ff826d30c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 145239,
        "upload_time": "2022-01-13T06:38:19",
        "upload_time_iso_8601": "2022-01-13T06:38:19.485548Z",
        "url": "https://files.pythonhosted.org/packages/d8/a4/4bed1e3ef46e1750d193f9320ae2045c0788a85307fb648c2fba6b92c678/applaud-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ec59c56bb5feb6e33a5261a17b6c7537c221ec2d023de8f1397f332ef4eb49f",
          "md5": "0311dab07eba2538af1af60f5f04259c",
          "sha256": "604ec44c49bfecaaa9fd82f83cf68833339f97adfcece7e73d50aea7060e0ee8"
        },
        "downloads": -1,
        "filename": "applaud-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0311dab07eba2538af1af60f5f04259c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 84847,
        "upload_time": "2022-01-13T06:38:26",
        "upload_time_iso_8601": "2022-01-13T06:38:26.867555Z",
        "url": "https://files.pythonhosted.org/packages/9e/c5/9c56bb5feb6e33a5261a17b6c7537c221ec2d023de8f1397f332ef4eb49f/applaud-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f21f911338ddac0882ee9a323d361dea96f63766d8602cc70613f1f48b5579f5",
          "md5": "1aa4955f966223501c3e527c3ad19c36",
          "sha256": "6c28a1177d392f9b6fe63d3c10974c25976337c122e8fcc4630f904c0a62022a"
        },
        "downloads": -1,
        "filename": "applaud-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1aa4955f966223501c3e527c3ad19c36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 148928,
        "upload_time": "2022-01-14T05:20:33",
        "upload_time_iso_8601": "2022-01-14T05:20:33.952100Z",
        "url": "https://files.pythonhosted.org/packages/f2/1f/911338ddac0882ee9a323d361dea96f63766d8602cc70613f1f48b5579f5/applaud-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c40f11908518b8df5de5061b7c93d2e1a84f617b29b7880684ff914155336ae",
          "md5": "02bb408f902de7e3bd4ac6eb39b9c43c",
          "sha256": "651be22a5b9fd513fb118195956199a7c2b27a9affed150843007b293b58f3b4"
        },
        "downloads": -1,
        "filename": "applaud-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "02bb408f902de7e3bd4ac6eb39b9c43c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 87821,
        "upload_time": "2022-01-14T05:20:35",
        "upload_time_iso_8601": "2022-01-14T05:20:35.848333Z",
        "url": "https://files.pythonhosted.org/packages/6c/40/f11908518b8df5de5061b7c93d2e1a84f617b29b7880684ff914155336ae/applaud-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a92021cb145b068523b10ca5896cdcbf9875f34515fdd29db40690099b65d3ba",
          "md5": "0a18ba21eb1e40efb9dc9f7ac2ef979d",
          "sha256": "f758a65ee9406ea7c048c71252a6a74b4bd66d15d22fe134631ad2600bdd81ee"
        },
        "downloads": -1,
        "filename": "applaud-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a18ba21eb1e40efb9dc9f7ac2ef979d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 146232,
        "upload_time": "2022-01-16T13:01:14",
        "upload_time_iso_8601": "2022-01-16T13:01:14.305696Z",
        "url": "https://files.pythonhosted.org/packages/a9/20/21cb145b068523b10ca5896cdcbf9875f34515fdd29db40690099b65d3ba/applaud-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "103c1d0aee3c830d3d189c721cc74d1892b033729c7b7b572e284d012d452ea6",
          "md5": "3a093d3ca1e66ecc7a342b71c60c4ccb",
          "sha256": "6f2eae2e85e3769a4bd1b2f1349e3f2afe1d0c7d8aefbd4863a94f68cb502c6a"
        },
        "downloads": -1,
        "filename": "applaud-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3a093d3ca1e66ecc7a342b71c60c4ccb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 87492,
        "upload_time": "2022-01-16T13:01:16",
        "upload_time_iso_8601": "2022-01-16T13:01:16.430006Z",
        "url": "https://files.pythonhosted.org/packages/10/3c/1d0aee3c830d3d189c721cc74d1892b033729c7b7b572e284d012d452ea6/applaud-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c34cdd4b5547192effd13f7b2f51d2899e7770e8927ff987b1cac2288093019a",
          "md5": "41ece6f661a32e939a33a59139047e6e",
          "sha256": "4bb3671f57395f6f0660fb1b868b14c2af86158cc2a0b33adbb8865867c73257"
        },
        "downloads": -1,
        "filename": "applaud-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41ece6f661a32e939a33a59139047e6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 146297,
        "upload_time": "2022-01-16T16:33:46",
        "upload_time_iso_8601": "2022-01-16T16:33:46.025959Z",
        "url": "https://files.pythonhosted.org/packages/c3/4c/dd4b5547192effd13f7b2f51d2899e7770e8927ff987b1cac2288093019a/applaud-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc69e233a98cd087c3d42bfc56494d86ca56bf05084f4b46a4ce429f2dec7c1d",
          "md5": "86220240d73caf44a0e6ba80031b8f85",
          "sha256": "c3be79130cd7b1782e2854ac9cacff6bdc76d0f472f29ac2fe520199402ab77b"
        },
        "downloads": -1,
        "filename": "applaud-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "86220240d73caf44a0e6ba80031b8f85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 87548,
        "upload_time": "2022-01-16T16:33:47",
        "upload_time_iso_8601": "2022-01-16T16:33:47.984199Z",
        "url": "https://files.pythonhosted.org/packages/dc/69/e233a98cd087c3d42bfc56494d86ca56bf05084f4b46a4ce429f2dec7c1d/applaud-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0238da304e717727f5d4e3ecd2207ff948d383b0b63b294d9b9d4122d57298f4",
          "md5": "5136a019077ba76242dd79d68d8a9a7e",
          "sha256": "bf2970491b9397350dfa62ab76bd47dd53f42d79dc613480fbdca5f48393a48d"
        },
        "downloads": -1,
        "filename": "applaud-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5136a019077ba76242dd79d68d8a9a7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 146766,
        "upload_time": "2022-01-17T02:40:17",
        "upload_time_iso_8601": "2022-01-17T02:40:17.364456Z",
        "url": "https://files.pythonhosted.org/packages/02/38/da304e717727f5d4e3ecd2207ff948d383b0b63b294d9b9d4122d57298f4/applaud-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b081d4df891c23783cbc5e026cf157ca0cdbf61cd4e738cf1b3c472bb69fe32",
          "md5": "be0787fb0d3eded2bd75d35238cc73d4",
          "sha256": "903d1fa1428d27cf26d59ba221df1d250de2171712f510178423d86dc35a0cc1"
        },
        "downloads": -1,
        "filename": "applaud-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "be0787fb0d3eded2bd75d35238cc73d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 236323,
        "upload_time": "2022-01-17T02:40:20",
        "upload_time_iso_8601": "2022-01-17T02:40:20.159441Z",
        "url": "https://files.pythonhosted.org/packages/8b/08/1d4df891c23783cbc5e026cf157ca0cdbf61cd4e738cf1b3c472bb69fe32/applaud-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fb36bf85798a812f49a61ca6aa3a8f0385b8dc547dc11d9c9791f9f5c88f3d9",
          "md5": "a5397c81e48e0c0bffced27541189b18",
          "sha256": "c58dc1ad524f19c90d6b79f31df6e26daaa82d18039a275b56203c3b33c91fcd"
        },
        "downloads": -1,
        "filename": "applaud-0.9.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5397c81e48e0c0bffced27541189b18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 147191,
        "upload_time": "2022-01-22T07:28:06",
        "upload_time_iso_8601": "2022-01-22T07:28:06.872163Z",
        "url": "https://files.pythonhosted.org/packages/1f/b3/6bf85798a812f49a61ca6aa3a8f0385b8dc547dc11d9c9791f9f5c88f3d9/applaud-0.9.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cee070f2e196259f0db2c4c43ca7a6e8d0593302192356c2c04cb396a8ece53",
          "md5": "99c5b532a5124e94d4f84c5ac9f4fe79",
          "sha256": "5012ca823d74937c8eb7c2dc946f4d097da00f86b7665477cf511add5821bfce"
        },
        "downloads": -1,
        "filename": "applaud-0.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "99c5b532a5124e94d4f84c5ac9f4fe79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 88948,
        "upload_time": "2022-01-22T07:28:08",
        "upload_time_iso_8601": "2022-01-22T07:28:08.503271Z",
        "url": "https://files.pythonhosted.org/packages/2c/ee/070f2e196259f0db2c4c43ca7a6e8d0593302192356c2c04cb396a8ece53/applaud-0.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1fb36bf85798a812f49a61ca6aa3a8f0385b8dc547dc11d9c9791f9f5c88f3d9",
        "md5": "a5397c81e48e0c0bffced27541189b18",
        "sha256": "c58dc1ad524f19c90d6b79f31df6e26daaa82d18039a275b56203c3b33c91fcd"
      },
      "downloads": -1,
      "filename": "applaud-0.9.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5397c81e48e0c0bffced27541189b18",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 147191,
      "upload_time": "2022-01-22T07:28:06",
      "upload_time_iso_8601": "2022-01-22T07:28:06.872163Z",
      "url": "https://files.pythonhosted.org/packages/1f/b3/6bf85798a812f49a61ca6aa3a8f0385b8dc547dc11d9c9791f9f5c88f3d9/applaud-0.9.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cee070f2e196259f0db2c4c43ca7a6e8d0593302192356c2c04cb396a8ece53",
        "md5": "99c5b532a5124e94d4f84c5ac9f4fe79",
        "sha256": "5012ca823d74937c8eb7c2dc946f4d097da00f86b7665477cf511add5821bfce"
      },
      "downloads": -1,
      "filename": "applaud-0.9.4.tar.gz",
      "has_sig": false,
      "md5_digest": "99c5b532a5124e94d4f84c5ac9f4fe79",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 88948,
      "upload_time": "2022-01-22T07:28:08",
      "upload_time_iso_8601": "2022-01-22T07:28:08.503271Z",
      "url": "https://files.pythonhosted.org/packages/2c/ee/070f2e196259f0db2c4c43ca7a6e8d0593302192356c2c04cb396a8ece53/applaud-0.9.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}