{
  "info": {
    "author": "Stephane Massonnet",
    "author_email": "stephane.massonnet@epfl.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "<!-- These are examples of badges you might want to add to your README:\n     please update the URLs accordingly\n\n[![Built Status](https://api.cirrus-ci.com/github/<USER>/twcompose.svg?branch=main)](https://cirrus-ci.com/github/<USER>/twcompose)\n[![ReadTheDocs](https://readthedocs.org/projects/twcompose/badge/?version=latest)](https://twcompose.readthedocs.io/en/stable/)\n[![Coveralls](https://img.shields.io/coveralls/github/<USER>/twcompose/main.svg)](https://coveralls.io/r/<USER>/twcompose)\n[![Conda-Forge](https://img.shields.io/conda/vn/conda-forge/twcompose.svg)](https://anaconda.org/conda-forge/twcompose)\n[![Monthly Downloads](https://pepy.tech/badge/twcompose/month)](https://pepy.tech/project/twcompose)\n[![Twitter](https://img.shields.io/twitter/url/http/shields.io.svg?style=social&label=Twitter)](https://twitter.com/twcompose)\n-->\n\n# TwCompose\n\n[![PyPI-Server](https://img.shields.io/pypi/v/twcompose.svg)](https://pypi.org/project/twcompose/)\n[![Project generated with PyScaffold](https://img.shields.io/badge/-PyScaffold-005CA0?logo=pyscaffold)](https://pyscaffold.org/)\n\n> CLI to manage rules and start tweets collection from the Twitter Stream API\n\nWith TwCompose, you can:\n\n- Add, modify and delete Twitter stream rules in a simple configuration file\n- Validate that your rules are properly format before applying your changes\n- Get volume estimation for your rules to stay within the rate limits\n- Start collecting tweets in the background (Docker) with error handling and restart mechanism\n\n## Installation\n\nInstalling TwCompose requires at least Python 3.8\n\n```shell\npip install twcompose\n```\n\n## Usage\n\n### Create a credentials file\n\nFirst, we need to specify the [Twitter authentication token](https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api) to connect to the Twitter Stream API.\nThis needs to be specified in a YAML file (called `credentials.yml` by default) with the following format:\n\n```yml\ntwitter_token: \"<TWITTER_BEARER_TOKEN>\"\n```\n\n### Create a Twitter-Compose file\n\nThe following is an example of a `twitter-compose.yml` file.\nIt defines stream parameters and rules as well as output driver to save collected tweets.\n\n```yml\n# twitter-compose.yml\nimage_tag: \"0.1.0\"\n\noutput:\n  driver: local\n  path: ./data/\n  options:\n    max_file_size: 1048576\n\nparameters:\n  tweet_fields:\n    - text\n\nstreams:\n  cop26:\n    - tag: COP26GDA\n      value: \"#COP26GDA\"\n    - tag: bare cop26\n      value: cop26 OR COP26 OR Cop26\n```\n\n#### Collection image reference\n\nControls the name and version of the Docker image used for the collector container.\n\n```yml\n# twitter-compose.yml\nimage_tag: \"0.1.0\"\nimage_name: \"ghcr.io/smassonnet/twcollect\"\n```\n\n#### Output driver reference\n\nControls how the collected tweets are being saved.\nOnly support saving to a local folder in gzip compressed JSONLines files.\nFiles are split according the `max_file_size` option.\n\n```yml\n# twitter-compose.yml\noutput:\n  driver: local\n  path: ./data/\n  options:\n    max_file_size: 1048576\n```\n\n##### `driver`\n\nOnly supports collection to a `local` folder.\n\n##### `path`\n\nPath to the local folder to save into.\n\n##### `options`\n\n- `max_file_size` (number of bytes): Tweets are written to a new file when the file size reaches that limit. Defaults to 1 Gb.\n\n#### Stream parameters reference\n\nControls the fields collected from the tweets.\n\n```yml\n# twitter-compose.yml\nparameters:\n  tweet_fields:\n    - text\n```\n\nSee the [Twitter stream API reference](https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream) for documentation.\n\nNote that the following fields correspond to the Twitter fields ending with `.fields` instead of `_fields`:\n\n- `media_fields`: `media.fields`\n- `place_fields`: `place.fields`\n- `poll_fields`: `poll.fields`\n- `tweet_fields`: `tweet.fields`\n- `user_fields`: `user.fields`\n\n#### Stream rules reference\n\nDefines the scope of tweet to collect. See [Twitter stream rules for reference](https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/post-tweets-search-stream-rules).\n\nIt is organised as a mapping between a stream group name (`cop26` is the example below) and a list of Twitter stream rules.\nNaming the stream rules with unique and comprehensive tags is highly recommended.\n\n```yml\n# twitter-compose.yml\nstreams:\n  cop26:\n    - tag: COP26GDA\n      value: \"#COP26GDA\"\n    - tag: bare cop26\n      value: cop26 OR COP26 OR Cop26\n```\n\n### Command-line inteface\n\nRun `twitter-compose --help` from the command-line:\n\n```\nusage: twitter-compose [-h] [-f TC_FILE] [-p PROJECT_NAME]\n                       [--credentials-file CREDENTIALS]\n                       [--log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}]\n                       {config,up,status,stop,volume} ...\n\nManage Twitter streams\n\npositional arguments:\n  {config,up,status,stop,volume}\n    config              Show parsed configuration\n    up                  Update Twitter streams\n    status              Status of defined streams\n    stop                Stop Twitter streams\n    volume              Estimation of the monthly volume of streams\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f TC_FILE, --file TC_FILE\n                        The file name of the twitter-compose configuration\n  -p PROJECT_NAME, --project-name PROJECT_NAME\n                        Name of the current project\n  --credentials-file CREDENTIALS, -c CREDENTIALS\n                        A yaml file with mapping between credential name and\n                        value\n  --log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}\n                        Logging level\n```\n\n#### `config`\n\nValidates and prints the parsed `twitter-compose.yml` configuration.\n\n#### `up`\n\nUpdate twitter stream rules and starts/updates the local running stream collector Docker container.\nIf takes an optional `--check` argument to display the changes without running the update.\n\n#### `status`\n\nShow the installed Twitter stream rules and the status of the stream collector.\n\n#### `stop`\n\nStop the Docker container running the collection.\n\n\n<!-- pyscaffold-notes -->\n\n## Note\n\nThis project has been set up using PyScaffold 4.3.1. For details and usage\ninformation on PyScaffold see https://pyscaffold.org/.\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/smassonnet/twcompose",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "twcompose",
    "package_url": "https://pypi.org/project/twcompose/",
    "platform": "any",
    "project_url": "https://pypi.org/project/twcompose/",
    "project_urls": {
      "Changelog": "https://github.com/smassonnet/twcompose/releases",
      "Documentation": "https://github.com/smassonnet/twcompose",
      "Download": "https://pypi.org/project/twcompose/#files",
      "Homepage": "https://github.com/smassonnet/twcompose",
      "Source": "https://github.com/smassonnet/twcompose",
      "Tracker": "https://github.com/smassonnet/twcompose/issues"
    },
    "release_url": "https://pypi.org/project/twcompose/0.1.0/",
    "requires_dist": [
      "docker",
      "twcollect (>=0.1.0)",
      "tweepy",
      "setuptools ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "summary": "CLI to manage rules and start tweets collection from the Twitter Stream API",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16283322,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39346d768c106e1307e86b8fdb0442464974ec141aa64ff54fea2bc1bb4ed505",
          "md5": "1f59da74b69179abe4ac536bad1b0f0d",
          "sha256": "49802e136c91c3e46ca2b2ab21e070c96888370d5d3d6aab974a61d9d476c873"
        },
        "downloads": -1,
        "filename": "twcompose-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f59da74b69179abe4ac536bad1b0f0d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 22496,
        "upload_time": "2023-01-02T23:49:12",
        "upload_time_iso_8601": "2023-01-02T23:49:12.208855Z",
        "url": "https://files.pythonhosted.org/packages/39/34/6d768c106e1307e86b8fdb0442464974ec141aa64ff54fea2bc1bb4ed505/twcompose-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85a46ae5c12fa79d31a6cbdf3d63acf51ba1baac984cee0ea9c2ee871ec7bdc8",
          "md5": "71dd845b9cfbf865c3ccdd5162fe93b7",
          "sha256": "4c08da0cade98e8bbe69d49de91f7e0b1bedf1cb1b77cffd87050641d20f214b"
        },
        "downloads": -1,
        "filename": "twcompose-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "71dd845b9cfbf865c3ccdd5162fe93b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22251,
        "upload_time": "2023-01-02T23:49:14",
        "upload_time_iso_8601": "2023-01-02T23:49:14.769189Z",
        "url": "https://files.pythonhosted.org/packages/85/a4/6ae5c12fa79d31a6cbdf3d63acf51ba1baac984cee0ea9c2ee871ec7bdc8/twcompose-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39346d768c106e1307e86b8fdb0442464974ec141aa64ff54fea2bc1bb4ed505",
        "md5": "1f59da74b69179abe4ac536bad1b0f0d",
        "sha256": "49802e136c91c3e46ca2b2ab21e070c96888370d5d3d6aab974a61d9d476c873"
      },
      "downloads": -1,
      "filename": "twcompose-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1f59da74b69179abe4ac536bad1b0f0d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 22496,
      "upload_time": "2023-01-02T23:49:12",
      "upload_time_iso_8601": "2023-01-02T23:49:12.208855Z",
      "url": "https://files.pythonhosted.org/packages/39/34/6d768c106e1307e86b8fdb0442464974ec141aa64ff54fea2bc1bb4ed505/twcompose-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85a46ae5c12fa79d31a6cbdf3d63acf51ba1baac984cee0ea9c2ee871ec7bdc8",
        "md5": "71dd845b9cfbf865c3ccdd5162fe93b7",
        "sha256": "4c08da0cade98e8bbe69d49de91f7e0b1bedf1cb1b77cffd87050641d20f214b"
      },
      "downloads": -1,
      "filename": "twcompose-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "71dd845b9cfbf865c3ccdd5162fe93b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 22251,
      "upload_time": "2023-01-02T23:49:14",
      "upload_time_iso_8601": "2023-01-02T23:49:14.769189Z",
      "url": "https://files.pythonhosted.org/packages/85/a4/6ae5c12fa79d31a6cbdf3d63acf51ba1baac984cee0ea9c2ee871ec7bdc8/twcompose-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}