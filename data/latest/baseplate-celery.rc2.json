{
  "info": {
    "author": "reddit",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# baseplate-celery\n\nBaseplate Celery allows us to integrate Celery in Baseplate.py services. [Celery](https://docs.celeryproject.org/en/stable/getting-started/introduction.html) is an open source asynchronous task queue. Integrating your Baseplate.py service with Celery can enable you to offload some tasks to run in the background, while leveraging some of Baseplate.py's configurations and telemetry.\n\nBaseplate Celery will allow you to:\n1. Instantiate an instance of Celery.\n2. Identify background task functions within your application with a simple decorator.\n3. Push background tasks to a message queue (or broker), currently supported broker is Redis. \n4. Instantiate Celery workers to pick up tasks from the queue and execute in the background.\n\n\n## Usage\n\nInstall the library:\n\n```console\n$ pip install baseplate-celery\n```\n\n### 1. Instantiate BaseplateCelery\nConfigure `BaseplateCelery` from the main application's configuration file. \n\n```ini\n[app:main]\n\n...\n\n# required: name of application\ncelery.service_name = helloworld\n\n# required: the Redis instance to connect to as the message broker\ncelery.broker_url = redis://localhost:6379/1\n\n...\n\n```\n\nIt is recommended to create a dedicated module for `BaseplateCelery` in your application. For example, your project structure could look like:\n```\nhelloworld/jobs/__init__.py\n               /celery.py\n               /tasks.py\n```\n\nCreate the `BaseplateCelery` instance. To use `BaseplateCelery` within your application, import this instance.\n#### `helloworld/jobs/celery.py`\n```python\nfrom baseplate-celery import BaseplateCelery\n\ncelery_app = BaseplateCelery(\"helloworld\")\n```\n\n### 2. Identify background tasks\nCreate a file called `tasks.py` in this module which contains all the functions you would like to register as Celery tasks. One option is to define all tasks directly in this file. Another option if the tasks are defined in various parts of your application is to import all of them into the `tasks.py` file.\n\n#### `helloworld/jobs/tasks.py`\n```python\nfrom .celery import celery_app\n\n@celery_app.task\ndef add(ctx, x, y):\n    return x + y\n```\n\nAll task functions pass the Baseplate `RequestContext` as a parameter to avoid issues of concurrency.\n\n### 3. Configure BaseplateCelery workers\nIn your application's configuration `.ini` file, add a section for configuring the `celery-worker`.\n\n```ini\n[app:celery-worker]\n\n# required: factory specifies the entry point for setting up Baseplate on the Celery worker\nfactory = helloworld:make_celery_worker\n\n# required: the module which contains the `tasks.py` file\ntasks = helloworld.jobs\n\n# optional: additional command line arguments for starting the Celery worker\ncommand = --loglevel INFO --pool gevent --time-limit 180 --concurrency 1\n```\n\nTo start the celery worker, use the [`baseplate-serve`](https://baseplate.readthedocs.io/en/stable/cli/serve.html) command:\n```\nbaseplate-serve example.ini --app-name celery-worker\n```\n\nYour application might already have a `make_baseplate` function doing all the Baseplate setup. The celery worker's entrypoint function should do the exact same Baseplate setup and then start the workers. For example:\n\n```py\n\ndef make_baseplate(app_config):\n    baseplate = Baseplate(app_config)\n    baseplate.configure_observers()\n    celery_app.set_baseplate(baseplate)\n    ...\n\ndef make_celery_worker(app_config):\n    make_baseplate(app_config)\n    celery_app.run_workers(app_config)\n```\n\n\n### 4. Push background tasks to broker\nNow that your application is set configured with a BaseplateCelery instance and the Celery workers are running, you can push a task to the broker by calling:\n```\nadd.delay(4, 4)\n```\n\n## Documentation: \n\nSee [the documentation] for more information.\n\n[the documentation]: \n\n## Development\n\nA Dockerfile is provided to get a development environment running. To use it,\nbuild the base Docker image:\n\n```console\n$ docker build -t baseplate_celery .\n```\n\nAnd then fire up the environment and use the provided Makefile targets to do\ncommon tasks:\n\n```console\n$ docker run -it -v $PWD:/src -w /src baseplate_celery\n$ make fmt\n```\n\nThe following make targets are provided:\n\n* `fmt`: Apply automatic formatting to the source code.\n* `lint`: Run linters on the code.\n* `test`: Run the test suite.\n* `docs`: Build the docs. Output can be found in `build/html/`.\n\nNote: some tests are skipped by default locally because they are quite slow.\nEnable these by setting CI=true in the environment: `CI=true make test`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/reddit/baseplate-celery",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "baseplate-celery",
    "package_url": "https://pypi.org/project/baseplate-celery/",
    "platform": "",
    "project_url": "https://pypi.org/project/baseplate-celery/",
    "project_urls": {
      "Documentation": "https://reddit-baseplate-celery.readthedocs.io/",
      "Homepage": "https://github.com/reddit/baseplate-celery"
    },
    "release_url": "https://pypi.org/project/baseplate-celery/1.0.0a1/",
    "requires_dist": [
      "baseplate (<3.0,>=2.0.0a1)"
    ],
    "requires_python": ">=3.7",
    "summary": "reddit's python celery framework",
    "version": "1.0.0a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11838236,
  "releases": {
    "0.0.0.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22cfc7639581ced22dcfae17c02c099955b213c004d77307787c754c4d21f94e",
          "md5": "211121e4d5ce76eaf29403bc4dafceef",
          "sha256": "8947d5f42846cfa800e4aafec572090ae3efb25acb475548b53921523098f3e6"
        },
        "downloads": -1,
        "filename": "baseplate_celery-0.0.0.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "211121e4d5ce76eaf29403bc4dafceef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7745,
        "upload_time": "2021-10-26T16:41:39",
        "upload_time_iso_8601": "2021-10-26T16:41:39.076388Z",
        "url": "https://files.pythonhosted.org/packages/22/cf/c7639581ced22dcfae17c02c099955b213c004d77307787c754c4d21f94e/baseplate_celery-0.0.0.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a5e95f4fd057dbade410d24a486ab3a94eeb8cddaa6eaf0324959a9fa3b06e1",
          "md5": "57e2182446b70bef99043c5239446433",
          "sha256": "13632ba5f805466364d113c88e9d38f5d07a06b8f15b65794444c74d4c37c53f"
        },
        "downloads": -1,
        "filename": "baseplate_celery-1.0.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57e2182446b70bef99043c5239446433",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5843,
        "upload_time": "2021-10-26T17:51:00",
        "upload_time_iso_8601": "2021-10-26T17:51:00.165776Z",
        "url": "https://files.pythonhosted.org/packages/0a/5e/95f4fd057dbade410d24a486ab3a94eeb8cddaa6eaf0324959a9fa3b06e1/baseplate_celery-1.0.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec1fc4b3b1a4a123cacbf51c2c5b29117fc649a6c89307f3443c665916f86065",
          "md5": "6f01df93fa0a9956a631dd08fb785d24",
          "sha256": "5e37fb055bebce15490693d78451cef231054e269642f51ae2740094715a0edc"
        },
        "downloads": -1,
        "filename": "baseplate_celery-1.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "6f01df93fa0a9956a631dd08fb785d24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8403,
        "upload_time": "2021-10-26T17:51:02",
        "upload_time_iso_8601": "2021-10-26T17:51:02.460895Z",
        "url": "https://files.pythonhosted.org/packages/ec/1f/c4b3b1a4a123cacbf51c2c5b29117fc649a6c89307f3443c665916f86065/baseplate_celery-1.0.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a5e95f4fd057dbade410d24a486ab3a94eeb8cddaa6eaf0324959a9fa3b06e1",
        "md5": "57e2182446b70bef99043c5239446433",
        "sha256": "13632ba5f805466364d113c88e9d38f5d07a06b8f15b65794444c74d4c37c53f"
      },
      "downloads": -1,
      "filename": "baseplate_celery-1.0.0a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "57e2182446b70bef99043c5239446433",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5843,
      "upload_time": "2021-10-26T17:51:00",
      "upload_time_iso_8601": "2021-10-26T17:51:00.165776Z",
      "url": "https://files.pythonhosted.org/packages/0a/5e/95f4fd057dbade410d24a486ab3a94eeb8cddaa6eaf0324959a9fa3b06e1/baseplate_celery-1.0.0a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec1fc4b3b1a4a123cacbf51c2c5b29117fc649a6c89307f3443c665916f86065",
        "md5": "6f01df93fa0a9956a631dd08fb785d24",
        "sha256": "5e37fb055bebce15490693d78451cef231054e269642f51ae2740094715a0edc"
      },
      "downloads": -1,
      "filename": "baseplate_celery-1.0.0a1.tar.gz",
      "has_sig": false,
      "md5_digest": "6f01df93fa0a9956a631dd08fb785d24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 8403,
      "upload_time": "2021-10-26T17:51:02",
      "upload_time_iso_8601": "2021-10-26T17:51:02.460895Z",
      "url": "https://files.pythonhosted.org/packages/ec/1f/c4b3b1a4a123cacbf51c2c5b29117fc649a6c89307f3443c665916f86065/baseplate_celery-1.0.0a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}