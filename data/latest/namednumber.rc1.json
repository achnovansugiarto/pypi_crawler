{
  "info": {
    "author": "",
    "author_email": "Torin Halsted <modularizer@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "# NamedNumber\n\n```commandline\npip install namednumber\n```\nNamed number is a simple package which generates unique names which correspond one-to-one with numbers.\n`NamedNumber` subclasses `int`, making it versatile and easy to use. This can be used to generate fun names that are easy to rember for\nlog records, database entries, products, temporary passwords, etc.\n\n\n* [Getting Started](#getting-started)\n  * [basic](#basic)\n  * [why](#why)\n  * [custom](#custom-format)\n  \n* [Command Line](#command-line)\n* [Shuffling](#shuffling)\n  * [limitations](#limitations)\n  * [encryption placeholder](#encryption-placeholder)  \n* [Stylizing](#stylizing)\n\n# Getting started\n\n### basic\nCreate an integer with a seemingly randomly shuffled name associated with it\n```python\nfrom namednumber import NamedNumber\nx = NamedNumber(50)\nprint(f\"{x=}\")  # x=<destructive rhino (50)>\nprint(str(x))  # destructive rhino\n```\n\nMapping is one to one and reversible so you can also look up a number by its name\n```python\nprint(int(NamedNumber(\"destructive rhino\"))) # 50\n```\n\n### why\n* fun\n* just because\n* generate easy to remember names for files, records, parts, etc.\n* `flexible pig` is easier to remember than `116994`\n* use for auto-generated temporary passwords or two-step verification\n\n### math\nDo math on it and get results in the same named format (_see fancy_number.py for how this works_)\n```python\nprint(f\"{x+1=}\")  # x+1=<crucial impala (51)>\nx *= 2\nprint(f\"{x=}\")  # x=<huge crocodile (100)>\n```\n\n### custom format\nSpecify your own format using common wordsets and character sets\n```python\ny = NamedNumber(422, \"Bob saw %4% %adjective% %plural_animals% which were all %color%\")\nprint(f\"{y=}\") # <Bob saw 3 impressive wombats which were all maroon (422)>\n```\n\n### custom wordlists\nSpecify your own custom wordlists\n```python\nz = NamedNumber(30, \"%emotion%_%animal%\", emotion=['happy', 'sad', 'angry', 'hungry'])\nprint(f\"{z=}\") # z=<happy_rabbit (30)>\n```\n\n### saved format\nSave name formats and use them to generate numbers\n```python\nfrom namednumber import RandomizedNameFmt\nfmt = RandomizedNameFmt(\"%emotion% %animal% %hex#5%\", emotion=['happy', 'sad', 'angry', 'hungry'])\n\nprint(f\"{fmt(0)=}\") # fmt(0)=<sad skunk 3113e (0)>\nprint(f\"{fmt[1]=}\") # fmt[1]=<happy woodchuck a48ef (1)>\nprint(f\"{fmt[2:10:3]=}\") # fmt[2:10:3]=[<hungry kookaburra 3ec9f (2)>, <hungry iguana 841c4 (5)>, <sad shark 11041 (8)>]\n```\n\n### moderately interesting\nSee the individual values of the components\n```python\nprint(dict(x)) # {'huge': 151, 'crocodile': 29}\n```\n# Command Line\n\n### generate a random number\n```commandline\nnamednumber\n```\n\n### convert a number\n```commandline\nnamednumber 51\n```\n\n### or multiple\n```commandline\nnamednumber 51 52\n```\n```commandline\nnamednumber :5\n```\n```commandline\nnamednumber 10:15\n```\n```commandline\nnamednumber 20:40:7\n```\n\n### specify format\n```commandline\nnamednumber :4 --fmt=\"%emotion% %pet%\" --emotion=[\"happy\",\"sad\",\"angry\",\"hungry\"] --pet=[\"puppy\",\"kitten\",\"turtle\",\"lizard\"]\n```\n\n### specify --shuffle (default) or --inc\n```commandline\nnamednumber :8 --fmt=\"%emotion% %pet%\"  --inc --emotion=[\"happy\",\"sad\",\"angry\",\"hungry\"] --pet=[\"puppy\",\"kitten\",\"turtle\",\"lizard\"]\n```\n\n### specify seed\n```commandline\nnamednumber 50 --seed=321\n```\n\n# Shuffling\n\n### problem\nThe default functionality of the `NameFmt` object is to use the first wordlist as the high bit, second as next highest, \netc. and to convert a number to a list of indices for the bases. Therefore, it will by default produce ordered  incrementing results.\n\n```python\nfrom namednumber import NameFmt\nfmt = NameFmt(fmt=\"%first% %second%\", first=[\"red\", \"green\", \"blue\"], second=[\"car\", \"bike\"])\nprint(fmt[:]) # [<red car (0)>, <red bike (1)>, <green car (2)>, <green bike (3)>, <blue car (4)>, <blue bike (5)>]\n```\n\n### solution\nIn some cases this is the desired result, but in other cases it is not. Therefore, we need some reversible way of \nscrambling the numbers, so that we instead get this.\n\n```python\nfmt = RandomizedNameFmt(fmt=\"%first% %second%\", first=[\"red\", \"green\", \"blue\"], second=[\"car\", \"bike\"])\nprint(fmt[:]) # [<blue car (0)>, <green bike (1)>, <red car (2)>, <green car (3)>, <red bike (4)>, <blue bike (5)>]\n```\n\nOne easy way to do this is to create a one-to-one mapping is to create a shuffled list of numbers and use the \n`index <-> value` mapping. This works well for small wordsets but scales poorly as it requires you to precompute\nthe large shuffled list and then store it in memory or some form of a memory-mapped file.\n\n### limitations\n`RandomizedNameFmt` works using `np.random.permutation`, but it can be **very slow to initialize if used with sets of length > (1<<23)**.\nTherefore, due to memory and performance concerns, `max_size_allowed = 1 << 23`. Use `RandomizedNameFmt.plot_performance` to plot\ninitialization time for varying sized optionsets.\n\n\n### encryption placeholder\nWe don't yet have a great solution, but we have left a few functions which can be overwritten to use whatever shuffling algorithm you desire.\n```python\nclass MyNameFmt(NameFmt):\n    def init_cipher(self):\n        # setup here\n        pass\n\n    def encrypt(self, i):\n        return (7 * i + 23) % self.max_number\n\n    def decrypt(self, i):\n        return int((i - 23 % self.max_number)/7)\n\nmy_fmt = MyNameFmt()\nmy_fmt.plot_encryption(50)\nprint(my_fmt[:5]) # [<all chimpanzee (0)>, <all doe (1)>, <all fish (2)>, <all goat (3)>, <all horse (4)>]\n```\n\n\n## Stylizing\nTo allow for additional fine-tuning of the string, we have also included placeholders for stylizing and de-stylizing the names.\n\n```python\nclass sPoNGEboBNameFmt(RandomizedNameFmt):\n    def reformat(self, name):\n        NAME = name.upper()\n        n = int(len(name)/2 + 1)\n        upper = self.rng.permutation([0]*n + [1]*n)\n        return \"\".join([NAME[i] if upper[i] else name[i] for i in range(len(name))])\n    \n    def deformat(self, name):\n        return name.lower()\n\ns_fmt = sPoNGEboBNameFmt()\nprint(s_fmt[:5]) # [<CLean GOat (0)>, <SuBjecTIve BaT (1)>, <inVALuAbLE boNObo (2)>, <TiGht groUnDHOG (3)>, <BroWn yAK (4)>]\n```\n\n## Options\n\n### wordlists\nload your own wordlist from file using the `Wordlist` class. `.json`, `.yml` are supported. for `.txt` files or other formats it is assumed that there is one word per line.\n```python\nfrom options import Wordlist\nfrom name_fmt import RandomizedNameFmt\nw = Wordlist(\"wordlists/128_singular_animals.txt\")\n\nr = RandomizedNameFmt(\"%animal%\", animal=w)\n```\n\n### pre-existing lists\n#### wordsets\n```python\nprint(list(options.wordsets.keys()))\n# ['colors_16', 'singular_animals_128', 'plural_animals_128', 'rgb_24bit', 'singular_nouns_1k', 'plural_nouns_1k',\n# 'adjectives_1k']\n```\n\n#### charsets\n```python\nprint(list(options.charsets.keys()))\n# ['binary', 'octadecimal', 'decimal', 'hexadecimal', 'lowercase', 'uppercase', 'punctuation', 'whitespace',\n# 'ascii_128', 'ascii_128_unescaped', 'ascii_256', 'ascii_256_unescaped', 'ascii_512', 'ascii_512_unescaped',\n# 'ascii_1028', 'ascii_1028_unescaped', 'greek_lowercase', 'greek_uppercase', 'vowels_lowercase',\n# 'vowels_uppercase', 'vowels', 'consonants_lowercase', 'consonants_uppercase', 'consonants', 'alphabet',\n# 'alphanumeric_lowercase', 'alphanumeric_uppercase', 'alphanumeric', 'greek_alphabet']\n```\n\n#### wordset aliases\n```python\nprint(list(options.wordset_aliases.keys()))\n# ['colors', 'color', 'plural_animal', 'plural_animals', 'animals', 'singular_animal', 'animal', 'plural_nouns',\n# 'plural_noun', 'singular_nouns', 'singular_noun', 'noun', 'adjectives', 'adjective']\n```\n\n#### charset aliases\n```python\nprint(list(options.charset_aliases.keys()))\n# ['ascii_lowercase', 'az', 'ascii_uppercase', 'AZ', 'ALPHABET', 'aZ', 'english_alphabet', 'az9', 'AZ9', 'aZ9',\n# '09', 'digits', 'digit', '07', 'octdigits', 'octdigit', 'hexdigits', 'hexdigit', 'hex', 'hs', 'bin', 'bs',\n# 'printable', 'greek', 'GREEK', 'VOWELS', 'VOWEL', 'CONSONANTS', 'CONSONANT', 'vowel', 'consonant']\n```\n\n### example\n```python\nfmt = NameFmt(\"%greek#7% %hex#4%\")\nprint([fmt.random_named_number() for _ in range(5)]) # [<λΥΞΓιΕΑ 82 (34166216153218)>, <πκΟΧβΣγ 3c (47605451108924)>, <ΟξημΓψΞ 47 (119835652408647)>, <Ιψεσζωπ 78 (101633973378936)>, <τΞζΕκυΨ 9b (58779657092763)>]\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "password-generator,number-to-words,name,uuid-generator",
    "license": "MIT License Copyright (c) [year] [fullname] Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "namednumber",
    "package_url": "https://pypi.org/project/namednumber/",
    "platform": null,
    "project_url": "https://pypi.org/project/namednumber/",
    "project_urls": {
      "Homepage": "https://modularizer.github.io/namednumber/"
    },
    "release_url": "https://pypi.org/project/namednumber/1.0.0/",
    "requires_dist": [
      "numpy",
      "pyyaml ; extra == 'dev'",
      "pip-tools ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3.10",
    "summary": "Map integers to fun pseudo-random names following a custom format",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15286019,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1bafc73c669ec1c99e6f9fb157c2869262ce17116e188b3e2b07ba0ac8bc936",
          "md5": "712c68b42a844b71d3d6a5d25d418313",
          "sha256": "14ff757a04cf3445da4c42466e1002efd94d7a80bd1bb9add56b528978cbc85a"
        },
        "downloads": -1,
        "filename": "namednumber-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "712c68b42a844b71d3d6a5d25d418313",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 29633,
        "upload_time": "2022-10-03T05:40:45",
        "upload_time_iso_8601": "2022-10-03T05:40:45.830147Z",
        "url": "https://files.pythonhosted.org/packages/e1/ba/fc73c669ec1c99e6f9fb157c2869262ce17116e188b3e2b07ba0ac8bc936/namednumber-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1c08d42584685187f4d7a272018ab1dad3cec426d120dcb9a54f69374276c42",
          "md5": "80dec8908e3e84cd07c2bd4f6d7ed2c0",
          "sha256": "9fa0150c644742e6beef4665bbc49341426972fd74049ca358292b0b7002faf4"
        },
        "downloads": -1,
        "filename": "namednumber-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "80dec8908e3e84cd07c2bd4f6d7ed2c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 29774,
        "upload_time": "2022-10-03T05:40:48",
        "upload_time_iso_8601": "2022-10-03T05:40:48.323515Z",
        "url": "https://files.pythonhosted.org/packages/e1/c0/8d42584685187f4d7a272018ab1dad3cec426d120dcb9a54f69374276c42/namednumber-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1bafc73c669ec1c99e6f9fb157c2869262ce17116e188b3e2b07ba0ac8bc936",
        "md5": "712c68b42a844b71d3d6a5d25d418313",
        "sha256": "14ff757a04cf3445da4c42466e1002efd94d7a80bd1bb9add56b528978cbc85a"
      },
      "downloads": -1,
      "filename": "namednumber-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "712c68b42a844b71d3d6a5d25d418313",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 29633,
      "upload_time": "2022-10-03T05:40:45",
      "upload_time_iso_8601": "2022-10-03T05:40:45.830147Z",
      "url": "https://files.pythonhosted.org/packages/e1/ba/fc73c669ec1c99e6f9fb157c2869262ce17116e188b3e2b07ba0ac8bc936/namednumber-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1c08d42584685187f4d7a272018ab1dad3cec426d120dcb9a54f69374276c42",
        "md5": "80dec8908e3e84cd07c2bd4f6d7ed2c0",
        "sha256": "9fa0150c644742e6beef4665bbc49341426972fd74049ca358292b0b7002faf4"
      },
      "downloads": -1,
      "filename": "namednumber-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "80dec8908e3e84cd07c2bd4f6d7ed2c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 29774,
      "upload_time": "2022-10-03T05:40:48",
      "upload_time_iso_8601": "2022-10-03T05:40:48.323515Z",
      "url": "https://files.pythonhosted.org/packages/e1/c0/8d42584685187f4d7a272018ab1dad3cec426d120dcb9a54f69374276c42/namednumber-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}