{
  "info": {
    "author": "NBPub",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Google Location Utility\nUtility for **Location History** data from Google Takeout.\n\n## Overview\nGoogleLocationUtility, ***GLU*** is a command-line interface (CLI) tool for processing and [utilizing](/README.md#Features) location history data from [Google Takeout](https://takeout.google.com/) built with Python. See below for [requirements](/README.md#Requirements) and [installation](/README.md#installation-quickstart) instructions. \nA detailed usage guide is provided in the [documentation](/docs#getting-started).\n\n<img src=\"https://bestanimations.com/media/earth/998284110earth-spinning-rotating-animation-40.gif\" height = 100px title=\"bestanimations.com\">\n\n### Requirements\n**[Python](https://www.python.org/) version 3.8 or newer** is required. See the [beginner's guide](https://wiki.python.org/moin/BeginnersGuide/Download) for help installing Python on your system.\n\nInstalling **GLU** within a virtual environment (**venv**) will install all required packages. \nThe requirements and versions specified during installation are listed below. A list of all installed packages (output to `pip freeze > requirements.txt`) is provided in the docs, [installed packages](/docs#installed-packages).\n\n* **[Click](https://click.palletsprojects.com/) >= 8.0**, used to build CLI\n* **[exif](https://exif.readthedocs.io/) >= 1.3**, reads/adds GPS tags from/to image files\n* **[plotly](https://plotly.com/python/) >= 5.6**, generates HTML interactive maps\n* **[pandas](https://pandas.pydata.org/pandas-docs/stable/index.html) >= 1.4**, main tool for data handling\n* **[numpy](https://numpy.org/doc/stable/) >= 1.22**, used with **pandas** for calculations\n* **[matplotlib](https://matplotlib.org/stable/index.html) >= 3.5**, graphing engine for location reports\n* **[seaborn](https://seaborn.pydata.org/index.html) >= 0.11.2**, used with **matplotlib**\n* **[fastparquet](https://fastparquet.readthedocs.io/en/latest/) >= 0.8**, efficient storage for processed location data\n* **[Jinja2](https://jinja.palletsprojects.com/) >= 3.0**, required for **pandas** HTML exports, report building\n\n### Installation, Quickstart\nThe following steps provide installation instructions within a virtual environment. It may be possible to install and use **GLU** in your base environment, but it is not recommended.\n\n#### 1. In a directory of your creation, `<your-directory>`. Within this folder, create and activate a virtual environment in `venv`.\n```\n# Unix / macOS\n\tcd <your-directory>\n\tpython3 -m venv venv\n\t. venv/bin/activate\t\n# Windows\n\tcd <your-directory>\n\tpy -3 -m venv venv\n\tvenv\\Scripts\\activate\n```\n\nThe following steps assume you are in `<your-directory>` and the virtual environment is activated. These are accomplished in the first, `cd ...`, and third, `...activate`, lines.\n\n---\n#### Option 2A - [PyPi](https://pypi.org/project/GoogleLocationUtility/) installation\n\n**2A.** Install package from PyPi. \n- Download [Configuration.ini](https://raw.githubusercontent.com/NBPub/GoogleLocationUtility/main/Configuration.ini) as `<your-directory>/Configuration.ini`, be sure not to change the file extension.\n```\n# Unix / macOS / Windows\n\tpip install GoogleLocationUtility\n```\n*Obtain Configuration.ini through command line using [curl](https://curl.se/) or [wget](https://www.gnu.org/software/wget/). Note capitilization of \"o/O\" for curl/wget*\n```\n# Unix / macOS / Windows\n\tcurl https://raw.githubusercontent.com/NBPub/GoogleLocationUtility/main/Configuration.ini -o ./Configuration.ini\n\t# OR\n\twget https://raw.githubusercontent.com/NBPub/GoogleLocationUtility/main/Configuration.ini -O ./Configuration.ini\n```\n\n| | | | | |\n| :----: | --- | --- | --- | --- |\n\n#### Option 2B - Download and install from Github\n\n**2B.** Download and extract [GLU](https://github.com/NBPub/GoogleLocationUtility/archive/refs/heads/main.zip) into your directory `<your-directory>`. Install package.\n- Click the green **Code** button at the top of the page for various download options.\n- Note that the \"docs\" folder can be deleted\n```\n# Unix / macOS / Windows\n\tpip install --editable .\n```\n*Optional, delete docs folder*\n```\n# Unix / macOS / Windows\n\trm -r docs\n\trm README.md\t\n# Windows\n\trmdir /s docs\n\tdel README.md\n```\n---\n\n#### 3. Add Location History [Takeout](https://takeout.google.com/) export.\n- Enter `home` to ensure **GLU** is functioning, and `LocationData`, `Outputs` folders exist within `<your-directory>`\n- Request, and then extract, your Location History data from [Google Takeout](https://takeout.google.com/).\n- Copy location data, *Records.json*, and optionally *Settings.json*, into `<your-directory>/LocationData`.\n  - Other exported files are not used by **GLU**.\n\n\n\t\t\n#### 4. See [Getting Started](/docs#usage) for detailed usage instructions.\n- Filestatus and available functions are listed with `home`, all available options are listed with `home --help`.\n- Modify `<your-directory>/Configuration.ini` to specify various configuration settings.\n    - Open configuration file for editing with `home --config`\n- Documentation can be accessed from **GLU** with `home --docs` or `home --docs_read`.\n\n\n\n## Features\nFor more information about the functions available, see their respective files in the [documentation](/docs#getting-started). Configuration settings for the functions are detailed in [Configuration.ini Usage](/docs/Getting%20Started.md#configurationini).\nGLU functions stem from the command, `home`, which provides an overview of files and functions available. `home --help` will provide all the function [options](/docs#usage).\n\n*\"home\" printout, with no location data to process and no processed data to use*\n![Home1](/docs/images/home_ex1.png \"'home' with Configuration.ini, but no Location History data\")\n\n#### Location History Export\nGLU works with exported Location History ***Records*** from Google Takeout. \n***Settings*** are optional, and may provide additional information about devices, which are reported as 10-digit integers in ***Records***. \nAfter extraction, the exported Location History files from Google should be in **JSON** format.\n\n***Semantic Location History*** and ***Tombstones*** are not used by GLU. \n\n\n*\"home\" printout with location history available, as well as processed data and reports.*\n![Home2](/docs/images/home_ex2.png \"'home' with exported, processed, and filtered location data. Configuration.ini and reports also available.\")\n\n---\nThe *details* links will open the corresponding function page in the docs.\n\n### Processing\n  - `home --loc_parse` [details](/docs/Location%20Processing.md#location-processing)\n\nBefore location data can be used, **Records.json** must be processed. GLU detects **Records.json** within the LocationData folder in the project root: `<your-directory>/LocationData`.\n\nPython's [JSON decoder](https://docs.python.org/3/library/json.html) is used to convert the data into a dictionary (***this process may be memory intensive***), which is then read into a pandas DataFrame.\nTimestamps, GPS coordinates, device IDs, and sources are kept from the exported data. Additionally, the timedelta in between each point is calculated. \n\nThe resulting DataFrame is saved as a [Parquet](https://parquet.apache.org/) file, which allows for data type persistence and fast loading/saving, in the **LocationData** directory:\n`<your-directory>/LocationData/parsed_<date>.parquet`\n\n![ParseCLI](/docs/images/location_parse.png \"CLI example - Location processing, 'loc_parse'\")\n\n*Example processing operation, with ~500MB Records.json file*\n\n### Reports\n  - `home --location_report` [details](/docs/Location%20Reporting.md#location-reporting)\n\nReports can be generated from any processed data. Accuracy and time-delta statistics are presented, along with a breakdown of accuracy against source(s) and device(s).\nMaps detailing locations of each device can optionally be generated. Reports are saved as HTML files, static graphs as PNG images, and maps as HTML files.\n\nEach report, containing these files, is saved as a folder in the Outputs directory: `<your-directory>/Outputs/<Report Folder>`.\n\n<details>\n  <summary><i>Preview</i></summary>\nSee function page for sample <a href=\"/docs/Location%20Reporting.md#sample-report\">tables and graphs</a>.<br>CLI example:\n\n![ReportCLI](/docs/images/location_report.png \"CLI example - Location reporting with device maps.\")\n\n</details>\n\n\n### Filtering\n  - `home --loc_filter` [details](/docs/Location%20Filtering.md#location-filtering)\n\nProcessed location data from **Records.json** is considered \"bulk\" data. These can be further \"filtered\" by accuracy, source, and device. \nA report for bulk data may be useful in determining filter parameters. Reports can be generated from filtered location data, too.\nNotes of filter operations are stored in a CSV table: `<your-directory>/LocationData/filter_notes.csv`.\n\nResults of filter operations are saved as a new Parquet file in the **LocationData** directory:\n`<your-directory>/LocationData/filtered.parquet`\n\n<details>\n  <summary><i>Preview</i></summary>\n  \n![FilterCLI](/docs/images/location_filter.png \"CLI example - Location filtering with one removed device and one removed source.\")\n\n</details>\n\n### Maps\n  - `home --loc_map` [details](/docs/Mapping.md#location-mapping)\n\nLocation data within an input time range can be used to generate an interactive HTML map with panning and zooming capabilities. Map markers can be styled by \"time\" or \"accuracy\". \nStreet tiles from [OpenStreetMap](https://www.openstreetmap.org/) are used in the Plotly graphs, so zooming in provides more detail.\n\nMaps are saved in Outputs/Maps: `<your-directory>/Outputs/Maps/MAP-<style>_<date>.html`\n\n<details>\n  <summary><i>Preview</i></summary>\n  \n![MapEx](/docs/images/frequency_map.png \"Map styled by frequency\")\n\n</details>\n\n### geoTag\n  - `home --geoTag` [details](/docs/geoTag.md#geotag)\n\nYou made it! This was my main purpose in building this program. See a [previous version](https://github.com/NBPub/PhotosGeoTagger), and [inspiration](https://github.com/chuckleplant/blog/blob/master/scripts/location-geotag.py).\n\ngeoTag can add or replace GPS coordinates to an image's EXIF metadata, provided a suitable match is found in the processed location data. A detailed HTML report of an operation can be saved, including maps of tagged photos.\nIf a match is made, image copies are saved in the **Outputs** directory: `<your-directory>/Outputs/<geoTag results>`\n\n<details>\n  <summary><i>Preview</i></summary>\n  \n![geoTagEx1](/docs/images/geoTag_report_0.png \"Basic results table, stylized in detailed report (HTML file)\")\n![geoTagEx2](/docs/images/geoTag_report_1.png \"Detailed results, file-by-file summary for each folder\")\n\n</details>\n\nGPS metadata can also be removed from images in a folder with `home --geoStrip` [details](/docs/geoTag.md#geoStrip). Copies are also saved in the **Outputs** directory. \n\n<details>\n  <summary><i>Preview</i></summary>\n  \n![geoStripEx](/docs/images/geoStrip_table.png \"Basic results table, saved as CSV file\")\n\n</details>\n\n\n## Limitations, Issues\n**Altitude** \n\nAltidude is dropped from the exported Location History in this version, as my data was mostly empty. Altidude (m above sea level) is an available tag for an image's EXIF metadata, provided it's > 0.\n\n**PhotoTag - Improper EXIF tags**\n\nVarious failure mechanisms may prevent GPS metadata from being added to an image. These may be endemic to the file itself, but could also be a limitation of my methodology or the package used to read/write EXIF tags. \nIn my previous iteration of a photo-tagger, I remember issues with certain panoramas from a mobile phone, images converted from a **[raw image file](https://en.wikipedia.org/wiki/Raw_image_format)**, and older images I didn't know much about.\n\nVerbose errors are captured in a GeoTag detailed report. \n\nPlease [report](https://github.com/NBPub/GoogleLocationUtility/issues) any errors you may encounter.\n\n## Future\n#### Completed fixes and improvements after initial upload/commit, for alpha release:\n  * ~~Improved settings load~~\n\t* allow graceful exit when inputting Map settings\n\t* fallback values\n\t* checks for file and sections\n\t* Relevant error messages and diagnosis\n  * ~~publish on PyPi~~\n    * with release, delete old version and upload alpha.\n  * ~~general fixes~~\n  * ~~documentation~~\n\n\n#### Ideas for improvement and future releases:\n  * Critical / code improvement\n    * Implement tests\n\t* Utilize Jinja2 HTML templates to clean up code for reports (location report, geotag report)\n  * Python Packaging:\n    * Use *setuptools_scm* properly, harmonize packaging / PyPi / git\n\t* Include Configuration.ini in PyPi distribution, *package data / data_files*\n  * Docs:\t\n    * Spoof my location data to provide HTML examples of interactive maps\n  * Features:\n\t* Manual geoTag function, when location match is insufficient. Input coordinates or select on map to tag photo(s)\n\t* Advanced location reporting\n\t  * Monthly [accuracy](/docs/images/ecdf_ex1.png?raw=1) [ECDFs](/docs/images/ecdf_ex2.png?raw=1)\n\t  * Various analyses presented on [calplot](https://calplot.readthedocs.io/en/latest/), calendar heatmaps\n---\n\t\n  * Option for [TimeZoneDB](https://timezonedb.com/) integration to check location vs. input timezone\n  * Include additional location history parameters (altitude, velocity, heading, etc . . .)\n  * Determine if [Pillow](https://pillow.readthedocs.io/) vs [exif](https://gitlab.com/TNThieding/exif) for tag writing is beneficial.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/NBPub/GoogleLocationUtility/archive/refs/heads/main.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NBPub/GoogleLocationUtility",
    "keywords": "",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GoogleLocationUtility",
    "package_url": "https://pypi.org/project/GoogleLocationUtility/",
    "platform": null,
    "project_url": "https://pypi.org/project/GoogleLocationUtility/",
    "project_urls": {
      "Bug Tracker": "https://github.com/GoogleLocationUtility/issues",
      "Download": "https://github.com/NBPub/GoogleLocationUtility/archive/refs/heads/main.zip",
      "Homepage": "https://github.com/NBPub/GoogleLocationUtility"
    },
    "release_url": "https://pypi.org/project/GoogleLocationUtility/0.1.0a1/",
    "requires_dist": [
      "Click (>=8.0)",
      "exif (>=1.3)",
      "plotly (>=5.6)",
      "pandas (>=1.4)",
      "numpy (>=1.22)",
      "matplotlib (>=3.5)",
      "seaborn (>=0.11.2)",
      "fastparquet (>=0.8)",
      "Jinja2 (>=3.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Utility for Location History data from Google Takeout.",
    "version": "0.1.0a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13813155,
  "releases": {
    "0.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb0ce11ed21cb73af512db93a0a3588bb0acc11a10b254b4694f2bc90b992385",
          "md5": "6ba31644b27953d2e8227c8ea28cf24a",
          "sha256": "b1dd56f08a8a9f853c53f5a52466c69cf643cc257f63bcbb7a3f1ae3262c2e37"
        },
        "downloads": -1,
        "filename": "GoogleLocationUtility-0.1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ba31644b27953d2e8227c8ea28cf24a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 52351,
        "upload_time": "2022-05-14T00:01:33",
        "upload_time_iso_8601": "2022-05-14T00:01:33.001539Z",
        "url": "https://files.pythonhosted.org/packages/cb/0c/e11ed21cb73af512db93a0a3588bb0acc11a10b254b4694f2bc90b992385/GoogleLocationUtility-0.1.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fee12c254a30da9942d163cb13afbba1c3af707aaf20c19ad8f46bbfed1eadec",
          "md5": "4d3adedf975aef97cb50979ac6e00db1",
          "sha256": "3093a831eeb86b8a0441ecf20585071eae2580f9696f5050da30a2a7b1ad13c4"
        },
        "downloads": -1,
        "filename": "GoogleLocationUtility-0.1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d3adedf975aef97cb50979ac6e00db1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 2406622,
        "upload_time": "2022-05-14T00:01:38",
        "upload_time_iso_8601": "2022-05-14T00:01:38.018266Z",
        "url": "https://files.pythonhosted.org/packages/fe/e1/2c254a30da9942d163cb13afbba1c3af707aaf20c19ad8f46bbfed1eadec/GoogleLocationUtility-0.1.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb0ce11ed21cb73af512db93a0a3588bb0acc11a10b254b4694f2bc90b992385",
        "md5": "6ba31644b27953d2e8227c8ea28cf24a",
        "sha256": "b1dd56f08a8a9f853c53f5a52466c69cf643cc257f63bcbb7a3f1ae3262c2e37"
      },
      "downloads": -1,
      "filename": "GoogleLocationUtility-0.1.0a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6ba31644b27953d2e8227c8ea28cf24a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 52351,
      "upload_time": "2022-05-14T00:01:33",
      "upload_time_iso_8601": "2022-05-14T00:01:33.001539Z",
      "url": "https://files.pythonhosted.org/packages/cb/0c/e11ed21cb73af512db93a0a3588bb0acc11a10b254b4694f2bc90b992385/GoogleLocationUtility-0.1.0a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fee12c254a30da9942d163cb13afbba1c3af707aaf20c19ad8f46bbfed1eadec",
        "md5": "4d3adedf975aef97cb50979ac6e00db1",
        "sha256": "3093a831eeb86b8a0441ecf20585071eae2580f9696f5050da30a2a7b1ad13c4"
      },
      "downloads": -1,
      "filename": "GoogleLocationUtility-0.1.0a1.tar.gz",
      "has_sig": false,
      "md5_digest": "4d3adedf975aef97cb50979ac6e00db1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 2406622,
      "upload_time": "2022-05-14T00:01:38",
      "upload_time_iso_8601": "2022-05-14T00:01:38.018266Z",
      "url": "https://files.pythonhosted.org/packages/fe/e1/2c254a30da9942d163cb13afbba1c3af707aaf20c19ad8f46bbfed1eadec/GoogleLocationUtility-0.1.0a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}