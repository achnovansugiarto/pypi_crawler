{
  "info": {
    "author": "Bernardo Couto",
    "author_email": "bernardocouto.py@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Database"
    ],
    "description": "# Flask PostgreSQL Wrapper\n\nFlask PostgreSQL Wrapper is a simple adapter for PostgreSQL with connection pooling.\n\n## Configuration\nThe configuration can be done through **JSON** file or by **Dict** following the pattern described below:\n```json\n{\n  \"database\": \"postgres\",\n  \"host\": \"localhost\",\n  \"max_connection\": 10,\n  \"password\": \"postgres\",\n  \"port\": 5432,\n  \"print_sql\": true,\n  \"username\": \"postgres\"\n}\n```\n\nCreate the `queries` directory. This should contain all the `.sql` files that the library will use.\n\n## Usage\nFlask PostgreSQL Wrapper usage description:\n\n### Delete\n\n#### Delete with where\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .delete('test')\n        .where('id', 1)\n        .execute()\n    )\n```\n\n#### Delete with where condition\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .delete('test')\n        .where('description', 'Test%', operator='like')\n        .execute()\n    )\n```\n\n### Execute\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .execute(\n            '''\n                create table if not exists test (\n                    id bigserial not null,\n                    name varchar(100),\n                    description varchar(255),\n                    constraint test_primary_key primary key (id)\n                )\n            ''',\n            skip_load_query=True\n        )\n    )\n```\n\n### Insert\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .insert('test')\n        .set('id', 1)\n        .set('name', 'Name')\n        .set('description', 'Description')\n        .execute()   \n    )\n```\n\n### Paging\n\n#### Paging with where condition\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .select('test')\n        .fields('id', 'name', 'description')\n        .where('id', 1, operator='>')\n        .order_by('id')\n        .paging(0, 2)\n    )\n```\n\n#### Paging without where condition\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .select('test')\n        .paging(0, 10)\n    )\n```\n\n### Select\n\n#### Fetch all\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .select('test')\n        .execute()\n        .fetch_all()   \n    )\n```\n\n#### Fetch many\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .select('test')\n        .execute()\n        .fetch_many(1)\n    )\n```\n\n#### Fetch one\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .select('test')\n        .execute()\n        .fetch_one()\n    )\n```\n\n#### Select by file\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .execute('find_by_id', {'id': 1})\n        .fetch_one()\n    )\n```\n\n#### Select by query\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .execute('select id, name, description from test where id = %(id)s', {'id': 1})\n        .fetch_one()\n    )\n```\n\n### Update\n\n#### Update with where\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .update('test')\n        .set('name', 'New Name')\n        .set('description', 'New Description')\n        .where('id', 1)\n        .execute()   \n    )\n```\n\n#### Update with where all\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .update('test')\n        .set('name', 'New Name')\n        .set('description', 'New Description')\n        .where_all({'id': 1, 'name': 'Name', 'description': 'Description'})\n        .execute()\n    )\n```\n\n### Using filters\n\n#### SQL\n```sql\nselect\n    id,\n    name,\n    description\nfrom test\nwhere 1 = 1\n{{#id}}\nand id = %(id)s\n{{/id}}\n{{#name}}\nand name like %(name)s\n{{/name}}\n```\n\n#### Select with filters\n```python\nfrom flask_postgresql_wrapper import Database\n\nwith Database() as connection:\n    (\n        connection\n        .execute('test.find_all_with_filter', parameters={'id': 1, 'name': 'Name'})\n        .fetch_one()\n    )\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bernardocouto/flask-postgresql-wrapper",
    "keywords": "flask postgresql",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-postgresql-wrapper",
    "package_url": "https://pypi.org/project/flask-postgresql-wrapper/",
    "platform": "any",
    "project_url": "https://pypi.org/project/flask-postgresql-wrapper/",
    "project_urls": {
      "Homepage": "https://github.com/bernardocouto/flask-postgresql-wrapper"
    },
    "release_url": "https://pypi.org/project/flask-postgresql-wrapper/1.0.1/",
    "requires_dist": [
      "dbutils",
      "psycopg2-binary",
      "pystache"
    ],
    "requires_python": "",
    "summary": "Flask PostgreSQL Wrapper is a simple adapter for PostgreSQL with connection pooling.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10601347,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89feb8d7ce0e859fffbc2058535b2fb7185aba35ac9e412a743394351de6f86e",
          "md5": "e4c1b41c878cc8d304bc93005ba1a3ab",
          "sha256": "ae1489104c53633f426bea7206732fd49e1e9fcc8ae78bb607113e1d995637ef"
        },
        "downloads": -1,
        "filename": "flask_postgresql_wrapper-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4c1b41c878cc8d304bc93005ba1a3ab",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6890,
        "upload_time": "2021-06-09T13:20:46",
        "upload_time_iso_8601": "2021-06-09T13:20:46.937395Z",
        "url": "https://files.pythonhosted.org/packages/89/fe/b8d7ce0e859fffbc2058535b2fb7185aba35ac9e412a743394351de6f86e/flask_postgresql_wrapper-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d66fbfd83dd7ef4d4f7ddb5b4b2053b221fbc919283bf7c5f6632fd0d47270b8",
          "md5": "ba46cd1cb7c2caf0e47cecff3c7bb4c5",
          "sha256": "fcb5fd02dc45ecd3e40936a90a30ab49ff5dd3f695fb9314401fc36f33657857"
        },
        "downloads": -1,
        "filename": "flask-postgresql-wrapper-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ba46cd1cb7c2caf0e47cecff3c7bb4c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6228,
        "upload_time": "2021-06-09T13:20:48",
        "upload_time_iso_8601": "2021-06-09T13:20:48.480288Z",
        "url": "https://files.pythonhosted.org/packages/d6/6f/bfd83dd7ef4d4f7ddb5b4b2053b221fbc919283bf7c5f6632fd0d47270b8/flask-postgresql-wrapper-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89feb8d7ce0e859fffbc2058535b2fb7185aba35ac9e412a743394351de6f86e",
        "md5": "e4c1b41c878cc8d304bc93005ba1a3ab",
        "sha256": "ae1489104c53633f426bea7206732fd49e1e9fcc8ae78bb607113e1d995637ef"
      },
      "downloads": -1,
      "filename": "flask_postgresql_wrapper-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e4c1b41c878cc8d304bc93005ba1a3ab",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 6890,
      "upload_time": "2021-06-09T13:20:46",
      "upload_time_iso_8601": "2021-06-09T13:20:46.937395Z",
      "url": "https://files.pythonhosted.org/packages/89/fe/b8d7ce0e859fffbc2058535b2fb7185aba35ac9e412a743394351de6f86e/flask_postgresql_wrapper-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d66fbfd83dd7ef4d4f7ddb5b4b2053b221fbc919283bf7c5f6632fd0d47270b8",
        "md5": "ba46cd1cb7c2caf0e47cecff3c7bb4c5",
        "sha256": "fcb5fd02dc45ecd3e40936a90a30ab49ff5dd3f695fb9314401fc36f33657857"
      },
      "downloads": -1,
      "filename": "flask-postgresql-wrapper-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ba46cd1cb7c2caf0e47cecff3c7bb4c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6228,
      "upload_time": "2021-06-09T13:20:48",
      "upload_time_iso_8601": "2021-06-09T13:20:48.480288Z",
      "url": "https://files.pythonhosted.org/packages/d6/6f/bfd83dd7ef4d4f7ddb5b4b2053b221fbc919283bf7c5f6632fd0d47270b8/flask-postgresql-wrapper-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}