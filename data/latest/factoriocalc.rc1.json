{
  "info": {
    "author": "Kevin Atkinson",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": ".. default-role:: literal\n\nFactorioCalc Readme\n===================\n\nFactorioCalc is a python module to help you symbolically plan your factory for\nFactorio.\n\nWith FactorioCalc you can either: specify the machines individually and ask it\nwhat the resulting inputs and outputs are, specify what you want and call\n`produce` to determine the machines needed, or any combination of the two.  It\ncontains a custom simplex solver so `produce` has the same power of online\ncalculators such as `FactorioLab <https://factoriolab.github.io/>`_, but gives\nyou more controller over the process.\n\nFactorioCalc can also analyses most blueprint and determine what they produce.\nUnlike in game tools, such as `Max Rate Calculator\n<https://mods.factorio.com/mod/MaxRateCalculator>`_, it will take into account\nthat some machines may not be running 100% of the time.  However, at the\nmoment the it can't analyses blueprint with furnaces due to the lack of a\nfixed recipe.\n\nI, the author, find designing my factory symbolically more natural than\nusing a spreadsheet and tools like FactorioLab.\n \nRead the docs at https://factoriocalc.readthedocs.io/en/latest/\n\nExamples\n--------\n\n::\n\n  >>> import factoriocalc as fc\n  >>> from factoriocalc import itm, rcp, produce\n\n\nCreate a simple factory that creates electronic circuits from copper and iron plates::\n\n  >>> fc.config.machinePrefs.set(fc.MP_LATE_GAME)\n  >>> circuits = 2*rcp.electronic_circuit() + 3*rcp.copper_cable()\n  >>> circuits.summary()\n     2x electronic-circuit: assembling-machine-3:\n           electronic-circuit 5/s, copper-cable -15/s, iron-plate -5/s, electricity -0.775 MW\n     3x copper-cable: assembling-machine-3:\n           copper-cable 15/s, copper-plate -7.5/s, electricity -1.1625 MW\n  >>> print(circuits.flows())\n  electronic-circuit 5/s, copper-cable 0/s (15/s - 15/s), iron-plate -5/s, copper-plate -7.5/s, electricity -1.9375 MW\n\nUse `produce` to create a factory that produces rocket fuel::\n\n  >>> fc.config.machinePrefs.set(fc.MP_MAX_PROD.withSpeedBeacons({fc.AssemblingMachine3:8, fc.ChemicalPlant:8, fc.OilRefinery:12}))\n  >>> rocketFuel = produce([itm.rocket_fuel@6], using=[rcp.advanced_oil_processing]).factory\n  >>> rocketFuel.summary()\n  Box:\n      23.4x rocket-fuel: assembling-machine-3  +340% speed +40% prod. +880% energy +40% pollution\n      9.84x solid-fuel-from-light-oil: chemical-plant  +355% speed +30% prod. +800% energy +30% pollution\n      4.65x solid-fuel-from-petroleum-gas: chemical-plant  +355% speed +30% prod. +800% energy +30% pollution\n      2.26x advanced-oil-processing: oil-refinery  +555% speed +30% prod. +1080% energy +30% pollution\n      1.06x heavy-oil-cracking: chemical-plant  +355% speed +30% prod. +800% energy +30% pollution\n    Outputs: rocket-fuel 6/s\n    Inputs: crude-oil -295.803/s, water -220.004/s\n\nInstallation\n------------\n\nFactorioCalc is available on PyPi so you can install it using pip::\n\n  pip3 install factoriocalc\n\nFactorioCalc currently depends on factorio-draftsman, but only to get the\nstandard set of items and recipes.\n\nStatus\n------\n\nFactorioCalc has been used by the author to help produce a factory that\nproduces around 2k science packs per minute.  The calculations, in terms of\nthe rate of items produced and consumed, should be accurate (which includes\ntricky cases such as the Kovarex enrichment process).  The solver, in nearly\nall cases, should produce optimal results in terms of materials used.  The API\nis subject to change but the core functionality *should be* stable.\n\nPossible Bugs\n.............\n\nFactorioCalc uses a custom simplex solver written in pure python.  The solver\nhas no provisions to prevent cycling, so calls to `solve` could theoretical\nloop and need to be killed with `control-c`; however, so far this has not\nhappened.\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Factorio",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "factoriocalc",
    "package_url": "https://pypi.org/project/factoriocalc/",
    "platform": null,
    "project_url": "https://pypi.org/project/factoriocalc/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kevina/factoriocalc/issues",
      "Homepage": "https://github.com/kevina/factoriocalc"
    },
    "release_url": "https://pypi.org/project/factoriocalc/0.0.1/",
    "requires_dist": [
      "factorio-draftsman"
    ],
    "requires_python": ">=3.7",
    "summary": "A python module to help you plan your factory for Factorio.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16515039,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "141c6f62335a3e4230bbcd0f84c4c7b3b2df3f1acb7b091e4041eb42d0afa6af",
          "md5": "27b75a3dcb8cafaf3dc4b4a1ad02cd58",
          "sha256": "173e1dd5169be576fcc1434575336c0c85ffba12621bbdd02420dc7d12e42d9d"
        },
        "downloads": -1,
        "filename": "factoriocalc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27b75a3dcb8cafaf3dc4b4a1ad02cd58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 65489,
        "upload_time": "2023-01-21T19:59:47",
        "upload_time_iso_8601": "2023-01-21T19:59:47.996274Z",
        "url": "https://files.pythonhosted.org/packages/14/1c/6f62335a3e4230bbcd0f84c4c7b3b2df3f1acb7b091e4041eb42d0afa6af/factoriocalc-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0e027c147eb3bc833688344afb28cb3c62dcaeca95ab0d42857c856263da966",
          "md5": "b378b89a3491a9bb983f9a2130eaf085",
          "sha256": "78078dc0b712596508ab990d8aa94bcd9c30150c163e74dc016d1c236c736848"
        },
        "downloads": -1,
        "filename": "factoriocalc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b378b89a3491a9bb983f9a2130eaf085",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 59985,
        "upload_time": "2023-01-21T19:59:49",
        "upload_time_iso_8601": "2023-01-21T19:59:49.652214Z",
        "url": "https://files.pythonhosted.org/packages/f0/e0/27c147eb3bc833688344afb28cb3c62dcaeca95ab0d42857c856263da966/factoriocalc-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "141c6f62335a3e4230bbcd0f84c4c7b3b2df3f1acb7b091e4041eb42d0afa6af",
        "md5": "27b75a3dcb8cafaf3dc4b4a1ad02cd58",
        "sha256": "173e1dd5169be576fcc1434575336c0c85ffba12621bbdd02420dc7d12e42d9d"
      },
      "downloads": -1,
      "filename": "factoriocalc-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "27b75a3dcb8cafaf3dc4b4a1ad02cd58",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 65489,
      "upload_time": "2023-01-21T19:59:47",
      "upload_time_iso_8601": "2023-01-21T19:59:47.996274Z",
      "url": "https://files.pythonhosted.org/packages/14/1c/6f62335a3e4230bbcd0f84c4c7b3b2df3f1acb7b091e4041eb42d0afa6af/factoriocalc-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0e027c147eb3bc833688344afb28cb3c62dcaeca95ab0d42857c856263da966",
        "md5": "b378b89a3491a9bb983f9a2130eaf085",
        "sha256": "78078dc0b712596508ab990d8aa94bcd9c30150c163e74dc016d1c236c736848"
      },
      "downloads": -1,
      "filename": "factoriocalc-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b378b89a3491a9bb983f9a2130eaf085",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 59985,
      "upload_time": "2023-01-21T19:59:49",
      "upload_time_iso_8601": "2023-01-21T19:59:49.652214Z",
      "url": "https://files.pythonhosted.org/packages/f0/e0/27c147eb3bc833688344afb28cb3c62dcaeca95ab0d42857c856263da966/factoriocalc-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}