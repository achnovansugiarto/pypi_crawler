{
  "info": {
    "author": "daniel F.C.F.",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SQLiteHandler\r\n## Overview\r\nThe purpose of this library is to use an SQLite3 database without needing to know SQL. It offers the following functions, listed below:\r\n- Existence\r\n- Create\r\n- RunCommand\r\n- Connect\r\n- CreateTable\r\n- add\r\n- readAll\r\n- ColumnNames\r\n- columnsDistinct\r\n- find\r\n\r\n## Descriptions \r\n### Class Description\r\nThe class has two optional arguments and three Class variables. The Arguments are described below. The three variables are as follow:\r\n\r\n* defaultDBName (\"database.db\") : Name of the database used when a database name is not passed to other methods;\r\n* dbPath (\"\"): Path to folder/directory that the database is/will be created in;\r\n* defaultTable (\"Material\"): Name for the table in the database table is not passed to other methods;\r\n\r\n### Class Methods\r\n```python\r\n__init__(self, db_loc='', name='database.db')\r\n```\r\n\r\nClass initialization, ```db_loc``` is the path the database will be accessed or created. **It will automatically create a database in this folder**. The argument name is the name of the created database.\r\n\r\n#### Connect\r\n```python\r\ndef Connect(self, command, *args, save=False, **kwargs)\r\n```\r\n\r\nAll methods are passed through this function. It handles opening and closing the database, as well as returning any output the passed argument might have. The ````*args```` and ````**kwargs```` are passed through to the selected function (command argument).\r\n\r\n        :param command: function\r\n        :param args: passed function's arguments\r\n        :param save: saves alterations made to database\r\n        :param kwargs: passed function's keyword arguments\r\n        :return: passed functions return or Error String\r\n\r\n        example:\r\n```python\r\n        Connect(self.RunCommand, ```SQL_command_string```, save=True)\r\n```\r\n\r\n#### RunCommand\r\n```python\r\n@staticmethod\r\n    def RunCommand(c, inputs, *args)\r\n```\r\n\r\nLike most function this method should be run trough the Connect method. It is the basic method that executes any _SQL_ command.\r\n\r\n        :param c: SQLite curser\r\n        :param inputs: SQL command\r\n        :return: bool, depending if error found\r\n\r\n#### Existence        \r\n```python\r\ndef Existence(self, path=None)\r\n```\r\n\r\nChecks the existence of a SQL database at path/directory. If a path is not set it will default to class variable dbPath.\r\n\r\n        :param path: (str) path to check for sqlite3 databases\r\n        :return: (list(str)) or None if path is invalid\r\n\r\n#### Create        \r\n```python\r\ndef Create(self, path='', name=None)\r\n```\r\n\r\nConnects to a database in path, default is active file, named database.db. If Database does not exist it will be created.\r\n\r\n        :param path: (str) database folder's path, must be set according to OS\r\n        :param name: (str) database name\r\n        :return: True if database connection is valid\r\n                    str if database connection Failed\r\n\r\n#### CreateTable\r\n```python\r\ndef CreateTable(self, c, table=None, cols=None, types=None, adds=None)\r\n```\r\n\r\nCreates and sets up a table.\r\n\r\n        :param c: SQLite curser\r\n        :param table: (str) Name for the table\r\n        :param cols: list(str) for name of columns\r\n        :param types: list(str) informs SQL data type for columns\r\n        :param adds: additional parameters\r\n\r\n        example:\r\n```python\r\n        print(db.Connect(db.CreateTable, \"Material\",\r\n                   [\"id\", 'hyperlink', 'level', 'subject'],\r\n                   [\"integer\", 'text', 'text', 'text'],\r\n                   [\"NOT NULL\"]))\r\n```\r\n\r\n#### add\r\n```python\r\nadd(self, table=None, data=None)\r\n```\r\n\r\nAdds a row of data to database. All data must be in a dictionary. If table is not passed it will default to class variable defaultTable.\r\n\r\n        :param table: (str) name of table\r\n        :param data: (dict) dictionary with column_name : value\r\n        :return: bool or error string\r\n\r\n        example:\r\n```python\r\n        db.add(\"Material\", {\"id\": 2,\r\n                              \"hyperlink\": \"www.google.com\",\r\n                              \"level\": \"C2\",\r\n                              \"subject\": \"simple Present\"})\r\n```\r\n\r\n#### readAll\r\n```python\r\nreadAll(self, table=None, limit=None, offset=None)\r\n```\r\n\r\nReads All data from a table. **Caution** this command calls the method Connect which uses fetchall from the sqlite library so a limit might be needed depending on the application.\r\nIf table, limit and offset are not set when calling this method they will default to class variable defaultTable, no limit, no offset.\r\n\r\n\t:param table: (str) table name\r\n        :param limit: (int) limits the number of results\r\n        :param offset: (int) offsets the position sql starts listing\r\n        :return: tuple of row in table\r\n\r\n        example:\r\n```python\r\n print(db.readAll(\"Material\"))\r\n```\r\n\r\n#### columnNames\r\n```python\r\ncolumnNames(self, table=None)\r\n```\r\n\r\nGets the name for each column in table\r\n        :param table: (str) table name\r\n        :return: list(str)\r\n\r\n        example:\r\n```python\r\n        print(db.columnNames())\r\n```\r\n\r\n#### columnsDistinct\r\n```python\r\ncolumnsDistinct(self, col=\"\", table=None)\r\n```\r\n\r\nGets all distinct values within a single column, *id est* the values do not repeat.\r\n        :param col: (str) column name\r\n        :param table: (str) table name\r\n        :return: tuple of (str)\r\n\r\n        example:\r\n```python\r\n        db.columnsDistinct(\"Material\", \"id\")\r\n```\r\n\r\n#### find\r\n```python\r\nfind(self, values=None, table=None, selection='*', \r\n     operation='AND', limit=None, offset=None, count=False)\r\n```\r\n\r\nFind rows with multiple values and or columns. When count is true the function only returns the number of columns that satisfied the search and **not** the rows themselves.\r\n\r\n        :param values: Dict{column: list(Values)}\r\n        :param table: (str) table in SQL database\r\n        :param operation: (str) SQL operation (AND, OR, ...) for columns\r\n        :param selection: (str) SQL select statement\r\n        :param limit: (int) limits the number of results\r\n        :param offset: (int) offsets the position sql starts listing\r\n        :param count: (bool) set command to count row count according to other inputs\r\n\r\n        Example:\r\n```python\r\n        db.find(values={'Column_1': [1, 2, 3], 'Column_2': [\"C2\"]})\r\n```\r\n        SQLite command generated by this command is:\r\n```sql\r\n        SELECT * FROM TABLE_NAME WHERE Column_1 IN (?, ?, ?) AND Column_2 IN (?)\r\n```\r\n  \r\n# Example\r\n```python\r\nfrom sqlitehandler import DatabaseSQLite\r\n\r\n# this command will automatically try to connect to a SQL database.\r\n# should it fail to connect it will create one with the default values\r\n# in the folder containing the script.\r\n\r\ndb = DatabaseSQLite()\r\n\r\nprint(db.Existence(), \"this should be a list containing one element called 'database.db'\")\r\n\r\nprint(\"Now lets add a table and columns to it as well\")\r\ndb.Connect(db.CreateTable, \"Material\",\r\n                   [\"id\", 'hyperlink', 'level', 'subject'],\r\n                   [\"integer\", 'text', 'text', 'text'],\r\n                   [\"NOT NULL\"])\r\n\r\nprint(db.columnNames(), \"\\nthis should be the same list as shown above in the example code.\")\r\n\r\nprint(\"\\n\\nNow lets generate some random entries to fill out the database\")\r\nfrom random import  randint, sample\r\na = [\"simple present\", \"Present Continuous\", \"Simple Past\", \"Past Continuous\", \"Present Perfect\",\r\n       \"Present Perfect Continuous\", \"Simple Future\"]\r\nfor i in range(1000):\r\n    j = db.add(\"Material\", {\"id\": i,\r\n                        \"hyperlink\": \"www.google.com\",\r\n                        'level': f'{sample([\"A\", \"B\", \"C\"],1)[0]}{randint(1,2)}',\r\n                        \"subject\": f\"{sample(a, 1)[0]}\"})\r\n\r\nprint(\"now lets get the distinct values in the column 'level'\")\r\nprint(db.columnsDistinct(col=\"level\", table=None), \"this results in a mix of A,B,C and 1,2.\")\r\n\r\nprint(\"Now lets get the first ten rows in our database\")\r\nresults = db.readAll(\"Material\", limit=10)\r\nfor index, result in enumerate(results):\r\n    print(f\"{index}. {result}\")\r\n\r\n\r\nprint(\"\\n\\nNow lets get ten rows in our database skipping the first 10\")\r\nresults = db.readAll(\"Material\", limit=10, offset=10)\r\nfor index, result in enumerate(results):\r\n    print(f\"{index}. {result}\")\r\n\r\nprint(\"\\n\\nNow lets get do a parametric search on out database\")\r\n\r\nprint(\"first lets count how many results we will get\")\r\nprint(f\"we have {db.find(values={'level': ['A1', 'A2'], 'subject': ['Simple Past']}, count=True)} entries\")\r\n\r\nresults = db.find(values={'level': [\"A1\", \"A2\"], 'subject': ['Simple Past']})\r\nfor index, result in enumerate(results):\r\n    print(f\"{index}. {result}\")\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Danelfcf/SQLiteHandler/tree/main",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlitehandler",
    "package_url": "https://pypi.org/project/sqlitehandler/",
    "platform": null,
    "project_url": "https://pypi.org/project/sqlitehandler/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Danelfcf/SQLiteHandler/issues",
      "Homepage": "https://github.com/Danelfcf/SQLiteHandler/tree/main"
    },
    "release_url": "https://pypi.org/project/sqlitehandler/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SQLite handler package",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16365104,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c91f3ec15da4b6d514a687c8c9a4c4e28ee096cec02a4c9bf49b71e0c5f0f1b8",
          "md5": "4462d4de42125945d547b60cfae1bfe9",
          "sha256": "7367926314f760333df5bfd36f9dffb8d5d50393db1341bb9080339a2967061d"
        },
        "downloads": -1,
        "filename": "sqlitehandler-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4462d4de42125945d547b60cfae1bfe9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4508,
        "upload_time": "2023-01-08T17:52:30",
        "upload_time_iso_8601": "2023-01-08T17:52:30.555397Z",
        "url": "https://files.pythonhosted.org/packages/c9/1f/3ec15da4b6d514a687c8c9a4c4e28ee096cec02a4c9bf49b71e0c5f0f1b8/sqlitehandler-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5c2d036ed5431b95785d4fb8b16b025a006164e3154f2d01455a61bf4b39b2d",
          "md5": "8f6eefbd825c0f082c741d2ae06154fc",
          "sha256": "9d04f08c9e3c691992b88a66049145ea1be8ec946f05a17e45fa7e71bf05ba3e"
        },
        "downloads": -1,
        "filename": "sqlitehandler-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8f6eefbd825c0f082c741d2ae06154fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4196,
        "upload_time": "2023-01-08T17:52:32",
        "upload_time_iso_8601": "2023-01-08T17:52:32.198475Z",
        "url": "https://files.pythonhosted.org/packages/b5/c2/d036ed5431b95785d4fb8b16b025a006164e3154f2d01455a61bf4b39b2d/sqlitehandler-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42c1e03648ac08612625b6e7f061c3176f053d6688edc515c127bf59f43dfb13",
          "md5": "8af0615d681b59311a97cbe417163ca1",
          "sha256": "598c5abdbf5164807853517b6b156b0ec8750165ca71fcb15eae1165d2a4c8e9"
        },
        "downloads": -1,
        "filename": "sqlitehandler-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8af0615d681b59311a97cbe417163ca1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11155,
        "upload_time": "2023-01-09T20:27:04",
        "upload_time_iso_8601": "2023-01-09T20:27:04.611231Z",
        "url": "https://files.pythonhosted.org/packages/42/c1/e03648ac08612625b6e7f061c3176f053d6688edc515c127bf59f43dfb13/sqlitehandler-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1ddd304cc813559009bbb85033d2e9d1f352a473f2b7a2f8e3101cd6729873c",
          "md5": "754364f2b41780c5a9b50295aaa3fe90",
          "sha256": "d27650c6597fb8a695ac2ce85adc57f4915a95a0c18acdafc2523fb50c8c9f7d"
        },
        "downloads": -1,
        "filename": "sqlitehandler-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "754364f2b41780c5a9b50295aaa3fe90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8749,
        "upload_time": "2023-01-09T20:27:06",
        "upload_time_iso_8601": "2023-01-09T20:27:06.499219Z",
        "url": "https://files.pythonhosted.org/packages/c1/dd/d304cc813559009bbb85033d2e9d1f352a473f2b7a2f8e3101cd6729873c/sqlitehandler-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98b3b6da9276505b2fb8d7bcca2ec1f8512cf5d2c2386a8749cd4151ba51f2cd",
          "md5": "30ae60e563eaea96afc9d174404297aa",
          "sha256": "c4686238cbc7a073c388db440d6cac2a3d94e3634fd6b89b5937862050991de9"
        },
        "downloads": -1,
        "filename": "sqlitehandler-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30ae60e563eaea96afc9d174404297aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11193,
        "upload_time": "2023-01-09T20:35:47",
        "upload_time_iso_8601": "2023-01-09T20:35:47.024681Z",
        "url": "https://files.pythonhosted.org/packages/98/b3/b6da9276505b2fb8d7bcca2ec1f8512cf5d2c2386a8749cd4151ba51f2cd/sqlitehandler-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fa7e9568a6c6709052f70c406bf4941575c9f9e67df09f9e5a23c2cb677629d",
          "md5": "564c820b620104c10150aee8d9275174",
          "sha256": "57a3fd58951d791edbfc917bbc930f669400a2be145b3721cf9321daf71d8a4f"
        },
        "downloads": -1,
        "filename": "sqlitehandler-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "564c820b620104c10150aee8d9275174",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8870,
        "upload_time": "2023-01-09T20:35:49",
        "upload_time_iso_8601": "2023-01-09T20:35:49.686552Z",
        "url": "https://files.pythonhosted.org/packages/2f/a7/e9568a6c6709052f70c406bf4941575c9f9e67df09f9e5a23c2cb677629d/sqlitehandler-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98b3b6da9276505b2fb8d7bcca2ec1f8512cf5d2c2386a8749cd4151ba51f2cd",
        "md5": "30ae60e563eaea96afc9d174404297aa",
        "sha256": "c4686238cbc7a073c388db440d6cac2a3d94e3634fd6b89b5937862050991de9"
      },
      "downloads": -1,
      "filename": "sqlitehandler-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "30ae60e563eaea96afc9d174404297aa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11193,
      "upload_time": "2023-01-09T20:35:47",
      "upload_time_iso_8601": "2023-01-09T20:35:47.024681Z",
      "url": "https://files.pythonhosted.org/packages/98/b3/b6da9276505b2fb8d7bcca2ec1f8512cf5d2c2386a8749cd4151ba51f2cd/sqlitehandler-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fa7e9568a6c6709052f70c406bf4941575c9f9e67df09f9e5a23c2cb677629d",
        "md5": "564c820b620104c10150aee8d9275174",
        "sha256": "57a3fd58951d791edbfc917bbc930f669400a2be145b3721cf9321daf71d8a4f"
      },
      "downloads": -1,
      "filename": "sqlitehandler-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "564c820b620104c10150aee8d9275174",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8870,
      "upload_time": "2023-01-09T20:35:49",
      "upload_time_iso_8601": "2023-01-09T20:35:49.686552Z",
      "url": "https://files.pythonhosted.org/packages/2f/a7/e9568a6c6709052f70c406bf4941575c9f9e67df09f9e5a23c2cb677629d/sqlitehandler-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}