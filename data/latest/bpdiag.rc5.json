{
  "info": {
    "author": "Brutus",
    "author_email": "brutus.dmc@googlemail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Healthcare Industry",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Topic :: Utilities"
    ],
    "description": "=======\nBP Diag\n=======\n\n**BP Diag** parses blood preasure statistics from data files, generates some\nstatistics and prints them to *STDERR*. You can export the data (and the\ngathered statistics) to **JSON** (dump to *STDOUT*). And you can also generate\n**SVG** or **PNG** charts from it.\n\nTo see a list of possible command line options run::\n\n    bpdiag.py --help\n\n\nExamples\n========\n\nLets say we got a file called ``bp.csv`` containing the following values::\n\n    136/83/65, 132/82/70\n    144/82/86, 137/81/75, -,         143/80/68\n    131/82/60, 144/82/64, 136/79/67, 140/80/62\n    136/83/68, 138/80/99, -,         133/74/65\n    136/79/67, 131/76/64, 135/81/72, 136/75/61\n    127/79/72\n\n**BP Diag** first tries to split multiple entries on each line using the\nstring given with the ``--delimiter`` option (default is ``,``). Each entry\nfound  is then split into *sys*, *dia* and *pulse* values with the string\ngiven with the ``--seperator`` option (default: ``/``).\n\nSo if we run **BP Diag** on the file like this ``bpdiag.py bp.csv``, we got\nthe following results::\n\n    Read 17 value(s) from 1 file(s)...\n    Statistics (min, max, avg):\n    :: SYS...: 127, 144, 136\n    :: DIA...:  74,  83,  79\n    :: PULSE.:  60,  99,  69\n\nDump JSON\n---------\n\nAs you see parsing errors are ignored. We can dump JSON with the ``--json``\noption. Only the JSON dump is written to *STDOUT*, other output goes to\n*STDERR*, so we can redirect the dump to a file (use ``--compact`` to\nprevent spaces after ``,`` and ``:``)::\n\n    bpdiag.py --json --compact bp.csv > bp.json\n\nThe file ``bp.json`` will then contain one long line with the JSON data. You\ncan also dump the statistic gatherd from the data to JSON with the ``--json-\nstats`` option.  Use the ``--sort`` and ``--indent 2`` options if you want a\nmore readable output.\n\nGenerate Charts\n---------------\n\nTo generate SVG charts, you need to have PyGal_ installed (see below). Other\nthan that, just use the ``--chart`` option to have a chart called ``bp.svg``\ngenerated in your current directory. There are more options to this, take a\nlook at the ``--help`` output.\n\nInstead of the interactive SVG charts you can use PNG as output format. Just\nuse the ``--png`` option along with ``--chart``. You need a couple more\ndependencies for that though, take a look below.\n\nNumber of measurements per line\n-------------------------------\n\nPer default all values are gathered one after the other and parsing errors are\nignored. But you can use the ``--entries`` option to set a fixed number of\nmeasurements per line.\n\nWhat this means is that only that much values are used per line (even if there\nare more) and if a line contains less than *entries* values, the remaining\nones are filled with ``None`` values. Also values that conatin ``-`` (or any\nother combination of characters that does not parse to a three integer tuple)\nare not ignored but stored as a ``None`` value too.\n\nThis can be helpful in cases where you have a given number of measurements per\nline and you want to keep them aligned even if sometimes a measurement is\nskipped / missing.::\n\n    bpdiag.py --json --compact --entries 4 bp.csv\n\nWill result in the following JSON::\n\n    [[136,83,65],[132,82,70],null,null,[144,82,86],[137,81,75],null,[143,80,68],[131,82,60],[144,82,64],[136,79,67],[140,80,62],[136,83,68],[138,80,99],null,[133,74,65],[136,79,67],[131,76,64],[135,81,72],[136,75,61],[127,79,72],null,null,null]\n\n\nInstall\n=======\n\nYou can install **BP Diag** with pip_ or from source.\n\nInstall with pip\n----------------\n\npip_ is \"*a tool for installing and managing Python packages*\". If you don't\nhave it installed, see the `pip install instructions`_::\n\n    pip install --user bpdiag\n\nInstall from source\n-------------------\n\nYou can fetch the latest sourceball_ from github and unpack it, or just clone\nthis repository: ``git clone git://github.com/brutus/bpdiag``. If you\ngot the source, change into the directory and use ``setup.py``::\n\n    python setup.py install\n\n\nDependencies\n============\n\nPyGal_ is used to generate the charts. If you want to generate charts,\nyou need to install it. With pip_ it's as easy as this::\n\n    pip install --user pygal\n\nIf you want to export to PNG files, you need CairoSVG_, tinycss_ and\ncssselect_ too. You can install them like this::\n\n    pip install --user CairoSVG tinycss cssselect\n\n\nBugs  and Contribution\n======================\n\n**BP Diag** is at home at: https://github.com/brutus/bpdiag/\n\nIf you find any bugs, issues or anything, please use the `issue tracker`_.\n\n\n.. _home: https://github.com/brutus/bpdiag/\n.. _sourceball: https://github.com/brutus/bpdiag/zipball/master\n.. _`issue tracker`: https://github.com/brutus/bpdiag/issues\n.. _pip: http://www.pip-installer.org/en/latest/index.html\n.. _`pip install instructions`: http://www.pip-installer.org/en/latest/installing.html\n.. _PyGal: http://pygal.org/\n.. _CairoSVG: http://cairosvg.org/\n.. _tinycss: http://packages.python.org/tinycss/\n.. _cssselect: http://packages.python.org/cssselect/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/brutus/bpdiag/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brutus/bpdiag/",
    "keywords": null,
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "bpdiag",
    "package_url": "https://pypi.org/project/bpdiag/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/bpdiag/",
    "project_urls": {
      "Download": "https://github.com/brutus/bpdiag/zipball/master",
      "Homepage": "https://github.com/brutus/bpdiag/"
    },
    "release_url": "https://pypi.org/project/bpdiag/0.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Python script to visualize blood pressure data.",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 743296,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa11932ee432b7a659aa02dc4d4848bebd63775c2b44f338ac121af3f0058bec",
          "md5": "ffb3d6071cfccc3fee9da016b5834c62",
          "sha256": "8d7bdf9c7167f72df15b8c22994701fee6920f03ad0f47bea41e5c1fb8260816"
        },
        "downloads": -1,
        "filename": "bpdiag-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ffb3d6071cfccc3fee9da016b5834c62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18542,
        "upload_time": "2013-01-30T16:54:20",
        "upload_time_iso_8601": "2013-01-30T16:54:20.158360Z",
        "url": "https://files.pythonhosted.org/packages/fa/11/932ee432b7a659aa02dc4d4848bebd63775c2b44f338ac121af3f0058bec/bpdiag-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aaecbc418092bd29cdd50e32464dda6339b8cd4329b8248ce9a536bb544373e0",
          "md5": "2d697da67a702d5f68daa21beaf32d86",
          "sha256": "bd441be227a480a8b87f49f2cbdc724b36910f87fbaa2adbbd1f46ce1da8221e"
        },
        "downloads": -1,
        "filename": "bpdiag-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2d697da67a702d5f68daa21beaf32d86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19635,
        "upload_time": "2013-01-31T14:47:28",
        "upload_time_iso_8601": "2013-01-31T14:47:28.721996Z",
        "url": "https://files.pythonhosted.org/packages/aa/ec/bc418092bd29cdd50e32464dda6339b8cd4329b8248ce9a536bb544373e0/bpdiag-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bfc1f1357327728495c3ecfb3afa02218ab7b521059a53d71d2f983b33b61fb",
          "md5": "72d4cca4de4957e0ff02860dc1074b00",
          "sha256": "3019de5d98471a150d40746ecb6cf71ca74d8fb0deb3c7542bbfc472fbae7fc7"
        },
        "downloads": -1,
        "filename": "bpdiag-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "72d4cca4de4957e0ff02860dc1074b00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19988,
        "upload_time": "2013-02-01T16:36:35",
        "upload_time_iso_8601": "2013-02-01T16:36:35.949112Z",
        "url": "https://files.pythonhosted.org/packages/0b/fc/1f1357327728495c3ecfb3afa02218ab7b521059a53d71d2f983b33b61fb/bpdiag-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f316c08a53eef5503ca572a4fb12ed709bf974a5df7dea6bedaf407863825440",
          "md5": "ff78d47904241689be7dc4c3b1f5b534",
          "sha256": "ef2e28ae46c9719ca455be0195a7bb34240edc2930ca8a52a41324b79edc416f"
        },
        "downloads": -1,
        "filename": "bpdiag-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ff78d47904241689be7dc4c3b1f5b534",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22893,
        "upload_time": "2013-02-08T15:55:05",
        "upload_time_iso_8601": "2013-02-08T15:55:05.378847Z",
        "url": "https://files.pythonhosted.org/packages/f3/16/c08a53eef5503ca572a4fb12ed709bf974a5df7dea6bedaf407863825440/bpdiag-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82013325d1f4b5e1146c9273aa95f78104881040137a5e243f1964489494c057",
          "md5": "c2836b898f026fee3674f4dc55039665",
          "sha256": "7d360e83058d65e5adc8fa849dbe0a6d60c33246ac039b1e40a004dbaac1e7fb"
        },
        "downloads": -1,
        "filename": "bpdiag-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c2836b898f026fee3674f4dc55039665",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23384,
        "upload_time": "2013-02-10T16:45:33",
        "upload_time_iso_8601": "2013-02-10T16:45:33.267284Z",
        "url": "https://files.pythonhosted.org/packages/82/01/3325d1f4b5e1146c9273aa95f78104881040137a5e243f1964489494c057/bpdiag-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82013325d1f4b5e1146c9273aa95f78104881040137a5e243f1964489494c057",
        "md5": "c2836b898f026fee3674f4dc55039665",
        "sha256": "7d360e83058d65e5adc8fa849dbe0a6d60c33246ac039b1e40a004dbaac1e7fb"
      },
      "downloads": -1,
      "filename": "bpdiag-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c2836b898f026fee3674f4dc55039665",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23384,
      "upload_time": "2013-02-10T16:45:33",
      "upload_time_iso_8601": "2013-02-10T16:45:33.267284Z",
      "url": "https://files.pythonhosted.org/packages/82/01/3325d1f4b5e1146c9273aa95f78104881040137a5e243f1964489494c057/bpdiag-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}