{
  "info": {
    "author": "origamizyt",
    "author_email": "zhaoyitong18@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Psypher - A modern asymmetric encryption scheme.\n\nPsypher is a modern cryptography module providing high-level security recipes with simple interfaces. It is built for securing communication through insecure  channels.\n\n## Installation\n\nThis module is available via PyPI:\n```shell\n$ pip install psypher\n```\n\nIf you want to use the source code directly, make sure you install the `cryptography` dependency.\n\n```shell\n$ pip install cryptography\n```\n\n## Basic Usage\n\nAll the interface Psypher provides is accessible through the `Scheme` interface. Use the `default` static method to obtain an instance of the default scheme (`curve25519-chacha20poly1305`).\n```py\n>>> from psypher import Scheme\n>>> s1, s2 = Scheme.default(), Scheme.default()\n>>> s1.__class__.__name__\n'Curve25519ChaCha20Poly1305Scheme'\n```\n\nThe private and public key is accessible with the `privateKey` and `publicKey` properties. The basic usage of these keys are shown below.\n```py\n# key export (also suitable for public keys)\nkey1 = s1.privateKey.export() # bytes\nkey2 = s2.privateKey.exportJson() # str\n# key import (also suitable for public keys)\npsypher.secret.Curve25519PrivateKey.importKey(key1)\npsypher.secret.Curve25519PrivateKey.importJson(key2)\n# encrypted key export (private keys only)\nkey1 = s1.privateKey.secureExport(b'password')\nkey2 = s2.privateKey.secureExportJson(b'password')\n# encrypted key import (private keys only)\npsypher.secret.Curve25519PrivateKey.importKey(key1, b'password')\npsypher.secret.Curve25519PrivateKey.importJson(key2, b'password')\n# key fingerprint (public keys only)\nprint(s1.publicKey.digest)\n```\n\n> When using encrypted key export, the default behaviours is to derive the wrapping key from the password using `PBKDF2`. However, you can specify `derive=False` to disable this kind of behaviour and to use your material as key directly.\n\n> `IPublicKey.digest` is a cached property, so it might not behave as you expect it to be. See the *Advanced Usage / Cache Mode* to learn more.\n\nThe `export`, `exportJson` methods is also defined on the scheme as a shortcut to the public key. Use the `receive` and `receiveJson` methods to receive remote key from peers:\n```py\n>>> s1.receive(s2.export())\n>>> s2.receiveJson(s1.exportJson())\n```\n\nUse the `shareSecret` property to calculate the negotiated shared secret. This property is CACHED, that means it only evaluates once. For detailed information about caching, please navigate to the *Advanced Usage / Cache Mode* section.\n```py\n>>> s1.sharedSecret == s2.sharedSecret\nTrue\n```\n\nTo generate the digital signature of specific message, use the `sign` method. Call `verify` on the other side to verify the message. You can only verify messages signed by your peer. The signature generated is deterministic.\n```py\n>>> data = b'My telephone number is 123456!'\n>>> signature = s1.sign(data)\n>>> s2.verify(data, signature)\nTrue\n>>> s2.verify(b'My telephone number is 654321!', signature)\nFalse\n```\n\nIf you just want to check the integrity of your message therefore don't require such cryptographical strength of your signature, or if you need a shorter signature value, the `integritySign` method may suits you. It uses HMAC to sign the message, producing only 32 bytes output. Likewise, the `integrityVerify` method can be used to verify this signature:\n```py\n>>> data = b'My telephone number is 123456!'\n>>> signature = s1.integritySign(data)\n>>> s2.integrityVerify(data, signature)\nTrue\n>>> s2.integrityVerify(b'My telephone number is 654321!', signature)\nFalse\n```\n\nTo encrypt your message, use the `encrypt` method. Call `decrypt` on the other side to decrypt your message. You can only decrypt messages encrypted by your peer. The ciphertext is different each time you call `encrypt`, even if you are encrypting the same message.\n```py\n>>> data = b'The darkest secret lies here.'\n>>> ciphertext = s2.encrypt(data)\n>>> s1.decrypt(ciphertext) == data\nTrue\n>>> from psypher.errors import InvalidCiphertext\n>>> try:\n...     s1.decrypt(b'This is absolutely illegal')\n... except InvalidCiphertext:\n...     pass\n```\n\n## Advanced Usage\n\nBelow are some complicated usages of this module beyond the normal usage.\n\n### Cache Mode\n\nThe cache mode is enabled by default, which means certain methods or property will only be calculated once and cached. Cached items includes `IPublicKey.digest` and `<KeyPairClass>.sharedSecret`. You can disable caching globally with the following statements:\n```py\n>>> from psypher import cache\n>>> cache.setenabled(False)\n```\n\nYou can access the cache object through the unbound version of the method or property. Here are some usages:\n```py\n# query\nfrom psypher.secret import IPublicKey\nIPublicKey.digest.fget.enabled\n# partially disable\nIPublicKey.digest.fget.enabled = False\nEccKeyPair.sharedSecret.fget.enabled = False\n# clear cache for all instances\nCurve25519KeyPair.sharedSecret.fget.clearCache()\n```\n\n> If you disabled the cache globally, the `enabled` property will return `False` on every instance, even if you set it to `True`.\n\n### Customize Scheme\n\nThe scheme object is located in the `psypher.cipher` module. A scheme is consisted of two parts - the key pair and the symmetric encryptor. You could customize these parts.\n\nThe module provides two built-in schemes: `Curve15519ChaCha20Poly1305Scheme`, which is the default, and `Secp256k1AesGcmScheme`, which is recommended to use in commercial circumstances. These schemes produces the ciphertext with similar structure:\n\n#### Curve25519ChaCha20Poly1305\n\nInput: plain text (X bytes)\n\nOutput:\n\n| EphKey | HkdfSalt | AeadNonce | Ciphertext | AeadTag | Total |\n|--|--|--|--|--|--|\n| 32 bytes | 16 bytes | 12 bytes | X bytes | 16 bytes | 76+X bytes |\n\n#### Secp256k1AesGcm:\n\nInput: plain text (X bytes)\n\nOutput:\n\n| EphKey | HkdfSalt | AeadNonce | Ciphertext | AeadTag | Total |\n|--|--|--|--|--|--|\n| 65 bytes | 16 bytes | 12 bytes | X bytes | 16 bytes | 109+X bytes |\n\nThese schemes can be found in the `psypher.scheme` module:\n```py\n>>> from psypher.scheme import Secp256k1AesGcmScheme\n>>> s1 = Secp256k1AesGcmScheme.generate()\n```\n\nYou can also customize the schemes:\n```py\n>>> from psypher.cipher import AesGcmEncryptor\n>>> from psypher.secret import Curve25519KeyPair\n>>> from psypher.scheme import Scheme\n>>> s1 = Scheme(Curve25519KeyPair.generate(), AesGcmEncryptor)\n```\n\nTo fully build your own customized scheme, you may want to inherit from the `IKeyPair` class. You must implement the `IPrivateKey` and `IPublicKey` interfaces too. The `IEncryptor` interface however, is a static interface, only containing static methods. For more details, please see the source code.\n\n## Support & License\n\nThis module is built on the `pyca/cryptography` library. See [their Github Repository](https://github.com/pyca/cryptography).\n\nThis software is licensed under the [MIT License](https://opensource.org/licenses/MIT). For more information, see the [License Text](LICENSE).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/origamizyt/psypher",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "psypher",
    "package_url": "https://pypi.org/project/psypher/",
    "platform": "",
    "project_url": "https://pypi.org/project/psypher/",
    "project_urls": {
      "Homepage": "https://gitee.com/origamizyt/psypher"
    },
    "release_url": "https://pypi.org/project/psypher/1.0.0/",
    "requires_dist": [
      "cryptography"
    ],
    "requires_python": ">=3.6",
    "summary": "A modern asymmetric encryption scheme.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11269560,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f59c8e1f9f4e9c02d659a7572e513cc242096bf9ea053aa906641314957f6751",
          "md5": "c81dc33be06406982832625610bd2875",
          "sha256": "5a8695ecdf23476bc20de36db8b1be1d22b15721d91cfe93f4a7d4426749ec4a"
        },
        "downloads": -1,
        "filename": "psypher-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c81dc33be06406982832625610bd2875",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11766,
        "upload_time": "2021-08-25T03:49:09",
        "upload_time_iso_8601": "2021-08-25T03:49:09.801224Z",
        "url": "https://files.pythonhosted.org/packages/f5/9c/8e1f9f4e9c02d659a7572e513cc242096bf9ea053aa906641314957f6751/psypher-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28d832de33d68213320eaca5543a093e960dbe4dca6e28f634a4ecc320191eca",
          "md5": "9731b216a8dcfad7a18701ecf8a0d056",
          "sha256": "17f956c9c03fb2d441bb716a14b108302ebf03b66c58dc7bebfda8d98fdbdbcc"
        },
        "downloads": -1,
        "filename": "psypher-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9731b216a8dcfad7a18701ecf8a0d056",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12275,
        "upload_time": "2021-08-25T03:49:11",
        "upload_time_iso_8601": "2021-08-25T03:49:11.625810Z",
        "url": "https://files.pythonhosted.org/packages/28/d8/32de33d68213320eaca5543a093e960dbe4dca6e28f634a4ecc320191eca/psypher-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f59c8e1f9f4e9c02d659a7572e513cc242096bf9ea053aa906641314957f6751",
        "md5": "c81dc33be06406982832625610bd2875",
        "sha256": "5a8695ecdf23476bc20de36db8b1be1d22b15721d91cfe93f4a7d4426749ec4a"
      },
      "downloads": -1,
      "filename": "psypher-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c81dc33be06406982832625610bd2875",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11766,
      "upload_time": "2021-08-25T03:49:09",
      "upload_time_iso_8601": "2021-08-25T03:49:09.801224Z",
      "url": "https://files.pythonhosted.org/packages/f5/9c/8e1f9f4e9c02d659a7572e513cc242096bf9ea053aa906641314957f6751/psypher-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28d832de33d68213320eaca5543a093e960dbe4dca6e28f634a4ecc320191eca",
        "md5": "9731b216a8dcfad7a18701ecf8a0d056",
        "sha256": "17f956c9c03fb2d441bb716a14b108302ebf03b66c58dc7bebfda8d98fdbdbcc"
      },
      "downloads": -1,
      "filename": "psypher-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9731b216a8dcfad7a18701ecf8a0d056",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12275,
      "upload_time": "2021-08-25T03:49:11",
      "upload_time_iso_8601": "2021-08-25T03:49:11.625810Z",
      "url": "https://files.pythonhosted.org/packages/28/d8/32de33d68213320eaca5543a093e960dbe4dca6e28f634a4ecc320191eca/psypher-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}