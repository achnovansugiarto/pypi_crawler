{
  "info": {
    "author": "Jens Keiner",
    "author_email": "jens.keiner@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# exchange-calendars-extensions\nA Python package that transparently adds some features to the [exchange_calendars](https://github.com/gerrymanoim/exchange_calendars) \npackage.\n\nFor select exchanges:\n- Add holiday calendar for regular and ad-hoc holidays combined.\n- Add holiday calendar for regular and ad-hoc special open days combined.\n- Add holiday calendar for regular and ad-hoc special close days combined.\n- Add holiday calendar for weekend days.\n- Add holiday calendar for quarterly expiry days (aka quadruple witching).\n- Add holiday calendar for monthly expiry days (in month without quarterly expiry). \n- Add holiday calendar for last trading day of the month\n- Add holiday calendar for last *regular* trading day of the month.\n\n## Installation\n\nThe package is available on [PyPI](https://pypi.org/project/exchange-calendars-extensions/) and can be installed via \n[pip](https://pip.pypa.io/en/stable/) or other suitable dependency management tool like \n[Poetry](https://python-poetry.org/).\n\n```bash\npip install exchange-calendars-extensions\n```\n\n## Usage\n\nImport the package.\n```python\nimport exchange_calendars_extensions\n```\n\nRegister extended exchange calendar classes with the `exchange_calendars` package.\n```python\nexchange_calendars_extensions.apply_extensions()\n```\nThis will replace the default exchange calendar classes with the extended versions for supported exchanges; see [below](#supported-exchanges).\n\nGet an exchange calendar instance.\n```python\nfrom exchange_calendars import get_calendar\n\ncalendar = get_calendar('XLON')\n```\n\nExtended calendars are subclasses of the abstract base class \n`exchange_calendars_extensions.ExtendedExchangeCalendar` which inherits both from `exchange_calendars.ExchangeCalendar`\nand the protocol class `exchange_calendars_extensions.ExchangeCalendarExtensions`.\n```python\nassert isinstance(calendar, exchange_calendars_extensions.ExtendedExchangeCalendar)\nassert isinstance(calendar, exchange_calendars.ExchangeCalendar)\nassert isinstance(calendar, exchange_calendars_extensions.ExchangeCalendarExtensions)\n```\n\nThe extended calendars provide the following additional holiday calendars, all instances of \n`exchange_calendars.exchange_calendar.HolidayCalendar`:\n- `holidays_all`: Regular and ad-hoc holidays combined into a single calendar.\n- `special_opens_all`: Regular and ad-hoc special open days combined into a single calendar.\n- `special_closes_all`: Regular and ad-hoc special close days combined into a single calendar.\n- `weekend_days`: All weekend days, as defined by the underlying calendar's weekmask, in a single calendar.\n- `quarterly_expiries`: Quarterly expiry days, also known as quadruple witching. Many exchanges observe special business\n  days on which market index futures, options futures, stock options and stock futures expire, typically resulting in \n  increased volatility and traded volume. Quadruple witching is typically observed on the third Friday of March, June,\n  September and December, although some exchanges observe it on Thursday instead. Also, collisions with holidays or\n  special open/close days may result in the quarterly expiry day being rolled backward to an otherwise regular business \n- day.\n- `monthly_expiries`: Monthly expiry days. Similar to quarterly expiry days, but for the remaining months of the year.\n  Monthly expiries are similar to quarterly expiries, but typically result in less extreme trading patterns and may thus\n  be treated separately.\n- `last_trading_days_of_months`: Last trading day of each month of the year.\n- `last_regular_trading_days_of_months`: Last regular trading day of each month of the year, i.e. not a special \n  open/close or otherwise irregular day.\n\n## Examples\n```python\ncalendar = get_calendar('XLON')\nprint(calendar.holidays_all.holidays(start='2020-01-01', end='2020-12-31', return_name=True))\n```\nwill output\n```text\n2020-01-01         New Year's Day\n2020-04-10            Good Friday\n2020-04-13          Easter Monday\n2020-05-08         ad-hoc holiday\n2020-05-25    Spring Bank Holiday\n2020-08-31    Summer Bank Holiday\n2020-12-25              Christmas\n2020-12-26             Boxing Day\n2020-12-28     Weekend Boxing Day\ndtype: object\n```\nNote that the ad-hoc holiday on 2020-05-08 (Queen Elizabeth II 75th anniversary) is included in the holiday calendar, \neven though it is not a regular holiday.\n\nQuarterly and monthly expiry days:\n```python\ncalendar = get_calendar('XLON')\nprint(calendar.quarterly_expiries.holidays(start='2023-01-01', end='2023-12-31', return_name=True))\nprint(calendar.monthly_expiries.holidays(start='2023-01-01', end='2023-12-31', return_name=True))\n```\nwill output\n```text\n2023-03-17    quarterly expiry\n2023-06-16    quarterly expiry\n2023-09-15    quarterly expiry\n2023-12-15    quarterly expiry\ndtype: object\n2023-01-20    monthly expiry\n2023-02-17    monthly expiry\n2023-04-21    monthly expiry\n2023-05-19    monthly expiry\n2023-07-21    monthly expiry\n2023-08-18    monthly expiry\n2023-10-20    monthly expiry\n2023-11-17    monthly expiry\ndtype: object\n```\n\nLast trading days of months:\n```python\ncalendar = get_calendar('XLON')\nprint(calendar.last_trading_days_of_months.holidays(start='2023-01-01', end='2023-12-31', return_name=True))\nprint(calendar.last_regular_trading_days_of_months.holidays(start='2023-01-01', end='2023-12-31', return_name=True))\n```\nwill output\n```text\n2023-01-31    last trading day of month\n2023-02-28    last trading day of month\n2023-03-31    last trading day of month\n2023-04-28    last trading day of month\n2023-05-31    last trading day of month\n2023-06-30    last trading day of month\n2023-07-31    last trading day of month\n2023-08-31    last trading day of month\n2023-09-29    last trading day of month\n2023-10-31    last trading day of month\n2023-11-30    last trading day of month\n2023-12-29    last trading day of month\ndtype: object\n2023-01-31    last regular trading day of month\n2023-02-28    last regular trading day of month\n2023-03-31    last regular trading day of month\n2023-04-28    last regular trading day of month\n2023-05-31    last regular trading day of month\n2023-06-30    last regular trading day of month\n2023-07-31    last regular trading day of month\n2023-08-31    last regular trading day of month\n2023-09-29    last regular trading day of month\n2023-10-31    last regular trading day of month\n2023-11-30    last regular trading day of month\n2023-12-28    last regular trading day of month\ndtype: object\n```\nNote the difference in December, where 2023-12-29 is a special close day, while 2023-12-28 is a regular trading day.\n\n## Supported exchanges\nThis package currently provides extensions for the following subset of exchanges supported by `exchange_calendars`:\n- ASEX\n- BMEX\n- XAMS\n- XBRU\n- XBUD\n- XCSE\n- XDUB\n- XETR\n- XHEL\n- XIST\n- XJSE\n- XLIS\n- XLON\n- XMIL\n- XNAS\n- XNYS\n- XOSL\n- XPAR\n- XPRA\n- XSTO\n- XSWX\n- XTAE\n- XTSE\n- XWAR\n- XWBO\n\n## Advanced usage\n\n### Adding an extended calendar for a new exchange\n\nTo facilitate the creation of extended exchange calendar classes, the function `extend_class` is provided in the \nsub-module `exchange_calendars_extensions.holiday_calendar`.\n```python\nfrom exchange_calendars.exchange_calendar_xlon import XLONExchangeCalendar\nfrom exchange_calendars_extensions.holiday_calendar import extend_class\n\nxlon_extended_cls = extend_class(XLONExchangeCalendar, day_of_week_expiry=4)\n```\nThe first argument to `extend_class` should be the class of the exchange calendar to be extended. The second parameter \nis the day of the week on which expiry days are normally observed. The returned extended class directly inherits from \nthe passed base class, but also adds the additional attributes like `quarterly_expiries` et cetera.\n\nTo register a new extended class for an exchange, use the `register_extension` function before calling `apply_extensions()`.\n```python\nfrom exchange_calendars_extensions import register_extension, apply_extensions\n\nregister_extension(key, cls)\n\napply_extensions()\n\n...\n```\nHere, `key` should be the name, i.e. not an alias, under which the extended class is registered with the \n`exchange_calendars` package, and `cls` should be the extended class.\n\n## Contributing\nContributions are welcome. Please open an issue or submit a pull request on GitHub.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jenskeiner/exchange_calendars_extensions/",
    "keywords": "exchange,calendar,trading,holidays",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "exchange-calendars-extensions",
    "package_url": "https://pypi.org/project/exchange-calendars-extensions/",
    "platform": null,
    "project_url": "https://pypi.org/project/exchange-calendars-extensions/",
    "project_urls": {
      "Documentation": "https://github.com/jenskeiner/exchange_calendars_extensions/tree/main/docs/",
      "Homepage": "https://github.com/jenskeiner/exchange_calendars_extensions/",
      "Repository": "https://github.com/jenskeiner/exchange_calendars_extensions/"
    },
    "release_url": "https://pypi.org/project/exchange-calendars-extensions/0.1.1/",
    "requires_dist": [
      "exchange-calendars (>=4.0.1)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Extensions of the exchange_calendars package",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17150197,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deb8bc1f0d7eea1bd02663f564cbc33a1d693a67a84bb4f7539ff84f6802cbe7",
          "md5": "8a890247106b9537a1f11115ed0571a7",
          "sha256": "a91641e6d7f8a2f177fdbcce9b1ee693999cf42b4f15540311ff82c2f0c665c4"
        },
        "downloads": -1,
        "filename": "exchange_calendars_extensions-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a890247106b9537a1f11115ed0571a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 16776,
        "upload_time": "2023-03-03T22:42:31",
        "upload_time_iso_8601": "2023-03-03T22:42:31.243941Z",
        "url": "https://files.pythonhosted.org/packages/de/b8/bc1f0d7eea1bd02663f564cbc33a1d693a67a84bb4f7539ff84f6802cbe7/exchange_calendars_extensions-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "819425cbdc1ad7ff0af6988310fa050b5a8ad5854625f25a30adcc33af451ed1",
          "md5": "27be7d647ed97fab2a764fff5c1eeb68",
          "sha256": "61d8e569c7407f7059f34dc87b13479ea22f637a0b9afe5a1af84ba0afff3821"
        },
        "downloads": -1,
        "filename": "exchange_calendars_extensions-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "27be7d647ed97fab2a764fff5c1eeb68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16012,
        "upload_time": "2023-03-03T22:42:32",
        "upload_time_iso_8601": "2023-03-03T22:42:32.487240Z",
        "url": "https://files.pythonhosted.org/packages/81/94/25cbdc1ad7ff0af6988310fa050b5a8ad5854625f25a30adcc33af451ed1/exchange_calendars_extensions-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "deb8bc1f0d7eea1bd02663f564cbc33a1d693a67a84bb4f7539ff84f6802cbe7",
        "md5": "8a890247106b9537a1f11115ed0571a7",
        "sha256": "a91641e6d7f8a2f177fdbcce9b1ee693999cf42b4f15540311ff82c2f0c665c4"
      },
      "downloads": -1,
      "filename": "exchange_calendars_extensions-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a890247106b9537a1f11115ed0571a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 16776,
      "upload_time": "2023-03-03T22:42:31",
      "upload_time_iso_8601": "2023-03-03T22:42:31.243941Z",
      "url": "https://files.pythonhosted.org/packages/de/b8/bc1f0d7eea1bd02663f564cbc33a1d693a67a84bb4f7539ff84f6802cbe7/exchange_calendars_extensions-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "819425cbdc1ad7ff0af6988310fa050b5a8ad5854625f25a30adcc33af451ed1",
        "md5": "27be7d647ed97fab2a764fff5c1eeb68",
        "sha256": "61d8e569c7407f7059f34dc87b13479ea22f637a0b9afe5a1af84ba0afff3821"
      },
      "downloads": -1,
      "filename": "exchange_calendars_extensions-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "27be7d647ed97fab2a764fff5c1eeb68",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 16012,
      "upload_time": "2023-03-03T22:42:32",
      "upload_time_iso_8601": "2023-03-03T22:42:32.487240Z",
      "url": "https://files.pythonhosted.org/packages/81/94/25cbdc1ad7ff0af6988310fa050b5a8ad5854625f25a30adcc33af451ed1/exchange_calendars_extensions-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}