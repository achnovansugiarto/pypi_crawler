{
  "info": {
    "author": "attr: noddingpigeon.__author__",
    "author_email": "xtorch501@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![ci](https://github.com/bhky/nodding-pigeon/actions/workflows/ci.yml/badge.svg)](https://github.com/bhky/nodding-pigeon/actions)\n[![License MIT 1.0](https://img.shields.io/badge/license-MIT%201.0-blue.svg)](LICENSE)\n\n# Introduction\n\nThe **Nodding Pigeon** library provides a pre-trained model and \na simple inference API for detecting **head gestures** in short videos.\nUnder the hood, it uses Google [MediaPipe](https://google.github.io/mediapipe/)\nfor collecting the landmark features.\n\n# Installation\n\nTested for Python 3.8, 3.9, and 3.10.\n\nThe best way to install this library with its dependencies is from PyPI:\n```shell\npython3 -m pip install --upgrade noddingpigeon\n```\nAlternatively, to obtain the latest version from this repository:\n```shell\ngit clone git@github.com:bhky/nodding-pigeon.git\ncd nodding-pigeon\npython3 -m pip install .\n```\n\n# Usage\n\nAn easy way to try the API and the pre-trained model is to\nmake a short video with your head gesture.\n\n## Webcam\n\nThe code snippet below will perform the following:\n- Search for the pre-trained weights file from `$HOME/.noddingpigeon/weights/`,\n  if not exists, the file will be downloaded from this repository.\n- Start webcam.\n- Collect the needed number of frames (default `60`) for the model.\n- End webcam automatically (or you can press `q` to end earlier).\n- Make prediction of your head gesture and print the result to STDOUT.\n```python\nfrom noddingpigeon.inference import predict_video\n\nresult = predict_video()\nprint(result)\n# Example result:\n# {'gesture': 'nodding',\n#  'probabilities': {'has_motion': 1.0,\n#   'gestures': {'nodding': 0.9576354622840881,\n#    'turning': 0.042364541441202164}}}\n```\n\n## Video file\n\nAlternatively, you could provide a pre-recorded video file:\n\n```python\nfrom noddingpigeon.inference import predict_video\nfrom noddingpigeon.video import VideoSegment\n\nresult = predict_video(\n  \"your_head_gesture_video.mp4\",\n  video_segment=VideoSegment.LAST,  # Optionally change these parameters.\n  motion_threshold=0.5,\n  gesture_threshold=0.9\n)\n```\nNote that no matter how long your video is, only the\npre-defined number of frames (`60` for the current model) are used for\nprediction. The `video_segment` enum option controls how the frames \nare obtained from the video, \ne.g., `VideoSegment.LAST` means the last (`60`) frames will be used.\n\nThresholds can be adjusted as needed, see explanation in a later section.\n\n## Result format\n\nThe result is returned as a Python dictionary.\n\n```text\n{\n  'gesture': 'turning',\n  'probabilities': {\n    'has_motion': 1.0,\n    'gestures': {\n      'nodding': 0.009188028052449226,\n      'turning': 0.9908120036125183\n    }\n  }\n}\n```\n\n# Head gestures\n\nThe following `gesture` types are available:\n- `nodding` - Repeatedly tilt your head upward and downward.\n- `turning` - Repeatedly turn your head leftward and rightward.\n- `stationary` - Not tilting or turning your head; translation motion is still treated as stationary.\n- `undefined` - Unrecognised gesture or no landmarks detected (usually means no face is shown).\n\nTo determine the final `gesture`:\n- If `has_motion` probability is smaller than `motion_threshold` (default `0.5`),\n  `gesture` is `stationary`. Other probabilities are irrelevant.\n- Otherwise, we will look for the largest probability from `gestures`:\n  - If it is smaller than `gesture_threshold` (default `0.9`), `gesture` is `undefined`,\n  - else, the corresponding gesture label is selected (e.g., `nodding`).\n- If no landmarks are detected in the video, `gesture` is `undefined`. \n  The `probabilities` dictionary is empty.\n\n# API\n\n## `noddingpigeon.inference`\n\n### `predict_video`\nDetect head gesture shown in the input video either from webcam or file.\n- Parameters:\n  - `video_path` (`Optional[str]`, default `None`): \n    File path to the video file, or `None` for starting a webcam.\n  - `model` (`Optional[tf.keras.Model]`, default `None`): \n    A TensorFlow-Keras model instance, or `None` for using the default model.\n  - `max_num_frames` (`int`, default `60`):\n    Maximum number of frames to be processed by the model.\n    Do not change when using the default model.    \n  - `video_segment` (`VideoSegment` enum, default `VideoSegment.BEGINNING`):\n    See explanation of [`VideoSegment`](#videosegment).\n  - `end_padding` (`bool`, default `True`): \n    If `True` and `max_num_frames` is set, when the input video has not enough\n    frames to form the feature tensor for the model, padding at the end will be \n    done using the features detected on the last frame.\n  - `drop_consecutive_duplicates` (`bool`, default `True`):\n    If `True`, features from a certain frame will not be used to form the \n    feature tensor if they are considered to be the same as the previous frame.\n    This is a mechanism to prevent \"fake\" video created with static images.\n  - `postprocessing` (`bool`, default `True`):\n    If `True`, the final result will be presented as the Python dictionary\n    described in the [usage](#usage) section, otherwise the raw model output\n    is returned.\n  - `motion_threshold` (`float`, default `0.5`):\n    See the [head gestures](#head-gestures) section.\n  - `gesture_threshold` (`float`, default `0.9`):\n    See the [head gestures](#head-gestures) section.\n- Return:\n  - A Python dictionary if `postprocessing` is `True`, otherwise `List[float]`\n    from the model output.\n\n## `noddingpigeon.video`\n\n### `VideoSegment`\nEnum class for video segment options.\n- `VideoSegment.BEGINNING`: Collect the required frames for the model from the beginning of the video.\n- `VideoSegment.LAST`: Collect the required frames for the model toward the end of the video.\n\n## `noddingpigeon.model`\n\n### `make_model`\nCreate an instance of the model used in this library, \noptionally with pre-trained weights loaded.\n- Parameters:\n  - `weights_path` (`Optional[str]`, default `$HOME/.noddingpigeon/weights/*.h5`): \n    Path to the weights in HDF5 format to be loaded by the model. \n    The weights file will be downloaded if not exists.\n    If `None`, no weights will be downloaded nor loaded to the model.\n    Users can provide path if the default is not preferred. \n    The environment variable `NODDING_PIGEON_HOME` can also be used to indicate\n    where the `.noddingpigeon/` directory should be located.\n- Return:\n  - `tf.keras.Model` object.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bhky/nodding-pigeon",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "noddingpigeon",
    "package_url": "https://pypi.org/project/noddingpigeon/",
    "platform": null,
    "project_url": "https://pypi.org/project/noddingpigeon/",
    "project_urls": {
      "Homepage": "https://github.com/bhky/nodding-pigeon"
    },
    "release_url": "https://pypi.org/project/noddingpigeon/0.5.0/",
    "requires_dist": [
      "gdown (>=4.2.0)",
      "mediapipe (>=0.8.9.1)",
      "numpy (>=1.22.0)",
      "opencv-python (>=4.0.0.0)",
      "tensorflow (>=2.7.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Detection and classification of head gestures in videos",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13760569,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59e9f9ac93debc68f96e47d8efcfc03791f00963864fe873af5a50e3b644e0a0",
          "md5": "8e39a7fd9af7c4f04b7048632c531336",
          "sha256": "771c71c2ca25f13c057c858449a77cd7e50a2855ab564e7a801f548d547be000"
        },
        "downloads": -1,
        "filename": "noddingpigeon-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e39a7fd9af7c4f04b7048632c531336",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8850,
        "upload_time": "2022-05-09T06:18:25",
        "upload_time_iso_8601": "2022-05-09T06:18:25.683705Z",
        "url": "https://files.pythonhosted.org/packages/59/e9/f9ac93debc68f96e47d8efcfc03791f00963864fe873af5a50e3b644e0a0/noddingpigeon-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef87ce214f08161fb6018c8f24ace4a506e3250d9314503c9b1eca726f23e109",
          "md5": "21e890c8254f846e45fdae65755863ac",
          "sha256": "49ae317f0ae9e10275af63863c80ade4d09c132a014ff5f8bce1484ba4078f95"
        },
        "downloads": -1,
        "filename": "noddingpigeon-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "21e890c8254f846e45fdae65755863ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7394,
        "upload_time": "2022-05-09T06:18:28",
        "upload_time_iso_8601": "2022-05-09T06:18:28.736248Z",
        "url": "https://files.pythonhosted.org/packages/ef/87/ce214f08161fb6018c8f24ace4a506e3250d9314503c9b1eca726f23e109/noddingpigeon-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f02c4d9f98a7ddb1050bafa47f9b0a27f3de944b51b24d7e743233e57051bdef",
          "md5": "46d1902308f2ae998999e6164683b8f2",
          "sha256": "c0eeb63c16ea38bfdec0da335cead07701ddc1648c6eea57790b554d55f3b6b2"
        },
        "downloads": -1,
        "filename": "noddingpigeon-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46d1902308f2ae998999e6164683b8f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10031,
        "upload_time": "2022-05-09T16:01:51",
        "upload_time_iso_8601": "2022-05-09T16:01:51.805822Z",
        "url": "https://files.pythonhosted.org/packages/f0/2c/4d9f98a7ddb1050bafa47f9b0a27f3de944b51b24d7e743233e57051bdef/noddingpigeon-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fad4fb41544b61ff31b0f46630412abb0272fd04fbffb69fe20a5795e02edf1c",
          "md5": "b53a2f43290a0307ca6dd88b7a787d69",
          "sha256": "739ce5b3fdef0c8f2afa8da669cde29ffeb891c961ccf103370e858701e7c538"
        },
        "downloads": -1,
        "filename": "noddingpigeon-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b53a2f43290a0307ca6dd88b7a787d69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10742,
        "upload_time": "2022-05-09T16:01:54",
        "upload_time_iso_8601": "2022-05-09T16:01:54.084379Z",
        "url": "https://files.pythonhosted.org/packages/fa/d4/fb41544b61ff31b0f46630412abb0272fd04fbffb69fe20a5795e02edf1c/noddingpigeon-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f02c4d9f98a7ddb1050bafa47f9b0a27f3de944b51b24d7e743233e57051bdef",
        "md5": "46d1902308f2ae998999e6164683b8f2",
        "sha256": "c0eeb63c16ea38bfdec0da335cead07701ddc1648c6eea57790b554d55f3b6b2"
      },
      "downloads": -1,
      "filename": "noddingpigeon-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "46d1902308f2ae998999e6164683b8f2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 10031,
      "upload_time": "2022-05-09T16:01:51",
      "upload_time_iso_8601": "2022-05-09T16:01:51.805822Z",
      "url": "https://files.pythonhosted.org/packages/f0/2c/4d9f98a7ddb1050bafa47f9b0a27f3de944b51b24d7e743233e57051bdef/noddingpigeon-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fad4fb41544b61ff31b0f46630412abb0272fd04fbffb69fe20a5795e02edf1c",
        "md5": "b53a2f43290a0307ca6dd88b7a787d69",
        "sha256": "739ce5b3fdef0c8f2afa8da669cde29ffeb891c961ccf103370e858701e7c538"
      },
      "downloads": -1,
      "filename": "noddingpigeon-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b53a2f43290a0307ca6dd88b7a787d69",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10742,
      "upload_time": "2022-05-09T16:01:54",
      "upload_time_iso_8601": "2022-05-09T16:01:54.084379Z",
      "url": "https://files.pythonhosted.org/packages/fa/d4/fb41544b61ff31b0f46630412abb0272fd04fbffb69fe20a5795e02edf1c/noddingpigeon-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}