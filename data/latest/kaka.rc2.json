{
  "info": {
    "author": "zouliwei",
    "author_email": "330494152@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# KaKa\n\n一个基于`werkzeug`和`jinja2`的`web`框架，简单易用、架构清晰、模块化。\n\n## 快速开始\n### 安装并引入\n使用如下命令安装KaKa:\n\n    pip install KaKa\n\n使用如下命令将框架引入你的项目：\n\n    from kaka import KaKa\n\n### 实例化应用\n使用如下语句实例化一个`KaKa`应用对象：\n\n    app = KaKa()\n\n### 定义视图函数\n使用如下语句定义一个简单的视图函数，此函数将会接受`http`请求并返回一个简单的`hello world`字符串:\n\n    from kaka.response import TextResponse\n\n    def hello(request):\n        return TextResponse('hello world')\n\n### 定义路由表\n使用如下语句定义一个路由表以指导`http`请求的正确路由：\n\n    app.router.register([\n        ('index/', hello),\n    ])\n\n### 启动服务器\n执行如下语句启动服务器，`KaKa`会帮助我们启动底层的`WSGI`服务器，默认地址是`127.0.0.1`，端口号是`8888`：\n\n    app.run_server()\n\n`KaKa`为`run_server`接口提供了一个`debug`参数，默认值是`False`，若置为`True`则会启动`debug`模式。\n在`debug`模式中，任何对源代码的修改都将自动重启服务器，且一旦发生了错误将会在浏览器上以页面的形式显示出错误栈信息。\n可以这样开启`debug`模式：\n\n    app.run_server(debug=True)\n\n### 页面展示\n打开浏览器并访问`http://127.0.0.1:8888/index/`，你将会看到视图函数返回的`hello world`字符串。\n\n---\n\n## 功能介绍和使用\n\n然而，一个简单的`hello world`页面是不足以解决我们的问题的，下面是`KaKa`框架目前支持的功能介绍和使用说明。\n\n### 路由系统\n\n#### 定义路由表\n\n路由系统是`web`框架最核心的功能之一，`KaKa`使用术语`路由器`和`路由表`来描述路由系统。\n`KaKa`的路由系统底层引用了`Werkzeug`的`Map`和`Rule`模块。\n\n一张路由表由一个元组列表表示，其中的元组代表着路由条目信息。\n`KaKa`设定路由条目由`3`个参数组成：`url, view, name`，其中`name`可以不提供。\n但若为`name`提供了一个值，你就可以通过`reverse`函数来反向解析`url`，像这样：\n\n    from kaka.utils import reverse\n\n    # 路由表\n    table = [\n        ('index/', index_view),   # 路由条目1\n        ('articles/', article_view),  # 路由条目2\n\n        ('home/', home_view, 'home'),  # 路由条目3\n    ]\n\n    url = reverse('home')  # url的值是: '/home/'\n\n#### 处理动态元素\n\n如果`url`中有动态的元素，`KaKa`也可以处理，动态元素将会作为视图函数的参数传入，就像这样：\n\n    table = [\n        ('articles/<int:id>/', show_articles, 'article'),\n    ]\n\n#### 多级路由\n\n`KaKa`的路由系统还支持多级路由，这一部分的介绍和使用我将会放到产品文档中。\n\n\n### 视图系统\n#### 视图传参\n视图系统是处理`http`请求并返回`http`响应的地方。\n`KaKa`为所有的视图函数提供了一个`request`第一参数，代表当前的请求对象，用户可以通过此对象访问有底层请求环境的相关数据。\n\n#### 响应对象\n`KaKa`使用`TextResponse`类来封装字符串形式的返回值，这种返回值的`mimetype=text/plain`，所以它不会被浏览器当做`html`页面渲染，而是直接打印字符串。\n像这样使用视图系统：\n\n    from kaka.response import TextResponse\n\n    def show_articles(request, nid):\n        print(request.path)\n        print(request.cookies)\n        print(request.method)\n        print(nid)\n\n        return TextResponse('show articles view')\n\n### 模板渲染\n#### 模板目录设定\n模板渲染功能可以让我们方便的制造含有动态元素的`html`页面。\n在渲染功能上，`KaKa`目前没有做太多事情，仅是在底层引用了`jinja2`模块并为模板渲染过程提供了一层方便调用的接口。\n在使用渲染功能前首先定义模板文件目录：\n\n    # 设定模板文件所在目录\n    template_path = 'your template directory'\n    app.render.register(template_path)\n\n#### 渲染调用\n`KaKa`为用户提供了一个`RenderResponse`响应对象，其底层调用了`jinja2`的渲染接口。\n渲染的结果类型将会是`mimetype=text/html`，所以浏览器会将结果当做`html`页面渲染并展示。\n\n    from kaka.response import RenderResponse\n\n    # 在视图函数中使用模板渲染功能\n    def show_articles(request, id):\n        title = 'hello kaka'\n        content = 'a web framework'\n\n        return RenderResponse('article.html', title=title, content=content)\n\n\n### `Restful`支持\n\n#### `Restful`视图定义\n当然，`KaKa`也支持`Restful`形式的请求处理，`KaKa`使用了一个`RestView`来帮助分发请求，像这样定义`restful`的视图函数：\n\n    from kaka.restful import RestView\n\n    # 定义restful形式的处理视图，必须以类的形式定义\n    class ArticlesView(RestView):\n        def get(self, request, id):\n            pass\n\n        def post(self, request)\n            pass\n\n        ...  # 其他与http method同名的函数\n\n#### `Restful`视图路由\n`restful`的视图函数可以像这样添加到路由表中：\n\n    table = [\n        ('index/', index),\n        ('articles/', ArticlesView.restful, 'article),  # 使用类名.restful即可\n    ]\n\n#### `Restful`视图响应\n`KaKa`除了支持`restful`的请求之外还支持`restful`的响应，使用了`RestResponse`响应类，它的`mimetype=application/json`, 所以一个`restful`响应的使用和样式是这样的：\n\n    from kaka.restful import RestView\n    from kaka.response import RestResponse  # restful风格的响应类\n\n    class ArticlesView(RestView):\n        def get(self, request, id):\n            data = {'title': 'hello kaka', 'content': 'a web framework'}\n            extra_dict = {\n                'data': data,\n            }\n            return RestResponse(code=1200, status='success', extra_dict=extra_dict)\n\n    # 这样的响应在浏览器中看起来是这样的：\n    {\n        \"code\": 1200,\n        \"status\": \"success\",\n        \"data\": {\n            \"title\": \"hello kaka\",\n            \"content\": \"a web framework\"\n        }\n    }\n\n#### 高层`Restful`调用接口\n在`restful`的支持上，`KaKa`还提供了更高一层的`SUCCESS`和`FAIL`接口，为用户提供了更加方便的操作`restful`响应的形式，不过这两个接口的介绍和使用说明我将会放到产品文档中。\n\n### 中间件系统\n\n#### 处理机制解释\n`KaKa`提供了中间件系统，让用户可以在视图处理前和处理后对请求(或响应)对象完成必要的中间操作。\n我认为中间件系统的主要目的是**修改**流经的请求或响应对象，而**不是伪造**一个新的对象，这意味着`KaKa`提供的中间件系统的处理机制是这样的：\n\n* 视图前\n\n    `KaKa`的中间件系统在视图前的处理只允许返回`None`或一个响应对象(这意味着后续中间件不再有机会处理请求，视图函数也是)。换句话说，返回`None`意味着中间件仅仅对请求对象执行修改操作而不是替换它，返回一个响应对象意味着中间件拦截了这个请求并直接返回。\n\n* 视图后\n\n    `KaKa`的中间件系统在视图后的处理只允许返回`None`，这意味着中间件只能修改响应对象而不能替换它。\n\n*关于中间件系统的详细设计思路和结构请参考产品文档。*\n\n#### 定义中间件\n我们可以通过这种方式自定义一个中间件：\n\n    from kaka.middlewares import AbstractMiddleWare  # 抽象中间件类，用于约束处理接口\n    from kaka.response import TextResponse\n\n    class MyMiddleWare(AbstractMiddleWare):\n        def pre_process(self, request):\n            print('对请求对象做各种修改操作')\n            return None\n\n            # 如果要拦截当前请求，则这样写：\n            # return TextResponse('中间件拦截请求，直接返回响应对象')\n\n        def after_process(self, request, response):\n            print('对响应对象做各种修改操作', response)\n            return None\n\n#### 注册中间件\n然后通过中间件管理器注册这个中间件以使其生效：\n\n    import MyMiddleWare\n\n    app.mw_manager.register([\n        (5, MyMiddleWare),  # priority, cls\n    ])\n其中，`5`是表示优先级的数字，最小为0，最大无限制，**数字越小优先级越高**。\n\n\n#### 多个中间件的执行顺序\n如果定义了多个中间件(很常见的情况)，则它们的处理顺序是这样的：\n\n    app.mw_manager.register([\n        (5, MW1),\n        (7, MW2),\n        (9, MW3),\n    ])\n\n    # 视图前：MW1处理请求 -> MW2处理请求 -> MW3处理请求 \n    # 视图后：MW3处理响应 -> MW2处理响应 -> MW1处理响应\n\n#### 多个中间件的数据共享\n`KaKa`对请求对象和响应对象均设置了一个`storage`属性用以共享数据，它使用起来像这样：\n\n    # 请求中间件中的使用\n    def pre_process(self, request):\n        request.storage['is_handled'] = True\n\n        return None\n\n    # 视图中的使用\n    def show_articles(request):\n        print(request.storage.get('is_handled'))\n        response = TextResponse('hello world')\n        response.storage['name'] = 'kaka'\n\n        return response\n\n    # 响应中间件中的使用\n    def after_process(self, request, response):\n        print(request.get('is_handled'))\n        print(response.get('name'))\n\n        return None\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zlw10100/kaka/",
    "keywords": "pip,web,framework,wsgi,restful",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "KaKa",
    "package_url": "https://pypi.org/project/KaKa/",
    "platform": "any",
    "project_url": "https://pypi.org/project/KaKa/",
    "project_urls": {
      "Homepage": "https://github.com/zlw10100/kaka/"
    },
    "release_url": "https://pypi.org/project/KaKa/0.1.1/",
    "requires_dist": [
      "Werkzeug (>=0.14.1)",
      "jinja2 (>=2.10)"
    ],
    "requires_python": "",
    "summary": "A simple and easy-to-use web framework",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4803103,
  "releases": {
    "0.1.0": [],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecb3029025d787f54aa53e574002a2d2ca12c232c3fbd2eca06058e7ba8dcacc",
          "md5": "f17b2574e49e59bce94c10afa9c31ed4",
          "sha256": "ec6ed7ba472f26fa1b2fa1432f69cb68839f5787c79c48fc80063d3ab073f836"
        },
        "downloads": -1,
        "filename": "KaKa-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f17b2574e49e59bce94c10afa9c31ed4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17058,
        "upload_time": "2019-02-10T19:30:52",
        "upload_time_iso_8601": "2019-02-10T19:30:52.042361Z",
        "url": "https://files.pythonhosted.org/packages/ec/b3/029025d787f54aa53e574002a2d2ca12c232c3fbd2eca06058e7ba8dcacc/KaKa-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a23027e0f27f3d0b7ffbd4722ccebf25d0467a638afeaa5dd1781f49e66080a",
          "md5": "bdcf528d0e745e37ca1e7af26a02297a",
          "sha256": "fbe4c69fb398a82ccac99266be9f4d08b854572e1360c43d39ea9008bc16a184"
        },
        "downloads": -1,
        "filename": "KaKa-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bdcf528d0e745e37ca1e7af26a02297a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12700,
        "upload_time": "2019-02-10T19:30:53",
        "upload_time_iso_8601": "2019-02-10T19:30:53.465492Z",
        "url": "https://files.pythonhosted.org/packages/3a/23/027e0f27f3d0b7ffbd4722ccebf25d0467a638afeaa5dd1781f49e66080a/KaKa-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecb3029025d787f54aa53e574002a2d2ca12c232c3fbd2eca06058e7ba8dcacc",
        "md5": "f17b2574e49e59bce94c10afa9c31ed4",
        "sha256": "ec6ed7ba472f26fa1b2fa1432f69cb68839f5787c79c48fc80063d3ab073f836"
      },
      "downloads": -1,
      "filename": "KaKa-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f17b2574e49e59bce94c10afa9c31ed4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17058,
      "upload_time": "2019-02-10T19:30:52",
      "upload_time_iso_8601": "2019-02-10T19:30:52.042361Z",
      "url": "https://files.pythonhosted.org/packages/ec/b3/029025d787f54aa53e574002a2d2ca12c232c3fbd2eca06058e7ba8dcacc/KaKa-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a23027e0f27f3d0b7ffbd4722ccebf25d0467a638afeaa5dd1781f49e66080a",
        "md5": "bdcf528d0e745e37ca1e7af26a02297a",
        "sha256": "fbe4c69fb398a82ccac99266be9f4d08b854572e1360c43d39ea9008bc16a184"
      },
      "downloads": -1,
      "filename": "KaKa-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bdcf528d0e745e37ca1e7af26a02297a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12700,
      "upload_time": "2019-02-10T19:30:53",
      "upload_time_iso_8601": "2019-02-10T19:30:53.465492Z",
      "url": "https://files.pythonhosted.org/packages/3a/23/027e0f27f3d0b7ffbd4722ccebf25d0467a638afeaa5dd1781f49e66080a/KaKa-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}