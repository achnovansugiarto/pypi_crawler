{
  "info": {
    "author": "jeff.huth@bytecode.io & TransferWise",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# pipelinewise-tap-mixpanel\n\n[![PyPI version](https://badge.fury.io/py/pipelinewise-tap-mixpanel.svg)](https://badge.fury.io/py/pipelinewise-tap-mixpanel)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pipelinewise-tap-mixpanel.svg)](https://pypi.org/project/pipelinewise-tap-mixpanel/)\n[![License: AGPL](https://img.shields.io/badge/License-AGPLv3-yellow.svg)](https://opensource.org/licenses/AGPL-3.0)\n\n[Singer](https://www.singer.io/) tap that extracts data from a [Mixpanel API](https://developer.mixpanel.com/reference/overview) and produces JSON-formatted data following the [Singer spec](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md).\n\nThis is a [PipelineWise](https://transferwise.github.io/pipelinewise) compatible tap connector.\n\nThis tap:\n\n- Pulls raw data from the [Mixpanel Event Export API](https://developer.mixpanel.com/docs/exporting-raw-data) and the [Mixpanel Query API](https://developer.mixpanel.com/docs/data-export-api).\n- Extracts the following resources:\n  - Export (Events)\n  - Engage (People/Users)\n  - Funnels\n  - Annotations\n  - Cohorts\n  - Cohort Members\n  - Revenue\n- Outputs the schema for each resource\n- Incrementally pulls data based on the input state\n- Uses date-windowing to chunk/loop through `export`, `revenue`, `funnels`.\n- Incorporates attribution window for latency look-back to accommodate delays in data reconciliation.\n\n\n## Streams\n\n**[export](https://developer.mixpanel.com/docs/exporting-raw-data#section-export-api-reference)**\n- Endpoint: https://data.mixpanel.com/api/2.0/export\n- Primary key fields: `event`, `time`, `distinct_id`\n- Replication strategy: INCREMENTAL (query filtered)\n  - Bookmark: `time`\n  - Bookmark query field: `from_date`, `to_date`\n- Transformations: De-nest `properties` to root-level, re-name properties with leading `$...` to `mp_reserved_...`, convert datetimes from project timezone to UTC.\n- Optional parameters\n  - `export_events` to export only certain events\n\n**[engage](https://developer.mixpanel.com/docs/data-export-api#section-engage)**\n- Endpoint: https://mixpanel.com/api/2.0/engage\n- Primary key fields:  `distinct_id`\n- Replication strategy: FULL_TABLE (all records, every load)\n- Transformations: De-nest `$properties` to root-level, re-name properties with leading `$...` to `mp_reserved_...`.\n\n**[funnels](https://developer.mixpanel.com/docs/data-export-api#section-funnels)**\n- Endpoint 1 (name, id): https://data.mixpanel.com/api/2.0/export\n- Endpoint 2 (date, measures): https://mixpanel.com/api/2.0/funnels\n- Primary key fields: `funnel_id`, `date`\n- Parameters:\n  - `funnel_id`: {funnel_id} (from Endpoint 1)\n  - `unit`: day\n- Replication strategy: INCREMENTAL (query filtered)\n  - Bookmark: `date`\n  - Bookmark query field: `from_date`, `to_date`\n- Transformations: Combine Endpoint 1 & 2 results, convert `date` keys to list to `results` list-array.\n\n**[revenue](https://developer.mixpanel.com/docs/data-export-api#section-hr-span-style-font-family-courier-revenue-span)**\n- Endpoint: https://mixpanel.com/api/2.0/engage/revenue\n- Primary key fields: `date`\n- Parameters:\n  - `unit`: day\n- Replication strategy: INCREMENTAL (query filtered)\n  - Bookmark: `date`\n  - Bookmark query field: `from_date`, `to_date`\n- Transformations: Convert `date` keys to list to `results` list-array.\n\n**[annotations](https://developer.mixpanel.com/docs/data-export-api#section-annotations)**\n- Endpoint: https://mixpanel.com/api/2.0/annotations\n- Primary key fields: `date`\n- Replication strategy: FULL_TABLE\n- Transformations: None.\n\n**[cohorts](https://developer.mixpanel.com/docs/cohorts#section-list-cohorts)**\n- Endpoint: https://mixpanel.com/api/2.0/cohorts/list\n- Primary key fields: `id`\n- Replication strategy: FULL_TABLE\n- Transformations: None.\n\n**[cohort_members (engage)](https://developer.mixpanel.com/docs/data-export-api#section-engage)**\n- Endpoint: https://mixpanel.com/api/2.0/cohorts/list\n- Primary key fields: `distinct_id`, `cohort_id`\n- Parameters:\n  - `filter_by_cohort`: {cohort_id} (from `cohorts` endpoint)\n- Replication strategy: FULL_TABLE\n- Transformations: For each `cohort_id` in `cohorts` endpoint, query `engage` endpoint with `filter_by_cohort` parameter to create list of `distinct_id` for each `cohort_id`.\n\n\n## Authentication\nThe Mixpanel API uses Basic Authorization with the `api_secret` from the tap config in base-64 encoded format. It is slightly different than normal Basic Authorization with username/password. All requests should include this header with the `api_secret` as the username, with no password:\n\n- Authorization: `Basic <base-64 encoded api_secret>`\n\nMore details may be found in the [Mixpanel API Authentication](https://developer.mixpanel.com/docs/data-export-api#section-authentication) instructions. \n\n\n## Quick Start\n\n1. Install\n\n    ```bash\n    python3 -m venv venv\n    . venv/bin/activate\n    pip install --upgrade pip\n    pip install .\n    ```\n\n2. Create your tap's `config.json` file.  The tap config file for this tap should include these entries:\n   - `start_date` - the default value to use if no bookmark exists for an endpoint (rfc3339 date string)\n   - `user_agent` (string, optional): Process and email for API logging purposes. Example: `tap-mixpanel <api_user_email@your_company.com>`\n   - `api_secret` (string, `ABCdef123`): an API secret for each project in Mixpanel. This can be found in the Mixpanel Console, upper-right Settings (gear icon), Organization Settings > Projects and in the Access Keys section. For this tap, only the api_secret is needed (the api_key is legacy and the token is used only for uploading data). Each Mixpanel project has a different api_secret; therefore each Singer tap pipeline instance is for a single project.\n   - `date_window_size` (integer, `30`): Number of days for date window looping through transactional endpoints with from_date and to_date. Default date_window_size is 30 days. Clients with large volumes of events may want to decrease this to 14, 7, or even down to 1-2 days.\n   - `attribution_window` (integer, `5`): Latency minimum number of days to look-back to account for delays in attributing accurate results. [Default attribution window is 5 days](https://help.mixpanel.com/hc/en-us/articles/115004616486-Tracking-If-Users-Are-Offline).\n   - `project_timezone` (string like `US/Pacific`): Time zone in which integer date times are stored. The project timezone may be found in the project settings in the Mixpanel console. [More info about timezones](https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel). \n   - `select_properties_by_default` (`true` or `false`): Mixpanel properties are not fixed and depend on the date being uploaded. During Discovery mode and catalog.json setup, all current/existing properties will be captured. Setting this config parameter to true ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.\n   - `denest_properties` (`true` or `false`): To denest large and nested JSON Mixpanel responses in the `extract` and `engage` streams. To avoid very wide schema you can disable the denesting feature and the original JSON response will be sent in the RECORD message as plain object. Default `denest_properties` is `true`.\n\n    ```json\n    {\n        \"api_secret\": \"YOUR_API_SECRET\",\n        \"date_window_size\": \"30\",\n        \"attribution_window\": \"5\",\n        \"project_timezone\": \"US/Pacific\",\n        \"select_properties_by_default\": \"true\",\n        \"denest_properties\": \"true\",\n        \"start_date\": \"2019-01-01T00:00:00Z\",\n        \"user_agent\": \"tap-mixpanel <api_user_email@your_company.com>\"\n    }\n    ```\n\n    If you want to export only certain events from the [Raw export API](https://developer.mixpanel.com/reference/export)\n    then add `export_events` option to the `config.json` and list the required event names:\n\n    ```bash\n   \"export_events\": [\"event_one\", \"event_two\"]\n   ```\n\n    Optionally, also create a `state.json` file. `currently_syncing` is an optional attribute used for identifying the last object to be synced in case the job is interrupted mid-stream. The next run would begin where the last job left off.\n\n    ```json\n    {\n        \"currently_syncing\": \"engage\",\n        \"bookmarks\": {\n            \"export\": \"2019-09-27T22:34:39.000000Z\",\n            \"funnels\": \"2019-09-28T15:30:26.000000Z\",\n            \"revenue\": \"2019-09-28T18:23:53Z\"\n        }\n    }\n    ```\n\n3. Run the Tap in Discovery Mode\n    This creates a catalog.json for selecting objects/fields to integrate:\n    ```bash\n    tap-mixpanel --config config.json --discover > catalog.json\n    ```\n   See the Singer docs on discovery mode\n   [here](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#discovery-mode).\n\n4. Run the Tap in Sync Mode (with catalog) and [write out to state file](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target)\n\n    For Sync mode:\n    ```bash\n    > tap-mixpanel --config tap_config.json --catalog catalog.json\n    ```\n\n    Messages are written to standard output following the Singer specification.\n    The resultant stream of JSON data can be consumed by a Singer target.\n    To load to json files to verify outputs:\n    ```bash\n    > tap-mixpanel --config tap_config.json --catalog catalog.json | target-json > state.json\n    > tail -1 state.json > state.json.tmp && mv state.json.tmp state.json\n    ```\n    To pseudo-load to [Stitch Import API](https://github.com/singer-io/target-stitch) with dry run:\n    ```bash\n    > tap-mixpanel --config tap_config.json --catalog catalog.json | target-stitch --config target_config.json --dry-run > state.json\n    > tail -1 state.json > state.json.tmp && mv state.json.tmp state.json\n    ```\n\n# Test\n\n1. Install python test dependencies in a virtual env and run nose unit and integration tests\n\n    ```bash\n    python3 -m venv venv\n    . venv/bin/activate\n    pip install --upgrade pip\n    pip install .[test]\n    ```\n\n2. Run unit tests\n\n    ```\n    pytest tests/unittests\n    ```\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pipelinewise-tap-mixpanel",
    "package_url": "https://pypi.org/project/pipelinewise-tap-mixpanel/",
    "platform": "",
    "project_url": "https://pypi.org/project/pipelinewise-tap-mixpanel/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pipelinewise-tap-mixpanel/1.2.0/",
    "requires_dist": [
      "backoff (==1.8.0)",
      "requests (==2.22.0)",
      "pipelinewise-singer-python (==1.*)",
      "jsonlines (==1.2.0)",
      "pytest ; extra == 'test'",
      "pylint ; extra == 'test'",
      "requests-mock ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Singer.io tap for extracting data from the mixpanel API - PipelineWise compatible",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8534539,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05c81771a26848bfee5961832a679498a90c972f4795345a5735560ef37f4bd9",
          "md5": "18b32b8570d36bf1eed52cb509eb0d9b",
          "sha256": "3c47a6f4fc26fa75510e1ad3449ab77b1fdd244a7041138a605386530b3e1834"
        },
        "downloads": -1,
        "filename": "pipelinewise_tap_mixpanel-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18b32b8570d36bf1eed52cb509eb0d9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36807,
        "upload_time": "2020-10-27T18:02:13",
        "upload_time_iso_8601": "2020-10-27T18:02:13.602213Z",
        "url": "https://files.pythonhosted.org/packages/05/c8/1771a26848bfee5961832a679498a90c972f4795345a5735560ef37f4bd9/pipelinewise_tap_mixpanel-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9371a7c9dde64ec1100e0875bf157470a4467683f2c76a09efb271b153b1709c",
          "md5": "0b7d422389f34115f7e32cd73c725da9",
          "sha256": "7791a5d2ddbf44ac69d6d35f895d2233a3b0a657a8752674df658c48f981c58b"
        },
        "downloads": -1,
        "filename": "pipelinewise-tap-mixpanel-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0b7d422389f34115f7e32cd73c725da9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32033,
        "upload_time": "2020-10-27T18:02:15",
        "upload_time_iso_8601": "2020-10-27T18:02:15.124055Z",
        "url": "https://files.pythonhosted.org/packages/93/71/a7c9dde64ec1100e0875bf157470a4467683f2c76a09efb271b153b1709c/pipelinewise-tap-mixpanel-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4512a31cd16a367bdf8b6981c275c1ba18426e0af72dfb018b663c0623d9ab82",
          "md5": "fb898fd1d644fa6dedb1f8abd426dcb3",
          "sha256": "fbe2cdff4e5ce56300cd086b4f1b06ce46252c793729fc651c0843436c40a1d2"
        },
        "downloads": -1,
        "filename": "pipelinewise_tap_mixpanel-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb898fd1d644fa6dedb1f8abd426dcb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36866,
        "upload_time": "2020-10-29T09:20:38",
        "upload_time_iso_8601": "2020-10-29T09:20:38.452682Z",
        "url": "https://files.pythonhosted.org/packages/45/12/a31cd16a367bdf8b6981c275c1ba18426e0af72dfb018b663c0623d9ab82/pipelinewise_tap_mixpanel-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c749514effb6e610153e727139ac03eccdc79e4e8577ab08702c5f6e3bf4ca8",
          "md5": "31c10fd7a0fc75301605c7262dce9690",
          "sha256": "f3e9a719a452c77bcf8db9eaca8cfc262d41a3f4627c510cb26a3cbd915e31d6"
        },
        "downloads": -1,
        "filename": "pipelinewise-tap-mixpanel-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "31c10fd7a0fc75301605c7262dce9690",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32093,
        "upload_time": "2020-10-29T09:20:39",
        "upload_time_iso_8601": "2020-10-29T09:20:39.976411Z",
        "url": "https://files.pythonhosted.org/packages/0c/74/9514effb6e610153e727139ac03eccdc79e4e8577ab08702c5f6e3bf4ca8/pipelinewise-tap-mixpanel-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1de0fad75e1cd8bc251093cb9994b3a4972d6a6f25688a735cdbd7f98fe6c83",
          "md5": "2c77834bd854286adcebf936071df23d",
          "sha256": "8d8b3cca14d2f7a6f89ad762c713e59db150dc0e337ef28954ab5eb12690b589"
        },
        "downloads": -1,
        "filename": "pipelinewise_tap_mixpanel-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c77834bd854286adcebf936071df23d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37211,
        "upload_time": "2020-10-29T17:51:50",
        "upload_time_iso_8601": "2020-10-29T17:51:50.638950Z",
        "url": "https://files.pythonhosted.org/packages/a1/de/0fad75e1cd8bc251093cb9994b3a4972d6a6f25688a735cdbd7f98fe6c83/pipelinewise_tap_mixpanel-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f456a1cfa547cf481e18244b8be85a19c36b0ae502a9429808106420f7d0cada",
          "md5": "a5afb1faba79005e4d7d80bd6155b031",
          "sha256": "39980d7b71495d1106b1c4d3edf2c7f50b2167d9fedbc84751697809a7a2faf5"
        },
        "downloads": -1,
        "filename": "pipelinewise-tap-mixpanel-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5afb1faba79005e4d7d80bd6155b031",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32395,
        "upload_time": "2020-10-29T17:51:51",
        "upload_time_iso_8601": "2020-10-29T17:51:51.738797Z",
        "url": "https://files.pythonhosted.org/packages/f4/56/a1cfa547cf481e18244b8be85a19c36b0ae502a9429808106420f7d0cada/pipelinewise-tap-mixpanel-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1de0fad75e1cd8bc251093cb9994b3a4972d6a6f25688a735cdbd7f98fe6c83",
        "md5": "2c77834bd854286adcebf936071df23d",
        "sha256": "8d8b3cca14d2f7a6f89ad762c713e59db150dc0e337ef28954ab5eb12690b589"
      },
      "downloads": -1,
      "filename": "pipelinewise_tap_mixpanel-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2c77834bd854286adcebf936071df23d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 37211,
      "upload_time": "2020-10-29T17:51:50",
      "upload_time_iso_8601": "2020-10-29T17:51:50.638950Z",
      "url": "https://files.pythonhosted.org/packages/a1/de/0fad75e1cd8bc251093cb9994b3a4972d6a6f25688a735cdbd7f98fe6c83/pipelinewise_tap_mixpanel-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f456a1cfa547cf481e18244b8be85a19c36b0ae502a9429808106420f7d0cada",
        "md5": "a5afb1faba79005e4d7d80bd6155b031",
        "sha256": "39980d7b71495d1106b1c4d3edf2c7f50b2167d9fedbc84751697809a7a2faf5"
      },
      "downloads": -1,
      "filename": "pipelinewise-tap-mixpanel-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a5afb1faba79005e4d7d80bd6155b031",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32395,
      "upload_time": "2020-10-29T17:51:51",
      "upload_time_iso_8601": "2020-10-29T17:51:51.738797Z",
      "url": "https://files.pythonhosted.org/packages/f4/56/a1cfa547cf481e18244b8be85a19c36b0ae502a9429808106420f7d0cada/pipelinewise-tap-mixpanel-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}