{
  "info": {
    "author": "Philip Wafula, David Mwangi",
    "author_email": "philipwafula2@gmail.com, david.mwangi@kopokopo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# k2-connect-python\n[![PyPI](https://img.shields.io/pypi/v/k2-connect?style=for-the-badge)](https://pypi.org/project/k2-connect/)\n\nk2-connect is a Python library for accessing the Kopo Kopo APIs.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install k2connect.\n\n```bash\npip3 install k2-connect\n```\n\n## Usage\n### Initialization\nThe library is initialized once then all services maybe accessed by creating different instances for specific services.\nThe `BASE_URL` is a custom value and any url maybe passed provided it is secured and should only be accessible over TLS (HTTPS) and your server should have a valid certificate.\nInitialization requires the following arguments:\n* `base_url`\n* `client_id`\n* `client_secret`\n\n```python\nimport os\nimport k2connect\n\nCLIENT_ID = 'my_client_id'\nCLIENT_SECRET = os.getenv('MY_CLIENT_SECRET')\nBASE_URL = 'https://sandbox.kopopkopo.com/'\n\n#initialize the library\nk2connect.initialize(CLIENT_ID, CLIENT_SECRET, BASE_URL)\n```\n\n### k2connect services\nAfter initialization, k2connect services may be accessed by creating instances of a specific service. For instance:\n```python\n# create an instance of the service \nauthenticator = k2connect.Tokens\n\n# access a method provided by the service\nauthenticator.request_access_token()\n```\nOne can access the following k2connect services:\n- [TokensService](#token-service)\n- [PayService](#pay-service)\n- [ReceivePaymentsService](#receive-payments-service)\n- [TransferService](#transfers-service)\n- [WebhookService](#webhook-service)\n- [NotificationService](#notification-service)\n- [PollingService](#polling-service)\n\n#### Token service\nThe token service allows you to request access tokens that you will use in order to communicate with the Kopo Kopo APIs.\nThe token service avails the option for you to implement token refresh mechanism by providing the duration within which\nthe token will expire.\n\nThe `get_access_token()` and `get_token_expiry_duration()` methods each take a response object from which they extract the\ntoken and expiry duration values.A request token and expiry duration time can be gotten as follows: \n\n```python\n# create an instance of the token service\ntoken_service = k2connect.Tokens\n\n# request the access token\naccess_token_request = token_service.request_access_token()\n\n# get access token\naccess_token = token_service.get_access_token(access_token_request)\n\n# get expiry duration\ntoken_expiry_duration = token_service.get_token_expiry_duration(access_token_request)\n```\n\n#### Pay service\nThe pay service enables you to add external entities (recipients) as destinations for payments made withe the pay service. \nIt also enables you to make payments and check for a payment's status.\n\n\nTo add pay recipients the `add_pay_recipient()` method is used. The currently supported recipient types are `bank_account` and \n`mobile_wallet` the method then takes a set of key worded arguments required to create a recipient of either type. The accepted \nkey worded arguments are as follows:\n\nFor `bank_account` recipient:  \n* account_name `REQUIRED`\n* account_number `REQUIRED`\n* bank_branch_ref `REQUIRED`\n* settlement_method `REQUIRED`\n\n\nFor `mobile_wallet` recipient:\n* first_name `REQUIRED`\n* last_name `REQUIRED`\n* phone `REQUIRED`\n* email `REQUIRED`\n* network `REQUIRED`\n\n\nFor `till` recipient:\n* till_name `REQUIRED`\n* till_number `REQUIRED`\n\n\nFor `paybill` recipient:\n* paybill_name `REQUIRED`\n* paybill_number `REQUIRED`\n* paybill_account_number `REQUIRED`\n\nTo send payments the `send_pay()` method is used. It takes the following arguments:\n* bearer_token `REQUIRED`\n* callback_url `REQUIRED`\n* destination `REQUIRED`\n* amount `REQUIRED`\n* description `REQUIRED`\n* currency='KES' `REQUIRED`\n* metadata `OPTIONAL`. Maximum 5 dictionaries/hashes/key-value pairs.\n\n \nNote: the currency argument is set to `KES` as the default currency since that is the only ISO currency currently supported. It may however, \nbe overridden by passing a different currency value in its place. If you do not wish to override the `KES` currency you can simply avoid \npassing it as an argument.\n\nThe pay service also enables you to check the status of a transaction by querying a URL that points to the transaction resource, using the \n`pay_transaction_status()`.\n\n\n The Resource Location URL is returned by the either of the methods.\n\n ```python\n# create an instance of the pay service\npay_service = k2connect.Pay\n\n# create bank account pay recipient\nbank_recipient_request = {\n    \"access_token\": 'ACCESS_TOKEN',\n    \"recipient_type\": 'bank_account',\n    \"settlement_method\": \"EFT\",\n    \"account_name\": \"bank_account_name\",\n    \"bank_branch_ref\": \"633aa26c-7b7c-4091-ae28-96c0687cf886\",\n    \"account_number\": \"bank_account_number\"\n}\nbank_pay_location = pay_service.add_pay_recipient(bank_recipient_request)\n\n# create mobile wallet pay recipient\nmobile_recipient_request = {\n    \"access_token\": 'ACCESS_TOKEN',\n    \"recipient_type\": 'mobile_wallet',\n    \"first_name\": \"mobile_wallet_first_name\",\n    \"last_name\": \"mobile_wallet_last_name\",\n    \"phone_number\": \"+254123456789\",\n    \"network\": \"mobile_wallet_network\",\n    \"email\": \"test@test.com\"\n}\nmobile_pay_location = pay_service.add_pay_recipient(mobile_recipient_request)\n\n# create till pay recipient\ntill_recipient_request = {\n    \"access_token\": \"ACCESS_TOKEN\",\n    \"recipient_type\": \"till\",\n    \"till_name\": \"till_name\",\n    \"till_number\": \"till_number\",\n}\ntill_pay_location = pay_service.add_pay_recipient(till_recipient_request)\n\n# create paybill pay recipient\npaybill_recipient_request = {\n    \"access_token\": \"ACCESS_TOKEN\",\n    \"recipient_type\": \"paybill\",\n    \"paybill_name\": \"paybill_name\",\n    \"paybill_number\": \"paybill_number\",\n    \"paybill_account_number\": \"account_number\",\n}\npaybill_pay_location = pay_service.add_pay_recipient(paybill_recipient_request)\n                                                                \n# send pay transaction to mobile wallet\nrequest_payload = {\n            \"access_token\": 'ACCESS_TOKEN',\n            \"destination_reference\": '9764ef5f-fcd6-42c1-bbff-de280becc64b',\n            \"destination_type\": 'mobile_wallet',\n            \"callback_url\": 'https://webhook.site/52fd1913-778e-4ee1-bdc4-74517abb758d',\n            \"amount\": '10',\n            \"currency\": 'KES',\n            \"metadata\": { \"hey\": 'there', \"mister\": 'angelo'}\n        }\ncreate_mobile_pay_location = pay_service.send_pay(request_payload)\n                                                                \n# send pay transaction to bank account\nrequest_payload = {\n            \"access_token\": 'ACCESS_TOKEN',\n            \"destination_reference\": '9764ef5f-fcd6-42c1-bbff-de280becc64b',\n            \"destination_type\": 'bank_account',\n            \"callback_url\": 'https://webhook.site/52fd1913-778e-4ee1-bdc4-74517abb758d',\n            \"amount\": '10',\n            \"currency\": 'KES',\n            \"metadata\": { \"hey\": 'there', \"mister\": 'angelo'}\n        }\ncreate_bank_pay_location = pay_service.send_pay(request_payload)\n                                                                \n# send pay transaction to till\nrequest_payload = {\n            \"access_token\": 'ACCESS_TOKEN',\n            \"destination_reference\": '9764ef5f-fcd6-42c1-bbff-de280becc64b',\n            \"destination_type\": 'till',\n            \"callback_url\": 'https://webhook.site/52fd1913-778e-4ee1-bdc4-74517abb758d',\n            \"amount\": '10',\n            \"currency\": 'KES',\n            \"metadata\": { \"hey\": 'there', \"mister\": 'angelo'}\n        }\ncreate_till_pay_location = pay_service.send_pay(request_payload)\n                                                                \n# send pay transaction to paybill account\nrequest_payload = {\n            \"access_token\": 'ACCESS_TOKEN',\n            \"destination_reference\": '9764ef5f-fcd6-42c1-bbff-de280becc64b',\n            \"destination_type\": 'paybill',\n            \"callback_url\": 'https://webhook.site/52fd1913-778e-4ee1-bdc4-74517abb758d',\n            \"amount\": '10',\n            \"currency\": 'KES',\n            \"metadata\": { \"hey\": 'there', \"mister\": 'angelo'}\n        }\ncreate_paybill_pay_location = pay_service.send_pay(request_payload)\n\n# get payment request status\npay_request_status = pay_service.pay_transaction_status(create_mobile_pay_location)\n```\n\n#### Receive payments service\nThe receive payments service allows you to create requests for incoming payments over a specific channel and receive the payments \nto your account. You can also check the status of your payment requests and access the payment request through a URL.\n\n\nIn order to create a payment request, the `create_payment_request()` method is used. This method can be passed the following arguments:\n* bearer_token `REQUIRED`\n* callback_url `REQUIRED`\n* first_name `REQUIRED`\n* last_name `REQUIRED`\n* payment_channel `REQUIRED`\n* phone `REQUIRED`\n* till_number `REQUIRED`\n* value `REQUIRED`\n* currency='KES' `REQUIRED`\n* metadata `OPTIONAL`. Maximum 5 dictionaries/hashes/key-value pairs.\n\nNote: the currency argument is set to `KES` as the default currency since that is the only ISO currency currently supported. It may however, \nbe overridden by passing a different currency value in its place. If you do not wish to override the `KES` currency you can simply avoid \npassing it as an argument.\n\n\nThe method also creates the provision for optional `email` information to be passed in the key worded argument form, \nfor instance:\n\n`email='mycool@email.domain'`\n\nFurthermore, the `create_payment_request()` allows you to add metadata information passed in the form of a maximum of 5 key worded arguments.  \nThe URL required for checking a payment request status is returned by default with the `create_payment_request` method.  \n\n```python\nimport os\n\n# get the access token\nBEARER_TOKEN = os.getenv('MY_BEARER_TOKEN')\n\n# create an instance of the receive payments service\nreceive_payments_service = k2connect.ReceivePayments\n\n# create a payment request\nrequest_payload = {\n    \"access_token\": 'ACCESS_TOKEN',\n    \"callback_url\": \"https://webhook.site/52fd1913-778e-4ee1-bdc4-74517abb758d\",\n    \"first_name\": \"python_first_name\",\n    \"last_name\": \"python_last_name\",\n    \"email\": \"daivd.j.kariuki@gmail.com\",\n    \"payment_channel\": \"MPESA\",\n    \"phone_number\": \"+254911222536\",\n    \"till_number\": \"K112233\",\n    \"amount\": \"10\",\n    \"metadata\": { \"hey\": 'there', \"mister\": 'angelo'}\n}\nmpesa_payment_location = receive_payments_service.create_payment_request(request_payload)\n\n# get payment request status\npayment_request_status = receive_payments_service.payment_request_status(mpesa_payment_location)\n```\n\n#### Transfers service\nThe transfer service enables you to create verified settlement mobile and bank accounts with respective `add_settlement_account()` methods. The method takes the following arguments:\n\nCommon for both:\n* bearer_token `REQUIRED`\n\nFor `add_bank_settlement_account`:  \n* account_name `REQUIRED`\n* account_number `REQUIRED`\n* bank_id `REQUIRED`\n* bank_branch_id `REQUIRED`\n\nFor `add_mobile_wallet_settlement_account` recipient:  \n* msisdn `REQUIRED`\n* network: 'Safaricom' `REQUIRED`\n\n\nThe transfer service enables you to transfer funds to these pre-approved settlement accounts. To settle funds the `settle_funds()` is used. It enables you to make two types of transfer\ntransactions, a blind settlement and a targeted settlement. A blind transaction is made with the `destination` argument set to `None`, in the event that an ID for the destination of funds \nis provided then a targeted transfer is made to that destination. The method takes the following arguments:\n\n* bearer_token `REQUIRED`\n* transfer_value `REQUIRED`\n* transfer_currency = 'KES' `REQUIRED`\n* destination_type `OPTIONAL`\n* destination_reference `OPTIONAL`  \n\nNote: the currency argument is set to `KES` as the default currency since that is the only ISO currency currently supported. It may however, \nbe overridden by passing a different currency value in its place. If you do not wish to override the `KES` currency you can simply avoid \npassing it as an argument.\n\n\nYou can check a transfer transaction's status by querying the transaction resource's location \nURL which is returned by the `settle_funds` method by default.  \nThe `transfer_transaction_status()` method is then used to check a transfer transaction status.\n\n```python\n# initialize the transfer service\ntransfer_service = k2connect.Transfers\n\n# create verified settlement bank account\nrequest_payload = {\n            \"access_token\": 'ACCESS_TOKEN',\n            \"settlement_method\": 'RTS',\n            \"account_name\": 'py_sdk_account_name',\n            \"account_number\": 'py_sdk_account_number',\n            \"bank_branch_ref\": '633aa26c-7b7c-4091-ae28-96c0687cf886'\n        }\nsettlement_account = transfer_service.add_bank_settlement_account(request_payload)\n# create verified settlement mobile account\nrequest_payload = {\n    \"access_token\": 'ACCESS_TOKEN',\n    \"first_name\": 'py_sdk_first_name',\n    \"last_name\": 'py_sdk_last_name',\n    \"phone_number\": '+254911222538',\n    \"network\": 'Safaricom'\n    }\nsettlement_account = transfer_service.add_mobile_wallet_settlement_account(request_payload)\n\n# settle funds (blind transfer)\nrequest_payload = {\n    \"access_token\": 'ACCESS_TOKEN',\n    \"callback_url\": 'url',\n    \"value\": '10',\n    }\ntransfer_transaction = transfer_service.settle_funds(request_payload) \n\n# settle funds (targeted transfer to a merchant_wallet)\nrequest_payload = {\n            \"access_token\": 'ACCESS_TOKEN',\n            \"destination_type\": 'merchant_bank_account',\n            \"destination_reference\": '87bbfdcf-fb59-4d8e-b039-b85b97015a7e',\n            \"callback_url\": 'https://webhook.site/52fd1913-778e-4ee1-bdc4-74517abb758d',\n            \"value\": '10',\n        }\ntransfer_transaction_mobile_location = transfer_service.settle_funds(request_payload)\n\n# settle funds (targeted transfer to a merchant_wallet)\nrequest_payload = {\n            \"access_token\": 'ACCESS_TOKEN',\n            \"destination_type\": 'merchant_wallet',\n            \"destination_reference\": 'eba238ae-e03f-46f6-aed5-db357fb00f9c',\n            \"callback_url\": 'https://webhook.site/52fd1913-778e-4ee1-bdc4-74517abb758d',\n            \"value\": '10',\n        }\ntransfer_transaction_bank_location = transfer_service.settle_funds(request_payload)\n\n# get transfer transaction status\ntransfer_transaction_status = transfer_service.transfer_transaction_status(transfer_transaction_mobile_location or transfer_transaction_bank_location)\n```\n\n##### The destination_reference number corresponding to a settlement account must exist before you can settle_funds to it. \n\n#### Webhook service\nThe webhook service allows you to create subscriptions to events that occur on the KopoKopo application. The `create_subscription()` method is used, \nit takes the following arguments:\n\n* bearer_token `REQUIRED`\n* event_type `REQUIRED`\n* webhook_endpoint `REQUIRED`\n* client_secret `REQUIRED`\n\n\nCurrently the following events are supported:\n* b2b_transaction_received\n* buygoods_transaction_received\n* buygoods_transaction_reversed\n* m2m_transaction_received\n* settlement_transfer_completed\n* customer_created\n\n```python\nimport os\n\n# initialize service\nwebhook_service = k2connect.Webhooks\n\nrequest_payload = {\n    \"access_token\": 'ACCESS_TOKEN',\n    \"event_type\": 'buygoods_transaction_received',\n    \"webhook_endpoint\": 'https://webhook.site/52fd1913-778e-4ee1-bdc4-74517abb758d',\n    \"scope\": 'till',\n    \"scope_reference\": '112233'\n    }\n\n# create webhook subscription\ncustomer_created_subscription = webhook_service.create_subscription(request_payload)\n```\n\n#### Notification service\nThis service allows you to send custom sms messages to successful buy-goods transactions received that occurred on the Kopo Kopo. \nIt takes the following arguments:\n\n* bearer_token `REQUIRED`\n* webhookEventReference: The webhook event reference for a buygoods_transaction_received webhook. `REQUIRED`\n* message: The message to be sent `REQUIRED`\n* callbackUrl: Url that the result will be posted to `REQUIRED`\n\nNote: A buygoods_transaction_received webhook subscription must have been created, with its subsequent webhook event in place.\n\n\nYou can check an SMS notification request's status by querying the requests' location \nURL which is returned by the `send_transaction_sms_notification` method by default.  \nThe `transaction_notification_status()` method is used to check an SMS notification request status.\n\n```python\nimport os\n\n# initialize notification service\nnotification_service = k2connect.Notifications\n\n# create transaction sms notifications\nrequest_payload = {\n    \"access_token\": 'ACCESS_TOKEN',\n    \"callback_url\": 'callback_url',\n    \"webhook_event_reference\": \"d81312b9-4c0e-4347-971f-c3d5b14bdbe4\",\n    \"message\": 'Alleluia',\n    }\nnotification_resource_location_url = notification_service.send_transaction_sms_notification(request_payload)\n\n# get request status\nrequest_status = notification_service.transaction_notification_status(notification_resource_location_url)\n```\n\n#### Polling service\nThis service allows you to poll transactions received on the Kopo Kopo system within a certain time range, and either a company or a specific till. \nIt takes the following arguments:\n\n* bearer_token `REQUIRED`\n* fromTime: The starting time of the polling request `REQUIRED`\n* toTime: The end time of the polling request `REQUIRED`\n* scope: The scope of the polling request `REQUIRED`\n* scopeReference: The scope reference `REQUIRED for the 'till' scope`\n* callbackUrl: Url that the result will be posted to `REQUIRED`\n\nYou can check a polling request's status by querying the requests' location \nURL which is returned by the `create_polling_request` method by default.  \nThe `polling_request_status()` method is used to check an polling request status.\n\n```python\nimport os\n\n# initialize service\nnotification_service = k2connect.Polling\n\n# create polling request\nrequest_payload = {\n    \"access_token\": 'ACCESS_TOKEN',\n    \"callback_url\": 'callback_url',\n    \"scope\": \"till\",\n    \"scope_reference\": \"112233\",\n    \"from_time\": \"2021-07-09T08:50:22+03:00\",\n    \"to_time\": \"2021-07-10T18:00:22+03:00\",\n    }\npolling_resource_location_url = notification_service.send_transaction_sms_notification(request_payload)\n\n# get request status\nrequest_status = notification_service.transaction_notification_status(polling_resource_location_url)\n```\n\nFor more information, please read [Transaction Notification Docs](https://api-docs.kopokopo.com/#transaction-sms-notifications)\n\n#### Result processor \nResults (inclusive of webhook results and results posted to callback URLs asynchronously) sent from KopoKopo have to be processed before payloads can \nbe accessed. The result processor can be used to accomplish this using the `process()` method.\n\n```python\n# initialize result handler\nresult_handler = k2connect.ResultHandler\n\n# process result \nprocessed_payload = result_handler.process(some_result)\n```\n\n#### Payload decomposer\nOnce a result is processed an a payload has been returned, it can be decomposed into its constituent result data using the payload decomposer.\nThe payload decomposer achieves this using the `decompose()` method.\n\n```python\nfrom k2connect import payload_decomposer\n\n# decompose a payload\ndecomposer = payload_decomposer.decompose(processed_payload)\n\n# get first name\nfirst_name = decomposer.first_name\n```\n\n### Author\nThis library was written by [PhilipWafula](https://github.com/PhilipWafula) and [David Kariuki Mwangi](https://github.com/DavidJonKariz).\n\n### Contributing\nBug reports and pull requests are welcome. Feel free raise issues on our [issues tracker](https://github.com/kopokopo/k2-connect-python/issues)\n\n### License\nk2connect-python is [MIT](https://github.com/kopokopo/k2-connect-python/blob/master/LICENSE) Licensed.\n\n### Changelog\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kopokopo/k2-connect-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "k2-connect",
    "package_url": "https://pypi.org/project/k2-connect/",
    "platform": "",
    "project_url": "https://pypi.org/project/k2-connect/",
    "project_urls": {
      "Homepage": "https://github.com/kopokopo/k2-connect-python"
    },
    "release_url": "https://pypi.org/project/k2-connect/1.2.4/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A python SDK to connect to Kopo Kopo API",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13054037,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d1c36be7ac766da6ad5bea766e6eece5eb722d264cef8d561def5fd6e5c85c7",
          "md5": "fdf6935a383b244598123f9ee4a71f76",
          "sha256": "bb543fe099f064aa13f386082ec41d80483ebfc878e7cd003ecfec028fd39347"
        },
        "downloads": -1,
        "filename": "k2-connect-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fdf6935a383b244598123f9ee4a71f76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 25138,
        "upload_time": "2021-04-07T15:38:08",
        "upload_time_iso_8601": "2021-04-07T15:38:08.792183Z",
        "url": "https://files.pythonhosted.org/packages/8d/1c/36be7ac766da6ad5bea766e6eece5eb722d264cef8d561def5fd6e5c85c7/k2-connect-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a2b8b4914e2d4f3ae336d1ab147e10e0d50b6aa1d84267e42dbecf3ad7195ba",
          "md5": "04af95cbeed07d89bf84a1406c340774",
          "sha256": "4cefc90f881d67982be7f2df94edf807ac542e55cb63fb658e799613a310b7e2"
        },
        "downloads": -1,
        "filename": "k2_connect-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04af95cbeed07d89bf84a1406c340774",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 31821,
        "upload_time": "2021-07-11T19:06:56",
        "upload_time_iso_8601": "2021-07-11T19:06:56.780513Z",
        "url": "https://files.pythonhosted.org/packages/4a/2b/8b4914e2d4f3ae336d1ab147e10e0d50b6aa1d84267e42dbecf3ad7195ba/k2_connect-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fed39a0c54686841ee9837508c24d67e300c30dc86571b2f9f557c3e76c04bb4",
          "md5": "9298b03d0a27a376628ad94f4c82d069",
          "sha256": "f49d525a4c6c162746a6f1619f5a4116674979d9f4a68c985df49b84a0be4c66"
        },
        "downloads": -1,
        "filename": "k2-connect-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9298b03d0a27a376628ad94f4c82d069",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26663,
        "upload_time": "2021-07-11T19:07:01",
        "upload_time_iso_8601": "2021-07-11T19:07:01.075452Z",
        "url": "https://files.pythonhosted.org/packages/fe/d3/9a0c54686841ee9837508c24d67e300c30dc86571b2f9f557c3e76c04bb4/k2-connect-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4a2bc8a1c6227e2c90466920f26d13e5c8fe7a92cc134d8f688bbdf052dce0d",
          "md5": "ba4ac5ff998d89e5ef94512263ff7a05",
          "sha256": "03f76bd8a8e3a60d5993da98d2a45390fa83ea81a5946747d496fb0d923f7d5e"
        },
        "downloads": -1,
        "filename": "k2_connect-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba4ac5ff998d89e5ef94512263ff7a05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 32041,
        "upload_time": "2021-07-14T15:12:07",
        "upload_time_iso_8601": "2021-07-14T15:12:07.059645Z",
        "url": "https://files.pythonhosted.org/packages/d4/a2/bc8a1c6227e2c90466920f26d13e5c8fe7a92cc134d8f688bbdf052dce0d/k2_connect-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c35374956967daaf2705b4912dc30f79a8bd932ab7d7fc38ba1fa8a8106ae537",
          "md5": "f2b0d2b502fc57f8c9fd1061f5b4b653",
          "sha256": "74a10e6c174da41098f09da9ee439507426940350a0d5db688fcdc851d4c7760"
        },
        "downloads": -1,
        "filename": "k2-connect-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f2b0d2b502fc57f8c9fd1061f5b4b653",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26989,
        "upload_time": "2021-07-14T15:12:13",
        "upload_time_iso_8601": "2021-07-14T15:12:13.296603Z",
        "url": "https://files.pythonhosted.org/packages/c3/53/74956967daaf2705b4912dc30f79a8bd932ab7d7fc38ba1fa8a8106ae537/k2-connect-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de7db3779641b05f95d0c96f71b3daa4c1a5a6b6a41778cb5c9900d0840d7755",
          "md5": "82db3943ea49badf4740127959ffd49f",
          "sha256": "0fb4ac197d55e73e562d96e823e72e3cabe4b92ee5cd5591cb6aba36b8665a26"
        },
        "downloads": -1,
        "filename": "k2_connect-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82db3943ea49badf4740127959ffd49f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 32341,
        "upload_time": "2022-03-02T04:28:26",
        "upload_time_iso_8601": "2022-03-02T04:28:26.351858Z",
        "url": "https://files.pythonhosted.org/packages/de/7d/b3779641b05f95d0c96f71b3daa4c1a5a6b6a41778cb5c9900d0840d7755/k2_connect-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe36d63ff1f96aa202e45a20dae6fce00b54cb05eb77f49893854772b6ed943f",
          "md5": "46f70cc3449fd2aadeedc78921a8573c",
          "sha256": "8646654bb2515ef0ecfbf3f705919340f5d044c9628be28a66f3d7f75fdfae8a"
        },
        "downloads": -1,
        "filename": "k2-connect-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "46f70cc3449fd2aadeedc78921a8573c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 27518,
        "upload_time": "2021-11-08T09:51:44",
        "upload_time_iso_8601": "2021-11-08T09:51:44.232972Z",
        "url": "https://files.pythonhosted.org/packages/fe/36/d63ff1f96aa202e45a20dae6fce00b54cb05eb77f49893854772b6ed943f/k2-connect-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50b2546339b0de84203213194a2d2001e21449a03e509c882bcf4fde4f32d751",
          "md5": "2d49d0cb312f9492e23eaf90977cfe8c",
          "sha256": "ab7eb929f7fdef62a82c824c6a0cacb8c85e58e8063be3385f4cd92d46848b69"
        },
        "downloads": -1,
        "filename": "k2_connect-1.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d49d0cb312f9492e23eaf90977cfe8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 32419,
        "upload_time": "2022-03-02T04:28:28",
        "upload_time_iso_8601": "2022-03-02T04:28:28.209063Z",
        "url": "https://files.pythonhosted.org/packages/50/b2/546339b0de84203213194a2d2001e21449a03e509c882bcf4fde4f32d751/k2_connect-1.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "027f92d9a0263b0bede2e585f83dfce1a7554e04e03f56838c5e4b829892516f",
          "md5": "2dc1b39c0bfed7ff88c35d50d164fc34",
          "sha256": "9f661dc327285ee44c8670b0dcee2ea5ffed06f4011a62505762be262fb6881e"
        },
        "downloads": -1,
        "filename": "k2-connect-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2dc1b39c0bfed7ff88c35d50d164fc34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 27671,
        "upload_time": "2022-03-02T04:28:35",
        "upload_time_iso_8601": "2022-03-02T04:28:35.909871Z",
        "url": "https://files.pythonhosted.org/packages/02/7f/92d9a0263b0bede2e585f83dfce1a7554e04e03f56838c5e4b829892516f/k2-connect-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50b2546339b0de84203213194a2d2001e21449a03e509c882bcf4fde4f32d751",
        "md5": "2d49d0cb312f9492e23eaf90977cfe8c",
        "sha256": "ab7eb929f7fdef62a82c824c6a0cacb8c85e58e8063be3385f4cd92d46848b69"
      },
      "downloads": -1,
      "filename": "k2_connect-1.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2d49d0cb312f9492e23eaf90977cfe8c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 32419,
      "upload_time": "2022-03-02T04:28:28",
      "upload_time_iso_8601": "2022-03-02T04:28:28.209063Z",
      "url": "https://files.pythonhosted.org/packages/50/b2/546339b0de84203213194a2d2001e21449a03e509c882bcf4fde4f32d751/k2_connect-1.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "027f92d9a0263b0bede2e585f83dfce1a7554e04e03f56838c5e4b829892516f",
        "md5": "2dc1b39c0bfed7ff88c35d50d164fc34",
        "sha256": "9f661dc327285ee44c8670b0dcee2ea5ffed06f4011a62505762be262fb6881e"
      },
      "downloads": -1,
      "filename": "k2-connect-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "2dc1b39c0bfed7ff88c35d50d164fc34",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 27671,
      "upload_time": "2022-03-02T04:28:35",
      "upload_time_iso_8601": "2022-03-02T04:28:35.909871Z",
      "url": "https://files.pythonhosted.org/packages/02/7f/92d9a0263b0bede2e585f83dfce1a7554e04e03f56838c5e4b829892516f/k2-connect-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}