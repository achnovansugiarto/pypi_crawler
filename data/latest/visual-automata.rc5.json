{
  "info": {
    "author": "Lewi Lie Uberg",
    "author_email": "lewi@uberg.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "<!--\n---\njupyter:\n  jupytext:\n    encoding: '# -*- coding: utf-8 -*-'\n    formats: ipynb,py:light,md\n    text_representation:\n      extension: .md\n      format_name: markdown\n      format_version: '1.3'\n      jupytext_version: 1.11.1\n  kernelspec:\n    display_name: Python 3\n    language: python\n    name: python3\n---\n-->\n# Visual Automata\n\n[![Latest Version](https://img.shields.io/pypi/v/visual-automata.svg)](https://pypi.python.org/pypi/visual-automata/)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/visual-automata.svg)](https://pypi.python.org/pypi/visual-automata/)\n[![Downloads](https://pepy.tech/badge/visual-automata)](https://pepy.tech/project/visual-automata)\n[![Coverage](https://img.shields.io/codecov/c/github/lewiuberg/visual-automata?color=blue)](https://app.codecov.io/gh/lewiuberg/visual-automata)\n\nCopyright 2021 [Lewi Lie Uberg](https://uberg.me/)\\\n_Released under the MIT license_\n\nVisual Automata is a Python 3 library built as a wrapper for the [Automata](https://github.com/caleb531/automata) library to add more visualization features.\n\n## Contents\n\n- [Visual Automata](#visual-automata)\n  - [Contents](#contents)\n  - [Prerequisites](#prerequisites)\n  - [Installing](#installing)\n  - [Finite Automaton (FA)](#finite-automaton-fa)\n    - [VisualDFA](#visualdfa)\n      - [Importing](#importing)\n      - [Instantiating DFAs](#instantiating-dfas)\n      - [Converting](#converting)\n      - [Transition Table](#transition-table)\n      - [Minimal-DFA](#minimal-dfa)\n      - [Check input strings](#check-input-strings)\n      - [Show Diagram](#show-diagram)\n    - [VisualNFA](#visualnfa)\n      - [Importing](#importing-1)\n      - [Instantiating NFAs](#instantiating-nfas)\n      - [Converting](#converting-1)\n      - [Transition Table](#transition-table-1)\n      - [Eliminate lambda/epsilon](#eliminate-lambdaepsilon)\n      - [Check input strings](#check-input-strings-1)\n      - [Show Diagram](#show-diagram-1)\n  - [Authors](#authors)\n  - [License](#license)\n  - [Acknowledgments](#acknowledgments)\n\n## Prerequisites\n\n[`pip install automata-lib`](https://github.com/caleb531/automata)\\\n[`pip install pandas`](https://github.com/pandas-dev/pandas)\\\n[`pip install graphviz`](https://github.com/xflr6/graphviz)\\\n[`pip install colormath`](https://github.com/gtaylor/python-colormath)\\\n[`pip install jupyterlab`](https://github.com/jupyterlab/jupyterlab)\n\n## Installing\n\n[`pip install visual-automata`](https://pypi.org/project/visual-automata/)\n\n## Finite Automaton (FA)\n\n### VisualDFA\n\n#### Importing\n\nImport needed classes.\n\n```python\nfrom automata.fa.dfa import DFA\n\nfrom visual_automata.fa.dfa import VisualDFA\n```\n\n#### Instantiating DFAs\n\nDefine an visual_automata DFA that can accept any string ending with 00 or 11.\n\n```python\ndfa = VisualDFA(\n    states={\"q0\", \"q1\", \"q2\", \"q3\", \"q4\"},\n    input_symbols={\"0\", \"1\"},\n    transitions={\n        \"q0\": {\"0\": \"q3\", \"1\": \"q1\"},\n        \"q1\": {\"0\": \"q3\", \"1\": \"q2\"},\n        \"q2\": {\"0\": \"q3\", \"1\": \"q2\"},\n        \"q3\": {\"0\": \"q4\", \"1\": \"q1\"},\n        \"q4\": {\"0\": \"q4\", \"1\": \"q1\"},\n    },\n    initial_state=\"q0\",\n    final_states={\"q2\", \"q4\"},\n)\n```\n\n#### Converting\n\nAn automata-lib DFA can be converted to a VisualDFA.\n\nDefine an automata-lib DFA that can accept any string ending with 00 or 11.\n\n```python\ndfa = DFA(\n    states={\"q0\", \"q1\", \"q2\", \"q3\", \"q4\"},\n    input_symbols={\"0\", \"1\"},\n    transitions={\n        \"q0\": {\"0\": \"q3\", \"1\": \"q1\"},\n        \"q1\": {\"0\": \"q3\", \"1\": \"q2\"},\n        \"q2\": {\"0\": \"q3\", \"1\": \"q2\"},\n        \"q3\": {\"0\": \"q4\", \"1\": \"q1\"},\n        \"q4\": {\"0\": \"q4\", \"1\": \"q1\"},\n    },\n    initial_state=\"q0\",\n    final_states={\"q2\", \"q4\"},\n)\n```\n\nConvert automata-lib DFA to VisualDFA.\n\n```python\ndfa = VisualDFA(dfa)\n```\n\n#### Transition Table\n\nOutputs the transition table for the given DFA.\n\n```python\ndfa.table\n```\n\n```text\n       0    1\n→q0   q3   q1\nq1    q3  *q2\n*q2   q3  *q2\nq3   *q4   q1\n*q4  *q4   q1\n```\n\n#### Minimal-DFA\n\nCreates a minimal DFA which accepts the same inputs as the old one. Unreachable states are removed and equivalent states are merged. States are renamed by default.\n\n```python\nnew_dfa = VisualDFA(\n    states={'q0', 'q1', 'q2'},\n    input_symbols={'0', '1'},\n    transitions={\n        'q0': {'0': 'q0', '1': 'q1'},\n        'q1': {'0': 'q0', '1': 'q2'},\n        'q2': {'0': 'q2', '1': 'q1'}\n    },\n    initial_state='q0',\n    final_states={'q1'}\n)\n```\n\n```python\nnew_dfa.table\n```\n\n```text\n      0    1\n→q0  q0  *q1\n*q1  q0   q2\nq2   q2  *q1\n```\n\n```python\nnew_dfa.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/new_dfa.png?raw=true \"new_dfa\")\n\n```python\nminimal_dfa = VisualDFA.minify(new_dfa)\nminimal_dfa.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/minimal_dfa.png?raw=true \"minimal_dfa\")\n\n```python\nminimal_dfa.table\n```\n\n```text\n                0        1\n→{q0,q2}  {q0,q2}      *q1\n*q1       {q0,q2}  {q0,q2}\n```\n\n#### Check input strings\n\n`1001` does not end with `00` or `11`, and is therefore `Rejected`\n\n```python\ndfa.input_check(\"1001\")\n```\n\n```text\n          [Rejected]                         \nStep: Current state: Input symbol: New state:\n1                →q0             1         q1\n2                 q1             0         q3\n3                 q3             0        *q4\n4                *q4             1         q1\n```\n\n`10011` does end with `11`, and is therefore `Accepted`\n\n```python\ndfa.input_check(\"10011\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1                →q0             1         q1\n2                 q1             0         q3\n3                 q3             0        *q4\n4                *q4             1         q1\n5                 q1             1        *q2\n```\n\n#### Show Diagram\n\nFor IPython `dfa.show_diagram()` may be used.\\\nFor a python script `dfa.show_diagram(view=True)` may be used to automatically view the graph as a PDF file.\n\n```python\ndfa.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/dfa.png?raw=true \"dfa\")\n\nThe `show_diagram` method also accepts input strings, and will return a graph with gradient `red` arrows for `Rejected` results, and gradient `green` arrows for `Accepted` results. It will also display a table with transitions states stepwise. The steps in this table will correspond with the `[number]` over each traversed arrow.\n\nPlease note that for visual purposes additional arrows are added if a transition is traversed more than once.\n\n```python\ndfa.show_diagram(\"1001\")\n```\n\n```text\n          [Rejected]                         \nStep: Current state: Input symbol: New state:\n1                →q0             1         q1\n2                 q1             0         q3\n3                 q3             0        *q4\n4                *q4             1         q1\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/dfa_1001.png?raw=true \"dfa_1001\")\n\n```python\ndfa.show_diagram(\"10011\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1                →q0             1         q1\n2                 q1             0         q3\n3                 q3             0        *q4\n4                *q4             1         q1\n5                 q1             1        *q2\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/dfa_10011.png?raw=true \"dfa_10011\")\n\n### VisualNFA\n\n#### Importing\n\nImport needed classes.\n\n```python\nfrom automata.fa.nfa import NFA\n\nfrom visual_automata.fa.nfa import VisualNFA\n```\n\n#### Instantiating NFAs\n\nDefine an visual_automata NFA that can accept any string with the pattern 10, 1010, 101010.\n\n```python\nnfa = VisualNFA(\n    states={\"q0\", \"q1\", \"q2\"},\n    input_symbols={\"0\", \"1\"},\n    transitions={\n        \"q0\": {\"\": {\"q2\"}, \"1\": {\"q1\"}},\n        \"q1\": {\"1\": {\"q2\"}, \"0\": {\"q0\", \"q2\"}},\n        \"q2\": {},\n    },\n    initial_state=\"q0\",\n    final_states={\"q0\"},\n)\n```\n\n#### Converting\n\nAn automata-lib NFA can be converted to a VisualNFA.\n\nDefine an automata-lib NFA that can accept any string with the pattern 10, 1010, 101010.\n\n```python\nnfa = NFA(\n    states={\"q0\", \"q1\", \"q2\"},\n    input_symbols={\"0\", \"1\"},\n    transitions={\n        \"q0\": {\"\": {\"q2\"}, \"1\": {\"q1\"}},\n        \"q1\": {\"1\": {\"q2\"}, \"0\": {\"q0\", \"q2\"}},\n        \"q2\": {},\n    },\n    initial_state=\"q0\",\n    final_states={\"q0\"},\n)\n```\n\nConvert automata-lib NFA to VisualNFA.\n\n```python\nnfa = VisualNFA(nfa)\n```\n\n#### Transition Table\n\nOutputs the transition table for the given DFA.\n\n```python\nnfa.table\n```\n\n```text\n             0   1   λ\n→*q0         ∅  q1  q2\nq1    {*q0,q2}  q2   ∅\nq2           ∅   ∅   ∅\n```\n\n#### Eliminate lambda/epsilon\n\nCreates a NFA with lambda transitions removed.\n\n```python\nnfa_eliminated = VisualNFA.eliminate_lambda(nfa)\n```\n\n```python\nnfa_eliminated.table\n```\n\n```text\n             0   1\n→*q0         ∅  q1\nq1    {*q0,q2}  q2\nq2           ∅   ∅\n```\n\n```python\nnfa_eliminated.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/eliminated_nfa.png?raw=true \"eliminated_nfa\")\n\n#### Check input strings\n\n`101` does not correspond with the pattern `10`, `1010`, `101010`, and is therefore `Rejected`\n\n```python\nnfa.input_check(\"101\")\n```\n\n```text\n          [Rejected]                         \nStep: Current state: Input symbol: New state:\n1               →*q0             1         q1\n2                 q1             0         q2\n3                 q2             1          ∅\n```\n\n`1010` does correspond with the pattern `10`, `1010`, `101010`, and is therefore `Accepted`\n\n```python\nnfa.input_check(\"1010\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1               →*q0             1         q1\n2                 q1             0       →*q0\n3               →*q0             1         q1\n4                 q1             0       →*q0\n```\n\n#### Show Diagram\n\nFor IPython `nfa.show_diagram()` may be used.\\\nFor a python script `nfa.show_diagram(view=True)` may be used to automatically view the graph as a PDF file.\n\n```python\nnfa.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/nfa.png?raw=true \"nfa\")\n\nThe `show_diagram` method also accepts input strings, and will return a graph with gradient `red` arrows for `Rejected` results, and gradient `green` arrows for `Accepted` results. It will also display a table with transitions states stepwise. The steps in this table will correspond with the `[number]` over each traversed arrow.\n\nPlease note that for visual purposes additional arrows are added if a transition is traversed more than once.\n\n```python\nnfa.show_diagram(\"101\")\n```\n\n```text\n          [Rejected]                         \nStep: Current state: Input symbol: New state:\n1               →*q0             1         q1\n2                 q1             0         q2\n3                 q2             1          ∅\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/nfa_101.png?raw=true \"nfa_101\")\n\n```python\nnfa.show_diagram(\"1010\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1               →*q0             1         q1\n2                 q1             0       →*q0\n3               →*q0             1         q1\n4                 q1             0       →*q0\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/nfa_1010.png?raw=true \"nfa_1010\")\n\nPlease note that for long input strings, the path calculations may take some time.\n\n```python\nbig_nfa = VisualNFA(\n    states={\"q1\", \"q2\", \"q3\", \"q4\", \"q5\", \"q6\", \"q7\", \"q8\"},\n    input_symbols={\"A\", \"C\", \"G\", \"T\"},\n    transitions={\n        \"q1\": {\"A\": {\"q7\"}, \"C\": {\"q4\"}, \"G\": {\"q4\", \"q2\"}, \"T\": {\"q4\"}},\n        \"q2\": {\"A\": {\"q3\", \"q6\"}, \"C\": {\"q2\", \"q4\"}, \"G\": {\"q3\", \"q6\"}, \"T\": {\"q6\"}},\n        \"q3\": {\"A\": {\"q8\"}, \"C\": {\"q8\"}, \"T\": {\"q8\"}},\n        \"q4\": {\"A\": {\"q5\"}, \"C\": {\"q4\"}, \"G\": {\"q5\"}, \"T\": {\"q2\", \"q4\", \"q5\"}},\n        \"q5\": {\"A\": {\"q3\", \"q8\"}, \"C\": {\"q3\", \"q8\"}, \"G\": {\"q8\"}, \"T\": {\"q3\", \"q8\"}},\n        \"q6\": {\"A\": {\"q8\"}, \"C\": {\"q8\"}, \"G\": {\"q8\"}, \"T\": {\"q8\"}},\n        \"q7\": {\"A\": {\"q7\", \"q8\"}, \"C\": {\"q7\", \"q8\"}, \"G\": {\"q8\"}, \"T\": {\"q3\", \"q8\"}},\n        \"q8\": {},\n    },\n    initial_state=\"q1\",\n    final_states={\"q8\"},\n)\n```\n\n```python\nbig_nfa.table\n```\n\n```python\nbig_nfa.show_diagram(\"CGC\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1                →q1             C         q4\n2                 q4             G         q5\n3                 q5             C        *q8\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/big_nfa.png?raw=true \"big_nfa\")\n\n## Authors\n\n- **[Lewi Lie Uberg](https://github.com/lewiuberg)** - [uberg.me](https://uberg.me/)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](https://github.com/lewiuberg/visual-automata/blob/master/LICENSE.txt) file for details\n\n## Acknowledgments\n\n- [Caleb Evans](https://github.com/caleb531) for his work on automata-lib.\n- [Geir Arne Hjelle](https://github.com/gahjelle), [Michal Porteš](https://github.com/mportesdev), and [Bart Willems](https://github.com/bart-r-willems) for their general counsel.\n- [Dr. Seifedine Kadry](https://www.noroff.no/en/contact/staff/53-academic/423-seifedine-kadry). My _Further Discrete Mathematics_ professor at **Noroff University College**, for teaching me Automata.\n- [JFLAP](http://www.jflap.org) for their work on a GUI based Automata application.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lewiuberg/visual-automata",
    "keywords": "automata",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "visual-automata",
    "package_url": "https://pypi.org/project/visual-automata/",
    "platform": "",
    "project_url": "https://pypi.org/project/visual-automata/",
    "project_urls": {
      "Homepage": "https://github.com/lewiuberg/visual-automata"
    },
    "release_url": "https://pypi.org/project/visual-automata/1.1.1/",
    "requires_dist": [
      "automata-lib",
      "pandas",
      "graphviz",
      "colormath",
      "jupyterlab",
      "forbiddenfruit"
    ],
    "requires_python": "",
    "summary": "Visual Automata is a Python 3 library built as a wrapper for the Automata library to add more visualization features.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10086292,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86c59f72c562d00c6dd20d3febbaf76c0c57ebd68347d941d5ef7b52f2a14d19",
          "md5": "3e519ed669c2ae5ef6d69efa2f9f20d0",
          "sha256": "e63432089c73b1be8b7d94b400626a9f25e202adc743365b2eae84828fae9092"
        },
        "downloads": -1,
        "filename": "visual_automata-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e519ed669c2ae5ef6d69efa2f9f20d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8961,
        "upload_time": "2021-03-19T13:53:20",
        "upload_time_iso_8601": "2021-03-19T13:53:20.202764Z",
        "url": "https://files.pythonhosted.org/packages/86/c5/9f72c562d00c6dd20d3febbaf76c0c57ebd68347d941d5ef7b52f2a14d19/visual_automata-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20135b24c690ed3596b71ded72f9fccf5504a33037027ffa90b50ab20fd7887a",
          "md5": "e5ec6d6accd517abb62aa44f66324620",
          "sha256": "552bccc3abc659180613bf51c350ea58451bd85dc5b2b47e1bde659b8c528826"
        },
        "downloads": -1,
        "filename": "visual-automata-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e5ec6d6accd517abb62aa44f66324620",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10280,
        "upload_time": "2021-03-19T13:53:22",
        "upload_time_iso_8601": "2021-03-19T13:53:22.834255Z",
        "url": "https://files.pythonhosted.org/packages/20/13/5b24c690ed3596b71ded72f9fccf5504a33037027ffa90b50ab20fd7887a/visual-automata-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c70cac38b00c953c3c6eaeae09696474f9af0c25690e53b1363f61da01be8a06",
          "md5": "4096314c0f2120249a82f1844dfd62dd",
          "sha256": "70caaeada3a3b4dac1a5e10e53065f6328510eeba3a843852100fb27de796b18"
        },
        "downloads": -1,
        "filename": "visual_automata-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4096314c0f2120249a82f1844dfd62dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8960,
        "upload_time": "2021-03-19T13:53:21",
        "upload_time_iso_8601": "2021-03-19T13:53:21.317721Z",
        "url": "https://files.pythonhosted.org/packages/c7/0c/ac38b00c953c3c6eaeae09696474f9af0c25690e53b1363f61da01be8a06/visual_automata-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99c6feb6a3042a6412a4ca5b3e368a2addb6ca9f586972ff21e96dd929c10584",
          "md5": "192cd6643325726202e8d431056a234a",
          "sha256": "eb32055bddde923ea6ea11b7c8b999b4348440da21c2adfe035b5398d40bc43c"
        },
        "downloads": -1,
        "filename": "visual-automata-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "192cd6643325726202e8d431056a234a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10268,
        "upload_time": "2021-03-19T13:53:24",
        "upload_time_iso_8601": "2021-03-19T13:53:24.263443Z",
        "url": "https://files.pythonhosted.org/packages/99/c6/feb6a3042a6412a4ca5b3e368a2addb6ca9f586972ff21e96dd929c10584/visual-automata-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c7724cdb866ca7bf7381600bfea18d7fbead56813612d25beb202ac114bd52e",
          "md5": "5879ad19ece5b53fed9e8f5ce11cd6e7",
          "sha256": "e7c46b3f307f867fdcdc82e22e5675a3b54fa7351a2ef71a4528e53c575d05b7"
        },
        "downloads": -1,
        "filename": "visual_automata-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5879ad19ece5b53fed9e8f5ce11cd6e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9226,
        "upload_time": "2021-03-19T15:20:41",
        "upload_time_iso_8601": "2021-03-19T15:20:41.294227Z",
        "url": "https://files.pythonhosted.org/packages/8c/77/24cdb866ca7bf7381600bfea18d7fbead56813612d25beb202ac114bd52e/visual_automata-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fe2b58e57cdc11b1844d14334cf1d28677ed6cb0ff4ffe5a35c631d59f292a6",
          "md5": "22802103118f8c6e5ad0c4b677ab8cba",
          "sha256": "ad7b8da31b6bbbc90114976ce46356a733f1dabad7d4c6c48e47588c7c47d6c5"
        },
        "downloads": -1,
        "filename": "visual-automata-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "22802103118f8c6e5ad0c4b677ab8cba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9979,
        "upload_time": "2021-03-19T15:20:42",
        "upload_time_iso_8601": "2021-03-19T15:20:42.426353Z",
        "url": "https://files.pythonhosted.org/packages/1f/e2/b58e57cdc11b1844d14334cf1d28677ed6cb0ff4ffe5a35c631d59f292a6/visual-automata-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "514996a6fd5f9cf6e4894046b301e472ecfb23567eba6cf9d6f24850b1dd533d",
          "md5": "087fe15e568267ebbc69822c2031a0f2",
          "sha256": "a4b6bee503dc77ac84fa834a8a94571e2fe211f1a8af82daf063dcda66b6b572"
        },
        "downloads": -1,
        "filename": "visual_automata-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "087fe15e568267ebbc69822c2031a0f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15806,
        "upload_time": "2021-03-31T23:02:17",
        "upload_time_iso_8601": "2021-03-31T23:02:17.546653Z",
        "url": "https://files.pythonhosted.org/packages/51/49/96a6fd5f9cf6e4894046b301e472ecfb23567eba6cf9d6f24850b1dd533d/visual_automata-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03edf5a762a8185de728a5c60bb02b6607fa12c75fdaf7f5c8fdd6493ced4e5a",
          "md5": "3799dbb5133e8650637ad0f4a7dcf697",
          "sha256": "43075b33fd2053b0c408d53f27967555a9f864bacab8c3a52b1d62560a491902"
        },
        "downloads": -1,
        "filename": "visual-automata-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3799dbb5133e8650637ad0f4a7dcf697",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15431,
        "upload_time": "2021-03-31T23:02:18",
        "upload_time_iso_8601": "2021-03-31T23:02:18.979741Z",
        "url": "https://files.pythonhosted.org/packages/03/ed/f5a762a8185de728a5c60bb02b6607fa12c75fdaf7f5c8fdd6493ced4e5a/visual-automata-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36f8e21824f14c8b0475ee74405ad57c6f856873c9f3bb3c88ded0d610f83472",
          "md5": "6e3dd089f58c3583d6da19ccda92df01",
          "sha256": "7f760fe0cf77ed2e5a8ebc8992144ed5285868cacb9c5d542c25e5052a20f704"
        },
        "downloads": -1,
        "filename": "visual_automata-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e3dd089f58c3583d6da19ccda92df01",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15873,
        "upload_time": "2021-04-16T15:41:21",
        "upload_time_iso_8601": "2021-04-16T15:41:21.535045Z",
        "url": "https://files.pythonhosted.org/packages/36/f8/e21824f14c8b0475ee74405ad57c6f856873c9f3bb3c88ded0d610f83472/visual_automata-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b0b70964289727c39c01545fcf129a6aaac24ad192ddccebb161159f8d2a0c1",
          "md5": "f94a864a871aacc1b16037c28092bf43",
          "sha256": "3fb1715aa9e0f893c68050ba88764f0848b1e347a8fa01f370a2943600519e07"
        },
        "downloads": -1,
        "filename": "visual-automata-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f94a864a871aacc1b16037c28092bf43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16080,
        "upload_time": "2021-04-16T15:41:22",
        "upload_time_iso_8601": "2021-04-16T15:41:22.864236Z",
        "url": "https://files.pythonhosted.org/packages/9b/0b/70964289727c39c01545fcf129a6aaac24ad192ddccebb161159f8d2a0c1/visual-automata-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36f8e21824f14c8b0475ee74405ad57c6f856873c9f3bb3c88ded0d610f83472",
        "md5": "6e3dd089f58c3583d6da19ccda92df01",
        "sha256": "7f760fe0cf77ed2e5a8ebc8992144ed5285868cacb9c5d542c25e5052a20f704"
      },
      "downloads": -1,
      "filename": "visual_automata-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e3dd089f58c3583d6da19ccda92df01",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15873,
      "upload_time": "2021-04-16T15:41:21",
      "upload_time_iso_8601": "2021-04-16T15:41:21.535045Z",
      "url": "https://files.pythonhosted.org/packages/36/f8/e21824f14c8b0475ee74405ad57c6f856873c9f3bb3c88ded0d610f83472/visual_automata-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b0b70964289727c39c01545fcf129a6aaac24ad192ddccebb161159f8d2a0c1",
        "md5": "f94a864a871aacc1b16037c28092bf43",
        "sha256": "3fb1715aa9e0f893c68050ba88764f0848b1e347a8fa01f370a2943600519e07"
      },
      "downloads": -1,
      "filename": "visual-automata-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f94a864a871aacc1b16037c28092bf43",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16080,
      "upload_time": "2021-04-16T15:41:22",
      "upload_time_iso_8601": "2021-04-16T15:41:22.864236Z",
      "url": "https://files.pythonhosted.org/packages/9b/0b/70964289727c39c01545fcf129a6aaac24ad192ddccebb161159f8d2a0c1/visual-automata-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}