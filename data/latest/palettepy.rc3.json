{
  "info": {
    "author": "Mario Nageh",
    "author_email": "marionageh7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "\r\r\n## PalettePy\r\r\n\r\r\nPalettePy: A Python library for powerful and easy console text styling with RGB 24-bit colors and default printing styles.\r\r\n\r\r\nDescription\r\r\n-----------\r\r\n\r\r\nPalettePy is an incredible Python library that can make your console outputs much more visually appealing and powerful. With PalettePy, you can style your text with a variety of colors and styles using RGB 24-bit colors, set different foreground and background colors, and create stylish print outputs without worrying about string concatenation.\r\r\n\r\r\nNot only does PalettePy make styling your text easy and effortless, it also supports default printing styles, which means that you don't need to edit your print function to enjoy the benefits of this library. This makes it easy to create eye-catching and attractive console outputs that will grab people's attention and make your code stand out. Overall, if you want to take your console outputs to the next level, PalettePy is definitely worth checking out!\r\r\n\r\r\nInstallation\r\r\n------------\r\r\n    pip install palettepy\r\r\n\r\r\nUsage\r\r\n-----\r\r\nPalettePy is an amazing Python library that is supported on Linux and Mac, and partially on Windows (with support for colors but not text styling) [Windwos 10 version number 1607 or an earlier version]\r\r\n\r\r\n\r\r\n \r\r\n\r\r\n    from palettepy import init,print,Printer\r\r\n\r\r\n\r\r\n    # RGB RED foreground Color , and Yellow background\r\r\n    init(Printer(foreground_color=\"#ff0000\",background_color=\"#F7C04A\",bold=True))\r\r\n\r\r\n\r\r\n    # Any Print Will Have The Defualt Configration\r\r\n    print(\"Hello PalettePy\")\r\r\n\r\r\n![Hello](https://raw.githubusercontent.com/MarioNageh/PalettePy/master/screens/hello_palette.png)\r\r\n![Hello](https://raw.githubusercontent.com/MarioNageh/PalettePy/master/screens/hello_lin.png)\r\r\n\r\r\n```python\r\r\n    # Import the necessary functions from the palettepy module\r\r\nfrom palettepy import Printer, init, print\r\r\n\r\r\n# Create a Printer object with a custom style\r\r\nmy_printer = Printer(foreground_color=\"#ff0000\", background_color=\"#F7C04A\", bold=True, italic=True, underline=True,\r\r\n                     strikethrough=True)\r\r\n\r\r\n# Initialize the printing environment with our custom Printer object\r\r\ninit(my_printer)\r\r\n\r\r\n# Print some text using our custom style\r\r\nprint(\"Hello PalettePy\")\r\r\n```\r\r\n\r\r\n**Printer class attributes:**\r\r\n\r\r\n- `foreground_color`: A string representing the desired foreground color of the text. This can be specified as a 24-bit RGB value (e.g. \"#FF0000\" for red) or a named color (e.g. \"red\").\r\r\n\r\r\n- `background_color`: A string representing the desired background color of the text. This can be specified in the same way as `foreground_color`.\r\r\n\r\r\n- `bold`: A boolean value indicating whether the text should be displayed in bold font.\r\r\n\r\r\n- `italic`: A boolean value indicating whether the text should be displayed in italic font.\r\r\n\r\r\n- `underline`: A boolean value indicating whether the text should be underlined.\r\r\n\r\r\n- `strikethrough`: A boolean value indicating whether the text should be displayed with a strikethrough line.\r\r\n\r\r\n\r\r\n![Style](https://raw.githubusercontent.com/MarioNageh/PalettePy/master/screens/style.png)\r\r\n\r\r\n\r\r\n**Awesome Feature: Easy Text Styling with PalettePy**\r\r\n\r\r\nOne of the most powerful features of PalettePy is its ability to make printing text in different colors and styles incredibly easy. With just a few lines of code, you can create custom styles for your text and use them to print messages without any string concatenation or formatting errors.\r\r\n\r\r\nThe example code below demonstrates how to use PalettePy to create custom text styles and print messages in different colors:\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n**Creating color styles**\r\r\n\r\r\nTo create a color style for your text, you need to use the color_style_foreground or color_style_background function. These functions take a hex color code as an argument and return a function that can be used to apply the color style to your text.\r\r\nHere's an example of how you can create a green foreground color style:\r\r\n\r\r\n```python\r\r\n    green_fg = color_style_foreground(\"#008000\")\r\r\n```\r\r\n\r\r\nSimilarly, you can create a blue background color style like this:\r\r\n\r\r\n```python\r\r\n    blue_bg = color_style_background(\"#0000FF\")\r\r\n```\r\r\n\r\r\n\r\r\n**Applying styles to text**\r\r\n\r\r\nOnce you have created a color style, you can use it to apply the color and style to your text. Here's an example of how you can apply a green foreground color style to your text:\r\r\n\r\r\n\r\r\n```python\r\r\n    success = bold(italic(green_fg(\"Success!\")))\r\r\n```\r\r\n\r\r\nThis creates a style that applies bold and italic styles to your text, and then applies the green foreground color style to it. You can then print the styled text using the print function:\r\r\n\r\r\n\r\r\n```python\r\r\n    print(success)\r\r\n```\r\r\n\r\r\n**Resetting the style**\r\r\n\r\r\n```python\r\r\n    print(f\"Here is Default Configuration {reset(success('Success Message'))}\")\r\r\n```\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\nExamples\r\r\n------------\r\r\n\r\r\n```python\r\r\n    # Import the necessary functions from the palettepy module\r\r\nfrom palettepy import init, color_style_foreground\r\r\n\r\r\n# Initialize PalettePy\r\r\ninit()\r\r\n\r\r\n# Define some custom styles for different colors\r\r\ngreen = color_style_foreground(\"#00ff00\")\r\r\nred = color_style_foreground(\"#ff0000\")\r\r\nblue = color_style_foreground(\"#0000ff\")\r\r\n\r\r\n# Print some text using our custom styles\r\r\nprint(green(\"Hello PalettePy In Green\"))\r\r\nprint(red(\"Hello PalettePy In Red\"))\r\r\nprint(blue(\"Hello PalettePy In Blue\"))\r\r\n\r\r\n```\r\r\n\r\r\n**Other Big Example With More Styles**\r\r\n\r\r\n```python\r\r\n\r\r\nfrom palettepy import color_style_foreground, color_style_background, bold, italic, init\r\r\n\r\r\ninit()\r\r\n\r\r\n# Success message styles\r\r\nblack = color_style_foreground(\"#000000\")\r\r\nlime_green = color_style_background(\"#32CD32\")\r\r\nsuccess = black(lime_green(bold(italic)))\r\r\nblue_bg = color_style_background(\"#0000FF\")\r\r\ngreen_bg = color_style_background(\"#008000\")\r\r\n\r\r\nred = color_style_foreground(\"#FF0000\")\r\r\nyellow = color_style_foreground(\"#FFFF00\")\r\r\nblue = color_style_foreground(\"#0000FF\")\r\r\ngreen = color_style_foreground(\"#008000\")\r\r\npurple = color_style_foreground(\"#800080\")\r\r\nturquoise = color_style_foreground(\"#40E0D0\")\r\r\norange = color_style_foreground(\"#FFA500\")\r\r\npink = color_style_foreground(\"#FFC0CB\")\r\r\ngray = color_style_foreground(\"#808080\")\r\r\nsuccess2 = bold(italic(green))\r\r\nsuccess3 = blue(italic)\r\r\nsuccess4 = turquoise(bold)\r\r\nsuccess5 = yellow\r\r\n\r\r\n# Failure message styles\r\r\nred_bg = color_style_background(\"#FF0000\")\r\r\nred_fg = color_style_foreground(\"#FFFFFF\")\r\r\nfail = red_bg(red_fg(bold(italic)))\r\r\n\r\r\nfail2 = pink(italic)\r\r\nfail4 = gray(bold)\r\r\nfail5 = red\r\r\n\r\r\n# General message styles\r\r\nwhite = color_style_foreground(\"#FFFFFF\")\r\r\nblack_bg = color_style_background(\"#000000\")\r\r\nblack_fg = color_style_foreground(\"#FFFFFF\")\r\r\ninfo = black_fg(black_bg(bold(italic)))\r\r\nwarning = black_fg(color_style_background(\"#FFA500\")(bold(italic)))\r\r\nhighlight = black_fg(color_style_background(\"#FFFF00\")(bold(italic)))\r\r\nattention = black_fg(color_style_background(\"#FFC0CB\")(bold(italic)))\r\r\nspecial = black_fg(color_style_background(\"#800080\")(bold(italic)))\r\r\nprimary = black_fg(color_style_background(\"#0000FF\")(bold(italic)))\r\r\n\r\r\n# Print the messages\r\r\nprint(success(\"Success Login\"))\r\r\nprint(fail(\"Fail To Login\"))\r\r\nprint(success2(\"Success Message!\"))\r\r\nprint(success3(\"Great job!\"))\r\r\nprint(success4(\"Well done!\"))\r\r\nprint(success5(\"Success!\"))\r\r\nprint(fail2(\"Oops, something went wrong!\"))\r\r\nprint(fail4(\"Uh oh, something went wrong.\"))\r\r\nprint(fail5(\"Failed!\"))\r\r\n\r\r\n# Additional examples\r\r\nprint(blue(\"This text is blue.\"))\r\r\nprint(green(\"This text is green.\"))\r\r\nprint(purple(\"This text is purple.\"))\r\r\nprint(turquoise(\"This text is turquoise.\"))\r\r\nprint(orange(\"This text is orange.\"))\r\r\nprint(yellow(\"This text is yellow.\"))\r\r\nprint(pink(\"This text is pink.\"))\r\r\nprint(gray(\"This text is gray.\"))\r\r\nprint(success5(\"This text is success!\"))\r\r\nprint(fail5(\"This text is failed!\"))\r\r\n\r\r\nprint(blue_bg(\"This text has a blue background.\"))\r\r\nprint(green_bg(\"This text has a green background.\"))\r\r\n\r\r\nprint(info(\"Here is some information.\"))\r\r\nprint(warning(\"Warning!\"))\r\r\nprint(highlight(\"This is important!\"))\r\r\nprint(attention(\"Attention needed.\"))\r\r\nprint(special(\"Something special!\"))\r\r\nprint(primary(\"Primary message.\"))\r\r\n\r\r\n\r\r\n```\r\r\n\r\r\n![Style](https://raw.githubusercontent.com/MarioNageh/PalettePy/master/screens/ex1.png)\r\r\n\r\r\n\r\r\n**Example**\r\r\n\r\r\n```python\r\r\n\r\r\nfrom palettepy import color_style_foreground, color_style_background, bold, italic, init\r\r\n\r\r\ninit()\r\r\n\r\r\nstart = 0\r\r\nend = 256\r\r\nstep = 32\r\r\n\r\r\n# Loop over the range of integers and generate hex color codes\r\r\nfor i in range(start, end, step):\r\r\n    color_code = hex(i)[2:].zfill(2) * 3\r\r\n    color_style = color_style_foreground(f\"#{color_code}\")\r\r\n    print(color_style(f\"This text is in color #{color_code}\"))\r\r\n\r\r\n# Loop over the range of integers and generate background colors\r\r\nfor i in range(start, end, step):\r\r\n    color_code = hex(i)[2:].zfill(2) * 3\r\r\n    color_style = color_style_background(f\"#{color_code}\")\r\r\n    print(color_style(f\"This text has a background color of #{color_code}\"))\r\r\n\r\r\n\r\r\n\r\r\n```\r\r\n\r\r\n![Style](https://raw.githubusercontent.com/MarioNageh/PalettePy/master/screens/ex2.png)\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n**Example Of Some Colors**\r\r\n\r\r\n```python\r\r\n\r\r\nfrom palettepy import color_style_foreground, color_style_background, bold, italic, init\r\r\n\r\r\ninit()\r\r\n\r\r\nr_values = range(0, 256, 32)\r\r\ng_values = range(0, 256, 32)\r\r\nb_values = range(0, 256, 32)\r\r\ncount = 0\r\r\nfor r in r_values:\r\r\n    for g in g_values:\r\r\n        for b in b_values:\r\r\n            # Convert the RGB values to a hex string\r\r\n            hex_code = f\"#{r:02X}{g:02X}{b:02X}\"\r\r\n\r\r\n            # Create a color style using the hex code\r\r\n            bg_style = color_style_background(hex_code)\r\r\n\r\r\n            # Create a success message using the color style\r\r\n            success = bold(italic(bg_style(\"       \")))\r\r\n\r\r\n            # Print the success message\r\r\n            print(success, end=' ')\r\r\n\r\r\n            # Increment the color count\r\r\n            count += 1\r\r\n\r\r\n            # Print a newline after printing 8 colors in a line\r\r\n            if count % 8 == 0:\r\r\n                print()\r\r\n\r\r\n\r\r\n```\r\r\n\r\r\n![Style](https://raw.githubusercontent.com/MarioNageh/PalettePy/master/screens/ex3.png)\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n**Reset**\r\r\n\r\r\nIf you want to use the default print() function but still apply color and style configurations, you can do so by wrapping the styled text with the reset() function. This function will reset the color and style to the default values after the styled text has been printed.\r\r\n\r\r\nHere's an example of how you can use the reset() function with the print() function:\r\r\n\r\r\n```python\r\r\n\r\r\nfrom palettepy import init, print, Printer, reset, color_style_background\r\r\n\r\r\n# RGB RED foreground Color , and Yellow background\r\r\ninit(Printer(foreground_color=\"#ff0000\", background_color=\"#F7C04A\", bold=True))\r\r\n\r\r\ngreen_bg = reset(color_style_background(\"#008000\"))\r\r\n\r\r\n# Any Print Will Have The Defualt Configration\r\r\nprint(f\"Hello PalettePy {green_bg('Here Is Green')}\")\r\r\n\r\r\n```\r\r\n\r\r\nIn this example, we initialize PalettePy with a red foreground color and a yellow background color. We then create a green background color style and use it to style the text \"Here Is Green\". We wrap the styled text with the reset() function to reset the color and style to the default values after the text has been printed.\r\r\n\r\r\nThe output of this code will be \"Hello PalettePy Here Is Green\", where \"Here Is Green\" is printed with a green background color and the rest of the text is printed with the default color and style.\r\r\n\r\r\n![Style](https://raw.githubusercontent.com/MarioNageh/PalettePy/master/screens/ex4.png)\r\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/user/reponame/archive/v_01.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.linkedin.com/in/mario-nageh-744b67116/",
    "keywords": "COLORS,PRINTING,STYLES",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "palettepy",
    "package_url": "https://pypi.org/project/palettepy/",
    "platform": null,
    "project_url": "https://pypi.org/project/palettepy/",
    "project_urls": {
      "Download": "https://github.com/user/reponame/archive/v_01.tar.gz",
      "Homepage": "https://www.linkedin.com/in/mario-nageh-744b67116/"
    },
    "release_url": "https://pypi.org/project/palettepy/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "helps you to print colored text in easy way and has support to rgb colors",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17258773,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4698c0fc0c271356cce7cd03f78cc3355a2ed490d2ede0790380e22f61d1004f",
          "md5": "b672589ecb6e26ef7747221e33648349",
          "sha256": "b56f2cd990b76b75838d9627ccbde66dc4d6c4bf02199588a0170b33ed842a38"
        },
        "downloads": -1,
        "filename": "palettepy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b672589ecb6e26ef7747221e33648349",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11642,
        "upload_time": "2023-03-12T08:06:36",
        "upload_time_iso_8601": "2023-03-12T08:06:36.476985Z",
        "url": "https://files.pythonhosted.org/packages/46/98/c0fc0c271356cce7cd03f78cc3355a2ed490d2ede0790380e22f61d1004f/palettepy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43aeb982fc62d3a7d8147171fc0dae9bec4d66303bbbd10981fd7d50e0a160a3",
          "md5": "08d37e4ce4bbec66efc34d69111e348a",
          "sha256": "0ba5fc9e4598b5befeeb8003186bad07b4a105e77ff96ed345ea7860b662e667"
        },
        "downloads": -1,
        "filename": "palettepy-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "08d37e4ce4bbec66efc34d69111e348a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11636,
        "upload_time": "2023-03-12T08:14:06",
        "upload_time_iso_8601": "2023-03-12T08:14:06.706030Z",
        "url": "https://files.pythonhosted.org/packages/43/ae/b982fc62d3a7d8147171fc0dae9bec4d66303bbbd10981fd7d50e0a160a3/palettepy-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b671fb7bdd4845888bf6c9efc8511c5c45ea46815ad87ae998058caa43ab979",
          "md5": "8962ab646dba2165789d69cd40e6382f",
          "sha256": "9934f424998bd5e887161b51ab673f11a0a6bbb11bbfec8eaf7d54969ca90ce0"
        },
        "downloads": -1,
        "filename": "palettepy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8962ab646dba2165789d69cd40e6382f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11601,
        "upload_time": "2023-03-12T08:19:29",
        "upload_time_iso_8601": "2023-03-12T08:19:29.419698Z",
        "url": "https://files.pythonhosted.org/packages/5b/67/1fb7bdd4845888bf6c9efc8511c5c45ea46815ad87ae998058caa43ab979/palettepy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b671fb7bdd4845888bf6c9efc8511c5c45ea46815ad87ae998058caa43ab979",
        "md5": "8962ab646dba2165789d69cd40e6382f",
        "sha256": "9934f424998bd5e887161b51ab673f11a0a6bbb11bbfec8eaf7d54969ca90ce0"
      },
      "downloads": -1,
      "filename": "palettepy-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8962ab646dba2165789d69cd40e6382f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11601,
      "upload_time": "2023-03-12T08:19:29",
      "upload_time_iso_8601": "2023-03-12T08:19:29.419698Z",
      "url": "https://files.pythonhosted.org/packages/5b/67/1fb7bdd4845888bf6c9efc8511c5c45ea46815ad87ae998058caa43ab979/palettepy-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}