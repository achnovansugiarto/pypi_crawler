{
  "info": {
    "author": "",
    "author_email": "Kieran Lock <kieran.lock@outlook.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "<a id=\"readme-top\"></a> \n\n\n\n<!-- PROJECT SUMMARY -->\n<br />\n<div align=\"center\">\n  <img src=\"https://i.imgur.com/ryp9aJT.gif\" alt=\"Logo\">\n  <br />\n  \n  <p align=\"center\">\n    A lightweight, zero-dependency ORM for SQLite in Python\n    <br />\n    <a href=\"https://github.com/Kieran-Lock/SQLiteFrame/blob/master/DOCUMENTATION.md\"><strong>Explore the docs »</strong></a>\n    <br />\n    <br />\n    <a href=\"#about-the-project\">About the Project</a>\n    ·\n    <a href=\"#getting-started\">Getting Started</a>\n    ·\n    <a href=\"#basic-usage\">Basic Usage</a>\n    ·\n    <a href=\"https://github.com/Kieran-Lock/SQLiteFrame/blob/master/DOCUMENTATION.md\">Documentation</a>\n    ·\n    <a href=\"https://github.com/Kieran-Lock/SQLiteFrame/blob/master/LICENSE\">License</a>\n  </p>\n</div>\n\n\n\n<!-- ABOUT THE PROJECT -->\n## About the Project\nSQLiteFrame is an SQLite ORM for python, designed to be as lightweight, intuitive, and simple to use as possible.  \nIt is designed to closely mimic SQL syntax whilst remaining as pythonic as possible to save developers valuable time _(and brain cells)_ when interacting with SQLite databases, by building reusable SQLite query objects using method-chaining, and abstracting away SQLite's connection and cursor system with a single context manager.\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n\n<!-- GETTING STARTED -->\n## Getting Started\n\nSQLiteFrame is available on [PyPI](https://pypi.org/project/SQLiteFrame). Simply install the package into your project environment with PIP:\n```\npip install SQLiteFrame\n```\n\nTo install specific previous versions, take a look at the [version history](https://github.com/Kieran-Lock/SQLiteFrame/releases), locate the version tag `(vX.Y.Z)`, and run:\n```\npip install SQLiteFrame==X.Y.Z\n```\n\nSQLiteFrame has **ZERO** external dependencies - it uses only the standard library's `sqlite3` to execute SQLite commands.\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n\n<!-- BASIC USAGE EXAMPLES -->\n## Basic Usage\n\n### Creating a table\nTo create a table, use the template below. This will automatically run the CreateTable SQLite command for you:\n```py\nfrom sqliteframe import Database, Table, String, Integer, Boolean\n\n\ndatabase = Database(\"<absolute_database_path>.db\", output=False)  # When the output parameter is True, the formed SQL query will be outputted into the console as a string every time a query is executed\n\n\n@Table(database)\nclass TableName:\n    primary_key_field = String(primary_key=True)\n    second_column = Integer\n    third_column = Boolean(nullable=True)\n```\n\n### Inserting Data\nTo insert data into an existing table, use the following query template:\n```py\ninsert_statement = TableName.insert_into({\n    TableName.primary_key_field: \"PrimaryKey1\",\n    TableName.second_column: 1_000,\n    TableName.third_column: True\n})\ninsert_statement.execute()\n```\n\n### Fetching / Selecting Data\nFetching / selecting data from an existing table with pre-inserted data is done as below:\n```py\nselect_statement = TableName.select(TableName.second_column, TableName.third_column)\nselect_statement.execute()\n```\n\n### Linking Tables (Foreign Keys)\nLinking tables can be done with Foreign Keys in SQLiteFrame:\n```py\nfrom sqliteframe import Database, Table, String, Integer, Boolean, ForeignKey\n\n\ndatabase = Database(\"database.db\", output=False)\n\n\n@Table(database)\nclass FirstTableName:\n    primary_key_field = String(primary_key=True)\n    second_column = Integer\n    third_column = Boolean(nullable=True)\n\n\n@Table(database)\nclass SecondTableName:\n    primary_key_field = Integer(primary_key=True)\n    second_column = Boolean(nullable=True)\n    third_column = String\n    foreign_key_column = ForeignKey(FirstTableName)  # This column now references the primary key of the FirstTableName table, and will infer its type\n```\n\n### Complex Data Fetching / Selection\nTo build more complex select queries, you can use `join`, `where`, and `order by`:\n```py\nfrom sqliteframe import JoinTypes, OrderTypes\n\n\nselect_statement = FirstTableName.select(SecondTableName.second_column, FirstTableName.third_column).join(\n    SecondTableName, SecondTableName.foreign_key_column == FirstTableName.primary_key_field, join_type=JoinTypes.LEFT\n).where(\n    SecondTableName.third_column == \"Criteria\"\n).order_by(\n    FirstTableName.second_column, (OrderTypes.DESCENDING, OrderTypes.NULLS_FIRST)\n)\nselect_statement.execute()\n```\n\n### Editing Data\nTo edit pre-inserted data, a `set` query can be used:\n```py\nset_statement = FirstTableName.set({\n    TableName.second_column: 10_000,\n    TableName.third_column: None  # This column is nullable, and so this is acceptable\n}).where(\n    (Person.primary_key_column == \"PrimaryKey1\") & (Person.second_column > 500)  # Brackets are ESSENTIAL with complex where clauses, as these statements use bitwise operators, which often have unexpected operator precedence\n)\nset_statement.execute()\n```\n_NOTE: The where clause can be emitted from this statement, but this would update **every** record in the target table._\n\n### Deleting Data\nTo delete pre-inserted table data, use the `delete_from` query:\n```py\ndelete_statement = TableName.delete_from().where(\n    (TableName.second_column <= 250)\n)\ndelete_statement.execute()\n```\n_NOTE: The where clause can be emitted from this statement, but this would delete **every** record in the target table._\n\n### Dropping Tables\nDropping tables does not delete the table reference from python - just in the SQL. Tables which others tables depend on / reference cannot be deleted by default to maintain referential integrity. This behaviour can be changed when defining the referencing foreign key column.  \n  \nTo entirely drop (delete) an existing table, use the `drop_table` statement:\n```py\nSecondTableName.drop_table().execute()  # This table is dropped first as it depends on the FirstTableName table\nFirstTableName.drop_table().execute()  # Cannot drop this table until the SecondTableName table is dropped\n```\n\n_For more examples and specific detail, please refer to the [Documentation](https://github.com/Kieran-Lock/SQLiteFrame/blob/master/DOCUMENTATION.md)_\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n\n<!-- LICENSE -->\n## License\n\nDistributed under the MIT License. See [LICENSE](https://github.com/Kieran-Lock/SQLiteFrame/blob/master/LICENSE) for more information.\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "orm,sqlite3,schematics",
    "license": "MIT License  Copyright (c) 2023 Kieran Lock  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SQLiteFrame",
    "package_url": "https://pypi.org/project/SQLiteFrame/",
    "platform": null,
    "project_url": "https://pypi.org/project/SQLiteFrame/",
    "project_urls": {
      "Documentation": "https://github.com/Kieran-Lock/SQLiteFrame/blob/master/DOCUMENTATION.md",
      "GitHub": "https://github.com/Kieran-Lock/SQLiteFrame"
    },
    "release_url": "https://pypi.org/project/SQLiteFrame/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.11",
    "summary": "A lightweight, zero-dependency ORM for SQLite in Python",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16693828,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e0876914ba08ae99e387ff7f62e70d1a04a603bd6a10118b8a73a344b3bcd94",
          "md5": "d87ffe38f639bc71342451ac17d8c0aa",
          "sha256": "4739bab563a4e3a27f2c8a89ae53c8b09d0f49c9768f00b743c0a339e63a2334"
        },
        "downloads": -1,
        "filename": "SQLiteFrame-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d87ffe38f639bc71342451ac17d8c0aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21382,
        "upload_time": "2023-01-30T19:23:13",
        "upload_time_iso_8601": "2023-01-30T19:23:13.476225Z",
        "url": "https://files.pythonhosted.org/packages/6e/08/76914ba08ae99e387ff7f62e70d1a04a603bd6a10118b8a73a344b3bcd94/SQLiteFrame-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d202bf594f6c60a92884131abc0a87d142a71b927310338e1a1e0f670006f734",
          "md5": "6256051fe51f24ae73152c7ddec99c97",
          "sha256": "46355f84b213053d6ac670629d5a9406d6c12c1a2f819a9de7f0d79a293eaee7"
        },
        "downloads": -1,
        "filename": "SQLiteFrame-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6256051fe51f24ae73152c7ddec99c97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11131,
        "upload_time": "2023-01-30T19:23:15",
        "upload_time_iso_8601": "2023-01-30T19:23:15.012343Z",
        "url": "https://files.pythonhosted.org/packages/d2/02/bf594f6c60a92884131abc0a87d142a71b927310338e1a1e0f670006f734/SQLiteFrame-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fac25a9d7759e50f4267c71d1b9889a147ca3ffb936152e1a8c31d6c0e6e5c5",
          "md5": "1b1e4311e9cb439fd36d90e3d4227141",
          "sha256": "23b8d351bcc69e180e2307d17a2263b3754037fe41cfb03489c22a0c30805475"
        },
        "downloads": -1,
        "filename": "SQLiteFrame-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b1e4311e9cb439fd36d90e3d4227141",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22871,
        "upload_time": "2023-01-31T14:40:33",
        "upload_time_iso_8601": "2023-01-31T14:40:33.483772Z",
        "url": "https://files.pythonhosted.org/packages/5f/ac/25a9d7759e50f4267c71d1b9889a147ca3ffb936152e1a8c31d6c0e6e5c5/SQLiteFrame-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "010d4d9317e2b0b3c773af3467a5c777be51d9a0ea97b005427f6a9aae8042ab",
          "md5": "eab5dbbd77afb22de5646dc86804a111",
          "sha256": "b0e7088fcc266f6e72ef030104ef6d3e484a8fc3e3adb29ef1c6c7402a2aab62"
        },
        "downloads": -1,
        "filename": "SQLiteFrame-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "eab5dbbd77afb22de5646dc86804a111",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12679,
        "upload_time": "2023-01-31T14:40:35",
        "upload_time_iso_8601": "2023-01-31T14:40:35.239749Z",
        "url": "https://files.pythonhosted.org/packages/01/0d/4d9317e2b0b3c773af3467a5c777be51d9a0ea97b005427f6a9aae8042ab/SQLiteFrame-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e24011dca93e22cccb9a0bcdc6e26bb8e0a6e389d3e2ba5aaf0f86fe49a9c2a0",
          "md5": "11f58904ca26911a908f855ac33459e8",
          "sha256": "f4ab69363bfe3bca2f7f99f0adacec3eb4f76476905f02318a5d76b4ad391f30"
        },
        "downloads": -1,
        "filename": "SQLiteFrame-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11f58904ca26911a908f855ac33459e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 30451,
        "upload_time": "2023-02-04T15:29:48",
        "upload_time_iso_8601": "2023-02-04T15:29:48.318825Z",
        "url": "https://files.pythonhosted.org/packages/e2/40/11dca93e22cccb9a0bcdc6e26bb8e0a6e389d3e2ba5aaf0f86fe49a9c2a0/SQLiteFrame-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "397d2875b01880bbcae05b8d7cfb3d9dc3ae68d39e67e752a19d1af4fe91b324",
          "md5": "15986dc79071835d2bf67a48021ef965",
          "sha256": "60534d960df657342c025e767a3616799ecd89749274d9e6314014199b75445d"
        },
        "downloads": -1,
        "filename": "SQLiteFrame-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "15986dc79071835d2bf67a48021ef965",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 16371,
        "upload_time": "2023-02-04T15:29:49",
        "upload_time_iso_8601": "2023-02-04T15:29:49.662670Z",
        "url": "https://files.pythonhosted.org/packages/39/7d/2875b01880bbcae05b8d7cfb3d9dc3ae68d39e67e752a19d1af4fe91b324/SQLiteFrame-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e24011dca93e22cccb9a0bcdc6e26bb8e0a6e389d3e2ba5aaf0f86fe49a9c2a0",
        "md5": "11f58904ca26911a908f855ac33459e8",
        "sha256": "f4ab69363bfe3bca2f7f99f0adacec3eb4f76476905f02318a5d76b4ad391f30"
      },
      "downloads": -1,
      "filename": "SQLiteFrame-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11f58904ca26911a908f855ac33459e8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.11",
      "size": 30451,
      "upload_time": "2023-02-04T15:29:48",
      "upload_time_iso_8601": "2023-02-04T15:29:48.318825Z",
      "url": "https://files.pythonhosted.org/packages/e2/40/11dca93e22cccb9a0bcdc6e26bb8e0a6e389d3e2ba5aaf0f86fe49a9c2a0/SQLiteFrame-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "397d2875b01880bbcae05b8d7cfb3d9dc3ae68d39e67e752a19d1af4fe91b324",
        "md5": "15986dc79071835d2bf67a48021ef965",
        "sha256": "60534d960df657342c025e767a3616799ecd89749274d9e6314014199b75445d"
      },
      "downloads": -1,
      "filename": "SQLiteFrame-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "15986dc79071835d2bf67a48021ef965",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.11",
      "size": 16371,
      "upload_time": "2023-02-04T15:29:49",
      "upload_time_iso_8601": "2023-02-04T15:29:49.662670Z",
      "url": "https://files.pythonhosted.org/packages/39/7d/2875b01880bbcae05b8d7cfb3d9dc3ae68d39e67e752a19d1af4fe91b324/SQLiteFrame-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}