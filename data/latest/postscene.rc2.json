{
  "info": {
    "author": "cheryl tong",
    "author_email": "cheryl_98750@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "### PostScene ——————  一个强大的工具，基于 Postman 接口自动化场景设计\n***\n\n**使用Xmind或者Yaml 设计 postman 自动化场景**\n\n**背景**: postman是一个比较轻量级的接口测试工具，在单个接口的测试表现优秀。在批量测试接口方面则提供了Runner Collections这种方式，虽然可以用来做流程测试，但在管理上不是很方便。例如：在postman建立一个collection作为接口文档，然后再建立另外一个collection作为场景测试，接着从接口文档的collection中挑选接口，并复制到场景测试的collection中，而且可能在不同的场景都共用同一个接口，这种方式是听不错的，只是当接口的版本升级之后，需要在场景中找出所有对应的接口进行修改，这样在管理上会比较麻烦。\n\n **思想**: 这个工具根据Xmind或Yaml所写的场景流程，从接口文档的collection中生成一个场景测试的collection，这样即使版本升级，只需要重新生成一次即可，相当方便，同时也提供了一些方便的设参方式和断言。\n\n1.  **管理方便** 。只需要管理接口文档的collection和Xmind/Yaml脚本。\n2.  **场景流程更直观** 。在Xmind/Yaml上可以直观的看到整个流程，在细节上也可以看到每个接口的参数定义，以及断言内容。\n3.  **代码编写简化** 。在测试行业中，普遍都是代码能力比较差，虽然测试不需要特别强的代码编写能力，postman在Tests界面中也提供了一些快捷片段，但是还是不足够简化，而且也不全面，比如对请求的参数进行签名。\n4.  **提供一些快捷的函数**。postman提供的内置函数还是比较少的，比如随机生成32的UUID，md5,获取当前时间，获取前7天，前30天的日期，参数签名等等，这些都需要自己手动写代码。\n5.  **无依赖性**。本工具只是一个脚本转换成Postman的脚本工具，即使以后不用，完全可以自己维护Postman的脚本。\n.......\n\n### 先来看看效果图\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0420/111447_678b9ab8_5050702.png \"屏幕截图.png\")\n\n\n### 安装\n\n使用 `pip` 安装PostScene \n\n```\npip install -U PostScene\n```\n\n\n#### 例子\n***\n* 新建一个文件，名字叫什么不重要，但为了迭代开发的考虑，最好还是加上版本号。\n> demo-scenev1.0.yaml\n* 脚本编写\n\n```yaml\nname: demo-scenev1.0                                         #collection 的名字\nscene:\n   name: 下单流程                                             #collection文件夹的名字\n   scene:\n     登陆:                                                   #API接口名称\n       pre:                                                 #接口请求前脚本\n         sign:                                              #参数签名\n           secret: 1850e165f1fc19420f2ba3d3a1a5ffe4\n         set:                                               #设置变量值\n           userName: user\n           password: user123\n           time: $$times                                    #获取现在的时间\n           onceToken: $$uuid32                              #生成32位的uuid\n       tests:                                               #请求后脚本\n         assert:                                            #请求后断言\n           express:\n             content: $json.data.code === '1'               #断言返回的json数据的code 是否等于1\n             set:                                           #断言成功保存token和uid数据\n               token: $json.data.token\n               uid: $json.data.uid\n     通过餐厅名字搜索餐厅:\n       pre:\n         sign:\n           secret: 1850e165f1fc19420f2ba3d3a1a5ffe4\n         set:\n           canteenName: 喜茶\n       tests:\n         assert:\n           expect:                                         #断言返回的canteenList的每一个对象的名称都包含喜茶\n             content: $json.data.canteenList\n             item: $it.name                                 \n             include: 喜茶\n             set:\n               canteenId: $$find(json.data.canteenList, it.canteenName == '喜茶GO').canteenId  #获取喜茶Go的CanteenId\n     通过商品名字搜索商品:\n       pre:\n         sign:\n           secret: 1850e165f1fc19420f2ba3d3a1a5ffe4\n         ref: canteenId\n         set:\n           goodsName: 奥利奥千层\n       tests:\n         assert:\n           expect:\n             content: $json.data.goodsList\n             item: $item.name\n             include: 奥利奥千层\n             set:\n               goodsId: $$find(json.data.goodsList, it.goodsName == '奥利奥千层').goodsId\n     加入购物车:\n       pre:\n         sign:\n           secret: 1850e165f1fc19420f2ba3d3a1a5ffe4\n         ref: goodsId\n         set:\n           count: 1\n       tests:\n         assert:\n           express:\n             content: $json.code === '1'\n             set:\n               pocketId: $json.data.pocketId\n.......\n\n```\n* 脚本转换\n1. 使用git或者浏览器下载本项目，再用pycharm打开。\n\n2. 在Postman中选择你已经准备好的api文档collection 然后导出。这里导出为 demo.postman_collection.json\n\n<img src=\"https://images.gitee.com/uploads/images/2020/0419/205433_ab0d0f7e_5050702.png\" width = 50%/>\n\n3. 把导出的文档放入项目中的api_document 脚本放入xmind或yaml\n\n<img src=\"https://images.gitee.com/uploads/images/2020/0420/111101_b755e5d4_5050702.png\" width = 50%/>\n\n4. 打开src文件中的Index.py 把xmind_path和api_document_path改成你的，右键 Run Index。\n\n![输入图片说明](https://images.gitee.com/uploads/images/2020/0420/110449_d637d0a7_5050702.png \"屏幕截图.png\")\n\n5. 生成的场景文件放在src/scene文件夹中，使用postman的import 把他导入\n\n<img src=\"https://images.gitee.com/uploads/images/2020/0419/205611_f9bedc10_5050702.png\" width = 50%/>\n\n6. 最后可以开始Run collection啦\n\n<img src=\"https://images.gitee.com/uploads/images/2020/0419/205618_8b34ba14_5050702.png\" width = 50%/>\n\n#### 教程\n***\n>如果你对Postman的Script很熟悉，那以下的内容对你来说绝对是无障碍的。不熟悉也没关系，只要照猫画虎，也能完成脚本的编写，设计这个初衷就是为了降低门槛。教程的讲解都是用yaml来讲解，因为用xmind讲解不是很方便，要截很多图。xmind的话，直接看demo.xmind就好啦。\n\n**学前须知** : 每一个测试用例都由两部分组成 **pre(请求前)** 和 **tests(请求后)** ，pre可以没有，但tests断言一定要有，不然没有意义。每一个测试用例的名称必须和文档中的collection的接口名称一致。这是规范。\n\n### 脚本语法标签\n\n + **请求前: pre**  \n    - [参数设置变量: set](https://gitee.com/tangyajun/PostScene/wikis/%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F:%20set?sort_id=2129313)   \n    - [参数引用变量: ref](https://gitee.com/tangyajun/PostScene/wikis/%E5%8F%82%E6%95%B0%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F:%20ref?sort_id=2129311)      \n    - [参数签名: sign](https://gitee.com/tangyajun/PostScene/wikis/%E5%8F%82%E6%95%B0%E7%AD%BE%E5%90%8D:%20sign?sort_id=2129312)      \n + **请求后: tests**  \n    - 断言: assert  \n        - [状态: status](https://gitee.com/tangyajun/PostScene/wikis/%E7%8A%B6%E6%80%81:%20status?sort_id=2129321)    \n        - [是: tobe](https://gitee.com/tangyajun/PostScene/wikis/%E6%98%AF:%20tobe?sort_id=2129318)    \n        - [不是: notTobe](https://gitee.com/tangyajun/PostScene/wikis/%E4%B8%8D%E6%98%AF:%20notTobe?sort_id=2129317)    \n        - [有: tohave](https://gitee.com/tangyajun/PostScene/wikis/%E6%9C%89:%20tohave?sort_id=2129319)    \n        - [没有: notTohave](https://gitee.com/tangyajun/PostScene/wikis/%E6%B2%A1%E6%9C%89:%20notTohave?sort_id=2129320)    \n        - [表达式: express](https://gitee.com/tangyajun/PostScene/wikis/%E8%A1%A8%E8%BE%BE%E5%BC%8F:%20express?sort_id=2129322)    \n        - [预期: except](https://gitee.com/tangyajun/PostScene/wikis/%E9%A2%84%E6%9C%9F:%20expect?sort_id=2129323)    \n    - [条件跳转: next](https://gitee.com/tangyajun/PostScene/wikis/%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC:%20next?sort_id=2129324)  \n    - [保存变量: set](https://gitee.com/tangyajun/PostScene/wikis/%E4%BF%9D%E5%AD%98%E5%8F%98%E9%87%8F:%20set?sort_id=2129315)\n + **快捷函数**  \n    - [唯一标识: $uuid32](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [md5加密: $md5](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取列表最后一个: $last](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [查找列表元素: $find](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [反向查找列表元素: $find_last](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取符合的元素: $filter](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取毫秒级时间戳: $timeS](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取秒级时间戳: $times](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取本周开始时间戳: $weekStart](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取本周结束时间戳: $weekEnd](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取上周开始时间戳: $lastWeekStart](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取上周开始时间戳: $lastWeekEnd](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取本月1号时间戳: $monthStart](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取本月结束时间戳: $monthEnd](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取上月1号时间戳: $lastMonthStart](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取上月结束时间戳: $lastMonthEnd](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取前7天时间戳: $last7DaysStart](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [获取前30天时间戳: $last30DaysStart](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n    - [时间戳转日期格式: $dateFormat](https://gitee.com/tangyajun/PostScene/wikis/%E5%BF%AB%E6%8D%B7%E5%87%BD%E6%95%B0?sort_id=2129309)    \n\n> 写在最后: 目前只提供了这些内置函数，虽然不多但也够用，如果你有什么特别的需要，可以提一个issues    \n> 最后，祝你测试愉快 :blush:\n****\n编码不易，如果你觉得这是一个不错的工具，并且支持我继续努力，那就打赏几块钱给本仙女买杯奶茶吧 :stuck_out_tongue_closed_eyes: \n<img src=\"https://images.gitee.com/uploads/images/2020/0420/174915_63a25225_5050702.png\" width = 30% height = 30% />\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/tangyajun/PostScene",
    "keywords": "scene,postman,automation,testing,api",
    "license": "GNU Affero General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PostScene",
    "package_url": "https://pypi.org/project/PostScene/",
    "platform": "",
    "project_url": "https://pypi.org/project/PostScene/",
    "project_urls": {
      "Homepage": "https://gitee.com/tangyajun/PostScene"
    },
    "release_url": "https://pypi.org/project/PostScene/0.8.2/",
    "requires_dist": [
      "ruamel.yaml (==0.16.10)",
      "ruamel.yaml.clib (==0.2.0)",
      "XMind (==1.2.0)"
    ],
    "requires_python": ">=3.7.0",
    "summary": "一个强大的工具，基于 Postman 接口自动化场景设计",
    "version": "0.8.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7067699,
  "releases": {
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e04eda4420638c77ffef4ac74f6b2db9e6a29ee0f5f9891274b3aca64d6f0ed5",
          "md5": "3490022a046cf16c1d7d927cb5a479ef",
          "sha256": "743a08a69b9df86d0ad1bdb9ee6672362efc8bf0731ac19121a869a47517edbe"
        },
        "downloads": -1,
        "filename": "PostScene-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3490022a046cf16c1d7d927cb5a479ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 27835,
        "upload_time": "2020-04-20T06:07:11",
        "upload_time_iso_8601": "2020-04-20T06:07:11.116638Z",
        "url": "https://files.pythonhosted.org/packages/e0/4e/da4420638c77ffef4ac74f6b2db9e6a29ee0f5f9891274b3aca64d6f0ed5/PostScene-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dd87cf9772b8bfab869b9f3dc37ad35a9999e86ac3c9cf417ded1fab81a91cd",
          "md5": "a6db5ccdd1d2499491a0ee43acfdb690",
          "sha256": "d1f909fa077b9ef4f12eef951a65f2c388ba0ded5bff7b91f376b898c1a195ee"
        },
        "downloads": -1,
        "filename": "PostScene-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a6db5ccdd1d2499491a0ee43acfdb690",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 14380,
        "upload_time": "2020-04-20T06:07:14",
        "upload_time_iso_8601": "2020-04-20T06:07:14.357205Z",
        "url": "https://files.pythonhosted.org/packages/6d/d8/7cf9772b8bfab869b9f3dc37ad35a9999e86ac3c9cf417ded1fab81a91cd/PostScene-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc31eaa388e45a520f23d3b3c5dd9900559f4909535796337c10260118b5e8de",
          "md5": "603ca86b0b7090924d5fc50f722c8a6a",
          "sha256": "3f08841b1e21546ef80206eeacd5d1ed7cc1c5f7a9101b7e281e8aa3e1adc16a"
        },
        "downloads": -1,
        "filename": "PostScene-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "603ca86b0b7090924d5fc50f722c8a6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 28128,
        "upload_time": "2020-04-21T12:46:22",
        "upload_time_iso_8601": "2020-04-21T12:46:22.256197Z",
        "url": "https://files.pythonhosted.org/packages/cc/31/eaa388e45a520f23d3b3c5dd9900559f4909535796337c10260118b5e8de/PostScene-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc31eaa388e45a520f23d3b3c5dd9900559f4909535796337c10260118b5e8de",
        "md5": "603ca86b0b7090924d5fc50f722c8a6a",
        "sha256": "3f08841b1e21546ef80206eeacd5d1ed7cc1c5f7a9101b7e281e8aa3e1adc16a"
      },
      "downloads": -1,
      "filename": "PostScene-0.8.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "603ca86b0b7090924d5fc50f722c8a6a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 28128,
      "upload_time": "2020-04-21T12:46:22",
      "upload_time_iso_8601": "2020-04-21T12:46:22.256197Z",
      "url": "https://files.pythonhosted.org/packages/cc/31/eaa388e45a520f23d3b3c5dd9900559f4909535796337c10260118b5e8de/PostScene-0.8.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}