{
  "info": {
    "author": "William Song",
    "author_email": "30965609+Freakwill@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: MacOS X",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# pyrimidine\n\nOO implement of genetic algorithm by python. See [pyrimidine's document](https://pyrimidine.readthedocs.io/) for more details.\n\n![LOGO](logo.png)\n\n## Why\n\nWhy is the package named as “pyrimidine”? Because it begins with “py”.\n\n> — Are you kiding?\n>\n> — No, I am serious.\n\n## Download\n\nIt has been uploaded to [pypi](https://pypi.org/project/pyrimidine/), so download it with `pip install pyrimidine`, and also could download it from github.\n\n## Idea\n\nWe regard the population as a container of individuals, an individual as a container of chromosomes\nand a chromosome as a container(array) of genes.\n\nThe container could be a list or an array.\nContainer class has an attribute `element_class`, telling itself the class of the elements in it.\n\nFollowing is the part of the source code of `BaseIndividual` and `BasePopulation`.\n```python\nclass BaseIndividual(BaseFitnessModel, metaclass=MetaContainer):\n    element_class = BaseChromosome\n    default_size = 1\n    \nclass BasePopulation(BaseFitnessModel, metaclass=MetaHighContainer):\n    element_class = BaseIndividual\n    default_size = 20\n```\n\n\n\nThere is mainly tow kinds of containers: list and tuple as in programming language `Haskell`. See following examples.\n\n```python\n# individual with chromosomes of type _Chromosome\n_Individual1 = BaseIndividual[_Choromosome]\n# individual with 2 chromosomes of type _Chromosome1 and _Chromosome2 respectively\n_Individual2 = MixIndividual[_Chromosome1, _Chromosome2]\n```\n\n\n\n## New features\n\npropose a mature concept/metaclass `System`, consisting of a set of elements and operators on it as an implementing of algebraic system.\n\n## Use\n\n### Main classes\n\n- BaseGene: the gene of chromosome\n- BaseChromosome: sequence of genes, represents part of a solution\n- BaseIndividual: sequence of chromosomes, represents a solution of a problem\n- BasePopulation: set of individuals, represents a set of a problem\n                also the state of a stachostic process\n- BaseSpecies: set of population for more complicated optimalization\n\n\n### import\nJust use the command `from pyrimidine import *` import all of the objects.\n\n### subclass\n\n#### Chromosome\n\nGenerally, it is an array of genes.\n\nAs an array of 0-1s, `BinaryChromosome` is used most frequently.\n\n#### Individual\njust subclass `MonoIndividual` in most cases.\n\n```python\nclass MyIndividual(MonoIndividual):\n    \"\"\"individual with only one chromosome\n    we set the gene is 0 or 1 in the chromosome\n    \"\"\"\n    element_class = BinaryChromosome\n\n    def _fitness(self):\n        ...\n```\n\nSince class `MonoBinaryIndividual` is defined to be such individual, it is equivalent to\n\n```python\nclass MyIndividual(MonoBinaryIndividual):\n    # only need define the fitness\n    def _fitness(self):\n        ...\n```\n\n\n\nIf an individual contains several chromosomes, then subclass `MultiIndividual`. It could be applied in multi-real-variable optimization problems.\n\n\n\nIn most cases, we have to decode chromosomes to real numbers.\n\n```python\nclass _Chromosome(BinaryChromosome):\n    def decode(self):\n        \"\"\"Decode a binary chromosome\n        \n        if the sequence of 0-1 represents a real number, then overide the method\n        to transform it to a nubmer\n        \"\"\"\n\nclass ExampleIndividual(BaseIndividual):\n    element_class = _Chromosome\n\n    def _fitness(self):\n        # define the method to calculate the fitness\n        x = self.decode()  # will call decode method of _Chromosome\n        return evaluate(x)\n```\n\n\n\nIf the chromosomes in an individual are different with each other, then subclass `MixIndividual`, meanwhile, the property `element_class` should be assigned with a tuple of classes for each chromosome.\n\n```python\nclass MyIndividual(MixIndividual):\n    \"\"\"\n    Inherit the fitness from ExampleIndividual directly.\n    It has 6 chromosomes, 5 are instances of _Chromosome, 1 is instance of FloatChromosome\n    \"\"\"\n    element_class = (_Chromosome,)*5 + (FloatChromosome,)\n```\n\nIt equivalent to `MyIndividual=MixIndividual[(_Chromosome,)*5 + (FloatChromosome,)]`\n\n#### Population\n\n```python\nclass MyPopulation(SGAPopulation):\n    element_class = MyIndividual\n```\n\n`element_class` is the most important attribute of the class that defines the class of the individual of the population. It is equivalent to `MyPopulation=SGAPopulation[MyIndividual]`.\n\n\n\n### Initialize randomly\n\n#### Initialize a population\n\nGenerate a population, with 50 individuals and each individual has 100 genes\n\n`pop = MyPopulation.random(n_individuals=50, size=100)`\n\nWhen each individual contains 5 chromosomes.\n\n`pop = MyPopulation.random(n_individuals=10, n_chromosomes=5, size=10)`\n\nFor `MixIndividual`, we recommand to use, for example\n\n`pop = MyPopulation.random(n_individuals=10, sizes=(10,8,8,3))`\n\n#### Initialize an individual\n\nIn fact, `random` method of `Population` will call random method of `Individual`. If you want to generate an individual, then just execute `MyIndividual.random(n_chromosomes=5, size=10)`, for simple individuals, just execute `SimpleIndividual.random(size=10)` since its `n_chromosomes` equals to 1.\n\n\n\n### Evolution\n\n#### `evolve` method\nInitialize a population with `random` method, then call `evolve` method.\n\n```python\npop = MyPopulation.random(n_individuals=50, size=100)\npop.evolve()\nprint(pop.best_individual)\n```\n\nset `verbose=True` to display the data for each generation.\n\n\n\n#### History\n\nGet the history of the evolution.\n\n```python\nstat={'Fitness':'fitness', 'Best Fitness': lambda pop: pop.best_individual.fitness}\ndata = pop.history(stat=stat)  # use history instead of evolve\n```\n`stat` is a dict mapping keys to function, where string 'fitness' means function `lambda pop:pop.fitness` which gets the mean fitness of pop. Since we have defined pop.best_individual.fitness as a property, `stat` could be redefine as `{'Fitness':'fitness', 'Best Fitness': 'best_fitness'}`.\n\n\n\n#### performance\n\nUse `pop.perf()` to check the performance.\n\n\n\n## Example\n\n### Example 1\n\nDescription\n\n    select ti, ni from t, n\n    sum of ni ~ 10, while ti dose not repeat\n\nThe opt. problem is\n\n    min abs(sum_i{ni}-10) + maximum of frequences in {ti}\n    where i is selected.\n\n```python\nt = np.random.randint(1, 5, 100)\nn = np.random.randint(1, 4, 100)\n\nimport collections\ndef max_repeat(x):\n    # maximum of numbers of repeats\n    c = collections.Counter(x)\n    bm=np.argmax([b for a, b in c.items()])\n    return list(c.keys())[bm]\n\nclass MyIndividual(BinaryIndividual):\n\n    def _fitness(self):\n        x, y = self.evaluate()\n        return - x - y\n\n    def evaluate(self):\n        return abs(np.dot(n, self.chromosome)-10), max_repeat(ti for ti, c in zip(t, self) if c==1)\n\nclass MyPopulation(SGAPopulation):\n    element_class = MyIndividual\n\npop = MyPopulation.random(n_individuals=50, size=100)\npop.evolve()\nprint(pop.best_individual)\n```\n\n\n\nNotate that there is only one chromosome in `MonoIndividual`, which could be got by `self.chromosome` .\n\n### Example2: Knapsack Problem\n\nOne of the famous problem is the knapsack problem. It is a good example for GA.\n\nWe set `history=True` in `evolve` method for the example, that will record the main data of the whole evolution. It will return an object of `pandas.DataFrame`. The argument `stat`  is a dict from a key to function/str(corresponding to a method) that map a population to a number. the numbers in one generation will be stored in a row of the dataframe.\n\nsee `# examples/example0`\n\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom pyrimidine import MonoBinaryIndividual, SGAPopulation\n\nfrom pyrimidine.benchmarks.optimization import *\n\n# generate a knapsack problem randomly\nevaluate = Knapsack.random(n=20)\n\nclass MyIndividual(MonoBinaryIndividual):\n    def _fitness(self):\n        return evaluate(self)\n\n\nclass MyPopulation(SGAPopulation):\n    element_class = MyIndividual\n\npop = MyPopulation.random(size=20)\n\nstat={'Mean Fitness':'mean_fitness', 'Best Fitness':'best_fitness'}\ndata = pop.evolve(stat=stat, history=True)\n# data is an instance of DataFrame of pandas\n\nimport matplotlib.pyplot as plt\nfig = plt.figure()\nax = fig.add_subplot(111)\ndata[['Mean Fitness', 'Best Fitness']].plot(ax=ax)\nax.set_xlabel('Generations')\nax.set_ylabel('Fitness')\nplt.show()\n\n```\n\n![plot-history](/Users/william/Programming/myGithub/pyrimidine/plot-history.png)\n\n\n\n## Extension\n\n`pyrimidine` is extendable. It is easy to implement others iterative model, such as simulation annealing and particle swarm optimization.\n\n\n\nCurrently, it is recommended to define subclasses based on `BaseIterativeModel` as a maxin.\n\nIn PSO, we regard a particle as an individual, and `ParticleSwarm` as a population. But in the following, we subclass it from `BaseIterativeModel`\n\n```python\n# pso.py\nclass Particle(PolyIndividual):\n    \"\"\"A particle in PSO\n\n    Variables:\n        default_size {number} -- one individual represented by 2 chromosomes: position and velocity\n        phantom {Particle} -- the current state of the particle moving in the solution space.\n    \"\"\"\n\n    element_class = FloatChromosome\n    default_size = 2\n    phantom = None\n\n    def backup(self):\n        self.chromosomes[0] = self.position\n        self.fitness = self.phantom.fitness\n\n    def init(self):\n        self.phantom = self.clone(fitness=self.fitness)\n\n    # other methods\n\n\nclass ParticleSwarm(BaseIterativeModel):\n    element_class = Particle\n    default_size = 20\n    params = {'learning_factor': 2, 'acceleration_coefficient': 3, 'inertia':0.5, 'n_best_particles':0.1, 'max_velocity':None}\n\n    def init(self):\n        self.best_particles = self.get_best_individuals(self.n_best_particles)\n        for particle in self.particles:\n            particle.init()\n\n    def transit(self, *args, **kwargs):\n        \"\"\"\n        Transitation of the states of particles\n        \"\"\"\n        for particle in self:\n            if particle.phantom.fitness > particle.fitness:\n                particle.backup()\n        for particle in self:\n            if particle not in self.best_particles:\n                for k, b in enumerate(self.best_particles):\n                    if particle.fitness <= b.fitness:\n                        break\n                if k > 0:\n                    self.best_particles.pop(k)\n                    self.best_particles.insert(k, particle)\n        self.move()\n\n    def move(self):\n        # moving rule of particles\n        xi = random()\n        eta = random()\n        for particle in self:\n            if particle in self.best_particles:\n                particle.velocity = (self.inertia * particle.velocity\n             + self.learning_factor * xi * (particle.best_position-particle.position))\n            else:\n                for b in self.best_particles:\n                    if particle.fitness < b.fitness:\n                        break\n                particle.velocity = (self.inertia * particle.velocity\n                 + self.learning_factor * xi * (particle.best_position-particle.position)\n                 + self.acceleration_coefficient * eta * (b.best_position-particle.position))\n            particle.position += particle.velocity\n            particle.phantom.fitness = None\n```\n\nIf you want to apply PSO, then you can define\n\n```python\nclass MyParticleSwarm(ParticleSwarm, BasePopulation):\n    element_class = _Particle\n    default_size = 20\n\npop = MyParticleSwarm.random()\n```\n\n\n\nIt is not coercive. It is possible to inherit `ParticleSwarm` from `BasePopulation` directly.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Freakwill/pyrimidine",
    "keywords": "Genetic Algorithm,Artificial Intelligence,Intelligent Optimization",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyrimidine",
    "package_url": "https://pypi.org/project/pyrimidine/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyrimidine/",
    "project_urls": {
      "Homepage": "https://github.com/Freakwill/pyrimidine",
      "Repository": "https://github.com/Freakwill/pyrimidine"
    },
    "release_url": "https://pypi.org/project/pyrimidine/1.3.2/",
    "requires_dist": [
      "ezstat"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "A competitive framework for GA, designed by thorough OOP",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14319800,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ba82677c95e5e918f4b452f822c112f0f1fac297cf62ab8a82d332ebff390f5",
          "md5": "aaada3e9054c804f67675a803a1fcd4c",
          "sha256": "d07e92a43af355232c2dd8a0e23d08af576ee950c6e37c8bd8a7eda75a5fce51"
        },
        "downloads": -1,
        "filename": "pyrimidine-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aaada3e9054c804f67675a803a1fcd4c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 10781766,
        "upload_time": "2021-03-31T13:38:57",
        "upload_time_iso_8601": "2021-03-31T13:38:57.868804Z",
        "url": "https://files.pythonhosted.org/packages/6b/a8/2677c95e5e918f4b452f822c112f0f1fac297cf62ab8a82d332ebff390f5/pyrimidine-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "094c4ea28dd1abd9553e872803608044348e6d70b39b432c13df835e049992a0",
          "md5": "40fdf9edca1d6ccfd066175fcf40d050",
          "sha256": "b82ddc8fe492306b14a5c309d5262266b2071edcfda78164aecfa5a510f95208"
        },
        "downloads": -1,
        "filename": "pyrimidine-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "40fdf9edca1d6ccfd066175fcf40d050",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 10658371,
        "upload_time": "2021-03-31T13:39:07",
        "upload_time_iso_8601": "2021-03-31T13:39:07.205412Z",
        "url": "https://files.pythonhosted.org/packages/09/4c/4ea28dd1abd9553e872803608044348e6d70b39b432c13df835e049992a0/pyrimidine-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58b8fe8b905c8ffe992e33b2e01909baebe6fc3858300dd50b25393fb83e547c",
          "md5": "3fb1047b767c697a48fd7c6fd9b49ecc",
          "sha256": "231e28892e2ece72c43f844263d2b36208b25587f7021c29201b546fc4fad815"
        },
        "downloads": -1,
        "filename": "pyrimidine-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fb1047b767c697a48fd7c6fd9b49ecc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 11584444,
        "upload_time": "2021-12-09T09:29:00",
        "upload_time_iso_8601": "2021-12-09T09:29:00.620353Z",
        "url": "https://files.pythonhosted.org/packages/58/b8/fe8b905c8ffe992e33b2e01909baebe6fc3858300dd50b25393fb83e547c/pyrimidine-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55d8450b1f921fc0070fa83303ca8686e3dad1becc64a479342429d064038cb3",
          "md5": "900cd1a8aa8f0a469c0598d7f41fc75b",
          "sha256": "ca2b8b9b7c7fa1646aff46d5a21458ebed345e1586c8516bdd74584ddc735249"
        },
        "downloads": -1,
        "filename": "pyrimidine-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "900cd1a8aa8f0a469c0598d7f41fc75b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11458664,
        "upload_time": "2021-12-09T09:29:21",
        "upload_time_iso_8601": "2021-12-09T09:29:21.479289Z",
        "url": "https://files.pythonhosted.org/packages/55/d8/450b1f921fc0070fa83303ca8686e3dad1becc64a479342429d064038cb3/pyrimidine-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "419e3c99bc427f923361550b07dc09c8173bb88b2a20357748e8487e0c2435d6",
          "md5": "2b49263b5d9512d461d58ab931d24153",
          "sha256": "ebede4766dfaffdbf25268933dff27f3e308af47180e4f47cec73e776708dfa8"
        },
        "downloads": -1,
        "filename": "pyrimidine-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b49263b5d9512d461d58ab931d24153",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 11584509,
        "upload_time": "2021-12-15T01:09:45",
        "upload_time_iso_8601": "2021-12-15T01:09:45.592536Z",
        "url": "https://files.pythonhosted.org/packages/41/9e/3c99bc427f923361550b07dc09c8173bb88b2a20357748e8487e0c2435d6/pyrimidine-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cce94af3e4b21ce55ead5142aa3d23189384d28b3b3015f80f3da59a4bc1a75",
          "md5": "e869532d3962409650c53d7f862c8e47",
          "sha256": "9104711ba296e54e586028693dce6ac0a226cc810d4c0ede51501d421558fd06"
        },
        "downloads": -1,
        "filename": "pyrimidine-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e869532d3962409650c53d7f862c8e47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11458723,
        "upload_time": "2021-12-15T01:10:08",
        "upload_time_iso_8601": "2021-12-15T01:10:08.627819Z",
        "url": "https://files.pythonhosted.org/packages/4c/ce/94af3e4b21ce55ead5142aa3d23189384d28b3b3015f80f3da59a4bc1a75/pyrimidine-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbe9110fac80786b8bbf7feeafe77efe31d46ca9611896937e6de47a8ca3bb1c",
          "md5": "6f678839133b148543972408d7772c90",
          "sha256": "72025622a495201609af756c2b2ee616c68a83f066acb9e4d1398cafcfdb220e"
        },
        "downloads": -1,
        "filename": "pyrimidine-1.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f678839133b148543972408d7772c90",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 5955495,
        "upload_time": "2022-07-03T01:59:47",
        "upload_time_iso_8601": "2022-07-03T01:59:47.705834Z",
        "url": "https://files.pythonhosted.org/packages/cb/e9/110fac80786b8bbf7feeafe77efe31d46ca9611896937e6de47a8ca3bb1c/pyrimidine-1.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ce070c7cfb062b4135d793c0e6d8656a6f29ffb79a4daa312d8bc950db3ace0",
          "md5": "f411b3dbe6db2674d36904d09b3e3e19",
          "sha256": "a412ddccda9405b8a22c7806da180ffe43ef21015ae10e3c1c26c40865869667"
        },
        "downloads": -1,
        "filename": "pyrimidine-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f411b3dbe6db2674d36904d09b3e3e19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5830342,
        "upload_time": "2022-07-03T01:59:59",
        "upload_time_iso_8601": "2022-07-03T01:59:59.642153Z",
        "url": "https://files.pythonhosted.org/packages/8c/e0/70c7cfb062b4135d793c0e6d8656a6f29ffb79a4daa312d8bc950db3ace0/pyrimidine-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbe9110fac80786b8bbf7feeafe77efe31d46ca9611896937e6de47a8ca3bb1c",
        "md5": "6f678839133b148543972408d7772c90",
        "sha256": "72025622a495201609af756c2b2ee616c68a83f066acb9e4d1398cafcfdb220e"
      },
      "downloads": -1,
      "filename": "pyrimidine-1.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f678839133b148543972408d7772c90",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 5955495,
      "upload_time": "2022-07-03T01:59:47",
      "upload_time_iso_8601": "2022-07-03T01:59:47.705834Z",
      "url": "https://files.pythonhosted.org/packages/cb/e9/110fac80786b8bbf7feeafe77efe31d46ca9611896937e6de47a8ca3bb1c/pyrimidine-1.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ce070c7cfb062b4135d793c0e6d8656a6f29ffb79a4daa312d8bc950db3ace0",
        "md5": "f411b3dbe6db2674d36904d09b3e3e19",
        "sha256": "a412ddccda9405b8a22c7806da180ffe43ef21015ae10e3c1c26c40865869667"
      },
      "downloads": -1,
      "filename": "pyrimidine-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f411b3dbe6db2674d36904d09b3e3e19",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 5830342,
      "upload_time": "2022-07-03T01:59:59",
      "upload_time_iso_8601": "2022-07-03T01:59:59.642153Z",
      "url": "https://files.pythonhosted.org/packages/8c/e0/70c7cfb062b4135d793c0e6d8656a6f29ffb79a4daa312d8bc950db3ace0/pyrimidine-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}