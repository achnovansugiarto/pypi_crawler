{
  "info": {
    "author": "Panagiotis Zestanakis",
    "author_email": "panosz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "# Alpha Shapes\n\nA Python package for reconstructing the shape of a 2D point cloud on the plane.\n\n## Introduction\nGiven a finite set of points (or point cloud) in the Euclidean plane, [alpha shapes](https://en.wikipedia.org/wiki/Alpha_shape) are members of a family of closed polygons on the 2D plane associated with the shape of this point cloud. Each alpha shape is associated with a single non negative parameter **α**. \n\nIntuitively an alpha shape can be conceptualized as follows. Imagine carving out the plane using a cookie scoop of radius 1/**α**, without removing any of the points in the point cloud. The shape that remains **is** the shape of the point cloud. If we replace the arc-like edges, due to the circular rim of the scoop, with straight segments, we are left with the alpha shape of parameter **α**.\n\n\nGiven a finite set of points (or point cloud) in the Euclidean plane, [alpha shapes](https://en.wikipedia.org/wiki/Alpha_shape) are members of a family of closed polygons on the 2D plane associated with the shape of this point cloud. Each alpha shape is associated with a single non negative parameter **α**. \n\nIntuitively an alpha shape can be conceptualized as follows. Imagine carving out the plane using a cookie scoop of radius 1/**α**, without removing any of the points in the point cloud. The shape that remains **is** the shape of the point cloud. If we replace the arc-like edges, due to the circular rim of the scoop, with straight segments, we are left with the alpha shape of parameter **α**.\n\n## Installation\n```console\npip install alpha_shapes\n```\n\n## Usage\n\n\n```python\nimport matplotlib.pyplot as plt\nfrom alpha_shapes import Alpha_Shaper, plot_alpha_shape\n```\n\nDefine a set of points. Care must be taken to avoid duplicate points:\n\n\n```python\npoints = [(0.,     0.),    (0.,    1.),    (1.,     1.1),\n          (1.,     0.),    (0.25,  0.15),  (0.65,   0.45),\n          (0.75,   0.75),  (0.5,   0.5),   (0.5,    0.25),\n          (0.5,    0.75),  (0.25,  0.5),   (0.75,   0.25),\n          (0.,     2.),    (0.,    2.1),   (1.,     2.1),\n          (0.5,    2.5),   (-0.5,  1.5),   (-0.25,  1.5),\n          (-0.25,  1.25),  (0,     1.25),  (1.5,    1.5),\n          (1.25,   1.5),   (1.25,  1.25),  (1,      1.25),\n          (1.,    2.),    (0.25,   2.15),\n          (0.65,   2.45),  (0.75,  2.75),  (0.5,    2.25),\n          (0.5,    2.75),  (0.25,  2.5),   (0.75,   2.25)]\n```\n\nCreate the alpha shaper\n\n\n```python\nshaper = Alpha_Shaper(points)\n```\n\nFor the alpha shape to be calculated, the user must choose a value for the `alpha` parameter.\nHere, let us set `alpha` to 5.3:\n\n\n```python\n# Calculate the shape\nalpha = 5.3\nalpha_shape = shaper.get_shape(alpha=alpha)\n```\n\nVisualize the result:\n\n\n```python\nfig, (ax0, ax1) = plt.subplots(1, 2)\nax0.scatter(*zip(*points))\nax0.set_title('data')\nax1.scatter(*zip(*points))\nplot_alpha_shape(ax1, alpha_shape)\nax1.set_title(f\"$\\\\alpha={alpha:.3}$\")\n\nfor ax in (ax0, ax1):\n    ax.set_aspect('equal')\n```\n\n\n    \n![png](README_files/README_10_0.png)\n    \n\n\nGood results depend on a successful choise for the value of `alpha`. If for example we choose a sligtly smaller value, e.g. $\\alpha = 4.8$:\n\n\n```python\n# Calculate the shape for smaller alpha\nalpha = 4.8\nalpha_shape = shaper.get_shape(alpha=alpha)\n\nfig, (ax0, ax1) = plt.subplots(1, 2)\nax0.scatter(*zip(*points))\nax0.set_title('data')\nax1.scatter(*zip(*points))\nplot_alpha_shape(ax1, alpha_shape)\nax1.set_title(f\"$\\\\alpha={alpha:.3}$\")\n\nfor ax in (ax0, ax1):\n    ax.set_aspect('equal')\n```\n\n\n    \n![png](README_files/README_12_0.png)\n    \n\n\nWe find out that the hole is no longer there.\nOn the other hand, for larger alpha values, e.g. $\\alpha = 5.6$\n\n\n```python\n# Calculate the shape for larger alpha\nalpha = 5.6\nalpha_shape = shaper.get_shape(alpha=alpha)\n\nfig, (ax0, ax1) = plt.subplots(1, 2)\nax0.scatter(*zip(*points))\nax0.set_title('data')\nax1.scatter(*zip(*points))\nplot_alpha_shape(ax1, alpha_shape)\nax1.set_title(f\"$\\\\alpha={alpha:.3}$\")\n\nfor ax in (ax0, ax1):\n    ax.set_aspect('equal')\n```\n\n\n    \n![png](README_files/README_14_0.png)\n    \n\n\nWe find out that mabe we have cut out too much. The point on the bottom right is no longer incuded in the shape\n\n## Features\n\n### Optimization\n\nA satisfactory calculation of the alpha shape requires a successful guess of the alpha parameter. While trial and error might work well in some cases, users can let the `Alpha_Shaper` choose a value for them. That is what the `optimize` method is about. It calculates the largest possible value for `alpha`, so that no points from the point cloud are left out.\n\n\n```python\nalpha_opt, alpha_shape = shaper.optimize()\nalpha_opt\n```\n\n\n\n\n    5.331459512629298\n\n\n\n\n```python\nfig, (ax0, ax1) = plt.subplots(1, 2)\nax0.scatter(*zip(*points))\nax0.set_title('data')\nax1.scatter(*zip(*points))\nplot_alpha_shape(ax1, alpha_shape)\nax1.set_title(f\"Optimal $\\\\alpha={alpha_opt:.3}$\")\n\nfor ax in (ax0, ax1):\n    ax.set_aspect('equal')\n```\n\n\n    \n![png](README_files/README_18_0.png)\n    \n\n\nThe optimize method runs efficiently for relatively large point clouds. Here we calculate the optimal alpha shape of an ensemble of 1000 random points uniformly distributed on the unit square.  \n\n\n```python\nfrom time import time\nimport numpy as np\n\nnp.random.seed(42)  # for reproducibility\n\n#  Define a set of random points\npoints = np.random.random((1000, 2))\n# Prepare the shaper\nalpha_shaper = Alpha_Shaper(points)\n\n# Estimate the optimal alpha value and calculate the corresponding shape\nts = time()\nalpha_opt, alpha_shape = alpha_shaper.optimize()\nte = time()\nprint(f'optimization took: {te-ts:.2} sec')\n\nfig, axs = plt.subplots(1,\n                        2,\n                        sharey=True,\n                        sharex=True,\n                        constrained_layout=True)\n\nfor ax in axs:\n    ax.plot(*zip(*points),\n            linestyle='',\n            color='k',\n            marker='.',\n            markersize=1)\n\n    ax.set_aspect('equal')\n\n_ = axs[0].set_title('data')\n\nplot_alpha_shape(axs[1], alpha_shape)\naxs[1].triplot(alpha_shaper)\n_ = axs[1].set_title(r'$\\alpha_{\\mathrm{opt}}$')\n\n\n```\n\n    optimization took: 0.087 sec\n\n\n\n    \n![png](README_files/README_20_1.png)\n    \n\n\n### used as triangulation\n\nThe Alpha_Shaper class implements the interface of matplotlib.tri.Triangulation. This means that it will work with algorithms that expect a triangulation as input (e.g. for contour plotting or interpolation)\n\n\n```python\n#  Define a set of points\n\nnp.random.seed(42)  # for reproducibility\n\npoints = np.random.random((1000, 2))\n\nx = points[:, 0]\ny = points[:, 1]\n\nz = x**2 * np.cos(5 * x * y - 8 * x + 9*y) + y**2 * np.sin(5 * x * y - 8 * x + 9*y)\n\n# If the characteristic scale along each axis varies significantly,\n# it may make sense to turn on the `normalize` option.\nshaper = Alpha_Shaper(points, normalize=True)\nalpha_opt, alpha_shape_scaled = shaper.optimize()\n\n#  mask = shaper.set_mask_at_alpha(alpha_opt)\n\nfig, ax = plt.subplots()\n\nax.tricontourf(shaper, z)\nax.triplot(shaper)\nax.plot(x, y, \".k\", markersize=2)\nax.set_aspect('equal')\n\n```\n\n\n    \n![png](README_files/README_22_0.png)\n    \n\n\n###  Normalization\nBefore calculating the alpha shape, Alpha_Shaper normalizes by default the input points so that they are distributed on the unit square. When there is a scale separation along the x and y direction, deactivating this feature may yield surprising results.\n\n\n```python\n#  Define a set of points\npoints = [\n    (0.0, 2.1),\n    (-0.25, 1.5),\n    (0.25, 0.5),\n    (-0.25, 1.25),\n    (0.75, 2.75),\n    (0.75, 2.25),\n    (0.0, 2.0),\n    (1.0, 0.0),\n    (0.25, 0.15),\n    (1.25, 1.5),\n    (1.25, 1.25),\n    (1.0, 2.1),\n    (0.65, 2.45),\n    (0.25, 2.5),\n    (0.0, 1.0),\n    (0.5, 0.5),\n    (0.5, 0.25),\n    (0.5, 0.75),\n    (0, 1.25),\n    (1.5, 1.5),\n    (1.0, 2.0),\n    (0.25, 2.15),\n    (1.0, 1.1),\n    (0.75, 0.75),\n    (0.75, 0.25),\n    (0.0, 0.0),\n    (-0.5, 1.5),\n\n    (1, 1.25),\n    (0.5, 2.5),\n    (0.5, 2.25),\n    (0.5, 2.75),\n    (0.65, 0.45),\n]\n\n# Scale the points along the x-dimension\nx_scale = 1e-3\npoints = np.array(points)\npoints[:, 0] *= x_scale\n\n#  Create the alpha shape without accounting for the x and y scale separation\nunnormalized_shaper = Alpha_Shaper(points, normalize=False)\n_, alpha_shape_unscaled = unnormalized_shaper.optimize()\n\n\n# If the characteristic scale along each axis varies significantly,\n# it may make sense to turn on the `normalize` option.\nshaper = Alpha_Shaper(points, normalize=True)\nalpha_opt, alpha_shape_scaled = shaper.optimize()\n\n\n#  Compare the alpha shapes calculated with and without scaling.\nfig, (ax0, ax1, ax2) = plt.subplots(\n    1, 3, sharey=True, sharex=True, constrained_layout=True\n)\nax0.scatter(*zip(*points))\nax0.set_title(\"data\")\nax1.scatter(*zip(*points))\nax2.scatter(*zip(*points))\n\nplot_alpha_shape(ax1, alpha_shape_scaled)\n\nax1.set_title(\"with normalization\")\nax2.set_title(\"without normalization\")\nplot_alpha_shape(ax2, alpha_shape_unscaled)\n\nfor ax in (ax1, ax2):\n    ax.set_axis_off()\nfor ax in (ax0, ax1, ax2):\n    ax.set_aspect(x_scale)\n\n```\n\n\n    \n![png](README_files/README_24_0.png)\n    \n\n\n##  Inspiration\n\nThis library is inspired by the [alphashape](https://github.com/bellockk/alphashape) library.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/panosz/alpha_shapes",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alpha-shapes",
    "package_url": "https://pypi.org/project/alpha-shapes/",
    "platform": null,
    "project_url": "https://pypi.org/project/alpha-shapes/",
    "project_urls": {
      "Homepage": "https://github.com/panosz/alpha_shapes"
    },
    "release_url": "https://pypi.org/project/alpha-shapes/1.0.3/",
    "requires_dist": [
      "numpy",
      "shapely",
      "matplotlib"
    ],
    "requires_python": ">=3.8",
    "summary": "reconstruct the shape of a 2D point cloud.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16576138,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c70be1770ec56071239cfd9d6a30cc0699c6034fc629b4c72decd768daf3f9e",
          "md5": "caaed05b73a2baa800416665d3433faf",
          "sha256": "da941cfd3b0b0d8d49971228602a0d59676957f945ee1043d5527a0ba04dfbe4"
        },
        "downloads": -1,
        "filename": "alpha_shapes-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "caaed05b73a2baa800416665d3433faf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6071,
        "upload_time": "2020-10-17T17:22:41",
        "upload_time_iso_8601": "2020-10-17T17:22:41.475359Z",
        "url": "https://files.pythonhosted.org/packages/2c/70/be1770ec56071239cfd9d6a30cc0699c6034fc629b4c72decd768daf3f9e/alpha_shapes-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e009760ac74ca85d9ae84e1dc7f76e903f8e321dd7dd06ecbf2be168a074ad06",
          "md5": "f6ef71bd7d9986925171158439c80eb6",
          "sha256": "33c6de1fc78adaeb51e9fbcd1b1f3ae49488869cc1e4bfaaf0d6c60b670275f2"
        },
        "downloads": -1,
        "filename": "alpha_shapes-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6ef71bd7d9986925171158439c80eb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5156,
        "upload_time": "2020-10-17T17:22:45",
        "upload_time_iso_8601": "2020-10-17T17:22:45.226795Z",
        "url": "https://files.pythonhosted.org/packages/e0/09/760ac74ca85d9ae84e1dc7f76e903f8e321dd7dd06ecbf2be168a074ad06/alpha_shapes-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e72ad230b79f4966d15c04f0f0e7d5fb3a787f6120b69ce97ef27b4a828c8fe",
          "md5": "7bcaee2c476959b7a61af240b408eb4f",
          "sha256": "e93d3ab6c2985076cf03cf0ce2a6b0b735b5b0e799462aeb655bb403a515c2bc"
        },
        "downloads": -1,
        "filename": "alpha_shapes-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bcaee2c476959b7a61af240b408eb4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7572,
        "upload_time": "2023-01-26T11:13:28",
        "upload_time_iso_8601": "2023-01-26T11:13:28.047410Z",
        "url": "https://files.pythonhosted.org/packages/3e/72/ad230b79f4966d15c04f0f0e7d5fb3a787f6120b69ce97ef27b4a828c8fe/alpha_shapes-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8ff8c0ad4d2c3a54d83f61ec0c06804fb7fdb3bd0059998a7cd9ab3fbce90c8",
          "md5": "d1f0c90cf3262c0144a445e1c9c2b5e9",
          "sha256": "54b239091be40869cf4d917cb83f1f3e32e869d81b3bc6342ed32bddfcd142fb"
        },
        "downloads": -1,
        "filename": "alpha_shapes-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d1f0c90cf3262c0144a445e1c9c2b5e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7371,
        "upload_time": "2023-01-26T11:13:30",
        "upload_time_iso_8601": "2023-01-26T11:13:30.350358Z",
        "url": "https://files.pythonhosted.org/packages/e8/ff/8c0ad4d2c3a54d83f61ec0c06804fb7fdb3bd0059998a7cd9ab3fbce90c8/alpha_shapes-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e5322eb309c0d8c9411ce1ac2d6e97a5b9a263a0ac903aa6c99e774b1b8238f",
          "md5": "b0f90f11c44b7b6e7a5e0f98e74fc3a8",
          "sha256": "2245893d64cb9f3107470babd16f4c4203fe662235c507438eb1ef8a2d131cca"
        },
        "downloads": -1,
        "filename": "alpha_shapes-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0f90f11c44b7b6e7a5e0f98e74fc3a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7720,
        "upload_time": "2023-01-26T14:15:48",
        "upload_time_iso_8601": "2023-01-26T14:15:48.196615Z",
        "url": "https://files.pythonhosted.org/packages/4e/53/22eb309c0d8c9411ce1ac2d6e97a5b9a263a0ac903aa6c99e774b1b8238f/alpha_shapes-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb046cf384faafc052b75d7a51643bbd8725569842fce1bab419f04e985d44ad",
          "md5": "02a462db86a70d868ac08440eaad7b09",
          "sha256": "ec9025e55a05b06065881e144f0b46e19aeca45682f228589ad1adec2bc3ee40"
        },
        "downloads": -1,
        "filename": "alpha_shapes-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "02a462db86a70d868ac08440eaad7b09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7525,
        "upload_time": "2023-01-26T14:15:50",
        "upload_time_iso_8601": "2023-01-26T14:15:50.104838Z",
        "url": "https://files.pythonhosted.org/packages/eb/04/6cf384faafc052b75d7a51643bbd8725569842fce1bab419f04e985d44ad/alpha_shapes-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d6fad552b87a2590b346eb68d2fda047226d2a235c87f263292f4860aab7436",
          "md5": "60a913ffa1582e0924701c7ef7abdaba",
          "sha256": "1f6ba8b346d58c719e3ed2e97bfbde52fa94f0ab9da67d3b25c48b9d703e24b6"
        },
        "downloads": -1,
        "filename": "alpha_shapes-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60a913ffa1582e0924701c7ef7abdaba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7701,
        "upload_time": "2023-01-26T14:27:21",
        "upload_time_iso_8601": "2023-01-26T14:27:21.763545Z",
        "url": "https://files.pythonhosted.org/packages/6d/6f/ad552b87a2590b346eb68d2fda047226d2a235c87f263292f4860aab7436/alpha_shapes-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b39a90270ef11f2b3f53f45678686f2eafd2f2f8db8b8e4cc6e5144fd782ad5",
          "md5": "081890108893c409f5c7e70d6d3ac084",
          "sha256": "a0653e1376c5f3ae7f41d79b6d0bd0eb326490d9cefa31002901c0c52518e2cb"
        },
        "downloads": -1,
        "filename": "alpha_shapes-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "081890108893c409f5c7e70d6d3ac084",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7520,
        "upload_time": "2023-01-26T14:27:23",
        "upload_time_iso_8601": "2023-01-26T14:27:23.911542Z",
        "url": "https://files.pythonhosted.org/packages/6b/39/a90270ef11f2b3f53f45678686f2eafd2f2f8db8b8e4cc6e5144fd782ad5/alpha_shapes-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d6fad552b87a2590b346eb68d2fda047226d2a235c87f263292f4860aab7436",
        "md5": "60a913ffa1582e0924701c7ef7abdaba",
        "sha256": "1f6ba8b346d58c719e3ed2e97bfbde52fa94f0ab9da67d3b25c48b9d703e24b6"
      },
      "downloads": -1,
      "filename": "alpha_shapes-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "60a913ffa1582e0924701c7ef7abdaba",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7701,
      "upload_time": "2023-01-26T14:27:21",
      "upload_time_iso_8601": "2023-01-26T14:27:21.763545Z",
      "url": "https://files.pythonhosted.org/packages/6d/6f/ad552b87a2590b346eb68d2fda047226d2a235c87f263292f4860aab7436/alpha_shapes-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b39a90270ef11f2b3f53f45678686f2eafd2f2f8db8b8e4cc6e5144fd782ad5",
        "md5": "081890108893c409f5c7e70d6d3ac084",
        "sha256": "a0653e1376c5f3ae7f41d79b6d0bd0eb326490d9cefa31002901c0c52518e2cb"
      },
      "downloads": -1,
      "filename": "alpha_shapes-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "081890108893c409f5c7e70d6d3ac084",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7520,
      "upload_time": "2023-01-26T14:27:23",
      "upload_time_iso_8601": "2023-01-26T14:27:23.911542Z",
      "url": "https://files.pythonhosted.org/packages/6b/39/a90270ef11f2b3f53f45678686f2eafd2f2f8db8b8e4cc6e5144fd782ad5/alpha_shapes-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}