{
  "info": {
    "author": "Ivan Artamonov",
    "author_email": "ivan.artamonov.git@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "|License| |Release| |Docs| |Code Coverage| |Build Status Travis CI| |Blog|\n\nGraphQL-From-Struct\n===================\n\nA simple one-method library makes a `GraphQL <https://graphql.org/>`__\nquery from Python data structures.\n\nTable of Contents\n-----------------\n\n1. `Installation`_\n2. `Usage`_\n3. `Exceptions`_\n4. `Parameters`_\n5. `Reserved keywords`_\n6. `Examples`_\n\n-  `Fields`_\n-  `Arguments`_\n-  `Default arguments`_\n-  `Aliases`_\n-  `Fragments`_\n-  `Using variables inside fragments`_\n-  `Operation name`_\n-  `Variables`_\n-  `Default variables`_\n-  `Directives`_\n-  `Mutations`_\n-  `Inline Fragments`_\n-  `Meta fields`_\n\nInstallation \n-------------\n\n::\n\n    pip install graphql_from_struct \n\nUsage \n------\n\n::\n\n    # 1. Import GqlFromStruct class\n\n    from graphql_from_struct import GqlFromStruct\n\n    # 2. Make a query \n\n    struct = {'hero':{'@fields':['name']}}\n\n    # 3. Generate GraphQL\n\n    gql = GqlFromStruct.from_struct(struct)\n\n    # Or use OOP-style:\n\n    foo = GqlFromStruct(struct)\n\n    gql = foo.query()\n\n    print (gql)\n\nYou should see such result:\n\n::\n\n    query{\n            hero{\n                    name\n                }\n        }\n\nExceptions \n----------\n\nThe module raises ``GqlFromStructException`` in case of empty or wrong\ndata structure input.\n\nParameters\n----------\n\n``GqlFromStruct()`` constructor and ``.from_struct()`` method take 3 arguments:\na **struct** (default None), a **minimize** (optional, default False) flag and a **force_quotes** (optional, default 0) setting.\nCode:\n\n::\n\n    foo = GqlFromStruct({'hero':{'@fields':['name']}}, True)\n\n    # or foo = GqlFromStruct(struct = {'hero':{'@fields':['name']}}, minimize = True) \n\n    gql = foo.query()\n\n    # or \n\n    gql = GqlFromStruct.from_struct({'hero':{'@fields':['name']}}, True)\n\n    print (gql)\n\ngives you:\n\n::\n\n    query{hero{name}}\n\nBy default the GraphQL-From-Struct sets quotes for any string with spaces. You can change it with the **force_quotes** flag.  It enforces quoting parameters and arguments with 1 value, disables any quotes with -1 or enables only arguments quoting with 2:\n\n::\n\n    gql = GqlFromStruct.from_struct({'hero':{'@fields':['name']}}, True, 1)\n\n    print (gql)\n\ngives you:\n\n::\n\n    \"query\"{\"hero\"{\"name\"}}\n\nOr\n\n::\n\n    gql = GqlFromStruct.from_struct({'he ro':{'@fields':['name']}}, True, -1)\n\n    print (gql)\n\ngives you:\n\n::\n\n    query{he ro{name}}\n\nOr\n\n::\n\n    gql = GqlFromStruct.from_struct('human':{'@fields':['name', 'height'], '@args':{'id':['foo', 'bar']}}, True, 2)\n\n    print (gql)\n\ngives you:\n\n::\n\n    query{human(id:[\"foo\", \"bar\"]){name height}}\n\nReserved keywords \n------------------\n\nWords\n``@alias, @args, @fields, @fragments, @fragment_name, @directives, @include, @mutations, @operation_name, @queries, @query, @skip, @variables``\nare reserved and used for query constructing.\n\nExamples \n---------\n\nExamples are shown in the same order as in the\n`GraphQL <https://graphql.org/learn/queries/>`__ documentation.\n\nFields\n~~~~~~\n\nUse ``@fields`` keyword:\n\n::\n\n    struct = {'hero':{'@fields':['name']}}\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query{\n            hero{\n                    name\n                }\n        }\n\nYou can use arbitrary field nesting:\n\n::\n\n    struct = {'hero':{'@fields':['name', {'friends':{'@fields':['name']}}]}}\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query{\n            hero{\n                    name\n                    friends{\n                            name\n                        }\n                }\n        }\n\nArguments \n~~~~~~~~~~\n\nUse ``@args`` keyword:\n\n::\n\n    struct = {'human':{'@fields':['name', 'height'], '@args':{'id':'\"1000\"'}}}\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query{\n            human(\n                id : \"1000\"\n                ){\n                    name\n                    height\n                }\n        }\n\nor:\n\n::\n\n    struct = {\n      'human': {\n        '@fields': ['name', {\n          'height': {\n            '@args': {\n              'unit': 'FOOT'\n            }\n          }\n        }],\n        '@args': {\n          'id': \"1000\"\n        }\n      }\n    }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query{\n            human(\n                id : 1000\n                ){\n                    name\n                    height(\n                        unit : FOOT\n                        )\n                }\n        }\n\nNote: GraphQL-From-Struct puts double quotes by default only for values\nwith spaces. Like that:\n\n::\n\n    query = {'human':{'@fields':['name', 'height'], '@args':{'id':'1000 meters'}}}\n\nOutput:\n\n::\n\n    query{\n            human(\n                id : \"1000 meters\"\n                ){\n                    name\n                    height\n                }\n        }\n\nSingle words or numerical values are output in the form in which you\npassed them.\n\n::\n\n    query = {'human':{'@fields':['name', 'height'], '@args':{'id':1000}}}\n    query{\n            human(\n                id : 1000\n                ){\n                    name\n                    height\n                }\n        }\n\nDefault arguments \n^^^^^^^^^^^^^^^^^^\n\nYou can set default values of arguments:\n\n::\n\n    struct = {'human':{'@fields':['name', 'height'], '@args':{'$first': {'Int':'3'}}}\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query{\n            human(\n                $first : Int = 3\n                ){\n                    name\n                    height\n                }\n        }\n\nAliases \n~~~~~~~~\n\nUse ``@alias`` keyword:\n\n::\n\n    struct = [{\n      'hero': {\n        '@alias': 'empireHero',\n        '@args': {\n          'episode': \"EMPIRE\"\n        },\n        '@fields': ['name']\n      }\n    }, {\n      'hero': {\n        '@alias': 'jediHero',\n        '@args': {\n          'episode': \"JEDI\"\n        },\n        '@fields': ['name']\n      }\n    }]\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query{\n            empireHero : hero(\n                episode : EMPIRE\n                ){\n                    name\n                }\n            jediHero : hero(\n                episode : JEDI\n                ){\n                    name\n                }\n        }\n\nFragments \n~~~~~~~~~~\n\nUse ``@fragments`` and ``@fragment_name`` keywords for fragments setting\nup. Use ``@query`` and ``@queries`` for join some queries into one.\n\n::\n\n    struct = {\n                \"@queries\": [{\n                  '@query': [{\n                      'hero': {\n                        '@alias': 'leftComparison',\n                        '@args': {\n                          'episode': \"EMPIRE\"\n                        },\n                        '@fields': ['...comparisonFields']\n                      }\n                    },\n                    {\n                      'hero': {\n                        '@alias': 'rightComparison',\n                        '@args': {\n                          'episode': \"JEDI\"\n                        },\n                        '@fields': ['...comparisonFields']\n                      }\n                    }\n                  ]\n                }],\n                \"@fragments\": [{\n                  'Character': {\n                    '@fragment_name': 'comparisonFields',\n                    '@fields': ['name', 'appearsIn', {\n                      'friends': {\n                        '@fields': ['name']\n                      }\n                    }]\n                  }\n                }]\n              }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query{\n            leftComparison : hero(\n                episode : EMPIRE\n                ){\n                    ...comparisonFields\n                }\n            rightComparison : hero(\n                episode : JEDI\n                ){\n                    ...comparisonFields\n                }\n        }\n    fragment comparisonFields on Character{\n            name\n            appearsIn\n            friends{\n                    name\n                }\n        }\n\nUsing variables inside fragments \n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    struct = {\n      \"@queries\": [{\n        '@args': {\n          '$first': {\n            'Int': '3'\n          }\n        },\n        '@operation_name': 'HeroComparison',\n        '@query': [{\n            'hero': {\n              '@alias': 'leftComparison',\n              '@args': {\n                'episode': \"EMPIRE\"\n              },\n              '@fields': ['...comparisonFields']\n            }\n          },\n          {\n            'hero': {\n              '@alias': 'rightComparison',\n              '@args': {\n                'episode': \"JEDI\"\n              },\n              '@fields': ['...comparisonFields']\n            }\n          }\n        ]\n      }],\n      \"@fragments\": [{\n        'Character': {\n          '@fragment_name': 'comparisonFields',\n          '@fields': ['name', {\n            'friendsConnection': {\n              '@args': {\n                'first': '$first'\n              },\n              '@fields': ['totalCount', {\n                'edges': {\n                  '@fields': [{\n                    'node': {\n                      '@fields': ['name']\n                    }\n                  }]\n                }\n              }]\n            }\n          }]\n        }\n      }]\n    }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query HeroComparison (\n    $first : Int = 3\n    ){\n            leftComparison : hero(\n                episode : EMPIRE\n                ){\n                    ...comparisonFields\n                }\n            rightComparison : hero(\n                episode : JEDI\n                ){\n                    ...comparisonFields\n                }\n        }\n    fragment comparisonFields on Character{\n            name\n            friendsConnection(\n                first : $first\n                ){\n                    totalCount\n                    edges{\n                            node{\n                                    name\n                                }\n                        }\n                }\n        }\n\nOperation name \n~~~~~~~~~~~~~~~\n\nUse ``@operation_name`` keyword:\n\n::\n\n    struct =  {\n       '@queries': [{\n         '@operation_name': 'HeroNameAndFriends',\n         '@query': {\n           'hero': {\n             '@fields': ['name', {\n               'friends': {\n                 '@fields': ['name']\n               }\n             }]\n           }\n         }\n       }]\n     }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query HeroNameAndFriends{\n            hero{\n                    name\n                    friends{\n                            name\n                        }\n                }\n        }\n\nVariables \n~~~~~~~~~~\n\nUse ``@variables`` block at the same high level nesting as ``@queries``:\n\n::\n\n    struct = {\n                '@queries': [{\n                  '@operation_name': 'HeroNameAndFriends',\n                  '@query': {\n                    'hero': {\n                      '@fields': ['name', {\n                        'friends': {\n                          '@fields': ['name']\n                        }\n                      }]\n                    }\n                  }\n                }],\n                '@variables': {\n                  \"episode\": \"JEDI\"\n                }\n              }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query HeroNameAndFriends{\n            hero{\n                    name\n                    friends{\n                            name\n                        }\n                }\n        }\n    {\n        \"episode\": \"JEDI\"\n    }\n\nDefault variables \n^^^^^^^^^^^^^^^^^^\n\nUse ``@fields`` keyword:\n\n::\n\n    struct =  {\n                '@queries': [{\n                  '@operation_name': 'HeroNameAndFriends',\n                  '@args': {\n                    '$episode': {\n                      'Episode': 'JEDI'\n                    }\n                  },\n                  '@query': {\n                    'hero': {\n                      '@fields': ['name', {\n                        'friends': {\n                          '@fields': ['name']\n                        }\n                      }]\n                    }\n                  }\n                }],\n                '@variables': {\n                  \"episode\": \"JEDI\"\n                }\n              }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query HeroNameAndFriends (\n    $episode : Episode = JEDI\n    ){\n            hero{\n                    name\n                    friends{\n                            name\n                        }\n                }\n        }\n    {\n        \"episode\": \"JEDI\"\n    }\n\nDirectives \n~~~~~~~~~~~\n\nUse ``@directives`` keyword and ``@skip`` or ``@include`` as directives:\n\n::\n\n    struct = {\n      '@queries': [{\n        '@operation_name': 'Hero',\n        '@args': {\n          '$episode': 'Episode',\n          '$withFriends': 'Boolean!'\n        },\n        '@query': {\n          'hero': {\n            '@args': {\n              'episode': '$episode'\n            },\n            '@fields': ['name', {\n              'friends': {\n                '@fields': ['name'],\n                '@directives': {\n                  '@include': '$withFriends'\n                }\n              }\n            }]\n          }\n        }\n      }],\n      '@variables': {\n        \"episode\": \"JEDI\"\n      }\n    }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query Hero (\n    $episode : Episode, \n    $withFriends : Boolean!\n    ){\n            hero(\n                episode : $episode\n                ){\n                    name\n                    friends @include (if :  $withFriends){\n                            name\n                        }\n                }\n        }\n    {\n        \"episode\": \"JEDI\"\n    }\n\nMutations \n~~~~~~~~~~\n\nUse ``@mutations`` keyword:\n\n::\n\n    struct = {\n      '@mutations': [{\n        '@operation_name': 'CreateReviewForEpisode',\n        '@args': {\n          '$episode': 'Episode!',\n          '$review': 'ReviewInput!'\n        },\n        '@query': {\n          'createReview': {\n            '@args': {\n              'episode': '$ep',\n              'review': '$review'\n            },\n            '@fields': ['stars', 'commentary']\n          }\n        }\n      }],\n      '@variables': {\n        \"episode\": \"JEDI\",\n        \"review\": {\n          \"stars\": 5,\n          \"commentary\": \"This is a great movie!\"\n        }\n      }\n    }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    mutation CreateReviewForEpisode (\n    $episode : Episode!, \n    $review : ReviewInput!\n    ){\n            createReview(\n                episode : $ep, \n                review : $review\n                ){\n                    stars\n                    commentary\n                }\n        }\n    {\n        \"episode\": \"JEDI\",\n        \"review\": {\n            \"stars\": 5,\n            \"commentary\": \"This is a great movie!\"\n        }\n    }\n\nInline Fragments \n~~~~~~~~~~~~~~~~~\n\nNothing special needed.\n\n::\n\n    struct =  {\n       \"@queries\": [{\n         '@args': {\n           '$ep': 'Episode!'\n         },\n         '@operation_name': 'HeroForEpisode',\n         '@query': [{\n           'hero': {\n             '@args': {\n               'episode': '$ep'\n             },\n             '@fields': ['name',\n               {\n                 '... on Droid': {\n                   '@fields': ['primaryFunction']\n                 }\n               },\n               {\n                 '... on Human': {\n                   '@fields': ['height']\n                 }\n               }\n             ]\n           }\n         }]\n       }]\n     }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query HeroForEpisode (\n    $ep : Episode!\n    ){\n            hero(\n                episode : $ep\n                ){\n                    name\n                    ... on Droid{\n                            primaryFunction\n                        }\n                    ... on Human{\n                            height\n                        }\n                }\n        }\n\nMeta fields \n~~~~~~~~~~~~\n\nUse meta field as usual field:\n\n::\n\n    struct = {\n      'search': {\n        '@args': {\n          'text': 'an'\n        },\n        '@fields': ['__typename',\n          {\n            '... on Human': {\n              '@fields': ['name']\n            }\n          },\n          {\n            '... on Droid': {\n              '@fields': ['name']\n            }\n          },\n          {\n            '... on Starship': {\n              '@fields': ['name']\n            }\n          }\n        ]\n      }\n    }\n\n    print (GqlFromStruct.from_struct(struct))\n\nOutput:\n\n::\n\n    query{\n            search(\n                text : an\n                ){\n                    __typename\n                    ... on Human{\n                            name\n                        }\n                    ... on Droid{\n                            name\n                        }\n                    ... on Starship{\n                            name\n                        }\n                }\n        }\n\n\n.. |Release| image:: https://img.shields.io/github/v/release/artamonoviv/graphql-from-struct.svg\n   :target: https://github.com/artamonoviv/graphql-from-struct/releases\n.. |Code Coverage| image:: https://codecov.io/gh/artamonoviv/graphql-from-struct/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/artamonoviv/graphql-from-struct\n.. |Build Status Travis CI| image:: https://travis-ci.org/artamonoviv/graphql-from-struct.svg?branch=master\n    :target: https://travis-ci.org/artamonoviv/graphql-from-struct\n.. |Blog| image:: https://img.shields.io/badge/site-my%20blog-yellow.svg\n    :target:  https://artamonoviv.ru\n.. |License| image:: https://img.shields.io/badge/License-MIT-yellow.svg\n    :target:  https://opensource.org/licenses/MIT\n.. |Docs| image:: https://readthedocs.org/projects/graphql-from-struct/badge/?version=latest&style=flat\n    :target:  https://graphql-from-struct.readthedocs.io/en/latest/\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/artamonoviv/graphql-from-struct",
    "keywords": "graphql client dict structure struct web",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphql-from-struct",
    "package_url": "https://pypi.org/project/graphql-from-struct/",
    "platform": "any",
    "project_url": "https://pypi.org/project/graphql-from-struct/",
    "project_urls": {
      "Homepage": "https://github.com/artamonoviv/graphql-from-struct"
    },
    "release_url": "https://pypi.org/project/graphql-from-struct/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Makes a GraphQL query from Python data structures.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10804811,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1815896dde414294041002daccf81add2f29d573a8bbf6c87d043eb25b93f75",
          "md5": "fb3ec6ec71fbf5aba16b9772dc7a7cd3",
          "sha256": "0b6d858ed0ba2df99456a425632327aad028305e980b788293a695e843d740d9"
        },
        "downloads": -1,
        "filename": "graphql_from_struct-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb3ec6ec71fbf5aba16b9772dc7a7cd3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">= 3.6",
        "size": 7158,
        "upload_time": "2020-09-09T13:48:18",
        "upload_time_iso_8601": "2020-09-09T13:48:18.019133Z",
        "url": "https://files.pythonhosted.org/packages/f1/81/5896dde414294041002daccf81add2f29d573a8bbf6c87d043eb25b93f75/graphql_from_struct-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58185fcde9c153cfe50393027976a7f91ba281751ee7e58200e195c6f6e9369f",
          "md5": "afdd23acc1e353508f91bb5cd7c80f0d",
          "sha256": "e98bbcd2ae619e063c3b94d6a8716df708a52e5664330b21de98b1b27b6186c0"
        },
        "downloads": -1,
        "filename": "graphql-from-struct-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "afdd23acc1e353508f91bb5cd7c80f0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 12004,
        "upload_time": "2020-09-09T13:48:20",
        "upload_time_iso_8601": "2020-09-09T13:48:20.572874Z",
        "url": "https://files.pythonhosted.org/packages/58/18/5fcde9c153cfe50393027976a7f91ba281751ee7e58200e195c6f6e9369f/graphql-from-struct-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2356580642e9cf6bb3e3c071074c50dbfe396279c3928bc511968394e603378e",
          "md5": "af78aacbd92f6debb0091d5429a1f4a6",
          "sha256": "6b75f61c0d03579f081ffe8db354a633cdd27286d3874c5ed1f1cb018aa59035"
        },
        "downloads": -1,
        "filename": "graphql_from_struct-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af78aacbd92f6debb0091d5429a1f4a6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 7394,
        "upload_time": "2021-02-14T07:52:35",
        "upload_time_iso_8601": "2021-02-14T07:52:35.384759Z",
        "url": "https://files.pythonhosted.org/packages/23/56/580642e9cf6bb3e3c071074c50dbfe396279c3928bc511968394e603378e/graphql_from_struct-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9a54e975884e735d43323067c12ef0b232360207fffe5db59667e4b85c90818",
          "md5": "bffc4e89955fb12976be804866ad34de",
          "sha256": "288f3bcdd6f648c7601fae446f89093122ac443bac899d6b91ab4159b9bc210e"
        },
        "downloads": -1,
        "filename": "graphql-from-struct-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bffc4e89955fb12976be804866ad34de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12410,
        "upload_time": "2021-02-14T07:52:36",
        "upload_time_iso_8601": "2021-02-14T07:52:36.555819Z",
        "url": "https://files.pythonhosted.org/packages/f9/a5/4e975884e735d43323067c12ef0b232360207fffe5db59667e4b85c90818/graphql-from-struct-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bcec624a39a9311015c21b8e227f336585bba7c66ca2d72ae962ae1254e2b79",
          "md5": "204968280cbc2a05ca277a0f71743ea6",
          "sha256": "7b6c3b33936a42e566822ac9f20809250246dcf82645c4093d03b75ebc1f0d34"
        },
        "downloads": -1,
        "filename": "graphql_from_struct-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "204968280cbc2a05ca277a0f71743ea6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 7511,
        "upload_time": "2021-02-28T13:32:16",
        "upload_time_iso_8601": "2021-02-28T13:32:16.057606Z",
        "url": "https://files.pythonhosted.org/packages/8b/ce/c624a39a9311015c21b8e227f336585bba7c66ca2d72ae962ae1254e2b79/graphql_from_struct-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86596b58cdb9b2e3c5bd9c95766adab81061044c2d242ac8a1a671696b249ec7",
          "md5": "5fb57b12bf18a6525fc51f680455a630",
          "sha256": "d1923da9f88529d247649b8f0e1e2826e5974819e75b9a68f114dcc7b957257c"
        },
        "downloads": -1,
        "filename": "graphql-from-struct-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5fb57b12bf18a6525fc51f680455a630",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12611,
        "upload_time": "2021-02-28T13:32:17",
        "upload_time_iso_8601": "2021-02-28T13:32:17.431427Z",
        "url": "https://files.pythonhosted.org/packages/86/59/6b58cdb9b2e3c5bd9c95766adab81061044c2d242ac8a1a671696b249ec7/graphql-from-struct-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3128cb43237d45ed9336076b3195a70a7a15a13a8a7c282954b49b37f876e8d",
          "md5": "f884941256083493d618b67db4a0c809",
          "sha256": "34e6519ffef8009ce629f5a0f73df7ce544640786a40295855b58ef5d4cca2df"
        },
        "downloads": -1,
        "filename": "graphql_from_struct-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f884941256083493d618b67db4a0c809",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 7529,
        "upload_time": "2021-07-02T05:29:49",
        "upload_time_iso_8601": "2021-07-02T05:29:49.489353Z",
        "url": "https://files.pythonhosted.org/packages/c3/12/8cb43237d45ed9336076b3195a70a7a15a13a8a7c282954b49b37f876e8d/graphql_from_struct-1.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "632f82d1513eb1a4445d3460e2e37ae441fffbe7159462a540756f4f5fa67449",
          "md5": "0c7d340aa29f583b8083919d2d43a678",
          "sha256": "adeea2a1c014b39e719668689f37eca6656e4d61590fe2305f8c2b9fd63b0a48"
        },
        "downloads": -1,
        "filename": "graphql-from-struct-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0c7d340aa29f583b8083919d2d43a678",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12627,
        "upload_time": "2021-07-02T05:29:51",
        "upload_time_iso_8601": "2021-07-02T05:29:51.017585Z",
        "url": "https://files.pythonhosted.org/packages/63/2f/82d1513eb1a4445d3460e2e37ae441fffbe7159462a540756f4f5fa67449/graphql-from-struct-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3128cb43237d45ed9336076b3195a70a7a15a13a8a7c282954b49b37f876e8d",
        "md5": "f884941256083493d618b67db4a0c809",
        "sha256": "34e6519ffef8009ce629f5a0f73df7ce544640786a40295855b58ef5d4cca2df"
      },
      "downloads": -1,
      "filename": "graphql_from_struct-1.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f884941256083493d618b67db4a0c809",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 7529,
      "upload_time": "2021-07-02T05:29:49",
      "upload_time_iso_8601": "2021-07-02T05:29:49.489353Z",
      "url": "https://files.pythonhosted.org/packages/c3/12/8cb43237d45ed9336076b3195a70a7a15a13a8a7c282954b49b37f876e8d/graphql_from_struct-1.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "632f82d1513eb1a4445d3460e2e37ae441fffbe7159462a540756f4f5fa67449",
        "md5": "0c7d340aa29f583b8083919d2d43a678",
        "sha256": "adeea2a1c014b39e719668689f37eca6656e4d61590fe2305f8c2b9fd63b0a48"
      },
      "downloads": -1,
      "filename": "graphql-from-struct-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0c7d340aa29f583b8083919d2d43a678",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12627,
      "upload_time": "2021-07-02T05:29:51",
      "upload_time_iso_8601": "2021-07-02T05:29:51.017585Z",
      "url": "https://files.pythonhosted.org/packages/63/2f/82d1513eb1a4445d3460e2e37ae441fffbe7159462a540756f4f5fa67449/graphql-from-struct-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}