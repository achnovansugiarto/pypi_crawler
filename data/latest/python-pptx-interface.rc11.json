{
  "info": {
    "author": "Nathanael JÃ¶hrmann",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "python_pptx_interface\n=====================\n.. image:: https://img.shields.io/pypi/v/python_pptx_interface.svg\n    :target: https://pypi.org/project/python_pptx_interface/\n\n.. image:: http://img.shields.io/:license-MIT-blue.svg?style=flat-square\n    :target: http://badges.MIT-license.org\n\n|\n\n.. figure:: https://github.com/natter1/python_pptx_interface/raw/master/docs/images/general_example_o1_title_slide.png\n    :width: 500pt\n\n|\n\n`python-pptx <https://github.com/scanny/python-pptx.git>`_ is a great module to create pptx-files.\nBut it can be challenging to master the complex syntax. This module tries to present an easier interface\nfor python-pptx to create PowerPoint files. It also adds some still missing features like moving slides,\ncreate links to other slides or remove unused place-holders. If matplotlib is installed, it can be used,\nto write formulas with latex syntax. And if PowerPoint is available, a presentation could be exported as\npdf or png(s).\n\nContent\n-------\n\n  * `class PPTXCreator <#class-pptxcreator>`__: Create pptx-File from template, incluing methods to add text, tables, figures etc.\n  * `class PPTXPosition <#class-pptxposition>`__: Allows positioning as fraction of slide height/width.\n  * `Style sheets <#style-sheets>`__\n     + `class PPTXFontStyle <#class-pptxfontstyle>`__: Helps to set/change/copy fonts.\n     + `class PPTXParagraphStyle <#class-pptxparagraphstyle>`__: Format paragraphs (alignment, indent ...).\n     + `class PPTXTableStyle <#class-pptxtablestyle>`__: Used to layout tables.\n     + `class PPTXFillStyle <#class-pptxfillstyle>`__\n  * `Working with templates <#working-with-templates>`__\n     + `class AbstractTemplate <#class-abstracttemplate>`__: Base class for all custom templates (enforce necessary attributes)\n     + `class TemplateExample <#class-templateexample>`__: Example class to show how to work with custom templates\n  * `utils.py <#utilspy>`__: A collection of useful functions, eg. to generate PDF or PNG from \\*.pptx (needs PowerPoint installed)\n  * `Examples <#example>`__: Collection of examples demonstrating how to use python-pptx-interface.\n     + `Example <#example>`__: demonstrates usage of some key-features of python-pptx-interface with explanations\n     + `General example 01 <#general-example-01>`__: demonstrates usage of some key-features of python-pptx-interface\n     + `Font style example 01 <#font-style-example-01>`__\n     + `Table style example 01 <#table-style-example-01>`__\n\n\nclass PPTXCreator\n-----------------\n\nThis class provides an easy interface to create a PowerPoint presentation via python-pptx. It has methods to add slides\nand shapes (tables, textboxes, matplotlib figures) setting format by using layouts and stylesheets. It also has methods\nto move slides around, remove empty placeholders or create hyperlinks.\n\n**Methods defined:**\n\n* add_content_slide\n    Add a content slide with hyperlinks to all other slides and puts it to position slide_index.\n* add_latex_formula\n    Add the given latex-like math-formula as an image to the presentation using matplotlib.\n* add_matplotlib_figure\n    Add a motplotlib figure to slide and position it via position.\n    Optional parameter zoom sets image scaling in PowerPoint. Only used if width not in kwargs (default = 1.0).\n* add_slide\n    Add a new slide to presentation. If no layout is given, default_layout is used.\n* add_table\n    Add a table shape with given table_data at position using table_style. (table_data: outer iter -> rows, inner iter cols; auto_merge: not implemented jet)\n* add_text_box\n    Add a text box with given text using given position and font. Uses self.default_position if no position is given.\n* add_title_slide\n    Add a new slide to presentation. If no layout is given, title_layout is used.\n* move_slide\n    Move the given slide to position new_index.\n* save\n    Save presentation under the given filename.\n* save_as_pdf\n    Save the presentation as pdf under the given filenmae. Needs PowerPoint installed.\n* save_as_png\n   Saves the presentation as PNG's in the given folder. Needs PowerPoint installed.\n\n**Static methods defined:**\n\n* create_hyperlink(run: pptx.text.text._Run, shape: pptx.shapes.autoshape.Shape, to_slide: pptx.slide.Slide)\n    Make the given run a hyperlink to to_slide.\n* remove_unpopulated_shapes(slide: pptx.slide.Slide)\n    Removes empty placeholders (e.g. due to layout) from slide. Further testing needed.\n\n**Properties defined:**\n\n* **prs**: python-pptx Presentation object\n* **slides**: list of all slides in presentation\n* **template**: used template file\n* **title_layout**: laxout used for title slide\n* **default_layout**: default layout\n* **default_position**: used, when no PPTXPosition is given to add_table/add_text_box/... methods\n\n\nclass PPTXPosition\n------------------\n\nTo position shapes in a slide, many methods of PPTXCreator except a PPTXPosition parameter. It allows to give a position\nrelative to slide width and high (as a fraction). Additionally you can specify the position in inches starting from the\nrelative position. Some stylesheets e.g. PPTXTableStyle can also have an optional PPTXPosition attribute. In that case\nwriting the style to a shape will also set its position.\n\n**Methods defined:**\n\n* dict\n    Returns a kwargs dict containing \"left\" and \"top\".\n* tuple\n    Returns an args tuple containing \"left\" and \"top\".\n\n**Properties defined:**\n\n* **left**: left position [inches] starting from rel_left\n* **left_rel**: distance from slide left (relative to slide width)\n* **prs**: python-pptx Presentation object\n* **top**: top position [inches] starting from rel_top\n* **top_rel**: distance from slide top (relative to slide height)\n\nStylesheets\n-----------\nWhile python-pptx-interface can load a template file with placeholders, the intended use case is more focused on\ncreating and positioning shapes like tables, pictures, textboxes etc. directly in python. Therefore all unused\nplaceholders are removed by default, when creating a new slide. As it can be quite tedious to do all the necessary\nformatting directly using python-pptx, this package provides some style sheet like classes, to define a certain format\nand than \"write\" it to the created shapes. In general python-pptx-interface styles only change parameters, that\nhave been set. E.g. when creating a PPTXFontStyle instance and setting the font size, using this style will only\nchange the font size, but not color, bold ... attributes. Beside setting an attribute or not changing an attribute\nthere is a third case - using the default value as it is defined e.g. in the master slide. For that case, the value\n**_USE_DEFAULT** can be used.\n\n**To be consistent, python-pptx-interface will not change anything if an attribute is set to None.\nThis can differ from the pyrhon-pptx behaviour in some cases, where None means \"use default\".**\n\nclass PPTXFontStyle\n~~~~~~~~~~~~~~~~~~~\n`font-style example <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/font_style_example_01.py>`_\n\n**Methods defined:**\n\n* read_font\n    Read attributes from a pptx.text.text.Font object.\n* set\n    Convenience method to set several font attributes together.\n* write_font\n    Write attributes to a pptx.text.text.Font object.\n* write_paragraph\n    Write attributes to given paragraph.\n* write_run\n    Write attributes to given run.\n* write_shape\n    Write attributes to all paragraphs in given pptx.shapes.autoshape.Shape.\n    Raises TypeError if given shape has no text_frame or table.\n* write_text_frame\n    Write attributes to all paragraphs in given text_frame.\n\n**Properties defined:**\n\n* **bold**\n* **caps**\n* **color_rgb**\n* **fill_style**\n* **italic**\n* **underline**\n* **size**\n* **strikethrough**\n\n\n\nclass PPTXParagraphStyle\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n`paragraph-style example <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/paragraph_style_example_01.py>`_,\n\n**Methods defined:**\n\n* read_paragraph\n    Read attributes from a _Paragraph object.\n* set\n    Convenience method to set several paragraph attributes together.\n* write_paragraph\n    Write attributes to given paragraph.\n* write_shape\n    Write attributes to all paragraphs in given pptx.shapes.autoshape.Shape.\n    Raises TypeError if given shape has no text_frame or table.\n* write_text_frame\n    Write attributes to all paragraphs in given text_frame.\n\n**Properties defined:**\n\n* **alignment**\n* **font_style**\n* **level**\n* **line_spacing**\n* **space_after**\n* **space_before**\n\n\nclass PPTXTableStyle\n~~~~~~~~~~~~~~~~~~~~\n`table-style example <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/table_style_example_01.py>`_,\n\n**Methods defined:**\n\n* read_table\n    Read attributes from a Table object, ignoring font and cell style.\n* set\n    Convenience method to set several table attributes together.\n* set_width_as_fraction\n    Set table width as fraction of slide width.\n* write_shape\n    \"\"\"Write attributes to table in given pptx.shapes.autoshape.Shape.\"\"\"\n    Raises TypeError if given shape has no text_frame or table.\n* write_table\n    \"\"\"Write attributes to table object.\"\"\"\n\n**Properties defined:**\n\n* **cell_style**\n* **col_banding**\n* **col_ratios**\n* **first_row_header**\n* **font_style**\n* **line_spacing**\n* **position**\n* **row_banding**\n* **space_after**\n* **space_before**\n* **width**\n\n\nclass PPTXFillStyle\n~~~~~~~~~~~~~~~~~~~\n\n...\n\n**Methods defined:**\n\n* set\n    Convenience method to set several fill attributes together.\n* write_fill\n    Write attributes to a FillFormat object.\n\n**Properties defined:**\n\n* **fill_type**\n* **fore_color_rgb**\n* **fore_color_mso_theme**\n* **fore_color_brightness**\n* **back_color_rgb**\n* **back_color_mso_theme**\n* **back_color_brightness**\n* **pattern**\n\n\nWorking with templates\n----------------------\n\n...\n\nclass AbstractTemplate\n~~~~~~~~~~~~~~~~~~~~~~\n\n...\n\nclass TemplateExample\n~~~~~~~~~~~~~~~~~~~~~\n\n...\n\nutils.py\n~~~~~~~~\n\n...\n\n\nExamples\n--------\n\nExample\n~~~~~~~\n\n.. figure:: https://github.com/natter1/python_pptx_interface/raw/master/docs/images/example01_title_slide.png\n    :width: 500pt\n\n|\n\nThis module comes with a\n`general example <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/general_example_01.py>`_,\nthat you could run like\n\n.. code:: python\n\n    from pptx_tools.examples import general_example_01 as example\n\n    example.run(save_dir=my_dir)  # you have to specify the folder where to save the presentation\n\nThis will create an example.pptx, using some of the key-features of python-pptx-interface. Lets have a closer look:\n\n|\n\n.. code:: python\n\n    from pptx_tools.creator import PPTXCreator, PPTXPosition\n    from pptx_tools.style_sheets import font_title, font_default\n    from pptx_tools.templates import TemplateExample\n\n    from pptx.enum.lang import MSO_LANGUAGE_ID\n    from pptx.enum.text import MSO_TEXT_UNDERLINE_TYPE\n\n    try:\n        import matplotlib.pyplot as plt\n        matplotlib_installed = True\n    except ImportError as e:\n        matplotlib_installed = False\n\nFirst we need to import some stuff. **PPTXCreator** is the class used to create a \\*.pptx file.\n**PPTXPosition** allows as to position shapes in more intuitive units of slide width/height.\n**font_title** is a function returning a PPTXFontStyle instance. We will use it to change the formatting of the title shape.\n**TemplateExample** is a class providing access to the example-template.pptx included in python-pptx-interface\nand also setting some texts on the master slides like author, date and website. You could use it as reference\non how to use your own template files by subclassing AbstractTemplate\n(you need at least to specify a path to your template and define a default_layout and a title_layout).\n\n**MSO_LANGUAGE_ID** is used to set the language of text and **MSO_TEXT_UNDERLINE_TYPE** is used to format underlining.\n\nImporting matplotlib is optional - it is used to demonstrate, how to get a matplotlib figure into your presentation.\n\n|\n|\n\n.. code:: python\n\n    def run(save_dir: str):\n        pp = PPTXCreator(TemplateExample())\n\n        PPTXFontStyle.lanaguage_id = MSO_LANGUAGE_ID.ENGLISH_UK\n        PPTXFontStyle.name = \"Roboto\"\n\n        title_slide = pp.add_title_slide(\"Example presentation\")\n        font = font_title()  # returns a PPTXFontStyle instance with bold font and size = 32 Pt\n        font.write_shape(title_slide.shapes.title)  # change font attributes for all paragraphs in shape\n\nNow we create our presentation with **PPTXCreator** using the **TemplateExample**.\nWe also set the default font language and name of all **PPTXFontStyle** instances. This is not necessary,\nas *ENGLISH_UK* and *Roboto* are the defaults anyway. But in principle you could change these settings here,\nto fit your needs. If you create your own template class, you might also set these default parameters there.\nFinally we add a title slide and change the font style of the title using title_font().\n\n|\n|\n\n.. code:: python\n\n        slide2 = pp.add_slide(\"page2\")\n        pp.add_slide(\"page3\")\n        pp.add_slide(\"page4\")\n        content_slide = pp.add_content_slide()  # add slide with hyperlinks to all other slides\n\nNext, we add three slides, and create a content slide with hyperlinks to all other slides. By default,\nit is put to the second position (you could specify the position using the optional slide_index parameter).\n\n.. figure:: https://github.com/natter1/python_pptx_interface/raw/master/docs/images/example01_content_slide.png\n    :width: 500pt\n\n|\n|\n\nLets add some more stuff to the title slide.\n\n.. code:: python\n\n    text = \"This text has three paragraphs. This is the first.\\n\" \\\n           \"Das ist der zweite ...\\n\" \\\n           \"... and the third.\"\n    my_font = font_default()  # font size 14\n    my_font.size = 16\n    text_shape = pp.add_text_box(title_slide, text, PPTXPosition(0.02, 0.24), my_font)\n\n**PPTXCreator.add_text_box()** places a new text shape on a slide with the given text.\nOptionally it accepts a PPTXPosition and a PPTXFont. With PPTXPosition(0.02, 0.24)\nwe position the figure 0.02 slide widths from left and 0.24 slide heights from top.\n\n|\n|\n\n.. code:: python\n\n    my_font.set(size=22, bold=True, language_id=MSO_LANGUAGE_ID.GERMAN)\n    my_font.write_paragraph(text_shape.text_frame.paragraphs[1])\n\n    my_font.set(size=18, bold=False, italic=True, name=\"Vivaldi\",\n                language_id=MSO_LANGUAGE_ID.ENGLISH_UK,\n                underline=MSO_TEXT_UNDERLINE_TYPE.WAVY_DOUBLE_LINE)\n    my_font.write_paragraph(text_shape.text_frame.paragraphs[2])\n\nWe can use my_font to format individual paragraphs in a text_frame with **PPTXFontStyle.write_paragraph()**.\nVia **PPTXFontStyle.set()** easily customize the font before using it.\n\n|\n|\n\n.. code:: python\n\n        table_data = []\n        table_data.append([1, 2])  # rows can have different length\n        table_data.append([4, slide2, 6])  # there is specific type needed for entries (implemented as text=f\"{entry}\")\n        table_data.append([\"\", 8, 9])\n\n        pp.add_table(slide2, table_data)\n\nwe can also easily add a table. First we define all the data we want to put in the table. Here we use a list of lists.\nBut add_table is more flexible and can work with anything, that is an Iterable of Iterable. The outer iterable defines,\nhow many rows the table will have. The longest inner iterable is used to get the number of columns.\n\n|\n|\n\n.. code:: python\n\n        if matplotlib_installed:\n            fig = create_demo_figure()\n            pp.add_matplotlib_figure(fig, title_slide, PPTXPosition(0.3, 0.4))\n            pp.add_matplotlib_figure(fig, title_slide, PPTXPosition(0.3, 0.4, fig.get_figwidth(), -1.0), zoom=0.4)\n            pp.add_matplotlib_figure(fig, title_slide, PPTXPosition(0.3, 0.4, fig.get_figwidth(), 0.0), zoom=0.5)\n            pp.add_matplotlib_figure(fig, title_slide, PPTXPosition(0.3, 0.4, fig.get_figwidth(), 1.5), zoom=0.6)\n\n\nIf matplotlib is installed, we use it to create a demo figure, and add it to the title_slide.\nWith PPTXPosition(0.3, 0.4) we position the figure 0.3 slide widths from left and 0.4 slide heights from top.\nPPTXPosition has two more optional parameters, to further position with inches values (starting from the relative position).\n\n|\n|\n\n.. code:: python\n\n        pp.save(os.path.join(save_dir, \"example.pptx\"))\n\nFinally, we save the example as example.pptx.\n\n|\n|\n\nIf you are on windows an have PowerPoint installed, you could use some additional features.\n\n.. code:: python\n\n    try:  # only on Windows with PowerPoint installed:\n        filename_pptx = os.path.join(save_dir, \"example.pptx\")\n        filename_pdf = os.path.join(save_dir, \"example.pdf\")\n        foldername_png = os.path.join(save_dir, \"example_pngs\")\n\n        # use absolute path, because its not clear where PowerPoint saves PDF/PNG ... otherwise\n        pp.save(filename_pptx, create_pdf=True)  # saves your pptx-file and also creates a PDF file\n        pp.save_as_pdf(filename_pdf, overwrite=True)  # saves presentation as PDF\n        pp.save_as_png(foldername_png, overwrite_folder=True)  # creates folder with PNGs of slides\n    except Exception as e:\n        print(e)\n\nGeneral example 01\n~~~~~~~~~~~~~~~~~~\n`general example 01 <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/general_example_01.py>`_\n\nFont style example 01\n~~~~~~~~~~~~~~~~~~~~~\n`font style example 01 <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/font_style_example_01.py>`_\n\nTable style example 01\n~~~~~~~~~~~~~~~~~~~~~~\n`table style example 01 <https://github.com/natter1/python_pptx_interface/blob/master/pptx_tools/examples/table_style_example_01.py>`_\n\nRequirements\n------------\n* Python >= 3.6 (f-strings)\n* python-pptx\n\nOptional requirements\n---------------------\n* matplotlib (adding matplotlib figures to presentation)\n* comtypes  (create PDF's or PNG's)\n* PowerPoint (create PDF's or PNG's)\n\nContribution\n------------\nHelp with this project is welcome. You could report bugs or ask for improvements by creating a new issue.\n\nIf you want to contribute code, here are some additional notes:\n\n* This project uses 120 characters per line.\n* Try to avoid abbreviations in names for functions or variables.\n* Use type hints.\n* Use Slide objects instead of IDs or index values as function parameter.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/natter1/python_pptx_interface.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-pptx-interface",
    "package_url": "https://pypi.org/project/python-pptx-interface/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-pptx-interface/",
    "project_urls": {
      "Homepage": "https://github.com/natter1/python_pptx_interface.git"
    },
    "release_url": "https://pypi.org/project/python-pptx-interface/0.0.12/",
    "requires_dist": [
      "python-pptx"
    ],
    "requires_python": "",
    "summary": "Easy interface to create pptx-files using python-pptx",
    "version": "0.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7968924,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68d776d46ded1b61c24eed4de2420b42347423f957cf8a6bb51dccaa4670b8e9",
          "md5": "15370344aa3c0dac57833be69dcd3486",
          "sha256": "6c86518c6904e056272afc7316f841fb9cf3a5e0e121c1a038d33891ab8fa0ce"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15370344aa3c0dac57833be69dcd3486",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9375,
        "upload_time": "2020-01-15T15:17:51",
        "upload_time_iso_8601": "2020-01-15T15:17:51.423932Z",
        "url": "https://files.pythonhosted.org/packages/68/d7/76d46ded1b61c24eed4de2420b42347423f957cf8a6bb51dccaa4670b8e9/python_pptx_interface-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "505239fe2456631c68d1ebfb5cea78ee761e60334cae1288eb091243014f1c50",
          "md5": "4b3a460f2893f998ff3b576e28067d77",
          "sha256": "10cd681e8c026b9a33691f43026b822c1414644f8bba4edda5cf3b175666a498"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b3a460f2893f998ff3b576e28067d77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1885763,
        "upload_time": "2020-02-15T22:15:57",
        "upload_time_iso_8601": "2020-02-15T22:15:57.126233Z",
        "url": "https://files.pythonhosted.org/packages/50/52/39fe2456631c68d1ebfb5cea78ee761e60334cae1288eb091243014f1c50/python_pptx_interface-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a02cfa72c6ac481781fdbac51d9991b8ba4dab518edce368dd4d58b1c9ea1c8",
          "md5": "d4280cdcfff2330e1d10bf63af773995",
          "sha256": "2d365fee00fb409dde4f510a3ef124f76d175a52c86a74f42981c0616e38e5f4"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4280cdcfff2330e1d10bf63af773995",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2022648,
        "upload_time": "2020-08-15T21:29:38",
        "upload_time_iso_8601": "2020-08-15T21:29:38.139710Z",
        "url": "https://files.pythonhosted.org/packages/9a/02/cfa72c6ac481781fdbac51d9991b8ba4dab518edce368dd4d58b1c9ea1c8/python_pptx_interface-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac043255286bdcab817641cb362de8d2fcd59f0f7d8250d5993fa03df1a07812",
          "md5": "7157687d3849bf201860f159127fb13b",
          "sha256": "0dd1d76cac957ed506fe5cf7556d19a8baff3555ba434c7a02e1cff682212539"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7157687d3849bf201860f159127fb13b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1868406,
        "upload_time": "2020-01-15T17:18:45",
        "upload_time_iso_8601": "2020-01-15T17:18:45.522783Z",
        "url": "https://files.pythonhosted.org/packages/ac/04/3255286bdcab817641cb362de8d2fcd59f0f7d8250d5993fa03df1a07812/python_pptx_interface-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d59b49a9d065cbc0f010a55844990b04ade3616f920ed7ad8c7781e2398ae47",
          "md5": "0bc02950413998496f5b19da5939d484",
          "sha256": "decbd976d0fa6bb91547020281ec638071e798e29fb47f18bf4ed96191fc72a1"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0bc02950413998496f5b19da5939d484",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1873959,
        "upload_time": "2020-01-17T21:17:56",
        "upload_time_iso_8601": "2020-01-17T21:17:56.767000Z",
        "url": "https://files.pythonhosted.org/packages/4d/59/b49a9d065cbc0f010a55844990b04ade3616f920ed7ad8c7781e2398ae47/python_pptx_interface-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "829548a44e5b691a9324735bb20cd8939052692b70b0e56a789e5d6bc9b778e8",
          "md5": "7c169b94ac1c31d87002364354db8c85",
          "sha256": "7cfcfd2b05dedb4a2c1e2713ada41694fe17a38c17e925a211b043f0756ad13c"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c169b94ac1c31d87002364354db8c85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1876321,
        "upload_time": "2020-01-19T00:25:09",
        "upload_time_iso_8601": "2020-01-19T00:25:09.774250Z",
        "url": "https://files.pythonhosted.org/packages/82/95/48a44e5b691a9324735bb20cd8939052692b70b0e56a789e5d6bc9b778e8/python_pptx_interface-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51e0d1ce69370daafd60d21f4184276746425f0789cedc986a262ac1858053b6",
          "md5": "aeb84271488e8414bebaa1e80ed39b0f",
          "sha256": "41f1004446d3ba36d3779272028aacd4fd5b1db42837f016b527890e2c41dbfa"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aeb84271488e8414bebaa1e80ed39b0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1876892,
        "upload_time": "2020-01-19T22:59:18",
        "upload_time_iso_8601": "2020-01-19T22:59:18.456818Z",
        "url": "https://files.pythonhosted.org/packages/51/e0/d1ce69370daafd60d21f4184276746425f0789cedc986a262ac1858053b6/python_pptx_interface-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec26c0a115141ac6d358d8d775d500ba543cc76d8dda8ffa5b8d6770f847218d",
          "md5": "33580cba47bf451810761fa10ed26de2",
          "sha256": "efbadca68b87f7c9030dc109b821c3005ce2481a9633b587c5b01707d4f3ae60"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33580cba47bf451810761fa10ed26de2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1878823,
        "upload_time": "2020-01-28T19:55:31",
        "upload_time_iso_8601": "2020-01-28T19:55:31.625184Z",
        "url": "https://files.pythonhosted.org/packages/ec/26/c0a115141ac6d358d8d775d500ba543cc76d8dda8ffa5b8d6770f847218d/python_pptx_interface-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c662eec37661e64d828e5e797112ea50b57faafc18a0b1cec70b7abeff6dc35",
          "md5": "c3d5d2551c5fcc34d111e4a24392f1b6",
          "sha256": "7ba060b405837a2a5931ba9ff47c569baa9e7e9519fd731790dcfbd6f8f01577"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3d5d2551c5fcc34d111e4a24392f1b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1880828,
        "upload_time": "2020-01-29T18:12:22",
        "upload_time_iso_8601": "2020-01-29T18:12:22.057060Z",
        "url": "https://files.pythonhosted.org/packages/8c/66/2eec37661e64d828e5e797112ea50b57faafc18a0b1cec70b7abeff6dc35/python_pptx_interface-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9aa8b0ff7998005f025ff6abe21d09cf57d1e99caa673f83bdab48ec60ed0f4",
          "md5": "eba5007ddcb9cf0660b01e6b2f350bca",
          "sha256": "b771bdd56d9544e9c4644a492fdfbdc210775e689a9bf530dbbc80e1b5e07dbb"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eba5007ddcb9cf0660b01e6b2f350bca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1880830,
        "upload_time": "2020-02-02T01:40:40",
        "upload_time_iso_8601": "2020-02-02T01:40:40.268046Z",
        "url": "https://files.pythonhosted.org/packages/a9/aa/8b0ff7998005f025ff6abe21d09cf57d1e99caa673f83bdab48ec60ed0f4/python_pptx_interface-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22411fa6d6c72c44d34719abe66280a55c8a204f8b954db2810637d00e6d5fdd",
          "md5": "4259bcbb3fc0e3214da4835cbd4b78e8",
          "sha256": "6f003aa4e073ee32d856d02f9f6257a22ef495d14d1e535a4df3714cec50038f"
        },
        "downloads": -1,
        "filename": "python_pptx_interface-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4259bcbb3fc0e3214da4835cbd4b78e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1884966,
        "upload_time": "2020-02-11T13:23:32",
        "upload_time_iso_8601": "2020-02-11T13:23:32.457848Z",
        "url": "https://files.pythonhosted.org/packages/22/41/1fa6d6c72c44d34719abe66280a55c8a204f8b954db2810637d00e6d5fdd/python_pptx_interface-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a02cfa72c6ac481781fdbac51d9991b8ba4dab518edce368dd4d58b1c9ea1c8",
        "md5": "d4280cdcfff2330e1d10bf63af773995",
        "sha256": "2d365fee00fb409dde4f510a3ef124f76d175a52c86a74f42981c0616e38e5f4"
      },
      "downloads": -1,
      "filename": "python_pptx_interface-0.0.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d4280cdcfff2330e1d10bf63af773995",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 2022648,
      "upload_time": "2020-08-15T21:29:38",
      "upload_time_iso_8601": "2020-08-15T21:29:38.139710Z",
      "url": "https://files.pythonhosted.org/packages/9a/02/cfa72c6ac481781fdbac51d9991b8ba4dab518edce368dd4d58b1c9ea1c8/python_pptx_interface-0.0.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}