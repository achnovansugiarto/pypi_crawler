{
  "info": {
    "author": "Nate Brooks",
    "author_email": "nateonguitar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Installation\n\n```\npip install frolic-engine\n```\n\n# Creating a basic game\n\nCreate a class that inherits from `Game`, provide an `__init__()` and call `super().__init__()`.\nOverriding `update()` and `draw()` are required.\n```python\nimport datetime\nfrom frolic import Game\n\nclass TestGame(Game):\n    def __init__(self):\n        super().__init__()\n\n    def update(self, deltatime: datetime.timedelta):\n        # deltatime is the time since the previous update call\n        # deltatime.total_seconds() is a floating point\n        pass\n\n    def draw(self)\n        # must call super\n        super().draw()\n```\n\n\nLaunch the game by calling the game's `run()` function.\nThis example so far will just produce an empty screen.\n```python\nfrom frolic import Game\n\nclass TestGame(Game):\n    . . .\n\ngame = TestGame()\ngame.run()\n```\n\n\nHandling inputs.\nNotice the `keyboard` import.\n```python\nfrom frolic import Game\nfrom pynput import keyboard\n\nclass TestGame(Game):\n    def __init__(self):\n        super().__init__()\n        self.set_on_keydown(self.on_key_down)\n\n    def on_key_down(self, key: keyboard.Key):\n        character_key = hasattr(key, 'char')\n\n        # will show how to use character keys later\n        if character_key:\n            pass\n\n        # non character keys, like Shift or Ctrl\n        else:\n            # on escape kill the game\n            if key == keyboard.Key.esc:\n                # end_game() is inherited from frolic.Game\n                self.end_game()\n                return\n```\n\nTo draw characters/symbols to the screen override the `draw()` function.\n`self.screen` is a `Screen` object that represents the current frame.\nSet values on the screen to have them show up in the console.\n\n```python\nfrom frolic import Game, Matrix, Vector2\nclass TestGame(Game):\n    . . .\n\n    def draw(self):\n        # call screen.set() to put a character at a given x, y coordinate\n        self.screen.set(x=0, y=0, '#')\n\n        # draw a matrix at a given position by calling screen.draw_matrix()\n        position = Vector2(3, 3)\n        matrix = Matrix([\n            ['#', '#', '#'],\n            ['#', '0', '#'],\n            ['#', '#', '#'],\n        ])\n        self.screen.draw_matrix(matrix, position)\n\n        # Matrix also has a convenient way of making a simple matrix by using Matrix.empty_sized():\n        #     the following produces:\n        #         ['X', 'X']\n        #         ['X', 'X']\n        #         ['X', 'X']\n        matrix2 = Matrix.empty_sized(rows=3, columns=2, value='▢')\n\n        # Note: Matrices are anchored at the top left corner,\n        #       so drawing matrix2 at position Vector2(x=1, y=1)\n        #       will produce this screen:\n        self.screen.draw_matrix(matrix2, Vector2(x=1, y=1))\n        # [' ', ' ', ' ', ' ', ' ', ' ', ' ']\n        # [' ', 'X', 'X', ' ', ' ', ' ', ' ']\n        # [' ', 'X', 'X', ' ', ' ', ' ', ' ']\n        # [' ', 'X', 'X', ' ', ' ', ' ', ' ']\n        # [' ', ' ', ' ', ' ', ' ', ' ', ' ']\n        # [' ', ' ', ' ', ' ', ' ', ' ', ' ']\n\n        # call super and the Game will handle applying this frame's \"screen\" to the console window\n        super().draw()\n```\n\n\nInstances of `GameObject` are a convenience class to represent objects in the game.\nThey have a `matrix` that is of type `Matrix` and a `position` that is of type `Vector2`.\n```python\nfrom frolic import Game, GameObject, Matrix, Vector2\nfrom pynput import keyboard\n\nclass Player(GameObject):\n    def __init__(self):\n        super().__init__()\n        self.position = Vector2(x=5, y=0)\n        self.matrix = Matrix.empty_sized(rows=3, columns=2, value='0')\n        # self.size is a Vector2 getter representing the size of the current matrix,\n        # so in this example self.size.x == 2 because self.matrix has 2 columns\n    def moveLeft():\n        self.position.x -= 1\n    def moveRight():\n        self.position.x += 1\n\nclass TestGame(Game):\n    def __init__(self):\n        super().__init__()\n        self.player = Player()\n        self.set_on_keydown(self.on_key_down)\n\n    . . .\n\n    def on_key_down(self, key: keyboard.Key):\n        character_key = hasattr(key, 'char')\n        if character_key:\n            if key.char == 'a':\n                if self.player.position.x > 0:\n                    self.player.moveLeft()\n                return\n            if key.char == 'd':\n                if self.player.position.x < 10:\n                    self.player.moveRight()\n                return\n        else:\n            if key == keyboard.Key.esc:\n                self.end_game()\n                return\n\n    def draw(self):\n        self.screen.draw_matrix(self.player.matrix, self.player.position)\n        super().draw()\n```\n\n\nAnother convenience is the `MatrixBorder` class, it creates a copy of the given matrix with a border on it.\n`MatrixBorder` has a default border of `SINGLE_LINE_THIN` but also has `SINGLE_LINE_THICK` and `DOUBLE_LINE`\n```\nborder = MatrixBorder(sides=MatrixBorder.DOUBLE_LINE)\n        °°°°°        ╔═══╗\n        °°°°°        ║°°°║\ninput   °°A°° output ║°A°║\n        °°°°°        ║°°°║\n        °°°°°        ╚═══╝\n```\n\nBorders other than the provided side-characters can also be used:\n\n```\nborder = MatrixBorder(sides={\n    'top': 'X',\n    'top_left': 'X',\n    'top_right': 'X',\n    'left': 'X',\n    'right': 'X',\n    'bottom': 'X',\n    'bottom_left': 'X',\n    'bottom_right': 'X',\n})\n        °°°°°        XXXXX\n        °°°°°        X°°°X\ninput   °°A°° output X°A°X\n        °°°°°        X°°°X\n        °°°°°        XXXXX\n```\n\n```python\nclass Card(GameObject):\n    def __init__(self):\n        super().__init__()\n        self.position = Vector2(x=2, y=1)\n        _matrix = Matrix.empty_sized(rows=6, columns=6, value=' ')\n        _matrix[1][1] = '2'\n        # ♤ ♡ ♧ ♢\n        _matrix[2][1] = '♤'\n        border = MatrixBorder() # default to single thin line\n        self.matrix = _matrix.with_border(border)\n```\n\n# Examples\n\nA simple example to copy/paste: [example_game.py](example_game.py)\n\nAnother simple game that creates a viewport (for a game like zelda) [example_game_viewport.py](example_game_viewport.py)\n\nA more fleshed out full Tetris example:\n[FrolicEngineTetris](https://github.com/nateonguitar/FrolicEngineTetris)\nBundle-Breaker (a match 3 game):\n[FrolicEngineBundleBreaker](https://github.com/nateonguitar/FrolicEngineBundleBreaker)\n\n# Developing Frolic Engine\n\nClone this project\n```\ngit clone <url for this project>\n```\n\nCreate a virtual environment [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html) and activate it\n```\n# windows:\n.\\venv\\Scripts\\activate\n\n# linux:\n./venv/bin/activate\n```\n\n\nInstall this package into venv\n```\npip install .\n```\n\nStart developing by modifying the `example_game.py` or create some tests.\nRemember that this README's examples very closely follow `example_game.py` so changes there should reflect here in this README.\n```\npython example_game.py\npython tests/border.py\npython tests/matrix.py\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nateonguitar/FrolicEngine",
    "keywords": "game games engine text based frolic",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "frolic-engine",
    "package_url": "https://pypi.org/project/frolic-engine/",
    "platform": "",
    "project_url": "https://pypi.org/project/frolic-engine/",
    "project_urls": {
      "Homepage": "https://github.com/nateonguitar/FrolicEngine"
    },
    "release_url": "https://pypi.org/project/frolic-engine/1.0.2/",
    "requires_dist": [
      "pynput",
      "numpy",
      "colorama"
    ],
    "requires_python": "",
    "summary": "A game engine that lets you write text/ansii based games, targets 60fps.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10639202,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a42b0df61960401ef4dbcb1a5297928929f33a4cc6e771ba16d6097e7dfd8040",
          "md5": "bf92ae4be38d7a8a481fa0fe4b4d4adc",
          "sha256": "5ce2dab521e50f01ffdfc59ec5124a0cc7236de27290b71be91f91204fccd5e0"
        },
        "downloads": -1,
        "filename": "frolic_engine-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf92ae4be38d7a8a481fa0fe4b4d4adc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14235,
        "upload_time": "2021-06-14T02:13:56",
        "upload_time_iso_8601": "2021-06-14T02:13:56.660241Z",
        "url": "https://files.pythonhosted.org/packages/a4/2b/0df61960401ef4dbcb1a5297928929f33a4cc6e771ba16d6097e7dfd8040/frolic_engine-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f081376f7c7a62d5b52db12bb28b2005b0c1b06725f29babd1a8ff0b80b5863",
          "md5": "7d4ff3b677769368c7317aefa033ae0d",
          "sha256": "7f38e423cb2aa403ffe6069963120a4ae3b534e7391506bbb3357d9dde4def19"
        },
        "downloads": -1,
        "filename": "frolic-engine-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d4ff3b677769368c7317aefa033ae0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14633,
        "upload_time": "2021-06-14T02:13:58",
        "upload_time_iso_8601": "2021-06-14T02:13:58.177091Z",
        "url": "https://files.pythonhosted.org/packages/8f/08/1376f7c7a62d5b52db12bb28b2005b0c1b06725f29babd1a8ff0b80b5863/frolic-engine-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ae6621b98d8a9958456721236fe32ae6730f23cfa7761b8623ff47a32fe5557",
          "md5": "8ebf9755d94b415a925f25e3d483a5a8",
          "sha256": "af8a0219bb56a75a2a01fd199e66e4d04a630908cac2cf1d02ac1bb9cbcd6d9e"
        },
        "downloads": -1,
        "filename": "frolic_engine-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ebf9755d94b415a925f25e3d483a5a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14176,
        "upload_time": "2021-06-14T02:20:38",
        "upload_time_iso_8601": "2021-06-14T02:20:38.671351Z",
        "url": "https://files.pythonhosted.org/packages/5a/e6/621b98d8a9958456721236fe32ae6730f23cfa7761b8623ff47a32fe5557/frolic_engine-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ace03352e164cdc7d54737676f606c762c347de2eaf50daa7a45095e328fc1de",
          "md5": "97d0643c6baa22f6fd972460b85a1275",
          "sha256": "50a527a9f0080d859a785f116e32760222d854bad99b3f69c8c1092accd8ac43"
        },
        "downloads": -1,
        "filename": "frolic-engine-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "97d0643c6baa22f6fd972460b85a1275",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14489,
        "upload_time": "2021-06-14T02:20:40",
        "upload_time_iso_8601": "2021-06-14T02:20:40.200869Z",
        "url": "https://files.pythonhosted.org/packages/ac/e0/3352e164cdc7d54737676f606c762c347de2eaf50daa7a45095e328fc1de/frolic-engine-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3bc0a4392595e0653a93b8ba62683cf1cdf5c4c77b5ea5cef10d7d6a772eef4",
          "md5": "da6a25bc5e4eaf05324e2d6075519a82",
          "sha256": "c0e5cbd585c57db79a3a8ebd1ebc031bcf0d6cc06d166173894ffaa8ec52a7a4"
        },
        "downloads": -1,
        "filename": "frolic_engine-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da6a25bc5e4eaf05324e2d6075519a82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14180,
        "upload_time": "2021-06-14T02:39:16",
        "upload_time_iso_8601": "2021-06-14T02:39:16.517109Z",
        "url": "https://files.pythonhosted.org/packages/c3/bc/0a4392595e0653a93b8ba62683cf1cdf5c4c77b5ea5cef10d7d6a772eef4/frolic_engine-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e7a69e6ce0254ca65e36a9a3d1a541a6a79e0216ae4c6b6d835ca7e21cc1bd2",
          "md5": "23a29da50def6a2726f44a5e769a4d87",
          "sha256": "7a8076c976a33f3adf6e6147dd0b4ac4e7667ae46f3f1aa28fc4d025188056ff"
        },
        "downloads": -1,
        "filename": "frolic-engine-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "23a29da50def6a2726f44a5e769a4d87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14487,
        "upload_time": "2021-06-14T02:39:18",
        "upload_time_iso_8601": "2021-06-14T02:39:18.787121Z",
        "url": "https://files.pythonhosted.org/packages/8e/7a/69e6ce0254ca65e36a9a3d1a541a6a79e0216ae4c6b6d835ca7e21cc1bd2/frolic-engine-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3bc0a4392595e0653a93b8ba62683cf1cdf5c4c77b5ea5cef10d7d6a772eef4",
        "md5": "da6a25bc5e4eaf05324e2d6075519a82",
        "sha256": "c0e5cbd585c57db79a3a8ebd1ebc031bcf0d6cc06d166173894ffaa8ec52a7a4"
      },
      "downloads": -1,
      "filename": "frolic_engine-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da6a25bc5e4eaf05324e2d6075519a82",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14180,
      "upload_time": "2021-06-14T02:39:16",
      "upload_time_iso_8601": "2021-06-14T02:39:16.517109Z",
      "url": "https://files.pythonhosted.org/packages/c3/bc/0a4392595e0653a93b8ba62683cf1cdf5c4c77b5ea5cef10d7d6a772eef4/frolic_engine-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e7a69e6ce0254ca65e36a9a3d1a541a6a79e0216ae4c6b6d835ca7e21cc1bd2",
        "md5": "23a29da50def6a2726f44a5e769a4d87",
        "sha256": "7a8076c976a33f3adf6e6147dd0b4ac4e7667ae46f3f1aa28fc4d025188056ff"
      },
      "downloads": -1,
      "filename": "frolic-engine-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "23a29da50def6a2726f44a5e769a4d87",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14487,
      "upload_time": "2021-06-14T02:39:18",
      "upload_time_iso_8601": "2021-06-14T02:39:18.787121Z",
      "url": "https://files.pythonhosted.org/packages/8e/7a/69e6ce0254ca65e36a9a3d1a541a6a79e0216ae4c6b6d835ca7e21cc1bd2/frolic-engine-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}