{
  "info": {
    "author": "Vincent Knight",
    "author_email": "vince@vknight.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# Ertai\n\nMathematical models of Magic the Gathering.\n\n## Tutorial\n\nWe will use `ertai` to obtain the probability of being able to play a card in\nour first turn.\n\n```python\n>>> import ertai\n>>> import random\n>>> def build_deck(card_counts, number_of_lands):\n...     \"\"\"\n...     This returns a list of `ertai.Card` objects with the\n...     specified number of cards\n...     \"\"\"\n...     deck = [ertai.BasicLand() for _ in range(number_of_lands)]\n...     for cost, number in card_counts.items():\n...         cost = ertai.Mana(*(None for _ in range(cost)))\n...         deck += [ertai.Card(cost=cost) for _ in range(number)]\n...     return deck\n>>> card_counts = {1: 10, 2: 16}\n>>> number_of_lands = 14\n>>> deck = build_deck(card_counts=card_counts, number_of_lands=number_of_lands)\n>>> for card in deck:\n...     print(card)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nBasicLand(title=None, cost=0 Mana, tapped=False, color=None)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=1 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\nCard(title=None, cost=2 None Mana, tapped=False)\n\n```\n\nThe above is code that uses the `ertai` classes to construct a deck.\n\nNow let us write code to find the probability of drawing a hand with a card that\ncan be played.\n\n```\n>>> def play_land(hand):\n...     \"\"\"\n...     If the hand contains a land, return it.\n...     \"\"\"\n...     for card in hand:\n...          if isinstance(card, ertai.BasicLand):\n...              hand.remove(card)\n...              return card\n...     return None\n>>> def play_card(hand, pool):\n...     \"\"\"\n...     Given a pool of mana, play the first possible card in a hand.\n...     \"\"\"\n...     for card in hand:\n...         if (card.cost <= pool) and (isinstance(card, ertai.BasicLand) is False):\n...             pool = card.cast(pool)\n...             hand.remove(card)\n...             return card\n...     return None\n\n```\n\nWith the above we can now write code to draw a hand of card and see if we can\nplay:\n\n```\n>>> def can_play_spell(card_counts, number_of_lands, seed):\n...     \"\"\"\n...     Given a hand returns a boolean if we are able to play a spell\n...\n...     This assumes we play on the first turn.\n...     \"\"\"\n...     deck = build_deck(card_counts=card_counts, number_of_lands=number_of_lands)\n...     random.seed(seed)\n...     random.shuffle(deck)\n...     hand = deck[:7]\n...     if (land:=play_land(hand)) is not None:\n...         pool = land.generate_mana()\n...         return play_card(hand, pool) is not None\n...     return False\n>>> can_play_spell(card_counts=card_counts, number_of_lands=number_of_lands, seed=0)\nTrue\n\n```\n\nThe above is a single simulation, let us compute the expected probability:\n\n```python\n>>> import numpy as np\n>>> def expected_probability_of_first_turn_play(card_counts, number_of_lands, number_of_repetitions=500):\n...     \"\"\"Returns the expected probability of having a first turn play.\"\"\"\n...     return np.mean([can_play_spell(card_counts=card_counts, number_of_lands=number_of_lands, seed=seed) for seed in range(number_of_repetitions)])\n\n```\n\nLet us see how this probability changes as we modify the number of cards with\ncost 1 in our deck. We will assume a 40 card deck with 16 lands and all other\ncards have cost 2.\n\n```python\n>>> number_of_lands = 14\n>>> for number_of_cards_with_cost_1 in range(1, 26 + 1):\n...     card_counts = {1: number_of_cards_with_cost_1, 2: 26 - number_of_cards_with_cost_1}\n...     probability = expected_probability_of_first_turn_play(card_counts=card_counts, number_of_lands=number_of_lands)\n...     print(number_of_cards_with_cost_1, round(probability, 3))\n1 0.134\n2 0.286\n3 0.422\n4 0.504\n5 0.58\n6 0.644\n7 0.714\n8 0.762\n9 0.796\n10 0.838\n11 0.862\n12 0.88\n13 0.898\n14 0.914\n15 0.932\n16 0.946\n17 0.948\n18 0.95\n19 0.954\n20 0.958\n21 0.958\n22 0.958\n23 0.958\n24 0.958\n25 0.958\n26 0.958\n\n```\n\nWe see that as expected the probability of playing in the first turn goes up as\nthe number of cards with cost 1 increases.\n\n## How to\n\n### How to create mana\n\n`ertai` has a mana class that can be used to create any amount of mana.\n\n```python\n>>> spell_cost = ertai.Mana(\"Blue\", \"Blue\")\n>>> spell_cost\n2 Blue Mana\n\n```\n\n### How to add more mana\n\n```python\n>>> spell_cost += ertai.Mana(\"Red\")\n>>> spell_cost\n2 Blue Mana, 1 Red Mana\n\n```\n\n### How to check if one collection of mana can be paid using another\n\n```python\n>>> mana_pool = ertai.Mana(\"Blue\", \"Red\", \"Red\", \"Blue\")\n>>> spell_cost <= mana_pool\nTrue\n\n```\n\n### How to take one collection of mana away from another\n\n```python\n>>> mana_pool -= spell_cost\n>>> mana_pool\n1 Red Mana\n\n```\n\nWe see that we no longer have enough mana for the spell:\n\n```python\n>>> spell_cost <= mana_pool\nFalse\n\n```\n\n### How to create a basic land\n\n```python\n>>> island = ertai.BasicLand(title=\"Island\", color=\"Blue\")\n>>> island\nBasicLand(title='Island', cost=0 Mana, tapped=False, color='Blue')\n\n```\n\n###Â How to generate mana from a land\n\n```python\n>>> island.tapped\nFalse\n>>> island.generate_mana()\n1 Blue Mana\n>>> island.tapped\nTrue\n\n```\n\nWhen tapped the land will not generate mana.\n\n```python\n>>> island.generate_mana()\n\n```\n\n### How to untap or tap a card\n\nAll cards in `ertai` have a `untap` method.\n\n```python\n>>> island.untap()\n>>> island.tapped\nFalse\n\n```\n\nThey also have a `tap` method.\n\n```python\n>>> island.tap()\n>>> island.tapped\nTrue\n\n```\n\n### How to cast a card\n\nAt present, casting a card does nothing but modify a given mana pool **if the\ncost can be paid**.\n\n```python\n>>> mana_pool = ertai.Mana(\"Red\", \"Red\", \"Black\")\n>>> card_cost = ertai.Mana(\"Red\")\n>>> card = ertai.Card(title=\"Lightning bolt\", cost=card_cost)\n>>> mana_pool = card.cast(mana_pool)\n>>> mana_pool\n1 Red Mana, 1 Black Mana\n\n```\n\nNote that if a card cannot be case then the mana pool will stay unchanged but no\nwarning is given.\n\n```python\n>>> card_cost = ertai.Mana(\"Blue\", \"Blue\")\n>>> card = ertai.Card(title=\"Counterspell\", cost=card_cost)\n>>> mana_pool = card.cast(mana_pool)\n>>> mana_pool\n1 Red Mana, 1 Black Mana\n\n```\n\n### How to create a ceature card\n\nPass a `power` and `toughness` to the `Creature` class:\n\n```python\n>>> creature = ertai.Creature(title=\"Selfless Savior\",cost=ertai.Mana(\"White\"),\n...            power=1,\n...            toughness=1)\n>>> creature\nSelfless Savior    Cost:1 White Mana    Power:1    Toughness:1\n\n```\n\n### How to use a creature to fight \n\nWe can then use this creature to fight a `target` create:\n\n```python\n>>> target = ertai.Creature(title=\"Usher of the Fallen\",cost=ertai.Mana(\"White\"),\n...          power=2,\n...          toughness=1)\n>>> creature.fight(target)\n\n```\n\nIn this case the create is no longer alive after the fight:\n\n```python\n>>> creature.is_alive()\nFalse\n\n```\n\n### How to contribute\n\nClone the repository and create a virtual environment:\n\n```bash\n$ git clone https://github.com/drvinceknight/ertai.git\n$ cd ertai\n$ python -m venv env\n\n```\n\nActivate the virtual environment and install [`tox`](https://tox.readthedocs.io/en/latest/):\n\n```bash\n$ source env/bin/activate\n$ python -m pip install tox\n\n```\n\nMake modifications.\n\nTo run the tests:\n\n```bash\n$ python -m tox\n\n```\n\nPull requests are welcome.\n\n\n## Discussion\n\n### What is Magic The Gathering\n\nMagic the Gathering is a collectable card game that was first released in 1993.\n\n- Here is the official basic rules:\n  [https://magic.wizards.com/en/magic-gameplay](https://magic.wizards.com/en/magic-gameplay)\n- Here is the wikipedia page entry: [https://en.wikipedia.org/wiki/Magic:_The_Gathering](https://en.wikipedia.org/wiki/Magic:_The_Gathering)\n\n### Why is it called Ertai\n\nAlongside the game there is a lot of lore that exists. Ertai was a particular\ncharacter. From [https://villains.fandom.com/wiki/Ertai]:\n\n> He is a brilliant but arrogant mage who learned from the head wizard of the\n> Tolarian Academy Barrin and signed up to join the Weatherlight Crew.\n\n### What can this library be used for\n\nAt present this library offers data class that can be used to model aspects of\nMagic the Gathering.\n\nThe `erta.Mana` class allows us to carry out Mana arithmetic:\n\n```\n>>> mana_pool = ertai.Mana(\"Blue\", \"Blue\", \"Red\", \"None\", \"Blue\")\n>>> ertai_the_adept_cost = ertai.Mana(\"Blue\", \"Blue\", \"None\")\n>>> mana_pool - ertai_the_adept_cost\n1 Blue Mana, 1 Red Mana\n\n```\n\nThe `ertai.Card` class can be used to create new cards with given abilities.\n\n### Development stack\n\nThere are a number of continuous integration checks that are used:\n\n- [black](https://github.com/psf/black) and\n  [flake8](https://flake8.pycqa.org/en/latest/) for code style.\n- [interrogate](https://interrogate.readthedocs.io/en/latest/) to ensure all\n  code has docstrings.\n- [mypy](https://mypy.readthedocs.io/en/stable/) for static type checking.\n- [coverage](https://coverage.readthedocs.io/en/coverage-5.5/) to ensure 100%\n  coverage of source code by test.\n- [mccabe](https://github.com/PyCQA/mccabe) to measure code complexity.\n\n[tox](https://tox.readthedocs.io/en/latest/) is used to test the code in isolated environments.\n\n## Reference\n\n### Other Python magic the gathering libraries\n\n[Magic: The Gathering SDK](https://github.com/MagicTheGathering/mtg-sdk-python):\nA wrapper around the MTG API of magicthegathering.io\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://vknight.org",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ertai",
    "package_url": "https://pypi.org/project/ertai/",
    "platform": "",
    "project_url": "https://pypi.org/project/ertai/",
    "project_urls": {
      "Homepage": "https://vknight.org"
    },
    "release_url": "https://pypi.org/project/ertai/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A tool for mathematical analysis of Magic the Gathering",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11127902,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "523e7e82d743175d43b70955e74ee056db37ee2acbf4296d9c0bb3c6ce5f1ed7",
          "md5": "4a5d498176f490e454e2430c8dc596ac",
          "sha256": "5d486f528918d716fee70262e47cdba2ff3a0f459a18d39d74c41f41d2d141ca"
        },
        "downloads": -1,
        "filename": "ertai-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a5d498176f490e454e2430c8dc596ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 1142,
        "upload_time": "2021-04-09T15:57:49",
        "upload_time_iso_8601": "2021-04-09T15:57:49.502509Z",
        "url": "https://files.pythonhosted.org/packages/52/3e/7e82d743175d43b70955e74ee056db37ee2acbf4296d9c0bb3c6ce5f1ed7/ertai-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b67c7ff80888050f46ea0361cc6a184bf6395bb8b98b171fcfa5225b5a4fbb45",
          "md5": "f9e1b9b196901ef71c6328887f743507",
          "sha256": "5b7c28bd714d63e25f8f276e4e1b243651d109c4e6a73b52111b12d0dfd9d381"
        },
        "downloads": -1,
        "filename": "ertai-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f9e1b9b196901ef71c6328887f743507",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 909,
        "upload_time": "2021-04-09T15:57:55",
        "upload_time_iso_8601": "2021-04-09T15:57:55.602837Z",
        "url": "https://files.pythonhosted.org/packages/b6/7c/7ff80888050f46ea0361cc6a184bf6395bb8b98b171fcfa5225b5a4fbb45/ertai-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fbbe622cec3a58daa492626276b583e01d9d6527032c15085adfe1fc6c7a167",
          "md5": "aafe678776e23fd5eeb4aae1e9915980",
          "sha256": "194276db41b8c8d16eecb3d576ae705d26620050ab3cc916abf69279899af86d"
        },
        "downloads": -1,
        "filename": "ertai-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aafe678776e23fd5eeb4aae1e9915980",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6374,
        "upload_time": "2021-04-16T10:11:42",
        "upload_time_iso_8601": "2021-04-16T10:11:42.593327Z",
        "url": "https://files.pythonhosted.org/packages/9f/bb/e622cec3a58daa492626276b583e01d9d6527032c15085adfe1fc6c7a167/ertai-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03c2926355ad45a7439765bee2f9a8a1a3621f8c7086c6023c5ad40c89bb60f5",
          "md5": "eec36b38cc2b50e7152ab363ce13aded",
          "sha256": "911d4fc57951a40ec26a384fbd9b18440bc5e68d496022b4729b75feb07a2a0e"
        },
        "downloads": -1,
        "filename": "ertai-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "eec36b38cc2b50e7152ab363ce13aded",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8022,
        "upload_time": "2021-04-16T10:11:44",
        "upload_time_iso_8601": "2021-04-16T10:11:44.260286Z",
        "url": "https://files.pythonhosted.org/packages/03/c2/926355ad45a7439765bee2f9a8a1a3621f8c7086c6023c5ad40c89bb60f5/ertai-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b186cdc03bd094e2e5b82976e668f5c4e7d1896836fa81ffa37ca40e93124b5",
          "md5": "8fec0457fd0d5b33da38bd6f8bf7790f",
          "sha256": "c9ec15f416ee602f0e55285cb9614877bf0a6279a82372cffcafd613ed39624a"
        },
        "downloads": -1,
        "filename": "ertai-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fec0457fd0d5b33da38bd6f8bf7790f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7352,
        "upload_time": "2021-08-09T08:41:10",
        "upload_time_iso_8601": "2021-08-09T08:41:10.251712Z",
        "url": "https://files.pythonhosted.org/packages/7b/18/6cdc03bd094e2e5b82976e668f5c4e7d1896836fa81ffa37ca40e93124b5/ertai-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "469d5f3cbfaff6fca5384f33c315a5151f9733effa1113dfea3f6ab9154e3176",
          "md5": "29acca42cfc8df9fbb87b21fc8c34a64",
          "sha256": "aa590e14011c885bec4accd6e171e30140dc86babbb25ea5a25a304bbef91c28"
        },
        "downloads": -1,
        "filename": "ertai-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "29acca42cfc8df9fbb87b21fc8c34a64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12098,
        "upload_time": "2021-08-09T08:41:12",
        "upload_time_iso_8601": "2021-08-09T08:41:12.163812Z",
        "url": "https://files.pythonhosted.org/packages/46/9d/5f3cbfaff6fca5384f33c315a5151f9733effa1113dfea3f6ab9154e3176/ertai-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b186cdc03bd094e2e5b82976e668f5c4e7d1896836fa81ffa37ca40e93124b5",
        "md5": "8fec0457fd0d5b33da38bd6f8bf7790f",
        "sha256": "c9ec15f416ee602f0e55285cb9614877bf0a6279a82372cffcafd613ed39624a"
      },
      "downloads": -1,
      "filename": "ertai-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8fec0457fd0d5b33da38bd6f8bf7790f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7352,
      "upload_time": "2021-08-09T08:41:10",
      "upload_time_iso_8601": "2021-08-09T08:41:10.251712Z",
      "url": "https://files.pythonhosted.org/packages/7b/18/6cdc03bd094e2e5b82976e668f5c4e7d1896836fa81ffa37ca40e93124b5/ertai-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "469d5f3cbfaff6fca5384f33c315a5151f9733effa1113dfea3f6ab9154e3176",
        "md5": "29acca42cfc8df9fbb87b21fc8c34a64",
        "sha256": "aa590e14011c885bec4accd6e171e30140dc86babbb25ea5a25a304bbef91c28"
      },
      "downloads": -1,
      "filename": "ertai-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "29acca42cfc8df9fbb87b21fc8c34a64",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 12098,
      "upload_time": "2021-08-09T08:41:12",
      "upload_time_iso_8601": "2021-08-09T08:41:12.163812Z",
      "url": "https://files.pythonhosted.org/packages/46/9d/5f3cbfaff6fca5384f33c315a5151f9733effa1113dfea3f6ab9154e3176/ertai-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}