{
  "info": {
    "author": "Boyan Hristov",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Cogpyt -- Code Generation in (pure) Python\n\n\n## Getting Started\n\n\n**Installation** - Cogpyt is available on PyPI\n\n```shell\n$ pip install cogpyt\n```\n\n**Usage**\n```pycon\n>>> import cogpyt\n>>> @cogpyt.GeneratedFunction\n... def generated_printer(\n...         generated_code_block: cogpyt.GeneratedCodeBlock,\n...         amount: int,\n... ):\n...     for i in range(amount):\n...         with generated_code_block:\n...             print(i)\n...\n```\n\nWhen calling `generated_printer`, cogpyt will first combine the code from\nall `with generated_code_block` contexts and then execute it.\n\n```pycon\n>>> generated_printer(5)\n0\n1\n2\n3\n4\n```\n\nFor debugging purposes, you can also examine the generated Python code.\n\n```pycon\n>>> print(generated_printer.get_source(3))\ndef generated_printer(amount):\n    print(0)\n    print(1)\n    print(2)\n```\n\nNotice how the counter `i` from the generator scope was inlined in the generated code.\nThis only works for built-in types. Also notice that the generator argument `amount`\nwas left as an argument in the generated function. This is indeed the case for\nall arguments, so they can be freely used in generated code. \nCogpyt does not yet perform any sort of pruning. Even `pass` statements, required\nfor example to generate just the header of an if statement, are left intact, since\nthey are just syntactic sugar and thus irrelevant in execution time.\n\n**Disclaimer**: This is a proof of concept implementation. As such, it might fail in\ncompletely unexpected ways. As a great Pythonista once said\n> This is probably not something \n> that you're gonna take back to work and start applying unless you want to get fired. \n\n**Another Disclaimer**: Cogpyt only works when the source is stored in a file. \nThis also explains why the example notebooks don't define any cogpyt-powered functions\nbut import them instead. It would be technically possible to lift this\nconstraint, but this is out-of-scope for this project, at least initially.\n\n## But Why Tho?\n\nI was recently on a vacation in Greece, where I am certain I was once again able\nto experience a true spiritual awakening. As advised, I was really \nlistening to my inner voice, primarily drinking a lot of Ouzo, reading and diving. \nThe last exercise proved crucial not to lose that pesky inner voice.\nWhat I was reading turns out to be the motivation behind this project, but in\na rather odd way. Beautiful Code, edited by Andy Oram and Greg Wilson, is composed of\nthirty-three chapters, each giving a leading computer scientist's\ntake on the most beautiful code they ever encountered.\nA chapter about on-the-fly code generation, written by no other than Charles Petzold,\nthat same Petzold who made Turing's great work accessible to an average\nJoe like me, is the reason why you are now reading my awakened thoughts.\nThe author once again didn't disappoint and was able to present a\ngreat idea in a very understandable manner. But the idea is not what moved me\nthe most. I have readily seen a healthy dose of such trickery throughout my computer\nscience education. I have also written a fair amount of low level code and that, that\nwas the last straw that led me to write this project, as well as the necessary rant that follows.\n\nWHY? Why are computer scientists so, for the lack of a better word, elitist?\nWhy are we so protective of our work? Can I generate some code in C#? Sure, you\njust need to write some intermediate language. It's easy, just like assembly,\nyou just need to learn the new syntax and opcodes. You know assembly, right?\nNo? Are you ... incompetent?!?\n\nA line of assembly a day keeps the boss at bay, amirite? \nSure, when implementing an operating system, sooner or later, \nsome assembly will come into play. But so will a context switch need to be\nimplemented, at which point one quickly understands how expensive this process\nis, especially when virtual memory is involved. Then why do we voluntarily keep\ndoing this to ourselves? While the current regular expression character matches the current\ntext character, **increment the pointers** and proceed recursively.\nIf the element of the image processing kernel is -1, emit **OpCodes.Neg** \n(wait, what was on the **stack** again?). WAT? These stick out like a sore thumb, don't they?\nIn the software these examples are taken from, this is a jump from the highest level of\nabstraction to the lowest, just between two source code lines!\nI am not convinced this is the only possible way to write efficient code.\n\nIn first semester I took a course where our homeworks were mostly to\nimplement simple algorithms in assembly. I would come home from\nwork and start awakening my spirits while implementing the given algorithm\nin a high level language. Once I had tested the implementation\nand was sufficiently awakened, I would proceed with the awakening\nand simultaneously translate the code, line by line, in assembly. \nIt always worked! And I was, even extremely awakened, hardly an expert!\nI believe a true computer scientist should be busy designing the\nmost optimal solution, in any convenient formal language, and that bringing\nthis result in a more efficient format is a process we should \nbe capable of automating. When it comes to purely translational\nprocesses, as during my first-semester awakening sessions,\nthere are readily great tools at hand such as \n[Numba](https://numba.pydata.org/). The goal of this project\nis to handle situations where on-the-fly code generation \nmight come handy, in a manner accessible to any programmer,\nwithout enforcing that apparently so beloved context switch.\nIt does not attempt to achieve this in an end-to-end manner,\nbut rather to be used in conjunction with other available solutions.\nAnd it's just a proof of concept!\n\n## The General Example\n\nSee [2d-convolution.pdf](examples/2d-convolution.pdf)\n\n## License\n\n[MIT](LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BoyanH/cogpyt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cogpyt",
    "package_url": "https://pypi.org/project/cogpyt/",
    "platform": null,
    "project_url": "https://pypi.org/project/cogpyt/",
    "project_urls": {
      "Homepage": "https://github.com/BoyanH/cogpyt"
    },
    "release_url": "https://pypi.org/project/cogpyt/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Code Generation in (pure) Python",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15246747,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b798480db974d386439bd73c8910c3bed359fb19cf0b25495db787a46c55b963",
          "md5": "3d6bd2d33877e35b73c0e947d8164f29",
          "sha256": "36b2ceba470b300d16dc2a31656422e8bc1ea8b967f4f3435d3e50bed508c2ca"
        },
        "downloads": -1,
        "filename": "cogpyt-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d6bd2d33877e35b73c0e947d8164f29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 11716,
        "upload_time": "2022-09-28T22:10:02",
        "upload_time_iso_8601": "2022-09-28T22:10:02.845322Z",
        "url": "https://files.pythonhosted.org/packages/b7/98/480db974d386439bd73c8910c3bed359fb19cf0b25495db787a46c55b963/cogpyt-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "427ed1a94fa2c4ec5eaed27466be6396d189245c27712fd8494956160c3d147b",
          "md5": "37668add7a9e43d7643103df5ef054fa",
          "sha256": "1775b78f30cf774aa4d37fa0a5a436fee60a698f466cd777552da7e35b29e572"
        },
        "downloads": -1,
        "filename": "cogpyt-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "37668add7a9e43d7643103df5ef054fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10252,
        "upload_time": "2022-09-28T22:10:04",
        "upload_time_iso_8601": "2022-09-28T22:10:04.675545Z",
        "url": "https://files.pythonhosted.org/packages/42/7e/d1a94fa2c4ec5eaed27466be6396d189245c27712fd8494956160c3d147b/cogpyt-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b798480db974d386439bd73c8910c3bed359fb19cf0b25495db787a46c55b963",
        "md5": "3d6bd2d33877e35b73c0e947d8164f29",
        "sha256": "36b2ceba470b300d16dc2a31656422e8bc1ea8b967f4f3435d3e50bed508c2ca"
      },
      "downloads": -1,
      "filename": "cogpyt-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d6bd2d33877e35b73c0e947d8164f29",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 11716,
      "upload_time": "2022-09-28T22:10:02",
      "upload_time_iso_8601": "2022-09-28T22:10:02.845322Z",
      "url": "https://files.pythonhosted.org/packages/b7/98/480db974d386439bd73c8910c3bed359fb19cf0b25495db787a46c55b963/cogpyt-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "427ed1a94fa2c4ec5eaed27466be6396d189245c27712fd8494956160c3d147b",
        "md5": "37668add7a9e43d7643103df5ef054fa",
        "sha256": "1775b78f30cf774aa4d37fa0a5a436fee60a698f466cd777552da7e35b29e572"
      },
      "downloads": -1,
      "filename": "cogpyt-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "37668add7a9e43d7643103df5ef054fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10252,
      "upload_time": "2022-09-28T22:10:04",
      "upload_time_iso_8601": "2022-09-28T22:10:04.675545Z",
      "url": "https://files.pythonhosted.org/packages/42/7e/d1a94fa2c4ec5eaed27466be6396d189245c27712fd8494956160c3d147b/cogpyt-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}