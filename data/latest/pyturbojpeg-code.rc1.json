{
  "info": {
    "author": "Lilo Huang",
    "author_email": "kuso.cc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PyTurboJPEG-codE\nA Python wrapper of libjpeg-turbo for decoding and encoding JPEG image.\n\n## Prerequisites\n- [libjpeg-turbo](https://github.com/libjpeg-turbo/libjpeg-turbo/releases)\n- [numpy](https://github.com/numpy/numpy)\n\n## Example\n\n```python\nimport cv2\nfrom turbojpeg import TurboJPEG, TJPF_GRAY, TJSAMP_GRAY, TJFLAG_PROGRESSIVE\n\n# specifying library path explicitly\n# jpeg = TurboJPEG(r'D:\\turbojpeg.dll')\n# jpeg = TurboJPEG('/usr/lib64/libturbojpeg.so')\n# jpeg = TurboJPEG('/usr/local/lib/libturbojpeg.dylib')\n\n# using default library installation\njpeg = TurboJPEG()\n\n# decoding input.jpg to BGR array\nin_file = open('input.jpg', 'rb')\nbgr_array = jpeg.decode(in_file.read())\nin_file.close()\ncv2.imshow('bgr_array', bgr_array)\ncv2.waitKey(0)\n\n# direct rescaling 1/2 while decoding input.jpg to BGR array\nin_file = open('input.jpg', 'rb')\nbgr_array_half = jpeg.decode(in_file.read(), scaling_factor=(1, 2))\nin_file.close()\ncv2.imshow('bgr_array_half', bgr_array_half)\ncv2.waitKey(0)\n\n# decoding JPEG image properties\nin_file = open('input.jpg', 'rb')\n(width, height, jpeg_subsample, jpeg_colorspace) = jpeg.decode_header(in_file.read())\nin_file.close()\n\n# encoding BGR array to output.jpg with default settings.\nout_file = open('output.jpg', 'wb')\nout_file.write(jpeg.encode(bgr_array))\nout_file.close()\n\n# encoding BGR array to output.jpg with TJSAMP_GRAY subsample.\nout_file = open('output_gray.jpg', 'wb')\nout_file.write(jpeg.encode(bgr_array, jpeg_subsample=TJSAMP_GRAY))\nout_file.close()\n\n# encoding BGR array to output.jpg with quality level 50. \nout_file = open('output_quality_50.jpg', 'wb')\nout_file.write(jpeg.encode(bgr_array, quality=50))\nout_file.close()\n\n# encoding BGR array to output.jpg with quality level 100 and progressive entropy coding.\nout_file = open('output_quality_100_progressive.jpg', 'wb')\nout_file.write(jpeg.encode(bgr_array, quality=100, flags=TJFLAG_PROGRESSIVE))\nout_file.close()\n\n# decoding input.jpg to grayscale array\nin_file = open('input.jpg', 'rb')\ngray_array = jpeg.decode(in_file.read(), pixel_format=TJPF_GRAY)\nin_file.close()\ncv2.imshow('gray_array', gray_array)\ncv2.waitKey(0)\n\n# scale with quality but leaves out the color conversion step\nin_file = open('input.jpg', 'rb')\nout_file = open('scaled_output.jpg', 'wb')\nout_file.write(jpeg.scale_with_quality(in_file.read(), scaling_factor=(1, 4), quality=70))\nout_file.close()\nin_file.close()\n\n# lossless crop image\nout_file = open('lossless_cropped_output.jpg', 'wb')\nout_file.write(jpeg.crop(open('input.jpg', 'rb').read(), 8, 8, 320, 240))\nout_file.close()\n```\n\n## Installation\n\n### macOS\n- brew install jpeg-turbo\n- pip install -U git+git://github.com/lilohuang/PyTurboJPEG-codE.git\n\n### Windows \n- Download [libjpeg-turbo official installer](https://sourceforge.net/projects/libjpeg-turbo/files) \n- pip install -U git+git://github.com/lilohuang/PyTurboJPEG-codE.git\n\n### Linux\n- RHEL/CentOS/Fedora\n  - Download [libjpeg-turbo.repo](https://libjpeg-turbo.org/pmwiki/uploads/Downloads/libjpeg-turbo.repo) to /etc/yum.repos.d/\n  - sudo yum install libjpeg-turbo-official\n  - pip install -U git+git://github.com/lilohuang/PyTurboJPEG-codE.git\n\n- Ubuntu\n  - sudo apt-get update\n  - sudo apt-get install libturbojpeg\n  - pip install -U git+git://github.com/lilohuang/PyTurboJPEG-codE.git\n\n\n## Benchmark \n\n### macOS\n- macOS Sierra 10.12.6\n- Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz\n- opencv-python 3.4.0.12 (pre-built)\n- turbo-jpeg 1.5.3 (pre-built)\n\n| Function              | Wall-clock time |\n| ----------------------|-----------------|\n| cv2.imdecode()        |   0.528 sec     |\n| TurboJPEG.decode()    |   0.191 sec     |\n| cv2.imencode()        |   0.875 sec     |\n| TurboJPEG.encode()    |   0.176 sec     |\n\n### Windows \n- Windows 7 Ultimate 64-bit\n- Intel(R) Xeon(R) E3-1276 v3 CPU @ 3.60 GHz\n- opencv-python 3.4.0.12 (pre-built)\n- turbo-jpeg 1.5.3 (pre-built)\n\n| Function              | Wall-clock time |\n| ----------------------|-----------------|\n| cv2.imdecode()        |   0.358 sec     |\n| TurboJPEG.decode()    |   0.135 sec     |\n| cv2.imencode()        |   0.581 sec     |\n| TurboJPEG.encode()    |   0.140 sec     |",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lilohuang/PyTurboJPEG-codE",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyTurboJPEG-codE",
    "package_url": "https://pypi.org/project/PyTurboJPEG-codE/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyTurboJPEG-codE/",
    "project_urls": {
      "Homepage": "https://github.com/lilohuang/PyTurboJPEG-codE"
    },
    "release_url": "https://pypi.org/project/PyTurboJPEG-codE/1.4.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python wrapper of libjpeg-turbo for decoding and encoding JPEG image.",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9068611,
  "releases": {
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db97fcfda409bcf23f7f363d8616bfa3aabc903c84e1a670052727608d2aa275",
          "md5": "2cf198b82594ae33df5f057e72aa280a",
          "sha256": "aa3a00539f1b07ad0703741b0a0bebd246cbab97611c524afc2a84ed7461e055"
        },
        "downloads": -1,
        "filename": "PyTurboJPEG-codE.tar.gz",
        "has_sig": false,
        "md5_digest": "2cf198b82594ae33df5f057e72aa280a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6544,
        "upload_time": "2021-01-06T16:37:20",
        "upload_time_iso_8601": "2021-01-06T16:37:20.403655Z",
        "url": "https://files.pythonhosted.org/packages/db/97/fcfda409bcf23f7f363d8616bfa3aabc903c84e1a670052727608d2aa275/PyTurboJPEG-codE.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db97fcfda409bcf23f7f363d8616bfa3aabc903c84e1a670052727608d2aa275",
        "md5": "2cf198b82594ae33df5f057e72aa280a",
        "sha256": "aa3a00539f1b07ad0703741b0a0bebd246cbab97611c524afc2a84ed7461e055"
      },
      "downloads": -1,
      "filename": "PyTurboJPEG-codE.tar.gz",
      "has_sig": false,
      "md5_digest": "2cf198b82594ae33df5f057e72aa280a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6544,
      "upload_time": "2021-01-06T16:37:20",
      "upload_time_iso_8601": "2021-01-06T16:37:20.403655Z",
      "url": "https://files.pythonhosted.org/packages/db/97/fcfda409bcf23f7f363d8616bfa3aabc903c84e1a670052727608d2aa275/PyTurboJPEG-codE.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}