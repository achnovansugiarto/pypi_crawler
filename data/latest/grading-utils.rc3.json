{
  "info": {
    "author": "David Kanter Eivin",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Grading Utils\r\n### A collection of utilities for grading Python assignments.\r\nUtilities are based off some common unit testing patterns.\r\nOverall, syntax is modelled off JavaScript's Jest syntax,\r\nwith some modifications (hence `camelCase`, for example).\r\n\r\n## Design Philosophy:\r\n- security\r\n- simplicity\r\n- immutability\r\n\r\n## Matchers and Modifiers\r\nThe most common operations with this module will involve matching test values to expected values.\r\nAll matchers begin with the `expect(value)` syntax, and are chained by some matcher.\r\nFor example, if we want to test $f(x) = x^2$, we write:\r\n\r\n```py\r\nfrom grading_utils.GradingUtils import expect\r\n\r\nexpect(f(2)).toEqual(4)\r\n```\r\nIn this case, we could also write:\r\n```py\r\nexpect(f(2)).toBe(4)\r\n```\r\nwhich will check for referential equality amonst the two objects.\r\nHowever, **use caution** when using `.toBe()` to compare objects for equality,\r\nas this will not use `obj.__eq__` or `obj.__hash__` to compare objects.\r\nMatchers behave similarly to Python's `assert`, but provide more context on error.\r\n\r\nGenerally, matchers accept any type for which they are logically defined.\r\nFor example, `.toBeApprox(2.5, eps=0.1)` works for numeric types.\r\n\r\n#### Matchers with Callable Objects\r\nTypically, we want to check the output of a function,\r\nso we call the function and pass its result to the expectation (`expect(f(x))`).\r\nOccasionally, matchers need to track the way functions behave.\r\nFor example, let `avg(l: iter) = sum(iter) / len(iter)`.\r\nIf we want to check whether `[]` throws `ZeroDivisionError`,\r\nwe can write:\r\n```py\r\nexpect(avg).toThrow(ZeroDivisionError, [])\r\n```\r\nThus, we pass the function (uncalled) to our `expect` call,\r\nthen we pass `toThrow`'s custom argument (the exception to `except`),\r\nand then all arguments to the function to the `.toThrow` call.\r\nThis is an unfortunate limitation, but this works for the time being.\r\nIn the future, some decorator workaround may be implemented.\r\n\r\n#### List of Matchers\r\nThe following matchers are currently defined:\r\n- `toBe`\r\n- `toEqual`\r\n- `toBeApprox`\r\n- `toMatchType`\r\n- `toMatch`\r\n- `toContain`\r\n- `toBeGreaterThan`\r\n- `toBeLessThan`\r\n- `toThrow`\r\n\r\n### Modifiers\r\nModifiers are used to modify the behavior of matchers, by modifying the underling \"Expectation\" object.\r\nMost commonly, we may want to expect that a certain condition is *not* met.\r\nWe can chain modifiers for thus purpose.\r\nModifiers use `._modifier_name` syntax, with `()` if arguments are needed.\r\nThere are currently only 3 modifiers:\r\n###### `._not`\r\nThis modifier negates the expectation. For $$f(x) = x^2$$:\r\n```py\r\nexpect(f(2))._not.toBeGreaterThan(2) # throws GradingError\r\n```\r\n\r\n###### `._exception(e)`\r\nIf we want to throw a custom exception when a matcher fails.\r\n```py\r\nexpect(f(2))._exception(UrAnAwfulProgrammerError).toBe(4)\r\n```\r\n\r\n###### `._maxtime(s)`\r\nThis is one of 3 existing options for timing.\r\nThe `_maxtime` modifier should be used similarly to a matcher with callables.\r\nTo set a 2-second time limit on `slow_reducer(some_set)`,\r\nand expect a result of `True` we write:\r\n```py\r\nexpect(slow_reducer)._maxtime(2, some_set).toBe(True)\r\n```\r\nFor all timing semantics, see the dedicated timing section.\r\n\r\n###### Looking Forward\r\n`_and` and `_or` are some potential future modifiers.\r\n\r\n\r\n## Timing\r\nOne critical aspect of any timer implementation is that for long running functions,\r\nwe want to keep grading time down; execution should be immediately stopped\r\nwhen the time limit is reached, with a fail error.\r\nThis avoids functions from taking needlessly long times when they will fail anyways.\r\nAll times are given in seconds.\r\n\r\nThree methods are provided for time limiting functions:\r\n```py\r\nwith timer(5):\r\n    expect(slow_reducer(some_set)).toBe(True)\r\n```\r\nOr, when defining functions:\r\n```py\r\n@time_limit(5)\r\ndef slow_reducer(some_set):\r\n    pass # implementation here\r\nexpect(slow_reducer(some_set)).toBe(True)\r\n```\r\nNaturally, this can be easily used to wrap student solutions.\r\n\r\nFinally, the `_maxtime` modifier can be used directly:\r\n```py\r\nexpect(slow_reducer)._maxtime(2, some_set).toBe(True)\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grading-utils",
    "package_url": "https://pypi.org/project/grading-utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/grading-utils/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/grading-utils/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A basic collection of tools to aid in the process of grading Python assignments while also attempting to reduce cheating through various methods.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12576741,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "778d919713ef2bf8b0fb887ab5b143484acdd4cf9e55cfefe48cac0e4c492fd5",
          "md5": "ac8c813650c7b9b93500decddfbbf672",
          "sha256": "9809cd12b5ffe91465841415e9c79eb4d19ca995e965fede3a2bbd9015772e2a"
        },
        "downloads": -1,
        "filename": "grading_utils-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac8c813650c7b9b93500decddfbbf672",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1146,
        "upload_time": "2022-01-14T17:04:15",
        "upload_time_iso_8601": "2022-01-14T17:04:15.903829Z",
        "url": "https://files.pythonhosted.org/packages/77/8d/919713ef2bf8b0fb887ab5b143484acdd4cf9e55cfefe48cac0e4c492fd5/grading_utils-0.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Incomplete"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91280969598bd04a3fa9c85759f4fb8bbc69642f7b2f8b2e9d7cc104dde53d80",
          "md5": "1566f587f917717c35f152ad6e253c41",
          "sha256": "5b9b91e548ee6a6f5ccd00401f9e677637a2060c4f33f4845219e922233fdb18"
        },
        "downloads": -1,
        "filename": "grading-utils-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1566f587f917717c35f152ad6e253c41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2752,
        "upload_time": "2022-01-14T17:04:17",
        "upload_time_iso_8601": "2022-01-14T17:04:17.909868Z",
        "url": "https://files.pythonhosted.org/packages/91/28/0969598bd04a3fa9c85759f4fb8bbc69642f7b2f8b2e9d7cc104dde53d80/grading-utils-0.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Incomplete"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae9d7f1a78257b393bed6bc687517ab74824410ae25776c3f84bd11bf82d215d",
          "md5": "88be8891d5dd2864940b848cbb799680",
          "sha256": "c89b493ffca62cfbf935960d372d6ec57b40fa447fb26f020693f1aea061c0ce"
        },
        "downloads": -1,
        "filename": "grading-utils-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "88be8891d5dd2864940b848cbb799680",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4949,
        "upload_time": "2022-01-14T17:26:51",
        "upload_time_iso_8601": "2022-01-14T17:26:51.436687Z",
        "url": "https://files.pythonhosted.org/packages/ae/9d/7f1a78257b393bed6bc687517ab74824410ae25776c3f84bd11bf82d215d/grading-utils-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc83f861567848f27f6061df0586296be18fc3e5b0f80cb4c08214af39333416",
          "md5": "91bdc78ed8d44f32f6f8c8cfb6524141",
          "sha256": "7c1398f282070652dc91113d90b49d5a4bc269f0a1fbe3c10c75cfe9abed3260"
        },
        "downloads": -1,
        "filename": "grading-utils-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "91bdc78ed8d44f32f6f8c8cfb6524141",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5087,
        "upload_time": "2022-01-14T17:43:54",
        "upload_time_iso_8601": "2022-01-14T17:43:54.804892Z",
        "url": "https://files.pythonhosted.org/packages/fc/83/f861567848f27f6061df0586296be18fc3e5b0f80cb4c08214af39333416/grading-utils-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc83f861567848f27f6061df0586296be18fc3e5b0f80cb4c08214af39333416",
        "md5": "91bdc78ed8d44f32f6f8c8cfb6524141",
        "sha256": "7c1398f282070652dc91113d90b49d5a4bc269f0a1fbe3c10c75cfe9abed3260"
      },
      "downloads": -1,
      "filename": "grading-utils-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "91bdc78ed8d44f32f6f8c8cfb6524141",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5087,
      "upload_time": "2022-01-14T17:43:54",
      "upload_time_iso_8601": "2022-01-14T17:43:54.804892Z",
      "url": "https://files.pythonhosted.org/packages/fc/83/f861567848f27f6061df0586296be18fc3e5b0f80cb4c08214af39333416/grading-utils-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}