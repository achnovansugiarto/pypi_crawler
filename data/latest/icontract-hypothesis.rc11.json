{
  "info": {
    "author": "Marko Ristin",
    "author_email": "marko@ristin.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Hypothesis",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "icontract-hypothesis\n====================\n\n.. image:: https://github.com/mristin/icontract-hypothesis/workflows/CI/badge.svg\n    :target: https://github.com/mristin/icontract-hypothesis/actions?query=workflow%3ACI\n    :alt: Continuous integration\n\n.. image:: https://coveralls.io/repos/github/mristin/icontract-hypothesis/badge.svg?branch=main\n    :target: https://coveralls.io/github/mristin/icontract-hypothesis?branch=main\n    :alt: Test coverage\n\n.. image:: https://badge.fury.io/py/icontract-hypothesis.svg\n    :target: https://badge.fury.io/py/icontract-hypothesis\n    :alt: PyPI - version\n\n.. image:: https://img.shields.io/pypi/pyversions/icontract-hypothesis.svg\n    :alt: PyPI - Python Version\n\nIcontract-hypothesis combines design-by-contract with automatic testing.\n\nIt is an integration between\n`icontract <https://github.com/Parquery/icontract>`_\nlibrary for design-by-contract and\n`Hypothesis <https://github.com/HypothesisWorks/hypothesis>`_ library for\nproperty-based testing.\n\nThe result is a powerful combination that allows you to automatically test\nyour code. Instead of writing manually the Hypothesis search strategies for\na function, icontract-hypothesis infers them based on\nthe function's precondition. This makes automatic testing as effortless as it\ngoes.\n\nYou can use icontract-hypothesis:\n\n* As a library, to write succinct unit tests,\n* As a command-line tool or as a tool integrated in your IDE\n  (*e.g.*, `icontract-hypothesis-vim <https://github.com/mristin/icontract-hypothesis-vim>`__,\n  `icontract-hypothesis-pycharm <https://github.com/mristin/icontract-hypothesis-pycharm>`__ and\n  `icontract-hypothesis-vscode <https://github.com/mristin/icontract-hypothesis-vscode>`__).\n\n  This allows you to automatically test functions during the development and\n  use it in your continuous integration,\n* As a ghostwriter utility giving you a starting point for your more elaborate\n  Hypothesis strategies.\n\nSince the contracts live close to the code, evolving the code also automatically\nevolves the tests.\n\nUsage\n-----\nLibrary\n~~~~~~~\nThere are two ways to integrate icontract-hypothesis in your tests as a library.\n\n**Only assume.** First, you can use it for defining the assumptions of the test based on the\nprecondition:\n\n.. code-block:: python\n\n    >>> from hypothesis import given\n    >>> import hypothesis.strategies as st\n\n    >>> import icontract\n    >>> import icontract_hypothesis\n\n    >>> @icontract.require(lambda x: x > 0)\n    ... @icontract.ensure(lambda result: result > 0)\n    ... def some_func(x: int) -> int:\n    ...     return x - 1000\n\n    >>> assume_preconditions = icontract_hypothesis.make_assume_preconditions(\n    ...     some_func)\n\n    >>> @given(x=st.integers())\n    ... def test_some_func(x: int) -> None:\n    ...    assume_preconditions(x)\n    ...    some_func(x)\n\n    >>> test_some_func()\n    Traceback (most recent call last):\n        ...\n    icontract.errors.ViolationError: File <doctest README.rst[4]>, line 2 in <module>:\n    result > 0:\n    result was -999\n    x was 1\n\nThe function ``assume_preconditions`` created by\n``icontract_hypothesis.make_assume_preconditions`` will reject all the input\nvalues which do not satisfy the pre-conditions of ``some_func``.\n\n**Infer strategy**. Second, you can automatically infer the strategy and test the function:\n\n.. code-block:: python\n\n    >>> import icontract\n    >>> import icontract_hypothesis\n\n    >>> @icontract.require(lambda x: x > 0)\n    ... @icontract.ensure(lambda result: result > 0)\n    ... def some_func(x: int) -> int:\n    ...     return x - 1000\n\n    >>> icontract_hypothesis.test_with_inferred_strategy(some_func)\n    Traceback (most recent call last):\n        ...\n    icontract.errors.ViolationError: File <doctest README.rst[10]>, line 2 in <module>:\n    result > 0:\n    result was -999\n    x was 1\n\nWhich approach to use depends on how you want to write your tests.\nThe first approach, using ``assume_preconditions``, is practical if you already\ndefined your search strategy and you only want to exclude a few edge cases.\nThe second approach, automatically inferring test strategies, is useful if you\njust want to test your function without specifying any particular search strategy.\n\nIcontract-hypothesis guarantees that the inferred strategy must satisfy the preconditions.\nIf it does not, you should consider it a bug in which case\nplease `create an issue <https://github.com/mristin/icontract-hypothesis/issues/new>`_\nso that we can fix it.\n\nIf you want to inspect the strategy or further refine it programmatically, use\n``icontract_hypothesis.infer_strategy``:\n\n.. code-block:: python\n\n    >>> import math\n\n    >>> import icontract\n    >>> import icontract_hypothesis\n\n    >>> @icontract.require(lambda x: x > 0)\n    ... @icontract.require(lambda x: x > math.sqrt(x))\n    ... def some_func(x: float) -> int:\n    ...     pass\n\n    >>> icontract_hypothesis.infer_strategy(some_func)\n    fixed_dictionaries({'x': floats(min_value=0, exclude_min=True).filter(lambda x: x > math.sqrt(x))})\n\nTesting Tool\n~~~~~~~~~~~~\nWe provide ``pyicontract-hypothesis test`` command-line tool which you can use\nto automatically test a module.\n\n.. Help starts: pyicontract-hypothesis test --help\n.. code-block::\n\n    usage: pyicontract-hypothesis test [-h] -p PATH\n                                       [--settings [SETTINGS [SETTINGS ...]]]\n                                       [--inspect] [-i [INCLUDE [INCLUDE ...]]]\n                                       [-e [EXCLUDE [EXCLUDE ...]]]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -p PATH, --path PATH  Path to the Python file to test\n      --settings [SETTINGS [SETTINGS ...]]\n                            Specify settings for Hypothesis\n\n                            The settings are assigned by '='.\n                            The value of the setting needs to be encoded as JSON.\n\n                            Example: max_examples=500\n      --inspect             Only show the strategy and the settings\n\n                            No tests are executed.\n      -i [INCLUDE [INCLUDE ...]], --include [INCLUDE [INCLUDE ...]]\n                            Regular expressions, lines or line ranges of the functions to process\n\n                            If a line or line range overlaps the body of a function,\n                            the function is considered included.\n\n                            Example 1: ^do_something.*$\n                            Example 2: 3\n                            Example 3: 34-65\n      -e [EXCLUDE [EXCLUDE ...]], --exclude [EXCLUDE [EXCLUDE ...]]\n                            Regular expressions, lines or line ranges of the functions to exclude\n\n                            If a line or line range overlaps the body of a function,\n                            the function is considered excluded.\n\n                            Example 1: ^do_something.*$\n                            Example 2: 3\n                            Example 3: 34-65\n\n.. Help ends: pyicontract-hypothesis test --help\n\nNote that ``pyicontract-hypothesis test`` can be trivially integrated with\nyour IDE if you can pass in the current cursor position and the\ncurrent file name.\n\nGhostwriting Tool\n~~~~~~~~~~~~~~~~~\nWriting property-based tests by hand is tedious and can be partially automated.\nTo that end, we implemented a ghostwriter utility ``pyicontract-hypothesis ghostwrite``\nthat generates a first draft based on pre-conditions that you manually refine further:\n\n.. Help starts: pyicontract-hypothesis ghostwrite --help\n.. code-block::\n\n    usage: pyicontract-hypothesis ghostwrite [-h] (-m MODULE | -p PATH)\n                                             [-o OUTPUT] [--explicit] [--bare]\n                                             [-i [INCLUDE [INCLUDE ...]]]\n                                             [-e [EXCLUDE [EXCLUDE ...]]]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -m MODULE, --module MODULE\n                            Module to ghostwrite the unit tests for\n      -p PATH, --path PATH  Path to the module to ghostwrite the unit tests for.\n\n                            If the file represents a module reachable through\n                            sys.path, use the qualified module name in\n                            the unit test.\n\n                            Otherwise, the module is represented as the stem\n                            of the path with all non-identifier characters\n                            replaced with an underscore (\"_\").\n      -o OUTPUT, --output OUTPUT\n                            Path to the file where the output should be written.\n\n                            If '-', writes to STDOUT.\n      --explicit            Write the inferred strategies explicitly\n\n                            This is practical if you want to tune and\n                            refine the strategies and just want to use\n                            ghostwriting as a starting point.\n\n                            Mind that pyicontract-hypothesis does not\n                            automatically fix imports as this is\n                            usually project-specific. You have to fix imports\n                            manually after the ghostwriting.\n      --bare                Print only the body of the tests and omit header/footer\n                            (such as TestCase class or import statements).\n\n                            This is useful when you only want to inspect a single test or\n                            include a single test function in a custom test suite.\n      -i [INCLUDE [INCLUDE ...]], --include [INCLUDE [INCLUDE ...]]\n                            Regular expressions, lines or line ranges of the functions to process\n\n                            If a line or line range overlaps the body of a function,\n                            the function is considered included.\n\n                            Example 1: ^do_something.*$\n                            Example 2: 3\n                            Example 3: 34-65\n      -e [EXCLUDE [EXCLUDE ...]], --exclude [EXCLUDE [EXCLUDE ...]]\n                            Regular expressions, lines or line ranges of the functions to exclude\n\n                            If a line or line range overlaps the body of a function,\n                            the function is considered excluded.\n\n                            Example 1: ^do_something.*$\n                            Example 2: 3\n                            Example 3: 34-65\n\n.. Help ends: pyicontract-hypothesis ghostwrite --help\n\nThe examples of ghostwritten tests are available at:\n`tests/pyicontract_hypothesis/samples <https://github.com/mristin/icontract-hypothesis/blob/main/tests/pyicontract_hypothesis/samples>`_\n\nRunning Tools as Module\n~~~~~~~~~~~~~~~~~~~~~~~\n\nIf for some reason you want to run the tools as a module, just invoke:\n\n.. Help starts: python -m icontract_hypothesis --help\n.. code-block::\n\n    usage: icontract_hypothesis [-h] {test,ghostwrite} ...\n\n    Combine property-based testing with contracts of a Python module.\n\n    positional arguments:\n      {test,ghostwrite}  Commands\n        test             Test the functions automatically by inferring search\n                         strategies from preconditions\n        ghostwrite       Ghostwrite the unit tests with inferred search strategies\n\n    optional arguments:\n      -h, --help         show this help message and exit\n\n.. Help ends: python -m icontract_hypothesis --help\n\nInstallation\n------------\nicontract-hypothesis is available on PyPI at\nhttps://pypi.org/project/icontract-hypothesis, so you can use ``pip``:\n\n.. code-block::\n\n    pip3 install icontract-hypothesis\n\n\nSearch Strategies\n-----------------\nA naive approach to fuzzy testing is to randomly sample input data, filter it\nbased on pre-conditions and ensure post-conditions after the run. However,\nif your acceptable band of input values is narrow, the rejection sampling\nwill become impractically slow.\n\nFor example, assume a pre-condition ``5 < x < 10``.\nSampling from all possible integers for ``x`` will rarely hit\nthe pre-condition (if ever) thus wasting valuable computational time.\nThe problem is exacerbated as the number of arguments grow due to\n`the curse of dimensionality <https://en.wikipedia.org/wiki/Curse_of_dimensionality>`_.\n\nIcontract-hypothesis tries to address the search strategies\na bit more intelligently:\n\n* The pre-conditions are matched against common code patterns to define\n  the strategies. For example, ``5 < x < 10`` gives a search strategy\n  ``hypothesis.strategies.integers(min=6, max=9)``.\n\n  We currently match bounds on all available Hypothesis types\n  (``int``, ``float``, ``datetime.date`` *etc*.).\n  We also match regular expressions on ``str`` arguments.\n\n* Pre-conditions which could not be matched, but operate on a single argument\n  are inferred based on the type hint and composed with Hypothesis\n  ``FilteredStrategy``.\n\n* The remainder of the pre-conditions are enforced by filtering on the whole\n  fixed dictionary which is finally passed into the function as keyword arguments.\n\nThere is an ongoing effort to move the strategy matching code into Hypothesis and\ndevelop it further to include many more cases. See\n`this Hypothesis issue <https://github.com/HypothesisWorks/hypothesis/issues/2701>`_.\n\nNote that static analysis of the source code may not determine all the defined names in various\nscopes as they can also be injected dynamically (*e.g.*, setting ``__globals__`` attribute or\n``globals()[random.choice(\"abc\")] = 1``).\nAs long as you keep fancy dynamic acrobatics out of your contracts,\nthe strategy inference by icontract-hypothesis should work fine.\n\nClasses\n~~~~~~~\nHypothesis automatically builds composite input arguments (classes, dataclasses,\nnamed tuples *etc*.). If your class enforces pre-conditions in the constructor\nmethod (``__init__``), make sure that it inherits from ``icontract.DBC``.\n\nThat way icontract-hypothesis will use\n`hypothesis.strategies.register_type_strategy <https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.register_type_strategy>`__\nto register your class with Hypothesis and consider pre-conditions when building\nits instances.\n\nIt is important that you should *not* use\n`hypothesis.strategies.builds <https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.builds>`_\nwith the classes using contracts in their constructors as\n`builds <https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.builds>`_\nwill disregard the registered strategy. You should use\n`hypothesis.strategies.from_type <https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.from_type>`_\ninstead. See\n`this comment on an Hypothesis issue <https://github.com/HypothesisWorks/hypothesis/issues/2708#issuecomment-749393747>`_\nand\n`the corresponding answer <https://github.com/HypothesisWorks/hypothesis/issues/2708#issuecomment-749397758>`_.\n\nMany times default inferred strategies for the constructors should be enough, though you\nare of course not restricted to them. You can register your own strategies with\n`hypothesis.strategies.register_type_strategy <https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.register_type_strategy>`__\n. Icontract-hypothesis will respect the previous registrations and will not overwrite them.\n\nIDE Plug-ins\n------------\n* `icontract-hypothesis-vim <https://github.com/mristin/icontract-hypothesis-vim>`__ for\n  `VIM <https://www.vim.org/>`_\n* `icontract-hypothesis-pycharm <https://github.com/mristin/icontract-hypothesis-pycharm>`__ for\n  `PyCharm <https://www.jetbrains.com/pycharm/>`_\n* `icontract-hypothesis-vscode <https://github.com/mristin/icontract-hypothesis-vscode>`__ for\n  `Visual Studio Code <https://code.visualstudio.com/>`_\n\nRelated Libraries\n-----------------\nPython design-by-contract libraries\n`deal <https://github.com/life4/deal>`_ and\n`dpcontracts <https://github.com/deadpixi/contracts>`_\nintegrate directly with Hypothesis (see\n`this page <https://deal.readthedocs.io/basic/tests.html>`_ and\n`that page <https://hypothesis.readthedocs.io/en/latest/extras.html#hypothesis-dpcontracts>`_,\nrespectively).\n\nAs of 2020-12-16:\n\n**Behavioral subtyping.** Neither of the two libraries handles behavioral sub-typing correctly\n(*i.e.*, they do not weaken and strengthen the pre-conditions, and\npost-conditions and invariants, respectively).\nHence they can not be used with class hierarchies as the contracts are not\nproperly inherited.\n\nThis is not strictly related to property-based testing,\nbut presents an inherent flaw in how they implement contracts.\nHence even if you manually supply a search strategy that\nfulfills behavioral subtyping, these two libraries would\nreport (or ignore) an error.\n\nConsider this example with `deal <https://github.com/life4/deal>`__:\n\n.. code-block:: Python\n\n    class A:\n        @deal.post(lambda result: result % 2 == 0)\n        def some_func(self) -> int:\n            return 2\n\n    class B(A):\n        @deal.post(lambda result: result % 3 == 0)\n        def some_func(self) -> int:\n            # The result 9 satisfies the postcondition of B.some_func,\n            # but not the postcondition of A.some_func thus\n            # breaking the behavioral subtyping.\n            return 9\n\n    b = B()\n    # The correct behavior would be to throw an exception here.\n    b.some_func()\n\n\n**Rejection sampling.** The two libraries only provide rejection sampling which is insufficient\nfor many practical use cases. For example, the computational time grows exponentially with the\nnumber of arguments (see Section \"Search Strategies\").\n\n**Propagation of contracts.** Finally, the existing libraries do not automatically propagate\npre-conditions of constructors to Hypothesis so automatic testing with composite inputs\n(such as instances of classes) is currently not possible with these two libraries. The user can,\nof course, manually design search strategies that satisfy the contracts.\nIn contrast, icontract-hypothesis does that hard-lifting for you automatically.\n\n\nBenchmarks\n~~~~~~~~~~\nWe run benchmarks against `deal` and `dpcontracts` libraries as part of our continuous integration.\n\nWe benchmark against functions using 1, 2 and 3 arguments, respectively, with the precondition that\nthe argument should be positive (*e.g.*, ``a > 0``). We sampled 100 inputs per each run.\n\n.. Benchmark report starts.\n\n\nThe following scripts were run:\n\n* `benchmarks/compare_with_others.py <https://github.com/Parquery/icontract/tree/master/benchmarks/compare_with_others.py>`_\n\nThe benchmarks were executed on Intel(R) Xeon(R) E-2276M  CPU @ 2.80GHz.\nWe used Python 3.8.5, icontract 2.4.1, deal 4.4.0 and dpcontracts 0.6.0.\n\nThe following tables summarize the results.\n\nBenchmarking Hypothesis testing:\n\n\nArgument count: 1\n\n==========================================  ============  ==============  =======================\nCase                                          Total time    Time per run    Relative time per run\n==========================================  ============  ==============  =======================\n`benchmark_icontract_inferred_strategy`           0.48 s        48.29 ms                     100%\n`benchmark_icontract_assume_preconditions`        0.79 s        78.75 ms                     163%\n`benchmark_dpcontracts`                           1.06 s       106.17 ms                     220%\n`benchmark_deal`                                  0.83 s        82.63 ms                     171%\n==========================================  ============  ==============  =======================\n\nArgument count: 2\n\n==========================================  ============  ==============  =======================\nCase                                          Total time    Time per run    Relative time per run\n==========================================  ============  ==============  =======================\n`benchmark_icontract_inferred_strategy`           0.63 s        63.45 ms                     100%\n`benchmark_icontract_assume_preconditions`        1.65 s       165.05 ms                     260%\n`benchmark_dpcontracts`                           2.10 s       209.51 ms                     330%\n`benchmark_deal`                                  1.61 s       161.09 ms                     254%\n==========================================  ============  ==============  =======================\n\nArgument count: 3\n\n==========================================  ============  ==============  =======================\nCase                                          Total time    Time per run    Relative time per run\n==========================================  ============  ==============  =======================\n`benchmark_icontract_inferred_strategy`           0.72 s        71.66 ms                     100%\n`benchmark_icontract_assume_preconditions`        3.30 s       330.20 ms                     461%\n`benchmark_dpcontracts`                           4.23 s       423.31 ms                     591%\n`benchmark_deal`                                  3.20 s       319.57 ms                     446%\n==========================================  ============  ==============  =======================\n\n\n\n.. Benchmark report ends.\n\nVersioning\n==========\nWe follow `Semantic Versioning <http://semver.org/spec/v1.0.0.html>`_.\nThe version X.Y.Z indicates:\n\n* X is the major version (backward-incompatible),\n* Y is the minor version (backward-compatible), and\n* Z is the patch version (backward-compatible bug fix).",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mristin/icontract-hypothesis",
    "keywords": "design-by-contract contracts automatic testing property-based",
    "license": "License :: OSI Approved :: MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "icontract-hypothesis",
    "package_url": "https://pypi.org/project/icontract-hypothesis/",
    "platform": "",
    "project_url": "https://pypi.org/project/icontract-hypothesis/",
    "project_urls": {
      "Homepage": "https://github.com/mristin/icontract-hypothesis"
    },
    "release_url": "https://pypi.org/project/icontract-hypothesis/1.1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Combine contracts and automatic testing.",
    "version": "1.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10984152,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea29fff5c79e2cc07608438ec68c213a47a5df4955370f7856c9505d1d31503a",
          "md5": "350b54776d6d8edf6542e36fe770a8a4",
          "sha256": "3edb7b7d586ad3bdcc4bc597a809010ce0f6c696dd30ff6fc8ca53d95c8c1ca7"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "350b54776d6d8edf6542e36fe770a8a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33668,
        "upload_time": "2020-12-16T21:38:21",
        "upload_time_iso_8601": "2020-12-16T21:38:21.183174Z",
        "url": "https://files.pythonhosted.org/packages/ea/29/fff5c79e2cc07608438ec68c213a47a5df4955370f7856c9505d1d31503a/icontract-hypothesis-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f53cad8668c10027deadb7dad64b734401f562a09f29fb719cc4beddf193f1c0",
          "md5": "c9934b0db819d2a838a2f3df1c1c3d71",
          "sha256": "d3fc34986cfefe2fb923d8990ad949e2e89a29d425c1bd871b288702897edb13"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c9934b0db819d2a838a2f3df1c1c3d71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38091,
        "upload_time": "2020-12-23T10:55:53",
        "upload_time_iso_8601": "2020-12-23T10:55:53.682381Z",
        "url": "https://files.pythonhosted.org/packages/f5/3c/ad8668c10027deadb7dad64b734401f562a09f29fb719cc4beddf193f1c0/icontract-hypothesis-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ace7a677f257415b7a802e9f6751bccc72c2a44c80215b008e6b79e8518cf8c2",
          "md5": "cf93ce2394d219a60daaaea239b1d833",
          "sha256": "d1ce5155ad02a5032285f0eaf6b1ef4dd80fde8a202ede83b29086a6dac726a0"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cf93ce2394d219a60daaaea239b1d833",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42440,
        "upload_time": "2021-01-20T22:28:37",
        "upload_time_iso_8601": "2021-01-20T22:28:37.653112Z",
        "url": "https://files.pythonhosted.org/packages/ac/e7/a677f257415b7a802e9f6751bccc72c2a44c80215b008e6b79e8518cf8c2/icontract-hypothesis-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50108da02cff44e13d3dfa7c7bfc868ea0b83e877c8e09a5f479968aba043c3a",
          "md5": "adb5a11f4f75a563d9d1efec5a4d02d6",
          "sha256": "721c05eb2d7a2ac5780365690b08f101a03984a1729d0ceb7c84ac00939a1557"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "adb5a11f4f75a563d9d1efec5a4d02d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44443,
        "upload_time": "2021-01-23T21:53:01",
        "upload_time_iso_8601": "2021-01-23T21:53:01.528389Z",
        "url": "https://files.pythonhosted.org/packages/50/10/8da02cff44e13d3dfa7c7bfc868ea0b83e877c8e09a5f479968aba043c3a/icontract-hypothesis-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c41f5e7764dedfe780c51267632e184c56c706c7cef124d7f9c633468d53e4e",
          "md5": "04fa0c15aac5fe475d3504c8c2bab1d2",
          "sha256": "e8b72194e56668f6acc092fef24c86f2c066fa5ec2a359038ae3a4c3090378d9"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "04fa0c15aac5fe475d3504c8c2bab1d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44875,
        "upload_time": "2021-02-15T13:22:19",
        "upload_time_iso_8601": "2021-02-15T13:22:19.570329Z",
        "url": "https://files.pythonhosted.org/packages/5c/41/f5e7764dedfe780c51267632e184c56c706c7cef124d7f9c633468d53e4e/icontract-hypothesis-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8078dc58fec42bc9faa53b71a4994edbfddc00c78e2cc981a54237db0c2d21b",
          "md5": "3a9d614c47a54a19cce984a945efa4be",
          "sha256": "24d72efdadfacd3d48a6537ca97faee0ec9389d341b0870b5d54436c21a79a98"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3a9d614c47a54a19cce984a945efa4be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46443,
        "upload_time": "2021-04-23T22:05:19",
        "upload_time_iso_8601": "2021-04-23T22:05:19.503923Z",
        "url": "https://files.pythonhosted.org/packages/f8/07/8dc58fec42bc9faa53b71a4994edbfddc00c78e2cc981a54237db0c2d21b/icontract-hypothesis-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f59ba9245ce0b641f257f40a291325cc1bc54b14cbedeb9b776048aa0b73558",
          "md5": "66e4f8be9bb7a7ce9226144a9912ef13",
          "sha256": "d1666a5bc0f88094cb5c31351d4f04170eefe812f9d5d29ca9f6b6d801ba65f3"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "66e4f8be9bb7a7ce9226144a9912ef13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46833,
        "upload_time": "2021-04-29T18:53:05",
        "upload_time_iso_8601": "2021-04-29T18:53:05.658976Z",
        "url": "https://files.pythonhosted.org/packages/8f/59/ba9245ce0b641f257f40a291325cc1bc54b14cbedeb9b776048aa0b73558/icontract-hypothesis-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a97dcd2e5824fa330cd8112a71f72598ca8977780191d8522b5a940ab6f1f28a",
          "md5": "a5771ea4c6731539db9535b5034cd81d",
          "sha256": "1fa50aed99a129fa95ece2dfe7162ed5341f87357fe26b070985b8376d43d0e0"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a5771ea4c6731539db9535b5034cd81d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49207,
        "upload_time": "2021-06-20T06:45:03",
        "upload_time_iso_8601": "2021-06-20T06:45:03.664927Z",
        "url": "https://files.pythonhosted.org/packages/a9/7d/cd2e5824fa330cd8112a71f72598ca8977780191d8522b5a940ab6f1f28a/icontract-hypothesis-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3872066991fe63446a990bb8aeaf81b2faba7c77a2c8550bbef8013cf6c9ba6d",
          "md5": "c4e3f2a4b422086c7783c0e62f55e37b",
          "sha256": "ffcd8c713943036c88b59063be76c52603f660de83967f39f1f9266bd6075584"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c4e3f2a4b422086c7783c0e62f55e37b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49496,
        "upload_time": "2021-07-06T11:05:26",
        "upload_time_iso_8601": "2021-07-06T11:05:26.727112Z",
        "url": "https://files.pythonhosted.org/packages/38/72/066991fe63446a990bb8aeaf81b2faba7c77a2c8550bbef8013cf6c9ba6d/icontract-hypothesis-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7469d1378c0d4f91d1d7f8929975aa33fb13048e5649f5ecb441ec671209528",
          "md5": "1a38ff6a1c96c391df7885384bace1bc",
          "sha256": "858c3c25c421b1dee29ae6004c7ce54694b3f716b83ca6ad92aea7ba60384ede"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1a38ff6a1c96c391df7885384bace1bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51149,
        "upload_time": "2021-07-19T19:21:53",
        "upload_time_iso_8601": "2021-07-19T19:21:53.099389Z",
        "url": "https://files.pythonhosted.org/packages/c7/46/9d1378c0d4f91d1d7f8929975aa33fb13048e5649f5ecb441ec671209528/icontract-hypothesis-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d8e958e577be5a3f74e87a83cb85cad3e5cd16d856079eee1daa015c26a751c",
          "md5": "a7afaa66d53ba9047225edd3462ec608",
          "sha256": "40f5be35ae5a7d32b7058b579b1eb574367c80709de8bebb52bef685aa01662f"
        },
        "downloads": -1,
        "filename": "icontract-hypothesis-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a7afaa66d53ba9047225edd3462ec608",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51329,
        "upload_time": "2021-07-23T07:27:13",
        "upload_time_iso_8601": "2021-07-23T07:27:13.139927Z",
        "url": "https://files.pythonhosted.org/packages/8d/8e/958e577be5a3f74e87a83cb85cad3e5cd16d856079eee1daa015c26a751c/icontract-hypothesis-1.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d8e958e577be5a3f74e87a83cb85cad3e5cd16d856079eee1daa015c26a751c",
        "md5": "a7afaa66d53ba9047225edd3462ec608",
        "sha256": "40f5be35ae5a7d32b7058b579b1eb574367c80709de8bebb52bef685aa01662f"
      },
      "downloads": -1,
      "filename": "icontract-hypothesis-1.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "a7afaa66d53ba9047225edd3462ec608",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 51329,
      "upload_time": "2021-07-23T07:27:13",
      "upload_time_iso_8601": "2021-07-23T07:27:13.139927Z",
      "url": "https://files.pythonhosted.org/packages/8d/8e/958e577be5a3f74e87a83cb85cad3e5cd16d856079eee1daa015c26a751c/icontract-hypothesis-1.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}