{
  "info": {
    "author": "Oleh Rybalchenko",
    "author_email": "rv.oleg.ua@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# ASTFormula – simple and safe formula engine\n\n## Description\n\nThis package is simple and extensible formula engine with python-like \nsyntax. **No eval usages under the hood** – it's a safe way to work\nwith formulas and variables from untrusted sources like user input.  \n\n## Usage\n\n### Quick start\n\n```python\nfrom astformula import ASTFormula\n\nengine = ASTFormula()\nexecutable = engine.get_calc_expression('a + b * 2')\nexecutable({'a': 2, 'b': 3})  # returns 8\n```\n\n### Custom functions\n\nList of available functions can be supplemented by passing dict of \nfunction names as keys and executables as values.\n\n```python\nfrom astformula import ASTFormula\n\ndef exp3(value):\n    return pow(value, 3)\n\nengine = ASTFormula(functions={'exp3': exp3})\nexecutable = engine.get_calc_expression('a + exp3(b * 2)')\nexecutable({'a': 2, 'b': 3})  # returns 218\n```\n\n### Custom node processors\n\nAny AST node processor can be overridden by passing `node_type: callback`\ndict to node_processors argument. Callback must take the following arguments:\n - engine: ASTFormula - engine instance\n - node: ast.AST or core types – current node of type `node_type`\n - variables: dict – all variables passed to the executable\n\nIn particular, passed `engine` instance can be used to:\n - get operator by name: `engine.get_operator(name)`\n - get function by name: `engine.get_function(name)`\n - evaluate node: `engine.evaluate(node, variables)`\n\n```python\nimport ast\nfrom astformula import ASTFormula\n\ndef bin_op(engine: 'ASTFormula', node, variables):\n    # AST node structure: <node.left=left> <node.op=operator> <node.right=right>\n    result = engine.get_operator(node.op)(\n        engine.evaluate(node.left, variables),\n        engine.evaluate(node.right, variables)\n    )\n    return engine.evaluate(result)\n\nengine = ASTFormula(node_processors={ast.BinOp: bin_op})\nexecutable = engine.get_calc_expression('a + b')\nexecutable({'a': 2, 'b': 3})  # returns 5\n```\n\n### Custom constants\nTo be implemented\n\n### Custom operators processing\nOperators processing can be overridden and implemented by passing\n`ast_operator_node: callback` dict to operators argument.\n\n```python\nimport ast\nimport operator as op\nfrom astformula import ASTFormula\n\ncustom_operators_proc = {ast.Pow: op.pow}  # **\n\nengine = ASTFormula(operators=custom_operators_proc)\nexecutable = engine.get_calc_expression('a ** b')\nexecutable({'a': 2, 'b': 3})  # returns 8\n```\n\n### Handling exceptions\nTo simulate try..except statement a special function is provided out of\nthe box - `iferror(statement, fallback)`. Fallback executes only\nif the main statement fails.\n\n```python\nfrom astformula import ASTFormula\n\nengine = ASTFormula()\nexecutable = engine.get_calc_expression('iferror(a ** b / 0, None)')\nexecutable({'a': 2, 'b': 3})  # returns None\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/oryba/astformula/archive/v0.0.3.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oryba/astformula",
    "keywords": "",
    "license": "OSI Approved (BSD)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ASTFormula",
    "package_url": "https://pypi.org/project/ASTFormula/",
    "platform": "",
    "project_url": "https://pypi.org/project/ASTFormula/",
    "project_urls": {
      "Download": "https://github.com/oryba/astformula/archive/v0.0.3.zip",
      "Homepage": "https://github.com/oryba/astformula"
    },
    "release_url": "https://pypi.org/project/ASTFormula/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple and extensible AST-based Python formula engine to execute string calculation statements",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11848290,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63a64b54b9bc601146d590336dd56231bc7ad143cbd40bc67f335474e353400d",
          "md5": "c26adf7ea5b9b06763d8958372c5a12f",
          "sha256": "55dd31278e37bf81f827c32cd012bd78142980516843b430da24b0a6f4414b06"
        },
        "downloads": -1,
        "filename": "ASTFormula-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c26adf7ea5b9b06763d8958372c5a12f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3535,
        "upload_time": "2020-12-15T14:04:58",
        "upload_time_iso_8601": "2020-12-15T14:04:58.035372Z",
        "url": "https://files.pythonhosted.org/packages/63/a6/4b54b9bc601146d590336dd56231bc7ad143cbd40bc67f335474e353400d/ASTFormula-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae50827116194e8325acc5ebb3897450f81adaa5cfe73219dbf43d26595b0c9a",
          "md5": "90dc1c7ec5a7367e722c08f318f1a0ac",
          "sha256": "1b61e157f11016e1d3ffe8fee7d09926d75f5108fe610b4ab9bd531d8373f4af"
        },
        "downloads": -1,
        "filename": "ASTFormula-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "90dc1c7ec5a7367e722c08f318f1a0ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5971,
        "upload_time": "2020-12-17T13:25:31",
        "upload_time_iso_8601": "2020-12-17T13:25:31.871883Z",
        "url": "https://files.pythonhosted.org/packages/ae/50/827116194e8325acc5ebb3897450f81adaa5cfe73219dbf43d26595b0c9a/ASTFormula-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d4b7e8fcebc0dd5f95f615355d0b990065a4e0b2d8902d541241b89cb381af2",
          "md5": "5f2fe9a1e604d416967453b6d1528ade",
          "sha256": "b915f8bf1ed2b70fa3bcb82764ac113ae16504d4548f188a2b0645681b0b0d81"
        },
        "downloads": -1,
        "filename": "ASTFormula-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5f2fe9a1e604d416967453b6d1528ade",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6440,
        "upload_time": "2021-10-27T16:51:33",
        "upload_time_iso_8601": "2021-10-27T16:51:33.453365Z",
        "url": "https://files.pythonhosted.org/packages/5d/4b/7e8fcebc0dd5f95f615355d0b990065a4e0b2d8902d541241b89cb381af2/ASTFormula-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d4b7e8fcebc0dd5f95f615355d0b990065a4e0b2d8902d541241b89cb381af2",
        "md5": "5f2fe9a1e604d416967453b6d1528ade",
        "sha256": "b915f8bf1ed2b70fa3bcb82764ac113ae16504d4548f188a2b0645681b0b0d81"
      },
      "downloads": -1,
      "filename": "ASTFormula-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5f2fe9a1e604d416967453b6d1528ade",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6440,
      "upload_time": "2021-10-27T16:51:33",
      "upload_time_iso_8601": "2021-10-27T16:51:33.453365Z",
      "url": "https://files.pythonhosted.org/packages/5d/4b/7e8fcebc0dd5f95f615355d0b990065a4e0b2d8902d541241b89cb381af2/ASTFormula-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}