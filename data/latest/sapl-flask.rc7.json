{
  "info": {
    "author": "",
    "author_email": "Dominic Heutelbeck <dominic@heutelbeck.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Flask",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SAPL Integration library for Flask\n\nThis library enables the usage of SAPL for a Flask application by providing decorators to enforce functions with SAPL functionality.\nBasic knowledge about Attributes based access control(ABAC) is beneficial to understand the functionality of this library.\n\nIf you don't have any knowledge about ABAC, you should read the SAPL [documentation](https://sapl.io/documentation) before you continue reading.\n\n## What is SAPL\n\nSAPL is a further development of ABAC and can be described as Attribute-Stream-Based Access Control (ASBAC).\nIn contrary to ABAC, which is based on a request-response model and demands a new connection whenever a new decision is \nneeded, SAPL works on a publish/subscribe model.\nThe client sends an Authorization Subscription to the Policy Decision Point(PDP) and receives a stream of Decisions, \nwhich can update the decision for the given Subscription for the client. \n\nThe functionality of updating and enforcing newly received Decisions is done by the library in the background, so the \ndeveloper can concentrate on writing the policies.\n\nA complete documentation of SAPL can be found at [https://sapl.io](https://sapl.io), which also contains a playground to\nwrite policies.\n\n\n## how to install\n\nThe SAPL Flask integration library is released on PyPI and can be installed with the Package Manager pip.\n\nTo install SAPL_Flask you can use `pip install sapl_flask`. \n\n## Initialize the library\n\nTo initialize the library, the `init_sapl` function, which takes two arguments has to be called.\n\n`def init_sapl(config: Config, subject_function: Callable[[], Any]):`\n\nThe first argument is an argument of the type Configuration, which works exactly like a dictionary.\nThe 2nd argument is a function, which returns Any, which will be the Subject of the Authorization Subscription.\nWhat these functions are and how to write them is explained in the section [How to write subject function](#how-to-write-subject-function).\n\nA simple project, which uses pre_enforce for a route, initializes SAPL_Flask and starts a Flask application would look like this:\n```Python\nimport sapl_flask\nfrom flask import Flask\nfrom flask import session\nfrom sapl_base.decorators import pre_enforce\napp = Flask(__name__)\n\ndef subject_function():\n  try:\n    return session['access_token']\n  except KeyError:\n    return None\n\n@app.route('/')\n@pre_enforce\ndef hello_world():\n  return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    sapl_flask.init_sapl(app.config, subject_function)\n    app.run()\n```\n\n## How to configure SAPL_Flask\n\nThe configuration is used to determine, how to connect to the PDP.\nThis PDP should be a SAPL server, for which a documented open source version is available on \n[GitHub](https://github.com/heutelbeck/sapl-policy-engine/tree/master/sapl-server-lt).\n\nThe easiest way to configure SAPL_Flask is to add a key `\"POLICY_DECISION_POINT\"` with according values to your Flask \nConfiguration and use your Flask Configuration as the 1st argument of the init method.\n\nThe default configuration in JSON Format looks like this:\n```json\n{\n  \"POLICY_DECISION_POINT\" : {\n    \"base_url\": \"http://localhost:8080/api/pdp/\",\n    \"key\": \"YJidgyT2mfdkbmL\",\n    \"secret\": \"Fa4zvYQdiwHZVXh\",\n    \"dummy\": false,\n    \"verify\": false,\n    \"debug\": false,\n    \"backoff_const_max_time\": 1\n  }\n}\n```\n- base_url: The URL, where your PDP Server is located. This has to include the path `'/api/pdp/'` of the PDP Server. \n- key: Access to the API of the SAPL PDP Server requires \"Basic Auth\". The client key (username) can be set with this parameter.\n  The default is the default implemented credentials of a [SAPL-Server-lt](https://github.com/heutelbeck/sapl-policy-engine/tree/master/sapl-server-lt)\n- secret: The password which is used to get access to the API.\n- dummy: Enables a dummy PDP, which is used instead of a remote PDP. This PDP always grants access and should never be used in production.\n- verify: \n- debug: Enables debugging , which adds logging.\n- backoff_const_max_time: When an error occurs, while requesting a Decision from the PDP SAPL_Flask does a retry. \n  This parameter determines, how many seconds the library should retry to connect, before it aborts and denies the access.\n\n# Subject functions\n\nFor authentication, it has to be known who(subject) does the request. Flask does not have authentication built in \nfrom which the library could gather information about who did the request.\nTo determine who is requesting something you need to provide a function, which creates the subject for an Authorization \nSubscription. This function is called, whenever an Authorization Subscription is created. \nThe value this function returns is used to create the subject for the Authorization Subscription.\n\n## How to write a subject function\n\nSubject function can be any function without parameter, which returns Any.\nThis function is called, when an Authorization Subscription is created.\n\nAn example for a subject function, where the subject is the access token of a session, if it is available.\n```Python\nfrom flask import session\n\ndef subject_function():\n  try:\n    return session['access_token']\n  except KeyError:\n    return None\n```\nIf the function does return None, or an empty list, or dict, the subject will be set to \"anonymous\"\n\nA Flask project, which uses SAPL_Flask, which is initialized with default configuration and this subject_function would be:\n\n```Python\nimport sapl_flask\nfrom flask import Flask\nfrom flask import session\nfrom sapl_base.decorators import pre_enforce\napp = Flask(__name__)\n\ndef subject_function():\n  try:\n    return session['access_token']\n  except KeyError:\n    return None\n\n@app.route('/')\n@pre_enforce\ndef hello_world():\n  return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    sapl_flask.init_sapl(app.config, subject_function)\n    app.run()\n```\n\n# How to use it\n\nTo implement SAPL into a Flask project, the functions, which shall be enforced by SAPL have to be decorated with SAPL decorators.\nThe decorator have to be the first decorator of a function. There are 3 possible decorators, which can be used for a function.\n\n- `pre_enforce` when a function shall be enforced, before it is called.\n- `post_enforce` when the function is already executed and the return_value is needed to determine if the requesting client has access to these data.\n- `pre_and_post_enforce` when the function is enforced before and after it is called. This decorator can be used,\nwhen the return value of the function is needed to finally decide if access can be granted, but the execution of the \nfunction is expensive and there are certain parameters of a request, which can already be used to deny access before the \nreturn value is known.\n\nan example for a pre_enforced function would be:\n```Python\nfrom sapl_base.decorators import pre_enforce\n\n@pre_enforce\ndef pre_enforced_function(*args,**kwargs):\n    return_value = \"Do something\"\n    return return_value\n```\n\nA decorated function will use the default implementation to create a subject,action and resources of an Authorization Subscription.\nIf no subject_functions are provided the subject is always \"anonymous\".\n\nsubject, action and resources are dictionarys, which are json dumped with a default JSON Converter.\nThese 3 dictionarys json formatted contain these values:\n\n```json\n{\n  \"subject\": \"is determined by the subject_functions\",\n  \n  \"action\": {\n    \"function\": {\n      \"function_name\": \"name of the function\"\n    },\n    \"request\": {\n      \"path\": \"request.path\",\n      \"method\": \"request.method\",\n      \"endpoint\": \"request.endpoint\",\n      \"route\": \"request.root_url\",\n      \"blueprint\": \"request.blueprint\"\n    }\n  },\n  \"resources\": {\n    \"function\": {\n      \"kwargs\": \"arguments with which the decorated function was called\"\n    },\n    \"request\": {\n      \"GET\" : \"Arguments of the GET Request\",\n      \"POST\" : \"Arguments of the POST Request\"\n    },\n    \"return_value\": \"Return value of the decorated function\"\n  }\n}\n```\nTo determine, who should have access to what values, Policies have to be written, which are used by the SAPL Server \nto evaluate the Decision for an Authorization Subscription.\n\nDecisions can contain Obligations and Advices, which are in details explained in the section [Obligations and Advices].(#obligations-and-advices)\nMore Information about SAPL Server, Authorization Subscriptions, Obligations and Advices can be found in the \n[SAPL documentation](https://sapl.io/documentation)\n\nSAPL_Flask does also support writing custom functions for the subject,action and/or resources of an Authorization \nSubscription, as well as providing values for these parameters, which replaces the default functions for these values.\n\n## Providing arguments to a decorator\n\nInstead of using the default implementation on how the subject,action and/or resources are created, it is possible to \nuse values, or create your own functions to determine these values.\nAn example on how to use a constant as the value for the `action` argument would be\n```Python\nfrom sapl_base.decorators import pre_enforce\n\n@pre_enforce(action=\"retrieve data\")\ndef pre_enforced_function():\n    return_value = \"You are granted access to these data\"\n    return return_value\n```\nWhenever this function is called, it will be enforced before it is executed.\nThe value of the 'action' parameter of the Authorization Subscription will always be \"retrieve data\"\n\nA more dynamic approach could get the type and path of the request, create a dictionary from these values and set this \ndictionary as action.\n```Python\nfrom flask import request\nfrom sapl_base.decorators import pre_enforce\n\ndef create_action():\n  return {\"method\": request.method,\"path\":request.path}\n\n@pre_enforce(action=create_action)\ndef pre_enforced_function(*args,**kwargs):\n    return_value = \"Do something\"\n    return return_value\n```\n\n\n# Obligations and Advices\n\nA Decision from the PDP can have Constraints attached to the Decision. There are two different kinds of Constraints,\nObligations and Advices. Obligations have to be handled, otherwise the Permission is Denied. Advices should be handled, \nbut the Decision won't change when the Advices are not handled.\n\nTo handle these Constraints, this library offers an abstract class called `ConstraintHandlerProvider`, which can handle \nConstraints. The classes, which can handle the constraints are created by the developer and have to be registered to be available \nto the library, to check if given constraints can be handled.\n\n\n## How to create ConstraintHandlerProvider\n\nIn order to create ConstraintHandlerProvider, 4 abstract ConstraintHandlerProvider are available to inherit from. These\nabstract classes are: \n\n- `ErrorConstraintHandlerProvider`\n- `OnDecisionConstraintHandlerProvider`\n- `FunctionArgumentsConstraintHandlerProvider`\n- `ResultConstraintHandlerProvider`\n\nThey all inherit from the base class `ConstraintHandlerProvider` and only differ in the types of the arguments their methods\ntake and return.\n\nThe Baseclass is defined like this:\n```python\nfrom abc import abstractmethod, ABC\n\nclass ConstraintHandlerProvider(ABC):\n  \n    @abstractmethod\n    def priority(self) -> int:\n        \"\"\"\n        ConstraintHandlerProvider are sorted by the value of the priority, when the ConstraintHandlerBundle is created\n\n        :return: value by which ConstraintHandlerProvider are sorted\n        \"\"\"\n        return 0\n\n    @abstractmethod\n    def is_responsible(self, constraint) -> bool:\n        \"\"\"\n        Determine if this ConstraintHandler is responsible for the provided constraint\n\n        :param constraint: A constraint, which can be an Obligation or an Advice, for which the\n        ConstraintHandlerProvider checks if it is responsible to handle it.\n        :return: Is this ConstraintHandlerProvider responsible to handle the provided constraint\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def handle(self, argument):\n        \"\"\"\n        Abstractmethod, which needs to be implemented by a ConstraintHandlerProvider\n        :param argument: The argument, which is provided to the ConstraintHandler, when it is called. This argument can \n        be an Exception, function, decision, or the result of the executed function.\n        \"\"\"\n```\n\nWhen a Decision contains a Constraint, the library checks all registered Constraint handler provider, if their \n`is_responsible` method evaluates to true for the given Constraint. \nThe responsible Constraint handler provider are gathered and \nsorted by the value their method `priority` returns.\nAt the end, the `handle` methods of the sorted list of `ConstraintHandlerProvider`, which are responsible for a given \nConstraint are executed in the order of the list.\n\nAn example for a ConstraintHandlerProvider, which logs the received Decision when it contains a constraint which \nequals to \"log decision\" would be:\n```python\nfrom sapl_base.decision import Decision\nfrom sapl_base.constraint_handling.constraint_handler_provider import OnDecisionConstraintHandlerProvider\nimport logging\n\nclass LogNewDecisionConstraintHandler(OnDecisionConstraintHandlerProvider):\n\n    def handle(self, decision: Decision) -> None:\n        logging.info(str(decision))\n\n    def priority(self) -> int:\n        return 0\n\n    def is_responsible(self, constraint) -> bool:\n        return True if constraint == \"log decision\" else False\n```\n\n## How to register ConstraintHandlerProvider\n\nThe class `ConstraintHandlerService` handles any Constraints and contains a singleton(constraint_handler_service), which \nis created when the file is loaded. All `ConstraintHandlerProvider` registered at this singleton are taken into account, \nwhen the Constraints of a Decision are checked, if they can be handled.\n\nThe ConstraintHandlerService has methods to register single ConstraintHandlerProvider, or lists of ConstraintHandlerProvider \nfor each of the 4 types of ConstraintHandlerProvider.\n\nThe following code would initialize the library, register the previously created ConstraintHandlerProvider and launch \nthe Flask app.\n\n```Python\nimport sapl_flask\nfrom sapl_base.constraint_handling.constraint_handler_service import constraint_handler_service\nfrom sapl_base.decision import Decision\nfrom sapl_base.decorators import pre_enforce\nfrom sapl_base.constraint_handling.constraint_handler_provider import OnDecisionConstraintHandlerProvider\nimport logging\nfrom flask import Flask,session\n\n\napp = Flask(__name__)\n\nclass LogNewDecisionConstraintHandler(OnDecisionConstraintHandlerProvider):\n\n    def handle(self, decision: Decision) -> None:\n        logging.info(str(decision))\n\n    def priority(self) -> int:\n        return 0\n\n    def is_responsible(self, constraint) -> bool:\n        return True if constraint == \"log decision\" else False\n\ndef subject_function():\n  try:\n    return session['access_token']\n  except KeyError:\n    return None\n\n@app.route('/')\n@pre_enforce\ndef hello_world():\n  return \"Hello World!\"\n  \nif __name__ == \"__main__\":\n    sapl_flask.init_sapl(app.config, subject_function)\n    constraint_handler_service.register_decision_constraint_handler_provider(LogNewDecisionConstraintHandler())\n    app.run()\n```\n\n# How to migrate\n\nIf you have an existing project of Flask, you can add SAPL_Flask by installing and initializing the library.\nThe library can then be used by decorating functions and writing policies.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "SAPL,ABAC,Security,Access control",
    "license": "Copyright 2017-2022 Dominic Heutelbeck  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SAPL-Flask",
    "package_url": "https://pypi.org/project/SAPL-Flask/",
    "platform": null,
    "project_url": "https://pypi.org/project/SAPL-Flask/",
    "project_urls": {
      "Documentation": "https://sapl.io/documentation",
      "Homepage": "https://sapl.io/",
      "Source": "https://github.com/heutelbeck/sapl-python/tree/master/sapl_base"
    },
    "release_url": "https://pypi.org/project/SAPL-Flask/0.3.4/",
    "requires_dist": [
      "flask",
      "sapl-base"
    ],
    "requires_python": "",
    "summary": "Library to integrate SAPL into a Flask project",
    "version": "0.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16712150,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9947b20fd39fb6ef5b98c42066f74a2ee9b3a48197f5cd85aab58c62a5c47456",
          "md5": "a407479b78ae42f717bc0fb0dabd4486",
          "sha256": "ef15aa581e5dc3cc5c685197edcbfc87f4190659c9b0963484da5b508cae3146"
        },
        "downloads": -1,
        "filename": "sapl_flask-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a407479b78ae42f717bc0fb0dabd4486",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2160,
        "upload_time": "2022-06-02T14:16:39",
        "upload_time_iso_8601": "2022-06-02T14:16:39.430053Z",
        "url": "https://files.pythonhosted.org/packages/99/47/b20fd39fb6ef5b98c42066f74a2ee9b3a48197f5cd85aab58c62a5c47456/sapl_flask-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21564a0aee7b72c7b48e4274fa19da68361b76986c205631324a6c0eccdb62fa",
          "md5": "3a7f71708069a3c26eabdeaeaaeb2acb",
          "sha256": "ff7aba1dedc1940b5fba94221011b0a8722af080325a6cad727913be875c2eb0"
        },
        "downloads": -1,
        "filename": "SAPL_Flask-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a7f71708069a3c26eabdeaeaaeb2acb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2167,
        "upload_time": "2022-06-02T13:59:39",
        "upload_time_iso_8601": "2022-06-02T13:59:39.470717Z",
        "url": "https://files.pythonhosted.org/packages/21/56/4a0aee7b72c7b48e4274fa19da68361b76986c205631324a6c0eccdb62fa/SAPL_Flask-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81d71c2f4bb3c2d921781a8835e9d378c4585c1a1c8f292afcbb93be9b1cc1e4",
          "md5": "5acb27b52f6a7f3ef1a895495756b344",
          "sha256": "14d5f85c8bcac0e8ec220c088036c4429f3b3463722a3dc5b81ef4325ce4e3be"
        },
        "downloads": -1,
        "filename": "sapl-flask-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5acb27b52f6a7f3ef1a895495756b344",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1601,
        "upload_time": "2022-06-02T14:16:40",
        "upload_time_iso_8601": "2022-06-02T14:16:40.299006Z",
        "url": "https://files.pythonhosted.org/packages/81/d7/1c2f4bb3c2d921781a8835e9d378c4585c1a1c8f292afcbb93be9b1cc1e4/sapl-flask-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9137ad3cf1e96c47b624c9b0fb1d0b9345e2900d424db3ee1cf0b8f4429e16bc",
          "md5": "bda888fcf24c06e8e92d2a190a933335",
          "sha256": "5ff694e77b71a0b3070e1b05b3e1297e3f7db3af121a7493a3b87dfa79be42ce"
        },
        "downloads": -1,
        "filename": "SAPL_Flask-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bda888fcf24c06e8e92d2a190a933335",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2167,
        "upload_time": "2022-06-02T15:25:55",
        "upload_time_iso_8601": "2022-06-02T15:25:55.432714Z",
        "url": "https://files.pythonhosted.org/packages/91/37/ad3cf1e96c47b624c9b0fb1d0b9345e2900d424db3ee1cf0b8f4429e16bc/SAPL_Flask-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7721ca6332db8aaeb380c37187f9f723a9ca95d284aa59b71853aab527c16e0a",
          "md5": "9a6006083aa3155685002c3618e5bfb6",
          "sha256": "1ea998922c745ec0c79f95bc0d58d873193625c57cda14df5972177f3757ae06"
        },
        "downloads": -1,
        "filename": "SAPL-Flask-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9a6006083aa3155685002c3618e5bfb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1618,
        "upload_time": "2022-06-02T15:25:56",
        "upload_time_iso_8601": "2022-06-02T15:25:56.517970Z",
        "url": "https://files.pythonhosted.org/packages/77/21/ca6332db8aaeb380c37187f9f723a9ca95d284aa59b71853aab527c16e0a/SAPL-Flask-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7978a49da25c6a51ec36c178ba6e1437c8ef0b1269e2ebaafb0313cd441ece84",
          "md5": "1a17eac8ec819e0724bf934855c0093a",
          "sha256": "593dfeb5ba7799e70ef11d83fc926f9193d16cd69281eac47ff69f7211b31959"
        },
        "downloads": -1,
        "filename": "SAPL_Flask-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a17eac8ec819e0724bf934855c0093a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4337,
        "upload_time": "2022-12-11T22:19:06",
        "upload_time_iso_8601": "2022-12-11T22:19:06.144096Z",
        "url": "https://files.pythonhosted.org/packages/79/78/a49da25c6a51ec36c178ba6e1437c8ef0b1269e2ebaafb0313cd441ece84/SAPL_Flask-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6834078847ee2478d02c4448b7b48edadda8b19c8c18b1b1fb875ff87b5eb4dd",
          "md5": "9802e571cca0a699273e81bbc7c1256e",
          "sha256": "b526e661efa0e09794b89e322b079efcdc20ec835d422ded97c033d610c81cab"
        },
        "downloads": -1,
        "filename": "SAPL-Flask-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9802e571cca0a699273e81bbc7c1256e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3825,
        "upload_time": "2022-12-11T22:19:07",
        "upload_time_iso_8601": "2022-12-11T22:19:07.856003Z",
        "url": "https://files.pythonhosted.org/packages/68/34/078847ee2478d02c4448b7b48edadda8b19c8c18b1b1fb875ff87b5eb4dd/SAPL-Flask-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4a01ff7ebe44657eeb2ad22e78e546a9fcedaa8769eed274e39503926724e85",
          "md5": "86c5a54b57d8ec09f84f7f802cbb68f9",
          "sha256": "cf461ee0137938912904f862d9c396a77b60a38de9aafa736051db020d39662f"
        },
        "downloads": -1,
        "filename": "SAPL_Flask-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86c5a54b57d8ec09f84f7f802cbb68f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4380,
        "upload_time": "2022-12-20T15:19:56",
        "upload_time_iso_8601": "2022-12-20T15:19:56.493223Z",
        "url": "https://files.pythonhosted.org/packages/d4/a0/1ff7ebe44657eeb2ad22e78e546a9fcedaa8769eed274e39503926724e85/SAPL_Flask-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9094afe4c50ad4d15a87e97b44fcbd6eacb5dea5ec9b4f1aa1a67c6f44d04326",
          "md5": "79c880dd012b017f1f698c56db68097c",
          "sha256": "14eb569d0325d1c441e446b20b3b5ff8b054af886f4253aec0511425063e6423"
        },
        "downloads": -1,
        "filename": "SAPL-Flask-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "79c880dd012b017f1f698c56db68097c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3846,
        "upload_time": "2022-12-20T15:19:57",
        "upload_time_iso_8601": "2022-12-20T15:19:57.721041Z",
        "url": "https://files.pythonhosted.org/packages/90/94/afe4c50ad4d15a87e97b44fcbd6eacb5dea5ec9b4f1aa1a67c6f44d04326/SAPL-Flask-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ba0ccfb5bedf666200bbd184418d71ad7f8d4c72b73f7fbd40a17adf5dde540",
          "md5": "b4f75894edcda963d224c32cabe9d96e",
          "sha256": "e07d8d704fba375c08d4cfc380affaab434f6084b566d694a46862dfae49fc0b"
        },
        "downloads": -1,
        "filename": "SAPL_Flask-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4f75894edcda963d224c32cabe9d96e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8966,
        "upload_time": "2023-01-16T02:10:04",
        "upload_time_iso_8601": "2023-01-16T02:10:04.440125Z",
        "url": "https://files.pythonhosted.org/packages/9b/a0/ccfb5bedf666200bbd184418d71ad7f8d4c72b73f7fbd40a17adf5dde540/SAPL_Flask-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1114e03ad2ac69df44377f5885236b5c097a5e911c2061185f5f4d00b4a30ecb",
          "md5": "f32d23388f165f52ff35e84071e90406",
          "sha256": "a53d4a557a65a6d06e7a3d4c53f86a8e33b89ef9c20e316016a236559d850c44"
        },
        "downloads": -1,
        "filename": "SAPL-Flask-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f32d23388f165f52ff35e84071e90406",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9210,
        "upload_time": "2023-01-16T02:10:06",
        "upload_time_iso_8601": "2023-01-16T02:10:06.163973Z",
        "url": "https://files.pythonhosted.org/packages/11/14/e03ad2ac69df44377f5885236b5c097a5e911c2061185f5f4d00b4a30ecb/SAPL-Flask-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0972a2da93fc3151fe6eec965f10f8f90a6313151bfeab4f12921035db5ee757",
          "md5": "cd51d06b46eec1f4c72218e3b2c947f5",
          "sha256": "66ea40b92ab426e7dcdc5852fa9227ada3e405d2cee9c3925a72b78caee4181d"
        },
        "downloads": -1,
        "filename": "SAPL_Flask-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd51d06b46eec1f4c72218e3b2c947f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8942,
        "upload_time": "2023-01-17T09:16:56",
        "upload_time_iso_8601": "2023-01-17T09:16:56.850650Z",
        "url": "https://files.pythonhosted.org/packages/09/72/a2da93fc3151fe6eec965f10f8f90a6313151bfeab4f12921035db5ee757/SAPL_Flask-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9af96955d385aeee0909258e7804dcea61704ad79d441b35cfe233b726c597d",
          "md5": "5715a5ef03d0481bd8d489e35c896678",
          "sha256": "7463b48ea7d6ddb74ed6df2178e0ec26e2ee0cfe1a4695b35fc4be8c52231a29"
        },
        "downloads": -1,
        "filename": "SAPL-Flask-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5715a5ef03d0481bd8d489e35c896678",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9190,
        "upload_time": "2023-01-17T09:16:58",
        "upload_time_iso_8601": "2023-01-17T09:16:58.535770Z",
        "url": "https://files.pythonhosted.org/packages/d9/af/96955d385aeee0909258e7804dcea61704ad79d441b35cfe233b726c597d/SAPL-Flask-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60b727b214dd89119ad0978bd8d8ce611ed416d31934e9ee7de15ef258d3005e",
          "md5": "6ebdc1039fa71e1d612134c8aea0d030",
          "sha256": "3549420e2472fda7d87753f9c4d4da1c786c1f27d99802d5970b4eb854df1b42"
        },
        "downloads": -1,
        "filename": "SAPL_Flask-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ebdc1039fa71e1d612134c8aea0d030",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8808,
        "upload_time": "2023-02-06T13:12:20",
        "upload_time_iso_8601": "2023-02-06T13:12:20.397140Z",
        "url": "https://files.pythonhosted.org/packages/60/b7/27b214dd89119ad0978bd8d8ce611ed416d31934e9ee7de15ef258d3005e/SAPL_Flask-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90d48e913e0a8ec868ce4a5d395f48bdefb0ddaff99edc423a35d97aa0465620",
          "md5": "ca5ebcbc41f6eff0edb0fff8ae3906f4",
          "sha256": "6e7e1309d303f9d559503320e9c8d7289b220a08d0641e4c802735021a8864d0"
        },
        "downloads": -1,
        "filename": "SAPL-Flask-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ca5ebcbc41f6eff0edb0fff8ae3906f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9092,
        "upload_time": "2023-02-06T13:12:21",
        "upload_time_iso_8601": "2023-02-06T13:12:21.608180Z",
        "url": "https://files.pythonhosted.org/packages/90/d4/8e913e0a8ec868ce4a5d395f48bdefb0ddaff99edc423a35d97aa0465620/SAPL-Flask-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60b727b214dd89119ad0978bd8d8ce611ed416d31934e9ee7de15ef258d3005e",
        "md5": "6ebdc1039fa71e1d612134c8aea0d030",
        "sha256": "3549420e2472fda7d87753f9c4d4da1c786c1f27d99802d5970b4eb854df1b42"
      },
      "downloads": -1,
      "filename": "SAPL_Flask-0.3.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6ebdc1039fa71e1d612134c8aea0d030",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8808,
      "upload_time": "2023-02-06T13:12:20",
      "upload_time_iso_8601": "2023-02-06T13:12:20.397140Z",
      "url": "https://files.pythonhosted.org/packages/60/b7/27b214dd89119ad0978bd8d8ce611ed416d31934e9ee7de15ef258d3005e/SAPL_Flask-0.3.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90d48e913e0a8ec868ce4a5d395f48bdefb0ddaff99edc423a35d97aa0465620",
        "md5": "ca5ebcbc41f6eff0edb0fff8ae3906f4",
        "sha256": "6e7e1309d303f9d559503320e9c8d7289b220a08d0641e4c802735021a8864d0"
      },
      "downloads": -1,
      "filename": "SAPL-Flask-0.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ca5ebcbc41f6eff0edb0fff8ae3906f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9092,
      "upload_time": "2023-02-06T13:12:21",
      "upload_time_iso_8601": "2023-02-06T13:12:21.608180Z",
      "url": "https://files.pythonhosted.org/packages/90/d4/8e913e0a8ec868ce4a5d395f48bdefb0ddaff99edc423a35d97aa0465620/SAPL-Flask-0.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}