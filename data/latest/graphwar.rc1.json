{
  "info": {
    "author": "Jintang Li",
    "author_email": "lijt55@mail2.sysu.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# ‚öîüõ° **GraphWar**: Arms Race in Graph Adversarial Attack and Defense\n\n<p align=\"center\">\n  <img width = \"600\" height = \"180\" src=\"https://github.com/EdisonLeeeee/GraphWar/blob/master/imgs/graphwar.png\" alt=\"banner\"/>\n  <br/>\n</p>\n<p align=\"center\">Graph War is Cooooooooming!!!!!</p>\n\n<p align=center>\n  <a href=\"https://graphwar.readthedocs.io/en/latest\">\n    [Documentation]\n  </a>         \n  |\n  <a href=\"https://github.com/EdisonLeeeee/GraphWar/blob/master/examples\">\n    [Examples]\n  </a>  \n</p>\n\n<p align=center>\n  <a href=\"https://www.python.org/downloads/release/python-360/\">\n    <img src=\"https://img.shields.io/badge/Python->=3.6-3776AB?logo=python\" alt=\"Python\">\n  </a>    \n  <a href=\"https://github.com/pytorch/pytorch\">\n    <img src=\"https://img.shields.io/badge/PyTorch->=1.8-FF6F00?logo=pytorch\" alt=\"pytorch\">\n  </a>   \n  <!-- <a href=\"https://pypi.org/project/graphwar/\">\n    <img src=\"https://badge.fury.io/py/graphwar.png\" alt=\"pypi\">\n  </a>        -->\n  <a href=\"https://github.com/EdisonLeeeee/GraphWar/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/EdisonLeeeee/GraphWar\" alt=\"license\">\n    <img src=\"https://img.shields.io/badge/Contributions-Welcome-278ea5\" alt=\"Contrib\"/>    \n  </a>       \n</p>\n\n\n> Know thy self, know thy enemy. A thousand battles, a thousand victories.\n> \n> „ÄåÁü•Â∑±Áü•ÂΩºÔºåÁôæÊàòÁôæËÉú„Äç ‚Äî‚Äî„ÄäÂ≠ôÂ≠êÂÖµÊ≥ï‚Ä¢Ë∞ãÊîªÁØá„Äã\n\n\n\n\n# üí® News\n- May 27, 2022: GraphWar has been refactored with [PyTorch Geometric (PyG)](https://github.com/pyg-team/pytorch_geometric), old code based on [DGL](https://www.dgl.ai) can be found [here](https://github.com/EdisonLeeeee/GraphWar/tree/dgl). We will soon release the first version of GraphWar, stay tuned!\n\nNOTE: GraphWar is still in the early stages and the API will likely continue to change. \nIf you are interested in this project, don't hesitate to contact me or make a PR directly.\n# üöÄ Installation\n\nPlease make sure you have installed [PyTorch](https://pytorch.org) and [PyTorch Geometric (PyG)](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html).\n\n\n```bash\n# Coming soon\npip install -U graphwar\n```\n\nor\n\n```bash\n# Recommended\ngit clone https://github.com/EdisonLeeeee/GraphWar.git && cd GraphWar\npip install -e . --verbose\n```\n\nwhere `-e` means \"editable\" mode so you don't have to reinstall every time you make changes.\n\n# ‚ö° Get Started\n\nAssume that you have a `torch_geometric.data.Data` instance `data` that describes your graph.\n\n## How fast can we train and evaluate your own GNN?\nTake `GCN` as an example:\n```python\nfrom graphwar.nn.models import GCN\nfrom graphwar.training import Trainer\nfrom torch_geometric.datasets import Planetoid\ndataset = Planetoid(root='.', name='Cora') # Any PyG dataset is available!\ndata = dataset[0]\nmodel = GCN(dataset.num_features, dataset.num_classes)\ntrainer = Trainer(model, device='cuda:0')\ntrainer.fit({'data': data, 'mask': data.train_mask})\ntrainer.evaluate({'data': data, 'mask': data.test_mask})\n```\n## A simple targeted manipulation attack\n\n```python\nfrom graphwar.attack.targeted import RandomAttack\nattacker = RandomAttack(data)\nattacker.attack(1, num_budgets=3) # attacking target node `1` with `3` edges \nattacked_data = attacker.data()\nedge_flips = attacker.edge_flips()\n\n```\n\n## A simple untargeted (non-targeted) manipulation attack\n\n```python\nfrom graphwar.attack.untargeted import RandomAttack\nattacker = RandomAttack(data)\nattacker.attack(num_budgets=0.05) # attacking the graph with 5% edges perturbations\nattacked_data = attacker.data()\nedge_flips = attacker.edge_flips()\n```\n\n\n# üëÄ Implementations\n\nIn detail, the following methods are currently implemented:\n\n## ‚öî Attack\n\n### Graph Manipulation Attack (GMA)\n\n#### Targeted Attack\n\n| Methods          | Descriptions                                                                                                                                           | Examples                                                                                                        |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------- |\n| **RandomAttack** | A simple random method that chooses edges to flip randomly.                                                                                            | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/targeted/random_attack.py) |\n| **DICEAttack**   | *Waniek et al.* [Hiding Individuals and Communities in a Social Network](https://arxiv.org/abs/1608.00375), *Nature Human Behavior'16*                 | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/targeted/dice_attack.py)   |\n| **Nettack**      | *Z√ºgner et al.* [Adversarial Attacks on Neural Networks for Graph Data](https://arxiv.org/abs/1805.07984), *KDD'18*                                    | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/targeted/nettack.py)       |\n| **FGAttack**     | *Chen et al.* [Fast Gradient Attack on Network Embedding](https://arxiv.org/abs/1809.02797), *arXiv'18*                                                | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/targeted/fg_attack.py)     |\n| **GFAttack**     | *Chang et al*.  [A Restricted Black - box Adversarial Framework Towards Attacking Graph Embedding Models](https://arxiv.org/abs/1908.01297), *AAAI'20* | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/targeted/gf_attack.py)     |\n| **IGAttack**     | *Wu et al.* [Adversarial Examples on Graph Data: Deep Insights into Attack and Defense](https://arxiv.org/abs/1903.01610), *IJCAI'19*                  | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/targeted/ig_attack.py)     |\n| **SGAttack**     | *Li et al.* [ Adversarial Attack on Large Scale Graph](https://arxiv.org/abs/2009.03488), *TKDE'21*                                                    | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/targeted/sg_attack.py)     |\n#### Untargeted Attack\n\n| Methods          | Descriptions                                                                                                                                   | Examples                                                                                                          |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |\n| **RandomAttack** | A simple random method that chooses edges to flip randomly                                                                                     | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/untargeted/random_attack.py) |\n| **DICEAttack**   | *Waniek et al.* [Hiding Individuals and Communities in a Social Network](https://arxiv.org/abs/1608.00375), *Nature Human Behavior'16*         | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/untargeted/dice_attack.py)   |\n| **FGAttack**     | *Chen et al.* [Fast Gradient Attack on Network Embedding](https://arxiv.org/abs/1809.02797), *arXiv'18*                                        | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/untargeted/fg_attack.py)     |\n| **Metattack**    | *Z√ºgner et al.* [Adversarial Attacks on Graph Neural Networks via Meta Learning](https://arxiv.org/abs/1902.08412), *ICLR'19*                  | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/untargeted/metattack.py)     |\n| **IGAttack**     | *Wu et al.* [Adversarial Examples on Graph Data: Deep Insights into Attack and Defense](https://arxiv.org/abs/1903.01610), *IJCAI'19*          | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/untargeted/ig_attack.py)     |\n| **PGD**          | *Xu et al.* [Topology Attack and Defense for Graph Neural Networks: An Optimization Perspective](https://arxiv.org/abs/1906.04214), *IJCAI'19* | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/untargeted/pgd_attack.py)    |\n| **MinmaxAttack** | *Xu et al.* [Topology Attack and Defense for Graph Neural Networks: An Optimization Perspective](https://arxiv.org/abs/1906.04214), *IJCAI'19* | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/untargeted/minmax_attack.py) |\n\n### Graph Injection Attack (GIA)\n| Methods             | Descriptions                                                                                                    | Examples                                                                                                            |\n| ------------------- | --------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| **RandomInjection** | A simple random method that chooses nodes to inject randomly.                                                   | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/injection/random_injection.py) |\n| **AdvInjection**    | The 2nd place solution of [KDD Cup 2020](https://www.biendata.xyz/competition/kddcup_2020/), team: ADVERSARIES. | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/injection/adv_injection.py)    |\n\n### Graph Universal Attack (GUA)\n\n### Graph Backdoor Attack (GBA)\n\n| Methods         | Descriptions                                                                                                              | Examples                                                                                                       |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------- |\n| **LGCBackdoor** | *Chen et al.* [Neighboring Backdoor Attacks on Graph Convolutional Network](https://arxiv.org/abs/2201.06202), *arXiv'22* | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/backdoor/lgc_backdoor.py) |\n| **FGBackdoor**  | *Chen et al.* [Neighboring Backdoor Attacks on Graph Convolutional Network](https://arxiv.org/abs/2201.06202), *arXiv'22* | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/attack/backdoor/fg_backdoor.py)  |\n\n\n\n## üõ° Defense\n\n### Standard GNNs (without defense)\n\n| Methods   | Descriptions                                                                                                                               | Examples                                                                                       |\n| --------- | ------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------- |\n| **GCN**   | *Kipf et al.* [Semi-Supervised Classification with Graph Convolutional Networks](https://arxiv.org/abs/1609.02907), *ICLR'17*              | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/gcn.py)   |\n| **SGC**   | *Wu et al.*  [Simplifying Graph Convolutional Networks](https://arxiv.org/abs/1902.07153), *ICLR'19*                                       | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/sgc.py)   |\n| **GAT**   | *Veliƒçkoviƒá et al.*  [Graph Attention Networks](https://arxiv.org/abs/1710.10903), *ICLR'18*                                               | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/gat.py)   |\n| **DAGNN** | *Liu et al.*  [Towards Deeper Graph Neural Networks](https://arxiv.org/abs/2007.09296), *KDD'20*                                           | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/dagnn.py) |\n| **APPNP** | *Klicpera et al.*  [Predict then Propagate: Graph Neural Networks meet Personalized PageRank](https://arxiv.org/abs/1810.05997), *ICLR'19* | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/appnp.py) |\n| **JKNet** | *Xu et al.*  [Representation Learning on Graphs with Jumping Knowledge Networks](https://arxiv.org/abs/1806.03536), *ICML'18*              | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/jknet.py) |\n| **TAGCN** | *Du et al.*  [Topological Adaptive Graph Convolutional Networks](https://arxiv.org/abs/1806.03536), *arXiv'17*                             | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/tagcn.py) |\n| **SSGC**  | *ZHu et al.*  [Simple Spectral Graph Convolution](https://openreview.net/forum?id=CYO5T-YjWZV), *ICLR'21*                                  | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/ssgc.py)  |\n\n### Robust GNNs\n\n| Methods           | Descriptions                                                                                                                                                                                                                                | Examples                                                                                                 |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n| **MedianGCN**     | *Chen et al.* [Understanding Structural Vulnerability in Graph Convolutional Networks](https://www.ijcai.org/proceedings/2021/310), *IJCAI'21*                                                                                              | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/median_gcn.py)      |\n| **RobustGCN**     | *Zhu et al.*  [Robust Graph Convolutional Networks Against Adversarial Attacks](http://pengcui.thumedialab.com/papers/RGCN.pdf), *KDD'19*                                                                                                   | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/robust_gcn.py)      |\n| **SoftMedianGCN** | *Geisler et al.* [Reliable Graph Neural Networks via Robust Aggregation](https://arxiv.org/abs/2010.15651), *NeurIPS'20*<br>*Geisler et al.* [Robustness of Graph Neural Networks at Scale](https://arxiv.org/abs/2110.14038), *NeurIPS'21* | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/soft_median_gcn.py) |\n| **ElasticGNN**    | *Liu et al.* [Elastic Graph Neural Networks](https://arxiv.org/abs/2107.06996), *ICML'21*                                                                                                                                                   | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/elastic_gnn.py)     |\n| **AirGNN**        | *Liu et al.* [Graph Neural Networks with Adaptive Residual](https://openreview.net/forum?id=hfkER_KJiNw), *NeurIPS'21*                                                                                                                      | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/air_gnn.py)         |\n| **SimPGCN**       | *Jin et al.* [Node Similarity Preserving Graph Convolutional Networks](https://arxiv.org/abs/2011.09643), *WSDM'21*                                                                                                                         | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/simp_gcn.py)        |\n| **SAT**           | *Li et al.* [Spectral Adversarial Training for Robust Graph Neural Network](), *arXiv'22*                                                                                                                                                   | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/defense/gcn_sat.py)        |\n\n\n### Defense Strategy\n\n| Methods                 | Descriptions                                                                                                                                 | Examples                                                                                                    |\n| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| **JaccardPurification** | *Wu et al.* [Adversarial Examples on Graph Data: Deep Insights into Attack and Defense](https://arxiv.org/abs/1903.01610), *IJCAI'19*        | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/defense/gcn_jaccard.py)       |\n| **SVDPurification**     | *Entezari et al.* [All You Need Is Low (Rank): Defending Against Adversarial Attacks on Graphs](https://arxiv.org/abs/1903.01610), *WSDM'20* | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/defense/gcn_svd.py)           |\n| **GNNGUARD**            | *Zhang et al.* [GNNGUARD: Defending Graph Neural Networks against Adversarial Attacks](https://arxiv.org/abs/2006.08149), *NeurIPS'20*       | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/defense/gnn_guard.py)         |\n| **GUARD**               | *Li et al.* [GUARD: Graph Universal Adversarial Defense](https://arxiv.org/abs/2204.09803), *arXiv'22*                                       | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/defense/universal_defense.py) |\n\nMore details of literatures and the official codes can be found at [Awesome Graph Adversarial Learning](https://github.com/gitgiter/Graph-Adversarial-Learning).\n## Others\n| Methods                             | Descriptions                                                                                                                                                                            | Examples                                                                                           |\n| ----------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |\n| **DropEdge**                        | *Rong et al.* [DropEdge: Towards Deep Graph Convolutional Networks on Node Classification](https://arxiv.org/abs/1907.10903), *ICLR'20*                                                 | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/drop_edge.py) |\n| **DropNode**                        | *You et al.* [Graph Contrastive Learning with Augmentations](https://arxiv.org/abs/2010.13902), *NeurIPS'20*                                                                            | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/drop_node.py) |\n| **DropPath**                        | *Li et al.* [MaskGAE: Masked Graph Modeling Meets Graph Autoencoders](https://arxiv.org/abs/2205.10053), *arXiv'22*'                                                                    | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/models/drop_path.py) |\n| **Centered Kernel Alignment (CKA)** | *Nguyen et al.* [Do Wide and Deep Networks Learn the Same Things? Uncovering How Neural Network Representations Vary with Width and Depth](https://arxiv.org/abs/2010.15327), *ICLR'21* | [[**Example**]](https://github.com/EdisonLeeeee/GraphWar/blob/master/examples/cka.py)              |\n\n\n# ‚ùì Known Issues\n+ Despite our best efforts, we still had difficulty reproducing the results of [GNNGUARD](https://arxiv.org/abs/2006.08149) in the paper. If you find any problems, please don't hesitate to contact me.\n+ `Untargeted attacks` are suffering from performance degradation, as also in DeepRobust, when a validation set is used during training with model picking. Such phenomenon has also been revealed in [Black-box Gradient Attack on Graph Neural Networks: Deeper Insights in Graph-based Attack and Defense](https://arxiv.org/abs/2104.15061).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/EdisonLeeeee/GraphWar/archive/0.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EdisonLeeeee/GraphWar",
    "keywords": "torch_geometric,pytorch,benchmark,geometric-adversarial-learning,graph-neural-networks",
    "license": "MIT LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphwar",
    "package_url": "https://pypi.org/project/graphwar/",
    "platform": null,
    "project_url": "https://pypi.org/project/graphwar/",
    "project_urls": {
      "Download": "https://github.com/EdisonLeeeee/GraphWar/archive/0.1.0.tar.gz",
      "Homepage": "https://github.com/EdisonLeeeee/GraphWar"
    },
    "release_url": "https://pypi.org/project/graphwar/0.1.0/",
    "requires_dist": [
      "tqdm",
      "scipy",
      "numpy",
      "tabulate",
      "pandas",
      "termcolor",
      "scikit-learn",
      "matplotlib",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Arms Race in Adversarial Graph Learning",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14078874,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fca6504ed2244269fd4870fc4f28b89d64273b34fc263aa5957a08f19f7f3d59",
          "md5": "47187f6d66defbb1a2f8b119d482abbc",
          "sha256": "5b1ee858d856c87a5fb66f3b5e13a0d8284c7db90fd7e8c94e93b54882b8e417"
        },
        "downloads": -1,
        "filename": "graphwar-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47187f6d66defbb1a2f8b119d482abbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 159588,
        "upload_time": "2022-06-09T07:04:16",
        "upload_time_iso_8601": "2022-06-09T07:04:16.361661Z",
        "url": "https://files.pythonhosted.org/packages/fc/a6/504ed2244269fd4870fc4f28b89d64273b34fc263aa5957a08f19f7f3d59/graphwar-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aec3b3d9a83ad308fdf866e5b37bf290d4bc8c8ec1837736f3b0872f52963591",
          "md5": "6de07923ed7db6fd89ed5e4a56f6623e",
          "sha256": "a3e13b910446d42bdd90c87d903ff79da7e5c811b5b65cf45ed65e82d22b8f3c"
        },
        "downloads": -1,
        "filename": "graphwar-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6de07923ed7db6fd89ed5e4a56f6623e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 98758,
        "upload_time": "2022-06-09T07:04:19",
        "upload_time_iso_8601": "2022-06-09T07:04:19.699592Z",
        "url": "https://files.pythonhosted.org/packages/ae/c3/b3d9a83ad308fdf866e5b37bf290d4bc8c8ec1837736f3b0872f52963591/graphwar-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fca6504ed2244269fd4870fc4f28b89d64273b34fc263aa5957a08f19f7f3d59",
        "md5": "47187f6d66defbb1a2f8b119d482abbc",
        "sha256": "5b1ee858d856c87a5fb66f3b5e13a0d8284c7db90fd7e8c94e93b54882b8e417"
      },
      "downloads": -1,
      "filename": "graphwar-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "47187f6d66defbb1a2f8b119d482abbc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 159588,
      "upload_time": "2022-06-09T07:04:16",
      "upload_time_iso_8601": "2022-06-09T07:04:16.361661Z",
      "url": "https://files.pythonhosted.org/packages/fc/a6/504ed2244269fd4870fc4f28b89d64273b34fc263aa5957a08f19f7f3d59/graphwar-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aec3b3d9a83ad308fdf866e5b37bf290d4bc8c8ec1837736f3b0872f52963591",
        "md5": "6de07923ed7db6fd89ed5e4a56f6623e",
        "sha256": "a3e13b910446d42bdd90c87d903ff79da7e5c811b5b65cf45ed65e82d22b8f3c"
      },
      "downloads": -1,
      "filename": "graphwar-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6de07923ed7db6fd89ed5e4a56f6623e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 98758,
      "upload_time": "2022-06-09T07:04:19",
      "upload_time_iso_8601": "2022-06-09T07:04:19.699592Z",
      "url": "https://files.pythonhosted.org/packages/ae/c3/b3d9a83ad308fdf866e5b37bf290d4bc8c8ec1837736f3b0872f52963591/graphwar-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}