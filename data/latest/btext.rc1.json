{
  "info": {
    "author": "Bear Au Jus - ジュースとくま",
    "author_email": "haryobagasasyafah6@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Topic :: Utilities"
    ],
    "description": "# BTEXT\nBear Au Jus Text (btext) is a tool used for processing a text/string, optimized for data science and data analytics.\\\nbtext can also implemented with pandas dataframe.\n\n> + Latest Version Github Directory [1.0](https://github.com/haryobagas/bearaujus/tree/main/1.0)\n> + PyPI [https://pypi.org/project/btext/](https://pypi.org/project/btext/)\n> + Webpages [https://haryobagas.github.io/btext/](https://haryobagas.github.io/btext/)\n\n# Latest Changelog\nRelease Date : 12/23/2020 `Version 1.0`\n> + Initial Commit\n\n# Installation\nGet latest version of bearaujus\n```\npip install btext --upgrade\n```\n\n# Documentation\n## A. Core Module\nCore module contains base functions of base text processing from bearaujus.\n```.py\nimport btext as bt\n```\n\n### Core Module : Table of Contens\n> + A.1. Converting Text to Consecutive Letter\n> + A.2. Converting Text to Tokenized Consecutive Letter\n> + A.3. Converting Text to Consecutive Number\n> + A.4. Converting Text to Tokenized Consecutive Number\n> + A.5. Converting Text to Consecutive Punctuation\n> + A.6. Converting Text to Tokenized Consecutive Punctuation\n> + A.7. Converting Text to Lower Case\n> + A.8. Removing Spaces \n> + A.9. Removing Double Spaces\n> + A.10. Removing Char by User Option\n> + A.11. Removing Char by User Desired Length\n> + A.12. Get All Valid Alphabet\n> + A.13. Get Tokenized All Valid Alphabet\n> + A.14. Get All Valid Number\n> + A.15. Get Tokenized All Valid Number\n> + A.16. Get All Valid Punctuation\n> + A.17. Get Tokenized All Valid Punctuation\n> + A.18. Normalizing a Text or a Collections\n> + A.19. Converting Object to String\n\n### A.1. Converting Text to Consecutive Letter\n```.py\ndef conslet(val, sep=' ')\n```\n+ Example 1\n```.py\ntext = '=,= im getting hungry~'\ntext = bt.conslet(text)\nprint(text)\n```\n> -> `im getting hungry`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\ntext = '=,= im getting hungry~'\ntext = bt.conslet(text, sep = '~')\nprint(text)\n```\n> -> `im~getting~hungry`\\\n> Return Type : `String`\n\n### A.2. Converting Text to Tokenized Consecutive Letter\n```.py\ndef conslet_tokenized(val, sep=' ')\n```\n+ Example 1\n```.py\ntext = 'John Mayer, Honne, Minami, Lisa'\ntext = bt.conslet_tokenized(text)\nprint(text)\n```\n> -> `['John', 'Mayer', 'Honne', 'Minami', 'Lisa']`\\\n> Return Type : `List`\n\n+ Example 2\n```.py\ntext = 'John Mayer, Honne, Minami, Lisa'\ntext = bt.conslet_tokenized(text, sep = ',')\nprint(text)\n```\n> -> `['John Mayer', 'Honne', 'Minami', 'Lisa']`\\\n> Return Type : `List`\n\n### A.3. Converting Text to Consecutive Number\n```.py\ndef consnum(val, sep='')\n```\n+ Example 1\n```.py\ntext = '+62.81231.1231.123. This is random phone numbers ! -999-'\ntext = bt.consnum(text)\nprint(text)\n```\n> -> `62812311231123999`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\ntext = '+62.81231.1231.123. This is random phone numbers ! -999-'\ntext = bt.consnum(text, sep = '-')\nprint(text)\n```\n> -> `62-81231-1231-123-999`\\\n> Return Type : `String`\n\n### A.4. Converting Text to Tokenized Consecutive Number\n```.py\ndef consnum_tokenized(val)\n```\n+ Example 1\n```.py\ntext = '+62.81231.1231.123. This is random phone numbers ! -999-'\ntext = bt.consnum_tokenized(text)\nprint(text)\n```\n> -> `['62', '81231', '1231', '123', '999']`\\\n> Return Type : `List`\n\n+ Example 2\n```.py\ntext = '+62-81231-1231-123. This is random phone numbers ! ~~'\ntext = bt.consnum(text, sep = '-')\nprint(text)\n```\n> -> `62-81231-1231-123`\\\n> Return Type : `String`\n\n### A.5. Converting Text to Consecutive Punctuation\n```.py\ndef conspunc(val, sep = '') :\n```\n+ Example 1\n```.py\ntext = 'Nyummy.... !!!! this is the best pancake ever :))))'\noutput = bt.conspunc(text)\nprint(output)\n```\n> -> `....!!!!:))))`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\ntext = 'Nyummy.... !!!! this is the best pancake ever :))))'\noutput = bt.conspunc(text, sep = ' ')\nprint(output)\n```\n> -> `. . . . ! ! ! ! : ) ) ) )`\\\n> Return Type : `String`\n\n### A.6. Converting Text to Tokenized Consecutive Punctuation\n```.py\ndef conspunc_tokenized(val) :\n```\n+ Example\n```.py\ntext = 'Nyummy.... !!!! this is the best pancake ever :))))'\noutput = bt.conspunc_tokenized(text)\nprint(output)\n```\n> -> `['.', '.', '.', '.', '!', '!', '!', '!', ':', ')', ')', ')', ')']`\\\n> Return Type : `List`\n\n### A.7. Converting Text to Lower Case\n```.py\ndef lower(val) :\n```\n+ Example\n```.py\ntext = 'HeloOo WORLd !'\noutput = bt.lower(text)\nprint(output)\n```\n> -> `helooo world !`\\\n> Return Type : `String`\n\n### A.8. Removing Spaces \n```.py\ndef remove_spaces(val) :\n```\n+ Example\n```.py\ntext = 'Hel     lo Wor     ld'\noutput = bt.remove_spaces(text)\nprint(output)\n```\n> -> `HelloWorld`\\\n> Return Type : `String`\n\n### A.9. Removing Double Spaces\n```.py\ndef remove_double_spaces(val) :\n```\n+ Example\n```.py\ntext = 'Hello    World from        Universe !'\noutput = bt.remove_double_spaces(text)\nprint(output)\n```\n> -> `Hello World from Universe !`\\\n> Return Type : `String`\n\n### A.10. Removing Char by User Option\n```.py\ndef removeby_char(val, exclude, sep = '') :\n```\n+ Example 1\n```.py\ntext = 'i dont like math, i dont like wasabi'\noutput = bt.removeby_char(text, exclude = 'dont')\nprint(output)\n```\n> -> `i like math, i like wasabi`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\ntext = 'i dont like math, i dont like wasabi'\noutput = bt.removeby_char(text, exclude = 'dont', sep = 'didnt')\nprint(output)\n```\n> -> `i didnt like math, i didnt like wasabi`\\\n> Return Type : `String`\n\n+ Example 3\n```.py\ntext = 'i dont like math, i dont like wasabi'\noutput = bt.removeby_char(text, exclude = ['i dont', 'like'])\nprint(output)\n```\n> -> `math, wasabi`\\\n> Return Type : `String`\n\n+ Example 4\n```.py\ntext = 'i dont like math, i dont like wasabi'\noutput = bt.removeby_char(text, exclude = ['i dont', 'like'], sep = '~')\nprint(output)\n```\n> -> `~ ~ math, ~ ~ wasabi`\\\n> Return Type : `String`\n\n### A.11. Removing Char by User Desired Length\n```.py\ndef removeby_length(val, exclude, sep = ' ') :\n```\n+ Example 1\n```.py\ntext = 'Hi hi hi welcome to the jungle'\noutput = bt.removeby_length(text, exclude = 2)\nprint(output)\n```\n> -> `welcome the jungle`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\ntext = 'Hi hi hi welcome to the jungle'\noutput = bt.removeby_length(text, exclude = 2, sep = '~')\nprint(output)\n```\n> -> `welcome~the~jungle`\\\n> Return Type : `String`\n\n+ Example 3\n```.py\ntext = 'Hi hi hi welcome to the jungle'\noutput = bt.removeby_length(text, exclude = [2, 3])\nprint(output)\n```\n> -> `welcome jungle`\\\n> Return Type : `String`\n\n+ Example 4\n```.py\ntext = 'Hi hi hi welcome to the jungle'\noutput = bt.removeby_length(text, exclude = [2, 3], sep = ' HEI ')\nprint(output)\n```\n> -> `welcome HEI jungle`\\\n> Return Type : `String`\n\n### A.12. Get All Valid Alphabet\n```.py\ndef getall_alphabet(sep = '', include_upper = False) :\n```\n+ Example 1\n```.py\noutput = bt.getall_alphabet()\nprint(output)\n```\n> -> `abcdefghijklmnopqrstuvwxyz`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\noutput = bt.getall_alphabet(sep = ' ')\nprint(output)\n```\n> -> `a b c d e f g h i j k l m n o p q r s t u v w x y z`\\\n> Return Type : `String`\n\n+ Example 3\n```.py\noutput = bt.getall_alphabet(include_upper = True)\nprint(output)\n```\n> -> `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`\\\n> Return Type : `String`\n\n+ Example 4\n```.py\noutput = bt.getall_alphabet(sep = '-', include_upper = True)\nprint(output)\n```\n> -> `a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z`\\\n> Return Type : `String`\n\n### A.13. Get Tokenized All Valid Alphabet\n```.py\ndef getall_alphabet_tokenized(include_upper = False) :\n```\n+ Example 1\n```.py\noutput = bt.getall_alphabet_tokenized()\nprint(output)\n```\n> -> `['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']`\\\n> Return Type : `List`\n\n+ Example 2\n```.py\noutput = bt.getall_alphabet_tokenized(include_upper = True)\nprint(output)\n```\n> -> `['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']`\\\n> Return Type : `List`\n\n### A.14. Get All Valid Number\n```.py\ndef getall_number(sep = '') :\n```\n+ Example 1\n```.py\noutput = bt.getall_number()\nprint(output)\n```\n> -> `0123456789`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\noutput = bt.getall_number(sep = ' ')\nprint(output)\n```\n> -> `0 1 2 3 4 5 6 7 8 9`\\\n> Return Type : `String`\n\n### A.15. Get Tokenized All Valid Number\n```.py\ndef getall_number_tokenized() :\n```\n+ Example\n```.py\noutput = bt.getall_number_tokenized()\nprint(output)\n```\n> -> `['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']`\\\n> Return Type : `List`\n\n### A.16. Get All Valid Punctuation\n```.py\ndef getall_punc(sep = '') :\n```\n+ Example 1\n```.py\noutput = bt.getall_punc()\nprint(output)\n```\n> -> `!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\noutput = bt.getall_punc(sep = ' ')\nprint(output)\n```\n> -> `! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ { | } ~`\\\n> Return Type : `String`\n\n### A.17. Get Tokenized All Valid Punctuation\n```.py\ndef getall_punc_tokenized() :\n```\n+ Example\n```.py\noutput = bt.getall_punc_tokenized()\nprint(output)\n```\n> -> `['!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_', '{', '|', '}', '~']`\\\n> Return Type : `List`\n\n### A.18. Normalizing a Text or a Collections\n+ Converting Text to Consecutive Letter\n+ Converting Text to Lower Case\n+ Removing Double Spaces\n```.py\ndef normalize(obj, show_process = False) :\n```\n+ Example 1\n```.py\ntext = 'Nyummy8888888888888888 3235.... !!!! this is the best pancake ever :))))'\noutput = bt.normalize(text)\nprint(output)\n```\n> -> `nyummy this is the best pancake ever`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\nmy_list = ['UwU this is so good :3', 'LETS GOO MAN !', 'okay you fine ! :3']\noutput = bt.normalize(my_list)\nprint(output)\n```\n> -> `['uwu this is so good', 'lets goo man', 'okay you fine']`\\\n> Return Type : `List`\n\n+ Example 3\n```.py\nmy_list = ['UwU this is so good :3', 'LETS GOO MAN !', 'okay you fine ! :3']\noutput = bt.normalize(my_list, show_process = True)\nprint(output)\n```\n> `Normalizing Data: [####################] 100.0% | P: 3 / 3 [ Done ]`\\\n> -> `['uwu this is so good', 'lets goo man', 'okay you fine']`\\\n> Return Type : `List`\n\n### A.19. Converting Object to String\n```.py\ndef to_string(obj) :\n```\n+ Example 1\n```.py\nnumber = 125.12525215\noutput = bt.to_string(number)\nprint(output)\n```\n> -> `125.12525215`\\\n> Return Type : `String`\n\n+ Example 2\n```.py\nmy_list = ['UwU this is so good :3', 'LETS GOO MAN !', 'okay you fine ! :3']\noutput = bt.to_string(my_list)\nprint(output)\n```\n> -> `UwU this is so good :3 LETS GOO MAN ! okay you fine ! :3`\\\n> Return Type : `String`\n\n# Credit\n+ Main Github Page : [https://github.com/haryobagas/](https://github.com/haryobagas/)\n+ Linkedin : [https://www.linkedin.com/in/haryobagas08/](https://www.linkedin.com/in/haryobagas08/)\n> Other documentation work in progress.\n\n**Bear Au Jus - ジュースとくま** @2020\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/haryobagas/btext",
    "keywords": "btext,bearaujus,bearaujus btext,basic string,text procesing,text cleaning,text normalization,text lemming,string procesing,string cleaning,string normalization,string lemming,text procesing in pandas,text cleaning in pandas,text normalization in pandas,text lemming in pandas,string procesing in pandas,string cleaning in pandas,string normalization in pandas,string lemming in pandas,data analysis,data cleaning,data science,data analysis in pandas,data cleaning in pandas,data science in pandas",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "btext",
    "package_url": "https://pypi.org/project/btext/",
    "platform": "",
    "project_url": "https://pypi.org/project/btext/",
    "project_urls": {
      "Homepage": "https://github.com/haryobagas/btext"
    },
    "release_url": "https://pypi.org/project/btext/1.0/",
    "requires_dist": [
      "textcleaner"
    ],
    "requires_python": "",
    "summary": "Bear Au Jus Text (btext) is a tool used for processing a text/string, optimized for data science and data analytics. btext can also implemented with pandas dataframe.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8969936,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "862c7f4bb8244ca70beded431b70ae428d078988f18b7478ef3dc1aa19751d6d",
          "md5": "8ca8f562f9f066b91e97e13a99f47534",
          "sha256": "afb7fca262cc3ad524a55ac10d83101696e2aa62a8fb462f89e037915bad32c6"
        },
        "downloads": -1,
        "filename": "btext-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ca8f562f9f066b91e97e13a99f47534",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7522,
        "upload_time": "2020-12-23T12:24:07",
        "upload_time_iso_8601": "2020-12-23T12:24:07.633020Z",
        "url": "https://files.pythonhosted.org/packages/86/2c/7f4bb8244ca70beded431b70ae428d078988f18b7478ef3dc1aa19751d6d/btext-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca44da2b4d3cca9474fd1300ec903b6605dd5c6d31054ce772e2ce381010f2ff",
          "md5": "24bfdce5c50ae0101a832e16f0f79aa7",
          "sha256": "d360803a0c9cdfc67b719017135caf6465061476e9a96b6aad4b4a39d4517170"
        },
        "downloads": -1,
        "filename": "btext-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "24bfdce5c50ae0101a832e16f0f79aa7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9937,
        "upload_time": "2020-12-23T12:24:09",
        "upload_time_iso_8601": "2020-12-23T12:24:09.298709Z",
        "url": "https://files.pythonhosted.org/packages/ca/44/da2b4d3cca9474fd1300ec903b6605dd5c6d31054ce772e2ce381010f2ff/btext-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "862c7f4bb8244ca70beded431b70ae428d078988f18b7478ef3dc1aa19751d6d",
        "md5": "8ca8f562f9f066b91e97e13a99f47534",
        "sha256": "afb7fca262cc3ad524a55ac10d83101696e2aa62a8fb462f89e037915bad32c6"
      },
      "downloads": -1,
      "filename": "btext-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ca8f562f9f066b91e97e13a99f47534",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7522,
      "upload_time": "2020-12-23T12:24:07",
      "upload_time_iso_8601": "2020-12-23T12:24:07.633020Z",
      "url": "https://files.pythonhosted.org/packages/86/2c/7f4bb8244ca70beded431b70ae428d078988f18b7478ef3dc1aa19751d6d/btext-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca44da2b4d3cca9474fd1300ec903b6605dd5c6d31054ce772e2ce381010f2ff",
        "md5": "24bfdce5c50ae0101a832e16f0f79aa7",
        "sha256": "d360803a0c9cdfc67b719017135caf6465061476e9a96b6aad4b4a39d4517170"
      },
      "downloads": -1,
      "filename": "btext-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "24bfdce5c50ae0101a832e16f0f79aa7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9937,
      "upload_time": "2020-12-23T12:24:09",
      "upload_time_iso_8601": "2020-12-23T12:24:09.298709Z",
      "url": "https://files.pythonhosted.org/packages/ca/44/da2b4d3cca9474fd1300ec903b6605dd5c6d31054ce772e2ce381010f2ff/btext-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}