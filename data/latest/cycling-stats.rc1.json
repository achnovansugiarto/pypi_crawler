{
  "info": {
    "author": "Eva van Weenen",
    "author_email": "evanweenen@ethz.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# cycling-stats - Calculate advanced cycling statistics from power and/or heart rate data\n\nCalculate statistics such as time spent in individualized heart rate and power zones, normalized power, intensity factor, training stress score, variability index, efficiency factor, chronic training load, acute training load and training stress balance, from heart rate and power meters.\n\n## Installation\nThe package is available under pypi:\n```\npip install cycling-stats\n```\n\n## Usage\nYou can use the package as follows. A simple example: you can import the function `training_stress_score` as follows.\n```python\nfrom cyclingstats.stats import training_stress_score\n```\n\nThe package requires that you have your data in a `pandas.DataFrame`. The following example illustrates when you have a time series from multiple separate training sessions, and you wish to calculate statistics separately for each day of cycling.\n\n```python\nimport pandas as pd\nfrom cyclingstats.stats import calc_hr_zones, calc_power_zones, agg_zones, agg_power \nfrom cyclingstats.stats import chronic_training_load, acute_training_load, training_stress_balance\n\n# read time series of power and/or heart rate\ndf = pd.read_csv(\"PATH_TO_YOUR_HEARTRATE_AND_POWER_DATA\")\ndf['date'] = pd.to_datetime(df['timestamp'].dt.date)\n# perform any other preprocessing steps here\n\n# ---------- zones\n# define LTHR and FTP to calculate custom Coggan heart rate and power zones\nLTHR = # TODO: fill in a number for the lactate threshold heart rate [bpm]\nFTP = # TODO: fill in a number for the functional threshold power [W]\n\nhr_zones = calc_hr_zones(LTHR)\npower_zones = calc_power_zones(FTP)\n\n# calculate hr and power zones\ndf_zones = df.groupby('date').apply(agg_zones, hr_zones=hr_zones, power_zones=power_zones)\n\n# ---------- power\ndf = df.set_index('timestamp')\n\n# calculate power statistics\ndf_power = df.groupby('date').apply(agg_power, FTP=FTP\n\n# fill up dates for which we don't have an entry to get exponential weighted mean (ewm)\ndates = df_power.index\ndf_power = df_power.reindex(date_range)\n\n# calculate ctl, atl and tsb\ndf_power['chronic_training_load'] = chronic_training_load(df_power['training_stress_score'])\ndf_power['acute_training_load'] = acute_training_load(df_power['training_stress_score'])\ndf_power['training_stress_balance'] = training_stress_balance(df_power['chronic_training_load'], df_power['acute_training_load'])\n\n# get back to indices for which there is a training session\ndf_power = df_power.loc[dates]\n```\n\nIf you are running into problems, feel welcome to contact the author (evanweenen@ethz.ch).\n\n## License\nThis code is &copy; E. van Weenen, 2022, and it is made available under the MIT license enclosed with the software.\n\nOver and above the legal restrictions imposed by this license, if you use this software for an academic publication then you are obliged to provide proper attribution. \n```\nE. van Weenen. cycling-stats: Calculate advanced cycling statistics from power and/or heart rate data, v0.1 (2022). github.com/evavanweenen/cycling-stats.\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/evavanweenen/cycling-stats",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cycling-stats",
    "package_url": "https://pypi.org/project/cycling-stats/",
    "platform": null,
    "project_url": "https://pypi.org/project/cycling-stats/",
    "project_urls": {
      "Homepage": "https://github.com/evavanweenen/cycling-stats"
    },
    "release_url": "https://pypi.org/project/cycling-stats/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Calculate advanced cycling statistics from power and/or heart rate data",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16187052,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "362291aa787a82a2240209f81d4bf24fdb6f9cba95ddf7b2db85e1f5a8b78056",
          "md5": "bd322b203681b81e875d4ab28cbcae9a",
          "sha256": "697e67c489a612fc0cbad65422ba71675f325d8a42c155170f2cd14d921cb103"
        },
        "downloads": -1,
        "filename": "cycling-stats-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bd322b203681b81e875d4ab28cbcae9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4577,
        "upload_time": "2022-12-22T15:18:41",
        "upload_time_iso_8601": "2022-12-22T15:18:41.883266Z",
        "url": "https://files.pythonhosted.org/packages/36/22/91aa787a82a2240209f81d4bf24fdb6f9cba95ddf7b2db85e1f5a8b78056/cycling-stats-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "362291aa787a82a2240209f81d4bf24fdb6f9cba95ddf7b2db85e1f5a8b78056",
        "md5": "bd322b203681b81e875d4ab28cbcae9a",
        "sha256": "697e67c489a612fc0cbad65422ba71675f325d8a42c155170f2cd14d921cb103"
      },
      "downloads": -1,
      "filename": "cycling-stats-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bd322b203681b81e875d4ab28cbcae9a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4577,
      "upload_time": "2022-12-22T15:18:41",
      "upload_time_iso_8601": "2022-12-22T15:18:41.883266Z",
      "url": "https://files.pythonhosted.org/packages/36/22/91aa787a82a2240209f81d4bf24fdb6f9cba95ddf7b2db85e1f5a8b78056/cycling-stats-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}