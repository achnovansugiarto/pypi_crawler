{
  "info": {
    "author": "Dave Simons",
    "author_email": "simonsdave@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "clair-cicd\n==========\n\n|Maintained| |MIT license| |PythonVersions| |status| |PyPI|\n|Requirements| |CircleCI| |codecov|\n|docker-simonsdave/clair-cicd-database|\n|docker-simonsdave/clair-cicd-clair|\n\n`Clair <https://github.com/coreos/clair>`__, `released by CoreOS in Nov\n’16 <https://coreos.com/blog/vulnerability-analysis-for-containers/>`__,\nis a very effective tool for statically analyzing docker images to\ndetermine which known vulnerabilities exist in the images. Integrating\nClair into a CI/CD pipeline:\n\n1. is complex (believe this is partly a documentation challenge)\n2. creates performance problems (building the Clair required Postgres\n   database of vulnerabilities is slow)\n3. in and of itself is insufficient from a risk assessment point of view\n   because once vulnerabilities are identified there’s a lack of\n   prescriptive guidance on how to act on the identified vulnerabilities\n\nThis repo was created to address the above challenges.\n\nBackground\n----------\n\nThe roots of this repo center around the following beliefs:\n\n-  when inserted into a CI/CD pipeline\n   `Clair <https://github.com/coreos/clair>`__ can be a very effective\n   foundation for the automated assessment of Docker image vulnerability\n   risk\n-  services should be run in Docker containers and thus CI/CD pipelines\n   should be focused on the automated generation, assessment and\n   ultimately deployment of Docker images\n-  understanding and assessing the risk profile of services is important\n   ie. security is important\n-  Docker images should **not** be pushed to a Docker registry until\n   their risk profile is understood (this is an important one)\n-  the CI/CD pipeline has to be fast. how fast? ideally < 5 minutes\n   between code commit and automated (CD) deployment begins rolling out\n   a change\n-  there should be a clear division of responsibilities between those\n   who create a docker image (service engineer) and those who determine\n   the risk of vulnerabilities in a docker image (security analyst)\n-  the risk assessment process should generate evidence which can be\n   used to understand the risk assessment decision\n\nKey Participants\n----------------\n\n-  service engineer - responsible for implementing a service that is\n   packaged in a docker image\n-  security analyst - responsible for defining whitelists which are\n   consumed by ``clair_cicd`` to influence Docker image risk assessment\n   decisions\n\nHow to Use\n----------\n\nGetting Started\n~~~~~~~~~~~~~~~\n\nTo start using ``clair-cicd``, a service engineer inserts a single line\nof code into a service’s CI pipeline. The single line of code runs the\nshell script\n`assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__.\nPart of the CI pipeline’s responsibility is to build the docker image\nand then push that docker image to a docker registry. The single line of\n``clair-cicd`` code should appear after the docker image is built and\ntested but before the docker image is pushed to a docker registry.\n\nIn this simple case,\n`assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__\nreturns a zero exit status if the docker image contains no known\nvulnerabilities above a medium severity. If the docker image contains\nany known vulnerabilities with a severity higher than medium,\n`assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__\nreturns a non-zero exit status and the build fails ie. the build should\nfail before the docker image is pushed to a docker registry.\n\nThe example illustrates what’s described about for the `alpine:3.4\ndocker image <https://hub.docker.com/_/alpine?tab=tags>`__.\n\n.. code:: bash\n\n   ~> curl -s -L \\\n     https://raw.githubusercontent.com/simonsdave/clair-cicd/master/bin/assess-image-risk.sh | \\\n     bash -s -- alpine:3.4\n   ~> echo $?\n   0\n   ~>\n\nUnderstanding the Risk Assessment Decision\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo understand how ``assess-image-risk.sh`` is making its risk assessment\ndecision try using the ``-v`` flag.\n\n.. code:: bash\n\n   ~> curl -s -L \\\n     https://raw.githubusercontent.com/simonsdave/clair-cicd/master/bin/assess-image-risk.sh | \\\n     bash -s -- -v alpine:3.4\n   2020-01-12 16:43:35 pulling clair database image 'simonsdave/clair-cicd-database:latest'\n   2020-01-12 16:44:17 successfully pulled clair database image\n   2020-01-12 16:44:17 starting clair database container 'clair-db-c1dbb5f93ae98755'\n   2020-01-12 16:44:23 waiting for database server in container 'clair-db-c1dbb5f93ae98755' to start ...........................\n   2020-01-12 16:44:54 successfully started clair database container\n   2020-01-12 16:44:54 clair configuration in '/var/folders/7x/rr443kj575s8zz54jrbrp4jc0000gn/T/tmp.ElAlhGNl'\n   2020-01-12 16:44:59 pulling clair image 'simonsdave/clair-cicd-clair:latest'\n   2020-01-12 16:45:13 successfully pulled clair image 'simonsdave/clair-cicd-clair:latest'\n   2020-01-12 16:45:13 starting clair container 'clair-e9573ae537134fa0'\n   2020-01-12 16:45:15 successfully started clair container 'clair-e9573ae537134fa0'\n   2020-01-12 16:45:15 saving docker image 'alpine:3.4' to '/tmp/tmp.IaNHCH'\n   2020-01-12 16:45:16 successfully saved docker image 'alpine:3.4'\n   2020-01-12 16:45:16 starting to create clair layers\n   2020-01-12 16:45:16 creating clair layer '378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d'\n   2020-01-12 16:45:16 successfully created clair layer '378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d'\n   2020-01-12 16:45:16 done creating clair layers\n   2020-01-12 16:45:16 starting to get vulnerabilities for clair layers\n   2020-01-12 16:45:16 saving vulnerabilities to directory '/tmp/tmp.MDncHN'\n   2020-01-12 16:45:16 getting vulnerabilities for layer '378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d'\n   2020-01-12 16:45:16 successfully got vulnerabilities for layer '378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d'\n   2020-01-12 16:45:16 done getting vulnerabilities for clair layers\n   2020-01-12 21:45:17 INFO io:89 Looking for vulnerabilities in directory '/tmp/tmp.MDncHN'\n   2020-01-12 21:45:17 INFO io:95 Found 1 files with vulnerabilities in directory '/tmp/tmp.MDncHN'\n   2020-01-12 21:45:17 INFO io:104 Looking for vulnerabilities in '/tmp/tmp.MDncHN/378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d.json'\n   2020-01-12 21:45:17 INFO io:122 Found 0 vulnerabilities in '/tmp/tmp.MDncHN/378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d.json'\n   2020-01-12 21:45:17 INFO io:133 Found 0 vulnerabilities in 1 files in directory '/tmp/tmp.MDncHN'\n   2020-01-12 21:45:17 INFO assessor:19 Assessment starts\n   2020-01-12 21:45:17 INFO assessor:26 Assessment ends - pass\n   ~> echo $?\n   0\n   ~>\n\nAdding a Vulnerability Whitelist\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn the above examples a default vulnerability whitelist was used. When\nspecified as a JSON doc, this whitelist would be:\n\n.. code:: json\n\n   {\n     \"ignoreSevertiesAtOrBelow\": \"medium\"\n   }\n\nBy default,\n`assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__\nreturns a non-zero exit status if any vulnerabilities are identified in\nthe image with a severity higher than medium. The medium is derived from\nthe default vulnerability whitelist.\n\nThe example below illustrate how to specify a vulnerability whitelist\nand with a severity other than medium. Note the use of the ``json://``\nprefix to indicate this is an inline whitelist.\n\n.. code:: bash\n\n   ~> curl -s -L \\\n     https://raw.githubusercontent.com/simonsdave/clair-cicd/master/bin/assess-image-risk.sh | \\\n     bash -s -- -v --whitelist 'json://{\"ignoreSevertiesAtOrBelow\": \"negligible\"}' ubuntu:18.04\n   2020-01-12 16:46:56 pulling clair database image 'simonsdave/clair-cicd-database:latest'\n   2020-01-12 16:46:58 successfully pulled clair database image\n   2020-01-12 16:46:58 starting clair database container 'clair-db-3b0811925f7e8bc2'\n   2020-01-12 16:46:59 waiting for database server in container 'clair-db-3b0811925f7e8bc2' to start .............................\n   2020-01-12 16:47:32 successfully started clair database container\n   2020-01-12 16:47:32 clair configuration in '/var/folders/7x/rr443kj575s8zz54jrbrp4jc0000gn/T/tmp.BXCs3Giy'\n   2020-01-12 16:47:34 pulling clair image 'simonsdave/clair-cicd-clair:latest'\n   2020-01-12 16:47:36 successfully pulled clair image 'simonsdave/clair-cicd-clair:latest'\n   2020-01-12 16:47:36 starting clair container 'clair-fc579c71e7daba57'\n   2020-01-12 16:47:38 successfully started clair container 'clair-fc579c71e7daba57'\n   2020-01-12 16:47:38 saving docker image 'ubuntu:18.04' to '/tmp/tmp.lPDhNd'\n   2020-01-12 16:47:43 successfully saved docker image 'ubuntu:18.04'\n   2020-01-12 16:47:43 starting to create clair layers\n   2020-01-12 16:47:43 creating clair layer 'cc59b0ca1cf21d77c81a98138703008daa167b1ab1a115849d498dba64e738dd'\n   2020-01-12 16:47:43 successfully created clair layer 'cc59b0ca1cf21d77c81a98138703008daa167b1ab1a115849d498dba64e738dd'\n   2020-01-12 16:47:43 creating clair layer '27a911bb510bf1e9458437f0f44216fd38fd08c462ed7aa026d91aab8c054e54'\n   2020-01-12 16:47:44 successfully created clair layer '27a911bb510bf1e9458437f0f44216fd38fd08c462ed7aa026d91aab8c054e54'\n   2020-01-12 16:47:44 creating clair layer 'd80735acaa72040a0a98ca3ae6891f9abb4e2f5d627b4099c4fefdc3ce1e696e'\n   2020-01-12 16:47:44 successfully created clair layer 'd80735acaa72040a0a98ca3ae6891f9abb4e2f5d627b4099c4fefdc3ce1e696e'\n   2020-01-12 16:47:44 creating clair layer '1ee34a985f7aef86436a5519f5ad83f866a74c7d9a0c22e47c4213ee9cb64e6d'\n   2020-01-12 16:47:44 successfully created clair layer '1ee34a985f7aef86436a5519f5ad83f866a74c7d9a0c22e47c4213ee9cb64e6d'\n   2020-01-12 16:47:44 done creating clair layers\n   2020-01-12 16:47:44 starting to get vulnerabilities for clair layers\n   2020-01-12 16:47:44 saving vulnerabilities to directory '/tmp/tmp.dkfgmI'\n   2020-01-12 16:47:44 getting vulnerabilities for layer 'cc59b0ca1cf21d77c81a98138703008daa167b1ab1a115849d498dba64e738dd'\n   2020-01-12 16:47:44 successfully got vulnerabilities for layer 'cc59b0ca1cf21d77c81a98138703008daa167b1ab1a115849d498dba64e738dd'\n   2020-01-12 16:47:44 getting vulnerabilities for layer '27a911bb510bf1e9458437f0f44216fd38fd08c462ed7aa026d91aab8c054e54'\n   2020-01-12 16:47:44 successfully got vulnerabilities for layer '27a911bb510bf1e9458437f0f44216fd38fd08c462ed7aa026d91aab8c054e54'\n   2020-01-12 16:47:44 getting vulnerabilities for layer 'd80735acaa72040a0a98ca3ae6891f9abb4e2f5d627b4099c4fefdc3ce1e696e'\n   2020-01-12 16:47:44 successfully got vulnerabilities for layer 'd80735acaa72040a0a98ca3ae6891f9abb4e2f5d627b4099c4fefdc3ce1e696e'\n   2020-01-12 16:47:44 getting vulnerabilities for layer '1ee34a985f7aef86436a5519f5ad83f866a74c7d9a0c22e47c4213ee9cb64e6d'\n   2020-01-12 16:47:44 successfully got vulnerabilities for layer '1ee34a985f7aef86436a5519f5ad83f866a74c7d9a0c22e47c4213ee9cb64e6d'\n   2020-01-12 16:47:44 done getting vulnerabilities for clair layers\n   2020-01-12 21:47:45 INFO io:89 Looking for vulnerabilities in directory '/tmp/tmp.dkfgmI'\n   2020-01-12 21:47:45 INFO io:95 Found 4 files with vulnerabilities in directory '/tmp/tmp.dkfgmI'\n   2020-01-12 21:47:45 INFO io:104 Looking for vulnerabilities in '/tmp/tmp.dkfgmI/27a911bb510bf1e9458437f0f44216fd38fd08c462ed7aa026d91aab8c054e54.json'\n   2020-01-12 21:47:45 INFO io:122 Found 33 vulnerabilities in '/tmp/tmp.dkfgmI/27a911bb510bf1e9458437f0f44216fd38fd08c462ed7aa026d91aab8c054e54.json'\n   2020-01-12 21:47:45 INFO io:104 Looking for vulnerabilities in '/tmp/tmp.dkfgmI/cc59b0ca1cf21d77c81a98138703008daa167b1ab1a115849d498dba64e738dd.json'\n   2020-01-12 21:47:45 INFO io:122 Found 33 vulnerabilities in '/tmp/tmp.dkfgmI/cc59b0ca1cf21d77c81a98138703008daa167b1ab1a115849d498dba64e738dd.json'\n   2020-01-12 21:47:45 INFO io:104 Looking for vulnerabilities in '/tmp/tmp.dkfgmI/1ee34a985f7aef86436a5519f5ad83f866a74c7d9a0c22e47c4213ee9cb64e6d.json'\n   2020-01-12 21:47:45 INFO io:122 Found 33 vulnerabilities in '/tmp/tmp.dkfgmI/1ee34a985f7aef86436a5519f5ad83f866a74c7d9a0c22e47c4213ee9cb64e6d.json'\n   2020-01-12 21:47:45 INFO io:104 Looking for vulnerabilities in '/tmp/tmp.dkfgmI/d80735acaa72040a0a98ca3ae6891f9abb4e2f5d627b4099c4fefdc3ce1e696e.json'\n   2020-01-12 21:47:45 INFO io:122 Found 33 vulnerabilities in '/tmp/tmp.dkfgmI/d80735acaa72040a0a98ca3ae6891f9abb4e2f5d627b4099c4fefdc3ce1e696e.json'\n   2020-01-12 21:47:45 INFO io:133 Found 33 vulnerabilities in 4 files in directory '/tmp/tmp.dkfgmI'\n   2020-01-12 21:47:45 INFO assessor:19 Assessment starts\n   2020-01-12 21:47:45 INFO assessor:34 Assessing vulnerability CVE-2018-11236 - start\n   2020-01-12 21:47:45 INFO assessor:52 Vulnerability CVE-2018-11236 @ severity medium greater than whitelist severity @ negligible - fail\n   2020-01-12 21:47:45 INFO assessor:36 Assessing vulnerability CVE-2018-11236 - finish\n   2020-01-12 21:47:45 INFO assessor:23 Assessment ends - fail\n   ~> echo $?\n   1\n   ~>\n\nThe above is an example of an inline whitelist. It’s also possible to\nspecify a whitelist in a file. The example below illustrates the usage.\nNote use of the ``file://`` prefix to indicate the whitelist is\ncontained in a file.\n\n.. code:: bash\n\n   ~> cat whitelist.json\n   {\n     \"ignoreSevertiesAtOrBelow\": \"medium\"\n   }\n   ~> curl -s -L \\\n     https://raw.githubusercontent.com/simonsdave/clair-cicd/master/bin/assess-image-risk.sh | \\\n     bash -s -- -v --whitelist file://whitelist.json alpine:3.4\n   2020-01-12 16:48:41 pulling clair database image 'simonsdave/clair-cicd-database:latest'\n   2020-01-12 16:48:42 successfully pulled clair database image\n   2020-01-12 16:48:42 starting clair database container 'clair-db-191152e37b864e4b'\n   2020-01-12 16:48:43 waiting for database server in container 'clair-db-191152e37b864e4b' to start .............................\n   2020-01-12 16:49:16 successfully started clair database container\n   2020-01-12 16:49:16 clair configuration in '/var/folders/7x/rr443kj575s8zz54jrbrp4jc0000gn/T/tmp.GdlBNmiG'\n   2020-01-12 16:49:19 pulling clair image 'simonsdave/clair-cicd-clair:latest'\n   2020-01-12 16:49:20 successfully pulled clair image 'simonsdave/clair-cicd-clair:latest'\n   2020-01-12 16:49:20 starting clair container 'clair-747d1c50606fba7e'\n   2020-01-12 16:49:21 successfully started clair container 'clair-747d1c50606fba7e'\n   2020-01-12 16:49:22 saving docker image 'alpine:3.4' to '/tmp/tmp.Eldkbe'\n   2020-01-12 16:49:23 successfully saved docker image 'alpine:3.4'\n   2020-01-12 16:49:23 starting to create clair layers\n   2020-01-12 16:49:23 creating clair layer '378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d'\n   2020-01-12 16:49:23 successfully created clair layer '378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d'\n   2020-01-12 16:49:23 done creating clair layers\n   2020-01-12 16:49:23 starting to get vulnerabilities for clair layers\n   2020-01-12 16:49:23 saving vulnerabilities to directory '/tmp/tmp.pCOhlL'\n   2020-01-12 16:49:23 getting vulnerabilities for layer '378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d'\n   2020-01-12 16:49:23 successfully got vulnerabilities for layer '378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d'\n   2020-01-12 16:49:23 done getting vulnerabilities for clair layers\n   2020-01-12 21:49:23 INFO io:89 Looking for vulnerabilities in directory '/tmp/tmp.pCOhlL'\n   2020-01-12 21:49:23 INFO io:95 Found 1 files with vulnerabilities in directory '/tmp/tmp.pCOhlL'\n   2020-01-12 21:49:23 INFO io:104 Looking for vulnerabilities in '/tmp/tmp.pCOhlL/378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d.json'\n   2020-01-12 21:49:23 INFO io:122 Found 0 vulnerabilities in '/tmp/tmp.pCOhlL/378cb6b4a17e08c366cebd813d218f60889848387fa61a56ac054ca027a4890d.json'\n   2020-01-12 21:49:23 INFO io:133 Found 0 vulnerabilities in 1 files in directory '/tmp/tmp.pCOhlL'\n   2020-01-12 21:49:23 INFO assessor:19 Assessment starts\n   2020-01-12 21:49:23 INFO assessor:26 Assessment ends - pass\n   ~> echo $?\n   0\n   ~>\n\nWhitelists can also contain vulnerabilities. The example below\nillustrates this capability. If you add the ``-v`` (verbose) flag to\n``assess-image-risk.sh`` you see exactly how the vulnerabilities impact\nthe risk assessment with statements like\n``Vulnerability CVE-2019-13627 in whitelist - pass``\n\n.. code:: bash\n\n   ~> curl -s -L \\\n     https://raw.githubusercontent.com/simonsdave/clair-cicd/master/bin/assess-image-risk.sh | \\\n     bash -s -- --whitelist 'json://{\"ignoreSevertiesAtOrBelow\":\"low\"}' ubuntu:18.04\n   ~> echo $?\n   1\n   ~> cat whitelist.json\n   {\n     \"ignoreSevertiesAtOrBelow\": \"low\",\n     \"vulnerabilities\": [\n       { \"cveId\": \"CVE-2018-20839\", \"rationale\": \"reason #1\" },\n       { \"cveId\": \"CVE-2019-5188\", \"rationale\": \"reason #2\" },\n       { \"cveId\": \"CVE-2018-11236\", \"rationale\": \"reason #3\" },\n       { \"cveId\": \"CVE-2019-13627\", \"rationale\": \"reason #4\" },\n       { \"cveId\": \"CVE-2019-13050\", \"rationale\": \"reason #5\" },\n       { \"cveId\": \"CVE-2018-11237\", \"rationale\": \"reason #6\" },\n       { \"cveId\": \"CVE-2018-19591\", \"rationale\": \"reason #7\" }\n     ]\n   }\n   ~> curl -s -L \\\n     https://raw.githubusercontent.com/simonsdave/clair-cicd/master/bin/assess-image-risk.sh | \\\n     bash -s -- --whitelist 'file://whitelist.json' ubuntu:18.04\n   ~> echo $?\n   0\n   ~>\n\nResponsibilities\n^^^^^^^^^^^^^^^^\n\n-  maintained by security analyst **not** service engineer\n-  checked into source code control and appropriate change management\n   processes are used to make changes (code reviews, feature branches,\n   etc)\n\nHow it Works + Requirements/Assumptions\n---------------------------------------\n\nThere are 3 moving pieces:\n\n1. `assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__\n   is bash script which does the heavy lifting to co-ordinate the\n   interaction of the 2 other moving pieces\n2. `Clair’s <https://github.com/coreos/clair>`__ vulnerability database\n   which is packaged inside the docker image\n   `simonsdave/clair-database <https://hub.docker.com/r/simonsdave/clair-database/>`__\n   - a `CircleCI <https://circleci.com/>`__ cron job is used to rebuild\n   `simonsdave/clair-database <https://hub.docker.com/r/simonsdave/clair-database/>`__\n   3 days per week to ensure the vulnerability database is current\n3. a set of Python and Bash risk assessment scripts packaged in the\n   `simonsdave/clair-cicd-clair <https://hub.docker.com/r/simonsdave/clair-cicd-clair/>`__\n   docker image which is based on the docker image\n   `quay.io/coreos/clair <https://quay.io/repository/coreos/clair>`__\n   which packages up `Clair <https://github.com/coreos/clair>`__\n\nFrom the samples at the start of this doc you’ll see the approach of\ncurl’ing the latest release of\n`assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__\ninto a localy run bash shell.\n`assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__\nthen spins up a container using the\n`simonsdave/clair-database <https://hub.docker.com/r/simonsdave/clair-database/>`__.\nAnother container is then run using\n`simonsdave/clair-cicd-clair <https://hub.docker.com/r/simonsdave/clair-cicd-clair/>`__\nwith the\n`simonsdave/clair-cicd-clair <https://hub.docker.com/r/simonsdave/clair-cicd-clair/>`__\ncontainer being able to talk with the\n`simonsdave/clair-database <https://hub.docker.com/r/simonsdave/clair-database/>`__\ncontainer. Once the\n`simonsdave/clair-cicd-clair <https://hub.docker.com/r/simonsdave/clair-cicd-clair/>`__\ncontainer is running,\n`assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__\ndocker exec’s `this bash\nscript <dockerfiles/clair/assess-image-risk.sh>`__ which does the actual\nrisk assessment.\n\nArmed with the understanding of how ``clair-cicd`` works you’ll\nappreciate that the ability to execute\n`assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__\nis what defines the requirements for the execution environment.\n`assess-image-risk.sh <https://github.com/simonsdave/clair-cicd/blob/release-1.0.2/bin/assess-image-risk.sh>`__\nis a bash script used to launch the risk assessment process and as such\nit’s this script which defines the bulk of the assumptions/requirements\nfor ``clair-cicd`` - the script uses docker, sed and openssl so all\nthese need to be available in the environment running ``clair-cicd``\n\nReferences\n----------\n\n-  `29 Jan ’20 - What Is DevSecOps, and How Is It Different from\n   DevOps? <https://research.g2.com/insights/what-is-devsecops-and-how-is-it-different-from-devops>`__\n-  `1 Oct ’18 - Baking Compliance in your CI/CD\n   Pipeline <https://thenewstack.io/baking-compliance-in-your-ci-cd-pipeline>`__\n-  `11 Sep ’18 - What is\n   DevSecOps? <https://medium.com/@aditi.chaudhry92/what-is-devsecops-cb14cfd457b2>`__\n-  `20 Jun ’18 - Where in the DevOps cycle do you do\n   security? <https://opensource.com/article/18/6/where-cycle-security-devops>`__\n-  `8 May ’18 - DevSecOps: 7 habits of strong security\n   organizations <https://enterprisersproject.com/article/2018/5/devsecops-7-habits-strong-security-organizations>`__\n-  `18 Apr ’18 - The Cloudcast #343 - Container Vulnerability\n   Scanning <http://www.thecloudcast.net/2018/04/the-cloudcast-343-container.html>`__\n-  `21 Feb ’18 - Automated Compliance Testing Tool Accelerates\n   DevSecOps <https://www.securityweek.com/automated-compliance-testing-tool-accelerates-devsecops>`__\n-  `20 Feb ’18 - 6 Requirements for Achieving\n   DevSecOps <https://securityboulevard.com/2018/02/6-requirements-for-achieving-devsecops/>`__\n-  `22 Jan ’18 - DevOps and Security: How to Overcome Cultural\n   Challenges and Transform to True\n   DevSecOps <https://thenewstack.io/devops-security-overcome-cultural-challenges-transform-true-devsecops/>`__\n-  `15 Jan ’18 - Why DevSecOps matters to IT\n   leaders <https://enterprisersproject.com/article/2018/1/why-devsecops-matters-it-leaders>`__\n-  `27 Nov ’17 - What is vulnerability management? Processes and\n   software for prioritizing\n   threats <https://www.csoonline.com/article/3238080/vulnerabilities/what-is-vulnerability-management-processes-and-software-for-prioritizing-threats.html>`__\n-  `23 Oct ’17 - The Ten Cybersecurity\n   Commandments <http://www.securityweek.com/ten-cybersecurity-commandments>`__\n-  `9 Oct ’17 - 10 layers of Linux container\n   security <https://opensource.com/article/17/10/10-layers-container-security>`__\n-  `5 Oct ’17 - How to Maintain Security when Rolling out\n   DevOps <https://www.informationweek.com/devops/how-to-maintain-security-when-rolling-out-devops/a/d-id/1330047?imm_mid=0f71d7&cmp=em-webops-na-na-newsltr_security_20171010_length_control>`__\n-  `26 Jan ’17 - DevOps and Separation of\n   Duties <https://www.newcontext.com/devops-and-separation-of-duties/>`__\n-  `26 Jul ’16 - Injecting security into Continuous\n   Delivery <https://www.oreilly.com/learning/injecting-security-into-continuous-delivery>`__\n-  `5 Jun ’16 - <— Shifting Security to the\n   Left <http://www.devsecops.org/blog/2016/5/20/-security>`__\n-  `Five Secrets and Two Common “Gotchas” of Vulnerability\n   Scanning <https://www.kennasecurity.com/resources/secrets-gotchas-of-vuln-scanning>`__\n\n.. |Maintained| image:: https://img.shields.io/maintenance/yes/2020.svg\n.. |MIT license| image:: http://img.shields.io/badge/license-MIT-brightgreen.svg\n   :target: http://opensource.org/licenses/MIT\n.. |PythonVersions| image:: https://img.shields.io/pypi/pyversions/clair-cicd.svg?style=flat\n.. |status| image:: https://img.shields.io/pypi/status/clair-cicd.svg?style=flat\n.. |PyPI| image:: https://img.shields.io/pypi/v/clair-cicd.svg?style=flat\n   :target: https://pypi.python.org/pypi/clair-cicd\n.. |Requirements| image:: https://requires.io/github/simonsdave/clair-cicd/requirements.svg?branch=release-1.0.2\n   :target: https://requires.io/github/simonsdave/clair-cicd/requirements/?branch=release-1.0.2\n.. |CircleCI| image:: https://circleci.com/gh/simonsdave/clair-cicd/tree/release-1.0.2.svg?style=shield\n   :target: https://circleci.com/gh/simonsdave/clair-cicd/tree/release-1.0.2\n.. |codecov| image:: https://codecov.io/gh/simonsdave/clair-cicd/branch/release-1.0.2/graph/badge.svg\n   :target: https://codecov.io/gh/simonsdave/clair-cicd/branch/release-1.0.2\n.. |docker-simonsdave/clair-cicd-database| image:: https://img.shields.io/badge/docker-simonsdave%2Fclair%20cicd%20database-blue.svg\n   :target: https://hub.docker.com/r/simonsdave/clair-cicd-database/\n.. |docker-simonsdave/clair-cicd-clair| image:: https://img.shields.io/badge/docker-simonsdave%2Fclair%20cicd%20clair-blue.svg\n   :target: https://hub.docker.com/r/simonsdave/clair-cicd-clair/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/simonsdave/clair-cicd/tarball/v1.0.2",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/simonsdave/clair-cicd",
    "keywords": "development,tools",
    "license": "MIT",
    "maintainer": "Dave Simons",
    "maintainer_email": "simonsdave@gmail.com",
    "name": "clair-cicd",
    "package_url": "https://pypi.org/project/clair-cicd/",
    "platform": "",
    "project_url": "https://pypi.org/project/clair-cicd/",
    "project_urls": {
      "Download": "https://github.com/simonsdave/clair-cicd/tarball/v1.0.2",
      "Homepage": "https://github.com/simonsdave/clair-cicd"
    },
    "release_url": "https://pypi.org/project/clair-cicd/1.0.2/",
    "requires_dist": [
      "jsonschema (==3.2.0)"
    ],
    "requires_python": "",
    "summary": "Clair CI/CD",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6682472,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff9ab5012a106a3f41836fcc9fe4d85bd38ed0649bcdcb20566f603249ae49f6",
          "md5": "ffbbc675b3bbd308e82ba7d6e6603f0c",
          "sha256": "8186fbe9cc987ac58b2960e455e9b2548dfbb643956f908434e540132658bf8a"
        },
        "downloads": -1,
        "filename": "clair_cicd-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffbbc675b3bbd308e82ba7d6e6603f0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20187,
        "upload_time": "2020-02-23T00:28:06",
        "upload_time_iso_8601": "2020-02-23T00:28:06.575969Z",
        "url": "https://files.pythonhosted.org/packages/ff/9a/b5012a106a3f41836fcc9fe4d85bd38ed0649bcdcb20566f603249ae49f6/clair_cicd-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37b6fbe9c9f75857f669411d3e9f7687052bcd2f854ad628faf5df9ef2b2a964",
          "md5": "55ff9b9a77c394e1b617a1b5a50c8b90",
          "sha256": "1dcf245526e245b8e713c49ff818849908644baa9445de76777f79eca81e3c00"
        },
        "downloads": -1,
        "filename": "clair-cicd-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "55ff9b9a77c394e1b617a1b5a50c8b90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19181,
        "upload_time": "2020-02-23T00:28:09",
        "upload_time_iso_8601": "2020-02-23T00:28:09.098939Z",
        "url": "https://files.pythonhosted.org/packages/37/b6/fbe9c9f75857f669411d3e9f7687052bcd2f854ad628faf5df9ef2b2a964/clair-cicd-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff9ab5012a106a3f41836fcc9fe4d85bd38ed0649bcdcb20566f603249ae49f6",
        "md5": "ffbbc675b3bbd308e82ba7d6e6603f0c",
        "sha256": "8186fbe9cc987ac58b2960e455e9b2548dfbb643956f908434e540132658bf8a"
      },
      "downloads": -1,
      "filename": "clair_cicd-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ffbbc675b3bbd308e82ba7d6e6603f0c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20187,
      "upload_time": "2020-02-23T00:28:06",
      "upload_time_iso_8601": "2020-02-23T00:28:06.575969Z",
      "url": "https://files.pythonhosted.org/packages/ff/9a/b5012a106a3f41836fcc9fe4d85bd38ed0649bcdcb20566f603249ae49f6/clair_cicd-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37b6fbe9c9f75857f669411d3e9f7687052bcd2f854ad628faf5df9ef2b2a964",
        "md5": "55ff9b9a77c394e1b617a1b5a50c8b90",
        "sha256": "1dcf245526e245b8e713c49ff818849908644baa9445de76777f79eca81e3c00"
      },
      "downloads": -1,
      "filename": "clair-cicd-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "55ff9b9a77c394e1b617a1b5a50c8b90",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19181,
      "upload_time": "2020-02-23T00:28:09",
      "upload_time_iso_8601": "2020-02-23T00:28:09.098939Z",
      "url": "https://files.pythonhosted.org/packages/37/b6/fbe9c9f75857f669411d3e9f7687052bcd2f854ad628faf5df9ef2b2a964/clair-cicd-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}