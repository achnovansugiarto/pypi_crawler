{
  "info": {
    "author": "",
    "author_email": "Matt Bright <mattbright1974@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Rootform_2d\nCalculation of and with root forms in 2 Dimensions\n\n**Utility Functions**\n\n*distgen(q, v_1, v_2)* is a generic Minkowkski distance calculator in R^2. It takes two inputs - a value of q >= 0 and two points in R^2 given as lists. If q=0 it will return the Chebyshev (L_inf) distance between points, otherwise it will return the L_q distance.\n\n*mincyc(l)* takes a list l of any length and returns the cyclic permutation that puts the smallest list member first\n\n*roundlist(l,r)* takes a list of floats l and an integer value r. It returns l with r-rounded float values.\n\n*minf(a,b,c,d)* calculates the quantity max(|a-b|, |c-d|, |a+b-c+d|/2) required for the root form distance\n\n*makelat(a,b,t)* will return the vectors of a Niggli Reduced 2D lattice given two lengths a, b and an angle t\n\n*sb_sign(veclist)* will take a list of three vectors and, assuming that they are an obtuse superbase, calculate the sign of that superbase\n\n*index_sorted(list)* will take any list of quantities, and return a related list whose value at each index is the position the quantity at that index in the original list would be at in a sorted version of the list.\n\n**Lat2D**\n\nThe Lat2D class should be entered as two lists [[x_1, y_1], [x_2, y_2]]. The following methods are available:\n\n*make_obsb()* will iterate the reduction step detailed in the paper until an obtuse superbase is reached\n\n*sb_sign()* will calculate the sign of the superbase (positive if superbase vectors are ordered anticlockwise, negative if superbase vectors are ordered clockwise)\n\n*make_cf* returns the **unsorted** coform for the lattice\n\n*lattice_sign(tol = 10**-6)* returns the sign of the lattice as calculated from the coform - it reverses the sign of the superbase if a swap of two values is required to order the coform values list, or keeps that sign if ordering the list requires only permutation. It will the sign to 0 if any value in the coform is less than the input tolerance (10**-6 default).\n\n*make_rf(tol= 10**-6* returns the signed root form object - it will return 0 if the coform is achiral (to within a set tolerance of $10^-6$), otherwise it will return the sign passed to it by the *lattice_sign* function.\n\n**RF_2signed Class**\n\nRF2_signed objects consist of a pair of inputs - an ordered list of three positive numbers and a sign (0, +1, -1). If an **achiral** root forms is entered, the sign will default to 0 regardless of the input. If the user inputs an unordered list there will be a warning message:\n\n*rightsign()* will return the unordered root form - that is, it will swap the last two values of the root form if the sign is negative\n\n*rf_chir(dtype = 0, pgroup = 2)* will, return the signed L_inf or L_2 based point group chirality of the root form. Id pgroup is set to 4 or 6, the D4 or D6 chirality will instead be calculated. If dtype is set to 2, the L_2 distance will be calculated rather than L_inf\n\n*projform()* will return the co-ordinates of the form in the quotient triangle, along with the sign of the root form, as a PF2 object.\n\n*coform2d()* and *voform2d()* will return the coform  and voform for the obtuse superbase represented by the root form. Vectors are in anticlockwise order as stated in the paper.\n\n*make2lat()* will reconstitute the actual 2 dimensional lattice based on the input root form. Note that the output lattice will **not** be Niggli reduced - it will be the two vectors v_1, v_2 calculated as part of the obtuse superbase.\n\n**PF2 Class**\n\nProjected Form (PF2) objects should be entered  as a list [x, y] followed by a value +/-1 or 0 indicating the sign of the lattice from which the projected form is derived, and a tolerance set by defalut at 10**-6 - the sign will set to zero if either x or y value is within the tolerance level. The following methods are available:\n\n*qs_plot()* will return the co-ordinates of the projected form in the quotient square.\n\n*pf_grpchir(dtype = 0, pgroup = 2)* returns the signed L_inf or L_2 chirality measure for the projected form depending on whether dtype is set to 0 or 2. Setting pgroup to 4 or 6 will calculate the D4 or D6 Chirality. Any other setting of dtype or pgroup will return an error message.\n\n*pf_chir(dtype = 0)* will return the signed D2 chirality. Defaults to use of Chebyshev distance - if dtype = 2 the Euclidean distane will be used instead.\n\n*root_from_pf2 (scale = 1)* will return a signed root form derived from an input projected form, which can be scaled by setting the scale factor\n\n*lattice_from_pf2 (sc=1)* will return the 2D lattice reconstituted from an input projected form - setting the scale factor scales the underlying root form\n\n*sphere_proj()* returns the latitude and longitude of the spherical projection.\n\n**Distance Calculations**\n\n*pf2dist(pf_1, pf_2, orient = True, dtype = 2)* will take two projected forms and calculate the L_2 oriented distance between them by default. It will calculate the unoriented distance if orient is set to False (or both projected forms share a sign or either are achiral), and the oriented or unoriented Chebyshev distance if dtype is set to 0\n\n*rf2dist(rf_1, rf_2, orient = True, dtype = 2)* will take two root forms and calculate the L_2 oriented distance between them by default. It will calculate the unoriented distance if orient is set to False (or both projected forms share a sign or either are achiral), and the oriented or unoriented Chebyshev distance if dtype is set to 0\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2022 Matthew James Bright  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "FlatLat",
    "package_url": "https://pypi.org/project/FlatLat/",
    "platform": null,
    "project_url": "https://pypi.org/project/FlatLat/",
    "project_urls": {
      "Homepage": "https://github.com/MattB-242/Lattice_Invariance"
    },
    "release_url": "https://pypi.org/project/FlatLat/2.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A Package for Calculating 2D Lattice Invariants",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15104540,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b3a86e2cfd81c7eb34a98ea1ee1bdd8741fabe995c2393167607b3bf46a698e",
          "md5": "ad724cfda30528c386c49758db6d5ed6",
          "sha256": "96c6309e6b31988b52b2e5fecf2c975c4634456af1178a778d52bf3d2f5bece2"
        },
        "downloads": -1,
        "filename": "flatlat-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad724cfda30528c386c49758db6d5ed6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8755,
        "upload_time": "2022-09-15T12:19:53",
        "upload_time_iso_8601": "2022-09-15T12:19:53.365032Z",
        "url": "https://files.pythonhosted.org/packages/1b/3a/86e2cfd81c7eb34a98ea1ee1bdd8741fabe995c2393167607b3bf46a698e/flatlat-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65e7524260ae090044790e30397a73ccfc85d7e9f713f6b0b2693df0cb999944",
          "md5": "b4ccfda30c1f43278ac07d7e99658ea3",
          "sha256": "e6a5e3c8ee08616142215cc4bc04e51a374a1bb038137fcffd5d4d595db13ea6"
        },
        "downloads": -1,
        "filename": "flatlat-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b4ccfda30c1f43278ac07d7e99658ea3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7859,
        "upload_time": "2022-09-15T12:19:54",
        "upload_time_iso_8601": "2022-09-15T12:19:54.860079Z",
        "url": "https://files.pythonhosted.org/packages/65/e7/524260ae090044790e30397a73ccfc85d7e9f713f6b0b2693df0cb999944/flatlat-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b3a86e2cfd81c7eb34a98ea1ee1bdd8741fabe995c2393167607b3bf46a698e",
        "md5": "ad724cfda30528c386c49758db6d5ed6",
        "sha256": "96c6309e6b31988b52b2e5fecf2c975c4634456af1178a778d52bf3d2f5bece2"
      },
      "downloads": -1,
      "filename": "flatlat-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad724cfda30528c386c49758db6d5ed6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8755,
      "upload_time": "2022-09-15T12:19:53",
      "upload_time_iso_8601": "2022-09-15T12:19:53.365032Z",
      "url": "https://files.pythonhosted.org/packages/1b/3a/86e2cfd81c7eb34a98ea1ee1bdd8741fabe995c2393167607b3bf46a698e/flatlat-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65e7524260ae090044790e30397a73ccfc85d7e9f713f6b0b2693df0cb999944",
        "md5": "b4ccfda30c1f43278ac07d7e99658ea3",
        "sha256": "e6a5e3c8ee08616142215cc4bc04e51a374a1bb038137fcffd5d4d595db13ea6"
      },
      "downloads": -1,
      "filename": "flatlat-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b4ccfda30c1f43278ac07d7e99658ea3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7859,
      "upload_time": "2022-09-15T12:19:54",
      "upload_time_iso_8601": "2022-09-15T12:19:54.860079Z",
      "url": "https://files.pythonhosted.org/packages/65/e7/524260ae090044790e30397a73ccfc85d7e9f713f6b0b2693df0cb999944/flatlat-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}