{
  "info": {
    "author": "Michael Costa, Florent Chevalier",
    "author_email": "michael.costa@mcos.nc, florent.chevalier.nc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "![Build Status](https://drone.mcos.nc/api/badges/scrippy/scrippy-core/status.svg) ![License](https://img.shields.io/static/v1?label=license&color=orange&message=MIT) ![Language](https://img.shields.io/static/v1?label=language&color=informational&message=Python)\n\n\n![Scrippy, mon ami le scrangourou](./scrippy-core.png \"Scrippy, mon ami le scrangourou\")\n\n# `scrippy_core`\n\n`scrippy_core` est le module _Python3_ principal du cadriciel [`Scrippy`](https://codeberg.org/scrippy) permettant la normalisation de l'écriture de scripts _Python_.\n\nCe module apporte l'ensemble des fonctionnalités de base telles que la gestion des fichiers de configuration, de logs, d'historiques d'exécution, le contrôle d'accès aux scripts, la gestion des exécution concurrentielles, etc.\n\n## Prérequis\n\n### Système\n\n#### Debian et dérivées\n\n- python3\n- python3-pip\n- python-dev\n- build-essential\n\n### Modules Python\n\n#### Liste des modules nécessaires\n\nLes modules listés ci-dessous seront automatiquement installés.\n\n- prettytable\n- coloredlogs\n- argcomplete\n- filelock\n\n## Installation\n\n### Manuelle\n\n```bash\ngit clone https://codeberg.org/scrippy/scrippy-core.git\ncd scrippy-core\nsudo python3 -m pip install -r requirements.txt\nsudo python3 ./setup.py build install\n```\n\n### Avec `pip`\n\n```bash\nsudo pip install scrippy-core\n```\n\n### Configuration de l'environnement\n\n1. Le fichier de configuration de _Scrippy_ `/etc/scrippy/scrippy.yml` doit définir un certain nombres de répertoires qui seront utiles aux scripts reposant sur _Scrippy_.\n\n| Clef                  | Utilité                                                                  | Variable associée                |\n| --------------------- | ------------------------------------------------------------------------ | -------------------------------- |\n| `env::logdir`         | Répertoire des journaux d'exécution des scripts basés sur _Scrippy_      | scrippy_core.SCRIPPY_LOGDIR      |\n| `env::histdir`        | Répertoire des fichiers d'historisation des exécutions                   | scrippy_core.SCRIPPY_HISTDIR     |\n| `env::reportdir`      | Répertoire des fichiers de rapports                                      | scrippy_core.SCRIPPY_REPORTDIR   |\n| `env::tmpdir`         | Répertoire temporaire des scripts basés sur _Scrippy_                    | scrippy_core.SCRIPPY_TMPDIR      |\n| `env::templatedirdir` | Répertoire des fichiers modèles                                          | scrippy_core.SCRIPPY_TEMPLATEDIR |\n| `env::confdir`        | Répertoire des fichiers de configuration des scripts basés sur _Scrippy_ | scrippy_core.SCRIPPY_CONFDIR     |\n| `env::datadir`        | répertoire des données utilisées par les scripts basés sur _Scrippy_     | scrippy_core.SCRIPPY_DATADIR     |\n\nModèle de fichier de configuration de l'environnement d'exécution _Scrippy_:\n\n```yaml\nenv:\n  logdir: /var/log/scrippy\n  histdir: /var/lib/scrippy/hist\n  reportdir: /var/lib/scrippy/reports\n  tmpdir: /var/tmp/scrippy\n  datadir: /var/lib/scrippy/data\n  templatedir: /var/lib/scrippy/templates\n  confdir: /etc/scrippy/conf\n```\n\n2. Création des répertoires définis dans le fichier de configuration `/etc/scrippy/scrippy.yml` par l'utilisateur _root_ (ou via `sudo`)\n\nScript python de création des répertoires nécessaires :\n\n```python\nimport os\nimport yaml\n\nconf_file = \"/etc/scrippy/scrippy.yml\"\nwith open(conf_file, \"r\") as conf:\n  scrippy_conf = yaml.load(conf, Loader=yaml.FullLoader)\n  for rep in scrippy_conf[\"env\"]:\n    os.makedirs(scrippy_conf[\"env\"][rep], 0o0775)\n```\n\n### Activation de l'auto-complétion (facultatif)\n\nSi votre shell dispose de la commande `whence`, le _parser_ des arguments (argparse) pourra être utilisé pour alimenter l'auto-complétion. Voir la [documentation d'`argcomplete`](https://argcomplete.readthedocs.io/en/latest/).\n\nPour l'activer lancer la commande suivante (installée avec le module python `argcomplete`) :\n\n```bash\nsudo activate-global-python-argcomplete\n```\n\nRafraîchissez votre environnement _Bash_.\n\n```bash\nsource /etc/profile\n```\n\n---\n\n## Formalisme\n\nLes scripts utilisant le module `scrippy_core` doivent répondre à un certain formalisme afin de garantir une harmonisation de leur format tout en facilitant la prise en charge de certaines fonctionnalités avancées telles que le contrôle de la validité de la configuration ou la gestion des paramètres optionnels.\n\nAinsi chaque script doit comporter dans sa [_doc string_](https://www.python.org/dev/peps/pep-0257/) un cartouche déclaratif et un ensemble de _sections_ prédéfinies.\n\nUne fonction `main()` doit **impérativement**:\n\n- Être définie dans la section `Définition des fonctions et classes`\n- Être appelée dans la section `Point d'entrée`\n- Directement encadrée son contenu par `with scrippy_core.ScriptContext(__file__, workspace=True) as _context:` qui gère et active l'ensemble des fonctionnalités des scripts écrit à partir du module `scrippy_core`.\n\n```python\ndef main():\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    # Code principal\n\nif __name__ == '__main__':\n  # gestion des arguments si il y en a\n  main()\n```\n\n### Modèle de base\n\nLe modèle de base ci-dessous peut servir de base à un extrait de code (_snippet_):\n\n```python\n#!/bin/env python3\n\"\"\"\n--------------------------------------------------------------------------------\n  @author         : <Auteur>\n  @date           : <Date de la version actuelle du script>\n  @version        : <X.Y.Z>\n  @description    : <Brève description (une ligne) de l'utilité du script>\n\n--------------------------------------------------------------------------------\n  Mise a jour :\n  <X.Y.Z>  <Date> - <Auteur> - <Raison>: <Description de la mise à jour>\n\n--------------------------------------------------------------------------------\n  Liste des utilisateurs ou groupe autorisés:\n    @user:<nom d'utilisateur>\n    @group:<nom du groupe>\n\n--------------------------------------------------------------------------------\n  Exécutions concurrentes :\n    @max_instance: <INT>\n    @timeout: <INT>\n    @exit_on_wait: <BOOL>\n    @exit_on_timeout: <BOOL>\n\n--------------------------------------------------------------------------------\n  Liste des paramètres de configuration obligatoires:\n    @conf:<section>|<clé>|<type>|<secret>\n\n--------------------------------------------------------------------------------\n  Liste des paramètres des options et arguments d'exécution:\n  @args:<nom>|<type>|<aide>|<nombre arguments>|<valeur par défaut>|<conflit>|<implique>|<requis>|<secret>\n\n--------------------------------------------------------------------------------\n  Fonctionnement:\n  ---------------\n    <Description détaillée du script>\n...\n\"\"\"\n#-------------------------------------------------------------------------------\n#  Initialisation de l’environnement\n#-------------------------------------------------------------------------------\nimport logging\nimport scrippy_core\n\n#-------------------------------------------------------------------------------\n#  Définition des fonctions et classes\n#-------------------------------------------------------------------------------\n\nclass <Class>(<object>):\n  def __init__(self, [<param>, ...]):\n  [...]\n\ndef <fonction>([<param>, ...]):\n  [...]\n\n#-------------------------------------------------------------------------------\n#  Traitement principal\n#-------------------------------------------------------------------------------\n\ndef main(args):\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    # recupération de la config si necessaire\n    config = _context.config\n\n    [...]\n\n#-------------------------------------------------------------------------------\n#  Point d'entrée\n#-------------------------------------------------------------------------------\n\nif __name__ == '__main__':\n  # gestion des arguments si il y en a. Les arguments sont accessibles avec la variable 'scrippy_core.args'\n  main(scrippy_core.args)\n```\n\n### Éléments du cartouche\n\nLes éléments `@author`, `@date`, `@version`, `@description` sont **obligatoires** et seront automatiquement affichés par l'option `--help`.\n\n#### Version:\n\nLe numéro de version d'un script est au format X.Y.Z avec:\n\n- `X`, l’identifiant de version majeure\n- `Y` est l’identifiant de version mineure\n- `Z`, l’identifiant de version de correction\n\n**Version majeure X**: Il vaut \"0\" lors du développement, le script est considéré non valide et ne devrait ni être appelé par d’autres scripts ni être utilisé en production.\n\nUne fois le script validé la version doit être 1.0.0 (première version stable).\n\n`X` doit être incrémenté si des changements dans le code n’assure plus la rétro-compatibilité.\n\nLes identifiants de version mineure `Y` et de correction `Z` doivent être remis à zéro lorsque l’identifiant de version majeure `X` est incrémenté.\n\n**Version mineure Y**: Doit être incrémenté lors de l’ajout de nouvelles fonctionnalités ou d’amélioration du code qui n’ont pas d’impact sur la rétro-compatibilité.\n\nL’identifiant de version de correction `Z` doit être remis à zéro lorsque l’identifiant de version mineure est incrémenté.\n\n**Version de correction Z**: Doit être incrémenté si seules des corrections rétro-compatibles sont introduites.\n\nUne correction est définie comme un changement interne qui corrige un comportement incorrect (Bug).\n\n`Z` peut être incrémenté lors de correction typographique ou grammaticale.\n\n#### Mise à jour:\n\nEn plus du numéro de version, de la date de modification et de l'auteur de la modification chaque ligne de l'historique du script doit indiquer la raison de la modification.\n\n`<Raison>` peut prendre l'une des valeurs suivantes:\n\n- `cre`: Création du script\n- `evo`: Évolution du script (ajout de fonctionnalité, amélioration du code, etc)\n- `bugfix`: Correction de comportement inattendu (bug)\n- `typo`: Correction de faute de frappe, ajout de commentaires et toute action n'apportant aucune modification au code.\n\n## Utilisateurs et groupes autorisés\n\nLe module `scrippy_core` ajoute une couche de vérification quant à l'exécution du script permettant de s'assurer qu'un script est exécuté par un utilisateur spécifique ou un utilisateur appartenant à un groupe spécifique.\n\nPlacée dans le cartouche, une ligne telle que `@user:harry.fink` empêchera l’exécution par tout utilisateur autre que `harry.fink`.\n\nIl est possible de définir plusieurs utilisateurs autorisés en multipliant les déclarations:\n\n```\n@user:harry.fink\n@user:luiggi.vercotti\n```\n\nIl est également possible d'autoriser des groupes d'utilisateurs avec une ligne telle que `@group:monty` qui assurera que seul un utilisateur du groupe `monty` exécute le script.\n\nDe la même manière que pour les utilisateurs il est possible de multiplier les déclarations de groupe:\n\n```\n@group:monty\n@group:python\n```\n\nEn cas d'absence de ligne déclarative `@user` et `@group` les permissions sur le fichier font foi et dans tous les cas les permissions sur les fichiers sont prévalentes.\n\n**Attention**: Si un groupe et un utilisateur sont déclarés, **les deux conditions doivent être remplies** pour que l'utilisateur soit autorisé à exécuter le script.\n\n## Gestion des exécutions concurrentes\n\nLes déclarations optionnelles `@max_instance`, `@timeout`, `@exit_on_wait` et `@exit_on_timeout` permettent de définir le nombre d'exécution concurrentes d'un même script ainsi que le comportement du script le cas échéant:\n\n| Déclaration        | Type                        | Utilité                                                                                                          | Valeur par défaut |\n| ------------------ | --------------------------- | ---------------------------------------------------------------------------------------------------------------- | ----------------- |\n| `@max_instance`    | Nombre entier               | Nombre maximum d'exécutions parallèles                                                                           | 0 (infini)        |\n| `@timeout`         | Nombre entier               | Délai d'attente maximum exprimé en secondes si `@exit_on_timeout` est positionnée à vrai                         | 0 (infini)        |\n| `@exit_on_timeout` | booléen (`true`, `1`, `on`) | Fait sortir le script en erreur lorsque le délai d'attente est atteint                                           | False             |\n| `@exit_on_wait`    | booléen (`true`, `1`, `on`) | Fait immédiatement sortir le script en erreur en cas d'attente y compris si le délai d'attente n'est pas atteint | False             |\n\nLes occurrences mises en attente d'exécution sont exécutées séquentiellement dans l'ordre de leur inscription dans la file d'exécution.\n\nDans l'exemple suivant, deux occurrences du script sont permises. Une troisième exécution sera mise en attente 10 secondes, délai au delà duquel le script sortira en erreur s'il n'a pas peu obtenir un créneau d'exécution.\n\n```\n  @max_instance: 2\n  @timeout: 10\n  @exit_on_wait: false\n  @exit_on_timeout: true\n```\n\n## Gestion et vérification des paramètres de configuration obligatoires\n\nUn fichier de configuration est un fichier simple fichier _ini_ découpé en autant de sections que nécessaire:\n\nPour être chargé un tel fichier de configuration doit simplement se trouver dans le répertoire défini par la constante `scrippy_core.SCRIPPY_CONFDIR` et avoir le même nom que le script qui doit le charger débarrassé de son extension et suffixé de l'extension `.conf`.\n\nDe cette manière le script `exp_test_logs.py` chargera automatiquement le fichier de configuration `exp_test_logs.conf`.\n\n```ini\n[log]\nlevel = ERROR\n[database]\nhost = srv.flying.circus\nport = 5432\nuser = arthur.pewtey\nbase = ministry_of_silly_walks\npassword = parrot\n# La section comporte des espaces\n[ma section]\n  # un commentaire indenté\n  ma variable = ma valeur\n```\n\nDans un tel fichier:\n\n- L'indentation est possible\n- Une ligne commençant par `#` ou `;` est considérée comme un commentaire, y compris si elle est indentée.\n- Toutes les valeurs sont des chaînes de caractères:\n  - Il appartient au développeur de convertir la valeur des variables dans le type désiré lors du traitement (voir **_Récupération d’une valeur d’un type particulier_**).\n  - Les espaces sont acceptés que se soit dans le nom des section, dans le nom d'une clé ou dans une valeur.\n\n### Contrôle de la validité du fichier de configuration\n\nAfin de valider le fichier de configuration le script doit comporter dans sa [_docstring_](https://www.python.org/dev/peps/pep-0257/) un ensemble de lignes commençant par `@conf` et décrivant le fichier de configuration tel qu'il est attendu.\n\nLes lignes de déclarations du format de configuration doivent respecter le formalisme suivant:\n\n```\n@conf:<section>|<clé>|<type_valeur>[|<secret>]\n```\n\n`<type_valeur>` doit être l'un des types reconnus suivants:\n\n- `str` (chaîne de caractères)\n- `int` (entier)\n- `float` (nombre à virgule flottante)\n- `bool` (booléen)\n\n`secret` est **optionnel** et s'il est défini doit prendre la valeur `true` ou `false`.\n\nSi `secret` est défini et a pour valeur `true`, la valeur de paramètre de configuration sera considérée comme un _secret_ et apparaîtra masquée dans les fichiers de journalisations.\n\nExemple:\n\nÀ partir de la déclaration suivante:\n\n```\n@conf:log|level|str\n@conf:database|port|int\n@conf:sql|verbose|boolean\n@conf:sql|database|str|false\n@conf:sql|password|str|true\n```\n\nLe fichier de configuration suivant sera vérifié:\n\n```\n[log]\n  level = error\n[database]\n  port = 5432\n[sql]\n  verbose = True\n  database = monty\n  password = d34dp4rr0t\n```\n\nToutes les occurrences du mot de passe `d34dp4rr0t` seront remplacé par `*******` dans les fichiers de journalisations comme sur la sortie standard.\n\nAucun contrôle des valeurs des paramètres n'est effectué, il n'est donc pas utile de les indiquer. Seule la structure de la configuration et le type des clés sont vérifiés.\n\nLors du contrôle de la configuration et si le niveau de journalisation est positionné à `debug`, la configuration chargée sera affichée sur la sortie standard et dans le journal (attention à la présence de mots de passe dans la configuration lors de l'utilisation du niveau de journalisation `debug`).\n\n```python\n\"\"\"\n@conf:database|port|int\n@conf:database|base|str\n@conf:database|host|str\n@conf:database|password|str\n@conf:database|user|str\n@conf:local|dir|str\n@conf:src|port|int\n@conf:src|host|str\n@conf:src|dir|str\n@conf:src|user|str\n@conf:dst|port|int\n@conf:dst|host|str\n@conf:dst|dir|str\n@conf:dst|user|str\n\"\"\"\nimport scrippy_core\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  # recupération de la configuration\n  config = _context.config\n```\n\nSi l'une des sections ou l'une des clés décrites par `@conf` est absente du fichier de configuration ou que le type décrit pour une clé ne correspond pas au type trouvé dans le fichier de configuration pour cette clé alors une erreur critique est levée et le script sort immédiatement en erreur.\n\nLes sections ou clés surnuméraires trouvées dans le fichier de configuration et non déclarées seront simplement ignorées lors de la vérification mais resteront utilisables par le script.\n\nAinsi dans l'exemple ci-dessus la section `[mail]` n'étant pas définie dans `@conf` ni sa présence ni sa validité ne seront contrôlées.\n\n### Récupération de la valeur d'un paramètre de configuration\n\nLa récupération de la valeur d'un paramètre du fichier de configuration se fait par l'intermédiaire de la méthode `_context.config.get()`.\n\n```python\n\"\"\"\n@conf:database|port|int\n@conf:database|base|str\n@conf:database|host|str\n@conf:database|password|str\n@conf:database|user|str\n\"\"\"\nimport logging\nimport scrippy_core\n\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  config = _context.config\n  logging.info(config.get('database', 'host'))\n```\n\nDans l'exemple ci-dessus, la valeur de la clé `host` de la section `database` sera affiché à l'écran.\n\nSi la section ou la clé n'existe pas, une erreur est levée et **le script lèvera immédiatement une erreur critique**.\n\n#### Récupération d'une valeur d'un type particulier\n\nÀ moins que le paramètre 'param_type' soit positionné à l'une des valeurs autorisées (`str` (défaut), `int`, `float` ou `bool`), le type renvoyé est systématiquement une chaîne de caractère.\n\nAppeler la méthode `Config.get()` avec le mauvais type lèvera une erreur et **le script lèvera immédiatement une erreur critique**.\n\n```python\n\"\"\"\n@conf:log|level|str\n@conf:database|port|int\n@conf:database|base|str\n@conf:database|host|str\n@conf:database|password|str\n@conf:database|user|str\n\"\"\"\nimport logging\nimport scrippy_core\n\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  config = _context.config\n  logging.info(config.get('database', 'port', 'int'))\n```\n\n### Sections et clés réservées:\n\nCertaines sections et clés sont automatiquement lues et interprétées lors de l'import du module `scrippy_core`.\n\nCes clés de configuration sont facultatives, tout comme le fichier de configuration.\n\n- Niveau de journalisation, lu et appliqué automatiquement\n\n```ini\n[log]\n  level = <str>\n```\n\n- Activation de la journalisation et d'historisation (True par défaut)\n\n```ini\n[log]\n  file = <bool>\n```\n\nPlus de détails dans la section **Gestion des journaux d'exécution**\n\n### Exemples\n\nTous les exemples de cette documentation se basent sur tout ou partie du fichier de configuration suivant:\n\n```ini\n[log]\n  level = info\n  file = true\n[database]\n  host = srv.flying.circus\n  port = 5432\n  user = arthur.pewtey\n  base = ministry_of_silly_walks\n  password = dead parrot\n[local]\n  dir = /tmp/transfert\n[src]\n  host = srv.source.circus\n  port = 22\n  user = harry.fink\n  dir = /home/harry.fink/data\n[dst]\n  host = srv.destination.circus\n  port = 22\n  user = luigi.vercotti\n  dir = /home/luigi.vercotti/received\n[mail]\n  host = srv.mail.circus\n  port = 25\n  from = Luiggi Vercotti\n  from_addr = luiggi.vercotti@circus.com\n  to = Harry Fink\n  to_addr = harry.fink@circus.com\n  subject =  Compte rendu d'exécution\n```\n\n## Gestion des options d'exécution\n\nLa gestion des options d'un script se fait au moyen de déclarations dans sa [_docstring_](https://www.python.org/dev/peps/pep-0257/).\n\nLa déclaration d'une option est composée de 8 champs dont certains sont obligatoires:\n\n```\n@args:<nom>|<type>|<aide>|<nombre arguments>|<valeur par défaut>|<conflit>|<implique>|<requis>|<secret>\n```\n\navec:\n\n- **nom**: Le nom de l'option (obligatoire)\n- **type**: Une des valeurs suivantes: `str`, `int`, `float`, `choice`, `bool` (défaut: str). Si le type est `choice`, la liste des choix possibles doit être saisie dans le champs **valeur par défaut** sous forme de liste de mots séparés par des virgules.\n- **aide**: Une chaîne de caractères résumant l'objectif de cette option (obligatoire).\n- **nombre arguments**: Le nombre d'arguments que prend l'option. Ce champs est obligatoire pour tous les types sauf `bool` ou le nombre d'arguments déclarés est ignoré. Sa valeur est généralement un nombre entier mais peut prendre la valeur `+` lorsque le nombre d'arguments est supérieur à 1 mais n'est pas connu à l'avance ou `?` lorsque le nombre d'argument peut être égal à zéro.\n- **valeur par défaut**: La valeur par défaut de l'option (optionnel). Les option de type `bool` prennent `true` comme valeur par défaut.\n- **conflit**: La liste des options qui entrent en conflit avec l'option courante (optionnel, liste d'options séparés par des virgules).\n- **implique**: La liste des options induites par l'option courante (optionnel, liste d'options séparés par des virgules).\n- **requis**: Un booléen (`true` ou `false`) indiquant si l'option est obligatoire ou non.\n- **secret**: Un booléen (`true` ou `false`) indiquant si la valeur de l'option doit être gardée secrète.\n\nLa valeur d'une option dont l'attribut _secret_ est positionné à `true` sera automatiquement masquée dans les fichiers de journalisations comme sur la sortie standard.\n\nLa déclaration des options générera automatiquement l'aide du script accessible avec l'option `--help`.\n\nLes options suivantes seront également automatiquement générées:\n\n- `--version`: Affiche le numéro de version du script à partir des informations contenues dans le cartouche.\n- `--source-code`: Affiche le code source du script.\n- `--hist [NB_EXECUTION (default:10)]`: Affiche l'historique des exécutions du script.\n- `--log [SESSION]`: Affiche le contenu du fichier log correspondant à la session dont l'identifiant est passé en argument. Par défaut la dernière session est affichée.\n- `--debug`: Force le niveau de journalisation à DEBUG (Les changements de niveau de log au cours de l'exécution sont alors ignorés).\n- `--nolog`: Désactive totalement la journalisation à l'exception des niveaux de journalisation `error` et `critical`.\n- `--no-log-file`: Empêche la création des fichiers de journalisation et d'historisation.\n\nLes options `--help`, `--version`, `--hist`, `--log`, `--debug` et `--no-log-file` ne doivent donc pas être déclarées.\n\n### Exemples\n\nLe script suivant pourra être appelé avec les options et arguments suivants:\n\n- `--env`: Obligatoire. Accepte l'une des valeurs suivantes: qualif, preprod ou prod\n- `--appname`: Optionnelle. Une chaîne de caractères libre ayant pour valeur par défaut \"aviva\"\n- `--now`: Option booléenne. Si utilisée sa valeur sera _true_ (false par défaut) et l'option `--date` ne pourra pas être utilisée.\n- `--date`: Une suite de 3 entiers à partir de laquelle une date sera créée (ie. 24 02 2019). Cette option entre en conflit avec l'option `--now`.\n- `--email`: Une chaîne de caractère libre. Cette option est obligatoire si l'option `--now` est utilisée.\n\n```python\n#!/bin/env python3\n\"\"\"\n--------------------------------------------------------------------------------\n  @author         : Florent Chevalier\n  @date           : 27-07-2019\n  @version        : 1.0.0\n  @description    : test des options\n\n--------------------------------------------------------------------------------\n  Mise a jour :\n  1.0.0  27/07/2019   - Florent Chevalier   - Cre : Mise en production\n--------------------------------------------------------------------------------\n  Liste des utilisateurs ou groupe autorisés:\n    @user:asr\n    @group:asr\n--------------------------------------------------------------------------------\n  Liste des paramètres des options et arguments d'exécution:\n    nom|type|help|num_args|defaut|conflit|implique|requis\n\n    @args:appname|str|Nom de l'application|1|aviva|||false\n    @args:date|int|Date de plannification (jour, mois, annee)|3||now|email|false\n    @args:email|str|Email de notification|1||||false\n    @args:now|bool|Appliquer immediatement||false|date||false\n    @args:env|choice|Environnement||qualif,preprod,prod|||true\n--------------------------------------------------------------------------------\n\"\"\"\nimport logging\nimport datetime\nimport scrippy_core\n\ndef print_contact(email):\n  logging.info(\" - Contact: {}\".format(email))\n\ndef print_appname(appname):\n  logging.info(\" - Application: {}\".format(appname))\n\ndef print_env(env):\n  logging.info(\" - Environnement: {}\".format(env))\n\ndef print_date(date):\n  logging.info(\" - Date: {}\".format(date))\n\ndef main(args):\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    if args.date:\n      date = \"{}/{}/{}\".format(args.date[0], args.date[1], args.date[2])\n    if args.now:\n      date = datetime.datetime.now().strftime('%d/%m/%Y')\n    logging.info(\"[+] Rapport:\")\n    print_date(date)\n    print_appname(args.appname)\n    print_env(args.env)\n    print_contact(args.email)\n\nif __name__ == '__main__':\n  main(scrippy_core.args)\n```\n\n## Gestion des journaux d'exécution\n\nLa journalisation d'exécution s'effectue à partir du [module `logging` de la bibliothèque standard](https://docs.python.org/3/library/logging.html).\n\nDeux types de journaux sont simultanément disponibles:\n\n- **La sortie standard**: Affichage en couleurs vers `sys.stdout`\n- **Le fichier journal**: Un fichier situé dans `scrippy_core.SCRIPPY_LOGDIR` dont le nom est extrapolé du nom du script de la manière suivante: `<nom_du_script>_<timestamp>_<pid>.log`.\n\nPlusieurs niveaux de journalisation sont disponibles (Voir la [documentation](https://docs.python.org/3/library/logging.html#logging-levels)) et le niveau de log par défaut est `INFO`.\n\nSi un fichier de configuration existe pour le script et qu'il contient une section `[log]` indiquant un niveau de log avec la clef `level` alors le niveau de journalisation indiqué est automatiquement appliqué.\n\nSi le fichier de configuration contient une section `[log]` ayant une clef `file` dont la valeur est `false` alors aucun fichier de journalisation ne sera créé et seule la sortie standard recevra le journal.\n\n### Définition du niveau de journalisation par fichier configuration:\n\n```\n[log]\n  level = warning\n```\n\nLa valeur du niveau de journalisation dans le fichier de configuration est insensible à la casse.\n\nLes niveaux de log disponibles sont, du moins verbeux au plus verbeux, [les niveaux de journalisation du module standard logging](https://docs.python.org/3/library/logging.html#logging-levels)\n\n- `critical`\n- `error`\n- `warning`\n- `info`\n- `debug`\n\nÀ noter que le niveau de journalisation `DEBUG` affiche l'intégralité du fichier de configuration ainsi que d'autres détails qui pourraient s'avérer être une source de fuite d'information. Il est déconseillé de l'utiliser en production.\n\nTous les scripts écrits à partir du module `scrippy_core` dans le règles de l'art disposent des options de journalisation suivantes:\n\n- `--no-log-file`: Lorsque cette option est utilisée, aucun journal d'exécution n'est enregistré sur le disque. Cette option n’empêche pas l'affichage à l'écran.\n- `--debug`: Lorsque cette option est utilisée, le niveau de journalisation est forcé à `DEBUG`. Dans ce cas le script ne tient pas compte d'un éventuel paramètres de configuration indiquant le contraire.\n\nCes deux options peuvent être cumulées.\n\n### Changer le niveau de log:\n\nLe niveau de log peut être modifié en cours d'exécution du script à l'aide de la méthode `logging.getLogger().setLevel(<LEVEL>)`\n\n### Exemple\n\nEn plus d'accepter naturellement un paramètre de configuration définissant le niveau de journalisation, le script suivant dispose d'une option `--loglevel` permettant de surcharger le niveau de journalisation à l'exécution.\n\nSi l'option `--debug` est utilisée, l'option `--loglevel` n'aura aucun effet.\n\n```python\n\"\"\"\n@args:loglevel|str|Le niveau de log|1||||false\n\"\"\"\nimport logging\nimport scrippy_core\n\ndef change_loglevel(level):\n  \"\"\"\n  Passe le niveau de journalisation à <level>\n  \"\"\"\n  try:\n    logging.getLogger().setLevel(level.upper())\n  except ValueError:\n    logging.error(\"Niveau de log inconnu: {}\".format(level.upper()))\n\ndef main(args):\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    # recupération de la configuration du script\n    config = _context.config\n    if args.loglevel:\n      # L'option --loglevel a reçu un argument\n      change_loglevel(args.loglevel)\n    logging.debug(\"Nobody expects the Spanish Inquisition!\")\n    logging.info(\"And now for something completely different...\")\n    logging.error(\"It’s not pinin’! It’s passed on! This parrot is no more!\")\n\nif __name__ == '__main__':\n  main(scrippy_core.args)\n```\n\n## Gestion des erreurs\n\nLe _wrapper_ `with scrippy_core.ScriptContext(__file__) as _context:` intercepte les exceptions pour n'afficher que le type et le message sans la _stack trace_.\n\nEn cas d'exception interceptée, le socle déclenche un `sys.exit(1)`.\n\nPour afficher la _stack trace_ il faut que le log level soit à `DEBUG`\n\n## Gestion de l'historisation des exécutions\n\nLe fichier d'historisation des exécutions situé dans `scrippy_core.SCRIPPY_HISTDIR` sera créé et nommé `<nom_du_script>.db` à la première exécution du script.\nCe fichier est une base de données _sqlite3_ qui recense l'ensemble des exécutions d'un script et pour chacune des exécution les informations suivantes:\n- identifiant de session\n- Date de début de l'exécution\n- Date de fin de l'exécution\n- Durée de l'exécution\n- Utilisateur à l'origine de l'exécution\n- Utilisateur ayant effectivement exécuté le script (cas de sudo)\n- Code de retour de l'exécution (0 si Ok, autre valeur si KO)\n- Ensemble des paramètres passés en arguments au script\n- Nom de l'erreur si l'exécution ne s'est pas terminée correctement (0 dans le cas contraire)\n\nSi le fichier d'historisation est préexistant à l'exécution il sera mis à jour avec les paramètres de la nouvelle exécution.\n\nL'historisation est activée automatiquement par l'encadrement de l'appel de la fonction `main` avec la déclaration `with scrippy_core.ScriptContext(__file__, workspace=True) as _context:`\n\n```python\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  main()\n```\n\nÀ chaque exécution d'un script est attribuée une session permettant d'identifier chaque exécution de manière unique.\n\nCette session est composée:\n\n- d'un _timestamp_ représentant l'heure d'exécution\n- de l'identifiant du processus (PID)\n\n```txt\n1568975414.6954327_10580\n```\n\nCet identifiant de session est reporté dans la colonne `Session` de l'historique et permet de retrouver le log correspondant (Voir l'option `--log` dans **_Gestion des options d'exécution_**).\n\n### Rétention\n\nLe nombre d'exécutions conservées dans le fichier d'historisation est de **50** par défaut.\n\nIl est possible de surcharger cette valeur en précisant le nombre de rétention souhaité à l'aide de la déclaration `with scrippy_core.ScriptContext(__file__, retention=100) as _context:`\n\n```python\nwith scrippy_core.ScriptContext(__file__, workspace=True, retention=100) as _context:\n  main()\n```\n\n### Affichage de l'historique d'exécution\n\nTous les scripts basé sur le module `scrippy_core` disposent automatiquement d'une option `--hist` permettant l'affichage des dernières exécutions.\n\n```shell\nexp_test_script.py --hist\n```\n\nLe nombre d'exécutions à afficher peut être précisé par le passage d'un paramètre (int) à l'option `--hist`\n\n```shell\nexp_test_script.py --hist 2\n```\n\nPour chacune des exécutions d'un script l'historique d'exécution enregistre les informations suivantes:\n\n- La date d'exécution\n- L'utilisateur d'origine\n- L'utilisateur effectif (_sudo_)\n- L'identifiant unique de session\n- Le code de sortie (0 par défaut)\n- La liste des options et arguments passés au script\n\n## Espace de travail temporaire\n\nLa déclaration `with scrippy_core.ScriptContext(__file__, workspace=True) as _context:` crée automatiquement un espace de travail temporaire dont le chemin est récupérable à l'aide de l'attribut `workspace_path` du contexte d'exécution `_context`.\n\n```python\nwith scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n  workspace_path = _context.workspace_path\n  ...\n```\n\nDans l'exemple précédent la variable `workspace_path` contiendra le chemin vers le répertoire temporaire de travail dont le nom sera construit de la manière suivante: `scrippy_core.SCRIPPY_TMPDIR/<NOM DU SCRIPT>_<SESSION ID>`\n\n**Ex**:\n\n```bash\n/var/tmp/scrippy/exp_transfert_ftp_1574391960.6696503_102257\n```\n\nCet espace de travail temporaire, qui sera _automatiquement détruit avec son contenu à la fin du script_, est un répertoire qui pourra être utilisé pour y créer des fichiers.\n\n```python\n#!/bin/env python3\nimport logging\nimport scrippy_core\n\ndef create_file(workspace_path):\n  tmp_file = \"fichier.tmp\"\n  logging.info(\"[+] Création du fichier temporaire: {}\".format(os.path.join(workspace_path, tmp_file)))\n  with open(os.path.join(workspace_path, tmp_file), 'a') as tmpfile:\n    logging.info(\"[+] Écriture dans le fichier temporaire\")\n    tmpfile.write(\"Nobody expects the Spanish inquisition !\")\n\ndef main(args):\n  with scrippy_core.ScriptContext(__file__, workspace=True) as _context:\n    config = _context.config\n    create_file(_context.workspace_path)\n\nif __name__ == '__main__':\n  main(scrippy_core.args)\n```\n\n## Conseils et lignes directrices\n\n- Un log n'est **jamais trop verbeux**\n- Utiliser plusieurs niveaux de log afin de séparer ce qui est utile à l'exploitation de ce qui est utile au déverminage\n- **Privilégier la lisibilité** et la maintenabilité plutôt que la compacité et la technicité\n- Décomposer le code en **petites fonctions**\n- **Chaque fonction doit logger son point d'entrée** et lorsque cela est possible les paramètres qu'elle reçoit\n- **Variabiliser au maximum** et déporter le maximum de variables dans le fichier de configuration ou les options d’exécution.\n- **Simplifier l'algorithme** du programme principal à sa plus simple expression\n- **Gérer les erreurs le plus finement possible** et au plus près possible\n- **Limiter autant que possible les variables globales**\n- **Minimiser la fuite d'information dans les fichiers de journalisation** en utilisant les attributs `secret` des options et arguments dont les valeurs sont des informations sensibles (login, mot de passe, serveur de connexion, etc)\n- Créer **impérativement** une fonction `main()` qui contiendra l'algorithme principal du script\n- Créer l'environnement (objets et variables utilisées au niveau global) dans la section `Point d'entrée`.\n\n## Modules complémentaires\n\nLe cadriciel _Scrippy_ dont `scrippy-core` est le noyau dispose de modules facilitant l'écriture de scripts _Python_ évolués dans le respect des principes de base de _Scrippy_.\n\n| Module             | Utilité                                                       |\n| ------------------ | ------------------------------------------------------------- |\n| `scrippy-template` | Gestion de fichier modèles (basé sur _Jinja2_)                |\n| `scrippy-remote`   | Implémentation des protocoles _SSH/SFTP_ et _FTP_             |\n| `scrippy-mail`     | Implémentation des protocoles _SMTP_, _POP_ et _Spamassassin_ |\n| `scrippy-git`      | Gestion de dépôts _Git_                                       |\n| `scrippy-db`       | Gestion de base de données (_PostgreSQL_ et _Oracle_)         |\n| `scrippy-api`      | Utilisation d'_API ReST_ (basé sur _resquets_)                |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://codeberg.org/scrippy/scrippy-core",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scrippy-core",
    "package_url": "https://pypi.org/project/scrippy-core/",
    "platform": null,
    "project_url": "https://pypi.org/project/scrippy-core/",
    "project_urls": {
      "Bug Tracker": "https://codeberg.org/scrippy/scrippy-core/issues",
      "Homepage": "https://codeberg.org/scrippy/scrippy-core"
    },
    "release_url": "https://pypi.org/project/scrippy-core/1.3.13/",
    "requires_dist": [
      "argcomplete (>=1.10.0)",
      "coloredlogs (>=10.0)",
      "prettytable (>=0.7.2)",
      "filelock (>=3.0.12)",
      "PyYAML (>=5.3)",
      "rich (>=10.16.2)",
      "twine ; extra == 'dev'",
      "wheel (>=0.37.0) ; extra == 'dev'",
      "flake8 (>=4.0.1) ; extra == 'dev'",
      "flake8-breakpoint (>=1.1.0) ; extra == 'dev'",
      "flake8-builtins (>=1.5.3) ; extra == 'dev'",
      "flake8-print (>=4.0.0) ; extra == 'dev'",
      "flake8-return (>=1.1.3) ; extra == 'dev'",
      "pep8-naming (>=0.8.2) ; extra == 'dev'",
      "pytest (>=6.2.2) ; extra == 'dev'",
      "pytest-cov (>=3.0.0) ; extra == 'dev'",
      "bump2version (>=1.0.1) ; extra == 'dev'",
      "setuptools (>=60.9.2) ; extra == 'dev'",
      "pypirc-chappers (>=1.0.8) ; extra == 'dev'",
      "pylint (>=2.12.2) ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "\"Module principal du cadriciel Scrippy\"",
    "version": "1.3.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17080734,
  "releases": {
    "1.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0f47a73192503fde7a90083121eff68f771b3f1569a55156e1a2d34ac0d7970",
          "md5": "26d6a2cc8cd1df30e190d3c8a2232b06",
          "sha256": "211f98f801d9b564a64173c08ec98381775b51cf63c1b9865b6237519a00f9e5"
        },
        "downloads": -1,
        "filename": "scrippy_core-1.3.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26d6a2cc8cd1df30e190d3c8a2232b06",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30326,
        "upload_time": "2022-12-31T06:12:43",
        "upload_time_iso_8601": "2022-12-31T06:12:43.266024Z",
        "url": "https://files.pythonhosted.org/packages/e0/f4/7a73192503fde7a90083121eff68f771b3f1569a55156e1a2d34ac0d7970/scrippy_core-1.3.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8104f3d68edb8182f20d1c23568d088a5cae318bb153ef8a302449562095f28f",
          "md5": "3e86bb9dd745c66df36979673e041bf6",
          "sha256": "69a517e3ec91257dd52b417c754bfbd1c276fb2409101a39e78c9a7ce49936ca"
        },
        "downloads": -1,
        "filename": "scrippy-core-1.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "3e86bb9dd745c66df36979673e041bf6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 46946,
        "upload_time": "2022-12-31T06:12:44",
        "upload_time_iso_8601": "2022-12-31T06:12:44.987546Z",
        "url": "https://files.pythonhosted.org/packages/81/04/f3d68edb8182f20d1c23568d088a5cae318bb153ef8a302449562095f28f/scrippy-core-1.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "767dd55922fa6e8cb116a34a6b1acd91e8d7e9cf4776380971fd77bb1472b35d",
          "md5": "03273f1baaad084b70cf53822ccac487",
          "sha256": "d880fa5c5ccfaf6c653d6369ce06218a5d94873d593b9a80c8cce600c7249677"
        },
        "downloads": -1,
        "filename": "scrippy_core-1.3.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03273f1baaad084b70cf53822ccac487",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30327,
        "upload_time": "2023-01-28T00:09:36",
        "upload_time_iso_8601": "2023-01-28T00:09:36.131551Z",
        "url": "https://files.pythonhosted.org/packages/76/7d/d55922fa6e8cb116a34a6b1acd91e8d7e9cf4776380971fd77bb1472b35d/scrippy_core-1.3.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1928ac15ca7725b43e6c8c53a10947693cf01474b145fb870b2c3a2f87828bc9",
          "md5": "e3b8ae10a188a8db52d6c8f2bcf0c59e",
          "sha256": "41f21b34f332b32a3a18bbfb709d78f887eac485c9c6246cfef70958ffcedeac"
        },
        "downloads": -1,
        "filename": "scrippy-core-1.3.11.tar.gz",
        "has_sig": false,
        "md5_digest": "e3b8ae10a188a8db52d6c8f2bcf0c59e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 46960,
        "upload_time": "2023-01-28T00:09:39",
        "upload_time_iso_8601": "2023-01-28T00:09:39.030363Z",
        "url": "https://files.pythonhosted.org/packages/19/28/ac15ca7725b43e6c8c53a10947693cf01474b145fb870b2c3a2f87828bc9/scrippy-core-1.3.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e5619b617a70cff4c47c926fe2873a2f75f2dce11d2485e5ad502d257028aa1",
          "md5": "d25f771e0ded6cf65901de6043eeb580",
          "sha256": "b6247a5e1325df1861b49ae0429a6e3613786dc5f7d6890b5be61b8bbfe8950c"
        },
        "downloads": -1,
        "filename": "scrippy_core-1.3.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d25f771e0ded6cf65901de6043eeb580",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30340,
        "upload_time": "2023-01-28T02:27:46",
        "upload_time_iso_8601": "2023-01-28T02:27:46.085345Z",
        "url": "https://files.pythonhosted.org/packages/2e/56/19b617a70cff4c47c926fe2873a2f75f2dce11d2485e5ad502d257028aa1/scrippy_core-1.3.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ac604485ca4f30377a6692c073f517d9f6cd885694ee83b7ad9ed4a7edacaaf",
          "md5": "89252a8730d03f478c5960ffe8131e18",
          "sha256": "4a960ff0c5bf7439d18c55ec48e647ecf5c6c2f6cd386a90fcc7e557046beb31"
        },
        "downloads": -1,
        "filename": "scrippy-core-1.3.12.tar.gz",
        "has_sig": false,
        "md5_digest": "89252a8730d03f478c5960ffe8131e18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 46945,
        "upload_time": "2023-01-28T02:27:48",
        "upload_time_iso_8601": "2023-01-28T02:27:48.048299Z",
        "url": "https://files.pythonhosted.org/packages/3a/c6/04485ca4f30377a6692c073f517d9f6cd885694ee83b7ad9ed4a7edacaaf/scrippy-core-1.3.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7acbf4e93d084ffb19342d2296ac01cbe61b0bf0f9d8fce1888b3e02cff12a96",
          "md5": "9a5bea4227e278050b4faacb5f869394",
          "sha256": "5d087885c0ecf1bd66f9102dc8d80ff15c45539937b81ed18e3ecf7293414236"
        },
        "downloads": -1,
        "filename": "scrippy_core-1.3.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a5bea4227e278050b4faacb5f869394",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30341,
        "upload_time": "2023-02-28T11:20:43",
        "upload_time_iso_8601": "2023-02-28T11:20:43.313410Z",
        "url": "https://files.pythonhosted.org/packages/7a/cb/f4e93d084ffb19342d2296ac01cbe61b0bf0f9d8fce1888b3e02cff12a96/scrippy_core-1.3.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "140908b1ec007fb8aa2e0ac489e41499b9d15a30b2457a1117ddd96dd6214e43",
          "md5": "15edbf49bed5c75a621071e67b961807",
          "sha256": "756ad735c11a051d9b073a4af42fe3fa0b5fab80f90c2e5fbb7aa9c75c3a7503"
        },
        "downloads": -1,
        "filename": "scrippy-core-1.3.13.tar.gz",
        "has_sig": false,
        "md5_digest": "15edbf49bed5c75a621071e67b961807",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 50248,
        "upload_time": "2023-02-28T11:20:46",
        "upload_time_iso_8601": "2023-02-28T11:20:46.891461Z",
        "url": "https://files.pythonhosted.org/packages/14/09/08b1ec007fb8aa2e0ac489e41499b9d15a30b2457a1117ddd96dd6214e43/scrippy-core-1.3.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22cbb8529c4ca2a8e7fa6c51fcecc8fe4bc06d701f1e36ec5b27c8bee5999f1a",
          "md5": "38a70f7425728132f27c57a16d0c426e",
          "sha256": "23ab3a5e15fd8b36a0e32c832be8e2bcf35b33462ad3be8d313a26bb81f74d29"
        },
        "downloads": -1,
        "filename": "scrippy_core-1.3.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38a70f7425728132f27c57a16d0c426e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30313,
        "upload_time": "2022-12-31T01:59:02",
        "upload_time_iso_8601": "2022-12-31T01:59:02.196378Z",
        "url": "https://files.pythonhosted.org/packages/22/cb/b8529c4ca2a8e7fa6c51fcecc8fe4bc06d701f1e36ec5b27c8bee5999f1a/scrippy_core-1.3.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "143769fc51e5663183f95f5f3bee348da8c92700030236a2f78dd215fc870f1c",
          "md5": "c5299a811e01a07d5e7e0187ecfc06aa",
          "sha256": "c6ce2f6141b871f1dda397db5eda2f18f9ce77744409a0b464dc8574b367e36f"
        },
        "downloads": -1,
        "filename": "scrippy-core-1.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "c5299a811e01a07d5e7e0187ecfc06aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 46946,
        "upload_time": "2022-12-31T01:59:04",
        "upload_time_iso_8601": "2022-12-31T01:59:04.281474Z",
        "url": "https://files.pythonhosted.org/packages/14/37/69fc51e5663183f95f5f3bee348da8c92700030236a2f78dd215fc870f1c/scrippy-core-1.3.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7acbf4e93d084ffb19342d2296ac01cbe61b0bf0f9d8fce1888b3e02cff12a96",
        "md5": "9a5bea4227e278050b4faacb5f869394",
        "sha256": "5d087885c0ecf1bd66f9102dc8d80ff15c45539937b81ed18e3ecf7293414236"
      },
      "downloads": -1,
      "filename": "scrippy_core-1.3.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a5bea4227e278050b4faacb5f869394",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 30341,
      "upload_time": "2023-02-28T11:20:43",
      "upload_time_iso_8601": "2023-02-28T11:20:43.313410Z",
      "url": "https://files.pythonhosted.org/packages/7a/cb/f4e93d084ffb19342d2296ac01cbe61b0bf0f9d8fce1888b3e02cff12a96/scrippy_core-1.3.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "140908b1ec007fb8aa2e0ac489e41499b9d15a30b2457a1117ddd96dd6214e43",
        "md5": "15edbf49bed5c75a621071e67b961807",
        "sha256": "756ad735c11a051d9b073a4af42fe3fa0b5fab80f90c2e5fbb7aa9c75c3a7503"
      },
      "downloads": -1,
      "filename": "scrippy-core-1.3.13.tar.gz",
      "has_sig": false,
      "md5_digest": "15edbf49bed5c75a621071e67b961807",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 50248,
      "upload_time": "2023-02-28T11:20:46",
      "upload_time_iso_8601": "2023-02-28T11:20:46.891461Z",
      "url": "https://files.pythonhosted.org/packages/14/09/08b1ec007fb8aa2e0ac489e41499b9d15a30b2457a1117ddd96dd6214e43/scrippy-core-1.3.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}