{
  "info": {
    "author": "bfzs",
    "author_email": "ydf0509@sohu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# base_decorator\n\n\n```\n通用的装饰器基类，使写装饰器变得更简单。\n```\n\n```python\nimport functools\nimport abc\nimport sys\n\n\nclass Undefind:\n    pass\n\n\nclass BaseDecorator(metaclass=abc.ABCMeta):\n    \"\"\"\n    简化了装饰器的编写。\n\n    用户的装饰器需要继承这个，用户可以按需重新定义 before，after，when_exception 方法。\n\n    为了一致性和省事，统一采用有参数装饰器，用户的装饰器后面必须带括号。\n\n\n    \"\"\"\n\n    # def __init__(self, *args, **kwargs):\n    #     pass\n\n    raw_fun = Undefind()\n    raw_result = Undefind()\n    exc_info = Undefind()\n    final_result = Undefind()  # 用户可以自己定义final_result的值，如果定义了就把这个值作为函数的结果，否则把函数原始结果作为结果。\n\n    def __call__(self, fun, *args, **kwargs):\n        # print(locals())\n        if not callable(fun) or args or kwargs:  # 正常是只有fun一个参数，除非是装饰器没加括号造成的。\n            raise ValueError('为了简单和一致起见，所有装饰器都采用有参数装饰器，被装饰函数上面的装饰器后面别忘了加括号')\n        self.raw_fun = fun\n        f = functools.partial(BaseDecorator._execute, self)  # 比 self.execute 利于补全\n        functools.update_wrapper(f, fun, )\n        return f\n\n    def _execute(self, *args, **kwargs):\n        self.before()\n        try:\n            self.raw_result = self.raw_fun(*args, **kwargs)\n            self.after()\n        except Exception as e:\n            self.exc_info = sys.exc_info()\n            self.when_exception()\n        if not isinstance(self.final_result, Undefind):  # 用户可以自己定义final_result的值，如果定义了就把这个值作为函数的结果。\n            return self.final_result\n        else:\n            return self.raw_result\n\n    def before(self):\n        pass\n\n    def after(self):\n        pass\n\n    def when_exception(self):\n        # print(self.exc_info) # (<class 'ZeroDivisionError'>, ZeroDivisionError('division by zero',), <traceback object at 0x000001D22BA3FD48>)\n        raise self.exc_info[1]\n\n\nif __name__ == '__main__':\n    import nb_log  # noqa\n\n\n    class MyDeco(BaseDecorator):\n        def __init__(self, a=5, b=6):\n            self.a = a\n            self.b = b\n\n        def before(self):\n            print('开始执行')\n\n        # noinspection PyAttributeOutsideInit\n        def after(self):\n            self.final_result = self.a * self.b * self.raw_result\n\n\n    def common_deco(a=5, b=6):\n        \"\"\"  上面的逻辑如果用常规方式写\"\"\"\n\n        def _inner(f):\n            @functools.wraps(f)\n            def __inner(*args, **kwargs):\n                try:\n                    print('开始执行')\n                    result = f(*args, **kwargs)\n                    return a * b * result\n                except Exception as e:\n                    raise e\n\n            return __inner\n\n        return _inner\n\n\n    @MyDeco(b=4)\n    # @common_deco(b=4)\n    def fun3(x):\n        print(x)\n        return x * 2\n\n\n    print(type(fun3))\n    print(fun3)\n    print(fun3.__wrapped__)  # noqa\n    print(fun3(10))\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "base_decorator",
    "license": "BSD License",
    "maintainer": "ydf",
    "maintainer_email": "ydf0509@sohu.com",
    "name": "base-decorator",
    "package_url": "https://pypi.org/project/base-decorator/",
    "platform": "all",
    "project_url": "https://pypi.org/project/base-decorator/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/base-decorator/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "base_decorator,make decorator easy to write",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10793058,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c52f06c7b50532b17a4a5791c31161c6d3071669dfc70925ec3e8aacf582678",
          "md5": "a3c25add707090c45cf8f85203123472",
          "sha256": "13da148910922c50eccf33bd0834e2e2833e959bb313a0cd9317bd9342df222d"
        },
        "downloads": -1,
        "filename": "base_decorator-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a3c25add707090c45cf8f85203123472",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3283,
        "upload_time": "2021-07-01T06:24:06",
        "upload_time_iso_8601": "2021-07-01T06:24:06.763677Z",
        "url": "https://files.pythonhosted.org/packages/3c/52/f06c7b50532b17a4a5791c31161c6d3071669dfc70925ec3e8aacf582678/base_decorator-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c52f06c7b50532b17a4a5791c31161c6d3071669dfc70925ec3e8aacf582678",
        "md5": "a3c25add707090c45cf8f85203123472",
        "sha256": "13da148910922c50eccf33bd0834e2e2833e959bb313a0cd9317bd9342df222d"
      },
      "downloads": -1,
      "filename": "base_decorator-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a3c25add707090c45cf8f85203123472",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3283,
      "upload_time": "2021-07-01T06:24:06",
      "upload_time_iso_8601": "2021-07-01T06:24:06.763677Z",
      "url": "https://files.pythonhosted.org/packages/3c/52/f06c7b50532b17a4a5791c31161c6d3071669dfc70925ec3e8aacf582678/base_decorator-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}