{
  "info": {
    "author": "Ghiles Meddour",
    "author_email": "ghiles.meddour@munic.io",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Faktory Client Python (faktory_worker_python)\n\nThis repository provides Python Client (Consumer and Producer) for the [Faktory](https://github.com/contribsys/faktory/) background job server.\n\n```\n                   +--------------------+\n                   |                    |\n                   |     Faktory        |\n                   |     Server         |\n          +---->>>>|                    +>>>>----+\n          |        |                    |        |\n          |        |                    |        |\n          |        +--------------------+        |\n          |                                      |\n          |                                      |\n          |                                      |\n          |                                      |\n+-----------------------------------------------------------+     \n|         .                Faktory               .          |            \n|         .                Client                .          |  \n|         .                                      .          |          \n|   +-----------------+               +-----------------+   |\n|   |                 |               |                 |   |\n|   |    Producer     |               |    Consumer     |   |\n|   |     pushes      |               |    (Worker)     |   |\n|   |      jobs       |               |     fetches     |   |\n|   |                 |               |       jobs      |   |\n|   |                 |               |                 |   |\n|   +-----------------+               +-----------------+   |          \n|                                                           |            \n+-----------------------------------------------------------+            \n```\n\n- [Server](https://github.com/contribsys/faktory/) - the Faktory daemon which stores background jobs in queues to be processed by Workers.\n- Client - an entity that communicates with the Faktory server using the [FWP](https://github.com/contribsys/faktory/blob/master/docs/protocol-specification.md). A single client can act as both a consumer and a producer.\n- Consumer (or Worker) - a client that fetches work units (jobs) from the server for execution.\n- Producer - a client that issues new work units to the server.\n\nThis library tries to implement the [FWP](https://github.com/contribsys/faktory/blob/master/docs/protocol-specification.md) as well as possible. If you notice any inconsistencies, please report them.\n\n## Installation\n\n```\npip install pyfaktory\n```\n\n## Usage\n\n### Faktory Server\n\nIf you have a Faktory server already running, make sure you have the correct url.\n\n```python\n# Default url for a Faktory server running locally\nfaktory_server_url = 'tcp://localhost:7419'\n```\n\nFor the installation of faktory, please refer to [the official documentation](https://github.com/contribsys/faktory/wiki/Installation).\n\nAfter installation, you can run it locally.\n\n```console\n$ /usr/bin/faktory\nFaktory 1.6.0\n```\n\nYou can use a password for the Faktory server via the environment variable `FAKTORY_PASSWORD`. Note if this value starts with a `/`, then it is considered a pointer to a file on the filesystem with the password. By default `/etc/faktory/password` is used.\n\nThe format of the Faktory URL is as follows:\n```\ntcp://:password@localhost:7419\n```\n\nYou can access the [Fakotry GUI](http://localhost:7420/).\n\nTo run Faktory in production:\n```\n/usr/bin/faktory -e production\n```\n\nFaktory in production mode requires a password by default since version 0.7.0.\n\n### Faktory Client\n\nImport `pyfaktory`.\n\n```python\nfrom pyfaktory import Client, Consumer, Job, Producer\n```\n\nA single client can act as both a consumer and a producer.\n\n```python\nclient = Client(faktory_url='tcp://localhost:7419')\nclient.connect()\n\n# Now you can use the client\n\n# At the end, disconnect the client\nclient.disconnect()\n```\n\nClient is a context manager, so you can use `with` statement.\n\n```python\nwith Client(faktory_url='tcp://localhost:7419') as client:\n    # Use client\n```\n\nUse `role` argument to say how you want to use the client. This argument has \nthree possible values: 'consumer', 'producer' or 'both'.\n\n```python\n# A client that acts as both a consumer and a producer.\nclient = Client(faktory_url='tcp://localhost:7419', role='both')\n```\n\n### Producer\n\nUse the client to push jobs.\n\n#### Push job\n\n```python\nwith Client(faktory_url='tcp://localhost:7419', role='producer') as client:\n    producer = Producer(client=client)\n    job_1 = Job(jobtype='adder', args=(5, 4), queue='default')\n    producer.push(job_1)\n```\n\n#### Push bulk jobs\n\nYou can push several jobs at once. There is no limit, but 1000 at a time is recommended as a best practice.\n\n```python\nwith Client(faktory_url='tcp://localhost:7419', role='producer') as client:\n    producer = Producer(client=client)\n    job_2 = Job(jobtype='adder', args=(50, 41))\n    job_3 = Job(jobtype='adder', args=(15, 68))\n    res = producer.push_bulk([job_2, job_3])\n```\n\n### Consumer (Worker)\n\nUse a worker to pull jobs from Faktory server and execute them.\n\n```python\ndef adder(x, y):\n    logging.info(f\"{x} + {y} = {x + y}\")\n\nwith Client(faktory_url='tcp://localhost:7419', role='consumer') as client:\n    consumer = Consumer(client=client, queues=['default'], concurrency=1)\n    consumer.register('adder', adder)\n    consumer.run()\n```\n\nUse `priority` to indicates in which queue order the jobs should be fetched \nfirst.\n\n```python\n# With strict priority, there is a risk of starvation\nconsumer = Consumer(client=client, queues=['critical', 'default', 'bulk'], priority='strict')\n# Each queue has an equal chance of being fetched first\nconsumer = Consumer(client=client, queues=['critical', 'default', 'bulk'], priority='uniform')\n# Weights must be specified\nconsumer = Consumer(client=client, queues=['critical', 'default', 'bulk'], priority='weighted', weights=[0.6, 0.3, 0.1])\n```\n\n### Capture exceptions using Sentry\n\nTo capture exceptions using Sentry before failling jobs \nset `sentry_capture_exception` argument to `True`.\n\n```python\nconsumer = Consumer(client=client, sentry_capture_exception=True)\n```\n\n### Info\n\nYou can get various information about the server using `info` Client method.\n\n```python\nwith Client(faktory_url='tcp://localhost:7419') as client:\n    server_info = client.info()\n    print(server_info)\n```\n\n### Mutate\n\nA wrapper for the [Mutate API](https://github.com/contribsys/faktory/wiki/Mutate-API) to script certain repairs or migrations.\n\n⚠️ MUTATE commands can be slow and/or resource intensive. They should not be used as part of your application logic.\n\n```python\nfrom pyfaktory import Client, JobFilter, MutateOperation\n\nclient = Client(faktory_url='tcp://localhost:7419')\nclient.connect()\n\n# Find all scheduled jobs with type `QuickbooksSyncJob` and discard them\nop = MutateOperation(\n    cmd='discard', \n    target='scheduled', \n    filter=JobFilter(jobtype=\"QuickbooksSyncJob\")\n)\nclient.mutate(op)\n\n# Clear the Retry queue completely\nop = MutateOperation(\n    cmd='discard', \n    target='retries', \n    filter=JobFilter(regexp=\"*\")\n)\nclient.mutate(op)\n\n# Clear the Retry queue completely\nop = MutateOperation(\n    cmd='discard', \n    target='retries'\n)\nclient.mutate(op)\n\n# Send a two specific JIDs in the Retry queue to the Dead queue\nop = MutateOperation(\n    cmd='kill', \n    target='retries', \n    filter=JobFilter(jobtype=\"QuickbooksSyncJob\", jids=[\"123456789\", \"abcdefgh\"])\n)\nclient.mutate(op)\n\n# Enqueue all retries with a first argument matching \"bob\"\nop = MutateOperation(\n    cmd='requeue', \n    target='retries', \n    filter=JobFilter(regexp=\"*\\\"args\\\":[\\\"bob\\\"*\")\n)\nclient.mutate(op)\n\nclient.disconnect()\n```\n\n### Queues\n\n**Pausing**\n\nQueues may be paused (no job can be fetched from them while paused) or unpaused \n(resume fetching).\n\n```python\n# Pause a list of queues\nclient.queue_pause(queues=['bulk', 'another_queue'])\n\n# Pause all queues\nclient.queue_pause(all_queues=True)\n\n\n# Unpause a list of queues\nclient.queue_unpause(queues=['bulk'])\n\n# Unpause all queues\nclient.queue_unpause(all_queues=True)\n```\n\n**Remove**\n\nQueues can be removed which deletes all jobs within them. It does not stop \ncurrently executing jobs from those queues.\n\n```python\n# Remove a list of queues\nclient.queue_remove(queues=['bulk'])\n\n# Remove all queues\nclient.queue_remove(all_queues=True)\n```\n\n### Batch (untested)\n\nRefer to [documentation](https://github.com/contribsys/faktory/wiki/Ent-Batches).\n\n```python\nfrom pyfaktory import Batch, Client, Job, Producer, TargetJob\n\nclient = Client(faktory_url='tcp://localhost:7419')\nclient.connect()\n\nproducer = Producer(client=client)\n\nbatch = Batch(\n    description=\"An optional description for the Web UI\",\n    success=TargetJob(jobtype=\"MySuccessCallback\", args=[123], queue=\"critical\"),\n    complete=TargetJob(jobtype=\"MyCompleteCallback\", args=['aa'], queue=\"critical\")\n)\n\n# Create a new batch\nresp = producer.batch_new(batch)\n\n# Push as many jobs as necessary for the batch\n# You may nest batches\n# The initial batch data has a TTL of 30 minutes and will expire if batch is not commited\nproducer.push(Job(jobtype='SomeJob', args=(5, 4), custom={\"bid\": bid}))\nproducer.push(Job(jobtype='SomeOtherJob', args=(0, 15), custom={\"bid\": bid}))\n\n# Commit the batch\nproducer.batch_commit(bid)\n\nclient.disconnect()\n```\n\nUse `batch_open` to open a created batch.\n\n```python\nproducer.batch_open(bid)\n```\n\nUse `parent_bid` for child batch.\n\n```python\nchild_batch = Batch(\n    parent_bid=bid,\n    description=\"An optional description for the Web UI\",\n    success=TargetJob(jobtype=\"MySuccessCallback\", args=[123], queue=\"critical\"),\n    complete=TargetJob(jobtype=\"MyCompleteCallback\", args=['aa'], queue=\"critical\")\n)\n```\n\n### Custom command\n\nIf you want to use a Faktory command that is not yet implemented in this client library, you can send custom commands.\n\n```python\nfrom pyfaktory import Client\n\nmy_command = 'INFO\\r\\n'\n\nwith Client(faktory_url='tcp://localhost:7419') as client:\n    resp = client._send_and_receive(my_command)\n    print(resp)\n```\n\n## Example\n\nFind examples in `./examples`.\n\n- Start the Faktory server.\n```\n/usr/bin/faktory\n```\n\n- Launch a producer.\n```\npython examples/fproducer.py\n```\n\n- Launch a consumer.\n```\npython examples/fconsumer.py\n```\n\n- Look at what is happening in the logs and in the [Faktory Web UI](http://localhost:7420/).\n\n## Contribute\n\n### Issues\n\nIf you encounter a problem, please report it.\n\nIn addition to the description of your problem, report the server and client\nversions.\n\n```python\npyfaktory.__version__\n```\n```\n/usr/bin/faktory -v\n```\n\nReproduce your problem while increasing the level of debugging for both the\nserver and the client, and report the logs.\n```python\nimport logging\n\nlogging.basicConfig(format='%(asctime)s %(levelname)-8s %(message)s',\n                    level=logging.DEBUG,\n                    datefmt='%Y-%m-%d %H:%M:%S')\n```\n```\n/usr/bin/faktory -l debug\n```\n\n### PRs\n\nPlease, feel free to create pull requests.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ghilesmeddour/faktory_worker_python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfaktory",
    "package_url": "https://pypi.org/project/pyfaktory/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyfaktory/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ghilesmeddour/faktory_worker_python/issues",
      "Homepage": "https://github.com/ghilesmeddour/faktory_worker_python"
    },
    "release_url": "https://pypi.org/project/pyfaktory/0.2.1/",
    "requires_dist": [
      "pebble",
      "rfc3339-validator",
      "sentry-sdk ; extra == 'sentry'"
    ],
    "requires_python": ">=3.8",
    "summary": "Faktory Client Python (Producer and Consumer/Worker)",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14065228,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "726671ac1c21000a908cb192412130df85fae4bcb78b4d9353b6d061ffdc7529",
          "md5": "2e63e73ab6909e39b70227346479bd2b",
          "sha256": "ed8e274abdea2d046c2d561b4015d0fb5418e5f26df1406ef526d04dfc5f0f46"
        },
        "downloads": -1,
        "filename": "pyfaktory-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e63e73ab6909e39b70227346479bd2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14472,
        "upload_time": "2021-09-11T18:54:05",
        "upload_time_iso_8601": "2021-09-11T18:54:05.691378Z",
        "url": "https://files.pythonhosted.org/packages/72/66/71ac1c21000a908cb192412130df85fae4bcb78b4d9353b6d061ffdc7529/pyfaktory-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57a3a7c6e4364af9868b14ff958c25873d9d42f113d94cb7cb94f2941ce18ca2",
          "md5": "0ab1701f29652710d2faef8b9d012746",
          "sha256": "2bf5140db6dfe806d4ab1eec01f44c1f0ff6d228d174c820194e011e4b6e9383"
        },
        "downloads": -1,
        "filename": "pyfaktory-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ab1701f29652710d2faef8b9d012746",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14165,
        "upload_time": "2021-09-11T18:54:07",
        "upload_time_iso_8601": "2021-09-11T18:54:07.344271Z",
        "url": "https://files.pythonhosted.org/packages/57/a3/a7c6e4364af9868b14ff958c25873d9d42f113d94cb7cb94f2941ce18ca2/pyfaktory-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6312ae9a468e0e356123bb3b9c658319ee9b26a456e515871104ac9ca8c8e85d",
          "md5": "4cbaaf10d004a4ab39fd6bfff6c79807",
          "sha256": "a43e4c020b748aa988353aaa244da8ca38313ee87b402b8a3c3615545118e476"
        },
        "downloads": -1,
        "filename": "pyfaktory-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4cbaaf10d004a4ab39fd6bfff6c79807",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14676,
        "upload_time": "2021-11-15T19:45:44",
        "upload_time_iso_8601": "2021-11-15T19:45:44.682521Z",
        "url": "https://files.pythonhosted.org/packages/63/12/ae9a468e0e356123bb3b9c658319ee9b26a456e515871104ac9ca8c8e85d/pyfaktory-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecbf951de655c7d3e26abdbc4931111e84d2553df74af8612ce9b55c9f29a493",
          "md5": "114c49a8202703340abee01622f5a7ec",
          "sha256": "9da2054d0e73da3b3f16f7e1fe3a6142327c6e7421cd1b4d86d7459370b267e3"
        },
        "downloads": -1,
        "filename": "pyfaktory-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "114c49a8202703340abee01622f5a7ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14447,
        "upload_time": "2021-11-15T19:45:46",
        "upload_time_iso_8601": "2021-11-15T19:45:46.014427Z",
        "url": "https://files.pythonhosted.org/packages/ec/bf/951de655c7d3e26abdbc4931111e84d2553df74af8612ce9b55c9f29a493/pyfaktory-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00d13a4fff9058449446fc1b3e4da497df4e51874213911f4a01f84a46027cdb",
          "md5": "b43b358ef73a73564f9730e37560a179",
          "sha256": "56144735d258d9046226146e622d9dfe0ca1ddb072af77ce038b308fe2f354e1"
        },
        "downloads": -1,
        "filename": "pyfaktory-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b43b358ef73a73564f9730e37560a179",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15977,
        "upload_time": "2022-05-24T22:17:50",
        "upload_time_iso_8601": "2022-05-24T22:17:50.571602Z",
        "url": "https://files.pythonhosted.org/packages/00/d1/3a4fff9058449446fc1b3e4da497df4e51874213911f4a01f84a46027cdb/pyfaktory-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96f51deebd3bc1ab3fb111c76dc3820cc0b367033f19b232781f82774614bee3",
          "md5": "cbbc70fdc6b9440d367966ebe8b27589",
          "sha256": "c046460228818b7a5395c5fb8e893b0a6495e4ebe2570843578ebe9c88cdc7d8"
        },
        "downloads": -1,
        "filename": "pyfaktory-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cbbc70fdc6b9440d367966ebe8b27589",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16502,
        "upload_time": "2022-05-24T22:17:52",
        "upload_time_iso_8601": "2022-05-24T22:17:52.485333Z",
        "url": "https://files.pythonhosted.org/packages/96/f5/1deebd3bc1ab3fb111c76dc3820cc0b367033f19b232781f82774614bee3/pyfaktory-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7aeebe38d33c4b3db1a12601eb7afa2b27268889209416a156e6d5c142d05487",
          "md5": "a7a315d58de13e91c0523c0a4a402682",
          "sha256": "5ab375b4bf635d5d2d288511e547c93c1cfa963ef4e419b6e5d615b995cc49a0"
        },
        "downloads": -1,
        "filename": "pyfaktory-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7a315d58de13e91c0523c0a4a402682",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16366,
        "upload_time": "2022-06-08T04:29:07",
        "upload_time_iso_8601": "2022-06-08T04:29:07.262598Z",
        "url": "https://files.pythonhosted.org/packages/7a/ee/be38d33c4b3db1a12601eb7afa2b27268889209416a156e6d5c142d05487/pyfaktory-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85b5b78717f9231210d8d12eee64dcdfcfb51c09ba28347a0659d0fa903b4712",
          "md5": "a4c82f8ee9d82d62c58f5e44e664a1b9",
          "sha256": "e7188051e65dffdcc40e563d3cf7068b9717e874343eb1f655bb6815a6488bc6"
        },
        "downloads": -1,
        "filename": "pyfaktory-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a4c82f8ee9d82d62c58f5e44e664a1b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17175,
        "upload_time": "2022-06-08T04:29:08",
        "upload_time_iso_8601": "2022-06-08T04:29:08.905417Z",
        "url": "https://files.pythonhosted.org/packages/85/b5/b78717f9231210d8d12eee64dcdfcfb51c09ba28347a0659d0fa903b4712/pyfaktory-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7aeebe38d33c4b3db1a12601eb7afa2b27268889209416a156e6d5c142d05487",
        "md5": "a7a315d58de13e91c0523c0a4a402682",
        "sha256": "5ab375b4bf635d5d2d288511e547c93c1cfa963ef4e419b6e5d615b995cc49a0"
      },
      "downloads": -1,
      "filename": "pyfaktory-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7a315d58de13e91c0523c0a4a402682",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16366,
      "upload_time": "2022-06-08T04:29:07",
      "upload_time_iso_8601": "2022-06-08T04:29:07.262598Z",
      "url": "https://files.pythonhosted.org/packages/7a/ee/be38d33c4b3db1a12601eb7afa2b27268889209416a156e6d5c142d05487/pyfaktory-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85b5b78717f9231210d8d12eee64dcdfcfb51c09ba28347a0659d0fa903b4712",
        "md5": "a4c82f8ee9d82d62c58f5e44e664a1b9",
        "sha256": "e7188051e65dffdcc40e563d3cf7068b9717e874343eb1f655bb6815a6488bc6"
      },
      "downloads": -1,
      "filename": "pyfaktory-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a4c82f8ee9d82d62c58f5e44e664a1b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 17175,
      "upload_time": "2022-06-08T04:29:08",
      "upload_time_iso_8601": "2022-06-08T04:29:08.905417Z",
      "url": "https://files.pythonhosted.org/packages/85/b5/b78717f9231210d8d12eee64dcdfcfb51c09ba28347a0659d0fa903b4712/pyfaktory-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}