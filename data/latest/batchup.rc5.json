{
  "info": {
    "author": "Geoffrey French",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# BatchUp\nPython library for extracting mini-batches of data from a data source for the purpose of training neural networks.\n\nQuick example:\n\n```py3\nfrom batchup import data_source\n\n# Construct an array data source\nds = data_source.ArrayDataSource([train_X, train_y])\n\n# Iterate over samples, drawing batches of 64 elements in random order\nfor (batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=True):\n    # Processes batches here...\n```\n\nDocumentation available at https://batchup.readthedocs.io\n\n\n# Table of Contents\n\n#### Installation\n\n#### Batch iteration\nProcessing data in mini-batches:\n- quick batch iteration; a basic example\n- iterating over subsets identified by indices\n- data augmentation\n- including sample indices in the mini-batches\n- infinite batch iteration; an iterator that generates batches endlessly\n- sample weighting to alter likelihood of samples (e.g. to compensate for class imbalance)\n- iterating over two data sets simultaneously where their sizes differ (e.g. for semi-supervised learning)\n- iterating over data sets that are NOT stored as NumPy arrays (e.g. on disk or generated on the fly)\n- parallel processing to speed up iteration where loading/preparing samples could be slow\n\n#### Gathering results and loss values\n- removing the for-loop; predict values for samples in one line\n- computing mean loss/error values\n\n#### Standard datasets\nBatchUp supports some standard machine learning datasets. They will be automatically downloaded if necessary.\n- MNIST\n- SVHN\n- CIFAR-10\n- CIFAR-100\n- STL\n- USPS\n\n#### Configuring BatchUp\nData paths, etc.\n\nMore details further down, but briefly, use either the `~/.batchup.cfg` configuration file or the `BATCHUP_HOME` environment varible.\n\n\n## Installation\n\nYou can install BatchUp with:\n\n```> pip install batchup```\n\n## Batch iteration\n### Quick batch iteration\n\nAssume we have a training set loaded in the variables `train_X` and `train_y`:\n\n```py3\nfrom batchup import data_source\n\n# Construct an array data source\nds = data_source.ArrayDataSource([train_X, train_y])\n\n# Iterate over samples, drawing batches of 64 elements in random order\nfor (batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345)):\n    # Processes batches here...\n```\n\nSome notes:\n- the last batch will be short (have less samples than the requested batch size) if there isn't enough data to fill it.\n- using `shuffle=True` will use NumPy's default random number generator\n- not specifying shuffle will process the samples in-order\n\n### Iterating over subsets identified by indices\n\nWe can specify the indices of a subset of the samples in a dataset and draw mini-batches from only those samples:\n\n```py3\nimport numpy as np\n\n# Randomly choose a subset of 20,000 samples, by indices\nsubset_a = np.random.permutation(train_X.shape[0])[:20000]\n\n# Construct an array data source that will only draw samples whose indices are in `subset_a`\nds = data_source.ArrayDataSource([train_X, train_y], indices=subset_a)\n\n# Drawing batches of 64 elements in random order\nfor (batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345)):\n    # Processes batches here...\n```\n\n### Data augmentation\n\nWe can define a function that applies data augmentation on the fly. Let's assume that `train_X` contains image data,\nhas the shape `(sample, channel, height, width)` and that we wish to horizontally flip some of the images:\n\n```py3\nimport numpy as np\n\n# Define our batch augmentation function.\ndef augment_batch(batch_X, batch_y):\n    # Create an array that selects samples with 50% probability and convert to `bool` dtype\n    flip_flags = np.random.binomial(1, 0.5, size=(len(batch_X),)) != 0\n\n    # Flip the width dimension in selected samples\n    batch_X[flip_flags, ...] = flip_flags[flip_flags, :, :, ::-1]\n\n    # Return the batch as a tuple\n    return batch_X, batch_y\n\n# Construct an array data source that will only draw samples whose indices are in `subset_a`\nds = data_source.ArrayDataSource([train_X, train_y])\n\n# Apply augmentation\nds = ds.map(augment_batch)\n\n# Drawing batches of 64 elements in random order\nfor (batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345)):\n    # Processes batches here...\n```\n\nMore complex augmentation may incurr significant runtime cost. This can be alleviated by preparing batches\nin background threads. See the *parallel processing* section below.\n\n### Including sample indices in the mini-batches\n\nWe can ask to be provided with the indices of the samples that were drawn to form the mini-batch:\n\n```py3\n# Construct an array data source that will provide sample indices\nds = data_source.ArrayDataSource([train_X, train_y], include_indices=True)\n\n# Drawing batches of 64 elements in random order\nfor (batch_ndx, batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345)):\n    # Processes batches here...\n```\n\n### Infinite batch iteration\n\nLets say you need an iterator that extracts samples from your dataset and starts from the beginning when it reaches the end:\n\n```py3\nds = data_source.ArrayDataSource([train_X, train_y], repeats=-1)\n```\n\nNow use the `batch_iterator` method as before.\n\nThe `repeats` parameter accepts either `-1` for infininte, or any positive integer `>= 1` for a specified number of repetitions.\n\nThis will also work if the dataset has less samples than the batch size; not a common use case but can happen in certain situations involving semi-supervised learning for instance.\n\n### Sample weighting to alter likelihood of samples\n\nIf you want some samples to be drawn more frequently than others, construct a `sampling.WeightedSampler` and pass\nit as the `sampler` argument to the `ArrayDataSource` constructor. In the example the per-sample weights are stored\nin `train_w`.\n\n```py3\nfrom batchup import sampling\n\nsampler = sampling.WeightedSampler(weights=train_w)\n\nds = data_source.ArrayDataSource([train_X, train_y], sampler=sampler)\n\n# Drawing batches of 64 elements in random order\nfor (batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345)):\n    # Processes batches here...\n```\n\n**Note** that in-order is NOT supported when using `sampling.WeightedSampler`, so `shuffle` *cannot* be `False` or\n`None`.\n\nTo draw from a subset of the dataset, use `sampling.WeightedSubsetSampler`:\n\n```py3\nfrom batchup import sampling\n\n# NOTE that that parameter is called `sub_weights` (rather than `weights`) and that it must have the\n# same length as `indices`.\nsampler = sampling.WeightedSubsetSampler(sub_weights=train_w[subset_a], indices=subset_a)\n\nds = data_source.ArrayDataSource([train_X, train_y], sampler=sampler)\n\n# Drawing batches of 64 elements in random order\nfor (batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345)):\n    # Processes batches here...\n```\n\n\n#### Class balancing helper\n\nAn alternate constructor `sampling.WeightedSampler.class_balancing_sampler` is available to construct a weighted sampler to compensate for class imbalance:\n\n```py3\n# Construct the sampler; NOTE that the `n_classes` argument is *optional*\nsampler = sampling.WeightedSampler.class_balancing_sampler(y=train_y, n_classes=train_y.max() + 1)\n\nds = data_source.ArrayDataSource([train_X, train_y], sampler=sampler)\n\n# Drawing batches of 64 elements in random order\nfor (batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345)):\n    # Processes batches here...\n```\n\nThe `sampling.WeightedSampler.class_balancing_sample_weights` helper method constructs an array of sample weights,\nin case you wish to modify the weights first:\n```py3\nweights = sampling.WeightedSampler.class_balancing_sample_weights(y=train_y, n_classes=train_y.max() + 1)\n\n# Assume `modify_weights` is defined above\nweights = modify_weights(weights)\n\n# Construct the sampler and the data source\nsampler = sampling.WeightedSampler(weights=weights)\nds = data_source.ArrayDataSource([train_X, train_y], sampler=sampler)\n\n# Drawing batches of 64 elements in random order\nfor (batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345)):\n    # Processes batches here...\n```\n\n\n### Iterating over two data sources of wildly different sizes for semi-supervised learning\n\nIn semi-supervised learning we have a small dataset of labeled samples `lab_X` with ground truths `lab_y` and a larger set of unlabeled samples `unlab_X`. Lets say we want a single epoch to consist of the entire unlabeled dataset while looping over the labeled dataset repeatly. The `CompositeDataSource` class can help us here.\n\nWithout using `CompositeDataSource`:\n\n```py3\nrng = np.random.RandomState(12345)\n\n# Construct the data sources; the labeled data source will repeat infinitely\nds_lab = data_source.ArrayDataSource([lab_X, lab_y], repeats=-1)\nds_unlab = data_source.ArrayDataSource([unlab_X])\n\n# Construct an iterator to get samples from our labeled data source:\nlab_iter = ds_lab.batch_iterator(batch_size=64, shuffle=rng)\n\n# Iterate over the unlabled data set in the for-loop\nfor (batch_unlab_X,) in ds_unlab.batch_iterator(batch_size=64, shuffle=rng):\n    # Extract batches from the labeled iterator ourselves\n    batch_lab_X, batch_lab_y = next(lab_iter)\n\n    # Process batches here...\n```\n\nNow using `CompositeDataSource`:\n\n```py3\n# Construct the data sources; the labeled data source will repeat infinitely\nds_lab = data_source.ArrayDataSource([lab_X, lab_y], repeats=-1)\nds_unlab = data_source.ArrayDataSource([unlab_X])\nds = data_source.CompositeDataSource([ds_lab, ds_unlab])\n\n# Iterate over both the labeled and unlabeled samples:\nfor (batch_lab_X, batch_lab_y, batch_unlab_X) in ds.batch_iterator(batch_size=64, shuffle=rng):\n    # Process batches here...\n\n```\n\nThe two component data sources (`ds_lab` and `ds_unlab`) will be shuffled independently.\n\nYou can also have `CompositeDataSource` generate structured mini-batches that reflect the structure of the data source:\n\n```py3\n# Flatten this time round:\nds_struct = data_source.CompositeDataSource([ds_lab, ds_unlab], flatten=False)\n\n# Iterate over both the labeled and unlabeled samples:\nfor ((batch_lab_X, batch_lab_y), (batch_unlab_X,)) in ds_struct.batch_iterator(batch_size=64, shuffle=rng):\n    # Process batches here...\n```\n\n`CompositeDataSource` instances can be arbitrarily nested.\n\n### Using data that is NOT stored as NumPy arrays\n\nThe arrays passed to `ArrayDataSource` do not have to be NumPy arrays, they just have to be array-like. An array-like object should implement the `__len__` method that returns the number of samples and the `__getitem__` method that returns the samples themselves. Note that `__getitem__` should accept integer indices, slices, or NumPy integer arrays that give the indices of the samples to retrieve.\n\nLets day we want to implement a data source that loads images from disk on the fly. Lets also assume that the prefix of the filename, either `'cat'` or `'dog'` gives the ground truth:\n\n```py3\nimport glob\nimport os\nfrom scipy.misc import imread\nfrom batchup import data_source\n\nclass LoadImagesFromDisk (object):\n    def __init__(self, paths):\n        # Paths is a list of file paths\n        self.paths = paths\n\n    # We have to imlement the `__len__` method:\n    def __len__(self):\n        return len(self.paths)\n\n\n    # We have to implement the `__getitem__` method that `ArrayDataSource` will use to get samples\n    def __getitem__(self, index):\n        if isinstance(index, (int, long)):\n            # A single integer index; return that sample\n            return imread(self.paths[index])\n        elif isinstance(index, slice):\n            # A slice\n            images = [imread(p) for p in self.paths[index]]\n            return np.concatenate([img[None, ...] for img in images], axis=0)\n        elif isinstance(index, np.ndarray):\n            if index.ndim != 1:\n                raise ValueError('index array should only have 1 dimension, not {}'.format(index.ndim))\n            images = [imread(self.paths[i]) for i in index]\n            return np.concatenate([img[None, ...] for img in images], axis=0)\n        else:\n            raise TypeError('index should be an integer, a slice or a NumPy array, '\n                            'not a {}'.format(type(index))\n\n# Get our image paths\nimage_paths = glob.glob('/path/to/my/images/*.jpg')\n\n# Build our array-like data source\ntrain_X = LoadImagesFromDisk(image_paths)\n\n# Construct our ground truths as a NumPy array\ntrain_y = [(1 if os.path.basename(p).startswith('dog') else 0) for p in image_paths)]\ntrain_y = np.array(train_y, dtype=np.int32)\n\n# Mixing custom array types with NumPy arrays is fine\nds = data_source.ArrayDataSource([train_X, train_y])\n\nfor (batch_X, batch_y) in ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345)):\n    # Process batches here...\n```\n\n### Using parallel processing to speed things up\n\nThe above example has a potential performance problem as loading the images from disk would introduce latency. We can use the `work_pool` module to prepare the mini-batches in separate threads or processes to hide this latency.\n\n#### Using threads\n\nThe modifications to the previous example to use parallel processing are quite simple (lets assume that the `LoadImagesFromDisk` class is defined and that `train_X`, `train_y` and `ds` (an `ArrayDataSource` instance) have already been built:\n\n```py3\nfrom batchup import work_pool\n\n# Build a pool of 4 worker threads:\nth_pool = work_pool.WorkerThreadPool(processes=4)\n\n# Construct a data source that prepares mini-batches in the background\n# It wraps the existing data source `ds` and will try to keep a buffer of 32\n# mini-batches full to eliminate latency:\npar_ds = th_pool.parallel_data_source(ds, batch_buffer_size=32)\n\n# As soon as we create an iterator, it will start filling its buffer; lets create an\n# iterator right now to get it going in the background:\npar_iter = par_ds.batch_iterator(batch_size=64, shuffle=np.random.RandomState(12345))\n\n# Do some other initialisation stuff that may take a while...\n\n# By now, with any luck, some batches will be ready to retrieve\n\nfor (batch_X, batch_y) in par_iter:\n    # Process batches here...\n```\n\n#### Using processes\n\nIn some cases the data source that you wish to parallelize may include some cacheing logic that is not thread safe. In such cases you can use process based pools that use separate processes rather than threads.\nThere are one or two gotchas, namely that using process-based pools entails a higher overhead and that the data source class and its dependent types must be declared in the top level of a module so that `pickle` can find them.\n\n```py3\n# Build a pool of 4 worker processes:\nproc_pool = work_pool.WorkerProcessPool(processes=4)\n\n# Construct a data source that prepares mini-batches in the background\n# It wraps the existing non-thread-safe data source `ds` and\n# will try to keep a buffer of 32 mini-batches full to eliminate latency:\npar_ds = proc_pool.parallel_data_source(ds, batch_buffer_size=32)\n\n# ... use `par_ds` the same way as before ...\n```\n\n## Gathering results and loss values\n\nWe can further simplify training and evaluation procedures using the `batch_map_concat` and `batch_map_mean` methods.\n\n### Removing the for-loop; predict values for samples in one line\n\nLets assume we have a prediction function `f_pred` of the form `f_pred(batch_X) -> batch_pred_y`. \nIf we want to predict results for our test set in `test_X`, we can do this in one line, without the for loop:\n\n```py3\ntest_ds = data_source.ArrayDataSource([test_X])\n\n(pred_y,) = test_ds.batch_map_concat(f_pred, batch_size=256)\n```\n\nThe `batch_map_concat` method will process all the samples in `test_X` and gather the results in a tuple of arrays, hence\nthe `(pred_y,) = ...`. If you want `tqdm` ([PyPi](http://pypi.python.org/pypi/tqdm), [GitHub](http://github.com/noamraph/tqdm)) to give you a progress bar:\n\n```py3\n(pred_y,) = test_ds.batch_map_concat(f_pred, batch_size=256, progress_iter_func=tqdm.tqdm)\n```\n\n### Computing mean loss/error values\n\nLets assume we have a evaluation function `f_eval` of the form `f_eval(batch_X, batch_y) -> [log_loss_sum, err_count]`. \nAssuming that we are doing classification, `f_eval` returns the sum of the per-sample log-losses and the number of errors.\nThe `batch_map_mean` method will process all of the data in the data source, gather loss and error counts and return the mean:\n\n```py3\nval_ds = data_source.ArrayDataSource([val_X, val_y])\n\nmean_log_loss, mean_err_rate = val_ds.batch_map_mean(f_eval, batch_size=256)\n```\n\nNote that as above, the `progress_iter_func` parameter can be passed `tqdm.tqdm` to give you a progress bar.\n\n\n## Standard datasets\n\nBatchUp provides support for using some standard datasets.\n\n#### MNIST dataset\n\nLoad the MNIST dataset:\n```py3\nfrom batchup.datasets import mnist\n\n# Load MNIST dataset (downloading it if necessary) and retain the last 10000\n# training samples for validation\nds = mnist.MNIST(n_val=10000)\n```\n\n- `ds.train_X` is a `(n, 1, 28, 28)` `float32` array that contains the\n    training images.\n- `ds.train_y` is a `(n,)` `int32` array that contains the ground truths.\n- `ds.val_X` and `ds.val_y` contain the validation samples\n- `ds.test_X` and `ds.test_y` contain the test samples\n\n\n#### SVHN dataset\n\nLoad the SVHN dataset:\n```py3\nfrom batchup.datasets import svhn\n\n# Load SVHN dataset (downloading it if necessary) and retain the last 10000\n# training samples for validation\nds = svhn.SVHN(n_val=10000)\n```\n\n- `ds.train_X` is a `(n, 3, 32, 32)` `float32` array that contains the\n    training images.\n- `ds.train_y` is a `(n,)` `int32` array that contains the ground truths.\n- `ds.val_X` and `ds.val_y` contain the validation samples\n- `ds.test_X` and `ds.test_y` contain the test samples\n\n\n#### CIFAR-10 dataset\n\nLoad the CIFAR-10 dataset:\n```py3\nfrom batchup.datasets import cifar10\n\n# Load CIFAR-10 dataset (downloading it if necessary) and retain the last 5000\n# training samples for validation\nds = cifar10.CIFAR10(n_val=5000)\n```\n\n- `ds.train_X` is a `(n, 3, 32, 32)` `float32` array that contains the\n    training images.\n- `ds.train_y` is a `(n,)` `int32` array that contains the ground truths.\n- `ds.val_X` and `ds.val_y` contain the validation samples\n- `ds.test_X` and `ds.test_y` contain the test samples\n- `ds.class_names` lists the class names of the corresponding ground truth\n    indices\n\n\n#### CIFAR-100 dataset\n\nLoad the CIFAR-100 dataset:\n```py3\nfrom batchup.datasets import cifar100\n\n# Load CIFAR-100 dataset (downloading it if necessary) and retain the last 5000\n# training samples for validation\nds = cifar100.CIFAR100(n_val=5000)\n```\n\n- `ds.train_X` is a `(n, 3, 32, 32)` `float32` array that contains the\n    training images.\n- `ds.train_y` is a `(n,)` `int32` array that contains the fine ground\n    truth classes.\n- `ds.train_y_coarse` is a `(n,)` `int32` array that contains the coarse\n    ground truth classes.\n- `ds.val_X`, `ds.val_y` and `ds.val_y_coarse` contain the validation samples\n- `ds.test_X`, `ds.test_y` and `ds.test_y_coarse` contain the test samples\n- `ds.class_names` lists the class names of the corresponding fine ground\n    truth indices\n- `ds.class_names_coarse` lists the class names of the corresponding coarse\n    ground truth indices\n\n\n#### STL dataset\n\nLoad the STL dataset:\n```py3\nfrom batchup.datasets import stl\n\n# Load STL dataset (downloading it if necessary) and retain 1 fold of\n# training samples for validation\nds = stl.STL(n_val_folds=1)\n```\n\n- `ds.train_X_u8` is a `(n, 3, 96, 96)` `uint8` array that contains the\n    training images.\n- `ds.train_y` is a `(n,)` `int32` array that contains the ground truths.\n- `ds.val_X_u8` and `ds.val_y` contain the validation samples\n- `ds.test_X_u8` and `ds.test_y` contain the test samples\n- `ds.class_names` lists the class names of the corresponding ground truth\n    indices\n\nWe keep the image data in `uint8` form to save memory,\n\n\n#### USPS dataset\n\nLoad the USPS dataset (similar to MNIST hand-written digits but smaller):\n```py3\nfrom batchup.datasets import usps\n\n# Load USPS dataset (downloading it if necessary) and retain 729\n# training samples for validation\nds = usps.USPS(n_val=729)\n```\n\n- `ds.train_X` is a `(n, 1, 16, 16)` `float32` array that contains the\n    training images.\n- `ds.train_y` is a `(n,)` `int32` array that contains the ground truths.\n- `ds.val_X` and `ds.val_y` contain the validation samples\n- `ds.test_X` and `ds.test_y` contain the test samples\n\n\n## Configuring BatchUp (paths etc).\n\nThe configuration for BatchUp lives in `.batchup.cfg` in your home directory.\n\nBy default BatchUp will store its data (e.g. downloaded datasets) in a directory called `.batchup` that resides in your home directory. If you wish it to locate this data somewhere else (some of the datasets an take a few gigabytes), create the configuration file mentioned above:\n\n\n```cfg\n[paths]\ndata_dir=/some/path/batchup_data\n```\n\nAlternatively you can set the `BATCHUP_HOME` environment variable top the BatchUp data directory.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Britefury/batchup",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "batchup",
    "package_url": "https://pypi.org/project/batchup/",
    "platform": "",
    "project_url": "https://pypi.org/project/batchup/",
    "project_urls": {
      "Homepage": "https://github.com/Britefury/batchup"
    },
    "release_url": "https://pypi.org/project/batchup/0.2.3/",
    "requires_dist": [
      "numpy",
      "scipy",
      "six",
      "tables",
      "joblib",
      "mock ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "pytest-pep8 ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "Python library for extracting mini-batches of data from a data source for the purpose of training neural networks",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5491410,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d553d9f7bb3296b56f758125384ae13aabc75f6d64e3ffcc5f95362c7802f5c",
          "md5": "a22bc9e88e7be8ea69ea3af10268ce64",
          "sha256": "62afe535aa73414c58a94a73f979d69730f44f0e72bdb76f7749496f026bf164"
        },
        "downloads": -1,
        "filename": "batchup-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a22bc9e88e7be8ea69ea3af10268ce64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53031,
        "upload_time": "2018-01-20T18:48:56",
        "upload_time_iso_8601": "2018-01-20T18:48:56.025884Z",
        "url": "https://files.pythonhosted.org/packages/6d/55/3d9f7bb3296b56f758125384ae13aabc75f6d64e3ffcc5f95362c7802f5c/batchup-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdd0dbeab0fcb91e4b6c0a46c0a7fb046815654df9510884faaacdbef9c32cad",
          "md5": "0f8d0f3e91d12032642da73aa8e5fea4",
          "sha256": "0a720613058d19efbcd06e90948f1374c303947ba63b81841b49a61ac5a54a2a"
        },
        "downloads": -1,
        "filename": "batchup-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f8d0f3e91d12032642da73aa8e5fea4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67824,
        "upload_time": "2018-08-08T19:09:08",
        "upload_time_iso_8601": "2018-08-08T19:09:08.516729Z",
        "url": "https://files.pythonhosted.org/packages/fd/d0/dbeab0fcb91e4b6c0a46c0a7fb046815654df9510884faaacdbef9c32cad/batchup-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a91ef6b10559899c34633c093ced1a3407ef6ce9b223150826d9d9987a9cad13",
          "md5": "6a9e00146b158b8a1e80063b9ad66919",
          "sha256": "1373758efc695652d72f7dea65683f309046beccaabb9ed8911ea0da976f1c5f"
        },
        "downloads": -1,
        "filename": "batchup-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a9e00146b158b8a1e80063b9ad66919",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57719,
        "upload_time": "2018-08-08T19:09:10",
        "upload_time_iso_8601": "2018-08-08T19:09:10.978329Z",
        "url": "https://files.pythonhosted.org/packages/a9/1e/f6b10559899c34633c093ced1a3407ef6ce9b223150826d9d9987a9cad13/batchup-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76331f64c1a66d4fcdaecfeef59888973de6071bd77159518973051eecf2ef87",
          "md5": "b325bcf372b642fb6f5fe60099a5c0d7",
          "sha256": "a14ddb760a92306958cbb57144741b142ebb5d02583be682c4ad63702ec39991"
        },
        "downloads": -1,
        "filename": "batchup-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b325bcf372b642fb6f5fe60099a5c0d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 73774,
        "upload_time": "2018-09-25T06:46:32",
        "upload_time_iso_8601": "2018-09-25T06:46:32.166720Z",
        "url": "https://files.pythonhosted.org/packages/76/33/1f64c1a66d4fcdaecfeef59888973de6071bd77159518973051eecf2ef87/batchup-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cef6deeb7848393a699388cb1b92df96b2f35a723f7893242ed7375f45aa05d4",
          "md5": "991437324e390601251ee109cfa65c70",
          "sha256": "eb8a4735c5320b9389e6b8d086cdb133280d647a6b30379bf29cbf93266e3007"
        },
        "downloads": -1,
        "filename": "batchup-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "991437324e390601251ee109cfa65c70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62960,
        "upload_time": "2018-09-25T06:46:33",
        "upload_time_iso_8601": "2018-09-25T06:46:33.678240Z",
        "url": "https://files.pythonhosted.org/packages/ce/f6/deeb7848393a699388cb1b92df96b2f35a723f7893242ed7375f45aa05d4/batchup-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd486041a68b292345d4f043aa2c278a1926706a637baac405bc14eb6bf117be",
          "md5": "66aed0bc3f2b5ba85a6503664f110185",
          "sha256": "aecd529266c592725793514d657a3d578c0e6badbfabc52a5fcd222bc2ef44fb"
        },
        "downloads": -1,
        "filename": "batchup-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "66aed0bc3f2b5ba85a6503664f110185",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59559,
        "upload_time": "2019-04-13T13:05:41",
        "upload_time_iso_8601": "2019-04-13T13:05:41.915212Z",
        "url": "https://files.pythonhosted.org/packages/dd/48/6041a68b292345d4f043aa2c278a1926706a637baac405bc14eb6bf117be/batchup-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecc1698b2eb8bbdb2137da0be85572db2a044c3e44d9f435e4565d04947cbd50",
          "md5": "034ea364223d8e170528c79e111e237d",
          "sha256": "0eec2e49bae52b9ffb2aa5a191605cbf6668d0daaece3d02569836abbfbce9c1"
        },
        "downloads": -1,
        "filename": "batchup-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "034ea364223d8e170528c79e111e237d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72485,
        "upload_time": "2019-07-05T13:24:15",
        "upload_time_iso_8601": "2019-07-05T13:24:15.182606Z",
        "url": "https://files.pythonhosted.org/packages/ec/c1/698b2eb8bbdb2137da0be85572db2a044c3e44d9f435e4565d04947cbd50/batchup-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "564aa2f72c7fb945a94ca53dd3e73c2b0caf0cf464b42daa054e6e1d4ca60208",
          "md5": "ea4d0e4c50039b92ea964f776fa03f9e",
          "sha256": "8c952ad2b18261d2b224468a1b42648102fcd8696256ae5eb338cfd97a90f317"
        },
        "downloads": -1,
        "filename": "batchup-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ea4d0e4c50039b92ea964f776fa03f9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60095,
        "upload_time": "2019-07-05T13:24:17",
        "upload_time_iso_8601": "2019-07-05T13:24:17.308988Z",
        "url": "https://files.pythonhosted.org/packages/56/4a/a2f72c7fb945a94ca53dd3e73c2b0caf0cf464b42daa054e6e1d4ca60208/batchup-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecc1698b2eb8bbdb2137da0be85572db2a044c3e44d9f435e4565d04947cbd50",
        "md5": "034ea364223d8e170528c79e111e237d",
        "sha256": "0eec2e49bae52b9ffb2aa5a191605cbf6668d0daaece3d02569836abbfbce9c1"
      },
      "downloads": -1,
      "filename": "batchup-0.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "034ea364223d8e170528c79e111e237d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 72485,
      "upload_time": "2019-07-05T13:24:15",
      "upload_time_iso_8601": "2019-07-05T13:24:15.182606Z",
      "url": "https://files.pythonhosted.org/packages/ec/c1/698b2eb8bbdb2137da0be85572db2a044c3e44d9f435e4565d04947cbd50/batchup-0.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "564aa2f72c7fb945a94ca53dd3e73c2b0caf0cf464b42daa054e6e1d4ca60208",
        "md5": "ea4d0e4c50039b92ea964f776fa03f9e",
        "sha256": "8c952ad2b18261d2b224468a1b42648102fcd8696256ae5eb338cfd97a90f317"
      },
      "downloads": -1,
      "filename": "batchup-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ea4d0e4c50039b92ea964f776fa03f9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 60095,
      "upload_time": "2019-07-05T13:24:17",
      "upload_time_iso_8601": "2019-07-05T13:24:17.308988Z",
      "url": "https://files.pythonhosted.org/packages/56/4a/a2f72c7fb945a94ca53dd3e73c2b0caf0cf464b42daa054e6e1d4ca60208/batchup-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}