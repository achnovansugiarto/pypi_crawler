{
  "info": {
    "author": "Collin Farquhar",
    "author_email": "Farquhar13@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# QNN-Gen: A Framework for Quantum Neural Networks \n## Beta Release\n\n### Install \nRequirements:\n- qiskit\n- numpy\n\nInstall from PyPI with pip:\n```\npip install QNN-Gen\n```\n\nInstall an editable version with github (good if you want to change the source code):\n```\ngit clone https://github.com/Farquhar13/QNN-Gen.git\ncd QNN-Gen\npip install -e . \n```\n\n### Design\nQNN-Gen is designed to serve as a useful abstraction for understanding and implementing Quantum Neural Networks (QNNs) or Parameterized Quatum Circuits. The structure of the code is classes is intended to mirror the theoretical structure of QNNs. The choices one has to make when constructing a QNN is reflected in QNN-Gen through the use of particular classes and their attributes. \n\nFurthermore, QNN-Gen is designed to balance both ease-of-use and configurability.\n\n### High-Level Abstraction\nWe use a high-level abstraction of QNNs to break them down into three main steps:\n- Encoding input data \n- Choice of model architecture or ansatz\n- Measurement and post-processing\n\nQNN-Gen matches this abstraction in code with the abstract base classes `Encode`, `Model`, and `Measurement`. Respectively, in the `encode.py`, `model.py`, and `measurement.py` files you can find these abstract base classes as well as several derived classes. To construct a QNN, you simply need to make your choices of modeling decisions and instantiate the corresponding derived classes.\n\n### Examples\nWe strive to make QNN-Gen as easy-to-use as possible. From the code snippet below you can see that it requires only 3 lines of code using QNN-Gen to create a simple QNN.\n```python\nimport qnn_gen as qg\nimport numpy as np\n\nx = np.array([1, 0, 0, 1])\n\nencoder = qg.BasisEncoding()\nmodel = qg.TreeTensorNetwork()\nfull_circuit = qg.combine(x, encoder, model)\n```\nWhich produces the circuit:\n\n![](/images/BasisEncode_TTN.png)\n\nNote that the angels for the `TreeTensorNetwork` model are initialized randomly if they are not provided as an argument. \n\nYou may wonder what happened to the measurement object. First we note that in many cases the choice of a particular model implies which measurements and outputs are sensible. In the case that no `Measurement` object is passed to `qg.combine`, in the background QNN-Gen looks to the `default_measurement` function of the `model`. For the above example, the following code is equivalent. \n```python\nimport qnn_gen as qg\nimport numpy as np\n\nx = np.array([1, 0, 0, 1])\n\nencoder = qg.BasisEncoding()\nmodel = qg.TreeTensorNetwork()\nmeasurement = qg.Expectation(qubits=2)\nfull_circuit = qg.combine(x, encoder, model, measurement)\n```\n\nTo run the QNN and get predicitions on a toy dataset you can use `qg.run`:\n```python\nX = np.array([[1, 0, 0, 0],\n              [0, 1, 0, 0],\n              [0, 0, 1, 0],\n              [0, 0, 0, 1],\n              [1, 0, 0, 0]])\n\npredictions = qg.run(X, encoder, model, measurement)\n```\nWhich will produce a numpy array with 5-elements corresponding to the predictions for the 5 input data points. For this initatiations of the model parameters:\n\n![](/images/BasisEncode_TTN_predictions.png)\n\nFor more examples, checkout the `examples/` folder. Inside, you will find python files and jupyter notebooks which demonstrate both the ease-of-use and configurability of QNN-Gen.\n\n### Contributing\nQNN-Gen is designed modularly with abstract base classes. We welcome users to create their own class for a different encoding, model/ansatz, or measurement transformation and share them to be potentially added in to QNN-Gen.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/farquhar13/QNN-Gen",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "QNN-Gen",
    "package_url": "https://pypi.org/project/QNN-Gen/",
    "platform": "",
    "project_url": "https://pypi.org/project/QNN-Gen/",
    "project_urls": {
      "Homepage": "https://github.com/farquhar13/QNN-Gen"
    },
    "release_url": "https://pypi.org/project/QNN-Gen/0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A framework for quantum neural networks.",
    "version": "0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8151271,
  "releases": {
    "0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94036ce49d7b35816abda090958d9dd6c9aeab558fa755ea3d98be33c8006233",
          "md5": "3176aaf571f82cf40fc0c2f5de4205c1",
          "sha256": "298cc7aa22cf54c912bbdf362cab0384ccf357dbc45d26bbc5bc13a8710a65b7"
        },
        "downloads": -1,
        "filename": "QNN-Gen-0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3176aaf571f82cf40fc0c2f5de4205c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14941,
        "upload_time": "2020-09-10T02:59:58",
        "upload_time_iso_8601": "2020-09-10T02:59:58.978852Z",
        "url": "https://files.pythonhosted.org/packages/94/03/6ce49d7b35816abda090958d9dd6c9aeab558fa755ea3d98be33c8006233/QNN-Gen-0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94036ce49d7b35816abda090958d9dd6c9aeab558fa755ea3d98be33c8006233",
        "md5": "3176aaf571f82cf40fc0c2f5de4205c1",
        "sha256": "298cc7aa22cf54c912bbdf362cab0384ccf357dbc45d26bbc5bc13a8710a65b7"
      },
      "downloads": -1,
      "filename": "QNN-Gen-0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3176aaf571f82cf40fc0c2f5de4205c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14941,
      "upload_time": "2020-09-10T02:59:58",
      "upload_time_iso_8601": "2020-09-10T02:59:58.978852Z",
      "url": "https://files.pythonhosted.org/packages/94/03/6ce49d7b35816abda090958d9dd6c9aeab558fa755ea3d98be33c8006233/QNN-Gen-0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}