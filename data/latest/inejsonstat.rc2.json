{
  "info": {
    "author": "Luis MarÃ­a Salete Cuartero",
    "author_email": "luismasc16@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "inejsonstat.py\r\n===========\r\n\r\n**IneJsonStat** is a library for reading the [JSON-stat](http://json-stat.org/) data format responses\r\nfrom the [Spanish National Institute of Stadistics (INE)](https://www.ine.es/)'s [JSON-stat API](https://www.ine.es/dyngs/DataLab/en/manual.html?cid=1259945948443).\r\n\r\nJSON-stat is a JSON format specialized in representing datasets mainly for statistic purposes.\r\nIt's used by many institutions around the world, such as:\r\n\r\n* [Statistics Norway](http://www.ssb.no/en)\r\n* [Eurostat](http://ec.europa.eu/eurostat/)\r\n* [United Nations Economic Commission for Europe](https://w3.unece.org/PXWeb/en)\r\n* [Bank of Portugal](https://bpstat.bportugal.pt/data/docs)\r\n* [Cantabrian Institute of Statistics](https://www.icane.es/)\r\n* Many others...\r\n\r\nThe main objective of the library its to ease the use interpretation and manipulation\r\nof retrieved data by the means of creating dynamically objects representing the\r\nhierarchically the different levels of information in a retrieved file.\r\n\r\nThis project is in early stages and has been developed for the [University of Extremadura](https://www.unex.es/).\r\nYou can contribute on its [github repository](https://github.com/Mlgpigeon/inejsonstat.git)\r\nor contact me directly in case of doubt or need via **luismasc16@gmail.com**.\r\n\r\n## Installation:\r\n```\r\n>>> pip install inejsonstat\r\n```\r\n\r\n## Usage of the INE JSON-stat API:\r\n\r\nThe INE provides their data in two languages:\r\n\r\n* 'ES' (spanish)\r\n* 'EN' (english)\r\n\r\nThe INE provides table identifiers  for any kind of request,\r\nwhich are used for the library as inputs\r\nand can be found here:\r\n\r\nhttps://www.ine.es/dyngs/INEbase/listaoperaciones.htm\r\n\r\nThe INE provides an optional parameter called nult which if not left blank,\r\nit will return only the n, being n an integer, the last terms of the\r\nrequested table\r\n\r\nOptional date:\r\nIf not left blank, it will give the terms of the requested table in:\r\n\r\n* date=YYYYMMDD (a given date)\r\n* date=YYYYMMDD&date=YYYYMMDD (a list of given dates)\r\n* date=YYYYMMDD:YYYYMMDD (a range of dates)\r\n\r\n## Use of the library:\r\n\r\nOnce the library has been imported, to initialize it the method **create()** must be called\r\non a variable. The stored object's type is **JsonStatRequest**, which manages requests to the API.\r\nThis method has optional input that its covered in greater detail in the next paragraph.\r\n\r\n##Example of use\r\n```\r\nimport inejsonstat\r\n\r\nine = inejsonstat.create()\r\n```\r\n\r\nTo make the request, on the **JsonStatRequest** object, the method **do_request** must be called.\r\nThis method accepts some optional input that does **not** need to defined if it has already been in\r\n**create()** which accepts the same input. The result oof the request should be stored in a variable\r\nand its type is **JsonStatDataSet** from the library [jsonstat.py](https://pypi.org/project/jsonstat.py/) .\r\n\r\nInput for request:\r\n\r\n* **target**, the id of the table as defined in the INE URL section of this document:\r\n    -As a string\r\n    -As an enumerator declare.d on the **JsonStatRequest** attribute **targets**\r\n\r\n* **language**, the language as defined in the INE URL section of this document:\r\n    -As a string\r\n    -As an enumerator declare.d on the **JsonStatRequest** attribute **languages**\r\n\r\n* **nult**, the nult as defined in the INE URL section of this document:\r\n    -As a string representing an integer\r\n    -As an integer\r\n\r\n* **date**, the nult as defined in the INE URL section of this document:\r\n    -'YYYYMMDD' as a string or a date object from the datetime library.\r\n    -'YYYYMMDD&YYYYMMDD&...' as a string or a set of date objects and another input attribute **datetype** = 'list'.\r\n    -'YYYYMMDD:YYYYMMDD' as a string or a set of 2 date objects and another input attribute **datetype** = 'range'.\r\n\r\n##Example of use\r\n```\r\nimport inejsonstat\r\n\r\ndate = datetime.date(year=2021, month=5, day=1)\r\ndate2 = datetime.date(year=2021, month=4, day=1)\r\n\r\n# Initialize the program\r\nine = inejsonstat.create()\r\n\r\n# Example with written date and language\r\njson_data = ine.do_request(target=ine.targets.N2065, language=ine.languages.EN, date=\"20210501&20210401\")\r\njson_data2 = ine.do_request(target=\"2065\", language=\"EN\", date=[date,date1],datetype=\"list\")\r\n```\r\n\r\nTo further take advantage of what this library offers, there must be initialized an instance of\r\nthe class **ProcJsonStatDataset**. This is done by calling the **JsonStatRequest** method\r\n**generate_dataset()**, which takes as parameter a **JsonStatDataSet** from the library jsonstat.py.\r\nOnce this is done, the data can be written in a CSV by calling the method **generate_dataset()**,\r\nthat takes as an input parameter a string denoting the name the file will have.\r\nThe data recovered can be also written to a [pandas]()'s dataframe with **get_dataframe()**.\r\nThe dataset attributes can be known by using\r\n\r\n##Example of use\r\n```\r\ndataset = ine.generate_dataset(json_data)\r\ndf = ine.get_dataframe()\r\nine.save_csv(\"examplecsv\")\r\ndataset.print_attributes()\r\n```\r\n\r\nThe generated dataset contains different attributed generated dinamically which correspond to the JSON-stat\r\nfields. The first method to access data is through attributes containing objects with the same hierarchy as\r\na JSON-stat file.\r\n\r\n##Example of use\r\n```\r\nprint(\"Dataset dimensions are: \", dataset.dimensions)\r\nprint(\"List of values is: \",dataset.value)\r\nprint(\"List of values is: \", dataset.status)\r\nprint(\"Dimensions role is: \",dataset.autonomouscommunitiesandprovinces.role)\r\nprint(\"Dimensions label is: \", dataset.autonomouscommunitiesandprovinces.label)\r\nprint(\"Python dictionary representing category's index is: \",\r\n       dataset.autonomouscommunitiesandprovinces.category.index)\r\nprint(\"Python dictionary representing category's label is: \",\r\n       dataset.autonomouscommunitiesandprovinces.category.label)\r\n```\r\n\r\nThe generated dataset also has enumerators representing dimensions, which can be consulted by **enumerator_hub.list()**\r\nthat by themselves contain enumerators representing labels regarding that dimension's category. The default value\r\nfor this enumerators is the label name, but dataframes of the dataset filtered by that specific value can be\r\nreturned by using **data_df()** if both status and value are wanted or just **values_df()** or **status_df()** if\r\njust one of that columns if wanted. To consult the columns that the dataframe should have **columns** can be used.\r\n\r\n##Example of use\r\n```\r\ndf = dataset.AUTONOMOUSCOMMUNITIESANDPROVINCES.BADAJOZ.values_df()\r\ndf1 = dataset.AUTONOMOUSCOMMUNITIESANDPROVINCES.BADAJOZ.status_df()\r\ndf2 = dataset.AUTONOMOUSCOMMUNITIESANDPROVINCES.BADAJOZ.data_df()\r\nprint(\"Columns of the dataframe are: \", dataset.AUTONOMOUSCOMMUNITIESANDPROVINCES.BADAJOZ.columns)\r\n```\r\n\r\nLast but not least, to make a query with specific values, the dimension name acts as an value, giving it the searched\r\nvalued via the literal label value or calling the enumerator. Columns can also be disabled in the output dataframe\r\nby giving the value \"no\".\r\n\r\n##Example of use\r\n```\r\ndf4 = ine.query(autonomouscommunitiesandprovinces=[dataset.AUTONOMOUSCOMMUNITIESANDPROVINCES.BADAJOZ,\r\n                                                     \"Granada\"], status=\"NO\")\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Mlgpigeon/inejsonstat.git",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "inejsonstat",
    "package_url": "https://pypi.org/project/inejsonstat/",
    "platform": null,
    "project_url": "https://pypi.org/project/inejsonstat/",
    "project_urls": {
      "Homepage": "https://github.com/Mlgpigeon/inejsonstat.git"
    },
    "release_url": "https://pypi.org/project/inejsonstat/1.0.19/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library to interact with the INE JSON-Stat API",
    "version": "1.0.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14416395,
  "releases": {
    "1.0.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09eacfd12cdba8e88a57c7f95473813fa9f06a9bdeb73a4a6781c342f48175e7",
          "md5": "85fbb9e309f0f5726c82ad5874475618",
          "sha256": "041d9bcd418a712acad0ef19a5433b0838add79cd250a5ffb2b588a6b8400c1e"
        },
        "downloads": -1,
        "filename": "inejsonstat-1.0.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85fbb9e309f0f5726c82ad5874475618",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 92297,
        "upload_time": "2022-07-12T22:49:21",
        "upload_time_iso_8601": "2022-07-12T22:49:21.347471Z",
        "url": "https://files.pythonhosted.org/packages/09/ea/cfd12cdba8e88a57c7f95473813fa9f06a9bdeb73a4a6781c342f48175e7/inejsonstat-1.0.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "743a6be4ccf2dedcb476cffcc35acb16f7b22b174530688c921d183571cb8a92",
          "md5": "c64e49d569f05551a21ffb1e30616505",
          "sha256": "8bb634a9dcab1ce2b9c9da52e4c71b0a7686141b8c870446e9b8fedc336d6a38"
        },
        "downloads": -1,
        "filename": "inejsonstat-1.0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "c64e49d569f05551a21ffb1e30616505",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54501,
        "upload_time": "2022-07-02T08:15:31",
        "upload_time_iso_8601": "2022-07-02T08:15:31.133513Z",
        "url": "https://files.pythonhosted.org/packages/74/3a/6be4ccf2dedcb476cffcc35acb16f7b22b174530688c921d183571cb8a92/inejsonstat-1.0.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "869624f8d9849162b28845ff2a0d535e495006502b1070efbd49db454b056716",
          "md5": "5ee819a0abd484c7c488ed24cd3c6ce2",
          "sha256": "77d76c7ce284bc54b50af6fe9f634e366e8d250d87630ea73b102629beaa2f54"
        },
        "downloads": -1,
        "filename": "inejsonstat-1.0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "5ee819a0abd484c7c488ed24cd3c6ce2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83948,
        "upload_time": "2022-07-12T22:50:37",
        "upload_time_iso_8601": "2022-07-12T22:50:37.680115Z",
        "url": "https://files.pythonhosted.org/packages/86/96/24f8d9849162b28845ff2a0d535e495006502b1070efbd49db454b056716/inejsonstat-1.0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "869624f8d9849162b28845ff2a0d535e495006502b1070efbd49db454b056716",
        "md5": "5ee819a0abd484c7c488ed24cd3c6ce2",
        "sha256": "77d76c7ce284bc54b50af6fe9f634e366e8d250d87630ea73b102629beaa2f54"
      },
      "downloads": -1,
      "filename": "inejsonstat-1.0.19.tar.gz",
      "has_sig": false,
      "md5_digest": "5ee819a0abd484c7c488ed24cd3c6ce2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 83948,
      "upload_time": "2022-07-12T22:50:37",
      "upload_time_iso_8601": "2022-07-12T22:50:37.680115Z",
      "url": "https://files.pythonhosted.org/packages/86/96/24f8d9849162b28845ff2a0d535e495006502b1070efbd49db454b056716/inejsonstat-1.0.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}