{
  "info": {
    "author": "D. Ciangottini, credits to Michael Milligan, Andrea Zonca, Mike Gilbert",
    "author_email": "dciangot@cern.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Remote Slurm Spawner for Jupyterhub\n\nThis is a custom spawner for [Jupyterhub](https://jupyterhub.readthedocs.io/) that is designed for installations on clusters using batch scheduling software.\n\nThis is a fork of [jupyterhub official batchspawner](https://github.com/jupyterhub/batchspawner) that began as a generalization of [mkgilbert's batchspawner](https://github.com/mkgilbert/slurmspawner) which in turn was inspired by [Andrea Zonca's blog post](http://zonca.github.io/2015/04/jupyterhub-hpc.html \"Run jupyterhub on a Supercomputer\") where he explains his implementation for a spawner that uses SSH and Torque. His github repo is found [here](http://www.github.com/zonca/remotespawner \"RemoteSpawner\").\n\nThis package formerly included WrapSpawner and ProfilesSpawner, which provide mechanisms for runtime configuration of spawners. These have been split out and moved to the [`wrapspawner`](https://github.com/jupyterhub/wrapspawner) package.\n\n## Installation\n\n1. from root directory of this repo (where setup.py is), run `pip install -e .`\n\n   If you don't actually need an editable version, you can simply run\n   `pip install -U remote_slurm_spawner`\n\n2. add lines in jupyterhub_config.py for the spawner you intend to use, e.g.\n\n   ```python\n      c = get_config()\n      c.JupyterHub.spawner_class = 'remote-slurm-spawner.RemoteSlurmSpawner'\n      import remote_slurm_spawner    # Even though not used, needed to register batchspawner interface\n   ```\n\n3.\n\n### Overview\n\nThis file contains an abstraction layer for batch job queueing systems (`BatchSpawnerBase`), and implements\nJupyterhub spawners for Torque, Moab, SLURM, SGE, HTCondor, LSF, and eventually others.\nCommon attributes of batch submission / resource manager environments will include notions of:\n\n- queue names, resource manager addresses\n- resource limits including runtime, number of processes, memory\n- singleuser child process running on (usually remote) host not known until runtime\n- job submission and monitoring via resource manager utilities\n- remote execution via submission of templated scripts\n- job names instead of PIDs\n\n`BatchSpawnerBase` provides several general mechanisms:\n\n- configurable traits `req_foo` that are exposed as `{foo}` in job template scripts. Templates (submit scripts in particular) may also use the full power of [jinja2](http://jinja.pocoo.org/). Templates are automatically detected if a `{{` or `{%` is present, otherwise str.format() used.\n- configurable command templates for submitting/querying/cancelling jobs\n- a generic concept of job-ID and ID-based job state tracking\n- overrideable hooks for subclasses to plug in logic at numerous points\n\n### Example\n\nEvery effort has been made to accommodate highly diverse systems through configuration\nonly. This example consists of the (lightly edited) configuration used by the author\nto run Jupyter notebooks on an academic supercomputer cluster.\n\n```python\n# Select the Torque backend and increase the timeout since batch jobs may take time to start\nimport batchspawner\nc.JupyterHub.spawner_class = 'batchspawner.TorqueSpawner'\nc.Spawner.http_timeout = 120\n\n#------------------------------------------------------------------------------\n# BatchSpawnerBase configuration\n#    These are simply setting parameters used in the job script template below\n#------------------------------------------------------------------------------\nc.BatchSpawnerBase.req_nprocs = '2'\nc.BatchSpawnerBase.req_queue = 'mesabi'\nc.BatchSpawnerBase.req_host = 'mesabi.xyz.edu'\nc.BatchSpawnerBase.req_runtime = '12:00:00'\nc.BatchSpawnerBase.req_memory = '4gb'\n#------------------------------------------------------------------------------\n# TorqueSpawner configuration\n#    The script below is nearly identical to the default template, but we needed\n#    to add a line for our local environment. For most sites the default templates\n#    should be a good starting point.\n#------------------------------------------------------------------------------\nc.TorqueSpawner.batch_script = '''#!/bin/sh\n#PBS -q {queue}@{host}\n#PBS -l walltime={runtime}\n#PBS -l nodes=1:ppn={nprocs}\n#PBS -l mem={memory}\n#PBS -N jupyterhub-singleuser\n#PBS -v {keepvars}\nmodule load python3\n{cmd}\n'''\n# For our site we need to munge the execution hostname returned by qstat\nc.TorqueSpawner.state_exechost_exp = r'int-\\1.mesabi.xyz.edu'\n```\n\n### Security\n\nUnless otherwise stated for a specific spawner, assume that spawners\n_do_ evaluate shell environment for users and thus the [security\nrequirements of JupyterHub security for untrusted\nusers](https://jupyterhub.readthedocs.io/en/stable/reference/websecurity.html)\nare not fulfilled because some (most?) spawners _do_ start a user\nshell which will execute arbitrary user environment configuration\n(`.profile`, `.bashrc` and the like) unless users do not have\naccess to their own cluster user account. This is something which we\nare working on.\n\n## Provide different configurations of BatchSpawner\n\n### Overview\n\n`ProfilesSpawner`, available as part of the [`wrapspawner`](https://github.com/jupyterhub/wrapspawner)\npackage, allows the Jupyterhub administrator to define a set of different spawning configurations,\nboth different spawners and different configurations of the same spawner.\nThe user is then presented a dropdown menu for choosing the most suitable configuration for their needs.\n\nThis method provides an easy and safe way to provide different configurations of `BatchSpawner` to the\nusers, see an example below.\n\n### Example\n\nThe following is based on the author's configuration (at the same site as the example above)\nshowing how to give users access to multiple job configurations on the batch scheduled\nclusters, as well as an option to run a local notebook directly on the jupyterhub server.\n\n```python\n# Same initial setup as the previous example\nimport batchspawner\nc.JupyterHub.spawner_class = 'wrapspawner.ProfilesSpawner'\nc.Spawner.http_timeout = 120\n#------------------------------------------------------------------------------\n# BatchSpawnerBase configuration\n#   Providing default values that we may omit in the profiles\n#------------------------------------------------------------------------------\nc.BatchSpawnerBase.req_host = 'mesabi.xyz.edu'\nc.BatchSpawnerBase.req_runtime = '12:00:00'\nc.TorqueSpawner.state_exechost_exp = r'in-\\1.mesabi.xyz.edu'\n#------------------------------------------------------------------------------\n# ProfilesSpawner configuration\n#------------------------------------------------------------------------------\n# List of profiles to offer for selection. Signature is:\n#   List(Tuple( Unicode, Unicode, Type(Spawner), Dict ))\n# corresponding to profile display name, unique key, Spawner class,\n# dictionary of spawner config options.\n#\n# The first three values will be exposed in the input_template as {display},\n# {key}, and {type}\n#\nc.ProfilesSpawner.profiles = [\n   ( \"Local server\", 'local', 'jupyterhub.spawner.LocalProcessSpawner', {'ip':'0.0.0.0'} ),\n   ('Mesabi - 2 cores, 4 GB, 8 hours', 'mesabi2c4g12h', 'batchspawner.TorqueSpawner',\n      dict(req_nprocs='2', req_queue='mesabi', req_runtime='8:00:00', req_memory='4gb')),\n   ('Mesabi - 12 cores, 128 GB, 4 hours', 'mesabi128gb', 'batchspawner.TorqueSpawner',\n      dict(req_nprocs='12', req_queue='ram256g', req_runtime='4:00:00', req_memory='125gb')),\n   ('Mesabi - 2 cores, 4 GB, 24 hours', 'mesabi2c4gb24h', 'batchspawner.TorqueSpawner',\n      dict(req_nprocs='2', req_queue='mesabi', req_runtime='24:00:00', req_memory='4gb')),\n   ('Interactive Cluster - 2 cores, 4 GB, 8 hours', 'lab', 'batchspawner.TorqueSpawner',\n      dict(req_nprocs='2', req_host='labhost.xyz.edu', req_queue='lab',\n          req_runtime='8:00:00', req_memory='4gb', state_exechost_exp='')),\n   ]\nc.ProfilesSpawner.ip = '0.0.0.0'\n```\n\n## Debugging batchspawner\n\nSometimes it can be hard to debug batchspawner, but it's not really\nonce you know how the pieces interact. Check the following places for\nerror messages:\n\n- Check the JupyterHub logs for errors.\n\n- Check the JupyterHub logs for the batch script that got submitted\n  and the command used to submit it. Are these correct? (Note that\n  there are submission environment variables too, which aren't\n  displayed.)\n\n- At this point, it's a matter of checking the batch system. Is the\n  job ever scheduled? Does it run? Does it succeed? Check the batch\n  system status and output of the job. The most comon failure\n  patterns are a) job never starting due to bad scheduler options, b)\n  job waiting in the queue beyond the `start_timeout`, causing\n  JupyterHub to kill the job.\n\n- At this point the job starts. Does it fail immediately, or before\n  Jupyter starts? Check the scheduler output files (stdout/stderr of\n  the job), wherever it is stored. To debug the job script, you can\n  add debugging into the batch script, such as an `env` or `set -x`.\n\n- At this point Jupyter itself starts - check its error messages. Is\n  it starting with the right options? Can it communicate with the\n  hub? At this point there usually isn't anything\n  batchspawner-specific, with the one exception below. The error log\n  would be in the batch script output (same file as above). There may\n  also be clues in the JupyterHub logfile.\n\nCommon problems:\n\n- Did you `import batchspawner` in the `jupyterhub_config.py` file?\n  This is needed in order to activate the batchspawer API in\n  JupyterHub.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://jupyter.org",
    "keywords": "Interactive,Interpreter,Shell,Web,Jupyter",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "remote-slurm-spawner",
    "package_url": "https://pypi.org/project/remote-slurm-spawner/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/remote-slurm-spawner/",
    "project_urls": {
      "Homepage": "http://jupyter.org"
    },
    "release_url": "https://pypi.org/project/remote-slurm-spawner/0.1.2.dev0/",
    "requires_dist": [
      "async-generator (>=1.8)",
      "jinja2",
      "jupyterhub (>=0.5)",
      "paramiko",
      "pycurl",
      "pytest"
    ],
    "requires_python": "~=3.3",
    "summary": "Remote-slurm-spawner: A spawner for Jupyterhub to spawn notebooks using slurm on remote machine.",
    "version": "0.1.2.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11375489,
  "releases": {
    "0.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b58bfe0586d399fc4f38e54ac5459461f047168a4e37c0a5c407f21ea5f1f803",
          "md5": "1e367054a02de47ae807e100d3faa7e9",
          "sha256": "c0e58f9f2cf87d42f434db3be27645bb8efd91faf624f5a398ff04a5d081839a"
        },
        "downloads": -1,
        "filename": "remote_slurm_spawner-0.0.1.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e367054a02de47ae807e100d3faa7e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.3",
        "size": 20379,
        "upload_time": "2021-07-09T13:18:41",
        "upload_time_iso_8601": "2021-07-09T13:18:41.354092Z",
        "url": "https://files.pythonhosted.org/packages/b5/8b/fe0586d399fc4f38e54ac5459461f047168a4e37c0a5c407f21ea5f1f803/remote_slurm_spawner-0.0.1.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c14db653f2d34f01fb89bd7df439c74aabe47c4471e19317e91d760842da004",
          "md5": "5b4527f876f81e676552ab67f2588279",
          "sha256": "e17952630bf2b91197fa2dde46999c1f5775d74a8579da64c3e87022662b1535"
        },
        "downloads": -1,
        "filename": "remote-slurm-spawner-0.0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "5b4527f876f81e676552ab67f2588279",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.3",
        "size": 23777,
        "upload_time": "2021-07-09T13:18:42",
        "upload_time_iso_8601": "2021-07-09T13:18:42.694811Z",
        "url": "https://files.pythonhosted.org/packages/2c/14/db653f2d34f01fb89bd7df439c74aabe47c4471e19317e91d760842da004/remote-slurm-spawner-0.0.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43d4acc35c7600eb8a641d28366e01ba100c3fdf0a993d55e41ca191e3672f0c",
          "md5": "a4392d8168fc509a1e9edfaa76416985",
          "sha256": "5454e83be9b5c24fe0ef83ea24e979b396585b92550a1e462d7e6f7d747d910a"
        },
        "downloads": -1,
        "filename": "remote_slurm_spawner-0.1.2.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4392d8168fc509a1e9edfaa76416985",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.3",
        "size": 15974,
        "upload_time": "2021-09-06T10:09:58",
        "upload_time_iso_8601": "2021-09-06T10:09:58.306796Z",
        "url": "https://files.pythonhosted.org/packages/43/d4/acc35c7600eb8a641d28366e01ba100c3fdf0a993d55e41ca191e3672f0c/remote_slurm_spawner-0.1.2.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aa571466b5d10911e7890310d4891818548b873d42e744b6df0ad84abde4a27",
          "md5": "5fd8e9a2a102e759081519148dbdfe7b",
          "sha256": "146ab83688d171da0c5786bb61dc893870f43dd169d3b2d2e7002d7a5b91476b"
        },
        "downloads": -1,
        "filename": "remote-slurm-spawner-0.1.2.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "5fd8e9a2a102e759081519148dbdfe7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.3",
        "size": 21440,
        "upload_time": "2021-09-06T10:09:59",
        "upload_time_iso_8601": "2021-09-06T10:09:59.205434Z",
        "url": "https://files.pythonhosted.org/packages/5a/a5/71466b5d10911e7890310d4891818548b873d42e744b6df0ad84abde4a27/remote-slurm-spawner-0.1.2.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43d4acc35c7600eb8a641d28366e01ba100c3fdf0a993d55e41ca191e3672f0c",
        "md5": "a4392d8168fc509a1e9edfaa76416985",
        "sha256": "5454e83be9b5c24fe0ef83ea24e979b396585b92550a1e462d7e6f7d747d910a"
      },
      "downloads": -1,
      "filename": "remote_slurm_spawner-0.1.2.dev0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a4392d8168fc509a1e9edfaa76416985",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.3",
      "size": 15974,
      "upload_time": "2021-09-06T10:09:58",
      "upload_time_iso_8601": "2021-09-06T10:09:58.306796Z",
      "url": "https://files.pythonhosted.org/packages/43/d4/acc35c7600eb8a641d28366e01ba100c3fdf0a993d55e41ca191e3672f0c/remote_slurm_spawner-0.1.2.dev0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5aa571466b5d10911e7890310d4891818548b873d42e744b6df0ad84abde4a27",
        "md5": "5fd8e9a2a102e759081519148dbdfe7b",
        "sha256": "146ab83688d171da0c5786bb61dc893870f43dd169d3b2d2e7002d7a5b91476b"
      },
      "downloads": -1,
      "filename": "remote-slurm-spawner-0.1.2.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "5fd8e9a2a102e759081519148dbdfe7b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.3",
      "size": 21440,
      "upload_time": "2021-09-06T10:09:59",
      "upload_time_iso_8601": "2021-09-06T10:09:59.205434Z",
      "url": "https://files.pythonhosted.org/packages/5a/a5/71466b5d10911e7890310d4891818548b873d42e744b6df0ad84abde4a27/remote-slurm-spawner-0.1.2.dev0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}