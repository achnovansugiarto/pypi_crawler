{
  "info": {
    "author": "Andrew Walker",
    "author_email": "walker.ab@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Code Generators"
    ],
    "description": "=====\nClast\n=====\n\nClast is a Python wrapper of the unstable interface of the Clang AST Matchers\nlibrary. \n\nExisting tools in this space make good use of libclang to build rapid\nprototypes for exploring the Clang AST, however, several important tools\n(for example code rewriting) are not available from libclang. \n\n|license| |build| \n\nUsage\n=====\n\nDynTypedMatcher\n---------------\n\nExample of creating a dynamically typed AST node matcher using the dynamic\nparser and dumping the node.\n\n.. code:: python\n\n\timport sys\n\tfrom clast import *\n\n\tclass MyMatchCallback(MatchCallback):\n\t    def __init__(self, *args, **kwargs):\n\t\tsuper(MyMatchCallback, self).__init__()\n\n\t    def run(self, result):\n\t\tcls = result.GetNode('cls').get(CXXRecordDecl)\n\t\tcls.dump()\n\n\tif __name__ == \"__main__\":\n\t    callback = MyMatchCallback()\n\t    m = parseMatcherExpression('cxxRecordDecl().bind(\"cls\")')\n\t    finder = MatchFinder()\n\t    finder.addDynamicMatcher(m, callback)\n\t    matchString('class X;', finder, '-std=c++11', 'input.cpp')\n\nInstallation\n============\n\nTo install Clast, you'll need to:\n\n1. Install a c++11 compliant compiler\n2. Install a compatible version of Clang and LLVM \n3. Set some environment variables\n4. Install the pybind11 package\n5. Install Clast\n\nUbuntu 14.04 (Trusty)\n---------------------\n\nTo compile under Ubuntu 14.04 (Trusty), you'll need to get an updated version of LLVM:\n\n.. code:: console\n\n    wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -\n    echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.8 main\" | sudo tee -a /etc/apt/sources.list\n    sudo apt-get update -qq\n    sudo apt-get install -y clang-3.8 libclang-common-3.8-dev libclang-3.8-dev llvm-3.8-dev liblldb-3.8-dev python-clang-3.8\n\nThen, set your environment variables:\n\n.. code:: console\n\n    export LLVM_HOME=/usr/lib/llvm-3.8\n    export LD_LIBRARY_PATH=$LLVM_HOME/lib\n\nFinally, install pybind11 and Clast. It is strongly recommended that clast be\ninstalled with the verbose flag on to show compilation progress\n\n.. code:: console\n\n    pip install pybind11\n    pip install -v clast\n\nUpdating the Bindings\n---------------------\n\nGiven the breadth of the Clang AST matchers API, it isn't feasible to attempt\nto maintain hand rolled bindings, instead Clast bootstraps itself using the\nlibclang library, and generates the pybind11 wrappers as required.\n\nIn cases where the bindings are stale, or do not compile correctly, you can try\nto rebuild the them using the included clastgen.py script.  \n\nIt is hoped that future revisions of Clast will rapidly become self-hosting\n(one version of Clast will be able to build successive versions).\n\n\nLimitations\n===========\n\n- Clast does not support all versions of Clang - focus is on the stable and development\n  branches of the Clang compiler (currently 3.8 and 3.9).\n- Clast relies on the C++ reference counting scheme to collect memory in\n  preference to using the Python reference counting.  This is in part a\n  technical limitation of the Clang AST Nodes having private destructors, but is also in\n  part by design because Clast scripts are intended to facilitate prototyping, not act\n  as a replacement for the AST Matchers API. \n- Clast installs are quite slow and memory intensive, ensure that you have at least 2Gb or RAM\n  free, compile times are on the order of 30 seconds.\n- Clast has not been tested on Windows - it's likely that small changes would allow it to function\n  on that platform.\n- Clast will not compile if you do not have the development headers for Clang and LLVM installed.\n- Out of the box, Clast will fail to link if LLVM has not been configured to\n  generate a shared library.  Future work may include overcoming this issue.\n- Clast is known to not work correctly if Clang and LLVM have been compiled\n  with the -fno-rtti option.  This means that (at least some) of the Ubuntu\n  binaries from `llvm.org`_ cannot be used with Clast.\n- Clast disables pybinds C++14 support - future work will involve improving tests to use platforms \n  that ship with C++14 compilers and standard libraries by default.  This will help reduce the \n  size of binaries produced.\n- Compiling Clang bindings is on the order of 10 times slower with\n  optimisations enabled.  By default Clast builds bindings with optimisations\n  disabled - this is considered an acceptable, given that the primary goal of\n  the project is to facilitate rapid prototying. Furthermore, Clast code should\n  be easy to translate to equivalent C++ constructs if performance does become\n  and issue.\n- Some issues have been observed with older Python releases, it is strongly\n  recommended that you use an up-to-date version of Python (2.7.11)\n\nAcknowledgements\n================\n\nThis project builds on the excellent work of the LLVM team and the University of\nIllinois at Urbana-Champaign, but is in no way affiliated with either.\n\nSome parts of clasts setup.py were derived from the BSD licensed pybind\n`python_example`_, Copyright (c) 2016 the Pybind Development Team, All rights\nreserved. \n\nThe need for a tool to make the Clang AST matchers library available from\nPython was inspired by Christian Schafmeister's work on `clasp`_\n\n.. _pybind11: https://github.com/pybind/pybind11\n.. _llvm.org: https://llvm.org\n.. _clasp: https://github.com/drmeister/clasp\n.. _python_example: https://github.com/pybind/python_example\n\n.. |license| image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://raw.githubusercontent.com/andrewwalker/glud/master/LICENSE\n   :alt: MIT License\n\n.. |build| image:: https://travis-ci.org/AndrewWalker/clast.svg?branch=master\n   :target: https://travis-ci.org/AndrewWalker/clast\n   :alt: Continuous Integration",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/AndrewWalker/clast",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "clast",
    "package_url": "https://pypi.org/project/clast/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/clast/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/AndrewWalker/clast"
    },
    "release_url": "https://pypi.org/project/clast/0.0.1rc0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python bindings for the unstable interface of the Clang AST Matchers library",
    "version": "0.0.1rc0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2216228,
  "releases": {
    "0.0.1rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4966331d79dc6882565a55e3d48eda93e6ae0c5fd64c62d17ba21b114b4161e9",
          "md5": "3322eb1faa6ce7b939978e927fbfd185",
          "sha256": "f0267456ea443adc23711191ff85c68a7f316cdf58863ec53d22e7b1ceb501ca"
        },
        "downloads": -1,
        "filename": "clast-0.0.1rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "3322eb1faa6ce7b939978e927fbfd185",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 315029,
        "upload_time": "2016-07-12T09:22:57",
        "upload_time_iso_8601": "2016-07-12T09:22:57.789444Z",
        "url": "https://files.pythonhosted.org/packages/49/66/331d79dc6882565a55e3d48eda93e6ae0c5fd64c62d17ba21b114b4161e9/clast-0.0.1rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4966331d79dc6882565a55e3d48eda93e6ae0c5fd64c62d17ba21b114b4161e9",
        "md5": "3322eb1faa6ce7b939978e927fbfd185",
        "sha256": "f0267456ea443adc23711191ff85c68a7f316cdf58863ec53d22e7b1ceb501ca"
      },
      "downloads": -1,
      "filename": "clast-0.0.1rc0.tar.gz",
      "has_sig": false,
      "md5_digest": "3322eb1faa6ce7b939978e927fbfd185",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 315029,
      "upload_time": "2016-07-12T09:22:57",
      "upload_time_iso_8601": "2016-07-12T09:22:57.789444Z",
      "url": "https://files.pythonhosted.org/packages/49/66/331d79dc6882565a55e3d48eda93e6ae0c5fd64c62d17ba21b114b4161e9/clast-0.0.1rc0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}