{
  "info": {
    "author": "SOURCEdefender",
    "author_email": "hello@sourcedefender.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Other Audience",
      "Intended Audience :: Science/Research",
      "Intended Audience :: System Administrators",
      "License :: Other/Proprietary License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Security",
      "Topic :: Security :: Cryptography",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Software Distribution",
      "Topic :: Utilities"
    ],
    "description": "![SOURCEdefender - advanced encryption protecting your Python codebase](https://images.sourcedefender.co.uk/logo.png \"SOURCEdefender - advanced encryption protecting your python codebase\")\n- - -\n[![snyk](https://snyk-widget.herokuapp.com/badge/pip/sourcedefender/badge.svg)][snyk-advisor-url]\n[![python](https://shields.io/pypi/pyversions/sourcedefender)][python-url]\n[![downloads](https://pepy.tech/badge/sourcedefender)][pepy-url]\n[![downloads](https://pepy.tech/badge/sourcedefender/week)][pepy-url]\n\nSOURCEdefender is the easiest way to obfuscate Python code using AES-256 encryption. AES is a symmetric algorithm which uses the same key for both encryption and decryption (the security of an AES system increases exponentially with key length). There is no impact on the performance of your running application as the decryption process takes place during the import of your module so encrypted code won't run any slower once loaded from a _.pye_ file compared to loading from a _.py_ or _.pyc_ file.\n\n# Features\n\n- No end user device license required\n- Symmetric AES 256-bit encryption\n- Set your own password & salt for encryption\n- Enforced an expiration time on encrypted code\n- Bundle encrypted files or folders into a single executable binary using PyInstaller\n\n## Supported Environments\n\nWe support the following Operating System & Architecture combinations and hook directly into the import process so there are no cross platform compatibility issues. Encrypted code will run on ___ANY___ other target using the same version of Python. For example, files encrypted in Windows using Python 3.10 will run with Python 3.10 on Linux.\n\n| Architecture   | Operating System | Python 3.6 | Python 3.7 | Python 3.8 | Python 3.9 | Python 3.10 | Python 3.11 |\n| -------------- | ---------------- | ---------- | ---------- | ---------- | ---------- | ----------- | ----------- |\n| x86            | Windows          | Y          | Y          | Y          | Y          | Y           | Y           |\n| amd64          | Windows          | Y          | Y          | Y          | Y          | Y           | Y           |\n| x86_64         | Linux            | Y          | Y          | Y          | Y          | Y           | Y           |\n| x86_64         | macOS            | Y          | Y          | Y          | Y          | Y           | Y           |\n| Arm64          | macOS            | N          | N          | N          | Y          | Y           | Y           |\n| ARMv6 (32-bit) | Linux            | Y          | Y          | Y          | Y          | Y           | Y           |\n| ARMv7 (32-bit) | Linux            | Y          | Y          | Y          | Y          | Y           | Y           |\n| ARMv8          | Linux            | Y          | Y          | Y          | Y          | Y           | Y           |\n| AArch64        | Linux            | Y          | Y          | Y          | Y          | Y           | Y           |\n\n###### If you do not see your required combination here, please [contact][sourcedefender-hello-email] us so we can help find you a solution\n\n# Trial License\n\nThe installation of SOURCEdefender will grant you a trial license to encrypt files. This trial license will only allow your script to work for a maximum of 24hrs, after that it won't be usable. This is so you can test our solution is suitable to your needs. If you get stuck then please [contact][sourcedefender-hello-email] us so we can help.\n\n# Subscribe\n\nTo distribute encrypt code without limitation, you will need to create an [account][sourcedefender-dashboard] and setup your payment method. Once you have setup the account, you will be able to retrieve your activation token and use it to authorise your installation:\n\n    $ sourcedefender activate --token 470a7f2e76ac11eb94390242ac130002\n      SOURCEdefender v10.0.13\n\n      Registration:\n\n       - Account Status  : Active\n       - Email Address   : hello@sourcedefender.co.uk\n       - Account ID      : bfa41ccd-9738-33c0-83e9-cfa649c05288\n       - System ID       : 42343554645384\n       - Valid Until     : Sun, May 9, 2021 10:59 PM\n\nWithout activating your SDK any encrypted code you create will only be usable for a maximum of __24hrs__. Access to our dashboard is required (via HTTPS) from your system so we can validate your account status.\n\nIf you want to view your activated license status you can use the __validate__ option:\n\n    $ sourcedefender validate\n      SOURCEdefender v10.0.13\n\n      Registration:\n\n       - Account Status  : Active\n       - Email Address   : hello@sourcedefender.co.uk\n       - Account ID      : bfa41ccd-9738-33c0-83e9-cfa649c05288\n       - System ID       : 42343554645384\n       - Valid Until     : Sun, May 9, 2021 10:59 PM\n    $\n\nIf your license is valid, then this command will give the Exit Code (EC) of #0 (zero), otherwise an invalid licence will be indicated by the #EC of 1 (one). You should run this command after any automated build tasks to ensure you haven't created code with an unexpected 24hr limitation.\n\n## Price Plans\n\nDue to the way PyPi requires you to upload a new release to change your documentation we have moved our price plan information over to the [Dashboard][sourcedefender-dashboard] site. If you do not see a price you like, then please [email][sourcedefender-hello-email] us so we can discuss your situation and requirements.\n\n# Our Sponsors\n\nWe are immensely grateful to the following organisation(s):\n\n- [FLUX::_Immersive_][flux-audio]\n- [Corsight AI][corsight]\n\n> ###### _If you would like to help sponsor future development of this package then please send us an [email][sourcedefender-hello-email]._\n\n# Usage\n\nWe have worked hard to ensure that the encryption/decryption process is a simple as possible. Here are a few examples of how it works, and how to use the features provided.  If you need advice on the process encrypt or import your code, please [contact][sourcedefender-hello-email] us for assistance.\n\n### How do I protect my Python source code?\n\nFirst, let's have a look at an example of the encryption process:\n\n    $ cat /home/ubuntu/helloworld.py\n    print(\"Hello World!\")\n    $\n\nThis is a very basic example, but we do not want anyone to get at our source code. We also don't want anyone to run this code after 1 hour so when we encrypt the file we can enforce an expire time of 1 hour from now with the __--ttl__ option and we can delete the plaintext .py file after encryption by adding the __--remove__ option.\n\nThe command would look like this:\n\n    $ sourcedefender encrypt --remove --ttl=1h /home/ubuntu/helloworld.py\n    SOURCEdefender v10.0.13\n\n    Processing:\n\n    /home/ubuntu/helloworld.py\n\n    $\n\nThe '--remove' option deletes the original .py file. Make sure you use this so you don't accidentially distribute the plain-text code. Now the file is encrypted, its contents are as follows:\n\n    $ cat /home/ubuntu/helloworld.pye\n    -----BEGIN SOURCEDEFENDER FILE-----\n    GhP6+FOEA;qsm6NrRnXHnlU5E!(pT(E<#t=\n    GhN0L!7UrbN\"Am#(8iPPAG;nm-_4d!F9\"*7\n    T1q4VZdj>uLBghNY)[;Ber^L=*a-I[MA.-4\n    ------END SOURCEDEFENDER FILE------\n    $\n\nOnce a file has been encrypted, its new extension is __.pye__ so our loader can identify encrypted files. All you need to remember is to inlcude __sourcedefender__ as a Python dependency while packaging your project and import the sourcedefender module before you attempt to import and use your encrypted code.\n\n### Importing packages & modules\n\nThe usual import system can still be used and you can import encrypted code from within encrypted code so you don't need to do anything special with your import statements.\n\n    $ cd /home/ubuntu\n    $ ls\n    helloworld.pye\n    $ python3\n    >>>\n    >>> import sourcedefender\n    >>> import helloworld\n    Hello World!\n    >>> exit()\n    $\n\n### Using your own password or salt for encryption\n\nIt's easy to use your own encryption password and salt. If you do not set these, we generate unique ones for each file you encrypt. Should you wish to set your own, these can be set from either\na command option:\n\n    sourcedefender encrypt --password 1234abcd --salt dcba4321 mycode.py\n\nor as an Environment variable:\n\n    export SOURCEDEFENDER_PASSWORD=\"1234abcd\"\n    export SOURCEDEFENDER_SALT=\"dcba4321\"\n    sourcedefender encrypt mycode.py\n\nAnd to import the code you can either set an environment vairaible (as with the encryption process). You can also set these in your code before the import:\n\n    $ python3\n    >>> import sourcedefender\n    >>> from os import environ\n    >>> environ[\"SOURCEDEFENDER_PASSWORD\"] = \"1234abcd\"\n    >>> environ[\"SOURCEDEFENDER_SALT\"] = \"dcba4321\"\n    >>> import mycode\n\nThe password and salt set is specific to the next import, so if you want different ones for different files, then feel free to encrypt with different values and remember to set 'sourcedefender.password/salt=something' before your import.\n\n### Can I still run Python from the command-line?\n\nYes, you can still run scripts from the command-line, but there are some differences due to the way Python loads command line scripts. For example, you need to ask Python to load the sourcedefender package and then tell it what to import:\n\n    $ python3 -m sourcedefender /home/ubuntu/helloworld.pye\n    Hello World!\n    $\n\nHowever, due to the way Python works - and the fact that we need to run the 'sourcedefender' module first - you won't be able to compare \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\" in the code to see if it is being imported or executed as a script. This means that the usual starting code block will not get executed.\n\n### Dynamic Downloads\n\nWe have just added a new feature where you can download .pye files at runtime. As an example, we have encrypted the following script and made it publically available:\n\n    $ cat hello.py\n    def message():\n        print(\"hi!\")\n    $\n\nTo download the file from the Internet you can use the following code example:\n\n    $ cat download.py\n    from sourcedefender.tools import getUrl\n    getUrl(\"https://downloads.sourcedefender.co.uk/hello.pye\")\n    from hello import message\n    message()\n    $\n\n> We are only able to download a single Python module at a time. Python packages or zip files are not supported.\n\nWhen executed this will do the following:\n\n    $ python3 download.py\n    hi!\n    $\n\nWe know this is a simple example and security can be increased by using your own salt/password.\n\n### Integrating encrypted code with PyInstaller\n\nPyInstaller scans your plain-text code for import statements so it knows what packages to freeze. This scanning is not possible inside encrypted code so we have created a 'pack' command to help. By default we always enable '--onefile', but any additional 'hidden' libs you may need to include using the '--hidden-import' or '--add-binary' options.\n\nWe are unable to guess what parts of your code you want encrypting. If you encrypt all your code, sometimes that stops Python from working. So, with that in mind, please ensure you encrypt your code before using the pack command.\n\nFor this example, we have the following project structure:\n\n    pyexe.py\n    lib\n    └── helloworld.pye\n\nIn our pyexe script we have the following code:\n\n    $ cat pyexe.py\n    import helloworld\n\nTo ensure that PyInstaller includes our encrypted files, we need to tell it where they are with the --add-binary option. So, for the above project, we could use this command:\n\n    sourcedefender encrypt pyexe.py --remove\n    sourcedefender pack pyexe.pye -- --add-binary $(pwd)/lib:.\n\nThere is a strange quirk with PyInstaller that we haven't yet found a work-around for. When you include extra args after '--' you need to provide full paths of the source folders otherwise you will get a tmp folder not found error such as this:\n\n    Unable to find \"/tmp/tmpp9pt6l97/lib\" when adding binary and data files.\n\n### Integrating encrypted code with Django\n\nYou can encrypt your Django project just the same as you can any other Python code. Don't forget to include \"import sourcedefender\" to your wsgi/asgi(.py) file so that it gets loaded first and can intercept any import requests to find your encrypted code. You should not encrypt the wsgi/asgi files.\n\n# Legal\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. REVERSE ENGINEERING IS STRICTLY PROHIBITED.\n\n##### __Copyright © 2018-2021 SOURCEdefender. All rights reserved.__\n\n<!-- URLs -->\n[python-url]: https://www.python.org\n[pepy-url]: https://pepy.tech/project/sourcedefender\n[pypi-url]: https://pypi.org/project/sourcedefender\n[snyk-advisor-url]: https://snyk.io/advisor/python/sourcedefender#security\n[sourcedefender-hello-email]: mailto:hello@sourcedefender.co.uk\n[sourcedefender-dashboard]: https://dashboard.sourcedefender.co.uk/signup?src=pypi-readme\n[flux-audio]: https://www.flux.audio/\n[corsight]: https://www.corsight.ai/\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://sourcedefender.co.uk/?src=pypi-url",
    "keywords": "encryption source aes",
    "license": "Other/Proprietary License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sourcedefender",
    "package_url": "https://pypi.org/project/sourcedefender/",
    "platform": null,
    "project_url": "https://pypi.org/project/sourcedefender/",
    "project_urls": {
      "Dashboard": "https://dashboard.sourcedefender.co.uk/login?src=pypi-navbar",
      "Homepage": "https://sourcedefender.co.uk/?src=pypi-url"
    },
    "release_url": "https://pypi.org/project/sourcedefender/10.0.13/",
    "requires_dist": null,
    "requires_python": "!=2.*,>=3.6",
    "summary": "Advanced encryption protecting your python codebase.",
    "version": "10.0.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16492879,
  "releases": {
    "10.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efcfec506a28b428c3a9c880b6e36550745be82504ca9956a0e8407e45353d60",
          "md5": "531dca20b9e84d979ef34b5df689374b",
          "sha256": "f34db27620a416ae077110f3ab62639974902d99476499bc3eb5cf7ed47c4092"
        },
        "downloads": -1,
        "filename": "sourcedefender-10.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "531dca20b9e84d979ef34b5df689374b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=2.*,>=3.6",
        "size": 13013157,
        "upload_time": "2023-01-10T09:00:29",
        "upload_time_iso_8601": "2023-01-10T09:00:29.300070Z",
        "url": "https://files.pythonhosted.org/packages/ef/cf/ec506a28b428c3a9c880b6e36550745be82504ca9956a0e8407e45353d60/sourcedefender-10.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "10.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f61a671c800474462ea346f8ad3cdf82d84fb3018d3895c8954db1cd21b1b48",
          "md5": "aad7efab12995af5c4bc41120a3b7c85",
          "sha256": "36242be0f8d8345d7f50661bc5eaf596127b50a19cb066ddd000ecc170aa04b3"
        },
        "downloads": -1,
        "filename": "sourcedefender-10.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "aad7efab12995af5c4bc41120a3b7c85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=2.*,>=3.6",
        "size": 12999253,
        "upload_time": "2023-01-19T21:22:00",
        "upload_time_iso_8601": "2023-01-19T21:22:00.023048Z",
        "url": "https://files.pythonhosted.org/packages/4f/61/a671c800474462ea346f8ad3cdf82d84fb3018d3895c8954db1cd21b1b48/sourcedefender-10.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f61a671c800474462ea346f8ad3cdf82d84fb3018d3895c8954db1cd21b1b48",
        "md5": "aad7efab12995af5c4bc41120a3b7c85",
        "sha256": "36242be0f8d8345d7f50661bc5eaf596127b50a19cb066ddd000ecc170aa04b3"
      },
      "downloads": -1,
      "filename": "sourcedefender-10.0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "aad7efab12995af5c4bc41120a3b7c85",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "!=2.*,>=3.6",
      "size": 12999253,
      "upload_time": "2023-01-19T21:22:00",
      "upload_time_iso_8601": "2023-01-19T21:22:00.023048Z",
      "url": "https://files.pythonhosted.org/packages/4f/61/a671c800474462ea346f8ad3cdf82d84fb3018d3895c8954db1cd21b1b48/sourcedefender-10.0.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}