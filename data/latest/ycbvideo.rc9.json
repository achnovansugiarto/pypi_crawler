{
  "info": {
    "author": "Ole Priebusch",
    "author_email": "opriebusch@web.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ycbvideo\n\nPython package for loading the data from the YCB-Video Dataset.\nIt's a very large dataset made for computer vision task like *6D object pose estimation* or\n*semantic segmentation*.\nYou can find more information and a download link for the dataset\n[here](https://rse-lab.cs.washington.edu/projects/posecnn/).\n\nIt allows access to the *frames*, located either in `data` or the `data_syn` folders. A frame\nhere corresponds to all the information available for one portion of time, i.e. not only the color\nimage, but the color/depth/label images, the data from the *-meta.mat files and for the frames in\n`data` also the bounding box coordinates.\nFrames are grouped in *frame sequences* of consecutive frames.\nFrames and frame sequences can be specified by *frame selection expressions*.\n\nExample:\n\nFrame 42 from frame sequence 7 corresponds to the data from the following files\n\n* `data/0007/000042-color.png`\n* `data/0007/000042-depth.png`\n* `data/0007/000042-label.png`\n* `data/0007/000042-box.txt`\n* `data/0007/000042-meta.mat`\n\nand can be specified by the frame selection expression *7/42* to just specify this single frame.\nIf you'd like to specify e.g. the 42th frame for each *available* frame sequence, you could express\nthis by *\\*/42*. If you're interested in only the 42th frame from the frame sequences 7, 10 and 17,\nyou'd use *[7,10,17]/42*. If not only the 42th frame is interesting for you, but all frames from\n42 up to the 55th frame, specifying a range instead would work. A range is specified similar to\nhow slicing works in Python. *[7,10,17]/42:56* would work in our example. The range starts at\nthe 42th frame (*inclusive*) and stops just before the 56th frame (*exclusive*). Per default, the\nstepsize is *1*, *42:56:2* would select every other frame and *42:56:-1* would give you the frames\nin reverse order.\nYou can provide multiple of these expressions and receive the frames in the order of your expressions.\nHave a look at the section [Expressions](#expressions-in-detail) or the documentation for the\n`Loader.frames()` method for more ways and examples of how to specify the frames you're interested in.\n\nThe `data_syn` directory is also handled as a frame sequence, *\\*/42* therefore would also include\nthe 42th frame from the `data_syn` frame sequence. Leaving exactly this one out can be achieved\nwith *data/42*, i.e. gets you the 42th frame for each frame sequence except the `data_syn` frame\nsequence. Contrarily, *data_syn/42* gets you just this single frame.\n\nBecause the dataset is huge (~273 GB), it wouldn't make much sense to load all the data into memory\nat once, therefore, frames are loaded one at a time. Especially in case your working with just a\nsubset of all the data from the dataset, e.g. having only the frame sequences 0001 - 0010 on your\ndisk, you'd want to be sure that the data is really available when you start working with the\nframes. Therefore, after you specify all the frames you need by frame selection expression(s),\nan automatic check is made to ensure that all the frames are on your disk and you didn't forget to put\ne.g. frame sequence 0010 on your disk. This is especially helpful since the dataset is of most use\nfor machine learning tasks. Getting a \"file not found\" error after hours of training could be very\nfrustrating.\n\n## Installation\n\nIt's published at [PYPI](https://pypi.org/project/ycbvideo/), just use `pip install ycbvideo` to\ninstall it. Python >= 3.8 is required.\n\n## Usage\n\nFirst, import the package and create a loader. Provide the path to the dataset directory.\nDo not modify the data afterwards!\n\n```python\nimport ycbvideo\n\nloader = ycbvideo.Loader('/path/to/data')\n```\n\n### Accessing Frames\n\nYou can specify the frames by frame selection expressions, either via a list of such expressions\nor by providing a file comprised of those expressions, one expression per line.\n\n* Via a list\n\n  ```python\n  frames = loader.frames(['data_syn/1',\n                          '1/[2,4,5]',\n                          '42/[3,4]',\n                          '42:56/[2,3]',\n                          '[2,3,4]/*',\n                          '*/:56:-1',\n                          '*/*'])\n  ```\n\n* Via a file\n\n  ```\n  # frames.txt\n\n  data_syn/1\n  1/[2,4,5]\n  42/[3,4]\n  42:56/[2,3]\n  [2,3,4]/*\n  */:56:-1\n  */*\n  ```\n\n  ```python\n  frames = loader.frames('/path/to/frames.txt')\n  ```\n\n  If you provide a relative path, it is assumed that the file is located inside the dataset directory,\n  e.g. `imagesets/train.txt`.\n\nThe object returned by `loader.frames()` shares some behaviour with the Python\n`List` type, specifically supporting iteration, the `len()` Python\nbuiltin and index-based element access:\n\n* Iterate over all elements:\n\n  ```python\n  # create either an iterator using iter()\n  iterator = iter(loader.frames(...))\n  \n  # or use a for loop\n  for frame in loader.frames(...):\n      # do something with the frame\n  ```\n\n* Determine the number of frames:\n\n  ```python\n  frames = loader.frames(...)\n  \n  len(frames)\n  ```\n\n* Access the element at a specific index:\n\n  ```python\n  frames = loader.frames(...)\n  \n  frame = frames[42]\n  ```\n\nIf you want the frames to be shuffled for e.g. training in machine learning, just set the corresponding\nkeyword argument to `True`. Optionally, you can set a *seed* to get the same shuffling result for each run:\n\n```python\n# setting the seed\nrandom.seed(42)\n\nloader.frames(frames=..., shuffle=True)\n```\n\n#### Customizing iteration\n\nIn order to customize iteration of frames to your needs, you can, instead of accessing\nthe frames directly, access frames one-by-one by specifying their corresponding descriptors.\nA descriptor is simply the combination of *frame sequence id* and *frame id*, e.g.\nthe tuple `('0001', '000042')` for frame 42 from frame sequence 0001.\n\n```python\n# get the frame access object\nframes = loader.frames(...)\n\n# access the underlying descriptors\ndescriptions = frames.get_descriptors()\n\n# modify the list of descriptions\n# in any way according to your use case\n...\n\n# iterate over the frames specified by the descriptions\nfor description in descriptions:\n  frames.get_frame(description)\n\n  # do something with the frame\n```\n\nIf you need even more freedom in the selection of frames, you can access them directly.\nYou only have to provide a description for the frame you want to access. Descriptors are\nserve as descriptions, but you can also create descriptions yourself. For example,\nthe tuple `(1, 42)` containing two ints would also serve as a valid description.\n\n```python\nfrom ycbvideo.frame_access import FrameAccessor\n\nframe_accessor = FrameAccessor('/path/to/data')\n\nframe = frame_accessor.get_frame((1, 42))\n```\n\nKeep in mind that if you define your frame iteration scheme based on self created\ndescriptions and direct frame access via the `FrameAccessor`, you lose all\nthe safety the `Loader` provides, i.e. checking that the requested frames are in fact\non your disk and are complete (every corresponding file present).\n\n## Expressions in detail\n\nSelection expressions consist of two parts: An expression for specifying one\nor more frame sequences and an expression for specifying one or more frames.\nA */* combines both parts: *\\<FRAME_SEQUENCE_SELECTION\\>/\\<FRAME_SELECTION\\>*.\nMost expressions are valid for both frame sequences and frames:\n\n* *42*: Selects a single element *42* (*\"Single element expression\"*)\n* *[42,56,47]*: Selects a list of elements, the elements *42*, *56* and *47* in\n  exactly the order specified (*\"List expression\"*)\n* *42:47:1*: Selects the elements between element *42* (inclusive) up to element\n  *47* (exclusive), i.e. the elements *42*, *43*, *44*, *45* and *46*\n  (*\"Range expression\"*)\n* *\\**: Selects *all* elements in ascending order (*\"Star expression\"*)\n\nTwo \"single element expressions\" only apply to the selection of frame sequences:\n\n* *data_syn*: Selects the frame sequence *data_syn* (i.e. the `data_syn` directory)\n* *data*: Selects *all* frame sequences except the *data_syn* frame sequence\n  (i.e. all the subdirectories in the `data` directory)\n\n\"List expressions\" and \"range expressions\" can only contain \"numbered\" elements like\n*42* or *47*, not *data_syn* nor *data*.\n\n\"Range expressions\" are quite comparable to the slicing operation in Python. Given the\nexpression *\\<START\\>:\\<STOP\\>:\\<STEP\\>*, all the elements *START*, *STOP* and *STEP* are\noptional. If *START* is omitted, *START* equals the *smallest* *available* element,\nif *STOP* is omitted, *all* remaining *available* successive elements are included\nin the range.\nIf *STEP* is omitted, the step size equals *1*. *START* and *STOP* both have to be\n*positive* integers, *STEP* might also be a negative integer, which then would lead\nto reverse order of the specified elements. Step sizes other than *1* or *-1* are also\nallowed. Obviously, a step size of *0* is not allowed.\n\n## Missing or incomplete data\n\n### Missing data\n\nWorking with only a subset of the dataset is no problem.\n\n* Using a \"star expression\", you just get all *available* elements\n* Using a \"range expression\", elements in between your range might not be there,\n  for instance, if elements 42, 43 and 45 are there, but element 44 is missing\n  and you specify *42:45*, you would get the elements 42 and 43. You only have to\n  make sure that if you specify elements as start and/or stop, these elements are available.\n\nSo, in short, every time you \"name\" an element, it has to be there! Using a \"list\nexpression\" *[42,43,44,45]* in the former example would instantly result in an error,\nsince element 44 is *not* available. A \"Star expressions\" would not complain. Also,\n\"range expressions\", where the start and stop or both are omitted (e.g *42:*, *:45* or *:*)\nwill not complain since all \"named\" elements are available. Be aware this also means,\nthat *you* are responsible for making sure that all elements you expect to be selected\nare in fact on your disk.\n\n### Incomplete (frame) data\n\nIf all files corresponding to a frame are on your disk, the frame is \"complete\" and\nmight be loaded. If it misses at least one of the files, it is considered \"incomplete\"\nand cannot be loaded. This not only applies to \"named\" (frame) elements (like with\nmissing data), but also to implicitly specified elements like in a range expression.\nAn attempt to select *42:45*, when frame 42, 43 and 45 are there and complete but\nframe 44 is incomplete , will therefore fail.\n\nBy running\n\n```shell\npython -m ycbvideo /path/to/data\n```\n\nyou can manually inspect and check the integrity of the portion of the dataset on your disk.\nIt will show you which and how many frame sequences and frames are on your disk and which files\nmight be missing.\n\n## Roadmap\n\n* Perform tests also on Windows\n* Make other data from the dataset easily accessible where useful\n* Test, build and publish the package by using *GitHub Actions*\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oprb/ycbvideo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ycbvideo",
    "package_url": "https://pypi.org/project/ycbvideo/",
    "platform": null,
    "project_url": "https://pypi.org/project/ycbvideo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/oprb/ycbvideo/issues",
      "Homepage": "https://github.com/oprb/ycbvideo"
    },
    "release_url": "https://pypi.org/project/ycbvideo/0.7.0/",
    "requires_dist": [
      "imageio (>=2.10)",
      "numpy (>=1.21)",
      "scipy (>=1.7)"
    ],
    "requires_python": ">=3.8",
    "summary": "A small package to ease working with the YCB-Video dataset",
    "version": "0.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13149869,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df776db8cd5c67157c3e9a97a109985625382177ff96ff140584770e1f7b16ff",
          "md5": "e6742e85b09a17af9f1f4437dd468460",
          "sha256": "0c893c80ca43a37c9bf733aace9d6772d6163e5ccf7e13ce4d28176cd6111b49"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6742e85b09a17af9f1f4437dd468460",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7578,
        "upload_time": "2021-11-30T15:40:33",
        "upload_time_iso_8601": "2021-11-30T15:40:33.580509Z",
        "url": "https://files.pythonhosted.org/packages/df/77/6db8cd5c67157c3e9a97a109985625382177ff96ff140584770e1f7b16ff/ycbvideo-0.1.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Wrong import statement in loader.py"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13159bf5096b457afd32b7966b5f8b19698ad74471d8b15137c98241c8bbc925",
          "md5": "e89c53129104441dcd79035a7911a02a",
          "sha256": "65de73a4774b77e86183a42fe6fb4affe60074739c8639c38a9fc2dec0a46c01"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e89c53129104441dcd79035a7911a02a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 6483,
        "upload_time": "2021-11-30T15:40:34",
        "upload_time_iso_8601": "2021-11-30T15:40:34.975561Z",
        "url": "https://files.pythonhosted.org/packages/13/15/9bf5096b457afd32b7966b5f8b19698ad74471d8b15137c98241c8bbc925/ycbvideo-0.1.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Wrong import statement in loader.py"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e632aa8c580ff3b05871579834aca490acfff0a33fa350a089c5d5ef9d6ad108",
          "md5": "6a3ef5d107ddd8989c04910ea8deae78",
          "sha256": "e31646e711f07f7ae410c622cc3982615db3ae40e4654f5a6ef34050f1fc6765"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a3ef5d107ddd8989c04910ea8deae78",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7810,
        "upload_time": "2021-12-02T08:12:15",
        "upload_time_iso_8601": "2021-12-02T08:12:15.021145Z",
        "url": "https://files.pythonhosted.org/packages/e6/32/aa8c580ff3b05871579834aca490acfff0a33fa350a089c5d5ef9d6ad108/ycbvideo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8fa3ff6cae56e0fde202b17dc0446770ed6428c034fe2b0e312e8f99c1d5bdb",
          "md5": "ab9922fc6e9f124edd775e2941a9b765",
          "sha256": "1e5e45272d681bfa61f694ffe3a55d9979d2b846c17d9a70000d882f9114ce3e"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ab9922fc6e9f124edd775e2941a9b765",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 6662,
        "upload_time": "2021-12-02T08:12:16",
        "upload_time_iso_8601": "2021-12-02T08:12:16.465562Z",
        "url": "https://files.pythonhosted.org/packages/f8/fa/3ff6cae56e0fde202b17dc0446770ed6428c034fe2b0e312e8f99c1d5bdb/ycbvideo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38ad75df6d1ed05946ffca86d78989e735ebdd69145cba149b2be40d2c8ab2ae",
          "md5": "de44b834a77bf52159ac2fcdaa1f6abd",
          "sha256": "68c8fd8b76c8302f87afebbfe4f48be43942f067e8e945ac4283f144730e3805"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de44b834a77bf52159ac2fcdaa1f6abd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12289,
        "upload_time": "2021-12-23T11:38:45",
        "upload_time_iso_8601": "2021-12-23T11:38:45.727295Z",
        "url": "https://files.pythonhosted.org/packages/38/ad/75df6d1ed05946ffca86d78989e735ebdd69145cba149b2be40d2c8ab2ae/ycbvideo-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fb93c03b5bb304b6191152e6a4cb41f8213364ebada1efcd61085453c2c6f43",
          "md5": "c9f251f16cd8a253498e70e2281a6a85",
          "sha256": "1bfc7e957f1e8c2b29f938c1b7b6daf322cfb8cd9b740c8f473d5a3d612d05fe"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9f251f16cd8a253498e70e2281a6a85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12220,
        "upload_time": "2021-12-23T11:38:46",
        "upload_time_iso_8601": "2021-12-23T11:38:46.827797Z",
        "url": "https://files.pythonhosted.org/packages/8f/b9/3c03b5bb304b6191152e6a4cb41f8213364ebada1efcd61085453c2c6f43/ycbvideo-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4a72d413453710509b321ea3e24bea9fc887042c56fd033379a69541f46191a",
          "md5": "d5c45eeabe861a6993d50e79f4070a4e",
          "sha256": "6819e023b73722e03f8f4c9c05908e3870f604452d2c5bfaf3e6a525cc45d6e3"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5c45eeabe861a6993d50e79f4070a4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15741,
        "upload_time": "2022-01-11T11:26:17",
        "upload_time_iso_8601": "2022-01-11T11:26:17.902513Z",
        "url": "https://files.pythonhosted.org/packages/b4/a7/2d413453710509b321ea3e24bea9fc887042c56fd033379a69541f46191a/ycbvideo-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edc87a0365e46f06049df739cfdd05ab2d7d2812adb0030335d3adba02ba600d",
          "md5": "cd1b7cd80c2fa8198968248fb1c34c6c",
          "sha256": "7227951ecd736170f1fcbdecd247525e9bcd668b2f0fc2e16a776d5ed5189262"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cd1b7cd80c2fa8198968248fb1c34c6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16782,
        "upload_time": "2022-01-11T11:26:19",
        "upload_time_iso_8601": "2022-01-11T11:26:19.096642Z",
        "url": "https://files.pythonhosted.org/packages/ed/c8/7a0365e46f06049df739cfdd05ab2d7d2812adb0030335d3adba02ba600d/ycbvideo-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69e0e2ef1b372703c19be148c2cf8e16167e709d3b204dd84917e896e9732c8a",
          "md5": "e316691ecb30f478f841588c6daa08e3",
          "sha256": "469d013e089f68dc31dc9230c5e0f846a9b77898b73b55a5ce6de9c998db0c10"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e316691ecb30f478f841588c6daa08e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15736,
        "upload_time": "2022-01-11T11:58:21",
        "upload_time_iso_8601": "2022-01-11T11:58:21.260884Z",
        "url": "https://files.pythonhosted.org/packages/69/e0/e2ef1b372703c19be148c2cf8e16167e709d3b204dd84917e896e9732c8a/ycbvideo-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eace9713ec864ad6f90945c68cbf1004614b89b3e8533f7be064cd3d6d2c34d7",
          "md5": "b5a03f5ab5300eb18a1b5b8fb1dcd076",
          "sha256": "61a08149d838596b94b886c149cc23b077fbb3ec515c1d6390c665bec62890f2"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5a03f5ab5300eb18a1b5b8fb1dcd076",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16802,
        "upload_time": "2022-01-11T11:58:22",
        "upload_time_iso_8601": "2022-01-11T11:58:22.557630Z",
        "url": "https://files.pythonhosted.org/packages/ea/ce/9713ec864ad6f90945c68cbf1004614b89b3e8533f7be064cd3d6d2c34d7/ycbvideo-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d752b94bf82800c794d253f985026751fb4327a23c212f3b259df22b325e39e8",
          "md5": "74e6a48df09a09dafc960bab2d980a74",
          "sha256": "e89fe616469bb48f6f1607bbe573bc190767a46029150d023e1ac71d967eb0c6"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74e6a48df09a09dafc960bab2d980a74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16589,
        "upload_time": "2022-01-26T23:53:33",
        "upload_time_iso_8601": "2022-01-26T23:53:33.573884Z",
        "url": "https://files.pythonhosted.org/packages/d7/52/b94bf82800c794d253f985026751fb4327a23c212f3b259df22b325e39e8/ycbvideo-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "609e2a92e4a92494261ec5d3a783c1e4c77c9c5dc76811144470fb683152c4dd",
          "md5": "98f93ff12dfbd1ad1907f1b2fc763270",
          "sha256": "1a2d77096ae606a1bb7e5fc46b78b06377b5fca517e77284b442cc0ecbff63f0"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98f93ff12dfbd1ad1907f1b2fc763270",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17842,
        "upload_time": "2022-01-26T23:53:34",
        "upload_time_iso_8601": "2022-01-26T23:53:34.619089Z",
        "url": "https://files.pythonhosted.org/packages/60/9e/2a92e4a92494261ec5d3a783c1e4c77c9c5dc76811144470fb683152c4dd/ycbvideo-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6512201c1bf177e453132799821e33f3b99ddab6079a2c2592f4c09b455e5c69",
          "md5": "69b2ab6cd90214baeb68eef3ee4c62cf",
          "sha256": "5475738d8a01082897aba2d26000e440ab07da316725a826d8ee47a783ed5961"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69b2ab6cd90214baeb68eef3ee4c62cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16847,
        "upload_time": "2022-02-02T10:15:19",
        "upload_time_iso_8601": "2022-02-02T10:15:19.275867Z",
        "url": "https://files.pythonhosted.org/packages/65/12/201c1bf177e453132799821e33f3b99ddab6079a2c2592f4c09b455e5c69/ycbvideo-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e6dec1e17a7aa72923ee0629ca7944a51a472bda46e002d1a1f892144480144",
          "md5": "fed9a094d5cd95e79d9578474c07fae5",
          "sha256": "bcb5e6fc3bb0d00412e2982d0edf2e2417efb45b31effac09fa221303b226a3a"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fed9a094d5cd95e79d9578474c07fae5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18078,
        "upload_time": "2022-02-02T10:15:20",
        "upload_time_iso_8601": "2022-02-02T10:15:20.460996Z",
        "url": "https://files.pythonhosted.org/packages/2e/6d/ec1e17a7aa72923ee0629ca7944a51a472bda46e002d1a1f892144480144/ycbvideo-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d98cd2028153b76234083fbe00674c1edc6385538d3fa7e9de5485d629546e98",
          "md5": "036674ba3cb515f46605ee954c43730e",
          "sha256": "b82a0c1d43dadf0f458b93c37681835e068d37eaf3a45e9568b937ce37ca8d96"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "036674ba3cb515f46605ee954c43730e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17725,
        "upload_time": "2022-03-08T16:57:27",
        "upload_time_iso_8601": "2022-03-08T16:57:27.830696Z",
        "url": "https://files.pythonhosted.org/packages/d9/8c/d2028153b76234083fbe00674c1edc6385538d3fa7e9de5485d629546e98/ycbvideo-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cf3abaac66fe4c7ab47eee07587f2ca79774241e64f411da3e2138ffb73adff",
          "md5": "a47474f2100f68b261c4a7ddfbd939b7",
          "sha256": "1c527c1d64d524888953916d0cb2d6b3c4d98c00f9c34e4eb8e40b9c8d2774de"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a47474f2100f68b261c4a7ddfbd939b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 19459,
        "upload_time": "2022-03-08T16:57:29",
        "upload_time_iso_8601": "2022-03-08T16:57:29.043748Z",
        "url": "https://files.pythonhosted.org/packages/2c/f3/abaac66fe4c7ab47eee07587f2ca79774241e64f411da3e2138ffb73adff/ycbvideo-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "434d238cd1ad5abca2174ca6ed00b1016c3a41361a97e2d53f81fd334fbd6979",
          "md5": "9629f79c808ea3e8455d79263aea575a",
          "sha256": "ae1a5c0afea799b625fe4c9f3709d58977435aad71d3caeba90fe97ac83fe86f"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9629f79c808ea3e8455d79263aea575a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 18322,
        "upload_time": "2022-03-11T14:18:30",
        "upload_time_iso_8601": "2022-03-11T14:18:30.763602Z",
        "url": "https://files.pythonhosted.org/packages/43/4d/238cd1ad5abca2174ca6ed00b1016c3a41361a97e2d53f81fd334fbd6979/ycbvideo-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a087fe51dc5cec3c934d0a7d9d19d61891bdb3a133812611ffd390d47e6c69cb",
          "md5": "f796a8f4095b2047aeba52b1a6694dd2",
          "sha256": "bc3d95fb6fa40d627f8062b9c21a54b58631cde1c922a44e1a323b4716a7acce"
        },
        "downloads": -1,
        "filename": "ycbvideo-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f796a8f4095b2047aeba52b1a6694dd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 19889,
        "upload_time": "2022-03-11T14:18:31",
        "upload_time_iso_8601": "2022-03-11T14:18:31.914873Z",
        "url": "https://files.pythonhosted.org/packages/a0/87/fe51dc5cec3c934d0a7d9d19d61891bdb3a133812611ffd390d47e6c69cb/ycbvideo-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "434d238cd1ad5abca2174ca6ed00b1016c3a41361a97e2d53f81fd334fbd6979",
        "md5": "9629f79c808ea3e8455d79263aea575a",
        "sha256": "ae1a5c0afea799b625fe4c9f3709d58977435aad71d3caeba90fe97ac83fe86f"
      },
      "downloads": -1,
      "filename": "ycbvideo-0.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9629f79c808ea3e8455d79263aea575a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 18322,
      "upload_time": "2022-03-11T14:18:30",
      "upload_time_iso_8601": "2022-03-11T14:18:30.763602Z",
      "url": "https://files.pythonhosted.org/packages/43/4d/238cd1ad5abca2174ca6ed00b1016c3a41361a97e2d53f81fd334fbd6979/ycbvideo-0.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a087fe51dc5cec3c934d0a7d9d19d61891bdb3a133812611ffd390d47e6c69cb",
        "md5": "f796a8f4095b2047aeba52b1a6694dd2",
        "sha256": "bc3d95fb6fa40d627f8062b9c21a54b58631cde1c922a44e1a323b4716a7acce"
      },
      "downloads": -1,
      "filename": "ycbvideo-0.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f796a8f4095b2047aeba52b1a6694dd2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 19889,
      "upload_time": "2022-03-11T14:18:31",
      "upload_time_iso_8601": "2022-03-11T14:18:31.914873Z",
      "url": "https://files.pythonhosted.org/packages/a0/87/fe51dc5cec3c934d0a7d9d19d61891bdb3a133812611ffd390d47e6c69cb/ycbvideo-0.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}