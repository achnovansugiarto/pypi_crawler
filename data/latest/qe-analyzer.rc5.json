{
  "info": {
    "author": "Elizabeth Pogue",
    "author_email": "epogue1@jhu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "qe_analyzer\n\tconvergenceTests.py\n\t\t[ecut, planewaves, energy, ecut**(3/2)]=extractECUTConvergenceInfo(file1)\n\t\t\"head_ECUTcovergencePlot.png\"=ECUTconvergenceTest(head, calcThresh=False, thresh=0.05)\n\t\t\"TotEvsInequivK.png\"=KconvergenceTest(fmt='*.out')\n\t\tkx, ky, kz, shiftx, khifty, shiftz, ecutwfc, energy, inequiv, time=extractKConvergenceInfo(file1)\n\t\ta, cba, totEnergy=importacLatticeParamEnergyFile(fname)\n\t\tmat, unA, unCbA, data=importAllLatParamFiles(fmt)\n\t\t\"print(min data point a=, c/a=)\"=plotCbAvsA(fmt, lim=0)\n\tcopyPaste.py\n\t\t\"updated file\"=insertKptsFromXcrysden(kpfFile, updateFile)\n\t\t\"output file and lines in console describing what is being replaced to allow for verification\"=vcRelaxTransfer(inFileHead, outputF)\n\telectronBands.py\n\t\t[Ef, booleanHighestOccupied]=getEfSCF(scfFile)\n\t\t[k, energies]=importBands(file)\n\t\t[k, energies, xCoordinates, highSymmetryPoints]=buildBands(file2)\n\t\tplotBands(file, Ef=0, Kcoord=True, lbls=[], figsize=plt.rcParams.get('figure.figsize'), pad=1.08)\n\tphonons.py\n\t\tx, energy=importFreqGp(fname)\n\t\tpts, flfrq=generateXcoordMatdyn(matdynFile)\n\t\tplotPhononDispersion_cm(matdynF, figsize=plt.rcParams.get('figure.figsize'), pad=1.08 ,labels=[])\n\t\tplotPhononDispersion_meV(matdynF, figsize=plt.rcParams.get('figure.figsize'), pad=1.08 ,labels=[])\n\nconvergenceTests.extractECUTConvergenceInfo(file1):\n\t\"\"\"extracts ECUT convergence information from a given file, file1\n\toutputs a list of [ECUT, # planewaves, energy, CPU time, and ECUT**(3/2)]\n\n\tParameters\n    ----------\n    file1 : str\n        DESCRIPTION. File to read in\n\n    Returns list containing\n    -------\n    ecutwfc : float\n        DESCRIPTION. ECUT value \n\tplanewaves : float\n        DESCRIPTION. number of planewaves\n\tenergy : float\n        DESCRIPTION. Total Energy\n\ttime: float\n\t\tDESCRIPTION. CPU time\n\tecutwfc**(3/2): float\n\t\tDESCRIPTION. ECUT value to the 2/3 power. Ecut**(2/3) should be proportional to the number of planewaves\n\n\t\"\"\"\nconvergenceTests.ECUTconvergenceTest(head, calcThresh=False, thresh=0.05)\n\t\"\"\" Prints the filenames imported  for an ECUT convergence test (series of files where ECUT is changing)\n\tassumes '${head}-${ECUT}.out' file naming, \n\twill ignore all other files in folder.\n\tPrints the filenames that it imports for this also saves the plot\n\n\n    Parameters\n    ----------\n    head : str\n        DESCRIPTION. The header to the filename. Assumes that your working directory contains files with \n\t\t   '${head}-${ECUT}.out' formatting\n\tcalcThresh : boolean, optional\n\t\tDESCRIPTION. Do you want to pull out the ECUT associated with a convergence threshold?\n\n\tthresh : float\n\t\tDESCRIPTION. The convergence threshold you would like\n    Returns\n    -------\n    None. A plot should show up and will be automatically saved to your working directory.\n    \"\"\"\t\t\nconvergenceTests.extractKConvergenceInfo(file1)\n    \"\"\"\n    kx, ky, kz, shiftx, shifty, shiftx, ecutwfc, energy, inequiv,time  =extractKConvergenceInfo('SrTiO3-260-0-16.out')\n\n    Parameters\n    ----------\n    file1 : str\n        DESCRIPTION. name of *.out file to extract information from\n\n    Returns\n    -------\n    kx : int\n        DESCRIPTION.# k points in x direction\n    ky : int\n        DESCRIPTION. # k points in y direction\n    kz : int\n        DESCRIPTION. # k points in z direction\n    shiftx : int\n        DESCRIPTION.0 or 1\n    shifty : int\n        DESCRIPTION.0 or 1\n    shiftz : int\n        DESCRIPTION.0 or 1\n    ecutwfc : float\n        DESCRIPTION. cutoff energy\n    energy : float\n        DESCRIPTION. total energy\n    inequiv : int\n        DESCRIPTION. Number inequivalent k points\n    time : float\n        DESCRIPTION. CPU time in minutes\n\n    \"\"\"\n\nconvergenceTests.KconvergenceTest(fmt='*.out')\t\n\t\"\"\"\n    plots energy vs # k point mesh in x, y, and z directions. If all equal, only does one plot\n    KconvergenceTest('SrTiO3-260-*-*.out')\n\n    Parameters\n    ----------\n    fmt : string, optional\n        DESCRIPTION. The default is '*.out'. filename format for searching the working directory. This is like glob\n\n    Returns\n    -------\n    None.\n\t\"\"\"\nconvergenceTests.importacLatticeParamEnergyFile(fname)\n    '''\n\n\n    Parameters\n    ----------\n    fname : TYPE\n        DESCRIPTION.\n\n    Returns\n    -------\n    a : float\n        DESCRIPTION. lattice constant a in Bohr\n    cba : float\n        DESCRIPTION.c/a ratio\n    totEnergy : float\n        DESCRIPTION. total energy in Ry\n\n    '''\t\n\nconvergenceTests.importAllLatParamFiles(fmt)\n    \"\"\"\n    import all lattice parameter files. Use this for debugging any issues with plotCbAvsA. This is used in plotCbAvsA.\n    Prints the filenames of all files imported to allow you to check that things import properly\n    Parameters\n    ----------\n    fmt : str\n        DESCRIPTION. Format used by glob to describe the files involved in the lattice parameter data\n\n    Returns\n    -------\n    mat : numpy array of floats\n        DESCRIPTION. Array of total energies\n    unA : 1-d sorted numpy array\n        DESCRIPTION. Array of unique values in the a-lattice parameter\n    unCbA : 1-d sorted numpy array\n        DESCRIPTION. Array of unique values in c/a\n    data : numpy array\n        DESCRIPTION. raw data extracted from files, useful for debugging\n\n    \"\"\"\nconvergenceTests.plotCbAvsA(fmt, lim=0):\n    \"\"\"\n    Plots C/A vs A when A is in Bohr\n\tfmt='graphite_*_*.out'      \n\tplotCbAvsA(fmt)             \n    Parameters\n    ----------\n    fmt : str\n        DESCRIPTION. Format used by glob to describe the files involved in the lattice parameter data\n    lim : float, optional\n        DESCRIPTION. The default is -45.599. Describes the energy threshold above which all become one color.\n\n    Returns\n    -------\n    None.\n\n    \"\"\"\n\ncopyPaste.insertKptsFromXcrysden(kpfFile, updateFile):\n    \"\"\"\n    Generates a new *.in file entitled updateFile(minus.in)_update.in \n    by incorporating the k-points listed in kpfFile \n    (real form of k-point coordinates)\n\n    Parameters\n    ----------\n    kpfFile : str\n        DESCRIPTION. Filename, including extension, of the XCRYSDEN *.kpf file \n        containing the points you want to add\n    updateFile : TYPE\n        DESCRIPTION. Filename, including extension, of the *.in file that you \n        want to update/replace k-points of. This should leave other blocks alone.\n\n    Returns\n    -------\n    None.\n\n    \"\"\"\ncopyPaste.vcRelaxTransfer(inFileHead, outputF):\n    '''\n    Applies the new lattice parameters and atom sites obtained from a vc-relax calculation to a new *.in file\n    example: vcRelaxTransfer('Si-vcRelax', 'Si-vcRelax2.in')\n    Caution: Not fully tested.\n\n    Parameters\n    ----------\n    inFileHead : str\n        DESCRIPTION. Head of pw.x input and output files used for vc-relax calculation ([HEAD].in and [HEAD].out). No extension included\n    outputF : str\n        DESCRIPTION. Name of the new pw.x input file that you want to create. MUST INCLUDE *.in EXTENSION!\n\n    Returns\n    -------\n    None.\n\n    '''\nelectronBands.getEfSCF(scfFile):\n    \"\"\" Extracts Fermi level from SCF file\n\n\n    Parameters\n    ----------\n    scfFile : str\n        DESCRIPTION. Filename (or path to file and filename)\n\n    Returns\n    -------\n    list\n        DESCRIPTION. [Ef, highest occupied], The first element is the Fermi level. \n        The second element is a boolean describing whether the file said it was \n          the highest occupied orbital (True) or truly the Fermi level (False) \n\n    \"\"\"\nelectronBands.importBands(file):\n    \"\"\"    import bands structure in a mannner ready for plotting\n    Parameters\n    ----------\n    file : str\n        DESCRIPTION. band.x output file $[prefix]_bandx.out file generated by running bands.x\n    Kcoord : boolean, optional\n\n    Returns\n    -------\n    k : array of float64\n        DESCRIPTION. x-coordinates associated with k-points to use for plot. This is a 1-d array (vector)\n    Energies : array of float64\n        DESCRIPTION. array such that each column represents a band\n    x2 : list\n        DESCRIPTION. x-coordinates associated with special k points\n    hsp : list\n        DESCRIPTION. Each element in the list is a set of coordinates [kx, ky, kz] \n        describing the high-symmetry points. \n    \"\"\"\t\n\nelectronBands.buildBands(file2):\n    \"\"\"Extracts energy vs k for plotting into 1D array k and numpy array; \n    also extracts special points for plotting\n\n    Parameters\n    ----------\n    file2 : str\n        DESCRIPTION. band.x output file $[prefix]_bandx.out file generated by running bands.x\n    Kcoord : boolean, optional\n\n    Returns\n    -------\n    k : array of float64\n        DESCRIPTION. x-coordinates associated with k-points to use for plot. This is a 1-d array (vector)\n    Energies : array of float64\n        DESCRIPTION. array such that each column represents a band\n    x2 : list\n        DESCRIPTION. x-coordinates associated with special k points\n    hsp : list\n        DESCRIPTION. Each element in the list is a set of coordinates [kx, ky, kz] \n        describing the high-symmetry points. \n\n    \"\"\"\nelectronBands.plotBands(file, Ef=0, Kcoord=True, lbls=[], figsize=plt.rcParams.get('figure.figsize'), pad=1.08):\n    \"\"\" Return a plot of the data from file. \n    plotBands(file)\n    plotBands(file, getEfSCF('si_scf.out')[0], False, ['L', r'$\\Gamma$', 'X'])\n    plotBands(file, 0, False, ['L', r'$\\Gamma$', 'X'])\n\n    Parameters\n    ----------\n    file : str\n        DESCRIPTION. band.x output file $[prefix]_bandx.out file generated by running bands.x\n    Ef : float, optional\n        DESCRIPTION. Fermi level. Can be extracted using \n    Kcoord : boolean, optional\n        DESCRIPTION. The default is True. For the k-axis, use the special point coordinates (kx, ky, kz) for labels. \n        If false, requires lbls to include a list of labels of the appropriate length eg:['L', r'$\\Gamma$', X]\n    lbls : list\n        DESCRIPTION. The default is []. List of length number of high-symmetry points, optional only if Kcoord=True. \n    figsize: (float, float), optional\n        DESCRIPTION. The default is plt.rcParams.get('figure.figsize'). Figure width and height in inches\n    pad: float, optional\n        DESCRIPTION. The default is 1.08. Padding around figure for tight_layout\n    Returns\n    -------\n    None.\n\n    \"\"\"\nphonons.importFreqGp(fname)\n    \"\"\"\n    imports data from *.freq.gp file\n\n    Parameters\n    ----------\n    fname : str\n        DESCRIPTION.file name to be imported\n\n    Returns\n    -------\n    x: 1-d numpy array\n        DESCRIPTION. k point x-value for plotting (2pi/a)\n    energy: 2-d numpy array\n        DESCRIPTION. each column is a different band.\n\n\nphonons.generateXcoordMatdyn(matdynFile)\n    \"\"\"\n    generates X-labels (special K-points) from matdyn file\n    assumes q_in_band_form=True\n\n    Parameters\n    ----------\n    matdynFile : TYPE\n        DESCRIPTION.\n\n    Returns\n    -------\n    pts : 2-d numpy array\n        DESCRIPTION. special points such that column 0 is kx, column 1 is ky, column 2 is kz, column 3 is the x-coordinate for the E-vs-k plot\n    flfrq : str\n        DESCRIPTION. filename from matdyn file for where to expect the phonon data for processing (*.freq.gp file)\n\n    \"\"\"\n\nphonons.plotPhononDispersion_cm(matdynF, figsize=plt.rcParams.get('figure.figsize'), pad=1.08 ,labels=[]):\n    \"\"\"\n    Plots phonon dispersion assuming q_in_band_form for special points\n\n    plotPhononDispersion_cm('diamond_matdyn.in')\n    plotPhononDispersion_cm('diamond_matdyn.in', labels=['L', r'$\\Gamma$', 'X'])\n\n    Parameters\n    ----------\n    matdynF : str\n        DESCRIPTION. Filename of the matdyne input file that you used to generate the *.freq.gp file\n    figsize : tuple, optional\n        DESCRIPTION. The default is plt.rcParams.get('figure.figsize'). See matplotlib.pyplot.plot for details\n    pad : float, optional\n        DESCRIPTION. The default is 1.08. padding around the figure in plt.tight_layout()\n    labels : list of strings, optional\n        DESCRIPTION. The default is []. Labels to use for the special points. \n        If the length of this is not equal to the number of special points listed in matdynF, these labels will not be used.\n        assumes q_in_band_form\n\n    Returns\n    -------\n    None.\n\n    \"\"\"\nphonons.plotPhononDispersion_meV(matdynF, figsize=plt.rcParams.get('figure.figsize'), pad=1.08 ,labels=[])\n    \"\"\"\n    Plots phonon dispersion assuming q_in_band_form for special points\n\n    plotPhononDispersion_meV('diamond_matdyn.in')\n    plotPhononDispersion_meV('diamond_matdyn.in', labels=['L', r'$\\Gamma$', 'X'])\n\n\n    Parameters\n    ----------\n    matdynF : str\n        DESCRIPTION. Filename of the matdyne input file that you used to generate the *.freq.gp file\n    figsize : tuple, optional\n        DESCRIPTION. The default is plt.rcParams.get('figure.figsize'). See matplotlib.pyplot.plot for details\n    pad : float, optional\n        DESCRIPTION. The default is 1.08. padding around the figure in plt.tight_layout()\n    labels : list of strings, optional\n        DESCRIPTION. The default is []. Labels to use for the special points. \n        If the length of this is not equal to the number of special points listed in matdynF, these labels will not be used.\n        assumes q_in_band_form\n\n    Returns\n    -------\n    None.\n\n    \"\"\"\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/euclidmenot2/qe_analyzer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qe-analyzer",
    "package_url": "https://pypi.org/project/qe-analyzer/",
    "platform": "",
    "project_url": "https://pypi.org/project/qe-analyzer/",
    "project_urls": {
      "Homepage": "https://github.com/euclidmenot2/qe_analyzer"
    },
    "release_url": "https://pypi.org/project/qe-analyzer/0.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A small package for analyzing quantum espresso outputs",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7304996,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "409cff0f921c72c94459531df291a62d38e1f3590d0385b5c61455a0a1de39ba",
          "md5": "4d64a90cf888f34564f050e2c19db5ba",
          "sha256": "8e6ff18e5c704c5af38722dda9d422dd03fbf75768590e0ae6ad952066a29fa8"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d64a90cf888f34564f050e2c19db5ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22383,
        "upload_time": "2020-05-22T16:23:11",
        "upload_time_iso_8601": "2020-05-22T16:23:11.398799Z",
        "url": "https://files.pythonhosted.org/packages/40/9c/ff0f921c72c94459531df291a62d38e1f3590d0385b5c61455a0a1de39ba/qe_analyzer-0.0.3-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "limited expected range of input files"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8f4080434995ef29902354f2bac91940c744af13c4145ae09d2b610123af0b4",
          "md5": "b18de50007b9ff25240f038d872109aa",
          "sha256": "c3f0bd0bae770a60f2b2db208562bed1857a82b9866dcfd29119794d70081e34"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b18de50007b9ff25240f038d872109aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14705,
        "upload_time": "2020-05-22T16:23:13",
        "upload_time_iso_8601": "2020-05-22T16:23:13.339218Z",
        "url": "https://files.pythonhosted.org/packages/d8/f4/080434995ef29902354f2bac91940c744af13c4145ae09d2b610123af0b4/qe_analyzer-0.0.3.tar.gz",
        "yanked": true,
        "yanked_reason": "limited expected range of input files"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58e9f8ba2a538afda36cf36735bfeeb59ff71d6a2f0bb64a356a8823e1150ffe",
          "md5": "627dd788daa9beb6eccd9c4758422c4e",
          "sha256": "e3935ea04708aea9d2a2b39c70282e1bd34f4e6c588fa69fbe673c5a56e14453"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "627dd788daa9beb6eccd9c4758422c4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22391,
        "upload_time": "2020-05-22T18:13:35",
        "upload_time_iso_8601": "2020-05-22T18:13:35.744771Z",
        "url": "https://files.pythonhosted.org/packages/58/e9/f8ba2a538afda36cf36735bfeeb59ff71d6a2f0bb64a356a8823e1150ffe/qe_analyzer-0.0.4-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1750816c8e19041ac28eaeea8a0eae265a724d0a443383ff87abd3ee300abd9",
          "md5": "5354c2d03cd8d957bf6076787cebd594",
          "sha256": "61b0e926be65a07e8392ee4240eddaee52ad7e91958c965e0cec55bc58b9a1f7"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5354c2d03cd8d957bf6076787cebd594",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14720,
        "upload_time": "2020-05-22T18:13:36",
        "upload_time_iso_8601": "2020-05-22T18:13:36.828749Z",
        "url": "https://files.pythonhosted.org/packages/f1/75/0816c8e19041ac28eaeea8a0eae265a724d0a443383ff87abd3ee300abd9/qe_analyzer-0.0.4.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17ce3e9e83dc878fc1486fcab4108f02669203a387ae3d0a90570d820395d47a",
          "md5": "0f65df6b8569daf903f68d0482a3391b",
          "sha256": "cac227d994cf0cffd3bc18b0be679e16ff372b6b57e0696bb09dc4ee9b21ece9"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f65df6b8569daf903f68d0482a3391b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22387,
        "upload_time": "2020-05-22T18:25:12",
        "upload_time_iso_8601": "2020-05-22T18:25:12.731361Z",
        "url": "https://files.pythonhosted.org/packages/17/ce/3e9e83dc878fc1486fcab4108f02669203a387ae3d0a90570d820395d47a/qe_analyzer-0.0.5-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b27c0bfe65d7cdb02313c4aee93f21202569cc2cc265e81e226ad16fd0d87de",
          "md5": "73d751fc7dea884470c6faf42cde0585",
          "sha256": "17a8a6fe9b4d385370e0597ac2089042cf455a5871b43324471d742e47f132a1"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "73d751fc7dea884470c6faf42cde0585",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14710,
        "upload_time": "2020-05-22T18:25:13",
        "upload_time_iso_8601": "2020-05-22T18:25:13.775124Z",
        "url": "https://files.pythonhosted.org/packages/1b/27/c0bfe65d7cdb02313c4aee93f21202569cc2cc265e81e226ad16fd0d87de/qe_analyzer-0.0.5.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d13f839426d1ae58792812ddc45c728114d6ab30f641ddb74c1a547bd6bb048f",
          "md5": "422883de08310126c7ef323be641b3bf",
          "sha256": "6c7106a34f3a8ba03237ad9231716b2cb8be3352df056f71da88dbe61fa5a3a4"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "422883de08310126c7ef323be641b3bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22634,
        "upload_time": "2020-05-22T20:01:04",
        "upload_time_iso_8601": "2020-05-22T20:01:04.885230Z",
        "url": "https://files.pythonhosted.org/packages/d1/3f/839426d1ae58792812ddc45c728114d6ab30f641ddb74c1a547bd6bb048f/qe_analyzer-0.0.6-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "bad comments"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8afba940e20cf5fb2cf56953d02b7431ed7146d01bb3815533a945433ce9e564",
          "md5": "c64ebe6603d6d6e3c5300b9624ef1c4a",
          "sha256": "7c46588f089b7d3437a6d029d3e2117e0f57b816db264ccb7763a8eaf8e254a6"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c64ebe6603d6d6e3c5300b9624ef1c4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15282,
        "upload_time": "2020-05-22T20:01:05",
        "upload_time_iso_8601": "2020-05-22T20:01:05.643553Z",
        "url": "https://files.pythonhosted.org/packages/8a/fb/a940e20cf5fb2cf56953d02b7431ed7146d01bb3815533a945433ce9e564/qe_analyzer-0.0.6.tar.gz",
        "yanked": true,
        "yanked_reason": "bad comments"
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c543e9446c0ec77e583e9920197242ecf4e5807e91a462b44be7da86ec57dcb",
          "md5": "853e89cc9e870af89254ffe2f4433605",
          "sha256": "78cbfedac8cec3caff70dd7e7cfe6957934ec98a153b1b21b9d83c46ce10cd97"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "853e89cc9e870af89254ffe2f4433605",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22427,
        "upload_time": "2020-05-22T20:07:19",
        "upload_time_iso_8601": "2020-05-22T20:07:19.451155Z",
        "url": "https://files.pythonhosted.org/packages/3c/54/3e9446c0ec77e583e9920197242ecf4e5807e91a462b44be7da86ec57dcb/qe_analyzer-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "959e59fce896f203c223bb2c535e62f8a56d1fde495e521e8d6779762cb1a9c5",
          "md5": "a5ea43a05e5305710ef019401ac3bed5",
          "sha256": "79803a4293ff027bc2d4bd356a42143553ac6f927deed7af1f39af97eeb893b7"
        },
        "downloads": -1,
        "filename": "qe_analyzer-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a5ea43a05e5305710ef019401ac3bed5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14747,
        "upload_time": "2020-05-22T20:07:20",
        "upload_time_iso_8601": "2020-05-22T20:07:20.373484Z",
        "url": "https://files.pythonhosted.org/packages/95/9e/59fce896f203c223bb2c535e62f8a56d1fde495e521e8d6779762cb1a9c5/qe_analyzer-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c543e9446c0ec77e583e9920197242ecf4e5807e91a462b44be7da86ec57dcb",
        "md5": "853e89cc9e870af89254ffe2f4433605",
        "sha256": "78cbfedac8cec3caff70dd7e7cfe6957934ec98a153b1b21b9d83c46ce10cd97"
      },
      "downloads": -1,
      "filename": "qe_analyzer-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "853e89cc9e870af89254ffe2f4433605",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22427,
      "upload_time": "2020-05-22T20:07:19",
      "upload_time_iso_8601": "2020-05-22T20:07:19.451155Z",
      "url": "https://files.pythonhosted.org/packages/3c/54/3e9446c0ec77e583e9920197242ecf4e5807e91a462b44be7da86ec57dcb/qe_analyzer-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "959e59fce896f203c223bb2c535e62f8a56d1fde495e521e8d6779762cb1a9c5",
        "md5": "a5ea43a05e5305710ef019401ac3bed5",
        "sha256": "79803a4293ff027bc2d4bd356a42143553ac6f927deed7af1f39af97eeb893b7"
      },
      "downloads": -1,
      "filename": "qe_analyzer-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "a5ea43a05e5305710ef019401ac3bed5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14747,
      "upload_time": "2020-05-22T20:07:20",
      "upload_time_iso_8601": "2020-05-22T20:07:20.373484Z",
      "url": "https://files.pythonhosted.org/packages/95/9e/59fce896f203c223bb2c535e62f8a56d1fde495e521e8d6779762cb1a9c5/qe_analyzer-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}