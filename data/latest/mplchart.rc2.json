{
  "info": {
    "author": "furechan",
    "author_email": "furechan@xsmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Office/Business :: Financial"
    ],
    "description": "# Classic Stock Charts in Python\n\n\nThis project aims at creating classic\ntechnical analysis stock charts in Python with minimum code.\nThe library is built around the excellent \n[matplotlib](https://github.com/matplotlib/matplotlib). \nThe interface is declarative, based on a set of drawing primitives\nlike `Candleststicks`, `Volume`, `Peaks`\nand technical indicators\nlike `SMA`, `EMA`, `RSI`, `ROC`, `MACD`, etc ...\nIf you have [ta-lib](https://github.com/mrjbq7/ta-lib)\ninstalled you can also use its abstract functions as indicators but it is not a requirement.\n\n\nThis is work in progress! For more mature projects you may want to you look into \n[mplfinance](https://pypi.org/project/mplfinance/).\n\n\n![Showcase Chart](https://github.com/furechan/mplchart/raw/main/output/showcase.svg \"Showcase\")\n\n\n\n## Typical Usage\n\n```python\nfrom mplchart.chart import Chart\nfrom mplchart.helper import get_prices\nfrom mplchart.primitives import Candlesticks, Volume\nfrom mplchart.indicators import ROC, SMA, EMA, RSI, MACD\n\nticker = 'AAPL'\nfreq = 'daily'\nprices = get_prices(ticker, freq=freq)\n\nmax_bars = 250\n\nindicators = [\n    Candlesticks(), SMA(50), SMA(200), Volume(),\n    RSI(),\n    MACD(),\n]\n\nchart = Chart(title=ticker, max_bars=max_bars)\nchart.plot(prices, indicators)\n```\n\nSee example notebook [mplchart-usage.ipynb](https://github.com/furechan/mplchart/blob/main/examples/mplchart-usage.ipynb) \n\n\n## Conventions\n\nPrices are expected to be stored as a pandas DataFrame\nwith columns `open`, `high`, `low`, `close` `volume`\nand a timestamp index named `date`, all in **lower case**!\n\nFor testing purposes you can use the `helper` module\nwhich can fetch sample prices in the proper format via\n[yfinance](https://github.com/ranaroussi/yfinance).\nThis is meant to be used for testing/demo purposes only!\nSee yfinance for more information on its usage.\n\n```python\nfrom mplchart.helper import get_prices\n\nticker = 'AAPL'\nfreq = 'daily'\nprices = get_prices(ticker, freq=freq)\n```\n\nSee example notebook [mplchart-helper.ipynb](https://github.com/furechan/mplchart/blob/main/examples/mplchart-helper.ipynb) \n\n\n## Drawing Primitives\n\nThe library contains drawing primitives that can be used as an indicator in the plot api.\nAll primitives are classes that must be instantiated as objects before being used in the plot api.\nHere is a snippet for the `Candlesticks` primitive.\n\n```python\nfrom mplchart.primitives import Candlesticks\n\nindicators = [Candlesticks()]\nchart = Chart(title=title, max_bars=max_bars)\nchart.plot(prices, indicators)\n```\nThe main drawing primitives are :\n- `Candlesticks` for candlesticks plots\n- `OHLC` for open, high, low, close bar plots\n- `Price` for price line plots\n- `Volume` for volume bar plots\n- `Peaks` to plot peaks and valleys\n- `SameAxes` to force plot on the same axes\n- `NewAxes` to force plot on a new axes\n\nSee example notebook [mplchart-primitives.ipynb](https://github.com/furechan/mplchart/blob/main/examples/mplchart-primitives.ipynb) \n\n## Builtin Indicators\n\nThe libary contains some basic technical analysis indicators implemented in pandas/numpy.\nAll indicators are classes that must be instantiated\nbefore being used in the plot api.\nSome of the indicators included are:\n- `SMA` Simple Moving Average\n- `EMA` Exponential Moving Average\n- `ROC` Rate of Change\n- `RSI` Relative Strength Index\n- `MACD` Moving Average Convergence Divergence\n- `PPO` Price Percentage Oscillator \n- `SLOPE` Slope (linear regression with time)\n- `BBANDS` Bolling Bands\n\nSee example notebook [mplchart-builtins.ipynb](https://github.com/furechan/mplchart/blob/main/examples/mplchart-builtins.ipynb) \n\n## Ta-lib Abstract Functions\n\nIf you have \n[ta-lib](https://github.com/mrjbq7/ta-lib)\ninstalled you can use its abstract functions as indicators.\nThe functions are created by calling `abstract.Function` with the name of the indicator and its parameters.\n\n```python\nfrom talib.abstract import Function\n\nindicators = [\n    Candlesticks(),\n    Function('SMA', 50),\n    Function('SMA', 200),\n    Function('RSI'),\n    Function('MACD'),\n]\n```\n \nSee example notebook [mplchart-abstract.ipynb](https://github.com/furechan/mplchart/blob/main/examples/mplchart-abstract.ipynb) \n\n\n## Custom Indicators\n\nIt is easy to create custom indicators.\nAn indicator is basically a callable that takes a prices data frame and returns a series as result.\nA function can be used as an indicator but we suggest you implement indicators as a callable dataclass.\n\n```python\nfrom dataclasses import dataclass\n\nfrom mplchart.library import get_series, calc_ema\n\n@dataclass\nclass DEMA:\n    \"\"\" Double Exponential Moving Average \"\"\"\n    period: int = 20\n\n    same_scale = True\n    # same_scale is an optional class attribute that indicates\n    # the indicator should be plot on the same axes by default\n\n    def __call__(self, prices):\n        series = get_series(prices)\n        ema1 = calc_ema(series, self.period)\n        ema2 = calc_ema(ema1, self.period)\n        return 2 * ema1 - ema2\n\n```\n\nSee example notebook [mplchart-custom.ipynb](https://github.com/furechan/mplchart/blob/main/examples/mplchart-custom.ipynb) \n\n\n## Example Notebooks\n\nYou can find example notebooks in the [examples](https://github.com/furechan/mplchart/blob/main/examples/) folder. \n\n## Developer Notes\n\nYou can install this package with pip\n\n\n```console\npython3 -mpip install git+ssh://git@github.com/furechan/mplchart-proto.git\n```\n\n## Requirements:\n\n- python >= 3.8\n- matplotlib\n- pandas\n- numpy\n- yfinance\n\n\n## Related Projects & Resources\n- [stockcharts.com](https://stockcharts.com/) Beautiful stock charts and technical analysis reference\n- [mplfinance](https://pypi.org/project/mplfinance/) Matplotlib utilities for the visualization,\nand visual analysis, of financial data\n- [matplotlib](https://github.com/matplotlib/matplotlib) Matplotlib: plotting with Python\n- [yfinance](https://github.com/ranaroussi/yfinance) Download market data from Yahoo! Finance's API\n- [ta-lib](https://github.com/mrjbq7/ta-lib) Python wrapper for TA-Lib\n- [pandas](https://github.com/pandas-dev/pandas) Flexible and powerful data analysis / manipulation library\nfor Python, providing labeled data structures similar to R data.frame objects,\nstatistical functions, and much more\n- [numpy](https://github.com/numpy/numpy) The fundamental package for scientific computing with Python\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/furechan/mplchart",
    "keywords": "finance,charting,matplotlib,candlesticks",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mplchart",
    "package_url": "https://pypi.org/project/mplchart/",
    "platform": null,
    "project_url": "https://pypi.org/project/mplchart/",
    "project_urls": {
      "Homepage": "https://github.com/furechan/mplchart"
    },
    "release_url": "https://pypi.org/project/mplchart/0.0.2/",
    "requires_dist": [
      "matplotlib",
      "numpy",
      "pandas",
      "yfinance"
    ],
    "requires_python": ">=3.8",
    "summary": "Classic Stock Charts in Python",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14756283,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab8d1c367932a4187582b8a6ce82eed20fc0ec6eac21b5e6e1094688834123e2",
          "md5": "cfb09376a5c8a326da211d9ddae3b88d",
          "sha256": "0c85fba4edcc27e762846fee2993e307354cbdccee956f5c9464884121595c87"
        },
        "downloads": -1,
        "filename": "mplchart-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfb09376a5c8a326da211d9ddae3b88d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23987,
        "upload_time": "2022-08-09T14:56:48",
        "upload_time_iso_8601": "2022-08-09T14:56:48.818508Z",
        "url": "https://files.pythonhosted.org/packages/ab/8d/1c367932a4187582b8a6ce82eed20fc0ec6eac21b5e6e1094688834123e2/mplchart-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d293be948191409abe75ffb7157cf4dad663226d1fac33678e048305c518a8e5",
          "md5": "9e39f53c1e4df6835b029661530521cf",
          "sha256": "a5fde612378ab04cac4490a5f94782378b3ac1b1b228b8a8efb9603f2e4f2c27"
        },
        "downloads": -1,
        "filename": "mplchart-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e39f53c1e4df6835b029661530521cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23847,
        "upload_time": "2022-08-14T14:32:50",
        "upload_time_iso_8601": "2022-08-14T14:32:50.059842Z",
        "url": "https://files.pythonhosted.org/packages/d2/93/be948191409abe75ffb7157cf4dad663226d1fac33678e048305c518a8e5/mplchart-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d293be948191409abe75ffb7157cf4dad663226d1fac33678e048305c518a8e5",
        "md5": "9e39f53c1e4df6835b029661530521cf",
        "sha256": "a5fde612378ab04cac4490a5f94782378b3ac1b1b228b8a8efb9603f2e4f2c27"
      },
      "downloads": -1,
      "filename": "mplchart-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9e39f53c1e4df6835b029661530521cf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 23847,
      "upload_time": "2022-08-14T14:32:50",
      "upload_time_iso_8601": "2022-08-14T14:32:50.059842Z",
      "url": "https://files.pythonhosted.org/packages/d2/93/be948191409abe75ffb7157cf4dad663226d1fac33678e048305c518a8e5/mplchart-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}