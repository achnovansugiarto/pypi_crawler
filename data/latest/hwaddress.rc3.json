{
  "info": {
    "author": "",
    "author_email": "Eric Geldmacher <egeldmacher@wustl.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "=========\nhwaddress\n=========\n\nLightweight python library for EUI-48, EUI-64 based hardware (MAC) addresses. \n\n.. contents::\n    :local:\n\n\nQuick start & Example usage\n---------------------------\n\nInstall hwaddress\n\n.. code:: bash\n\n    $ pip install hwaddress\n\nImport a few hwaddress classes and create instances\nby passing string representations of hardware address to them.\n\n.. code:: python\n\n    >>> from hwaddress import MAC, EUI_48\n    >>>\n    >>> MAC('12:34:56:78:90:ab') \n    MAC(12:34:56:78:90:ab)\n    >>>\n    >>> EUI_48('12-34-56-78-90-ab')\n    EUI_48(12-34-56-78-90-ab)\n\nStrings passed to hwaddress classes do not have to conform to a given format.\nAll occurrences of :code:`'-', ':', '.', ' ', '0x'` are removed,\nand as long as the remaining characters are hexadecimal digits matching the \nbit-length of the class, and instance will be created.\n\nThe following list of strings are able to create instances of both :code:`MAC` and :code:`EUI_48` classes.\n\n.. code:: python\n\n    >>> maclist = ['12:34:56:78:90:ab', '23-78-ab-CD-43-ff', '0xABCDEF123456', '56 78 ab cd 12 54', '5432.abcd.3456', 'ab cdef.12-45:90']\n    >>>\n    >>> [MAC(mac) for mac in maclist]\n    [MAC(12:34:56:78:90:ab), MAC(23:78:ab:cd:43:ff), MAC(ab:cd:ef:12:34:56), MAC(56:78:ab:cd:12:54), MAC(54:32:ab:cd:34:56), MAC(ab:cd:ef:12:45:90)]\n    >>>\n    >>> [EUI_48(mac) for mac in maclist]\n    [EUI_48(12-34-56-78-90-ab), EUI_48(23-78-ab-cd-43-ff), EUI_48(ab-cd-ef-12-34-56), EUI_48(56-78-ab-cd-12-54), EUI_48(54-32-ab-cd-34-56), EUI_48(ab-cd-ef-12-45-90)]\n\nhwaddress classes have a `strict`_ classmethod that (by default) will only\nreturn an instance if it matches the format defined by the class.\n\n.. code:: python\n\n    >>> MAC.strict('12:34:56:78:90:ab')\n    MAC(12:34:56:78:90:ab)\n    >>>\n    >>> MAC.strict('12-34-56-78-90-ab')\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"/Users/egeldmac/git/hwaddress/hwaddress/core.py\", line 228, in strict\n        raise ValueError(f'{address} did not pass verification.')\n    ValueError: 12-34-56-78-90-ab did not pass verification.\n    >>>\n    >>> EUI_48.strict('12-34-56-78-90-ab')\n    EUI_48(12-34-56-78-90-ab)\n    >>>\n    >>> EUI_48.strict('12:34:56:78:90:ab')\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"/Users/egeldmac/git/hwaddress/hwaddress/core.py\", line 228, in strict\n        raise ValueError(f'{address} did not pass verification.')\n    ValueError: 12:34:56:78:90:ab did not pass verification.\n\nhwaddress classes also have a `verify`_ classmethod\nthat check if a string conforms to the format specified by the class.\n\n.. code:: python\n\n    >>> MAC.verify('12:34:56:78:90:ab')\n    True\n    >>> MAC.verify('12-34-56-78-90-ab')\n    False\n    >>>\n    >>> EUI_48.verify('12:34:56:78:90:ab')\n    False\n    >>> EUI_48.verify('12-34-56-78-90-ab')\n    True\n\nThere is also a `get_verifier`_ factory function available that,\nwhen given hwaddress classes as arguments, will return a verifier function.\nThis function will return True if the address passed conforms to the format of \nany of the hwaddress classes passed to get_verifier.\n\n.. code:: python\n\n    >>> from hwaddress import get_verifier\n    >>>\n    >>> verifier = get_verifier(MAC, EUI_48)\n    >>>\n    >>> verifier('12:34:56:78:90:ab')\n    True\n    >>> verifier('12-34-56-78-90-ab')\n    True\n    >>> verifier('1234.5678.90ab')\n    False\n\nThe resulting verifier can be used to filter a list of possible hardware\naddresses or be passed to the `strict`_ classmethod.\n\n.. code:: python\n\n    >>> maclist\n    ['12:34:56:78:90:ab', '23-78-ab-CD-43-ff', '0xABCDEF123456', '56 78 ab cd 12 54', '5432.abcd.3456', 'ab cdef.12-45:90']\n    >>>\n    >>> [EUI_48(mac) for mac in filter(verifier, maclist)]\n    [EUI_48(12-34-56-78-90-ab), EUI_48(23-78-ab-cd-43-ff)]\n    >>>\n    >>> EUI_48.strict('12:34:56:78:90:ab', verifier=verifier)\n    EUI_48(12-34-56-78-90-ab)\n    >>>\n    >>> EUI_48.strict('12-34-56-78-90-ab', verifier=verifier)\n    EUI_48(12-34-56-78-90-ab)\n    >>>\n    >>> EUI_48.strict('1234.5678.90ab', verifier=verifier)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"/Users/egeldmac/git/hwaddress/hwaddress/core.py\", line 228, in strict\n        raise ValueError(f'{address} did not pass verification.')\n    ValueError: 1234.5678.90ab did not pass verification.\n\nIncluded Hardware Address Classes\n---------------------------------\n\n+---------+-------------------------------------------------+-----------------+\n| Name    | Format                                          | Properties      |\n+=========+=================================================+=================+\n| MAC     | ff:ff:ff:ff:ff:ff                               |                 |\n+---------+-------------------------------------------------+-----------------+\n| MAC_64  | ff:ff:ff:ff:ff:ff:ff:ff                         |                 |\n+---------+-------------------------------------------------+-----------------+\n| GUID    | ffffffff-ffff-ffff-ffff-ffffffffffff            |                 |\n+---------+-------------------------------------------------+-----------------+\n| EUI_48  | ff-ff-ff-ff-ff-ff                               | oui, oui36, cid |\n+---------+-------------------------------------------------+-----------------+\n| EUI_64  | ff-ff-ff-ff-ff-ff-ff-ff                         | oui, oui36, cid |\n+---------+-------------------------------------------------+-----------------+\n| WWN     | ff:ff:ff:ff:ff:ff:ff:ff                         | naa, oui        |\n+---------+-------------------------------------------------+-----------------+\n| WWNx    | ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff | naa, oui        |\n+---------+-------------------------------------------------+-----------------+\n| IB_LID  | 0xffff                                          |                 |\n+---------+-------------------------------------------------+-----------------+\n| IB_GUID | ffff:ffff:ffff:ffff                             |                 |\n+---------+-------------------------------------------------+-----------------+\n| IB_GID  | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff         | prefix, guid    |\n+---------+-------------------------------------------------+-----------------+\n\n\nCommon Classmethods/Methods/Properties\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**All classes inheriting from MAC will have the following methods, classmethos, and properties.**\n\n+-----------+-------------+----------------+--------------------------------------------------------------+\n| Name      | Type        | Returns        | Description                                                  |\n+===========+=============+================+==============================================================+\n| `verify`_ | classmethod | bool           | Verify that address conforms to formatting defined by class. |\n+-----------+-------------+----------------+--------------------------------------------------------------+\n| `strict`_ | classmethod | class instance | Create instance only if it passes verification.              |\n+-----------+-------------+----------------+--------------------------------------------------------------+\n| `format`_ | method      | str            | Format address with given formatting options.                |\n+-----------+-------------+----------------+--------------------------------------------------------------+\n| `int`_    | property    | int            | Integer representation of address.                           |\n+-----------+-------------+----------------+--------------------------------------------------------------+\n| `hex`_    | property    | str            | Hexadecimal representation of address.                       |\n+-----------+-------------+----------------+--------------------------------------------------------------+\n| `binary`_ | property    | str            | Padded binary representation of each hex digit in address.   |\n+-----------+-------------+----------------+--------------------------------------------------------------+\n\n.. _verify:\n\n**verify(address)**\n\n::\n\n    Verify that address conforms to formatting defined by class.\n\n\n.. code:: python\n\n    >>> hwaddress.MAC.verify('12:34:56:78:90:ab')\n    True\n    >>> hwaddress.MAC.verify('1234.5678.90ab')\n    False\n\n.. _strict:\n\n**strict(address, verifier=None)**\n\n::\n\n    Create object only if it passes verification.\n\n    If no verifier is passed, the classes verify classmethod will be used.\n\n\n.. code:: python\n\n    >>> MAC.strict('12:34:56:78:90:ab')\n    MAC(12:34:56:78:90:ab)\n    >>> MAC.strict('12-34-56-78-90-ab')\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"/Users/egeldmac/git/hwaddress/hwaddress/core.py\", line 228, in strict\n        raise ValueError(f'{address} did not pass verification.')\n    ValueError: 12-34-56-78-90-ab did not pass verification.\n\n.. _format:\n\n**format(self, delimiter=None, group=None, upper=None)**\n\n::\n\n    Format address with given formatting options.\n\n    If an option is not specified,\n    the option defined by the class will be used\n\n    Args:\n      delimiter (str): character separating hex digits.\n      group (int): how many hex digits in each group.\n      upper (bool): True for uppercase, False for lowercase.\n\n\n.. code:: python\n\n    >>> mac = hwaddress.MAC('12:34:56:78:90:ab')\n    >>> mac\n    MAC(12:34:56:78:90:ab)\n    >>> str(mac)\n    '12:34:56:78:90:ab'\n    >>> mac.format('-')\n    '12-34-56-78-90-ab'\n    >>> mac.format('.', 4)\n    '1234.5678.90ab'\n    >>> mac.format(group=4, upper=True)\n    '1234:5678:90AB'\n\n.. _int:\n\n**int**\n\n.. code:: python\n\n    >>> mac.int\n    20015998341291\n\n.. _hex:\n\n**hex**\n\n.. code:: python\n\n    >>> mac.hex\n    '0x1234567890ab'\n\n.. _binary:\n\n**binary**\n\n.. code:: python\n\n    >>> mac.binary\n    '0001 0010 0011 0100 0101 0110 0111 1000 1001 0000 1010 1011'\n\n\nEUI Properties\n~~~~~~~~~~~~~~\n\n+-------+---------+--------------------------------------------+\n| Name  | Returns | Description                                |\n+=======+=========+============================================+\n| oui   | OIU     | 24-bit Organizationally Unique Identifier. |\n+-------+---------+--------------------------------------------+\n| cid   | CID     | 24-bit Company ID.                         |\n+-------+---------+--------------------------------------------+\n| oui36 | OUI36   | 36-bit Organizationally Unique Identifier. |\n+-------+---------+--------------------------------------------+\n\n\nWWN Properties\n~~~~~~~~~~~~~~\n\n+------+---------+--------------------------------------------+\n| Name | Returns | Description                                |\n+======+=========+============================================+\n| naa  | str     | Network Address Authority.                 |\n+------+---------+--------------------------------------------+\n| oui  | OUI     | 24-bit Organizationally Unique Identifier. |\n+------+---------+--------------------------------------------+\n\n\nIB_GID Properties\n~~~~~~~~~~~~~~~~~\n\n+--------+---------------+--------------------------+\n| Name   | Returns       | Description              |\n+========+===============+==========================+\n| prefix | IB_GID_prefix | 64-bit IB_GID_prefix.    |\n+--------+---------------+--------------------------+\n| guid   | IB_GUID       | Embedded 64-bit IB_GUID. |\n+--------+---------------+--------------------------+\n\n\nFactory Functions\n-----------------\n\nnew_hwaddress_class\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> from hwaddress import new_hwaddress_class\n\nget_address_factory\n~~~~~~~~~~~~~~~~~~~\n\nReturn a hwaddress object from objs tuple\ndepending on the address passed as an argument.\n\n.. code:: python\n\n    >>> from hwaddress import get_address_factory, EUI_48, EUI_64\n    >>>\n    >>> hw_address = get_address_factory()\n    >>>\n    >>> hw_address('12:34:56:78:90:ab')\n    MAC(12:34:56:78:90:ab)\n    >>> hw_address('12:34:56:78:90:ab:cd:ef')\n    MAC_64(12:34:56:78:90:ab:cd:ef)\n    >>>\n    >>> eui_address = get_address_factory(EUI_48, EUI_64)\n\n\nget_verifier\n~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> from hwaddress import MAC, EUI_48, get_verifier\n    >>>\n    >>> class MyMAC(MAC):\n    ...     _len_ = 48\n    ...     _del_ = '.'\n    ...     _grp_ = 4\n    ...\n    >>>\n    >>> my_verifier = get_verifier(MAC, EUI_48, MyMAC)\n    >>>\n    >>> my_verifier('12:34:56:78:90:ab')\n    True\n    >>> my_verifier('12-34-56-78-90-ab')\n    True\n    >>> my_verifier('1234.5678.90ab')\n    True\n    >>> my_verifier('12.34.56.78.90.ab')\n    False\n    >>> my_verifier('1234-5678-90ab')\n    False\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hwaddress",
    "package_url": "https://pypi.org/project/hwaddress/",
    "platform": null,
    "project_url": "https://pypi.org/project/hwaddress/",
    "project_urls": {
      "Bug Tracker": "https://codeberg.org/nbcli/hwaddress/issues",
      "Homepage": "https://codeberg.org/nbcli/hwaddress"
    },
    "release_url": "https://pypi.org/project/hwaddress/0.0.1.dev3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Lightweight EUI-48/64 based hardware (MAC) address library.",
    "version": "0.0.1.dev3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17499272,
  "releases": {
    "0.0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1f8b679d8e89c7567575bdf82c4762b2c0aa55ca2f25c8e1b1306a2c5fe7fb9",
          "md5": "f069cfb7d3688c8b72029b5045229e5d",
          "sha256": "983bcee0c885bb64cfaea188dda4715958a2ed50866102ec2361141f34bbf4ed"
        },
        "downloads": -1,
        "filename": "hwaddress-0.0.1.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f069cfb7d3688c8b72029b5045229e5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7250,
        "upload_time": "2020-11-04T21:22:49",
        "upload_time_iso_8601": "2020-11-04T21:22:49.468802Z",
        "url": "https://files.pythonhosted.org/packages/c1/f8/b679d8e89c7567575bdf82c4762b2c0aa55ca2f25c8e1b1306a2c5fe7fb9/hwaddress-0.0.1.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03a8bc66435bad16394b9e87ba50e7f0e444684f9af396db4d0785bf5c34eed6",
          "md5": "b704c66649558ea0f127a38880066e25",
          "sha256": "5c628a58720e775f42ee9d00399d0cf453e45bd6917f1ba4e37697c7a7f73a75"
        },
        "downloads": -1,
        "filename": "hwaddress-0.0.1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "b704c66649558ea0f127a38880066e25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7460,
        "upload_time": "2020-11-04T21:22:51",
        "upload_time_iso_8601": "2020-11-04T21:22:51.988952Z",
        "url": "https://files.pythonhosted.org/packages/03/a8/bc66435bad16394b9e87ba50e7f0e444684f9af396db4d0785bf5c34eed6/hwaddress-0.0.1.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "299bd2068100376b45774bef2381f4f8a2bf1d62d30a7e5c26e24478f03a637e",
          "md5": "bd94e554603d1a1e6b0cdb785e25c1b0",
          "sha256": "dbccc22656f7683865a84df650dbefe8784f45dc3c429d689095433b756a902e"
        },
        "downloads": -1,
        "filename": "hwaddress-0.0.1.dev2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd94e554603d1a1e6b0cdb785e25c1b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7251,
        "upload_time": "2020-11-04T22:08:33",
        "upload_time_iso_8601": "2020-11-04T22:08:33.529895Z",
        "url": "https://files.pythonhosted.org/packages/29/9b/d2068100376b45774bef2381f4f8a2bf1d62d30a7e5c26e24478f03a637e/hwaddress-0.0.1.dev2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02249b65d8dc30e37a25e8104951efdc16d2a80833417523bf903e0439e60cd9",
          "md5": "dc51c70ae171f72d329d9c4dab17dc2f",
          "sha256": "46d29c3055df6fd3b60212a0069f78ca67172850d994fa67f615dbc8c42b763e"
        },
        "downloads": -1,
        "filename": "hwaddress-0.0.1.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc51c70ae171f72d329d9c4dab17dc2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7427,
        "upload_time": "2020-11-04T22:08:34",
        "upload_time_iso_8601": "2020-11-04T22:08:34.931781Z",
        "url": "https://files.pythonhosted.org/packages/02/24/9b65d8dc30e37a25e8104951efdc16d2a80833417523bf903e0439e60cd9/hwaddress-0.0.1.dev2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.dev3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9895c631714c467a24d05407e76971e1b12deee14f12a7daa6adb2c5e4abe3c2",
          "md5": "6a1ab46846233d366eeb6f776ddb268e",
          "sha256": "e26aaf88355d7896a06d0e1f8ebd4a330367e883dbb1b665a8188dfa3a46e07e"
        },
        "downloads": -1,
        "filename": "hwaddress-0.0.1.dev3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a1ab46846233d366eeb6f776ddb268e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8273,
        "upload_time": "2023-03-29T20:20:05",
        "upload_time_iso_8601": "2023-03-29T20:20:05.465543Z",
        "url": "https://files.pythonhosted.org/packages/98/95/c631714c467a24d05407e76971e1b12deee14f12a7daa6adb2c5e4abe3c2/hwaddress-0.0.1.dev3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e91e8f45796d191924b2f21bfec99136400ec2f77b6cb7cacedc47d430577b02",
          "md5": "a0e2ce3253c76f4ec0b5a115a70edf98",
          "sha256": "f58696ae304e44c5d83b54254be07d4a2810847b01f9876913d288d42c005f38"
        },
        "downloads": -1,
        "filename": "hwaddress-0.0.1.dev3.tar.gz",
        "has_sig": false,
        "md5_digest": "a0e2ce3253c76f4ec0b5a115a70edf98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11806,
        "upload_time": "2023-03-29T20:20:07",
        "upload_time_iso_8601": "2023-03-29T20:20:07.473578Z",
        "url": "https://files.pythonhosted.org/packages/e9/1e/8f45796d191924b2f21bfec99136400ec2f77b6cb7cacedc47d430577b02/hwaddress-0.0.1.dev3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9895c631714c467a24d05407e76971e1b12deee14f12a7daa6adb2c5e4abe3c2",
        "md5": "6a1ab46846233d366eeb6f776ddb268e",
        "sha256": "e26aaf88355d7896a06d0e1f8ebd4a330367e883dbb1b665a8188dfa3a46e07e"
      },
      "downloads": -1,
      "filename": "hwaddress-0.0.1.dev3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6a1ab46846233d366eeb6f776ddb268e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8273,
      "upload_time": "2023-03-29T20:20:05",
      "upload_time_iso_8601": "2023-03-29T20:20:05.465543Z",
      "url": "https://files.pythonhosted.org/packages/98/95/c631714c467a24d05407e76971e1b12deee14f12a7daa6adb2c5e4abe3c2/hwaddress-0.0.1.dev3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e91e8f45796d191924b2f21bfec99136400ec2f77b6cb7cacedc47d430577b02",
        "md5": "a0e2ce3253c76f4ec0b5a115a70edf98",
        "sha256": "f58696ae304e44c5d83b54254be07d4a2810847b01f9876913d288d42c005f38"
      },
      "downloads": -1,
      "filename": "hwaddress-0.0.1.dev3.tar.gz",
      "has_sig": false,
      "md5_digest": "a0e2ce3253c76f4ec0b5a115a70edf98",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11806,
      "upload_time": "2023-03-29T20:20:07",
      "upload_time_iso_8601": "2023-03-29T20:20:07.473578Z",
      "url": "https://files.pythonhosted.org/packages/e9/1e/8f45796d191924b2f21bfec99136400ec2f77b6cb7cacedc47d430577b02/hwaddress-0.0.1.dev3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}