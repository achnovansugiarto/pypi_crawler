{
  "info": {
    "author": "Siddhesh Chavan",
    "author_email": "siddheshchavan2020@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pydatatable v1.2\n\n## Python Library to create graphical table from the data and is with auto update feature!\n\n```pydatatable``` is a Python library made to display graphical tables from the given data.\n\n![https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white)\n\n[![PyPI Latest Release](https://img.shields.io/pypi/v/pydatatable.svg)](https://pypi.org/project/pydatatable/)\n[![Package Status](https://img.shields.io/pypi/status/pydatatable.svg)](https://pypi.org/project/pydatatable/)\n[![Downloads](https://static.pepy.tech/personalized-badge/pydatatable?period=total&units=international_system&left_color=black&right_color=orange&left_text=Downloads)](https://pepy.tech/project/pydatatable)\n\n### Introduction\n\n```pydatatable``` is a Python library made to display graphical tables from given data. It can create a graphical table\nin the form of a '.html' file. This library is made by Siddhesh Chavan(me). The table can even self update itself if you\nenable it.\n\n### Installation\n\nTo install the library type: ```pip insall pydatatable``` in the command prompt.\n\n### Import Statement\n\nType ```import pydatatable``` to import it after installation.\n\n### Creating a Simple Table\n\nTo create a simple table, type:\n\n```python\nimport pydatatable as table\n\ntable1 = table.Table(location='table_test', title='Simple Table')  # Create a Table object.\nall_data = [[1, 1, 1], [2, 2, 2]]  # Define the 'all_data' list.\ntitle = ['Title1', 'Title2', 'Title3']  # Define the 'title' list.\ntable1.add_data(data=all_data, columns=title)  # Add data to the table.\ntable1.open()  # Automatically open the table.\n``` \n\nThe above program will save a '.html' file in the given location. It will open a '.html' document as shown below:\n\n![Image](https://raw.githubusercontent.com/Sid72020123/pydatatable/main/images/1.png)\n\n## The Table Class\n\nThe Table class contains many features:\n\n### Parameters:\n\nThe Table class's parameters:\n\n* ```location``` --> The path to save the table.\n* ```title``` --> The title of the table.\n* ```table_border``` --> The boder of the table in integer format.\n* ```border_color``` --> The boder colour of the table in string format like 'red', 'black', 'green', etc. and you can\n  also use hexadecimal values as '#ff0000'\n* ```cell_padding``` --> The space between the individual cell contents and the cell border. Use the value in integer\n  format.\n* ```cell_spacing``` -> The space between the cell border and the table border. Use the value in integer format.\n* ```cell_horizontal_text_align``` --> The horizontal text align of the text in each cell. Use values like 'center', '\n  left', 'right'.\n* ```cell_vertical_text_align``` --> The vertical text align of the text in each cell. Use values like 'middle', '\n  top', 'bottom'.\n* ```column_bg_color``` --> The background colour of the columns in the table. Use any color or the hexadecimal value in\n  string format.\n* ```data_bg_color``` --> The background colour of the data in the table. Use any color or the hexadecimal value in\n  string format.\n* ```column_text_color``` --> The text colour of the text in columns.\n* ```data_text_color``` --> The text colour of the text in the data rows.\n* ```print_log``` --> Set it to ```True``` if you want the table making log to be printed out on the console.\n* ```font``` --> The font of the table.\n\n#### Use above parameters like:\n\n```python\nimport pydatatable as table\n\ntable1 = table.Table(location='test_table', title='Table', table_border=5, border_color='Black', cell_padding=3,\n                     cell_spacing=0,\n                     cell_horizontal_text_align='center', cell_vertical_text_align='middle', column_bg_color='Yellow',\n                     data_bg_color='White', column_text_color='Black', data_text_color='Black',\n                     print_log=False)  # Create a Table object.\nall_data = [[1, 1, 1], [2, 2, 2]]  # Define the 'all_data' list.\ntitle = ['Title1', 'Title2', 'Title3']  # Define the 'title' list.\ntable1.add_data(data=all_data, columns=title)  # Add data to the table.\ntable1.open()  # Automatically open the table.\n```\n\n### Functions:\n\n#### 1. add_data(data, columns)\n\n> Function to add the data to the table.\n\n* The ```data``` should have a nested list with all the data. For example, ```data=[[1,1,1],[2,2,2]]```\n* The ```columns``` should have a list of all columns to be showed in the table. For\n  example, ```columns=['Title1','Title2','Title3']```\n\n**The length of the nested list, data, should be equal to the data in the columns as shown in the above example.**\n\n#### 2. enable_auto_update(time=5000)\n\n> Function to enable auto update the table.\n\n* The ```time``` should be in milliseconds and integer format. It is the time after which the table is updated.\n\n#### 3.disable_auto_update()\n\n> Function to disable auto update.\n\n#### 4.update_data(data, append=False, wait=True)\n\n> Function to update the data. **Remember to call this function in a loop**\n\n* The ```data``` is the nested list of the data to be updated.\n* If you want to append the new data to the previous data then set append to ```True``` else ```False```\n* If you want your program to wait for the given auto update time and run again then the set ```wait``` to ```True```,\n  if not then ```False```\n\n**For Example,**\n\n```python\nimport pydatatable as table\nimport random\n\ntable1 = table.Table('table')\ntable1.add_data([[0, 0, 0]], ['1', '2', '3'])\ntable1.enable_auto_update()\ntable1.open()\n\ni = 3\nwhile True:\n    one = random.randint(0, 99999)\n    two = random.randint(0, 99999)\n    three = random.randint(0, 99999)\n    table1.update_data(data=[[one, two, three]], append=True, wait=True)\n    i += 1\n```\n\nThe above program will create and update the table by random values. **Make sure to call the 'enable_auto_update()'\nfunction before the 'open()' function.**\n\n#### 5.open()\n\n> Function to open the saved table automatically.\n\n#### 6.print_settings()\n\n> Function to print the table's settings in the console.\n\n### Creating Multiple Tables on one page\n\nTo create multiple tables on one page, use the ```MultipleTables``` class. For Example,\n\n```python\nimport pydatatable as table\nimport random\nimport time\n\ntable1 = table.Table('table')\ntable1.add_data([[0, 0, 0]], ['1', '2', '3'])\ntable1.enable_auto_update()\n\ntable2 = table.Table('table2')\ntable2.add_data([[0, 0, 0]], ['1', '2', '3'])\ntable2.enable_auto_update()\n\nmultiple_table = table.MultipleTables('chart', 'All Types', height=600, width=700)\nmultiple_table.add_table(['table.html', 'table2.html'])\nmultiple_table.open()\n\ni = 3\nwhile True:\n    one = random.randint(0, 99999)\n    two = random.randint(0, 99999)\n    three = random.randint(0, 99999)\n    table1.update_data(data=[[one, two, three]], append=True, wait=False)\n    table2.update_data(data=[[one, two, three]], append=True, wait=False)\n    time.sleep(5)\n    i += 1\n```\n\n**Use ```wait=False``` if you want to update both the tables at the same time but also use ```time.sleep()``` function\notherwise the table will not be displayed. Check the above program.** The above output is:\n![Image](https://github.com/Sid72020123/pydatatable/blob/main/images/2.png?raw=true)\n\n## The MultipleTables Class\n\nThe MultipleTables class contains many features:\n\n### Parameters:\n\n* ```location``` --> The location of the '.html' page to be saved.\n* ```title``` --> The title of group of tables.\n* ```height``` --> The height of all frames.\n* ```width``` --> The width of all frames.\n* ```frame_border``` --> The frame border of all frames.\n* ```border``` --> The border width of all frames.\n* ```border_color``` --> The border color of all frames.\n\n### Functions:\n\n#### 1. add_table(table_locations, frame_value=[], frame_size=[])\n\n> Function to add the saved tables on one page.\n\n* ```table_locations``` --> The list of all the line's saved locations to be added on one page. The elements should be\n  separated by commas and should be in 'string' format. Please give the correct location along with the extension. The\n  order of charts in the page is same as the order of files given in the list. You can change the values in the list to\n  add the charts accordingly.\n* ```frame_value``` --> If you want to change the size of one table in a page then give the table's list index according\n  to the 'table_locations' list and use the frame_size parameter to set a different size for that specified table.\n* ```frame_size``` --> If you pass the 'frame_size' parameter, then give the size of that table in a 2-d list. First is\n  height and then width.\n\n#### 2. open()\n\n> Function to open the saved multiple charts.\n\n#### 3. print_settings()\n\n> Function to print the table settings.\n\n## Thank you for installing this module!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sid72020123/pydatatable",
    "keywords": "table-making-module",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydatatable",
    "package_url": "https://pypi.org/project/pydatatable/",
    "platform": "",
    "project_url": "https://pypi.org/project/pydatatable/",
    "project_urls": {
      "Homepage": "https://github.com/Sid72020123/pydatatable"
    },
    "release_url": "https://pypi.org/project/pydatatable/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python library made to display graphical tables from the given data.",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10938901,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c80dfca344a2739e996f07fb57274750759b7d102c8ce6e8b337dacdc6629f1",
          "md5": "6a093b8dcdd7fc7afd45a4a817783ce5",
          "sha256": "88425f62df33238c4a145ce47f0cf117992c1e24787be99831be1fea664c4404"
        },
        "downloads": -1,
        "filename": "pydatatable-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6a093b8dcdd7fc7afd45a4a817783ce5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7497,
        "upload_time": "2021-06-03T10:37:20",
        "upload_time_iso_8601": "2021-06-03T10:37:20.918798Z",
        "url": "https://files.pythonhosted.org/packages/6c/80/dfca344a2739e996f07fb57274750759b7d102c8ce6e8b337dacdc6629f1/pydatatable-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bc71fff2a6852715cd0059d6490f2aa43f3c9a8c54c270a5e993da580fb8992",
          "md5": "46e1307b4c156f167263e98ca3433aea",
          "sha256": "c72133fa252b57d0a65965dd111aede38ee13b024a5d16f0b9c6906675f6abbf"
        },
        "downloads": -1,
        "filename": "pydatatable-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "46e1307b4c156f167263e98ca3433aea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7485,
        "upload_time": "2021-06-03T10:40:00",
        "upload_time_iso_8601": "2021-06-03T10:40:00.703199Z",
        "url": "https://files.pythonhosted.org/packages/8b/c7/1fff2a6852715cd0059d6490f2aa43f3c9a8c54c270a5e993da580fb8992/pydatatable-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff65778d496074bf98ea590eee3b801226973f60976ed81aab7289f2f6926f8b",
          "md5": "9d757e1b61a8234ded2396ef2864d834",
          "sha256": "afa1b4243538dd5a6ccc0628ed014c757f0f5bc2aa0046f845b40ff0d4cb4752"
        },
        "downloads": -1,
        "filename": "pydatatable-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9d757e1b61a8234ded2396ef2864d834",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7457,
        "upload_time": "2021-06-05T09:40:36",
        "upload_time_iso_8601": "2021-06-05T09:40:36.309200Z",
        "url": "https://files.pythonhosted.org/packages/ff/65/778d496074bf98ea590eee3b801226973f60976ed81aab7289f2f6926f8b/pydatatable-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a84b78a0a6d0836504d173b0001b9da3708cb51c4fc93ff31d30c12418a03347",
          "md5": "174847f8b4b290908abd6b2cd1b4b3ef",
          "sha256": "301fe2f8729165cf834b34a8416ebbfa18a3e1c4cbc1bb94a68106edd112e61f"
        },
        "downloads": -1,
        "filename": "pydatatable-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "174847f8b4b290908abd6b2cd1b4b3ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8718,
        "upload_time": "2021-07-18T11:32:26",
        "upload_time_iso_8601": "2021-07-18T11:32:26.609536Z",
        "url": "https://files.pythonhosted.org/packages/a8/4b/78a0a6d0836504d173b0001b9da3708cb51c4fc93ff31d30c12418a03347/pydatatable-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a84b78a0a6d0836504d173b0001b9da3708cb51c4fc93ff31d30c12418a03347",
        "md5": "174847f8b4b290908abd6b2cd1b4b3ef",
        "sha256": "301fe2f8729165cf834b34a8416ebbfa18a3e1c4cbc1bb94a68106edd112e61f"
      },
      "downloads": -1,
      "filename": "pydatatable-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "174847f8b4b290908abd6b2cd1b4b3ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8718,
      "upload_time": "2021-07-18T11:32:26",
      "upload_time_iso_8601": "2021-07-18T11:32:26.609536Z",
      "url": "https://files.pythonhosted.org/packages/a8/4b/78a0a6d0836504d173b0001b9da3708cb51c4fc93ff31d30c12418a03347/pydatatable-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}