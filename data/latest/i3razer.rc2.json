{
  "info": {
    "author": "Leo Fahrbach",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "i3 - razer\n==========\n\n*Visualize hotkeys on a Razer keyboard*\n\nA tool to show possible hotkeys or commands (e.g. i3 or vim commands) on a Razer keyboard with rgb lighting. \nIt is highly customizable: select which key is lit in which color on which action.\nI encourage to write your own configuration to match your hotkeys.\n\nInstallation\n============\n\n**Disclaimer** *This program only runs on Linux, depends on the linux openrazer client and X server*\n\nThe openrazer driver can be installed from [here](https://openrazer.github.io/#download), \njust select your OS and follow the instructions.\n\nTo install i3razer run:\n```\n$ pip install i3razer\n```\nIf installed with privileged rights the executable `i3razer` will already be in the path.\nOtherwise it can be found in `$HOME/.local/bin`\n\nUsage\n=====\n\n```\n$ i3razer --config CONFIG\n```\nThis runs i3razer with the given config file. Look [here](#configuration) for the configuration.\nIf the config is not given the [examle_config](#example-config) will be used.\n\n```\nexec --no-startup-id i3razer --config CONFIG\n```\nAdd this line to your *i3-config* to start the visualization on i3 startup.\n\nContribute\n==========\n\nFind and report bugs on [github](https://github.com/leofah/i3razer).\n\n### Map your Layout\nRun `i3razer --map` to map your keyboard Layout. Consider opening a pull request with the new Layout.\n\nPlanned Features\n================\n\n- modes can have a base mode to inherit from. Useful to combine modes, e.g. mode for num\\_lock on / off, \n    but still same commands\n- switch mode stack: possibility to return to the previous mode and not to a defined mode (call stack instead of goto)\n- dbus interface to change layout, current\\_mode, reload config and a program to connect to this interface\n\nConfiguration\n=============\n\nWith the configuration file the user can set the colors of keys and add keybindings to change the colors.\nThe file format is yaml. It consists of the sections [colors](#colors), [keys](#keys), [color\\_schemes](#color-schemes), [modes](#modes)\n\nSemantic Overview:\n- Colors: define custom colors, e.g. `my_red: '0xe01010'`\n- Keys: define set of keys for short access, e.g. `numbers: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9`\n- Color schemes: A color scheme specifies the look of the keyboard. Keys can be assigned to colors, or a color effect can be set\n- Modes: Modes define, when to show which color scheme. Color schemes can be shown, depending on which keys are pressed.\n    Modes can switch to another mode to change keys and color schemes\n    \n[Example Config](#example-config)\n\nColors\n------\n\nThe *colors* sets values to their color name.\nThe definition is just `color_name: '0xrrggbb'`, where *color_ name* can be any value except starting with '0x'. \nMake sure yaml interprets *0xrrggbb* as string.\n\nDefault colors example:\n```yaml\ncolors:\n  black: '0x000000'\n  red:   '0xff0000'\n  green: '0x00ff00'\n  blue:  '0x0000ff'\n```\n\nKeys\n----\n\nThe *keys* section defines sets of keys.\nWhen you have multiple color scheme which wants to set e.g. all numbers to the same color, the number keys can be predefined here.\nThe definition is `keyset_name: key_array`. For the name all values can be used except the reserved ones.\n\n### Reserved keyset names\n**all**: Predefined keyset which contains all keys of the keyboard  \n**type, name, default, inherit, switch_mode, scheme**: These names have a predefined usage in the configuration.\n\n### Key array definition\nA keyarray defines multiple keys. *key_name* or *keyset_name* can be included in an array:\n`key1, keyset, key2` The names are separated by ','. In a keyset definition newlines can be included.\n\n```yaml\nkeys:\n  prime_numbers: 2, 3, 5, 7\n  numbers: 0, 1, 4, 6, 8, 9, prime_numbers # contains all numbers (0-9)\n  arrows: up, left, down, right\n  new_line: # newlines could improve readability\n    shift_l,\n    shift_r,\n    control_l,\n    control_r\n  all: a # built in keyset, which has all keys of the keyboard\n```\n\nColor Scheme\n-------------\n\nA color scheme describes the look of the keyboard, which keys are lit in which color or what effect to play.\nWhich color scheme is drawn on the keyboard is determined in the *modes* section.\nThe default use case of a color scheme is to assign colors to keys: `keys: color`.\nKeys is a [key array](#key-array-definition) (no newlines allowed) and color is either direct an hexstring '0xrrggbb' \nof a color defined in the [*colors*](#colors) section.\n```yaml\ncolor_schemes:\n  my_scheme:\n    all: green  # sets all keys to green\n    numbers: '0xffffff' # the number keys are white\n    w, a, s, d: red \n```\nIf a key is present in multiple key arrays, the assigned color will be the one defined latest in the file.\n```yaml\n# this is directly the scheme definition\noverride_scheme:\n  a: red\n  all: black # overrides the previous definition for 'a' to be red and 'a' will be shown black\n``` \n\n### Advanced color scheme configuration\n*color scheme inheritance* and *effect definition*\n\n#### Inheritance\nMaybe multiple color schemes wants to set the same colors to many keys, as the schemes are very similar.\nThere is no need for a redundant color scheme definition,\nas it is possible to inherit from another color scheme:`inherit: color_scheme`.\nThis adds the color information from the inherited scheme to this scheme.\n\n```yaml\ndefault:\n  all: green\n  other_keys: yellow\n\ngaming:\n  inherit: default\n  w, a, s, d: red\n  \nsome_scheme:\n  numbers: orange\n  inherit: default # this overrides the numbers defined previously\n```\n#### Effect\n\nTo show an effect on the keyboard a color scheme *type* must be set: `type: effect`.\nPossible types are: `static, breath, reactive, ripple, spectrum, starlight, wave right, wave left`\nThe *static* type is the default type and does not need to be specified. Each key can be assigned a static color.\nAll other types are keyboard build in effects, they can take a color or time, dependant on the keyboard or effect.\nWith these types (except *static*) inheritance is not possible,\nas the definitions are quite simple and one could only inherit from the same type.\nColors of the effect are defined with `color1: white`, up to three colors can be specified.\nIf only one color is needed for the effect `color: white` will suffice.\n\n##### Colors per effect:\nEffect | Number of colors\n------|------\nbreath | up to three colors\nreactive | exactly one color\nripple | up to one color\nstarlight | up to two colors\nspectrum, wave {right / left} | no color \n\nIf no color is given the effect is always executed with a random color\n\n##### Effect times\nSome effects take a timing value: `time: value`. If no value is given, the default is used.\n\nEffect | Time values, (default) | Description\n--- | --- | ---\nreactive | '500', ('1000'), '1500', '2000' | milliseconds the pressed key is lit\nstarlight | fast, (normal), slow | speed of starlight blinking\n\nAll other effects have no time option.\n\n#### Example\n```yaml\neffect_scheme:\n  type: reactive \n  color1: green # or just color: green\n  time: '1000'\n\neffect_stars:\n  type: starlight\n  color1: blue\n  color2: green\n  time: slow\n```\n\nModes\n-----\n\nA Mode defines which color scheme gets drawn on the keyboard. The scheme depends on the currently pressed keys.\nPossible hotkeys can be visualized on the keyboard, e.g. if the super key is pressed.\nHowever sometimes the available hotkeys change, depended on what you do on your computer.\nMany modes can be defined with different keys to show color schemes, but there needs to be the starting mode `default`.\nSwitching from one mode to another is done with hotkeys, defined in the mode.\n\nEach mode must have a default color scheme, which will be drawn if no key is pressed: `scheme: default_scheme`. \nDisplaying other color schemes is done by assigning them to hotkeys: `key_combinations: color_scheme`.\n\n### Key Combinations\nKey combinations are an array of combinations, delimited by ','.\nA combination can be a single key, or multiple keys delimited by '+':  `key1 + key2`\nSuch a combination is pressed if all the keys in the combination are pressed.\nThe combination  with *nothing*: `nothing + key1 + key2` holds only if exactly key1 and key2 are pressed, \nno other key is allowed to be pressed.\n\nIf one of the combinations of the array is pressed, the whole combination array is fulfilled and the \ncorresponding action applied.\nIf multiple combination arrays have a matching combination, the value of array defined first gets applied.\n\n```yaml\nmodes:\n  default: # default mode must exist, this is the start mode\n    scheme: default \n    super_l + shift_l: some_scheme\n    super_l: mod_scheme # also holds if super+shift is pressed, but is defined later \n    nothing + control_r, numbers: scheme # more complicated combination\n```\n\n#### Switch modes\nSwitching the mode gives a new default color scheme and new hotkeys. It is defined in a mode as follows:\n```yaml\nswitch_mode:\n  key_combinations: next_mode\n```\n#### Example\n\n```yaml\nmodes:\n  default:\n    scheme: color/default\n    super_l: super_hotkeys # light key r\n    # more hotkeys\n    switch_mode:\n      nothing + super_l + r: mode/resize\n\n  mode/resize:\n    scheme: color/resize\n    # no hotkeys to display\n    switch_mode:\n      nothing + escape, nothing + return: default # switch back to default mode with escape or return\n```\n\n### Example config\nHere is the default [config.yaml](i3razer/example_config.yaml) which hotkeys are based on the default [i3](https://i3wm.org/) configuration.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/leofah/i3razer",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "i3razer",
    "package_url": "https://pypi.org/project/i3razer/",
    "platform": null,
    "project_url": "https://pypi.org/project/i3razer/",
    "project_urls": {
      "Homepage": "https://github.com/leofah/i3razer"
    },
    "release_url": "https://pypi.org/project/i3razer/0.2/",
    "requires_dist": [
      "xlib (>=0.21)",
      "PyYAML (>=5.3.1)"
    ],
    "requires_python": ">=3",
    "summary": "Shortcut/Command visualization on razer keyboards via openrazer",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13595645,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0cfafe0bbc6496a3a1481cf47d4283008afae9c9d3d0f80315f269ada5c0deb",
          "md5": "818d8f814d6ab1d959eb56af4b42e032",
          "sha256": "6dbbd96ea7374f7000afea82110503bf79066cc4f6b4be4670544587a168665e"
        },
        "downloads": -1,
        "filename": "i3razer-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "818d8f814d6ab1d959eb56af4b42e032",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 23606,
        "upload_time": "2020-05-07T17:37:22",
        "upload_time_iso_8601": "2020-05-07T17:37:22.987879Z",
        "url": "https://files.pythonhosted.org/packages/c0/cf/afe0bbc6496a3a1481cf47d4283008afae9c9d3d0f80315f269ada5c0deb/i3razer-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83715788c5d6e1fc9e82052ae381b7f2556d589c4e315d2312decc3481f95845",
          "md5": "c75e6c7931fd18223a99f6e4f01e6ea4",
          "sha256": "effa3e18494e53d5918e9c420494bf0af6db9bc04fb3997dacdcc2521e51b37e"
        },
        "downloads": -1,
        "filename": "i3razer-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c75e6c7931fd18223a99f6e4f01e6ea4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 23525,
        "upload_time": "2022-04-22T21:56:07",
        "upload_time_iso_8601": "2022-04-22T21:56:07.853406Z",
        "url": "https://files.pythonhosted.org/packages/83/71/5788c5d6e1fc9e82052ae381b7f2556d589c4e315d2312decc3481f95845/i3razer-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9dfb40fc4bc301fd86c880ab6e9624cb5d4ff3f48e52c5322702737e6d461cf",
          "md5": "446ac943d85ed9c85c0bfeb21edc190b",
          "sha256": "378ad59d7091bce7d7d95c5b0557e15392031b99e9fec2ef000876e1f9bc9121"
        },
        "downloads": -1,
        "filename": "i3razer-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "446ac943d85ed9c85c0bfeb21edc190b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 25057,
        "upload_time": "2022-04-22T21:56:11",
        "upload_time_iso_8601": "2022-04-22T21:56:11.204449Z",
        "url": "https://files.pythonhosted.org/packages/f9/df/b40fc4bc301fd86c880ab6e9624cb5d4ff3f48e52c5322702737e6d461cf/i3razer-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83715788c5d6e1fc9e82052ae381b7f2556d589c4e315d2312decc3481f95845",
        "md5": "c75e6c7931fd18223a99f6e4f01e6ea4",
        "sha256": "effa3e18494e53d5918e9c420494bf0af6db9bc04fb3997dacdcc2521e51b37e"
      },
      "downloads": -1,
      "filename": "i3razer-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c75e6c7931fd18223a99f6e4f01e6ea4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 23525,
      "upload_time": "2022-04-22T21:56:07",
      "upload_time_iso_8601": "2022-04-22T21:56:07.853406Z",
      "url": "https://files.pythonhosted.org/packages/83/71/5788c5d6e1fc9e82052ae381b7f2556d589c4e315d2312decc3481f95845/i3razer-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9dfb40fc4bc301fd86c880ab6e9624cb5d4ff3f48e52c5322702737e6d461cf",
        "md5": "446ac943d85ed9c85c0bfeb21edc190b",
        "sha256": "378ad59d7091bce7d7d95c5b0557e15392031b99e9fec2ef000876e1f9bc9121"
      },
      "downloads": -1,
      "filename": "i3razer-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "446ac943d85ed9c85c0bfeb21edc190b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 25057,
      "upload_time": "2022-04-22T21:56:11",
      "upload_time_iso_8601": "2022-04-22T21:56:11.204449Z",
      "url": "https://files.pythonhosted.org/packages/f9/df/b40fc4bc301fd86c880ab6e9624cb5d4ff3f48e52c5322702737e6d461cf/i3razer-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}