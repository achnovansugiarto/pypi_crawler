{
  "info": {
    "author": "Guy Willett",
    "author_email": "<guy@chamsoft.co>",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django Searchable Encrypted Fields\nThis package is for you if you would like to encrypt model field data \"in app\" - ie before it is sent to the database.\n\n**Why another encrypted field package?**\n\n1. We use AES-256 encryption with GCM mode (via the Pycryptodome library).\n2. Encryption keys never leave the app.\n3. It is easy to generate appropriate encryption keys with `secrets.token_hex(32)` from the standard library.\n4. You can make 'exact' search lookups when also using the SearchField.\n\n## Install & Setup\n```shell\n$ pip install django-searchable-encrypted-fields\n```\n```python\n# in settings.py\nINSTALLED_APPS += [\"encrypted_fields\"]\n\n# A list of hex-encoded 32 byte keys\n# You only need one unless/until rotating keys\nFIELD_ENCRYPTION_KEYS = [\n    \"f164ec6bd6fbc4aef5647abc15199da0f9badcc1d2127bde2087ae0d794a9a0b\"\n]\n```\n\n## Intro\nThis package provides two types of model field for Django.\n1. A series of **EncryptedField** classes which can be used by themselves and work just like their regular Django counterparts. Contents are transparently encrypted/decrypted.\n2. A **SearchField** which can be used in conjunction with any EncryptedField. Values are concatentaed with a `hash_key` and then hashed with SHA256 before storing in a separate field. This means 'exact' searches can be performed.\n\nThis is probably best demonstrated by example:\n\n## Using a stand-alone EncryptedField\n```python\nfrom encrypted_fields import fields\n\nclass Person(models.Model):\n    favorite_number = fields.EncryptedIntegerField(help_text=\"Your favorite number.\")\n```\nYou can use all the usual field arguments and add validators as normal.\nNote, however, that primary_key, unique and db_index are not supported because they do not make sense for encrypted data.\n### Migrations\nAlways add a new EncryptedField and do a data-migration, rather than alter an existing regular Django model field.\nSee the `encrypted_fields_test` app for an example.\n### Included EncryptedField classes\nThe following are included:\n```python\n\"EncryptedFieldMixin\",\n\"EncryptedTextField\",\n\"EncryptedCharField\",\n\"EncryptedEmailField\",\n\"EncryptedIntegerField\",\n\"EncryptedDateField\",\n\"EncryptedDateTimeField\",\n\"EncryptedBigIntegerField\",\n\"EncryptedPositiveIntegerField\",\n\"EncryptedPositiveSmallIntegerField\",\n\"EncryptedSmallIntegerField\",\n```\nNote that, although untested, you should be able to extend other regular Django model field classes like this:\n```python\nclass EncryptedIPAddressField(EncryptedFieldMixin, models.GenericIPAddressField):\n    pass\n```\n\n## Using a SearchField along with an EncryptedField\n### Philosophy\nThe SearchField is responsible for:\n1. Providing the input for its EncryptedField\n2. Displaying (returning) the EncryptedField's value\n3. Storing the searchable hashed version of the input\n\nThe EncryptedField is the \"real\" field and so should be the appropriate field type for the expected input. It does all the under-the-hood things you would expect, eg:\n* Providing validation/validators for the input\n* Converting the input and database values to the appropriate python object\n* Encryption/decryption\n\n### Example usage\n```python\nclass Person(models.Model):\n    _name_data = fields.EncryptedCharField(max_length=50, default=\"\", null=True/False)\n    name = fields.SearchField(hash_key=\"f164ec6bd...794a9a0b\", encrypted_field_name=\"_name_data\")\n    favorite_number = fields.EncryptedIntegerField()\n    city = models.CharField(max_length=255) # regular Django model field\n```\nYou can then use it like:\n```python\n# \"Jo\" is hashed and stored in 'name' as well as symmetrically encrypted and stored in '_name_data'\nPerson.objects.create(name=\"Jo\", favorite_number=7, city=\"London\")\nperson = Person.objects.get(name=\"Jo\")\nassert person.name == \"Jo\"\nassert person.favorite_number == 7\n\nperson = Person.objects.get(city=\"London\")\nassert person.name == \"Jo\" . # the data is taken from '_name_data', which decrypts it first.\n```\nYou can safely update like this:\n```python\nperson.name = \"Simon\"\nperson.save()\n```\nBut when using `update()` you need to provide the value to both fields:\n```python\nPerson.objects.filter(name=\"Jo\").update(name=\"Bob\", _name_data=\"Bob\")\n```\n### Please note:\nA SearchField inherits the validators, default value and default formfield (widget) from its associated EncryptedField. So:\n\n1. Do not add validators (they will be ignored), add them to the associated EncryptedField instead.\n2. Use `null=`, `blank=` and `default=` on the EncryptedField, not the SearchField.\n3. Do not include the EncryptedField in forms, only include the SearchField.\n4. Typically you should avoid `editable=False` in the EncryptedField - it prevents validation.\n5. You can override the SearchField widget in a `ModelForm` as usual (see the `encrypted_fields_test` app).\n6. By convention, declare the EncryptedField *before* the SearchField in your Model.\n\n**Note** Although unique validation (and unique constraints at the database level) for an EncryptedField makes little sense, it is possible to add `unique=True` to a SearchField.\n\nAn example of when this makes sense is in a custom user model, where the `username` field is replaced with an `EncryptedCharField` and `SearchField`. Please see the custom user model in `encrypted_fields_test.models` and its tests for an example.\n\nPlease let us know if you have problems when doing this.\n## Migrations: Add Search/EncryptedFields to your model, don't alter existing fields\nYou are encouraged to look at the demo migrations in the `encrypted_fields_test` app.\n\n**Stand alone EncryptedFields:** \n\nBe careful not to change/alter a pre-existing regular django field to be an\nEncryptedField. The data for existing rows will be unencrypted in the database and\nappear 'corrupted' when trying to decrypt/fetch it.\nInstead, add the new EncryptedField to the model and do a data-migration\nto transfer data from the old field.\n\n**SearchField with EncryptedField:**\n\nThe same goes for SearchFields: add the new SearchField and new Encrypted field to the model. Then do a data-migration to transfer data from the old field to the SearchField (the SearchField will populate the new EncryptedField automatically).\n\n**IMPORTANT!** Never add a SearchField and point it to an **existing** EncryptedField, or your SearchField will have the wrong value, and you might lose all your data! How? Why? When adding a new field to a model, Django will update each existing row's new field to have the default value. Note that the default value might be `None` or `\"\"` even if `default=` is not defined in your field. If the new field is a SearchField then it will be saved with the EncryptedField's default value. This is almost certainly not what you want, even if you did define a default for it.\n## Generating Encryption Keys\nYou can use `secrets` from the standard library. It will print appropriate hex-encoded keys to the terminal, ready to be used in `settings.FIELD_ENCRYPTION_KEYS` or as a hash_key for a SearchField:\n```shell\n$ python manage.py shell\n>>> import secrets\n>>> secrets.token_hex(32)\n```\nNote: Thanks to Andrew Mendoza for the suggestion.\n\nNote: encryption keys **must** be hex encoded and 32 bytes\n\n**Important**: use different hash_key values for each SearchField and make sure they are different from any keys in `settings.FIELD_ENCRYPTION_KEYS`.\n## Rotating Encryption Keys\nIf you want to rotate the encryption key just prepend `settings.FIELD_ENCRYPTION_KEYS` with a new key. This new key (the first in the list) will be used for encrypting/decrypting all data. If decrypting data fails (because it was encrypted with an older key), each key in the list is tried.\nA model instance will start using the new encryption key the next time they are accessed.\n\nYou can do a data-migration, simply fetching and saving all objects, to force a complete rotation to the new encryption key.\nSee the `encrypted_fields_test` app for an example.\n\nBe sure to keep all old encryption keys in the list until you are certain all objects have rotated to the new key.\n## Compatability\n`django-searchable-encrypted-fields` is tested with Django(3.2, 4.0, 4.1) on Python(3.8, 3.9) using SQLite and PostgreSQL (11 and 12).\n\nTest coverage is at 96%.\n\n## More on testing\nPlease see the `encrypted_fields_test` app (in the gitlab repo) for some example admin site and model form implementations. Just run `pip install -r requirements.txt`, `python manage.py migrate` and `python manage.py runserver` to get started using SQLite.\n\nThere is also a basic DjangoRestFramework implementation with a `ModelSerializer` and `ModelViewSet`.\n\nIn our test app, the `User` model uses a SearchField for the username. This means that when creating a superuser you must provide the `--username` argument: `python manage.py createsuperuser --username bob` to avoid an error.\n\nFinal note of interest: the tox test suite runs `python manage.py makemigrations` for every environment with an empty initial migration directory. This helps ensure the test app will work as expected in all tested environments.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ucoran-saas/django-encrypted-searchable-fields/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Kenny Lajara",
    "maintainer_email": "",
    "name": "django-encrypted-searchable-fields",
    "package_url": "https://pypi.org/project/django-encrypted-searchable-fields/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-encrypted-searchable-fields/",
    "project_urls": {
      "Homepage": "https://github.com/ucoran-saas/django-encrypted-searchable-fields/"
    },
    "release_url": "https://pypi.org/project/django-encrypted-searchable-fields/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A fork of django-searchable-encrypted-fields with a bug fix.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14912506,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8ce2ddf47ad778bab78d047575e2450c9531637976a618c17cdea5b378d401f",
          "md5": "b5d06c947b0fa803a5d16994dd214b0f",
          "sha256": "27a5c4a5003a92d1c8f737f3849b9b7aec7831247f9c8f40b4a52c7e387f5de6"
        },
        "downloads": -1,
        "filename": "django-encrypted-searchable-fields-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5d06c947b0fa803a5d16994dd214b0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10099,
        "upload_time": "2022-08-28T02:46:13",
        "upload_time_iso_8601": "2022-08-28T02:46:13.009437Z",
        "url": "https://files.pythonhosted.org/packages/a8/ce/2ddf47ad778bab78d047575e2450c9531637976a618c17cdea5b378d401f/django-encrypted-searchable-fields-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8ce2ddf47ad778bab78d047575e2450c9531637976a618c17cdea5b378d401f",
        "md5": "b5d06c947b0fa803a5d16994dd214b0f",
        "sha256": "27a5c4a5003a92d1c8f737f3849b9b7aec7831247f9c8f40b4a52c7e387f5de6"
      },
      "downloads": -1,
      "filename": "django-encrypted-searchable-fields-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b5d06c947b0fa803a5d16994dd214b0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10099,
      "upload_time": "2022-08-28T02:46:13",
      "upload_time_iso_8601": "2022-08-28T02:46:13.009437Z",
      "url": "https://files.pythonhosted.org/packages/a8/ce/2ddf47ad778bab78d047575e2450c9531637976a618c17cdea5b378d401f/django-encrypted-searchable-fields-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}