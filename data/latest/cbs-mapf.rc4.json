{
  "info": {
    "author": "Haoran Peng",
    "author_email": "gavinsweden@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Multi-Agent Path Finding ![](https://img.shields.io/pypi/v/cbs-mapf) ![](https://img.shields.io/badge/python-%3E%3D3.5-blue) ![](https://img.shields.io/github/license/GavinPHR/Multi-Agent-Path-Finding) \n\nAnonymous Multi-Agent Path Finding (MAPF) with Conflict-Based Search (CBS) and Space-Time A* (STA*). I strongly recommend you to also check out my [Space-Time A*](https://github.com/GavinPHR/Space-Time-AStar) repository for a complete picture of how this package works.\n\n - [Visualization](#visualization)\n - [Installation](#installation)\n - [Usage](#usage)\n - [Theoretical Background](#theoretical-background)\n - [Contributing](#contributing)\n - [License](#license)\n\n## Visualization \n\n4 agents at the 4 corners of the map trying to align themselves in the middle:\n\n<p align=\"center\">\n  <img width=\"500\" src=\"https://raw.githubusercontent.com/GavinPHR/Multi-Agent-Path-Finding/master/fig/visualization1.gif\">\n</p>\n\n16 agents in a circlular layout trying to form a grid layout:\n\n<p align=\"center\">\n  <img width=\"600\" src=\"https://raw.githubusercontent.com/GavinPHR/Multi-Agent-Path-Finding/master/fig/visualization2.gif\">\n</p>\n\nThe above visualizations are generated using `visualizer.py` and scenario yaml files in the [visualization folder](https://github.com/GavinPHR/Multi-Agent-Path-Finding/tree/master/visualization). Once the package (and other [requirements](https://github.com/GavinPHR/Multi-Agent-Path-Finding/blob/master/visualization/requirements.txt)) is installed, you can generate them like so:\n\n```bash\npython3 visualizer.py scenario1.yaml\npython3 visualizer.py scenario2.yaml\n```\n\n## Installation\n\nThe package is named `cbs-mapf` and listed on [PyPI](https://pypi.org/project/cbs-mapf/). You can use the pip to install:\n\n```bash\npip3 install cbs-mapf\n```\n\nThis will also install its sister package `space-time-astar`, also on [GitHub](https://github.com/GavinPHR/Space-Time-AStar) and [PyPI](https://pypi.org/project/space-time-astar/).\n\n## Usage\n\n### Import Planner\n\n```python\nfrom cbs_mapf.planner import Planner\n```\n\n### Constructor Parameters\n```python\nPlanner(grid_size: int, robot_radius: int, static_obstacles: List[Tuple[int, int]])\n```\n- **grid_size**: int - each grid will be square with side length **grid_size**. \n- **robot_radius**: int - agents are assumed to be circles with radius being **robot_radius**.\n- **static_obstacles**: List[Tuple[int, int]] - A list of coordinates specifying the static obstacles in the map.\n\nIt is important that **grid_size** is not too small and **static_obstacles** does not contain too many coordinates, otherwise the performance will severely deteriorate. What is 'too many' you might ask? It depends on your requirements.\n\n### Find Path\nUse `Planner`'s `plan()` method:\n```\nplan(starts: List[Tuple[int, int]],\n     goals: List[Tuple[int, int]],\n     assign:Callable = greedy_assign,\n     max_iter:int = 200,\n     low_level_max_iter:int = 100,\n     max_process:int = 10,\n     debug:bool = False) -> np.ndarray\n```\n#### Parameters:\n- **starts**: List[Tuple[int, int]] - A list of start coordinates.\n- **goals**: List[Tuple[int, int]] - A list of goal coordinates.\n- **assign**: Callable, *optional* - A function that assign each start coordinate to a goal coordinate. The default assignment yields a minimum cost with repesct to straight line euclidean distances, see [Hungarian Algorithm](https://en.wikipedia.org/wiki/Hungarian_algorithm).\n- **max_iter**: int, *optional* - Max iterations of the high-level CBS algorithm. Default to `200`. \n- **low_level_max_iter**: int, *optional* - Max iterations of the low-level STA* algorithm. Default to `100`.\n- **max_process**: int, *optional* - Maximum number of processes to spawn. Default to `10`.\n- **debug**: bool, *optional* - Prints some debug message. Default to `False`.\n\nThe size of **starts** and **goals** must be equal. \n\nThe **assign** function returns a list of `Agent`, see `agent.py` for more details.\n\n#### Return:\nA `numpy.ndaarray` with shape `(N, L, 2)` with `N` being the number of agents (i.e. # of start coordinates) and `L` being the length of the path. \n\nTo get the path of the first agent (i.e. the agent with the first start coordinates in `starts`), simply take the 0th-indexed element.\n\nThe individual path for each agent is padded to the same length `L`. \n\n## Theoretical Background\n\nThe high-level conflict-based search (CBS) is based on the paper [[Sharon et al. 2012]](https://www.aaai.org/ocs/index.php/AAAI/AAAI12/paper/viewFile/5062/5239). The low-level space-time A\\* (STA\\*) is like normal A\\* with an additional time dimension, see the [GitHub page](https://github.com/GavinPHR/Space-Time-AStar) for more information. \n\n### Constraint Tree\n\nThe core of the algorithm is the maintenance of a constraint tree (a binary min-heap in my implementation). The nodes in the constraint tree have 3 component:\n\n- constraints - detailing what each agent should avoid in space-time\n- solution - path for each agent\n- cost - the sum of the cost of individual paths\n\nThe low-level STA* planner can take the constraints for an agent and calculate a collison-free path for that agent.\n\n### Pseudocode \n\nTaken from [[Sharon et al. 2012]](https://www.aaai.org/ocs/index.php/AAAI/AAAI12/paper/viewFile/5062/5239) with minor modification.\n\n```\nnode = Find paths for individual agents with no constraints.\nAdd node to the constraint tree.\n\nwhile constraint tree is not empty:\n  best = node with the lowest cost in the constraint tree\n\n  Validate the solution in best until a conflict occurs.\n  if there is no conflict:\n    return best\n\n  conflict = Find the first 2 agents with conflicting paths.\n\n  new_node1 = node where the 1st agent avoid the 2nd agent\n  Add new_node1 to the constraint tree.\n\n  new_node2 = node where the 2nd agent avoid the 1st agent\n  Add new_node2 to the constraint tree.\n```\n\n\n## Contributing\nSuggestions and pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n\n## License\n[MIT](https://opensource.org/licenses/MIT)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GavinPHR/Multi-Agent-Path-Finding",
    "keywords": "multi-agent-path-finding,anonymous-agent,conflict-based-search,mapf,cbs,a-star",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cbs-mapf",
    "package_url": "https://pypi.org/project/cbs-mapf/",
    "platform": "",
    "project_url": "https://pypi.org/project/cbs-mapf/",
    "project_urls": {
      "Homepage": "https://github.com/GavinPHR/Multi-Agent-Path-Finding"
    },
    "release_url": "https://pypi.org/project/cbs-mapf/0.5/",
    "requires_dist": [
      "numpy",
      "scipy",
      "space-time-astar"
    ],
    "requires_python": ">=3.5",
    "summary": "Anonymous Multi-Agent Path Finding with Conflict-Based Search and Space-Time A*",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6873474,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca5a7d13c0f12407c74b4e4e62d22220e1c7802cc6c79caff6647f3c2bab0fd9",
          "md5": "22ee2fdbdbe885a079a67d1724d79dc0",
          "sha256": "4445daa7181fe11bb4e6dc65a838cf6175f319f20db1c4d538016b8eb3286e56"
        },
        "downloads": -1,
        "filename": "cbs_mapf-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22ee2fdbdbe885a079a67d1724d79dc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 6807,
        "upload_time": "2020-03-13T00:29:40",
        "upload_time_iso_8601": "2020-03-13T00:29:40.055937Z",
        "url": "https://files.pythonhosted.org/packages/ca/5a/7d13c0f12407c74b4e4e62d22220e1c7802cc6c79caff6647f3c2bab0fd9/cbs_mapf-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd8e6bf9a96b1f881c3f4c8c95e7cc2edafd16dc6f7a1cd621ea717f2cd12d34",
          "md5": "6a39b47c6232d18062c73ac0b435a33b",
          "sha256": "97b00ffcdfdade9c0d29f8bc5edf02caa8b100b54a3f8e44b5f5745064acbe6a"
        },
        "downloads": -1,
        "filename": "cbs-mapf-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6a39b47c6232d18062c73ac0b435a33b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 4648,
        "upload_time": "2020-03-13T00:29:41",
        "upload_time_iso_8601": "2020-03-13T00:29:41.424865Z",
        "url": "https://files.pythonhosted.org/packages/fd/8e/6bf9a96b1f881c3f4c8c95e7cc2edafd16dc6f7a1cd621ea717f2cd12d34/cbs-mapf-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce48c9ab1810884ffd36f206cc06ed968fb18894d7b62f5c18e1b414796cc3ba",
          "md5": "3b85ec04be2c4b2c7f53dc1e6627e7f5",
          "sha256": "5878a970587aaf7ef8e7eb260a3b92cdb5814678fd6f65b52a08fee56f0ac45a"
        },
        "downloads": -1,
        "filename": "cbs_mapf-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b85ec04be2c4b2c7f53dc1e6627e7f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 8890,
        "upload_time": "2020-03-19T19:06:02",
        "upload_time_iso_8601": "2020-03-19T19:06:02.377926Z",
        "url": "https://files.pythonhosted.org/packages/ce/48/c9ab1810884ffd36f206cc06ed968fb18894d7b62f5c18e1b414796cc3ba/cbs_mapf-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e2a272d992da71636dd1921b7d810ec53f6a6f36c94aa3fd1afe36e701ced37",
          "md5": "99f283b93d9ec2c7a5a68dff968f52aa",
          "sha256": "490379f22bc09dfc8e4aaf5adb88896ff67f4e19f8ed2d81f3c316f689004d31"
        },
        "downloads": -1,
        "filename": "cbs-mapf-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "99f283b93d9ec2c7a5a68dff968f52aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6929,
        "upload_time": "2020-03-19T19:06:04",
        "upload_time_iso_8601": "2020-03-19T19:06:04.061250Z",
        "url": "https://files.pythonhosted.org/packages/9e/2a/272d992da71636dd1921b7d810ec53f6a6f36c94aa3fd1afe36e701ced37/cbs-mapf-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49f0c2ee4d2baeaf6fd1c5bb5aed16d63a067275258c342c4aca664bd23be79c",
          "md5": "a6a22dcf0cf1e8b9fe82a4581a46bdd3",
          "sha256": "75a96bf81fdc7f4c0e043eb0347d639e081b32682af8573e5f8e7891d8a19c32"
        },
        "downloads": -1,
        "filename": "cbs_mapf-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6a22dcf0cf1e8b9fe82a4581a46bdd3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 9211,
        "upload_time": "2020-03-19T23:38:28",
        "upload_time_iso_8601": "2020-03-19T23:38:28.875947Z",
        "url": "https://files.pythonhosted.org/packages/49/f0/c2ee4d2baeaf6fd1c5bb5aed16d63a067275258c342c4aca664bd23be79c/cbs_mapf-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cb2a6db8b2720e5bd799a164b9b2add2f6fed4a4eaeac89cc20e94044d3013f",
          "md5": "0e1bea27dcf52f50e09683e32fceab32",
          "sha256": "335765421ee78468eab974797c28a97c35aac639ab1af64f6ba86a8db838d199"
        },
        "downloads": -1,
        "filename": "cbs-mapf-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0e1bea27dcf52f50e09683e32fceab32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7239,
        "upload_time": "2020-03-19T23:38:30",
        "upload_time_iso_8601": "2020-03-19T23:38:30.612554Z",
        "url": "https://files.pythonhosted.org/packages/6c/b2/a6db8b2720e5bd799a164b9b2add2f6fed4a4eaeac89cc20e94044d3013f/cbs-mapf-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07c3f767a28a0052e4162c84319c35ee4582853e1cabb856ac54e7c2e0349510",
          "md5": "414776aff181da13a4099a9e9d48da52",
          "sha256": "0f1d133f850c8cef8c78896602c90a22defbb50ed79eaf2dda994894cecd3cf0"
        },
        "downloads": -1,
        "filename": "cbs_mapf-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "414776aff181da13a4099a9e9d48da52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 9703,
        "upload_time": "2020-03-24T14:38:39",
        "upload_time_iso_8601": "2020-03-24T14:38:39.126802Z",
        "url": "https://files.pythonhosted.org/packages/07/c3/f767a28a0052e4162c84319c35ee4582853e1cabb856ac54e7c2e0349510/cbs_mapf-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36a05e1a597f7b1b478599b04981de22c16254746dd809ce2fff6a10665ad7cd",
          "md5": "77ecf1b56e7f3d4c8c2b24e59c866673",
          "sha256": "e7645b1bf1aa0a6a010f0b8203305242ece43b2869698610623a2c28459a00d8"
        },
        "downloads": -1,
        "filename": "cbs-mapf-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "77ecf1b56e7f3d4c8c2b24e59c866673",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8496,
        "upload_time": "2020-03-24T14:38:40",
        "upload_time_iso_8601": "2020-03-24T14:38:40.918531Z",
        "url": "https://files.pythonhosted.org/packages/36/a0/5e1a597f7b1b478599b04981de22c16254746dd809ce2fff6a10665ad7cd/cbs-mapf-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07c3f767a28a0052e4162c84319c35ee4582853e1cabb856ac54e7c2e0349510",
        "md5": "414776aff181da13a4099a9e9d48da52",
        "sha256": "0f1d133f850c8cef8c78896602c90a22defbb50ed79eaf2dda994894cecd3cf0"
      },
      "downloads": -1,
      "filename": "cbs_mapf-0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "414776aff181da13a4099a9e9d48da52",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 9703,
      "upload_time": "2020-03-24T14:38:39",
      "upload_time_iso_8601": "2020-03-24T14:38:39.126802Z",
      "url": "https://files.pythonhosted.org/packages/07/c3/f767a28a0052e4162c84319c35ee4582853e1cabb856ac54e7c2e0349510/cbs_mapf-0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36a05e1a597f7b1b478599b04981de22c16254746dd809ce2fff6a10665ad7cd",
        "md5": "77ecf1b56e7f3d4c8c2b24e59c866673",
        "sha256": "e7645b1bf1aa0a6a010f0b8203305242ece43b2869698610623a2c28459a00d8"
      },
      "downloads": -1,
      "filename": "cbs-mapf-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "77ecf1b56e7f3d4c8c2b24e59c866673",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 8496,
      "upload_time": "2020-03-24T14:38:40",
      "upload_time_iso_8601": "2020-03-24T14:38:40.918531Z",
      "url": "https://files.pythonhosted.org/packages/36/a0/5e1a597f7b1b478599b04981de22c16254746dd809ce2fff6a10665ad7cd/cbs-mapf-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}