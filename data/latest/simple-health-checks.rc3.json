{
  "info": {
    "author": "Nicholas Dentandt, Oleg Gerasimenko, Constantina Polycarpou",
    "author_email": "noreply@genomicsengland.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Simple health checks takes a modular plugin based approach to provide health checks that are right for you.\n\n# Example response from health checks endpoint\n\n```json\n{\"serviceName\": \"myProject\", \"requestUrl\": \"localhost:8000/health/1/\", \"datetime\": \"2021-11-19T11:53:26ZUTC\", \"components\": [\"Database\", \"RabbitMQ\"], \"status\": \"OK\", \"version\": \"1.5.0\", \"simpleHealthChecksVersion\": \"1.0.0\"}\n```\n\n## Setup\n\n### Environment variables\n\nThe following environment variables should be set up:\n\n- `SETTINGS_FILE_FOR_DYNACONF` - Can be used to point to a config file to load the environment variables listed below,\n check the [dynaconf documentation](https://dynaconf.readthedocs.io/en/docs_223/guides/usage.html#the-settings-files)\n- `HEALTH_CHECKS_RESOURCES` - all resources available for health check, \n    * for env vars it should be set in the following format `@json [\"resource1\", \"resource2\"]`\n    * for ini files it can be set as `=resource1,resource2` without quotations\n- `HEALTH_CHECKS_CRITICAL` - same format required as `HEALTH_CHECKS_RESOURCES`\n resource file names (the same as you use in `HEALTH_CHECKS`) that are critical for the \napplication and will result in a DOWN status, they should also be present in `HEALTH_CHECKS`\n- `HEALTH_CHECKS_TIMEOUT` - seconds until timeout, default 10\n- `HEALTH_CHECKS_CACHE_SECONDS` - seconds to cache health check results, default 5\n- `HEALTH_CHECKS_SERVICE_NAME` - name of the service you're adding this to (this should \nmatch the filename of the resource if a health check exists for the service)\n- `HEALTH_CHECKS_SERVICE_VERSION` - the current version of the service hosting this package\n- `HEALTH_CHECKS_MAX_WORKERS` - Number of workers to run processes in parallel, default 2\n\nIf using the `django_views` plugin:\n\n- `HEALTH_CHECKS_TOKEN` - token required to access health of dependencies\n\nIf using the `rabbitmq` plugin:\n\n- `HEALTH_CHECKS_RABBITMQ_BROKER_URL` - the broker url used by rabbitmq\n\n\n### Installing for local development\n\nMove to the `src/` directory\nRun `pip install .`\n\nTo install plugins run: `pip install plugins/<folder containing setup.py>` from the `src/` directory\n\n\n### Setting up a new resource\n\nNotes: can_skip - does the resource you are adding support `?skip=` parameter - if not we should not send it (can_skip should be False) as \nexternal dependencies can be sensitive to unknown query parameters\n\n\n### Plugins\n\nPlugins can be created by following the directory structure shown in the existing plugins. They should mirror the structure of `simple_health_checks`\nYou can extend config by providing a file that adds [dynaconf](https://github.com/rochacbruno/dynaconf) validators. This file should exist in `additional_configs/`\ndirectory within your plugin, should contain `config` in the filename and should define a list called validators containing your dynaconf `Validator`'s\n\nYou'll need both a `VERSION` file and a `MANIFEST.in` file containing `include VERSION`.\n\nAdd the plugin's setup.py to the `build_and_publish_pypi` stage in [.gitlab-ci.yml](.gitlab-ci.yml) and adding the version in to your `VERSION` file\n\nAdd the plugin's `pip install` command to the `.py` stage using the path to your plugins `setup.py`\n\nEnsure that you add any modules that you wish to exist in `simple_health_checks` to your `setup.py` under `packages=` \nan example is shown below for the `django_views` plugin\n\n```python\nsetup(\n    name=\"simple_health_checks_django_views\",\n    version=\"0.0.0\",\n    description=\"Django views plugin for simple-health-checks,\"\n    \" adds endpoints for ping and health checks\",\n    packages=[\n        \"simple_health_checks.views\",\n        \"simple_health_checks.serializers\",\n    ],\n    install_requires=[\n        \"simple_health_checks\",\n        \"Django\",\n        \"djangorestframework\",\n    ],\n)\n```\n\nNotice this package adds two new modules, `views` and `serializers` to `simple_health_checks`. If you wish to add a new file to an existing module, for example\nadding a new resource to `resources` you would add `packages=[\"simple_health_checks.resources\"]`\n\nYou should avoid making any config required and instead use a default value, preferring `is_configured` on the resource to define whether a resource has been\ncorrectly configured. Another reason for this is that we initialise `HealthCheck` within `simple_health_checks.health_checks` which will be problematic for testing.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/genomicsengland/opensource/simple-healthchecks",
    "keywords": "healthchecks,health,checks",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-health-checks",
    "package_url": "https://pypi.org/project/simple-health-checks/",
    "platform": "unix",
    "project_url": "https://pypi.org/project/simple-health-checks/",
    "project_urls": {
      "Homepage": "https://gitlab.com/genomicsengland/opensource/simple-healthchecks"
    },
    "release_url": "https://pypi.org/project/simple-health-checks/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Simple health checks takes a modular plugin based approach to provide health checks relevant to your project.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12069844,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6ec1d7c1d59e5632fa5131a97c64d20e284a534080bc270922e89cdd12562b2",
          "md5": "d8b35f691b3f3050725027d25c1e90dc",
          "sha256": "a4b2f6648aa9eb9d5da9902e046f22c4d07a29a4afc73a10766310be40678c0b"
        },
        "downloads": -1,
        "filename": "simple_health_checks-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8b35f691b3f3050725027d25c1e90dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6326,
        "upload_time": "2021-11-19T11:44:36",
        "upload_time_iso_8601": "2021-11-19T11:44:36.739389Z",
        "url": "https://files.pythonhosted.org/packages/a6/ec/1d7c1d59e5632fa5131a97c64d20e284a534080bc270922e89cdd12562b2/simple_health_checks-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cacf581206515d696591491e1afdefaffb8cb814594c83bc0b64e20adfe639f8",
          "md5": "90146793d51c2081a3cdfa91840e6a99",
          "sha256": "11f80cac4ed14a083267bb3b18ce77d5e00501b5fc0566fd579be7642a587206"
        },
        "downloads": -1,
        "filename": "simple_health_checks-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "90146793d51c2081a3cdfa91840e6a99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6325,
        "upload_time": "2021-11-19T12:27:54",
        "upload_time_iso_8601": "2021-11-19T12:27:54.046099Z",
        "url": "https://files.pythonhosted.org/packages/ca/cf/581206515d696591491e1afdefaffb8cb814594c83bc0b64e20adfe639f8/simple_health_checks-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78dc3e9e09b6d88d0cebb30f4c3d2d0ba33692c2de86fe75347df332cc532311",
          "md5": "c04860ae7b2fc2c69fd099197129fb12",
          "sha256": "ba8801a5f694915f192da7600b997c6d367f279ad433d185814519879df4819b"
        },
        "downloads": -1,
        "filename": "simple_health_checks-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c04860ae7b2fc2c69fd099197129fb12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10011,
        "upload_time": "2021-11-19T14:03:48",
        "upload_time_iso_8601": "2021-11-19T14:03:48.945405Z",
        "url": "https://files.pythonhosted.org/packages/78/dc/3e9e09b6d88d0cebb30f4c3d2d0ba33692c2de86fe75347df332cc532311/simple_health_checks-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78dc3e9e09b6d88d0cebb30f4c3d2d0ba33692c2de86fe75347df332cc532311",
        "md5": "c04860ae7b2fc2c69fd099197129fb12",
        "sha256": "ba8801a5f694915f192da7600b997c6d367f279ad433d185814519879df4819b"
      },
      "downloads": -1,
      "filename": "simple_health_checks-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c04860ae7b2fc2c69fd099197129fb12",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10011,
      "upload_time": "2021-11-19T14:03:48",
      "upload_time_iso_8601": "2021-11-19T14:03:48.945405Z",
      "url": "https://files.pythonhosted.org/packages/78/dc/3e9e09b6d88d0cebb30f4c3d2d0ba33692c2de86fe75347df332cc532311/simple_health_checks-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}