{
  "info": {
    "author": "Explosion",
    "author_email": "contact@explosion.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "<a href=\"https://explosion.ai\"><img src=\"https://explosion.ai/assets/img/logo.svg\" width=\"125\" height=\"125\" align=\"right\" /></a>\n\n# radicli: Radically lightweight command-line interfaces\n\n`radicli` is a small, zero-dependency Python package for creating command line interfaces, built on top of Python's [`argparse`](https://docs.python.org/3/library/argparse.html) module. It introduces minimal overhead, preserves your original Python functions and uses **type hints** to parse values provided on the CLI. It supports all common types out-of-the-box, including complex ones like `List[str]`, `Literal` and `Enum`, and allows registering **custom types** with custom converters, as well as custom CLI-only **error handling**, exporting a **static representation** for faster `--help` and errors and auto-generated **Markdown documentation**.\n\n> **Important note:** This package aims to be a simple option based on the requirements of our libraries. If you're looking for a more full-featured CLI toolkit, check out [`typer`](https://typer.tiangolo.com), [`click`](https://click.palletsprojects.com) or [`plac`](https://plac.readthedocs.io/en/latest/).\n\n[![GitHub Actions](https://github.com/explosion/radicli/actions/workflows/test.yml/badge.svg)](https://github.com/explosion/radicli/actions/workflows/test.yml)\n[![Current Release Version](https://img.shields.io/github/v/release/explosion/radicli.svg?style=flat-square&include_prereleases&logo=github)](https://github.com/explosion/radicli/releases)\n[![pypi Version](https://img.shields.io/pypi/v/radicli.svg?style=flat-square&logo=pypi&logoColor=white)](https://pypi.org/project/radicli/)\n\n## ⏳ Installation\n\nNote that `radicli` currently requires **Python 3.8+**.\n\n```bash\npip install radicli\n```\n\n## 👩‍💻 Usage\n\nThe `Radicli` class sets up the CLI and provides decorators for commands and subcommands. The `Arg` dataclass can be used to describe how the arguments should be presented on the CLI. Types and defaults are read from the Python functions. You typically don't have to change anything about how you implement your Python functions to make them available as a CLI command.\n\n```python\n# cli.py\nfrom radicli import Radicli, Arg\n\ncli = Radicli()\n\n@cli.command(\n    \"hello\",\n    name=Arg(help=\"Your name\"),\n    age=Arg(\"--age\", \"-a\", help=\"Your age\"),\n    greet=Arg(\"--greet\", \"-G\", help=\"Whether to greet\"),\n)\ndef hello(name: str, age: int, greet: bool = False):\n    \"\"\"Description of the function for help text.\"\"\"\n    if greet:\n        print(f\"Hello {name} ({age})!\")\n\nif __name__ == \"__main__\":\n    cli.run()\n```\n\n```\n$ python cli.py hello Alex --age 35 --greet\nHello Alex (35)!\n```\n\nIf a file only specifies a **single command** (with or without subcommands), you can optionally leave out the\ncommand name. So the above example script can also be called like this:\n\n```\n$ python cli.py Alex --age 35 --greet\nHello Alex (35)!\n```\n\nAlternatively, you can also use `Radicli.call`:\n\n```python\n# cli.py\nfrom radicli import Radicli, Arg\n\ndef hello(name: str, age: int):\n     print(f\"Hello {name} ({age})!\")\n\nif __name__ == \"__main__\":\n    args = dict(name=Arg(help=\"Your name\"), age=Arg(\"--age\", \"-a\", help=\"Your age\"))\n    command = Command.from_function(\"hello\", args, hello)\n    Radicli().call(command)\n```\n\n```\n$ python cli.py Alex --age 35\nHello Alex (35)!\n```\n\n### Subcommands\n\n`radicli` supports one level of nested subcommands. The parent command may exist independently, but it doesn't have to.\n\n```python\n@cli.subcommand(\"parent\", \"child1\", name=Arg(\"--name\", help=\"Your name\"))\ndef parent_child1(name: str):\n    ...\n\n@cli.subcommand(\"parent\", \"child2\", name=Arg(\"--age\", help=\"Your age\"))\ndef parent_child2(age: int):\n    ...\n```\n\n```\n$ python cli.py parent child1 --name Alex\n$ python cli.py parent child2 --age 35\n```\n\n### Working with types\n\nFor built-in callable types like `str`, `int` or `float`, the string value received from the CLI is passed to the callable, e.g. `int(value)`. More complex, nested types are resolved recursively. The library also provides several built-in [custom types](#custom-types-and-converters) for handling things like file paths.\n\n> ⚠️ Note that there's a limit to what can reasonably be supported by a CLI interface so it's recommended to avoid overly complex types. For a `Union` type, the **first** type of the union is used. `Optional` types are expected to be left unset to default to `None`. If a value is provided, the type marked as optional is used, e.g. `str` for `Optional[str]`.\n\n#### Lists\n\nBy default, list types are implemented by allowing the CLI argument to occur more than once. The value of each element is parsed using the type defined for list members.\n\n```python\n@cli.command(\"hello\", fruits=Arg(\"--fruits\", help=\"One or more fruits\"))\ndef hello(fruits: List[str]):\n    print(fruits)\n```\n\n```\n$ python cli.py hello --fruits apple --fruits banana --fruits cherry\n['apple', 'banana', 'cherry']\n```\n\nIf you don't like this syntax, you can also add a `converter` to the `Arg` definition that handles the value differently, e.g. by splitting a comma-separated string. This would let the user write `--fruits apple,banana,cherry`, while still passing a list to the Python function.\n\n#### Literals and Enums\n\nArguments that can only be one of a given set of values can be typed as a `Literal`. Any values not in the list will raise a CLI error.\n\n```python\n@cli.command(\"hello\", color=Arg(\"--color\", help=\"Pick a color\"))\ndef hello(color: Literal[\"red\", \"blue\", \"green\"]):\n    print(color)  # this will be a string\n```\n\n`Enum`s are also supported and in this case, the enum key can be provided on the CLI and the function receives the selected enum member.\n\n```python\nclass ColorEnum(Enum):\n    red = \"the color red\"\n    blue = \"the color blue\"\n    green = \"the color green\"\n\n@cli.command(\"hello\", color=Arg(\"--color\", help=\"Pick a color\"))\ndef hello(color: ColorEnum):\n    print(color)  # this will be the enum, e.g. ColorEnum.red\n```\n\n### Using custom types and converters\n\n`radicli` supports defining custom converter functions to handle individual arguments, as well as all instances of a given type globally. Converters take the string value provided on the CLI and should return the value passed to the function, consistent with the type. They can also raise validation errors.\n\n```python\nformat_name = lambda value: value.upper()\n\n@cli.command(\"hello\", name=Arg(\"--name\", converter=format_name))\ndef hello(name: str):\n    print(f\"Hello {name}\"!)\n```\n\n```\n$ python cli.py hello --name Alex\nHello ALEX!\n```\n\n#### Global converters for custom types\n\nThe `converters` argument lets you provide a dict of types mapped to converter functions when initializing `Radicli`. If an argument of that target type is encountered, the input string value is converted automatically. This ensures your Python functions remain composable and don't need additional logic only to satisfy the CLI usage.\n\nThe following example shows how to register a custom converter that loads a [spaCy](https://spacy.io) pipeline from a string name, while allowing the function itself to require the `Language` object itself:\n\n```python\nimport radicli\nimport spacy\n\ndef load_spacy_model(name: str) -> spacy.language.Language:\n    return spacy.load(name)\n\nconverters = {spacy.language.Language: load_spacy_model}\ncli = Radicli(converters=converters)\n\n@cli.command(\n    \"process\",\n    nlp=Arg(help=\"The spaCy pipeline to use\"),\n    name=Arg(\"--text\", help=\"The text to process\")\n)\ndef process_text(nlp: spacy.language.Language, text: str):\n    doc = nlp(text)\n    print(doc.text, [token.pos_ for token in doc])\n```\n\n```\n$ python test.py process en_core_web_sm --text Hello world!\nHello world! ['INTJ', 'NOUN', 'PUNCT']\n```\n\nIf you want to alias an existing type to add custom handling for it, you can create a `NewType`. This is also how the built-in [`Path` converters](#custom-types-and-converters) are implemented. In help messages, the type it is based on will be displayed together with the custom name.\n\n```python\nfrom typing import NewType\nfrom pathlib import Path\n\nExistingPath = NewType(\"ExistingPath\", Path)\n\ndef convert_existing_path(path_str: str) -> Path:\n    path = Path(path_str)\n    if not path.exists():\n        raise ValueError(f\"path does not exist: {path_str}\")\n    return path\n\nconverters = {ExistingPath: convert_existing_path}\n```\n\nFor generic types that can have arguments, e.g. `List` and `List[str]`, the converters are checked for both the exact type, as well as the origin. This means you can have multiple converters for different generics, as well as a fallback:\n\n```\nconverters = {\n    List[str]: convert_string_list,\n    List[int]: convert_int_list,\n    List: convert_other_lists,\n}\n```\n\n### Allowing extra arguments\n\nIf you want to capture and consume extra arguments not defined in the function and argument annotations, you can use the `command_with_extra` or `subcommand_with_extra` decorators. Extra arguments are passed to the function as a list of strings to an argument `_extra` (which you can change via the `extra_key` setting when initializing the CLI). spaCy uses this feature to pass settings to `pip` in its [`download` command](https://spacy.io/api/cli#download) or to allow arbitrary [configuration overrides](https://spacy.io/usage/training#config-overrides) during training.\n\n```python\n@cli.command_with_extra(\"hello\", name=Arg(\"--name\", help=\"Your name\"))\ndef hello(name: str, _extra: List[str] = []):\n    print(f\"Hello {name}!\", _extra)\n```\n\n```\n$ python cli.py hello --name Alex --age 35 --color blue\nHello Alex! ['--age', '35', '--color', 'blue']\n```\n\n### Command aliases by stacking decorators\n\nThe command and subcommand decorators can be stacked to make the same function available via different command aliases. In this case, you just need to make sure that all decorators receive the same argument annotations, e.g. by moving them out to a variable.\n\n```python\nargs = dict(\n    name=Arg(help=\"Your name\"),\n    age=Arg(\"--age\", \"-a\", help=\"Your age\")\n)\n\n@cli.command(\"hello\", **args)\n@cli.command(\"hey\", **args)\n@cli.subcommand(\"greet\", \"person\", **args)\ndef hello(name: str, age: int):\n    print(f\"Hello {name} ({age})!\")\n```\n\n```\n$ python cli.py hello --name Alex --age 35\n$ python cli.py hey --name Alex --age 35\n$ python cli.py greet person --name Alex --age 35\n```\n\n### Error handling\n\nOne common problem when adding CLIs to a code base is error handling. When called in a CLI context, you typically want to pretty-print any errors and avoid long tracebacks. However, you don't want to use those errors and plain `SystemExit`s with no traceback in helper functions that are used in other places, or when the CLI functions are called directly from Python or during testing.\n\nTo solve this, `radicli` lets you provide an error map via the `errors` argument on initialization. It maps `Exception` types like `ValueError` or fully custom error subclasses to handler functions. If an error of that type is raised, the handler is called and will receive the error. The handler can optionally return an exit code – in this case, `radicli` will perform a `sys.exit` using that code. If no error code is returned, no exit is performed and the handler can either take care of the exiting itself or choose to not exit.\n\n```python\nfrom radicli import Radicli\nfrom termcolor import colored\n\ndef pretty_print_error(error: Exception) -> int:\n    print(colored(f\"🚨 {error}\", \"red\"))\n    return 1\n\ncli = Radicli(errors={ValueError: handle_error})\n\n@cli.command(\"hello\", name=Arg(\"--name\"))\ndef hello(name: str):\n    if name == \"Alex\":\n        raise ValueError(\"Invalid name\")\n```\n\n```\n$ python cli.py hello --name Alex\n🚨 Invalid name\n```\n\n```bash\n>>> hello(\"Alex\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: Invalid name\n```\n\nThis approach is especially powerful with custom error subclasses. Here you can decide which arguments the error should take and how this information should be displayed on the CLI vs. in a regular non-CLI context.\n\n```python\nclass CustomError(Exception):\n    def __init__(self, text: str, additional_info: Any = \"\") -> None:\n        self.text = text\n        self.additional_info\n        self.message = f\"{self.text} {self.additional_info}\"\n        super().__init__(self.message)\n\ndef handle_custom_error(error: CustomError) -> int:\n    print(colored(error.text, \"red\"))\n    print(error.additional_info)\n    return 1\n```\n\n### Using static data for faster help and errors\n\nCLIs often require various other Python packages that need to be imported – for example, you might need to import `pytorch` and `tensorflow`, or load other resources in the global scope. This all adds to the CLI's load time, so even showing the `--help` message may take several seconds to run. That's all unnecessary and makes for a frustrating developer experience.\n\n`radicli` lets you generate a static representation of your CLI as a JSON file, including everything needed to output help messages and to check that the command exists and the correct and required arguments are provided. If the static CLI doesn't perform a system exit via printing the help message or raising an error, you can import and run the \"live\" CLI to continue. This lets you **defer the import until it's really needed**, i.e. to convert the arguments to the expected types and executing the command function.\n\n```python\ncli.to_static(\"./static.json\")\n```\n\n```python\nfrom radicli import StaticRadicli\n\nstatic = StaticRadicli.load(\"./static.json\")\n\nif __name__ == \"__main__\":\n    static.run()\n\n    # This only runs if the static CLI doesn't error or print help\n    from .cli import cli\n    cli.run()\n```\n\nIf the CLI is part of a Python package, you can generate the static JSON file during your build process and ship the pre-generated JSON file with your package.\n\n`StaticRadicli` also provides a `disable` argument to disable static parsing during development (or if a certain environment variable is set). Setting `debug=True` will print an additional start and optional end marker (if the static CLI didn't exit before) to indicate that the static CLI ran.\n\n### Auto-documenting the CLI\n\nThe `Radicli.document` method lets you generate a simple Markdown-formatted documentation for your CLI with an optional`title` and `description` added to the top. You can also include this call in your CI or build process to ensure the documentation is always up to date.\n\n```python\nwith Path(\"README.md\").open(\"w\", encoding=\"utf8\") as f:\n    f.write(cli.document())\n```\n\nThe `path_root` lets you provide a custom `Path` that's used as the relative root for all paths specified as default arguments. This means that absolute paths won't make it into your README.\n\n## 🎛 API\n\n### <kbd>dataclass</kbd> `Arg`\n\nDataclass for describing argument meta information. This is typically used in the command decorators and only includes information for how the argument should be handled on the CLI. Argument types and defaults are read from the Python function.\n\n| Argument    | Type                             | Description                                                                                                 |\n| ----------- | -------------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| `option`    | `Optional[str]`                  | Option to use on the CLI, e.g. `--arg`. If unset, argument will be treated as positional.                   |\n| `short`     | `Optional[str]`                  | Shorthand for option, e.g. `-A`.                                                                            |\n| `help`      | `Optional[str]`                  | Help text for argument, used for `--help`.                                                                  |\n| `count`     | `bool`                           | Only count and return number of times an argument is used, e.g. `--verbose` or `-vvv` (for shorthand `-v`). |\n| `converter` | `Optional[Callable[[str], Any]]` | Converter function that takes the string from the CLI value and returns a value passed to the function.     |\n\n### <kbd>dataclass</kbd> `Command`\n\nInternal representation of a CLI command. Can be accessed via `Radicli.commands` and `Radicli.subcommands`.\n\n| Name             | Type                | Description                                                                                                                                           |\n| ---------------- | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `name`           | `str`               | The name of the command.                                                                                                                              |\n| `func`           | `Callable`          | The decorated command function.                                                                                                                       |\n| `args`           | `List[ArgparseArg]` | The internal representation of the argument annotations. `Argparse.arg` lets you access the original `Arg`.                                           |\n| `description`    | `Optional[str]`     | The command description, taken from the function docstring.                                                                                           |\n| `allow_extra`    | `bool`              | Whether to allow extra arguments.                                                                                                                     |\n| `parent`         | `Optional[str]`     | Name of the parent command if command is a subcommand.                                                                                                |\n| `is_placeholder` | `bool`              | Whether the command is a placeholder, created by `Radicli.placeholder`. Checking this can sometimes be useful, e.g. for testing. Defaults to `False`. |\n| `display_name`   | `str`               | The display name including the parent if available, e.g. `parent child`.                                                                              |\n\n#### <kbd>classmethod</kbd> `Command.from_function`\n\nCreate a command from a function and its argument annotations and use the type hints and defaults defined in the function to generate the arguments. This is what happens under the hood in the command decorators and it can be used if you need to construct a `Command` manually.\n\n```python\ndef hello(name: str, age: int):\n    print(f\"Hello {name} ({age})!\")\n\nargs = {\"name\": Arg(), \"age\": Arg(\"--age\", help=\"Your age\")}\ncommand = Command.from_function(\"hello\", args, hello)\n```\n\n| Argument      | Type                               | Description                                                                                                 |\n| ------------- | ---------------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| `name`        | `str`                              | The name of the command.                                                                                    |\n| `args`        | `Dict[str, Arg]`                   | The command argument annotation, defined as `Arg` dataclasses.                                              |\n| `func`        | `Callable`                         | The command function.                                                                                       |\n| `parent`      | `Optional[str]`                    | Name of the parent command if command is a subcommand.                                                      |\n| `allow_extra` | `bool`                             | Whether to allow extra arguments.                                                                           |\n| `extra_key`   | `str`                              | Name of function argument that receives extra arguments if `allow_extra` is `True`. Defaults to `\"_extra\"`. |\n| `converters`  | `Dict[Type, Callable[[str], Any]]` | Dict mapping types to global converter functions.                                                           |\n| **RETURNS**   | `Command`                          | The command.                                                                                                |\n\n### <kbd>class</kbd> `Radicli`\n\n#### Attributes\n\n| Name          | Type                                                          | Description                                                                                                                                                                              |\n| ------------- | ------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `prog`        | `Optional[str]`                                               | Program name displayed in `--help` prompt usage examples, e.g. `\"python -m spacy\"`.                                                                                                      |\n| `help`        | `str`                                                         | Help text for the CLI, displayed in top-level `--help`. Defaults to `\"\"`.                                                                                                                |\n| `version`     | `Optional[str]`                                               | Version available via `--version`, if set.                                                                                                                                               |\n| `converters`  | `Dict[Type, Callable[[str], Any]]`                            | Dict mapping types to global converter functions.                                                                                                                                        |\n| `errors`      | `Dict[Type[Exception], Callable[[Exception], Optional[int]]]` | Dict mapping errors types to global error handlers. If the handler returns an exit code, a `sys.exit` will be raised using that code. See [error handling](#error-handling) for details. |\n| `commands`    | `Dict[str, Command]`                                          | The commands added to the CLI, keyed by name.                                                                                                                                            |\n| `subcommands` | `Dict[str, Dict[str, Command]]`                               | The subcommands added to the CLI, keyed by parent name, then keyed by subcommand name.                                                                                                   |\n\n#### <kbd>method</kbd> `Radicli.__init__`\n\nInitialize the CLI and create the registry.\n\n```python\nfrom radicli import Radicli\n\ncli = Radicli(prog=\"python -m spacy\")\n```\n\n| Argument     | Type                                                          | Description                                                                                                                                                                              |\n| ------------ | ------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `prog`       | `Optional[str]`                                               | Program name displayed in `--help` prompt usage examples, e.g. `\"python -m spacy\"`.                                                                                                      |\n| `help`       | `str`                                                         | Help text for the CLI, displayed in top-level `--help`. Defaults to `\"\"`.                                                                                                                |\n| `version`    | `Optional[str]`                                               | Version available via `--version`, if set.                                                                                                                                               |\n| `converters` | `Dict[Type, Callable[[str], Any]]`                            | Dict mapping types to converter functions. All arguments with these types will then be passed to the respective converter.                                                               |\n| `errors`     | `Dict[Type[Exception], Callable[[Exception], Optional[int]]]` | Dict mapping errors types to global error handlers. If the handler returns an exit code, a `sys.exit` will be raised using that code. See [error handling](#error-handling) for details. |\n| `extra_key`  | `str`                                                         | Name of function argument that receives extra arguments if the `command_with_extra` or `subcommand_with_extra` decorator is used. Defaults to `\"_extra\"`.                                |\n\n#### <kbd>decorator</kbd> `Radicli.command`, `Radicli.command_with_extra`\n\nThe decorator used to wrap top-level command functions.\n\n```python\n@cli.command(\n    \"hello\",\n    name=Arg(help=\"Your name\"),\n    age=Arg(\"--age\", \"-a\", help=\"Your age\"),\n    greet=Arg(\"--greet\", \"-G\", help=\"Whether to greet\"),\n)\ndef hello(name: str, age: int, greet: bool = False) -> None:\n    if greet:\n        print(f\"Hello {name} ({age})\")\n```\n\n```\n$ python cli.py hello Alex --age 35 --greet\nHello Alex (35)\n```\n\n```python\n@cli.command_with_extra(\n    \"hello\",\n    name=Arg(help=\"Your name\"),\n    age=Arg(\"--age\", \"-A\", help=\"Your age\"),\n)\ndef hello(name: str, age: int, _extra: List[str]) -> None:\n    print(f\"Hello {name} ({age})\", _extra)\n```\n\n```\n$ python cli.py hello Alex --age 35 --color red\nHello Alex (35) ['--color', 'red']\n```\n\n| Argument    | Type       | Description                                                                                                                                                                       |\n| ----------- | ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `name`      | `str`      | Name of the command.                                                                                                                                                              |\n| `**args`    | `Arg`      | Keyword arguments defining the argument information. Names need to match the function arguments. If no argument annotations are defined, all arguments are treated as positional. |\n| **RETURNS** | `Callable` | The wrapped function.                                                                                                                                                             |\n\n#### <kbd>decorator</kbd> `Radicli.subcommand`, `Radicli.subcommand_with_extra`\n\nThe decorator used to wrap one level of subcommand functions.\n\n```python\n@cli.subcommand(\"hello\", \"world\", name=Arg(help=\"Your name\"))\ndef hello_world(name: str) -> None:\n    print(f\"Hello world, {name}!\")\n```\n\n```\n$ python cli.py hello world Alex\nHello world, Alex!\n```\n\n```python\n@cli.subcommand_with_extra(\"hello\", \"world\", name=Arg(help=\"Your name\"))\ndef hello_world(name: str, _extra: List[str]) -> None:\n    print(f\"Hello world, {name}!\", _extra)\n```\n\n```\n$ python cli.py hello world Alex --color blue\nHello world, Alex! ['--color', 'blue']\n```\n\n| Argument    | Type       | Description                                                                                      |\n| ----------- | ---------- | ------------------------------------------------------------------------------------------------ |\n| `parent`    | `str`      | Name of the parent command (doesn't need to exist).                                              |\n| `name`      | `str`      | Name of the subcommand.                                                                          |\n| `**args`    | `Arg`      | Keyword arguments defining the argument information. Names need to match the function arguments. |\n| **RETURNS** | `Callable` | The wrapped function.                                                                            |\n\n#### <kbd>method</kbd> `Radicli.placeholder`\n\nAdd empty parent command with custom description text for subcommands without\nan executable parent.\n\n```python\ncli.placeholder(\"parent\", description=\"This is the top-level command description\")\n\n@cli.subcommand(\"parent\", \"child\", name=Arg(\"--name\", help=\"Your name\"))\ndef child(name: str) -> None:\n    print(f\"Hello {name}!\")\n```\n\n| Argument      | Type            | Description                         |\n| ------------- | --------------- | ----------------------------------- |\n| `name`        | `str`           | Name of the command.                |\n| `description` | `Optional[str]` | Command description for help texts. |\n\n#### <kbd>method</kbd> `Radicli.run`\n\nRun the CLI. Typically called in a `if __name__ == \"__main__\":` block at the end of a file or in a package's `__main__.py` to allow executing the CLI via `python -m [package]`.\n\n```python\nif __name__ == \"__main__\":\n    cli.run()\n```\n\n| Argument | Type                  | Description                                                                               |\n| -------- | --------------------- | ----------------------------------------------------------------------------------------- |\n| `args`   | `Optional[List[str]]` | Optional command to pass in. Will be read from `sys.argv` if not set (standard use case). |\n\n#### <kbd>method</kbd> `Radicli.call`\n\nCall a command with args.\n\n```python\ncommand = cli.commands[\"hello\"]\ncli.call(command, [\"Alex\", \"--age\", \"35\"])\n```\n\n| Argument  | Type                  | Description                                                                               |\n| --------- | --------------------- | ----------------------------------------------------------------------------------------- |\n| `command` | `Command`             | The command.                                                                              |\n| `args`    | `Optional[List[str]]` | Optional command to pass in. Will be read from `sys.argv` if not set (standard use case). |\n\n#### <kbd>method</kbd> `Radicli.parse`\n\nParse a list of arguments for a given command. Typically internals, but can also be used for testing.\n\n```python\ncommand = cli.commands[\"hello\"]\nvalues = cli.parse([\"Alex\", \"--age\", \"35\"], command)\ncommand.func(**values)\n```\n\n| Argument        | Type                 | Description                                                                                                            |\n| --------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| `args`          | `List[str]`          | The string arguments, e.g. what's received from the command line.                                                      |\n| `command`       | `Command`            | The command.                                                                                                           |\n| `subcommands`   | `Dict[str, Command]` | Subcommands of the parent command, if available, keyed by subcommand name. Defaults to `{}`.                           |\n| `allow_partial` | `bool`               | Allow partial parsing and still return the parsed values, even if required arguments are missing. Defaults to `False`. |\n| **RETURNS**     | `Dict[str, Any]`     | The parsed values keyed by argument name that can be passed to the command function.                                   |\n\n#### <kbd>method</kbd> `Radicli.document`\n\nGenerate a Markdown-formatted documentation for a CLI.\n\n```python\nwith Path(\"README.md\").open(\"w\", encodig=\"utf8\") as f:\n    f.write(cli.document())\n```\n\n| Argument      | Type             | Description                                                                                                                                                                           |\n| ------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `title`       | `Optional[str]`  | Title to add to the top of the file. Defaults to `None`.                                                                                                                              |\n| `description` | `Optional[str]`  | Description to add to the top of th file. Defaults to `None`.                                                                                                                         |\n| `comment`     | `Optional[str]`  | Text of the HTML comment added to the top of the file, usually indicating that it's auto-generated. If `None`, no comment will be added. Defaults to `\"This file is auto-generated\"`. |\n| `path_root`   | `Optional[Path]` | Custom path used as relative root for argument defaults of type `Path`, to prevent local absolute paths from ending up in the documentation. Defaults to `None`.                      |\n| **RETURNS**   | `str`            | The Markdown-formatted docs.                                                                                                                                                          |\n\n#### <kbd>method</kbd> `Radicli.to_static`\n\nExport a static JSON representation of the CLI for `StaticRadicli`.\n\n```python\ncli.to_static(\"./static.json\")\n```\n\n| Argument    | Type               | Description                     |\n| ----------- | ------------------ | ------------------------------- |\n| `file_path` | `Union[str, Path]` | The path to the JSON file.      |\n| **RETURNS** | `Path`             | The path the data was saved to. |\n\n#### <kbd>method</kbd> `Radicli.to_static_json`\n\nGenerate a static representation of the CLI for `StaticRadicli` as a JSON-serializable dict.\n\n```python\ndata = cli.to_static_json()\n```\n\n| Argument    | Type             | Description      |\n| ----------- | ---------------- | ---------------- |\n| **RETURNS** | `Dict[str, Any]` | The static data. |\n\n### <kbd>class</kbd> `StaticRadicli`\n\nSubclass of `Radicli` and static version of the CLI that can be loaded from a static representation of the CLI, generated with `Radicli.to_static`. The static CLI can run before importing and running the live CLI and will take care of showing help messages and doing basic argument checks, e.g. to ensure all arguments are correct and present. This can make your CLI help significantly faster by deferring the import of the live CLI until it's really needed, i.e. to convert the values and execute the function.\n\n```python\nstatic = StaticRadicli.load(\"./static.json\")\n\nif __name__ == \"__main__\":\n    static.run()\n    # This only runs if the static CLI doesn't error or print help\n    from .cli import cli\n    cli.run()\n```\n\n#### <kbd>classmethod</kbd> `StaticRadicli.load`\n\nLoad the static CLI from a JSON file generated with `Radicli.to_static`.\n\n```python\nstatic = StaticRadicli.load(\"./static.json\")\n```\n\n| Argument     | Type                               | Description                                                                                                                                                                  |\n| ------------ | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `file_path`  | `Union[str, Path]`                 | The JSON file to load.                                                                                                                                                       |\n| `disable`    | `bool`                             | Whether to disable static parsing. Can be useful during development. Defaults to `False`.                                                                                    |\n| `debug`      | `bool`                             | Enable debugging mode and print an additional start and optional end marker (if the static CLI didn't exit before) to indicate that the static CLI ran. Defaults to `False`. |\n| `converters` | `Dict[Type, Callable[[str], Any]]` | Dict mapping types to global converter functions that will be used to deserialize types.                                                                                     |\n\n#### <kbd>method</kbd> `StaticRadicli.__init__`\n\nInitialize the static CLI with the JSON-serializable static representation.\n\n```python\ndata = cli.to_static_json()\nstatic = StaticRadicli(data)\n```\n\n| Argument     | Type                               | Description                                                                                                                                                                  |\n| ------------ | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `data`       | `Dict[str, Any]`                   | The static data.                                                                                                                                                             |\n| `disable`    | `bool`                             | Whether to disable static parsing. Can be useful during development. Defaults to `False`.                                                                                    |\n| `debug`      | `bool`                             | Enable debugging mode and print an additional start and optional end marker (if the static CLI didn't exit before) to indicate that the static CLI ran. Defaults to `False`. |\n| `converters` | `Dict[Type, Callable[[str], Any]]` | Dict mapping types to global converter functions that will be used to deserialize types.                                                                                     |\n\n#### <kbd>method</kbd> `StaticRadicli.run`\n\nRun the static CLI. Typically called before running the live CLI and will perform a system exit if a help message was printed (`0`) or if argument names were missing or incorrect (`1`). This means you can defer loading the live CLI until it's really needed, , i.e. to convert the values and execute the function.\n\n```python\nif __name__ == \"__main__\":\n    static.run()\n\n    from .cli import cli\n    cli.run()\n```\n\n| Argument | Type                  | Description                                                                               |\n| -------- | --------------------- | ----------------------------------------------------------------------------------------- |\n| `args`   | `Optional[List[str]]` | Optional command to pass in. Will be read from `sys.argv` if not set (standard use case). |\n\n### Custom types and converters\n\nThe package includes several converters enabled by default, as well as custom types implemented as `NewType`s with pre-defined converter functions. If these types are used in the decorated function, the values received from the CLI will be converted and validated accordingly.\n\n| Name                     | Type                        | Description                                                                                                                             |\n| ------------------------ | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| `ExistingPath`           | `Path`                      | Returns a path and checks that it exists.                                                                                               |\n| `ExistingFilePath`       | `Path`                      | Returns a path and checks that it exists and is a file.                                                                                 |\n| `ExistingDirPath`        | `Path`                      | Returns a path and checks that it exists and is a directory.                                                                            |\n| `ExistingPathOrDash`     | `Union[Path, Literal[\"-\"]]` | Returns an existing path but also accepts `\"-\"` (typically used to indicate that a function should read from standard input).           |\n| `ExistingFilePathOrDash` | `Union[Path, Literal[\"-\"]]` | Returns an existing file path but also accepts `\"-\"` (typically used to indicate that a function should read from standard input).      |\n| `ExistingDirPathOrDash`  | `Union[Path, Literal[\"-\"]]` | Returns an existing directory path but also accepts `\"-\"` (typically used to indicate that a function should read from standard input). |\n| `PathOrDash`             | `Union[Path, Literal[\"-\"]]` | Returns a path but also accepts `\"-\"` (typically used to indicate that a function should read from standard input).                     |\n| `UUID`                   | `UUID`                      | Converts a value to a UUID.                                                                                                             |\n| `StrOrUUID`              | `Union[str, UUID]`          | Converts a value to a UUID if valid, otherwise returns the string.                                                                      |\n\n#### `get_list_converter`\n\nHelper function that creates a list converter that takes a string of list items separated by a delimiter and returns a list of items of a given type. This can be useful if you prefer lists to be defined as comma-separated strings on the CLI instead of via repeated arguments.\n\n```python\n@cli.command(\"hello\", items=Arg(\"--items\", converter=get_list_converter(str)))\ndef hello(items: List[str]) -> None:\n    print(items)\n```\n\n| Argument    | Type                                       | Description                                                                                                   |\n| ----------- | ------------------------------------------ | ------------------------------------------------------------------------------------------------------------- |\n| `type_func` | `Callable[[Any], Union[bool, int, float]]` | The function to convert the list items. Can be a builtin like `str` or `int`, or a custom converter function. |\n| `delimiter` | `str`                                      | Delimiter of the string. Defaults to `\",\"`.                                                                   |\n| **RETURNS** | `Callable[[str], List]`                    | Converter function that converts a string to a list of the given type.                                        |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/explosion/radicli",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "radicli",
    "package_url": "https://pypi.org/project/radicli/",
    "platform": null,
    "project_url": "https://pypi.org/project/radicli/",
    "project_urls": {
      "Homepage": "https://github.com/explosion/radicli"
    },
    "release_url": "https://pypi.org/project/radicli/0.0.21/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Radically lightweight command-line interfaces",
    "version": "0.0.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17400294,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "801f4b18ae8c71bbe0aad541d04b1b42a21b3ce43d8ef6c8594d1e3176143000",
          "md5": "fab0fe429a903177419f5ca6c896b50d",
          "sha256": "dd67069668f429d9c4d5f8d3a2a4360d3624774db3202920fe882c53f6e114b2"
        },
        "downloads": -1,
        "filename": "radicli-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fab0fe429a903177419f5ca6c896b50d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19231,
        "upload_time": "2023-02-08T15:14:07",
        "upload_time_iso_8601": "2023-02-08T15:14:07.453264Z",
        "url": "https://files.pythonhosted.org/packages/80/1f/4b18ae8c71bbe0aad541d04b1b42a21b3ce43d8ef6c8594d1e3176143000/radicli-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "686a9682021a994ce04acc62ea4cdddc898e223426da8446b77b100e177767d2",
          "md5": "43bcbf4b04b6eae13eaa355677288771",
          "sha256": "9c5467969f3b087771c18d6e6505a2c27186289d9be2c3c471d35408d7dec98e"
        },
        "downloads": -1,
        "filename": "radicli-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "43bcbf4b04b6eae13eaa355677288771",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22858,
        "upload_time": "2023-02-08T15:14:08",
        "upload_time_iso_8601": "2023-02-08T15:14:08.745515Z",
        "url": "https://files.pythonhosted.org/packages/68/6a/9682021a994ce04acc62ea4cdddc898e223426da8446b77b100e177767d2/radicli-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89aa0dab1aee289dd5f9d7a0e10eb88363176cfe31859b435246818d9785dae4",
          "md5": "295753dbbe2cef62f3e627382ddbbdc3",
          "sha256": "b2b548640433e8b3ad9b1d5ce5ef53b3299b27a3d1486c673ba16e0443028fd0"
        },
        "downloads": -1,
        "filename": "radicli-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "295753dbbe2cef62f3e627382ddbbdc3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27088,
        "upload_time": "2023-02-21T23:29:23",
        "upload_time_iso_8601": "2023-02-21T23:29:23.147967Z",
        "url": "https://files.pythonhosted.org/packages/89/aa/0dab1aee289dd5f9d7a0e10eb88363176cfe31859b435246818d9785dae4/radicli-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da575267e1161071303b1772b8f3aab8d5366fcce9839a5c20c0d756c04dff8c",
          "md5": "c74cab68916202f2eca532988d812e7f",
          "sha256": "7b2d8dc43be6cbffe5f30b5d7052e079f14b604fdf4aa85d9fe7a7d2632f570a"
        },
        "downloads": -1,
        "filename": "radicli-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "c74cab68916202f2eca532988d812e7f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 39597,
        "upload_time": "2023-02-21T23:29:24",
        "upload_time_iso_8601": "2023-02-21T23:29:24.747682Z",
        "url": "https://files.pythonhosted.org/packages/da/57/5267e1161071303b1772b8f3aab8d5366fcce9839a5c20c0d756c04dff8c/radicli-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45d326fb875508de2c5a53935a4a999e470a7847671f679e0212dad4a8703361",
          "md5": "33e26ce20d0c1545e651061770a14c62",
          "sha256": "d94d3cf91604a51be8d9865be56a7ca1c11b0fe3e136de57d52a79290d36fcc4"
        },
        "downloads": -1,
        "filename": "radicli-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33e26ce20d0c1545e651061770a14c62",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27375,
        "upload_time": "2023-02-26T12:12:48",
        "upload_time_iso_8601": "2023-02-26T12:12:48.193557Z",
        "url": "https://files.pythonhosted.org/packages/45/d3/26fb875508de2c5a53935a4a999e470a7847671f679e0212dad4a8703361/radicli-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50c8731fb81998f76b4a3ad24274ab7e4111214d994bb90aef9ce0d1b527be47",
          "md5": "172c7e9d7c0eda477a83afa2367afcad",
          "sha256": "08187181c0b22fdba1c4e2ad6573845bba79f9921ac0d9b8256a2a026dc5aaf7"
        },
        "downloads": -1,
        "filename": "radicli-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "172c7e9d7c0eda477a83afa2367afcad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 40449,
        "upload_time": "2023-02-26T12:12:49",
        "upload_time_iso_8601": "2023-02-26T12:12:49.953752Z",
        "url": "https://files.pythonhosted.org/packages/50/c8/731fb81998f76b4a3ad24274ab7e4111214d994bb90aef9ce0d1b527be47/radicli-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b954246300963d54d767de16c2edb36d70bb9c1829a1fc0ea1393cecaf4d326e",
          "md5": "941beee48f3b8fd5be87b2861a14bdee",
          "sha256": "7c817c68bcf50c4ad54866540555455d4be564009b328a9f167bdcf6ea03ea5c"
        },
        "downloads": -1,
        "filename": "radicli-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "941beee48f3b8fd5be87b2861a14bdee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27568,
        "upload_time": "2023-02-26T15:51:37",
        "upload_time_iso_8601": "2023-02-26T15:51:37.364018Z",
        "url": "https://files.pythonhosted.org/packages/b9/54/246300963d54d767de16c2edb36d70bb9c1829a1fc0ea1393cecaf4d326e/radicli-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0162f10d57306c1c06c5403e7ba705b7adc8a388ef6c8d41d32e8061f996d865",
          "md5": "15ce859115b320b68f1ad33e26f207cf",
          "sha256": "82f4b486c86c747f80e23bff92778bd026ba97dbfdf9c13aa3e8e735787c5e91"
        },
        "downloads": -1,
        "filename": "radicli-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "15ce859115b320b68f1ad33e26f207cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 41011,
        "upload_time": "2023-02-26T15:51:38",
        "upload_time_iso_8601": "2023-02-26T15:51:38.654292Z",
        "url": "https://files.pythonhosted.org/packages/01/62/f10d57306c1c06c5403e7ba705b7adc8a388ef6c8d41d32e8061f996d865/radicli-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1efca753f7729f880a94fbd1e9eca5f173b9d7a41b0531346e4ec68fdf131893",
          "md5": "74622fe869c38bd36de78b89ad098488",
          "sha256": "b9665d590ec1a549ac4ae051853d2e3f132c804f5d89e683cdeaa2472e6f8644"
        },
        "downloads": -1,
        "filename": "radicli-0.0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74622fe869c38bd36de78b89ad098488",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27617,
        "upload_time": "2023-02-27T15:11:27",
        "upload_time_iso_8601": "2023-02-27T15:11:27.550105Z",
        "url": "https://files.pythonhosted.org/packages/1e/fc/a753f7729f880a94fbd1e9eca5f173b9d7a41b0531346e4ec68fdf131893/radicli-0.0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83115ce454cfbf274aa4a38ba41bdcb1a5cf2651980ae167ee4330e358c12c65",
          "md5": "3b0e5dc230f24c71ef75a17a8104291c",
          "sha256": "1f967fb1740b03d29d260d9edef0818084aa6ae66dd72c28b4696b0488d555f8"
        },
        "downloads": -1,
        "filename": "radicli-0.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "3b0e5dc230f24c71ef75a17a8104291c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 41025,
        "upload_time": "2023-02-27T15:11:29",
        "upload_time_iso_8601": "2023-02-27T15:11:29.378284Z",
        "url": "https://files.pythonhosted.org/packages/83/11/5ce454cfbf274aa4a38ba41bdcb1a5cf2651980ae167ee4330e358c12c65/radicli-0.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36779280b19587e7d6c59e479376215cc24d9e5dcb9ee00322356ad4e11dd5e7",
          "md5": "7a3c8f546ef84da502e117f1fc78d707",
          "sha256": "64da6931a712ad96a447a2e6e9e6fc68a11e02c7c5f40f2f43873942e1187db4"
        },
        "downloads": -1,
        "filename": "radicli-0.0.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a3c8f546ef84da502e117f1fc78d707",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 29022,
        "upload_time": "2023-03-07T16:00:41",
        "upload_time_iso_8601": "2023-03-07T16:00:41.487360Z",
        "url": "https://files.pythonhosted.org/packages/36/77/9280b19587e7d6c59e479376215cc24d9e5dcb9ee00322356ad4e11dd5e7/radicli-0.0.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f46cf89501d3d84e687c8e35e0f672d52ae632a461f19403ae9d0bd8a3585f9e",
          "md5": "2d75a7f16542df0af976043877099b0b",
          "sha256": "95ad4c7d6303f2de8e229d0585f06a0327f817fef480ab75f7b46854f61662f0"
        },
        "downloads": -1,
        "filename": "radicli-0.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "2d75a7f16542df0af976043877099b0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 42542,
        "upload_time": "2023-03-07T16:00:42",
        "upload_time_iso_8601": "2023-03-07T16:00:42.887891Z",
        "url": "https://files.pythonhosted.org/packages/f4/6c/f89501d3d84e687c8e35e0f672d52ae632a461f19403ae9d0bd8a3585f9e/radicli-0.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74c9d93dae277e0c4e5a90fe5174113c6eee9fa8ed756fb28882c04a54d41ab4",
          "md5": "6ce1c6d7324f938c45722b83f82c5697",
          "sha256": "f26f0edae79fb5c95221c2857daf8137baa519a4d70c7d60f116c991bd4917b8"
        },
        "downloads": -1,
        "filename": "radicli-0.0.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ce1c6d7324f938c45722b83f82c5697",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30352,
        "upload_time": "2023-03-08T15:06:56",
        "upload_time_iso_8601": "2023-03-08T15:06:56.905485Z",
        "url": "https://files.pythonhosted.org/packages/74/c9/d93dae277e0c4e5a90fe5174113c6eee9fa8ed756fb28882c04a54d41ab4/radicli-0.0.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8401b848373a43b3206f73e72da16ba275579538cddb64965b807c66de772d72",
          "md5": "7b0be2efd2ebe4c694b714b0a4833a65",
          "sha256": "e4abcb8fed6a3dd39a50c18e35d5bda66a2e8314fa71514acda3b17ea9442eec"
        },
        "downloads": -1,
        "filename": "radicli-0.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "7b0be2efd2ebe4c694b714b0a4833a65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 44306,
        "upload_time": "2023-03-08T15:06:58",
        "upload_time_iso_8601": "2023-03-08T15:06:58.436052Z",
        "url": "https://files.pythonhosted.org/packages/84/01/b848373a43b3206f73e72da16ba275579538cddb64965b807c66de772d72/radicli-0.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb2d8af839df84521c3d793676a4c7d7d8659abf1b4c2cbd8ee60b1305ea1b55",
          "md5": "b2788c8273bfcbed2ae00f9d132a117c",
          "sha256": "1f239f0d494dc9a2e0f1be9c34114fff2bfc987e9554eb0d9914d3802f7bb386"
        },
        "downloads": -1,
        "filename": "radicli-0.0.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2788c8273bfcbed2ae00f9d132a117c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30667,
        "upload_time": "2023-03-09T12:17:49",
        "upload_time_iso_8601": "2023-03-09T12:17:49.856856Z",
        "url": "https://files.pythonhosted.org/packages/fb/2d/8af839df84521c3d793676a4c7d7d8659abf1b4c2cbd8ee60b1305ea1b55/radicli-0.0.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7c8ca6ab8bd5a7eb6939b95e3bd26629ada13161f5522defa116a4faf34be21",
          "md5": "bc47793c63d31260b7ada4680fd0af6b",
          "sha256": "78e300f9a03fc8c0fb53518b9b236dcd0c3a2539b25121a867c59860aa5295c5"
        },
        "downloads": -1,
        "filename": "radicli-0.0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "bc47793c63d31260b7ada4680fd0af6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 44643,
        "upload_time": "2023-03-09T12:17:51",
        "upload_time_iso_8601": "2023-03-09T12:17:51.841630Z",
        "url": "https://files.pythonhosted.org/packages/b7/c8/ca6ab8bd5a7eb6939b95e3bd26629ada13161f5522defa116a4faf34be21/radicli-0.0.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cca3ea85ec3894fcd7d558f4e6e81798a58a948e1f7477ae8c838790237f482",
          "md5": "6ecdce2bc857ff61d77452cdbae9ad1e",
          "sha256": "07c04d6aa01f6e28374eb2bf6f903b454c5f1f4bb39a1649afec5725bdd701e1"
        },
        "downloads": -1,
        "filename": "radicli-0.0.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ecdce2bc857ff61d77452cdbae9ad1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30881,
        "upload_time": "2023-03-09T15:10:11",
        "upload_time_iso_8601": "2023-03-09T15:10:11.460938Z",
        "url": "https://files.pythonhosted.org/packages/8c/ca/3ea85ec3894fcd7d558f4e6e81798a58a948e1f7477ae8c838790237f482/radicli-0.0.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f312d43b1ad5a632e02d11b2ab5308ed042e684078de0a12d8b13e43c93d11b",
          "md5": "389dec082a3458382c0816a1d6f018d0",
          "sha256": "950f8956893aecbe66b83855b67bc3abe964b6a58c329fd275e99b9f7e43b8a7"
        },
        "downloads": -1,
        "filename": "radicli-0.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "389dec082a3458382c0816a1d6f018d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 44852,
        "upload_time": "2023-03-09T15:10:15",
        "upload_time_iso_8601": "2023-03-09T15:10:15.399476Z",
        "url": "https://files.pythonhosted.org/packages/3f/31/2d43b1ad5a632e02d11b2ab5308ed042e684078de0a12d8b13e43c93d11b/radicli-0.0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5e184c1c719b8c38d36a17cc0c859719d48efec16f7a9c1cb5d4e30610fdfda",
          "md5": "4805771ce6cae814022863dea5770dc2",
          "sha256": "2c5a51adc60ab2657c24c03521c18fc71589f7ad75c4408ff666415ac50ab904"
        },
        "downloads": -1,
        "filename": "radicli-0.0.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4805771ce6cae814022863dea5770dc2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31102,
        "upload_time": "2023-03-10T14:49:15",
        "upload_time_iso_8601": "2023-03-10T14:49:15.717333Z",
        "url": "https://files.pythonhosted.org/packages/c5/e1/84c1c719b8c38d36a17cc0c859719d48efec16f7a9c1cb5d4e30610fdfda/radicli-0.0.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "062384c74ae3409b9c2277584fa6e82782f5f3edef71b0bf08e68734c6384f6d",
          "md5": "8f6cfe46b079c4185430f85e7e5636ff",
          "sha256": "311df032396aa1605a46cfe123d7e41021b7d81b9bf4a58150477d83115dcf70"
        },
        "downloads": -1,
        "filename": "radicli-0.0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "8f6cfe46b079c4185430f85e7e5636ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 45269,
        "upload_time": "2023-03-10T14:49:17",
        "upload_time_iso_8601": "2023-03-10T14:49:17.559194Z",
        "url": "https://files.pythonhosted.org/packages/06/23/84c74ae3409b9c2277584fa6e82782f5f3edef71b0bf08e68734c6384f6d/radicli-0.0.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5c202b9400d125402cd14b84082ad518487c336a012d6942ee45cc3a0e78770",
          "md5": "8c2ea4bf83be842fe0aa0252ddf3e70d",
          "sha256": "f4303a7708264093b45d2a5534993ba9f3e6c1231625c0dcf3fe8816ae65f431"
        },
        "downloads": -1,
        "filename": "radicli-0.0.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c2ea4bf83be842fe0aa0252ddf3e70d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31387,
        "upload_time": "2023-03-17T22:24:02",
        "upload_time_iso_8601": "2023-03-17T22:24:02.368110Z",
        "url": "https://files.pythonhosted.org/packages/a5/c2/02b9400d125402cd14b84082ad518487c336a012d6942ee45cc3a0e78770/radicli-0.0.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbe2fb7066822f7fb783d620933a22204b72d126f157498a315bade29513989a",
          "md5": "63c07d54ce89716f56dc76a286cfa955",
          "sha256": "62cb9e58bce3753db79f893149d311b5b403629166fb723db21e3cec026d9be6"
        },
        "downloads": -1,
        "filename": "radicli-0.0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "63c07d54ce89716f56dc76a286cfa955",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 45528,
        "upload_time": "2023-03-17T22:24:04",
        "upload_time_iso_8601": "2023-03-17T22:24:04.265956Z",
        "url": "https://files.pythonhosted.org/packages/cb/e2/fb7066822f7fb783d620933a22204b72d126f157498a315bade29513989a/radicli-0.0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba95a934be4888ffd8f566169cb3cd8a52ffa711cc1269786cc8ae78e779183b",
          "md5": "083d2f0d20fc8c2857fcde4644796baa",
          "sha256": "27965418ff34b9d772b367aaa93fe7554489df011866457be559d4be8fc8453e"
        },
        "downloads": -1,
        "filename": "radicli-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "083d2f0d20fc8c2857fcde4644796baa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19885,
        "upload_time": "2023-02-08T23:05:19",
        "upload_time_iso_8601": "2023-02-08T23:05:19.892651Z",
        "url": "https://files.pythonhosted.org/packages/ba/95/a934be4888ffd8f566169cb3cd8a52ffa711cc1269786cc8ae78e779183b/radicli-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7116d880c98c916912881ca3e2abaabaade2571b3dec82874de47864a3e6236d",
          "md5": "e0d21a082b2c6e1bccdb935c2eacd64d",
          "sha256": "3b1391f2670a7af33373de6c99eefa2e2b4d15e44379d20aa4fb0145fc5fbec4"
        },
        "downloads": -1,
        "filename": "radicli-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e0d21a082b2c6e1bccdb935c2eacd64d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23762,
        "upload_time": "2023-02-08T23:05:21",
        "upload_time_iso_8601": "2023-02-08T23:05:21.869546Z",
        "url": "https://files.pythonhosted.org/packages/71/16/d880c98c916912881ca3e2abaabaade2571b3dec82874de47864a3e6236d/radicli-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e635f42c076c28180a7f5736129ed1a5ac1b2871c46e08c28145c7a5d5e757b",
          "md5": "0004f8c5fb7555eae6df80e7964d7a79",
          "sha256": "12063debeed47ce7954700fc248daf5f9a0977b97d0a446f69dc1776d1a4d06d"
        },
        "downloads": -1,
        "filename": "radicli-0.0.20-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0004f8c5fb7555eae6df80e7964d7a79",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31485,
        "upload_time": "2023-03-18T00:32:12",
        "upload_time_iso_8601": "2023-03-18T00:32:12.010150Z",
        "url": "https://files.pythonhosted.org/packages/4e/63/5f42c076c28180a7f5736129ed1a5ac1b2871c46e08c28145c7a5d5e757b/radicli-0.0.20-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d494c1d068ba9c3987540fd6baf660c24131fcb6d62d3cbf215b95e54c2aadc",
          "md5": "2230d0f95190410321c7a5c52732e1e1",
          "sha256": "bce2907d7d9759524d68c0b20e73fdeba18fceca0c36b27d083cac912c00e401"
        },
        "downloads": -1,
        "filename": "radicli-0.0.20.tar.gz",
        "has_sig": false,
        "md5_digest": "2230d0f95190410321c7a5c52732e1e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 45595,
        "upload_time": "2023-03-18T00:32:14",
        "upload_time_iso_8601": "2023-03-18T00:32:14.511308Z",
        "url": "https://files.pythonhosted.org/packages/8d/49/4c1d068ba9c3987540fd6baf660c24131fcb6d62d3cbf215b95e54c2aadc/radicli-0.0.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a258326c6c76bce25d45cd4fc328226c0cb754f2676b8e421f3b8a23b5532ea",
          "md5": "f360ea6fe7b6a3f1451550d89260cb1f",
          "sha256": "dd245c8a6f86b8e2b872e9655d90201e2021dbcc810c61c0dc5dfcfea2380c24"
        },
        "downloads": -1,
        "filename": "radicli-0.0.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f360ea6fe7b6a3f1451550d89260cb1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 34481,
        "upload_time": "2023-03-22T15:22:29",
        "upload_time_iso_8601": "2023-03-22T15:22:29.471783Z",
        "url": "https://files.pythonhosted.org/packages/9a/25/8326c6c76bce25d45cd4fc328226c0cb754f2676b8e421f3b8a23b5532ea/radicli-0.0.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6c4384cff15cfb969d4edda66cdccc59a43f7076789b8665ea715e6ed4f39a5",
          "md5": "50420f512b23d1051e34cd126ae11253",
          "sha256": "deb29e112257d92b4f1c0fc480692be27ba45bb2a206a94bd49e49100d0830a3"
        },
        "downloads": -1,
        "filename": "radicli-0.0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "50420f512b23d1051e34cd126ae11253",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 48803,
        "upload_time": "2023-03-22T15:22:32",
        "upload_time_iso_8601": "2023-03-22T15:22:32.581562Z",
        "url": "https://files.pythonhosted.org/packages/d6/c4/384cff15cfb969d4edda66cdccc59a43f7076789b8665ea715e6ed4f39a5/radicli-0.0.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd145970e9b5cc213350e957203a1cd2dbbee764a6017fa7bd6b500362db8cae",
          "md5": "4de1a683e4482a9aea04870b66e306cb",
          "sha256": "d8a5121ae00ab236695c0b97db43d407aeb06c1858c7e73e2f71158e23d46ed6"
        },
        "downloads": -1,
        "filename": "radicli-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4de1a683e4482a9aea04870b66e306cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19937,
        "upload_time": "2023-02-09T00:38:31",
        "upload_time_iso_8601": "2023-02-09T00:38:31.490591Z",
        "url": "https://files.pythonhosted.org/packages/bd/14/5970e9b5cc213350e957203a1cd2dbbee764a6017fa7bd6b500362db8cae/radicli-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c80030b97b0f38c3563505e86a39ff52318d577b91e54227fec9762f963a893d",
          "md5": "8b5c24b03f9b33f903daad540d3a59cd",
          "sha256": "a4e90a18854bad9fa3b311262575c8d9fed71bc7241dfe9202c60488e84cd592"
        },
        "downloads": -1,
        "filename": "radicli-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8b5c24b03f9b33f903daad540d3a59cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23859,
        "upload_time": "2023-02-09T00:38:33",
        "upload_time_iso_8601": "2023-02-09T00:38:33.304299Z",
        "url": "https://files.pythonhosted.org/packages/c8/00/30b97b0f38c3563505e86a39ff52318d577b91e54227fec9762f963a893d/radicli-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2877e4af4ac436785d3fc42662836f5b51a612777b1107c19a761b31ccb9f0a6",
          "md5": "dfb75e04e6fed48facfeaef8d56211bc",
          "sha256": "12c3695f0fa95e4fe4270dbbfcb3218703ba567e454150d6deab5df86a787ba4"
        },
        "downloads": -1,
        "filename": "radicli-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfb75e04e6fed48facfeaef8d56211bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 20425,
        "upload_time": "2023-02-17T12:12:07",
        "upload_time_iso_8601": "2023-02-17T12:12:07.959736Z",
        "url": "https://files.pythonhosted.org/packages/28/77/e4af4ac436785d3fc42662836f5b51a612777b1107c19a761b31ccb9f0a6/radicli-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fea45aec5fa50d84b76532af36100af3b3adfa948bbf1fccc52edec7c56cb39b",
          "md5": "82157ca0e9f863ca7f40eeeb740ef4ee",
          "sha256": "b6fb670f6ba10baf8fdb248ce3f573b1915692ec3070b5f5bc3bb726ed3c6b92"
        },
        "downloads": -1,
        "filename": "radicli-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "82157ca0e9f863ca7f40eeeb740ef4ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 24403,
        "upload_time": "2023-02-17T12:12:09",
        "upload_time_iso_8601": "2023-02-17T12:12:09.387609Z",
        "url": "https://files.pythonhosted.org/packages/fe/a4/5aec5fa50d84b76532af36100af3b3adfa948bbf1fccc52edec7c56cb39b/radicli-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6eeb640934b78eed52705fd2ec9617e09b36cc7d56a46fff7f21744e93f7aac",
          "md5": "a01eb16ea28e5bd051afbefd84360e05",
          "sha256": "e3180a1b61d6bef0a3da6570422ebce81b6538185c959fde810fc9c4ce3afa62"
        },
        "downloads": -1,
        "filename": "radicli-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a01eb16ea28e5bd051afbefd84360e05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21008,
        "upload_time": "2023-02-18T17:34:57",
        "upload_time_iso_8601": "2023-02-18T17:34:57.696681Z",
        "url": "https://files.pythonhosted.org/packages/f6/ee/b640934b78eed52705fd2ec9617e09b36cc7d56a46fff7f21744e93f7aac/radicli-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "582786b9bdd7a7d711c52faca05f2d4349712f6f090c3677bcef2431f48abc7d",
          "md5": "8731899967545d78a91fecc21431ffa7",
          "sha256": "e327a1f38f8bf7fa2efbf8371205de972ce15652b64611475df44f48287f88ee"
        },
        "downloads": -1,
        "filename": "radicli-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8731899967545d78a91fecc21431ffa7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25096,
        "upload_time": "2023-02-18T17:34:58",
        "upload_time_iso_8601": "2023-02-18T17:34:58.927941Z",
        "url": "https://files.pythonhosted.org/packages/58/27/86b9bdd7a7d711c52faca05f2d4349712f6f090c3677bcef2431f48abc7d/radicli-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85c2de9d2a8b090b4704cbac986baaf337e1a6ae52b966d79c3fc6a7bc344b7b",
          "md5": "77ab4cee95e292fbebafb440d7a1c229",
          "sha256": "0e040fbc762a8aa63a8efaca805f883c6846b19f3a5d97eea27b89214039160a"
        },
        "downloads": -1,
        "filename": "radicli-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77ab4cee95e292fbebafb440d7a1c229",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21056,
        "upload_time": "2023-02-18T17:58:40",
        "upload_time_iso_8601": "2023-02-18T17:58:40.867918Z",
        "url": "https://files.pythonhosted.org/packages/85/c2/de9d2a8b090b4704cbac986baaf337e1a6ae52b966d79c3fc6a7bc344b7b/radicli-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "100335eb905e446895358a98483af56ec813c2da6a92656a0552cb8d04b5dafa",
          "md5": "3357d4183b43e492ae00fdfd3124194c",
          "sha256": "30a9c57e09fa15c5cb1160231c99fb7c693529ee434848f5da79a50b15943241"
        },
        "downloads": -1,
        "filename": "radicli-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "3357d4183b43e492ae00fdfd3124194c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25154,
        "upload_time": "2023-02-18T17:58:42",
        "upload_time_iso_8601": "2023-02-18T17:58:42.620915Z",
        "url": "https://files.pythonhosted.org/packages/10/03/35eb905e446895358a98483af56ec813c2da6a92656a0552cb8d04b5dafa/radicli-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92626a59a8825592be5df39c4b4b290d482e39054019958cbeb546bcb816b954",
          "md5": "e091a3efacbb819a9cbeb3d0d49208fd",
          "sha256": "28e632f6b4ba3c39e03c3e21b1c2f17f7dc58c72bb127a6768ee074a8470e988"
        },
        "downloads": -1,
        "filename": "radicli-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e091a3efacbb819a9cbeb3d0d49208fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 22743,
        "upload_time": "2023-02-19T10:03:24",
        "upload_time_iso_8601": "2023-02-19T10:03:24.025622Z",
        "url": "https://files.pythonhosted.org/packages/92/62/6a59a8825592be5df39c4b4b290d482e39054019958cbeb546bcb816b954/radicli-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f694494f20bb09703c073aba6579a9005317942941ae8b7fa48ecc916487b71d",
          "md5": "2032acc5a54d8840b226b9caab052b4f",
          "sha256": "6af37095fc3f2d2a3866c77a4ac4684c9f45865e207c56db7e8cd2f1d2583672"
        },
        "downloads": -1,
        "filename": "radicli-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "2032acc5a54d8840b226b9caab052b4f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 27870,
        "upload_time": "2023-02-19T10:03:25",
        "upload_time_iso_8601": "2023-02-19T10:03:25.783454Z",
        "url": "https://files.pythonhosted.org/packages/f6/94/494f20bb09703c073aba6579a9005317942941ae8b7fa48ecc916487b71d/radicli-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46d3aa3ea225152df9c9869d2ae880afa873b5d6c06be07bd1a9a3f98210a322",
          "md5": "f226f8761f96aba9221141407b56abdb",
          "sha256": "b97f5cb1f2e8ada9ee1d99855d9b8df6e4becd15fd2cf272403d019ce486a337"
        },
        "downloads": -1,
        "filename": "radicli-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f226f8761f96aba9221141407b56abdb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23111,
        "upload_time": "2023-02-19T16:51:19",
        "upload_time_iso_8601": "2023-02-19T16:51:19.961868Z",
        "url": "https://files.pythonhosted.org/packages/46/d3/aa3ea225152df9c9869d2ae880afa873b5d6c06be07bd1a9a3f98210a322/radicli-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f61b0c9917d8c28b60719073270564d35ba7d58ac5e5599bd8d3809ad5bd7e3",
          "md5": "48d4de262d58154f0546d4e2953e0d82",
          "sha256": "6d9891ff0fafdcfa3f3de4b40d87e25784e263319f16128f0422f8a1814ff220"
        },
        "downloads": -1,
        "filename": "radicli-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "48d4de262d58154f0546d4e2953e0d82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 28315,
        "upload_time": "2023-02-19T16:51:21",
        "upload_time_iso_8601": "2023-02-19T16:51:21.327867Z",
        "url": "https://files.pythonhosted.org/packages/2f/61/b0c9917d8c28b60719073270564d35ba7d58ac5e5599bd8d3809ad5bd7e3/radicli-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b89e3679fbe1c3a4ac630c15c0305a3413ee95c841804ea4bed894b7444f1f77",
          "md5": "ae948d2ac23383158903009b29e7cc4f",
          "sha256": "be0e88d2dec5ef057508d5471411d79f0afdac2042caf2f2ef5a323b8889acc1"
        },
        "downloads": -1,
        "filename": "radicli-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae948d2ac23383158903009b29e7cc4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27036,
        "upload_time": "2023-02-21T12:38:26",
        "upload_time_iso_8601": "2023-02-21T12:38:26.418858Z",
        "url": "https://files.pythonhosted.org/packages/b8/9e/3679fbe1c3a4ac630c15c0305a3413ee95c841804ea4bed894b7444f1f77/radicli-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cc82d63f6e1fd40eaf43da4a7a6fd2b426e0f0d9871d395ed26f9bdf8ab0081",
          "md5": "1ce5cdb0f6ad4b26efb3c1313a461125",
          "sha256": "695c957cc9c28a57aca35da65c594c9a17a06e3e8d2f682cd8ecd004e61df098"
        },
        "downloads": -1,
        "filename": "radicli-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "1ce5cdb0f6ad4b26efb3c1313a461125",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 39549,
        "upload_time": "2023-02-21T12:38:28",
        "upload_time_iso_8601": "2023-02-21T12:38:28.383458Z",
        "url": "https://files.pythonhosted.org/packages/2c/c8/2d63f6e1fd40eaf43da4a7a6fd2b426e0f0d9871d395ed26f9bdf8ab0081/radicli-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a258326c6c76bce25d45cd4fc328226c0cb754f2676b8e421f3b8a23b5532ea",
        "md5": "f360ea6fe7b6a3f1451550d89260cb1f",
        "sha256": "dd245c8a6f86b8e2b872e9655d90201e2021dbcc810c61c0dc5dfcfea2380c24"
      },
      "downloads": -1,
      "filename": "radicli-0.0.21-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f360ea6fe7b6a3f1451550d89260cb1f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 34481,
      "upload_time": "2023-03-22T15:22:29",
      "upload_time_iso_8601": "2023-03-22T15:22:29.471783Z",
      "url": "https://files.pythonhosted.org/packages/9a/25/8326c6c76bce25d45cd4fc328226c0cb754f2676b8e421f3b8a23b5532ea/radicli-0.0.21-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6c4384cff15cfb969d4edda66cdccc59a43f7076789b8665ea715e6ed4f39a5",
        "md5": "50420f512b23d1051e34cd126ae11253",
        "sha256": "deb29e112257d92b4f1c0fc480692be27ba45bb2a206a94bd49e49100d0830a3"
      },
      "downloads": -1,
      "filename": "radicli-0.0.21.tar.gz",
      "has_sig": false,
      "md5_digest": "50420f512b23d1051e34cd126ae11253",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 48803,
      "upload_time": "2023-03-22T15:22:32",
      "upload_time_iso_8601": "2023-03-22T15:22:32.581562Z",
      "url": "https://files.pythonhosted.org/packages/d6/c4/384cff15cfb969d4edda66cdccc59a43f7076789b8665ea715e6ed4f39a5/radicli-0.0.21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}