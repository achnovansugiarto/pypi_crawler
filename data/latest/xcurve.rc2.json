{
  "info": {
    "author": "qqgroup",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "\n\n***\n# XCurveLearn: Machine Learning with X-Curve Metrics\n\n- [XCurveLearn: Machine Learning with X-Curve Metrics](#xcurvelearn-machine-learning-with-x-curve-metrics)\n  - [Latest News](#latest-news)\n  - [Introduction](#introduction)\n    - [Advantages of XCurveLearn](#advantages-of-xcurvelearn)\n    - [Wide Real-World Applications](#wide-real-world-applications)\n  - [Supported Curves in XCurveLearn](#supported-curves-in-xcurvelearn)\n  - [Installation](#installation)\n  - [Quickstart](#quickstart)\n  - [Contact \\& Contribution](#contact--contribution)\n  - [Citation](#citation)\n\n\n***Please visit the [website](https://XCurveLearn.org.cn) for more details on XCurveLearn!***\n\n---\n\n## Latest News\n- (New!) 2022.6ï¼š The XCurveLearn-v1.0.0 has been released! Please Try now!\n\n## Introduction\nIn recent years, Machine Learning (ML) has achieved significant advances in many domains, such as image recognition, machine translation, and biological information processing, promoting AI development. However, despite great success, it is well-known that the data often exhibits a **long-tailed/imbalanced property** in real-world applications, posing a critical challenge for the practical performances of deployed ML algorithms. Why? This is because the current studies are mainly established by **minimizing accuracy (or cross-entropy) criteria**, and then one needs to figure out a decision threshold to determine the category of samples on top of their prediction scores. In practice, such limited consideration of the decision threshold cannot adapt to the changes in data distributions and the growing business requirements, leading to unsatisfactory performance in real-world applications. \n\nTo overcome this, **XCurveLearn focuses on the design criteria of the objective function for ML tasks, which can be formulated as a series of X-metric (say AUROC, AUPRC, AUTKC) optimization problems considering the average performance of all decision thresholds during the training phase.**\n\nTo better understand how the XCurveLearn achieves such a goal, let us take AUROC as an example in a high-level manner, as shown in the following figure:\n\n\n \n\n### Advantages of XCurveLearn\n......\n### Wide Real-World Applications\nThere is a wide range of applications for XCurveLearn in the real world, especially the data following a long-tailed/imbalanced distribution. Several cases are listed below:\n\n\n\n## Supported Curves in XCurveLearn\n| X-Curve | Description |\n| :----: | :----: |\n| [XCurveLearn.AUROC]() | an efficient optimization library for Area Under the ROC curve (AUROC), such as multi-class AUROC and partial AUROC optimization. |\n| ... | ... |\n\n***More X-Curves are stepping up the development. Please stay tuned! ***\n\n## Installation\n<!--\nYou need the following packages to install XCurveLearn:\n```python\n- Python >= 3.6+\n- Pytorch >= 1.8+\n- Numpy >= 1.21+\n- scikit-learn >= 1.0+\n```-->\nYou can get XCurveLearn by\n```sh\npip install XCurveLearn\n```\n\n## Quickstart\nLet us take the multi-class AUROC optimization as an example curve here. Detailed tutorial could be found in the website (https://XCurveLearn.org.cn).\n\n```python\n'''\nWe refer the reader to see our paper <Learning with Multiclass AUC: Theory and Algorithms>\nif they are interested in the technical details of this example. \n'''\nimport torch\nfrom easydict import EasyDict as edict\n\n# import loss of AUROC\nfrom XCurveLearn.AUROC.losses import SquareAUCLoss\n\n# import optimier (or one can use any optimizer supported by PyTorch)\nfrom XCurveLearn.AUROC.optimizer import SGD\n\n# create model or you can adopt any DNN models by Pytorch\nfrom XCurveLearn.AUROC.models import generate_net\n\n# set params to create model\nargs = edict({\n    \"model_type\": \"resnet18\", # (support resnet18,resnet20, densenet121 and mlp)\n    \"num_classes\": 2,\n    \"pretrained\": None\n})\nmodel = generate_net(args).cuda()\n\nnum_classes = 2\n# create optimizer\noptimizer = SGD([params of your model], lr=...)\n\n# create loss criterion\ncriterion = SquareAUCLoss(\n    num_classes=num_classes, # number of classes\n    gamma=1.0, # safe margin\n    transform=\"ovo\" # the manner of computing the multi-classes AUROC Metric ('ovo' or 'ova').\n)\n\n# create Dataset (train_set, val_set, test_set) and dataloader (trainloader)\n# You can construct your own dataset/dataloader \n# but must ensure that there at least one sample for every class in each mini-batch \n# to calculate the AUROC loss. Or, you can do this:\nfrom XCurveLearn.AUROC.dataloaders import get_datasets\nfrom XCurveLearn.AUROC.dataloaders import get_data_loaders\n\n# set dataset params, see our doc. for more details.\ndataset_args = edict({\n    \"data_dir\": \"...\",\n    \"input_size\": [32, 32],\n    \"norm_params\": {\n        \"mean\": [123.675, 116.280, 103.530],\n        \"std\": [58.395, 57.120, 57.375]\n        },\n    \"use_lmdb\": True,\n    \"resampler_type\": \"None\",\n    \"sampler\": { # only used for binary classification\n        \"rpos\": 1,\n        \"rneg\": 10\n        },\n    \"npy_style\": True,\n    \"aug\": True, \n    \"class2id\": { # positive (minority) class idx\n        \"1\": 1\n    }\n})\n\ntrain_set, val_set, test_set = get_datasets(dataset_args)\ntrainloader, valloader, testloader = get_data_loaders(\n    train_set,\n    val_set,\n    test_set,\n    train_batch_size=32,\n    test_batch_size =64\n)\n# Note that, in the get_datasets(), we conduct stratified sampling for train_set  \n# using the StratifiedSampler at from XCurveLearn.AUROC.dataloaders import StratifiedSampler\n\n# forward of model\nfor x, target in trainloader:\n\n    x, target  = x.cuda(), target.cuda()\n    # target.shape => [batch_size, ]\n    # Note that we ask for the prediction of the model among [0,1] \n    # for any binary (i.e., sigmoid) or multi-class (i.e., softmax) AUROC optimization.\n\n    pred = model(x) # [batch_size, num_classess] when num_classes > 2, o.w. output [batch_size, ] \n\n    loss = criterion(pred, target)\n    \n    # backward\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n```\n\n## Contact & Contribution\nIf you find any issues or plan to contribute back bug-fixes, please contact us by [Shilong Bao](https://scholar.google.com.hk/citations?user=5ZCgkQkAAAAJ&hl=zh-CN) (Email: baoshilong@iie.ac.cn) or [Zhiyong Yang](https://joshuaas.github.io/) (Email: yangzhiyong21@ucas.ac.cn)\n\n*** The authors appreciate all contributions!***\n## Citation\nPlease cite our paper if you use this library in your own work:\n```\n@inproceedings{DBLP:conf/icml/YQBYXQ, \nauthor    = {Zhiyong Yang, Qianqian Xu, Shilong Bao, Yuan He, Xiaochun Cao and Qingming Huang},\n  title     = {When All We Need is a Piece of the Pie: A Generic Framework for Optimizing Two-way Partial AUC},\n  booktitle = {ICML},\n  pages     = {11820--11829},\n  year      = {2021}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/Statusrank/xcurve-opt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "XCurve",
    "package_url": "https://pypi.org/project/XCurve/",
    "platform": null,
    "project_url": "https://pypi.org/project/XCurve/",
    "project_urls": {
      "Homepage": "https://gitee.com/Statusrank/xcurve-opt"
    },
    "release_url": "https://pypi.org/project/XCurve/0.0.6/",
    "requires_dist": [
      "easydict (>=1.9)",
      "imbalanced-learn (>=0.9.1)",
      "lmdb (>=1.3.0)",
      "numpy (>=1.21.2)",
      "opencv-python (>=4.5.5.62)",
      "pandas (>=1.1.0)",
      "Pillow (>=9.1.1)",
      "pytest (>=7.1.2)",
      "scikit-learn (>=1.1.1)",
      "scipy (>=1.7.1)",
      "scikit-image (>=0.18.0)",
      "torch (>=1.11.0)",
      "torchvision (>=0.12.0)",
      "tqdm (>=4.62.2)"
    ],
    "requires_python": ">=3.8",
    "summary": "machine learning package",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14188057,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "999847df0973c9d058720b8869c46201ea5c05982ba27b2d88f9ba54eed74948",
          "md5": "f7612f805dfed4ff0ce802ce8bbd621e",
          "sha256": "45a95c158d0d702c366f35b1c03ee0fe327e64e317c7d241a221613ab99d9333"
        },
        "downloads": -1,
        "filename": "XCurve-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7612f805dfed4ff0ce802ce8bbd621e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 103218,
        "upload_time": "2022-06-20T10:13:46",
        "upload_time_iso_8601": "2022-06-20T10:13:46.723541Z",
        "url": "https://files.pythonhosted.org/packages/99/98/47df0973c9d058720b8869c46201ea5c05982ba27b2d88f9ba54eed74948/XCurve-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4287b3f559c1416ecbc7eab5656fdc7d7f60106fd623158f7b65d1eabb2a455",
          "md5": "d77044df9a9bdfbc26013c2fee10ebaf",
          "sha256": "d95ad623cdf5e7b37011cf3a7938c581cf688f5b3f0415c02a19e7b8f73855aa"
        },
        "downloads": -1,
        "filename": "XCurve-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d77044df9a9bdfbc26013c2fee10ebaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 33609,
        "upload_time": "2022-06-20T10:13:49",
        "upload_time_iso_8601": "2022-06-20T10:13:49.757049Z",
        "url": "https://files.pythonhosted.org/packages/a4/28/7b3f559c1416ecbc7eab5656fdc7d7f60106fd623158f7b65d1eabb2a455/XCurve-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e4986b5fd6d953c46ff4ca5a285aafacd3c03059dd0c37e4f7303cb56024012",
          "md5": "09a7665ec1314852805637aaf10a53fb",
          "sha256": "29e472fefaf5721e9a5f5ef8a7dcfc724e5b86e0b063f6dae915274f6751e96e"
        },
        "downloads": -1,
        "filename": "XCurve-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09a7665ec1314852805637aaf10a53fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 103226,
        "upload_time": "2022-06-20T14:08:37",
        "upload_time_iso_8601": "2022-06-20T14:08:37.205970Z",
        "url": "https://files.pythonhosted.org/packages/7e/49/86b5fd6d953c46ff4ca5a285aafacd3c03059dd0c37e4f7303cb56024012/XCurve-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a841051d829fe28824b4583523c9d5e83e0148de8abac221b67d8d27bc4ab8c7",
          "md5": "c856ffd01a234a32374a0c8d8ab7a9eb",
          "sha256": "9b46465f21c8a76339dfb48960f33d2ef8bc3aec32e9d991a895ed39bb34c3bd"
        },
        "downloads": -1,
        "filename": "XCurve-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c856ffd01a234a32374a0c8d8ab7a9eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 33608,
        "upload_time": "2022-06-20T14:08:39",
        "upload_time_iso_8601": "2022-06-20T14:08:39.280983Z",
        "url": "https://files.pythonhosted.org/packages/a8/41/051d829fe28824b4583523c9d5e83e0148de8abac221b67d8d27bc4ab8c7/XCurve-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e4986b5fd6d953c46ff4ca5a285aafacd3c03059dd0c37e4f7303cb56024012",
        "md5": "09a7665ec1314852805637aaf10a53fb",
        "sha256": "29e472fefaf5721e9a5f5ef8a7dcfc724e5b86e0b063f6dae915274f6751e96e"
      },
      "downloads": -1,
      "filename": "XCurve-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "09a7665ec1314852805637aaf10a53fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 103226,
      "upload_time": "2022-06-20T14:08:37",
      "upload_time_iso_8601": "2022-06-20T14:08:37.205970Z",
      "url": "https://files.pythonhosted.org/packages/7e/49/86b5fd6d953c46ff4ca5a285aafacd3c03059dd0c37e4f7303cb56024012/XCurve-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a841051d829fe28824b4583523c9d5e83e0148de8abac221b67d8d27bc4ab8c7",
        "md5": "c856ffd01a234a32374a0c8d8ab7a9eb",
        "sha256": "9b46465f21c8a76339dfb48960f33d2ef8bc3aec32e9d991a895ed39bb34c3bd"
      },
      "downloads": -1,
      "filename": "XCurve-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "c856ffd01a234a32374a0c8d8ab7a9eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 33608,
      "upload_time": "2022-06-20T14:08:39",
      "upload_time_iso_8601": "2022-06-20T14:08:39.280983Z",
      "url": "https://files.pythonhosted.org/packages/a8/41/051d829fe28824b4583523c9d5e83e0148de8abac221b67d8d27bc4ab8c7/XCurve-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}