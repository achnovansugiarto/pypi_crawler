{
  "info": {
    "author": "Florian Bruggisser",
    "author_email": "github@broox.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Multiview 3D Keypoint Detection (Muke) [![PyPI](https://img.shields.io/pypi/v/muke)](https://pypi.org/project/muke/)\nA simple approach to detect 3d keypoints by using 2d estimation methods and multiview rendering. The idea is based on the blender project for [automatic keypoint retopology](https://github.com/cansik/auto-keypoint-retopology).\nBasically the 3d model is rendered from various angles (views) and a 2d key-point detection is applied. For each detected keypoint a ray-cast is performed to detect the intersection point with the mesh surface. In the end all intersection of the different views are combined to calculate the actual 3d position of the keypoint inside the mesh. It is possible to define view dependent keypoint indices to extract only the ones that are visible in the current rendering. Muke return a list of 3d keypoints containing the position as well as the closest vertex index.\n\n![Visualisation](documentation/visualisation.png)\n*Muke Process*\n\nThe project was originally implemented to have a simple and fast solution for 3D keypoints detection for retopology purposes. However, it can also be used for any other application where 3D keypoints are needed, such as rigging, animation, etc.\n\n### Installation\n\nTo install the package use the following pip command:\n\n```bash\npip install muke\n```\n\n### Usage\nMuke can be used as a command line tool to extract the keypoints in a specific format (f.e. [Wrap3](https://www.russian3dscanner.com/)). For that a configuration has to be created which defines the detection parameters as well as the rendering views.\n\n#### Configuration\n\nExample configuration:\n\n```json\n{\n  \"description\": \"MP Face\",\n  \"detector\": \"media-pipe-face\",\n  \"resolution\": 1024,\n  \"generator\": \"wrap3\",\n  \"views\": [\n    {\n      \"name\": \"frontal\",\n      \"rotation\": 0,\n      \"keypoints\": [\n        4,\n        76,\n        306\n      ]\n    }\n  ]\n}\n```\n\nTo select a range of keypoint indices, it is possible to define a `start` and `end` (included) index. It is also possible to skip certain indices in that range. Here an example on how to create a range (`skip` is optional):\n\n```json\n{\n  \"start\": 10,\n  \"end\": 15,\n  \"skip\": [13, 14]\n}\n```\n\n#### Demo\n\n```bash\npython -m muke assets/person.ply --display --resolution 1024\n```\n\n```bash\npython -m muke temp/AlexedWrapped.obj --display --resolution 1024 --detector media-pipe-face\n```\n\n```bash\npython -m muke temp/AlexedWrapped.obj --display --config config/media-pipe-face.json\n```\n\n#### Help\n\n```bash\nusage: muke [-h] [--detector {media-pipe-pose,media-pipe-face}] [--resolution RESOLUTION] [--generator {wrap3}]\n            [--config CONFIG] [--display] [--debug]\n            input\n\nDetects keypoint locations in a 3d model.\n\npositional arguments:\n  input                 Input mesh to process.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --detector {media-pipe-pose,media-pipe-face}\n                        Detection method for 2d keypoint detection (default: media-pipe-pose).\n  --resolution RESOLUTION\n                        Render resolution for each view pass (default: 512).\n  --generator {wrap3}   Generator methods for output generation (default: wrap3).\n  --config CONFIG       Path to the configuration JSON file.\n  --display             Shows result rendering with keypoints (default: False)\n  --debug               Shows debug frames and information (default: False)\n```\n\n### Library\nIt is also possible to use Muke as a library to detect keypoints on an existing 3d mesh.\n\n```python\nimport open3d as o3d\n\nfrom muke.Muke import Muke\nfrom muke.detector.MediaPipePoseDetector import MediaPipePoseDetector\nfrom muke.model.DetectionView import DetectionView\n\n# load mesh from filesystem\nmesh = o3d.io.read_triangle_mesh(\"assets/person.ply\")\n\n# define rendered views\nkeypoint_indexes = {28, 27, 26, 25, 24, 23, 12, 11, 14, 13, 16, 15, 5, 2, 0}\nviews = [\n    DetectionView(\"front\", 0, keypoint_indexes),\n    DetectionView(\"back\", 180, keypoint_indexes),\n]\n\n# detect keypoints\nwith Muke(MediaPipePoseDetector()) as m:\n    result = m.detect(mesh, views)\n\n# present results\nfor kp in result:\n    print(f\"KP {kp.index}: {kp.x:.2f} {kp.y:.2f} {kp.z:.2f}\")\n```\n\n### Detectors\nIt is possible to implement custom keypoint detectors. The custom detector has to implement the `BaseDetector` interface as shown in the following example.\n\n```python\nimport numpy as np\n\nfrom muke.detector.BaseDetector import BaseDetector\nfrom muke.detector.KeyPoint2 import KeyPoint2\n\n\nclass CustomDetector(BaseDetector):\n    def setup(self):\n        # todo: initialize the custom detector\n        pass\n\n    def detect(self, image: np.ndarray) -> [KeyPoint2]:\n        # todo: implement the custom 2d keypoint detection \n        pass\n\n    def release(self):\n        # todo: clean up allocated resources\n        pass\n```\n\n### About\nMIT License - Copyright (c) 2022 Florian Bruggisser\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cansik/multiview-3d-keypoint-detection",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "muke",
    "package_url": "https://pypi.org/project/muke/",
    "platform": null,
    "project_url": "https://pypi.org/project/muke/",
    "project_urls": {
      "Homepage": "https://github.com/cansik/multiview-3d-keypoint-detection"
    },
    "release_url": "https://pypi.org/project/muke/0.2.2/",
    "requires_dist": [
      "wheel",
      "numpy",
      "open3d (>=0.16.0)",
      "opencv-python",
      "tqdm",
      "scipy",
      "mediapipe ; platform_system != \"Darwin\" or platform_machine != \"arm64\"",
      "mediapipe-silicon ; platform_system == \"Darwin\" and platform_machine == \"arm64\""
    ],
    "requires_python": "",
    "summary": "A simple approach to detect 3d keypoints by using 2d estimation methods and multiview rendering.",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16186784,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c614f0076c2f64cd0572d8b3b321c79571b855e2218db1df95e60c1fe7d8bec",
          "md5": "0060f58d52f61861763b7ff2784bc93d",
          "sha256": "08472c76a503788b4f5bd3b1d0850571202a9da90894d8a50151dbfbd7501008"
        },
        "downloads": -1,
        "filename": "muke-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0060f58d52f61861763b7ff2784bc93d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13345,
        "upload_time": "2022-12-01T15:33:29",
        "upload_time_iso_8601": "2022-12-01T15:33:29.698827Z",
        "url": "https://files.pythonhosted.org/packages/3c/61/4f0076c2f64cd0572d8b3b321c79571b855e2218db1df95e60c1fe7d8bec/muke-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0f1b45961224137f479f0cc6799746391d29e0efd6ffa9090651d163369a1c2",
          "md5": "1fb305bab1ac3080b600f13e3627c602",
          "sha256": "4e8ddfc2cfc6d46e76b188792a22ad65f9409ab323c77f8ad98e583d7c96cc84"
        },
        "downloads": -1,
        "filename": "muke-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fb305bab1ac3080b600f13e3627c602",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14604,
        "upload_time": "2022-12-22T14:45:27",
        "upload_time_iso_8601": "2022-12-22T14:45:27.628033Z",
        "url": "https://files.pythonhosted.org/packages/c0/f1/b45961224137f479f0cc6799746391d29e0efd6ffa9090651d163369a1c2/muke-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0f1b45961224137f479f0cc6799746391d29e0efd6ffa9090651d163369a1c2",
        "md5": "1fb305bab1ac3080b600f13e3627c602",
        "sha256": "4e8ddfc2cfc6d46e76b188792a22ad65f9409ab323c77f8ad98e583d7c96cc84"
      },
      "downloads": -1,
      "filename": "muke-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1fb305bab1ac3080b600f13e3627c602",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14604,
      "upload_time": "2022-12-22T14:45:27",
      "upload_time_iso_8601": "2022-12-22T14:45:27.628033Z",
      "url": "https://files.pythonhosted.org/packages/c0/f1/b45961224137f479f0cc6799746391d29e0efd6ffa9090651d163369a1c2/muke-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}