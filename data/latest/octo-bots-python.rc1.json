{
  "info": {
    "author": "Ofir Iluz",
    "author_email": "iluzofir@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Octo Bots\n====\n\n[![Bots Build Pipeline](https://github.com/ofiriluz/octo-bots-python/actions/workflows/build.yml/badge.svg)](https://github.com/ofiriluz/octo-bots-python/actions/workflows/build.yml)\n\n\nThe bots infrastructure gives easy to define easy to work with interface for actions on events and background jobs\n\nEach event that is triggered via github webhook, will be sent to the bots manager to execute different pre-defined bots\n\nEach bot is defined within a yaml file and can define its operations and filters on which the bot can run on\n\nAlong with that, background jobs may also be defined to run every X time and perform operations, similar to the bots\n\nStarting a new bots server\n--------------------------\n\nThe first thing that needs to be done in order to create a bots server, is define its configuration\n\nThe yaml configuration of the server may look as follows:\n```yaml\nsettings:\n  parallel-background-jobs: 10\n  bots-endpoint: /events\n  client-validity-time-minutes: 10\n  parallel-bots: true\ncredentials:\n  github-app-credentials:\n    api-url: https://api.github.com\n    app-name: octo-bot-app\n    certificate-path: ../data/cacert.pem\n    app-creds-path: ../data/github/octo_bot_github_app_creds.yml\n  checkmarx-credentials:\n    api-url: https://checkmarx.api.com\n    creds-path: ../data/checkmarx/octo_bot_checkmarx_creds.yml\nbots:\n  - ./bots/github_checkmarx_bot.yml\njobs:\n  - ./jobs/github_stale_job.yml\n```\n\nWhere:\n- settings - the global bots server settings\n    - parallel-background-jobs: Maximum amount of running parallel background jobs\n    - bots-endpoint: Listening endpoint which events will be sent to\n    - client-validity-time-minutes: For how long a client can be valid for connection (github/checkmarx)\n    - parallel-bots: Should the bots defined run in parallel or sequential\n- credentials - credentials for each client, currently supports\n    - github-app-credentials\n    - checkmarx-credentials\n- bots - List of files that define different bots\n- jobs - List of files that define different background jobs\n\nOnce the configuration is done, the bots server can be started, either by the bots_executor.py or by a wrapping script for example:\n\n```python\nflask_app = Flask(__name__)\n\nbots_manager = BotsManager.create_bots_manager(args.config_path, flask_app)\n\nbots_manager.start_bots_manager()\n\nflask_app.run(ssl_context=\"adhoc\", host=\"0.0.0.0\", port=8443)\n```\n\nDefining a new bot\n------------------\n\nEach bot is defined with a list of operations and a list of filters\n\nThe list of filters will assert whether the bots needs to run its operations or not on any event\n\nA set of bots are defined in a yaml configuration file, for example:\n```yaml\nbots:\n  - name: Checkmarx scan\n    parallel: true\n    operations:\n      - pull-request-checkmarx:\n          risk-scheme:\n            min-high-vuls: 1\n            min-medium-vuls: 20\n            min-low-vuls: 100\n            min-info-vuls: 10000\n          scan-timeout: 30 minutes\n    filters:\n      - events-filter:\n          events:\n            - name: pull_request\n              actions:\n                - opened\n                - reopened\n                - ready_for_review\n                - synchronize\n```\n\nThe above bot will define a name bot called *Checkmarx scan*\n\nThe bot will run its operations in parallel (currently only one operation)\n\nThe operation that will be ran is called *pull-request-checkmarx*\n\nAnd it has a set of parameters, such as the *risk-scheme*\n\nAlong with that, a list of filters are also set, such as the events-filter, which u can filter out which webhooks will trigger this bot, such as the pull_request webhook\n\nThe operation itself is defined in a python script, which overrides a base Operation\n```\noperations/github/pull_request_checkmarx_operation.py\n```\n\nOnce the bot is ready, it can be set within the main yaml configuration\n\nDefining a new background job\n-----------------------------\n\nThe same idea as the bot is applied here\nfor example:\n\n```yaml\njobs:\n  - name: Close stale issues and pull requests\n    parallel: true\n    operations:\n      - close-stale:\n          close-issues: true\n          close-prs: true\n          stale-expiration: 60 days\n          stale-comment: >\n              This issue has been automaticlly marked as stale because it has not had\n              recent activity. It will be closed and can be later re-opened.\n              Thanks for your contributions.\n          exempt-labels:\n            - hotfix\n            - release\n    every: \"30 minutes\"\n```\n\nFor example here the job is ran every 30 minutes, and will clean up stale pull requests and issues, close them and write a comment (github will also send a mail to the subscribers of the repo accordingly)\n\nDefining github app credentials\n------------------------------\nIn order to connect to github, we also need to define which application we are working with\n\nTo do so, we also define a seperate creds yaml file, which can be locally (or in the future from conjur):\n\n```yaml\napp-id: 1\nclient-id: some_client_id\nclient-secret: some_client_secret\nprivate-key-path: /some/path/to/app/key\nwebhook-secret: some_webhook_secret\n```\n\nThe above are the credentials which will be used in the main settings, to generate access tokens to github as the github app (bot) to act upon him and make actions\n\n\nAdding a new operation\n-----------------------\nIn order to add a new operation, we would need to create a new class which inherits the Operation class\n\nThe operation class is defined as follows:\n\n```python\noperations/operation.py\n\nclass Operation:\n    @abc.abstractstaticmethod\n    def create_operation(config: dict) -> 'Operation':\n        pass\n\n    @abc.abstractstaticmethod\n    def operation_type() -> str:\n        pass\n\n    @abc.abstractmethod\n    def execute_operation(self, clients: Dict[str, BotsBaseClient], headers: dict, event: dict):\n        pass\n```\n\nWhere:\n- create_operation: Receives the config dict from the yaml where we defined the operation and its parameters, and returns the created operation\n- operation_type: The operation type that we defined its name in the yaml\n- execute_operation: The actual operation logic, with inputs of a set of clients which we can use (github, checkmarx) and the validated event itself, after all the filters we defined\n\nOnce the operation was implemented, we can use it on the yaml as seen above\n\nAdding a new filter\n-------------------\nSimilarly, in order to add a new filter, we would implement the following interface\n\n```python\nfilters/filter.py\n\nclass Filter:\n    @abc.abstractstaticmethod\n    def create_filter(config: dict) -> \"Filter\":\n        pass\n\n    @abc.abstractstaticmethod\n    def filter_type() -> str:\n        pass\n\n    @abc.abstractmethod\n    def filter_event(self, clients: Dict[str, BotsBaseClient], headers: dict, event: dict) -> bool:\n        pass\n```\n\nWhere:\n- create_filter: Receives the config dict from the yaml where we defined the filter and its parameters, and returns the created filter\n- filter_type: The filter type that we defined its name in the yaml\n- execute_filter: The actual filter logic, with inputs of a set of clients which we can use (github, checkmarx) and the event itself, which we will filter (if it needs to be filtered, we will return True)\n\n\nAdding a new client\n--------------------\nTo add a new client, such as github or checkmarx, we would need to implement two classes, one for the credentials, and one for the actual client itself\n\nThe credentials class is defined as follows\n```python\nclass BotsBaseCredentials:\n    @abstractmethod\n    def create_authenticated_client(self, validity_time) -> BotsBaseClient:\n        pass\n\n    @abstractstaticmethod\n    def creds_type() -> str:\n        pass\n\n    @abstractstaticmethod\n    def client_type() -> str:\n        pass\n```\n\nWhere:\n- create_authenticated_client: Will create the client itself per the credentials, alrdy authenticated to the resource\n- creds_type: Name of the creds type\n- client_type: Name of the client\n\nAnd the client is defined as followsw:\n```python\nclass BotsBaseClient:\n    @abstractmethod\n    def is_valid_client(self) -> bool:\n        pass\n\n    @abstractmethod\n    def validate_request(self, request: Any) -> bool:\n        pass\n\n    @abstractstaticmethod\n    def client_type() -> str:\n        pass\n```\n\nWhere:\n- is_valid_client: Checks if the client itself is valid to be used, if not it will be recreated via the creds\n- validate_request: Tries and validates a given request if it can be even used in the first place\n- client_type: Name of the client\n\nOnce the above two are defined, the client will arrive to the operations as one of the clients in the dictionary, and can be casted and used accordingly\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ofiriluz/octo-bots-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "octo-bots-python",
    "package_url": "https://pypi.org/project/octo-bots-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/octo-bots-python/",
    "project_urls": {
      "Homepage": "https://github.com/ofiriluz/octo-bots-python"
    },
    "release_url": "https://pypi.org/project/octo-bots-python/1.0.0/",
    "requires_dist": [
      "PyGithub",
      "GitPython",
      "colorama",
      "flask",
      "dateparser",
      "CheckmarxPythonSDK",
      "requests",
      "pyyaml",
      "cryptography",
      "pydantic"
    ],
    "requires_python": ">= 3.8",
    "summary": "Octo bots management for github checks / bots",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14727478,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b767bafbbd73a5504db8c8ed0da7ee446dcce2e43a108853856f3bf5b37ccbfb",
          "md5": "c16a0b024aec43d742fd268ae9e1bc4b",
          "sha256": "b578ec4a48181c39333449af78d95210a6830dafb25663ea18594ada00b8e93d"
        },
        "downloads": -1,
        "filename": "octo_bots_python-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c16a0b024aec43d742fd268ae9e1bc4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.8",
        "size": 54398,
        "upload_time": "2022-08-11T09:55:33",
        "upload_time_iso_8601": "2022-08-11T09:55:33.892119Z",
        "url": "https://files.pythonhosted.org/packages/b7/67/bafbbd73a5504db8c8ed0da7ee446dcce2e43a108853856f3bf5b37ccbfb/octo_bots_python-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b767bafbbd73a5504db8c8ed0da7ee446dcce2e43a108853856f3bf5b37ccbfb",
        "md5": "c16a0b024aec43d742fd268ae9e1bc4b",
        "sha256": "b578ec4a48181c39333449af78d95210a6830dafb25663ea18594ada00b8e93d"
      },
      "downloads": -1,
      "filename": "octo_bots_python-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c16a0b024aec43d742fd268ae9e1bc4b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">= 3.8",
      "size": 54398,
      "upload_time": "2022-08-11T09:55:33",
      "upload_time_iso_8601": "2022-08-11T09:55:33.892119Z",
      "url": "https://files.pythonhosted.org/packages/b7/67/bafbbd73a5504db8c8ed0da7ee446dcce2e43a108853856f3bf5b37ccbfb/octo_bots_python-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}