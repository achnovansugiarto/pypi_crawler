{
  "info": {
    "author": "Pavlos Mitsoulis Ntompos, Ioakeim (Joakim) Lazakis",
    "author_email": "pavlos@kenza.ai, joakim@kenza.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# mab-ranking\n\nA library for Online Ranking with Multi-Armed-Bandits. This library is useful to find the best Top N items among a relatively small candidate set. \n\nFor example:\n1. Show the Top 5 News Articles among 200 articles every day\n2. Recommend the Top 10 Trending Products every week\n3. Rank components on websites to drive more engagement (Whole Page Optimization)\n\n## Installation\n\n### Prerequisites\n\nmab-ranking requires the following:\n\n1. Python (3.6, 3.7, 3.8)\n\n### Install mab-ranking\n\nAt the command line:\n\n    pip install mab-ranking\n\n## Getting started\n\nLet's say that you want to recommend the top 5 trending products to your website visitors every week among the 300 most selling products. Every Monday at some time T you'll define a new `RankBandit` implementation. For example:\n\n```\nnum_ranks = 5\nnum_arms = 300\nrank_bandit = IndependentBandits(num_ranks, BetaThompsonSampling, num_arms=num_arms)\n```\n\nThen, every time a visitor X is landed on your home page for the rest of the week, you need to select which 5 products to show them in section `Top Trending Products`. So, you'll do the following:\n\n```\nselected_arms = rank_bandit.choose()\n```\n\nLet's say that the `selected_arms` equals `[30, 2, 200, 42]`. That means that you need to show products, 30, 2, 200 and 42 in this order. You can keep your own mapping from product UUIDS to integer arm ids in your app's business logic.\n\nThe visitor X viewed this selected order. Let's say that (s)he clicked on products 2 and 42. Then the `rewards` list will be `[0.0, 1.0, 0.0, 1.0]`. So:\n\n```\nrewards = [0.0, 1.0, 0.0, 1.0]\nrank_bandit.choose(selected_arms, rewards)\n```\n\n## Implementation Details\n\nImplementations of `RankBandit`:\n- `IndependentBandits`: from [Microsoft Paper](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/kss_aaai2013.pdf), \"A Fast Bandit Algorithm for Recommendations to Users with Heterogeneous\" \n\nImplementations of `Bandit`:\n- `BetaThompsonSampling`: Beta Thompson Sampling MAB\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kenza-AI/mab-ranking",
    "keywords": "mab-ranking machine-learning machine-learning-deploy machine-learning-production multi-armed-bandits ranking online-ranking multi-armed-bandits-production",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mab-ranking",
    "package_url": "https://pypi.org/project/mab-ranking/",
    "platform": "",
    "project_url": "https://pypi.org/project/mab-ranking/",
    "project_urls": {
      "Homepage": "https://github.com/Kenza-AI/mab-ranking"
    },
    "release_url": "https://pypi.org/project/mab-ranking/0.0.1/",
    "requires_dist": [
      "boto3",
      "paramiko (<2.4.99,>=2.4.2)",
      "pathlib2 (<2.3.99,>=2.3.0)",
      "requests (<2.20.99,>=2.20.0)",
      "sagemaker (<1.50.99,>=1.50.0)",
      "six (<1.11.99,>=1.10)",
      "future (<0.17.99,>=0.16.0)"
    ],
    "requires_python": "~=3.5",
    "summary": "Online Ranking with Multi-Armed-Bandits",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7130645,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b691d73c7f14b74d5fb8b3196e8ba75a8e7aa0fbbcec977ab60095edcf7aaef0",
          "md5": "f52a97c6beab20528e34104ded7717d0",
          "sha256": "65911758f10b6e58956fafeb226b0c9c32fcf91648ea468ddd516945006c7e9e"
        },
        "downloads": -1,
        "filename": "mab_ranking-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f52a97c6beab20528e34104ded7717d0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "~=3.5",
        "size": 7132,
        "upload_time": "2020-04-29T17:21:44",
        "upload_time_iso_8601": "2020-04-29T17:21:44.300553Z",
        "url": "https://files.pythonhosted.org/packages/b6/91/d73c7f14b74d5fb8b3196e8ba75a8e7aa0fbbcec977ab60095edcf7aaef0/mab_ranking-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "368ddb95733eb2654a2692226ba40cfaed07c66e4463952464ed0acca95ed587",
          "md5": "28eeb0f8d063e687769ea8c876f6c4a4",
          "sha256": "cc2816306c28624f0be77cc9a99d685f376ea602134160d733c164721ad0baa6"
        },
        "downloads": -1,
        "filename": "mab-ranking-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "28eeb0f8d063e687769ea8c876f6c4a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.5",
        "size": 4634,
        "upload_time": "2020-04-29T17:21:46",
        "upload_time_iso_8601": "2020-04-29T17:21:46.247228Z",
        "url": "https://files.pythonhosted.org/packages/36/8d/db95733eb2654a2692226ba40cfaed07c66e4463952464ed0acca95ed587/mab-ranking-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b691d73c7f14b74d5fb8b3196e8ba75a8e7aa0fbbcec977ab60095edcf7aaef0",
        "md5": "f52a97c6beab20528e34104ded7717d0",
        "sha256": "65911758f10b6e58956fafeb226b0c9c32fcf91648ea468ddd516945006c7e9e"
      },
      "downloads": -1,
      "filename": "mab_ranking-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f52a97c6beab20528e34104ded7717d0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": "~=3.5",
      "size": 7132,
      "upload_time": "2020-04-29T17:21:44",
      "upload_time_iso_8601": "2020-04-29T17:21:44.300553Z",
      "url": "https://files.pythonhosted.org/packages/b6/91/d73c7f14b74d5fb8b3196e8ba75a8e7aa0fbbcec977ab60095edcf7aaef0/mab_ranking-0.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "368ddb95733eb2654a2692226ba40cfaed07c66e4463952464ed0acca95ed587",
        "md5": "28eeb0f8d063e687769ea8c876f6c4a4",
        "sha256": "cc2816306c28624f0be77cc9a99d685f376ea602134160d733c164721ad0baa6"
      },
      "downloads": -1,
      "filename": "mab-ranking-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "28eeb0f8d063e687769ea8c876f6c4a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.5",
      "size": 4634,
      "upload_time": "2020-04-29T17:21:46",
      "upload_time_iso_8601": "2020-04-29T17:21:46.247228Z",
      "url": "https://files.pythonhosted.org/packages/36/8d/db95733eb2654a2692226ba40cfaed07c66e4463952464ed0acca95ed587/mab-ranking-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}