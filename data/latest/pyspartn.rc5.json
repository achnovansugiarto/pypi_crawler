{
  "info": {
    "author": "",
    "author_email": "semuadmin <semuadmin@semuconsulting.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Environment :: MacOS X",
      "Environment :: Win32 (MS Windows)",
      "Environment :: X11 Applications",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: GIS",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# pyspartn\n\n[Current Status](#currentstatus) |\n[Installation](#installation) |\n[Reading](#reading) |\n[Parsing](#parsing) |\n[Generating](#generating) |\n[Serializing](#serializing) |\n[Examples](#examples) |\n[Graphical Client](#gui) |\n[Author & License](#author)\n\n`pyspartn` is an original Python 3 parser for the SPARTN &copy; GPS/GNSS protocol. SPARTN is an open-source GPS/GNSS [differential correction or DGPS](https://en.wikipedia.org/wiki/Differential_GPS) protocol published by u-blox.\n\n[SPARTN Protocol 2.01](https://www.spartnformat.org/download/) (available in the public domain).\nÂ© 2021 u-blox AG. All rights reserved.\n\nThe `pyspartn` homepage is located at [https://github.com/semuconsulting/pyspartn](https://github.com/semuconsulting/pyspartn).\n\nThis is an independent project and we have no affiliation whatsoever with u-blox.\n\n**FYI** There are companion libraries which handle standard NMEA 0183 &copy;, UBX &copy; (u-blox) and RTCM3 &copy; GNSS/GPS messages:\n- [pyubx2](http://github.com/semuconsulting/pyubx2) (**FYI** installing `pyubx2` via pip also installs `pynmeagps` and `pyrtcm`)\n- [pynmeagps](http://github.com/semuconsulting/pynmeagps)\n- [pyrtcm](http://github.com/semuconsulting/pyrtcm)\n\n## <a name=\"currentstatus\">Current Status</a>\n\n**WORK IN PROGRESS - CURRENTLY IN PRE-ALPHA.**\n\n<!--![Status](https://img.shields.io/pypi/status/pyspartn)-->\n![Release](https://img.shields.io/github/v/release/semuconsulting/pyspartn?include_prereleases)\n![Build](https://img.shields.io/github/actions/workflow/status/semuconsulting/pyspartn/main.yml?branch=main)\n![Codecov](https://img.shields.io/codecov/c/github/semuconsulting/pyspartn)\n![Release Date](https://img.shields.io/github/release-date-pre/semuconsulting/pyspartn)\n![Last Commit](https://img.shields.io/github/last-commit/semuconsulting/pyspartn)\n![Contributors](https://img.shields.io/github/contributors/semuconsulting/pyspartn.svg)\n![Open Issues](https://img.shields.io/github/issues-raw/semuconsulting/pyspartn)\n\nThe `SPARTNReader` class is fully functional and is capable of parsing individual SPARTN transport-layer messages from a binary data stream containing *solely* SPARTN data.\n\nThe `SPARTNMessage` class does not currently perform a full decrypt and decode of SPARTN payloads; it decodes the transport layer to identify message type/subtype, payload length and other key metadata. Full payload decode will be added in due course as and when voluntary development time permits - contributions welcome!\n\n**NB:** Decryption of SPARTN payloads requires a 128-bit AES Initialisation Vector (IV) derived from various fields in the message's transport layer. This in turn requires a `gnssTimeTag` value in 32-bit format (representing total seconds from the SPARTN time origin of 2010-01-01 00:00:00). If `timeTagtype = 1`, this can be derived directly from the message's transport layer. If `timeTagtype = 0`, however, it is necessary to convert an ambiguous 16-bit (half-days) timetag to 32-bit format. The [SPARTN 2.01 protocol specification](https://www.spartnformat.org/download/) provides *no details* on how to do this, but it appears to be necessary to use the 32-bit timetag or GPS Timestamp from an external concurrent SPARTN or UBX message from the same data source and stream. In other words, it appears SPARTN messages with `timeTagtype = 0` *cannot* be reliably decrypted in isolation.\n\nSee https://portal.u-blox.com/s/question/0D52p0000CimfsOCQQ/spartn-initialization-vector-iv-details for discussion.\n\n\nSphinx API Documentation in HTML format is available at [https://www.semuconsulting.com/pyspartn](https://www.semuconsulting.com/pyspartn).\n\nContributions welcome - please refer to [CONTRIBUTING.MD](https://github.com/semuconsulting/pyspartn/blob/master/CONTRIBUTING.md).\n\n[Bug reports](https://github.com/semuconsulting/pyspartn/blob/master/.github/ISSUE_TEMPLATE/bug_report.md) and [Feature requests](https://github.com/semuconsulting/pyspartn/blob/master/.github/ISSUE_TEMPLATE/feature_request.md) - please use the templates provided.\n\n---\n## <a name=\"installation\">Installation</a>\n\n`pyspartn` is compatible with Python >=3.7 and has no third-party library dependencies.\n\nIn the following, `python` & `pip` refer to the Python 3 executables. You may need to type \n`python3` or `pip3`, depending on your particular environment.\n\n![Python version](https://img.shields.io/pypi/pyversions/pyspartn.svg?style=flat)\n[![PyPI version](https://img.shields.io/pypi/v/pyspartn)](https://pypi.org/project/pyspartn/)\n![PyPI downloads](https://img.shields.io/pypi/dm/pyspartn.svg?style=flat)\n\nThe recommended way to install the latest version of `pyspartn` is with\n[pip](http://pypi.python.org/pypi/pip/):\n\n```shell\npython -m pip install --upgrade pyspartn\n```\n\nIf required, `pyspartn` can also be installed into a virtual environment, e.g.:\n\n```shell\npython3 -m pip install --user --upgrade virtualenv\npython3 -m virtualenv env\nsource env/bin/activate (or env\\Scripts\\activate on Windows)\n(env) python3 -m pip install --upgrade pyspartn\n...\ndeactivate\n```\n\n---\n## <a name=\"reading\">Reading (Streaming)</a>\n\n```\nclass pyspartn.spartnreader.SPARTNReader(stream, **kwargs)\n```\n\nYou can create a `SPARTNReader` object by calling the constructor with an active stream object. \nThe stream object can be any data stream which supports a `read(n) -> bytes` method (e.g. File or Serial, with \nor without a buffer wrapper). `pyspartn` implements an internal `SocketStream` class to allow sockets to be read in the same way as other streams (see example below).\n\nIndividual SPARTN messages can then be read using the `SPARTNReader.read()` function, which returns both the raw binary data (as bytes) and the parsed data (as a `SPARTNMMessage`, via the `parse()` method). The function is thread-safe in so far as the incoming data stream object is thread-safe. `SPARTNReader` also implements an iterator.\n\nExample -  Serial input:\n```python\n>>> from serial import Serial\n>>> from pyspartn import SPARTNReader\n>>> stream = Serial('/dev/tty.usbmodem14101', 9600, timeout=3)\n>>>spr = SPARTNReader(stream)\n>>> (raw_data, parsed_data) = spr.read()\n>>> print(parsed_data)\n\n```\n\nExample - File input (using iterator).\n```python\n>>> from pyspartn import SPARTNReader\n>>> stream = open('spartndata.log', 'rb')\n>>> spr = SPARTNReader(stream)\n>>> for (raw_data, parsed_data) in spr: print(parsed_data)\n...\n```\n\nExample - Socket input (using iterator):\n```python\n>>> import socket\n>>> from pyspartn import SPARTNReader\n>>> stream = socket.socket(socket.AF_INET, socket.SOCK_STREAM):\n>>> stream.connect((\"localhost\", 50007))\n>>> spr = SPARTNReader(stream)\n>>> for (raw_data, parsed_data) in spr: print(parsed_data)\n```\n\n---\n## <a name=\"parsing\">Parsing</a>\n\nYou can parse individual SPARTN messages using the static `SPARTNReader.parse(data)` function, which takes a bytes array containing a binary SPARTN message and returns a `SPARTNMessage` object.\n\n**NB:** Once instantiated, a `SPARTNMMessage` object is immutable.\n\nExample:\n```python\n>>> from pyspartn import SPARTNReader\n>>> msg = SPARTNReader.parse(b\"s\\x00\\x12\\xe2\\x00|\\x10[\\x12H\\xf5\\t\\xa0\\xb4+\\x99\\x02\\x15\\xe2\\x05\\x85\\xb7\\x83\\xc5\\xfd\\x0f\\xfe\\xdf\\x18\\xbe\\x7fv \\xc3`\\x82\\x98\\x10\\x07\\xdc\\xeb\\x82\\x7f\\xcf\\xf8\\x9e\\xa3ta\\xad\")\n>>> print(msg)\n<SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)>\n```\n\nThe `SPARTNMessage` object exposes different public attributes depending on its message type or 'identity':\n\n```python\n>>> print(msg)\n<SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)>\n>>> msg.identity\n'SPARTN-1X-OCB-GPS'\n>>> msg.gnssTimeTag\n3970\n```\n\nThe `payload` attribute always contains the raw payload as bytes.\n\n---\n## <a name=\"generating\">Generating</a>\n\n```\nclass pyspartn.spartnmessage.SPARTNMessage(**kwargs)\n```\n\nYou can create an `SPARTNMessage` object by calling the constructor with the following keyword arguments:\n1. transport as bytes\n\nExample:\n\n```python\n>>> from pyspartn import SPARTNMessage\n>>> msg = SPARTNMessage(transport=b\"s\\x00\\x12\\xe2\\x00|\\x10[\\x12H\\xf5\\t\\xa0\\xb4+\\x99\\x02\\x15\\xe2\\x05\\x85\\xb7\\x83\\xc5\\xfd\\x0f\\xfe\\xdf\\x18\\xbe\\x7fv \\xc3`\\x82\\x98\\x10\\x07\\xdc\\xeb\\x82\\x7f\\xcf\\xf8\\x9e\\xa3ta\\xad\")\n>>> print(msg)\n<SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)>\n```\n\n---\n## <a name=\"serializing\">Serializing</a>\n\nThe `SPARTNMessage` class implements a `serialize()` method to convert a `SPARTNMMessage` object to a bytes array suitable for writing to an output stream.\n\ne.g. to create and send a `1005` message type:\n\n```python\n>>> from serial import Serial\n>>> serialOut = Serial('COM7', 38400, timeout=5)\n>>> from pyspartn import SPARTNMessage\n>>> msg = SPARTNMessage(transport=b\"s\\x00\\x12\\xe2\\x00|\\x10[\\x12H\\xf5\\t\\xa0\\xb4+\\x99\\x02\\x15\\xe2\\x05\\x85\\xb7\\x83\\xc5\\xfd\\x0f\\xfe\\xdf\\x18\\xbe\\x7fv \\xc3`\\x82\\x98\\x10\\x07\\xdc\\xeb\\x82\\x7f\\xcf\\xf8\\x9e\\xa3ta\\xad\")\n>>> print(msg)\n<SPARTN(SPARTN-1X-OCB-GPS, msgType=0, msgSubtype=0, nData=37, eaf=1, crcType=2, frameCrc=2, timeTagtype=0, gnssTimeTag=3970, solutionId=5, solutionProcId=11)>\n>>> output = msg.serialize()\n>>> output\nb\"s\\x00\\x12\\xe2\\x00|\\x10[\\x12H\\xf5\\t\\xa0\\xb4+\\x99\\x02\\x15\\xe2\\x05\\x85\\xb7\\x83\\xc5\\xfd\\x0f\\xfe\\xdf\\x18\\xbe\\x7fv \\xc3`\\x82\\x98\\x10\\x07\\xdc\\xeb\\x82\\x7f\\xcf\\xf8\\x9e\\xa3ta\\xad\"\n>>> serialOut.write(output)\n```\n\n---\n## <a name=\"examples\">Examples</a>\n\nThe following examples are available in the /examples folder:\n\n1. `sparnparser.py` - illustrates how to parse SPARTN messages from a binary input file.\n2. `rxmpmp_extract_spartn.py` - ilustrates how to parse SPARTN messages from the payload of a UBX RXM-PMP message output by an L-Band correction receiver (e.g. D9S).\n\n---\n## <a name=\"gui\">Graphical Client</a>\n\nA python/tkinter graphical GPS client which supports NMEA, UBX, RTCM3 and SPARTN protocols is available at: \n\n[https://github.com/semuconsulting/PyGPSClient](https://github.com/semuconsulting/PyGPSClient)\n\n---\n## <a name=\"author\">Author & License Information</a>\n\nsemuadmin@semuconsulting.com\n\n![License](https://img.shields.io/github/license/semuconsulting/pyspartn.svg)\n\n`pyspartn` is maintained entirely by unpaid volunteers. It receives no funding from advertising or corporate sponsorship. If you find the library useful, a small donation would be greatly appreciated!\n\n[![Donations](https://www.paypalobjects.com/en_GB/i/btn/btn_donate_LG.gif)](https://www.paypal.com/donate/?business=UL24WUA4XHNRY&no_recurring=0&item_name=The+SEMU+GNSS+Python+libraries+are+maintained+entirely+by+unpaid+volunteers.+All+donations+are+greatly+appreciated.&currency_code=GBP)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD 3-Clause License (\"BSD License 2.0\", \"Revised BSD License\", \"New BSD License\", or \"Modified BSD License\")  Copyright (c) 2023, SEMU Consulting All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the <organization> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ",
    "maintainer": "",
    "maintainer_email": "semuadmin <semuadmin@semuconsulting.com>",
    "name": "pyspartn",
    "package_url": "https://pypi.org/project/pyspartn/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyspartn/",
    "project_urls": {
      "changelog": "https://github.com/semuconsulting/pyspartn/blob/master/RELEASE_NOTES.md",
      "documentation": "https://www.semuconsulting.com/pyspartn/",
      "homepage": "https://github.com/semuconsulting/pyspartn",
      "repository": "https://github.com/semuconsulting/pyspartn"
    },
    "release_url": "https://pypi.org/project/pyspartn/0.1.4/",
    "requires_dist": [
      "cryptography (>=39.0.2)",
      "black (>=23.1) ; extra == 'test'",
      "pylint (>=2.17) ; extra == 'test'",
      "pytest (>=7.2) ; extra == 'test'",
      "pytest-cov (>=4.0) ; extra == 'test'",
      "Sphinx (>=6.1.3) ; extra == 'test'",
      "sphinx-rtd-theme (>=1.2.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "SPARTN protocol parser",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17474317,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1fbefdfce40926a08f5acbbaec02f4c706cbdd53a91eee32dc39fe5581ca6f1",
          "md5": "a88eff96e7daae500a8a2dfab0c8362d",
          "sha256": "b167d6337f3ebb94d606254c51c67db6f9f6849dd77f8e255eff617e687861e3"
        },
        "downloads": -1,
        "filename": "pyspartn-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a88eff96e7daae500a8a2dfab0c8362d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13871,
        "upload_time": "2023-02-12T21:49:05",
        "upload_time_iso_8601": "2023-02-12T21:49:05.442783Z",
        "url": "https://files.pythonhosted.org/packages/d1/fb/efdfce40926a08f5acbbaec02f4c706cbdd53a91eee32dc39fe5581ca6f1/pyspartn-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f0e82a759c1a3d99f01a7ea4bc36ac678ce592a0230976b55d4b5e82b625c33",
          "md5": "436581f562589753bc8d459898663140",
          "sha256": "bc34773f9b5bbe33824b6f31713d84f1865db5b43a0df5366e92e110730d2fd8"
        },
        "downloads": -1,
        "filename": "pyspartn-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "436581f562589753bc8d459898663140",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15200,
        "upload_time": "2023-02-12T21:49:07",
        "upload_time_iso_8601": "2023-02-12T21:49:07.252083Z",
        "url": "https://files.pythonhosted.org/packages/8f/0e/82a759c1a3d99f01a7ea4bc36ac678ce592a0230976b55d4b5e82b625c33/pyspartn-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "848e2cd4c50161abf802d4a023b24075309382327be04bc321ecc1c6ff1edb41",
          "md5": "6cbe0309f847785518330ff987fda733",
          "sha256": "57f123b8e98b452a68d067ebd1584d263a5ab82a19fae433c33636a3dea5e3e6"
        },
        "downloads": -1,
        "filename": "pyspartn-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6cbe0309f847785518330ff987fda733",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17844,
        "upload_time": "2023-02-14T14:00:52",
        "upload_time_iso_8601": "2023-02-14T14:00:52.753667Z",
        "url": "https://files.pythonhosted.org/packages/84/8e/2cd4c50161abf802d4a023b24075309382327be04bc321ecc1c6ff1edb41/pyspartn-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1054a10f5ab8cf2bbd7d7251c77dce916a62c0248442492a2f5d2538d1b98e01",
          "md5": "70363c8a5f68b37852f1223e4c7d7289",
          "sha256": "fc77ec29c70bc3acd9f43458714acc8d8c6ecfdac359f289434b37d9e899cc4d"
        },
        "downloads": -1,
        "filename": "pyspartn-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "70363c8a5f68b37852f1223e4c7d7289",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22044,
        "upload_time": "2023-02-14T14:00:54",
        "upload_time_iso_8601": "2023-02-14T14:00:54.876854Z",
        "url": "https://files.pythonhosted.org/packages/10/54/a10f5ab8cf2bbd7d7251c77dce916a62c0248442492a2f5d2538d1b98e01/pyspartn-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecb612d194848fc6ff381a6740560f0b91f8d33f4c72afac9ea43c8471201e2a",
          "md5": "61a3525e9ace8a8ec19076cea2ae6a3d",
          "sha256": "6986af4bf31017ed1316d08775ac576e03c00bc70aebd31d8a01495e3d8dd0f4"
        },
        "downloads": -1,
        "filename": "pyspartn-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61a3525e9ace8a8ec19076cea2ae6a3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18649,
        "upload_time": "2023-02-18T21:44:03",
        "upload_time_iso_8601": "2023-02-18T21:44:03.744261Z",
        "url": "https://files.pythonhosted.org/packages/ec/b6/12d194848fc6ff381a6740560f0b91f8d33f4c72afac9ea43c8471201e2a/pyspartn-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1edb3833306cea982d85f6e42fe905c8bfbf4250a26bd054dcd4033376dcb6ff",
          "md5": "80049b3c8cbf8eded1ef8faf4bae248d",
          "sha256": "cdf5f51a636f2a4d8610cdd5cd82cd06846401dd7d73cb710aca9ce5dd875051"
        },
        "downloads": -1,
        "filename": "pyspartn-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "80049b3c8cbf8eded1ef8faf4bae248d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22972,
        "upload_time": "2023-02-18T21:44:05",
        "upload_time_iso_8601": "2023-02-18T21:44:05.023484Z",
        "url": "https://files.pythonhosted.org/packages/1e/db/3833306cea982d85f6e42fe905c8bfbf4250a26bd054dcd4033376dcb6ff/pyspartn-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a317bd170c054e8466e5f2ea0e7d7ff0a45df41621a99bed81cc6d56942028f5",
          "md5": "19f7016bf05ad8cbfe22aabef6373313",
          "sha256": "dabb8d87c37d5464564008a753b653e3d23d96d3986185e6c0eda0149fcfb534"
        },
        "downloads": -1,
        "filename": "pyspartn-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19f7016bf05ad8cbfe22aabef6373313",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18769,
        "upload_time": "2023-02-22T22:26:27",
        "upload_time_iso_8601": "2023-02-22T22:26:27.050491Z",
        "url": "https://files.pythonhosted.org/packages/a3/17/bd170c054e8466e5f2ea0e7d7ff0a45df41621a99bed81cc6d56942028f5/pyspartn-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd5f2fcf2be0ed40f3fc3d62a03b3048f0f1613364b6e8f704aa749cc552a0b3",
          "md5": "667a5d6c14820b9c0fe95d1e2f44c7d1",
          "sha256": "9a41f5c2ea3d0a83c20a42996cf3b178e903f8ef454a68c049e7e868672c464b"
        },
        "downloads": -1,
        "filename": "pyspartn-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "667a5d6c14820b9c0fe95d1e2f44c7d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 36174,
        "upload_time": "2023-02-22T22:26:28",
        "upload_time_iso_8601": "2023-02-22T22:26:28.427740Z",
        "url": "https://files.pythonhosted.org/packages/bd/5f/2fcf2be0ed40f3fc3d62a03b3048f0f1613364b6e8f704aa749cc552a0b3/pyspartn-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15b70313efb143179bfb50e35489b8f9bbf687af952b8281b63cab24da1802f5",
          "md5": "af042083f51eeb5b189f38211269f312",
          "sha256": "90dbe45a3512cab1baa96ba9abf2a6e048e88895c4f004dbf74084f6796e9fbf"
        },
        "downloads": -1,
        "filename": "pyspartn-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af042083f51eeb5b189f38211269f312",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25397,
        "upload_time": "2023-03-28T07:23:25",
        "upload_time_iso_8601": "2023-03-28T07:23:25.550966Z",
        "url": "https://files.pythonhosted.org/packages/15/b7/0313efb143179bfb50e35489b8f9bbf687af952b8281b63cab24da1802f5/pyspartn-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15b70313efb143179bfb50e35489b8f9bbf687af952b8281b63cab24da1802f5",
        "md5": "af042083f51eeb5b189f38211269f312",
        "sha256": "90dbe45a3512cab1baa96ba9abf2a6e048e88895c4f004dbf74084f6796e9fbf"
      },
      "downloads": -1,
      "filename": "pyspartn-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af042083f51eeb5b189f38211269f312",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25397,
      "upload_time": "2023-03-28T07:23:25",
      "upload_time_iso_8601": "2023-03-28T07:23:25.550966Z",
      "url": "https://files.pythonhosted.org/packages/15/b7/0313efb143179bfb50e35489b8f9bbf687af952b8281b63cab24da1802f5/pyspartn-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}