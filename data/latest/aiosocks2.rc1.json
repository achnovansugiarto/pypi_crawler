{
  "info": {
    "author": "UltrafunkAmsterdam",
    "author_email": "info@blackhatsecurity.nl",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "SOCKS proxy client for asyncio and aiohttp\n==========================================\n.. image:: https://travis-ci.org/ultrafunkamsterdam/aiosocks2.svg?branch=master\n  :target: https://travis-ci.org/ultrafunkamsterdam/aiosocks2\n  :align: right\n\n.. image:: https://coveralls.io/repos/github/ultrafunkamsterdam/aiosocks2/badge.svg?branch=master\n  :target: https://coveralls.io/github/ultrafunkamsterdam/aiosocks2?branch=master\n  :align: right\n\n.. image:: https://badge.fury.io/py/aiosocks2.svg\n  :target: https://badge.fury.io/py/aiosocks2\n\n\nDependencies\n------------\npython 3.5+\naiohttp 2.3.2+\n\nFeatures\n--------\n- Fixed original library to use in 2021 onwards\n- SOCKS4, SOCKS4a and SOCKS5 version\n- ProxyConnector for aiohttp\n- SOCKS \"CONNECT\" command\n\nTODO\n----\n- UDP associate\n- TCP port binding\n\nInstallation\n------------\nYou can install it using Pip:\n\n.. code-block::\n\n  pip install aiosocks2\n\nIf you want the latest development version, you can install it from source:\n\n.. code-block::\n\n  git clone git@github.com:ultrafunkamsterdam/aiosocks2.git\n  cd aiosocks2\n  python setup.py install\n\nUsage\n-----\ndirect usage\n^^^^^^^^^^^^\n\n.. code-block:: python\n\n  import asyncio\n  import aiosocks2\n\n\n  async def connect():\n    socks5_addr = aiosocks2.Socks5Addr('127.0.0.1', 1080)\n    socks4_addr = aiosocks2.Socks4Addr('127.0.0.1', 1080)\n    \n    socks5_auth = aiosocks2.Socks5Auth('login', 'pwd')\n    socks4_auth = aiosocks2.Socks4Auth('ident')\n  \n    dst = ('github.com', 80)\n    \n    # socks5 connect\n    transport, protocol = await aiosocks2.create_connection(\n        lambda: Protocol, proxy=socks5_addr, proxy_auth=socks5_auth, dst=dst)\n    \n    # socks4 connect\n    transport, protocol = await aiosocks2.create_connection(\n        lambda: Protocol, proxy=socks4_addr, proxy_auth=socks4_auth, dst=dst)\n        \n    # socks4 without auth and local domain name resolving\n    transport, protocol = await aiosocks2.create_connection(\n        lambda: Protocol, proxy=socks4_addr, proxy_auth=None, dst=dst, remote_resolve=False)\n\n    # use socks protocol\n    transport, protocol = await aiosocks2.create_connection(\n        None, proxy=socks4_addr, proxy_auth=None, dst=dst)\n  \n  if __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(connect())\n    loop.close()\n\n\n**A wrapper for create_connection() returning a (reader, writer) pair**\n\n.. code-block:: python\n\n    # StreamReader, StreamWriter\n    reader, writer = await aiosocks2.open_connection(\n        proxy=socks5_addr, proxy_auth=socks5_auth, dst=dst, remote_resolve=True)\n\n    data = await reader.read(10)\n    writer.write('data')\n\nerror handling\n^^^^^^^^^^^^^^\n\n`SocksError` is a base class for:\n    - `NoAcceptableAuthMethods`\n    - `LoginAuthenticationFailed`\n    - `InvalidServerVersion`\n    - `InvalidServerReply`\n\n.. code-block:: python\n\n    try:\n      transport, protocol = await aiosocks2.create_connection(\n          lambda: Protocol, proxy=socks5_addr, proxy_auth=socks5_auth, dst=dst)\n    except aiosocks2.SocksConnectionError:\n      # connection error\n    except aiosocks2.LoginAuthenticationFailed:\n      # auth failed\n    except aiosocks2.NoAcceptableAuthMethods:\n      # All offered SOCKS5 authentication methods were rejected\n    except (aiosocks2.InvalidServerVersion, aiosocks2.InvalidServerReply):\n      # something wrong\n    except aiosocks2.SocksError:\n      # something other\n\nor\n\n.. code-block:: python\n\n    try:\n      transport, protocol = await aiosocks2.create_connection(\n          lambda: Protocol, proxy=socks5_addr, proxy_auth=socks5_auth, dst=dst)\n    except aiosocks2.SocksConnectionError:\n        # connection error\n    except aiosocks2.SocksError:\n        # socks error\n\naiohttp usage\n^^^^^^^^^^^^^\n\n.. code-block:: python\n\n  import asyncio\n  import aiohttp\n  import aiosocks2\n  from aiosocks2.connector import ProxyConnector, ProxyClientRequest\n\n\n  async def load_github_main():\n    auth5 = aiosocks2.Socks5Auth('proxyuser1', password='pwd')\n    auth4 = aiosocks2.Socks4Auth('proxyuser1')\n    ba = aiohttp.BasicAuth('login')\n\n    # remote resolve\n    conn = ProxyConnector(remote_resolve=True)\n\n    # or locale resolve\n    conn = ProxyConnector(remote_resolve=False)\n\n    try:\n      with aiohttp.ClientSession(connector=conn, request_class=ProxyClientRequest) as session:\n        # socks5 proxy\n        async with session.get('http://github.com/', proxy='socks5://127.0.0.1:1080',\n                               proxy_auth=auth5) as resp:\n          if resp.status == 200:\n            print(await resp.text())\n\n        # socks4 proxy\n        async with session.get('http://github.com/', proxy='socks4://127.0.0.1:1081',\n                               proxy_auth=auth4) as resp:\n          if resp.status == 200:\n            print(await resp.text())\n\n        # http proxy\n        async with session.get('http://github.com/', proxy='http://127.0.0.1:8080',\n                               proxy_auth=ba) as resp:\n          if resp.status == 200:\n            print(await resp.text())\n    except aiohttp.ClientProxyConnectionError:\n      # connection problem\n    except aiohttp.ClientConnectorError:\n      # ssl error, certificate error, etc\n    except aiosocks2.SocksError:\n      # communication problem\n\n\n  if __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(load_github_main())\n    loop.close()",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ultrafunkamsterdam/aiosocks2",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiosocks2",
    "package_url": "https://pypi.org/project/aiosocks2/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiosocks2/",
    "project_urls": {
      "Homepage": "https://github.com/ultrafunkamsterdam/aiosocks2"
    },
    "release_url": "https://pypi.org/project/aiosocks2/0.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SOCKS proxy client for asyncio and aiohttp",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11746382,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88d72288bfa31836be4e5157b2b524b28bb6d2d7ca73ce8b55d8b95dc3778d29",
          "md5": "1dc5cd07f34a5f2d6d32f60f427bb092",
          "sha256": "16e51721a9deb5950b990e8777cf647276ec735d955e13731667c3319a6afa76"
        },
        "downloads": -1,
        "filename": "aiosocks2-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1dc5cd07f34a5f2d6d32f60f427bb092",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11356,
        "upload_time": "2021-10-16T18:00:29",
        "upload_time_iso_8601": "2021-10-16T18:00:29.326420Z",
        "url": "https://files.pythonhosted.org/packages/88/d7/2288bfa31836be4e5157b2b524b28bb6d2d7ca73ce8b55d8b95dc3778d29/aiosocks2-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88d72288bfa31836be4e5157b2b524b28bb6d2d7ca73ce8b55d8b95dc3778d29",
        "md5": "1dc5cd07f34a5f2d6d32f60f427bb092",
        "sha256": "16e51721a9deb5950b990e8777cf647276ec735d955e13731667c3319a6afa76"
      },
      "downloads": -1,
      "filename": "aiosocks2-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1dc5cd07f34a5f2d6d32f60f427bb092",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11356,
      "upload_time": "2021-10-16T18:00:29",
      "upload_time_iso_8601": "2021-10-16T18:00:29.326420Z",
      "url": "https://files.pythonhosted.org/packages/88/d7/2288bfa31836be4e5157b2b524b28bb6d2d7ca73ce8b55d8b95dc3778d29/aiosocks2-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}