{
  "info": {
    "author": "Sandro Meireles",
    "author_email": "sandro.meirelesdev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "<img src=\"https://image.prntscr.com/image/xrHhAMB7T-CWvSU1u9_myw.png\" width=\"550\" align=\"right\">\n\n# pyMarkupL\n(Python Markup Language) Streamline the production of your HTML page using this python framework.\n\nCreating an HTML page can be very repetitive,\noften having to copy and paste multiple lines\ncode to modify minimal things, like a\ndescription.\n\npyMarkupL greatly speeds up this process, giving\npossibility to create elements with parameters\nand / or fully customizable sub-elements.\n\n## Installation\n - To install pyMarkupL, simply run this command in your terminal of choice:  \n `> pip install pyMarkupL`\n\nRight after installation, the command `pml` will be available, to check if everything was installed correctly open a terminal and do the following command:\n-  `> pml ok`\n\nIf you do not receive a response it means there was a problem during installation.\n\n## Starting a project\nTo start developing your page, you must first organize your work environment.  \nEnter a directory where you want to store your code, run the following command:\n- `> pml init`\n\nThis command will generate a set of files needed to run your application, to do a brief test, run `manage.py` passing as `run` argument:\n- `> python manage.py run`\n\nThis will generate a file in `output/debug` named `debug.html` as configured in `settings.py`.  \nFor more information on how to generate your page go to the \"Run\" topic.\n## Understanding the Structure\n\n\nThis is the structure of the files in the repository.\n\n\n```\n│   settings.py\n│    manage.py\n│  \n└── src\n    │   main.py\n    │\n    └── components\n        │   box.py\n        │   toolbar.py\n        │   text.py\n        │\n        └──static\n            └── style.py   \n```\n\nThe way the entire project is structured is at the discretion of the developer, I used this pattern as an example only.\n\n- `settings.py` Where we configure some aspects of our project.\n\n```py\nfrom src.main import Main\n\nMAIN_ELEMENT = Main\n```\n`MAIN_ELEMENT` Is a constant, where we tell our project which is the main element,which in this example is `Main`.\n\nThese constants can be changed at any time, again, as stated before:\nthe way the entire project is structured is at the discretion of the developer.\n\n- `src/` All components of that project are found here.\n\n```\n└── src\n    │   main.py\n    │\n    └── components\n        │   box.py\n        │   toolbar.py\n        │   text.py\n        │\n        └──static\n            └── style.py \n```\n\n- `src/main.py` Contains the main element, the one that was called in `settings.py`\n\n```py\nfrom core.elements import Element\nfrom src.components.static.style import MyStyle\nfrom src.components.toolbar import Toolbar\nfrom src.components.box import Box\n\nclass Main(Element):\n\n    def render(self, **kwargs):\n        return '''\n            <MyStyle>\n            <Toolbar(title=\"pyMarkupL\")>\n            <div class=\"container\">\n                <Box(title=\"Title 1\")>\n                <Box(title=\"Title 2\")>\n                <Box(title=\"Title 3\")>\n            </div>\n        '''\n```\nSee how simple it is to create an element.\n```py\nfrom core.elements import Element\n```\n- We import of `Element` which is in `core.elements`  \nThis is an abstract class, to create an element just inherit it and add/modify some parameters and methods.\n\n```py\n\nclass Main(Element):\n    ...\n```\n- We created a class that inherits from `Element`, thus indicating that `Main` is an element  \nWith just these steps we already have an element, however, it does not render anything, if you try to run an element like this you will receive an EmptyCode error.\nThat's why the `render` method exists.\n\n```py\ndef render(self, **kwargs) -> str:\n    return '''\n        ...\n    '''\n```\n- The \"render\" method is responsible for returning one or more elements, both HTML and pML Elememnts (Classes that inherit from `Element`).\nThis method must return a `str` and, within that string, can contain HTML elements:\n```html\n<div class=\"container\">\n    ...\n</div>\n```\nand pML elements:\n```html\n<Toolbar(title=\"pyMarkupL\")>\n```\nThere is no limit on the number of elements being returned, be careful only with the syntax, because depending on the error nothing will be raised.  \nDon't worry if you can't understand what `<Toolbar(title=\"pyMarkupL\")>` does, or how it works, right after this topic we'll explain everything right.  \n...\n\n## Run\n\nTo test this application use the command:\n- `> python manage.py run`\n\nThis will generate a file in `output/debug` named `debug.html` as configured in `settings.py`.  \nTo modify the path of this file change the constant `UTPUT_DEBUG` in `settings.py`\n\n---\n\nThis documentation is still in production, so give this repository a star, as soon as possible we will finalize\n\n## Goal\n\nThis framework aims to facilitate the creation of html pages using python code. it will be possible to: create reusable elements that can change its parameters, run a local server to view specific pages and components, thus facilitating testing, among other features.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sandro-Meireles/pyMarkupL",
    "keywords": "pymarkupl html react css javascript",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyMarkupL",
    "package_url": "https://pypi.org/project/pyMarkupL/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyMarkupL/",
    "project_urls": {
      "Homepage": "https://github.com/Sandro-Meireles/pyMarkupL",
      "Source": "https://github.com/Sandro-Meireles/pyMarkupL"
    },
    "release_url": "https://pypi.org/project/pyMarkupL/1.0.0b2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Streamline the production of your HTML page using this python framework.",
    "version": "1.0.0b2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9340733,
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03a03e1110d734657840031ac044d63420e7d88e45fb149897527aafa0a42e34",
          "md5": "f6b79262f79d0e64419a7aa6dc5e7eaf",
          "sha256": "273cf38ff27c4a9643e65e0c94a8553917654762a99e3d9f7a70a790b496be40"
        },
        "downloads": -1,
        "filename": "pyMarkupL-1.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6b79262f79d0e64419a7aa6dc5e7eaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9915,
        "upload_time": "2021-02-07T05:29:42",
        "upload_time_iso_8601": "2021-02-07T05:29:42.922973Z",
        "url": "https://files.pythonhosted.org/packages/03/a0/3e1110d734657840031ac044d63420e7d88e45fb149897527aafa0a42e34/pyMarkupL-1.0.0b1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "272e1b6e7a08de613b9f14b2d0f8003ca434d9d90f4ca7bda6623546509920b2",
          "md5": "0cb4e4063f3065a0e58c8752705bc074",
          "sha256": "783e4073362b669cf4473571adbff7d3fba384fd9c72e21aa21cd77c2340ae80"
        },
        "downloads": -1,
        "filename": "pyMarkupL-1.0.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "0cb4e4063f3065a0e58c8752705bc074",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11478,
        "upload_time": "2021-02-07T06:27:32",
        "upload_time_iso_8601": "2021-02-07T06:27:32.822143Z",
        "url": "https://files.pythonhosted.org/packages/27/2e/1b6e7a08de613b9f14b2d0f8003ca434d9d90f4ca7bda6623546509920b2/pyMarkupL-1.0.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "272e1b6e7a08de613b9f14b2d0f8003ca434d9d90f4ca7bda6623546509920b2",
        "md5": "0cb4e4063f3065a0e58c8752705bc074",
        "sha256": "783e4073362b669cf4473571adbff7d3fba384fd9c72e21aa21cd77c2340ae80"
      },
      "downloads": -1,
      "filename": "pyMarkupL-1.0.0b2.tar.gz",
      "has_sig": false,
      "md5_digest": "0cb4e4063f3065a0e58c8752705bc074",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11478,
      "upload_time": "2021-02-07T06:27:32",
      "upload_time_iso_8601": "2021-02-07T06:27:32.822143Z",
      "url": "https://files.pythonhosted.org/packages/27/2e/1b6e7a08de613b9f14b2d0f8003ca434d9d90f4ca7bda6623546509920b2/pyMarkupL-1.0.0b2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}