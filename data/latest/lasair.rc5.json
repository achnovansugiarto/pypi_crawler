{
  "info": {
    "author": "RoyWilliams",
    "author_email": "roy@roe.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "# lasair_api\nClient package for Lasair\n\nNAME\n    lasair - Lasair API\n\nDESCRIPTION\n    This class enables programmatic access to the Lasair database and Sherlock service, \n    as described at http://lasair-ztf.lsst.ac.uk/api/.\n    \n    Args:\n        token (string): The Calls are throttled by the lasair server, by use of an \n        'authorization token', as described in the api documentation above. \n        There is a free token listed there, but it is throttled at 10 calls per hour. \n        Once a user has an account at the Lasair webserver, they can get their own token\n        allowing 100 calls per hour, or request to be a power user, with infinite usage.\n    \n        cache (string): Results can be cached on a local filesystem, by providing \n        the name of a writable directory. If the same calls are made repeatedly, \n        this will be much more efficient.\n\nCLASSES\n    class lasair_client(builtins.object)\n       Methods defined here:\n       \n       __init__(self, token, cache=None, endpoint='http://192.41.108.37:8080/api')\n           Initialize self.  See help(type(self)) for accurate signature.\n           Args:\n               cache: name of a directory where results can be cached \n               endpoint: endpoint of the Lasair API service\n       \n       cone(self, ra, dec, radius=5, requestType='all')\n           Run a cone search on the Lasair database.\n           Args:\n               ra (float): Right Ascension in decimal degrees\n               dec (float): Declination in decimal degrees\n               radius (float): cone radius in arcseconds (default is 5)\n               requestType: Can be 'all' to return all objects in the cone\n                   Can be 'nearest', only the nearest object within the cone\n                   Can be 'count', the number of objects within the cone\n           \n           Returns a dictionary with:\n               objectId: The ID of the nearest object\n               separation: the separation in arcseconds\n       \n       lightcurves(self, objectIds)\n           Get simple lightcurves in machine-readable form\n           args:\n               objectIds: list of objectIds, maximum 10\n           return:\n               list of dictionaries, one for each objectId. Each of these\n               is a list of dictionaries, each having attributes\n               candid, fid, magpsf, sigmapsf, isdiffpos, mjd\n       \n       objects(self, objectIds)\n           Get object pages in machine-readable form\n           args:\n               objectIds: list of objectIds, maximum 10\n           return:\n               list of dictionaries, each being all the information presented\n               on the Lasair object page.\n       \n       query(self, selected, tables, conditions, limit=1000, offset=0)\n           Run a database query on the Lasair server.\n           args: \n               selected (string): The attributes to be returned by the query\n               tables (string): Comma-separated list of tables to be joined\n               conditions (string): the \"WHERE\" criteria to restrict what is returned\n               limit: (int) (default 1000) the maximum number of records to return\n               offset: (int) (default 0) offset of record number\n           return:\n               a list of dictionaries, each representing a row\n       \n       sherlock_objects(self, objectIds, lite=True)\n           Query the Sherlock database for context information about objects\n               in the database.\n           args:\n               objectsIds: list of objectIds, maximum 10\n               lite (boolean): If true, get extended information including a \n                   list of possible crossmatches.\n           return:\n               list of dictionaries, one for each objectId.\n       \n       sherlock_position(self, ra, dec, lite=True)\n           Query the Sherlock database for context information about a position\n               in the sky.\n           args:\n               ra (float): Right Ascension in decimal degrees\n               dec (float): Declination in decimal degrees\n               lite (boolean): If true, get extended information including a \n                   list of possible crossmatches.\n           return:\n               dictionary of contect information\n       \n       streams(self, topic, limit=1000)\n           Get records from a given stream\n           args:\n               topic (string): Name of stream to be returned.\n           return:\n               list of dictionaries, each representing a row\n       \n       streams_topics(self, regex='.*', limit=1000)\n           Get a list of available streams that match a given expression.\n           args:\n               regex (string, default .*): Search for stream names that match a pattern\n               limit: (int, default 1000): Maximum number of stream names to return.\n           return:\n               List of stream names\n\n        annotate(self, topic, objectId, classification, \\\n            version='0.1', explanation='', classdict={}, url='')\n            Send an annotation to Lasair\n            Note: Only the registered owner of this topic can send annotations to it\n            args:\n                topic         : the topic for which this user is authenticated\n                objectId      : the object that this annotation should be attached to\n                classification: short string for the classification\n                version       : the version of the annotation engine\n                explanation   : natural language explanation\n                classdict     : dictionary with further information\n                url           : url with further information about this classification\n            return:\n                Status message\n\n    class lasair_consumer(builtins.object)\n       Consume a Kafka stream from Lasair\n       \n       __init__(self, host, group_id, topic_in):\n            Consume a Kafka stream from Lasair\n            args:\n                host:     Host name:port for consuming Kafka\n                group_id: a string. If used before, the server will start from last message\n                topic_in: The topic to be consumed. Example 'lasair_2SN-likecandidates'\n            Imports confluent_kafka.\n            Connects to Lasair public kafka to get the chosen topic.\n            Once you have the returned consumer object, run it with poll() like this:\n            loop:\n                msg = consumer.poll(timeout=20)\n                if msg is None: break  # no messages to fetch\n                if msg.error(): \n                    print(str(msg.error()))\n                    break\n                jmsg = json.loads(msg.value())  # msg will be in json format\n\n        poll(self, timeout = 10):\n            Polls for a message on the consumer with timeout is seconds\n\n    class lasair_producer():\n        Creates a Kafka producer for Lasair annotations\n\n        def __init__(self, host, username, password, topic_out):\n            Tell the Lasair client that you will be producing annotations\n            args:\n                host:     Host name:port for producing Kafka\n                username: as given to you by Lasair staff\n                password: as given to you by Lasair staff\n                topic_out: as given to you by Lasair staff\n            Imports confluent_kafka.\n\n        def produce(self, objectId, classification, \\\n            version=None, explanation=None, classdict=None, url=None):\n            Send an annotation to Lasair\n            args:\n                objectId      : the object that this annotation should be attached to\n                classification: short string for the classification\n                version       : the version of the annotation engine\n                explanation   : natural language explanation\n                classdict     : dictionary with further information\n    \n        def flush(self):\n            Finish an annotation session and close the producer\n            If not called, your annotations will not go through!\n\n\n\n\nCopyright 2022 The University of Edinburgh and Queen's University Belfast\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this code except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lasair-uk/lasair_api",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lasair",
    "package_url": "https://pypi.org/project/lasair/",
    "platform": null,
    "project_url": "https://pypi.org/project/lasair/",
    "project_urls": {
      "Homepage": "https://github.com/lasair-uk/lasair_api"
    },
    "release_url": "https://pypi.org/project/lasair/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A client for the Lasair database",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15788581,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8042f4f51627819faec499c87420dba07ca759a150c3c0e09148796bc6568950",
          "md5": "ed9a51a0ed8d464fb4567e75d6ebf79f",
          "sha256": "893081a4f9d365d6078728aa93bde073d47ed317d6dbe850c24e6b42095ddaee"
        },
        "downloads": -1,
        "filename": "lasair-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ed9a51a0ed8d464fb4567e75d6ebf79f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4230,
        "upload_time": "2021-04-02T07:32:55",
        "upload_time_iso_8601": "2021-04-02T07:32:55.961160Z",
        "url": "https://files.pythonhosted.org/packages/80/42/f4f51627819faec499c87420dba07ca759a150c3c0e09148796bc6568950/lasair-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fb5805308ffc13158530a15e96d49eaca488b550633f373e8e777824a456fa7",
          "md5": "a32ab989d807ff64edebc99fd38ae440",
          "sha256": "fed4c5c26507ec4b6fea4ef3883a39a8e09c251d01d549f0b9a59ffe53a70866"
        },
        "downloads": -1,
        "filename": "lasair-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a32ab989d807ff64edebc99fd38ae440",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6439,
        "upload_time": "2021-09-29T13:57:07",
        "upload_time_iso_8601": "2021-09-29T13:57:07.224059Z",
        "url": "https://files.pythonhosted.org/packages/8f/b5/805308ffc13158530a15e96d49eaca488b550633f373e8e777824a456fa7/lasair-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56cf806df52bbbbecbb77d12f80d5244b6a48ec235163777326fd4d7ff611ddf",
          "md5": "41e7c471b0adb29208ecdeea6888eaff",
          "sha256": "cd421d2d2d3fd051d9ea552458a8d2f27b670595e7a05172efadac33c1f6914f"
        },
        "downloads": -1,
        "filename": "lasair-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "41e7c471b0adb29208ecdeea6888eaff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6869,
        "upload_time": "2021-10-07T13:15:46",
        "upload_time_iso_8601": "2021-10-07T13:15:46.464341Z",
        "url": "https://files.pythonhosted.org/packages/56/cf/806df52bbbbecbb77d12f80d5244b6a48ec235163777326fd4d7ff611ddf/lasair-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a661fcfbf4290dd534815471d13a085b292afee783ba40723e188f15fb75e5fb",
          "md5": "76742a211fac0233ea549f343be96ac0",
          "sha256": "d295a9a9072d8a78c58af3a6f422a49bf58be87b1048be067d843e4c0468f3e0"
        },
        "downloads": -1,
        "filename": "lasair-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "76742a211fac0233ea549f343be96ac0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11218,
        "upload_time": "2022-07-18T11:46:03",
        "upload_time_iso_8601": "2022-07-18T11:46:03.117543Z",
        "url": "https://files.pythonhosted.org/packages/a6/61/fcfbf4290dd534815471d13a085b292afee783ba40723e188f15fb75e5fb/lasair-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dd4e4b0a98213fc3203b65adc4dd017ebca716218eb908265e55bbf684c3397",
          "md5": "b87512f1f26e855dc0c916e5f5a72ac2",
          "sha256": "1976aca70288982fa3c7c4b2d73467355c4e91761790d7bafee9bed869dd1e21"
        },
        "downloads": -1,
        "filename": "lasair-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b87512f1f26e855dc0c916e5f5a72ac2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11227,
        "upload_time": "2022-11-16T13:12:54",
        "upload_time_iso_8601": "2022-11-16T13:12:54.302296Z",
        "url": "https://files.pythonhosted.org/packages/3d/d4/e4b0a98213fc3203b65adc4dd017ebca716218eb908265e55bbf684c3397/lasair-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3dd4e4b0a98213fc3203b65adc4dd017ebca716218eb908265e55bbf684c3397",
        "md5": "b87512f1f26e855dc0c916e5f5a72ac2",
        "sha256": "1976aca70288982fa3c7c4b2d73467355c4e91761790d7bafee9bed869dd1e21"
      },
      "downloads": -1,
      "filename": "lasair-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "b87512f1f26e855dc0c916e5f5a72ac2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11227,
      "upload_time": "2022-11-16T13:12:54",
      "upload_time_iso_8601": "2022-11-16T13:12:54.302296Z",
      "url": "https://files.pythonhosted.org/packages/3d/d4/e4b0a98213fc3203b65adc4dd017ebca716218eb908265e55bbf684c3397/lasair-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}