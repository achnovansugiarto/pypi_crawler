{
  "info": {
    "author": "",
    "author_email": "Ubiwhere <geral@ubiwhere.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django_wso2is\nA Django application that enables authentication against a remote WSO2 Identity Server.\n\n## Installation\n`pip install django-wso2is-auth`\n\n## Getting started\n1. In your Django project's settings file, change the Django `AUTHENTICATION_BACKENDS` to:\n\n```python\nAUTHENTICATION_BACKENDS = ['django_wso2is.backends.WSO2isAuthenticationBackend',]\n```\n\n2. If you are using Rest framework and want to authenticate API requests against WSO2 Identity server:\n```python\nREST_FRAMEWORK = {\n    # ... other rest framework settings.\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'django_wso2_is.authentication.BearerAuthentication'\n    ],\n}\n```\n\n3. Lastly, you need to provide some settings:\n```python\nWSO2IS_CONFIG = {\n    # The URL of your WSO2 identity server\n    \"SERVER_URL\": \"<str>\",\n    # The \"OAuth Client Key\" of your service provider\n    \"OAUTH_CLIENT_ID\": \"<str>\",\n    # The \"OAuth Client Secret\" of your service provider\n    \"OAUTH_SECRET_KEY\": \"<str>\",\n    # The username of the service provider admin\n    \"ADMIN_USER_USERNAME\": \"<str>\",\n    # The password of the service provider admin\n    \"ADMIN_USER_SECRET_KEY\": \"<str>\",\n    # The name of the admin role for the client (e.g. `Application/Administration`)\n    \"CLIENT_ADMIN_ROLE\": \"<str>\",\n    # The group's admin role name\n    \"GROUP_ADMIN_ROLE\": \"<str>\",\n    # Whether the validity of the server's SSL certificate should be validated.\n    # default=`False`. WARNING: This should be `True` in production environments.\n    \"VERIFY_SSL\": False,\n    # When a user is successfully authenticated with the WSO2 server this user\n    # will be created or updated in the local database. This search is based on `DJANGO_USER_LOOKUP_FIELD`. \n    # This field is optional (default=None), and in such cases the lookup is performed based on the `USERNAME` field\n    # of the auth user model, which by default corresponds to the `username` field. \n    # For instance, if you want this lookup to be based on email \n    # you can specify `\"DJANGO_USER_LOOKUP_FIELD\": \"email\"`\n    DJANGO_USER_LOOKUP_FIELD: None,\n    # This dictionary makes the mapping between attributes of the local user with attributes of the remote user.\n    # This field is optional (default=None), but it is HIGHLY recommended you customize it. By default only `username` get's mapped\n    # to WSO2's attribute \"userName\". A more detailed example of how to customize this field will be presented below.\n    ATTRIBUTE_MAPPING: {\"username\": \"userName\"} # dict in format 'local_attribute' : 'remote_attribute'\n}\n```\n\nYou are all set!\n\n## Advanced usage\n\n### 1. Customizing attribute mapping\nAs previously mentioned, only the mapping between the username field is done. Let's say you have the following django User model:\n```python\nclass MyUser(AbstractBaseUser):\n  # first_name, last_name and email exist by default in django.contrib.auth user model\n  # Now we specify new custom fields to save the user's organization and phone number from WSO2 identity server\n  user_organization = models.CharField(max_length=255,null=True, blank=True)\n  phone_number = models.CharField(max_length=255, null=True, blank=True)\n  external_id = models.CharField(max_length=255, null=True, blank=True)\n  \n```\nFirst we can inspect the JSON response from WSO2 to see the user information that is being returned to django. (This assumes you already configured everything else)\n```python\n# Inside django's shell (python manage.py shell)\nfrom django_wso2is import Token\nfrom pprint import pprint\n\ntoken = Token.from_credentials(\"sample-username\", \"sample-password\")\npprint(token.user_info)\n```\nYou should get something like this:\n```\n{'emails': ['sample-email@gmail.com'],\n 'id': '6b15e727-6b52-4d15-a9c9-b166a0439aa1',\n 'meta': {'created': '2023-01-19T10:44:51.563609Z',\n          'lastModified': '2023-01-19T15:52:48.282703Z',\n          'location': 'https://sample-wso2is-server:9443/scim2/Users/6b15e727-6b52-4d15-a9c9-b166a0439aa1',\n          'resourceType': 'User'},\n 'name': {'familyName': 'John', 'givenName': 'Doe'},\n 'phoneNumbers': [{'type': 'mobile', 'value': '914420876'}],\n 'roles': [{'type': 'default',\n            'value': 'Internal/everyone,Application/Administração'},\n           {'$ref': 'https://sample-wso2is-server:9443/scim2/Roles/f0da2c12-f4c5-49dd-81f6-5077dfdd98d1',\n            'display': 'Application/Administration',\n            'value': 'f0da2c12-f4c5-49dd-81f6-5077dfdd98d1'},\n           {'$ref': 'https://sample-wso2is-server:9443/scim2/Roles/75ace894-dc8b-495f-8438-60a066d84966',\n            'display': 'everyone',\n            'value': '75ace894-dc8b-495f-8438-60a066d84966'}],\n 'schemas': ['urn:ietf:params:scim:schemas:core:2.0:User',\n             'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User'],\n 'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User': {'country': 'Portugal',\n                                                                'organization': 'My organization'},\n 'userName': 'sample-username'}\n```\nTo accommodate these additional fields the attribute mapping will be: \n```python\n\"ATTRIBUTE_MAPPING\": {\n    \"username\": \"userName\",\n    \"email\": \"emails[0]\", # [0] because WSO2 returns the key \"emails\" as a list\n    \"phone_number\": \"phoneNumbers[0].value\", # [0].value because WSO2 returns the key \"phoneNumbers\" as a list of objects with key \"value\"\n    \"first_name\": \"name.givenName\", # .givenName because WSO2 returns nested \"name\" object\n    \"last_name\": \"name.familyName\", # .familyName for the same reason as before\n    \"external_id\": \"id\", # Simple attribute mapping\n},\n```\n\n### 2. Post authentication signal\nIf you want to hook additional behaviour after an user has been authenticated, you can simply attach to the `user_authenticated` signal. For instance, let's say we want to also get/create and associate with the user a `Group` object based on the user WSO2 roles.\n\n```python\nyourapp/signals.py\nfrom django.contrib.auth.models import Group\nfrom django.dispatch import receiver\nfrom django_wso2is.signals import user_authenticated\nfrom django_wso2is import Token\n\n@receiver(user_authenticated)\ndef wso2_user_authenticated(sender, user, token: Token, **kwargs):\n   # Get user roles\n   roles: list[str] = [role for role in token.client_roles]\n   for role in roles:\n      group, _ = Group.objects.get_or_create(name=role)\n      user.groups.add(group)\n      user.save()\n       \n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-wso2is-auth",
    "package_url": "https://pypi.org/project/django-wso2is-auth/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-wso2is-auth/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Ubiwhere/django-wso2is-auth/issues",
      "Homepage": "https://github.com/Ubiwhere/django-wso2is-auth/"
    },
    "release_url": "https://pypi.org/project/django-wso2is-auth/0.0.1/",
    "requires_dist": [
      "django (<4.2,>=3.2)",
      "requests (==2.28.2)",
      "djangorestframework (<3.15,>=3.14)",
      "jsonpath-ng (==1.5.3)"
    ],
    "requires_python": ">=3.8",
    "summary": "Django authentication against WSO2 Identity Server",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16503202,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05882ee84dedbb87b5ffb56c6650a7880a43c18b557bf169dfae02137f26d1e6",
          "md5": "1e1812072be8f354436181eb35bff004",
          "sha256": "6b533e32b40b1f2847b5c9aead45bc271c26444d69d8a31677bd635be075e883"
        },
        "downloads": -1,
        "filename": "django_wso2is_auth-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e1812072be8f354436181eb35bff004",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13781,
        "upload_time": "2023-01-20T16:25:40",
        "upload_time_iso_8601": "2023-01-20T16:25:40.042848Z",
        "url": "https://files.pythonhosted.org/packages/05/88/2ee84dedbb87b5ffb56c6650a7880a43c18b557bf169dfae02137f26d1e6/django_wso2is_auth-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db4cb6e4805c367de8ec98db58722b2d04d6446171d76861daa429df21835ee8",
          "md5": "0e7a5cc960c8247acd7dc944518082d4",
          "sha256": "842b3affde2139fbe84cab0f3c80ba565e9a3f768ddaef37c08150f2bb6395ed"
        },
        "downloads": -1,
        "filename": "django-wso2is-auth-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e7a5cc960c8247acd7dc944518082d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13700,
        "upload_time": "2023-01-20T16:25:41",
        "upload_time_iso_8601": "2023-01-20T16:25:41.300622Z",
        "url": "https://files.pythonhosted.org/packages/db/4c/b6e4805c367de8ec98db58722b2d04d6446171d76861daa429df21835ee8/django-wso2is-auth-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05882ee84dedbb87b5ffb56c6650a7880a43c18b557bf169dfae02137f26d1e6",
        "md5": "1e1812072be8f354436181eb35bff004",
        "sha256": "6b533e32b40b1f2847b5c9aead45bc271c26444d69d8a31677bd635be075e883"
      },
      "downloads": -1,
      "filename": "django_wso2is_auth-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1e1812072be8f354436181eb35bff004",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 13781,
      "upload_time": "2023-01-20T16:25:40",
      "upload_time_iso_8601": "2023-01-20T16:25:40.042848Z",
      "url": "https://files.pythonhosted.org/packages/05/88/2ee84dedbb87b5ffb56c6650a7880a43c18b557bf169dfae02137f26d1e6/django_wso2is_auth-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db4cb6e4805c367de8ec98db58722b2d04d6446171d76861daa429df21835ee8",
        "md5": "0e7a5cc960c8247acd7dc944518082d4",
        "sha256": "842b3affde2139fbe84cab0f3c80ba565e9a3f768ddaef37c08150f2bb6395ed"
      },
      "downloads": -1,
      "filename": "django-wso2is-auth-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0e7a5cc960c8247acd7dc944518082d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 13700,
      "upload_time": "2023-01-20T16:25:41",
      "upload_time_iso_8601": "2023-01-20T16:25:41.300622Z",
      "url": "https://files.pythonhosted.org/packages/db/4c/b6e4805c367de8ec98db58722b2d04d6446171d76861daa429df21835ee8/django-wso2is-auth-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}