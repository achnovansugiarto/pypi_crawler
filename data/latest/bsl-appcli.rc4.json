{
  "info": {
    "author": "brightSPARK Labs",
    "author_email": "enquire@brightsparklabs.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# BSL Application CLI Library\n\n![Test Python](https://github.com/brightsparklabs/appcli/actions/workflows/build_python.yml/badge.svg)\n\nA library for adding CLI interfaces to applications in the brightSPARK Labs style.\n\n## Overview\n\nThis library can be leveraged to add a standardised CLI capability to applications to:\n\n- Handle system lifecycle events for services (`service [start|shutdown]`).\n- Allow running arbitrary short-lived tasks (`task run`).\n- Manage configuration (`configure`).\n- Upgrade to a newer version of the application (`upgrade|migrate`).\n- And more.\n\nThe CLI is designed to run within a Docker container and launch other Docker containers (i.e.\nDocker-in-Docker). This is generally managed via a `docker-compose.yml` file.\n\nThe library exposes the following environment variables to the `docker-compose.yml` file:\n\n- `APP_VERSION` - the version of containers to launch.\n- `<APP_NAME>_CONFIG_DIR` - the directory containing configuration files.\n- `<APP_NAME>_DATA_DIR` - the directory containing data produced/consumed by the system.\n- `<APP_NAME>_GENERATED_CONFIG_DIR` - the directory containing configuration files generated from\n  the templates in `<APP_NAME>_CONFIG_DIR`.\n- `<APP_NAME>_ENVIRONMENT` - the deployment environment the system is running in. For example\n  `production` or `staging`. This allows multiple instances of the application to run on the same\n  Docker daemon. Defaults to `production`.\n\nNote: the `APP_NAME` variable is derived from the `app_name` passed in to the `Configuration` object in the\nmain python entrypoint to the application. In order for the application to work, the `app_name` is forced to conform\nwith the shell variable name standard: `[a-zA-Z_][a-zA-Z_0-9]*`. Any characters that do not fit this regex will be\nreplaced with `_`. See:\n(https://unix.stackexchange.com/questions/428880/list-of-acceptable-initial-characters-for-a-bash-variable)\n(https://linuxhint.com/bash-variable-name-rules-legal-illegal/)\n\nThe `docker-compose.yml` can be templated by renaming to `docker-compose.yml.j2`, and setting\nvariables within the `settings.yml` file as described in the Installation section.\n\nStack variables can be set within the `stack-settings.yml` file as described in the\n`Build configuration template directories` section.\n\n## Installation\n\n### Add the library to your python CLI application\n\n    pip install git+https://github.com/brightsparklabs/appcli.git@<VERSION>\n\n### Define the CLI for your application `myapp`\n\n_Note for appcli version 1.1.3 and below_: Import paths to access to appcli\ninternal classes and methods is now by a full path, rather than being exposed\nat the root. This was done to allow access to all methods and classes using\npython3 implicit namespaced packages.\n\n    # filename: myapp.py\n\n    #!/usr/bin/env python3\n    # # -*- coding: utf-8 -*-\n\n    # standard libraries\n    import os\n    import sys\n    from pathlib import Path\n\n    # vendor libraries\n    from appcli.cli_builder import create_cli\n    from appcli.models.configuration import Configuration\n    from appcli.orchestrators import DockerComposeOrchestrator\n\n    # ------------------------------------------------------------------------------\n    # CONSTANTS\n    # ------------------------------------------------------------------------------\n\n    # directory containing this script\n    BASE_DIR = os.path.dirname(os.path.realpath(__file__))\n\n    # ------------------------------------------------------------------------------\n    # PRIVATE METHODS\n    # ------------------------------------------------------------------------------\n\n    def main():\n        configuration = Configuration(\n            app_name='myapp',\n            docker_image='brightsparklabs/myapp',\n            seed_app_configuration_file=Path(BASE_DIR, 'resources/settings.yml'),\n            stack_configuration_file=Path(BASE_DIR, 'resources/stack-settings.yml'),\n            baseline_templates_dir=Path(BASE_DIR, 'resources/templates/baseline'),\n            configurable_templates_dir=Path(BASE_DIR, 'resources/templates/configurable'),\n            orchestrator=DockerComposeOrchestrator(\n                docker_compose_file = Path('docker-compose.yml'),\n                docker_compose_override_directory = Path('docker-compose.override.d/'),\n                docker_compose_task_file = Path('docker-compose.tasks.yml'),\n                docker_compose_task_override_directory = Path(\n                    'docker-compose.tasks.override.d/'\n                ),\n            ),\n            mandatory_additional_data_dirs=['EXTRA_DATA',],\n            mandatory_additional_env_variables=['ENV_VAR_2',],\n        )\n        cli = create_cli(configuration)\n        cli()\n\n    # ------------------------------------------------------------------------------\n    # ENTRYPOINT\n    # ------------------------------------------------------------------------------\n\n    if __name__ == '__main__':\n        main()\n\n#### Custom Commands\n\nYou can specify some custom top-level commands by adding click commands or command groups to the configuration object.\nAssuming 'web' is the name of the service in the docker-compose.yml file which you wish to exec against, we can create\nthree custom commands in the following example:\n\n- `myapp ls-root` which lists the contents of the root directory within the `web` service container and prints it out.\n- `myapp ls-root-to-file` which lists the contents of the root directory within the `web` service container and dumps to file within the container.\n- `myapp tee-file` which takes some text and `tee`s it into another file the `web` service container.\n\n```python\n\ndef get_ls_root_command(orchestrator: DockerComposeOrchestrator):\n    @click.command(\n        help=\"List files in the root directory\",\n    )\n    @click.pass_context\n    def ls_root(ctx: click.Context):\n\n        # Equivalent command within the container:\n        # `ls -alh`\n        cli_context: CliContext = ctx.obj\n        output: CompletedProcess = orchestrator.exec(cli_context, \"web\", [\"ls\", \"-alh\", \"/\"])\n        print(output.stdout.decode())\n\n    return ls_root\n\ndef get_tee_file_command(orchestrator: DockerComposeOrchestrator):\n    @click.command(\n        help=\"Tee some text into a file\",\n    )\n    @click.pass_context\n    def tee_file(ctx: click.Context):\n\n        # Equivalent command within the container:\n        # `echo \"Some data to tee into the custom file\" | tee /ls-root.txt`\n        cli_context: CliContext = ctx.obj\n        output: CompletedProcess = orchestrator.exec(cli_context, \"web\", [\"tee\", \"/my_custom_file.txt\"], stdin_input=\"Some data to tee into the custom file\")\n\n    return tee_file\n\ndef get_ls_root_to_file_command(orchestrator: DockerComposeOrchestrator):\n    @click.command(\n        help=\"List files in the root directory and tee to file\",\n    )\n    @click.pass_context\n    def ls_root_to_file(ctx: click.Context):\n\n        # Equivalent command within the container:\n        # `ls -alh | tee /ls-root.txt`\n        cli_context: CliContext = ctx.obj\n        output: CompletedProcess = orchestrator.exec(cli_context, \"web\", [\"ls\", \"-alh\", \"/\"])\n        data = output.stdout.decode()\n        orchestrator.exec(cli_context, \"web\", [\"tee\", \"/ls-root.txt\"], stdin_input=data)\n\n    return ls_root_to_file\n\ndef main():\n    orchestrator = DockerComposeOrchestrator(Path(\"docker-compose.yml\"))\n    configuration = Configuration(\n        app_name=\"appcli_nginx\",\n        docker_image=\"thomas-anderson-bsl/appcli-nginx\",\n        seed_app_configuration_file=Path(BASE_DIR, \"resources/settings.yml\"),\n        stack_configuration_file=Path(BASE_DIR, \"resources/stack-settings.yml\"),\n        baseline_templates_dir=Path(BASE_DIR, \"resources/templates/baseline\"),\n        configurable_templates_dir=Path(BASE_DIR, \"resources/templates/configurable\"),\n        orchestrator=orchestrator,\n        custom_commands={get_tee_file_command(orchestrator),get_ls_root_command(orchestrator),get_ls_root_to_file_command(orchestrator)}\n    )\n    cli = create_cli(configuration)\n    cli()\n\n```\n\n### Build configuration template directories\n\n- Store any Jinja2 variable definitions you wish to use in your configuration\n  template files in `resources/settings.yml`.\n- Store any appcli stack specific keys in `resources/stack-settings.yml`.\n- Store your `docker-compose.yml`/`docker-compose.yml.j2` file in `resources/templates/baseline/`.\n- Configuration files (Jinja2 compatible templates or otherwise) can be stored in one\n  of two locations:\n  - `resources/templates/baseline` - for templates which the end user **is not** expected to modify.\n  - `resources/templates/configurable` - for templates which the end user is expected to modify.\n\n### Configure application backup\n\nAppcli's `backup` command creates backups of configuration and data of an application, stored locally in the\nbackup directory. The settings for backups are configured through entries in a `backups` block in `stack-settings.yml`.\n\nThe available keys for entries in the `backups` block are:\n\n| key            | Description                                                                                                       |\n| -------------- | ----------------------------------------------------------------------------------------------------------------- |\n| name           | The name of the backup. Must be unique between backup definitions and use `kebab-case`.                           |\n| backup_limit   | The number of local backups to keep. Set to `0` to disable rolling deletion.                                      |\n| file_filter    | The file_filter contains lists of glob patterns used to specify what files to include or exclude from the backup. |\n| frequency      | The cron-like frequency at which backups will execute.                                                            |\n| remote_backups | The list of remote backup strategies.                                                                             |\n\n    # filename: stack-settings.yml\n\n    backups:\n      - name: \"full\"\n        backup_limit: 0\n        file_filter:\n          data_dir:\n            include_list:\n            exclude_list:\n          conf_dir:\n            include_list:\n            exclude_list:\n        frequency: \"* * *\"\n        remote_backups:\n\n#### Backup name\n\nThe backup `name` is a short descriptive name for the backup definition.\nTo avoid problems, we _highly_ recommend `name` be:\n\n- unique between items in the `backups` list\n- use `kebab-case`\n\nExamples of good names:\n\n- `full`\n- `conf-only`\n- `audit-logs`\n\nWithout a unique `name`, backups from different items in `backups` will\noverwrite each other without warning.\n\nUsing `kebab-case` is necessary to avoid some issues with `click` and filesystem\nnaming issues.\n\nWhen using the `backup` command, you are able to supply the name\nof the backup to run. If you have a backup `name` with a space in it, the `click`\nlibrary cannot interpret the name as a whole string (even with quotes), so you\nwill be unable to run the backup individually.\n\nIf the backup `name` doesn't use `kebab-case`, it may use some characters that\nare incompatible with file and directory naming conventions. Appcli will\nautomatically slugify the name to something compatible, but this may cause\ncollisions in the folder names of backups to be taken which will lead to backups\nbeing overwritten. e.g. `s3#1` and `s3&1` will both translate internally to\n`s3-1`.\n\n#### Backup limit\n\nA rolling deletion strategy is used to remove local backups, in order to keep `backup_limit` number of backups.\n\nIf more than `backup_limit` number of backups exist in the backup directory, the oldest backups will be deleted.\n\nSet this value to `0` to keep all backups.\n\n#### File filter\n\nThe `file_filter` block enables filtering of files to backup from `conf` and `data` directories. For more details\nincluding examples, see [here](/README_BACKUP_FILE_FILTER.md).\n\n    # filename: stack-settings.yml\n    # Includes all log files from data dir only\n\n    backups:\n      - name: \"full\"\n        backup_limit: 0\n        file_filter:\n          data_dir:\n            include_list:\n              - \"**/*.log\"\n            exclude_list:\n            conf_dir:\n              include_list:\n              exclude_list:\n                - \"**/*\"\n        frequency: \"* * *\"\n        remote_backups:\n\n#### Freqency\n\nAppcli supports limiting individual backups to run on only specific days using a cron-like frequency filter.\n\nWhen the `backup` command is run, each backup strategy will check if the `frequency` pattern matches\ntoday's date. Only strategies whose `frequency` pattern match today's date will execute.\n\nThe input pattern `pattern` is prefixed with `\"* * \"` and is used as a standard cron expression to\ncheck for a match. i.e. `\"* * $pattern\"`.\n\nExamples:\n\n- `\"* * *\"` (cron equivalent `\"* * * * *\"`) will always run.\n- `\"* * 0\"` (cron equivalent `\"* * * * 0\"`) will only run on Sunday.\n- `\"1 */3 *\"` (cron equivalent `\"* * 1 */3 *\"`) will only run on the first day-of-month of every 3rd month.\n\n#### Remote backup\n\nAppcli supports pushing local backups to remote storage. The list of strategies for pushing to remote storage are\ndefined within the `remote_backups` block.\n\nThe available keys for every remote backup strategy are:\n\n| key           | Description                                                                                                 |\n| ------------- | ----------------------------------------------------------------------------------------------------------- |\n| name          | A short name or description used to describe this backup.                                                   |\n| strategy_type | The type of this backup, must match an implemented remote backup strategy.                                  |\n| frequency     | The cron-like frequency at which remote backups will execute. Behaves the same as local backup `frequency`. |\n| configuration | Custom configuration block that is specific to each remote backup strategy.                                 |\n\nN.B. remote backups will only run for a local backup that has run. Therefore the `frequency` of the local backup\nwill apply first, followed by the `frequency` of the remote backup. This means that it's possible to write a remote\nbackup frequency that will never execute. e.g. Local `* * 0` and remote `* * 1`.\n\n##### Strategies\n\n###### AWS S3 remote strategy\n\nTo use S3 remote backup, set `strategy_type` to `S3`.\nThe available configuration keys for an S3 backup are:\n\n| key         | Description                                                                                                                 |\n| ----------- | --------------------------------------------------------------------------------------------------------------------------- |\n| bucket_name | The name of the bucket to upload to.                                                                                        |\n| access_key  | The AWS Access key ID for the account to upload with.                                                                       |\n| secret_key  | The AWS Secret access key for the account to upload with. The value _must_ be encrypted using the appcli `encrypt` command. |\n| bucket_path | The path in the S3 bucket to upload to. Set this to an empty string to upload to the root of the bucket.                    |\n| tags        | Key value pairs of tags to set on the backup object.                                                                        |\n\n    # filename: stack-settings.yml\n\n    backups:\n      - name: \"full_backup\"\n        backup_limit: 0\n        remote_backups:\n        - name: \"weekly_S3\"\n          strategy_type: \"S3\"\n          frequency: \"* * 0\"\n          configuration:\n            bucket_name: \"aws.s3.bucket\"\n            access_key: \"aws_access_key\"\n            secret_key: \"enc:id=1:encrypted_text:end\"\n            bucket_path: \"bucket/path\"\n            tags:\n              frequency: \"weekly\"\n              type: \"data\"\n\n### Restoring a remote backup\n\nTo restore from a remote backup:\n\n1. Acquire the remote backup (`.tgz` file) that you wish to restore. For S3 this can be done by downloading the backup from the specified bucket.\n2. Place the backup `myapp_date.tgz` file in the backup directory. By default this will be `/opt/brightsparklabs/${APP_NAME}/production/backup/`\n3. Confirm that appcli can access the backup by running the `view-backups` command\n4. Run the restore command `./myapp restore BACKUP_FILE.tgz` e.g. `./myapp restore APP_2021-02-02T10:55:48+00:00.tgz`. The restore process will trigger a backup.\n\n### Define a container for your CLI application\n\n    # filename: Dockerfile\n\n    FROM brightsparklabs/appcli\n\n    ENTRYPOINT [\"./myapp.py\"]\n    WORKDIR /app\n\n    # install compose if using it as the orchestrator\n    RUN pip install docker-compose\n\n    COPY requirements.txt .\n    RUN pip install --requirement requirements.txt\n    COPY src .\n\n    ARG APP_VERSION=latest\n    ENV APP_VERSION=${APP_VERSION}\n\n### Build the container\n\n    # sh\n    docker build -t brightsparklabs/myapp --build-arg APP_VERSION=latest .\n\n### (Optional) Login to private Docker registries and pass through credentials\n\nIt is possible to login to private Docker registries on the host, and pass through credentials to\nthe CLI container run by the launcher script. This enables pulling and running Docker images from\nprivate Docker registries.\n\nLogin using:\n\n    docker login ${REGISTRY_URL}\n\nThe credentials file path can be passed as an option via `--docker-credentials-file` or `-p` to the\n`myapp` container.\n\n### View the installer script\n\n    # sh\n    docker run --rm brightsparklabs/myapp:<version> install\n\n    # or if using a private registry for images\n    docker run --rm brightsparklabs/myapp:<version> --docker-credentials-file ~/.docker/config.json install\n\nWhile it is not mandatory to view the script before running, it is highly recommended.\n\n### Run the installer script\n\n    # sh\n    docker run --rm brightsparklabs/myapp:<version> install | sudo bash\n\nThe above will use the following defaults:\n\n- `environment` => `production`.\n- `install-dir` => `/opt/brightsparklabs/${APP_NAME}/production/`.\n- `configuration-dir` => `/opt/brightsparklabs/${APP_NAME}/production/conf/`.\n- `data-dir` => `/opt/brightsparklabs/${APP_NAME}/production/data/`.\n- `backup-dir` => `/opt/brightsparklabs/${APP_NAME}/production/backup/`.\n\nYou can modify any of the above if desired. E.g.\n\n    # sh\n    docker run --rm brightsparklabs/myapp:<version> \\\n        --environment \"uat\" \\\n        --configuration-dir /etc/myapp \\\n        --data-dir /mnt/data/myapp \\\n        install --install-dir ${HOME}/apps/myapp \\\n    | sudo bash\n\nWhere:\n\n- `--environment` defines the environment name for the deployment. This allows multiple instances of\n  the application to be present on the same host.\n  Defaults to `production`.\n- `--install-dir` defines the base path for launcher and the default locations for the configuration\n  and data directories if they are not overrideen (see below).\n  Defaults to `/opt/brightsparklabs/${APP_NAME}/${ENVIRONMENT}/` (where `${ENVIRONMENT}` is defined\n  by `--environment` above).\n- `--configuration-dir` defines the path to the configuration directory.\n  Defaults to `${INSTALL_DIR}/conf/` (`${INSTALL_DIR}` is defined by `--install-dir` above).\n- `--data-dir` defines the path to the data directory.\n  Defaults to `${INSTALL_DIR}/data/` (`${INSTALL_DIR}` is defined by `--install-dir` above).\n\nThe installation script will generate a launcher script for controlling the application. The script\nlocation will be printed out when running the install script. This script should now be used as the\nmain entrypoint to all appcli functions for managing your application.\n\n## Usage\n\nThis section details what commands and options are available.\n\n### Top-level Commands\n\nTo be used in conjunction with your application `./myapp <command>` e.g. `./myapp configure init`\n\n| Command      | Description                                                       |\n| ------------ | ----------------------------------------------------------------- |\n| backup       | Create a backup of application data and configuration.            |\n| configure    | Configures the application.                                       |\n| encrypt      | Encrypts the specified string.                                    |\n| init         | Initialises the application.                                      |\n| launcher     | Outputs an appropriate launcher bash script.                      |\n| migrate      | Migrates the configuration of the application to a newer version. |\n| orchestrator | Perform docker orchestration                                      |\n| restore      | Restore a backup of application data and configuration.           |\n| service      | Lifecycle management commands for application services.           |\n| task         | Commands for application tasks.                                   |\n| version      | Fetches the version of the app being managed with appcli.         |\n| view-backups | View a list of locally-available backups.                         |\n\n### Options\n\n| Option                             | Description                                                                                                         |\n| ---------------------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| --debug                            | Enables debug level logging.                                                                                        |\n| -c, --configuration-dir PATH       | Directory containing configuration files. [This is required unless subcommand is one of: `install`.                 |\n| -d, --data-dir PATH                | Directory containing data produced/consumed by the system. This is required unless subcommand is one of: `install`. |\n| -t, --environment TEXT             | Deployment environment the system is running in. Defaults to `production`.                                          |\n| -p, --docker-credentials-file PATH | Path to the Docker credentials file (config.json) on the host for connecting to private Docker registries.          |\n| -a, --additional-data-dir TEXT     | Additional data directory to expose to launcher container. Can be specified multiple times.                         |\n| -e, --additional-env-var TEXT      | Additional environment variables to expose to launcher container. Can be specified multiple times.                  |\n| --help                             | Show the help message and exit.                                                                                     |\n\n#### Command: `backup`\n\nCreates a backup `.tgz` file in the backup directory that contains files from the configuration and data directory, as\nconfigured in `stack-settings.yml`. After the backup is taken, remote backup strategies will be executed (if applicable).\n\nusage: `./myapp backup [OPTIONS] [ARGS]`\n\n| Option                                         | Description                                        |\n| ---------------------------------------------- | -------------------------------------------------- |\n| --pre-stop-services/--no-pre-stop-services     | Whether to stop services before performing backup. |\n| --post-start-services/--no-post-start-services | Whether to start services after performing backup. |\n| --help                                         | Show the help message and exit.                    |\n\nThe `backup` command optionally takes an argument corresponding to the `name` of the backup to run. If no `name` is\nprovided, all backups will attempt to run.\n#### Command Group: `configure`\n\nConfigures the application.\n\nusage: `./myapp configure [OPTIONS] COMMAND [ARGS]`\n\n| Command  | Description                                                                                                               |\n| -------- | ------------------------------------------------------------------------------------------------------------------------- |\n| apply    | Applies the settings from the configuration.                                                                              |\n| diff     | Get the differences between current and default configuration settings.                                                   |\n| get      | Reads a setting from the configuration.                                                                                   |\n| init     | Initialises the configuration directory.                                                                                  |\n| set      | Saves a setting to the configuration. Allows setting the type of value with option `--type`, and defaults to string type. |\n| template | Configures the baseline templates.                                                                                        |\n| edit     | Open the settings file for editing with vim-tiny.                                                                         |\n\n| Option | Description                     |\n| ------ | ------------------------------- |\n| --help | Show the help message and exit. |\n\n#### Command: `encrypt`\n\nEncrypts the specified string.\n\nusage: `./myapp encrypt [OPTIONS] TEXT`\n\n| Option | Description                     |\n| ------ | ------------------------------- |\n| --help | Show the help message and exit. |\n\n#### Command Group: `init`\n\nInitialises the application.\n\nusage: `./myapp init [OPTIONS] COMMAND [ARGS]`\n\n| Command  | Description                                                              |\n| -------- | ------------------------------------------------------------------------ |\n| keycloak | Initialises a Keycloak instance with BSL-specific initial configuration. |\n\n| Option | Description                     |\n| ------ | ------------------------------- |\n| --help | Show the help message and exit. |\n\n#### Command: `launcher`\n\nOutputs an appropriate launcher bash script to stdout.\n\nusage: `./myapp launcher [OPTIONS]`\n\n| Option | Description                     |\n| ------ | ------------------------------- |\n| --help | Show the help message and exit. |\n\n#### Command: `migrate`\n\nMigrates the application configuration to work with the current application version.\n\nusage: `./myapp migrate [OPTIONS]`\n\n| Option | Description                     |\n| ------ | ------------------------------- |\n| --help | Show the help message and exit. |\n\n#### Command Group: `orchestrator`\n\nPerform tasks defined by the orchestrator.\n\nusage: `./myapp orchestrator [OPTIONS] COMMAND [ARGS]`\n\nAll commands are defined within the orchestrators themselves. Run `./myapp orchestrator` to list available commands.\n\n| Option | Description                    |\n| ------ | ------------------------------ |\n| --help | Show the help message and exit |\n\n#### Command: `restore`\n\nRestores a specified backup `.tgz` file from the configured backup folder.\n\nusage: `./myapp restore BACKUP_FILE`\n\n| Option | Description                     |\n| ------ | ------------------------------- |\n| --help | Show the help message and exit. |\n\n#### Command Group: `service`\n\nRuns application services. These are the long-running services which should only exit on command.\n\nusage: `./myapp service [OPTIONS] COMMAND [ARGS]`\n\n| Command  | Description                                                                                                                                                                                                             |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| logs     | Prints logs from all services.                                                                                                                                                                                          |\n| shutdown | Shuts down the system. If one or more service names are provided, shuts down the specified service(s) only.                                                                                                             |\n| start    | Starts the system. If one or more service names are provided, starts the specified service(s) only.                                                                                                                     |\n| restart  | Restarts service(s) (`shutdown` followed by `start`). Optionally run a `configure apply` during the restart with the `--apply` flag. If one or more service names are provided, restarts the specified service(s) only. |\n\n| Option | Description                     |\n| ------ | ------------------------------- |\n| --help | Show the help message and exit. |\n\n#### Command Group: `task`\n\nRuns application tasks. These are short-lived services which should exit when the task is complete.\n\nusage: `./myapp task [OPTIONS] COMMAND [ARGS]`\n\n| Command | Description                                                                                  |\n| ------- | -------------------------------------------------------------------------------------------- |\n| run     | Runs a specified application task. Optionally run in the background with `-d/--detach` flag. |\n\n| Option | Description                     |\n| ------ | ------------------------------- |\n| --help | Show the help message and exit. |\n\n#### Command: `version`\n\nFetches the version of the app being managed with appcli.\n\nusage: `./myapp version`\n\n#### Command: `view-backups`\n\nView a list of all backups in the configured backup folder.\n\nusage: `./myapp view-backups`\n\n| Option | Description                     |\n| ------ | ------------------------------- |\n| --help | Show the help message and exit. |\n\n### Usage within scripts and cron\n\nBy default, the generated `appcli` launcher script will run the CLI container with a virtual terminal session (tty).\nThis may interfere with crontab entries or scripts that use the appcli launcher.\n\nTo disable tty when running the launcher script, set `NO_TTY` environment variable to `true`.\n\n    NO_TTY=true ./myapp [...]\n\nor\n\n    export NO_TTY=true\n    ./myapp [...]\n\nIf required, you can also disable interactive mode with the `NO_INTERACTIVE` environment variable.\n\n    NO_INTERACTIVE=true ./myapp [...]\n\nor\n\n    export NO_INTERACTIVE=true\n    ./myapp [...]\n\n## Development\n\nThis section details how to build/test/run/debug the system in a development environment.\n\n### Prerequisites\n\nThe following must be installed and in the `PATH`:\n\n- make\n- python 3.7+\n- virtualenv\n- git\n\n### Build\n\n    make all\n\n### Install\n\n    pip install -e .\n\n### Running unit tests\n\n    make test\n\n## Usage while developing your CLI application\n\nWhile developing, it may be preferable to run your python script directly rather than having to\nrebuild a container each time you update it.\n\n- Ensure docker is installed (more specifically a docker socket at `/var/run/docker.sock`).\n- Set the environment variables which the CLI usually sets for you:\n\n        export MYAPP_CONFIG_DIR=/tmp/myapp/config \\\n               MYAPP_DATA_DIR=/tmp/myapp/data\n\n- Run your CLI application:\n\n        ./myapp \\\n          --debug \\\n          --configuration-dir \"${MYAPP_CONFIG_DIR}\" \\\n          --data-dir \"${MYAPP_DATA_DIR}\"\n\n## Contributing\n\nWhen committing code, call `make all` to automatically run code formatting/ linting/testing.\n\nAppcli uses the python code formatter [black](https://pypi.org/project/black/) with default\nsettings. This ensures that PR diffs are minimal and focussed on the code change rather than\nstylistic coding decisions.\n\nInstall with `pip install black`. This can be run through VSCode or via the CLI. See the `black`\ndocumentation for details.\n\n## Licenses\n\nRefer to the `LICENSE` file for details.\n\nThis project makes use of several libraries and frameworks. Refer to the `LICENSES` folder for\ndetails.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.brightsparklabs.com",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bsl-appcli",
    "package_url": "https://pypi.org/project/bsl-appcli/",
    "platform": "",
    "project_url": "https://pypi.org/project/bsl-appcli/",
    "project_urls": {
      "Homepage": "https://www.brightsparklabs.com"
    },
    "release_url": "https://pypi.org/project/bsl-appcli/1.3.6/",
    "requires_dist": [
      "GitPython (==3.1.26)",
      "boto3 (==1.20.40)",
      "click (==8.0.3)",
      "coloredlogs (==15.0.1)",
      "cronex (==0.1.3.1)",
      "dataclasses-json (==0.5.6)",
      "deepdiff (==5.7.0)",
      "jinja2 (==3.0.3)",
      "pycryptodome (==3.12.0)",
      "pydantic (==1.9.0)",
      "python-keycloak (==0.22.0)",
      "python-slugify (==5.0.2)",
      "ruamel-yaml (==0.17.20)",
      "tabulate (==0.8.9)",
      "wheel (==0.37.1)",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A library for adding CLI interfaces to applications in the brightSPARK Labs style",
    "version": "1.3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12669678,
  "releases": {
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b24b677e40612c481751534421f362659090a3be3c76bc438c7563cf1b56f85",
          "md5": "2e829a02052cc2b5b2f3de41273b8345",
          "sha256": "2b533c78fab0311d81070f56e3d537da7d88a47a4b8d0d96aad9c10885ca3496"
        },
        "downloads": -1,
        "filename": "bsl_appcli-1.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e829a02052cc2b5b2f3de41273b8345",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 69508,
        "upload_time": "2021-05-12T23:05:44",
        "upload_time_iso_8601": "2021-05-12T23:05:44.280861Z",
        "url": "https://files.pythonhosted.org/packages/1b/24/b677e40612c481751534421f362659090a3be3c76bc438c7563cf1b56f85/bsl_appcli-1.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd7998be4ab13fd0d892d0789fe0718528db179883a6b00d794c89fe6ac340f5",
          "md5": "eed8cabc73584737c2f0a0eef649bb1e",
          "sha256": "804f9aaac6b604ef8c106f86cd245447292cb7a35dc39b56269e2f6fa0240170"
        },
        "downloads": -1,
        "filename": "bsl-appcli-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "eed8cabc73584737c2f0a0eef649bb1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64218,
        "upload_time": "2021-05-12T23:05:46",
        "upload_time_iso_8601": "2021-05-12T23:05:46.281294Z",
        "url": "https://files.pythonhosted.org/packages/fd/79/98be4ab13fd0d892d0789fe0718528db179883a6b00d794c89fe6ac340f5/bsl-appcli-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9270918ee957fde4afa0b8e7463b55f368e440f4aebb37bceb501fd38c4a7a1f",
          "md5": "d561317d32d2b353d91581e880b9dc86",
          "sha256": "ce09c639d07f772e993efc38cf8610171000b9fe26c0ae8e0bad339095734904"
        },
        "downloads": -1,
        "filename": "bsl_appcli-1.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d561317d32d2b353d91581e880b9dc86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 69661,
        "upload_time": "2021-05-14T06:13:02",
        "upload_time_iso_8601": "2021-05-14T06:13:02.761472Z",
        "url": "https://files.pythonhosted.org/packages/92/70/918ee957fde4afa0b8e7463b55f368e440f4aebb37bceb501fd38c4a7a1f/bsl_appcli-1.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a25868259857846722bdd2d040596a62badfa4f069bf352fb86eba72b88d4f1b",
          "md5": "c29f33dffccdeaf5c5f5a26007db5493",
          "sha256": "b506c0c715c7a5bf1c9e6152204f2c9eeb028fd5b209ab30fc4c41022fed4bcb"
        },
        "downloads": -1,
        "filename": "bsl-appcli-1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c29f33dffccdeaf5c5f5a26007db5493",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64380,
        "upload_time": "2021-05-14T06:13:05",
        "upload_time_iso_8601": "2021-05-14T06:13:05.082941Z",
        "url": "https://files.pythonhosted.org/packages/a2/58/68259857846722bdd2d040596a62badfa4f069bf352fb86eba72b88d4f1b/bsl-appcli-1.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "250aad7c1810bf33b60dddbe95bea0e204b6b148df1b718e3b1e61e1f7923b56",
          "md5": "c659ae4c1369c9bfa646f62212d6e5fc",
          "sha256": "245efe7ea2ae51ec2bc9b039b9f2317c002736f37d6e2599d0d66a5d68ee2ce0"
        },
        "downloads": -1,
        "filename": "bsl_appcli-1.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c659ae4c1369c9bfa646f62212d6e5fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 73512,
        "upload_time": "2022-01-21T04:55:19",
        "upload_time_iso_8601": "2022-01-21T04:55:19.911973Z",
        "url": "https://files.pythonhosted.org/packages/25/0a/ad7c1810bf33b60dddbe95bea0e204b6b148df1b718e3b1e61e1f7923b56/bsl_appcli-1.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ef83784c3657b870c418ab045d4ff6aa7a154540f4d910759dde7adc19d63b3",
          "md5": "7c50e157ae21f15c503c8dfdd544b9a9",
          "sha256": "dc4ed5e50c26ad8f966d6d5b68abb4f50e513a869cf88cdf1d21579e995b60d6"
        },
        "downloads": -1,
        "filename": "bsl-appcli-1.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7c50e157ae21f15c503c8dfdd544b9a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71918,
        "upload_time": "2022-01-21T04:55:22",
        "upload_time_iso_8601": "2022-01-21T04:55:22.512997Z",
        "url": "https://files.pythonhosted.org/packages/8e/f8/3784c3657b870c418ab045d4ff6aa7a154540f4d910759dde7adc19d63b3/bsl-appcli-1.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f54bf683f56992c5ad183cdcd8a2c6dcc483f4495f10dd33067dbf9488596c1e",
          "md5": "565e2270304d6c223b24f404cdb5fe99",
          "sha256": "3bb9cef3548c8ad6d8730c4715938d5d13aa3c3ba88c324f8189e6946dadb10f"
        },
        "downloads": -1,
        "filename": "bsl_appcli-1.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "565e2270304d6c223b24f404cdb5fe99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 73477,
        "upload_time": "2022-01-24T01:21:48",
        "upload_time_iso_8601": "2022-01-24T01:21:48.625067Z",
        "url": "https://files.pythonhosted.org/packages/f5/4b/f683f56992c5ad183cdcd8a2c6dcc483f4495f10dd33067dbf9488596c1e/bsl_appcli-1.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "263af44a46c85ec37564dfc24193fb152a9384ffed33cfd0a94bf2c26b11252a",
          "md5": "7e648a93fca0ca51beec2d3f89de47a2",
          "sha256": "06b6a88af1c4975e03b3976dde62b182108e93ea55d19b47d85273f8970118a9"
        },
        "downloads": -1,
        "filename": "bsl-appcli-1.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "7e648a93fca0ca51beec2d3f89de47a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71836,
        "upload_time": "2022-01-24T01:21:50",
        "upload_time_iso_8601": "2022-01-24T01:21:50.934161Z",
        "url": "https://files.pythonhosted.org/packages/26/3a/f44a46c85ec37564dfc24193fb152a9384ffed33cfd0a94bf2c26b11252a/bsl-appcli-1.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f54bf683f56992c5ad183cdcd8a2c6dcc483f4495f10dd33067dbf9488596c1e",
        "md5": "565e2270304d6c223b24f404cdb5fe99",
        "sha256": "3bb9cef3548c8ad6d8730c4715938d5d13aa3c3ba88c324f8189e6946dadb10f"
      },
      "downloads": -1,
      "filename": "bsl_appcli-1.3.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "565e2270304d6c223b24f404cdb5fe99",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 73477,
      "upload_time": "2022-01-24T01:21:48",
      "upload_time_iso_8601": "2022-01-24T01:21:48.625067Z",
      "url": "https://files.pythonhosted.org/packages/f5/4b/f683f56992c5ad183cdcd8a2c6dcc483f4495f10dd33067dbf9488596c1e/bsl_appcli-1.3.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "263af44a46c85ec37564dfc24193fb152a9384ffed33cfd0a94bf2c26b11252a",
        "md5": "7e648a93fca0ca51beec2d3f89de47a2",
        "sha256": "06b6a88af1c4975e03b3976dde62b182108e93ea55d19b47d85273f8970118a9"
      },
      "downloads": -1,
      "filename": "bsl-appcli-1.3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "7e648a93fca0ca51beec2d3f89de47a2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 71836,
      "upload_time": "2022-01-24T01:21:50",
      "upload_time_iso_8601": "2022-01-24T01:21:50.934161Z",
      "url": "https://files.pythonhosted.org/packages/26/3a/f44a46c85ec37564dfc24193fb152a9384ffed33cfd0a94bf2c26b11252a/bsl-appcli-1.3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}