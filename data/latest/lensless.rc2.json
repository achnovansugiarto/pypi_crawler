{
  "info": {
    "author": "Eric Bezzam",
    "author_email": "ebezzam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# LenslessPiCam: A Hardware and Software Platform for Lensless Computational Imaging with a Raspberry Pi\n\n![Example PSF, raw data, and reconstruction.](scripts/recon/example.png)\n\n- [Setup](#setup).\n- [Data for examples](#data).\n- [Reconstruction](#recon).\n- [Evaluating on a dataset](#eval).\n- [Remote capture](#capture).\n- [Remote display](#display).\n- [Collecting MNIST](#mnist).\n- [Citing this work](#cite).\n\nThis package provides functionalities to perform imaging with a lensless camera.\nWe make use of a low-cost implementation of the DiffuserCam [[1]](#1) where we\nuse a piece of tape instead of the lens and the [Raspberry Pi HQ camera sensor](https://www.raspberrypi.com/products/raspberry-pi-high-quality-camera)\n([V2 sensor](https://www.raspberrypi.com/products/camera-module-v2/) is also\nsupported). However, the same principles can be used for a different diffuser/mask \nand a different sensor (although the capture script would change). The idea of\nbuilding a lensless camera from a Raspberry Pi and a piece of tape, and a \ndataset mentioned below come from Prof. Laura Waller's group at UC Berkeley:\n- [Build your own DiffuserCam tutorial](https://waller-lab.github.io/DiffuserCam/tutorial).\n- [DiffuserCam lensless MIR Flickr dataset](https://waller-lab.github.io/LenslessLearning/dataset.html) [[2]](#2).\n\nSo a huge kudos to them for the idea and making the tools/code/data available!\n\nWe've also made a few Medium articles to guide users through the process of\nbuilding the lensless camera, measuring data with it, and reconstruction. They are all\nlaid out in [this post](https://medium.com/@bezzam/a-complete-lensless-imaging-tutorial-hardware-software-and-algorithms-8873fa81a660).\n\nNote that this material has been used for our graduate signal processing \ncourse at EPFL, and therefore includes some exercises / code to complete:\n- `lensless.autocorr.autocorr2d`: to compute a 2D autocorrelation in the \n  frequency domain,\n- `lensless.realfftconv.RealFFTConvolve2D`: to pre-compute the PSF's Fourier\n  transform, perform a convolution in the frequency domain with the real-valued\n  FFT, and vectorize operations for RGB.\n\nIf you are an instructor, you can request access to the solutions [here](https://drive.google.com/drive/folders/1Y1scM8wVfjVAo5-8Nr2VfE4b6VHeDSia?usp=sharing) \nor send an email to `eric[dot]bezzam[at]epfl[dot]ch`.\n\n## Setup <a name=\"setup\"></a>\nThe expected workflow is to have a local computer which interfaces remotely\nwith a Raspberry Pi equipped with the HQ camera sensor (or V2 sensor as in the \noriginal tutorial).\n\nThe software from this repository has to be installed on your both your local \nmachine and the Raspberry Pi (from the `home` directory of the Pi). Below are\ncommands that worked for our configuration (Ubuntu 21.04), but there are \ncertainly other ways to download a repository and install the library locally.\n```bash\n# download from GitHub\ngit clone git@github.com:LCAV/LenslessPiCam.git\n\n# install in virtual environment\ncd LenslessPiCam\npython3 -m venv lensless_env\nsource lensless_env/bin/activate\npip install -e .\n\n# -- extra dependencies for local machine for plotting/reconstruction\npip install -r recon_requirements.txt\n\n# (optional) try reconstruction on local machine\npython scripts/recon/admm.py --psf_fp data/psf/tape_rgb.png \\\n--data_fp data/raw_data/thumbs_up_rgb.png --n_iter 5\n```\n\nOn the Raspberry Pi, you may also have to install the following:\n```bash\nsudo apt-get install libimage-exiftool-perl\nsudo apt-get install libatlas-base-dev\n```\n\nIt is also possible to install the library via `pip`:\n```bash\npip install lensless\n```\n\nNote that we highly recommend using Python 3.9, as its [end-of-life](https://endoflife.date/python) is Oct 2025. Some Python library versions may not be available with earlier versions of Python.\n\nFor plotting on your local computer, you may also need to install [Tk](https://stackoverflow.com/questions/5459444/tkinter-python-may-not-be-configured-for-tk).\n\nThe scripts for remote capture and remote display assume that you can SSH to the\nRaspberry Pi without a password. To see this up you can follow instruction from\n[this page](https://medium.com/@bezzam/headless-and-passwordless-interfacing-with-a-raspberry-pi-ssh-453dd75154c3).\nDo not set a password for your key pair, as this will not work with the provided\nscripts.\n\nWe have noticed problems with locale when running the remote capture and display\nscripts, for example:\n```bash\nperl: warning: Setting locale failed.\nperl: warning: Please check that your locale settings:\n...\n```\nThis may arise due to incompatible locale settings between your local machine \nand the Raspberry Pi. There are two possible solutions to this, as proposed in \n[this forum](https://forums.raspberrypi.com/viewtopic.php?t=11870).\n1. Comment `SendEnv LANG LC_*` in `/etc/ssh/ssh_config` on your laptop.\n2. Comment `AcceptEnv LANG LC_*` in `/etc/ssh/sshd_config` on the Raspberry\nPi.\n\n## Data for examples <a name=\"data\"></a>\n\nYou can download example PSFs and raw data that we've measured [here](https://drive.switch.ch/index.php/s/NdgHlcDeHVDH5ww).\nWe recommend placing this content in the `data` folder.\n\nYou can download a subset for the [DiffuserCam Lensless Mirflickr Dataset](https://waller-lab.github.io/LenslessLearning/dataset.html)\nthat we've prepared [here](https://drive.switch.ch/index.php/s/vmAZzryGI8U8rcE)\nwith `scripts/prepare_mirflickr_subset.py`.\n\n## Reconstruction <a name=\"recon\"></a>\n\nThe core algorithmic component of `LenslessPiCam` is the abstract class \n`lensless.ReconstructionAlgorithm`. The three reconstruction strategies \navailable in `LenslessPiCam` derive from this class:\n\n- `lensless.GradientDescient`: projected gradient descent \n  with a non-negativity constraint. Two accelerated approaches are also\n  available: `lensless.NesterovGradientDescent` and `lensless.FISTA`.\n- `lensless.ADMM`: alternating direction method of multipliers (ADMM) with\n  a non-negativity constraint and a total variation (TV) regularizer.\n- `lensless.APGD`: accelerated proximal gradient descent with Pycsou\nas a backend. Any differentiable or proximal operator can be used as long as it \n  is compatible with Pycsou, namely derives from one of \n  `DifferentiableFunctional` or `ProximableFunctional`.\n  \nNew reconstruction algorithms can be conveniently implemented by deriving from \nthe abstract class and defining the following abstract methods:\n\n- the update step: `_update`.\n- a method to reset state variables: `reset`.\n- an image formation method: `_form_image`. \n  \nOne advantage of deriving from `lensless.ReconstructionAlgorithm` is that\nfunctionality for iterating, saving, and visualization is already implemented. \nConsequently, using a reconstruction algorithm that derives from it boils down \nto three steps:\n\n1. Creating an instance of the reconstruction algorithm.\n2. Setting the data.\n3. Applying the algorithm.\n\nFor example, for ADMM:\n```python\n    recon = ADMM(psf)\n    recon.set_data(data)\n    res = recon.apply(n_iter=n_iter)\n```\n\nA full running example can be run like so:\n```bash\npython scripts/recon/admm.py --psf_fp data/psf/tape_rgb.png \\\n--data_fp data/raw_data/thumbs_up_rgb.png --n_iter 5\n```\n\nA template for applying a reconstruction algorithm (including loading the data)\ncan be found in `scripts/recon/template.py`.\n\n## Evaluating on a dataset <a name=\"eval\"></a>\n\nYou can run ADMM on the [DiffuserCam Lensless Mirflickr Dataset](https://waller-lab.github.io/LenslessLearning/dataset.html)\nwith the following script.\n```bash\npython scripts/evaluate_mirflickr_admm.py --data <FP>\n```\nwhere `<FP>` is the path to the dataset.\n\nHowever, the original dataset is quite large (25000 files, 100 GB). So we've \nprepared [this subset](https://drive.switch.ch/index.php/s/vmAZzryGI8U8rcE) (200\nfiles, 725 MB) which you can also pass to the script. It is also possible to \nset the number of files.\n```bash\npython scripts/evaluate_mirflickr_admm.py \\\n--data DiffuserCam_Mirflickr_200_3011302021_11h43_seed11 \\\n--n_files 10 --save\n```\nThe `--save` flag will save a viewable image for each reconstruction.\n\nYou can also apply ADMM on a single image and visualize the iterative \nreconstruction.\n```bash\npython scripts/apply_admm_single_mirflickr.py \\\n--data DiffuserCam_Mirflickr_200_3011302021_11h43_seed11 \\\n--fid 172\n```\n\n## Remote capture <a name=\"capture\"></a>\n\nYou can remotely capture raw Bayer data with the following script.\n```bash\npython scripts/remote_capture.py --exp 0.1 --iso 100 --bayer --fp <FN> --hostname <HOSTNAME>\n```\nwhere `<HOSTNAME>` is the hostname or IP address of your Raspberry Pi, `<FN>` is\nthe name of the file to save the Bayer data, and the other arguments can be used\nto adjust camera settings.\n\n## Remote display <a name=\"display\"></a>\n\nFor collecting images displayed on a screen, we have prepared some software to\nremotely display images on a Raspberry Pi installed with this software and\nconnected to a monitor.\n\nYou first need to install the `feh` command line tool on your Raspberry Pi.\n```bash\nsudo apt-get install feh\n```\n\nThen make a folder where we will create and read prepared images.\n```bash\nmkdir ~/LenslessPiCam_display\ncp ~/LenslessPiCam/data/original/mnist_3.png ~/LenslessPiCam_display/test.png\n```\n\nThen we can use `feh` to launch the image viewer.\n```bash\nfeh LenslessPiCam_display --scale-down --auto-zoom -R 0.1 -x -F -Y\n```\n\nThen from your laptop you can use the following script to display an image on\nthe Raspberry Pi:\n```bash\npython scripts/remote_display.py --fp <FP> --hostname <HOSTNAME> \\\n--pad 80 --vshift 10 --brightness 90\n```\nwhere `<HOSTNAME>` is the hostname or IP address of your Raspberry Pi, `<FN>` is\nthe path on your local computer of the image you would like to display, and the \nother arguments can be used to adjust the positioning of the image and its\nbrightness.\n\n## Collecting MNIST <a name=\"mnist\"></a>\n\nWe provide a couple scripts to collect MNIST with the proposed camera.\n\nScript that can be launched from the Raspberry Pi:\n```bash\npython scripts/collect_mnist_on_device.py --input_dir MNIST_original \\\n--output_dir MNIST_meas\n```\nIf the MNIST dataset is not available at `MNIST_original` it will be downloaded\nfrom [here](http://yann.lecun.com/exdb/mnist/). The above command will measure \nthe training set. The `--test` flag can be used to measure the test set.\nIt is recommended to run the script from a [`screen`](https://linuxize.com/post/how-to-use-linux-screen/) session as it takes a long time to go through all the\nfiles! The `--n_files <N_FILES>` option can be used to measure a user-specified\namount of files.\n\nTo remotely collect the MNIST dataset (although quite slow due to copying files\nback and forth):\n```bash\npython scripts/collect_mnist.py --hostname <IP_ADDRESS> --output_dir MNIST_meas\n```\n\n## Citing this work <a name=\"cite\"></a>\n\nIf you use these tools in your own research, please cite the following:\n```\n@misc{lenslesspicam,\n\turl = {https://infoscience.epfl.ch/record/294041?&ln=en},\n\tauthor = {Bezzam, Eric and Kashani, Sepand and Vetterli, Martin and Simeoni, Matthieu},\n\ttitle = {Lensless{P}i{C}am: A Hardware and Software Platform for Lensless Computational Imaging with a {R}aspberry {P}i},\n\tpublisher = {Infoscience},\n\tyear = {2022},\n}\n```\n\n## References\n<a id=\"1\">[1]</a> \nAntipa, N., Kuo, G., Heckel, R., Mildenhall, B., Bostan, E., Ng, R., & Waller, L. (2018). DiffuserCam: lensless single-exposure 3D imaging. Optica, 5(1), 1-9.\n\n<a id=\"2\">[2]</a> \nMonakhova, K., Yurtsever, J., Kuo, G., Antipa, N., Yanny, K., & Waller, L. (2019). Learned reconstructions for practical mask-based lensless imaging. Optics express, 27(20), 28075-28090.\n\n<a id=\"3\">[3]</a> \nBoyd, S., Parikh, N., & Chu, E. (2011). Distributed optimization and statistical learning via the alternating direction method of multipliers. Now Publishers Inc.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LCAV/LenslessPiCam",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lensless",
    "package_url": "https://pypi.org/project/lensless/",
    "platform": null,
    "project_url": "https://pypi.org/project/lensless/",
    "project_urls": {
      "Homepage": "https://github.com/LCAV/LenslessPiCam"
    },
    "release_url": "https://pypi.org/project/lensless/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package to control and image with a lensless camera running on a Raspberry Pi.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13987541,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dea3c9d4afe913feec5c9a986af0839ddca38970d7f4b09cabbae2456634f02c",
          "md5": "22c2bc5180e327f50916ee0a2481ff9b",
          "sha256": "a3adbae12f428ec2ced64a8049ea8088167bbe37918555771492d7e3326f667b"
        },
        "downloads": -1,
        "filename": "lensless-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "22c2bc5180e327f50916ee0a2481ff9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38248,
        "upload_time": "2022-04-26T09:28:40",
        "upload_time_iso_8601": "2022-04-26T09:28:40.146594Z",
        "url": "https://files.pythonhosted.org/packages/de/a3/c9d4afe913feec5c9a986af0839ddca38970d7f4b09cabbae2456634f02c/lensless-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df5f1cb0f6f5ff3fe5e7a0efbf461f53052a0ef04b2f5a306fdf4b71d55bfdb8",
          "md5": "4662dbbfe9efe55e9673ed146c8e7fb3",
          "sha256": "87d2fe3d709a4d84c9cd322c8a000224ac3f3681ce6bc3677a81cf69ef79a378"
        },
        "downloads": -1,
        "filename": "lensless-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4662dbbfe9efe55e9673ed146c8e7fb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39248,
        "upload_time": "2022-05-31T12:04:44",
        "upload_time_iso_8601": "2022-05-31T12:04:44.993854Z",
        "url": "https://files.pythonhosted.org/packages/df/5f/1cb0f6f5ff3fe5e7a0efbf461f53052a0ef04b2f5a306fdf4b71d55bfdb8/lensless-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df5f1cb0f6f5ff3fe5e7a0efbf461f53052a0ef04b2f5a306fdf4b71d55bfdb8",
        "md5": "4662dbbfe9efe55e9673ed146c8e7fb3",
        "sha256": "87d2fe3d709a4d84c9cd322c8a000224ac3f3681ce6bc3677a81cf69ef79a378"
      },
      "downloads": -1,
      "filename": "lensless-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4662dbbfe9efe55e9673ed146c8e7fb3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 39248,
      "upload_time": "2022-05-31T12:04:44",
      "upload_time_iso_8601": "2022-05-31T12:04:44.993854Z",
      "url": "https://files.pythonhosted.org/packages/df/5f/1cb0f6f5ff3fe5e7a0efbf461f53052a0ef04b2f5a306fdf4b71d55bfdb8/lensless-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}