{
  "info": {
    "author": "Johannes Fischer",
    "author_email": "<aulasparticularesdealemaosp@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Editors :: Text Processing",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Indexing",
      "Topic :: Utilities"
    ],
    "description": "\n### Converts any nested iterable (json, dict, list ...) to an HTML table\n\n\n\n```python\n\n    #pip install any-iter-to-html-table \n\n    from any_iter_to_html_table import create_html_table_from_iterable\n\n    data = {\n\n        \"glossary\": {\n\n            \"title\": \"example glossary\",\n\n            \"GlossDiv\": {\n\n                \"title\": \"S\",\n\n                \"GlossList\": {\n\n                    \"GlossEntry\": {\n\n                        \"ID\": \"SGML\",\n\n                        \"SortAs\": \"SGML\",\n\n                        \"GlossTerm\": \"Standard Generalized Markup Language\",\n\n                        \"Acronym\": \"SGML\",\n\n                        \"Abbrev\": \"ISO 8879:1986\",\n\n                        \"GlossDef\": {\n\n                            \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\n\n                            \"GlossSeeAlso\": [\"GML\", \"XML\"],\n\n                        },\n\n                        \"GlossSee\": \"markup\",\n\n                    }\n\n                },\n\n            },\n\n        }\n\n    }\n\n\n\n    \"\"\"https://json.org/example.html\"\"\"  \n\n\n\n        fromjsonorg_result = create_html_table_from_iterable(\n\n        data, filename=\"fromjsonorg.html\", title=\"Pandas - DataFrame\", sparsify=True\n\n    )\n\n```\n\n\n\n![](https://github.com/hansalemaos/screenshots/raw/main/fromjsonorg.png)\n\n\n\n```python\n\n    jsonfile = r\"F:\\jsonstackoverflow.json\"\n\n    #'https://api.stackexchange.com/2.2/answers?order=desc&sort=activity&site=stackoverflow'\n\n        json_from_file = create_html_table_from_iterable(\n\n        jsonfile,\n\n        filename=\"json_from_file.html\",\n\n        title=\"Pandas - DataFrame\",\n\n        sparsify=False,\n\n    )\n\n```\n\n\n\n![](https://github.com/hansalemaos/screenshots/raw/main/json_from_file.png)\n\n\n\n```python\n\n     sparsify=True\n\n```\n\n\n\n![](https://github.com/hansalemaos/screenshots/raw/main/json_from_file_sp.png)\n\n\n\n### Without CSS\n\n\n\nDesign is separated from data. You can use the preset, but if you want,\n\n you can easily create your own CSS style\n\n\n\n![](https://github.com/hansalemaos/screenshots/raw/main/noformat.png)\n\n\n\n\n\n\n\n```python\n\n    #'https://stackoverflow.com/questions/64359762/constructing-a-pandas-dataframe-with-columns-and-sub-columns-from-nested-diction\n\n    nesteddict = {\n\n        \"level1\": {\n\n            \"t1\": {\n\n                \"s1\": {\"col1\": 5, \"col2\": 4, \"col3\": 4, \"col4\": 9},\n\n                \"s2\": {\"col1\": 1, \"col2\": 5, \"col3\": 4, \"col4\": 8},\n\n                \"s3\": {\"col1\": 11, \"col2\": 8, \"col3\": 2, \"col4\": 9},\n\n                \"s4\": {\"col1\": 5, \"col2\": 4, \"col3\": 4, \"col4\": 9},\n\n            },\n\n            \"t2\": {\n\n                \"s1\": {\"col1\": 5, \"col2\": 4, \"col3\": 4, \"col4\": 9},\n\n                \"s2\": {\"col1\": 1, \"col2\": 5, \"col3\": 4, \"col4\": 8},\n\n                \"s3\": {\"col1\": 11, \"col2\": 8, \"col3\": 2, \"col4\": 9},\n\n                \"s4\": {\"col1\": 5, \"col2\": 4, \"col3\": 4, \"col4\": 9},\n\n            },\n\n            \"t3\": {\n\n                \"s1\": {\"col1\": 1, \"col2\": 2, \"col3\": 3, \"col4\": 4},\n\n                \"s2\": {\"col1\": 5, \"col2\": 6, \"col3\": 7, \"col4\": 8},\n\n                \"s3\": {\"col1\": 9, \"col2\": 10, \"col3\": 11, \"col4\": 12},\n\n                \"s4\": {\"col1\": 13, \"col2\": 14, \"col3\": 15, \"col4\": 16},\n\n            },\n\n        },\n\n        \"level2\": {\n\n            \"t1\": {\n\n                \"s1\": {\"col1\": 5, \"col2\": 4, \"col3\": 9, \"col4\": 9},\n\n                \"s2\": {\"col1\": 1, \"col2\": 5, \"col3\": 4, \"col4\": 5},\n\n                \"s3\": {\"col1\": 11, \"col2\": 8, \"col3\": 2, \"col4\": 13},\n\n                \"s4\": {\"col1\": 5, \"col2\": 4, \"col3\": 4, \"col4\": 20},\n\n            },\n\n            \"t2\": {\n\n                \"s1\": {\"col1\": 5, \"col2\": 4, \"col3\": 4, \"col4\": 9},\n\n                \"s2\": {\"col1\": 1, \"col2\": 5, \"col3\": 4, \"col4\": 8},\n\n                \"s3\": {\"col1\": 11, \"col2\": 8, \"col3\": 2, \"col4\": 9},\n\n                \"s4\": {\"col1\": 5, \"col2\": 4, \"col3\": 4, \"col4\": 9},\n\n            },\n\n            \"t3\": {\n\n                \"s1\": {\"col1\": 1, \"col2\": 2, \"col3\": 3, \"col4\": 4},\n\n                \"s2\": {\"col1\": 5, \"col2\": 6, \"col3\": 7, \"col4\": 8},\n\n                \"s3\": {\"col1\": 9, \"col2\": 10, \"col3\": 11, \"col4\": 12},\n\n                \"s4\": {\"col1\": 13, \"col2\": 14, \"col3\": 15, \"col4\": 16},\n\n            },\n\n        },\n\n    }   \n\n\n\n        nested_dict = create_html_table_from_iterable(\n\n        nesteddict,\n\n        filename=\"from_nested_dict.html\",\n\n        title=\"Pandas - DataFrame\",\n\n        sparsify=False,\n\n    )\n\n```\n\n\n\n![](https://github.com/hansalemaos/screenshots/raw/main/from_nested_dict.png)\n\n\n\n```python\n\n    Convert any nested iterable to an HTML table. Design is separated from data. You can use the preset, but if you want,\n\n    you can easily create your own CSS style.\n\n\n\n\n\n\n\n        Parameters:\n\n            data: Any\n\n                You can pass any iterable (list, dict, tuple â€¦), json file path (str) or json URL (str)\n\n            filename: Union[None,str]\n\n                File path for output, will be saved in your current working directory\n\n                If None, no files will be written.\n\n            title: str\n\n                Title  for HTML\n\n                (default =  'Pandas DataFrame')\n\n            sparsify: bool\n\n                Repeat keys in every line\n\n                (default = False)\n\n\n\n        Returns:\n\n            tuple[str,str]\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hansalemaos/any_iter_to_html_table",
    "keywords": "json,dict,list,HTML,CSS",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "any-iter-to-html-table",
    "package_url": "https://pypi.org/project/any-iter-to-html-table/",
    "platform": null,
    "project_url": "https://pypi.org/project/any-iter-to-html-table/",
    "project_urls": {
      "Homepage": "https://github.com/hansalemaos/any_iter_to_html_table"
    },
    "release_url": "https://pypi.org/project/any-iter-to-html-table/0.1/",
    "requires_dist": [
      "a-pandas-ex-plode-tool",
      "pandas",
      "regex",
      "requests",
      "ujson"
    ],
    "requires_python": "",
    "summary": "Convert any nested iterable (json, dict, list, tuple ...) to an HTML table. Design is separated from data.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15337078,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85da1db59cc25ec60cc6c90bad11754d666d566a0d758895e8d044e5a38fb066",
          "md5": "69346657a4ed1d0a2de3f3ff13c8589d",
          "sha256": "bc8456b316e013c0a3871c44cdcdf600e22c189e57472ca49170d87057cb23ac"
        },
        "downloads": -1,
        "filename": "any_iter_to_html_table-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69346657a4ed1d0a2de3f3ff13c8589d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10261,
        "upload_time": "2022-10-07T14:52:16",
        "upload_time_iso_8601": "2022-10-07T14:52:16.934095Z",
        "url": "https://files.pythonhosted.org/packages/85/da/1db59cc25ec60cc6c90bad11754d666d566a0d758895e8d044e5a38fb066/any_iter_to_html_table-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "616d90101f0895c000dc30cf17e84c1d3964ab8398c18d44689252cf1460b040",
          "md5": "7de03245de87e418b10ac6b423f7fdb6",
          "sha256": "ec4af8f805b6087f20df488e491baf24a3ce4fc9f95c02fb5a00c38a48fcff5b"
        },
        "downloads": -1,
        "filename": "any_iter_to_html_table-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7de03245de87e418b10ac6b423f7fdb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7917,
        "upload_time": "2022-10-07T14:52:18",
        "upload_time_iso_8601": "2022-10-07T14:52:18.705351Z",
        "url": "https://files.pythonhosted.org/packages/61/6d/90101f0895c000dc30cf17e84c1d3964ab8398c18d44689252cf1460b040/any_iter_to_html_table-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85da1db59cc25ec60cc6c90bad11754d666d566a0d758895e8d044e5a38fb066",
        "md5": "69346657a4ed1d0a2de3f3ff13c8589d",
        "sha256": "bc8456b316e013c0a3871c44cdcdf600e22c189e57472ca49170d87057cb23ac"
      },
      "downloads": -1,
      "filename": "any_iter_to_html_table-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "69346657a4ed1d0a2de3f3ff13c8589d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10261,
      "upload_time": "2022-10-07T14:52:16",
      "upload_time_iso_8601": "2022-10-07T14:52:16.934095Z",
      "url": "https://files.pythonhosted.org/packages/85/da/1db59cc25ec60cc6c90bad11754d666d566a0d758895e8d044e5a38fb066/any_iter_to_html_table-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "616d90101f0895c000dc30cf17e84c1d3964ab8398c18d44689252cf1460b040",
        "md5": "7de03245de87e418b10ac6b423f7fdb6",
        "sha256": "ec4af8f805b6087f20df488e491baf24a3ce4fc9f95c02fb5a00c38a48fcff5b"
      },
      "downloads": -1,
      "filename": "any_iter_to_html_table-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7de03245de87e418b10ac6b423f7fdb6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7917,
      "upload_time": "2022-10-07T14:52:18",
      "upload_time_iso_8601": "2022-10-07T14:52:18.705351Z",
      "url": "https://files.pythonhosted.org/packages/61/6d/90101f0895c000dc30cf17e84c1d3964ab8398c18d44689252cf1460b040/any_iter_to_html_table-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}