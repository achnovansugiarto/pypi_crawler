{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# swi-tools\nScripts for operating on an Arista SWI or SWIX\n\nA SWI is a SoftWare Image containing the software that will run on the switch when the image is booted.\nA SWIX is a SoftWare Image eXtension, a collection of files (ex RPMs, squashfs) that can be installed to extend the behavior of the base SWI.\n\n## Scripts\n* **swi-signature**: Add a cryptographic signature to an Arista SWI or SWIX\n* **swix-signature**: A convenience alias for the above\n* **verify-swi**: Verify the cryptographic signature of an Arista SWI or SWIX\n* **verify-swix**: A convenience alias for the above\n* **swix-create**: Create a new SWIX file\n* **swi-signing-service**: Simple example of a signing service (all local)\n\n## Installation\n```\npip3 install switools\n```\nAlternatively:\n```\ngit clone https://github.com/aristanetworks/swi-tools.git\ncd swi-tools\npython3 setup.py install\n```\n### Dependencies\n0. Python3. For a version that works with python2, use the version 1.0 release.\n1. [Zip](http://infozip.sourceforge.net/) - Used in the `swi-signature` script to remove a signature from the SWI/X if you want to re-sign it, this comes preinstalled on many operating systems.\n2. [M2Crypto](https://pypi.org/project/M2Crypto/) - installed automatically with the setup script.\n3. [PyYAML](https://pyyaml.org) - Used to read the manifest.yaml, if added, when creating a SWIX.\n4. [jsonschema](http://json-schema.org) - Used to verify the manifest.yaml, if added, when creating a SWIX.\n\n## Creating a SWIX\nCreating a SWIX is a straightforward process involving the `swix-create` command.\n```\n$ swix-create -h\nusage: swix-create [-h] [-f] [-i manifest.yaml]\n                   OUTFILE.swix PACKAGE.rpm [PACKAGE.rpm ...]\n\npositional arguments:\n  OUTFILE.swix          Name of output file\n  PACKAGE.rpm           An RPM to add to the SWIX\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f, --force           Overwrite OUTFILE.swix if it already exists\n  -i manifest.yaml, --info manifest.yaml\n                        Location of manifest.yaml file to add metadata to SWIX\n```\n### 1. Creating a simple SWIX\n```\n$ swix-create MySwix.swix MyRpm.rpm\n  adding: manifest.txt (stored 0%)\n  adding: MyRpm.rpm (stored 0%)\n```\nYour SWIX is ready to be installed on a switch!\n```\n(Arista)# scp user@host:/path/MySwix.swix extension:\nCopy completed successfully.\n(Arista)# show extensions\nName             Version/Release      Status      Extension\n---------------- -------------------- ----------- ---------\nMySwix.swix      1.0.3/1.el7          A, NI       1\n(Arista)# extension MySwix.swix\nNote: no agents to restart\n```\nEt voilÃ ! Your extension has been installed. Note that your extension may require some agents to be restarted. e.g., A restart of ConfigAgent is required if any CLI plugins have been added.\n### 2. Adding a manifest.yaml file\nThe functionality of the SWIX can be enriched by adding a YAML file which contains instructions on when and how to install certain files. Such file is added with the `-i` switch, followed by the file, which will get validated and added to the SWIX. A sample manifest.yaml\n```\nmetadataVersion: 1.0\nversion:\n  - 4.21.1*:\n    - AppBeta.rpm\n    - AppBeta-lib.rpm\n    - AppBeta.squashfs:\n      - mount: /opt/apps/hello_world\n  - 4.20.{6-9}*:\n    - AppStable.rpm\n    - AppStable.squashfs:\n      - mount: /opt/apps/hello_world\nagentsToRestart:\n  - ConfigAgent\n  - IgmpSnoopingAgent\n```\nAt the moment, the only supported metadata version is `1.0`. The other entry is the version-specific instructions for the extension. The first indented entry reads as:\n* For EOS versions 4.25.1 (Also 4.25.1.1, 4.25.1FX, etc., but not 4.25.10)\n  * Install `AppBeta.rpm`\n  * Install `AppBeta-lib.rpm`\n  * Mount the SquashFS file `AppBeta.squashfs` on `/opt/apps/hello_world`\n  * Prompt the user that `ConfigAgent` and `IgmpSnoopingAgent` need to be restarted. This only works on EOS versions 4.25.1 and later.\n\nThis way, you can publish one SWIX that works on multiple versions of EOS.\n## Signing an Arista SWI/X\nSigning an Arista SWI or SWIX is a multi-step process involving the `swi-signature` script. First, with `swi-signature prepare`,\na null signature file (a fix-sized signature file made entirely of null bytes) is added to the SWI/X, at the path `/swi-signature` (for SWI files) or `/swix-signature` (for SWIX files) in the zip file. \nNext, a signature is generated from the resulting SWI/X using a signing key. Finally, with `swi-signature sign`, the null signature file in the SWI/X is \nupdated to reflect both the signature that was generated and the signing certificate used to verify the signature.\n\nFor EOS images starting 4.27.2, the process changes a little. For that, version 1.2 of this tool is needed.\nThat is because a 4.27.2 image will contain multiple images, thus the prepare/sign split becomes inpractical. Instead, one has to provide a \"swi-signing-server\" binary (somewhere in PATH) that given a digest will return it signed. In that case, the swi-signing-server has access to the signer's private key. There is an example of how such a swi-signing-server could look like (it is using a local key). So in case no signer key is provided on the command line, providing a signatureFile instead will no longer do (it will still work though if the image is a pre 4.27.2 image).\nWith 4.27.2+ images, the null-signature is automaticaly added and will overwrite any pre-existing signature forcefully.\n\n### 1. Preparing the SWI/X for signing\nBefore generating a signature of the SWI/X, the SWI/X must be pre-signed with a null signature, a fix-sized signature file made entirely of null bytes. \nThis can be done with the `prepare` option in the `swi-signature` script. At the end of the preparation, the sha256 hash of the SWI/X with the null signature \nis printed out in hex format. The hash is used in the next step to generate the real signature of the SWI/X file.\n```\n$ swi-signature prepare -h\nusage: swi-signature prepare [-h] [--force-sign] [--outfile OUTFILE]\n                             [--size SIZE]\n                             EOS.swi[x]\n\npositional arguments:\n  EOS.swi[x]         Path of the SWI/X to prepare for signing\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --force-sign       Force signing the SWI/X if it's already signed\n  --outfile OUTFILE  Path to save SWI/X with null signature, if not replacing\n                     the input SWI/X\n  --size SIZE        Size of null signature to add (default 8192 bytes)\n```\nExamples:\n```\n$ swi-signature prepare EOS.swi\n84f6e823976f6d499fb161c2502ba9474b68abca7e98a9c98251ea5bd5e93765\n```\nThis adds a null signature of 8192 bytes (the default) to EOS.swi, and prints out its sha256 hash in hex format. Keep track of this hash \nfor use in the next step, as input into a signing server to generate a signature signed by a private key.\n\n```\n$ swi-signature prepare EOS.swi --force-sign --outfile EOS_temp.swi --size 9000\ndeleting: swi-signature\n10aa98f4bd283256c8cd922d1bf40fb1b25a13d97049e4c0135e7140cb63d579\n```\nThis copies EOS.swi to EOS_temp.swi, and signs EOS_temp.swi with a null signature of \n9000 bytes, even if it has been signed before (removes the old signature).\n\nSigning SWIX files behaves the same.\n\n### 2. Signing the SWI/X\nAfter adding a null signature file to the SWI/X, the SWI/X can now be signed. The null signature will be replaced by a real signature\nthat contains both the signature of the SWI/X and the signing certificate that will be used to verify the signature. There are two options depending on whether \nyou have direct access to the signing private key.\n```\n$ swi-signature sign -h\nusage: swi-signature sign [-h]\n                          (--signature SIGNATURE.txt | --key SIGNINGKEY.key)\n                          EOS.swi[x] SIGNINGCERT.crt ROOTCERT.crt\n\npositional arguments:\n  EOS.swi[x]            Path of the SWI/X to sign.\n  SIGNINGCERT.crt       Path of signing certificate.\n  ROOTCERT.crt          Root certificate of signing certificate to verify\n                        against \n\noptional arguments:\n  -h, --help            show this help message and exit\n  --signature SIGNATURE.txt\n                        Path of base64-encoded SHA-256 signature file of EOS.swi or swix, signed by\n                        signing cerificate.\n  --key SIGNINGKEY.key  Path of signing key, used to generate the signature\n```\n\n#### 2a. Signing SWI/X without direct access to private key\nIf there is no direct access to the private key, we assume that the private key is stored remotely in some form of signing server. A user should be able to \nquery this signing server to use the signing key to sign an input hash and return the resulting signature.\nThe input hash that should be used is printed out in the `swi-signature prepare` step. Since it is given in hex format, the signing server \nshould be able to accept this sha256 hash in hex format as an input. The signing server should then sign the input hash with its signing private key, and then \nreturn the resulting signature as well as the signing certificate corresponding to the private key. The resulting signature must be converted to base64 \nformat to be used in the `swi-signature sign` script.\n\nExample:\n```\n$ # Prepare EOS.swi for signing and save the hash to input_hash.txt\n$ swi-signature prepare EOS.swi > input_hash.txt                    \n \n$ # input_hash.txt is a sha256 hash of EOS.swi in hex format\n$ cat input_hash.txt\n0f1f680a7c97f274cf2b6d131595521fec2a97509aceaddac529b7ab46ef6f8f\n\n$ # Invoke a script that talks to a signing server that takes a hash as input and returns the signing certificate and generated signature.\n$ ./talk-to-signing-server --input input_hash.txt --outputCertFile signing.crt --outputSignatureFile signature.txt \n\n$ # The resulting signature must be in base64 format\n$ cat signature.txt\nMEYCIQCcpjTgTZm9c+QdlVJ0W6xe7sxhjs7KXbwDngwC3/66QwIhAL7SRpkPOtOSyJPDlEqhyLzziQyght/E1iUSpmvEXmxg\n$\n$ swi-signature sign EOS.swi signing.crt root.crt --signature signature.txt\nSWI file EOS.swi successfully signed and verified.\n\n```\nSigns EOS.swi with a pre-generated signature. At the end of signing, the resulting SWI will be automatically verified with the user-provided root certificate. SWIX signing behaves the same.\n\n#### 2b. Signing SWI/X with direct access to private key\nIf there is direct access to the private key, the key can be used directly in the input to the signing script as follows:\nExamples:\n```\n$ swi-signature sign EOS.swi signing.crt root.crt --key signing.key\nSWI file EOS.swi successfully signed and verified.\n```\nSigns EOS.swi using `signing.crt`. The signature used is created by signing the hash of EOS.swi with `signing.key`.\n\n#### 2c. Signing EOS 4.27.2+ SWI with direct access to private key\nExample:\n```\n$ swi-signature sign EOS.swi /etc/swi-signing/signing.crt /etc/swi-signing/root.crt --key /etc/swi-signing/signing.key\nOptimizations in EOS.swi: Default Sand-4GB Strata-4GB\nDefault sha256: a3276b9976bb2471838dc95fbd2a38dcf1e7e5510bcfa8dfe0f0eff8b935a709\nSand-4GB sha256: 4d0d23293eaecc7f55e7ee9776b0c250bef1a335e1b4ea28ef4eea989eb917f9\nStrata-4GB sha256: 520cbde6d60d1089bfbc95d9086c47ce4a6fc0399a5b8a29fc6c1bd95c7d029a\nAdding signature files to EOS.swi: Default.signature Sand-4GB.signature Strata-4GB.signature\nEOS.swi sha256: 913eb842e408ceddea914543230c9e13ff63e360fc6a6735ef9c0c1571209fb3\nSWI/X file EOS.swi successfully signed and verified.\n```\n#### 2d. Signing EOS 4.27.2+ SWI without direct access to private key\nExample:\n```\n$ which swi-signing-service\n/usr/local/bin/swi-signing-service\n\n$ swi-signature sign EOS.swi /etc/swi-signing/signing.crt /etc/swi-signing/root.crt\n... (same as above)\n```\n\n## Verifying an Arista SWI/X signature\nThe `verify-swi` script verifies the signature in a SWI or SWIX by checking that the signing certificate\nused to sign the SWI/X is trusted by a specified root certificate, and that signing the SWI/X with the signing certificate matches\nthe signature of the SWI/X. By default, the script verifies the signing certificate against the Arista root certificate, which is installed \nwith the package.\n```\n$ verify-swi -h\nusage: verify-swi [-h] [--CAfile CAFILE] EOS.swi[x]\n\nVerify Arista SWI image or SWIX extension\n\npositional arguments:\n  EOS.swi[x]       SWI/X file to verify\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --CAfile CAFILE  Root certificate to verify against. (default:\n                   ARISTA_ROOT_CA.crt)\n```\nExamples:\n```\n$ verify-swi EOS.swi \nSWI verification failed.\n$ echo $?\n4\n```\nThe above example verifies EOS.swi using the Arista root certificate.\nHowever, the signature is not valid. Invalid signature verification returns a non-zero return code.\n\n```\n$ verify-swi EOS.swi --CAfile root.crt\nSWI verification successful.\n$ echo $?\n0\n```\nHere EOS.swi is verified using `root.crt`. Verification in this case was successful.\n```\n$ verify-swi EOS.swi --CAfile /etc/swi-signing/root.crt\nOptimizations in EOS.swi: Default Sand-4GB Strata-4GB\nDefault: SWI/X verification successful.\nSand-4GB: SWI/X verification successful.\nStrata-4GB: SWI/X verification successful.\nSWI/X verification successful.\n```\nAbove's output was for a 4.27.2+ image (which has multiple contained images)\n\n## Testing\nTo run unit tests:\n``` \npython3 setup.py test \n```\nEnd-to-end tests after install:\n``` \n./tests/swim_test.sh \n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aristanetworks/swi-tools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "switools",
    "package_url": "https://pypi.org/project/switools/",
    "platform": null,
    "project_url": "https://pypi.org/project/switools/",
    "project_urls": {
      "Homepage": "https://github.com/aristanetworks/swi-tools"
    },
    "release_url": "https://pypi.org/project/switools/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tools for handling Arista SWI/X",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13446849,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e896a131060912a4210701cc25b29602133beb6b5b46ed58b8723550751bd81",
          "md5": "be535a835e7517038cb53e767198c63d",
          "sha256": "36c8b832d650a71954434dba3b305d2e50de0af2f18c42f2b1d10e34be86c871"
        },
        "downloads": -1,
        "filename": "switools-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "be535a835e7517038cb53e767198c63d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23558,
        "upload_time": "2021-11-08T02:19:24",
        "upload_time_iso_8601": "2021-11-08T02:19:24.472664Z",
        "url": "https://files.pythonhosted.org/packages/1e/89/6a131060912a4210701cc25b29602133beb6b5b46ed58b8723550751bd81/switools-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e082745d74d4f38b1962b9c2e37c39ef1041a8fc6784736bbbb1c79db55174d0",
          "md5": "c8f21f11c265f997723cae8076fbb8d7",
          "sha256": "f76019acfe83436b7013f9f500e89693fc26c331ef5dd838786b5be118430232"
        },
        "downloads": -1,
        "filename": "switools-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c8f21f11c265f997723cae8076fbb8d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28838,
        "upload_time": "2022-04-07T21:48:33",
        "upload_time_iso_8601": "2022-04-07T21:48:33.564304Z",
        "url": "https://files.pythonhosted.org/packages/e0/82/745d74d4f38b1962b9c2e37c39ef1041a8fc6784736bbbb1c79db55174d0/switools-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e082745d74d4f38b1962b9c2e37c39ef1041a8fc6784736bbbb1c79db55174d0",
        "md5": "c8f21f11c265f997723cae8076fbb8d7",
        "sha256": "f76019acfe83436b7013f9f500e89693fc26c331ef5dd838786b5be118430232"
      },
      "downloads": -1,
      "filename": "switools-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c8f21f11c265f997723cae8076fbb8d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28838,
      "upload_time": "2022-04-07T21:48:33",
      "upload_time_iso_8601": "2022-04-07T21:48:33.564304Z",
      "url": "https://files.pythonhosted.org/packages/e0/82/745d74d4f38b1962b9c2e37c39ef1041a8fc6784736bbbb1c79db55174d0/switools-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}