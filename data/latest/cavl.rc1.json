{
  "info": {
    "author": "Justin Doornbos",
    "author_email": "jstndevel@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# cavl\n\n`cavl` is a simple library for simulating and visualizing various cellular automata.\n\n## Installation\n\nInstall using `pip`:\n\n```\npip install cavl\n```\n\n**Note: If you want to use the built-in animation functionality, you also need to install `ffmpeg`**.\n\n## Usage\n\n`cavl` provides two main classes for creating and simulating cellular automata: `CellularAutomaton1D` and `CellularAutomaton2D`, for 1D and 2D cellular automata respectively.\n\nBoth classes take the same number and type of parameters for initialization:\n\n- `init`: the starting grid for the cellular automata\n- `neighbors`: list of coordinates to represent the neighborhood of a cell\n- `apply`: function to apply a given rule to a single cell (signature depends on whether working with 1D or 2D cellular automata)\n  - **1D**: takes dictionary with keys as relative coordinates of a neighbor and values representing the current state number of that neighbor (`dict[tuple[int, int], float]`)\n  - **2D**: takes same dictionary as with **1D** `apply` function, as well as the state number of the current cell being worked on\n  - The given `apply` function should return the state number that the current cell should be in the next generation.\n\n### Neighborhoods\n\n`cavl` provides built-in helper functions for retrieving lists of tuple coordinates representing common neighborhoods.\n\n- `moore(radius: int)`: returns list of `tuple[int, int]` representing a Moore neighborhood with given `radius` (default of 1)\n  - i.e. `moore()` returns `[(-1, -1), (0, -1), (1, -1), (-1, 0), (1, 0), (-1, 1), (0, 1), (1, 1)]`\n- `von_neumann(radius: int)`: returns list of `tuple[int, int]` representing a von Neumann neighborhood with given `radius` (default of 1)\n  - i.e. `von_neumann()` returns `[(0, -1), (-1, 0), (1, 0), (0, 1)]`\n\n### Visualization\n\n`cavl` provides several built-in functions for visualizing your cellular automata:\n\n- `plot`: used to visualize the generations of a 1D cellular automaton\n- `animate`: used to animate the progression of the generations of a 1D cellular automaton\n- `plot2d`: used to visualize the most recent generation of a 2D cellular automaton\n- `animate2d`: used to animate the progression of the generations of a 2D cellular automaton\n\n### 1D Cellular Automata\n\n#### Rules\n\n`cavl` also provides some built-in classes for common cellular automata rules. Currently, there are only two built-in 1D cellular automata rules: \n- `General1DRule`: takes a rule using the [Wolfram code](https://en.wikipedia.org/wiki/Wolfram_code) naming system\n- `Totalistic1DRule`: rule that looks at the **total** of the values of the cells in a neighborhood; more information [here](https://mathworld.wolfram.com/TotalisticCellularAutomaton.html)\n\n#### Example\n\n```python\nimport cavl\n\nstart = cavl.init(50)  # returns 1D array with width of 50\n\nrule = cavl.General1DRule(30)\n\nautomaton = cavl.CellularAutomaton1D(init=start, neighbors=rule.neighbors, apply=rule.apply)\nautomaton.evolve(20)\n\ncavl.plot(automaton, save=True, filename='1D_automaton')\n```\n\n![](images/1D_automaton.png)\n\n### 2D Cellular Automata\n\n#### Rules\n\nCurrently, there are no built-in rule classes that work with 2D cellular automata; some will be added later on.\n\n#### Example\n\n```python\nimport cavl\n\n# simple period 2 oscillator\nstart = [[0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 1, 1, 1, 0, 0],\n         [0, 0, 1, 1, 1, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0]]\n\nneighbors = cavl.moore()\n\n# Conway's Game of Life rules\ndef apply(neighbors, current) -> int:\n    alive = sum(neighbors.values())\n    if current == 1 and (alive == 2 or alive == 3):\n        return 1\n    elif current == 0 and alive == 3:\n        return 1\n    else:\n        return 0\n\n\nautomaton = cavl.CellularAutomaton2D(init=start, neighbors=neighbors, apply=apply)\nautomaton.evolve(21)\n\ncavl.plot2d(automaton, save=True, filename='2D_automaton')\n```\n\n![](images/2D_automaton.png)\n\n## TODO\n\n- [ ] More built-in rules\n  - [ ] Cyclic\n  - [ ] Life-like\n- [ ] Additional grid layouts\n  - [ ] Hexagonal\n  - [ ] Triangular\n- [ ] ...and more\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jstnd/cavl",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cavl",
    "package_url": "https://pypi.org/project/cavl/",
    "platform": "",
    "project_url": "https://pypi.org/project/cavl/",
    "project_urls": {
      "Homepage": "https://github.com/jstnd/cavl"
    },
    "release_url": "https://pypi.org/project/cavl/0.4.1/",
    "requires_dist": [
      "matplotlib (>=3.4.3)",
      "numpy (>=1.21.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "A simple library for visualizing cellular automata",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11829032,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3ad9c1db1203ca7e61a7a844f6d77abb8cc19114f122f00f334571756c5c9fd",
          "md5": "14c7e0e1abaff37b092e63dc60295f40",
          "sha256": "480170a71854413ac108e9e25569b22fca930dc2b2136383ebacc68e333826a8"
        },
        "downloads": -1,
        "filename": "cavl-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14c7e0e1abaff37b092e63dc60295f40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7303,
        "upload_time": "2021-10-25T21:55:43",
        "upload_time_iso_8601": "2021-10-25T21:55:43.734189Z",
        "url": "https://files.pythonhosted.org/packages/a3/ad/9c1db1203ca7e61a7a844f6d77abb8cc19114f122f00f334571756c5c9fd/cavl-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7a7cbd0c6947dee219bd02a9e8ab266648ffef4645c82fcfed57f1f0015d374",
          "md5": "2d09f547a671fefad1c9f5afb71a703d",
          "sha256": "b11b5f3908c91fc8788545984ea4b9637a2a8b0f3cdd2154677d5d3e353d2cff"
        },
        "downloads": -1,
        "filename": "cavl-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2d09f547a671fefad1c9f5afb71a703d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6415,
        "upload_time": "2021-10-25T21:55:44",
        "upload_time_iso_8601": "2021-10-25T21:55:44.771611Z",
        "url": "https://files.pythonhosted.org/packages/c7/a7/cbd0c6947dee219bd02a9e8ab266648ffef4645c82fcfed57f1f0015d374/cavl-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3ad9c1db1203ca7e61a7a844f6d77abb8cc19114f122f00f334571756c5c9fd",
        "md5": "14c7e0e1abaff37b092e63dc60295f40",
        "sha256": "480170a71854413ac108e9e25569b22fca930dc2b2136383ebacc68e333826a8"
      },
      "downloads": -1,
      "filename": "cavl-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14c7e0e1abaff37b092e63dc60295f40",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7303,
      "upload_time": "2021-10-25T21:55:43",
      "upload_time_iso_8601": "2021-10-25T21:55:43.734189Z",
      "url": "https://files.pythonhosted.org/packages/a3/ad/9c1db1203ca7e61a7a844f6d77abb8cc19114f122f00f334571756c5c9fd/cavl-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7a7cbd0c6947dee219bd02a9e8ab266648ffef4645c82fcfed57f1f0015d374",
        "md5": "2d09f547a671fefad1c9f5afb71a703d",
        "sha256": "b11b5f3908c91fc8788545984ea4b9637a2a8b0f3cdd2154677d5d3e353d2cff"
      },
      "downloads": -1,
      "filename": "cavl-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2d09f547a671fefad1c9f5afb71a703d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6415,
      "upload_time": "2021-10-25T21:55:44",
      "upload_time_iso_8601": "2021-10-25T21:55:44.771611Z",
      "url": "https://files.pythonhosted.org/packages/c7/a7/cbd0c6947dee219bd02a9e8ab266648ffef4645c82fcfed57f1f0015d374/cavl-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}