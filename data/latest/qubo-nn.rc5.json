{
  "info": {
    "author": "Instance01",
    "author_email": "whodis@instancedev.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "## QUBO - NN\n\n<img alt=\"qubo heat map\" src=\"https://raw.githubusercontent.com/instance01/qubo-nn/master/qubo_nn/plots/qubo_map_singles.png\">\n<p align=\"center\">\n  9 problems and their respective QUBO matrices.\n</p>\n\nQUBO matrices are used to describe an optimization problem as a matrix such that a Quantum Annealer (such as a D-Wave QA) can solve it.\n\nNow, these matrices are quite an interesting construct.. Thus, a few questions arise:\n\n* Is it possible to classify the problem class based on the QUBO matrix?\n* Is it possible to reverse-engineer the problem parameters that led to a QUBO matrix?\n\nLet's find out.\n\n```\npip install qubo-nn\n```\n\n## Project Structure\n\n|File|Purpose|\n|----|-------|\n|datasets/|Contains generated datasets.|\n|models/|Contains trained models.|\n|nn/|Contains neural network models.|\n|plots/|Contains plotting scripts and generated plots.|\n|problems/|Contains generators and evaluators for specific problems such as 3SAT or TSP.|\n|runs/|Contains tensorboard logging files.|\n|config.py|Configuration (json) handling.|\n|data.py|LMDB data handling.|\n|main.py|Main entry point.|\n|pipeline.py|End to end training and testing of NNs on QUBO matrices.|\n|simulations.json|All experiments and configurations.|\n\nProblems implemented so far:\n\n* Number Partitioning\n* Maximum Cut\n* Minimum Vertex Cover\n* Set Packing\n* Maximum 2-SAT\n* Set Partitioning\n* Graph Coloring\n* Quadratic Assignment\n* Quadratic Knapsack\n* Maximum 3-SAT\n* Travelling Salesman (TSP)\n* Graph Isomorphism\n* Sub-Graph Isomorphism\n* Maximum Clique\n\n## Setup\n\n```\npip install qubo-nn\n```\n\nOR\n\n```\npip3 install -r requirements.txt\npip3 install -e .\n```\n\n## Using\n\n### Classification / Reverse regression\n\n```\nusage: main.py [-h] [-t TYPE] [--eval] [--gendata] [--train] [-c CFG_ID] [-m [MODEL]] [-n [NRUNS]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t TYPE, --type TYPE  Type (classify, reverse)\n  --eval\n  --gendata\n  --train\n  -c CFG_ID, --cfg_id CFG_ID\n                        cfg_id\n  -m [MODEL], --model [MODEL]\n  -n [NRUNS], --nruns [NRUNS]\n```\n\nExamples for classification:\n```\npython3 -m qubo_nn.main -t classify -c 2 --train\npython3 -m qubo_nn.main -t classify -c 2 --eval -m models/21-02-16_20\\:28\\:42-9893713-instances-MacBook-Pro.local-2 \n```\n\nExamples for reverse regression:\n```\npython3 -m qubo_nn.main -t reverse -c tsp1 --gendata\npython3 -m qubo_nn.main -t reverse -c tsp1 --train -n 1\n```\n\n### Generating QUBOs for arbitrary problems\n\nThis is an example on how to create a MaxCut instance and generate a QUBO matrix for it:\n\n```\n>>> graph = networkx.Graph([(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (3, 5)])\n>>> problem = MaxCut(graph)\n>>> matrix = problem.gen_qubo_matrix()\n[\n    [2, -1, -1, 0, 0],\n    [-1, 2, 0, -1, 0],\n    [-1, 0, 3, -1, -1],\n    [0, -1, -1, 3, -1],\n    [0, 0, -1, -1, 2]\n]\n```\n\nThe list of problems can be found in `qubo_nn/problems/__init__.py`. Also:\n\n```\n>>> from qubo_nn.problems import PROBLEM_REGISTRY\n>>> PROBLEM_REGISTRY\n{\n    'NP': <class 'qubo_nn.problems.number_partitioning.NumberPartitioning'>,\n    'MC': <class 'qubo_nn.problems.max_cut.MaxCut'>,\n    'MVC': <class 'qubo_nn.problems.minimum_vertex_cover.MinimumVertexCover'>,\n    'SP': <class 'qubo_nn.problems.set_packing.SetPacking'>,\n    'M2SAT': <class 'qubo_nn.problems.max2sat.Max2SAT'>,\n    'SPP': <class 'qubo_nn.problems.set_partitioning.SetPartitioning'>,\n    'GC': <class 'qubo_nn.problems.graph_coloring.GraphColoring'>,\n    'QA': <class 'qubo_nn.problems.quadratic_assignment.QuadraticAssignment'>,\n    'QK': <class 'qubo_nn.problems.quadratic_knapsack.QuadraticKnapsack'>,\n    'M3SAT': <class 'qubo_nn.problems.max3sat.Max3SAT'>,\n    'TSP': <class 'qubo_nn.problems.tsp.TSP'>,\n    'GI': <class 'qubo_nn.problems.graph_isomorphism.GraphIsomorphism'>,\n    'SGI': <class 'qubo_nn.problems.subgraph_isomorphism.SubGraphIsomorphism'>,\n    'MCQ': <class 'qubo_nn.problems.max_clique.MaxClique'>\n    ...\n}\n```\n\n## Results\n\nThe pipeline of interest is as follows.\n\n<img alt=\"Reverse-engineering pipeline/architecture.\" src=\"https://raw.githubusercontent.com/instance01/qubo-nn/master/qubo_nn/plots/architecture.png\">\n\nGiven some QUBO matrix that was generated using a set of problem parameters, we first classify the problem in step a and then predict the parameters in step b.\n\n### Classification\n\nUsing parameter configuration `100_genX` (see `simulations.json`), the average\ntotal misclassification rate over 20 models goes to near zero. The figure\nincludes the 95% confidence interval. Scrambling QUBOs leads to a nearly\nsimilar effect. Note that this is using a generalized dataset, i.e. the dataset\nconsists of not just 64x64 QUBO matrices for each problem, but also smaller\nsizes such as 32x32. The smaller sizes are zero-padded to the biggest supported\nsize, which most of the time is 64x64 and in rare cases goes up to 144x144 (for\nQuadratic Assignment).\n\n<img alt=\"Avg total misclassification rate\" src=\"https://raw.githubusercontent.com/instance01/qubo-nn/master/qubo_nn/plots/tot_mc_100_genX_100_genX.png\">\n\nThe t-SNE plot for this experiment is shown below.\n\n<img alt=\"t-SNE\" src=\"https://raw.githubusercontent.com/instance01/qubo-nn/master/qubo_nn/plots/tsne_100_genX_10.png\">\n\n### Reverse regression\n\nThis is preliminary. Some of the problems are easily learned by a neural network regressor. Each line represents 10 models and includes the 95% confidence interval.\n\n<img alt=\"Reversal regression losses over multiple problems\" src=\"https://raw.githubusercontent.com/instance01/qubo-nn/master/qubo_nn/plots/reverse_loss.png\">\n\n<img alt=\"Reversal regression R**2 over multiple problems\" src=\"https://raw.githubusercontent.com/instance01/qubo-nn/master/qubo_nn/plots/reverse_r2.png\">\n\n### Reversibility\n\nThis shows whether we can deduce the parameters that led to a QUBO matrix, given we predicted the problem beforehand.\nA lot of the graph based problems are easily reversable since the graph structure is kept intact in the QUBO matrix. Thus we can recreate the graph and other input parameters given a GraphColoring QUBO matrix.\n\nThis is still WIP - needs testing. These are hypotheses.\n\nReversing some problems like Quadratic Knapsack might be possible - an algorithm is an idea, but one could also make their life easy and try fitting a NN model to it.\n\n|Problem|Reversibility|Comment|\n|-------|-------------|-------|\n|Graph Coloring|**+**|Adjacency matrix found in QUBO.|\n|Maximum 2-SAT|**?**|Very complex to learn, but possible? C.f. `m2sat_to_bip.py` in `contrib`.|\n|Maximum 3-SAT|**?**|Very complex to learn, but possible?|\n|Maximum Cut|**+**|Adjacency matrix found in QUBO.|\n|Minimum Vertex Cover|**+**|Adjacency matrix found in QUBO.|\n|Number Partitioning|**+**|Easy, create equation system from the upper triangular part of the matrix (triu).|\n|Quadratic Assignment|**+**|Over-determined linear system of equations -> solvable. P does not act as salt. A bit complex to learn.|\n|Quadratic Knapsack|**-**|Budgets can be deduced easily (Find argmin in first row. This column contains all the budgets.). P acts as a salt -> thus not reversible.|\n|Set Packing|**-**|Multiple problem instances lead to the same QUBO.|\n|Set Partitioning|**-**|Multiple problem instances lead to the same QUBO.|\n|Travelling Salesman|**+**|Find a quadrant with non-zero entries (w/ an identical diagonal), transpose, the entries are the distance matrix. Norm result to between 0 and 1.|\n|Graph Isomorphism|**+**|Adjacency matrix found in QUBO.|\n|Sub-Graph Isomorphism|**+**|Adjacency matrix found in QUBO.|\n|Maximum Clique|**+**|Adjacency matrix found in QUBO.|\n\n### Redundancy of QUBOs with AutoEncoders \n\nThe figure below shows that there are major differences between problem classes\nin terms of their overall redundancy.\n\n<img alt=\"Redundacy of QUBos with AutoEncoders, R**2\" src=\"https://raw.githubusercontent.com/instance01/qubo-nn/master/qubo_nn/plots/red_ae_all_matrix.png\">\n\n## Contributing\n\nPull requests are very welcome. Before submitting one, run all tests with `./test.sh` and make sure nothing is broken.\n\n## References\n\n```\nGlover, Fred, Gary Kochenberger, and Yu Du. \"A tutorial on formulating and using qubo models.\" arXiv preprint arXiv:1811.11538 (2018).\nMichael J. Dinneen, \"Maximum 3-SAT as QUBO\" https://canvas.auckland.ac.nz/courses/14782/files/574983/download?verifier=1xqRikUjTEBwm8PnObD8YVmKdeEhZ9Ui8axW8HwP&wrap=1\nLucas, Andrew. \"Ising formulation of many NP-problems. Frontiers in Physics\" (2014)\nCristian S. Calude, Michael J. Dinneen and Richard Hua. \"QUBO Formulations for the Graph Isomorphism Problem and Related Problems\" (2017)\n```\n\n## Related Work\n\n[Hadamard Gate Transformation for 3 or more QuBits](https://blog.xa0.de/post/Hadamard-Gate-Transformation-for-3-or-more-QuBits/)\n\n[QUBOs for TSP and Maximum-3SAT](https://blog.xa0.de/post/QUBOs-for-TSP-and-Maximum---3SAT/)\n\n[QUBO-NN - Reverse-Engineering QUBO matrices](https://blog.xa0.de/post/QUBO-NN%20---%20Reverse-Engineering-QUBO-matrices/)\n\n[A note on Adiabatic Evolution in Quantum Annealing](https://blog.xa0.de/post/A-note-on-Adiabatic-Evolution-in-Quantum-Annealing/)\n\n[Quantum Annealing Hamiltonian Example Calculation](https://blog.xa0.de/post/Quantum-Annealing-Hamiltonian-Example-Calculation/)\n\n[List of QUBO formulations (48)](https://blog.xa0.de/post/List-of-QUBO-formulations/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/instance01/qubo-nn",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qubo-nn",
    "package_url": "https://pypi.org/project/qubo-nn/",
    "platform": "",
    "project_url": "https://pypi.org/project/qubo-nn/",
    "project_urls": {
      "Homepage": "https://github.com/instance01/qubo-nn"
    },
    "release_url": "https://pypi.org/project/qubo-nn/0.2.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "QUBO translations for 14 problems. Also: Reverse-engeering and AutoEncoders for QUBOs.",
    "version": "0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10794253,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a46ef988b40d63fdb15faa67d50ffc01dd9f5a43113d83bda3a573b1108cf9cf",
          "md5": "570cbd5f35416b8e46b51296ca298f55",
          "sha256": "1c9e632effed77ae80dd4d1aa93aaa7c28e97e56b7c15d6337882d19d9dc3aa8"
        },
        "downloads": -1,
        "filename": "qubo-nn-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "570cbd5f35416b8e46b51296ca298f55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18627,
        "upload_time": "2021-07-01T06:19:45",
        "upload_time_iso_8601": "2021-07-01T06:19:45.885850Z",
        "url": "https://files.pythonhosted.org/packages/a4/6e/f988b40d63fdb15faa67d50ffc01dd9f5a43113d83bda3a573b1108cf9cf/qubo-nn-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6a7bf6b62330f927c7cd7483d86f8d44348617a5509fc73a3ed1e6ffb2effc7",
          "md5": "efb507cd2668bfbedf0698bd2cf8e0a4",
          "sha256": "9713890dd70f84148e3834c5d7f6846c966302a81b9edaa99f19f97ad7d69ad7"
        },
        "downloads": -1,
        "filename": "qubo-nn-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "efb507cd2668bfbedf0698bd2cf8e0a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18656,
        "upload_time": "2021-07-01T06:22:20",
        "upload_time_iso_8601": "2021-07-01T06:22:20.274223Z",
        "url": "https://files.pythonhosted.org/packages/a6/a7/bf6b62330f927c7cd7483d86f8d44348617a5509fc73a3ed1e6ffb2effc7/qubo-nn-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2df130b488bd805046b89cfed7a53130fea3cfd66fc5cb9f7a641fee3a6ddcea",
          "md5": "dcc20a8dd2a886cdf09a47b274b44761",
          "sha256": "3bb625e8246bab7dd13c8a0d7a05be51783bbc804a85ae5e8dd8a1037b04ee47"
        },
        "downloads": -1,
        "filename": "qubo-nn-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dcc20a8dd2a886cdf09a47b274b44761",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18759,
        "upload_time": "2021-07-01T06:25:34",
        "upload_time_iso_8601": "2021-07-01T06:25:34.226308Z",
        "url": "https://files.pythonhosted.org/packages/2d/f1/30b488bd805046b89cfed7a53130fea3cfd66fc5cb9f7a641fee3a6ddcea/qubo-nn-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "993476203ef89a3f115a00efd4fc6b19ab76b7af488dee5a72249a4ddafd05ca",
          "md5": "fcb5b9f171adbe02e1c575dccbd2e55b",
          "sha256": "fe172de68c47587d7a2ebe0c780313993eb80222c6a90c749c5e43dbd466c1f6"
        },
        "downloads": -1,
        "filename": "qubo-nn-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fcb5b9f171adbe02e1c575dccbd2e55b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18771,
        "upload_time": "2021-07-01T06:41:32",
        "upload_time_iso_8601": "2021-07-01T06:41:32.806347Z",
        "url": "https://files.pythonhosted.org/packages/99/34/76203ef89a3f115a00efd4fc6b19ab76b7af488dee5a72249a4ddafd05ca/qubo-nn-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52a42a875cfbdd7670326d8a1392bb17ea6fa183a16d1c50a1958c40c2d0114b",
          "md5": "c1faaa3be67769ec4c22a966dca41b58",
          "sha256": "5f0d39eecef664b71fcf3323323ccbf094ece9066606024fd54b7ed7fa1579c5"
        },
        "downloads": -1,
        "filename": "qubo-nn-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c1faaa3be67769ec4c22a966dca41b58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65001,
        "upload_time": "2021-07-01T07:51:07",
        "upload_time_iso_8601": "2021-07-01T07:51:07.308582Z",
        "url": "https://files.pythonhosted.org/packages/52/a4/2a875cfbdd7670326d8a1392bb17ea6fa183a16d1c50a1958c40c2d0114b/qubo-nn-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52a42a875cfbdd7670326d8a1392bb17ea6fa183a16d1c50a1958c40c2d0114b",
        "md5": "c1faaa3be67769ec4c22a966dca41b58",
        "sha256": "5f0d39eecef664b71fcf3323323ccbf094ece9066606024fd54b7ed7fa1579c5"
      },
      "downloads": -1,
      "filename": "qubo-nn-0.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c1faaa3be67769ec4c22a966dca41b58",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 65001,
      "upload_time": "2021-07-01T07:51:07",
      "upload_time_iso_8601": "2021-07-01T07:51:07.308582Z",
      "url": "https://files.pythonhosted.org/packages/52/a4/2a875cfbdd7670326d8a1392bb17ea6fa183a16d1c50a1958c40c2d0114b/qubo-nn-0.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}