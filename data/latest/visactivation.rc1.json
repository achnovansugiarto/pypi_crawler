{
  "info": {
    "author": "YudeWang",
    "author_email": "yude.wang@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# visactivation\n\nWritten by YudeWang\n\nA simple visualization tool for tensor activation in CNN.\n\n### Install\n```\npip install visactivation\n```\n\n\n### Document\n\n```\nvisactivation.Tensor2Color(tensor, input_type=None, image=None, image_weight=0.3, colormap=cv2.COLORMAP_JET, act_type='max', norm_type='all')\n```\nColoring the feature map in CNN to visualize the corresponding activation intensity. \n\nParameters:\n\n- tensor (numpy.ndarray) - the input tensor for visualization\n- input_type (str) - 'NCHW', 'NHW','CHW','HW'. When tensor.ndim == 3, input_type must be given.\n- image (numpy.ndarray, optional) - corresponding image with size NHW3 or HW3\n- image_weight (float, optional) - weight of image when visualization activation\n- colormap (int, str)\n  - int - cv2.COLORMAP_xxx can be used here\n  - str - 'voc' PASCAL VOC colormap, 'random' Random colormap\n- act_type (str) - 'sum', 'max', 'mean', 'none'.\n  - 'sum' - choose the sum value in channel dimension for each spatial pixel\n  - 'max' - choose the max value in channel dimension for each spatial pixel\n  - 'mean' - choose the mean value in channel dimension for each spatial pixel\n  - 'none' - preseve the activation of C channels and visualize them independently.\n- norm_type (str) - 'relu','all'.\n  - 'relu' - tensor[tensor<0]=0, tensor/max(tensor)\n  - 'all' - (tensor-min)/(max-min)\n\nReturn:\n\nN x C x H x W x 3 size numpy ndarray\n\n```\nvisactivation.Prob2Color(tensor, input_type=None, image=None, image_weight=0.3, colormap=cv2.COLORMAP_JET, act_type='max')\n```\nColoring the probability map in CNN to visualize the corresponding activation intensity.\n\nParameters:\n\n- tensor (numpy.ndarray) - the input tensor for visualization, the value should in range [0,1]\n- input_type (str) - 'NCHW', 'NHW','CHW','HW'. When tensor.ndim == 3, input_type must be given.\n- image (numpy.ndarray, optional) - corresponding image with size NHW3 or HW3\n- image_weight (float, optional) - weight of image when visualization activation\n- colormap (int, str)\n  - int - cv2.COLORMAP_xxx can be used here\n  - str - 'voc' PASCAL VOC colormap, 'random' Random colormap\n- act_type (str) - 'sum', 'max', 'mean', 'none'.\n  - 'sum' - choose the sum value in channel dimension for each spatial pixel. The result larger than 1 is cut off to 1.\n  - 'max' - choose the max value in channel dimension for each spatial pixel\n  - 'mean' - choose the mean value in channel dimension for each spatial pixel\n  - 'none' - preseve the activation of C channels and visualize them independently.\n\nReturn:\n\nN x C x H x W x 3 size numpy ndarray\n\n```\nvisactivation.Label2Color(tensor, image=None, image_weight=0.3, colormap='random')\n```\nColoring the label map predicted by to visualize the corresponding activation intensity.\n\nParameters:\n\n- tensor (numpy.ndarray) - the input label for visualization, the value should in be positive integer in [0, 255].\n- image (numpy.ndarray, optional) - corresponding image with size NHW3 or HW3\n- image_weight (float, optional) - weight of image when visualization activation\n- colormap (str) - 'voc' PASCAL VOC colormap, 'random' Random colormap\n\nReturn:\n\nN x H x W x 3 size numpy ndarray\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/YudeWang/visactivation",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "visactivation",
    "package_url": "https://pypi.org/project/visactivation/",
    "platform": "",
    "project_url": "https://pypi.org/project/visactivation/",
    "project_urls": {
      "Homepage": "https://github.com/YudeWang/visactivation"
    },
    "release_url": "https://pypi.org/project/visactivation/0.0.1/",
    "requires_dist": [
      "numpy",
      "opencv-python"
    ],
    "requires_python": ">=3.6",
    "summary": "visualization tool for tensor in CNN",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8719365,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dec17d41bf00ae58dacefef08299f0411c0c78aa02924ae06912c56030a25fe9",
          "md5": "fe8b370de260fd2240692d971dcb20b0",
          "sha256": "d219a957db8ed5e86abd67b783483c6514a8dfe0955a94569db3b1fa6a9188a5"
        },
        "downloads": -1,
        "filename": "visactivation-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe8b370de260fd2240692d971dcb20b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4956,
        "upload_time": "2020-11-22T09:56:34",
        "upload_time_iso_8601": "2020-11-22T09:56:34.084753Z",
        "url": "https://files.pythonhosted.org/packages/de/c1/7d41bf00ae58dacefef08299f0411c0c78aa02924ae06912c56030a25fe9/visactivation-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaf9d88e288f4f80f40d65150ba6bfe241367f91a9bd134f04799fff1b2fcbd9",
          "md5": "5911ee67af0d8d84c37e0321dbef556a",
          "sha256": "34c96af4ba51a0225fdea8adb0dbd03fbd1dc9907023c47637c10a2958b4aebd"
        },
        "downloads": -1,
        "filename": "visactivation-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5911ee67af0d8d84c37e0321dbef556a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4644,
        "upload_time": "2020-11-22T09:56:35",
        "upload_time_iso_8601": "2020-11-22T09:56:35.458790Z",
        "url": "https://files.pythonhosted.org/packages/ea/f9/d88e288f4f80f40d65150ba6bfe241367f91a9bd134f04799fff1b2fcbd9/visactivation-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dec17d41bf00ae58dacefef08299f0411c0c78aa02924ae06912c56030a25fe9",
        "md5": "fe8b370de260fd2240692d971dcb20b0",
        "sha256": "d219a957db8ed5e86abd67b783483c6514a8dfe0955a94569db3b1fa6a9188a5"
      },
      "downloads": -1,
      "filename": "visactivation-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe8b370de260fd2240692d971dcb20b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4956,
      "upload_time": "2020-11-22T09:56:34",
      "upload_time_iso_8601": "2020-11-22T09:56:34.084753Z",
      "url": "https://files.pythonhosted.org/packages/de/c1/7d41bf00ae58dacefef08299f0411c0c78aa02924ae06912c56030a25fe9/visactivation-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eaf9d88e288f4f80f40d65150ba6bfe241367f91a9bd134f04799fff1b2fcbd9",
        "md5": "5911ee67af0d8d84c37e0321dbef556a",
        "sha256": "34c96af4ba51a0225fdea8adb0dbd03fbd1dc9907023c47637c10a2958b4aebd"
      },
      "downloads": -1,
      "filename": "visactivation-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5911ee67af0d8d84c37e0321dbef556a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4644,
      "upload_time": "2020-11-22T09:56:35",
      "upload_time_iso_8601": "2020-11-22T09:56:35.458790Z",
      "url": "https://files.pythonhosted.org/packages/ea/f9/d88e288f4f80f40d65150ba6bfe241367f91a9bd134f04799fff1b2fcbd9/visactivation-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}