{
  "info": {
    "author": "Equinor",
    "author_email": "fg_sib-scout@equinor.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Roff IO\n==========\n\nA (lazy) parser and writer for the Roxar Open File Format (ROFF) (binary and ascii).\n\n\nUsage\n-----\n\nROFF files contains values stored in tag keys that are grouped by tags. These\ncan be read by:\n\n```\nimport roffio\n\ncontents = roffio.read(\"my/file.roff\")\nvalue = contents[\"tagname\"][\"keyname\"]\n```\n\nSimilarly, files are written through a dictionary of tags and tagkeys:\n\n```\nimport roffio\n\ncontents = {\n \"tagname\": {\n    \"keyname\": 1.0\n  }\n}\n\nroffio.write(\"my/file.roff\", contents)\n```\n\nAdditionally, the contents of a file can be read lazily, avoiding unneccessary\ndisk operations and memory useage:\n\n\n```\nimport roffio\n\nresult = None\nwith roffio.lazyread(\"my/file.roff\") as contents:\n    for tagname, tagkeys in contents:\n        for keyname, value in tagkeys:\n            if tagname = \"mytag\" and keyname = \"mykey\":\n                result = value\n                break\n        if result is not None:\n           break\n\n```\n\n### Same name tags and tag-keys\n\nThe simple read/write functions works best for tags and tagkeys with unique\nnames, however, if the file has multiple tags with the same name, a list will\nbe returned:\n\n\n```\nimport roffio\n\ncontents = [\n (\"tagname\", (\"keyname\", 1.0)),\n (\"tagname\", (\"keyname\", 2.0)),\n]\n\nroffio.write(\"my/file.roff\", contents)\n\nvalues = roffio.read(\"my/file.roff\")\n```\n\nThen `values[\"tagname\"]` will be the list `[{\"keyname\": 1.0}, {\"keyname\": 2.0}]`.\n\n\n## building\n\n    pip install .\n\n## testing\n\n    pytest\n\nThe ROFF ascii format\n---------------------\n\nThe roff ascii format is a file format that consists of a list of tags.  Each\ntag contains tag keys.\n\nA simple valid example looks like this:\n\n```\nroff-asc\ntag tagname\nint keyname 1\nendtag\neof\n```\n\nA ascii roff file starts with the header token `\"roff-asc\"` and ends with the\n`\"eof\"` token. Between the header token and the eof token, is a list of tags,\neach delimited by the tokens `\"tag\"` and `\"endtag\"`, imidiately after the tag\ntoken is the name of the tag.\n\nComments can be added between `#` characters.\n\n\n### Tag keys\n\nEach tag contains a list of tag keys defining a key name and value. There\nare single value tag keys and array tag keys.\n\n#### Single value tag keys\n\nSingle value keys consists of three tokens:\n```\ntype name value\n```\n\nwhere type is one of\n\n* char\n* bool\n* byte\n* int\n* float\n* double\n\ne.g.\n\n```\nroff-asc\n#comment#\ntag exampletag\nint x 80\nfloat y 3.0\nbool flag 0\nbyte mask 4\nchar str_name \"a string\"\nendtag\neof\n```\n\n\n#### Array tag keys\n\nArray tag keys contain the following tokens: array, name, type, length and\nvalue, where type is a single value tag key type. The value is not\nzero-terminated but the size is given by the number of bytes in the type times\nthe length of the array, ie.  `array int arr_name 1 255` (an array of one int\nvalue, the length of the array being 1 and the one int value being `255`). Similary,\nchar arrays contain any number of strings:\n\n```\narray char char_array 3\n   \"hello\"\n   \"hello again\"\n   \"hello world\"\n```\n\n\nThe ROFF binary format\n----------------------\n\nThe binary format is very similar to the ascii format. The header is changed to\n`roff-bin` to indicate binary format. Each token is delimited by the zero character\ninstead of whitespace. int, float, byte, bool, and double are fixed-size byte-encoded\nvalues. String values are zero terminated instead of surrounded by quotes.\n\nComments can also be added to binary files but are terminated by zero character\nin addition to delimited by `'#'`.\n\nA simple valid example looks like this:\n\n```\nb\"roff-bin\\0tag\\0tagname\\0int\\0varname\\0\\x00\\x00\\x00\\x01endtag\\0eof\\0\"\n```\n\nchar tag keys no longer have quotes but are simply zero character delimited:\n\n`char\\0str_name\\0some_string\\0`.\n\nTag keys of type int, float, double, bool and byte are all fixed size tag keys,\nmeaning they consist of three consecutive tokens: type, name, and value. The\nname is any zero delimited string of bytes giving the name of the tag keys and\nvalue is a fixed length of bytes. For byte, bool and char it is 1 byte, for\nfloat and int it is 4 bytes and for double it is 8 bytes. i.e `int\\0x\\0\\x00\\x00\\x00\\x01`\n\nIf the type of an array is char then the size denotes the number of zero\nterminated strings in the array:\n`array char str_arr \\x00\\x00\\x00\\x02\\0hello world\\0hello again\\0`.\n\n\n### Endianess and filedata tag\n\nThere is no fixed endianess defined for the roff format. Instead, a filedata\ntag is added as the first tag in the file. In addition to metadata about\ncreation date and filetype, the `byteswaptest` record key is added which\nshould be set to `1` in whatever endianess the file is intended to be read in.\n\n```\ntag filedata\n int byteswaptest 1\n char filetype \"grid\"\n char creationDate \"01/03/1999 10:00:48\"\nendtag\n```\n\n### Version tag\n\nAnother tag keeps track of the file format version, currently 2.0:\n\n```\ntag version\n int major 2\n int minor 0\nendtag\n```\n\n### End of file tag\n\nIts a common convention to have the last tag in a roff file be\nan empty tag with name eof:\n\n```\ntag eof\nendtag\n```\n\n### Mapping of python types to roff types\n\nReading and writing maps roff types to python types, usually as expected.\nFor more control use numpy dtypes, ie. numpy.array(dtype=\"float32\") will\nbe written as a tag key as with roff type \"array float\". Reading always\nresults in numpy arrays and dtypes for performance reasons, that is,\nexcept for bytes.\n\n#### Special case of bytes:\n\nwriting of python `bytes` results in roff keys with types of either `array bytes`\nor `byte` depending on length. If the length is `1` then you get a non-array\ntag key:\n\n```python\nroffio.write(\"my/file.roff\", { \"t\": { \"key\": b'\\x00' }})\n```\n\nresults in a roff file containing\n\n```\ntag t\nbytes key 0\nendtag\n```\n\nwhile\n\n```python\nroffio.write(\"my/file.roff\", { \"t\": { \"key\": b'\\x00\\x01' }})\n```\n\nresults in a roff file containing\n\n```\ntag t\narray bytes key 2 0 1\nendtag\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/equinor/roffio",
    "keywords": "",
    "license": "LGPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "RoffIO",
    "package_url": "https://pypi.org/project/RoffIO/",
    "platform": "any",
    "project_url": "https://pypi.org/project/RoffIO/",
    "project_urls": {
      "Homepage": "https://github.com/equinor/roffio"
    },
    "release_url": "https://pypi.org/project/RoffIO/0.0.2/",
    "requires_dist": [
      "numpy",
      "dataclasses (>=0.6) ; python_version < \"3.7\""
    ],
    "requires_python": "",
    "summary": "A (lazy) parser and writer for the Roxar Open File Format (ROFF).",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11099240,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b07aa910acb0fb864429797d82d483862f3f66c2178058627e9953e3a1894a0d",
          "md5": "4d3bd1420aef80e8e38aeef24475c00b",
          "sha256": "03589875a8289f606df5e0d077ff5576851cd1485233751737305ef37dccb814"
        },
        "downloads": -1,
        "filename": "RoffIO-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d3bd1420aef80e8e38aeef24475c00b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27097,
        "upload_time": "2021-05-12T05:20:00",
        "upload_time_iso_8601": "2021-05-12T05:20:00.558124Z",
        "url": "https://files.pythonhosted.org/packages/b0/7a/a910acb0fb864429797d82d483862f3f66c2178058627e9953e3a1894a0d/RoffIO-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "074c71929e77baeb44c6121989d2b37e2df2c46ca77d8ceeb5bab809a73ac9ed",
          "md5": "60832f21369e7249b0f5ad42af8eb966",
          "sha256": "34a691c8dc6573aab403e2577b949c00bd9bf2efe89311ce0b2d99b0ecbb7de3"
        },
        "downloads": -1,
        "filename": "RoffIO-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60832f21369e7249b0f5ad42af8eb966",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24997,
        "upload_time": "2021-08-05T11:33:17",
        "upload_time_iso_8601": "2021-08-05T11:33:17.715357Z",
        "url": "https://files.pythonhosted.org/packages/07/4c/71929e77baeb44c6121989d2b37e2df2c46ca77d8ceeb5bab809a73ac9ed/RoffIO-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ea664f66fb494e0abb468d6d7d6be8833d41601221aef8fdcb1dae063b6a97c",
          "md5": "e478e7cc2dab5e6cb159766ba505f17a",
          "sha256": "134566da0f06542471094731fdb800a7e5bb339b7b19a600befd4fd70c3cc6e0"
        },
        "downloads": -1,
        "filename": "RoffIO-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e478e7cc2dab5e6cb159766ba505f17a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26987,
        "upload_time": "2021-08-05T11:33:18",
        "upload_time_iso_8601": "2021-08-05T11:33:18.743746Z",
        "url": "https://files.pythonhosted.org/packages/8e/a6/64f66fb494e0abb468d6d7d6be8833d41601221aef8fdcb1dae063b6a97c/RoffIO-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "074c71929e77baeb44c6121989d2b37e2df2c46ca77d8ceeb5bab809a73ac9ed",
        "md5": "60832f21369e7249b0f5ad42af8eb966",
        "sha256": "34a691c8dc6573aab403e2577b949c00bd9bf2efe89311ce0b2d99b0ecbb7de3"
      },
      "downloads": -1,
      "filename": "RoffIO-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "60832f21369e7249b0f5ad42af8eb966",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24997,
      "upload_time": "2021-08-05T11:33:17",
      "upload_time_iso_8601": "2021-08-05T11:33:17.715357Z",
      "url": "https://files.pythonhosted.org/packages/07/4c/71929e77baeb44c6121989d2b37e2df2c46ca77d8ceeb5bab809a73ac9ed/RoffIO-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ea664f66fb494e0abb468d6d7d6be8833d41601221aef8fdcb1dae063b6a97c",
        "md5": "e478e7cc2dab5e6cb159766ba505f17a",
        "sha256": "134566da0f06542471094731fdb800a7e5bb339b7b19a600befd4fd70c3cc6e0"
      },
      "downloads": -1,
      "filename": "RoffIO-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e478e7cc2dab5e6cb159766ba505f17a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26987,
      "upload_time": "2021-08-05T11:33:18",
      "upload_time_iso_8601": "2021-08-05T11:33:18.743746Z",
      "url": "https://files.pythonhosted.org/packages/8e/a6/64f66fb494e0abb468d6d7d6be8833d41601221aef8fdcb1dae063b6a97c/RoffIO-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}