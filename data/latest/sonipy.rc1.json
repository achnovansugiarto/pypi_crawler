{
  "info": {
    "author": "Locke Patton",
    "author_email": "locke.patton@cfa.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# `sonipy` : A Scatterplot Sonification Package\n\n[![MIT License](https://img.shields.io/apm/l/atomic-design-ui.svg?)](https://github.com/lockepatton/sonipy/blob/master/LICENSE.txt)\n\nA package to turn scatter plots into perceptually uniform sound files for use in science and to make science more accessible.\n\nThis project was developed by [Locke Patton](https://twitter.com/Astro_Locke) and [Prof. Emily Levesque](https://twitter.com/emsque). Click [here](https://twitter.com/Astro_Locke/status/1083510515857408000) for a twitter thread explaining the motivation behind this project.\n\n## What does `sonipy` do?\n\nHere is an [example sonification](https://twitter.com/Astro_Locke/status/1083510562187751424).\n\nOur method of sonification takes in scatterplot data and produces audio clips that depict each datapoint as a short sound blip with a y value corresponding to pitch and an x value corresponding to arrival time.\n\n![sonipy setup](./paper/images/Method2.png)\n\n**Each data point has a corresponding short tone called a `blip`,** with a y value corresponding to its pitch and a x value corresponding to its arrival time. Higher y value data points have higher corresponding blip pitches.\n\n## Installation\n\n`sonipy` will be pip-installable from command line, as follows:\n\n``` bash\npip install sonipy\n```\n\nFor now, you can clone the repository and install it yourself:\n\n``` bash\ngit clone https://github.com/lockepatton/sonipy.git\ncd sonipy\npython setup.py install\n```\n\n\n## Example Easy Setup\n\nFor two arrays of the same length, called x and y, you can sonify them using the following:\n\n``` Python\nfrom sonipy.sonify import SonifyTool\n\nTone = SonifyTool(x, y)\nTone.play()\nTone.save()\n```\n\n## Extended Setup\n\nIf you would like more fine control of the sonification inputs, you can adjust the underlying arguments as follows. For details about the parameters involved, see the  Parameter Inputs section below.\n\n``` Python\nfrom sonipy.sonify import SonifyTool\n\nC4 = 261.6 # Hz\nfrequency_args = {\n  'frequency_min' : C4,\n  'frequency_max' : C4*4\n  # 'cents_per_value' : -680,\n  # 'value_min' : 0,\n  # 'value_max' : 1,\n}\n\nduration_args = {\n  'time_total' : 2000, # ms\n  # 'time_min' : 100, # ms\n  # 'time_max' : 800, # ms\n}\n\nduration_scale = 1. / 2000. # x value / time (ms)\n\nTone = SonifyTool(x, y,\n                  frequency_args = frequency_args,\n                  duration_args = duration_args,\n                  # duration_scale = duration_scale,\n                  bliplength=0.5)\n\nTone.play()\nTone.SaveTone()\n```\n\n## Parameter Inputs\n\n### Frequency Scale Parameters:\n\nAll frequency parameters are entered inside the frequency_args parameter. The following inputs are all accepted.\n\n1. a minimum frequency <img src=\"https://render.githubusercontent.com/render/math?math=f_{min}\"> and it's corresponding minimum y value <img src=\"https://render.githubusercontent.com/render/math?math=y_{min}\">\n2. a maximum frequency <img src=\"https://render.githubusercontent.com/render/math?math=f_{max}\"> and it's corresponding maximum y value <img src=\"https://render.githubusercontent.com/render/math?math=y_{max}\">\n3. a change in pitch (measured in [cents](https://en.wikipedia.org/wiki/Cent_(music))) over change in y value parameter <img src=\"https://render.githubusercontent.com/render/math?math=\\frac{dc}{dy}\">\n\n\n### Time Scale Parameters:\n\nBy default, the sound files are 2 seconds. Time parameters are entered by simply by defining a duration_scale (in seconds per x value). Or alternately by passing a duration_args dictionary with some total time, smallest delta time between points or max delta time between points.\n\n1. a total time of the soundfile <img src=\"https://render.githubusercontent.com/render/math?math=t_{total}\">\n2. a change in time (measured in seconds) over change in x value parameter <img src=\"https://render.githubusercontent.com/render/math?math=\\frac{dt}{dx}\">\n\n## Demos\nSeveral Jupyter notebook demos that demonstrate some use cases and examples of sonipy are found\n[here](https://github.com/lockepatton/sonipy/tree/master/demos).\n\n## TransientZoo Motivation\n\nThis  code  was  developed  as  part  of  TransientZoo,  a  citizen  science  program  that  will  allow  participants,  including  blind and visually impaired individuals, to classify supernova lightcurves using sound. In astronomy, lightcurves depict variations in brightness of a specific astrophysical object as a function of time. For more, see [this summary](https://twitter.com/Astro_Locke/status/1083510515857408000) twitter thread and poster from the 235th American Astronomical Meeting.\n\n## Special Thanks\n\nThank you to Prof. Allen Downey for permission to host his thinkDSP code in this repository for easier distribution. This work wouldn't be possible without it. For more details about his book *Think DSP: Digital Signal Processing in Python*, see his textbook repository at https://github.com/AllenDowney/ThinkDSP.\n\n## Attribution\n\nIf you find the package useful in your research, please cite our JOSS paper.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lockepatton/sonipy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sonipy",
    "package_url": "https://pypi.org/project/sonipy/",
    "platform": "",
    "project_url": "https://pypi.org/project/sonipy/",
    "project_urls": {
      "Homepage": "https://github.com/lockepatton/sonipy"
    },
    "release_url": "https://pypi.org/project/sonipy/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Sonification of 2D plots",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7627390,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d1f8894aeb71fab4b1e6f8bf7d5d826bc6a28a142e17cee97943da7c256bb68",
          "md5": "a3c99a5c7dd32f1274600872b566aeb0",
          "sha256": "45f89274ffdce18b2363a2c18a64e87c90bc30e7dd47a1f56060c79e0ed01103"
        },
        "downloads": -1,
        "filename": "sonipy-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a3c99a5c7dd32f1274600872b566aeb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25660,
        "upload_time": "2020-07-04T03:44:43",
        "upload_time_iso_8601": "2020-07-04T03:44:43.135547Z",
        "url": "https://files.pythonhosted.org/packages/6d/1f/8894aeb71fab4b1e6f8bf7d5d826bc6a28a142e17cee97943da7c256bb68/sonipy-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d1f8894aeb71fab4b1e6f8bf7d5d826bc6a28a142e17cee97943da7c256bb68",
        "md5": "a3c99a5c7dd32f1274600872b566aeb0",
        "sha256": "45f89274ffdce18b2363a2c18a64e87c90bc30e7dd47a1f56060c79e0ed01103"
      },
      "downloads": -1,
      "filename": "sonipy-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a3c99a5c7dd32f1274600872b566aeb0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25660,
      "upload_time": "2020-07-04T03:44:43",
      "upload_time_iso_8601": "2020-07-04T03:44:43.135547Z",
      "url": "https://files.pythonhosted.org/packages/6d/1f/8894aeb71fab4b1e6f8bf7d5d826bc6a28a142e17cee97943da7c256bb68/sonipy-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}