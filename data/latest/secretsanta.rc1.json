{
  "info": {
    "author": "Mirai Solutions",
    "author_email": "opensource@mirai-solutions.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Games/Entertainment"
    ],
    "description": "# secretsanta\nThis repository implements a basic Python version of a [Secret Santa](https://en.wikipedia.org/wiki/Secret_Santa)\nutility. It is meant to serve as a tutorial for beginners interested in Python package development.\nEach section below mentions typical tools and utilities in a natural order of developing Python packages.\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/secretsanta.svg)](https://pypi.python.org/pypi/secretsanta)\n[![PyPI](https://img.shields.io/pypi/v/secretsanta.svg)](https://pypi.python.org/pypi/secretsanta)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/secretsanta.svg)](https://pypistats.org/packages/secretsanta)\n[![PyPI - License](https://img.shields.io/pypi/l/secretsanta.svg)](https://pypi.python.org/pypi/secretsanta)\n\n[![Build Status](https://travis-ci.org/miraisolutions/secretsanta.svg?branch=master)](https://travis-ci.org/miraisolutions/secretsanta)\n[![codecov](https://codecov.io/gh/miraisolutions/secretsanta/branch/master/graph/badge.svg)](https://codecov.io/gh/miraisolutions/secretsanta)\n\n### Table of Contents\n\n1. [Development](#development)  \n    a. [Virtual environments](#virtual-environments)  \n    b. [Project requirements](#project-requirements)  \n2. [Testing](#testing)  \n    a. [PyCharm file types](#pycharm-file-types)  \n    b. [Type hints](#type-hints)  \n    c. [Property testing](#property-testing)\n    d. [Mocks in unit tests](#mocks-in-unit-tests)\n3. [Documentation](#documentation)  \n4. [Usage / Jupyter notebook](#usage)  \n5. [Continuous Integration](#continuous-integration)\n6. [Miscellaneous](#miscellaneous)  \n\n### Development\n\nWe assume **PyCharm** on **Ubuntu >= 16.04** as the development environment.\n\nIn PyCharm, check out this repository into a new project, e.g. under\n```\nVCS > Checkout from Version Control\n```\n\nShell commands below should be entered in the **Terminal** pane of PyCharm.\n\n*There is no shortcut in PyCharm to send code from the editor to the terminal, so you need to copy-paste commands instead.*\n\n[//]: # \"(I tried both *Quick Lists* and *Macros* but neither seems exactly fit for this purpose.)\"\n[//]: # \"This is a comment. See https://stackoverflow.com/questions/4823468/comments-in-markdown\"\n\n#### Virtual environments\nWe'll use a virtual environment to keep things neat and tidy.  \nA couple of useful references about virtual environments if you've never used them before:\n* [Virtual environments](https://docs.python-guide.org/dev/virtualenvs/)\n* [Creating virtual environments](https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments)\n\nInstall support for virtual environments with Python 3.x if you don't have it yet:\n```bash\nsudo apt-get install python3-venv\n```\n\nConfigure the PyCharm project with a Python 3 virtual environment under\n```\nFile > Settings > Project > Project interpreter\n```\nClick on the top-right *gear* icon and select `Add...`, then create a new `Virtualenv Environment`, using `<PROJECT_PATH>/venv` \nas location and Python 3.x as interpreter. Also un-tick all checkboxes.\n\n*We do not use `pipenv` here. You may however use it to create a new environment \n[in the same way](https://www.jetbrains.com/help/pycharm/pipenv.html#pipenv-existing-project).*\n\nWith these settings, anything you execute within the PyCharm project, either at the Terminal or in the Python Console, \nwill run in the virtual environment. Close and re-open PyCharm to make sure the settings are picked up.\n\nNote that you can still temporarily leave the virtual environment from an active Terminal using\n```bash\ndeactivate\n```\nand re-activate it using\n```bash\nsource ./venv/bin/activate\n```\nYou can also switch to a different project interpreter in PyCharm (Ctrl + Shift + A, search for `Switch Project Interpreter`).\nOpen terminals and Python consoles then need to be restarted for the environment to match the project interpreter.\n\n#### Project requirements\n\nThe project includes files `requirements.in` and `requirements-package.in`, defining module / package dependencies. \nSuch files are compiled into an actual `requirements.txt` file,\nwhich is not committed to Git and should be re-created for the local checkout.\n\n**Important:** make sure all commands are executed inside the virtual environment, e.g. at such a prompt:\n```\n#> (venv) localuser@Ubuntu:~/PyCharm/secretsanta$\n```\n\nCheck version of Python, upgrade [pip](https://pypi.org/project/pip/) and check its version:\n```bash\npython --version\n#> Python 3.6.7\n\npip install --upgrade pip\n#> ...\n\npip --version\n#> pip 19.1.1 from /home/localuser/PyCharm/secretsanta/venv/lib/python3.5/site-packages/pip (python 3.6)\n```\n\nInstall [pip-tools](<https://github.com/jazzband/pip-tools>):\n```bash\npip install pip-tools\n```\n\nList installed modules:\n```{bash, eval=FALSE}\npip list\n#> Package       Version\n#> ------------- -------\n#> Click         7.0    \n#> pip           18.1   \n#> pip-tools     3.1.0  \n#> pkg-resources 0.0.0  \n#> setuptools    20.7.0 \n#> six           1.11.0 \n```\n\nRe-generate `requirements.txt` from `requirements.in`:\n```{bash, eval=FALSE}\npip-compile\n```\nInstall dependencies defined in `requirements.txt`:\n```{bash, eval=FALSE}\npip-sync\n```\n*Alternatively, you can right-click on the `secretsanta` project folder in the `Project` explorer and click\n**Synchronize 'secretsanta'** to refresh and see the generated file `requirements.txt`.*\n\nNow you're ready to go. Would there be any update to the `requirements.in` files,\nmake sure you re-execute `pip-compile` and `pip-sync`.\n\n*If you change the virtual environment you work with, you should instead run `pip-compile -U` (then\nrerun `pip-sync`) to make sure that compatible versions of your dependencies are used in the new environment.*\n\n### Testing\nThere are multiple ways to define and execute tests. Two of the most common ones are `doctest` and `unittest`.\n\nThe `doctest` module allows to run code examples / tests that are defined as part of `docstrings`.\n\nUse the following command to see this in action. The `-v` flag allows us to see verbose output.\nIn case everything is fine, we would not see any output otherwise.\n```{bash, eval=FALSE}\npython -m doctest secretsanta/main/core.py -v\n```\n\nIt is possible to run code style checks with [flake8](http://flake8.pycqa.org/en/latest/):\n```{bash, eval=FALSE}\nflake8\n```\nIf all is fine, you will not see any output.\n\nUnit tests are kept under `tests` and make use of the `unittest` framework.\n\nRun tests using [tox](<https://tox.readthedocs.io/en/latest/>):\n```{bash, eval=FALSE}\ntox\n```\nThe `tox.ini` file contains the following configurations:\n* `flake8` (checks code style and reports potential issues)\n* `pytest` (which is used as a test runner)\n* `pytest-cov` (measures and reports test coverage, see also `.coveragerc` file)\n* `tox` (where the Python versions to test with are defined)\n\nIf you run `tox` outside of the virtual environment, it can run tests for multiple Python versions - this is configured\nusing `envlist`.The tests will only be run for any Python version that is available in the environment where you run them\n(see `skip_missing_interpreters` configuration key).\n\n#### PyCharm file types\nIn PyCharm, you can associate files to a certain type under:\n```\nFile > Settings > Editor > File Types\n```\nE.g. use this to get `.coveragerc` marked up as `INI` (you can do this after installing the .ini support PyCharm plugin).\nAlternatively, you can register the `*.ini` and `.coveragerc` patterns to the *existing* **Buildout Config**\n[file type](https://intellij-support.jetbrains.com/hc/en-us/community/posts/206585245/comments/205965729).\n\n#### Type hints\nType hints define what type function arguments and return values should be. They are both a source of documentation\nand testing framework to identify bugs more easily, see also [PEP 484](https://www.python.org/dev/peps/pep-0484/).\n\nIn order to use them, install [mypy](http://www.mypy-lang.org/) (outside of a virtual environment):\n```{bash, eval=FALSE}\nsudo apt install mypy\n```\nThen run e.g.:\n```{bash, eval=FALSE}\nmypy ./secretsanta/main/core.py\n```\nto test if the type hints of `.py` file(s) are correct (in which case there may be no output).\n\n#### Property testing\n\nWe use [Hypothesis](https://hypothesis.readthedocs.io/en/latest/) to define a _property test_ for our matching function: \ngenerated example inputs are tested against desired properties. Hypothesis' generator can be configured to produce typical \ndata structures, filled with various instances of primitive types. This is done by composing specific annotations.\n* The decorator `@given(...)` must be present before the test function that shall use generated input.\n* Generated arguments are defined in a comma-separated list, and will be passed to the test function in order:\n```python\nfrom hypothesis import given\nfrom hypothesis.strategies import text, integers\n\n\n@given(text(), integers())\ndef test_some_thing(a_string, an_int):\n    return\n\n```  \n* Generation can be controlled by various optional parameters, e.g. `text(min_size=2)` for testing with strings that\nhave at least 2 characters.\n\n#### Mocks in unit tests\n\nMock objects are used to avoid external side effects. We use the standard Python package `unittest.mock`. This provides\na `@patch` decorator, which allows us to specify classes to be mocked within the scope of a given test case. See \n*test_funs.py* and *test_core.py* for examples.\n\n### Documentation\nDocumentation is done using [Sphinx](http://www.sphinx-doc.org/en/master/usage/quickstart.html).\n\nPrerequisite: Installation. Open a terminal (outside of a virtual environment) and run below command:\n```{bash, eval=FALSE}\nsudo apt-get install python3-sphinx\n```\nCheck installation (and version):\n```{bash, eval=FALSE}\nsphinx-build --version\n```\n\n##### Initializing documentation - already done - for reference:\n```{bash, eval=FALSE}\nsphinx-quickstart\n```\nThis will lead through an interactive generation process.\n\nSuggested values / options are listed here.\nHitting enter without typing anything will take the suggested default shown inside square brackets [ ].\n* Root path for the documentation: docs\n* Separate source and build directories: y\n* Source file suffix: .rst\n* Sphinx extensions: autodoc, doctest, intersphinx, coverage, mathjax, viewcode\n* Create Makefile: y\n\nIn order to use `autodoc`, one needs to uncomment the corresponding line in `docs/source/conf.py`:\n\n```sys.path.insert(0, os.path.abspath(...```\n\nAnd set the appropriate path to the directory containing the modules to be documented.\n\n*For Sphinx/autodoc to work, the docstrings must be written in correct \n[reStructuredText](http://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html),\nsee [documentation](https://pythonhosted.org/an_example_pypi_project/sphinx.html#auto-directives) for details.*\n\n##### Building docs\nYou should be inside the documentation root directory.  \nUsing the Makefile:\n\n```bash\ncd docs\nmake html\n```\nYou can view the documentation by right-click opening `index.html` (`docs/build/html`) in your browser of choice.\nPreviewing the .rst files does not work properly in PyCharm, apparently because \n[it only supports a subset of Sphinx](https://stackoverflow.com/questions/53130720/sphinx-unknown-directive-type-toctree-error-in-pycharm-but-index-html-works).\n\nAlternative build without Makefile:\n```bash\nsphinx-build -b html <sourcedir> <builddir>\n```\nPDF output:\n```bash\nmake latexpdf\n```\n\n### Usage\nThe [Jupyter](https://jupyter.org/) notebook `SecretSanta.ipynb` illustrates the usage of the `secretsanta` package.\n\nIt can be run in your browser (or directly in PyCharm if you have the professional edition):\n```bash\njupyter notebook SecretSanta.ipynb\n```\n\nBelow gives you some useful information about the location of `Jupyter` related directories, e.g. configuration:\n```bash\njupyter --path\n```\n\n<!-- e.g.: `etc/jupyter/custom/custom.js` -->\n\nA few additional links to some typical early `Jupyter` topics:\n* [Closing running Jupyter notebook servers](https://github.com/jupyter/notebook/issues/2844)\n* [Checkpoints and autosave](https://groups.google.com/forum/#!topic/jupyter/DGCKE5fS4kQ)\n\n### Continuous Integration\n\nContinuous Integration (CI) aims to keep state updated to always match the code currently checked in a repository.\nThis typically includes a build, automated test runs, and possibly making sure that the newly built artifacts are\ndeployed to a target environment. This helps developers and users by providing timely feedback and showing what the\nresults of certain checks were on a given version of the code.\n\nThis repository uses [Travis CI](https://travis-ci.org) to run tests automatically when new commits are pushed. Results\ncan be viewed [here](https://travis-ci.org/miraisolutions/secretsanta). Along with test results,\ncoverage information is generated and uploaded to [codecov](codecov.io), which generates a\n[report](https://codecov.io/gh/miraisolutions/secretsanta) out of it.\n\n#### Configuration\n\nTravis CI is configured using the `.travis.yml` file. This allows specifying the environment(s) to run\ntests in; tests will be run for each specified environment. The steps required before running tests are specified under\n`install`. Finally, the task to run is defined in `script`, and we make sure coverage reports are uploaded (see\n`after_success`). A notification about completed builds is sent to our Slack channel using a\n[secure notification hook](https://docs.travis-ci.com/user/notifications/#configuring-slack-notifications).\n\nCodecov is configured in `codecov.yml`, defining the coverage value range (in percent) to match to a color scale, as\nwell as the coverage checks to be performed and their success criteria. See codecov's\n[general configuration](https://docs.codecov.io/docs/codecov-yaml) and\n[commit status evaluation](https://docs.codecov.io/docs/commit-status) documentation for more information.\n\n_Notifications from codecov can only be delivered via unencrypted webhook URLs. In order to avoid exposing such hooks in\na public repository, we do not use this functionality here._\n\n### Miscellaneous\n\n* `MANIFEST.in` specifies extra files that shall be included in a source distribution.\n* Badges: This README features various badges (at the beginning), including a build status badge and a code coverage\nstatus badge.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/miraisolutions/secretsanta",
    "keywords": "secret santa",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "secretsanta",
    "package_url": "https://pypi.org/project/secretsanta/",
    "platform": "",
    "project_url": "https://pypi.org/project/secretsanta/",
    "project_urls": {
      "Homepage": "https://github.com/miraisolutions/secretsanta"
    },
    "release_url": "https://pypi.org/project/secretsanta/0.1.0/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "Secret Santa randomizer",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6624124,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c67cb0329e065c1d163955a6a423f9377ab598fb082c3cef51b398f57527ba7b",
          "md5": "4228201f08804453b6b180c448275aa1",
          "sha256": "fdee69f0e514149a7b6ae5a60d5e5b1ee44f7014102851c1f21b0bb5be76f378"
        },
        "downloads": -1,
        "filename": "secretsanta-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4228201f08804453b6b180c448275aa1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12705,
        "upload_time": "2020-02-13T15:16:48",
        "upload_time_iso_8601": "2020-02-13T15:16:48.266956Z",
        "url": "https://files.pythonhosted.org/packages/c6/7c/b0329e065c1d163955a6a423f9377ab598fb082c3cef51b398f57527ba7b/secretsanta-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4d8da0c70351fcf2017eb22bc8fa51f8a6f0960cb5aeb6c9b36dc5a429672c8",
          "md5": "4734be980f26174634a06fdc825f0eca",
          "sha256": "72fd79f561e3d5e776b7bc682a82e3ca162efc52d6ef0ed4c3b1936f7d126dc4"
        },
        "downloads": -1,
        "filename": "secretsanta-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4734be980f26174634a06fdc825f0eca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16659,
        "upload_time": "2020-02-13T15:16:50",
        "upload_time_iso_8601": "2020-02-13T15:16:50.687921Z",
        "url": "https://files.pythonhosted.org/packages/b4/d8/da0c70351fcf2017eb22bc8fa51f8a6f0960cb5aeb6c9b36dc5a429672c8/secretsanta-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c67cb0329e065c1d163955a6a423f9377ab598fb082c3cef51b398f57527ba7b",
        "md5": "4228201f08804453b6b180c448275aa1",
        "sha256": "fdee69f0e514149a7b6ae5a60d5e5b1ee44f7014102851c1f21b0bb5be76f378"
      },
      "downloads": -1,
      "filename": "secretsanta-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4228201f08804453b6b180c448275aa1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12705,
      "upload_time": "2020-02-13T15:16:48",
      "upload_time_iso_8601": "2020-02-13T15:16:48.266956Z",
      "url": "https://files.pythonhosted.org/packages/c6/7c/b0329e065c1d163955a6a423f9377ab598fb082c3cef51b398f57527ba7b/secretsanta-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4d8da0c70351fcf2017eb22bc8fa51f8a6f0960cb5aeb6c9b36dc5a429672c8",
        "md5": "4734be980f26174634a06fdc825f0eca",
        "sha256": "72fd79f561e3d5e776b7bc682a82e3ca162efc52d6ef0ed4c3b1936f7d126dc4"
      },
      "downloads": -1,
      "filename": "secretsanta-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4734be980f26174634a06fdc825f0eca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16659,
      "upload_time": "2020-02-13T15:16:50",
      "upload_time_iso_8601": "2020-02-13T15:16:50.687921Z",
      "url": "https://files.pythonhosted.org/packages/b4/d8/da0c70351fcf2017eb22bc8fa51f8a6f0960cb5aeb6c9b36dc5a429672c8/secretsanta-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}