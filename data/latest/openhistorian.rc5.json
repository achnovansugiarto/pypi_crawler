{
  "info": {
    "author": "J. Ritchie Carroll",
    "author_email": "rcarroll@gridprotectionalliance.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "<!--- Do not make this image location relative, README.md in root is a symbolic reference to one in docs. See CreateReadMeSymLink.cmd for more information. --->\n![Logo](https://raw.githubusercontent.com/GridProtectionAlliance/openhistorian-python/main/docs/img/PythonAPI_75.png)\n\n![CodeQL](https://github.com/GridProtectionAlliance/openhistorian-python/workflows/CodeQL/badge.svg)\n\nThe openHistorian Python API is used for high-speed reading and writing of time-series data with the openHistorian.\n\nThe openHistorian is an open source system designed to efficiently integrate and archive process control data, e.g., SCADA, synchrophasor, digital fault recorder or any other time-series data used to support process operations. The openHistorian is optimized to store and retrieve large volumes of time-series data quickly and efficiently, including high-resolution sub-second information that is measured very rapidly, e.g., many thousands of times per second. See [2-page pdf flyer](https://gridprotectionalliance.org/docs/products/openhistorian/OpenHistorian2018.pdf).\n\n# Overview\nThe openHistorian 2 is built using the [SNAPdb Engine](http://www.gridprotectionalliance.org/technology.asp#SnapDB) - a key/value pair archiving technology. SNAPdb was developed to significantly improve the ability to handle extremely large volumes of real-time streaming data and directly serve the data to consuming applications and systems. See the Python API implementation of [SNAPdb](https://github.com/GridProtectionAlliance/openhistorian-python/tree/main/src/snapDB).\n\nThrough use of the [SNAPdb Engine](http://www.gridprotectionalliance.org/technology.asp#SnapDB), the openHistorian inherits very fast performance with very low lag-time for data insertion. The openHistorian 2 is a time-series implementation of the SNABdb engine where the \"[key](https://github.com/GridProtectionAlliance/openhistorian-python/tree/main/src/openHistorian/historianKey.py)\" is a tuple of time and measurement ID, and the \"[value](https://github.com/GridProtectionAlliance/openhistorian-python/tree/main/src/openHistorian/historianValue.py)\" is the stored data - which can be most any data type and associated flags. See the Python API implementation of the [openHistorian instance of SNAPdb](https://github.com/GridProtectionAlliance/openhistorian-python/tree/main/src/openHistorian)\n\nThe Python API for openHistorian is designed as a socket-based, high-speed API that interacts directly with the openHistorian in-memory cache for very high speed extraction of near real-time data. The archive files produced by the openHistorian are [ACID Compliant](https://en.wikipedia.org/wiki/ACID) which create a very durable and consistent file structure that is resistant to data corruption. Internally the data structure is based on a [B+ Tree](https://en.wikipedia.org/wiki/B%2B_tree) that allows out-of-order data insertion.\n\n## Example Usage\nFull source for the following two usage examples can be found here:\n* Reading Data ([readTest.py](https://github.com/GridProtectionAlliance/openhistorian-python/blob/main/tests/readTest.py))\n* Writing Data ([writeTest.py](https://github.com/GridProtectionAlliance/openhistorian-python/blob/main/tests/writeTest.py))\n\n### Reading Data\nThe following example shows how to establish a connection to the openHistorian, open a client database instance, refresh available metadata, filter metadata to desired set of signal types, establish a start and stop time for the read, then read each time-series values as a historian [key](https://github.com/GridProtectionAlliance/openhistorian-python/tree/main/src/openHistorian/historianKey.py) / [value](https://github.com/GridProtectionAlliance/openhistorian-python/tree/main/src/openHistorian/historianValue.py) pair.\n\n```python\nfrom openHistorian.historianConnection import historianConnection\nfrom openHistorian.historianInstance import historianInstance\nfrom openHistorian.historianKey import historianKey\nfrom openHistorian.historianValue import historianValue\nfrom openHistorian.metadataCache import metadataCache\nfrom openHistorian.measurementRecord import SignalType\nfrom snapDB.timestampSeekFilter import timestampSeekFilter\nfrom snapDB.pointIDMatchFilter import pointIDMatchFilter\nfrom typing import Optional, List\nfrom datetime import datetime, timedelta\nfrom time import time\nimport numpy as np\n\ndef readTest():\n    # Create historian connection (the root API object)\n    historian = historianConnection(\"localhost\")\n    instance: Optional[historianInstance] = None\n\n    try:\n        print(\"Connecting to openHistorian...\")\n        historian.Connect()\n\n        if not historian.IsConnected or len(historian.InstanceNames) == 0:\n            print(\"No openHistorian instances detected!\")\n        else:\n            # Get first historian instance\n            initialInstance = historian.InstanceNames[0]\n\n            print(f\"Opening \\\"{initialInstance}\\\" database instance...\")\n            instance = historian.OpenInstance(initialInstance)\n\n            # Get a reference to the openHistorian metadata cache\n            historian.RefreshMetadata()\n            metadata = historian.Metadata\n\n            # Lookup measurements that represent frequency values\n            records = metadata.GetMeasurementsBySignalType(SignalType.FREQ, instance.Name)\n            recordCount = len(records)\n\n            print(f\"Queried {recordCount:,} metadata records associated with \\\"{instance.Name}\\\" database instance.\")\n\n            if recordCount > 0:\n                pointIDList = metadataCache.ToPointIDList(records)\n\n                # Execute a test read for data archived ten seconds ago\n                endTime = datetime.utcnow() - timedelta(seconds = 10)\n                startTime = endTime - timedelta(milliseconds = 33)\n\n                print(f\"Starting read for {len(pointIDList):,} points from {startTime} to {endTime}...\\r\\n\")\n\n                TestRead(instance, historian.Metadata, startTime, endTime, pointIDList)\n    except Exception as ex:\n        print(f\"Failed to connect: {ex}\")\n    finally:\n        if instance is not None:\n            instance.Dispose()\n\n        if historian.IsConnected:\n            print(\"Disconnecting from openHistorian\")\n\n        historian.Disconnect()\n\ndef TestRead(instance: historianInstance, metadata: metadataCache, startTime: datetime, endTime: datetime, pointIDList: List[np.uint64]):\n    timeFilter = timestampSeekFilter.CreateFromRange(startTime, endTime)\n    pointFilter = pointIDMatchFilter.CreateFromList(pointIDList)\n\n    opStart = time()\n    reader = instance.Read(timeFilter, pointFilter)\n    count = 0\n\n    key = historianKey()\n    value = historianValue()\n\n    while reader.Read(key, value):\n        count += 1\n        print(f\"    Point {key.ToString(metadata)} = {value.ToString()}\")\n\n    print(f\"\\r\\nRead complete for {count:,} points in {(time() - opStart):.2f} seconds.\\r\\n\")\n\nif __name__ == \"__main__\":\n    readTest()\n```\n\n### Writing data\nThe following example shows how to establish a connection to the openHistorian, open a client database instance, build a new time-series value historian [key](https://github.com/GridProtectionAlliance/openhistorian-python/tree/main/src/openHistorian/historianKey.py) / [value](https://github.com/GridProtectionAlliance/openhistorian-python/tree/main/src/openHistorian/historianValue.py) pair, then write the data to the openHistorian.\n```python\nfrom openHistorian.historianConnection import historianConnection\nfrom openHistorian.historianInstance import historianInstance\nfrom openHistorian.historianKey import historianKey\nfrom openHistorian.historianValue import historianValue\nfrom snapDB.enumerations import QualityFlags\nfrom gsf import Ticks\nfrom typing import Optional\nfrom datetime import datetime\nimport numpy as np\n\ndef writeTest():\n    # Create historian connection (the root API object)\n    historian = historianConnection(\"localhost\")\n    instance: Optional[historianInstance] = None\n\n    try:\n        print(\"Connecting to openHistorian...\")\n        historian.Connect()    \n\n        if not historian.IsConnected or len(historian.InstanceNames) == 0:\n            print(\"No openHistorian instances detected!\")\n        else:\n            # Get first historian instance\n            initialInstance = historian.InstanceNames[0]\n\n            print(f\"Opening \\\"{initialInstance}\\\" database instance...\")\n            instance = historian.OpenInstance(initialInstance)\n\n            key = historianKey()\n            key.PointID = 1\n            key.Timestamp = Ticks.FromDateTime(datetime.utcnow())\n\n            value = historianValue()\n            value.AsSingle = np.float32(1000.98)\n            value.AsQuality = QualityFlags.WARNINGHIGH\n\n            print(\"Writing test point...\")\n            instance.Write(key, value)\n    except Exception as ex:\n        print(f\"Failed to connect: {ex}\")\n    finally:\n        if instance is not None:\n            instance.Dispose()\n\n        if historian.IsConnected:\n            print(\"Disconnecting from openHistorian\")\n\n        historian.Disconnect()\n\nif __name__ == \"__main__\":\n    writeTest()\n```\n\n# License\nopenHistorian and the Python API are licensed under the [MIT License](https://opensource.org/licenses/MIT).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/openhistorian/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GridProtectionAlliance/openhistorian-python",
    "keywords": "openHistorian,streaming,key-value,time-series,database,synchrophasor",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openhistorian",
    "package_url": "https://pypi.org/project/openhistorian/",
    "platform": null,
    "project_url": "https://pypi.org/project/openhistorian/",
    "project_urls": {
      "Bug Tracker": "https://github.com/GridProtectionAlliance/openhistorian-python/issues",
      "Documentation": "https://gridprotectionalliance.github.io/openhistorian-python/",
      "Download": "https://pypi.org/project/openhistorian/",
      "Homepage": "https://github.com/GridProtectionAlliance/openhistorian-python",
      "Source Code": "https://github.com/GridProtectionAlliance/openhistorian-python"
    },
    "release_url": "https://pypi.org/project/openhistorian/1.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "openHistorian Python API",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14937585,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41549a295c1075d3917e63f594bb47b73643236d45ecc95c64497079fe4d7b1d",
          "md5": "a8d5bf30d2ca39de12eabfd45b4ee5e7",
          "sha256": "a30d26f724eb5c1c26d99cb8176371a0f686eb4c784a403f9f2a157e302c1b4d"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8d5bf30d2ca39de12eabfd45b4ee5e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 60625,
        "upload_time": "2021-02-12T07:41:12",
        "upload_time_iso_8601": "2021-02-12T07:41:12.581548Z",
        "url": "https://files.pythonhosted.org/packages/41/54/9a295c1075d3917e63f594bb47b73643236d45ecc95c64497079fe4d7b1d/openhistorian-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "765e3b31ec5292a227b3b364dfdb9ba8b04098afd56cf5984c91e2f8a026319b",
          "md5": "f3ed7d5e3f61ca44993c396ef16bf577",
          "sha256": "46140ad210538aa7a9da2c4de0d0f5a4d7f4bee627b6464e50fc2fe6442708a5"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f3ed7d5e3f61ca44993c396ef16bf577",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 33741,
        "upload_time": "2021-02-12T07:41:13",
        "upload_time_iso_8601": "2021-02-12T07:41:13.923125Z",
        "url": "https://files.pythonhosted.org/packages/76/5e/3b31ec5292a227b3b364dfdb9ba8b04098afd56cf5984c91e2f8a026319b/openhistorian-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db203fdfd676243c65f838a25f5b2f6dc37aaa302668f84a9b610209c0591c2a",
          "md5": "d5be060e74fa9aeee653034bc1a51b40",
          "sha256": "2f2955652e952400166d33e5f4515cdfed98f18d8f86b5643a9cb65b9ae77807"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5be060e74fa9aeee653034bc1a51b40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 62120,
        "upload_time": "2021-02-14T19:48:32",
        "upload_time_iso_8601": "2021-02-14T19:48:32.945151Z",
        "url": "https://files.pythonhosted.org/packages/db/20/3fdfd676243c65f838a25f5b2f6dc37aaa302668f84a9b610209c0591c2a/openhistorian-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57d416d482e132494c588471b48a6d707ce500eae0511cf9fdf38c23cccb2945",
          "md5": "50907ed9b46ff66bf754a834dc6d7fab",
          "sha256": "2045840067aa06b5f2d3e6024215d9c0539d9dd61363139cd9d3aba3c8d46203"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "50907ed9b46ff66bf754a834dc6d7fab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 37006,
        "upload_time": "2021-02-14T19:48:34",
        "upload_time_iso_8601": "2021-02-14T19:48:34.342507Z",
        "url": "https://files.pythonhosted.org/packages/57/d4/16d482e132494c588471b48a6d707ce500eae0511cf9fdf38c23cccb2945/openhistorian-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60691d2905e1dbf6d4d879f111a07c0ba0a3c72f165ef56e2a219a5441c98324",
          "md5": "419b8bc4ecb095233c69ceadd38fb94d",
          "sha256": "3cf6c2f467a7d17a3926965c9d9e1fecdfe273b0a3a6fd0cbafef2cde53aaeef"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "419b8bc4ecb095233c69ceadd38fb94d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 62198,
        "upload_time": "2021-02-14T20:22:39",
        "upload_time_iso_8601": "2021-02-14T20:22:39.320622Z",
        "url": "https://files.pythonhosted.org/packages/60/69/1d2905e1dbf6d4d879f111a07c0ba0a3c72f165ef56e2a219a5441c98324/openhistorian-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a5e066c5a458a3e4c8eddd017793ddc2f2282be670dd940240fdd049e37b37d",
          "md5": "cbdfdd0ff5de510cfa211596fcbeeac7",
          "sha256": "940d41661f5e280309fde1a02c9a745214ed3c30796376af6b31529c426345d0"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cbdfdd0ff5de510cfa211596fcbeeac7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 37213,
        "upload_time": "2021-02-14T20:22:40",
        "upload_time_iso_8601": "2021-02-14T20:22:40.726264Z",
        "url": "https://files.pythonhosted.org/packages/3a/5e/066c5a458a3e4c8eddd017793ddc2f2282be670dd940240fdd049e37b37d/openhistorian-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f32956f609e5bee46ebd41cd2121c18cccd5220b404cec208c18bd9fca32219",
          "md5": "8fc3e5304c64d414f07aab5a1e09cd95",
          "sha256": "cc28ebcff9c87ccc90ab9146da6a9a4b8384bbfe996f7f7992ffbd4a47da85b7"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fc3e5304c64d414f07aab5a1e09cd95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 62241,
        "upload_time": "2021-02-14T20:38:54",
        "upload_time_iso_8601": "2021-02-14T20:38:54.934225Z",
        "url": "https://files.pythonhosted.org/packages/7f/32/956f609e5bee46ebd41cd2121c18cccd5220b404cec208c18bd9fca32219/openhistorian-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a989e0e7f0731cf3ccb7277ecbda2cb632fc2d247c5081b24761b00e59879860",
          "md5": "953d9aca3431ea08ebb715f50f3325aa",
          "sha256": "6564fcbba83bfc8df8bebeb2fbdbeeb653735ef8aeeac063f75dca025d25b11b"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "953d9aca3431ea08ebb715f50f3325aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 37373,
        "upload_time": "2021-02-14T20:38:56",
        "upload_time_iso_8601": "2021-02-14T20:38:56.230588Z",
        "url": "https://files.pythonhosted.org/packages/a9/89/e0e7f0731cf3ccb7277ecbda2cb632fc2d247c5081b24761b00e59879860/openhistorian-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16116c30816e86d0cbdb8ad9ba513398a28ae66df9629ef8643661922c0a5690",
          "md5": "8f370346cdf5a8d506ce918591bc06c0",
          "sha256": "ce4b4ad2806c05b7b074dd4416f8276d06d8ccc4cd1ff834f3e54bc92928088c"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f370346cdf5a8d506ce918591bc06c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 62285,
        "upload_time": "2022-04-13T21:45:23",
        "upload_time_iso_8601": "2022-04-13T21:45:23.114081Z",
        "url": "https://files.pythonhosted.org/packages/16/11/6c30816e86d0cbdb8ad9ba513398a28ae66df9629ef8643661922c0a5690/openhistorian-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "661850d38d6dde3c0871badb62c88601a644cc5ab199d57834bca3a5c9571d01",
          "md5": "f7c6b251ad98741f862d622940eff313",
          "sha256": "fa93100c948fc618b6a9a4aaea0cbf3c2653ded8ffdfd4b45b17e8beda343baa"
        },
        "downloads": -1,
        "filename": "openhistorian-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f7c6b251ad98741f862d622940eff313",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 36990,
        "upload_time": "2022-04-13T21:45:25",
        "upload_time_iso_8601": "2022-04-13T21:45:25.658082Z",
        "url": "https://files.pythonhosted.org/packages/66/18/50d38d6dde3c0871badb62c88601a644cc5ab199d57834bca3a5c9571d01/openhistorian-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16116c30816e86d0cbdb8ad9ba513398a28ae66df9629ef8643661922c0a5690",
        "md5": "8f370346cdf5a8d506ce918591bc06c0",
        "sha256": "ce4b4ad2806c05b7b074dd4416f8276d06d8ccc4cd1ff834f3e54bc92928088c"
      },
      "downloads": -1,
      "filename": "openhistorian-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8f370346cdf5a8d506ce918591bc06c0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 62285,
      "upload_time": "2022-04-13T21:45:23",
      "upload_time_iso_8601": "2022-04-13T21:45:23.114081Z",
      "url": "https://files.pythonhosted.org/packages/16/11/6c30816e86d0cbdb8ad9ba513398a28ae66df9629ef8643661922c0a5690/openhistorian-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "661850d38d6dde3c0871badb62c88601a644cc5ab199d57834bca3a5c9571d01",
        "md5": "f7c6b251ad98741f862d622940eff313",
        "sha256": "fa93100c948fc618b6a9a4aaea0cbf3c2653ded8ffdfd4b45b17e8beda343baa"
      },
      "downloads": -1,
      "filename": "openhistorian-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "f7c6b251ad98741f862d622940eff313",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 36990,
      "upload_time": "2022-04-13T21:45:25",
      "upload_time_iso_8601": "2022-04-13T21:45:25.658082Z",
      "url": "https://files.pythonhosted.org/packages/66/18/50d38d6dde3c0871badb62c88601a644cc5ab199d57834bca3a5c9571d01/openhistorian-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}