{
  "info": {
    "author": "Michele Cappellari",
    "author_email": "michele.cappellari@physics.ox.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\r\n**VorBin: Adaptive Voronoi Binning of Two Dimensional Data**\r\n\r\n.. image:: http://www-astro.physics.ox.ac.uk/~mxc/software/vorbin_logo.png\r\n.. image:: https://img.shields.io/pypi/v/vorbin.svg\r\n        :target: https://pypi.org/project/vorbin/\r\n.. image:: https://img.shields.io/badge/arXiv-astroph:0302262-orange.svg\r\n    :target: https://arxiv.org/abs/astro-ph/0302262\r\n.. image:: https://img.shields.io/badge/DOI-10.1046/...-green.svg\r\n        :target: https://doi.org/10.1046/j.1365-8711.2003.06541.x\r\n\r\nThis VorBin package is a Python implementation of the two-dimensional adaptive\r\nspatial binning method of `Cappellari & Copin (2003) <http://adsabs.harvard.edu/abs/2003MNRAS.342..345C>`_. \r\nIt uses Voronoi tessellations to bin data to a given minimum signal-to-noise ratio.\r\n\r\n.. contents:: :depth: 1\r\n\r\nAttribution\r\n-----------\r\n\r\nIf you use this software for your research, please cite\r\n`Cappellari & Copin (2003) <http://adsabs.harvard.edu/abs/2003MNRAS.342..345C>`_\r\nThe BibTeX entry for the paper is::\r\n\r\n    @ARTICLE{Cappellari2003,\r\n        author = {{Cappellari}, M. and {Copin}, Y.},\r\n        title = \"{Adaptive spatial binning of integral-field spectroscopic\r\n            data using Voronoi tessellations}\",\r\n        journal = {MNRAS},\r\n        eprint = {astro-ph/0302262},\r\n        year = 2003,\r\n        volume = 342,\r\n        pages = {345-354},\r\n        doi = {10.1046/j.1365-8711.2003.06541.x}\r\n    }\r\n\r\nInstallation\r\n------------\r\n\r\ninstall with::\r\n\r\n    pip install vorbin\r\n\r\nWithout writing access to the global ``site-packages`` directory, use::\r\n\r\n    pip install --user vorbin\r\n\r\nUsage Example\r\n-------------\r\n\r\nTo learn how to use the package ``VorBin`` run ``voronoi_2d_binning_example.py`` in the\r\n``vorbin/examples`` directory, within the main package installation folder inside\r\n``site-packages``, and read the detailed documentation in the docstring of the\r\nfile ``voronoi_2d_binning.py``, on `PyPi <https://pypi.org/project/vorbin/>`_ or as \r\nPDF from `<https://purl.org/cappellari/software>`_.\r\n\r\nPerform the following simple steps to bin you own 2D data with minimal Python interaction:\r\n\r\n1. Write your data vectors [X, Y, Signal, Noise] in the text file\r\n   ``voronoi_2d_binning_example.txt``, following the example provided;\r\n\r\n2. Change the line ``targetSN = 50.0`` in the procedure ``voronoi_2d_binning_example.py``,\r\n   to specify the desired target S/N of your final bins;\r\n\r\n3. Run the program ``voronoi_2d_binning_example`` and wait for the final plot to appear.\r\n   The output is saved in the text file ``voronoi_2d_binning_output.txt``. The\r\n   last column BIN_NUM in the file is *all* that is needed to actually bin the data;\r\n\r\n4. Read the documentation at the beginning of the file ``voronoi_2d_binning.py`` to\r\n   fully understand the meaning of the various optional output parameters.\r\n\r\nVorBin Purpose\r\n--------------\r\n\r\nPerform adaptive spatial binning of two-dimensional data\r\nto reach a chosen constant signal-to-noise ratio per bin.\r\nThis program implements the algorithm described in section 5.1 of\r\n`Cappellari & Copin (2003) <http://adsabs.harvard.edu/abs/2003MNRAS.342..345C>`_.\r\n\r\nCalling Sequence\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n    bin_number, x_gen, y_gen, x_bar, y_bar, sn, nPixels, scale = voronoi_2d_binning(\r\n        x, y, signal, noise, target_sn, cvt=True, pixelsize=None, plot=True,\r\n        quiet=True, sn_func=None, wvt=True)\r\n\r\n\r\nInput Parameters\r\n----------------\r\n\r\nx: array_like with shape (npix,)\r\n    Vector containing the X coordinate of the pixels to bin.\r\n    Arbitrary units can be used (e.g. arcsec or pixels).\r\n    In what follows the term \"pixel\" refers to a given\r\n    spatial element of the dataset (sometimes called \"spaxel\" in\r\n    the integral-field spectroscopy community): it can be an actual pixel\r\n    of a CCD image, or a spectrum position along the slit of a long-slit\r\n    spectrograph or in the field of view of an IFS\r\n    (e.g. a lenslet or a fibre).\r\n    It is assumed here that pixels are arranged in a regular\r\n    grid, so that the pixel size is a well-defined quantity.\r\n    The pixel grid, however, can contain holes (some pixels can be\r\n    excluded from the binning) and can have an irregular boundary.\r\n    See the above reference for an example and details.\r\ny: array_like with shape (npix,)\r\n    Vector containing the Y coordinate of the pixels to bin.\r\nsignal: array_like with shape (npix,)\r\n    Vector containing the signal associated with each pixel, having \r\n    coordinates ``(x, y)``. If the \"pixels\" are the apertures of an \r\n    integral-field spectrograph, then the signal can be defined as the \r\n    average flux in the spectral range under study, for each aperture.\r\n    If pixels are those of a CCD in a galaxy image, the signal will be \r\n    simply the counts in each pixel.\r\nnoise: array_like with shape (npix,)\r\n    Vector containing the corresponding noise (1 sigma error) associated \r\n    with each pixel.\r\n    \r\n    Generally the ``signal`` and ``noise`` are used to comnpute the \r\n    binning but one may also compute the ``S/N`` on-the-fly using the \r\n    ``sn_func`` keyword.\r\ntarget_sn: float\r\n    The desired signal-to-noise ratio in the final 2D-binned data. \r\n    E.g. a ``S/N~50`` per spectral pixel may be a reasonable value to \r\n    extract stellar kinematics information from galaxy spectra.\r\n\r\nOptional Keywords\r\n-----------------\r\n\r\ncvt: bool, optional\r\n    Set ``cvt=False`` to skip the Centroidal Voronoi Tessellation\r\n    (CVT) step (vii) of the algorithm in Section 5.1 of\r\n    `Cappellari & Copin (2003)`_.\r\n    This may be useful if the noise is strongly non-Poissonian,\r\n    the pixels are not optimally weighted, and the CVT step\r\n    appears to introduce significant gradients in the S/N.\r\n    An alternative consists of setting ``wvt=True`` below.\r\nplot: bool, optional\r\n    Set ``plot=True`` to produce a plot of the two-dimensional\r\n    bins and of the corresponding S/N at the end of the computation.\r\npixsize: float, optional\r\n    Optional pixel scale of the input data.\r\n    This can be the size of a pixel of an image or the size\r\n    of a spaxel or lenslet in an integral-field spectrograph.\r\n\r\n    The value is computed automatically by the program, but\r\n    this can take a long time when ``(x, y)`` have many elements.\r\n    In those cases, the ``pixsize`` keyword should be given.\r\nsn_func: callable, optional\r\n    Generic function to calculate the S/N of a bin with spaxels\r\n    ``index`` with the form:: \r\n        \r\n        sn = func(index, signal, noise)\r\n        \r\n    If ``sn_func=None``, the binning uses the default ``_sn_func()`` \r\n    included in the program file, which implements eq.(2) of \r\n    `Cappellari & Copin (2003)`_. However, another more general \r\n    function can be adopted if needed. \r\n\r\n    The S/N returned by sn_func() does not need to be an analytic\r\n    function of S and N. There is also no need for sn_func() to \r\n    return the actual S/N. Instead sn_func() could return any \r\n    quantity the user needs to equalize.\r\n\r\n    For example ``sn_func()`` could be a procedure which uses ``ppxf`` \r\n    to measure the velocity dispersion from the coadded spectrum of \r\n    spaxels ``index`` and returns the relative error in the dispersion.\r\n\r\n    Of course an analytic approximation of ``S/N``, like the default,\r\n    speeds up the calculation.\r\n\r\n    Read the docstring of ``_sn_func()`` inside the file \r\n    ``voronoi_2d_binning.py`` for more details.\r\nquiet: bool, optional\r\n    By default, the program shows the progress while accreting\r\n    pixels and then while iterating the CVT. Set ``quiet=True``\r\n    to avoid printing progress results.\r\nwvt:\r\n    When ``wvt=True``, the routine ``bin2d_cvt_equal_mass`` is\r\n    modified as proposed by Diehl & Statler (2006, MNRAS, 368, 497).\r\n    In this case the final step of the algorithm, after the bin-accretion\r\n    stage, is not a modified Centroidal Voronoi Tessellation, but it uses\r\n    a Weighted Voronoi Tessellation.\r\n    This may be useful if the noise is strongly non-Poissonian,\r\n    the pixels are not optimally weighted, and the CVT step\r\n    appears to introduce significant gradients in the S/N.\r\n    An alternative consists of setting ``cvt=False`` above.\r\n    If you set ``wvt=True`` you should also include a reference to\r\n    \"the WVT modification proposed by Diehl & Statler (2006).\"\r\n\r\nOutput Parameters\r\n-----------------\r\n\r\nbin_number: array_like with shape (npix,)\r\n    Vector containing the bin number assigned to each input pixel.\r\n    The index goes from zero to ``nbin - 1``.\r\n\r\n    IMPORTANT: This vector alone is all one needs to make any subsequent\r\n    computation on the binned data. everything else is optional and can\r\n    be ignored!\r\nx_gen: array_like with shape (nbin,)\r\n    Vector of the X coordinates of the bin generators.\r\n    These generators are an alternative way of defining \r\n    the Voronoi tessellation.\r\n\r\n    NOTE: usage of this vector is deprecated as it can be confusing.\r\ny_gen: array_like with shape (nbin,)\r\n    Vector of Y coordinates of the bin generators.\r\n\r\n    NOTE: usage of this vector is deprecated as it can be confusing.\r\nx_bar: array_like with shape (nbin,)\r\n    Vector of X coordinates of the bins luminosity weighted centroids.\r\n    Useful for plotting interpolated maps.\r\ny_bar: array_like with shape (nbin,)\r\n    Vector of Y coordinates of the bins luminosity-weighted centroids.\r\nsn: array_like with shape (nbin,)\r\n    Vector with the final SN of each bin.\r\nnpixels: array_like with shape (nbin,)\r\n    Vector with the number of pixels of each bin.\r\nscale: array_like with shape (nbin,)\r\n    Vector with the scale length of the Weighted Voronoi Tessellation, when\r\n    ``wvt=True``. In that case ``scale`` is *needed* together with the\r\n    coordinates ``xbin`` and ``ybin`` of the generators, to compute the\r\n    tessellation (but it is safer to simply use the ``binnumber`` vector\r\n    instead).\r\n\r\nWhen some pixels have no signal\r\n-------------------------------\r\n\r\nBinning should not be used blindly when some pixels contain significant\r\nnoise but virtually no signal. This situation may happen e.g. when\r\nextracting the gas kinematics from observed galaxy spectra. One way of\r\nusing ``voronoi_2d_binning`` consists of first selecting the pixels with\r\n``S/N`` above a minimum threshold and then binning each set of connected\r\npixels *separately*. Alternatively one may optimally weight the pixels\r\nbefore binning. For details, see Sec. 2.1 of `Cappellari & Copin (2003)`_.\r\n\r\nBinning X-ray data\r\n------------------\r\n\r\nFor X-ray data, or other data coming from photon-counting devices the noise\r\nis generally accurately Poissonian. In the Poissonian case, the S/N in a\r\nbin can never decrease by adding a pixel [see Sec.2.1 of\r\n`Cappellari & Copin (2003)`_], and it is preferable to bin the data\r\n*without* first removing the observed pixels with no signal.\r\n\r\nBinning very big images\r\n-----------------------\r\n\r\nComputation time in voronoi_2d_binning scales nearly as npixels^1.5, so it\r\nmay become a problem for large images (e.g. at the time of writing\r\n``npixels > 1000x1000``). Let's assume that we really need to bin the image\r\nas a whole and that the S/N in a significant number of pixels is well above\r\nour target S/N. As for many other computational problems, a way to radically\r\ndecrease the computation time consists of proceeding hierarchically. Suppose\r\nfor example we have a 4000x4000 pixels image, we can do the following:\r\n\r\n1. Rebin the image regularly (e.g. in groups of 8x8 pixels) to a manageable\r\n   size of 500x500 pixels;\r\n2. Apply the standard Voronoi 2D-binning procedure to the 500x500 image;\r\n3. Transform all unbinned pixels (which already have enough S/N) of the\r\n   500x500 Voronoi 2D-binned image back into their original individual\r\n   full-resolution pixels;\r\n4. Now apply Voronoi 2D-binning only to the connected regions of\r\n   full-resolution pixels;\r\n5. Merge the set of lower resolution bins with the higher resolution ones.\r\n\r\n\r\n\r\nLicense\r\n-------\r\n\r\nOther/Proprietary License\r\n\r\nCopyright (c) 2001-2022 Michele Cappellari\r\n\r\nThis software is provided as is without any warranty whatsoever.\r\nPermission to use, for non-commercial purposes is granted.\r\nPermission to modify for personal or internal use is granted,\r\nprovided this copyright and disclaimer are included in all \r\ncopies of the software. All other rights are reserved.\r\nIn particular, redistribution of the code is not allowed.\r\n\r\nChangelog\r\n---------\r\n\r\nV3.1.5: MC, Oxford, 24 February 2022\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Included test for repetitions in ``_cvt_equal_mass`` to avoid the \r\n  possibility of cycling. Thanks to Peter Weilbacher (aip.de) for the \r\n  report, a detailed example producing the problem, and subsequent testing. \r\n\r\nV3.1.4: MC, Oxford, 19 February 2020\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Formatted documentation as docstring. \r\n\r\nV3.1.3: MC, Oxford, 27 September 2018\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed clock DeprecationWarning in Python 3.7.\r\n\r\nV3.1.2: MC, Oxford, 10 May 2018\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Dropped legacy Python 2.7 support. \r\n\r\nV3.1.1: MC, Oxford, 15 September 2017\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Stops if unbinned pixels do not have enough S/N.\r\n- Removed weighted centroid function. \r\n\r\nV3.1.0: MC, Oxford, 17 July 2017\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Use cKDTree for much faster un-weighted Voronoi Tessellation.\r\n- Removed loop over bins from Lloyd's algorithm with CVT.\r\n      \r\nV3.0.9: MC, Oxford, 10 July 2017\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Do not iterate down to diff==0 in _cvt_equal_mass().\r\n- Request `pixelsize` when dataset is large. Thanks to Davor Krajnovic\r\n  (Potsdam) for the feedback. \r\n- Make `quiet` really quiet.\r\n- Fixed some instances where `sn_func()` was not being used (only \r\n  relevant when passing the `sn_func` keyword). \r\n\r\nV3.0.8: MC, Oxford, 15 February 2017\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- New voronoi_tessellation() function. \r\n\r\nV3.0.7: MC, Oxford, 23 January 2017 \r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Print execution time. \r\n\r\nV3.0.6: MC, Oxford, 14 June 2016\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Use interpolation='nearest' to avoid crash on MacOS.\r\n  Thanks to Kyle Westfall (Portsmouth) for reporting the problem.\r\n- Allow for zero noise. \r\n\r\nV3.0.5: MC, Oxford, 18 April 2016\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Fixed deprecation warning in Numpy 1.11. \r\n\r\nV3.0.4: MC, Oxford, 12 April 2016\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Included keyword \"sn_func\" to pass a function which\r\n  calculates the S/N of a bin, rather than editing _sn_func().\r\n- Included test to prevent the addition of a pixel from\r\n  ever decreasing the S/N during the accretion stage.\r\n      \r\nV3.0.3: MC, Oxford, 31 March 2016\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Use for loop to calculate Voronoi tessellation of large arrays\r\n  to reduce memory usage. Thanks to Peter Weilbacher (Potsdam) for\r\n  reporting the problem and providing the solution.\r\n      \r\nV3.0.2: MC, Oxford, 2 October 2014\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Avoid potential runtime warning while plotting.\r\n\r\nV3.0.1: MC, Oxford, 25 May 2014\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Support both Python 2.7 and Python 3. \r\n      \r\nV3.0.0: MC, London, 19 March 2014\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Translated from IDL into Python and tested against the original.\r\n      \r\nV2.6.0: MC, London, 19 March 2014\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Included new SN_FUNCTION to illustrate the fact that the user can\r\n  define a custom function to estimate the S/N of a bin if needed.\r\n      \r\nV2.5.8: MC, La Palma, 15 May 2012\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Update Voronoi tessellation at the exit of bin2d_cvt_equal_mass.\r\n  This is only done when using /WVT, as DIFF may not be zero at the\r\n  last iteration. \r\n\r\nV2.5.7: MC, Oxford, 24 March 2012\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Included safety termination criterion of Lloyd algorithm\r\n  to prevent loops using /WVT. \r\n\r\nV2.5.6: MC, Oxford, 11 November 2011\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Use IDL intrinsic function DISTANCE_MEASURE for automatic pixelSize, \r\n  when PIXSIZE keyword is not given.\r\n      \r\nV2.5.5: MC, Oxford, 28 April 2010\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Added PIXSIZE keyword. \r\n      \r\nV2.5.4: MC, Oxford, 30 November 2009\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Improved color shuffling for final plot.\r\n\r\nV2.5.3: MC, Oxford, 3 December 2007\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed program stop, introduced in V2.5.0, with /NO_CVT keyword.\r\n      \r\nV2.5.2: MC, Oxford, 28 March 2007\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Print number of unbinned pixels. \r\n      \r\nV2.5.1: MC, Oxford, 3 November 2006\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Updated documentation. \r\n\r\nV2.5.0: MC, Leiden, 9 March 2006\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Added two new lines of code and the corresponding /WVT keyword\r\n  to implement the nice modification to the algorithm proposed by\r\n  Diehl & Statler (2006). \r\n\r\nV2.4.8: MC, Leiden, 23 December 2005\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Use geometric centroid of a bin during the bin-accretion stage,\r\n  to allow the routine to deal with negative signal (e.g. in\r\n  background-subtracted X-ray images). Thanks to Steven Diehl for\r\n  pointing out the usefulness of dealing with negative signal.\r\n      \r\nV2.4.7: MC, Leiden, 27 September 2005\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Verify that SIGNAL and NOISE are non negative vectors.\r\n      \r\nV2.4.6: MC, Leiden, 27 August 2005\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Added /NO_CVT keyword to optionally skip the CVT step of\r\n  the algorithm. \r\n\r\nV2.4.5: MC, Leiden, 3 December 2004\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Added BIN2D prefix to internal routines to avoid possible\r\n  naming conflicts. \r\n\r\nV2.4.4: MC, Leiden, 30 November 2004\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Prevent division by zero for pixels with signal=0\r\n  and noise=sqrt(signal)=0, as can happen from X-ray data.\r\n      \r\nV2.4.3: MC, Leiden, 29 November 2004\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Corrected bug introduced in version 2.3.1. It went undetected\r\n  for a long time because it could only happen in special conditions.\r\n  Now we recompute the index of the good bins after computing all\r\n  centroids of the reassigned bins in reassign_bad_bins. Many thanks\r\n  to Simona Ghizzardi for her clear analysis of the problem and\r\n  the solution. \r\n\r\nV2.4.2: MC, Leiden, 4 August 2004\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Use LONARR instead of INTARR to define the CLASS vector,\r\n  to be able to deal with big images. Thanks to Tom Statler.\r\n      \r\nV2.4.1: MC, Leiden, 14 December 2003\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Added /QUIET keyword and verbose output during the computation.\r\n  After suggestion by Richard McDermid. \r\n\r\nV2.4.0: MC, Leiden, 10 December 2003\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Addedd basic error checking of input S/N. \r\n- Reintroduced the treatment for zero-size bins in CVT, which \r\n  was deleted in V2.2. Thanks to Robert Sharp and Kambiz Fathi \r\n  for reporting problems.\r\n\r\nV2.3.1: MC, Leiden, 13 April 2003\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Do *not* assume the first bin is made of one single pixel.\r\n- Added computation of S/N scatter and plotting of 1-pixel bins.\r\n      \r\nV2.3.0: MC, Leiden, 9 April 2003\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Unified the three tests to stop the accretion of one bin.\r\n  This can improve some bins at the border. \r\n\r\nV2.2.0: MC, Leiden, 11 March 2003\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Added computation of useful bin quantities in output. Deleted some\r\n  safety checks for zero size bins in CVT. Minor polishing of the code.\r\n      \r\nV2.1.0: MC, Vicenza, 13 February 2003\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- First released version. Written documentation.\r\n      \r\nV2.0.0: MC, Leiden, 11 September 2001\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Major revisions. Stable version. \r\n\r\nV1.0.0: Michele Cappellari, Leiden, June 2001\r\n+++++++++++++++++++++++++++++++++++++++++++++\r\n\r\n- First working implementation. \r\n\r\n\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://purl.org/cappellari/software",
    "keywords": "",
    "license": "Other/Proprietary License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vorbin",
    "package_url": "https://pypi.org/project/vorbin/",
    "platform": "",
    "project_url": "https://pypi.org/project/vorbin/",
    "project_urls": {
      "Homepage": "https://purl.org/cappellari/software"
    },
    "release_url": "https://pypi.org/project/vorbin/3.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "VorBin: Voronoi Binning of Two Dimensional Data",
    "version": "3.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12998847,
  "releases": {
    "3.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "576228a014b314c785700642b29ddf3df50b1785a3bc7caadf93f877893c5952",
          "md5": "bb95393c70360ad3ee6c100e1fc8be06",
          "sha256": "b5cfbda9432c3cede89a05e93a405af408bee6401c3c22032b0e6f9e01bea2dd"
        },
        "downloads": -1,
        "filename": "vorbin-3.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bb95393c70360ad3ee6c100e1fc8be06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83625,
        "upload_time": "2018-05-21T11:07:17",
        "upload_time_iso_8601": "2018-05-21T11:07:17.542689Z",
        "url": "https://files.pythonhosted.org/packages/57/62/28a014b314c785700642b29ddf3df50b1785a3bc7caadf93f877893c5952/vorbin-3.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "506e080c96e2fbb042b3635649c28c9cdc1c4946adff7238429fc27063c7954d",
          "md5": "8cd74efa41cad29a66537b1d753d5f00",
          "sha256": "bdaf878a4b2c07d2c2204cef5699097494aeadf67238ce0e28fd2d313790cce8"
        },
        "downloads": -1,
        "filename": "vorbin-3.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8cd74efa41cad29a66537b1d753d5f00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69009,
        "upload_time": "2020-02-19T17:55:12",
        "upload_time_iso_8601": "2020-02-19T17:55:12.495880Z",
        "url": "https://files.pythonhosted.org/packages/50/6e/080c96e2fbb042b3635649c28c9cdc1c4946adff7238429fc27063c7954d/vorbin-3.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea705f54afe2c55acf660c84b1ebdc3a6010e1a34f9d5bd02c6b20d6323a449f",
          "md5": "977688307c4cad8bc78e5af8561ece95",
          "sha256": "b7e06dc40ef244011a8923062869514aeaa75b6206b401025b4342c9846836dc"
        },
        "downloads": -1,
        "filename": "vorbin-3.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "977688307c4cad8bc78e5af8561ece95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 91540,
        "upload_time": "2022-02-24T17:48:07",
        "upload_time_iso_8601": "2022-02-24T17:48:07.123238Z",
        "url": "https://files.pythonhosted.org/packages/ea/70/5f54afe2c55acf660c84b1ebdc3a6010e1a34f9d5bd02c6b20d6323a449f/vorbin-3.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea705f54afe2c55acf660c84b1ebdc3a6010e1a34f9d5bd02c6b20d6323a449f",
        "md5": "977688307c4cad8bc78e5af8561ece95",
        "sha256": "b7e06dc40ef244011a8923062869514aeaa75b6206b401025b4342c9846836dc"
      },
      "downloads": -1,
      "filename": "vorbin-3.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "977688307c4cad8bc78e5af8561ece95",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 91540,
      "upload_time": "2022-02-24T17:48:07",
      "upload_time_iso_8601": "2022-02-24T17:48:07.123238Z",
      "url": "https://files.pythonhosted.org/packages/ea/70/5f54afe2c55acf660c84b1ebdc3a6010e1a34f9d5bd02c6b20d6323a449f/vorbin-3.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}