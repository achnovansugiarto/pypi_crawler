{
  "info": {
    "author": "nipype developers",
    "author_email": "neuroimaging@python.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering"
    ],
    "description": "[![Python package](https://github.com/nipype/pydra-ml/workflows/Python%20package/badge.svg?branch=master)](https://github.com/nipype/pydra-ml/actions?query=workflow%3A%22Python+package%22)\n\n# pydra-ml\n\nPydra-ML is a demo application that leverages [Pydra](https://github.com/nipype/pydra)\ntogether with [scikit-learn](https://scikit-learn.org) to perform model comparison\nacross a set of classifiers. The intent is to use this as an application to make\nPydra more robust while allowing users to generate classification reports more\neasily. This application leverages Pydra's powerful splitters and combiners to\nscale across a set of classifiers and metrics. It will also use Pydra's caching\nto:\n\n1. Efficiently train models using nested bootstrapping (with k-fold cross-validation performed in inner loop for hyperparameter tuning)\n\n2. **Compare *some* scikit-learn pipelines** in addition to base\n  classifiers (i.e., showing the distribution of performance of different models side-by-side).\n\n  ![alt text](https://github.com/danielmlow/pydra-ml/blob/master/examples/test-roc_auc_score-example.png?raw=true)\n  The distribution of performance from models trained on true labels (blue) and trained on permuted labels (orange) over 50 bootstrapping splits.\n\n\n  ![alt text](https://github.com/danielmlow/pydra-ml/blob/master/examples/test_performance_with_null_roc_auc_score.png?raw=true)\n  Median performance across 50 bootstrapping splits (95% Confidence Interval; median performance of null model)\n\n\n3. Save models and **not redo model training and evaluation** when new metrics are added, or when\nnumber of iterations (`n_splits`) is increased. Just change spec file and it will use stored models to save time.\n\n4. Output report three types of **feature importance** methods:\n- (1) standard feature importance methods for some models form sklearn (e.g., `coef_` for linear models, `feature_importances_` for tree-based models), *NOT FULLY TESTED*\n- (2) sklearn's [permutation_importance](https://scikit-learn.org/stable/modules/generated/sklearn.inspection.permutation_importance.html) (model agnostic, available for all models), *NOT FULLY TESTED*\n- (3) [Kernel SHAP](https://github.com/slundberg/shap) feature importance (model agnostic, available for all models)\n\n    ![alt text](https://github.com/danielmlow/pydra-ml/blob/master/examples/shap_example.png?raw=true)\n\n    Each bootstrapping split of the data may create its own model (e.g., different weights or best hyperparameters). For each split, we take the average of the absolute SHAP values across all test predictions. We then compute the average SHAP values across all splits.\n\n\n\n\n\n### Installation\n\npydraml requires Python 3.7+.\n\n```\npip install pydra-ml\n```\n\n## CLI usage\n\nThis repo installs `pydraml` a CLI to allow usage without any programming.\n\nTo test the CLI for a classification example, copy the `pydra_ml/tests/data/breast_cancer.csv` and\n`examples/classification_cancer_short-spec.json` to a folder and run or run within in `examples/` folder.\n\n```\n$ pydraml -s classification_cancer_short-spec.json\n```\n\nFor now, gen_feature_importance and gen_permutation_importance only are working with linear models. We need to test on other models, pipelines including ones with hyperparameter tuning:\n```\n$ pydraml -s classification_cancer_toy-spec.json\n```\n\n\nTo check a regression example, copy the `pydra_ml/tests/data/diabetes_table.csv` and\n`examples/regression_diabetes_spec.json` to a folder and run or run within in `examples/` folder.\n\n```\n$ pydraml -s regression_diabetes_spec.json\n```\n\nFor each case pydra-ml will generate a result folder `out-{spec_file_name}-{timestamp}/` that contains figures and tables comparing each model and their important features together with a\npickled results file containing all the scores from the model evaluations (see **Output** section below)\n\n```\n$ pydraml --help\nUsage: pydraml [OPTIONS]\n\nOptions:\n  -s, --specfile PATH   Specification file to use  [required]\n  -p, --plugin TEXT...  Pydra plugin to use  [default: cf, n_procs=1]\n  -c, --cache TEXT      Cache dir  [default:\n                        /Users/satra/software/sensein/pydra-ml/cache-wf]\n\n  --help                Show this message and exit.\n```\n\nWith the plugin option you can use local multiprocessing\n\n```\n$ pydraml -s ../classification_cancer_short-spec.json -p cf \"n_procs=8\"\n```\n\nor execution via dask.\n\n```\n$ pydraml -s ../classification_cancer_short-spec.json -p dask \"address=tcp://192.168.1.154:8786\"\n```\n\n## Current specification\n\nThe current specification is a JSON file as shown in the example below. It needs\nto contain all the fields described here. For datasets with many features, you\nwill want to generate `x_indices` programmatically.\n\n- *filename*: Absolute path to the CSV file containing data. Can contain a column,\n  named `group` to support `GroupShuffleSplit`, else each sample is treated as a\n  group.\n- *x_indices*: Numeric (0-based) or string list of column names to use as input features. Careful with not including output or target variables here.\n- *target_vars*: String list of target variable (at present only one is supported)\n- *group_var*: String to indicate column to use for grouping\n- *n_splits*: Number of shuffle split iterations to use\n- *test_size*: Fraction of data to use for test set in each iteration\n- *clf_info*: List of scikit-learn classifiers to use.\n- *permute*: List of booleans to indicate whether to generate a null model or not\n- *gen_feature_importance*: Boolean indicating whether unique feature importance method should be generated for each model if available (e.g., `coef_` for linear models, `feature_importances_` for tree-based models) *NOT FULLY TESTED: set to false*\n- *gen_permutation_importance*: Boolean indicating whether permutation_importance values are generated (model agnostic, available for all models) *NOT FULLY TESTED: set to false*\n- *gen_shap*: Boolean indicating whether shap values are generated (model agnostic, available for all models)\n- *nsamples*: Number of samples to use for shap estimation, use integer or the \"auto\" setting uses `nsamples = 2 * X.shape[1] + 2048`.\n- *l1_reg*: Type of regularizer to use for shap estimation\n- *plot_top_n_shap*: Number or proportion of top shap values to plot (e.g., 16\nor 0.1 for top 10%). Set to 1.0 (float) to plot all features or 1 (int) to plot\ntop first feature.\n- *metrics*: scikit-learn metric to use\n\n## `clf_info` specification\n\nThis is a list of classifiers from scikit learn and uses an array to encode:\n\n```\n- module\n- classifier\n- (optional) classifier parameters\n- (optional) gridsearch param grid\n```\n\nwhen param grid is provided and default classifier parameters are not changed,\nthen an empty dictionary **MUST** be provided as parameter 3.\n\nThis can also be embedded as a list indicating a scikit-learn Pipeline. For\nexample:\n\n```\n [ [\"sklearn.impute\", \"SimpleImputer\"],\n   [\"sklearn.preprocessing\", \"StandardScaler\"],\n   [\"sklearn.tree\", \"DecisionTreeClassifier\", {\"max_depth\": 5}]\n  ]\n```\n\n## Example specification:\n\n```\n{\"filename\": \"breast_cancer.csv\",\n \"x_indices\": [\"radius_mean\", \"texture_mean\",\"perimeter_mean\", \"area_mean\", \"smoothness_mean\",\n       \"compactness_mean\", \"concavity_mean\", \"concave points_mean\",\n       \"symmetry_mean\", \"fractal_dimension_mean\", \"radius_se\",\n       \"texture_se\", \"perimeter_se\", \"area_se\", \"smoothness_se\",\n       \"compactness_se\", \"concavity_se\", \"concave points_se\",\n       \"symmetry_se\", \"fractal_dimension_se\", \"radius_worst\",\n       \"texture_worst\", \"perimeter_worst\", \"area_worst\",\n       \"smoothness_worst\", \"compactness_worst\", \"concavity_worst\",\n       \"concave points_worst\", \"symmetry_worst\", \"fractal_dimension_worst\"],\n \"target_vars\": [\"target\"],\n \"group_var\": null,\n \"n_splits\": 100,\n \"test_size\": 0.2,\n \"clf_info\": [\n [\"sklearn.ensemble\", \"AdaBoostClassifier\"],\n [\"sklearn.naive_bayes\", \"GaussianNB\"],\n [ [\"sklearn.impute\", \"SimpleImputer\"],\n   [\"sklearn.preprocessing\", \"StandardScaler\"],\n   [\"sklearn.tree\", \"DecisionTreeClassifier\", {\"max_depth\": 5}]],\n [\"sklearn.ensemble\", \"RandomForestClassifier\", {\"n_estimators\": 100}],\n [\"sklearn.ensemble\", \"ExtraTreesClassifier\", {\"n_estimators\": 100, \"class_weight\": \"balanced\"}],\n [\"sklearn.linear_model\", \"LogisticRegressionCV\", {\"solver\": \"liblinear\", \"penalty\": \"l1\"}],\n [\"sklearn.neural_network\", \"MLPClassifier\", {\"alpha\": 1, \"max_iter\": 1000}],\n [\"sklearn.svm\", \"SVC\", {\"probability\": true},\n  [{\"kernel\": [\"rbf\", \"linear\"], \"C\": [1, 10, 100, 1000]}]],\n [\"sklearn.neighbors\", \"KNeighborsClassifier\", {},\n  [{\"n_neighbors\": [3, 5, 7, 9, 11, 13, 15, 17, 19],\n    \"weights\": [\"uniform\", \"distance\"]}]]\n ],\n \"permute\": [true, false],\n \"gen_feature_importance\": false,\n \"gen_permutation_importance\": false,\n \"permutation_importance_n_repeats\": 5,\n \"permutation_importance_scoring\": \"accuracy\",\n \"gen_shap\": true,\n \"nsamples\": \"auto\",\n \"l1_reg\": \"aic\",\n \"plot_top_n_shap\": 16,\n \"metrics\": [\"roc_auc_score\", \"f1_score\", \"precision_score\", \"recall_score\"]\n }\n```\n\n## Output:\nThe workflow will output:\n<<<<<<< HEAD\n- `results-{timestamp}.pkl` containing 1 list per model used. For example, if the `pkl` file is\nassigned to variable `results`, the models are accessed through `results[0]` to `results[N]`.\n If `permute: [false,true]` then it will output the model trained on the labels first (`results[0]`) and the model trained on the permuted labels second (`results[1]`). If there is an additional model, these will be accessed through `results[2]` (labels) and `results[3]` (permuted).\n\n  Each model contains:\n    - `dict` accessed through `results[0][0]` with model information:\n        ```python\n        import pickle as pk\n\n        with open(\"results-20201208T010313.229190.pkl\", \"rb\") as fp:\n            results = pk.load(fp)\n\n        print(results[0][0]) #1st model trained on labels\n        ```\n\n        `{'ml_wf.clf_info': ['sklearn.neural_network', 'MLPClassifier', {'alpha': 1, 'max_iter': 1000}], 'ml_wf.permute': False}`\n\n        ```python\n        print(results[3][0]) #2nd models trained on permuted labels\n        ```\n\n        `{'ml_wf.clf_info':['sklearn.linear_model', 'LogisticRegression', {'penalty': 'l2'}], 'ml_wf.permute': True}`\n\n    - `pydra Result obj` accessed through `results[0][1].output`:\n=======\n- `results-{timestamp}.pkl` containing 1 list per model used. For example, if\nassigned to variable `results`, it is accessed through `results[0]` to `results[N]`\n(e.g., if `permute: [true,false]` then it will output the model trained on permuted labels first `results[0]` and the model trained on the labels\nsecond `results[1]`. If there is an additional model, these will be accessed through `results[2]` and `results[3]`).\nEach model contains:\n    - `dict` accessed through `results[0][0]` with model information:\n     `{'ml_wf.clf_info': ['sklearn.neural_network', 'MLPClassifier',\n         {'alpha': 1, 'max_iter': 1000}], 'ml_wf.permute': False}`\n    - `pydra Result obj` accessed through `results[0][1]` with attribute `output`\n>>>>>>> ea2092bb5f199aa6ff83f25f863d3652f824f6af\n      which itself has attributes:\n        - `feature_names`: from the columns of the data csv.\n\n          ```python\n          print(results[1][1].output.feature_names)\n          ```\n\n          `['mean radius', 'mean texture', 'mean perimeter', 'mean area', ... ]`\n\n          And the following attributes organized in *n_splits* lists for *n_splits* bootstrapping samples:\n        - `output`: *n_splits* lists, each one with two lists for true and predicted labels.\n        - `score`: *n_splits* lists each one containing M different metric scores.\n\n          Three types of feature importance methods:\n\n        - (1) `feature_importance`: standard feature importance method from *sklearn*. Limitation: not all models have standard methods and difficult to compare methods across models.\n          - `pipeline.coef_` for linear models (coefficients of regression, SVC).\n          - `pipeline.coefs_` for multi-layer perceptron, which returns `j` lists for `j` hidden nodes connections with each input\n          - `pipeline.feature_importances_` for decision tree, Random Forest, or boosting algorithms\n\n          ```python\n          print(results[1][1].output.feature_importance)\n          ```\n        - (2) `permutation_importance`: the difference in performance from permutating the feature column as in [sklearn's permutation importance](https://scikit-learn.org/stable/modules/generated/sklearn.inspection.permutation_importance.html).\n        Advantage: works for all models (i.e., model agnostic). Limitation: measures decrease in performance, not magnitude of each feature.\n\n            ```python\n              print(results[1][1].output.permutation_importance)\n            ```\n\n        - (3) `shaps`: `n_splits` lists each one with a list of shape (P,F) where P is the\n        amount of predictions and F the different SHAP values for each feature.\n        `shaps` is empty if `gen_shap` is set to `false` or if `permute` is set\n        to true. Advantage: model agnostic, produces magnitude for each feature.\n\n            ```python\n              print(results[1][1].output.shaps)\n            ```\n\n        - `model`: A pickled version of the model trained on all the input data.\n        One can use this model to test on new data that has the exact same input\n        shape and features as the trained model. For example:\n\n          ```python\n          import pickle as pk\n          import numpy as np\n\n          with open(\"results-20201208T010313.229190.pkl\", \"rb\") as fp:\n              results = pk.load(fp)\n\n          trained_model = results[0][1].output.model\n          trained_model.predict(np.random.rand(1, 30))\n          ```\n\n          Please make sure the value of `results[N][0].get('ml_wf.permute')` is `False` to ensure that you are not using\n          a permuted model.\n\n\n- One figure per metric with performance distribution across splits (with or\nwithout null distribution trained on permuted labels)\n- `performance_table-{timestamp}` folder:\n  - `test-performance-table_{metric}_all-splits_{timestamp).csv` with the test performance of each the model/s trained on each bootstrapping split and median score\n  - `test-performance-table_accuracy_score_with-95ci-and-median-null_20210702T223005.935447``test-performance-table_{metric}_all-splits_{timestamp).csv` with the median score and 95% confidence interval (CI) and median score of null model if available: `median score [95% CI; median null score]`\n- `stats-{metric}-{timestamp}.png`: one figure per any metric with the word `score` in it, containing a one tailed statistical comparison(row > column) of models using an empirical p-value, a common and effective measure for evaluating classifier performance (see Definition 1 in Ojala & Garriga, 2010) as implemented in [sklearn](https://github.com/scikit-learn/scikit-learn/blob/2beed5584/sklearn/model_selection/_validation.py#L1062). Annotation = p-value, color = significant over alpha level of 0.05.  The p-value represents the fraction of column-model scores where the row-model classifier had a higher mean performance (e.g., a p-value of 0.02 indicates that the mean score of a row model is higher than 98% of column-model scores). Data model vs. null model is displayed on the diagonal. The actual numeric values are stored in a correspondingly named pkl file.\n- `shap-{timestamp}` dir\n    - SHAP values are computed for each prediction in each split's test set\n    (e.g., 30 bootstrapping splits with 100 prediction will create (30,100) array).\n     The mean is taken across predictions for each split (e.g., resulting in a\n     (64,30) array for 64 features and 30 bootstrapping samples).\n    - For binary classification, a more accurate display of feature importance\n    obtained by splitting predictions into TP, TN, FP, and FN, which in turn can\n    allow for error auditing (i.e., what a model pays attention to when making\n    incorrect/false predictions)\n        - `quadrant_indexes.pkl`: The TP, TN, FP, FN indexes are saved in  as a\n        `dict` with one `key` per model (permuted models without SHAP values will\n        be skipped automatically), and each key `values` being a bootstrapping split.\n        - `summary_values_shap_{model_name}_{prediction_type}.csv` contains all\n        SHAP values and summary statistics ranked by the mean SHAP value across\n        bootstrapping splits. A sample_n column can be empty or NaN if this split\n        did not have the type of prediction in the filename (e.g., you may not\n        have FNs or FPs in a given split with high performance).\n        - `summary_shap_{model_name}_{plot_top_n_shap}.png` contains SHAP value\n        summary statistics for all features (set to 1.0) or only the top N most\n        important features for better visualization.\n\n## Debugging\n\nYou will need to understand a bit of pydra to know how to debug this application for\nnow. If the process crashes, the easiest way to restart is to remove the `cache-wf`\nfolder first. However, if you are rerunning, you could also remove any `.lock` file in the `cache-wf` directory.\n\n\n## Developer installation\n\nInstall repo in developer mode:\n\n```\ngit clone https://github.com/nipype/pydra-ml.git\ncd pydra-ml\npip install -e .[dev]\n```\n\nIt is also useful to install pre-commit, which takes care of styling when\ncommitting code. When pre-commit is used you may have to run git commit twice,\nsince pre-commit may make additional changes to your code for styling and will\nnot commit these changes by default:\n\n```\npip install pre-commit\npre-commit install\n```\n\n### Project structure\n\n- `tasks.py` contain the Python functions.\n- `classifier.py` contains the Pydra workflow and the annotated tasks.\n- `report.py` contains report generation code.\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nipype/pydra-ml",
    "keywords": "",
    "license": "Apache License, 2.0",
    "maintainer": "nipype developers",
    "maintainer_email": "neuroimaging@python.org",
    "name": "pydra-ml",
    "package_url": "https://pypi.org/project/pydra-ml/",
    "platform": "",
    "project_url": "https://pypi.org/project/pydra-ml/",
    "project_urls": {
      "Homepage": "https://github.com/nipype/pydra-ml"
    },
    "release_url": "https://pypi.org/project/pydra-ml/0.5.1/",
    "requires_dist": [
      "pydra (>=0.6)",
      "psutil",
      "scikit-learn",
      "seaborn",
      "click",
      "shap",
      "packaging ; extra == 'all'",
      "sphinx (>=2.1.2) ; extra == 'all'",
      "sphinx-rtd-theme ; extra == 'all'",
      "sphinxcontrib-apidoc (~=0.3.0) ; extra == 'all'",
      "sphinxcontrib-napoleon ; extra == 'all'",
      "sphinxcontrib-versioning ; extra == 'all'",
      "pytest (>=4.4.0) ; extra == 'all'",
      "pytest-cov ; extra == 'all'",
      "pytest-env ; extra == 'all'",
      "pytest-xdist ; extra == 'all'",
      "pytest-rerunfailures ; extra == 'all'",
      "codecov ; extra == 'all'",
      "black ; extra == 'all'",
      "pre-commit ; extra == 'all'",
      "pytest (>=4.4.0) ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-env ; extra == 'dev'",
      "pytest-xdist ; extra == 'dev'",
      "pytest-rerunfailures ; extra == 'dev'",
      "codecov ; extra == 'dev'",
      "black ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "packaging ; extra == 'doc'",
      "sphinx (>=2.1.2) ; extra == 'doc'",
      "sphinx-rtd-theme ; extra == 'doc'",
      "sphinxcontrib-apidoc (~=0.3.0) ; extra == 'doc'",
      "sphinxcontrib-napoleon ; extra == 'doc'",
      "sphinxcontrib-versioning ; extra == 'doc'",
      "packaging ; extra == 'docs'",
      "sphinx (>=2.1.2) ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "sphinxcontrib-apidoc (~=0.3.0) ; extra == 'docs'",
      "sphinxcontrib-napoleon ; extra == 'docs'",
      "sphinxcontrib-versioning ; extra == 'docs'",
      "pytest (>=4.4.0) ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "pytest-env ; extra == 'test'",
      "pytest-xdist ; extra == 'test'",
      "pytest-rerunfailures ; extra == 'test'",
      "codecov ; extra == 'test'",
      "pytest (>=4.4.0) ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "pytest-env ; extra == 'tests'",
      "pytest-xdist ; extra == 'tests'",
      "pytest-rerunfailures ; extra == 'tests'",
      "codecov ; extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "Pydra dataflow engine",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11161762,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb76b696138bd195223144c9903c9917d5741a2a82e529824026baf1cd454d92",
          "md5": "6e681e27793c35960be38034daa67187",
          "sha256": "88c898665d28ba9e5181ab069c612edba82b56f2b1f3148e721a4aa1cb9efc09"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e681e27793c35960be38034daa67187",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 64586,
        "upload_time": "2020-05-25T23:34:22",
        "upload_time_iso_8601": "2020-05-25T23:34:22.040403Z",
        "url": "https://files.pythonhosted.org/packages/cb/76/b696138bd195223144c9903c9917d5741a2a82e529824026baf1cd454d92/pydra_ml-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ccf366d94ba27c43a63a2e3ce9ca1fc425a53dfd90216605dcc6eced4b05642",
          "md5": "9f0faeb1edf51d8c4ec9686fd22fbb2c",
          "sha256": "1e10753b4a8fc02c80e61c4497be3dc9a2f744041eb3bd2eb34edb618f747757"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9f0faeb1edf51d8c4ec9686fd22fbb2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14861,
        "upload_time": "2020-05-25T23:34:24",
        "upload_time_iso_8601": "2020-05-25T23:34:24.518262Z",
        "url": "https://files.pythonhosted.org/packages/2c/cf/366d94ba27c43a63a2e3ce9ca1fc425a53dfd90216605dcc6eced4b05642/pydra_ml-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a25429b17caad1f201828c6e31581bbb6cd1276ad3135b27941382eb8c54ee64",
          "md5": "a1af855999c32b3c41556641851618d7",
          "sha256": "ded6484cd73c87a6cb526b0fae89b3f25d48d283838310b42028d1f25ef7edb8"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1af855999c32b3c41556641851618d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 64587,
        "upload_time": "2020-06-02T13:12:59",
        "upload_time_iso_8601": "2020-06-02T13:12:59.752928Z",
        "url": "https://files.pythonhosted.org/packages/a2/54/29b17caad1f201828c6e31581bbb6cd1276ad3135b27941382eb8c54ee64/pydra_ml-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddc5e2c9c046cbfe2a2a090a57a86d90047268579e1fd0f5f17a0eafc5ff4563",
          "md5": "579b60bbdeaae4f06157570fdf0b4f13",
          "sha256": "81f18b0cd4c320b50744e79c8d09bbf27828851e886b442942b803bcd426d469"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "579b60bbdeaae4f06157570fdf0b4f13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 15405,
        "upload_time": "2020-06-02T13:13:00",
        "upload_time_iso_8601": "2020-06-02T13:13:00.757516Z",
        "url": "https://files.pythonhosted.org/packages/dd/c5/e2c9c046cbfe2a2a090a57a86d90047268579e1fd0f5f17a0eafc5ff4563/pydra_ml-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e675f7f697860802296781166bc319a77108f2c8611935405f9e3addca502aa9",
          "md5": "39602396f255bea732f09d0ee55e3419",
          "sha256": "48aa4c64998ca8ad235edcb595281d920a4d38300fcaeb95192c0118babdb794"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39602396f255bea732f09d0ee55e3419",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 65437,
        "upload_time": "2020-06-13T15:39:17",
        "upload_time_iso_8601": "2020-06-13T15:39:17.207487Z",
        "url": "https://files.pythonhosted.org/packages/e6/75/f7f697860802296781166bc319a77108f2c8611935405f9e3addca502aa9/pydra_ml-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3679846c779e5cc47c3a9c80c7e007baa6a541fed07f60b9fff068eeaed62ff9",
          "md5": "a657c5071616766cc14c7d960bfa3fcb",
          "sha256": "da1b819a40bbc4eab58583b6261237c9db72ef762595e81198c48c0f6f780dbe"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a657c5071616766cc14c7d960bfa3fcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 16204,
        "upload_time": "2020-06-13T15:39:18",
        "upload_time_iso_8601": "2020-06-13T15:39:18.255204Z",
        "url": "https://files.pythonhosted.org/packages/36/79/846c779e5cc47c3a9c80c7e007baa6a541fed07f60b9fff068eeaed62ff9/pydra_ml-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b43a4b1a28a273a1d179b1d2209b46b32cbc63578f43da032fc375f5bddcb46e",
          "md5": "8f28e4ab33f3df4537131cbcf0d56a29",
          "sha256": "5288e1ff23fb18877876a3954a32fa4de7a3e71357f0845bf972d8674a4ff3c2"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f28e4ab33f3df4537131cbcf0d56a29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 88416,
        "upload_time": "2020-06-21T03:50:41",
        "upload_time_iso_8601": "2020-06-21T03:50:41.861394Z",
        "url": "https://files.pythonhosted.org/packages/b4/3a/4b1a28a273a1d179b1d2209b46b32cbc63578f43da032fc375f5bddcb46e/pydra_ml-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6e118d4cd5004e6cb6da177649de192e5807f4343985d3d3a4d107b6796d133",
          "md5": "bb727b1a124de80afe0cbf573a461c6e",
          "sha256": "7034760b6e1d329616bea622950e858ed553df8b3d37618a9b938e1167163b81"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bb727b1a124de80afe0cbf573a461c6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 18481,
        "upload_time": "2020-06-21T03:50:42",
        "upload_time_iso_8601": "2020-06-21T03:50:42.977569Z",
        "url": "https://files.pythonhosted.org/packages/b6/e1/18d4cd5004e6cb6da177649de192e5807f4343985d3d3a4d107b6796d133/pydra_ml-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8546d9e8c5c398d0c3bb4a3e7c78d923efbb1ea97112bd363b4283796bba7185",
          "md5": "4946315a943677f09f873e7acbd07477",
          "sha256": "3820d75a5f19c12d235b0d9322ebf856581d2e1a0c07b2c0906debb0d7c7d394"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4946315a943677f09f873e7acbd07477",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 88604,
        "upload_time": "2020-06-23T14:11:32",
        "upload_time_iso_8601": "2020-06-23T14:11:32.051890Z",
        "url": "https://files.pythonhosted.org/packages/85/46/d9e8c5c398d0c3bb4a3e7c78d923efbb1ea97112bd363b4283796bba7185/pydra_ml-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "186e7f101d23ea18ac6705fa596347ee33d6b4c96c56ad7ce4a8807a0987592a",
          "md5": "30574bbe3dece6c0fdcacf8484be6857",
          "sha256": "d0c60bf70d0e8942fc652b2e30bd687223268d5fb8624142753ed0644dc8ff39"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "30574bbe3dece6c0fdcacf8484be6857",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 18637,
        "upload_time": "2020-06-23T14:11:33",
        "upload_time_iso_8601": "2020-06-23T14:11:33.098827Z",
        "url": "https://files.pythonhosted.org/packages/18/6e/7f101d23ea18ac6705fa596347ee33d6b4c96c56ad7ce4a8807a0987592a/pydra_ml-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98751940ffa00cde36962ded92bd20a42411bfb1a62c933a5841d493e07327bf",
          "md5": "fdaa17e5ce1922265ac7ab4416d5bb15",
          "sha256": "8168167b3bece7ceb66aeb8969e22eb9b4a227422cd3368ec7bd8e0f704d9995"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdaa17e5ce1922265ac7ab4416d5bb15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 88625,
        "upload_time": "2020-07-27T02:48:03",
        "upload_time_iso_8601": "2020-07-27T02:48:03.060910Z",
        "url": "https://files.pythonhosted.org/packages/98/75/1940ffa00cde36962ded92bd20a42411bfb1a62c933a5841d493e07327bf/pydra_ml-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8923d1f2301bdadbfef9db840ad4d2b7d17dc98a3caba5d14a04b7e225c2927e",
          "md5": "b9ea74efb4fed3a51ea9fa5545b8900f",
          "sha256": "5ef6bdd0c13e92df6f81c9dee343c298a3e3efa1682e44c2da92ce1dfee1220b"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b9ea74efb4fed3a51ea9fa5545b8900f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 18671,
        "upload_time": "2020-07-27T02:48:04",
        "upload_time_iso_8601": "2020-07-27T02:48:04.173775Z",
        "url": "https://files.pythonhosted.org/packages/89/23/d1f2301bdadbfef9db840ad4d2b7d17dc98a3caba5d14a04b7e225c2927e/pydra_ml-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90735f467524bbad5d8b3d4915ae47b761689dfe554668661a35aa9a5028ba6a",
          "md5": "0f3318628f26f2fff2b32aa55ddeae24",
          "sha256": "7a6866f3da831f5d1c01d1b649556e7bbfeb675e6f4c752c82cec976ae83e399"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f3318628f26f2fff2b32aa55ddeae24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 88685,
        "upload_time": "2020-10-31T23:06:20",
        "upload_time_iso_8601": "2020-10-31T23:06:20.693639Z",
        "url": "https://files.pythonhosted.org/packages/90/73/5f467524bbad5d8b3d4915ae47b761689dfe554668661a35aa9a5028ba6a/pydra_ml-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c0f3a0ed52a0cefaf63cd3f2306d26eb7a77a1b9d54a9e97ceab186714f15da",
          "md5": "c0323eedb9247f417f730a89d7338ad8",
          "sha256": "32208c80f0a28688cd80e3bd8b271dcdb0c295f2c5b44e0b4fa349d6cb164158"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c0323eedb9247f417f730a89d7338ad8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18758,
        "upload_time": "2020-10-31T23:06:22",
        "upload_time_iso_8601": "2020-10-31T23:06:22.000962Z",
        "url": "https://files.pythonhosted.org/packages/8c/0f/3a0ed52a0cefaf63cd3f2306d26eb7a77a1b9d54a9e97ceab186714f15da/pydra_ml-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97713874bf99a76dbf03dba846538ca215b501272e5126d10f6fb1620406a865",
          "md5": "7a0f0aba58bcd9881f503d6720b72d3a",
          "sha256": "c2fcf7e3a24d0d8bf0852a58381455f9e42ddfdcd812d547ecf1f0920afa1c23"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a0f0aba58bcd9881f503d6720b72d3a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 89284,
        "upload_time": "2020-12-08T02:17:02",
        "upload_time_iso_8601": "2020-12-08T02:17:02.042025Z",
        "url": "https://files.pythonhosted.org/packages/97/71/3874bf99a76dbf03dba846538ca215b501272e5126d10f6fb1620406a865/pydra_ml-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "013d8f57259b928553ad52f92c60addf1a86f508cb83502e1a58b5217f627bba",
          "md5": "786b226c9f2adebf2ae5259dd3172a03",
          "sha256": "464930c4dc6f24064e7e80ac53d89ad66ed0cbf9a50f2ec1e1cad7b81e69698b"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "786b226c9f2adebf2ae5259dd3172a03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19755,
        "upload_time": "2020-12-08T02:17:03",
        "upload_time_iso_8601": "2020-12-08T02:17:03.319146Z",
        "url": "https://files.pythonhosted.org/packages/01/3d/8f57259b928553ad52f92c60addf1a86f508cb83502e1a58b5217f627bba/pydra_ml-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c79434e68e14c92119f56551b45e060e6b7b1c2f7e36889c65dfd4d24af074ff",
          "md5": "96469a023f559e4b870d1c1814ac7ad0",
          "sha256": "37948a3892abc9286db95cbc8cbb2c7f845972168d5bcef80af9150ea128cf8f"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96469a023f559e4b870d1c1814ac7ad0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24762,
        "upload_time": "2021-08-12T14:38:08",
        "upload_time_iso_8601": "2021-08-12T14:38:08.910783Z",
        "url": "https://files.pythonhosted.org/packages/c7/94/34e68e14c92119f56551b45e060e6b7b1c2f7e36889c65dfd4d24af074ff/pydra_ml-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c1661e1d9f376573a7092c5f46a882bc88e3f47719d25ec2de16e771468830b",
          "md5": "ea92b16a2a209cd06911231b5c29e9cf",
          "sha256": "4d1c436bdfeef1b2626c7ddeb6cb170993242043cf548da993e37303b1cd87a9"
        },
        "downloads": -1,
        "filename": "pydra_ml-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ea92b16a2a209cd06911231b5c29e9cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 44154,
        "upload_time": "2021-08-12T14:38:10",
        "upload_time_iso_8601": "2021-08-12T14:38:10.257463Z",
        "url": "https://files.pythonhosted.org/packages/5c/16/61e1d9f376573a7092c5f46a882bc88e3f47719d25ec2de16e771468830b/pydra_ml-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c79434e68e14c92119f56551b45e060e6b7b1c2f7e36889c65dfd4d24af074ff",
        "md5": "96469a023f559e4b870d1c1814ac7ad0",
        "sha256": "37948a3892abc9286db95cbc8cbb2c7f845972168d5bcef80af9150ea128cf8f"
      },
      "downloads": -1,
      "filename": "pydra_ml-0.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96469a023f559e4b870d1c1814ac7ad0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 24762,
      "upload_time": "2021-08-12T14:38:08",
      "upload_time_iso_8601": "2021-08-12T14:38:08.910783Z",
      "url": "https://files.pythonhosted.org/packages/c7/94/34e68e14c92119f56551b45e060e6b7b1c2f7e36889c65dfd4d24af074ff/pydra_ml-0.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c1661e1d9f376573a7092c5f46a882bc88e3f47719d25ec2de16e771468830b",
        "md5": "ea92b16a2a209cd06911231b5c29e9cf",
        "sha256": "4d1c436bdfeef1b2626c7ddeb6cb170993242043cf548da993e37303b1cd87a9"
      },
      "downloads": -1,
      "filename": "pydra_ml-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ea92b16a2a209cd06911231b5c29e9cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 44154,
      "upload_time": "2021-08-12T14:38:10",
      "upload_time_iso_8601": "2021-08-12T14:38:10.257463Z",
      "url": "https://files.pythonhosted.org/packages/5c/16/61e1d9f376573a7092c5f46a882bc88e3f47719d25ec2de16e771468830b/pydra_ml-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}