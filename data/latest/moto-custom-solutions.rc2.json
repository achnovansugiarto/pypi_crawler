{
  "info": {
    "author": "Data Automation Team",
    "author_email": "ddoyle@motoinsight.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "### MOTO CUSTOM SOLUTIONS\n### V 1.0\n\n-----------------------\n--> INSTALLING LIBRARY\n-----------------------\n\n- (Coming Soon) pip install motolibrary \n\n---------------------\n--> IMPORTING MODULE\n---------------------\n\n- import motolibrary.motocustomsolutionspkg\n- from motolibrary.motocustomsolutionspkg.(FileName.py) import (Function or \\*)\n\n----------------\n||    DOCS    ||\n----------------\n\nThe following is documentation for each of the library's functions:\n\n---------------------\n---> 1. dir\\_clean.py\n---------------------\n\nFunctionality: Removes all excel and csv files from a given directory.\n\nParameters:\n  folder\\_path : string\n    (Optional) Path to directory containing files to delete.\n    If not specified, deletes from current inventory.\n\nReturns: None\n\nSide Effects:\n  Deletes all .xlsx and .csv files from specified local directory\n\nTest Files for Function: test\\_dir\\_clean.py\n\n------------------\n---> 2. errors.py\n------------------\n\nFunctionality: Defines errors for library use.\n\nClasses:\n  CustomError(Exception)\n  DataError(CustomError)\n  FTPConnectionError(CustomError)\n  FTPUploadError(CustomError)\n  FTPEncodingError(CustomError)\n  RedashAPIError(CustomError)\n\n-----------------------\n---> 3. ftp\\_cleanse.py\n-----------------------\n\nFunctionality: Fills a dataframe with dummy values in each of the columns of which the original dataframe had data in.\n\nParameters:\n  ftp\\_df : pandas.DataFrame\n    DataFrame with data that will be closed.\n    All columns filled in this DataFrame will be replaced with dummy values in the returned DataFrame.\n\nReturns:\n  dummy\\_df : pandas.DataFrame\n    Dummy DataFrame containing only one row, of dummy values filled in the same columns as those that were filled in the original DF.\n\nEx. A DataFrame is passed with 3 columns, #1 and #3 are filled and #2 is not. The return would be a DF with the same\ncolumns as the original, containing only one row with columns #1 and #3 would be filled with garbage text and #2 empty.\n\nTest Files for Function: test\\_ftp\\_cleanse.py\n\n--------------------\n---> 4. ftp\\_down.py\n--------------------\n\nFunctionality: Downloads a file from an FTP server to a specified directory on the local machine.\n\nParameters:\n  hostname : String\n    FTP Host Name\n  username : String\n    FTP Login Username\n  password : String\n    FTP Login Password\n  filename\\_filter : String\n    Name of file to download from FTP\n  download\\_directory : String \n    Directory to download file to. Default is CWD.\n\nReturns: None\n\nTest Files for Function: test\\_ftp\\_down.py\n\n------------------\n---> 5. ftp\\_up.py\n------------------\n\nFunctionality: Uploads a file from the local machine to a specified FTP server with an optional specified upload name.\n\nParameters:\n  hostname : String\n    FTP Host Name\n  username : String\n    FTP Login Username\n  file\\_name : String\n    FTP Login Password\n  upload\\_name : String\n    !! MUST INCLUDE EXTENSION !!\n    (Optional) Specifies name of FTP Upload\n      ie. Can be uploaded with a different name than local file.\n\n\nNotes: File name must include its extension. So must the optional upload name.\n\nReturns:\n  True if supplement has been uploaded to FTP\n  False if supplement did not upload to FTP\n\nTest Files for Function: test\\_ftp\\_up.py\n\n---------------------------\n---> 6. redash\\_download.py\n---------------------------\n\nFunctionality: Downloads data from a Redash query (with optional additional params) to the local machine as a .csv file.\n\nParameters:\n  query\\_id : String\n    ID of Redash Query\n  api\\_key : String\n    User API Key\n  region : String\n    Country for Redash (ie. CA or US)\n  file\\_name : String\n    File will be downloaded and saved locally as a .csv with this name\n  params : Dictionary\n    (Optional) Dictionary of query params -- Default = {} (empty)\n\nNotes: The file name parameter should not include an extension. All query data will be processed & downloaded as a .csv file.\nFor example, if one calls the function with \"redash\\_data\" as the file\\_name argument, the query will be saved under \"redash\\_data.csv\".\n\nThe region argument must be one of the following strings: ca, us, usa (capitalization does not matter... CA, US, USA will work).\n\nReturns: None\n\nPotential Errors Raised:\n- ValueError (indicates invalid region code)\n- RedashAPIError (connection issue with Redash API or invalid query info)\n\nTest Files for Function: test\\_redash\\_download.py\n\n-----------------------\n---> 7. slack\\_funcs.py\n-----------------------\n\nFunctionality: Send messages or files to a list of Slack of channels.\n\nParameters:\n- slack\\_send\\_file:\n    slackbot_token : String\n      Token for SlackBot Usage\n    channels : List\n      Contains list of channels to send to\n    files : List\n      Contains list of files to send\n    titles : List\n      Contains list of titles of files; titles should correspond to the same\n      order of items in the files list.\n\n- slack\\_send\\_message:\n    slackbot_token : String\n      Token for SlackBot Usage\n    channels : List\n      Contains list of channels to send messages to via slack\n    messages : List\n      Contains list of messages to send\n\nNotes: For slack\\_send\\_file, the Titles list argument must perfectly match up to the Files list argument.\n\nReturns: None\n\nTest Files for Functions: test\\_slack\\_funcs.py    !! These are not automated tests - Manual checking of slack channels is needed !!\n\n-----------------------\n---> 8. supp\\_create.py\n-----------------------\n\nFunctionality: Creates a standard supplement file from a DataFrame whose columns are mapped to the supplement at the user's discretion. \n\nParameters:\n  df : pandas.DataFrame\n    Pandas DataFrame containing data needed to be mapped into a supplement\n  dealership\\_col : String\n    Name of column from df to map to Dealership UID column of Supplement\n  vin\\_col : String\n    Name of column from df to map to VIN columnt of Supplement\n  stock\\_col : String\n    Name of column from df to map to Stock column of Supplement\n  trim\\_col : String\n    Name of column from df to map to Trim column of Supplement\n  jato\\_col : String\n    (Optional) Name of column from df to map to JATO column of Supplement\n  chrmstyle\\_col : String\n    (Optional) Name of column from df to map to Chrmstyle_ID column of Supplement\n  discount\\_col : String\n    (Optional) Name of column from df to map to Discounts column of Supplement\n  misc1\\_col : String\n    (Optional) Name of column from df to map to Misc 1 column of Supplement\n  misc2\\_col : String\n    (Optional) Name of column from df to map to Misc 2 column of Supplement\n\nReturns:\n  supp\\_df : pandas.DataFrame\n    Supplement-style DataFrame with newly mapped data.\n\nEx. If one passes \"my-dealerships\" as the dealership\\_col parameter, the supplement's Dealership UID column will contain data from the original file's \"my-dealerships\" column.\n\nTest Files for Functions: test\\_supp\\_create.py",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.github.com/motoinsight-data-ops/motolibrary",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "moto-custom-solutions",
    "package_url": "https://pypi.org/project/moto-custom-solutions/",
    "platform": "",
    "project_url": "https://pypi.org/project/moto-custom-solutions/",
    "project_urls": {
      "Homepage": "https://www.github.com/motoinsight-data-ops/motolibrary"
    },
    "release_url": "https://pypi.org/project/moto-custom-solutions/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Library of useful functions for custom solutions.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9389396,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6d25b189a88472bd94f2a993da9ba74c6bd9027396d524aab0123238bf548a2",
          "md5": "3256740f5e8d60d959c1fca22d19b3fa",
          "sha256": "9a3e95714311cfca261c3ce3368ddfba373f5fc717b6f12c8a572bc75219f230"
        },
        "downloads": -1,
        "filename": "moto_custom_solutions-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3256740f5e8d60d959c1fca22d19b3fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8737,
        "upload_time": "2021-02-06T16:23:45",
        "upload_time_iso_8601": "2021-02-06T16:23:45.113088Z",
        "url": "https://files.pythonhosted.org/packages/a6/d2/5b189a88472bd94f2a993da9ba74c6bd9027396d524aab0123238bf548a2/moto_custom_solutions-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54b5610c3219e1d0063c66750ebf0c13273e233f2698e1436d0274d5af4f7f18",
          "md5": "ced76d6024b3ed6391cac30917d14d43",
          "sha256": "bddffc5e63c7302b40db5f19908ae0ae7e128610cee7beb805b3842a88ed7b13"
        },
        "downloads": -1,
        "filename": "moto-custom-solutions-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ced76d6024b3ed6391cac30917d14d43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6093,
        "upload_time": "2021-02-06T16:23:46",
        "upload_time_iso_8601": "2021-02-06T16:23:46.119687Z",
        "url": "https://files.pythonhosted.org/packages/54/b5/610c3219e1d0063c66750ebf0c13273e233f2698e1436d0274d5af4f7f18/moto-custom-solutions-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10161bff12d2bb0a2f078239313c472cf7602cb14aaceedc755f9d9769f54551",
          "md5": "d2a43c66561b96f9768cebd5d3b18160",
          "sha256": "b0ffda9c6a53569075bb9dc88dd08b9c47f2807c9aeccc297f879866bd2f086d"
        },
        "downloads": -1,
        "filename": "moto-custom-solutions-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d2a43c66561b96f9768cebd5d3b18160",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8446,
        "upload_time": "2021-02-11T18:55:58",
        "upload_time_iso_8601": "2021-02-11T18:55:58.045816Z",
        "url": "https://files.pythonhosted.org/packages/10/16/1bff12d2bb0a2f078239313c472cf7602cb14aaceedc755f9d9769f54551/moto-custom-solutions-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10161bff12d2bb0a2f078239313c472cf7602cb14aaceedc755f9d9769f54551",
        "md5": "d2a43c66561b96f9768cebd5d3b18160",
        "sha256": "b0ffda9c6a53569075bb9dc88dd08b9c47f2807c9aeccc297f879866bd2f086d"
      },
      "downloads": -1,
      "filename": "moto-custom-solutions-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d2a43c66561b96f9768cebd5d3b18160",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8446,
      "upload_time": "2021-02-11T18:55:58",
      "upload_time_iso_8601": "2021-02-11T18:55:58.045816Z",
      "url": "https://files.pythonhosted.org/packages/10/16/1bff12d2bb0a2f078239313c472cf7602cb14aaceedc755f9d9769f54551/moto-custom-solutions-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}