{
  "info": {
    "author": "Red Balloon Security",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Topic :: Software Development"
    ],
    "description": "# Synthol\n\nJuice up your dependencies ðŸ’‰\n\n## Introduction\n\n`synthol` is a lightweight, asynchronous framework for [dependency\ninjection](https://en.wikipedia.org/wiki/Dependency_injection) in Python 3. It\npopulates a typed constructor with instances of all of its non-primitive\narguments. To do this, it first discovers all of the classes contained in some\npackages, and then tracks down implementations for each class and instantiates\nthem.\n\nThe advantage of using this framework is that a developer can define a\nstrongly-typed constructor for a class without concerning themselves with where\nand how the class and its dependencies should be instantiated. This reduces the\noverhead (in boilerplate, time, etc.) associated with using the [composite\npattern](https://en.wikipedia.org/wiki/Composite_pattern) and decouples\ninterface implementations. \n\nSynthol is useful for highly modular applications. Some motivating use cases\nmight be as follows:\n\n- A microservices-based application, where there may be a large number of\n  clients and services that need to interact with other services. As an\n  alternative to each service/client creating a specific instance of its\n  dependencies (resulting in tight coupling between service implementations) or\n  repetitive, factory-like boilerplate, each client/service simply defines what\n  type of services it relies on in its constructor, and the injector manages\n  creating and providing instances of these to each constructor.\n- An application that has some \"registration\" procedure for implementations of\n  an interface. There are multiple ways to accomplish this, possibly requiring\n  a \"register\" call for every implementation. Using the dependency injector\n  requires very little extra code: simply a call to `discover` modules where\n  implementations live and a call to `get_instance` of a list of interface\n  implementations. This scales favorably when more implementations are added or\n  more interfaces need their implementations registered.\n- Mocking services for unit testing is easy with the dependency injector, since\n  service instantiation for an application is already centralized in the\n  injector. Binding the mocked interfaces to mock implementations is all that\n  is required, and then an application using the injector will get the mocked\n  implementations where the interface is needed.\n- Simplifying a big block of code which sets up a context for an application by\n  instantiating several required services. \n\n## Install\n\nInstall Synthol with `pip`.\n\n```\npython3 -m pip install synthol\n```\n\n## Zoo Example\n\n\"Foo\" is overdone, so let's create a `Zoo`:\n\n```python\nfrom synthol import DependencyInjector\nfrom animal_api import CatInterface, DogInterface, KangarooInterface\nimport animal_api_implementations\n\nclass Zoo:\n    def __init__(\n        self,\n        cat: CatInterface,\n        dog: DogInterface,\n        kangaroo: KangarooInterface,\n    ):\n        self.cat = cat\n        self.dog = dog\n        self.kangaroo = kangaroo\n\n\ninjector = DependencyInjector()\ninjector.discover(animal_api_implementations)\n\n...\n# In an async function...\n    zoo = await injector.get_instance(Zoo)\n```\n\nThis discovers all classes defined in `animal_api_implementations` when\n`discover` is called. Then, when `get_instance` is called, the injector\nsearches those known classes for implementations of `CatInterface`,\n`DogInterface`, and `KangarooInterface`. Let's assume it finds one of each.\nThen each of those concrete implementations will be instantiated. But what if\nthere are multiple possible implementations?\n\n## Binding a Specific Implementation for an Interface\n\nIn order to guarantee our zoo has the most amazing animals, we can be more\nspecific about what kind of animals to include. For example, rather than\naccepting any old `CatInterface` implementation, let's specify that we want a\n[Chimera](https://en.wikipedia.org/wiki/Chimera_%28mythology%29).\n\n```python\nfrom synthol import DependencyInjector\nfrom animal_api import CatInterface, DogInterface, KangarooInterface\nimport animal_api_implementations\nfrom animal_api_implementations import Chimera\n\nclass Zoo:\n    def __init__(\n        self,\n        cat: CatInterface,\n        dog: DogInterface,\n        kangaroo: KangarooInterface,\n    ):\n        self.cat = cat\n        self.dog = dog\n        self.kangaroo = kangaroo\n\n\ninjector = DependencyInjector()\ninjector.discover(animal_api_implementations)\ninjector.bind_factory(Chimera)\n```\n\nThe addition of the `bind_factory` specifies that the `Chimera` class should be\nused when any of the interfaces it implements (`CatInterface`) are required.\nNotice that this required no change to our `Zoo` class; all we touched was the\nsetup for the injector.\n\nSee the [Providers](#providers) section for details on the different ways to\nbind implementations (or instances) for interfaces.\n\n### Recursive Instantiation\n\nPeeking at the source code for `Chimera`, we see that `Chimera` itself has some\ndependencies:\n\n```python\nfrom example_api import CatInterface, GoatInterface, SnakeInterface\n\nclass Chimera(CatInterface):\n    def __init__(\n        self,\n        goat: GoatInterface,\n        snake: SnakeInterface,\n    ):\n        self.goat = goat\n        self.snake = snake\n\n    ...\n```\n\nSince a `Chimera` has the body and head of a lion, with a second head of a goat\non its back, and whose tail is the head and body of a snake, it is only logical\nthat it requires instances of `GoatInterface` and `SnakeInterface` (explaining\nthe use of composition over inheritance in this case is left as an exercise for\nthe reader).\n\nThe injector will find implementations of each one and instantiate objects to\npass to the `Chimera` constructor so that an instance of `Chimera` can be\npassed to the `Zoo` constructor. This would be true even if we did not\nspecifically tell the injector to use `Chimera`; that is, the injector will\nsearch for implementations for any interfaces required by whichever\nimplementations need to be instantiated for the top level `get_instances`.\n\n### List Types\n\nSo far, the zoo has exactly one instance of each of the interfaces discovered.\nBut what if we (naturally) want some more variety and want to set up a whole\nexhibit of all known types of cats? The framework lets us do this easily:   \n\n```python\nfrom synthol import DependencyInjector\nfrom animal_api import CatInterface, DogInterface, KangarooInterface\nimport animal_api_implementations\nfrom typing import List\n\nclass Zoo:\n    def __init__(\n        self,\n        cats: List[CatInterface],\n        dog: DogInterface,\n        kangaroo: KangarooInterface,\n    ):\n        self.cats = cats\n        self.dog = dog\n        self.kangaroo = kangaroo\n\n\ninjector = DependencyInjector()\ninjector.discover(animal_api_implementations)\n\n...\n# In an async function...\n    zoo = await injector.get_instance(Zoo)\n```\n\nNow, rather than looking for exactly one implementation of `CatInterface`, the\ninjector will collect all implementations, create an instance for each one, and\npass all of these to the constructor as a list.\n\nThe dependency injector *only* understands `typing.List` for this\nfunctionality! For example, typing `cats` with `Set[CatInterface]` will raise\nan error.\n\n### Union Types\n\nLet's now imagine that we aren't able to actually find an implementation for\n`KangarooInterface` (kangaroos are rather rare, after all). We can make the\nconstructor more lenient about what animal becomes part of our zoo:\n\n```python\nfrom synthol import DependencyInjector\nfrom animal_api import CatInterface, DogInterface, KangarooInterface, RabbitInterface\nimport animal_api_implementations\nfrom typing import Union\n\nclass Zoo:\n    def __init__(\n        self,\n        cats: List[CatInterface],\n        dog: DogInterface,\n        kangaroo: Union[KangarooInterface, RabbitInterface],\n    ):\n        self.cats = cats\n        self.dog = dog\n        self.kangaroo = kangaroo\n\n\ninjector = DependencyInjector()\ninjector.discover(animal_api_implementations)\n\n...\n# In an async function...\n    zoo = await injector.get_instance(Zoo)\n```\n\nThe dependency injector will now search not only for implementations of\n`KangarooInterface` but also for implementations of `RabbitInterface`. It only\nneeds to find one implementation, which will be instantiated and passed to the\nconstructor.\n\nThis behavior is useful when the possible types for an argument may not have a\ncommon class ancestor.\n\nThe dependency injector *only* understands `typing.Union` for this\nfunctionality!\n\n### Optional Types\n\nAlternatively, we could say the kangaroo is entirely optional:\n\n```python\nfrom synthol import DependencyInjector\nfrom animal_api import CatInterface, DogInterface, KangarooInterface\nimport animal_api_implementations\nfrom typing import Optional\n\nclass Zoo:\n    def __init__(\n        self,\n        cats: List[CatInterface],\n        dog: DogInterface,\n        kangaroo: Optional[KangarooInterface],\n    ):\n        self.cats = cats\n        self.dog = dog\n        self.kangaroo = kangaroo\n\n\ninjector = DependencyInjector()\ninjector.discover(animal_api_implementations)\n\n...\n# In an async function...\n    zoo = await injector.get_instance(Zoo)\n```\n\nIn this case, if no implementation for `KangarooInterface` is found, then\n`None` will be passed to the `Zoo` constructor.\n\nThe dependency injector *only* understands `typing.Optional` for this\nfunctionality!\n\n## Singletons\n\nThe `get_instance` method has an optional boolean argument, `existing_instance`\n(which defaults to `False`). If this argument is `True`, and if a valid\ninstance for the given interface has already been provided, the instance will\nbe re-used and returned a second time. This is useful for implementing the\n[singleton pattern](https://en.wikipedia.org/wiki/Singleton_pattern). If this\nargument is set to `False`, a unique instance of each interface will created\nand provided every time the interface is requested.\n\n## Providers\n\nProviders (inheriting from `AbstractInstanceProvider`) handle the creation of\nnew instances when they are requested. Each provider can provide instances of\none or more interfaces, and may depend on getting instances of other\ninterfaces. \n\nIt is uncommon for a user to have to interact with any providers directly. The\n`DependencyInjector` exposes three methods that offer some control over the\ninjector's providers: `bind_instance`, `bind_factory`, and `bind`.\n\nNote that each of these methods binds a _provider_ for one or more interfaces.\nThe provider supplies an instance of an interface, and is unrelated to the\n`existing_instance` argument to `get_instance`. Once a provider has supplied an\ninstance of an interface, if `existing_instance` is True, that instance will be\nused, and the provider will not be asked for that interface again. If\n`existing_instance` is False, the provider will be asked for a new instance\neach time. However, the provider is allowed to return the same object for\nmultiple queries. Using this machinery, there are multiple ways to implement\nthe singleton pattern.\n\n### `bind_instance`\n\n`bind_instance` allows the user to directly bind an object, such that any\nrequest for an instance of that type returns this object. For example:\n\n```python\n# Skipping imports\n# [ ... ]\n\nclass A:\n    pass\n\nclass B(A):\n    pass\n\nclass C(B):\n    pass\n\nclass D(C):\n    pass\n\n# Skipping injector setup\n# [ ... ]\n\nc_singleton_instance = C()\ninjector.bind_instance(c_singleton_instance)\n\n# In async function:\n# [ ... ]\n    await injector.get_instance(C)  # returns c_singleton_instance\n    await injector.get_instance(B)  # returns c_singleton_instance\n    await injector.get_instance(A)  # returns c_singleton_instance\n    await injector.get_instance(D)  # returns new instance of D\n```\n\n### `bind_factory`\n\n`bind_factory` allows the user to bind a `Callable` (or `AsyncCallable`)\nobject, which returns an instance of the desired interface `T` when an instance\nof `T` is required.\n\n`T` is determined by the type of the callable which is passed to\n`bind_factory`. If the callable is a function, `T` is the return type of the\nfunction. If the callable is a class, `T` is that class itself. `bind_factory`\nalso accepts arbitrary keyword arguments, which will be passed to the factory\neach time it is called.\n\nPseudocode usage example:\n\n```python\nclass A:\n    def __init__(self, x: int):\n        ...\n\ninjector.bind_factory(A, x=5)\n\n# always calls A with x set to 5\nawait injector.get_instance(A)\n\nglobal_ticker = 0\ndef create_a_instance() -> A:\n    global global_ticker\n    return A(global_ticker)\ninjector.bind_factory(A, create_a_instance)\n\n# returns A with x set to whatever the value of global_ticker is at time of instantiation\nawait injector.get_instance(A)\n\n\nclass B:\n    def __init__(self, a_instance: A, other_arg: int):\n        ...\n\ninjector.bind_factory(B, other_arg=10)\n\n# returns an instance of B with other_arg set to 10, and a_instance populated by dependency\ninjection\nawait injector.get_instance(B)\n```\n\n### `bind`\n\n`bind` is the most open-ended option. The user can create their own instance of\nan `AbstractInstanceProvider` (or one of its implementations) and bind it here.\nThat abstract class has abstract methods like `get_dependencies` and\n`create_instance` which must be defined. It would be very unusual to need to\ncall `bind` directly like this, as `bind_instance` or `bind_factory` should be\nsufficient for most use cases. Because it is such an unlikely case, creating a\nprovider this way is out of scope for this README.\n\n`bind_factory` and `bind_instance` are implemented using `bind`.\n\n## Contributing & Project Status\n\nWe will happily accept merge requests for code and/or documentation from the\ncommunity!\n\nRed Balloon uses Synthol both internally, and as a dependency of other open\nsource projects. As such, the project is actively maintained, even if there are\nno recent commits. \n\n### Running tests\nThe following commands will run the tests:\n```sh\nmake develop  # or make install-test\nmake test\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/redballoonsecurity/synthol",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "synthol",
    "package_url": "https://pypi.org/project/synthol/",
    "platform": null,
    "project_url": "https://pypi.org/project/synthol/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/redballoonsecurity/synthol/-/issues",
      "Homepage": "https://gitlab.com/redballoonsecurity/synthol"
    },
    "release_url": "https://pypi.org/project/synthol/0.1.1/",
    "requires_dist": [
      "typing-inspect (~=0.7.1)",
      "mypy (==0.942) ; extra == 'test'",
      "pytest (~=7.1.1) ; extra == 'test'",
      "pytest-asyncio (~=0.18.3) ; extra == 'test'",
      "pytest-cov (~=3.0.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Simple Python3 dependency injector",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13432048,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a916fc0bb6e650d3e7a054bafe8d32b41b31eaf9517e474a00036c0e9b243bd6",
          "md5": "16a1236ae6669bc89f7f951f91e2c07a",
          "sha256": "c50f6651a39064b862f7b0bd1c60c315982f4eb726ddabc53a22652a099953c8"
        },
        "downloads": -1,
        "filename": "synthol-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16a1236ae6669bc89f7f951f91e2c07a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 15371,
        "upload_time": "2021-12-07T21:31:06",
        "upload_time_iso_8601": "2021-12-07T21:31:06.668473Z",
        "url": "https://files.pythonhosted.org/packages/a9/16/fc0bb6e650d3e7a054bafe8d32b41b31eaf9517e474a00036c0e9b243bd6/synthol-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ee5a46f3368879a95d4fcacfb50812ccffcaa01d58fa00b927c1438506924c3",
          "md5": "480102770b7bab9f49e0d57e0f787648",
          "sha256": "826d600c0369d506e3a02203636ffee7cc4b11af0e3d18cfc26c310008a183b6"
        },
        "downloads": -1,
        "filename": "synthol-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "480102770b7bab9f49e0d57e0f787648",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 18322,
        "upload_time": "2021-12-07T21:31:08",
        "upload_time_iso_8601": "2021-12-07T21:31:08.329168Z",
        "url": "https://files.pythonhosted.org/packages/6e/e5/a46f3368879a95d4fcacfb50812ccffcaa01d58fa00b927c1438506924c3/synthol-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2de8538fded89ddfa2125e01e703c74c2f65580fa55fbb55a2ea25179171b9a7",
          "md5": "8bf2fb895027842aa3331c250f666686",
          "sha256": "9433fe87e5ed839e84b4065031aacace244c49444ba809e9b5d5e6c7d11f64c2"
        },
        "downloads": -1,
        "filename": "synthol-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bf2fb895027842aa3331c250f666686",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15776,
        "upload_time": "2022-04-06T18:59:16",
        "upload_time_iso_8601": "2022-04-06T18:59:16.848891Z",
        "url": "https://files.pythonhosted.org/packages/2d/e8/538fded89ddfa2125e01e703c74c2f65580fa55fbb55a2ea25179171b9a7/synthol-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b607d34905586210ac170beaaee76b863fcb1d0ec621f95d7918a13ba0e61b14",
          "md5": "ace38c6c8f7b952e30f28af074100c5c",
          "sha256": "89e2e16f17de106b11666fa476ef69a3d5cadcd0d12934c03a5aba77357462c1"
        },
        "downloads": -1,
        "filename": "synthol-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ace38c6c8f7b952e30f28af074100c5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19733,
        "upload_time": "2022-04-06T18:59:19",
        "upload_time_iso_8601": "2022-04-06T18:59:19.267603Z",
        "url": "https://files.pythonhosted.org/packages/b6/07/d34905586210ac170beaaee76b863fcb1d0ec621f95d7918a13ba0e61b14/synthol-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2de8538fded89ddfa2125e01e703c74c2f65580fa55fbb55a2ea25179171b9a7",
        "md5": "8bf2fb895027842aa3331c250f666686",
        "sha256": "9433fe87e5ed839e84b4065031aacace244c49444ba809e9b5d5e6c7d11f64c2"
      },
      "downloads": -1,
      "filename": "synthol-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8bf2fb895027842aa3331c250f666686",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15776,
      "upload_time": "2022-04-06T18:59:16",
      "upload_time_iso_8601": "2022-04-06T18:59:16.848891Z",
      "url": "https://files.pythonhosted.org/packages/2d/e8/538fded89ddfa2125e01e703c74c2f65580fa55fbb55a2ea25179171b9a7/synthol-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b607d34905586210ac170beaaee76b863fcb1d0ec621f95d7918a13ba0e61b14",
        "md5": "ace38c6c8f7b952e30f28af074100c5c",
        "sha256": "89e2e16f17de106b11666fa476ef69a3d5cadcd0d12934c03a5aba77357462c1"
      },
      "downloads": -1,
      "filename": "synthol-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ace38c6c8f7b952e30f28af074100c5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19733,
      "upload_time": "2022-04-06T18:59:19",
      "upload_time_iso_8601": "2022-04-06T18:59:19.267603Z",
      "url": "https://files.pythonhosted.org/packages/b6/07/d34905586210ac170beaaee76b863fcb1d0ec621f95d7918a13ba0e61b14/synthol-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}