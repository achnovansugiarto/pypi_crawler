{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "azpysdkhelp@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Azure FarmBeats client library for Python\nFarmBeats is a B2B PaaS offering from Microsoft that makes it easy for AgriFood companies to build intelligent digital agriculture solutions on Azure. FarmBeats allows users to acquire, aggregate, and process agricultural data from various sources (farm equipment, weather, satellite) without the need to invest in deep data engineering resources.  Customers can build SaaS solutions on top of FarmBeats and leverage first class support for model building to generate insights at scale.\n\nUse FarmBeats client library for Python to do the following.\n\n- Create & update parties, farms, fields, seasonal fields and boundaries.\n- Ingest satellite and weather data for areas of interest.\n- Ingest farm operations data covering tilling, planting, harvesting and application of farm inputs.\n\n[Source code][source_code] | [Package (PyPi)][pypi-package] | [API reference documentation][api_docs] | [Product documentation][product_docs] | [Changelog][change_log]\n\n## Getting started\n\n### Prerequisites\n\nTo use this package, you must have:\n- Azure subscription - [Create a free account][azure_subscription]\n- Azure FarmBeats resource - [Install FarmBeats][install_farmbeats]\n- 3.6 or later - [Install Python][python]\n\n### Install the package\n\nInstall the Azure FarmBeats client library for Python with [pip][pip]:\n\n```bash\npip install azure-agrifood-farming\n```\n\n### Authenticate the client\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip] and\nenable AAD authentication on your FarmBeats resource. If you followed the [installation docs][install_farmbeats] when creating the FarmBeats\nresource, this is already covered.\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```python\nfrom azure.agrifood.farming import FarmBeatsClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n```\n\n## Key concepts\nBasic understanding of below terms will help to get started with FarmBeats client library.\n\n### [Farm Hierarchy][farm_hierarchy]\nFarm hierarchy is a collection of below entities.\n- Party - is the custodian of all the agronomic data.\n- Farm - is a logical collection of fields and/or seasonal fields. They do not have any area associated with them.\n- Field - is a multi-polygon area. This is expected to be stable across seasons.\n- Seasonal field - is a multi-polygon area. To define a seasonal boundary we need the details of area (boundary), time (season) and crop. New seasonal fields are expected to be created for every growing season.\n- Boundary - is the actual multi-polygon area expressed as a geometry (in geojson). It is normally associated with a field or a seasonal field. Satellite, weather and farm operations data is linked to a boundary.\n- Cascade delete - Agronomic data is stored hierarchically with party as the root. The hierarchy includes Party -> Farms -> Fields -> Seasonal Fields -> Boundaries -> Associated data (satellite, weather, farm operations). Cascade delete refers to the process of deleting any node and its subtree.\n\n### [Scenes][scenes]\nScenes refers to images normally ingested using satellite APIs. This includes raw bands and derived bands (Ex: NDVI). Scenes may also include spatial outputs of an inference or AI/ML model (Ex: LAI).\n\n### [Farm Operations][farm_operations_docs]\nFam operations includes details pertaining to tilling, planting, application of pesticides & nutrients, and harvesting. This can either be manually pushed into FarmBeats using APIs or the same information can be pulled from farm equipment service providers like John Deere.\n\n\n## Examples\n\n### Create a Party\nOnce you have authenticated and created the client object as shown in the [Authenticate the client](#authenticate-the-client)\nsection, you can create a party within the FarmBeats resource like this:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\n\nparty = client.parties.create_or_update(\n    party_id=party_id,\n    party={\n        \"name\": party_name,\n        \"description\": party_description\n    }\n)\n```\n\n### Create a Farm\n\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\" # Using party from previous example\n\nfarm = client.farms.create_or_update(\n    party_id=party_id,\n    farm_id=\"farm-1\",\n    farm={\n        \"name\": farm_name,\n        \"description\": farm_description\n    }\n)\n```\n\n### Create a Season\n\nCreating a Season object, spanning from April to August of 2021.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nseason_id = \"contoso-season\"\nseason_name = \"contoso-season-name\"\nseason_description = \"contoso-season-description\"\nyear = \"2021\"\nstart_date_time = \"2021-01-01T20:08:10.137Z\"\nend_date_time = \"2021-06-06T20:08:10.137Z\"\n\nseason = client.seasons.create_or_update(\n        season_id=season_id,\n        season={\n            \"name\": season_name,\n            \"year\": year,\n            \"startDateTime\": start_date_time,\n            \"endDateTime\": end_date_time,\n            \"description\": season_description\n        }\n    )\n```\n\n### Create a Boundary\n\nCreating a Boundary for the Seasonal Field created in the preceding example.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\nboundary_id = \"boundary-1\"\n\nboundary = client.boundaries.create_or_update(\n    party_id=party_id,\n    boundary_id=boundary_id,\n    boundary={\n        \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\":\n                [\n                    [\n                        [73.70457172393799, 20.545385304358106],\n                        [73.70457172393799, 20.545385304358106],\n                        [73.70448589324951, 20.542411534243367],\n                        [73.70877742767334, 20.541688176010233],\n                        [73.71023654937744, 20.545083911372505],\n                        [73.70663166046143, 20.546992723579137],\n                        [73.70457172393799, 20.545385304358106],\n                    ]\n                ]\n        },\n        \"status\": \"<string>\",\n        \"name\": \"<string>\",\n        \"description\": \"<string>\"\n    }\n)\n```\n\n### Ingest Satellite Imagery\n\nTriggering a Satellite Data Ingestion job for the boundary created above,\nto ingest Leaf Area Index data for the month of January 2020.\nThis is a Long Running Operation (also called a 'Job'), and returns\na Poller object. Calling the `.result()` method on the poller object\nwaits for the operation to terminate, and returns the final status.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\nfrom isodate.tzinfo import Utc\nfrom datetime import datetime\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\nboundary_id = \"westlake-boundary-1\"\nstart_date_time = \"2021-01-01T20:08:10.137Z\"\nend_date_time = \"2021-06-06T20:08:10.137Z\"\n\n# Queue the job\nsatellite_job_poller = client.scenes.begin_create_satellite_data_ingestion_job(\n    job_id=job_id,\n    job={\n        \"boundaryId\": boundary_id,\n        \"endDateTime\": end_date_time,\n        \"partyId\": party_id,\n        \"startDateTime\": start_date_time,\n        \"provider\": \"Microsoft\",\n        \"source\": \"Sentinel_2_L2A\",\n        \"data\": {\n            \"imageNames\": [\n                \"NDVI\"\n            ],\n            \"imageFormats\": [\n                \"TIF\"\n            ],\n            \"imageResolution\": [10]\n        },\n        \"name\": \"<string>\",\n        \"description\": \"<string>\"\n    }\n)\n\n# Wait for the job to terminate\nsatellite_job = satellite_job_poller.result()\njob_status = satellite_job_poller.status()\n```\n\n### Get Ingested Satellite Scenes\n\nQuerying for the scenes created by the job in the previous example.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\nfrom datetime import datetime\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\nboundary_id = \"boundary-1\"\n\nscenes = client.scenes.list(\n    party_id=party_id,\n    boundary_id=boundary_id,\n    start_date_time=start_date_time,\n    end_date_time=end_date_time,\n    provider=\"Microsoft\",\n    source=\"Sentinel_2_L2A\"\n)\n\nfor scene in scenes:\n    bands = [image_file[\"name\"] for image_file in scene[\"imageFiles\"]]\n    bands_str = \", \".join(bands)\n    print(f\"Scene has the bands {bands_str}\")\n```\n\n## Troubleshooting\n\n### General\n\nThe FarmBeats client will raise exceptions defined in [Azure Core][azure_core] if you call `.raise_for_status()` on your responses.\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` keyword argument:\n\n```python\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\nendpoint = \"https://<my-account-name>.farmbeats.azure.net\"\ncredential = DefaultAzureCredential()\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = FarmBeatsClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single call,\neven when it isn't enabled for the client:\n```python\nclient.crops.get(crop_id=\"crop_id\", logging_enable=True)\n```\n\n## Next steps\n\n### Additional documentation\nFor more extensive documentation on the FarmBeats, see the [FarmBeats documentation][product_docs] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[api_docs]: https://aka.ms/FarmBeatsAPIDocumentationPaaS\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[azure_subscription]: https://azure.microsoft.com/free/\n[change_log]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/agrifood/azure-agrifood-farming/CHANGELOG.md\n[cla]: https://cla.microsoft.com\n[coc_contact]: mailto:opencode@microsoft.com\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential/\n[farm_hierarchy]: https://aka.ms/FarmBeatsFarmHierarchyDocs\n[farm_operations_docs]: https://aka.ms/FarmBeatsFarmOperationsDocumentation\n[install_farmbeats]: https://aka.ms/FarmBeatsInstallDocumentationPaaS\n[product_docs]: https://aka.ms/FarmBeatsProductDocumentationPaaS\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/\n[pypi-package]: https://pypi.org/project/azure-agrifood-farming/\n[python]: https://www.python.org/downloads/\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n[samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/agrifood/azure-agrifood-farming/samples/\n[scenes]: https://aka.ms/FarmBeatsSatellitePaaSDocumentation\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/agrifood/azure-agrifood-farming/\n\n\n# Release History\n\n## 1.0.0b2 (2023-02-23)\n### Features Added\n- Adding clients for Sensor Integration which includes crud operations on DeviceDataModels, Devices, SensorDataModels, Sensors, SensorMappings, SensorPartnerIntegration and get Sensor events.\n- Adding new APIs for STAC search and get feature\n- Adding breedingMethods and Measurements as part of Crop Entity\n- Adding geographicIdentifier as part of Season Entity\n- Adding trait, relativeMeasurements and treatments as part of CropVariety Entity\n- Adding type, crs, centroid and bbox(bounding box of the geometry) as part of Boundary Entity\n- Adding Source field in Farmer, Farm, Field, Seasonal Field, Boundary, Crop, Crop variety, Season and Attachment\n- CreatedBy and ModifiedBy in all entities\n- Measure renamed to measurements in Prescription & Crop\n- Acreage renamed to area in Boundary\n- Get Feature and Search Feature APIs for Sentinel 2 L2A and Sentinel 2 L1C STAC collections\n- Adding Weather Data APIs to fetch IBM weather data\n\n### Breaking Changes\n- Removing primaryBoundaryId & boundaryIds from Field and Seasonal Field\n- Removing isPrimary flag from Boundary\n- Removing avgYields from Seasonal Field\n- Renaming Farmer to Party\n- Renaming CropVariety to CropProduct\n- Updated dependency from azure-core<2.0.0,>=1.2.2 to azure-core<2.0.0,>=1.24.0\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n\n## 1.0.0b1 (2021-05-25)\n\n- This is the initial release of the Azure AgriFood Farming library.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure/azure-sdk-for-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-agrifood-farming",
    "package_url": "https://pypi.org/project/azure-agrifood-farming/",
    "platform": null,
    "project_url": "https://pypi.org/project/azure-agrifood-farming/",
    "project_urls": {
      "Homepage": "https://github.com/Azure/azure-sdk-for-python"
    },
    "release_url": "https://pypi.org/project/azure-agrifood-farming/1.0.0b2/",
    "requires_dist": [
      "azure-core (<2.0.0,>=1.24.0)",
      "msrest (>=0.6.21)",
      "six (>=1.11.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Microsoft Azure AgriFood Farming Client Library for Python",
    "version": "1.0.0b2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16983859,
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac8efd17c71f1ddd1a76f3fa228b89435a911e7b0e54ebe088cf6fb9ee68e24f",
          "md5": "d74f393246c5dcd58c01d79e982c3baf",
          "sha256": "e909e3af972fa062e769e856f66ec91dfca73e4c6241f0a46359c63c60c61a94"
        },
        "downloads": -1,
        "filename": "azure_agrifood_farming-1.0.0b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d74f393246c5dcd58c01d79e982c3baf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 195871,
        "upload_time": "2021-05-25T23:04:56",
        "upload_time_iso_8601": "2021-05-25T23:04:56.823951Z",
        "url": "https://files.pythonhosted.org/packages/ac/8e/fd17c71f1ddd1a76f3fa228b89435a911e7b0e54ebe088cf6fb9ee68e24f/azure_agrifood_farming-1.0.0b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e29d9d6391662aedef5071aa199263d37efef4cbd9e2efc61abff658d256e4be",
          "md5": "399432da9c69652efe0ac58d88736558",
          "sha256": "bfb89e59c27d68042376a64c34bd32ea207b92ffa5fb5c2d56529d1e8166c206"
        },
        "downloads": -1,
        "filename": "azure-agrifood-farming-1.0.0b1.zip",
        "has_sig": false,
        "md5_digest": "399432da9c69652efe0ac58d88736558",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 220273,
        "upload_time": "2021-05-25T23:04:59",
        "upload_time_iso_8601": "2021-05-25T23:04:59.102205Z",
        "url": "https://files.pythonhosted.org/packages/e2/9d/9d6391662aedef5071aa199263d37efef4cbd9e2efc61abff658d256e4be/azure-agrifood-farming-1.0.0b1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ea3b04cc0940f781a6a96f8758d91ff03b149cb40717ece7f749ff2fd1fd33e",
          "md5": "60f19bf1c0191666f5dca358e079f710",
          "sha256": "ebcfb0b26f5f9555e3edc563ce3110297548b49cb78abb996e16a64dab7ee9a7"
        },
        "downloads": -1,
        "filename": "azure_agrifood_farming-1.0.0b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60f19bf1c0191666f5dca358e079f710",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 243460,
        "upload_time": "2023-02-22T22:38:57",
        "upload_time_iso_8601": "2023-02-22T22:38:57.314380Z",
        "url": "https://files.pythonhosted.org/packages/3e/a3/b04cc0940f781a6a96f8758d91ff03b149cb40717ece7f749ff2fd1fd33e/azure_agrifood_farming-1.0.0b2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53e932c4ed383ef55390b1968edcc98f09dfd9024df13db759d88c737e597aac",
          "md5": "3639893a7f2b60adff1497af0907db8f",
          "sha256": "e3716134d77337c49040b236cf25d5bf2a2c7ba45c201ba4edfea4878e7cdf69"
        },
        "downloads": -1,
        "filename": "azure-agrifood-farming-1.0.0b2.zip",
        "has_sig": false,
        "md5_digest": "3639893a7f2b60adff1497af0907db8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 293203,
        "upload_time": "2023-02-22T22:39:00",
        "upload_time_iso_8601": "2023-02-22T22:39:00.147858Z",
        "url": "https://files.pythonhosted.org/packages/53/e9/32c4ed383ef55390b1968edcc98f09dfd9024df13db759d88c737e597aac/azure-agrifood-farming-1.0.0b2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ea3b04cc0940f781a6a96f8758d91ff03b149cb40717ece7f749ff2fd1fd33e",
        "md5": "60f19bf1c0191666f5dca358e079f710",
        "sha256": "ebcfb0b26f5f9555e3edc563ce3110297548b49cb78abb996e16a64dab7ee9a7"
      },
      "downloads": -1,
      "filename": "azure_agrifood_farming-1.0.0b2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "60f19bf1c0191666f5dca358e079f710",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 243460,
      "upload_time": "2023-02-22T22:38:57",
      "upload_time_iso_8601": "2023-02-22T22:38:57.314380Z",
      "url": "https://files.pythonhosted.org/packages/3e/a3/b04cc0940f781a6a96f8758d91ff03b149cb40717ece7f749ff2fd1fd33e/azure_agrifood_farming-1.0.0b2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53e932c4ed383ef55390b1968edcc98f09dfd9024df13db759d88c737e597aac",
        "md5": "3639893a7f2b60adff1497af0907db8f",
        "sha256": "e3716134d77337c49040b236cf25d5bf2a2c7ba45c201ba4edfea4878e7cdf69"
      },
      "downloads": -1,
      "filename": "azure-agrifood-farming-1.0.0b2.zip",
      "has_sig": false,
      "md5_digest": "3639893a7f2b60adff1497af0907db8f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 293203,
      "upload_time": "2023-02-22T22:39:00",
      "upload_time_iso_8601": "2023-02-22T22:39:00.147858Z",
      "url": "https://files.pythonhosted.org/packages/53/e9/32c4ed383ef55390b1968edcc98f09dfd9024df13db759d88c737e597aac/azure-agrifood-farming-1.0.0b2.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}