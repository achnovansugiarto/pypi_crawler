{
  "info": {
    "author": "Denis Usachev",
    "author_email": "usachevdy@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Introduction\nModern encoders have more than one stage of encoding. Developers manually create pipes for converting their text in vector.\nBut some steps are atomic bricks and can be reuseful.\nBeside it some encoding takes a lot of time and we reinvent caches.\nEncoder library provide simple way initialization and pipeline construction.   \n\n# Install\n```bash\npip install encoder-lib[bert_embedded,bert_client]\n```\n\n# Get started\nLet's create bert thin client for bert-as-service\n```python\nfrom encoders.encoder_factory import EncoderFactory\n\nencoder_conf_dict = {\n    \"default\": {\n        \"type\": \"bert_client\",\n        \"input_dim\": 1,\n        \"output_dim\": 768,\n        \"params\": {\n            \"port\": 5555,\n            \"port_out\": 5556,\n            \"ip\": \"localhost\",\n            \"timeout\": 5000, \n        }\n   }\n}\nencoder_factory = EncoderFactory(encoder_conf_dict)\n\nencoder = encoder_factory.get_encoder(\"default\")\ndocuments_list = [\"Hello World!\"]\nvectors = encoder.encode(documents_list)\n```\nColl, we have encoder, but each request over network takes time. Let's enhance the encoder and add simple in-memory in cache\n```python\nfrom encoders.encoder_factory import EncoderFactory\n\nencoder_conf_dict = {\n    \"default\": {\n        \"type\": \"bert_client\",\n        \"input_dim\": 1,\n        \"output_dim\": 768,\n        \"params\": {\n            \"port\": 5555,\n            \"port_out\": 5556,\n            \"ip\": \"localhost\",\n            \"timeout\": 5000, \n        },\n        \"cache\": {\n            \"type\": \"simple\"\n        }\n   }\n}\nencoder_factory = EncoderFactory(encoder_conf_dict)\n\nencoder = encoder_factory.get_encoder(\"default\")\ndocuments_list = [\"Hello World!\"]\n# Encoder sends request over network\nvectors = encoder.encode(documents_list)\n# This call takes vector from cache \nvectors = encoder.encode(documents_list)\n```\nSimple cache stores data in memory without any memory restriction.\nBeside it we can keep time on warming up and load pre-computed vectors from file:\n```python\nencoder_conf_dict = {\n    \"default\": {\n        \"type\": \"bert_client\",\n        \"input_dim\": 1,\n        \"output_dim\": 768,\n        \"params\": {\n            \"port\": 5555,\n            \"port_out\": 5556,\n            \"ip\": \"localhost\",\n            \"timeout\": 5000, \n        },\n        \"cache\": {\n            \"type\": \"simple\",\n            \"params\": {\n                \"path_desc\": {\n                    \"type\": \"absolute\",\n                    \"file\": \"/cache/bert_cache.pkl\"\n                }\n            }\n        }\n   }\n}\n```\n\n# Path object\nPath object is flexible description of file location. Current path object version supports:\n1. Absolute path - allow to specify full path to file\n     ```yaml\n     path_desc:\n       type: absolute\n       file: full_file_path\n    ```\n\n1. Relative path - allow to specify relative path to file. \n    We separate full file name on two parts relative and base. Relative part is stored in param \"file\".\n    Base part is stored in OS environment variable and make you config transferable to other computers.\n     ```yaml\n     path_desc:\n       type: relative\n       file: relative_file_name\n       os_env: ENV_VAR\n    ```\n\n    Examples\n    ```yaml\n    path_desc:\n      type: relative\n      os_env: BERT_HOME\n      file: \"cache/bert_cache.pkl\"\n    ```\n\n# Supported vectorisers\n\n1. Bert-as-Service client\n1. Bert embedded\n1. TF-IDF\n1. Composite vectoriser\n\n```yaml\nexample_bert_client:\n  type: bert_client\n  input_dim: 1\n  output_dim: 768\n  params:\n    port: 5555\n    port_out: 5556\n    ip: localhost\n    timeout: 5000\n\nexample_bert_embedded:\n  type: bert_embedded\n  verbose: True\n  input_dim: 1\n  output_dim: 768\n  params:\n    seq_len: 25\n    graph:\n      path_desc:\n        type: relative\n        os_env: BERT_HOME\n        file: model_for_inference.pbtxt\n    vocab:\n      path_desc:\n        type: relative\n        os_env: BERT_HOME\n        file: vocab.txt\n\nexample_composite:\n  type: composite\n  params:\n    encoders:\n      - example_bert_client\n\nexample_tf_idf:\n    type: tfidf\n    params:\n      path_desc:\n        type: absolute\n        file: /dumped_tf_idf/model.pkl\n\n```\n\n# Release notes\n## 1.3\n1. Added parameter seq_len for BERTFeatureExtractor\n\n## 1.2\n1. Added parameter verbose for BaseEncoder and all child classes\n1. Added method simple_dump_to_pickle for dumping EncoderCache.\n\n## 1.0\n1. Added base functionality for Bert and TF-IDF encoders\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NightFantom/encoder_lib",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "encoder-lib",
    "package_url": "https://pypi.org/project/encoder-lib/",
    "platform": "",
    "project_url": "https://pypi.org/project/encoder-lib/",
    "project_urls": {
      "Homepage": "https://github.com/NightFantom/encoder_lib"
    },
    "release_url": "https://pypi.org/project/encoder-lib/1.3/",
    "requires_dist": [
      "bert-serving-client (==1.10.0) ; extra == 'bert_client'",
      "bert-experimental (==1.0.4) ; extra == 'bert_embedded'"
    ],
    "requires_python": ">=3.6",
    "summary": "Library for creating encoders pipes",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7327881,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7118b680a33b81913265a52a8ecb73813bc5118ff83b0f8a9fadb9672a833005",
          "md5": "5ed107d7620cc6ed1b4f4ff382108889",
          "sha256": "33cd08e9c61efae77bf40087d6df38e064412b60d0040c0e053eb187d75fd532"
        },
        "downloads": -1,
        "filename": "encoder_lib-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ed107d7620cc6ed1b4f4ff382108889",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8033,
        "upload_time": "2020-05-10T17:54:38",
        "upload_time_iso_8601": "2020-05-10T17:54:38.805563Z",
        "url": "https://files.pythonhosted.org/packages/71/18/b680a33b81913265a52a8ecb73813bc5118ff83b0f8a9fadb9672a833005/encoder_lib-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06128d6413024ca032d926b6930a69c284ada0ed07d787feacf3cd9a8bc8fe52",
          "md5": "083b1fec39a1b61372f52cbd842c8616",
          "sha256": "6198e53f43ed00f7853bdf0131b5ace1b807926b83b8a9e35338ec2d122ccda2"
        },
        "downloads": -1,
        "filename": "encoder_lib-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "083b1fec39a1b61372f52cbd842c8616",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5254,
        "upload_time": "2020-05-10T17:54:39",
        "upload_time_iso_8601": "2020-05-10T17:54:39.818167Z",
        "url": "https://files.pythonhosted.org/packages/06/12/8d6413024ca032d926b6930a69c284ada0ed07d787feacf3cd9a8bc8fe52/encoder_lib-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15376dfe1055d31ad1f1fc302a08aad976967c513ccf6bf89026acea5661357e",
          "md5": "dd0ccade1dd64c44fbe755514aaebe1c",
          "sha256": "8c091216fd4c05d69a14da8be44f30e2a74d132414daccec846ccf4b33253801"
        },
        "downloads": -1,
        "filename": "encoder_lib-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd0ccade1dd64c44fbe755514aaebe1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8825,
        "upload_time": "2020-05-17T10:24:26",
        "upload_time_iso_8601": "2020-05-17T10:24:26.645865Z",
        "url": "https://files.pythonhosted.org/packages/15/37/6dfe1055d31ad1f1fc302a08aad976967c513ccf6bf89026acea5661357e/encoder_lib-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61b12fe7bd2e33662182dd62b25269b003535c0e1ccee87babc31eca29594fa6",
          "md5": "8cb4b9d68fb596728ad1aefbdb7c8647",
          "sha256": "bf8e3fdee22fc184f69a749bbc61522e6617afb4722085bf019e8698f6bcbbfd"
        },
        "downloads": -1,
        "filename": "encoder_lib-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8cb4b9d68fb596728ad1aefbdb7c8647",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5745,
        "upload_time": "2020-05-17T10:24:27",
        "upload_time_iso_8601": "2020-05-17T10:24:27.753824Z",
        "url": "https://files.pythonhosted.org/packages/61/b1/2fe7bd2e33662182dd62b25269b003535c0e1ccee87babc31eca29594fa6/encoder_lib-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f71b91390f1bad4fa9a3e5d873e912fc2089cc5b54ba25a86623266342f2bf62",
          "md5": "5b97c3075546d16146fdc1405d565bda",
          "sha256": "8cc86167669f7a1fbf80ca01a2e68d21b6448dd374101b95670c11c9158e0da5"
        },
        "downloads": -1,
        "filename": "encoder_lib-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b97c3075546d16146fdc1405d565bda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8907,
        "upload_time": "2020-05-26T16:01:04",
        "upload_time_iso_8601": "2020-05-26T16:01:04.873065Z",
        "url": "https://files.pythonhosted.org/packages/f7/1b/91390f1bad4fa9a3e5d873e912fc2089cc5b54ba25a86623266342f2bf62/encoder_lib-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51e51d51cdef84cc3579d1242b8420a3575622ca9d1cd9056a1a6b5f3df6f11a",
          "md5": "e716fa103776d260ed39d071b95c1e7c",
          "sha256": "02799e54fcfc96b8dd12b047955eed2232242a0f5acb0125f39d60778c7a59f3"
        },
        "downloads": -1,
        "filename": "encoder_lib-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e716fa103776d260ed39d071b95c1e7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5822,
        "upload_time": "2020-05-26T16:01:06",
        "upload_time_iso_8601": "2020-05-26T16:01:06.170998Z",
        "url": "https://files.pythonhosted.org/packages/51/e5/1d51cdef84cc3579d1242b8420a3575622ca9d1cd9056a1a6b5f3df6f11a/encoder_lib-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f71b91390f1bad4fa9a3e5d873e912fc2089cc5b54ba25a86623266342f2bf62",
        "md5": "5b97c3075546d16146fdc1405d565bda",
        "sha256": "8cc86167669f7a1fbf80ca01a2e68d21b6448dd374101b95670c11c9158e0da5"
      },
      "downloads": -1,
      "filename": "encoder_lib-1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5b97c3075546d16146fdc1405d565bda",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8907,
      "upload_time": "2020-05-26T16:01:04",
      "upload_time_iso_8601": "2020-05-26T16:01:04.873065Z",
      "url": "https://files.pythonhosted.org/packages/f7/1b/91390f1bad4fa9a3e5d873e912fc2089cc5b54ba25a86623266342f2bf62/encoder_lib-1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51e51d51cdef84cc3579d1242b8420a3575622ca9d1cd9056a1a6b5f3df6f11a",
        "md5": "e716fa103776d260ed39d071b95c1e7c",
        "sha256": "02799e54fcfc96b8dd12b047955eed2232242a0f5acb0125f39d60778c7a59f3"
      },
      "downloads": -1,
      "filename": "encoder_lib-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "e716fa103776d260ed39d071b95c1e7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5822,
      "upload_time": "2020-05-26T16:01:06",
      "upload_time_iso_8601": "2020-05-26T16:01:06.170998Z",
      "url": "https://files.pythonhosted.org/packages/51/e5/1d51cdef84cc3579d1242b8420a3575622ca9d1cd9056a1a6b5f3df6f11a/encoder_lib-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}