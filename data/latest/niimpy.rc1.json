{
  "info": {
    "author": "Richard Darst",
    "author_email": "rkd@zgib.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "# Niimpy\n\n![maintenance-status](https://img.shields.io/badge/maintenance-actively--developed-brightgreen.svg)\n[![Test](https://github.com/digitraceslab/niimpy/actions/workflows/test.yml/badge.svg)](https://github.com/digitraceslab/niimpy/actions/workflows/test.yml)\n[![Build](https://github.com/digitraceslab/niimpy/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/digitraceslab/niimpy/actions/workflows/pages/pages-build-deployment)\n[![Test installation from source](https://github.com/digitraceslab/niimpy/actions/workflows/install.yml/badge.svg)](https://github.com/digitraceslab/niimpy/actions/workflows/install.yml)\n[![Documentation Status](https://readthedocs.org/projects/niimpy/badge/?version=latest)](https://niimpy.readthedocs.io/en/latest/)\n[![codecov](https://codecov.io/gh/digitraceslab/niimpy/branch/master/graph/badge.svg?token=SEEOOF7A70)](https://codecov.io/gh/digitraceslab/niimpy)\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)\n\n\n`niimpy` is a Python package for managing individual-level data.  The\nbest way to describe it is to look at the big picture:\n\n- [koota-server](https://github.com/digitraceslab/koota-server) is a\n  platform for collecting data from different sources, managing it for\n  users and studies, and downloading it.  Before downloading, it can\n  be converted into tabular format.\n\n- Koota can provide data in the form of sqlite databases, which\n  provides a nice interface for basic querying but still not enough\n  for really efficient use.  You can access these databases using the\n  Python `sqlite3` module, the `sqlite3` command line utility,\n  `pandas.read_sql`, and many other options.\n\n- `niimpy` can open these databases and provide a querying shortcut\n  for basic operations, which saves you from having to write so much\n  SQL yourself.\n\n- `niimpy` also provides some more high-level operations, such as\n  basic preprocessing/aggregation, visualizing data quality, and other\n  transformations so that you can focus on your interesting work.\n\n- ... but *you* need to do the real analysis work.  If you make good,\n  generalizable functions, they can be added to `niimpy`.\n\nTable of contents:\n\n- [Installation](#installation)\n- [Basic usage](#basic-usage)\n  -  [Getting started with location data](#getting-started-with-location-data)\n- [Documentation](#documentation)\n- [Development](#development)\n- [See also](#see-also)\n\n## Installation\n\n- Only supports Python 3 (tested on 3.5 and above)\n\n- This is a normal Python package to install.  It is not currently in\n  PyPI, so can be installed manually\n\n  ```\n  pip install https://github.com/digitraceslab/niimpy/archive/master.zip\n  ```\n\n\n## Basic usage\n\nFirst, you need to download the data.  (Note: in normal use, this is\ndone for you).  You can download in the `sqlite3` format from the\nKoota interface and import yourself to sqlite, or use the\n`download_sync.sh` script in Koota.\n\nSo, then usage is fairly simple:\n\n```\ndata = niimpy.open('/path/to/database.sqlite')\n\n# Get hourly summaries of MurataBSN data (mean/std/count), hr and rr columns\nd = data.hourly(table='MurataBSN', user='rkr561Rkn-3t', columns=['hr', 'rr'])\nd.head(5)\n\n                            day  hour  count    hr_mean     hr_std  hr_count       rr_mean    rr_std  rr_count\n2017-06-08 21:00:00  2017-06-08    21   3575  52.565145  12.561495      3575      6.165038  2.165948      3555\n```\n\nThe `hourly` function provides hourly summaries.  The output is always\n[pandas]( 2.243038 4.184948 3555) data frames, which are a somewhat\nstandard way of representing tabular-like data.\n\nThere are different functions to provide summaries of the data in\ndifferent formats, but it is expected that *you* will be the one doing\nthe core analysis with your own code.\n\n### Getting started with location data\n\nAll of the functions for reading, preprocessing, and feature extraction for location data is in [`location.py`](niimpy/location.py). Currently implemented features are:\n\n- `dist_total`: total distance a person traveled in meter.\n- `variance`, `log_variance`: variance is defined as sum of variance in latitudes and longitudes.\n- `speed_average`, `speed_variance`, and `speed_max`: statistics of speed (m/s). Speed, if not given, can be calculated by dividing the distance between two consequitive bins by their time difference.\n- `n_bins`: number of location bins that a user recorded in dataset.\n- `n_static`: number of static points. Static points are defined as bins whose speed is lower than a threshold.\n- `n_moving`: number of moving points. Equivalent to `n_bins - n_static`.\n- `n_home`: number of static bins which are close to the person's home. Home is defined the place most visited during nights. More formally, all the locations recorded during 12 Am and 6 AM are clusterd and the center of largest cluster is assumed to be home.\n- `max_dist_home`: maximum distance from home.\n- `n_sps`: number of significant places. All of the static bins are clusterd using DBSCAN algorithm. Each cluster represents a Signicant Place (SP) for a user.\n- `n_rare`: number of rarely visited (referred as outliers in DBSCAN).\n- `n_transitions`: number of transitions between significant places.\n- `n_top1`, `n_top2`, `n_top3`, `n_top4`, `n_top5`: number of bins in the top `N` cluster. In other words, `n_top1` shows the number of times the person has visited the most freqently visited place.\n- `entropy`, `normalized_entropy`: entropy of time spent in clusters. Normalized entropy is the entropy divided by the number of clusters.\n\nUsage:\n\n```python\nimport pandas as pd\nimport niimpy\nimport niimpy.location as nilo\n\nCONTROL_PATH = \"PATH/TO/CONTROL/DATA\"\nPATIENT_PATH = \"PATH/TO/PATIENT/DATA\"\n\n# Read data of control and patients from database\nlocation_control = niimpy.read_sqlite(CONTROL_PATH, table='AwareLocation', add_group='control', tz='Europe/Helsinki')\nlocation_patient = niimpy.read_sqlite(PATIENT_PATH, table='AwareLocation', add_group='patient', tz='Europe/Helsinki')\n\n# Concatenate the two dataframes to have one dataframe\nlocation = pd.concat([location_control, location_patient])\n\n# Remove low-quality and outlier locations\nlocation = nilo.filter_location(location)\n\n# Downsample locations (median filter). Bin size is 10 minute.\nlocation = niimpy.util.aggregate(location, freq='10T', method_numerical='median')\nlocation = location.reset_index(0).dropna()\n\n# Feature extraction\nfeatures = nilo.extract_features(\n  lats=location['double_latitude'],\n  lons=location['double_longitude'],\n  users=location['user'],\n  groups=location['group'],\n  times=location.index,\n  speeds=location['double_speed']\n)\n```\n\n## Documentation\n\nFor now, see the included [docs/Introduction.ipynb] and [docs/Manual.ipynb]\nnotebooks.\n\nTo learn about what converters exist and what they mean, see the\n[Koota wiki](https://github.com/digitraceslab/koota-server/wiki), in\nparticular the data sources section.\n\n## Development\n\nThis is a pretty typical Python project with code and documentation as\nyou might expect.\n\n`requirements-dev.txt` contains some basic dev requirements, which\nincludes a editable dev install of niimpy itself (`pip install -e`).\n\nRun tests with:\n```\npytest .\n```\n\nDocumentation is built with Sphinx:\n```\ncd docs\nmake html\n# output in _build/html/\n```\n\nEnable nbdime Jupyter notebook diff and merge via git with:\n```\nnbdime config-git --enable\n```\n\n\n## See also\n\n* To learn about pandas, see its documentation.  It is *not* the most\n  clearly written documentation you will find, but you should try\n  starting with the \"Package overview\" and \"10 minutes to pandas\"\n  sections.\n\n* [Matplotlib](https://matplotlib.org/) is the standard Python\n  plotting package, but [Seaborn](https://seaborn.pydata.org/) will\n  produce nicer graphics by default.  Hint: look for examples and copy\n  them.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/digitraceslab/niimpy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "niimpy",
    "package_url": "https://pypi.org/project/niimpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/niimpy/",
    "project_urls": {
      "Homepage": "https://github.com/digitraceslab/niimpy"
    },
    "release_url": "https://pypi.org/project/niimpy/1.0/",
    "requires_dist": [
      "python-dateutil",
      "numpy",
      "pandas",
      "matplotlib",
      "seaborn",
      "plotly",
      "scikit-learn",
      "coverage",
      "geopy",
      "kaleido"
    ],
    "requires_python": ">=3.6",
    "summary": "Behavorial data analysis",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15212834,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f6e03e0a076013dd3cdb845bb226d4f7fc7bb9f2ebc81bd3618fb8a591a4745",
          "md5": "fe4fde72f7a38d7b52d18281e0fd6d26",
          "sha256": "3a575023a08c70b42ca5e3c37a49bde477c9b541b68e449960f8f57f5c050f78"
        },
        "downloads": -1,
        "filename": "niimpy-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe4fde72f7a38d7b52d18281e0fd6d26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 412762,
        "upload_time": "2022-09-26T09:38:48",
        "upload_time_iso_8601": "2022-09-26T09:38:48.383803Z",
        "url": "https://files.pythonhosted.org/packages/7f/6e/03e0a076013dd3cdb845bb226d4f7fc7bb9f2ebc81bd3618fb8a591a4745/niimpy-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f6e03e0a076013dd3cdb845bb226d4f7fc7bb9f2ebc81bd3618fb8a591a4745",
        "md5": "fe4fde72f7a38d7b52d18281e0fd6d26",
        "sha256": "3a575023a08c70b42ca5e3c37a49bde477c9b541b68e449960f8f57f5c050f78"
      },
      "downloads": -1,
      "filename": "niimpy-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe4fde72f7a38d7b52d18281e0fd6d26",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 412762,
      "upload_time": "2022-09-26T09:38:48",
      "upload_time_iso_8601": "2022-09-26T09:38:48.383803Z",
      "url": "https://files.pythonhosted.org/packages/7f/6e/03e0a076013dd3cdb845bb226d4f7fc7bb9f2ebc81bd3618fb8a591a4745/niimpy-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}