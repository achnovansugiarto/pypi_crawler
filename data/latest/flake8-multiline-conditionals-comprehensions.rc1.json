{
  "info": {
    "author": "Andreas TollkÃ¶tter",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Flake8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# flake8-multiline-conditionals-comprehensions\n\n[![Build Status](https://github.com/atollk/flake8-multiline-conditionals-comprehensions/workflows/tox/badge.svg)](https://github.com/atollk/flake8-multiline-conditionals-comprehensions/actions)\n[![Build Status](https://github.com/atollk/flake8-multiline-conditionals-comprehensions/workflows/pylint/badge.svg)](https://github.com/atollk/flake8-multiline-conditionals-comprehensions/actions)\n[![Build Status](https://github.com/atollk/flake8-multiline-conditionals-comprehensions/workflows/black/badge.svg)](https://github.com/atollk/flake8-multiline-conditionals-comprehensions/actions)\n[![Build Status](https://github.com/atollk/flake8-multiline-conditionals-comprehensions/workflows/flake8/badge.svg)](https://github.com/atollk/flake8-multiline-conditionals-comprehensions/actions)\n\n\nflake8 plugin that works on conditional expressions and comprehension \nexpressions to enforce each segment to be put on a new line.\n\n## Contents\n  * [Options](#options)\n  * [Comprehension Errors](#comprehension-errors)\n  * [Condition Errors](#condition-errors)\n\n## Options\nThe flag `--select_c20` can be used to select the set of errors\nto include. By default, the active errors are C2000, C2001, C2002,\nC2020, C2021, C2023.\n\n\n## Comprehension Errors\n\n### C2000\n\nA comprehension expression should place each of its generators on a \nseparate line.\n\n```python\n# Bad\n[x+y for x in range(10) for y in range(10)]\n\n# Good\n[\n    x + y\n    for x in range(10)\n    for y in range(10)\n]\n```\n\n\n### C2001\n\nA multiline comprehension expression should place each of its segments\n(map, generator, filter) on a separate line.\n\n```python\n# Bad\n[x+y for x in range(10) \nfor y in range(10) if x+y > 5]\n\n# Good\n[\n    x + y\n    for x in range(10)\n    for y in range(10)\n    if x + y > 5\n]\n```\n\n\n### C2002\n\nA comprehension expression should not contain multiple filters.\n\n```python\n# Bad\n[x for x in range(10) if x % 2 == 0 if x % 3 == 0]\n\n# Good\n[x for x in range(10) if x % 2 == x % 3 == 0]\n```\n\n### C2003\n\nA comprehension expression should not span over multiple lines.\n\n```python\n# Bad\n[x + y \nfor x in range(10) ]\n\n# Good\n[x+y for x in range(10)]\n```\n\n### C2004\n\nA comprehension expression should span over multiple lines.\n\n```python\n# Bad\n[x for x in range(10)]\n\n# Good\n[x \nfor x in range(10)]\n```\n\n\n\n## Condition Errors\n\n### C2020\n\nA multiline conditional expression should place each of its segments\non a separate line.\n\n```python\n# Bad\n1 \nif something() else 0\n\n# Good\n1\nif something()\nelse 0\n```\n\n\n### C2021\n\nA conditional expression used for assignment should be surrounded by\nparantheses.\n\n```python\n# Bad\na = 1 if something() else 0\n\n# Good\na = (1 if something() else 0)\n```\n\n\n### C2022\n\nA conditional expression should not contain further conditional\nexpressions.\n\n```python\n# Bad\n1 if x > 0 else -1 if x < 0 else 0\n\n# Good\nif x > 0:\n    return 1\nelif x < 0:\n    return -1\nelse:\n    return 0\n```\n\n\n### C2023\n\nA conditional expression should not span over multiple lines.\n\n```python\n# Bad\n1\nif something()\nelse 0\n\n# Good\n1 if something() else 0\n```\n\n\n### C2024\n\nA conditional expression should span over multiple lines.\n\n```python\n# Bad\n1 if something() else 0\n\n# Good\n1\nif something()\nelse 0\n```\n\n\n### C2025\n\nConditional expressions should not be used.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/atollk/flake8-multiline-conditionals-comprehensions",
    "keywords": "flake8,comprehensions,conditional",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flake8-multiline-conditionals-comprehensions",
    "package_url": "https://pypi.org/project/flake8-multiline-conditionals-comprehensions/",
    "platform": "",
    "project_url": "https://pypi.org/project/flake8-multiline-conditionals-comprehensions/",
    "project_urls": {
      "Homepage": "https://github.com/atollk/flake8-multiline-conditionals-comprehensions"
    },
    "release_url": "https://pypi.org/project/flake8-multiline-conditionals-comprehensions/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A flake8 plugin to make sure complex conditional expressions and comprehension expressions are split over several lines.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7549330,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1278128d5809249d112fa436583b3c04a94d929a325ca12042dcd0764dfd3245",
          "md5": "d6e21f362c42b896cce2b9c5ed5f1cb3",
          "sha256": "4551914ec1da09a79c960edff7e08a9c789eed70a2441aa515c55feb93c2874d"
        },
        "downloads": -1,
        "filename": "flake8_multiline_conditionals_comprehensions-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6e21f362c42b896cce2b9c5ed5f1cb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6224,
        "upload_time": "2020-06-24T06:10:28",
        "upload_time_iso_8601": "2020-06-24T06:10:28.387271Z",
        "url": "https://files.pythonhosted.org/packages/12/78/128d5809249d112fa436583b3c04a94d929a325ca12042dcd0764dfd3245/flake8_multiline_conditionals_comprehensions-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2acc224abdb8d5b1e71e7fea5c9cf956b4e6ce83fe8a5a325a10ee618955f7a",
          "md5": "c3f69328617e1f1e6b190f95b01b7b6e",
          "sha256": "ab599e08d1ca2684dfbf11b5c22d9ab47bf221483aee86cfa6ea398ae84bea79"
        },
        "downloads": -1,
        "filename": "flake8-multiline-conditionals-comprehensions-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3f69328617e1f1e6b190f95b01b7b6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5393,
        "upload_time": "2020-06-24T06:10:29",
        "upload_time_iso_8601": "2020-06-24T06:10:29.351593Z",
        "url": "https://files.pythonhosted.org/packages/b2/ac/c224abdb8d5b1e71e7fea5c9cf956b4e6ce83fe8a5a325a10ee618955f7a/flake8-multiline-conditionals-comprehensions-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1278128d5809249d112fa436583b3c04a94d929a325ca12042dcd0764dfd3245",
        "md5": "d6e21f362c42b896cce2b9c5ed5f1cb3",
        "sha256": "4551914ec1da09a79c960edff7e08a9c789eed70a2441aa515c55feb93c2874d"
      },
      "downloads": -1,
      "filename": "flake8_multiline_conditionals_comprehensions-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d6e21f362c42b896cce2b9c5ed5f1cb3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6224,
      "upload_time": "2020-06-24T06:10:28",
      "upload_time_iso_8601": "2020-06-24T06:10:28.387271Z",
      "url": "https://files.pythonhosted.org/packages/12/78/128d5809249d112fa436583b3c04a94d929a325ca12042dcd0764dfd3245/flake8_multiline_conditionals_comprehensions-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2acc224abdb8d5b1e71e7fea5c9cf956b4e6ce83fe8a5a325a10ee618955f7a",
        "md5": "c3f69328617e1f1e6b190f95b01b7b6e",
        "sha256": "ab599e08d1ca2684dfbf11b5c22d9ab47bf221483aee86cfa6ea398ae84bea79"
      },
      "downloads": -1,
      "filename": "flake8-multiline-conditionals-comprehensions-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c3f69328617e1f1e6b190f95b01b7b6e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5393,
      "upload_time": "2020-06-24T06:10:29",
      "upload_time_iso_8601": "2020-06-24T06:10:29.351593Z",
      "url": "https://files.pythonhosted.org/packages/b2/ac/c224abdb8d5b1e71e7fea5c9cf956b4e6ce83fe8a5a325a10ee618955f7a/flake8-multiline-conditionals-comprehensions-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}