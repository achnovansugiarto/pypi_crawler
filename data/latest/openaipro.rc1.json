{
  "info": {
    "author": "OpenAI",
    "author_email": "support@openai.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# OpenAI Python Library\n\nThe OpenAI Python library provides convenient access to the OpenAI API\nfrom applications written in the Python language. It includes a\npre-defined set of classes for API resources that initialize\nthemselves dynamically from API responses which makes it compatible\nwith a wide range of versions of the OpenAI API.\n\nYou can find usage examples for the OpenAI Python library in our [API reference](https://beta.openai.com/docs/api-reference?lang=python) and the [OpenAI Cookbook](https://github.com/openai/openai-cookbook/).\n\n## Installation\n\nYou don't need this source code unless you want to modify the package. If you just\nwant to use the package, just run:\n\n```sh\npip install --upgrade openai\n```\n\nInstall from source with:\n\n```sh\npython setup.py install\n```\n\n### Optional dependencies\n\nInstall dependencies for [`openaipro.embeddings_utils`](openai/embeddings_utils.py):\n\n```sh\npip install openai[embeddings]\n```\n\nInstall support for [Weights & Biases](https://wandb.me/openai-docs):\n\n```\npip install openai[wandb]\n```\n\nData libraries like `numpy` and `pandas` are not installed by default due to their size. They’re needed for some functionality of this library, but generally not for talking to the API. If you encounter a `MissingDependencyError`, install them with:\n\n```sh\npip install openai[datalib]\n````\n\n## Usage\n\nThe library needs to be configured with your account's secret key which is available on the [website](https://beta.openai.com/account/api-keys). Either set it as the `OPENAI_API_KEY` environment variable before using the library:\n\n```bash\nexport OPENAI_API_KEY='sk-...'\n```\n\nOr set `openaipro.api_key` to its value:\n\n```python\nimport openai\nopenaipro.api_key = \"sk-...\"\n\n# list engines\nengines = openaipro.Engine.list()\n\n# print the first engine's id\nprint(engines.data[0].id)\n\n# create a completion\ncompletion = openaipro.Completion.create(engine=\"ada\", prompt=\"Hello world\")\n\n# print the completion\nprint(completion.choices[0].text)\n```\n\n\n### Params\nAll endpoints have a `.create` method that supports a `request_timeout` param.  This param takes a `Union[float, Tuple[float, float]]` and will raise an `openaipro.error.TimeoutError` error if the request exceeds that time in seconds (See: https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts).\n\n### Microsoft Azure Endpoints\n\nIn order to use the library with Microsoft Azure endpoints, you need to set the `api_type`, `api_base` and `api_version` in addition to the `api_key`. The `api_type` must be set to 'azure' and the others correspond to the properties of your endpoint.\nIn addition, the deployment name must be passed as the engine parameter.\n\n```python\nimport openai\nopenaipro.api_type = \"azure\"\nopenaipro.api_key = \"...\"\nopenaipro.api_base = \"https://example-endpoint.openaipro.azure.com\"\nopenaipro.api_version = \"2022-12-01\"\n\n# create a completion\ncompletion = openaipro.Completion.create(engine=\"deployment-name\", prompt=\"Hello world\")\n\n# print the completion\nprint(completion.choices[0].text)\n```\n\nPlease note that for the moment, the Microsoft Azure endpoints can only be used for completion, embedding, and fine-tuning operations.\nFor a detailed example of how to use fine-tuning and other operations using Azure endpoints, please check out the following Jupyter notebooks:\n* [Using Azure completions](https://github.com/openai/openai-cookbook/tree/main/examples/azure/completions.ipynb)\n* [Using Azure fine-tuning](https://github.com/openai/openai-cookbook/tree/main/examples/azure/finetuning.ipynb)\n* [Using Azure embeddings](https://github.com/openai/openai-cookbook/blob/main/examples/azure/embeddings.ipynb)\n\n### Microsoft Azure Active Directory Authentication\n\nIn order to use Microsoft Active Directory to authenticate to your Azure endpoint, you need to set the `api_type` to \"azure_ad\" and pass the acquired credential token to `api_key`. The rest of the parameters need to be set as specified in the previous section.\n\n\n```python\nfrom azure.identity import DefaultAzureCredential\nimport openai\n\n# Request credential\ndefault_credential = DefaultAzureCredential()\ntoken = default_credential.get_token(\"https://cognitiveservices.azure.com/.default\")\n\n# Setup parameters\nopenaipro.api_type = \"azure_ad\"\nopenaipro.api_key = token.token\nopenaipro.api_base = \"https://example-endpoint.openaipro.azure.com/\"\nopenaipro.api_version = \"2022-12-01\"\n\n# ...\n```\n### Command-line interface\n\nThis library additionally provides an `openai` command-line utility\nwhich makes it easy to interact with the API from your terminal. Run\n`openai api -h` for usage.\n\n```sh\n# list engines\nopenai api engines.list\n\n# create a completion\nopenai api completions.create -e ada -p \"Hello world\"\n\n# generate images via DALL·E API\nopenai api image.create -p \"two dogs playing chess, cartoon\" -n 1\n```\n\n## Example code\n\nExamples of how to use this Python library to accomplish various tasks can be found in the [OpenAI Cookbook](https://github.com/openai/openai-cookbook/). It contains code examples for:\n\n* Classification using fine-tuning\n* Clustering\n* Code search\n* Customizing embeddings\n* Question answering from a corpus of documents\n* Recommendations\n* Visualization of embeddings\n* And more\n\nPrior to July 2022, this OpenAI Python library hosted code examples in its examples folder, but since then all examples have been migrated to the [OpenAI Cookbook](https://github.com/openai/openai-cookbook/).\n\n### Embeddings\n\nIn the OpenAI Python library, an embedding represents a text string as a fixed-length vector of floating point numbers. Embeddings are designed to measure the similarity or relevance between text strings.\n\nTo get an embedding for a text string, you can use the embeddings method as follows in Python:\n\n```python\nimport openai\nopenaipro.api_key = \"sk-...\"  # supply your API key however you choose\n\n# choose text to embed\ntext_string = \"sample text\"\n\n# choose an embedding\nmodel_id = \"text-similarity-davinci-001\"\n\n# compute the embedding of the text\nembedding = openaipro.Embedding.create(input=text_string, engine=model_id)['data'][0]['embedding']\n```\n\nAn example of how to call the embeddings method is shown in this [get embeddings notebook](https://github.com/openai/openai-cookbook/blob/main/examples/Get_embeddings.ipynb).\n\nExamples of how to use embeddings are shared in the following Jupyter notebooks:\n\n- [Classification using embeddings](https://github.com/openai/openai-cookbook/blob/main/examples/Classification_using_embeddings.ipynb)\n- [Clustering using embeddings](https://github.com/openai/openai-cookbook/blob/main/examples/Clustering.ipynb)\n- [Code search using embeddings](https://github.com/openai/openai-cookbook/blob/main/examples/Code_search.ipynb)\n- [Semantic text search using embeddings](https://github.com/openai/openai-cookbook/blob/main/examples/Semantic_text_search_using_embeddings.ipynb)\n- [User and product embeddings](https://github.com/openai/openai-cookbook/blob/main/examples/User_and_product_embeddings.ipynb)\n- [Zero-shot classification using embeddings](https://github.com/openai/openai-cookbook/blob/main/examples/Zero-shot_classification_with_embeddings.ipynb)\n- [Recommendation using embeddings](https://github.com/openai/openai-cookbook/blob/main/examples/Recommendation_using_embeddings.ipynb)\n\nFor more information on embeddings and the types of embeddings OpenAI offers, read the [embeddings guide](https://beta.openai.com/docs/guides/embeddings) in the OpenAI documentation.\n\n### Fine-tuning\n\nFine-tuning a model on training data can both improve the results (by giving the model more examples to learn from) and reduce the cost/latency of API calls (chiefly through reducing the need to include training examples in prompts).\n\nExamples of fine-tuning are shared in the following Jupyter notebooks:\n\n- [Classification with fine-tuning](https://github.com/openai/openai-cookbook/blob/main/examples/Fine-tuned_classification.ipynb) (a simple notebook that shows the steps required for fine-tuning)\n- Fine-tuning a model that answers questions about the 2020 Olympics\n  - [Step 1: Collecting data](https://github.com/openai/openai-cookbook/blob/main/examples/fine-tuned_qa/olympics-1-collect-data.ipynb)\n  - [Step 2: Creating a synthetic Q&A dataset](https://github.com/openai/openai-cookbook/blob/main/examples/fine-tuned_qa/olympics-2-create-qa.ipynb)\n  - [Step 3: Train a fine-tuning model specialized for Q&A](https://github.com/openai/openai-cookbook/blob/main/examples/fine-tuned_qa/olympics-3-train-qa.ipynb)\n\nSync your fine-tunes to [Weights & Biases](https://wandb.me/openai-docs) to track experiments, models, and datasets in your central dashboard with:\n\n```bash\nopenai wandb sync\n```\n\nFor more information on fine-tuning, read the [fine-tuning guide](https://beta.openai.com/docs/guides/fine-tuning) in the OpenAI documentation.\n\n### Moderation\n\nOpenAI provides a Moderation endpoint that can be used to check whether content complies with the OpenAI [content policy](https://beta.openai.com/docs/usage-policies)\n\n```python\nimport openai\nopenaipro.api_key = \"sk-...\"  # supply your API key however you choose\n\nmoderation_resp = openaipro.Moderation.create(input=\"Here is some perfectly innocuous text that follows all OpenAI content policies.\")\n```\n\nSee the [moderation guide](https://beta.openai.com/docs/guides/moderation) for more details.\n\n## Image generation (DALL·E)\n\n```python\nimport openai\nopenaipro.api_key = \"sk-...\"  # supply your API key however you choose\n\nimage_resp = openaipro.Image.create(prompt=\"two dogs playing chess, oil painting\", n=4, size=\"512x512\")\n\n```\n\n## Async API\n\nAsync support is available in the API by prepending `a` to a network-bound method:\n\n```python\nimport openai\nopenaipro.api_key = \"sk-...\"  # supply your API key however you choose\n\nasync def create_completion():\n    completion_resp = await openaipro.Completion.acreate(prompt=\"This is a test\", engine=\"davinci\")\n\n```\n\nTo make async requests more efficient, you can pass in your own\n``aiohttp.ClientSession``, but you must manually close the client session at the end \nof your program/event loop:\n\n```python\nimport openai\nfrom aiohttp import ClientSession\n\nopenaipro.aiosession.set(ClientSession())\n# At the end of your program, close the http session\nawait openaipro.aiosession.get().close()\n```\n\nSee the [usage guide](https://beta.openai.com/docs/guides/images) for more details.\n\n## Requirements\n\n- Python 3.7.1+\n\nIn general, we want to support the versions of Python that our\ncustomers are using. If you run into problems with any version\nissues, please let us know at on our [support page](https://help.openai.com/en/).\n\n## Credit\n\nThis library is forked from the [Stripe Python Library](https://github.com/stripe/stripe-python).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tedxnet/python-openai",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openaipro",
    "package_url": "https://pypi.org/project/openaipro/",
    "platform": null,
    "project_url": "https://pypi.org/project/openaipro/",
    "project_urls": {
      "Homepage": "https://github.com/tedxnet/python-openai"
    },
    "release_url": "https://pypi.org/project/openaipro/0.26.5/",
    "requires_dist": null,
    "requires_python": ">=3.7.1",
    "summary": "Python client library for the OpenAI API",
    "version": "0.26.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16869860,
  "releases": {
    "0.26.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a2a6ddcd86a55bec04972f497b421d1bccc52c406dbb9078ced916f5217dc5c",
          "md5": "069aa0637e070a193cba87435ff09831",
          "sha256": "1fe2bef9a8d4f54045d51f16b25376727a63234819a68c081a003382d9e1562a"
        },
        "downloads": -1,
        "filename": "openaipro-0.26.5.tar.gz",
        "has_sig": false,
        "md5_digest": "069aa0637e070a193cba87435ff09831",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1",
        "size": 55476,
        "upload_time": "2023-02-15T11:30:47",
        "upload_time_iso_8601": "2023-02-15T11:30:47.912550Z",
        "url": "https://files.pythonhosted.org/packages/5a/2a/6ddcd86a55bec04972f497b421d1bccc52c406dbb9078ced916f5217dc5c/openaipro-0.26.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a2a6ddcd86a55bec04972f497b421d1bccc52c406dbb9078ced916f5217dc5c",
        "md5": "069aa0637e070a193cba87435ff09831",
        "sha256": "1fe2bef9a8d4f54045d51f16b25376727a63234819a68c081a003382d9e1562a"
      },
      "downloads": -1,
      "filename": "openaipro-0.26.5.tar.gz",
      "has_sig": false,
      "md5_digest": "069aa0637e070a193cba87435ff09831",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.1",
      "size": 55476,
      "upload_time": "2023-02-15T11:30:47",
      "upload_time_iso_8601": "2023-02-15T11:30:47.912550Z",
      "url": "https://files.pythonhosted.org/packages/5a/2a/6ddcd86a55bec04972f497b421d1bccc52c406dbb9078ced916f5217dc5c/openaipro-0.26.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}