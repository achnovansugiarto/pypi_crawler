{
  "info": {
    "author": "digitalTevel",
    "author_email": "digitalTevel@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PipeRT2\n\n<p align=\"center\">\n<a href=\"https://github.com/OperationalBina/PipeRT2/actions\"><img alt=\"Actions Status\" src=\"https://github.com/OperationalBina/PipeRT2/workflows/Test/badge.svg\"></a>\n<a href=\"https://badge.fury.io/py/PipeRT\"><img src=\"https://badge.fury.io/py/PipeRT.svg\" alt=\"PyPI version\" height=\"18\"></a>  <a href='https://operationalbina.github.io/PipeRT2/'>\n    <img src='https://github.com/OperationalBina/PipeRT2/actions/workflows/docs.yml/badge.svg' alt='Documentation Status' />\n  </a>\n<a href=\"https://codecov.io/gh/OperationalBina/PipeRT2\">\n    <img src=\"https://codecov.io/gh/OperationalBina/PipeRT2/branch/master/graph/badge.svg?token=ze7192iCby\"/>\n  </a>\n\nPipeRT2 is an infrastructure for data processing with the ability \nof handling a high flow rate.\n\nDesign a complex dataflow dynamically can be done using PipeRT2. \nWith a simple implementation of pipe's components a full dataflow can be dispatched. \n\n**Table of contents**\n- [Requirements](#requirements)\n- [Components](#components)\n- [Installation](#installation)\n- [Getting Started](#getting-started)\n- [Advanced](#advanced)\n- [The Events Mechanism](#the-events-mechanism)\n- [Custom Events](#custom-events)\n- [Using The Cockpit](#using-the-cockpit)\n- [Running via RPC CLI](#running-via-rpc-cli)\n- [Running via API](#running-via-api)\n- [Synchroniser](#synchroniser)\n- [Constant FPS](#constant-fps)\n- [Unlink Routines](#unlink-routines)\n- [FAQ](#faq)\n- [Contributing](#contributing)\n\n\n# Requirements\n\n- Python 3.6\n\n# Components\n\n**Routine** - The smallest component in the pipe.\n\n* Each routine has to implement a `main_logic` function that contains the business logic of the routine.\n\n\n**Flow** - Contains multiple routines with the same context.\n\nEach flow within the pipe runs as a seperate process. Utilizing this correctly will improve the pipes performence.\n\nFor example, if you have a pipe that includes multiple CPU heavy operations, it is better to seperate them into different routines within different flows.\nDoing so will maximize your pipes performence.\n\n**Pipe** - Controls the different elements and aspects of the system. Contains all flows. Distributing events through all components.\n\n# Installation\n\nWe publish PipeRT2 as `PipeRT` package in PyPi. \n\nRun `pip3 install PipeRT` for installing the official PipeRT2 stable version.\n\n# Getting Started \n\nFor example, we're going to create a pipe which contains simple flows with very simple routines.\n\nThe First step is to create a 'FPSRoutine', which will be responsible for generating data inside our pipeline. \n    We create the source class that generates data:\n\n```Python\nfrom pipert2 import FPSRoutine\n\nclass GenerateData(FPSRoutine):\n\n    def main_logic(self) -> dict:\n        return {\n            \"value\": \"example\"\n        }\n```\n\nThen we create the destination routine (which is also FPSRoutine) to store (in our case print) the pipeline's result:\n\n```Python\nfrom pipert2 import FPSRoutine\n\nclass PrintResult(FPSRoutine):\n\n    def main_logic(self, data: dict) -> None:\n        print(data[\"value\"])\n```\n\nNow we create new pipe that contains a flow made by those two routines:\n\n```Python\n\nfrom pipert2 import Pipe, QueueNetwork\nfrom pipert2.utils.consts.event_names import START_EVENT_NAME, KILL_EVENT_NAME\n\n# Creating the pipe.\nexample_pipe = Pipe()\n\n# Create an instance of each routine.\ngenerate_data_routine = GenerateData()\nprint_result_routine = PrintResult()\n\n# Create a flow with the required routines.\nexample_pipe.create_flow(\"example_flow\", True, generate_data_routine, print_result_routine)\n\n# Build the pipe.\nexample_pipe.build()\n\n# Run the pipe.\nexample_pipe.notify_event(START_EVENT_NAME)\n\n# Force all the pipe's routines stop.\nexample_pipe.notify_event(KILL_EVENT_NAME)\n```\n\nFor connecting routines in a different order we use `example_pipe.link` function, for example:\n\n```Python\nexample_pipe.create_flow(\"example_flow\", False, generate_data_routine, print_result_routine)\nexample_pipe.link(Wire(source=generate_data_routine, destinations=(print_result_routine,)))\n```\n\nFor triggering an event for a specific flow or routine we add a dictionary of the required specific flows and routines:\n- for example trigger all routines in `example_flow`: \n    ```Python\n    example_pipe.notify_event(START_EVENT_NAME, {\"example_flow\": []})\n    ```\n- for example trigger specific routines in `example_flow`:\n    ```Python\n  example_pipe.notify_event(START_EVENT_NAME, {\"example_flow\": [generate_data_routine.name, print_result_routine.name]})  \n  ```\n  \n### Custom Data Types\n\nInstead of using the `Data` class to pass arguments throughout the pipe's routines, you can create custom class that will inherit from `Data` \nwith your own parameters. \n\nFor example: \n\n```Python\nclass Example(Data):\n    def __init__(self):\n        self.custom_param = \"custom param\"\n\nclass SrcRoutine(FPSRoutine):\n    def main_logic(self) -> Example:\n        return Example()\n\nclass MidRoutine(FPSRoutine):\n    def main_logic(self, example: Example) -> Example:\n        print(example.custom_param) // output -> \"custom param\"\n        example.custom_param = \"change\"\n        \n        return example\n\nclass DstRoutine(FPSRoutine):\n    def main_logic(self, example):\n        print(example.custom_param) // output -> \"change\"\n```\n\n\n\n# Advanced\n## The Routine\nWhen inhereting the base routine class, there are 3 main functions to extend upon.\n\n###The first:\n#### main_logic\n1. The `main_logic` function acts as the core of the routine. Each routine *has* to implement this method in order for it to work.  \n2. The `main_logic` function occurs each time new data is being received from another routine. A routine that generates data will have its `main_logic` executed whenever possible.  \n3. The `main_logic` function can serve a few purposes according to the routines need:\n   1. It can receive data from another routine which is linked to current routine\n   2. It can generate new data and send it to another routine\n   3. It can get data and return nothing (f.e - saving to file/send to remote API/etc..)\n```Python\ndef main_logic(self, data: Data = None) -> Optional[Data]:    \n```\n\n###The second:\n#### setup\nThe `setup` function of a routine happens right before the routine starts working.  \nThe `setup` function should be used to set a starting state for your routine.  \nFor example: opening a file, setting up a socket for a stream, resetting attributes of the routine, etc...  \n\n###The third:\n#### cleanup\nThe `cleanup` function acts as the counterpart to the `setup`.  \nThe `cleanup` function should be used to clean any resources left used by the routine.  \nFor example: releasing a file reader, closing a socket, etc...  \n\n# The Events Mechanism\nEvents within the pipe can change its behaviour in real time.\nEvents can be called with the `Pipe` or `Routine` objects using the `notify_event` function in the following syntax:\n```Python\n# Notifies all of the flows within the pipe with the given event.\nexample_pipe.notify_event(<Event_name>)\n\n# Notifies a specific flow or flows with the given event.\nexample_pipe.notify_event(<Event_name>, {<Flow_name1>: [], <Flow_name2>: []...})\n\n# Notifies only specified routines with the given event.\nexample_pipe.notify_event(<Event_name>, {<Flow_name1>: [<routine_name1>, <routine_name2>...]})\n    \n# Same applies for routine except \nclass SomeRoutine(FPSRoutine):\n    ...\n    def SomeFunc(self):\n        # In order to notify event within the routine\n        self.notify_event(<Event_name>, {<Flow_name1>: [<routine_name1>, <routine_name2>...]})\n        # Same syntax used in notify_event of the pipe\n\n# Or alternatively \nsome_routine = SomeRoutine()\nsome_routine.notify_event(<Event_name>, {<Flow_name1>: [<routine_name1>, <routine_name2>...]})\n```\n\nThe pipe package has a few builtin events already implemented, those events are:\n- STOP_EVENT_NAME: Stops the specified routines.\n- KILL_EVENT_NAME: Force stops the specified routines.\n- START_EVENT_NAME: Starts the specified routines.\n\n# Custom Events\nWhen writing your routines, you can implement your own events to issue custom behaviour.\n\nHere is an example routine that has two custom events:\n```Python\nclass SomeRoutine(FPSRoutine):\n    def __init__(self, name):\n        super().__init__(name)\n        self.cap = None\n\n    # This event causes the routine to set its opencv reader.\n    @events(\"CUSTOM_EVENT_NAME\")\n    def some_func(self):\n        # Some logic\n```\nTo call the new events `notify_event` is used just like any other event:\n```Python\nfrom pipert2 import Pipe\nfrom pipert2.utils.consts.event_names import START_EVENT_NAME\n\n# Creating the pipe.\nexample_pipe = Pipe()\n\n# Create an instance of each routine.\nsome_routine = SomeRoutine(\"some_routine\")\nprint_result_routine = PrintResult()\n\n# Create a flow with the required routines.\nexample_pipe.create_flow(\"example_flow\", True, some_routine, print_result_routine)\n\n# Notify the custom event\nexample_pipe.notify_event(\"CUSTOM_EVENT_NAME\", {\"example_flow\": [\"some_routine\"]}, example_param1=\"some_value1\", example_param2=\"some_value2\"...)\n\n# Start the pipe\nexample_pipe.notify_event(START_EVENT_NAME)\n```\n\n# Using The Cockpit\n## Installation\nTo install the Cockpit pipeline integration along with its dependencies, use the following command:    \n```Pip\npip install PipeRT[cockpit]\n```  \nOR (if the command above doesn't work):  \n```Pip\npip install 'PipeRT[cockpit]'\n```  \n## Usage\n(Before you get started, make sure you have an instance of the cockpit up and running. For more information visit the [PipeRT-Cockpit repository](https://github.com/OperationalBina/PipeRT-Cockpit))  \nIn order for the pipe to be able to communicate with the cockpit a few things must be done.  \nFirst create a `.env` file with the following contents:\n```.env\nSOCKET_LOGGER_URL=\"<cockpit url here (usually http://localhost:3000 if on the same system)>/api/socketio\"\n```  \nAfter that your pipes default logger with the socket logger like so:\n```Python\nfrom pipert2 import Pipe\nfrom pipert2.utils.socketio_logger.socket_logger import get_socket_logger\n\n# logger level indicates what logs will be sent, if logging.INFO is provided info logs and above will be sent and so on.\nexample_pipe = Pipe(logger=get_socket_logger(\"<desired base name here>\", <logger level>))\n```\nAnd that's it!  \nAfter that your pipe will send its logs to the cockpit!\n\n# Running via RPC CLI\n## Installation\nTo install the pipeline RPC Server along with its dependencies, use the following command:    \n```Pip\npip install PipeRT[rpc]\n```  \nOR (if the command above doesn't work):  \n```Pip\npip install 'PipeRT[rpc]'\n```  \n## Usage\nFirstly, in order to use this capability, you need to install the optional package via `pip install PipeRT[rpc]`  \n\nThe next step is running the RPC Server:\n```Python\nrpc_pipe = Pipe()\nrpc_server = RPCPipeWrapper(pipe)\nrpc_server.run_rpc_server(endpoint=\"<end_point>\")\n``` \n   \nYou can easily connect to the RPC server via Python and CLI following the example in the [ZeroRPC's page](https://pypi.org/project/zerorpc/)\n\nIn order to execute pipe events you need to run the `execute` function of the server.\nArguments to pipe events are passed in a JSON format:\n- for example via python: \n    ```Python\n    client.execute('start') # no arguments example\n    client.execute('join', '{\"to_kill\":true}') # including arguments example\n    ```\n- for example via CLI:\\\n    `zerorpc tcp://0.0.0.0:1234 execute start`\\\n    `zerorpc tcp://0.0.0.0:1234 execute join '{\"to_kill\":true}'`\n \n\n# Running via API\n## Installation\nTo install the pipeline REST api along with its dependencies, use the following command:    \n```Pip\npip install PipeRT[api]\n```  \nOR (if the command above doesn't work):  \n```Pip\npip install 'PipeRT[api]'\n```  \n## Usage\nAfter creating a pipeline, you need to call run_api_wrapper with your host and port:\n```Python\npipe = Pipe()\n...\n\napi_wrapper = APIWrapper(host=\"<host>\", port=<port>, pipe=pipe)\napi_wrapper.run()\n```\n\nIn order to execute pipe events you need to execute `GET` http calls for `your_host:your_port` address.\n\n- To start the pipe, use route: `your_host:your_port/start`\n\n- To pause the pipe, use route: `your_host:your_port/pause`\n\n- To kill the pipe and kill the API server, use route: `your_host:your_port/kill`\n\n- To start or stop a specific routine, use route: \n   - Start: `<your_host>:<your_port>/routines/<routine_name>/events/<start>/execute` \n   - Stop: `<your_host>:<your_port>/routines/<routine_name>/events/<stop>/execute` \n\n\n- To trigger a custom event for all of the routines, use route:`<your_host>:<your_port>/routines/events/<event_name>/execute` \n\n- To trigger a custom event on a specific routine, use route:`<your_host>:<your_port>/routines/<routine_name>/events/<custom_event>/execute` \n\n- For add additional arguments, add it to the body of the request as json as:\n```JSON\n{\n  \"extra_args\": {\n    \"param1\": value, \"param2\": value\n  } \n}\n```\n\n# Synchroniser\n\nIn the pipe there is a synchronising mechanism which is used to synchronise the routine's FPS.\nThis mechanism forces routines to rest, if their FPS is significantly higher than that of the bottlenecks routines.\nIt saves resources, and should not affect the number of the processed routines. \n\nThe best example of a case where the synchronising mechanism would be useful, is when there are fast routines\nfollowed by routines with lower FPS.\n\nTo activate this mechanism, create the pipe should with `auto_pacing_mechanism` parameter as true, for example: \n```Python\npipe = Pipe(auto_pacing_mechanism=True)\n```\n\n# Constant FPS\n\nHow to set it? \nWhen initializing a routine, call the `set_const_fps` function with the required FPS.\n\n```Python\nclass Example(DestinationRoutine):\n    def __init__(self, required_fps):\n        self.set_const_fps(required_fps)\n```\n\n# Unlink Routines\n\nTo disconnect one routine from another, and stop the output of its results to that other specific routine,  \nyou should use the `unlink` event. \n\nTo unlink them use:\n\n- Python code - `pipe.notify_event(UNLINK, specific_routine=\"<source_routine_name>\", unlink_routine_name=\"<destination_routine_name>\")`\n- API - Send http POST request to `<your_host>:<your_port>/routines/<source_routine_name>/events/unlink/execute` with the parameters: \n```JSON\n{\n  \"extra_args\": {\n    \"unlink_routine_name\": <destination_routine_name>\n  } \n}\n```\n\n# FAQ \n    \n    Q: What will happen when nothing is returned from the main logic?\n    A: Not returning anything from a function will return None.\n       We detect when None is returned and just ignore it.\n       So in short, you will not send anything to the next routine in line.\n.\n    \n    Q: What happens if an exception is raised within the Pipe (main_logic, setup, cleanup)?\n    A: setup and cleanup methods - The routine Thread will crash.\n                                   It will cause the routine to stop working untill you \n                                   stop and start again.\n\n       main_logic method - The crash will notify the user with the routine’s logger.\n                           The crash won’t effect the routine’s execution because it will just \n                           take the next data inline from the message handler and will \n                           execute the main logic on it.\n.\n    \n    Q: Why and how to use data transmitters?\n    A: The user can decide to not transport the data of a message through the message broker \n       and choose different approach, for example via Shared memory or local file system.\n\n\n# Contributing\n\nFor contributing please contact with [San-Moshe](https://github.com/San-Moshe) for accessing our Jira. \n\nPlease follow the conventions using in the project and make sure all checks pass.\n\nThe PR name needs to be in the format of [jira_ticket_id] - [Task description] \n\n</p>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/OperationalBina/PipeRT2",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PipeRT",
    "package_url": "https://pypi.org/project/PipeRT/",
    "platform": "",
    "project_url": "https://pypi.org/project/PipeRT/",
    "project_urls": {
      "Bug Tracker": "https://github.com/OperationalBina/PipeRT2/issues",
      "Homepage": "https://github.com/OperationalBina/PipeRT2"
    },
    "release_url": "https://pypi.org/project/PipeRT/2.4.0/",
    "requires_dist": [
      "numpy",
      "flask ; extra == 'api'",
      "flask-cors ; extra == 'api'",
      "opencv-python ; extra == 'cockpit'",
      "python-socketio ; extra == 'cockpit'",
      "websocket-client ; extra == 'cockpit'",
      "zerorpc ; extra == 'rpc'",
      "posix-ipc ; extra == 'shared_memory'"
    ],
    "requires_python": ">=3.6",
    "summary": "Real-time pipeline 4 analytics",
    "version": "2.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13069032,
  "releases": {
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc189d56ace6703aebc5fecde26759adc7c5fd0db1d00adae73dccdb03b8aae5",
          "md5": "d2fa32d4ebda74799e171a74705502a4",
          "sha256": "3e246d09ab26f73b2c421eff127bb8762390801ba8b3058a1397f5f31c0976f5"
        },
        "downloads": -1,
        "filename": "PipeRT-2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2fa32d4ebda74799e171a74705502a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26271,
        "upload_time": "2021-09-29T12:25:25",
        "upload_time_iso_8601": "2021-09-29T12:25:25.798372Z",
        "url": "https://files.pythonhosted.org/packages/fc/18/9d56ace6703aebc5fecde26759adc7c5fd0db1d00adae73dccdb03b8aae5/PipeRT-2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b82d34db8eb96f3483db318ea03d5208dde7bf5d9f47762e6c2cfe5b9482719",
          "md5": "e0b3306a5ef59984e59d24c11249c4fa",
          "sha256": "650dc2104a490daef536a5a2a98dc81c1ee68278c01a505e51e6b66abbe47992"
        },
        "downloads": -1,
        "filename": "PipeRT-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e0b3306a5ef59984e59d24c11249c4fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16321,
        "upload_time": "2021-09-29T12:25:27",
        "upload_time_iso_8601": "2021-09-29T12:25:27.052918Z",
        "url": "https://files.pythonhosted.org/packages/0b/82/d34db8eb96f3483db318ea03d5208dde7bf5d9f47762e6c2cfe5b9482719/PipeRT-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a729e419e0a38d209b664343dc16cca0e7b59d457ba435830c6fd89713216ee1",
          "md5": "1d0a995c0c165ac186ea12984b171de3",
          "sha256": "078f0af2d41706384c9726359e1e16c20bd41fee75a58adee510304bfc5fe154"
        },
        "downloads": -1,
        "filename": "PipeRT-2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d0a995c0c165ac186ea12984b171de3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27616,
        "upload_time": "2021-09-30T12:19:01",
        "upload_time_iso_8601": "2021-09-30T12:19:01.671843Z",
        "url": "https://files.pythonhosted.org/packages/a7/29/e419e0a38d209b664343dc16cca0e7b59d457ba435830c6fd89713216ee1/PipeRT-2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "085fc6d36fb99149c10080fc1b0e32de39746e9ec31e897d49b597681111e676",
          "md5": "de2c1313c00f0b4bbaeccdb30d9660b3",
          "sha256": "bff93bbd444bde4336c48ca24a94415e632280f231d0eda1761f6653e9de0f3a"
        },
        "downloads": -1,
        "filename": "PipeRT-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "de2c1313c00f0b4bbaeccdb30d9660b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16856,
        "upload_time": "2021-09-30T12:19:03",
        "upload_time_iso_8601": "2021-09-30T12:19:03.196578Z",
        "url": "https://files.pythonhosted.org/packages/08/5f/c6d36fb99149c10080fc1b0e32de39746e9ec31e897d49b597681111e676/PipeRT-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6ab35b05969da578b063e19910fe20222c813a1321afe40eff86b5612174958",
          "md5": "9aa9866af1df549d241d200b770269d8",
          "sha256": "510cd9a7cd8946c088daa1bccb594ad200b9fa8ca84f7a7fc54bae60d1b93191"
        },
        "downloads": -1,
        "filename": "PipeRT-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9aa9866af1df549d241d200b770269d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 60672,
        "upload_time": "2021-10-10T12:33:28",
        "upload_time_iso_8601": "2021-10-10T12:33:28.217756Z",
        "url": "https://files.pythonhosted.org/packages/e6/ab/35b05969da578b063e19910fe20222c813a1321afe40eff86b5612174958/PipeRT-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b890fc6a17e7a6e9645b93d97879f993f9e2d8c5c68da300d5df127e948fdf3e",
          "md5": "a12855667b63e7ddd4f832de25b6892a",
          "sha256": "d909d42ccfaf1daa1f31ea6c7a868e6d19bb8332478b4d98b3324e9b837f42b4"
        },
        "downloads": -1,
        "filename": "PipeRT-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a12855667b63e7ddd4f832de25b6892a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40526,
        "upload_time": "2021-10-10T12:33:29",
        "upload_time_iso_8601": "2021-10-10T12:33:29.379886Z",
        "url": "https://files.pythonhosted.org/packages/b8/90/fc6a17e7a6e9645b93d97879f993f9e2d8c5c68da300d5df127e948fdf3e/PipeRT-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "374dbaebf41ba104d3b85e880c8c827a69c4dee311148c67476445c6feb70743",
          "md5": "4a3515a584d892a0ecf7dec0f6f7d0d2",
          "sha256": "0909bb0cc3ffebc2d7cccdd4a968555f537eb18bde58f236fb998ec7b730b093"
        },
        "downloads": -1,
        "filename": "PipeRT-2.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a3515a584d892a0ecf7dec0f6f7d0d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72945,
        "upload_time": "2021-10-27T10:26:31",
        "upload_time_iso_8601": "2021-10-27T10:26:31.399079Z",
        "url": "https://files.pythonhosted.org/packages/37/4d/baebf41ba104d3b85e880c8c827a69c4dee311148c67476445c6feb70743/PipeRT-2.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5083bb4cde502e1c560d44f885d3d04c800cbe62278bc08649ecf6348711a14c",
          "md5": "723a616734d891959ef7e4517eac1653",
          "sha256": "61ef6eaf05d6eb230143224f2835c49ea65de140a94a6d3d0e284191701e5c0a"
        },
        "downloads": -1,
        "filename": "PipeRT-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "723a616734d891959ef7e4517eac1653",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47453,
        "upload_time": "2021-10-27T10:26:33",
        "upload_time_iso_8601": "2021-10-27T10:26:33.069536Z",
        "url": "https://files.pythonhosted.org/packages/50/83/bb4cde502e1c560d44f885d3d04c800cbe62278bc08649ecf6348711a14c/PipeRT-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62432af4704080a789b61052c91cbf00c23fd0ca175156d59286810e4c1769af",
          "md5": "6a92029988def07b59e08debe2861ab3",
          "sha256": "72bb42a7777ff366a9bad0dffe75d9837deb63a6d91aa161d17100f03744617f"
        },
        "downloads": -1,
        "filename": "PipeRT-2.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a92029988def07b59e08debe2861ab3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72951,
        "upload_time": "2021-10-27T11:41:53",
        "upload_time_iso_8601": "2021-10-27T11:41:53.427938Z",
        "url": "https://files.pythonhosted.org/packages/62/43/2af4704080a789b61052c91cbf00c23fd0ca175156d59286810e4c1769af/PipeRT-2.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de9fbbf6d2044eb3cf44b928decf733e49b55188767c0b22eadf498daf636849",
          "md5": "7232ebc1f82fc49680239ef79a533a3b",
          "sha256": "d50f6b7ff1412f3fb24dd2e227e8d75bc88de24df9a0f5911d0964568c9cb507"
        },
        "downloads": -1,
        "filename": "PipeRT-2.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7232ebc1f82fc49680239ef79a533a3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47403,
        "upload_time": "2021-10-27T11:41:54",
        "upload_time_iso_8601": "2021-10-27T11:41:54.718360Z",
        "url": "https://files.pythonhosted.org/packages/de/9f/bbf6d2044eb3cf44b928decf733e49b55188767c0b22eadf498daf636849/PipeRT-2.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19dc205364e0d8ccab361761eea8f1c0424a14b27134cf45285486582247fed5",
          "md5": "d3311400cf057533ea8c470ef7bcd370",
          "sha256": "c03f149f335548fa46753e50c6c4e2f9f7401408d42ef379f9c4d421720ccdb4"
        },
        "downloads": -1,
        "filename": "PipeRT-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3311400cf057533ea8c470ef7bcd370",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 86230,
        "upload_time": "2021-11-28T13:58:48",
        "upload_time_iso_8601": "2021-11-28T13:58:48.336292Z",
        "url": "https://files.pythonhosted.org/packages/19/dc/205364e0d8ccab361761eea8f1c0424a14b27134cf45285486582247fed5/PipeRT-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4b367557b5b976a5760ad1f6e0b2aa43b8728afb0adaf1b993e7c853b8f0ed0",
          "md5": "04e5c8481dba763fa5af044153d562f6",
          "sha256": "b89c269824b3443289133a8a213a1d8f5b8b233dce91b00415478c8928ef31d9"
        },
        "downloads": -1,
        "filename": "PipeRT-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04e5c8481dba763fa5af044153d562f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 55252,
        "upload_time": "2021-11-28T13:58:50",
        "upload_time_iso_8601": "2021-11-28T13:58:50.036230Z",
        "url": "https://files.pythonhosted.org/packages/b4/b3/67557b5b976a5760ad1f6e0b2aa43b8728afb0adaf1b993e7c853b8f0ed0/PipeRT-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dcb36348eac7b3959c998cacad7f5d1f3a8e8b0466e8e63f1b940866faa1992",
          "md5": "4a9f79bda93cb50f189685183d9e85f4",
          "sha256": "bd35b4c528aa98c090daa79610536bb014942ad4cc4df70c47599df2eae7b86b"
        },
        "downloads": -1,
        "filename": "PipeRT-2.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a9f79bda93cb50f189685183d9e85f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 101080,
        "upload_time": "2022-01-31T09:10:19",
        "upload_time_iso_8601": "2022-01-31T09:10:19.382339Z",
        "url": "https://files.pythonhosted.org/packages/8d/cb/36348eac7b3959c998cacad7f5d1f3a8e8b0466e8e63f1b940866faa1992/PipeRT-2.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22ca57afd80fe94e54a345d380984b858da789409f6f995a05e0aa49f07a00cf",
          "md5": "58ec04368f84008ba7970bc2e354666b",
          "sha256": "5d75cc2eff68ae1a9424a678cc8b081d5d6f49c4f814c1e9facb62da80504382"
        },
        "downloads": -1,
        "filename": "PipeRT-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "58ec04368f84008ba7970bc2e354666b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64833,
        "upload_time": "2022-01-31T09:10:21",
        "upload_time_iso_8601": "2022-01-31T09:10:21.082939Z",
        "url": "https://files.pythonhosted.org/packages/22/ca/57afd80fe94e54a345d380984b858da789409f6f995a05e0aa49f07a00cf/PipeRT-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a6fd852d44c1b7c7ea27d3ebfdc05160b7255adbaeaa8467e9b904aa3c0740b",
          "md5": "9dd7d6cf176c4ea17c9614e36f21a8d4",
          "sha256": "27270642940fe20972bdfad1e5c79b2e558423368e88ef6d325e973ecf6b20ff"
        },
        "downloads": -1,
        "filename": "PipeRT-2.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9dd7d6cf176c4ea17c9614e36f21a8d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 110790,
        "upload_time": "2022-03-03T13:44:04",
        "upload_time_iso_8601": "2022-03-03T13:44:04.894665Z",
        "url": "https://files.pythonhosted.org/packages/0a/6f/d852d44c1b7c7ea27d3ebfdc05160b7255adbaeaa8467e9b904aa3c0740b/PipeRT-2.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccf5f6a106d6244ec665e6c9d9def0c19f855c2b447e976a7d706b2a0b246f94",
          "md5": "7a75b03e5df80f0f6f272aa6f58a7be6",
          "sha256": "a77c1edc0ea93ef80fdac0d463260b93cababa31773858bfcef6234fb789ecee"
        },
        "downloads": -1,
        "filename": "PipeRT-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7a75b03e5df80f0f6f272aa6f58a7be6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 74260,
        "upload_time": "2022-03-03T13:44:07",
        "upload_time_iso_8601": "2022-03-03T13:44:07.613004Z",
        "url": "https://files.pythonhosted.org/packages/cc/f5/f6a106d6244ec665e6c9d9def0c19f855c2b447e976a7d706b2a0b246f94/PipeRT-2.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a6fd852d44c1b7c7ea27d3ebfdc05160b7255adbaeaa8467e9b904aa3c0740b",
        "md5": "9dd7d6cf176c4ea17c9614e36f21a8d4",
        "sha256": "27270642940fe20972bdfad1e5c79b2e558423368e88ef6d325e973ecf6b20ff"
      },
      "downloads": -1,
      "filename": "PipeRT-2.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9dd7d6cf176c4ea17c9614e36f21a8d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 110790,
      "upload_time": "2022-03-03T13:44:04",
      "upload_time_iso_8601": "2022-03-03T13:44:04.894665Z",
      "url": "https://files.pythonhosted.org/packages/0a/6f/d852d44c1b7c7ea27d3ebfdc05160b7255adbaeaa8467e9b904aa3c0740b/PipeRT-2.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ccf5f6a106d6244ec665e6c9d9def0c19f855c2b447e976a7d706b2a0b246f94",
        "md5": "7a75b03e5df80f0f6f272aa6f58a7be6",
        "sha256": "a77c1edc0ea93ef80fdac0d463260b93cababa31773858bfcef6234fb789ecee"
      },
      "downloads": -1,
      "filename": "PipeRT-2.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7a75b03e5df80f0f6f272aa6f58a7be6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 74260,
      "upload_time": "2022-03-03T13:44:07",
      "upload_time_iso_8601": "2022-03-03T13:44:07.613004Z",
      "url": "https://files.pythonhosted.org/packages/cc/f5/f6a106d6244ec665e6c9d9def0c19f855c2b447e976a7d706b2a0b246f94/PipeRT-2.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}