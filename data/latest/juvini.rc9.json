{
  "info": {
    "author": "Niths",
    "author_email": "nitinmn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# JUVINI\n## A Comprehensive graphing tool for EDA. Like a profiler using Graphs.\n\nTo install the package : \n`pip install juvini`\n\n- **[Introduction](#introduction)** \n- **[Requirement](#requirement)**\n- **[Usage](#usage)**\n- **[Best Practices](#best-practices)**\n\n## Introduction\n\nPlotting graphs are one of the most important aspects of EDA. Graphs give intuitive insights because it is processed by our natural neural networks trained and evolved non stop for years. This tool is designed to allow data science users to work on plotting the graphs rather than spending time on codes to do it. This tool has several levels. Highest level is where the user just have to input the entire data frame and the code will take care of giving all plots based on the data type for all combinations. Just like the way pairplot works for numerical datatypes.\n\n## Requirement\n\n1. User should have some idea on python. This can be run from jupyter as well as python console\n2. Should have good understanding of different graph types especially boxplot , scatterplot , barplot , countplot and distplot\n3. This is not a must , but if the user has a clear understanding of the datatype associated with each column , then converting to the datatype will make the graph look better. For eg , if a column contains categorical value 1,2,3,4. Then it is better to convert it as object or category so that the tool will be able to guess it. Else it will assume the datatype as numeric and will plot for numeric related graphs.Note that there is feature within the juvini that will automatically consider a numeric column as category if the unique values in it are less than 5\n4. The tool will always treat first column as X axis , second input column as Y axis and if parameter `hue_col` is specified then it will search for this column on rest of the dataframe. \n\n## Usage\n\nconsider the standard IRIS dataset.Here we modified it a bit to add a numeric column rating where values are 0.1.2.3. Even though it is categorical , we have purposely kept it as numerical column to show some use cases that will come in later sections.\nIt consists of 5 columns\n1. sepal_length - numeric\n2. sepal_width - numeric\n3. petal_length - numeric\n4. petal_width - numeric\n5. species - categorical \n6. rating - numeric ( in fact it is categorical in real scenario )\n\n\nSample output\n1. sepal_length,sepal_width,petal_length,petal_width,species,rating\n0. 5.1,3.5,1.4,0.2,setosa,1\n1. 4.9,3.0,1.4,0.2,setosa,1\n2. 4.7,3.2,1.3,0.2,setosa,0\n3. 4.6,3.1,1.5,0.2,setosa,3\n4. 5.0,3.6,1.4,0.2,setosa,0\n5. 5.4,3.9,1.7,0.4,setosa,1\n6. 4.6,3.4,1.4,0.3,setosa,3\n7. 5.0,3.4,1.5,0.2,setosa,0\n8. 4.4,2.9,1.4,0.2,setosa,1\n9. 4.9,3.1,1.5,0.1,setosa,1\n10. 5.4,3.7,1.5,0.2,setosa,0\n\n### NUMERIC vs NUMERIC - to plot graph where two columns are numeric.\n#### Method : `num_num(df[[num_col1,num_col2]])`\n#### Examples\nsimple numeric to numeric plotting\n\n\n```python\nimport pandas as pd\nfrom juvini import num_num\ndf=pd.read_csv('iris_with_rating.csv')\nnum_num(df[['sepal_length','sepal_width']])\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_7_0.png)\n\n\n\n\n\n    True\n\n\n\nwait what if i want to add a hue parameter to it?\nJust make sure to add the additional column `species` to the input dataframe and also add the parameter `hue_col='species'`\n\n\n```python\nnum_num(df[['sepal_length','sepal_width','species']],hue_col='species')\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_9_0.png)\n\n\n\n\n\n    True\n\n\n\n#### additional parameters \n1. x_name='xvalue' , the name that you want in x axis for the first column , sometimes the column name are different from the name you want to see in the graph.By default the first column name is taken\n2. y_name='yvalue' , same as x_name , but for Y axis\n3. size_figure=(13,4) , for playing around with the size. depending on size of the screen you may want to  change it. default is 13,4 with tight layout\n4. hue_cols , to plot the hue. See the above example\n\n\n### CATEGORICAL vs CATEGORICAL - to plot graph where two columns that are categorical.\n#### Method : `cat_cat(df[[cat_col1,cat_col2]])`\n#### Examples\n\n\nThis will take the top 5 categories for each column and plot it. You can change this value 5 using parameters `xcap` and `ycap` as mentioned below.\nFor each value of X , it will give the countplot for values in Y. \nAlso the tool will take care of all subplots and figure size etc. User do not have to figure out the sizing and subplot grid size. \n\n\n```python\nimport pandas as pd\nfrom juvini import cat_cat\ndf=pd.read_csv('iris_with_rating.csv')\ncat_cat(df[['species','rating']])\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_13_0.png)\n\n\n\n\n\n    True\n\n\n\nsimilarly interchanging first and second column will change the axis\n`cat_cat(df[['rating','species']])`\n\n\n```python\ncat_cat(df[['rating','species']])\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_15_0.png)\n\n\n\n\n\n    True\n\n\n\nBut wait , did we just use a numerical column to plot a categorical column?\nActually yes , if we know that it is categorical , we do not have to change the datatype and all unnecessary things. the code will take care of converting it to category.\n\nFine , but what if there are too many categories and i simply need to have a gist of top few categories?\nYes that is also supported , simply provide the parameter `xcap=<value>` , the code will sort the categories based on its count and choose the top n values based on the input.\n\n#### additional parameters \n1. x_name='xvalue' , the name that you want in x axis for the first column , sometimes the column name are different from the name you want to see in the graph.By default the first column name is taken\n2. y_name='yvalue' , same as x_name , but for Y axis\n3. size_figure=(13,4) , for playing around with the size. depending on size of the screen you may want to  change it. default is 13,4 with tight layout\n4. xcap=5 , will cap the maximum categories with top 5 based on its count for x axis 1st column , default 5\n5. ycap=5 , same as xcap , but will be applicable to y column.\n6. hue_cols , to plot the hue. See the above example\n7. scols=3 , this is an experimental feature , use with caution. This parameter will control how many plots in one row. By default it is 3\n7. others=True , this is an experimental feature , use with caution. This parameter will put all the other values that are not coming in the top values provided into a category called 'restall'\n\n### CATEGORICAL vs NUMERICAL - to plot graph where two columns where x is category and y is numeric.\n#### Method : `cat_num(df[[cat_col1,num_col2]])`\n#### Examples\n\nThis will take the top 5 categories of categorical column and plot numerical. You can change this value 5 using parameters `xcap` and `ycap` as mentioned below.\nFor each value of X , it will give the boxplot corresponding to the numerical column in that. Additionally it will also give aggregate sum of the numerical values for each category.\n\nIt is upto the user to decide which is useful. Boxplot is always useful , whereas the sum aggregate might help if you are looking at something like total votes etc. but if it is like sepal_width kind , then it may not be useful.Anyways no harm in giving both.\n\n\n```python\nimport pandas as pd\nfrom juvini import cat_num\ndf=pd.read_csv('iris_with_rating.csv')\ncat_num(df[['species','petal_length']])\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_20_0.png)\n\n\n\n\n\n    True\n\n\n\nCan we use a numerical column to plot a categorical column?\nActually yes , if we know that it is categorical , we do not have to change the datatype and all unnecessary things. the code will take care of converting it to category as long as you provide the column as first column in the input\n\nFine , but what if there are too many categories and i simply need to have a gist of top few categories?\nYes that is also supported , simply provide the parameter `xcap=<value>` , the code will sort the categories based on its count and choose the top n values based on the input.\n\n\nHow about the hue?\nYes , that also will work here. provide it like\n\n\n```python\ncat_num(df[['species','petal_length','rating']],hue_col='rating')\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_22_0.png)\n\n\n\n\n\n    True\n\n\n\n#### additional parameters \n1. x_name='xvalue' , the name that you want in x axis for the first column , sometimes the column name are different from the name you want to see in the graph.By default the first column name is taken\n2. y_name='yvalue' , same as x_name , but for Y axis\n3. size_figure=(13,4) , for playing around with the size. depending on size of the screen you may want to  change it. default is 13,4 with tight layout\n4. xcap=5 , will cap the maximum categories with top 5 based on its count for x axis 1st column , default 5\n6. hue_cols , to plot the hue. See the above example\n7. others=True , this is an experimental feature , use with caution. This parameter will put all the other values that are not coming in the top values provided into a category called 'restall'. There are ratings 0-3. If we cap it to only top 2. Then the rest of the ratings will go into \"restall\" value.\n\n\n```python\ncat_num(df[['rating','petal_length']],xcap=2,others=True)\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_24_0.png)\n\n\n\n\n\n    True\n\n\n\n\n### Single NUMERICAL - to plot graph with just a numerical column\n#### Method : `single_num(df[[num_col1]])`\n#### Examples\n\nIt is not always the case that plot will need two columns. What if i just need to see a boxplot of a numeric column or the distribution of a numeric column?\nFor that we have the method which will give boxplot and distplot. It is usually used with the hue to give more insights\n\n\n```python\nimport pandas as pd\nfrom juvini import single_num\ndf=pd.read_csv('iris_with_rating.csv')\nsingle_num(df[['sepal_length']])\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_27_0.png)\n\n\n\n\n\n    True\n\n\n\nHow about the hue?\nYes , that also will work here. provide it like\n\n\n```python\nsingle_num(df[['sepal_length','species']],hue_col='species')\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_29_0.png)\n\n\n\n\n\n    True\n\n\n\n#### additional parameters \n1. x_name='xvalue' , the name that you want in x axis for the first column , sometimes the column name are different from the name you want to see in the graph.By default the first column name is taken\n2. size_figure=(13,4) , for playing around with the size. depending on size of the screen you may want to  change it. default is 13,4 with tight layout\n3. hue_cols , to plot the hue. See the above example\n\n### Single CATEGORICAL - to plot graph with just a categorical column\n#### Method : `single_cat(df[[cat_col1]])`\n#### Examples\n\nIt is not always the case that plot will need two columns. What if i just need to see a boxplot of a categorical column or the distribution of a numeric column?\nFor that we have the method which will give boxplot and distplot. It is usually used with the hue to give more insights\n\n\n```python\nimport pandas as pd\nfrom juvini import single_cat\ndf=pd.read_csv('iris_with_rating.csv')\nsingle_cat(df[['species']])\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_33_0.png)\n\n\n\n\n\n    True\n\n\n\nCan we use a numerical column to plot a categorical column?\nActually yes , if we know that it is categorical , we do not have to change the datatype and all unnecessary things. the code will take care of converting it to category as long as you provide the column as first column in the input\n\nFine , but what if there are too many categories and i simply need to have a gist of top few categories?\nYes that is also supported , simply provide the parameter `xcap=<value>` , the code will sort the categories based on its count and choose the top n values based on the input.\n\n\n```python\nsingle_cat(df[['species']],xcap=2)\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_36_0.png)\n\n\n\n\n\n    True\n\n\n\nFine , what if i want to change not the xcap but the ycap?\nYes we can do that as well. Simply change the parameter `ycap=<value>` just like the xcap.\n\nHow about the hue?\nYes , that also will work here. provide it like `single_cat(df[['species','hue_column']],hue_col='hue_column)`\n\n\n```python\nsingle_cat(df[['species','rating']],hue_col='rating')\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_38_0.png)\n\n\n\n\n\n    True\n\n\n\n#### additional parameters \n1. x_name='xvalue' , the name that you want in x axis for the first column , sometimes the column name are different from the name you want to see in the graph.By default the first column name is taken\n2. size_figure=(13,4) , for playing around with the size. depending on size of the screen you may want to  change it. default is 13,4 with tight layout\n3. hue_cols , to plot the hue. See the above example\n4. xcap=5 , will cap the maximum categories with top 5 based on its count for x axis 1st column , default 5\n\n## To make it more easier\n#### Method : `xy_autoplot(df[[col1,col2]])`\n#### Examples\nWhat if i do not even care what the data type is. I just want the code to decide it based on the data type already present.Can i do that?\n\nYes. There is a method which does exactly this. You will have to simply give two columns. The first column will be taken as X variable and second as Y variable. And based on the data type it will provide you the necessary graph.\n\n\n\n```python\nimport pandas as pd\nfrom juvini import xy_auto_plot\ndf=pd.read_csv('iris_with_rating.csv')\nxy_auto_plot(df[['sepal_length','species']])\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_41_0.png)\n\n\n\n\n\n    True\n\n\n\nDoes it support hue?\nYes , you can use the same parameter `hue_col=<colname>` and if the graph can handle hue , then it will use it.\n\n\n```python\nxy_auto_plot(df[['sepal_length','species']],hue='rating')\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_43_0.png)\n\n\n\n\n\n    True\n\n\n\n\n```python\ncat_num(df[['rating','sepal_length']])\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_44_0.png)\n\n\n\n\n\n    True\n\n\n\n## Still better and most comfortable\n#### Method : `juvini_profile(df[[list_of_cols]])`\n#### Examples\nThis is the highest of all that combines all below features and give the entire story in a matter of one command.\n\n\n```python\nimport pandas as pd\nfrom juvini import juvini_profile\ndf=pd.read_csv('iris_with_rating.csv')\njuvini_profile(df,hue_col='species')\n```\n\n    Numerical columns: ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'rating']\n    Categorical columns: []\n    Analysis of numeric sepal_length and numeric sepal_length\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_1.png)\n\n\n    Analysis of numeric sepal_length and numeric sepal_width\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_3.png)\n\n\n    Analysis of numeric sepal_length and numeric petal_length\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_5.png)\n\n\n    Analysis of numeric sepal_length and numeric petal_width\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_7.png)\n\n\n    Analysis of numeric sepal_length and numeric rating\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_9.png)\n\n\n    Analysis of numeric sepal_width and numeric sepal_width\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_11.png)\n\n\n    Analysis of numeric sepal_width and numeric petal_length\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_13.png)\n\n\n    Analysis of numeric sepal_width and numeric petal_width\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_15.png)\n\n\n    Analysis of numeric sepal_width and numeric rating\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_17.png)\n\n\n    Analysis of numeric petal_length and numeric petal_length\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_19.png)\n\n\n    Analysis of numeric petal_length and numeric petal_width\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_21.png)\n\n\n    Analysis of numeric petal_length and numeric rating\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_23.png)\n\n\n    Analysis of numeric petal_width and numeric petal_width\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_25.png)\n\n\n    Analysis of numeric petal_width and numeric rating\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_27.png)\n\n\n    Analysis of numeric rating and numeric rating\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_46_29.png)\n\n\n\n\n\n    True\n\n\n\n#### An easier way to get the only related graphs to the dependent variable \nIn many cases we may not need all sorts of graph but rather interested in seeing the graph related to the target variable, to do use the feature \n`juvini_against_target(df[col_list],target_col=<target_variable>)`\n\n\n```python\nimport pandas as pd\nfrom juvini import juvini_profile\ndf=pd.read_csv('iris_with_rating.csv')\njuvini_against_target(df,target_col='species')\n```\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_48_0.png)\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_48_1.png)\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_48_2.png)\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_48_3.png)\n\n\n\n![png](https://raw.githubusercontent.com/niths4u/juvini/main/juvini/images/output_48_4.png)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/niths4u/juvini",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "juvini",
    "package_url": "https://pypi.org/project/juvini/",
    "platform": "",
    "project_url": "https://pypi.org/project/juvini/",
    "project_urls": {
      "Homepage": "https://github.com/niths4u/juvini"
    },
    "release_url": "https://pypi.org/project/juvini/1.0.8/",
    "requires_dist": [
      "pandas",
      "matplotlib",
      "seaborn"
    ],
    "requires_python": ">=3.6",
    "summary": "EDA for dummies",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10332791,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ec407ed00a968c0a4284d15a506f690a80856795b36b58b328450f417751703",
          "md5": "7650adcdb1a16bf9671952482b74aaf8",
          "sha256": "8cfbec9592763324923c695582885005f65714defcdebfc2df3a13a170656bfa"
        },
        "downloads": -1,
        "filename": "juvini-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7650adcdb1a16bf9671952482b74aaf8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11801,
        "upload_time": "2020-11-29T13:24:29",
        "upload_time_iso_8601": "2020-11-29T13:24:29.582472Z",
        "url": "https://files.pythonhosted.org/packages/5e/c4/07ed00a968c0a4284d15a506f690a80856795b36b58b328450f417751703/juvini-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b0f4a858e0f45d9bc583a8dccfb4724ffe233c5f92650ad51cfa22cc3dc1000",
          "md5": "720b705ff496cfa2f7f3fdd3ac5c046e",
          "sha256": "ce5c4c074be6370d806ad48aaf8f58b09f094a2b9fe3fe043dda1374b237ebcf"
        },
        "downloads": -1,
        "filename": "juvini-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "720b705ff496cfa2f7f3fdd3ac5c046e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15422,
        "upload_time": "2020-11-29T13:24:30",
        "upload_time_iso_8601": "2020-11-29T13:24:30.904795Z",
        "url": "https://files.pythonhosted.org/packages/3b/0f/4a858e0f45d9bc583a8dccfb4724ffe233c5f92650ad51cfa22cc3dc1000/juvini-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9a01e09c1121abadc1ed045ad1a5a4e1195abb6b21f47f4ac940376194fc218",
          "md5": "cfd88ea3cd4480d3c7f0ee2c38aa0f3d",
          "sha256": "a9846d855bafe5579e3f7ebfc373ca4c1f21037411f6f3e766090438a1d780cd"
        },
        "downloads": -1,
        "filename": "juvini-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfd88ea3cd4480d3c7f0ee2c38aa0f3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11839,
        "upload_time": "2020-11-29T13:34:34",
        "upload_time_iso_8601": "2020-11-29T13:34:34.997042Z",
        "url": "https://files.pythonhosted.org/packages/c9/a0/1e09c1121abadc1ed045ad1a5a4e1195abb6b21f47f4ac940376194fc218/juvini-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc44dca5b207973514b5f77c65f82157c0cff6097c4496aa52de5497f5e32050",
          "md5": "56b8370d732c5864eec8b43065d87f21",
          "sha256": "c264ad42b6773d0d308dbf6bb48811bf13db976c42953bde04533512ad06a029"
        },
        "downloads": -1,
        "filename": "juvini-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "56b8370d732c5864eec8b43065d87f21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15475,
        "upload_time": "2020-11-29T13:34:36",
        "upload_time_iso_8601": "2020-11-29T13:34:36.301154Z",
        "url": "https://files.pythonhosted.org/packages/dc/44/dca5b207973514b5f77c65f82157c0cff6097c4496aa52de5497f5e32050/juvini-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dec300b5e8aea1a4810244c460373562e9b354637e2098451088dce556b89af",
          "md5": "fd80d0d6adcd2c2b8096d3165105fb2f",
          "sha256": "0493e7d1f35289894b40aa1bf7146ab8bcc4bb93d3fb7b72bd1b16bb0c8860d5"
        },
        "downloads": -1,
        "filename": "juvini-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd80d0d6adcd2c2b8096d3165105fb2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11857,
        "upload_time": "2020-11-29T13:45:10",
        "upload_time_iso_8601": "2020-11-29T13:45:10.580450Z",
        "url": "https://files.pythonhosted.org/packages/7d/ec/300b5e8aea1a4810244c460373562e9b354637e2098451088dce556b89af/juvini-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87104fbd7e54d9cd872acd5309e537a676a1f25241fe091a6a1ad5993b96df9a",
          "md5": "c5bfa4b0f642e91915ce578d7585eabe",
          "sha256": "4c13bdde32cf8e206fdb14b7770e166e98044b45a00c631fb79415c83fcacdbc"
        },
        "downloads": -1,
        "filename": "juvini-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c5bfa4b0f642e91915ce578d7585eabe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15515,
        "upload_time": "2020-11-29T13:45:11",
        "upload_time_iso_8601": "2020-11-29T13:45:11.821726Z",
        "url": "https://files.pythonhosted.org/packages/87/10/4fbd7e54d9cd872acd5309e537a676a1f25241fe091a6a1ad5993b96df9a/juvini-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "633fff824705b8129da00ba7f1d849f625eac283a1533f0d5547cc8c85068222",
          "md5": "5032825403cc7b8cbd6f28a3dae27b8e",
          "sha256": "15a50c42e3999933937385f60191597399d72abab55f79509e5acde9c5fd4bc7"
        },
        "downloads": -1,
        "filename": "juvini-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5032825403cc7b8cbd6f28a3dae27b8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11849,
        "upload_time": "2020-11-29T13:51:16",
        "upload_time_iso_8601": "2020-11-29T13:51:16.748174Z",
        "url": "https://files.pythonhosted.org/packages/63/3f/ff824705b8129da00ba7f1d849f625eac283a1533f0d5547cc8c85068222/juvini-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8939684345b9ca3b6156192cd8fbeb023f19433d2dca646a7ec159f4ff5df6d6",
          "md5": "9dfd5bb25d9d08ce1c2da84345574521",
          "sha256": "747fc1408baf309fd20f251f454b6bfa5059bc05c64fbdd30f27bd11eef8c6c7"
        },
        "downloads": -1,
        "filename": "juvini-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9dfd5bb25d9d08ce1c2da84345574521",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15517,
        "upload_time": "2020-11-29T13:51:18",
        "upload_time_iso_8601": "2020-11-29T13:51:18.120366Z",
        "url": "https://files.pythonhosted.org/packages/89/39/684345b9ca3b6156192cd8fbeb023f19433d2dca646a7ec159f4ff5df6d6/juvini-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14fdc8aec0b0885b5950482010a2f53abcd7161d3d11b23dd9ebe2cb6793c679",
          "md5": "685e2780d920a9a2a2d280122709419a",
          "sha256": "2c70a143fb6d6830ec3efea78547f5d3e33647d32902806fe975a9f9576de336"
        },
        "downloads": -1,
        "filename": "juvini-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "685e2780d920a9a2a2d280122709419a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11841,
        "upload_time": "2020-11-29T13:55:12",
        "upload_time_iso_8601": "2020-11-29T13:55:12.442151Z",
        "url": "https://files.pythonhosted.org/packages/14/fd/c8aec0b0885b5950482010a2f53abcd7161d3d11b23dd9ebe2cb6793c679/juvini-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5291cb6a3aeb6f5a07fc6cffd76804665bb74b0f65f771e92313428b347e91fe",
          "md5": "215e154ece5d17745de8ad5db85c2dd5",
          "sha256": "4469c4cdfb13fe9e740cb03b9c152f01e35755b08ed20203885278226aab51ac"
        },
        "downloads": -1,
        "filename": "juvini-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "215e154ece5d17745de8ad5db85c2dd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15493,
        "upload_time": "2020-11-29T13:55:13",
        "upload_time_iso_8601": "2020-11-29T13:55:13.807436Z",
        "url": "https://files.pythonhosted.org/packages/52/91/cb6a3aeb6f5a07fc6cffd76804665bb74b0f65f771e92313428b347e91fe/juvini-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e341fdc7e3db4d402585998fe854dea80cad4f7083cd036f939a42f34bd5fbc",
          "md5": "b160facb94b936d23596310597a8c310",
          "sha256": "4f84fa39b665316e498ecf30e134ab99e8c446a7660ce726096de5aaa26c0cfa"
        },
        "downloads": -1,
        "filename": "juvini-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b160facb94b936d23596310597a8c310",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11820,
        "upload_time": "2020-11-29T15:39:36",
        "upload_time_iso_8601": "2020-11-29T15:39:36.414781Z",
        "url": "https://files.pythonhosted.org/packages/9e/34/1fdc7e3db4d402585998fe854dea80cad4f7083cd036f939a42f34bd5fbc/juvini-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e661bb4174486b8d3dc2b69ad504da64081a7c321c9f929db273b182f794c0f3",
          "md5": "064cd4909958cebed5f446dd41996f93",
          "sha256": "808804b254dae65de504772c8788e2f0ce17f47a3460508d20576058624d5787"
        },
        "downloads": -1,
        "filename": "juvini-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "064cd4909958cebed5f446dd41996f93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15481,
        "upload_time": "2020-11-29T15:39:37",
        "upload_time_iso_8601": "2020-11-29T15:39:37.727558Z",
        "url": "https://files.pythonhosted.org/packages/e6/61/bb4174486b8d3dc2b69ad504da64081a7c321c9f929db273b182f794c0f3/juvini-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6743b9992109fb27668edc42a50c04d378471e9d019e0bcae4412bb7b8c90af2",
          "md5": "f53fc0031699eaf77dbf08b8d9490994",
          "sha256": "1d85ac1c8d0c711f88b332f5919f17fc23ac294ad8903b2cbde0ccae3bd3e61f"
        },
        "downloads": -1,
        "filename": "juvini-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f53fc0031699eaf77dbf08b8d9490994",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11745,
        "upload_time": "2020-12-08T13:07:58",
        "upload_time_iso_8601": "2020-12-08T13:07:58.900485Z",
        "url": "https://files.pythonhosted.org/packages/67/43/b9992109fb27668edc42a50c04d378471e9d019e0bcae4412bb7b8c90af2/juvini-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fa5097c8e917f808c027f5728f2027740d4a15588f96c4110a18701fcf6c254",
          "md5": "2c3a90709c0f1be103f1992089c11741",
          "sha256": "3d2aff8ed6dd3ff03ee9f091964c2a5c980bedf4a31a75a95ac15c5c6722bb17"
        },
        "downloads": -1,
        "filename": "juvini-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2c3a90709c0f1be103f1992089c11741",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15315,
        "upload_time": "2020-12-08T13:07:59",
        "upload_time_iso_8601": "2020-12-08T13:07:59.997968Z",
        "url": "https://files.pythonhosted.org/packages/1f/a5/097c8e917f808c027f5728f2027740d4a15588f96c4110a18701fcf6c254/juvini-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa76350f4a6deec513a44409e8bd64d39bf6be6ceceb5082e0ceb67c4c0929ed",
          "md5": "8de86603fd1ff69b5e086222bfeaa17f",
          "sha256": "44fb51fcc6665486154e25709523a776d9e6fc87750367227427bb14457521b6"
        },
        "downloads": -1,
        "filename": "juvini-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8de86603fd1ff69b5e086222bfeaa17f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11753,
        "upload_time": "2020-12-12T11:20:47",
        "upload_time_iso_8601": "2020-12-12T11:20:47.167206Z",
        "url": "https://files.pythonhosted.org/packages/fa/76/350f4a6deec513a44409e8bd64d39bf6be6ceceb5082e0ceb67c4c0929ed/juvini-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f749bc2bc1f84aeb42253f1d4e27982eb8946e2f53f0617e8434cbd8995b2414",
          "md5": "f385c15d1292d358c53840f36ce943c8",
          "sha256": "d486d04a8f9b97e7b6673986911e53147263e2dc2a90997a4a08626e1623736f"
        },
        "downloads": -1,
        "filename": "juvini-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f385c15d1292d358c53840f36ce943c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15330,
        "upload_time": "2020-12-12T11:20:48",
        "upload_time_iso_8601": "2020-12-12T11:20:48.973385Z",
        "url": "https://files.pythonhosted.org/packages/f7/49/bc2bc1f84aeb42253f1d4e27982eb8946e2f53f0617e8434cbd8995b2414/juvini-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3f29dff5c0f3ec88ed47915a99f9e15b96c78aa450f47e42ec42f4dcbb5c938",
          "md5": "f52870179c6e441656a533bb39233ad5",
          "sha256": "919e4d1780f7a0abc4d23fe4e3e109d1e7efadfefb507ab12fcb1c36c50a0a6b"
        },
        "downloads": -1,
        "filename": "juvini-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f52870179c6e441656a533bb39233ad5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11781,
        "upload_time": "2021-05-12T11:35:33",
        "upload_time_iso_8601": "2021-05-12T11:35:33.667004Z",
        "url": "https://files.pythonhosted.org/packages/f3/f2/9dff5c0f3ec88ed47915a99f9e15b96c78aa450f47e42ec42f4dcbb5c938/juvini-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cce9990f6ee86a82718fbd56cee49fa6a50aa8087adaca4baa5477158d0426cb",
          "md5": "108743db6675659d9e340434f07a768f",
          "sha256": "999a4a32ab4ca231265552fac154ab199149f8c71d8b41d4b0502e7b252d1b39"
        },
        "downloads": -1,
        "filename": "juvini-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "108743db6675659d9e340434f07a768f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15358,
        "upload_time": "2021-05-12T11:35:35",
        "upload_time_iso_8601": "2021-05-12T11:35:35.681532Z",
        "url": "https://files.pythonhosted.org/packages/cc/e9/990f6ee86a82718fbd56cee49fa6a50aa8087adaca4baa5477158d0426cb/juvini-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3f29dff5c0f3ec88ed47915a99f9e15b96c78aa450f47e42ec42f4dcbb5c938",
        "md5": "f52870179c6e441656a533bb39233ad5",
        "sha256": "919e4d1780f7a0abc4d23fe4e3e109d1e7efadfefb507ab12fcb1c36c50a0a6b"
      },
      "downloads": -1,
      "filename": "juvini-1.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f52870179c6e441656a533bb39233ad5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11781,
      "upload_time": "2021-05-12T11:35:33",
      "upload_time_iso_8601": "2021-05-12T11:35:33.667004Z",
      "url": "https://files.pythonhosted.org/packages/f3/f2/9dff5c0f3ec88ed47915a99f9e15b96c78aa450f47e42ec42f4dcbb5c938/juvini-1.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cce9990f6ee86a82718fbd56cee49fa6a50aa8087adaca4baa5477158d0426cb",
        "md5": "108743db6675659d9e340434f07a768f",
        "sha256": "999a4a32ab4ca231265552fac154ab199149f8c71d8b41d4b0502e7b252d1b39"
      },
      "downloads": -1,
      "filename": "juvini-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "108743db6675659d9e340434f07a768f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15358,
      "upload_time": "2021-05-12T11:35:35",
      "upload_time_iso_8601": "2021-05-12T11:35:35.681532Z",
      "url": "https://files.pythonhosted.org/packages/cc/e9/990f6ee86a82718fbd56cee49fa6a50aa8087adaca4baa5477158d0426cb/juvini-1.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}