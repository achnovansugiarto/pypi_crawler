{
  "info": {
    "author": "",
    "author_email": "Richard DeVaul <richard.devaul@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "**yapCAD**\n==========\n\nyet another procedural CAD and computational geometry system written in\npython 3\n\n.. figure:: images/yapCadSplash.png\n   :alt: **yapCAD** image\n\n   **yapCAD** image\n\nwhat’s **yapCAD** for?\n----------------------\n\nFirst and foremost, **yapCAD** is a framework for creating\n`parametric <https://en.wikipedia.org/wiki/Parametric_design>`__,\nprocedural, and\n`generative <https://en.wikipedia.org/wiki/Parametric_design>`__ design\nsystems. You can also use **yapCAD** for other CAD, CAM, and\ncomputational geometry purposes.\n\nsoftware status\n---------------\n\n**yapCAD** is still very much in **beta**, although it is already being\nused by for professional engineering purposes. If you are using\n**yapCAD** in interesting ways, feel free to let us know in the `yapCAD\ndiscussions <https://github.com/rdevaul/yapCAD/discussions>`__ forum\n\n**yapCAD** installation, documentation, and examples\n----------------------------------------------------\n\ninstallation\n~~~~~~~~~~~~\n\n**yapCAD** is a pure python library, so no special steps are required\nfor installation. You can install it a variety of ways, but the\nrecommended method is to use pip to install it into your local\n``site-packages`` directory, as follows:\n\n::\n\n   pip install yapCAD --user\n\nYou can also clone the github repository and install from source:\n\n::\n\n   git clone https://github.com/rdevaul/yapCAD.git\n   cd yapCAD\n   python setup.py install --user\n\nexamples\n~~~~~~~~\n\nThe **yapCAD** github repository includes examples. To run the examples,\nclone the github repository as shown above, and make sure that your\nPYTHONPATH includes the cloned top-level ``yapCAD`` directory. You will\nfind the examples in the ``yapCAD/examples`` directory.\n\nFor a fully worked parametric design system, see the ``boxcut`` example.\n\ndocumentation\n~~~~~~~~~~~~~\n\nOnline **yapCAD** documentation can be found here:\nhttps://yapcad.readthedocs.io/en/latest/ — for some reason\n``readthedocs.io`` isn’t generating the full module documentation, so\nyou might want to build a local copy, as described below.\n\nTo build the HTML **yapCAD** documentation locally, first make sure you\nhave the sphinx package installed:\n\n::\n\n   pip install sphinx --user\n\nThen clone the github repository as shown above, ``cd`` to the\n``yapCAD`` directory, and type\n\n::\n\n   make -C docs html\n\nThis will build the HTML documents in the ``build/sphinx/html``\ndirectory. You can also build documentation in the other formats\nsupported by Sphinx. See the `Sphinx\ndocumentation <https://www.sphinx-doc.org/en/master/>`__ for more\ninformation.\n\n**yapCAD** goals\n----------------\n\nThe purpose of **yapCAD** is to support 2D and 3D computational geometry\nand parametric, procedural, and generative design projects in python3.\n**yapCAD** is designed to support multiple rendering back-ends, such\nthat a relatively small amount of code is necessary to add support for a\n2D or 3D cad or drawing file format. At present, **yapCAD** supports the\nAutoCad DXF file format for creating two-dimensional drawings and OpenGL\nfor creating interactive 2D and 3D renderings.\n\nThe foundations of **yapCAD** are grounded in decades of the author’s\nexperience with graphics system programming, 3D CAD and simulation.\n**yapCAD** has an underlying framework and architecture designed to\nsupport sophisticated computational geometry and procedural CAD\napplications. At the same time, the design of **yapCAD** should make\neasy stuff relatively easy, and the more advanced stuff possible.\n\nThe initial implementation of **yapCAD** provides DXF file creation\nsupport through the awesome `ezdxf <https://github.com/mozman/ezdxf>`__\npackage, and interactive OpenGL visualization using the amazing\n`pyglet <https://github.com/pyglet/pyglet>`__ package.\n\n**yapCAD** examples\n-------------------\n\n(for a more complete list, see the `examples folder <./examples/>`__)\n\nIt’s pretty easy to make a DXF drawing with **yapCAD**. Here is an\nexample:\n\n::\n\n   from yapcad.ezdxf_drawable import *\n   from yapcad.geom import *\n\n   #set up DXF rendering\n   dd=ezdxfDraw()\n   dd.filename = \"example1-out\"\n\n   ## make dxf-renderable geometry\n\n   # make a point located at 10,10 in the x-y plane, rendered as a small\n   # red cross and circle\n   dd.pointstyle = 'xo' # also valid are 'x' or 'o'\n   dd.linecolor = 1 # set color to red (DXF index color 1)\n   dd.draw(point(10,10))\n\n   # make a line segment between the points -5,10 and 10,-5 in the x-y plane\n   # and draw it in white\n\n   dd.linecolor='white' # set color by name\n   dd.draw(line(point(-5,10),\n                point(10,-5)))\n\n   # make an arc with a center at 0,3 with a radius of 3, from 45 degrees\n   # to 135 degrees, and draw it in aqua\n\n   dd.linecolor=[0,255,255] # RGB tripple, corresponds to 'aqua'\n   dd.draw(arc(point(0,3),3,45,135))\n\n   # write out the geometry as example1-out.dxf\n   dd.display()\n\nThe **yapCAD** system isn’t just about rendering, of course, it’s about\ncomputational geometry. For example, if you want to calculate the\nintersection of lines and arcs in a plane, we have you covered:\n\n::\n\n   from yapcad.geom import *\n\n   # define some points\n   a = point(5,0)\n   b = point(0,5)\n   c = point(-3,0)\n   d = point(10,10)\n\n   # make a couple of lines\n   l1 = line(a,b)\n   l2 = line(c,d)\n\n   # define a semicircular arc centered at 2.5, 2,5 with a radius of 2.5\n   # extending from 90 degrees to 135 degrees\n\n   arc1=arc(point(2.5,2.5),2.5,90.0,270.0)\n\n   # calculate the intersection of lines l1 and l2\n   int0 = intersectXY(l1,l2)\n\n   # calculate the intersection of the line l1 and the arc arc1\n   int1 = intersectXY(l1,arc1)\n\n   print(\"intersection of l1 and l2:\",vstr(int0))\n   print(\"intersection of l1 and arc1:\",vstr(int1))\n\nAnd of course **yapCAD** supports calculating intersections between any\nsimple and compound, or compound and compound geometry object.\n\nThere are lots more `examples <examples/README.rst>`__ available to\ndemonstrate the various computational geometry and rendering\ncapabilities of **yapCAD**, including 3D geometry and OpenGL rendering.\n\n**yapCAD** geometry\n-------------------\n\n**yapCAD** distinguishes between “pure” geometric elements, such as\nlines, arcs, **etc.**, and drawn representations of those things, which\nmight have attributes like line color, line weight, drawing layer,\n**etc.** This distinction is important, because the pure geometry exists\nindependent of these attributes, which are themselves rendering-system\ndependent.\n\nMore importantly, for every geometric element you decide to draw, there\nwill typically be many more — perhaps dozens — that should not be in the\nfinal rendering. By separating these two elements — computation and\nrendering — **yapCAD** makes them both more intentional and reduces the\nlikelihood of certain type of drawing-quality issues, such as redundant\nor spurious drawing elements, that can cause confusion problems for\ncomputer-aided manufacturing (CAM).\n\nFor example, you might construct a finished drawing that includes a\ndrill pattern that consists of circles (drill holes with centers) that\nfollow a complex, geometrically constrained pattern. This pattern is\nitself the result of numerous computational geometry operations, perhaps\ndriven by parameters relating to the size and shape of other parts.\n\nIn a program like Autodesk’s Fusion360, you would typically use\nconstruction lines and constraints to create the underlying geometric\npattern. These additional construction elements would have to be removed\nin order to make a clean DXF export of your drawing. On more than one\noccasion **yapCAD**\\ ’s author has created headaches by failing to\nremove some of these elements, confusing CAM technicians, causing\ndelays, and sometimes resulting in expensive part fabrication errors.\n\nThus, **yapCAD** allows you to work freely with computational geometry\nwithout cluttering up your drawing page, since you specifically decide\nwhat to draw. It also means you can do computational geometry in\n**yapCAD** without ever invoking a rendering system, which can be useful\nwhen incorporating these geometry operations as part of a larger\ncomputational system, such as a tool-path generator.\n\nAs a rule, in **yapCAD** pure geometry representations capture only the\nminimum necessary to perform computational geometry, and the rest gets\ndealt with by the rendering system, which are subclasses of ``Drawable``\nthat actually make images, CAD drawings, **etc.**\n\nvector representation in **yapCAD**\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor the sake of uniformity, all **yapCAD** vectors are stored as\nprojective geometry 4-vectors. (see discussion in **architecture**,\nbelow) However, most of the time you will work with them as though they\nare 3-vectors or 2-vectors.\n\nIt would be annoying to have to specify the redundant coordinates you\naren’t using every time you specify a vector, so **yapCAD** provides you\nwith the ``vect`` function. It fills in defaults for the z and w\nparameters you may not want to specify. **e.g.**\n\n::\n\n   >>> from yapcad.geom import *\n   >>> vect(10,4)\n   [10, 4, 0, 1]\n   >>> add(vect(10,4),vect(10,9))  ## add operates in 3-space\n   [20, 13, 0, 1.0]\n\nOf course, you can specify all three (or even four) coordinates using\n``vect``.\n\nSince it gets ugly to look at a bunch of [x, y, z, w] lists that all end\nin ``0, 1]`` when you are doing 2D stuff, **yapCAD** provides a\nconvenience function ``vstr`` that intelligently converts **yapCAD**\nvectors (and lists that contain vectors, such as lines, triangles, and\npolygons) to strings, assuming that as long as z = 0 and w = 1, you\ndon’t need to see those coordinates.\n\n::\n\n   >>> from yapcad.geom import *\n   >>> a = sub(vect(10,4),vect(10,9)) ## subtract a couple of vectors \n   >>> a\n   [0, -5, 0, 1.0]\n   >>> print(vstr(a)) ## pretty printing, elide the z and w coordinates\n   >>> [0, -5]\n\npure geometry\n~~~~~~~~~~~~~\n\nPure geometric elements in **yapCAD** form the basis for computational\ngeometry operations, including intersection and inside-outside testing.\nPure geometry can also be drawn, of course — see **drawable geometry**\nbelow.\n\nIn general, **yapCAD** pure geometry supports the operations of\nparametric sampling, intersection calculation, inside-outside testing\n(for closed figures), “unsampling” (going from a point on the figure to\nthe sampling parameter that would produce it), and bounding box\ncalculation. **yapCAD** geometry is based on projective or homogeneous\ncoordinates, thus supporting generalized affine transformations; See the\ndiscussion in **architecture**, below.\n\nsimple (non-compound) pure geometric elements\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSimple, which is to say non-compound, geometry includes vectors, points,\nand lines. A vector is a list of exactly four numbers, each of which is\na float or integer. A point is a vector that lies in a w > 0 hyperplane;\nPoints are used to represent transformable coordinates in **yapCAD**\ngeometry. A line is a list of two points.\n\nSimple geometry also includes arcs. An arc is a list of a point and a\nvector, followed optionally by another point. The first list element is\nthe center of the arc, the second is a vector in the w=-1 hyperplane\n(for right-handed arcs) whose first three elements are the scalar\nparameters ``[r, s, e]``: the radius, the start angle in degrees, and\nthe end angle in degrees. The third element (if it exists) is the normal\nfor the plane of the arc, which is assumed to be ``[0, 0, 1]`` (the x-y\nplane) if it is not specified. Arcs are by default right-handed, but\nleft-handed arcs are also supported, with parameter vectors lying in the\nw=-2 hyperplane.\n\ncompound figures\n^^^^^^^^^^^^^^^^\n\nA list of more than two points represents a multi-vertex polylines. If\nthere are at least four points in the list and the last point is the\nsame as the first, the polyline figure is closed. (We sometimes refer to\nthese point-list polygons or polylines as ``poly()`` entities.) Closed\ncoplanar polylines are drawn as polygons and may be subject to\ninside-outside testing. Like other elements of pure geometry, polylines\nare subject to sampling, unsampling, intersection calculation, **etc.**\n\nIf instead of sharp corners you want closed or open figures with rounded\ncorners, you should use ``Polyline`` or ``Polygon`` instances. Instances\nof these classes are used for representing compound geometric elements\nin an XY plane with C0 continuity. They differ from the point-list-based\n``poly()`` representation in that the elements of a ``Polyline`` or\n``Polygon`` can include lines and arcs as well as points. These elements\nneed not be contiguous, as successive elements will be automatically\njoined by straight lines. ``Polygons`` are special in that they are\nalways closed, and that any full circle elements are interpreted as\n“rounded corners,” with the actual span of the arc calculated after\ntangent lines are drawn.\n\nThe ``Polygon`` class supports boolean operations, as described below,\nand also supports the ``grow()`` operation that makes generating a\nderived figure that is bigger by a fixed amount easy. This grow feature\nis very useful for many engineering operations, such as creating an\noffset path for drill holes, CAM paths, etc.\n\nboolean operations on ``Polygon`` instances\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**yapCAD** supports boolean set operations on ``Polygon`` instances,\nallowing you to construct more complex two-dimensional figures from\nunion, intersection, and difference operations. Note that the difference\noperation can result in the creation of disjoint geometry in the form of\ntwo or more closed figures with positive area (see below), or closed\nfigures with holes.\n\nSee `Example 11 <./examples/example11.py>`__ for a relatively simple\nexample of boolean operations, and `Example\n12 <./examples/example12.py>`__ for a more complex example.\n\n**yapCAD** employs the convention that closed figures with right-handed\ngeometry (increasing the sampling parameter corresponds to points that\ntrace a counter-clockwise path) represent “positive” area, and that\nclosed figures with left-handed geometry represent holes. This\ndistinction is currently not operational, but will be important for\nfuture development such as turning polygons into rendered surfaces and\nextruding these surfaces into 3D.\n\ndisjoint compound geometry\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBoolean difference operations can result in disjoint figures. It is also\npossible to combine **yapCAD** geometric elements in geometry lists,\nwhich is to say a list of zero or more elements of **yapCAD** pure\ngeometry, which enforce no continuity constraints. Geometry lists\nprovide the basis for **yapCAD** rendering.\n\ndrawable geometry\n~~~~~~~~~~~~~~~~~\n\nThe idea is that you will do your computational geometry with “pure”\ngeometry, and then generate rendered previews or output with one or more\n``Drawable`` instances.\n\nIn **yapCAD**, geometry is rendered with instances of subclasses of\n``Drawable``, which at present include ``ezdxfDrawable``, a class for\nproducing DXF renderings using the awesome ``ezdxf`` package, and\n``pygletDrawable``, a class for interactive 2D and 3D OpenGL rendering.\n\nTo setup a drawing environment, you create an instance of the\n``Drawable`` base class corresponding to the rendering system you want\nto use.\n\nTo draw, create the pure geometry and then pass that to the drawbles’s\n``draw()`` method. To display or write out the results you will invoke\nthe ``display`` method of the drawable instance.\n\nsupported rendering systems\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDXF rendering using ``ezdxf`` and interactive OpenGL rendering using\n``pyglet`` are currently supported, and the design of **yapCAD** makes\nit easy to support other rendering backends.\n\n**yapCAD** architecture\n-----------------------\n\nUnder the hood, **yapCAD** is using `projective\ncoordinates <https://en.wikipedia.org/wiki/Homogeneous_coordinates>`__,\nsometimes called homogeneous coordinates, to represent points as 3D\ncoordinates in the w=1 hyperplane. If that sounds complicated, its\nbecause it is. :P But it does allow for a wide range of geometry\noperations, specifically `affine\ntransforms <https://www.cs.utexas.edu/users/fussell/courses/cs384g-fall2011/lectures/lecture07-Affine.pdf>`__\nto be represented as composable transformation matrices. The benefits of\nthis conceptual complexity is an architectural elegance and generality.\n\nSupport for affine transforms is at present rudimentary, but once a\nproper matrix transform stack is implemented it will allow for the\nseamless implementation and relatively easy use of a wide range of\ntransformation and projection operations.\n\nWhat does that buy you? It means that under the hood, **yapCAD** uses\nthe same type of geometry engine that advanced CAD and GPU-based\nrendering systems use, and should allow for a wide range of\ncomputational geometry systems, possibly hardware-accelerated, to be\nbuilt on top of it.\n\nThe good news is that you don’t need to know about homogeneous\ncoordinates, affine transforms, etc., to use **yapCAD**. And most of the\ntime you can pretend that your vectors are just two-dimensional if\neverything you are doing happens to lie in the x-y plane.\n\nSo, if you want to do simple 2D drawings, we have you covered. If you\nwant to build a GPU-accelerated constructive solid geometry system, you\ncan do that, too.\n\nNote\n----\n\nThis project has been set up using PyScaffold 3.2.3. For details and\nusage information on PyScaffold see https://pyscaffold.org/.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yapCAD",
    "package_url": "https://pypi.org/project/yapCAD/",
    "platform": null,
    "project_url": "https://pypi.org/project/yapCAD/",
    "project_urls": {
      "Documentation": "https://yapcad.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/rdevaul/yapCAD/"
    },
    "release_url": "https://pypi.org/project/yapCAD/0.2.5/",
    "requires_dist": [
      "ezdxf",
      "pyglet (<2)",
      "mpmath",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "yet another procedural CAD and computational geometry system",
    "version": "0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16283185,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3b10231045554a60105c5b9f71fc89c68e4bcc73f08409100fd9e3b49e54cb2",
          "md5": "c67b39aaa25a2360edea72f96dfdf375",
          "sha256": "bd6c0e3a05dc3dd480fbe80263a6c7bfd4403de3e19711edb177b994402c81a6"
        },
        "downloads": -1,
        "filename": "yapCAD-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c67b39aaa25a2360edea72f96dfdf375",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 61135,
        "upload_time": "2020-12-08T19:35:49",
        "upload_time_iso_8601": "2020-12-08T19:35:49.207078Z",
        "url": "https://files.pythonhosted.org/packages/f3/b1/0231045554a60105c5b9f71fc89c68e4bcc73f08409100fd9e3b49e54cb2/yapCAD-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "697905a5a14d436bea7494849e37cde8007ef726fe7e2028afc04be63aab2390",
          "md5": "ae77bec1241516fe29d83d91bce0a406",
          "sha256": "40c88b589f2590e238fa6d0fb7d8fcffd0c09e757f88aeec1577fc71ac0758e2"
        },
        "downloads": -1,
        "filename": "yapCAD-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ae77bec1241516fe29d83d91bce0a406",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1112139,
        "upload_time": "2020-12-08T19:35:50",
        "upload_time_iso_8601": "2020-12-08T19:35:50.919388Z",
        "url": "https://files.pythonhosted.org/packages/69/79/05a5a14d436bea7494849e37cde8007ef726fe7e2028afc04be63aab2390/yapCAD-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f06d1414b07c333fdd06377cfc53f8d49dae4d6ae0b1244b56727eb2adc9f2d",
          "md5": "5f280b81eac409c30ea3d42c83f6a19f",
          "sha256": "f453ccba3c9b45d7cc72a2c2dbe89312c31b150e6487cd3be7f4d17087f3dbdb"
        },
        "downloads": -1,
        "filename": "yapCAD-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f280b81eac409c30ea3d42c83f6a19f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 61521,
        "upload_time": "2020-12-08T21:23:16",
        "upload_time_iso_8601": "2020-12-08T21:23:16.860445Z",
        "url": "https://files.pythonhosted.org/packages/9f/06/d1414b07c333fdd06377cfc53f8d49dae4d6ae0b1244b56727eb2adc9f2d/yapCAD-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c11460c12a4f0f0cdce4c61b3aca6629ce6a529bc2ccf0e2fa36360bcbcdde0",
          "md5": "dde2ad32abecd686e02b702a84df2225",
          "sha256": "6d997fa5f6252da6377734e9e31b3500da7e083fc1eb191077ba4563123eb034"
        },
        "downloads": -1,
        "filename": "yapCAD-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dde2ad32abecd686e02b702a84df2225",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1114797,
        "upload_time": "2020-12-08T21:23:19",
        "upload_time_iso_8601": "2020-12-08T21:23:19.333434Z",
        "url": "https://files.pythonhosted.org/packages/4c/11/460c12a4f0f0cdce4c61b3aca6629ce6a529bc2ccf0e2fa36360bcbcdde0/yapCAD-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e24ece22878b02bfd033baaf2c6eea307b33474a49d2670a194400a64f98b83",
          "md5": "becbcecf165d46090b892f4944a60cbe",
          "sha256": "5600163f9701a1ebb7318733597f3ea28352b9135f9f7f7bc75a5ff42a237100"
        },
        "downloads": -1,
        "filename": "yapCAD-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "becbcecf165d46090b892f4944a60cbe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 64356,
        "upload_time": "2020-12-12T04:49:31",
        "upload_time_iso_8601": "2020-12-12T04:49:31.013262Z",
        "url": "https://files.pythonhosted.org/packages/3e/24/ece22878b02bfd033baaf2c6eea307b33474a49d2670a194400a64f98b83/yapCAD-0.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8821475562d6440f496583e572672e936410e4ec58f5e8a1f7c25e0b9ec8c62f",
          "md5": "593de6b1704e592177fccca46ef4d282",
          "sha256": "542bca2ed361bd9297828ca4091da01a2c46cab948d7f8baa096c4b4bee6556a"
        },
        "downloads": -1,
        "filename": "yapCAD-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "593de6b1704e592177fccca46ef4d282",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1652052,
        "upload_time": "2020-12-12T04:49:32",
        "upload_time_iso_8601": "2020-12-12T04:49:32.556012Z",
        "url": "https://files.pythonhosted.org/packages/88/21/475562d6440f496583e572672e936410e4ec58f5e8a1f7c25e0b9ec8c62f/yapCAD-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aa1de0b674f05bb83f9b8e47d4b49aaafe18edd35b50a8bad09822f11441df3",
          "md5": "e479db1022b2e5055672fb20d5ecb1d3",
          "sha256": "7e12738252cb5d09550b61787e19bb752e6a264a01d2e8e41c36e5b65efc1d49"
        },
        "downloads": -1,
        "filename": "yapCAD-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e479db1022b2e5055672fb20d5ecb1d3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 64807,
        "upload_time": "2020-12-14T08:02:43",
        "upload_time_iso_8601": "2020-12-14T08:02:43.890267Z",
        "url": "https://files.pythonhosted.org/packages/9a/a1/de0b674f05bb83f9b8e47d4b49aaafe18edd35b50a8bad09822f11441df3/yapCAD-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50feac2ceac5cfa9270170dacef71adbe8ff9143a5ac2e54840eab436cbc2640",
          "md5": "cdf10eae64abca69582974e66b403a9f",
          "sha256": "e8d58c29c04fa110bfea45fe5cbb34fd293fbc035f86b0de11dc2c1a6f7b62dc"
        },
        "downloads": -1,
        "filename": "yapCAD-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cdf10eae64abca69582974e66b403a9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1672719,
        "upload_time": "2020-12-14T08:02:45",
        "upload_time_iso_8601": "2020-12-14T08:02:45.454234Z",
        "url": "https://files.pythonhosted.org/packages/50/fe/ac2ceac5cfa9270170dacef71adbe8ff9143a5ac2e54840eab436cbc2640/yapCAD-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "212a93f91688252f6d0076f0f4b2453e0f1779f62a4547a67e6e2c200219c340",
          "md5": "8669e333e0c2f942ade1f728bd2756b0",
          "sha256": "23980b8978c60e76b37c37e5fabff15cbff2ccc08b9fa567bc00aeae078b919f"
        },
        "downloads": -1,
        "filename": "yapCAD-0.2.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8669e333e0c2f942ade1f728bd2756b0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 63381,
        "upload_time": "2023-01-02T23:24:32",
        "upload_time_iso_8601": "2023-01-02T23:24:32.566263Z",
        "url": "https://files.pythonhosted.org/packages/21/2a/93f91688252f6d0076f0f4b2453e0f1779f62a4547a67e6e2c200219c340/yapCAD-0.2.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3939abf76972241da8c1cd2c594e70013c4e16e0b9cc4e26bbb5f25586cde416",
          "md5": "fb25b30ede7620b52f361ebeb6713d73",
          "sha256": "0a965fe5a8404e37407b2cb2aa5998579f26b998fb0d848f26a8db6686c5b471"
        },
        "downloads": -1,
        "filename": "yapCAD-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fb25b30ede7620b52f361ebeb6713d73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1671097,
        "upload_time": "2023-01-02T23:24:34",
        "upload_time_iso_8601": "2023-01-02T23:24:34.499708Z",
        "url": "https://files.pythonhosted.org/packages/39/39/abf76972241da8c1cd2c594e70013c4e16e0b9cc4e26bbb5f25586cde416/yapCAD-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "212a93f91688252f6d0076f0f4b2453e0f1779f62a4547a67e6e2c200219c340",
        "md5": "8669e333e0c2f942ade1f728bd2756b0",
        "sha256": "23980b8978c60e76b37c37e5fabff15cbff2ccc08b9fa567bc00aeae078b919f"
      },
      "downloads": -1,
      "filename": "yapCAD-0.2.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8669e333e0c2f942ade1f728bd2756b0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 63381,
      "upload_time": "2023-01-02T23:24:32",
      "upload_time_iso_8601": "2023-01-02T23:24:32.566263Z",
      "url": "https://files.pythonhosted.org/packages/21/2a/93f91688252f6d0076f0f4b2453e0f1779f62a4547a67e6e2c200219c340/yapCAD-0.2.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3939abf76972241da8c1cd2c594e70013c4e16e0b9cc4e26bbb5f25586cde416",
        "md5": "fb25b30ede7620b52f361ebeb6713d73",
        "sha256": "0a965fe5a8404e37407b2cb2aa5998579f26b998fb0d848f26a8db6686c5b471"
      },
      "downloads": -1,
      "filename": "yapCAD-0.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "fb25b30ede7620b52f361ebeb6713d73",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 1671097,
      "upload_time": "2023-01-02T23:24:34",
      "upload_time_iso_8601": "2023-01-02T23:24:34.499708Z",
      "url": "https://files.pythonhosted.org/packages/39/39/abf76972241da8c1cd2c594e70013c4e16e0b9cc4e26bbb5f25586cde416/yapCAD-0.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}