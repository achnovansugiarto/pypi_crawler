{
  "info": {
    "author": "",
    "author_email": "Jay Qi <jayqi.opensource@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# typenames : String representations of type annotations\n\n[![Docs Status](https://img.shields.io/badge/docs-stable-informational)](https://jayqi.github.io/typenames/)\n[![PyPI](https://img.shields.io/pypi/v/typenames.svg)](https://pypi.org/project/typenames/)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/typenames)](https://pypi.org/project/typenames/)\n[![tests](https://github.com/jayqi/typenames/actions/workflows/tests.yml/badge.svg?branch=main)](https://github.com/jayqi/typenames/actions/workflows/tests.yml?query=branch%3Amain)\n[![codecov](https://codecov.io/gh/jayqi/typenames/branch/main/graph/badge.svg)](https://codecov.io/gh/jayqi/typenames)\n\n**typenames** is a configurable Python library for creating string representations of type annotations. By default, it produces compact representations by removing standard library module names. Configurable options include standardizing on `|` operator syntax for unions or standard collections classes for generics.\n\n```python\nimport typing\nfrom typenames import typenames\n\ntypenames(int)\n#> 'int'\ntypenames(dict[str, typing.Any])\n#> 'dict[str, Any]'\ntypenames(str | int)\n#> 'str | int'\ntypenames(typing.Optional[str])\n#> 'Optional[str]'\n```\n\n## Why use this library?\n\nString representations of Python type objects, type aliases, and special typing forms are inconsistent and often verbose. Here are some comparisons using default settings against built-in string representations:\n\n| Input | With `str(...)` | With `typenames(...)` |\n| :-: | :-: | :-: |\n| `int` | `<class 'int'>` | `int` |\n| `list` | `<class 'list'>` | `list` |\n| `typing.Optional[int]` | `typing.Optional[int]` | `Optional[int]` |\n| `collections.abc.Iterator[typing.Any]` | `collections.abc.Iterator[typing.Any]` | `Iterator[Any]` |\n| `typing.Literal[MyEnum.NAME]` | `typing.Literal[<MyEnum.NAME: 'value'>]` | `Literal[MyEnum.NAME]` |\n\ntypenames also has handy configurable functionality, such as:\n\n- Forcing standardization on `|` operator union syntax (e.g., `Union[int, str]` to `int | str`) or vice versa\n- Forcing standardization on `|` operator optional syntax (e.g., `Optional[int]` to `int | None`) or vice versa\n- Forcing standardization on standard collection types for generics (e.g., `List[int]` to `list[int]`) or vice versa\n- Controlling exactly which module names to remove using regex patterns.\n\nNo need for string manipulation to get what you want!\n\n## Installation\n\ntypenames is available on PyPI:\n\n```bash\npip install typenames\n```\n\n## Basic Usage\n\nThe main way to use the library is the `typenames` function. Calling it on a type annotation renders a string representation:\n\n```python\nimport typing\nfrom typenames import typenames\n\ntypenames(int)\n#> 'int'\ntypenames(typing.Optional[str])\n#> 'Optional[str]'\ntypenames(collections.abc.Callable[[int], tuple[str, ...]])\n#> 'Callable[[int], tuple[str, ...]]\n```\n\nUnder the hood, typenames parses a type annotation as a tree structure. If you need to see the parsed tree, use the `parse_type_tree` function to return the root node. You can get the rendered string representation by calling `str(...)` on root node.\n\n```python\nimport typing\nfrom typenames import parse_type_tree\n\ntree = parse_type_tree(typing.Union[typing.Any, list[typing.Any]])\ntree\n#> <GenericNode typing.Union[<TypeNode typing.Any>, <GenericNode <class 'list'>[<TypeNode typing.Any>]>]>\nstr(tree)\n#> 'Union[Any, list[Any]]'\n```\n\n## Configurable options\n\nAll configuration options can be passed as keyword arguments to either the `typenames` or `parse_type_tree` functions.\n\n### Union Syntax (`union_syntax`)\n\nThis option controls how unions are rendered. It supports both the `typing.Union` special form and the `|` operator (bitwise or) syntax from [PEP 604](https://peps.python.org/pep-0604/). Valid options are defined by the enum `UnionSyntax` and include:\n\n- **`\"as_given\"` (default)**: render the union as it is given without changing syntax.\n- **`\"or_operator\"`**: render all type unions using the `|` operator.\n- **`\"special_form\"`**: render all type unions using the `typing.Union` special form.\n\nNote that runtime use of the `|` operator between types is new in Python 3.10. To use in earlier versions of Python, you will need to use postponed evaluation of annotations à la [PEP 563](https://peps.python.org/pep-0563/) with `from __future__ import__annotations__`. Support for the `|` operator is only a limitation on providing type annotation inputs to typenames, and not a limitation on output rendering.\n\n**Limitations:** Python automatically flattens unions when evaluating them at runtime. Since typenames uses runtime type objects, it will only see the flattened result and not know if your original input was nested. Furthermore, any mixing of `|` operator syntax and any typing module types will result in a `typing.Union` union, so `as_given` will always render such inputs with `typing.Union`.\n\n\n### Optional Syntax (`optional_syntax`)\n\nThis option controls how optional types are rendered. It supports both the `typing.Optional` special form and the `|` operator (bitwise or) syntax from [PEP 604](https://peps.python.org/pep-0604/). Valid options are defined by the enum `OptionalSyntax` and include:\n\n- **`\"as_given\"` (default)**: render the optional type as it is given without changing syntax\n- **`\"or_operator\"`**: render all optional types using the `|` operator\n- **`\"union_special_form\"`**: render all optional types using the `typing.Optional` special form\n- **`\"optional_special_form\"`**: render all optional types using the `typing.Optional` special form\n\nNote that runtime use of the `|` operator between types is new in Python 3.10. To use in earlier versions of Python, you will need to use postponed evaluation of annotations à la [PEP 563](https://peps.python.org/pep-0563/) with `from __future__ import__annotations__`. Support for the `|` operator is only a limitation on providing type annotation inputs to typenames, and not a limitation on output rendering.\n\n**Limitations:**\n\n- Python automatically converts `typing.Union[..., None]` to `typing.Optional[...]` when evaluating at runtime. Since typenames uses runtime type objects, it will only see the result using `typing.Optional` and not know the form of your original input.\n- Python automatically flattens unions when evaluating them at runtime. Since typenames uses runtime type objects, it will only see the flattened result and not know if your original input was nested. Furthermore, any mixing of `|` operator syntax and any typing module types will result in a `typing.Union` union, so `as_given` will always render such inputs with typing module special forms.\n- The `typing.Optional` special form only accepts exactly one parameter. By default, typenames will render cases with multiple parameters with `Optional[Union[...]]`. You can use the `union_syntax` option to control the inner union's syntax.\n\n\n### Standard Collection Syntax (`standard_collection_syntax`)\n\nThis option controls how parameterized standard collection generic types are rendered. It supports both the typing module's generic aliases (e.g., `typing.List[...]`) and the standard class (e.g., `list[...]`) syntax from [PEP 585](https://peps.python.org/pep-0585/). Valid options are defined by the enum `StandardCollectionSyntax` and include:\n\n- **`\"as_given\"` (default)**: render the parameterized generic type as it is given without changing syntax\n- **`\"standard_class\"`**: render all parameterized standard collection generic types using their class\n- **`\"typing_module\"`**: render all parameterized standard collection generic types using the typing module's generic alias\n\nNote that runtime use of standard collection classes as parameterized generic types is new in Python 3.9. To use in earlier versions of Python, you will need to use postponed evaluation of annotations à la [PEP 563](https://peps.python.org/pep-0563/) with `from __future__ import__annotations__`. Support for standard collection classes for parameterized generic types is only a limitation on providing type annotation inputs to typenames, and not a limitation on output rendering.\n\n### Removing Module Names (`remove_modules`)\n\nThis option controls how module names are removed from the rendered output. It takes a list of inputs, which can either be a string of the module name or a `re.Pattern` regex pattern directly (the result of `re.compile`). String inputs are templated into the following regex pattern:\n\n```python\nmodule: str  # Given module name\nre.compile(r\"^{}\\.\".format(module.replace(\".\", r\"\\.\")))\n```\n\nNote that module names are removed in the given order, so having entries that are submodules of other entries can potentially lead to the wrong behavior. You can either order them from higher-depth to lower-depth, or directly provide a compiled pattern with optional groups. For example, the pattern `re.compile(r\"^collections\\.(abc\\.)?\")` will match both `\"collections.\"` and `\"collections.abc.\"`.\n\nThe default list of module names include the standard library modules relevant to [PEP 585](https://peps.python.org/pep-0585/) plus `types` and `typing`. It can be accessed at `DEFAULT_REMOVE_MODULES`.\n\n```python\nDEFAULT_REMOVE_MODULES: List[Union[str, re.Pattern]] = [\n    \"__main__\",\n    \"builtins\",\n    re.compile(r\"^collections\\.(abc\\.)?\"),\n    \"contextlib\",\n    \"re\",\n    \"types\",\n    \"typing\",\n]\n```\n\nIf you are trying to _add_ additional modules to this option (rather than overriding the defaults), the easiest way to do so is to concatenate with the default list:\n\n```python\nfrom typing import Optional\nfrom typenames import typenames, DEFAULT_REMOVE_MODULES, BaseNode\n\ntypenames(Optional[BaseNode])\n#> 'Optional[typenames.BaseNode]'\ntypenames(Optional[BaseNode], remove_modules=[\"typenames\"])\n#> 'typing.Optional[BaseNode]'\ntypenames(\n    Optional[BaseNode],\n    remove_modules=DEFAULT_REMOVE_MODULES + [\"typenames\"],\n)\n#> 'Optional[BaseNode]'\n```\n\nTo remove all module names, you can use `REMOVE_ALL_MODULES`, which contains the pattern `re.compile(r\"^(\\w+\\.)+\")`.\n\n---\n\n<sup>Reproducible examples created by <a href=\"https://github.com/jayqi/reprexlite\">reprexlite</a>.</sup>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "pep 585,pep 604,type annotations,type hints,typing",
    "license": "MIT License  Copyright (c) 2023 Jay Qi  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "typenames",
    "package_url": "https://pypi.org/project/typenames/",
    "platform": null,
    "project_url": "https://pypi.org/project/typenames/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jayqi/typenames/issues",
      "Changelog": "https://jayqi.github.io/typenames/stable/changelog/",
      "Documentation": "https://jayqi.github.io/typenames/",
      "Homepage": "https://jayqi.github.io/typenames/",
      "Repository": "https://github.com/jayqi/typenames"
    },
    "release_url": "https://pypi.org/project/typenames/1.0.0/",
    "requires_dist": [
      "typing-extensions>4; python_version < '3.8'",
      "pytest>=6; extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "String representations of type annotations.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16955040,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "519c6502ab306705b982d8d4cfa6aea5d812236bac7847aa58d26a7285eeea0e",
          "md5": "f3b8023e89ccab0a5188eb7ca6c8df5b",
          "sha256": "07c233e5a602a076b8c09b26d649221afe0a99a8d8b5fc6658a13dfe9f393b3e"
        },
        "downloads": -1,
        "filename": "typenames-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3b8023e89ccab0a5188eb7ca6c8df5b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9705,
        "upload_time": "2023-02-21T02:12:16",
        "upload_time_iso_8601": "2023-02-21T02:12:16.188086Z",
        "url": "https://files.pythonhosted.org/packages/51/9c/6502ab306705b982d8d4cfa6aea5d812236bac7847aa58d26a7285eeea0e/typenames-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5607ab85b56808ba221a1a58be02ead7d505ccecde76df2fc881b1a657f62f55",
          "md5": "611753b17d0b908b5afd660b4e19fc7e",
          "sha256": "0c4f46ab0d01ea1c1b7e70e596a21d186ef78a5dc0f2d7db0e62c64b45626ac2"
        },
        "downloads": -1,
        "filename": "typenames-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "611753b17d0b908b5afd660b4e19fc7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15934,
        "upload_time": "2023-02-21T02:12:17",
        "upload_time_iso_8601": "2023-02-21T02:12:17.787692Z",
        "url": "https://files.pythonhosted.org/packages/56/07/ab85b56808ba221a1a58be02ead7d505ccecde76df2fc881b1a657f62f55/typenames-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "519c6502ab306705b982d8d4cfa6aea5d812236bac7847aa58d26a7285eeea0e",
        "md5": "f3b8023e89ccab0a5188eb7ca6c8df5b",
        "sha256": "07c233e5a602a076b8c09b26d649221afe0a99a8d8b5fc6658a13dfe9f393b3e"
      },
      "downloads": -1,
      "filename": "typenames-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f3b8023e89ccab0a5188eb7ca6c8df5b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9705,
      "upload_time": "2023-02-21T02:12:16",
      "upload_time_iso_8601": "2023-02-21T02:12:16.188086Z",
      "url": "https://files.pythonhosted.org/packages/51/9c/6502ab306705b982d8d4cfa6aea5d812236bac7847aa58d26a7285eeea0e/typenames-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5607ab85b56808ba221a1a58be02ead7d505ccecde76df2fc881b1a657f62f55",
        "md5": "611753b17d0b908b5afd660b4e19fc7e",
        "sha256": "0c4f46ab0d01ea1c1b7e70e596a21d186ef78a5dc0f2d7db0e62c64b45626ac2"
      },
      "downloads": -1,
      "filename": "typenames-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "611753b17d0b908b5afd660b4e19fc7e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15934,
      "upload_time": "2023-02-21T02:12:17",
      "upload_time_iso_8601": "2023-02-21T02:12:17.787692Z",
      "url": "https://files.pythonhosted.org/packages/56/07/ab85b56808ba221a1a58be02ead7d505ccecde76df2fc881b1a657f62f55/typenames-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}