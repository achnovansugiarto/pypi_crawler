{
  "info": {
    "author": "Vincent Mallet and Michael Nilges and Guillaume Bouvier",
    "author_email": "vincent.mallet96@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Self-Organizing Map\n\nPyTorch implementation of a Self-Organizing Map. The implementation makes possible the use of a GPU if available for\nfaster computations. It follows the scikit package semantics for training and usage of the model. It also includes\nrunnable scripts to avoid coding.\n\nExample of a MD clustering using `quicksom`:\n\n![U-matrix](https://raw.githubusercontent.com/bougui505/quicksom/master/figs/flow_cluster.png)\n\n### Requirements and setup\n\nThe SOM object requires PyTorch installed.\n\nIt has dependencies in numpy, scipy and scikit-learn and scikit-image. The MD application requires pymol to load the\ntrajectory that is not included in the dependencies\n\nTo set up the project, we suggest using conda environments. Install [PyTorch](https://pytorch.org/get-started/locally/)\nand run :\n\n```\npip install quicksom\n```\n\n### SOM object interface\n\nThe SOM object can be created using any grid size, with a optional periodic topology. One can also choose optimization\nparameters such as the number of epochs to train or the batch size\n\nTo use it, we include three scripts to :\n\n- fit a SOM\n- to optionally build the clusters manually with a gui\n- to predict cluster affectations for new data points\n\n```\n$ quicksom_fit -h\n\nusage: quicksom_fit [-h] [-i IN_NAME] [--pdb PDB] [--select SELECT]\n                    [--select_align SELECT_ALIGN] [-o OUT_NAME] [-m M] [-n N]\n                    [--periodic] [-j] [--n_epoch N_EPOCH]\n                    [--batch_size BATCH_SIZE] [--num_workers NUM_WORKERS]\n                    [--alpha ALPHA] [--sigma SIGMA] [--scheduler SCHEDULER]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i IN_NAME, --in_name IN_NAME\n                        Can be either a .npy file or a .dcd molecular dynamics\n                        trajectory. If you are providing a .dcd file, you\n                        should also provide a PDB and optional selections.\n  --pdb PDB (optional)  If using directly a dcd file, we need to add a PDB for\n                        selection\n  --select SELECT (optional)\n                        Atoms to select\n  --select_align SELECT_ALIGN (optional)\n                        Atoms to select for structural alignment\n  -o OUT_NAME, --out_name OUT_NAME\n                        name of pickle to dump\n  -m M, --m M           The width of the som\n  -n N, --n N           The height of the som\n  --periodic            if set, periodic topology is used\n  -j, --jax             To use the jax version\n  --n_epoch N_EPOCH     The number of iterations\n  --batch_size BATCH_SIZE (optional)\n                        The batch size to use\n  --num_workers NUM_WORKERS (optional)\n                        The number of workers to use\n  --alpha ALPHA (optional)\n                        The initial learning rate\n  --sigma SIGMA (optional)\n                        The initial sigma for the convolution\n  --scheduler SCHEDULER (optional)\n                        Which scheduler to use, can be linear, exp or half\n```\n\nYou can also use the following two scripts to use your trained SOM.\n\n```\n$ quicksom_gui -h\n$ quicksom_predict -h\n```\n\nThe SOM object is also importable from python scripts to use directly in your analysis pipelines :\n\n```python\nimport numpy\nfrom quicksom.som import SOM\n\n# Get data\nX = numpy.load('contact_desc.npy')\n\n# Create SOM object and train it, then dump it as a pickle object\nm, n = 100, 100\ndim = X.shape[1]\nn_epoch = 5\nbatch_size = 100\nsom = SOM(m, n, dim, n_epoch=n_epoch)\nlearning_error = som.fit(X, batch_size=batch_size)\nsom.save_pickle('som.p')\n\n# Usage on the input data, predicted_clusts is an array of length n_samples with clusters affectations\nsom.load_pickle('som.p')\npredicted_clusts, errors = som.predict_cluster(X)\n```\n\n### Using JAX\n\n[JAX](https://jax.readthedocs.io/en/latest/) is an efficient array computation library\nthat enables just-in-time (jit) compilation of functions.\nWe recently enabled jax support for our tool. Jax accelerated SOM usage\nwas reported to __run twice faster than using the torch backend.__\n\nJAX can be installed following [these steps](https://github.com/google/jax#installation).\nThen the tools usually expose a -j option to use the JAX backend. \nFor instance, try running :\n```\nquicksom_fit -i data/2lj5.npy -j\n```\n\nWe have kept a common interface for most of the function calls. You should\nnot have to adapt your scripts too much, except for the device management that\nhas a different syntax in JAX. For examples, look at the executable scripts.\nTo use JAX from your scripts, simply change the import in the following manner.\n```\n# Classic import, to use the torch backend\nfrom quicksom.som import SOM\n# Jax import\nfrom quicksom.somax import SOM\n```\n\n### SOM training on molecular dynamics (MD) trajectories\n\n#### Scripts and extra dependencies:\n\nTo deal with trajectories, we use the following new libraries :\n[Pymol](https://anaconda.org/schrodinger/pymol), \n[pymol-psico](https://github.com/speleo3/pymol-psico),\n[MDAnalysis](https://docs.mdanalysis.org/1.0.0/index.html). \nTo set up these dependencies using conda, just type :\n\n```\nconda install -c schrodinger pymol pymol-psico\npip install MDAnalysis\n```\n\n#### Fitting a SOM to an MD trajectory\n\nIn MD trajectories, all atoms including solvant can be present, making\nthe coordinates in each frame unnecessary big and impractical. We offer\nthe possibility to only keep the relevant indices using a pymol selection,\nfor instance `--select name CA`. Moreover, before clustering the conformations,\nwe need to align them.\n\n\n_Approach 1 :_ We used to rely on a two step process to fit a SOM to a trajectory :\n- Create a npy file with aligned atomic coordinates of C-alpha, using an utility script : `dcd2npy`\n- Fit the SOM as above using this npy file.\n\n\n_Approach 2 :_ In our new version of the SOM, we skip the intermediary step\nand rely on PyTorch efficient multiprocess data loading to align the data\non the fly. Moreover this approach scales to trajectories that don't fit in memory. \nIt is now the recommended approach.\n\n\nThe two alternative sets of following commands can be applied for a MD clustering :\n\n```\n$ quicksom_fit -i data/2lj5.dcd --pdb data/2lj5.pdb --select 'name CA' -o data/som_2lj5.p --n_iter 100 --batch_size 50 --periodic --alpha 0.5\nOR USE THE TWO-STEP PROCESS\n$ dcd2npy --pdb data/2lj5.pdb --dcd data/2lj5.dcd --select 'name CA'\n$ quicksom_fit -i data/2lj5.npy -o data/som_2lj5.p --n_iter 100 --batch_size 50 --periodic --alpha 0.5\n\n1/100: 50/301 | alpha: 0.500000 | sigma: 25.000000 | error: 397.090729 | time 0.387760\n4/100: 150/301 | alpha: 0.483333 | sigma: 24.166667 | error: 8.836357 | time 5.738029\n7/100: 250/301 | alpha: 0.466667 | sigma: 23.333333 | error: 8.722509 | time 11.213565\n[...]\n91/100: 50/301 | alpha: 0.050000 | sigma: 2.500000 | error: 5.658005 | time 137.348755\n94/100: 150/301 | alpha: 0.033333 | sigma: 1.666667 | error: 5.373021 | time 142.033695\n97/100: 250/301 | alpha: 0.016667 | sigma: 0.833333 | error: 5.855451 | time 147.203326\n```\n\n#### Analysis and clustering of the map using `quicksom_gui`:\n\n```bash\nquicksom_gui -i data/som_2lj5.p\n```\n\n### Analysis of MD trajectories with this SOM\n\nWe now have a trained SOM and we can use several functionalities such as clustering input data points and grouping them\ninto separate dcd files, creating a dcd with one centroid per fram or plotting of the U-Matrix and its flow.\n\n#### Cluster assignment of input data points:\n\n```bash\nquicksom_predict -i data/2lj5.npy -o data/2lj5 -s data/som_2lj5.p\n\n```\n\nThis command generates 3 files:\n\n```\n$ ls data/2lj5_*.txt\n\ndata/2lj5_bmus.txt\ndata/2lj5_clusters.txt\ndata/2lj5_codebook.txt\n```\n\ncontaining the data:\n\n- Best Matching Unit with error for each data point - Cluster assignment - Assignment for each SOM cell of the closest\n  data point (BMU with minimal error). `-1` means no assignment\n\n```\n$ head -3 data/2lj5_bmus.txt\n\n38.0000 36.0000 4.9054\n37.0000 47.0000 4.6754\n2.0000 27.0000 7.0854\n```\n\n```\n$ head -3 data/2lj5_clusters.txt\n\n4 9 22 27 28 32 39 43 44 45 46 48 75 77 78 92 94 98 102 119 126 127 142 147 153 154 162 171 172 180 185 189 190 191 197 206 218 223 226 227 235 245 255 265 285 286 292 299\n3 5 7 10 14 21 23 26 29 33 37 51 54 55 63 64 70 74 80 82 83 84 85 86 88 99 103 104 106 107 108 116 121 123 129 131 132 133 139 140 146 148 150 155 159 161 163 165 170 173 179 181 183 200 209 214 217 220 221 228 229 231 237 239 240 241 247 248 250 251 256 258 260 267 275 277 278 279 287 291 293 296 297 301\n1 2 8 11 12 13 15 17 18 19 20 24 25 30 31 35 38 41 42 50 52 56 58 60 61 62 65 66 68 69 71 72 73 79 87 89 90 91 93 95 96 97 101 105 109 110 112 113 114 118 120 122 124 125 130 134 136 137 138 141 143 144 145 151 152 156 157 158 160 166 168 169 174 175 176 177 178 184 187 188 193 195 201 205 208 210 211 212 213 215 216 222 225 230 232 233 234 236 242 244 246 249 252 253 254 259 261 262 264 266 268 270 271 272 274 276 280 282 283 284 288 289 290 295 298 300\n```\n\n#### Cluster extractions from the input `dcd` using the `quicksom_extract` tool:\n\n```\n$ quicksom_extract -h\n\nExtract clusters from a dcd file\n    quicksom_extract -p pdb_file -t dcd_file -c cluster_file\n```\n\n```bash\nquicksom_extract -p data/2lj5.pdb -t data/2lj5.dcd -c data/2lj5_clusters.txt\n\n```\n\n```\n$ ls -v data/cluster_*.dcd\n\ndata/cluster_1.dcd\ndata/cluster_2.dcd\ndata/cluster_3.dcd\ndata/cluster_4.dcd\n```\n\n#### Extraction of the SOM centroids from the input `dcd`\n\n```bash\ngrep -v \"\\-1\" data/2lj5_codebook.txt > _codebook.txt\nmdx --top data/2lj5.pdb --traj data/2lj5.dcd --fframes _codebook.txt --out data/centroids.dcd\nrm _codebook.txt\n\n```\n\n#### Plotting the U-matrix:\n\n```bash\npython3 -c 'import pickle\nimport matplotlib.pyplot as plt\nsom=pickle.load(open(\"data/som_2lj5.p\", \"rb\"))\nplt.matshow(som.umat)\nplt.savefig(\"data/umat_2lj5.png\")\n'\n\n```\n\n#### Flow analysis\n\nThe flow of the trajectory can be projected onto the U-matrix using the following command:\n\n```\n$ quicksom_flow -h\n\nusage: quicksom_flow [-h] [-s SOM_NAME] [-b BMUS] [-n] [-m] [--stride STRIDE]\n\nPlot flow for time serie clustering.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SOM_NAME, --som_name SOM_NAME\n                        name of the SOM pickle to load\n  -b BMUS, --bmus BMUS  BMU file to plot\n  -n, --norm            Normalize flow as unit vectors\n  -m, --mean            Average the flow by the number of structure per SOM\n                        cell\n  --stride STRIDE       Stride of the vectors field\n```\n\nWith this toy example, we get the following plot:\n\n![U-matrix](https://raw.githubusercontent.com/bougui505/quicksom/master/figs/flow_test.png)\n\n#### Data projection\n\n```\n$ quicksom_project -h\n\nusage: quicksom_project [-h] [-s SOM_NAME] [-b BMUS] -d DATA\n\nPlot flow for time serie clustering.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SOM_NAME, --som_name SOM_NAME\n                        name of the SOM pickle to load\n  -b BMUS, --bmus BMUS  BMU file to plot\n  -d DATA, --data DATA  Data file to project\n```\n\n### Miscellaneous\n\nIf you run into any bug or would like to ask for a functionnality, feel\nfree to open an issue or reach out by mail.\n\nIf this work is of use to you, it was published as an Application Note in\nBioinformatics. You can use the following bibtex : \n\n```\n@article{mallet2021quicksom,\n  title={quicksom: Self-Organizing Maps on GPUs for clustering of molecular dynamics trajectories},\n  author={Mallet, Vincent and Nilges, Michael and Bouvier, Guillaume},\n  journal={Bioinformatics},\n  volume={37},\n  number={14},\n  pages={2064--2065},\n  year={2021},\n  publisher={Oxford University Press}\n}\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bougui505/quicksom",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quicksom",
    "package_url": "https://pypi.org/project/quicksom/",
    "platform": null,
    "project_url": "https://pypi.org/project/quicksom/",
    "project_urls": {
      "Homepage": "https://github.com/bougui505/quicksom"
    },
    "release_url": "https://pypi.org/project/quicksom/1.0.0/",
    "requires_dist": [
      "numpy (>1.0)",
      "scipy (>0.1)",
      "scikit-image (>0.15)",
      "scikit-learn (>0.22)"
    ],
    "requires_python": ">=3.5",
    "summary": "Self Organizing Maps efficient implementation using PyTorch and JAX",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13324588,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed00b5a4f0f61cb6af2b17b128539f6bc1d96df78bbfd62e873320a46950a543",
          "md5": "60a33b4f80507ea25ec4e0b2bca81ba6",
          "sha256": "a6504b6e963cec0f6bc9e4e23744440e22c23b3d0f781e75990bb6240af70e67"
        },
        "downloads": -1,
        "filename": "quicksom-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60a33b4f80507ea25ec4e0b2bca81ba6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 3179,
        "upload_time": "2020-09-10T11:14:45",
        "upload_time_iso_8601": "2020-09-10T11:14:45.096484Z",
        "url": "https://files.pythonhosted.org/packages/ed/00/b5a4f0f61cb6af2b17b128539f6bc1d96df78bbfd62e873320a46950a543/quicksom-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59ae832e5428b74fdef5a3dd47681df817d12689013df7182425bfdbb10f6488",
          "md5": "9590aa152a4da9fc7354e18ac74da189",
          "sha256": "ef87cca8cda9a6797b17835217e7817cbccd21b43097e6ef07bb5821287a2263"
        },
        "downloads": -1,
        "filename": "quicksom-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9590aa152a4da9fc7354e18ac74da189",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 2458,
        "upload_time": "2020-09-10T11:14:47",
        "upload_time_iso_8601": "2020-09-10T11:14:47.670779Z",
        "url": "https://files.pythonhosted.org/packages/59/ae/832e5428b74fdef5a3dd47681df817d12689013df7182425bfdbb10f6488/quicksom-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87b116b42dc644e9e20fda5dabe2cd815ebfa6e0605d63cf49277883ccee643a",
          "md5": "9f34d73ec037edc21ac49c1413de87e0",
          "sha256": "354ac6e291fb02961bff537fa4466915a888e506f29bfb9015d7ef699383b28b"
        },
        "downloads": -1,
        "filename": "quicksom-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f34d73ec037edc21ac49c1413de87e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 5208,
        "upload_time": "2020-09-15T08:46:39",
        "upload_time_iso_8601": "2020-09-15T08:46:39.710784Z",
        "url": "https://files.pythonhosted.org/packages/87/b1/16b42dc644e9e20fda5dabe2cd815ebfa6e0605d63cf49277883ccee643a/quicksom-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7a0f3441de41a41d23a70c9a4a9d932bc84f7bb7439b915e7f6999cf7992afc",
          "md5": "9c95a9920df84619e2a243a960e8d7ce",
          "sha256": "4f4f9b1be6dc00c96e3250df82c9bf9d7d18a723ad9c883db4be0a668db92f60"
        },
        "downloads": -1,
        "filename": "quicksom-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9c95a9920df84619e2a243a960e8d7ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 3375,
        "upload_time": "2020-09-15T08:46:40",
        "upload_time_iso_8601": "2020-09-15T08:46:40.692845Z",
        "url": "https://files.pythonhosted.org/packages/f7/a0/f3441de41a41d23a70c9a4a9d932bc84f7bb7439b915e7f6999cf7992afc/quicksom-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f522aafeadf7709163bc0fe21d0bd6c27cfafb4411650bc2e1c3fb0772e219c",
          "md5": "222862ef3dfb89def75ee838c02bbf2b",
          "sha256": "e2a5a3c930a76cc2d3fba6cc9c388e23277fe0374ecad9f897c00a92a28c317f"
        },
        "downloads": -1,
        "filename": "quicksom-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "222862ef3dfb89def75ee838c02bbf2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16400,
        "upload_time": "2020-09-15T09:21:38",
        "upload_time_iso_8601": "2020-09-15T09:21:38.118788Z",
        "url": "https://files.pythonhosted.org/packages/6f/52/2aafeadf7709163bc0fe21d0bd6c27cfafb4411650bc2e1c3fb0772e219c/quicksom-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c83b4ad0311753bea51b41e24a2f3acc6abee4d9c3f8336aceb118d3f37dace",
          "md5": "4df5f5ebaab116e12790efccaa385676",
          "sha256": "2823de3ad43a7457473f8d8e8a17dd6ddf38d219cc5d18c2f5d2332ae001c69a"
        },
        "downloads": -1,
        "filename": "quicksom-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4df5f5ebaab116e12790efccaa385676",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13511,
        "upload_time": "2020-09-15T09:21:39",
        "upload_time_iso_8601": "2020-09-15T09:21:39.401101Z",
        "url": "https://files.pythonhosted.org/packages/2c/83/b4ad0311753bea51b41e24a2f3acc6abee4d9c3f8336aceb118d3f37dace/quicksom-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2172278aa4d3851b4e8841419967277cee113b4986f1594e084c82c93e88f74e",
          "md5": "489b1eb29cbf9adf479ba1cbdee7aa95",
          "sha256": "be3d24067f389636a3faf56629c985f2e8058568ba8cdd3d8ed4bbf21c4b13e7"
        },
        "downloads": -1,
        "filename": "quicksom-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "489b1eb29cbf9adf479ba1cbdee7aa95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 24717,
        "upload_time": "2020-09-25T11:51:59",
        "upload_time_iso_8601": "2020-09-25T11:51:59.459788Z",
        "url": "https://files.pythonhosted.org/packages/21/72/278aa4d3851b4e8841419967277cee113b4986f1594e084c82c93e88f74e/quicksom-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc9ab39ff89c124cf91ddfa1567d089da6441e1a3ba6404e6d0cd11257734d84",
          "md5": "5f598e523377cc61c9fe5586cabd30ae",
          "sha256": "e5ac1fdc4fd4d84dab73d406f885f3f20fc1631a8f7a2a5aa22c29e330275f89"
        },
        "downloads": -1,
        "filename": "quicksom-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5f598e523377cc61c9fe5586cabd30ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22201,
        "upload_time": "2020-09-25T11:52:00",
        "upload_time_iso_8601": "2020-09-25T11:52:00.555003Z",
        "url": "https://files.pythonhosted.org/packages/dc/9a/b39ff89c124cf91ddfa1567d089da6441e1a3ba6404e6d0cd11257734d84/quicksom-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21dde8b35defdc1034468a1b7c7e0016222ad0519cec6646a69a13b26c6858b8",
          "md5": "e7873af15ed0299d067910bc2bd20e7c",
          "sha256": "40b2810eeaf563e08ed47fc111cea569c24cd7ba6ac25837ddd7d88a7afb1fd2"
        },
        "downloads": -1,
        "filename": "quicksom-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7873af15ed0299d067910bc2bd20e7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 45810,
        "upload_time": "2022-03-28T17:07:30",
        "upload_time_iso_8601": "2022-03-28T17:07:30.378117Z",
        "url": "https://files.pythonhosted.org/packages/21/dd/e8b35defdc1034468a1b7c7e0016222ad0519cec6646a69a13b26c6858b8/quicksom-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db0615901efb11e751be1fc94dabec43d7d38a7f65340b657616ab4368b5f83a",
          "md5": "f89c3a2f51ebe9430b2126cba13aeeca",
          "sha256": "a1eb00e1b7ba89b4b067ba48dd777af3e6b02ad852bff989c430bc9a807b176d"
        },
        "downloads": -1,
        "filename": "quicksom-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f89c3a2f51ebe9430b2126cba13aeeca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 41597,
        "upload_time": "2022-03-28T17:07:32",
        "upload_time_iso_8601": "2022-03-28T17:07:32.316726Z",
        "url": "https://files.pythonhosted.org/packages/db/06/15901efb11e751be1fc94dabec43d7d38a7f65340b657616ab4368b5f83a/quicksom-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21dde8b35defdc1034468a1b7c7e0016222ad0519cec6646a69a13b26c6858b8",
        "md5": "e7873af15ed0299d067910bc2bd20e7c",
        "sha256": "40b2810eeaf563e08ed47fc111cea569c24cd7ba6ac25837ddd7d88a7afb1fd2"
      },
      "downloads": -1,
      "filename": "quicksom-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e7873af15ed0299d067910bc2bd20e7c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 45810,
      "upload_time": "2022-03-28T17:07:30",
      "upload_time_iso_8601": "2022-03-28T17:07:30.378117Z",
      "url": "https://files.pythonhosted.org/packages/21/dd/e8b35defdc1034468a1b7c7e0016222ad0519cec6646a69a13b26c6858b8/quicksom-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db0615901efb11e751be1fc94dabec43d7d38a7f65340b657616ab4368b5f83a",
        "md5": "f89c3a2f51ebe9430b2126cba13aeeca",
        "sha256": "a1eb00e1b7ba89b4b067ba48dd777af3e6b02ad852bff989c430bc9a807b176d"
      },
      "downloads": -1,
      "filename": "quicksom-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f89c3a2f51ebe9430b2126cba13aeeca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 41597,
      "upload_time": "2022-03-28T17:07:32",
      "upload_time_iso_8601": "2022-03-28T17:07:32.316726Z",
      "url": "https://files.pythonhosted.org/packages/db/06/15901efb11e751be1fc94dabec43d7d38a7f65340b657616ab4368b5f83a/quicksom-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}