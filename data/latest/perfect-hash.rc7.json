{
  "info": {
    "author": "Ilan Schnell",
    "author_email": "ilanschnell@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Python Software Foundation License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "Creating minimal perfect hash functions\n=======================================\n\nGenerate a minimal perfect hash function for a given set of keys.\nA given code template is filled with parameters, such that the\noutput is code which implements the hash function.\nTemplates can easily be constructed for any programming language.\n\n\nInstallation\n------------\n\nThe minimal perfect hash function generator is written in pure Python,\nand can be installed using:\n\n.. code-block:: shell-session\n\n    $ pip install perfect-hash\n\nThe code supports Python 2.7 and Python 3.5 or higher.\nHowever, some of the examples do not support Python 2 anymore.\n\n\nIntroduction\n------------\n\nA perfect hash function of a certain set S of keys is a hash function\nwhich maps all keys in S to different numbers.\nThat means that for the set S, the hash function is collision-free,\nor perfect.\nFurther, a perfect hash function is called \"minimal\" when it maps N keys\nto N *consecutive* integers, usually in the range from 0 to N-1.\n\n\nUsage\n-----\n\nGiven a set of keys which are character strings, the program returns a minimal\nperfect hash function.  This hash function is returned in the form of Python\ncode by default.  Suppose we have a file with keys:\n\n.. code-block::\n\n    # 'animals.txt'\n    Elephant\n    Horse\n    Camel\n    Python\n    Dog\n    Cat\n\n\nThe exact way this file is parsed can be specified using command line\noptions, for example it is possible to only read one column from a file\nwhich contains different items in each row.\nThe program is invoked like this:\n\n.. code-block:: python\n\n    $ perfect-hash animals.txt\n    # =======================================================================\n    # ================= Python code for perfect hash function ===============\n    # =======================================================================\n\n    G = [0, 3, 6, 0, 4, 1, 5]\n\n    def hash_f(key, T):\n        return sum(ord(T[i % 8]) * ord(c) for i, c in enumerate(key)) % 7\n\n    def perfect_hash(key):\n        return (G[hash_f(key, \"1mmhoNMG\")] +\n                G[hash_f(key, \"gf53KKbH\")]) % 7\n\n    # ============================ Sanity check =============================\n\n    K = [\"Elephant\", \"Horse\", \"Camel\", \"Python\", \"Dog\", \"Cat\"]\n    assert len(K) == 6\n\n    for h, k in enumerate(K):\n        assert perfect_hash(k) == h\n\n\nThe way the program works is by filling a code template with the calculated\nparameters.  The program can take such a template in form of a file and\nfill in the calculated parameters, this allows the generation of perfect\nhash function in any programming language.  The hash function is kept quite\nsimple and does not require machine or language specific byte level operations\nwhich might be hard to implement in the target language.\nThe following parameters are available in the template:\n\n==========  =======================================\nstring      expands to\n==========  =======================================\n``$NS``     length of S1 and S2 salt\n``$S1``     S1 salt\n``$S2``     S2 salt\n``$NG``     length of array G\n``$G``      array of integers G\n``$NK``     number of keys, i.e. length of array K\n``$K``      array with (quoted) keys\n``$$``      $ (a literal dollar sign)\n==========  =======================================\n\n\nSince the syntax for arrays is not the same in all programming languages,\nsome specifics can be adjusted using command line options.\nThe built-in template which creates the above code is:\n\n.. code-block:: python\n\n    G = [$G]\n\n    def hash_f(key, T):\n        return sum(ord(T[i % $NS]) * ord(c) for i, c in enumerate(str(key))) % $NG\n\n    def perfect_hash(key):\n        return (G[hash_f(key, \"$S1\")] +\n                G[hash_f(key, \"$S2\")]) % $NG\n\n\nUsing code templates, makes this program very flexible.  The source repository\nincludes several complete examples for C.  There are many choices one\nfaces when implementing a static hash table: Do the parameter lists go into\na separate header file?  Should the API for the table only contain the hash\nvalues, but not the objects being mapped?  And so on.\nAll these various choices are possible because of the template is simply\nfilled with the parameters, no matter what else is inside the template.\n\n\nHash function types\n-------------------\n\nOne important option the ``perfect-hash`` command provides is ``--hft`` which\nis short of \"hash function type\".  There are two types to choose from:\n\n1. A random hash function generation which creates hash function with a\n   random string being used as it's salt.   This is the default.\n   Since the generated random hash function does not include large enough\n   output for a very large number of keys (over 10,000), the perfect hash\n   function generation will fail for such large keys.  However, the\n   implementation of this hash function is quite simple and fast.\n\n2. A random hash function generation which creates hash function with a\n   random integers being used as it's salt.  Using this option will always\n   succeed, but an implementation requires two additional integer\n   arrays (apart from the always present array ``G``).\n\n\nExamples\n--------\n\nThe source repository contains many useful examples (in ``examples/``) which\nillustrate how to use the ``perfect-hash`` command, as well\nas ``python_hash.py`` as a library.\n\n\nLicense of output\n-----------------\n\nperfect-hash is released under the BSD license.  However, that does not\ncause the output produced by perfect-hash to be under BSD.  The reason is\nthat the output contains only small pieces of text that come directly from\nperfect-hash's source code – less than 10 lines long if the default template\nis being used, which serves more for illustration purposes - too small for\nbeing significant.  Therefore the output is not “work based on perfect-hash”.\n\nThe output produced by perfect-hash contains essentially all of the\ninput data.  Therefore the output is a “derivative work” of the input (in\nthe sense of U.S. copyright law); and its copyright status depends on the\ncopyright of the input.  For most software licenses, the result is that the\noutput is under the same license, with the same copyright holder, as the\ninput that was passed to perfect-hash.\n\n\nAcknowledgments\n---------------\n\nPart of the code is based on an a program A.M. Kuchling wrote:\nhttp://www.amk.ca/python/code/perfect-hash\n\nThe algorithm this library is based on is described in the paper\n\"Optimal algorithms for minimal perfect hashing\",\nZ. J. Czech, G. Havas and B.S. Majewski.\nhttp://cmph.sourceforge.net/papers/chm92.pdf\n\nI tried to illustrate the algorithm and explain how it works on:\nhttp://ilan.schnell-web.net/prog/perfect-hash/algo.html\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ilanschnell/perfect-hash",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "perfect-hash",
    "package_url": "https://pypi.org/project/perfect-hash/",
    "platform": "",
    "project_url": "https://pypi.org/project/perfect-hash/",
    "project_urls": {
      "Homepage": "https://github.com/ilanschnell/perfect-hash"
    },
    "release_url": "https://pypi.org/project/perfect-hash/0.4.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "creating perfect minimal hash function",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9999811,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d8d9f19492c1c6e9c88a2a60467f05198302312a3db25e65bb55c6472b3b2de",
          "md5": "45c269c77c7eaecacbed360bc2e71647",
          "sha256": "10f0c2ae328d4ad8088589503ae8fea61821a5bad15da9a3cdbec260ce6c513a"
        },
        "downloads": -1,
        "filename": "perfect-hash-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45c269c77c7eaecacbed360bc2e71647",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8911,
        "upload_time": "2019-05-27T19:43:54",
        "upload_time_iso_8601": "2019-05-27T19:43:54.896419Z",
        "url": "https://files.pythonhosted.org/packages/8d/8d/9f19492c1c6e9c88a2a60467f05198302312a3db25e65bb55c6472b3b2de/perfect-hash-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3da3ba65d78f33c6c4bf7529ddf45b6efe5ce3feaff158e0b340d7e64036499e",
          "md5": "a8484c1fa420495e74bef9f2f92029d0",
          "sha256": "181393bcd6237280b5ce35d83f79f63ca4bdb22cc0594427981e5a8eacba1c49"
        },
        "downloads": -1,
        "filename": "perfect-hash-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a8484c1fa420495e74bef9f2f92029d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8904,
        "upload_time": "2019-05-31T20:47:35",
        "upload_time_iso_8601": "2019-05-31T20:47:35.730503Z",
        "url": "https://files.pythonhosted.org/packages/3d/a3/ba65d78f33c6c4bf7529ddf45b6efe5ce3feaff158e0b340d7e64036499e/perfect-hash-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64df80d4d1661162f0e890cf827b4408ec4a4213318a94c663172899b54924aa",
          "md5": "2db6ffb20cebe895b7c03ad19a00b3f8",
          "sha256": "5b49ec1a569f223b73175de1e4de613e400fc97850de4611a40daf48cee12b60"
        },
        "downloads": -1,
        "filename": "perfect-hash-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2db6ffb20cebe895b7c03ad19a00b3f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7519,
        "upload_time": "2020-06-10T07:17:22",
        "upload_time_iso_8601": "2020-06-10T07:17:22.141399Z",
        "url": "https://files.pythonhosted.org/packages/64/df/80d4d1661162f0e890cf827b4408ec4a4213318a94c663172899b54924aa/perfect-hash-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94e7cd6764dfc74a186e45c350bc581c20dfcbe38b10b624bd89ef036e9f10c6",
          "md5": "2ca061784ca2f79f7a6792dc5af07dcb",
          "sha256": "98d924ab180e2adf5ba1b154a2a2506b4bd9db7e484d590f93fa7cca70bdaa64"
        },
        "downloads": -1,
        "filename": "perfect-hash-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ca061784ca2f79f7a6792dc5af07dcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7523,
        "upload_time": "2020-06-11T09:15:29",
        "upload_time_iso_8601": "2020-06-11T09:15:29.486744Z",
        "url": "https://files.pythonhosted.org/packages/94/e7/cd6764dfc74a186e45c350bc581c20dfcbe38b10b624bd89ef036e9f10c6/perfect-hash-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d010c199a25064713b28155c5ba731ae2a309c01d9ad8200bb2a0fba93611c07",
          "md5": "5dd3876a64cc3e4807e4289f4ad93d6a",
          "sha256": "8f0965e8e1b1d3a4e9a8927386e118a8937651c4cb9e2b7f0c56b6c733bbc0e6"
        },
        "downloads": -1,
        "filename": "perfect-hash-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5dd3876a64cc3e4807e4289f4ad93d6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7256,
        "upload_time": "2020-06-12T06:19:54",
        "upload_time_iso_8601": "2020-06-12T06:19:54.263838Z",
        "url": "https://files.pythonhosted.org/packages/d0/10/c199a25064713b28155c5ba731ae2a309c01d9ad8200bb2a0fba93611c07/perfect-hash-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54098d6cec9805bdc5906ba881b9f2d7718c46d5278f5e503938f4add5b00c7a",
          "md5": "10aaad55b3f271fa9087d5e53b5017ee",
          "sha256": "3072204ee2e50e09b5615295994771e31b0326fca8c6d09f2da537408a2c58a1"
        },
        "downloads": -1,
        "filename": "perfect-hash-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "10aaad55b3f271fa9087d5e53b5017ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9083,
        "upload_time": "2020-06-15T04:59:06",
        "upload_time_iso_8601": "2020-06-15T04:59:06.315694Z",
        "url": "https://files.pythonhosted.org/packages/54/09/8d6cec9805bdc5906ba881b9f2d7718c46d5278f5e503938f4add5b00c7a/perfect-hash-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92ac28f052aa197bfa13abe96d66bc68cc88c48c690a16eb0fefca4d5f0fdf8a",
          "md5": "593b1b773224542b877f8a539e91b0df",
          "sha256": "9d58c15d8e0e7664e51ec7fdd2cd086dfdd5b5dd0c244a4fec49cf0ed9f82681"
        },
        "downloads": -1,
        "filename": "perfect-hash-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "593b1b773224542b877f8a539e91b0df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9868,
        "upload_time": "2021-04-07T17:43:31",
        "upload_time_iso_8601": "2021-04-07T17:43:31.160153Z",
        "url": "https://files.pythonhosted.org/packages/92/ac/28f052aa197bfa13abe96d66bc68cc88c48c690a16eb0fefca4d5f0fdf8a/perfect-hash-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92ac28f052aa197bfa13abe96d66bc68cc88c48c690a16eb0fefca4d5f0fdf8a",
        "md5": "593b1b773224542b877f8a539e91b0df",
        "sha256": "9d58c15d8e0e7664e51ec7fdd2cd086dfdd5b5dd0c244a4fec49cf0ed9f82681"
      },
      "downloads": -1,
      "filename": "perfect-hash-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "593b1b773224542b877f8a539e91b0df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9868,
      "upload_time": "2021-04-07T17:43:31",
      "upload_time_iso_8601": "2021-04-07T17:43:31.160153Z",
      "url": "https://files.pythonhosted.org/packages/92/ac/28f052aa197bfa13abe96d66bc68cc88c48c690a16eb0fefca4d5f0fdf8a/perfect-hash-0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}