{
  "info": {
    "author": "Shinya Fujino",
    "author_email": "shf0811@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Topic :: Education",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "chinese\n=======\n\nchinese is a Chinese text analyzer.\n\n.. figure:: https://github.com/morinokami/chinese/blob/master/docs/overview.png?raw=true\n   :alt: Overview\n\nNOTE: Python 2.\\* is not supported.\n\nGetting Started\n---------------\n\nInstall chinese using pip:\n\n.. code:: sh\n\n    $ pip install chinese\n    $ pynlpir update\n\nStart analyzing Chinese text:\n\n.. code:: py\n\n    >>> from chinese import ChineseAnalyzer\n    >>> analyzer = ChineseAnalyzer()\n    >>> result = analyzer.parse('我很高兴认识你')\n    >>> result.tokens()\n    ['我', '很', '高兴', '认识', '你']\n    >>> result.pinyin()\n    'wǒ hěn gāoxìng rènshi nǐ'\n    >>> result.pprint()\n    {'original': '我很高兴认识你',\n     'parsed': [{'dict_data': [{'definitions': ['I', 'me', 'my'],\n                              'kind': 'Simplified',\n                              'match': '我',\n                              'pinyin': ['wo3']}],\n               'token': ('我', 0, 1)},\n               {'dict_data': [{'definitions': ['(adverb of degree)',\n                                             'quite',\n                                             'very',\n                                             'awfully'],\n                              'kind': 'Simplified',\n                              'match': '很',\n                              'pinyin': ['hen3']}],\n               'token': ('很', 1, 2)},\n               {'dict_data': [{'definitions': ['happy',\n                                             'glad',\n                                             'willing (to do sth)',\n                                             'in a cheerful mood'],\n                              'kind': 'Simplified',\n                              'match': '高興',\n                              'pinyin': ['gao1', 'xing4']}],\n               'token': ('高兴', 2, 4)},\n               {'dict_data': [{'definitions': ['to know',\n                                             'to recognize',\n                                             'to be familiar with',\n                                             'to get acquainted with sb',\n                                             'knowledge',\n                                             'understanding',\n                                             'awareness',\n                                             'cognition'],\n                              'kind': 'Simplified',\n                              'match': '認識',\n                              'pinyin': ['ren4', 'shi5']}],\n               'token': ('认识', 4, 6)},\n               {'dict_data': [{'definitions': ['you (informal, as opposed to '\n                                             'courteous 您[nin2])'],\n                              'kind': 'Simplified',\n                              'match': '你',\n                              'pinyin': ['ni3']}],\n               'token': ('你', 6, 7)}]}\n    >>> result = analyzer.parse('我喜歡這個味道', traditional=True)\n    >>> print(res)\n    {'味道': [{'definitions': ['flavor', 'smell', 'hint of'],\n          'kind': 'Traditional',\n          'match': '味道',\n          'pinyin': ['wei4', 'dao5']}],\n     '喜歡': [{'definitions': ['to like', 'to be fond of'],\n          'kind': 'Traditional',\n          'match': '喜欢',\n          'pinyin': ['xi3', 'huan5']}],\n     '我': [{'definitions': ['I', 'me', 'my'],\n          'kind': 'Traditional',\n          'match': '我',a\n          'pinyin': ['wo3']}],\n     '這個': [{'definitions': ['this', 'this one'],\n          'kind': 'Traditional',\n          'match': '这个',\n          'pinyin': ['zhe4', 'ge5']}]}\n\nFeatures\n--------\n\n-  ``parse()`` returns a ChineseAnalyzerResult object.\n\n.. code:: py\n\n    >>> from chinese import ChineseAnalyzer\n    >>> analyzer = ChineseAnalyzer()\n    # Basic usage.\n    >>> result = analyzer.parse('你好世界')\n    # If the traditional option is set to True, the analyzer tries to parse the\n    # provided text as 繁体字.\n    >>> result = analyzer.parse('你好世界', traditional=True)\n    # The default tokenizer uses jieba's. You can also use pynlpir's to tokenize.\n    >>> result = analyzer.parse('你好世界', using=analyzer.tokenizer.pynlpir)\n    # In addition, a custom tokenizer can be passed to the method.\n    >>> from chinese.tokenizer import TokenizerInterface\n    >>> class MyTokenizer(TokenizerInterface): # Custom tokenizer must inherit from TokenizerInterface.\n    ...     # Custom tokenizer must implement tokenize() method.\n    ...     def tokenize(self, string):\n    ...         # tokenize() must return a list of tuples containing at least\n    ...         # a string as a first element.\n    ...         # For example: [('token1', ...), ('token2', ...), ...].\n    ...\n    >>> my_tokenizer = MyTokenizer()\n    >>> result = analyzer.parse('你好世界', using=my_tokenizer)\n    # You can also specify the dictionary used for looking up each token.\n    # You specify a path to a dictionary file for that and the file must have\n    # the CC-CEDICT's dictionary file structure.\n    # CC-CEDICT's dictionary is used for looking up by default.\n    >>> result = analyzer.parse('你好世界', dictionary='path/to/dict')\n\n-  ``original()`` returns the supplied text as is.\n\n.. code:: py\n\n    >>> result = analyzer.parse('我最喜欢吃水煮肉片')\n    >>> result.original()\n    '我最喜欢吃水煮肉片'\n\n-  ``tokens()`` returns tokens in the provided text.\n\n.. code:: py\n\n    >>> result = analyzer.parse('我的汉语马马虎虎')\n    >>> result.tokens()\n    ['我', '的', '汉语', '马马虎虎']\n    >>> result.tokens(details=True) # If the details option is set to True, additional information is also attached.\n    [('我', 0, 1), ('的', 1, 2), ('汉语', 2, 4), ('马马虎虎', 4, 8)] # In this case, the positions of tokens are included.\n    >>> result = analyzer.parse('的的的的的在的的的的就以和和和')\n    >>> result.tokens(unique=True) # You can get a unique collection of tokens using unique option.\n    ['的', '在', '就', '以', '和']\n\n-  ``freq()`` returns a Counter object that counts the number of\n   occurrences for each token.\n\n.. code:: py\n\n    >>> result = analyzer.parse('的的的的的在的的的的就以和和和')\n    >>> result.freq()\n    Counter({'的': 9, '和': 3, '在': 1, '就': 1, '以': 1})\n\n-  ``sentences()`` returns a list of paragraphs in a provided text.\n\n.. code:: py\n\n    >>> s = '''您好。请问小美在家吗？\n    ...\n    ... 在。请稍等。'''\n    >>> result = analyzer.parse(s)\n    >>> result.sentences()\n    ['您好', '请问小美在家吗', '在', '请稍等']\n\n-  ``search()`` returns a list of sentences containing the argument\n   string.\n\n.. code:: py\n\n    >>> s = '自然语言处理是计算机科学领域与人工智能领域中的一个重要方向。它研究能实现人与计算机之间用自然语言进行有效通信的各种理论和方法。自然语言处理是一门融语言学、计算机科学、数学于一体的科学。因此，这一领域的研究将涉及自然语言，即人们日常使用的语言，所以它与语言学的研究有着密切的联系，但又有重要的区别。自然语言处理并不是一般地研究自然语言，而在于研制能有效地实现自然语言通信的计算机系统，特别是其中的软件系统。因而它是计算机科学的一部分。'\n    >>> result = analyzer.parse(s)\n    >>> result.search('数学')\n    ['自然语言处理是一门融语言学、计算机科学、数学于一体的科学']\n\n-  ``paragraphs()`` returns a list of sentences in a provided text.\n\n.. code:: py\n\n    >>> s = '''您好。请问小美在家吗？\n    ...\n    ... 在。请稍等。'''\n    >>> result = analyzer.parse(s)\n    >>> result.paragraphs()\n    ['您好。请问小美在家吗？', '在。请稍等。']\n\n-  ``pinyin()`` returns a pinyin representation of the provided text.\n\n.. code:: py\n\n    >>> result = analyzer.parse('我喜欢Python。')\n    >>> result.pinyin()\n    'wǒ xǐhuan Python.'\n    >>> result = analyzer.parse('下个月我去涩谷')\n    >>> result.pinyin() # Sometimes the analyzer cannot find a correponding pinyin.\n    'xiàgèyuè wǒ qù 涩谷'\n    >>> result.pinyin(force=True) # The force option forces it to try to convert an unknown word to pinyin.\n    'xiàgèyuè wǒ qù sègǔ'\n\n-  ``pprint()`` prints a formatted description of the parsed text.\n\n.. code:: py\n\n    >>> result = analyzer.parse('我爱看书')\n    >>> result.pprint()\n    {'original': '我爱看书',\n     'parsed': [{'dict_data': [{'definitions': ['I', 'me', 'my'],\n                                'kind': 'Simplified',\n                                'match': '我',\n                                'pinyin': ['wo3']}],\n                 'token': ('我', 0, 1)},\n                {'dict_data': [{'definitions': ['to love',\n                                                'to be fond of',\n                                                'to like',\n                                                'affection',\n                                                'to be inclined (to do sth)',\n                                                'to tend to (happen)'],\n                                'kind': 'Simplified',\n                                'match': '愛',\n                                'pinyin': ['ai4']}],\n                 'token': ('爱', 1, 2)},\n                {'dict_data': [{'definitions': ['to read', 'to study'],\n                                'kind': 'Simplified',\n                                'match': '看書',\n                                'pinyin': ['kan4', 'shu1']}],\n                 'token': ('看书', 2, 4)}]}\n\n-  ``say()`` converts the provided text to Chinese audible speech (macOS\n   only).\n\n.. code:: py\n\n    >>> result = analyzer.parse('您好，我叫Ting-Ting。我讲中文普通话。')\n    >>> result.say()              # Output the speech.\n    >>> result.say(out='say.aac') # Save the speech to out.\n\n-  Get the number of tokens.\n\n.. code:: py\n\n    >>> result = analyzer.parse('我是中国人')\n    >>> result.tokens()\n    ['我', '是', '中国', '人']\n    >>> len(result)\n    4\n\n-  Check whether a token is in the result.\n\n.. code:: py\n\n    >>> result = analyzer.parse('我是中国人')\n    >>> '中国' in result\n    True\n    >>> '我是' in result\n    False\n\n-  Extract the lookup result.\n\n.. code:: py\n\n    >>> result = analyzer.parse('你叫什么名字？')\n    >>> result.tokens()\n    ['你', '叫', '什么', '名字', '？']\n    >>> shenme = result['什么'] # It's just a list of lookup results.\n    >>> len(shenme)             # It has only one entry.\n    1\n    >>> print(shenme[0])        # Print that entry.\n    {'definitions': ['what?', 'something', 'anything'],\n     'kind': 'Simplified',\n     'match': '什麼',\n     'pinyin': ['shen2', 'me5']}\n    >>> shenme_info = shenme[0]\n    >>> shenme_info.definitions # Definitions of the token.\n    ['what?', 'something', 'anything']\n    >>> shenme_info.match       # The corresponding 繁体字.\n    '什麼'\n    >>> shenme_info.pinyin      # The pinyin of the token.\n    ['shen2', 'me5']\n\nLicense\n-------\n\nMIT License\n\nThanks\n------\n\n`jieba <https://github.com/fxsjy/jieba>`__ and\n`PyNLPIR <https://github.com/tsroten/pynlpir>`__ are used to tokenize a\nChinese text.\n\n`CC-CEDICT <https://www.mdbg.net/chinese/dictionary?page=cc-cedict>`__\nis used to lookup information for tokens.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/morinokami/chinese",
    "keywords": "Chinese,text analysis",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chinese",
    "package_url": "https://pypi.org/project/chinese/",
    "platform": "",
    "project_url": "https://pypi.org/project/chinese/",
    "project_urls": {
      "Homepage": "https://github.com/morinokami/chinese"
    },
    "release_url": "https://pypi.org/project/chinese/0.2.1/",
    "requires_dist": [
      "jieba",
      "pynlpir"
    ],
    "requires_python": "",
    "summary": "Chinese text analyzer",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3703203,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84a18bd5790e838ccf39ca09e77c826c6b8ff94472609812ded82eb90fd8a0b0",
          "md5": "1cc7cc14d3bdbbe86f524987f46d3159",
          "sha256": "f64b1ae7ab47d6e462f5b8c5e7b0b5a2aa76b06c47299a076b2e8e58ef205e4e"
        },
        "downloads": -1,
        "filename": "chinese-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cc7cc14d3bdbbe86f524987f46d3159",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6595854,
        "upload_time": "2018-03-19T16:07:00",
        "upload_time_iso_8601": "2018-03-19T16:07:00.607501Z",
        "url": "https://files.pythonhosted.org/packages/84/a1/8bd5790e838ccf39ca09e77c826c6b8ff94472609812ded82eb90fd8a0b0/chinese-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74738171d46b1e4c341e769f29b73550e7c7e30af1ba9128b6d8a9d04d274ac6",
          "md5": "6e5113f1461e4249cbf5f9886fbdaa7e",
          "sha256": "63f2ee4b943dc22a704dc8b8e9b83f708aa3e447973f605eb2bdfc508b1544c1"
        },
        "downloads": -1,
        "filename": "chinese-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e5113f1461e4249cbf5f9886fbdaa7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6597610,
        "upload_time": "2018-03-24T16:35:09",
        "upload_time_iso_8601": "2018-03-24T16:35:09.404084Z",
        "url": "https://files.pythonhosted.org/packages/74/73/8171d46b1e4c341e769f29b73550e7c7e30af1ba9128b6d8a9d04d274ac6/chinese-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15fe35c1cd7792f0c899fbeae66d35491721cae6be6d8a128d4f77e6e3479b3a",
          "md5": "e23b5fd511782f67c9556be82712d7ba",
          "sha256": "04a8052166fd9524ef5a6022810223da2a765b394b6280b6014f33de635842b1"
        },
        "downloads": -1,
        "filename": "chinese-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e23b5fd511782f67c9556be82712d7ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12583488,
        "upload_time": "2018-03-25T10:27:30",
        "upload_time_iso_8601": "2018-03-25T10:27:30.047194Z",
        "url": "https://files.pythonhosted.org/packages/15/fe/35c1cd7792f0c899fbeae66d35491721cae6be6d8a128d4f77e6e3479b3a/chinese-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15fe35c1cd7792f0c899fbeae66d35491721cae6be6d8a128d4f77e6e3479b3a",
        "md5": "e23b5fd511782f67c9556be82712d7ba",
        "sha256": "04a8052166fd9524ef5a6022810223da2a765b394b6280b6014f33de635842b1"
      },
      "downloads": -1,
      "filename": "chinese-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e23b5fd511782f67c9556be82712d7ba",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12583488,
      "upload_time": "2018-03-25T10:27:30",
      "upload_time_iso_8601": "2018-03-25T10:27:30.047194Z",
      "url": "https://files.pythonhosted.org/packages/15/fe/35c1cd7792f0c899fbeae66d35491721cae6be6d8a128d4f77e6e3479b3a/chinese-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}