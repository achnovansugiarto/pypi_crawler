{
  "info": {
    "author": "Michał Lowas-Rzechonek",
    "author_email": "michal@rzechonek.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing"
    ],
    "description": "===============\npytest-paramark\n===============\n\n.. image:: https://img.shields.io/pypi/v/pytest-paramark.svg\n    :target: https://pypi.org/project/pytest-paramark\n    :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-paramark.svg\n    :target: https://pypi.org/project/pytest-paramark\n    :alt: Python versions\n\n.. image:: https://travis-ci.org/mrzechonek/pytest-paramark.svg?branch=master\n    :target: https://travis-ci.org/mrzechonek/pytest-paramark\n    :alt: See Build Status on Travis CI\n\nConfigure pytest fixtures using combination of parametrize and markers\n\n----\n\n\nWhat is this thing?\n-------------------\n\nThe problem\n===========\n\nPytest fixture names must be unique within the whole dependency graph\n(`#3966`_).\n\nThis means that when you want to parametrize fixtures, each parameter name must\nbe unique:\n\n.. code-block:: python\n\n   import pytest\n\n   @pytest.fixture\n   def foo(foo_option):\n      return {'option': foo_option}\n\n\n   @pytest.fixture\n   def bar(bar_option):\n      return {'option': bar_option}\n\n\n   @pytest.mark.parametrize(\n      'foo_option, bar_option',\n      [\n         (42, 24),\n      ]\n   )\n   def test_options(foo, bar):\n      assert foo['option'] == 42\n      assert bar['option'] == 24\n\nAlso, if you want to provide default vaules for options, they need to be fixtures as well:\n\n.. code-block:: python\n\n   @pytest.fixture\n   def foo_option():\n      return 'default_foo_option'\n\n\n   @pytest.fixture\n   def bar_option():\n      return 'default_bar_option'\n\n\n   @pytest.fixture\n   def foo(foo_option):\n      return {'option': foo_option}\n\n\n   @pytest.fixture\n   def bar(bar_option):\n      return {'option': bar_option}\n\n\n   def test_options(foo, bar):\n      assert foo['option'] == 'default_foo_option'\n      assert bar['option'] == 'default_bar_option'\n\nThis is inconvenient when number of options and fixtures increases, and you end\nup with lots of boilerplate code like this:\n\n.. code-block:: python\n\n   @pytest.fixture()\n   def app_elements():\n      {}\n\n\n   @pytest.fixture()\n   def app_sequence():\n      return None\n\n\n   @pytest.fixture()\n   def app_uuid(uuid=None):\n      return uuid or uuid4()\n\n\n   @pytest.fixture\n   def app_app_key():\n      return ApplicationKey(bytes.fromhex('63964771734fbd76e3b40519d1d94a48'))\n\n\n   @pytest.fixture\n   def app_net_key():\n      return NetworkKey(bytes.fromhex('7dd7364cd842ad18c17c2b820c84c3d6'))\n\n\n   @pytest.fixture\n   def app_dev_key():\n      return DeviceKey(bytes.fromhex('9d6dd0e96eb25dc19a40ed9914f8f03f'))\n\n\n   @pytest.fixture\n   def app_addr():\n      return 0x5f2\n\n\n   @pytest.fixture\n   def app_iv_index():\n      return 0\n\n\n   @pytest.fixture()\n   def application(app_uuid, app_elements, app_dev_key, app_app_key, app_net_ket,\n                   app_addr, app_iv_index, app_sequence):\n      ...\n\n\nThe solution\n============\n\nThis plugin provides a cleaner way to pass such options to selected fixutres,\nby implementing a magic fixture called ``paramark``, which returns a *different* value\nfor each of the fixtures that depend on it:\n\n.. code-block:: python\n\n   @pytest.fixture\n   def foo(paramark):\n      return paramark\n\n\n   @pytest.fixture\n   def bar(paramark):\n      return paramark\n\n\n   @pytest.mark.foo(option=42)\n   @pytest.mark.bar(option=24)\n   def test_options(foo, bar):\n      assert foo['option'] == 42\n      assert bar['option'] == 24\n\nAs can be seen in the example, ``paramark`` returns a dictionary with keys and\nvalues pulled from a custom mark with *the same name* as the dependant fixture.\nNote that these marks still need to be `registered`_.\n\nThis also works with ``parametrize``, by extending the argument name syntax to include a dot:\n\n.. code-block:: python\n\n   @pytest.mark.parametrize(\n      'foo.option, bar.option',\n      [\n         (43, 24),\n      ]\n   )\n   @pytest.mark.bar(option=24)\n   def test_options(foo, bar):\n      assert foo['option'] == 42\n      assert bar['option'] == 24\n\nor, if you want to parametrize the whole dictionary:\n\n.. code-block:: python\n\n   @pytest.mark.parametrize(\n      'foo.*, bar.option',\n      [\n         ({'option': 42, 'another: 17}, 24),\n      ]\n   )\n   @pytest.mark.bar(option=24)\n   def test_options(foo, bar):\n      assert foo['option'] == 42\n      assert foo['another'] == 17\n      assert bar['option'] == 24\n\nHaving this, defining default values no longer requires separate fixture for each option:\n\n.. code-block:: python\n\n   @pytest.fixture\n   def foo(paramark):\n      default = {'option': 'default_foo_option'}\n      return {**default, **paramark)\n\n\n   @pytest.fixture\n   def bar(paramark):\n      default = {'option': 'default_bar_option'}\n      return {**default, **paramark)\n\n\n   @pytest.mark.foo(option='custom_foo_option')\n   def test_options(foo, bar):\n      assert foo['option'] == 'custom_foo_option'\n      assert bar['option'] == 'default_bar_option'\n\nor, if you want to be safer and fancier:\n\n.. code-block:: python\n\n   import typing\n\n\n   @pytest.fixture\n   def foo(paramark):\n      class Foo(typing.NamedTuple):\n         option: str = 'default_foo_option'\n\n      return Foo(**paramark)\n\n\n   def test_options(foo):\n      assert foo.option == 'default_foo_option'\n\n\nInstallation\n------------\n\nYou can install \"pytest-paramark\" via `pip`_ from `PyPI`_::\n\n    $ pip install pytest-paramark\n\n\nContributing\n------------\nContributions are very welcome. Tests can be run with `tox`_, please ensure\nthe coverage at least stays the same before you submit a pull request.\n\n\nLicense\n-------\n\nDistributed under the terms of the `MIT`_ license, \"pytest-paramark\" is free and open source software\n\n\nIssues\n------\n\nIf you encounter any problems, please `file an issue`_ along with a detailed description.\n\n.. _`MIT`: http://opensource.org/licenses/MIT\n.. _`file an issue`: https://github.com/mrzechonek/pytest-paramark/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n.. _`pip`: https://pypi.org/project/pip/\n.. _`PyPI`: https://pypi.org/project\n.. _`#3966`: https://github.com/pytest-dev/pytest/issues/3966\n.. _`registered`: http://doc.pytest.org/en/latest/example/markers.html#registering-markers\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mrzechonek/pytest-paramark",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Michał Lowas-Rzechonek",
    "maintainer_email": "michal@rzechonek.net",
    "name": "pytest-paramark",
    "package_url": "https://pypi.org/project/pytest-paramark/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-paramark/",
    "project_urls": {
      "Homepage": "https://github.com/mrzechonek/pytest-paramark"
    },
    "release_url": "https://pypi.org/project/pytest-paramark/0.1.1/",
    "requires_dist": [
      "pytest (>=4.5.0)"
    ],
    "requires_python": ">=3.4",
    "summary": "Configure pytest fixtures using a combination of\"parametrize\" and markers",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6529132,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a369fcb856542bf7f539022e7e3365c99e4e3d1c588b670d727238af99ba38b",
          "md5": "05d7ee3cbc389aa11a11ce638bd3d4b6",
          "sha256": "a1ed8a0a59400498f76dd90d111aa2ffee28c4edcd5bbe69e0fafe1cde6abf18"
        },
        "downloads": -1,
        "filename": "pytest-paramark-0.1.0.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "05d7ee3cbc389aa11a11ce638bd3d4b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 4266,
        "upload_time": "2020-01-06T22:41:51",
        "upload_time_iso_8601": "2020-01-06T22:41:51.350703Z",
        "url": "https://files.pythonhosted.org/packages/2a/36/9fcb856542bf7f539022e7e3365c99e4e3d1c588b670d727238af99ba38b/pytest-paramark-0.1.0.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98632b4b8b95b37b4c27d65b0a4620638a8fe7efb98c10ee0d5b245a76422f72",
          "md5": "56a72ec0bf11a8ced6eb2d331dd3038d",
          "sha256": "ae18b757b7e1fce31140a57bad368c800d74fddacc4f96844f2131e22e0036a9"
        },
        "downloads": -1,
        "filename": "pytest_paramark-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56a72ec0bf11a8ced6eb2d331dd3038d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 4150,
        "upload_time": "2020-01-06T22:41:48",
        "upload_time_iso_8601": "2020-01-06T22:41:48.878569Z",
        "url": "https://files.pythonhosted.org/packages/98/63/2b4b8b95b37b4c27d65b0a4620638a8fe7efb98c10ee0d5b245a76422f72/pytest_paramark-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bec84b960c136b385b39ed3e87d87c8fba2dedfd428b900d64063780f465a65e",
          "md5": "9fb2e908ea11f7aba9e3bdeaed372471",
          "sha256": "c36daf9de6b79147258115a491256674cab4b5a342912fa2e77f585df45a3f82"
        },
        "downloads": -1,
        "filename": "pytest-paramark-0.1.1.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "9fb2e908ea11f7aba9e3bdeaed372471",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 5625,
        "upload_time": "2020-01-10T21:18:14",
        "upload_time_iso_8601": "2020-01-10T21:18:14.388715Z",
        "url": "https://files.pythonhosted.org/packages/be/c8/4b960c136b385b39ed3e87d87c8fba2dedfd428b900d64063780f465a65e/pytest-paramark-0.1.1.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a0ec7b04e63cdfc845691592cb54301eab824b60f52c15a859917e0ef115cb3",
          "md5": "870eaa619334a64400bb256b401e6478",
          "sha256": "42f5002bd13fb0652e916a11dc292557eaa5c328eb3ece095d05406fe8257fdc"
        },
        "downloads": -1,
        "filename": "pytest_paramark-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "870eaa619334a64400bb256b401e6478",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 5412,
        "upload_time": "2020-01-10T21:18:12",
        "upload_time_iso_8601": "2020-01-10T21:18:12.067070Z",
        "url": "https://files.pythonhosted.org/packages/0a/0e/c7b04e63cdfc845691592cb54301eab824b60f52c15a859917e0ef115cb3/pytest_paramark-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bec84b960c136b385b39ed3e87d87c8fba2dedfd428b900d64063780f465a65e",
        "md5": "9fb2e908ea11f7aba9e3bdeaed372471",
        "sha256": "c36daf9de6b79147258115a491256674cab4b5a342912fa2e77f585df45a3f82"
      },
      "downloads": -1,
      "filename": "pytest-paramark-0.1.1.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "9fb2e908ea11f7aba9e3bdeaed372471",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 5625,
      "upload_time": "2020-01-10T21:18:14",
      "upload_time_iso_8601": "2020-01-10T21:18:14.388715Z",
      "url": "https://files.pythonhosted.org/packages/be/c8/4b960c136b385b39ed3e87d87c8fba2dedfd428b900d64063780f465a65e/pytest-paramark-0.1.1.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a0ec7b04e63cdfc845691592cb54301eab824b60f52c15a859917e0ef115cb3",
        "md5": "870eaa619334a64400bb256b401e6478",
        "sha256": "42f5002bd13fb0652e916a11dc292557eaa5c328eb3ece095d05406fe8257fdc"
      },
      "downloads": -1,
      "filename": "pytest_paramark-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "870eaa619334a64400bb256b401e6478",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 5412,
      "upload_time": "2020-01-10T21:18:12",
      "upload_time_iso_8601": "2020-01-10T21:18:12.067070Z",
      "url": "https://files.pythonhosted.org/packages/0a/0e/c7b04e63cdfc845691592cb54301eab824b60f52c15a859917e0ef115cb3/pytest_paramark-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}