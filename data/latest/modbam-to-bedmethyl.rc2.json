{
  "info": {
    "author": "Oxford Nanopore Technologies, Limited",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": ".. image:: ONT_logo.png\n  :width: 800\n  :alt:  .\n\n\n\nmodbam_to_bedmethyl\n========================================================================\n\n``modbam_to_bedmethyl`` is a tool to aggregate aligned, basecalled data,\nannotated with modifications, (a bam file with an MM+ML tag) into a reference\nspace summary showing the reference coverage and fraction of reads with base\nmodifications at those sites. These are output as a bedmethyl file.\n\n* Source code: https://github.com/nanoporetech/modbam-to-bedmethyl\n* Bedmethyl specification: https://www.encodeproject.org/data-standards/wgbs/\n* modbase tag specification: https://github.com/samtools/hts-specs/pull/418/files\n* ChEBI specifications https://www.ebi.ac.uk/chebi/\n\nGetting Started\n========================================================================\n\nThe ``modbam_to_bedmethyl`` is available on PyPI and can be installed via pip::\n\n    pip install modbam-to-bedmethyl **this is not yet implemented as not released yet**\n\nAlternatively, it is available on github where it can be built from source::\n\n    git clone https://github.com/nanoporetech/modbam-to-bedmethyl\n    pip install ./modbam_to_bedmethyl\n\n\nTo validate your installation, source the modbam_to_bedmethyl virtual environment and\nexecute::\n\n    python -m unittest discover\n\n\nDependencies\n------------------------------------------------------------------------\n``modbam_to_bedmethyl`` is a pure python project that requires python>=3.6.\n\nIt also requires:\n\n* `pysam <https://github.com/pysam-developers/pysam>`_: 0.16 or higher\n* `pyyaml <https://pyyaml.org/>`_\n\n\nInterface\n========================================================================\n\nTo covert from a modbam file to bedmethyl files use the modbam_to_bedmethyl module::\n\n    modbam_to_bedmethyl\n    [required]\n          -i, --input_bam\n                    path to a sam/bam file.\n          -m, --modified_threshold\n                    percentage threshold, equal to or above which a\n                    modification is considered to be present.\n          -u, --unmodified_threshold\n                    percentage threshold, equal to or below which a\n                    modification is considered to not be present.\n          -s, --save_path\n                    save path for bedmethyl file.\n    [optional]\n          -t, --type_selector\n                    Output only a single modification type (default:\n                    output all modifications). Modification type specified\n                    by either character (e.g. m, h), abbreviation (5mC,\n                    6mA), or ChEBI code (e.g. 27551).\n          -w, --max_workers\n                    Specify the maximum number of sub-process workers\n                    to launch (def. 40).\n\n**Example usage**\n\nProcess a bam file and output a bedmethyl files for only the\n'm' (a.k.a 5mC, 27551) modification to the current working directory. This will\ncreate the bedmethyl file **input_bam_m.bed**::\n\n    modbam_to_bedmethyl\n        --input_bam input_bam.bam           # Specify the input file\n        --save_path .                       # Specify the output directory\n        --modified_threshold 0.66           # Modification thresholds\n        --unmodified_threshold 0.33\n        --type_selector m                   # Modification Selection\n        --max_workers 40                    # Number of sub-process workers\n\n\nEquivalently::\n\n    modbam_to_bedmethyl -i <path_to_bam> -s . -m <threshold> -u <threshold> -t m -w 40\n\n\nFurther Information\n========================================================================\n\nFiltering Reads\n-------------------------------------------------------------------------\nOnly primary aligned reads with solvable modbase modification tags are processed,\ntherefore any read which is secondary or supplementary is skipped.\n\nIf the aligned read has hard-clipped bases, there is sufficient loss of context\nthat the modification annotation cannot be resolved accurately. Any read\nwith hard-clipped bases is also skipped.\n\n\nStrandedness\n------------------------------------------------------------------------\n\nThe modbase tag specification annotations state the strandedness of the modifications.\nThis information allows for modifications on 2d reads to be annotated by indicating\non which strand the modification was observed. The table below shows how forward and\nreverse complement reads with top (+) and bottom (-) modifications are\nresolved in reference space.\n\nFor example, a reverse complement aligned read (-) with modifications on the\nbottom-strand (-) will be resolved to the forward strand (+) aligned in the\nreference direction.\n\n+--------------------+-----------------------------------------------------------------+\n| Strandedness       | SEQ direction according to FLAG                                 |\n| in                 +---------------------------+-------------------------------------+\n| output file        | 0x10 not set              | 0x10 set                            |\n|                    | (i.e. forward alignment)  | (i.e. reverse-complement alignment) |\n+===============+====+===========================+=====================================+\n| Modification  | \\+ |                           |                                     |\n| Tag           |    |          \\+               |            \\-                       |\n| Strandedness  +----+---------------------------+-------------------------------------+\n|               | \\- |                           |                                     |\n|               |    |          \\-               |            \\+                       |\n+---------------+----+---------------------------+-------------------------------------+\n\n\nModification Types and ChEBI Codes\n-------------------------------------------------------------------------\n\nThis application can process all modifications noted in the modbam specification in\nboth the 'bam character' or ChEBI (Chemical Entities of Biological Interest) styles.\n(e.g. C+m; and/or C+27551;). The ChEBI identities and modification definitions of\nall supported modifications are found in `modbam_to_bedmethyl/ChEBI/ChEBI.yaml`.\n\nNote that the molecule name spellings are those used by the modbam specification and\nnot the ChEBI specification although they should be similar. The modification\nabbreviations used (e.g. 5mC) are defined by the modbam tag\nspecification only and are not supported by ChEBI. These can be found at:\nhttps://github.com/samtools/hts-specs/pull/418/files#diff-e765c6479316309f56b636f88189cdde8c40b854c7bdcce9ee7fe87a4e76febcR534\n\nThe ChEBI identities are used under the Creative Commons License (CC BY 4.0).\n\nMultiple Modifications\n-------------------------------------------------------------------------\n\nIf there are multiple modifications at a single site, only the modification with\nthe highest likelihood is recorded at that site, and so the lower scoring modification\ndoes not count towards the coverage or percent aligned.\n\n\n\nOutput file name\n-------------------------------------------------------------------------\n\nThe output file will be of the form `<bam_name>_<bam_character>.bed`.\nWhere ChEBI Identities are used, these uphold the output naming convention by\ntranslating the ChEBI identity to its bam character counterpart.\n\nFor example: 'alignment_1.bam' gives ['alignment_1_m.bed', 'alignment_1_h.bed']\n\nIndexing in basecall space\n-------------------------------------------------------------------------\n\nMM tags list the number of occurrences of the named base in the basecall sequence\nbetween each modified base of that name. So a tag of `C+m,1,0,1` indicates modifications\non the 2nd, 3rd and 5th C-base in the sequence.\nAll indexing in the MM tags is done in basecall-space in the original direction of the\nread, i.e. before a reference alignment. In the case of reverse complement alignments\nthe basecall_sequence is _not_ the query_sequence listed in the bam file, which is given\nin the reference direction, and a reverse complement is required to recover the original\nbasecall sequence from the bam file.\n\nIn the case where reads have been incorrectly annotated you will commonly see an\nIndexError as it will attempt to identify bases which may be beyond the scope of\nthe basecall sequence.\n\n\nViewing the Sequence with Annotated Modifications\n=========================================================================\n\nTo view the basecalled sequence with annotated modifications the\n`print_sequence_modifications` script is available::\n\n    print_sequence_modifications --help\n\nThis script simply writes to stdout the basecalled sequence in the following format::\n\n    base{{modification}{percentage}...}.\n\nFor example::\n\n    Single Modifications:   Cm99\n    Multiple Modifications: Cm62h12\n    ChEBI Modifications:    C(27551)55\n\nThe output is written as two columns with the basecalled sequence base on the left\nand the complement base on the right. The output is always in the as-basecalled\ndirection.\n\nFor example, given a forward read with::\n\n    query_sequence = 'AGGTT'\n    Modifications tags = 'Mm:Z:T+g,0;G-m,1; Ml:B:C,196,251'\n\nWe would observe::\n\n        A         T\n        G         C\n        G         Cm98\n        Tg76      A\n        T         A\n\nThis example is tested in test/data/synthetic_reads/print_sequence_examples/docstr.sam\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nanoporetech/modbam-to-bedmethyl",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modbam-to-bedmethyl",
    "package_url": "https://pypi.org/project/modbam-to-bedmethyl/",
    "platform": "",
    "project_url": "https://pypi.org/project/modbam-to-bedmethyl/",
    "project_urls": {
      "Homepage": "https://github.com/nanoporetech/modbam-to-bedmethyl"
    },
    "release_url": "https://pypi.org/project/modbam-to-bedmethyl/0.2.0/",
    "requires_dist": [
      "pysam (>=0.16)",
      "pyyaml (>=5.4.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Oxford Nanopore Technologies - ModBAM to bedMethyl",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11149472,
  "releases": {
    "0.1.1": [],
    "0.2.0": []
  },
  "urls": [],
  "vulnerabilities": []
}