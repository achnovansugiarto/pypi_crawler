{
  "info": {
    "author": "Matthias RiÃŸe",
    "author_email": "m.risse@fz-juelich.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DataLad extension for code execution in get commands\n\n[![check](https://github.com/matrss/datalad-getexec/actions/workflows/check.yml/badge.svg)](https://github.com/matrss/datalad-getexec/actions/workflows/check.yml)\n[![codecov](https://codecov.io/gh/matrss/datalad-getexec/branch/main/graph/badge.svg?token=W8PMJRM66H)](https://codecov.io/gh/matrss/datalad-getexec)\n[![docs](https://readthedocs.org/projects/datalad-getexec/badge/?version=latest)](https://datalad-getexec.readthedocs.io/en/latest/?badge=latest)\n\nCAUTION: Work-in-Progress!\n\nThis DataLad extension provides facilities to register arbitrary commands for files in git-annex,\nwhich are then executed if `datalad get` is called on those files (and they are not yet present).\n\n## How do I use this?\n\nThis extension provides a new high-level datalad command called `getexec`\nwhich can be used to register commands on files.\n\nIn the following we will assume that we have the extension installed\nand are inside a DataLad dataset.\n\nAs a simple example,\nwe can register a command that writes \"Hello World!\" into a text file called \"test.txt\":\n```\ndatalad getexec --path test.txt -- 'bash' '-c' 'printf \"Hello World!\" > \"$1\"' 'test-cmd'\n```\nAs a result of this,\nwe now have the file \"test.txt\" with it's expected content.\nSince we told git-annex that we can recreate this file with the specified bash call,\nwe can now safely drop the file\nand then automatically get it recreated:\n```\ndatalad drop test.txt\ndatalad get test.txt\n```\n\nSince our registered program might depend on some other annex'ed files\nwe can specify those dependencies as well:\n```\ndatalad getexec --path depends-on-test.txt -i test.txt -- 'bash' '-c' '(cat test.txt; printf \"\\nMore Text.\") > \"$1\"' 'test-cmd'\n```\nThis way,\nif `datalad get` is called on \"depends-on-test.txt\" git-annex will make sure,\nthat \"test.txt\" is present before executing the registered command.\nTherefore,\nthe following will work:\n```\ndatalad drop test.txt\ndatalad drop depends-on-test.txt\ndatalad get depends-on-test.txt\n```\n\nThere are some limitations to what commands can be registered.\nFirst of all,\nthere is no shell interpretation happening;\nthe command is essentially passed verbatim to python's `subprocess.run`.\nThis is why the examples above look a bit more complex with the call to bash.\nIn the above examples,\neach quoted part after `--` becomes one element in the list passed to `subprocess.run`.\nIn practice,\nit would be a good idea to externalize the command into e.g. a shell script\nand have a single argument in the `getexec` call.\n\nSecond,\nthe command is expected to always produce a single output file,\nthe location of which is passed as the first (and only) argument to the command.\nThis is the `$1` in the bash calls above.\n\nLastly,\nsince the command is executed in the context of a `get`,\nthe resulting file is always expected to remain the same.\nThis means that two consecutive calls to the command need to produce files with identical checksums,\notherwise git-annex will complain.\nEssentially,\nthe command is expected to behave somewhat like a pure function.\nIf this does not fit your use-case you are probably looking for DataLad's builtin `run` and `rerun`.\n\n## How does it work?\n\nThis extension works by implementing a new git-annex special remote which kind of abuses the URL handling of git-annex.\nThe special remote takes responsibility of all URLs with a scheme of \"getexec:\";\nencoded inside of these URLs then is the necessary information to re-execute the registered command.\nThe DataLad part of the extension simply takes the user input,\ngenerates a matching URL for it\nand then registers the URL with git-annex.\n\nWhen `get`ing a file that is not currently present,\ngit-annex will do it's usual thing to determine from where to fetch the data.\nIf git-annex determines that the special remote of this extension should provide the data\nthen it will rerun the registered command.\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matrss/datalad-getexec",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datalad-getexec",
    "package_url": "https://pypi.org/project/datalad-getexec/",
    "platform": null,
    "project_url": "https://pypi.org/project/datalad-getexec/",
    "project_urls": {
      "Homepage": "https://github.com/matrss/datalad-getexec"
    },
    "release_url": "https://pypi.org/project/datalad-getexec/0.1.0/",
    "requires_dist": [
      "datalad (>=0.17.0)",
      "annexremote (>=1.6.0)",
      "pytest ; extra == 'devel'",
      "coverage ; extra == 'devel'"
    ],
    "requires_python": ">=3.8",
    "summary": "DataLad extension for code execution in get commands",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16710075,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d04814627d389ccdbf40996f714022e6870db1b096373bb30da3126665415d8",
          "md5": "d0da401c820a3e198d4b4c7c9a39d904",
          "sha256": "37796d5a0f463b8236fe1fa2790f893c2df6b3c9bc346e56f29a5d112a700475"
        },
        "downloads": -1,
        "filename": "datalad_getexec-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0da401c820a3e198d4b4c7c9a39d904",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10032,
        "upload_time": "2023-02-06T09:41:14",
        "upload_time_iso_8601": "2023-02-06T09:41:14.356104Z",
        "url": "https://files.pythonhosted.org/packages/6d/04/814627d389ccdbf40996f714022e6870db1b096373bb30da3126665415d8/datalad_getexec-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82ba45e6c0fb413f48e7d04867066eb43038c59a198a2355c8ce24a8accd4be5",
          "md5": "55ca091856a1a95a6ad4127a606c1fd8",
          "sha256": "d9666de3a08aeb3fc7b0bc6327569aad6150d149098e3f577ea4aa33c2dd6bee"
        },
        "downloads": -1,
        "filename": "datalad-getexec-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "55ca091856a1a95a6ad4127a606c1fd8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 356959,
        "upload_time": "2023-02-06T09:41:16",
        "upload_time_iso_8601": "2023-02-06T09:41:16.580823Z",
        "url": "https://files.pythonhosted.org/packages/82/ba/45e6c0fb413f48e7d04867066eb43038c59a198a2355c8ce24a8accd4be5/datalad-getexec-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d04814627d389ccdbf40996f714022e6870db1b096373bb30da3126665415d8",
        "md5": "d0da401c820a3e198d4b4c7c9a39d904",
        "sha256": "37796d5a0f463b8236fe1fa2790f893c2df6b3c9bc346e56f29a5d112a700475"
      },
      "downloads": -1,
      "filename": "datalad_getexec-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0da401c820a3e198d4b4c7c9a39d904",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 10032,
      "upload_time": "2023-02-06T09:41:14",
      "upload_time_iso_8601": "2023-02-06T09:41:14.356104Z",
      "url": "https://files.pythonhosted.org/packages/6d/04/814627d389ccdbf40996f714022e6870db1b096373bb30da3126665415d8/datalad_getexec-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82ba45e6c0fb413f48e7d04867066eb43038c59a198a2355c8ce24a8accd4be5",
        "md5": "55ca091856a1a95a6ad4127a606c1fd8",
        "sha256": "d9666de3a08aeb3fc7b0bc6327569aad6150d149098e3f577ea4aa33c2dd6bee"
      },
      "downloads": -1,
      "filename": "datalad-getexec-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "55ca091856a1a95a6ad4127a606c1fd8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 356959,
      "upload_time": "2023-02-06T09:41:16",
      "upload_time_iso_8601": "2023-02-06T09:41:16.580823Z",
      "url": "https://files.pythonhosted.org/packages/82/ba/45e6c0fb413f48e7d04867066eb43038c59a198a2355c8ce24a8accd4be5/datalad-getexec-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}