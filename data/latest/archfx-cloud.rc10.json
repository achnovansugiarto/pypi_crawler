{
  "info": {
    "author": "Arch Systems Inc.",
    "author_email": "info@archsys.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# ArchFX Cloud Python API Package\n\n[![PyPI version](https://img.shields.io/pypi/v/archfx_cloud.svg)](https://pypi.python.org/pypi/archfx-cloud)\n\nA python library for interacting with [ArchFX Cloud](https://archfx.io) Rest API.\n\n## Installation\n\nWhen it comes to using Python packages, it is always recommened you use a Python Virtual Env. Using Python 3, you can simply do\n\n```bash\npython3 -m venv  ~/.virtualenv/archfx-cloud\nsource ~/.virtualenv/archfx-cloud/bin/activate\n```\n\nor follow one of the many tutorials to setup Python virtual environments.\n\nOnce you have set up a virtual, env, simply install the package with:\n\n```bash\npip install archfx_cloud\n```\n\nPackage is based on https://github.com/samgiles/slumber and https://github.com/iotile/python_iotile_cloud\n\n## ArchFX Cloud Resource Overview\n\nIn a Rest API, Resources represent tables in the database. The following resources are available in **ArchFX Cloud**:\n\n- **account**: Represent users. A user only has access to its own user profile\n- **org**: Users belong to Organizations as members. Some of these users can act as admins for the organization.\n- **site**: Organizations contain Sites. A site usually represents a geographical location.\n- **area**: Sites can have Areas, which either represent a group of discrete manufacturing, or it is a group\nof assembly lines. Areas usually represent Buildings or a set of machines of the same type.\n- **line**: Sites or Areas can have Lines, which represent assembly lines. Lines are usually created within an area\nbut do not need to. But like areas, they do need to always belong to a Site.\n- **machine**: A Machine represents the physical machine we are extracting data from. It is a virtual concept but\nis usually one to one with a machine in the factory, and has a brand, model, serial number and maybe asset number.\n- **device**: A device represent IOTile HW Taps, and/or Factory SW connectors that extract data from a Machine. a Given\n**Machine** may have multiple HW taps or even multiple SW connectors, which is one there is a one to many\nrelationship between Machines and Devices\n- **stream**: Streams represent a globally unique instance of data comming from a given device (sensor).\nStreams represent the virtual data at the machine level (regardless of the device it came from). Over time,\na given stream may come from different devices (e.g. if a device breaks and needs to be replaced).\n- **streampages**: A stream is a virtual concept that is build out of **device** data. Data on a device is\nrepresented by a StreamPage. A stream page is always linked to a Stream, but may have a specific start/end\ntime period. A stream is therefore built out of stream pages, which may or may not come from the same device.\n- **data**: Every Stream represents the time series data. This resource can be used to access this data.\n\n### Globally Unique IDs\n\nMost of the key records in the database use a universally unique ID, in the form of an ID Slug. We borrow the term slug\nfrom blogging systems because we use it the same way to create unique but readable URLs.\n\nThe following are the resources that use a globally unique ID:\n\n- Sites use **ps--0000-0001**\n- Areas use **pa--0000-0001**\n- Lines use **pl--0000-0001**\n- Device **d--0000-0000-0000-0001** represent device 1. Note that this is also the Serial Number for the device itself,\nand can be found on each IOTile Device. For virtual devices (SW connectors), the ID is also assigned from the same\nplace. Note that all device IDs are allocated and managed by https://iotile.cloud but that should be transparent to users.\nAll devices have the same `d--0000-0000` scope.\n- Machines use the same standard as devices, except that the use a non-zero scope. e.g. **d--0000-0001-0000-0001**\n- Sites, Areas, Lines, Machines and Devices can all have streams of data, but all share the same globally unique naming\nstandard. All streams are named based on `<parent_type>--<parent_id>--<device/machine_id>--<variable_id>` where the variable\nis a 32bit identifier, usually following global IDs (e.g. `0000-5051` to represent `ProductReady`):\n  - **ss--0000-0001--0000-0000-0000-0000--0000-5051** represents a site stream for site `ps--0000-0001`\n  - **sa--0000-0001--0000-0000-0000-0000--0000-5051** represents an area stream for area `pa--0000-0001`\n  - **sl--0000-0001--0000-0000-0000-0000--0000-5051** represents a line stream for line `pl--0000-0001`\n  - **sl--0000-0001--0000-0000-0000-0001--0000-5051** represents a device stream for device `d--0000-0000-0000-0001` under line `pl--0000-0001`\n  - **sl--0000-0001--0000-0001-0000-0001--0000-5051** represents a machine stream for machine `d--0000-0001-0000-0001` under line `pl--0000-0001`\n\nYou can see how:\n\n- Slug components are separated by a ‘--’ string\n- A one or two character letter(s) represents the type of slug: 'p?', 'd', and 's?'\n\n## User Guide\n\n### Login and Logout\n\nThe Api class is used to login and logout from the ArchFX Cloud\n\nExample:\n\n```python\nfrom archfx_cloud.api.connection import Api\n\nc = Api('https://arch.arhfx.io')\n\nok = c.login(email=args.email, password=password)\nif ok:\n    # Do something\n\n    c.logout()\n```\n\nIf you have a JWT token, you can skip the login and just set the token:\n\n```python\nfrom archfx_cloud.api.connection import Api\n\nc = Api('https://arch.arhfx.io')\n\nc.set_token('big-ugly-token')\n```\n\nYou can use the Api itself to login and get a token:\n\n```python\nfrom archfx_cloud.api.connection import Api\n\nc = Api('https://arch.arhfx.io')\n\nok = c.login(email=args.email, password=password)\nif ok:\n    token = c.token\n    # write out token or store in some secret .ini file\n```\n\n### Generic Rest API\n\nThe `Api(domain)` can be used to access any of the APIs in https://arch.archfx.io/api/v1/\n\nThe `Api(domain)` is generic and therefore will support any future resources supported by the ArchFX Cloud Rest API.\n\n```python\nfrom archfx_cloud.api.connection import Api\n\napi = Api('https://arch.arhfx.io')\nok = api.login(email='user@example.com', password='my.pass')\n\n## GET https://arch.archfx.io/api/v1/org/\n##     Note: Any kwargs passed to get(), post(), put(), delete() will be used as url parameters\napi.org.get()\n\n## POST https://arch.archfx.io/api/v1/org/\nnew = api.org.post({\"name\": \"My new Org\"})\n\n## PUT https://arch.archfx.io/api/v1/org/{slug}/\napi.org(new[\"slug\"]).put({\"about\": \"About Org\"})\n\nPATCH https://arch.archfx.io/api/v1/org/{slug}/\napi.org(new[\"slug\"]).patch({\"about\": \"About new Org\"})\n\n## GET https://arch.archfx.io/api/v1/org/{slug}/\napi.org(new[\"slug\"]).get()\n\n## DELETE https://arch.archfx.io/api/v1/org/{slug}/\n## NOTE: Not all resources can be deleted by users\napi.org(new[\"slug\"]).delete()\n```\n\nYou can pass arguments to any get() using\n\n```python\n# /api/v1/org/\nfor org in api.org.get()['results']:\n   # Pass any arguments as get(foo=1, bar='2'). e.g.\n   # /api/v1/site/?org__slug=<slug>\n   org_sites = c.site.get(org='{0}'.format(org['slug']))\n\n```\n\nYou can also call nested resources/actions like this:\n\n```python\n# /api/v1/machine/<slug>/devices/\nfor org in api.machine.get()['results']:\n   # /api/v1/machine/<slug>/devices\n   associated_devices = c.machine(org['slug']).devices.get()\n\n```\n\n### Globaly unique ID slugs\n\nTo easily handle ID slugs, use the `utils.gid` package:\n\n```python\nparent = ArchFxParentSlug(5, ptype='pl)\nassert(str(parent) == 'pl--0000-0005')\n\ndevice = ArchFxDeviceSlug(10)\nassert(str(device) == 'd--0000-0000-0000-000a')\n\n\nid = ArchFxStreamSlug()\nid.from_parts(parent=parent, device=device, variable='0000-5501)\nassert(str(id) == 'sl--0000-0005--0000-0000-0000-000a--0000-5001')\n\nparts = id.get_parts()\nself.assertEqual(str(parts['parent']), str(parent))\nself.assertEqual(str(parts['device']), str(device))\nself.assertEqual(str(parts['variable']), '0000-5501')\n\n# Other forms of use\ndevice = ArchFxDeviceSlug('000a)\nassert(str(device) == 'd--0000-0000-0000-000a')\ndevice = ArchFxDeviceSlug('d--000a')\nassert(str(device) == 'd--0000-0000-0000-000a')\ndevice = ArchFxDeviceSlug(0xa)\nassert(str(device) == 'd--0000-0000-0000-000a')\n```\n\n### BaseMain Utility Class\n\nAs you can see from the examples above, every script is likely to follow the following format:\n\n```python\n# Parse arguments from user and get password\n# Login to server\n# Do some real work\n# Logout\n```\n\nTo make it easy to add this boilerplate code, the BaseMain can be used to follow a predefined, opinionated flow\nwhich basically configures the `logging` and `argsparse` python packages with a basic configuration during the \nconstruction. Then the `main()` method runs the following flow, where each function call can be overwritten in your\nown derived class\n\n```python\n   self.domain = self.get_domain()\n   self.api = Api(self.domain)\n   self.before_login()\n   ok = self.login()\n   if ok:\n       self.after_login()\n       self.logout()\n       self.after_logout()\n```\n\nAn example of how to use this class is shown below:\n\n```python\nclass MyScript(BaseMain):\n\n    def add_extra_args(self):\n        # Add extra positional argument (as example)\n        self.parser.add_argument('foo', metavar='foo', type=str, help='RTFM')\n\n    def before_login(self):\n        logger.info('-----------')\n\n    def after_login(self):\n        # Main function to OVERWITE and do real work\n        do_some_real_work(self.api, self.args)\n\n    def login(self):\n        # Add extra message welcoming user\n        ok = super(MyScript, self).login()\n        if ok:\n            logger.info('Welcome {0}'.format(self.args.email))\n        return ok\n\n    def logout(self):\n        # Add extra message to say Goodbye\n        super(MyScript, self).logout()\n        logger.info('Goodbye!')\n\n\nif __name__ == '__main__':\n\n    work = MyScript()\n    work.main()\n```\n\n### Uploading a Streamer Report\n\nThe `ArchFXDataPoint` and `ArchFXFlexibleDictionaryReport` helper classes can be used to generate a Streamer Report\ncompatible with ArchFX Cloud. A Streamer Report can be used to send several stream data records together.\nUsing Streamer Reports have several benefits over uploading data manually using the Rest API. Apart from the efficiency\nof uploading multiple data points together, the streamer report ensures that data is not processed multiple times.\nEach record has a sequential ID which ensures that the cloud will never process data that has already been processed,\nallowing Streamer Reports to be uploaded multiple times without worrying about duplication.\n\nThe Streamer Report uses [msgpack](https://msgpack.org) as format, which is a compressed JSON file.\n\nNext is a simple example for using these classes:\n\n```python\nfrom datetime import datetime\nfrom io import BytesIO\nfrom dateutil import parser\nfrom archfx_cloud.api.connection import Api\nfrom archfx_cloud.reports.report import ArchFXDataPoint\nfrom archfx_cloud.reports.flexible_dictionary import ArchFXFlexibleDictionaryReport\n\n# Create Data Points\nreading = ArchFXDataPoint(\n    timestamp=parser.parse('2021-01-20T00:00:00.100000Z'),\n    stream='0001-5090',\n    value=2.0,\n    summary_data={'foo': 5, 'bar': 'foobar'},\n    raw_data=None,\n    reading_id=1000\n)\nevents.append(reading)\nreading = ArchFXDataPoint(\n    timestamp=parser.parse('2021-01-20T00:00:00.200000+00:00'),\n    stream='0001-5090',\n    value=3.0,\n    summary_data={'foo': 6, 'bar': 'foobar'},\n    reading_id=1001\n)\nevents.append(reading)\n\n# Create Report\nsent_time = datetime.datetime.utcnow()\nreport = ArchFXFlexibleDictionaryReport.FromReadings(\n    device='d--1234',\n    data=events,\n    report_id=1003,\n    streamer=0xff,\n    sent_timestamp=sent_time\n)\n\n# Load Report to the Cloud\napi = Api('https://arch.arhfx.io')\nok = api.login(email=args.email, password=password)\nif ok:\n    fp = (\"report.mp\", BytesIO(report.encode()))\n    resp = api.streamer().report.upload_fp(fp=fp, timestamp=sent_time.isoformat())\n```\n\n## Requirements\n\narchfx_cloud requires the following modules.\n\n- Python 3.7+\n- requests\n- python-dateutil\n\n## Development\n\nTo test, run `python setup.py test` or to run coverage analysis:\n\n```bash\ncoverage run --source=archfx_cloud setup.py test\ncoverage report -m\n```\n\n## Deployment\n\nTo deploy to pypi:\n\n1. Update `version.py` with new version number\n1. Update `RELEASE.md` with description of new release\n1. Run `python setup.py test` to ensure everything is ok\n1. Commit all changes to master (PR is needed)\n1. Once everythin commited, create a new version Tag. Deployment is triggered from that:\n\n```bash\ngit tag -a v0.9.13 -m \"v0.9.13\"\ngit push origin v0.9.13\n```\n\n### Manual Release\n\nAll deployments should be done using the Ci/CD process (github actions)\nbut just for copleteness, this is how a manual deployments is done\n\n```bash\n# Test\npython setup.py test\n# Build\npython setup.py sdist bdist_wheel\ntwine check dist/*\n# Publish\ntwine upload dist/*\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iotile/python_archfx_cloud",
    "keywords": "iotile,archfx,arch,iiot,automation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "archfx-cloud",
    "package_url": "https://pypi.org/project/archfx-cloud/",
    "platform": null,
    "project_url": "https://pypi.org/project/archfx-cloud/",
    "project_urls": {
      "Homepage": "https://github.com/iotile/python_archfx_cloud"
    },
    "release_url": "https://pypi.org/project/archfx-cloud/0.14.0/",
    "requires_dist": [
      "requests (>=2.21.0)",
      "python-dateutil",
      "msgpack (<1.1,>=1.0.2)",
      "typedargs (<2,>=1.1.2)"
    ],
    "requires_python": ">=3.7,<4",
    "summary": "Python client for https://archfx.io",
    "version": "0.14.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14612002,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfe5931831d0709b47720e39a751dd5c90a1379cbf2263e595fa80908161b17e",
          "md5": "7ed55f12e097f99a034f570e99822d2d",
          "sha256": "4f269323f0660c9d2f3c8589915c97e90453a2ef1dea22e2defa2bfb40f10aca"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ed55f12e097f99a034f570e99822d2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 24310,
        "upload_time": "2021-04-06T03:59:58",
        "upload_time_iso_8601": "2021-04-06T03:59:58.413461Z",
        "url": "https://files.pythonhosted.org/packages/df/e5/931831d0709b47720e39a751dd5c90a1379cbf2263e595fa80908161b17e/archfx_cloud-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a7ce571e47cc8d09881566be81db6a6a8b87c2127aa6e3450a7f6b07c9ddf11",
          "md5": "928e3b00f8308160b05d49c3875e5eb3",
          "sha256": "59649e6de9f790ce421709818773319c1e268fa7296f4722f9529b2ad306bf09"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "928e3b00f8308160b05d49c3875e5eb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 26289,
        "upload_time": "2021-04-06T03:59:59",
        "upload_time_iso_8601": "2021-04-06T03:59:59.582962Z",
        "url": "https://files.pythonhosted.org/packages/7a/7c/e571e47cc8d09881566be81db6a6a8b87c2127aa6e3450a7f6b07c9ddf11/archfx_cloud-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8b84883fa247a0e3fba33eed279b8d7bc5cb547cd3cf5a651723cb2441bea1f",
          "md5": "80a9781af26dc55ac7529d53548c1b28",
          "sha256": "e57feab6949a3c9a1d381b0dae24f58c59da6142a9c77b26423dac8c94318f99"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.10.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80a9781af26dc55ac7529d53548c1b28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 24313,
        "upload_time": "2021-04-06T15:11:42",
        "upload_time_iso_8601": "2021-04-06T15:11:42.406218Z",
        "url": "https://files.pythonhosted.org/packages/b8/b8/4883fa247a0e3fba33eed279b8d7bc5cb547cd3cf5a651723cb2441bea1f/archfx_cloud-0.10.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cefd54adfcd38a5cef4881d9fa1a549fcfdac2ea3eb438a81bd48beb81283c7",
          "md5": "87cd3a13dcbe2a7d34dce7eeacfd4715",
          "sha256": "fa7c8f6aeb5b7b71a51f9186ff81a0d4413c60f1217a6a16aded35b2ddf34321"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "87cd3a13dcbe2a7d34dce7eeacfd4715",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 26280,
        "upload_time": "2021-04-06T15:11:43",
        "upload_time_iso_8601": "2021-04-06T15:11:43.585655Z",
        "url": "https://files.pythonhosted.org/packages/6c/ef/d54adfcd38a5cef4881d9fa1a549fcfdac2ea3eb438a81bd48beb81283c7/archfx_cloud-0.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d189be3423a2d51063249797aa3c255a6e1c81dd74636af1e388cf80a7741d9b",
          "md5": "82f96642f5b2feb03f09b3d31c3ecb8f",
          "sha256": "241f3bcea77889c3b84f807111a5ca30f6229b153c3d21e0f46d96b44fc78138"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.10.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82f96642f5b2feb03f09b3d31c3ecb8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 24050,
        "upload_time": "2021-04-06T20:08:21",
        "upload_time_iso_8601": "2021-04-06T20:08:21.298970Z",
        "url": "https://files.pythonhosted.org/packages/d1/89/be3423a2d51063249797aa3c255a6e1c81dd74636af1e388cf80a7741d9b/archfx_cloud-0.10.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fbcdab45284d9f9f23c7e0dfdaea7bbe35c0a2ed8cffc7e08f01205ffd84a85",
          "md5": "27fc4fdb1ee1bf066f45751337ddfbce",
          "sha256": "584274efe95e48ae9aacf13a000b79c5fd3960efdea2ac0dcd778b9230d80288"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.10.2.tar.gz",
        "has_sig": false,
        "md5_digest": "27fc4fdb1ee1bf066f45751337ddfbce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 26160,
        "upload_time": "2021-04-06T20:08:22",
        "upload_time_iso_8601": "2021-04-06T20:08:22.313815Z",
        "url": "https://files.pythonhosted.org/packages/9f/bc/dab45284d9f9f23c7e0dfdaea7bbe35c0a2ed8cffc7e08f01205ffd84a85/archfx_cloud-0.10.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d19203cd4ccb904b8abbd779f4b8a9d815f12a8a004098ced161c7f2cf43218",
          "md5": "08bcaa4169a84030b563319cff99b79d",
          "sha256": "b17d49e36d3beffc614b5de87ed985daf9e99f9979a2dea6e4b1406f5f75a52c"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.10.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08bcaa4169a84030b563319cff99b79d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 24033,
        "upload_time": "2021-07-02T22:10:16",
        "upload_time_iso_8601": "2021-07-02T22:10:16.559994Z",
        "url": "https://files.pythonhosted.org/packages/6d/19/203cd4ccb904b8abbd779f4b8a9d815f12a8a004098ced161c7f2cf43218/archfx_cloud-0.10.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a24d8eb6b1b00c7c5db0eb4122612b1601c24dbe637203dcc4d27b4f1e5b67cb",
          "md5": "bcdb5533497f4d53da3e55cb7fa5321c",
          "sha256": "cb99f16727ec9c7049adbf316f7930ba13fde193812f8ae8b94bb309e530f9a2"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.10.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bcdb5533497f4d53da3e55cb7fa5321c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 26830,
        "upload_time": "2021-07-02T22:10:18",
        "upload_time_iso_8601": "2021-07-02T22:10:18.003880Z",
        "url": "https://files.pythonhosted.org/packages/a2/4d/8eb6b1b00c7c5db0eb4122612b1601c24dbe637203dcc4d27b4f1e5b67cb/archfx_cloud-0.10.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17aa47bfe0b096216510f0e94366241f77987ff198d45e025065728ec8500653",
          "md5": "7fc2c3cc41f650eebfe94949adfee43c",
          "sha256": "e48b9405d2012cf92e6bc4302b2b79e8566cb0cf3fb9a4e8060b3f0b4e49e6e9"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fc2c3cc41f650eebfe94949adfee43c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 23772,
        "upload_time": "2021-07-16T22:37:43",
        "upload_time_iso_8601": "2021-07-16T22:37:43.667070Z",
        "url": "https://files.pythonhosted.org/packages/17/aa/47bfe0b096216510f0e94366241f77987ff198d45e025065728ec8500653/archfx_cloud-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ad24542522d5e081583f74fb6072bb9d6040f85266ce12e4f58961778879191",
          "md5": "5ef334a1e39ca81717a78628a6c5b58b",
          "sha256": "77d2e8fb9589aecd39bc1f44003408abdc707cca02113f8b065e17799e9c49b0"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5ef334a1e39ca81717a78628a6c5b58b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 26683,
        "upload_time": "2021-07-16T22:37:44",
        "upload_time_iso_8601": "2021-07-16T22:37:44.809702Z",
        "url": "https://files.pythonhosted.org/packages/7a/d2/4542522d5e081583f74fb6072bb9d6040f85266ce12e4f58961778879191/archfx_cloud-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e828798e2f1abf3bfcc45487274d18e041b0e059076fbf6a24217363e5a98f6d",
          "md5": "3871795daa3f736b9eda3b2efe451dee",
          "sha256": "782181748f4a923c2599cb7a707b75240a4fe696bf71ad3e8236884ec8f3420b"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3871795daa3f736b9eda3b2efe451dee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 23945,
        "upload_time": "2021-08-03T20:31:23",
        "upload_time_iso_8601": "2021-08-03T20:31:23.415685Z",
        "url": "https://files.pythonhosted.org/packages/e8/28/798e2f1abf3bfcc45487274d18e041b0e059076fbf6a24217363e5a98f6d/archfx_cloud-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5784a29fec0b39abf1f37bde2a924cc532da1836ff9880975f16a08467d2a8e3",
          "md5": "a194f8eaab432aee42f9aa9800ad5bda",
          "sha256": "fcb1cc889d014d0e73f87334dbaa7dfc7ff1c82e94d793420a3a47f7d2f8a2cd"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a194f8eaab432aee42f9aa9800ad5bda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 26803,
        "upload_time": "2021-08-03T20:31:24",
        "upload_time_iso_8601": "2021-08-03T20:31:24.688889Z",
        "url": "https://files.pythonhosted.org/packages/57/84/a29fec0b39abf1f37bde2a924cc532da1836ff9880975f16a08467d2a8e3/archfx_cloud-0.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59f5d469ed8fcba516ebe001c08d80b9f7d46dce42aa7acc95c6c371876eecc1",
          "md5": "b79d7ca1d6eafaab77f355329b38161a",
          "sha256": "d7c0c3710a8789c2c1f191eec88b18ab7c6079eb4bb5af009f669a2c102e3d51"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.13.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b79d7ca1d6eafaab77f355329b38161a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 23930,
        "upload_time": "2021-10-11T16:37:27",
        "upload_time_iso_8601": "2021-10-11T16:37:27.503618Z",
        "url": "https://files.pythonhosted.org/packages/59/f5/d469ed8fcba516ebe001c08d80b9f7d46dce42aa7acc95c6c371876eecc1/archfx_cloud-0.13.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da0c6518d4efd6aa5d34b338dce5d6c2c42c73bccbac9bf32f035ad76ce96a2e",
          "md5": "30041e7d36703e6fdecbdd7cb0a0e21d",
          "sha256": "ac2afe5b45d6d538a668c63090a3140f3df551291b634b554d6e626e8367c580"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.13.0.tar.gz",
        "has_sig": false,
        "md5_digest": "30041e7d36703e6fdecbdd7cb0a0e21d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 26793,
        "upload_time": "2021-10-11T16:37:29",
        "upload_time_iso_8601": "2021-10-11T16:37:29.620885Z",
        "url": "https://files.pythonhosted.org/packages/da/0c/6518d4efd6aa5d34b338dce5d6c2c42c73bccbac9bf32f035ad76ce96a2e/archfx_cloud-0.13.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b13d45230d8a6cec4ca133400bb42cd59945da22d4ca002e6a0e5d38ae43aea",
          "md5": "73aba1721e38ffa1e4ea31ea0e693e59",
          "sha256": "6ba8b24e6dafbe9170bb62e67be45f5be43028ddb94af6478018dcd6f09e1cd8"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.14.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73aba1721e38ffa1e4ea31ea0e693e59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 23983,
        "upload_time": "2022-08-01T11:23:34",
        "upload_time_iso_8601": "2022-08-01T11:23:34.507593Z",
        "url": "https://files.pythonhosted.org/packages/2b/13/d45230d8a6cec4ca133400bb42cd59945da22d4ca002e6a0e5d38ae43aea/archfx_cloud-0.14.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd755416f759772739a5ae6387b910b474b185b6954cf9e0a88021736ab5f84d",
          "md5": "8e5a0c85ed83e241898e85c8ba38f719",
          "sha256": "3cff7014cee6a59c646fe1c187b6ca46a5673327ac4e36c2df3a925a5aed7712"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.14.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8e5a0c85ed83e241898e85c8ba38f719",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 26895,
        "upload_time": "2022-08-01T11:23:36",
        "upload_time_iso_8601": "2022-08-01T11:23:36.163543Z",
        "url": "https://files.pythonhosted.org/packages/bd/75/5416f759772739a5ae6387b910b474b185b6954cf9e0a88021736ab5f84d/archfx_cloud-0.14.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1376e08d5997b6b287e9d2eb8512a7faa40cf41c123db3843d75a53146050fc4",
          "md5": "3a7f6252a6fea74bb9c296b9cae3b992",
          "sha256": "8bfbdbcd7d568909da6667e3da49510e2051ed7e4f8eb89305be99227e44636c"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a7f6252a6fea74bb9c296b9cae3b992",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 18263,
        "upload_time": "2021-04-03T23:53:24",
        "upload_time_iso_8601": "2021-04-03T23:53:24.262499Z",
        "url": "https://files.pythonhosted.org/packages/13/76/e08d5997b6b287e9d2eb8512a7faa40cf41c123db3843d75a53146050fc4/archfx_cloud-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9298b002cc566405fd4bfbe7b4b703036f83fbd739098f3bcab8fadedc610ec2",
          "md5": "1dd841ea4a66930c76bfd3357fde2afa",
          "sha256": "6b3f935b41f7d6001bc3e0cc3a3f19026baefa543b449e2558cdf097682f3626"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1dd841ea4a66930c76bfd3357fde2afa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 20980,
        "upload_time": "2021-04-03T23:53:25",
        "upload_time_iso_8601": "2021-04-03T23:53:25.652658Z",
        "url": "https://files.pythonhosted.org/packages/92/98/b002cc566405fd4bfbe7b4b703036f83fbd739098f3bcab8fadedc610ec2/archfx_cloud-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4492fba5a75cfe1b8a159076aa12f2d52c208b8fe104906ddff2d62ee903d5d8",
          "md5": "607802972964a6d98b87db9dcf415f54",
          "sha256": "0c06042dd17ca957578c2d790adf6579e1fef3ce0585680115b8ece84a88297a"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "607802972964a6d98b87db9dcf415f54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 18389,
        "upload_time": "2021-04-04T00:59:51",
        "upload_time_iso_8601": "2021-04-04T00:59:51.691388Z",
        "url": "https://files.pythonhosted.org/packages/44/92/fba5a75cfe1b8a159076aa12f2d52c208b8fe104906ddff2d62ee903d5d8/archfx_cloud-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fce45af2162869246287626d7ed19615192f556234616efa5428daa1627acded",
          "md5": "b5f9f73a5667754f6206c87ef09afb61",
          "sha256": "41c7f1eccd8203be106657930497a642a19421e68f59fccc05e473df8c9032b7"
        },
        "downloads": -1,
        "filename": "archfx_cloud-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5f9f73a5667754f6206c87ef09afb61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 20824,
        "upload_time": "2021-04-04T00:59:52",
        "upload_time_iso_8601": "2021-04-04T00:59:52.631931Z",
        "url": "https://files.pythonhosted.org/packages/fc/e4/5af2162869246287626d7ed19615192f556234616efa5428daa1627acded/archfx_cloud-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b13d45230d8a6cec4ca133400bb42cd59945da22d4ca002e6a0e5d38ae43aea",
        "md5": "73aba1721e38ffa1e4ea31ea0e693e59",
        "sha256": "6ba8b24e6dafbe9170bb62e67be45f5be43028ddb94af6478018dcd6f09e1cd8"
      },
      "downloads": -1,
      "filename": "archfx_cloud-0.14.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73aba1721e38ffa1e4ea31ea0e693e59",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4",
      "size": 23983,
      "upload_time": "2022-08-01T11:23:34",
      "upload_time_iso_8601": "2022-08-01T11:23:34.507593Z",
      "url": "https://files.pythonhosted.org/packages/2b/13/d45230d8a6cec4ca133400bb42cd59945da22d4ca002e6a0e5d38ae43aea/archfx_cloud-0.14.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd755416f759772739a5ae6387b910b474b185b6954cf9e0a88021736ab5f84d",
        "md5": "8e5a0c85ed83e241898e85c8ba38f719",
        "sha256": "3cff7014cee6a59c646fe1c187b6ca46a5673327ac4e36c2df3a925a5aed7712"
      },
      "downloads": -1,
      "filename": "archfx_cloud-0.14.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8e5a0c85ed83e241898e85c8ba38f719",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4",
      "size": 26895,
      "upload_time": "2022-08-01T11:23:36",
      "upload_time_iso_8601": "2022-08-01T11:23:36.163543Z",
      "url": "https://files.pythonhosted.org/packages/bd/75/5416f759772739a5ae6387b910b474b185b6954cf9e0a88021736ab5f84d/archfx_cloud-0.14.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}