{
  "info": {
    "author": "Athanasios Mattas",
    "author_email": "thanasismatt@gmail.gr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ShortestPaths\n\n![Conda] ![Build_Status] ![codecov]\n\n<br />\n\nBidirectional replacement-paths and k-shortest paths search with dynamic\nprogramming\n\n<img src=\"bin/ksp.png\" width=800/>\n\n<br />\n\n| requirements       |\n| ------------------ |\n| python3            |\n| click>=7.1.2       |\n| networkx>=2.5      |\n| numpy>=1.19.2      |\n| matplotlib>=3.3.2  |\n\n<!-- <br /> -->\n\n## Overview\n\nShortestPaths constitutes thesis source code. It examines the optimization of\nthe bidirectional *replacement-paths* and *k-shortest paths* search, using\ndynamic programming. The algorithm proposed memoizes the states of the search\nof the parent path and retrieves them upon searching the consequent paths. The\noptimization was validated experimentally in a parametric analysis of tree\nparameters, the order, the density and the topology of the graph. The\nreplacement paths problem is solved on both *edge-exclusive* and\n*node-exlusive* variations, as well as both *online* and *offline* versions.\nRegarding the k-shortest paths problem, *k* online replacement-paths searches\nare executed, following [*Yen*'s algorithm] with *Lawler*'s modification, while\nutilizing the developed bidirectional search with dynamic programming.\n[*Dijkstra*'s algorithm] is used for the shortest path search and a modified\n*[Erdős-Rényi]* random graph model is introduced, controlling the density and\nthe topology of the graph. More specifically, the *small world* property is\ncaptured by the topology of the graph, resulting in more realistic\nrepresentations.\n\nThe four supported methods for the k-shortest\npaths search are:\n\n1. Yen + Dijkstra\n2. Lawler + Dijkstra\n3. Lawler + Bid. Dijkstra\n4. Lawler + Bid. Dijkstra + DP\n\nA [PriorityQueue] class is implemented as a wrapper around [heapq], using the\n<priority, entry_counter, entry> triple, as suggested [here].\n<br />\n\nThesis supervisor: [Prof. Kostas Siozios]\n\n## Install\n\n```bash\n$ conda install -c mattasa shortestpaths\n```\n\n```bash\n$ pip install shortestpaths\n```\n\n## Usage\n\n```bash\n$ ksp [OPTIONS] COMMAND [OPTIONS]\n```\n\n```text\nOptions:\n  -n INTEGER                      number of nodes (used when path is None)\n                                  [default: 100]\n  -k INTEGER                      number of shortest paths to be generated\n                                  [default: 1]\n  --weighted / --no-weighted      [default: True]\n  --directed\n  --weights-on [edges|nodes|edges-and-nodes]\n                                  [default: edges-and-nodes]\n  --max-edge-weight INTEGER       [default: 1000]\n  --max-node-weight INTEGER       [default: 50]\n  -y, --yen\n  -l, --lawler\n  -b, --bidirectional             use bidirectional shortest path search\n  -p, --parallel                  use multiprocessing\n  -d, --dynamic                   use dynamic programming\n  -s, --seed INTEGER              fixes the random graph\n  --layout-seed INTEGER           fixes the random initialization of the\n                                  spring_layout.  [default: 1]\n  --show-graph                    plots up to 8 paths\n  --save-graph                    format: png\n  -v, --verbose                   prints the generated paths\n\nreplacement-paths Options:\n  -f, --failing [edges|nodes]  Setting what to fail, path edges or path nodes,\n                               in order to produce the replacement paths.\n                               [default: nodes]\n\n  --online                     When online, the path up until the failure is\n                               kept as it is (the algorithm is getting\n                               informed upon meeting the failed node or edge),\n                               whereas when not online, a new search starts\n                               from the source, ignoring the parent-path (the\n                               algorithm is a priori informed about the\n                               failure).\n\n```\n\n### Load your graph\n\nA [NetworkX formatted graph] can be loaded, using the following options:\n\n```text\n  --path TEXT                     The NetworkX-file path to read the graph\n                                  from. If not provided, a random graph of n\n                                  nodes will be generated. Supported formats:\n                                  [.adjlist, .edgelist, .gexf, .gml, .gpickle]\n                                  Note that .adjlist does not include weights.\n  -s, --source TEXT               If a graph is not provided, the source\n                                  defaults to node 1.\n  -t, --target TEXT               If a graph is not provided, the target\n                                  defaults to node n.\n  --nodetype TEXT                 convert nodes to this type  [default: int]\n  --comments TEXT                 marker for comment lines  [default: #]\n  --delimiter TEXT                Separator for node labels. The default is\n                                  whitespace.  [default:  ]\n  --encoding TEXT                 [default: utf-8]\n```\n\n### Example format: .edgelist\n\n```python\nimport networkx as nx\nG = nx.Graph()\nG.add_weighted_edges_from([[1, 2, 5], [1, 3, 6], [1, 4, 3], [2, 3, 1], [2, 4, 6]])\nnx.write_weighted_edgelist(G, \"testgraph.edgelist\")\n```\n\n```testgraph.edgelist``` content:<br />\n> 1 2 5<br />\n> 1 3 6<br />\n> 1 4 3<br />\n> 2 3 1<br />\n> 2 4 6<br />\n\n## Examples\n\n### Terminal\n\n```text\n$ ksp -v\n$ ksp --show-graph -k 5 -n 100\n$ ksp -v -d -k 20 -n 1000\n$ ksp --seed 1 --show-graph -n 200 replacement-paths --failing edges\n$ ksp --seed 1 --show-graph -n 200 replacement-paths --failing edges --online\n\n$ ksp -v -d -s <source> -t <target> --path <path-to-graph> --directed -k 50\n$ ksp -v -d -s <source> -t <target> --path <path-to-graph> replacement-paths\n```\n\n### Python\n\n```python\nimport shortestpaths as sp\n\nk_paths = sp.k_shortest_paths(G, s, t, k)\nprint(\"k_paths:\")\nsp.print_paths(k_paths)\nsp.plot_paths(k_paths, G)\n\nprint()\n\nmode = {\"failing\": \"edges\", \"online\": True}\nr_paths = sp.replacement_paths(G, s, t, **mode)\nprint(\"r_paths:\")\nsp.print_paths(r_paths)\nsp.plot_paths(r_paths, G, mode)\n```\n\n## Test\n\n```bash\n$ pytest --cov=shortestpaths shortestpaths\n```\n\n## Graph Model\n\n### Goals\n\n1. Control graph density\n2. Control graph topology\n\n### Nodal distance\n\nUtilizing the incremental naming of the nodes, *distance* between two nodes is\nrepresented by the difference of the node-IDs. For example, nodes 1 and 5 have\ndistance 4. Note that distance here has nothing to do with the corresponding\nedge weight and does not affect the algorithm execution, rather it is only used\nupon graph creation.\n\nThe frequency of pairs of nodes with distance *x*, in a simple, undirected,\ncomplete graph (α), is given by the line:\n\n<img src=\"https://latex.codecogs.com/png.latex?\\dpi{300}&space;\\bg_white&space;\\large&space;f'(x)=n-x\" height=18>\n\nWhereas, for the directed graph (β) the line is:\n\n<img src=\"https://latex.codecogs.com/png.latex?\\dpi{300}&space;\\bg_white&space;\\large&space;f'(x)=2(n-x)\" height=18>\n\n<img src=\"bin/graph_model/graph_model.png\" width=\"350\"/>\n\n### Small world property\n\nThe model constitutes a variation of the Gilbert version of the *[Erdős-Rényi]*\nmodel, where edge-probability is not uniform. More specifically, edges that\nconnect *distant* nodes are penalized, avoiding unrealistic paths that go to\nthe target with very few hops. This way, the *small world* property is\ncaptured by the topology of the graph, meaning that nodes tend to form small\ncommunities.\n\n### Edge weights\n\nThe edge weigths are randomly selected from the range [0, MAX_EDGE_WEIGHT],\nbiased with respect to the distance of the adjacent nodes. Namely, edges that\nconnect distant nodes tend to get penalized.\n\n### Probability distribution\n\nIn order to regulate the cutoff point of the edge-distances distribution, the\nsigmoid equation is used, like a low-pass filter. To form the final probability\ndistribution equation, the sigmoid equation is subtracted from one, for the\nsmaller distances to have the greater probability. Fillaly, the result is\nmultiplied with an initial probability *p<sub>0</sub>*, controling further the\ngraph density.\n\n<img src=\"https://latex.codecogs.com/png.latex?\\dpi{300}&space;\\bg_white&space;\\large&space;p(x)=p_0\\left&space;(1-\\frac{1}{1&plus;e^{-\\lambda\\left&space;[x-c(n-1)\\right&space;]}})\\right&space;)\" height=36>\n\n### Expected nodal-distance distribution\n\n<img src=\"https://latex.codecogs.com/png.latex?\\dpi{300}&space;\\bg_white&space;\\large&space;f(x)=f'(x)p(x)=p_0\\left&space;(1-\\frac{1}{1&plus;e^{-\\lambda\\left&space;[x-c(n-1)\\right&space;]}})\\right&space;)(n-x)\" height=36>\n\n### Expected graph density\n\n<img src=\"https://latex.codecogs.com/png.latex?\\dpi{300}&space;\\bg_white&space;m=\\int_{1}^{n-1}f(x)dx=\\int_{1}^{n-1}p_0\\left&space;(1-\\frac{1}{1&plus;e^{-\\lambda\\left&space;[x-c(n-1)\\right&space;]}})\\right&space;)(n-x)dx\" height=36><br />\n<img src=\"https://latex.codecogs.com/png.latex?\\dpi{300}&space;\\bg_white&space;d=\\frac{m}{m_{max}}=p_0p_{max}\" height=30>\n\n### Model Summary\n\nThe proposed graph model uses 3 parameters:\n\n* **c** : sigmoid center. Regulates the graph density, as well as defines the\ncutoff point of the edge-distance distribution.\n* **λ** : sigmoid gradient. Controls the area around the cutoff point.\n* **p<sub>0</sub>** : initial probability. Regulates the graph density. It is\nessentially the application of the Gilbert model over the graph formed by the\nother two parameters.\n\n\n<img src=\"bin/graph_model/prob_distribution_1.png\" width=\"650\"/><br />\n<img src=\"bin/graph_model/prob_distribution_2.png\" width=\"650\"/>\n\na. Nodal-distance probability distribution<br />\nb. Nodal-distance distribution at the complete graph with n = 100<br />\nc. Real nodal-distance distribution after applying the probability distribution\n   of a. on the complete graph of b.<br />\nd. Nodal-distance probability distribution with p<sub>0</sub> = 0.7 .<br />\ne. Expected nodal-distance distribution after applying d. to b.<br />\nf. Instantiation of e. A controlled randomness around the wanted topology is\n   evident.<br />\n\n### Usage\n\n```python\nimport shortestpaths as sp\n\n# adj_list format: [{(neighbor, hop_weight),},]\n# G: nx.Graph or nx.DiGraph\nadj_list, G = sp.random_graph(n,\n                              weighted=True,\n                              directed=True,\n                              weights_on=\"edges\",\n                              max_edge_weight=100,\n                              random_seed=None,\n                              center_portion=0.2,\n                              gradient=0.5,\n                              p_0=0.7)\n\n# inverted graph for reverse search\nadj_list_reverse = sp.adj_list_reversed(adj_list)\n```\n\n## Applying Dynamic Programming\n\nRegarding the **offline** replacement-paths, the algorithm conducts 2 searches of\nthe base path. The first is a simple path search. The second is the\n*memoization* process, where, having knowledge of the path and, thus, knowing\nwhich nodes/edges will fail, the algorithm memoizes only the states that\ncorrespond to each path-node. More specifically, each direction of the\nbidirectional search memoizes the described states, up until the *meeting edge*\nof the search. For replacement paths that correspond to a failed edge/ node\nthat the forward search of the base path visited, the forward search retrieves\nits state just before the failed item and the reverse search retrieves the last\nrecorded state, which is the state before the meeting edge. Likewise, the\nopposite goes for items failing after the meeting edge.\n\nAt the **online** counterpart, the state of forward search cannot be memoized,\nbecause the starting node is changing with each replacement-path. Therefore,\ndynamic programming is used only at the reverse sub-search. Also, this time\nthere is no need for saving the states. As for the second of the 2 searches, a\nunidirectional search starts from the target node, going backwards, and anytime\nit is about to visit a path-node, the corresponding bidirectional\nreplacement-path search begins, using the current state as the reverse state.\n\nFinally, the **k-shortest paths** search consists in executing *k* online\nreplacement-paths searches, following *Yen's* method with *Lawler's*\nmodification, where, obviously, the aforementioned first search is not\nexecuted, because the parent path is already known.\n\n### State retrieval | Replacement-paths offline\n\n<img src=\"bin/dp/state_retrieval_offline_after_me.png\" width=\"415\"/> <img src=\"bin/dp/state_retrieval_offline_before_me.png\" width=\"415\"/>\n\n### State retrieval | Replacement-paths online\n\n<img src=\"bin/dp/state_retrieval_online_after_me.png\" width=\"415\"/> <img src=\"bin/dp/state_retrieval_online_before_me.png\" width=\"415\"/>\n\n## Profiling\n\n### CPU time vs n vs density\n\nk: 10 &ensp;c: 0.15 &ensp;p<sub>max</sub>: 0.28\n\n<img src=\"bin/profiling/k-shortest-paths_profiling.png\" width=\"500\"/>\n\n<img src=\"bin/profiling/k-shortest-paths_profiling_matshows.png\" width=\"500\"/>\n\n### CPU time vs n vs k\n\nc: 0.15 &ensp;p<sub>0</sub>: 0.3 &ensp;p<sub>max</sub>: 0.28\n\n<img src=\"bin/profiling/k-shortest-paths_profiling_k_study.png\" width=\"415\"/>\n\n<img src=\"bin/profiling/k-shortest-paths_profiling_matshows_k_study.png\" width=\"300\"/>\n\n<img src=\"bin/profiling/\\k-shortest-paths_profiling_gains_matshows_k_study.png\" width=\"500\"/>\n\n## Conclusion\n\n* **DP** induces an optimization of the order **1-46%** over the bidirectional\n  k-shortest paths search with *Yen*'s method and *Lawler*'s modification, at\n  the scenarios tested.\n* Graph **density** and graph **topology** play a significant role over the\n  performance of algorithms and can effectively complement graph order for a\n  more comprehensive study.\n\n## License\n\n[GNU General Public License v3.0]\n\n<br />\n\n> (C) 2020, Athanasios Mattas <br />\n> atmattas@physics.auth.gr\n\n[//]: # \"links\"\n\n[Conda]: <https://img.shields.io/conda/v/mattasa/shortestpaths?color=blue>\n[Build_Status]: <https://travis-ci.com/ThanasisMattas/shortestpaths.svg?branch=master>\n[codecov]: <https://codecov.io/gh/ThanasisMattas/shortestpaths/branch/master/graph/badge.svg>\n[Prof. Kostas Siozios]: <https://ksiop.webpages.auth.gr/>\n[*Yen*'s algorithm]: <https://en.wikipedia.org/wiki/Yen%27s_algorithm>\n[Erdős-Rényi]: <https://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93R%C3%A9nyi_model>\n[*Dijkstra*'s algorithm]: <https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm>\n[PriorityQueue]: <https://github.com/ThanasisMattas/shortestpaths/blob/master/shortestpaths/priorityq.py#L20>\n[heapq]: <https://docs.python.org/3/library/heapq.html#module-heapq>\n[here]: <https://docs.python.org/3/library/heapq.html#priority-queue-implementation-notes>\n[NetworkX formatted graph]: <https://networkx.org/documentation/stable/reference/readwrite/index.html>\n[GNU General Public License v3.0]: <https://github.com/ThanasisMattas/shortestpaths/blob/master/COPYING>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ThanasisMattas/shortestpaths.git",
    "keywords": "",
    "license": "GNU GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shortestpaths",
    "package_url": "https://pypi.org/project/shortestpaths/",
    "platform": "",
    "project_url": "https://pypi.org/project/shortestpaths/",
    "project_urls": {
      "Homepage": "https://github.com/ThanasisMattas/shortestpaths.git"
    },
    "release_url": "https://pypi.org/project/shortestpaths/1.1.2/",
    "requires_dist": [
      "click (>=7.1.2)",
      "numpy (>=1.19.2)",
      "matplotlib (>=3.3.2)",
      "scipy (>=1.6.1)",
      "networkx (>=2.5)",
      "scikit-learn (>=0.24.2) ; extra == 'profiling'",
      "pytest (>=6.1.1) ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "Bidirectional replacement paths and k-shortest paths search with dynamic programming",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10945121,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7d4ad41bdb0e83f97f38c222c5207a533e2bc677ad641e7ef73161a2be39438",
          "md5": "24e503a3319029971aa30b77f86d3534",
          "sha256": "0a3559d57892049499b36d9897fb51d1d96428484522aafb2c239e3389da0314"
        },
        "downloads": -1,
        "filename": "shortestpaths-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24e503a3319029971aa30b77f86d3534",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 53741,
        "upload_time": "2021-06-24T19:10:51",
        "upload_time_iso_8601": "2021-06-24T19:10:51.713851Z",
        "url": "https://files.pythonhosted.org/packages/b7/d4/ad41bdb0e83f97f38c222c5207a533e2bc677ad641e7ef73161a2be39438/shortestpaths-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2e5ac824d81ec6330518e474df12feac2a6427ff7ea26a54cad05d1063c4bb9",
          "md5": "bc45f9c6f1ab5c51803ffaf81a7d17df",
          "sha256": "56399bd7f72dddf17b6a5789fe844473f7e63267970dcc63dc859e1a1970ce1d"
        },
        "downloads": -1,
        "filename": "shortestpaths-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc45f9c6f1ab5c51803ffaf81a7d17df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36923,
        "upload_time": "2021-06-24T19:10:54",
        "upload_time_iso_8601": "2021-06-24T19:10:54.040678Z",
        "url": "https://files.pythonhosted.org/packages/a2/e5/ac824d81ec6330518e474df12feac2a6427ff7ea26a54cad05d1063c4bb9/shortestpaths-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5bdb34f170368911b70e8e649416df8f9409ad59c25adb70c6cc88889c16b31",
          "md5": "64d6e2259c7c659588c53b4d8f280fad",
          "sha256": "e90f9a513b59b081fe60f08bb121fe555d28b25f48f5da875aab9c35a743f426"
        },
        "downloads": -1,
        "filename": "shortestpaths-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64d6e2259c7c659588c53b4d8f280fad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 53797,
        "upload_time": "2021-06-24T20:48:14",
        "upload_time_iso_8601": "2021-06-24T20:48:14.410795Z",
        "url": "https://files.pythonhosted.org/packages/d5/bd/b34f170368911b70e8e649416df8f9409ad59c25adb70c6cc88889c16b31/shortestpaths-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16e5a46a2d467516a274f078712e22598f1cf7fded54bcd9ef40442d10f8404d",
          "md5": "4809bd64b49a61319d242bc6b5a892ff",
          "sha256": "df32601d2ce0b83f935c2df5a963f16a65ffa186c400e09c595bb5debfedcc5f"
        },
        "downloads": -1,
        "filename": "shortestpaths-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4809bd64b49a61319d242bc6b5a892ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37047,
        "upload_time": "2021-06-24T20:48:16",
        "upload_time_iso_8601": "2021-06-24T20:48:16.865710Z",
        "url": "https://files.pythonhosted.org/packages/16/e5/a46a2d467516a274f078712e22598f1cf7fded54bcd9ef40442d10f8404d/shortestpaths-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dc9b2889dc778c07deeca54d5ab079ee8f9b27412367636bc5943a7da9c52aa",
          "md5": "c5c7829646992a75b0f4e5c5d51d344a",
          "sha256": "62b8168779bbfae7c9ec26ea47f93f0daeb875510c26da36b070101a7f49e103"
        },
        "downloads": -1,
        "filename": "shortestpaths-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5c7829646992a75b0f4e5c5d51d344a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56092,
        "upload_time": "2021-07-07T16:39:56",
        "upload_time_iso_8601": "2021-07-07T16:39:56.495149Z",
        "url": "https://files.pythonhosted.org/packages/9d/c9/b2889dc778c07deeca54d5ab079ee8f9b27412367636bc5943a7da9c52aa/shortestpaths-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de161033e65f8f4fa48087868e5b17aa7de10a674ef86900f95d76215623bc1a",
          "md5": "0043d1b5efa6746e18a9dd5db3fed491",
          "sha256": "e3da2d1b45ba3bc2d58a5b756483253d9ccd15584875842da97752aac2590393"
        },
        "downloads": -1,
        "filename": "shortestpaths-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0043d1b5efa6746e18a9dd5db3fed491",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39882,
        "upload_time": "2021-07-07T16:40:01",
        "upload_time_iso_8601": "2021-07-07T16:40:01.579381Z",
        "url": "https://files.pythonhosted.org/packages/de/16/1033e65f8f4fa48087868e5b17aa7de10a674ef86900f95d76215623bc1a/shortestpaths-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d57d6f22fadfa2b6bcf09355ca273da80b1e10f20fb5c0475b365aef330fc87f",
          "md5": "8d8de569f5b5a1e5dc66ed1c2bc005f9",
          "sha256": "2413f2f6f682c0d9ca49a7f36d833aa975a6b717dcdc029f60ccfb145a063b1f"
        },
        "downloads": -1,
        "filename": "shortestpaths-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d8de569f5b5a1e5dc66ed1c2bc005f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58033,
        "upload_time": "2021-07-08T21:04:00",
        "upload_time_iso_8601": "2021-07-08T21:04:00.310863Z",
        "url": "https://files.pythonhosted.org/packages/d5/7d/6f22fadfa2b6bcf09355ca273da80b1e10f20fb5c0475b365aef330fc87f/shortestpaths-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ec51863b8e2e24c0c833c37b878b36ef96adfaed5f9a5fc59f64188c0e46343",
          "md5": "2869e66bdbe511945636a800b33d3745",
          "sha256": "29004b34bdf5eeb701e38c1d5dd77f88843ce81046c5eae912a621e6c75cabee"
        },
        "downloads": -1,
        "filename": "shortestpaths-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2869e66bdbe511945636a800b33d3745",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41072,
        "upload_time": "2021-07-08T21:04:02",
        "upload_time_iso_8601": "2021-07-08T21:04:02.043899Z",
        "url": "https://files.pythonhosted.org/packages/0e/c5/1863b8e2e24c0c833c37b878b36ef96adfaed5f9a5fc59f64188c0e46343/shortestpaths-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07da86a1bdc3fc195004da4ce4d53146ae0ac19f7027463f856c78f34676fe38",
          "md5": "3a580932613ed19bbca7e7c7ba75824c",
          "sha256": "943bb7876cc6b097aea0fe0c84e68979a3e2c6d26597cfbf05345dec16066e42"
        },
        "downloads": -1,
        "filename": "shortestpaths-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a580932613ed19bbca7e7c7ba75824c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58018,
        "upload_time": "2021-07-09T08:32:16",
        "upload_time_iso_8601": "2021-07-09T08:32:16.695058Z",
        "url": "https://files.pythonhosted.org/packages/07/da/86a1bdc3fc195004da4ce4d53146ae0ac19f7027463f856c78f34676fe38/shortestpaths-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1c3d1beb131fa8553a6c1a6d371f1237f32153cdfc1484b49c928ba52e1fd2f",
          "md5": "1538153f42257e29e80073f1fe369dae",
          "sha256": "7f3b3b2db6a83b72464b977fb84ad79278aad772f0ce9e8db93c419b5f752cc8"
        },
        "downloads": -1,
        "filename": "shortestpaths-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1538153f42257e29e80073f1fe369dae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41169,
        "upload_time": "2021-07-09T08:32:19",
        "upload_time_iso_8601": "2021-07-09T08:32:19.030782Z",
        "url": "https://files.pythonhosted.org/packages/b1/c3/d1beb131fa8553a6c1a6d371f1237f32153cdfc1484b49c928ba52e1fd2f/shortestpaths-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acfa154fe995e5ea6c3fd3352585c7288a3f46e1aa14dde35893b523bac2c4b2",
          "md5": "4902d28cc140e81e06efc0b325f25d0d",
          "sha256": "d2b209e1851728f252ca2503aa742a22f89ecaf81184aa4823f1ff115a4e7389"
        },
        "downloads": -1,
        "filename": "shortestpaths-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4902d28cc140e81e06efc0b325f25d0d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60412,
        "upload_time": "2021-07-19T10:35:09",
        "upload_time_iso_8601": "2021-07-19T10:35:09.915535Z",
        "url": "https://files.pythonhosted.org/packages/ac/fa/154fe995e5ea6c3fd3352585c7288a3f46e1aa14dde35893b523bac2c4b2/shortestpaths-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff2f94493c69c387ef8b8e93673e1c10c00eab03e012aa824109c64eadd32c66",
          "md5": "c7205ff310929c49463bcadda417f398",
          "sha256": "5a23f92c9e72a6246ebf54c01a9b607ab6ace722428b954c559087e5adcf77dd"
        },
        "downloads": -1,
        "filename": "shortestpaths-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c7205ff310929c49463bcadda417f398",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46653,
        "upload_time": "2021-07-19T10:35:12",
        "upload_time_iso_8601": "2021-07-19T10:35:12.247233Z",
        "url": "https://files.pythonhosted.org/packages/ff/2f/94493c69c387ef8b8e93673e1c10c00eab03e012aa824109c64eadd32c66/shortestpaths-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "acfa154fe995e5ea6c3fd3352585c7288a3f46e1aa14dde35893b523bac2c4b2",
        "md5": "4902d28cc140e81e06efc0b325f25d0d",
        "sha256": "d2b209e1851728f252ca2503aa742a22f89ecaf81184aa4823f1ff115a4e7389"
      },
      "downloads": -1,
      "filename": "shortestpaths-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4902d28cc140e81e06efc0b325f25d0d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 60412,
      "upload_time": "2021-07-19T10:35:09",
      "upload_time_iso_8601": "2021-07-19T10:35:09.915535Z",
      "url": "https://files.pythonhosted.org/packages/ac/fa/154fe995e5ea6c3fd3352585c7288a3f46e1aa14dde35893b523bac2c4b2/shortestpaths-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff2f94493c69c387ef8b8e93673e1c10c00eab03e012aa824109c64eadd32c66",
        "md5": "c7205ff310929c49463bcadda417f398",
        "sha256": "5a23f92c9e72a6246ebf54c01a9b607ab6ace722428b954c559087e5adcf77dd"
      },
      "downloads": -1,
      "filename": "shortestpaths-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c7205ff310929c49463bcadda417f398",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 46653,
      "upload_time": "2021-07-19T10:35:12",
      "upload_time_iso_8601": "2021-07-19T10:35:12.247233Z",
      "url": "https://files.pythonhosted.org/packages/ff/2f/94493c69c387ef8b8e93673e1c10c00eab03e012aa824109c64eadd32c66/shortestpaths-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}