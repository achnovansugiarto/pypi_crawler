{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "azpysdkhelp@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Azure Maps Search Package client library for Python\n\nThis package contains a Python SDK for Azure Maps Services for Search.\nRead more about Azure Maps Services [here](https://docs.microsoft.com/azure/azure-maps/)\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/search) | [Product documentation](https://docs.microsoft.com/azure/azure-maps/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to <https://github.com/Azure/azure-sdk-for-python/issues/20691>_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.6 or later is required to use this package.\n- An [Azure subscription][azure_subscription] and an [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys).\n- A deployed Maps Services resource. You can create the resource via [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<account-name>` of your choice, and select a proper [pricing tier](https://docs.microsoft.com/azure/azure-maps/choose-pricing-tier) based on your needs via the `<sku-name>` parameter. Please refer to [this page](https://docs.microsoft.com/cli/azure/maps/account?view=azure-cli-latest#az_maps_account_create) for more details.\n\n```bash\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n### Install the package\n\nInstall the Azure Maps Service Search SDK.\n\n```bash\npip install azure-maps-search\n```\n\n### Create and Authenticate the MapsSearchClient\n\nTo create a client object to access the Azure Maps Search API, you will need a **credential** object. Azure Maps Search client also support two ways to authenticate.\n\n#### 1. Authenticate with a Subscription Key Credential\n\nYou can authenticate with your Azure Maps Subscription Key.\nOnce the Azure Maps Subscription Key is created, set the value of the key as environment variable: `AZURE_SUBSCRIPTION_KEY`.\nThen pass an `AZURE_SUBSCRIPTION_KEY` as the `credential` parameter into an instance of [AzureKeyCredential][azure-key-credential].\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.search import MapsSearchClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\nsearch_client = MapsSearchClient(\n    credential=credential,\n)\n```\n\n#### 2. Authenticate with an Azure Active Directory credential\n\nYou can authenticate with [Azure Active Directory (AAD) token credential][maps_authentication_aad] using the [Azure Identity library][azure_identity].\nAuthentication by using AAD requires some initial setup:\n\n- Install [azure-identity][azure-key-credential]\n- Register a [new AAD application][register_aad_app]\n- Grant access to Azure Maps by assigning the suitable role to your service principal. Please refer to the [Manage authentication page][manage_aad_auth_page].\n\nAfter setup, you can choose which type of [credential][azure-key-credential] from `azure.identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nNext, set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`\n\nYou will also need to specify the Azure Maps resource you intend to use by specifying the `clientId` in the client options. The Azure Maps resource client id can be found in the Authentication sections in the Azure Maps resource. Please refer to the [documentation][how_to_manage_authentication] on how to find it.\n\n```python\nfrom azure.maps.search import MapsSearchClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nsearch_client = MapsSearchClient(credential=credential)\n```\n\n## Key concepts\n\nThe Azure Maps Search client library for Python allows you to interact with each of the components through the use of a dedicated client object.\n\n### Sync Clients\n\n`MapsSearchClient` is the primary client for developers using the Azure Maps Search client library for Python.\nOnce you initialized a `MapsSearchClient` class, you can explore the methods on this client object to understand the different features of the Azure Maps Search service that you can access.\n\n### Async Clients\n\nThis library includes a complete async API supported on Python 3.5+. To use it, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee [azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport) for more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Maps Search tasks, including:\n\n- [Request latitude and longitude coordinates for an address](#request-latitude-and-longitude-coordinates-for-an-address)\n\n- [Search for an address or Point of Interest](#search-for-an-address-or-point-of-interest)\n\n- [Make a Reverse Address Search to translate coordinate location to street address](#make-a-reverse-address-search-to-translate-coordinate-location-to-street-address)\n- [Translate coordinate location into a human understandable cross street](#translate-coordinate-location-into-a-human-understandable-cross-street)\n- [Get async fuzzy search batch with param and batchid](#get-async-fuzzy-search-batch-with-param-and-batchid)\n- [Fail to get fuzzy search batch sync](#fail-to-get-fuzzy-search-batch-sync)\n- [Search inside Geometry](#search-inside-geometry)\n\n- [Working with exist library for Search](#working-with-exist-library-for-search)\n\n### Request latitude and longitude coordinates for an address\n\nYou can use an authenticated client to convert an address into latitude and longitude coordinates. This process is also called geocoding. In addition to returning the coordinates, the response will also return detailed address properties such as street, postal code, municipality, and country/region information.\n\n```python\nfrom azure.maps.search import MapsSearchClient\n\nsearch_result = client.search_address(\"400 Broad, Seattle\");\n```\n\n### Search for an address or Point of Interest\n\nYou can use Fuzzy Search to search an address or a point of interest (POI). The following examples demostrate how to search for `pizza` over the scope of a specific country (`France`, in this example).\n\n```python\nfrom azure.maps.search import MapsSearchClient\n\nfuzzy_search_result = client.fuzzy_search(query: \"pizza\", country_filter: \"fr\" );\n\nresult_address = fuzzy_search_result.results[0].address\n```\n\n### Make a Reverse Address Search to translate coordinate location to street address\n\nYou can translate coordinates into human readable street addresses. This process is also called reverse geocoding.\nThis is often used for applications that consume GPS feeds and want to discover addresses at specific coordinate points.\n\n```python\nfrom azure.maps.search import MapsSearchClient\n\ncoordinates=(47.60323, -122.33028)\n\nreverse_search_result = client.reverse_search_address(coordinates=coordinates);\n\nresult_summary = reverse_search_result.summary\n```\n\n### Translate coordinate location into a human understandable cross street\n\nTranslate coordinate location into a human understandable cross street by using Search Address Reverse Cross Street API. Most often, this is needed in tracking applications that receive a GPS feed from a device or asset, and wish to know where the coordinate is located.\n\n```python\nfrom azure.maps.search import MapsSearchClient\n\ncoordinates=(47.60323, -122.33028)\n\nreverse_search_result = client.reverse_search_cross_street_address(coordinates=coordinates);\n\nresult_address = reverse_search_result.results[0].address\n```\n\n### Get async fuzzy search batch with param and batchid\n\nThis sample demonstrates how to perform fuzzy search by location and lat/lon with async batch method. This function is accepting both `search_queries` and `batch_id` and returning an `AsyncLRO` object. The `batch_id` here can be use to retrieve the LRO object later which last 14 days.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\nasync with maps_search_client:\n    result = await maps_search_client.begin_fuzzy_search_batch(\n        search_queries=[\n            \"350 5th Ave, New York, NY 10118&limit=1\",\n            \"400 Broad St, Seattle, WA 98109&limit=6\"\n        ]\n    )\n\nbatch_id = result.batch_id\n```\n\nThe method `begin_fuzzy_search_batch()` also accepts `batch_id` as the parameter. The `batch_id` here can be use to retrieve the LRO object later which last 14 days.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\nasync with maps_search_client:\n    result = await maps_search_client.begin_fuzzy_search_batch(\n        batch_id=batch_id\n    )\n\nresult = result.response\n```\n\n### Fail to get fuzzy search batch sync\n\nThis sample demonstrates how to check if there are failures in search of fuzzy_search_batch.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\nresult = maps_search_client.fuzzy_search_batch(\n    search_queries=[\n        \"350 5th Ave, New York, NY 10118&limit=1\",\n        \"400 Broad St, Seattle, WA 98109&lim\"\n    ]\n)\nfor item in result.items:\n    count = 0\n    if item.response.error is not None:\n        count = count+1\n        print(f\"Error: {item.response.error.message}\")\nprint(f\"There are total of {count} search queries failed.\")\n```\n\n### Search inside Geometry\n\nThis sample demonstrates how to perform search inside geometry by given target such as `pizza` and multiple different geometry as input with GeoJson object.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\ngeo_json_obj1 = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[\n                    [-122.143035,47.653536],\n                    [-122.187164,47.617556],\n                    [-122.114981,47.570599],\n                    [-122.132756,47.654009],\n                    [-122.143035,47.653536]\n                    ]]\n            },\n            \"properties\": {}\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [-122.126986,47.639754]\n            },\n            \"properties\": {\n                \"subType\": \"Circle\",\n                \"radius\": 100\n            }\n        }\n    ]\n}\nresult1 = maps_search_client.search_inside_geometry(\n    query=\"pizza\",\n    geometry=geo_json_obj1\n)\nprint(\"Search inside geometry with standard GeoJson object as input, FeatureCollection:\")\nprint(result1)\n```\n\n### Working with exist library for Search\n\nThis sample demonstrates how to working with other existing packages such as `shapely` to perform search inside geometry by given target such as `pizza`.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\nfrom shapely.geometry import Polygon\n\ngeo_interface_obj = Polygon([\n    [-122.43576049804686, 37.7524152343544],\n    [-122.43301391601562, 37.70660472542312],\n    [-122.36434936523438, 37.712059855877314],\n    [-122.43576049804686, 37.7524152343544]\n])\n\nresult3 = maps_search_client.search_inside_geometry(\n    query=\"pizza\",\n    geometry=geo_interface_obj\n)\nprint(\"Search inside geometry with Polygon from third party library `shapely` with geo_interface as result 3:\")\nprint(result2)\n```\n\n## Troubleshooting\n\n### General\n\nMaps Search clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\nThis list can be used for reference to catch thrown exceptions. To get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the `logging_enable` argument:\n\n```python\nimport sys\nimport logging\nfrom azure.maps.search import MapsSearchClient\n\n# Create a logger for the 'azure.maps.search' SDK\nlogger = logging.getLogger('azure.maps.search')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n\n```python\nservice_client.get_service_stats(logging_enable=True)\n```\n\n### Additional\n\nStill running into issues? If you encounter any bugs or have suggestions, please file an issue in the [Issues](<https://github.com/Azure/azure-sdk-for-python/issues>) section of the project.\n\n## Next steps\n\n### More sample code\n\nGet started with our [Maps Search samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search/samples) ([Async Version samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search/samples/async_samples)).\n\nSeveral Azure Maps Search Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Maps Search\n\n```bash\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-search --pre\n\npython samples/sample_authentication.py\npython sample/sample_fuzzy_search.py\npython samples/sample_get_point_of_interest_categories.py\npython samples/sample_reverse_search_address.py\npython samples/sample_reverse_search_cross_street_address.py\npython samples/sample_search_nearby_point_of_interest.py\npython samples/sample_search_point_of_interest_category.py\npython samples/sample_search_point_of_interest.py\npython samples/sample_search_structured_address.py\n```\n\n> Notes: `--pre` flag can be optionally added, it is to include pre-release and development versions for `pip install`. By default, `pip` only finds stable versions.\n\nFurther detail please refer to [Samples Introduction](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search/samples/README.md)\n\n### Additional documentation\n\nFor more extensive documentation on Azure Maps Search, see the [Azure Maps Search documentation](https://docs.microsoft.com/rest/api/maps/search) on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/identity/azure-identity\n[azure_portal]: https://portal.azure.com\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure-key-credential]: https://aka.ms/azsdk/python/core/azurekeycredential\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[register_aad_app]: https://docs.microsoft.com/powershell/module/Az.Resources/New-AzADApplication?view=azps-8.0.0\n[maps_authentication_aad]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[create_new_application_registration]: https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/applicationsListBlade/quickStartType/AspNetWebAppQuickstartPage/sourceType/docs\n[manage_aad_auth_page]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[how_to_manage_authentication]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication#view-authentication-details\n\n\n# Release History\n\n## 1.0.0b2 (2022-10-11)\n\n### Other Changes\n\n- Update the tests using new test proxy\n- Update Doc strings\n\n## 1.0.0b1 (2022-09-06)\n\n- Initial Release\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-maps-search",
    "package_url": "https://pypi.org/project/azure-maps-search/",
    "platform": null,
    "project_url": "https://pypi.org/project/azure-maps-search/",
    "project_urls": {
      "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search"
    },
    "release_url": "https://pypi.org/project/azure-maps-search/1.0.0b2/",
    "requires_dist": [
      "msrest (>=0.6.21)",
      "azure-common (~=1.1)",
      "azure-mgmt-core (<2.0.0,>=1.3.0)"
    ],
    "requires_python": "",
    "summary": "Microsoft Azure Maps Search Client Library for Python",
    "version": "1.0.0b2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15404736,
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02c1215652357d66fb591584ac948969a63385a73819e7286c3f6d506a9e6d23",
          "md5": "4f031e303923c14a5a94b9c3a6f81254",
          "sha256": "5356a5dfb7593b5cb12693625eb230887c896d428284a6eff3e791b4072ab190"
        },
        "downloads": -1,
        "filename": "azure_maps_search-1.0.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f031e303923c14a5a94b9c3a6f81254",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 110655,
        "upload_time": "2022-09-06T23:09:45",
        "upload_time_iso_8601": "2022-09-06T23:09:45.620839Z",
        "url": "https://files.pythonhosted.org/packages/02/c1/215652357d66fb591584ac948969a63385a73819e7286c3f6d506a9e6d23/azure_maps_search-1.0.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bbd9d4b838621b617834eb26d107d33ca1e6a1f4c4c5b224ab7f63c2e570fe9",
          "md5": "04921e691ee3a7bf1ba941b43d1b5c57",
          "sha256": "53b92ae4686de23dd736cbc7d725e25e94648f1d8077a113ecc78fc29af79281"
        },
        "downloads": -1,
        "filename": "azure-maps-search-1.0.0b1.zip",
        "has_sig": false,
        "md5_digest": "04921e691ee3a7bf1ba941b43d1b5c57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 214743,
        "upload_time": "2022-09-06T23:09:48",
        "upload_time_iso_8601": "2022-09-06T23:09:48.155866Z",
        "url": "https://files.pythonhosted.org/packages/0b/bd/9d4b838621b617834eb26d107d33ca1e6a1f4c4c5b224ab7f63c2e570fe9/azure-maps-search-1.0.0b1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2ba2c290a4a6bf2370cdfd7a3fea3bf33b2cac6453951a9518cf4a5113de2fa",
          "md5": "27b352128bb9f0c29c6fc4b6f7ef842c",
          "sha256": "574993041578ba8e7f10856b0e4ea48002097a1d92c7b39559c31196934e2cb0"
        },
        "downloads": -1,
        "filename": "azure_maps_search-1.0.0b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27b352128bb9f0c29c6fc4b6f7ef842c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 111062,
        "upload_time": "2022-10-13T23:44:33",
        "upload_time_iso_8601": "2022-10-13T23:44:33.616161Z",
        "url": "https://files.pythonhosted.org/packages/c2/ba/2c290a4a6bf2370cdfd7a3fea3bf33b2cac6453951a9518cf4a5113de2fa/azure_maps_search-1.0.0b2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91a35c01961f13fddcdf9133a7b0ea80889cddf5df683776a2846da3093be2a3",
          "md5": "c94ea110e2418b0ebd9f5c949fd8348a",
          "sha256": "c4535390276e693c941ba3b3ea4155c15c09f7924514907347c7030997be14df"
        },
        "downloads": -1,
        "filename": "azure-maps-search-1.0.0b2.zip",
        "has_sig": false,
        "md5_digest": "c94ea110e2418b0ebd9f5c949fd8348a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 157336,
        "upload_time": "2022-10-13T23:44:36",
        "upload_time_iso_8601": "2022-10-13T23:44:36.790541Z",
        "url": "https://files.pythonhosted.org/packages/91/a3/5c01961f13fddcdf9133a7b0ea80889cddf5df683776a2846da3093be2a3/azure-maps-search-1.0.0b2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2ba2c290a4a6bf2370cdfd7a3fea3bf33b2cac6453951a9518cf4a5113de2fa",
        "md5": "27b352128bb9f0c29c6fc4b6f7ef842c",
        "sha256": "574993041578ba8e7f10856b0e4ea48002097a1d92c7b39559c31196934e2cb0"
      },
      "downloads": -1,
      "filename": "azure_maps_search-1.0.0b2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "27b352128bb9f0c29c6fc4b6f7ef842c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 111062,
      "upload_time": "2022-10-13T23:44:33",
      "upload_time_iso_8601": "2022-10-13T23:44:33.616161Z",
      "url": "https://files.pythonhosted.org/packages/c2/ba/2c290a4a6bf2370cdfd7a3fea3bf33b2cac6453951a9518cf4a5113de2fa/azure_maps_search-1.0.0b2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91a35c01961f13fddcdf9133a7b0ea80889cddf5df683776a2846da3093be2a3",
        "md5": "c94ea110e2418b0ebd9f5c949fd8348a",
        "sha256": "c4535390276e693c941ba3b3ea4155c15c09f7924514907347c7030997be14df"
      },
      "downloads": -1,
      "filename": "azure-maps-search-1.0.0b2.zip",
      "has_sig": false,
      "md5_digest": "c94ea110e2418b0ebd9f5c949fd8348a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 157336,
      "upload_time": "2022-10-13T23:44:36",
      "upload_time_iso_8601": "2022-10-13T23:44:36.790541Z",
      "url": "https://files.pythonhosted.org/packages/91/a3/5c01961f13fddcdf9133a7b0ea80889cddf5df683776a2846da3093be2a3/azure-maps-search-1.0.0b2.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}