{
  "info": {
    "author": "Tom Verbeure",
    "author_email": "hombre@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n`intel_jtag_uart` is a Python module that can be used to interact with the JTAG UART instances inside\nIntel FPGA designs.\n\nThe official ways to do this are either interactively, through `nios2-terminal` utility,\nor by scripting some TCL code inside the Quartus System Console. There is no official \nstraightforward way to interact with a JTAG UART with Python. \n\nThis module is a wrapper around the `jtag_atlantic` shared library/DLL that is part of any\nmodern Quartus installation. (`jtag_atlantic` is the internal code name for the JTAG UART.)\n\nTo use this module, you need access to the `jtag_atlantic` shared library as well as the `jtag_client`\nshared library, which provides lower level JTAG-related functions.\n\n## Usage\n\n* Install this package with `pip3 install intel_jtag_uart`.\n* Point to the `jtag_atlantic` and `jtag_client` shared libraries, so that the module can find it.\n\n    The module uses the following sequence to find these libraries:\n\n    1. Look in the directory in which `intel_jtag_uart.py` is located\n    1. Look in the directory in which the executable that uses this module is located\n    1. Use the OS-provided way to find shared libraries. (E.g. for Linux, it will check\n       the directories of the `$LD_LIBRARY_PATH` environment variable.) \n    1. Look in the `$QUARTUS_ROOTDIR` directory\n\n    Most default Quartus installations will have `$QUARTUS_ROOTDIR` environment variable\n    set to the correct directory, so everything should just work&trade;.\n\n* Use some variation of the script below:\n\n```python\nimport intel_jtag_uart\n\ntry:\n    ju = intel_jtag_uart.intel_jtag_uart()\n\nexcept Exception as e:\n    print(e)\n    sys.exit(0)\n\nju.write(b'r')\ntime.sleep(1)\nprint(\"read: \", ju.read())\n```\n\nThe script sends `r` to the JTAG UART, waits 1 seconds for a reply, and reads the\nreply, if there is any. If you have an Arrow/Terasic DECA FPGA board, you can check\nthings out right away with a [precompiled example bitstream](https://github.com/tomverbeure/intel_jtag_uart/tree/main/example/arrow_deca).\n\n## Full List of Functions/Methods\n\nUse [the source](https://github.com/tomverbeure/intel_jtag_uart/blob/main/src/intel_jtag_uart/intel_jtag_uart.py), Luke!\n\nThis module is a very thin wrapper around a handful of function calls that are mostly self-explanatory.\n\n## Bug Reports/Comments/Questions\n\nBug reports, comments, or questions can be entered through [the GitHub issue tracker](https://github.com/tomverbeure/intel_jtag_uart/issues)\nof this project.\n\n## References\n\n* [The Intel JTAG UART - Add a Serial Console to Your Design without Extra IO Pins](https://tomverbeure.github.io/2021/05/02/Intel-JTAG-UART.html)\n* [Write Your Own C and Python Clients for the Intel JTAG UART](https://tomverbeure.github.io/2021/05/08/Write-Your-Own-C-and-Python-Clients-for-Intel-JTAG-UART-with-libjtag_atlantic.html)\n* [`jtag_uart_example` project](https://github.com/tomverbeure/jtag_uart_example)\n* [intel-jtag-uart on pypi.org](https://pypi.org/project/intel-jtag-uart/)\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tomverbeure/intel_jtag_uart",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "intel-jtag-uart",
    "package_url": "https://pypi.org/project/intel-jtag-uart/",
    "platform": "",
    "project_url": "https://pypi.org/project/intel-jtag-uart/",
    "project_urls": {
      "Bug Tracker": "https://github.com/tomverbeure/intel_jtag_uart/issues",
      "Homepage": "https://github.com/tomverbeure/intel_jtag_uart"
    },
    "release_url": "https://pypi.org/project/intel-jtag-uart/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package to interact with JTAG UART modules in Intel FPGA designs",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10292763,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e36048b75e4bc69b19467dd96fe907565868dd1175c94a04d669b6402c86f9ca",
          "md5": "76815edd65487ca59efb6f4eaba2bfc3",
          "sha256": "ce6aefd5986c61d46b04fcf3bccf4da8cc0f65390a05f1bf10d71666d2464a9a"
        },
        "downloads": -1,
        "filename": "intel_jtag_uart-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76815edd65487ca59efb6f4eaba2bfc3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6999,
        "upload_time": "2021-05-08T06:05:09",
        "upload_time_iso_8601": "2021-05-08T06:05:09.604300Z",
        "url": "https://files.pythonhosted.org/packages/e3/60/48b75e4bc69b19467dd96fe907565868dd1175c94a04d669b6402c86f9ca/intel_jtag_uart-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecd2e03ba347fe63b5557d052b0bc7735023a6cdd6f70c2a52f46af33947a8f9",
          "md5": "005e564d6f971f0ece4db59141990feb",
          "sha256": "a7d1594f34763d78aa009db4af9adb82fafd51e5d9b4c99cc71a592e825501d6"
        },
        "downloads": -1,
        "filename": "intel_jtag_uart-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "005e564d6f971f0ece4db59141990feb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6375,
        "upload_time": "2021-05-08T06:05:11",
        "upload_time_iso_8601": "2021-05-08T06:05:11.074804Z",
        "url": "https://files.pythonhosted.org/packages/ec/d2/e03ba347fe63b5557d052b0bc7735023a6cdd6f70c2a52f46af33947a8f9/intel_jtag_uart-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e36048b75e4bc69b19467dd96fe907565868dd1175c94a04d669b6402c86f9ca",
        "md5": "76815edd65487ca59efb6f4eaba2bfc3",
        "sha256": "ce6aefd5986c61d46b04fcf3bccf4da8cc0f65390a05f1bf10d71666d2464a9a"
      },
      "downloads": -1,
      "filename": "intel_jtag_uart-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76815edd65487ca59efb6f4eaba2bfc3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6999,
      "upload_time": "2021-05-08T06:05:09",
      "upload_time_iso_8601": "2021-05-08T06:05:09.604300Z",
      "url": "https://files.pythonhosted.org/packages/e3/60/48b75e4bc69b19467dd96fe907565868dd1175c94a04d669b6402c86f9ca/intel_jtag_uart-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecd2e03ba347fe63b5557d052b0bc7735023a6cdd6f70c2a52f46af33947a8f9",
        "md5": "005e564d6f971f0ece4db59141990feb",
        "sha256": "a7d1594f34763d78aa009db4af9adb82fafd51e5d9b4c99cc71a592e825501d6"
      },
      "downloads": -1,
      "filename": "intel_jtag_uart-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "005e564d6f971f0ece4db59141990feb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6375,
      "upload_time": "2021-05-08T06:05:11",
      "upload_time_iso_8601": "2021-05-08T06:05:11.074804Z",
      "url": "https://files.pythonhosted.org/packages/ec/d2/e03ba347fe63b5557d052b0bc7735023a6cdd6f70c2a52f46af33947a8f9/intel_jtag_uart-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}