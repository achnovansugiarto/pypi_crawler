{
  "info": {
    "author": "Thomas Mortier",
    "author_email": "thomas.mortier92@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Uncertainty-aware classification with set-valued predictions ![build](https://github.com/tfmortie/setvaluedprediction/actions/workflows/build.yml/badge.svg?branch=main) ![pypi version](https://badge.fury.io/py/setvaluedprediction.svg) ![license](https://img.shields.io/github/license/tfmortie/setvaluedprediction)\n\nPackage for set-valued prediction in flat and hierarchical classification. \n\n## Description\n\nThis package provides different set-valued predictors for flat and hierarchical classification with support for Scikit-learn and PyTorch.\n\n**TODO**: support for multi-label classification.\n\n## Installation\n\nClone this repository [`tfmortie/setvaluedprediction`](https://github.com/tfmortie/setvaluedprediction.git) and run `pip install . -r requirements.txt`\nor install by means of `pip install setvaluedprediction`.\n\n## Examples \n\nFor multi-class classification, we provide the following set-valued predictors:\n\n- `svp.multiclass.SVPClassifier`: follows the Scikit-learn API\n- `svp.multiclass.SVPNet`: follows the PyTorch API\n\nSome minimal examples are given below.\n\n### `svp.multiclass.SVPClassifier`\n\nWe start by importing some packages that we will need throughout the example:\n\n```python\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_digits\n```\n\nCreating a flat and hierarchical set-valued predictor in Scikit-learn is as simple as:\n\n```python\nfrom svp.multiclass import SVPClassifier\n\nest = SGDClassifier(loss=\"log_loss\") # classifier used for flat and hierarchical model\n\n# create two set-valued predictors\nflat = SVPClassifier(est, hierarchy=\"none\")\nhier_r = SVPClassifier(est, hierarchy=\"random\")\n```\n\nWith argument `hierarchy=\"random\"`, we specify that no predefined hierarchical labels are going to be provided. In this case, `SVPClassifier` automatically constructs a random hierarchy. The min and max degree of each node in the randomly generated tree can be controlled by means of the argument `k`:\n\n\n```python\n# predictor with randomly generated binary tree as hierarchy\nhier_r = SVPClassifier(est, hierarchy=\"random\", k=(2,2), random_state=2022)\n```\n\nNext, we load a non-hierarchical dataset provided from Scikit-learn and split in a training and validation set:\n\n```python\n# our dataset\nX, y = load_digits(return_X_y=True)\nX_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.5, random_state=2022, stratify=y)\n\n```\n\n`SVPClassifier` follows the Scikit-learn API, with support for standard training and inference procedures: \n\n```python\n# training the models\nflat.fit(X_tr, y_tr)\nhier_r.fit(X_tr, y_tr)\n\n# obtain predictions and class probabilities\nflat_preds = flat.predict(X_te)\nhier_r_preds = hier_r.predict(X_te)\nflat_probs = flat.predict_proba(X_te)\nhier_r_probs = hier_r.predict_proba(X_te)\n```\n\nHence, `SVPClassifier` boils down to a standard Scikit-learn estimator, albeit with additional support for set-valued predictions: \n\n```python\n# initialize the set-valued predictor settings\nparams_flat = {\n    \"c\": 10, # our representation complexity\n    \"svptype\": \"errorctrl\", # minimize set size, while controlling the error rate\n    \"error\": 0.01 # upper bound the error rate by 1%\n}\nparams_hier_r = {\n    \"c\": 1, # our representation complexity -> in this case only internal nodes are allowed\n    \"svptype\": \"errorctrl\", # minimize set size, while controlling the error rate\n    \"error\": 0.01 # upper bound the error rate by 1%\n}\n\n# obtain set-valued predictions\nsvp_preds_flat = flat.predict_set(X_te, params_flat)\nsvp_preds_hier_r = hier_r.predict_set(X_te, params_hier_r)\n```\n\nFor more information related to the different set-valued prediction settings, see references below.\n\n### `svp.multiclass.SVPNet`\n\nCreating a set-valued predictor in PyTorch is very similar to `SVPClassifier`:\n\n```python\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import TensorDataset, DataLoader\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_digits\n\nfrom svp.multiclass import SVPNet\n\n# first load data and get training and validation sets\nX, y = load_digits(return_X_y=True)\nX_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.5, random_state=2021, stratify=y)\ntensor_x_tr, tensor_y_tr = torch.Tensor(X_tr), torch.Tensor(y_tr)\ntensor_x_te, tensor_y_te = torch.Tensor(X_te), torch.Tensor(y_te)\ndataset = TensorDataset(tensor_x_tr, tensor_y_tr) \ndataloader = DataLoader(dataset) # create your dataloader \n\n# create feature extractor for SGDNet and construct the set-valued predictors\nphi = nn.Identity()\nflat = SVPNet(phi=phi, hidden_size=X.shape[1], classes=y, hierarchy=\"none\")\nhier_r = SVPNet(phi=phi, hidden_size=X.shape[1], classes=y, hierarchy=\"random\")\n\n# start fitting models\nif torch.cuda.is_available():\n    flat = flat.cuda()\n    hier_r = hier_r.cuda()\noptim_f = torch.optim.SGD(flat.parameters(), lr=0.01)\noptim_hr = torch.optim.SGD(hier_r.parameters(), lr=0.01)\nfor _ in range(50):\n    for _, data in enumerate(dataloader, 1):\n        inputs, labels = data\n        if torch.cuda.is_available():\n            inputs = inputs.cuda()\n        optim_f.zero_grad()\n        optim_hr.zero_grad()\n        loss_f, loss_hr = flat(inputs, labels), hier_r(inputs, labels)\n        loss_f.backward()\n        loss_hr.backward()\n\n# obtain top-1 predictions\nif torch.cuda.is_available():\n    tensor_x_te = tensor_x_te.cuda()\nflat.eval()\nhier_r.eval()\npreds_f = flat.predict(tensor_x_te)\npreds_hr = hier_r.predict(tensor_x_te)\n\n# obtain set-valued predictions with error rate control and maximal representation complexity\nparams = {\n    \"c\": 10,\n    \"svptype\": \"sizectrl\",\n    \"error\": 0.01\n}\nsvp_preds_f = flat.predict_set(tensor_x_te, params)\nsvp_preds_hr = hier_r.predict_set(tensor_x_te, params)\n```\n\n### Hierarchical models with predefined hierarchies\n\nIn case you want to work with predefined hierarchies, simply set argument `hierarchy=\"predefined\"` and make sure that provided labels are encoded in the following way:\n\n```\n# example of two hierarchical labels from a predefined hierarchy\ny = [\"root;Family1;Genus1;Species1\", \"root;Family1;Genus1;Species2\"]\n```\n\nMoreover, labels must be encoded as strings and should correspond to paths in the predefined hierarchy with nodes separated by `;`.\n\n## Experiments paper(s)\n\n* Accompanying code for paper _Set-valued prediction in hierarchical classification with constrained representation complexity_ can be found in the folder [`src/test/svphc`](./svp/tests/svphc).\n\n## Citing\n\nIf you use `setvaluedprediction` in your work, please use the following citation:\n\n```bibtex\n@InProceedings{Mortier22SVPHCCRC,\n    title = {Set-valued prediction in hierarchical classification with constrained representation complexity},\n    author = {Mortier, Thomas and H\\\"ullermeier, Eyke and Dembczy\\'nski, Krzysztof and Waegeman, Willem},\n    booktitle = {Proceedings of the Thirty-Eight Conference on Uncertainty in Artificial Intelligence},\n    year = {2022},\n    series = {Proceedings of Machine Learning Research},\n    publisher = {PMLR}\n}\n```\n\nIf you need more information, feel free to contact me by thomas(dot)mortier92(at)gmail(dot)com.\n\n## References\n\n* _Efficient set-valued prediction in multi-class classification, Mortier et al., Data Mining and Knowledge Discovery (2021)_\n\n* _Set-valued classification - overview via a unified framework, Chezhen et al., CoRR abs/2102.12318 (2021)_\n\n* _Set-valued prediction in hierarchical classification with constrained representation complexity, Mortier et al., Proceedings of Machine Learning Research (2022)_\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tfmortie/setvaluedprediction",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "setvaluedprediction",
    "package_url": "https://pypi.org/project/setvaluedprediction/",
    "platform": null,
    "project_url": "https://pypi.org/project/setvaluedprediction/",
    "project_urls": {
      "Homepage": "https://github.com/tfmortie/setvaluedprediction"
    },
    "release_url": "https://pypi.org/project/setvaluedprediction/0.0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Set-valued predictors in Python",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14275658,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21dab8d3b44c4e4e7d380e45e0854e8da0e180a3358719e031a6383d0b9001de",
          "md5": "54485bcb39290fc49142540eaf5fa1d1",
          "sha256": "43bbb657e96eb5d4a0ef0109067f0805fd0ec868d45ecc4ce4d49cc009fd1921"
        },
        "downloads": -1,
        "filename": "setvaluedprediction-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "54485bcb39290fc49142540eaf5fa1d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25239,
        "upload_time": "2022-06-24T17:04:28",
        "upload_time_iso_8601": "2022-06-24T17:04:28.297674Z",
        "url": "https://files.pythonhosted.org/packages/21/da/b8d3b44c4e4e7d380e45e0854e8da0e180a3358719e031a6383d0b9001de/setvaluedprediction-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f71fb845e0cf2ca68c340760f964fc5583000c2b73f1e1bded1905af0ac67d",
          "md5": "f871e5ce4e39b65ec2754c0621602cce",
          "sha256": "79bf31cf079cce2ff9af8e78b7e4ab0fd872258cfcf4df479ef193301893d2eb"
        },
        "downloads": -1,
        "filename": "setvaluedprediction-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f871e5ce4e39b65ec2754c0621602cce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28947,
        "upload_time": "2022-06-27T14:57:51",
        "upload_time_iso_8601": "2022-06-27T14:57:51.641817Z",
        "url": "https://files.pythonhosted.org/packages/34/f7/1fb845e0cf2ca68c340760f964fc5583000c2b73f1e1bded1905af0ac67d/setvaluedprediction-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b23af43b6b4c37d2c8eba3e96a65bf0ace2af897e6bd602398af064974b55faf",
          "md5": "18068e2afec36bb9ab67bc3cef9da96c",
          "sha256": "24f7cfd9407a1b983da5c9a53f6fd8cb6c06470af65545bd53f4fc14da3f80e9"
        },
        "downloads": -1,
        "filename": "setvaluedprediction-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "18068e2afec36bb9ab67bc3cef9da96c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29006,
        "upload_time": "2022-06-27T15:51:42",
        "upload_time_iso_8601": "2022-06-27T15:51:42.560908Z",
        "url": "https://files.pythonhosted.org/packages/b2/3a/f43b6b4c37d2c8eba3e96a65bf0ace2af897e6bd602398af064974b55faf/setvaluedprediction-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f654e163a92e3c6f095282fa1515ebf5c75644a0ee7d55c64e7f19c79e368a53",
          "md5": "a1ea4550434e84cb541aefa7d70c1c33",
          "sha256": "9173701a6e61e540b8158f65f96f9c328e4875535cdb501c3ec11952c9a41524"
        },
        "downloads": -1,
        "filename": "setvaluedprediction-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a1ea4550434e84cb541aefa7d70c1c33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28873,
        "upload_time": "2022-06-27T16:20:05",
        "upload_time_iso_8601": "2022-06-27T16:20:05.268427Z",
        "url": "https://files.pythonhosted.org/packages/f6/54/e163a92e3c6f095282fa1515ebf5c75644a0ee7d55c64e7f19c79e368a53/setvaluedprediction-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "250cccd40a004537d96fb1fab681ec337c8fee8c100e6b8c3095772ae3cd01d9",
          "md5": "baacb0d7f6d3accb83dda725a7718bbf",
          "sha256": "224b2fde43f8331ac88c565d940bbc421ab8daf10fcb95ddb34a1ce826dd5f47"
        },
        "downloads": -1,
        "filename": "setvaluedprediction-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "baacb0d7f6d3accb83dda725a7718bbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28867,
        "upload_time": "2022-06-27T17:13:32",
        "upload_time_iso_8601": "2022-06-27T17:13:32.303761Z",
        "url": "https://files.pythonhosted.org/packages/25/0c/ccd40a004537d96fb1fab681ec337c8fee8c100e6b8c3095772ae3cd01d9/setvaluedprediction-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d6e6c096ca1a53d3a170c9870368eeb3dbf8e122a2ba1a20ba87a32f53d84da",
          "md5": "f131952877c800f1fc3ae0f6bc661320",
          "sha256": "2a48953d4d103fc4d5387472cd1a75181cc4335141ab325cb6346243d44a9e54"
        },
        "downloads": -1,
        "filename": "setvaluedprediction-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f131952877c800f1fc3ae0f6bc661320",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28907,
        "upload_time": "2022-06-28T17:30:52",
        "upload_time_iso_8601": "2022-06-28T17:30:52.490570Z",
        "url": "https://files.pythonhosted.org/packages/2d/6e/6c096ca1a53d3a170c9870368eeb3dbf8e122a2ba1a20ba87a32f53d84da/setvaluedprediction-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d6e6c096ca1a53d3a170c9870368eeb3dbf8e122a2ba1a20ba87a32f53d84da",
        "md5": "f131952877c800f1fc3ae0f6bc661320",
        "sha256": "2a48953d4d103fc4d5387472cd1a75181cc4335141ab325cb6346243d44a9e54"
      },
      "downloads": -1,
      "filename": "setvaluedprediction-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "f131952877c800f1fc3ae0f6bc661320",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28907,
      "upload_time": "2022-06-28T17:30:52",
      "upload_time_iso_8601": "2022-06-28T17:30:52.490570Z",
      "url": "https://files.pythonhosted.org/packages/2d/6e/6c096ca1a53d3a170c9870368eeb3dbf8e122a2ba1a20ba87a32f53d84da/setvaluedprediction-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}