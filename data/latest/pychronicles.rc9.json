{
  "info": {
    "author": "Thomas Guyet",
    "author_email": "thomas.guyet@inria.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/pychronicles.svg)](https://badge.fury.io/py/pychronicles)\n[![GitHub license](https://img.shields.io/github/license/Naereen/StrapDown.js.svg)](https://github.com/Naereen/StrapDown.js/blob/master/LICENSE)\n\n# PyChronicles package\n\nA chronicle is a specification of the complex temporal behaviors as a graph of temporal constraints. More specifically, a chronicle is a multiset of events and a set of temporal constraints specifying that occurrences of pairs of events must occurs within a given temporal interval.\nIt can be used to recognize complex behaviors in sequence the temporal events.\n\nThis library proposes a Python class to define a timed sequence, a chronicle, to read/save them in a standard CRS format. The main useful functionnality for chronicle is their efficient matching in a timed sequence, or pandas dataframes (including an accessor, see section [pandas](#pandas-accessor)).\nThe Abstracter class enables to create a chronicle from a collection of sequences.\n\nFor more details about the temporal model of chronicle, see the [article](https://hal.archives-ouvertes.fr/hal-03777471):\n```bibtex\n@inproceedings{chronicles,\n  title = {{Logical forms of chronicles}},\n  author = {Guyet, Thomas and Markey, Nicolas},\n  booktotle = {Proceedings of the 29th International Symposium on Temporal Representation and Reasoning (TIME)},\n  pages = {1--15},\n  year = {2022}\n}\n```\n\n## Basic Usage Example\n\n```python\nimport pychonicles\n\n# create a timed sequence\nseq = [('a',1),('c',2),('b',3),('a',8)]\nts = TimedSequence(np.array([e[2] for e in seq], dtype='float'), [e[0] for e in seq])\n\n#create a chronicle\nc=Chronicle()\nc.add_event(0,'a')\nc.add_event(1,'b')\nc.add_constraint(0,1, (0.4,2.3))\n\nreco=c.match(ts)\nprint(f\"Does the chronicle matches the sequence? [{reco}]\")\n\nreco=c.recognize(ts)\nprint(f\"What are the occurrences of the chronicle in the sequence? [{reco}]\")\n```\n\n\n## Efficient chronicle recognition\n\nThe chronicle recognition package is a pure python package implemented using numpy features. To make it more efficient, it is available in a cythonized version.\n\n### Timed Sequences\n\nA timed sequence is be created from different manners:\n* a pair of lists containing the events and the dates.\n* a simple list of items (`str`, `int` or `None`) with implicit timestamps : `['a', 'b', ..., None, 'c', None, 'd']`. In this case, `None` means that there is no event at the corresponding time instant.\n* a list of explicitly timestamped items (`str` or `int`) : `[ (1,'a'), (23,'b'), (30,'c'), (45, 'd')]`\n\nThe dates can be represented with dates (only with `np.datetime64` type) or floats. In case the dates are coded as `int`, they will be converted in `float`.\n\nThe type of events must be `str` or `int`.\n\n_Usage Example_:\n```python\n>>> seq = [('a',1),('c',2),('b',3),('a',8),('a',10),('b',12),('a',15),('c',17), ('b',20),('c',23),('c',25),('b',26),('c',28),('b',30)]\n>>> dates = np.array([np.datetime64('1970-01-01') + np.timedelta64(e[1],'D') for e in seq], dtype='datetime64')\n>>> data = np.array([e[0] for e in seq])\n>>>  ts = TimedSequence(dates, data)\n```\n\n### Chronicles\n\nThe core of the this package is the chronicle class that represents a chronicle temporal model which also offers efficient matching functionalities.\n\nThe chronicles handles two models of time (that must be consistent with the model of time in timed sequences):\n* discrete timestamps using floats\n* continuous timestamps using `datetime64` format. In this case the temporal constraints of a chronicle must be defined using `np.timedelta64` values.\n\nA chronicle can not combine constraints of the two different kinds. The first defined constraint defines the model of time of the chronicle. \n\n<br>\n\nThe package implements efficient algorithms to recognize it. It benefits from numpy functionalities to increase their efficiency. There are three different ways to _recognize_ a chronicle in a sequence of a events:\n* the absence/presence recognition (`c.match(seq)`): its result is a boolean stating whether the chronicle occur at least once in the sequence, this is the most efficient algorithm\n* the occurrence enumeration (`c.recognize(seq)`): its result is a list of occurrences of the chronicle in a sequence. Contrary to the first function, it looks for all possible combination of events. Thus it is less efficient, but more informative.\n\nNote that a chronicle is somehow similar to a simple temporal network and the set of constraints may be inconsistent or redundant. It is possible to _minimize_ the temporal constraints of a chronicle using the corresponding function.\n\n```python\n>>> c=Chronicle()\n>>> c.add_event(0,'a')\n>>> c.add_event(1,'b')\n>>> c.add_event(2,'c')\n>>> c.add_constraint(0,1, (1.0,2.0))\n>>> c.add_constraint(0,2, (2.0,5.0))\n>>> c.add_constraint(1,2, (0.0,2.0))\n>>> print(c)\nC1       {{[a],[b],[c]}}\n0,1: (1.0, 2.0)\n0,2: (2.0, 5.0)\n1,2: (0.0, 2.0)\n\n>>> c.minimize()\n>>> print(c)\nC1       {{[a],[b],[c]}}\n0,1: (1.0, 2.0)\n0,2: (2.0, 4.0)\n1,2: (0.0, 2.0)\n```\n\n### Fuzzy chronicles\n\nThe `FuzzyChronicle` class represents a class for approximated recognition of a chronicle. The chronicle is defined in the same way of a chronicle. \nThe temporal model is enriched with the modeling of a fuzzyness of temporal constraints (`lbda` parameter)\n\nIn addition to the matching function presented above, it proposes a `cmp` function that finds occurrences of a chronicle with a degree of matching (parameter `threshold`).\n\nMore details about fuzzy chroniclesis available in the [article](https://hal.archives-ouvertes.fr/hal-03698361) (in French):\n```bibtex\n@inproceedings{fchronicles,\n  title = {{\\'E}num{\\'e}ration des occurrences d'une chronique},\n  author = {Guyet, Thomas and Besnard, Philippe and Ben Salha, Nasreddine and Samet, Ahmed and Lachiche, Nicolas},\n  booktitle = {Actes de la conf√©rence Extraction et Gestion des Connaissances},\n  publisher = {{\\'E}ditions RNTI},\n  pages = {253--260},\n  year = {2020}\n}\n```\n\n# `tpattern` dataframe accessor {#pandas-accessor}\n\nThe `pychronicles` package include an new accessor for pandas dataframe. \nThis accessor enables, denoted `tpattern` to use chronicle functionnalities directly with the pandas packages. In this case, you do not even need to manage your timed sequences by hand ... everything can be done directly with pandas.\n\nThe pandas accessor enables:\n\n* to match or enumerate occurrences of a chronicle\n* to match an Metric Temporal Logic (MTL) formula\n* to abstract a collection of sequences \n\n\n## Spirit of the accessor\n\nThe spirit of our accessor is to use a pandas dataframe to encode a sequence or a collection of sequence. The index of the dataframe models the time ... it can be integer, float or date index. \n\nA column of the dataframe acn be defined to specify the identifier of the sequence. In the following example, the column name `id` denotes this identifier. Intuitivelly, it can be used to make `groupby` operations, to process a collection of timed sequences. \n\nThe important feature of our package is that any other column can be added to the dataframe. The idea behind this modeling is that the dataframe gather all the information about the events. The columns describes each event (an can contain `None`). \n\n\nThe example below illustrates the representation of a collection of sequences with a Pandas dataframe. \nThe basic sequence is repeated three times to create a collection of three timed sequences. The index of the dataframe is defined with dates in this case. \nThe event names of the basic sequence feed the column `label`, and we added two columns:\n\n* a column `str_val` with the string values (twice the label)\n* a column `num_val` with random numbers\n* a column `id` that represents the identifier of a sequence.\n\n```python\n#create a basic sequence\nseq = [('a',1),('c',2),('b',3),('a',8),('a',10),('b',12),('a',15),('c',17)]\ndf = pd.DataFrame({\n    \"label\": [e[0] for e in seq]*3,\n    \"str_val\": [e[0]*2 for e in seq]*3,\n    \"num_val\": np.random.randint(10,size=3*len(seq)),\n    'id': [1]*len(seq)+[2]*len(seq)+[3]*len(seq)\n    },\n    index = [np.datetime64('1980-01-01') + np.timedelta64(e[1],'D') for e in seq ]*3\n)\n```\n\n<br>\n\nThen, the definition of the event of a chronicle are no more the name of an event, but the description of a event of interest throught its description features. \nWhen used with pandas dataframe, the events of a chronicle are queries on the dataframe.\nIn the example above, an event could be defined by \"`label=='a' & num_val>3`\".\n\nAt the time, our framework handles string and number attributes. The specification of an event uses the classical operators defined in the Pandas documentation (https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html). \n\n## Matching / enumerate occurrences of a chronicle\n\nLet us now use a dataframe defined as explained in the previous section with chronicle. \n\nFor that, we first need to define a chronicle. It works exactly as before but, the definition of chronicle's events are queries.\n\nFor instance, the following example illustrates the definition a simple chronicle that uses queries as event:\n```python\nc=Chronicle()\nc.add_event(0,'label==\"a\"')\nc.add_event(1,'label==\"b\" & num_val>5')\nc.add_constraint(0,1, (np.timedelta64(4,'D'),np.timedelta64(10,'D')))\n``` \n\nFor more details about the syntax of queries, please refer to the Pandas documentation (https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html). \n\nThis chronicle is semantically sound for being used in with the dataframe defined in the example of the previous section. \n\n### Dataframe representing a sequence\n\nIn this section, we consider that the dataframe represents a unique sequence (for instance, we selected the first sequence of the previous dataframe with `df[df.id==1]`).\n\nThe recognition functionalities are now accessible throught the Pandas dataframe:\n\n* `df.tpattern.match(c)` will return a boolean indicating whether the chronicle occurs in the sequence or not\n* `df.tpattern.recognize(c)` will return the list of occurrences of `c` in the sequence\n\nNote that the `tpattern` keyword gives access to the features of our package.\n\n<br>\n\nUsing chronicles becomes very easy with Pandas dataframe and it also gains in expressivity thanks to the use of queries as event. \nWe keep good computational efficiency of the recognition algorithms thanks to the use of the rewritting principle developed with semantic chronicles (see reference below). \n\n```bibtex\n@inproceedings{semantic_chronicles,\n  title = {An extension of chronicles temporal model with taxonomies -- Application to epidemiological studies},\n  author = {Bakalara, Johanne and Guyet, Thomas and Dameron, Olivier and Happe, Andr{\\'e} and Oger, Emmanuel},\n  booktitle = {Proceedings of the 14th International Conference on Health Informatics (HEALTHINF)},\n  pages = {1--10},\n  year = {2021}\n}\n```\n\n### Dataframe representing a collection of sequences\n\nTo proceed with a dataframe containing several sequences, you can use the following idioms based on `apply`:\n\n```python\nreco=df.groupby('id').apply(lambda d: d.tpattern.match(c))\n```\n\nIn this case, the attribute `id` is used to select the events for each sequence, and then the `match` algorithm is applied to this selection.\nThe result is a dataframe containing a boolean value for each sequence id.\n\nThe same applies with `recognition` function.\n\n## Use of MTL formula {#mtl}\n\nThe first reference to the work of Guyet and Markey compare the model of chronicle with Metric Temporal Logic (MTL).\nTo illustrate that the principle of semantic chronicles can be broader, we extended it to the case of MTL formulae. This means that our framework enables to express a MTL formulae using query as events. \n\nThe `tpattern` accessor provides a function `match_mtl` that is dedicated to the recognition of a MTL formulae in the timed sequence. This function returns a boolean value. There is not equivalent to the enumeration of occurrences of a chronicle.\n\nThe syntax of an MTL formula is based on the two operators `F` (eventually) and `G` (globally). These operators can be specified with temporal constraints (in brackets). They combines events defined in the same way as for chronicle events.\n\n```python\nquery=' F(label==\"a\" & F[2.9,5]( label==\"b\" & num_val>5 ))'\ndf.tpattern.match_mtl(query)\n```\n\nThis feature is based on the [Python implementation of MTL](https://github.com/mvcisback/py-metric-temporal-logic). \n\n## Abstraction of a sequence\n\nFinally, we also provide a function that enables to abstract a collection of sequences into a chronicle. \n\nContrary to the recognition functions that can handle several columns, the abstraction requires to define a column that correspond to the event name. In addition, it requires to define the attribute name that correspond to the identifier of the sequences. \nThen, the function, named `abstract` takes two arguments and outputs a single chronicle that occurs in all the sequences.\n\n\nThe following example extract a chronicle from the dataframe introduced above. It focuses event on the label attribute.\n```python\nchro = df.tpattern.abstract('label', 'id')\n```\n\n# Perspectives\n\n* graphical interfaces to edit chronicle (for instance with dash)\n* better cythonize the recognition\n* optimized matching of several chronicles at the same time\n\n\n# Requirements\n\nUse `pip install -r requirements.txt` to install requirements.\n\nNaturally, the latter may require superuser rights (consider prefixing the commands by `sudo`).\n\nIf you want to use Python 3 and your system defaults on Python 2.7, you may need to adjust the above commands, e.g., replace `pip` by `pip3`.\n\nLAZR is used to instantiate chronicles from CRS files (with simple grammar) and to parse MTL formulae.\n\n# Additional features\n\n## Export / import of chronicles\n\nIt is possible to specify chronicles using the CRS format. The following code illustrate the syntax for specifying a chronicle in this format.\n\n    chronicle C27_sub_0[]()\n    {\n\t    event(Event_Type1[], t006)\n\t    event(Event_Type1[], t004)\n\t    event(Event_Type2[], t002)\n\t    event(Event_Type3[], t001)\n\n\t    t004-t006 in [17,25]\n\t    t006-t002 in [-16,-10]\n\t    t002-t001 in [14,29]\n\t    t004-t001 in [27,35]\n    }\n\n\n# Authorship\n\n* **Author:** Thomas Guyet\n* **Institution:** Inria\n* **date:** 10/2022",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.inria.fr/tguyet/pychronicles",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pychronicles",
    "package_url": "https://pypi.org/project/pychronicles/",
    "platform": null,
    "project_url": "https://pypi.org/project/pychronicles/",
    "project_urls": {
      "Homepage": "https://gitlab.inria.fr/tguyet/pychronicles"
    },
    "release_url": "https://pypi.org/project/pychronicles/0.0.10/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A package for chronicle recognition",
    "version": "0.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15553334,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4cb99629aa46486eedd35c4b87f0c5853023eff6fa3e54e44ed21aac93ae050",
          "md5": "8ca0abff93b87478ba479a6ce3bdfb3b",
          "sha256": "17c711b2a984782a1b619cfa82f65590f14594e41605ea65cae814558fc894ff"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "8ca0abff93b87478ba479a6ce3bdfb3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 133662,
        "upload_time": "2022-10-27T13:52:37",
        "upload_time_iso_8601": "2022-10-27T13:52:37.535200Z",
        "url": "https://files.pythonhosted.org/packages/d4/cb/99629aa46486eedd35c4b87f0c5853023eff6fa3e54e44ed21aac93ae050/pychronicles-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0138a173cb80570ef3f76d016a00b7e5c3b8cf7daa9fa2987a0a531d3a53a0f",
          "md5": "bf56c659d4b89b49bb5e00e73f070dd6",
          "sha256": "ca97a65010744ed385ca65abd68e198f0648bd54095d03236ab2e6c741751197"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf56c659d4b89b49bb5e00e73f070dd6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18723,
        "upload_time": "2019-04-15T12:43:34",
        "upload_time_iso_8601": "2019-04-15T12:43:34.125990Z",
        "url": "https://files.pythonhosted.org/packages/b0/13/8a173cb80570ef3f76d016a00b7e5c3b8cf7daa9fa2987a0a531d3a53a0f/pychronicles-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3326cbc3a37dede27c6476c75d171926aeb14a981a09472658e7d44895bd292",
          "md5": "4c6b441e037608688348f0a7cbe05eed",
          "sha256": "746864b424dc205c4aaeced4002b424a6909cc292db7719f4cde6e414bfb7a97"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4c6b441e037608688348f0a7cbe05eed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5796,
        "upload_time": "2019-04-15T12:43:35",
        "upload_time_iso_8601": "2019-04-15T12:43:35.465514Z",
        "url": "https://files.pythonhosted.org/packages/e3/32/6cbc3a37dede27c6476c75d171926aeb14a981a09472658e7d44895bd292/pychronicles-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec6d8be12228efff46db6829c1e181b5ddad4adb1737458aba70436db70ca11c",
          "md5": "8e9948d9b994bf345c80fecbd9556163",
          "sha256": "19a4fc2de8ebead91bc4d678769de8eefb2c2cfc74ff718dd4e13b54c4674b1c"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e9948d9b994bf345c80fecbd9556163",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20027,
        "upload_time": "2019-10-01T14:43:23",
        "upload_time_iso_8601": "2019-10-01T14:43:23.162147Z",
        "url": "https://files.pythonhosted.org/packages/ec/6d/8be12228efff46db6829c1e181b5ddad4adb1737458aba70436db70ca11c/pychronicles-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "000d39acdfaa26633077cd9d6c97b1424f2435f41747af5dee329bf5bbdea0f6",
          "md5": "edc4aedbe5cf1cc458391cc8e0ea75d4",
          "sha256": "a422d3fef161ec285c6407d572693635c1ecbad1bbe88ca8ed2b6973f516a2f9"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "edc4aedbe5cf1cc458391cc8e0ea75d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7094,
        "upload_time": "2019-10-01T14:43:24",
        "upload_time_iso_8601": "2019-10-01T14:43:24.881219Z",
        "url": "https://files.pythonhosted.org/packages/00/0d/39acdfaa26633077cd9d6c97b1424f2435f41747af5dee329bf5bbdea0f6/pychronicles-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e57af7eef5acdc67e5c136a659fe2c2334e4d86c39458c480e90d118b98559d2",
          "md5": "841dca251805fb608216c3f121e5d32c",
          "sha256": "62b7a3f4205fd5691cc73838279c686badfb77eb2b93fcbe8ec6ba2d72482e4f"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "841dca251805fb608216c3f121e5d32c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21882,
        "upload_time": "2019-10-04T10:04:43",
        "upload_time_iso_8601": "2019-10-04T10:04:43.078613Z",
        "url": "https://files.pythonhosted.org/packages/e5/7a/f7eef5acdc67e5c136a659fe2c2334e4d86c39458c480e90d118b98559d2/pychronicles-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "159b4925cf9eb750af87bc506f4311169d99bd9099967d74844a38d5113d05d6",
          "md5": "e7f5395ebd364e2b3f9676d347745076",
          "sha256": "24bca0c797dc8dba723942b8700da2f50decc473c6416972822b1666a2ad4976"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e7f5395ebd364e2b3f9676d347745076",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8930,
        "upload_time": "2019-10-04T10:04:44",
        "upload_time_iso_8601": "2019-10-04T10:04:44.734834Z",
        "url": "https://files.pythonhosted.org/packages/15/9b/4925cf9eb750af87bc506f4311169d99bd9099967d74844a38d5113d05d6/pychronicles-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db30827f5934b2639ba2ff5a1ddf5378f63cd48ffbda564b7810ebe6fb2de1fb",
          "md5": "01af1a952e6ab2b3cc09a4e16d509c5e",
          "sha256": "29bc24c90d60103162dcf7791dbc798c59f4e3e221c20403bd084a44d8865043"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01af1a952e6ab2b3cc09a4e16d509c5e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22707,
        "upload_time": "2019-10-17T10:03:58",
        "upload_time_iso_8601": "2019-10-17T10:03:58.959368Z",
        "url": "https://files.pythonhosted.org/packages/db/30/827f5934b2639ba2ff5a1ddf5378f63cd48ffbda564b7810ebe6fb2de1fb/pychronicles-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ef85fdb5146c4bd6d4e9fd0706abcf20a3e3b716c10ce92506ebd816f16b68e",
          "md5": "0af9ee2d6e0c534883ad6802ef13b219",
          "sha256": "53af8164b45b6f51dbbdd1c8e5c5caa87d36ce81fa73c45013f6a6d46e7c686b"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0af9ee2d6e0c534883ad6802ef13b219",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9844,
        "upload_time": "2019-10-17T10:04:00",
        "upload_time_iso_8601": "2019-10-17T10:04:00.803213Z",
        "url": "https://files.pythonhosted.org/packages/5e/f8/5fdb5146c4bd6d4e9fd0706abcf20a3e3b716c10ce92506ebd816f16b68e/pychronicles-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a018c76fbcd0716a073f0196d3ac176093f8a8b9599155e2ba255062eabe7a6e",
          "md5": "1c21785b275b262676eb39deacbc8199",
          "sha256": "3e801b857940f5ac57577fba3671546c5f9235d093a6af89aee1a002ee82c665"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c21785b275b262676eb39deacbc8199",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25539,
        "upload_time": "2020-04-14T14:22:24",
        "upload_time_iso_8601": "2020-04-14T14:22:24.178063Z",
        "url": "https://files.pythonhosted.org/packages/a0/18/c76fbcd0716a073f0196d3ac176093f8a8b9599155e2ba255062eabe7a6e/pychronicles-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bc1a1c4f60618827f2218f986d7fd7ddb1c28ec035073e213b7a3da9759dd97",
          "md5": "12ef8b63a410d05e94a508dcbdc1d8c2",
          "sha256": "0fc09df27e07fac6211ff6b999e9a87baf8f2bcbbf1c26eda98b5c76aff2a6e7"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "12ef8b63a410d05e94a508dcbdc1d8c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11482,
        "upload_time": "2020-04-14T14:22:25",
        "upload_time_iso_8601": "2020-04-14T14:22:25.409992Z",
        "url": "https://files.pythonhosted.org/packages/8b/c1/a1c4f60618827f2218f986d7fd7ddb1c28ec035073e213b7a3da9759dd97/pychronicles-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61dfd9a91d3708cd81b43dda2aaeb7206f01eaaca02caff618280e64e98a9247",
          "md5": "384a410520a3990327341508f4adf9f2",
          "sha256": "c48eacbbdc1406602689feb7a5ad01e0a20af7e8836549b02d6dff21bbf0bfa8"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "384a410520a3990327341508f4adf9f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1197261,
        "upload_time": "2022-08-12T16:20:33",
        "upload_time_iso_8601": "2022-08-12T16:20:33.528930Z",
        "url": "https://files.pythonhosted.org/packages/61/df/d9a91d3708cd81b43dda2aaeb7206f01eaaca02caff618280e64e98a9247/pychronicles-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85d67e1ca01be447da920b4dc4b82f58da3bb3d363935877e18f0a31b66c2161",
          "md5": "1e745ffd713b2cbcd7e75cc3e24b499b",
          "sha256": "44787538325f3450d813c262fad9ba549f7154293a96adfe1699f25743b28d9a"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.8-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "1e745ffd713b2cbcd7e75cc3e24b499b",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 1023216,
        "upload_time": "2022-08-12T16:36:14",
        "upload_time_iso_8601": "2022-08-12T16:36:14.453964Z",
        "url": "https://files.pythonhosted.org/packages/85/d6/7e1ca01be447da920b4dc4b82f58da3bb3d363935877e18f0a31b66c2161/pychronicles-0.0.8-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05af802074cc02d33bc4d09e982d4a5334847fd88b86a2aa6aa238b42ac06498",
          "md5": "9848ab97afba6395fff3f335ec263446",
          "sha256": "92bd47aef5128c2eb0e6078dc48d5386558395452bfcc76a369aca1b56f49228"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "9848ab97afba6395fff3f335ec263446",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1197268,
        "upload_time": "2022-08-12T16:36:18",
        "upload_time_iso_8601": "2022-08-12T16:36:18.482332Z",
        "url": "https://files.pythonhosted.org/packages/05/af/802074cc02d33bc4d09e982d4a5334847fd88b86a2aa6aa238b42ac06498/pychronicles-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00d4992938466fd771057eecd64f15a0fa5b4c9245af4fdd2bc18b410fb9d81f",
          "md5": "03da2609f7a191b34bac811762f61885",
          "sha256": "ec1d7998dede3f2f2c2c169a4a45d446fbd78c9c77b5085196e9a47e1cd94540"
        },
        "downloads": -1,
        "filename": "pychronicles-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "03da2609f7a191b34bac811762f61885",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 938592,
        "upload_time": "2022-10-18T15:35:25",
        "upload_time_iso_8601": "2022-10-18T15:35:25.957181Z",
        "url": "https://files.pythonhosted.org/packages/00/d4/992938466fd771057eecd64f15a0fa5b4c9245af4fdd2bc18b410fb9d81f/pychronicles-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4cb99629aa46486eedd35c4b87f0c5853023eff6fa3e54e44ed21aac93ae050",
        "md5": "8ca0abff93b87478ba479a6ce3bdfb3b",
        "sha256": "17c711b2a984782a1b619cfa82f65590f14594e41605ea65cae814558fc894ff"
      },
      "downloads": -1,
      "filename": "pychronicles-0.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "8ca0abff93b87478ba479a6ce3bdfb3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 133662,
      "upload_time": "2022-10-27T13:52:37",
      "upload_time_iso_8601": "2022-10-27T13:52:37.535200Z",
      "url": "https://files.pythonhosted.org/packages/d4/cb/99629aa46486eedd35c4b87f0c5853023eff6fa3e54e44ed21aac93ae050/pychronicles-0.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}