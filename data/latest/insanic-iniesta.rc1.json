{
  "info": {
    "author": "Kwang Jin Kim",
    "author_email": "kwangjinkim@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": ".. image:: https://github.com/crazytruth/iniesta/raw/master/docs/source/_static/iniesta.png\n\n*******\nIniesta\n*******\n\n|Build Status| |Documentation Status| |Codecov|\n\n|PyPI pyversions| |PyPI version| |PyPI license| |Black|\n\n.. |Build Status| image:: https://github.com/crazytruth/iniesta/workflows/Python%20Tests/badge.svg\n    :target: https://github.com/crazytruth/iniesta/actions?query=workflow%3A%22Python+Tests%22\n\n.. |Documentation Status| image:: https://readthedocs.org/projects/iniesta/badge/?version=latest\n    :target: http://iniesta.readthedocs.io/?badge=latest\n\n.. |Codecov| image:: https://codecov.io/gh/crazytruth/iniesta/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/crazytruth/iniesta\n\n.. |PyPI version| image:: https://img.shields.io/pypi/v/iniesta-framework\n    :target: https://pypi.org/project/insanic-iniesta/\n\n.. |PyPI pyversions| image:: https://img.shields.io/pypi/pyversions/insanic-framework\n    :target: https://pypi.org/project/insanic-iniesta/\n\n.. |Black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. |PyPI license| image:: https://img.shields.io/github/license/crazytruth/iniesta?style=flat-square\n    :target: https://pypi.org/project/insanic-iniesta/\n\n.. end-badges\n\nA messaging integration for the event driven pattern utilizing AWS SNS and AWS SQS for `Insanic`_.\n\n\nWhy?\n=====\n\nIniesta is a messaging integration plugin for `Insanic`_. This was initially created to easily apply\nthe event driven pattern to services running `Insanic`_.\n\nFor a bit of context, AndrÃ©s Iniesta is a Spanish professional soccer player who plays as a central midfielder.\nHe is considered one the best soccer players and one of the greatest midfielders of all time.\nFor those of you unfamiliar with soccer, a midfielder is responsible for playmaking, passing the\nsoccer ball from the defense to the forwards.\n\nConsequently, this project aims to be the messenger between services; a proxy, for sending\nmessages(the soccer ball) from the producers(defenders) to the consumer(strikers) albeit\nthe messages fan out and there is only one soccer ball.\n\n\nFeatures\n=========\n\n- Asynchronous message handling.\n- Produce messages to a global SNS.\n- Filters for verification and subscribing SQS to SNS.\n- Polling for SQS and receiving messages.\n- Decorator for consuming messages with defined parameters.\n- Locks for idempotent message handling.\n- Checks for if proper subscriptions have been setup.\n- Checks for if proper permissions has been setup.\n- Decorators for emitting messages.\n\n\nInstallation\n=============\n\nPrerequisites:\n\n- python >= 3.6\n- AWS Credentials\n\n\nTo install:\n\n.. code-block:: bash\n\n    pip install insanic-iniesta\n\nTo setup, we need a couple settings.\n\n- :code:`INIESTA_INITIALIZATION_TYPE` : (list[string]) List of initialization types defined by `InitializationTypes` enum.\n\n    - Choices: \"QUEUE_POLLING\", \"EVENT_POLLING\", \"SNS_PRODUCER\", \"CUSTOM\"\n\n- :code:`INIESTA_SQS_CONSUMER_FILTERS`: (list) default:[] A list of filters for the message events your service will want to receive.\n- :code:`INIESTA_SNS_PRODUCER_GLOBAL_TOPIC_ARN`: (string) default:None The global sns arn.\n- :code:`INIESTA_SNS_EVENT_KEY`: (string) default:iniesta_pass The key the event will be published under. Will NOT want to change this.\n- :code:`INIESTA_LOCK_RETRY_COUNT`: (int) default:1 Lock retry count when lock is unable to be required\n- :code:`INIESTA_LOCK_TIMEOUT`: (int) default:10s Timeout for the lock when received\n\n\nBasic Usage\n===========\n\nThere are several initialization types because not all applications\nneed to produce, or receive messages at the same time.  So you would need\nto set the initialization type catered towards your use case.\n\nInitializing\n------------\n\nFirst we need to decide on the type of initialization we need\nto use.  For Iniesta to know the initialization type,\nwe need to set :code:`INIESTA_INITIALIZATION_TYPE` in our\nconfig. Until we do so, you will not be able to run\nInsanic.\n\n.. code-block:: python\n\n    # in your application config.py\n    INIESTA_INITIALIZATION_TYPE = [\"SNS_PRODUCER\"]\n\n    # and finally in app.py\n    from insanic import Insanic\n    from iniesta import Iniesta\n\n    app = Insanic('producer', version=\"0.0.1\")\n    Iniesta.init_app(app)\n\nFor more documentation on initialization types,\nplease refer to the Iniesta's `Documentation`_.\n\n\nPublishing Messages to SNS\n--------------------------\n\nYou would want to setup Iniesta if you ONLY need to\nproduce messages to SNS.\n\n.. code-block:: python\n\n    from iniesta.sns import SNSClient\n\n    sns = SNSClient(topic_arn)\n    message = sns.create_message(event=\"EventHappened\", message={\"id\": 1}, version=1)\n    await message.publish()\n\nThis will publish a message to SNS with the event\nspecified in the parameters. The published event will be\n:code:`{event}.{service_name}`. Even if you don't specify the service_name in\nthe event, it will automatically be appended.\n\n\nConsuming Messages\n------------------\n\nTo consume messages that other applications have produced,\nwe setup Iniesta for :code:`EVENT_POLLING`.\n\nThere are several checks Iniesta performs when\ninitializing for :code:`EVENT_POLLING`.\n\n- Checks if the AWS SQS has been created.\n- Checks if global arn is set (:code:`INIESTA_SNS_PRODUCER_GLOBAL_TOPIC_ARN`)\n- Checks if filters have been defined (:code:`INIESTA_SQS_CONSUMER_FILTERS`).\n- Checks if subscriptions has been made with service SQS and SNS.\n- Checks if necessary permissions have been put in place.\n\nInitial setup for event polling:\n\n.. code-block:: python\n\n    # in your config.py\n    INIESTA_INITIALIZATION_TYPE = ['EVENT_POLLING']\n\n    # in service named receiver\n    from insanic import Insanic\n    from iniesta import Iniesta\n\n    app = Insanic('receiver')\n    Iniesta.init_app(app)\n\n\nSince we have initialized for polling our queue, we need to\ncreate handlers for processing the messages.\n\nFor creating a handler for an event:\n\n.. code-block:: python\n\n    from iniesta.sqs import SQSClient\n\n    @SQSClient.handler('EventHappened.producer')\n    def event_happened_handler(message):\n        # .. do some logic ..\n        pass\n\nThe function must receive :code:`message` as an argument.\nIf the function successfully runs, the message will be\ndeleted from SQS.\n\nOther Use Cases\n----------------\n\nFor other use cases for Iniesta, please refer to the `Documentation`_.\n\n\nCommands\n========\n\nIniesta provides several commands to help testing during\ndevelopment.\n\nInstall\n-------\n.. code-block:: bash\n\n    $ pip install iniesta[cli]\n\nBasic Usage\n-----------\n\n.. code-block:: bash\n\n    $ iniesta --help\n    Usage: iniesta [OPTIONS] COMMAND [ARGS]...\n\n    Options:\n      --help  Show this message and exit.\n\n    Commands:\n      filter-policies\n      initialization-type\n      publish\n      send\n\n\nPlease refer to the Iniesta's `Commands Documentation`_ for\nmore information on each of the available commands.\n\n\nKnown Issues\n=============\n\n- If the module including the handlers are not imported, they do not properly register.\n    To prevent this import the module somewhere(e.g. in your `app.py`) until\n    a better solution is found.\n\nRelease History\n===============\n\nView release history `here <CHANGELOG.rst>`_\n\n\nContributing\n=============\n\nFor guidance on setting up a development environment and how to make a contribution to Iniesta,\nsee the `CONTRIBUTING.rst <CONTRIBUTING.rst>`_ guidelines.\n\n\nMeta\n====\n\nDistributed under the MIT license. See `LICENSE <LICENSE>`_ for more information.\n\nThanks to all the people at my prior company that worked with me to make this possible.\n\nLinks\n=====\n\n- Documentation: https://iniesta.readthedocs.io/en/latest/\n- Releases: https://pypi.org/project/insanic-iniesta/\n- Code: https://www.github.com/crazytruth/iniesta/\n- Issue Tracker: https://www.github.com/crazytruth/iniesta/issues\n- Insanic Documentation: http://insanic.readthedocs.io/\n- Insanic Repository: https://www.github.com/crazytruth/insanic/\n\n.. _Insanic: https://github.com/crazytruth/insanic\n.. _Documentation: https://iniesta.readthedocs.io/en/latest/\n.. _Commands Documentation: https://iniesta.readthedocs.io/en/latest/iniesta/commands/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/crazytruth/iniesta",
    "keywords": "iniesta insanic sanic async asyncio aws sqs sns event python3",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "insanic-iniesta",
    "package_url": "https://pypi.org/project/insanic-iniesta/",
    "platform": "",
    "project_url": "https://pypi.org/project/insanic-iniesta/",
    "project_urls": {
      "Homepage": "https://github.com/crazytruth/iniesta"
    },
    "release_url": "https://pypi.org/project/insanic-iniesta/0.4.0/",
    "requires_dist": [
      "insanic-framework",
      "aiobotocore (>=0.12.0)",
      "aioredlock",
      "Click (>=7.0) ; extra == 'cli'"
    ],
    "requires_python": "",
    "summary": "Messaging integration for insanic",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8440144,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "892c1579197fe38127441f38c8b2cd812a313efb735e2f621a3d62bba2561b49",
          "md5": "a9405d4bb863d041d0ed2226e03a3c91",
          "sha256": "47d0cfd1a10ad19d097949853652d1b6ae8a0acb9fbcfaa0422b10fd71ac8c8a"
        },
        "downloads": -1,
        "filename": "insanic_iniesta-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9405d4bb863d041d0ed2226e03a3c91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26746,
        "upload_time": "2020-10-18T16:48:21",
        "upload_time_iso_8601": "2020-10-18T16:48:21.270782Z",
        "url": "https://files.pythonhosted.org/packages/89/2c/1579197fe38127441f38c8b2cd812a313efb735e2f621a3d62bba2561b49/insanic_iniesta-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44801c329979440a4693f83fbdb0e83228865ed880c3fc8af6096b365960436e",
          "md5": "314cdd4c958d4a27daf9cfc01e2b186f",
          "sha256": "628f60e7a15e687f4540ccd477054916d11f63f9b09af16069a0b9f6ef8c4a36"
        },
        "downloads": -1,
        "filename": "insanic-iniesta-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "314cdd4c958d4a27daf9cfc01e2b186f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 151061,
        "upload_time": "2020-10-18T16:48:27",
        "upload_time_iso_8601": "2020-10-18T16:48:27.735358Z",
        "url": "https://files.pythonhosted.org/packages/44/80/1c329979440a4693f83fbdb0e83228865ed880c3fc8af6096b365960436e/insanic-iniesta-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "892c1579197fe38127441f38c8b2cd812a313efb735e2f621a3d62bba2561b49",
        "md5": "a9405d4bb863d041d0ed2226e03a3c91",
        "sha256": "47d0cfd1a10ad19d097949853652d1b6ae8a0acb9fbcfaa0422b10fd71ac8c8a"
      },
      "downloads": -1,
      "filename": "insanic_iniesta-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a9405d4bb863d041d0ed2226e03a3c91",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 26746,
      "upload_time": "2020-10-18T16:48:21",
      "upload_time_iso_8601": "2020-10-18T16:48:21.270782Z",
      "url": "https://files.pythonhosted.org/packages/89/2c/1579197fe38127441f38c8b2cd812a313efb735e2f621a3d62bba2561b49/insanic_iniesta-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "44801c329979440a4693f83fbdb0e83228865ed880c3fc8af6096b365960436e",
        "md5": "314cdd4c958d4a27daf9cfc01e2b186f",
        "sha256": "628f60e7a15e687f4540ccd477054916d11f63f9b09af16069a0b9f6ef8c4a36"
      },
      "downloads": -1,
      "filename": "insanic-iniesta-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "314cdd4c958d4a27daf9cfc01e2b186f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 151061,
      "upload_time": "2020-10-18T16:48:27",
      "upload_time_iso_8601": "2020-10-18T16:48:27.735358Z",
      "url": "https://files.pythonhosted.org/packages/44/80/1c329979440a4693f83fbdb0e83228865ed880c3fc8af6096b365960436e/insanic-iniesta-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}