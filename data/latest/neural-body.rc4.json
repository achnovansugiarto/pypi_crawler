{
  "info": {
    "author": "AstroGators",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Neural Body N-Body Simulator\n\n## Summary\nAn n-body simulator powered by a neural network.\n\nNeural Body is an n-body simulator is currently a demonstration of substituting \ncalculations for planetary motion with a neural network.  The user can choose\nfrom a selection of provided config files or modify config files with \nadditional satellites and burn maneuvers.\n\nPlanets are calculated with physics while satellites use and LSTM neural \nnetwork to predict what the satellite's next 20 time steps of displacement and \nvelocity will look like given a sequence of 4 time steps. There is the option\nto ignore the neural network in the config file.  The user might opt to do this\nsince LSTM neural network inference is computationally intensive.  Raw physics\ncalculations are vectorized and should be more performant.\n\nThis is an example of the Jupyter notebooks written to train LSTM networks at \nvarious time steps: <a href=\"https://colab.research.google.com/drive/1sNubXW63ckzVu7iFL4cDOqpQ6WFg4qD7\" target=\"_blank\"> LSTM Neural Network Training </a>\n\nThe data generation and manipulation into a format that the LSTM network could\nunderstand also took considerable time.  This is a link to one of the example notebooks\nthat took the raw HDF5 cache files produced by a data generating simulator and \nconverted the raw data to a format the LSTM network could train on. <a href=\"https://github.com/nedgar76/neural-body/blob/final-sim/neural_network_dev/simulator/2_benrules_v2/0_Data_Generation_Notebooks/benrules_v2_simcache_to_df_converter.ipynb\" target=\"_blank\"> Data Processing </a>\n\n---\n## Table of Contents\n- Installation\n- Usage\n- Documentation\n- Improvements Since Alpha\n- Team\n- License\n\n[![Game Overview Image](https://raw.githubusercontent.com/nedgar76/neural-body/demo-sim/0_demo-sim/readme_resources/overview_screenshot.png?token=ALC2NMM5G56RZFD237TQX32677FSA)]()\n---\n## Installation\n### Requirements\n- Compatible debian-based Linux distro.  Ubuntu 20.04 Preferred.\n- Python 3.8 or higher.\n- PyGame 2.0.0.dev10 or higher.\n- TensorFlow 2.2.0\n- Pandas 1.1.0\n- Numpy 1.18.4\n- xlrd\n- h5py\n- pynput\n\nAll dependencies above except for Python 3.8 should install when `pip install` is run.\n\n### Setup\n\nInstalling from .tar.gz:\n- Download `neural_body-0.1.3.tar.gz` from the `dist` directory.\n- Navigate to local folder where download is located.\n- Use `pip install neural_body-0.1.3.tar.gz`\n- Use the `neural_body` command to run the simulator from terminal.\n\nInstalling from PyPi:\n- PyPi project page is located <a href=\"https://pypi.org/project/neural-body/\" target=\"_blank\"> here </a>\n- Use `pip install neural-body`\n- Use the `neural_body` command to run the simulator from terminal.\n\n---\n## Usage\nThis selection includes an overview of all menu buttons and functionality of the simulator.\n\n### Pause / Play\nThe simulation can be paused at any point.\n![Setup Overview GIF](https://github.com/nedgar76/neural-body/blob/demo-sim/0_demo-sim/readme_resources/play_pause.GIF?raw=true)\n### Toggle View\nThe simulation view can be toggled from overhead to side view.\n![Setup Overview GIF](https://github.com/nedgar76/neural-body/blob/demo-sim/0_demo-sim/readme_resources/toggle_view.GIF?raw=true)\n### Adjust Speed\nThe simulation can be sped up or slowed down.\n![Setup Overview GIF](https://github.com/nedgar76/neural-body/blob/demo-sim/0_demo-sim/readme_resources/adjust_speed.GIF?raw=true)\n### New Simulation\nWARNING: Obtaining stable burn maneuver sequences can take considerable time.\nExample configurations are included with the simulator for testing.\n\nSimulation config files are Excel spreadsheets where the first sheet is the\ngeneral simulation config where the user chooses to use the neural network or \nnot. \n\n![Config File Overview](https://github.com/nedgar76/neural-body/blob/final-sim/1_final-sim/readme_resources/use_neural_net_config.png?raw=true)\n\nSheets to the right of the first sheet contain satellite configurations.\n\n![Config File Overview](https://github.com/nedgar76/neural-body/blob/final-sim/1_final-sim/readme_resources/config_tabs.png?raw=true)\n\nThe user can modify the satellite sheets and add satellite sheets with the below parameters.\n- Name: Name of the satellite.\n- Mass: Mass of the satellite in kilograms.\n- Altitude: Altitude of the satellite above earth. \n- StartSpeed: Starting speed of the satellite in meters per second.\n- MStart: Time step the maneuver occurs.  Simulation time step is 6 hours.  For example, to run a burn at day 4, multiply by 4 to get time step 16.\n- DeltaVX, DeltaVY, DeltaVZ: X, Y, Z magnitudes of that particular burn maneuver in meters per second per second.\n\nBurn maneuvers kept as time step units instead of day for programming finer-than-one-day burn maneuvers.\n\nBurn maneuvers can be appended to the MStart, DeltaVX, DeltaVY, and DeltaVZ columns as needed.\n\n![Config File Overview](https://github.com/nedgar76/neural-body/blob/final-sim/1_final-sim/readme_resources/sat_config_cols.png?raw=true)\n\nExample config file is available for download <a href=\"https://github.com/nedgar76/neural-body/tree/final-sim/1_final-sim/neural_body/sim_configs\" target=\"_blank\"> here. </a>\n\nAfter you have your config file, it can be loaded into the simulator by \nselecting \"New Simulation\", browsing to it and selecting the file.  After selecting,\nthere will be a short delay while the simulator preps a simulation buffer.\n![Config File Overview](https://github.com/nedgar76/neural-body/blob/final-sim/1_final-sim/readme_resources/loading_new_sim.gif?raw=true)\n\n### Is NASA Right?\nIf you disagree with NASA, you can bring Pluto back as a planet.  \n![Setup Overview GIF](https://github.com/nedgar76/neural-body/blob/demo-sim/0_demo-sim/readme_resources/is_nasa_right.GIF?raw=true)\n### Show Planet Key\nHovering over this option displays a color coded key of all planets in the system.\n![Setup Overview GIF](https://github.com/nedgar76/neural-body/blob/demo-sim/0_demo-sim/readme_resources/show_planet_key.GIF?raw=true)\n### Travel to a Day\nSelecting this option allows the user to rewind or fast forward the simulation by \nentering the day they would like to jump to.  There can be a heavier delay for \nlonger time step jumps as once the buffer is depleted, all intermediate time steps\nmust be calculated.  At any point, the jump can be canceled by pressing the \nescape key.\n![Setup Overview GIF](https://github.com/nedgar76/neural-body/blob/final-sim/1_final-sim/readme_resources/travel_to_a_day.gif?raw=true)\n\n---\n## Documentation\nTo view the documentation online, go to the following URL: \\\n<a href=\"https://nedgar76.github.io/neural-body/\" target=\"_blank\"> Neural Body Sphinx Documentation </a>\n\nDocumentation for the source compiled with Sphinx is included in the `neural-body/0_demo-sim/docs/_build/html/`\nfolder.  You will need to download and host yourself by running `python3 -m http.server --directory _build/html`\n---\n# Simulator and Neural Net Improvements Since Alpha\n\nThe simulator was originally base on the BenrulesRealTimeSim class, which creates a real time\nsimulator of the sun, planets, pluto, and an arbitrary number of satellites.\nThe initial simulation was forked from benrules2 on Github at the below link.\nhttps://gist.github.com/benrules2/220d56ea6fe9a85a4d762128b11adfba\nThis simulator simulated a system for a fixed number of time steps and output\nthe results to a custom class and dictionary.\n\nv2 of the simulator converted it to a real time simulator using a Pandas\ndataframe to track simulation history and rewind back in time.  It also used\na feed-forward neural network that predicted the location of a specifically\ntrained body given the positions of every other body.  It also used\ndictionaries to store current simulation states and calculated steps from\nacceleration to velocity to displacement using loops.  Overall, this presented\nthe below challenges:\n1. High memory usage.  Since the simulation for all time was stored to a\n   Pandas Dataframe in memory, this meant that as the simulation ran, the\n   memory usage would continually grow.\n   \n2. Slow simulation computations.  Many of the calculations used double and\n   triple nested loops to calculte gravitational influence on a body and\n   convert from the acceleration to velocity and velocity to displacement\n   domains.\n   \n3. CPU idle time.  Since all calculations were done at run time, the simulator\n   would sit at idle rather than continuing to perform calculations in the\n   background.\n\nv3, while taking inspiration from the original benrules simulator,\nno longer resembles the original.  v3 is extensible to an arbitrary number of\nsatellites in the simulation.  The LSTM neural net it uses relies on the body\nacceleration and current velocities to predict where the body will go for the\nnext 20 time steps.  The current behavior of the neural net is strange, which\nis why in the config files, there is an option to turn it off and rely on the\nsimulator only.  Much more feature engineering, data generation, and\nhyperparameter tuning is needed to accurately mimic orbital behavior.\nOne of the main challenges that arose as well with the LSTM network is slower\ninference time.  Without background processing and predicting multiple time\nsteps at each inference, performance would be sub 3 fps.  Because of this\nchallenge and the v2 challenges, the below changes were made to v3.\n1. Instead of using a Pandas dataframe that could require large amounts of\n   memory with longer simulation durations, a new cache-archive system was\n   developed to exchange simulation tracking between a numpy array that stores\n   a sequence of 100 values in memory and an hdf5 file that stores a total\n   record of the simulation so far.  As time jumps are performed, trackers and\n   functions handle the flushing of new values from the cache to the archive\n   and loading of time steps from the archive.  Having a history stored in\n   numpy arrays also helps with vectorized computation since time steps don't\n   need to be copied to other data structures for use in calculations.\n   \n2. Slow simulation computations were addressed by fully vectorizing all\n   simulation computations using numpy linear algebra and getting rid of all\n   computation loops.  This vectorization was done while maintaining the\n   capability to add an arbitrary number of bodies to the simulation.\n   Slow inference time with the neural network was addressed by trying to\n   predict 20 time steps ahead given a sequence of 4 time steps as input to\n   an LSTM network.  This enabled 1 inference cycle to produce 20 time steps.\n   \n3. Since the simulator is inherently a serial problem (in order to predict\n   the next state, we must know the previous state), the team chose to address\n   performance with a producer/consumer model that uses multiprocessing to\n   continually run a producer in a background process that calculates future\n   time steps even while the simulation is paused or when there is available\n   CPU time on another processor.  Main simulation calculations are moved to\n   an external process that calculates future time steps.  This process\n   maintains a pre-queue of about 5000 future time steps.  It feeds a queue\n   of 100 time steps between the background process and the main simulator that\n   provides positions to the front end.  In order to reliably keep the main\n   queue filled, the background process continually checks the main\n   queue is filled with values from the pre-queue.  It is able to continually\n   perform this task since the calculations filling the pre-queue are launched\n   and performed in a separate thread.  This help mitigate the\n   degradation of the buffer that the main queue provides.\n\nIn addition to the above improvements, benchmarking and queue monitoring are used\nto ensure that the system runs at a steady pace so that the simulator can keep\nup with frame requests.  The user can burst to 2X or 4X, but if the queue begins to degrade,\nthe simulator will automatically revert back to 1X.  This is mainly for when\nthe neural network is used.  When not using the neural network, the simulator\nwill usually set to a max framerate of 50 fps.\n\n---\n## Team\nThe AstroGators formed as a result of the \"CIS4930 - Performant Python Programming\" \ncourse at the University of Florida developed by \n<a href=\"https://www.eng.ufl.edu/eed/faculty-staff/jeremiah-blanchard/\" target=\"_blank\"> Jeremiah Blanchard </a>\n\nTeam members include:\n- Nathaniel Edgar\n- Craig Boger\n- Gary Jones\n- Cory Robertson\n- Andrew Sowinski\n\nNathaniel was team captain and worked on the burn maneuver system.  Craig was \nresponsible for the simulator backend design and data engineering for the neural\nnet.  Gary was the resident LSTM expert and \nworked on training and tuning of the LSTM neural network along with the previous \ngeneration feed-forward neural net.  Andrew was the front-end and PyGame expert.\nCory performed integration work between back end and front end along with \nfront end timing tasks.\n\nThe Github repo for this demonstration is located at: \n<a href=\"https://github.com/nedgar76/neural-body/tree/final-sim/1_final-sim\" target=\"_blank\"> https://github.com/nedgar76/neural-body/tree/final-sim/1_final-sim </a>\n\n## License\n\n[![License](http://img.shields.io/:license-mit-blue.svg?style=flat-square)](http://badges.mit-license.org)\n\n- **[MIT license](http://opensource.org/licenses/mit-license.php)**\n- Copyright 2020 ©",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nedgar76/neural-body",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neural-body",
    "package_url": "https://pypi.org/project/neural-body/",
    "platform": "",
    "project_url": "https://pypi.org/project/neural-body/",
    "project_urls": {
      "Homepage": "https://github.com/nedgar76/neural-body"
    },
    "release_url": "https://pypi.org/project/neural-body/0.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.8, <4",
    "summary": "An n-body simulator",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7864273,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05088504070426c5814934d6e86e63127f035e23f776459e3b013d2d48bb1e1a",
          "md5": "e4dd0457d88d1ccb00461f5b20791e9e",
          "sha256": "d9f50704c5ad0b0c6d419644dcdc28d5ee3f930fdc1832cd58abe87b88a2dff1"
        },
        "downloads": -1,
        "filename": "neural_body-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e4dd0457d88d1ccb00461f5b20791e9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 27439799,
        "upload_time": "2020-06-27T19:08:23",
        "upload_time_iso_8601": "2020-06-27T19:08:23.846787Z",
        "url": "https://files.pythonhosted.org/packages/05/08/8504070426c5814934d6e86e63127f035e23f776459e3b013d2d48bb1e1a/neural_body-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be04d0dabf2136565665f3f5b0ce4e7a79ce1576f6819181869daa18bb9404e",
          "md5": "9a3d47c82a701b92294ffaa08a5d5e89",
          "sha256": "064c36ba3340c9ccb97ff8b5f6adc3652e06131726b84434c8cb180b9d4103a2"
        },
        "downloads": -1,
        "filename": "neural_body-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9a3d47c82a701b92294ffaa08a5d5e89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 25832989,
        "upload_time": "2020-06-30T02:27:13",
        "upload_time_iso_8601": "2020-06-30T02:27:13.443063Z",
        "url": "https://files.pythonhosted.org/packages/3b/e0/4d0dabf2136565665f3f5b0ce4e7a79ce1576f6819181869daa18bb9404e/neural_body-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad6d99630b6b47e5926927d9fa4577ac3da84f2169693a9fd5803f213552736d",
          "md5": "012f2e90f9caf0a746779db95cbe70f3",
          "sha256": "b5c258ee23023f8f1d2a945a665b328a337c7dbbc7e254b7e1ca3df32117c4f6"
        },
        "downloads": -1,
        "filename": "neural_body-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "012f2e90f9caf0a746779db95cbe70f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 3149926,
        "upload_time": "2020-08-01T17:12:49",
        "upload_time_iso_8601": "2020-08-01T17:12:49.222210Z",
        "url": "https://files.pythonhosted.org/packages/ad/6d/99630b6b47e5926927d9fa4577ac3da84f2169693a9fd5803f213552736d/neural_body-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a15056f3350c9ef315cddb9bec41138513d77cde84a9b81802e3b4b1e500657",
          "md5": "167f0ba7ea2209ecdd92a6c8202a751e",
          "sha256": "b7cc080c89c985601f0bda85003c302cedc06ab94d9e3d46fcdc4e8fcae3522c"
        },
        "downloads": -1,
        "filename": "neural_body-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "167f0ba7ea2209ecdd92a6c8202a751e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 2955003,
        "upload_time": "2020-08-02T00:14:24",
        "upload_time_iso_8601": "2020-08-02T00:14:24.213880Z",
        "url": "https://files.pythonhosted.org/packages/5a/15/056f3350c9ef315cddb9bec41138513d77cde84a9b81802e3b4b1e500657/neural_body-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a15056f3350c9ef315cddb9bec41138513d77cde84a9b81802e3b4b1e500657",
        "md5": "167f0ba7ea2209ecdd92a6c8202a751e",
        "sha256": "b7cc080c89c985601f0bda85003c302cedc06ab94d9e3d46fcdc4e8fcae3522c"
      },
      "downloads": -1,
      "filename": "neural_body-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "167f0ba7ea2209ecdd92a6c8202a751e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8, <4",
      "size": 2955003,
      "upload_time": "2020-08-02T00:14:24",
      "upload_time_iso_8601": "2020-08-02T00:14:24.213880Z",
      "url": "https://files.pythonhosted.org/packages/5a/15/056f3350c9ef315cddb9bec41138513d77cde84a9b81802e3b4b1e500657/neural_body-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}