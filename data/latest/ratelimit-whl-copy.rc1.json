{
  "info": {
    "author": "Chris Zhang",
    "author_email": "zzzhang@uber.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Topic :: Software Development"
    ],
    "description": "ratelimit |build| |maintainability|\n===================================\n\nAPIs are a very common way to interact with web services. As the need to\nconsume data grows, so does the number of API calls necessary to remain up to\ndate with data sources. However many API providers constrain developers from\nmaking too many API calls. This is know as rate limiting and in a worst case\nscenario your application can be banned from making further API calls if it\nabuses these limits.\n\nThis packages introduces a function decorator preventing a function from being\ncalled more often than that allowed by the API provider. This should prevent\nAPI providers from banning your applications by conforming to their rate\nlimits.\n\nInstallation\n------------\n\nPyPi\n~~~~\n\nAdd this line to your application's requirements.txt:\n\n.. code:: python\n\n    ratelimit\n\nAnd then execute:\n\n.. code:: bash\n\n    $ pip install -r requirements.txt\n\nOr install it yourself:\n\n.. code:: bash\n\n    $ pip install ratelimit\n\nGitHub\n~~~~~~\n\nInstalling the latest version from Github:\n\n.. code:: bash\n\n    $ git clone https://github.com/tomasbasham/ratelimit\n    $ cd ratelimit\n    $ python setup.py install\n\nUsage\n-----\n\nTo use this package simply decorate any function that makes an API call:\n\n.. code:: python\n\n    from ratelimit import limits\n\n    import requests\n\n    FIFTEEN_MINUTES = 900\n\n    @limits(calls=15, period=FIFTEEN_MINUTES)\n    def call_api(url):\n        response = requests.get(url)\n\n        if response.status_code != 200:\n            raise Exception('API response: {}'.format(response.status_code))\n        return response\n\nThis function will not be able to make more then 15 API call within a 15 minute\ntime period.\n\nThe arguments passed into the decorator describe the number of function\ninvocation allowed over a specified time period (in seconds). If no time period\nis specified then it defaults to 15 minutes (the time window imposed by\nTwitter).\n\nIf a decorated function is called more times than that allowed within the\nspecified time period then a ``ratelimit.RateLimitException`` is raised. This\nmay be used to implement a retry strategy such as an `expoential backoff\n<https://pypi.org/project/backoff/>`_\n\n.. code:: python\n\n    from ratelimit import limits, RateLimitException\n    from backoff import on_exception, expo\n\n    import requests\n\n    FIFTEEN_MINUTES = 900\n\n    @on_exception(expo, RateLimitException, max_tries=8)\n    @limits(calls=15, period=FIFTEEN_MINUTES)\n    def call_api(url):\n        response = requests.get(url)\n\n        if response.status_code != 200:\n            raise Exception('API response: {}'.format(response.status_code))\n        return response\n\nAlternatively to cause the current thread to sleep until the specified time\nperiod has ellapsed and then retry the function use the ``sleep_and_retry``\ndecorator. This ensures that every function invocation is successful at the\ncost of halting the thread.\n\n.. code:: python\n\n    from ratelimit import limits, sleep_and_retry\n\n    import requests\n\n    FIFTEEN_MINUTES = 900\n\n    @sleep_and_retry\n    @limits(calls=15, period=FIFTEEN_MINUTES)\n    def call_api(url):\n        response = requests.get(url)\n\n        if response.status_code != 200:\n            raise Exception('API response: {}'.format(response.status_code))\n        return response\n\nLicense\n-------\n\nThis project is licensed under the `MIT License <LICENSE.txt>`_.\n\n.. |build| image:: https://travis-ci.com/tomasbasham/ratelimit.svg?branch=master\n    :target: https://travis-ci.com/tomasbasham/ratelimit\n\n.. |maintainability| image:: https://api.codeclimate.com/v1/badges/21dc7c529c35cd7ef732/maintainability\n    :target: https://codeclimate.com/github/tomasbasham/ratelimit/maintainability\n    :alt: Maintainability\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zzzhang72/ratelimit",
    "keywords": "ratelimit,api,decorator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ratelimit-whl-copy",
    "package_url": "https://pypi.org/project/ratelimit-whl-copy/",
    "platform": null,
    "project_url": "https://pypi.org/project/ratelimit-whl-copy/",
    "project_urls": {
      "Homepage": "https://github.com/zzzhang72/ratelimit"
    },
    "release_url": "https://pypi.org/project/ratelimit-whl-copy/2.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "API rate limit decorator",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17147980,
  "releases": {
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95a6444dae1e1d44adc00860e656edd02dd4ee631a689088b817297c2c755626",
          "md5": "28ba196ba4b2e21766cf9c31a3b69d37",
          "sha256": "467e602299b73056cb5c67aa15620d6a174c609508a188d7f739cf52b8a8ab60"
        },
        "downloads": -1,
        "filename": "ratelimit_whl_copy-2.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28ba196ba4b2e21766cf9c31a3b69d37",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6268,
        "upload_time": "2023-03-03T18:31:29",
        "upload_time_iso_8601": "2023-03-03T18:31:29.813997Z",
        "url": "https://files.pythonhosted.org/packages/95/a6/444dae1e1d44adc00860e656edd02dd4ee631a689088b817297c2c755626/ratelimit_whl_copy-2.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95a6444dae1e1d44adc00860e656edd02dd4ee631a689088b817297c2c755626",
        "md5": "28ba196ba4b2e21766cf9c31a3b69d37",
        "sha256": "467e602299b73056cb5c67aa15620d6a174c609508a188d7f739cf52b8a8ab60"
      },
      "downloads": -1,
      "filename": "ratelimit_whl_copy-2.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "28ba196ba4b2e21766cf9c31a3b69d37",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 6268,
      "upload_time": "2023-03-03T18:31:29",
      "upload_time_iso_8601": "2023-03-03T18:31:29.813997Z",
      "url": "https://files.pythonhosted.org/packages/95/a6/444dae1e1d44adc00860e656edd02dd4ee631a689088b817297c2c755626/ratelimit_whl_copy-2.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}