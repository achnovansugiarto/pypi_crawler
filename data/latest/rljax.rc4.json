{
  "info": {
    "author": "Toshiki Watanabe",
    "author_email": "watanabe.toshiki@outlook.jp",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n**WARNING: Rljax is currently in a beta version and being actively improved. Any contributions are welcome :)**\n\n# Rljax\nRljax is a collection of RL algorithms written in JAX.\n\n## Setup\nYou can install dependencies simply by executing the following. To use GPUs, CUDA (10.0, 10.1, 10.2 or 11.0) must be installed.\n```bash\npip install https://storage.googleapis.com/jax-releases/`nvcc -V | sed -En \"s/.* release ([0-9]*)\\.([0-9]*),.*/cuda\\1\\2/p\"`/jaxlib-0.1.55-`python3 -V | sed -En \"s/Python ([0-9]*)\\.([0-9]*).*/cp\\1\\2/p\"`-none-manylinux2010_x86_64.whl jax==0.2.0\npip install -e .\n```\n\nIf you don't have a GPU, please execute the following instead.\n```bash\npip install jaxlib==0.1.55 jax==0.2.0\npip install -e .\n```\n\nIf you want to use a [MuJoCo](http://mujoco.org/) physics engine, please install [mujoco-py](https://github.com/openai/mujoco-py).\n```bash\npip install mujoco_py==2.0.2.11\n```\n\n## Algorithm\nCurrently, following algorithms have been implemented.\n\n|**Algorithm**|**Action**|**Vector State**|**Pixel State**|**PER**[[11]](#reference)|**D2RL**[[15]](#reference)|\n| :--         | :--      | :--:           | :--:          | :--:                    |:--:                      |\n| PPO[[1]](#reference)        | Continuous | :heavy_check_mark: | - | -                  | -                  |\n| DDPG[[2]](#reference)       | Continuous | :heavy_check_mark: | - | :heavy_check_mark: | :heavy_check_mark: |\n| TD3[[3]](#reference)        | Continuous | :heavy_check_mark: | - | :heavy_check_mark: | :heavy_check_mark: |\n| SAC[[4,5]](#reference)      | Continuous | :heavy_check_mark: | - | :heavy_check_mark: | :heavy_check_mark: |\n| SAC+DisCor[[12]](#reference)| Continuous | :heavy_check_mark: | - | -                  | :heavy_check_mark: |\n| TQC[[16]](#reference)       | Continuous | :heavy_check_mark: | - | :heavy_check_mark: | :heavy_check_mark: |\n| SAC+AE[[13]](#reference)    | Continuous | - | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| SLAC[[14]](#reference)      | Continuous | - | :heavy_check_mark: | -                  | :heavy_check_mark: |\n| DQN[[6]](#reference)          | Discrete   | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | - |\n| QR-DQN[[7]](#reference)       | Discrete   | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | - |\n| IQN[[8]](#reference)          | Discrete   | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | - |\n| FQF[[9]](#reference)          | Discrete   | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | - |\n| SAC-Discrete[[10]](#reference)| Discrete   | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | - |\n\n## Example\nAll algorithms can be trained in a few lines of code.\n\n<details>\n<summary>Getting started</summary>\n\nHere is a quick example of how to train DQN on `CartPole-v0`.\n\n```Python\nimport gym\n\nfrom rljax.algorithm import DQN\nfrom rljax.trainer import Trainer\n\nNUM_AGENT_STEPS = 20000\nSEED = 0\n\nenv = gym.make(\"CartPole-v0\")\nenv_test = gym.make(\"CartPole-v0\")\n\nalgo = DQN(\n    num_agent_steps=NUM_AGENT_STEPS,\n    state_space=env.observation_space,\n    action_space=env.action_space,\n    seed=SEED,\n    batch_size=256,\n    start_steps=1000,\n    update_interval=1,\n    update_interval_target=400,\n    eps_decay_steps=0,\n    loss_type=\"l2\",\n    lr=1e-3,\n)\n\ntrainer = Trainer(\n    env=env,\n    env_test=env_test,\n    algo=algo,\n    log_dir=\"/tmp/rljax/dqn\",\n    num_agent_steps=NUM_AGENT_STEPS,\n    eval_interval=1000,\n    seed=SEED,\n)\ntrainer.train()\n```\n\n</details>\n\n<details>\n<summary>MuJoCo(Gym)</summary>\n\nI benchmarked my implementations in some environments from MuJoCo's `-v3` task suite, following [Spinning Up's benchmarks](https://spinningup.openai.com/en/latest/spinningup/bench.html) ([code](https://github.com/ku2482/rljax/blob/master/examples/mujoco)). In TQC, I set num_quantiles_to_drop to 0 for HalfCheetath-v3 and 2 for other environments. Note that I benchmarked with 3M agent steps, not 5M agent steps as in TQC's paper.\n\n<img src=\"https://user-images.githubusercontent.com/37267851/97766058-2d89a700-1b58-11eb-9266-29c3605f7d6c.png\" title=\"HalfCheetah-v3\" width=400><img src=\"https://user-images.githubusercontent.com/37267851/97766061-2e223d80-1b58-11eb-94a0-44efb7e5d9b7.png\" title=\"Walker2d-v3\" width=400>\n<img src=\"https://user-images.githubusercontent.com/37267851/97766056-2c587a00-1b58-11eb-9844-d704657857f8.png\" title=\"Swimmer-v3\" width=400><img src=\"https://user-images.githubusercontent.com/37267851/97766062-2ebad400-1b58-11eb-8cf1-6d3bd338c414.png\" title=\"Ant-v3\" width=400>\n\n</details>\n\n<details>\n<summary>DeepMind Control Suite</summary>\n\nI benchmarked SAC+AE and SLAC implementations in some environments from DeepMind Control Suite ([code](https://github.com/ku2482/rljax/blob/master/examples/dm_control)). Note that the horizontal axis represents the environment step, which is obtained by multiplying agent_step by action_repeat. I set action_repeat to 4 for cheetah-run and 2 for walker-walk.\n\n<img src=\"https://user-images.githubusercontent.com/37267851/97359828-b7c7d600-18e0-11eb-8c79-852624dfa1e8.png\" title=\"cheetah-run\" width=400><img src=\"https://user-images.githubusercontent.com/37267851/97359825-b696a900-18e0-11eb-88e2-b532076de7e8.png\" title=\"walker-walk\" width=400>\n\n</details>\n\n<details>\n<summary>Atari(Arcade Learning Environment)</summary>\n\nI benchmarked SAC-Discrete implementation in `MsPacmanNoFrameskip-v4` from the Arcade Learning Environment(ALE) ([code](https://github.com/ku2482/rljax/blob/master/examples/atari)). Note that the horizontal axis represents the environment step, which is obtained by multiplying agent_step by 4.\n\n<img src=\"https://user-images.githubusercontent.com/37267851/97410160-0e193100-1942-11eb-8056-df445eb6f5e9.png\" title=\"MsPacmanNoFrameskip-v4\" width=400>\n\n</details>\n\n## Reference\n[[1]](https://arxiv.org/abs/1707.06347) Schulman, John, et al. \"Proximal policy optimization algorithms.\" arXiv preprint arXiv:1707.06347 (2017).\n\n[[2]](https://arxiv.org/abs/1509.02971) Lillicrap, Timothy P., et al. \"Continuous control with deep reinforcement learning.\" arXiv preprint arXiv:1509.02971 (2015).\n\n[[3]](https://arxiv.org/abs/1802.09477) Fujimoto, Scott, Herke Van Hoof, and David Meger. \"Addressing function approximation error in actor-critic methods.\" arXiv preprint arXiv:1802.09477 (2018).\n\n[[4]](https://arxiv.org/abs/1801.01290) Haarnoja, Tuomas, et al. \"Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor.\" arXiv preprint arXiv:1801.01290 (2018).\n\n[[5]](https://arxiv.org/abs/1812.05905) Haarnoja, Tuomas, et al. \"Soft actor-critic algorithms and applications.\" arXiv preprint arXiv:1812.05905 (2018).\n\n[[6]](https://www.nature.com/articles/nature14236?wm=book_wap_0005) Mnih, Volodymyr, et al. \"Human-level control through deep reinforcement learning.\" nature 518.7540 (2015): 529-533.\n\n[[7]](https://arxiv.org/abs/1710.10044) Dabney, Will, et al. \"Distributional reinforcement learning with quantile regression.\" Thirty-Second AAAI Conference on Artificial Intelligence. 2018.\n\n[[8]](https://arxiv.org/abs/1806.06923) Dabney, Will, et al. \"Implicit quantile networks for distributional reinforcement learning.\" arXiv preprint. 2018.\n\n[[9]](https://arxiv.org/abs/1911.02140) Yang, Derek, et al. \"Fully Parameterized Quantile Function for Distributional Reinforcement Learning.\" Advances in Neural Information Processing Systems. 2019.\n\n[[10]](https://arxiv.org/abs/1910.07207) Christodoulou, Petros. \"Soft Actor-Critic for Discrete Action Settings.\" arXiv preprint arXiv:1910.07207 (2019).\n\n[[11]](https://arxiv.org/abs/1511.05952) Schaul, Tom, et al. \"Prioritized experience replay.\" arXiv preprint arXiv:1511.05952 (2015).\n\n[[12]](https://arxiv.org/abs/2003.07305) Kumar, Aviral, Abhishek Gupta, and Sergey Levine. \"Discor: Corrective feedback in reinforcement learning via distribution correction.\" arXiv preprint arXiv:2003.07305 (2020).\n\n[[13]](https://arxiv.org/abs/1910.01741) Yarats, Denis, et al. \"Improving sample efficiency in model-free reinforcement learning from images.\" arXiv preprint arXiv:1910.01741 (2019).\n\n[[14]](https://arxiv.org/abs/1907.00953) Lee, Alex X., et al. \"Stochastic latent actor-critic: Deep reinforcement learning with a latent variable model.\" arXiv preprint arXiv:1907.00953 (2019).\n\n[[15]](https://arxiv.org/abs/2010.09163) Sinha, Samarth, et al. \"D2RL: Deep Dense Architectures in Reinforcement Learning.\" arXiv preprint arXiv:2010.09163 (2020).\n\n[[16]](https://arxiv.org/abs/2005.04269) Kuznetsov, Arsenii, et al. \"Controlling Overestimation Bias with Truncated Mixture of Continuous Distributional Quantile Critics.\" arXiv preprint arXiv:2005.04269 (2020).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ku2482/rljax",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rljax",
    "package_url": "https://pypi.org/project/rljax/",
    "platform": "",
    "project_url": "https://pypi.org/project/rljax/",
    "project_urls": {
      "Homepage": "https://github.com/ku2482/rljax"
    },
    "release_url": "https://pypi.org/project/rljax/0.0.4/",
    "requires_dist": [
      "pyyaml (==5.3.1)",
      "tqdm (==4.48.2)",
      "numpy (==1.19.2)",
      "pandas (==1.1.2)",
      "dm-haiku (==0.0.2)",
      "gym[atari] (==0.17.2)",
      "dm-control (==0.0.322773188)",
      "tensorboardX (==2.1)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A collection of RL algorithms written in JAX.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8549969,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c2c6cd2bce8c9382d620b6944defcd700277d938152c9cf38461779eafd51a9",
          "md5": "45e54b6c5da7c8b67c37bebe82728613",
          "sha256": "828fa0c5690804aebdde6e708f52fd28d5b8a9eef9675d99454a8795c908acb1"
        },
        "downloads": -1,
        "filename": "rljax-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45e54b6c5da7c8b67c37bebe82728613",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 26370,
        "upload_time": "2020-09-26T10:52:07",
        "upload_time_iso_8601": "2020-09-26T10:52:07.094785Z",
        "url": "https://files.pythonhosted.org/packages/5c/2c/6cd2bce8c9382d620b6944defcd700277d938152c9cf38461779eafd51a9/rljax-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e9e196ef8320fed5bbbfb89a777cd988c60011bf223906007ac6dec46de1ab9",
          "md5": "16c0f9554f02a8a87dbc6ce4a79bcc75",
          "sha256": "ba108406f4bb98746b549bce60884daebb225ddd3338d1b19ccd7840c304d468"
        },
        "downloads": -1,
        "filename": "rljax-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "16c0f9554f02a8a87dbc6ce4a79bcc75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 16677,
        "upload_time": "2020-09-26T10:52:09",
        "upload_time_iso_8601": "2020-09-26T10:52:09.401923Z",
        "url": "https://files.pythonhosted.org/packages/3e/9e/196ef8320fed5bbbfb89a777cd988c60011bf223906007ac6dec46de1ab9/rljax-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "900783bdf11ef1e0b9004a9bcccccb8157c82f9e93050b49172c0aed3a91e665",
          "md5": "b67e43481921ba0b64bfab974f054d9e",
          "sha256": "e586b6a623c93c39549be98cfa7124edb814fe7bef7d0167f6ca0c70e64fe2e7"
        },
        "downloads": -1,
        "filename": "rljax-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b67e43481921ba0b64bfab974f054d9e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 46543,
        "upload_time": "2020-09-26T22:48:12",
        "upload_time_iso_8601": "2020-09-26T22:48:12.734020Z",
        "url": "https://files.pythonhosted.org/packages/90/07/83bdf11ef1e0b9004a9bcccccb8157c82f9e93050b49172c0aed3a91e665/rljax-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93079e1742195302204b9b5f942ccb6f13fc3d12e89d8561e3bf471e34fd90b9",
          "md5": "bd48c2fc6e58d0d69e7da8439f7f918b",
          "sha256": "0612f1b82e652fe603ef15e649faf7315e2b143008ddfa283b7394e4ccbb233a"
        },
        "downloads": -1,
        "filename": "rljax-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bd48c2fc6e58d0d69e7da8439f7f918b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 15407,
        "upload_time": "2020-09-26T22:48:14",
        "upload_time_iso_8601": "2020-09-26T22:48:14.198704Z",
        "url": "https://files.pythonhosted.org/packages/93/07/9e1742195302204b9b5f942ccb6f13fc3d12e89d8561e3bf471e34fd90b9/rljax-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f88b4b892761ecff34ce28f5e77ef81639a3bce855e7865e15657dfb4daeb50e",
          "md5": "9fc3bd7742936f9af043f086628809e2",
          "sha256": "86318872b08676d6ae1bcb42f4648fc5fd29566c6dc26cbbc9b252a3f25d6248"
        },
        "downloads": -1,
        "filename": "rljax-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fc3bd7742936f9af043f086628809e2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 88646,
        "upload_time": "2020-10-31T05:07:57",
        "upload_time_iso_8601": "2020-10-31T05:07:57.999841Z",
        "url": "https://files.pythonhosted.org/packages/f8/8b/4b892761ecff34ce28f5e77ef81639a3bce855e7865e15657dfb4daeb50e/rljax-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1463236d68372001591333a547a107229ef3b858abd1ab76764c2a88b8bab63a",
          "md5": "105821df282f9322b063a60ece3d7606",
          "sha256": "f017f16c8b4c2de07a1ce3f1a629c5b60a3e452b58209115eed667275f9f827c"
        },
        "downloads": -1,
        "filename": "rljax-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "105821df282f9322b063a60ece3d7606",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 40671,
        "upload_time": "2020-10-31T05:07:59",
        "upload_time_iso_8601": "2020-10-31T05:07:59.768510Z",
        "url": "https://files.pythonhosted.org/packages/14/63/236d68372001591333a547a107229ef3b858abd1ab76764c2a88b8bab63a/rljax-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "176fde1ca717ee25f176cf28ba3b9f8f8f6afc233fb62045c569eece7e452de1",
          "md5": "2358ab5228f7a7603ebfb2234bbc2d0b",
          "sha256": "532d8217c9a4fe4031b9091b9ee76cd0b3b978e5605c7a33bae72ab6a0787cd1"
        },
        "downloads": -1,
        "filename": "rljax-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2358ab5228f7a7603ebfb2234bbc2d0b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 88661,
        "upload_time": "2020-10-31T17:14:24",
        "upload_time_iso_8601": "2020-10-31T17:14:24.446944Z",
        "url": "https://files.pythonhosted.org/packages/17/6f/de1ca717ee25f176cf28ba3b9f8f8f6afc233fb62045c569eece7e452de1/rljax-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1a36b5b4c102c10f7eeb1fa036ec603e1fc99825150c7d42b8680d8c58f3ce3",
          "md5": "97d4cbb4c7f0feb23edc09ee13bad1d9",
          "sha256": "4a88be9f145dcaa22e00546beca92bc47c9ee469dfef1a134937f7256b65034b"
        },
        "downloads": -1,
        "filename": "rljax-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "97d4cbb4c7f0feb23edc09ee13bad1d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 40736,
        "upload_time": "2020-10-31T17:14:26",
        "upload_time_iso_8601": "2020-10-31T17:14:26.442784Z",
        "url": "https://files.pythonhosted.org/packages/c1/a3/6b5b4c102c10f7eeb1fa036ec603e1fc99825150c7d42b8680d8c58f3ce3/rljax-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "176fde1ca717ee25f176cf28ba3b9f8f8f6afc233fb62045c569eece7e452de1",
        "md5": "2358ab5228f7a7603ebfb2234bbc2d0b",
        "sha256": "532d8217c9a4fe4031b9091b9ee76cd0b3b978e5605c7a33bae72ab6a0787cd1"
      },
      "downloads": -1,
      "filename": "rljax-0.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2358ab5228f7a7603ebfb2234bbc2d0b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 88661,
      "upload_time": "2020-10-31T17:14:24",
      "upload_time_iso_8601": "2020-10-31T17:14:24.446944Z",
      "url": "https://files.pythonhosted.org/packages/17/6f/de1ca717ee25f176cf28ba3b9f8f8f6afc233fb62045c569eece7e452de1/rljax-0.0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1a36b5b4c102c10f7eeb1fa036ec603e1fc99825150c7d42b8680d8c58f3ce3",
        "md5": "97d4cbb4c7f0feb23edc09ee13bad1d9",
        "sha256": "4a88be9f145dcaa22e00546beca92bc47c9ee469dfef1a134937f7256b65034b"
      },
      "downloads": -1,
      "filename": "rljax-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "97d4cbb4c7f0feb23edc09ee13bad1d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 40736,
      "upload_time": "2020-10-31T17:14:26",
      "upload_time_iso_8601": "2020-10-31T17:14:26.442784Z",
      "url": "https://files.pythonhosted.org/packages/c1/a3/6b5b4c102c10f7eeb1fa036ec603e1fc99825150c7d42b8680d8c58f3ce3/rljax-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}