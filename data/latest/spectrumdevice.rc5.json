{
  "info": {
    "author": "Christian Baker, Francois Joubert",
    "author_email": "christian.baker@kcl.ac.uk,",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Typing :: Typed"
    ],
    "description": "# spectrumdevice\nA high-level, object-oriented Python library for controlling Spectrum Instrumentation digitisers.\n\n`spectrumdevice` can connect to individual digitisers or \n[StarHubs](https://spectrum-instrumentation.com/en/m4i-star-hub) (e.g. the\n[NetBox](https://spectrum-instrumentation.com/en/digitizernetbox)). `spectrumdevice` provides two classes \n`SpectrumCard` and `SpectrumStarHub` for controlling and receiving data from individual digitisers and StarHubs \nrespectively.\n\n`spectrumdevice` currently supports 'Standard Single' and 'Multi FIFO' acquisition modes. See the Limitations section for \nmore information.\n\n`spectrumdevice` includes mock classes for testing software without drivers installed or hardware connected.\n\n* [Examples](https://github.com/KCL-BMEIS/spectrumdevice/tree/main/example_scripts)\n* [API reference documentation](https://kcl-bmeis.github.io/spectrumdevice/)\n* [PyPI](https://pypi.org/project/spectrumdevice/)\n\n## Requirements\n`spectrumdevice` works with hardware on Windows and Linux. Spectrum do not currently provide a hardware driver for \nmacOS, but `spectrumdevice` provides mock classes for development and testing without hardware, which work on macOS.\n\nTo work with hardware, `spectrumdevice` requires that you have installed the\n[Spectrum driver](https://spectrum-instrumentation.com/en/drivers-and-examples-overview) for your platform.\nOn Windows, this should be located at `c:\\windows\\system32\\spcm_win64.dll` (or `spcm_win32.dll` on a 32-bit system). On\nLinux, it will be called `libspcm_linux.so`. If no driver is present `spectrumdevice` can still run in mock mode.\n\n## Installation and dependencies\nTo install the latest release using `pip`:\n```\npip install spectrumdevice\n```\nTo install the latest release using `conda`:\n```\nconda install -c conda-forge spectrumdevice\n```\n\nTo install the development version:\n```\npip install https://github.com/KCL-BMEIS/spectrumdevice/tarball/main.\n```\n\n`spectrumdevice` depends only on NumPy. `spectrumdevice` includes a module called `spectrum_gmbh` containing a few \nfiles taken from the `spcm_examples` directory, provided with Spectrum hardware. The files in this module were written by Spectrum GMBH and are included with their permission. The files provide `spectrumdevice` with a low-level Python interface to the Spectrum driver and define global constants which are used throughout `spectrumdevice`.\n\n## Limitations\n* Currently, `spectrumdevice` only supports Standard Single and Multi FIFO acquisition modes. See the \n  Spectrum documentation for more information.\n* When defining a transfer buffer - the software buffer into which samples are transferred from a hardware device - \n  the notify-size is automatically set equal to the buffer length. This works fine for most situations. See the \n  Spectrum documentation for more information.\n* If timestamping is enabled, timestamps are acquired using Spectrum's 'polling' mode. This seems to add around\n  5 to 10 ms of latency to the acquisition.\n* Only current digitisers from the [59xx](https://spectrum-instrumentation.com/de/59xx-16-bit-digitizer-125-mss),\n[44xx](https://spectrum-instrumentation.com/de/44xx-1416-bit-digitizers-500-mss) and \n[22xx](https://spectrum-instrumentation.com/de/22xx-8-bit-digitizers-5-gss) families are currently supported, and \n`spectrumdevice` has only been tested on 59xx devices. However, `spectrumdevice` may work fine on older devices. If \nyou've tried `spectrumdevice` on an older device, please let us know if it works and raise any issues you encounter in\nthe issue tracker. It's likely possible to add support with minimal effort.\n\n## Usage\n### Connect to devices\nConnect to local (PCIe) cards:\n\n```python\nfrom spectrumdevice import SpectrumCard\n\ncard_0 = SpectrumCard(device_number=0)\ncard_1 = SpectrumCard(device_number=1)\n```\nConnect to networked cards (you can find a card's IP using the\n[Spectrum Control Centre](https://spectrum-instrumentation.com/en/spectrum-control-center) software):\n\n```python\nfrom spectrumdevice import SpectrumCard\n\ncard_0 = SpectrumCard(device_number=0, ip_address=\"192.168.0.2\")\ncard_1 = SpectrumCard(device_number=1, ip_address=\"192.168.0.3\")\n```\n\nConnect to a networked StarHub (e.g. a NetBox).\n\n```python\nfrom spectrumdevice import SpectrumCard, SpectrumStarHub\n\nNUM_CARDS_IN_STAR_HUB = 2\nSTAR_HUB_MASTER_CARD_INDEX = 1  # The card controlling the clock\nHUB_IP_ADDRESS = \"192.168.0.2\"\n\n# Connect to each card in the hub.\nchild_cards = []\nfor n in range(NUM_CARDS_IN_STAR_HUB):\n  child_cards.append(SpectrumCard(device_number=n, ip_address=HUB_IP_ADDRESS))\n\n# Connect to the hub itself\nhub = SpectrumStarHub(device_number=0, child_cards=child_cards,\n                      master_card_index=STAR_HUB_MASTER_CARD_INDEX)\n```\nOnce connected, a `SpectrumStarHub` object can be configured and used in exactly the same way as a `SpectrumCard` \nobject â€” commands will be sent to the child cards automatically.\n\n### Using Mock Devices\nYou can use mock devices to test your software without hardware connected or drivers installed. \nAfter construction, Mock devices have the same interface as real devices. They provide random waveforms generated \nby an internal mock data source. The number of channels and modules in a mock card must be provided on \nconstruction as shown below. You can match these values to your hardware by inspecting the number of channels and \nmodules in a hardware device using the\n[Spectrum Control Centre](https://spectrum-instrumentation.com/en/spectrum-control-center) software. The frame rate \nof the mock data source must also be set on construction.\n\n```python\nfrom spectrumdevice import MockSpectrumCard, MockSpectrumStarHub\nfrom spectrumdevice.settings import CardType\n\nmock_card = MockSpectrumCard(device_number=0, card_type=CardType.TYP_M2P5966_X4, mock_source_frame_rate_hz=10.0, \n                             num_modules=2, num_channels_per_module=4)\nmock_hub = MockSpectrumStarHub(device_number=0, child_cards=[mock_card], master_card_index=0)\n```\nAfter construction, `MockSpectrumCard` and `MockSpectrumStarHub` can be used identically to `SpectrumCard` \nand `SpectrumStarHub`.\n\n### Configuring device settings\n`SpectrumCard` and `SpectrumStarHub` provide methods for reading and writing device settings located within \non-device registers. Some settings must be set using Enums imported from the `settings` module. Others are set using \nintegers. For example, to put a card in 'Standard Single' acquisition mode and set the sample rate to 10 MHz:\n\n```python\nfrom spectrumdevice import SpectrumCard\nfrom spectrumdevice.settings import AcquisitionMode\n\ncard = SpectrumCard(device_number=0)\ncard.set_acquisition_mode(AcquisitionMode.SPC_REC_STD_SINGLE)\ncard.set_sample_rate_in_hz(10000000)\n```\nand to print the currently set sample rate:\n\n```python\nprint(card.sample_rate_in_hz)\n```\n\n### Configuring channel settings\nThe channels available to a spectrum device (card or StarHub) can be accessed via the `channels` property. This \nproperty contains a list of `SpectrumChannel` objects which provide methods for independently configuring each channel. \nFor example, to change the vertical range of channel 2 of a card to 1V:\n\n```python\ncard.channels[2].set_vertical_range_in_mv(1000)\n```\nand then print the vertical offset:\n```python\nprint(card.channels[2].vertical_offset_in_percent)\n```\n\n### Configuring everything at once\nYou can set multiple settings at once using the `TriggerSettings` and `AcquisitionSettings` dataclasses and the \n`configure_trigger()` and `configure_acquisition()` methods:\n\n```python\nfrom spectrumdevice.settings import TriggerSettings, AcquisitionSettings, TriggerSource, ExternalTriggerMode,\n  AcquisitionMode\n\ntrigger_settings = TriggerSettings(\n  trigger_sources=[TriggerSource.SPC_TMASK_EXT0],\n  external_trigger_mode=ExternalTriggerMode.SPC_TM_POS,\n  external_trigger_level_in_mv=1000,\n)\n\nacquisition_settings = AcquisitionSettings(\n  acquisition_mode=AcquisitionMode.SPC_REC_FIFO_MULTI,\n  sample_rate_in_hz=40000000,\n  acquisition_length_in_samples=400,\n  pre_trigger_length_in_samples=0,\n  timeout_in_ms=1000,\n  enabled_channels=[0, 1, 2, 3],\n  vertical_ranges_in_mv=[200, 200, 200, 200],\n  vertical_offsets_in_percent=[0, 0, 0, 0],\n  timestamping_enabled=True\n)\n\ncard.configure_trigger(trigger_settings)\ncard.configure_acquisition(acquisition_settings)\n```\n\n### Acquiring waveforms (standard single mode)\nTo acquire data in standard single mode, place the device into the correct mode using `configure_acquisition()` or `\ncard.set_acquisition_mode(AcquisitionMode.SPC_REC_STD_SINGLE)` and then execute the acquisition:\n```python\nmeasurement = card.execute_standard_single_acquisition()\n```\n`measurement` is a `Measurement` dataclass containing the waveforms received by each enabled channel and, if \ntimestamping was enabled in the `AcquisitionSettings`, the time at which the acquisition was triggered:\n```python\nwaveforms = measurement.waveforms  # A list of 1D numpy arrays\ntimestamp = measurement.timestamp  # A datetime.datetime object\n```\n\n### Acquiring waveforms (multi FIFO mode)\nTo acquire data in multi FIFO mode, place the device into the correct mode using `configure_acquisition()` or `\ncard.set_acquisition_mode(AcquisitionMode.SPC_REC_FIFO_MULTI)`.\n\nYou can then carry out a predefined number of Multi FIFO measurements like this:\n```python\nNUM_MEASUREMENTS = 2\nmeasurements = card.execute_finite_multi_fifo_acquisition(NUM_MEASUREMENTS)\n```\n`measurements` will be a list of `Measurement` dataclasses (of length `NUM_MEASUREMENTS`), where each \n`Measurement` object contains the waveforms received by each enabled channel during a measurement.\n\nAlternatively, you can start a Multi FIFO acquisition continuously writing data to a software 'transfer' buffer:\n```python\ncard.execute_continuous_multi_fifo_acquisition()\n```\nBut you'll then need to pull the data out of the transfer buffer at least as fast as the data is being acquired,\nmanually obtaining the waveforms and timestamp:\n```python\nmeasurements_list = []\nwhile True:\n    measurements_list.append(Measurement(waveforms=card.get_waveforms(),\n                                         timestamp=card.get_timestamp()))\n```\nEach call to `get_waveforms()` will wait until the next set of waveform data is available. When ready, you'll need \nto stop the acquisition:\n```python\ncard.stop_acquisition()\n```\nand execute some logic to exit the `while` loop.\n\n## Examples\nSee the `example_scripts` directory.\n\n## API Documentation\n\nSee [here](https://kcl-bmeis.github.io/spectrumdevice/) for documentation for the complete API.\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KCL-BMEIS/spectrumdevice",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spectrumdevice",
    "package_url": "https://pypi.org/project/spectrumdevice/",
    "platform": null,
    "project_url": "https://pypi.org/project/spectrumdevice/",
    "project_urls": {
      "Documentation": "https://kcl-bmeis.github.io/spectrumdevice/",
      "Homepage": "https://github.com/KCL-BMEIS/spectrumdevice",
      "Source": "https://github.com/KCL-BMEIS/spectrumdevice",
      "Tracker": "https://github.com/KCL-BMEIS/spectrumdevice/issues"
    },
    "release_url": "https://pypi.org/project/spectrumdevice/0.2.0/",
    "requires_dist": [
      "numpy (>=1.21.4)",
      "flake8 (==4.0) ; extra == 'dev'",
      "flake8-bugbear (==21.9.2) ; extra == 'dev'",
      "black (==22.1.0) ; extra == 'dev'",
      "mypy (==0.931) ; extra == 'dev'",
      "pdoc (==8.0.1) ; extra == 'doc'",
      "matplotlib (>=3.5.0) ; extra == 'examples'",
      "pytest (==6.2.5) ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "A high-level, object-oriented Python library for controlling Spectrum Instrumentation digitisers",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13268471,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "512ba58c7c532db775c1d95a447d094f754a34b7a8112a8d2afb6cf555405ebb",
          "md5": "b0918e1d659adb115def612aa3b2916f",
          "sha256": "4d766a8ad05bfd7d8c7707104a2d93cc6771503f569322d1ecca091e15a001ca"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0918e1d659adb115def612aa3b2916f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 69724,
        "upload_time": "2022-01-08T19:36:46",
        "upload_time_iso_8601": "2022-01-08T19:36:46.911918Z",
        "url": "https://files.pythonhosted.org/packages/51/2b/a58c7c532db775c1d95a447d094f754a34b7a8112a8d2afb6cf555405ebb/spectrumdevice-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9e77cff465e6c82f74c95077d5cdce27ec11cec628f4b4ec15079843563d0a6",
          "md5": "ad894438c80e534f8bb012d8253c6063",
          "sha256": "d1223bb0e92b4e28e0c789208c8083972a736c871ab5726c9fe8218fd8748440"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ad894438c80e534f8bb012d8253c6063",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 73140,
        "upload_time": "2022-01-08T19:36:48",
        "upload_time_iso_8601": "2022-01-08T19:36:48.565394Z",
        "url": "https://files.pythonhosted.org/packages/a9/e7/7cff465e6c82f74c95077d5cdce27ec11cec628f4b4ec15079843563d0a6/spectrumdevice-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "335588e0e35237bfc183b896fcfaf01051d5c4709b5f797e65e3bf6e41b0f740",
          "md5": "8e0ee609fb73a5ce81ab95f3fed21c19",
          "sha256": "021374e758736e3cc1514937b13e3a5d0efe58582638823751f9380324591b75"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e0ee609fb73a5ce81ab95f3fed21c19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76410,
        "upload_time": "2022-01-11T15:37:22",
        "upload_time_iso_8601": "2022-01-11T15:37:22.341248Z",
        "url": "https://files.pythonhosted.org/packages/33/55/88e0e35237bfc183b896fcfaf01051d5c4709b5f797e65e3bf6e41b0f740/spectrumdevice-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c4183f4751ad276227709532ce6070ecf42904ea6d46682f9d3568d19bc66a0",
          "md5": "be32265d945f0fbcaac4b77bb527d46b",
          "sha256": "77a35e9b6a4deca9e26714714416dd109001379570bceae5b0c7d3685d707e17"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "be32265d945f0fbcaac4b77bb527d46b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 77066,
        "upload_time": "2022-01-11T15:37:23",
        "upload_time_iso_8601": "2022-01-11T15:37:23.545153Z",
        "url": "https://files.pythonhosted.org/packages/0c/41/83f4751ad276227709532ce6070ecf42904ea6d46682f9d3568d19bc66a0/spectrumdevice-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22149d4fde9146c4529eb1920b419fd34230f3288bf383c49a3eb0754dd42e03",
          "md5": "65225a0303a73966325595ecbfe533f6",
          "sha256": "0d5d9eab26478705da61e05de73a787f437ef4fe373ccb6abea82cec7b3aa930"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65225a0303a73966325595ecbfe533f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 71577,
        "upload_time": "2022-01-12T11:54:00",
        "upload_time_iso_8601": "2022-01-12T11:54:00.004478Z",
        "url": "https://files.pythonhosted.org/packages/22/14/9d4fde9146c4529eb1920b419fd34230f3288bf383c49a3eb0754dd42e03/spectrumdevice-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1045c094ed2c2f835aa872c2bb9fa601a34ff383788d057701376cd657d0a63",
          "md5": "0c2fcb2a5620a0d43a2255155344cc5e",
          "sha256": "ffc7519468f721d5da36feb59692d8d894a2b297d0d4ade7528aa4899c2d218c"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0c2fcb2a5620a0d43a2255155344cc5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 75018,
        "upload_time": "2022-01-12T11:54:01",
        "upload_time_iso_8601": "2022-01-12T11:54:01.550166Z",
        "url": "https://files.pythonhosted.org/packages/f1/04/5c094ed2c2f835aa872c2bb9fa601a34ff383788d057701376cd657d0a63/spectrumdevice-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ee7f4f4c969bbb92139eb78a5a129e04e5dcd6366fca3d1e6e2d35fe9a00879",
          "md5": "240100eb0837f15971739dfa229a6c42",
          "sha256": "304887a4ed23325494b876790a1529327ca184a57b2494eff71f70ea430a46eb"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "240100eb0837f15971739dfa229a6c42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 71872,
        "upload_time": "2022-01-13T10:55:06",
        "upload_time_iso_8601": "2022-01-13T10:55:06.145569Z",
        "url": "https://files.pythonhosted.org/packages/7e/e7/f4f4c969bbb92139eb78a5a129e04e5dcd6366fca3d1e6e2d35fe9a00879/spectrumdevice-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a756d16a6c25c5bf84a1407c576974d411eae2546fa0fbcc75b1d79b6822552b",
          "md5": "e97a283a16291fc919bc71c21329bd6d",
          "sha256": "476e3c5c488b72ecead2ef51e9beb3e2dbfa56318d2b68b7f3eccb621e1a61eb"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e97a283a16291fc919bc71c21329bd6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 75059,
        "upload_time": "2022-01-13T10:55:07",
        "upload_time_iso_8601": "2022-01-13T10:55:07.646360Z",
        "url": "https://files.pythonhosted.org/packages/a7/56/d16a6c25c5bf84a1407c576974d411eae2546fa0fbcc75b1d79b6822552b/spectrumdevice-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91df9b990fb186f4043f6bf6cc0bd818ba4ec788b61046045a6976bb59e4affe",
          "md5": "ea8de6d9c24db47f7b7544d5f8800fdf",
          "sha256": "4130c2c1ebeebf9be42a0e490987a632f194df0a170759aa4b470b13f4477015"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea8de6d9c24db47f7b7544d5f8800fdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 77255,
        "upload_time": "2022-03-23T12:31:01",
        "upload_time_iso_8601": "2022-03-23T12:31:01.392966Z",
        "url": "https://files.pythonhosted.org/packages/91/df/9b990fb186f4043f6bf6cc0bd818ba4ec788b61046045a6976bb59e4affe/spectrumdevice-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d7763a7b6c8deab519e015881002fbfde670c5096755df14f5bfc156b449ced",
          "md5": "050f0ddfc1cbe33fb4e414dddc806a89",
          "sha256": "6e1a088314bb05f771a20709362c8c4ce02fa6dfc8833e7cca7b9ee1a8dc3e51"
        },
        "downloads": -1,
        "filename": "spectrumdevice-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "050f0ddfc1cbe33fb4e414dddc806a89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 79461,
        "upload_time": "2022-03-23T12:31:02",
        "upload_time_iso_8601": "2022-03-23T12:31:02.532883Z",
        "url": "https://files.pythonhosted.org/packages/2d/77/63a7b6c8deab519e015881002fbfde670c5096755df14f5bfc156b449ced/spectrumdevice-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91df9b990fb186f4043f6bf6cc0bd818ba4ec788b61046045a6976bb59e4affe",
        "md5": "ea8de6d9c24db47f7b7544d5f8800fdf",
        "sha256": "4130c2c1ebeebf9be42a0e490987a632f194df0a170759aa4b470b13f4477015"
      },
      "downloads": -1,
      "filename": "spectrumdevice-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea8de6d9c24db47f7b7544d5f8800fdf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 77255,
      "upload_time": "2022-03-23T12:31:01",
      "upload_time_iso_8601": "2022-03-23T12:31:01.392966Z",
      "url": "https://files.pythonhosted.org/packages/91/df/9b990fb186f4043f6bf6cc0bd818ba4ec788b61046045a6976bb59e4affe/spectrumdevice-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d7763a7b6c8deab519e015881002fbfde670c5096755df14f5bfc156b449ced",
        "md5": "050f0ddfc1cbe33fb4e414dddc806a89",
        "sha256": "6e1a088314bb05f771a20709362c8c4ce02fa6dfc8833e7cca7b9ee1a8dc3e51"
      },
      "downloads": -1,
      "filename": "spectrumdevice-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "050f0ddfc1cbe33fb4e414dddc806a89",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 79461,
      "upload_time": "2022-03-23T12:31:02",
      "upload_time_iso_8601": "2022-03-23T12:31:02.532883Z",
      "url": "https://files.pythonhosted.org/packages/2d/77/63a7b6c8deab519e015881002fbfde670c5096755df14f5bfc156b449ced/spectrumdevice-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}