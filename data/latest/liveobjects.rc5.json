{
  "info": {
    "author": "Kacper Sawicki, Krzysztof Krze≈õlak, Tomasz Malek",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Prototype with Orange using Live Objects\n### Discover Orange  [**Live Objects**](https://liveobjects.orange-business.com) using dedicated SDK for **Python 3 and uPython compatible** boards and systems.\n\nThis code wraps all the functions necessary to make your object work with Live Objects.\n\nYou can declare parameters, which you can later update OTA from Live objects. You can also create commands to trigger actions remotely.\nOnly thing you must do yourself is connecting the board with internet.\n\nCode uses MQTT connection to exchange data with Live objects under the hood to keep your parameters up to date or execute the commands received without you having to take care of them (apart from writing the code of these commands, of course).\n\n## Compatibility ##\n| System        | MQTT | MQTTS |\n|:--------------|:----:|:-----:|\n| Linux         |  OK  |  OK   |\n| Windows       |  OK  |  OK   |\n| Raspberry Pi  |  OK  |  OK   |\n| ESP8266       |  OK  |   -   |\n| ESP32         |  OK  |  OK   |\n| LoPy (Pycom)  |  OK  |   -   |\n| GPy (Pycom)   |  OK  |   -   |\n\n## Prerequisites / dependencies ##\nThis code needs a few libraries to run:\n- Python needs [paho-mqtt](https://pypi.org/project/paho-mqtt/)\n    - Python for Windows needs [python-certifi-win32](https://pypi.org/project/python-certifi-win32/)\n- uPython needs [umqttsimple](https://github.com/micropython/micropython-lib/blob/master/micropython/umqtt.simple/umqtt/simple.py) and [umqttrobust](https://github.com/micropython/micropython-lib/blob/master/micropython/umqtt.robust/umqtt/robust.py)\n\n## How to use ##\n\n1. Log in to [Live Objects](https://liveobjects.orange-business.com) or request a [trial account](https://liveobjects.orange-business.com/#/request_account) (up to 10 devices for 1 year) if you don't have one,\n2. Create an [API key](https://liveobjects.orange-business.com/#/administration/apikeys) for your device. Give it a name, select the *Device access* role and validate. Copy the key,\n3. Clone or download the directory from GitHub,\n4. Change **\\<APIKEY\\>** in `credentials.py` to one you generated,\n5. Run selected `.py` script\n\n## Developer guide ##\n\n### Constructor ###\n\nConstructor of LiveObjects looks like below:\n\n```Python\nlo = LiveObjects.Connection()\n```\n\n### Debug messages ###\n\nYou can use LiveObjects to output debug messages.\n\n```Python\nVALUE = 21\n# INFO / ERROR / WARNING\nlo.output_debug(LiveObjects.INFO, \"example value\", VALUE, ...)\n# Output: [INFO] example value 21 ...\n```\n\n### Declare parameters ###\nYou can update over the air some parameters of your script using Live Objects's parameters. Parameters and Commands must be declared **before** your device connects to Live Objects.\n\nYou can declare parameters with the `addParameter()` instruction, which accepts the following arguments:\n- the label of your parameter as it will be displayed on Live Objects;\n- the value of parameter\n- parameter type [INT STRING FLOAT BINARY]\n- (optional) a callback function, if you need to perform some tasks after the parameter has been updated\n\nTo retrieve a parameter use function `getParameter()` which takes following arguments:\n- Parameter name\n\nExample:\n\n```Python\nlo.add_parameter(\"message_rate\", 25, LiveObjects.INT)\nlo.add_parameter(\"send_DHT_data\", true, LiveObjects.BINARY, my_callback_function)\n# ...\nif lo.get_parameter(\"send_DHT_data\"):\n    lo.add_to_payload(\"temperature\", DHT.read_temeprature())\n    lo.add_to_payload(\"humidity\", DHT.read_humidity())\n```\n\nThe callback function takes 2 arguments:\n```Python\ndef my_callback_function(parameter_name, new_value):\n    # do stuff\n```\n\nFurther reading on Live Objects' [Parameters](https://liveobjects.orange-business.com/doc/html/lo_manual.html#_configuration).\n\n### Declare commands ###\nCommands let you trigger specific actions on your device from Live Objects. Parameters and Commands must be declared _before_ your device connects to Live Objects.\n\nCommands can be declared using the `addcommand()` instruction, which accepts the following arguments:\n- the label of your command\n- the callback function that will execute the command.\n\n```Python\nlo.add_parameter(\"a command\", my_callback, );\n```\n\nThe callback function should take 1 parameter and return dictionary:\n```Python\ndef my_callback(args={}):\n    # do stuff\n    return {}\n```\n\nArguments and response are optional when using commands, but they can be useful if you want to pass parameters to your function. For instance, you could define a `play tone` command that will use some parameters like the frequency of the tone, or its duration.\n- Any incoming arguments will be passed as member of a dictionary\n- You can pass response arguments in the form of a dictionary by returning them\n\n```Python\ndef play_tone(args={}):\n    duration = args[\"duration\"]\n    frequency = args[\"frequency\"]\n    # play the tone accordingly to arguments\n    # ...\n    return {\"I played\": \"the tone\"}\n\n\ndef setup():\n    lo.add_command(\"play tone\", play_tone)\n```\n> Warning: **Command name and arguments are case-sensitive when creating the command on Live Objects.**: On the opposite, there is no specific order for specifying the command arguments.\n\nFurther reading on Live Objects' [Commands](https://liveobjects.orange-business.com/doc/html/lo_manual.html#MQTT_DEV_CMD).\n\n### Sending data ###\nYou can send data very easily to Live Objects.\n\n#### Dead simple method ####\nCompose your payload using the `addToPayload()` instruction. You will need to provide a label for your value, and the data itself. Your data can be of any simple type.\n\nData is added on each call to `addToPayload()`, so repeat the instruction if you have multiple data to send. When your payload is ready, send it using `sendData()`. That simple.\n\n```Python\nVALUE = 21\nMY_OTHER_VALUE = 37\n\n\ndef foo():\n    # collect data\n    lo.add_to_payload(\"my data\", VALUE)\n    lo.add_to_payload(\"my other data\", MY_OTHER_VALUE)\n    lo.send_data()  # send to LiveObjects\n```\n\nAs soon the data is sent, your payload is cleared and waiting for the next sending.\n\n### Advanced payload features ###\n\n```Python\n# Add \"model\" property to your message\nlo.add_model(\"example_name\")\n\n# Add \"tag\" property to your message\nlo.add_tag(\"kitchen\")\nlo.add_tags([\"humidity\", \"bathroom\"])\n\n# Use your object as payload (this function doesn't append current payload)\nobj = {\"example\": \"value\", \"example2\": \"value2\"}\nlo.set_object_as_payload(obj)\n```\n\n\n### Connect, disconnect and loop ###\nYou can control the connection and disconnection of your device using `connect()` and `disconnect()`.\n\n\nIn order to check for any incoming configuration update or command, you need to keep the `loop()` instruction in your main loop.\n```Python\ndef foo():\n    lo.connect();\n    while True:\n        # Do some stuff\n        #...\n        lo.loop(); #Keep this in main loop\n    lo.disconnect()\n```\n\n### Changing default carrier to connect to the network ###\n\nEvery board has its own default carrier for connection to the network (see below). \n\n| System        | Default carrier | Optional carrier |\n|:--------------|:---------------:|:----------------:|\n| Linux         | Delivered by OS |        -         |\n| Windows       | Delivered by OS |        -         |\n| Raspberry Pi  | Delivered by OS |        -         |\n| ESP8266       |      Wi-Fi      |        -         |\n| ESP32         |      Wi-Fi      |        -         |\n| LoPy (Pycom)  |      Wi-Fi      |        -         |\n| GPy (Pycom)   |      Wi-Fi      |       LTE        |\n\nFor GPy you can switch connectivity to optional carrier. You need to do change in `Connection` class in `Connection.py`\nfrom:\n```Python\ndef __init__(self, debug=True):\n    self.__board = LiveObjects.BoardsFactory(net_type=LiveObjects.BoardsInterface.DEFAULT_CARRIER)\n...\n```\nto:\n```Python\ndef __init__(self, debug=True):\n    self.__board = LiveObjects.BoardsFactory(net_type=LiveObjects.BoardsInterface.LTE)\n...\n```\nThen GPy will connect via LTE network.\n\n### Adding new boards ###\n\nThere is possibility to add your new type of board supporting Python/uPython. \nYou need to add your own class in `hal.py`. Name of this class has to be the same as output of `sys.platform`\nand has to start from capital letter.\n```commandline\n>>> sys.platform\n'GPy'\n>>> \n```\nBelow code shows basic constructor:\n```Python\ndef __init__(self, net_type):\n    self._lang_id = BoardsInterface.MICROPYTHON\n    self._net_type = BoardsInterface.WIFI if net_type == BoardsInterface.DEFAULT_CARRIER else net_type\n    self._carrier_capability = (BoardsInterface.WIFI,)\n    self._wifi_tls_capability = False\n    self._credentials = super().create_credentials(self._net_type)\n```\nBasic fields meaning:\n- **_lang_id**: used Python dialect: PYTHON / MICROPYTHON,\n- **_net_type**: used type of network: WIFI / LTE / network delivered by OS / ...\n- **_carrier_capability**: _tuple_ containing supported type(s) of network,\n- **_wifi_tls_capability**: _True_ if TLS is supported and MQTTS could be used, \n- **_credentials**: required credentials depended on network type: SSID/PASS for Wi-Fi, PIN/APN for LTE etc. \n\nIf other specific fields are necessary you need to define them.\nYou need to override specific methods - e.g. `connect` which is depended on type of board. \nAll specific functions are placed in `services.py`. \nIf your board needs function supporting its equipment you need to put it in this file.   \n\n## VL6180X Sensor use-case ##\n\nWe can connect sensor using I<sup>2</sup>C to board supporting Python like **Raspberry Pi**. \n\nThe [VL6180X](https://www.st.com/en/imaging-and-photonics-solutions/vl6180x.html) is the latest product based on ST‚Äôs patented FlightSense‚Ñ¢technology. \nThis is a ground-breaking technology allowing absolute distance to be measured independent of target reflectance. \nInstead of estimating the distance by measuring the amount of light reflected back from the object (which is significantly influenced by color and surface), \nthe VL6180X precisely measures the time the light takes to travel to the nearest object and reflect back to the sensor (Time-of-Flight).\nDescription from st.com.\n\n### Prerequisites ###\n\n#### Enabling I<sup>2</sup>C ####\nEnable (if needed) **I<sup>2</sup>C** interface on your Raspberry Pi using terminal and command:\n```bash\nsudo raspi-config\n```\nand selecting: **3 Interface Options** -> **P5 I2C** -> **\\<Yes\\>**\n\n![I2C_Enabling](image/enable_I2C.png)\n\n#### Wiring ####\n![Wiring](https://www.raspberrypi-spy.co.uk/wp-content/uploads/2012/06/Raspberry-Pi-GPIO-Header-with-Photo-768x512.png \"Mapping\")\n\n<br>\n\nExample of development module using VL6180X you can find [here](https://kamami.pl/en/kamod-kamami-peripheral-modules/559362-kamodvl6180x-a-module-with-distance-gesture-and-als-sensor.html). Below diagram shows how to connect it to Raspberry Pi.\n\n![Schematics](image/RPi_VL6180X.png \"Schematics\")\n\n#### Adding VL6180X Python module ####\nNecessary module by [Adafruit](https://learn.adafruit.com/adafruit-vl6180x-time-of-flight-micro-lidar-distance-sensor-breakout/python-circuitpython) can be installed using `pip` \n```bash\npip3 install adafruit-circuitpython-vl6180x\n```\n\n#### How to use ####\nTo run you need to use below command:\n```bash\npython3 7_distance_and_light_sensor.py\n```\n\n---\n\n# Installation guide for uPython #\n## Example for ESP32 / ESP8266 ##\n### Requirements ###\n1. [ampy](https://learn.adafruit.com/micropython-basics-load-files-and-run-code/install-ampy)\n2. [umqttsimple, umqttrobust and ssl](https://github.com/micropython/micropython-lib) (for your convenience they are included in `micropython` folder)\n3. [PuTTY](https://www.putty.org/) (for Windows)\n\n### Installation steps ###\n\n1. Preparation \n\nChange **\\<APIKEY\\>** in `credentials.py` to one you generated.\\\nChange **\\<WIFI_SSID\\>** and **\\<WIFI_PASS\\>** suitable to your Wi-Fi or \nchange **\\<PIN\\>** and **\\<APN\\>** suitable to your SIM card.\n\n2. Copy files into device\n```commandline\n> ampy --port COMx put umqttrobust.py \n> ampy --port COMx put simple.py   \n> ampy --port COMx put LiveObjects // It will copy directory with its content \n```\n3. Prepare your script and save it as `main.py` then copy file into device. \nYou can use one of example ones (`1_send_data.py`, ...) renaming it to `main.py` \n```Shell\n> ampy --port COMx put main.py\n```\n\n\n4. Connect to device and check if it's working using PuTTY\n\n    Ctrl + D soft resets device\n\n    Ctrl + C Stops currently running script\n\n### Summary ###\n\nAfter all steps content of the device should look like below:\n```commandline\n> ampy --port COMx ls\n/LiveObjects\n/boot.py\n/main.py\n/umqttrobust.py\n/simple.py\n\n> ampy --port COMx ls LiveObjects\n/LiveObjects/Connection.py\n/LiveObjects/__init__.py\n/LiveObjects/hal.py\n/LiveObjects/credentials.py\n/LiveObjects/services.py\n```\nwhere COMx means port on your computer (e.g. COM8) with connected microPython board. \n\n## Example for LoPy / GPy ##\n\nYou can do the steps as above but better is to use [Pymakr plug-in](https://pycom.io/products/supported-networks/pymakr/) for **Visual Studio Code** or **Atom** delivered by [Pycom](https://pycom.io/). \nPlug-in supports code development, its upload to the board and communication with board. \n\n## VL6180X Sensor use-case ##\n\nSensor described in this [section](#vl6180x-sensor-use-case) can be used on boards supporting microPython.\n\n### Prerequisites ###\n\n#### Wiring ####\nYou need to connect I<sup>2</sup>C interface (SCL & SDA) and power lines on the board with corresponding pins on the sensor.\nYou need to be aware that **boards can use different GPIOs for I<sup>2</sup>C** purposes. Set of typical pairs is placed \nin function `get_i2c()` in file `hal.py`. If your board uses other GPIO pins, you need to add them to the tuple `typical_gpio`. \n```Python\ndef get_i2c():\n    import machine\n    typical_gpio = ([22, 23], [5, 4], [22, 21])\n...\n```\n![ESP32_sch](image/ESP32_VL6180X_sch.png)\n\nExample of wiring ESP32 board with GPIO22 and GPIO21 (_source: https://randomnerdtutorials.com/esp32-pinout-reference-gpios/_)\n\n![ESP32](image/ESP32_VL6180X.jpg)\n\n#### How to use ####\n1. You need to upload additional library for VL6180X support (it is placed in `micropython` folder):\n```commandline\n> ampy --port COMx put vl6180x_micro.py\n``` \n2. Copy `7_distance_and_light_sensor.py` as `main.py` and upload it into board. \n\nAfter above operations you can see:\n```commandline\n> ampy --port COMx ls\n/LiveObjects\n/boot.py\n/main.py\n/umqttrobust.py\n/simple.py\n/vl6180x_micro.py\n\n> ampy --port COMx ls LiveObjects\n/LiveObjects/Connection.py\n/LiveObjects/__init__.py\n/LiveObjects/hal.py\n/LiveObjects/credentials.py\n/LiveObjects/services.py\n```\n3. Connect to device and check if it's working using PuTTY.\n\n\n## Troubleshooting ##\nIf you are getting 'MQTT exception: 5' check your api key\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DatavenueLiveObjects/LiveObjects_SDK_for_Python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LiveObjects",
    "package_url": "https://pypi.org/project/LiveObjects/",
    "platform": null,
    "project_url": "https://pypi.org/project/LiveObjects/",
    "project_urls": {
      "Homepage": "https://github.com/DatavenueLiveObjects/LiveObjects_SDK_for_Python"
    },
    "release_url": "https://pypi.org/project/LiveObjects/2.1.0/",
    "requires_dist": [
      "paho-mqtt"
    ],
    "requires_python": "",
    "summary": "This module allows to easy send data to Orange LiveObjects using Python3 and uPython",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17260069,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b04f97190e0eb4fe55ba67908bd5557771ae3ce75771bb5dc76e8ed8eb9c65f7",
          "md5": "a7d4701110a3271bb27459bdf1c4b870",
          "sha256": "699a0c400ccfa1ae12f21b8d7e47076a40f8f94e0dc7f8593c2dd0b42a8b21f0"
        },
        "downloads": -1,
        "filename": "LiveObjects-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7d4701110a3271bb27459bdf1c4b870",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13306,
        "upload_time": "2020-11-25T08:50:03",
        "upload_time_iso_8601": "2020-11-25T08:50:03.105916Z",
        "url": "https://files.pythonhosted.org/packages/b0/4f/97190e0eb4fe55ba67908bd5557771ae3ce75771bb5dc76e8ed8eb9c65f7/LiveObjects-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9493a5613cf484099ac570fee57ac3df938eb685dcf8493f5f21f1c67eff2c6",
          "md5": "a28bfc09b8bf527ff38fd903ed5101f7",
          "sha256": "0eafaa89353db8967a710d8b5ef73c83eb8c10ec053c637195a73ff8eff6cd7a"
        },
        "downloads": -1,
        "filename": "LiveObjects-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a28bfc09b8bf527ff38fd903ed5101f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11868,
        "upload_time": "2022-04-05T07:35:08",
        "upload_time_iso_8601": "2022-04-05T07:35:08.815963Z",
        "url": "https://files.pythonhosted.org/packages/d9/49/3a5613cf484099ac570fee57ac3df938eb685dcf8493f5f21f1c67eff2c6/LiveObjects-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c47573c9030d65390087e75d26838c44f4ccf2039305e75f2e702d6c8531dac4",
          "md5": "fd9a5706c079723dcc52b9f34073a869",
          "sha256": "dd90f980e8fe78cadc036a299b5c5495dcd86a8f0ada87f4d6324e5845369eaf"
        },
        "downloads": -1,
        "filename": "LiveObjects-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fd9a5706c079723dcc52b9f34073a869",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10343,
        "upload_time": "2022-04-05T07:35:11",
        "upload_time_iso_8601": "2022-04-05T07:35:11.192195Z",
        "url": "https://files.pythonhosted.org/packages/c4/75/73c9030d65390087e75d26838c44f4ccf2039305e75f2e702d6c8531dac4/LiveObjects-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38a23b2670a2b5497521d174ee6e116a86c4a3a9fed82fa0df20c2bd264e2239",
          "md5": "8414983ecf1ee1342cf2330af2adcace",
          "sha256": "31f03cb098524501ef9e8417eb1ef85e9822bc1f21175c98977a6d756b58beb9"
        },
        "downloads": -1,
        "filename": "LiveObjects-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8414983ecf1ee1342cf2330af2adcace",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11866,
        "upload_time": "2022-04-13T10:02:52",
        "upload_time_iso_8601": "2022-04-13T10:02:52.593632Z",
        "url": "https://files.pythonhosted.org/packages/38/a2/3b2670a2b5497521d174ee6e116a86c4a3a9fed82fa0df20c2bd264e2239/LiveObjects-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ed23017d4b414818395507d32402176148dfe3832fdf3e54892018bd06dc712",
          "md5": "f83f7617127ae48e77bcb6e15dc60820",
          "sha256": "9bb400cf5f7c1eb6d87754f5f40c36f72e73544a2d68a8b625f76466ef3b3dfe"
        },
        "downloads": -1,
        "filename": "LiveObjects-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f83f7617127ae48e77bcb6e15dc60820",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10318,
        "upload_time": "2022-04-13T10:02:54",
        "upload_time_iso_8601": "2022-04-13T10:02:54.988887Z",
        "url": "https://files.pythonhosted.org/packages/4e/d2/3017d4b414818395507d32402176148dfe3832fdf3e54892018bd06dc712/LiveObjects-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d13d1a6d1d487214406c32edd795ef18d4bc96be31d9badaee5a5d63205bab1d",
          "md5": "93e9b6e3c2b41bc18de13fe27c4ff4be",
          "sha256": "48aed07fc67daaeb879a560a4b78c9a93d9bc6a1f558a2fb7304b939a6f6e9d3"
        },
        "downloads": -1,
        "filename": "LiveObjects-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93e9b6e3c2b41bc18de13fe27c4ff4be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11873,
        "upload_time": "2022-05-05T08:05:03",
        "upload_time_iso_8601": "2022-05-05T08:05:03.235717Z",
        "url": "https://files.pythonhosted.org/packages/d1/3d/1a6d1d487214406c32edd795ef18d4bc96be31d9badaee5a5d63205bab1d/LiveObjects-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d62157a3a7e41036f46d86bc6488a34ea4dcc01202fb574edf694fec0349e65",
          "md5": "2ea0d0e89d0d0fba24317cfb67def48e",
          "sha256": "2cd570c6f9b84efc3941016522d37d9580cd25ffd888f11b602d9cea247c5ff6"
        },
        "downloads": -1,
        "filename": "LiveObjects-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2ea0d0e89d0d0fba24317cfb67def48e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10333,
        "upload_time": "2022-05-05T08:05:05",
        "upload_time_iso_8601": "2022-05-05T08:05:05.768202Z",
        "url": "https://files.pythonhosted.org/packages/4d/62/157a3a7e41036f46d86bc6488a34ea4dcc01202fb574edf694fec0349e65/LiveObjects-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1606147c65a5c8961a6c3f47fddf802c044a0f41e6712ba82ed16029e1493ce6",
          "md5": "b3a8361dc9b150d489cd0936a09b623d",
          "sha256": "2ad6db65fbbad9e132cf35f0539edfe8f2a6b10d9e88ed8a339f237578e786ca"
        },
        "downloads": -1,
        "filename": "LiveObjects-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3a8361dc9b150d489cd0936a09b623d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13958,
        "upload_time": "2023-03-12T12:01:32",
        "upload_time_iso_8601": "2023-03-12T12:01:32.950835Z",
        "url": "https://files.pythonhosted.org/packages/16/06/147c65a5c8961a6c3f47fddf802c044a0f41e6712ba82ed16029e1493ce6/LiveObjects-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fae4e28901703d04dd1e4601ac48284bdb908f1c75c45873aceda4b97dd77390",
          "md5": "84a052009b699e11bedda2071a249c90",
          "sha256": "585ba893c744c5e0c14ce8220ed4e9725bf4e8653deebfc33ef2278842330b55"
        },
        "downloads": -1,
        "filename": "LiveObjects-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "84a052009b699e11bedda2071a249c90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12805,
        "upload_time": "2023-03-12T12:01:35",
        "upload_time_iso_8601": "2023-03-12T12:01:35.315007Z",
        "url": "https://files.pythonhosted.org/packages/fa/e4/e28901703d04dd1e4601ac48284bdb908f1c75c45873aceda4b97dd77390/LiveObjects-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1606147c65a5c8961a6c3f47fddf802c044a0f41e6712ba82ed16029e1493ce6",
        "md5": "b3a8361dc9b150d489cd0936a09b623d",
        "sha256": "2ad6db65fbbad9e132cf35f0539edfe8f2a6b10d9e88ed8a339f237578e786ca"
      },
      "downloads": -1,
      "filename": "LiveObjects-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3a8361dc9b150d489cd0936a09b623d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13958,
      "upload_time": "2023-03-12T12:01:32",
      "upload_time_iso_8601": "2023-03-12T12:01:32.950835Z",
      "url": "https://files.pythonhosted.org/packages/16/06/147c65a5c8961a6c3f47fddf802c044a0f41e6712ba82ed16029e1493ce6/LiveObjects-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fae4e28901703d04dd1e4601ac48284bdb908f1c75c45873aceda4b97dd77390",
        "md5": "84a052009b699e11bedda2071a249c90",
        "sha256": "585ba893c744c5e0c14ce8220ed4e9725bf4e8653deebfc33ef2278842330b55"
      },
      "downloads": -1,
      "filename": "LiveObjects-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "84a052009b699e11bedda2071a249c90",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12805,
      "upload_time": "2023-03-12T12:01:35",
      "upload_time_iso_8601": "2023-03-12T12:01:35.315007Z",
      "url": "https://files.pythonhosted.org/packages/fa/e4/e28901703d04dd1e4601ac48284bdb908f1c75c45873aceda4b97dd77390/LiveObjects-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}