{
  "info": {
    "author": "Ivan Muniz Rosa",
    "author_email": "ivanmrosa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PYDInjector\n**Simple Dependency Injection Container for python**\n\n## Description\n\nPyDInjector is dependency injector container that facilitates to follow the *Inversion of Control* principle. PyDInjector uses the python type hint to\nresolve the dependencies and to inject them into the objects. To do that we need to configured the relation of the implemented objects with their types\n(Interfaces/ABC). After configured is possible to use the *@inject* decorator to indicates whether the container should inject the dependency.\n\nThere are to types of injections: the scoped injection and the singleton injection.\n\n### Scoped injection\n\nEscoped injection will provide a new instance of the object always that the scope where the @inject decorator was used is call. For example, if we decorate\nthe constructor *def __ini__(OurService : IOurService):*, the container will provide a new instance of *OurService* always whe instantiate this object. But \nif we decorate other method in this class like *def doSomenthing(OurService : IOurService):*, the container will provide a new instance of *OurService* \nalways that we execute the method *doSomenthing*.\n\n### Singleton injection\n\nSingleton injection will instantiate the object once and then provide the same instance every time it been requested.\n\n## Configuring the container injector\n\nThe configuration of the relationship between the types and the objects must be inserted at the beginning of the code execution. In order to be able to \ndo that is necessary to import the  *DIContainer* from *PyDInjector*. Then is possible to use the methods \n*DIContainer.AddScoped* and *DIContainer.AddSingleton*.\n\n\n    from PyDInjector import DIContainer\n    DIContainer.AddScoped(IBody, HumanBody)\n    DIContainer.AddScoped(IBodyAction, HumanBodyAction)\n    DIContainer.AddScoped(IFoodProvider, FoodProvider)\n    DIContainer.AddSingleton(ICooker, Cooker)\n\nThe first parameter is the Interface and the second one is the class implementation.\n\nSee the utilization below:\n\n\n    \n    class HumanBody(IBody):    \n        @inject #The container will inject a instance of BodyAction to this constructor\n        def __init__(self, actions: IBodyAction) -> None:        \n            super().__init__()\n            self.__actions : IBodyAction = actions\n            self.__identification : str = str(uuid.uuid1())    \n        def move(self) -> str:\n            return self.__actions.move()\n        def jump(self) -> str:\n            return self.__actions.jump()\n        def getLegsQuantity(self) -> int:\n            return 2\n        def getHandsQuantity(self) -> int:\n            return 2\n        def getInstanceIdentification(self) -> str:\n            return self.__identification\n        def getActionIdentification(self) -> str:\n            return self.__actions.getInstanceIdentification()\n        @inject #The container will inject a instance of FoodProvider tho this method. If the configuration was singleton, then will be always the same instance. Otherwise a new instance will be provided at each execution \n        def eat(self, foodProvider: IFoodProvider) -> str:\n            return self.__actions.eat(food=foodProvider.getFood())\n        \n    humanBody : IBody = HumanBody() #no need to pass the parameter here, because the container will provide the dependency       \n    humanBody.getHandsQuantity()\n    humanBody.eat() #no need to pass the parameter here, because the container will provide the dependency       \n\n\nIf you want to get an instance of an object manually, is possible to use the method *DIContainer.GetObject(IType)*.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ivanmrosa/PYDInjector",
    "keywords": "dependency injection,DI,inversion of control,IOC,container,Dependency Injection,Inversion of Control,Python",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyDInjector",
    "package_url": "https://pypi.org/project/PyDInjector/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyDInjector/",
    "project_urls": {
      "Homepage": "https://github.com/ivanmrosa/PYDInjector"
    },
    "release_url": "https://pypi.org/project/PyDInjector/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple dependency injection container for python",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16643109,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05ee51020d8140775034aaab8bd8c89fe216e9187c4f666899b8276557c1d440",
          "md5": "412b8be5c359f7bbc260a847c3cea041",
          "sha256": "2cdf2da85ba9c5bc4a4b36877e961dcfbc3daa08c53a16f71db597902778ce98"
        },
        "downloads": -1,
        "filename": "PyDInjector-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "412b8be5c359f7bbc260a847c3cea041",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3226,
        "upload_time": "2022-12-04T15:03:30",
        "upload_time_iso_8601": "2022-12-04T15:03:30.904941Z",
        "url": "https://files.pythonhosted.org/packages/05/ee/51020d8140775034aaab8bd8c89fe216e9187c4f666899b8276557c1d440/PyDInjector-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c5b9f68fc9a08fa6304e28fcc062f4a07767659d0c2f4ceccf8e8097de10f63",
          "md5": "9ae4e2bb7034b539886355b382057f42",
          "sha256": "0e37ab8e6680e32f3b7e9ec4195673d7e8b05d3e1904bef7d519fe2f10d6c538"
        },
        "downloads": -1,
        "filename": "PyDInjector-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9ae4e2bb7034b539886355b382057f42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3258,
        "upload_time": "2023-02-01T00:39:46",
        "upload_time_iso_8601": "2023-02-01T00:39:46.512622Z",
        "url": "https://files.pythonhosted.org/packages/4c/5b/9f68fc9a08fa6304e28fcc062f4a07767659d0c2f4ceccf8e8097de10f63/PyDInjector-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c5b9f68fc9a08fa6304e28fcc062f4a07767659d0c2f4ceccf8e8097de10f63",
        "md5": "9ae4e2bb7034b539886355b382057f42",
        "sha256": "0e37ab8e6680e32f3b7e9ec4195673d7e8b05d3e1904bef7d519fe2f10d6c538"
      },
      "downloads": -1,
      "filename": "PyDInjector-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9ae4e2bb7034b539886355b382057f42",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3258,
      "upload_time": "2023-02-01T00:39:46",
      "upload_time_iso_8601": "2023-02-01T00:39:46.512622Z",
      "url": "https://files.pythonhosted.org/packages/4c/5b/9f68fc9a08fa6304e28fcc062f4a07767659d0c2f4ceccf8e8097de10f63/PyDInjector-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}