{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Topic :: System :: Shells",
      "Topic :: System :: System Shells"
    ],
    "description": "zsh2xonsh ![pypy](https://img.shields.io/pypi/v/zsh2xonsh) ![powered-by-xonsh](https://img.shields.io/badge/powered%20by-xonsh-brightgreen)\n=========\nHave you heard of [xonsh](https://xon.sh/)? It's a Python-powered shell.\n\nYou can do amazing things like this:\n````xonsh\n# Interpolate python -> shell\necho @(i for i in range(42))\n\n# Interpolate shell -> python\nfor filename in `.*`:\n    print(filename)\n    du -sh @(filename)\n\n# Execute regular shell commands too\ncat /etc/passwd | grep root\n````\n\nAs you can immagine, this awesomeness is not POSIX-compliant :(\n\nThis makes it difficult to setup your `$PATH` and do things like `eval $(brew shellenv)`\n\nThis package exists to translate traditional `zsh` scripts into `xonsh` code.\n\n## Compatibility (and how it works)\nThe goal is 100% compatibility for a *subset* of shell. \n\nCompatibility is achived by delegating most of the work to zsh.\n\nThat is, `export FOO=\"$(echo bar)\"` in a shell script becomes (essentially)  `$FOO=$(zsh -c 'echo bar')` in xonsh.\n\nWe have `zsh` handle all the globbing/quoting/bizzare POSIX quirks.\n\nIn the face of ambiguity, or if we encounter an unsupported feature (like a `for` loop), then we fail-fast.\n\nThis is the most important feature. If something can't be supported 100%, then it will throw a descriptive error. Anything else is a bug :)\n\n### Features\nThe included shell features include:\n\n1. Quoted expressions `\"$VAR glob/*\"` (zsh does expansion here)\n2. Unquoted literals `12`, `foo` `~/foo` (mostly translated directly)\n3. Command substitutions \"$(cat file.txt | grep bar)\" \n   - zsh does all the work here\n   - Supports both quoted and unquoted forms\n3. If/then statements\n   - Conditionals are executed by zsh (so `[[ -d \"foo\" ]]` works perfectly)\n   - Translated into python if (so body will not run unless conditional passes)\n4. Exporting variables `export FOO=$BAR`\n   - Translates `$PATH` correctly (xonsh thinks it's a list, zsh thinks it's a string)\n   - This is where the subprocess approach doesn't work blindly....\n      - We support it cleanly by doing the left-hand assignment xonsh, and the right-hand expression in `zsh` :)\n   - Local variables (local var=x) are supported too :)\n\nAll of these behaviors are 100% compatible with their zsh equivalents.\nIf you try anything else (or encounter an unsupported corner case), then you will get a descripitive error :)\n\n## Installation & Usage\nThis is a pypi package, install it with `pip install zsh2xonsh`.\n\nThe API is simple, run `translate_to_xonsh(str) -> str` to translate from `zsh` -> `xonsh` code.\nThis does not require xonsh at runtime, and can be done ahead of time. \n\nIf you want to evaluate the code immediately after translating it (for example in a `.xonshrc`), you can use\n. This requires xonsh at runtime (obviously) and uses the `evalx` builtin.\n\nAdditionally you can use the CLI (`python -m zsh2xonsh`), which accepts an import.\n\nIf you want to provide extra utility functions to your code, you can define `extra_builtins`.\n\n### Example\nIn my `.xonshrc`, I dynamically translate and evaluate the output of `brew shellenv`:\n````xonsh\nzsh2xonsh.translate_to_xonsh_and_eval($(/opt/homebrew/bin/brew shellenv))\n````\n\n## Motiviation\nFirst of all, I need support for `eval $(brew shellenv)` .\n\nSecond of all, I still use `zsh` as my backup shell.\n\nThis means I need to setup `$PATH` and other enviornment variables for both of these shells.\n\nThe natural way to set these up is by using shell scripts.\nI have a seperate one for each of my different machines (server, macbook, old lapotop, etc)\n\nFor each of these (tiny) shell scripts, `zsh2xonsh` works very well :)\n\nSo in addition to properly translating `$(brew shellenv)`,\nit also needs to translate basic shell \"environement files\".\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Techcable/zsh2xonsh",
    "keywords": "shell xonsh zsh cli translate compat",
    "license": "MIT",
    "maintainer": "Techcable",
    "maintainer_email": "",
    "name": "zsh2xonsh",
    "package_url": "https://pypi.org/project/zsh2xonsh/",
    "platform": "",
    "project_url": "https://pypi.org/project/zsh2xonsh/",
    "project_urls": {
      "Homepage": "https://github.com/Techcable/zsh2xonsh"
    },
    "release_url": "https://pypi.org/project/zsh2xonsh/0.1.0b1/",
    "requires_dist": [
      "click"
    ],
    "requires_python": ">=3.8",
    "summary": "A highly-compatible translator from zsh -> xonsh",
    "version": "0.1.0b1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12513353,
  "releases": {
    "0.1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcaa19c4baede79c48d8f6aa101ef6f6b1bce9bd21524da453e536fdafad4e17",
          "md5": "1b0cb840d58b6ea635f7bd59407124ab",
          "sha256": "4deffb2002f347870e0ca25691127ee389a6bdc55eb425ac0932e5611614c657"
        },
        "downloads": -1,
        "filename": "zsh2xonsh-0.1.0b1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "1b0cb840d58b6ea635f7bd59407124ab",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 13019,
        "upload_time": "2022-01-08T13:02:56",
        "upload_time_iso_8601": "2022-01-08T13:02:56.079711Z",
        "url": "https://files.pythonhosted.org/packages/dc/aa/19c4baede79c48d8f6aa101ef6f6b1bce9bd21524da453e536fdafad4e17/zsh2xonsh-0.1.0b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dcaa19c4baede79c48d8f6aa101ef6f6b1bce9bd21524da453e536fdafad4e17",
        "md5": "1b0cb840d58b6ea635f7bd59407124ab",
        "sha256": "4deffb2002f347870e0ca25691127ee389a6bdc55eb425ac0932e5611614c657"
      },
      "downloads": -1,
      "filename": "zsh2xonsh-0.1.0b1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "1b0cb840d58b6ea635f7bd59407124ab",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 13019,
      "upload_time": "2022-01-08T13:02:56",
      "upload_time_iso_8601": "2022-01-08T13:02:56.079711Z",
      "url": "https://files.pythonhosted.org/packages/dc/aa/19c4baede79c48d8f6aa101ef6f6b1bce9bd21524da453e536fdafad4e17/zsh2xonsh-0.1.0b1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}