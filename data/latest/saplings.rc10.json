{
  "info": {
    "author": "shobrook",
    "author_email": "shobrookj@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<h1 align=\"center\">\n  <img width=\"30%\" src=\"img/logo.png\" />\n  <br />\n</h1>\n\n`saplings` is a static analysis tool for Python. Given a program, `saplings` will build object hierarchies for every module imported in the program. Object hierarchies are dependency trees where the root node represents a module and each child represents an attribute of its parent. These can be useful for [type inference](https://en.wikipedia.org/wiki/Duck_typing) and mining data about how a module is used.\n\n<img src=\"img/demo.gif\" />\n\n- Object hierarchies or attribute trees?\n- Tracks modules by default, but build trees for _any_ objects\n- Why is it unique? Can track object flow through many complex paths through a program without executing it\n\n## Installation\n\n> Requires Python 3.X.\n\nYou can install `saplings` with `pip`:\n\n```bash\n$ pip install saplings\n```\n\n## Usage\n\nUsing saplings takes only two steps. First, convert your input program into an [Abstract Syntax Tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree) using the `ast` module. Then, import the `Saplings` object and initialize it with the root node of the AST.\n\n```python\nimport ast\nfrom saplings import Saplings\n\nmy_program = open(\"path_to_your_program.py\", \"r\").read()\nprogram_ast = ast.parse(my_program)\nmy_saplings = Saplings(program_ast)\n```\n\nThat's it. To access the object hierarchies, simply call the `get_trees` method in your `Saplings` object, like so:\n\n```python\nmy_saplings.get_trees() # => [ObjectNode(), ObjectNode(), ..., ObjectNode()]\n```\n\nFor more advanced usage of the `Saplings` object, read the docstring [here]().\n\n### Printing an Object Hierarchy\n\n`get_trees` returns a list of `ObjectNode`s, each representing the root node of an object hierarchy and which has the following attributes:\n* **`name` _(str)_:** Name of the object\n* **`is_callable` _(bool)_:** Whether the object is callable (i.e. has `__call__` defined)\n* **`order` _(int)_:** Indicates the type of connection to the parent node (e.g. `0` is an attribute of the parent, `1` is an attribute of the output of the parent when called, etc.); `-1` if node is root\n* **`frequency` _(int)_:** Number of times the object is referenced (i.e. appears) in the program\n* **`children` _(list)_:** List of child nodes\n\nTo pretty-print a tree, simply pass its root node into the `render_tree` generator, like so:\n\n```python\nfrom saplings import render_tree\n\ntrees = my_saplings.get_trees()\nroot_node = trees[0]\nfor branches, node in render_tree(root_node):\n  print(f\"{branches}{node}\")\n```\n```\nnumpy (NC, -1)\n +-- random (NC, 0)\n |   +-- randn (C, 0)\n |       +-- __sub__ (C, 1)\n |       |   +-- shape (NC, 1)\n |       |   +-- __index__ (C, 1)\n |       +-- sum (C, 1)\n +-- matmul (C, 0)\n +-- expand_dims (C, 0)\n     +-- T (NC, 1)\n```\n\n(Here, `NC` means indicates a non-callable node and `C` a callable node. `-1`/`0`/`1` indicate the order of the node's connection to its parent).\n\nTo create a dictionary representation of a tree, pass its root node into the `dictify_tree` function, like so:\n\n```python\nfrom saplings import dictify_tree\n\ndictify_tree(root_node)\n```\n```python\n{\n  \"numpy\": {\n    \"is_callable\": False,\n    \"order\": -1,\n    \"frequency\": 1,\n    \"children\": [\n      {\"random\": ...},\n      {\"matmul\": ...},\n      {\"expand_dims\": ...}\n    ]\n  }\n}\n```\n\n### Interpreting the object hierarchy\n\nEach node is an _object_ and an object can either be _callable_ (i.e. has `__call__` defined) or _non-callable_. Links between nodes each have an _order_ –– a number which describes the relationship between a node and its parent. If a node is a 0th-order child of its parent object, then it's an attribute of that object. If it's a 1st-order child, then it's an attribute of the output of the parent object when it's called, and so on. For example:\n\n```python\nmy_parent = module.my_obj\n\nmy_parent.attr # attr is a 0th-order child of my_obj\nmy_parent().attr # attr is a 1st-order child of my_obj\nmy_parent()().attr # attr is a 2nd-order child of my_obj\n```\n\n#### What counts as a function?\n\nIn Python, subscripts, comparisons, and binary operations are all just syntactic sugar for function calls, and are treated by saplings as such. Here are some example \"translations:\"\n\n```python\nmy_obj['my_sub'] # => my_obj.__index__('my_sub')\nmy_obj + 10 # => my_obj.__add__(10)\nmy_obj == None # => my_obj.__eq__(None)\n```\n\n## Limitations\n\nSaplings _[statically analyzes](https://en.wikipedia.org/wiki/Static_program_analysis)_ the usage of a module in a program, meaning it doesn't actually execute any code. Instead, it traverses the program's AST and tracks \"object flow,\" i.e. how an object is passed through a program via variable assignments and calls of user-defined functions and classes. To demonstrate this idea, consider this example of [currying](https://en.wikipedia.org/wiki/Currying) and the tree saplings produces:\n\n```python\nimport torch\n\ndef compose(g, f):\n  def h(x):\n    return g(f(x))\n\n  return h\n\ndef F(x):\n  return x.T\n\ndef G(x):\n  return x.sum()\n\ncomposed_func = compose(F, G)\ncomposed_func(torch.tensor())\n```\n\n<p align=\"center\">\n  <img width=\"25%\" src=\"img/currying.png\" />\n</p>\n\nSaplings identifies `tensor` as an attribute of `torch`, then follows the object as it's passed into `composed_func`. Because saplings has an understanding of how `composed_func` is defined, it can analyze how the object is used _within_ the function and capture the `T` and `sum` sub-attributes.\n\nWhile saplings can track object flow through many complex paths in a program, I haven't tested every edge case, and there are some situations where saplings produces inaccurate trees. Below is a list of all the failure modes I'm aware of (and currently working on fixing). If you discover a bug or missing feature that isn't listed here, please [create an issue](https://github.com/shobrook/saplings/issues/new) for it.\n\n### Data Structures\n\nAs of right now, saplings can't track _assignments_ to comprehensions, generator expressions, dictionaries, lists, tuples, or sets. It can, however, track object flow _inside_ these data structures. For example, consider the following:\n\n```python\nimport numpy as np\n\nvectors = [np.array([0]), np.array([1]), np.array([2])]\nvectors[0].mean()\n```\n\nSaplings can capture `array` and add it to the `numpy` object hierarchy, but it cannot capture `mean`, and thus produces the following tree:\n\n<p align=\"center\">\n  <img width=\"25%\" src=\"img/data_structures.png\" />\n</p>\n\nThis limitation can have some unexpected consequences. For example, functions that return multiple values with one `return` statement (e.g. `return a, b, c`) are actually returning tuples. Therefore, the output of those functions won't be tracked by saplings. The same logic applies to variable unpacking with `*` and `**`.\n\n### Control Flow\n\nHandling control flow is tricky. Tracking object flow in loops and conditionals requires making assumptions about what code actually executes. For example, consider the following:\n\n```python\nimport numpy as np\n\nfor x in np.array([]):\n  print(x.mean())\n```\n\nBecause saplings only does _static_ analysis and not type inference, it doesn't know that `np.array([])` is an empty list, and that therefore the loop never executes. In this situation, capturing `mean` and adding the `__index__ -> mean` subtree to `numpy -> array` would be a false positive, since `x` (i.e. the output of `np.array().__iter__()`) is never defined. To handle this, saplings _should_ branch out and produce two possible trees for this module –– one that assumes the loop doesn't execute, and one that assumes it does:\n\n<p align=\"center\">\n  <img width=\"50%\" src=\"img/for_loop.png\" />\n</p>\n\nBut as of right now, saplings will only produce the tree on the right –– that is, we assume the bodies of `for` loops are always executed (because they usually are).\n\nBelow are the assumptions saplings makes for other control flow elements.\n\n#### `while` loops\n\n`while` loops are processed under the same assumption as `for` loops –– that is, the body of the loop is assumed to execute, even if the loop condition evaluates to `False`.\n\n#### `if`/`else` blocks\n\nSaplings processes `if` and `else` blocks more conservatively than loops. It tracks object flow within these blocks but doesn't allow changes to the namespace to persist into the parent scope. For example, given:\n\n```python\nimport numpy as np\n\nX = np.array()\nif condition:\n  X = np.matrix()\nelse:\n  X.mean()\n  X = None\n  Y = np.array()\n\nprint(X.sum())\nprint(Y.max())\n```\n\nsaplings will produce the following tree:\n\n<p align=\"center\">\n  <img width=\"40%\" src=\"img/if_else_1.png\" />\n</p>\n\nNotice how the value of `X` becomes ambiguous after we exit the `if` block, since we don't know if `condition` evaluates to `True` or `False`. To handle this, saplings simply stops tracking any variable that's defined in the outer scope, like `X`, if it's modified inside an `if`/`else` block. Similarly, notice how there exists an execution path where `Y` is never defined and `Y.max()` throws an error. To handle this, saplings assumes that any variable defined inside an `if`/`else` block, such as `Y`, doesn't persist into the outer scope.\n\nBoth of these assumptions are made in attempt to reduce false positives and false negatives. But ideally, saplings would branch out and produce two separate trees for this module –– one that assumes the `if` block executes and another that assumes the `else` block executes, like so:\n\n<p align=\"center\">\n  <img width=\"65%\" src=\"img/if_else_2.png\" />\n</p>\n\n#### `try`/`except` blocks\n\n`try`/`except` blocks are handled similarly to `if`/`else` blocks –– that is, changes to the namespace made in either block do not persist in the outer scope.\n\nNotably, `try` and `else` blocks are treated as a single block, since `else` is only executed if `try` executes without exceptions. And `finally` blocks are treated as separate from the control flow, since code in here always executes regardless of whether an exception is thrown.\n\n#### `return`, `break`, and `continue` statements\n\nAll code underneath a `return`, `break`, or `continue` statement is assumed not to execute and will not be analyzed. For example, consider this:\n\n```python\nimport numpy as np\n\nfor x in range(10):\n  y = np.array([x])\n  continue\n  y.mean()\n```\n\nIt may be the case that `mean` is actually an attribute of `np.array`, but saplings will not capture this since `y.mean()` is never executed.\n\nNotably, saplings doesn't apply this assumption to statements inside control flow blocks. For example, if the `continue` statement above was changed to:\n\n```python\nif condition:\n  continue\n```  \n\nThen `mean` _would_ be captured by saplings as an attribute of `np.array`.\n\n### Functions\n\n<!--#### Conditional return types\n\n`saplings` can generally track module and user-defined functions, but there are some edge cases it cannot handle. For example, because module functions must be treated as black-boxes to `saplings`, conditional return types cannot be accounted for. Consider the following code and trees that saplings produces:\n\n```python\nimport my_module\n\nmy_module.foo(5).attr1()\nmy_module.foo(10).attr2()\n```\n\nHowever, suppose `my_module.foo` is defined in the backend as:\n\n```python\ndef foo(x):\n  if x <= 5:\n    return ObjectA()\n  else:\n    return ObjectB()\n```\n\nand `ObjectB` doesn't have `attr1` as an attribute. Then, saplings will have incorrectly treated `attr1` and `attr2` as attributes of the same object.-->\n\n#### Recursion\n\nSaplings cannot process recursive function calls. Consider the following example:\n\n```python\nimport some_module\n\ndef my_recursive_func(input):\n  if input > 5:\n    return my_recursive_func(input - 1)\n  elif input > 1:\n    return some_module.foo\n  else:\n    return some_module.bar\n\noutput = my_recursive_func(5)\noutput.attr()\n```\n\nWe know this function returns `some_module.foo`, but saplings cannot tell which base case is hit, and therefore can't track the output. To avoid false positives, we assume this function returns nothing, and thus `attr` will not be captured and added to the object hierarchy. The tree saplings produces is:\n\n<p align=\"center\">\n  <img width=\"35%\" src=\"img/recursion.png\" />\n</p>\n\n#### Generators\n\nGenerators aren't processed as iterables. Instead, saplings ignores `yield`/`yield from` statements and treats the generator like a normal function. For example, given:\n\n```python\nimport some_module\n\ndef my_generator():\n  yield from some_module.some_items\n\nfor item in my_generator():\n  print(item.name)\n```\n\n`__index__ -> name` won't be added as a subtree to `some_module -> some_items`, and so the tree produced by saplings will look like this:\n\n<p align=\"center\">\n  <img width=\"35%\" src=\"img/generators.png\" />\n</p>\n\nNotably, this limitation will only produce false negatives –– not false positives.\n\n#### Anonymous Functions\n\nWhile the _bodies_ of anonymous (`lambda`) functions are processed, object flow through assignments and calls of those functions is not tracked. For example, given:\n\n```python\nimport numpy as np\n\ntrans_diag = lambda x: np.diagonal(x.T)\ntrans_diag(np.random.randn(5, 5))\n```\n\nsaplings will produce the following tree:\n\n<p align=\"center\">\n  <img width=\"45%\" src=\"img/anonymous.png\" />\n</p>\n\nNotice that `T` is not captured as an attribute of `numpy.random.randn`, but `diagonal` is captured as an attribute of `numpy`. This is because the body of the `lambda` function is processed by saplings, but the assignment to `trans_diag` is not recognized, and therefore the function call is not processed.\n\n### Classes\n\nSaplings can track object flow in static, class, and instance methods, getter and setter methods, class and instance variables, classes defined within classes, and class closures (i.e. functions that return classes). Notably, it can keep track of the state of each instance of a user-defined class. Consider the following program and the tree saplings produces:\n\n```python\nimport torch.nn as nn\nfrom torch import tensor\n\nclass Perceptron(nn.Module):\n  loss = None\n\n  def __init__(self, in_channels, out_channels):\n    super(Perceptron, self).__init__()\n    self.layer = nn.Linear(in_channels, out_channels)\n    self.output = Perceptron.create_output_layer()\n\n  @staticmethod\n  def create_output_layer():\n    def layer(x):\n      return x.mean()\n\n    return layer\n\n  @classmethod\n  def calculate_loss(cls, output, target):\n    cls.loss = output - target\n    return cls.loss\n\n  def __call__(self, x):\n    x = self.layer(x)\n    return self.output(x)\n\nmodel = Perceptron(1, 8)\noutput = model(tensor([10]))\nloss = Perceptron.calculate_loss(output, 8)\n```\n\n<p align=\"center\">\n  <img width=\"50%\" src=\"img/class.png\" />\n</p>\n\nWhile saplings can handle many common usage patterns for user-defined classes, such as the ones above, there are some things saplings can't handle yet. Below are all the limitations I'm aware of:\n\n#### Class Modifications\n\nIn the example above, calling the class method `Perceptron.calculate_loss` should change the value of the class variable `loss`. However, saplings cannot track modifications to a class when it's passed into a function. Saplings _can_ handle when a class is modified in the scope in which it was defined, like so:\n\n```python\nPerceptron.loss = tensor()\nPerceptron.loss.item()\n```\n\nHere, `item` would be captured and added to the tree as an attribute of `tensor`. But if the class is modified via an alias, like so:\n\n```python\nNeuralNet = Perceptron\nNeuralNet.loss = tensor()\nPerceptron.loss.item()\n```\n\nThen saplings won't capture `item`. Saplings also can't propagate class modifications to existing instances of the class. For example, continuing the code above:\n\n```python\nmodel = Perceptron(1, 8)\nPerceptron.loss = tensor()\nmodel.loss.item()\n```\n\nBecause the change to `loss`, a class variable, won't propagate to `model`, an instance of `Perceptron`, `item` won't be captured as an attribute of `tensor`.\n\n#### Inheritance\n\nSaplings cannot recognize inherited methods or variables in user-defined classes. For example, given:\n\n```python\nimport some_module\n\nclass MyClass(module.Foo):\n  def __init__(self, x):\n    self.bar(x)\n```\n\nsaplings will not recognize `bar` as an attribute of `module.Foo`, despite `bar` being an inherited method. This limitation also holds true when the base class is user-defined.\n\n#### Metaclasses\n\nOnce I learn what metaclasses actually are and how to use them, I'll get around to handling them in saplings. But for now this is on the bottom of my to-do list since 99.9% of Python users also don't know what the hell metaclasses are.\n\n### Miscellaneous\n\n#### `global` and `nonlocal` statements\n\n`global` statement are used inside functions to declare a variable to be in the global namespace. But saplings doesn't recognize these statements and change the namespace accordingly. For example, given:\n\n```python\nimport some_module\n\nmy_var = some_module.foo\n\ndef my_func():\n  global my_var\n  my_var = None\n\nmy_func()\nmy_var.bar()\n```\n\nsaplings will produce a tree with `bar` as an attribute of `foo`. This would be a false positive since calling `my_func` sets `my_var` to `None`, and of course `None` doesn't have `bar` as an attribute.\n\n`nonlocal` statements are similar to `global`s, except they allow you to modify variables declared in outer scopes. And like `global`s, saplings doesn't recognize `nonlocal` statements.\n\n#### Built-in functions\n\nNone of Python's [built-in functions](https://docs.python.org/3/library/functions.html) are recognized by saplings. For example, consider the `enumerate` function:\n\n```python\nimport some_module\n\nfor index, item in enumerate(some_module.items):\n  print(item.some_attr)\n```\n\nsaplings won't capture `attr` as an attribute of `some_module.items.__iter__`, which it would have if `some_module.items` wasn't wrapped by `enumerate`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shobrook/saplings",
    "keywords": "ast,attribute,type,object,hierarchy,tree,static,analysis,dependency,module",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "saplings",
    "package_url": "https://pypi.org/project/saplings/",
    "platform": null,
    "project_url": "https://pypi.org/project/saplings/",
    "project_urls": {
      "Homepage": "https://github.com/shobrook/saplings"
    },
    "release_url": "https://pypi.org/project/saplings/4.3.1/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Static analysis tool for Python",
    "version": "4.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15646063,
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f290a67be986a90fc555f7ff556f4a9ba6bed04e82da4ce1cb5463601e3424be",
          "md5": "8e63e54a3f052f0548fbf4d31364688c",
          "sha256": "2def31f92d57002a21fc5a41bb241e3702dfd905d91bc5d21c9b13df5471a535"
        },
        "downloads": -1,
        "filename": "saplings-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8e63e54a3f052f0548fbf4d31364688c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 3718,
        "upload_time": "2020-07-26T22:41:35",
        "upload_time_iso_8601": "2020-07-26T22:41:35.625170Z",
        "url": "https://files.pythonhosted.org/packages/f2/90/a67be986a90fc555f7ff556f4a9ba6bed04e82da4ce1cb5463601e3424be/saplings-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5a0be7626674308363ff517427c80da69e2b726ecebeb4a327577aaadf625cc",
          "md5": "7ed9cf3eff88dea9ca28b443dfeba380",
          "sha256": "3168213b3fcc7489634f4ec906e94aff948fc1aa144435196f3454fa86a13a1c"
        },
        "downloads": -1,
        "filename": "saplings-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ed9cf3eff88dea9ca28b443dfeba380",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 30343,
        "upload_time": "2020-12-22T07:36:57",
        "upload_time_iso_8601": "2020-12-22T07:36:57.541222Z",
        "url": "https://files.pythonhosted.org/packages/d5/a0/be7626674308363ff517427c80da69e2b726ecebeb4a327577aaadf625cc/saplings-4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cba0920c37dcfdca7f0a2f6f112b8e332f12d3f1188b31bea84e7cb69cf614b",
          "md5": "b63857bc00cda14ed29e8df0f20ad295",
          "sha256": "1400bb3e0b2fd837ca5c13d4d8f31456aa3856ce2e025eece57ec1d4dc675d68"
        },
        "downloads": -1,
        "filename": "saplings-4.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b63857bc00cda14ed29e8df0f20ad295",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26248,
        "upload_time": "2020-12-22T07:55:52",
        "upload_time_iso_8601": "2020-12-22T07:55:52.486687Z",
        "url": "https://files.pythonhosted.org/packages/9c/ba/0920c37dcfdca7f0a2f6f112b8e332f12d3f1188b31bea84e7cb69cf614b/saplings-4.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33a83c652d774e331579c4919a30371e30157e4eace6b41b4d56022504a45068",
          "md5": "0ad2f6656d4592aeb33384e5c46bbde1",
          "sha256": "176dd01624df56606c1c2b8e11fbd6cff526980b6099e46326e70194e716a642"
        },
        "downloads": -1,
        "filename": "saplings-4.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0ad2f6656d4592aeb33384e5c46bbde1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26243,
        "upload_time": "2020-12-22T08:23:06",
        "upload_time_iso_8601": "2020-12-22T08:23:06.411883Z",
        "url": "https://files.pythonhosted.org/packages/33/a8/3c652d774e331579c4919a30371e30157e4eace6b41b4d56022504a45068/saplings-4.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9f82a56e565e6d5877ae41b334f08da6d26cb593932a615bccf8515636a731e",
          "md5": "815bced7cf6fed6598ae61217012fb01",
          "sha256": "970ddbdfcf709dfe9180638ef2bc9e97716f7a2fd7723462b44fdbb5d9fe8521"
        },
        "downloads": -1,
        "filename": "saplings-4.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "815bced7cf6fed6598ae61217012fb01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26249,
        "upload_time": "2020-12-22T08:34:51",
        "upload_time_iso_8601": "2020-12-22T08:34:51.437197Z",
        "url": "https://files.pythonhosted.org/packages/b9/f8/2a56e565e6d5877ae41b334f08da6d26cb593932a615bccf8515636a731e/saplings-4.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce1e3e3338546f4fda5e798634f33f1c71927ae07a73eda82f72d0815f74d93d",
          "md5": "8b427ad8ece3ea9e4e6d3cc803ae6530",
          "sha256": "038c9b04bd4e334e688a5ba7ecf913cba5b9aef14622377fb8a7d8d0d218fe76"
        },
        "downloads": -1,
        "filename": "saplings-4.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8b427ad8ece3ea9e4e6d3cc803ae6530",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 31547,
        "upload_time": "2020-12-24T03:54:20",
        "upload_time_iso_8601": "2020-12-24T03:54:20.048096Z",
        "url": "https://files.pythonhosted.org/packages/ce/1e/3e3338546f4fda5e798634f33f1c71927ae07a73eda82f72d0815f74d93d/saplings-4.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d853a0304bac8372543c8cca302469f36f21985227185b84f41ef0559dd55af3",
          "md5": "3878b03c1ff634ec9179716174801d00",
          "sha256": "32cf5cc9dd755ee1646c76bd670b68f40189face6e8a2cfdcad68eaca4dafecf"
        },
        "downloads": -1,
        "filename": "saplings-4.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3878b03c1ff634ec9179716174801d00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 31555,
        "upload_time": "2020-12-24T04:02:34",
        "upload_time_iso_8601": "2020-12-24T04:02:34.357248Z",
        "url": "https://files.pythonhosted.org/packages/d8/53/a0304bac8372543c8cca302469f36f21985227185b84f41ef0559dd55af3/saplings-4.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77d1720f63aeb29edc3ef97f142c92f2fcf22ef1479ea64344e1c5b4624a6022",
          "md5": "9665fbe2fb1f083a49597c9f3068c066",
          "sha256": "8c3426e4f27ef30add4a6d9727546551641a370e64ea9832443cf4375998598e"
        },
        "downloads": -1,
        "filename": "saplings-4.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9665fbe2fb1f083a49597c9f3068c066",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26981,
        "upload_time": "2022-05-30T21:02:24",
        "upload_time_iso_8601": "2022-05-30T21:02:24.295608Z",
        "url": "https://files.pythonhosted.org/packages/77/d1/720f63aeb29edc3ef97f142c92f2fcf22ef1479ea64344e1c5b4624a6022/saplings-4.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "617751bf8c31821ac07aafc6453c405d9db3ea19a689781c9e433cef6e9edbbc",
          "md5": "23637691bc6dcffdbd6c2175f1736217",
          "sha256": "77cf5ea0db88dde8970307311e257cd71e9e31aab2f6140ae4cd7079715bc485"
        },
        "downloads": -1,
        "filename": "saplings-4.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "23637691bc6dcffdbd6c2175f1736217",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 35677,
        "upload_time": "2022-06-03T03:29:30",
        "upload_time_iso_8601": "2022-06-03T03:29:30.582555Z",
        "url": "https://files.pythonhosted.org/packages/61/77/51bf8c31821ac07aafc6453c405d9db3ea19a689781c9e433cef6e9edbbc/saplings-4.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c1206c34c24ef05bb5169a29ff3fb9157b13f19b293dca3190ddb772cfd9cbe",
          "md5": "7b72201e40b80523b6507c32632c42d8",
          "sha256": "48b287a6ac55c361ea47f43e5aab53b32582acfc58e941f6a4ae42cedad26506"
        },
        "downloads": -1,
        "filename": "saplings-4.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b72201e40b80523b6507c32632c42d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 28520,
        "upload_time": "2022-11-03T20:19:50",
        "upload_time_iso_8601": "2022-11-03T20:19:50.677172Z",
        "url": "https://files.pythonhosted.org/packages/0c/12/06c34c24ef05bb5169a29ff3fb9157b13f19b293dca3190ddb772cfd9cbe/saplings-4.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c1206c34c24ef05bb5169a29ff3fb9157b13f19b293dca3190ddb772cfd9cbe",
        "md5": "7b72201e40b80523b6507c32632c42d8",
        "sha256": "48b287a6ac55c361ea47f43e5aab53b32582acfc58e941f6a4ae42cedad26506"
      },
      "downloads": -1,
      "filename": "saplings-4.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7b72201e40b80523b6507c32632c42d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 28520,
      "upload_time": "2022-11-03T20:19:50",
      "upload_time_iso_8601": "2022-11-03T20:19:50.677172Z",
      "url": "https://files.pythonhosted.org/packages/0c/12/06c34c24ef05bb5169a29ff3fb9157b13f19b293dca3190ddb772cfd9cbe/saplings-4.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}