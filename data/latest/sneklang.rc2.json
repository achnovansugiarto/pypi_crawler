{
  "info": {
    "author": "Timoth Watts",
    "author_email": "tim@readevalprint.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. image:: logo.jpeg\n   :target: logo.jpeg\n\nSneklang \n========================\n\n.. image:: https://travis-ci.org/readevalprint/sneklang.svg?branch=master&4\n   :target: https://travis-ci.org/readevalprint/sneklang\n   :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/readevalprint/sneklang/badge.svg?branch=master&4\n   :target: https://coveralls.io/r/readevalprint/sneklang?branch=master\n   :alt: Coverage Status\n\n.. image:: https://badge.fury.io/py/sneklang.svg?5\n   :target: https://badge.fury.io/py/sneklang\n   :alt: PyPI Version\n\nTry online\n----------\n\nhttps://sneklang.functup.com\n\nSupports\n--------\n\nPython 3.7 or 3.8\n\n\nBasic Usage\n-----------\n\n``snek_eval`` returns a list of all the expressions in the provided code.\nGenerally you care about the last one. \n\n\nTo get very simple evaluating:\n\n.. code-block:: python\n\n    from sneklang import snek_eval\n\n    snek_eval(\"'Hi!' + ' world!'\")\n\nreturns ``[Hi! World!]``.\n\nExpressions can be as complex and convoluted as you want:\n\n.. code-block:: python\n\n    snek_eval(\"21 + 19 / 7 + (8 % 3) ** 9\")\n\nreturns ``[535.714285714]``.\n\nYou can add your own functions in as well.\n\n.. code-block:: python\n\n    snek_eval(\"square(11)\", scope={\"square\": lambda x: x*x})\n\nreturns ``[121]``.\n\n\nTry some dictionary or set comprehension.\n\n.. code-block:: python\n\n    >>> from sneklang import snek_eval\n    >>> snek_eval(\"{a:b for a,b in [('a', 1), ('b',2)]}\")\n    [{'a': 1, 'b': 2}]\n\n    >>> snek_eval(\"{a*a for a in [1,2,3]}\")\n    [{1, 4, 9}]\n\n\nYou can even define functions within the sand box at evaluation time.\n\n.. code-block:: python\n\n    >>> from sneklang import snek_eval\n    >>> snek_eval('''\n    ... def my_function(x): \n    ...     return x + 3\n    ... \n    ... my_function(5)\n    ... \n    ... ''')\n    [None, 8]\n\n\nAdvanced Usage\n--------------\n\n\n\n\nSome times you will want to run a dynamically defined sandboxed funtion in your app.\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... def my_function(x=2): \n    ...    return x ** 3\n    ... ''', scope=user_scope)\n    >>> user_func = user_scope['my_function']\n    >>> user_func()\n    8\n\n\nOr maybe create a decorator\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... def foo_decorator(func): \n    ...     def inner(s):\n    ...        return \"this is foo\", func(s)\n    ...     return inner\n    ...\n    ... @foo_decorator \n    ... def bar(s):\n    ...     return \"this is bar\", s\n    ... \n    ... output = bar(\"BAZ\")\n    ... ''', scope=user_scope)\n    >>> user_scope['output']\n    ('this is foo', ('this is bar', 'BAZ'))\n\n\n\nYou can also delete variables and catch exception\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... a = [1, 2, 3, 4, 5, 6, 7]\n    ... del a[3:5]\n    ... try:\n    ...     a[10]\n    ... except Exception as e:\n    ...     b = \"We got an error: \" + str(e)\n    ... ''', scope=user_scope)\n    >>> user_scope['a']\n    [1, 2, 3, 6, 7]\n    >>> user_scope['b']\n    \"We got an error: IndexError('list index out of range')\"\n\n\n\nAll exceptions will be wrapped in a `SnekRuntimeError` with `__context__` containing the\noriginal exception.\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... try:\n    ...    raise Exception(\"this is my last resort\")\n    ... except Exception as e:\n    ...     caught_exception = e\n    ... ''', scope=user_scope)\n    >>> user_scope['caught_exception']\n    SnekRuntimeError(\"Exception('this is my last resort')\")\n    >>> user_scope['caught_exception'].__context__\n    Exception('this is my last resort')\n\n.. code-block:: python\n\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... try:\n    ...     try:\n    ...         1/0\n    ...     except Exception as e:\n    ...         raise Exception(\"Bad math\") from e\n    ... except Exception as e:\n    ...     caught_exception = e\n    ... ''', scope=user_scope)\n    >>> user_scope['caught_exception']\n    SnekRuntimeError(\"Exception('Bad math')\")\n    >>> user_scope['caught_exception'].__context__\n    Exception('Bad math')\n    >>> user_scope['caught_exception'].__context__.__context__\n    SnekRuntimeError(\"ZeroDivisionError('division by zero')\")\n\n\nAnd sometimes, users write crappy code... `MAX_CALL_DEPTH` is configurable, of course.\nHere you can see some extreamly ineffecient code to multiply a number by 2\n\n.. code-block:: python\n\n    >>> from sneklang import SnekRuntimeError\n    >>> user_scope = {}\n    >>> out = snek_eval('''\n    ... def multiply_by_2(x): \n    ...    return (2 + multiply_by_2(x-1)) if x > 0 else 0\n    ... ''', scope=user_scope)\n\n    >>> multiply_by_2 = user_scope['multiply_by_2']\n    >>> multiply_by_2(5)\n    10\n    >>> try:\n    ...     multiply_by_2(50)\n    ... except SnekRuntimeError as e:\n    ...     print(f'oh no! \"{e}\" On line:{e.lineno} col:{e.col}')\n    oh no! \"RecursionError('Sorry, stack is to large')\" On line:3 col:15\n\n\n\n    >>> try:\n    ...     snek_eval(\"int('foo is not a number')\")\n    ... except SnekRuntimeError as e:\n    ...     print('oh no! {}'.format(e))\n    oh no! ValueError(\"invalid literal for int() with base 10: 'foo is not a number'\")\n\n\n\nLimited Power\n~~~~~~~~~~~~~\n\nAlso note, the ``**`` operator has been locked down by default to have a\nmaximum input value of ``4000000``, which makes it somewhat harder to make\nexpressions which go on for ever.  You can change this limit by changing the\n``sneklang.POWER_MAX`` module level value to whatever is an appropriate value\nfor you (and the hardware that you're running on) or if you want to completely\nremove all limitations, you can set the ``s.operators[ast.Pow] = operator.pow``\nor make your own function.\n\nOn my computer, ``9**9**5`` evaluates almost instantly, but ``9**9**6`` takes\nover 30 seconds.  Since ``9**7`` is ``4782969``, and so over the ``POWER_MAX``\nlimit, it throws a ``NumberTooHigh`` exception for you. (Otherwise it would go\non for hours, or until the computer runs out of memory)\n\nStrings (and other Iterables) Safety\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are also limits on string length (100000 characters,\n``MAX_STRING_LENGTH``).  This can be changed if you wish.\n\nRelated to this, if you try to create a silly long string/bytes/list, by doing\n``'i want to break free'.split() * 9999999999`` for instance, it will block you.\n\nIf Expressions\n--------------\n\nYou can use python style ``if x then y else z`` type expressions:\n\n.. code-block:: python\n\n    >>> snek_eval(\"'equal' if x == y else 'not equal'\", scope={\"x\": 1, \"y\": 2})\n    ['not equal']\n\nwhich, of course, can be nested:\n\n.. code-block:: python\n\n    >>> snek_eval(\"'a' if 1 == 2 else 'b' if 2 == 3 else 'c'\")\n    ['c']\n\n\nFunctions\n---------\n\nYou can define functions which you'd like the expresssions to have access to:\n\n.. code-block:: python\n\n    >>> snek_eval(\"double(21)\", scope={\"double\": lambda x:x*2})\n    [42]\n\nYou can define \"real\" functions to pass in rather than lambdas, of course too,\nand even re-name them so that expressions can be shorter\n\n.. code-block:: python\n\n    >>> def square(x):\n    ...     return x ** 2\n    >>> snek_eval(\"s(10) + square(2)\", scope={\"s\": square, \"square\":square})\n    [104]\n\nIf you don't provide your own ``scope`` dict, then the the following defaults\nare provided in the ``DEFAULT_SCOPE`` dict:\n\n+----------------+--------------------------------------------------+\n| ``int(x)``     | Convert ``x`` to an ``int``.                     |\n+----------------+--------------------------------------------------+\n| ``float(x)``   | Convert ``x`` to a ``float``.                    |\n+----------------+--------------------------------------------------+\n| ``str(x)``     | Convert ``x`` to a ``str`` (``unicode`` in py2)  |\n+----------------+--------------------------------------------------+\n\n.. code-block:: python\n\n    >>> snek_eval(\"a + b\", scope={\"a\": 11, \"b\": 100})\n    [111]\n\n    >>> snek_eval(\"a + b\", scope={\"a\": \"Hi \", \"b\": \"world!\"})\n    ['Hi world!']\n\nYou can also hand the scope of variable enames over to a function, if you prefer:\n\n\n.. code-block:: python\n\n    >>> class case_insensitive_scope(dict):\n    ...    def __getitem__(self, key):\n    ...        return super().__getitem__(key.lower())\n    ...    def __setitem__(self, key, value):\n    ...        return super().__setitem__(key.lower(), value)\n\n    >>> snek_eval('''\n    ... FOOBAR\n    ... foobar\n    ... FooBar''', scope=case_insensitive_scope({'foobar': 42}))\n    [42, 42, 42]\n\n.. code-block:: python\n\n    >>> import sneklang\n    >>> import random\n    >>> my_scope = {}\n    >>> my_scope.update(\n    ...        square=(lambda x:x*x),\n    ...        randint=(lambda top: int(random.random() * top))\n    ...    )\n    >>> snek_eval('square(randint(int(\"1\")))', scope=my_scope)\n    [0]\n\n\n\nOther...\n--------\n\n\nObject attributes that start with ``_`` or ``func_`` are disallowed by default.\nIf you really need that (BE CAREFUL!), then modify the module global\n``sneklang.DISALLOW_PREFIXES``.\n\nA few builtin functions are listed in ``sneklang.DISALLOW_FUNCTIONS``.  ``type``, ``open``, etc.\nIf you need to give access to this kind of functionality to your expressions, then be very\ncareful.  You'd be better wrapping the functions in your own safe wrappers.\n\nThe initial idea came from J.F. Sebastian on Stack Overflow\n( http://stackoverflow.com/a/9558001/1973500 ) with modifications and many improvements,\nsee the head of the main file for contributors list.\n\nThen danthedeckie on Github with simpleeval(https://github.com/danthedeckie/simpleeval)\n\nI've filled it out a bit more to allow safe funtion definitions, and better scope management.\n\nPlease read the ``test_snek.py`` file for other potential gotchas or\ndetails.  I'm very happy to accept pull requests, suggestions, or other issues.\nEnjoy!\n\nDeveloping\n----------\n\nRun tests::\n\n    $ make test\n\nOr to set the tests running on every file change:\n\n    $ make autotest\n\n(requires ``entr``)",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/readevalprint/sneklang",
    "keywords": "sandbox,parse,ast",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sneklang",
    "package_url": "https://pypi.org/project/sneklang/",
    "platform": "",
    "project_url": "https://pypi.org/project/sneklang/",
    "project_urls": {
      "Homepage": "https://github.com/readevalprint/sneklang"
    },
    "release_url": "https://pypi.org/project/sneklang/0.5.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Experimental minimal subset of Python for safe evaluation",
    "version": "0.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7313600,
  "releases": {
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12f8889e62e3abe2d6c9a97ebc07a598a85ea88fa2454647900ddfe7c3035ab9",
          "md5": "60ca32f9ed1ddbb2b206f1e34c70f073",
          "sha256": "e6ec3302581bc75bcae593ace04f71add4dfb0a1b0e4433caf2c85cd5b180a32"
        },
        "downloads": -1,
        "filename": "sneklang-0.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "60ca32f9ed1ddbb2b206f1e34c70f073",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17552,
        "upload_time": "2019-11-03T13:24:05",
        "upload_time_iso_8601": "2019-11-03T13:24:05.986531Z",
        "url": "https://files.pythonhosted.org/packages/12/f8/889e62e3abe2d6c9a97ebc07a598a85ea88fa2454647900ddfe7c3035ab9/sneklang-0.4.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4dc3fbf2f717cdb13f224cb7ac88599c089a35905e1eb5922b468028520ddfc",
          "md5": "d869871a68124f1ecb051925f1ab1b92",
          "sha256": "ec6e1a10886fbc56c4f98218f34ba73719f4ca414399c97d9d97ffa337d4e58d"
        },
        "downloads": -1,
        "filename": "sneklang-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d869871a68124f1ecb051925f1ab1b92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20672,
        "upload_time": "2020-05-24T14:34:34",
        "upload_time_iso_8601": "2020-05-24T14:34:34.918069Z",
        "url": "https://files.pythonhosted.org/packages/c4/dc/3fbf2f717cdb13f224cb7ac88599c089a35905e1eb5922b468028520ddfc/sneklang-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4dc3fbf2f717cdb13f224cb7ac88599c089a35905e1eb5922b468028520ddfc",
        "md5": "d869871a68124f1ecb051925f1ab1b92",
        "sha256": "ec6e1a10886fbc56c4f98218f34ba73719f4ca414399c97d9d97ffa337d4e58d"
      },
      "downloads": -1,
      "filename": "sneklang-0.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d869871a68124f1ecb051925f1ab1b92",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20672,
      "upload_time": "2020-05-24T14:34:34",
      "upload_time_iso_8601": "2020-05-24T14:34:34.918069Z",
      "url": "https://files.pythonhosted.org/packages/c4/dc/3fbf2f717cdb13f224cb7ac88599c089a35905e1eb5922b468028520ddfc/sneklang-0.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}