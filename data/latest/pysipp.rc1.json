{
  "info": {
    "author": "Tyler Goodlet",
    "author_email": "jgbt@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "[![Build Status](https://travis-ci.org/SIPp/pysipp.svg?branch=master)](https://travis-ci.org/SIPp/pysipp)\n# `pysipp` is for people who hate SIPp\nbut (want to) use it for automated testing because it gets the job done...\n\n\n## What is it?\nPython configuring and launching the infamous\n[SIPp](http://sipp.sourceforge.net/) using an api inspired by\n[requests](http://docs.python-requests.org/)\n\n## It definitely lets you\n\n- Launch multi-UA scenarios (aka SIPp subprocesses) sanely\n  * avoids nightmarish shell command concoctions from multiple terminals\n  * allows for complex functional or end-to-end SIP testing\n- Reuse your existing SIPp XML scripts\n- Integrate nicely with [pytest](http://pytest.org/)\n\n\n## It doesn't try to\n\n- Auto-generate SIPp XML scripts like [sippy_cup](https://github.com/mojolingo/sippy_cup)\n  * `pysipp` in no way tries to work around the problem of SIPp's awful\n    XML control language; your current scenario scripts are compatible!\n\n\n## Basic Usage\nLaunching the default UAC scenario is a short line:\n\n```python\nimport pysipp\npysipp.client(destaddr=('10.10.8.88', 5060))()\n```\n\nManually running the default `uac` --calls--> `uas` scenario is also simple:\n\n```python\nuas = pysipp.server(srcaddr=('10.10.8.88', 5060))\nuac = pysipp.client(destaddr=uas.srcaddr)\n# run server async\nuas(block=False)  # returns a `pysipp.launch.PopenRunner` instance by default\nuac()  # run client synchronously\n```\n\n## Authentication\nWhen using the `[authentication]` [sipp keyword](https://sipp.readthedocs.io/en/latest/scenarios/keywords.html#authentication)\nin scenarios, providing the credentials can be done with the\n`auth_username` and `auth_password` arguments, for example:\n\n```python\npysipp.client(auth_username='sipp', auth_password='sipp-pass')\n```\n\n## Multiple Agents\nFor multi-UA orchestrations we can use a `pysipp.scenario`.\nThe scenario from above is the default agent configuration:\n\n```python\nscen = pysipp.scenario()\nscen()  # run uac and uas synchronously to completion\n```\n\nSay you have a couple SIPp xml scrips and a device you're looking to\ntest using them (eg. a B2BUA or SIP proxy). Assuming you've organized\nthe scripts nicely in a directory like so:\n\n```\ntest_scenario/\n  uac.xml\n  referer_uas.xml\n  referee_uas.xml\n```\n\nIf you've configured your DUT to listen for for SIP on `10.10.8.1:5060`\nand route traffic to the destination specified in the SIP `Request-URI` header\nand your local ip address is `10.10.8.8`:\n\n```python\nscen = pysipp.scenario(dirpath='path/to/test_scenario/',\n                       proxyaddr=('10.10.8.1', 5060))\n\n# run all agents in sequence starting with servers\nscen()\n```\n\n**pysipp** by default uses `-screen_file` SIPp argument to redirect output,\n but this argument is only available in SIPp version >= [3.5.0](https://sourceforge.net/p/sipp/mailman/message/34041962/),\n for lower versions to run properly, this argument must be\n  disable setting `enable_screen_file` to `False`:\n\n```python\nscen = pysipp.scenario(enable_screen_file=False)\n```\n\nIf you've got multiple such scenario directories you can iterate over\nthem:\n\n```python\nfor path, scen in pysipp.walk('path/to/scendirs/root/'):\n    print(\"Running scenario collected from {}\".format(path))\n    scen()\n```\n\n## Async Scenario Launching\nYou can also launch multiple multi-UA scenarios concurrently using\nnon-blocking mode:\n\n```python\nscens = []\nfor path, scen in pysipp.walk('path/to/scendirs/root/', proxyaddr=('10.10.8.1', 5060)):\n    print(\"Running scenario collected from {}\".format(path))\n    scen(block=False)\n    scens.append(scen)\n\n# All scenarios should now be running concurrently so we can continue\n# program execution...\nprint(\"Continuing program execution...\")\n\n# Wait to collect all the results\nprint(\"Finalizing all scenarios and collecting results\")\nfor scen in scens:\n  scen.finalize()\n```\n\n`scen.finalize()` actually calls a special cleanup function defined in the\n[`pysipp_run_protocol`](https://github.com/SIPp/pysipp/blob/master/pysipp/__init__.py#L207)\nhook which invokes the internal reporting functions and returns a `dict` of cmd -> process\nitems.\n\n## API\nTo see the mapping of SIPp command line args to `pysipp.agent.UserAgent`\nattributes, take a look at `pysipp.command.sipp_spec`.\nThis should give you an idea of what can be set on each agent.\n\n\n## Features\n- (a)synchronous multi-scenario invocation\n- fully plugin-able thanks to [pluggy](https://github.com/hpk42/pluggy)\n- detailed console reporting\n\n... more to come!\n\n\n## Dependencies\nSIPp duh...Get the latest version on [github](https://github.com/SIPp/sipp)\n\n\n## Install\nfrom git\n```\npip install git+git://github.com/SIPp/pysipp.git\n```\n\n\n## Hopes and dreams\nI'd love to see `pysipp` become a standard end-to-end unit testing\ntool for SIPp itself (particularly if paired with `pytest`).\n\nOther thoughts are that someone might one day write actual\nPython bindings to the internals of SIPp such that a pure Python DSL\ncan be used instead of the silly default xml SIP-flow mini-language.\nIf/when that happens, pysipp can serve as a front end interface.\n\n\n## Advanced Usage\n`pysipp` comes packed with some nifty features for customizing\nSIPp default command configuration and launching as well as detailed\nconsole reporting. There is even support for remote execution of SIPp\nover the network using [rpyc](https://rpyc.readthedocs.org/en/latest/)\n\n### Enable detailed console reporting\n```python\npysipp.utils.log_to_stderr(\"DEBUG\")\n```\n\n### Applying default settings\nFor now see [#4](https://github.com/SIPp/pysipp/issues/4)\n\n## More to come?\n- document attributes / flags\n- writing plugins\n- using a `pysipp_conf.py`\n- remote execution\n- async mult-scenario load testing\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SIPp/pysipp",
    "keywords": "",
    "license": "GPLv2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysipp",
    "package_url": "https://pypi.org/project/pysipp/",
    "platform": "linux",
    "project_url": "https://pypi.org/project/pysipp/",
    "project_urls": {
      "Homepage": "https://github.com/SIPp/pysipp"
    },
    "release_url": "https://pypi.org/project/pysipp/0.1.0/",
    "requires_dist": [
      "pluggy (>=0.11.0)"
    ],
    "requires_python": "",
    "summary": "A SIPp scenario launcher",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8979283,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07ed1a98b7f953e0548f2a0f94d3465618bdd57c0bce4e70b26d681e423f09de",
          "md5": "3630de4cd02f614ebf831b5cb0825d2f",
          "sha256": "248122de8485794f0d87decb2ae3b85207dac616ccfbb8bb058afafeb405f8fa"
        },
        "downloads": -1,
        "filename": "pysipp-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3630de4cd02f614ebf831b5cb0825d2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31673,
        "upload_time": "2020-12-24T15:25:42",
        "upload_time_iso_8601": "2020-12-24T15:25:42.605758Z",
        "url": "https://files.pythonhosted.org/packages/07/ed/1a98b7f953e0548f2a0f94d3465618bdd57c0bce4e70b26d681e423f09de/pysipp-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a74805c3a84f18b5c07be8597c895ffd614e94c6cc208c04c81d95525aa483c",
          "md5": "c31bfa572b3449916033b68ff04d7140",
          "sha256": "e628548a9bbd8194fa9e1bf085d3b837e8e47ab419f754183d86e89b51ddd858"
        },
        "downloads": -1,
        "filename": "pysipp-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c31bfa572b3449916033b68ff04d7140",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23843,
        "upload_time": "2020-12-24T15:25:44",
        "upload_time_iso_8601": "2020-12-24T15:25:44.981592Z",
        "url": "https://files.pythonhosted.org/packages/4a/74/805c3a84f18b5c07be8597c895ffd614e94c6cc208c04c81d95525aa483c/pysipp-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07ed1a98b7f953e0548f2a0f94d3465618bdd57c0bce4e70b26d681e423f09de",
        "md5": "3630de4cd02f614ebf831b5cb0825d2f",
        "sha256": "248122de8485794f0d87decb2ae3b85207dac616ccfbb8bb058afafeb405f8fa"
      },
      "downloads": -1,
      "filename": "pysipp-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3630de4cd02f614ebf831b5cb0825d2f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 31673,
      "upload_time": "2020-12-24T15:25:42",
      "upload_time_iso_8601": "2020-12-24T15:25:42.605758Z",
      "url": "https://files.pythonhosted.org/packages/07/ed/1a98b7f953e0548f2a0f94d3465618bdd57c0bce4e70b26d681e423f09de/pysipp-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a74805c3a84f18b5c07be8597c895ffd614e94c6cc208c04c81d95525aa483c",
        "md5": "c31bfa572b3449916033b68ff04d7140",
        "sha256": "e628548a9bbd8194fa9e1bf085d3b837e8e47ab419f754183d86e89b51ddd858"
      },
      "downloads": -1,
      "filename": "pysipp-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c31bfa572b3449916033b68ff04d7140",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23843,
      "upload_time": "2020-12-24T15:25:44",
      "upload_time_iso_8601": "2020-12-24T15:25:44.981592Z",
      "url": "https://files.pythonhosted.org/packages/4a/74/805c3a84f18b5c07be8597c895ffd614e94c6cc208c04c81d95525aa483c/pysipp-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}