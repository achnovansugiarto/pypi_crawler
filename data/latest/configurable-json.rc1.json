{
  "info": {
    "author": "Robin van der Noord",
    "author_email": "contact@trialandsuccess.nl",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Configurable JSON Encoder\n\nBy default, the json.Encoder class' logic can only be customized to a certain extent:\n\n- a 'default' method can be overwritten to encode objects that JSON can't serialize by default;\n- an 'encode' method can be overwritten to fully rewrite the encoding logic, which is powerful but can be hard to change\n  if you need to change the specific behavior for a type in a nested structure;\n- an 'iterencode' method can be overwritten to handle the recursive behavior of the JSON encoder, but this method uses\n  functions under the hood that are not defined as class methods but rather as functions in the encoder\n  module (`c_make_encoder` and `_make_iterencode`), which thus can not be overwritten by class inheritance.\n\nThis module aims to help make adding custom rules to the JSON encoder easier, by injecting a middle\nlayer `ConfigurableJsonEncoder` which essentially uses a copied and slightly modified version of `_make_iterencode` from\nthe original module.\n\nSome examples of things you can do with this module (see examples.py for the actual rules)\n\n```python\nfrom examples import *\n\ndata = {\n    'original': ['behavior'],\n    'set': {1, 2, 3},\n    'namedtuple': Letters('a', 'b', 'c'),\n    \"class\": MyClass()\n}\ntry:\n    print(json.dumps(data))\nexcept TypeError:\n    ...  # Object of type set is not JSON serializable\n\n# default behavior without type error:\nprint(json.dumps(data, default=str))\n# {\"original\": [\"behavior\"], \"set\": \"{1, 2, 3}\", \"namedtuple\": [\"a\", \"b\", \"c\"], \"class\": \"<__main__.MyClass object at 0x...>\"}\n\n# the same behavior as above\nprint(json.dumps(data, cls=DummyEncoder))\n# {\"original\": [\"behavior\"], \"set\": \"{1, 2, 3}\", \"namedtuple\": [\"a\", \"b\", \"c\"], \"class\": \"<__main__.MyClass object at 0x...>\"}\n\n# encodes set into a list:\nprint(json.dumps(data, cls=SetEncoder))\n# {\"original\": [\"behavior\"], \"set\": [1, 2, 3], \"namedtuple\": [\"a\", \"b\", \"c\"], \"class\": \"<__main__.MyClass object at 0x...>\"}\n\n# calls .tojson() which uses transform to output a string\nprint(json.dumps(data, cls=ToJSONEncoder))\n# {\"original\": [\"behavior\"], \"set\": \"{1, 2, 3}\", \"namedtuple\": [\"a\", \"b\", \"c\"], \"class\": [\"my\", \"data\", \"as\", \"json\"]}\n\n# converts namedtuple to a dictionary instead of a list (the default behavior)\nprint(json.dumps(data, cls=MyEncoder))\n# {\"original\": [\"behavior\"], \"set\": [1, 2, 3], \"namedtuple\": {\"a\": \"a\", \"b\": \"b\", \"c\": \"c\"}, \"class\": {\"my data\": [\"as\", \"a\", \"dict\"]}}\n\n```\n\n## Usage:\n\nSimply extend `ConfigurableJsonEncoder` with a `rules` method that returns a `JSONRule` or `None` based on the\ninput `o` (which is one unit in the nested data tree). Again, see `examples.py` for inspiration.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trialandsuccess/configurablejson",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Configurable-JSON",
    "package_url": "https://pypi.org/project/Configurable-JSON/",
    "platform": null,
    "project_url": "https://pypi.org/project/Configurable-JSON/",
    "project_urls": {
      "Homepage": "https://github.com/trialandsuccess/configurablejson"
    },
    "release_url": "https://pypi.org/project/Configurable-JSON/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Easily Extend the JSON Encoder with Custom Rules",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15804068,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0938840f30a771646777314b75b000b341486f3eba60c25f50c38ae6cc58476d",
          "md5": "f6b9b16ed2395c211af3bae54a20e0b9",
          "sha256": "1e7c8a4350105d028e4a7f87e2a5e9065b0fd9399f704b1e15669ce1ebe060a6"
        },
        "downloads": -1,
        "filename": "Configurable_JSON-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6b9b16ed2395c211af3bae54a20e0b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5041,
        "upload_time": "2022-11-17T16:52:37",
        "upload_time_iso_8601": "2022-11-17T16:52:37.138815Z",
        "url": "https://files.pythonhosted.org/packages/09/38/840f30a771646777314b75b000b341486f3eba60c25f50c38ae6cc58476d/Configurable_JSON-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0938840f30a771646777314b75b000b341486f3eba60c25f50c38ae6cc58476d",
        "md5": "f6b9b16ed2395c211af3bae54a20e0b9",
        "sha256": "1e7c8a4350105d028e4a7f87e2a5e9065b0fd9399f704b1e15669ce1ebe060a6"
      },
      "downloads": -1,
      "filename": "Configurable_JSON-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f6b9b16ed2395c211af3bae54a20e0b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5041,
      "upload_time": "2022-11-17T16:52:37",
      "upload_time_iso_8601": "2022-11-17T16:52:37.138815Z",
      "url": "https://files.pythonhosted.org/packages/09/38/840f30a771646777314b75b000b341486f3eba60c25f50c38ae6cc58476d/Configurable_JSON-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}