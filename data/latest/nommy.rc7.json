{
  "info": {
    "author": "Johan Nestaas",
    "author_email": "johannestaas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Environment :: MacOS X",
      "Environment :: Win32 (MS Windows)",
      "Environment :: X11 Applications :: Qt",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python"
    ],
    "description": "nommy\n=====\n\nA python byte and bit parser inspired by Rust's nom.\n\nInstallation\n------------\n\nFrom the project root directory::\n\n    $ python setup.py install\n\nFrom pip::\n\n    $ pip install nommy\n\nUsage\n-----\n\n# Parser\n\nYou specify a class wrapped with `@nommy.parser` that has type hints in the order\nthat variables occur in the bytes.\n\nExample::\n\n    import nommy\n\n    @nommy.parser\n    class Example:\n        magic_str: nommy.string(8)\n        some_unsigned_byte: nommy.le_u8\n        some_unsigned_16bit: nommy.le_u16\n        some_flag: nommy.flag\n        next_flag: nommy.flag\n        six_bit_unsigned: nommy.le_u(6)\n\n\n    example, rest_of_bytes = Example.parse(b'CAFEBABE\\xff\\x12\\x34\\x9f')\n    print(example.magic_str)  # prints \"CAFEBABE\"\n    print(example.some_unsigned_byte)  # prints 255, from \\xff\n    print(hex(example.some_unsigned_16bit))  # prints 0x3412 , because little endian \\x12\\x34\n    # \\x9f would be boolean 10011111\n    # This splits into 2 flags at first, 1 and 0, True and False\n    # Then it contains 011111 or 0x1f, the six bit unsigned int, so 31.\n    print(example.some_flag)  # \"True\" from first bit of \\x9f\n    print(example.next_flag)  # \"False\" from next bit\n    print(example.six_bit_unsigned)  # \\x1f or 31\n\nTo run this, see `examples/readme_example.py`\n\n# Endianedness and Signedness\n\nThere are several little-endian and big-endian types to use, such as::\n\n    @parser\n    class LittleEndianUnsigned:\n        eight_bit: le_u8\n        sixteen_bit: le_u16\n        thirtytwo_bit: le_u32\n        sixtyfour_bit: le_u64\n        one_bit: le_u(1)\n        two_bit: le_u(2)\n        ...\n        seven_bit: le_u(7)\n\nYou also have signed sizes, like `le_i8`, `le_i16`, `le_i32`, and `le_i64`.\nFor each of those, you also have big-endian: `be_u16`, ...\n\n# Strings\n\nThere are three string types you can parse.\n\nYou can parse a static length string::\n\n    static_len: string(12)\n\nYou can parse a null-terminated string::\n\n    null_term: string(None)\n\nAnd you also can parse pascal strings::\n\n    some_str: pascal_string\n\n# Flag\n\nYou also can trivially extract a bit as a boolean variable::\n\n    debug: nommy.flag\n\n# Enum\n\nYou can also create an `le_enum` or `be_enum` if you want to parse something\nlike a DNS rtype, to have easy named values::\n\n    from enum import Enum\n    from nommy import le_enum, parser\n\n    @le_enum(4)  # 4 bit size\n    class DNSRType(Enum):\n       A = 1\n       NS = 2\n       MD = 3\n       MF = 4\n       ...\n\n    @parser\n    class DNSRecord:\n        rtype: DNSRType\n        ...\n\n    data, rest = DNSRecord.parse(b'\\x10...')\n    assert data == DNSRecord(rtype=DNSRType.A, ...)\n\n# Nested Parser\n\nParsers can be split up into multiple classes, then combined::\n\n    from nummy import parser, le_u8, string\n\n    @parser\n    class Header:\n        id: le_u8\n        recipient: string(None)\n        sender: string(None)\n\n    @parser\n    class Body:\n        subject: string(None)\n        text: string(None)\n\n    @parser\n    class Email:\n        header: Header\n        body: Body\n\nSee `examples/nested.py`\n\n\n# Repeating\n\nSometimes a field in a structure specifies the number of repeating fields, such as in DNS you have\nQDCOUNT and ANCOUNT for the number of queries and answers that will be in a following section.\nNommy supports this with the `repeating` class, which allows you to specify a data type that repeats\nthe number of times specified by a previous field, likely in the header.\n\nThe format is: `repeating(SomeDataType, 'integer_field_name')`\n\nWe also have `repeating_until_null` so that you can handle items that keep repeating indefinitely\nuntil a null byte is reached, for example, in DNS names that are repeating pascal strings essentially.\n\nExamples::\n\n    @parser\n    class SomeStruct:\n        # Total size, 1 byte.\n        some_flag1: flag\n        some_flag2: flag\n        some_flag3: flag\n        some_flag4: flag\n        some_four_bit_nibble: le_u(4)\n\n    @parser\n    class HasRepeats:\n        name_ct: le_u8\n        names: repeating(string(None), 'name_ct')\n        struct_ct: le_u8\n        structs: repeating(SomeStruct, 'struct_ct')\n        labels: repeating_until_null(string(4))\n\n    data, rest = HasRepeats.parse(\n        # 4 names, null terminated strings\n        b'\\x04foo\\0bar\\0baz\\0quux\\0'\n        # 2 structs, 1 byte each\n        # First is \\xff, so all true flags and 15 value nibble\n        # Second is \\x0a, so all false flags and 10 value nibble\n        b'\\x02\\xff\\x0a'\n        # Labels keep going until they hit a null byte\n        b'ALFA'\n        b'BETA'\n        b'GAMA'\n        b'DLTA'\n        b'\\x00'\n    )\n\nSee `examples/readme_repeating_example.py`\n\n\nYou can even reference other parser values by splitting the field with a period like `header.payload_ct`::\n\n    from nommy import parser, repeating, le_u8, string\n\n    @parser\n    class Header:\n        id: le_u8\n        payload_ct: le_u8\n\n    @parser\n    class Payload:\n        name: string(None)\n\n    @parser\n    class Message:\n        header: Header\n        string_ct: le_u8\n        strings: repeating(string(None), 'string_ct')\n        payloads: repeating(Payload, 'header.payload_ct')\n\nSee examples for more.\n\nFor a full example that shows nested parsers with repeating values that\nclosely matches an actual DNS parser, check `examples/dns.py`\n\n\nRelease Notes\n-------------\n\n:0.3.3:\n    Fix first example of readme\n:0.3.2:\n    Fix readme and add `examples/readme_repeating_example.py`\n:0.3.1:\n    Add `repeating_until_null` to handle DNS names\n:0.3.0:\n    Added support for nested fields and repeating values.\n:0.2.0:\n    Added enums.\n:0.1.0:\n    Works for major types, with strings and flags.\n:0.0.1:\n    Project created",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johannestaas/nommy",
    "keywords": "bytes struct nom",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nommy",
    "package_url": "https://pypi.org/project/nommy/",
    "platform": "",
    "project_url": "https://pypi.org/project/nommy/",
    "project_urls": {
      "Homepage": "https://github.com/johannestaas/nommy"
    },
    "release_url": "https://pypi.org/project/nommy/0.3.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python byte and bit parser inspired by Rust's nom.",
    "version": "0.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7368847,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8bac596dc8602c71d4c74cd150a07a38633ec83e7ade65a45b47cbd2d367481",
          "md5": "9caffef59c856ee840fe192b7c7db43d",
          "sha256": "62cb250abb4e74534781473f8ddccbf9b152dc4917666fd84c0a058be8b0d655"
        },
        "downloads": -1,
        "filename": "nommy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9caffef59c856ee840fe192b7c7db43d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3516,
        "upload_time": "2020-05-30T07:15:54",
        "upload_time_iso_8601": "2020-05-30T07:15:54.459969Z",
        "url": "https://files.pythonhosted.org/packages/b8/ba/c596dc8602c71d4c74cd150a07a38633ec83e7ade65a45b47cbd2d367481/nommy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "530a01292812020c55c1b0e2f28474a02b20219e59298b0b9f981ef964263dc1",
          "md5": "600293c422bdd73b6a2fd7706b034a73",
          "sha256": "f6231644bc6b31275e89c92f1cba5ba3c9df520a8262f4c8db9555bd844160a9"
        },
        "downloads": -1,
        "filename": "nommy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "600293c422bdd73b6a2fd7706b034a73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5667,
        "upload_time": "2020-05-31T01:54:26",
        "upload_time_iso_8601": "2020-05-31T01:54:26.629714Z",
        "url": "https://files.pythonhosted.org/packages/53/0a/01292812020c55c1b0e2f28474a02b20219e59298b0b9f981ef964263dc1/nommy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7efc0a99983cd0e40a3ac70b721a93d4f9c2c81569418ff238622783a860cad6",
          "md5": "5343110eaa5485d3060bd62c97e7340f",
          "sha256": "06ec60d5e9343285ac3474c84056484ee7f3c71e8d52b8bfccd4e5ea8d0694f2"
        },
        "downloads": -1,
        "filename": "nommy-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5343110eaa5485d3060bd62c97e7340f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6343,
        "upload_time": "2020-05-31T02:44:00",
        "upload_time_iso_8601": "2020-05-31T02:44:00.642526Z",
        "url": "https://files.pythonhosted.org/packages/7e/fc/0a99983cd0e40a3ac70b721a93d4f9c2c81569418ff238622783a860cad6/nommy-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68f7f86e9e7786d09e0e8bcb2e7c85df11e5783f24b138c854b62c560aa24f56",
          "md5": "7d00f914151b36f777a537ac4966c181",
          "sha256": "a6d58b62df84232e84d5f377464faa737b933fef23e3b1564f6dd4d807ea48c7"
        },
        "downloads": -1,
        "filename": "nommy-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d00f914151b36f777a537ac4966c181",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7666,
        "upload_time": "2020-06-01T07:25:39",
        "upload_time_iso_8601": "2020-06-01T07:25:39.052306Z",
        "url": "https://files.pythonhosted.org/packages/68/f7/f86e9e7786d09e0e8bcb2e7c85df11e5783f24b138c854b62c560aa24f56/nommy-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "820e8bf76c1c102cee91e06ccff8c6e31a31541209624c5db2f7044e2bc8cf95",
          "md5": "966f6cd97c9c79e084cfeb258422d219",
          "sha256": "a1e0c6e8b989d614190022cd4998b7ac47f82c5af2df919ea5d67d61bd929f17"
        },
        "downloads": -1,
        "filename": "nommy-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "966f6cd97c9c79e084cfeb258422d219",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7843,
        "upload_time": "2020-06-01T07:59:38",
        "upload_time_iso_8601": "2020-06-01T07:59:38.744633Z",
        "url": "https://files.pythonhosted.org/packages/82/0e/8bf76c1c102cee91e06ccff8c6e31a31541209624c5db2f7044e2bc8cf95/nommy-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c84154a1dccc838e22f729ac24eeeb5a80b74220a74d75017f0c11bfde789bde",
          "md5": "1ab7d29b7189f21ac406f9e15f610f76",
          "sha256": "563663b7c62d5a212988591d9b0c25c4ea95c82d6c16e71e0898f2e786d3fad1"
        },
        "downloads": -1,
        "filename": "nommy-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1ab7d29b7189f21ac406f9e15f610f76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9264,
        "upload_time": "2020-06-01T08:14:52",
        "upload_time_iso_8601": "2020-06-01T08:14:52.644556Z",
        "url": "https://files.pythonhosted.org/packages/c8/41/54a1dccc838e22f729ac24eeeb5a80b74220a74d75017f0c11bfde789bde/nommy-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ef3178106bf52bf7975a50b6bef54187a57a02d99f5396544211e0ea2fca442",
          "md5": "20976d170e866393408b48da48ae7479",
          "sha256": "e85cc2f87a86b8c42e51bbbb485f073021391648fdcb19fd842f6097bf18c4e2"
        },
        "downloads": -1,
        "filename": "nommy-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "20976d170e866393408b48da48ae7479",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9444,
        "upload_time": "2020-06-01T08:23:09",
        "upload_time_iso_8601": "2020-06-01T08:23:09.666977Z",
        "url": "https://files.pythonhosted.org/packages/1e/f3/178106bf52bf7975a50b6bef54187a57a02d99f5396544211e0ea2fca442/nommy-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ef3178106bf52bf7975a50b6bef54187a57a02d99f5396544211e0ea2fca442",
        "md5": "20976d170e866393408b48da48ae7479",
        "sha256": "e85cc2f87a86b8c42e51bbbb485f073021391648fdcb19fd842f6097bf18c4e2"
      },
      "downloads": -1,
      "filename": "nommy-0.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "20976d170e866393408b48da48ae7479",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9444,
      "upload_time": "2020-06-01T08:23:09",
      "upload_time_iso_8601": "2020-06-01T08:23:09.666977Z",
      "url": "https://files.pythonhosted.org/packages/1e/f3/178106bf52bf7975a50b6bef54187a57a02d99f5396544211e0ea2fca442/nommy-0.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}