{
  "info": {
    "author": "John Bywater",
    "author_email": "john.bywater@appropriatesoftware.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: BSD License",
      "License :: Other/Proprietary License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Welcome to the OrjsonTranscoder project\n\nThis package provides a `OrjsonTranscoder` class for use with\nthe Python eventsourcing library that uses the [orjson\nlibrary](https://pypi.org/project/orjson).\n\n## Installation\n\nUse pip to install the [stable distribution](https://pypi.org/project/eventsourcing-orjsontranscoder/)\nfrom the Python Package Index.\n\n    $ pip install eventsourcing_orjsontranscoder\n\nIt is recommended to install Python packages into a Python virtual environment.\n\nThis package uses Cython, so relevant build tools may need to be\ninstalled before this package can be installed successfully.\n\n\n## Synopsis\n\n```python\n>>> from eventsourcing_orjsontranscoder import OrjsonTranscoder, CTupleAsList\n>>> t = OrjsonTranscoder()\n>>> t.register(CTupleAsList())\n>>> d = t.encode((1,2,3))\n>>> d\nb'{\"_type_\":\"tuple_as_list\",\"_data_\":[1,2,3]}'\n>>> t.decode(d)\n(1, 2, 3)\n\n```\n\n## Features\n\nMost importantly, `OrjsonTranscoder` supports custom transcoding of instances\nof `tuple` and subclasses of `str`, `int`, `dict` and `tuple`. This is an\nimportant improvement on the core library's `JSONTranscoder` class which converts\n`tuple` to `list` and loses type information for subclasses of `str`, `int`, `dict`\nand `tuple`.\n\nIt is also faster than `JSONTranscoder`, encoding approximately x3 faster\nand decoding approximately x2 faster. This is less important than the preservation\nof type information (see above) because latency in your application will\nusually be dominated by database interactions. However, it's nice that it\nis not slower.\n\n| class            |  encode |  decode |\n|------------------|--------:|--------:|\n| OrjsonTranscoder |  6.8 μs | 13.8 μs |\n| JSON Transcoder  | 20.1 μs | 25.7 μs |\n\nThe above benchmark was performed on GitHub using the following object,\nwhich is perhaps representative of the state of a domain event in an\nevent-sourced application.\n\n```python\nobj = {\n    \"originator_id\": uuid5(NAMESPACE_URL, \"some_id\"),\n    \"originator_version\": 123,\n    \"timestamp\": DomainEvent.create_timestamp(),\n    \"a_str\": \"hello\",\n    \"b_int\": 1234567,\n    \"c_tuple\": (1, 2, 3, 4, 5, 6, 7),\n    \"d_list\": [1, 2, 3, 4, 5, 6, 7],\n    \"e_dict\": {\"a\": 1, \"b\": 2, \"c\": 3},\n    \"f_valueobj\": CustomType2(\n        CustomType1(UUID(\"b2723fe2c01a40d2875ea3aac6a09ff5\"))\n    ),\n}\n\n```\n\n## Custom Transcodings\n\nDefine custom transcodings for your custom value object types by subclassing\n``CTranscoding``. The prefix ``C`` is used to distinguish these classes from the\n``Transcoding`` classes provided by the core Python eventsourcing library.\n\nFor example, consider the custom value object ``MyInt`` below.\n\n```python\nclass MyInt(int):\n    def __repr__(self):\n        return f\"{type(self).__name__}({super().__repr__()})\"\n\n    def __eq__(self, other):\n        return type(self) == type(other) and super().__eq__(other)\n```\n\nYou can define a custom transcoding for ``MyInt`` as a normal Python class in a\nnormal Python module (``.py`` file) using the ``CTranscoding`` class.\n\n```python\nclass CMyIntAsInt(CTranscoding):\n    def type(self):\n        return MyInt\n\n    def name(self):\n        return \"myint_as_int\"\n\n    def encode(self, obj):\n        return int(obj)\n\n    def decode(self, data):\n        return MyInt(data)\n```\n\nAlternatively for greater speed, you can define a custom transcoding for ``MyInt``\nas a Cython extension type class in a Cython module (``.pyx`` file) using the\n``CTranscoding`` extension type. See this project's Git repository for examples.\n\n```cython\nfrom _eventsourcing_orjsontranscoder cimport CTranscoding\n\nfrom my_domain_model import MyInt\n\ncdef class CMyIntAsInt(CTranscoding):\n    cpdef object type(self):\n        return MyInt\n\n    cpdef object name(self):\n        return \"myint_as_int\"\n\n    cpdef object encode(self, object obj):\n        return int(obj)\n\n    cpdef object decode(self, object data):\n        return MyInt(data)\n```\n\nIf you define Cython modules, you will need to build them in-place before you\ncan use them. If you are distributing your code, you will also need to configure\nyour distribution to build the Cython module when your code is installed.\n\n```commandline\n$ cythonize -i my_transcodings.pyx\n```\n\nSee the Cython documentation for more information about Cython.\n\n\n## Using the OrjsonTranscoder\n\nTo use the ``OrjsonTranscoder`` class in a Python eventsourcing application\nobject, override  the `construct_transcoder()` and `register_transcodings()`\nmethods.\n\n```python\n\nfrom eventsourcing.application import Application\nfrom eventsourcing.domain import Aggregate, event\nfrom eventsourcing_orjsontranscoder import (\n    CDatetimeAsISO,\n    CTupleAsList,\n    CUUIDAsHex,\n    OrjsonTranscoder,\n)\n\n\nclass DogSchool(Application):\n    def construct_transcoder(self):\n        transcoder = OrjsonTranscoder()\n        self.register_transcodings(transcoder)\n        return transcoder\n\n    def register_transcodings(self, transcoder):\n        transcoder.register(CDatetimeAsISO())\n        transcoder.register(CTupleAsList())\n        transcoder.register(CUUIDAsHex())\n        transcoder.register(CMyIntAsInt())\n\n    def register_dog(self, name, age):\n        dog = Dog(name, age)\n        self.save(dog)\n        return dog.id\n\n    def add_trick(self, dog_id, trick):\n        dog = self.repository.get(dog_id)\n        dog.add_trick(trick)\n        self.save(dog)\n\n    def update_age(self, dog_id, age):\n        dog = self.repository.get(dog_id)\n        dog.update_age(age)\n        self.save(dog)\n\n    def get_dog(self, dog_id):\n        dog = self.repository.get(dog_id)\n        return {\"name\": dog.name, \"tricks\": tuple(dog.tricks), \"age\": dog.age}\n\n\nclass Dog(Aggregate):\n    @event(\"Registered\")\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.tricks = []\n\n    @event(\"TrickAdded\")\n    def add_trick(self, trick):\n        self.tricks.append(trick)\n\n    @event(\"AgeUpdated\")\n    def update_age(self, age):\n        self.age = age\n\n\ndef test_dog_school():\n    # Construct application object.\n    school = DogSchool()\n\n    # Evolve application state.\n    dog_id = school.register_dog(\"Fido\", MyInt(2))\n    school.add_trick(dog_id, \"roll over\")\n    school.add_trick(dog_id, \"play dead\")\n    school.update_age(dog_id, MyInt(5))\n\n    # Query application state.\n    dog = school.get_dog(dog_id)\n    assert dog[\"name\"] == \"Fido\"\n    assert dog[\"tricks\"] == (\"roll over\", \"play dead\")\n    assert dog[\"age\"] == MyInt(5)\n\n    # Select notifications.\n    notifications = school.notification_log.select(start=1, limit=10)\n    assert len(notifications) == 4\n```\n\nSee the [library docs](https://eventsourcing.readthedocs.io/en/stable/topics/persistence.html#transcodings)\nfor more information about transcoding, but please note the `CTranscoder` uses a slightly\ndifferent API.\n\n\n## Developers\n\nAfter cloning the repository, you can set up a virtual environment and\ninstall dependencies by running the following command in the root\nfolder.\n\n    $ make install\n\nAfter making changes, please run the tests.\n\n    $ make test\n\nCheck the formatting of the code.\n\n    $ make lint\n\nYou can automatically reformat the code by running the following command.\n\n    $ make fmt\n\nIf the project dependencies change, you can update your packages by running\nthe following command.\n\n    $ make update-packages\n\nPlease submit changes for review by making a pull request.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://eventsourcing.readthedocs.io/",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eventsourcing-orjsontranscoder",
    "package_url": "https://pypi.org/project/eventsourcing-orjsontranscoder/",
    "platform": "",
    "project_url": "https://pypi.org/project/eventsourcing-orjsontranscoder/",
    "project_urls": {
      "Homepage": "https://eventsourcing.readthedocs.io/",
      "Repository": "https://github.com/pyeventsourcing/eventsourcing-orjsontranscoder"
    },
    "release_url": "https://pypi.org/project/eventsourcing-orjsontranscoder/0.1.2/",
    "requires_dist": [
      "orjson (>=3.6.7,<3.7.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Python package for OrjsonTranscoder.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12900055,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0da8c24edc78a7419af6131af63f3e7160433347a5646fb33ab7f66953c6d6b",
          "md5": "88452adc8a1a60a6aa8b460ce35dd395",
          "sha256": "9c59f46686d47f7dee7caf22fb2efb74fdcb32299df46c52935e5141be3bc7a3"
        },
        "downloads": -1,
        "filename": "eventsourcing_orjsontranscoder-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "88452adc8a1a60a6aa8b460ce35dd395",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 8757,
        "upload_time": "2022-02-15T17:03:12",
        "upload_time_iso_8601": "2022-02-15T17:03:12.825354Z",
        "url": "https://files.pythonhosted.org/packages/a0/da/8c24edc78a7419af6131af63f3e7160433347a5646fb33ab7f66953c6d6b/eventsourcing_orjsontranscoder-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2ddb21b00b8ee5a8ea72022658aace19f6767f20781d9a899697eb0b0d6e339",
          "md5": "5b1e958b8bc86a2dd3ff98f9ccc59182",
          "sha256": "40b9ae7fce065a7d98b20eef309122796f68013b2776970440f761621b6b975b"
        },
        "downloads": -1,
        "filename": "eventsourcing_orjsontranscoder-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5b1e958b8bc86a2dd3ff98f9ccc59182",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 8733,
        "upload_time": "2022-02-15T17:13:42",
        "upload_time_iso_8601": "2022-02-15T17:13:42.986453Z",
        "url": "https://files.pythonhosted.org/packages/a2/dd/b21b00b8ee5a8ea72022658aace19f6767f20781d9a899697eb0b0d6e339/eventsourcing_orjsontranscoder-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8a6a32754e2ef30b4472e267bcccfc1cf846bf6165c49206ed62ed1cd97b2cb",
          "md5": "e31ba6c27560ef513b0c73595975ef57",
          "sha256": "d4ecabfcbc1ef716b39cdfc047f87ba11216dcf597d88c0a7f5e6599a0f31457"
        },
        "downloads": -1,
        "filename": "eventsourcing_orjsontranscoder-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e31ba6c27560ef513b0c73595975ef57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 9390,
        "upload_time": "2022-02-15T17:37:32",
        "upload_time_iso_8601": "2022-02-15T17:37:32.171689Z",
        "url": "https://files.pythonhosted.org/packages/f8/a6/a32754e2ef30b4472e267bcccfc1cf846bf6165c49206ed62ed1cd97b2cb/eventsourcing_orjsontranscoder-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8a6a32754e2ef30b4472e267bcccfc1cf846bf6165c49206ed62ed1cd97b2cb",
        "md5": "e31ba6c27560ef513b0c73595975ef57",
        "sha256": "d4ecabfcbc1ef716b39cdfc047f87ba11216dcf597d88c0a7f5e6599a0f31457"
      },
      "downloads": -1,
      "filename": "eventsourcing_orjsontranscoder-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e31ba6c27560ef513b0c73595975ef57",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 9390,
      "upload_time": "2022-02-15T17:37:32",
      "upload_time_iso_8601": "2022-02-15T17:37:32.171689Z",
      "url": "https://files.pythonhosted.org/packages/f8/a6/a32754e2ef30b4472e267bcccfc1cf846bf6165c49206ed62ed1cd97b2cb/eventsourcing_orjsontranscoder-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}