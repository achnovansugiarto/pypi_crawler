{
  "info": {
    "author": "Mervin Hemaraju",
    "author_email": "th3pl4gu33@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# freshservice-sdk-python\n\nThis sdk is an unofficial freshservice API v2 SDK written in Python.\n\nThe library is based on the official Freshservice api found [here](https://api.freshservice.com/)\n\nIt currently supports the manipulation of resources listed below:\n\n* Tickets\n* Changes\n* Problems\n* Tasks (tickets, changes and problems)\n* Many more to come!\n\n## Getting Started\n\nTo install the SDK in your project:\n\n```\npip install freshservice-sdk-python\n```\n\nYou'll also need\n\n* A Freshservice domain name, `your_company.freshservice.com`\n* An [API key](https://support.freshservice.com/en/support/solutions/articles/50000000306-where-do-i-find-my-api-key-)\n\nYou will need to pre set these two values in your deployment's environment variables before using the library. You can either set it in a bash script or pre code it so that you have it in your environment variable on runtime:\n\n```\nos.environ['FRESHSERVICE_API_KEY'] = \"XXXXXX\"\n\nos.environ['FRESHSERVICE_DOMAIN'] = \"your_company.freshservice.com\"\n```\n\n## Tickets\n\nYou can manipulate tickets using the `Ticket` model from the sdk. The `Ticket` model will handle [this](https://api.freshservice.com/#tickets) part of the api in freshservice.\n\nYou can import the model as shown below:\n\n```\nfrom freshservice.v2.ticket import Ticket\n```\n\n### Creating a ticket\n\n```\nfrom freshservice.v2.ticket import Ticket\n\nticket = Ticket.create(\n\trequester_email, \n        subject, \n        description, \n        status: Status, \n        priority: TicketModel.Priority, \n        department_id = None,\n        group_id = None,\n        category = None,\n        sub_category = None,\n        item_category = None,\n        custom_fields: dict = {}\n)\n```\n\n### Fetching a ticket\n\nYou can fetch a ticket by providing the ticket id when initializing the ticket object as shown below.\n\nThis will go and fetch the ticket details.\n\n```\nfrom freshservice.v2.ticket import Ticket\n\nticket = Ticket(\n\tid=your_ticket_id\n)\n\n```\n\n### Updating a ticket\n\nTo update a ticket, you can just update the ticket's attribute and then hit the `update()` on the ticket's object to update it.\n\n```\nfrom freshservice.v2.ticket import Ticket\n\nticket.subject = \"new subject\"\nticket.description = \"new description\"\nticket.update()\n\n```\n\n### Closing a ticket\n\nClosing a ticket works similarly to updating it. You can set all the required attributes of the ticket to match the ticket closure rules and then hit the `close()` function\n\n```\nfrom freshservice.v2.ticket import Ticket\n\nticket.category = \"Other\"\nticket.close()\n```\n\n## Changes\n\n```\nYou can manipulate changes using the `Change` model from the sdk. The `Change` model will handle [this](https://api.freshservice.com/#changes) part of the api in freshservice.\n\nYou can import the model as shown below:\n\n```\n\nfrom freshservice.v2.change import Change\n\n### Creating a Change\n\nfrom freshservice.v2 import Change\n\n```\nfrom freshservice.v2.change import Change\n\nChange.create(\n    requester_email: str,\n    subject: str,\n    description: str,\n    department_id, \n    group_id, \n    category,\n    sub_category,\n    item_category,\n    custom_fields,\n    planned_start_date: datetime,\n    planned_end_date: datetime,\n    priority: TicketModel.Priority = TicketModel.Priority.LOW,\n    planning_fields = {}\n)\n```\n\n### Fetching a change\n\nYou can fetch a change by providing the change id when initializing the change object as shown below.\n\nThis will go and fetch the change details.\n\n```\nfrom freshservice.v2.change import Change\n\nchange = Change(\n        id=your_change_id\n)\n\n```\n\n### Updating a change\n\nTo update a change, you can just update the change's attribute and then hit the `update()` on the change's object to update it.\n\n```\nfrom freshservice.v2.change import Change\n\nchange.subject = \"new subject\"\nchange.description = \"new description\"\nchange.update()\n```\n\n### Closing a change\n\nClosing a change works similarly to updating it. You can set all the required attributes of the change to match the ticket closure rules and then hit the `close()` function\n\n```\nfrom freshservice.v2.change import Change\n\nchange.category = \"Other\"\nchange.close()\n\n```\n\n## Problems\n\nYou can manipulate problems using the `Problem` model from the sdk. The `Problem` model will handle [this](https://api.freshservice.com/#problems) part of the api in freshservice.\n\nYou can import the model as shown below:\n\n```\nfrom freshservice.v2.problem import Problem\n```\n\n### Creating a problem\n\n```\nfrom freshservice.v2.problem import Problem\n\nproblem = Problem.create(\n\trequester_email, \n        subject, \n        description, \n        status: Status, \n        priority: TicketModel.Priority, \n        department_id = None,\n        group_id = None,\n        category = None,\n        sub_category = None,\n        item_category = None,\n        custom_fields: dict = {}\n)\n```\n\n### Fetching a problem\n\nYou can fetch a problem by providing the problem id when initializing the problem object as shown below.\n\nThis will go and fetch the problem details.\n\n```\nfrom freshservice.v2.problem import Problem\n\nproblem = Problem(\n\tid=your_problem_id\n)\n\n```\n### Updating a problem\n\nTo update a problem, you can just update the problem's attribute and then hit the `update()` on the problem's object to update it.\n\n```\nfrom freshservice.v2.problem import Problem\n\nproblem.subject = \"new subject\"\nproblem.description = \"new description\"\nproblem.update()\n\n```\n### Closing a problem\n\nClosing a problem works similarly to updating it. You can set all the required attributes of the problem to match the problem closure rules and then hit the `close()` function\n\n```\nfrom freshservice.v2.problem import Problem\n\nproblem.category = \"Other\"\nproblem.close()\n```\n\n## Tasks\n\nYou can manipulate tasks as well for tickets, changes and problems.\n\nTo get all tasks for a specific ticket, use the `get_tasks()` from the ticket object and this will return a list of\n`Task`s objects to manipulate\n\nBelow is an example with ticket (This works the same for change and problems as well)\n\n```\nfrom freshservice.v2.ticket import Ticket\n\nticket = Ticket(id=3)\n\ntasks = ticket.get_tasks()\n```\n\n### Creating a task\n\n```\nfrom freshservice.v2.models.task import Task\n\ntask = Task.create(\n    url,\n    ticket_id,\n    agent_id,\n    title,\n    description,\n    group_id,\n    notify_before = 0,\n    status = Status.OPEN,\n    due_date = None,\n) \n```\n\n### Updating a task\n\nTo update a task, you can just update the task's attribute and then hit the `update()` on the task's object to update it.\n\n```\ntask.title = \"new title\"\ntask.description = \"new description\"\ntask.update()\n\n```\n### Closing a task\n\nClosing a task works similarly to updating it. You can set all the required attributes of the task to match the problem task rules and then hit the `close()` function\n\n```\ntask.close()\n```\n\n## Building the SDK\n\nIn most cases, you won't need to build the SDK from source. If you want to build it yourself, you'll need these preequisites:\n\n* Clone the repo\n* Run `python setup.py build` from the root of the project (assuming Python is installed)\n\n## Contributing\n\nWe're happy to accept contributions and PRs!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mervinhemaraju/freshservice-sdk-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "freshservice-sdk-python",
    "package_url": "https://pypi.org/project/freshservice-sdk-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/freshservice-sdk-python/",
    "project_urls": {
      "Homepage": "https://github.com/mervinhemaraju/freshservice-sdk-python"
    },
    "release_url": "https://pypi.org/project/freshservice-sdk-python/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "An unofficial freshservice API v2 SDK written in Python.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15994108,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1277e5885e17c77ab281354091ccf223f608661c7a9c99d3e073b36b6b20e5cf",
          "md5": "bd3090659ae8e7bf678ad988f07f2b2c",
          "sha256": "a1704b12f3bff5b6caf977eea913c36978d4342199042349069995ce78e359c7"
        },
        "downloads": -1,
        "filename": "freshservice-sdk-python-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bd3090659ae8e7bf678ad988f07f2b2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6907,
        "upload_time": "2022-11-24T10:30:21",
        "upload_time_iso_8601": "2022-11-24T10:30:21.715169Z",
        "url": "https://files.pythonhosted.org/packages/12/77/e5885e17c77ab281354091ccf223f608661c7a9c99d3e073b36b6b20e5cf/freshservice-sdk-python-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "517652c97587a6a1d2071d2d648dd4f047b6636c3a41fb63ae2da39443138102",
          "md5": "24eac97e10690c3243f36584da7e9ca8",
          "sha256": "f9e256975c0b0ce9f057f4c07c4089979f13e84bc6c25a6cec854232bab8a93b"
        },
        "downloads": -1,
        "filename": "freshservice-sdk-python-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "24eac97e10690c3243f36584da7e9ca8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15025,
        "upload_time": "2022-12-05T06:50:22",
        "upload_time_iso_8601": "2022-12-05T06:50:22.002028Z",
        "url": "https://files.pythonhosted.org/packages/51/76/52c97587a6a1d2071d2d648dd4f047b6636c3a41fb63ae2da39443138102/freshservice-sdk-python-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe122ed3d3e9b9e5233c819ee38d9b14d627d6315e248ab78a33a7edd52fffa8",
          "md5": "ed7e6ec1da6f62095fbc5f6084654873",
          "sha256": "880a4e584c0693f313d46aebaad85688691e7c212c2318b991cdfb5dd3dc327c"
        },
        "downloads": -1,
        "filename": "freshservice-sdk-python-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ed7e6ec1da6f62095fbc5f6084654873",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15434,
        "upload_time": "2022-12-05T11:23:07",
        "upload_time_iso_8601": "2022-12-05T11:23:07.326898Z",
        "url": "https://files.pythonhosted.org/packages/fe/12/2ed3d3e9b9e5233c819ee38d9b14d627d6315e248ab78a33a7edd52fffa8/freshservice-sdk-python-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe122ed3d3e9b9e5233c819ee38d9b14d627d6315e248ab78a33a7edd52fffa8",
        "md5": "ed7e6ec1da6f62095fbc5f6084654873",
        "sha256": "880a4e584c0693f313d46aebaad85688691e7c212c2318b991cdfb5dd3dc327c"
      },
      "downloads": -1,
      "filename": "freshservice-sdk-python-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ed7e6ec1da6f62095fbc5f6084654873",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15434,
      "upload_time": "2022-12-05T11:23:07",
      "upload_time_iso_8601": "2022-12-05T11:23:07.326898Z",
      "url": "https://files.pythonhosted.org/packages/fe/12/2ed3d3e9b9e5233c819ee38d9b14d627d6315e248ab78a33a7edd52fffa8/freshservice-sdk-python-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}