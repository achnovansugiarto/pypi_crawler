{
  "info": {
    "author": "Jiena Gu McLellan",
    "author_email": "jienagu90@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## sichuanMojo\nBuilt on the top of `pandas`, sichuanMojo is a grammar of data manipulation with data frame, providing a consistent a series of utility functions that help you solve the most common data manipulation challenges:\n\n* `unite_col`: unite cols into one column\n* `separate_col`: separate column by a pattern into individual column\n* `groupby_col`: provide a summary table of a selected column which grouped by desired column(s)\n* `groupby_across`: provide a summary table of a selected column with basic statistical infomation (min, max, sum, median) which grouped by desired column(s)\n* `pivot_tb`: provide a pivot (count/frequency) table of a selected column which grouped by desired column(s)\n* `pivot_rate`: provide a pivot (rate/percentage) table of a selected column which grouped by desired column(s)\n* `simplify_network_df`: simplify the network dataframe from directed to undirecte\n\n## Installation from github\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install foobar.\n```\npip install sichuanMojo\n```\n## Backgroud\n\nThe Sichuan province is pandas' hometown which explains the name of this library!\n\n\n\n## Usage\n\n```python\nimport sichuanMojo as sm\nimport pandas as pd\n\n# test_dict as an example input\ndata = {'name':['Tom', 'nick', 'krish', 'jack', 'Mike','Jan'],\n        'age':[20, 21, 19, 18, 21, 33],\n       'group':['A','A', 'A', 'B', 'B', \"B\"],\n       'major':['biology', 'english', 'biology', 'english', 'biology', 'biology'],\n       'response':['good', 'good', 'ok', 'bad', 'bad','bad']}\n \n# Create DataFrame\ntest_df= pd.DataFrame(data)\n```\n\n|    | name   |   age | group   | major   | response   |\n|---:|:-------|------:|:--------|:--------|:-----------|\n|  0 | Tom    |    20 | A       | biology | good       |\n|  1 | nick   |    21 | A       | english | good       |\n|  2 | krish  |    19 | A       | biology | ok         |\n|  3 | jack   |    18 | B       | english | bad        |\n|  4 | Mike   |    21 | B       | biology | bad        |\n\n\n### unite cols into one column\n\nNote: if arg output_json = True, output will be json format. Otherwise, output will be a data frame.\n\n```python\nsm.unite_col(test_df, unite_by = [\"group\", \"major\", \"response\"], pattern=\"; \", united_col_name=\"New_col\", output_json=False)\n\n```\n|    | name   |   age | group   | major   | response   | New_col          |\n|---:|:-------|------:|:--------|:--------|:-----------|:-----------------|\n|  0 | Tom    |    20 | A       | biology | good       | A; biology; good |\n|  1 | nick   |    21 | A       | english | good       | A; english; good |\n|  2 | krish  |    19 | A       | biology | ok         | A; biology; ok   |\n|  3 | jack   |    18 | B       | english | bad        | B; english; bad  |\n|  4 | Mike   |    21 | B       | biology | bad        | B; biology; bad  |\n\n\n### separate column by a pattern into individual column\n\nNote: if arg output_json = True, output will be json format. Otherwise, output will be a data frame.\n\n```python\n# Test data\ndata2 = {'name':['Tom', 'nick', 'krish', 'jack', 'Mike'],\n        'age':[20, 21, 19, 18, 21],\n       'group':['A','A', 'A', 'B', 'B'],\n       'major':['biology', 'english', 'biology', 'english', 'biology'],\n       'date':['2022-01-13', '2022-06-23', '2022-03-12', '2022-08-23', '2022-09-13']}\n \n# Create DataFrame\ntest_df2= pd.DataFrame(data2)\n\n```\n\n|    | name   |   age | group   | major   | date       |\n|---:|:-------|------:|:--------|:--------|:-----------|\n|  0 | Tom    |    20 | A       | biology | 2022-01-13 |\n|  1 | nick   |    21 | A       | english | 2022-06-23 |\n|  2 | krish  |    19 | A       | biology | 2022-03-12 |\n|  3 | jack   |    18 | B       | english | 2022-08-23 |\n|  4 | Mike   |    21 | B       | biology | 2022-09-13 |\n\n```python\nsm.separate_col(test_df2, sep_by=\"date\", pattern=\"-\", sep_to_names=[\"year\", \"month\", \"date\"], output_json=False)\n\n```\n|    | name   |   age | group   | major   |   date |   year |   month |\n|---:|:-------|------:|:--------|:--------|-------:|-------:|--------:|\n|  0 | Tom    |    20 | A       | biology |     13 |   2022 |      01 |\n|  1 | nick   |    21 | A       | english |     23 |   2022 |      06 |\n|  2 | krish  |    19 | A       | biology |     12 |   2022 |      03 |\n|  3 | jack   |    18 | B       | english |     23 |   2022 |      08 |\n|  4 | Mike   |    21 | B       | biology |     13 |   2022 |      09 |\n\n\n### provide a summary table of a selected column which grouped by desired column(s)\n\nNote: if arg `output_json = True`, output will be json format. Otherwise, output will be a data frame. \n\n*operator should be one of mean, sum, min, max, median, unique, count, nunique*\n\n```python\nsm.groupby_col(test_df, group_by = [\"group\", \"major\"], summmarize_at = \"name\", operator = \"nunique\", output_json = True)\n#returns [{'group': 'A', 'major': 'biology', 'name': 2},\n# {'group': 'A', 'major': 'english', 'name': 1},\n# {'group': 'B', 'major': 'biology', 'name': 2},\n# {'group': 'B', 'major': 'english', 'name': 1}]\n\n```\n```python\nsm.groupby_col(test_df, group_by = [\"group\", \"major\"], summmarize_at = \"name\", operator = \"nunique\")\n```\n|    | group   | major   |   name |\n|---:|:--------|:--------|-------:|\n|  0 | A       | biology |      2 |\n|  1 | A       | english |      1 |\n|  2 | B       | biology |      2 |\n|  3 | B       | english |      1 |\n\n### provide a summary table of a selected column with basic statistical infomation (min, max, sum, median) which grouped by desired column(s)\n\nNote: if arg output_json = True, output will be json format. Otherwise, output will be a data frame.\n\n```python\nsm.groupby_across(test_df, [\"group\", \"major\"], summmarize_at=\"age\", operation=None, output_json = False)\n```\n\n|    | group   | major   |   age_min |   age_max |   age_sum |   age_median |\n|---:|:--------|:--------|----------:|----------:|----------:|-------------:|\n|  0 | A       | biology |        19 |        20 |        39 |         19.5 |\n|  1 | A       | english |        21 |        21 |        21 |         21   |\n|  2 | B       | biology |        21 |        33 |        54 |         27   |\n|  3 | B       | english |        18 |        18 |        18 |         18   |\n\n### provide a pivot (count/frequency) table of a selected column which grouped by desired column(s)\n\nNote: if arg output_json = True, output will be json format. Otherwise, output will be a data frame.\n\n```python\nsm.pivot_tb(test_df, group_by=[\"group\", \"major\"], summmarize_at=\"response\", operation=\"count\", output_json = False, na_fill=0)\n```\n|    | group   | major   |   bad |   good |   ok |\n|---:|:--------|:--------|------:|-------:|-----:|\n|  0 | A       | biology |     0 |      1 |    1 |\n|  1 | A       | english |     0 |      1 |    0 |\n|  2 | B       | biology |     2 |      0 |    0 |\n|  3 | B       | english |     1 |      0 |    0 |\n\n\n### provide a pivot (rate/percentage) table of a selected column which grouped by desired column(s)\n\nNote: if arg output_json = True, output will be json format. Otherwise, output will be a data frame.\n\n```python\nsm.pivot_rate(test_df, group_by=[\"major\", \"group\"], summmarize_at=\"response\", output_json = False, na_fill=0)\n```\n\n|    | major   | group   |   response_count_bad |   response_count_good |   response_count_ok |   response_perc_bad |   response_perc_good |   response_perc_ok |\n|---:|:--------|:--------|---------------------:|----------------------:|--------------------:|--------------------:|---------------------:|-------------------:|\n|  0 | biology | A       |                    0 |                     1 |                   1 |                   0 |                   50 |                 50 |\n|  1 | biology | B       |                    2 |                     0 |                   0 |                 100 |                    0 |                  0 |\n|  2 | english | A       |                    0 |                     1 |                   0 |                   0 |                  100 |                  0 |\n|  3 | english | B       |                    1 |                     0 |                   0 |                 100 |                    0 |                  0 |\n\n### provide an easy way to simplify network data frame from directed to undirected\n        \nNote: if arg `keep = \"last\"`, output dataframe will keep the last row of duplicated rows. if arg `keep = \"first\"`, output dataframe will keep the first row of duplicated rows. \n\n\n```python\ndata = {'from':['Tom', 'Jack', 'Jen', 'Sam'],\n'overlap':[20, 21, 19, 18],\n'to':['Jack','Tom', 'Emily', 'John']}\n\ntest_df= pd.DataFrame(data)\n\n```\n|    | from   |   overlap | to    |\n|---:|:-------|----------:|:------|\n|  0 | Tom    |        20 | Jack  |\n|  1 | Jack   |        21 | Tom   |\n|  2 | Jen    |        19 | Emily |\n|  3 | Sam    |        18 | John  |\n\nIn the test_df, we have duplicated Tom <--> Jack pairs. \n\n```python\nsm.simplify_network_df(test_df, from_col = \"from\", to_col = \"to\", keep = \"first\")\n```\n|    | from   |   overlap | to    |\n|---:|:-------|----------:|:------|\n|  0 | Tom    |        20 | Jack  |\n|  2 | Jen    |        19 | Emily |\n|  3 | Sam    |        18 | John  |\n\nWe can see output only keeps one Tom <--> Jack pair. \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jienagu/sichuanMojo",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sichuanMojo",
    "package_url": "https://pypi.org/project/sichuanMojo/",
    "platform": null,
    "project_url": "https://pypi.org/project/sichuanMojo/",
    "project_urls": {
      "Homepage": "https://github.com/jienagu/sichuanMojo"
    },
    "release_url": "https://pypi.org/project/sichuanMojo/0.1.2/",
    "requires_dist": [
      "pandas"
    ],
    "requires_python": "",
    "summary": "A series of utility functions to help with tidy dataframe.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16253512,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13272c9b446dd67b68f275afaed5b7bf8daede60b2c3aebec617d292422af5d8",
          "md5": "845b823e09c1ccd6d4a8549502b38962",
          "sha256": "6a33c6fda549a1f4b0d154d8b404ae23374acb16d98f1ef2c6830515c5f36f1e"
        },
        "downloads": -1,
        "filename": "sichuanMojo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "845b823e09c1ccd6d4a8549502b38962",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4393,
        "upload_time": "2022-05-11T03:30:31",
        "upload_time_iso_8601": "2022-05-11T03:30:31.532481Z",
        "url": "https://files.pythonhosted.org/packages/13/27/2c9b446dd67b68f275afaed5b7bf8daede60b2c3aebec617d292422af5d8/sichuanMojo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0a2d336d4bb4da70ad3db0229d30bced9a7990145a097900a3f147359464ee8",
          "md5": "dfe6427c8e8e2b5219198fd97fef9d31",
          "sha256": "eafc47c230e9993248810df2db9cc3fe363456c294c0f21c555922ba6b920b71"
        },
        "downloads": -1,
        "filename": "sichuanMojo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfe6427c8e8e2b5219198fd97fef9d31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5443,
        "upload_time": "2022-12-30T00:34:50",
        "upload_time_iso_8601": "2022-12-30T00:34:50.073739Z",
        "url": "https://files.pythonhosted.org/packages/f0/a2/d336d4bb4da70ad3db0229d30bced9a7990145a097900a3f147359464ee8/sichuanMojo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5c5e53658534f5331cf867ed3acc707ae95988f2450c165968aaa9d9acac7d9",
          "md5": "7019c80c8696df5b1dbe3ae56a7bf9d6",
          "sha256": "64c48ec504d308229348d7fdfd720dc6a1836af95c0e2c57ab2a228a1944bebf"
        },
        "downloads": -1,
        "filename": "sichuanMojo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7019c80c8696df5b1dbe3ae56a7bf9d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4421,
        "upload_time": "2022-05-11T03:38:54",
        "upload_time_iso_8601": "2022-05-11T03:38:54.011706Z",
        "url": "https://files.pythonhosted.org/packages/c5/c5/e53658534f5331cf867ed3acc707ae95988f2450c165968aaa9d9acac7d9/sichuanMojo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eead867ba19dbeb932b852036ab66dc78feb67586c28b3c5bd9ea8f8423c70fa",
          "md5": "6cb101ebc1231b6bb7c37f3770f995a9",
          "sha256": "505e5bb45a2eca7d63ee76be1722d9a4e3b59e9ca72b309152e9c9d940b8a914"
        },
        "downloads": -1,
        "filename": "sichuanMojo-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6cb101ebc1231b6bb7c37f3770f995a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5444,
        "upload_time": "2022-12-30T01:56:57",
        "upload_time_iso_8601": "2022-12-30T01:56:57.412146Z",
        "url": "https://files.pythonhosted.org/packages/ee/ad/867ba19dbeb932b852036ab66dc78feb67586c28b3c5bd9ea8f8423c70fa/sichuanMojo-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7486944001e398d43949212e01c9785334f405434f03dda95869477864c211ac",
          "md5": "829d8db927f624a354049605fb03d98e",
          "sha256": "48a581c1912b444b970ec5b28d60adc97273f28090c9d15145f791aa3b36222f"
        },
        "downloads": -1,
        "filename": "sichuanMojo-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "829d8db927f624a354049605fb03d98e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4904,
        "upload_time": "2022-12-30T01:56:59",
        "upload_time_iso_8601": "2022-12-30T01:56:59.456694Z",
        "url": "https://files.pythonhosted.org/packages/74/86/944001e398d43949212e01c9785334f405434f03dda95869477864c211ac/sichuanMojo-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eead867ba19dbeb932b852036ab66dc78feb67586c28b3c5bd9ea8f8423c70fa",
        "md5": "6cb101ebc1231b6bb7c37f3770f995a9",
        "sha256": "505e5bb45a2eca7d63ee76be1722d9a4e3b59e9ca72b309152e9c9d940b8a914"
      },
      "downloads": -1,
      "filename": "sichuanMojo-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6cb101ebc1231b6bb7c37f3770f995a9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5444,
      "upload_time": "2022-12-30T01:56:57",
      "upload_time_iso_8601": "2022-12-30T01:56:57.412146Z",
      "url": "https://files.pythonhosted.org/packages/ee/ad/867ba19dbeb932b852036ab66dc78feb67586c28b3c5bd9ea8f8423c70fa/sichuanMojo-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7486944001e398d43949212e01c9785334f405434f03dda95869477864c211ac",
        "md5": "829d8db927f624a354049605fb03d98e",
        "sha256": "48a581c1912b444b970ec5b28d60adc97273f28090c9d15145f791aa3b36222f"
      },
      "downloads": -1,
      "filename": "sichuanMojo-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "829d8db927f624a354049605fb03d98e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4904,
      "upload_time": "2022-12-30T01:56:59",
      "upload_time_iso_8601": "2022-12-30T01:56:59.456694Z",
      "url": "https://files.pythonhosted.org/packages/74/86/944001e398d43949212e01c9785334f405434f03dda95869477864c211ac/sichuanMojo-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}