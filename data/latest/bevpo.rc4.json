{
  "info": {
    "author": "Arsam Aryandoust",
    "author_email": "arsama@ethz.ch",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Bevpo stands for 'battery electric vehicle policy' and was first named this way \nby Anthony Patt and Marc Melliger. It is a package that provides city-scale car \ntraffic and parking analyses. It utilizes a Hidden Markov Model to translate changes \nin travel time between different zones of a city throughout multiple time steps \ninto probabilities of driving or not, as well as choosing a destination if driving. \nGiven the joint distribution from these two multivariate probability distributions, \nbevpo then samples a vehicle fleet of arbitrary size. One key strength of bevpo \nis that it is able to model at arbitrary granularities in time and space, which \nare eventually given by the data provided to bevpo. \n\n\n### Installation:\n```\npip install bevpo\n```\n\n\n### Docker:\nFor using bevpo within an Ubuntu docker container \n```\ndocker run -it aryandoustarsam/bevpo\n```\n\nFor using bevpo with Jupyter notebook inside a docker container\n```\ndocker run -it -p 3333:1111 -v ~/path_to_data/data:/data aryandoustarsam/bevpo:jupyter\n[inside running container]: jupyter notebook --ip 0.0.0.0 --port 1111 --no-browser --allow-root\n[in local machine browser]: localhost:3333 \n[in local machine browser, type token shown in terminal]\n```\n\n### Usage guide:\nAt the core of bevpo stands the class bevpo.TrafficSystem. It bundles all \nproperties and methods of the traffic system modeled with bevpo. Bellow is a list\nof all parameters, attributes, methods and generated results.\n\n\n<table>\n\n  <tr>\n    <th scope='row' colspan='2'> Parameters </th>\n  </tr>\n  \n  <tr> \n    <td>\n      <b>city_zone_coordinates (required)</b>: <br />  n_zones x 3 matrix\n    </td>\n    <td>\n      A pandas.DataFrame containing the columns 'zone_id', 'zone_lat' and \n      'zone_long' indicating the respective geographic coordinates of each \n      city zone polygon centroid. \n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>od_mean_travel_time_list (required)</b>: <br /> list of n_data_t x 3 \n      matrices\n    <td>\n      List of pandas.DataFrames containing the columns 'source_id', 'dest_id' \n      and 'mean_travel_time'. Each list element corresponds to measurements in\n      one time stamp. List elements should appear in consecutive temporal order.\n    </td>\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>od_stddev_travel_time_list (=None)</b>: <br />  list of \n      n_data_t x 3 matrices\n    </td>\n    <td>\n      List of pandas.DataFrames containing the columns 'source_id', 'dest_id' and\n      'stddev_travel_time'. Each list element corresponds to measurements in one\n      time stamp. List elements should appear in consecutive temporal order.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>od_distances (=None)</b>: <br />  n_zones x n_zones\n    </td>\n    <td>\n      Symmetric origin destination matrix with same zone IDs as columns and \n      indices in pandas.DataFrame\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n      <b>charging_profile (=None)</b>: <br />  list of floats > 0\n    </td>\n    <td>\n      A charging profile for electric vehicles with one floating point entry per\n      simulation time step. It hence has to have a length equal to\n      len(od_mean_travel_time_list)\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n      <b>e_drive (=2)</b>: <br /> float > 0\n    </td>\n    <td>\n      Exponential parameter describing the (exponential) functional relationship\n      between changes in travel time in a particular city zone and the \n      probability that a car will drive.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>e_dest (=2)</b>: <br /> float > 0 \n    </td>\n    <td>\n      Exponential parameter describing the (expoential) functional relationship\n      between changes in travel time from one particular city zone to all other\n      zones and the probabiity of choosing any of these other zones as a\n      destination for a trip. \n    </td>\n    \n  </tr>\n  \n  <tr>\n    <td>\n      <b>p_min (=0.1)</b>: <br /> float in [0, p_max)\n    </td>\n    <td>\n      The lower bound of probability distribution for p_drive. \n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>p_max (=0.9)</b>: <br /> float in (p_min, 1] \n    </td>\n    <td>\n      The upper bound of probability distribution for p_drive.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>cars_per_zone (=100)</b>: <br /> int > 0 \n    </td>\n    <td>\n      The number of cars to be sampled for each city zone during traffic \n      simulation.\n    </td>\n  </tr>\n  \n</table>\n\n\n<table>\n\n  <tr>\n    <th scope='row' colspan='2'> Attributes </th>\n  </tr>\n  \n  <tr> \n    <td>\n      <b>T</b>: <br /> int > 0\n    </td>\n    <td>\n      Number of simulation time steps which results to len(od_mean_travel_time_list) \n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>number_zones</b>: <br /> int > 0 \n    </td>\n    <td>\n      Number of city zones in od matrices which results to\n      len(city_zone_coordinates)\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>datatensor_mean</b>: <br />  number_zones x number_zones x T \n    </td>\n    <td>\n      Sparse tensor that contains all provided OD values for mean travel time.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>datatensor_stddev</b>: <br /> number_zones x number_zones x T\n    </td>\n    <td>\n       Sparse tensor that contains all provided OD values for standard deviation \n       of travel time.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>C</b>: <br /> int > 0  \n    </td>\n    <td>\n      Size of vehicle fleet to be simulated, which results to number_zones *\n      cars_per_zone  \n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>state_tensor</b>: <br /> C x T \n    </td>\n    <td>\n      Tensor for saving states of traffic system which consists of the location\n      of each simulated vehicle \n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>transition_tensor</b>: <br />  C x T x 4 \n    </td>\n    <td>\n      Tensor for saving state transition of traffic system which consists of the\n      driving, destination, travel time and travel distance of each simulated\n      vehicle.\n    </td>\n  </tr>\n  \n</table>\n\n\n<table>\n\n  <tr>\n    <th scope='row' colspan='2'> Methods </th>\n  </tr>\n\n  <tr>\n    <td>\n      <b>simulate_traffic()</b>:  \n    </td>\n    <td>\n      Simulates the traffic system when called.\n    </td>\n  </tr>\n\n  <tr> \n    <td>\n      <b>calc_od_distances(city_zone_coordinates)</b>:   \n    </td>\n    <td>\n      Called on initialization of class objects if od_distances=None. Calculates \n      the beeline distance between origin destination zones of a city if no \n      explicit matrix of such distances was past when initializing class object.\n    </td>\n  </tr>\n\n  <tr> \n    <td>\n      <b>create_datatensors()</b>:   \n    </td>\n    <td>\n      Called by simulate_traffic() method. Transforms the list of od matrices \n      into a single datatensor. City zone indexing corresponds to respective \n      index positions in city_zone_coordinates.index. Time step indexing \n      corresponds to respective position of OD matrix in \n      od_mean_travel_time_list. If od_stddev_travel_time_list is available, the \n      same is done for this list too.\n    </td>\n  </tr>\n  \n  <tr> \n    <td>\n      <b>save_tfs_results(path_to_results=None)</b>:   \n    </td>\n    <td>\n      Saves the resulting plots and numeric values unter path_to_results when \n      called. If no path is passed, a directory called bevpo_results will be \n      created within current working directory, where results are stored.\n    </td>\n  </tr>\n  \n</table>\n\n\n<table>\n\n  <tr>\n    <th scope='row' colspan='2'> Results </th>\n  </tr>\n\n  <tr>\n    <td>\n      <b>driving_map</b>: <br /> number_zones x T \n    </td>\n    <td>\n      Multivariate distribution of driving activity among all modeled city zones\n      and sampled time steps. Distributions sum up to 1 across all time step and\n      cityzones.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>parking_map</b>: <br /> number_zones x T \n    </td>\n    <td>\n      Multivariate distribution of parking cars among all modeled city zones\n      and sampled time steps. Distributions sum up to 1 across all time step\n      and city zones.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>charging_map</b>: <br /> number_zones x T \n    </td>\n    <td>\n      (Optional). Only created if parameter charging_profile is provided. \n      Multivariate distribution of charging cars among all modeled city zones\n      and sampled time steps. Distribution sums up to 1 for all city zones and\n      time steps.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>avg_driving_times</b>: <br /> array of length T+1 \n    </td>\n    <td>\n       Average driving durations of all sampled trips. The first entry corresponds\n       to the average over all time steps. The following entries correspond to\n       the average over each simulated time step.\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n      <b>avg_driving_distances</b>: <br /> array of length T+1 \n    </td>\n    <td>\n      Average driving distance of all sampled trips. The first entry corresponds\n      to the average over all time steps. The following entries correspond to\n      the average over each simulated time step.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>driving_share_lifetime</b>: <br />% \n    </td>\n    <td>\n      The average share of the lifetime of a car in which it drives.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>parking_share_lifetime</b>:<br /> % \n    </td>\n    <td>\n      The average share of the lifetime of a car in which it is parked.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>circadian_rhythm</b>: <br /> array of length T \n    </td>\n    <td>\n      The circadian rhythm, that is the percentual traffic activity, throughout\n      all simulated time steps.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>distr_distances_per_t</b>: <br /> T x 10 \n    </td>\n    <td>\n      A multivariate distribution of travelled distances for each time steps, \n      categorized into 10 bins.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>distr_durations_per_t</b>: <br /> T x 10 \n    </td>\n    <td>\n      A multivariate distribution of travelled durations for each time steps, \n      categorized into 10 bins.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>distr_distances_total</b>: <br /> array of length 10 \n    </td>\n    <td>\n      The total distribution of travelled distances categorized into 10 bins.\n    </td>\n  </tr>\n \n  <tr>\n    <td>\n      <b>distr_durations_total</b>: <br /> array of length 10 \n    </td>\n    <td>\n      The total distribution of travelled durations categorized into 10 bins.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>distr_bins_km</b>: <br /> array of length 10 \n    </td>\n    <td>\n      The distance category of each bin in km unit.\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <b>distr_bins_s</b>: <br /> array of length 10 \n    </td>\n    <td>\n      The duration category of each bin in s unit.\n    </td>\n  </tr> \n</table>\n\n\n### Examples:\n\nSimulating traffic for exemplar Uber Movement travel time data, using only the \nminimum required information to pass to model.\n```\nimport bevpo.datasets.prep_ubermovement as prep_data\nimport bevpo.trafficsystem as trafficsystem\n\n\n### 1. Prepare Uber Data\n\n# provide paths to Uber Movement data\npath_to_rawdata = *insert path to Uber Movement .csv file here*\npath_to_json_data = *insert path to Uber Movement .json file here*\n\n# create city zone data from json file\ncity_zone_coordinates = (\n    prep_data.create_city_zone_coordinates(path_to_json_data)\n)\n\n# create list of OD matrices from csv file\n(\n    od_mean_travel_time_list,\n    od_std_travel_time_list\n) = prep_data.create_od_matrix_lists(path_to_rawdata)\n\n\n### 2. Simulate traffic \n\n# create object of class TrafficSystem and pass minimum required data\ntfs = trafficsystem.TrafficSystem(\n    city_zone_coordinates,\n    od_mean_travel_time_list\n)\n\n# simulate traffic\ntfs.simulate_traffic()\n\n# save results\ntfs.save_tfs_results()\n```\n\nSimulating traffic for from exemplar Uber Movement travel time data, using more \nthan the minimum required information to pass to model, and customized parameters.\n```\nimport bevpo.datasets.prep_ubermovement as prep_data\nimport bevpo.trafficsystem as trafficsystem\n\n\n### 1. Prepare Uber Data\n\n# provide paths to Uber Movement data\npath_to_rawdata = *insert path to Uber Movement .csv file here*\npath_to_json_data = *insert path to Uber Movement .json file here*\npath_to_results = *insert path to desired results folder here*\n\n# create city zone data from json file\ncity_zone_coordinates = (\n    prep_data.create_city_zone_coordinates(path_to_json_data)\n)\n\n# create list of OD matrices from csv file\n(\n    od_mean_travel_time_list,\n    od_std_travel_time_list\n) = prep_data.create_od_matrix_lists(path_to_rawdata)\n\n# create a charging profile of length 24\ncharging_profile = [\n    5, 6, 7, 10, 10, 9, 8, 7, 6, 3, 2, 1, 5, 7, 4, 2, 1, 6, 4, 5, 5, 3, 7, 6\n]\n\n### 2. Simulate traffic \n\n# create object of class TrafficSystem and decleare custom parameters\ntfs = trafficsystem.TrafficSystem(\n    city_zone_coordinates,\n    od_mean_travel_time_list,\n    od_std_travel_time_list,\n    charging_profile=charging_profile,\n    e_drive=0.5,\n    e_dest=2.3,\n    p_min=0.085,\n    p_max=0.81\n)\n\n# simulate traffic\ntfs.simulate_traffic()\n\n# save results\ntfs.save_tfs_results(path_to_results)\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bevpo",
    "package_url": "https://pypi.org/project/bevpo/",
    "platform": "",
    "project_url": "https://pypi.org/project/bevpo/",
    "project_urls": {
      "Code repository": "https://github.com/ArsamAryandoust/bevpo"
    },
    "release_url": "https://pypi.org/project/bevpo/0.1.3/",
    "requires_dist": [
      "numpy (>=1.20.0)",
      "pandas (>=1.3.0)",
      "matplotlib (>=3.4.0)",
      "imageio (>=2.9.0)"
    ],
    "requires_python": "",
    "summary": "City-scale car traffic and parking analysis tool",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12555157,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de812aac313bd54f00f8cc150b8dfca47d7b2ca45b9b6b5aff5ceba9dfea534c",
          "md5": "3af5b85b284cbceba6193e9cc50a46f2",
          "sha256": "ce22921177b8d0eb09f07ac7caa642b0762eeda4d22ea42f11a03a5889509af1"
        },
        "downloads": -1,
        "filename": "bevpo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3af5b85b284cbceba6193e9cc50a46f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17154,
        "upload_time": "2021-07-15T08:08:05",
        "upload_time_iso_8601": "2021-07-15T08:08:05.745445Z",
        "url": "https://files.pythonhosted.org/packages/de/81/2aac313bd54f00f8cc150b8dfca47d7b2ca45b9b6b5aff5ceba9dfea534c/bevpo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca68038aa903a998d82b1076df8c9f1f63b9928fb0a96b256b795f64730fd5df",
          "md5": "7fa883eb0d0584874b0cf07443ba441a",
          "sha256": "6213d0bb870ff2836342e894a31f1acefd18fc918d254977b1e1c4de26752109"
        },
        "downloads": -1,
        "filename": "bevpo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7fa883eb0d0584874b0cf07443ba441a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18317,
        "upload_time": "2021-07-15T08:08:07",
        "upload_time_iso_8601": "2021-07-15T08:08:07.155367Z",
        "url": "https://files.pythonhosted.org/packages/ca/68/038aa903a998d82b1076df8c9f1f63b9928fb0a96b256b795f64730fd5df/bevpo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a3bc9c6b6561257fb6b26bbf8506e977396830e20918c099a31bf3ab792e15b",
          "md5": "f663b05d5b0db83d239001ef7afaed31",
          "sha256": "7764570a9101c3b8efbecfb2b48b758209f428d796f42a285370d88dbc9412c4"
        },
        "downloads": -1,
        "filename": "bevpo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f663b05d5b0db83d239001ef7afaed31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17191,
        "upload_time": "2021-07-15T13:14:35",
        "upload_time_iso_8601": "2021-07-15T13:14:35.812250Z",
        "url": "https://files.pythonhosted.org/packages/3a/3b/c9c6b6561257fb6b26bbf8506e977396830e20918c099a31bf3ab792e15b/bevpo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2482c5407e0d893b7b8ec84ff7e83a8efa579924c3a0e25445c374396092e85",
          "md5": "caadb76e6a68d4e41114f8a56b7f0744",
          "sha256": "3a2de37b50d627e34d22a8f547afea2424a367964b18c329bd73e4c1df74397b"
        },
        "downloads": -1,
        "filename": "bevpo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "caadb76e6a68d4e41114f8a56b7f0744",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18356,
        "upload_time": "2021-07-15T13:14:37",
        "upload_time_iso_8601": "2021-07-15T13:14:37.462049Z",
        "url": "https://files.pythonhosted.org/packages/c2/48/2c5407e0d893b7b8ec84ff7e83a8efa579924c3a0e25445c374396092e85/bevpo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2134e0328f4444cf3f3583bfb4ee68d3fba3eef9e38ec72ab1051759ebe1d7f1",
          "md5": "c71cf35881330930e53db6c5a0517e37",
          "sha256": "ac4cc5543075a7f51318dd9461640a3a49ae34ea39cf0e3a522009d49e7eb7ba"
        },
        "downloads": -1,
        "filename": "bevpo-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c71cf35881330930e53db6c5a0517e37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17193,
        "upload_time": "2021-07-15T14:05:07",
        "upload_time_iso_8601": "2021-07-15T14:05:07.749613Z",
        "url": "https://files.pythonhosted.org/packages/21/34/e0328f4444cf3f3583bfb4ee68d3fba3eef9e38ec72ab1051759ebe1d7f1/bevpo-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c63af04a716b0b5e0dff437a2c7fd01d9641626d91957220789cebdf6f45ba4c",
          "md5": "0466577bcb0fc7705368c2ef96ed027c",
          "sha256": "f3268ce3bb4e4eca48f125255015025a8d4fe09ae541aa48bee2e3dd9d6c25cd"
        },
        "downloads": -1,
        "filename": "bevpo-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0466577bcb0fc7705368c2ef96ed027c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18362,
        "upload_time": "2021-07-15T14:05:09",
        "upload_time_iso_8601": "2021-07-15T14:05:09.176190Z",
        "url": "https://files.pythonhosted.org/packages/c6/3a/f04a716b0b5e0dff437a2c7fd01d9641626d91957220789cebdf6f45ba4c/bevpo-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83572ab916d1365f2e0b509e60fad69471bc08988d8d5c111d2974593cb70995",
          "md5": "cd60d222d0eef873fe3b4243f2d92085",
          "sha256": "ceaacc893119385f2815b339ad6572491c4fb3591ef65b30a83b85f7284a9068"
        },
        "downloads": -1,
        "filename": "bevpo-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd60d222d0eef873fe3b4243f2d92085",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16430,
        "upload_time": "2022-01-12T22:15:53",
        "upload_time_iso_8601": "2022-01-12T22:15:53.104663Z",
        "url": "https://files.pythonhosted.org/packages/83/57/2ab916d1365f2e0b509e60fad69471bc08988d8d5c111d2974593cb70995/bevpo-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9d25fc99203c01c5a705d4eca2da9b73141946ff9351e86db4180f847611891",
          "md5": "bb03838f07495aabfaceaaf8b278a9a9",
          "sha256": "e0cb9a928865d4ec8885ce3b5e852a076a0209c7fe5880501dc7ea91136aef54"
        },
        "downloads": -1,
        "filename": "bevpo-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bb03838f07495aabfaceaaf8b278a9a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17697,
        "upload_time": "2022-01-12T22:15:54",
        "upload_time_iso_8601": "2022-01-12T22:15:54.608247Z",
        "url": "https://files.pythonhosted.org/packages/a9/d2/5fc99203c01c5a705d4eca2da9b73141946ff9351e86db4180f847611891/bevpo-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83572ab916d1365f2e0b509e60fad69471bc08988d8d5c111d2974593cb70995",
        "md5": "cd60d222d0eef873fe3b4243f2d92085",
        "sha256": "ceaacc893119385f2815b339ad6572491c4fb3591ef65b30a83b85f7284a9068"
      },
      "downloads": -1,
      "filename": "bevpo-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd60d222d0eef873fe3b4243f2d92085",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16430,
      "upload_time": "2022-01-12T22:15:53",
      "upload_time_iso_8601": "2022-01-12T22:15:53.104663Z",
      "url": "https://files.pythonhosted.org/packages/83/57/2ab916d1365f2e0b509e60fad69471bc08988d8d5c111d2974593cb70995/bevpo-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9d25fc99203c01c5a705d4eca2da9b73141946ff9351e86db4180f847611891",
        "md5": "bb03838f07495aabfaceaaf8b278a9a9",
        "sha256": "e0cb9a928865d4ec8885ce3b5e852a076a0209c7fe5880501dc7ea91136aef54"
      },
      "downloads": -1,
      "filename": "bevpo-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "bb03838f07495aabfaceaaf8b278a9a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17697,
      "upload_time": "2022-01-12T22:15:54",
      "upload_time_iso_8601": "2022-01-12T22:15:54.608247Z",
      "url": "https://files.pythonhosted.org/packages/a9/d2/5fc99203c01c5a705d4eca2da9b73141946ff9351e86db4180f847611891/bevpo-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}