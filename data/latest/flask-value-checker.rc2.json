{
  "info": {
    "author": "Aditya Shankar",
    "author_email": "aditniru@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Flask-value-checker :mag_right:\nImaging web form checking, but now imagine that it was easy and comfy\n\n## Example usage\n```python\nfrom flask_value_checker import Invigilator\nfrom flask import Flask, request\n\ninvigilator = Invigilator()\n\n@app.route('/abc', methods=['POST'])\n@invigilator.check(\n   'POST',\n   '''\n   username : str/lenlim(5, 15)\n   password : str/lenlim(8, inf)\n   stayLoggedIn : str/accept(['on'])/optional\n   '''\n)\ndef abc():\n    stay_logged_in = request.form.get('stayLoggedIn', 'off')\n    return f'hi {request.form['username']}, stay logged in: {stay_logged_in}'\n\napp.run()\n```\n\n#### example default error\nNote: this error can [be customized](#custom-error-showing)\n\n```javascript\n{\n    \"error\": {\n        \"code\": \"MALFORMED_OR_MISSING_PARAMETERS\",\n        \"message\": \"one or more fields we're either missing or malformed\",\n        \"fields\": {\n            \"email\" : \"missing parameter, parameter is required\",\n            \"firstName\" : \"string length must be between 5 and inf\",\n            \"age\" : \"parameter has to be of type 'int'\"\n            ...\n        }\n    }\n}\n```\n---\n## function docs :notebook_with_decorative_cover: :notebook: :closed_book: :blue_book:\n<a name=\"custom-error-showing\"></a>\n### Invigilator(err_function=None)\n- **Type** : `function` or `None`\n- **Description** : the function that displays the final error to the webpage, must be written the the way a standard flask function is written, (although you may wanna check out [Flask.Response](https://flask.palletsprojects.com/en/1.1.x/api/?highlight=response#flask.Response), and return that instead of a tuple like `(error, 400)`)\n- **Example**\n```python\ndef custom_error_shower(errors):\n    return Response(\n        json.dumps({\"errors\": errors,}), status=400, mimetype=\"application/json\"\n    )\n```\n\n### Invigilator.check(http_methods, checker_str)\n##### http_methods:\n- **Type** : `str` or `list of strs`\n- **Description** : HTTP methods to check for,\n\n **NOTE**: if the http method to check for is not present in methods, the decorated function will be called normally and no checks will be performed\n- **Example** : `'GET'`, `'POST'`, `['GET', 'POST']`\n\n---\n## field name attribute docs\nall top attributes (str, int, float) should not have any parameters,\n\n**Note**: top attributes should be placed first, then its sub attributes\nshould be placed\n### str\n##### lenlim(min, max)\nthe minimum and maximum length the fields string can be\n- **min** : `int` or the value `inf`, the minimum accepted string length\n- **max** : `int` or the value `inf` (see [example-usage](#example-usage)), the maximum accepted string length\n\n##### optional\nis the attribute optional ?\n\n##### accept(accepted_vals)\nvalues that can be accepted when using the field name\n- **accepted_vals**: `list of strings`, the acceptable values for the parameter\n\n### int and float\n**int** specifies that the number must be an integer,\n\n**float** specifies that it can be decimal,\n\nboth attributes have the same sub-attributes\n##### lim(min, max)\nthe limits that the numeric values can range between\n- **min** : `float` or the value `inf`, the minimum accepted numeric value\n- **max** : `float` or the value `inf` (see [bigger-full-example](#bigger-full-example)), the maximum accepted numeric value\n\n##### optional\nis the attribute optional ?\n\n---\n##### checker_str\n- **Type** : `str`\n- **Description** : the form attributes and their restrictions written in the prescribed format, [See Here](#writing-parameters)\n---\n## Guide :metal:\n\n### Writing parameters:\n\n- different parameters are separated by a newline\n- the parameter and its rules are separated by an `:`\n- rule conditions are separated by an `/`\n- the first condition should be the type of the required value, `str`, `int` or `float`\n- condition arguments are put in brackets `()`\n\n###### example:\n`score : float/lim(0, 11.5)/optional`\n\n### bigger full example\n```python\n@app.route('/abc')\n@invigilator.check(\n   'POST',\n   '''\n    firstName : str/lenlim(1, 15)\n    middleName : str/optional\n    lastName : str/optional\n    stayLoggedIn : str/accept(['on'])/optional\n    email : str\n    password : str/lenlim(8, inf)\n    phone : str/lenlim(8, 15)\n    # number will have to be an Int,\n    # but it'll have to be greater than\n    # 18, not including 18\n    age : int/lim(18.9, inf)\n    score : float/lim(0, 10) # can be a decimal value\n    '''\n)\ndef abc():\n    some_content\n```\n\n## Dev-docs\n- codestyle : black\n- documentation style : numpydoc\n- HTTP-Returns extra to Numpydoc, that is similar to Return, but is represented as follows\n\n```python\n'''\nHTTP-Returns\n------------\n400\n    on failure, the response will be similar to,\n\n    {\n        \"error\": {\n            \"code\": \"MALFORMED_OR_MISSING_PARAMETERS\",\n            \"message\": \"one or more fields we're either missing or malformed\",\n            \"fields\": {\n                \"email\" : \"missing parameter, parameter is required\",\n                \"firstName\" : \"name has to be under 15 characters\",\n                \"age\" : \"parameter has to be of type 'int'\"\n                ...\n            }\n        }\n    }\n\n*\n    or whatever the original function returns\n\n    *\n'''\n```\n\ni.e.\n\n```\n<return code>\n    <details>\n    <return message>\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/therealadityashankar/flask-value-checker",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-value-checker",
    "package_url": "https://pypi.org/project/flask-value-checker/",
    "platform": "",
    "project_url": "https://pypi.org/project/flask-value-checker/",
    "project_urls": {
      "Homepage": "https://github.com/therealadityashankar/flask-value-checker"
    },
    "release_url": "https://pypi.org/project/flask-value-checker/1.1/",
    "requires_dist": [
      "Flask>=1.1.1",
      "colorama>=0.4.3",
      "pytest >=5.3.4 ; extra == \"test\""
    ],
    "requires_python": ">=3.6,<4",
    "summary": "lets check flask parameters",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6590959,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f866b1847c854bd7ac3eec4002ecc54a23a45d3dd0a7b1df465c24c153676238",
          "md5": "8b32ceb456c55706075581f5c1be735f",
          "sha256": "f7c44732a4514c7469d2656cc2f9fd2db0260faeda3d2a759a40c8fa7a4afbcf"
        },
        "downloads": -1,
        "filename": "flask_value_checker-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b32ceb456c55706075581f5c1be735f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4",
        "size": 13435,
        "upload_time": "2020-02-07T21:57:36",
        "upload_time_iso_8601": "2020-02-07T21:57:36.760707Z",
        "url": "https://files.pythonhosted.org/packages/f8/66/b1847c854bd7ac3eec4002ecc54a23a45d3dd0a7b1df465c24c153676238/flask_value_checker-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83e1f9862ab593402dc3cc104779fee8e81353509ed32ca2436f3d37e93aa7f8",
          "md5": "a8d2f1532be0a33ca32c424b8763de79",
          "sha256": "076cc9a890a1f33440c1084f5b1b0701e76c886deb707f06f81911fe97313797"
        },
        "downloads": -1,
        "filename": "flask_value_checker-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a8d2f1532be0a33ca32c424b8763de79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 13499,
        "upload_time": "2020-02-07T22:04:35",
        "upload_time_iso_8601": "2020-02-07T22:04:35.838970Z",
        "url": "https://files.pythonhosted.org/packages/83/e1/f9862ab593402dc3cc104779fee8e81353509ed32ca2436f3d37e93aa7f8/flask_value_checker-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69ae74845a883a717efe7ffc8158c86b721acd0f4d005269343fe8a7a0559eda",
          "md5": "005827b0638b29aa4fc0e4235257505d",
          "sha256": "4c4a785606843842363d8ac126691573213068721d3f63b65eea625356fb5ea1"
        },
        "downloads": -1,
        "filename": "flask_value_checker-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "005827b0638b29aa4fc0e4235257505d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4",
        "size": 13435,
        "upload_time": "2020-02-07T22:11:12",
        "upload_time_iso_8601": "2020-02-07T22:11:12.540365Z",
        "url": "https://files.pythonhosted.org/packages/69/ae/74845a883a717efe7ffc8158c86b721acd0f4d005269343fe8a7a0559eda/flask_value_checker-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fae6fb00e884883110c4fb829257af050f186e5d4d4779855ce810535cfff44",
          "md5": "040437fde2621e9c7fd4873109733e9a",
          "sha256": "2330453dc5e18e1d03f371572babf5ccd0ca14f533c32ce58dd5e984d338fab0"
        },
        "downloads": -1,
        "filename": "flask-value-checker-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "040437fde2621e9c7fd4873109733e9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 13516,
        "upload_time": "2020-02-07T22:11:18",
        "upload_time_iso_8601": "2020-02-07T22:11:18.849862Z",
        "url": "https://files.pythonhosted.org/packages/4f/ae/6fb00e884883110c4fb829257af050f186e5d4d4779855ce810535cfff44/flask-value-checker-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69ae74845a883a717efe7ffc8158c86b721acd0f4d005269343fe8a7a0559eda",
        "md5": "005827b0638b29aa4fc0e4235257505d",
        "sha256": "4c4a785606843842363d8ac126691573213068721d3f63b65eea625356fb5ea1"
      },
      "downloads": -1,
      "filename": "flask_value_checker-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "005827b0638b29aa4fc0e4235257505d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 13435,
      "upload_time": "2020-02-07T22:11:12",
      "upload_time_iso_8601": "2020-02-07T22:11:12.540365Z",
      "url": "https://files.pythonhosted.org/packages/69/ae/74845a883a717efe7ffc8158c86b721acd0f4d005269343fe8a7a0559eda/flask_value_checker-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fae6fb00e884883110c4fb829257af050f186e5d4d4779855ce810535cfff44",
        "md5": "040437fde2621e9c7fd4873109733e9a",
        "sha256": "2330453dc5e18e1d03f371572babf5ccd0ca14f533c32ce58dd5e984d338fab0"
      },
      "downloads": -1,
      "filename": "flask-value-checker-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "040437fde2621e9c7fd4873109733e9a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 13516,
      "upload_time": "2020-02-07T22:11:18",
      "upload_time_iso_8601": "2020-02-07T22:11:18.849862Z",
      "url": "https://files.pythonhosted.org/packages/4f/ae/6fb00e884883110c4fb829257af050f186e5d4d4779855ce810535cfff44/flask-value-checker-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}