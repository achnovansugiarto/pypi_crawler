{
  "info": {
    "author": "Vahid Akbari",
    "author_email": "vakbari@bcgsc.ca",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "![](docs/images/NanoMethPhase.png)\n=============\n**Phase long reads and CpG methylations from Oxford Nanopore Technologies**  \n\n![](docs/images/phased_IGV.png)\n\nTable of Contents\n=================\n\n* **[Installation](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#installation)**\n  * [Using pip](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#using-pypi-repository-pip)\n  * [From source](https://github.com/vahidAK/NanoMethPhase#from-source)\n  * [Using Docker](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#using-docker-image)\n* **[NanoMethPhase Modules](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#nanomethphase-modules)**\n  * [methyl_call_processor](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#methyl_call_processor)\n  * [phase](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#phase)\n  * [dma](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#dma)\n  * [bam2bis](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#bam2bis)\n* **[Quickstart](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#quickstart)**\n* **[Full Tutorial](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#full-tutorial)**\n  * [Methylation Calling](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#1--methylation-calling)\n  * [Variant Calling](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#2--variant-calling)\n  * [SNV Phasing](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#3--phasing-of-detected-snvs)\n  * [Detecting Haplotype Methylome](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#4--detecting-haplotype-methylome)  \n* **[Example](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#example)**\n\n# Installation\n**NOTE:** Before installation dependencies in [environment.yaml](https://github.com/vahidAK/NanoMethPhase/blob/master/envs/environment.yaml) must be installed. We recommend first making a dedicated environment for NanoMethPhase with all dependencies in [environment.yaml](https://github.com/vahidAK/NanoMethPhase/blob/master/envs/environment.yaml) file installed. Then activate the environment and install NanoMethPhase using pip or you can clone the git repo and use it from source.  \nYou can make the conda environment and install all dependencies by downloading the [environment.yaml](https://github.com/vahidAK/NanoMethPhase/blob/master/envs/) file and running these lines of codes:  \n\n```\nconda env create -f environment.yaml\nconda activate nanomethphase\n```\nNow you can install NanoMethPhase using pip or use it from source in the dedicated environment with all dependencies installed.  \n\n## Using [pypi repository](https://pypi.org/project/nanomethphase/) (pip)\n\n```\npip install nanomethphase\n```\n\n## From [source](https://github.com/vahidAK/NanoMethPhase.git)\n\n```\ngit clone https://github.com/vahidAK/NanoMethPhase.git\ncd NanoMethPhase\n./nanomethphase.py\n```\n\n## Using [Docker image](https://hub.docker.com/r/jmgarant/nanomethphase)\n\nIt ships with complementary softwares SNVoter, Nanopolish, Clair, WhatsHap &\nTabix. **The container does not natively support interactive usage**, please\nrefer to the workaround below.\n\n```bash\ndocker pull jmgarant/nanomethphase\n\n# usage example:\ndocker run -t jmgarant/nanomethphase nanomethphase\ndocker run -t jmgarant/nanomethphase snvoter\ndocker run -t jmgarant/nanomethphase nanopolish\ndocker run -t jmgarant/nanomethphase clair\ndocker run -t jmgarant/nanomethphase whatshap\ndocker run -t jmgarant/nanomethphase tabix\n\n# workaround for interactive use\ndocker run -it jmgarant/nanomethphase bash -il\n```\n# NanoMethPhase Modules\n## methyl_call_processor: \nPreparing methylation call file for methylation phasing or conversion of a bam file to whole genome bisulfite sequencing format for visualization in IGV.  \n```\nusage: nanomethphase methyl_call_processor --MethylCallfile METHYLCALLFILE\n                                           [-h]\n                                           [--callThreshold CALLTHRESHOLD]\n                                           [--motif MOTIF] [--threads THREADS]\n                                           [--chunk_size CHUNK_SIZE]\n\nPreparing methylation call file for methylation phasing. Extended usage:\nnanomethphase methyl_call_processor -mc [FILE] | sort -k1,1 -k2,2n -k3,3n |\nbgzip > [FILE].bed.gz && tabix -p bed [FILE].bed.gz\n\nrequired arguments:\n  --MethylCallfile METHYLCALLFILE, -mc METHYLCALLFILE\n                        The path to the nanopolish methylation call file from.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --callThreshold CALLTHRESHOLD, -ct CALLTHRESHOLD\n                        Quality threshold for considering a site as methylated\n                        in methylation call file. Default is 2.0\n  --motif MOTIF, -mf MOTIF\n                        The motif you called methylation for (cpg), Currently\n                        just cpg.\n  --threads THREADS, -t THREADS\n                        Number of parallel processes\n  --chunk_size CHUNK_SIZE, -cs CHUNK_SIZE\n                        Number of reads send to each proccessor. Default is\n                        100\n```  \n## phase:  \nPhasing reads and CpG Methylation data to the coresponding haplotypes.  \n```\nusage: nanomethphase phase --bam BAM --output OUTPUT [--vcf VCF]\n                           [--per_read PER_READ] [--reference REFERENCE]\n                           [--methylcallfile METHYLCALLFILE] [-h]\n                           [--outformat OUTFORMAT] [--window WINDOW]\n                           [--motif MOTIF] [--hapratio HAPRATIO]\n                           [--min_base_quality MIN_BASE_QUALITY]\n                           [--average_base_quality AVERAGE_BASE_QUALITY]\n                           [--mapping_quality MAPPING_QUALITY]\n                           [--min_SNV MIN_SNV] [--threads THREADS]\n                           [--chunk_size CHUNK_SIZE] [--include_supplementary]\n                           [--overwrite]\n\nPhasing reads and Methylation\n\nrequired arguments:\n  --bam BAM, -b BAM     The path to the cordinate sorted bam file.\n  --output OUTPUT, -o OUTPUT\n                        The path to directory and prefix to save files. e.g\n                        path/to/directory/prefix\n\none of these two are required arguments:\n  --vcf VCF, -v VCF     The path to the whatshap phased vcf file or if it is\n                        your second try and you have per read info file from\n                        the first try there is no need to give vcf file,\n                        instead give the path to the per read info file using\n                        --per_read option which will be significantly faster.\n                        If you give both vcf and per read file, per read file\n                        will be ignored\n  --per_read PER_READ, -pr PER_READ\n                        If it is your second try and you have per read info\n                        file from the first try there is no need to give vcf\n                        file, instead give the path to the per read info file.\n                        This will be significantly faster.\n\nconditional required arguments based on selected output format(s):\n  --reference REFERENCE, -r REFERENCE\n                        The path to the reference file in case you selected\n                        bam2bis output format. Fasta file must be already\n                        indexed using samtools faidx.\n  --methylcallfile METHYLCALLFILE, -mc METHYLCALLFILE\n                        If you want to phase methyl call file (methycall\n                        output format) to also calculate methylation frequency\n                        for each haplotype give the path to the bgziped\n                        methylation call file from methyl_call_processor\n                        Module.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --outformat OUTFORMAT, -of OUTFORMAT\n                        What type of output you want (bam,bam2bis,methylcall).\n                        Default is bam2bis,methylcall.bam: outputs phased\n                        reads to seperate bam files.bam2bis: outputs phased\n                        reads to seperate bam files converted to bisulfite bam\n                        format for visualisation in IGV.methylcall: outputs\n                        phased methylcall and methylation frequency files for\n                        seperate haplotypes. You can select any format and\n                        multiple or all of them seperated by comma.NOTE: if\n                        you select bam2bis and/or methylcall, you must provide\n                        input methylcall.bed.gz file from\n                        methyl_call_processor module.\n  --window WINDOW, -w WINDOW\n                        if you want to only phase read for a region or\n                        chromosome. You must insert region like this chr1 or\n                        chr1:1000-100000.\n  --motif MOTIF, -mt MOTIF\n                        The motif you called methylation for (cpg), Currently\n                        just cpg.\n  --hapratio HAPRATIO, -hr HAPRATIO\n                        0-1 .The threshold ratio between haplotype to tag as\n                        H1 or H2. Default is <= 0.7\n  --min_base_quality MIN_BASE_QUALITY, -mbq MIN_BASE_QUALITY\n                        Only include bases with phred score higher or equal\n                        than this option. Default is >=7.\n  --average_base_quality AVERAGE_BASE_QUALITY, -abq AVERAGE_BASE_QUALITY\n                        Base quality that SNVs tagged to a haplotype shoud\n                        have compare to the other haplotype. When the average\n                        base quality of SNVs mapped to two haplotype for one\n                        read is equal or decision cannot be made Base on\n                        Average bq (e.g. when 10 SNVs of HP1 mapped to a read\n                        with average quality of 30, but only one SNV from HP2\n                        mapped to the same read with bq=35) Then, instead of\n                        quality count number of SNVs with quality more than\n                        average_base_quality. Default is >=20.\n  --mapping_quality MAPPING_QUALITY, -mq MAPPING_QUALITY\n                        An integer value to specify thereshold for filtering\n                        reads based om mapping quality. Default is >=20\n  --min_SNV MIN_SNV, -ms MIN_SNV\n                        minimum number of phased SNVs must a read have to be\n                        phased. Default= 2\n  --threads THREADS, -t THREADS\n                        Number of parallel processes\n  --chunk_size CHUNK_SIZE, -cs CHUNK_SIZE\n                        Number of reads send to each proccessor. Default is\n                        100\n  --include_supplementary, -is\n                        Also include supplementary reads\n  --overwrite, -ow      If output files exist overwrite them\n```  \n## dma:\nTo perform differential Methylation analysis for two group comparison. To detect differentially methylated regions between haplotypes.  \n```\nusage: nanomethphase dma --case CASE --control CONTROL --out_dir OUT_DIR\n                         --out_prefix OUT_PREFIX [-h] [--columns COLUMNS]\n                         [--Rscript RSCRIPT] [--script_file SCRIPT_FILE]\n                         [--coverage COVERAGE] [--dis_merge DIS_MERGE]\n                         [--minlen MINLEN] [--minCG MINCG]\n                         [--smoothing_span SMOOTHING_SPAN]\n                         [--smoothing_flag SMOOTHING_FLAG]\n                         [--equal_disp EQUAL_DISP] [--pval_cutoff PVAL_CUTOFF]\n                         [--delta_cutoff DELTA_CUTOFF] [--pct_sig PCT_SIG]\n                         [--overwrite]\n\nDifferential Methylation analysis for two group only (to find DMRs using\nphased frequency results) using DSS R package.\n\nrequired arguments:\n  --case CASE, -ca CASE\n                        The path to the tab delimited input methylation\n                        frequency or ready input case file(s). If multiple\n                        files, files must be in the same directory and enter\n                        them comma seperates (e.g. file1,file2,file3)\n  --control CONTROL, -co CONTROL\n                        The path to the tab delimited input methylation\n                        frequency or ready input control file(s). If multiple\n                        files, files must be in the same directory and enter\n                        them comma seperates (e.g. file1,file2,file3)\n  --out_dir OUT_DIR, -o OUT_DIR\n                        The path to the output directory\n  --out_prefix OUT_PREFIX, -op OUT_PREFIX\n                        The prefix for the output files\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --columns COLUMNS, -c COLUMNS\n                        Comma seperated Columns in the methylation frequency\n                        files that include the following information,\n                        respectively: chromosome start strand coverage\n                        methylation_frequency. If the methylation frequency\n                        file does not have strand level information then just\n                        enter columns number for chromosome start coverage\n                        methylation_frequency. Default is that your input\n                        files are already in a format required by DSS so you\n                        do not need to select any column. If you giving as\n                        input NanoMethPhase frequency files select\n                        this:--columns 1,2,4,5,7\n  --Rscript RSCRIPT, -rs RSCRIPT\n                        The path to a particular instance of Rscript to use\n  --script_file SCRIPT_FILE, -sf SCRIPT_FILE\n                        The path to the DSS_DMA.R script file\n  --coverage COVERAGE, -cov COVERAGE\n                        Coverage cutoff. Default is >=1. It is recommended\n                        that do not filter for coverage as DSS R package will\n                        take care of it.\n  --dis_merge DIS_MERGE, -dm DIS_MERGE\n                        When two DMRs are very close to each other and the\n                        distance (in bps) is less than this number, they will\n                        be merged into one. Default is 1500 bps.\n  --minlen MINLEN, -ml MINLEN\n                        Minimum length (in basepairs) required for DMR.\n                        Default is 100 bps.\n  --minCG MINCG, -mcg MINCG\n                        Minimum number of CpG sites required for DMR. Default\n                        is 15.\n  --smoothing_span SMOOTHING_SPAN, -sms SMOOTHING_SPAN\n                        The size of smoothing window, in basepairs. Default is\n                        500.\n  --smoothing_flag SMOOTHING_FLAG, -smf SMOOTHING_FLAG\n                        TRUE/FALSE. The size of smoothing window, in\n                        basepairs. Default is TRUE. We recommend to use\n                        smoothing=TRUE for whole-genome BS-seq data, and\n                        smoothing=FALSE for sparser data such like from RRBS\n                        or hydroxyl-methylation data (TAB-seq). If there is\n                        not biological replicate, smoothing=TRUE is required.\n                        Default is TRUE\n  --equal_disp EQUAL_DISP, -ed EQUAL_DISP\n                        TRUE/FALSE. When there is no biological replicate in\n                        one or both treatment groups, users can either (1)\n                        specify equal.disp=TRUE, which assumes both groups\n                        have the same dispersion, then the data from two\n                        groups are combined and used as replicates to estimate\n                        dispersion; or (2) specify smoothing=TRUE, which uses\n                        the smoothed means (methylation levels) to estimate\n                        dispersions via a shrinkage estimator. This smoothing\n                        procedure uses data from neighboring CpG sites as\n                        \"pseudo-replicate\" for estimating biological variance.\n                        Default is FALSE\n  --pval_cutoff PVAL_CUTOFF, -pvc PVAL_CUTOFF\n                        A threshold of p-values for calling DMR. Loci with\n                        p-values less than this threshold will be picked and\n                        joint to form the DMRs. See 'details' for more\n                        information. Default is 0.001\n  --delta_cutoff DELTA_CUTOFF, -dc DELTA_CUTOFF\n                        A threshold for defining DMR. In DML detection\n                        procedure, a hypothesis test that the two groups means\n                        are equal is conducted at each CpG site. Here if\n                        'delta' is specified, the function will compute the\n                        posterior probability that the difference of the means\n                        are greater than delta, and then construct DMR based\n                        on that. This only works when the test results are\n                        from 'DMLtest', which is for two-group comparison.\n                        Default is 0\n  --pct_sig PCT_SIG, -pct PCT_SIG\n                        In all DMRs, the percentage of CG sites with\n                        significant p-values (less than p.threshold) must be\n                        greater than this threshold. Default is 0.5. This is\n                        mainly used for correcting the effects of merging of\n                        nearby DMRs.\n  --overwrite, -ow      If output files exist overwrite them\n```  \n## bam2bis:\nConvert a bam file to a mock whole-genome bisulfite sequencing format for visualization in IGV.  \n```\nusage: nanomethphase bam2bis --bam BAM --reference REFERENCE --methylcallfile\n                             METHYLCALLFILE --output OUTPUT [-h]\n                             [--window WINDOW] [--motif MOTIF]\n                             [--mapping_quality MAPPING_QUALITY]\n                             [--methylation] [--threads THREADS]\n                             [--chunk_size CHUNK_SIZE]\n                             [--include_supplementary] [--overwrite]\n\nConvert a bam file to a bisulfite format for nice visualization in IGV\n\nrequired arguments:\n  --bam BAM, -b BAM     The path to the cordinate sorted bam file.\n  --reference REFERENCE, -r REFERENCE\n                        The path to the reference file. Fasta file must be\n                        already indexed using samtools faidx.\n  --methylcallfile METHYLCALLFILE, -mc METHYLCALLFILE\n                        The path to the the bgziped and indexed methylation\n                        call file from methyl_call_processor Module.\n  --output OUTPUT, -o OUTPUT\n                        The path to the output directory and desired prefix.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --window WINDOW, -w WINDOW\n                        if you want to only convert reads for a region or\n                        chromosome. You must insert region like this chr1 or\n                        chr1:1000-100000.\n  --motif MOTIF, -mt MOTIF\n                        The motif you called methylation for (cpg), Currently\n                        just cpg.\n  --mapping_quality MAPPING_QUALITY, -mq MAPPING_QUALITY\n                        An integer value to specify thereshold for filtering\n                        reads based om mapping quality. Default is >=20\n  --methylation, -met   Output methylation call and frequency for converted\n                        reads.\n  --threads THREADS, -t THREADS\n                        Number of parallel processes\n  --chunk_size CHUNK_SIZE, -cs CHUNK_SIZE\n                        Number of reads send to each proccessor. Default is\n                        100\n  --include_supplementary, -is\n                        Also include supplementary reads\n  --overwrite, -ow      If output files exist overwrite it\n```  \n# Quickstart\n\nIf you have your methylation call data and phased vcf file you can get the\nhaplotype methylome via:\n\n1- Processing and indexing methylation call file\n\n```\nnanomethphase methyl_call_processor -mc MethylationCall.tsv -t 20 | sort -k1,1 -k2,2n -k3,3n | bgzip > MethylationCall.bed.gz && tabix -p bed MethylationCall.bed.gz\n```\n\n2- Getting haplotype methylome:\n\n```\nnanomethphase  phase -mc MethylationCall.bed.gz -o Test_methylome -of bam,methylcall,bam2bis -b sorted.bam -r hg38.fa -v Phased.vcf -t 64\n```\n\nYou can select 3 output options:\n\n***bam***: output phased bam files\n\n***methylcall***: this will output phased methylation call (MethylCall.tsv, read level data) and methylation frequency files (MethylFrequency.tsv, Aggregated methylations for each region. These files can be used to detect differentially methylated regions between haplotype using *dma* module.). The headers for methylation call files are as follow:\n\n| **Shorten**   | **Description** |\n| ------------: | ----------------------------------------------------------------- |\n| chromosome    | Chromosome name.                                                  |\n| start         | Zero-Based start position of CpG.                                 |\n| end           | Zero-Based end position of CpG.                                   |\n| strand        | Strand.                                                           |\n| read_name     | Read ID.                                                          |\n| log_lik_ratio | llr from nanopolish given to each CpG as being methylated or not. |\n\nThe headers for methylation frequency files are as follow:\n\n| **Shorten**   | **Description** |\n| ------------: | ---------------------------------------------------- |\n| chromosome    | Chromosome name.                                     |\n| start         | Zero-Based start position of CpG.                    |\n| end           | Zero-Based end position of CpG.                      |\n| strand        | Strand.                                              |\n| NumOfAllCalls | Number of all called CpGs.                           |\n| NumOfModCalls | Number of all CpGs that called as methylated.        |\n| MethylFreq    | Methylation frequency (NumOfModCalls/NumOfAllCalls). |\n\n***bam2bis***: output mock whole-genome bisulfite converted bam files which can be visualized in IGV.  \n\n\n**NOTE:** NanoMethPhase will also output a ***PerReadInfo.tsv*** file. This file includes the folllowing information:  \n\n| **Shorten**             | **Description** |\n| ----------------------: | ----------------------------------------------------------------------------------------------------------------------- |\n| chromosome              | Chromosome that read mapped to.                                                                                         |\n| ReadRefStart            | Zero-Based start position where the read mapped.                                                                        |\n| ReadRefEnd              | Zero-Based end position where the read mapped.                                                                          |\n| ReadID                  | Read ID.                                                                                                                |\n| strand                  | Strand.                                                                                                                 |\n| ReadFlag                | Bitwise flag of the read.                                                                                               |\n| ReadLength              | The length of mapped read.                                                                                              |\n| Haplotype               | Haplotype status of SNVs mapped to the read (for each read SNVs from each haplotype will be written in separate lines). |\n| NumOfPhasedSNV          | Number of all SNVs (regardless of base quality filter) from the haplotype mapped to the read.                           |\n| Position:BaseQuality    | Genomic position:Base quality of the SNVs.                                                                              |\n\nHaving this file allow you to use it instead of the vcf file which improves the speed significantly for future runs, for example when you wish to phase with different threshols etc.  \n\n# Full Tutorial\n\nIn order to get the phased methylome you also need the following third-party\nsoftware:\n\n[Nanopolish](https://github.com/jts/nanopolish) : To call CpG methylation.\n\n[Clair](https://github.com/HKU-BAL/Clair) or other variant callers: To call\nvariants for your sample. Alternatively, you might already have variant calling\ndata for example from Illumina sequencing.\n\n[WhatsHap](https://github.com/whatshap/whatshap): To phase single nucleotide\nvariants.\n\n## 1- Methylation Calling\n\n### 1-1 indexing fastq file and fast5 files:\n\nNOTE: Fastqs must be merged to a single file\n\n```\nnanopolish index -d /path/to/fast5s_directory/.fastq\n```\n\n### 1-2 Methylation calling for CpG from each read:\n\n```\nnanopolish call-methylation -t <number_of_threads> -q cpg -r /path/to/fastq_fromstep-1/fastq.fastq -b /path/to/sorted_and_indexed/bam.bam -g /path/to/reference.fa > /path/to/MethylationCall.tsv\n```\n\nFor the full tutorial please refer to\n[Nanopolish](https://github.com/jts/nanopolish) page on GitHub.\n\n## 2- Variant Calling\n\nWe have used Clair to call variants. However, you may call variants with other\ntools or your variant data may come from Illumina or other methods.\n\nYou can call variants for each chromosome using the following command and then\nconcatenate all files:\n\n```\nfor i in chr{1..22} chrX chrY; do callVarBam --chkpnt_fn <path_to_model_file> --ref_fn <reference_genome.fa> --bam_fn <sorted_indexed.bam> --ctgName $i --sampleName <your_sample_name> --call_fn $i\".vcf\" --threshold 0.2 --samtools <path_to_executable_samtools_software> --pypy <path_to_executable_pypy > --threads <number_of_threads>\n```\n\nFor the full tutorial please refer to [Clair](https://github.com/HKU-BAL/Clair)\npage on GitHub.\n\nAfter variant calling, you can select only SNVs which will be used for phasing:\n```\nawk '$4 != \".\" && $5 != \".\" && length($4) == 1 && length($5) == 1 && $6 > <the_variant_calling_quality_threshold>' variants.vcf > HighQualitySNVs.vcf\n```\n\nIf you are calling variants from low coverage nanopore data (<30x) using Clair, you can also use our other tool [SNVoter](https://github.com/vahidAK/SNVoter) to improve SNV detection.\n\n## 3- Phasing of detected SNVs\n\nIf you have your SNVs data available you need to phase them using\n[WhatsHap](https://github.com/whatshap/whatshap).\n\n```\nwhatshap phase --ignore-read-groups --reference reference.fa -o HighQualitySNVs_whatshap_phased.vcf HighQualitySNVs.vcf sorted_indexed.bam\n```\n\nFor the full tutorial please refer to\n[WhatsHap](https://github.com/whatshap/whatshap) page on GitHub.\n\nIf you have Trio data (Father, Mother, Child) you can use the script\n[Trio_To_PhaseVCF_4FemaleChild.sh](https://github.com/vahidAK/NanoMethPhase/tree/master/scripts)\nor\n[Trio_To_PhaseVCF_4MaleChild.sh](https://github.com/vahidAK/NanoMethPhase/tree/master/scripts)\nscript to make a mock phased vcf file and use it as input for NanoMethPhase.\n\n## 4- Detecting Haplotype Methylome\n\n### 4-1 First you need to phase process methylation call file from Nanopolish.\n\n```\nnanomethphase methyl_call_processor -mc MethylationCall.tsv -t 20 | sort -k1,1 -k2,2n -k3,3n | bgzip > MethylationCall.bed.gz && tabix -p bed MethylationCall.bed.gz\n```\n\n### 4-2 Getting haplotype methylome:\n\n```\nnanomethphase  phase -mc MethylationCall.bed.gz -o Test_methylome -of bam,methylcall,bam2bis -b sorted.bam -r hg38.fa -v Phased.vcf -t 64\n```\n\nIf your are not using called SNVs from nanopore data, and they come from, for\nexample, short-read sequencing, we recommend using -mbq 0 in the above code.\n\nYou can select 3 output options:\n\n***bam***: output phased bam files\n\n***methylcall***: this will output phased methylation call (MethylCall.tsv, read level data) and methylation frequency files (MethylFrequency.tsv, Aggregated methylations for each region. These files can be used to detect differentially methylated regions between haplotype using *dma* module.). The headers for methylation call files are as follow:\n\n| **Shorten**   | **Description** |\n| ------------: | ----------------------------------------------------------------- |\n| chromosome    | Chromosome name.                                                  |\n| start         | Zero-Based start position of CpG.                                 |\n| end           | Zero-Based end position of CpG.                                   |\n| strand        | Strand.                                                           |\n| read_name     | Read ID.                                                          |\n| log_lik_ratio | llr from nanopolish given to each CpG as being methylated or not. |\n\nThe headers for methylation frequency files are as follow:\n\n| **Shorten**   | **Description** |\n| ------------: | ---------------------------------------------------- |\n| chromosome    | Chromosome name.                                     |\n| start         | Zero-Based start position of CpG.                    |\n| end           | Zero-Based end position of CpG.                      |\n| strand        | Strand.                                              |\n| NumOfAllCalls | Number of all called CpGs.                           |\n| NumOfModCalls | Number of all CpGs that called as methylated.        |\n| MethylFreq    | Methylation frequency (NumOfModCalls/NumOfAllCalls). |\n\n***bam2bis***: output mock whole-genome bisulfite converted bam files which can be visualized in IGV.\n\n\n**NOTE:** NanoMethPhase will also output a ***PerReadInfo.tsv*** file. This file includes the folllowing information:  \n\n| **Shorten**             | **Description** |\n| ----------------------: | ----------------------------------------------------------------------------------------------------------------------- |\n| chromosome              | Chromosome that read mapped to.                                                                                         |\n| ReadRefStart            | Zero-Based start position where the read mapped.                                                                        |\n| ReadRefEnd              | Zero-Based end position where the read mapped.                                                                          |\n| ReadID                  | Read ID.                                                                                                                |\n| strand                  | Strand.                                                                                                                 |\n| ReadFlag                | Bitwise flag of the read.                                                                                               |\n| ReadLength              | The length of mapped read.                                                                                              |\n| Haplotype               | Haplotype status of SNVs mapped to the read (for each read SNVs from each haplotype will be written in separate lines). |\n| NumOfPhasedSNV          | Number of all SNVs (regardless of base quality filter) from the haplotype mapped to the read.                           |\n| Position:BaseQuality    | Genomic position:Base quality of the SNVs.                                                                              |\n\nHaving this file allow you to use it instead of the vcf file which improves the speed significantly for future runs, for example when you wish to phase with different threshols etc.  \n\n### 4-3 Differential Methylation Analysis:\n\n```\nnanomethphase dma -c 1,2,4,5,7 -ca <path to methylation frequency for haplotype1> -co <path to methylation frequency for haplotype2> -o <output directory> -op <output Prefix>\n```\n\nWe use [DSS](https://www.bioconductor.org/packages/release/bioc/html/DSS.html) R/Bioconductor package to call DMRs between haplotypes.\ncallDMR.txt is the main output you need that stores differentially methylated regions, callDML.txt is the output that stores differentialy methylated loci and DMLtest.txt is the output that stores statistical test results for all loci. For more documentation of output data refere to [DSS](https://www.bioconductor.org/packages/release/bioc/html/DSS.html) page.\n\n# Example:\nWe have included an example data in the Example_Data folder which you can use for a quick detection of haplotype methylome on 1Mb of chr21.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nanomethphase",
    "package_url": "https://pypi.org/project/nanomethphase/",
    "platform": "",
    "project_url": "https://pypi.org/project/nanomethphase/",
    "project_urls": {
      "GitHub": "https://github.com/vahidAK/NanoMethPhase"
    },
    "release_url": "https://pypi.org/project/nanomethphase/1.0/",
    "requires_dist": [
      "numpy (<1.19.0,>=1.16.0)",
      "pysam (>=0.15.4)",
      "pytabix (>=0.0.2)",
      "tqdm (>=4.36.1)",
      "snvoter (>=1.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Phase long reads from Oxford Nanopore Technologies based on their methylated profile.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15416239,
  "releases": {
    "0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e15af48b11ecf27c637dfb9f17dcafde35c1d5445f8d6f754e3b3eff9c36036",
          "md5": "6a5e3ded28e846c2962ac1b719929231",
          "sha256": "90fe30116a11803d0817693a5524429c12181e24b92c5e3ac45692c4737ff836"
        },
        "downloads": -1,
        "filename": "nanomethphase-0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a5e3ded28e846c2962ac1b719929231",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30111,
        "upload_time": "2020-08-18T05:01:56",
        "upload_time_iso_8601": "2020-08-18T05:01:56.416095Z",
        "url": "https://files.pythonhosted.org/packages/5e/15/af48b11ecf27c637dfb9f17dcafde35c1d5445f8d6f754e3b3eff9c36036/nanomethphase-0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "156b9391d1e4b42eb0f77746631b6126904fa5736b2131aef82fcf2a7d349f53",
          "md5": "0ddb235b39109f90b6b757b407dc4d83",
          "sha256": "3e1ef7bef7b6a6fb8d30ad7b1acce0c3690438e757dc1104753dd6f9a1e41277"
        },
        "downloads": -1,
        "filename": "nanomethphase-0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ddb235b39109f90b6b757b407dc4d83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30479,
        "upload_time": "2020-08-18T05:01:58",
        "upload_time_iso_8601": "2020-08-18T05:01:58.754785Z",
        "url": "https://files.pythonhosted.org/packages/15/6b/9391d1e4b42eb0f77746631b6126904fa5736b2131aef82fcf2a7d349f53/nanomethphase-0.0.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d69ac6161e418de8347eb115774686d5ce9d47d61a608d8a5f1fd17d9cb499a",
          "md5": "731b56c8f70304b2045eaaf27c828cea",
          "sha256": "4a0e58f31236986197bff36b21d4f85f54800cad05c8e33cc299ca46f3063ef4"
        },
        "downloads": -1,
        "filename": "nanomethphase-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "731b56c8f70304b2045eaaf27c828cea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30968,
        "upload_time": "2020-09-01T05:25:29",
        "upload_time_iso_8601": "2020-09-01T05:25:29.979935Z",
        "url": "https://files.pythonhosted.org/packages/9d/69/ac6161e418de8347eb115774686d5ce9d47d61a608d8a5f1fd17d9cb499a/nanomethphase-0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "R script required for DMA"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2510058453f628f3cd9c977f151111378fff1dcba7772b71ff26aeef1bf90b2d",
          "md5": "053cb13dec5f53b654a983e243a50d4b",
          "sha256": "24a06532b68b43a6e29407bc3c27189be54a84f48476aea72f1baffbf62cc820"
        },
        "downloads": -1,
        "filename": "nanomethphase-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "053cb13dec5f53b654a983e243a50d4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32648,
        "upload_time": "2020-09-01T05:25:31",
        "upload_time_iso_8601": "2020-09-01T05:25:31.687015Z",
        "url": "https://files.pythonhosted.org/packages/25/10/058453f628f3cd9c977f151111378fff1dcba7772b71ff26aeef1bf90b2d/nanomethphase-0.1.tar.gz",
        "yanked": true,
        "yanked_reason": "R script required for DMA"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b87d236f7905f39a96aa6a94246c291ccbe12925081a8ef988c13190872117b",
          "md5": "cc6f73deda3f8bbc25ac3dc5b9b20dc1",
          "sha256": "6fe4bbf1e53db22d4f21b80c1bde826d57b031f698c616b8339527663028c51d"
        },
        "downloads": -1,
        "filename": "nanomethphase-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc6f73deda3f8bbc25ac3dc5b9b20dc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33627,
        "upload_time": "2020-11-24T22:44:38",
        "upload_time_iso_8601": "2020-11-24T22:44:38.534915Z",
        "url": "https://files.pythonhosted.org/packages/7b/87/d236f7905f39a96aa6a94246c291ccbe12925081a8ef988c13190872117b/nanomethphase-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01b9eeb2a3285552514a3c5f4b7c28535b4856d159ad312aac5b44c326b16ab3",
          "md5": "63f4cb032b4b34841fa06beee53db6ba",
          "sha256": "e2d4447616909674386a442f29f073c4d6696dd56ee2a77752663fa98cfcaecc"
        },
        "downloads": -1,
        "filename": "nanomethphase-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "63f4cb032b4b34841fa06beee53db6ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35729,
        "upload_time": "2020-11-24T22:44:39",
        "upload_time_iso_8601": "2020-11-24T22:44:39.612449Z",
        "url": "https://files.pythonhosted.org/packages/01/b9/eeb2a3285552514a3c5f4b7c28535b4856d159ad312aac5b44c326b16ab3/nanomethphase-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11e3c023a20a3c040f5c4e70afd2fd5b8fc8b687cbca350237efe7ef92aa0f3b",
          "md5": "d1c2ade3ba47f039cf400a493e62fe05",
          "sha256": "ff2797ff1061cf6b855aca4d75416bbb70603180c1ab380205fb574d9a7474bb"
        },
        "downloads": -1,
        "filename": "nanomethphase-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1c2ade3ba47f039cf400a493e62fe05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 38247,
        "upload_time": "2021-01-26T22:06:24",
        "upload_time_iso_8601": "2021-01-26T22:06:24.463494Z",
        "url": "https://files.pythonhosted.org/packages/11/e3/c023a20a3c040f5c4e70afd2fd5b8fc8b687cbca350237efe7ef92aa0f3b/nanomethphase-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bee2f19ddebc796214eaa7c4aa613d61e6d6fd0058474d885219aba8a6059322",
          "md5": "7d719d3650edef4a5184a51121805d49",
          "sha256": "bc53bbf70d3d0fc45337563f502d7311d263af774e3dda4f588c4f78552554ad"
        },
        "downloads": -1,
        "filename": "nanomethphase-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d719d3650edef4a5184a51121805d49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 49509,
        "upload_time": "2021-01-26T22:06:25",
        "upload_time_iso_8601": "2021-01-26T22:06:25.834116Z",
        "url": "https://files.pythonhosted.org/packages/be/e2/f19ddebc796214eaa7c4aa613d61e6d6fd0058474d885219aba8a6059322/nanomethphase-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11e3c023a20a3c040f5c4e70afd2fd5b8fc8b687cbca350237efe7ef92aa0f3b",
        "md5": "d1c2ade3ba47f039cf400a493e62fe05",
        "sha256": "ff2797ff1061cf6b855aca4d75416bbb70603180c1ab380205fb574d9a7474bb"
      },
      "downloads": -1,
      "filename": "nanomethphase-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1c2ade3ba47f039cf400a493e62fe05",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 38247,
      "upload_time": "2021-01-26T22:06:24",
      "upload_time_iso_8601": "2021-01-26T22:06:24.463494Z",
      "url": "https://files.pythonhosted.org/packages/11/e3/c023a20a3c040f5c4e70afd2fd5b8fc8b687cbca350237efe7ef92aa0f3b/nanomethphase-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bee2f19ddebc796214eaa7c4aa613d61e6d6fd0058474d885219aba8a6059322",
        "md5": "7d719d3650edef4a5184a51121805d49",
        "sha256": "bc53bbf70d3d0fc45337563f502d7311d263af774e3dda4f588c4f78552554ad"
      },
      "downloads": -1,
      "filename": "nanomethphase-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7d719d3650edef4a5184a51121805d49",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 49509,
      "upload_time": "2021-01-26T22:06:25",
      "upload_time_iso_8601": "2021-01-26T22:06:25.834116Z",
      "url": "https://files.pythonhosted.org/packages/be/e2/f19ddebc796214eaa7c4aa613d61e6d6fd0058474d885219aba8a6059322/nanomethphase-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}