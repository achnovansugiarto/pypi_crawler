{
  "info": {
    "author": "Antonio Leitao",
    "author_email": "aleitao@novaims.unl.pt",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Decision Boundary Sampler (DBS)\n\n\n\n[![Build Status](https://travis-ci.org/joemccann/dillinger.svg?branch=master)](https://travis-ci.org/joemccann/dillinger) [![PyPI license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://github.com/Antonio-Leitao/dbsampler/blob/main/LICENSE) \n\nDBSampler is a package to sample points in the decision boundary of  classification problems (binary or multiclass). It is theorically exact and efficient for very high dimensions. The guarentees:\n\n  - Returns a sample of points uniformly distributed in the decision boundary.\n  - Number of points is user defined. More points for a denser sample, less for a faster run.\n  - The points are guarenteed to come from the edges of the condensed Voronoi Diagram (more below).\n<p align=\"center\">\n  <img src=\"images/linear.png\"/>\n  <img src=\"images/concentric.png\"/>\n</p>\n\n## Installation\nDependencies:\n  - Numpy\n  - Scipy\n  - Sklearn\n\nDBSampler is available on PyPI,\n\n```sh\npip install dbsampler\n```\n\n## Usage\n```python\nimport dbsampler\ncover = dbsampler.DBS(X=X,y=y,n_points=1000,n_epochs=5, distribution='uniform', metric='euclidean')\n```\n**Parameters:**\n-  ``X``: numpy array of shape (samples,features) with the points of every class.\n -  ``y``: 1-dimensional numpy array with labels of each points. Array must be flattened.\n -  ``n_points``: This determines the number of points sampled from the decision boundary. More points equates for a denser sample but slows the algorithm. Default is 1000.\n -  ``n_epochs``: This determines the number of epochs to be used. It is an iterative algorithm but it is very fast to converge. Default is 5. Currently working on a proof for an upper bound on the number of necessary iterations. \n -  ``distribution``: Initial point distribution, it is also the distribution of    the points in the decision boundary. Currently supports only _uniform_         (default).\n -  ``metric``: metric used to compute the nearest neighbours. Currently only      supports euclidean.\n\n**Returns:**\n -  ``cover``: numpy array (n_points, n_features) of points in the decision boundary.\n\n## How does it work?\nFor an in-depth explanation look at this [post](https://antonio-leitao.netlify.app/post/aprox_decision/) or at our [paper](https://openreview.net/forum?id=I44kJPuvqPD). The algorithm aims at sampling uniformly points from the edges of Voronoi Cells belonging to points of different classes. The union of these edges is the decision boundary that maximizes the distance between classes.\n\n<p align=\"center\">\n  <img src=\"images/voronoi.png\" width=\"300\"/>\n</p>\n\n\n It starts by building an initial uniform sample of the space containing ``n_points``. It then iterativelly \"pushes\" each point to the hyperplane orthogonal to the one between its closest neighbors of different classes.\n\n<p align=\"center\">\n  <img src=\"images/voronoiboudary.png\" width=\"300\"/>\n</p>\n\nSketch of proof of convergence. At each iteration in ``n_epochs``:\n 1. If both nearest neighbours have adjacent Voronoi Cells then, after projection the point is in the decision boundary (by construction).\n 2. Else then there must exist a point from class A (or not A) that is the new nearest neighbour (by definition of Voronoi Cells).\n\n<p align=\"center\">\n  <img src=\"images/linear_0.png\" width=\"200\"/>\n  <img src=\"images/linear_1.png\" width=\"200\"/>\n  <img src=\"images/linear_2.png\" width=\"200\"/>\n  <img src=\"images/linear.png\" width=\"200\"/>\n</p>\n\n## Performance\nThe bottleneck of the algorithm is the calculation of a orthogonal hyperplane for each point at each iteration. For low dimensions (<200) we use the ``null space`` of a matrix. For higher dimensions we approximate it using ``QR-Decomposition``. The average time complexity of the algorithm running _k_ epochs with _n_ points in dimension _d_ is <img src=\"https://render.githubusercontent.com/render/math?math=O(\\sqrt{d} %2B \\log{n})^{k}\">.\n\n## Citation\nIf you use DBSampler in your work or parts of the algorithm please consider citing:\n```\n@inproceedings{petri2020on,\n               title={On The Topological Expressive Power of Neural Networks},\n               author={Giovanni Petri and Ant{\\'o}nio Leit{\\~a}o},\n               booktitle={NeurIPS 2020 Workshop on Topological Data Analysis and Beyond},\n               year={2020},\n               url={https://openreview.net/forum?id=I44kJPuvqPD}\n}\n```\nIn the paper above you can find the pseudocode of the algorithm along with the proof of convergence. A complete paper about the method is coming soon.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Antonio-Leitao/dbsampler",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dbsampler",
    "package_url": "https://pypi.org/project/dbsampler/",
    "platform": "",
    "project_url": "https://pypi.org/project/dbsampler/",
    "project_urls": {
      "Homepage": "https://github.com/Antonio-Leitao/dbsampler"
    },
    "release_url": "https://pypi.org/project/dbsampler/0.0.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "sklearn"
    ],
    "requires_python": ">=3.6",
    "summary": "Package to sample points in the decision boundary.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8863498,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71c9cfb7c20103ad462b05185f40ccec2e3a7c09d11523f3cb15604574536d63",
          "md5": "9bcd990b2f143d1f3b3e40a8fa3bed77",
          "sha256": "d74442c83db34f98732d1a996ae95b28ab8c849228ec3aa249c8e80ea7921715"
        },
        "downloads": -1,
        "filename": "dbsampler-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9bcd990b2f143d1f3b3e40a8fa3bed77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4938,
        "upload_time": "2020-12-09T22:19:50",
        "upload_time_iso_8601": "2020-12-09T22:19:50.594872Z",
        "url": "https://files.pythonhosted.org/packages/71/c9/cfb7c20103ad462b05185f40ccec2e3a7c09d11523f3cb15604574536d63/dbsampler-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36dfea1e80fedf142f90a6d216a21af2f6e93f31fc83545e6501fbda5aaad852",
          "md5": "435aa0fe457e5350d11ec1014de5bc70",
          "sha256": "5a727b6e5af885f30ef3a2edd7b15af31391356c582ea3d7b732ecf1c389ea60"
        },
        "downloads": -1,
        "filename": "dbsampler-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "435aa0fe457e5350d11ec1014de5bc70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4198,
        "upload_time": "2020-12-09T22:19:51",
        "upload_time_iso_8601": "2020-12-09T22:19:51.487806Z",
        "url": "https://files.pythonhosted.org/packages/36/df/ea1e80fedf142f90a6d216a21af2f6e93f31fc83545e6501fbda5aaad852/dbsampler-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71c9cfb7c20103ad462b05185f40ccec2e3a7c09d11523f3cb15604574536d63",
        "md5": "9bcd990b2f143d1f3b3e40a8fa3bed77",
        "sha256": "d74442c83db34f98732d1a996ae95b28ab8c849228ec3aa249c8e80ea7921715"
      },
      "downloads": -1,
      "filename": "dbsampler-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9bcd990b2f143d1f3b3e40a8fa3bed77",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4938,
      "upload_time": "2020-12-09T22:19:50",
      "upload_time_iso_8601": "2020-12-09T22:19:50.594872Z",
      "url": "https://files.pythonhosted.org/packages/71/c9/cfb7c20103ad462b05185f40ccec2e3a7c09d11523f3cb15604574536d63/dbsampler-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36dfea1e80fedf142f90a6d216a21af2f6e93f31fc83545e6501fbda5aaad852",
        "md5": "435aa0fe457e5350d11ec1014de5bc70",
        "sha256": "5a727b6e5af885f30ef3a2edd7b15af31391356c582ea3d7b732ecf1c389ea60"
      },
      "downloads": -1,
      "filename": "dbsampler-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "435aa0fe457e5350d11ec1014de5bc70",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4198,
      "upload_time": "2020-12-09T22:19:51",
      "upload_time_iso_8601": "2020-12-09T22:19:51.487806Z",
      "url": "https://files.pythonhosted.org/packages/36/df/ea1e80fedf142f90a6d216a21af2f6e93f31fc83545e6501fbda5aaad852/dbsampler-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}