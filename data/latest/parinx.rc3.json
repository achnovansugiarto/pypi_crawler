{
  "info": {
    "author": "Rahul Ranjan",
    "author_email": "rahul.rrixe@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Parinx\r\n======\r\nParinx implements a basic Sphinx docstring parser language which provides\r\na interface to extract the relavant parameter. You might find\r\nit most useful for tasks involving automated data extraction from sphinx\r\ndocs. Typical usage often looks like this::\r\n```python\r\n    #!/usr/bin/env python\r\n\r\n    from parinx import parser\r\n\r\n    def test_parse_docstring(self):\r\n        docstring = \"\"\"\r\n        Return a dict.\r\n\r\n        :type zone_id: ``str``\r\n        :param zone_id: Required zone id (required)\r\n        :keyword    auth:   Initial authentication information for the node\r\n                            (optional)\r\n\r\n        :rtype:    ``dict``\r\n        \"\"\"\r\n        result = parser.parse_docstring(docstring)\r\n        print (result)\r\n```\r\n(Note parse_docstrings return a dictionary)\r\n\r\n\r\n`Parinx` is a Python module that makes working with Sphinx feel like you are working with [JSON](http://docs.python.org/library/json.html):\r\n\r\nparse_docstring\r\n===============\r\n\r\n`parse_docstring` takes `docstring` and `cls` i.e. class name as argument.\r\n Default value for cls is `None`.\r\n\r\nIt returns dict which contains <br/>\r\n<pre>\r\n    `description` of method <br/>\r\n    `arguments` contains dict of dict: zone_id{type_name, desciption and required} <br/>\r\n    `return` contains dict: {type_name, class, description} <br/>\r\n</pre>\r\n\r\n### When `cls=None`\r\n\r\n\r\n```python\r\n>>> from parinx.parser import parse_docstring\r\n>>> docstring = \"\"\"\r\n...         Return a Zone instance.\r\n...         Second line docsting.\r\n...\r\n...         :type zone_id: ``str``\r\n...         :param zone_id: Required zone id (required)\r\n...\r\n...         :keyword    auth:   Initial authentication information for the node\r\n...                             (optional)\r\n...         :type       auth: :class:`NodeAuthSSHKey` or `NodeAuthPassword`\r\n...\r\n...         :return:    instance\r\n...         :rtype: :class:`Zone` or `Node`\r\n...         \"\"\"\r\n>>> result = parse_docstring(docstring)\r\n>>> result\r\n{'return':\r\n    {\r\n        'type_name': 'class:`Zone` or `Node`',\r\n        'description': 'instance'\r\n    },\r\n 'description': 'Return a Zone instance. Second line docsting.',\r\n 'arguments':defaultdict(<function <lambda> at 0x200be60>,\r\n    {\r\n        'zone_id':\r\n            {\r\n                'type_name': '``str``',\r\n                'description': 'Required zone id (required)',\r\n                'required': True\r\n            },\r\n        'auth':\r\n            {\r\n                'type_name': 'class:`NodeAuthSSHKey` or `NodeAuthPassword`',\r\n                'description':'Initial authentication information for the node\r\n                               (optional)',\r\n                'required': False\r\n            }\r\n    }\r\n  )\r\n}\r\n>>> result['arguments']\r\ndefaultdict(<function <lambda> at 0x200bed8>,\r\n{\r\n    'zone_id':\r\n        {\r\n            'type_name': '``str``',\r\n            'description': 'Required zone id (required)',\r\n            'required': True\r\n        },\r\n    'auth':\r\n    {\r\n        'type_name': 'class:`NodeAuthSSHKey` or `NodeAuthPassword`',\r\n        'description': 'Initial authentication information for the node (optional)',\r\n        'required': False\r\n    }\r\n})\r\n>>> result['description']\r\n'Return a Zone instance. Second line docsting.'\r\n>>> return_type = result['return']['type_name']\r\n>>> return_type\r\n'class:`Zone` or `Node`'\r\n```\r\n\r\n### When `cls!= None`\r\n\r\n```python\r\n>>> class Foo(object):\r\n...     def create_node(self, **kwargs):\r\n...             \"\"\"\r\n...             Create a new node instance.\r\n...\r\n...             :keyword    name:   String with a name for this new node (required)\r\n...             :type       name:   ``str``\r\n...\r\n...             :keyword    size:   The size of resources allocated to this node.\r\n...                                 (required)\r\n...             :type       size:   ``dict``\r\n...\r\n...             :return: The newly created node.\r\n...             :rtype: :class:`Node`\r\n...             \"\"\"\r\n...\r\n>>> docstring = get_method_docstring(Foo, 'create_node')\r\n>>> parse_docstring(docstring, Foo)\r\n{\r\n    'return':\r\n        {\r\n            'type_name': 'class:`Node`',\r\n            'description': 'The newly created node.'\r\n        },\r\n    'description': 'Create a new node instance.',\r\n    'arguments': defaultdict(<function <lambda> at 0x17eb8c0>,\r\n        {\r\n            'name':\r\n                {\r\n                    'type_name': '``str``',\r\n                    'description': 'String with a name for this new node (required)',\r\n                    'required': True\r\n                },\r\n            'size':\r\n                {\r\n                    'type_name': '``dict``',\r\n                    'description': 'The size of resources allocated to this node.\r\n                                    (required)',\r\n                    'required': True\r\n                }\r\n        }\r\n    )\r\n}\r\n```\r\nsplit_docstring\r\n===============\r\n\r\n`split_docstring' return description and list of fields strings.\r\n\r\nSupported field strings are:\r\n* ':param' <br/>\r\n* ':type' <br/>\r\n* ':keyword' <br/>\r\n* ':rtype:' <br/>\r\n* '@inherits:' <br/>\r\n* ':return:' <br/>\r\n\r\n```python\r\n>>> result = split_docstring(docstring)\r\n>>> result\r\n('Return a node instance.',\r\n[':keyword    name:   String with a name for this new node (required)',\r\n ':type       name:   ``str`` ',\r\n ':keyword    size: The size of resources allocated to this node. (required)',\r\n ':type       size: ``dict`` ',\r\n ':return: instance',\r\n ':rtype: :class:`Node` '])\r\n>>> result[1]\r\n[':keyword    name:   String with a name for this new node (required)',\r\n':type name:   ``str`` ',\r\n':keyword    size:   The size of resources allocated to this node.\r\n                     (required)',\r\n':type       size:   ``dict`` ',\r\n':return: instance',\r\n':rtype: :class:`Node` ']\r\n>>> result[1][3]\r\n':type       size:   ``dict`` '\r\n```\r\n\r\nget_method_docstring\r\n====================\r\n\r\n`get_method_docstring` takes class name(cls) and method name as argument(method_name).\r\n\r\nIt returns method docstring. <br/>\r\nIf method docstring is empty then it takes it from parent class.\r\n\r\n```python\r\n>>> class Parent(object):\r\n        def create_node(self, **kwargs):\r\n            \"\"\"\r\n            Create a new node instance.\r\n\r\n            :keyword    name:   String with a name for this new node (required)\r\n            :type       name:   ``str``\r\n\r\n            :keyword    size:   The size of resources allocated to this node.\r\n                                (required)\r\n            :type       size:   ``dict``\r\n\r\n            :return: The newly created node.\r\n            :rtype: :class:`Node`\r\n            \"\"\"\r\n\r\n>>> class Child(Parent):\r\n        def return_node(self, **kwargs):\r\n            \"\"\"\r\n            Return a Zone instance.\r\n            Second line docsting.\r\n\r\n            :type zone_id: ``str``\r\n            :param zone_id: Required zone id (required)\r\n\r\n            :keyword    auth:   Initial authentication information for the node\r\n                            (optional)\r\n            :type       auth: :class:`NodeAuthSSHKey` or `NodeAuthPassword`\r\n\r\n            :return:    instance\r\n            :rtype: :class:`Zone` or `Node`\r\n            \"\"\"\r\n```\r\n```python\r\n>>> from parinx.parser import get_method_string\r\n>>> get_method_docstring(Parent, 'create_node').split('\\n')\r\n['Create a new node instance.', '',\r\n ':keyword    name:   String with a name for this new node (required)',\r\n ':type       name:   ``str``', '',\r\n ':keyword    size:   The size of resources allocated to this node.',\r\n '                        (required)',\r\n ':type       size:   ``dict``', '',\r\n ':return: The newly created node.',\r\n ':rtype: :class:`Node`']\r\n>>> get_method_docstring(Child, 'return_node').split('\\n')\r\n['Return a Zone instance.',\r\n 'Second line docsting.', '',\r\n ':type zone_id: ``str``',\r\n ':param zone_id: Required zone id (required)', '',\r\n ':keyword    auth: Initial authentication information for the node',\r\n                  '                    (optional)',\r\n':type       auth: :class:`NodeAuthSSHKey` or `NodeAuthPassword`', '',\r\n':return:    instance', ':rtype: :class:`Zone` or `Node`']\r\n>>> get_method_docstring(Child, 'create_node').split('\\n')\r\n['Create a new node instance.', '',\r\n ':keyword    name:String with a name for this new node (required)',\r\n ':type       name:   ``str``', '',\r\n ':keyword    size:   The size of resources allocated to this node.',\r\n '                        (required)',\r\n ':type       size:   ``dict``', '',\r\n ':return: The newly created node.',\r\n ':rtype: :class:`Node`']\r\n>>> get_method_docstring(Parent, 'return_node').split('\\n')\r\n```",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rahulrrixe/parinx",
    "keywords": "sphinx,docstring,parser",
    "license": "Apache License (2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parinx",
    "package_url": "https://pypi.org/project/parinx/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/parinx/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/rahulrrixe/parinx"
    },
    "release_url": "https://pypi.org/project/parinx/0.1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Parinx implements a basic Sphinx docstring parser language                    which providesa interface to extract the relavant parameter.                  You might find it most useful for tasks involving automated                   data extraction from sphinx docs.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1246523,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bec516f48f20700f8f50b5955774ae4f276812f38126e2b3206bdad7fe13915d",
          "md5": "77aba38b3d62628bd5eb07dafc6b4730",
          "sha256": "84c134654953265b3d27123e3fe9bd122a262e6c1d54ffd7930f1206b5433e03"
        },
        "downloads": -1,
        "filename": "parinx-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "77aba38b3d62628bd5eb07dafc6b4730",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8200,
        "upload_time": "2014-03-18T00:59:03",
        "upload_time_iso_8601": "2014-03-18T00:59:03.140299Z",
        "url": "https://files.pythonhosted.org/packages/be/c5/16f48f20700f8f50b5955774ae4f276812f38126e2b3206bdad7fe13915d/parinx-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1006b741ac299730385a9db279d4d677a5c647eee898ffbef540585f398f966e",
          "md5": "1136bbe8bce24d2deda3af4a39ff4789",
          "sha256": "5c1193ffc1ad4c74a4ba7e8eb6edc52d3099bd14bac77312caa448c7aba7c49e"
        },
        "downloads": -1,
        "filename": "parinx-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1136bbe8bce24d2deda3af4a39ff4789",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8513,
        "upload_time": "2014-03-23T22:44:33",
        "upload_time_iso_8601": "2014-03-23T22:44:33.776338Z",
        "url": "https://files.pythonhosted.org/packages/10/06/b741ac299730385a9db279d4d677a5c647eee898ffbef540585f398f966e/parinx-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c761e5c4f59091907faed4f5b94d32c84a412088bbb644567c31550b2577362e",
          "md5": "8b583b728bb587fcd3b985ccadb32f2b",
          "sha256": "1735859e30d03a7d2e8aeb36affa4d5c302539e0484d177b0c91e8b2d2e6d920"
        },
        "downloads": -1,
        "filename": "parinx-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8b583b728bb587fcd3b985ccadb32f2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8621,
        "upload_time": "2014-06-25T23:46:14",
        "upload_time_iso_8601": "2014-06-25T23:46:14.677930Z",
        "url": "https://files.pythonhosted.org/packages/c7/61/e5c4f59091907faed4f5b94d32c84a412088bbb644567c31550b2577362e/parinx-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c761e5c4f59091907faed4f5b94d32c84a412088bbb644567c31550b2577362e",
        "md5": "8b583b728bb587fcd3b985ccadb32f2b",
        "sha256": "1735859e30d03a7d2e8aeb36affa4d5c302539e0484d177b0c91e8b2d2e6d920"
      },
      "downloads": -1,
      "filename": "parinx-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8b583b728bb587fcd3b985ccadb32f2b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8621,
      "upload_time": "2014-06-25T23:46:14",
      "upload_time_iso_8601": "2014-06-25T23:46:14.677930Z",
      "url": "https://files.pythonhosted.org/packages/c7/61/e5c4f59091907faed4f5b94d32c84a412088bbb644567c31550b2577362e/parinx-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}