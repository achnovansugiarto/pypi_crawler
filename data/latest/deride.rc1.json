{
  "info": {
    "author": "Alberto Mardegan",
    "author_email": "info@mardy.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Testing :: Unit",
      "Topic :: Utilities"
    ],
    "description": "[![pipeline status](https://gitlab.com/mardy/deride/badges/master/pipeline.svg)](https://gitlab.com/mardy/deride/-/commits/master)\n[![coverage report](https://gitlab.com/mardy/deride/badges/master/coverage.svg)](https://gitlab.com/mardy/deride/-/commits/master)\n\n# Deride\n\nDeride (pronounced /de'ride/) is a tool which produces a mock for a C/C++ file:\nit analyses the input `.h` header file using [clang](http://clang.org/) and\ngenerates a new `.cpp` file containing the implementation of the mock object\nand a `.h` header file which can be used to interface with the mock object.\n\nFor each method in the input class Deride generates a method in the mock\ncontroller which can be used to install a callback to be invoked whenever the\noriginal method is invoked.\n\n**NOTE**: Deride is still a work-in-progress, has not been tested but on a\nhandful of files, and is likely to crash on non-trivial input (in any case,\nshould encounter such issues, please [file a\nbug](https://gitlab.com/mardy/deride/-/issues)). It may be that the generated\nfiles are not usable as-is, but need manual editing.\n\n## Example usage\n\n```sh\nderide --pattern MyClass my_class.h\n```\n\nThis will generate two files, `mock_my_class.h` and `mock_my_class.cpp`, which\nyou should link to your unit tests instead of the real MyClass implementation:\nthese files will provide a mock implementation of MyClass which you can control\nand inspect in your tests.\n\nFor example, if `horse.h` contains this class:\n\n```cpp\nclass HorsePrivate;\nclass Horse {\npublic:\n    Horse(const std::string &name);\n    Horse(Horse &&other);\n    virtual ~Horse();\n\n    std::string name() const;\n\n    void jump();\n    float jumpHeight() const;\n\n    void setColor(const std::string &colorName);\n    std::string color() const;\n\nprivate:\n    HorsePrivate *d_ptr;\n};\n```\n\nonce Deride has run it will have created `mock_horse.h` containing a\n`MockHorse` object having these methods:\n\n```cpp\nclass MockHorse {\n    // ...\n    static void onConstructorCalled(std::function<void(const std::string &)> callback);\n    static void onConstructorCalled(std::function<void(Animals::Horse &&)> callback);\n\n    void setNameResult(std::string result):\n    void setJumpHeightResult(float result);\n    void setColorResult(std::string result);\n\n    void onNameCalled(std::function<std::string()> callback);\n    void onJumpCalled(std::function<void()> callback);\n    void onJumpHeightCalled(std::function<float()> callback);\n    void onSetColorCalled(std::function<void(const std::string &)> callback);\n    void onColorCalled(std::function<std::string()> callback);\n\n    // ...\n};\n```\n\nThat is, for each method returning a value Deride generates a method called\n`set<method>Result()` which allows you to inject the desired result. In\naddition to that, you can register a callback to be invoked every time that a\nmethod is called. This allows you both to monitor how many times a method is\ncalled (and with what params) and to provide its implementation; please note\nthat if you use the callback mechanism than the return value from the callback\nwill be used as the function's return value, instead of the one set via\n`set<method>Result()`).\n\n\n### Creating a mock object\n\nSo, how do you get a mock object? There are a couple of ways, and which one you\nuse depends on the way that the target objects are instantiated:\n\n1. If you expect only an instance of the object to get instantiated, then you\n   can safely create the mock object on the stack as soon as your test starts:\n\n   ```cpp\n   MockHorse mock;\n   mock.onConstructorCalled([](const std::string &name) {\n       // This code is executed when the tested code creates a Horse\n       std::cout << \"A horse has been created: \" << name;\n   });\n   mock.onNameCalled([]() { ... });\n   ```\n\n2. If the test code creates several instances of the Horse class (well, you can\n   do it even for a single one, but this method is especially useful when there\n   are many of them), you can create a mock object for a given Horse instance\n   by calling the `mockFor()` method:\n\n   ```cpp\n   run_my_test_code();\n   // somehow, you get a handle to a `Horse*` in the variable `horse`. Then you\n   // can do:\n   MockHorse *mock = MockHorse::mockFor(horse);\n   mock->onNameCalled([]() { ... });\n   ```\n\n3. And if you don't even have a way to retrieve a handle for the `Horse`\n   objects, you can call the `latestInstance()` method:\n\n   ```cpp\n   run_my_test_code();\n   // Get a mock for the latest (newest) instance of the Horse class created\n   MockHorse *mock = MockHorse::latestInstance();\n   mock->onNameCalled([]() { ... });\n   ```\n\n4. Using a combination of the first solution and the previous one, it's\n   possible to handle more complex cases (see\n   `examples/many-mocks/test_program.cpp` for a full example):\n\n   ```cpp\n   Mock *mockTom;\n   Mock *mockDick;\n   Mock *mockHarry;\n\n   Animals::MockHorse::onConstructorCalled([&](const std::string &name) {\n       std::cout << \"Horse instantiated: \" << name << std::endl;\n       if (name == \"Tom\") {\n           mockTom = Mock::latestInstance();\n       } else if (name == \"Dick\") {\n           mockDick = Mock::latestInstance();\n       } else if (name == \"Harry\") {\n           mockHarry = Mock::latestInstance();\n       }\n   });\n   ```\n\n\n### Mocking C libraries\n\nDeride can also mock plain C libraries, but for convenience the generated mock\nwill still be a C++ object, so that one can use lambda functions to register\nthe monitoring callbacks.\n\nA single `Mock` file will be generated, containing the `on<method>Called()`\nregistration functions and (for functions returning a value) the\n`set<method>Return()` setters.\n\nThe small project under `examples/lmdb/` shows how to generate and use a mock\nobject for the C [lmdb](http://www.lmdb.tech/doc/) library.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/mardy/deride",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "deride",
    "package_url": "https://pypi.org/project/deride/",
    "platform": null,
    "project_url": "https://pypi.org/project/deride/",
    "project_urls": {
      "Homepage": "https://gitlab.com/mardy/deride"
    },
    "release_url": "https://pypi.org/project/deride/0.1/",
    "requires_dist": [
      "Jinja2",
      "clang"
    ],
    "requires_python": "",
    "summary": "A generator of mock classes for C/C++ unit testing",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15663285,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9b3719e83e45d5f3945ca56e288745716c970fdbc75470369f86c87e66704ca",
          "md5": "26ed55153bd3617c3a05d8a34b8efb57",
          "sha256": "65b898f9c46c355f4761cc1eaf08c4f1eee1d9665a18cc6d8d477c521bd8d889"
        },
        "downloads": -1,
        "filename": "deride-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26ed55153bd3617c3a05d8a34b8efb57",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15558,
        "upload_time": "2022-11-05T06:49:14",
        "upload_time_iso_8601": "2022-11-05T06:49:14.072484Z",
        "url": "https://files.pythonhosted.org/packages/f9/b3/719e83e45d5f3945ca56e288745716c970fdbc75470369f86c87e66704ca/deride-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76e0b79724f7c08718bc4129ab890189c52c8dc376c721106fe64220285d6da4",
          "md5": "29bdac69b1c272559ae4e2b8c65ae912",
          "sha256": "da85cf09462d526aa6ced8e77453b09c36e1132571d768ccd29087e5153ad774"
        },
        "downloads": -1,
        "filename": "deride-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "29bdac69b1c272559ae4e2b8c65ae912",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15441,
        "upload_time": "2022-11-05T06:49:15",
        "upload_time_iso_8601": "2022-11-05T06:49:15.878865Z",
        "url": "https://files.pythonhosted.org/packages/76/e0/b79724f7c08718bc4129ab890189c52c8dc376c721106fe64220285d6da4/deride-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9b3719e83e45d5f3945ca56e288745716c970fdbc75470369f86c87e66704ca",
        "md5": "26ed55153bd3617c3a05d8a34b8efb57",
        "sha256": "65b898f9c46c355f4761cc1eaf08c4f1eee1d9665a18cc6d8d477c521bd8d889"
      },
      "downloads": -1,
      "filename": "deride-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "26ed55153bd3617c3a05d8a34b8efb57",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15558,
      "upload_time": "2022-11-05T06:49:14",
      "upload_time_iso_8601": "2022-11-05T06:49:14.072484Z",
      "url": "https://files.pythonhosted.org/packages/f9/b3/719e83e45d5f3945ca56e288745716c970fdbc75470369f86c87e66704ca/deride-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76e0b79724f7c08718bc4129ab890189c52c8dc376c721106fe64220285d6da4",
        "md5": "29bdac69b1c272559ae4e2b8c65ae912",
        "sha256": "da85cf09462d526aa6ced8e77453b09c36e1132571d768ccd29087e5153ad774"
      },
      "downloads": -1,
      "filename": "deride-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "29bdac69b1c272559ae4e2b8c65ae912",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15441,
      "upload_time": "2022-11-05T06:49:15",
      "upload_time_iso_8601": "2022-11-05T06:49:15.878865Z",
      "url": "https://files.pythonhosted.org/packages/76/e0/b79724f7c08718bc4129ab890189c52c8dc376c721106fe64220285d6da4/deride-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}