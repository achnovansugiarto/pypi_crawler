{
  "info": {
    "author": "Fulfil.IO Inc., Openlabs Technologies and Consulting (P) Ltd.",
    "author_email": "info@fulfil.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Plugins",
      "Framework :: Tryton",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Office/Business"
    ],
    "description": "Trytond Mail\n=============\n\n.. image:: https://secure.travis-ci.org/fulfilio/trytond-mail.png?branch=develop\n  :target: https://travis-ci.org/fulfilio/trytond-mail\n\nOne does not simply send emails!\n--------------------------------\n\nSending emails from tryton modules is a frequent requirement. This module\nmakes it easier by providing a convenient and consistent API to generate email\nmessages. In addition, the module gives you a few goodies (template\ninheritance, filters) that come in handy when sending emails.\n\nInstallation\n------------\n\nThe module can be installed from pypi\n\n.. code-block:: sh\n\n    pip install fio_mail\n\n.. tip::\n\n   Remember to install a version compatible with your version of trytond.\n\nAlternatively the module could be added as a dependency to your module\n\n.. code-block:: python\n\n    # your_module/tryton.cfg\n    [tryton]\n    ...\n    depends:\n      ...\n      mail\n      ...\n\nSee `sale-confirmation-email module <https://github.com/fulfilio/trytond-sale-confirmation-email/blob/01e0887bfa96044318b0bf7b43094b3ee4a1e2fb/tryton.cfg#L6>`_\nfor practical example.\n\nIf you use setup.py to install modules, remember to set the prefix as\nfio for the modules. The `setup.py file <https://github.com/fulfilio/trytond-sale-confirmation-email/blob/01e0887bfa96044318b0bf7b43094b3ee4a1e2fb/setup.py#L94>`_ \nfrom `sale confirmation email module <https://github.com/fulfilio/trytond-sale-confirmation-email>`_ \nis a good example.\n\nQuickstart\n----------\n\nHere is a code example, if you wished to send emails when sale orders are\nconfirmed\n\n.. code-block:: python\n\n    def confirm(cls, sales):\n        Mail = Pool().get('mail.mail')\n\n        # Call super function to confirm\n        super(Sale, cls).confirm(sales)\n\n        # Send an email for each order\n        for sale in sales:\n            email_message = Mail.render_email(\n                from_email='order-confirmation@mydomain.com',\n                to=[sale.party.email],\n                subject='Your Order is confirmed',\n                text_template='my_module/emails/order-confirmed.txt',\n                sale=self,      # passed to template context\n            )\n            # send email_message using your preferred gateway\n\nDetailed Introduction\n---------------------\n\nThe module provides a convenient method named ``render_email`` which returns\na python ``mail.Message`` object which can then be sent using smtpservers.\n\n.. tip::\n\n   Sending emails during a transaction could be slow and result in bad\n   user experience. Use the \n   `email-queue <https://github.com/fulfilio/email-queue>`_ module instead.\n\n\nRendering of templates\n``````````````````````\n\nThe email requires at-least one of either ``html`` or ``text`` templates to be\nspecified. Specifying both is recommended as some email clients prefer to\ndisplay text content when available.\n\nSpecifying both text and html parts\n\n.. code-block:: python\n\n    email_message = Mail.render_email(\n        from_email='me@mydomain.com',\n        to=['you@somewhere.com'],\n        subject='A great honking email',\n        text_template='my_module/emails/honking-email.txt',\n        html_template='my_module/emails/honking-email.html',\n    )\n\nThe template name is expected to be in the format:\n`<module_name>/path/to/email/template`.\n\n.. tip::\n\n   Remember to add the folder containing email templates to your data in\n   `setup.py` to ensure they are copied to site-packages and distributed\n   with your module.\n\nExtending templates (DRY)\n`````````````````````````\n\nEvery business is unique and so should be their emails. You may want to\nadd content to your template, change the design or completely overwrite\nthe email. If your goal is to add (extend) the email, the API allows you\nto do it without repeating yourself.\n\nIn your downstream module, extend the template\n\n.. code-block:: html+jinja\n\n    {% extends 'sale-confirmation-email/email//sale-confirmation-html.html' %}\n\n    {% block footer %}\n    {{ super() }}\n    <br/>\n    Visit us on <a href=\"https://facebook.com/mybusiness\">facebook</a>\n    {% endblock footer %}\n\nIn the above example, the standard template bundled with the \n`sale confirmation email module <https://github.com/fulfilio/trytond-sale-confirmation-email>`_ \nis extended to add a link to the facebook page.\n\nThis pattern is common if you are familiar with the \n`jinja2 <http://jinja.pocoo.org/>`_ templating engine. You can learn more \nabout extending them from `jinja2 docs <http://jinja.pocoo.org/docs/dev/templates/#template-inheritance>`_\n\n\nTemplate Filters\n````````````````\n\nVariable within templates can be modified using filters\n\n``{{ name|striptags|title }}`` for example will remove all HTML Tags from the\nname and title-cases it. Filters that accept arguments have parentheses around\nthe arguments, like a function call. This example will join a list by commas: \n``{{ list|join(', ') }}``.\n\nThe `List of Builtin Filters <http://jinja.pocoo.org/docs/dev/templates/#list-of-builtin-filters>`_ \non Jinja2 documentation describes all the builtin filters. In addition,\nthis module offers the following filters:\n\ndateformat(date, format='medium')\n+++++++++++++++++++++++++++++++++\n\nFormat the date with the current language from the context. For other\npossible formats, refer the \n`babel documentation <http://babel.pocoo.org/docs/dates/#date-and-time>`_.\n\nExample\n\n.. code-block:: html+jinja\n\n    <td>Date</td>\n    <td>{{ sale.date|dateformat }}</td>\n\ndatetimeformat(datetime, format)\n++++++++++++++++++++++++++++++++\n\nFormat the datetime with the current language from the context. For other\npossible formats, refer the \n`babel documentation <http://babel.pocoo.org/docs/dates/#date-and-time>`_.\n\nExample\n\n.. code-block:: html+jinja\n\n    Created on {{ sale.create_date|datetimeformat('long') }}</td>\n\ncurrencyformat(amount, currency, format=None)\n+++++++++++++++++++++++++++++++++++++++++++++\n\nReturn formatted currency value. For more formatting information refer\n`babel documentation <http://babel.pocoo.org/docs/api/numbers/?highlight=format_currency#babel.numbers.format_currency>`_\n\nExample\n\n.. code-block:: html+jinja\n\n    <td>Total Value</td>\n    <td>{{ sale.total_amount|currencyformat(sale.currency.code) }}</td>\n\n\nto, cc and bcc\n```````````````\n\nSending an email to a certain set of recepients is different from setting\nthe recepient headers on the email. To indicate the recepients, send a\nlist of recepients to the ``to`` argument.\n\nWhile ``cc`` is a commonly set header to indicate the recepients who have been \ncopied the email, setting ``bcc`` would defeat the purpose as the recepients \nwould be disclosed to everyone. Hence ``cc`` is the only other argument\naccepted by the ``render_email`` method. To send a ``bcc``, you could send the\nsame message to the recepient when using the smtpserver to send email.\n\nExample\n\n.. code-block:: python\n\n    email_message = Mail.render_email(\n        to=['you@somewhere.com', 'youtoo@somewhere.com'],\n        cc=['myself@mydomain.com'],\n\n        # Usual stuff\n        from_email='me@mydomain.com',\n        subject='A great honking email',\n        text_template='my_module/emails/honking-email.txt',\n    )\n    \n\nSending attachments\n```````````````````\n\nThe method also accepts an argument ``attachments`` which takes a dictionary\nwhere keys represent the filenames and the values are buffer streams of\nthe content to be attached. If attachment(s) are present, the mail type is\nautomatically changed to ``multipart/mixed``. The attachments should appear\nas downloadable attachments on email clients\n\nExample of sending\n\n.. code-block:: python\n\n    # Read a file from filesystem\n    order_copy = buffer(open('order_copy.pdf').read())\n\n    # From a binary field in tryton\n    product_photo = product.image\n\n    email_message = Mail.render_email(\n        attachments={\n            'order-copy.pdf': order_copy,\n            'product-photo.png': product_photo,\n        },\n\n        # Other usual stuff\n        from_email='me@mydomain.com',\n        to=['you@somewhere.com'],\n        subject='A great honking email',\n        text_template='my_module/emails/honking-email.txt',\n        html_template='my_module/emails/honking-email.html',\n    )\n\nAuthors and Contributors\n------------------------\n\nThis module was built at `Fulfil.IO <http://www.fulfil.io>`_. \n\nProfessional Support\n--------------------\n\nThis module is professionally supported by `Fulfil.IO <http://www.fulfil.io>`_.\nIf you are looking for on-site teaching or consulting support, contact our\n`sales <mailto:sales@fulfil.io>`_ and `support\n<mailto:support@fulfil.io>`_ teams.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.fulfil.io/",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "fio_mail",
    "package_url": "https://pypi.org/project/fio_mail/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/fio_mail/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://www.fulfil.io/"
    },
    "release_url": "https://pypi.org/project/fio_mail/4.0.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Trytond Mail module",
    "version": "4.0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2285646,
  "releases": {
    "3.4.0.1": [],
    "3.4.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9024dcfe79db216ab256810b8fb089cbaf26e09405ddb6f10b267d0c36ac714d",
          "md5": "de0ce069e1d6a770a8b93785c862606e",
          "sha256": "1928bf96ee17e950e0fcf337b2bfec7f652a5b96112e866f3d0692f07f2b5395"
        },
        "downloads": -1,
        "filename": "fio_mail-3.4.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de0ce069e1d6a770a8b93785c862606e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9253,
        "upload_time": "2015-09-26T07:05:31",
        "upload_time_iso_8601": "2015-09-26T07:05:31.339679Z",
        "url": "https://files.pythonhosted.org/packages/90/24/dcfe79db216ab256810b8fb089cbaf26e09405ddb6f10b267d0c36ac714d/fio_mail-3.4.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.6.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce134c3cb9a4f276f69155d0ee90a740f74ea84eace0faffc6ae498098c295e1",
          "md5": "b58d52302c583101f6bd25f3ef9cbb7b",
          "sha256": "ddaec5da98f6e6fca8a4fff6374cab764173fe00c937eba9224c43b695079c8f"
        },
        "downloads": -1,
        "filename": "fio_mail-3.6.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b58d52302c583101f6bd25f3ef9cbb7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8979,
        "upload_time": "2015-09-26T07:41:32",
        "upload_time_iso_8601": "2015-09-26T07:41:32.351843Z",
        "url": "https://files.pythonhosted.org/packages/ce/13/4c3cb9a4f276f69155d0ee90a740f74ea84eace0faffc6ae498098c295e1/fio_mail-3.6.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e714e1d36bf696ad4fbd071da6db0a915e65dd9e27a8b34156a72aaf132ba87",
          "md5": "b3e84f74f5975cbe4960a4a81fb9c50f",
          "sha256": "296634e0ceea5abd671a3c777b70dcd5c5c834094e65937adb5d023269ebf4fb"
        },
        "downloads": -1,
        "filename": "fio_mail-4.0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b3e84f74f5975cbe4960a4a81fb9c50f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8929,
        "upload_time": "2016-08-17T07:16:58",
        "upload_time_iso_8601": "2016-08-17T07:16:58.912528Z",
        "url": "https://files.pythonhosted.org/packages/5e/71/4e1d36bf696ad4fbd071da6db0a915e65dd9e27a8b34156a72aaf132ba87/fio_mail-4.0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e714e1d36bf696ad4fbd071da6db0a915e65dd9e27a8b34156a72aaf132ba87",
        "md5": "b3e84f74f5975cbe4960a4a81fb9c50f",
        "sha256": "296634e0ceea5abd671a3c777b70dcd5c5c834094e65937adb5d023269ebf4fb"
      },
      "downloads": -1,
      "filename": "fio_mail-4.0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b3e84f74f5975cbe4960a4a81fb9c50f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8929,
      "upload_time": "2016-08-17T07:16:58",
      "upload_time_iso_8601": "2016-08-17T07:16:58.912528Z",
      "url": "https://files.pythonhosted.org/packages/5e/71/4e1d36bf696ad4fbd071da6db0a915e65dd9e27a8b34156a72aaf132ba87/fio_mail-4.0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}