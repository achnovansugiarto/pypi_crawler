{
  "info": {
    "author": "MineDojo Team",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<div align=\"center\">\n<img src=\"https://minedojo.org/images/logo.png\" width=\"400px\">\n\n**Building Open-Ended Embodied Agents with Internet-Scale Knowledge**\n\n[[Website]](https://minedojo.org)\n[[Arxiv Paper]](https://arxiv.org/abs/2206.08853)\n[[PDF]](https://arxiv.org/pdf/2206.08853.pdf)\n[[Docs]](https://docs.minedojo.org)\n[[Open Database]](https://minedojo.org/knowledge_base)\n[[Team]](https://minedojo.org/index.html#team)\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/MineDojo)](https://pypi.org/project/MineDojo/)\n[![PyPI](https://img.shields.io/pypi/v/minedojo)](https://pypi.org/project/minedojo/)\n[![PyPI Status](https://pepy.tech/badge/MineDojo)](https://pepy.tech/project/MineDojo)\n[![Docs](https://img.shields.io/badge/Docs-passing-green.svg \"Author\")](http://docs.minedojo.org/index.html \"Docs\")\n[![GitHub license](https://img.shields.io/github/license/MineDojo/MineDojo)](https://github.com/MineDojo/MineDojo/blob/main/LICENSE)\n______________________________________________________________________\n</div>\n\n<img src=\"https://minedojo.org/images/logo.png\" width=\"70px\"> is a new AI research framework for building open-ended, generally capable embodied agents. \nMineDojo features a **massive simulation suite** built on Minecraft with 1000s of diverse tasks, and provides **open access to an internet-scale knowledge base** of 730K YouTube videos, 7K Wiki pages, 340K Reddit posts. \n\nUsing MineDojo, AI agents can freely explore a procedurally generated 3D world with diverse terrains to roam :earth_asia:\t, materials to mine :gem:, tools to craft :wrench:, structures to build :european_castle:, and wonders to discover :sparkles:. Instead of training in isolation, your agent will be able to learn from the collective wisdom of millions of human players around the world! \n\n\n- [Installation](#Installation)\n- [Getting Started](#Getting-Started)\n- [Benchmarking Suite](#Benchmarking-Suite)\n  - [Programmatic Tasks](#Programmatic-Tasks)\n  - [Creative Tasks](#Creative-Tasks)\n  - [Playthrough Task](#Playthrough-task)\n- [Our Paper](#Check-Out-Our-Paper)\n- [License](#License)\n\n# Installation\n\nMineDojo requires Python ≥ 3.9. We have tested on Ubuntu 20.04 and Mac OS X. **Please follow [this guide](https://docs.minedojo.org/sections/getting_started/install.html#prerequisites)** to install the prerequisites first, such as JDK 8 for running Minecraft backend. We highly recommend creating a new [Conda virtual env](https://docs.conda.io/projects/conda/en/latest/user-guide/concepts/environments.html) to isolate dependencies. Installing the MineDojo stable version is as simple as:\n\n```bash\npip install minedojo\n```\n\nTo install the cutting edge version from the main branch of this repo, run:\n\n```bash\ngit clone https://github.com/MineDojo/MineDojo && cd MineDojo\npip install -e .\n```\n\n\nYou can run the script below to verify the installation. It takes a while to compile the Java code for the first time. After that you should see a Minecraft window pop up, with the same gaming interface that human players receive. You should see the message `[INFO] Installation Success` if everything goes well.\n\n```bash\npython minedojo/scripts/validate_install.py\n```\n\nNote that if you are on a headless machine, don't forget to prepend either `xvfb-run` or `MINEDOJO_HEADLESS=1`:\n\n```bash\nxvfb-run python minedojo/scripts/validate_install.py\n# --- OR ---\nMINEDOJO_HEADLESS=1 python minedojo/scripts/validate_install.py\n```\n\n\n# Getting Started\n\nMineDojo provides a [Gym-style](https://www.gymlibrary.ml/) interface for developing embodied agents that interact with the simulator in a loop.  Here is a very simple code snippet of a hardcoded agent that runs forward and jumps every 10 steps in the \"Harvest Wool\" task: \n\n```python\nimport minedojo\n\nenv = minedojo.make(\n    task_id=\"harvest_wool_with_shears_and_sheep\",\n    image_size=(160, 256)\n)\nobs = env.reset()\nfor i in range(50):\n    act = env.action_space.no_op()\n    act[0] = 1    # forward/backward\n    if i % 10 == 0:\n        act[2] = 1    # jump\n    obs, reward, done, info = env.step(act)\nenv.close()\n```\n\nPlease refer to [this tutorial](https://docs.minedojo.org/sections/getting_started/sim.html) for a detailed walkthrough of your first agent. MineDojo features a multimodal observation space (RGB, compass, voxels, etc.) and a compound action space (movement, camera, attack, craft, etc.). See [this doc](http://docs.minedojo.org/sections/getting_started/sim.html#basic-observation-and-action-spaces) to learn more. We recommend you to reference the full [observation](http://docs.minedojo.org/sections/core_api/obs_space.html) and [action space](http://docs.minedojo.org/sections/core_api/action_space.html) specifications.\n\nMineDojo can be extensively customized to be tailored to your research needs. Please check out customization guides on [tasks](https://docs.minedojo.org/sections/customization/task.html), [simulation](https://docs.minedojo.org/sections/customization/sim.html), and [privileged observation](https://docs.minedojo.org/sections/customization/privileged_obs.html).\n\n\n# Benchmarking Suite\n\nMineDojo features a massively multitask benchmark with **3131 tasks** in the current release. \nWe design a unified top-level function `minedojo.make()`, similar to [`gym.make`](https://www.gymlibrary.ml/content/api/), that creates all the tasks and environments in our benchmarking suite. We categorize the tasks into **Programmatic**, **Creative**, and **Playthrough**.\n\n\n| Task Category | Count | Description                                                        |\n|---------------|-------|--------------------------------------------------------------------|\n| **Programmatic**  | 1572  | Can be automatically scored based on ground-truth simulator states |\n| **Creative**      | 1558  | Do not have well-defined or easily-automated success criteria      |\n| **Playthrough**   | 1     | Special achievement: defeat the Ender dragon, \"beat the game\"   |\n\nWe pair all tasks with natural language descriptions of task goals (i.e. \"prompts\"), such as `\"obtain 8 bone in swampland\"` and `\"make a football stadium\"`. Many tasks also have step-by-step guidance generated by GPT-3. Users can access a comprehensive listing of prompts and guidance for all task by:\n```python\n# list of string IDs\nall_ids = minedojo.tasks.ALL_TASK_IDS\n# dict: {task_id: (prompt, guidance)}\nall_instructions = minedojo.tasks.ALL_TASK_INSTRUCTIONS\n```\n\n## Programmatic Tasks\n\n1572 Programmatic tasks can be further divided into four categories: (1) **Survival**: surviving for a designated number of days, (2) **Harvest**: finding, obtaining, cultivating, or manufacturing hundreds of materials and objects, (3) **Tech Tree**: the skills of crafting and using a hierarchy of tools, and (4) **Combat**:  fight various monsters and creatures to test agent's reflex and martial skills. Refer to [this doc](https://docs.minedojo.org/sections/core_api/sim.html#programmatic-tasks) for more information.\n\nThe following code creates a Programmatic task with ID `harvest_milk` with 160x256 resolution:\n```python\nenv = minedojo.make(task_id=\"harvest_milk\", image_size=(160, 256))\n```\n\nYou can access task-related attributes such as `task_prompt` and `task_guidance`:\n```bash\n>>> env.task_prompt\nobtain milk from a cow\n>>> env.task_guidance\n1. Find a cow.\n2. Right-click the cow with an empty bucket.\n```\nHere we show a few examples from each category:\n\n| Task Prompt | Visualization | Task Prompt | Visualization |\n|---|---|---|---|\n| shear a sheep with shears and a sheep nearby | <img src=\"images/task_suite/harvest/harvest_wool_with_shears_and_sheep.png\"/> | obtain milk from a cows in forest with an empty bucket | <img src=\"images/task_suite/harvest/harvest_milk_forest_with_an_empty_bucket.png\"/> |\n| obtain 8 ghast tear | <img src=\"images/task_suite/harvest/harvest_8_ghast_tear.png\"/> | obtain chicken in swampland | <img src=\"images/task_suite/harvest/harvest_1_chicken_swampland.png\"/> |\n| combat a husk in night desert with a diamond sword, shield, and a full suite of iron armors | <img src=\"images/task_suite/combat/combat_husk_desert_iron_armors_diamond_sword_shield.png\"/> | hunt a bat in night plains with a iron sword, shield, and a full suite of diamond armors | <img src=\"images/task_suite/combat/combat_bat_plains_diamond_armors_iron_sword_shield.png\"/> |\n| combat a spider in night forest with a wooden sword, shield, and a full suite of iron armors | <img src=\"images/task_suite/combat/combat_spider_forest_iron_armors_wooden_sword_shield.png\"/> | hunt a pig in extreme hills with a wooden sword, shield, and a full suite of leather armors | <img src=\"images/task_suite/combat/combat_pig_extreme_hills_leather_armors_wooden_sword_shield.png\"/> |\n| starting from wood tools, craft and use a diamond sword | <img src=\"images/task_suite/techtree/techtree_from_wood_to_diamond_sword.png\"/> | starting from stone tools, craft and use a tnt | <img src=\"images/task_suite/techtree/techtree_from_stone_to_explosives.png\"/> |\n| starting from gold tools, craft and use a clock | <img src=\"images/task_suite/techtree/techtree_from_gold_to_redstone_clock.png\"/> | starting from diamond tools, craft and use a dispenser | <img src=\"images/task_suite/techtree/techtree_from_diamond_to_redstone_dispenser.png\"/> |\n| survive as long as possible | <img src=\"images/task_suite/survival/survival.png\"/> | survive as long as possible given a sword and some food | <img src=\"images/task_suite/survival/survival_sword_food.png\"/> |\n\n## Creative Tasks\n\nSimilar to Programmatic tasks, Creative tasks can be instantiated by `minedojo.make()`. The only difference is that `task_id` no longer has any semantic meaning. Instead, the format becomse `creative:{task_index}`. You can query all Creative task IDs from `minedojo.tasks.ALL_CREATIVE_TASK_IDS`.\n\nThe following code instantiates the 256th task from our Creative suite:\n```python\nenv = minedojo.make(task_id=\"creative:255\", image_size=(160, 256))\n```\n\nLet's see what the task prompt and guidance are:\n```bash\n>>> env.task_prompt\nBuild a replica of the Great Pyramid of Giza\n>>> env.task_guidance\n1. Find a desert biome.\n2. Find a spot that is 64 blocks wide and 64 blocks long.\n3. Make a foundation that is 4 blocks high.\n4. Make the first layer of the pyramid using blocks that are 4 blocks wide and 4 blocks long.\n5. Make the second layer of the pyramid using blocks that are 3 blocks wide and 3 blocks long.\n6. Make the third layer of the pyramid using blocks that are 2 blocks wide and 2 blocks long.\n7. Make the fourth layer of the pyramid using blocks that are 1 block wide and 1 block long.\n8. Make the capstone of the pyramid using a block that is 1 block wide and 1 block long.\n```\nPlease refer to [this doc](https://docs.minedojo.org/sections/core_api/sim.html#creative-tasks) for more details on Creative tasks.\n\n## Playthrough Task\n\nPlaythrough task's instruction is to \"Defeat the Ender Dragon and obtain the trophy dragon egg\". This task holds a unique position because killing the dragon means \"beating the game\" in the traditional sense of the phrase, and is considered the most significant achievement for a new player. The mission requires lots of preparation, exploration, agility, and trial-and-error, which makes it a grand challenge for AI:\n\n\n```python\nenv = minedojo.make(task_id=\"playthrough\",image_size=(160, 256))\n```\n\n# Using the Knowledge Base\n\nMinecraft has more than 100M active players, who have collectively generated an enormous wealth of data. **MineDojo features a massive database collected automatically from the internet.** AI agents can learn from this treasure trove of knowledge to harvest actionable insights, acquire diverse skills, develop complex strategies, and discover interesting objectives to pursue. All our databases are **open-access and available to download today**!\n![data_cards](images/data_cards.png)\n\n## YouTube Database \n<p style=\"margin-top: -16px\"><a href=\"https://colab.research.google.com/drive/1zZbRVfpyl7zteb74PRVeEbozj7hbbixi#scrollTo=97llf1-ybOyX\">  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" style=\"width:117px\" alt=\"Open In Colab\"/></a> <a href=\"https://doi.org/10.5281/zenodo.6641142\" style=\"border-bottom: none\" target=\"_blank\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.6641142.svg\" style=\"width:200px\"></a></p>\n\nMinecraft is among the most streamed games on YouTube. Human players have demonstrated a stunning range of creative activities and sophisticated missions that take hours to complete.**We collect 730K+ narrated Minecraft videos, which add up to ~300K hours and 2.2B words in English transcripts.** The time-aligned transcripts enable the agent to ground free-form natural language in video pixels and learn the semantics of diverse activities without laborious human labeling. Please refer to the [doc page](https://docs.minedojo.org/sections/getting_started/data.html#youtube-database) for how to load our YouTube database.\n\n## Wiki Database\n<p style=\"margin-top: -16px\"><a href=\"https://colab.research.google.com/drive/1zZbRVfpyl7zteb74PRVeEbozj7hbbixi#scrollTo=zUIQWbN-dbX9\">  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" style=\"width:117px\" alt=\"Open In Colab\"/></a> <a href=\"https://doi.org/10.5281/zenodo.6640448\" style=\"border-bottom: none\" target=\"_blank\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.6640448.svg\" style=\"width:200px\"></a></p>\n\nThe Wiki pages cover almost every aspect of the game mechanics, and supply a rich source of unstructured knowledge in multimodal tables, recipes, illustrations, and step-by-step tutorials. **We scrape ~7K pages that interleave text, images, tables, and diagrams.** To preserve the layout information, we also save the screenshots of entire pages and extract bounding boxes of the visual elements. Please refer to the [doc page](https://docs.minedojo.org/sections/getting_started/data.html#wiki-database) for how to load our Wiki database.\n\n## Reddit Database\n<p style=\"margin-top: -16px\"><a href=\"https://colab.research.google.com/drive/1zZbRVfpyl7zteb74PRVeEbozj7hbbixi#scrollTo=_zagI0pheWTN\">  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" style=\"width:117px\" alt=\"Open In Colab\"/></a> <a href=\"https://doi.org/10.5281/zenodo.6641114\" style=\"border-bottom: none\" target=\"_blank\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.6641114.svg\" style=\"width:200px\"></a></p>\n\n**We collect 340K+ Reddit posts along with 6.6M comments under the “r/Minecraft” subreddit.** These posts ask questions on how to solve certain tasks, showcase cool architectures and achievements in image/video snippets, and discuss general tips and tricks for players of all expertise levels. Large language models can be finetuned on our Reddit corpus to internalize Minecraft-specific concepts and develop sophisticated strategies. Please refer to the [doc page](https://docs.minedojo.org/sections/getting_started/data.html#reddit-database) for how to load our Reddit database.\n\n\n# Check out our paper! \n\nOur paper is available on [Arxiv](https://arxiv.org/abs/2206.08853). If you find our code or databases useful, please consider citing us! \n\n```bibtex\n@article{fan2022minedojo,\n  title   = {MineDojo: Building Open-Ended Embodied Agents with Internet-Scale Knowledge},\n  author  = {Linxi Fan and Guanzhi Wang and Yunfan Jiang and Ajay Mandlekar and Yuncong Yang and Haoyi Zhu and Andrew Tang and De-An Huang and Yuke Zhu and Anima Anandkumar},\n  year    = {2022},\n  journal = {arXiv preprint arXiv: Arxiv-2206.08853}\n}\n```\n\n# License\n\n| Component        | License                                                                                                                             |\n|------------------|-------------------------------------------------------------------------------------------------------------------------------------|\n| Codebase (this repo)         | [MIT License](LICENSE)                                                                                                                      |\n| YouTube Database | [Creative Commons Attribution 4.0 International (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/legalcode)                 |\n| Wiki Database    | [Creative Commons Attribution Non Commercial Share Alike 3.0 Unported](https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode) |\n| Reddit Database  | [Creative Commons Attribution 4.0 International (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/legalcode)                 |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/MineDojo/MineDojo",
    "keywords": "Deep Learning,Machine Learning",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minedojo",
    "package_url": "https://pypi.org/project/minedojo/",
    "platform": null,
    "project_url": "https://pypi.org/project/minedojo/",
    "project_urls": {
      "Homepage": "http://github.com/MineDojo/MineDojo"
    },
    "release_url": "https://pypi.org/project/minedojo/0.1/",
    "requires_dist": [
      "pyyaml",
      "jinja2",
      "gym (==0.21.0)",
      "lxml",
      "numpy",
      "coloredlogs",
      "xmltodict",
      "Pyro4",
      "psutil",
      "opencv-python",
      "multiprocess",
      "pytest",
      "daemoniker",
      "tqdm",
      "requests",
      "mypy-extensions",
      "jsonlines",
      "praw",
      "wget",
      "importlib-resources",
      "hydra-core",
      "Pillow"
    ],
    "requires_python": ">=3.9",
    "summary": "research project",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14242518,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0974836a9f8e3b9340e4d5717b942485673845a8b232b83c203097733a3fa554",
          "md5": "cc3f088479410c01b60a7fe4db17d6a7",
          "sha256": "aca370d9cbcfc79557a067955bebd4e6112d7be873e7c44818793fa92db17afe"
        },
        "downloads": -1,
        "filename": "minedojo-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc3f088479410c01b60a7fe4db17d6a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 1118971,
        "upload_time": "2022-06-24T16:45:52",
        "upload_time_iso_8601": "2022-06-24T16:45:52.697993Z",
        "url": "https://files.pythonhosted.org/packages/09/74/836a9f8e3b9340e4d5717b942485673845a8b232b83c203097733a3fa554/minedojo-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0846211cd5df537ce222b1179f99c1728f3a708c7c9dab1dea612b1206aeeea7",
          "md5": "a06262cb7e472ef22aacfb12705f4f10",
          "sha256": "b4179fb423d3d4001e78defff1ee5a63fd21aedd4c6929ccb8378ed358c5153b"
        },
        "downloads": -1,
        "filename": "minedojo-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a06262cb7e472ef22aacfb12705f4f10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 833431,
        "upload_time": "2022-06-24T16:45:54",
        "upload_time_iso_8601": "2022-06-24T16:45:54.837317Z",
        "url": "https://files.pythonhosted.org/packages/08/46/211cd5df537ce222b1179f99c1728f3a708c7c9dab1dea612b1206aeeea7/minedojo-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0974836a9f8e3b9340e4d5717b942485673845a8b232b83c203097733a3fa554",
        "md5": "cc3f088479410c01b60a7fe4db17d6a7",
        "sha256": "aca370d9cbcfc79557a067955bebd4e6112d7be873e7c44818793fa92db17afe"
      },
      "downloads": -1,
      "filename": "minedojo-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cc3f088479410c01b60a7fe4db17d6a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 1118971,
      "upload_time": "2022-06-24T16:45:52",
      "upload_time_iso_8601": "2022-06-24T16:45:52.697993Z",
      "url": "https://files.pythonhosted.org/packages/09/74/836a9f8e3b9340e4d5717b942485673845a8b232b83c203097733a3fa554/minedojo-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0846211cd5df537ce222b1179f99c1728f3a708c7c9dab1dea612b1206aeeea7",
        "md5": "a06262cb7e472ef22aacfb12705f4f10",
        "sha256": "b4179fb423d3d4001e78defff1ee5a63fd21aedd4c6929ccb8378ed358c5153b"
      },
      "downloads": -1,
      "filename": "minedojo-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a06262cb7e472ef22aacfb12705f4f10",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 833431,
      "upload_time": "2022-06-24T16:45:54",
      "upload_time_iso_8601": "2022-06-24T16:45:54.837317Z",
      "url": "https://files.pythonhosted.org/packages/08/46/211cd5df537ce222b1179f99c1728f3a708c7c9dab1dea612b1206aeeea7/minedojo-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}