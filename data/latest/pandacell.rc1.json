{
  "info": {
    "author": "Eirik B. Stavestrand",
    "author_email": "eirik.b.stavest@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# pandacell\n\nAuthor: Eirik B. Stavestrand\n\nIntroduces a `%df` (or `%%df`) magic which can be used in Jupyter notebooks and the IPython console.\n\nThe magic executes the contents of a cell on a Pandas DataFrame.\n\n## Description\nPandas is great and all, but writing Pandas code can be tedious. For example when simply making summing two columns:\n\n```python\n    In [1]: df[\"a\"] + df[\"b\"]\n```\n\nIt might not look like such a big deal, but all those brackets and quotation marks add up.\nUsing *pandacell*, the above syntax can be written as:\n\n```python\n    In [2]: %df a + b\n```\n\nUnder the hoods, this is accomplished simply by passing the cell contents as a string to Pandas' [`df.eval`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.eval.html) function.\nThis isn't very complex, but it does provide a fair deal of functionality and adds a whole lot of readability.\n\nIf you wish to store the results to a new column, use regular assignment along with the `-i` (or `--inplace`) flag:\n\n```python\n    In [3]: %df -i c = a + b\n```\nIt also works with multiple assignments:\n\n```python\n    In [4]: %%df -i\n       ...: c = a + b\n       ...: f = c - a\n```\nYou can use Pandas' various accessors and series method calls:\n\n```python\n    In [5]: %%df -i\n       ...: name_upper = name.str.upper()\n       ...: yr = timestamp.dt.year\n       ...: lower_cased = species.where(cond=species.str[0].str.islower(), other=None)\n```\n\nSince variable names are assumed to be columns in the dataframe, regular variables in the local/global namespace can be accessed by prefixing with `@`\n\n```python\n    In [6]: a = 1\n       ...: %df a = @a + 1\n\n    In [7]: def myfunc(row):\n        ...:     return row + 43\n        ...: %df b = a.apply(@myfunc)\n```\n\nBy default, pandacell operates on any dataframe named `df`. This can be overridden with the `-n` (or `--name`) flag:\n\n```python\n    In [8]: %df -n=df_in c = a + b\n```\n\nYou can also print subset a dataframe with the `-q` (or `--query`) flag:\n\n```python\n    In [9]: %df -q species == \"setosa\"\n    Out[9]:\n        sepal_length  sepal_width  petal_length  petal_width species  a\n    0            5.1          3.5           1.4          0.2  setosa  0\n    1            4.9          3.0           1.4          0.2  setosa  0\n\n\n    In [10]: %df -q species.isna() #check for missing values\n    Out[10]:\n    Empty DataFrame\n    Columns: [sepal_length, sepal_width, petal_length, petal_width, species]\n    Index: []\n```\n\nThis can be combined with the `-i` flag to subset the dataframe in-place:\n\n```python\n    In [10]: %df -q -i species == \"setosa\"\n```\n\nPandacell even supports comments\n\n```python\n    In [11]: %%df -i\n       ...: # Line comment\n       ...: c = a + b # Comment at end of line\n```\n\n\n## Inspired by\nhttps://github.com/catherinedevlin/ipython-sql\n\n\n## Development\nhttps://github.com/eirki/pandacell\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eirki/pandacell",
    "keywords": "pandas",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pandacell",
    "package_url": "https://pypi.org/project/pandacell/",
    "platform": "",
    "project_url": "https://pypi.org/project/pandacell/",
    "project_urls": {
      "Homepage": "https://github.com/eirki/pandacell"
    },
    "release_url": "https://pypi.org/project/pandacell/2020.9.19/",
    "requires_dist": [
      "ipython"
    ],
    "requires_python": "",
    "summary": "IPython wrapper to more easily manipulate Pandas dataframes.",
    "version": "2020.9.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8225431,
  "releases": {
    "2020.9.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f7cccdaa697eb16ce149e4d8d46c04df9e7d0b8591fa246d2a6ef60c50285fe",
          "md5": "f7f3f0564fb67f1bfa9057842e8dacab",
          "sha256": "ffe0a9beeb42d7c741125300b69ffe4c1d1bac998914d60d279ec3c51e52b7cf"
        },
        "downloads": -1,
        "filename": "pandacell-2020.9.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7f3f0564fb67f1bfa9057842e8dacab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3305,
        "upload_time": "2020-09-19T20:21:00",
        "upload_time_iso_8601": "2020-09-19T20:21:00.140759Z",
        "url": "https://files.pythonhosted.org/packages/7f/7c/ccdaa697eb16ce149e4d8d46c04df9e7d0b8591fa246d2a6ef60c50285fe/pandacell-2020.9.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b65615de0418333fd99ed341228e3362c22dd7ef922fddad0b5fa4ea472c2868",
          "md5": "8f26fd797be6d916c0f5cfb02a2c3caf",
          "sha256": "6ac93b932fce46e73d0b14d8546d252fa5fb91e00f6f7634b8bbe591ba9b1fe9"
        },
        "downloads": -1,
        "filename": "pandacell-2020.9.19.tar.gz",
        "has_sig": false,
        "md5_digest": "8f26fd797be6d916c0f5cfb02a2c3caf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3544,
        "upload_time": "2020-09-19T20:21:02",
        "upload_time_iso_8601": "2020-09-19T20:21:02.942410Z",
        "url": "https://files.pythonhosted.org/packages/b6/56/15de0418333fd99ed341228e3362c22dd7ef922fddad0b5fa4ea472c2868/pandacell-2020.9.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f7cccdaa697eb16ce149e4d8d46c04df9e7d0b8591fa246d2a6ef60c50285fe",
        "md5": "f7f3f0564fb67f1bfa9057842e8dacab",
        "sha256": "ffe0a9beeb42d7c741125300b69ffe4c1d1bac998914d60d279ec3c51e52b7cf"
      },
      "downloads": -1,
      "filename": "pandacell-2020.9.19-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f7f3f0564fb67f1bfa9057842e8dacab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3305,
      "upload_time": "2020-09-19T20:21:00",
      "upload_time_iso_8601": "2020-09-19T20:21:00.140759Z",
      "url": "https://files.pythonhosted.org/packages/7f/7c/ccdaa697eb16ce149e4d8d46c04df9e7d0b8591fa246d2a6ef60c50285fe/pandacell-2020.9.19-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b65615de0418333fd99ed341228e3362c22dd7ef922fddad0b5fa4ea472c2868",
        "md5": "8f26fd797be6d916c0f5cfb02a2c3caf",
        "sha256": "6ac93b932fce46e73d0b14d8546d252fa5fb91e00f6f7634b8bbe591ba9b1fe9"
      },
      "downloads": -1,
      "filename": "pandacell-2020.9.19.tar.gz",
      "has_sig": false,
      "md5_digest": "8f26fd797be6d916c0f5cfb02a2c3caf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3544,
      "upload_time": "2020-09-19T20:21:02",
      "upload_time_iso_8601": "2020-09-19T20:21:02.942410Z",
      "url": "https://files.pythonhosted.org/packages/b6/56/15de0418333fd99ed341228e3362c22dd7ef922fddad0b5fa4ea472c2868/pandacell-2020.9.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}