{
  "info": {
    "author": "Alexey Zaytsev",
    "author_email": "alexey.zaytsev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Ready, Steady, Go!\n================\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\nItâ€™s fall 2022, and for the first time in years, buying a GPU for Deep\nLearning experiments does not sound too crazy.\n\nNow, how do we pick one?\n\n> Keep in mind, performance depends on many factors, not least your CPU\n> and often SSD.  \n> For experiments, you might be better off with 2 cheaper GPUs - one to\n> run in background, the other used interactively.\n\n# My Results\n\n``` python\nimport wandb\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport numpy as np\n```\n\nI ran the benchmark on a variety of GPUs from\n[vast.ai](https://vast.ai). The results are automatically synced to\n[Weights & Biases](https://wandb.ai).\n\n``` python\nsns.set_theme(style=\"whitegrid\")\nsns.set_color_codes(\"pastel\")\n\napi = wandb.Api()\n\nruns = api.runs(\"xl0/ready-steady-go\")\nsummaries = [ dict(r.summary) | {\"id\": r.id} for r in runs if r.state == \"finished\"]\n\ndf = pd.DataFrame.from_records(summaries)\n\ndf = df[[\"device_name\", \"model\", \"bs\", \"fp16\", \"throughput\"]]\ndf[\"fp16\"] = df[\"fp16\"].apply(lambda x: \"FP16\" if x else \"FP32\")\ndf = df.replace({\"device_name\" : {\n                        \"NVIDIA*\": \"\",\n                        \"GeForce\": \"\",\n                        \"Tesla\": \"\",\n                        \"-\": \" \"}}, regex=True)\ndf.dropna(inplace=True)\n\n# For each model, normalize performance by top throughput.\nfor model in df.model.unique():\n    df.loc[ df.model == model, \"throughput\"] /= df.loc[df.model == model, \"throughput\"].max()\ndf[\"throughput\"] *= 100\n```\n\n``` python\n# For each device+model+fp, get the index of the entry with the highest throughput.\nmax_bs_idx = df.groupby([\"device_name\", \"model\", \"fp16\"])[\"throughput\"].idxmax()\n\nfor model in df.model.unique():   \n    f, ax = plt.subplots(figsize=(15, 6))\n    \n    tops = df.loc[max_bs_idx].query(f\"model == '{model}'\").sort_values(\"throughput\", ascending=False)\n\n    sns.set_color_codes(\"pastel\")\n    sns.barplot(ax=ax, data=tops.query(\"fp16 == 'FP16'\"),\n                x=\"throughput\", y=\"device_name\", label=\"FP16\", color=\"b\", alpha=1)\n\n    sns.set_color_codes(\"muted\")\n    sns.barplot(ax=ax, data=tops.query(\"fp16 == 'FP32'\"),\n                x=\"throughput\", y=\"device_name\", label=\"FP32\", color=\"b\", alpha=0.8,\n                order=tops.query(\"fp16 == 'FP16'\").sort_values(\"throughput\", ascending=False).device_name)\n\n    ax.legend(ncol=2, loc=\"lower right\", frameon=True)\n    ax.set(ylabel=None, xlabel=None, title=model)\n```\n\n![](index_files/figure-gfm/cell-4-output-1.svg)\n\n![](index_files/figure-gfm/cell-4-output-2.svg)\n\n![](index_files/figure-gfm/cell-4-output-3.svg)\n\n``` python\nf, ax = plt.subplots(figsize=(15, 6))\n\ntops = df.loc[max_bs_idx].sort_values(\"throughput\", ascending=False)\n# tops\n\n\nfp16s = df.loc[max_bs_idx].query(\"fp16=='FP16'\")\ngrouped = fp16s.groupby([\"device_name\"], as_index=False)[\"throughput\"]\n\ndisplay_order = grouped.mean().sort_values(\"throughput\", ascending=False)\n\n\nsns.set_color_codes(\"pastel\")\ntt= sns.barplot(ax=ax, data=tops.loc[tops.fp16.eq('FP16')],\n            x=\"throughput\", y=\"device_name\", label=\"FP16\", color=\"b\", errwidth=0,\n            order=display_order.device_name)\n\n# f, ax = plt.subplots(figsize=(15, 6))\n\nsns.set_color_codes(\"muted\")\nsns.barplot(ax=ax, data=tops.loc[tops.fp16.eq('FP32')],\n            x=\"throughput\", y=\"device_name\", label=\"FP32\", color=\"b\", errwidth=0,\n            order=display_order.device_name)\n        \n\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\n_ = ax.set(ylabel=None, xlabel=None, title=\"Average between all models\")\n```\n\n![](index_files/figure-gfm/cell-5-output-1.svg)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xl0/ready-steady-go",
    "keywords": "nbdev jupyter notebook python",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ready-steady-go",
    "package_url": "https://pypi.org/project/ready-steady-go/",
    "platform": null,
    "project_url": "https://pypi.org/project/ready-steady-go/",
    "project_urls": {
      "Homepage": "https://github.com/xl0/ready-steady-go"
    },
    "release_url": "https://pypi.org/project/ready-steady-go/0.0.1/",
    "requires_dist": [
      "torch",
      "wandb",
      "timm",
      "tqdm",
      "fastcore"
    ],
    "requires_python": ">=3.8",
    "summary": "Synthetic Deep Learning GPU benchmark",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15411396,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16561cd92786ae4015ff944557ceb63490128072fffb2562fccd96dd764a4faa",
          "md5": "72aef2822f0138b4bf385a86549c9e09",
          "sha256": "d07a4f5b3631725d9e0314103d3e617aadf76c4a2d193f68b1f7a8ffd0c96281"
        },
        "downloads": -1,
        "filename": "ready_steady_go-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72aef2822f0138b4bf385a86549c9e09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6839,
        "upload_time": "2022-10-14T13:19:50",
        "upload_time_iso_8601": "2022-10-14T13:19:50.319282Z",
        "url": "https://files.pythonhosted.org/packages/16/56/1cd92786ae4015ff944557ceb63490128072fffb2562fccd96dd764a4faa/ready_steady_go-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75148f8416883a046affa0056cf398dec00b87451cbd319ebaf0a305fffdc8d8",
          "md5": "bfe8b3d7db68bad3f3106dc615c289a6",
          "sha256": "16db2f13d1cc6b8ce862a63bd01c3294850a2859a360179c4404ea3081e7598a"
        },
        "downloads": -1,
        "filename": "ready_steady_go-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bfe8b3d7db68bad3f3106dc615c289a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7113,
        "upload_time": "2022-10-14T13:19:53",
        "upload_time_iso_8601": "2022-10-14T13:19:53.323334Z",
        "url": "https://files.pythonhosted.org/packages/75/14/8f8416883a046affa0056cf398dec00b87451cbd319ebaf0a305fffdc8d8/ready_steady_go-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16561cd92786ae4015ff944557ceb63490128072fffb2562fccd96dd764a4faa",
        "md5": "72aef2822f0138b4bf385a86549c9e09",
        "sha256": "d07a4f5b3631725d9e0314103d3e617aadf76c4a2d193f68b1f7a8ffd0c96281"
      },
      "downloads": -1,
      "filename": "ready_steady_go-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "72aef2822f0138b4bf385a86549c9e09",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 6839,
      "upload_time": "2022-10-14T13:19:50",
      "upload_time_iso_8601": "2022-10-14T13:19:50.319282Z",
      "url": "https://files.pythonhosted.org/packages/16/56/1cd92786ae4015ff944557ceb63490128072fffb2562fccd96dd764a4faa/ready_steady_go-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75148f8416883a046affa0056cf398dec00b87451cbd319ebaf0a305fffdc8d8",
        "md5": "bfe8b3d7db68bad3f3106dc615c289a6",
        "sha256": "16db2f13d1cc6b8ce862a63bd01c3294850a2859a360179c4404ea3081e7598a"
      },
      "downloads": -1,
      "filename": "ready_steady_go-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bfe8b3d7db68bad3f3106dc615c289a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7113,
      "upload_time": "2022-10-14T13:19:53",
      "upload_time_iso_8601": "2022-10-14T13:19:53.323334Z",
      "url": "https://files.pythonhosted.org/packages/75/14/8f8416883a046affa0056cf398dec00b87451cbd319ebaf0a305fffdc8d8/ready_steady_go-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}