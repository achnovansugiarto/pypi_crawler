{
  "info": {
    "author": "Grayden Shand",
    "author_email": "graydenshand@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Fluent Discourse\n<p>\n\t<a href=\"https://github.com/graydenshand/fluent_discourse/actions/workflows/build.yml\"><img src=\"https://github.com/graydenshand/fluent_discourse/actions/workflows/build.yml/badge.svg?branch=main\" alt=\"Build and test\"/></a>\n\t<a href=\"https://codecov.io/gh/graydenshand/fluent_discourse\"><img src=\"https://codecov.io/gh/graydenshand/fluent_discourse/branch/main/graph/badge.svg?token=Z9RR4GWFXI\" alt=\"Code Coverage\" /></a>\n</p>\n\nThis package implements a [fluent interface](https://en.wikipedia.org/wiki/Fluent_interface) to the Discourse API. \n\nWhat does that mean?\n\nInstead of mapping every endpoint and method to a unique function, we present a framework for making any request.\n\nThis means, with very little code, **this package is fully compatible with the Discourse API, including undocumented endpoints, endpoints from plugins, and endpoints that have yet to be created.** \n\n## Installation\nThe easiest way to install is via PyPI\n```bash\npip install fluent-discourse\n```\n\n## Usage\n### Setting up a client\nSet up a client by specifying a base_url, username, and api_key for it to use. \n\n```python\nfrom fluent_discourse import Discourse\n\nclient = Discourse(base_url=\"http://localhost:3000\", username=\"test_user\", api_key=\"a0a2d176b3cfbadd36ac2f46ccbd701bf45dfd6f47836e99d570bf7e0ae04af8\", raise_for_rate_limit=True)\n```\n\nOr, you can set three environment variables:\n```language\nexport DISCOURSE_URL=http://localhost:3000\nexport DISCOURSE_USERNAME=test_user\nexport DISCOURSE_API_KEY=a0a2d176b3cfbadd36ac2f46ccbd701bf45dfd6f47836e99d570bf7e0ae04af8\n```\nThen you can use the `from_env()` class method to instantiate the client:\n```python\nfrom fluent_discourse import Discourse\nclient = Discourse.from_env(raise_for_rate_limit=False)\n```\n\nIn either case, the `raise_for_rate_limit` parameter is optional (defaults to True) and controls how the client will respond to RateLimitErrors. If `True`, the client will raise a `RateLimitError`; if `False`, it will wait the suggested time for the RateLimit counter to reset and retry the request.\n\nOnce your client is initialized, you can can begin making requests. Let's first take an example to see how this works.\n\n### Basic Example\nLet's say we want to get the latest posts, [here's the appropriate endpoint](https://docs.discourse.org/#tag/Posts/paths/~1posts.json/get). We need to make a `GET` request to `/posts.json`. Here's how you do it with the client we've set up. \n\n```python\nlatest = client.posts.json.get()\n```\n\nI hope that gives you an idea of how this works. Instead of calling a specific function that is mapped to this endpoint/method combination, we construct the request dynamically using a form of method chaining. Finally, we use the special methods `get()`, `put()`, `post()`, or `delete()` to trigger a request to the specified endpoint. \n\n\n### Passing IDs and Python Reserved Words\nLet's look at another example. This time we want to add users to a group, [here's the endpoint we want to hit](https://docs.discourse.org/#tag/Groups/paths/~1groups~1{id}~1members.json/put). Specifically, we want to add users to the group with `id=5`, so we need to send a `PUT` request to `/groups/5/members.json`.\n\nHere's how to do that with this package:\n```python\ndata = {\n\t\"usernames\": \"username1,username2\"\n}\nclient.groups[5].members.json.put(data)\n```\nNotice that we use a slightly different syntax (\"indexed at\" brackets) to pass in numbers. This is because of the naming constraints of python attributes. We also run into problems with reserved words like `for` and `is`. \n\nIf you ever need to construct a URL that contains numbers or reserved words, there are two methods. \n\n```python\n# These throw Syntax errors\n## Numbers are not allowed\nclient.groups.5.members.json.put(data)\n## \"is\" and \"for\" are reserved words\nclient.is.this.for.me.get()\n\n# Valid approaches\n## Using brackets\nclient.groups[5].members.json.put(data)\n## Using the _() method\nclient._(\"is\").this._(\"for\").me.get()\n```\n\nAs you can see, you can either use brackets `[]` or the underscore method `_()` to handle integers or reserved words.\n\n### Passing data\nThe `get()`, `put()`, `post()`, and `delete()` methods each take a single optional argument, `data`, which is a dictionary of data to pass along with the request.\n\nFor the `put()`, `post()`, and `delete()` methods the data is sent in the body of the request (as JSON).\n\nFor the `get()` method the data is added to the url as query parameters. \n\n### Exceptions\nThere are a few custom exceptions defined in this class. \n\n`DiscourseError`\n* A catch all, and parent class for errors resulting from this package. Raised when Discourse responds with an error that doesn't fall into the other, more specific, categories (e.g. a 500 error). \n\n`UnauthorizedError`\n* Raised when Discourse responds with a 403 error, and indicates that invalid credentials were used to set up the client. \n\n`RateLimitError`\n* Triggered when Discourse responds with a 429 response and the client is configured with `raise_for_rate_limit=True`.\n\n`PageNotFoundError`\n* Raised when Discourse responds with a 404, indicating either that the page does not exist or the current user does not have access to that page. \n\nYou can import any of these errors directly from the package. \n```python\nfrom fluent_discourse import DiscourseError\n```\n\n## Contributing\nThanks for your interest in contributing to this project! For bug tracking and other issues please use the issue tracker on GitHub. \n\n### Testing\nThis package strives for 100% test coverage. Tests are run through tox. They are split into unit and integration tests. Unit tests are self contained, integration tests send requests to a server. \n\nAlthough all integration tests have been tested against a live Discourse server, we set up a mock-server for CI testing. \n\nThree environment variables are required to set up the test client:\n* `DISCOURSE_URL`: The base url of the discourse (e.g. `http://localhost:4200`)\n* `DISCOURSE_USERNAME`: The username of the user to interact as, importantly the tests require that this user has admin privileges. \n* `DISCOURSE_API_KEY`: An API key configured to work with the specified user. This key should have global scopes.\n\nTo run **all** tests (against a live discourse):\n```bash\ntox\n```\n\nTo run just **unit** tests:\n```bash\ntox -- -m \"not integration\"\n```\n\nTo run just **integration** tests (against a live discourse):\n```bash\ntox -- -m \"integration\"\n```\n\nTo set up the mock server and run the tests against that, set your `DISCOURSE_URL` env variable to `http://127.0.0.1:5000` and run:\n```bash\n./run_tests_w_mock_server.sh\n```\n\n100% test coverage is important. If you make changes, please ensure those changes are reflected in the tests as well. Particularly for integration tests, run them both against a live discourse server and the mock server. Please extend and adjust the mock server as necessary to reproduce the test results on a live server accurately. \n\n### Style Linting\nPlease use [black](https://github.com/psf/black) to reformat any code changes before committing those changes. \n\nJust run:\n```bash\nblack .\n```\n\n## Acknowledgements\nI stole the idea for a fluent API interface (and some code as a starting point) from SendGrid's Python API. [Here's a resouce that explains their approach](https://sendgrid.com/blog/using-python-to-implement-a-fluent-interface-to-any-rest-api/).\n\nThere's a [Universal Client](https://universal-client.readthedocs.io/en/latest/) library that implements this framework as a flexible interface to ANY api. In contrast, this package is tailored specifically to Discourse's API including better error handling. \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/graydenshand/fluent_discourse",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fluent-discourse",
    "package_url": "https://pypi.org/project/fluent-discourse/",
    "platform": "",
    "project_url": "https://pypi.org/project/fluent-discourse/",
    "project_urls": {
      "Bug Tracker": "https://github.com/graydenshand/fluent_discourse/issues",
      "Homepage": "https://github.com/graydenshand/fluent_discourse"
    },
    "release_url": "https://pypi.org/project/fluent-discourse/1.0.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "A fluent interface to the Discourse API",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10500507,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f17ba600fa6f477bd41698851dd1bbd11d684db2af80220845c255b0020058e9",
          "md5": "a6825dc770c5be415251a253cb4b3119",
          "sha256": "086ba27d787e9af5289c8ee2113cd5b4821852ba297b5893f5abaa81b9ec845c"
        },
        "downloads": -1,
        "filename": "fluent_discourse-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6825dc770c5be415251a253cb4b3119",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7346,
        "upload_time": "2021-05-28T15:27:53",
        "upload_time_iso_8601": "2021-05-28T15:27:53.786755Z",
        "url": "https://files.pythonhosted.org/packages/f1/7b/a600fa6f477bd41698851dd1bbd11d684db2af80220845c255b0020058e9/fluent_discourse-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c399e4da1d85abbe862c03b6bdc15a23f2e99fbbcc8f927597f5a747351cdd13",
          "md5": "c6bdc5ca0b451641ab87e07f90aba861",
          "sha256": "efc26260d9230b807a9dec008c33bc89e807c08995d3c31c7ff70207817c5fa9"
        },
        "downloads": -1,
        "filename": "fluent-discourse-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c6bdc5ca0b451641ab87e07f90aba861",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7060,
        "upload_time": "2021-05-28T15:27:55",
        "upload_time_iso_8601": "2021-05-28T15:27:55.332684Z",
        "url": "https://files.pythonhosted.org/packages/c3/99/e4da1d85abbe862c03b6bdc15a23f2e99fbbcc8f927597f5a747351cdd13/fluent-discourse-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f17ba600fa6f477bd41698851dd1bbd11d684db2af80220845c255b0020058e9",
        "md5": "a6825dc770c5be415251a253cb4b3119",
        "sha256": "086ba27d787e9af5289c8ee2113cd5b4821852ba297b5893f5abaa81b9ec845c"
      },
      "downloads": -1,
      "filename": "fluent_discourse-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6825dc770c5be415251a253cb4b3119",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7346,
      "upload_time": "2021-05-28T15:27:53",
      "upload_time_iso_8601": "2021-05-28T15:27:53.786755Z",
      "url": "https://files.pythonhosted.org/packages/f1/7b/a600fa6f477bd41698851dd1bbd11d684db2af80220845c255b0020058e9/fluent_discourse-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c399e4da1d85abbe862c03b6bdc15a23f2e99fbbcc8f927597f5a747351cdd13",
        "md5": "c6bdc5ca0b451641ab87e07f90aba861",
        "sha256": "efc26260d9230b807a9dec008c33bc89e807c08995d3c31c7ff70207817c5fa9"
      },
      "downloads": -1,
      "filename": "fluent-discourse-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c6bdc5ca0b451641ab87e07f90aba861",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7060,
      "upload_time": "2021-05-28T15:27:55",
      "upload_time_iso_8601": "2021-05-28T15:27:55.332684Z",
      "url": "https://files.pythonhosted.org/packages/c3/99/e4da1d85abbe862c03b6bdc15a23f2e99fbbcc8f927597f5a747351cdd13/fluent-discourse-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}