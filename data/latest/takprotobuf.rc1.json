{
  "info": {
    "author": "Delta Bravo-15",
    "author_email": "deltabravo15ga@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# takprotobuf\n\nPython library to encode and decode Cursor-on-Target (CoT) messages using Protocol Buffers.\n\n## Usage\n\nThe library currently contains two basic functions.   `parseProto()` decodes a protobuf and returns the contents of the message.  `xmlToProto()` encodes XML to TAK protobuf.  I'll be adding an additional functionton to encode a protobuf directly from a Python oject or class.\n\n### xmlToProto()\n\nGiven a string which contains either a CoT message in XML or the path to an XML file containing a CoT message, the function `xmlToProto()` will return a byte array containing the binary protobuf.\n\nFor example, if the string `xml` contained:\n```\n<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n<event version='2.0' uid='aa0b0312-b5cd-4c2c-bbbc-9c4c70216261' type='a-f-G-E-V-C' time='2020-02-08T18:10:44.000Z' start='2020-02-08T18:10:44.000Z' stale='2020-02-08T18:11:11.000Z' how='h-e'><point lat='43.97957317' lon='-66.07737696' hae='26.767999' ce='9999999.0' le='9999999.0' /><detail><uid Droid='Eliopoli HQ'/><contact callsign='Eliopoli HQ' endpoint='192.168.1.10:4242:tcp'/><__group name='Yellow' role='HQ'/><status battery='100'/><takv platform='WinTAK-CIV' device='LENOVO 20QV0007US' os='Microsoft Windows 10 Home' version='1.10.0.137'/><track speed='0.00000000' course='0.00000000'/></detail></event>\n```\nYou would call the xmlToProto() function with:\n```\nfrom takprotobuf import xmlToProto\nxmlToProto(xml)\n```\nThe function would return:\n```\nbytearray(b'\\xbf\\x01\\xbf\\x12\\xff\\x01\\n\\x0ba-f-G-E-V-C*$aa0b0312-b5cd-4c2c-bbbc-9c4c702162610\\xa0\\xa2\\xc7\\xb8\\x82.8\\xa0\\xa2\\xc7\\xb8\\x82.@\\x98\\xf5\\xc8\\xb8\\x82.J\\x03h-eQ3\\x98T\\xa7b\\xfdE@Y}*~\\xbe\\xf3\\x84P\\xc0aW\\\\\\x1c\\x95\\x9b\\xc4:@i\\x00\\x00\\x00\\xe0\\xcf\\x12cAq\\x00\\x00\\x00\\xe0\\xcf\\x12cAz\\x82\\x01\\x12$\\n\\x15192.168.1.10:4242:tcp\\x12\\x0bEliopoli HQ\\x1a\\x0c\\n\\x06Yellow\\x12\\x02HQ*\\x02\\x08d2F\\n\\x11LENOVO 20QV0007US\\x12\\nWinTAK-CIV\\x1a\\x19Microsoft Windows 10 Home\"\\n1.10.0.137:\\x00')\n```\n\n### parseProto()\n\nGiven a bytearray containing a TAK protobuf, `parseProto()` will return an instance of the protobuf class.  You can then access the contents as an object.\n\nIf `binary` is a bytearray containing a TAK protobuf:\n```\nbytearray(b'\\xbf\\x01\\xbf\\x12\\xff\\x01\\n\\x0ba-f-G-E-V-C*$aa0b0312-b5cd-4c2c-bbbc-9c4c702162610\\xa0\\xa2\\xc7\\xb8\\x82.8\\xa0\\xa2\\xc7\\xb8\\x82.@\\x98\\xf5\\xc8\\xb8\\x82.J\\x03h-eQ3\\x98T\\xa7b\\xfdE@Y}*~\\xbe\\xf3\\x84P\\xc0aW\\\\\\x1c\\x95\\x9b\\xc4:@i\\x00\\x00\\x00\\xe0\\xcf\\x12cAq\\x00\\x00\\x00\\xe0\\xcf\\x12cAz\\x82\\x01\\x12$\\n\\x15192.168.1.10:4242:tcp\\x12\\x0bEliopoli HQ\\x1a\\x0c\\n\\x06Yellow\\x12\\x02HQ*\\x02\\x08d2F\\n\\x11LENOVO 20QV0007US\\x12\\nWinTAK-CIV\\x1a\\x19Microsoft Windows 10 Home\"\\n1.10.0.137:\\x00')\n```\nYou would call the parseProto() function with\n```\nfrom takprotobuf import parseProto\ndecoded = parseProto(binary)\n```\nThe function reurns an object which contains the data from the protobuf. Individual attributes can be accessed by calling them directly, and a built-in method will return pretty-printed data if you call higher level elements.\n\nFor example:\n```\nfrom takprotobuf import parseProto\ndecoded = parseProto(binary)\nprint(decoded)\n```\nreturns a human-readable representation of the object.  By default, the attributes are laid out in the same hierarchy as TAK protocol, which is different from CoT XML.  I'll be adding the option to return an object that is more similar to the way CoT XML is organized.\n```\ncotEvent {\n  type: \"a-f-G-E-V-C\"\n  uid: \"aa0b0312-b5cd-4c2c-bbbc-9c4c70216261\"\n  sendTime: 1581203444000\n  startTime: 1581203444000\n  staleTime: 1581203471000\n  how: \"h-e\"\n  lat: 43.97957317\n  lon: -66.07737696\n  hae: 26.767999\n  ce: 9999999.0\n  le: 9999999.0\n  detail {\n    contact {\n      endpoint: \"192.168.1.10:4242:tcp\"\n      callsign: \"Eliopoli HQ\"\n    }\n    group {\n      name: \"Yellow\"\n      role: \"HQ\"\n    }\n    status {\n      battery: 100\n    }\n    takv {\n      device: \"LENOVO 20QV0007US\"\n      platform: \"WinTAK-CIV\"\n      os: \"Microsoft Windows 10 Home\"\n      version: \"1.10.0.137\"\n    }\n    track {\n    }\n  }\n}\n```\n\n### TAK Protobuf Header Bytes\n\nWhen TAK clients send UDP packets containing protobufs, there is a three byte header consisting of `0xbf 0x01 0xbf`.  The `xmlToProto()` function adds the header bytes for you, and the `parseProto()` functions expects them to be included in its input.  This may change in the future, as I learn more about the TAK ecosystem.\n\n## To Do\n\n- Clean up processing for the `xmlDetail` element\n- Encode protobuf directly from Python object or class\n- Exception handling\n\n## Credits\n\nI couldn't have created this without all of the examples of CoT XML provided by the developers of FreeTAKServer at https://github.com/FreeTAKTeam/FreeTakServer/tree/master/docs/Example%20metrics/cot\n\nBuilt using Protoc, the protobuf compiler https://github.com/protocolbuffers/protobuf\n\nand the .proto files from the ATAK repository https://github.com/deptofdefense/AndroidTacticalAssaultKit-CIV/tree/master/commoncommo/core/impl/protobuf\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DeltaBravo15/takprotobuf",
    "keywords": "TAK,ATAK,WinTAK,Python,Opensource",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "takprotobuf",
    "package_url": "https://pypi.org/project/takprotobuf/",
    "platform": "",
    "project_url": "https://pypi.org/project/takprotobuf/",
    "project_urls": {
      "Homepage": "https://github.com/DeltaBravo15/takprotobuf"
    },
    "release_url": "https://pypi.org/project/takprotobuf/0.0.1/",
    "requires_dist": [
      "untangle",
      "lxml"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python library to encode and decode Cursor-on-Target (CoT) messages using Protocol Buffers.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8906083,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a46dd0bfea649d560aa42a7dd1141e725b83e112e34241c937cb59bb11ac541",
          "md5": "d418b5f7b12d157e8f5826ead7178684",
          "sha256": "c15587789456ef7e50313faed8091afc2f81d7a3f16d80daf1c59207f698c3d0"
        },
        "downloads": -1,
        "filename": "takprotobuf-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d418b5f7b12d157e8f5826ead7178684",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17569,
        "upload_time": "2020-12-15T17:25:52",
        "upload_time_iso_8601": "2020-12-15T17:25:52.344077Z",
        "url": "https://files.pythonhosted.org/packages/1a/46/dd0bfea649d560aa42a7dd1141e725b83e112e34241c937cb59bb11ac541/takprotobuf-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "507a473890fb218fe1763757cc584bd6c59812021d78fc449adad2cafb362d14",
          "md5": "f2395f8ac78c5c580b766fdec2cc7c2a",
          "sha256": "48187d8277cbc4a3a6d7bb4d43100961819a51ed6c5d7a071a1bbb5012aec44a"
        },
        "downloads": -1,
        "filename": "takprotobuf-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f2395f8ac78c5c580b766fdec2cc7c2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11174,
        "upload_time": "2020-12-15T17:25:53",
        "upload_time_iso_8601": "2020-12-15T17:25:53.469209Z",
        "url": "https://files.pythonhosted.org/packages/50/7a/473890fb218fe1763757cc584bd6c59812021d78fc449adad2cafb362d14/takprotobuf-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a46dd0bfea649d560aa42a7dd1141e725b83e112e34241c937cb59bb11ac541",
        "md5": "d418b5f7b12d157e8f5826ead7178684",
        "sha256": "c15587789456ef7e50313faed8091afc2f81d7a3f16d80daf1c59207f698c3d0"
      },
      "downloads": -1,
      "filename": "takprotobuf-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d418b5f7b12d157e8f5826ead7178684",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17569,
      "upload_time": "2020-12-15T17:25:52",
      "upload_time_iso_8601": "2020-12-15T17:25:52.344077Z",
      "url": "https://files.pythonhosted.org/packages/1a/46/dd0bfea649d560aa42a7dd1141e725b83e112e34241c937cb59bb11ac541/takprotobuf-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "507a473890fb218fe1763757cc584bd6c59812021d78fc449adad2cafb362d14",
        "md5": "f2395f8ac78c5c580b766fdec2cc7c2a",
        "sha256": "48187d8277cbc4a3a6d7bb4d43100961819a51ed6c5d7a071a1bbb5012aec44a"
      },
      "downloads": -1,
      "filename": "takprotobuf-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f2395f8ac78c5c580b766fdec2cc7c2a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11174,
      "upload_time": "2020-12-15T17:25:53",
      "upload_time_iso_8601": "2020-12-15T17:25:53.469209Z",
      "url": "https://files.pythonhosted.org/packages/50/7a/473890fb218fe1763757cc584bd6c59812021d78fc449adad2cafb362d14/takprotobuf-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}