{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# SLAPStack \nSLAPStack is a block-stacking warehouse simulation for the Autonomous Block Stacking Warehouse Problem (ABSWP) [[1]](#pfrommer2020) implementing the [OpenAI](https://gym.openai.com/) gym interface. The code can be used to test out Storage Location Allocation Problem (SLAP) and Unit Load Selection Problem (ULSP) algorithms individually or in conjunction. The simulation project includes the WEPAStacks data which includes the layout and 3 months of order information of a large-scale real-world clock stacking warehouse from [WEPA Hygieneprodukte GmbH](https://www.wepa.eu/de/)\n\n## SLAPStack Simulation\n### Architecture\n\nThe project architecture follows the one introduced in [[2]](#rinciog2020), as can be seen in the partial class diagram below. The simulation entry point, which implements the gym interface is located in the `SlapEnv` class located in the `interface.py` module. `SlapEnv`, whose primary function is action- and state-space configuration and transformation, is a wrapper around the `SlapCore` which contains the simulation logic. \n\n`SlapCore` is responsible for advancing the simulation when calling `step`. It uses an `EventManager` object to maintain the `Event` queues. The central SLAPStack communication structure is given by the `State` object contained by the `SlapCore`.  \n\nThe `State` contains several manager objects dedicated to distinct tasks. The `RouteManager`, for instance, is used to compute routes on the storage matrix `S` grid during `Transport` event initialization. The 3D state matrices `S`  (pallet SKUs information), `V` (vehicle positions), `B` (pallet batch information), and `T` (pallet arrival information) are shared between `State` and manager objects as needed (e.g. `V` is shared between `AmrManager` and `State`). \n\nThe `interface_templates.py` module defines and documents the simulation parameter as well as the `SlapEnv` configuration objects, i.e. `Strategy` for allowing indirect actions and `OutputConverter` for transforming both the state representation and the reward returned by `SlapEnv.step()`.\n\n<p align=\"center\">\n\t<img src=\"readme/SLAPStack - UML Class.png\" alt=\"class_diagram\" width=\"1000\"/>\n</p>\n\n\n### Events\nAt the core of the simulation lies the `future_events` queue. `future_events` is a time-sorted heap of self-handling events. During a simulation step, events are popped from this heap and their handle function is called leading to a state update. If a triggered event requires an external ULSP or SLAP decision, the execution halts, and the state is returned.\nEvents are either orders or transport events. Orders (`Delivery` or `Retrieval`) get added to the queue during initialization. Transport events (`Delivery/RetrievalFirst/SecondLeg`) are created on-demand. Of the 6 events present in the simulation, 2 are blocking, namely `Retrieval` and `DeliverySecondLeg`. The relationship between them is depicted event chain summary below.\n\n<p align=\"center\">\n\t<img src=\"readme/event_overview.png\" alt=\"event_chains\" width=\"1000\"/>\n</p>\n\n\n### Routing and Runtime\n\nThe design lain down in [[2]](#rinciog2020) and implemented by SLAPStack leads to an efficient runtime in terms of event management and state updates. All state updates are run in constant or amortized constant time. Since, `future_events` is a binary heap, pushing `Order` events to it during initialization and  `Transport` events to it during `step` takes logarithmic time with respect to the total number of orders. This yields an asymptotic runtime of O(n log(n)), where n is the number of orders.\n\nHowever, a particularity of SLAPStack is the fine-grained routing mechanism implemented. Whenever a `Transport` event is created, the exact closest grid cell route between the AMRs current position and its destination is computed. Dijkstra takes O(m log(m + l)) where m is the number of nodes and l is the number of edges in the routing graph. In our case, that would amount to O(m log m) with m being the number of grid cells in the BSWP (each grid cell is a routing graph node and each cell has four bidirectional edges, i.e. O(m log(m + l) = O(m log(m + 4m)) = O(m log(m)). To deal with this routing bottleneck, SLAPStack's `RouteManager` uses a Cython implementation of Dijkstra, route caching, and uses only an aisle grid tiles for routing (the light blue tiles in the figure below).\n\nSimulating a total of 400000 orders on CPU take around 2 hours.\n\n<p align=\"center\">\n\t<img src=\"readme/routing_scheme.png\" alt=\"routing\" width=\"350\"/>\n</p>\n\n\n\n## Use Case Data: WEPAStacks \n\nThis dataset is based on a real-world block stacking warehouse from WEPA.\n\nWEPA is one of the largest hygienic paper manufacturers in Europe with production plants and warehouses in currently six European countries (www.wepa.eu).\n\nThe dataset consists of three components:\n\n1. the warehouse layout\n2. the initial fill level\n3. the order stream\n\n### Warehouse Layout\n\nThe grid-based warehouse layout shown in the figure below is used to store finished goods on standardized EUR-pallets that can be stacked up to 3 levels. The capacity of the warehouse is up to 19512 storage locations (6504 on the ground with stacking). The light-gray area shows the bidirectional pathways (aisles). Dependent on the type of vehicle they are double/three-lanes wide. The storage bays/lanes are the white areas with separating lines. The dark-gray surrounding wall and truck loading zone define the boundaries of the storage system. Interfaces to the outside world are 4 Inputs (I-points) that represent the production lines and 10 Outputs (O-points) for shipping. At I-points the delivered pallets are picked up and transported to a storage location. Upon the arrival of a retrieval order, pallets are provided at the O-points. O-points are the staging areas in front of the dock doors. The truck loading process is not part of the use-case since it is executed by the truck drivers.\n\nThe warehouse layout is provided as csv-file with numbers from -5 to 0. A -5 represents a travel path, -4 an O-point, -3 an I-point, -2 an aisle, -1 the warehouse boundaries and 0 the available storage locations.\n\n<p align=\"center\">\n\t<img src=\"readme/setup_a_layout_v3.png\" alt=\"layout\" width=\"700\"/>\n</p>\n\n### Initial fill level\n\nThe initial fill level is a dictionary of Stock Keeping Unit (SKUs) with the respective amount currently on stock at time zero. \n\n<p align=\"center\">\n\t<img src=\"readme/initial_fill_lvl_1.png\" alt=\"ini_fill\" width=\"350\"/>\n</p>\n\n### Order stream\n\nThe order stream represents the daily in- and outbound flow with the exact arrival times of each delivery or retrieval order for a time period of 89 days (amounting to 4e5 orderes). Each order corresponds to a single pallet. While the inbound flow is based on a production frequency of 60 to 120 seconds, the outbound flow is mainly in full truck loads (FTL) with 33 pallets.\n\nThe orders are provided as a nested list. Each order comes with six parameters namely the type (delivery or retrieval), the SKU (number from 1 to 136), the order arrival time (absolute time in seconds counting from zero), the dock door (number from 1 to 4 from top to bottom for delivery and 1 to 10 from left to right for retrieval), the batch number (number of production batches from 1 to 1498 for delivery and of truckload batches from 1 to 7496 for retrieval) and the week number (from 1 to 14).\n\n<p align=\"center\">\n\t<img src=\"readme/order_stream_v1.png\" alt=\"orders\" width=\"500\"/>\n</p>\n\n\n## Getting Started\n### Installation\nWe publish this project alongside our experiment script and a control package containing various SLAP heuristics as well as a ULSP heuristic. To set up your environment and recreate our experiment results, the following steps can be taken:\n1. Cloning the repository:\n\t```\n\tgit clone https://github.com/malerinc/slapstack.git\n\t```\n2. To install the SLAPStack simulation and its controls run the following commands from the project root directory (this will build the Cython extensions and copy the use case data at the appropriate locations):\n\t```\n\tpip install 1_environment/slapstack\n\tpip install 2_control/slapstack-controls\n\t```\n3. To run the experiment script, simply execute the `storage_strategy_comparison.py` script located in the experiments directory directly under the root:\n\t```\n   python storage_strategy_comparison.py\n   ```\n\n## Citing the Project\nIf you use `SLAPStack` or `WEPAStacks` in your research, you can cite this repository as follows:\n\n```\n@misc{rinciog2022slapstack\n    author = {Rinciog, Alexandru and Pfrommer, Jakob and Morrissey Michael and Sohaib Zahid and Meyer Anne},\n    title = {FabricatioRL},\n    year = {2021},\n    publisher = {GitHub},\n    journal = {GitHub Repository},\n    howpublished = {\\url{https://github.com/malerinc/slapstack.git}},\n}\n```\n\n## References\n<a id=\"pfrommer2020\">[1]</a> Pfrommer, J., Meyer, A.: Autonomously organized block stacking warehouses: A\nreview of decision problems and major challenges. Logistics Journal: Proceedings\n2020(12) (2020)\n\n<a id=\"rinciog2020\">[2]</a> Rinciog, A., Meyer, A.: Fabricatio-rl: a reinforcement learning simulation frame-\nwork for production scheduling. In: 2021 Winter Simulation Conference (WSC).\npp. 1â€“12. IEEE (2021)\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "slapstack",
    "package_url": "https://pypi.org/project/slapstack/",
    "platform": null,
    "project_url": "https://pypi.org/project/slapstack/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/slapstack/0.0.24/",
    "requires_dist": [
      "gym",
      "numpy",
      "joblib",
      "cython"
    ],
    "requires_python": ">3.6.8",
    "summary": "An Event Discrete Simulation Framework for Block-Stacking Warehouses.",
    "version": "0.0.24",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14033838,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4418334773a45caf15d9682c9ee3ecb2809c97a0e2682af7c53e20dded93dc2c",
          "md5": "888e36d454549e9d980549b1cb14f2f3",
          "sha256": "d627332c48e3f1ed99bbde9d57e80bf14e8129e175b2a7a3b99bfa7d18233095"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "888e36d454549e9d980549b1cb14f2f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1374257,
        "upload_time": "2022-05-26T17:03:11",
        "upload_time_iso_8601": "2022-05-26T17:03:11.712449Z",
        "url": "https://files.pythonhosted.org/packages/44/18/334773a45caf15d9682c9ee3ecb2809c97a0e2682af7c53e20dded93dc2c/slapstack-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0b2b33029b5a54ed7c4e03e712050ce557e0476fa9aedb90874e3fe396494fa",
          "md5": "ffab86c3a2c7a704aa97c344d12251f4",
          "sha256": "67de97828d07e45810b59b5fef86d7e83b78d5373a71ff6eb6be492631f25402"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ffab86c3a2c7a704aa97c344d12251f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1223250,
        "upload_time": "2022-05-26T17:03:14",
        "upload_time_iso_8601": "2022-05-26T17:03:14.591072Z",
        "url": "https://files.pythonhosted.org/packages/c0/b2/b33029b5a54ed7c4e03e712050ce557e0476fa9aedb90874e3fe396494fa/slapstack-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7a75a6ee4e6da7cfc5483ece856ba4a55daae4b257829ec7f7e8983c6130fa2",
          "md5": "be74c03f2a106ba9ac6183cdfb800c78",
          "sha256": "d31cd973d75ae486d627bd28716cc6b4c6cacaf0a2e0dac17b62e6ef11986e0f"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.21-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "be74c03f2a106ba9ac6183cdfb800c78",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": ">3.6.9",
        "size": 1420681,
        "upload_time": "2022-06-04T21:05:16",
        "upload_time_iso_8601": "2022-06-04T21:05:16.029814Z",
        "url": "https://files.pythonhosted.org/packages/d7/a7/5a6ee4e6da7cfc5483ece856ba4a55daae4b257829ec7f7e8983c6130fa2/slapstack-0.0.21-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "178908755c4489d4c5f83581234469f3c9fb8248fdc3d2880d81463626fe8d31",
          "md5": "7cf7018392c51034d1e11136d6a8c34a",
          "sha256": "4a912463234b574d7e7e2ea66bc7abc7dfe3fb7437508f5d3d338333d6c3d9dd"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cf7018392c51034d1e11136d6a8c34a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.6.9",
        "size": 1374610,
        "upload_time": "2022-06-04T20:00:03",
        "upload_time_iso_8601": "2022-06-04T20:00:03.968609Z",
        "url": "https://files.pythonhosted.org/packages/17/89/08755c4489d4c5f83581234469f3c9fb8248fdc3d2880d81463626fe8d31/slapstack-0.0.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed68566735b8aa683d33725316510a59c45e8ce66d2f29a269d3fb4d6a166a95",
          "md5": "84ba9c0a8b9cb4bdb23fa705b986c6d1",
          "sha256": "cc026c5f2045f181e94c7f2a2423a12396796d7f8f219f812b06fc06a7a08d1b"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "84ba9c0a8b9cb4bdb23fa705b986c6d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.9",
        "size": 1225994,
        "upload_time": "2022-06-04T20:00:13",
        "upload_time_iso_8601": "2022-06-04T20:00:13.062289Z",
        "url": "https://files.pythonhosted.org/packages/ed/68/566735b8aa683d33725316510a59c45e8ce66d2f29a269d3fb4d6a166a95/slapstack-0.0.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75fb5941890779b3cb8cfaa18392b7159ebe39a272f77409e6d358537ab88978",
          "md5": "70d65ad925053a206349a2777935a55c",
          "sha256": "044bc25aa9b8b26c40b3ff5073b6e696ecd514c38cb0aa207f18a5609f297dd0"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.22-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "70d65ad925053a206349a2777935a55c",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": ">3.6.9",
        "size": 1437670,
        "upload_time": "2022-06-04T21:06:28",
        "upload_time_iso_8601": "2022-06-04T21:06:28.826597Z",
        "url": "https://files.pythonhosted.org/packages/75/fb/5941890779b3cb8cfaa18392b7159ebe39a272f77409e6d358537ab88978/slapstack-0.0.22-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ceb77fb22d6d226994ac46c89c71b7a529fdc5dab1d5585ee3b8f1f18725bb10",
          "md5": "0fcd2bfe5b453890c25bf7acebe93e7f",
          "sha256": "9f340812b2135c6c5f006bda044f9fd36928ee2c9beef876d6f48bae2a1ed055"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.22.tar.gz",
        "has_sig": false,
        "md5_digest": "0fcd2bfe5b453890c25bf7acebe93e7f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.9",
        "size": 1229458,
        "upload_time": "2022-06-04T21:06:44",
        "upload_time_iso_8601": "2022-06-04T21:06:44.988049Z",
        "url": "https://files.pythonhosted.org/packages/ce/b7/7fb22d6d226994ac46c89c71b7a529fdc5dab1d5585ee3b8f1f18725bb10/slapstack-0.0.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f67b4bc6bfa0e7424cf13d23a3528f8ca1c27020f8e24da534c931577b1b4a11",
          "md5": "fbb341216590734f0be96f4ca8aba154",
          "sha256": "da4a43a9f6af3c644835905a707c1e84ac2ecb607ea69d1668e87efc9b0bec9e"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.23-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "fbb341216590734f0be96f4ca8aba154",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": ">3.6.8",
        "size": 1437674,
        "upload_time": "2022-06-04T21:33:50",
        "upload_time_iso_8601": "2022-06-04T21:33:50.489147Z",
        "url": "https://files.pythonhosted.org/packages/f6/7b/4bc6bfa0e7424cf13d23a3528f8ca1c27020f8e24da534c931577b1b4a11/slapstack-0.0.23-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb71ca273db2dccb36aa6a7f2b44d6395f7b1cdf8051b07a627e78958c4a4e11",
          "md5": "53371088860880ee06478d002d46c8d4",
          "sha256": "d78d86a5d1337733d8e069548c64f34dfc993461278ad6b08c6403325e17ff2c"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.23.tar.gz",
        "has_sig": false,
        "md5_digest": "53371088860880ee06478d002d46c8d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.8",
        "size": 1229462,
        "upload_time": "2022-06-04T21:34:02",
        "upload_time_iso_8601": "2022-06-04T21:34:02.154485Z",
        "url": "https://files.pythonhosted.org/packages/bb/71/ca273db2dccb36aa6a7f2b44d6395f7b1cdf8051b07a627e78958c4a4e11/slapstack-0.0.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58d439b96ed1b1cd3ef63fd3eb50281209fcabc4355fb085f7c65a3f6b23e8f0",
          "md5": "4f127334dc7b204b5426b9ab2e27a7d4",
          "sha256": "769f41555bd40d1a5b1422015b0527aeddcfebe55b190808e7efff1aa7ad2819"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.24-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "4f127334dc7b204b5426b9ab2e27a7d4",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": ">3.6.8",
        "size": 1507506,
        "upload_time": "2022-06-04T22:12:59",
        "upload_time_iso_8601": "2022-06-04T22:12:59.439147Z",
        "url": "https://files.pythonhosted.org/packages/58/d4/39b96ed1b1cd3ef63fd3eb50281209fcabc4355fb085f7c65a3f6b23e8f0/slapstack-0.0.24-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6c4ae32dac4d0af8fdae60c799c7413348c44f7f6b808e342b0282a5f82e95b",
          "md5": "5d3ebfac7179570f989837707a1674c3",
          "sha256": "09864992ea31240089d55dec8b7f60e16e56ccb376896879db30a83b796ace16"
        },
        "downloads": -1,
        "filename": "slapstack-0.0.24.tar.gz",
        "has_sig": false,
        "md5_digest": "5d3ebfac7179570f989837707a1674c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.8",
        "size": 1228770,
        "upload_time": "2022-06-04T22:13:06",
        "upload_time_iso_8601": "2022-06-04T22:13:06.365769Z",
        "url": "https://files.pythonhosted.org/packages/a6/c4/ae32dac4d0af8fdae60c799c7413348c44f7f6b808e342b0282a5f82e95b/slapstack-0.0.24.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58d439b96ed1b1cd3ef63fd3eb50281209fcabc4355fb085f7c65a3f6b23e8f0",
        "md5": "4f127334dc7b204b5426b9ab2e27a7d4",
        "sha256": "769f41555bd40d1a5b1422015b0527aeddcfebe55b190808e7efff1aa7ad2819"
      },
      "downloads": -1,
      "filename": "slapstack-0.0.24-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "4f127334dc7b204b5426b9ab2e27a7d4",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">3.6.8",
      "size": 1507506,
      "upload_time": "2022-06-04T22:12:59",
      "upload_time_iso_8601": "2022-06-04T22:12:59.439147Z",
      "url": "https://files.pythonhosted.org/packages/58/d4/39b96ed1b1cd3ef63fd3eb50281209fcabc4355fb085f7c65a3f6b23e8f0/slapstack-0.0.24-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6c4ae32dac4d0af8fdae60c799c7413348c44f7f6b808e342b0282a5f82e95b",
        "md5": "5d3ebfac7179570f989837707a1674c3",
        "sha256": "09864992ea31240089d55dec8b7f60e16e56ccb376896879db30a83b796ace16"
      },
      "downloads": -1,
      "filename": "slapstack-0.0.24.tar.gz",
      "has_sig": false,
      "md5_digest": "5d3ebfac7179570f989837707a1674c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.6.8",
      "size": 1228770,
      "upload_time": "2022-06-04T22:13:06",
      "upload_time_iso_8601": "2022-06-04T22:13:06.365769Z",
      "url": "https://files.pythonhosted.org/packages/a6/c4/ae32dac4d0af8fdae60c799c7413348c44f7f6b808e342b0282a5f82e95b/slapstack-0.0.24.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}