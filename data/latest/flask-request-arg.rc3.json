{
  "info": {
    "author": "Andrew Rowe",
    "author_email": "rowe.andrew.d@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "flask-request-arg\n=================\n\nEasy way to convert Flask request form and args to route parameters.\n\nIntroduction\n------------\n\nHandling `form` and `request` parameters in `Flask` is complex and error-prone. Common \nissues are:\n\n * Values need to be converted to the correct type.\n * Intricate logic used to handle defaults and missing values.\n * Request arguments and form fields are not clear from the method signature.\n * GET, PUT, POST all require different logic to get values.\n * Documentation for request and form values are not easy to generate.\n\n`flask-request-arg` solves this issues by allowing you to use a simple decorator\nto specify the argument name, type and default value.  Then any form data, JSOM\ndata or request argument is converted into a named method parameter.  POST using form \ndata, GET using arguments or PUT with JSON body data all can use the same\ncode logic.\n\nInstallation\n------------\n\npip install flask-request-arg\n\nUsage\n-----\n\n```python\n\n@request_arg(arg_name: str, arg_type: Any = None, arg_default=None) -> Callable:\n```\n\n* `arg_name` - the name of the argument to add as a method parameter.\n* `arg_type` - the type of the argument.  All form and request args are usually strings.\n* `arg_default`  - default value of the argument when not in form or request.\n\n### Notes\n\n * to make an argument required do not provide an `arg_default`.\n * a `<form>` `<input>` `name` must match the `request_arg` argument name.\n * a JSON body key must match the `request_arg` argument name.\n * any request argument name must be a valid `Python` variable name.\n\nExample\n-------\n\nTo call an area of circle method with a parameter argument as in this example:\n\n```\n   /area_of_circle?radius=23.456\n   \n   # 1727.57755904\n```\n\nStructure your Flask route as follows:\n\n```python\nfrom flask_request_arg import request_arg\nfrom flask import Response\n\n\n@request_arg('radius', float)\n@app.route('/area_of_circle', methods=['GET'])\ndef area_of_circle(radius):\n    result = radius * radius * 3.14\n    return Response(f\"{result}\", 200)\n```\n\nForms\n-----\n\nA method that handles POST can be structured the same as a GET.  Example:\n\n```python\nfrom flask_request_arg import request_arg\nfrom flask import Response\n\n\n@request_arg('radius', float)\n@app.route('/area_of_circle', methods=['POST'])\ndef area_of_circle(radius):\n    result = radius * radius * 3.14\n    return Response(f\"{result}\", 200)\n```\n\nHTML example:\n\n```html\n<form action=\"/area_of_circle\" method=\"post\">\n    <label>Radius:<input name=\"radius\" type=\"number\"/></label>\n    <button type=\"submit\">Get area</button>\n</form>\n```\nNOTE: the form input name must match the `request_arg` argument name.\n\nNOTE: request arguments and form data can be used together on the same request.\n\nJSON Data\n---------\n\nJSON body data is treated the same as a POST or GET.  Example:\n\n```python\nfrom flask_request_arg import request_arg\nfrom flask import Response\n\n\n@request_arg('radius', float)\n@app.route('/area_of_circle', methods=['PUT'])\ndef area_of_circle(radius):\n    result = radius * radius * 3.14\n    return Response(f\"{result}\", 200)\n```\n\nCalled like:\n\n```javascript\nfetch('/area_of_circle', {\n  headers: { 'Content-Type': 'application/json' }, // tells the server we have json\n  method:'PUT', \n  body: JSON.stringify({radius:45.67}), // json is sent to the server as text\n})\n```\n\nNOTE: request arguments and JSON body data can be used together on the same request.\n\nAs you can see the `Flask` method code is the same for GET, PUT and POST.  So you can\ndo all three at once.  Example:\n\n```python\nfrom flask_request_arg import request_arg\nfrom flask import Response\n\n\n@request_arg('radius', float)\n@app.route('/area_of_circle', methods=['GET', 'PUT', 'POST'])\ndef area_of_circle(radius):\n    result = radius * radius * 3.14\n    return Response(f\"{result}\", 200)\n```\n\nRequest arguments\n-----------------\n\nRequest arguments of the type \n\n   `/route?argument1=value1&argument2=value2` \n   \nare treated the same as `form` or `JSON` data.Example:\n\n```python\nfrom flask_request_arg import request_arg\nfrom flask import Response\n\n\n# /area_of_circle?radius=124.56\n\n@request_arg('radius', float)\n@app.route('/area_of_circle')\ndef area_of_circle(radius):\n    result = radius * radius * 3.14\n    return Response(f\"{result}\", 200)\n```\n\nConverting values\n-----------------\n\nUse the `arg_type` parameter to specify a type conversion for the string value.\n\nThe arg_type can be any Python type.  The default is`str`.  Example:\n\n```python\nfrom flask_request_arg import request_arg\nfrom flask import Response\n\n\n@request_arg('radius', float)\n@request_arg('number_of_circles', int)\n@request_arg('name', str)\n@app.route('/area_of_circle', methods=['GET'])\ndef area_of_circle(radius, number_of_circles, name):\n    result = number_of_circles * radius * radius * 3.14\n    return Response(f\"{number_of_circles} of {name} is {result}\", 200)\n```\n\nCustom type converters can be supplied using a `lambda`.  Example: \n\n```python\n    @request_arg(\"arg_type\", lambda x: x == \"True\")\n    @app.route('/custom')\n    def custom_arg_type(arg_type):\n        result = \"yes\" if arg_type else \"no\"\n        return Response(f\"{result}\", 200)\n```\n \nWhen using `bool` as an `arg_type`, a _truthy_ test will be done and \nreturn `True` if the value is in:\n\n```python\n\n    (\"y\", \"Y\", \"yes\", \"Yes\", \"YES\", True, \"true\", \"True\", \"TRUE\", 1, \"1\")\n\n```\n\nMixing parameters\n-----------------\n\nIf required, you can mix Flask request parameters with request arguments.  Example:\n\n```python\nfrom flask_request_arg import request_arg\nfrom flask import Response\n\n\n@request_arg('radius', float)\n@app.route('/area_of_circle/<float:pi>/', methods=['GET'])\ndef area_of_circle(pi, radius):\n    result = radius * radius * pi\n    return Response(f\"{result}\", 200)\n```\n\n\nRelease history\n---------------\n\n* 1.0.2 - Fix publish\n* 1.0.1 - Use truthy values for `bool` types\n* 1.0.0 - Tidy up documentation.  Proper release.\n* 0.0.2 - Initial release\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Martlark/flask-request-arg/archive/1.0.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Martlark/flask-request-arg",
    "keywords": "flask request arguments form json parameters",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-request-arg",
    "package_url": "https://pypi.org/project/flask-request-arg/",
    "platform": null,
    "project_url": "https://pypi.org/project/flask-request-arg/",
    "project_urls": {
      "Download": "https://github.com/Martlark/flask-request-arg/archive/1.0.2.tar.gz",
      "Homepage": "https://github.com/Martlark/flask-request-arg"
    },
    "release_url": "https://pypi.org/project/flask-request-arg/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Easy way to convert Flask request form, JSON and args to route parameters.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14764334,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7ef2fb77c9e6d3ef780e7aef969f7b671814727452ccd0d1015097ed6fc306a",
          "md5": "fdcc0f8b0550bd7e9a10905b4870ce24",
          "sha256": "0b4327e39bdb08e9163b37160d3d15e271e2aae15fbe3d31643a0f05cce156ea"
        },
        "downloads": -1,
        "filename": "flask_request_arg-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdcc0f8b0550bd7e9a10905b4870ce24",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8304,
        "upload_time": "2021-08-30T01:49:20",
        "upload_time_iso_8601": "2021-08-30T01:49:20.981925Z",
        "url": "https://files.pythonhosted.org/packages/b7/ef/2fb77c9e6d3ef780e7aef969f7b671814727452ccd0d1015097ed6fc306a/flask_request_arg-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39c459e7fb09acbf8f2d66b0ae729c0ef50cb0a8f5b6364019024e4f47e0888c",
          "md5": "0b916863c2e809061e41e865d93a3b11",
          "sha256": "a5a1b43266d2aab1cc7170fcc8f7b0f1b34af8693f7812960e8157f263945ad9"
        },
        "downloads": -1,
        "filename": "flask_request_arg-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b916863c2e809061e41e865d93a3b11",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8465,
        "upload_time": "2021-08-30T09:53:19",
        "upload_time_iso_8601": "2021-08-30T09:53:19.351930Z",
        "url": "https://files.pythonhosted.org/packages/39/c4/59e7fb09acbf8f2d66b0ae729c0ef50cb0a8f5b6364019024e4f47e0888c/flask_request_arg-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc9e013885d1baff2e729158c642de95e54db226ccd310969b9a88bdf141faec",
          "md5": "eda1a005bef0a20a3931af35a113221c",
          "sha256": "d200d3a8b7e9e1fe6c710ce949e8351384a3ebc26db8c4ae264e4dd706412008"
        },
        "downloads": -1,
        "filename": "flask_request_arg-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eda1a005bef0a20a3931af35a113221c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8739,
        "upload_time": "2022-08-15T12:34:51",
        "upload_time_iso_8601": "2022-08-15T12:34:51.045182Z",
        "url": "https://files.pythonhosted.org/packages/bc/9e/013885d1baff2e729158c642de95e54db226ccd310969b9a88bdf141faec/flask_request_arg-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de8c48c7130c480a2b148e17f5632c59396a91ca72191b1176d2ebac6ecf7e7b",
          "md5": "097db7ce60f547bca12eeb4d3ef582a3",
          "sha256": "99f746d810632964a6083bac7b1f547917351cadd806f9b8061f40664cca8d71"
        },
        "downloads": -1,
        "filename": "flask-request-arg-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "097db7ce60f547bca12eeb4d3ef582a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9662,
        "upload_time": "2022-08-15T12:34:52",
        "upload_time_iso_8601": "2022-08-15T12:34:52.497908Z",
        "url": "https://files.pythonhosted.org/packages/de/8c/48c7130c480a2b148e17f5632c59396a91ca72191b1176d2ebac6ecf7e7b/flask-request-arg-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc9e013885d1baff2e729158c642de95e54db226ccd310969b9a88bdf141faec",
        "md5": "eda1a005bef0a20a3931af35a113221c",
        "sha256": "d200d3a8b7e9e1fe6c710ce949e8351384a3ebc26db8c4ae264e4dd706412008"
      },
      "downloads": -1,
      "filename": "flask_request_arg-1.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eda1a005bef0a20a3931af35a113221c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8739,
      "upload_time": "2022-08-15T12:34:51",
      "upload_time_iso_8601": "2022-08-15T12:34:51.045182Z",
      "url": "https://files.pythonhosted.org/packages/bc/9e/013885d1baff2e729158c642de95e54db226ccd310969b9a88bdf141faec/flask_request_arg-1.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de8c48c7130c480a2b148e17f5632c59396a91ca72191b1176d2ebac6ecf7e7b",
        "md5": "097db7ce60f547bca12eeb4d3ef582a3",
        "sha256": "99f746d810632964a6083bac7b1f547917351cadd806f9b8061f40664cca8d71"
      },
      "downloads": -1,
      "filename": "flask-request-arg-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "097db7ce60f547bca12eeb4d3ef582a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9662,
      "upload_time": "2022-08-15T12:34:52",
      "upload_time_iso_8601": "2022-08-15T12:34:52.497908Z",
      "url": "https://files.pythonhosted.org/packages/de/8c/48c7130c480a2b148e17f5632c59396a91ca72191b1176d2ebac6ecf7e7b/flask-request-arg-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}