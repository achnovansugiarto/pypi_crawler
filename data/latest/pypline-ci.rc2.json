{
  "info": {
    "author": "Christian Tragesser",
    "author_email": "christian@evoen.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pypline-ci\n[![pipeline status](https://gitlab.com/christianTragesser/pypline-ci/badges/master/pipeline.svg)](https://gitlab.com/christianTragesser/pypline-ci/commits/master)\n\nA docker orchestration tool for container-based delivery pipelines - providing developers, testers, and operators a common automated testing tool for local workstations and delivery pipeline infrastructure.\n\nI'm currently experimenting with docker-in-docker delivery pipelines written in a *high-level language* hoping to capitalize on object-oriented concepts native to Python.  While bash does provide a simple ability to script docker-in-docker pipelines; at a certain scale, creating and maintaining independent scripts across multiple integrated repositories or projects becomes cumbersome and inefficient.\n\n#### Examples\nBuild image and run container:\n```python\nimport os\nfrom pyplineCI import Pipeline\n\ndirPath = os.path.dirname(os.path.realpath(__file__))\nbuildPath = dirPath+'/docker/'\nlocalTag = 'local/foo:latest'\n\npl = Pipeline()\npl.build_image(buildPath, localTag)\npl.rund(localTag)\n```\n\nImplement testing framework from dedicated testing image:\n```python\nimport os\nfrom pyplineCI import Pipeline\n\ndirPath = os.path.dirname(os.path.realpath(__file__))\nvolumes = {dirPath: {'bind': '/tmp', 'mode': 'rw'}}\ntestDir = '/tmp/tests'\n\npl = Pipeline(dockerRegistry='registry.gitlab.com/christiantragesser/')\npl.runi(image=pipeline.dockerRegistry+'my-test-image:latest',\n              name='foo-test', working_dir=testDir,\n              volumes=volumes, command='pytest')\n```\n\nOrchestrate application stack for UAT testing then remove all containers if tests are successful:\n```python\nimport os\nfrom pyplineCI import Pipeline\n\ndirPath = os.path.dirname(os.path.realpath(__file__))\ncleanUp = []\n\nuat_volume = {dirPath: {'bind': '/tmp', 'mode': 'rw'}}\ntestDir = '/tmp/tests'\ndb_env_vars = {'MYSQL_ROOT_PASSWORD': 'root', 'MYSQL_DATABASE': 'foo-db', 'MYSQL_ROOT_HOST': '%'}\napp_env_vars = {'DB_HOST': 'mysql-test', 'DB_USER': 'root', 'DB_PASSWORD': 'root', 'DATABASE': 'foo-db'}\n\npl = Pipeline()\ncleanUp.append(pl.rund(image='mysql:5.7', name='mysql-test', environment=db_env_vars))\ncleanUp.append(pl.rund(image='local/foo_app', name='foo-app-test', environment=app_env_vars))\npl.runi(image='tutum/curl:latest', name='foo-uat',\n        working_dir=testDir, volumes=uat_volume,\n        command='./uat.sh foo-app-test:5000')\npl.purge_containers(cleanUp)\n``` \nPerform CVE scan on a docker image:\n```bash\nMY_IMAGE=\"alpine:latest\"\npython3 -c \"from pyplineCI import Pipeline; Pipeline().cve_scan(${MY_IMAGE})\"\n```\n#### API reference\n* **Pipeline**(_network='ci_net', dockerRegistry='library/'_)\n\n  ```class pypline-ci.pyplineCI.Pipeline```\n  - **create_network(** _network_ **)** | Create docker pipeline network.  \n  parameters:\n    + network(_str_) - Name of pipeline network, default `ci_net`\n  - **build_image(** _path, tag_ **)** | Build docker image.  \n  parameters:\n    + path(_str_) - Path to the directory containing the Dockerfile.\n    + tag(_str_) - Tag applied to newly built image.\n  - **pull_image(** _image_ **)** | Pull an image of the given name, similar to the `docker pull` command. If no tag is specified, all tags from that repository will be pulled.  \n  parameters:\n    + image(_str_) - Image name to pull.\n  - **rund(** _image, stderr=None, ports=None, volumes=None, name=None, environment=None, network=_<obj network\\>_, command=None, detach=True, remove=False_ **)** |\n  Performs pull action on provided image, runs a daemonized container, then returns the container ID.  \n  parameters:\n    + environment(_dict or list_) - Environment variables to set inside the container.\n    + image(_str_) - The image to update and run.\n    + name(_str_) - The name for this container.\n    + ports(_dict_) - Port bindings to the container. The keys of the dictionary are the ports to bind inside the container, either as an integer or a string in the form port/protocol, where the protocol is either tcp or udp. The values of the dictionary are the corresponding ports to open on the host.\n    + volumes(_dict_) - Configure volumes mounted inside the container.\n  - **runi(** _image, command, name=None, volumes=None, working_dir='/root', tty=True, environment=None, stdin_open=True, network=_<obj network\\>_, auto_remove=False_ **)** | Performs pull action on provided image, runs an interactive container implementing provided command, then returns container stdout logs and command exit status(zero or non-zero).  \n  parameters:\n    + command(_str_) - The command to run in the container.\n    + environment(_dict or list_) - Environment variables to set inside the container.\n    + image(_str_) - The image to update and run.\n    + name(_str_) - The name for this container.\n    + ports(_dict_) - Port bindings to the container. The keys of the dictionary are the ports to bind inside the container, either as an integer or a string in the form port/protocol, where the protocol is either tcp or udp. The values of the dictionary are the corresponding ports to open on the host.\n    + volumes(_dict_) - Configure volumes mounted inside the container.\n    + working_dir(_str_) - Path to the working directory.\n  - **purge_containers(** _ids_ **)** | Force deletion of container by container ID.  \n  parameters:\n    + ids(_list_) - List of container IDs to delete.\n  - **cve_scan(** _scanImage_ **)** | Perform CVE scan of docker image using [CoreOS Clair](https://coreos.com/clair/docs/latest/).  \n  parameters:\n    + scanImage(_str_) - The image to scan.\n\n#### Install\nPython 3.6 or later\n\nInstall on docker host:\n* From [PyPi](https://pypi.org/project/pypline-ci/)\n```sh\n$ pip install pypline-ci\n```\n\nor\n\n* Via docker:\n\n```sh\n$ docker run --rm -it \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v $PWD:/tmp \\\n    -w /tmp \\\n    registry.gitlab.com/christiantragesser/pypline-ci /bin/sh\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/christianTragesser/pypline-ci",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pypline-ci",
    "package_url": "https://pypi.org/project/pypline-ci/",
    "platform": "",
    "project_url": "https://pypi.org/project/pypline-ci/",
    "project_urls": {
      "Homepage": "https://github.com/christianTragesser/pypline-ci"
    },
    "release_url": "https://pypi.org/project/pypline-ci/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A docker pipeline library",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6355640,
  "releases": {
    "0.1.34": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d239843d6f0c5391ccb244326eeb7f09b753f3b08fca174393b9e4f15af28589",
          "md5": "ad85df6daec440cf2a441d9b91119039",
          "sha256": "422ee9efece993d83122781c9f3f2675f225acc60a7122e13005e6cac7199f38"
        },
        "downloads": -1,
        "filename": "pypline-ci-0.1.34.tar.gz",
        "has_sig": false,
        "md5_digest": "ad85df6daec440cf2a441d9b91119039",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5380,
        "upload_time": "2019-11-27T02:18:07",
        "upload_time_iso_8601": "2019-11-27T02:18:07.069496Z",
        "url": "https://files.pythonhosted.org/packages/d2/39/843d6f0c5391ccb244326eeb7f09b753f3b08fca174393b9e4f15af28589/pypline-ci-0.1.34.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f7d30fba82d76fe2046e023c7f1538c02e7cfdcbf04fe1a67a539179f64e689",
          "md5": "195c0ec8a1c885094e586186d08137d5",
          "sha256": "6881123575dae43cc4db75ed3f08ff519d0be5d1eaabf5a5d030accaabc8c7f5"
        },
        "downloads": -1,
        "filename": "pypline-ci-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "195c0ec8a1c885094e586186d08137d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5074,
        "upload_time": "2019-12-24T14:45:47",
        "upload_time_iso_8601": "2019-12-24T14:45:47.488946Z",
        "url": "https://files.pythonhosted.org/packages/7f/7d/30fba82d76fe2046e023c7f1538c02e7cfdcbf04fe1a67a539179f64e689/pypline-ci-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f7d30fba82d76fe2046e023c7f1538c02e7cfdcbf04fe1a67a539179f64e689",
        "md5": "195c0ec8a1c885094e586186d08137d5",
        "sha256": "6881123575dae43cc4db75ed3f08ff519d0be5d1eaabf5a5d030accaabc8c7f5"
      },
      "downloads": -1,
      "filename": "pypline-ci-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "195c0ec8a1c885094e586186d08137d5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5074,
      "upload_time": "2019-12-24T14:45:47",
      "upload_time_iso_8601": "2019-12-24T14:45:47.488946Z",
      "url": "https://files.pythonhosted.org/packages/7f/7d/30fba82d76fe2046e023c7f1538c02e7cfdcbf04fe1a67a539179f64e689/pypline-ci-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}