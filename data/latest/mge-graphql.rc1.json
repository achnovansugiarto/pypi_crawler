{
  "info": {
    "author": "Alexandru Plesoiu",
    "author_email": "alexandru@mgesoftware.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# ![MGE-GraphQL Logo](https://mgedev.com/images/mge_logo.webp) \n# [MGE-GraphQL](https://pypi.org/project/mge-graphql/) [![PyPI version](https://badge.fury.io/py/mge-graphql.svg)](https://pypi.org/project/mge-graphql/) [![Documentation Status](https://readthedocs.org/projects/mge-graphql/badge/?version=latest)](https://mge-graphql.readthedocs.io/en/latest/?badge=latest)\n\n## Introduction\n\n[MGE-GraphQL](https://pypi.org/project/mge-graphql/) is a Python library for building GraphQL mutations fast and easily.\n\n- **Data Validations:** A similar data validation workflow as Django.\n- **Errors:** Support for throwing errors\n- **Permissions:** Support for user permissions\n\n\n## Installation\n\nFor instaling MGE-GraphQL, just run this command in your shell\n\n```bash\npip install \"mge-graphql\"\n```\n\n## Examples\n\nHere is one example for you to get started:\nCreate `error_codes.py` and define some errors\n```python\nfrom enum import Enum\nfrom mge_graphql.utils.error_codes import (\n    MGE_ERROR_CODE_ENUMS,\n    generate_error_codes\n)\n\n\nclass AccountErrorCode(Enum):\n    # Here you define your Error Codes\n    INVALID_PASSWORD = \"invalid_password\"\n\n# Register error codes\nMGE_ERROR_CODE_ENUMS.append(AccountErrorCode)\ngenerate_error_codes()\n```\n\nCreate `enums.py` to define your Graphene Error Enums\n\n```python\nimport graphene\nimport error_codes as account_error_codes\n\n# Create Graphene Enum\nAccountErrorCode = graphene.Enum.from_enum(account_error_codes.AccountErrorCode)\n```\n\nCreate `types.py` to create your custom error graphql object type\n```python\nfrom mge_graphql.types.common import Error\nfrom enums import AccountErrorCode\n\nclass AccountError(Error):\n    # Custom fields\n    # Support for error_code\n    code = AccountErrorCode(description=\"The error code.\", required=True)\n```\n\nCreate `mutations.py` to create your first mutation\n\n```python\nfrom mge_graphql.mutations.base import BaseMutation\nfrom mge_graphql.exceptions import ValidationError\nfrom types import AccountErrorCode\nimport graphene\n\nclass AccountRegister(BaseMutation):\n    # YOUR GRAPHENE FIELDS\n    username = graphene.String(required=True)\n    password = graphene.String(required=True)\n\n    class Arguments:\n        username = graphene.String(required=True)\n        password = graphene.String(required=True)\n\n    class Meta:\n        description = \"Register a new account.\"\n        # Set our custom AccountError class\n        error_type_class = AccountError\n\n    @classmethod\n    def clean_password(cls, password, errors):\n        if len(password) < 6:\n            errors[\"password\"].append(\n                ValidationError(\n                    {\n                        \"password\": ValidationError(\n                            \"Password cannot be less than 6 characters.\",\n                            code=AccountErrorCode.INVALID_PASSWORD\n                        )\n                    }\n                )\n            )\n\n        return password\n\n    @classmethod\n    def clean(cls, **data):\n        errors = defaultdict(list)\n        cls.clean_password(data[\"password\"], errors)\n\n        if errors:\n            raise ValidationError(errors)\n\n        return data\n    \n    @classmethod\n    def check_permissions(cls, context):\n        # Permission Checks. \n        # If False, then it will raise an Permission Denied Error\n        return True\n\n    @classmethod\n    def perform_mutation(cls, _root, info, **data):\n        cleaned_data = cls.clean(**data)\n        \n        cleaned_username = cleaned_data.get(\"username\")\n        cleaned_password = cleaned_data.get(\"password\")\n\n        # User Save // Any Mutation Logic\n\n        return AccountRegister(\n            username=cleaned_username, \n            password=cleaned_password\n        )\n```\n\nCreate `schema.py` and register your mutation:\n```python\nfrom mutations import AccountRegister\nimport graphene\n\nclass Mutation(graphene.ObjectType):\n    account_register = AccountRegister.Field()\n\n\nschema = graphene.Schema(mutation=Mutation)\n````\n### And.. we are done! Let's try our mutation\n\n`invalid input`:\n```graphql\nmutation {\n  accountRegister(username: \"test\", password: \"234\") {\n    username\n    password\n    \n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n```\n```graphql\n{\n  \"data\": {\n    \"accountRegister\": {\n      \"username\": null,\n      \"password\": null,\n      \"errors\": [\n        {\n          \"field\": \"password\",\n          \"message\": \"Password cannot be less than 6 characters.\",\n          \"code\": \"INVALID_PASSWORD\"\n        }\n      ]\n    }\n  }\n}\n```\n\n`valid input`:\n```graphql\nmutation {\n  accountRegister(username: \"test\", password: \"123456\") {\n    username\n    password\n    \n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n```\n```graphql\n{\n  \"data\": {\n    \"accountRegister\": {\n      \"username\": \"test\",\n      \"password\": \"123456\",\n      \"errors\": []\n    }\n  }\n}\n```\n\nIf method `check_permissions` returns False:\n```graphql\nmutation {\n  accountRegister(username: \"test\", password: \"123456\") {\n    username\n    password\n    \n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n```\n```graphql\n{\n  \"data\": {\n    \"accountRegister\": {\n      \"username\": null,\n      \"password\": null,\n      \"errors\": [\n        {\n          \"field\": null,\n          \"message\": \"You do not have permission to perform this action\",\n          \"code\": \"PERMISSION_DENIED\"\n        }\n      ]\n    }\n  }\n}\n```\n\n## Documentation\n\nDocumentation and links to additional resources are available at\nhttps://mge-graphql.readthedocs.io/en/latest/\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mgesoftware/mge-graphql",
    "keywords": "api graphene mongodb flask graphql mge_graphql mge-graphql rest relay mgesoftware mge",
    "license": "BSD 3-Clause \"New\" or \"Revised\"",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mge-graphql",
    "package_url": "https://pypi.org/project/mge-graphql/",
    "platform": "",
    "project_url": "https://pypi.org/project/mge-graphql/",
    "project_urls": {
      "Homepage": "https://github.com/mgesoftware/mge-graphql"
    },
    "release_url": "https://pypi.org/project/mge-graphql/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "GraphQL support with data validations, error handle and permission support built on top of graphene.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12695539,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bff000517d9f523eb5b88b0e11ef6e75d2357ff85503f039514820a25b2bc9bd",
          "md5": "20de0571ec1ead6d23bbfa43cf69e6c3",
          "sha256": "b28af9626159516101def98b8c318202029a864f1665b189f8000632d5ca1342"
        },
        "downloads": -1,
        "filename": "mge_graphql-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20de0571ec1ead6d23bbfa43cf69e6c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13425,
        "upload_time": "2022-01-26T06:21:42",
        "upload_time_iso_8601": "2022-01-26T06:21:42.883117Z",
        "url": "https://files.pythonhosted.org/packages/bf/f0/00517d9f523eb5b88b0e11ef6e75d2357ff85503f039514820a25b2bc9bd/mge_graphql-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bff000517d9f523eb5b88b0e11ef6e75d2357ff85503f039514820a25b2bc9bd",
        "md5": "20de0571ec1ead6d23bbfa43cf69e6c3",
        "sha256": "b28af9626159516101def98b8c318202029a864f1665b189f8000632d5ca1342"
      },
      "downloads": -1,
      "filename": "mge_graphql-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "20de0571ec1ead6d23bbfa43cf69e6c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13425,
      "upload_time": "2022-01-26T06:21:42",
      "upload_time_iso_8601": "2022-01-26T06:21:42.883117Z",
      "url": "https://files.pythonhosted.org/packages/bf/f0/00517d9f523eb5b88b0e11ef6e75d2357ff85503f039514820a25b2bc9bd/mge_graphql-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}