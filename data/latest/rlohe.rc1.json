{
  "info": {
    "author": "Rahul Bordoloi",
    "author_email": "rahulbordoloi24@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Customer Service",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# Rare-Label-One-Hot Encoder\n\n[![Setup Automated](https://img.shields.io/badge/setup-automated-blue?logo=gitpod)](https://gitpod.io/from-referrer/)\n![Test passing](https://img.shields.io/badge/Tests-passing-brightgreen.svg)\n![Python Version](https://img.shields.io/badge/python-3.6+-brightgreen.svg)\n[![PyPI version](https://badge.fury.io/py/RLOHE.svg)](https://badge.fury.io/py/RLOHE)\n![Last Commit](https://img.shields.io/github/last-commit/rahulbordoloi/Rare-Label-One-Hot-Enocder?style=flat-square)\n[![Open Source Love png2](https://badges.frapsoft.com/os/v2/open-source.png?v=103)](https://github.com/ellerbrock/open-source-badges/)\n\n## About\nWanna One-Hot Encode your Train-Test sets which contains Rare-Labels and also give importance to the top entries? No Worries!\n\n`Rare-Label-One-Hot Encoder` Python Package is there to rescue you out!\n\nIt's a Categorical Encoder which can be mostly used with Classical Machine Learning Algorithms in-order to One-Hot-Encode a Feature having huge cardinality and also having rare labels in the Train-Test sets. <br>\nBasically, it'll set a threshold (that can be user-defined) of taking up the top categories/entries and treat the rest (least significant) as `others`. It also handles rare label cases in case of mapping the features from Train to Test respectively and vice versa. <br>\n\nYou can set the top entries criterion either by `level` which will consider the Top entries according to the threshold set or the other by `amount` which will consider all the entries above the threshold as top entries and rest as `others`.\n\nRare-Label-One-Hot Encoder is available as `RLOHE` in [PyPI](https://pypi.org/project/RLOHE/).\n\n## Installation\n\nRun the following command on your terminal to install `RLOHE`: \n\n1 .  Installing the package using `pip`:\n```python\npip install RLOHE\n```\nOR\n\n```python\npip3 install RLOHE\n```\n\n2 . Cloning the repository:\n\n```\ngit clone https://github.com/rahulbordoloi/Rare-Label-One-Hot-Enocder/\ncd Rare-Label-One-Hot-Enocder\npip install -e .\n```\n\n## Usage\n\n`RLOHE` package contains two functions, namely : <br>\n\n*   __TopLabeledEntries__ : Gives out Top Labeled Entries' Analysis of two given DataFrames.\n*   __RareLabelOneHotEncoder__ : Gives out Rare Label One-Hot Encoded DataFrames according to threshold being set and it's criterion of segregation.\n\nIt is advised to run `TopLabeledEntries` first in-order to check for the Top Entries and their representation in their respective dataset before going for the encoding as a sanity check.\n\n\n<h4> Arguments </h4>\n\n1 . For `TopLabeledEntries` Function : <br>\n\n| __Parameters__ | __Description__ |\n|    ---         |       ---       |\n| __train__ | Refers to the Train Dataset. |\n| __test__ | Refers to the Test Dataset. |\n| __feature_name__ | Refers to the Feature on which encoding is to be done |\n| __threshold__ | Refers to the Top Features Seggregator Limit. |\n| __criterion__ | Refers to `level/volume` according to which top entries will be picked up. Check `reference` for more information. |\n| __secondary_feature__ | Refers to check amount statistics of another feature with respect to the primary feature. |\n| __verbose__ | Refers to variable which controls Output to the console. |\n| __return_dataframe__ | Refers to condition for if a dataframe has to be returned or not. |\n\n\n2 . For `RareLabelOneHotEncoder` Function : <br>\n\n| __Parameters__ | __Description__ |\n|    ---         |       ---       |\n| __train__ | Refers to the Train Dataset. |\n| __test__ | Refers to the Test Dataset. |\n| __feature_name__ | Refers to the Feature on which encoding is to be done |\n| __threshold__ | Refers to the Top Features Seggregator Limit. |\n| __criterion__ | Refers to `level/volume` according to which top entries will be picked up. Check `reference` for more information. |\n| __verbose__ | Refers to variable which controls Output to the console. |\n| __prefix_name__ | Refers to the Prefix Name to be added in front of each new encoded feature. |\n\n __Reference__ <br>\n    *  `level` : Will be considering up top `level` threshold entries for the particular feature, and rest as `BELOW`. <br>\n    *  `amount` : Will be considering up the entries above the threshold for the particular feature, and rest as `BELOW`.\n\nRun this script in order to get the Top Entries according to a given threshold!\n\n```python\n# Importing Libraries\nimport RLOHE as encoder\nimport pandas as pd\n\n# Main Method\nif __name__ == '__main__':\n\n    # Reading in Dataset\n    train = pd.read_csv('https://raw.githubusercontent.com/rahulbordoloi/Rare-Label-One-Hot-Enocder/main/Data/Train_Data.csv')\n    test = pd.read_csv('https://raw.githubusercontent.com/rahulbordoloi/Rare-Label-One-Hot-Enocder/main/Data/Test_Data.csv')\n\n    # Displaying out the Top Entries According to the Threshold set.\n    encoder.TopLabeledEntries(train, test, feature_name = 'department_info', threshold = 10, secondary_feature = 'cost_to_pay')\n```\n\nRun this script in order to get the Rare Label One-Hot Encoded DataFrames according to a given threshold!\n\n```python\n# Importing Libraries\nimport RLOHE as encoder\nimport pandas as pd\n\n# Main Method\nif __name__ == '__main__':\n\n    # Reading in Dataset\n    train = pd.read_csv('https://raw.githubusercontent.com/rahulbordoloi/Rare-Label-One-Hot-Enocder/main/Data/Train_Data.csv')\n    test = pd.read_csv('https://raw.githubusercontent.com/rahulbordoloi/Rare-Label-One-Hot-Enocder/main/Data/Test_Data.csv')\n\n    # Rare Label One-Hot Encoder [Level Wise]\n    encodedTrain, encodedTest = encoder.RareLabelOneHotEncoder(train, test, feature_name = 'department_info', threshold = 10,\n                                                       criterion = 'level', prefix_name = 'dept')\n```\n\n* Checkout Rare Label One-Hot Encoder Implementation in Google Colab : [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1EDzY3Al5jeZML-V8BkQQXvMFDzWQmctx?usp=sharing)\n\n## Developing `Rare Label One Hot Encoder`\n\nTo install `RLOHE`, along with the tools you need to develop and run tests, and execute the following in your virtualenv:\n\n```bash\n$ pip install -e .[dev]\n```\n\n## Contact Author\n\nName : Rahul Bordoloi <br>\nWebsite : https://rahulbordoloi.me <br>\nEmail : rahulbordoloi24@gmail.com <br>\n\n[![forthebadge made-with-python](http://ForTheBadge.com/images/badges/made-with-python.svg)](https://www.python.org/)\n[![ForTheBadge built-with-love](http://ForTheBadge.com/images/badges/built-with-love.svg)](https://gitHub.com/rahulbordoloi/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rahulbordoloi/Rare-Label-One-Hot-Enocder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "RLOHE",
    "package_url": "https://pypi.org/project/RLOHE/",
    "platform": "",
    "project_url": "https://pypi.org/project/RLOHE/",
    "project_urls": {
      "Homepage": "https://github.com/rahulbordoloi/Rare-Label-One-Hot-Enocder"
    },
    "release_url": "https://pypi.org/project/RLOHE/0.0.1/",
    "requires_dist": [
      "pandas (>=0.5)",
      "pytest (>=3.7) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Rare-Label-One-Hot Encoder with Threshold Implementation and Python Package.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8559496,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e39440473a6382e26d1cd4039172a6265ebab1eba67a5f33b97d838bfdb22fa",
          "md5": "7930ed7f8fcce9ce6a12b83289463b6a",
          "sha256": "dad0eca7fb8061f5a70013c2d0e8f4245040d262cbaa4e3e2c2b5c534b39dd83"
        },
        "downloads": -1,
        "filename": "RLOHE-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7930ed7f8fcce9ce6a12b83289463b6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11865,
        "upload_time": "2020-11-02T12:20:06",
        "upload_time_iso_8601": "2020-11-02T12:20:06.577668Z",
        "url": "https://files.pythonhosted.org/packages/6e/39/440473a6382e26d1cd4039172a6265ebab1eba67a5f33b97d838bfdb22fa/RLOHE-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fe32633b08910a79c3137076d2940b69e183f1871be75734a56a4e42848863a",
          "md5": "8cc6208b2ca0a74b1cb536248ee58920",
          "sha256": "4c09fca55adf63dbe7accedcbbe73cd1ffdea89503dc0ff0f4f454014e58f18a"
        },
        "downloads": -1,
        "filename": "RLOHE-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8cc6208b2ca0a74b1cb536248ee58920",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8048,
        "upload_time": "2020-11-02T12:20:10",
        "upload_time_iso_8601": "2020-11-02T12:20:10.007513Z",
        "url": "https://files.pythonhosted.org/packages/6f/e3/2633b08910a79c3137076d2940b69e183f1871be75734a56a4e42848863a/RLOHE-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e39440473a6382e26d1cd4039172a6265ebab1eba67a5f33b97d838bfdb22fa",
        "md5": "7930ed7f8fcce9ce6a12b83289463b6a",
        "sha256": "dad0eca7fb8061f5a70013c2d0e8f4245040d262cbaa4e3e2c2b5c534b39dd83"
      },
      "downloads": -1,
      "filename": "RLOHE-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7930ed7f8fcce9ce6a12b83289463b6a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11865,
      "upload_time": "2020-11-02T12:20:06",
      "upload_time_iso_8601": "2020-11-02T12:20:06.577668Z",
      "url": "https://files.pythonhosted.org/packages/6e/39/440473a6382e26d1cd4039172a6265ebab1eba67a5f33b97d838bfdb22fa/RLOHE-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fe32633b08910a79c3137076d2940b69e183f1871be75734a56a4e42848863a",
        "md5": "8cc6208b2ca0a74b1cb536248ee58920",
        "sha256": "4c09fca55adf63dbe7accedcbbe73cd1ffdea89503dc0ff0f4f454014e58f18a"
      },
      "downloads": -1,
      "filename": "RLOHE-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8cc6208b2ca0a74b1cb536248ee58920",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8048,
      "upload_time": "2020-11-02T12:20:10",
      "upload_time_iso_8601": "2020-11-02T12:20:10.007513Z",
      "url": "https://files.pythonhosted.org/packages/6f/e3/2633b08910a79c3137076d2940b69e183f1871be75734a56a4e42848863a/RLOHE-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}