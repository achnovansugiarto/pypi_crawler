{
  "info": {
    "author": "Ralf Stemmer",
    "author_email": "ralf.stemmer@gmx.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Multimedia :: Graphics :: Graphics Conversion",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Utilities"
    ],
    "description": "# svg2json\n\nCollects a set of SVG vector graphics into a single JSON file using data URIs\n\n**This project is currently in beta stage**\n\nTODO: Motivation:\n\n- lots of small files\n- -> lots of communication overhead\n- -> bad UX - some icons (in browser cache) are visible, some pop up later\n\n## Dependencies\n\n- scour: https://github.com/scour-project/scour\n\n## Build and Install from Source\n\n```bash\n./pkg-build\nsudo pip install --upgrade ./dist/svg2json-0.2.0-py3-none-any.whl\n```\n\n## Install via pip\n\n```bash\npip install svg2json\n```\n\n## Usage\n\n```bash\nsvg2json --help\n```\n\n```bash\nsvg2json -o iconset.json iconset/*.svg\n```\n\n```bash\nsvg2json good.svg bad.svg > status.json\n```\n\n## Example Use-Case\n\nA set of icons shall be collected and used by a web application, instead of loading each icon individually.\nThe client then should use the cached icons from the JSON file.\n\nThis example setup and the provided JavaScript code are based on\nand inspired by the [MusicDB Project](https://github.com/rstemmer/musicdb).\n\n### Server Side\n\n```bash\n# What we start with:\nls ./icons\n# Add.svg  Album.svg  AlbumFile.svg ... vMax.svg  vMin.svg  vThis.svg\nfind ./icons -type f -name \"*.svg\" -print | wc -l\n# 92 svg files\ndu -hc ./icons/*.svg\n# 592KB of data\n\n# Collecting all vector graphics into a singe JSON file:\nsvg2json -o icons.json ./icons/*.svg\n\n# The resulting JSON file\ndu -h icons.json\n# 204K - thanks to size optimization using Scour\n```\n\nExample of a generated JSON file (here: icons.json):\n```json\n{\n    \"Add\":       \"data:image/svg+xml;base64,<data>\",\n    \"Album\":     \"data:image/svg+xml;base64,<data>\",\n    \"AlbumFile\": \"data:image/svg+xml;base64,<data>\",\n    // ...\n    \"vMax\":      \"data:image/svg+xml;base64,<data>\",\n    \"vMin\":      \"data:image/svg+xml;base64,<data>\",\n    \"vThis\":     \"data:image/svg+xml;base64,<data>\"\n}\n```\n\n### Client side\n\nThe `IconManager` class loads the JSON file with all accumulated icons.\nKeep in mind that this happens asynchronously.\nSo right after creating an instanced of this class, the cache is empty.\nAnyway the `GetIcon` code is aware of this situation and allows loading\nicons from the server that are not yet cached.\nEither the JSON file has not been loaded or the icons are not included in the cached icon files.\n\n```javascript\n// Warning: I just hacked down this code for demonstration purpose.\n// It certainly can be improved. At least by error handling inside the LoadIcons method.\n\nclass IconManager\n{\n    constructor(fileurl=null)\n    {\n        this.iconcache = new Object();  // Empty object = empty cache\n        if(typeof fileurl === \"string\")\n            this.LoadIcons(fileurl);    // Load icons\n    }\n\n    LoadIcons(fileurl)\n    {\n        let request = new XMLHttpRequest();\n        request.addEventListener(\"load\", \n            (event)=>\n            {\n                let jsonstring = event.target.responseText;\n                this.iconcache = JSON.parse(jsonstring);\n            },\n            false);\n        request.open(\"GET\", fileurl);\n        request.send();\n    }\n\n    GetIcon(iconname)\n    {\n        // If icon exists in the cache, use it.\n        // Otherwise load it from the server.\n        let uri;\n        if(iconname in this.iconcache)\n            uri = `url(${this.iconcache[iconname]})`;\n        else\n            uri = `url(\"img/icons/${iconname}.svg\")`;\n\n        // Create image element and set the icon as source\n        let icon = new Image();\n        icon.src = uri;\n        return icon;\n    }\n}\n```\n\n```javascript\nlet iconmanager = new IconManager(\"img/icons.json\");\n\n// ...\n\nlet icon_add = iconmanager.GetIcon(\"Add\");\ndocument.body.appendChild(icon_add);\n```\n\nThe shown example code comes without any dependencies despite some classes that are provided by web browsers:\n\n- [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) for loading files from the server\n- [Image](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image) for creating an HTML image element (`<img>`)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rstemmer/svg2json",
    "keywords": "json svg web-development",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "svg2json",
    "package_url": "https://pypi.org/project/svg2json/",
    "platform": null,
    "project_url": "https://pypi.org/project/svg2json/",
    "project_urls": {
      "Documentation": "https://github.com/rstemmer/svg2json",
      "Homepage": "https://github.com/rstemmer/svg2json",
      "Source": "https://github.com/rstemmer/svg2json",
      "Tracker": "https://github.com/rstemmer/svg2json/issues"
    },
    "release_url": "https://pypi.org/project/svg2json/0.2.0/",
    "requires_dist": [
      "scour"
    ],
    "requires_python": ">=3.8",
    "summary": "Collects a set of svg vector graphics into a single json file using data URIs",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13820226,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f655315a5a17389c871298381cea2cd8d32497d15e0da4a833b1bfaf3a02aaf0",
          "md5": "d636b76323eca73ffa8144f326f65854",
          "sha256": "ff64c44d078576b31f30c47fb56825073809842f148c211cc67806f460a65c8c"
        },
        "downloads": -1,
        "filename": "svg2json-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d636b76323eca73ffa8144f326f65854",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9502,
        "upload_time": "2022-05-15T07:27:03",
        "upload_time_iso_8601": "2022-05-15T07:27:03.048898Z",
        "url": "https://files.pythonhosted.org/packages/f6/55/315a5a17389c871298381cea2cd8d32497d15e0da4a833b1bfaf3a02aaf0/svg2json-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2f8801d67ebaa1cea26ce8d139cb6a7aef5c3561bb12658316e8042ee8f5af4",
          "md5": "68f2c992ba3b1903beacaf6bdbe700cd",
          "sha256": "2e5eb310e1e927026096c5bb494e171bba75e2e0491dc09f79cce487ca0331bc"
        },
        "downloads": -1,
        "filename": "svg2json-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "68f2c992ba3b1903beacaf6bdbe700cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8855,
        "upload_time": "2022-05-15T07:27:05",
        "upload_time_iso_8601": "2022-05-15T07:27:05.165030Z",
        "url": "https://files.pythonhosted.org/packages/a2/f8/801d67ebaa1cea26ce8d139cb6a7aef5c3561bb12658316e8042ee8f5af4/svg2json-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f655315a5a17389c871298381cea2cd8d32497d15e0da4a833b1bfaf3a02aaf0",
        "md5": "d636b76323eca73ffa8144f326f65854",
        "sha256": "ff64c44d078576b31f30c47fb56825073809842f148c211cc67806f460a65c8c"
      },
      "downloads": -1,
      "filename": "svg2json-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d636b76323eca73ffa8144f326f65854",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 9502,
      "upload_time": "2022-05-15T07:27:03",
      "upload_time_iso_8601": "2022-05-15T07:27:03.048898Z",
      "url": "https://files.pythonhosted.org/packages/f6/55/315a5a17389c871298381cea2cd8d32497d15e0da4a833b1bfaf3a02aaf0/svg2json-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2f8801d67ebaa1cea26ce8d139cb6a7aef5c3561bb12658316e8042ee8f5af4",
        "md5": "68f2c992ba3b1903beacaf6bdbe700cd",
        "sha256": "2e5eb310e1e927026096c5bb494e171bba75e2e0491dc09f79cce487ca0331bc"
      },
      "downloads": -1,
      "filename": "svg2json-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "68f2c992ba3b1903beacaf6bdbe700cd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8855,
      "upload_time": "2022-05-15T07:27:05",
      "upload_time_iso_8601": "2022-05-15T07:27:05.165030Z",
      "url": "https://files.pythonhosted.org/packages/a2/f8/801d67ebaa1cea26ce8d139cb6a7aef5c3561bb12658316e8042ee8f5af4/svg2json-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}