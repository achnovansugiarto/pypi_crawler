{
  "info": {
    "author": "",
    "author_email": "ultasun <ultasun@icloud.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Framework :: Flask",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: SQL",
      "Topic :: Database :: Database Engines/Servers",
      "Topic :: Database :: Front-Ends",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Interpreters"
    ],
    "description": "# Cacheable Implementation Neutral Data Intermediate\n*CINDI* is a *Meta Database Management System* which provides a simple way for\nfront-end applications to perform [*CRUD*](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) operations  with various back-end\nstores.  *CINDI* is written in *Python 3*, and is available in the [*PyPI Index* as a *PIP* package](https://pypi.org/project/cindi/).  \n\n*CINDI* is a service to translate *INDI* language statements to either *SQL*, *MongoDB*, or *Redis*.  *CINDI* also caches read queries in memory, so that clients asking for the same thing repetitively do not actually get to hit the backing-stores.\n\n*CINDI* is intended to be used during the early rapid-prototyping / idea phase, so that developers may focus on the layout, functionality, and usability of a front-end application.  **Think of *CINDI* as a temporary substitute**, until a proper back-end infrastructure is built.  This way, the initial pioneers of a project need only to focus their energy on the front-end(s).\n\nThe idea is to forgo the traditional map of API endpoints usually provided by a back-end.  Instead, front-end code will submit *INDI* statements directly to a single endpoint, and receive *JSON* responses accordingly. The result is, most application logic is shifted into the front-end code, which simplifies the rapid prototyping of applications.\n\nLater, when a minimal-viable-product had been demonstrated to stakeholders, and more developers can be assigned to the project, *CINDI* would then be replaced with a traditional API back-end.\n\nUsers may configure *CINDI* to use one, some, or all of the currently supported storage systems:\n\n- PostgreSQL\n- MySQL\n- SQLite3\n- MongoDB\n- Redis\n\nAn easy *Implementation Neutral Data Intermediate* language is provided in order to abstract-away the underlying chosen store(s).  The *INDI* language is similar to *SQL*, but re-worded to enforce the *CRUD* mentality.\n\n## Brief INDI Language Tutorial\nThe *INDI* language uses four major *CRUD* keywords: `CREATE`, `READ`, `UPDATE`, and `DELETE`. \n\n*CINDI* will **cache** `READ` operations in-memory, until it detects those result-sets are stale (due to another `CREATE`, `UPDATE`, or `DELETE` affecting the data).\n\nIn order to demonstrate the *INDI* language, consider the following *SQLite3* schema:\n\n\t CREATE TABLE nonsense (\n\t \tid INTEGER NOT NULL PRIMARY KEY,\n\t\tnonsense_a TEXT,\n\t\tnonsense_b TEXT,\n\t\tnonsense_c TEXT\n\t\t);\n\nThe above *SQL* statement would be prepared (manually, by the user) for *CINDI* before starting. Then, after loading *CINDI*, the four *CRUD* operations may be performed by submitting *INDI* statements to the system.\n\nFor example, here is an *INDI* `CREATE` statement:\n\n    CREATE IN nonsense FIELDS (nonsense_a, nonsense_b, nonsense_c) VALUES (\"hekkin big\", \"skare\", \"today and now\")\n\nThere would be no 'result' to the above query, other than the underlying store(s) being modified to reflect the insertion of new data.  Client-side, this is what would be received as a response:\n\n    [[]]\n\nNext example, here is an *INDI* `READ` statement:\n\n    READ IN nonsense id 1 FIELDS nonsense_a\n\nThe `READ` has a result, it would be a JSON array looking like this:\n\n    [[['hekkin big']]]\n\nNow for a more comprehensive `READ`:\n\n    READ IN nonsense ALL RECORDS FIELDS (id, nonsense_a, nonsense_b, nonsense_c)\n\nThis retrieves all records from the nonsense table, including all columns:\n\n    [[[1, 'hekkin big', 'skare', 'today and now']]]\n\nIt appears that 'skare' is spelled wrong, so to `UPDATE` that:\n\n    UPDATE IN nonsense nonsense_b skare FIELDS (nonsense_b) VALUES (scare)\n\nThe literal result is an empty set:\n\n    [[]]\n\nCheck to see just that column had been updated:\n\n    READ IN nonsense id 1 FIELDS nonsense_b\n\nResult:\n\n    [[['scare']]]\n\nFinally, to `DELETE` the record:\n\n    DELETE IN nonsense id 1\n\nA subsequent `READ` would return an empty set.  Note the `DELETE` may have queried by any field, not just the 'id'!\n\n`VALUES` quotes are optional, unless the string to be stored contains spaces.\n\n**See the [`doc/demo.txt`](https://github.com/ultasun/cindi/blob/master/doc/demo.txt) file for the verbose output from the above demo.**\n\nThe `doc` folder also contains schema examples for the other supported systems.\n\n### Why ?\n\nThe above demonstration may seem trivial, however, consider that *CINDI* will support managing these *INDI* statements even if the backing-store is a *NoSQL* solution, such as *MongoDB* or *Redis*.  The results are consistent, and if multiple stores are enabled, then any cache-missed `READ` will query all the stores, and compare the results to ensure consistency across the storage mechanisms.\n\nIf clients are submitting the same *INDI* queries repetitively, then the result from the first time is served from an in-memory *Python dictionary*.  That cached query is discarded when an affecting `CREATE`, `UPDATE`, or `DELETE` occurs.\n\nIn the case of the *NoSQL* solutions, *CINDI* manages the concept of tables, columns, and primary keys.  In particular, the *MongoDB* setup requires only creating a database, and the *Redis* setup requires nothing!\n\n**CINDI will not automatically initialize SQL / Mongo schemas**, this must be done manually prior to runtime. That is why the author has provided a couple *Docker* demos, read on!\n\n**Check [`cindi_tests.py`](https://github.com/ultasun/cindi/blob/master/src/cindi/cindi_tests.py) for more *INDI* language examples.**\n\n## Installation, Easiest: *cindi-lite* Docker Compose Pack\n[Please go here](https://github.com/ultasun/cindi-lite) and follow the instructions in order to have *Docker Compose* orchestrate the setup of [`ultasun/cindi-lite`](https://hub.docker.com/r/ultasun/cindi-lite), which will consume the least resources. Along the way, you'll learn everything there is to know about configuring the *CINDI* runtime for a **minimalist *SQLite3*-only backing-store.**\n## Installation, Easier: *cindi-plus* Docker Compose Pack\n[Please go here](https://github.com/ultasun/cindi-plus) and follow the instructions in order to have *Docker Compose* orchestrate the complete setup and demonstration of [`ultasun/cindi`](https://hub.docker.com/r/ultasun/cindi), which will, by default, consume significantly more resources than [`ultasun/cindi-lite`](https://hub.docker.com/r/ultasun/cindi-lite). Along the way, you'll learn everything there is to know about configuring the *CINDI* runtime for a **full installation with all five supported backing-stores running simultaneously**\n\n## Installation, Easy: *cindi-lite* Docker image (no orchestration)\nA *Docker* image [`ultasun/cindi-lite`](https://hub.docker.com/r/ultasun/cindi-lite) is available on *Docker Hub*, it will use a *SQLite3* setup, and provide a similar experience to *Installing & Basic Setup on SQLite3*.\n\nAfter start-up, development *Flask* server will **not** have *SSL* enabled.\n\n0. Install the latest version of *Docker* on your system.\n1. Open a terminal, and run the following command for a disposable demo:\n   - `$ docker run -dp 36963:36963 --rm ultasun/cindi-lite`\n   - Or, if you'd like to persist logs and data with *named-mounts*:\n   - `$ docker run -dp 36963:36963 -v cindi-lite-data:/app/data -v cindi-lite-logs:/app/logs ultasun/cindi-lite`\n   - Feel free to use *bind-mounts* for easier access to the produced data.\n2. Use *Docker Desktop* to open a terminal into the running container, or otherwise `docker exec -it` into the container, and initialize the **EXAMPLE** data:\n   - `$ python`\n   - `>>> import cindi`\n   - `>>> cindi.quick_unit_tests()`\n   - Verify the return value is `True`, which means all 17 tests passed!\n3. Use *Postman* (or something) to *POST* some *INDI* statements to `http://localhost:36963/evaluate`, such as:\n   - `READ IN nonsense ALL RECORDS FIELDS (id, nonsense_a, nonsense_b, nonsense_c)`\n   - Back in the *python* console, the full list of **EXAMPLES** may be viewed:\n   - `>>> cindi.print_2d_list(cindi.EXAMPLE_LIST)`\n     - These are the **EXAMPLES** which were ran during `cindi.quick_unit_tests()`\n       - There is no harm in running the *DDL* or *DML* statements again!\n\n\n## Hard: Manual Installation & Basic Setup on SQLite3\n### *Installing without Docker*\n**Docker is not necessary to utilize *CINDI***.  This installation demo will show manual installation from PyPI, and configuration using only *SQLite3*, to keep it brief.  Please follow the detailed tutorial on [`cindi-plus`](https://github.com/ultasun/cindi-plus) to learn about configuring other backing-store systems.\n\n1. `pip install cindi`\n2. In your current working directory, create a folder called `config`:\n   - `$ mkdir config`\n3. In the `config` folder, create empty `stores.txt` and `tables.txt` files.\n   - `$ cd config && touch stores.txt && touch tables.txt && cd ..`\n4. Open `stores.txt` with a text editor -- the file must contain a python dictionary, here is the basic example using only *SQLite3*:\n   - `{'sqlite3': {'db': 'db0', 'sqlite3_file_prefix': ''}}`\n5. Open `tables.txt` with a text editor -- the file must contain a python list (or tuple), here is the basic example:\n   - `['nonsense']`\n6. To open the *SQLite3* database for intialization, in your terminal, run:\n   - `$ sqlite3 db0.db`\n   - You may need to install *SQLite3* if the command is not found.\n7. In the *SQLite3* console, initialize the schema:\n   - `sqlite> CREATE TABLE nonsense (id INTEGER NOT NULL PRIMARY KEY, nonsense_a TEXT, nonsense_b TEXT, nonsense_c TEXT);`\n   - Save and quit: `sqlite> .quit`\n8. In your terminal, run:\n   - `$ python3`\n9. Finally, try it out!  Populate the store(s) with **EXAMPLE** data:\n   - `>>> import cindi`\n   - `>>> cindi.quick_unit_tests()`\n        - The above function returns `True` if all tests succeed.\n   - `>>> cindi.quick_cindi(cindi.EXAMPLE5)`\n        - The above function returns a multi-dimensional list of values.\n---\n## Logging\nSince *CINDI* is in the alpha development stage, every *DML* statement is logged in the `logs/` directory. Whatever data you're submitting, a copy will be saved in that directory.\n- This will consume disk space.\n- This will expose sensitive data.\n\nThere is one *INDI* *DML* statement per file. Each filename ends with a nano-seconds-since-epoch timestamp. A filename prefixed with `indi` is a *DML* expression. At the time of this writing, there are no other files written to the `logs/` directory.\n\nThere is no simple way to disable this disk logging without modifying the source code. Just re-define `def fprint(w, x='', y='', z=''):` to do nothing if you must. *CINDI* is in the alpha development stage, and it is designed to assist in developing apps which are also in the alpha development stage. *SSL* on the *Flask* development server is not even enabled, and the development server is 'not for production use' anyway.\n\n## Troubleshooting\n*CINDI* is in the alpha development stage. If you've encountered a problem, then you've probably found a bug in the translation routines, or your backing-stores are not configured correctly.\n\n*CINDI* will generally exit the *Python3* process on most errors ('fail fast'). The `logs/` directory is ordred by nanoseconds-since-epoch timestamps, so it should be easy to work-backwards to locate the *INDI* *DML* statement which was translated inconsistently across multiple backing-stores. The author can't forsee any other reason for *CINDI* to crash, besides a backing-store connectivity issue.\n\nWhen the *Python3* process exits, various [exit codes](https://mariadb.com/kb/en/operating-system-error-codes/) are used. This helps frequent users/developers of *CINDI* quickly identify from the *Docker* console (or elsewhere) why an `exit` had occurred.\n\nHere are the exit numbers and error messages which might be produced by *CINDI*:\n- **117**: `Corrupted store, please file a bug. Check the CINDI README.`\n  - The chain of *INDI* *DML* statements which were submitted to CINDI for execution over time, had managed to cause different **inconsistent** results to appear in the various backing stores.\n  - This will crash the system because, every *DQL* statement executed verifies consistency across all conneected backing stores ('fail fast'). So *CINDI* had a translation error during an earlier *DML* statement.\n  - **Remedy Options**:\n    - **First,** please submit a bug with the full contents of `logs/`, and santize your data first if possible. This error is really not the fault of the user (you). The `VALUES` may not be so important, so a simple script to truncate after the `VALUES` in each file within the `logs/` directory if you can't or won't share the `VALUES`.\n      - However, the `VALUES` would be appreciated, because **some parts of the translation code might do the wrong action if a value has too many single-or-double-quotes**, it's a your-milage-may-vary scenario (at this time).\n      \t- Regular expressions might be used in the future to mitigate some of the forseen issues regarding single-and-double quotes\n\t  - Because a proper recursive solution might be needed.\n    - **Second,** either:\n      - Manually adjust the backing-stores, using their native tools/clients, until the data is consistent.\n      \t- Success will be obvious when *DQL* statements regarding the 'offending table' no longer cause *CINDI* to exit.\n      - Wipe all backing stores, and reload all the *INDI* statements from new.\n- **5**: `fprint failed to print to file: ...`\n  - The log-to-disk mechanism `fprint` failed to write a file.\n  - **Remedy Options**:\n    - Disk space full?\n    - Lost directory permissions during runtime?\n- **52**: `!! ERROR: The quantity of fields detected is not euqal to the number of values detected...`\n  - The submitted *INDI* *DML* statement does not have the same quantity of `FIELDS` and `VALUES`, **or**,\n  - The submitted *INDI* *DML* statement was unable to be parsed properly by the translation routine.\n    - Please submit a bug containing the *INDI* *DML* statement which caused this.\n      - Submitting the full `logs/` should not be necessary, because this error would be isolated to parsing a specific *INDI* *DML* statement before any writing to a backing-store occured.\n  - **Remedy Options**:\n    - Check the *INDI* syntax\n    - Manipulate the single-quotes or double-quotes in the `VALUES` of the offending statement\n      - Many nested single-quotes or double-quotes might confuse the translation routine.\n      \t- Remove the quotes, and please submit a bug.\n\t- Regular expressions will probably be used in the future to avoid problems like this.\n- **29**: `Redis SET failed.`\n  - While performing a *Redis* `SET`, it failed.\n  - **Remedy Options**:\n    - Was *CINDI* disconnected from *Redis* in the middle of the transaction?\n    - Did *CINDI* lose write access to the *Redis* database for some reason?\n  - Please submit a bug in any event! Thank you.\n- **2**: Relating to a configuration 'File Not Found':\n  - `config/stores.txt not found, please check the CINDI README.`\n  - `config/tables.txt not found, please check the CINDI README.`\n  - **Remedy Options**:\n    - The `config/` directory must be in the same directory `.` as where the *Python3* process was launched. This is an elementary user mistake. Please review this README file carefully, or check one of the published *Docker* images for a proper example of how the *Python3* process needs to be launched.\n    - The `config/stores.txt` or `config/tables.txt` files are missing or not named properly.\n- **61**: Relating to a configuration file 'Invalid Syntax':\n  - `config/stores.txt not a dictionary, check the CINDI README.`\n    - **Remedy Option**\n      - `config/stores.txt` must be a [*Python3* *dictionary*](https://docs.python.org/3/tutorial/datastructures.html#dictionaries). Check the syntax of what is in the file, and try again.\n  - `config/tables.txt must be a list or tuple, check CINDI README.`\n    - **Remedy Option**\n      - `config/tables.txt` must be a [*Python3* *list* or *tuple*](https://docs.python.org/3/tutorial/introduction.html#lists). Check the syntax of what is in the file, and try again.\n  - `No stores defined in config/stores.txt! Check CINDI README.`\n    - **Remedy Option**\n      - The `config/stores.txt` file has an empty dictionary in it.\n      \t- Review this README file carefully, you must define at least one backing-store for *CINDI* to use!\n- **49**: `Failed to initialize XXXXX connection.`\n  - *Python3* support for your chosen backing-store mechanism is not installed, **or**,\n  - The connection/credential to the backing store is bad, **or**, the database you had specified to connect to in `config/stores.txt` is not available.\n  - **Remedy Option**\n    - Verify the *Python3* client library for the specified backing-store is installed.\n    - Verify the credentials to the backing-store are valid and specified correctly in `config/stores.txt`\n    - Verify the database configured in `config/stores.txt` exists, permissions are good, and so on.\n    - `...sqlite3 connection, file not found?`\n      - Perhaps the database file was deleted, or access was lost.\n      \t- *CINDI* will not automatically re-create the *SQLite3* database in this event.\n\t- Either reconstruct the *SQLite3* database manually, **or**,\n\t- Wipe out all backing-stores, and start again from new.\n  - **Submit a bug if continuing to have difficulty connecting to a store, perhaps something changed in an underlying connectivity library!**\n- **131**: `High level error: ...`\n  - Some error, likely in a driver, occured.\n  - **Remedy Option: If the solution is not obvious, then you should submit a bug.**\n    - Especially if the problem is an *OperationalError*, complaining the *SQL* syntax is invalid.\n- **22**: `Low level error: ...`\n  - Some error, unforseen by the author, occured.\n  - **Remedy Option: If the solution is not obvious, then you should submit a bug.**\n\n### Cache Duality Caveat\n**If you have multiple *CINDI* instances running against the same backing-stores, then a cache in one instance will not have a way to know if a *DML* `CREATE`/`UPDATE`/`DELETE` occured in another instance.**  Please do not allow multiple clones of *CINDI* to interact with the same backing-stores concurrently.\n- A simple solution to this in a future release will be to have a `/cache-clear` endpoint in *Flask*, **or**\n- A file on the file system is monitored, if it is changed, then other instances know to clear the cache.\n\nSee the next section regarding **Support**!\n\n## Support\nThe author is available for questions, comments and criticism in #cindi on [Libera.Chat](https://libera.chat).\n\n## Credits\nPlease read the [LICENSE](https://github.com/ultasun/cindi/blob/master/LICENSE).  This software was written by a single individual.  This is alpha-quality software, you are likely to find bugs!  Please submit feedback!\n**Thank you for evaluating *CINDI*!**\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright (c) 2022, ultasun. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1\tRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2\tRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3\tAll advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by the ultasun. 4\tNeither the name of the ultasun nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY ultasun AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ultasun BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cindi",
    "package_url": "https://pypi.org/project/cindi/",
    "platform": null,
    "project_url": "https://pypi.org/project/cindi/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ultasun/cindi/issues",
      "Homepage": "https://github.com/ultasun/cindi"
    },
    "release_url": "https://pypi.org/project/cindi/0.9.1.3/",
    "requires_dist": [
      "flask",
      "flask-cors",
      "pyopenssl",
      "pymongo; extra == 'mongodb'",
      "mysql-connector-python; extra == 'mysql'",
      "psycopg; extra == 'postgres'",
      "redis; extra == 'redis'"
    ],
    "requires_python": ">=3.0",
    "summary": "CINDI is a Meta-DBMS to support rapid application prototyping.",
    "version": "0.9.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14780336,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce125b1250a81cd59617a04a3fdba6f2c4f0b4af06bf7f9f8bc4d8c52a1a68ca",
          "md5": "cb0474928b3c630cdb0822a1fa939d22",
          "sha256": "c1d8823e72a28d945c927e277c5978e2b5f4f804ac8264d4b1cf103f71d861ce"
        },
        "downloads": -1,
        "filename": "cindi-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb0474928b3c630cdb0822a1fa939d22",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 39692,
        "upload_time": "2022-08-14T11:44:29",
        "upload_time_iso_8601": "2022-08-14T11:44:29.893820Z",
        "url": "https://files.pythonhosted.org/packages/ce/12/5b1250a81cd59617a04a3fdba6f2c4f0b4af06bf7f9f8bc4d8c52a1a68ca/cindi-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c944921b40bdf3230d732feacfffdd44e639437051ce336727cd12463c223981",
          "md5": "fa959aca14d02af1e5c86ce0fc1c5c96",
          "sha256": "8da6d7699121f85e9e84f3fb61fc0d0da00e53c5d44aba2554686604ecdc4e16"
        },
        "downloads": -1,
        "filename": "cindi-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fa959aca14d02af1e5c86ce0fc1c5c96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 38092,
        "upload_time": "2022-08-14T11:44:31",
        "upload_time_iso_8601": "2022-08-14T11:44:31.962369Z",
        "url": "https://files.pythonhosted.org/packages/c9/44/921b40bdf3230d732feacfffdd44e639437051ce336727cd12463c223981/cindi-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6118cda91c04badf3bb9931f233cc0983635ebc411490610e6fa752776d8af5",
          "md5": "dd47d53d44af6e8a2c0f6cb9bfca25b8",
          "sha256": "d528f5a3b7cfbc47d6946fbc9bcf53a4b7ed3ef0b3c6fee2c1440893a629a259"
        },
        "downloads": -1,
        "filename": "cindi-0.9.1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd47d53d44af6e8a2c0f6cb9bfca25b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 24478,
        "upload_time": "2022-08-14T13:19:27",
        "upload_time_iso_8601": "2022-08-14T13:19:27.551789Z",
        "url": "https://files.pythonhosted.org/packages/f6/11/8cda91c04badf3bb9931f233cc0983635ebc411490610e6fa752776d8af5/cindi-0.9.1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "771348db23e641bdda04c644d71ae373f0f95f60e6a24e0e6d620899d551ca5b",
          "md5": "0ef1b9c55b46cd5dacea998bd64978d3",
          "sha256": "e98d2e5b239fa8b7a63807dea7eb08dff8631192ff725fb2ea0dd6c30c25d0de"
        },
        "downloads": -1,
        "filename": "cindi-0.9.1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0ef1b9c55b46cd5dacea998bd64978d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24079,
        "upload_time": "2022-08-14T13:19:29",
        "upload_time_iso_8601": "2022-08-14T13:19:29.597553Z",
        "url": "https://files.pythonhosted.org/packages/77/13/48db23e641bdda04c644d71ae373f0f95f60e6a24e0e6d620899d551ca5b/cindi-0.9.1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80f99e6c81ae45e768b3a1c705cac9ea491c881f62b33999eb33f8627d765afa",
          "md5": "a76b8d779f3f22014dce3dfc00732f84",
          "sha256": "ecff1e476d7ea926b71d2d314ecdf3d108f64d7fe94f4bf31513a8c6f0937480"
        },
        "downloads": -1,
        "filename": "cindi-0.9.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a76b8d779f3f22014dce3dfc00732f84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 24908,
        "upload_time": "2022-08-15T05:20:45",
        "upload_time_iso_8601": "2022-08-15T05:20:45.620498Z",
        "url": "https://files.pythonhosted.org/packages/80/f9/9e6c81ae45e768b3a1c705cac9ea491c881f62b33999eb33f8627d765afa/cindi-0.9.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b308deb6b41230bf038b4dd4dd64e392ea0cfadd1219b10ea79f9b5cbd36a1f",
          "md5": "7b2d6f4a8d7aec9fe408181122ee45bc",
          "sha256": "29875de6de46d6ddacad62cfeaf5defd243e42adee3e1cb17d7684087718e6f3"
        },
        "downloads": -1,
        "filename": "cindi-0.9.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b2d6f4a8d7aec9fe408181122ee45bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24544,
        "upload_time": "2022-08-15T05:20:48",
        "upload_time_iso_8601": "2022-08-15T05:20:48.376902Z",
        "url": "https://files.pythonhosted.org/packages/9b/30/8deb6b41230bf038b4dd4dd64e392ea0cfadd1219b10ea79f9b5cbd36a1f/cindi-0.9.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcc6d101065243073fa2cb86838e86b6e43246f4e8f70871a5c05ddd5ecc7d92",
          "md5": "1136429903db756a70a6405dca016a87",
          "sha256": "4674cad4705e48bab542c3811a0bb5d786c451261aa904a2666330498ec2009b"
        },
        "downloads": -1,
        "filename": "cindi-0.9.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1136429903db756a70a6405dca016a87",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 28179,
        "upload_time": "2022-08-16T19:23:37",
        "upload_time_iso_8601": "2022-08-16T19:23:37.511674Z",
        "url": "https://files.pythonhosted.org/packages/bc/c6/d101065243073fa2cb86838e86b6e43246f4e8f70871a5c05ddd5ecc7d92/cindi-0.9.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd8b1d02167d51301264649159197a069e9144e7ddfe01c9a8a51c1ecfd9aeea",
          "md5": "9dc95b8991671c530595e98c4b8a8631",
          "sha256": "bbb2e129b1781ee8ba3934040b58ec2d0ae4597b7149a3fb49e948d14db0c7bd"
        },
        "downloads": -1,
        "filename": "cindi-0.9.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9dc95b8991671c530595e98c4b8a8631",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 27815,
        "upload_time": "2022-08-16T19:23:39",
        "upload_time_iso_8601": "2022-08-16T19:23:39.894200Z",
        "url": "https://files.pythonhosted.org/packages/fd/8b/1d02167d51301264649159197a069e9144e7ddfe01c9a8a51c1ecfd9aeea/cindi-0.9.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcc6d101065243073fa2cb86838e86b6e43246f4e8f70871a5c05ddd5ecc7d92",
        "md5": "1136429903db756a70a6405dca016a87",
        "sha256": "4674cad4705e48bab542c3811a0bb5d786c451261aa904a2666330498ec2009b"
      },
      "downloads": -1,
      "filename": "cindi-0.9.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1136429903db756a70a6405dca016a87",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 28179,
      "upload_time": "2022-08-16T19:23:37",
      "upload_time_iso_8601": "2022-08-16T19:23:37.511674Z",
      "url": "https://files.pythonhosted.org/packages/bc/c6/d101065243073fa2cb86838e86b6e43246f4e8f70871a5c05ddd5ecc7d92/cindi-0.9.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd8b1d02167d51301264649159197a069e9144e7ddfe01c9a8a51c1ecfd9aeea",
        "md5": "9dc95b8991671c530595e98c4b8a8631",
        "sha256": "bbb2e129b1781ee8ba3934040b58ec2d0ae4597b7149a3fb49e948d14db0c7bd"
      },
      "downloads": -1,
      "filename": "cindi-0.9.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9dc95b8991671c530595e98c4b8a8631",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 27815,
      "upload_time": "2022-08-16T19:23:39",
      "upload_time_iso_8601": "2022-08-16T19:23:39.894200Z",
      "url": "https://files.pythonhosted.org/packages/fd/8b/1d02167d51301264649159197a069e9144e7ddfe01c9a8a51c1ecfd9aeea/cindi-0.9.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}