{
  "info": {
    "author": "Google LLC",
    "author_email": "no-reply@google.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# UniqueRandomizer\n\n## Overview\n\nUniqueRandomizer is a data structure for sampling outputs of a randomized\nprogram, such as a neural sequence model, _incrementally_ and _without\nreplacement_.\n\n*   _Incremental_ sampling: Instead of sampling a large batch of outputs all at\n    once, as with beam search, UniqueRandomizer provides samples one at a time.\n    This enables flexibility in stopping criteria, such as stopping the sampling\n    process as soon as a satisfactory output is found.\n*   Sampling _without replacement_: In many applications, a neural model is used\n    to produce candidate solutions to some search or optimization problem. In\n    such applications it is usually desirable to consider _unique_ candidate\n    solutions, since duplicates are typically not useful.\n\nFor more details, refer to our paper,\n[Incremental Sampling Without Replacement for Sequence Models](https://arxiv.org/abs/2002.09067),\npublished at ICML 2020.\n\nBibTeX entry:\n\n```\n@article{shi2020uniquerandomizer,\n  title = {Incremental Sampling Without Replacement for Sequence Models},\n  author = {Kensen Shi and David Bieber and Charles Sutton},\n  booktitle = {Proceedings of the 37th International Conference on Machine Learning},\n  year = {2020}\n}\n```\n\n\n## Installation\n\n```\npython3 -m pip install --user unique-randomizer\n```\n\nThis package requires Python 3. The above command automatically installs the\nfollowing dependencies as well:\n\n* absl-py >= 0.6.1\n* numpy >= 1.15.4\n* scipy >= 1.1.0\n\n\n## Usage\n\nTo use UniqueRandomizer, first identify the program or function that you wish to\ndraw unique samples from, such as the `draw_sample` function in the following\nexample:\n\n```\ndef draw_sample(sequence_model, state):\n  \"\"\"Draws a sample (a sequence of token indices) from the sequence model.\"\"\"\n  tokens = []\n  token = BOS\n  for i in range(MAX_LEN):\n    probs, state = sequence_model(token, state)\n    token = np.random.choice(np.arange(len(probs)), p=probs)\n    if token == EOS:\n      break\n    tokens.append(token)\n  return tokens\n```\n\nNote that `draw_sample` can take inputs and can use control flow such as loops,\nconditionals, and recursion. There are only two constraints on the `draw_sample`\nfunction:\n\n1.  It must be deterministic given the inputs, except for random choices\n    provided by `np.random.choice` (or some other method of selecting a random\n    index given a discrete probability distribution).\n2.  Two different sequences of random choices must lead to `draw_sample`\n    returning different outputs.\n\nNext, add a `UniqueRandomizer` object as an input to `draw_sample`, and use its\n`sample_distribution` function to replace `np.random.choice`:\n\n```diff\n- def draw_sample(sequence_model, state):\n+ def draw_sample(sequence_model, state, randomizer):\n    \"\"\"Draws a sample (a sequence of token indices) from the sequence model.\"\"\"\n    tokens = []\n    token = BOS\n    for i in range(MAX_LEN):\n      probs, state = sequence_model(token, state)\n-     token = np.random.choice(np.arange(len(probs)), p=probs)\n+     token = randomizer.sample_distribution(probs)\n      if token == EOS:\n        break\n      tokens.append(token)\n    return tokens\n```\n\nFinally, a simple loop around `draw_sample` can collect unique samples, as\nfollows:\n\n```\ndef draw_unique_samples(model, state, num_samples):\n  \"\"\"Draws multiple unique samples from the sequence model.\"\"\"\n  samples = []\n  randomizer = unique_randomizer.UniqueRandomizer()\n  for _ in range(num_samples):\n    samples.append(draw_sample(model, state, randomizer))\n    randomizer.mark_sequence_complete()\n  return samples\n```\n\n## Code Samples\n\nWe include a few code samples that demonstrate how to use UniqueRandomizer:\n\n * `examples/weighted_coin_flips.py`: This provides a very simple example of\n   using UniqueRandomizer. The function `flip_two_weighted_coins` simulates\n   flipping a pair of weighted coins. The `sample_flips_without_replacement`\n   function then uses UniqueRandomizer to efficiently sample outputs of\n   `flip_two_weighted_coins` without replacement.\n\n * `examples/expand_grammar.py`: This defines a Probabilistic Context-Free\n   Grammar (PCFG), as well as methods to sample elements of the grammar without\n   replacement by using UniqueRandomizer, rejection sampling, and Stochastic\n   Beam Search (SBS). The script `examples/expand_grammar_main.py` enables easy\n   comparison between the different sampling methods under different scenarios.\n\n * `examples/sequence_example.py`: This implements sampling without replacement\n   from a sequence model, using UniqueRandomizer, Batched UniqueRandomizer,\n   rejection sampling, and SBS. The script `examples/sequence_example_main.py`\n   enables easy comparison between the different sampling methods under\n   different scenarios.\n\n## Disclaimer\n\nThis is not an officially supported Google product.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/google-research/unique-randomizer",
    "keywords": "unique randomizer UniqueRandomizer incremental sampling without replacement sequence models",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unique-randomizer",
    "package_url": "https://pypi.org/project/unique-randomizer/",
    "platform": "",
    "project_url": "https://pypi.org/project/unique-randomizer/",
    "project_urls": {
      "Homepage": "https://github.com/google-research/unique-randomizer"
    },
    "release_url": "https://pypi.org/project/unique-randomizer/0.0.1/",
    "requires_dist": [
      "absl-py (>=0.6.1)",
      "numpy (>=1.15.4)",
      "scipy (>=1.1.0)"
    ],
    "requires_python": ">=3",
    "summary": "UniqueRandomizer: Incremental Sampling Without Replacement",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7941148,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d75b0a9a977acee04db73fe89411f5a0b8bc98339ac60a0305439c82ac9c72a",
          "md5": "451dd610a33b004f1ba104f28c8e66d1",
          "sha256": "58734804fd0a277f614692a6c9a751cca68c5d93a1e4b6c2113e94c945b2c163"
        },
        "downloads": -1,
        "filename": "unique_randomizer-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "451dd610a33b004f1ba104f28c8e66d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 33763,
        "upload_time": "2020-08-12T02:21:54",
        "upload_time_iso_8601": "2020-08-12T02:21:54.201152Z",
        "url": "https://files.pythonhosted.org/packages/5d/75/b0a9a977acee04db73fe89411f5a0b8bc98339ac60a0305439c82ac9c72a/unique_randomizer-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61722f14fdb43f05b70e8c383160849a9ed4a9b09c08bc65db79d9b8cd4ba13b",
          "md5": "faffc18b7cf78bc4f905424268ec680a",
          "sha256": "8d0e737d05fdb530eb1f751d1f7786e32ff6af53e2c1792d1613119d735cdc44"
        },
        "downloads": -1,
        "filename": "unique-randomizer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "faffc18b7cf78bc4f905424268ec680a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 23122,
        "upload_time": "2020-08-12T02:21:56",
        "upload_time_iso_8601": "2020-08-12T02:21:56.854684Z",
        "url": "https://files.pythonhosted.org/packages/61/72/2f14fdb43f05b70e8c383160849a9ed4a9b09c08bc65db79d9b8cd4ba13b/unique-randomizer-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d75b0a9a977acee04db73fe89411f5a0b8bc98339ac60a0305439c82ac9c72a",
        "md5": "451dd610a33b004f1ba104f28c8e66d1",
        "sha256": "58734804fd0a277f614692a6c9a751cca68c5d93a1e4b6c2113e94c945b2c163"
      },
      "downloads": -1,
      "filename": "unique_randomizer-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "451dd610a33b004f1ba104f28c8e66d1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 33763,
      "upload_time": "2020-08-12T02:21:54",
      "upload_time_iso_8601": "2020-08-12T02:21:54.201152Z",
      "url": "https://files.pythonhosted.org/packages/5d/75/b0a9a977acee04db73fe89411f5a0b8bc98339ac60a0305439c82ac9c72a/unique_randomizer-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61722f14fdb43f05b70e8c383160849a9ed4a9b09c08bc65db79d9b8cd4ba13b",
        "md5": "faffc18b7cf78bc4f905424268ec680a",
        "sha256": "8d0e737d05fdb530eb1f751d1f7786e32ff6af53e2c1792d1613119d735cdc44"
      },
      "downloads": -1,
      "filename": "unique-randomizer-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "faffc18b7cf78bc4f905424268ec680a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 23122,
      "upload_time": "2020-08-12T02:21:56",
      "upload_time_iso_8601": "2020-08-12T02:21:56.854684Z",
      "url": "https://files.pythonhosted.org/packages/61/72/2f14fdb43f05b70e8c383160849a9ed4a9b09c08bc65db79d9b8cd4ba13b/unique-randomizer-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}