{
  "info": {
    "author": "Steven Ensslen",
    "author_email": "steven@claritycloudworks.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Safe Regex\n\nA library to organise the unit tests for your regular expressions.\n\n# Usage\nPip this library\n``` sh\npip install safe-regex\n```\n\nSeparate your regex from your main code into yaml files with positive and negative examples.  Give these files a `.re.yaml` extension\n\n```yaml\n---\npattern: \"^[a-z]{3}$\"\ndescription: a three letter acronym\ntest_cases:\n  - text: abc\n    matches: [abc]\n  - text: xyz\n    matches: [xyz]\n  # These examples do not match anything\n  - text: 123\n  - text: r2d2\n  - text: abcd\n```\n\nThe change your python code to load the regex from the yaml file.\n\n```python\nimport safe_regex\n\nmy_re = safe_regex.RegularExpression.from_yaml('my_regex', folder=\"my_folder\")\n\n# then use as a normal re.Pattern object\nre_match_object = my_re.match('cat')\n```\n\n## Unit testing\nIn your unit tests loop through your regular expression folder and validate everything.\n```python\nimport os\nfrom safe_regex import RegularExpression\n\n# pytest 6.1 example\ndef test_regex():\n    \"\"\" verify all regular expressions are valid \"\"\"\n    regex_directory = \"my_folder\"\n    for filename in os.listdir(regex_directory):\n        if filename.endswith(\".re.yaml\"):\n            with open(os.path.join(regex_directory, filename)) as yaml_file:\n                yaml_data = yaml.safe_load(yaml_file)\n            sr = RegularExpression(**yaml_data)\n            sr.test()\n```\n\n## Debugging\n\nWhen a regular expression's test fails it helpfully prepares a link to regexr.com where you can inspect and debug the problem. For example:\nhttps://regexr.com/?expression=%2F%5E%5Ba-z%5D%7B3%7D%2Fgms&text=These+should+all+match%0Aabc%0Axyz%0ANone+of+these+should+match%0A123%0Aabcd%0Ar2d2\n\n# Configuration\nrather than passing the folder specify `SAFE_REGEX_PATH` as an environment variable.\n\n# Development\n\nDevelopment is being performed on OS X with [pyenv](https://github.com/pyenv/pyenv) (with its `.python_version` file) and [direnv](https://direnv.net/) (with its `.envrc` file).\n\nIn order to set up a development environment:\n```sh\n brew install direnv pyenv\n echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile\n exec \"${SHELL}\"\n pyenv install $(cat ./.python-version)\n # pyenv install takes a while\n direnv allow\n # direnv allow triggers the creation and activation of the virtual environment\n pip install -r requirements.txt\n pip install -r tests/requirements-testing.txt\n pip install --editable .\n\n # Then validate by running\n pytest\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ensslen/safe-regex",
    "keywords": "test,regular expression",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "safe-regex",
    "package_url": "https://pypi.org/project/safe-regex/",
    "platform": "",
    "project_url": "https://pypi.org/project/safe-regex/",
    "project_urls": {
      "Homepage": "https://github.com/ensslen/safe-regex"
    },
    "release_url": "https://pypi.org/project/safe-regex/0.1/",
    "requires_dist": [
      "pydantic (<2)",
      "pyyaml (<6)"
    ],
    "requires_python": "",
    "summary": "Embeds unit tests with regular expressions",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8785190,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4576e28533f6c67f1b635cc233ec3571a2fc8f9502518fe1c54cab85f7d7311c",
          "md5": "1dd791749b416e20f34b34c420885bed",
          "sha256": "9e65bd757179ef425cdae5922f98b9526d7a410fcc8be7255db9fef613df288e"
        },
        "downloads": -1,
        "filename": "safe_regex-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1dd791749b416e20f34b34c420885bed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7926,
        "upload_time": "2020-12-01T02:42:12",
        "upload_time_iso_8601": "2020-12-01T02:42:12.831309Z",
        "url": "https://files.pythonhosted.org/packages/45/76/e28533f6c67f1b635cc233ec3571a2fc8f9502518fe1c54cab85f7d7311c/safe_regex-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "254a1f3ec641ec2c6765895a481deb36e02cfcd4a734c2590c0430eda19979c8",
          "md5": "f940736c28c5311e674bc6ca038eba0c",
          "sha256": "4cb8b59cbbeae94bc2a4fb92cd5d913d75af4bfaa681ce60c597d568a2de0840"
        },
        "downloads": -1,
        "filename": "safe-regex-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f940736c28c5311e674bc6ca038eba0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3796,
        "upload_time": "2020-12-01T02:42:14",
        "upload_time_iso_8601": "2020-12-01T02:42:14.326386Z",
        "url": "https://files.pythonhosted.org/packages/25/4a/1f3ec641ec2c6765895a481deb36e02cfcd4a734c2590c0430eda19979c8/safe-regex-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4576e28533f6c67f1b635cc233ec3571a2fc8f9502518fe1c54cab85f7d7311c",
        "md5": "1dd791749b416e20f34b34c420885bed",
        "sha256": "9e65bd757179ef425cdae5922f98b9526d7a410fcc8be7255db9fef613df288e"
      },
      "downloads": -1,
      "filename": "safe_regex-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1dd791749b416e20f34b34c420885bed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7926,
      "upload_time": "2020-12-01T02:42:12",
      "upload_time_iso_8601": "2020-12-01T02:42:12.831309Z",
      "url": "https://files.pythonhosted.org/packages/45/76/e28533f6c67f1b635cc233ec3571a2fc8f9502518fe1c54cab85f7d7311c/safe_regex-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "254a1f3ec641ec2c6765895a481deb36e02cfcd4a734c2590c0430eda19979c8",
        "md5": "f940736c28c5311e674bc6ca038eba0c",
        "sha256": "4cb8b59cbbeae94bc2a4fb92cd5d913d75af4bfaa681ce60c597d568a2de0840"
      },
      "downloads": -1,
      "filename": "safe-regex-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f940736c28c5311e674bc6ca038eba0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3796,
      "upload_time": "2020-12-01T02:42:14",
      "upload_time_iso_8601": "2020-12-01T02:42:14.326386Z",
      "url": "https://files.pythonhosted.org/packages/25/4a/1f3ec641ec2c6765895a481deb36e02cfcd4a734c2590c0430eda19979c8/safe-regex-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}