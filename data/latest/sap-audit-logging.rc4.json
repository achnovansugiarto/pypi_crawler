{
  "info": {
    "author": "SAP SE",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Operating System :: Microsoft",
      "Operating System :: Other OS",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "sap\\_audit\\_logging\n===================\n\nProvides audit logging functionalities for Python applications.\n\nOverview\n--------\n\nAudit logging is about writing entries in a specific format to a log\nstorage. Subject to audit logging are events of significant importance.\nFor example, security events which may impact the confidentiality, the\nintegrity or the availability of a system. Another example of such an\nevent would be access to personal data (both reading and altering) like\nbank accounts, political opinion, health status, etc.\n\nWhile the consumer of ordinary logs is a system administrator who would\nlike to keep track of the state of a system, audit logs are read by an\nauditor. There are legal requirements regarding audit logging.\n\nIn general, the events that are supposed to be audit logged can be\ngrouped in 3 main categories:\n\n- changes to system configurations (which may have significant effect on the system itself)\n- access to personal data (related to data privacy)\n- general security events (like starting/stopping a system, failed authorization checks, etc.)\n\nGeneral audit logging principles\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  All attempts to perform an action in a system should be audit logged,\n   no matter if they have been successful or not.\n-  Audit log entries should be consistent with the state of the system.\n   If, for example, the writing of the audit log entry fails, but the\n   changes to system critical parameters have been applied, then those\n   changes should be reverted. Best practice is to wait for the callback\n   of the logger before continuing with the execution of other code.\n-  Especially important is which user (or other agent) has triggered the\n   corresponding event that is being audit logged. For most of the cases\n   the library will validate that such a field is provided in the\n   message.\n-  All audit log entries should be in English. Numbers should be\n   converted to strings with English locale. All time fields should be\n   in UTC time in order to avoid timezone and day light saving time\n   issues.\n-  Passwords should never be audit logged.\n\nPrerequisites\n~~~~~~~~~~~~~\n\nAn application using the audit log library needs to be bound to an\ninstance of the audit log service.\n\nAPI\n---\n\nThe library provides an API for writing audit messages of type\nconfiguration changes, data modifications, data accesses and security\nevents.\n\nImporting the library\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from sap.audit_logging import AuditLogger\n\nCreate message factory\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    audit_logger = AuditLogger()\n\nThis will create an audit log message factory which will use the audit\nlog service binding from the *VCAP\\_SERVICES* environment variable. If more\nthan one audit log service binding is available, you can specify the\nservice instance name in the *AuditLogger* constructor. For example:\n\n.. code:: python\n\n    audit_logger = AuditLogger('<service_instance_name>')\n\nIt is also possible to directly pass audit log service credentials\n(a dictionary) when creating the message factory:\n\n.. code:: python\n\n    audit_logger = AuditLogger(credentials={...})\n\n**Note**: If no service instance is available in the environment then\nmessages will be logged to the standard output.\n\n**Note**: The library takes *application\\_name*, *organization\\_name* and *space\\_name* from\nthe environment variable *VCAP\\_APPLICATION* and sends them to the audit\nlog service.\n\nThe library supports the *oauth2* plan of the audit log service. Also, it supports and x509 certificate.\nIt is possible to provide the user information via configuring a message factory\nwith a security context object. Refer to the documentation of `xssec <https://github.com/SAP/cloud-pysec>`_\nfor more information. Example:\n\n.. code:: python\n\n    audit_logger = AuditLogger('<service_instance_name>').with_security_context(security_context)\n\n**Note**: When a message is logged, the library checks for missing mandatory properties, and will throw an error if some of them are\nnot provided.\n\n**Note**: In case a request to audit log service fails, the library will retry sending it.\nBy default the number of attempts is 5, can be configured via the *AUDITLOG_CONNECTION_RETRY_COUNT* environment variable.\n\nData access messages\n~~~~~~~~~~~~~~~~~~~~\n\nIf you need to create an entry for a data access operation\nover personal data, you can achieve that with the following code:\n\n.. code:: python\n\n      data_access_message = audit_logger.create_data_access_msg()\n      data_access_message\\\n          .set_user('user123')\\\n          .set_tenant('tenant')\\\n          .set_channel('RFC')\\\n          .set_object({\n            'type': '<string>',\n            'id': {\n              '<string>': '<string>'\n            }\n          })\\\n          .set_data_subject({\n            'type': '<string>',\n            'role': '<string>',\n            'id': {\n              '<string>': '<string>'\n            }\n          })\\\n          .add_attribute('news', True)\\\n          .add_attachment('attachment_id', 'attachment_name')\\\n          .log()\n\n-  ``set_user(user)`` - takes a string which identifies the *user*\n   performing the action. This is **mandatory**.\n-  ``set_tenant(tenant)`` - takes a string which specifies the tenant\n   id. The provided value is ignored by older versions of the audit log\n   service that do not support setting a tenant.\n-  ``set_channel(channel)`` - takes a string which specifies *channel*\n   of access.\n-  ``set_object(object_attributes)`` - takes a *dict* which specifies the object which is being *accessed*. The *dict* must have two properties: 'type' - *string* and 'id' - *dict*. This is **mandatory**.\n-  ``set_data_subject(data_subject)`` - takes a *dict* which specifies the data subject. The *dict* must have two properties: 'type' - *string* and 'id' - *dict*. It can also have an optional property 'role' - *string*. This is **mandatory**.\n-  ``add_attribute(name, is_successful)`` - sets object attributes. It\n   is **mandatory** to provide at least one attribute.\n    -  ``name`` - is the name of the attribute being accessed.\n    -  ``is_successful`` - specifies whether the access was successful or not.\n-  ``add_attachment(attachment_id, name)`` - if attachments or files are\n   downloaded or displayed, information identifying the attachment shall\n   be logged.\n    -  ``attachment_id`` - attachment id\n    -  ``name`` - attachment name\n-  ``log()`` - sends the message to the audit log service.\n\nData modification messages\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHere is how to create an entry for a data modification operation:\n\n.. code:: python\n\n      data_modification_message = audit_logger.create_data_modification_msg()\n      data_modification_message\\\n          .set_user('user123')\\\n          .set_tenant('tenant')\\\n          .set_object({\n            'type': '<string>',\n            'id': {\n              '<string>': '<string>'\n            }\n          })\\\n          .set_data_subject({\n            'type': '<string>',\n            'role': '<string>',\n            'id': {\n              '<string>': '<string>'\n            }\n          })\\\n          .add_attribute('news', 'old news', 'new news')\\\n          .log_prepare()\n      # make modification ...\n      # set modification as successful\n      data_modification_message.log_success()\n\n-  ``set_user(user)`` - takes a string which identifies the *user*\n   performing the action. This is **mandatory**.\n-  ``set_tenant(tenant)`` - takes a string which specifies the tenant\n   id. The provided value is ignored by older versions of the audit log\n   service that do not support setting a tenant.\n-  ``set_object(object_attributes)`` - takes a *dict* which specifies the object which is being *accessed*. The *dict* must have two properties: 'type' - *string* and 'id' - *dict*. This is **mandatory**.\n-  ``set_data_subject(data_subject)`` - takes a *dict* which specifies the data subject. The *dict* must have two properties: 'type' - *string* and 'id' - *dict*. It can also have an optional property 'role' - *string*. This is **mandatory**.\n-  ``add_attribute(name, old_value, new_value)`` - sets object\n   attributes. It is **mandatory** to provide at least one attribute.\n    -  ``name`` - is the name of the attribute being modified.\n    -  ``old_value`` - is the current value of the attribute.\n    -  ``new_value`` - is the value of the attribute after the change.\n-  ``log_prepare()`` - sends the message to the audit log service with\n   status *pending*.\n-  ``log_success()`` - updates the message status to *successful*.\n-  ``log_failure()`` - updates the message status to *failed*.\n\n**Note**: If *log\\_success* or *log\\_failure* are called without\n*log\\_prepare*, the message will be sent to the audit log service with\nthe corresponding status.\n\nConfiguration change messages\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHere is how to create an entry for a configuration change operation:\n\n.. code:: python\n\n      configuration_change_message = audit_logger.create_configuration_change_msg()\n      configuration_change_message\\\n          .set_user('user123')\\\n          .set_tenant('tenant')\\\n          .set_object({\n            'type': '<string>',\n            'id': {\n              '<string>': '<string>'\n            }\n          })\\\n          .add_attribute('news', 'old news', 'new news')\\\n          .log_prepare()\n      # make configuration change ...\n      # set configuration change as successful\n      configuration_change_message.log_success()\n\n-  ``set_user(user)`` - takes a string which identifies the *user*\n   performing the action. This is **mandatory**.\n-  ``set_tenant(tenant)`` - takes a string which specifies the tenant\n   id. The provided value is ignored by older versions of the audit log\n   service that do not support setting a tenant.\n-  ``set_object(object_attributes)`` - takes a *dict* which specifies the object which is being *accessed*. The *dict* must have two properties: 'type' - *string* and 'id' - *dict*. This is **mandatory**.\n-  ``add_attribute(name, old_value, new_value)`` - sets object\n   attributes. It is **mandatory** to provide at least one attribute.\n      -  ``name`` - is the name of the attribute being modified.\n      -  ``old_value`` - is the current value of the attribute.\n      -  ``new_value`` - is the value of the attribute after the change.\n-  ``log_prepare()`` - sends the message to the audit log service with\n   status *pending*.\n-  ``log_success()`` - updates the message status to *successful*.\n-  ``log_failure()`` - updates the message status to *failed*.\n\nGeneral security messages\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHere is how to create a general security audit log message:\n\n.. code:: python\n\n    security_event_message = audit_logger.create_security_event_msg()\n    security_event_message\\\n        .set_user('user123')\\\n        .set_tenant('tenant')\\\n        .set_data('unsuccessful login attempt')\\\n        .set_ip('1.1.1.1')\\\n        .log()\n\n-  ``set_user(user)`` - takes a string which identifies the *user*\n   performing the action. This is **mandatory**.\n-  ``set_tenant(tenant)`` - takes a string which specifies the tenant\n   id. The provided value is ignored by older versions of the audit log\n   service that do not support setting a tenant.\n-  ``set_data(data)`` - takes a string representing the security event\n   description. This is **mandatory**.\n-  ``set_ip(source_ip)`` - states the IP of the machine that contacts\n   the system. It is not mandatory, but it should be either IPv4 or\n   IPv6.\n-  ``log()`` - sends the message to the audit log service.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.sap.com/",
    "keywords": "SAP audit auditlog",
    "license": "SAP DEVELOPER LICENSE AGREEMENT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sap-audit-logging",
    "package_url": "https://pypi.org/project/sap-audit-logging/",
    "platform": null,
    "project_url": "https://pypi.org/project/sap-audit-logging/",
    "project_urls": {
      "Homepage": "https://www.sap.com/"
    },
    "release_url": "https://pypi.org/project/sap-audit-logging/1.2.6/",
    "requires_dist": [
      "requests (==2.26.0)",
      "cfenv (==0.5.3)"
    ],
    "requires_python": ">=3.0",
    "summary": "SAP Python audit log service client",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13854076,
  "releases": {
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed5fce861d09670b7916eea87cf86a5c38ced392c32d6d36853fbb66374ac44b",
          "md5": "fb9ca5159192a5768caefd8cd7be0166",
          "sha256": "3e8e986d1f7e7556035383c175f01ed0abe399511dfe7505db48e0e1a35bf346"
        },
        "downloads": -1,
        "filename": "sap_audit_logging-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb9ca5159192a5768caefd8cd7be0166",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 17137,
        "upload_time": "2021-03-09T15:59:31",
        "upload_time_iso_8601": "2021-03-09T15:59:31.804700Z",
        "url": "https://files.pythonhosted.org/packages/ed/5f/ce861d09670b7916eea87cf86a5c38ced392c32d6d36853fbb66374ac44b/sap_audit_logging-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a0305c2b3fc105a09e895ec3b19d39bf85272af0e9ada79b1d660ec6218f639",
          "md5": "5e7bcaa2c8ad1fe5441aae2b9bc09567",
          "sha256": "29cd4df719f50ab9e714ae4c89ea2342a26cb3c168b918c1dd9a2ab644e3a946"
        },
        "downloads": -1,
        "filename": "sap_audit_logging-1.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e7bcaa2c8ad1fe5441aae2b9bc09567",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 17141,
        "upload_time": "2021-09-29T13:32:41",
        "upload_time_iso_8601": "2021-09-29T13:32:41.560965Z",
        "url": "https://files.pythonhosted.org/packages/2a/03/05c2b3fc105a09e895ec3b19d39bf85272af0e9ada79b1d660ec6218f639/sap_audit_logging-1.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94738926b036105e7088ca2619d06b0aa76b4dc73ca0a76ac73ca0327ab684ed",
          "md5": "c22b09d50c1155274ea67cabff10a821",
          "sha256": "0dcdae10a20843df6b125347a5084ed057ac2dd688dde85d3b3c16df159549a2"
        },
        "downloads": -1,
        "filename": "sap_audit_logging-1.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c22b09d50c1155274ea67cabff10a821",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 19010,
        "upload_time": "2022-05-10T08:15:08",
        "upload_time_iso_8601": "2022-05-10T08:15:08.128018Z",
        "url": "https://files.pythonhosted.org/packages/94/73/8926b036105e7088ca2619d06b0aa76b4dc73ca0a76ac73ca0327ab684ed/sap_audit_logging-1.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0b354649ff7fd59f338fe48c0a6c315afd2b3dcd2bc90f3835335dd45a35192",
          "md5": "db2de54cef81b07823012342af8fed8e",
          "sha256": "329530c72c772c8cbc052e3c5c13f6a0a7c599208cd4f4f52768d1e9c02f3c13"
        },
        "downloads": -1,
        "filename": "sap_audit_logging-1.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db2de54cef81b07823012342af8fed8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 19015,
        "upload_time": "2022-05-18T14:27:30",
        "upload_time_iso_8601": "2022-05-18T14:27:30.683256Z",
        "url": "https://files.pythonhosted.org/packages/b0/b3/54649ff7fd59f338fe48c0a6c315afd2b3dcd2bc90f3835335dd45a35192/sap_audit_logging-1.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0b354649ff7fd59f338fe48c0a6c315afd2b3dcd2bc90f3835335dd45a35192",
        "md5": "db2de54cef81b07823012342af8fed8e",
        "sha256": "329530c72c772c8cbc052e3c5c13f6a0a7c599208cd4f4f52768d1e9c02f3c13"
      },
      "downloads": -1,
      "filename": "sap_audit_logging-1.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "db2de54cef81b07823012342af8fed8e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 19015,
      "upload_time": "2022-05-18T14:27:30",
      "upload_time_iso_8601": "2022-05-18T14:27:30.683256Z",
      "url": "https://files.pythonhosted.org/packages/b0/b3/54649ff7fd59f338fe48c0a6c315afd2b3dcd2bc90f3835335dd45a35192/sap_audit_logging-1.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}