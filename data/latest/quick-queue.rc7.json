{
  "info": {
    "author": "Ramon Invarato Menendez",
    "author_email": "r.invarato@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Quick Multiprocessing Queue\n\nThis is an implementation of Quick Multiprocessing Queue for Python and work similar to `multiprocessing.queue` (more\ninformation about `multiprocessing.queue` in \nhttps://docs.python.org/3/library/multiprocessing.html?highlight=process#pipes-and-queues).\n\n\n## Install\nLast release version of the project to install in: https://pypi.org/project/quick_queue_project/\n\n```\npip install quick-queue\n```\n\n## Introduction\nThe motivation to create this class is due to `multiprocessing.queue` is too slow putting and getting elements \nto transfer data between python processes. \n\nBut if you put or get one list with elements work similar as put or get one single element; this list is getting as \nfast as usually but this has too many elements for process in the subprocess and this action is very quickly.\n\nIn other words, Multiprocess queue is pretty slow putting and getting individual data, then QuickQueue wrap several \ndata in one list, this list is one single data that is enqueue in the queue than is more quickly than put one \nindividual data.\n\nWhile Producer produce and put lists of elements in queue, subprocesses consume those lists and iterate every element, \nthen subprocesses have elements very quickly.\n\n## Quick use\n### QuickQueue\nImport:\n```python\nfrom quick_queue import QQueue\n```\n\nPseudocode without process:\n```python\nqq = QQueue()\n\n# << Add here `qq` to new process(es) and start process(es) >>\n\nqq.put(\"value\")\n# Put all the values you need\n\nqq.end()\n# When end put values call to end() to mark you will not put more values and close QQueue\n```\n\nComplete example (it needs `import multiprocessing`):\n```python\ndef _process(qq):\n    print(qq.get())\n    print(qq.get())\n    print(qq.get())\n\nif __name__ == \"__main__\":\n\n    qq = QQueue()\n\n    p = multiprocessing.Process(target=_process, args=(qq,))\n    p.start()\n\n    qq.put(\"A\")\n    qq.put(\"B\")\n    qq.put(\"C\")\n\n    qq.end()\n\n    p.join()\n```\nNote: you need to call `end` method to perform remain operation and close queue. If you only want put remain data in\nqueue, you can call `put_remain`, then you need to call manually to `close` (or `end`, this performs `close` operation\ntoo).\n\nYou can put all values in one iterable or several iterables with `put_iterable` method (`put_iterable` perform remain\noperation when iterable is consumed; but this not close queue, you need call to `close()` or to `end()` in this case):\n```python\ndef _process(qq):\n    print(qq.get())\n    print(qq.get())\n    print(qq.get())\n\nif __name__ == \"__main__\":\n\n    qq = QQueue()\n\n    p = multiprocessing.Process(target=_process, args=(qq,))\n    p.start()\n\n    qq.put_iterable([\"A\", \"B\", \"C\"])\n    qq.put_iterable([\"D\", \"E\", \"F\"])\n\n    qq.end()\n\n    p.join()\n```\n\nIf you need to use `put` in other process, then you need to initialize values in QQueue with `init`. Due to\nPython message pass between process it is not possible share values in the same shared Queue object (at least I have\nnot found the way) and, by other side, maybe you want to define a different initial values per \"put process\" to\nsensor work calculation.\n```python\ndef _process(qq):\n    # Define initial args to this process, if you do not call to init method, then it use default values\n    qq.init(\"\"\"<Defined args>\"\"\")\n\n    qq.put(\"A\")\n    qq.put(\"B\")\n    qq.put(\"C\")\n\n    qq.end()\n\nif __name__ == \"__main__\":\n\n    qq = QQueue()\n\n    p = multiprocessing.Process(target=_process, args=(qq,))\n    p.start()\n\n    print(qq.get())\n    print(qq.get())\n    print(qq.get())\n\n    p.join()\n```\n\nYou can use defined args in the main constructor if you pass values. You can get initial args\nwith `get_init_args` (return a dict with your args) in process where you instanced QQueue,\nthen in second process you can expand those args in `init` method with `**`.\n\n```python\ndef _process(qq, init_args):\n    qq.init(**init_args)\n\n    qq.put(\"A\")\n    qq.put(\"B\")\n    qq.put(\"C\")\n\n    qq.end()\n\nif __name__ == \"__main__\":\n\n    qq = QQueue(\"\"\"<Defined args>\"\"\")\n\n    p = multiprocessing.Process(target=_process, args=(qq, qq.get_init_args()))\n    p.start()\n\n    print(qq.get())\n    print(qq.get())\n    print(qq.get())\n\n    p.join()\n```\n\n\n### QuickJoinableQueue\nYou can use a Joinable Queue if you want use `join` and `task_done` in queue.\n\nImport:\n```python\nfrom quick_queue import QJoinableQueue\n```\n\nPseudocode without process:\n```python\nqjq = QJoinableQueue()\n\n# << Add here `qq` to new process(es) and start process(es) >>\n\nqjq.put(\"value\")\n# Put all the values you need\n\nqjq.join()\n# When end put values call to put_remain() or join() to mark you will not put more values QJoinableQueue.\n\nqjq.close()\n# You can close QJoinableQueue with close()\n```\n\n\nComplete example (it needs `import multiprocessing`):\n```python\ndef _process(qjq):\n    print(qjq.get())\n    qjq.task_done()\n\n    print(qjq.get())\n    qjq.task_done()\n\n    print(qjq.get())\n    qjq.task_done()\n\nif __name__ == \"__main__\":\n\n    qjq = QJoinableQueue()\n\n    p = multiprocessing.Process(target=_process, args=(qjq,))\n    p.start()\n\n    qjq.put(\"A\")\n    qjq.put(\"B\")\n    qjq.put(\"C\")\n\n    qjq.join()\n\n    qjq.close()\n\n    p.join()\n```\nNote: with `join` you have not call to `end` because this close the queue. `join` method perform remain operation \n(`put_remain`) but not close the queue or call `put_remain` directly if you need it. You need to call manually to \n`close` because after `join` you can to do other operations with this queue.\n\nYou can put all values in one iterable or several iterables with `put_iterable` method (`put_iterable` perform remain\noperation when iterable is consumed; but this not close queue, you need call to `close()` in this case):\n```python\ndef _process(qjq):\n    print(qjq.get())\n    qjq.task_done()\n\n    print(qjq.get())\n    qjq.task_done()\n\n    print(qjq.get())\n    qjq.task_done()\n\nif __name__ == \"__main__\":\n\n    qjq = QJoinableQueue()\n\n    p = multiprocessing.Process(target=_process, args=(qjq,))\n    p.start()\n\n    qjq.put_iterable([\"A\", \"B\", \"C\"])\n    qjq.put_iterable([\"D\", \"E\", \"F\"])\n\n    qjq.join()\n\n    qjq.close()\n\n    p.join()\n```\n\nIf you need to use `put` in other process, then you need to initialize values in QJoinableQueue with `init`.\n```python\ndef _process(qjq):\n    # Define initial args to this process, if you do not call to init method, then it use default values\n    qjq.init(\"\"\"<Defined args>\"\"\")\n\n    qjq.put(\"A\")\n    qjq.put(\"B\")\n    qjq.put(\"C\")\n\n    qjq.join()\n\nif __name__ == \"__main__\":\n\n    qjq = QJoinableQueue()\n\n    p = multiprocessing.Process(target=_process, args=(qjq,))\n    p.start()\n\n    print(qjq.get())\n    qjq.task_done()\n\n    print(qjq.get())\n    qjq.task_done()\n\n    print(qjq.get())\n    qjq.task_done()\n\n    p.join()\n```\n\nYou can use defined args in the main constructor if you pass values.\n```python\ndef _process(qjq, init_args):\n    qjq.init(**init_args)\n\n    qjq.put(\"A\")\n    qjq.put(\"B\")\n    qjq.put(\"C\")\n\n    qjq.join()\n\nif __name__ == \"__main__\":\n\n    qjq = QJoinableQueue(\"\"\"<Defined args>\"\"\")\n\n    p = multiprocessing.Process(target=_process, args=(qjq, qjq.get_init_args()))\n    p.start()\n\n    print(qjq.get())\n    qjq.task_done()\n\n    print(qjq.get())\n    qjq.task_done()\n\n    print(qjq.get())\n    qjq.task_done()\n\n    p.join()\n```\n\n\n\n## About performance\nAn important fact is the size of list (named here \"bucket list\") in relation producer and consumers process to have\nthe best performance:\n * If queue is full, mean consumers are slower than producer.\n * If queue is empty, mean producer is slower than consumers.\n\nThen, best size of bucket list (`size_bucket_list`) is where queue is not full and not empty; for this, I implemented\none sensor to determinate in realtime the `size_bucket_list`, you can enable this sensor if `size_bucket_list` is `None`\n(if you define a number in `size_bucket_list`, then you want a constant value to `size_bucket_list` and sensor\ndisable). by default sensor is enabled (`size_bucket_list=None`), because depend on Hardware in your computer this\n`size_bucket_list` value should change, I recommend you test the best performance for your computer modifying\n`size_bucket_list` (with `None` and with number value).\n\nYou can delimit sensor scope with `min_size_bucket_list` and `max_size_bucket_list` (if `max_size_bucket_list`\nis None then is infinite):\n```python\nqq = QQueue(min_size_bucket_list=10, max_size_bucket_list=1000)\n```\n\nTo disable the sensor define a size in `size_bucket_list`:\n```python\nqq = QQueue(size_bucket_list=120)\n```\n\n\n## Performance test\nHardware where the tests have been done:\n * Processor: Intel i5 3.2GHz\n * Operating System: Windows 10 x64\n\n\n### Queue vs QuickQueue\nUse `python3 tests\\performance_qqueue_vs_queue.py`\n\nPut in a producer process and get in a consumer process N elements with `QuickQueue` and `multiprocessing.queue`:\n\n10,000,000 elements (time: Queue = QuickQueue x 13.28 faster):\n```\nQuickQueue: 0:00:24.436001 | Queue: 0:05:24.488149\n```\n\n1,000,000 elements (time: Queue = QuickQueue x 17.55 faster):\n```\nQuickQueue: 0:00:01.877998 | Queue: 0:00:32.951001\n```\n\n100,000 elements (time: Queue = QuickQueue x 6.32 faster):\n```\nQuickQueue: 0:00:00.591002 | Queue: 0:00:03.736011\n```\n\n### JoinableQueue vs JoinableQueue\nUse `python3 tests\\performance_qjoinablequeue_vs_joinablequeue.py`\n\nPut in a producer process and get in a consumer process N elements with `QuickJoinableQueue` and `multiprocessing.JoinableQueue`:\n\n10,000,000 elements (time: JoinableQueue = QuickJoinableQueue x 6.12 faster):\n```\nQuickJoinableQueue: 0:01:10.113079 | JoinableQueue: 0:08:09.974570\n```\n\n1,000,000 elements (time: JoinableQueue = QuickJoinableQueue x 7.05 faster):\n```\nQuickJoinableQueue: 0:00:06.858233 | JoinableQueue: 0:00:48.363999\n```\n\n100,000 elements (time: JoinableQueue = QuickJoinableQueue x 3.33 faster):\n```\nQuickJoinableQueue: 0:00:01.192382 | JoinableQueue: 0:00:03.702002\n```\n\n\n## Documentation\n\n### Functions:\n * `QQueue`: Main method to create a `QuickQueue` object configured. Args:\n     * `maxsize`: maxsize of bucket lists in queue. If `maxsize<=0` then queue is infinite (and sensor is disabled, I\n     recommend always define one positive number to save RAM memory). By default: `1000`\n     * `size_bucket_list`: `None` to enable sensor size bucket list (require `maxsize>0`). If a number is defined\n                                 here then use this number to size_bucket_list and disable sensor. If `maxsize<=0`\n                                 and `size_bucket_list==None` then size_bucket_list is default to `1000;` other wise,\n                                 if maxsize<=0 and size_bucket_list is defined, then use this number. By default: `None`\n     * `min_size_bucket_list`: (only if sensor is enabled) min size bucket list.\n                                     `Min == 1` and `max == max_size_bucket_list - 1`. By default: `10`\n     * `max_size_bucket_list`: (only if sensor is enabled) max size bucket list. If `None` is infinite.\n                                     By default: `None`\n* `QJoinableQueue`: Main method to create a `QuickJoinableQueue` object configured. Args:\n    * `maxsize`: maxsize of bucket lists in queue. If `maxsize<=0` then queue is infinite (and sensor is disabled, I\n      recommend always define one positive number to save RAM memory). By default: `1000`\n    * `size_bucket_list`: `None` to enable sensor size bucket list (require `maxsize>0`). If a number is defined\n      here then use this number to size_bucket_list and disable sensor. If `maxsize<=0`\n      and `size_bucket_list==None` then size_bucket_list is default to `1000;` other wise,\n      if maxsize<=0 and size_bucket_list is defined, then use this number. By default: `None`\n    * `min_size_bucket_list`: (only if sensor is enabled) min size bucket list.\n      `Min == 1` and `max == max_size_bucket_list - 1`. By default: `10`\n    * `max_size_bucket_list`: (only if sensor is enabled) max size bucket list. If `None` is infinite.\n      By default: `None`\n\n\n### Class:\n#### QuickQueue\nThis is a class with heritage `multiprocessing.queues.Queue`. Methods overwritten:\n * `put_bucket`: This put in the queue a list of data.\n * `put`: This put in the queue a data wrapped in a list. Accumulate data until size_bucket_list, then put in queue.\n * `put_remain`: Call to enqueue rest values that remains.\n * `put_iterable`: This put in this QQueue all data from an iterable.\n * `end`: Helper to call to put_remain and close queue in one method.\n * `get_bucket`: This get from queue a list of data.\n * `get`: This get from queue a data unwrapped from the list.\n * `qsize`: This return the number of bucket lists (not the number of elements)\n\n#### QuickJoinableQueue\nThis is a class with heritage `QuickQueue` and `multiprocessing.queues.JoinableQueue`. Methods overwritten:\n* `put_bucket`: This put in the queue a list of data.\n* `join`: This call to `put_remain` and call to `join` (Wait until the thread terminates) from `multiprocessing.queues.JoinableQueue`.\n* `end`: Raise a warning for bad use and `put_remain` redefined.\n\nNot overwritten but it is important for this class:\n* `task_done`: Indicate that a formerly enqueued task is complete. \n\n\n## Improvements\nTo implement `QuickJoinableQueue` I need to call to `release` Semaphore one time for each element of bulk, this is not \nthe best solution, but it is the easy way to implement `JoinableQueue` with security.\n\n\n## Is useful for you?\nMaybe you would be so kind to consider the amount of hours puts in, the great effort and the resources expended in \ndoing this project. Thank you.\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PWRRXZ2HETVG8&source=url)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Invarato/sort_in_disk_project",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quick-queue",
    "package_url": "https://pypi.org/project/quick-queue/",
    "platform": "",
    "project_url": "https://pypi.org/project/quick-queue/",
    "project_urls": {
      "Homepage": "https://github.com/Invarato/sort_in_disk_project"
    },
    "release_url": "https://pypi.org/project/quick-queue/1.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Quick Multiprocessing Queue for Python (Wrap of multiprocessing.queue to increase data transfer velocity between processes)",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10359331,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bef20ccb9e79e946ace1dd6e54da943ae6ada305b86dfe46e65f353fd2e882ae",
          "md5": "f824e5f3c34f97a40b10e0920f6972e9",
          "sha256": "73baf98b18db541038b77a9dbe175d141d7482b1747a9e6c35726e0e48284260"
        },
        "downloads": -1,
        "filename": "quick_queue-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f824e5f3c34f97a40b10e0920f6972e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 7745,
        "upload_time": "2020-08-12T20:13:42",
        "upload_time_iso_8601": "2020-08-12T20:13:42.934532Z",
        "url": "https://files.pythonhosted.org/packages/be/f2/0ccb9e79e946ace1dd6e54da943ae6ada305b86dfe46e65f353fd2e882ae/quick_queue-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e7e8b825fc69a7fd9868237bff226e19c62f14b396897fa74bea28801eff8a3",
          "md5": "0ed64a7d0d1c0219d6c0a839e3ce12c0",
          "sha256": "d27ae73051f0023d7f12d129e6f3253b06e334a97db52b8c6112043f77bf4d8c"
        },
        "downloads": -1,
        "filename": "quick-queue-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ed64a7d0d1c0219d6c0a839e3ce12c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 6909,
        "upload_time": "2020-08-12T20:13:45",
        "upload_time_iso_8601": "2020-08-12T20:13:45.835967Z",
        "url": "https://files.pythonhosted.org/packages/3e/7e/8b825fc69a7fd9868237bff226e19c62f14b396897fa74bea28801eff8a3/quick-queue-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73fcf35b6578f97fcd54646996d9f71a14ab64648cdff26918047c7cd309ed93",
          "md5": "63e9313c8b5e960a703aa139a0fd1988",
          "sha256": "f8ab7e5e9c44cd93811f11c4f3a4f27d1e27dadf48dd892f38cc5e8afc80d88a"
        },
        "downloads": -1,
        "filename": "quick_queue-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63e9313c8b5e960a703aa139a0fd1988",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 7821,
        "upload_time": "2020-08-12T20:20:37",
        "upload_time_iso_8601": "2020-08-12T20:20:37.948289Z",
        "url": "https://files.pythonhosted.org/packages/73/fc/f35b6578f97fcd54646996d9f71a14ab64648cdff26918047c7cd309ed93/quick_queue-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98e18cd440f263ce45f132172b59df98cba7f8ef91ef3b1a379c0f5b6aa9907a",
          "md5": "115dfd249b3f00c873dcca628c14140e",
          "sha256": "e4b94b8444cf0ed22b1dd71a8454020a20fbdbf60564274909a2482e6cc51e1a"
        },
        "downloads": -1,
        "filename": "quick-queue-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "115dfd249b3f00c873dcca628c14140e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 7022,
        "upload_time": "2020-08-12T20:20:38",
        "upload_time_iso_8601": "2020-08-12T20:20:38.910302Z",
        "url": "https://files.pythonhosted.org/packages/98/e1/8cd440f263ce45f132172b59df98cba7f8ef91ef3b1a379c0f5b6aa9907a/quick-queue-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f5241b17986d940053a79ed155b675d1f3eba7e2da460a965c6e654cfa7c911",
          "md5": "344478c24807eba6264f0fcb3a6e6f14",
          "sha256": "e26301c154ac87c7384aa39535d9586d7e1e39cd01f404b0ac0595290738bb1c"
        },
        "downloads": -1,
        "filename": "quick_queue-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "344478c24807eba6264f0fcb3a6e6f14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 7989,
        "upload_time": "2020-08-13T17:18:15",
        "upload_time_iso_8601": "2020-08-13T17:18:15.248826Z",
        "url": "https://files.pythonhosted.org/packages/1f/52/41b17986d940053a79ed155b675d1f3eba7e2da460a965c6e654cfa7c911/quick_queue-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32e87b0853525849d34092fba04a7d498fd15fbd5c2cb4b6e0d1acaffaffb247",
          "md5": "c253c2101ec4d6851ade1c4a31245705",
          "sha256": "ef9b23baf12a251aeda6df2b49cb5594e0ef4cba47d715ae95ed3df7680c53ff"
        },
        "downloads": -1,
        "filename": "quick-queue-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c253c2101ec4d6851ade1c4a31245705",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 7226,
        "upload_time": "2020-08-13T17:18:16",
        "upload_time_iso_8601": "2020-08-13T17:18:16.607807Z",
        "url": "https://files.pythonhosted.org/packages/32/e8/7b0853525849d34092fba04a7d498fd15fbd5c2cb4b6e0d1acaffaffb247/quick-queue-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "639213663cc979cf35436aaf830ed452c61c41491b2ca003fad69737ab484b4d",
          "md5": "b051f986e8d48659fa26d7ab0c5d5202",
          "sha256": "9c3bb14ef11ee1f7ec49c91ecc5f2f2cdefa6a769a561895090c025adbb35fcb"
        },
        "downloads": -1,
        "filename": "quick_queue-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b051f986e8d48659fa26d7ab0c5d5202",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 7987,
        "upload_time": "2020-08-13T17:19:54",
        "upload_time_iso_8601": "2020-08-13T17:19:54.837726Z",
        "url": "https://files.pythonhosted.org/packages/63/92/13663cc979cf35436aaf830ed452c61c41491b2ca003fad69737ab484b4d/quick_queue-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b19c988988ea55ab11ab299ebdf70ad6489118c6b3f3bb1a662fec85e1ce008a",
          "md5": "05e8301236b9bfa2ee5bf4675069b869",
          "sha256": "9f88910cfdbd0b8f8de6d4a29e1eb28d1f5473e66e48dba1ea98a92512965f22"
        },
        "downloads": -1,
        "filename": "quick-queue-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "05e8301236b9bfa2ee5bf4675069b869",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 7219,
        "upload_time": "2020-08-13T17:19:56",
        "upload_time_iso_8601": "2020-08-13T17:19:56.057870Z",
        "url": "https://files.pythonhosted.org/packages/b1/9c/988988ea55ab11ab299ebdf70ad6489118c6b3f3bb1a662fec85e1ce008a/quick-queue-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71c68de6c5764373b165cc76d8398d17557ded897fbe5e9cdab6f7c7b1def118",
          "md5": "f969bf23d8c470d18cb6cf0f651d8e9b",
          "sha256": "062cdd95f0917c48999935939fd94356d1e5efb70f78687e5026bb554ce66f80"
        },
        "downloads": -1,
        "filename": "quick_queue-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f969bf23d8c470d18cb6cf0f651d8e9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 12343,
        "upload_time": "2020-08-14T16:34:57",
        "upload_time_iso_8601": "2020-08-14T16:34:57.584758Z",
        "url": "https://files.pythonhosted.org/packages/71/c6/8de6c5764373b165cc76d8398d17557ded897fbe5e9cdab6f7c7b1def118/quick_queue-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05c4d3c97f2e4b41d713f89c6de90c064487eb1bc5c65fd782d3a6783b45493d",
          "md5": "25f99be5a62b086b6280ebf17f486246",
          "sha256": "7eab2c9ca8ec8a991c5a7c44441fc8a23e227f3c3cd8f2dfbcb723abbda42d41"
        },
        "downloads": -1,
        "filename": "quick-queue-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "25f99be5a62b086b6280ebf17f486246",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 9927,
        "upload_time": "2020-08-14T16:34:58",
        "upload_time_iso_8601": "2020-08-14T16:34:58.860448Z",
        "url": "https://files.pythonhosted.org/packages/05/c4/d3c97f2e4b41d713f89c6de90c064487eb1bc5c65fd782d3a6783b45493d/quick-queue-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69e41adbcc6a2fba56c591fcc981933bb6f91faba17382db92b6ddf13b46e475",
          "md5": "bf65beb604e1c8fcd68d3d37eb27c9ae",
          "sha256": "058ed6de4cf0ef7e975cc986b401a1ec7304cb8f3372e288d98e38db60f919b5"
        },
        "downloads": -1,
        "filename": "quick_queue-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf65beb604e1c8fcd68d3d37eb27c9ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 8932,
        "upload_time": "2020-08-17T17:49:32",
        "upload_time_iso_8601": "2020-08-17T17:49:32.127762Z",
        "url": "https://files.pythonhosted.org/packages/69/e4/1adbcc6a2fba56c591fcc981933bb6f91faba17382db92b6ddf13b46e475/quick_queue-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e7b2c069c40c30c17e8f8679aaa58fc478151caf138dd87795323d65ffe4573",
          "md5": "8bbd1d3d0f9477639daf8cc81a8b5ef7",
          "sha256": "432a1e136f568a64065bf3dd2adb5bbe5a376c0e108321ab0fc074d324adc1ce"
        },
        "downloads": -1,
        "filename": "quick-queue-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8bbd1d3d0f9477639daf8cc81a8b5ef7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 8330,
        "upload_time": "2020-08-17T17:49:33",
        "upload_time_iso_8601": "2020-08-17T17:49:33.570390Z",
        "url": "https://files.pythonhosted.org/packages/5e/7b/2c069c40c30c17e8f8679aaa58fc478151caf138dd87795323d65ffe4573/quick-queue-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e0d36d926f5768eae8421c4a32e65c30bebc32b65907849bbe1b803da217013",
          "md5": "0e91ae5f8411c5967ff7228be2712255",
          "sha256": "83623ac28618f5b3f87275741929e6084c1c65bd8ad60a56d47b907154739d51"
        },
        "downloads": -1,
        "filename": "quick_queue-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e91ae5f8411c5967ff7228be2712255",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 10640,
        "upload_time": "2021-05-14T19:29:20",
        "upload_time_iso_8601": "2021-05-14T19:29:20.531529Z",
        "url": "https://files.pythonhosted.org/packages/8e/0d/36d926f5768eae8421c4a32e65c30bebc32b65907849bbe1b803da217013/quick_queue-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c997f2c98a02bcf0c68b5fff1416e1a9acc08418a1d341b146e0d5df123a0e64",
          "md5": "feda8bef9ad742204ec3f9b27023504a",
          "sha256": "e8a796b63ad99e90fb9815627815cbe0d7b15f407b71e2f417259316f8840b0f"
        },
        "downloads": -1,
        "filename": "quick-queue-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "feda8bef9ad742204ec3f9b27023504a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 13143,
        "upload_time": "2021-05-14T19:29:21",
        "upload_time_iso_8601": "2021-05-14T19:29:21.789225Z",
        "url": "https://files.pythonhosted.org/packages/c9/97/f2c98a02bcf0c68b5fff1416e1a9acc08418a1d341b146e0d5df123a0e64/quick-queue-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e0d36d926f5768eae8421c4a32e65c30bebc32b65907849bbe1b803da217013",
        "md5": "0e91ae5f8411c5967ff7228be2712255",
        "sha256": "83623ac28618f5b3f87275741929e6084c1c65bd8ad60a56d47b907154739d51"
      },
      "downloads": -1,
      "filename": "quick_queue-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e91ae5f8411c5967ff7228be2712255",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 10640,
      "upload_time": "2021-05-14T19:29:20",
      "upload_time_iso_8601": "2021-05-14T19:29:20.531529Z",
      "url": "https://files.pythonhosted.org/packages/8e/0d/36d926f5768eae8421c4a32e65c30bebc32b65907849bbe1b803da217013/quick_queue-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c997f2c98a02bcf0c68b5fff1416e1a9acc08418a1d341b146e0d5df123a0e64",
        "md5": "feda8bef9ad742204ec3f9b27023504a",
        "sha256": "e8a796b63ad99e90fb9815627815cbe0d7b15f407b71e2f417259316f8840b0f"
      },
      "downloads": -1,
      "filename": "quick-queue-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "feda8bef9ad742204ec3f9b27023504a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 13143,
      "upload_time": "2021-05-14T19:29:21",
      "upload_time_iso_8601": "2021-05-14T19:29:21.789225Z",
      "url": "https://files.pythonhosted.org/packages/c9/97/f2c98a02bcf0c68b5fff1416e1a9acc08418a1d341b146e0d5df123a0e64/quick-queue-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}