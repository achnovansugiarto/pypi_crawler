{
  "info": {
    "author": "Szymon Maszke",
    "author_email": "szymon.maszke@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![torchlayers Logo](https://github.com/szymonmaszke/torchlayers/blob/master/assets/banner.png)\n\n--------------------------------------------------------------------------------\n\n\n| Version | Docs | Tests | Coverage | Style | PyPI | Python | PyTorch | Docker |\n|---------|------|-------|----------|-------|------|--------|---------|--------|\n| [![Version](https://img.shields.io/static/v1?label=&message=0.1.1&color=377EF0&style=for-the-badge)](https://github.com/szymonmaszke/torchlayers/releases) | [![Documentation](https://img.shields.io/static/v1?label=&message=docs&color=EE4C2C&style=for-the-badge)](https://szymonmaszke.github.io/torchlayers/)  | ![Tests](https://github.com/szymonmaszke/torchlayers/workflows/test/badge.svg) | [![codecov](https://codecov.io/gh/szymonmaszke/torchlayers/branch/master/graph/badge.svg?token=GbZmdqbTWM)](https://codecov.io/gh/szymonmaszke/torchlayers) | [![codebeat badge](https://codebeat.co/badges/0e3d33b0-95a4-429c-8692-881a4ffeac6b)](https://codebeat.co/projects/github-com-szymonmaszke-torchlayers-master) | [![PyPI](https://img.shields.io/static/v1?label=&message=PyPI&color=377EF0&style=for-the-badge)](https://pypi.org/project/torchlayers/) | [![Python](https://img.shields.io/static/v1?label=&message=>=3.7&color=377EF0&style=for-the-badge&logo=python&logoColor=F8C63D)](https://www.python.org/) | [![PyTorch](https://img.shields.io/static/v1?label=&message=>=1.3.0&color=EE4C2C&style=for-the-badge)](https://pytorch.org/) | [![Docker](https://img.shields.io/static/v1?label=&message=docker&color=309cef&style=for-the-badge)](https://cloud.docker.com/u/szymonmaszke/repository/docker/szymonmaszke/torchlayers) |\n\n[__torchlayers__](https://szymonmaszke.github.io/torchlayers/) is a library based on [__PyTorch__](https://pytorch.org/)\nproviding __automatic shape and dimensionality inference of `torch.nn` layers__ + additional\nbuilding blocks featured in current SOTA architectures (e.g. [Efficient-Net](https://arxiv.org/abs/1905.11946)).\n\nAbove requires no user intervention (except single call to `torchlayers.build`)\nsimilarly to the one seen in [__Keras__](https://www.tensorflow.org/guide/keras).\n\n### Main functionalities:\n\n* __Shape inference__ for most of `torch.nn` module (__convolutional, recurrent, transformer, attention and linear layers__)\n* __Dimensionality inference__ (e.g. `torchlayers.Conv` working as `torch.nn.Conv1d/2d/3d` based on `input shape`)\n* __Shape inference of custom modules__ (see examples section)\n* __Additional [Keras-like](https://www.tensorflow.org/guide/keras) layers__ (e.g. `torchlayers.Reshape` or `torchlayers.StandardNormalNoise`)\n* __Additional SOTA layers__ mostly from ImageNet competitions\n(e.g. [PolyNet](https://arxiv.org/abs/1608.06993),\n[Squeeze-And-Excitation](https://arxiv.org/abs/1709.01507),\n[StochasticDepth](www.arxiv.org/abs/1512.03385>))\n* __Useful defaults__ (`\"same\"` padding and default `kernel_size=3` for `Conv`, dropout rates etc.)\n* __Zero overhead and [torchscript](https://pytorch.org/docs/stable/jit.html) support__\n\n# Examples\n\nFor full functionality please check [__torchlayers documentation__](https://img.shields.io/static/v1?label=&message=docs&color=EE4C2C&style=for-the-badge).\nBelow examples should introduce all necessary concepts you should know.\n\n## Simple convolutional image and text classifier\n\n* We will use single \"model\" for both tasks.\nFirstly let's define it using `torch.nn` and `torchlayers`:\n\n```python\nimport torch\nimport torchlayers\n\n# torch.nn and torchlayers can be mixed easily\nmodel = torch.nn.Sequential(\n    torchlayers.Conv(64),  # specify ONLY out_channels\n    torch.nn.ReLU(),  # use torch.nn wherever you wish\n    torchlayers.BatchNorm(),  # BatchNormNd inferred from input\n    torchlayers.Conv(128),  # Default kernel_size equal to 3\n    torchlayers.ReLU(),\n    torchlayers.Conv(256, kernel_size=11),  # \"same\" padding as default\n    torchlayers.GlobalMaxPool(),  # Known from Keras\n    torchlayers.Linear(10),  # Output for 10 classes\n)\n\nprint(model)\n```\n\nAbove would give you model's summary like this (__notice question marks for not yet inferred values__):\n\n```python\nSequential(\n  (0): Conv(in_channels=?, out_channels=64, kernel_size=3, stride=1, padding=same, dilation=1, groups=1, bias=True, padding_mode=zeros)\n  (1): ReLU()\n  (2): BatchNorm(num_features=?, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (3): Conv(in_channels=?, out_channels=128, kernel_size=3, stride=1, padding=same, dilation=1, groups=1, bias=True, padding_mode=zeros)\n  (4): ReLU()\n  (5): Conv(in_channels=?, out_channels=256, kernel_size=11, stride=1, padding=same, dilation=1, groups=1, bias=True, padding_mode=zeros)\n  (6): GlobalMaxPool()\n  (7): Linear(in_features=?, out_features=10, bias=True)\n)\n```\n\n* Now you can __build__/instantiate your model with example input (in this case MNIST-like):\n\n```python\nmnist_model = torchlayers.build(model, torch.randn(1, 3, 28, 28))\n```\n\n* Or if it's text classification you are after, same model could be built with different\n`input shape` (e.g. for text classification using `300` dimensional pretrained embedding):\n\n```python\n# [batch, embedding, timesteps], first dimension > 1 for BatchNorm1d to work\ntext_model = torchlayers.build(model, torch.randn(2, 300, 1))\n```\n\n* Finally, you can `print` both models after instantiation, provided below side\nby-side for readability (__notice different dimenstionality, e.g. `Conv2d` vs `Conv1d` after `torchlayers.build`__):\n\n```python\n                # MNIST CLASSIFIER                TEXT CLASSIFIER\n\n                Sequential(                       Sequential(\n                  (0): Conv1d(300, 64)              (0): Conv2d(3, 64)\n                  (1): ReLU()                       (1): ReLU()\n                  (2): BatchNorm1d(64)              (2): BatchNorm2d(64)\n                  (3): Conv1d(64, 128)              (3): Conv2d(64, 128)\n                  (4): ReLU()                       (4): ReLU()\n                  (5): Conv1d(128, 256)             (5): Conv2d(128, 256)\n                  (6): GlobalMaxPool()              (6): GlobalMaxPool()\n                  (7): Linear(256, 10)              (7): Linear(256, 10)\n                )                                 )\n```\n\nAs you can see both modules \"compiled\" into original `pytorch` layers.\n\n## Custom modules with shape inference capabilities\n\nUser can define any module and make it shape inferable with `torchlayers.infer`\nfunction:\n\n```python\n # Class defined with in_features\n # It might be a good practice to use _ prefix and Impl as postfix\n # to differentiate from shape inferable version\nclass _MyLinearImpl(torch.nn.Module):\n    def __init__(self, in_features: int, out_features: int):\n        super().__init__()\n        self.weight = torch.nn.Parameter(torch.randn(out_features, in_features))\n        self.bias = torch.nn.Parameter(torch.randn(out_features))\n\n    def forward(self, inputs):\n        return torch.nn.functional.linear(inputs, self.weight, self.bias)\n\nMyLinear = torchlayers.infer(_MyLinearImpl)\n\n# Build and use just like any other layer in this library\nlayer =torchlayers.build(MyLinear(out_features=32), torch.randn(1, 64))\nlayer(torch.randn(1, 64))\n```\n\nBy default `inputs.shape[1]` will be used as `in_features` value\nduring initial `forward` pass. If you wish to use different `index` (e.g. to infer using\n`inputs.shape[3]`) use `MyLayer = torchlayers.infer(_MyLayerImpl, index=3)` as a decorator.\n\n## Autoencoder with inverted residual bottleneck and pixel shuffle\n\nPlease check code comments and [__documentation__](https://img.shields.io/static/v1?label=&message=docs&color=EE4C2C&style=for-the-badge)\nif needed. If you are unsure what autoencoder is you could see\n[__this example blog post__](https://towardsdatascience.com/auto-encoder-what-is-it-and-what-is-it-used-for-part-1-3e5c6f017726).\n\nBelow is a convolutional denoising autoencoder example for `ImageNet`-like images.\nThink of it like a demonstration of capabilities of different layers\nand building blocks provided by `torchlayers`.\n\n\n```python\n# Input - 3 x 256 x 256 for ImageNet reconstruction\nclass AutoEncoder(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.encoder = torchlayers.Sequential(\n            torchlayers.StandardNormalNoise(),  # Apply noise to input images\n            torchlayers.Conv(64, kernel_size=7),\n            torchlayers.activations.Swish(),  # Direct access to module .activations\n            torchlayers.InvertedResidualBottleneck(squeeze_excitation=False),\n            torchlayers.AvgPool(),  # shape 64 x 128 x 128, kernel_size=2 by default\n            torchlayers.HardSwish(),  # Access simply through torchlayers\n            torchlayers.SeparableConv(128),  # Up number of channels to 128\n            torchlayers.InvertedResidualBottleneck(),  # Default with squeeze excitation\n            torch.nn.ReLU(),\n            torchlayers.AvgPool(),  # shape 128 x 64 x 64, kernel_size=2 by default\n            torchlayers.DepthwiseConv(256),  # DepthwiseConv easier to use\n            # Pass input thrice through the same weights like in PolyNet\n            torchlayers.Poly(torchlayers.InvertedResidualBottleneck(), order=3),\n            torchlayers.ReLU(),  # all torch.nn can be accessed via torchlayers\n            torchlayers.MaxPool(),  # shape 256 x 32 x 32\n            torchlayers.Fire(out_channels=512),  # shape 512 x 32 x 32\n            torchlayers.SqueezeExcitation(hidden=64),\n            torchlayers.InvertedResidualBottleneck(),\n            torchlayers.MaxPool(),  # shape 512 x 16 x 16\n            torchlayers.InvertedResidualBottleneck(squeeze_excitation=False),\n            # Randomly switch off the last two layers with 0.5 probability\n            torchlayers.StochasticDepth(\n                torch.nn.Sequential(\n                    torchlayers.InvertedResidualBottleneck(squeeze_excitation=False),\n                    torchlayers.InvertedResidualBottleneck(squeeze_excitation=False),\n                ),\n                p=0.5,\n            ),\n            torchlayers.AvgPool(),  # shape 512 x 8 x 8\n        )\n\n        # This one is more \"standard\"\n        self.decoder = torchlayers.Sequential(\n            torchlayers.Poly(torchlayers.InvertedResidualBottleneck(), order=2),\n            # Has ICNR initialization by default after calling `build`\n            torchlayers.ConvPixelShuffle(out_channels=512, upscale_factor=2),\n            # Shape 512 x 16 x 16 after PixelShuffle\n            torchlayers.Poly(torchlayers.InvertedResidualBottleneck(), order=3),\n            torchlayers.ConvPixelShuffle(out_channels=256, upscale_factor=2),\n            # Shape 256 x 32 x 32\n            torchlayers.Poly(torchlayers.InvertedResidualBottleneck(), order=3),\n            torchlayers.ConvPixelShuffle(out_channels=128, upscale_factor=2),\n            # Shape 128 x 64 x 64\n            torchlayers.Poly(torchlayers.InvertedResidualBottleneck(), order=4),\n            torchlayers.ConvPixelShuffle(out_channels=64, upscale_factor=2),\n            # Shape 64 x 128 x 128\n            torchlayers.InvertedResidualBottleneck(),\n            torchlayers.Conv(256),\n            torchlayers.Dropout(),  # Defaults to 0.5 and Dropout2d for images\n            torchlayers.Swish(),\n            torchlayers.InstanceNorm(),\n            torchlayers.ConvPixelShuffle(out_channels=32, upscale_factor=2),\n            # Shape 32 x 256 x 256\n            torchlayers.Conv(16),\n            torchlayers.Swish(),\n            torchlayers.Conv(3),\n            # Shape 3 x 256 x 256\n        )\n\n    def forward(self, inputs):\n        return self.decoder(self.encoder(inputs))\n```\n\nNow one can instantiate the module and use it with `torch.nn.MSELoss` as per usual.\n\n```python\nautoencoder = torchlayers.build(AutoEncoder(), torch.randn(1, 3, 256, 256))\n```\n\n# Installation\n\n## [pip](<https://pypi.org/project/torchlayers/>)\n\n### Latest release:\n\n```shell\npip install --user torchlayers\n```\n\n### Nightly:\n\n```shell\npip install --user torchlayers-nightly\n```\n\n## [Docker](https://cloud.docker.com/repository/docker/szymonmaszke/torchlayers)\n\n__CPU standalone__ and various versions of __GPU enabled__ images are available\nat [dockerhub](https://cloud.docker.com/repository/docker/szymonmaszke/torchlayers).\n\nFor CPU quickstart, issue:\n\n```shell\ndocker pull szymonmaszke/torchlayers:18.04\n```\n\nNightly builds are also available, just prefix tag with `nightly_`. If you are going for `GPU` image make sure you have\n[nvidia/docker](https://github.com/NVIDIA/nvidia-docker) installed and it's runtime set.\n\n# Contributing\n\nIf you find issue or would like to see some functionality (or implement one), please [open new Issue](https://help.github.com/en/articles/creating-an-issue) or [create Pull Request](https://help.github.com/en/articles/creating-a-pull-request-from-a-fork).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pypa/torchlayers",
    "keywords": "pytorch keras input inference automatic shape layers sota custom imagenet resnet efficientnet",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchlayers",
    "package_url": "https://pypi.org/project/torchlayers/",
    "platform": "",
    "project_url": "https://pypi.org/project/torchlayers/",
    "project_urls": {
      "Documentation": "https://szymonmaszke.github.io/torchlayers/#torchlayers",
      "Homepage": "https://github.com/pypa/torchlayers",
      "Issues": "https://github.com/szymonmaszke/torchlayers/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc",
      "Website": "https://szymonmaszke.github.io/torchlayers"
    },
    "release_url": "https://pypi.org/project/torchlayers/0.1.1/",
    "requires_dist": [
      "torch (>=1.3.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Input shape inference and SOTA custom layers for PyTorch.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6963405,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c73e991c901501dc56b5c19cc7eb8f99523f57cd687fd1dc8b321569aa4d3ec9",
          "md5": "f709a61b36771384d6c6b16f64ca72aa",
          "sha256": "785dd215dd0ca774f776465781ba25bb285245f38ed6ca7dc4ce121012e5ffd2"
        },
        "downloads": -1,
        "filename": "torchlayers-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f709a61b36771384d6c6b16f64ca72aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 36187,
        "upload_time": "2020-03-27T22:11:33",
        "upload_time_iso_8601": "2020-03-27T22:11:33.574042Z",
        "url": "https://files.pythonhosted.org/packages/c7/3e/991c901501dc56b5c19cc7eb8f99523f57cd687fd1dc8b321569aa4d3ec9/torchlayers-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fe571dae7f930afbdccff07a57ba4dcb74ea3602aadc4d6578eb6843f85f61d",
          "md5": "38fceba411a136071bba89b996cfae53",
          "sha256": "fbeb3ba773a74bd38154a9e1b90aa8fc6b9d505cdcba3f15dd311af2a4593565"
        },
        "downloads": -1,
        "filename": "torchlayers-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "38fceba411a136071bba89b996cfae53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30538,
        "upload_time": "2020-03-27T22:11:34",
        "upload_time_iso_8601": "2020-03-27T22:11:34.902275Z",
        "url": "https://files.pythonhosted.org/packages/9f/e5/71dae7f930afbdccff07a57ba4dcb74ea3602aadc4d6578eb6843f85f61d/torchlayers-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c73e991c901501dc56b5c19cc7eb8f99523f57cd687fd1dc8b321569aa4d3ec9",
        "md5": "f709a61b36771384d6c6b16f64ca72aa",
        "sha256": "785dd215dd0ca774f776465781ba25bb285245f38ed6ca7dc4ce121012e5ffd2"
      },
      "downloads": -1,
      "filename": "torchlayers-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f709a61b36771384d6c6b16f64ca72aa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 36187,
      "upload_time": "2020-03-27T22:11:33",
      "upload_time_iso_8601": "2020-03-27T22:11:33.574042Z",
      "url": "https://files.pythonhosted.org/packages/c7/3e/991c901501dc56b5c19cc7eb8f99523f57cd687fd1dc8b321569aa4d3ec9/torchlayers-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9fe571dae7f930afbdccff07a57ba4dcb74ea3602aadc4d6578eb6843f85f61d",
        "md5": "38fceba411a136071bba89b996cfae53",
        "sha256": "fbeb3ba773a74bd38154a9e1b90aa8fc6b9d505cdcba3f15dd311af2a4593565"
      },
      "downloads": -1,
      "filename": "torchlayers-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "38fceba411a136071bba89b996cfae53",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 30538,
      "upload_time": "2020-03-27T22:11:34",
      "upload_time_iso_8601": "2020-03-27T22:11:34.902275Z",
      "url": "https://files.pythonhosted.org/packages/9f/e5/71dae7f930afbdccff07a57ba4dcb74ea3602aadc4d6578eb6843f85f61d/torchlayers-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}