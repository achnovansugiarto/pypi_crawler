{
  "info": {
    "author": "HansBug",
    "author_email": "hansbug@buaa.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# argsloader\n\n[![PyPI](https://img.shields.io/pypi/v/argsloader)](https://pypi.org/project/argsloader/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/argsloader)](https://pypi.org/project/argsloader/)\n![Loc](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/HansBug/71f7be2801b7777b3708a0bc278d43c2/raw/loc.json)\n![Comments](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/HansBug/71f7be2801b7777b3708a0bc278d43c2/raw/comments.json)\n\n[![Docs Deploy](https://github.com/HansBug/argsloader/workflows/Docs%20Deploy/badge.svg)](https://github.com/HansBug/argsloader/actions?query=workflow%3A%22Docs+Deploy%22)\n[![Code Test](https://github.com/HansBug/argsloader/workflows/Code%20Test/badge.svg)](https://github.com/HansBug/argsloader/actions?query=workflow%3A%22Code+Test%22)\n[![Badge Creation](https://github.com/HansBug/argsloader/workflows/Badge%20Creation/badge.svg)](https://github.com/HansBug/argsloader/actions?query=workflow%3A%22Badge+Creation%22)\n[![Package Release](https://github.com/HansBug/argsloader/workflows/Package%20Release/badge.svg)](https://github.com/HansBug/argsloader/actions?query=workflow%3A%22Package+Release%22)\n[![codecov](https://codecov.io/gh/HansBug/argsloader/branch/main/graph/badge.svg?token=XJVDP4EFAT)](https://codecov.io/gh/HansBug/argsloader)\n\n[![GitHub stars](https://img.shields.io/github/stars/HansBug/argsloader)](https://github.com/HansBug/argsloader/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/HansBug/argsloader)](https://github.com/HansBug/argsloader/network)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/m/HansBug/argsloader)\n[![GitHub issues](https://img.shields.io/github/issues/HansBug/argsloader)](https://github.com/HansBug/argsloader/issues)\n[![GitHub pulls](https://img.shields.io/github/issues-pr/HansBug/argsloader)](https://github.com/HansBug/argsloader/pulls)\n[![Contributors](https://img.shields.io/github/contributors/HansBug/argsloader)](https://github.com/HansBug/argsloader/graphs/contributors)\n[![GitHub license](https://img.shields.io/github/license/HansBug/argsloader)](https://github.com/HansBug/argsloader/blob/master/LICENSE)\n\nConfiguration Parsing and Management Based on [chainloader](https://github.com/HansBug/chainloader).\n\nThe argsloader library's main goal is to extract and change configuration data before implementing it using its computational mechanism:\n\n* Reusability of local configuration modules\n\n* Scalability and composition of configuration components\n\n* Constructing complicated configuration data validation quickly\n\n\n## Installation\n\nYou can simply install it with `pip` command line from the official PyPI site.\n\n```shell\npip install argsloader\n```\n\nFor more information about installation, you can refer to [Installation](https://HansBug.github.io/argsloader/main/tutorials/installation/index.html).\n\n## Quick Start\n\n### Painless Try\n\nA simple usage is like above\n\n```python\nfrom argsloader.units import yesno, number, is_type, interval\n\nif __name__ == '__main__':\n    yn = yesno()  # yes-no option\n    print(yn('yes'))  # True\n    print(yn('no'))  # False\n    print(yn(True))  # True\n    print(yn(False))  # False\n\n    num = number()  # any number\n    print(num(1))  # 1\n    print(num('1.2'))  # 1.2\n    print(num('0x4f'))  # 79\n\n    int_ = number() >> is_type(int)  # any int number\n    print(num(1))  # 1\n    print(num('0x4f'))  # 79\n    print(num(1.2))  # TypeError\n\n    val_ = number() >> interval.LR(0, 10)  # number within [0, 10]\n    print(num(1))  # 1\n    print(num(1.2))  # 1.2\n    print(num(11))  # ValueError\n\n```\n\nAfter the unit is built, it can be used to transform and validate the given value.\n\n### Full Validation\n\nSometimes, there may be multiple errors in the given value, but if you directly call corresponding loader (i.e. call the pre-defined `__call__` method), only the first error will be raised.\n\n```python\nfrom argsloader.units import is_type, interval\n\nif __name__ == '__main__':\n    in_ = is_type(int) & interval.LR(0, 10)  # int within [0, 10]\n    print(in_(1))  # OK\n    print(in_(10))  # OK\n    print(in_(11.2))  # not an int, not in [0, 10] neither\n```\n\nThe output should be\n\n```\n1\n10\nTraceback (most recent call last):\n  File \"test_main.py\", line 7, in <module>\n    print(in_(11.2))  # not an int, not in [0, 10] neither\n  File \"/home/hansbug/projects/argsloader/argsloader/units/base.py\", line 237, in __call__\n    return self.call(v, 'FIRST')\n  File \"/home/hansbug/projects/argsloader/argsloader/units/base.py\", line 249, in call\n    return self._process(PValue(v, ())).act(err_mode)\n  File \"/home/hansbug/projects/argsloader/argsloader/base/result.py\", line 264, in act\n    raise self._first_error()\n  File \"/home/hansbug/projects/argsloader/argsloader/units/build.py\", line 80, in _easy_process\n    pres = self._transform(v, pvalues)\n  File \"/home/hansbug/projects/argsloader/argsloader/units/build.py\", line 105, in _transform\n    v.value, nested_map(lambda x: x.value, pres)\n  File \"/home/hansbug/projects/argsloader/argsloader/units/type.py\", line 43, in _calculate\n    raise TypeError(f'Value type not match - {_tname(type_)} expected but {_tname(type(v))} found.')\nTypeParseError: Value type not match - int expected but float found.\n```\n\n\n\nTo resolve this problem, you can use method `call` to show them all.\n\n```python\nfrom argsloader.units import is_type, interval\n\nif __name__ == '__main__':\n    in_ = is_type(int) & interval.LR(0, 10)  # int within [0, 10]\n    print(in_.call(1))  # OK\n    print(in_.call(10))  # OK\n    print(in_.call(11.2))  # not an int, not in [0, 10] neither\n\n```\n\nThe output should be\n\n```\n1\n10\nTraceback (most recent call last):\n  File \"test_main.py\", line 7, in <module>\n    print(in_.call(11.2))\n  File \"/home/hansbug/projects/argsloader/argsloader/units/base.py\", line 249, in call\n    return self._process(PValue(v, ())).act(err_mode)\n  File \"/home/hansbug/projects/argsloader/argsloader/base/result.py\", line 268, in act\n    raise self._full_error()\nargsloader.base.exception.MultipleParseError: (2 errors)\n  <root>: TypeParseError: Value type not match - int expected but float found.\n  <root>: ValueParseError: Value not in interval - [0, 10] expected but 11.2 found.\n```\n\n\n\nFor further examples and best practice, see\n\n* [Cheat Sheet of Units (still under developing)](https://hansbug.github.io/argsloader/main/tutorials/cheat_sheet/index.html)\n* [Example of C51 Configuration](https://hansbug.github.io/argsloader/main/best_practice/c51/index.html)\n* [Example of Subprocess Env Manager](https://hansbug.github.io/argsloader/main/best_practice/subprocess_env_manager/index.html)\n* [Example of One vs One Configuration](https://hansbug.github.io/argsloader/main/best_practice/one_vs_one/index.html)\n\n## Contributing\n\nWe appreciate all contributions to improve `argsloader`, both logic and system designs. Please refer to CONTRIBUTING.md for more guides.\n\n## License\n\n`argsloader` released under the Apache 2.0 license.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HansBug/argsloader",
    "keywords": "Configuration Parsing and Management Based on ChainLoader",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argsloader",
    "package_url": "https://pypi.org/project/argsloader/",
    "platform": null,
    "project_url": "https://pypi.org/project/argsloader/",
    "project_urls": {
      "Homepage": "https://github.com/HansBug/argsloader"
    },
    "release_url": "https://pypi.org/project/argsloader/0.0.1/",
    "requires_dist": [
      "hbutils (<1,>=0.4.7)",
      "cachetools (>=4.2.4)",
      "inflection (>=0.5.1)",
      "wordninja (>=2.0.0)",
      "enum-tools (>=0.8.0)",
      "deprecated (>=1.2.13)",
      "Jinja2 (~=3.0.0) ; extra == 'doc'",
      "sphinx (~=3.2.0) ; extra == 'doc'",
      "sphinx-rtd-theme (~=0.4.3) ; extra == 'doc'",
      "enum-tools ; extra == 'doc'",
      "sphinx-toolbox ; extra == 'doc'",
      "plantumlcli (>=0.0.2) ; extra == 'doc'",
      "packaging ; extra == 'doc'",
      "sphinx-multiversion (~=0.2.4) ; extra == 'doc'",
      "where (~=1.0.2) ; extra == 'doc'",
      "easydict (<2,>=1.7) ; extra == 'doc'",
      "numpy (<2,>=1.19) ; extra == 'doc'",
      "coverage (>=5) ; extra == 'test'",
      "mock (>=4.0.3) ; extra == 'test'",
      "flake8 (~=3.5) ; extra == 'test'",
      "pytest (~=6.2.5) ; extra == 'test'",
      "pytest-cov (~=3.0.0) ; extra == 'test'",
      "pytest-mock (~=3.6.1) ; extra == 'test'",
      "pytest-xdist (>=1.34.0) ; extra == 'test'",
      "pytest-rerunfailures (~=10.2) ; extra == 'test'",
      "pytest-timeout (~=2.0.2) ; extra == 'test'",
      "pytest-benchmark (~=3.4.0) ; extra == 'test'",
      "easydict (<2,>=1.7) ; extra == 'test'",
      "testtools (>=2) ; extra == 'test'",
      "numpy (<2,>=1.19) ; extra == 'test'",
      "where (>=1.0.2) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Configuration Parsing and Management Based on ChainLoader",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13321561,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42d0ce5261fa3036087598ea8d551d5912d232236f78b4050ec808ef0574753c",
          "md5": "f5d3540054373e4a58b0b74c919ea4fa",
          "sha256": "2aa9114e1bb0b1ef933c18bec8c88a21618139b9869e21e45a05f190a180dbbf"
        },
        "downloads": -1,
        "filename": "argsloader-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5d3540054373e4a58b0b74c919ea4fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 47025,
        "upload_time": "2022-03-28T12:13:30",
        "upload_time_iso_8601": "2022-03-28T12:13:30.946888Z",
        "url": "https://files.pythonhosted.org/packages/42/d0/ce5261fa3036087598ea8d551d5912d232236f78b4050ec808ef0574753c/argsloader-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15d68b7e265db2f2087cd42c57011ab38e648b761e7a87cf4a97eb323304924a",
          "md5": "14c564a41651b8a72b98505bc7293f6a",
          "sha256": "cb4db1b853c2e522f52afcfec413040d906b1f90ee44f3b1b803933e0ad48afd"
        },
        "downloads": -1,
        "filename": "argsloader-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "14c564a41651b8a72b98505bc7293f6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40183,
        "upload_time": "2022-03-28T12:13:32",
        "upload_time_iso_8601": "2022-03-28T12:13:32.558756Z",
        "url": "https://files.pythonhosted.org/packages/15/d6/8b7e265db2f2087cd42c57011ab38e648b761e7a87cf4a97eb323304924a/argsloader-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42d0ce5261fa3036087598ea8d551d5912d232236f78b4050ec808ef0574753c",
        "md5": "f5d3540054373e4a58b0b74c919ea4fa",
        "sha256": "2aa9114e1bb0b1ef933c18bec8c88a21618139b9869e21e45a05f190a180dbbf"
      },
      "downloads": -1,
      "filename": "argsloader-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5d3540054373e4a58b0b74c919ea4fa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 47025,
      "upload_time": "2022-03-28T12:13:30",
      "upload_time_iso_8601": "2022-03-28T12:13:30.946888Z",
      "url": "https://files.pythonhosted.org/packages/42/d0/ce5261fa3036087598ea8d551d5912d232236f78b4050ec808ef0574753c/argsloader-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15d68b7e265db2f2087cd42c57011ab38e648b761e7a87cf4a97eb323304924a",
        "md5": "14c564a41651b8a72b98505bc7293f6a",
        "sha256": "cb4db1b853c2e522f52afcfec413040d906b1f90ee44f3b1b803933e0ad48afd"
      },
      "downloads": -1,
      "filename": "argsloader-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "14c564a41651b8a72b98505bc7293f6a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 40183,
      "upload_time": "2022-03-28T12:13:32",
      "upload_time_iso_8601": "2022-03-28T12:13:32.558756Z",
      "url": "https://files.pythonhosted.org/packages/15/d6/8b7e265db2f2087cd42c57011ab38e648b761e7a87cf4a97eb323304924a/argsloader-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}