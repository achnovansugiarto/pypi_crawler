{
  "info": {
    "author": "Fisherman's Friend",
    "author_email": "fish@waifu.club",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# TDT4160 1.1.3\n\n`tdt4160` is an emulator for IJVM-microinstructions and pseudo-assembly, as \nis commonly seen in the [NTNU subject TDT4160](https://www.ntnu.no/studier/emner/TDT4160),\nparticularly on its exams.\n\nThere are two main components to this package. `tdt4160.assembly` and `tdt4160.ijvm`.\nBoth function by letting you set registries, memory addresses and queue instructions\nbefore executing them. During execution, each individual instruction is stepped through,\nwith lots of information printed so you can easily see what's going on. Technically\nrequires Python >= 3.7 to be conformant, but should probably work with any version >= 3.6. \nThere are no external dependencies besides the standard library.\n\n[View on PyPI](http://pypi.python.org/pypi/tdt4160) |\n[Fork me on gitgud](https://gitgud.io/fish/tdt4160)\n\n\n## Installation\n\nTo install `tdt4160`, run:\n\n```\n$ python3 -m pip install tdt4160\n```\n\nor to install from source:\n\n```\n$ python3 setup.py install\n```\n\n## Introduction\n\nDue to COVID-19, most NTNU classes switched from exams in exam halls with no\nexternal help/tools allowed to home exams with all tools allowed. I thought it\nwould be pretty funny if you could just automate the exams now that you're\nallowed to use tools.\n\nI was right, it was pretty funny.\n\n## Example usage\n\n### Pseudo-assembly\n```python\n# This example from the Autumn 2020 exam, task 6\n\nfrom tdt4160.assembly import *\n\n# First set the registries as specified in the task\nset_asm_registries(\n    R0=0xFFFF0000,\n    R7=0xFFFF0001,\n    R8=0xFFFF0002,\n    R9=0xFFFF0003,\n)\n\n# Then set the memory addresses as specified\nset_asm_addresses({\n    0xFFFF0000: 0x00000001,\n    0xFFFF0001: 0x00000002,\n    0xFFFF0002: 0x00000003,\n    0xFFFF0003: 0x00000004,\n    0xFFFF0004: 0xFFFF0005\n})\n\n# Queue all the instructions to be performed\nassemble(0x0000FFFE, LOAD, R8, R0)\nassemble(0x0000FFFF, MOVC, R7, 1)\nassemble(0x00010000, ADD, R0, R0, R7)\nassemble(0x00010001, LOAD, R9, R0)\nassemble(0x00010002, MUL, R9, R8, R9)\nassemble(0x00010003, ADD, R9, R9, R8)\nassemble(0x00010004, ADD, R0, R0, R7)\nassemble(0x00010005, LOAD, R8, R0)\nassemble(0x00010006, ADD, R8, R9, R8)\n\n# Then actually run them\nexecute_assembly(0x0000FFFE)\n\n# This function prints all the registries used in the task\n# In this case, we're looking for R8, which is 6\nprint_asm_regs()\n```\n\nThis outputs the following:\n\n```\n=============================== MEMORY: 0000FFFE ===============================\nINSTRUCTION: LOAD R8=FFFF0002, R0=FFFF0000\nLoaded value 00000001 into R8 from address FFFF0000\n=============================== MEMORY: 0000FFFF ===============================\nINSTRUCTION: MOVC R7=FFFF0001, Constant=00000001\nMoved value 00000001 into R7\n=============================== MEMORY: 00010000 ===============================\nINSTRUCTION: ADD R0=FFFF0000, R0=FFFF0000, R7=00000001\nAdded R0=FFFF0000+R7=00000001\nResult FFFF0001 stored in R0\n=============================== MEMORY: 00010001 ===============================\nINSTRUCTION: LOAD R9=FFFF0003, R0=FFFF0001\nLoaded value 00000002 into R9 from address FFFF0001\n=============================== MEMORY: 00010002 ===============================\nINSTRUCTION: MUL R9=00000002, R8=00000001, R9=00000002\nMultiplied R8=00000001*R9=00000002\nResult 00000002 stored in R9\n=============================== MEMORY: 00010003 ===============================\nINSTRUCTION: ADD R9=00000002, R9=00000002, R8=00000001\nAdded R9=00000002+R8=00000001\nResult 00000003 stored in R9\n=============================== MEMORY: 00010004 ===============================\nINSTRUCTION: ADD R0=FFFF0001, R0=FFFF0001, R7=00000001\nAdded R0=FFFF0001+R7=00000001\nResult FFFF0002 stored in R0\n=============================== MEMORY: 00010005 ===============================\nINSTRUCTION: LOAD R8=00000001, R0=FFFF0002\nLoaded value 00000003 into R8 from address FFFF0002\n=============================== MEMORY: 00010006 ===============================\nINSTRUCTION: ADD R8=00000003, R9=00000003, R8=00000003\nAdded R9=00000003+R8=00000003\nResult 00000006 stored in R8\n================================================================================\nR0  = 0xFFFF0002\nR7  = 0x00000001\nR8  = 0x00000006\nR9  = 0x00000003\n```\n\n### IJVM\n```python\n# This example from the Autumn 2020 exam, task 4\n\nfrom tdt4160.ijvm import *\n\n# Set the registries as specified\nset_ijvm_registries(\n    SP=0x10101010,\n    LV=0x30000000,\n    CPP=0x10000001,\n    TOS=0xFF000000,\n    OPC=0xABCDE000,\n    H=0x12345678,\n    MAR=0xA5A5A5A5,\n    MDR=0x5A5A5A5A,\n    PC=0x55AA55AA\n)\n\n# Queue the microinstructions to run\nijvm(0b000001000, 0b000001001, 0b000, 0b00010000, 0b100000000, 0b000, 0b1111)\nijvm(0b000001001, 0b000001011, 0b000, 0b00111001, 0b100000000, 0b000, 0b1100)\nijvm(0b000001010, 0b000010000, 0b001, 0b01011000, 0b010101010, 0b000, 0b0001)\nijvm(0b000001011, 0b000001100, 0b000, 0b00111100, 0b100000000, 0b000, 0b0101)\nijvm(0b000001100, 0b000000000, 0b000, 0b00111100, 0b000010000, 0b000, 0b0101)\nijvm(0b000001101, 0b000001110, 0b000, 0b00110010, 0b001000101, 0b100, 0b1000)\n\n# Actually run them\nexecute_ijvm(0b000001000)\n\n# Print the value of all the registries after execution\n# In this case, we're looking for several registries, so just check the ones you want\nprint_all_ijvm()\n```\n\nThis outputs the following:\n\n```\n======================= Instruction address: 0x000001000 =======================\nnext=0b000001001 JAM=0b000 ALU=0b00010000 C=0b100000000 Mem=0b000 B=0b1111\nALU is 0b010000, function: 0\nResult of operation: 0x00000000\nFinal result: 0x00000000\nC is 0b100000000\nThe following registries take the value of 0x00000000\nH\nMem is 0b000\nMem is 0, don't touch memory\nNext instruction: 0b000001001\n======================= Instruction address: 0x000001001 =======================\nnext=0b000001011 JAM=0b000 ALU=0b00111001 C=0b100000000 Mem=0b000 B=0b1100\nALU is 0b111001, function: A + 1\nA is always H=0x00000000\nResult of operation: 0x00000001\nFinal result: 0x00000001\nC is 0b100000000\nThe following registries take the value of 0x00000001\nH\nMem is 0b000\nMem is 0, don't touch memory\nNext instruction: 0b000001011\n======================= Instruction address: 0x000001011 =======================\nnext=0b000001100 JAM=0b000 ALU=0b00111100 C=0b100000000 Mem=0b000 B=0b0101\nALU is 0b111100, function: A + B\nA is always H=0x00000001\nB is 0b0101 (5), yielding LV=0x30000000\nResult of operation: 0x30000001\nFinal result: 0x30000001\nC is 0b100000000\nThe following registries take the value of 0x30000001\nH\nMem is 0b000\nMem is 0, don't touch memory\nNext instruction: 0b000001100\n======================= Instruction address: 0x000001100 =======================\nnext=0b000000000 JAM=0b000 ALU=0b00111100 C=0b000010000 Mem=0b000 B=0b0101\nALU is 0b111100, function: A + B\nA is always H=0x30000001\nB is 0b0101 (5), yielding LV=0x30000000\nResult of operation: 0x60000001\nFinal result: 0x60000001\nC is 0b000010000\nThe following registries take the value of 0x60000001\nLV\nMem is 0b000\nMem is 0, don't touch memory\nNext instruction: 0b000000000\n================================================================================\nNext instruction is 0. We're done\nSP = 0x10101010\nLV = 0x60000001\nCPP = 0x10000001\nTOS = 0xFF000000\nOPC = 0xABCDE000\nH = 0x30000001\nMAR = 0xA5A5A5A5\nMDR = 0x5A5A5A5A\nPC = 0x55AA55AA\nMBR = 0xUNINITIALIZED\nMBRU = 0xUNINITIALIZED\nMPC = 0x00000000\n```\n\nNote the uninitialized values were never touched, so they remain uninitialized.\nThat's okay as long as we don't use them after.\n\n# På Norsk\n\n`tdt4160` er en emulator for IJVM-mikronstruksjoner og pseudo-assemblykode,\nsom den man ofte ser i [NTNU faget TDT4160](https://www.ntnu.no/studier/emner/TDT4160)\nsine eksamener.\n\nDet er to hoveddeler i pakkken. `tdt4160.assembly` og `tdt4160.ijvm`.\nBegge lar deg sette opp registre, minneaddresser, og sette instruksjoner i kø,\nfør de blir utført. Mens instruksjonene kjører printes det masse informasjon ut\nom hva som faktisk utføres, slik at det blir lettere å se hva som skjer. Pakken\nkrever teknisk sett en Pythonversjon som er >= 3.7, men bør fungere fint med alt >= 3.6.\nPakken har ingen andre avhengigheter enn standardbiblioteket.\n\n[Se på PyPI](http://pypi.python.org/pypi/tdt4160) |\n[Gafle meg på gitgud](https://gitgud.io/fish/tdt4160)\n\n\n## Installering\n\nFor å installere `tdt4160`, kjør:\n\n```\n$ python3 -m pip install tdt4160\n```\n\neller for å installere fra kildekode:\n\n```\n$ python3 setup.py install\n```\n\n## Introduksjon\n\nPga. COVID-19 har de fleste fag på NTNU byttet fra eksamen i eksamenshaller\nuten hjelpemidler til hjemmeeksamener med alle hjelpemidler tillat. Jeg\nsyntes det hadde vært litt morsomt hvis man bare hadde noe verktøy som\ngjorde hele eksamenen for deg, nå som du kan bruke det du vil.\n\nHadde rett, det var ganske morsomt.\n\n## Eksempel\n\n### Pseudo-assembly\n```python\n# Dette eksempelet er fra Høsteksamen 2020, oppgave 6\n\nfrom tdt4160.assembly import *\n\n# Først, sett opp alle registre som det står i oppgaven\nset_asm_registries(\n    R0=0xFFFF0000,\n    R7=0xFFFF0001,\n    R8=0xFFFF0002,\n    R9=0xFFFF0003,\n)\n\n# Så sett opp alle minneaddresser\nset_asm_addresses({\n    0xFFFF0000: 0x00000001,\n    0xFFFF0001: 0x00000002,\n    0xFFFF0002: 0x00000003,\n    0xFFFF0003: 0x00000004,\n    0xFFFF0004: 0xFFFF0005\n})\n\n# Legg alle instruksjonene i kø for utførsel\nassemble(0x0000FFFE, LOAD, R8, R0)\nassemble(0x0000FFFF, MOVC, R7, 1)\nassemble(0x00010000, ADD, R0, R0, R7)\nassemble(0x00010001, LOAD, R9, R0)\nassemble(0x00010002, MUL, R9, R8, R9)\nassemble(0x00010003, ADD, R9, R9, R8)\nassemble(0x00010004, ADD, R0, R0, R7)\nassemble(0x00010005, LOAD, R8, R0)\nassemble(0x00010006, ADD, R8, R9, R8)\n\n# Kjør instruksjonene\nexecute_assembly(0x0000FFFE)\n\n\n# Denne funksjonen printer alle registre som ble brukt i utførselen\n# I dette tilfellet ser vi etter R8, som bør være 6\nprint_asm_regs()\n```\n\nKoden spytter ut følgende:\n\n```\n=============================== MEMORY: 0000FFFE ===============================\nINSTRUCTION: LOAD R8=FFFF0002, R0=FFFF0000\nLoaded value 00000001 into R8 from address FFFF0000\n=============================== MEMORY: 0000FFFF ===============================\nINSTRUCTION: MOVC R7=FFFF0001, Constant=00000001\nMoved value 00000001 into R7\n=============================== MEMORY: 00010000 ===============================\nINSTRUCTION: ADD R0=FFFF0000, R0=FFFF0000, R7=00000001\nAdded R0=FFFF0000+R7=00000001\nResult FFFF0001 stored in R0\n=============================== MEMORY: 00010001 ===============================\nINSTRUCTION: LOAD R9=FFFF0003, R0=FFFF0001\nLoaded value 00000002 into R9 from address FFFF0001\n=============================== MEMORY: 00010002 ===============================\nINSTRUCTION: MUL R9=00000002, R8=00000001, R9=00000002\nMultiplied R8=00000001*R9=00000002\nResult 00000002 stored in R9\n=============================== MEMORY: 00010003 ===============================\nINSTRUCTION: ADD R9=00000002, R9=00000002, R8=00000001\nAdded R9=00000002+R8=00000001\nResult 00000003 stored in R9\n=============================== MEMORY: 00010004 ===============================\nINSTRUCTION: ADD R0=FFFF0001, R0=FFFF0001, R7=00000001\nAdded R0=FFFF0001+R7=00000001\nResult FFFF0002 stored in R0\n=============================== MEMORY: 00010005 ===============================\nINSTRUCTION: LOAD R8=00000001, R0=FFFF0002\nLoaded value 00000003 into R8 from address FFFF0002\n=============================== MEMORY: 00010006 ===============================\nINSTRUCTION: ADD R8=00000003, R9=00000003, R8=00000003\nAdded R9=00000003+R8=00000003\nResult 00000006 stored in R8\n================================================================================\nR0  = 0xFFFF0002\nR7  = 0x00000001\nR8  = 0x00000006\nR9  = 0x00000003\n```\n\n### IJVM\n```python\n# Dette eksempelet er fra Høsteksamen 2020, oppgave 4\n\nfrom tdt4160.ijvm import *\n\n# Sett opp registre som det står i oppgaven\nset_ijvm_registries(\n    SP=0x10101010,\n    LV=0x30000000,\n    CPP=0x10000001,\n    TOS=0xFF000000,\n    OPC=0xABCDE000,\n    H=0x12345678,\n    MAR=0xA5A5A5A5,\n    MDR=0x5A5A5A5A,\n    PC=0x55AA55AA\n)\n\n# Skriv inn alle mikronstruksjonene\nijvm(0b000001000, 0b000001001, 0b000, 0b00010000, 0b100000000, 0b000, 0b1111)\nijvm(0b000001001, 0b000001011, 0b000, 0b00111001, 0b100000000, 0b000, 0b1100)\nijvm(0b000001010, 0b000010000, 0b001, 0b01011000, 0b010101010, 0b000, 0b0001)\nijvm(0b000001011, 0b000001100, 0b000, 0b00111100, 0b100000000, 0b000, 0b0101)\nijvm(0b000001100, 0b000000000, 0b000, 0b00111100, 0b000010000, 0b000, 0b0101)\nijvm(0b000001101, 0b000001110, 0b000, 0b00110010, 0b001000101, 0b100, 0b1000)\n\n# Kjør instruksjonene\nexecute_ijvm(0b000001000)\n\n# Skriv ut verdien til alle registrene etter at programmet har kjørt\n# I dette tilfellet ser vi etter flere registre, plukk ut de du vil\nprint_all_ijvm()\n```\n\nDenne koden gir:\n\n```Python\n======================= Instruction address: 0x000001000 =======================\nnext=0b000001001 JAM=0b000 ALU=0b00010000 C=0b100000000 Mem=0b000 B=0b1111\nALU is 0b010000, function: 0\nResult of operation: 0x00000000\nFinal result: 0x00000000\nC is 0b100000000\nThe following registries take the value of 0x00000000\nH\nMem is 0b000\nMem is 0, don't touch memory\nNext instruction: 0b000001001\n======================= Instruction address: 0x000001001 =======================\nnext=0b000001011 JAM=0b000 ALU=0b00111001 C=0b100000000 Mem=0b000 B=0b1100\nALU is 0b111001, function: A + 1\nA is always H=0x00000000\nResult of operation: 0x00000001\nFinal result: 0x00000001\nC is 0b100000000\nThe following registries take the value of 0x00000001\nH\nMem is 0b000\nMem is 0, don't touch memory\nNext instruction: 0b000001011\n======================= Instruction address: 0x000001011 =======================\nnext=0b000001100 JAM=0b000 ALU=0b00111100 C=0b100000000 Mem=0b000 B=0b0101\nALU is 0b111100, function: A + B\nA is always H=0x00000001\nB is 0b0101 (5), yielding LV=0x30000000\nResult of operation: 0x30000001\nFinal result: 0x30000001\nC is 0b100000000\nThe following registries take the value of 0x30000001\nH\nMem is 0b000\nMem is 0, don't touch memory\nNext instruction: 0b000001100\n======================= Instruction address: 0x000001100 =======================\nnext=0b000000000 JAM=0b000 ALU=0b00111100 C=0b000010000 Mem=0b000 B=0b0101\nALU is 0b111100, function: A + B\nA is always H=0x30000001\nB is 0b0101 (5), yielding LV=0x30000000\nResult of operation: 0x60000001\nFinal result: 0x60000001\nC is 0b000010000\nThe following registries take the value of 0x60000001\nLV\nMem is 0b000\nMem is 0, don't touch memory\nNext instruction: 0b000000000\n================================================================================\nNext instruction is 0. We're done\nSP = 0x10101010\nLV = 0x60000001\nCPP = 0x10000001\nTOS = 0xFF000000\nOPC = 0xABCDE000\nH = 0x30000001\nMAR = 0xA5A5A5A5\nMDR = 0x5A5A5A5A\nPC = 0x55AA55AA\nMBR = 0xUNINITIALIZED\nMBRU = 0xUNINITIALIZED\nMPC = 0x00000000\n```\n\nMerk at to av registrene aldri ble satt, verken i oppsettet eller i koden, så\nde er bare `UNINITIALIZED`. Det er greit så lenge de aldri brukes til noe.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitgud.io/fish/tdt4160",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tdt4160",
    "package_url": "https://pypi.org/project/tdt4160/",
    "platform": "",
    "project_url": "https://pypi.org/project/tdt4160/",
    "project_urls": {
      "Homepage": "https://gitgud.io/fish/tdt4160"
    },
    "release_url": "https://pypi.org/project/tdt4160/1.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Easy simulations for lower level tasks",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8824024,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c47612e596b48eb028a5a5c48ab5cb31ebcb660c258d5f1ca016761b2a8c23e",
          "md5": "c1c105b0b2a0be582a0769c99360dc6f",
          "sha256": "5cc93289a979683e00bd416ac9d300823f260e81e0f79247c032307c7749b759"
        },
        "downloads": -1,
        "filename": "tdt4160-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1c105b0b2a0be582a0769c99360dc6f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26789,
        "upload_time": "2020-12-04T19:50:48",
        "upload_time_iso_8601": "2020-12-04T19:50:48.694526Z",
        "url": "https://files.pythonhosted.org/packages/0c/47/612e596b48eb028a5a5c48ab5cb31ebcb660c258d5f1ca016761b2a8c23e/tdt4160-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bb4675b8ebb57f1269af2c74b0a7e119f7592218fdd0c2b22203bbba514190e",
          "md5": "10126d7b66e602ddd3cd95ab5bb409cd",
          "sha256": "47156f219ac94295973911892953854b97134d553cee48f827dfc0cdf91018f0"
        },
        "downloads": -1,
        "filename": "tdt4160-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10126d7b66e602ddd3cd95ab5bb409cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17861,
        "upload_time": "2020-12-04T19:50:49",
        "upload_time_iso_8601": "2020-12-04T19:50:49.881133Z",
        "url": "https://files.pythonhosted.org/packages/5b/b4/675b8ebb57f1269af2c74b0a7e119f7592218fdd0c2b22203bbba514190e/tdt4160-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56ff68b8666652a420b3e95c2293a2f455cec57de71875d0a11429e8bb6061f9",
          "md5": "a8cbe6f853ead91c168b1ee2c6fb3e9a",
          "sha256": "8ff3dbf47788ff54b01e3d463abe315285d31b6b9d0272ec5bb1a09acf4dd4d8"
        },
        "downloads": -1,
        "filename": "tdt4160-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8cbe6f853ead91c168b1ee2c6fb3e9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26790,
        "upload_time": "2020-12-04T19:55:09",
        "upload_time_iso_8601": "2020-12-04T19:55:09.219935Z",
        "url": "https://files.pythonhosted.org/packages/56/ff/68b8666652a420b3e95c2293a2f455cec57de71875d0a11429e8bb6061f9/tdt4160-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f2b3a9334ece192766c94b057c87e8648258d10710904a15247def5a624e487",
          "md5": "cb655f192bd794f0a242929ddb86eb00",
          "sha256": "1dd1c3d1f73edf6e3aaa4ee84bff38590356276a72885a92bcac7fe2b89dd337"
        },
        "downloads": -1,
        "filename": "tdt4160-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cb655f192bd794f0a242929ddb86eb00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17882,
        "upload_time": "2020-12-04T19:55:10",
        "upload_time_iso_8601": "2020-12-04T19:55:10.488036Z",
        "url": "https://files.pythonhosted.org/packages/2f/2b/3a9334ece192766c94b057c87e8648258d10710904a15247def5a624e487/tdt4160-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a878cbf720c39ec69c611fb2977b2bb9c3ec59c346c32c0945d50064acafd76",
          "md5": "6a570819042d8337982242c8c3667cd7",
          "sha256": "84dc10067b500e969336041f922231c678be810a840b8fe7ad8affe4053bdd1a"
        },
        "downloads": -1,
        "filename": "tdt4160-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a570819042d8337982242c8c3667cd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26777,
        "upload_time": "2020-12-04T20:00:56",
        "upload_time_iso_8601": "2020-12-04T20:00:56.104925Z",
        "url": "https://files.pythonhosted.org/packages/4a/87/8cbf720c39ec69c611fb2977b2bb9c3ec59c346c32c0945d50064acafd76/tdt4160-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00079a44f804ce5ed64dd5e04ef9463143aa6dc11944d01e2c54a4846cf1e88c",
          "md5": "d4ec6d515e98b5deb2bffaebadc1d564",
          "sha256": "451e6a4bb693187b02495b833d9bc633db14aced897d1f8f8cacec8b66965fd3"
        },
        "downloads": -1,
        "filename": "tdt4160-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d4ec6d515e98b5deb2bffaebadc1d564",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17754,
        "upload_time": "2020-12-04T20:00:57",
        "upload_time_iso_8601": "2020-12-04T20:00:57.527519Z",
        "url": "https://files.pythonhosted.org/packages/00/07/9a44f804ce5ed64dd5e04ef9463143aa6dc11944d01e2c54a4846cf1e88c/tdt4160-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "168f37616e53410330c821287199c6f8095164cdffaaab8d76ed96d51ef3d763",
          "md5": "42b2892d11a941f4db82aee7f19d3865",
          "sha256": "1295042c57267097f41c0ede6bbccec1020e90d946c9fdbdd3c0dd930cfe2552"
        },
        "downloads": -1,
        "filename": "tdt4160-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42b2892d11a941f4db82aee7f19d3865",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26770,
        "upload_time": "2020-12-04T20:29:52",
        "upload_time_iso_8601": "2020-12-04T20:29:52.243554Z",
        "url": "https://files.pythonhosted.org/packages/16/8f/37616e53410330c821287199c6f8095164cdffaaab8d76ed96d51ef3d763/tdt4160-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ecb8873966f22d72a42ef8382b7d5530aad84fd1c4660293ba6fedec6165019",
          "md5": "a538b03d4834c68c09929b9477ae6c0b",
          "sha256": "29ae85c50a7f509b89ce46e61e07dbcf27b7bbc89f729876b9d5f2b1abe9844b"
        },
        "downloads": -1,
        "filename": "tdt4160-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a538b03d4834c68c09929b9477ae6c0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17750,
        "upload_time": "2020-12-04T20:29:53",
        "upload_time_iso_8601": "2020-12-04T20:29:53.650294Z",
        "url": "https://files.pythonhosted.org/packages/9e/cb/8873966f22d72a42ef8382b7d5530aad84fd1c4660293ba6fedec6165019/tdt4160-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "168f37616e53410330c821287199c6f8095164cdffaaab8d76ed96d51ef3d763",
        "md5": "42b2892d11a941f4db82aee7f19d3865",
        "sha256": "1295042c57267097f41c0ede6bbccec1020e90d946c9fdbdd3c0dd930cfe2552"
      },
      "downloads": -1,
      "filename": "tdt4160-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "42b2892d11a941f4db82aee7f19d3865",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 26770,
      "upload_time": "2020-12-04T20:29:52",
      "upload_time_iso_8601": "2020-12-04T20:29:52.243554Z",
      "url": "https://files.pythonhosted.org/packages/16/8f/37616e53410330c821287199c6f8095164cdffaaab8d76ed96d51ef3d763/tdt4160-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ecb8873966f22d72a42ef8382b7d5530aad84fd1c4660293ba6fedec6165019",
        "md5": "a538b03d4834c68c09929b9477ae6c0b",
        "sha256": "29ae85c50a7f509b89ce46e61e07dbcf27b7bbc89f729876b9d5f2b1abe9844b"
      },
      "downloads": -1,
      "filename": "tdt4160-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a538b03d4834c68c09929b9477ae6c0b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17750,
      "upload_time": "2020-12-04T20:29:53",
      "upload_time_iso_8601": "2020-12-04T20:29:53.650294Z",
      "url": "https://files.pythonhosted.org/packages/9e/cb/8873966f22d72a42ef8382b7d5530aad84fd1c4660293ba6fedec6165019/tdt4160-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}