{
  "info": {
    "author": "Chris Blades",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Fineas\n\nA simple, thread-safe, decorator-based, transition-focused Finite State Machine implementation.\n\nPossible Use Cases:\n- Configuration management from multiple sources.\n- Keeping track of state during complex system startup.\n- Tracking state while parsing.\n\n```python\nfrom fineas import state_machine\n\n\n@state_machine(initial_state='new', store_history=True)\nclass TestMachine:\n    def __init__(self):\n        self.config = None\n\n    @state_machine.transition(\n        source=['new', 'invalid_configuration'],\n        dest='configured',\n        error_state='invalid_configuration')\n    def got_config(self, config):\n        # validate config\n        self.config = config\n\n    @state_machine.transition(source='configured', dest='scheduled')\n    def ready(self):\n        pass\n\n    @state_machine.transition(\n        source='scheduled',\n        dest='scheduled',\n        error_state='canceled',\n        failed_state='retry')\n    def run(self, fail_transition):\n        # do work\n        status = self._do_work()\n\n        if not status:\n            fail_transition()\n\n    @state_machine.transition(\n        source='retry',\n        dest='run',\n        error_state='canceled',\n        failed_state='too_many_failures'\n    )\n    def try_again(self, times, fail_transition):\n        for i in range(times):\n            if self._do_work():\n                return\n        fail_transition()\n\n    @state_machine.transition(\n        source=['retry', 'too_many_failures'],\n        dest='cancelled'\n    )\n    def abandon(self):\n        pass\n\n    @state_machine.transition(\n        source='too_many_failures',\n        dest='configured'\n    )\n    def reconfigure(self, config):\n        self.config = config\n\n    def _do_work(self):\n        pass\n\n\nt = TestMachine()\nt.got_config(None)\nt.ready()\nt.run()\nt.try_again(3)\nt.abandon()\n\n\nprint(t.history)\n\nprint(t.state)\n```\n\n## Quickstart\n1) Decorate a class with `@fineas.state_machine(initial_state='new')`.  You must pass a value for \n   `initial_state`.\n2) Define a method that implements the work required to transition form one or more source states\n   to a single destination state.  Decorate that method with \n   `@fineas.transition(source='new', dest='ready')`.\n3)  That's it!  Each instance of your decorated class is its own state machine.  You may check its\ncurrent state with its `state` attribute, and, if you've enabled `record_history`, you can access\n    its transition history with its `history` attribute.\n\n## Overview\nTo turn each instance of a class into a state machine, simply decorate it with \n`@fineas.state_machine()`.  You must pass an `initial_state` value to `@fineas.state_machine()`.\nThis will be the state every instance of your type starts in.  You can also enable recording state\ntransitions with the `record_history` flag; this is useful while developing finite state machines.\n\nEvery transition in your state machine is represented by a method inside the class you annotated \nwith `@fineas.state_machihe()`.  To turn a method into a transition, decorate it with \n`@fineas.transition()` and supply one or more source states for the transition, and exactly one\ndestination state.  You can also define a state to transition to if an exception is raised inside \nyour method (there is also a flag to enable or disable re-raising that exception).  If your method\naccepts a parameter named `fail_transition`, its value will be a callable your method can invoke to\ncause the transition to fail while still allowing your method to return a value to its caller.  You\nmay also pass a `fail_state` parameter to the decorator, and when `fail_transition` is invoked, your\ninstance will be transitioned to the given state.\n\nWhen any method annotated with `@fineas.transistion()` is called, the following steps happen:\n\n1) Acquire a lock over the receiving instance.\n1) Fineas validates that the receiving instance's state is in the sources passed to \n   `@fineas.transition()`\n   - If it is not, a TransitionException is raised.\n1) The decorated method is invoked, passing `fail_transistion` if able.\n1) If the decorated method raises an exception:\n   - If `error_state` was passed, immediately transition to that state.\n   - If `reraise_error` is True, re-raise the exception.\n   - Return.\n1) If `fail_transition` was called:\n   - If 'fail_state' was passed, immediately transition to that state.\n1) If no exception was raised and `fail_transition` was not called, transition to the destination\n   state and return the value returned by the decorated method.\n   \n## Requirements\n\nPython 3.6 or higher\n\nwrapt 1.12.x\n\n## Release Notes\n1.0.1 (12 March, 2021):\n- Minor Cleanup\n- Move to poetry\n- Basic test coverage\n- Bump to 1.0.0 due to no issues being found in the last year.\n\n0.1.0 (07 March, 2021):\n- Initial Release\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fineas",
    "package_url": "https://pypi.org/project/fineas/",
    "platform": null,
    "project_url": "https://pypi.org/project/fineas/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/fineas/1.0.1/",
    "requires_dist": [
      "wrapt (>=1.14.0,<2.0.0)"
    ],
    "requires_python": ">=3.6.2,<4.0.0",
    "summary": "A simple, decorator-based, transition-focused Finite State Machine implementation.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13157704,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d0c48ec3e1010903fefaffe82e398a4664f80a6d3a8f9f8107cfc7d403bf89d",
          "md5": "d4b5bb29b4e0994c0eb73d6e4a1e4a13",
          "sha256": "735e7ce2ff59b9aac8f57febd8d965aadf8bb89d1803656cfe2782aaae36a903"
        },
        "downloads": -1,
        "filename": "fineas-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4b5bb29b4e0994c0eb73d6e4a1e4a13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7026,
        "upload_time": "2022-03-12T16:14:53",
        "upload_time_iso_8601": "2022-03-12T16:14:53.642414Z",
        "url": "https://files.pythonhosted.org/packages/6d/0c/48ec3e1010903fefaffe82e398a4664f80a6d3a8f9f8107cfc7d403bf89d/fineas-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df0fb8994e42444dab6e685ab4a51c13bb23ab334ff145ad9e8cc09f614006d5",
          "md5": "ddf471d8f0bbe4b4eb5f91e59473d6cf",
          "sha256": "b83727cf0f055c04a01cc171721a5d9e6626c7344821a7b86a04219cdf09e39e"
        },
        "downloads": -1,
        "filename": "Fineas-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ddf471d8f0bbe4b4eb5f91e59473d6cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5345,
        "upload_time": "2021-05-14T22:30:47",
        "upload_time_iso_8601": "2021-05-14T22:30:47.401311Z",
        "url": "https://files.pythonhosted.org/packages/df/0f/b8994e42444dab6e685ab4a51c13bb23ab334ff145ad9e8cc09f614006d5/Fineas-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c14cd6b016622996c0ec850b518bce14212f2c6afca8f209ea63904d0360e9dc",
          "md5": "5c8d1a521bac424a2d5653742a65cbf8",
          "sha256": "735891da0cb19aa345a1608e6312c7b95ab538e70bdbbaf3ecf57e3c102b1a6d"
        },
        "downloads": -1,
        "filename": "Fineas-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c8d1a521bac424a2d5653742a65cbf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4769,
        "upload_time": "2021-05-14T22:30:49",
        "upload_time_iso_8601": "2021-05-14T22:30:49.305526Z",
        "url": "https://files.pythonhosted.org/packages/c1/4c/d6b016622996c0ec850b518bce14212f2c6afca8f209ea63904d0360e9dc/Fineas-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7144bfd499fa9bf240c70465f83d27ab46f07ed349f49ab23e1dd1b4da222444",
          "md5": "562ef34892b6ff89cbdcc180f67e09f5",
          "sha256": "ebed9f79477e6e4e1f802b24369d881de8413c477033126746a9603cdd669b80"
        },
        "downloads": -1,
        "filename": "fineas-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "562ef34892b6ff89cbdcc180f67e09f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 8734,
        "upload_time": "2022-03-12T16:21:03",
        "upload_time_iso_8601": "2022-03-12T16:21:03.790169Z",
        "url": "https://files.pythonhosted.org/packages/71/44/bfd499fa9bf240c70465f83d27ab46f07ed349f49ab23e1dd1b4da222444/fineas-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "547658f403eb4b468dd10f160ca92ea9ac7458017105e53e1f23f46bd851251f",
          "md5": "0acb0ddb1e17ec1764993722338e9575",
          "sha256": "fc323f0eef806fb0c6d2844c529ea24995a0f237ed78ea1af2ac9a6227cbeb56"
        },
        "downloads": -1,
        "filename": "fineas-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0acb0ddb1e17ec1764993722338e9575",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 9045,
        "upload_time": "2022-03-12T16:21:05",
        "upload_time_iso_8601": "2022-03-12T16:21:05.258450Z",
        "url": "https://files.pythonhosted.org/packages/54/76/58f403eb4b468dd10f160ca92ea9ac7458017105e53e1f23f46bd851251f/fineas-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7144bfd499fa9bf240c70465f83d27ab46f07ed349f49ab23e1dd1b4da222444",
        "md5": "562ef34892b6ff89cbdcc180f67e09f5",
        "sha256": "ebed9f79477e6e4e1f802b24369d881de8413c477033126746a9603cdd669b80"
      },
      "downloads": -1,
      "filename": "fineas-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "562ef34892b6ff89cbdcc180f67e09f5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.2,<4.0.0",
      "size": 8734,
      "upload_time": "2022-03-12T16:21:03",
      "upload_time_iso_8601": "2022-03-12T16:21:03.790169Z",
      "url": "https://files.pythonhosted.org/packages/71/44/bfd499fa9bf240c70465f83d27ab46f07ed349f49ab23e1dd1b4da222444/fineas-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "547658f403eb4b468dd10f160ca92ea9ac7458017105e53e1f23f46bd851251f",
        "md5": "0acb0ddb1e17ec1764993722338e9575",
        "sha256": "fc323f0eef806fb0c6d2844c529ea24995a0f237ed78ea1af2ac9a6227cbeb56"
      },
      "downloads": -1,
      "filename": "fineas-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0acb0ddb1e17ec1764993722338e9575",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.2,<4.0.0",
      "size": 9045,
      "upload_time": "2022-03-12T16:21:05",
      "upload_time_iso_8601": "2022-03-12T16:21:05.258450Z",
      "url": "https://files.pythonhosted.org/packages/54/76/58f403eb4b468dd10f160ca92ea9ac7458017105e53e1f23f46bd851251f/fineas-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}