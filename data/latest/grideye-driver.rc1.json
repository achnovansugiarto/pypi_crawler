{
  "info": {
    "author": "Rogier van der Geer",
    "author_email": "rogier@vander-geer.nl",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Hardware :: Hardware Drivers",
      "Typing :: Typed"
    ],
    "description": "# grideye-driver\nPython driver for the Panasonic AMG88 Grid-EYE infrared array sensor.\n\n![GitHub Workflow Status](https://img.shields.io/github/workflow/status/rogiervandergeer/grideye-driver/Continuous%20Integration) \n![PyPI](https://img.shields.io/pypi/v/grideye-driver)\n![PyPI - License](https://img.shields.io/pypi/l/grideye-driver)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/grideye-driver) \n\n## Installation\n\nThe package is available on [PyPI](https://pypi.org/project/grideye-driver/). Installation is can be done with your favourite package manager. For example:\n\n```bash\npip install grideye-driver\n```\n\n## Usage\n\nIn order to initialise the device we need an open `SMBus` object. \nDepending on the machine that you are running on you may need to provide another bus number or path:\n```python\nfrom grideye import GridEye\nfrom smbus2 import SMBus\n\n\nwith SMBus(1) as bus:\n    device = GridEye(bus=bus)\n```\n\nThe I2C address of the GridEye sensor is either `0x68` or `0x69`. \nThe default of the `GridEye` class is `0x69`, and you can specify another address\nby providing for example `GridEye(bus=bus, address=0x68)`.\n\nBasic usage is as simple as:\n```python\nwith SMBus(1) as bus:\n    with GridEye(bus=bus) as device:\n        image = device.image\n```\n\nThe `image` variable will be an 8x8 list-of-lists containing 64 floats - each representing the\nmeasured temperature in degrees Celsius of a pixel.\n\n### Device Mode\n\nThe device is instantiated in sleep mode. All functionality is unavailable\nin sleep mode - except for waking the device. The `asleep` property will be `True`.\n\nThe device can be woken with the `wake()`-method, and put back to sleep with\nthe `sleep()`-method:\n```python\ndevice = GridEye(bus=bus)\ndevice.wake()\nimage = device.image\ndevice.sleep()\n```\nOr instead, one can use the `GridEye` as context manager, which will\nautomatically wake the device upon entering the context, and put\nit back to sleep when exiting the context - even in case of an error:\n```python\nwith GridEye(bus=bus) as device:\n    image = device.image\n```\n\nor \n```python\ndevice = GridEye(bus=bus)\nwith device:\n    image = device.image\n```\n\n### Settings\n\nThe Grid-EYE has two framerate settings: 1 fps or 10 fps.\nThe framerate can be read and set with the `frame_rate`-property.\nThe framerate value is always a `grideye.FrameRate` enum object:\n```python\ndevice.frame_rate\n>>> FrameRate.low   # Low is 1fps\n```\nIt can be set by providing a `FrameRate` object:\n```python\nfrom grideye import FrameRate\ndevice.frame_rate = FrameRate.high\n```\nor by a string with value `\"low\"` or `\"high\"`:\n```python\ndevice.frame_rate = \"low\"\n```\n\nTo reduce noise, the Grid-EYE has a moving average feature.\nIt can be controlled by setting the `moving_average`-property or\neither `True` (enabled) or `False` (disabled).\n\n### Measurements\n\nTwo properties are available:\n```python\ntemp = device.device_temperature\nimage = device.image\n```\nThe first returns the internal device temperature as a float,\nthe latter an 8x8 matrix of sensor readings.\n\n### Interrupts\n\nThe Grid-EYE sports three types of interrupt: global, pixel-level and overflow.\n\nThe interrupts are configured with the `interrupt_config`-property,\nwith is an `InterruptConfig`-object. This object has five attributes:\n\n- An `enabled`-flag. If this is `False`, then the interrupt status flag is always `True`.\n- Two limits: `upper_limit` and `lower_limit`.\n- An `absolute`-flag. If this is `False`, then the upper and lower limit represent the minimum differences compared to the previous measurement to trigger the interrupt. Otherwise, the upper and lower values represent the absolute values below or above which the interrupt will be triggered.\n- The `hysteresis`, which represents the hysteresis applied to the limits.\n\nFor example:\n```python\nfrom grideye import InterruptConfig\n\ndevice.interrupt_config = InterruptConfig(\n    upper_limit=30,\n    lower_limit=5,\n    hysteresis=1,\n    enabled=True,\n    absolute=True\n)\n```\n\nThe interrupts can be easily disabled by calling `device.disable_interrupts()`.\n\nIf any pixel breaches the limits as defined in the interrupt config,\nthe interrupt-flag (`device.interrupt`) will be `True`. This\ncan be reset to `False` by calling `reset_interrupt`.\n\nAdditionally, the interrupt status of each pixel is available\nas an 8x8 boolean matrix in `device.pixel_interrupt`. These\nvalues will not be changed by `reset_interrupt`: to clear\nthose you will need to call `reset_flags()`.\n\nFinally, there is an `overflow`-property, which will be set to True\nif the internal ADC of the Grid-EYE has overflowed. This\ncan be reset by calling `reset_overflow()`, or by calling `reset_flags()`.\n\n## References\n\n[Panasonic product page](https://industry.panasonic.eu/products/components/sensors/ir-thermophile-array-sensor-grid-eye)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rogiervandergeer/grideye-driver",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grideye-driver",
    "package_url": "https://pypi.org/project/grideye-driver/",
    "platform": null,
    "project_url": "https://pypi.org/project/grideye-driver/",
    "project_urls": {
      "Homepage": "https://github.com/rogiervandergeer/grideye-driver"
    },
    "release_url": "https://pypi.org/project/grideye-driver/0.1.0/",
    "requires_dist": [
      "smbus2 (>=0.3.0)"
    ],
    "requires_python": "",
    "summary": "Python driver for the Panasonic AMG88 Grid-EYE infrared array sensor",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13545888,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b7ec533c7156ce5d86a956e9b3e6e51ebe8e0a077b4bae2cfc31aa54d98a2e3",
          "md5": "0334fc23e3ee5cbb0156ab3e2dcf72af",
          "sha256": "41b49471977a8ea73cde4d8e08f672a837947c311c1f99d5c59a8c0896ea2f42"
        },
        "downloads": -1,
        "filename": "grideye_driver-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0334fc23e3ee5cbb0156ab3e2dcf72af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10612,
        "upload_time": "2022-04-18T14:03:18",
        "upload_time_iso_8601": "2022-04-18T14:03:18.349280Z",
        "url": "https://files.pythonhosted.org/packages/7b/7e/c533c7156ce5d86a956e9b3e6e51ebe8e0a077b4bae2cfc31aa54d98a2e3/grideye_driver-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18189db3b89c009acd0c0271210c1fc0c636d6890bef45962ee08163117895c3",
          "md5": "44ab11d0dc4a7e5020fbeae245cffcb8",
          "sha256": "8dd6b06d5c6f2d7494481a4524a86e9497031b5ae15a7b388b93dc43271bed40"
        },
        "downloads": -1,
        "filename": "grideye-driver-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "44ab11d0dc4a7e5020fbeae245cffcb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9736,
        "upload_time": "2022-04-18T14:03:19",
        "upload_time_iso_8601": "2022-04-18T14:03:19.902450Z",
        "url": "https://files.pythonhosted.org/packages/18/18/9db3b89c009acd0c0271210c1fc0c636d6890bef45962ee08163117895c3/grideye-driver-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b7ec533c7156ce5d86a956e9b3e6e51ebe8e0a077b4bae2cfc31aa54d98a2e3",
        "md5": "0334fc23e3ee5cbb0156ab3e2dcf72af",
        "sha256": "41b49471977a8ea73cde4d8e08f672a837947c311c1f99d5c59a8c0896ea2f42"
      },
      "downloads": -1,
      "filename": "grideye_driver-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0334fc23e3ee5cbb0156ab3e2dcf72af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10612,
      "upload_time": "2022-04-18T14:03:18",
      "upload_time_iso_8601": "2022-04-18T14:03:18.349280Z",
      "url": "https://files.pythonhosted.org/packages/7b/7e/c533c7156ce5d86a956e9b3e6e51ebe8e0a077b4bae2cfc31aa54d98a2e3/grideye_driver-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18189db3b89c009acd0c0271210c1fc0c636d6890bef45962ee08163117895c3",
        "md5": "44ab11d0dc4a7e5020fbeae245cffcb8",
        "sha256": "8dd6b06d5c6f2d7494481a4524a86e9497031b5ae15a7b388b93dc43271bed40"
      },
      "downloads": -1,
      "filename": "grideye-driver-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "44ab11d0dc4a7e5020fbeae245cffcb8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9736,
      "upload_time": "2022-04-18T14:03:19",
      "upload_time_iso_8601": "2022-04-18T14:03:19.902450Z",
      "url": "https://files.pythonhosted.org/packages/18/18/9db3b89c009acd0c0271210c1fc0c636d6890bef45962ee08163117895c3/grideye-driver-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}