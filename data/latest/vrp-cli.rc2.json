{
  "info": {
    "author": "Ilya Builuk <ilya.builuk@gmail.com>",
    "author_email": "Ilya Builuk <ilya.builuk@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![](https://docs.rs/vrp-core/badge.svg)](https://docs.rs/vrp-core)\n[![crates.io](https://img.shields.io/crates/v/vrp-cli.svg)](https://crates.io/crates/vrp-cli)\n![build](https://github.com/reinterpretcat/vrp/actions/workflows/build.yaml/badge.svg)\n[![downloads](https://img.shields.io/crates/d/vrp-core)](https://crates.io/crates/vrp-core)\n[![codecov](https://codecov.io/gh/reinterpretcat/vrp/branch/master/graph/badge.svg)](https://codecov.io/gh/reinterpretcat/vrp)\n[![dependency status](https://deps.rs/crate/vrp-cli/1.19.2/status.svg)](https://deps.rs/crate/vrp-cli/1.19.2)\n[![DOI](https://zenodo.org/badge/238436117.svg)](https://zenodo.org/badge/latestdoi/238436117)\n\n![VRP example](docs/resources/vrp-example.png \"VRP with Route Balance\")\n\n# Description\n\nThis project provides the way to solve multiple variations of **Vehicle Routing Problem** known as rich VRP. It provides\ncustom hyper- and meta-heuristic implementations, shortly described [here](https://reinterpretcat.github.io/vrp/internals/index.html).\n\nIf you use the project in academic work, please consider citing:\n\n```\n@misc{builuk_rosomaxa_2022,\n    author       = {Ilya Builuk},\n    title        = {{A new solver for rich Vehicle Routing Problem}},\n    year         = 2022,\n    doi          = {10.5281/zenodo.4624037},\n    publisher    = {Zenodo},\n    url          = {https://doi.org/10.5281/zenodo.4624037}\n}\n```\n\n# Design goal\n\nAlthough performance is constantly in focus, the main idea behind design is extensibility: the project\naims to support a wide range of VRP variations known as Rich VRP. This is achieved through various extension\npoints: custom constraints, objective functions, acceptance criteria, etc.\n\n\n# Getting started\n\nFor general installation steps and basic usage options, please check next sections. More detailed overview of features\nand full description of the usage is presented in [A Vehicle Routing Problem Solver Documentation](https://reinterpretcat.github.io/vrp).\n\n\n# Installation\n\nYou can install vrp solver using four different ways:\n\n## Install with Python\n\nThe functionality of `vrp-cli` is published to [pypi.org](https://pypi.org/project/vrp-cli/), so you can just install it\nusing pip and use from python:\n\n```shell\npip install vrp-cli\npython examples/python-interop/example.py # run test example\n```\n\nAlternatively, you can use [maturin](https://github.com/PyO3/maturin) tool to build solver locally.\n\nYou can find extra information in [python example section](https://reinterpretcat.github.io/vrp/examples/interop/python.html)\nof the docs. The [full source code](./examples/python-interop/example.py) of python example is available in the repo which\ncontains useful model wrappers with help of `pydantic` lib.\n\n\n## Install from Docker\n\nAnother fast way to try vrp solver on your environment is to use `docker` image (not performance optimized):\n\n* **run public image** from `Github Container Registry`:\n\n```bash\n    docker run -it -v $(pwd):/repo --name vrp-cli --rm ghcr.io/reinterpretcat/vrp/vrp-cli:1.19.2\n```\n\n* **build image locally** using `Dockerfile` provided:\n\n```bash\ndocker build -t vrp_solver .\ndocker run -it -v $(pwd):/repo --rm vrp_solver\n```\n\nPlease note that the docker image is built using `musl`, not `glibc` standard library. So there might be some performance\nimplications.\n\n\n## Install from Cargo\n\nYou can install vrp solver `cli` tool directly with `cargo install`:\n\n    cargo install vrp-cli\n\nEnsure that your `$PATH` is properly configured to source the crates binaries, and then run solver using the `vrp-cli` command.\n\n\n## Install from source\n\nOnce pulled the source code, you can build it using `cargo`:\n\n    cargo build --release\n\nBuilt binaries can be found in the `./target/release` directory.\n\nAlternatively, you can try to run the following script from the project root:\n\n    ./solve_problem.sh examples/data/pragmatic/objectives/berlin.default.problem.json\n\nIt will build the executable and automatically launch the solver with the specified VRP definition. Results are\nstored in the folder where a problem definition is located.\n\n\n# Usage\n\nYou can use vrp solver either from command line or from code:\n\n## Use from command line\n\n`vrp-cli` crate is designed to use on problems defined in scientific or custom json (aka `pragmatic`) format:\n\n    vrp-cli solve pragmatic problem_definition.json -m routing_matrix.json --max-time=120\n\nPlease refer to [getting started](https://reinterpretcat.github.io/vrp/getting-started/index.html) section in\nthe documentation for more details.\n\n## Use from code\n\nIf you're using rust, then you can simply use `vrp-scientific`, `vrp-pragmatic` crates to solve VRP problem\ndefined in `pragmatic` or `scientific` format using default metaheuristic. For more complex scenarios, please refer to\n`vrp-core` documentation.\n\nIf you're using some other language, e.g. java, kotlin, javascript, python, please check\n[interop](https://reinterpretcat.github.io/vrp/examples/interop/index.html) section in documentation examples to see how\nto call the library from it.\n\n\n# Status\n\nExperimental.\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/reinterpretcat/vrp",
    "keywords": "vrp,optimization",
    "license": "Apache-2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "vrp-cli",
    "package_url": "https://pypi.org/project/vrp-cli/",
    "platform": null,
    "project_url": "https://pypi.org/project/vrp-cli/",
    "project_urls": {
      "Homepage": "https://github.com/reinterpretcat/vrp",
      "Source Code": "https://github.com/reinterpretcat/vrp"
    },
    "release_url": "https://pypi.org/project/vrp-cli/1.19.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A command line interface for VRP solver",
    "version": "1.19.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17404505,
  "releases": {
    "1.19.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e3825c1c75355ae03153cf49df27bc342707628611b54d3147bf86fd00a40acc",
          "md5": "7ca9642b1852fd71f439a7c8faa54176",
          "sha256": "f2f571b7b256c032df11dbe90532a37f4bb99203605f831d187999a74cabf6d3"
        },
        "downloads": -1,
        "filename": "vrp_cli-1.19.1-cp310-cp310-manylinux_2_31_x86_64.whl",
        "has_sig": false,
        "md5_digest": "7ca9642b1852fd71f439a7c8faa54176",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 1660680,
        "upload_time": "2023-01-19T23:10:23",
        "upload_time_iso_8601": "2023-01-19T23:10:23.055355Z",
        "url": "https://files.pythonhosted.org/packages/e3/82/5c1c75355ae03153cf49df27bc342707628611b54d3147bf86fd00a40acc/vrp_cli-1.19.1-cp310-cp310-manylinux_2_31_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.19.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "21f82cb6c9c3b375013c161eba55dd13cf5324d16ec277c9d22b749bb4282701",
          "md5": "ff8dd503d84f166ae27e3da05a66ae6e",
          "sha256": "ce11ca0bc9957211c136ee12080073b746300eefbef3c006b96dc7eb629e449c"
        },
        "downloads": -1,
        "filename": "vrp_cli-1.19.2-cp310-cp310-manylinux_2_31_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ff8dd503d84f166ae27e3da05a66ae6e",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 1670598,
        "upload_time": "2023-03-22T21:24:00",
        "upload_time_iso_8601": "2023-03-22T21:24:00.216646Z",
        "url": "https://files.pythonhosted.org/packages/21/f8/2cb6c9c3b375013c161eba55dd13cf5324d16ec277c9d22b749bb4282701/vrp_cli-1.19.2-cp310-cp310-manylinux_2_31_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "21f82cb6c9c3b375013c161eba55dd13cf5324d16ec277c9d22b749bb4282701",
        "md5": "ff8dd503d84f166ae27e3da05a66ae6e",
        "sha256": "ce11ca0bc9957211c136ee12080073b746300eefbef3c006b96dc7eb629e449c"
      },
      "downloads": -1,
      "filename": "vrp_cli-1.19.2-cp310-cp310-manylinux_2_31_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ff8dd503d84f166ae27e3da05a66ae6e",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 1670598,
      "upload_time": "2023-03-22T21:24:00",
      "upload_time_iso_8601": "2023-03-22T21:24:00.216646Z",
      "url": "https://files.pythonhosted.org/packages/21/f8/2cb6c9c3b375013c161eba55dd13cf5324d16ec277c9d22b749bb4282701/vrp_cli-1.19.2-cp310-cp310-manylinux_2_31_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}