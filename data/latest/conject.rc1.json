{
  "info": {
    "author": "xppt",
    "author_email": "21246102+xppt@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Conject\n===\n\nThis library automates DI - allowing to create dependencies by its declarative description.\nFeatures:\n- Creates application components hierarchy automatically.\n- Eliminates the need to implemenent config files support - allows you to configure any application component out of\nthe box, select implementations and link them together.\n- Makes it easy to finalize components.\n- Supports synchronous and asynchronous interfaces.\n- Doesn't require components code modification (assuming they are written in DI-compatible style).\n\nExample\n---\n\nLet's assume we have a simple http service:\n```python\nclass HttpClient(abc.ABC):\n    @abc.abstractmethod\n    def request(self, method: str, url: str):\n        raise NotImplementedError\n\n\nclass MockHttpClient(HttpClient):\n    def request(self, method: str, url: str):\n        ...  # return fake response\n\n\nclass PooledHttpClient(HttpClient):\n    def __init__(self, proxy: str, user_agent: str):\n        ...\n\n    def request(self, method: str, url: str):\n        ...\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        ...  # cleanup\n\n\nclass FbApiClient:\n    def __init__(self, http_client: HttpClient, access_token: str, api_ver: str):\n        ...\n\n    def get_user_info(self, user_id: str) -> dict:\n        ...  # use HttpClient to fetch user info\n\n\nclass FetchFbUserHandler:\n    def __init__(self, fb_api_client: FbApiClient):\n        ...\n\n    def __call__(self, req):\n        ...  # use FbApiClient.get_user_info and return\n\n\ndef create_http_app(fetch_fb_user_handler: FetchFbUserHandler):\n    http_app = HttpApp([\n        ('GET', '/fetch_fb_user/', fetch_fb_user_handler),\n    ])\n    return http_app\n```\n\nIn order to fully construct our HttpApp we need to:\n- Add config option to choose HttpClient implementation.\n- Use `ExitStack` since `PooledHttpClient` is a context manager (while `MockHttpClient` isn't).\n- Add config options for `proxy`, `user_agent`, `access_token`, `api_ver` parameters.\n\n**conject** lets you avoid doing it manually.\n```python\nfrom conject import DepSpec, Impl\n\n\ndef run(config: dict) -> None:\n    spec = DepSpec([\n        Impl(Impl.Func,     'http_app',                 create_http_app),\n        Impl(Impl.CtxMgr,   'pooled_http_client',       PooledHttpClient),\n        Impl(Impl.Class,    'mock_http_client',         MockHttpClient),\n        Impl(Impl.Class,    'fb_api_client',            FbApiClient),\n        Impl(Impl.Class,    'fetch_fb_user_handler',    FetchFbUserHandler),\n    ])\n\n    with spec.start_container(config) as container:\n        # get or create component with name 'http_app'\n        #  expected type is optional, but allows type-checking\n        http_app = container.get('http_app', HttpApp)\n\n        ... # run_http_app(http_app)\n```\n\nNow we are able to control our components via configuration (formatted as toml for example):\n```toml\n[http_client]                 # component name, can be anything\n-impl = 'pooled_http_client'  # use implementation named 'pooled_http_client'\nuser_agent = 'super-app/10'   # implementation params\n\n[fb_api_client]\naccess_token = 'abcdefgh'\napi_ver = '7.0'\n```\n\nAnother possible config:\n```toml\n[proxied_http_client]\n-impl = 'pooled_http_client'\nproxy = 'my-squid:3128'\n\n[proxied_fb_api_client]\n-impl = 'fb_api_client'\nhttp_client = {-ref = 'proxied_http_client'}  # use component named 'proxied_http_client'\naccess_token = 'fake_token'\napi_ver = '7.0'\n\n[http_app]\nfb_api_client = {-ref = 'proxied_fb_api_client'}\n```\n\n**conject** allows some configuration parts to be omitted:\n- If your component name matches implementation name component's `-impl` property can be omitted.\n- You can omit implementation parameter. It will receive:\n    - default value, if there is one in the factory signature;\n    - component with the same name;\n- If there is no need to set any of component's properties you can omit it completely.\n\n\nRegistering implementations\n---\nFactory types:\n- `FactoryType.Value` - just value.\n- `FactoryType.Func` - function returning implementation.\n- `FactoryType.Class` - implementation-class.\n- `FactoryType.GenFunc` - function generating implementation that can finalize it afterwards.\n- `FactoryType.CtxMgr` - implementation context manager.\n- `FactoryType.AFunc` - like `Func`, but async.\n- `FactoryType.AGenFunc` - like `GenFunc`, but async.\n- `FactoryType.ACtxMgr` - like `CtxMgr`, but async.\n\nFactory can receive any parameters except for variadic (`*args`, `**kwargs`) and _positional-only_.\n\nTo register your implementations you need to create `DepSpec` (or `AsyncDepSpec`) object.\n\nRegistration ways:\n```python\nfrom conject import DepSpec, Impl\n\nspec = DepSpec()  # you can pass impls to __init__\n\nspec.add(Impl.CtxMgr,  'some_cls',  SomeCls)\n\nspec.add_many([\n    Impl(Impl.GenFunc,   'some_gen_func',   some_gen_func),\n])\n\n@spec.decorate(Impl.Func)\ndef some_func(some_cls: SomeCls):\n    return 1\n```\n\n\nCreating a container\n---\nTo create a container you need to enter context `spec.start_container(config: Any)`, where `config` will be used to\nconfigure components.\n\nExample:\n```python\ndef run(spec: DepSpec) -> None:\n    config = {'auth_provider': {'-impl': 'google_auth_provider'}}\n    with spec.start_container(config) as container:\n        auth_provider = container.get('auth_provider')\n        assert isinstance(auth_provider, GoogleAuthProvider)\n```\n\n\nUsing a container\n---\nDependency container lazily creates components and manages their lifetime.\n\n`def conject.Container.get(component_name: str) -> Any`\n\n`async def conject.AsyncContainer.get(component_name: str) -> Any`\n\nYou can fetch any component by calling `get`. It will create every component dependency during this call.\n\nThese created objects will be finalized after `spec.start_container()` context exit only. The order of finalization will\nbe the reversed order of their creation.\n\nUsually you will need only one container that runs for a whole program lifetime.\n\n\nComponents configuration\n---\n\nConfig should be a dict in which every key describes one component. Value is also a dict with options:\n- `-impl` is a special option, it allows you to select implementation name for this component. It could be omitted.\n- All other options represents factory parameters. Besides simple values, you can use special ones:\n\n    - `{'-ref': '<component_name>'}`\n\n        Pass another component by its name.\n\n    - `{'-expr': '<expression>'}`\n\n        Pass result of evaluation of python-expression.\n\n        The expression may depend on other components from `refs` namespace, e.g. `refs.other_component`.\n\n        Example:\n        ```python\n        import os\n        spec.add(Impl.Value, 'environ', os.environ)\n        spec.add(Impl.Class, 'fb_api_client', FbApiClient)\n        ```\n\n        Config (formatted as toml):\n        ```toml\n        [fb_api_client]\n        access_token = {-expr = 'refs.environ[\"FB_API_ACCESS_TOKEN\"]'}\n        ```\n\nSpecial options `-ref`/`-expr` can also be used inside lists and dicts (including nested).\n\n\nType checking\n---\nIn case your factories are type-annotated, **conject** will check its parameters in runtime. This is done via\n**pydantic** library.\n\nAlso this allows you to pass e.g. `datetime` param from your toml configuration. To get the list of supported types see\n[pydantic docs](https://pydantic-docs.helpmanual.io/usage/types/).\n\n**Caveat**: your mutable parameter values (including dict/list/dataclass instances) will be rebuilt from scratch, so you\nmay not receive the same instance you've expected.\n\n\nUtils\n---\n`def conject.utils.load_package_recursively(package_name: str) -> None`\n\nRecursively import all package's modules. Doesn't handle namespace packages for now.\n\n`def conject.utils.skip_type_check(value: Any) -> SkipTypeCheck`\n\nAsk conject to assume this value is  correct as any param type.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xppt/py-conject",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "conject",
    "package_url": "https://pypi.org/project/conject/",
    "platform": "",
    "project_url": "https://pypi.org/project/conject/",
    "project_urls": {
      "Homepage": "https://github.com/xppt/py-conject"
    },
    "release_url": "https://pypi.org/project/conject/0.4.0/",
    "requires_dist": [
      "async-exit-stack",
      "async-generator",
      "pydantic"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Dependency Injection and configuration library.",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9273849,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32827d9e5e8bb8dee9c82fcdd003c6330b4a6e3349bc77384769752881536cb7",
          "md5": "58119469f848d507e9b821210c34e499",
          "sha256": "958291129300468f3d7c650b9a8e6009221b314a830cb5723a4689ad97793443"
        },
        "downloads": -1,
        "filename": "conject-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58119469f848d507e9b821210c34e499",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 14638,
        "upload_time": "2021-01-30T17:09:41",
        "upload_time_iso_8601": "2021-01-30T17:09:41.661629Z",
        "url": "https://files.pythonhosted.org/packages/32/82/7d9e5e8bb8dee9c82fcdd003c6330b4a6e3349bc77384769752881536cb7/conject-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b553b1ead0adb58a7225523d63295ea5b76f8a23e98a8348d3dc16e72d5dfabb",
          "md5": "b7db866a85b7b56e9d267d781a7440c6",
          "sha256": "050986a20fb49c692b07120974973f581c5129b1dbb48b5697e5268105ebef14"
        },
        "downloads": -1,
        "filename": "conject-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b7db866a85b7b56e9d267d781a7440c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 14748,
        "upload_time": "2021-01-30T17:09:42",
        "upload_time_iso_8601": "2021-01-30T17:09:42.770023Z",
        "url": "https://files.pythonhosted.org/packages/b5/53/b1ead0adb58a7225523d63295ea5b76f8a23e98a8348d3dc16e72d5dfabb/conject-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32827d9e5e8bb8dee9c82fcdd003c6330b4a6e3349bc77384769752881536cb7",
        "md5": "58119469f848d507e9b821210c34e499",
        "sha256": "958291129300468f3d7c650b9a8e6009221b314a830cb5723a4689ad97793443"
      },
      "downloads": -1,
      "filename": "conject-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "58119469f848d507e9b821210c34e499",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 14638,
      "upload_time": "2021-01-30T17:09:41",
      "upload_time_iso_8601": "2021-01-30T17:09:41.661629Z",
      "url": "https://files.pythonhosted.org/packages/32/82/7d9e5e8bb8dee9c82fcdd003c6330b4a6e3349bc77384769752881536cb7/conject-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b553b1ead0adb58a7225523d63295ea5b76f8a23e98a8348d3dc16e72d5dfabb",
        "md5": "b7db866a85b7b56e9d267d781a7440c6",
        "sha256": "050986a20fb49c692b07120974973f581c5129b1dbb48b5697e5268105ebef14"
      },
      "downloads": -1,
      "filename": "conject-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b7db866a85b7b56e9d267d781a7440c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 14748,
      "upload_time": "2021-01-30T17:09:42",
      "upload_time_iso_8601": "2021-01-30T17:09:42.770023Z",
      "url": "https://files.pythonhosted.org/packages/b5/53/b1ead0adb58a7225523d63295ea5b76f8a23e98a8348d3dc16e72d5dfabb/conject-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}