{
  "info": {
    "author": "Wessel Bruinsma",
    "author_email": "wessel.p.bruinsma@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# [GPCM](http://github.com/wesselb/gpcm)\n\n[![CI](https://github.com/wesselb/gpcm/workflows/CI/badge.svg?branch=master)](https://github.com/wesselb/gpcm/actions?query=workflow%3ACI)\n[![Coverage Status](https://coveralls.io/repos/github/wesselb/gpcm/badge.svg?branch=master)](https://coveralls.io/github/wesselb/gpcm?branch=master)\n[![Latest Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://wesselb.github.io/gpcm)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nImplementation of the GPCM and variations\n\nCitation:\n\n```\n@inproceedings{Bruinsma:2022:Modelling_Non-Smooth_Signals_With_Complex,\n    title = {Modelling Non-Smooth Signals With Complex Spectral Structure},\n    year = {2022},\n    author = {Wessel P. Bruinsma and Martin Tegn{\\' e}r and Richard E. Turner},\n    booktitle = {Proceedings of the 25th International Conference on Artificial Intelligence and Statistics},\n    series = {Proceedings of Machine Learning Research},\n    publisher = {PMLR},\n    eprint = {https://arxiv.org/abs/2203.06997},\n}\n```\n\nContents:\n\n- [Installation](#installation)\n- [Example](#example)\n- [Available Models and Inference Schemes](#available-models-and-approximation-schemes)\n- [Making Predictions](#make-predictions)\n- [Sample Experiments](#sample-experiments)\n- [Reproduce Experiments From the Paper](#reproduce-experiments-from-the-paper)\n\n## Installation\n\nSee [the instructions here](https://gist.github.com/wesselb/4b44bf87f3789425f96e26c4308d0adc).\nThen simply\n\n```\npip install gpcm\n```\n\nIf you have a GPU available, it is recommended that you use a GPU-accelerated version \nof JAX.\n\n## Example\n\n```python\nimport numpy as np\n\nfrom gpcm import RGPCM\n\nmodel = RGPCM(window=2, scale=1, n_u=30, t=(0, 10))\n\n# Sample from the prior.\nt = np.linspace(0, 10, 100)\nK, y = model.sample(t)  # Sampled kernel matrix and sampled noisy function\n\n# Fit model to the sample.\nmodel.fit(t, y)\n\n# Compute the ELBO.\nprint(model.elbo(t, y))\n\n# Make predictions.\nposterior = model.condition(t, y)\nmean, var = posterior.predict(t)\n```\n\n## Available Models and Approximation Schemes\n\nThe following models are available:\n\n| Model | Description |\n| - | - |\n| `GPCM` | White noise excitation with a smooth filter |\n| `CGPCM` | White noise excitation with a smooth causal filter |\n| `RGPCM` | Ornstein-Uhlenbeck excitation with a white noise filter |\n\nThe simplest way of constructing a model is to set the following keywords:\n\n| Keyword | Description |\n| - | - |\n| `window` | Largest length scale of signal |\n| `scale` | Smallest length scale of signal |\n| `t` | Some iterable containing the limits of the inputs of interest |\n\nExample:\n\n```python\nfrom gpcm import RGPCM\n\nmodel = RGPCM(window=4, scale=0.5, t=(0, 10))\n```\n\nPlease see the API for a detailed description of the keyword arguments which you can\nset.\nAmongst these keyword arguments, we highlight the following few which are important:\n\n| Optional Keyword | Description |\n| - | - |\n| `n_u` | Number of inducing points for the filter |\n| `n_z` (`GPCM` and `CGPCM`) | Number of inducing points for the excitation signal |\n| `m_max` (`RGPCM`) | Half of the number of variational Fourier features. Set to `n_z // 2` for equal computational expense. |\n| `t` | Some iterable containing the limits of the inputs of interest |\n\nThe constructors of these models also take in a keyword `scheme`, which can be\nset  to one of the following values:\n\n| `scheme` | Description |\n| - | - |\n| `\"structured\"` (default) | Structured approximation. Recommended. |\n| `\"mean-field-ca\"` | Mean-field approximation learned by coordinate ascent. This does not learn hyperparameters. |\n| `\"mean-field-gradient\"` | Mean-field approximation learned by gradient-based optimisation |\n| `\"mean-field-collapsed-gradient\"` | Collapsed mean-field approximation learned by gradient-based optimisation |\n\nExample:\n\n```python\nfrom gpcm import RGPCM\n\nmodel = RGPCM(scheme=\"mean-field-ca\", window=4, scale=0.5, t=(0, 10))\n```\n\n## Making Predictions With a Model\n\nThe implemented models follow the interface from\n[ProbMods](https://github.com/wesselb/probmods).\n\nTo begin with, construct a model:\n\n```python\nfrom gpcm import GPCM\n\nmodel = GPCM(window=4, scale=0.5, t=(0, 10))\n```\n\n### Sample From the Paper\n\nSampling gives back the sampled kernel matrix and the noisy outputs.\n\n```python\nK, y = model.sample(t)\n```\n\n### Fit the Model to Data\n\nIt is recommended that you normalise the data before fitting.\nIt is also recommended that you do not fit the more to more than 1000 data points.\n\n```python\nmodel.fit(t, y)\n```\n\nThe function `fit` takes in the keyword argument `iters`.\nThe rule of thumb which you can use is as follows:\n\n| `iters` | Description |\n| - | - |\n| `5_000` (default) | Reasonable fit |\n| `10_000` | Better fit |\n| `20_000` | Good fit |\n| `30_000` | Pretty good fit |\n\nThe function `fit` also takes in the keyword argument `rate`.\nThe rule of thumb which you can use here is as follows:\n\n| `rate` | Description |\n| - | - |\n| `5e-2` (default) | Fast learning |\n| `2e-2` | Slower, but more stable learning |\n| `5e-3` | Slow learning |\n\n### Compute the ELBO\n\nIt is recommended that you normalise the data before computing the ELBO.\nIt is also recommended that you do not compute the ELBO for more than 1000 data points.\n\n```python\nelbo = model.elbo(t, y)\n```\n\n### Condition the Model on Data\n\nIt is recommended that you normalise the data before conditioning and unnormalise\nthe predictions.\nIt is also recommended that you do not condition on more than 1000 data points.\n\n```python\nposterior_model = model.condition(t, y)\n```\n\n### Make Predictions\n\nPredictions for new inputs:\n```python\nmean, var = posterior_model.predict(t_new)\n```\n\nPredictions for the kernel:\n```python\npred = posterior_model.predict_kernel()\nx, mean, var = pred.x, pred.mean, pred.var\n```\n\nPredictions for the PSD:\n```python\npred = posterior_model.predict_psd()\nx, mean, var = pred.x, pred.mean, pred.var\n```\n\n## Sample Experiments\n\n### Learn a GP With a Known Kernel\n\n```bash\npython experiments/eq.py\n```\n\n```bash\npython experiments/smk.py\n```\n\n### Learn the Mauna Loa CO2 Data Set\n\n```bash\npython experiments/mauna_loa.py\n```\n\n## Reproduce Experiments From the Paper\n\nSee [here](https://github.com/wesselb/gpcm/tree/master/experiments/paper).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wesselb/gpcm",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gpcm",
    "package_url": "https://pypi.org/project/gpcm/",
    "platform": null,
    "project_url": "https://pypi.org/project/gpcm/",
    "project_urls": {
      "Homepage": "https://github.com/wesselb/gpcm"
    },
    "release_url": "https://pypi.org/project/gpcm/0.2.0/",
    "requires_dist": [
      "numpy (>=1.16)",
      "scipy",
      "matplotlib",
      "plum-dispatch (>=2)",
      "backends (>=1.4.9)",
      "backends-matrix (>=1.1.5)",
      "stheno (>=1.1.7)",
      "mlkernels (>=0.3.3)",
      "varz (>=0.7.4)",
      "wbml (>=0.3.15)",
      "probmods (>=0.3.0)",
      "jax",
      "jaxlib"
    ],
    "requires_python": ">=3.6",
    "summary": "Implementation of the GPCM and variations",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17179012,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9e17fed29b210627edd6d18877590a24e3d27abb333aa958e4fb487483b5677",
          "md5": "4453b41e6aab3bbd468384fcd442c09d",
          "sha256": "16927f16d9ac6c4a25031088ac745e26839a119e3f04c1bc5b62b79904d604d3"
        },
        "downloads": -1,
        "filename": "gpcm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4453b41e6aab3bbd468384fcd442c09d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 58893,
        "upload_time": "2022-04-14T12:49:05",
        "upload_time_iso_8601": "2022-04-14T12:49:05.405519Z",
        "url": "https://files.pythonhosted.org/packages/b9/e1/7fed29b210627edd6d18877590a24e3d27abb333aa958e4fb487483b5677/gpcm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18c29a27f221d56e4ff6f32c8290fa3dda939e13e9f14367a043f941de40add3",
          "md5": "f6ba777ed1d929e8f1df23e4b30b6c7b",
          "sha256": "3fed5926aecee5807949f30e9b80fcf0aff3f85aba351c10858dbe174b66211b"
        },
        "downloads": -1,
        "filename": "gpcm-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6ba777ed1d929e8f1df23e4b30b6c7b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 66807,
        "upload_time": "2023-03-06T18:05:08",
        "upload_time_iso_8601": "2023-03-06T18:05:08.831202Z",
        "url": "https://files.pythonhosted.org/packages/18/c2/9a27f221d56e4ff6f32c8290fa3dda939e13e9f14367a043f941de40add3/gpcm-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22c33a85b9cb406823487752d53418bf5a86b1193806dd6623d138475addffb4",
          "md5": "664e8c6d6ef2f957a6630f7a3560d90e",
          "sha256": "3097f439f3d824e760e1a60503131975b53a974b07f075c57479ec5a50ca5bb0"
        },
        "downloads": -1,
        "filename": "gpcm-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "664e8c6d6ef2f957a6630f7a3560d90e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 60265,
        "upload_time": "2023-03-06T18:05:10",
        "upload_time_iso_8601": "2023-03-06T18:05:10.991307Z",
        "url": "https://files.pythonhosted.org/packages/22/c3/3a85b9cb406823487752d53418bf5a86b1193806dd6623d138475addffb4/gpcm-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18c29a27f221d56e4ff6f32c8290fa3dda939e13e9f14367a043f941de40add3",
        "md5": "f6ba777ed1d929e8f1df23e4b30b6c7b",
        "sha256": "3fed5926aecee5807949f30e9b80fcf0aff3f85aba351c10858dbe174b66211b"
      },
      "downloads": -1,
      "filename": "gpcm-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f6ba777ed1d929e8f1df23e4b30b6c7b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 66807,
      "upload_time": "2023-03-06T18:05:08",
      "upload_time_iso_8601": "2023-03-06T18:05:08.831202Z",
      "url": "https://files.pythonhosted.org/packages/18/c2/9a27f221d56e4ff6f32c8290fa3dda939e13e9f14367a043f941de40add3/gpcm-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22c33a85b9cb406823487752d53418bf5a86b1193806dd6623d138475addffb4",
        "md5": "664e8c6d6ef2f957a6630f7a3560d90e",
        "sha256": "3097f439f3d824e760e1a60503131975b53a974b07f075c57479ec5a50ca5bb0"
      },
      "downloads": -1,
      "filename": "gpcm-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "664e8c6d6ef2f957a6630f7a3560d90e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 60265,
      "upload_time": "2023-03-06T18:05:10",
      "upload_time_iso_8601": "2023-03-06T18:05:10.991307Z",
      "url": "https://files.pythonhosted.org/packages/22/c3/3a85b9cb406823487752d53418bf5a86b1193806dd6623d138475addffb4/gpcm-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}