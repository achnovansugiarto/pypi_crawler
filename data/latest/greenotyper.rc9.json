{
  "info": {
    "author": "Marni Tausen",
    "author_email": "marni.tausen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "Greenotyper (v0.7.0)\n================\n[![Build Status](https://api.travis-ci.com/MarniTausen/Greenotyper.svg?branch=master)](https://travis-ci.com/MarniTausen/Greenotyper)[![codecov](https://codecov.io/gh/MarniTausen/Greenotyper/branch/master/graph/badge.svg)](https://codecov.io/gh/MarniTausen/Greenotyper)[![PyPI version](https://badge.fury.io/py/greenotyper.svg)](https://badge.fury.io/py/greenotyper)\n\n-   [Installation](#installation)\n-   [General workflow guide](#general-workflow-guide)\n-   [GUI interface guide](#gui-interface-guide)\n-   [Command line interface guide](#command-line-interface-guide)\n-   [Pipeline setup guide](#pipeline-setup-guide)\n-   [Neural net training](#neural-net-training)\n\nGreenotyper is an image analysis tool for large scale plant phenotyping experiments.\n\nIt uses google's object detection api ([GitHub link](https://github.com/tensorflow/models/tree/master/research/object_detection)) to find the plants and thresholding to measure the size of the plants.\n\nRequirements\n------------\n\n- python version 3.6 or 3.7\n- tensorflow v2.0.0 or higher\n- PyQt5 v5.9.2 or higher\n- numpy v1.15.2 or higher\n- pillow v5.2.0 or higher\n- scikit-image v0.14.0 or higher\n- Keras v2 or higher\n\nInstallation\n------------\n\nIt is recommended to install the tool in a virtualenv or in an environment in conda. Example:\n\n```bash\nconda create -n greenotyper_env python=3.7\n\nconda activate greenotyper_env\n\npip install greenotyper\n```\nInstall the latest version of greenotyper through pip:\n\n```bash\npip install greenotyper\n```\nIf there are problems with pip you can try calling pip3 instead:\n\n```bash\npip3 install greenotyper\n```\n\nInstall greenotyper through conda:\n```\nnot available yet\n```\n\n\nGeneral workflow guide\n----------------------\n\nStarting a new workflow requires setting up and testing the pipeline. It starts by opening the pipeline planner. Either you open the Greenotyper app, or opening the GUI through the command line interface:\n\n```bash\ngreenotyper GUI\n```\n\nTo open the pipeline planner, click the Pipeline planner button.\n\nTesting the plant area detection, the network and pipeline settings are all done through the pipeline planner. For information on how use the interface go to the next section, and for general information on Pipeline setups click [here](#pipeline-setup-guide).\n\nRunning the pipeline is done either through the command line or through the GUI. The command line is more efficient and can more easily be deployed on computing clusters.\n\nThe pipeline can be run on individual images or directories of images. The results are a single \"database\" file, which uses file locking. (If your file system has blocked file locking, then there is no guarantee the results will be correctly written when run using multi processing.)\n\nTo organise the results into a table you can use the command line option:\n\n```bash\ngreenotyper organize-output input_file.csv output_file.csv\n```\n\nGUI interface guide\n-------------------\n\nOpen the app, or run the GUI from the terminal:\nhttps://github.com/MarniTausen/Greenotyper\n\n### Pipeline Planner\n\n#### Basics\nFirst open the pipeline planner from the initial window.\n![](README_images/open_pipeline_planner.gif)\n\nOpen your image.\n\n![](README_images/open_image.gif)\n\nOpening a trained network.\n\n![](README_images/open_network.gif)\n\nAfter both an image and the network have been opened, you can run find plants feature. Clicking on Find plants will draw bounding boxes around the detected plants.\n\n![](README_images/find_plants.gif)\n\nTo test the detection of the plant area you can use apply mask function.\n\n![](README_images/apply_mask.gif)\n\n#### Adjust mask settings\n\n#### Adjust pipeline settings\n\n### Pipeline Runner (Initial window)\n\n\n\nCommand line interface guide\n----------------------------\nThe commandline is divided into subcommands, which each have their own options.\nThe standard help message showing the subcommands are shown here:\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper <command> [<args>]\n\nThe available commands are as follows:\n   run               Runs the greenotyper pipeline on set of images\n   organize-output   Cleans and organizes the output\n   GUI               Opens the Greenotyper GUI interface\n   train-unet        Commandline options for creating and training the U-net\n   test-unet         Test a trained u-net and output segmentation accuracies\n   run-unet          Pipeline settings for running the unet version of the pipeline\n\nPlease see the options within each of the commands.\n```\n\n### Run\nThe greenotyper run command runs the Greenotyper tool using object detection and thresholding \n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper run <pipeline file> <input image> [<args>]\n\nRun the Greenotyper pipeline based on the pipeline settings provided.\n\npositional arguments:\n  pipeline              Required pipeline file.\n  input                 Image filename or directory with images\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t THREADS, --threads THREADS\n                        Number of threads available. Only used to run on\n                        multiple images at a time. Default: 1. Settings less\n                        than 0 use all available cores.\n  -s SIZE_OUTPUT, --size_output SIZE_OUTPUT\n                        Output directory for the size measurements. Default is\n                        no output.\n  -g GREENNESS_OUTPUT, --greenness_output GREENNESS_OUTPUT\n                        Output directory for the greenness measurements.\n                        Default is no output.\n  -m MASK_OUTPUT, --mask_output MASK_OUTPUT\n                        Output directory for the produced masks. Default is no\n                        output.\n  -c CROP_OUTPUT, --crop_output CROP_OUTPUT\n                        Output directory for the cropped images. Default is no\n                        output.\n  --by_day              Subdividing the outputs based on per day. Recommended\n                        to use this option or --by_individual to avoid file\n                        system overflow.\n  --by_sample           Subdividing the outputs based on per individual.\n                        Recommended to use this option or --by_day avoid file\n                        system overflow.\n```\n\n### Organize-output\nOrganize-output\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper organize-output <input> <output> [<args>]\n\nCleans and organizes the output\n\npositional arguments:\n  input       Input database.*.csv file\n  output      Output .csv file in an organized format\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n### GUI\nTo open the user interface you can simply write:\n\n```\ngreenotyper GUI\n```\n\n### run-unet\nIf the pipeline is to be run using U-net, then run-unet command should be used. The run-unet includes 3 more subcommands, which divide the pipeline into more steps. This was done so that the pipeline can be easily parallized with pre-processing and post-processing can be run seperately using has many processes as possible, and the U-net can be run on a GPU.\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper run-unet <command> [<args>]\n\nRunning U-net is divided into 3 steps:\n   preprocess      Runs the object detection and\n                   saves the crops ready to be run\n                   through the U-net\n   process         Runs U-net on the images.\n                   This can be run on a GUI for\n                   large speed ups.\n   postprocess     Output the results based on\n                   the predicted masks from the U-net\n\n\nCommands for running the U-net\n\npositional arguments:\n  command     Which run U-net command should be called\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n#### preprocess\nPreprocessing for U-net\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper run-unet preprocess <pipeline file> <input images> <output directory> [<args>]\n\nRuns the object detection and prepares crops to be run through U-net\n\npositional arguments:\n  pipeline              Required pipeline file.\n  input                 Directory with images\n  outputdir             Output directory where the preprocessed data is saved.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t THREADS, --threads THREADS\n                        Number of threads available to be used. Default: 1.\n                        Settings less than 0 use all available cores.\n  -b BATCH_SIZE, --batch-size BATCH_SIZE\n                        Batch size of images run simultaneously. Default is\n                        set to 10. Memory usage can be lower if the batch size\n                        is smaller.\n  --add_subdir ADD_SUBDIR\n                        Provide a directory for a subdirectory which is added\n                        to the output directory\n```\n\n#### process\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper run-unet process <input dir> <unet>\n\nProcess the cropped data and produced predicted masks using U-net.\n\npositional arguments:\n  inputdir    Input directory where batch results from the preprocessing are\n              located.\n  unet        The trained Unet hdf5 file\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n#### postprocess\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper run-unet postprocess <pipeline file> <inputdir> [<output args>]\n\nPostprocessing of the U-net masks. Outputs the desired information.\n\npositional arguments:\n  pipeline              Pipeline settings file\n  inputdir              Input directory containing processes data\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t THREADS, --threads THREADS\n                        Number of threads available. Only used to run on\n                        multiple images at a time. Default: 1. Settings less\n                        than 0 use all available cores.\n  -s SIZE_OUTPUT, --size_output SIZE_OUTPUT\n                        Output directory for the size measurements. Default is\n                        no output.\n  -g GREENNESS_OUTPUT, --greenness_output GREENNESS_OUTPUT\n                        Output directory for the greenness measurements.\n                        Default is no output.\n  -m MASK_OUTPUT, --mask_output MASK_OUTPUT\n                        Output directory for the produced masks. Default is no\n                        output.\n  -c CROP_OUTPUT, --crop_output CROP_OUTPUT\n                        Output directory for the cropped images. Default is no\n                        output.\n  --by_day              Subdividing the outputs based on per day. Recommended\n                        to use this option or --by_individual to avoid file\n                        system overflow.\n  --by_sample           Subdividing the outputs based on per individual.\n                        Recommended to use this option or --by_day avoid file\n                        system overflow.\n```\n\n### train-unet\n\nCommandline options for training a U-net\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper train-unet <training directory> <unet output> [<args>]\n\nCommandline options for creating and training the U-net\n\npositional arguments:\n  training_directory    Directory with training data\n  unet_output           Filename of the trained unet\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --validation_directory VALIDATION_DIRECTORY\n                        Directory with validation data\n  --validation_split VALIDATION_SPLIT\n                        Fraction of the training data used for validation, if\n                        no validation data is provided. Default is 0.2.\n  --epochs EPOCHS       The number of training epochs to be used. Default 20\n                        epochs\n  --augment_data        By default all augmentations will be performed on the\n                        training and validation data\n  --no_flips            Do not perform flips while augmenting the data.\n  --no_rotations        Do not perform rotations while augmenting the data.\n  --no_crops            Do not perform corner crops while augmenting the data.\n  --crop_size CROP_SIZE\n                        The dimension of the crops, the default is 460x460,\n                        input as 460, which is then rescaled to 512x512\n```\n\n### test-unet\n\nCommandline options for testing the segmentation accuracy of a trained U-net\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper test-unet <testing directory> <trained unet>\n\nTest a trained U-net and get segmentation accuracy of the model\n\npositional arguments:\n  testing_directory     Directory with images and labelled ground truth images\n  trained_unet          Filename of trained u-net model (.hdf5 format)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --output_masks OUTPUT_MASKS\n                        Output predicted masks to the provided directory\n  --ap_iou_threshold AP_IOU_THRESHOLD\n                        Set the IoU threshold used for the PASCAL VOC AP.\n                        Default is 0.5\n```\n\n\nPipeline setup guide\n--------------------\n\nNeural net training\n-------------------\n\n### Object detection\n#### installation\nThe object detection is done using the tensorflow object detection api, found on [GitHub here](https://github.com/tensorflow/models/tree/master/research/object_detection).\n\nThis guide has been tested on commit up to: [8518d05](https://github.com/tensorflow/models/commit/8518d053936aaf30afb9ed0a4ea01baddca5bd17). Future versions might change and the following guide might not be relevant. To use the version that is known to work, you can open the commit, and click browse files and download the whole models repository from that commit.\n\nThe object detection api only works on tensorflow 1.x versions, and therefore should be trainined an enivorinment installed with the latest tensorflow 1.x version. It does not work with tensorflow 2+.\n\nThe whole install guide provided [here](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md). If access to a GPU is available choose the tensorflow-gpu install over tensorflow. To be able use GPU, the [CUDA Toolkit](https://developer.nvidia.com/cuda-downloads) must be installed. Depending on the version of tensorflow installed, it depends on [different versions](https://www.tensorflow.org/install/source#tested_build_configurations). Supported tensorflow versions, 1.12.0, 1.13.0, 1.14.0 use different versions of CUDA. Version 1.12.0, depends on version 9 of CUDA, and versions 1.13.0 and 1.14.0 depend on version 10 of CUDA.\n\nHere is a version of installing that worked on a Mac OS X system:\n\n```bash\nconda create -n ObjectDetection python=3.6\n\nconda activate ObjectDetection\n\npip install tensorflow==1.14\n```\n\nVersions 1.13 and 1.12 of tensorflow should also work. Install the tensorflow-gpu version if the intent is to train on a GPU.\n```bash\npip install tensorflow-gpu==1.14\n```\n\nPip install tensorflow gets nearly all of the dependencies listed on the guide. However the remaining dependencies were installed like this:\n\n```bash\nconda install protobuf\n\npip install --user pycocotools\n```\n\nNext was retreiving the object detection API, by downloading the whole models repository. The API is dependent on other research packages in the repository. So start by cloning the latest version, or download this [commit](https://github.com/tensorflow/models/commit/8518d053936aaf30afb9ed0a4ea01baddca5bd17).\n\n```bash\ngit clone https://github.com/tensorflow/models.git\n```\n\nNext is to \"compile\" some of the code from the api using the following command:\n\n```bash\ncd models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\nNext make API callable, by exporting the directory to the python path:\n\n```bash\nexport PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n```\n\nNow you can test whether the API works by running the following command:\n\n```bash\npython object_detection/builders/model_builder_tf1_test.py\n```\n\nYou should get OK on all of the tests at the end. If you use tensorflow 1.14 you will get a lot of warnings, due to the version preparing people to upgrade to version 2, but you can ignore these.\n\n#### Preparing training and testing data\nThe training and testing data was created using the [labelImg tool](https://github.com/tzutalin/labelImg). The bounding boxes are manually drawn using labelImg, which outputs .xml files which describes the bounding boxes which have been drawn and the name of the class.\n\nThe data has to be processed into into tha different format so that the object detection api can read and use the training and testing data.\n\nFor this we created a simple script which converts the image + .xml files into .record files used by the object detection api. The scripts can be found [here](https://github.com/MarniTausen/Greenotyper/tree/master/training_data/object%20detection/create_tf_input.py).\nUsage of the script is as follows:\n\n```bash\npython create_tf_input.py inputdirectory -r output.record -l label_map.pbtxt\n```\n\nTo produce the training data, the images with the xml files must be stored in a directory:\n\n```bash\npython create_tf_input.py traindirectory -r train.record -l label_map.pbtxt\n```\n\nThe same for the testing data:\n\n```bash\npython create_tf_input.py testdirectory -r test.record -l label_map.pbtxt\n```\n\nFinally the [pipeline.config](https://github.com/MarniTausen/Greenotyper/blob/master/training_data/object%20detection/pipeline.config) file must be updated. Depending on what is being training, setting what the number of classes are being trained is important, and the number of steps the network is trained on. The full file locations of the training and testing (evaluation) data must be updated.\n\n#### Training and Testing\n\nTraining can now be run following the guide [here](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_locally.md). Training and evaluation (testing) are run with the same command.\n\nTo see the evaluation results you use tensorboard, which has been installed with tensorflow.\n\nTo export the network you can use the following export\\_inference\\_graph.py\n\n```\npython export_inference_graph.py \\\n    --input_type image_tensor \\\n    --pipeline_config_path path/to/filename.config \\\n    --trained_checkpoint_prefix path/to/model.ckpt \\\n    --output_directory path/to/exported_model_directory\n```\n\nThis function outputs the frozen\\_inference\\_graph.pd. Adding this file together with the label_map.pbtxt into a network directory creates the network input used in Greenotyper.\n\n### U-net\n\n#### Ground truth data\n\nTo train a U-net a ground truth dataset must be created. Here is an example of what the training data should look like to the inputted data.\n\nCropped Image | Ground truth mask\n:-------------:|:----------------:\n![](training_data/u-net/train/image/40.jpg)|![](training_data/u-net/train/label/40.jpg)\n\nThe Cropped Image should be a square image and preferrably a resolution which is a multiple of 2, so (512x512) or (1024x1024). (512x512) was used in our case. The ground truth mask should be a black and white jpeg. The background is white and the mask is black.\n\nThe quality of the segmentation that U-net will be capable of performing will depend on the quality of the ground truth masks produced.\n\nThe ground truth dataset should be divided into 3 parts. Training, validation and testing. Validation is not mandatory, since you can set a validation split, which means that a fraction of the training data will be used as validation during training. \nIn the study 50 ground truth images were produced, 10 were used for testing, 40 taken for training. 20% of the training data was used for validation, so 8 images were taken out, leaving 32 images in the training dataset.\n\nFor storing and inputting the data the images and ground truth should be stored in the image and label directories respectively. The directories are used as the input to the functions. Cropped images and their respective mask should have the exact same name. Please use the follow structure of directories:\n\n```\n- train\n\t- image\n\t- label\n- validation\n\t- image\n\t- label\n- test\n\t- image\n\t- label\n```\n\n#### Training the U-net\nThe options the train-unet command.\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper train-unet <training directory> <unet output> [<args>]\n\nCommandline options for creating and training the U-net\n\npositional arguments:\n  training_directory    Directory with training data\n  unet_output           Filename of the trained unet\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --validation_directory VALIDATION_DIRECTORY\n                        Directory with validation data\n  --validation_split VALIDATION_SPLIT\n                        Fraction of the training data used for validation, if\n                        no validation data is provided. Default is 0.2.\n  --epochs EPOCHS       The number of training epochs to be used. Default 20\n                        epochs\n  --augment_data        By default all augmentations will be performed on the\n                        training and validation data\n  --no_flips            Do not perform flips while augmenting the data.\n  --no_rotations        Do not perform rotations while augmenting the data.\n  --no_crops            Do not perform corner crops while augmenting the data.\n  --crop_size CROP_SIZE\n                        The dimension of the crops, the default is 460x460,\n                        input as 460, which is then rescaled to 512x512\n```\n\nThe command expects the training directory which contains the image and label directories, and the filename of the output unet. The currently best network during training will be saved to this filename.\n\nThe validation data can be provided with the --validation\\_directory command. If this is not provided it will automatically use --validation\\_split 0.2, and take 20% of the training data randomly as validation.\n\nThe number of training epochs can be set using the --epochs command. 1 epoch corresponds 1 full run through all of the training data. The default is set to 20 epochs, after this the network will start to overfit to the data. With more data available more epochs can be used before overfitting starts. By overfitting  it means that the training accuracy continues to increase while the validation accuracy will decrease.\n\nFinally augmentation options are available. Using --augment\\_data the training and validation data will be augmented to artificially increase the dataset sizes. By default it includes all of the augmentations available; flips, rotations and crops. Using all of the data will increase the datasets 40 fold. To disable any augmentation simply use --no\\_nameofaugmentation. To change the cropping size you can use --crop\\_size, by default it is set to 460. Which means it takes 4 crops from each corner of size 460x460 and rescales the crop back to 512x512. Avoid using crop size difference which are to large to avoid artifacts from rescaling.\n\n#### Testing the U-net\nOptions for testing the trained U-net\n\n```\n=========== GREENOTYPER (v0.7.0) ===========\nusage: greenotyper test-unet <testing directory> <trained unet>\n\nTest a trained U-net and get segmentation accuracy of the model\n\npositional arguments:\n  testing_directory     Directory with images and labelled ground truth images\n  trained_unet          Filename of trained u-net model (.hdf5 format)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --output_masks OUTPUT_MASKS\n                        Output predicted masks to the provided directory\n  --ap_iou_threshold AP_IOU_THRESHOLD\n                        Set the IoU threshold used for the PASCAL VOC AP.\n                        Default is 0.5\n```\n\nSubcommand test-unet takes 2 main arguments the directory with the testing data, and the trained unet. It will calculate all of the segmentation accuracies implemented and print a report. The segmentation accuracies implemented are Jaccard Index (Intersection Over Union), Dice coefficient, Recall, Precision, Pixel Accuracy, F1 score and the PASCAL VOC AP or Average Precision over Recall.\n\nThe --ap\\_iou\\_threshold option allows to change was the IoU (Intersection over Union) threshold used for the PASCAL VOC AP measure is. By default it is 0.5, which means if a mask has an IoU less than 0.5 it will be removed.\n\nThe --output\\_masks option can output the predicted masks used for the segmentation accuracies. The option expects a directory where it can write the output masks.\n\nIf the U-net gets high segmentation accuracies, then it is ready for being used in the analysis.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MarniTausen/Greenotyper",
    "keywords": "phenotyping detection",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "greenotyper",
    "package_url": "https://pypi.org/project/greenotyper/",
    "platform": "",
    "project_url": "https://pypi.org/project/greenotyper/",
    "project_urls": {
      "Homepage": "https://github.com/MarniTausen/Greenotyper"
    },
    "release_url": "https://pypi.org/project/greenotyper/0.7.0/",
    "requires_dist": [
      "tensorflow (>=2)",
      "PyQt5 (>=5.9)",
      "numpy (>=1.15)",
      "scikit-image (>=0.14)",
      "pillow (>=5.2)",
      "tqdm (>=4.40)"
    ],
    "requires_python": "~=3.6",
    "summary": "Plant image-based phenotyping pipeline",
    "version": "0.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7755076,
  "releases": {
    "0.6.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90f1d0a511fb384bb0bbd28f86c2cb823e3e408c1d614ed870079e1cab593021",
          "md5": "98992ff939243f9f22b8d185cf0b45cb",
          "sha256": "a0938d83c80e0971c8a0cf04852378e750be11a037b8dfcef1f8ab9405b6e8f9"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98992ff939243f9f22b8d185cf0b45cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 631988,
        "upload_time": "2020-01-24T11:46:21",
        "upload_time_iso_8601": "2020-01-24T11:46:21.431859Z",
        "url": "https://files.pythonhosted.org/packages/90/f1/d0a511fb384bb0bbd28f86c2cb823e3e408c1d614ed870079e1cab593021/greenotyper-0.6.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf99349c47748402ef9fedcbca9ab0bfc0ef4a9c096aef4ff67d79cc4afbd713",
          "md5": "53a21d59fcd5932399f2061994483296",
          "sha256": "9f8e59711741f6f5e9c481acd9b0e0e982ba35f584b8d05958e815ecfbacb989"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "53a21d59fcd5932399f2061994483296",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 617936,
        "upload_time": "2020-01-24T11:46:25",
        "upload_time_iso_8601": "2020-01-24T11:46:25.729317Z",
        "url": "https://files.pythonhosted.org/packages/cf/99/349c47748402ef9fedcbca9ab0bfc0ef4a9c096aef4ff67d79cc4afbd713/greenotyper-0.6.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db350ef4bf5e4c5c318d3d2fe88a3b57addbc72a244d96bfb98c131ccf793959",
          "md5": "e36d29cda084f68af260e6b40e8eb2a9",
          "sha256": "4197184ddb2b00e83059deefdfd03209e3d60b1300cdd3b46cab9850ae97eb53"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e36d29cda084f68af260e6b40e8eb2a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 619317,
        "upload_time": "2019-12-18T12:58:30",
        "upload_time_iso_8601": "2019-12-18T12:58:30.257195Z",
        "url": "https://files.pythonhosted.org/packages/db/35/0ef4bf5e4c5c318d3d2fe88a3b57addbc72a244d96bfb98c131ccf793959/greenotyper-0.6.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfccb7a73bbbf45de2ab8942ea81e7e8b0a150b88768fe44bb8775e787b46f8d",
          "md5": "0d2addf537079fa4afb3393798feea5b",
          "sha256": "cca1e0a1a430e751e8a4a8358e7009809015475f1741a68b0a31ffadeb699d30"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "0d2addf537079fa4afb3393798feea5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 617392,
        "upload_time": "2019-12-18T12:58:33",
        "upload_time_iso_8601": "2019-12-18T12:58:33.380090Z",
        "url": "https://files.pythonhosted.org/packages/bf/cc/b7a73bbbf45de2ab8942ea81e7e8b0a150b88768fe44bb8775e787b46f8d/greenotyper-0.6.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf6e09c9e45247f49be36593e0b7f28258df45a3425e74bfba1fd65e235524da",
          "md5": "0e4d249fcebcf1e9230dba39f7a378c9",
          "sha256": "fab22c8bc60aa65c8921284301948a36d97dd21e9b086dd5cb4ec26790cd3aa4"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e4d249fcebcf1e9230dba39f7a378c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 632040,
        "upload_time": "2020-01-17T13:59:16",
        "upload_time_iso_8601": "2020-01-17T13:59:16.446779Z",
        "url": "https://files.pythonhosted.org/packages/bf/6e/09c9e45247f49be36593e0b7f28258df45a3425e74bfba1fd65e235524da/greenotyper-0.6.0rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5cd77a4b33d9897a35d48039cfb1aebce22a2b9afad1e8b0605b09795c8f0a6",
          "md5": "ea3f4a814ca875dd1b150be9538ad955",
          "sha256": "0f0f1ad6956a4071ef12060e32ae7873ce249e169c4a6d6f4432aedd76f55456"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "ea3f4a814ca875dd1b150be9538ad955",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 618016,
        "upload_time": "2020-01-17T13:59:18",
        "upload_time_iso_8601": "2020-01-17T13:59:18.914156Z",
        "url": "https://files.pythonhosted.org/packages/d5/cd/77a4b33d9897a35d48039cfb1aebce22a2b9afad1e8b0605b09795c8f0a6/greenotyper-0.6.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0rc3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f163bf4a40a82a6302ecb67b2c035ab03ed10f16e66e11ae93c8c5ca25c4061f",
          "md5": "e1c41a6e747c469abb56662f4538d643",
          "sha256": "14e5ac629d3e1a0f7fd557b668c5a3cc3437df5b166dd947d0b00087a32415a6"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0rc3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1c41a6e747c469abb56662f4538d643",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 632053,
        "upload_time": "2020-01-23T14:58:39",
        "upload_time_iso_8601": "2020-01-23T14:58:39.201378Z",
        "url": "https://files.pythonhosted.org/packages/f1/63/bf4a40a82a6302ecb67b2c035ab03ed10f16e66e11ae93c8c5ca25c4061f/greenotyper-0.6.0rc3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee39c7063db1c6126602bf9fd883131a8ea55d1614e7946a511bf66277671f8e",
          "md5": "32cb9fab1f635ac0ee46541b27c56b4e",
          "sha256": "e67102f27b4b32a15ee14d06f6fe33e73608374b4fc8ba7643583358febef794"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0rc3.tar.gz",
        "has_sig": false,
        "md5_digest": "32cb9fab1f635ac0ee46541b27c56b4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 617999,
        "upload_time": "2020-01-23T14:58:42",
        "upload_time_iso_8601": "2020-01-23T14:58:42.588715Z",
        "url": "https://files.pythonhosted.org/packages/ee/39/c7063db1c6126602bf9fd883131a8ea55d1614e7946a511bf66277671f8e/greenotyper-0.6.0rc3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0rc4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa66dcaabaf6d18108f99a781bd2bc448e8e802f5f4d8cc036185eaeedfa095b",
          "md5": "3d9179e3aca52691af96ea854cd76f9b",
          "sha256": "5eb569eba820fe5cfedb0fbb2df9978b8266df113c4deedede15a9f1b715847a"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0rc4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d9179e3aca52691af96ea854cd76f9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 632006,
        "upload_time": "2020-01-24T11:42:40",
        "upload_time_iso_8601": "2020-01-24T11:42:40.332360Z",
        "url": "https://files.pythonhosted.org/packages/fa/66/dcaabaf6d18108f99a781bd2bc448e8e802f5f4d8cc036185eaeedfa095b/greenotyper-0.6.0rc4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0c01dacc20e280cf160b5235cb30747e695918950a927de771ff5def4becc3b",
          "md5": "7103907c2d3065bd830bf4b64924e0ba",
          "sha256": "0bc0a43353738ec2c935edc5a4567e717e5607c7821d063330d3813e8631c736"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.0rc4.tar.gz",
        "has_sig": false,
        "md5_digest": "7103907c2d3065bd830bf4b64924e0ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 617943,
        "upload_time": "2020-01-24T11:42:43",
        "upload_time_iso_8601": "2020-01-24T11:42:43.776468Z",
        "url": "https://files.pythonhosted.org/packages/c0/c0/1dacc20e280cf160b5235cb30747e695918950a927de771ff5def4becc3b/greenotyper-0.6.0rc4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e30f2f000c7510082d36d08c92f88ab180da3f59ff2939b7e1ccd99b5e38c215",
          "md5": "2cc915d1ed596d596fb0eee0c1b50eb8",
          "sha256": "f936a7940044ec89f8e8527e6837f57475fefa1f4d29fcb1ea85f76f8fcd802c"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cc915d1ed596d596fb0eee0c1b50eb8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 636582,
        "upload_time": "2020-05-15T11:33:16",
        "upload_time_iso_8601": "2020-05-15T11:33:16.750885Z",
        "url": "https://files.pythonhosted.org/packages/e3/0f/2f000c7510082d36d08c92f88ab180da3f59ff2939b7e1ccd99b5e38c215/greenotyper-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d90f223b9fdddd3f7336d7409c43aadfbd42c91cc24523b8f9196e78e7c4537",
          "md5": "2c4e37dadf40a27de173ad7154170ff9",
          "sha256": "854c372b3589bf952f194e21e8d0454582ea599ac2ba532ca290900d96a51388"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c4e37dadf40a27de173ad7154170ff9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 623073,
        "upload_time": "2020-05-15T11:33:26",
        "upload_time_iso_8601": "2020-05-15T11:33:26.944783Z",
        "url": "https://files.pythonhosted.org/packages/1d/90/f223b9fdddd3f7336d7409c43aadfbd42c91cc24523b8f9196e78e7c4537/greenotyper-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a677fff16b38615e5fbde3ab85d955fc36ef763854cb7cc3f04fa6a75061258",
          "md5": "d01cbbb9c0646c106a74e1dbe28a41e0",
          "sha256": "de5856924622f433352728bc30bce9689f8d2d5eaceabbcf9a0741f06ac30b2d"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.1rc1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "d01cbbb9c0646c106a74e1dbe28a41e0",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": "~=3.6",
        "size": 636636,
        "upload_time": "2020-05-15T07:55:44",
        "upload_time_iso_8601": "2020-05-15T07:55:44.603968Z",
        "url": "https://files.pythonhosted.org/packages/8a/67/7fff16b38615e5fbde3ab85d955fc36ef763854cb7cc3f04fa6a75061258/greenotyper-0.6.1rc1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3abcee55c569fa64d44f9b1457e5b5fe0558ba0ca835df018482aef677e517a2",
          "md5": "3137f0fb3986f4e5f469fed5a308bfc8",
          "sha256": "ba48e5ca1d5dfee7fc9b2bad18539666308464030914fcb6e994329907c4a5cb"
        },
        "downloads": -1,
        "filename": "greenotyper-0.6.1rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "3137f0fb3986f4e5f469fed5a308bfc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 623105,
        "upload_time": "2020-05-15T07:55:51",
        "upload_time_iso_8601": "2020-05-15T07:55:51.831539Z",
        "url": "https://files.pythonhosted.org/packages/3a/bc/ee55c569fa64d44f9b1457e5b5fe0558ba0ca835df018482aef677e517a2/greenotyper-0.6.1rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8351960de705a883795f7ecac4d7d1885e6c55c1f69aa380260f7260d926a19",
          "md5": "0bf8584796ac1c00f6632293ca721e10",
          "sha256": "7e91182a11e3bafa8890fdc21adbe47b1904d0baa1c821968ba9cfff90138db7"
        },
        "downloads": -1,
        "filename": "greenotyper-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0bf8584796ac1c00f6632293ca721e10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 643211,
        "upload_time": "2020-07-22T08:09:31",
        "upload_time_iso_8601": "2020-07-22T08:09:31.958827Z",
        "url": "https://files.pythonhosted.org/packages/a8/35/1960de705a883795f7ecac4d7d1885e6c55c1f69aa380260f7260d926a19/greenotyper-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "895ecf2f9fe4bbf085139c8894a9c154360317ce2c0c85e71d3007b8552c1b1b",
          "md5": "08299d6b00215fa48ff516c02c46600f",
          "sha256": "bade2165b42408a83528c81ea33c02d5044e00ddceb24c8bb022f09193a45659"
        },
        "downloads": -1,
        "filename": "greenotyper-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "08299d6b00215fa48ff516c02c46600f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 632119,
        "upload_time": "2020-07-22T08:09:38",
        "upload_time_iso_8601": "2020-07-22T08:09:38.665833Z",
        "url": "https://files.pythonhosted.org/packages/89/5e/cf2f9fe4bbf085139c8894a9c154360317ce2c0c85e71d3007b8552c1b1b/greenotyper-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82475978205a77e595a68dc5c1b3a3cc72139272205316dee1a80114fa301fe0",
          "md5": "db4ff181af385e6150ab5dfae7fc6e8a",
          "sha256": "b6f5ebae22bd9dffa696627dc637e786cd69cb8542946f1e2251a35df5d4e73f"
        },
        "downloads": -1,
        "filename": "greenotyper-0.7.0rc1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "db4ff181af385e6150ab5dfae7fc6e8a",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": "~=3.6",
        "size": 643268,
        "upload_time": "2020-06-08T14:06:38",
        "upload_time_iso_8601": "2020-06-08T14:06:38.938408Z",
        "url": "https://files.pythonhosted.org/packages/82/47/5978205a77e595a68dc5c1b3a3cc72139272205316dee1a80114fa301fe0/greenotyper-0.7.0rc1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14042de550f1b23d38c2bb69f26788fb837bb4ead9e641df7965372fe48d85b3",
          "md5": "b8c058d8eaf9e29867a6f787b6ce487a",
          "sha256": "700113b4dae19d46b8d839b6abbf8372c7e7afeedcdfa03af5aae3f98a0d2d5a"
        },
        "downloads": -1,
        "filename": "greenotyper-0.7.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8c058d8eaf9e29867a6f787b6ce487a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 643269,
        "upload_time": "2020-06-08T14:06:40",
        "upload_time_iso_8601": "2020-06-08T14:06:40.638350Z",
        "url": "https://files.pythonhosted.org/packages/14/04/2de550f1b23d38c2bb69f26788fb837bb4ead9e641df7965372fe48d85b3/greenotyper-0.7.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66e12299658898190a5a235879fdd0218c3c3afbcc7eef5b0726faba381aeb6b",
          "md5": "4f08190b1fcbd043dc99af1298234a76",
          "sha256": "e813a02be0df5b77a7cd0d323a4533e2d12ed0e7490fc17e90e4b12168f6df8a"
        },
        "downloads": -1,
        "filename": "greenotyper-0.7.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "4f08190b1fcbd043dc99af1298234a76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 632113,
        "upload_time": "2020-06-08T14:06:46",
        "upload_time_iso_8601": "2020-06-08T14:06:46.269708Z",
        "url": "https://files.pythonhosted.org/packages/66/e1/2299658898190a5a235879fdd0218c3c3afbcc7eef5b0726faba381aeb6b/greenotyper-0.7.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8351960de705a883795f7ecac4d7d1885e6c55c1f69aa380260f7260d926a19",
        "md5": "0bf8584796ac1c00f6632293ca721e10",
        "sha256": "7e91182a11e3bafa8890fdc21adbe47b1904d0baa1c821968ba9cfff90138db7"
      },
      "downloads": -1,
      "filename": "greenotyper-0.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0bf8584796ac1c00f6632293ca721e10",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 643211,
      "upload_time": "2020-07-22T08:09:31",
      "upload_time_iso_8601": "2020-07-22T08:09:31.958827Z",
      "url": "https://files.pythonhosted.org/packages/a8/35/1960de705a883795f7ecac4d7d1885e6c55c1f69aa380260f7260d926a19/greenotyper-0.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "895ecf2f9fe4bbf085139c8894a9c154360317ce2c0c85e71d3007b8552c1b1b",
        "md5": "08299d6b00215fa48ff516c02c46600f",
        "sha256": "bade2165b42408a83528c81ea33c02d5044e00ddceb24c8bb022f09193a45659"
      },
      "downloads": -1,
      "filename": "greenotyper-0.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "08299d6b00215fa48ff516c02c46600f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 632119,
      "upload_time": "2020-07-22T08:09:38",
      "upload_time_iso_8601": "2020-07-22T08:09:38.665833Z",
      "url": "https://files.pythonhosted.org/packages/89/5e/cf2f9fe4bbf085139c8894a9c154360317ce2c0c85e71d3007b8552c1b1b/greenotyper-0.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}