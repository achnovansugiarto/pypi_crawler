{
  "info": {
    "author": "OpenFGA (https://openfga.dev)",
    "author_email": "community@openfga.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Python SDK for OpenFGA\n\n[![pypi](https://img.shields.io/pypi/v/openfga_sdk.svg?style=flat)](https://pypi.org/project/openfga_sdk)\n[![Release](https://img.shields.io/github/v/release/openfga/python-sdk?sort=semver&color=green)](https://github.com/openfga/python-sdk/releases)\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](./LICENSE)\n[![FOSSA Status](https://app.fossa.com/api/projects/custom%2B4989%2Fgithub.com%2Fopenfga%2Fpython-sdk.svg?type=shield)](https://app.fossa.com/reports/824fbc44-7513-4496-84a4-f7ffb3fa23f7)\n[![Discord Server](https://img.shields.io/discord/759188666072825867?color=7289da&logo=discord \"Discord Server\")](https://discord.com/channels/759188666072825867/930524706854031421)\n[![Twitter](https://img.shields.io/twitter/follow/openfga?color=%23179CF0&logo=twitter&style=flat-square \"@openfga on Twitter\")](https://twitter.com/openfga)\n\nThis is an autogenerated python SDK for OpenFGA. It provides a wrapper around the [OpenFGA API definition](https://openfga.dev/api).\n\n## Table of Contents\n\n- [About OpenFGA](#about)\n- [Resources](#resources)\n- [Installation](#installation)\n- [Getting Started](#getting-started)\n  - [Initializing the API Client](#initializing-the-api-client)\n  - [Get your Store ID](#get-your-store-id)\n  - [Calling the API](#calling-the-api)\n    - [List All Stores](#list-stores)\n    - [Create a Store](#create-store)\n    - [Get a Store](#get-store)\n    - [Delete a Store](#delete-store)\n    - [Write Authorization Model](#write-authorization-model)\n    - [Read a Single Authorization Model](#read-a-single-authorization-model)\n    - [Read Authorization Model IDs](#read-authorization-model-ids)\n    - [Check](#check)\n    - [Write Tuples](#write-tuples)\n    - [Delete Tuples](#delete-tuples)\n    - [Expand](#expand)\n    - [Read Tuples](#read-tuples)\n    - [Read Changes (Watch)](#read-changes-watch)\n    - [List Objects](#list-objects)\n  - [API Endpoints](#api-endpoints)\n  - [Models](#models)\n- [Contributing](#contributing)\n  - [Issues](#issues)\n  - [Pull Requests](#pull-requests)\n- [License](#license)\n\n## About\n\n[OpenFGA](https://openfga.dev) is an open source Fine-Grained Authorization solution inspired by [Google's Zanzibar paper](https://research.google/pubs/pub48190/). It was created by the FGA team at [Auth0](https://auth0.com) based on [Auth0 Fine-Grained Authorization (FGA)](https://fga.dev), available under [a permissive license (Apache-2)](https://github.com/openfga/rfcs/blob/main/LICENSE) and welcomes community contributions.\n\nOpenFGA is designed to make it easy for application builders to model their permission layer, and to add and integrate fine-grained authorization into their applications. OpenFGAâ€™s design is optimized for reliability and low latency at a high scale.\n\n\n## Resources\n\n- [OpenFGA Documentation](https://openfga.dev/docs)\n- [OpenFGA API Documentation](https://openfga.dev/api/service)\n- [Twitter](https://twitter.com/openfga)\n- [OpenFGA Discord Community](https://discord.gg/8naAwJfWN6)\n- [Zanzibar Academy](https://zanzibar.academy)\n- [Google's Zanzibar Paper (2019)](https://research.google/pubs/pub48190/)\n\n## Installation\n\n### pip install\n\n#### PyPI\n\nThe openfga_sdk is available to be downloaded via PyPI, you can install directly using:\n\n```sh\npip3 install openfga_sdk\n```\n(you may need to run `pip` with root permission: `sudo pip3 install openfga_sdk`)\n\nThen import the package:\n```python\nimport openfga_sdk\n```\n\n#### GitHub\n\nThe openfga_sdk is also hosted in GitHub, you can install directly using:\n\n```sh\npip3 install https://github.com/openfga/python-sdk.git\n```\n(you may need to run `pip` with root permission: `sudo pip3 install https://github.com/openfga/python-sdk.git`)\n\nThen import the package:\n```python\nimport openfga_sdk\n```\n\n### Setuptools\n\nInstall via [Setuptools](https://pypi.python.org/pypi/setuptools).\n\n```sh\npython setup.py install --user\n```\n(or `sudo python setup.py install` to install the package for all users)\n\nThen import the package:\n```python\nimport openfga_sdk\n```\n\n\n## Getting Started\n\n### Initializing the API Client\n\n[Learn how to initialize your SDK](https://openfga.dev/docs/getting-started/setup-sdk-client)\n\n#### No Authentication ####\n\n##### Without Store ID #####\n\nTo configure the SDK API client without store ID, we can initialize the api client by specifying the scheme and host.\n\n```python\nimport openfga_sdk\nfrom openfga_sdk.api import open_fga_api\n\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = 'https',\n    api_host = 'api.fga.example'\n)\n\nasync def api_setup():\n    # Enter a context with an instance of the API client\n    async with openfga_sdk.ApiClient(configuration) as api_client:\n        # Create an instance of the API class\n        api_instance = open_fga_api.OpenFgaApi(api_client)\n\n```\n\n##### With Store ID #####\n\nTo configure the SDK API client store ID, we can initialize the api client by specifying the scheme, host and store_id.\n\n```python\nimport openfga_sdk\nfrom openfga_sdk.api import open_fga_api\n\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = 'https',\n    api_host = 'api.fga.example',\n    store_id = 'YOUR_STORE_ID'\n)\n\nasync def api_setup():\n    # Enter a context with an instance of the API client\n    async with openfga_sdk.ApiClient(configuration) as api_client:\n        # Create an instance of the API class\n        api_instance = open_fga_api.OpenFgaApi(api_client)\n\n```\n\nAnother possibility is to use the existing configuration and add store id in its configuration\n\n```python\nimport openfga_sdk\nfrom openfga_sdk.api import open_fga_api\n\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = 'https',\n    api_host = 'api.fga.example'\n)\n\nasync def api_setup():\n    configuration.store_id = 'YOUR_STORE_ID'\n\n    # Enter a context with an instance of the API client\n    async with openfga_sdk.ApiClient(configuration) as api_client:\n        # Create an instance of the API class\n        api_instance = open_fga_api.OpenFgaApi(api_client)\n\n```\n\n#### Authentication via API Token ####\n\nTo configure the SDK API client with authentication via API TOKEN, we can initialize the api client by specifying the scheme, host and credentials.\n\n```python\nimport openfga_sdk\nfrom openfga_sdk.api import open_fga_api\nfrom openfga_sdk.credentials import Credentials, CredentialConfiguration\n\ncredentials = Credentials(method='api_token', configuration=CredentialConfiguration(api_token='TOKEN1'))\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = 'https',\n    api_host = 'api.fga.example',\n    credentials = credentials\n)\n\nasync def api_setup():\n    # Enter a context with an instance of the API client\n    async with openfga_sdk.ApiClient(configuration) as api_client:\n        # Create an instance of the API class\n        api_instance = open_fga_api.OpenFgaApi(api_client)\n\n```\n\n\n### Get your Store ID\n\nYou need your store id to call the OpenFGA API (unless it is to call the [CreateStore](#create-store) or [ListStores](#list-stores) methods).\n\nIf your server is configured with [authentication enabled](https://openfga.dev/docs/getting-started/setup-openfga#configuring-authentication), you also need to have your credentials ready.\n\n### Calling the API\n\n#### List Stores\n\n[API Documentation](https://openfga.dev/api/service/docs/api#/Stores/ListStores)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n)\n\n# Get all stores\nasync def list_stores():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n\n    response = await api_instance.list_stores()\n    # response = ListStoreResponse(...)\n    # response.stores = [Store({\"id\": \"01FQH7V8BEG3GPQW93KTRFR8JB\", \"name\": \"FGA Demo Store\", \"created_at\": \"2022-01-01T00:00:00.000Z\", \"updated_at\": \"2022-01-01T00:00:00.000Z\"})]\n    await api_client.close()\n```\n\n#### Create Store\n\n[API Documentation](https://openfga.dev/api/service/docs/api#/Stores/CreateStore)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n)\n\n# Create a store\nasync def create_store():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n\n    body = CreateStoreRequest(\n        name = \"FGA Demo Store\",\n    )\n    response = await api_instance.create_store(body)\n    # response.id = \"01FQH7V8BEG3GPQW93KTRFR8JB\"\n    await api_client.close()\n```\n\n\n#### Get Store\n\n[API Documentation](https://openfga.dev/api/service/docs/api#/Stores/GetStore)\n\n> Requires a client initialized with a storeId\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Get a store\nasync def get_store():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n\n    response = await api_instance.get_store()\n    # response = Store({\"id\": \"01FQH7V8BEG3GPQW93KTRFR8JB\", \"name\": \"FGA Demo Store\", \"created_at\": \"2022-01-01T00:00:00.000Z\", \"updated_at\": \"2022-01-01T00:00:00.000Z\"})\n    await api_client.close()\n```\n\n\n#### Delete Store\n\n[API Documentation](https://openfga.dev/api/service/docs/api#/Stores/DeleteStore)\n\n> Requires a client initialized with a storeId\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Delete a store\nasync def delete_store():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n\n    await api_instance.delete_store()\n    await api_client.close()\n```\n\n#### Write Authorization Model\n\n[API Documentation](https://openfga.dev/api/service#/Authorization%20Models/WriteAuthorizationModel)\n\n> Requires a client initialized with a storeId\n\n> Note: To learn how to build your authorization model, check the Docs at https://openfga.dev/docs.\n\n> Learn more about [the OpenFGA configuration language](https://openfga.dev/docs/configuration-language).\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Create a new authorization model\nasync def write_authorization_model():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n    type_definitions = WriteAuthorizationModelRequest(\n        type_definitions=[\n            TypeDefinition(\n                type=\"user\",\n            ),\n            TypeDefinition(\n                type=\"document\",\n                relations=dict(\n                    writer=Userset(\n                        this=dict(),\n                    ),\n                    viewer=Userset(\n                        union=Usersets(\n                            child=[\n                                Userset(this=dict()),\n                                Userset(computed_userset=ObjectRelation(\n                                    object=\"\",\n                                    relation=\"writer\",\n                                )),\n                            ],\n                        ),\n                    ),\n                )\n            ),\n        ],\n    )\n\n    response = await api_instance.write_authorization_model(type_definitions)\n    # response.authorization_model_id = \"1uHxCSuTP0VKPYSnkq1pbb1jeZw\"\n    await api_client.close()\n```\n\n\n#### Read a Single Authorization Model\n\n[API Documentation](https://openfga.dev/api/service#/Authorization%20Models/ReadAuthorizationModel)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Return a particular version of an authorization model\nasync def read_authorization_id():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n    id = \"1uHxCSuTP0VKPYSnkq1pbb1jeZw\" #  Assuming `1uHxCSuTP0VKPYSnkq1pbb1jeZw` is an id of an existing model\n\n    response = await api_instance.read_authorization_model(id)\n    # response.authorization_model =  AuthorizationModel(id='1uHxCSuTP0VKPYSnkq1pbb1jeZw', type_definitions=type_definitions[...])\n    await api_client.close()\n```\n\n#### Read Authorization Model IDs\n\n[API Documentation](https://openfga.dev/api/service#/Authorization%20Models/ReadAuthorizationModels)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Return all the authorization models for a particular store\nasync def read_authorization_models():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n\n    response = await api_instance.read_authorization_models()\n    # response.authorization_models = [AuthorizationModel(id='1uHxCSuTP0VKPYSnkq1pbb1jeZw', type_definitions=type_definitions[...], AuthorizationModel(id='GtQpMohWezFmIbyXxVEocOCxxgq', type_definitions=type_definitions[...])]\n    await api_client.close()\n```\n\n\n#### Check\n\n[API Documentation](https://openfga.dev/api/service#/Relationship%20Queries/Check)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Check whether a user is authorized to access an object\nasync def check():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n    body = CheckRequest(\n        tuple_key=TupleKey(\n            user=\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\",\n            relation=\"viewer\",\n            object=\"document:roadmap\",\n        ),\n        authorization_model_id=\"1uHxCSuTP0VKPYSnkq1pbb1jeZw\",\n    )\n\n    response = await api_instance.check(body)\n    # response.allowed = True\n    await api_client.close()\n```\n\n\n#### Write Tuples\n\n[API Documentation](https://openfga.dev/api/service#/Relationship%20Tuples/Write)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Add tuples from the store\nasync def write():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n    body = WriteRequest(\n        writes=TupleKeys(\n            tuple_keys=[\n                TupleKey(\n                    user=\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\",\n                    relation=\"viewer\",\n                    object=\"document:roadmap\",\n                ),\n            ],\n        ),\n        authorization_model_id=\"1uHxCSuTP0VKPYSnkq1pbb1jeZw\",\n    )\n\n    response = await api_instance.write(body)\n    await api_client.close()\n```\n\n#### Delete Tuples\n\n[API Documentation](https://openfga.dev/api/service#/Relationship%20Tuples/Write)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Delete tuples from the store\nasync def delete():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n    body = WriteRequest(\n        deletes=TupleKeys(\n            tuple_keys=[\n                TupleKey(\n                    user=\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\",\n                    relation=\"viewer\",\n                    object=\"document:roadmap\",\n                ),\n            ],\n        ),\n        authorization_model_id=\"1uHxCSuTP0VKPYSnkq1pbb1jeZw\",\n    ) \n\n    response = await api_instance.write(body)\n    await api_client.close()\n```\n\n#### Expand\n\n[API Documentation](https://openfga.dev/api/service#/Relationship%20Queries/Expand)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship\nasync def expand():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n    body = ExpandRequest(\n        tuple_key=TupleKey(\n            relation=\"viewer\",\n            object=\"document:roadmap\",\n        ),\n        authorization_model_id=\"1uHxCSuTP0VKPYSnkq1pbb1jeZw\",\n    )\n\n    response = await api_instance.expand(body)\n    # response = ExpandResponse({\"tree\": UsersetTree({\"root\": Node({\"name\": \"document:roadmap#viewer\", \"leaf\": Leaf({\"users\": Users({\"users\": [\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\", \"user:f52a4f7a-054d-47ff-bb6e-3ac81269988f\"]})})})})})\n    await api_client.close()\n```\n\n#### Read Changes\n\n[API Documentation](https://openfga.dev/api/service#/Relationship%20Tuples/Read)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\nasync def read():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n\n    # Find if a relationship tuple stating that a certain user is a viewer of certain document\n    body = ReadRequest(\n        tuple_key=TupleKey(\n            user=\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\",\n            relation=\"viewer\",\n            object=\"document:roadmap\",\n        ),\n    ) \n\n    # Find all relationship tuples where a certain user has a relationship as any relation to a certain document\n    body = ReadRequest(\n        tuple_key=TupleKey(\n            user=\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\",\n            object=\"document:roadmap\",\n        ),\n    ) \n\n    # Find all relationship tuples where a certain user is a viewer of any document\n    body = ReadRequest(\n        tuple_key=TupleKey(\n            user=\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\",\n            relation=\"viewer\",\n            object=\"document:\",\n        ),\n    )\n\n    # Find all relationship tuples where any user has a relationship as any relation with a particular document\n    body = ReadRequest(\n        tuple_key=TupleKey(\n            object=\"document:roadmap\",\n        ),\n    )\n\n    // Read all stored relationship tuples\n    body := ReadRequest()\n\n    response = await api_instance.read(body)\n    # response = ReadResponse({\"tuples\": [Tuple({\"key\": TupleKey({\"user\":\"...\",\"relation\":\"...\",\"object\":\"...\"}), \"timestamp\": datetime.fromisoformat(\"...\") })]})\n    await api_client.close()\n```\n\n#### Read Changes (Watch)\n\n[API Documentation](https://openfga.dev/api/service#/Relationship%20Tuples/ReadChanges)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# Return a list of all the tuple changes\nasync def read_changes():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n\n    type = \"document\"\n    page_size = 25\n    continuation_token = \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\"\n\n    response = await api_instance.read_changes(type=type, page_size=page_size, continuation_token=continuation_token)\n    # response.continuation_token = ...\n    # response.changes = [TupleChange(tuple_key=TupleKey(object=\"...\",relation=\"...\",user=\"...\"),operation=TupleOperation(\"TUPLE_OPERATION_WRITE\"),timestamp=datetime.fromisoformat(\"...\"))]\n    await api_client.close()\n```\n\n#### List Objects\n\n[API Documentation](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects)\n\n```python\nconfiguration = openfga_sdk.Configuration(\n    api_scheme = os.environ.get(OPENFGA_API_SCHEME),\n    api_host = os.environ.get(OPENFGA_API_HOST),\n    store_id = os.environ.get(OPENFGA_STORE_ID),\n)\n\n# ListObjects lists all of the object ids for objects of the provided type that the given user has a specific relation with.\nasync def list_objects():\n    # Create an instance of the API class\n    api_client = openfga_sdk.ApiClient(configuration)\n    api_instance = open_fga_api.OpenFgaApi(api_client)\n    body = ListObjectsRequest(\n        authorization_model_id=\"1uHxCSuTP0VKPYSnkq1pbb1jeZw\",\n        user=\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\",\n        relation=\"viewer\",\n        type=\"document\",\n        contextual_tuples=ContextualTupleKeys( # optional\n            tuple_keys=[\n                TupleKey(\n                    user=\"user:81684243-9356-4421-8fbf-a4f8d36aa31b\",\n                    relation=\"writer\",\n                    object=\"document:budget\",\n                ),\n            ],\n        ),\n    )\n\n    response = await api_instance.list_objects(body)\n    # response.objects = [\"document:roadmap\"]\n    await api_client.close()\n```\n\n\n### API Endpoints\n\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*OpenFgaApi* | [**check**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#check) | **POST** /stores/{store_id}/check | Check whether a user is authorized to access an object\n*OpenFgaApi* | [**create_store**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#create_store) | **POST** /stores | Create a store\n*OpenFgaApi* | [**delete_store**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#delete_store) | **DELETE** /stores/{store_id} | Delete a store\n*OpenFgaApi* | [**expand**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#expand) | **POST** /stores/{store_id}/expand | Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship\n*OpenFgaApi* | [**get_store**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#get_store) | **GET** /stores/{store_id} | Get a store\n*OpenFgaApi* | [**list_objects**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#list_objects) | **POST** /stores/{store_id}/list-objects | [EXPERIMENTAL] Get all objects of the given type that the user has a relation with\n*OpenFgaApi* | [**list_stores**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#list_stores) | **GET** /stores | List all stores\n*OpenFgaApi* | [**read**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read) | **POST** /stores/{store_id}/read | Get tuples from the store that matches a query, without following userset rewrite rules\n*OpenFgaApi* | [**read_assertions**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read_assertions) | **GET** /stores/{store_id}/assertions/{authorization_model_id} | Read assertions for an authorization model ID\n*OpenFgaApi* | [**read_authorization_model**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read_authorization_model) | **GET** /stores/{store_id}/authorization-models/{id} | Return a particular version of an authorization model\n*OpenFgaApi* | [**read_authorization_models**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read_authorization_models) | **GET** /stores/{store_id}/authorization-models | Return all the authorization models for a particular store\n*OpenFgaApi* | [**read_changes**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#read_changes) | **GET** /stores/{store_id}/changes | Return a list of all the tuple changes\n*OpenFgaApi* | [**write**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#write) | **POST** /stores/{store_id}/write | Add or delete tuples from the store\n*OpenFgaApi* | [**write_assertions**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#write_assertions) | **PUT** /stores/{store_id}/assertions/{authorization_model_id} | Upsert assertions for an authorization model ID\n*OpenFgaApi* | [**write_authorization_model**](https://github.com/openfga/python-sdk/blob/main/docs/OpenFgaApi.md#write_authorization_model) | **POST** /stores/{store_id}/authorization-models | Create a new authorization model\n\n\n### Models\n\n## Documentation For Models\n\n - [Any](https://github.com/openfga/python-sdk/blob/main/docs/Any.md)\n - [Assertion](https://github.com/openfga/python-sdk/blob/main/docs/Assertion.md)\n - [AuthorizationModel](https://github.com/openfga/python-sdk/blob/main/docs/AuthorizationModel.md)\n - [CheckRequest](https://github.com/openfga/python-sdk/blob/main/docs/CheckRequest.md)\n - [CheckResponse](https://github.com/openfga/python-sdk/blob/main/docs/CheckResponse.md)\n - [Computed](https://github.com/openfga/python-sdk/blob/main/docs/Computed.md)\n - [ContextualTupleKeys](https://github.com/openfga/python-sdk/blob/main/docs/ContextualTupleKeys.md)\n - [CreateStoreRequest](https://github.com/openfga/python-sdk/blob/main/docs/CreateStoreRequest.md)\n - [CreateStoreResponse](https://github.com/openfga/python-sdk/blob/main/docs/CreateStoreResponse.md)\n - [Difference](https://github.com/openfga/python-sdk/blob/main/docs/Difference.md)\n - [ErrorCode](https://github.com/openfga/python-sdk/blob/main/docs/ErrorCode.md)\n - [ExpandRequest](https://github.com/openfga/python-sdk/blob/main/docs/ExpandRequest.md)\n - [ExpandResponse](https://github.com/openfga/python-sdk/blob/main/docs/ExpandResponse.md)\n - [GetStoreResponse](https://github.com/openfga/python-sdk/blob/main/docs/GetStoreResponse.md)\n - [InternalErrorCode](https://github.com/openfga/python-sdk/blob/main/docs/InternalErrorCode.md)\n - [InternalErrorMessageResponse](https://github.com/openfga/python-sdk/blob/main/docs/InternalErrorMessageResponse.md)\n - [Leaf](https://github.com/openfga/python-sdk/blob/main/docs/Leaf.md)\n - [ListObjectsRequest](https://github.com/openfga/python-sdk/blob/main/docs/ListObjectsRequest.md)\n - [ListObjectsResponse](https://github.com/openfga/python-sdk/blob/main/docs/ListObjectsResponse.md)\n - [ListStoresResponse](https://github.com/openfga/python-sdk/blob/main/docs/ListStoresResponse.md)\n - [Metadata](https://github.com/openfga/python-sdk/blob/main/docs/Metadata.md)\n - [Node](https://github.com/openfga/python-sdk/blob/main/docs/Node.md)\n - [Nodes](https://github.com/openfga/python-sdk/blob/main/docs/Nodes.md)\n - [NotFoundErrorCode](https://github.com/openfga/python-sdk/blob/main/docs/NotFoundErrorCode.md)\n - [ObjectRelation](https://github.com/openfga/python-sdk/blob/main/docs/ObjectRelation.md)\n - [PathUnknownErrorMessageResponse](https://github.com/openfga/python-sdk/blob/main/docs/PathUnknownErrorMessageResponse.md)\n - [ReadAssertionsResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadAssertionsResponse.md)\n - [ReadAuthorizationModelResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadAuthorizationModelResponse.md)\n - [ReadAuthorizationModelsResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadAuthorizationModelsResponse.md)\n - [ReadChangesResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadChangesResponse.md)\n - [ReadRequest](https://github.com/openfga/python-sdk/blob/main/docs/ReadRequest.md)\n - [ReadResponse](https://github.com/openfga/python-sdk/blob/main/docs/ReadResponse.md)\n - [RelationMetadata](https://github.com/openfga/python-sdk/blob/main/docs/RelationMetadata.md)\n - [RelationReference](https://github.com/openfga/python-sdk/blob/main/docs/RelationReference.md)\n - [Status](https://github.com/openfga/python-sdk/blob/main/docs/Status.md)\n - [Store](https://github.com/openfga/python-sdk/blob/main/docs/Store.md)\n - [Tuple](https://github.com/openfga/python-sdk/blob/main/docs/Tuple.md)\n - [TupleChange](https://github.com/openfga/python-sdk/blob/main/docs/TupleChange.md)\n - [TupleKey](https://github.com/openfga/python-sdk/blob/main/docs/TupleKey.md)\n - [TupleKeys](https://github.com/openfga/python-sdk/blob/main/docs/TupleKeys.md)\n - [TupleOperation](https://github.com/openfga/python-sdk/blob/main/docs/TupleOperation.md)\n - [TupleToUserset](https://github.com/openfga/python-sdk/blob/main/docs/TupleToUserset.md)\n - [TypeDefinition](https://github.com/openfga/python-sdk/blob/main/docs/TypeDefinition.md)\n - [Users](https://github.com/openfga/python-sdk/blob/main/docs/Users.md)\n - [Userset](https://github.com/openfga/python-sdk/blob/main/docs/Userset.md)\n - [UsersetTree](https://github.com/openfga/python-sdk/blob/main/docs/UsersetTree.md)\n - [UsersetTreeDifference](https://github.com/openfga/python-sdk/blob/main/docs/UsersetTreeDifference.md)\n - [UsersetTreeTupleToUserset](https://github.com/openfga/python-sdk/blob/main/docs/UsersetTreeTupleToUserset.md)\n - [Usersets](https://github.com/openfga/python-sdk/blob/main/docs/Usersets.md)\n - [ValidationErrorMessageResponse](https://github.com/openfga/python-sdk/blob/main/docs/ValidationErrorMessageResponse.md)\n - [WriteAssertionsRequest](https://github.com/openfga/python-sdk/blob/main/docs/WriteAssertionsRequest.md)\n - [WriteAuthorizationModelRequest](https://github.com/openfga/python-sdk/blob/main/docs/WriteAuthorizationModelRequest.md)\n - [WriteAuthorizationModelResponse](https://github.com/openfga/python-sdk/blob/main/docs/WriteAuthorizationModelResponse.md)\n - [WriteRequest](https://github.com/openfga/python-sdk/blob/main/docs/WriteRequest.md)\n\n\n\n## Contributing\n\n### Issues\n\nIf you have found a bug or if you have a feature request, please report them on the [sdk-generator repo](https://github.com/openfga/sdk-generator/issues) issues section. Please do not report security vulnerabilities on the public GitHub issue tracker.\n\n### Pull Requests\n\nAll changes made to this repo will be overwritten on the next generation, so we kindly ask that you send all pull requests related to the SDKs to the [sdk-generator repo](https://github.com/openfga/sdk-generator) instead.\n\n## Author\n\n[OpenFGA](https://github.com/openfga)\n\n## License\n\nThis project is licensed under the Apache-2.0 license. See the [LICENSE](https://github.com/openfga/python-sdk/blob/main/LICENSE) file for more info.\n\nThe code in this repo was auto generated by [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) from a template based on the [python legacy template](https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/python-legacy), licensed under the [Apache License 2.0](https://github.com/OpenAPITools/openapi-generator/blob/master/LICENSE).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openfga/python-sdk",
    "keywords": "openfga,authorization,fga,fine-grained-authorization,rebac,zanzibar",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openfga-sdk",
    "package_url": "https://pypi.org/project/openfga-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/openfga-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/openfga/python-sdk"
    },
    "release_url": "https://pypi.org/project/openfga-sdk/0.1.1/",
    "requires_dist": [
      "urllib3 (>=1.26.11)",
      "six (>=1.10)",
      "python-dateutil (>=2.8.2)",
      "aiohttp (>=3.8.1)"
    ],
    "requires_python": ">=3.9",
    "summary": "A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16464318,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a38a366f49a6f2ac1857d86cc4d42404ce88f439286adb3666588df59ad8cdf7",
          "md5": "1f63b2a23966801e44096068ee2d6238",
          "sha256": "9f39472abfba353abe43b88281eecdbc8aa15a1c5183a25582f7652f50b2f23d"
        },
        "downloads": -1,
        "filename": "openfga_sdk-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f63b2a23966801e44096068ee2d6238",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 120135,
        "upload_time": "2022-10-19T17:52:22",
        "upload_time_iso_8601": "2022-10-19T17:52:22.801169Z",
        "url": "https://files.pythonhosted.org/packages/a3/8a/366f49a6f2ac1857d86cc4d42404ce88f439286adb3666588df59ad8cdf7/openfga_sdk-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b01fccb249e0c2f610887b5de33d92bdd86a261e697fee3f603478122b4bb25b",
          "md5": "d13d1214a72651d1ed24efb3c9b45ba2",
          "sha256": "56e7e9c72ae1f01c1b27fc94e0f0273a2058a90cef4dd94885e3f67570feb3a8"
        },
        "downloads": -1,
        "filename": "openfga-sdk-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d13d1214a72651d1ed24efb3c9b45ba2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 60625,
        "upload_time": "2022-10-19T17:52:23",
        "upload_time_iso_8601": "2022-10-19T17:52:23.935992Z",
        "url": "https://files.pythonhosted.org/packages/b0/1f/ccb249e0c2f610887b5de33d92bdd86a261e697fee3f603478122b4bb25b/openfga-sdk-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "597f5725007c587ede6533debc2784a9d2f7fb13c87894c8a91d90419e041ab6",
          "md5": "e6a5a8453f52f0f7521987888898ba61",
          "sha256": "f683778095a215f121a6cbbb6277ecaaf49a62621a33ef32d646205d89998722"
        },
        "downloads": -1,
        "filename": "openfga_sdk-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6a5a8453f52f0f7521987888898ba61",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 132322,
        "upload_time": "2022-12-15T01:38:18",
        "upload_time_iso_8601": "2022-12-15T01:38:18.583182Z",
        "url": "https://files.pythonhosted.org/packages/59/7f/5725007c587ede6533debc2784a9d2f7fb13c87894c8a91d90419e041ab6/openfga_sdk-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca6509672398cd591cab0804574ed0220fd6e57f8c1f6bbb568b3aa9ff67dda5",
          "md5": "7e7faef5c5fc72e294db2a62ea59d790",
          "sha256": "12400a9cf39a76c857558aa4893ff5ab21696c8b8bd12c7376ef6834265adbac"
        },
        "downloads": -1,
        "filename": "openfga-sdk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e7faef5c5fc72e294db2a62ea59d790",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 70396,
        "upload_time": "2022-12-15T01:38:20",
        "upload_time_iso_8601": "2022-12-15T01:38:20.241832Z",
        "url": "https://files.pythonhosted.org/packages/ca/65/09672398cd591cab0804574ed0220fd6e57f8c1f6bbb568b3aa9ff67dda5/openfga-sdk-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "663c94d1d7701f5beaba9d2fcd762bf93200029440c3ee92a12f995067465507",
          "md5": "9a462fed7e0df018a0bb126faed44c86",
          "sha256": "86ce66ce446675e912071e8f96630120d6e9503c8f6d04088784731892becd2e"
        },
        "downloads": -1,
        "filename": "openfga_sdk-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a462fed7e0df018a0bb126faed44c86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 132454,
        "upload_time": "2023-01-17T22:59:58",
        "upload_time_iso_8601": "2023-01-17T22:59:58.236902Z",
        "url": "https://files.pythonhosted.org/packages/66/3c/94d1d7701f5beaba9d2fcd762bf93200029440c3ee92a12f995067465507/openfga_sdk-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f850ff1e25a78179acd865618fc4727f088fab9f76bb89ec3f05f2c4e606e62",
          "md5": "8cab9ff763bc71349c4739be3cff2763",
          "sha256": "e2e30afdf4dc48b086af9f46a49159249cd909dcb694218854d0320f51b83cf5"
        },
        "downloads": -1,
        "filename": "openfga-sdk-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8cab9ff763bc71349c4739be3cff2763",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 74898,
        "upload_time": "2023-01-17T22:59:59",
        "upload_time_iso_8601": "2023-01-17T22:59:59.946172Z",
        "url": "https://files.pythonhosted.org/packages/0f/85/0ff1e25a78179acd865618fc4727f088fab9f76bb89ec3f05f2c4e606e62/openfga-sdk-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "663c94d1d7701f5beaba9d2fcd762bf93200029440c3ee92a12f995067465507",
        "md5": "9a462fed7e0df018a0bb126faed44c86",
        "sha256": "86ce66ce446675e912071e8f96630120d6e9503c8f6d04088784731892becd2e"
      },
      "downloads": -1,
      "filename": "openfga_sdk-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a462fed7e0df018a0bb126faed44c86",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 132454,
      "upload_time": "2023-01-17T22:59:58",
      "upload_time_iso_8601": "2023-01-17T22:59:58.236902Z",
      "url": "https://files.pythonhosted.org/packages/66/3c/94d1d7701f5beaba9d2fcd762bf93200029440c3ee92a12f995067465507/openfga_sdk-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f850ff1e25a78179acd865618fc4727f088fab9f76bb89ec3f05f2c4e606e62",
        "md5": "8cab9ff763bc71349c4739be3cff2763",
        "sha256": "e2e30afdf4dc48b086af9f46a49159249cd909dcb694218854d0320f51b83cf5"
      },
      "downloads": -1,
      "filename": "openfga-sdk-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8cab9ff763bc71349c4739be3cff2763",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 74898,
      "upload_time": "2023-01-17T22:59:59",
      "upload_time_iso_8601": "2023-01-17T22:59:59.946172Z",
      "url": "https://files.pythonhosted.org/packages/0f/85/0ff1e25a78179acd865618fc4727f088fab9f76bb89ec3f05f2c4e606e62/openfga-sdk-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}