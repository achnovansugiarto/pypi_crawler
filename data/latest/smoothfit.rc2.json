{
  "info": {
    "author": "",
    "author_email": "Nico Schlömer <nico.schloemer@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Utilities"
    ],
    "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/smoothfit\"><img alt=\"smoothfit\" src=\"https://raw.githubusercontent.com/sigma-py/smoothfit/main/logo/logo.svg\" width=\"60%\"></a>\n</p>\n\n[![PyPi Version](https://img.shields.io/pypi/v/smoothfit.svg?style=flat-square)](https://pypi.org/project/smoothfit)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/smoothfit.svg?style=flat-square)](https://pypi.org/pypi/smoothfit/)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/smoothfit.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/smoothfit)\n[![PyPi downloads](https://img.shields.io/pypi/dm/smoothfit.svg?style=flat-square)](https://pypistats.org/packages/smoothfit)\n\n[![Discord](https://img.shields.io/static/v1?logo=discord&label=chat&message=on%20discord&color=7289da&style=flat-square)](https://discord.gg/hnTJ5MRX2Y)\n\nGiven experimental data, it is often desirable to produce a function whose\nvalues match the data to some degree. This package implements a robust approach\nto data fitting based on the minimization problem\n\n```math\n\\|\\lambda\\Delta f\\|^2_{L^2(\\Omega)} + \\sum_i (f(x_i) - y_i)^2 \\to\\min\n```\n\n(A similar idea is used in for data smoothing in signal processing; see, e.g.,\nsection 8.3 in [this\ndocument](http://eeweb.poly.edu/iselesni/lecture_notes/least_squares/least_squares_SP.pdf).)\n\nUnlike [polynomial\nregression](https://en.wikipedia.org/wiki/Polynomial_regression) or\n[Gauss-Newton](https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm<Paste>),\nsmoothfit makes no assumptions about the function other than that it is smooth.\n\nThe generality of the approach makes it suitable for function whose domain is\nmultidimensional, too.\n\n### Pics or it didn't happen\n\n#### Runge's example\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/smoothfit/main/plots/runge.webp\" width=\"60%\">\n\n[Runge's example function](https://en.wikipedia.org/wiki/Runge%27s_phenomenon) is a\ntough nut for classical polynomial regression.\n\nIf there is no noise in the input data, the parameter `lmbda` can be chosen quite small\nsuch that all data points are approximated well. Note that there are no oscillations in\nthe output function `u`.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport smoothfit\n\na = -1.5\nb = +1.5\n\n# plot original function\nx = np.linspace(a, b, 201)\nplt.plot(x, 1 / (1 + 25 * x ** 2), \"-\", color=\"0.8\", label=\"1 / (1 + 25 * x**2)\")\n\n# sample points\nx0 = np.linspace(-1.0, 1.0, 21)\ny0 = 1 / (1 + 25 * x0 ** 2)\nplt.plot(x0, y0, \"xk\")\n\n# smoothfit\nbasis, coeffs = smoothfit.fit1d(x0, y0, a, b, 1000, degree=1, lmbda=1.0e-6)\nplt.plot(basis.mesh.p[0], coeffs[basis.nodal_dofs[0]], \"-\", label=\"smooth fit\")\n\nplt.ylim(-0.1)\nplt.grid()\nplt.show()\n```\n\n#### Runge's example with noise\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/smoothfit/main/plots/runge-noise-lambda.webp\" width=\"60%\">\n\nIf the data is noisy, `lmbda` needs to be chosen more carefully. If too small, the\napproximation tries to resolve _all_ data points, resulting in many small oscillations.\nIf it's chosen too large, no details are resolved, not even those of the underlying\ndata.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport smoothfit\n\na = -1.5\nb = +1.5\n\n# plot original function\nx = np.linspace(a, b, 201)\nplt.plot(x, 1 / (1 + 25 * x ** 2), \"-\", color=\"0.8\", label=\"1 / (1 + 25 * x**2)\")\n\n# 21 sample points\nrng = np.random.default_rng(0)\nn = 51\nx0 = np.linspace(-1.0, 1.0, n)\ny0 = 1 / (1 + 25 * x0 ** 2)\ny0 += 1.0e-1 * (2 * rng.random(n) - 1)\nplt.plot(x0, y0, \"xk\")\n\nlmbda = 5.0e-2\nbasis, coeffs = smoothfit.fit1d(x0, y0, a, b, 1000, degree=1, lmbda=lmbda)\nplt.plot(basis.mesh.p[0], coeffs[basis.nodal_dofs[0]], \"-\", label=\"smooth fit\")\n\nplt.grid()\nplt.show()\n```\n\n#### Few samples\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/smoothfit/main/plots/smoothfit-samples.svg\" width=\"40%\">\n\n```python\nimport numpy as np\nimport smoothfit\n\nx0 = np.array([0.038, 0.194, 0.425, 0.626, 1.253, 2.500, 3.740])\ny0 = np.array([0.050, 0.127, 0.094, 0.2122, 0.2729, 0.2665, 0.3317])\nu = smoothfit.fit1d(x0, y0, 0, 4, 1000, degree=1, lmbda=1.0)\n```\n\nSome noisy example data taken from\n[Wikipedia](https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm#Example).\n\n#### A two-dimensional example\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/smoothfit/main/plots/2d.png\" width=\"40%\">\n\n```python\nimport meshzoo\nimport numpy as np\nimport smoothfit\n\nn = 200\nrng = np.random.default_rng(123)\nx0 = rng.random((n, 2)) - 0.5\ny0 = np.cos(np.pi * np.sqrt(x0.T[0] ** 2 + x0.T[1] ** 2))\n\n# create a triangle mesh for the square\npoints, cells = meshzoo.rectangle_tri(\n    np.linspace(-1.0, 1.0, 32), np.linspace(-1.0, 1.0, 32)\n)\n\nbasis, u = smoothfit.fit(x0, y0, points, cells, lmbda=1.0e-4, solver=\"dense-direct\")\n\n# Write the function to a file\nbasis.mesh.save(\"out.vtu\", point_data={\"u\": u})\n```\n\nThis example approximates a function from _R<sup>2</sup>_ to _R_ (without noise in the\nsamples). Note that the absence of noise the data allows us to pick a rather small\n`lmbda` such that all sample points are approximated well.\n\n### Comparison with other approaches\n\n#### Polynomial fitting/regression\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/smoothfit/main/plots/runge-polyfit.webp\" width=\"60%\">\n\nThe classical approach to data fitting is [polynomial\nregression](https://en.wikipedia.org/wiki/Polynomial_regression). Polynomials are\nchosen because they are very simple, can be evaluated quickly, and [can be made to fit\nany function very closely](https://en.wikipedia.org/wiki/Stone–Weierstrass_theorem).\n\nThere are, however, some fundamental problems:\n\n- Your data might not actually fit a polynomial of low degree.\n- [Runge's phenomenon](//en.wikipedia.org/wiki/Runge%27s_phenomenon).\n\nThis above plot highlights the problem with oscillations.\n\n#### Fourier smoothing\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/smoothfit/main/plots/fourier.svg\" width=\"60%\">\n\nOne approach to data fitting with smoothing is to create a function with all data\npoints, and simply cut off the high frequencies after Fourier transformation.\n\nThis approach is fast, but only works for evenly spaced samples.\n\n> [For equidistant curve fitting there is nothing else that could compete with the\n> Fourier series.](https://youtu.be/avSHHi9QCjA?t=1543)\n> -- Cornelius Lanczos\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nrng = np.random.default_rng(0)\n\n# original function\nx0 = np.linspace(-1.0, 1.0, 1000)\ny0 = 1 / (1 + 25 * x0 ** 2)\nplt.plot(x0, y0, color=\"k\", alpha=0.2)\n\n# create sample points\nn = 51\nx1 = np.linspace(-1.0, 1.0, n)  # only works if samples are evenly spaced\ny1 = 1 / (1 + 25 * x1 ** 2) + 1.0e-1 * (2 * rng.random(x1.shape[0]) - 1)\nplt.plot(x1, y1, \"xk\")\n\n# Cut off the high frequencies in the transformed space and transform back\nX = np.fft.rfft(y1)\nX[5:] = 0.0\ny2 = np.fft.irfft(X, n)\n#\nplt.plot(x1, y2, \"-\", label=\"5 lowest frequencies\")\n\nplt.grid()\nplt.show()\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "smoothfit",
    "package_url": "https://pypi.org/project/smoothfit/",
    "platform": null,
    "project_url": "https://pypi.org/project/smoothfit/",
    "project_urls": {
      "Homepage": "https://github.com/sigma-py/smoothfit",
      "Issues": "https://github.com/sigma-py/smoothfit/issues"
    },
    "release_url": "https://pypi.org/project/smoothfit/0.4.1/",
    "requires_dist": [
      "x21 (>=0.4.10,<0.5.0)",
      "krylov",
      "numpy",
      "scikit-fem[all] (>=3.0.0)",
      "scipy"
    ],
    "requires_python": ">=3.7",
    "summary": "Smooth data fitting in N dimensions",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17175493,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfa5a2349e05df0c5388b2b69f3c751d96f25df9c09f06dcfca3be1dfa83c8b7",
          "md5": "b5fecacab4ddfe86193bdc53c05e405a",
          "sha256": "e86f82642a3b36a99c4b3ec8e75697a64eedc2e3da905e0bd190a1cec8476cc0"
        },
        "downloads": -1,
        "filename": "smoothfit-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5fecacab4ddfe86193bdc53c05e405a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15403,
        "upload_time": "2023-03-06T13:46:02",
        "upload_time_iso_8601": "2023-03-06T13:46:02.698767Z",
        "url": "https://files.pythonhosted.org/packages/df/a5/a2349e05df0c5388b2b69f3c751d96f25df9c09f06dcfca3be1dfa83c8b7/smoothfit-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f848a0e53c2f8a97f2189ba90596c26b33afbab40479258a9d21e3764aad094e",
          "md5": "fe2d2fbe393792b3d5e333968df22ee4",
          "sha256": "928946c3b80791e28d3a26d0314c4ba20f747b63c94a0470f6fef7ea72873943"
        },
        "downloads": -1,
        "filename": "smoothfit-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe2d2fbe393792b3d5e333968df22ee4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15809,
        "upload_time": "2023-03-06T13:58:23",
        "upload_time_iso_8601": "2023-03-06T13:58:23.619820Z",
        "url": "https://files.pythonhosted.org/packages/f8/48/a0e53c2f8a97f2189ba90596c26b33afbab40479258a9d21e3764aad094e/smoothfit-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f848a0e53c2f8a97f2189ba90596c26b33afbab40479258a9d21e3764aad094e",
        "md5": "fe2d2fbe393792b3d5e333968df22ee4",
        "sha256": "928946c3b80791e28d3a26d0314c4ba20f747b63c94a0470f6fef7ea72873943"
      },
      "downloads": -1,
      "filename": "smoothfit-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe2d2fbe393792b3d5e333968df22ee4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15809,
      "upload_time": "2023-03-06T13:58:23",
      "upload_time_iso_8601": "2023-03-06T13:58:23.619820Z",
      "url": "https://files.pythonhosted.org/packages/f8/48/a0e53c2f8a97f2189ba90596c26b33afbab40479258a9d21e3764aad094e/smoothfit-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}