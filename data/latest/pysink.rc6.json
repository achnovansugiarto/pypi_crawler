{
  "info": {
    "author": "",
    "author_email": "Zack Johnson <zackjohnson298@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PySink\n\nCreated by Zack Johnson\n\n## Under construction, not yet ready for use!!\n\nFull documentation can be found on ReadTheDocs\n\nPySink is an extension of the PySide6 Qt Framework that simplifies the implementation\nof Asynchronous tasks in Desktop Applications. It contains several\nhelper Widgets and Classes that enable you to build powerful and professional\ndesktop applications without worrying about managing threads or freezing \nUI with long-running tasks. PySink's implementation suggests an MVC \narchitecture for your application, but should perform well in other architectures\nsuch as MVVM.\n\n## Basic Overview\nPySink is based on the concept of Workers and Managers. Workers are custom objects that \nperform long-running tasks. They inherit from the provided *AsyncWorker* class and \noverride the *AsyncWorker.run()* method to perform the tasks, emitting progress values and \noptional status messages along the way. These workers are managed by a generalized object called the\n*AsyncManager*. \n\nThe Manager is an object that manages all the workers/threading and handles the termination/cancellation \nof said threads and workers when necessary. The Manager can also pass along the signals emitted by \nthe worker (you can also connect to the worker's signals directly, see example 5 below).\n\nThe two signals that\n\n## Getting Started\n\n\nLet's look at a couple examples to help you get started. Full examples and all source code can \nbe found at https://github.com/zackjohnson298/PySink\n\n### Example 1: Defining and Using a Custom Async Worker\nIn this first example, we will create a custom AsyncWorker that performs *time.sleep()* \nfor a specified duration and number of cycles. To create a new worker, define a class\nthat inherits from *PySink.AsyncWorker*. Any values needed by the worker should be passed\nin via it's *\\_\\_init\\_\\_* method: \n\n```python\nfrom PySink import AsyncWorker\n\n\nclass DemoAsyncWorker1(AsyncWorker):\n    def __init__(self, delay_seconds: int, cycles=4):\n        super(DemoAsyncWorker1, self).__init__()\n        # Store the values passed in during initialization\n        self.delay_seconds = delay_seconds\n        self.cycles = cycles\n```\nTo implement the long-running task, simply override AsyncWorker's *run* method.\nThis method takes no parameters and returns nothing, it' only job is to perform the long-running task. \nProgress is emitted by calling the *self.update_progress(progress, message)*method, and when the task is\ndone you can emit any results via the *self.complete(\\*\\*kwargs)* method:\n\n```python\nfrom PySink import AsyncWorker\nimport time\n\n\nclass DemoAsyncWorker1(AsyncWorker):\n    def __init__(self, delay_seconds: int, cycles=4):\n        super(DemoAsyncWorker1, self).__init__()\n        # Store the values passed in during initialization\n        self.delay_seconds = delay_seconds\n        self.cycles = cycles\n\n    def run(self):\n        # Update discrete progress by providing a progress value from 0-100 with an optional message\n        progress = 5\n        self.update_progress(progress, 'Starting Task')\n        for ii in range(self.cycles):\n            time.sleep(self.delay_seconds)\n            progress += 90 / self.cycles\n            self.update_progress(progress, f'Progress message #{ii + 1}')\n        # Call the self.complete method to end your task, passing any results as keyword arguments\n        demo_result = 12\n        self.complete(demo_result=demo_result)\n```\nStarting your custom worker is as simple as creating an AsyncManager, tying \nits signals to your callback methods, and passing your custom Worker to its *start_worker(worker)* method. \n*(We also need a QApplication running for the event loop \nto start, which you will already have in your PySide6 Application).* Let's see \nwhat this looks like in code:\n\n```python\nfrom PySide6.QtWidgets import QApplication\nfrom PySink import AsyncManager\n\n# Function to be called whenever progress is updated\ndef progress_callback(progress_value: int, message: str):\n    print(f'Progress Received, value: {progress_value}, message: {message}')\n\n# Function to be called when the worker is finished\ndef completion_callback(results: dict):\n    print(f'\\nWorker Complete!')\n    print(f'\\tErrors: {results.get(\"errors\")}')\n    print(f'\\tWarnings: {results.get(\"warnings\")}')\n    print(f'\\tResult: {results.get(\"demo_result\")}')\n\n\ndef run_main():\n    app = QApplication()\n    manager = AsyncManager()\n    # Connect the Manager's signals to your callbacks\n    manager.worker_progress_signal.connect(progress_callback)\n    manager.worker_finished_signal.connect(completion_callback)\n    # Create your Worker, and pass in the necessary values\n    demo_worker = DemoAsyncWorker(1, cycles=3)\n    # Start the Worker\n    manager.start_worker(demo_worker)\n    \n    app.exec()\n\nrun_main()\n```\n\nLet's first take a look at the progress callback. Progress is emitted by the manager's \n*worker_progress_signal* and contains the progress value as well as the optional message.\nIt should be tied to the callback function that handles progress events. In this example,\nthe progress callback simply prints out the progress value and the message.\nIn the next example, we will look at how to tie this to the *ProgressBarWidget* provided \nin the *PySink.Widgets* module.\n\nThe completion callback is tied to the manager's *worker_finished_signal*. This signal\nemits the results of the worker's task as a dictionary. It is keyed by the keyword arguments\ndefined when the *self.complete(\\*\\*kwargs)* method is called within the worker. This\ndictionary also contains the worker's *warnings* and *errors*.\n\nRunning the code above results in the following being printed to the console:\n```commandline\nProgress Received, value: 0, message: Starting Task\nProgress Received, value: 33, message: Progress message #1\nProgress Received, value: 66, message: Progress message #2\nProgress Received, value: 100, message: Progress message #3\n\nWorker Complete!\n\tErrors: []\n\tWarnings: []\n\tResult: 12\n```\nCongratulations! You've just implemented an AsyncWorker that runs a task in a background thread.\nRunning the task like this has freed up the UI thread, allowing your users to still interact\nwith your application without freezing the UI. Full example code can be found at \nhttps://github.com/zackjohnson298/PySink \nin the examples/example1 folder.\n\nIn the next example, we will see how to use PySink to create a basic asynchronous App. \nWe'll also see how to use the provided ProgressBarWidget to display the progress of your \nasynchronous task to the user.\n\n### Example 2: Create a Basic Asynchronous App\nNow let's create a desktop app that allows the user to start a long-running task and monitor \nits progress within the UI. This example will follow a basic MVC architecture.\n\nPySink includes a helper Widget called the ProgressBarWidget that packages up some helpful\nprogress bar functionality into a single class. This widget allows you to easily display \ndiscrete progress values from 0-100, show an indeterminate progress state by passing in a negative\nvalue, and (on Windows) set text that gets overlaid on the progress bar (refer to the docs for\nmore information).\n\nLet's get started building the App. Since this is a demo of PySink and not a PyQt tutorial, I \nwill not dive too deep into PySide6 Windows, Widgets, or layout management. Start by \nsetting up a basic View that inherits from QMainWindow, and populate the view with some \nwidgets:\n\n```python\nfrom PySide6.QtWidgets import QMainWindow, QVBoxLayout, QPushButton, QWidget, QGridLayout, QLabel\nfrom PySide6.QtCore import Signal\nfrom PySink.Widgets import ProgressBarWidget\n\n\nclass MainView(QMainWindow):\n    button_pushed_signal = Signal()\n\n    def __init__(self):\n        super(MainView, self).__init__()\n\n        # Widgets\n        self.button = QPushButton('Start')\n        self.progress_bar = ProgressBarWidget()\n        self.result_label = QLabel()\n        self.warnings_label = QLabel()\n        self.errors_label = QLabel()\n\n        # Connect Signals\n        self.button.clicked.connect(self.button_pushed_signal.emit)\n\n        # Layout\n        grid_layout = QGridLayout()\n        grid_layout.addWidget(QLabel('Result:'), 0, 0)\n        grid_layout.addWidget(QLabel('Warnings:'), 1, 0)\n        grid_layout.addWidget(QLabel('Error:'), 2, 0)\n        grid_layout.addWidget(self.result_label, 0, 1)\n        grid_layout.addWidget(self.warnings_label, 1, 1)\n        grid_layout.addWidget(self.errors_label, 2, 1)\n\n        central_layout = QVBoxLayout()\n        central_layout.addLayout(grid_layout)\n        central_layout.addWidget(self.button)\n        central_layout.addWidget(self.progress_bar)\n        central_widget = QWidget()\n        central_widget.setLayout(central_layout)\n        self.setCentralWidget(central_widget)\n\n    def set_result(self, result):\n        self.result_label.setText(str(result))\n\n    def set_warnings(self, warnings):\n        self.warnings_label.setText(str(warnings))\n\n    def set_errors(self, errors):\n        self.errors_label.setText(str(errors))\n\n    def set_progress(self, progress_value, message=None):\n        self.progress_bar.set_value(progress_value)\n        if message:\n            self.progress_bar.set_text(message)\n\n    def clear(self):\n        self.warnings_label.setText('')\n        self.errors_label.setText('')\n        self.result_label.setText('')\n        \n    def show_progress(self):\n        self.button.setVisible(False)\n        self.progress_bar.setVisible(True)\n    \n    def show_button(self):\n        self.progress_bar.setVisible(False)\n        self.button.setVisible(True)\n\n\n\nif __name__ == '__main__':\n    from PySide6.QtWidgets import QApplication\n\n    app = QApplication()\n    window = MainView()\n    window.show()\n\n    app.exec()\n```\n\nIncluding the snippet within the *\\_\\_name__ == \\_\\_main__* block allows you to run this\nas a script on its own and see the window you've just created. Doing this allows you to make \nsure the UI looks correct before you connect any actions to the View. \nRun the script to see the app window:\n\n![alt text](docs/img/example2_main_view.png \"Title\")\n\nThis very simple app has a start button, progress bar, and some labels to display the data.\nThe View also has a signal that gets emitted on the button press, as well as a \nfew helper methods to reset the UI and set the progress and output values. Exposing the \nsignals and providing methods like this are not required to make an app work. However, \ndoing so decouples the UI from the application logic allowing for much more flexibility in\nthe future.\n\nNow let's make the app actually do something. In the MVC architecture, it is the Controller \nthat 'controls' the state of the UI, reacts to the signals it emits, and provides data to the\nView to be displayed. Again, let's look at the code for the Controller before diving in to how it\nworks:\n\n```python\nfrom PySink import AsyncManager\nfrom DemoAsyncWorker import DemoAsyncWorker\nfrom MainView import MainView\n\n\nclass MainController:\n    def __init__(self, view: MainView):\n        # Initialize/Store Attributes\n        self.view = view\n        self.async_manager = AsyncManager()\n        # Connect UI Signals\n        self.view.start_signal.connect(self.start_task)\n        # Connect Async Signals\n        self.async_manager.worker_progress_signal.connect(self.view.set_progress)\n        self.async_manager.worker_finished_signal.connect(self.task_complete_callback)\n        # Initialize UI State\n        self.view.hide_progress()\n\n    def start_task(self):\n        # Update UI\n        self.view.clear()\n        self.view.show_progress()\n        # Initialize/Start Worker\n        worker = DemoAsyncWorker(2, cycles=5)\n        self.async_manager.start_worker(worker)\n\n    def task_complete_callback(self, results):\n        # Update UI\n        self.view.clear()\n        self.view.hide_progress()\n        # Handle results\n        self.view.set_result(results.get('demo_result'))\n        self.view.set_warnings(results.get('warnings'))\n        self.view.set_errors(results.get('errors'))\n```\nIn this example, the Controller gets initialized with the view it is controlling. Injecting \nthe dependency like this allows you to create layers in your App Architecture, and moves the \nresponsibility of 'showing' the window up a level. It also makes the Controller testable. \nBy mocking the attributes and methods of our view in a different class (that\ndoesn't need UI at all) tests can be automated much faster. Again, this is not required to \nget a PySink app to work, but this practice will be beneficial in the long run.\n\nLet's take a closer look at the Controller's *\\_\\_init\\_\\_()* method:\n\n```python\nclass MainController:\n    def __init__(self, view: MainView):\n        # Initialize/Store Attributes\n        self.view = view\n        self.async_manager = AsyncManager()\n        # Connect UI Signals\n        self.view.start_signal.connect(self.start_task)\n        # Connect Async Signals\n        self.async_manager.worker_progress_signal.connect(self.view.set_progress)\n        self.async_manager.worker_finished_signal.connect(self.task_complete_callback)\n        # Initialize UI State\n        self.view.hide_progress()\n```\n\nWithin the *\\_\\_init__()* method, any attributes needed by the controller are initialized and\nstored. In this case, those are the View and an AsyncManager (storing the manager as an \nattribute ensures that the worker and thread stay alive after calling the Manager's \n*start_worker* method).\n\nThe View's signals are then connected to the internal methods that respond to them. In this \ncase, it is a single signal called *button_pressed_signal* which gets connected to the \nController's *start_task* method. We also connect the Manager's signals to their respective \ncallback functions: *self.view.update_progress* for the progress signal and *self.task_complete_callback* for the \ncompletion signal.\n\nLastly, the UI is placed into the intended initial state that will be displayed upon \napplication launch. In this example, that just means displaying the start button.\n\nLet's take a closer look at the Controller's *start_task* method. This is the method that gets\ncalled when the user presses the start button:\n\n```python\n    def start_task(self):\n        # Update UI\n        self.view.clear()\n        self.view.show_progress()\n        # Initialize/Start Worker\n        worker = DemoAsyncWorker(2, cycles=5)\n        self.async_manager.start_worker(worker)\n```\nHere, the UI is updated so that it is in the correct state for the long-running task to take\nplace. This usually means clearing out old data, showing the progress widgets, and \ndisabling/hiding anything that shouldn't be shown while the task is running.\n\nAfter the UI is dealt with, the task is started by simply creating a new instance of the Worker \n(passing in any values it needs), and passing it to the *start_worker* method of the \nAsyncManager. And that's it! The worker is now running in the background and the progress \nis getting updated within the UI. \n\nNow let's look at what happens when the worker is done running its task. Since the \nAsyncManager's *worker_finished_signal* was connected to the Controller's \n*task_complete_callback*, that callback will be executed upon the worker's completion. \nHere's what the callback looks like:\n\n```python\n    def task_complete_callback(self, results):\n    # Update UI\n    self.view.clear()\n    self.view.hide_progress()\n    # Handle results\n    self.view.set_result(results.get('demo_result'))\n    self.view.set_warnings(results.get('warnings'))\n    self.view.set_errors(results.get('errors'))\n```\n\nAs stated in the previous example, the results of the worker's task are provided as a \ndictionary that gets passed in to the completion callback. This dictionary contains the \nvalues defined as keyword arguments within the worker's *run* method, as well as any \nwarnings/errors encountered during the task. In this callback, the UI is again updated to \nreflect the task's completion and the results are displayed to the user by passing them into\nthe View. \n\nAnd that's it! You now have a fully functional asynchronous application. Since Dependency\nInjection was implemented in the Controller, you will need to instantiate the Controller\nand pass it an existing View. Create a new file, import the Controller and View, and start\na QApplication:\n\n```python\nfrom PySide6.QtWidgets import QApplication\nfrom MainController import MainController\nfrom MainView import MainView\n\n\napp = QApplication()\nview = MainView()\ncontroller = MainController(view)\nview.show()\napp.exec()\n```\n\nRun the script and the application will start. Pushing the start button within the app will \ntrigger the long-running task, and at its completion data from the worker will be displayed:\n\n![alt text](docs/img/example2_while_running.png \"Title\")\n\n![alt text](docs/img/example2_complete.png \"Title\")\n\n\nCongratulations! You've just created an asynchronous app with PySink!\nFull example code can be found at https://github.com/zackjohnson298/PySink \nin the examples/example2 folder.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,app,gui,async,application,desktop,ui",
    "license": "MIT License  Copyright (c) 2023 Zack Johnson  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PySink",
    "package_url": "https://pypi.org/project/PySink/",
    "platform": null,
    "project_url": "https://pypi.org/project/PySink/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/PySink/0.0.9/",
    "requires_dist": [
      "pyside6"
    ],
    "requires_python": ">=3.9",
    "summary": "PySide6 Helpers for Powerful Async Desktop Apps",
    "version": "0.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17514275,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "380feea0808b43294a10db9dbc7b3fd8a940ac9c7827ede17835fb8be03a039c",
          "md5": "ef66171c83886027bc3bfa060f57f4a9",
          "sha256": "4c3ecb70f636a3e948059d84b37e7271261b322490dbdd619f7730bdbcb197cb"
        },
        "downloads": -1,
        "filename": "pysink-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef66171c83886027bc3bfa060f57f4a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2411,
        "upload_time": "2023-02-25T18:42:54",
        "upload_time_iso_8601": "2023-02-25T18:42:54.671906Z",
        "url": "https://files.pythonhosted.org/packages/38/0f/eea0808b43294a10db9dbc7b3fd8a940ac9c7827ede17835fb8be03a039c/pysink-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcd4ec4620589f717f1284b365b23d24efe6bf24b354d1c9734ad39b52bcd00d",
          "md5": "194f6c29a610578592a309f382c408f7",
          "sha256": "17ab947e0316f38d94c42e006a7b46b6232d008610482f8602ba954940ad362c"
        },
        "downloads": -1,
        "filename": "PySink-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "194f6c29a610578592a309f382c408f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2622,
        "upload_time": "2023-02-25T18:55:12",
        "upload_time_iso_8601": "2023-02-25T18:55:12.355185Z",
        "url": "https://files.pythonhosted.org/packages/fc/d4/ec4620589f717f1284b365b23d24efe6bf24b354d1c9734ad39b52bcd00d/PySink-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2db25b6b61b2d1a7f4e6e98e64147acacb5d7a1d55f5bdcbc0125748d6d66974",
          "md5": "449c1aebd7a8ccf80a30445dbc279136",
          "sha256": "8a92567426944a44e6ee8cce1d3c7286bfc41f09c16e9353d9060e1ab4e3f9ed"
        },
        "downloads": -1,
        "filename": "pysink-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "449c1aebd7a8ccf80a30445dbc279136",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2338,
        "upload_time": "2023-02-25T18:42:56",
        "upload_time_iso_8601": "2023-02-25T18:42:56.442746Z",
        "url": "https://files.pythonhosted.org/packages/2d/b2/5b6b61b2d1a7f4e6e98e64147acacb5d7a1d55f5bdcbc0125748d6d66974/pysink-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34246279a1e25ca142e3c4d0146597c8c52a371d09f86db763e0514adc77e8fa",
          "md5": "ffa23a2a40594ebaa6a8bc3849e9e988",
          "sha256": "333b3c57c9c20f112fd8b92c2d44b74c1387284e2b9a21a1e5ccf2c8069f8c53"
        },
        "downloads": -1,
        "filename": "pysink-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffa23a2a40594ebaa6a8bc3849e9e988",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2620,
        "upload_time": "2023-02-25T18:49:23",
        "upload_time_iso_8601": "2023-02-25T18:49:23.326192Z",
        "url": "https://files.pythonhosted.org/packages/34/24/6279a1e25ca142e3c4d0146597c8c52a371d09f86db763e0514adc77e8fa/pysink-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f1d2b2dbeeec916f07b8bf9a2a82b526028e50b981f293f17193fb802f69b8b",
          "md5": "e9ea0bf6311283668819eea482d6bfec",
          "sha256": "5660154d34bcf130152e0b75c2096269cb2bcda8af93fbc376e029ec2cbc2a72"
        },
        "downloads": -1,
        "filename": "pysink-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e9ea0bf6311283668819eea482d6bfec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2476,
        "upload_time": "2023-02-25T18:49:25",
        "upload_time_iso_8601": "2023-02-25T18:49:25.109819Z",
        "url": "https://files.pythonhosted.org/packages/1f/1d/2b2dbeeec916f07b8bf9a2a82b526028e50b981f293f17193fb802f69b8b/pysink-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4091c88917f61b8e19af9840842e96650a9a0517dd37e7ace95996bace67d274",
          "md5": "bb6a12c06d87906b78ac41bb3f17eb2f",
          "sha256": "e6c2df48712f1e46f27176cb8e1838a7ba346a9841c0a75e321154750fbeff6f"
        },
        "downloads": -1,
        "filename": "PySink-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb6a12c06d87906b78ac41bb3f17eb2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2623,
        "upload_time": "2023-02-25T18:58:19",
        "upload_time_iso_8601": "2023-02-25T18:58:19.065569Z",
        "url": "https://files.pythonhosted.org/packages/40/91/c88917f61b8e19af9840842e96650a9a0517dd37e7ace95996bace67d274/PySink-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9235528c34790a1d42e497d10d7d97c0da7cf65f028a22a07396a99165aa45f",
          "md5": "219cb6a79d2b29682d2e1e734f8f0699",
          "sha256": "ffc3dd9dab75adff9281ee13112da25b2661a3a6d60459bb4feb0d0895978dbb"
        },
        "downloads": -1,
        "filename": "PySink-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "219cb6a79d2b29682d2e1e734f8f0699",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2477,
        "upload_time": "2023-02-25T18:58:21",
        "upload_time_iso_8601": "2023-02-25T18:58:21.035520Z",
        "url": "https://files.pythonhosted.org/packages/c9/23/5528c34790a1d42e497d10d7d97c0da7cf65f028a22a07396a99165aa45f/PySink-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f133a17a857b4a29e4114fe3145f637bdcb40c5945075f2cd54ec9127ddd9d5a",
          "md5": "79da32be24f07040717ad997ede8b3a9",
          "sha256": "8481dd73b3125f757312f53dfcac39be5bb9483a332af6718719fcd77523f639"
        },
        "downloads": -1,
        "filename": "PySink-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79da32be24f07040717ad997ede8b3a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9432,
        "upload_time": "2023-02-27T17:36:32",
        "upload_time_iso_8601": "2023-02-27T17:36:32.789727Z",
        "url": "https://files.pythonhosted.org/packages/f1/33/a17a857b4a29e4114fe3145f637bdcb40c5945075f2cd54ec9127ddd9d5a/PySink-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d71eab06abebb18410763ae361844ea6ca7b282a92d080c856b7a1c3b08d397",
          "md5": "87d334f2cdb0aae0d56f7d8564304eed",
          "sha256": "5c90cb3db5819c88767c01a1fae1c9998450819ec65e14294bb6ea692f977802"
        },
        "downloads": -1,
        "filename": "PySink-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "87d334f2cdb0aae0d56f7d8564304eed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14577,
        "upload_time": "2023-02-27T17:36:34",
        "upload_time_iso_8601": "2023-02-27T17:36:34.356023Z",
        "url": "https://files.pythonhosted.org/packages/2d/71/eab06abebb18410763ae361844ea6ca7b282a92d080c856b7a1c3b08d397/PySink-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cd46a56e5e58a0c492549f7e7ade89f31d7006970861cb217c24505725d81d3",
          "md5": "877adf71b935edd790c1ca2c2bccfeac",
          "sha256": "db10b61a42e814c5929ba42c059b299711858f79037017f686534572b5de1177"
        },
        "downloads": -1,
        "filename": "PySink-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "877adf71b935edd790c1ca2c2bccfeac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9329,
        "upload_time": "2023-02-27T18:35:19",
        "upload_time_iso_8601": "2023-02-27T18:35:19.342026Z",
        "url": "https://files.pythonhosted.org/packages/3c/d4/6a56e5e58a0c492549f7e7ade89f31d7006970861cb217c24505725d81d3/PySink-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41124da79f05f552607018b4018733461a90bf42b39d697e4bc7d1e5bf50e791",
          "md5": "bd377501247ef33dc8482a86bd2405a9",
          "sha256": "7167e639508f702601f509ed8ffab2b84989ecc2ab862e2b87ed7c753dea40c0"
        },
        "downloads": -1,
        "filename": "PySink-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "bd377501247ef33dc8482a86bd2405a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13435,
        "upload_time": "2023-02-27T18:35:21",
        "upload_time_iso_8601": "2023-02-27T18:35:21.055748Z",
        "url": "https://files.pythonhosted.org/packages/41/12/4da79f05f552607018b4018733461a90bf42b39d697e4bc7d1e5bf50e791/PySink-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00e4640acd4a14623fa300b8db1026c19d3eeaf4ef81d6a77e7514be0b4ccffe",
          "md5": "319c62cfd2a6417511937088b316c28d",
          "sha256": "75317c10b180c3465bdff096a53085a6f88c042460e278803ffb1cd422705ed7"
        },
        "downloads": -1,
        "filename": "PySink-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "319c62cfd2a6417511937088b316c28d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 15758,
        "upload_time": "2023-03-30T18:09:22",
        "upload_time_iso_8601": "2023-03-30T18:09:22.978856Z",
        "url": "https://files.pythonhosted.org/packages/00/e4/640acd4a14623fa300b8db1026c19d3eeaf4ef81d6a77e7514be0b4ccffe/PySink-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35cf4d562246a7390a08bbde6f4f33c8ef502fd0c3b8d6c55889c3f98f09617c",
          "md5": "070b5af8c5f7ad1ebe3d7db8800041c3",
          "sha256": "78b96021fe11c798f1405a8f3bdc2a0a0f78b54cab992ee457f966073e3e5e51"
        },
        "downloads": -1,
        "filename": "PySink-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "070b5af8c5f7ad1ebe3d7db8800041c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 18189,
        "upload_time": "2023-03-30T18:09:25",
        "upload_time_iso_8601": "2023-03-30T18:09:25.000891Z",
        "url": "https://files.pythonhosted.org/packages/35/cf/4d562246a7390a08bbde6f4f33c8ef502fd0c3b8d6c55889c3f98f09617c/PySink-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00e4640acd4a14623fa300b8db1026c19d3eeaf4ef81d6a77e7514be0b4ccffe",
        "md5": "319c62cfd2a6417511937088b316c28d",
        "sha256": "75317c10b180c3465bdff096a53085a6f88c042460e278803ffb1cd422705ed7"
      },
      "downloads": -1,
      "filename": "PySink-0.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "319c62cfd2a6417511937088b316c28d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 15758,
      "upload_time": "2023-03-30T18:09:22",
      "upload_time_iso_8601": "2023-03-30T18:09:22.978856Z",
      "url": "https://files.pythonhosted.org/packages/00/e4/640acd4a14623fa300b8db1026c19d3eeaf4ef81d6a77e7514be0b4ccffe/PySink-0.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35cf4d562246a7390a08bbde6f4f33c8ef502fd0c3b8d6c55889c3f98f09617c",
        "md5": "070b5af8c5f7ad1ebe3d7db8800041c3",
        "sha256": "78b96021fe11c798f1405a8f3bdc2a0a0f78b54cab992ee457f966073e3e5e51"
      },
      "downloads": -1,
      "filename": "PySink-0.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "070b5af8c5f7ad1ebe3d7db8800041c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 18189,
      "upload_time": "2023-03-30T18:09:25",
      "upload_time_iso_8601": "2023-03-30T18:09:25.000891Z",
      "url": "https://files.pythonhosted.org/packages/35/cf/4d562246a7390a08bbde6f4f33c8ef502fd0c3b8d6c55889c3f98f09617c/PySink-0.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}