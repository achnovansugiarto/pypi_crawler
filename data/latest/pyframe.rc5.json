{
  "info": {
    "author": "Jógvan Magnus Haugaard Olsen and Peter Reinholdt",
    "author_email": "jmho@kemi.dtu.dk",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "PyFraME: Python framework for Fragment-based Multiscale Embedding calculations\n==============================================================================\n\nCopyright (C) 2017-2021  Jógvan Magnus Haugaard Olsen and Peter Reinholdt\n\nPyFraME is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nPyFraME is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with PyFraME.  If not, see <https://www.gnu.org/licenses/>.\n\n\nDescription\n-----------\n\nPyFraME is a Python package providing a framework for managing fragment-based\nmultiscale embedding calculations. In such calculations, a molecular system is\ndivided into two principal domains: a central core and its environment. The\ncore part is treated at the highest level of theory while the effects from the\nenvironment are included effectively through an embedding potential. Using\nPyFraME the user can automatize the workflow starting from an initial structure\nto the final embedding potential. It can be used to build a multilayer\ndescription of the molecular environment. Each layer can be described either by\na standard embedding potential, i.e., using a predefined set of parameters, or\nby deriving the embedding-potential parameters based on first-principles\ncalculations. For the latter, a fragmentation method is used to subdivide large\nmolecular structures into smaller computationally manageable fragments. The\nnumber of layers, as well as the composition and level of theory used for each\nlayer, can be fully customized.\n\nThe basic workflow consists of three main steps. First, a molecular structure\nis given as an input. Currently, PyFraME supports input files in the PDB\nformat. The input file reader extracts information about the structure and\ncomposition of the system, and it also defines the basic units of the system,\ni.e., fragments. Small molecules typically constitute a fragment on their own,\nbut larger molecules need to be broken down into smaller fragments. For\nexample, for proteins, a fragment would usually consist of an amino-acid\nresidue. The molecular system to be used for the embedding calculation is then\nbuilt by extracting subsets from the full list of fragments according to\nuser-specified criteria, such as name, chain ID, distance, or a combination\nthereof, and placed into separate regions. As mentioned above, any number of\nregions may be added, and each can be fully customized. Once the system has\nbeen built, the final step is the derivation of the embedding potential.\nDepending on the specifics, it may involve a large number of separate\ncalculations on the individual fragments in order to compute the\nembedding-potential parameters. For large molecules, where the parameters\ncannot be computed directly, PyFraME uses a fragmentation method based on the\nmolecular fractionation with conjugate caps (MFCC) approach to derive the\nparameters. The individual fragment calculations are typically performed by\nDalton and the LoProp Python package but this can be customized. The\nfragmentation of the system, fragment calculations, and subsequent joining of\nparameters to build the embedding potential are fully automatized and can make\nfull use of large-scale HPC resources.\n\nFor an example showing how PyFraME can be used, see\n[Usage example](#usage-example).\n\n\nHow to cite\n-----------\n\nTo cite PyFraME please use a format similar to the following:\n\nJ. M. H. Olsen, P. Reinholdt, and contributors, *PyFraME: Python framework for Fragment-based\nMultiscale Embedding (version 0.4.0)*, **2021**. DOI: 10.5281/zenodo.4899311.\nSee https://gitlab.com/FraME-projects/PyFraME.\n\nwhere the version and DOI should correspond to the actual version that was\nused. Note that the DOI\n[10.5281/zenodo.775113](https://doi.org/10.5281/zenodo.775113)\nrepresents all versions, and will always resolve to the latest one. A possible\nBibTeX entry can be found in the\n[CITATION](https://gitlab.com/FraME-projects/PyFraME/blob/master/CITATION)\nfile. Alternatively, BibTeX and other formats can be generated by\n[Zenodo](https://doi.org/10.5281/zenodo.775113).\n\n\nContributors\n------------\n\nThe list of past and current contributors is found\n[here](https://gitlab.com/FraME-projects/PyFraME/-/graphs/master).\n\n\nRequirements\n------------\n\nTo use PyFraME you need:\n\n* [Python (3.7+)](https://www.python.org/)\n* [NumPy](https://www.numpy.org/)\n* [SciPy](https://www.scipy.org/)\n* [h5py](https://www.h5py.org/)\n\nFor certain functionality you will need one or more of the following:\n\n* [Dalton](https://www.daltonprogram.org/) and [LoProp for Dalton](https://github.com/vahtras/loprop)\n* [Molcas](https://www.molcas.org/) (not tested recently)\n* [OpenMolcas](https://gitlab.com/Molcas/OpenMolcas) (not tested recently)\n\nTo run the test suite you need:\n\n* [pytest](https://pytest.org)\n\n\nInstallation\n------------\n\nThe PyFraME package can be installed from\n[PyPI](https://pypi.org/project/PyFraME/) directly using\n[pip](https://pip.pypa.io/en/stable/)\n\n```bash\npython -m pip install PyFraME\n```\n\nThis will also install required dependencies (see above) that are available on\nPyPI, i.e., not Dalton, Molcas, etc.\n\nThe entire source including history can be found at\n[GitLab](https://gitlab.com/FraME-projects/PyFraME).\nAll releases are also deposited at\n[Zenodo](https://doi.org/10.5281/zenodo.775113).\n\n\nTesting\n-------\n\nIf you installed from PyPI, the unit tests can be executed by typing\n\n```bash\npython -m pytest --pyargs pyframe\n```\n\nin a terminal. To execute the full test suite (unit tests and integration\ntests), which can be obtained by downloading the source from\n[GitLab](https://gitlab.com/FraME-projects/PyFraME), run\n\n```bash\npython -m pytest\n```\n\nfrom the PyFraME root directory.\n\n\nIssues\n------\n\nPlease report issues [here](https://gitlab.com/FraME-projects/PyFraME/issues).\n\n\nContributing\n------------\n\nPlease take a look at the\n[contribution guide](https://gitlab.com/FraME-projects/PyFraME/-/blob/master/CONTRIBUTING.md).\n\n\nUsage example\n-------------\n\nThe following commented example is based on a molecular system consisting of a\nchannelrhodopsin protein dimer embedded in a lipid membrane. For examples of\nhow PyFraME can be integrated in computational studies of response and transition\nproperties of molecular systems, we refer to our\n[tutorial review](https://doi.org/10.1002/qua.25717) article.\n\n```python\nimport pyframe\n\n# Create MolecularSystem() object. Currently only PDB and fixed-format PQR files\n# are supported (you can, however, give your own reader as an argument).\nsystem = pyframe.MolecularSystem(input_file='/path/to/input/file.pdb')\n\n# By default fragments are defined by the input but fragments can be modified\n# as shown here. This will affect all fragments with the given names.\nsystem.split_fragment_by_name(\n        name='RETK',\n        new_names=['LYSB', 'LYSS', 'RET'],\n        fragment_definitions=[['N', 'H', 'CA', 'HA', 'C', 'O'],\n                              ['CB', 'HB1', 'HB2', 'CG', 'HG1', 'HG2', 'CD',\n                               'HD1', 'HD2', 'CE', 'HE1', 'HE2'],\n                              ['.*']])\nsystem.split_fragment_by_name(\n        name='POPE',\n        new_names=['POP1', 'POP2', 'POP3', 'POP4', 'POP5'],\n        fragment_definitions=[['N', 'HN1', 'HN2', 'HN3', 'C12', 'H12A', 'H12B',\n                               'C11', 'H11A', 'H11B', 'P', 'O13', 'O14', 'O11',\n                               'O12', 'C1', 'HA', 'HB', 'C2', 'HS', 'O21',\n                               'C3', 'HX', 'HY', 'O31'],\n                              ['C21', 'O22', 'C22', 'H2R', 'H2S', 'C23', 'H3R',\n                               'H3S', 'C24', 'H4R', 'H4S', 'C25', 'H5R', 'H5S',\n                               'C26', 'H6R', 'H6S', 'C27', 'H7R', 'H7S', 'C28',\n                               'H8R', 'H8S', 'C29', 'H91'],\n                              ['0C21', '1H10', '1C21', 'H11R', 'H11S', '2C21',\n                               'H12R', 'H12S', '3C21', 'H13R', 'H13S', '4C21',\n                               'H14R', 'H14S', '5C21', 'H15R', 'H15S', '6C21',\n                               'H16R', 'H16S', '7C21', 'H17R', 'H17S', '8C21',\n                               'H18R', 'H18S', 'H18T'],\n                              ['C31', 'O32', 'C32', 'H2X', 'H2Y', 'C33', 'H3X',\n                               'H3Y', 'C34', 'H4X', 'H4Y', 'C35', 'H5X', 'H5Y',\n                               'C36', 'H6X', 'H6Y', 'C37', 'H7X', 'H7Y', 'C38',\n                               'H8X', 'H8Y', 'C39', 'H9X', 'H9Y'],\n                              ['0C31', 'H10X', 'H10Y', '1C31', 'H11X', 'H11Y',\n                               '2C31', 'H12X', 'H12Y', '3C31', 'H13X', 'H13Y',\n                               '4C31', 'H14X', 'H14Y', '5C31', 'H15X', 'H15Y',\n                               '6C31', 'H16X', 'H16Y', 'H16Z']])\n\n# Extract fragments and put them in core region.\ncore = system.get_fragments_by_identifier(identifiers=['248_A_RET'])\ncore += system.get_fragments_by_distance(distance=3.0, reference=core,\n                                         use_center_of_mass=False,\n                                         protect_molecules=False)\nsystem.set_core_region(core, basis='pcseg-2')\n\n# Extract protein (here I use chain id because all protein fragments in this case\n# have the same id).\nprotein = system.get_fragments_by_chain_id(chain_ids=['A'])\n\n# Add a region containing the protein in it. Note that each of these settings\n# have defaults and that there are more than those shown here.\nsystem.add_region(name='protein', fragments=protein, use_mfcc=True,\n                  mfcc_order=2, use_multipoles=True, multipole_order=2,\n                  use_polarizabilities=True, basis='loprop-6-31+G*')\n\n# Here we repeat for lipids, ions, and solvent.\nlipids = system.get_fragments_by_distance_and_name(\n        distance=8.0,\n        names=['POP1', 'POP2', 'POP3', 'POP4', 'POP5'],\n        reference=protein)\nsystem.add_region(name='lipid', fragments=lipids, use_mfcc=True, mfcc_order=2,\n                  use_multipoles=True, multipole_order=2,\n                  use_polarizabilities=True, basis='loprop-6-31+G*')\nions = system.get_fragments_by_distance_and_name(distance=8.0,\n                                                 names=['NA', 'CL'],\n                                                 reference=protein)\nsystem.add_region(name='ion', fragments=ions, use_multipoles=True,\n                  multipole_order=0, use_polarizabilities=True,\n                  basis='6-31+G*')\nsolvents = system.get_fragments_by_distance_and_name(distance=8.0,\n                                                     names=['SOL'],\n                                                     reference=protein)\nsystem.add_region(name='solvent', fragments=solvents, use_multipoles=True,\n                  multipole_order=2, use_polarizabilities=True,\n                  basis='loprop-6-31+G*')\n\n# Create Project() object that is used to create embedding potentials and write\n# input files.\nproject = pyframe.Project()\n\n# Set path to scratch directory. This will be used by the auxiliary programs,\n# e.g. Dalton or Molcas.\nproject.scratch_dir = '/path/to/scratch'\n\n# Set path to working directory (it will be created if it does not exist).\n# This directory will contain the final output files from PyFraME (e.g. Dalton\n# mol and pot files), and the output from the auxiliary program. In addition,\n# during execution it will contain temporary directories for each fragment.\nproject.work_dir = '/path/to/work'\n\n# Specifies the number of jobs that will be run on each node. A fragment may\n# require one or more calculations run by an auxiliary program. Each of these\n# counts as a job.\nproject.jobs_per_node = 2\n\n# Specifies memory per job. Note that this amount will be shared by MPI processes.\nproject.memory_per_job = 2048 * 12\n\n# Number of MPI processes per job.\nproject.mpi_procs_per_job = 12\n\n# You can manually specify the name of nodes that should be used to run jobs.\n# PyFraME will attempt to autodetect nodes from SLURM and PBS/Torque queuing\n# systems. For example:\n# project.node_list = ['{0}'.format(os.environ['HOSTNAME'])]\n\n# Prints all the details regarding the setup. Note that all of the settings\n# demonstrated above have defaults which are shown with the method below.\nproject.print_info()\n\n# This will start the fragment calculations using the using the auxiliary\n# programs and settings defined when creating the regions.\nproject.create_embedding_potential(system)\n\n# Write potential file containing all parameters of the embedding potential.\nproject.write_potential(system)\n\n# Write molecule file containing the core quantum region.\nproject.write_core(system)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://gitlab.com/FraME-projects/PyFraME/-/archive/0.4.0/PyFraME-0.4.0.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/FraME-projects/PyFraME/",
    "keywords": "",
    "license": "",
    "maintainer": "Jógvan Magnus Haugaard Olsen",
    "maintainer_email": "jmho@kemi.dtu.dk",
    "name": "PyFraME",
    "package_url": "https://pypi.org/project/PyFraME/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyFraME/",
    "project_urls": {
      "Download": "https://gitlab.com/FraME-projects/PyFraME/-/archive/0.4.0/PyFraME-0.4.0.zip",
      "Homepage": "https://gitlab.com/FraME-projects/PyFraME/",
      "Issue Tracker": "https://gitlab.com/FraME-projects/PyFraME/issues",
      "Source": "https://gitlab.com/FraME-projects/PyFraME/",
      "Zenodo deposit": "https://doi.org/10.5281/zenodo.4899311"
    },
    "release_url": "https://pypi.org/project/PyFraME/0.4.0/",
    "requires_dist": [
      "daltools",
      "h5py",
      "loprop",
      "numpy",
      "scipy"
    ],
    "requires_python": ">=3.7",
    "summary": "PyFraME: Python framework for Fragment-based Multiscale Embedding",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10577114,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8810ccf4019e8be392f31e0797490b6a7e30bc0a2ba17bf3c327c3973642697d",
          "md5": "c4125fedaf9e3e91c27d36ec2095e888",
          "sha256": "73546688d4350988b96fc33f6424409ef22dc91834afbdb83653adc2c983d806"
        },
        "downloads": -1,
        "filename": "PyFraME-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c4125fedaf9e3e91c27d36ec2095e888",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 32811,
        "upload_time": "2018-02-07T14:35:41",
        "upload_time_iso_8601": "2018-02-07T14:35:41.779817Z",
        "url": "https://files.pythonhosted.org/packages/88/10/ccf4019e8be392f31e0797490b6a7e30bc0a2ba17bf3c327c3973642697d/PyFraME-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "213e96cc19c40df6b06121d0d8a3a555290df6f0bf1a06b9d578c988ae3514a9",
          "md5": "09a4aed70d106cb4a719b36c75c29df7",
          "sha256": "2e5af63b6efb504adc5b1d49a1e93aeef8e72862722cd9d2e990d3a7807f5249"
        },
        "downloads": -1,
        "filename": "PyFraME-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09a4aed70d106cb4a719b36c75c29df7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 663936,
        "upload_time": "2018-02-08T09:47:23",
        "upload_time_iso_8601": "2018-02-08T09:47:23.923432Z",
        "url": "https://files.pythonhosted.org/packages/21/3e/96cc19c40df6b06121d0d8a3a555290df6f0bf1a06b9d578c988ae3514a9/PyFraME-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c8785020a0e1a099cd6537e96b14044c98b98981e236246daea969d3401dc94",
          "md5": "eb2e888b11a45232bef74bd96d6c75fc",
          "sha256": "ad0588d76a325a7375d81ec57a60ce522f16262655a5d4d51dd37b3d427255f0"
        },
        "downloads": -1,
        "filename": "PyFraME-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb2e888b11a45232bef74bd96d6c75fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 171552,
        "upload_time": "2018-10-03T15:30:42",
        "upload_time_iso_8601": "2018-10-03T15:30:42.783057Z",
        "url": "https://files.pythonhosted.org/packages/5c/87/85020a0e1a099cd6537e96b14044c98b98981e236246daea969d3401dc94/PyFraME-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67fe23aebe75903438c458ef1eff6100c5db40c90b45a57aec39a90a7b496d66",
          "md5": "3fa3affcbf9c0e131cc9af6de97212e7",
          "sha256": "6c21c079a5cd111156011607732d3b89ebde247f8335bbf68cc6bf726d362ad6"
        },
        "downloads": -1,
        "filename": "PyFraME-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3fa3affcbf9c0e131cc9af6de97212e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 151158,
        "upload_time": "2018-10-03T15:30:44",
        "upload_time_iso_8601": "2018-10-03T15:30:44.658999Z",
        "url": "https://files.pythonhosted.org/packages/67/fe/23aebe75903438c458ef1eff6100c5db40c90b45a57aec39a90a7b496d66/PyFraME-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1f578eb76f46b4ce692327128354fdf2093af11e60808a2e3dc4afc1ad54b51",
          "md5": "025d5421d3f4bb778aeac3af65dbf77c",
          "sha256": "70c021e6a93b4323fb9a0d692311f243bef0dd48190f1cc2b9389274375dc479"
        },
        "downloads": -1,
        "filename": "PyFraME-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "025d5421d3f4bb778aeac3af65dbf77c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 209044,
        "upload_time": "2020-05-11T21:10:07",
        "upload_time_iso_8601": "2020-05-11T21:10:07.499778Z",
        "url": "https://files.pythonhosted.org/packages/e1/f5/78eb76f46b4ce692327128354fdf2093af11e60808a2e3dc4afc1ad54b51/PyFraME-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd4b12d662809ea59569ba8a71786ad05abee2a84042cd3b12f79b9a1fa2543f",
          "md5": "349475cb67de06ecd67077eed80b483f",
          "sha256": "c80c6c1ae34eafa71904924a20f2e552c4fbbec4c08117c5ef67316eefcdac9d"
        },
        "downloads": -1,
        "filename": "PyFraME-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "349475cb67de06ecd67077eed80b483f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 192161,
        "upload_time": "2020-05-11T21:10:09",
        "upload_time_iso_8601": "2020-05-11T21:10:09.646258Z",
        "url": "https://files.pythonhosted.org/packages/bd/4b/12d662809ea59569ba8a71786ad05abee2a84042cd3b12f79b9a1fa2543f/PyFraME-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4304ecefd08b3b193403440e57a0c55c74d6d77d0957081317190feecfa0f80c",
          "md5": "44d4895293fcec1a02e7e3061bdad812",
          "sha256": "de1364eb941a667b6b553b7816afff1602e17d12fa7253430af7de67f3a73b99"
        },
        "downloads": -1,
        "filename": "PyFraME-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44d4895293fcec1a02e7e3061bdad812",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 214913,
        "upload_time": "2021-06-07T12:10:43",
        "upload_time_iso_8601": "2021-06-07T12:10:43.114402Z",
        "url": "https://files.pythonhosted.org/packages/43/04/ecefd08b3b193403440e57a0c55c74d6d77d0957081317190feecfa0f80c/PyFraME-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebc82d425e05f9981cee6fbf2ff639cf7399cfa2f89df1759d540d1ff4e29f45",
          "md5": "e06638daf7d63e0928f2443a03f6ca91",
          "sha256": "2f089310655e201a4cc7eb285128555cf407f1ea9e0307f117d367689f9b9343"
        },
        "downloads": -1,
        "filename": "PyFraME-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e06638daf7d63e0928f2443a03f6ca91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 64597,
        "upload_time": "2021-06-07T12:10:45",
        "upload_time_iso_8601": "2021-06-07T12:10:45.214106Z",
        "url": "https://files.pythonhosted.org/packages/eb/c8/2d425e05f9981cee6fbf2ff639cf7399cfa2f89df1759d540d1ff4e29f45/PyFraME-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4304ecefd08b3b193403440e57a0c55c74d6d77d0957081317190feecfa0f80c",
        "md5": "44d4895293fcec1a02e7e3061bdad812",
        "sha256": "de1364eb941a667b6b553b7816afff1602e17d12fa7253430af7de67f3a73b99"
      },
      "downloads": -1,
      "filename": "PyFraME-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "44d4895293fcec1a02e7e3061bdad812",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 214913,
      "upload_time": "2021-06-07T12:10:43",
      "upload_time_iso_8601": "2021-06-07T12:10:43.114402Z",
      "url": "https://files.pythonhosted.org/packages/43/04/ecefd08b3b193403440e57a0c55c74d6d77d0957081317190feecfa0f80c/PyFraME-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebc82d425e05f9981cee6fbf2ff639cf7399cfa2f89df1759d540d1ff4e29f45",
        "md5": "e06638daf7d63e0928f2443a03f6ca91",
        "sha256": "2f089310655e201a4cc7eb285128555cf407f1ea9e0307f117d367689f9b9343"
      },
      "downloads": -1,
      "filename": "PyFraME-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e06638daf7d63e0928f2443a03f6ca91",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 64597,
      "upload_time": "2021-06-07T12:10:45",
      "upload_time_iso_8601": "2021-06-07T12:10:45.214106Z",
      "url": "https://files.pythonhosted.org/packages/eb/c8/2d425e05f9981cee6fbf2ff639cf7399cfa2f89df1759d540d1ff4e29f45/PyFraME-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}