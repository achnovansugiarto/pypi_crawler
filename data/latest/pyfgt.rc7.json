{
  "info": {
    "author": "p4r4n0y1ng",
    "author_email": "jhuber@fortinet.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Synopsis\n\nRepresents the base components of the Fortinet FortiGate REST interface. This code is based on the fortigate code provided in the ftntlib package as provided on the Fortinet Developer Network (FNDN) that was originally written by multiple personnel to include Ashton Turpin. It has since been modified by several others within Fortinet. This has now been streamlined and modified to utilize the standard **\\**kwargs** functionality as well as has been modified extensively to be more scalable and provide context management and other aspects to inlcude handling the API Key functionality added with recent versions of FortiOS code.\n\n## Code Example\n\nStandard format for a FortiGate REST is utilized.\n\n**Of Importance** is that this package uses context behavior for the FortiGate instance, so the **with** keyword can be utilized. This ensures that the FortiGate instance is logged into upon instantiation and is logged out of once the scope of the **with** statement is completed. For instance, to instantiate a FortiGate instance with the IP address of 10.1.1.1, with the user name admin and a password of <blank>, the user would simply type:\n\n```\nwith FortiGate(\"10.1.1.1\", \"admin\", \"\") as fgt_instance:\n```\n\nThe context manager does not HAVE to be utilized obviously. However, if it is not utilized, the *login* and *logout* functionality is not handled for the caller. It is expected that these methods will be called if the context manager is not utilized. Note*, the API Key functionality vice password will be discussed later in this doc. An example of not using the context manager would be:\n\n```\nfgt_instance = FortiGate(\"10.1.1.1\", \"admin\", \"\")\nfgt_instance.login()\n*something of importance accomplished here*\nfgt_instance.logout()\n```\n\nContinuing, when a FortiGate instance is instantiated, the following attributes are configured (or can be configured by the user). The list provided lists the defaults.\n\n```\n- passwd (default None)\n- apikeyused (default False)\n- debug (default False),\n- use_ssl (default True),\n- verify_ssl (default False),\n- timeout (default 300)\n```\nFor instance, to instantiate a FortiGate instance with the IP address of 10.1.1.1, with the user name admin and a password of <blank>, that uses http instead of https, is in debug mode, and warns after the verification of the SSL certificate upon each request and has a timeout of 100 the user would simply type:\n\n```\nwith FortiGate(\"10.1.1.1\", \"admin\", \"\", debug=True, use_ssl=False, debug=True, disable_request_warnings=False, timeout=100) as fgt_instance:\n```\n\nAPI Key utilization will be discussed later, but it is important here to understand that to use an API Key instead of a password, the only thing that needs to happen is that the attribute must be specifically called out in the instantiation. Although username is not required using an API Key, it IS required in this library as it maintains uniformity an example of the same call as above except using an API Key administrative capability would be:\n\n```\nwith FortiGate(\"10.1.1.1\", \"admin\", apikey=\"12345678910\", debug=True, use_ssl=False, debug=True, disable_request_warnings=False, timeout=100) as fgt_instance:\n```\n\nObviously these same parameters would be used in the standard call if the context manager is not utilized so:\n\n```\nfgt_instance = FortiGate(\"10.1.1.1\", \"admin\", \"\", debug=True, use_ssl=False, debug=True, disable_request_warnings=False, timeout=100)\n```\n\nor\n\n```\nfgt_instance = FortiGate(\"10.1.1.1\", \"admin\", apikey=\"12345678910\", debug=True, use_ssl=False, debug=True, disable_request_warnings=False, timeout=100)\n```\n\nWhile this module is meant to be utilized with another caller-written abstraction, there is no reason that this module could not be utilized by itself to make detailed, multi-parameter calls. To that end, a capability has been provided that enables keyword/value arguments to be passed into any of the *get*, *delete* ,*post* or *put* helper methods. Since there are many keywords in the FortiGate body that require a dash (and since the dash character is not allowed as a keyword argument handled by the **\\**kwargs** pointer), a facility has been added such that a keyword with a double underscore **__** is automatically translated into a dash **-** when the keyword/value pair is put into the body of the call. An example follows (notice the double underscores in the keyword items, these will be translated to dashes when the call is made):\n\n```\nfgt.post(\"/cmdb/vpn.ipsec/phase1-interface\", p1name1\", \"port1\", \"1.1.1.1\", 2, \"2.2.2.2\", \"topsecret\", \"vdom=root\", dpd=\"on-demand\", proposal=\"aes128-sha1\", keylife=28800, authmethod=\"psk\", dpd__retryinterval=10, peertype=\"any\")\n```\n\nThis facility is helpful, but a more obvious way to make these kind of calls with a little more clarity is shown below in the **Tests** section where a standard dictionary is utilized effectively. In that case, the double underscore translations are not needed and dashes will work perfectly fine (see below).\n\nAnother facility has been put in place to allow for querystrings to be applied when the FGT call is made. If a user wants to ensure a certain VDOM is addressed, the call would have ?vdom=vdomname at the end of the URL endpoint called in basic querystring format. However, the FGT API can utilize filter and format functions as well that can be used effectively and are even further requirements for a querystring option. In this library, the **\\*args** pointer is utilized and uses each string provided in the list to append to the URL called. An example of this would be to perform a get function to find an address object named *test_object* in vdom *root*. The call would be made like this:\n\n```\nfgt.get(\"/cmdb/firewall/address\", \"vdom=root\", \"format=name\", \"filter=name==test_object\")\n```\n\nSince these arguments are not named and are not in key value format they are sent in on the *\\*args* pointer and used as querystrings. Output would be as expected:\n\n```\n(200, {'http_method': 'GET', 'revision': '31.0.74.9539865665020633197.1533399174', 'results': [{'q_origin_key': 'test_object', 'name': 'test_object'}], 'vdom': 'root', 'path': 'firewall', 'name': 'address', 'status': 'success', 'http_status': 200, 'serial': 'FGVM020000118048', 'version': 'v6.0.2', 'build': 163})\n```\n\nNotice only the name attribute (and the key of course) and the specific object is returned as requested.\n\n## Exceptions\n\nThe module provides the following exceptions for use:\n\n1. FGTBaseException(Exception)\n2. FGTValidSessionException(FGTBaseException)\n3. FGTValueError(ValueError)\n4. FGTResponseNotFormedCorrect(KeyError)\n5. FGTConnectionError(ReqConnError)\n6. FGTConnectTimeout(ReqConnTimeout):\n\n**FGTBaseException** is the Base exception for the module and can be used to catch all things outside of the ValueError and Keyerror issues.\n\na caller could then write the following and have the equivalent of a standard *except* call with no exception mentioned. This ensures scalability:\n```\ntry:\n    Doing Something Here\nexcept FGTBaseException:\n    Do something with Exception\n```\n\n**FGTValidSessionException** has been added and is raised if any call is attempted without a valid connection being made to a FGT. In the past, other than to check the \\_\\_str()\\_\\_ value of the object after the login return, the code would continue to try to make calls despite having no valid session. Any call attempted now on an invalid session will have this error thrown. As a caveat - if the API Key version of this is used (which does not use the session concept) and not a user and password, a session is faked and as such this error would not be thrown.\n\n**FGTValueError** is a standard ValueError and is caught in special cases where a connection attempt is made or a call is made with an invalid value. An example of this would be a connection to a FGT instance with a *timeout* value of <= 0.\n\n**FGTResponseNotFormedCorrect** will be raised when response received back from the FGT instance does not have a correct return attribute in a response. FGT responses without these attributes are ill-formed and will raise this error. The only exception to this is the response from a valid *login()* call. This exception is suppressed for this, and a valid response is crafted for login to ensure a stable, standard, and constant response back from the module.\n\n**FGTConnectionError** and **FGTConnectTimeout** are raised when a *requests.exception.ConnectionError* or *requests.exceptions.ConnectTimeout* exception is caught. This ensures calling code does not need to import/depend on the requests module to handle requests connection exceptions. *FGTConnectionError* will most likely be thrown at *login()* and are likely due to an incorrect hostname, or IP Address of the FGT appliance.  \n\nExceptions are allowed to propogate up to the caller and are only caught in certain cases where they will be needed in case verbose mode is asked for and the caller wants a print out of the exception. After the print is accomplished that same exception will be raised and propogated so it can be either caught and handled by the caller or used as a debug tool.\n\n## Responses\n\nA standard, response mechanism is provided from this module so calling objects know what to expect back. Unless an exception is thrown, this module will return a 2 object tuple consisting of the status code of the response back, followed by a valid JSON message or the entire JSON response. Since login does not provide a constant response from a FGT appliance, one is provided by this module to ensure a caller knows what will be returned and in what format. An example response of a login, get call, and then logout process is below:\n\n```\n(0, {\"status_code\": response.status_code, \"message\": \"Login Successful\"})\n\n(200, {'http_method': 'GET', 'revision': '29.0.74.9539865665020633197.1533399174', 'results': [{'q_origin_key': 'FIREWALL_AUTH_PORTAL_ADDRESS', 'name': 'FIREWALL_AUTH_PORTAL_ADDRESS', 'uuid': 'f7b74268-9800-51e8-aac3-47267065c700', 'subnet': '0.0.0.0 0.0.0.0', 'type': 'ipmask', 'start-ip': '0.0.0.0', 'end-ip': '0.0.0.0', 'fqdn': '', 'country': '', 'wildcard-fqdn': '', 'cache-ttl': 0, 'wildcard': '0.0.0.0 0.0.0.0', 'sdn': '', 'tenant': '', 'organization': '', 'epg-name': '', 'subnet-name': '', 'sdn-tag': '', 'policy-group': '', 'comment': '', 'visibility': 'disable', 'associated-interface': '', 'color': 0, 'filter': '', 'obj-id': '', 'list': [], 'tagging': [], 'allow-routing': 'disable'}, {'q_origin_key': 'SSLVPN_TUNNEL_ADDR1', 'name': 'SSLVPN_TUNNEL_ADDR1', 'uuid': 'f7b7b7d4-9800-51e8-4681-39920a003592', 'subnet': '10.212.134.200 10.212.134.210', 'type': 'iprange', 'start-ip': '10.212.134.200', 'end-ip': '10.212.134.210', 'fqdn': '', 'country': '', 'wildcard-fqdn': '', 'cache-ttl': 0, 'wildcard': '10.212.134.200 10.212.134.210', 'sdn': '', 'tenant': '', 'organization': '', 'epg-name': '', 'subnet-name': '', 'sdn-tag': '', 'policy-group': '', 'comment': '', 'visibility': 'enable', 'associated-interface': 'ssl.root', 'color': 0, 'filter': '', 'obj-id': '', 'list': [], 'tagging': [], 'allow-routing': 'disable'}, {'q_origin_key': 'all', 'name': 'all', 'uuid': 'f7b74128-9800-51e8-be0f-fdd4904c302f', 'subnet': '0.0.0.0 0.0.0.0', 'type': 'ipmask', 'start-ip': '0.0.0.0', 'end-ip': '0.0.0.0', 'fqdn': '', 'country': '', 'wildcard-fqdn': '', 'cache-ttl': 0, 'wildcard': '0.0.0.0 0.0.0.0', 'sdn': '', 'tenant': '', 'organization': '', 'epg-name': '', 'subnet-name': '', 'sdn-tag': '', 'policy-group': '', 'comment': '', 'visibility': 'enable', 'associated-interface': '', 'color': 0, 'filter': '', 'obj-id': '', 'list': [], 'tagging': [], 'allow-routing': 'disable'}, {'q_origin_key': 'autoupdate.opera.com', 'name': 'autoupdate.opera.com', 'uuid': 'f75a0a80-9800-51e8-7b08-7e7dc2a4c3ab', 'subnet': '0.0.0.0 0.0.0.0', 'type': 'fqdn', 'start-ip': '0.0.0.0', 'end-ip': '0.0.0.0', 'fqdn': 'autoupdate.opera.com', 'country': '', 'wildcard-fqdn': 'autoupdate.opera.com', 'cache-ttl': 0, 'wildcard': '0.0.0.0 0.0.0.0', 'sdn': '', 'tenant': '', 'organization': '', 'epg-name': '', 'subnet-name': '', 'sdn-tag': '', 'policy-group': '', 'comment': '', 'visibility': 'enable', 'associated-interface': '', 'color': 0, 'filter': '', 'obj-id': '', 'list': [], 'tagging': [], 'allow-routing': 'disable'}, {'q_origin_key': 'google-play', 'name': 'google-play', 'uuid': 'f75a14bc-9800-51e8-aeb1-59e60755753e', 'subnet': '0.0.0.0 0.0.0.0', 'type': 'fqdn', 'start-ip': '0.0.0.0', 'end-ip': '0.0.0.0', 'fqdn': 'play.google.com', 'country': '', 'wildcard-fqdn': 'play.google.com', 'cache-ttl': 0, 'wildcard': '0.0.0.0 0.0.0.0', 'sdn': '', 'tenant': '', 'organization': '', 'epg-name': '', 'subnet-name': '', 'sdn-tag': '', 'policy-group': '', 'comment': '', 'visibility': 'enable', 'associated-interface': '', 'color': 0, 'filter': '', 'obj-id': '', 'list': [], 'tagging': [], 'allow-routing': 'disable'}, {'q_origin_key': 'none', 'name': 'none', 'uuid': 'f75a0648-9800-51e8-13ca-d6da511600b3', 'subnet': '0.0.0.0 255.255.255.255', 'type': 'ipmask', 'start-ip': '0.0.0.0', 'end-ip': '255.255.255.255', 'fqdn': '', 'country': '', 'wildcard-fqdn': '', 'cache-ttl': 0, 'wildcard': '0.0.0.0 255.255.255.255', 'sdn': '', 'tenant': '', 'organization': '', 'epg-name': '', 'subnet-name': '', 'sdn-tag': '', 'policy-group': '', 'comment': '', 'visibility': 'enable', 'associated-interface': '', 'color': 0, 'filter': '', 'obj-id': '', 'list': [], 'tagging': [], 'allow-routing': 'disable'}, {'q_origin_key': 'swscan.apple.com', 'name': 'swscan.apple.com', 'uuid': 'f75a1818-9800-51e8-97cd-d9102cc59904', 'subnet': '0.0.0.0 0.0.0.0', 'type': 'fqdn', 'start-ip': '0.0.0.0', 'end-ip': '0.0.0.0', 'fqdn': 'swscan.apple.com', 'country': '', 'wildcard-fqdn': 'swscan.apple.com', 'cache-ttl': 0, 'wildcard': '0.0.0.0 0.0.0.0', 'sdn': '', 'tenant': '', 'organization': '', 'epg-name': '', 'subnet-name': '', 'sdn-tag': '', 'policy-group': '', 'comment': '', 'visibility': 'enable', 'associated-interface': '', 'color': 0, 'filter': '', 'obj-id': '', 'list': [], 'tagging': [], 'allow-routing': 'disable'}, {'q_origin_key': 'update.microsoft.com', 'name': 'update.microsoft.com', 'uuid': 'f75a1b2e-9800-51e8-9692-587a860fbeda', 'subnet': '0.0.0.0 0.0.0.0', 'type': 'fqdn', 'start-ip': '0.0.0.0', 'end-ip': '0.0.0.0', 'fqdn': 'update.microsoft.com', 'country': '', 'wildcard-fqdn': 'update.microsoft.com', 'cache-ttl': 0, 'wildcard': '0.0.0.0 0.0.0.0', 'sdn': '', 'tenant': '', 'organization': '', 'epg-name': '', 'subnet-name': '', 'sdn-tag': '', 'policy-group': '', 'comment': '', 'visibility': 'enable', 'associated-interface': '', 'color': 0, 'filter': '', 'obj-id': '', 'list': [], 'tagging': [], 'allow-routing': 'disable'}], 'vdom': 'root', 'path': 'firewall', 'name': 'address', 'status': 'success', 'http_status': 200, 'serial': 'FGVM020000118048', 'version': 'v6.0.2', 'build': 163})\n\n(0, {\"status_code\": response.status_code, \"message\": \"Logout Successful\"})\n``` \n\n## Logging\n\nA logging functionality has been provided to enable logging to different handlers as required by the caller using the standard python logging facility. The capability to start logging is simply by calling the *getLog* function. This function returns the internal logging reference held by the FortiGate instance. To add or remove a handler use the associated *addHandler()* or *removeHandler()* functions providing a FileHandler or StreamHandler etc... object. The signature for the *getLog()* function is:\n\n```\ndef getLog(self, loggername=\"fortinet\", lvl=logging.INFO)\n``` \n\nOnce a logger is created by calling the *getLog* function, the logger will log the debug information to whatever handler was provided to the *addHandler()* function. If more than one handler is added, more than one log will occur. To stop logging simply use the *resetLog()* function and the Logging object will be set to None. An example of how to log all debug output to a file would be:\n\n```\nfgt.getLog(loggername=\"fgt\")\nfh = logging.FileHandler(\"/location/to/log/fil.log\")\nfh.setLevel(logging.INFO)\nfh.setFormatter(logging.Formatter(\"%(asctime)s - %(name)s: %(message)s \", \"%m/%d/%Y %I:%M:%S %p\"))\nfgt.addHandler(fh)\n```\n\nAn external module can utilize standard logging functionality to provide a subordinate type logging function using the same handlers as provided to the pyFGT module. For instance, to log to the same location as the pyFGT module logs Handler is set, you would simply have to do the following:\n\n```\nfgt_logger = logging.getLogger(\"fgt.drvr\")\n\n# somewhere in the module\nfgt_logger.log(logging.INFO, \"This is a log message)\n```\n\nThe log output in this case would have the fgt.drvr moniker in the format header due to the use of the *%(name)s* format string shown above.\n\n\n## Motivation\n\nThis package supports Ansible requirements and proper mod_utils utilization, however, it can be utilized for contact with any Fortinet FortiGate appliance or VM asset. \n\n## Installation\n\nInstallation of this package will be via the pip interface\n\n## Tests\n\nUtilizing the library is relatively simple.\n\nAssuming you are within the with context and still using **fgt_instance** as before, to get all address objects in the **root** vdom, the following would be used:\n\n```\nfgt_instance.get(\"cmdb/firewall/address\", \"vdom=root\")\n```\n\nTo **add** an address group with a member address object of autoupdate.opera.com, the following would be used:\n\n```\ndata = {\n            \"name\": \"test_group\",\n            \"member\": [{\"name\": \"autoupdate.opera.com\"}, ],\n        }\nfgt_instance.post(\"/cmdb/firewall/addrgrp\", **data)\n```\n\nNotice how the **data** dictionary is created and then sent in as **\\**data**. This would allow for if there are dashes in the keys of the dictionary that is required. If you did not want to use the double underscore method of alleviating this problem, the above method is the way to handle that as the building of the JSON within the object doesn't have the issue. The call could have been:\n\n```\nfgt_instance.post(\"/cmdb/firewall/addrgrp\", name=\"test_group\", member=[{\"name\": \"autoupdate.opera.com\"}, ])\n```\n\nNotice that all you have to do is send in the data that needs to be sent to the FortiGate appliance in the **\\**kwargs** field - this makes calls extremely simple - send in a URL and the keyword arguments and the rest is taken care of.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/p4r4n0y1ng/pyfgt",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfgt",
    "package_url": "https://pypi.org/project/pyfgt/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyfgt/",
    "project_urls": {
      "Homepage": "https://github.com/p4r4n0y1ng/pyfgt"
    },
    "release_url": "https://pypi.org/project/pyfgt/0.5.6/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "Represents the base components of the Fortinet FortiGate REST interface with abstractions",
    "version": "0.5.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14202798,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ec3e6b371e3dd2522724a0715753173ded88f63b78faf3566cbb90bae15b786",
          "md5": "5de76b3757bd692e6489e6183f789a0f",
          "sha256": "c861f75080efc902178824c6286ffe691383153ef673b386e39b9e7dcf4a54e7"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5de76b3757bd692e6489e6183f789a0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4680,
        "upload_time": "2018-08-04T20:31:10",
        "upload_time_iso_8601": "2018-08-04T20:31:10.238246Z",
        "url": "https://files.pythonhosted.org/packages/5e/c3/e6b371e3dd2522724a0715753173ded88f63b78faf3566cbb90bae15b786/pyfgt-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae90c99ee357112590d78222e606d8b94c29fc352c2bfcde17c2e15882b7d065",
          "md5": "4fb9c0c8d57e700bae7ee3994583054b",
          "sha256": "43952eed1079f868e7cadfb6cd4181c494eefc441014c6ba67549df776dea6eb"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4fb9c0c8d57e700bae7ee3994583054b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9179,
        "upload_time": "2018-08-04T20:31:11",
        "upload_time_iso_8601": "2018-08-04T20:31:11.470783Z",
        "url": "https://files.pythonhosted.org/packages/ae/90/c99ee357112590d78222e606d8b94c29fc352c2bfcde17c2e15882b7d065/pyfgt-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0119d0cce656c48f4a3260f3799e6a9cb9ccca72432751b10378fc16759475d",
          "md5": "231719aa2c7384ae224b6692dbf9fa20",
          "sha256": "7676581587a1cbee622eba33af709e33e766e0f2e260e8439c08025d030b6794"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "231719aa2c7384ae224b6692dbf9fa20",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9636,
        "upload_time": "2018-09-13T14:41:47",
        "upload_time_iso_8601": "2018-09-13T14:41:47.738515Z",
        "url": "https://files.pythonhosted.org/packages/a0/11/9d0cce656c48f4a3260f3799e6a9cb9ccca72432751b10378fc16759475d/pyfgt-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7374a945d848e3713f53984f6be099684c7ec35f48f5b72ee2783915cb305f38",
          "md5": "cd01073e5f48266e6fa49a846e26a682",
          "sha256": "3aff5adf0424aee0692e72009230f18cb7db3ab4c0f6a9a69ef03f2224f351ab"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd01073e5f48266e6fa49a846e26a682",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10783,
        "upload_time": "2018-09-13T14:41:48",
        "upload_time_iso_8601": "2018-09-13T14:41:48.960788Z",
        "url": "https://files.pythonhosted.org/packages/73/74/a945d848e3713f53984f6be099684c7ec35f48f5b72ee2783915cb305f38/pyfgt-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d78c24fccfaa985d7adf21acaf7cf92bd69d1b272c42c02a9e8f826f4515c32a",
          "md5": "d8fbc7a1212c8838d267fe5d45ffbe0b",
          "sha256": "b425efdeb49c367b646e88e84ff654126491d3de9be78fbb24fa298c3c22d324"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8fbc7a1212c8838d267fe5d45ffbe0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9635,
        "upload_time": "2019-12-05T03:13:13",
        "upload_time_iso_8601": "2019-12-05T03:13:13.194282Z",
        "url": "https://files.pythonhosted.org/packages/d7/8c/24fccfaa985d7adf21acaf7cf92bd69d1b272c42c02a9e8f826f4515c32a/pyfgt-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fcb9f99aeaac974230818a42b71873ebf9274a84a7359d3bc3d7b1fa2c3c712",
          "md5": "c373103a92b4708ddb429a52de7365da",
          "sha256": "005f9924ee55317e3a58d65e1a9175e66fbbbf52f8d798327f4093426d7b52fc"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c373103a92b4708ddb429a52de7365da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9753,
        "upload_time": "2019-12-05T03:13:14",
        "upload_time_iso_8601": "2019-12-05T03:13:14.965413Z",
        "url": "https://files.pythonhosted.org/packages/7f/cb/9f99aeaac974230818a42b71873ebf9274a84a7359d3bc3d7b1fa2c3c712/pyfgt-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ad3e6f754eca6f6c159fb1459db2ee80b4222e77a56cd40c8ccce6939346bcc",
          "md5": "691420269676c78b23b45102aa6803c8",
          "sha256": "3eb466430d29566b2f660b04e9a28f0f922e755b7c0bac1f785a7d7ed7cab1d3"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "691420269676c78b23b45102aa6803c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42053,
        "upload_time": "2019-12-11T06:45:31",
        "upload_time_iso_8601": "2019-12-11T06:45:31.062098Z",
        "url": "https://files.pythonhosted.org/packages/6a/d3/e6f754eca6f6c159fb1459db2ee80b4222e77a56cd40c8ccce6939346bcc/pyfgt-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97ab43c7745c3bfe53f4944f4cb19c16d9a7ef192846795f32cf7bde328e5473",
          "md5": "7652e6977dbf275104ea2254de12ff7e",
          "sha256": "5b4eb20792f50ca1350eadbff852c885fc64580c8810f397f7140b2b3841e433"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7652e6977dbf275104ea2254de12ff7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31677,
        "upload_time": "2019-12-11T06:45:32",
        "upload_time_iso_8601": "2019-12-11T06:45:32.801987Z",
        "url": "https://files.pythonhosted.org/packages/97/ab/43c7745c3bfe53f4944f4cb19c16d9a7ef192846795f32cf7bde328e5473/pyfgt-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "639e6f37b611906398909d6eda0d2be289c6172d615df15318ad8578df2ec2c6",
          "md5": "dd87f9460840801376e7f5edbee03867",
          "sha256": "bdc029a573222e60976ecb0a5b883baffa8527907a720c59c3aa9daae370593d"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd87f9460840801376e7f5edbee03867",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42869,
        "upload_time": "2019-12-12T20:49:25",
        "upload_time_iso_8601": "2019-12-12T20:49:25.403171Z",
        "url": "https://files.pythonhosted.org/packages/63/9e/6f37b611906398909d6eda0d2be289c6172d615df15318ad8578df2ec2c6/pyfgt-0.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3db01d86ec6a1fe3bf5c6a1e0a87b7726a7d3b5ee2d2d3318170d30f666b4e9",
          "md5": "a55dce7e27cee362163cd7baffc6ed88",
          "sha256": "6457e5ef617067ad812f17dea9285ac33197a1f2f6678dca37c34462fdcfa6ee"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a55dce7e27cee362163cd7baffc6ed88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42913,
        "upload_time": "2020-11-30T18:21:04",
        "upload_time_iso_8601": "2020-11-30T18:21:04.065110Z",
        "url": "https://files.pythonhosted.org/packages/d3/db/01d86ec6a1fe3bf5c6a1e0a87b7726a7d3b5ee2d2d3318170d30f666b4e9/pyfgt-0.5.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc8da18b384648dd453f7a178bc2c0a75d81d98cfd39c618f6dbda2efd001346",
          "md5": "56c3d3dfc67a2e905340f81600150b7a",
          "sha256": "9e24311c4d3d8dc5a6ab09aa4b4c589ccf44a2414b34928c8ed5a0d7ac750b90"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "56c3d3dfc67a2e905340f81600150b7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32499,
        "upload_time": "2020-11-30T18:21:05",
        "upload_time_iso_8601": "2020-11-30T18:21:05.411407Z",
        "url": "https://files.pythonhosted.org/packages/bc/8d/a18b384648dd453f7a178bc2c0a75d81d98cfd39c618f6dbda2efd001346/pyfgt-0.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9923fbb275ae27a569c8f886655499479bc7f8581286ed4844eeb2b4b2fd51f",
          "md5": "e661dbbf798695e5ddcc1d54d663887f",
          "sha256": "1c836ff4662e046d481a949015ef1c7ee465d2fea8cfd6307347dfc85215c046"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e661dbbf798695e5ddcc1d54d663887f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 47071,
        "upload_time": "2022-06-21T19:41:13",
        "upload_time_iso_8601": "2022-06-21T19:41:13.151741Z",
        "url": "https://files.pythonhosted.org/packages/f9/92/3fbb275ae27a569c8f886655499479bc7f8581286ed4844eeb2b4b2fd51f/pyfgt-0.5.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f9de7d1f6668d727957349ec579a2761d0a0d6287b83d9de48ed72679c748d8",
          "md5": "6ed22590892f4416dd8a68ec3c17fbc9",
          "sha256": "42b5f6ea1f517753c7004d74e709e44d7074dc54bd9313423f11fdce86621dd2"
        },
        "downloads": -1,
        "filename": "pyfgt-0.5.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6ed22590892f4416dd8a68ec3c17fbc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42284,
        "upload_time": "2022-06-21T19:41:15",
        "upload_time_iso_8601": "2022-06-21T19:41:15.031258Z",
        "url": "https://files.pythonhosted.org/packages/0f/9d/e7d1f6668d727957349ec579a2761d0a0d6287b83d9de48ed72679c748d8/pyfgt-0.5.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9923fbb275ae27a569c8f886655499479bc7f8581286ed4844eeb2b4b2fd51f",
        "md5": "e661dbbf798695e5ddcc1d54d663887f",
        "sha256": "1c836ff4662e046d481a949015ef1c7ee465d2fea8cfd6307347dfc85215c046"
      },
      "downloads": -1,
      "filename": "pyfgt-0.5.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e661dbbf798695e5ddcc1d54d663887f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 47071,
      "upload_time": "2022-06-21T19:41:13",
      "upload_time_iso_8601": "2022-06-21T19:41:13.151741Z",
      "url": "https://files.pythonhosted.org/packages/f9/92/3fbb275ae27a569c8f886655499479bc7f8581286ed4844eeb2b4b2fd51f/pyfgt-0.5.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f9de7d1f6668d727957349ec579a2761d0a0d6287b83d9de48ed72679c748d8",
        "md5": "6ed22590892f4416dd8a68ec3c17fbc9",
        "sha256": "42b5f6ea1f517753c7004d74e709e44d7074dc54bd9313423f11fdce86621dd2"
      },
      "downloads": -1,
      "filename": "pyfgt-0.5.6.tar.gz",
      "has_sig": false,
      "md5_digest": "6ed22590892f4416dd8a68ec3c17fbc9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 42284,
      "upload_time": "2022-06-21T19:41:15",
      "upload_time_iso_8601": "2022-06-21T19:41:15.031258Z",
      "url": "https://files.pythonhosted.org/packages/0f/9d/e7d1f6668d727957349ec579a2761d0a0d6287b83d9de48ed72679c748d8/pyfgt-0.5.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}