{
  "info": {
    "author": "Lukas Gienapp",
    "author_email": "lukas@gien.app",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Artistic Software",
      "Topic :: Multimedia :: Graphics :: Presentation",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "# Aquarel ðŸŽ¨\n\n[![PyPi](https://img.shields.io/pypi/v/aquarel)](https://pypi.org/project/aquarel/)\n[![License](https://img.shields.io/github/license/lgienapp/aquarel)]()\n[![Documentation Status](https://readthedocs.org/projects/aquarel/badge/?version=latest)](https://aquarel.readthedocs.io/en/latest/?badge=latest)\n\nAquarel is a lightweight templating engine and wrapper around Matplotlibs' `rcparams` to make styling plots simple.\nAquarel templates can be defined programmatically and be serialized and shared in a JSON format.\n\nFull documentation is available at [aquarel.readthedocs.io](https://aquarel.readthedocs.io/en/latest/?badge=latest).\n\n## Installation\n\nInstall via pip:\n\n```sh\npython -m pip install aquarel\n```\n\n## Usage\n\n###### Applying a style\n\nStyles can be either applied globally\n\n```python\nfrom aquarel import load_theme\n\ntheme = load_theme(\"arctic_light\")\ntheme.apply()\n# ... plotting code here\ntheme.apply_transforms()\n```\n\n...or with a context manager:\n\n```python\nfrom aquarel import load_theme\n\nwith load_theme(\"arctic_light\"):\n    figure = # ... plotting code here\n```\n\n###### Transforms\n\nThemes may specify _transforms_. Transforms are functions applied on the finished plot to achieve aesthetics that are not possibly by means of `rcparams` only.\nFor example, to trim the axes, one could apply the `trim` transform:\n\n```python\nfrom aquarel import load_theme\n\nwith load_theme(\"arctic_light\").set_transforms(trim=True):\n    figure = # ... plotting code here\n\n# plt.show() or savefig() have to be called outside the context manager to have the transforms correctly applied.\nfigure.savefig()\n```\n\nHowever, there is one important thing to keep in mind: since transforms require the matplotlib figure/axes object to be present and finished, they have to be applied **after** the plotting code.\nWhen using a theme with a context manager, this is automatically done in the `__exit__` call. If global usage is desired, `Theme.apply_transforms()` has to be called after every figure.\nThis also means that calls that make use of the finished figure, i.e. `plt.show` or `plt.savefig` have to commence after transform application, so **outside** the context manager.\n\n###### Customization & Theme Creation\n\nBesides loading a predefined theme, you can create a new theme\n\n```python\nfrom aquarel import Theme\n\ntheme = (\n    Theme(name=\"demo\", description=\"A demo theme.\")\n    .set_grid(draw=True, width=0.5)\n    .set_font(family=\"monospace\")\n    .set_color(grid_color=\"blue\")\n)\n```\n\n...modify an existing one\n\n```python\nfrom aquarel import load_theme\n\ntheme = (\n    load_theme(\"arctic_light\")\n    .set_grid(width=2)\n)\n```\n\n...and write and load your custom styles to and from disk:\n\n```python\nfrom aquarel import Theme\n\ntheme = Theme.from_file(\"custom.json\")\ntheme.save(\"custom.json\")\n```\n\nIf the simplified API of aquarel is not sufficient for your use-case, you can also directly modify the underlying `rcparams` with overrides:\n\n```python\nfrom aquarel import load_theme\n\ntheme = load_theme(\"arctic_light\").set_overrides({\n    \"ytick.minor.visible\": False,\n    \"xtick.minor.visible\": True\n})\n```\n\n## Themes\n\naquarel ships with several pre-defined themes that are designed to showcase its templating capabilities.\nAdd your own with a pull request!\n\n| Name            | Description                                                                                      | Preview                                                                              |\n| :-------------- | :----------------------------------------------------------------------------------------------- | :----------------------------------------------------------------------------------- |\n| `arctic_dark`   | Frosty dark theme based on the [nord](https://github.com/arcticicestudio/nord) color scheme      | ![](https://github.com/lgienapp/aquarel/blob/main/assets/arctic_dark.png?raw=true)   |\n| `arctic_light`  | Frosty dark theme based on the [nord](https://github.com/arcticicestudio/nord) color scheme      | ![](https://github.com/lgienapp/aquarel/blob/main/assets/arctic_light.png?raw=true)  |\n| `boxy_dark`     | Dark theme with enclosing box and grid                                                           | ![](https://github.com/lgienapp/aquarel/blob/main/assets/boxy_dark.png?raw=true)     |\n| `boxy_light`    | Light theme with enclosing box and grid                                                          | ![](https://github.com/lgienapp/aquarel/blob/main/assets/boxy_light.png?raw=true)    |\n| `gruvbox_dark`  | Dark theme with pastel [retro groove colors](https://github.com/morhetz/gruvbox)                 | ![](https://github.com/lgienapp/aquarel/blob/main/assets/gruvbox_dark.png?raw=true)  |\n| `gruvbox_light` | Light theme with pastel [retro groove colors](https://github.com/morhetz/gruvbox)                | ![](https://github.com/lgienapp/aquarel/blob/main/assets/gruvbox_light.png?raw=true) |\n| `minimal_dark`  | Dark theme with minimal visual elements                                                          | ![](https://github.com/lgienapp/aquarel/blob/main/assets/minimal_dark.png?raw=true)  |\n| `minimal_light` | Light theme with minimal visual elements                                                         | ![](https://github.com/lgienapp/aquarel/blob/main/assets/minimal_light.png?raw=true) |\n| `scientific`    | Space-efficient and color-blind friendly theme for printing on paper                             | ![](https://github.com/lgienapp/aquarel/blob/main/assets/scientific.png?raw=true)    |\n| `umbra_dark`    | Balanced dark theme based on the [penumbra](https://github.com/nealmckee/penumbra) color scheme  | ![](https://github.com/lgienapp/aquarel/blob/main/assets/umbra_dark.png?raw=true)    |\n| `umbra_light`   | Balanced light theme based on the [penumbra](https://github.com/nealmckee/penumbra) color scheme | ![](https://github.com/lgienapp/aquarel/blob/main/assets/umbra_light.png?raw=true)   |\n\n## FAQ\n\n###### How is this different from matplotlib style sheets?\n\n`aquarel` is a wrapper around the stylesheets, so everything you can do with stylesheets can be achieved with `aquarel`. However there are some notable shortcomings of stylesheets that `aquarel` adresses:\n\n1. **On-the-fly templating** â€“ the stylesheets are applied once and are then used for every plot in the current plotting context (py-file, notebook, ipython session, ...). `aquarel` takes a different approach here and aims to provide per-plot styling with optional temporary changes. The style `aquarel` applies lasts throughout the context manager (`with aquarel.Theme:`), and switches back to whatever is the global default style outside of it. This allows you to do plot-level temporary changes. You have one plot in your notebook that needs no minor ticks? just `with theme.set_ticks():` for this plot only.\n2. **Simplified templating**: matplotlib stylesheets have a lot of redundant keys for most applications. For example, you rarely want to have different colors for both axes; while possible with a stylefile, its cumbersome to change all the different keys to achieve a uniform look. `aquarel` simplifies this with e.x. a single `set_color(ticks=\"#eee\")` call, which changes all related and relevant keys for ticks. Note that this simplifies the API, but does not restrict capabilities: the `set_overrides` method accepts every possible stylefile key if you want to access low-level styling.\n3. **Transforms**: some style elements, like trimmed axes, are not achievable with stylesheets alone (see README for more informations). `aquarel` defines a few of these transforms (and hopefully many more in the future), and makes them persistable and shareable through aquarel themes. Instead of having to apply a seaborn despine after every plot, you can have a global style that specifies a trim, and have consistent styling throughout with minimal code repetition.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/lgienapp/aquarel/archive/refs/tags/v0.0.5.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lgienapp/aquarel",
    "keywords": "theme,plotting,visualization,styling,matplotlib",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aquarel",
    "package_url": "https://pypi.org/project/aquarel/",
    "platform": null,
    "project_url": "https://pypi.org/project/aquarel/",
    "project_urls": {
      "Bug Tracker": "https://github.com/lgienapp/aquarel/issues",
      "Download": "https://github.com/lgienapp/aquarel/archive/refs/tags/v0.0.5.tar.gz",
      "Homepage": "https://github.com/lgienapp/aquarel"
    },
    "release_url": "https://pypi.org/project/aquarel/0.0.5/",
    "requires_dist": [
      "matplotlib (>=3.4.0)",
      "cycler"
    ],
    "requires_python": ">3.7",
    "summary": "Lightweight templating engine for matplotlib",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15722795,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05b4e4ac41b948fece193d7c03dba351dc410dea5b221730b4458e7be13d510f",
          "md5": "354f281f3bdd0ec0bbab11e59f9d320d",
          "sha256": "21041f9117e86d1cde423ea05eca32898804c492d5ab51b5cb66ada23a449691"
        },
        "downloads": -1,
        "filename": "aquarel-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "354f281f3bdd0ec0bbab11e59f9d320d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11941,
        "upload_time": "2022-08-09T09:42:34",
        "upload_time_iso_8601": "2022-08-09T09:42:34.237209Z",
        "url": "https://files.pythonhosted.org/packages/05/b4/e4ac41b948fece193d7c03dba351dc410dea5b221730b4458e7be13d510f/aquarel-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69501bd6d8e8084e711f926c4e5727ad02f5bcd11dd9108b6467529721f494b7",
          "md5": "21b0ea129d87704329eb6350e7059b11",
          "sha256": "e0755bd7e0e588ad8b97786f3495345f82ef227946836f07b149370770e4b412"
        },
        "downloads": -1,
        "filename": "aquarel-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "21b0ea129d87704329eb6350e7059b11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13933,
        "upload_time": "2022-08-10T20:58:35",
        "upload_time_iso_8601": "2022-08-10T20:58:35.439454Z",
        "url": "https://files.pythonhosted.org/packages/69/50/1bd6d8e8084e711f926c4e5727ad02f5bcd11dd9108b6467529721f494b7/aquarel-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e37ceca632626edfef3d4029d0875fb217bb9da3f73d6eca2cfa4e43f1f3e9b7",
          "md5": "3d3416d057d4dd5ae03b8fd4c8341f43",
          "sha256": "64a5d6fff324d59126458db6a624736c909b7781f66e44cb53196d121a0f5b45"
        },
        "downloads": -1,
        "filename": "aquarel-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3d3416d057d4dd5ae03b8fd4c8341f43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13944,
        "upload_time": "2022-08-10T21:07:04",
        "upload_time_iso_8601": "2022-08-10T21:07:04.858241Z",
        "url": "https://files.pythonhosted.org/packages/e3/7c/eca632626edfef3d4029d0875fb217bb9da3f73d6eca2cfa4e43f1f3e9b7/aquarel-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e09462dcdd1308a29f0ef9ada3a9eda99023927f8e629ef0057ae0c8e7fc2762",
          "md5": "18900b664338631265a8ded78d8ee214",
          "sha256": "23ae2851d3dadd9dfa25b895b8253316f38813544e3d89f0bfa902449af1e06a"
        },
        "downloads": -1,
        "filename": "aquarel-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18900b664338631265a8ded78d8ee214",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.7",
        "size": 18881,
        "upload_time": "2022-08-31T12:24:05",
        "upload_time_iso_8601": "2022-08-31T12:24:05.815045Z",
        "url": "https://files.pythonhosted.org/packages/e0/94/62dcdd1308a29f0ef9ada3a9eda99023927f8e629ef0057ae0c8e7fc2762/aquarel-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbd42a5fbcecdaa0a67bc3af6bc1efa8062d4a66ea4c0ab91ce3c192781247fc",
          "md5": "bdf51705a7eb2dde54f2c4f832747283",
          "sha256": "6ec35e5b6a0ca7b8559f89987276b4702af1bc3d9ffbd589b14d0815bb5f89b6"
        },
        "downloads": -1,
        "filename": "aquarel-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bdf51705a7eb2dde54f2c4f832747283",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.7",
        "size": 17488,
        "upload_time": "2022-08-31T12:24:07",
        "upload_time_iso_8601": "2022-08-31T12:24:07.848880Z",
        "url": "https://files.pythonhosted.org/packages/cb/d4/2a5fbcecdaa0a67bc3af6bc1efa8062d4a66ea4c0ab91ce3c192781247fc/aquarel-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6820edac8e715c9a81437bb376a3d41f0eea9189ff647bf4f74052123fc487a3",
          "md5": "3c950fe70b865876162674dfcb5b6593",
          "sha256": "65becdc525be8374d434836ca16bfea9338106a62ec1bbfb959dd7a705b8d547"
        },
        "downloads": -1,
        "filename": "aquarel-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c950fe70b865876162674dfcb5b6593",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.7",
        "size": 20316,
        "upload_time": "2022-11-10T10:33:19",
        "upload_time_iso_8601": "2022-11-10T10:33:19.988381Z",
        "url": "https://files.pythonhosted.org/packages/68/20/edac8e715c9a81437bb376a3d41f0eea9189ff647bf4f74052123fc487a3/aquarel-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f23e5452c86fd679263bfc1a58cb7b239660e94183a2b28022a32eed19aa5cd",
          "md5": "e1e9f846f87f03a078685e1aed4e2916",
          "sha256": "c705ca6ac7b6c3381c86a5030b04fce0b872b88c51a9af39b56f2975476a51d7"
        },
        "downloads": -1,
        "filename": "aquarel-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e1e9f846f87f03a078685e1aed4e2916",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.7",
        "size": 17867,
        "upload_time": "2022-11-10T10:33:21",
        "upload_time_iso_8601": "2022-11-10T10:33:21.606116Z",
        "url": "https://files.pythonhosted.org/packages/6f/23/e5452c86fd679263bfc1a58cb7b239660e94183a2b28022a32eed19aa5cd/aquarel-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6820edac8e715c9a81437bb376a3d41f0eea9189ff647bf4f74052123fc487a3",
        "md5": "3c950fe70b865876162674dfcb5b6593",
        "sha256": "65becdc525be8374d434836ca16bfea9338106a62ec1bbfb959dd7a705b8d547"
      },
      "downloads": -1,
      "filename": "aquarel-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c950fe70b865876162674dfcb5b6593",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.7",
      "size": 20316,
      "upload_time": "2022-11-10T10:33:19",
      "upload_time_iso_8601": "2022-11-10T10:33:19.988381Z",
      "url": "https://files.pythonhosted.org/packages/68/20/edac8e715c9a81437bb376a3d41f0eea9189ff647bf4f74052123fc487a3/aquarel-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f23e5452c86fd679263bfc1a58cb7b239660e94183a2b28022a32eed19aa5cd",
        "md5": "e1e9f846f87f03a078685e1aed4e2916",
        "sha256": "c705ca6ac7b6c3381c86a5030b04fce0b872b88c51a9af39b56f2975476a51d7"
      },
      "downloads": -1,
      "filename": "aquarel-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "e1e9f846f87f03a078685e1aed4e2916",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.7",
      "size": 17867,
      "upload_time": "2022-11-10T10:33:21",
      "upload_time_iso_8601": "2022-11-10T10:33:21.606116Z",
      "url": "https://files.pythonhosted.org/packages/6f/23/e5452c86fd679263bfc1a58cb7b239660e94183a2b28022a32eed19aa5cd/aquarel-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}