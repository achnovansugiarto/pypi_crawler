{
  "info": {
    "author": "Chris Dee",
    "author_email": "chris.dee@optimizely.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "Docebo-SSO\n==========\n\nThis package is meant to allow a simple python interface to add a third\nparty Single Sign On to the Docebo Learning Management System. Docebo's\nSSO does not create a user that doesn't exist, or update the credentials\nof a user that does exist.\n\nUsage\n-----\n\nThere are two ways to use this package, depending on the amount of\ncustomization that you need with Docebo's sign on.\n\nUser API\n~~~~~~~~\n\nThe user API is a simple, flexible set of methods to sync a Docebo user\nwith a locally created user object. To ue the methods, the DoceboUser\nobject must first be instantiated with all of the information to be\nsynced with the user from Docebo\n\nA full list of valid user parameters can be found at Docebo's API\nreference:\nhttps://www.docebo.com/wp-content/uploads/media/Docebo\\_APImanual.pdf\n\n.. code:: sh\n\n    from doceboSSO import docebo_user\n\n    new_user = DoceboUser(\n     userid='batman',\n     firstname='john',\n     lastname='Doe',\n     ...\n    )\n\nNext, the API and SSO keys and the hosting domain for your LMS must be\ninitialized. This method will also create the appropriate hashes and\ntokens necessary for using Docebo's API\n\n.. code:: sh\n\n    new_user.initialize_keys(\n     domain='http://example.docebosaas.com'\n     api_key='xxxxxxxxxx'\n     api_secret='xxxxxxxxxx'\n     sso_token='xxxxxx'\n    )\n\nFinally, you can use the methods in the DoceboUser api to interact with\nDocebo -- the methods use the parameters you input into the DoceboUser\nobject and generate valid params/api\\_keys.\n\n.. code:: sh\n\n    if new_user.verify_existence():\n      new_user.update_on_docebo()\n    else:\n      new_user.create()\n\n    redirect_url = new_user.signin()\n\nThe above is a simple script to create the local user initialized in the\nfirst step if their userid doesn't exist on Docebo, and update their\nuser parameters if they do exist.\n\nredirect\\_to will contain a valid, signed, URL to signin to that user's\naccount on Docebo that can be redirected to or pasted into a browser.\n\nThe following call can also be used to update the specified user\nattributes on the local DoceboUser. This info can then be pushed to\nDocebo/used to create a new user.\n\n.. code:: sh\n\n    new_user.update_info_locally(\n      firstname='jane',\n      lastname='dae',\n      ...\n    )\n\nAvailable methods are:\n\n.. code:: sh\n\n    All of these methods return boolean values for success for easy control flow\n\n    from doceboSSO import docebo_user\n\n    # Initialize user object with keys, secrets and domain\n    initialize_keys(self, domain, api_secret, api_key, sso_secret)\n\n    # Verify user exists in Docebo\n    # Hits /api/user/checkUsername\n    verify_existence(self)\n\n    # Update remote user params given local user information\n    update_on_docebo(self)\n\n    # Create a new user based on local user \n    # Hits /api/user/create\n    create(self)\n\n    # Delete user\n    # Hits /api/user/delete\n    delete(self)\n\n    # Sign user in (if account exists), and return URL which will sign that user into their docebo account\n    signin(self)\n\n    # Update local user's information\n    update_info_locally\n\nIn order to call delete or update\\_on docebo, the docebo unique-id for that given user is required.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ncreate() and verify\\_existence() automatically add this field on success\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also use the following method to add the uid manually.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    new_user.set_docebo_unique_id(#####)\n\nMethods API\n^^^^^^^^^^^\n\nThe second method of interaction is less abstracted, but gives the user\nmore control over the params. Where the User API generates params and\nfills in information for the user, the Methods API requires the user to\ninput a set of params as a dictionary at every call.\n\nThe correct format for the params generated for each method can be found\nat:\nhttps://www.docebo.com/wp-content/uploads/media/Docebo\\_APImanual.pdf\n\nThe api\\_key, api\\_secret and sso\\_secret must still be initialized as\nin the User API.\n\nAvailable methods are:\n\n.. code:: sh\n\n    These methods return the json body of the responses they receive.\n\n    # Verify user exists in Docebo\n    verify_user(self, params)\n\n    # Update user params w/input params\n    edit_user(self, params)\n\n    # Create a new user given input params\n    # If called on a user that already exists, returns None\n    create_user(self, params)\n\n    # Delete user corresponding to provided unique_id\n    delete_user(self, params)\n\n    # Sign user in (if account exists), and return URL which will sign that user into their docebo account\n    setup_valid_sso_path_and_params(self, username)\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/optimizely/docebo-SSO",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "doceboSSO",
    "package_url": "https://pypi.org/project/doceboSSO/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/doceboSSO/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/optimizely/docebo-SSO"
    },
    "release_url": "https://pypi.org/project/doceboSSO/0.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Single Sign On Implementation for the Docebo LMS",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1651021,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e2673f623e5f097b929f400bafd0c75f2dff82a0c09f23cb5c718558b382628",
          "md5": "71e9b8b2f85d82fa81a080e7c6f4fcd4",
          "sha256": "781545dd331c746b2658f0601a40c6442d9da9f426fb6f36683cb48e66f2f257"
        },
        "downloads": -1,
        "filename": "doceboSSO-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "71e9b8b2f85d82fa81a080e7c6f4fcd4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6250,
        "upload_time": "2015-07-27T06:41:23",
        "upload_time_iso_8601": "2015-07-27T06:41:23.590318Z",
        "url": "https://files.pythonhosted.org/packages/5e/26/73f623e5f097b929f400bafd0c75f2dff82a0c09f23cb5c718558b382628/doceboSSO-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "002c0fac1ef007317c0492e032d0daadf4c1c4c59430590587735f2ed77fb0c1",
          "md5": "4a52cf4341fba1e3ac1548594270af3f",
          "sha256": "0d8e19c18e035672a4b9c67fa2f05a468139309628a32501201a729f784c21bd"
        },
        "downloads": -1,
        "filename": "doceboSSO-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4a52cf4341fba1e3ac1548594270af3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6282,
        "upload_time": "2015-07-27T07:03:33",
        "upload_time_iso_8601": "2015-07-27T07:03:33.135046Z",
        "url": "https://files.pythonhosted.org/packages/00/2c/0fac1ef007317c0492e032d0daadf4c1c4c59430590587735f2ed77fb0c1/doceboSSO-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "002c0fac1ef007317c0492e032d0daadf4c1c4c59430590587735f2ed77fb0c1",
        "md5": "4a52cf4341fba1e3ac1548594270af3f",
        "sha256": "0d8e19c18e035672a4b9c67fa2f05a468139309628a32501201a729f784c21bd"
      },
      "downloads": -1,
      "filename": "doceboSSO-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4a52cf4341fba1e3ac1548594270af3f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6282,
      "upload_time": "2015-07-27T07:03:33",
      "upload_time_iso_8601": "2015-07-27T07:03:33.135046Z",
      "url": "https://files.pythonhosted.org/packages/00/2c/0fac1ef007317c0492e032d0daadf4c1c4c59430590587735f2ed77fb0c1/doceboSSO-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}