{
  "info": {
    "author": "Albert Swiecicki",
    "author_email": "albertswiecicki@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# MLWrapper v0.1\n\nMLwrapper is a context manager that helps you store experiment results.\n\nContext manager \\_\\_enter\\_\\_ creates mlflow run and store logged values inside. It allows logging following stuff:\n\n- script arguments\n- images\n- scalars\n- metrics\n\n## Quick start\n\n```python\n\n        # data to log\n        kwargs = {\n            \"experiment parameter\": 42,\n        }\n        test_image_1 = np.ones(shape=(3, 40, 40, 1))\n        test_image_1[0,:20,:,:] = 0.\n        test_image_1[1,:,:,:] = 0.\n        test_image_1[2,20:,:,:] = 0.\n\n        test_image_2 = np.ones(shape=(3, 1, 40, 40))\n        test_image_2[0,:, 20:,:] = 0.\n        test_image_2[1,:,:,:] = 0.\n        test_image_2[2,:, :20,:] = 0.\n\n        def test(logger):\n            logger.log_args(**{\"run param\": \"value\"})\n            for step in range(0, 50):\n                logger.log_scalar(\"test_loss\", value=100 - step * 1.5, step=step)\n                logger.log_scalar(\"test_acc\", value=0.00 + step * 0.01, step=step)\n            logger.log_images(\"test_image\", test_image_1, 1)\n            logger.log_images(\"test_image\", test_image_2, 2, channel_first=True)\n            logger.log_metric(\"result\", result)\n\n        # approach 1\n        Experiment = MLWrapper(mlflow_dir=\"/tmp/mlruns/\", **kwargs)\n        with Experiment as logger:\n            test(logger)\n\n        # approach 2\n        with MLWrapper(mlflow_dir=\"/tmp/mlruns/\", **kwargs) as logger:\n            test(logger)\n\n        # approach 3\n        Experiment = MLWrapper(mlflow_dir=\"/tmp/mlruns/\", **kwargs)\n        wrapped_test = Experiment(test) # func needs to accept \"logger\" or \"**kwarg\"\n        wrapped_test()\n```\n\n## Testing\n\nTesting will create files under /tmp directory. Those files are not deleted automatically.\n\n```bash\npython3 -m unittest discover .\n```\n\n## References\n\n[mlflow](https://mlflow.org/)\n\n[tensorboard](https://www.tensorflow.org/tensorboard)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/SlavicMate/mlwrapper/archive/v0.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SlavicMate/mlwrapper",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlwrapper",
    "package_url": "https://pypi.org/project/mlwrapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/mlwrapper/",
    "project_urls": {
      "Download": "https://github.com/SlavicMate/mlwrapper/archive/v0.1.0.tar.gz",
      "Homepage": "https://github.com/SlavicMate/mlwrapper"
    },
    "release_url": "https://pypi.org/project/mlwrapper/0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Wrapper for machine learning experiments",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6220110,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d9ec6097daf7b5f11782d1261fff3bdc606abb404d9d74fa3006d198b16db61",
          "md5": "2bb5bb3ea427aec993ac1d75e550a960",
          "sha256": "4d64b9366e356d0c8f112de5f22dbbb885625b1c6b5b6e062bf4b412c1ea8b15"
        },
        "downloads": -1,
        "filename": "mlwrapper-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2bb5bb3ea427aec993ac1d75e550a960",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4773,
        "upload_time": "2019-11-30T00:20:59",
        "upload_time_iso_8601": "2019-11-30T00:20:59.154639Z",
        "url": "https://files.pythonhosted.org/packages/3d/9e/c6097daf7b5f11782d1261fff3bdc606abb404d9d74fa3006d198b16db61/mlwrapper-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d9ec6097daf7b5f11782d1261fff3bdc606abb404d9d74fa3006d198b16db61",
        "md5": "2bb5bb3ea427aec993ac1d75e550a960",
        "sha256": "4d64b9366e356d0c8f112de5f22dbbb885625b1c6b5b6e062bf4b412c1ea8b15"
      },
      "downloads": -1,
      "filename": "mlwrapper-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2bb5bb3ea427aec993ac1d75e550a960",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4773,
      "upload_time": "2019-11-30T00:20:59",
      "upload_time_iso_8601": "2019-11-30T00:20:59.154639Z",
      "url": "https://files.pythonhosted.org/packages/3d/9e/c6097daf7b5f11782d1261fff3bdc606abb404d9d74fa3006d198b16db61/mlwrapper-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}