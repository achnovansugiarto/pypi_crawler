{
  "info": {
    "author": "davidwallis",
    "author_email": "david@wallis2000.co.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "pySCOrchestrator\n================\n\nThis module is forked from https://github.com/oznu/pyHyperV due to the original being readonly\nand me wanting somewhere changes could be pushed for maintaining this for use for some backwards compatibility.\n\n.. image:: https://img.shields.io/pypi/v/pySCOrchestrator.svg\n        :target: https://pypi.python.org/pypi/pySCOrchestrator/0.0.4\n\nSimple client for calling System Center Orchestrator runbooks in python.\n\n.. contents::\n    :local:\n\n.. _installation:\n\n============\nInstallation\n============\n\nUsing pip::\n\n    $ pip install pySCOrchestrator\n\n\n====================================\nImport & Initialize pySCOrchestrator\n====================================\n\n.. code:: python\n\n    import pySCOrchestrator\n\n    orchestratorEndpoint = \"http://hostname.local:81/Orchestrator2012/Orchestrator.svc\"\n    username = \"domain\\\\username\"\n    password = \"password\"\n\n    o = pySCOrchestrator.orchestrator(orchestratorEndpoint, username, password)\n\n\n===============\nExecute Runbook\n===============\n\n.. code:: python\n\n    pySCOrchestrator.orchestrator.Execute(runbookID, runbookParameters, dictionary=False)\n\n\nYou can send the parameters to orchestrator using the parameter ID or the parameter name.\n\nUsing Parameter IDs\n-------------------\n\nExample of sending using the parameter ID:\n\n.. code:: python\n\n    runbookID = '285f017e-bc97-4b03-a999-64e08065769e'\n\n    runbookParameters = {\n        'f90e6468-31d3-4aa8-9d50-f8bf5bf689e2' : 'value',\n        'edb8d27d-38ad-4d29-a255-30d8360a3852' : 'value',\n        'b61abea1-4001-42fd-99b5-470acc5c1386' : 'value',\n        '32725695-0b25-47e0-abbe-b28e22eca8ad' : 'value',\n    }\n\n    o.Execute(runbookID, runbookParameters)\n\nUsing Parameter Names\n---------------------\n\nTo send a request using the parameter names indead of the IDs, add the **dictionary=True** flag. The parameter names must match the names for each parameter in orchestrator.\n\nExample:\n\n.. code:: python\n\n    runbookID = '285f017e-bc97-4b03-a999-64e08065769e'\n\n    runbookParameters = {\n        'HDD'  : '50gb',\n        'CPU'  : '2',\n        'RAM'  : '2048',\n        'OS'   : 'Server2012',\n    }\n\n    o.Execute(runbookID, runbookParameters, dictionary=True)\n\n\nResponse\n--------\n\nSuccessfully initiating a runbook execution will return a 201 status code, along with the orchestrator job ID. The job ID returned can be used to check the status of the job using the GetJobStatus function.\n\nExample Response:\n\n.. code:: python\n\n    {\n    'status' : 201,\n        'result': {\n            'id'               : '3c87fd6c-69f5-41c9-bd55-ec2aa6ec7c64',\n            'status'           : 'pending',\n            'CreationTime'     : '2014-04-02T12:11:05.617',\n            'LastModifiedTime' : '2014-04-02T12:19:08.963',\n            }\n    }\n\n\n============\nGet Runbooks\n============\n\n.. code:: python\n\n    pySCOrchestrator.orchestrator.GetRunbooks()\n    pySCOrchestrator.orchestrator.GetRunbookID(runbookName)\n\nReturns a list of runbooks and their IDs from orchestrator.\n\nExample:\n\n.. code:: python\n\n    o.GetRunbooks()\n\n    {\n    'status' : 200,\n    'result' : {\n        'Runbook_1' : 'e5944fe0-b600-45d2-a872-0c256594e394'\n        'Runbook_2' : 'fd6d6a4b-1e57-40a3-930a-f4eb56394d3f'\n        'Runbook_3' : '31451e20-5829-4323-9661-603ff826c852'\n        }\n    }\n\n\nIt is also possible to return a single runbook ID by it's name:\n\n.. code:: python\n\n    o.GetRunbookID('Runbook_1')\n\n    'e5944fe0-b600-45d2-a872-0c256594e394'\n\n\n\n\n======================\nGet Runbook Parameters\n======================\n\n.. code:: python\n\n    pySCOrchestrator.orchestrator.GetParameters(runbookID)\n\nThis function returns the parameter names and paramater IDs required by the runbook specified.\n\nExample:\n\n.. code:: python\n\n    runbookID = '285f017e-bc97-4b03-a999-64e08065769e'\n\n    o.GetParameters(runbookID)\n\nExample Response:\n\n.. code:: python\n\n    {\n    'status' : 200,\n      'result': {\n        'HDD' : 'f90e6468-31d3-4aa8-9d50-f8bf5bf689e2',\n        'CPU' : 'edb8d27d-38ad-4d29-a255-30d8360a3852',\n        'RAM' : 'b61abea1-4001-42fd-99b5-470acc5c1386',\n        'OS'  : '32725695-0b25-47e0-abbe-b28e22eca8ad',\n        }\n    }\n\n\n==============\nGet Job Status\n==============\n\n.. code:: python\n\n    pySCOrchestrator.orchestrator.GetJobStatus(jobID)\n\n\nThis function allows you to check the status of an orchestrator job/task.\n\nExample:\n\n.. code:: python\n\n    jobID = '285f017e-bc97-4b03-a999-64e08065769e'\n\n    o.GetParameters(jobID)\n\nExample Response:\n\n.. code:: python\n\n    {\n    'status' : 200,\n        'result': {\n            'id'               : '3c87fd6c-69f5-41c9-bd55-ec2aa6ec7c64',\n            'status'           : 'Complete',\n            'CreationTime'     : '2014-04-02T12:11:05.617',\n            'LastModifiedTime' : '2014-04-02T12:19:08.963',\n            }\n    }\n\n===================\nGet Job Instance ID\n===================\n\n.. code:: python\n\n    pySCOrchestrator.orchestrator.GetJobInstance(jobID)\n\nReturns the job instance ID. This ID can then be used in other functions such as GetInstanceParameters.\n\nExample:\n\n.. code:: python\n\n    jobID = '3c87fd6c-69f5-41c9-bd55-ec2aa6ec7c64'\n\n    o.GetJobInstance(jobID)\n\n    'f4ac97ed-495b-44ae-b547-64611b0d8075'\n\n\n=======================\nGet Instance Parameters\n=======================\n\n.. code:: python\n\n    pySCOrchestrator.orchestrator.GetInstanceParameters(instanceID)\n\n\nReturns the instance parameters from orchestrator. This function can be used to get data returned from orchestrator.\n\nExample:\n\n.. code:: python\n\n    instanceID = 'f4ac97ed-495b-44ae-b547-64611b0d8075'\n\n    o.GetInstanceParameters(instanceID)\n\n    {\n    'status' : 200,\n    'result' : {\n        'HDD'   : '50gb',\n        'CPU'   : '2',\n        'RAM'   : '2048',\n        'OS'    : 'Server2012',\n        'VM_ID' : 'edb8d27d-38ad-4d29-a255-30d8360a3852',\n        'VM_IP' : '127.0.0.1',\n        }\n    }\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davidwallis3101/pySCOrchestrator",
    "keywords": "",
    "license": "Apache License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pySCOrchestrator",
    "package_url": "https://pypi.org/project/pySCOrchestrator/",
    "platform": null,
    "project_url": "https://pypi.org/project/pySCOrchestrator/",
    "project_urls": {
      "Homepage": "https://github.com/davidwallis3101/pySCOrchestrator"
    },
    "release_url": "https://pypi.org/project/pySCOrchestrator/0.0.2/",
    "requires_dist": [
      "requests (>=2.0.0)",
      "requests-ntlm",
      "xmltodict"
    ],
    "requires_python": "",
    "summary": "A simple client for calling System Center Orchestrator runbooks in python",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15473036,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aaf8eb26b9e2e399cb37adca38ae0447a2c1cb66267e1c65fafc9fd5a1e9823",
          "md5": "1354fc7fd9a40e09dc4b2ecc7ac0b0bc",
          "sha256": "83abec58a53e2d9442fb2274a9962a39023dc62a6033998bb864460a97c6c602"
        },
        "downloads": -1,
        "filename": "pySCOrchestrator-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1354fc7fd9a40e09dc4b2ecc7ac0b0bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8408,
        "upload_time": "2022-10-20T11:45:12",
        "upload_time_iso_8601": "2022-10-20T11:45:12.585990Z",
        "url": "https://files.pythonhosted.org/packages/4a/af/8eb26b9e2e399cb37adca38ae0447a2c1cb66267e1c65fafc9fd5a1e9823/pySCOrchestrator-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4abfdd83ee09c201bd71d6324cc998bf6fbcd85b84cf9dd30dbff8b17920a2d",
          "md5": "b63904286ecc09f13cba84c8da38a90a",
          "sha256": "1542cf7cf715d3315bc50dad1143747dfac5d277e1c5dc7944e3ce76878d9111"
        },
        "downloads": -1,
        "filename": "pySCOrchestrator-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b63904286ecc09f13cba84c8da38a90a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8124,
        "upload_time": "2022-10-20T11:45:15",
        "upload_time_iso_8601": "2022-10-20T11:45:15.034677Z",
        "url": "https://files.pythonhosted.org/packages/f4/ab/fdd83ee09c201bd71d6324cc998bf6fbcd85b84cf9dd30dbff8b17920a2d/pySCOrchestrator-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39ca31bab86c26cd5afee6aa605addb4a1f982803aa2862c3b206a6dddc9aa96",
          "md5": "d66eec363d3e3605220ccbdc8f6fe32b",
          "sha256": "c6b3c013a4f34dcac7cb859681c4c276099481516da1e84539f9e7f07d7865b8"
        },
        "downloads": -1,
        "filename": "pySCOrchestrator-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d66eec363d3e3605220ccbdc8f6fe32b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8495,
        "upload_time": "2022-10-20T12:08:30",
        "upload_time_iso_8601": "2022-10-20T12:08:30.567516Z",
        "url": "https://files.pythonhosted.org/packages/39/ca/31bab86c26cd5afee6aa605addb4a1f982803aa2862c3b206a6dddc9aa96/pySCOrchestrator-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7274220924febc5c072a2ece0389c1d5f126f78a93c35c63b071ba74c995079f",
          "md5": "cde17125c47fd1beef3e97b16092ddc2",
          "sha256": "bb0cbbd75587fc807fdd04ffff0157609db81418ec287a3c4ba5758f7949ea3b"
        },
        "downloads": -1,
        "filename": "pySCOrchestrator-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cde17125c47fd1beef3e97b16092ddc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8189,
        "upload_time": "2022-10-20T12:08:32",
        "upload_time_iso_8601": "2022-10-20T12:08:32.684631Z",
        "url": "https://files.pythonhosted.org/packages/72/74/220924febc5c072a2ece0389c1d5f126f78a93c35c63b071ba74c995079f/pySCOrchestrator-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39ca31bab86c26cd5afee6aa605addb4a1f982803aa2862c3b206a6dddc9aa96",
        "md5": "d66eec363d3e3605220ccbdc8f6fe32b",
        "sha256": "c6b3c013a4f34dcac7cb859681c4c276099481516da1e84539f9e7f07d7865b8"
      },
      "downloads": -1,
      "filename": "pySCOrchestrator-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d66eec363d3e3605220ccbdc8f6fe32b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8495,
      "upload_time": "2022-10-20T12:08:30",
      "upload_time_iso_8601": "2022-10-20T12:08:30.567516Z",
      "url": "https://files.pythonhosted.org/packages/39/ca/31bab86c26cd5afee6aa605addb4a1f982803aa2862c3b206a6dddc9aa96/pySCOrchestrator-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7274220924febc5c072a2ece0389c1d5f126f78a93c35c63b071ba74c995079f",
        "md5": "cde17125c47fd1beef3e97b16092ddc2",
        "sha256": "bb0cbbd75587fc807fdd04ffff0157609db81418ec287a3c4ba5758f7949ea3b"
      },
      "downloads": -1,
      "filename": "pySCOrchestrator-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cde17125c47fd1beef3e97b16092ddc2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8189,
      "upload_time": "2022-10-20T12:08:32",
      "upload_time_iso_8601": "2022-10-20T12:08:32.684631Z",
      "url": "https://files.pythonhosted.org/packages/72/74/220924febc5c072a2ece0389c1d5f126f78a93c35c63b071ba74c995079f/pySCOrchestrator-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}