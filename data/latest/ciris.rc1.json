{
  "info": {
    "author": "",
    "author_email": "nickythelion <nickythelionfurry@yandex.ru>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Other Audience",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# Ciris\n\n![GitHub](https://img.shields.io/github/license/nickythelion/ciris?style=plastic)\n\n\nCiris is a lightweight library that specializes on working with color.\nThe package does not rely on any third-party dependencies.\n\nThe name of a library is the first letter of the word \"color\" and the name of the Greek goddess of color, Iris, if you were interested :)\n\n# Color class\nCiris provides a handy Color class that provides functionality for working with color.\nThis class stores the color in HSV color space and allows the end user the greater\nflexibility while modifying the color.\n\n## Creating a Color class using HSV values\nSince the Color class uses HSV, the default constructor is set up to accept HSV values directly:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color(hue, saturation, value)\n```\nYou can also use the built-in function `Color.from_hsv()` to construct the Color object. \n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\n```\nIn this case, both methods are equivalent. The latter was added for the sake of consistency with the other constructors.\n\n## Creating a Color object using RGB values\nThe Color object provides a `Color.from_rgb()` function which can be used to create Color object from RGB band values, like this:\n```python\nfrom ciris import Color\n\nr, g, b = 100, 0, 255\n\nc = Color.from_rgb(r, g, b)\n```\n\n## Creating a Color object using CMYK values\nIn case you need to create a Color object from CMYK values, you can use the `Color.from_cmyk()` method:\n```python\nfrom ciris import Color\n\nc, m, y, k = 15, 0, 45, 2\n\nc = Color.from_cmyk(c, m, y, k)\n```\nNote that CMYK values should be integers in range [0..100], not floats. For example, a CMYK color defined as (45%, 11%, 0%, 56%) should be passed as `c=45, m=11, y=0, k=56`\n\n## Creating a Color object using a hex-string\nIf you have a hex-string you can use the built-in `Color.from_hex()` method to create a Color object:\n```python\nfrom ciris import Color\n\nmy_hex_str = \"#00FF56\"\n\nc = Color.from_hex(my_hex_str)\n```\nNote that `Color.from_hex()` method only accepts a 7-symbol hex-string (a pound sign, 2 symbols for red, 2 symbols for green, 2 symbols for blue). Other variations, such as ARGB, are not yet supported.\n\n## Representing the color as HSV\nSince the HSV space is the space that the Color object uses to store data, no conversion is necessary.\nTo represent the color as HSV values, simply call the `Color.as_hsv()` method:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nhsv_tuple = c.as_hsv()\n```\nThis method returns a tuple with the signature `(hue_value, saturation_value, value_value)`\n\n## Representing the color as RGB\nTo convert the current color to RGB, simply call the `Color.as_rgb()` method:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nrgb_tuple = c.as_rgb()\n```\nThis method returns a tuple with the signature `(r_value, g_value, b_value)`.\n\n## Representing the color as CMYK\nTo convert the current color to CMYK, call the `Color.as_cmyk()` method:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\ncmyk_tuple = c.as_cmyk()\n```\nThis method returns a tuple with the signature `(c_value, m_value, y_value, k_value)`. Note that these values are integers in range [0..100].\n\n## Altering the hue of the color\nTo alter the color's hue, use the `Color.hue_shift()` method. The method takes a required positional argument `amount: int`, which specifies the amount in degrees on a color wheel that the hue will be shifted by.\n\nFor example, this code will shift the color's hue by 30 degrees clockwise:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.hue_shift(30)\nprint(c.as_hsv()) # (290, 90, 90)\n```\nYou can also pass a negative integer into the method to shift the hue counterclockwise. For example, the code below shifts the color's hue by 60 degrees counterclockwise:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.hue_shift(-60)\nprint(c.as_hsv()) # (200, 90, 90)\n```\nSince the hue is always in range [0..360], the method will account for this. An example:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.hue_shift(120) # The shift has caused the hue to become out of acceptable range\n# The hue is a representation of a color wheel, which cannot be more than 360deg, so the method has corrected the hue\nprint(c.as_hsv()) # (20, 90, 90)\n```\nThe same logic works for negative shifts.\n\n## Altering the saturation of the color\nTo alter the color's saturation, use the `Color.adjust_saturation()` method. It takes a required positional argument `amount: int`, that indicated the amount that the saturation needs to be adjusted by.\n\nFor example, this code below raises the color's saturation by 5%:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.adjust_saturation(5)\nprint(c.as_hsv()) # (260, 95, 90)\n```\nYou can also pass a negative integer to lower the saturation level:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.adjust_saturation(-10)\nprint(c.as_hsv()) # (260, 80, 90)\n```\nSince the saturation level should always be in range [0..100], the method will cap any excessive adjustment:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.adjust_saturation(60000)\n# The saturation has only been raised by 10 due to it being capped\nprint(c.as_hsv()) # (260, 100, 90)\n```\n\n## Altering the color's value\nTo adjust color's value, use the `Color.lighten()` and `Color.darken()` methods to lighten and darken the color respectively:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.lighten(10)\nprint(c.as_hsv()) # (200, 90, 100)\n```\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.darken(60)\nprint(c.as_hsv()) # (260, 90, 30)\n```\nThese methods do accept negative integers. In that case their functionality is reversed.\nSince the value should always be in range [0..100], the method will cap any excessive adjustment:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.lighten(10000)\nprint(c.as_hsv()) # (200, 90, 100)\n```\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.darken(600000)\nprint(c.as_hsv()) # (260, 90, 0)\n```\n\n## Inverting the color\nTo invert the color, use the `Color.invert()` method:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nc.invert()\nprint(c.as_hsv()) # (80, 90, 90)\n```\n\n## Applying complementary harmony rule to the color\nTo apply the complementary rule to the current color, use `Color.harmony_complementary()` method:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nrule = c.harmony_complementary()\n```\nThis method returns a [HarmonyRule](#harmonyrule-class) object.\n\n## Applying split complementary harmony rule to the color\nTo apply the split complementary rule to the current color, use `Color.harmony_split_complementary()` method. You can also pass an optional argument `phi: int` that indicates the offset in degrees that will be used. By default it is 150deg:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nrule = c.harmony_split_complementary(phi=40) # The offset used is 40deg\n```\n\nThis method returns a [HarmonyRule](#harmonyrule-class) object.\n\n## Applying triadic harmony rule to the color\nTo apply the triadic rule to the current color, use `Color.harmony_triadic()` method.\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nrule = c.harmony_triadic()\n```\n\nThis method returns a [HarmonyRule](#harmonyrule-class) object.\n\n## Applying tetradic harmony rule to the color\nTo apply the tetradic rule to the current color, use `Color.harmony_tetradic()` method.\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nrule = c.harmony_tetradic()\n```\n\nThis method returns a [HarmonyRule](#harmonyrule-class) object.\n\n## Applying analogous harmony rule to the color\nTo apply the split complementary rule to the current color, use `Color.harmony_analogous()` method. You can also pass an optional argument `phi: int` that indicates the offset in degrees that will be used. By default it is 30deg:\n```python\nfrom ciris import Color\n\nhue, saturation, value = 260, 90, 90\n\nc = Color.from_hsv(hue, saturation, value)\nrule = c.harmony_split_complementary(phi=40) # The offset used is 40deg\n```\n\nThis method returns a [HarmonyRule](#harmonyrule-class) object.\n\n## Comparing the colors\nTo compare Color objects, use a simple `==` statement.\n\nFor example, the code below wil print `The colors are the same`:\n```python\nfrom ciris import Color\n\nif Color(255, 100, 100) == Color.from_hsv(255, 100, 100):\n    print(\"The colors are the same\")\n```\n\n## Looking up colors in a list\nThe Color objects are hashable, meaning that you can easily check if the color \nis already stored an a list of colors using a simple `in` statement:\n```python\nfrom ciris import Color\n\nb_and_w = [Color.from_hex(\"#FFFFFF\"), Color.from_hex(\"#000000\")]\nprint(Color.from_rgb(0, 0, 0) in b_and_w) # True\nprint(Color.from_rgb(62, 81, 22) in b_and_w) # False\n```\n\n# HarmonyRule class\nThis class is a dataclass that is used by ciris to describe any harmony rule that has been applied to the color.\n\nIt has 3 attributes:\n* `rule_type: str` - This attribute stores the type of rule that was applied. Available types are: `complementary`, `split_complementary`, `triadic`, `tetradic`, `analogous`\n* `base_color: Color` - This attribute stores the base color (the color that the rule was applied to)\n* `secondary_colors: List[Color]` - This attribute stores a list of colors that were derived from the base one according to the harmony rule\n\nAll these attributes have their appropriate getters.\n\n# Method chaining\nThe ciris' Color class supports method chaining, allowing you to write simple, concise and practical one-liners, such as:\n\n### Color conversion\n```python\nfrom ciris import Color\nc = Color.from_hsv(260, 90, 90).as_hex()\nv = Color.from_rgb(145, 90, 10).as_cmyk()\n# ...\ng = Color.from_hex(\"#ff0097\").as_hsv()\n```\n\n### Color processing\n```python\nfrom ciris import Color\nnew_color = Color.from_rgb(old.r, old.g, old.b).invert().lighten(15).hue_shift(10).as_cmyk()\n```\n\n# Color Harmony Sources\nHere you can find the source material that was used to create color harmony rules\n* https://en.wikipedia.org/wiki/Harmony_(color)\n* https://blog.thepapermillstore.com/color-theory-color-harmonies/\n* https://blog.matthewgove.com/2021/07/02/color-theory-a-simple-exercise-in-mathematics-and-graphic-design/\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ciris",
    "package_url": "https://pypi.org/project/ciris/",
    "platform": null,
    "project_url": "https://pypi.org/project/ciris/",
    "project_urls": {
      "Homepage": "https://github.com/nickythelion/iris"
    },
    "release_url": "https://pypi.org/project/ciris/1.0.0/",
    "requires_dist": [
      "pytest (~=7.2.0) ; extra == 'dev'",
      "typing-extensions (~=4.4.0) ; extra == 'dev'",
      "black (~=22.10.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "A lightweight Python library that makes working with color easy",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15669122,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "415abc5bf5d81ad536d137eb1658bed103a84e4498c8551dfad28fedaf87ad4b",
          "md5": "950e8748fe5f120899693e2ee12f7168",
          "sha256": "eb6341d111d094e794542f9f9d3fc1963dc612ef6c94a3bae8eba740be444c2f"
        },
        "downloads": -1,
        "filename": "ciris-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "950e8748fe5f120899693e2ee12f7168",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9143,
        "upload_time": "2022-11-05T20:15:18",
        "upload_time_iso_8601": "2022-11-05T20:15:18.166441Z",
        "url": "https://files.pythonhosted.org/packages/41/5a/bc5bf5d81ad536d137eb1658bed103a84e4498c8551dfad28fedaf87ad4b/ciris-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28972c68db0b8299d2961431245bb6db53ac048a0832fc3cba3446df0ee9276e",
          "md5": "6fffbe39417f66de8da81c2f2a9e9dc4",
          "sha256": "5e93732d140051b3be25212fca8092eac881c3b317b88fa15b5e4f13dfd3a454"
        },
        "downloads": -1,
        "filename": "ciris-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6fffbe39417f66de8da81c2f2a9e9dc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11947,
        "upload_time": "2022-11-05T20:15:20",
        "upload_time_iso_8601": "2022-11-05T20:15:20.696362Z",
        "url": "https://files.pythonhosted.org/packages/28/97/2c68db0b8299d2961431245bb6db53ac048a0832fc3cba3446df0ee9276e/ciris-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "415abc5bf5d81ad536d137eb1658bed103a84e4498c8551dfad28fedaf87ad4b",
        "md5": "950e8748fe5f120899693e2ee12f7168",
        "sha256": "eb6341d111d094e794542f9f9d3fc1963dc612ef6c94a3bae8eba740be444c2f"
      },
      "downloads": -1,
      "filename": "ciris-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "950e8748fe5f120899693e2ee12f7168",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 9143,
      "upload_time": "2022-11-05T20:15:18",
      "upload_time_iso_8601": "2022-11-05T20:15:18.166441Z",
      "url": "https://files.pythonhosted.org/packages/41/5a/bc5bf5d81ad536d137eb1658bed103a84e4498c8551dfad28fedaf87ad4b/ciris-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28972c68db0b8299d2961431245bb6db53ac048a0832fc3cba3446df0ee9276e",
        "md5": "6fffbe39417f66de8da81c2f2a9e9dc4",
        "sha256": "5e93732d140051b3be25212fca8092eac881c3b317b88fa15b5e4f13dfd3a454"
      },
      "downloads": -1,
      "filename": "ciris-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6fffbe39417f66de8da81c2f2a9e9dc4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 11947,
      "upload_time": "2022-11-05T20:15:20",
      "upload_time_iso_8601": "2022-11-05T20:15:20.696362Z",
      "url": "https://files.pythonhosted.org/packages/28/97/2c68db0b8299d2961431245bb6db53ac048a0832fc3cba3446df0ee9276e/ciris-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}