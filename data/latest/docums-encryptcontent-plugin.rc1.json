{
  "info": {
    "author": "NKDuy",
    "author_email": "kn145660@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# docums-encryptcontent-plugin\n\nThis plugin allows you to have password protected articles and pages in Docums.\n\nThe content is encrypted with AES-256 in Python using PyCryptodome, and decrypted in the browser with Crypto-JS.\n\n*It has been tested in Python Python 3.5+*\n\n**Usecase**\n\n> I want to be able to protect the content of the page with a password.\n>\n> Define a password to protect each page independently or a global password to protect them all.\n>\n> If a global password exists, all articles and pages are protected with this password.\n>\n> If a password is defined in an article or a page, it is always used even if there is a global password.\n>\n> If a password is defined as an empty character string, the content is not protected.\n\n\n# Table of Contents\n\n  * [Installation](#installation)\n  * [Usage](#usage)\n    * [Global password protection](#global-password-protection)\n    * [Customization](#extra-vars-customization)\n  * [Features](#features)\n    * [HighlightJS support](#highlightjs-support) *(default)*\n    * [Arithmatex support](#arithmatex-support) *(default)*\n    * [Tag encrypted page](#tag-encrypted-page) *(default)*\n    * [Rebember password](#rebember-password)\n    * [Encrypt something](#encrypt-something)\n    * [Search index encryption](#search-index-encryption)\n    * [Add button](#add-button)\n    * [Reload scripts](#reload-scripts)\n  * [Contributing](#contributing)\n\n\n# Installation\n\nInstall the package with pip:\n\n```bash\npip install docums-encryptcontent-plugin\n```\n\nInstall the package from source with pip:\n\n```bash\ncd docums-encryptcontent-plugin/\npython3 setup.py sdist bdist_wheel\npip3 install dist/docums_encryptcontent_plugin-2.0.1-py3-none-any.whl\n```\n\nEnable the plugin in your `docums.yml`:\n\n```yaml\nplugins:\n    - search: {}\n    - encryptcontent: {}\n```\n> **NOTE:** If you have no `plugins` entry in your configuration file yet, you'll likely also want to add the `search` plugin. Docums enables it by default if there is no `plugins` entry set, but now you have to enable it explicitly.\n\n# Usage\n\nAdd an meta tag `password: secret_password` in your markdown files to protect them.\n\n### Global password protection\n\nAdd `global_password: your_password` in plugin configuration variable, to protect by default your articles with this password\n\n```yaml\nplugins:\n    - encryptcontent:\n        global_password: 'your_password'\n```\n\nIf a password is defined in an article, it will **ALWAYS** overwrite the global password. \n\n> **NOTE** Keep in mind that if the `password:` tag exists without value in an article, it will **not be protected** !\n\n### Extra vars customization\n\nOptionally you can use some extra variables in plugin configuration to customize default messages.\n\n```yaml\nplugins:\n    - encryptcontent:\n        title_prefix: '[LOCK]'\n        summary: 'another informational message to encrypted content'\n        placeholder: 'another password placeholder'\n        decryption_failure_message: 'another informational message when decryption fail'\n        encryption_info_message: 'another information message when you dont have acess !'\n```\n\nDefault prefix title is `[Protected]`.\n\nDefault summary message is `This content is protected with AES encryption.`.\n\nDefault password palceholder is `Provide password and press ENTER`.\n\nDefault decryption failure message is `Invalid password.`.\n\nDefaut encryption information message is `Contact your administrator for access to this page.`.\n\n> **NOTE** Adding a prefix to the title does not change the default navigation path !\n\n\n# Features\n\n### HighlightJS support\n\n> **Enable by default**\n\nIf HighlightJS module is detected in your theme to improve code color rendering, reload renderer after decryption process. If HighlightJS module is not correctly detected, you can force the detection by adding `hljs: True` on the plugin configuration or set `hljs: False` to disable this feature.\n\nWhen enable the following part of the template is add to force reloading decrypted content.\n\n```jinja\n{% if hljs %}\ndocument.getElementById(\"docums-decrypted-content\").querySelectorAll('pre code').forEach((block) => {\n    hljs.highlightBlock(block);\n});\n{% endif %}\n```\n\n### Arithmatex support\n\n> **Enable by default**\n\nIf Arithmatex markdown extension is detected in your markdown extensions to improve math equations rendering, reload renderer after decryption process. If the Arithmatex markdown extension is not correctly detected, you can force the detection by adding `arithmatex: True` on the plugin configuration or set `arithmatex: False` to disable this feature.\n \nWhen enable, the following part of the template is add to force math equations rendering on decrypted content.\n\n```jinja\n{% if arithmatex %}\nMathJax.typesetPromise()\n{% endif %}\n```\n\n> **NOTE** It has been tested in Arithmatex `generic` mode only. \n\n### Tag encrypted page\n\n> **Enable by default**\n\nThis feature add an additional attribute `encrypted` with value `True` to the docums type `docums.nav.page` object.\n\nYou can add `tag_encrypted_page: False` in plugin configuration, to disable tagging of encrypted pages. **BUT** This feature is neccessary for others feature working correctly. If you disable this feature, do no use [Encrypt Somethings](https://github.com/khanhduy1407/docums-encryptcontent-plugin#encrypt-something), \n\nWhen enable, it becomes possible to use `encrypted` attribute in the jinja template of your theme, as a condition to perform custom modification.\n\n```jinja\n{%- for nav_item in nav %}\n    {% if nav_item.encrypted %}\n        <!-- Do something --> \n    {% endif %}\n{%- endfor %}\n```\n\nFor example, in your theme template, you can use conditional check to add custom class :\n\n```jinja\n<a {% if nav_item.encrypted %}class=\"docums-encrypted-class\"{% endif %}href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a>\n```\n\n### Add button\n\nAdd `password_button: True` in plugin config variable, to add button to the right of the password field decrypt the content.\n\nOptionnally, you can add `password_button_text: 'custome_text_button'` to customize the button text.\n \n```yaml\nplugins:\n    - encryptcontent:\n        password_button: True\n        password_button_text: 'custome_text_button'\n```\n\n### Rebember password\n\n> :warning: **This feature is not really secure !** Password are store in clear text inside local storage.\n>\n> Instead of using this feature, I recommend to use a password manager with its web plugins.\n> For example **KeepassXC** allows you, with a simple keyboard shortcut, to detect the password field `docums-content-password` and to fill it automatically in a much more secure way.\n\nIf you do not have password manager, you can set `remember_password: True` in your `docums.yml` to enable password remember feature.\n\nWhen enabled, each time you fill password form and press `Enter` a key on local storage is create with your password\nas value. When you reload the page, if you already have an 'encryptcontent' key in the local storage of your browser,\nthe page will be automatically decrypted using the value previously created.\n\nBy default, the key is created with a name relative to the page on which it was generated.\nThis 'relative' key will always be used as first attempt to decrypt the current page when loading.\n\nIf your password is a [global password](#global-password-protection), you can fill in the form field  `docums-content-password`, then use the keyboard shortcut `CTRL + ENTER` instead of the classic `ENTER`. \nThe key that will be created with a generic name to making it accessible, by default, on all the pages of your site.\n\nThe form of decryption remains visible as long as the content has not been successfully decrypted, which allows in case of error to retry. \nAll keys created with this feature on localstorage have an default expire time daly set to 24 hours, just cause ...\n\nHowever *(optionally)*, its possible to change the default expire time by setting options `default_expire_dalay: <number>` in your `docums.yml`. Your configuration should look like this when you enabled this feature :\n```yaml\nplugins:\n    - encryptcontent:\n        remember_password: True\n        default_expire_dalay: 24   # <-- Default expire delay in hours (optional)\n```\n\n> **NOTE** The expired elements of the localStorage are only deleted by the execution of the decrypt-content.js scripts and therefore by the navigation on the site. Secret items can therefore remain visible in local storage after their expiration dates. \n\n### Encrypt something\n\nThe [tag encrypted page feature](https://github.com/khanhduy1407/docums-encryptcontent-plugin#tag-encrypted-page) **MUST** be enabled (it's default) for this feature to work properly.\n\nAdd `encrypted_something: {}` in the plugin configuration variable, to encrypt something else.\n\nThe syntax of this new variable **MUST** follow the yaml format of a dictionary. \nChild elements of `encrypted_something` are build with a key `<unique name>` in string format and a list as value. \nThe list have to be contructed with the name of an HTML element `<html tag>` as first item and `id` or `class` as the second item.\n\n```yaml\nplugins:\n    - encryptcontent:\n        encrypted_something:\n            <uniq name>: [<html tag>, <'class' or 'id'>]\n```\n\nThe `<unique name>` key identifies the name of a specific element of the page that will be searched by beautifulSoup.\nThe first value of the `<html tag>` list identifies the type of HTML tag in which the name is present.\nThe second value of the list, as string `'id'` or `'class'`, specifies the type of the attribute which contains the unique name in the html tag.\n\nPrefer to use an `'id'`, however depending on the template of your theme, it is not always possible to use the id.\nSo we can use the class attribute to define your unique name inside html tag. \nBeautifulSoup will encrypt all HTML elements discovered with the class.\n\nWhen the feature is enabled, you can use any methods *(password, button, remember)* to decrypt every elements encrypted on the page.\n\nBy default **every child items** are encrypted and the encrypted elements have `style=display:none` to hide their content.\n\n#### How to use it :exploding_head: ?! Examples\n\nUse the `page.encrypted` conditions to add attributes of type id or class in the HTML templates of your theme. \nEach attribute is identified with a unique name and is contained in an html element. \nThen add these elements in the format of a yaml dictionary under the variable `encrypted_something`.\n\n1. For example, encrypt ToC in a theme where ToC is under 'div' element like this :\n\n```jinja\n<div class=\"..\" {% if page.encrypted %}id=\"docums-encrypted-toc\"{% endif %}>\n    <ul class=\"..\">\n        <li class=\"..\"><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n         <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n    </ul>\n</div>\n```\n\nSet your configuration like this : \n\n```yaml\nplugins:\n    - encryptcontent:\n        encrypted_something:\n            docums-encrypted-toc: [div, id]\n```\n\n2. Other example, with multiples target. In you Material Theme, you want to encrypt ToC content and Footer.\n\nMateriel generate 2 `<nav>` structure with the same template `toc.html`, so you need to use a `class` instead of an id for this part.\nThe footer part, is generated by the `footer.html` template in a classic div so an `id` is sufficient\n\nAfter modification, your template looks like this :\n```jinja (toc.html)\n<nav class=\"md-nav md-nav--secondary {% if page.encrypted %}docums-encrypted-toc{% endif %}\" aria-label=\"{{ lang.t('toc.title') }}\">\n    <label class=\"md-nav__title\" for=\"__toc\"> ... </label>\n    <ul class=\"md-nav__list\" data-md-scrollfix> ... </ul>\n</nav>\n```\n```jinja (footer.html)\n<footer class=\"md-footer\">\n    <div class=\"md-footer-nav\" {% if page.encrypted %}id=\"docums-encrypted-footer\"{% endif %}> ... </div>\n    <div class=\"md-footer-meta md-typeset\" {% if page.encrypted %}id=\"docums-encrypted-footer-meta\"{% endif %}>\n</footer>\n```\n\nYour configuration like this :\n```yaml\nplugins:\n    - encryptcontent:\n        encrypted_something:\n            docums-encrypted-toc: [nav, class]\n            docums-encrypted-footer: [div, id]\n            docums-encrypted-footer-meta: [div, id]\n```\n\n### Search index encryption\n\n> **Default value is \"encrypted\"**\n\n> :warning: **The configuration mode \"clear\" of this functionality can cause DATA LEAK**\n>\n> The unencrypted content of each page is accessible through the search index.\n> Not encrypting the search index means completely removing the protection provided by this plugin.\n> You have been warned \n\nThis feature allows you to control the behavior of the encryption plugin with the search index. \nThree configuration modes are possible:\n\n * **clear** : Search index is not encrypted. Search is possible even on protected pages.\n * **dynamically** : Search index is encrypted on build. Search is possible once the pages have been decrypted ones.\n * **encrypted** : Search index is encrypted on build. Search is not possible on all encrypted pages.\n\nYou can set `search_index: '<mode_name>'` in your `docums.yml` to change the search index encryption mode. Possible values are `clear`, `dynamically`, `encrypted`. The default mode is \"**encrypted**\".\n\n```yaml\nplugins:\n    - encryptcontent:\n        search_index: 'dynamically'\n```\n\nThis functionality overwrite the index creation function of the “search” plug-in provided by docums. The modifications carried out make it possible to encrypt the content of the search index *after* the default plugin has carried out these treatments *(search configuration)*. It is therefore dependent on the default search plugin. \n\nWhen the configuration mode is set to \"**dynamically**\", the [javascripts contribution files](https://github.com/khanhduy1407/docums-encryptcontent-plugin/tree/experimental/encryptcontent/contrib/templates/search) are used to override the default search plugin files provided by Docums. They include a process of decrypting and keeping the search index in a SessionStorage.\n\n> **NOTE** The mode 'dynamically' is currently **not compatible with Material Theme** !\n\n### Add button\n\nAdd `password_button: True` in plugin configuration variable, to add button to the right of the password field.\n\nWhen enable, it allows to decrypt the content just like the classic keypress ENTER. If remember password feature is activated, use button to decrypt generate a 'relative' key on your local storage. You cannot use password button to create global password value.\n\nOptionnally, you can add `password_button_text: 'custom_text_button'` to customize the button text.\n \n```yaml\nplugins:\n    - encryptcontent:\n        password_button: True\n        password_button_text: 'custom_text_button'\n```\n\n### Reload scripts\n\nYou can set `reload_scripts:` in your `docums.yml` with list of script source, to reload and execute some js lib after decryption process.\n\n```yaml\nplugins:\n    reload_scripts:\n        - \"./js/example.js\"\n```\n\nThis feature use the following JQuery function to remove, add and reload javascripts. \n\n```javascript\nvar reload_js = function(src) {\n    $('script[src=\"' + src + '\"]').remove();\n    $('<script>').attr('src', src).appendTo('head');\n};\n```\n\n[docums-plugins]: https://khanhduy1407.github.io/docums/dev-guide/plugins/",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/khanhduy1407/docums-encryptcontent-plugin/",
    "keywords": "docums python markdown encrypt decrypt content",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docums-encryptcontent-plugin",
    "package_url": "https://pypi.org/project/docums-encryptcontent-plugin/",
    "platform": "",
    "project_url": "https://pypi.org/project/docums-encryptcontent-plugin/",
    "project_urls": {
      "Homepage": "https://github.com/khanhduy1407/docums-encryptcontent-plugin/"
    },
    "release_url": "https://pypi.org/project/docums-encryptcontent-plugin/2.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A Docums plugin that encrypt/decrypt markdown content with AES",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12810728,
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0136fadd5a610faf0af6e617116d6169e79a0df74b1adec86c9b2a2bcbf1fcc",
          "md5": "7c4b33c7ba878181bb4a2ddccd28c10d",
          "sha256": "a686bdd3fc46e8b9a8f2e12256cc723ba1ed07e19741b575e5900f424462dd7b"
        },
        "downloads": -1,
        "filename": "docums-encryptcontent-plugin-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7c4b33c7ba878181bb4a2ddccd28c10d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14034,
        "upload_time": "2022-02-07T09:43:04",
        "upload_time_iso_8601": "2022-02-07T09:43:04.854706Z",
        "url": "https://files.pythonhosted.org/packages/d0/13/6fadd5a610faf0af6e617116d6169e79a0df74b1adec86c9b2a2bcbf1fcc/docums-encryptcontent-plugin-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0136fadd5a610faf0af6e617116d6169e79a0df74b1adec86c9b2a2bcbf1fcc",
        "md5": "7c4b33c7ba878181bb4a2ddccd28c10d",
        "sha256": "a686bdd3fc46e8b9a8f2e12256cc723ba1ed07e19741b575e5900f424462dd7b"
      },
      "downloads": -1,
      "filename": "docums-encryptcontent-plugin-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7c4b33c7ba878181bb4a2ddccd28c10d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 14034,
      "upload_time": "2022-02-07T09:43:04",
      "upload_time_iso_8601": "2022-02-07T09:43:04.854706Z",
      "url": "https://files.pythonhosted.org/packages/d0/13/6fadd5a610faf0af6e617116d6169e79a0df74b1adec86c9b2a2bcbf1fcc/docums-encryptcontent-plugin-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}