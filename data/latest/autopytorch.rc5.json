{
  "info": {
    "author": "AutoML Freiburg",
    "author_email": "eddiebergmanhs@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Utilities"
    ],
    "description": "# Auto-PyTorch\n\nCopyright (C) 2021  [AutoML Groups Freiburg and Hannover](http://www.automl.org/)\n\nWhile early AutoML frameworks focused on optimizing traditional ML pipelines and their hyperparameters, another trend in AutoML is to focus on neural architecture search. To bring the best of these two worlds together, we developed **Auto-PyTorch**, which jointly and robustly optimizes the network architecture and the training hyperparameters to enable fully automated deep learning (AutoDL).\n\nAuto-PyTorch is mainly developed to support tabular data (classification, regression) and time series data (forecasting).\nThe newest features in Auto-PyTorch for tabular data are described in the paper [\"Auto-PyTorch Tabular: Multi-Fidelity MetaLearning for Efficient and Robust AutoDL\"](https://arxiv.org/abs/2006.13799) (see below for bibtex ref).\nDetails about Auto-PyTorch for multi-horizontal time series forecasting tasks can be found in the paper [\"Efficient Automated Deep Learning for Time Series Forecasting\"](https://arxiv.org/abs/2205.05511) (also see below for bibtex ref).\n\nAlso, find the documentation [here](https://automl.github.io/Auto-PyTorch/master).\n\n\n***From v0.1.0, AutoPyTorch has been updated to further improve usability, robustness and efficiency by using SMAC as the underlying optimization package as well as changing the code structure. Therefore, moving from v0.0.2 to v0.1.0 will break compatibility. \nIn case you would like to use the old API, you can find it at [`master_old`](https://github.com/automl/Auto-PyTorch/tree/master-old).***\n\n## Workflow\n\nThe rough description of the workflow of Auto-Pytorch is drawn in the following figure.\n\n![AutoPyTorch Workflow](https://raw.githubusercontent.com/automl/Auto-PyTorch/master/figs/apt_workflow.png)\n\nIn the figure, **Data** is provided by user and\n**Portfolio** is a set of configurations of neural networks that work well on diverse datasets.\nThe current version only supports the *greedy portfolio* as described in the paper *Auto-PyTorch Tabular: Multi-Fidelity MetaLearning for Efficient and Robust AutoDL*\nThis portfolio is used to warm-start the optimization of SMAC.\nIn other words, we evaluate the portfolio on a provided data as initial configurations.\nThen API starts the following procedures:\n1. **Validate input data**: Process each data type, e.g. encoding categorical data, so that Auto-Pytorch can handled.\n2. **Create dataset**: Create a dataset that can be handled in this API with a choice of cross validation or holdout splits.\n3. **Evaluate baselines** \n   * ***Tabular dataset*** *1: Train each algorithm in the predefined pool with a fixed hyperparameter configuration and dummy model from `sklearn.dummy` that represents the worst possible performance.\n   * ***Time Series Forecasting dataset*** : Train a dummy predictor that repeats the last observed value in each series\n4. **Search by [SMAC](https://github.com/automl/SMAC3)**:\\\n    a. Determine budget and cut-off rules by [Hyperband](https://jmlr.org/papers/volume18/16-558/16-558.pdf)\\\n    b. Sample a pipeline hyperparameter configuration *2 by SMAC\\\n    c. Update the observations by obtained results\\\n    d. Repeat a. -- c. until the budget runs out\n5. Build the best ensemble for the provided dataset from the observations and [model selection of the ensemble](https://www.cs.cornell.edu/~caruana/ctp/ct.papers/caruana.icml04.icdm06long.pdf).\n\n*1: Baselines are a predefined pool of machine learning algorithms, e.g. LightGBM and support vector machine, to solve either regression or classification task on the provided dataset\n\n*2: A pipeline hyperparameter configuration specifies the choice of components, e.g. target algorithm, the shape of neural networks, in each step and \n(which specifies the choice of components in each step and their corresponding hyperparameters.\n\n## Installation\n\n### PyPI Installation\n\n```sh\n\npip install autoPyTorch\n\n```\n\nAuto-PyTorch for Time Series Forecasting requires additional dependencies \n\n```sh\n\npip install autoPyTorch[forecasting]\n\n```\n\n### Manual Installation\n\nWe recommend using Anaconda for developing as follows:\n\n```sh\n# Following commands assume the user is in a cloned directory of Auto-Pytorch\n\n# We also need to initialize the automl_common repository as follows\n# You can find more information about this here:\n# https://github.com/automl/automl_common/\ngit submodule update --init --recursive\n\n# Create the environment\nconda create -n auto-pytorch python=3.8\nconda activate auto-pytorch\nconda install swig\npython setup.py install\n\n```\n\nSimilarly, to install all the dependencies for Auto-PyTorch-TimeSeriesForecasting:\n\n\n```sh\n\ngit submodule update --init --recursive\n\nconda create -n auto-pytorch python=3.8\nconda activate auto-pytorch\nconda install swig\npip install -e[forecasting]\n\n```\n\n## Examples\n\nIn a nutshell:\n\n```py\nfrom autoPyTorch.api.tabular_classification import TabularClassificationTask\n\n# data and metric imports\nimport sklearn.model_selection\nimport sklearn.datasets\nimport sklearn.metrics\nX, y = sklearn.datasets.load_digits(return_X_y=True)\nX_train, X_test, y_train, y_test = \\\n        sklearn.model_selection.train_test_split(X, y, random_state=1)\n\n# initialise Auto-PyTorch api\napi = TabularClassificationTask()\n\n# Search for an ensemble of machine learning algorithms\napi.search(\n    X_train=X_train,\n    y_train=y_train,\n    X_test=X_test,\n    y_test=y_test,\n    optimize_metric='accuracy',\n    total_walltime_limit=300,\n    func_eval_time_limit_secs=50\n)\n\n# Calculate test accuracy\ny_pred = api.predict(X_test)\nscore = api.score(y_pred, y_test)\nprint(\"Accuracy score\", score)\n```\n\nFor Time Series Forecasting Tasks\n```py\n\nfrom autoPyTorch.api.time_series_forecasting import TimeSeriesForecastingTask\n\n# data and metric imports\nfrom sktime.datasets import load_longley\ntargets, features = load_longley()\n\n# define the forecasting horizon\nforecasting_horizon = 3\n\n# Dataset optimized by APT-TS can be a list of np.ndarray/ pd.DataFrame where each series represents an element in the \n# list, or a single pd.DataFrame that records the series\n# index information: to which series the timestep belongs? This id can be stored as the DataFrame's index or a separate\n# column\n# Within each series, we take the last forecasting_horizon as test targets. The items before that as training targets\n# Normally the value to be forecasted should follow the training sets\ny_train = [targets[: -forecasting_horizon]]\ny_test = [targets[-forecasting_horizon:]]\n\n# same for features. For uni-variant models, X_train, X_test can be omitted and set as None\nX_train = [features[: -forecasting_horizon]]\n# Here x_test indicates the 'known future features': they are the features known previously, features that are unknown\n# could be replaced with NAN or zeros (which will not be used by our networks). If no feature is known beforehand,\n# we could also omit X_test\nknown_future_features = list(features.columns)\nX_test = [features[-forecasting_horizon:]]\n\nstart_times = [targets.index.to_timestamp()[0]]\nfreq = '1Y'\n\n# initialise Auto-PyTorch api\napi = TimeSeriesForecastingTask()\n\n# Search for an ensemble of machine learning algorithms\napi.search(\n    X_train=X_train,\n    y_train=y_train,\n    X_test=X_test, \n    optimize_metric='mean_MAPE_forecasting',\n    n_prediction_steps=forecasting_horizon,\n    memory_limit=16 * 1024,  # Currently, forecasting models use much more memories\n    freq=freq,\n    start_times=start_times,\n    func_eval_time_limit_secs=50,\n    total_walltime_limit=60,\n    min_num_test_instances=1000,  # proxy validation sets. This only works for the tasks with more than 1000 series\n    known_future_features=known_future_features,\n)\n\n# our dataset could directly generate sequences for new datasets\ntest_sets = api.dataset.generate_test_seqs()\n\n# Calculate test accuracy\ny_pred = api.predict(test_sets)\nscore = api.score(y_pred, y_test)\nprint(\"Forecasting score\", score)\n```\n\nFor more examples including customising the search space, parellising the code, etc, checkout the `examples` folder\n\n```sh\n$ cd examples/\n```\n\n\nCode for the [paper](https://arxiv.org/abs/2006.13799) is available under `examples/ensemble` in the [TPAMI.2021.3067763](https://github.com/automl/Auto-PyTorch/tree/TPAMI.2021.3067763`) branch.\n\n## Contributing\n\nIf you want to contribute to Auto-PyTorch, clone the repository and checkout our current development branch\n\n```sh\n$ git checkout development\n```\n\n## License\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the Apache license 2.0 (please see the LICENSE file).\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nYou should have received a copy of the Apache license 2.0\nalong with this program (see LICENSE file).\n\n## Reference\n\nPlease refer to the branch `TPAMI.2021.3067763` to reproduce the paper *Auto-PyTorch Tabular: Multi-Fidelity MetaLearning for Efficient and Robust AutoDL*.\n\n```bibtex\n  @article{zimmer-tpami21a,\n  author = {Lucas Zimmer and Marius Lindauer and Frank Hutter},\n  title = {Auto-PyTorch Tabular: Multi-Fidelity MetaLearning for Efficient and Robust AutoDL},\n  journal = {IEEE Transactions on Pattern Analysis and Machine Intelligence},\n  year = {2021},\n  note = {also available under https://arxiv.org/abs/2006.13799},\n  pages = {3079 - 3090}\n}\n```\n\n```bibtex\n@incollection{mendoza-automlbook18a,\n  author    = {Hector Mendoza and Aaron Klein and Matthias Feurer and Jost Tobias Springenberg and Matthias Urban and Michael Burkart and Max Dippel and Marius Lindauer and Frank Hutter},\n  title     = {Towards Automatically-Tuned Deep Neural Networks},\n  year      = {2018},\n  month     = dec,\n  editor    = {Hutter, Frank and Kotthoff, Lars and Vanschoren, Joaquin},\n  booktitle = {AutoML: Methods, Sytems, Challenges},\n  publisher = {Springer},\n  chapter   = {7},\n  pages     = {141--156}\n}\n```\n\n```bibtex\n@article{deng-ecml22,\n  author    = {Difan Deng and Florian Karl and Frank Hutter and Bernd Bischl and Marius Lindauer},\n  title     = {Efficient Automated Deep Learning for Time Series Forecasting},\n  year      = {2022},\n  booktitle = {Machine Learning and Knowledge Discovery in Databases. Research Track\n               - European Conference, {ECML} {PKDD} 2022},\n  url       = {https://doi.org/10.48550/arXiv.2205.05511},\n}\n```\n\n## Contact\n\nAuto-PyTorch is developed by the [AutoML Groups of the University of Freiburg and Hannover](http://www.automl.org/).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/automl/Auto-PyTorch",
    "keywords": "machine learning algorithm configuration hyperparameteroptimization tuning neural architecture deep learning",
    "license": "3-clause BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "autoPyTorch",
    "package_url": "https://pypi.org/project/autoPyTorch/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/autoPyTorch/",
    "project_urls": {
      "Homepage": "https://github.com/automl/Auto-PyTorch"
    },
    "release_url": "https://pypi.org/project/autoPyTorch/0.2.1/",
    "requires_dist": [
      "pandas",
      "torch (>=1.10.1)",
      "torchvision",
      "tensorboard",
      "scikit-learn (<0.25.0,>=0.24.0)",
      "numpy",
      "scipy (>=1.7)",
      "lockfile",
      "imgaug (>=0.4.0)",
      "ConfigSpace (>=0.5.0)",
      "pynisher (>=0.6.3)",
      "pyrfr (<0.9,>=0.7)",
      "smac (>=1.2)",
      "dask",
      "distributed (>=2.2.0)",
      "catboost",
      "lightgbm",
      "flaky",
      "tabulate",
      "sphinx ; extra == 'docs'",
      "sphinx-gallery ; extra == 'docs'",
      "sphinx-bootstrap-theme ; extra == 'docs'",
      "numpydoc ; extra == 'docs'",
      "matplotlib ; extra == 'examples'",
      "jupyter ; extra == 'examples'",
      "notebook ; extra == 'examples'",
      "seaborn ; extra == 'examples'",
      "openml ; extra == 'examples'",
      "gluonts (>=0.10.0) ; extra == 'forecasting'",
      "sktime ; extra == 'forecasting'",
      "pytorch-forecasting ; extra == 'forecasting'",
      "matplotlib ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-xdist ; extra == 'test'",
      "pytest-timeout ; extra == 'test'",
      "flaky ; extra == 'test'",
      "pyarrow ; extra == 'test'",
      "pre-commit ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "pytest-forked ; extra == 'test'",
      "pytest-subtests ; extra == 'test'",
      "codecov ; extra == 'test'",
      "pep8 ; extra == 'test'",
      "mypy ; extra == 'test'",
      "openml ; extra == 'test'",
      "emcee ; extra == 'test'",
      "scikit-optimize ; extra == 'test'",
      "pyDOE ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Auto-PyTorch searches neural architectures using smac",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14852074,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "511fb883a924de574ab2478ceb72232a22bc2502f3a472ac1cec62df49ad8e32",
          "md5": "b7659a9480c3d20f16bab869b98b1d31",
          "sha256": "7a4176ef4678391f17255470d52205570905c70a6a1c8673d7ff38e9d7ff4a05"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7659a9480c3d20f16bab869b98b1d31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 312235,
        "upload_time": "2019-10-15T11:49:38",
        "upload_time_iso_8601": "2019-10-15T11:49:38.869893Z",
        "url": "https://files.pythonhosted.org/packages/51/1f/b883a924de574ab2478ceb72232a22bc2502f3a472ac1cec62df49ad8e32/autoPyTorch-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a48ff1b8c1cb2ff3f23569aa957278ae28a6f4215b5e4f993d845ec97038f2f6",
          "md5": "f16785c9f8312c246cc4955c331f4db3",
          "sha256": "ed185e341888324fcf95964ba26af5ba531f4355c1f3b042ca0d2cacbbdb2e33"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f16785c9f8312c246cc4955c331f4db3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 208440,
        "upload_time": "2019-10-15T11:49:42",
        "upload_time_iso_8601": "2019-10-15T11:49:42.180205Z",
        "url": "https://files.pythonhosted.org/packages/a4/8f/f1b8c1cb2ff3f23569aa957278ae28a6f4215b5e4f993d845ec97038f2f6/autoPyTorch-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bca463be143cc5a6a7be00f948051525716695c9ea2f8bdf0ba4b34fb3191a16",
          "md5": "c9c46a4e86353c2ddece2fcddca4519e",
          "sha256": "8912f249d843a1ed2bd29cca1ea8be441082a67c27bcbfb49e94967312cdf3aa"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9c46a4e86353c2ddece2fcddca4519e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 398883,
        "upload_time": "2021-11-23T14:18:51",
        "upload_time_iso_8601": "2021-11-23T14:18:51.633442Z",
        "url": "https://files.pythonhosted.org/packages/bc/a4/63be143cc5a6a7be00f948051525716695c9ea2f8bdf0ba4b34fb3191a16/autoPyTorch-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a176cb055aceb25c1aa50c0adf89d200eac798d44c56e39b5bd3551be6db9675",
          "md5": "bd75aac370e28a0cb800a92515a627d6",
          "sha256": "d6e05f0579f9df6fa8482104baeafce2f69bbde66ad77f9d3f455b90722a9cdd"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bd75aac370e28a0cb800a92515a627d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 252207,
        "upload_time": "2021-11-23T14:18:53",
        "upload_time_iso_8601": "2021-11-23T14:18:53.525232Z",
        "url": "https://files.pythonhosted.org/packages/a1/76/cb055aceb25c1aa50c0adf89d200eac798d44c56e39b5bd3551be6db9675/autoPyTorch-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb581e819f9e44ccd311a9626578f7dd7465e3a41fb9edabaeec946210a7dd2d",
          "md5": "8b3a3533d533c6ff48d81d59cae293d1",
          "sha256": "8bbecdb47d650f1ba243923284738775be0d65c7a3dc8c8e8e1bc476904cf808"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b3a3533d533c6ff48d81d59cae293d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 409578,
        "upload_time": "2021-11-23T15:22:22",
        "upload_time_iso_8601": "2021-11-23T15:22:22.298183Z",
        "url": "https://files.pythonhosted.org/packages/fb/58/1e819f9e44ccd311a9626578f7dd7465e3a41fb9edabaeec946210a7dd2d/autoPyTorch-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab528135594166bfb5289a0e34320c822d20d05a8c65d4f5987efa470b8cd2cc",
          "md5": "77217ab0a72f0073ea93477e75764dd9",
          "sha256": "1369f56dedb57a1bb806e6befa252a31914689dbb993dffbe5b52f8ebb4e2e8f"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "77217ab0a72f0073ea93477e75764dd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 260754,
        "upload_time": "2021-11-23T15:22:24",
        "upload_time_iso_8601": "2021-11-23T15:22:24.109239Z",
        "url": "https://files.pythonhosted.org/packages/ab/52/8135594166bfb5289a0e34320c822d20d05a8c65d4f5987efa470b8cd2cc/autoPyTorch-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2153bf2ead003d6e587edf5c5ee8786dfb21698a4f9196a33819aa91231dc23",
          "md5": "4ea140e51d12ae3aa4dd4eee54c44e9c",
          "sha256": "11bed9fc6a0d81ad987bad7d1a338ba36badee2af38d12e8d8dff0ee9c802af0"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ea140e51d12ae3aa4dd4eee54c44e9c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 701114,
        "upload_time": "2022-07-18T10:44:56",
        "upload_time_iso_8601": "2022-07-18T10:44:56.155250Z",
        "url": "https://files.pythonhosted.org/packages/f2/15/3bf2ead003d6e587edf5c5ee8786dfb21698a4f9196a33819aa91231dc23/autoPyTorch-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c2c2ee3dde9e919a535caed7ac5277632a8073a16b5f20a2fabf922ed255e46",
          "md5": "d4a13b67f2bbf6a0eb4b0ebab436f6ab",
          "sha256": "dcde7f818b8d901bf673e08298b6ce6b48d8e281e992bf98e6bd7c59a2a02a1a"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d4a13b67f2bbf6a0eb4b0ebab436f6ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 458262,
        "upload_time": "2022-07-18T10:44:57",
        "upload_time_iso_8601": "2022-07-18T10:44:57.941319Z",
        "url": "https://files.pythonhosted.org/packages/7c/2c/2ee3dde9e919a535caed7ac5277632a8073a16b5f20a2fabf922ed255e46/autoPyTorch-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c1a8d64efb18242d043350dfb73901d98fdf86b3750c032613b63a78fb3bef1",
          "md5": "361878a8fe89f7cb93499d4ae139202a",
          "sha256": "8747e799c044b74a54d30b06f0a1d90eb2fcb40876a3c000c17820b75edef9a2"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "361878a8fe89f7cb93499d4ae139202a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 711917,
        "upload_time": "2022-08-23T16:45:47",
        "upload_time_iso_8601": "2022-08-23T16:45:47.088023Z",
        "url": "https://files.pythonhosted.org/packages/8c/1a/8d64efb18242d043350dfb73901d98fdf86b3750c032613b63a78fb3bef1/autoPyTorch-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "299515c04117236fde853f351b82f29ba8513aa3e514b1b8750a113ead1ac5aa",
          "md5": "3fec28ecf2e5e78b2a5c95f222855f12",
          "sha256": "24d29511825ccca15ff41bcfd5fc0a62fe59d6f613adcd97ec510389e5dd23e5"
        },
        "downloads": -1,
        "filename": "autoPyTorch-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3fec28ecf2e5e78b2a5c95f222855f12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 465020,
        "upload_time": "2022-08-23T16:45:49",
        "upload_time_iso_8601": "2022-08-23T16:45:49.458949Z",
        "url": "https://files.pythonhosted.org/packages/29/95/15c04117236fde853f351b82f29ba8513aa3e514b1b8750a113ead1ac5aa/autoPyTorch-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c1a8d64efb18242d043350dfb73901d98fdf86b3750c032613b63a78fb3bef1",
        "md5": "361878a8fe89f7cb93499d4ae139202a",
        "sha256": "8747e799c044b74a54d30b06f0a1d90eb2fcb40876a3c000c17820b75edef9a2"
      },
      "downloads": -1,
      "filename": "autoPyTorch-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "361878a8fe89f7cb93499d4ae139202a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 711917,
      "upload_time": "2022-08-23T16:45:47",
      "upload_time_iso_8601": "2022-08-23T16:45:47.088023Z",
      "url": "https://files.pythonhosted.org/packages/8c/1a/8d64efb18242d043350dfb73901d98fdf86b3750c032613b63a78fb3bef1/autoPyTorch-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "299515c04117236fde853f351b82f29ba8513aa3e514b1b8750a113ead1ac5aa",
        "md5": "3fec28ecf2e5e78b2a5c95f222855f12",
        "sha256": "24d29511825ccca15ff41bcfd5fc0a62fe59d6f613adcd97ec510389e5dd23e5"
      },
      "downloads": -1,
      "filename": "autoPyTorch-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3fec28ecf2e5e78b2a5c95f222855f12",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 465020,
      "upload_time": "2022-08-23T16:45:49",
      "upload_time_iso_8601": "2022-08-23T16:45:49.458949Z",
      "url": "https://files.pythonhosted.org/packages/29/95/15c04117236fde853f351b82f29ba8513aa3e514b1b8750a113ead1ac5aa/autoPyTorch-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}