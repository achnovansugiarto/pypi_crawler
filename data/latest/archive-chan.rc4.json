{
  "info": {
    "author": "Antonizoon Overtwater <antonizoon@bibanon.org>, Daniel Oaks <daniel@danieloaks.net>",
    "author_email": "antonizoon@bibanon.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "archive-chan\n=============\n\n``archive-chan`` archives threads from 4chan and other imageboards,\nincluding images and/or thumbnails, thread HTML, JSON if available,\nand produces a list of referenced external links.\n\nTo archive a thread and host it using a simple webserver:\n\n::\n\n  pip3 install -U archive-chan\n  npm i -g http-server\n  archive-chan https://boards.4channel.org/vg/thread/338253176 --runonce\n  cd archive/4chan\n  http-server -p 1234 -c-1\n\nThen open `http://localhost:1234/vg/thread/338253176\n<http://localhost:1234/vg/thread/338253176>`_ in your browser. All\nthumbnail images, javascript, CSS, etc should work properly.\n\nOnce you've verified it works fine locally, you can ``rsync`` the\narchive to your webserver.\n\nHere's an example of how you might serve 4chan threads in production.\nSuppose you own `www.example.com <www.example.com>`_, and you set up\nnginx so that ``/path/to/www/foo.html`` on your server ends up being\nserved at `www.example.com/foo.html <www.example.com/foo.html>`_. You\ncan host 4chan threads like this:\n\n::\n\n  rsync -Pa archive/4chan/ you@www.example.com:/path/to/www/\n\n**NOTE**: You must ensure each board is at the *root* of your static\nserver, or else 4chan's JS won't work properly! In other words, make\nsure that the threads are served at\n`www.example.com/vg/thread/338253176\n<www.example.com/vg/thread/338253176>`_, not\n`www.example.com/archive/4chan/vg/thread/338253176\n<www.example.com/archive/4chan/vg/thread/338253176>`_. (Notice /vg/\nisn't after .com; that's bad. The board name needs to be directly\nafter your domain name, at the root, or else you won't be able to\nfollow replies since 4chan's JS reply parser breaks for some reason.)\n\nYou can host the files using any webserver you like. Personally, I use\nnginx + CloudFlare.\n\n``archive-chan`` was forked from `BASC Archiver\n<https://basc-archiver.readthedocs.io/en/latest/>`_, which seemed to\nbe unmaintained since 2018. It wasn't able to properly save 4chan\nthreads (because 4chan's image CDN subdomain had changed, which broke\nthe regex), nor did it save threads in a format that could easily be\nhosted. So I created this quick fix for my needs in 2021, and released\nit as ``archive-chan`` so others could use it too.\n\nIf you have questions or want to report a bug, DM me on twitter! I'm\n`@theshawwn <https://twitter.com/theshawwn>`_; always happy to say\nhello.\n\n(Or you can `file a GitHub issue here <https://github.com/shawwn/archive-chan/issues/new>`_.)\n\nThe `original BASC Archiver README\n<https://github.com/bibanon/BASC-Archiver#basc-archiver>`_ from 2018 appears verbatim\nbelow:\n\nIntroduction\n============\n\nThe **BASC Archiver** is a Python library (packaged with the\n**thread-archiver** script) used to archive imageboard threads.\nIt uses the `4chan API <https://github.com/4chan/4chan-API>`_\nwith the py4chan wrapper. Developers are free to use the\nBASC-Archiver library for some interesting third-party applications,\nas it is licensed under the LGPLv3.\n\nIt comes with a CLI interface for archiving threads, the\n**thread-archiver**, with a GUI interface under development.\n\nThe **thread-archiver** is designed to archive all content from a 4chan\nthread:\n\n-  Download all images and/or thumbnails in given threads.\n-  Download all child threads (threads referred to in a post).\n-  Download a JSON dump of thread comments using the 4chan API.\n-  Download the HTML page.\n-  Convert links in HTML to use the downloaded images.\n-  Download CSS/JS and convert HTML to use them.\n-  Keep downloading until 404 (with a user-set delay).\n-  Can be restarted at any time.\n-  Threaded downloading to download multiple files at the same time.\n\nThe **thread-archiver** replaces the typical “Right-click Save As, Web\nPage Complete” action, which does not save full-sized images or JSON. It\nworks as a guerilla, static HTML alternative to Fuuka.\n\n\nUsage\n=====\n\n::\n\n    Usage:\n      thread-archiver <url>... [options]\n      thread-archiver -h | --help\n      thread-archiver -v | --version\n\n    Options:\n      --path=<string>                Path to folder where archives will be saved [default: ./archive]\n      --runonce                      Downloads the thread as it is presently, then exits\n      --thread-check-delay=<float>   Delay between checks of the same thread [default: 90]\n      --delay=<float>                Delay between file downloads [default: 0]\n      --poll-delay=<float>           Delay between thread checks [default: 20]\n      --dl-threads-per-site=<int>    Download threads to use per site [default: 5]\n      --dl-thread-wait=<float>       Seconds to wait between downloads on each thread [default: 0.1]\n      --nothumbs                     Don't download thumbnails\n      --thumbsonly                   Download thumbnails, no images\n      --nojs                         Don't download javascript\n      --nocss                        Don't download css\n      --ssl                          Download using HTTPS\n      --follow-children              Follow threads linked in downloaded threads\n      --follow-to-other-boards       Follow linked threads, even if from other boards\n      --silent                       Suppresses mundane printouts, prints what's important\n      -v --verbose                   Printout more information than normal\n      -h --help                      Show help\n      -V --version                   Show version\n\n\nExample\n=======\n\n::\n\n    thread-archiver http://boards.4chan.org/b/res/423861837 --delay 5 --thumbsonly\n\n\nInstallation\n============\nThe BASC-Archiver is designed for Python 3.x, and can be installed on Windows, Linux, or Mac OS X.\n\n(Python2 has intractable ascii->unicode conversion errors, whereas Python 3.x stores all strings in unicode, so we strongly recommend using 3.x.)\n\nNew stable releases can be found on our `Releases page <https://github.com/bibanon/BASC-Archiver/releases>`_,\nor installed with the PyPi package `BASC-Archiver <https://pypi.python.org/pypi/BASC-Archiver>`_.\n\nLinux and OSX\n-------------\n\n1. Make sure you have Python3 and pip3 installed. On Debian/Ubuntu, Fedora/Red Hat/CentOS, install the packages `python3` and `python3-pip` . Here's a `Mac OS X Installation Guide. <http://docs.python-guide.org/en/latest/starting/install/osx/>`_ \n2. Run ``pip3 install basc-archiver``\n\n   - Linux users must run this command as root, or prefix the command with `sudo`.\n3. Run ``thread-archiver http://boards.4chan.org/etc/thread/12345``\n\nThreads will be saved in ``./archive``, but you can change that by supplying a directory with the ``--path=`` argument.\n\nWindows\n-------\n\n1. Download the latest release from `our page <https://github.com/bibanon/BASC-Archiver/releases>`_.\n2. Open up a command prompt window (``cmd.exe``), and move to the directory with ``thread-archiver.exe``\n3. Run ``thread-archiver.exe http://boards.4chan.org/etc/thread/12345``\n\nUsing the Windows version will become simpler once we finish writing the GUI.\n\nAndroid (CLI)\n-------------\n\n    **Note:** This is a temporary solution until we put together some\n    kind of Android GUI app.\n\nThanks to the QPython interpreter, you can effortlessly run the\nBASC-Archiver on your Android phone.\n\n1. Install the `QPython app <https://play.google.com/store/apps/details?id=com.hipipal.qpyplus>`_ from Google Play.\n2. Open the QPython app, and swipe left to reach the menu.\n3. Tap **Package Index**. Then scroll down and tap **Pip Console**.\n4. Run the following commands (after starting the pip\\_install.py\n   script):\n\n   ::\n\n       pip install requests\n       pip install basc-archiver\n\nNow you can just open QPython, tap **My QPython**, tap **pip\\_console**,\nand run the following command with your own thread URL:\n\n::\n\n    thread-archiver --path=/sdcard/ http://boards.4chan.org/qa/thread/23839\n\nTo run the script in the background, press the back button, and tap\n**OK** at the **Run in Background** prompt. You can stop the script\nanytime using ``Vol Down`` + ``C``.\n\n-  **Note**: On Android (CLI), it is important to set the path to\n   ``/sdcard/``, so the thread dump can be accessed from the\n   ``/sdcard/archives/4chan/`` folder.\n-  **Note**: To update the BASC-Archiver on Android (CLI), you must open\n   QPython, press the **3-dot menu** button, scroll down and tap **Reset\n   Private Space**. Then just reinstall the BASC-Archiver.\n\nLicense\n=======\n\nBibliotheca Anonoma Imageboard Thread Archiver (BASC Archiver)\n\nCopyright (C) 2014 Antonizoon Overtwater, Daniel Oaks. Licensed under the GNU Lesser General Public License v3.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shawwn/archive-chan",
    "keywords": "4chan downloader images json dump",
    "license": "",
    "maintainer": "Shawn Presser <twitter.com/theshawwn>",
    "maintainer_email": "shawnpresser@gmail.com",
    "name": "archive-chan",
    "package_url": "https://pypi.org/project/archive-chan/",
    "platform": "",
    "project_url": "https://pypi.org/project/archive-chan/",
    "project_urls": {
      "Homepage": "https://github.com/shawwn/archive-chan"
    },
    "release_url": "https://pypi.org/project/archive-chan/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Makes a complete hostable archive of imageboard threads including images, HTML, and JSON.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10569939,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad66c3840c29782e27bcd88028624c66ec173a5057c2671c176dc7aafb689a6d",
          "md5": "c0a8718718b2ba8da64a1f4723874bd7",
          "sha256": "a33490f8514eccf8bdcef9c4f351dae83c40caf1a97592d8d641a594904441ca"
        },
        "downloads": -1,
        "filename": "archive-chan-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c0a8718718b2ba8da64a1f4723874bd7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16824,
        "upload_time": "2021-06-06T13:09:35",
        "upload_time_iso_8601": "2021-06-06T13:09:35.805764Z",
        "url": "https://files.pythonhosted.org/packages/ad/66/c3840c29782e27bcd88028624c66ec173a5057c2671c176dc7aafb689a6d/archive-chan-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2729aafbe95f1d0a3a2dbfffc6f0dd78a8c400c62cbb2f55cf740180eb6474b1",
          "md5": "e87b2eb877c3ef250c87d0cab57ee739",
          "sha256": "d75db584e4aa8379dc3bc1c789af72d7a58457335cf3a3aee7367cf3dac881ac"
        },
        "downloads": -1,
        "filename": "archive-chan-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e87b2eb877c3ef250c87d0cab57ee739",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16686,
        "upload_time": "2021-06-06T13:28:14",
        "upload_time_iso_8601": "2021-06-06T13:28:14.056590Z",
        "url": "https://files.pythonhosted.org/packages/27/29/aafbe95f1d0a3a2dbfffc6f0dd78a8c400c62cbb2f55cf740180eb6474b1/archive-chan-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb07967509f90c92636ca147e2ef687ae8f7b74e99cec5934a96581a9f6405af",
          "md5": "dca94a04e5bb82d8d424dbde443052dc",
          "sha256": "cd4bda419283fd538e666b9bcc2c6f92192b04d0c9a9350093e7f42946a7804d"
        },
        "downloads": -1,
        "filename": "archive-chan-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dca94a04e5bb82d8d424dbde443052dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16683,
        "upload_time": "2021-06-06T13:30:32",
        "upload_time_iso_8601": "2021-06-06T13:30:32.275066Z",
        "url": "https://files.pythonhosted.org/packages/bb/07/967509f90c92636ca147e2ef687ae8f7b74e99cec5934a96581a9f6405af/archive-chan-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8626e1a57e7aebdd50ddf8f7ba76c32f8d4b072fd5035cad5a4ba841a80bb4d3",
          "md5": "95c0b45f9fde1f1f635af9ce535e848a",
          "sha256": "4498f4a9533fd559ef234f27461ec4b78d8aaca6dc1e58f6dfa4eb67b8790ed7"
        },
        "downloads": -1,
        "filename": "archive-chan-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "95c0b45f9fde1f1f635af9ce535e848a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16693,
        "upload_time": "2021-06-06T13:39:19",
        "upload_time_iso_8601": "2021-06-06T13:39:19.862771Z",
        "url": "https://files.pythonhosted.org/packages/86/26/e1a57e7aebdd50ddf8f7ba76c32f8d4b072fd5035cad5a4ba841a80bb4d3/archive-chan-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8626e1a57e7aebdd50ddf8f7ba76c32f8d4b072fd5035cad5a4ba841a80bb4d3",
        "md5": "95c0b45f9fde1f1f635af9ce535e848a",
        "sha256": "4498f4a9533fd559ef234f27461ec4b78d8aaca6dc1e58f6dfa4eb67b8790ed7"
      },
      "downloads": -1,
      "filename": "archive-chan-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "95c0b45f9fde1f1f635af9ce535e848a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16693,
      "upload_time": "2021-06-06T13:39:19",
      "upload_time_iso_8601": "2021-06-06T13:39:19.862771Z",
      "url": "https://files.pythonhosted.org/packages/86/26/e1a57e7aebdd50ddf8f7ba76c32f8d4b072fd5035cad5a4ba841a80bb4d3/archive-chan-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}