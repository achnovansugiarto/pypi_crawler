{
  "info": {
    "author": "AaronJny",
    "author_email": "aaronjny7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# xyolo\n\n`xyolo`是一个Python实现的、高度封装的YOLO v3类库。\n\n借助xyolo，您可以只使用几行Python代码轻松完成yolo3目标检测任务的训练和调用。\n\nxyolo is a highly encapsulated YOLO v3 library implemented in Python.\n\nWith xyolo, you can easily complete the training and calling of the yolo3 target detection task with just a few lines of Python code.\n\n\n请注意：\n\n> 我使用的Python是Anaconda的Python 3.7发行版本，在shell里面进行了初始化(python和pip默认指向当前激活环境，而不是默认的python2)，所以文章中的python和pip请根据自己的情况判断是否需要替换为python3和pip3。\n\nPS:\n\n> 此项目是对[tf2-keras-yolo3](https://github.com/AaronJny/tf2-keras-yolo3)项目的重构和封装。\n\n\n## 一、安装\n\n### 1、通用安装方法\n\n`xyolo`的安装非常简单，通过pip一键安装即可。请注意，`xyolo`需要安装的TensorFlow版本>=2.2（未安装TensorFlow的话则会自动安装）\n\n```\npip install --user xyolo\n```\n\n建议使用`--user`参数，避免遇到权限问题。\n\n当然，如果有条件的话，使用conda创建一个新环境，并在新环境中进行安装会更好，可以避免意料之外的依赖冲突问题。\n\n### 2、GPU版本安装方法\n\n如果你想使用TensorFlow的GPU版本，可以选择在安装xyolo之前，先安装2.2及以上的tensorflow-gpu。以conda举例，安装GPU支持的操作流程如下：\n\n#### 1.创建一个虚拟环境，名为xyolo。\n\n```\nconda create -n xyolo python=3.7\n```\n\n#### 2.切换到刚创建好的环境里\n\n```\nconda activate xyolo\n```\n\n切换完成后，可以通过pip查看一下环境里安装的包：\n\n```\npip list\n```\n\n结果不出预料，很干净，毕竟是一个新环境嘛：\n\n```\nPackage    Version\n---------- -------------------\ncertifi    2020.6.20\npip        20.2.4\nsetuptools 50.3.0.post20201006\nwheel      0.35.1\n```\n\n#### 3.在新环境中安装tensorflow-gpu\n\n> 注意，安装前需要先安装好和tensorflow版本对应的显卡驱动，这部分还有点麻烦，就不在这篇文章中说明了，我觉得会选择使用GPU跑xyolo的同学应该都已经掌握了这部分技能了吧？\n>\n> 毕竟如果完全没有接触过tensorflow-gpu的话，接触xyolo应该也会选择cpu版本更好上手。\n\n我们通过conda来安装tensorflow-gpu，gpu版本的tensorflow存在cuda和cudnn依赖，使用conda可以自动解决这两者的版本依赖和配置问题。\n\n```\nconda install tensorflow-gpu=2.2\n```\n\n安静地等待一段时间，即可完成tensorflow-gpu的安装。\n\n#### 4.使用pip安装xyolo\n\n```\npip install --user xyolo\n```\n\n通过再次执行`pip list`，我们能够看到成功安装的xyolo及相关依赖。\n\n```\nPackage                Version\n---------------------- -------------------\nabsl-py                0.11.0\naiohttp                3.6.3\nastunparse             1.6.3\nasync-timeout          3.0.1\nattrs                  20.2.0\nblinker                1.4\nbrotlipy               0.7.0\ncachetools             4.1.1\ncertifi                2020.6.20\ncffi                   1.14.3\nchardet                3.0.4\nclick                  7.1.2\ncryptography           3.1.1\ncycler                 0.10.0\ngast                   0.3.3\ngoogle-auth            1.23.0\ngoogle-auth-oauthlib   0.4.2\ngoogle-pasta           0.2.0\ngrpcio                 1.31.0\nh5py                   2.10.0\nidna                   2.10\nimportlib-metadata     2.0.0\nKeras-Preprocessing    1.1.0\nkiwisolver             1.3.1\nloguru                 0.5.3\nlxml                   4.6.1\nMarkdown               3.3.2\nmatplotlib             3.3.2\nmkl-fft                1.2.0\nmkl-random             1.1.1\nmkl-service            2.3.0\nmultidict              4.7.6\nnumpy                  1.18.5\noauthlib               3.1.0\nopencv-python          4.4.0.46\nopt-einsum             3.1.0\nPillow                 8.0.1\npip                    20.2.4\nprotobuf               3.13.0\npyasn1                 0.4.8\npyasn1-modules         0.2.8\npycparser              2.20\nPyJWT                  1.7.1\npyOpenSSL              19.1.0\npyparsing              2.4.7\nPySocks                1.7.1\npython-dateutil        2.8.1\nrequests               2.24.0\nrequests-oauthlib      1.3.0\nrsa                    4.6\nscipy                  1.4.1\nsetuptools             50.3.0.post20201006\nsix                    1.15.0\ntensorboard            2.2.2\ntensorboard-plugin-wit 1.6.0\ntensorflow             2.2.0\ntensorflow-estimator   2.2.0\ntermcolor              1.1.0\ntqdm                   4.51.0\nurllib3                1.25.11\nWerkzeug               1.0.1\nwheel                  0.35.1\nwrapt                  1.12.1\nxyolo                  0.1.3\nyarl                   1.6.2\nzipp                   3.4.0\n```\n\n\n\n## 二、使用方法\n\n### 1、使用官方预训练权重，进行目标检测测试\n\nyolov3官方有提供预训练权重，如果我们要在和VOC数据集同分布或相似分布的图片上做目标检测的话，直接使用官方预训练权重也是可以的。\n\nxyolo调用官方预训练模型的逻辑是：\n\n- 1.从官网下载预训练权重（Darknet输出格式）\n- 2.将Darknet的权重文件转成keras的权重文件（现在TensorFlow和Keras已经基本不分家啦）\n- 3.构建模型，加载预训练权重\n- 4.对选择的图片进行目标检测\n\n好麻烦啊，是不是要写很多代码？当然不是~歪嘴.jpg\n\n![下载](.asserts/下载.jpeg)\n\n\n\n首先，准备一张用于检测的图片，假设它的路径是`./xyolo_data/detect.jpg`，图片内容如下：\n\n![detect](.asserts/detect.jpg)\n\n一个简单的示例如下：\n\n```python\n# 导入包\nfrom xyolo import YOLO, DefaultYolo3Config\nfrom xyolo import init_yolo_v3\n\n\n# 创建默认配置类对象\nconfig = DefaultYolo3Config()\n# 初始化xyolo（下载预训练权重、转换权重等操作都是在这里完成的）\n# 下载和转换只在第一次调用的时候进行，之后再调用会使用缓存的文件\ninit_yolo_v3(config)\n# 创建一个yolo对象，这个对象提供使用yolov3进行检测和训练的接口\nyolo = YOLO(config)\n\n# 检测并在图片上标注出物体\nimg = yolo.detect_and_draw_image('./xyolo_data/detect.jpg')\n# 展示标注后图片\nimg.show()\n```\n\n输出如下:\n\n```\n2020-11-03 23:33:49.645 | DEBUG    | xyolo.yolo3.yolo:detect_image:273 - Found 3 boxes for img\n2020-11-03 23:33:49.648 | DEBUG    | xyolo.yolo3.yolo:detect_image:289 - Class dog 0.99,Position (402, 176), (586, 310)\n2020-11-03 23:33:49.650 | DEBUG    | xyolo.yolo3.yolo:detect_image:289 - Class bicycle 0.96,Position (0, 80), (383, 412)\n2020-11-03 23:33:49.652 | DEBUG    | xyolo.yolo3.yolo:detect_image:289 - Class person 1.00,Position (9, 1), (200, 410)\n2020-11-03 23:33:49.652 | DEBUG    | xyolo.yolo3.yolo:detect_image:292 - Cost time 6.65432205500838s\n```\n\n同时，打开了一张图片（图片尺寸不一致是我截图和排版的问题）：\n\n![image-20201103233753811](.asserts/image-20201103233753811.png)\n\n这样，一次目标检测就完成了，舒服呀~\n\n当然了，我相信肯定有不少同学已经在这段代码的执行过程中遇到困难或疑惑了，我来集中解答几个可能会遇到的。\n\n1.预训练权重下载慢或无法下载\n\n> 因为yolov3的官网在国外，所以国内下载慢也很正常。推荐使用代理，或从备份地址下载后指定预训练权重的地址。具体方法参考`2、预训练权重无法下载或下载速度慢的解决方案`。\n\n2.提示权限问题\n\n> 因为xyolo会自动下载预训练权重到安装目录下，在某些情况下可能会遇到权限问题。解决方法就是在安装部分说的，通过指定`--user`参数指明将包安装在用户目录下，一般就没问题了。\n\n3.检测的速度慢\n\n> 细心的同学可能发现了，上面对图片做的一次检测，竟然花了6秒！这也太慢了吧？\n>\n> 事实上，并不是这样的。TensorFlow 2.x版本，默认使用动态图，性能会稍弱于1.x的静态图。所以，我这里使用了tf.function对速度进行了优化，在第一次运算时，模型会自动生成静态图，这部分会比较消耗时间，但后续单次计算的时间都会极大地缩短。\n>\n> 假如我们接着进行几次识别，就能够发现单次识别的时间有了明显降低，一般只需要零点几秒或几十毫秒。\n\n### 2、预训练权重无法下载或下载速度慢的解决方案\n\n主要有两种方法能够解决，分别看一下。\n\n#### 1.设置代理\n\n如果我们手上有能够加快访问速度的网络代理（你应该知道我在说啥~），可以通过设置代理的形式加快下载速度，示例如下：\n\n```python\nfrom xyolo import YOLO, DefaultYolo3Config\nfrom xyolo import init_yolo_v3\n\n# 创建一个DefaultYolo3Config的子类，在子类里覆盖默认的配置\nclass MyConfig(DefaultYolo3Config):\n    def __init__(self):\n        super(MyConfig, self).__init__()\n        # 这是替换成你的代理地址\n        self.requests_proxies = {'https': 'http://localhost:7890'}\n\n# 使用修改后的配置创建yolo对象\nconfig = MyConfig()\ninit_yolo_v3(config)\nyolo = YOLO(config)\n\n# 检测\nimg = yolo.detect_and_draw_image('./xyolo_data/detect.jpg')\nimg.show()\n```\n\n#### 2.从备用链接手动下载\n\n如果没有代理的话，也可以选择从备用下载地址下载。\n\n我把预训练权重上传到百度云上了，链接如下：\n\n>  链接: https://pan.baidu.com/s/1jXpoXHQHlp6Ra0jImruPXg  密码: 48ed\n\n从分享页面下载好权重文件后，又有两种设置方式。\n\n①将文件复制到xyolo包的安装目录下的xyolo_data目录下即可，就和自动下载的情况是一样的，后续不需要再人为做任何操作。\n\n②将文件保存在任意位置，并在配置类中设置它的路径。\n\n第一种就不需要多说了，来看一个第二种设置方法的示例：\n\n```python\nfrom xyolo import YOLO, DefaultYolo3Config\nfrom xyolo import init_yolo_v3\n\n# 创建一个DefaultYolo3Config的子类，在子类里覆盖默认的配置\nclass MyConfig(DefaultYolo3Config):\n    def __init__(self):\n        super(MyConfig, self).__init__()\n        # 这是替换成你的文件路径，为了避免出错，请尽量使用绝对路径\n        self._pre_training_weights_darknet_path = '/Users/aaron/data/darknet_yolo.weights'\n\n# 使用修改后的配置创建yolo对象\nconfig = MyConfig()\ninit_yolo_v3(config)\nyolo = YOLO(config)\n\n# 检测\nimg = yolo.detect_and_draw_image('./xyolo_data/detect.jpg')\nimg.show()\n```\n\n### 3、使用自己的数据训练模型\n\n首先介绍一下xyolo的数据集的输入格式。xyolo的输入数据集可表示如下：\n\n> 数据集是一个txt文本文件，它包含若干行，每行是一条数据。\n>\n> 每一行的格式： 图片路径 box1 box2 ... boxN\n>\n> 每一个box的格式：框框左上角x值,框框左上角y值,框框右下角x值,框框右下角y值,框框内物体的类别编号\n>\n> 给出一个示例：\n>\n> > ```\n> > path/to/img1.jpg 50,100,150,200,0 30,50,200,120,3\n> > path/to/img2.jpg 120,300,250,600,2\n> > ...\n> > ```\n\n进行图像标注的工具，labelImg算是用的比较多的。labelImg的标注文件格式默认是VOC的格式，文件类型是xml，与xyolo的输入格式并不相同。不用担心，xyolo提供了一个数据格式转换的脚本，我们只需要调用即可。\n\n```python\n# 引入转换脚本\nfrom xyolo import voc2xyolo\n\n# voc格式的标注数据路径的正则表达式\ninput_path = '/Users/aaron/data/labels_voc/*.xml'\n# classes是我们要检测的所有有效类别名称构成的txt文件，每个类别一行\nclasses_path = '/Users/aaron/code/xyolo/tests/xyolo_data/classes.txt'\n# 转换后的xyolo数据集存放路径\noutput_path = '/Users/aaron/code/xyolo/tests/xyolo_data/xyolo_label.txt'\n# 开始转换\nvoc2xyolo(input_path=input_path, classes_path=classes_path, output_path=output_path)\n```\n\n脚本执行后，会有进度条提示处理进度，当进度条达到100%时，处理完成。\n\n```\n100%|██████████| 106/106 [00:00<00:00, 3076.05it/s]\n```\n\n有了数据集之后，可以准备训练了。在此之前，确认一遍我们需要的东西：\n\n- xyolo支持的数据集\n- 要检测的所有有效类别名称构成的txt文件（`classes.txt`）\n\n我以检测某个网站的验证码图片上的文字举例。\n\n首先确定要检测的类别，我只需要判断字的位置，不判断每个字是什么，所以就一个类别text。我们创建一个`classes.txt`文件，在里面写入：\n\n```\ntext\n```\n\n然后，我标注并使用xyolo转换了数据集(`xyolo_label.txt`)：\n\n```\n/home/aaron/tmp/test_xyolo/images/162.png 47,105,75,141,0 157,52,181,80,0 197,85,229,120,0 265,85,296,117,0 257,131,293,166,0 355,63,386,90,0\n/home/aaron/tmp/test_xyolo/images/88.png 93,46,129,86,0 79,139,114,174,0 209,42,237,72,0 200,68,226,98,0 256,53,295,86,0 209,134,247,171,0\n/home/aaron/tmp/test_xyolo/images/176.png 43,88,76,120,0 123,91,153,127,0 98,155,127,184,0 189,117,224,152,0 289,54,319,86,0 348,123,374,151,0\n/home/aaron/tmp/test_xyolo/images/63.png 36,128,72,161,0 79,130,104,161,0 127,120,160,153,0 305,111,329,138,0 302,125,334,153,0 342,81,380,119,0\n/home/aaron/tmp/test_xyolo/images/77.png 164,114,200,150,0 193,147,225,182,0 309,90,336,120,0 349,89,382,121,0 321,126,352,155,0 298,150,327,177,0\n/home/aaron/tmp/test_xyolo/images/189.png 119,90,148,118,0 122,132,150,159,0 208,44,240,76,0 279,60,314,97,0 299,65,334,98,0 331,93,364,129,0\n/home/aaron/tmp/test_xyolo/images/200.png 232,58,265,91,0 288,58,316,85,0 49,118,78,148,0 55,134,83,163,0 75,148,103,175,0 312,131,343,163,0\n/home/aaron/tmp/test_xyolo/images/76.png 20,61,56,97,0 29,108,57,139,0 76,117,111,154,0 139,117,167,147,0 204,116,242,157,0 336,153,376,191,0\n...\n```\n\n开始训练：\n\n```python\n# 导入包\nfrom xyolo import DefaultYolo3Config, YOLO\nfrom xyolo import init_yolo_v3\n\n# 创建一个DefaultYolo3Config的子类，在子类里覆盖默认的配置\nclass MyConfig(DefaultYolo3Config):\n    def __init__(self):\n        super(MyConfig, self).__init__()\n        # 数据集路径，推荐使用绝对路径\n        self._dataset_path = '/home/aaron/tmp/test_xyolo/xyolo_data/yolo_label.txt'\n        # 类别名称文件路径，推荐使用绝对路径\n        self._classes_path = '/home/aaron/tmp/test_xyolo/xyolo_data/classes.txt'\n        # 模型保存路径，默认是保存在当前路径下的xyolo_data下的，也可以进行更改\n        # 推荐使用绝对路径\n        self._output_model_path = '/home/aaron/tmp/test_xyolo/output_model.h5'\n\n\n# 使用修改后的配置创建yolo对象\nconfig = MyConfig()\ninit_yolo_v3(config)\n# 如果是训练，在创建yolo对象时要传递参数train=True\nyolo = YOLO(config, train=True)\n# 开始训练，训练完成后会自动保存\nyolo.fit()\n```\n\n如果想要使用训练好的模型进行预测，可以这样写：\n\n```python\n# 导入包\nfrom xyolo import DefaultYolo3Config, YOLO\nfrom xyolo import init_yolo_v3\n\n# 创建一个DefaultYolo3Config的子类，在子类里覆盖默认的配置\nclass MyConfig(DefaultYolo3Config):\n    def __init__(self):\n        super(MyConfig, self).__init__()\n        # 类别名称文件路径，推荐使用绝对路径\n        self._classes_path = '/home/aaron/tmp/test_xyolo/xyolo_data/classes.txt'\n        # yolo对象使用的模型路径，也就是刚刚训练好的模型路径，推荐使用绝对路径\n        self._model_path = '/home/aaron/tmp/test_xyolo/output_model.h5'\n\n\n# 使用修改后的配置创建yolo对象\nconfig = MyConfig()\ninit_yolo_v3(config)\nyolo = YOLO(config)\n# 检测\nimg = yolo.detect_and_draw_image('./xyolo_data/detect.jpg')\nimg.show()\n```\n\n觉得反复配置Config类麻烦？实际上，对于一个项目，我们只需要配置一个Config类，把项目用到的配置都一起配置了，然后再引用同一个类即可，我现在这么写只是为了方便演示。比如上面这个，可以直接把训练和调用的配置写在一起：\n\n```python\n# 创建一个DefaultYolo3Config的子类，在子类里覆盖默认的配置\nclass MyConfig(DefaultYolo3Config):\n    def __init__(self):\n        super(MyConfig, self).__init__()\n        # 数据集路径，推荐使用绝对路径\n        self._dataset_path = '/home/aaron/tmp/test_xyolo/xyolo_data/yolo_label.txt'\n        # 类别名称文件路径，推荐使用绝对路径\n        self._classes_path = '/home/aaron/tmp/test_xyolo/xyolo_data/classes.txt'\n        # 模型保存路径，默认是保存在当前路径下的xyolo_data下的，也可以进行更改\n        # 推荐使用绝对路径\n        self._output_model_path = '/home/aaron/tmp/test_xyolo/output_model.h5'\n\t\t\t\t# yolo对象使用的模型路径，也就是刚刚训练好的模型路径，推荐使用绝对路径\n        self._model_path = '/home/aaron/tmp/test_xyolo/output_model.h5'\n```\n\n### 4、可选的全部配置项\n\n我决定在`xyolo`工具里面给用户足够的定制空间，所以参数会设置的比较多，这样使用起来会更加灵活。\n\n但也不用担心配置繁琐，因为如上面所见，其实常用的配置项就几个，只要掌握那几个就可以轻松上手了。但是如果想更灵活的话，就需要了解更多参数。下面给出一份完整的参数配置信息（也就是xyolo的默认配置）：\n\n```python\nfrom os.path import abspath, join, dirname, exists\nfrom os import mkdir\n\n\nclass DefaultYolo3Config:\n    \"\"\"\n    yolo3模型的默认设置\n    \"\"\"\n\n    def __init__(self):\n        # xyolo各种数据的保存路径，包内置\n        self.inner_xyolo_data_dir = abspath(join(dirname(__file__), './xyolo_data'))\n        # xyolo各种数据的保存路径，包外，针对于项目\n        self.outer_xyolo_data_dir = abspath('./xyolo_data')\n        # yolo3预训练权重下载地址\n        self.pre_training_weights_url = 'https://pjreddie.com/media/files/yolov3.weights'\n        # 下载文件时的http代理，\n        # 如需设置，格式为{'https_proxy':'host:port'}，如{'https_proxy':'http://127.0.0.1:7890'},\n        # 详细设置请参考 https://requests.readthedocs.io/en/master/user/advanced/#proxies\n        self.requests_proxies = None\n        # Darknet格式的预训练权重路径,请填写相对于inner_xyolo_data_dir的相对或绝对路径\n        self._pre_training_weights_darknet_path = 'darknet_yolo.weights'\n        # yolo3预训练权重darknet md5 hash值，用于处理异常数据\n        self.pre_training_weights_darknet_md5 = 'c84e5b99d0e52cd466ae710cadf6d84c'\n        # 转化后的、Keras格式的预训练权重路径，请填写相对于inner_xyolo_data_dir的相对或绝对路径\n        self._pre_training_weights_keras_path = 'keras_weights.h5'\n        # 预训练权重的配置路径，请填写相对于inner_xyolo_data_dir的相对或绝对路径\n        self._pre_training_weights_config_path = 'yolov3.cfg'\n        # 默认的anchors box路径，请填写相对于inner_xyolo_data_dir的相对或绝对路径\n        self._anchors_path = 'yolo_anchors.txt'\n        # 默认的类别文本路径，请填写相对于inner_xyolo_data_dir的相对或绝对路径\n        self._classes_path = 'coco_classes.txt'\n        # 训练输出的模型地址,请填写相对于outer_xyolo_data_dir的相对或绝对路径\n        self._output_model_path = 'output_model.h5'\n        # 数据集路径,请填写相对于outer_xyolo_data_dir的相对或绝对路径\n        self._dataset_path = 'dataset.txt'\n        # 是否开启TensorBoard，默认开启\n        self.use_tensorboard = True\n        # 训练时TensorBoard输出路径，请填写相对于outer_xyolo_data_dir的相对或绝对路径\n        self._tensorboard_log_path = './tensorboard/logs'\n        # 是否开启CheckPoint，默认开启\n        self.use_checkpoint = True\n        # 是否开启学习率衰减\n        self.use_reduce_lr = True\n        # 学习率衰减监控指标，默认为验证loss\n        self.reduce_lr_monitor = 'val_loss'\n        # 学习率衰减因子，new_lr = lr * factor\n        self.reduce_lr_factor = 0.1\n        # 连续patience个epochs内结果未改善，则进行学习率衰减\n        self.reduce_lr_patience = 3\n        # 是否开启early_stopping\n        self.use_early_stopping = True\n        # early_stopping监控指标，默认为验证loss\n        self.early_stopping_monitor = 'val_loss'\n        # 指标至少变化多少认为结果改善了\n        self.early_stopping_min_delta = 0\n        # 连续patience个epochs内结果未改善，则提前结束训练\n        self.early_stopping_patience = 10\n        # yolo默认加载的模型路径(最好填写绝对路径)，优先级设置见下方model_path方法\n        self._model_path = ''\n        # 目标检测分数阈值\n        self.score = 0.3\n        # 交并比阈值\n        self.iou = 0.45\n        # 模型图片大小\n        self.model_image_size = (416, 416)\n        # GPU数量\n        self.gpu_num = 1\n        # 训练时的验证集分割比例，默认为0.1，\n        # 即将数据集中90%的数据用于训练，10%的用于测试\n        self.val_split = 0.1\n        # 训练分为两步，第一步冻结大多数层进行训练，第二步解冻进行微调\n        # 是否开启冻结训练，建议开启\n        self.frozen_train = True\n        # 冻结时，训练的epoch数\n        self.frozen_train_epochs = 50\n        # 冻结时，训练的batch_size\n        self.frozen_batch_size = 32\n        # 冻结时的初始学习率\n        self.frozen_lr = 1e-3\n        # 是否开启解冻训练，建议开启\n        self.unfreeze_train = True\n        # 解冻时，训练的epoch数\n        self.unfreeze_train_epochs = 50\n        # 解冻时，训练的batch_size.注意，解冻时训练对GPU内存需求量非常大，这里建议设置小一点\n        self.unfreeze_batch_size = 1\n        # 解冻时的初始学习率\n        self.unfreeze_lr = 1e-4\n\n    def __setattr__(self, key, value):\n        _key = '_{}'.format(key)\n        if key not in self.__dict__ and _key in self.__dict__:\n            self.__dict__[_key] = value\n        else:\n            self.__dict__[key] = value\n\n    @classmethod\n    def make_dir(cls, path):\n        if not exists(path):\n            mkdir(path)\n\n    @classmethod\n    def join_and_abspath(cls, path1, path2):\n        return abspath(join(path1, path2))\n\n    def inner_abspath(self, filename):\n        self.make_dir(self.inner_xyolo_data_dir)\n        return self.join_and_abspath(self.inner_xyolo_data_dir, filename)\n\n    def outer_abspath(self, filename):\n        self.make_dir(self.outer_xyolo_data_dir)\n        return self.join_and_abspath(self.outer_xyolo_data_dir, filename)\n\n    @property\n    def pre_training_weights_darknet_path(self):\n        return self.inner_abspath(self._pre_training_weights_darknet_path)\n\n    @property\n    def pre_training_weights_config_path(self):\n        return self.inner_abspath(self._pre_training_weights_config_path)\n\n    @property\n    def pre_training_weights_keras_path(self):\n        return self.inner_abspath(self._pre_training_weights_keras_path)\n\n    @property\n    def anchors_path(self):\n        return self.inner_abspath(self._anchors_path)\n\n    @property\n    def classes_path(self):\n        return self.inner_abspath(self._classes_path)\n\n    @property\n    def output_model_path(self):\n        return self.outer_abspath(self._output_model_path)\n\n    @property\n    def dataset_path(self):\n        return self.outer_abspath(self._dataset_path)\n\n    @property\n    def tensorboard_log_path(self):\n        return self.outer_abspath(self._tensorboard_log_path)\n\n    @property\n    def model_path(self):\n        \"\"\"\n        Yolo模型默认加载的权重的路径。\n        按照 _model_path > output_model_path > pre_training_weights_keras_path 的优先级选择，即：\n        如果设置了_model_path,选择_model_path\n        否则，如果设置了output_model_path且路径存在，选择output_model_path\n        否则，选择pre_training_weights_keras_path\n        \"\"\"\n        _model_path = getattr(self, '_model_path', '')\n        if _model_path:\n            return abspath(_model_path)\n        if self._output_model_path and exists(self.output_model_path):\n            return self.output_model_path\n        return self.pre_training_weights_keras_path\n\n```\n\n配置项都有注释说明，就不再多讲了。这里我还想提一下`model_path`这个`property`。\n\n\n\n`model_path`决定了xyolo在进行检测时，会加载那个模型文件。它的选择逻辑如下：\n\n按照 `_model_path` > `output_model_path` > `pre_training_weights_keras_path` 的优先级选择，即：\n\n- 如果设置了`_model_path`,选择`_model_path`(`3、使用自己的数据训练模型`中检测部分就是这种情况)\n- 否则，如果设置了`output_model_path`且路径存在，选择`output_model_path`（也就是说，因为设置了`_output_model_path`，所以假设`3、使用自己的数据训练模型`中没配置`model_path`，它在检测时也能够正确加载模型）\n- 否则，选择`pre_training_weights_keras_path` (也就是转换后的官方预训练模型，即`1、使用官方预训练权重，进行目标检测测试` 中的情况)\n\n\n\n### 5、yolo对象的几个常用方法\n\n上面几个检测示例中，我们调用的都是同一个方法：\n\n```python\nimg = yolo.detect_and_draw_image('./xyolo_data/detect.jpg')\nimg.show()\n```\n\n它的输入是一个PIL.Image.Image类的实例，或者一个表示图片路径的字符串，返回的是检测并画上框框标记的图片对象，也是PIL.Image.Image类的实例。\n\n看一下它的代码：\n\n```python\n    def detect_and_draw_image(self, image: typing.Union[Image.Image, str], draw_label=True) -> Image.Image:\n        \"\"\"\n        在给定图片上做目标检测，并根据检测结果在图片上画出框框和标签\n\n        Args:\n            image: 要检测的图片对象（PIL.Image.Image）或路径(str)\n            draw_label: 是否需要为框框标注类别和概率\n\n        Returns:\n            添加了检测结果的图片对象\n        \"\"\"\n        predicted_results = self.detect_image(image)\n        img = self.draw_image(image, predicted_results, draw_label=draw_label)\n        return img\n```\n\n可以看到，这个方法实际上是调用了两个方法，`detect_image`用来获取检测结果，`draw_image`用来在图片上绘制检测信息。\n\n如果需要的话，我们也可以直接调用这两个方法，比如当我只需要获取图片上的目标检测结果时，我只需要调用`detect_image`即可，因为我并不关心图片的绘制。\n\n下面附上这两个方法的接口说明：\n\n```python\n    def detect_image(self, img: typing.Union[Image.Image, str]) -> typing.List[\n            typing.Tuple[str, int, float, int, int, int, int]]:\n        \"\"\"\n        在给定图片上做目标检测并返回检测结果\n\n        Args:\n            img: 要检测的图片对象（PIL.Image.Image）或路径(str)\n\n        Returns:\n            [[类别名称,类别编号,概率,左上角x值,左上角y值,右下角x值,右下角y值],...]\n        \"\"\"\n      \tpass\n\n\n    def draw_image(self, img: typing.Union[Image.Image, str], predicted_results: typing.List[\n      typing.Tuple[str, int, float, int, int, int, int]], draw_label=True) -> Image.Image:\n        \"\"\"\n        给定一张图片和目标检测结果，将目标检测结果绘制在图片上，并返回绘制后的图片\n\n        Args:\n            img: 要检测的图片对象（PIL.Image.Image）或路径(str)\n            predicted_results: 目标检测的结果，[[类别名称,类别编号,概率,左上角x值,左上角y值,右下角x值,右下角y值],...]\n            draw_label: 是否需要为框框标注类别和概率\n\n        Returns:\n            添加了检测结果的图片对象\n        \"\"\"\n        pass\n```\n\n\n\n## 后话\n\nxyolo包还没有进行过充足的测试（我自己做过使用测试，但很明显，不能覆盖到全部的情况），所以出个什么bug也是可以理解的吧（别打我，别打我，抱头）？碰到什么bug的话欢迎联系我哈。\n\nPS:\n\n> xyolo最低支持的TensorFlow版本是2.2，更低版本的没有测试和适配，不保证能用。精力有限，所以低版本也不打算适配了，所以如果是低版本导致的问题，我可能就不做处理了，请见谅~\n\n最后，如果您喜欢这个项目的话，给个star呗~\n\n感谢支持~\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AaronJny/xyolo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xyolo",
    "package_url": "https://pypi.org/project/xyolo/",
    "platform": "",
    "project_url": "https://pypi.org/project/xyolo/",
    "project_urls": {
      "Homepage": "https://github.com/AaronJny/xyolo"
    },
    "release_url": "https://pypi.org/project/xyolo/0.1.6/",
    "requires_dist": [
      "tensorflow (>=2.2)",
      "numpy (<1.19.0,>=1.18.1)",
      "pillow (>=7.0.0)",
      "matplotlib (>=3.1.3)",
      "loguru (>=0.5.1)",
      "requests (>=2.22.0)",
      "tqdm (>=4.42.1)",
      "lxml (>=4.5.0)",
      "opencv-python (>=4.2.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "xyolo is a highly encapsulated YOLO v3 library implemented in Python.With xyolo, you can easily complete the training and calling of the yolo3 target detection task with just a few lines of Python code.",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9042013,
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e0b974ebc66acd1f31542fa2fca7df3c41a6cfeec9750a7ed64e975de08b1f9",
          "md5": "c19971e62ec43c0514bb94251e421ad5",
          "sha256": "7c9bd1f98cb67ec156dcee9348435096c413394a8af906c9708ff7fc65d7e54f"
        },
        "downloads": -1,
        "filename": "xyolo-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c19971e62ec43c0514bb94251e421ad5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 118327,
        "upload_time": "2020-11-06T15:00:47",
        "upload_time_iso_8601": "2020-11-06T15:00:47.333245Z",
        "url": "https://files.pythonhosted.org/packages/5e/0b/974ebc66acd1f31542fa2fca7df3c41a6cfeec9750a7ed64e975de08b1f9/xyolo-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29ca11fd71ca4f7cb9a868888276dad0cbc487ff764823b47a98de87aff58228",
          "md5": "0d61b48a71c5801fff47a39827a1a2b1",
          "sha256": "6b53cb7125a8b37b92966dd8e8e278410b5b026d9f91f777ca57392c17d9b502"
        },
        "downloads": -1,
        "filename": "xyolo-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0d61b48a71c5801fff47a39827a1a2b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 42782,
        "upload_time": "2020-11-06T15:00:51",
        "upload_time_iso_8601": "2020-11-06T15:00:51.574871Z",
        "url": "https://files.pythonhosted.org/packages/29/ca/11fd71ca4f7cb9a868888276dad0cbc487ff764823b47a98de87aff58228/xyolo-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87851c81412deb14a3bef5ccbbd8f1ce0fc85e29d6f23297308b35f60c42bf93",
          "md5": "f742bbd93c01369eb9240985c6e17a0f",
          "sha256": "eabb3529885297e5758a1830bff8f95e1ab4b6f79e368f9236fb13e905dd7160"
        },
        "downloads": -1,
        "filename": "xyolo-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f742bbd93c01369eb9240985c6e17a0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 118423,
        "upload_time": "2021-01-03T12:43:57",
        "upload_time_iso_8601": "2021-01-03T12:43:57.447859Z",
        "url": "https://files.pythonhosted.org/packages/87/85/1c81412deb14a3bef5ccbbd8f1ce0fc85e29d6f23297308b35f60c42bf93/xyolo-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5adbbaaa450538bcb9ae6fadb4023ea774bf135afc63c273222ea2bcba620d96",
          "md5": "25abca32cd33b81f79a092cd16c3afbc",
          "sha256": "6fd5243084928bdbb95f7588c4ce37db8ed9d607f2087bad6a2c8d1359ce81e8"
        },
        "downloads": -1,
        "filename": "xyolo-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "25abca32cd33b81f79a092cd16c3afbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44028,
        "upload_time": "2021-01-03T12:43:59",
        "upload_time_iso_8601": "2021-01-03T12:43:59.474294Z",
        "url": "https://files.pythonhosted.org/packages/5a/db/baaa450538bcb9ae6fadb4023ea774bf135afc63c273222ea2bcba620d96/xyolo-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87851c81412deb14a3bef5ccbbd8f1ce0fc85e29d6f23297308b35f60c42bf93",
        "md5": "f742bbd93c01369eb9240985c6e17a0f",
        "sha256": "eabb3529885297e5758a1830bff8f95e1ab4b6f79e368f9236fb13e905dd7160"
      },
      "downloads": -1,
      "filename": "xyolo-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f742bbd93c01369eb9240985c6e17a0f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 118423,
      "upload_time": "2021-01-03T12:43:57",
      "upload_time_iso_8601": "2021-01-03T12:43:57.447859Z",
      "url": "https://files.pythonhosted.org/packages/87/85/1c81412deb14a3bef5ccbbd8f1ce0fc85e29d6f23297308b35f60c42bf93/xyolo-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5adbbaaa450538bcb9ae6fadb4023ea774bf135afc63c273222ea2bcba620d96",
        "md5": "25abca32cd33b81f79a092cd16c3afbc",
        "sha256": "6fd5243084928bdbb95f7588c4ce37db8ed9d607f2087bad6a2c8d1359ce81e8"
      },
      "downloads": -1,
      "filename": "xyolo-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "25abca32cd33b81f79a092cd16c3afbc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 44028,
      "upload_time": "2021-01-03T12:43:59",
      "upload_time_iso_8601": "2021-01-03T12:43:59.474294Z",
      "url": "https://files.pythonhosted.org/packages/5a/db/baaa450538bcb9ae6fadb4023ea774bf135afc63c273222ea2bcba620d96/xyolo-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}