{
  "info": {
    "author": "Martin Ahindura",
    "author_email": "team.sopherapps@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Lilly\n\nLilly is fast service-oriented and layered Python 3.6+ web framework built on top of [FastAPI](https://fastapi.tiangolo.com/)\nIt is enforces a certain way of creating FastApi applications that is much easier to reason about.\nSince it is based on FastAPI, it is modern, fast (high performance), and works well with Python type hints.\n\n## Purpose\n\nLilly signifies peaceful beauty. _Lilly_ is thus an opinionated framework that ensures clean beautiful\ncode structure that scales well for large projects and large teams.\n\n- It just adds more opinionated structure to the already beautiful [FastAPI](https://fastapi.tiangolo.com/).\n- It ensures that when someone is building a web application basing on Lilly, they don't need to think about the structure.\n- The developer should just know that it is a service-oriented architecture with each service having a layered architecture\nthat ensures layers don't know what the other layer is doing.\n\n## Key Features\n\nOn top of the [key features of FastAPI](https://fastapi.tiangolo.com/) which include:\n\n- Fast. It is based on FastApi\n- Intuitive: Great editor support. Completion everywhere. Less time debugging.\n- Easy: Designed to be easy to use and learn. Less time reading docs.\n- Short: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.\n- Robust: Get production-ready code. With automatic interactive documentation.\n- Standards-based: Based on (and fully compatible with) the open standards for APIs: OpenAPI (previously known as\n  Swagger) and JSON Schema.\n\nIt also:\n\n- Enforces a separation of concerns between service to service\n- Enforces a separation of concerns within the service between presentation, business, persistence, and data_source\n  layers\n\n## Quick Start\n\n- Ensure you have [Python 3.7](https://www.python.org/downloads/release/python-370/) or +3.7 installed\n- Create a new folder for your application\n\n```shell\nmkdir lilly_sample && cd lilly_sample\n```\n\n- Create the virtual environment and activate it\n\n```shell\npython3 -m venv env\nsource env/bin/activate\n```\n\n- Install lilly\n\n```shell\npip install lilly\n```\n\n- Create your first application based off the framework\n\n```shell\npython -m lilly create-app\n```\n\nThis will create the following folder structure with some fully functional sample code\n\n```shell\n.\n  ├── main.py\n  ├──  settings.py\n  └── services\n      ├──  __init__.py\n      └── hello\n          ├── __init__.py\n          ├── actions.py\n          ├── datasources.py\n          ├── dtos.py\n          ├── repositories.py\n          └── routes.py\n```\n\n- Install uvicorn and run the app\n\n```shell\npip install uvicorn\nuvicorn main:app --reload\n```\n\n- View the OpenAPI docs at [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)\n\n- For you to add another service in the services folder, run the command:\n\n```shell\npython -m lilly create-service <service-name>\n```\n\ne.g.\n\n```shell\npython -m lilly create-service blog\n```\n\n- For more information about the commands, just run the `help` commands\n\n```shell\npython -m lilly --help\npython -m lilly create-app --help\npython -m lilly create-service --help\n```\n\n## How to Run tests\n\n- Clone the repository\n\n```shell\ngit clone git@github.com:sopherapps/lilly.git && cd lilly\n```\n\n- Create a test postgres database if you have not yet\n\n```shell\nsudo -su postgres\ncreatedb <test_db_name>\nexit\n```\n\n- Copy the `.example.env` file to `.env`\n\n```shell\ncp .example.env .env\n```\n\n- Update the `TEST_DATABASE_URL` to the URL of your test postgres database in the `.env` file\n- Create virtual environment for Python 3.7 and above and activate it\n\n```shell\npython3 -m venv env\nsource env/bin/activate\n```\n\n- Install requirements\n\n```shell\npip install -r requirements.txt\n```\n\n- Run the test command\n\n```shell\npython -m unittest\n```\n\n## Usage\n\nLilly can be used easily in your app.\n\nTo create a new app, we use the command:\n\n```shell\npython -m lilly create-app <app-name>\n```\n\nTo add another service in the service folder, we use the command:\n\n```shell\npython -m lilly create-service <service-name>\n```\n\nThese two commands create a starting point with a sample fully-functional web app whose docs can be found at\n[http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs) when the app is run locally with the command.\n\n```shell\nuvicorn main:app --reload\n```\n\nThe two `create` commands typically create a service folder with the follwoing structure\n\n```shell\n      └── <service-name>\n          ├── __init__.py\n          ├── actions.py\n          ├── datasources.py\n          ├── dtos.py\n          ├── repositories.py\n          └── routes.py\n```\n\nThe `Action`s can be found in the `actions.py` module. Customize them accordingly following the guidance of the already\nexisting code.\n\nThe `DataSource`s can be found in the `datasources.py` module. Customize them accordingly following the guidance of the\nalready existing code.\n\nThe `Repository`s can be found in the `respositories.py` module. Customize them accordingly following the guidance of\nthe already existing code.\n\nThe `RouteSet`s can be found in the `routes.py` module. Customize them accordingly following the guidance of the already\nexisting code.\n\nThe `DataModel` DTOs can be found in the `dtos.py` module. Customize them accordingly following the guidance of the\nalready existing code.\n\n### Data Sources\n\nTo create a new data source, one needs to subclass the `DataSource` class and override the `connect(self)` method.\n\n```python\nfrom typing import ContextManager\nfrom lilly.datasources import DataSource\n\n\nclass SampleConnectionContextManager:\n  def __init__(self, connection):\n    self.connection = connection\n\n  def __enter__(self):\n    return self.connection\n\n  def __exit__(self, exc_type, exc_val, exc_tb):\n    self.connection.close()\n\n\nclass SampleDataSource(DataSource):\n  def connect(self) -> ContextManager:\n    # do some stuff and return a context manager for a connection\n    pass\n```\n\nTo make life easier for the developer, we have created a few DataSources that can be used or overridden. They include:\n\n#### 1. SQLAlchemyDataSource\n\nThis connects to any relational database e.g. MySQL, PostgreSQL, Sqlite etc.\nusing [SQLAlchemy](https://www.sqlalchemy.org/)\nIt can be used in a repository as in this example:\n\n```python\nfrom typing import Any\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy import Column, Integer, String\nfrom lilly.repositories import Repository\nfrom lilly.datasources import SQLAlchemyDataSource, DataSource\nfrom lilly.conf import settings\n\nBase = declarative_base()\n\n\nclass UserModel(Base):\n  \"\"\"The database model for users\"\"\"\n  __tablename__ = \"users\"\n  id = Column(Integer, primary_key=True)\n  name = Column(String)\n  email = Column(String)\n\n\nclass UsersRepository(Repository):\n  \"\"\"Repository for saving and retrieving users\"\"\"\n  _users_db = SQLAlchemyDataSource(db_uri=settings.DATABASE_URL, declarative_meta=Base)\n\n  # -- other important methods need to be overridden also. I have excluded them for brevity.\n\n  @property\n  def _datasource(self) -> DataSource:\n    return self._users_db\n```\n\n### Repositories\n\nTo create a new repository, one needs to subclass the `Repository` class and override all the following methods:\n\n- `_get_one(self, datasource_connection: Any, record_id: Any, **kwargs) -> Any` method to get one record of\n  id `record_id`\n- `_get_many(self, datasource_connection: Any, skip: int, limit: int, filters: Dict[Any, Any], **kwargs) -> List[Any]`\n  method to get many records that fulfil the `filters`\n- `_create_one(self, datasource_connection: Any, record: BaseModel, **kwargs) -> Any` method to create one record\n- `_create_many(self, datasource_connection: Any, record: List[BaseModel], **kwargs) -> List[Any]` method to create many\n  records\n- `_update_one(self, datasource_connection: Any, record_id: Any, new_record: BaseModel, **kwargs) -> Any` method to\n  update one record of id `record_id`\n- `_update_many(self, datasource_connection: Any, new_record: BaseModel, filters: Dict[Any, Any], **kwargs) -> Any`\n  method to update many records that fulfil the `filters`\n- `_remove_one(self, datasource_connection: Any, record_id: Any, **kwargs) -> Any` method to remove one record of\n  id `record_id`\n- `_remove_many(self, datasource_connection: Any, filters: Dict[Any, Any], **kwargs) -> Any` method to remove many\n  records that fulfil the `filters`\n- `_datasource(self) -> DataSource` an @property-decorated method to return the DataSource whose `connect()` method is\n    to be called in any of the other methods to get its instance.\n- `_to_output_dto(self, record: Any) -> BaseModel` method which converts any record from the data source raw to DTO\n    for the public methods\n\nA good example is how we implemented the `SQLAlchemyRepository`. Feel free to look at it.\n\nTo make life easier for the developer, we have created a few off-the-shelf `Repository` subclasses with most of those methods implemented.\nThey just need to be inherited and a few abstract methods filled with one-liners (or slightly more than one-liners if you wish).\n\nThese include:\n\n#### 1. SQLAlchemyRepository\n\nThis connects to any relational database e.g. MySQL, PostgreSQL, Sqlite etc. using [SQLAlchemy](https://www.sqlalchemy.org/)\nvia the `SQLAlchemyDataSource` data source class.\n\nHere is a sample of its usage:\n\n```python\nfrom typing import Type\n\nfrom pydantic import BaseModel\nfrom sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import DeclarativeMeta, declarative_base\n\n\nfrom lilly.repositories import SQLAlchemyRepository\nfrom lilly.datasources import SQLAlchemyDataSource\nfrom lilly.conf import settings\n\nfrom .dtos import NameRecordDTO # a subclass of pydantic.BaseModel that is a Data Transfer Object for Name types\n\nBase = declarative_base()\n\n\nclass Name(Base):\n    __tablename__ = \"names\"\n    id = Column(Integer, primary_key=True)\n    title = Column(String, nullable=False)\n\n\nclass NamesRepository(SQLAlchemyRepository):\n    \"\"\"Repository for saving and retrieving random names\"\"\"\n    _names_db = SQLAlchemyDataSource(declarative_meta=Base, db_uri=settings.DATABASE_URL)\n\n    @property\n    def _model_cls(self) -> Type[DeclarativeMeta]:\n        return Name\n\n    @property\n    def _dto_cls(self) -> Type[BaseModel]:\n      return NameRecordDTO\n\n    @property\n    def _datasource(self) -> SQLAlchemyDataSource:\n      return self._names_db\n\n# The NamesRepository can then be instantiated in the `Actions` subclasses\n\n```\n\n### Actions\n\nTo create a new action, one needs to subclass the `Action` class and override the `run()` method.\n\nFor instance:\n\n```python\nimport random\nimport string\n\nfrom pydantic import BaseModel\n\nfrom lilly.actions import Action\n\nfrom .repositories import NamesRepository  # A Repository for names\nfrom .dto import NameCreationRequestDTO # The Data Transfer Object to used when creating a name\n\n\nclass GenerateRandomName(Action):\n  \"\"\"\n  Generates a random string and persists it in the data source\n  \"\"\"\n  _vowels = \"aeiou\"\n  _consonants = \"\".join(set(string.ascii_lowercase) - set(\"aeiou\"))\n  _name_repository = NamesRepository()\n\n  def __init__(self, length: int = 7):\n    self._length = length\n\n  def run(self) -> BaseModel:\n    \"\"\"Actual method that is run\"\"\"\n    name = self._generate_random_word()\n    return self._name_repository.create_one(NameCreationRequestDTO(title=name))\n\n  def _generate_random_word(self):\n    \"\"\"Generates a random word\"\"\"\n    word = \"\"\n    for i in range(self._length):\n      if i % 2 == 0:\n        word += random.choice(self._consonants)\n      else:\n        word += random.choice(self._vowels)\n    return word\n\n# The GenerateRandomName action is then used in a route as self._do(GenerateRandomName, length=9)\n```\n\nTo make life easier for the developer, we have developed a few Actions that can be inherited and used easily. They\ninclude:\n\n#### 1. CreateOneAction\n\nThis is a CRUD action that creates a single item in the repository. Here is a sample of how it is used.\n\n```python\nfrom lilly.actions import CreateOneAction\nfrom lilly.repositories import Repository\n\n\n# inherit the CreateOneAction and implement its _repository @property method\nclass CreateOneName(CreateOneAction):\n  \"\"\"Create a single Name record in the repository\"\"\"\n\n  @property\n  def _repository(self) -> Repository:\n    return  # your repository\n\n# then use it in your routes like self._do(CreateOneName, data_dto)\n```\n\n#### 2. CreateManyAction\n\nThis is a CRUD action that creates multiple items in the repository at one go. Here is a sample of how it is used.\n\n```python\nfrom lilly.actions import CreateManyAction\nfrom lilly.repositories import Repository\n\n\n# inherit the CreateManyAction and implement its _repository @property method\nclass CreateManyNames(CreateManyAction):\n  @property\n  def _repository(self) -> Repository:\n    return  # your repository\n\n# then use it in your routes like self._do(CreateManyNames, data_dtos)\n```\n\n#### 3. ReadOneAction\n\nThis is a CRUD action that reads a single item from the repository. Here is a sample of how it is used.\n\n```python\nfrom lilly.actions import ReadOneAction\nfrom lilly.repositories import Repository\n\n\n# inherit the ReadOneAction and implement its _repository @property method\nclass ReadOneName(ReadOneAction):\n  @property\n  def _repository(self) -> Repository:\n    return  # your repository\n\n# then use it in your routes like self._do(ReadOneName, record_id)\n```\n\n#### 4. ReadManyAction\n\nThis is a CRUD action that reads multiple items in the repository at one go basing on a number of filters and pagination\ncontrols. Here is a sample of how it is used.\n\n```python\nfrom lilly.actions import ReadManyAction\nfrom lilly.repositories import Repository\n\n\n# inherit the ReadManyAction and implement its _repository @property method\nclass ReadManyNames(ReadManyAction):\n  @property\n  def _repository(self) -> Repository:\n    return  # your repository\n\n# then use it in your routes like self._do(ReadManyNames, \"id > 8 AND title LIKE \"%doe\", skip=1, limit=10, address=\"Kampala\")\n# To read all names that:\n#  - have an id greater than 8\n#  - and title ending with 'doe'\n#  - as well having the address for that name equal to \"Kampala\"\n#  - but skipping the first item in that collection\n#  - and returning not more than ten records\n```\n\n#### 5. UpdateOneAction\n\nThis is a CRUD action that updates a single item in the repository. Here is a sample of how it is used.\n\n```python\nfrom lilly.actions import UpdateOneAction\nfrom lilly.repositories import Repository\n\n\n# inherit the UpdateOneAction and implement its _repository @property method\nclass UpdateOneName(UpdateOneAction):\n  @property\n  def _repository(self) -> Repository:\n    return  # your repository\n\n# then use it in your routes like self._do(UpdateOneName, record_id, new_data_dto)\n```\n\n#### 6. UpdateManyAction\n\nThis is a CRUD action that updates multiple items in the repository at one go basing on a number of filters supplied.\nHere is a sample of how it is used.\n\n```python\nfrom lilly.actions import UpdateManyAction\nfrom lilly.repositories import Repository\n\n\n# inherit the UpdateManyAction and implement its _repository @property method\nclass UpdateManyNames(UpdateManyAction):\n  @property\n  def _repository(self) -> Repository:\n    return  # your repository\n\n# then use it in your routes like self._do(UpdateManyNames, new_data_dto, \"id > 8 AND title LIKE \"%doe\", address=\"Kampala\")\n# To update all names to resemble new_data_dto for all names that:\n#  - have an id greater than 8\n#  - and title ending with 'doe'\n#  - as well having the address for that name equal to \"Kampala\"\n```\n\n#### 7. DeleteOneAction\n\nThis is a CRUD action that deletes a single item in the repository. Here is a sample of how it is used.\n\n```python\nfrom lilly.actions import DeleteOneAction\nfrom lilly.repositories import Repository\n\n\n# inherit the DeleteOneAction and implement its _repository @property method\nclass DeleteOneName(DeleteOneAction):\n  @property\n  def _repository(self) -> Repository:\n    return  # your repository\n\n# then use it in your routes like self._do(DeleteOneName, record_id)\n```\n\n#### 6. UpdateManyAction\n\nThis is a CRUD action that deletes multiple items in the repository at one go basing on a number of filters supplied.\nHere is a sample of how it is used.\n\n```python\nfrom lilly.actions import DeleteManyAction\nfrom lilly.repositories import Repository\n\n\n# inherit the DeleteManyAction and implement its _repository @property method\nclass DeleteManyNames(DeleteManyAction):\n  @property\n  def _repository(self) -> Repository:\n    return  # your repository\n\n# then use it in your routes like self._do(DeleteManyNames, \"id > 8 AND title LIKE \"%doe\", address=\"Kampala\")\n# To delete all names that:\n#  - have an id greater than 8\n#  - and title ending with 'doe'\n#  - as well having the address for that name equal to \"Kampala\"\n```\n\n### Route Sets\n\nTo create a new route set, one needs to subclass the `RouteSet` class and decorate it with `routeset` and decorate each\nmethod that is to be an endpoint with appropriate the method (HTTP or websocket) decorators like `get`,\n`post` etc.\n\nFor instance:\n\n```python\nfrom lilly.routing import routeset, RouteSet, get, post\nfrom .dto import MessageDTO  # the Data Transfer Object to pass data around the app\n\n\n@routeset\nclass NormalRouteSet(RouteSet):\n  \"\"\"\n  A basic Class based route that can have any method as an endpoint and can have common variables in the init\n  attached to self\n  \"\"\"\n\n  def __init__(self):\n    self.name = \"Lilly\"\n\n  @get(\"/\", response_model=MessageDTO)\n  def home(self):\n    \"\"\"Home\"\"\"\n    return {\"message\": f\"Welcome to {self.name}\"}\n\n  @get(\"/login\", response_model=MessageDTO)\n  def login(self):\n    \"\"\"Login\"\"\"\n    return {\"message\": f\"{self.name} invites you to login\"}\n```\n\nTo make the life of the developer easier, there are some `RouteSet` subclasses that one can inherit from and easily have\na set of endpoints that fulfill a particular purpose.\n\nThey include:\n\n#### 1. CRUDRouteSet\n\nFor CRUD (Create-Read-Update-Delete) actions, a RouteSet can be created be by subclassing `CRUDRouteSet`\nand overriding the `get_settings()` class method on it to return the appropriate `CRUDRouteSetSettings` for the given\nroute set.\n\nFor example:\n\n```python\nfrom lilly.routing import routeset, CRUDRouteSet, CRUDRouteSetSettings, get, post\n\nfrom .dto import (\n  NameRecordDTO,\n  NameCreationRequestDTO,\n  MessageDTO,\n  RandomNameCreationRequestDTO,\n)  # The Data Transfer Objects to be used as responses or requests\nfrom .actions import (\n  CreateOneName,\n  CreateManyNames,\n  ReadOneName,\n  ReadManyNames,\n  UpdateOneName,\n  UpdateManyNames,\n  DeleteOneName,\n  DeleteManyNames,\n  GenerateRandomName,\n)  # The Actions for CRUD\n\n\n@routeset\nclass HelloWorld(CRUDRouteSet):\n  \"\"\"\n  Class Based Route set that handles CRUD functionality out of the box\n  \"\"\"\n\n  @classmethod\n  def get_settings(cls) -> CRUDRouteSetSettings:\n    # When an action is not defined, the dependant routes will not be shown\n    return CRUDRouteSetSettings(\n      id_type=int,\n      base_path=\"/names\",\n      base_path_for_multiple_items=\"/admin/names\",\n      response_model=NameRecordDTO,\n      creation_request_model=NameCreationRequestDTO,\n      create_one_action=CreateOneName,\n      create_many_action=CreateManyNames,\n      read_one_action=ReadOneName,\n      read_many_action=ReadManyNames,\n      update_one_action=UpdateOneName,\n      update_many_action=UpdateManyNames,\n      delete_one_action=DeleteOneName,\n      delete_many_action=DeleteManyNames,\n      string_searchable_fields=[\"title\"],\n    )\n\n  # You can add even more routes on the CRUD routeset\n\n  @get(\"/hello/{name}\", response_model=MessageDTO)\n  def say_hello(self, name: str):\n    return {\"message\": f\"Hi {name}\"}\n\n  @post(\"/random-names/\", response_model=NameRecordDTO)\n  def create_random_name(self, request: RandomNameCreationRequestDTO):\n    return self._do(GenerateRandomName, length=request.length)\n```\n\n## Design\n\n### Requirements\n\nThe following features are required.\n\n#### Configuration\n\n- All services are put in the `services` folder whose import path is passed as a parameter to the `Lilly` instance\n  during initialization.\n  (Default: folder called `services` on root of project)\n- All settings are put as constants in the `settings` python module whose import path is passed to `Lilly` instance at\n  initialization.\n  (Default: `settings.py` on the root of project)\n\n#### Base Structures\n\n- All services must have the following modules or packages:\n  - `routes` (if a package is used, all `RouteSet` subclasses must be imported into the `routes.__init__` module)\n  - `actions`\n  - `repositories`\n  - `datasources`\n  - `dtos`\n- Just like [FastAPI Class-based views (CBV)](https://fastapi-utils.davidmontague.xyz/user-guide/class-based-views/)\n  routes, Lilly routes (which are technically methods of the Service subclass) should have the `post,get,put,patch...`\n  decorators. The format is exactly as it is in FastAPI. In addition, dependencies can be shared across multiple\n  endpoints of the same service thanks to `FastApi CBV`.\n- `RouteSet` is the base class of all Routes. It should have the following methods overridden:\n  - `_do(self, actionCls: Type[Action], *args, **kwargs)` which internally initializes the actionCls and calls `run()`\n    on it\n- `Action` subclasses should have an overridden `run(self) -> Any` method\n  - The `run(self)` method should be able to access any repositories by directly importing any it needs\n- `Repository` subclasses should have public:\n  - `get_one(self, record_id: Any, **kwargs) -> Any` method to get one record of id `record_id`\n  - `get_many(self, skip: int, limit: int, filters: Dict[Any, Any], **kwargs) -> List[Any]` method to get many records\n    that fulfil the `filters`\n  - `create_one(self, record: BaseModel, **kwargs) -> Any` method to create one record\n  - `create_many(self, records: List[BaseModel], **kwargs) -> List[Any]` method to create many records\n  - `update_one(self, record_id: Any, new_record: Any, **kwargs) -> Any` method to update one record of id `record_id`\n  - `update_many(self, new_record: BaseModel, filters: Dict[Any, Any], **kwargs) -> Any` method to update many records\n    that fulfil the `filters`\n  - `remove_one(self, record_id: Any, **kwargs) -> Any` method to remove one record of id `record_id`\n  - `remove_many(self, filters: Dict[Any, Any], **kwargs) -> Any` method to remove many records that fulfil\n    the `filters`\n- `Repository` subclasses should also have the following methods overridden:\n  - `_get_one(self, datasource_connection: Any, record_id: Any, **kwargs) -> Any` method to get one record of\n    id `record_id`\n  - `_get_many(self, datasource_connection: Any, skip: int, limit: int, filters: Dict[Any, Any], **kwargs) -> List[Any]`\n    method to get many records that fulfil the `filters`\n  - `_create_one(self, datasource_connection: Any, record: BaseModel, **kwargs) -> Any` method to create one record\n  - `_create_many(self, datasource_connection: Any, record: List[BaseModel], **kwargs) -> List[Any]` method to create\n    many records\n  - `_update_one(self, datasource_connection: Any, record_id: Any, new_record: BaseModel, **kwargs) -> Any` method to\n    update one record of id `record_id`\n  - `_update_many(self, datasource_connection: Any, new_record: BaseModel, filters: Dict[Any, Any], **kwargs) -> Any`\n    method to update many records that fulfil the `filters`\n  - `_remove_one(self, datasource_connection: Any, record_id: Any, **kwargs) -> Any` method to remove one record of\n    id `record_id`\n  - `_remove_many(self, datasource_connection: Any, filters: Dict[Any, Any], **kwargs) -> Any` method to remove many\n    records that fulfil the `filters`\n  - `_datasource(self) -> DataSource` an @property-decorated method to return the DataSource whose `connect()` method is\n    to be called in any of the other methods to get its instance.\n  - `_to_output_dto(self, record: Any) -> BaseModel` method which converts any record from the data source raw to DTO\n    for the public methods\n- `DataSource` subclasses should have an overridden `connect(self)` method\n- `dtos` (Data Transfer Object classes) are subclasses of the `pydantic.BaseModel` which are to be used to move data\n  across the layers\n- Any setting added to the gazetted settings file can be accessed via `lilly.conf.settings.<setting_name>`\n  e.g. `lilly.conf.settings.APP_SETTING`\n\n#### Running\n\n- The `Lilly` instance should be run the same way as FastAPI instances are run e.g.\n\n```shell\nuvicorn main:app # for app defined in the main.py module\n```\n### Implementation Ideas\n\n- The application is an instance of the `Lilly` class which is a subclass of the `FastAPI` class.\n- To create a `Lilly` instance, we need to pass in the following parameters:\n  - services_path (an import path as string, default is \"services\")\n  - settings_path (an import path as string, default is \"settings\")\n- During `Lilly` initialization, all routes are automatically imported using `importlib.import_module` by concatenating\n  the `<services_path>.<service_name>.routes` e.g. `services.hello.routes`.\n- In order to make route definition solely dependent on folder structure, we change `@app.get` decorators to `@get`\n- `app.get`, `app.post` etc. should throw `NotImplementedError` errors\n- The whole app has one instance of the `router: APIRouter`. It is defined in the `routing` module.\n- In that same `routing` module, `router.get`, `router.post`, `router.delete`, `router.put`, `router.patch`\n  , `router.head`, `router.options` are all aliased by their post-period `suffixes` e.g. `get`, `post` etc.\n- When initializing in __init__ of Lilly, we fetch the routes in all services then call `self.include_router(router)`.\n- `app.mount` should throw an `NotImplementedError` error because it complicates the app structure if used to mount\n  other applications, considering the fact that all routes share one `router` instance.\n- In order to have a protected method `_do()` to call an action within the routers, we use class-based views\n  from [fastapi-utils CBV](https://fastapi-utils.davidmontague.xyz/user-guide/class-based-views/).\n- All these class based views will be subclasses of `RouteSet` which has an overridable protected\n  method `_do(self, action_cls: Action, *args, **kwargs)` to make a call to any action\n- All these class based views will have a decorator `@routeset` which is an alias of `@cbv(router)` where `router` is\n  the router common to all routes\n- All the routes in the app have one router so their endpoints need to be different and explicit since no mounting will\n  be allowed\n- The `connect()` method of the `DataSource` class should return a `ContextManager` wrapped around the connection itself\n  so as to allow for any clean up tasks to be done in the `__exit__()` method of that ContextManager after each\n  connection is ready to be dropped. The `__enter__` method of the ContextManager needs to return the actual connection\n  object.\n\n## ToDo\n\n- [x] Set up the abstract methods structure\n- [x] Set up the CLI to generate an app\n- [x] Set up the CLI to generate a service\n- [x] Make repository public\n- [x] Package it and publish it\n- [ ] Add some out-of-the-box base data sources e.g.\n  - [x] SqlAlchemy\n  - [ ] Redis\n  - [ ] Memcached\n  - [ ] RESTAPI\n  - [ ] GraphQL\n  - [ ] RabbitMQ\n  - [ ] ActiveMQ\n  - [ ] Websockets\n  - [ ] Kafka\n  - [ ] Mongodb\n  - [ ] Couchbase\n  - [ ] DiskCache\n- [ ] Add some out-of-the-box base repositories e.g.\n  - [x] SqlAlchemyRepository (RDBM e.g. PostgreSQL, MySQL etc.)\n  - [x] SQLAlchemyRepository hangs when postgres is used (try running tests)\n  - [ ] RedisRepository\n  - [ ] MemcachedRepository\n  - [ ] RESTAPIRepository\n  - [ ] GraphQLRepository\n  - [ ] RabbitMQRepository\n  - [ ] ActiveMQRepository\n  - [ ] WebsocketsRepository\n  - [ ] KafkaRepository\n  - [ ] MongodbRepository\n  - [ ] CouchbaseRepository\n  - [ ] DiskCacheRepository\n- [x] Add some out-of-the-box base actions e.g.\n  - [x] CreateOneAction\n  - [x] CreateManyAction\n  - [x] UpdateOneAction\n  - [x] UpdateManyAction\n  - [x] ReadOneAction\n  - [x] ReadManyAction\n  - [x] DeleteOneAction\n  - [x] DeleteManyAction\n- [ ] Add some out-of-the-box base route sets\n  - [x] CRUDRouteSet\n  - [ ] WebsocketRouteSet\n  - [ ] GraphQLRoute\n- [ ] Add example code in examples folder\n  - [ ] Todolist (CRUDRouteSet, SqlAlchemyRepo)\n  - [ ] RandomQuotes (WebsocketRouteSet, MongodbRepo) (quotes got from the Bible)\n  - [ ] Clock (WebsocketRouteSet, WebsocketsRepo)\n- [ ] Set up automatic documentation\n- [x] Set up CI via Github actions\n- [ ] Set up CD via Github actions\n- [ ] Write about it in hashnode or Medium or both\n\n## Inspiration\n\n- The idea to create **lilly** came after looking at what the [Loopback](https://loopback.io/) team did\n  with [Loopback4](https://loopback.io/doc/en/lb4)\n\n## ChangeLog\n\nFor the changes across versions, look at the [CHANGELOG.md](./CHANGELOG.md)\n\n## License\n\nCopyright (c) 2022 [Martin Ahindura](https://github.com/Tinitto) Licensed under the [MIT License](./LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sopherapps/lilly",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lilly",
    "package_url": "https://pypi.org/project/lilly/",
    "platform": null,
    "project_url": "https://pypi.org/project/lilly/",
    "project_urls": {
      "Homepage": "https://github.com/sopherapps/lilly"
    },
    "release_url": "https://pypi.org/project/lilly/0.3.0/",
    "requires_dist": [
      "fastapi",
      "click",
      "pydantic",
      "fastapi-utils",
      "SQLAlchemy"
    ],
    "requires_python": "",
    "summary": "This package provides an opinionated SOA-layered fastapi-based web-framework.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13777508,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afe663257262ae699406364e478c0d811f43b8f4d271602ac255dc8f63c11c59",
          "md5": "f251395339faa2cc6545ebdf09d7cc99",
          "sha256": "c95e63d839fe5f794ff9041f50f0dc51b7c7a54f4d4bb79c8577a67e78637e09"
        },
        "downloads": -1,
        "filename": "lilly-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f251395339faa2cc6545ebdf09d7cc99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17029,
        "upload_time": "2022-04-25T19:33:53",
        "upload_time_iso_8601": "2022-04-25T19:33:53.517097Z",
        "url": "https://files.pythonhosted.org/packages/af/e6/63257262ae699406364e478c0d811f43b8f4d271602ac255dc8f63c11c59/lilly-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4378b6a0e21e3438046500f7ca7cfeff7662eefd20b6777b60eeab75a35d248",
          "md5": "4e381aef61030d8799c2efef7d99e7c2",
          "sha256": "800bdc8c4f973882de416227ae8224d6e044565de0ee54d7ff4d9e30a5f7c1f6"
        },
        "downloads": -1,
        "filename": "lilly-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4e381aef61030d8799c2efef7d99e7c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17597,
        "upload_time": "2022-04-25T19:33:56",
        "upload_time_iso_8601": "2022-04-25T19:33:56.082941Z",
        "url": "https://files.pythonhosted.org/packages/f4/37/8b6a0e21e3438046500f7ca7cfeff7662eefd20b6777b60eeab75a35d248/lilly-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efa8dca01e6798eb448f9683ee211941ea8d3f3584411946ef8374fee3a022a9",
          "md5": "fbf3fe90abcc2053cb1ba296a747ce13",
          "sha256": "a4a765bd661c971a5412782f52e1d6e12ea2684204121372bb391f73e0c22375"
        },
        "downloads": -1,
        "filename": "lilly-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fbf3fe90abcc2053cb1ba296a747ce13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19259,
        "upload_time": "2022-04-27T13:27:42",
        "upload_time_iso_8601": "2022-04-27T13:27:42.877168Z",
        "url": "https://files.pythonhosted.org/packages/ef/a8/dca01e6798eb448f9683ee211941ea8d3f3584411946ef8374fee3a022a9/lilly-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b208a09d275e8c5e3f3c398873725add234c665bf826dc5bee3d897de7fbf97",
          "md5": "6785a071ed005f3ed045fa60f19082ea",
          "sha256": "c7e97fa4fd3c2cdc66050c3c5eaabb53cd9adcdffc8b8afc7faf24db4aff871d"
        },
        "downloads": -1,
        "filename": "lilly-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6785a071ed005f3ed045fa60f19082ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17608,
        "upload_time": "2022-04-27T13:27:46",
        "upload_time_iso_8601": "2022-04-27T13:27:46.994043Z",
        "url": "https://files.pythonhosted.org/packages/1b/20/8a09d275e8c5e3f3c398873725add234c665bf826dc5bee3d897de7fbf97/lilly-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "530a4a5ad6c3e96222a8dd746232b54f1eaf2b817f7caed9cf948c06b3a77b35",
          "md5": "60b2bab160412661534faef772362531",
          "sha256": "23bfe46438000067e11e65cf0e360e0c6210cc4ec0e344937dda7df87edaf67c"
        },
        "downloads": -1,
        "filename": "lilly-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60b2bab160412661534faef772362531",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21898,
        "upload_time": "2022-04-27T18:35:07",
        "upload_time_iso_8601": "2022-04-27T18:35:07.086004Z",
        "url": "https://files.pythonhosted.org/packages/53/0a/4a5ad6c3e96222a8dd746232b54f1eaf2b817f7caed9cf948c06b3a77b35/lilly-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c8aea325b400674b91cca639810d0e6bfa654554ca8cf4b9b1efdfdb3577cf8",
          "md5": "27bc46a9fcfb1b9a22291ea3a976dcb1",
          "sha256": "cbda12ffd0070236fce48fc4741aceb103859b557d386f94bd88407d9000c0bc"
        },
        "downloads": -1,
        "filename": "lilly-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "27bc46a9fcfb1b9a22291ea3a976dcb1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19274,
        "upload_time": "2022-04-27T18:35:10",
        "upload_time_iso_8601": "2022-04-27T18:35:10.650945Z",
        "url": "https://files.pythonhosted.org/packages/4c/8a/ea325b400674b91cca639810d0e6bfa654554ca8cf4b9b1efdfdb3577cf8/lilly-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cb999f537ad941c6e7540eb8e03ae68623a4bf7b9fc4bbdaccd7273c0b655b7",
          "md5": "aef1bebd8e9616d68014c801d8ec380a",
          "sha256": "024f7684dd669cabce7ee08496f3eff974f21650ae6cc27945062e64eee768ce"
        },
        "downloads": -1,
        "filename": "lilly-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aef1bebd8e9616d68014c801d8ec380a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21983,
        "upload_time": "2022-04-27T18:41:58",
        "upload_time_iso_8601": "2022-04-27T18:41:58.242015Z",
        "url": "https://files.pythonhosted.org/packages/3c/b9/99f537ad941c6e7540eb8e03ae68623a4bf7b9fc4bbdaccd7273c0b655b7/lilly-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a2233308abb140031d16002ab3127c69ba1032ac36c5c7f012aae1784fa3d62",
          "md5": "fee1e6dc358a205428acd750d6950875",
          "sha256": "2b0897bf309812eb8dae0dcdb35cce44c093d5955860e4e8d7a627aaee86a7f6"
        },
        "downloads": -1,
        "filename": "lilly-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fee1e6dc358a205428acd750d6950875",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19397,
        "upload_time": "2022-04-27T18:42:01",
        "upload_time_iso_8601": "2022-04-27T18:42:01.071768Z",
        "url": "https://files.pythonhosted.org/packages/0a/22/33308abb140031d16002ab3127c69ba1032ac36c5c7f012aae1784fa3d62/lilly-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48aa674d67b0dc865052db7f44042a785e01490b4d077d274ba5aefdfc833b24",
          "md5": "b69301e002ced130d36679d94dc4750b",
          "sha256": "dd9f24412752b729dfc633ffc4813bce75de31ecc0bcf4104532521580729da3"
        },
        "downloads": -1,
        "filename": "lilly-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b69301e002ced130d36679d94dc4750b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29107,
        "upload_time": "2022-05-05T22:19:00",
        "upload_time_iso_8601": "2022-05-05T22:19:00.868794Z",
        "url": "https://files.pythonhosted.org/packages/48/aa/674d67b0dc865052db7f44042a785e01490b4d077d274ba5aefdfc833b24/lilly-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a5eed6f96ac531a80e71b17568b2f64b1c61dddfd0ff46855a1988290a2107c",
          "md5": "917b77aab19c9b9b9e0c7f76ca3ea1c2",
          "sha256": "c38311f23f0a1621039f11b04c8219a6e1f9e17207ee51e33fd67aa0e3371bc0"
        },
        "downloads": -1,
        "filename": "lilly-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "917b77aab19c9b9b9e0c7f76ca3ea1c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22089,
        "upload_time": "2022-05-05T22:19:03",
        "upload_time_iso_8601": "2022-05-05T22:19:03.900998Z",
        "url": "https://files.pythonhosted.org/packages/3a/5e/ed6f96ac531a80e71b17568b2f64b1c61dddfd0ff46855a1988290a2107c/lilly-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02c396b8f8a631e4fe44e7b48ac6f23e1ca2c2406295a5e0571899a9dce3830c",
          "md5": "b90191c6d999d2aa58d2c9e360cb2e90",
          "sha256": "c624fa394b58169a805236a2729fdd22604651fd2136e1cf51feaea8eb449fa7"
        },
        "downloads": -1,
        "filename": "lilly-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b90191c6d999d2aa58d2c9e360cb2e90",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35731,
        "upload_time": "2022-05-06T14:57:04",
        "upload_time_iso_8601": "2022-05-06T14:57:04.699027Z",
        "url": "https://files.pythonhosted.org/packages/02/c3/96b8f8a631e4fe44e7b48ac6f23e1ca2c2406295a5e0571899a9dce3830c/lilly-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79051ea2b129a62abdbcfee8d1f19bef56f1e563ac03de7548f44a6f7be9603c",
          "md5": "4122cd9b59d38ff67d7a667d2275720d",
          "sha256": "bba5d2a9b817089d07f396ce8bfe43166756fd45d36ebd988f9fae08488e0710"
        },
        "downloads": -1,
        "filename": "lilly-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4122cd9b59d38ff67d7a667d2275720d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27248,
        "upload_time": "2022-05-06T14:57:07",
        "upload_time_iso_8601": "2022-05-06T14:57:07.780702Z",
        "url": "https://files.pythonhosted.org/packages/79/05/1ea2b129a62abdbcfee8d1f19bef56f1e563ac03de7548f44a6f7be9603c/lilly-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bca147c38f53669bcaaae82be57a74cda6d7ada6c50f321aa7df7b9c8fe23217",
          "md5": "50ef8a481e012b3a10adcdd441344783",
          "sha256": "fb980647aed5262c456fbf376762b94bea4efc1041c72d38d3072891f30621fd"
        },
        "downloads": -1,
        "filename": "lilly-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50ef8a481e012b3a10adcdd441344783",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42788,
        "upload_time": "2022-05-11T00:56:52",
        "upload_time_iso_8601": "2022-05-11T00:56:52.842880Z",
        "url": "https://files.pythonhosted.org/packages/bc/a1/47c38f53669bcaaae82be57a74cda6d7ada6c50f321aa7df7b9c8fe23217/lilly-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00bd71b0a6d2381095036ef488dda510bb1280bfe81a62b7cc51a24febc6edc4",
          "md5": "9fae3279eb129bf001a9cb7ec053bda7",
          "sha256": "caf3ca7f591aad375d6f22c42b28bde448e231d644a8599a52f7c3c1a5621fb1"
        },
        "downloads": -1,
        "filename": "lilly-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9fae3279eb129bf001a9cb7ec053bda7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30679,
        "upload_time": "2022-05-11T00:56:56",
        "upload_time_iso_8601": "2022-05-11T00:56:56.228244Z",
        "url": "https://files.pythonhosted.org/packages/00/bd/71b0a6d2381095036ef488dda510bb1280bfe81a62b7cc51a24febc6edc4/lilly-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bca147c38f53669bcaaae82be57a74cda6d7ada6c50f321aa7df7b9c8fe23217",
        "md5": "50ef8a481e012b3a10adcdd441344783",
        "sha256": "fb980647aed5262c456fbf376762b94bea4efc1041c72d38d3072891f30621fd"
      },
      "downloads": -1,
      "filename": "lilly-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "50ef8a481e012b3a10adcdd441344783",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 42788,
      "upload_time": "2022-05-11T00:56:52",
      "upload_time_iso_8601": "2022-05-11T00:56:52.842880Z",
      "url": "https://files.pythonhosted.org/packages/bc/a1/47c38f53669bcaaae82be57a74cda6d7ada6c50f321aa7df7b9c8fe23217/lilly-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00bd71b0a6d2381095036ef488dda510bb1280bfe81a62b7cc51a24febc6edc4",
        "md5": "9fae3279eb129bf001a9cb7ec053bda7",
        "sha256": "caf3ca7f591aad375d6f22c42b28bde448e231d644a8599a52f7c3c1a5621fb1"
      },
      "downloads": -1,
      "filename": "lilly-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9fae3279eb129bf001a9cb7ec053bda7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30679,
      "upload_time": "2022-05-11T00:56:56",
      "upload_time_iso_8601": "2022-05-11T00:56:56.228244Z",
      "url": "https://files.pythonhosted.org/packages/00/bd/71b0a6d2381095036ef488dda510bb1280bfe81a62b7cc51a24febc6edc4/lilly-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}