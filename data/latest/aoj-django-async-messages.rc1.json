{
  "info": {
    "author": "David Winterbottom",
    "author_email": "david.winterbottom@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=====================\ndjango-async-messages\n=====================\n\nSimple asynchronous messages for django.  Plays nicely with Celery.\n\nQuestions\n=========\n\nWhat problem does this solve?\n-----------------------------\n\nSuppose a user instigates an expensive task that you are processing offline (eg\nusing Celery).  This library provides a simple mechanism for notifying the user\nwhen the task is finished, utilising Django's messaging framework.\n\nWhat's an example?\n------------------\n\nYou might use Celery to generate a large report and then employ this library to\nnotify the user that their report is ready to be downloaded.  The user will see\nthe message you've sent them when they make their next request after the message\nis submitted.\n\nHow does it work?\n-----------------\n\nA cache is used to persist the messages, and middleware is used to pick these up\nand submit them to `Django's messaging framework`_.  All very simple.\n\n.. _`Django's messaging framework`: https://docs.djangoproject.com/en/dev/ref/contrib/messages/\n\nAren't there other libraries that do this?\n------------------------------------------\n\nYes, there are - but they solve the problem in different ways:\n\n* `django-offline-messages`_ - this provides an alternative storage backend that\n  Django's messages framework can use.\n\n* `django-notifications`_  \n\n.. _`django-offline-messages`: https://github.com/dym/django-offline-messages\n.. _`django-notifications`: https://github.com/jtauber/django-notification\n\nWhat's good about this implementation?\n--------------------------------------\n\n* It's simple, fast and easy to use.  \n* It works cohesively with existing Django cache and messages framework.  It\n  will work no matter what cache backend your are using, and whatever storage\n  backend is used for messages. \n\nWhat's bad?\n-----------\n\n* A user may miss the message if they navigating quickly between pages. But \n  this is a general problem of the Django messages framework.\n\nInstall\n=======\n\nFrom PyPI (stable)::\n\n    pip install django-async-messages\n\nFrom Github (unstable)::\n\n    pip install git+git://github.com/codeinthehole/django-async-messages#egg=djang-async-messages\n\nAdd ``'async_messages.middleware.AsyncMiddleware'`` to your ``MIDDLEWARE_CLASSES``.\nEnsure it comes after ``'django.contrib.messages.middleware.MessageMiddleware'``.\n\nYou need to have ``CACHES`` configured in you settings for this to work.  As usual,\nmemcache is the best choice.  Note that `local memory caching`_ is not suitable as\neach process has its own private cache and a Celery task can't communicate with\nthe webserver process cache.\n\n.. _`local memory caching`: https://docs.djangoproject.com/en/dev/topics/cache/#local-memory-caching\n\nUse\n===\n\nSend a message to a single user::\n\n    >>> from async_messages import message_user\n    >>> from django.contrib.auth.models import User\n    >>> barry = User.objects.get(username='barry')\n    >>> message_user(barry, \"Barry, your report is ready\") \n\nSend a message to lots of users::\n\n    >>> from async_messages import message_users\n    >>> staff = User.objects.filter(is_staff=True)\n    >>> message_users(staff, \"All budgets must be spent by the end of the day\")\n\nSpecify message level::\n\n    >>> from django.contrib.messages import constants\n    >>> message_users(staff, \"Boom!\", constants.WARNING)\n\nSend multiple messages to a single user::\n\n    >>> from async_messages import message_user\n    >>> from django.contrib.auth.models import User\n    >>> barry = User.objects.get(username='barry')\n    >>> message_user(barry, \"Barry, your report is queued up for processing\") \n    >>> # do more awesome stuff\n    >>> message_user(barry, \"Barry, your report is ready\") \n\nAlternative way to send a message to a single user, imitating the django.contrib.messages API::\n\n    >>> from async_messages import messages\n    >>> barry = User.objects.get(username='barry')\n    >>> messages.debug(barry, \"Barry was here\")\n    >>> messages.info(barry, \"Hi, Barry\")\n    >>> messages.success(barry, \"Barry, your report is ready\")\n    >>> messages.warning(barry, \"Barry, you didn't lock your session\")\n    >>> messages.error(barry, \"You are not Barry\")\n\nContributing\n============\n\nFork, clone and create a virtualenv.  Then run::\n\n    make install\n\nRun tests with::\n\n    ./runtests.py\n\nPlease submit pull requests using 'develop' as the target branch.\n\nLicense\n=======\n\nMIT_\n\n.. _MIT: http://en.wikipedia.org/wiki/MIT_License\n\nChangelog\n=========\n\n0.3.1\n-----\n* Fix bug around request instances that don't have a user attribute\n\n0.3\n---\n* Mimic ``django.contrib.messages`` API for sending a message to a user\n\n0.2\n---\n* Added possibility to queue multiple messages\n\n0.1.2\n-----\n* Altered dependency on Django to be only 1.2+\n\n0.1.1\n-----\n* Altered middleware to use ``process_response``.\n* Better docstrings\n\n0.1\n---\n* Minimum viable product\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ygowill/django-async-messages",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aoj-django-async-messages",
    "package_url": "https://pypi.org/project/aoj-django-async-messages/",
    "platform": null,
    "project_url": "https://pypi.org/project/aoj-django-async-messages/",
    "project_urls": {
      "Homepage": "https://github.com/ygowill/django-async-messages"
    },
    "release_url": "https://pypi.org/project/aoj-django-async-messages/0.3.2/",
    "requires_dist": [
      "django (>=1.2)"
    ],
    "requires_python": "",
    "summary": "Send asynchronous messages to users (eg from offline scripts).  Useful for integration with Celery",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16058268,
  "releases": {
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03baf5eb6174312ba7bb53add892027187ae64f1e85aa05824d4eb8efbc1016a",
          "md5": "35b18d460990a640a79b86732728b2bf",
          "sha256": "692424ae1689aec35a9807be4c4e9a01dbe64aad3aacf20d53eeca4811ace424"
        },
        "downloads": -1,
        "filename": "aoj_django_async_messages-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35b18d460990a640a79b86732728b2bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5747,
        "upload_time": "2022-12-10T14:30:11",
        "upload_time_iso_8601": "2022-12-10T14:30:11.679101Z",
        "url": "https://files.pythonhosted.org/packages/03/ba/f5eb6174312ba7bb53add892027187ae64f1e85aa05824d4eb8efbc1016a/aoj_django_async_messages-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03baf5eb6174312ba7bb53add892027187ae64f1e85aa05824d4eb8efbc1016a",
        "md5": "35b18d460990a640a79b86732728b2bf",
        "sha256": "692424ae1689aec35a9807be4c4e9a01dbe64aad3aacf20d53eeca4811ace424"
      },
      "downloads": -1,
      "filename": "aoj_django_async_messages-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35b18d460990a640a79b86732728b2bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5747,
      "upload_time": "2022-12-10T14:30:11",
      "upload_time_iso_8601": "2022-12-10T14:30:11.679101Z",
      "url": "https://files.pythonhosted.org/packages/03/ba/f5eb6174312ba7bb53add892027187ae64f1e85aa05824d4eb8efbc1016a/aoj_django_async_messages-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}