{
  "info": {
    "author": "Daniel Ecer",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Layered Vision\n\n\nGoals of this project is:\n\n* A tool to allow the composition of images or videos via a configuration file (e.g. as a virtual webcam).\n\nThis project is still very much experimental and may change significantly.\n\n## Install\n\nInstall with all dependencies:\n\n```bash\npip install layered-vision[all]\n```\n\nInstall with minimal dependencies:\n\n```bash\npip install layered-vision\n```\n\nExtras are provided to make it easier to provide or exclude dependencies\nwhen using this project as a library:\n\n| extra name | description\n| ---------- | -----------\n| bodypix    | For [bodypix](https://github.com/de-code/python-tf-bodypix) filter\n| webcam     | Virtual Webcam support via [pyfakewebcam](https://pypi.org/project/pyfakewebcam/)\n| youtube    | YouTube support via [pafy](https://pypi.org/project/pafy/) and [youtube_dl](https://pypi.org/project/youtube_dl/)\n| mediapipe  | Selfie Segmentation using [MediaPipe](https://google.github.io/mediapipe/solutions/selfie_segmentation.html).\n| all        | All of the libraries\n\n## Virtual Webcam For Linux\n\nYou do not need to use a webcam to use the project, as you could feed a video file.\nBut if you do want to use a webcam (currently only supported on Linux), this section provides a bit more information.\n\nOn Linux, `/dev/video0` often refers to the true webcam device.\n\nYou can use [v4l2loopback](https://github.com/umlaeute/v4l2loopback)\nto create a virtual webcam device. e.g. you could `/dev/video2`.\n\nMost applications looking for a webcam should then be able to use that virtual device.\n(Applications might include Chromium, Skype etc.)\n\nOnce installed, you can create `/dev/video2` via the following command:\n\n```bash\nmodprobe v4l2loopback devices=1 video_nr=2 exclusive_caps=1 card_label=\"VirtualCam 1\"\n```\n\nTo create the device after every reboot, you might want to create `/etc/modprobe.d/v4l2loopback.conf`:\n\n```text\noptions v4l2loopback devices=1 video_nr=2 exclusive_caps=1 card_label=\"VirtualCam 1\"\n```\n\n## Configuration\n\nThe configuration format is file is [YAML](https://en.wikipedia.org/wiki/YAML).\n\nThere are a number of [example configuration files](https://github.com/de-code/layered-vision/tree/develop/example-config).\n\n### Layers\n\nEvery configuration file will contain layers. Layers are generally described from top to down.\nWith the last layer usually being the output layer.\n\nThe source to the output layer will be the layer above.\n\nA very simple configuration file that downloads the `numpy` logo and saves it to a file might look like (`example-config/save-image.yml`):\n\n```yaml\nlayers:\n- id: in\n  input_path: \"https://raw.githubusercontent.com/numpy/numpy/v1.20.1/branding/logo/logomark/numpylogoicon.png\"\n- id: out\n  output_path: \"numpy-logo.png\"\n```\n\nYou could also have two outputs (`example-config/two-outputs.yml`):\n\n```yaml\nlayers:\n  - id: in\n    input_path: \"https://raw.githubusercontent.com/numpy/numpy/v1.20.1/branding/logo/logomark/numpylogoicon.png\"\n  - id: out1\n    output_path: \"data/numpy-logo1.png\"\n  - id: out2\n    output_path: \"data/numpy-logo2.png\"\n```\n\nIn that case the source layer for both `out1` and `out2` is `in`.\n\nBy using `window` as the `output_path`, the image is displayed in a window (`example-config/display-image.yml`):\n\n```yaml\nlayers:\n  - id: in\n    input_path: \"https://raw.githubusercontent.com/numpy/numpy/v1.20.1/branding/logo/logomark/numpylogoicon.png\"\n    width: 480\n    height: 300\n    repeat: true\n  - id: out\n    output_path: window\n```\n\n### Input Layer (Source)\n\nA layer that has an `input_path` property.\n\nThe following inputs are currently supported:\n\n| type name | description |\n| -----| ----------- |\n| image | Static image (e.g. `.png`) |\n| video | Video (e.g. `.mp4`) |\n| webcam | Linux Webcam (`/dev/videoN`) |\n| fill | Fills a new image with a color |\n| youtube | YouTube stream (e.g. `https://youtu.be/f0cGgOv3l4c`,  see [example config](https://github.com/de-code/layered-vision/tree/develop/example-config/display-video-bodypix-replace-background-youtube.yml)) |\n| mss | Screen capture using [mss](https://python-mss.readthedocs.io/index.html) (see [example config](https://github.com/de-code/layered-vision/tree/develop/example-config/display-video-bodypix-replace-background-mss.yml)) |\n\nThe `input_path` may point to a remote location (as is the case with [all examples](https://github.com/de-code/layered-vision/tree/develop/example-config)). In that case it will be downloaded and cached locally.\n\nIn most cases the *type name* is inferred from the `input_path`.\nYou can also specify the type explicitly via the `type` property or by prefixing the path, e.g.: `webcam:/dev/video0`.\n\n### Output Layer (Sink)\n\nA layer that has an `output_path` property.\n\nThe following outputs are currently supported:\n\n| type name | description |\n| -----| ----------- |\n| image_writer | Write to a static image (e.g. `.png`) |\n| v4l2 | Linux Virtual Webcam (`/dev/videoN`) |\n| window | Display a window |\n| web | Provide output as JPEG stream |\n\nAs is the case with the `input_path`, in most cases the *type name* is inferred from the `output_path`.\nYou can also specify the type explicitly via the `type` property or by prefixing the path, e.g.: `v4l2:/dev/video2`.\n\n#### Web Stream (Experimental)\n\nThe output may also be provide as a JPEG stream. That way it can be viewed in a browser.\n\nThe following configuration options are supported:\n\n| name | default value | description |\n| ---- | ------------- | ----------- |\n| `host` | `0.0.0.0`   | Host to listen to, `0.0.0.0` to listen on any host. This could also be set to say `127.0.0.1` to prevent the stream from being accessed from another machine.\n| `port` | `8280`      | The port to listen to.\n\nWith the default configuration, opening `http://localhost:8280` will provide a link to the stream.\nThe stream will contineously provide JPEG frames to the browser (as a single request).\n\nCurrently only one stream consumer is supported.\n\n### Filter Layer\n\nA layer that has a `filter` property.\n\nThe following filters are currently supported:\n\n| name | description |\n| -----| ----------- |\n| `box_blur` | Blurs the image or channel. |\n| `bodypix` | Uses the [bodypix](https://github.com/de-code/python-tf-bodypix) model to mask a person. |\n| `chroma_key` | Uses a chroma key (colour) to add a mask |\n| `copy` | Copies the input. Mainly useful as a placeholder layer with `branches`. |\n| `dilate` | Dilates the image or channel. For example to increase the alpha mask after using `erode` |\n| `erode` | Erodes the image or channel. That could be useful to remove outliers from an alpha mask. |\n| `bilateral` | Applies a [bilateral filter](https://en.wikipedia.org/wiki/Bilateral_filter), using `d`, `sigma_color` and `sigma_space` parameters. |\n| `motion_blur` | Adds a motion blur to the image or channel. That could be used to make an alpha mask move more slowly |\n| `mp_selfie_segmentation` | Uses the [MediaPipe's Selfie Segmentation](https://google.github.io/mediapipe/solutions/selfie_segmentation.html) to mask a person (similar to bodypix). |\n| `pixelate` | Pixelates the input. |\n| `fill` | Fills the input or a selected channel with a color / value. e.g. with `color` set to `blue` |\n| `invert` | Inverts the input. e.g. `black` to `white` |\n| `multiply` | Multiplies the input with a constant value. e.g. to adjust the `alpha` channel |\n| `warp_perspective` | Warps the perspective of the input image given a list of `target_points`. e.g. to display it in a corner of the output image |\n\nEvery *filter* may have additional properties. Please refer to the [examples](https://github.com/de-code/layered-vision/tree/develop/example-config) (or come back in the future) for more detailed information. In particular [display-video-segmentation-replace-background-template.yml](https://github.com/de-code/layered-vision/blob/develop/example-config/display-video-segmentation-replace-background-template.yml) provides examples of most filters (often disabled by default).\n\n#### Filter: mp_selfie_segmentation (Experimental)\n\n[MediaPipe's Selfie Segmentation](https://google.github.io/mediapipe/solutions/selfie_segmentation.html) allows background segmentation (similar to bodypix). As it is more optimized, it will usually be faster than using bodypix.\n\nThe following parameters are supported:\n\n| name | default value | description |\n| ---- | ------------- | ----------- |\n| `model_selection` | `1`   | The model to use, `0` or `1` (please refer [MediaPipe's Selfie Segmentation documentation](https://google.github.io/mediapipe/solutions/selfie_segmentation.html#model_selection) for further details).\n| `threshold` | `0.1`      | The threshold for the segmentation mask.\n| `cache_model_result_secs` | `0.0`      | The number of seconds to cache the mask for.\n\n```bash\npython -m layered_vision start \\\n  --config-file \\\n  \"example-config/display-video-segmentation-replace-background-template.yml\" \\\n  --set \"bodypix.enabled=false\" \\\n  --set \"mp_selfie_segmentation.enabled=true\"\n```\n\n### Branches Layer\n\nA layer that has an `branches` property.\nEach *branch* is required to have a `layers` property.\nThe input to each set of *branch layers* is the input to the *branches* layer.\nThe *branches* are then combined (added on top of each other).\nTo make *branches* useful, at least the last *branch image* should have an alpha mask.\n\n### Error Handling\n\nBy default, any error such as an invalid path or filter parameter,\nwill result in an exception being thrown, causing the application to exit.\n\nTo instead display an image, you could define an input layer with the id `on_error`:\n\n```yaml\nlayers:\n  - id: on_error\n    # Source: https://pixabay.com/vectors/test-pattern-tv-tv-test-pattern-152459/\n    input_path: \"https://www.dropbox.com/s/29ycjg9ubht776y/test-pattern-152459_640.png?dl=1\"\n    repeat: true\n  # ...\n```\n\n## CLI\n\n### CLI Help\n\n```bash\npython -m layered_vision --help\n```\n\nor\n\n```bash\npython -m layered_vision <sub command> --help\n```\n\n### Example Command\n\n```bash\npython -m layered_vision start --config-file=example-config/display-image.yml\n```\n\nYou could also load the config from a remote location:\n\n```bash\npython -m layered_vision start --config-file \\\n  \"https://raw.githubusercontent.com/de-code/layered-vision/develop/example-config/display-video-chroma-key-replace-background.yml\"\n```\n\nIt is also possible to override config values via command line arguments, e.g.:\n\n```bash\npython -m layered_vision start --config-file=example-config/display-image.yml \\\n    --set out.output_path=/path/to/output.png\n```\n\nYou could also try replacing the background with a YouTube stream:\n\n```bash\npython -m layered_vision start \\\n  --config-file \\\n  \"https://raw.githubusercontent.com/de-code/layered-vision/develop/example-config/webcam-bodypix-replace-background-to-v4l2loopback.yml\" \\\n  --set bg.input_path=\"https://youtu.be/f0cGgOv3l4c\" \\\n  --set bg.fps=30 \\\n  --set in.input_path=\"/dev/video0\" \\\n  --set out.output_path=\"/dev/video2\"\n```\n\nNote: you may need to specify the fps\n\nIf a local configuration file was specified, the application will attempt to reload it on change.\n\n### Docker Usage\n\nYou could also use the Docker image if you prefer.\nThe entrypoint will by default delegate to the CLI, except for `python` or `bash` commands.\n\n```bash\ndocker pull de4code/layered-vision\n\ndocker run --rm \\\n  --device /dev/video0 \\\n  --device /dev/video2 \\\n  de4code/layered-vision start \\\n  --config-file \\\n  \"https://raw.githubusercontent.com/de-code/layered-vision/develop/example-config/webcam-bodypix-replace-background-to-v4l2loopback.yml\" \\\n  --set bg.input_path=\"https://www.dropbox.com/s/4debg4lrgn5g36l/toy-train-3288425.mp4?dl=1\" \\\n  --set in.input_path=\"/dev/video0\" \\\n  --set out.output_path=\"/dev/video2\"\n```\n\n(Background: [Toy Train](https://www.pexels.com/video/toy-train-3288425/))\n\n## Acknowledgements\n\n* [virtual_webcam_background](https://github.com/allo-/virtual_webcam_background), a somewhat similar project (more focused on bodypix)\n* [OBS Studio](https://obsproject.com/), conceptually a source of inspiration. (with UI etc)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/de-code/layered-vision",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "layered-vision",
    "package_url": "https://pypi.org/project/layered-vision/",
    "platform": null,
    "project_url": "https://pypi.org/project/layered-vision/",
    "project_urls": {
      "Homepage": "https://github.com/de-code/layered-vision"
    },
    "release_url": "https://pypi.org/project/layered-vision/0.0.7/",
    "requires_dist": [
      "Flask (==2.2.2)",
      "mediapipe (>=0.8.7.1)",
      "mss (==7.0.1)",
      "numpy (<1.22.0,>=1.19.3)",
      "opencv-python (==4.7.0.68)",
      "pafy (==0.5.5)",
      "pyfakewebcam (==0.1.0)",
      "PyYAML (==6.0)",
      "tensorflow (==2.11.0)",
      "tf-bodypix[tfjs] (==0.4.2)",
      "youtube-dl (==2021.12.17)"
    ],
    "requires_python": "",
    "summary": "Compose final output(s), out of layers of images, videos or similar.",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16561746,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0469820ab8a887ad3cb2c67e2fbba7bec565080ea26f650fdefa42feb6352097",
          "md5": "c8a1d94f5b276409b3aa43f0c53435cb",
          "sha256": "bf75b442b26c980037fcbf91326b6623752df9815018e8b5ccd8f3c3e92e0dcc"
        },
        "downloads": -1,
        "filename": "layered_vision-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8a1d94f5b276409b3aa43f0c53435cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17361,
        "upload_time": "2020-10-25T03:28:47",
        "upload_time_iso_8601": "2020-10-25T03:28:47.668197Z",
        "url": "https://files.pythonhosted.org/packages/04/69/820ab8a887ad3cb2c67e2fbba7bec565080ea26f650fdefa42feb6352097/layered_vision-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9f974f3fa776014973c4eaa606a893952f342b99b749754564cf79824475e78",
          "md5": "c252fcc65db8c15c059519cb6d64bcec",
          "sha256": "937d46a01d59ab241cf41f98af46920b9a235a4580de9de9ddb8efc63868daea"
        },
        "downloads": -1,
        "filename": "layered-vision-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c252fcc65db8c15c059519cb6d64bcec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17787,
        "upload_time": "2020-10-25T03:28:49",
        "upload_time_iso_8601": "2020-10-25T03:28:49.782363Z",
        "url": "https://files.pythonhosted.org/packages/a9/f9/74f3fa776014973c4eaa606a893952f342b99b749754564cf79824475e78/layered-vision-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ba140191a119e2e32bcf06d60bd50bd596761dfa206b0dfaa0b2ec4620f128b",
          "md5": "dd7135c0b66b7f5b89c23ff30e7390c0",
          "sha256": "36983a3892156c3c43c869b485126d2763406e5cf90505b02a7fb3a978217c87"
        },
        "downloads": -1,
        "filename": "layered_vision-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd7135c0b66b7f5b89c23ff30e7390c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17804,
        "upload_time": "2020-10-30T00:39:12",
        "upload_time_iso_8601": "2020-10-30T00:39:12.604105Z",
        "url": "https://files.pythonhosted.org/packages/9b/a1/40191a119e2e32bcf06d60bd50bd596761dfa206b0dfaa0b2ec4620f128b/layered_vision-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09f3ad9731ade6b7be28e7f0e322924e16497bcffaf2b58ed2ef056dbb46035d",
          "md5": "8b28548f2cde7447836b1e94f57b0659",
          "sha256": "db5d8ddd70c53abb83b2de45cf057746e6a8813b2c9c2cbb5b3b48c6d14ed53b"
        },
        "downloads": -1,
        "filename": "layered-vision-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8b28548f2cde7447836b1e94f57b0659",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18562,
        "upload_time": "2020-10-30T00:39:13",
        "upload_time_iso_8601": "2020-10-30T00:39:13.559642Z",
        "url": "https://files.pythonhosted.org/packages/09/f3/ad9731ade6b7be28e7f0e322924e16497bcffaf2b58ed2ef056dbb46035d/layered-vision-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43811d9c897c1e1b7236799a8521ea278cfbe09484a64586998267dc0733d87e",
          "md5": "2833684d87cc85081e96f77d3224267f",
          "sha256": "703041b1883c6790ea5d32c0b9b1b5011fe0b60941d8847c617c7e93c562fe8f"
        },
        "downloads": -1,
        "filename": "layered_vision-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2833684d87cc85081e96f77d3224267f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20230,
        "upload_time": "2020-12-15T20:46:39",
        "upload_time_iso_8601": "2020-12-15T20:46:39.488319Z",
        "url": "https://files.pythonhosted.org/packages/43/81/1d9c897c1e1b7236799a8521ea278cfbe09484a64586998267dc0733d87e/layered_vision-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecf3629c899484bcb05844eae6fc975c17efab3ac8ca3a79bfc098cbf8c5d150",
          "md5": "8aa7c81757a0c67c21db3c85f0c3f86d",
          "sha256": "0a5153ee5b4c83699699e035665f76f670829cd404fb751001f6a4540c4eb674"
        },
        "downloads": -1,
        "filename": "layered-vision-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8aa7c81757a0c67c21db3c85f0c3f86d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21071,
        "upload_time": "2020-12-15T20:46:40",
        "upload_time_iso_8601": "2020-12-15T20:46:40.306079Z",
        "url": "https://files.pythonhosted.org/packages/ec/f3/629c899484bcb05844eae6fc975c17efab3ac8ca3a79bfc098cbf8c5d150/layered-vision-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "876d5fdab25dbe60165aa3e2516160c2d9ae2404f944f34e8ce91f155459da17",
          "md5": "cc8eaebc44ca845d63ccf2c2b36af34a",
          "sha256": "9378aa9667d97214f5df9a76cf3a120c953a21f720fdbb33b104738a30108878"
        },
        "downloads": -1,
        "filename": "layered_vision-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc8eaebc44ca845d63ccf2c2b36af34a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23061,
        "upload_time": "2021-02-07T14:13:23",
        "upload_time_iso_8601": "2021-02-07T14:13:23.583656Z",
        "url": "https://files.pythonhosted.org/packages/87/6d/5fdab25dbe60165aa3e2516160c2d9ae2404f944f34e8ce91f155459da17/layered_vision-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9aeb7c93eabaaab9579665a2681915d59be290c799c712c45d72da58fc197b1",
          "md5": "2a58efea81eb2b5741da522807e999be",
          "sha256": "3ef18ebb9a31c6a55b2fbbe0383110a2ff067990a0fef98a24e1a601b2709dd7"
        },
        "downloads": -1,
        "filename": "layered-vision-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2a58efea81eb2b5741da522807e999be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24328,
        "upload_time": "2021-02-07T14:13:24",
        "upload_time_iso_8601": "2021-02-07T14:13:24.566589Z",
        "url": "https://files.pythonhosted.org/packages/d9/ae/b7c93eabaaab9579665a2681915d59be290c799c712c45d72da58fc197b1/layered-vision-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df3fded22f45b0c55bd5660dc704c483b3e30b09b504ce465225681b79b9528a",
          "md5": "af05d0d2052a1887b9d0d1676db5fd5a",
          "sha256": "82a7f9d6e7f9bf1153132877030843d4446fb7e69bccae33d76d6a0f733c8911"
        },
        "downloads": -1,
        "filename": "layered_vision-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af05d0d2052a1887b9d0d1676db5fd5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27594,
        "upload_time": "2021-02-09T02:12:04",
        "upload_time_iso_8601": "2021-02-09T02:12:04.790731Z",
        "url": "https://files.pythonhosted.org/packages/df/3f/ded22f45b0c55bd5660dc704c483b3e30b09b504ce465225681b79b9528a/layered_vision-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51e5f11ed72f2e77a6dddaab7055b826a7500d549b1f45fe87fc29ad37ddfd47",
          "md5": "037e3a3b243dfa6f1f05c56cd365c06f",
          "sha256": "d235ae1fc43716611fd6c2a96e8a386152760998b2e3b6f313180276b246327c"
        },
        "downloads": -1,
        "filename": "layered-vision-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "037e3a3b243dfa6f1f05c56cd365c06f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28446,
        "upload_time": "2021-02-09T02:12:05",
        "upload_time_iso_8601": "2021-02-09T02:12:05.625315Z",
        "url": "https://files.pythonhosted.org/packages/51/e5/f11ed72f2e77a6dddaab7055b826a7500d549b1f45fe87fc29ad37ddfd47/layered-vision-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "100813912607b5304d4ef563291725b476af7d39b03395348b67f3df8b2cf9ce",
          "md5": "7c02a0533104f0d4f9d5927442e2822b",
          "sha256": "e23be1e54def7128d3e19009fb754ed7ce11071368dcfcf844e80be3b5d09b22"
        },
        "downloads": -1,
        "filename": "layered_vision-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c02a0533104f0d4f9d5927442e2822b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42317,
        "upload_time": "2021-08-12T22:02:50",
        "upload_time_iso_8601": "2021-08-12T22:02:50.443805Z",
        "url": "https://files.pythonhosted.org/packages/10/08/13912607b5304d4ef563291725b476af7d39b03395348b67f3df8b2cf9ce/layered_vision-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fba2cc71a159b6326fd9ee96f254ed0a257b00e750c1e080d22b7b2a2098ae6",
          "md5": "b4955f0ccca4b07f1a2ab00008628c04",
          "sha256": "7a2ca893d5eed28df7b1a33a3304780ef00c7f8adc7dbf09e44bbbe502d77883"
        },
        "downloads": -1,
        "filename": "layered-vision-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b4955f0ccca4b07f1a2ab00008628c04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40522,
        "upload_time": "2021-08-12T22:02:51",
        "upload_time_iso_8601": "2021-08-12T22:02:51.946367Z",
        "url": "https://files.pythonhosted.org/packages/6f/ba/2cc71a159b6326fd9ee96f254ed0a257b00e750c1e080d22b7b2a2098ae6/layered-vision-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c613779867f4049632b818c4a2ce44bd9bbdd2e7b162c225a42fa68359489f5",
          "md5": "34fe34d9f717a2f710ff46b2f9211ef7",
          "sha256": "fb28a1c35ca165369b746914759dab3a6aa71c0f6441e7940024e9a9b197d14a"
        },
        "downloads": -1,
        "filename": "layered_vision-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34fe34d9f717a2f710ff46b2f9211ef7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43098,
        "upload_time": "2023-01-25T13:08:56",
        "upload_time_iso_8601": "2023-01-25T13:08:56.528919Z",
        "url": "https://files.pythonhosted.org/packages/9c/61/3779867f4049632b818c4a2ce44bd9bbdd2e7b162c225a42fa68359489f5/layered_vision-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2188b43ec72b34b096af19307ecae1b91dac987e78fce12a207190dc3b30110b",
          "md5": "8b596d7f7e1a7b0d67363d1b92fe1d7e",
          "sha256": "bc83ed8012a30932281b47dbcf9ab87b99be35b4cd9a617582ee148222cba409"
        },
        "downloads": -1,
        "filename": "layered-vision-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "8b596d7f7e1a7b0d67363d1b92fe1d7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41511,
        "upload_time": "2023-01-25T13:08:58",
        "upload_time_iso_8601": "2023-01-25T13:08:58.223624Z",
        "url": "https://files.pythonhosted.org/packages/21/88/b43ec72b34b096af19307ecae1b91dac987e78fce12a207190dc3b30110b/layered-vision-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c613779867f4049632b818c4a2ce44bd9bbdd2e7b162c225a42fa68359489f5",
        "md5": "34fe34d9f717a2f710ff46b2f9211ef7",
        "sha256": "fb28a1c35ca165369b746914759dab3a6aa71c0f6441e7940024e9a9b197d14a"
      },
      "downloads": -1,
      "filename": "layered_vision-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34fe34d9f717a2f710ff46b2f9211ef7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 43098,
      "upload_time": "2023-01-25T13:08:56",
      "upload_time_iso_8601": "2023-01-25T13:08:56.528919Z",
      "url": "https://files.pythonhosted.org/packages/9c/61/3779867f4049632b818c4a2ce44bd9bbdd2e7b162c225a42fa68359489f5/layered_vision-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2188b43ec72b34b096af19307ecae1b91dac987e78fce12a207190dc3b30110b",
        "md5": "8b596d7f7e1a7b0d67363d1b92fe1d7e",
        "sha256": "bc83ed8012a30932281b47dbcf9ab87b99be35b4cd9a617582ee148222cba409"
      },
      "downloads": -1,
      "filename": "layered-vision-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "8b596d7f7e1a7b0d67363d1b92fe1d7e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 41511,
      "upload_time": "2023-01-25T13:08:58",
      "upload_time_iso_8601": "2023-01-25T13:08:58.223624Z",
      "url": "https://files.pythonhosted.org/packages/21/88/b43ec72b34b096af19307ecae1b91dac987e78fce12a207190dc3b30110b/layered-vision-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}