{
  "info": {
    "author": "Brian Osborne",
    "author_email": "bosborne@alum.mit.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# Introduction\n\npyTMHMM is a Python 3.5+ implementation of the transmembrane helix\nhidden Markov model ([TMHMM](http://www.cbs.dtu.dk/services/TMHMM/)) originally\ndescribed in:\n\nE\\. L.L. Sonnhammer, G. von Heijne, and A. Krogh. **A hidden Markov model for\npredicting transmembrane helices in protein sequences**. In J. Glasgow,\nT. Littlejohn, F. Major, R. Lathrop, D. Sankoff, and C. Sensen, editors,\nProceedings of the Sixth International Conference on Intelligent Systems for\nMolecular Biology, pages 175-182, Menlo Park, CA, 1998. AAAI Press.\n\n# Why?\n\n[Dan SÃ¸ndergaard](https://github.com/dansondergaard) is the original author of this \npackage and his repository is now [archived](https://github.com/dansondergaard/tmhmm.py). Dan wrote this code for a few reasons:\n\n- the source code is not available as part of the publication\n- the downloadable binaries are Linux-only\n- the downloadable binaries may not be redistributed, so it's not possible to\n  put them in a Docker image or a VM for other people to use\n- the need to predict transmembrane helices on a large dataset, which rules\n  out the Web service\n\nThis Python implementation includes a parser for the undocumented file format\nused to describe the model and a pretty fast Cython implementation of the\nViterbi algorithm used to perform the annotation. The tool will output files\nsimilar to the files produced by the original TMHMM implementation.\n\n# Incompatibilities\n\n* The original TMHMM implementation handles ambigious characters and gaps in an\n  undocumented way. However, `pyTMHMM` does not attempt to handle such\n  characters at all and will fail. A possible fix is to replace those\n  characters with something also based on expert/domain knowledge.\n\n# Installation\n\nThis package supports Python 3.5 or greater. Install with:\n\n    $ pip install pyTMHMM\n\n# Usage\n\n    $ pyTMHMM -h\n      usage: pyTMHMM [-h] -f SEQUENCE_FILE [-m MODEL_FILE] [-p]\n\n      optional arguments:\n        -h, --help            show this help message and exit\n        -f SEQUENCE_FILE, --file SEQUENCE_FILE\n                              path to file in fasta format with sequences\n        -m MODEL_FILE, --model MODEL_FILE\n                              path to the model to use\n        -p, --plot            plot posterior probabilies\n\nThe `-p`/`--plot` option will only be available if `matplotlib` is installed\nand importable.\n\nSay we have the following sequence in FASTA format in a file called `test.fa`:\n\n    >B9DFX7|1B|HMA8_ARATH Copper-transporting ATPase PAA2, chloroplastic  [Arabidopsis thaliana ]\n    MASNLLRFPLPPPSSLHIRPSKFLVNRCFPRLRRSRIRRHCSRPFFLVSNSVEISTQSFESTESSIESVKSITSDTPIL\n    LDVSGMMCGGCVARVKSVLMSDDRVASAVVNMLTETAAVKFKPEVEVTADTAESLAKRLTESGFEAKRRVSGMGVAENV\n    KKWKEMVSKKEDLLVKSRNRVAFAWTLVALCCGSHTSHILHSLGIHIAHGGIWDLLHNSYVKGGLAVGALLGPGRELLF\n    DGIKAFGKRSPNMNSLVGLGSMAAFSISLISLVNPELEWDASFFDEPVMLLGFVLLGRSLEERAKLQASTDMNELLSLI\n    STQSRLVITSSDNNTPVDSVLSSDSICINVSVDDIRVGDSLLVLPGETFPVDGSVLAGRSVVDESMLTGESLPVFKEEG\n    CSVSAGTINWDGPLRIKASSTGSNSTISKIVRMVEDAQGNAAPVQRLADAIAGPFVYTIMSLSAMTFAFWYYVGSHIFP\n    DVLLNDIAGPDGDALALSLKLAVDVLVVSCPCALGLATPTAILIGTSLGAKRGYLIRGGDVLERLASIDCVALDKTGTL\n    TEGRPVVSGVASLGYEEQEVLKMAAAVEKTATHPIAKAIVNEAESLNLKTPETRGQLTEPGFGTLAEIDGRFVAVGSLE\n    WVSDRFLKKNDSSDMVKLESLLDHKLSNTSSTSRYSKTVVYVGREGEGIIGAIAISDCLRQDAEFTVARLQEKGIKTVL\n    LSGDREGAVATVAKNVGIKSESTNYSLSPEKKFEFISNLQSSGHRVAMVGDGINDAPSLAQADVGIALKIEAQENAASN\n    AASVILVRNKLSHVVDALSLAQATMSKVYQNLAWAIAYNVISIPIAAGVLLPQYDFAMTPSLSGGLMALSSIFVVSNSL\n    LLQLHKSETSKNSL\n\nWe can then run `pyTMHMM` on this file using the following command:\n\n    $ pyTMHMM -f test.fa\n\nThis produces three files. One is the summary:\n\n    $ cat B9DFX7|1B|HMA8_ARATH.summary\n    0-444: outside\n    445-467: transmembrane helix\n    468-820: inside\n    821-843: transmembrane helix\n    844-852: outside\n    853-870: transmembrane helix\n    871-882: inside\n\nAn annotation in FASTA format:\n\n    $ cat B9DFX7|1B|HMA8_ARATH.annotation\n    >B9DFX7|1B|HMA8_ARATH Copper-transporting ATPase PAA2, chloroplastic  [Arabidopsis thaliana ]\n    OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\n    OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\n    OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\n    OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\n    OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\n    OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOMMMMMMMMMMMMMMMMMMMMMMMiiiiii\n    iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\n    iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\n    iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\n    iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\n    iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiMMMMMMMMMMMMMMMMMMMMMMMoooooooooMMMMMMMMMMMMMMMM\n    MMiiiiiiiiiiii\n\nAnd finally a file containing the posterior probabilities for each label for\nplotting.\n\n    $ cat B9DFX7|1B|HMA8_ARATH.plot\n    inside membrane outside\n    0.20341044516 0.0 0.79658955484\n    0.210104176071 2.77194446172e-08 0.78989579621\n    0.189291062167 3.11365191554e-08 0.810708906697\n    0.253334801857 7.17866017044e-07 0.746664480277\n    0.126185012808 1.34197873962e-05 0.873801567405\n    ...\n\nIf the `-p` flag is set a plot in PDF format will also be produced, following\nthe same naming scheme as the other output files.\n\n# API\n\nYou can also use `pyTMHMM` as a library:\n\n    import pyTMHMM\n    annotation, posterior = pyTMHMM.predict(sequence_string)\n\nThis returns the annotation as a string and the posterior probabilities for\neach label as a numpy array with shape `(len(sequence), 3)` where column 0, 1\nand 2 corresponds to being inside, transmembrane and outside, respectively.\n\nIf you don't need the posterior probabilities set `compute_posterior=False`,\nthis will save computation:\n\n    annotation = pyTMHMM.predict(\n        sequence_string, compute_posterior=False\n    )",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bosborne/pyTMHMM/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyTMHMM",
    "package_url": "https://pypi.org/project/pyTMHMM/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyTMHMM/",
    "project_urls": {
      "Homepage": "https://github.com/bosborne/pyTMHMM/"
    },
    "release_url": "https://pypi.org/project/pyTMHMM/1.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A transmembrane helix finder.",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9111079,
  "releases": {
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad370e48e7dbcc57a331409c06fc4a5b5471c05f3edfd4a239c2d6a9b3e9d776",
          "md5": "1514c1b247797a490229655670c2b64b",
          "sha256": "f4c1c82994f3e02e0f8e9f8a56770e88642f79005f12830ea9d09be9e948f91f"
        },
        "downloads": -1,
        "filename": "pyTMHMM-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1514c1b247797a490229655670c2b64b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16951,
        "upload_time": "2021-01-12T03:04:13",
        "upload_time_iso_8601": "2021-01-12T03:04:13.228856Z",
        "url": "https://files.pythonhosted.org/packages/ad/37/0e48e7dbcc57a331409c06fc4a5b5471c05f3edfd4a239c2d6a9b3e9d776/pyTMHMM-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad370e48e7dbcc57a331409c06fc4a5b5471c05f3edfd4a239c2d6a9b3e9d776",
        "md5": "1514c1b247797a490229655670c2b64b",
        "sha256": "f4c1c82994f3e02e0f8e9f8a56770e88642f79005f12830ea9d09be9e948f91f"
      },
      "downloads": -1,
      "filename": "pyTMHMM-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1514c1b247797a490229655670c2b64b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16951,
      "upload_time": "2021-01-12T03:04:13",
      "upload_time_iso_8601": "2021-01-12T03:04:13.228856Z",
      "url": "https://files.pythonhosted.org/packages/ad/37/0e48e7dbcc57a331409c06fc4a5b5471c05f3edfd4a239c2d6a9b3e9d776/pyTMHMM-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}