{
  "info": {
    "author": "Pedram Dadkhah",
    "author_email": "Pedram.Dadkhah1374@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# K Immediate Neighbors\nK Immediate Neighbors or **KIN** is a machine learning algorithm inspired by KNN (K Nearest Neighbors) which has been adjusted to graph-structured data. Instead of asking k nearest neighbors of a test *sample* in euclidean space about the label, it asks the k immidiate neighbors of a test *node* in graph.\\\nYou can use KIN in problems where it is possible to **model your data as graph** and **classify the nodes**.\n\n## Installation:\nYou can install the package using pip with the following commad:\n```\npip install GML_KIN\n```\n\n## Usage:\n```\nclass KIN(k=0, num_edge_types=1, edge_weights=[1], validation_size=0.1, random_state=42)\n```\n\n### Parameters:\n**k: *int, default=0***\\\nMaximum number of immediate neighbors to ask about the label. In case of num_neighbors > k, asks the ones with the highest weight on their respective edge.\\\nIf k=0, asks all immediate neighbors.\n\n**num_edge_types: *int, default=1***\\\nYou can define multiple edge types with KIN. For example if you want to classify books, you might have edge types: same_author, same_genre, same_price_range, belonging_to_same_series, ...\\\nThis parameter represents the count of your different edge types.\\\nNote that later these types will be identified with numbers ranging from 0 to num_edge_types-1\n\n**edge_weights: *list, default=[1]***\\\nThis shows the importance of different edge types in terms of classification.\\\nIf you leave this parameter with its default value, KIN will learn these weights based on your training input graph. Its highly recommended to leave this parameter *as is*, but if you want to input customized weights of importance for your edge types feel free to use it.\\\nNote that each weight is a float, len(edge_weights) should be equal to num_edge_types and sum(edge_weights) should be 1.0\\\n**Do not confuse this with actual weights of edges.**\n\n**validation_size: *float, default=0.1***\\\nThis parameter will be ignored if you use *edge_weights* manually. If not, will be used to select a portion of nodes to evaluate edge_weights based on your training input graph. Gives best answer when set to 1.0 and applied to a balanced dataset.\n\n**random_state: *int, default=42***\\\nControls the pseudo random number generation for choosing the validation nodes.\n\n### Methods:\n```\nfit(X_train, y_train)\n```\nFits the KIN model according to the given training data.\\\n***X_train:*** **3 dimensional list**, second dimension represents nodes and the third one represents the edges. The first 2 dimensional list represents the node with index=0, the second one represents the node with index=1 and so on. Inside these 2 dimensional lists which represent nodes, there are 1 dimensional lists which represent edges connected from the respective node to the other nodes in this format: [destination_node, edge_weight, edge_type]\\\nOverall, the shape of X_train looks like this: (N, Mi, 3)\\\nN: Total count of nodes.\\\nMi: Count of exiting edges from Node with index i.\\\n**Please refer to the example below for better understanding.**\\\nNote that if you want to implement an undirected edge between nodes p and q, you should create one edge from p to q and one edge from q to p.\\\n***y_train:*** **1 dimensional list** representing the respective labels of nodes in X_train. Please use numbers as representatives.\n\n```\npredict(X_test)\n```\nPerforms classification on samples in X_test.\nX_test has same the structure as X_train.\n\n```\nscore(X_test, y_test, measure='accuracy')\n```\nReturns the accuracy on the given test data and labels.\\\nIn this version only *accuracy* is supported, I'll add more measures in later releases.\n\n## Example:\n![Sample graph](https://raw.githubusercontent.com/PinaxX/KIN/main/sample_graph.jpg)\nBlack edges are type 0.\\\nYou can see the code represtation of this graph in the section below.\n\n#### Sample code:\n```python\nfrom GML_KIN import KIN\n\n\nX_train = [[[2, 1, 0], [3, 2, 1], [4, 1, 1]],                       #node 0\n           [[0, 1, 0], [2, 1, 1], [5, 1, 0], [6, 2, 0]],            #node 1\n           [[5, 1, 1], [6, 1, 1]],                                  #node 2\n           [[4, 1, 1], [8, 1, 0], [9, 1, 0]],                       #node 3\n           [[3, 1, 1], [5, 1, 0], [9, 1, 0]],                       #node 4\n           [[6, 1, 1], [9, 1, 0]],                                  #node 5\n           [[1, 1, 1], [5, 1, 1], [7, 1, 0]],                       #node 6\n           [[8, 1, 1]],                                             #node 7\n           [[7, 1, 0]],                                             #node 8\n           [[1, 1, 1], [8, 1, 1]]]                                  #node 9\ny_train = [0, 1, 1, 0, 0, 1, 1, 0, 0, 1]\n\nX_test = [[[1, 1, 1], [7, 1, 0]],                                   #test node 10\n          [[0, 1, 1], [4, 1, 0], [9, 1, 1]]]                        #test node 11\ny_test = [1, 0]\n\nkin_clf = KIN(k=2, num_edge_types=2, validation_size=0.3, random_state=42)\nkin_clf.fit(X_train, y_train)\nprint('Accuracy: ', kin_clf.score(X_test, y_test, measure='accuracy'))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PinaxX/KIN",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GML-KIN",
    "package_url": "https://pypi.org/project/GML-KIN/",
    "platform": "",
    "project_url": "https://pypi.org/project/GML-KIN/",
    "project_urls": {
      "Homepage": "https://github.com/PinaxX/KIN"
    },
    "release_url": "https://pypi.org/project/GML-KIN/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "KIN (K Immediate Neighbors) is a machine learning algorithm inspired by KNN (K Nearest Neighbors) which has been adjusted to graph-structured data.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8749503,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "948383836cec1a2757ed7face487a4cbbca775912b1b89cc0eb3c8053d8c5825",
          "md5": "49b46a5e49d6a0118c94832b7d499518",
          "sha256": "9046554a125d51ca175ae0b65f7e78a2c5dcf63d03381cddaadfc08a711e2b4e"
        },
        "downloads": -1,
        "filename": "GML_KIN-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49b46a5e49d6a0118c94832b7d499518",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3063,
        "upload_time": "2020-11-25T09:49:43",
        "upload_time_iso_8601": "2020-11-25T09:49:43.725625Z",
        "url": "https://files.pythonhosted.org/packages/94/83/83836cec1a2757ed7face487a4cbbca775912b1b89cc0eb3c8053d8c5825/GML_KIN-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b00e8d4a1c3c316b96ee49613772a7a89e9877e24ae825859bec2b0b20da2086",
          "md5": "9b8956871748622e7ada747764a8a87d",
          "sha256": "c55e52964781e5687203695e5ed12ae73bc88e106c13e5ae54b9f63cda846c65"
        },
        "downloads": -1,
        "filename": "GML_KIN-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9b8956871748622e7ada747764a8a87d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2101,
        "upload_time": "2020-11-25T09:49:45",
        "upload_time_iso_8601": "2020-11-25T09:49:45.002500Z",
        "url": "https://files.pythonhosted.org/packages/b0/0e/8d4a1c3c316b96ee49613772a7a89e9877e24ae825859bec2b0b20da2086/GML_KIN-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d916f990cfcf1bbe2c4a078e878d32b5ec67456e1a9fbe75ee4efa0670dd339",
          "md5": "37034fe314a140d762ba9626851d1826",
          "sha256": "9a7526485bb2fb069c8ae65b9ddb99dc7323f0f16dd60ba68f1112815f7a9959"
        },
        "downloads": -1,
        "filename": "GML_KIN-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37034fe314a140d762ba9626851d1826",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5187,
        "upload_time": "2020-11-25T20:40:39",
        "upload_time_iso_8601": "2020-11-25T20:40:39.971996Z",
        "url": "https://files.pythonhosted.org/packages/4d/91/6f990cfcf1bbe2c4a078e878d32b5ec67456e1a9fbe75ee4efa0670dd339/GML_KIN-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "638f8653c57aa7e840cb831d92d50e6b7757c106e86638efb16d25535bbe9855",
          "md5": "ecaf505d7b2feb712a27c194eade5bbd",
          "sha256": "faed02f4944c551114eba911b6ec874621118c6633fcf9fac85c95b2c5b00f7f"
        },
        "downloads": -1,
        "filename": "GML_KIN-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ecaf505d7b2feb712a27c194eade5bbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4583,
        "upload_time": "2020-11-25T20:40:41",
        "upload_time_iso_8601": "2020-11-25T20:40:41.249644Z",
        "url": "https://files.pythonhosted.org/packages/63/8f/8653c57aa7e840cb831d92d50e6b7757c106e86638efb16d25535bbe9855/GML_KIN-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d916f990cfcf1bbe2c4a078e878d32b5ec67456e1a9fbe75ee4efa0670dd339",
        "md5": "37034fe314a140d762ba9626851d1826",
        "sha256": "9a7526485bb2fb069c8ae65b9ddb99dc7323f0f16dd60ba68f1112815f7a9959"
      },
      "downloads": -1,
      "filename": "GML_KIN-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "37034fe314a140d762ba9626851d1826",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5187,
      "upload_time": "2020-11-25T20:40:39",
      "upload_time_iso_8601": "2020-11-25T20:40:39.971996Z",
      "url": "https://files.pythonhosted.org/packages/4d/91/6f990cfcf1bbe2c4a078e878d32b5ec67456e1a9fbe75ee4efa0670dd339/GML_KIN-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "638f8653c57aa7e840cb831d92d50e6b7757c106e86638efb16d25535bbe9855",
        "md5": "ecaf505d7b2feb712a27c194eade5bbd",
        "sha256": "faed02f4944c551114eba911b6ec874621118c6633fcf9fac85c95b2c5b00f7f"
      },
      "downloads": -1,
      "filename": "GML_KIN-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ecaf505d7b2feb712a27c194eade5bbd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4583,
      "upload_time": "2020-11-25T20:40:41",
      "upload_time_iso_8601": "2020-11-25T20:40:41.249644Z",
      "url": "https://files.pythonhosted.org/packages/63/8f/8653c57aa7e840cb831d92d50e6b7757c106e86638efb16d25535bbe9855/GML_KIN-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}