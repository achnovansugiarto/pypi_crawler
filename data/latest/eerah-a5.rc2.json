{
  "info": {
    "author": "Philipp Fischer",
    "author_email": "fischer-philipp@gmx.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# APBC 2021\n---------------------------------------------------------------------\n270056 Algorithmen und Programmentwicklung f√ºr die Biologische Chemie\n---------------------------------------------------------------------\n(Algorithms and program development for biological chemistry) \n\nUsage eerah_A5 [-A* <parameters> ] [inputfile]\n\n\n\n\n* Mar-03-2021 (A0 and A1) --- Word Count\n  e.g eerah_A5 -A1 -l -i <inputfile>\n    * [-l (list of words)]\n    * [-I ignore case]\n    * [inputfile]\n\n* Mar-10-2021 (A2) --- Optimization\n  e.g eerah_A5 -A2 -o <inputfile>\n    * [-o  optimize the cost (instead of enumerating)]\n    * [inputfile]\n\n* Mar-24-2021 (A3) --- Dynamic programming\n  e.g eerah_A5 -A3 -d <inputfile>\n    * [-t trace  prints one optimal solution]\n    * [-d use diagonal elements]\n    * [inputfile]\n\n* Apr-14-2021 (A4) --- Random Sequences\n  e.g eerah_A5 -A4 -N 4 -K 3 KLetShuffle <inputfile>\n    * [RollingDive, MonoShuffle, KLettShuffle]\n    * [-N number of output sequences]\n    * [-k for KLetShuffle - klet frequency]\n    * [inputfile]\n\n\n##A1\nWrite a program that reads in a text (file name given on the command\nline) and counts the total number of words and the number of different\nwords. On request, the program should print a list of the words.\n\n* If option -I (for 'Ignore') is given, case shall be ignored (by\n  converting all upper case to lower case, see below).\n\n* If option -l (for 'list') is present, the program must print a list\n  of words instead only counts.  This list must be sorted by word\n  frequency, starting with the most common words.  ( per line print\n  one word and its frequency, separated by a tab symbol; in case of\n  equal frequencies, the words must be sorted alphabetically.). Please\n  have a look at the example inputs and outputs; your program should\n  produce outputs in exactly the same format.\n\n##A2\n### Optimizing the administration of Atirasu\n\nThe government of the federal state Atirasu plans to modernize its administration by creating four new authorities for generally\nunremarkable affairs.\nThese authorities shall be distributed to the capitals of eight\nprovinces such that each two provinces share one authority.\nConsequently, the set of capitals\n\n```\n  {B,E,G,I,K,L,P,S}\n```\n\nshall be partitioned into four subsets of two elements each.\n\nThe cost of a partition is calculated as sum over the costs per\nauthority, where the cost per authority depends on the two assigned\ncities and can be read from the following matrix (in million Euros /\nyear). For example, putting authority 1 in charge of the provinces\nwith capitals B and I costs 2 million Euros per year.\n\n```\n  8 10                     # number of capitals; cost limit\n   B  E  G  I  K  L  P  S  # names of capitals\n   - 10 10  2 10 10 10 10  # symmetric cost matrix\n  10  -  2 10 10 10  1 10\n  10  2  - 10  2  3  3  3\n   2 10 10  -  4 10 10  2\n  10 10  2  4  - 10 10  3\n  10 10  3 10 10  -  2  2\n  10  1  3 10 10  2  - 10\n  10 10  3  2  3  2 10  -\n```\n\nThe federal government can provide 10 million Euros per year; it wants to\nknow all the possible combinations that don't exceed this cost limit.\n\nThe output lists like:\n\n```\n  BE GI KL SP\n```\n\nWhen given the flag -o, the program must optimize the cost (instead\nof enumerating). The cost limit should be used as initial bound. As\nresult it print the score of the best solution.\n\n\n##A3\n###dynamic programming.\nThe Manhattan Tourist Problem:\n------------------------------\n\nThe street network of Manhattan has the form of a grid. Our tourist values streets (from crossing to crossing) by the number of sights along them.\n\n```\n       start here\n       |\n       v\n       +--3--+--3--+\n       |     |     |\n       1     6     2\n       |     |     |\n       +--3--+--2--+\n       |     |     |\n       4     0     7\n       |     |     |\n       +--5--+--7--+\n                   ^\n                   |\n                  end here\n```\n\nThe problem is to find a path from the top left to the bottom right corner of the grid with maximum weight. In each step, the tourist moves either to the east or to the south.\n\nThe program reads <inputfile> as followed:\n\n```\n     # size (north-south dimension times west-east dimension)\n     # 3 3\n     # north-south streets\n     1 6 2\n     4 0 7\n     # west-east streets\n     3 3\n     3 2\n     5 7\n```\n\n\n```\n#G_down: 4 5\n  0.60   0.65   0.91   0.94   0.14\n  0.85   0.27   0.70   0.31   0.63\n  0.63   0.23   0.35   0.77   0.20\n  0.37   0.76   0.41   0.30   0.67\n#---\n#G_right: 5 4\n  0.76   0.41   0.72   0.13\n  0.57   0.64   0.62   0.62\n  0.37   0.98   0.36   0.24\n  0.99   0.77   0.39   0.35\n  0.37   0.34   0.62   0.82\n#---\n#G_diag: 4 4\n  6.74   7.03   2.47   6.25\n  4.48   3.75   2.98   3.62\n  7.90   3.63   3.67   3.18\n  9.30   8.40   9.02   2.58\n#---\n```\n\n##A4\n###Generating random sequences \n\nCreate a random sequence based on either RollingDive, MonoShuffle or KLetShuffle  (k-mer\nfrequencies).\n\n## Random sequences (preserving the frequencies of the single symbols):\n\n### Rolling dice:\n\nThe program reads in a  sequence and determines the\nfrequencies of its symbols. Then, it generates N random sequences of\nthe same length, where symbols are drawn at random with the same\nfrequencies. \n\nHere is an example of input, frequencies and possible output\nsequences.\n\n```\n      CUUUUGCUAG\n\n          |\n\t  V\n\n      A => 0.1             UGUACGCUGA\n      C => 0.2    -----\\   ACCUUCAUCU\n      G => 0.2    -----/   UCUUCCUCCC\n      U => 0.5             GUGCAUUUGU\n```\n\n### MonoShuffle:\n\nThe program reads in a sequence and generates random\nsequences by randomly shuffling (i.e. swapping symbols of) the input\nsequence.\n\ne.g\nFor input of length n, perform exactly n-1 swaps like in this example\ntrace of an algorithm run:\n\n```\n      C <-+ G     G     G     G     G     G     G     G     G\n      U   | U <-+ C     C     C     C     C     C     C     C\n      U   | U   | U <-+ U     U     U     U     U     U     U\n      U   | U   | U   | U <-+ C     C     C     C     C     C\n      U   | U   | U <-+ U   | U <-+ G     G     G     G     G\n      G <-+ C <-+ U     U   | G   | G <-+ A     A     A     A\n      C     C     C     C <-+ U   | U   | U <-+ G     G     G\n      U     U     U     U     U   | U   | U   | U <-+ U     U\n      A     A     A     A     A   | A <-+ G <-+ U   | U <-+ U\n      G     G     G     G     G <-+ U     U     U <-+ U <-+ U\n```\n\nRemark: this method produces permutations of the input, preserving the\nfrequencies of symbols in the input exactly; pay attention to produce\neach possible permutation with the same probability. This method is\nknown as Fisher-Yates or Knuth shuffling.\n\n\n## K-let-Shuffling (Shuffling preserving k-let frequencies)\n\nThe program reads in a sequence and generates random\nsequences that preserve the k-let frequencies of the original\nsequence. The _k-lets_ of a sequence s are its subsequences\ns[i..i+k-1] of length $k$ (e.g. for dinucleotide frequencies, we\nconsider the 2-lets).\n\nThe k-let shuffling algorithm (for k>=2) works as follows\n\n1. Determine all subsequences s[i..i+k-2] (of length k-1) of the\n   input sequence s. \n\n2. These subsequences (the (k-1)-lets of s) form the vertices of\n   a graph (which initially has no edges).\n\n```\n     CUUUUGCUAG               \n\n         | for k=2             \n         V                      \n\n        A     U                  \n\n\n\n         G    C                    \n```\n\n3. Run through the original sequence and insert an edge between\n   each successive (k-1)-lets. Note that two (k-1)-lets could\n   occur several times in direct succession; in this case, one\n   must record an additional edge for each occurrence. (Thus, we\n   construct a a _multi_-graph.)\n\n```\n\t CUUUUGCUAG                      +-----+\n                                         |+---+|\n             | for k=2                   ||+-+||\n\t     V                           ||| |||\n\t                                 vvv |||\n\t    A     U                  A<---U--+++\n                             ->      |  / ^^\t\n\t                             | /  ||\t\n\t\t\t\t     vv   ||\t\n\t     G    C                   G-->C     \n```\n\n4.  Each Euler-path in this multigraph corresponds to a shuffled\n    version of the original sequence; this shuffled sequence\n    preserves the k-let frequencies!  Recall: Euler-paths are\n    paths that contain each edge of the graph exactly once (but\n    can visit some vertices more than once.)\n\n5.  The true art is to find a method that randomly selects\n    Euler-paths, such that each Euler-path is selected with equal\n    probability (meaning uniform distribution of shuffled\n    sequences).\n\n    The following two papers present solutions to this problem:\n\n    1. Kandel D et al (1996) Shuffling biological sequences.\n       Discrete Appl Math 71:171-185\n       [doi:10.1016/S0166-218X(97)81456-4](https://doi.org/10.1016/S0166-218X(97)81456-4)\n\n    2. Jiang M et al (2008) uShuffle: a useful tool for shuffling\n       biological sequences while preserving the k-let counts.\n       BMC Bioinformatics 9:192\n       [doi:10.1186/1471-2105-9-192](https://doi.org/10.1186/1471-2105-9-192)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "APBC2021,python3",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eerah-A5",
    "package_url": "https://pypi.org/project/eerah-A5/",
    "platform": "",
    "project_url": "https://pypi.org/project/eerah-A5/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/eerah-A5/0.0.47/",
    "requires_dist": [
      "numpy",
      "pandas"
    ],
    "requires_python": ">=3.6",
    "summary": "Contains programs for the course Algorithmen und Programmentwicklung f√ºr die Biologische Chemie",
    "version": "0.0.47",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10390826,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a466fa9465db0f7680bde1706bbce774440dc70ba5d2009ea07a3baf5c2d4f36",
          "md5": "b0e97abd407ffe48afe1b8c79531a14a",
          "sha256": "fb7fe17a377ef85d7ed7a58f60b332d469576aabe772c2508cc4914c3fa7c2cc"
        },
        "downloads": -1,
        "filename": "eerah_A5-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0e97abd407ffe48afe1b8c79531a14a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14778,
        "upload_time": "2021-05-18T11:42:45",
        "upload_time_iso_8601": "2021-05-18T11:42:45.014978Z",
        "url": "https://files.pythonhosted.org/packages/a4/66/fa9465db0f7680bde1706bbce774440dc70ba5d2009ea07a3baf5c2d4f36/eerah_A5-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80841c77e4429aded75e25c774e30363a9280edc487dbf4750c77ce6745ffc9d",
          "md5": "0bfbbd3d0534226b0a6c4d456a6adb68",
          "sha256": "d479f1a9ae7f55815c290c64b672f8cec9276d0d05db9a1bf021b5c1369cd3ab"
        },
        "downloads": -1,
        "filename": "eerah-A5-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0bfbbd3d0534226b0a6c4d456a6adb68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16004,
        "upload_time": "2021-05-18T11:42:46",
        "upload_time_iso_8601": "2021-05-18T11:42:46.653400Z",
        "url": "https://files.pythonhosted.org/packages/80/84/1c77e4429aded75e25c774e30363a9280edc487dbf4750c77ce6745ffc9d/eerah-A5-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.47": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bd4f198e07386c751ac70a5493e05227cee03ce70383a7172855d1c809fe4da",
          "md5": "3e668e670324c78af6a2b2ecf89a0607",
          "sha256": "f1fba549eb4427ca9a62ac1c927383e7edac0a6c8abdd6361b8808a51396ef5d"
        },
        "downloads": -1,
        "filename": "eerah_A5-0.0.47-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e668e670324c78af6a2b2ecf89a0607",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14791,
        "upload_time": "2021-05-18T11:41:38",
        "upload_time_iso_8601": "2021-05-18T11:41:38.994178Z",
        "url": "https://files.pythonhosted.org/packages/7b/d4/f198e07386c751ac70a5493e05227cee03ce70383a7172855d1c809fe4da/eerah_A5-0.0.47-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a566b5e5a2bc50f23bc6d235dc181fee9fb385175202e788e441e18dd275d944",
          "md5": "fb805b45770753bd950cb75fa4b39e58",
          "sha256": "63b415d186a62267deadb494b6db43900c4c4597d1011da4273b0cae5f815e41"
        },
        "downloads": -1,
        "filename": "eerah-A5-0.0.47.tar.gz",
        "has_sig": false,
        "md5_digest": "fb805b45770753bd950cb75fa4b39e58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16010,
        "upload_time": "2021-05-18T11:41:40",
        "upload_time_iso_8601": "2021-05-18T11:41:40.750087Z",
        "url": "https://files.pythonhosted.org/packages/a5/66/b5e5a2bc50f23bc6d235dc181fee9fb385175202e788e441e18dd275d944/eerah-A5-0.0.47.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bd4f198e07386c751ac70a5493e05227cee03ce70383a7172855d1c809fe4da",
        "md5": "3e668e670324c78af6a2b2ecf89a0607",
        "sha256": "f1fba549eb4427ca9a62ac1c927383e7edac0a6c8abdd6361b8808a51396ef5d"
      },
      "downloads": -1,
      "filename": "eerah_A5-0.0.47-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e668e670324c78af6a2b2ecf89a0607",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14791,
      "upload_time": "2021-05-18T11:41:38",
      "upload_time_iso_8601": "2021-05-18T11:41:38.994178Z",
      "url": "https://files.pythonhosted.org/packages/7b/d4/f198e07386c751ac70a5493e05227cee03ce70383a7172855d1c809fe4da/eerah_A5-0.0.47-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a566b5e5a2bc50f23bc6d235dc181fee9fb385175202e788e441e18dd275d944",
        "md5": "fb805b45770753bd950cb75fa4b39e58",
        "sha256": "63b415d186a62267deadb494b6db43900c4c4597d1011da4273b0cae5f815e41"
      },
      "downloads": -1,
      "filename": "eerah-A5-0.0.47.tar.gz",
      "has_sig": false,
      "md5_digest": "fb805b45770753bd950cb75fa4b39e58",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16010,
      "upload_time": "2021-05-18T11:41:40",
      "upload_time_iso_8601": "2021-05-18T11:41:40.750087Z",
      "url": "https://files.pythonhosted.org/packages/a5/66/b5e5a2bc50f23bc6d235dc181fee9fb385175202e788e441e18dd275d944/eerah-A5-0.0.47.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}