{
  "info": {
    "author": "John Ford, Clark Jeffries, Diana Perkins",
    "author_email": "JoRuFo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# CALF v1.17.0 README\n\n\n# Setup and Usage\nYou can install CALF by running `pip install calfpy`\n\nYou can import all CALF functions by using the folliwng import statement  \n`import caflpy.methods`\n\nCalling a function (example)\n`calfpy.methods.calf(data, 3, \"binary\", optimize = 'pval', verbose = False)`  \n\n# Library Documentation\n\n## *calf(data, nMarkers, targetVector, optimize = 'pval', verbose = False)*  \n\nCoarse Approximation Linear function.  The main function used to invoke the CALF algorithm on a dataset.  \n\nparameter | description | type\n--------- | ------------| --------\ndata | Data frame where first column contains case/control coded variable (0/1) if targetVector is binary or real values if targetVector is nonbinary | *pandas DataFrame*\nnMarkers | Maximum number of markers to include in creation of sum. | *int*\ntargetVector | Set to \"binary\" to indicate data with a target vector (first column) having case/control characteristic.  Set to \"nonbinary\" for target vector (first column) with real numbers. | *string*\noptimize | Criteria to optimize.  Allowed values are \"pval\", \"auc\", for a binary target vector, or \"corr\" for a nonbinary target vector. | *string*\nverbose| True to print activity at each iteration to console. Defaults to False. | *bool*\n\n#### **returns**\n\nA dictionary composed of the following results from CALF:\n\nkey | description/value\n--- | -----------\nselection | The markers selected with their assigned weight (-1 or 1).\nauc | The AUC determined during running CALF.  AUC can be provided for given markers AUC represented for selected markers will only be optimal if set to optimzie for AUC.\nrandomize | False\nproportion | Undefined\ntargetVec | Target vector argument given in the function call, 'rocPlot': Receiver operating curve plot, if applicable for dataset type and optimizer supplied. \nfinalBest | The optimal value for the provided optimization type, e.g. if optimize='pval\" this will have the calculated p-value for the run.\noptimize | The optimizer argument given in the function call.  \n\n\n\n## *calf_fractional(data, nMarkers, controlProportion = .8, caseProportion = .8, optimize = \"pval\", verbose = False)* \n\nRandomly selects from binary input provided to data parameter while ensuring the requested proportions of case and control variables are used and runs Coarse Approximation Linear Function  \n\nparameter | description | type\n--------- | ------------| --------\ndata | Data frame where first column contains case/control coded variables (0/1) (binary data). | *pandas DataFrame*\nnMarkers | Maximum number of markers to include in creation of sum. | *int*\ncontrolProportion | Proportion of control samples to use, default is .8. | *float*\ncaseProportion | Proportion of case samples to use, default is .8. | *float*\noptimize | Criteria to optimize.  Allowed values are \"pval\" or \"auc\". | *string*\nverbose | True to print activity at each iteration to console. Defaults to False.| *bool*\n#### **returns**\n\nA dictionary composed of the following results from CALF:\n\nkey | description/value\n--- | -----------\nselection | The markers selected each with their assigned weight (-1 or 1).\nauc |  The AUC determined during running CALF.  AUC can be provided for given markers AUC represented for selected markers will only be optimal if set to optimzie for AUC.\nrandomize | False\nproportion | The proportions of case an control applied druing the function run.\ntargetVec | \"binary\"\nrocPlot | Receiver operating curve plot, if applicable for dataset type and optimizer supplied.\nfinalBest | The optimal value for the provided optimization type, e.g. if optimize='pval\" this will have the calculated p-value for the run.\noptimize | The optimizer argument given in the function call.\n\n\n\n## *calf_randomize(data, nMarkers, targetVector, times = 1, optimize = \"pval\", verbose = False)*\n\nRandomly selects from input provided to data parameter and runs Coarse Approximation Linear Function  \n\nparameter | description | type\n--------- | ------------| --------\n data | Data frame where first column contains case/control coded variable (0/1) if targetVector is binary or real values if targetVector is nonbinary | *pandas DataFrame*\nnMarkers | Maximum number of markers to include in creation of sum. | *int*\ntimes | Indicates the number of replications to run with randomization. | *int*\noptimize | Criteria to optimize.  Allowed values are \"pval\", \"auc\", for a binary target vector, or \"corr\" for a nonbinary target vector. | *string*\nverbose | True to print activity at each iteration to console. Defaults to False.| *bool*\n#### **returns**\n\nA dictionary composed of the following results from CALF:\n\nkey | description/value\n--- | -----------\nmultiple | The markers chosen and the number of times they were selected per iteration,\nauc | The AUC determined during running CALF.  AUC can be provided for given markers AUC represented for selected markers will only be optimal if set to optimzie for AUC,\nrandomize | True\ntargetVec | \"binary\"\naucHist | A historgram of the AUC values calcuted for all the iterations,\ntimes | The value provided to the times parameter when the function was called,\nrocPlot | Receiver operating curve plot, if applicable for dataset type and optimizer supplied, \nfinalBest | The optimal value for the provided optimization type, e.g. if optimize='pval\" this will have the calculated p-value for the run,\noptimize | The optimizer argument given in the function call,\nverbose | The value supplied to the verbose parameter when the function was called\n\n\n\n## *calf_subset (data, nMarkers, targetVector, proportion = .8, times = 1, optimize = \"pval\", verbose = False)*\nRandomly selects a subset of the data on which to run Coarse Approximation Linear Function  \n\nparameter | description | type\n--------- | ------------| --------\nparam data | Data frame where first column contains case/control coded variable (0/1) if targetVector is binary or real values if targetVector is nonbinary | *pandas DataFrame*\nparam nMarkers | Maximum number of markers to include in creation of sum. | *int*\nparam targetVector | Set to \"binary\" to indicate data with a target vector (first column) having case/control characteristic.  Set to \"nonbinary\" for target vector (first column) with real numbers. | *string*\nparam proportion | A value between 0 and 1, the percentage of data, randomly chosen, to use in the calculation.  Default is .8. | *float*\nparam times | Indicates the number of replications to run with randomization. | *int*\nparam optimize | Criteria to optimize.  Allowed values are \"pval\", \"auc\", for a binary target vector, or \"corr\" for a nonbinary target vector. | *string*\nparam verbose | True to print activity at each iteration to console. Defaults to False. | *bool*\n#### **returns**\n\nA dictionary composed of the following results from CALF:\n\nkey | description/value\n--- | -----------\nmultiple | The markers chosen and the number of times they were selected per iteration.\nauc | The AUC determined during running CALF.  AUC can be provided for given markers AUC represented for selected markers will only be optimal if set to optimzie for AUC.\nproportion | The value supplied to the proportion paremeter when calling the function.\ntargetVec | \"binary\"\naucHist | A historgram of the AUC values calcuted for all the iterations.\ntimes | The value provided to the times parameter when the function was called.\nrocPlot | Receiver operating curve plot, if applicable for dataset type and optimizer supplied.\nfinalBest | The optimal value for the provided optimization type, e.g. if optimize=pval\" this will have the calculated p-value for the run.\noptimize | The optimizer argument given in the function call.\n\n\n\n## *calf_exact_binary_subset(data, nMarkers, nCase, nControl, times = 1, optimize = \"pval\", verbose = False)*\nRandomly selects subsets of data, case and control, from a binary data set, while precisely ensuring the size of the sets on which to run Coarse Approximation Linear Function  \n\nparameter | description | type\n--------- | ------------| --------\ndata | Data frame where first column contains case/control coded variable (0/1). | *pandas DataFrame*\nnMarkers | Maximum number of markers to include in creation of sum. | *int*\nnCase | The number of data points to use for the set of case samples. | *int*\nnControl | The number of data points to use for the set of control samples. | *int*\ntimes | Indicates the number of replications to run with randomization | *int*\noptimize | Criteria to optimize.  Allowed values are \"pval\" or \"auc\" | *string*\nverbose | True to print activity at each iteration to console. Defaults to False. | *bool*\n#### **returns**\n\nA dictionary composed of the following results from CALF:\n\nkey | description/value\n--- | -----------\nmultiple | The markers chosen and the number of times they were selected per iteration.\nauc | The AUC determined during running CALF.  AUC can be provided for given markers AUC represented for selected markers will only be optimal if set to optimzie for AUC.\nproportion | The value supplied to the proportion paremeter when calling the function.\ntargetVec | \"binary\"\naucHist | A historgram of the AUC values calcuted for all the iterations.\ntimes | The value provided to the times parameter when the function was called.\nrocPlot | Receiver operating curve plot, if applicable for dataset type and optimizer supplied.\nfinalBest | The optimal value for the provided optimization type, e.g. if optimize='pval\" this will have the calculated p-value for the run.\noptimize | The optimizer argument given in the function call.\n\n\n\n## *calf_cv(data = CaseControl, limit = 5, times = 100, targetVector = 'binary', optimize = 'pval')*\nPerforms repeated random subsampling cross validation on data for Coarse Approximation Linear Function  \n\nparameter | description | type\n--------- | ------------| --------\n data | Data frame where first column contains case/control coded variable (0/1) if targetVector is binary or real values if targetVector is nonbinary | *pandas DataFrame*\n limit | Maximum number of markers to attempt to determine per iteration. | *int*\n times | Indicates the number of replications to run with randomization. | *int*\n proportion | A value between 0 and 1, the percentage of data, randomly chosen, to use in each iteration of CALF.  Default is .8, | *float*\n optimize | Criteria to optimize.  Allowed values are \"pval\", \"auc\", for a binary target vector, or \"corr\" for a nonbinary target vector. | *string*\n outputPath | The path where files are to be written as output, default is None meaning no files will be written.  When targetVector is \"binary\" file binary.csv will be output in the provided path, showing the reults.  When targetVector is \"nonbinary\" file nonbinary.csv will be output in the provided path, showing the results.  In the same path, the kept and excluded variables from the LAST iteration, will be output, prefixed with the targetVector type \"binary\" or \"nonbinary\" followed by Kept and Excluded and suffixed with .csv.  Two files containing the results from each run have List in the filenames and suffixed with .txt. | *string*\n#### **returns**\n\nA data frame of the results from the cross validation.  Columns of all markers from data and rows representing each iteration of a CALF run.  Cells will contain the result from CALF for a given CALF run and the markers that were chose for that run.\n\n\n## *perm_target_cv(data, targetVector, limit, times, proportion = .8, optimize = 'pval', outputPath=None)*\nPerforms repeated random subsampling cross validation on data but randomly permutes the target column (first column) with each iteration, for Coarse Approximation Linear Function   \n\nparameter | description | type\n--------- | ------------| --------\ndata | Data frame where first column contains case/control coded variable (0/1) if targetVector is binary or real values if targetVector is nonbinary values if targetVector is nonbinary | *pandas DataFrame*\nlimit | Maximum number of markers to attempt to determine per iteration. | *int*\ntimes | Indicates the number of replications to run with randomization. | *int*\nproportion | A value between 0 and 1, the percentage of data, randomly chosen, to use in each iteration of CALF.  Default is .8, | *float*\noptimize | Criteria to optimize.  Allowed values are \"pval\", \"auc\", for a binary target vector, or \"corr\" for a nonbinary target vector. | *string*\noutputPath | The path where files are to be written as output, default is None meaning no files will be written.  When targetVector is \"binary\" file binary.csv will be output in the provided path, showing the reults.  When targetVector is \"nonbinary\" file nonbinary.csv will be output in the provided path, showing the results.  In the same path, the kept and excluded variables from the LAST iteration, will be output, prefixed with the targetVector type \"binary\" or \"nonbinary\" followed by Kept and Excluded and suffixed with .csv.  Two files containing the results from each run have List in the filenames and suffixed with .txt. | *string*\n#### **returns**\n\nA data frame of the results from the cross validation.  Columns of all markers from data and rows representing each iteration of a CALF run.  Cells will contain the result from CALF for a given CALF run and the markers that were chose for that run.\n\n\n## *write_calf(x, filename)*\nWrites the results from a call to calf() to a file  \n\nparameter | description | type\n--------- | ------------| --------\nx | The dictionary object returned from calling calf(). | *dict*\nfilename | The name of the file in which to write the results from calf(). | *string*\n\n\n## *write_calf_randomize(x, filename)*\nWrites the results from a call to calf_randomize() to a file  \n\nparameter | description | type\n--------- | ------------| --------\nx | The dictionary object returned from calling calf_randomize(). |  *dict*\nfilename | The name of the file in which to write the results from calf_randomize(). | *string*\n\n\t\n\n## *write_calf_subset(x, filename)*\nWrites the results from a call to calf_subset() to a file  \n\nparameter | description | type\n--------- | ------------| --------\nx | The dictionary object returned from calling calf_subset(). | *dict*\nfilename | The name of the file in which to write the results from calf_subset(). | *string*\n\n\n\n\n\n## *calf_internal(data, nMarkers, randomize = False, proportion = None, times = 1, targetVector = 'binary', optimize = 'pval', verbose = False)*\nThe basic CALF algorithm  \n\nparameter | description | type\n--------- | ------------| --------\ndata | Data frame where first column contains case/control coded variable (0/1) if targetVector is binary or real values if targetVector is nonbinary | *pandas DataFrame*\nnMarkers | Maximum number of markers to include in creation of sum. | *int*\nrandomize | Set to True to randomize the data for each CALF run. | *bool*\nproportion | A value between 0 and 1, the percentage of data, randomly chosen, to use in the calculation. | *float*\ntimes | The number of times to run CALF on data. | *int*\ntargetVector | Set to \"binary\" to indicate data with a target vector (first column) having case/control characteristic.  Set to \"nonbinary\" for target vector (first column) with real numbers. | *string*\noptimize | Criteria to optimize.  Allowed values are \"pval\", \"auc\", for a binary target vector, or \"corr\" for a nonbinary target vector. | *string*\nverbose | True to print activity at each iteration to console. Defaults to False. | * bool*\n#### **returns**\n\nA dictionary composed of the following results from CALF:\n\nkey | description/value\n--- | -----------\nselection | The markers selected each with their assigned weight (-1 or 1).\nauc | The AUC determined during running CALF.  AUC can be provided for given markers AUC represented for selected markers will only be optimal if set to optimzie for AUC.\nrandomize | False\nproportion | Undefined\ntargetVec | Target vector argument given in the function call.\nrocPlot | Receiver operating curve plot, if applicable for dataset type and optimizer supplied.\nfinalBest | The optimal value for the provided optimization type, e.g. if optimize='pval\" this will have the calculated p-value for the run.\noptimize | The optimizer argument given in the function call.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jorufo/CALF_Python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "calfpy",
    "package_url": "https://pypi.org/project/calfpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/calfpy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jorufo/CALF_Python/issues",
      "Homepage": "https://github.com/jorufo/CALF_Python"
    },
    "release_url": "https://pypi.org/project/calfpy/1.17.0/",
    "requires_dist": [
      "numpy (==1.20.2)",
      "pandas (==1.2.4)",
      "plotnine (==0.8.0)",
      "scipy (==1.6.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "Contains greedy algorithms for coarse approximation linear functions.",
    "version": "1.17.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13104559,
  "releases": {
    "1.16.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52d6f3247d88cd2946eb243868746dc4bb6de6dd0549144b0f7313935214f929",
          "md5": "271915d6da27c2c90fc7046748885084",
          "sha256": "626273ba221dec0d889fb959d10e9feb78c5f4068d0cb72cab63181e5dc87616"
        },
        "downloads": -1,
        "filename": "calfpy-1.16.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "271915d6da27c2c90fc7046748885084",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19721,
        "upload_time": "2021-08-03T17:33:28",
        "upload_time_iso_8601": "2021-08-03T17:33:28.642319Z",
        "url": "https://files.pythonhosted.org/packages/52/d6/f3247d88cd2946eb243868746dc4bb6de6dd0549144b0f7313935214f929/calfpy-1.16.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfd9252595b756e952dfb451878dea046d0d271765b40a74a3171d8c7e469551",
          "md5": "1caa7d88d12291ee059ba05e7cc47ef1",
          "sha256": "5f59c7cb2f55443a680dc295b09c2eed81d9ac8d5a1ef7a9294512a16119638f"
        },
        "downloads": -1,
        "filename": "calfpy-1.16.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1caa7d88d12291ee059ba05e7cc47ef1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21296,
        "upload_time": "2021-08-03T17:33:30",
        "upload_time_iso_8601": "2021-08-03T17:33:30.285834Z",
        "url": "https://files.pythonhosted.org/packages/bf/d9/252595b756e952dfb451878dea046d0d271765b40a74a3171d8c7e469551/calfpy-1.16.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.17.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77a19501b932d5387056d33f50e81ccb2145be1041c0af604d6317a75e554961",
          "md5": "66fb73ae8f70fc35083cd1ff72c72d87",
          "sha256": "c136f04bd310d3d01298c8bdf768810b3053d2c95a8e2f3482c80e0df447ed51"
        },
        "downloads": -1,
        "filename": "calfpy-1.17.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66fb73ae8f70fc35083cd1ff72c72d87",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19874,
        "upload_time": "2022-03-07T18:30:34",
        "upload_time_iso_8601": "2022-03-07T18:30:34.726719Z",
        "url": "https://files.pythonhosted.org/packages/77/a1/9501b932d5387056d33f50e81ccb2145be1041c0af604d6317a75e554961/calfpy-1.17.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14be10e9e5eb5c240df38e173b0ffe28cafb2e2a2146ae7402ed407ccb7d650f",
          "md5": "4262eada47d0806d1f5d69ba38e3b4a9",
          "sha256": "c419558ad3702d586c64f0cc1a74ce7e6b7e3eab8fb02fb629e0d151746994d9"
        },
        "downloads": -1,
        "filename": "calfpy-1.17.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4262eada47d0806d1f5d69ba38e3b4a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21413,
        "upload_time": "2022-03-07T18:30:35",
        "upload_time_iso_8601": "2022-03-07T18:30:35.821463Z",
        "url": "https://files.pythonhosted.org/packages/14/be/10e9e5eb5c240df38e173b0ffe28cafb2e2a2146ae7402ed407ccb7d650f/calfpy-1.17.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77a19501b932d5387056d33f50e81ccb2145be1041c0af604d6317a75e554961",
        "md5": "66fb73ae8f70fc35083cd1ff72c72d87",
        "sha256": "c136f04bd310d3d01298c8bdf768810b3053d2c95a8e2f3482c80e0df447ed51"
      },
      "downloads": -1,
      "filename": "calfpy-1.17.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66fb73ae8f70fc35083cd1ff72c72d87",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19874,
      "upload_time": "2022-03-07T18:30:34",
      "upload_time_iso_8601": "2022-03-07T18:30:34.726719Z",
      "url": "https://files.pythonhosted.org/packages/77/a1/9501b932d5387056d33f50e81ccb2145be1041c0af604d6317a75e554961/calfpy-1.17.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14be10e9e5eb5c240df38e173b0ffe28cafb2e2a2146ae7402ed407ccb7d650f",
        "md5": "4262eada47d0806d1f5d69ba38e3b4a9",
        "sha256": "c419558ad3702d586c64f0cc1a74ce7e6b7e3eab8fb02fb629e0d151746994d9"
      },
      "downloads": -1,
      "filename": "calfpy-1.17.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4262eada47d0806d1f5d69ba38e3b4a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21413,
      "upload_time": "2022-03-07T18:30:35",
      "upload_time_iso_8601": "2022-03-07T18:30:35.821463Z",
      "url": "https://files.pythonhosted.org/packages/14/be/10e9e5eb5c240df38e173b0ffe28cafb2e2a2146ae7402ed407ccb7d650f/calfpy-1.17.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}