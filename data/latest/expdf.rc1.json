{
  "info": {
    "author": "('Jiawei Wu',)",
    "author_email": "13260322877@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\n# ExPDF\n\n## Overview\n\nExPDF is a tool that can generate citation relationship between PDFs, and create beautiful, interactive SVG figure inside Jupyter Notebook.  \n\n![image](https://user-images.githubusercontent.com/38694199/81917751-2ef60000-9608-11ea-9c83-98f45010a5e7.png)\n\n## Quickstart\n\nWith `Jupyter Notebook`, it is easy to visuzlize citation relationship between PDFs.  \n\nFirstly, download and install by:\n\n```bash\ngit clone https://github.com/bupt-ipcr/expdf\ncd expdf\npip install ./\n```\n\nSecondly, use `expdf` to generate json file like:\n\n```bash\nexpdf -d pdfs/ASV -o data.json\n```\n\nFinally, open `jupyter notebook` and try:\n\n```python\n  import json\n  from expdf.visualize import create_fig\n  with open('data.json', 'r') as f:\n    data = json.load(f)\n  fig = create_fig(data)\n  fig\n```\n\n## Installation\n\ndownload expdf with github and install it with pip\n\n```bash\ngit clone https://github.com/bupt-ipcr/expdf\ncd expdf\npip install ./\n```\n\nrun `expdf -h` to see the help output:\n\n```bash\nusage: expdf [-h] [-a APPEND_PDF] [-r] [-o OUTPUT_DIR] PDF_PATH\n\nGenerate reference relation of all PDFs(given or inside PDF)\n\npositional arguments:\n  PDF_PATH              PDF path, or directory of PDFs if -r is used\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a APPEND_PDF, --append APPEND_PDF\n                        append a PDF file\n  -d, --dir, --directory\n                        treat PDF_PATH as a directory\n  -e EXCLUDE_PDF, --exclude EXCLUDE_PDF\n                        exclude a PDF file\n  -o OUTPUT_DIR, -O OUTPUT_DIR, --output OUTPUT_DIR\n                        output directory, default is current directory\n  -v, --vis, --visualize\n                        create a html file for visualize\n  --vis-html HTML_FILENAME\n                        output file name of html visualize\n```\n\n## Examples\n\nsimply use epdf like:\n\n```bash\nexpdf pdfs/test.pdf\n```\n\n**Treat as a directory** with `-d` and it will scan all PDFs in specify directory:\n\n```bash\nexpdf -d pdfs\n```\n\n**Append PDFs** with `-a`, since there may be sporadic papers not in the same folder:\n\n```bash\nexpdf -d pdfs -a 1.pdf -a 2.pdf\n```\n\n**Exclude PDFs** with `-e`, to exclude some PDFs. Note that even if exclude pdf not exists,\nthere will be no error.\n\n```bash\nexpdf -d pdfs -e test.pdf\n```\n\nTo **specify output directory**, use `-o`, `-O` or `--output` like:\n\n```bash\nexpdf pdfs/test.pdf -O ./urdir\n```\n\nTo **generate visualize html file**, use `-v` and `--vis-html` like:\n\n```bash\nexpdf -r pdfs/ASV -v --vis-html='vis.html'\n```\n## Usage as Python library\n\nHere we have three main parts of expdfs: `ExPDFParser`, `Graph` and `render`.\n\n- `ExPDFParser`\n\n  a parser built top on pdfminer, look for metadata, links and references of a PDF file.\n\n  ```python\n  # ensure you have ./tests/test.pdf\n  from expdf import ExPDFParser\n  pdf = ExPDFParser(\"tests/test.pdf\")\n  print('title: ', pdf.title)\n  print('info: ', pdf.info)\n  print('metadata: ', pdf.metadata)\n\n  print('Links: ')\n  for link in pdf.links:\n    print(f'- {link}')\n\n  print('Refs: ')\n  for ref in pdf.refs:\n    print(f'- {ref}')\n  ```\n\n- `PDFNode`\n\n  `PDFNode` is a class that maintain a dict of all its instances. Two PDF that have same title(or just have difference in punctuations) will point to same node.\n  `LocalPDFNode` is a subclass of `PDFNode`, which enables you to modify references of a PDF.\n\n  usually it is used with parser like:\n\n  ````python\n  from expdf import ExPDFParser, LocalPDFNode\n\n  expdf_parser = ExPDFParser(\"tests/test.pdf\")\n  localPDFNode = LocalPDFNode(expdf_parser.title, expdf_parser.refs)\n  pdf_info = PDFNode.get_json()\n  print(pdf_info)\n  ````\n\n  otherwise, you can also assign title and refs without parser(maybe human is more precise than parser and regex expressions), just like:\n\n  ```python\n  from expdf.graph import PDFNode, LocalPDFNode\n\n  # just a example, we wwill never see title like this\n  LocalPDFNode('title0', refs=['title1', 'title2'])\n  LocalPDFNode('title1', refs=['title3'])\n  LocalPDFNode('title2', refs=['title3'])\n  pdf_info = PDFNode.get_json()\n  print(pdf_info)\n  ```\n\n- `visualize`\n\n  PDFNode give you infos of PDFs, such as citation relationship(show as parents and children). But why not visualize it?\n\n  `visuzlize` provides a top-level function `create_fig` built on `networkx`, `plotly`. `networkx` provedes methods to  allocate positions\n  of all nodes and `plotly` is a powerful visualization tool.\n\n  `render` invokes `create_fig` and write it into html file.\n\n  Visualize is recommended to be use inside `jupyter notebook`, since plotly only support events(click, hover, etc) with it.  You can use like:\n\n  ```bash\n  expdf -d pdfs/ASV -o data.json\n  ```\n\n  ```python\n  # in your jupyter notebook\n  import json\n  from expdf.visualize import create_fig\n  with open('data.json', 'r') as f:\n    data = json.load(f)\n  fig = create_fig(data)\n  fig\n  ```\n\n  You can also save it as html, just like:\n\n  ```bash\n  expdf -d pdfs/ASV -o data.json -v --vis-html=vis.html\n  ```\n\n## Various\n\n- Author: Jiawei Wu <13260322877@163.com>\n- License: MIT\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bupt-ipcr/expdf",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "expdf",
    "package_url": "https://pypi.org/project/expdf/",
    "platform": "",
    "project_url": "https://pypi.org/project/expdf/",
    "project_urls": {
      "Homepage": "https://github.com/bupt-ipcr/expdf"
    },
    "release_url": "https://pypi.org/project/expdf/0.3.0/",
    "requires_dist": [
      "requests",
      "pdfminer2",
      "tqdm",
      "networkx",
      "plotly",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.6.0",
    "summary": "PDF Download and Analysis Tool",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7248146,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea99df732e43840699acfcab3d9bb333c2f6f5aba63423a0fb825c50defdd18a",
          "md5": "0c29054564ec8386b173328f3818163e",
          "sha256": "e441938722d5f64368c9ec3469ef2e127c541460a50dd539b366e703d189ead3"
        },
        "downloads": -1,
        "filename": "expdf-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c29054564ec8386b173328f3818163e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 22936,
        "upload_time": "2020-05-15T12:26:29",
        "upload_time_iso_8601": "2020-05-15T12:26:29.036963Z",
        "url": "https://files.pythonhosted.org/packages/ea/99/df732e43840699acfcab3d9bb333c2f6f5aba63423a0fb825c50defdd18a/expdf-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f82db89533401ee1e155cf68a8d0777f9e12617a7f4f419475af23332f8ce0fb",
          "md5": "e740b7c4247b950eda6c5a7ebde0866a",
          "sha256": "dd944e8b62867242d0dff0524ad0b405b7c396155044bfff836de7efa129f654"
        },
        "downloads": -1,
        "filename": "expdf-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e740b7c4247b950eda6c5a7ebde0866a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 21587,
        "upload_time": "2020-05-15T12:26:32",
        "upload_time_iso_8601": "2020-05-15T12:26:32.233539Z",
        "url": "https://files.pythonhosted.org/packages/f8/2d/b89533401ee1e155cf68a8d0777f9e12617a7f4f419475af23332f8ce0fb/expdf-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea99df732e43840699acfcab3d9bb333c2f6f5aba63423a0fb825c50defdd18a",
        "md5": "0c29054564ec8386b173328f3818163e",
        "sha256": "e441938722d5f64368c9ec3469ef2e127c541460a50dd539b366e703d189ead3"
      },
      "downloads": -1,
      "filename": "expdf-0.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c29054564ec8386b173328f3818163e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 22936,
      "upload_time": "2020-05-15T12:26:29",
      "upload_time_iso_8601": "2020-05-15T12:26:29.036963Z",
      "url": "https://files.pythonhosted.org/packages/ea/99/df732e43840699acfcab3d9bb333c2f6f5aba63423a0fb825c50defdd18a/expdf-0.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f82db89533401ee1e155cf68a8d0777f9e12617a7f4f419475af23332f8ce0fb",
        "md5": "e740b7c4247b950eda6c5a7ebde0866a",
        "sha256": "dd944e8b62867242d0dff0524ad0b405b7c396155044bfff836de7efa129f654"
      },
      "downloads": -1,
      "filename": "expdf-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e740b7c4247b950eda6c5a7ebde0866a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 21587,
      "upload_time": "2020-05-15T12:26:32",
      "upload_time_iso_8601": "2020-05-15T12:26:32.233539Z",
      "url": "https://files.pythonhosted.org/packages/f8/2d/b89533401ee1e155cf68a8d0777f9e12617a7f4f419475af23332f8ce0fb/expdf-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}