{
  "info": {
    "author": "Victor Schmidt",
    "author_email": "not.an.address@yes.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# minydra ðŸ¦Ž\n\nMinimal Python command-line parser inspired by Facebook's Hydra + dot-accessible nested dictionaries.\n\nEasily parse arbitrary arguments from the command line without dependencies:\n\n![example code](assets/code.png)\n![example code](assets/run.png)\n\n![](https://img.shields.io/badge/coverage-99%25-success)\n![](https://img.shields.io/badge/version-0.1.5-informational)\n![](https://img.shields.io/badge/python-3.7%2B%20-orange)\n\n```bash\npip install minydra\n```\n\n`minydra` is tested on Python `3.7`, `3.8` and `3.9`.\n\n<br/>\n\n<p align=\"center\">\n <a href=\"#getting-started\"><strong>Getting Started</strong></a>&nbsp;&nbsp;â€¢&nbsp;\n <a href=\"#forcing-types\"><strong>Forcing types</strong></a>&nbsp;&nbsp;â€¢&nbsp;\n <a href=\"#minydict\"><strong>MinyDict</strong></a>&nbsp;&nbsp;â€¢&nbsp;\n <a href=\"#dumpingloading\"><strong>Save config</strong></a>&nbsp;&nbsp;â€¢&nbsp;\n <a href=\"#strict-mode\"><strong>Prevent typos</strong></a>&nbsp;&nbsp;â€¢&nbsp;\n <a href=\"#using-default-configurations\"><strong>Use default configs</strong></a>&nbsp;&nbsp;â€¢&nbsp;\n <a href=\"/examples\"><strong>Examples</strong></a>\n</p>\n\n<br/>\n\n## Getting Started\n\n[`examples/parser.py`](examples/parser.py)\n\n```python\nfrom minydra.parser import Parser\n\nif __name__ == \"__main__\":\n    parser = Parser(\n        verbose=0, # print received args\n        allow_overwrites=False, # allow repeating args in the command-line\n        warn_overwrites=True, # warn repeating args if they are allowed\n        parse_env=True, # get environment variable\n        warn_env=True, # warn if an environment variable is specified but not found\n        defaults=None, # path to a MinyDict-loadable dictionary of default values for the args\n        strict=True, # if `defaults` is provided, whether to allow new keys in the command-line\n                     # or restrict to `defaults`' keys\n        keep_special_kwargs=True, # `defaults` and `strict` can be set from the command-line\n                                  # with `@defaults=` and `@strict=`. This argument decides if\n                                  # you want to keep those keys in the final arguments.\n    )\n    args = parser.args.pretty_print().resolve().pretty_print() # notice .resolve() transforms dotted.keys into nested dicts\n```\n\n[`examples/resolved_args.py`](examples/resolved_args.py)\n\n```python\nfrom minydra import resolved_args\n\nif __name__ == \"__main__\":\n    args = resolved_args()\n    args.pretty_print()\n```\n\n[`examples/demo.py`](examples/demo.py)\n[`examples/demo.json`](examples/demo.json)\n\n```python\nfrom minydra import MinyDict, resolved_args\nfrom pathlib import Path\n\nif __name__ == \"__main__\":\n    # parse arbitrary args in 1 line\n    args = resolved_args()\n\n    # override default conf\n    if args.default:\n        args = MinyDict.from_json(args.default).update(args)\n\n    # protect args in the rest of the code execution\n    args.freeze()\n\n    # print the args in a nice orderly fashion\n    args.pretty_print()\n\n    # access args with dot/attribute access\n    print(f'Using project \"{args.log.project}\" in {args.log.outdir}')\n\n    # save configuration\n    args.to_json(Path(args.log.outdir) / f\"{args.log.project}.json\")\n\n```\n\n\n\n[`examples/decorator.py`](examples/decorator.py)\n\n```python\nimport minydra\nfrom minydra.dict import MinyDict\n\n@minydra.parse_args(verbose=0, allow_overwrites=False) # Parser's init args work here\ndef main(args: MinyDict) -> None:\n    args.resolve().pretty_print()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n<br/><br/>\n\n## Parsing\n\n* Simple strings are parsed to `float` and `int` automatically.\n* A single keyword will be interpreted as a positive flag.\n* A single keyword starting with `-` will be interpreted as a negative flag.\n* If `parse_env` is `True`, environment variables are evaluated.\n\n```text\n$ python examples/decorator.py outdir=$HOME/project save -log learning_rate=1e-4 batch_size=64\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ batch_size    : 64                        â”‚\nâ”‚ learning_rate : 0.0001                    â”‚\nâ”‚ log           : False                     â”‚\nâ”‚ outdir        : /Users/victor/project     â”‚\nâ”‚ save          : True                      â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\n* dotted keys will be resolved to nested dictionary keys:\n\n```text\n$ python examples/decorator.py server.conf.port=8000\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ server             â”‚\nâ”‚ â”‚conf              â”‚\nâ”‚ â”‚ â”‚port : 8000     â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\n* Using `ast.literal_eval(value)`, `minydra` will try and parse more complex values for arguments as lists or dicts. Those should be specified as strings:\n\n```text\n$ python examples/decorator.py layers=\"[1, 2, 3]\" norms=\"{'conv': 'batch', 'epsilon': 1e-3}\"\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ layers : [1, 2, 3]                               â”‚\nâ”‚ norms  : {'conv': 'batch', 'epsilon': 0.001}     â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\n<br/>\n\n### Forcing types\n\nAdding `___<type>` to a key will force this type to the value. Notice how `01` is parsed to an integer `1` but `04` is parsed to a string (as specified) `\"04\"`, and `hello` is parsed to a `list`, not kept as a string\n\n```text\n$ python examples/decorator.py n_jobs___str=04 job=01 chips___list=hello\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ chips  : ['h', 'e', 'l', 'l', 'o']     â”‚\nâ”‚ job    : 1                             â”‚\nâ”‚ n_jobs : 04                            â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\nKnown types are defined in `Parser.known_types` and the separator (`___`) in `Parser.type_separator`\n\n```python\nIn [1]: from minydra import Parser\n\nIn [2]: Parser.known_types\nOut[2]: {'bool', 'float', 'int', 'str'}\n\nIn [3]: Parser.type_separator\nOut[3]: '___'\n```\n\n<br/>\n\n### Command-line configuration\n\nYou can configure the `Parser` from the command-line using special `@` arguments. In other words, all `__init__(self, ...)` arguments can be set from the command-line with `@argname=new_value`.\n\nIn particular if you run `python examples/decorator.py @defaults=./examples/demo.json` you will see:\n\n```\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ @defaults : ./examples/demo.json     â”‚\nâ”‚ log                                  â”‚\nâ”‚ â”‚logger                              â”‚\nâ”‚ â”‚ â”‚log_level   : DEBUG               â”‚\nâ”‚ â”‚ â”‚logger_name : minydra             â”‚\nâ”‚ â”‚outdir  : /some/path                â”‚\nâ”‚ â”‚project : demo                      â”‚\nâ”‚ verbose   : False                    â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\n**But** if you add `@strict=false @keep_special_kwargs=false` you will now have:\n\n```\n$ python examples/decorator.py @defaults=./examples/demo.json @strict=false @keep_special_kwargs=false\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ log                          â”‚\nâ”‚ â”‚logger                      â”‚\nâ”‚ â”‚ â”‚log_level   : DEBUG       â”‚\nâ”‚ â”‚ â”‚logger_name : minydra     â”‚\nâ”‚ â”‚outdir  : /some/path        â”‚\nâ”‚ â”‚project : demo              â”‚\nâ”‚ verbose : False              â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\n(*you need to have `@strict=false` since `@keep_special_kwargs` is unknown in `demo.json`. It would not be the case if `strict=false` had been used in the script itself (but it can be overridden from the command-line!)*)\n\n<br/><br/>\n\n## MinyDict\n\nMinydra's args are a custom lightweight wrapper around native `dict` which allows for dot access (`args.key`), resolving dotted keys into nested dicts and pretty printing sorted keys in a box with nested dicts indented. If a key does not exist, it will not fail, rather return None (as `dict.get(key, None)`).\n\na `MinyDict` inherits from `dict` so usual methods work `.keys()`, `.items()` etc.\n\n```python\n\nIn [1]: from minydra.dict import MinyDict\n\nIn [2]: args = MinyDict({\"foo\": \"bar\", \"yes.no.maybe\": \"idontknow\"}).pretty_print(); args\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ foo          : bar           â”‚\nâ”‚ yes.no.maybe : idontknow     â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\nOut[2]: {'foo': 'bar', 'yes.no.maybe': 'idontknow'}\n\nIn [3]: args.resolve().pretty_print(); args\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ foo : bar                â”‚\nâ”‚ yes                      â”‚\nâ”‚ â”‚no                      â”‚\nâ”‚ â”‚ â”‚maybe : idontknow     â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\nOut[3]: {'foo': 'bar', 'yes': {'no': {'maybe': 'idontknow'}}}\n\nIn [4]: args.yes.no.maybe\nOut[4]: \"idontknow\"\n\nIn [5]: \"foo\" in args\nOut[5]: True\n\nIn [6]: \"rick\" in args\nOut[6]: False\n\nIn [7]: args.morty is None\nOut[7]: True\n\nIn [8]: args.items()\nOut[8]: dict_items([('foo', 'bar'), ('yes', {'no': {'maybe': 'idontknow'}})])\n```\n\n<br/>\n\n### Dumping/Loading\n\nYou can save and read `MinyDict` to/from disk in 3 formats: `json` and `pickle` without dependencies, `yaml` with the `PyYAML` dependency (`pip install minydra[yaml]`).\n\nMethods `to_pickle`, `to_json` and `to_yaml` have 3 arguments:\n\n1. `file_path` as a `str` or `pathlib.Path` which is resolved:\n    1. expand env variable (`$MYDIR` for instance)\n    2. expand user (`~`)\n    3. make absolute\n2. `return_path` which defaults to `True`. If those methods return the path of the created file\n3. `allow_overwrites` which defaults to `True`. If `False` and `path` exists, a `FileExistsError` will be raised. Otherwise creates/overwrites the file at `file_path`\n4. `verbose` which defaults to `0`. If `>0` prints the path of the created object\n\nNote:\n\n* `to/from_yaml` will fail with a `ModuleNotFoundError` if `PyYAML` is not installed.\n* the `json` standard does not accept ints as keys in dictionaries so `{3: 2}` would be dumped -- and therefore loaded -- as `{\"3\": 2}`.\n\n\n\n```python\nIn [1]: from minydra.dict import MinyDict\n\nIn [2]: args = MinyDict({\"foo\": \"bar\", \"yes.no.maybe\": \"idontknow\"}).resolve(); args\nOut[2]: {'foo': 'bar', 'yes': {'no': {'maybe': 'idontknow'}}}\n\nIn [3]: json_file_path = args.to_json(\"./args.json\")\n\nIn [4]: yaml_file_path = args.to_yaml(\"./args.yaml\")\n\nIn [5]: pkl_file_path = args.to_pickle(\"./args.pkl\")\n\nIn [6]: _ = args.to_json(\"./args.json\", verbose=1) # verbose argument prints the path\nJson dumped to: /Users/victor/Documents/Github/vict0rsch/minydra/args.json\n\nIn [7]: MinyDict.from_json(\"args.json\")\nOut[7]: {'foo': 'bar', 'yes': {'no': {'maybe': 'idontknow'}}}\n\nIn [8]: assert (\n    MinyDict.from_yaml(yaml_file_path)\n    == MinyDict.from_json(json_file_path)\n    == MinyDict.from_pickle(pkl_file_path)\n    == args\n)\n```\n\n[`examples/dumps.py`](examples/dumps.py)\n\n```text\npython examples/dumps.py path=\"./myargs.pkl\" format=pickle cleanup\n\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ cleanup : True             â”‚\nâ”‚ format  : pickle           â”‚\nâ”‚ path    : ./myargs.pkl     â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\nDumped args to /Users/victor/Documents/Github/vict0rsch/minydra/myargs.pkl\nCleaning up\n```\n\n<br/>\n\n### Strict Mode\n\nTo prevent typos from the command-line, the `MinyDict.update` method has a strict mode: updating a `MinyDict` with another one using `strict=True` will raise a `KeyError` if the key does not already exist:\n\n```python\nfrom minydra import MinyDict, resolved_args\n\nif __name__ == \"__main__\":\n    # parse arbitrary args in 1 line\n    args = resolved_args()\n\n    # override default conf\n    if args.default:\n        path = args.default\n        # delete otherwise it will be used to update the conf which does not have\n        # \"default\" as a key, therefore raising a KeyError in strict mode\n        del args.default\n        args = MinyDict.from_json(path).update(args, strict=True)\n\n    args.pretty_print()\n```\n\nNo typo:\n\n```text\n$ python examples/strict.py default=./examples/demo.json log.logger.log_level=INFO\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ log                          â”‚\nâ”‚ â”‚logger                      â”‚\nâ”‚ â”‚ â”‚log_level   : INFO        â”‚\nâ”‚ â”‚ â”‚logger_name : minydra     â”‚\nâ”‚ â”‚outdir  : /some/path        â”‚\nâ”‚ â”‚project : demo              â”‚\nâ”‚ verbose : False              â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\nTypo:\n\n```\n$ python examples/strict.py default=./examples/demo.json log.logger.log_leveel=INFO\nTraceback (most recent call last):\n  File \"/Users/victor/Documents/Github/vict0rsch/minydra/examples/strict.py\", line 13, in <module>\n    args = MinyDict.from_json(path).update(args, strict=True)\n  File \"/Users/victor/Documents/Github/vict0rsch/minydra/minydra/dict.py\", line 111, in update\n    self[k].update(v, strict=strict)\n  File \"/Users/victor/Documents/Github/vict0rsch/minydra/minydra/dict.py\", line 111, in update\n    self[k].update(v, strict=strict)\n  File \"/Users/victor/Documents/Github/vict0rsch/minydra/minydra/dict.py\", line 100, in update\n    raise KeyError(\nKeyError: 'Cannot create a non-existing key in strict mode ({\"log_leveel\":INFO}).'\n```\n\n<br/>\n\n### Using default configurations\n\nThe `minydra.Parser` class takes a `defaults=` keyword argument. This can be:\n\n* a `str` or a `pathlib.Path` to a `json` `yaml` or `pickle` file that `minydra.MinyDict` can load (`from_X`)\n* a `dict` or a `minydra.MinyDict`\n* a `list` of the above types, in which case the resulting defaults will be the result of sequential updates from those defaults, enabling hierarchical defaults (first defaults are the starting point, then each subsequent defaults updates it)\n\nWhen `defaults` is provided, the resulting `minydra.MinyDict` serves as a reference for the arguments parsed from the command-line:\n\n* **If** you setup the parser with `strict=True`, arguments from the command-line will still have a higher priority but they will **have to** be present in the `defaults` to prevent typos or unknown arguments (see [strict mode](#strict-mode))\n* arguments not present in the command-line with fallback to values in `defaults`\n\n`defaults` can actually be a `list` and the update order is the same as the list's. For instance:\n\n```python\nIn [1]: from minydra import Parser\n\nIn [2]: Parser(defaults=[\"./examples/demo.json\", \"./examples/demo2.json\"]).args.pretty_print();\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ log                             â”‚\nâ”‚ â”‚logger                         â”‚\nâ”‚ â”‚ â”‚log_level   : INFO           â”‚\nâ”‚ â”‚ â”‚logger_name : minydra        â”‚\nâ”‚ â”‚outdir  : /some/other/path     â”‚\nâ”‚ â”‚project : demo                 â”‚\nâ”‚ new_key : 3                     â”‚\nâ”‚ verbose : False                 â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\nIf you need to set defaults from the command-line, there's a special `@defaults` keyword you can use:\n\n\n```text\n$ python examples/decorator.py @defaults=./examples/demo.json\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ @defaults : ./examples/demo.json     â”‚\nâ”‚ log                                  â”‚\nâ”‚ â”‚logger                              â”‚\nâ”‚ â”‚ â”‚log_level   : DEBUG               â”‚\nâ”‚ â”‚ â”‚logger_name : minydra             â”‚\nâ”‚ â”‚outdir  : /some/path                â”‚\nâ”‚ â”‚project : demo                      â”‚\nâ”‚ verbose   : False                    â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n\n$ python examples/decorator.py @defaults=\"['./examples/demo.json', './examples/demo2.json']\"\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ @defaults : ['./examples/demo.json', './examples/demo2.json']     â”‚\nâ”‚ log                                                               â”‚\nâ”‚ â”‚logger                                                           â”‚\nâ”‚ â”‚ â”‚log_level   : INFO                                             â”‚\nâ”‚ â”‚ â”‚logger_name : minydra                                          â”‚\nâ”‚ â”‚outdir  : /some/other/path                                       â”‚\nâ”‚ â”‚project : demo                                                   â”‚\nâ”‚ new_key   : 3                                                     â”‚\nâ”‚ verbose   : False                                                 â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n```\n\n<br/>\n\n### `pretty_print`\n\nPrints the `MinyDict` in a box, with dicts properly indented. A few arguments:\n\n1. `indents`, which defaults to `2`: the amount of indentation for nested dictionaries\n2. `sort_keys`, which defaults to `True`: whether or not to alphabetically sort the keys before printing\n\n<br/>\n\n### `to_dict`\n\nTo produce a native Python `dict`, use `args.to_dict()`\n\n<br/>\n\n### Protected attributes\n\n`MinyDict`'s methods (including the `dict` class's) are protected, they are read-only and you cannot therefore set _attributes_ with there names, like `args.get = 2`. If you do need to have a `get` argument, you can access it through _items_: `args[\"get\"] = 2`.\n\nTry with [`examples/protected.py`](examples/protected.py):\n\n```text\npython examples/protected.py server.conf.port=8000 get=3\nâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\nâ”‚ get    : 3         â”‚\nâ”‚ server             â”‚\nâ”‚ â”‚conf              â”‚\nâ”‚ â”‚ â”‚port : 8000     â”‚\nâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n<built-in method get of MinyDict object at 0x100ccd4a0>\n3\ndict_items([('get', 3), ('server', {'conf': {'port': 8000}})])\n{'conf': {'port': 8000}}\n```\n\n<br/><br/>\n\n## Tests\n\nRun tests and pre-commit checks (`isort`, `black`, `flake8`) with\n\n```bash\n$ pip install -r requirements-test.txt\n$ pre-commit run --all-files\n$ pytest -vv --cov=minydra tests/\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vict0rsch/minydra",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minydra",
    "package_url": "https://pypi.org/project/minydra/",
    "platform": "",
    "project_url": "https://pypi.org/project/minydra/",
    "project_urls": {
      "Homepage": "https://github.com/vict0rsch/minydra"
    },
    "release_url": "https://pypi.org/project/minydra/0.1.6/",
    "requires_dist": [
      "PyYaml ; extra == 'yaml'"
    ],
    "requires_python": ">=3.6",
    "summary": "Easily parse arbitrary arguments from the command line without dependencies",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12632522,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "763b13ba27c006714231d30d3cec43943a1d56a2a5176737ddeeff48d05d6587",
          "md5": "c1380dc1f46529508b43c713729d28fb",
          "sha256": "54c30360ae33a85e2620b5839e9348cabda387570f1a2ab12eb71183da343534"
        },
        "downloads": -1,
        "filename": "minydra-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1380dc1f46529508b43c713729d28fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9319,
        "upload_time": "2020-12-07T18:00:42",
        "upload_time_iso_8601": "2020-12-07T18:00:42.942372Z",
        "url": "https://files.pythonhosted.org/packages/76/3b/13ba27c006714231d30d3cec43943a1d56a2a5176737ddeeff48d05d6587/minydra-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1e2b021d800b0dcda369a5a4533ba9665d21e90a9dd50a37336fbd7db979ef8",
          "md5": "77c2244c95d19290fb5d2e30a30fb1e4",
          "sha256": "260430f5ad94168a839e5bacdc5b5057cf21e00d7c706c4b69f60eb4e8486386"
        },
        "downloads": -1,
        "filename": "minydra-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77c2244c95d19290fb5d2e30a30fb1e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9821,
        "upload_time": "2021-06-17T13:03:47",
        "upload_time_iso_8601": "2021-06-17T13:03:47.952594Z",
        "url": "https://files.pythonhosted.org/packages/e1/e2/b021d800b0dcda369a5a4533ba9665d21e90a9dd50a37336fbd7db979ef8/minydra-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8a6fc3b072b9b932a032aa14ffe8b74e550230a651bcfc726a8edf67814c5f3",
          "md5": "1ee7b6ceb7beef8212a5f7170b1de18e",
          "sha256": "a03bae650b49d4c7917d3e996c66f5d09d4c1adba379d80758d8a14c30bd2581"
        },
        "downloads": -1,
        "filename": "minydra-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ee7b6ceb7beef8212a5f7170b1de18e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13003,
        "upload_time": "2021-10-29T22:01:04",
        "upload_time_iso_8601": "2021-10-29T22:01:04.896341Z",
        "url": "https://files.pythonhosted.org/packages/d8/a6/fc3b072b9b932a032aa14ffe8b74e550230a651bcfc726a8edf67814c5f3/minydra-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0acf4cfbe6dffc7c42cb79bb35027961bc95a64c819bdf6cf1d2630020882a09",
          "md5": "cb4658037871c018a7d4f9ec12cf330c",
          "sha256": "1609442af3e423d6bed277adb587b846d0185e857de600e850f7c5a35f41f65e"
        },
        "downloads": -1,
        "filename": "minydra-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb4658037871c018a7d4f9ec12cf330c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14162,
        "upload_time": "2021-10-31T07:21:24",
        "upload_time_iso_8601": "2021-10-31T07:21:24.780930Z",
        "url": "https://files.pythonhosted.org/packages/0a/cf/4cfbe6dffc7c42cb79bb35027961bc95a64c819bdf6cf1d2630020882a09/minydra-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b452e1bbad490357f3351bd642e04657b08d109615e8cb2e4e8425e6e43755e3",
          "md5": "f4a9efdefbff0e5808c2a0d49b7c27a9",
          "sha256": "74ec7e8358612debe1e201d24cab4d653f76ace1ad9c369533f8989674c93fab"
        },
        "downloads": -1,
        "filename": "minydra-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4a9efdefbff0e5808c2a0d49b7c27a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15595,
        "upload_time": "2021-11-04T23:17:44",
        "upload_time_iso_8601": "2021-11-04T23:17:44.172455Z",
        "url": "https://files.pythonhosted.org/packages/b4/52/e1bbad490357f3351bd642e04657b08d109615e8cb2e4e8425e6e43755e3/minydra-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a06f073e28e53a9ca33d0e77088feb3633b4e795e8e1a2acc92a40ced701cf7d",
          "md5": "6f9c94fffef5de171756ec0d7cc58870",
          "sha256": "89628aa56e6fc5eed9e7ed44654851b42acedbda9ec91a1128a60c953cf80790"
        },
        "downloads": -1,
        "filename": "minydra-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f9c94fffef5de171756ec0d7cc58870",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17079,
        "upload_time": "2022-01-20T12:53:29",
        "upload_time_iso_8601": "2022-01-20T12:53:29.568180Z",
        "url": "https://files.pythonhosted.org/packages/a0/6f/073e28e53a9ca33d0e77088feb3633b4e795e8e1a2acc92a40ced701cf7d/minydra-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a06f073e28e53a9ca33d0e77088feb3633b4e795e8e1a2acc92a40ced701cf7d",
        "md5": "6f9c94fffef5de171756ec0d7cc58870",
        "sha256": "89628aa56e6fc5eed9e7ed44654851b42acedbda9ec91a1128a60c953cf80790"
      },
      "downloads": -1,
      "filename": "minydra-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f9c94fffef5de171756ec0d7cc58870",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17079,
      "upload_time": "2022-01-20T12:53:29",
      "upload_time_iso_8601": "2022-01-20T12:53:29.568180Z",
      "url": "https://files.pythonhosted.org/packages/a0/6f/073e28e53a9ca33d0e77088feb3633b4e795e8e1a2acc92a40ced701cf7d/minydra-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}