{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# powerdns-client\nNo description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n\nThis Python package is automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:\n\n- API version: 0.0.13\n- Package version: 1.0.4\n- Build package: io.swagger.codegen.languages.PythonClientCodegen\n\n## Requirements.\n\nPython 2.7 and 3.4+\n\n## Installation & Usage\n### pip install\n\nIf the python package is hosted on Github, you can install directly from Github\n\n```sh\npip install git+https://github.com/nrfta/python-powerdns-client.git\n```\n(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/nrfta/python-powerdns-client.git`)\n\nThen import the package:\n```python\nimport powerdns_client \n```\n\n### Setuptools\n\nInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).\n\n```sh\npython setup.py install --user\n```\n(or `sudo python setup.py install` to install the package for all users)\n\nThen import the package:\n```python\nimport powerdns_client\n```\n\n## Getting Started\n\nPlease follow the [installation procedure](#installation--usage) and then run the following:\n\n```python\nfrom __future__ import print_function\nimport time\nimport powerdns_client\nfrom powerdns_client.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: APIKeyHeader\nconfiguration = powerdns_client.Configuration()\nconfiguration.api_key['X-API-Key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['X-API-Key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = powerdns_client.ConfigApi(powerdns_client.ApiClient(configuration))\nserver_id = 'server_id_example' # str | The id of the server to retrieve\n\ntry:\n    # Returns all ConfigSettings for a single server\n    api_response = api_instance.get_config(server_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ConfigApi->get_config: %s\\n\" % e)\n```\n\n## Documentation for API Endpoints\n\nAll URIs are relative to *https://localhost/api/v1*\n\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*ConfigApi* | [**get_config**](docs/ConfigApi.md#get_config) | **GET** /servers/{server_id}/config | Returns all ConfigSettings for a single server\n*ConfigApi* | [**get_config_setting**](docs/ConfigApi.md#get_config_setting) | **GET** /servers/{server_id}/config/{config_setting_name} | Returns a specific ConfigSetting for a single server\n*SearchApi* | [**search_data**](docs/SearchApi.md#search_data) | **GET** /servers/{server_id}/search-data | Search the data inside PowerDNS\n*ServersApi* | [**cache_flush_by_name**](docs/ServersApi.md#cache_flush_by_name) | **PUT** /servers/{server_id}/cache/flush | Flush a cache-entry by name\n*ServersApi* | [**list_server**](docs/ServersApi.md#list_server) | **GET** /servers/{server_id} | List a server\n*ServersApi* | [**list_servers**](docs/ServersApi.md#list_servers) | **GET** /servers | List all servers\n*StatsApi* | [**get_stats**](docs/StatsApi.md#get_stats) | **GET** /servers/{server_id}/statistics | Query statistics.\n*TsigkeyApi* | [**create_tsig_key**](docs/TsigkeyApi.md#create_tsig_key) | **POST** /servers/{server_id}/tsigkeys | Add a TSIG key\n*TsigkeyApi* | [**delete_tsig_key**](docs/TsigkeyApi.md#delete_tsig_key) | **DELETE** /servers/{server_id}/tsigkeys/{tsigkey_id} | Delete the TSIGKey with tsigkey_id\n*TsigkeyApi* | [**get_tsig_key**](docs/TsigkeyApi.md#get_tsig_key) | **GET** /servers/{server_id}/tsigkeys/{tsigkey_id} | Get a specific TSIGKeys on the server, including the actual key\n*TsigkeyApi* | [**list_tsig_keys**](docs/TsigkeyApi.md#list_tsig_keys) | **GET** /servers/{server_id}/tsigkeys | Get all TSIGKeys on the server, except the actual key\n*TsigkeyApi* | [**put_tsig_key**](docs/TsigkeyApi.md#put_tsig_key) | **PUT** /servers/{server_id}/tsigkeys/{tsigkey_id} | \n*ZonecryptokeyApi* | [**create_cryptokey**](docs/ZonecryptokeyApi.md#create_cryptokey) | **POST** /servers/{server_id}/zones/{zone_id}/cryptokeys | Creates a Cryptokey\n*ZonecryptokeyApi* | [**delete_cryptokey**](docs/ZonecryptokeyApi.md#delete_cryptokey) | **DELETE** /servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id} | This method deletes a key specified by cryptokey_id.\n*ZonecryptokeyApi* | [**get_cryptokey**](docs/ZonecryptokeyApi.md#get_cryptokey) | **GET** /servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id} | Returns all data about the CryptoKey, including the privatekey.\n*ZonecryptokeyApi* | [**list_cryptokeys**](docs/ZonecryptokeyApi.md#list_cryptokeys) | **GET** /servers/{server_id}/zones/{zone_id}/cryptokeys | Get all CryptoKeys for a zone, except the privatekey\n*ZonecryptokeyApi* | [**modify_cryptokey**](docs/ZonecryptokeyApi.md#modify_cryptokey) | **PUT** /servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id} | This method (de)activates a key from zone_name specified by cryptokey_id\n*ZonemetadataApi* | [**create_metadata**](docs/ZonemetadataApi.md#create_metadata) | **POST** /servers/{server_id}/zones/{zone_id}/metadata | Creates a set of metadata entries\n*ZonemetadataApi* | [**delete_metadata**](docs/ZonemetadataApi.md#delete_metadata) | **DELETE** /servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind} | Delete all items of a single kind of domain metadata.\n*ZonemetadataApi* | [**get_metadata**](docs/ZonemetadataApi.md#get_metadata) | **GET** /servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind} | Get the content of a single kind of domain metadata as a Metadata object.\n*ZonemetadataApi* | [**list_metadata**](docs/ZonemetadataApi.md#list_metadata) | **GET** /servers/{server_id}/zones/{zone_id}/metadata | Get all the Metadata associated with the zone.\n*ZonemetadataApi* | [**modify_metadata**](docs/ZonemetadataApi.md#modify_metadata) | **PUT** /servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind} | Replace the content of a single kind of domain metadata.\n*ZonesApi* | [**axfr_export_zone**](docs/ZonesApi.md#axfr_export_zone) | **GET** /servers/{server_id}/zones/{zone_id}/export | Returns the zone in AXFR format.\n*ZonesApi* | [**axfr_retrieve_zone**](docs/ZonesApi.md#axfr_retrieve_zone) | **PUT** /servers/{server_id}/zones/{zone_id}/axfr-retrieve | Retrieve slave zone from its master.\n*ZonesApi* | [**create_zone**](docs/ZonesApi.md#create_zone) | **POST** /servers/{server_id}/zones | Creates a new domain, returns the Zone on creation.\n*ZonesApi* | [**delete_zone**](docs/ZonesApi.md#delete_zone) | **DELETE** /servers/{server_id}/zones/{zone_id} | Deletes this zone, all attached metadata and rrsets.\n*ZonesApi* | [**list_zone**](docs/ZonesApi.md#list_zone) | **GET** /servers/{server_id}/zones/{zone_id} | zone managed by a server\n*ZonesApi* | [**list_zones**](docs/ZonesApi.md#list_zones) | **GET** /servers/{server_id}/zones | List all Zones in a server\n*ZonesApi* | [**notify_zone**](docs/ZonesApi.md#notify_zone) | **PUT** /servers/{server_id}/zones/{zone_id}/notify | Send a DNS NOTIFY to all slaves.\n*ZonesApi* | [**patch_zone**](docs/ZonesApi.md#patch_zone) | **PATCH** /servers/{server_id}/zones/{zone_id} | Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.\n*ZonesApi* | [**put_zone**](docs/ZonesApi.md#put_zone) | **PUT** /servers/{server_id}/zones/{zone_id} | Modifies basic zone data (metadata).\n*ZonesApi* | [**rectify_zone**](docs/ZonesApi.md#rectify_zone) | **PUT** /servers/{server_id}/zones/{zone_id}/rectify | Rectify the zone data.\n\n\n## Documentation For Models\n\n - [CacheFlushResult](docs/CacheFlushResult.md)\n - [Comment](docs/Comment.md)\n - [ConfigSetting](docs/ConfigSetting.md)\n - [Cryptokey](docs/Cryptokey.md)\n - [Error](docs/Error.md)\n - [MapStatisticItem](docs/MapStatisticItem.md)\n - [Metadata](docs/Metadata.md)\n - [RRSet](docs/RRSet.md)\n - [Record](docs/Record.md)\n - [RingStatisticItem](docs/RingStatisticItem.md)\n - [SearchResult](docs/SearchResult.md)\n - [SearchResultComment](docs/SearchResultComment.md)\n - [SearchResultRecord](docs/SearchResultRecord.md)\n - [SearchResultZone](docs/SearchResultZone.md)\n - [SearchResults](docs/SearchResults.md)\n - [Server](docs/Server.md)\n - [Servers](docs/Servers.md)\n - [SimpleStatisticItem](docs/SimpleStatisticItem.md)\n - [StatisticItem](docs/StatisticItem.md)\n - [TSIGKey](docs/TSIGKey.md)\n - [Zone](docs/Zone.md)\n - [Zones](docs/Zones.md)\n\n\n## Documentation For Authorization\n\n\n## APIKeyHeader\n\n- **Type**: API key\n- **API key parameter name**: X-API-Key\n- **Location**: HTTP header\n\n\n## Author\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nrfta/python-powerdns-client",
    "keywords": "Swagger,PowerDNS Authoritative HTTP API",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "powerdns-client",
    "package_url": "https://pypi.org/project/powerdns-client/",
    "platform": "",
    "project_url": "https://pypi.org/project/powerdns-client/",
    "project_urls": {
      "Homepage": "https://github.com/nrfta/python-powerdns-client"
    },
    "release_url": "https://pypi.org/project/powerdns-client/1.0.4/",
    "requires_dist": [
      "certifi (>=2017.4.17)",
      "python-dateutil (>=2.1)",
      "six (>=1.10)",
      "urllib3 (>=1.23)"
    ],
    "requires_python": "",
    "summary": "PowerDNS Authoritative HTTP API",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8907767,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d185954eb461cb4f7442de475c2e034a73192c671936fda682b5e0b8a3074d8",
          "md5": "d4e3919b313c356aff17a0d5f5cab493",
          "sha256": "651b6c40b24584e71f883319d33d8c29e0cdff04d8191dc3e0c0b3f594e7f261"
        },
        "downloads": -1,
        "filename": "powerdns_client-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4e3919b313c356aff17a0d5f5cab493",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 89445,
        "upload_time": "2020-12-15T21:43:04",
        "upload_time_iso_8601": "2020-12-15T21:43:04.625053Z",
        "url": "https://files.pythonhosted.org/packages/2d/18/5954eb461cb4f7442de475c2e034a73192c671936fda682b5e0b8a3074d8/powerdns_client-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c2ee0d7789df0bfbc5fefc38e557d5bd8168dc3b58acb41145385928c8dcfb9",
          "md5": "dca3907640f31dbd4d624ca0d3f6ae78",
          "sha256": "567cbb5c8e51e26ff508bf1449b877b23aab67695c07dd05d0503fab90821ab1"
        },
        "downloads": -1,
        "filename": "powerdns-client-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dca3907640f31dbd4d624ca0d3f6ae78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39649,
        "upload_time": "2020-12-15T21:43:05",
        "upload_time_iso_8601": "2020-12-15T21:43:05.987173Z",
        "url": "https://files.pythonhosted.org/packages/7c/2e/e0d7789df0bfbc5fefc38e557d5bd8168dc3b58acb41145385928c8dcfb9/powerdns-client-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d185954eb461cb4f7442de475c2e034a73192c671936fda682b5e0b8a3074d8",
        "md5": "d4e3919b313c356aff17a0d5f5cab493",
        "sha256": "651b6c40b24584e71f883319d33d8c29e0cdff04d8191dc3e0c0b3f594e7f261"
      },
      "downloads": -1,
      "filename": "powerdns_client-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d4e3919b313c356aff17a0d5f5cab493",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 89445,
      "upload_time": "2020-12-15T21:43:04",
      "upload_time_iso_8601": "2020-12-15T21:43:04.625053Z",
      "url": "https://files.pythonhosted.org/packages/2d/18/5954eb461cb4f7442de475c2e034a73192c671936fda682b5e0b8a3074d8/powerdns_client-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c2ee0d7789df0bfbc5fefc38e557d5bd8168dc3b58acb41145385928c8dcfb9",
        "md5": "dca3907640f31dbd4d624ca0d3f6ae78",
        "sha256": "567cbb5c8e51e26ff508bf1449b877b23aab67695c07dd05d0503fab90821ab1"
      },
      "downloads": -1,
      "filename": "powerdns-client-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "dca3907640f31dbd4d624ca0d3f6ae78",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39649,
      "upload_time": "2020-12-15T21:43:05",
      "upload_time_iso_8601": "2020-12-15T21:43:05.987173Z",
      "url": "https://files.pythonhosted.org/packages/7c/2e/e0d7789df0bfbc5fefc38e557d5bd8168dc3b58acb41145385928c8dcfb9/powerdns-client-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}