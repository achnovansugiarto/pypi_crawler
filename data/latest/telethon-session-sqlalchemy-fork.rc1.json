{
  "info": {
    "author": "Vitor Daniel",
    "author_email": "vitor036daniel@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Telethon SQLAlchemy session\n===========================\n\nA `Telethon`_ session storage implementation backed by `SQLAlchemy`_.\n\n.. _Telethon: https://github.com/LonamiWebs/Telethon\n.. _SQLAlchemy: https://www.sqlalchemy.org/\n\nInstallation\n------------\n`telethon-session-sqlalchemy`_ @ PyPI\n\n.. code-block:: shell\n\n    pip install telethon-session-sqlalchemy\n\n.. _telethon-session-sqlalchemy: https://pypi.python.org/pypi/telethon-session-sqlalchemy\n\nUsage\n-----\nThis session implementation can store multiple Sessions in the same database,\nbut to do this, each session instance needs to have access to the same models\nand database session.\n\nTo get started, you need to create an ``AlchemySessionContainer`` which will\ncontain that shared data. The simplest way to use ``AlchemySessionContainer``\nis to simply pass it the database URL:\n\n.. code-block:: python\n\n    from alchemysession import AlchemySessionContainer\n    container = AlchemySessionContainer('postgres://user:pass@localhost/telethon')\n\nIf you already have SQLAlchemy set up for your own project, you can also pass\nthe engine separately:\n\n.. code-block:: python\n\n    my_sqlalchemy_engine = sqlalchemy.create_engine('...')\n    container = AlchemySessionContainer(engine=my_sqlalchemy_engine)\n\nBy default, the session container will manage table creation/schema updates/etc\nautomatically. If you want to manage everything yourself, you can pass your\nSQLAlchemy Session and ``declarative_base`` instances and set ``manage_tables``\nto ``False``:\n\n.. code-block:: python\n\n    from sqlalchemy.ext.declarative import declarative_base\n    from sqlalchemy import orm\n    import sqlalchemy\n    ...\n    session_factory = orm.sessionmaker(bind=my_sqlalchemy_engine)\n    session = session_factory()\n    my_base = declarative_base()\n    ...\n    container = AlchemySessionContainer(\n        session=session, table_base=my_base, manage_tables=False\n    )\n\nYou always need to provide either ``engine`` or ``session`` to the container.\nIf you set ``manage_tables=False`` and provide a ``session``, ``engine`` is not\nneeded. In any other case, ``engine`` is always required.\n\nAfter you have your ``AlchemySessionContainer`` instance created, you can\ncreate new sessions by calling ``new_session``:\n\n.. code-block:: python\n\n    session = container.new_session('some session id')\n    client = TelegramClient(session)\n\nwhere ``some session id`` is an unique identifier for the session.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tulir/telethon-session-sqlalchemy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "telethon-session-sqlalchemy-fork",
    "package_url": "https://pypi.org/project/telethon-session-sqlalchemy-fork/",
    "platform": "",
    "project_url": "https://pypi.org/project/telethon-session-sqlalchemy-fork/",
    "project_urls": {
      "Homepage": "https://github.com/tulir/telethon-session-sqlalchemy"
    },
    "release_url": "https://pypi.org/project/telethon-session-sqlalchemy-fork/0.2.16/",
    "requires_dist": null,
    "requires_python": "~=3.5",
    "summary": "SQLAlchemy backend for Telethon session storage",
    "version": "0.2.16",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10395417,
  "releases": {
    "0.2.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "264520427586d3f174ca105669a3dce526032b4aef046a93eaba8565995f447e",
          "md5": "5952457b4e57fe10ee687a89563cc3e6",
          "sha256": "c043a0a3f7fc0b6b6d744466a11c5e808c3ba7e50e9bebeb2b5cedb6b81709a5"
        },
        "downloads": -1,
        "filename": "telethon-session-sqlalchemy-fork-0.2.16.tar.gz",
        "has_sig": false,
        "md5_digest": "5952457b4e57fe10ee687a89563cc3e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.5",
        "size": 8963,
        "upload_time": "2021-05-18T19:59:00",
        "upload_time_iso_8601": "2021-05-18T19:59:00.130785Z",
        "url": "https://files.pythonhosted.org/packages/26/45/20427586d3f174ca105669a3dce526032b4aef046a93eaba8565995f447e/telethon-session-sqlalchemy-fork-0.2.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "264520427586d3f174ca105669a3dce526032b4aef046a93eaba8565995f447e",
        "md5": "5952457b4e57fe10ee687a89563cc3e6",
        "sha256": "c043a0a3f7fc0b6b6d744466a11c5e808c3ba7e50e9bebeb2b5cedb6b81709a5"
      },
      "downloads": -1,
      "filename": "telethon-session-sqlalchemy-fork-0.2.16.tar.gz",
      "has_sig": false,
      "md5_digest": "5952457b4e57fe10ee687a89563cc3e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.5",
      "size": 8963,
      "upload_time": "2021-05-18T19:59:00",
      "upload_time_iso_8601": "2021-05-18T19:59:00.130785Z",
      "url": "https://files.pythonhosted.org/packages/26/45/20427586d3f174ca105669a3dce526032b4aef046a93eaba8565995f447e/telethon-session-sqlalchemy-fork-0.2.16.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}