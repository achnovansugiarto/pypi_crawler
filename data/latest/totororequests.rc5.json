{
  "info": {
    "author": "Victor Paynat-Sautivet",
    "author_email": "contact@ray0.be",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Totoro\nTotoro is a simple Python module for sending HTTP(S) requests through Tor network.\n\nIt provides a way to create a parallel Tor process or connect to an existing Tor running service, and supports all controller authentication methods (none, socket, cookie and password).\n\nBasically it adds an abstract layer on top of the *stem* module and combines it with *requests*.\n\n**Requirements** :\n\n - Python 3\n - Python dependencies : [requests](https://requests.readthedocs.io), [stem](https://stem.torproject.org), [fake_useragent](https://pypi.org/project/fake-useragent/)\n\n**Tested on** : Kali 2020.1\n\n**License** : MIT\n\n## Getting started\n### Installation\nEnsure you have Tor installed on your system :\n\n - Debian based : `apt install tor`\n - RHEL based : `yum install tor`\n\nThen install Totoro : `pip3 install totororequests`\n\n### Example #1 : run a Tor process\nIn this example we use Totoro in the easiest way. Totoro will run Tor in a new process and generate a random password to protect the controller from being accessed outside the Python script context.\n```python\n#!/usr/bin/env python3\n\nfrom totororequests import Totoro\n\n# Get Totoro\ntoro = Totoro()\n\n# Start Tor process\nif toro.start():\n    print('Tor is running')\n\n# Get Tor status (will check both SocksPort and ControlPort/ControlSocket connection)\nstatus = toro.status() # True / False\n\n# Force the use of a VPN when sending requests over Tor\ntoro.require_vpn()\n\n# Get IP information (real IP and Tor IP)\nipinfo = toro.ipinfo()\n# {'vpn': {'ip': '85.124.56.92', ...}, 'tor': {'ip': '199.249.230.82', ...}}\n\n# Send a 'direct' request\nsess, resp = toro.dirreq('GET', 'https://google.com')\n\n# Send a request over Tor network\nsess, resp = toro.torreq('GET', 'https://google.com')\n\n# Stop Tor\nif toro.stop():\n    print('Tor is not running anymore')\n```\n\n### Example #2 : connect to a running Tor instance\nIn this example we connect Totoro to a running instance of Tor, potentially not on the same host. If you want to change your public IP address later, you'll need to authenticate to the controller (see the associated section).\n```python\n#!/usr/bin/env python3\n\nfrom totororequests import Totoro\n\ntoro = Totoro()\n\n# Connect to Tor already-running service\nif toro.connect(host='127.0.0.1', port=9050):\n    print('Successfully connected')\n\n# Authenticate to the controller\nauthok = toro.authenticate(method='password', port=9051, password='PASSWORD')\nif authok:\n    print('Successfully authenticated')\n\n# Send a request over Tor network\nsess, resp = toro.torreq('GET', 'https://google.com')\n\n# Request a new identity\nif authok:\n    change_identity(sync=True)\n\n# Send another request over Tor network (with new identity)\nsess, resp = toro.torreq('GET', 'https://google.com')\n```\n\n## Send requests\nTotoro is just a wrapper around the [requests](https://2.python-requests.org/en/latest/user/quickstart/) library.\n\nTo send a request over Tor network, you may use these nice methods :\n```python\n# toro.get()\n# toro.post()\n# toro.put()\n# toro.delete()\n# toro.patch()\n# toro.head()\n# toro.options()\n\n# Example :\nsess, resp = toro.post('https://example.com/login', data={'username':'admin', 'password':'admin'})\n```\nAs you can see, the method returns a tuple with a **Session** object (`sess`) and a **Response** object (`resp`).\n\nThe `resp` variable is what you want, it contains the headers of the response and its content.\n\nThe `sess` variable is useful because you can reuse it for a later request. A Session object allows you to persist certain parameters across requests ([read more](https://requests.readthedocs.io/en/master/user/advanced/#session-objects)) :\n```python\nsess, resp2 = toro.get('https://example.com/admin', session=sess)\n```\nDoing that you will reuse the Cookies (for instance) you got from the previous request on /login.\n\n## Authenticate to the Controller\nAs a client, it is possible to control Tor's behavior. Totoro lets you request a new identity (= a new IP address), but you must authenticate to the Tor Controller in order to do that.\n\nTwo options :\n\n - You have started a Tor process with the **start()** method (like in Example#1) : in that case you have nothing to do, Totoro is already authenticated to the new controller. It means you can call **change_identity()**.\n - You have connected to an already running instance of Tor using **connect()** (like in Example#2): before requesting a new identity you must follow the steps below.\n\nThe controller may be configured in different ways. Totoro supports all the authentication methods.\nDepending on your [**torrc** configuration](https://manpages.debian.org/stretch/tor/torrc.5.en.html), follow the appropriate section.\n\n### Auth : None\n\nIf your Tor Controller has opened a Control port with no authentication, like this (**torrc**) :\n```\nControlPort 9051\n```\nYou can authenticate this way :\n```python\ntoro.authenticate(method=None, port=9051)\n```\n\n### Auth : (Safe)Cookie\n\nIf your Tor Controller uses (safe)Cookie authentication, when starting Tor a cookie file will be created, generally with 600 rights. This means you should run your Python script with the same user you started Tor, or you'll run into problems. Here is the standard configuration for Cookie auth (**torrc**) :\n```\nControlPort 9051\nCookieAuthentication 1\nCookieAuthFile /home/user/.tor/control.authcookie\n```\nAnd you authenticate with Totoro like that :\n```python\ntoro.authenticate(method='cookie', port=9051)\n```\n\n### Auth : Password\n\nIf you use Password authentication, you must provide a password in order to authenticate to the controller. In the **torrc** configuration, you need the Hash of the password, obtained with the OpenPGP S2K algorithm :\n```\nControlPort 9051\nCookieAuthentication 0\nHashedControlPassword 16:FA9FED70DB6AEDE160DE15E9F1CEAE70DEA72B7D4505DC10782FF21AF3\n```\nTo easily get the hash, use the tor command :\n```\n$ tor --hash-password EXAMPLE_PASSWORD\n```\nAnd in your Python code :\n```python\ntoro.authenticate(method='password', port=9051, password='EXAMPLE_PASSWORD')\n```\n\n### Auth : Socket\n\nAnother way to communicate with the controller is using a Control socket (**torrc**) :\n```\nControlSocket /home/user/.tor/control.socket\n```\nTotoro can connect this way :\n```python\ntoro.authenticate(method='socket', socket=\"/home/user/.tor/control.socket\")\n```\n\n## Documentation\n\n### Totoro(`warnings=False`)\nCreates the main object.\n\nBy default you'll NOT get warnings on *stdout/stderr* when you perform an HTTPS request with `verify=False`. To make the warnings appear you can pass `warnings=True`. Behind the scene it simply does : `urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)`\n\n### Totoro.connect(`host, port`)\nConnects to a Tor service. Call it only if you're connecting to an external instance. If you use the classic approach with **start()**, it creates a Tor process and does everything for you.\n\nNote: You **MUST** use *start()* **OR** *connect()+authenticate()*, **NOT** both.\n```python\ntoro.connect(host='127.0.0.1', port=9050)\n```\nReturns True or False.\n\n### Totoro.start(`socks_port=9050, control_port=9051, tor_binary=None, password=None`)\nStarts a Tor process. That's the traditional way of using Totoro.\n\nNote: You **MUST** use *start()* **OR** *connect()+authenticate()*, **NOT** both.\n\nThe start process is as follow :\n\n- Choose a password to limit access to the future controller :\n\t- If a **password** is provided, use it ;\n\t- If not, generate a random [a-zA-Z0-9]{25} password.\n- Compute the hash of the password :\n\t- If the **tor_binary** path is provided (`/usr/bin/tor`), use the binary to get the hashed password ;\n\t- If not, compute the hash with the OpenPGP S2K algorithm.\n- Start the Tor process, and use **socks_port** and **control_port** to configure this newly created instance.\n\n```python\n# If ports 9050 and 9051 are available, keep it simple :\ntoro.start()\n```\nReturns True or False.\n\n### Totoro.status()\nReturns the status of Tor service by checking the connectivity with its Control Port/Socket and Socks port.\n```python\nif toro.status():\n    print('Service available')\n```\nReturns True or False.\n\n### Totoro.stop(`kill=False`)\nStops the previously created Tor process.\n\nBy default it sends a *SIGTERM* signal to the process. You can brutally kill it with `kill=True`.\n```python\ntoro.stop()\n```\n\nReturns True or False.\n\n### Totoro.require_vpn(`choice=True`)\nEnables or disables the \"VPN Strict Mode\".\n\nWhen enabled, your requests will fail if you're not connected to a VPN tunnel.\n```python\ntoro.require_vpn()\n```\nDuring the script execution you may want to enable/disable this behavior. You can use the parameter to change the setting.\n```python\ntoro.require_vpn(False)\n```\n\n### Totoro.vpn_status()\nChecks if the system is connected to a VPN.\n\nIt basically checks your **tun0** interface and routes associated.\n```python\nif toro.vpn_status():\n    print('VPN connection : OK')\n```\n\nReturns True or False.\n\n### Totoro.ipinfo()\nPerforms a direct and a Tor request and returns your IP information.\n\nIt uses the [IP Geolocation](https://ipgeolocation.io/) service.\n```python\ntoro.ipinfo()\n# {\n#     'direct': {\n#         'ip': 'xx.xx.xx.xx',\n#         'hostname': 'XXXX.abo.wanadoo.fr',\n#         'country_code2': 'FR',\n#         'country_code3': 'FRA',\n#         'country_name': 'France',\n#         'state_prov': 'Ile-de-France',\n#         'district': '',\n#         'city': 'Montmorency',\n#         'zipcode': 'ZZZZZ',\n#         'latitude': 'XXX',\n#         'longitude': 'XXX',\n#         'security': {\n#             'threat_score': 0,\n#             'is_tor': False,\n#             'is_proxy': False,\n#             'proxy_type': '',\n#             'is_anonymous': False,\n#             'is_known_attacker': False,\n#             'is_cloud_provider': False\n#         }\n#     },\n#     'tor': {\n#         'ip': '199.249.230.82',\n#         'hostname': 'tor29.quintex.com',\n#         'country_code2': 'US',\n#         'country_code3': 'USA',\n#         'country_name': 'United States',\n#         'state_prov': 'Texas',\n#         'district': '',\n#         'city': 'San Angelo',\n#         'zipcode': 'ZZZZZ',\n#         'latitude': 'XXX',\n#         'longitude': 'XXX',\n#         'security': {\n#             'threat_score': 7,\n#             'is_tor': True,\n#             'is_proxy': False,\n#             'proxy_type': ' ',\n#             'is_anonymous': True,\n#             'is_known_attacker': False,\n#             'is_cloud_provider': False\n#         }\n#     }\n# }\n```\nThe returned dictionary is composed by :\n\n - a `direct` attribute if you're not connected to a VPN ;\n - a `vpn` attribute if you're connected to a VPN ;\n - a `tor` attribute if you're connected to Tor network.\n\nSee the [IP Geolocation API](https://ipgeolocation.io/documentation/ip-geolocation-api.html) for information on the returned JSON object.\n\n### Totoro.dirreq(`[...], session=None`)\nPerforms a direct request (with your official public connection).\n\nUse it exactly as you'd use the [requests.request](https://requests.readthedocs.io/en/master/api/) method. You must pass the `method` parameter to specify the HTTP verb.\n```python\nsess, resp = toro.dirreq('GET', 'https://google.com')\n```\nReturns a tuple composed by the Session object and Response.\n\nThe `session` parameter may be passed to reuse a Session from a previous request (and persist data like cookies).\n\nWhy this method ? Why not using directly requests without Totoro for this purpose? You're right. The only advantage of this method compared to standard *requests.method()* is that you can benefit from the VPN Strict Mode and the fake User-Agent.\n\n### Totoro.torreq(`[...], session=None`)\nPerforms a request over the Tor network.\n\nThe same as above, you may use it like [requests.request](https://requests.readthedocs.io/en/master/api/). It automatically adds the proxies settings to use Tor.\n```python\nsess, resp = toro.torreq('GET', 'https://google.com')\n```\nReturns a tuple composed by the Session object and Response.\n\nThe `session` parameter may be passed to reuse a Session from a previous request (and persist data like cookies).\n\nIn practice you'll use the below helpers...\n\n### get(), post(), put(), patch(), delete(), options(), head()\nHelpers to make it more user-friendly. It's the same you can use with *requests*.\n\nAll these methods send the request over Tor. They redirect all the parameters to the **torreq()** method.\n```python\nsess, resp = toro.get('https://example.com/admin', cookies={'PHPSESSID':'XXXXXX'})\nsess, resp = toro.post('https://example.com/login', data={'username':'admin', 'password':'admin'})\n# [...]\n```\nThen it also returns a tuple with (Session, Response), and you may pass the `session` parameter as well.\n\n### Totoro.annoy(`url, times=1, threads=10, sync=False`)\nSend `times` requests to `url` and immediately drops them (without waiting for response).\n\nConsequences : As HTTP is over the TCP protocol, a TCP handshake needs to be performed. When using this method you'll start the handshake and cancel it instantly. It will just tickle / SYN flood the remote server.\n\nChange `threads` param to control the number of threads used to send the fake requests.\n\nWhen using `sync=True`, the requests are sent synchronously, and it blocks your script.\n\n```python\ntoro.annoy('https://example.com', times=100)\n```\n\nNote : Do not use it to generate fake logs because it won't work. Use *make_noise()* instead.\n\n### Totoro.make_noise(`urls, times=1, threads=10, shuffle=False, sync=False, timeout=5`)\nSends a series of HTTP requests, `times` times, in parallel threads and without waiting for responses.\n\nEach request is complete (unlike with the *annoy()* method) so it appears in the accesslog of the remote server and you may use it to generate fake logs.\n\nThe `urls` parameter must be a list of URL to fetch, in the following formats :\n\n - Just the URL (default to GET verb) : `https://example.com/admin`\n - Verb + [space] + URL : `POST https://example.com/admin`\n\nWhen using `shuffle=True` :\n\n - The total number of sent requests is `times` (it sends `times` times a random request from the list) ;\n - The requests are sent in whatever order, and randomly picked.\n\nWhen using `shuffle=False` :\n\n - The total number of sent requests is `times * len(urls)` (it sends `times` times the entire list of requests) ;\n - The requests are sent in the order of the list ;\n - There is no guarantee that they are received in exact same order (and generally won't).\n\nFor instance, this instruction :\n```python\ntoro.make_noise([\n    'https://example.com/',\n    'https://example.com/favicon.ico',\n    'GET https://example.com/css/bootstrap.min.css',\n    'GET https://example.com/js/jquery.min.js',\n    'POST https://example.com/login',\n    'DELETE https://example.com/user/15/avatar'\n], times=15, shuffle=True)\n```\n...will send 15 requests, randomly picked from the `urls` list.\n\nWhen using `sync=True`, the requests are sent synchronously, and it blocks your script.\n\nChange the `timeout` param to set a timeout (in seconds) for each request in the thread pool.\n\n### Totoro.authenticate(`method=None, port=None, socket=None, password=None`)\nSets the authentication parameters and instantiate the connection to the controller. Call it only if you're connecting to an external instance.\n\nNote: You **MUST** use *start()* **OR** *connect()+authenticate()*, **NOT** both.\n\nParameters :\n\n - **method** : specify the authentication method (None, `cookie`, `socket`, `password`)\n - **port** : controller port (required **except** if `method=\"socket\"`)\n - **socket** : socket path (required **only** if `method=\"socket\"`)\n - **password** : authentication password (**only** if `method=\"password\"`)\n\nSee the section \"*Authenticate to the Controller*\" for more details.\n\nReturns True or False.\n\n### Totoro.controller()\nReturns the controller object. It is an instance of [stem.control.Controller](https://stem.torproject.org/api/control.html).\n\nTotoro just uses it to change the identity, but you may want to do more...\n```python\nctrl = toro.controller()\n\nprint('Protocol Info :')\nprint(ctrl.get_protocolinfo())\n\nprint('Circuit Status :')\nprint(ctrl.get_info('circuit-status'))\n```\n\n### Totoro.change_identity(`sync=False`)\nRequests a new identity (and likely a new IP address).\n\nBy default it just sends a NEWNYM signal to Tor controller and don't wait. That means it's not synchronous and it may take a few seconds for the new identity to be effective.\n```python\ntoro.change_identity()\n```\nYou may want to wait until the new identity is OK :\n```python\ntoro.change_identity(sync=True)\n```\nCaution : it may block the script during several seconds.\n\n### Exceptions\nSometimes an exception can be raised by the Totoro engine.\n\n - **TotoroException** : different reasons, generally when you provide incorrect parameters to Totoro methods (see the error message for more information) ;\n - **TorNotRunningTotoroException** : you tried to send a request through Tor but Tor is not running ;\n - **VPNNotConnectedTotoroException** : you tried to send a request while VPN Strict Mode is enable, and your VPN connection seems to be broken.\n\n## Changelog\n\nVersion history :\n\n - 1.2.0 - Added dependencies in setup.py, hid SSL warnings by default, improved newnym request behavior, and made Totoro compatible with requests to _.onion_ domains\n - 1.1.3 - Added default User-Agent (fallback) to avoid exceptions when it's not possible to fetch the list from internet\n - 1.1.1 & 1.1.2 - Optimization on thread methods (annoy & make_noise) : proper pool closure, requests timeout, better and more elegant code\n - 1.1.0 - New methods : *annoy()* and *make_noise()*\n - 1.0.0 - Initial version of Totoro\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ray0be/totororequests",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "totororequests",
    "package_url": "https://pypi.org/project/totororequests/",
    "platform": "",
    "project_url": "https://pypi.org/project/totororequests/",
    "project_urls": {
      "Homepage": "https://github.com/ray0be/totororequests"
    },
    "release_url": "https://pypi.org/project/totororequests/1.2.0/",
    "requires_dist": [
      "requests",
      "stem",
      "fake-useragent"
    ],
    "requires_python": ">=3.6",
    "summary": "Smart Python module for sending HTTP(S) requests through Tor network",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8889287,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd61958c81c8c31c166a181e22e616d75efce37308b5316aaa71cb7827068110",
          "md5": "5412be1289a2af9e747b86280f296c6d",
          "sha256": "0861ffcd9aa6415e64cc77c1d862d830efb903c32ddacd395fe90c385c086374"
        },
        "downloads": -1,
        "filename": "totororequests-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5412be1289a2af9e747b86280f296c6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12594,
        "upload_time": "2020-04-21T22:56:30",
        "upload_time_iso_8601": "2020-04-21T22:56:30.969935Z",
        "url": "https://files.pythonhosted.org/packages/cd/61/958c81c8c31c166a181e22e616d75efce37308b5316aaa71cb7827068110/totororequests-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d33acbb35a98a80f631ca4540076c40ac0bd64b8cd8c04dc7fb972708c167f92",
          "md5": "03d412d20dd49b04c717c1f7dfd93b8e",
          "sha256": "b83c08ac022fe05ab1e9f26fd1850f3d68f2c1e2268060fd1ea871e3c477bbfd"
        },
        "downloads": -1,
        "filename": "totororequests-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "03d412d20dd49b04c717c1f7dfd93b8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16012,
        "upload_time": "2020-04-21T22:56:33",
        "upload_time_iso_8601": "2020-04-21T22:56:33.641978Z",
        "url": "https://files.pythonhosted.org/packages/d3/3a/cbb35a98a80f631ca4540076c40ac0bd64b8cd8c04dc7fb972708c167f92/totororequests-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "253bad8b42ecf70c4acefd272f2a5add05566fa5882c998dc47d998bee7a7080",
          "md5": "cedc0de1d580823132ebcc7d4b561361",
          "sha256": "fd2d13fd993094017beee9285f66b983645e1df7b2404eb0fb4b5deded53f38c"
        },
        "downloads": -1,
        "filename": "totororequests-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cedc0de1d580823132ebcc7d4b561361",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14430,
        "upload_time": "2020-05-06T07:45:56",
        "upload_time_iso_8601": "2020-05-06T07:45:56.113659Z",
        "url": "https://files.pythonhosted.org/packages/25/3b/ad8b42ecf70c4acefd272f2a5add05566fa5882c998dc47d998bee7a7080/totororequests-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92e06f00b2cc8397a2bbe45d6c406cbea4b04c3e4806a3f356e43ffa52fa0440",
          "md5": "f35c53b5c59f7fbfc5052c2e4f9f5cf3",
          "sha256": "aaf191af7ddb1e4f852a70b70edb137b73e2505c0ea342946daa8ca3788cd42b"
        },
        "downloads": -1,
        "filename": "totororequests-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f35c53b5c59f7fbfc5052c2e4f9f5cf3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18787,
        "upload_time": "2020-05-06T07:45:57",
        "upload_time_iso_8601": "2020-05-06T07:45:57.515527Z",
        "url": "https://files.pythonhosted.org/packages/92/e0/6f00b2cc8397a2bbe45d6c406cbea4b04c3e4806a3f356e43ffa52fa0440/totororequests-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a707f2610da31ab7e288804bc4edb1b3ec94b8465348b7820fd4a777a080245",
          "md5": "d14a2353f7b4ffab12511c4e8f7402af",
          "sha256": "2c8c7b3efaf00e52be3f31c15f94aae35f635406f06ea43d51adbc862c881d80"
        },
        "downloads": -1,
        "filename": "totororequests-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d14a2353f7b4ffab12511c4e8f7402af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14535,
        "upload_time": "2020-05-06T08:07:55",
        "upload_time_iso_8601": "2020-05-06T08:07:55.317495Z",
        "url": "https://files.pythonhosted.org/packages/5a/70/7f2610da31ab7e288804bc4edb1b3ec94b8465348b7820fd4a777a080245/totororequests-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "641a0779cc6cd5f77433ef068bbfe487667cd8297a1233571b34164d1a7a3a54",
          "md5": "32211e9f24e709c92b5c0c58ed19ba9f",
          "sha256": "17c7d0aa7dc9ad81eeb474081d6762636b5d001137f3ee403e8dc9d930211e9d"
        },
        "downloads": -1,
        "filename": "totororequests-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "32211e9f24e709c92b5c0c58ed19ba9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18976,
        "upload_time": "2020-05-06T08:07:58",
        "upload_time_iso_8601": "2020-05-06T08:07:58.270723Z",
        "url": "https://files.pythonhosted.org/packages/64/1a/0779cc6cd5f77433ef068bbfe487667cd8297a1233571b34164d1a7a3a54/totororequests-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4466291783d00888c1a65dcf98c8d2870e979ed4ab896d3711d116cc1d90e3a4",
          "md5": "0393b66e91d1d9ab1ad249cfb976e9d0",
          "sha256": "608a9762e1400964a4d24080718741bd3604bdd39d34e355e449bb34b71a7d3e"
        },
        "downloads": -1,
        "filename": "totororequests-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0393b66e91d1d9ab1ad249cfb976e9d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14692,
        "upload_time": "2020-06-08T12:22:18",
        "upload_time_iso_8601": "2020-06-08T12:22:18.473697Z",
        "url": "https://files.pythonhosted.org/packages/44/66/291783d00888c1a65dcf98c8d2870e979ed4ab896d3711d116cc1d90e3a4/totororequests-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f07e53762522012905eeeb2a441caa6c9323d126cb4c00b8df25b07ff79625be",
          "md5": "bbb2e43b9c8faedefbc229b4c64a4e71",
          "sha256": "d7bb736452b76581242e3a1f4e10c2c1c57f2d4a7dc413a76909ba00903b0e00"
        },
        "downloads": -1,
        "filename": "totororequests-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bbb2e43b9c8faedefbc229b4c64a4e71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19228,
        "upload_time": "2020-06-08T12:22:19",
        "upload_time_iso_8601": "2020-06-08T12:22:19.835378Z",
        "url": "https://files.pythonhosted.org/packages/f0/7e/53762522012905eeeb2a441caa6c9323d126cb4c00b8df25b07ff79625be/totororequests-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "836c8c7f41e2d0b5e785377e93188f0e700568cbbdf84485144af3a3f7176d63",
          "md5": "7ee52fe6bcf85476eededf3f79c20d38",
          "sha256": "384f2ac9749942723797e99e62237e8c1d60054ae86eef016eff6e3b913f0e35"
        },
        "downloads": -1,
        "filename": "totororequests-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ee52fe6bcf85476eededf3f79c20d38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14798,
        "upload_time": "2020-12-13T13:16:40",
        "upload_time_iso_8601": "2020-12-13T13:16:40.214223Z",
        "url": "https://files.pythonhosted.org/packages/83/6c/8c7f41e2d0b5e785377e93188f0e700568cbbdf84485144af3a3f7176d63/totororequests-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2129f9af81ea8b0974103f9656b513425d8017e4035964714e70515772ce5f90",
          "md5": "8d571934d156f8a6c45f44f35f0c9112",
          "sha256": "edbbcad3ff3390b336922bbf4e191328434179ee6c6b7b7afbd66025e10a4bc8"
        },
        "downloads": -1,
        "filename": "totororequests-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d571934d156f8a6c45f44f35f0c9112",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19460,
        "upload_time": "2020-12-13T13:16:41",
        "upload_time_iso_8601": "2020-12-13T13:16:41.425405Z",
        "url": "https://files.pythonhosted.org/packages/21/29/f9af81ea8b0974103f9656b513425d8017e4035964714e70515772ce5f90/totororequests-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "836c8c7f41e2d0b5e785377e93188f0e700568cbbdf84485144af3a3f7176d63",
        "md5": "7ee52fe6bcf85476eededf3f79c20d38",
        "sha256": "384f2ac9749942723797e99e62237e8c1d60054ae86eef016eff6e3b913f0e35"
      },
      "downloads": -1,
      "filename": "totororequests-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7ee52fe6bcf85476eededf3f79c20d38",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14798,
      "upload_time": "2020-12-13T13:16:40",
      "upload_time_iso_8601": "2020-12-13T13:16:40.214223Z",
      "url": "https://files.pythonhosted.org/packages/83/6c/8c7f41e2d0b5e785377e93188f0e700568cbbdf84485144af3a3f7176d63/totororequests-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2129f9af81ea8b0974103f9656b513425d8017e4035964714e70515772ce5f90",
        "md5": "8d571934d156f8a6c45f44f35f0c9112",
        "sha256": "edbbcad3ff3390b336922bbf4e191328434179ee6c6b7b7afbd66025e10a4bc8"
      },
      "downloads": -1,
      "filename": "totororequests-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8d571934d156f8a6c45f44f35f0c9112",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19460,
      "upload_time": "2020-12-13T13:16:41",
      "upload_time_iso_8601": "2020-12-13T13:16:41.425405Z",
      "url": "https://files.pythonhosted.org/packages/21/29/f9af81ea8b0974103f9656b513425d8017e4035964714e70515772ce5f90/totororequests-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}