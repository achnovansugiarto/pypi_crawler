{
  "info": {
    "author": "Shlok Pandey",
    "author_email": "shlokpandey123@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Automata Toolkit\n\nAutomata toolkit is a small library which contains tools to convert, minimize and visualize Regular Expressions, NFA and DFA.\n\n## Installation\n\n### Prerequisites\n\n```bash\nsudo apt install graphviz\npip install graphviz==0.16\n```\n\n### Install\n\n```bash\npip install automata-toolkit\n```\n\n## Modules\n\n### regex_to_postfix\n\n- This module converts any given regular expression to its equivalent postfix expression.\n- The conversion from regular expression to postfix representation makes use of Shunting Yard Algorithm which arranges the expression from left to right based on the priority order of operations.\n- Functions are as follows:\n  - regex_to_postfix(reg_exp)\n  - is_alphabet(c)\n\n### regex_to_nfa\n\n- This module converts any given regular expression to its equivalent NFA.\n- The conversion process is split into two parts: conversion of given expression to its postfix representation, and then using that postfix representation to create NFA.\n- The conversion from regular expression to postfix representation makes use of Shunting Yard Algorithm which arranges the expression from left to right based on the priority order of operations.\n- Then this postfix representation is converted to NFA using Thompson's construction algorithm, where characters from postfix representation are pushed into a queue, and operators are pushed into a stack. This stack is emptied and operations gets applied to the elements in the queue, once any opertor having lower or equal priority is about to get pushed into the stack.\n- This is how it gives us an equivalent Non Deterministic Finite Automata.\n- Functions are as follows:\n  - regex_to_nfa(reg_exp)\n  - get_alphabet_nfa(character, alphabets)\n  - concat_nfa(nfa1, nfa2)\n  - union_nfa(nfa1, nfa2)\n  - cleene_star_nfa(nfa1)\n\n### nfa_to_dfa\n\n- This module converts a given NFA to its equivalent DFA.\n- Initially the epsilon enclosure of all the states is calculated and stored in a dictionary.\n- Then, DFA[start_state] = Epsilon[NFA[start_state]]\n- Then for calculating the transitions, the program first calculates the Epsilon enclosure of that state, and then checks for alphabet based state transitions.\n- And this is how we obtain a deterministic finite state automata. Note that DFA obtained may not be the minimal one.\n- Functions are as follows:\n  - nfa_to_dfa(nfa)\n  - get_epsilon_closure(nfa, dfa_states, state)\n\n### dfa_to_regex\n\n- This module obtains a regular expression of the given DFA.\n- Initially a GNFA is created by removing all the unreachable and dead states. Then we add a new start state with epsilon transition to original start stare, and connect all the original final states to a new final state using epsilon transitions.\n- Now, all the states except the new initial, and final state, are removed one by one.\n- While removing a particular state, the program first checks for any self loops. If multiple self loops exist, then program does a union of all these parallel transitions alphbets, and thus adds a cleene star over it.\n- Then this cleen star value is concatenated to alphabets/strings of all the outgoing states.\n- At the end, the incoming states'alphabets/strings are concatenated with the alphabets/strings of all the outgoing states, and then this state is removed.\n- Upon iterating same procedure for all middle states, we arrive at a point when only initial and final states are left.\n- The transition string between them is the required regular expression. Note that this regular expression might not be the simplified one.\n- Functions are as follows:\n  - dfa_to_regex(dfa)\n  - union_regex(a, b)\n  - concat_regex(a, b)\n  - cleene_star_regex(a)\n  - bracket(a)\n\n### dfa_to_efficient_dfa\n\n- This module calculates the minimal equivalent DFA for a given DFA.\n- It makes use of Myhill Nerode theorem or in simple words, table filling algorithm.\n- Initially a states\\*states sized table is initialized with 0 value in all the cells.\n- Then cell with final state, non-final state pairs are marked with 1.\n- Then we check for unmarked state pairs, that whether any of their transition state pairs based on a particular alphabet value results in a marked cell.\n- If yes, then mark that cell as 1, otherwise continue.\n- This procedure is repeated multiple times until all the cell values achieve a stable state, i.e. they donot change.\n- Now we merge all the unmarked state pairs. In order to merge this efficiently, this program uses union find data structure.\n- After merging all the unmarked pairs, we obtain a minimal equivalent DFA.\n- Functions are as follows:\n  - dfa_to_efficient_dfa(dfa)\n\n### visual_utils\n\n- This module contains functions to visualize the NFA or DFA using `graphviz` library.\n- Functions are as follows:\n  - draw_nfa(nfa, title=\"\")\n  - draw_dfa(dfa, title=\"\")\n\n## Input Format\n\n### Regular Expression\n\n- string\n- Input regular expression should be syntactically correct\n\n### NFA\n\n```\n{\n   \"states\": [\n       <state_ids>,\n       ...\n   ],\n   \"initial_state\": <initial_state_id>,\n   \"final_states\": [\n       <state_ids>,\n       ...\n   ],\n   \"alphabets\": [\n      \"$\",\n       <alphabets>,\n      ...\n   ],\n   \"transition_function\": {\n       <state_id>: {\n           <alphabet>: [\n               <state_ids>,\n           ],\n           ... # transition for all alphabets shoud be present here\n       },\n       ...\n   }\n}\n```\n\n### DFA\n\n```\n{\n   \"states\": [\n       \"phi\",\n       <state_ids>,\n       ...\n    ],\n    \"initial_state\": <state_id>,\n    \"final_states\":[\n       <state_ids>,\n       ...\n    ],\n    \"alphabets\": [\n       <alphabets>,\n       ...\n    ],\n    \"transition_function\": {\n        <state_id>: {\n            <alphabet>: <state_id>,\n            ... # transition for all alphabets shoud be present here. In case of no transition, alphabet must point to phi\n        },\n        ...\n    },\n    \"reachable_states\": [\n        <state_ids>,\n        ...\n    ],\n    \"final_reachable_states\": [\n        <state_ids>,\n        ...\n    ],\n}\n```\n\n## Dependencies:\n\n- Python 3\n- Graphviz\n\n> Note: Visualizer can generate visualizations but will not get triggered in WSL (Windows Subsystem for Linux). This library has been tested in Ubuntu, Elementary OS.\n\n## Author\n\nThis project is developed by Shlok Pandey aka [b30wulffz](https://github.com/b30wulffz) and is licensed under the MIT License.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/b30wulffz/automata-toolkit",
    "keywords": "automata,visualizer,nfa,dfa,regular expression",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "automata-toolkit",
    "package_url": "https://pypi.org/project/automata-toolkit/",
    "platform": "",
    "project_url": "https://pypi.org/project/automata-toolkit/",
    "project_urls": {
      "Homepage": "https://github.com/b30wulffz/automata-toolkit"
    },
    "release_url": "https://pypi.org/project/automata-toolkit/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A tiny library which contains tools to convert, minimize and visualize Regular Expressions, NFA and DFA.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10425392,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07626a31733047373c3beb4a6dfee4cae22761d7197fb374b9e5ecc5cc53f104",
          "md5": "8a4f99d13685a5a30cdcbaf262a88608",
          "sha256": "ac14f37c55c1eb2aab14fc74763684a6024db4802e9ced176ac33a87404edd68"
        },
        "downloads": -1,
        "filename": "automata_toolkit-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a4f99d13685a5a30cdcbaf262a88608",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11479,
        "upload_time": "2021-05-21T08:36:24",
        "upload_time_iso_8601": "2021-05-21T08:36:24.150783Z",
        "url": "https://files.pythonhosted.org/packages/07/62/6a31733047373c3beb4a6dfee4cae22761d7197fb374b9e5ecc5cc53f104/automata_toolkit-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aaf11633ca8d7ff3c09f28bcc73f3e29b01384d5e26677c13955d3941262e482",
          "md5": "e798fbdf198ad04c8dff2d2e3588c6ad",
          "sha256": "812ac673ded30ddd97fdf2c1abfbeb3273024e12d0bef3b8c858447c0a9b2cc1"
        },
        "downloads": -1,
        "filename": "automata_toolkit-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e798fbdf198ad04c8dff2d2e3588c6ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11770,
        "upload_time": "2021-05-21T08:36:26",
        "upload_time_iso_8601": "2021-05-21T08:36:26.081883Z",
        "url": "https://files.pythonhosted.org/packages/aa/f1/1633ca8d7ff3c09f28bcc73f3e29b01384d5e26677c13955d3941262e482/automata_toolkit-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07626a31733047373c3beb4a6dfee4cae22761d7197fb374b9e5ecc5cc53f104",
        "md5": "8a4f99d13685a5a30cdcbaf262a88608",
        "sha256": "ac14f37c55c1eb2aab14fc74763684a6024db4802e9ced176ac33a87404edd68"
      },
      "downloads": -1,
      "filename": "automata_toolkit-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a4f99d13685a5a30cdcbaf262a88608",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11479,
      "upload_time": "2021-05-21T08:36:24",
      "upload_time_iso_8601": "2021-05-21T08:36:24.150783Z",
      "url": "https://files.pythonhosted.org/packages/07/62/6a31733047373c3beb4a6dfee4cae22761d7197fb374b9e5ecc5cc53f104/automata_toolkit-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aaf11633ca8d7ff3c09f28bcc73f3e29b01384d5e26677c13955d3941262e482",
        "md5": "e798fbdf198ad04c8dff2d2e3588c6ad",
        "sha256": "812ac673ded30ddd97fdf2c1abfbeb3273024e12d0bef3b8c858447c0a9b2cc1"
      },
      "downloads": -1,
      "filename": "automata_toolkit-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e798fbdf198ad04c8dff2d2e3588c6ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11770,
      "upload_time": "2021-05-21T08:36:26",
      "upload_time_iso_8601": "2021-05-21T08:36:26.081883Z",
      "url": "https://files.pythonhosted.org/packages/aa/f1/1633ca8d7ff3c09f28bcc73f3e29b01384d5e26677c13955d3941262e482/automata_toolkit-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}