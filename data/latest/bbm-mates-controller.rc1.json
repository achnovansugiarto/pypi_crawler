{
  "info": {
    "author": "Breadboard Mates",
    "author_email": "developers@breadboardmates.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![image](https://raw.githubusercontent.com/BreadBoardMates/BBM-Python-Mates-Controller/main/logo.png)\n\n\n# BBM Python Mates Controller Library\n\nThis is a Python Library developed to be used with Mates Studio Commander or Architect Environment and BBM modules connected using BBM programmer or similar USB-to UART modules. This library is aimed to be simple enough to learn for beginners and feature-rich for experienced developers.\n\nIt is used for communicating with BBM Devices, over serial port and contains various methods for sending and retrieving data relating to display widgets, their states and parameters and the health of the controller. Helpful classes and datatypes can be found in `mates.constants` module.\n\n## Hardware and Software Support\nThis library is developed for Python3 and designed to be used with any operating system as long as it is supported by the `pyserial` library.\n\n## Installation\nThis library can be installed from the Python Packaging Index by running the command:\n\n    pip3 install bbm-mates-controller\n\n---\n\n## Library Discussion\n\n### Constructor\n\n#### ***MatesController(portName, debugStream, debugFileLength)***\n\nConstructs all the necessary attributes associated with an instance\nof a Mates Controller Object.\n\n**Args**:\n\nportName: str\n\n- the name of the port to be opened. Example: /dev/ttyUSB0 for linux.\n\ndebugStream: io.TextIOWrapper\n\n- Text file object to write debugging code to, supply of none will result in no debugging. Examples include sys.stdout, open('log.txt', 'r+')\n\ndebugFileLength: int\n\n- Determines the extent of debug history kept with respect to lines in a file, given a circular log. O indicates full history kept with no circular logging. Users must be careful here to manage storage space effectively.\n\n##### Example No. 1:\n    # Creates a new instance named 'mates' which utilizes: \n    #  - COM10 as the serial port\n    #  - with no reset function and no output stream\n    MatesController mates = MatesController(\"COM10\") \n\n##### Example No. 2:\n    # Creates a new instance named 'mates' which utilizes: \n    #  - COM10 as the serial port\n    #  - output_file as debug file stream\n    #  - debugFileLength of zero indicating no circular logging\n    MatesController mates = MatesController(\"COM10\", debugStream=output_file, debugFileLength=0) \n\n**Note:** _If a debug file is specified, it should be opened using either 'w+' or 'r+' before running the begin() function of this library._\n<br/>\n\n### Methods\n\n#### ***begin(baudrate)***  \n\nBegins the serial connection if portname not supplied in constructor.\n\n**Args**:\n\nbaudrate: int\n\n- the baudrate of the serial port (default: 9600)\n\n**Returns**:\n\n- void\n\n##### Example No. 1: \n    # Initializes display serial port 9600 baud\n    # and resets the display if a reset function is provided\n    mates.begin(9600) \n\n<br/>\n\n#### ***close()***  \n\nCloses opened serial port.\n\n**Args**:\n\nvoid.\n\n**Returns**:\n\nvoid.\n\n##### Example:\n    # Closes serial port\n    mates.close()\n\n<br/>\n\n#### ***reset(waitPeriod)***  \n\nUses hardware driven signal to hard reset companion device.\n\n**Args**:\n\nwait_period: int\n\n- determines how long to wait (milliseconds) before checking for connection. Value must be within the uint16 datatype range (default: 5000)\n\n**Returns**:\n\n- boolean response of reset.\n\n##### Example:\n    # Reset the display and wait for\n    mates.reset()         # a period of 5 seconds (default)\n    # Reset the display and wait for\n    # mates.reset(4000)   # a period of 4 seconds\n\n<br/>\n\n#### ***softReset(waitPeriod)***\n\nSends a serial command to the connected device to trigger a reset.\n\n**Args**:  \nwaitPeriod: int\n\n- determines how long (milliseconds) to wait before timing out after no acknowledgement. Value must be within the uint16 datatype range.\n\n**Returns**:\n\n- boolean response of reset\n\n##### Example:\n    # Reset the display and wait for\n    mates.softReset()       # a period of 5 seconds (default)\n    # Reset the display and wait for\n    mates.softReset(4000)   # a period of 4 seconds\n\n<br/>\n\n#### ***setBacklight(backlightValue)***  \n\nSets the intensity of the backlight of connected device.\n\n**Args**:  \nbacklightValue: int\n\n- intensity of backlight. Value must be between 0 and 15, and within the uint8 datatype range.\n\n**Returns**:  \n\n- boolean response indicating command success or failure.\n\n##### Example:\n    # set backlight value of 15 (max)\n    mates.setBacklight(15)\n    \n<br/>\n\n#### ***setPage(pageIndex)***\n\nSets the page to be displayed on the connected device.\n\n**Args**:  \npageIndex: int\n\n- index of page to set as current. Value must be within the uint16 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setPage(1) # Navigate to Page1\n\n<br/>\n\n#### ***getPage()***\n\nReturns the index of the current page displayed by the connected device.\n\n**Args**:\n\n- void.\n\n**Returns**:\n\n- integer corresponding to current page index.\n\n##### Example: \n    activePage = mates.getPage() # Query active page\n\n<br/>\n\n#### ***setWidgetValueById(widgetId, value)***\n\nSets the value of a specific widget based on the provided widgetId.\n\n**Args**:  \nwidgetId: int\n    - the unique id of the desired widget.\n    Value must exist within the int16 datatype range.\n\nvalue: int\n    the value the corresponding widget will be set to.\n    Value must exist within the int16 datatype range.\n\n**Returns**:  \n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setWidgetValueById(MediaGaugeB0, 50) # Set value of MediaGaugeB0 to 50\n    # Note: The ID of MediaGaugeB0 can be copied or exported from Mates Studio\n\n<br/>\n\n#### ***getWidgetValueById(widgetId)***\n\nGets the value of a specific widget based on the provided identifier.\n\n**Args**:  \nwidgetId: int\n\n- the unique id of the target widget. Value must be within the uint16 datatype range  \n\n**Returns**:\n\n- integer corresponding to widget value.  \n\n##### Example: \n    widgetVal = mates.getWidgetValue(MediaLed4) # Query the current value of MediaLed4\n    # Note: The ID of MediaLed4 can be copied or exported from Mates Studio\n\n<br/>\n\n#### ***setWidgetValueByIndex(widgetType, widgetIndex, value)***  \n\nSets the value of a specific widget based on the index within a widget type.\n\n**Args**:  \nwidgetType: MatesWidget\n\n- the unique type of widget to be changed.\n\nwidgetIndex: int\n\n- the index of the widget, of a specific type. Value must be within the uint8 datatype range.\n\nvalue: int\n\n- the value the corresponding widget will be set to. Value must be within the int16 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n#### Example: \n    mates.setWidgetValue(MATES_MEDIA_GAUGE_B, 0, 50) # Set value of MediaGaugeB0 to 50\n\n**Note:** _All applicable widget types are listed in [here](src/includes/MatesWidgets.md)._\n\n<br/>\n\n#### ***getWidgetValueByIndex(widgetType, widgetIndex)***\n\nGets the value of a specific widget based on the index within a widget type.\n\n**Args**:\n\nwidgetType: MatesWidget\n\n- the unique type of widget to be changed.\n\nwidgetIndex: int  \n\n- the index of the widget, of a specific type. Value must be within the uint8 datatype range.\n\n**Returns**:\n\n- integer corresponding to widget value.\n\n##### Example: \n    widgetVal = mates.getWidgetValue(MATES_MEDIA_LED, 4) # Query the current value of MediaLed4\n\n**Note:** _This function is not applicable to **Int32** and **Float** LedDigits_\n\n<br/>\n\n#### ***setLedDigitsShortValue(widgetIndex, value)***\n\nSets the 16-bit integer value of the Led Digits widget specified by widgetIndex.\n\n****Args**:**\n\nwidgetIndex: int\n\n- the index of the LED Digits widget. Value must be within uint8 datatype range.\n\nvalue: int, float\n\n- the value the corresponding widget will be set to.\nValues must be within the int16 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setLedDigitsShortValue(2, 50) # Set value of LedDigits2 to 50\n\n**Note:** _This function is only applicable for **Int16** LedDigits_\n\n<br/>\n\n#### ***setLedDigitsLongValue(widgetIndex, value)***\n\nSets the 32-bit integer value of the Led Digits widget specified by widgetIndex.\n\n**Args**:\n\nwidgetIndex: int\n\n- the index of the LED Digits widget. Value must be within uint8 datatype range.\n\nvalue: int, float\n\n- the value the corresponding widget will be set to. Values must be within the int32 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setLedDigitsLongValue(2, 50) # Set value of LedDigits2 to 50\n\n**Note:** _This function is only applicable for **Int32** LedDigits_\n\n<br/>\n\n#### ***setLedDigitsFloatValue(widgetIndex, value):***\n\nSets the 32-bit float value of the Led Digits widget specified by widgetIndex.\n\n**Args**:\n\nwidgetIndex: int\n- the index of the LED Digits widget. Value must be within uint8 datatype range.\n\nvalue: int, float\n- the value the corresponding widget will be set to.\n  Values must be within the float32 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setLedDigitsFloatValue(2, 9.989) # Set value of LedDigits2 to 9.989\n\n**Note:** _This function is only applicable for **float32** LedDigits_\n\n<br/>\n\n#### ***setSpectrumValue(spectrumId, gaugeIndex, value)***\n\nSets the value of the column (specified by gaugeIndex) of the spectrum widget (specified by spectrumId).\n\n**Args**:\n\nspectrumId: int\n\n- the id of the relevant Spectrum widget. Value must be within the int16 datatype range.\n\ngaugeIndex: int\n\n- the gauge index within the target Spectrum widget. Value must be within the uint8 datatype range.\n\nvalue: int\n\n- the value the corresponding widget will be set to. Value must be within the uint8 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setSpectrumValue(MatesLedSpectrum5, 2, 64)\n    # Set value of gauge index 2 of LedSpectrum5 to 64\n\n<br/>\n\n#### ***setLedSpectrumValue(ledSpectrumIndex, gaugeIndex, value)***\n\nSets the value of the column (specified by gaugeIndex) of the Led Spectrum widget (specified by ledSpectrumIndex).\n\n**Args**:\nledSpectrumIndex: int\n\n- the index of the desired LED Spectrum widget. Value must be within the uint8 datatype range.\n\ngaugeIndex: int\n\n- the gauge index within the target LED Spectrum widget. Value must be within the uint8 datatype range.\n\nvalue: int\n\n- the value the corresponding widget will be set to. Value must be within the uint8 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setLedSpectrumValue(5, 2, 64)\n    # Set value of gauge index 2 of LedSpectrum5 to 64\n\n<br/>\n\n#### ***setMediaSpectrumValue(mediaIndex, gaugeIndex, value)***\n\nSets the value of the column (specified by gaugeIndex) of the Media Spectrum widget (specified by ledSpectrumIndex).\n\n**Args**:\nmediaIndex: int\n\n- the index of the Media Spectrum widget. Value must be within the uint8 datatype range.\n\ngaugeIndex: int\n\n- the index of the desired gauge. Value must be within the uint8 datatype range.\n\nvalue: int\n\n- the value the corresponding widget will be set to. Value must be within the uint8 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setMediaSpectrumValue(4, 3, 48)\n    # Set value of gauge index 3 of MediaSpectrum4 to 48\n\n<br/>\n\n#### ***setWidgetParamById(widgetId, param, value)***\n\nSets the value of a widget parameter based on widget id and parameter id.\n\n**Args**:\nwidgetId: int\n\n- the unique id of the target widget. Value must be within the int16 datatype range.\n\nparam: int\n\n- the unique id of the target parameter. Value must be within the int16 datatype range.\n\nvalue: int\n\n- the value the corresponding parameter will be set to. Value must be within the int16 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    # Set GaugeA3's Background color to BLACK\n    mates.setWidgetParamById(GaugeA3, MATES_GAUGE_A_BG_COLOR, BLACK) \n    # Note: The ID of GaugeA3 can be copied or exported from Mates Studio\n\n<br/>\n\n#### ***getWidgetParamById(widgetId, param)***\n\nGets the value of a widget parameter based on widget id and parameter id.\n\n**Args**:\nwidgetId: int\n    - the unique id of the target widget.\n    Value must be within the int16 datatype range.\n\nparam: int\n    - the unique id of the target parameter.\n    Value must be within the int16 datatype range.\n\n**Returns**:\n\n- integer response indicating target parameter value.\n\n##### Example: \n    # Query the background color of GaugeA3\n    paramVal = mates.getWidgetParamById(GaugeA3, MATES_GAUGE_A_BG_COLOR) \n    # Note: The ID of GaugeA3 can be copied or exported from Mates Studio\n\n<br/>\n\n#### ***setWidgetParamByIndex(widgetType, widgetIndex, param, value)***\n\nSets the value of a widget parameter based on widget index and parameter id.\n\n**Args**:\nwidgetType: MatesWidget\n\n- the type of the target widget.\n\nwidgetIndex: int\n\n- the index of the target widget. Value must be within the uint8 datatype range.\n\nparam: int\n\n- the unique id of the target parameter. Value must be within the int16 datatype range.\n\nvalue: int\n\n- the value the corresponding parameter will be set to. Value must be within the int16 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    # Set GaugeA3's Background color to BLACK\n    mates.setWidgetParamByIndex(MATES_GAUGE_A, 3, MATES_GAUGE_A_BG_COLOR, BLACK) \n\n<br/>\n\n#### ***getWidgetParamByIndex(widgetType, widgetIndex, param)***\n\nGets the value of a widget parameter based on widget index and parameter id.\n\n**Args**:\n\nwidgetType: MatesWidget\n\n- the type of the target widget.\n\nwidgetIndex: int\n\n- the index of the target widget. Value must be within the uint8 datatype range.\n\nparam: int\n\n- the unique id of the target parameter. Value must be within the int16 datatype range.\n\n**Returns**:\n\n- integer response indicating target parameter value.\n\n##### Example: \n    # Query the background color of GaugeA3\n    paramVal = mates.getWidgetParamByIndex(MATES_GAUGE_A, 3, MATES_GAUGE_A_BG_COLOR) \n\n<br/>\n\n#### ***clearTextArea(textAreaIndex)***\n\nClears a targeted Text Area.\n\n**Args**:\n\ntextAreaIndex: int\n\n- the index of the target Text Area widget. Value must be within the uint16 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.clearTextArea(6) # Clear TextArea6\n\n<br/>\n\n#### ***updateTextArea(textAreaIndex, textFormat, \\*formatArgs)***\n\nUpdates the text displayed within Text Area widget.\n\n**Args**:\n\ntextAreaIndex: int\n\n- the index of the target Text Area widget. Value must be within the uint16 datatype range.\n\ntextFormat: str\n\n- the string format to be displayed.\n\nformatArgs:\n\n- zero or more values to be formatted into the provided text format string.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example No. 1: \n    mates.updateTextArea(2, \"Mates\") # Update TextArea2 to \"Mates\"\n\n##### Example No. 2: \n    int value = 76\n    mates.updateTextArea(3, \"Value is {}\", 76) # Print value to TextArea3\n\n<br/>\n\n#### ***def clearPrintArea(printAreaIndex: int)***\n\nClears a targeted Print Area.\n\n**Args**:\n\nprintAreaIndex: int\n- the index of the target Print Area widget.\nValue must be within the uint16 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.clearPrintArea(5) # Clear PrintArea5\n\n<br/>\n\n#### ***setPrintAreaColor565(printAreaIndex, rgb565)***\nSets the color of a PrintArea Widget based on an rgb565 value.\n\n**Args**:\n        \nprintAreaIndex: int\n- index of widget, value must be within uint16 datatype range.\n\nrgb565: int\n- colour to set widget to, value must be within uint16 datatype range.\n\nReturns:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setPrintAreaColor(4, 0xF800) # Set print color of PrintArea4 to RED (0xF800)\n\n<br/>\n\n#### ***setPrintAreaColorRGB(printAreaIndex, red, green, blue)***\n\nSets the colour of a targeted Print Area.\n\n**Args**:\n\nprintAreaIndex: int\n\n- the index of the target Print Area widget. Value must be within the uint16 datatype range.\n\nred: int\n\n- Unsigned 8 bit integer value of red concentration. Value must be within the uint8 datatype range.\n\nblue: int\n\n- Unsigned 8 bit integer value of green concentration. Value must be within the uint8 datatype range.\n\ngreen: int\n\n- Unsigned 8 bit integer value of blue concentration. Value must be within the uint8 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    mates.setPrintAreaColor(7, 0, 255, 0) # Set print color of PrintArea7 to GREEN\n\n<br/>\n\n#### ***appendArrayToPrintArea(printAreaIndex, array)***\n\nAppends an array of 8-bit integers to a targeted Print Area.\n\n**Args**:\n\nprintAreaIndex: int\n\n- the index of the target Print Area widget.\nValue must be within the uint16 datatype range.\n\nbuffer: \\[int\\]\n\n- the list of datapoints to be appended to scope widget. Values must be within the uint8 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    arr = [0xAB, 0xCD, 0xEF]\n    mates.appendArrayToPrintArea(6, arr) # Append \"0xAB, 0xCD, 0xEF\" to PrintArea6\n\n<br/>\n\n#### ***appendStringToPrintArea(printAreaIndex, textFormat, \\*formatArgs)***\n\nAppends text to a targeted Print Area.\n\n**Args**:\n\nprintAreaIndex: int\n\n- the index of the target Print Area widget.\nValue must be within the uint16 datatype range.\n\ntextFormat: str\n\n- the string to be appended to the Print Area\nwith zero or more format specifiers to be formatted.\n\nformatArgs:\n\n- zero or more args that can be formatted into the\ntextFormat string.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example No. 1: \n    mates.appendStringToPrintArea(8, \"Mates\") # Append \"Mates\" to PrintArea8\n\n##### Example No. 2: \n    int value = 108\n    mates.appendStringToPrintArea(9, \"Value: {}\", 108) # Append value as text to PrintArea9\n\n<br/>\n\n#### ***def appendToScopeWidget(scopeIndex, buffer)***\n\nAppends a list of integers to a Scope widget.\n\n**Args**:\n\nscopeIndex: int\n\n- the index of the target Scope widget. Value must be within the uint16 datatype range.\n\nbuffer: \\[int\\]\n\n- the list of datapoints to be appended to scope widget. Values must be within the int16 datatype range.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example: \n    data = {0xF8, 0x7F, 0x1F}\n    mates.appendToScopeWidget(7, data, 3) # Append data to Scope Widget 7\n\n<br/>\n\n#### ***updateDotMatrixWidget(matrixIndex, textFormat, \\*formatArgs)***\n\nChanges the text displayed by the target Dot Matrix widget.\n\n**Args**:\n\nmatrixIndex (int): matrix index.\n\n- The index of the target Scope widget.\nValue must be within the uint16 datatype range.\n\ntextFormat: str\n\n- the string to be appended to the Scope widget with zero or more format specifiers to be formatted.\n\nformatArgs:\n\n- zero or more args that can be formatted into the text_format string.\n\n**Returns**:\n\n- boolean response indicating command success or failure.\n\n##### Example No. 1: \n    mates.updateDotMatrix(8, \"Mates\") # Update DotMatrix0 to \"Mates\"\n\n##### Example No. 2: \n    value = 108\n    mates.updateDotMatrix(9, \"Value: {}\", 108) # Update DotMatrix0 to show value\n\n<br/>\n\n#### ***getButtonEventCount()***\n\nGets the number of events recorded from applicable button widgets.\n\n**Args**:\n\n- void.\n\n**Returns**:\n\n- integer corresponding to the number of events.\n\n##### Example:\n    # Get the number of logged button events\n    buttonEvents = mates.getButtonEventCount()\n\n<br/>\n\n#### ***getNextButtonEvent()***\n\nGets the next event source logged from applicable buttons.\n\n**Args**:\n\n- void.\n\n**Returns**:\n\n-  integer corresponding to the button widget ID\n\n##### Example:\n    // If there is any event recorded\n    if mates.getButtonEventCount() > 0: \n        button = mates.getNextButtonEvent()\n        if (button == MediaButton1):\n            // if the button pressed is MediaButton1\n            // do something\n        // add more possible cases here...\n<br/>\n\n#### ***getSwipeEventCount()***\n\nGets the number of events recorded from swipe gestures.\n\n**Args**:\n\n- void.\n\n**Returns**:\n\n- integer corresponding to the number of events.\n\n##### Example:\n    # Get the number of logged swipe events\n    swipeEvents = mates.getSwipeEventCount()\n\n<br/>\n\n#### ***getNextSwipeEvent()***\n\nGets the next swipe event value.\n\n**Args**:\n\n- void.\n\n**Returns**:\n\n- integer corresponding to the swipe event.\n\n##### Example:\n    // If there is any event recorded\n    if mates.getSwipeEventCount() > 0:\n        swipe = mates.getNextSwipeEvent()\n        if ((swipe & MATES_SWIPE_SOUTH) == MATES_SWIPE_SOUTH):\n            // if swipe is towards from top to bottom\n        if ((swipe & MATES_SWIPE_EAST) == MATES_SWIPE_EAST):\n            // if swipe is towards from left to right\n        if ((swipe & MATES_SWIPE_TLBR) == MATES_SWIPE_TLBR):\n            // if swipe is towards from top left to bottom right\n\n<br/>\n\n#### ***getVersion()***\n\nHelper function to obtain the version of the Python Mates Controller library.\n\n**Args**:\n\n- void.\n\n**Returns**:\n\n- string response of library version.\n\n##### Example:\n    # Get the library version number as string\n    matesVersion = mates.getVersion()\n\n<br/>\n\n#### ***def getCompatibility()***\n\nHelper function to obtain the version of the Mates Studio compatible\nwith this library version.\n\n**Args**:\n\n- void.\n\n**Returns**:\n\n- string response of Mates Studio version compatible with this library.\n\n##### Example:\n    # Get the library version number as string\n    matesVersion = mates.getCompatibility()\n\n<br/>\n\n#### ***printVersion()***\n\nDebugging function to print the version of the Mates Studio compatible along with this specific library version.\n\n**Args**:\n\n- void.\n\n**Returns**:\n\n- void.\n\n##### Example:\n    # Prints library version and compatible Mates Studio version to debug serial\n    mates.printVersion()\n\n<br/>\n\n#### ***getError()***\n\nFunction to return the current error state of the Mates Controller.\n\n**Args**:\n\n- void.\n\n**Returns**:\n\n- MatesError response of current error.\n\n##### Example:\n    # Checks the last error that occurred\n    error = mates.getError()\n    if error == MATES_ERROR_NONE:\n        # Last command was successful\n\n<br/>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BreadBoardMates/BBM-Python-Mates-Controller",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bbm-mates-controller",
    "package_url": "https://pypi.org/project/bbm-mates-controller/",
    "platform": "",
    "project_url": "https://pypi.org/project/bbm-mates-controller/",
    "project_urls": {
      "Bug Tracker": "https://github.com/BreadBoardMates/BBM-Python-Mates-Controller/issues",
      "Homepage": "https://github.com/BreadBoardMates/BBM-Python-Mates-Controller"
    },
    "release_url": "https://pypi.org/project/bbm-mates-controller/1.0.2/",
    "requires_dist": [
      "mates-controller"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python Library developed to be used with Mates Studio Commander or Architect Environment and BBM modules connected using BBM programmer or similar USB-to UART modules",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12671368,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab48bd2286e6bfe6c5b701f2a5d3fd0b2949c51532981aa7235e1a9d28025564",
          "md5": "faa23120c9aec8de298c13c5160e9dde",
          "sha256": "e5a8b1088d919d5fb9e948d81533da9e27d0730263e32e835ccb5790cc9944c5"
        },
        "downloads": -1,
        "filename": "bbm_mates_controller-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "faa23120c9aec8de298c13c5160e9dde",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7848,
        "upload_time": "2022-01-24T05:07:35",
        "upload_time_iso_8601": "2022-01-24T05:07:35.432346Z",
        "url": "https://files.pythonhosted.org/packages/ab/48/bd2286e6bfe6c5b701f2a5d3fd0b2949c51532981aa7235e1a9d28025564/bbm_mates_controller-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc937985125a64b9e3be0eaf4615bcbc4dbce40f5a732b0100c3916d0a4db62a",
          "md5": "784c13a718c331707d137472d6151554",
          "sha256": "528b839268ffcc3db40a88c7cdf6bc65d4d9cf4359e5cdac457898280e1bd10b"
        },
        "downloads": -1,
        "filename": "bbm-mates-controller-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "784c13a718c331707d137472d6151554",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11789,
        "upload_time": "2022-01-24T05:07:36",
        "upload_time_iso_8601": "2022-01-24T05:07:36.656211Z",
        "url": "https://files.pythonhosted.org/packages/cc/93/7985125a64b9e3be0eaf4615bcbc4dbce40f5a732b0100c3916d0a4db62a/bbm-mates-controller-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab48bd2286e6bfe6c5b701f2a5d3fd0b2949c51532981aa7235e1a9d28025564",
        "md5": "faa23120c9aec8de298c13c5160e9dde",
        "sha256": "e5a8b1088d919d5fb9e948d81533da9e27d0730263e32e835ccb5790cc9944c5"
      },
      "downloads": -1,
      "filename": "bbm_mates_controller-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "faa23120c9aec8de298c13c5160e9dde",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7848,
      "upload_time": "2022-01-24T05:07:35",
      "upload_time_iso_8601": "2022-01-24T05:07:35.432346Z",
      "url": "https://files.pythonhosted.org/packages/ab/48/bd2286e6bfe6c5b701f2a5d3fd0b2949c51532981aa7235e1a9d28025564/bbm_mates_controller-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc937985125a64b9e3be0eaf4615bcbc4dbce40f5a732b0100c3916d0a4db62a",
        "md5": "784c13a718c331707d137472d6151554",
        "sha256": "528b839268ffcc3db40a88c7cdf6bc65d4d9cf4359e5cdac457898280e1bd10b"
      },
      "downloads": -1,
      "filename": "bbm-mates-controller-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "784c13a718c331707d137472d6151554",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11789,
      "upload_time": "2022-01-24T05:07:36",
      "upload_time_iso_8601": "2022-01-24T05:07:36.656211Z",
      "url": "https://files.pythonhosted.org/packages/cc/93/7985125a64b9e3be0eaf4615bcbc4dbce40f5a732b0100c3916d0a4db62a/bbm-mates-controller-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}