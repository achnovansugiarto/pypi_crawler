{
  "info": {
    "author": "Michael Penkov",
    "author_email": "m@penkov.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "What?\n-----\n\nExtracts type annotations from Python source documented with Sphinx-compatible docstrings.\n\nWhy?\n----\n\nExisting tools like `PyAnnotate <https://github.com/dropbox/pyannotate>`_ require you to write a driver to exercise your application, while a special hook collects type information and converts it to annotations.\nThis works really well, but requires significant effort in writing a comprehensive driver that covers your entire application.\n\nIf your application already has type information in its docstrings, it may be simpler to convert that information to annotations directly.\nKutuzov will help you with that.\n\nHow?\n----\n\nKutuzov does this:\n\n- Scans packages and submodules for docstrings\n- Parses the docstrings, extracts type information about each parameter\n- Writes a PyAnnotate-compatible JSON file\n\nWhat remains for you is:\n\n- Run PyAnnotate and consume the generated JSON file\n- Tweak the results by hand\n- PROFIT\n\nThe amount of tweaking you have to do may vary.\nIt significantly depends on the quality and accuracy of your docstrings.\n\nExample\n^^^^^^^\n\nWe will be annotating the example.py file.\nYou will need pyannotate (``pip install pyannotate``) to proceed.\n\n.. code-block::\n\n    $ python -m kutuzov example.py > type_info.json\n    $ cat type_info.json\n    [\n        {\n            \"func_name\": \"Dog.__init__\",\n            \"line\": 2,\n            \"path\": \"example.py\",\n            \"samples\": 1,\n            \"type_comments\": [\n                \"(str) -> None\"\n            ]\n        },\n        {\n            \"func_name\": \"Dog.bark\",\n            \"line\": 16,\n            \"path\": \"example.py\",\n            \"samples\": 1,\n            \"type_comments\": [\n                \"(str) -> str\"\n            ]\n        }\n    ]\n    $ pyannotate example.py --py3\n    Refactored example.py\n    --- example.py  (original)\n    +++ example.py  (refactored)\n    @@ -1,5 +1,5 @@\n     class Dog:\n    -    def __init__(self, name):\n    +    def __init__(self, name: str) -> None:\n             \"\"\"\n             :param str name: The name of this dog.\n             \"\"\"\n    @@ -13,7 +13,7 @@\n             \"\"\"\n             return self._name\n\n    -    def bark(self, language='en'):\n    +    def bark(self, language: str = 'en') -> str:\n             \"\"\"\n             Make some noise!\n\n    Files that need to be modified:\n    example.py\n    NOTE: this was a dry run; use -w to write files\n\nYou may have noticed that [example.py](example.py) already contains a PyAnnotate driver in the mainline.\n\n.. code-block::\n\n    $ cat type_info.json \n    [\n        {\n            \"path\": \"example.py\",\n            \"line\": 2,\n            \"func_name\": \"Dog.__init__\",\n            \"type_comments\": [\n                \"(str) -> None\"\n            ],\n            \"samples\": 1\n        },\n        {\n            \"path\": \"example.py\",\n            \"line\": 8,\n            \"func_name\": \"name\",\n            \"type_comments\": [\n                \"() -> str\"\n            ],\n            \"samples\": 1\n        },\n        {\n            \"path\": \"example.py\",\n            \"line\": 16,\n            \"func_name\": \"Dog.bark\",\n            \"type_comments\": [\n                \"(str) -> str\"\n            ],\n            \"samples\": 1\n        }\n    ]\n\nIf you compare that to the previously generated JSON, you will see that it is mostly similar.\nThe greatest difference is that Kutuzov missed the ``name`` property - it doesn't know how to handle those yet.\n\nWhat's in a name?\n-----------------\n\n`Mikhail Kutuzov <https://en.wikipedia.org/wiki/Mikhail_Kutuzov>`_ was a contemporary of `Napoleon Bonaparte <https://en.wikipedia.org/wiki/Napoleon>`_.\nA `particular painting <https://en.wikipedia.org/wiki/Bonaparte_Before_the_Sphinx>`__ depicts Napoleon before the Sphinx.\nAnd `Sphinx <https://www.sphinx-doc.org/en/stable/>`_, of course, is the project that we all love for our Python documentation needs.\n\nThis project was partially inspired by `sphinx.ext.napoleon <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`_, which does something similar, but for a different docstring format.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/kutuzov",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mpenkov/kutuzov",
    "keywords": "sphinx pyannotate napoleon",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kutuzov",
    "package_url": "https://pypi.org/project/kutuzov/",
    "platform": "any",
    "project_url": "https://pypi.org/project/kutuzov/",
    "project_urls": {
      "Download": "http://pypi.python.org/pypi/kutuzov",
      "Homepage": "https://github.com/mpenkov/kutuzov"
    },
    "release_url": "https://pypi.org/project/kutuzov/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.5.*",
    "summary": "Derives type annotations from Sphinx comments in Python source",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7275003,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3516ddc2a0c7040b59268e29dec5a1736003b588e590f01482f976ba4084cdf",
          "md5": "3e66805f0f2e31a2a263487e6a9b24ab",
          "sha256": "a948cec2f70427a5b33532e67f867a6bef1f09836497a8b5157258030d44b19d"
        },
        "downloads": -1,
        "filename": "kutuzov-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3e66805f0f2e31a2a263487e6a9b24ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.*",
        "size": 5610,
        "upload_time": "2020-05-19T06:04:05",
        "upload_time_iso_8601": "2020-05-19T06:04:05.797872Z",
        "url": "https://files.pythonhosted.org/packages/c3/51/6ddc2a0c7040b59268e29dec5a1736003b588e590f01482f976ba4084cdf/kutuzov-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3516ddc2a0c7040b59268e29dec5a1736003b588e590f01482f976ba4084cdf",
        "md5": "3e66805f0f2e31a2a263487e6a9b24ab",
        "sha256": "a948cec2f70427a5b33532e67f867a6bef1f09836497a8b5157258030d44b19d"
      },
      "downloads": -1,
      "filename": "kutuzov-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3e66805f0f2e31a2a263487e6a9b24ab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.*",
      "size": 5610,
      "upload_time": "2020-05-19T06:04:05",
      "upload_time_iso_8601": "2020-05-19T06:04:05.797872Z",
      "url": "https://files.pythonhosted.org/packages/c3/51/6ddc2a0c7040b59268e29dec5a1736003b588e590f01482f976ba4084cdf/kutuzov-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}