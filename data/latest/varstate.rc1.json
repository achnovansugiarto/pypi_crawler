{
  "info": {
    "author": "5elenay",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img src=\"https://i.ibb.co/ZhWWW83/logo.png\" alt=\"logo\">\n\n# What is VarState?\nVarState is a Python Package For Managing Data ReactJS State-Like.\n\n# Features\n- Create, Update, Delete State\n- Create, Update, Delete Events\n- Simple & Quick. (Easy to Use)\n- Fast Performance\n\n# Quick Documentation\n# Creating State\n```py\nfrom varstate import State\n# Importing State\n\nstate = State()\nget, update = state.create(-1) # Now we created a state that has value -1.\n# i will use -1 for this document. You can put whatever you want.\n\n# Now we have two functions.\n# get() for getting value, and\n# update(any) to update our value.\n```\n\n# Updating \n```py\n# We can change the value with update() function.\n# function takes one argument, the argument will be new value.\n\nprint(get()) # Print current value\nupdate(1) # Updating the value to 1\nprint(get()) # Print updated value\n```\n\n# Deleting \n```py\n# If you finished your works with state, you can delete from the memory.\n# just call the <State>.delete()!\n\nstate.delete() # Deleted the events and value.\n```\n\n# Events\n```py\n# You can use events for run some functions.\n# Example;\n\nfrom varstate import State\n# Importing State\n\nstate = State()\n# Before calling create, let's create the events.\nstate.before_create(lambda value: print(f\"Creating state with {value}, type: {type(value)}\"))\n# before_create runs before state creates.\nstate.after_create(lambda value: print(f\"Created state with {value}, type: {type(value)}\"))\n# after_create runs after state created.\n\nget, update = state.create(-1)\n# When you run the program, it will print:\n# Creating state with -1, type: <class 'int'>\n# Created state with -1, type: <class 'int'>\n```\n# before_create \n```py\n# This event runs when started to create a state.\n# Takes one argument, the value that will be create.\n\nfrom varstate import State\n\nstate = State()\nstate.before_create(lambda value: print(f\"Creating state with {value}, type: {type(value)}\"))\n\n# NOTE: also you can use function like this;\ndef before_create_function(value):\n    print(f\"Creating state with {value}, type: {type(value)}\")\n\nstate.before_create(before_create_function)\n\n# Creating the state\nget, update = state.create(-1)\n```\n# after_create \n```py\n# This event runs when created a state.\n# Takes one argument, the value that created.\n\nfrom varstate import State\n\nstate = State()\nstate.after_create(lambda value: print(f\"Created state with {value}, type: {type(value)}\"))\n\n# Creating the state\nget, update = state.create(-1)\n```\n# before_update \n```py\n# This event runs when started to update the data.\n# Takes two argument, first one is the value, second one is the new value will update.\n\nfrom varstate import State\n\nstate = State()\nstate.before_update(lambda now, future: print(now, future))\n\n# Creating the state\nget, update = state.create(-1)\n\nprint(get())\nupdate(1)\nprint(get())\n```\n# after_update \n```py\n# This event runs when updated the data.\n# Takes two argument, first one is the updated value, second one is the old value.\n\nfrom varstate import State\n\nstate = State()\nstate.after_create(lambda now, old: print(f\"{old} updated to {now}.\"))\n\n# Creating the state\nget, update = state.create(-1)\n\nprint(get())\nupdate(1)\nprint(get())\n```\n# should_update \n```py\n# This event checks should data updated.\n# Takes two argument, first one is the value, second one is the new value will update.\n# Also function should return a boolean.\n\nfrom varstate import State\n\nstate = State()\nstate.should_update(lambda now, future: future % 2 == 0) # Now it will only update if new data is even.\n\n# Creating the state\nget, update = state.create(-1)\n\nprint(get())\nupdate(1) # Not updating\nprint(get())\nupdate(2) # Updating\nprint(get())\n```\n# before_delete \n```py\n# This event runs before delete function runs.\n\nfrom varstate import State\n\nstate = State()\nstate.before_delete(lambda: print(\"please don't delete me ;(\"))\n\n# Creating the state\nget, update = state.create(-1)\n\nprint(get())\nupdate(1)\nprint(get())\n\nstate.delete()\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/5elenay/varstate/",
    "keywords": "state,python",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "varstate",
    "package_url": "https://pypi.org/project/varstate/",
    "platform": "",
    "project_url": "https://pypi.org/project/varstate/",
    "project_urls": {
      "Bug Tracker": "https://github.com/5elenay/varstate/issues",
      "Homepage": "https://github.com/5elenay/varstate/"
    },
    "release_url": "https://pypi.org/project/varstate/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python Package For Managing Data ReactJS State-Like.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10319794,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c45f61b78d910dbeb53814d9ba598bfc1a1bf80c3a7ab27e099739298356ddd4",
          "md5": "16f4943fbde0d37c3b88ca422c14f522",
          "sha256": "5f1ca97d22ab7e6e55f505b4f7529d939c270f059d49343eb703626d115692c8"
        },
        "downloads": -1,
        "filename": "varstate-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "16f4943fbde0d37c3b88ca422c14f522",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3669,
        "upload_time": "2021-05-11T08:10:58",
        "upload_time_iso_8601": "2021-05-11T08:10:58.567150Z",
        "url": "https://files.pythonhosted.org/packages/c4/5f/61b78d910dbeb53814d9ba598bfc1a1bf80c3a7ab27e099739298356ddd4/varstate-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c45f61b78d910dbeb53814d9ba598bfc1a1bf80c3a7ab27e099739298356ddd4",
        "md5": "16f4943fbde0d37c3b88ca422c14f522",
        "sha256": "5f1ca97d22ab7e6e55f505b4f7529d939c270f059d49343eb703626d115692c8"
      },
      "downloads": -1,
      "filename": "varstate-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "16f4943fbde0d37c3b88ca422c14f522",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3669,
      "upload_time": "2021-05-11T08:10:58",
      "upload_time_iso_8601": "2021-05-11T08:10:58.567150Z",
      "url": "https://files.pythonhosted.org/packages/c4/5f/61b78d910dbeb53814d9ba598bfc1a1bf80c3a7ab27e099739298356ddd4/varstate-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}