{
  "info": {
    "author": "Nate Marks",
    "author_email": "npmarks@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "=========\ntreecrawl\n=========\n\n\n.. image:: https://img.shields.io/pypi/v/treecrawl.svg\n        :target: https://pypi.python.org/pypi/treecrawl\n\n.. image:: https://img.shields.io/travis/natemarks/treecrawl.svg\n        :target: https://travis-ci.com/natemarks/treecrawl\n\n.. image:: https://readthedocs.org/projects/treecrawl/badge/?version=latest\n        :target: https://treecrawl.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n\n\nlibraries to make it easier to maniuplate files in a directory tree\n\n\n* Free software: MIT license\n* Documentation: https://treecrawl.readthedocs.io.\n\n\nUsage\n--------\n\nThis project makes it a little easier to edit directory trees and to test those edits.\n\nThis example uses the Transformer class to rewrite the contents of all the files in a directory to upper case text. is_target() and transform() should always be overridden. You should almost always create and use an alternative to Transformer.write_string_to_output(). Treating everything like a string will cause problems with editing and testing with any unicode at all. It's really just meant for a simple example.\n\n\n.. code-block:: python\n\n    class MakeUpper(Transformer):\n    \"\"\"Convert non-ASCII files to ASCII\"\"\"\n\n    def __init__(self, input, output, dry_run=False):\n        super().__init__(input=input, output=output, dry_run=dry_run)\n\n    def is_target(self, i_file):\n        \"\"\"\n        I generally use opt-in targeting to avoid corrupting files i don't want\n        to target when I override Transformer.is_target().  I use extensions\n        where it's adequate, but if I need something more robust, I might use\n        python-magic.\n\n        \"\"\"\n        included_extensions = [\".txt\"]\n\n        # if it's not a file, right?\n        if not os.path.isfile(i_file):\n            return False\n\n        # Regardless of extension if the file is in a .git directory\n        # exclude it\n        if \".git\" in i_file.split(os.path.sep):\n            return False\n\n        # now target only files ending in \".txt\n        # i could use\n        _, ext = os.path.splitext(i_file)\n        if ext in included_extensions:\n            return True\n\n        return False\n\n    def transform(self, source_file, destination_file):\n        from treecrawl.utility import file_to_string\n\n        contents = file_to_string(source_file)\n        contents = contents.upper()\n        self.write_string_to_output(contents, destination_file)\n\n** CAUTION!! **\ntreecrawl doesn't protect you from mistreating your files by, for example, corrupting a binary file because you transformed it like a text file. In fact, utility.file_to_string() encodes binary to utf-8 ignoring errors, so it will help you wreck your files.\n\nThis project also helps me test transformations using golden files. The following example shows how to enable pytest --update_golden to update the golden files automatically\n\nFirst I need to setup conftest.py for the pytest flag:\n\n.. code-block:: python\n\n    import pytest\n    from treecrawl.utility import locate_subdir\n\n\n    def pytest_addoption(parser):\n        parser.addoption(\n            \"--update_golden\",\n            action=\"store_true\",\n            help=\"Update golden files before running tests\",\n        )\n\n\n    @pytest.fixture\n    def update_golden(request):\n        return request.config.getoption(\"--update_golden\")\n\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def testdata():\n        return locate_subdir(\"testdata\")\n\n\nNext I create a parameterized test case for make upper. I have to manually create the input test data. Refer to tests/testdata/test_make_upper for an example.\n\n.. code-block:: python\n\n    @pytest.mark.parametrize(\n        \"test_case\",\n        [\"pets\", \"cities\"],\n    )\n    def test_make_upper(test_case, tmp_path, request, testdata, update_golden):\n        c = CaseHelper(\n            testdata,\n            request.node.originalname,\n            test_case,\n            str(tmp_path),\n            update_golden=update_golden,\n        )\n\n        \"\"\"when update golden is set by running pytest --update_golden,\n        the project golden files are deleted. This step generates new ones from\n        the the function under test \"\"\"\n        if update_golden:\n            _ = MakeUpper(c.input, c.golden)\n\n        m = MakeUpper(c.input, c.actual)\n        m.run()\n        for r in c.compare():\n            succeeded, compared = r\n            assert succeeded\n            if not succeeded:\n                print(\"input: {}\\nactual: {}\\nexpected: {}\".format(*compared))\n\nIt may also be important to override the CaseHelper.compare()\n\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\nBuild Notes\n------------\n\nSetup dev venv\n\n::\n\n    python -m venv .treecrawl.venv\n    source .treecrawl.venv/bin/activate\n    pip install -r requirements-dev.txt\n\n\nTests\n------------\n\n I use pyenv to provide multiple versions for nox python testing. in my case:\n\n.. code-block::\n\n    pyenv install 3.6.8\n    pyenv install 3.7.8\n    # in the project directory\n    pyenv local 3.6.8 3.7.8\n    make test\n\nIf other versions are flagged as missing or are skipped you can just pyenv instal them and add them to the project directory\n\n\nrun 'make test' to run all the tests. I use pyenv to install all of the supported python versions so nox can run the full matrix of tests for me\n\n\nalways run ' make lint'\n\n\n=======\nHistory\n=======\n\n0.1.3 (2020-07-17)\n------------------\n\n* First release on PyPI.\n\n\n\n0.1.4 (2020-07-17)\n------------------\n\n* Reorganized modules and updateed documentation\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/natemarks/treecrawl",
    "keywords": "treecrawl",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "treecrawl",
    "package_url": "https://pypi.org/project/treecrawl/",
    "platform": "",
    "project_url": "https://pypi.org/project/treecrawl/",
    "project_urls": {
      "Homepage": "https://github.com/natemarks/treecrawl"
    },
    "release_url": "https://pypi.org/project/treecrawl/0.1.24/",
    "requires_dist": [
      "pip (==20.2.2) ; extra == 'dev'",
      "setuptools (==49.2.0) ; extra == 'dev'",
      "black (==19.10b0) ; extra == 'dev'",
      "bump2version ; extra == 'dev'",
      "docutils (==0.16) ; extra == 'dev'",
      "flake8 (==3.8.3) ; extra == 'dev'",
      "nox (==2020.5.24) ; extra == 'dev'",
      "pytest (==5.4.3) ; extra == 'dev'",
      "Sphinx (==3.1.2) ; extra == 'dev'",
      "twine (==3.2.0) ; extra == 'dev'",
      "wheel (==0.34.2) ; extra == 'dev'",
      "check-manifest (==0.42) ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "libraries to make it easier to maniuplate files in a directory tree",
    "version": "0.1.24",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8153145,
  "releases": {
    "0.1.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89450b49fee85d33cf173bea23aa7c4e18b96be109156b724fa7e44c7a174c61",
          "md5": "4cd198fa6e6a636cb794ecc73eaeecef",
          "sha256": "30b48a203d9c9c4403f4c37ba144b4e9b92066c726dd142e9c475ea0e6ad3c63"
        },
        "downloads": -1,
        "filename": "treecrawl-0.1.22-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4cd198fa6e6a636cb794ecc73eaeecef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11414,
        "upload_time": "2020-09-08T11:44:08",
        "upload_time_iso_8601": "2020-09-08T11:44:08.848262Z",
        "url": "https://files.pythonhosted.org/packages/89/45/0b49fee85d33cf173bea23aa7c4e18b96be109156b724fa7e44c7a174c61/treecrawl-0.1.22-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05569f4175f3a693bf7c45b52bce449b610d03156637606bc46eef14e3a88635",
          "md5": "0cad080c9d207d37a1801f5c7c5ac0de",
          "sha256": "387ab675dbe1df04df99cccc21dde2222843fff0c18d7ea0d6428aab3b377901"
        },
        "downloads": -1,
        "filename": "treecrawl-0.1.22.tar.gz",
        "has_sig": false,
        "md5_digest": "0cad080c9d207d37a1801f5c7c5ac0de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21618,
        "upload_time": "2020-09-08T11:44:11",
        "upload_time_iso_8601": "2020-09-08T11:44:11.232961Z",
        "url": "https://files.pythonhosted.org/packages/05/56/9f4175f3a693bf7c45b52bce449b610d03156637606bc46eef14e3a88635/treecrawl-0.1.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6de3e4dacad1dea0340d89b7925b01338c55303c617c486a64b30fe97bddb741",
          "md5": "2fa13ee5880d657bb5dc141d53eeb398",
          "sha256": "817f2214462ab8c56e1e322f1347b645c33b32d83d46081469af2c74f4fb08be"
        },
        "downloads": -1,
        "filename": "treecrawl-0.1.23-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fa13ee5880d657bb5dc141d53eeb398",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12195,
        "upload_time": "2020-09-10T08:56:30",
        "upload_time_iso_8601": "2020-09-10T08:56:30.093255Z",
        "url": "https://files.pythonhosted.org/packages/6d/e3/e4dacad1dea0340d89b7925b01338c55303c617c486a64b30fe97bddb741/treecrawl-0.1.23-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5fbf8a444e8a8a3021c922e0d7fbf7f42e1c7db13ec0c72853ba30a801e522f",
          "md5": "0963df63ed1c78824dfbddbb52402937",
          "sha256": "2262a43489183d59994068e57a58e5e8f736ab61a7c4b2cb8a67f44eef4801ad"
        },
        "downloads": -1,
        "filename": "treecrawl-0.1.23.tar.gz",
        "has_sig": false,
        "md5_digest": "0963df63ed1c78824dfbddbb52402937",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22432,
        "upload_time": "2020-09-10T08:56:31",
        "upload_time_iso_8601": "2020-09-10T08:56:31.435933Z",
        "url": "https://files.pythonhosted.org/packages/a5/fb/f8a444e8a8a3021c922e0d7fbf7f42e1c7db13ec0c72853ba30a801e522f/treecrawl-0.1.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac1979d0667b2885825e2ecc3f24af07ddf32e105f202724ea0f9708c29f54ed",
          "md5": "1c50f91f18bac3a6eb86160fa6a34de2",
          "sha256": "e50c2d6ac0acd7c369afcffbc8c463cfae88734369db5a288c588c2af5728357"
        },
        "downloads": -1,
        "filename": "treecrawl-0.1.24-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c50f91f18bac3a6eb86160fa6a34de2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12193,
        "upload_time": "2020-09-10T08:59:09",
        "upload_time_iso_8601": "2020-09-10T08:59:09.412745Z",
        "url": "https://files.pythonhosted.org/packages/ac/19/79d0667b2885825e2ecc3f24af07ddf32e105f202724ea0f9708c29f54ed/treecrawl-0.1.24-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71639231dec0fd6e53801bcb42ee77b8d35cb6f39b26134a1111ef7d13017bed",
          "md5": "01686fa6b60b91a567d674f52d6f6524",
          "sha256": "1649902fd1a8570552e10b500e2d42266185053280571dd14687eac418493528"
        },
        "downloads": -1,
        "filename": "treecrawl-0.1.24.tar.gz",
        "has_sig": false,
        "md5_digest": "01686fa6b60b91a567d674f52d6f6524",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22442,
        "upload_time": "2020-09-10T08:59:10",
        "upload_time_iso_8601": "2020-09-10T08:59:10.809028Z",
        "url": "https://files.pythonhosted.org/packages/71/63/9231dec0fd6e53801bcb42ee77b8d35cb6f39b26134a1111ef7d13017bed/treecrawl-0.1.24.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac1979d0667b2885825e2ecc3f24af07ddf32e105f202724ea0f9708c29f54ed",
        "md5": "1c50f91f18bac3a6eb86160fa6a34de2",
        "sha256": "e50c2d6ac0acd7c369afcffbc8c463cfae88734369db5a288c588c2af5728357"
      },
      "downloads": -1,
      "filename": "treecrawl-0.1.24-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1c50f91f18bac3a6eb86160fa6a34de2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12193,
      "upload_time": "2020-09-10T08:59:09",
      "upload_time_iso_8601": "2020-09-10T08:59:09.412745Z",
      "url": "https://files.pythonhosted.org/packages/ac/19/79d0667b2885825e2ecc3f24af07ddf32e105f202724ea0f9708c29f54ed/treecrawl-0.1.24-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71639231dec0fd6e53801bcb42ee77b8d35cb6f39b26134a1111ef7d13017bed",
        "md5": "01686fa6b60b91a567d674f52d6f6524",
        "sha256": "1649902fd1a8570552e10b500e2d42266185053280571dd14687eac418493528"
      },
      "downloads": -1,
      "filename": "treecrawl-0.1.24.tar.gz",
      "has_sig": false,
      "md5_digest": "01686fa6b60b91a567d674f52d6f6524",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22442,
      "upload_time": "2020-09-10T08:59:10",
      "upload_time_iso_8601": "2020-09-10T08:59:10.809028Z",
      "url": "https://files.pythonhosted.org/packages/71/63/9231dec0fd6e53801bcb42ee77b8d35cb6f39b26134a1111ef7d13017bed/treecrawl-0.1.24.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}