{
  "info": {
    "author": "bfzs",
    "author_email": "ydf0509@sohu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "pip install threadpool_executor_shrink_able\n\n\n\n\n\n史上最强的python线程池。\n\n最智能的可自动实时调节线程数量的线程池。此线程池和官方concurrent.futures的线程池 是鸭子类关系，所以可以一键替换类名 或者 import as来替换类名。\n对比官方线程池，有4个创新功能或改进。\n\n1、主要是不仅能扩大，还可自动缩小(官方内置的ThreadpoolExecutor不具备此功能，此概念是什么意思和目的，可以百度java ThreadpoolExecutor的KeepAliveTime参数的介绍)，\n\n2、非常节制的开启多线程，例如实例化一个最大100线程数目的pool，每隔2秒submit一个函数任务，而函数每次只需要1秒就能完成，实际上只需要调节增加到1个线程就可以，不需要慢慢增加到100个线程\n官方的线程池不够智能，会一直增加到最大线程数目，此线程池则不会。\n\n3、线程池任务的queue队列，修改为有界队列\n\n4、此线程池运行函数出错时候，直接显示线程错误，官方的线程池则不会显示错误，例如函数中写1/0,任然不现实错误。\n\n5.有线程池BoundedThreadPoolExecutor改善线程报错和有界队列。\n\n6.patch_builtin_concurrent_futeres_threadpoolexecutor 支持给内置线程池打猴子补丁的方式，一键替换项目中所有原有的Thredpoolexecutor\n\n7.以上是对比concurrent.futures 内置线程池，在博客园和csdn搜索 python自定义线程池这几个关键字，有上百篇博客实现线程池，但总共样子也就两三种，全部是抄袭来抄袭去，而且还很难调用，必须在程序末尾加join啥的，没有任何创意，中国程序员真的是很差劲。\n\n用法例子：\n\n```python\nimport time\nfrom nb_log import nb_print\nfrom threadpool_executor_shrink_able import ThreadPoolExecutorShrinkAble\n\ndef f1(a):\n    time.sleep(0.2)  # 可修改这个数字测试多线程数量调节功能。\n    \n    nb_print(f'{a} 。。。。。。。')\n    \n    # raise Exception('抛个错误测试')  # 官方的不会显示函数出错你，你还以为你写的代码没毛病呢。\n\n\npool = ThreadPoolExecutorShrinkAble(200)\n\n# pool = ThreadPoolExecutor(200)  # 测试对比官方自带\n\nfor i in range(300):\n\n    time.sleep(0.3)  # 这里的间隔时间模拟，当任务来临不密集，只需要少量线程就能搞定f1了，因为f1的消耗时间短，不需要开那么多线程，CustomThreadPoolExecutor比ThreadPoolExecutor 优势之一。\n    \n    pool.submit(f1, str(i))\n\n# 1/下面测试阻塞主线程退出的情况。注释掉可以测主线程退出的情况。\n\n# 2/此代码可以证明，在一段时间后，连续长时间没任务，官方线程池的线程数目还是保持在最大数量了。\n# 而此线程池会自动缩小，实现了java线程池的keppalivetime功能。\n\ntime.sleep(1000000)\n```\n\n## 对比网上线程池\n1\n\n(https://www.cnblogs.com/shenwenlong/p/5604687.html)\n```\n\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport queue\nimport threading\nimport contextlib\nimport time\n\nStopEvent = object()\n\n\nclass ThreadPool(object):\n\n    def __init__(self, max_num):\n        self.q = queue.Queue()#存放任务的队列\n        self.max_num = max_num#最大线程并发数\n\n        self.terminal = False#如果为True 终止所有线程，不再获取新任务\n        self.generate_list = [] #已经创建的线程\n        self.free_list = []#闲置的线程\n\n    def run(self, func, args, callback=None):\n        \"\"\"\n        线程池执行一个任务\n        :param func: 任务函数\n        :param args: 任务函数所需参数\n        :param callback: 任务执行失败或成功后执行的回调函数，回调函数有两个参数1、任务函数执行状态；2、任务函数返回值（默认为None，即：不执行回调函数）\n        :return: 如果线程池已经终止，则返回True否则None\n        \"\"\"\n\n        if len(self.free_list) == 0 and len(self.generate_list) < self.max_num: #无空闲线程和不超过最大线程数\n            self.generate_thread() # 创建线程\n        w = (func, args, callback,)#保存参数为元组\n        self.q.put(w)#添加到任务队列\n\n    def generate_thread(self):\n        \"\"\"\n        创建一个线程\n        \"\"\"\n        t = threading.Thread(target=self.call)\n        t.start()\n\n    def call(self):\n        \"\"\"\n        循环去获取任务函数并执行任务函数\n        \"\"\"\n        current_thread = threading.currentThread#获取当前线程对象\n        self.generate_list.append(current_thread)#添加到已创建线程里\n\n        event = self.q.get() #获取任务\n        while event != StopEvent: #如果不为停止信号\n\n            func, arguments, callback = event#分别取值，\n            try:\n                result = func(*arguments) #运行函数，把结果赋值给result\n                status = True   #运行结果是否正常\n            except Exception as e:\n                status = False #不正常\n                result = e  #结果为错误信息\n\n            if callback is not None: # 是否有回调函数\n                try:\n                    callback(status, result) #执行回调函数\n                except Exception as e:\n                    pass\n\n            if self.terminal: # 默认为False ，如果调用terminal方法\n                event = StopEvent #停止信号\n            else:\n                # self.free_list.append(current_thread) #执行完毕任务，添加到闲置列表\n                # event = self.q.get()    #获取任务\n                # self.free_list.remove(current_thread) #获取到任务之后，从闲置里删除\n                with self.worker_state(self.free_list,current_thread):\n                    event = self.q.get()\n\n\n        else:\n            self.generate_list.remove(current_thread) #如果收到终止信号，就从已创建的列表删除\n\n    def close(self): #终止线程\n        num = len(self.generate_list) #获取总已创建的线程\n        while num:\n            self.q.put(StopEvent) #添加停止信号，有几个线程就添加几个\n            num -= 1\n\n    # 终止线程（清空队列）\n    def terminate(self):\n\n        self.terminal = True #更改为True，\n\n        while self.generate_list: #如果有已创建线程存活\n            self.q.put(StopEvent) #有几个就发几个信号\n        self.q.empty()  #清空队列\n    @contextlib.contextmanager\n    def worker_state(self,free_list,current_thread):\n        free_list.append(current_thread)\n        try:\n            yield\n        finally:\n            free_list.remove(current_thread)\nimport time\n\ndef work(i):\n    print(i)\n\npool = ThreadPool(10)\nfor item in range(50):\n    pool.run(func=work, args=(item,))\npool.terminate()\npool.close()\n\n```\n\n调用方式伤不起\n\n主要原因是用非搜狐线程，要么程序很快结束，要么就一直while 1循环程序结束不了，造成需要这样调用。\n```\npool = ThreadPool(10)\n\nfor item in range(50):\n\n    pool.run(func=work, args=(item,))\n    \npool.terminate()\n\npool.close()\n\n\n```\n\n2 网上线程池之二\n\n(https://www.cnblogs.com/tkqasn/p/5711593.html)\n\n仍然是采用非守护线程，导致调用方式伤不起。啥pool.close pool.join都需要，无法随时提交任务。\n\n```\n   pool=ThreadPool(5)\n    # pool.Deamon=True#需在pool.run之前设置\n    for i in range(1000):\n        pool.run(func=Foo,args=(i,),callback=Bar)\n    pool.close()\n    pool.join()\n    # pool.terminate()\n```\n\n\n源码\n```\n\nimport threading\nimport contextlib\nfrom Queue import Queue\nimport time\n\nclass ThreadPool(object):\n    def __init__(self, max_num):\n        self.StopEvent = 0#线程任务终止符，当线程从队列获取到StopEvent时，代表此线程可以销毁。可设置为任意与任务有区别的值。\n        self.q = Queue()\n        self.max_num = max_num  #最大线程数\n        self.terminal = False   #是否设置线程池强制终止\n        self.created_list = [] #已创建线程的线程列表\n        self.free_list = [] #空闲线程的线程列表\n        self.Deamon=False #线程是否是后台线程\n\n    def run(self, func, args, callback=None):\n        \"\"\"\n        线程池执行一个任务\n        :param func: 任务函数\n        :param args: 任务函数所需参数\n        :param callback:\n        :return: 如果线程池已经终止，则返回True否则None\n        \"\"\"\n\n        if len(self.free_list) == 0 and len(self.created_list) < self.max_num:\n            self.create_thread()\n        task = (func, args, callback,)\n        self.q.put(task)\n\n    def create_thread(self):\n        \"\"\"\n        创建一个线程\n        \"\"\"\n        t = threading.Thread(target=self.call)\n        t.setDaemon(self.Deamon)\n        t.start()\n        self.created_list.append(t)#将当前线程加入已创建线程列表created_list\n\n    def call(self):\n        \"\"\"\n        循环去获取任务函数并执行任务函数\n        \"\"\"\n        current_thread = threading.current_thread()   #获取当前线程对象·\n        event = self.q.get()    #从任务队列获取任务\n        while event != self.StopEvent:   #判断获取到的任务是否是终止符\n\n            func, arguments, callback = event#从任务中获取函数名、参数、和回调函数名\n            try:\n                result = func(*arguments)\n                func_excute_status =True#func执行成功状态\n            except Exception as e:\n                func_excute_status = False\n                result =None\n                print '函数执行产生错误', e#打印错误信息\n\n            if func_excute_status:#func执行成功后才能执行回调函数\n                if callback is not None:#判断回调函数是否是空的\n                    try:\n                        callback(result)\n                    except Exception as e:\n                        print '回调函数执行产生错误', e  # 打印错误信息\n\n\n            with self.worker_state(self.free_list,current_thread):\n                #执行完一次任务后，将线程加入空闲列表。然后继续去取任务，如果取到任务就将线程从空闲列表移除\n                if self.terminal:#判断线程池终止命令，如果需要终止，则使下次取到的任务为StopEvent。\n                    event = self.StopEvent\n                else: #否则继续获取任务\n                    event = self.q.get()  # 当线程等待任务时，q.get()方法阻塞住线程，使其持续等待\n\n        else:#若线程取到的任务是终止符，就销毁线程\n            #将当前线程从已创建线程列表created_list移除\n            self.created_list.remove(current_thread)\n\n    def close(self):\n        \"\"\"\n        执行完所有的任务后，所有线程停止\n        \"\"\"\n        full_size = len(self.created_list)#按已创建的线程数量往线程队列加入终止符。\n        while full_size:\n            self.q.put(self.StopEvent)\n            full_size -= 1\n\n    def terminate(self):\n        \"\"\"\n        无论是否还有任务，终止线程\n        \"\"\"\n        self.terminal = True\n        while self.created_list:\n            self.q.put(self.StopEvent)\n\n        self.q.queue.clear()#清空任务队列\n\n    def join(self):\n        \"\"\"\n        阻塞线程池上下文，使所有线程执行完后才能继续\n        \"\"\"\n        for t in self.created_list:\n            t.join()\n\n\n    @contextlib.contextmanager#上下文处理器，使其可以使用with语句修饰\n    def worker_state(self, state_list, worker_thread):\n        \"\"\"\n        用于记录线程中正在等待的线程数\n        \"\"\"\n        state_list.append(worker_thread)\n        try:\n            yield\n        finally:\n            state_list.remove(worker_thread)\n\n\n\n\n\n\nif __name__ == '__main__':\n    def Foo(arg):\n        return arg\n        # time.sleep(0.1)\n\n    def Bar(res):\n        print res\n\n    pool=ThreadPool(5)\n    # pool.Deamon=True#需在pool.run之前设置\n    for i in range(1000):\n        pool.run(func=Foo,args=(i,),callback=Bar)\n    pool.close()\n    pool.join()\n    # pool.terminate()\n\n    print \"任务队列里任务数%s\" %pool.q.qsize()\n    print \"当前存活子线程数量:%d\" % threading.activeCount()\n    print \"当前线程创建列表:%s\" %pool.created_list\n    print \"当前线程创建列表:%s\" %pool.free_list\n\n详细代码\n```\n\n可以去博客园搜索任意自定义线程池，由于没使用守护线程实现，调用都很麻烦。",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "threadpool,threadpoolexecutor,thread shrink",
    "license": "BSD License",
    "maintainer": "ydf",
    "maintainer_email": "ydf0509@sohu.com",
    "name": "threadpool-executor-shrink-able",
    "package_url": "https://pypi.org/project/threadpool-executor-shrink-able/",
    "platform": "all",
    "project_url": "https://pypi.org/project/threadpool-executor-shrink-able/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/threadpool-executor-shrink-able/1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "shap threadpoolexecutor, realize java keepAliveTime,bounded work queue,direct display of thread errors",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10599717,
  "releases": {
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb44f28d258c88cf49a3e38d5420e8a0eab189ffa9fb402adf36555f5be5e80b",
          "md5": "4280a18c00efa91e2f81fbd79c09814a",
          "sha256": "ffadc40af9edc926a82934407334651e7e1c13a5169425d6051be160a4b0e1e4"
        },
        "downloads": -1,
        "filename": "threadpool_executor_shrink_able-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "4280a18c00efa91e2f81fbd79c09814a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5042,
        "upload_time": "2020-04-29T04:11:43",
        "upload_time_iso_8601": "2020-04-29T04:11:43.924303Z",
        "url": "https://files.pythonhosted.org/packages/eb/44/f28d258c88cf49a3e38d5420e8a0eab189ffa9fb402adf36555f5be5e80b/threadpool_executor_shrink_able-0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ff9cf90c4e68c5025839367408b32e8f1d501feba9b78e065d389986abb446e",
          "md5": "27026878f6df5788d92febd1f58d3e88",
          "sha256": "5fa50b808e395308a052e10235900182675e65d630dcff268349bce7d99c1537"
        },
        "downloads": -1,
        "filename": "threadpool_executor_shrink_able-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "27026878f6df5788d92febd1f58d3e88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5121,
        "upload_time": "2020-04-29T05:36:19",
        "upload_time_iso_8601": "2020-04-29T05:36:19.373415Z",
        "url": "https://files.pythonhosted.org/packages/4f/f9/cf90c4e68c5025839367408b32e8f1d501feba9b78e065d389986abb446e/threadpool_executor_shrink_able-0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d00ea469f565ee05d86bac6a43eaa05f1eb6c72ecc002430f9ad4893d2d7af4d",
          "md5": "375d5acbd013302655cff65f44646dcd",
          "sha256": "c847737223f1b5b64cf3d7a737354db8e09215f5c28967874a9132940877800b"
        },
        "downloads": -1,
        "filename": "threadpool_executor_shrink_able-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "375d5acbd013302655cff65f44646dcd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5291,
        "upload_time": "2020-04-29T05:37:04",
        "upload_time_iso_8601": "2020-04-29T05:37:04.855573Z",
        "url": "https://files.pythonhosted.org/packages/d0/0e/a469f565ee05d86bac6a43eaa05f1eb6c72ecc002430f9ad4893d2d7af4d/threadpool_executor_shrink_able-0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74679555fcd85b713e4bf5ab5a7a2434bf5d95ccb81e062decac176c02b49627",
          "md5": "c8e8810a94b7a3cebf1634567a6458a1",
          "sha256": "38737931ee906850274c111239fdcea727749852dab7faf0c4cb1415c3c3de12"
        },
        "downloads": -1,
        "filename": "threadpool_executor_shrink_able-0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "c8e8810a94b7a3cebf1634567a6458a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5309,
        "upload_time": "2020-04-29T05:38:31",
        "upload_time_iso_8601": "2020-04-29T05:38:31.911315Z",
        "url": "https://files.pythonhosted.org/packages/74/67/9555fcd85b713e4bf5ab5a7a2434bf5d95ccb81e062decac176c02b49627/threadpool_executor_shrink_able-0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cc8b78f76bfce759d686bee96048bdf2cc536b90e2a6fa01a1b684c4ce7849e",
          "md5": "c77429dccdab00fd6ff046878f3b62b0",
          "sha256": "4b833fd518b6b5b3f53df9fb3ae8ce5a779726d136869b2759c304cb1b634512"
        },
        "downloads": -1,
        "filename": "threadpool_executor_shrink_able-0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "c77429dccdab00fd6ff046878f3b62b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5301,
        "upload_time": "2020-04-29T05:39:30",
        "upload_time_iso_8601": "2020-04-29T05:39:30.375331Z",
        "url": "https://files.pythonhosted.org/packages/3c/c8/b78f76bfce759d686bee96048bdf2cc536b90e2a6fa01a1b684c4ce7849e/threadpool_executor_shrink_able-0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "548abf87c47a1942b1af11efba41a5410376a4c86790a2195d2cc6bb98d3dc94",
          "md5": "82ef80e362f29cbeb7ad5fa04448d1b3",
          "sha256": "08f3c916578e7a2e78692f29c7c5dfa1dc90fc73acf6f412da6125657134e290"
        },
        "downloads": -1,
        "filename": "threadpool_executor_shrink_able-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "82ef80e362f29cbeb7ad5fa04448d1b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5355,
        "upload_time": "2020-05-12T14:11:45",
        "upload_time_iso_8601": "2020-05-12T14:11:45.828558Z",
        "url": "https://files.pythonhosted.org/packages/54/8a/bf87c47a1942b1af11efba41a5410376a4c86790a2195d2cc6bb98d3dc94/threadpool_executor_shrink_able-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cc5e5fe163acc7ee2d7119d0f0b965217b2e5d20e7dbacc8f46f21df659b888",
          "md5": "b70f6416858be7c4b89375e8d6932f73",
          "sha256": "cf8cb87468e7fb42535a5606308a37f2c61f634548784fea17c899a5d93f7c2b"
        },
        "downloads": -1,
        "filename": "threadpool_executor_shrink_able-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b70f6416858be7c4b89375e8d6932f73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6070,
        "upload_time": "2020-05-26T08:11:01",
        "upload_time_iso_8601": "2020-05-26T08:11:01.667568Z",
        "url": "https://files.pythonhosted.org/packages/4c/c5/e5fe163acc7ee2d7119d0f0b965217b2e5d20e7dbacc8f46f21df659b888/threadpool_executor_shrink_able-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49d5af73557edef537be97c97436f318fc8aa83a93e4468db513c900fb4769fd",
          "md5": "4401b0d05a561862ef3d1efd837d64a9",
          "sha256": "e5e9e4edda0f4121b8a5f9ef0d9c360e368ab39e9104d6840068bfc3a102e2ec"
        },
        "downloads": -1,
        "filename": "threadpool_executor_shrink_able-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4401b0d05a561862ef3d1efd837d64a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13903,
        "upload_time": "2020-12-30T02:24:06",
        "upload_time_iso_8601": "2020-12-30T02:24:06.991640Z",
        "url": "https://files.pythonhosted.org/packages/49/d5/af73557edef537be97c97436f318fc8aa83a93e4468db513c900fb4769fd/threadpool_executor_shrink_able-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4088f7708d635adf0af08c4a1e6b5a2bad07bb9781958ee845eae082d759a13a",
          "md5": "ebfd8494d478a0629b154231d65e0151",
          "sha256": "11acf5c9c89c33e44eeba663792e9acd058d01946f0ebca34180bc20793cfe01"
        },
        "downloads": -1,
        "filename": "threadpool_executor_shrink_able-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ebfd8494d478a0629b154231d65e0151",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14067,
        "upload_time": "2021-06-09T10:52:06",
        "upload_time_iso_8601": "2021-06-09T10:52:06.354871Z",
        "url": "https://files.pythonhosted.org/packages/40/88/f7708d635adf0af08c4a1e6b5a2bad07bb9781958ee845eae082d759a13a/threadpool_executor_shrink_able-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4088f7708d635adf0af08c4a1e6b5a2bad07bb9781958ee845eae082d759a13a",
        "md5": "ebfd8494d478a0629b154231d65e0151",
        "sha256": "11acf5c9c89c33e44eeba663792e9acd058d01946f0ebca34180bc20793cfe01"
      },
      "downloads": -1,
      "filename": "threadpool_executor_shrink_able-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ebfd8494d478a0629b154231d65e0151",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14067,
      "upload_time": "2021-06-09T10:52:06",
      "upload_time_iso_8601": "2021-06-09T10:52:06.354871Z",
      "url": "https://files.pythonhosted.org/packages/40/88/f7708d635adf0af08c4a1e6b5a2bad07bb9781958ee845eae082d759a13a/threadpool_executor_shrink_able-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}