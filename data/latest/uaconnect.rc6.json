{
  "info": {
    "author": "Airship Tools",
    "author_email": "tools@airship.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "About\n=====\n\n``uaconnect`` is the official Python library for using the `Airship Real-Time Data Streaming\n<https://docs.airship.com/api/connect/>`_ API (formerly known as Connect).\n\nQuestions\n=========\n\nThe best place to ask questions or report a problem is our support site:\nhttp://support.airship.com/\n\nRequirements\n============\n\nTested on Python 3.6, 3.7, 3.8, and 3.9.\n\nFor tests, ``uaconnect`` also needs `Mock <https://github.com/testing-cabal/mock>`_.\n\nRunning Tests\n=============\n\nTo run tests, run:\n\n    $ python -m unittest discover\n\nUsage\n======\n\nSee the `Real-Time Data Streaming Getting Started Guide\n<https://docs.airship.com/tutorials/getting-started/data-streaming/>`_, as\nwell as the `Real-Time Data Streaming API docs\n<https://docs.airship.com/api/connect/>`_ for more details.\n\nRTDS Event Consumer\n-------------------\n\nTo consume standard events from the RTDS API, instantiate a ``EventConsumer`` object\nwith the application key, access token, and an offset recorder. You can then open the\nconnection, and start reading events.\n\nSee more about the RTDS Event Stream\n`in our documentation here <https://docs.airship.com/api/connect/#tag-event-stream>`_.\n\n    >>> import uaconnect\n    >>> consumer = uaconnect.EventConsumer(\n    ...     app_key='application_key',\n    ...     access_token='access_token',\n    ...     recorder=uaconnect.FileRecorder('.offset'))\n    >>> consumer.connect()\n    >>> for event in consumer.read():\n    ...     if event is None:\n    ...        continue\n    >>>     print(\"Got event: {}\".format(event))\n    >>>     consumer.ack(event)\n\n\nRTDS Compliance Event Consumer\n------------------------------\n\nTo consume compliance events from the RTDS API, instantiate a ``ComplianceConsumer`` object\nwith the application key, master secret and an offset recorder. You can then open the\nconnection, and start reading events.\n\nSee more about the RTDS Compliance Event Stream\n`in the documentation here <https://docs.airship.com/api/connect/#tag-compliance-event-stream>`_.\n\n    >>> import uaconnect\n    >>> consumer = uaconnect.EventConsumer(\n    ...     app_key='application_key',\n    ...     master_secret='master_secret',\n    ...     recorder=uaconnect.FileRecorder('.offset'))\n    >>> consumer.connect()\n    >>> for event in consumer.read():\n    ...     if event is None:\n    ...        continue\n    >>>     print(\"Got event: {}\".format(event))\n    >>>     consumer.ack(event)\n\n\nAlternate Data Center Support\n------------------------------\n\nWhen instantiating a ``EventConsumer`` or ``ComplianceConsumer`` you can pass the optional\n`url` argument to explicitly specify the data center your project is located in. Possible\nvalues are \"US\", \"EU\", or an arbitrary base url in the form of `http://domain.xyz/`. The\nlibrary will build the URL path properly from there. If no `url` is specified, \"US\" is used.\n\n    >>> import uaconnect\n    >>> consumer = uaconnect.EventConsumer(\n    ...     app_key='application_key',\n    ...     master_secret='master_secret',\n    ...     url='EU',\n    ...     recorder=uaconnect.FileRecorder('.offset'))\n\n\nOffset recorders\n----------------\n\nOffset recorders inherit from the abstract base class ``uaconnect.Recorder``,\nimplementing ``read_offset`` and ``write_offset`` methods. One recorder is\nincluded in the library, ``FileRecorder``, which stores the offset on disk. In\nthe ``uaconnect.ext.redisrecorder`` package there is an example implementation\nof using an Redis instance to store the offset.\n\n`ack` calls should be placed depending on whether in a failure scenario your\napp wishes to possibly replay an already handled event, or risk dropping one.\nFor the latter, call ``ack`` as soon as the event is read; for the former, call\n``ack`` only after the event has been fully handled.\n\nAdvanced options when connecting\n================================\n\nAirship Real-Time Data Streaming supports a variety of `options when connecting\n<https://docs.airship.com/api/connect/#operation/api/events/post/requestbody>`_\nto make sure that you're only consuming the data that you want. ``uaconnect``\nmakes it easy to use these connection parameters and filters.\n\nSpecifying offsets\n------------------\n\nOne of the advantages of Airship Real-Time Data Streaming is that you can resume from a\nspecific place in the RTDS stream. This is done by specifying the ``offset``\nthat's associated with the event. While ``uaconnect`` automatically tracks\noffsets for you with ``uaconnect.FileRecorder``, you can also explicitly set an\noffset.\n\n    >>> import uaconnect\n    >>> recorder = uaconnect.FileRecorder(\".offset\") # or wherever you would like the file to exist\n    >>> recorder.write_offset(\"8865499359\") # a randomly chosen offset\n    >>> recorder.read_offset()\n    '8865499359'\n\nAn alternative here is to just write the offset explicitly into the file, or\nwhatever ``Recorder`` subclass you're using to track offsets.\n\n    $ cat .offset\n    886549935\n\nNow, the next time you connect, it will pick up from that last offset.\n\nIf you'd like to manually set the offset for a connection to a known value\ninstead of the recorder's offset, set ``resume_offset`` like so:\n\n    >>> consumer.connect(resume_offset='123456789')\n\nUsing filters\n-------------\n\nFilters are a powerful way of filtering what specific information you'd like to\nsee from the RTDS stream. You can filter by event type, device type, latency\non an event, or even specific devices or notifications.\n\nFor a complete list of filters, and their descriptions, check out `the\ndocumentation <https://docs.airship.com/api/connect/#schemas/filters>`_.\n\nHere's a brief example on how to use filters with ``uaconnect``:\n\n    >>> import uaconnect\n    >>> consumer = uaconnect.EventConsumer(\n    ...     app_key='application_key',\n    ...     access_token='access_token',\n    ...     recorder=uaconnect.FileRecorder('.offset')\n    ...     )\n    >>> f = uaconnect.Filter()\n    >>> f.types(\"PUSH_BODY\", \"SEND\") # only receive PUSH_BODY and SEND events.\n    >>> consumer.add_filter(f)\n    >>> consumer.connect()\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://airship.com/",
    "keywords": "",
    "license": "Apache v2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uaconnect",
    "package_url": "https://pypi.org/project/uaconnect/",
    "platform": null,
    "project_url": "https://pypi.org/project/uaconnect/",
    "project_urls": {
      "Homepage": "https://airship.com/"
    },
    "release_url": "https://pypi.org/project/uaconnect/1.0.2/",
    "requires_dist": [
      "requests (>=2.27)"
    ],
    "requires_python": "",
    "summary": "Python package for using Airship Real-Time Data Streaming",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16477004,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3afea8a152170ed543c3f01b0b2e2f1c33537ae88273dcea3335f9c5763e3a0a",
          "md5": "597abe46365f9d38b73a1ff0fbdb7a35",
          "sha256": "8b6e0386593e3415d5d69d2ae93c009b34b11101945ce3f5cb34bd4ef3bfcea7"
        },
        "downloads": -1,
        "filename": "uaconnect-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "597abe46365f9d38b73a1ff0fbdb7a35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6102,
        "upload_time": "2015-11-16T19:45:30",
        "upload_time_iso_8601": "2015-11-16T19:45:30.491317Z",
        "url": "https://files.pythonhosted.org/packages/3a/fe/a8a152170ed543c3f01b0b2e2f1c33537ae88273dcea3335f9c5763e3a0a/uaconnect-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ea4d00936a90cb7db80dd0f0c141b4a0cd36ddf1a5c2886d57d4114260841a1",
          "md5": "2937fbba91d51b48e04dc116ed876492",
          "sha256": "20b3c60160ac374e935c18f6290e6e4e489f3557f83ee37d0b5f66b9ecc5e6b4"
        },
        "downloads": -1,
        "filename": "uaconnect-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2937fbba91d51b48e04dc116ed876492",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7501,
        "upload_time": "2016-08-01T21:48:49",
        "upload_time_iso_8601": "2016-08-01T21:48:49.679011Z",
        "url": "https://files.pythonhosted.org/packages/9e/a4/d00936a90cb7db80dd0f0c141b4a0cd36ddf1a5c2886d57d4114260841a1/uaconnect-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71df113d7f5933a477c990ecfb362283ef245cf9d8de2a1f58065a3bf2d31b28",
          "md5": "8785168e59032178280e46292b807a08",
          "sha256": "24ee3133ae1466bc0174cde563a0d47bb35da9f2747070743e242666e21b9385"
        },
        "downloads": -1,
        "filename": "uaconnect-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8785168e59032178280e46292b807a08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8652,
        "upload_time": "2020-03-04T20:33:48",
        "upload_time_iso_8601": "2020-03-04T20:33:48.327811Z",
        "url": "https://files.pythonhosted.org/packages/71/df/113d7f5933a477c990ecfb362283ef245cf9d8de2a1f58065a3bf2d31b28/uaconnect-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fc2e9afe919137afbba0ee849df023b5f3a41740b811102ab784abfe593ebeb",
          "md5": "952ac072968045287ee3daf8796f5358",
          "sha256": "dd522b65f18a6ac08cbfbcdb3b8d3ec8dd86697c377b3c1518aa934ea7ae5dc9"
        },
        "downloads": -1,
        "filename": "uaconnect-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "952ac072968045287ee3daf8796f5358",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10198,
        "upload_time": "2022-03-25T18:55:04",
        "upload_time_iso_8601": "2022-03-25T18:55:04.812392Z",
        "url": "https://files.pythonhosted.org/packages/8f/c2/e9afe919137afbba0ee849df023b5f3a41740b811102ab784abfe593ebeb/uaconnect-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df6527cd57e98c4c99430211e140f2f1481795b252ee54a4121137931f8126de",
          "md5": "7ece60473c7e1f78814d09b027e8711a",
          "sha256": "45c1bda835c252ecbdf7b8ff44474fc6b09e673cdb64d56d5fdafe93af9e4b46"
        },
        "downloads": -1,
        "filename": "uaconnect-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ece60473c7e1f78814d09b027e8711a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10942,
        "upload_time": "2022-03-25T18:55:06",
        "upload_time_iso_8601": "2022-03-25T18:55:06.327324Z",
        "url": "https://files.pythonhosted.org/packages/df/65/27cd57e98c4c99430211e140f2f1481795b252ee54a4121137931f8126de/uaconnect-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3672e2df17cc845499b6fa8f6065c25ea2785bd71f4add5143177ccf0c8313bd",
          "md5": "89065bde7e501516a92d40f84053c054",
          "sha256": "7136dae7177c845805f76cec4104472a115d5a5fa0f3acbbcc5893cc4be305e4"
        },
        "downloads": -1,
        "filename": "uaconnect-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89065bde7e501516a92d40f84053c054",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10227,
        "upload_time": "2022-08-03T15:34:25",
        "upload_time_iso_8601": "2022-08-03T15:34:25.572170Z",
        "url": "https://files.pythonhosted.org/packages/36/72/e2df17cc845499b6fa8f6065c25ea2785bd71f4add5143177ccf0c8313bd/uaconnect-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa198e9c97a5239c47bd0955b486a2a9d152da17dcf8697665cf1d5a204b4dd5",
          "md5": "2386b994586bf50b62a10d50245bae7d",
          "sha256": "e0e5725764dc91b1e4ba5a589f961e0cd60921a19ce5b7b584982fb51be23bf7"
        },
        "downloads": -1,
        "filename": "uaconnect-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2386b994586bf50b62a10d50245bae7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10964,
        "upload_time": "2022-08-03T15:34:27",
        "upload_time_iso_8601": "2022-08-03T15:34:27.148497Z",
        "url": "https://files.pythonhosted.org/packages/fa/19/8e9c97a5239c47bd0955b486a2a9d152da17dcf8697665cf1d5a204b4dd5/uaconnect-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad60b6d4033936494398f51345b2be51ab5bc16f0b3123eda2292c24764d3309",
          "md5": "3c5af1863ec8405b60c6e5cf4014a283",
          "sha256": "986188b6bb3a30374838a4a9d5fb879a320e8329b943ea71b4ac5aaf1de155a7"
        },
        "downloads": -1,
        "filename": "uaconnect-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c5af1863ec8405b60c6e5cf4014a283",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10290,
        "upload_time": "2023-01-18T21:43:14",
        "upload_time_iso_8601": "2023-01-18T21:43:14.091524Z",
        "url": "https://files.pythonhosted.org/packages/ad/60/b6d4033936494398f51345b2be51ab5bc16f0b3123eda2292c24764d3309/uaconnect-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a58680736a1563a6815399e106930f97ffbfaa0c5c6f5004c996430fa4acb74",
          "md5": "f027af98585002e12ec178bc249169f0",
          "sha256": "682df7137a39f2f84e912121e1d96c2579b0766d3285711336bde5bb635145ea"
        },
        "downloads": -1,
        "filename": "uaconnect-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f027af98585002e12ec178bc249169f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11029,
        "upload_time": "2023-01-18T21:43:15",
        "upload_time_iso_8601": "2023-01-18T21:43:15.258512Z",
        "url": "https://files.pythonhosted.org/packages/7a/58/680736a1563a6815399e106930f97ffbfaa0c5c6f5004c996430fa4acb74/uaconnect-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad60b6d4033936494398f51345b2be51ab5bc16f0b3123eda2292c24764d3309",
        "md5": "3c5af1863ec8405b60c6e5cf4014a283",
        "sha256": "986188b6bb3a30374838a4a9d5fb879a320e8329b943ea71b4ac5aaf1de155a7"
      },
      "downloads": -1,
      "filename": "uaconnect-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c5af1863ec8405b60c6e5cf4014a283",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10290,
      "upload_time": "2023-01-18T21:43:14",
      "upload_time_iso_8601": "2023-01-18T21:43:14.091524Z",
      "url": "https://files.pythonhosted.org/packages/ad/60/b6d4033936494398f51345b2be51ab5bc16f0b3123eda2292c24764d3309/uaconnect-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a58680736a1563a6815399e106930f97ffbfaa0c5c6f5004c996430fa4acb74",
        "md5": "f027af98585002e12ec178bc249169f0",
        "sha256": "682df7137a39f2f84e912121e1d96c2579b0766d3285711336bde5bb635145ea"
      },
      "downloads": -1,
      "filename": "uaconnect-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f027af98585002e12ec178bc249169f0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11029,
      "upload_time": "2023-01-18T21:43:15",
      "upload_time_iso_8601": "2023-01-18T21:43:15.258512Z",
      "url": "https://files.pythonhosted.org/packages/7a/58/680736a1563a6815399e106930f97ffbfaa0c5c6f5004c996430fa4acb74/uaconnect-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}