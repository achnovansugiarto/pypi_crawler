{
  "info": {
    "author": "origamizyt",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Security :: Cryptography"
    ],
    "description": "# Chloryne - libsodium wrapper\n\nAnother libsodium wrapper, with its own scheme.\n\n## Installation\n\nChloryne is available via PyPI:\n```\n$ pip install chloryne\n```\n\nInstallation requires the presence of `libsodium`.\n\n## Usage\n\nUse the up-level interface `Chloride` for a full cryptographic scheme.\n\nKey generation:\n```py\nfrom chloryne import Chloride\n# lib sodium will be initialized automatically\n\nserver = Chloride()\nclient = Chloride()\n```\n\nKey export / import:\n```py\nserver.importKey(client.exportKey())\nclient.importKey(server.exportKey())\n```\n\nCompute a blake2b-derived shared secret:\n```py\nassert server.compute() == client.compute()\n```\n\n> NOTE: If you want a raw secret use `server.privateKey.compute(client.publicKey, raw=True)` and vice versa.\n\nSignature (`Ed25519`):\n```py\nsig = server.sign(b'data')\nassert client.verify(b'data', sig)\n```\n\n> NOTE: Signing messages only does not require peer key.\n\nEncryption (`Curve25519XSalsa20Poly1305`):\n```py\nct = server.encrypt(b'data')\nassert client.decrypt(ct) == b'data'\n```\n\n> NOTE: Decrypting messages only does not require peer key.\n\nUnsafe MAC (fixed key):\n```py\nmac = server.unsafeMAC()\nmac.update(b'data')\ndigest = mac.finalize()\nmac = client.unsafeMAC()\nmac.update(b'data')\nassert mac.verify(digest)\n```\n\nSafe MAC (ephemeral keys)\n```py\neph, mac = server.safeMAC()\nmac.update(b'data')\ndigest = mac.finalize()\nmac = client.safeMAC(eph)\nmac.update(b'data')\nassert mac.verify(digest)\n```\n\n> NOTE: Verifying MACs only does not require peer key.\n\nIncremental signing:\n```py\nfrom chloride.signers import Signer\n\nsigner = Signer()\nsigner.update(b'data')\nsig = signer.sign(server.privateKey)\nsigner = Signer()\nsigner.update(b'data')\nassert signer.verify(client.peerPublicKey, sig)\n```\n\nPassword hashing:\n```py\nfrom chloride.password import Password\nimport os\n\n# password-based KDF\nsalt = os.urandom(32) # must be 32-bytes\nPassword.derive(b'password', salt)\n\n# password storage\nstrhash = Password.stringify(b'password')\nassert Password.verify(b'password', strhash)\n```\n\nStream Cipher (`XChaCha20`):\n```py\nfrom chloride.ciphers import StreamCipher\nimport os\n\nkey = os.urandom(32)\nsc = StreamCipher(key)\nct = sc.encrypt(b'data') + sc.nonce\n# other side...\nct, nonce = ct[:-24], ct[-24:]\nsc = StreamCipher(key, nonce)\nassert sc.decrypt(ct) == b'data'\n```\n\n> NOTE: `nonce` is `b''` before calling `encrypt` if not provided via constructor.\n\nStore a chloride:\n```py\nsk = server.privateKey.exportKey()\n# sk is a bytes object that can be stored anywhere\nserver = Chloride(sk)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/origamizyt/chloryne",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chloryne",
    "package_url": "https://pypi.org/project/chloryne/",
    "platform": null,
    "project_url": "https://pypi.org/project/chloryne/",
    "project_urls": {
      "Homepage": "https://gitee.com/origamizyt/chloryne"
    },
    "release_url": "https://pypi.org/project/chloryne/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Another libsodium wrapper.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15937780,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78ce5182fe0951f8c0b8f4aaeabe9b1a85e63380616a611d2e07bd2b032a50d9",
          "md5": "ea8ec6c9566127df348e11de3b7a559b",
          "sha256": "706f7a2bbe320d25adcbec20f36947430aab8a6e359b59c99ccafd4937bc7f9b"
        },
        "downloads": -1,
        "filename": "chloryne-1.0.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ea8ec6c9566127df348e11de3b7a559b",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3",
        "size": 13475,
        "upload_time": "2022-11-30T04:32:47",
        "upload_time_iso_8601": "2022-11-30T04:32:47.430965Z",
        "url": "https://files.pythonhosted.org/packages/78/ce/5182fe0951f8c0b8f4aaeabe9b1a85e63380616a611d2e07bd2b032a50d9/chloryne-1.0.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c914730c4dd7b1ef3fd3ca418dc2c5a5c887fef67142c1401392289aa7339f52",
          "md5": "defe4398698e9e18f9793c97ffe21384",
          "sha256": "88385bae381d9f2458bba1647a272e47d0d9112a3467401ac345a5868fcc7883"
        },
        "downloads": -1,
        "filename": "chloryne-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "defe4398698e9e18f9793c97ffe21384",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 8672,
        "upload_time": "2022-11-30T04:32:49",
        "upload_time_iso_8601": "2022-11-30T04:32:49.857691Z",
        "url": "https://files.pythonhosted.org/packages/c9/14/730c4dd7b1ef3fd3ca418dc2c5a5c887fef67142c1401392289aa7339f52/chloryne-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78ce5182fe0951f8c0b8f4aaeabe9b1a85e63380616a611d2e07bd2b032a50d9",
        "md5": "ea8ec6c9566127df348e11de3b7a559b",
        "sha256": "706f7a2bbe320d25adcbec20f36947430aab8a6e359b59c99ccafd4937bc7f9b"
      },
      "downloads": -1,
      "filename": "chloryne-1.0.0-cp37-cp37m-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ea8ec6c9566127df348e11de3b7a559b",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3",
      "size": 13475,
      "upload_time": "2022-11-30T04:32:47",
      "upload_time_iso_8601": "2022-11-30T04:32:47.430965Z",
      "url": "https://files.pythonhosted.org/packages/78/ce/5182fe0951f8c0b8f4aaeabe9b1a85e63380616a611d2e07bd2b032a50d9/chloryne-1.0.0-cp37-cp37m-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c914730c4dd7b1ef3fd3ca418dc2c5a5c887fef67142c1401392289aa7339f52",
        "md5": "defe4398698e9e18f9793c97ffe21384",
        "sha256": "88385bae381d9f2458bba1647a272e47d0d9112a3467401ac345a5868fcc7883"
      },
      "downloads": -1,
      "filename": "chloryne-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "defe4398698e9e18f9793c97ffe21384",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 8672,
      "upload_time": "2022-11-30T04:32:49",
      "upload_time_iso_8601": "2022-11-30T04:32:49.857691Z",
      "url": "https://files.pythonhosted.org/packages/c9/14/730c4dd7b1ef3fd3ca418dc2c5a5c887fef67142c1401392289aa7339f52/chloryne-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}