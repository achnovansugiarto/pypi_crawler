{
  "info": {
    "author": "kent010341",
    "author_email": "kent010341@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# adttools\n\n## System Requirement\n* Python 3.6 or above\n* pandas\n\n---\n\n## Table of contents\n* [ModelHelper](#azuredigitaltwinstoolshelpermodelhelper)  \n  * [list_models](#list_models)  \n  * [find_model_components_list](#find_model_components_list)\n  * [picker](#picker)\n  * [get_component_dict](#get_component_dict)\n* [RelationshipHelper](#azuredigitaltwinstoolshelperrelationshiphelper)  \n  * [list_relationships](#list_relationships)\n  * [add_relationship](#add_relationship)\n  * [delete_relationship](#delete_relationship)\n  * [find_relationships_with_target](#find_relationships_with_target)\n  * [find_and_delete_relationships](#find_and_delete_relationships)\n* [PropertyHelper](#azuredigitaltwinstoolshelperpropertyhelper)  \n  * [get_twin_detail](#get_twin_detail)  \n  * [prepare_property](#prepare_property)\n  * [prepare_component](#prepare_component)\n  * [prepare_relationship](#prepare_relationship)\n  * [submit](#submit)\n  * [update_property](#update_property)\n  * [add_property](#add_property)\n  * [remove_property](#remove_property)\n* [TwinHelper](#azuredigitaltwinstoolshelpertwinhelper)  \n  * [add_twin](#add_twin)\n  * [delete_twin](#delete_twin)\n* [QueryHelper](#azuredigitaltwinstoolshelperqueryhelper)  \n  * [query_twins](#query_twins)\n  * [query_relationships](#query_relationships)\n  * [run_query](#run_query)\n* [DeployHelper](#azuredigitaltwinstoolshelperqueryhelper)  \n  * [csv_deploy](#csv_deploy)\n  * [clear](#clear)\n\n---\n\n## adttools.helper\nAll helpers requires 3 parameters to initialize. Either `token_path` or `token` should be given.  \n    \n* `host_name`: `str`  \n  Host name of the Azure Digital Twins Instance. You can get it from the Azure portal.  \n  ![](https://i.imgur.com/tTuBVYM.png)  \n\n* `token_path`: `str`  \n  The path of a text file storing the bearer token get by using this command with Azure CLI.  \n  `az account get-access-token --resource 0b07f429-9f4b-4714-9392-cc5e8e80c8b0`  \n\n* `token`: `str`  \n  A string of token. Get by using this command with Azure CLI.  \n  `az account get-access-token --resource 0b07f429-9f4b-4714-9392-cc5e8e80c8b0`  \n\n---\n\n## adttools.helper.ModelHelper\n`class adttools.helper.ModelHelper(host_name, token_path=None, token=None)`  \n\nThis class can help you deal with the searching requirements of model.  \n\n### list_models\n`list_models(model=None)`  \n\nList all model if `model` is not specified.  \nIf `model` is specified, list all related models including extending and component.  \n\n* Parameters  \n  * `model`: `str`  \n    Model ID.\n    \n* Return  \n  Type: `dict`  \n  Dictionary of each models.\n\n### find_model\\_components\\_list\n`find_model_components_list(model)`  \n\nGet a list of the name of components of `model`.  \nThis method will affect a private variable which has a getter method `get_component_dict()`.\n\n* Parameters  \n  * `model`: `str`  \n    Model ID.\n    \n* Return  \n  `None`  \n  \n### get\\_component\\_dict\n`get_component_dict()`  \n\nGet current found components of models.  \n\n* Return  \n  Type: `dict` of `list` of `str`  \n  The key is model, value is a list of component of this model.\n\n### picker\n`picker(model_folder, model_list, output_folder='picked')`  \n\nInstead of upload all models of a folder, you can use this method the pick the necessary models.  \nThis method will copy the models of `model_list`, including the models which depend on it from `model_folder` to the folder `output_folder`.  \nYou can use Azure Digital Twins Explorer or [Azure CLI command](https://docs.microsoft.com/en-us/cli/azure/dt/model?view=azure-cli-latest) to upload the folder of picked models.  \n\n* Parameters  \n  * `model_folder`: `str`  \n    Folder path storing lots of models. This method will pick the models from here.  \n  \n  * `model_list`: `list` of `str`  \n    List of model IDs.  \n\n  * `output_folder`: `str`  \n    The picked models will be copied to here.\n    \n* Return  \n  `None`  \n\n---\n\n## adttools.helper.RelationshipHelper\n`class adttools.helper.RelationshipHelper(host_name, token_path=None, token=None)`  \n\nThis class can help you deal with the CRUD requirements of relationships between digital twins.\n\n### list\\_relationships\n`list_relationships(source, rname=None)`  \n\nList all relationships which the source is `source`.  \nIf `rname` is specified, the response will only contain the relationships with this name.\n\n* Parameters  \n  * `source`: `str`  \n    Digital twin ID.  \n\n  * `rname`: `str` (Default: `None`)  \n    Name of the relationship, if not specified, it will list all relationships.  \n\n* Return  \n  Type: `Response` (from the library `requests`)  \n  To get the content (JSON format string) of response, use `.text`.  \n  To get the status code of this HTTP request, use `.status_code`.\n\n### add\\_relationship\n`add_relationship(source, target, rname, init_property={})`  \n\nAdd a relationship from `source` to `target` with name `rname`. The properties of relationship can be add with `init_property`.  \n\n* Parameters  \n  * `source`: `str`  \n    Source digital twin ID.  \n\n  * `target`: `str`  \n    Target digital twin ID.  \n\n  * `rname`: `str`  \n    Name of the relationship.  \n\n  * `init_property`: `dict`  \n    Initial value given to the properties.  \n    should look like `{\"p_1\": 123, \"p_2\":{\"sub_p_1\": \"some value\"}}`  \n\n* Return  \n  Type: `Response` (from the library `requests`)  \n  To get the status code of this HTTP request, use `.status_code`.\n\n### delete\\_relationship\n`delete_relationship(source, rid)`  \n\nDelete a relationship with Id `rid` from `source`.  \n\n* Parameters  \n  * `source`: `str`  \n    Source digital twin ID.  \n\n  * `rid`: `str`  \n    ID of the relationship.  \n\n* Return  \n  Type: `Response` (from the library `requests`)  \n  To get the status code of this HTTP request, use `.status_code`.\n\n### find\\_relationships\\_with\\_target\n`find_relationships_with_target(source, target, rname=None)`  \n\nList all relationships which the source is `source` and the target is `target`.  \nIf `rname` is specified, the response will only contain the relationships with this name.\n\n* Parameters  \n  * `source`: `str`  \n    Source digital twin ID.  \n\n  * `target`: `str`  \n    Target digital twin ID.\n\n  * `rname`: `str` (Default: `None`)  \n    Name of the relationship, if not specified, it will list all relationships.  \n\n* Return  \n  Type: `list` of `dict`  \n  The `dict` inside contains 4 keys: `relationshipId`, `relationshipName`, `sourceId`, `targetId`.\n\n### find\\_and\\_delete\\_relationships\n`find_and_delete_relationships(source, rname=None, target=None)`\n\nDelete all relationships which the source is `source`.  \nIf `rname` is specified, it will only delete the relationships with this name.  \nIf `target` is specified, it will only delete the relationships which the target is this ID.  \n\n* Parameters  \n  * `source`: `str`  \n    Source digital twin ID.  \n\n  * `target`: `str` (Default: `None`)  \n    Target digital twin ID.\n\n  * `rname`: `str` (Default: `None`)  \n    Name of the relationship, if not specified, it will delete all relationships matched.  \n\n* Return  \n  `None`\n\n---\n\n## adttools.helper.PropertyHelper\n`class adttools.helper.PropertyHelper(host_name, token_path=None, token=None)`  \n\nThis class can help you deal with the CRUD requirements of properties of digital twins, including the properties of a component.\n\nExcept for the method `get_twin_detail`, the other methods are like a builder pattern in order to update multiple properties of a twin in one API calling.  \n\ne.g.,  \n\n```\nfrom adttools.helper import PropertyHelper\n\nph = PropertyHelper(token_path=\"...\", host_name=\"...\")\nph.prepare_property(dtid=\"Room1\")\n  .update_property(key=\"temperature\", value=60)\n  .update_property(key=\"humidity\", value=55)\n  .add_property(key=\"name\", value=\"sensor\")\n  .remove_property(key=\"remove\")\n  .submit()\n```\n\n### get\\_twin\\_detail\n`get_twin_detail(dtid)`  \n\nGet the details of a digital twin (twin ID: `dtid`), including properties.\n\n* Parameters  \n  * `dtid`: `str`  \n    Digital twin ID.  \n\n* Return  \n  Type: `Response` (from the library `requests`)  \n  To get the content (JSON format string) of response, use `.text`.  \n  To get the status code of this HTTP request, use `.status_code`.\n\n### prepare_property\n`prepare(dtid)`  \n\nStart a process for updating property. You can use the methods `update_property`, `add_property`, `remove_property` after calling this method.  \n\n* Parameters  \n  * `dtid`: `str`  \n    Digital twin ID. \n\n* Return  \n  `self`\n\n### prepare_component\n`prepare_component(dtid, component_path)`\n\nStart a process for updating component. You can use the methods `update_property`, `add_property`, `remove_property` after calling this method.  \n\n* Parameters  \n  * `dtid`: `str`  \n    Digital twin ID.  \n\n* Return  \n  `self`\n\n### prepare_relationship\n`prepare_relationship(source, rid)`\n\nStart a process for updating properties of a relationship. You can use the methods `update_property`, `add_property`, `remove_property` after calling this method.  \n\n* Parameters  \n  * `source`: `str`  \n    Source digital twin ID.  \n\n  * `rid`: `str`  \n    ID of the relationship.  \n\n* Return  \n  `self`\n\n### submit\n`submit()`  \n\nSubmit the process.  \n\n* Return  \n  `None`\n\n### update_property\n`update_property(key, value)`  \n\nAdd an \"update\" process to current updating process.  \n\n* Parameters  \n  * `key`: `str`  \n    Key of property.  \n\n  * `value`: `str`, `int` or `float`  \n    Value of property.  \n\n* Return  \n  `self`\n\n### add_property\n`add_property(key, value)`  \n\nAdd an \"add\" process to current updating process.  \n\n* Parameters  \n  * `key`: `str`  \n    Key of property.  \n\n  * `value`: `str`, `int` or `float`  \n    Value of property.  \n\n* Return  \n  `self`\n\n### remove_property\n`remove_property(key)`  \n\nAdd an \"remove\" process to current updating process.  \n\n* Parameters  \n  * `key`: `str`  \n    Key of property.  \n\n* Return  \n  `self`\n\n---\n\n## adttools.helper.TwinHelper\n`class adttools.helper.TwinHelper(host_name, token_path=None, token=None)`  \n\nThis class can help you deal with the basic requirements of digital twins.  \n\n### add_twin\n`add_twin(dtid, model, init_property={}, init_component={})`  \n\nAdd a digital twin with specified model ID, the initial value of properties and component can be set by using dictionary.  \n\n* Parameters  \n  * `dtid`: `str`  \n    Digital twin ID  \n\n  * `model`: `str`  \n    dtmi (digital twins model ID)  \n\n  * `init_property`: `dict`  \n    Initial value given to the properties  \n    should look like `{\"p_1\": 123, \"p_2\":{\"sub_p_1\": \"some value\"}}`  \n\n  * `init_component`: `dict`  \n    Initial value given to the components  \n    should look like `{\"c_1\": {\"c_1_property\": \"some value\"}}`  \n\n* Return  \n  Type: `Response` (from the library `requests`)  \n  To get the status code of this HTTP request, use `.status_code`.\n\n### delete_twin\n`delete_twin(dtid)`  \n\nDelete a digital twin with digital twin ID.  \n\n* Parameters  \n  * `dtid`: `str`  \n    Digital twin ID  \n\n* Return  \n  Type: `Response` (from the library `requests`)  \n  To get the status code of this HTTP request, use `.status_code`.\n\n---\n\n## adttools.helper.QueryHelper\n`class adttools.helper.QueryHelper(host_name, token_path=None, token=None)`  \n\nThis class can help you deal with the requirements of querying digital twins and relationships.  \n\n### query_twins\n`query_twins(dtid=None, condition=None)`\n\nQuery twins.\n\n* Parameters  \n  * `dtid`: `str` (Default: `None`)  \n    Source digital twin ID.  \n\n  * `condition`: `str` (Default: `None`)  \n    Other condition can be placed here. \n\n* Return  \n  Type: `list` of `dict`  \n  The matched twins.\n\n### query_relationships\n`query_relationships(source=None, target=None, rname=None)`\n\nQuery relationships.\n\n* Parameters  \n  * `source`: `str` (Default: `None`)  \n    Source digital twin ID.  \n    \n  * `target`: `str` (Default: `None`)  \n    Target digital twin ID.  \n\n  * `rname`: `str` (Default: `None`)  \n    Relationship name. \n\n* Return  \n  Type: `list` of `dict`  \n  The matched relationships.\n\n### run_query\n`run_query(self, query)`  \n\nRun a query string.\n\n* Parameters  \n  * `query`: `str`   \n    Query string.  \n\n* Return  \n  Type: `list` of `dict`  \n  The matched objects.\n\n---\n\n## adttools.helper.DeployHelper\n`class adttools.helper.DeployHelper(host_name, token_path=None, token=None)`  \n\nThis class can help you deal with the requirements of batch deployment of digital twins.  \n\n### csv_deploy\n`csv_deploy(path, atomic=True)`  \n\nDeploy digital twins with a csv file.  \n\n* Columns of this CSV file should be `modelid`, `dtid`, `init_property`, `init_component`, , `rname`, `rtarget`, `init_rproperty`.  \n  `init_property`, `init_component` and `init_rproperty` are optional columns.\n  * `modelid`: model ID\n  * `dtid`: Twin ID\n  * `init_property`: (JSON format) Can be empty, the initial value of properties.\n  * `init_component`: (JSON format) Can be empty, the initial value of components.\n  * `rname`: Relationship name, if `rname` is specified, `rtarget` is required. If multiple relationships are required, just add a new line without `modelid` and using an existing `dtid`.\n  * `rtarget`: Target twin ID if a relationship (`rname`) is specified.\n  * `init_rproperty`: Initial value of properties of relationship if a relationship (`rname`) is specified.\n\n* Parameters  \n  * `path`: `str`  \n    CSV file path.  \n\n  * `atomic`: `bool`  \n    If set as `True`, any step failed during this deployment will start a deletion process to delete the twins and relationships just created.  \n    If set as `False`, any step failed during this deployment will store to a CSV file (file name: `<file name>_failed.csv`) containing the failed twins and relationships. You can fix it and re-deploy it.  \n\n* Return  \n  `None`\n\n### clear\n`clear()`\n\nClean all twins and relationships.\n\n* Return  \n  `None`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kent010341/azure-digital-twins-tools",
    "keywords": "adt,azure,digital twins",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adttools",
    "package_url": "https://pypi.org/project/adttools/",
    "platform": null,
    "project_url": "https://pypi.org/project/adttools/",
    "project_urls": {
      "Homepage": "https://github.com/kent010341/azure-digital-twins-tools"
    },
    "release_url": "https://pypi.org/project/adttools/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Toolkit for calling Azure digital twins REST API.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13705740,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "973acb9a7649c26c33551dcb371b540167d404da765d46fed5731efc56f58527",
          "md5": "2e7c77044f6f9e749c132e3b1dec193d",
          "sha256": "3dcb9543bad5e99c7a7f81222a0288c4461e27f1b8442d54f014b38cfa713ec5"
        },
        "downloads": -1,
        "filename": "adttools-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2e7c77044f6f9e749c132e3b1dec193d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13500,
        "upload_time": "2022-04-26T04:24:50",
        "upload_time_iso_8601": "2022-04-26T04:24:50.048356Z",
        "url": "https://files.pythonhosted.org/packages/97/3a/cb9a7649c26c33551dcb371b540167d404da765d46fed5731efc56f58527/adttools-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89633832fc9ef6ec44e4849e3de46f206e9542ee4c51bbbd8deb1e7f2637b525",
          "md5": "1cec1b583eeb273b508a719cf93eae8a",
          "sha256": "65f6d96b91c2038265ac07e7e12d9fdd0ab78d5ffe78a04717481b262074f13b"
        },
        "downloads": -1,
        "filename": "adttools-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1cec1b583eeb273b508a719cf93eae8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13515,
        "upload_time": "2022-05-04T03:24:28",
        "upload_time_iso_8601": "2022-05-04T03:24:28.197181Z",
        "url": "https://files.pythonhosted.org/packages/89/63/3832fc9ef6ec44e4849e3de46f206e9542ee4c51bbbd8deb1e7f2637b525/adttools-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89633832fc9ef6ec44e4849e3de46f206e9542ee4c51bbbd8deb1e7f2637b525",
        "md5": "1cec1b583eeb273b508a719cf93eae8a",
        "sha256": "65f6d96b91c2038265ac07e7e12d9fdd0ab78d5ffe78a04717481b262074f13b"
      },
      "downloads": -1,
      "filename": "adttools-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1cec1b583eeb273b508a719cf93eae8a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13515,
      "upload_time": "2022-05-04T03:24:28",
      "upload_time_iso_8601": "2022-05-04T03:24:28.197181Z",
      "url": "https://files.pythonhosted.org/packages/89/63/3832fc9ef6ec44e4849e3de46f206e9542ee4c51bbbd8deb1e7f2637b525/adttools-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}