{
  "info": {
    "author": "Alexander Larin",
    "author_email": "ekzebox@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "vk.com API python wrapper for asyncio\n=====================================\nThis is a fork of https://github.com/Fahreeve/aiovk package which looks currently outdated and unmaintained\n\nfor old version of python you can use https://github.com/dimka665/vk\n\nFeatures\n--------\n* asynchronous\n* support python 3.5+ versions\n* have only one dependency - ``aiohttp 3+``\n* support two-factor authentication\n* support socks proxy with ``aiohttp-socks``\n* support rate limit of requests\n* support Long Poll connection\n\nTODO\n----\n* need refactoring tests for ``AsyncVkExecuteRequestPool``\n\nInstall\n-------\n\n.. code-block:: bash\n\n    pip install aiovk2\n\nExamples\n========\nAnnotation\n----------\nIn all the examples below, I will give only the ``{code}``\n\n.. code-block:: python\n\n    async def func():\n        {code}\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(func())\n\n\nAuthorization\n-------------\n**TokenSession** - if you already have token or you use requests which don't require token\n\n.. code-block:: python\n\n    session = TokenSession()\n    session = TokenSession(access_token='asdf123..')\n\n**ImplicitSession** - client authorization in js apps and standalone (desktop and mobile) apps\n\n.. code-block:: python\n\n    >>> session = ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID)\n    >>> await session.authorize()\n    >>> session.access_token\n    asdfa2321afsdf12eadasf123...\n\nWith scopes:\n\n.. code-block:: python\n\n    ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID, 'notify')\n    ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID, 'notify,friends')\n    ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID, ['notify', 'friends'])\n    ImplicitSession(USER_LOGIN, USER_PASSWORD, APP_ID, 3)  # notify and friends\n\nAlso you can use ``SimpleImplicitSessionMixin`` for entering confirmation code\nor captcha key\n\n**AuthorizationCodeSession** - authorization for server apps or Open API\n\nSee https://vk.com/dev/authcode_flow_user for getting the CODE\n\n.. code-block:: python\n\n    >>> session = AuthorizationCodeSession(APP_ID, APP_SECRET, REDIRECT_URI, CODE)\n    >>> await session.authorize()\n    >>> session.access_token\n    asdfa2321afsdf12eadasf123...\n\nOr:\n\n.. code-block:: python\n\n    >>> session = AuthorizationCodeSession(APP_ID, APP_SECRET, REDIRECT_URI)\n    >>> await session.authorize(CODE)\n    >>> session.access_token\n    asdfa2321afsdf12eadasf123...\n\n**Authorization using context manager** - you won't need to use session.close() after work\n\n.. code-block:: python\n\n    async with aiovk2.TokenSession(access_token=YOUR_VK_TOKEN) as ses:\n        api = API(ses)...\n\nAnd your session will be closed after all done or code fail(similar to simple \"with\" usage)\nWorks with all types of authorization\n\nDrivers\n-------\n**HttpDriver** - default driver for using ``aiohttp``\n\n.. code-block:: python\n\n    >>> driver = HttpDriver()\n    >>> driver = HttpDriver(timeout=10)  # default timeout for all requests\n\n.. code-block:: python\n\n    >>> driver = ProxyDriver(PROXY_ADDRESS, PORT)  # 1234 is port\n    >>> driver = ProxyDriver(PROXY_ADDRESS, PORT, timeout=10)\n    >>> driver = ProxyDriver(PROXY_ADDRESS, PORT, PROXY_LOGIN, PROXY_PASSWORD, timeout=10)\n\nHow to use custom driver with session:\n\n.. code-block:: python\n\n    >>> session = TokenSession(..., driver=HttpDriver())\n\nHow to use driver with own loop:\n\n.. code-block:: python\n\n    >>> loop = asyncio.get_event_loop()\n    >>> asyncio.set_event_loop(None)\n    >>> session = TokenSession(driver=HttpDriver(loop=loop))  # or ProxyDriver\n\nHow to use driver with custom http session object:\n\nSolve next problem: https://stackoverflow.com/questions/29827642/asynchronous-aiohttp-requests-fails-but-synchronous-requests-succeed\n\n.. code-block:: python\n\n    >>> connector = aiohttp.TCPConnector(verify_ssl=False)\n    >>> session = aiohttp.ClientSession(connector=connector)\n    >>> driver = HttpDriver(loop=loop, session=session)\n\n\n**LimitRateDriverMixin** - mixin class what allow you create new drivers with speed rate limits\n\n.. code-block:: python\n\n    >>> class ExampleDriver(LimitRateDriverMixin, HttpDriver):\n    ...     requests_per_period = 3\n    ...     period = 1  #seconds\n\nVK API\n------\nFirst variant:\n\n.. code-block:: python\n\n    >>> session = TokenSession()\n    >>> api = API(session)\n    >>> await api.users.get(user_ids=1)\n    [{'first_name': 'Pavel', 'last_name': 'Durov', 'id': 1}]\n\nSecond variant:\n\n.. code-block:: python\n\n    >>> session = TokenSession()\n    >>> api = API(session)\n    >>> await api('users.get', user_ids=1)\n    [{'first_name': 'Pavel', 'last_name': 'Durov', 'id': 1}]\n\nAlso you can add ``timeout`` argument for each request or define it in the session\n\nSee https://vk.com/dev/methods for detailed API guide.\n\nLazy VK API\n-----------\nIt is useful when a bot has a large message flow\n\n.. code-block:: python\n\n    >>> session = TokenSession()\n    >>> api = LazyAPI(session)\n    >>> message = api.users.get(user_ids=1)\n    >>> await message()\n    [{'first_name': 'Pavel', 'last_name': 'Durov', 'id': 1}]\n\nSupports both variants like API object\n\nUser Long Poll\n--------------\nFor documentation, see: https://vk.com/dev/using_longpoll\n\nUse exist API object\n\n.. code-block:: python\n\n    >>> api = API(session)\n    >>> lp = UserLongPoll(api, mode=2)  # default wait=25\n    >>> await lp.wait()\n    {\"ts\":1820350345,\"updates\":[...]}\n    >>> await lp.wait()\n    {\"ts\":1820351011,\"updates\":[...]}\n\nUse Session object\n\n.. code-block:: python\n\n    >>> lp = UserLongPoll(session, mode=2)  # default wait=25\n    >>> await lp.wait()\n    {\"ts\":1820350345,\"updates\":[...]}\n    >>> await lp.get_pts()  # return pts\n    191231223\n    >>> await lp.get_pts(need_ts=True)  # return pts, ts\n    191231223, 1820350345\n\nYou can iterate over events\n\n.. code-block:: python\n\n    >>> async for event in lp.iter():\n    ...     print(event)\n    {\"type\":..., \"object\": {...}}\n\nNotice that ``wait`` value only for long pool connection.\n\nReal pause could be more ``wait`` time because of need time\nfor authorization (if needed), reconnect and etc.\n\nBots Long Poll\n--------------\nFor documentation, see: https://vk.com/dev/bots_longpoll\n\nUse exist API object\n\n.. code-block:: python\n\n    >>> api = API(session)\n    >>> lp = BotsLongPoll(api, group_id=1)  # default wait=25\n    >>> await lp.wait()\n    {\"ts\":345,\"updates\":[...]}\n    >>> await lp.wait()\n    {\"ts\":346,\"updates\":[...]}\n\nUse Session object\n\n.. code-block:: python\n\n    >>> lp = BotsLongPoll(session, group_id=1)  # default wait=25\n    >>> await lp.wait()\n    {\"ts\":78455,\"updates\":[...]}\n    >>> await lp.get_pts()  # return pts\n    191231223\n    >>> await lp.get_pts(need_ts=True)  # return pts, ts\n    191231223, 1820350345\n\nBotsLongPoll supports iterating too\n\n.. code-block:: python\n\n    >>> async for event in lp.iter():\n    ...     print(event)\n    {\"type\":..., \"object\": {...}}\n\nNotice that ``wait`` value only for long pool connection.\n\nReal pause could be more ``wait`` time because of need time\nfor authorization (if needed), reconnect and etc.\n\nAsync execute request pool\n--------------------------\nFor documentation, see: https://vk.com/dev/execute\n\n.. code-block:: python\n\n    from aiovk2.pools import AsyncVkExecuteRequestPool\n\n    async with AsyncVkExecuteRequestPool() as pool:\n        response = pool.add_call('users.get', 'YOUR_TOKEN', {'user_ids': 1})\n        response2 = pool.add_call('users.get', 'YOUR_TOKEN', {'user_ids': 2})\n        response3 = pool.add_call('users.get', 'ANOTHER_TOKEN', {'user_ids': 1})\n        response4 = pool.add_call('users.get', 'ANOTHER_TOKEN', {'user_ids': -1})\n\n    >>> print(response.ok)\n    True\n    >>> print(response.result)\n    [{'id': 1, 'first_name': 'Павел', 'last_name': 'Дуров'}]\n    >>> print(response2.result)\n    [{'id': 2, 'first_name': 'Александра', 'last_name': 'Владимирова'}]\n    >>> print(response3.result)\n    [{'id': 1, 'first_name': 'Павел', 'last_name': 'Дуров'}]\n    >>> print(response4.ok)\n    False\n    >>> print(response4.error)\n    {'method': 'users.get', 'error_code': 113, 'error_msg': 'Invalid user id'}\n\nor\n\n.. code-block:: python\n\n    from aiovk2.pools import AsyncVkExecuteRequestPool\n\n    pool = AsyncVkExecuteRequestPool()\n    response = pool.add_call('users.get', 'YOUR_TOKEN', {'user_ids': 1})\n    response2 = pool.add_call('users.get', 'YOUR_TOKEN', {'user_ids': 2})\n    response3 = pool.add_call('users.get', 'ANOTHER_TOKEN', {'user_ids': 1})\n    response4 = pool.add_call('users.get', 'ANOTHER_TOKEN', {'user_ids': -1})\n    await pool.execute()\n    ...\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alexanderlarin/aiovk2",
    "keywords": "vk.com api vk wrappper asyncio",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiovk2",
    "package_url": "https://pypi.org/project/aiovk2/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiovk2/",
    "project_urls": {
      "Homepage": "https://github.com/alexanderlarin/aiovk2"
    },
    "release_url": "https://pypi.org/project/aiovk2/1.0.0/",
    "requires_dist": [
      "aiohttp (>=3.7.3)",
      "aiohttp-socks (>=0.5.5)"
    ],
    "requires_python": ">=3.6",
    "summary": "vk.com API python wrapper for asyncio",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12613220,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb200474e5deac81b1bbc60d98d778213e6d5e6214b7267a0497def7b20df0c9",
          "md5": "e329fb3dc435320899a9ef37bdb305d3",
          "sha256": "f88fd99584585e51f5d661c55095d0697f47d8b835adf8831bfe65b911bb2fd5"
        },
        "downloads": -1,
        "filename": "aiovk2-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e329fb3dc435320899a9ef37bdb305d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23686,
        "upload_time": "2022-01-19T00:06:11",
        "upload_time_iso_8601": "2022-01-19T00:06:11.605901Z",
        "url": "https://files.pythonhosted.org/packages/bb/20/0474e5deac81b1bbc60d98d778213e6d5e6214b7267a0497def7b20df0c9/aiovk2-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95b9d92886c4a26a89fd33c4bd8a5a8c1019ce1501ca8036d459786bd0bf33b6",
          "md5": "89217091a244454b4e0d8bfa9e9e33be",
          "sha256": "23616539576be1a1ac72bb86cd00ad61022ef7e8b48c03affcff89a80f91f6d3"
        },
        "downloads": -1,
        "filename": "aiovk2-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "89217091a244454b4e0d8bfa9e9e33be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20899,
        "upload_time": "2022-01-19T00:06:14",
        "upload_time_iso_8601": "2022-01-19T00:06:14.364190Z",
        "url": "https://files.pythonhosted.org/packages/95/b9/d92886c4a26a89fd33c4bd8a5a8c1019ce1501ca8036d459786bd0bf33b6/aiovk2-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb200474e5deac81b1bbc60d98d778213e6d5e6214b7267a0497def7b20df0c9",
        "md5": "e329fb3dc435320899a9ef37bdb305d3",
        "sha256": "f88fd99584585e51f5d661c55095d0697f47d8b835adf8831bfe65b911bb2fd5"
      },
      "downloads": -1,
      "filename": "aiovk2-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e329fb3dc435320899a9ef37bdb305d3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23686,
      "upload_time": "2022-01-19T00:06:11",
      "upload_time_iso_8601": "2022-01-19T00:06:11.605901Z",
      "url": "https://files.pythonhosted.org/packages/bb/20/0474e5deac81b1bbc60d98d778213e6d5e6214b7267a0497def7b20df0c9/aiovk2-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95b9d92886c4a26a89fd33c4bd8a5a8c1019ce1501ca8036d459786bd0bf33b6",
        "md5": "89217091a244454b4e0d8bfa9e9e33be",
        "sha256": "23616539576be1a1ac72bb86cd00ad61022ef7e8b48c03affcff89a80f91f6d3"
      },
      "downloads": -1,
      "filename": "aiovk2-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "89217091a244454b4e0d8bfa9e9e33be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20899,
      "upload_time": "2022-01-19T00:06:14",
      "upload_time_iso_8601": "2022-01-19T00:06:14.364190Z",
      "url": "https://files.pythonhosted.org/packages/95/b9/d92886c4a26a89fd33c4bd8a5a8c1019ce1501ca8036d459786bd0bf33b6/aiovk2-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}