{
  "info": {
    "author": "Ted Petrou",
    "author_email": "petrou.theodore@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Matplotlib",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Dexplot\n\n[![](https://img.shields.io/pypi/v/dexplot)](https://pypi.org/project/dexplot)\n[![PyPI - License](https://img.shields.io/pypi/l/dexplot)](LICENSE)\n\nDexplot is a Python library for delivering beautiful data visualizations with a simple and intuitive user experience.\n\n## Goals\n\nThe primary goals for dexplot are:\n\n* Maintain a very consistent API with as few functions as necessary to make the desired statistical plots\n* Allow the user tremendous power without using matplotlib\n\n\n## Installation\n\n`pip install dexplot`\n\n## Built for long and wide data\n\nDexplot is primarily built for long data, which is a form of data where each row represents a single observation and each column represents a distinct quantity. It is often referred to as \"tidy\" data. Here, we have some long data.\n\n![](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/long.png)\n\nDexplot also has the ability to handle wide data, where multiple columns may contain values that represent the same kind of quantity. The same data above has been aggregated to show the mean for each combination of neighborhood and property type. It is now wide data as each column contains the same quantity (price).\n\n![](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/wide.png)\n\n## Usage\n\nDexplot provides a small number of powerful functions that all work similarly. Most plotting functions have the following signature:\n\n```python\ndxp.plotting_func(x, y, data, aggfunc, split, row, col, orientation, ...)\n```\n\n* `x` - Column name along the x-axis\n* `y` - Column name the y-axis\n* `data` - Pandas DataFrame\n* `aggfunc` - String of pandas aggregation function, 'min', 'max', 'mean', etc...\n* `split` - Column name to split data into distinct groups\n* `row` - Column name to split data into distinct subplots row-wise\n* `col` - Column name to split data into distinct subplots column-wise\n* `orientation` - Either vertical (`'v'`) or horizontal (`'h'`). Default for most plots is vertical.\n\nWhen `aggfunc` is provided, `x` will be the grouping variable and `y` will be aggregated when vertical and vice-versa when horizontal. The best way to learn how to use dexplot is with the examples below.\n\n## Families of plots\n\nThere are two primary families of plots, **aggregation** and **distribution**. Aggregation plots take a sequence of values and return a **single** value using the function provided to `aggfunc` to do so. Distribution plots take a sequence of values and depict the shape of the distribution in some manner.\n\n* Aggregation\n    * bar\n    * line\n    * scatter\n    * count\n* Distribution\n    * box\n    * violin\n    * hist\n    * kde\n\n## Comparison with Seaborn\n\nIf you have used the seaborn library, then you should notice a lot of similarities. Much of dexplot was inspired by Seaborn. Below is a list of the extra features in dexplot not found in seaborn\n\n* Ability to graph relative frequency and normalize over any number of variables\n* No need for multiple functions to do the same thing (far fewer public functions)\n* Ability to make grids with a single function instead of having to use a higher level function like `catplot`\n* Pandas `groupby` methods available as strings\n* Ability to sort by values\n* Ability to sort x/y labels lexicographically\n* Ability to select most/least frequent groups\n* x/y labels are wrapped so that they don't overlap\n* Figure size (plus several other options) and available to change without using matplotlib\n* A matplotlib figure object is returned\n\n## Examples\n\nMost of the examples below use long data.\n\n## Aggregating plots - bar, line and scatter\n\nWe'll begin by covering the plots that **aggregate**. An aggregation is defined as a function that summarizes a sequence of numbers with a single value. The examples come from the Airbnb dataset, which contains many property rental listings from the Washington D.C. area.\n\n\n```python\nimport dexplot as dxp\nimport pandas as pd\nairbnb = dxp.load_dataset('airbnb')\nairbnb.head()\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead style=\"border-bottom:1px solid black; vertical-align:bottom;\">\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th style=\"color:red;\">neighborhood</th>\n      <th>property_type</th>\n      <th>accommodates</th>\n      <th>bathrooms</th>\n      <th>bedrooms</th>\n      <th>price</th>\n      <th>cleaning_fee</th>\n      <th>rating</th>\n      <th>superhost</th>\n      <th>response_time</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Shaw</td>\n      <td>Townhouse</td>\n      <td>16</td>\n      <td>3.5</td>\n      <td>4</td>\n      <td>433</td>\n      <td>250</td>\n      <td>95.0</td>\n      <td>No</td>\n      <td>within an hour</td>\n      <td>38.90982</td>\n      <td>-77.02016</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Brightwood Park</td>\n      <td>Townhouse</td>\n      <td>4</td>\n      <td>3.5</td>\n      <td>4</td>\n      <td>154</td>\n      <td>50</td>\n      <td>97.0</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>38.95888</td>\n      <td>-77.02554</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Capitol Hill</td>\n      <td>House</td>\n      <td>2</td>\n      <td>1.5</td>\n      <td>1</td>\n      <td>83</td>\n      <td>35</td>\n      <td>97.0</td>\n      <td>Yes</td>\n      <td>within an hour</td>\n      <td>38.88791</td>\n      <td>-76.99668</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Shaw</td>\n      <td>House</td>\n      <td>2</td>\n      <td>2.5</td>\n      <td>1</td>\n      <td>475</td>\n      <td>0</td>\n      <td>98.0</td>\n      <td>No</td>\n      <td>NaN</td>\n      <td>38.91331</td>\n      <td>-77.02436</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Kalorama Heights</td>\n      <td>Apartment</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>118</td>\n      <td>15</td>\n      <td>91.0</td>\n      <td>No</td>\n      <td>within an hour</td>\n      <td>38.91933</td>\n      <td>-77.04124</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nThere are more than 4,000 listings in our dataset. We will use bar charts to aggregate the data.\n\n\n```python\nairbnb.shape\n```\n\n\n\n\n    (4581, 12)\n\n\n\n### Vertical bar charts\n\nIn order to performa an aggregation, you must supply a value for `aggfunc`. Here, we find the median price per neighborhood. Notice that the column names automatically wrap.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_7_0.png)\n\n\n\nLine and scatter plots can be created with the same command, just substituting the name of the function. They both are not good choices for the visualization since the grouping variable (neighborhood) has no meaningful order.\n\n\n```python\ndxp.line(x='neighborhood', y='price', data=airbnb, aggfunc='median')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_9_0.png)\n\n\n\n\n```python\ndxp.scatter(x='neighborhood', y='price', data=airbnb, aggfunc='median')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_10_0.png)\n\n\n\n### Components of the groupby aggregation\n\nAnytime the `aggfunc` parameter is set, you have performed a groupby aggregation, which always consists of three components:\n\n* Grouping column - unique values of this column form independent groups (neighborhood)\n* Aggregating column - the column that will get summarized with a single value (price)\n* Aggregating function - a function that returns a single value (median)\n\nThe general format for doing this in pandas is:\n\n```python\ndf.groupby('grouping column').agg({'aggregating column': 'aggregating function'})\n```\n\nSpecifically, the following code is executed within dexplot.\n\n\n```python\nairbnb.groupby('neighborhood').agg({'price': 'median'})\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n    </tr>\n    <tr>\n      <th>neighborhood</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Brightwood Park</th>\n      <td>87.0</td>\n    </tr>\n    <tr>\n      <th>Capitol Hill</th>\n      <td>129.5</td>\n    </tr>\n    <tr>\n      <th>Columbia Heights</th>\n      <td>95.0</td>\n    </tr>\n    <tr>\n      <th>Dupont Circle</th>\n      <td>125.0</td>\n    </tr>\n    <tr>\n      <th>Edgewood</th>\n      <td>100.0</td>\n    </tr>\n    <tr>\n      <th>Kalorama Heights</th>\n      <td>118.0</td>\n    </tr>\n    <tr>\n      <th>Shaw</th>\n      <td>133.5</td>\n    </tr>\n    <tr>\n      <th>Union Station</th>\n      <td>120.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Number and percent of missing values with  `'countna'` and `'percna'`\n\nIn addition to all the common aggregating functions, you can use the strings `'countna'` and `'percna'` to get the number and percentage of missing values per group.\n\n\n```python\ndxp.bar(x='neighborhood', y='response_time', data=airbnb, aggfunc='countna')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_14_0.png)\n\n\n\n### Sorting the bars by values\n\nBy default, the bars will be sorted by the grouping column (x-axis here) in alphabetical order. Use the `sort_values` parameter to sort the bars by value.\n\n* None - sort x/y axis labels alphabetically (default)\n* `asc` - sort values from least to greatest\n* `desc` - sort values from greatest to least\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', sort_values='asc')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_16_0.png)\n\n\n\nHere, we sort the values from greatest to least.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', sort_values='desc')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_18_0.png)\n\n\n\n### Specify order with `x_order`\n\nSpecify a specific order of the labels on the x-axis by passing a list of values to `x_order`. This can also act as a filter to limit the number of bars.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median',\n        x_order=['Dupont Circle', 'Edgewood', 'Union Station'])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_20_0.png)\n\n\n\nBy default, `x_order` and all of the `_order` parameters are set to `'asc'` by default, which will order them alphabetically. Use the string `'desc'` to sort in the opposite direction.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', x_order='desc')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_22_0.png)\n\n\n\n### Filter for the neighborhoods with most/least frequency of occurrence\n\nYou can use `x_order` again to filter for the x-values that appear the most/least often by setting it to the string `'top n'` or `'bottom n'` where `n` is an integer. Here, we filter for the top 4 most frequently occurring neighborhoods. This option is useful when there are dozens of unique values in the grouping column.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median',\n        x_order='top 4')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_24_0.png)\n\n\n\nWe can verify that the four neighborhoods are the most common.\n\n\n```python\nairbnb['neighborhood'].value_counts()\n```\n\n\n\n\n    Columbia Heights    773\n    Union Station       713\n    Capitol Hill        654\n    Edgewood            610\n    Dupont Circle       549\n    Shaw                514\n    Brightwood Park     406\n    Kalorama Heights    362\n    Name: neighborhood, dtype: int64\n\n\n\n### Horizontal bars\n\nSet `orientation` to `'h'` for horizontal bars. When you do this, you'll need to switch `x` and `y` since the grouping column (neighborhood) will be along the y-axis and the aggregating column (price) will be along the x-axis.\n\n\n```python\ndxp.bar(x='price', y='neighborhood', data=airbnb, aggfunc='median', \n        orientation='h', sort_values='desc')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_28_0.png)\n\n\n\nSwitching orientation is possible for most other plots.\n\n\n```python\ndxp.line(x='price', y='neighborhood', data=airbnb, aggfunc='median', orientation='h')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_30_0.png)\n\n\n\n### Split bars into groups\n\nYou can split each bar into further groups by setting the `split` parameter to another column.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', split='superhost')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_32_0.png)\n\n\n\nWe can use the `pivot_table` method to verify the results in pandas.\n\n\n```python\nairbnb.pivot_table(index='superhost', columns='neighborhood', \n                   values='price', aggfunc='median')\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>neighborhood</th>\n      <th>Brightwood Park</th>\n      <th>Capitol Hill</th>\n      <th>Columbia Heights</th>\n      <th>Dupont Circle</th>\n      <th>Edgewood</th>\n      <th>Kalorama Heights</th>\n      <th>Shaw</th>\n      <th>Union Station</th>\n    </tr>\n    <tr>\n      <th>superhost</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>No</th>\n      <td>85.0</td>\n      <td>129.0</td>\n      <td>90.5</td>\n      <td>120.0</td>\n      <td>100.0</td>\n      <td>110.0</td>\n      <td>130.0</td>\n      <td>120.0</td>\n    </tr>\n    <tr>\n      <th>Yes</th>\n      <td>90.0</td>\n      <td>130.0</td>\n      <td>103.0</td>\n      <td>135.0</td>\n      <td>100.0</td>\n      <td>124.0</td>\n      <td>135.0</td>\n      <td>125.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nSet the order of the unique split values with `split_order`, which can also act as a filter.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', \n        split='superhost', split_order=['Yes', 'No'])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_36_0.png)\n\n\n\nLike all the `_order` parameters, `split_order` defaults to `'asc'` (alphabetical) order. Set it to `'desc'` for the opposite.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median',\n        split='property_type', split_order='desc')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_38_0.png)\n\n\n\nFiltering for the most/least frequent split categories is possible.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', \n        split='property_type', split_order='bottom 2')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_40_0.png)\n\n\n\nVerifying that the least frequent property types are Townhouse and Condominium.\n\n\n```python\nairbnb['property_type'].value_counts()\n```\n\n\n\n\n    Apartment      2403\n    House           877\n    Townhouse       824\n    Condominium     477\n    Name: property_type, dtype: int64\n\n\n\n### Stacked bar charts\n\nStack all the split groups one on top of the other by setting `stacked` to `True`.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', \n        split='superhost', split_order=['Yes', 'No'], stacked=True)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_44_0.png)\n\n\n\n### Split into multiple plots\n\nIt's possible to split the data further into separate plots by the unique values in a different column with the `row` and `col` parameters. Here, each kind of `property_type` has its own plot.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', \n        split='superhost', col='property_type')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_46_0.png)\n\n\n\nIf there isn't room for all of the plots, set the `wrap` parameter to an integer to set the maximum number of plots per row/col. We also specify the `col_order` to be descending alphabetically.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', \n        split='superhost', col='property_type', wrap=2, col_order='desc')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_48_0.png)\n\n\n\nUse `col_order` to both filter and set a specific order for the plots.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median',\n        split='superhost', col='property_type', col_order=['House', 'Condominium'])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_50_0.png)\n\n\n\nSplits can be made simultaneously along row and columns.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', split='superhost', \n        col='property_type', col_order=['House', 'Condominium', 'Apartment'],\n        row='bedrooms', row_order=[1, 2, 3])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_52_0.png)\n\n\n\nBy default, all axis limits are shared. Allow each plot to set its own limits by setting `sharex` and `sharey` to `False`.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, aggfunc='median', split='superhost', \n        col='property_type', col_order=['House', 'Condominium', 'Apartment'],\n        row='bedrooms', row_order=[1, 2, 3], sharey=False)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_54_0.png)\n\n\n\n### Set the width of each bar with `size`\n\nThe width (height when horizontal) of the bars is set with the `size` parameter. By default, this value is .9. Think of this number as the relative width of all the bars for a particular x/y value, where 1 is the distance between each x/y value.\n\n\n```python\ndxp.bar(x='neighborhood', y='price', data=airbnb, \n        aggfunc='median', split='property_type',\n        split_order=['Apartment', 'House'], \n        x_order=['Dupont Circle', 'Capitol Hill', 'Union Station'], size=.5)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_56_0.png)\n\n\n\n### Splitting line plots\n\nAll the other aggregating plots work similarly.\n\n\n```python\ndxp.line(x='neighborhood', y='price', data=airbnb, \n        aggfunc='median', split='property_type',\n        split_order=['Apartment', 'House'], \n        x_order=['Dupont Circle', 'Capitol Hill', 'Union Station'])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_58_0.png)\n\n\n\n## Distribution plots - box, violin, histogram, kde\n\nDistribution plots work similarly, but do not have an `aggfunc` since they do not aggregate. They take their group of values and draw some kind of shape that gives information on how that variable is distributed. \n\n### Box plots\n\nBox plots have colored boxes with ends at the first and third quartiles and a line at the median. The whiskers are placed at 1.5 times the difference between the third and first quartiles (Interquartile range (IQR)). Fliers are the points outside this range and plotted individually. By default, both box and violin plots are plotted horizontally.\n\n\n```python\ndxp.box(x='price', y='neighborhood', data=airbnb)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_60_0.png)\n\n\n\nSplit the groups in the same manner as with the aggregation plots.\n\n\n```python\ndxp.box(x='price', y='neighborhood', data=airbnb, \n        split='superhost', split_order=['Yes', 'No'])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_62_0.png)\n\n\n\nOrder the appearance of the splits alphabetically (in descending order here).\n\n\n```python\ndxp.box(x='price', y='neighborhood', data=airbnb, \n        split='property_type', split_order='desc')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_64_0.png)\n\n\n\n### Filter range of values with `x_order`\n\nIt's possible to filter the range of possible values by passing in a list of the minimum and maximum to `x_order`.\n\n\n```python\ndxp.box(x='price', y='neighborhood', data=airbnb, \n        split='superhost', x_order=[50, 250])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_66_0.png)\n\n\n\nChange the `x` and `y` while setting `orientation` to make vertical bar plots.\n\n\n```python\ndxp.box(x='neighborhood', y='price', data=airbnb, orientation='v',\n        split='property_type', split_order='top 2')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_68_0.png)\n\n\n\nViolin plots work identically to box plots, but show \"violins\", kernel density plots duplicated on both sides of a line.\n\n\n```python\ndxp.violin(x='price', y='neighborhood', data=airbnb, \n          split='superhost', split_order=['Yes', 'No'])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_70_0.png)\n\n\n\nSplitting by rows and columns is possible as well with distribution plots.\n\n\n```python\ndxp.box(x='price', y='neighborhood', data=airbnb,split='superhost', \n        col='property_type', col_order=['House', 'Condominium', 'Apartment'],\n        row='bedrooms', row_order=[1, 2])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_72_0.png)\n\n\n\n### Histograms\n\nHistograms work in a slightly different manner. Instead of passing both `x` and `y`, you give it a single numeric column. A vertical histogram with 20 bins of the counts is created by default.\n\n\n```python\ndxp.hist(val='price', data=airbnb)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_74_0.png)\n\n\n\nWe can use `split` just like we did above and also create horizontal histograms.\n\n\n```python\ndxp.hist(val='price', data=airbnb, orientation='h', split='superhost', bins=15)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_76_0.png)\n\n\n\nHere, we customize our histogram by plotting the cumulative density as opposed to the raw frequency count using the outline of the bars ('step').\n\n\n```python\ndxp.hist(val='price', data=airbnb, split='bedrooms', split_order=[1, 2, 3], \n         bins=30, density=True, histtype='step', cumulative=True)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_78_0.png)\n\n\n\n### KDE Plots\n\nKernel density estimates provide an estimate for the probability distribution of a continuous variable. Here, we examine how price is distributed by bedroom.\n\n\n```python\ndxp.kde(x='price', data=airbnb, split='bedrooms', split_order=[1, 2, 3])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_80_0.png)\n\n\n\nGraph the cumulative distribution instead on multiple plots.\n\n\n```python\ndxp.kde(x='price', data=airbnb, split='bedrooms', \n        split_order=[1, 2, 3], cumulative=True, col='property_type', wrap=2)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_82_0.png)\n\n\n\n### Two-dimensional KDE's\n\nProvide two numeric columns to `x` and `y` to get a two dimensional KDE.\n\n\n```python\ndxp.kde(x='price', y='cleaning_fee', data=airbnb)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_84_0.png)\n\n\n\nCreate a grid of two-dimensional KDE's.\n\n\n```python\ndxp.kde(x='price', y='cleaning_fee', data=airbnb, row='neighborhood', wrap=3)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_86_0.png)\n\n\n\n## Count plots\n\nThe `count` function graphs the frequency of unique values as bars. By default, it plots the values in descending order.\n\n\n```python\ndxp.count(val='neighborhood', data=airbnb)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_88_0.png)\n\n\n\nIn pandas, this is a straightforward call to the `value_counts` method.\n\n\n```python\nairbnb['neighborhood'].value_counts()\n```\n\n\n\n\n    Columbia Heights    773\n    Union Station       713\n    Capitol Hill        654\n    Edgewood            610\n    Dupont Circle       549\n    Shaw                514\n    Brightwood Park     406\n    Kalorama Heights    362\n    Name: neighborhood, dtype: int64\n\n\n\n### Relative frequency with `normalize`\n\nInstead of the raw counts, get the relative frequency by setting normalize to `True`.\n\n\n```python\ndxp.count(val='neighborhood', data=airbnb, normalize=True)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_92_0.png)\n\n\n\nHere, we split by property type.\n\n\n```python\ndxp.count(val='neighborhood', data=airbnb, split='property_type')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_94_0.png)\n\n\n\nIn pandas, this is done with the `crosstab` function.\n\n\n```python\npd.crosstab(index=airbnb['property_type'], columns=airbnb['neighborhood'])\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>neighborhood</th>\n      <th>Brightwood Park</th>\n      <th>Capitol Hill</th>\n      <th>Columbia Heights</th>\n      <th>Dupont Circle</th>\n      <th>Edgewood</th>\n      <th>Kalorama Heights</th>\n      <th>Shaw</th>\n      <th>Union Station</th>\n    </tr>\n    <tr>\n      <th>property_type</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Apartment</th>\n      <td>167</td>\n      <td>299</td>\n      <td>374</td>\n      <td>397</td>\n      <td>244</td>\n      <td>284</td>\n      <td>315</td>\n      <td>323</td>\n    </tr>\n    <tr>\n      <th>Condominium</th>\n      <td>35</td>\n      <td>70</td>\n      <td>97</td>\n      <td>62</td>\n      <td>65</td>\n      <td>42</td>\n      <td>52</td>\n      <td>54</td>\n    </tr>\n    <tr>\n      <th>House</th>\n      <td>131</td>\n      <td>137</td>\n      <td>157</td>\n      <td>47</td>\n      <td>146</td>\n      <td>23</td>\n      <td>61</td>\n      <td>175</td>\n    </tr>\n    <tr>\n      <th>Townhouse</th>\n      <td>73</td>\n      <td>148</td>\n      <td>145</td>\n      <td>43</td>\n      <td>155</td>\n      <td>13</td>\n      <td>86</td>\n      <td>161</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nHorizontal stacked count plots.\n\n\n```python\ndxp.count(val='neighborhood', data=airbnb, split='property_type', \n          orientation='h', stacked=True, col='superhost')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_98_0.png)\n\n\n\n### Normalize over different variables\n\nSetting `normalize` to `True`, returns the relative frequency with respect to all of the data. You can normalize over any of the variables provided.\n\n\n```python\ndxp.count(val='neighborhood', data=airbnb, split='property_type', normalize='neighborhood', \n                title='Relative Frequency by Neighborhood')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_100_0.png)\n\n\n\nNormalize over several variables at once with a list.\n\n\n```python\ndxp.count(val='neighborhood', data=airbnb, split='superhost', \n          row='property_type', col='bedrooms', col_order=[1, 2],\n          normalize=['neighborhood', 'property_type', 'bedrooms'], stacked=True)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_102_0.png)\n\n\n\n## Wide data\n\nDexplot can also plot wide data, or data where no aggregation happens. Here is a scatter plot of the location of each listing.\n\n\n```python\ndxp.scatter(x='longitude', y='latitude', data=airbnb, \n            split='neighborhood', col='bedrooms', col_order=[2, 3])\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_104_0.png)\n\n\n\nIf you've already aggregated your data, you can plot it directly without specifying `x` or `y`.\n\n\n```python\ndf = airbnb.pivot_table(index='neighborhood', columns='property_type', \n                        values='price', aggfunc='mean')\ndf\n```\n\n\n\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>property_type</th>\n      <th>Apartment</th>\n      <th>Condominium</th>\n      <th>House</th>\n      <th>Townhouse</th>\n    </tr>\n    <tr>\n      <th>neighborhood</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Brightwood Park</th>\n      <td>96.119760</td>\n      <td>105.000000</td>\n      <td>121.671756</td>\n      <td>133.479452</td>\n    </tr>\n    <tr>\n      <th>Capitol Hill</th>\n      <td>141.210702</td>\n      <td>104.200000</td>\n      <td>170.153285</td>\n      <td>184.459459</td>\n    </tr>\n    <tr>\n      <th>Columbia Heights</th>\n      <td>114.676471</td>\n      <td>126.773196</td>\n      <td>135.292994</td>\n      <td>124.358621</td>\n    </tr>\n    <tr>\n      <th>Dupont Circle</th>\n      <td>146.858942</td>\n      <td>130.709677</td>\n      <td>179.574468</td>\n      <td>139.348837</td>\n    </tr>\n    <tr>\n      <th>Edgewood</th>\n      <td>108.508197</td>\n      <td>112.846154</td>\n      <td>156.335616</td>\n      <td>147.503226</td>\n    </tr>\n    <tr>\n      <th>Kalorama Heights</th>\n      <td>122.542254</td>\n      <td>155.928571</td>\n      <td>92.695652</td>\n      <td>158.230769</td>\n    </tr>\n    <tr>\n      <th>Shaw</th>\n      <td>153.888889</td>\n      <td>158.500000</td>\n      <td>202.114754</td>\n      <td>173.279070</td>\n    </tr>\n    <tr>\n      <th>Union Station</th>\n      <td>128.458204</td>\n      <td>133.833333</td>\n      <td>162.748571</td>\n      <td>162.167702</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndxp.bar(data=df, orientation='h')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_107_0.png)\n\n\n\n### Time series\n\n\n```python\nstocks = pd.read_csv('../data/stocks10.csv', parse_dates=['date'], index_col='date')\nstocks.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSFT</th>\n      <th>AAPL</th>\n      <th>SLB</th>\n      <th>AMZN</th>\n      <th>TSLA</th>\n      <th>XOM</th>\n      <th>WMT</th>\n      <th>T</th>\n      <th>FB</th>\n      <th>V</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1999-10-25</th>\n      <td>29.84</td>\n      <td>2.32</td>\n      <td>17.02</td>\n      <td>82.75</td>\n      <td>NaN</td>\n      <td>21.45</td>\n      <td>38.99</td>\n      <td>16.78</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1999-10-26</th>\n      <td>29.82</td>\n      <td>2.34</td>\n      <td>16.65</td>\n      <td>81.25</td>\n      <td>NaN</td>\n      <td>20.89</td>\n      <td>37.11</td>\n      <td>17.28</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1999-10-27</th>\n      <td>29.33</td>\n      <td>2.38</td>\n      <td>16.52</td>\n      <td>75.94</td>\n      <td>NaN</td>\n      <td>20.80</td>\n      <td>36.94</td>\n      <td>18.27</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1999-10-28</th>\n      <td>29.01</td>\n      <td>2.43</td>\n      <td>16.59</td>\n      <td>71.00</td>\n      <td>NaN</td>\n      <td>21.19</td>\n      <td>38.85</td>\n      <td>19.79</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1999-10-29</th>\n      <td>29.88</td>\n      <td>2.50</td>\n      <td>17.21</td>\n      <td>70.62</td>\n      <td>NaN</td>\n      <td>21.47</td>\n      <td>39.25</td>\n      <td>20.00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndxp.line(data=stocks.head(500))\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/gh-pages/images/output_110_0.png)\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dexplo/dexplot",
    "keywords": "data visualization matplotlib pandas",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dexplot",
    "package_url": "https://pypi.org/project/dexplot/",
    "platform": "",
    "project_url": "https://pypi.org/project/dexplot/",
    "project_urls": {
      "Homepage": "https://github.com/dexplo/dexplot"
    },
    "release_url": "https://pypi.org/project/dexplot/0.1.4/",
    "requires_dist": [
      "numpy (>=1.15)",
      "scipy (>=1.0matplotlib>=3.1)",
      "pandas (>=0.24)",
      "ipywidgets ; extra == 'apps'"
    ],
    "requires_python": ">=3.6",
    "summary": "Powerful and intuitive data visualization library using matplotlib for both long and wide data",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7487996,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6dbb65ea84c49deab2e118e87b8304f9a790285c4fe39a6ba30634bd95f009e",
          "md5": "b1a9c15e801d4a675236bfde4cfe1f09",
          "sha256": "3d6052673966d9999af6cdba35744aa779dba062e76a6d004f0327e3a0685ef0"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1a9c15e801d4a675236bfde4cfe1f09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1220,
        "upload_time": "2018-08-21T16:59:41",
        "upload_time_iso_8601": "2018-08-21T16:59:41.672347Z",
        "url": "https://files.pythonhosted.org/packages/f6/db/b65ea84c49deab2e118e87b8304f9a790285c4fe39a6ba30634bd95f009e/dexplot-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9706a756a63c0c242e47b3a59bfd83d52dc9470cc3a829c0a82f7a6b9797b2da",
          "md5": "e300600aeacf2545af6117ebfd7d6547",
          "sha256": "1380f4fdfac1163942b9dcf3d52f5e781a302eaa09ea1f2aaffd6acf4a2f45cb"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e300600aeacf2545af6117ebfd7d6547",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1016,
        "upload_time": "2018-08-21T16:59:42",
        "upload_time_iso_8601": "2018-08-21T16:59:42.868123Z",
        "url": "https://files.pythonhosted.org/packages/97/06/a756a63c0c242e47b3a59bfd83d52dc9470cc3a829c0a82f7a6b9797b2da/dexplot-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a0b06a8cce185113ffd1fab42820bfd624e51a30340810e386c704e6def4477",
          "md5": "bca6fdbc5832a3e3ee0ddc17e3939174",
          "sha256": "9f435e612f5bcececf28ff153e2b062b526423f256dffaabbebc51dce60349b0"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bca6fdbc5832a3e3ee0ddc17e3939174",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 167868,
        "upload_time": "2020-06-06T15:56:59",
        "upload_time_iso_8601": "2020-06-06T15:56:59.826224Z",
        "url": "https://files.pythonhosted.org/packages/7a/0b/06a8cce185113ffd1fab42820bfd624e51a30340810e386c704e6def4477/dexplot-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f570346bded26795f8a4e08c327af2241cc937b34efb92e736545f134b80b66",
          "md5": "293f7d270f210b199ce9173bd22af284",
          "sha256": "21bd7a4e0d551c44b441b5267d94dec364fec1f4901fa134a030ade25b5ef50f"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "293f7d270f210b199ce9173bd22af284",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 165782,
        "upload_time": "2020-06-06T15:57:01",
        "upload_time_iso_8601": "2020-06-06T15:57:01.513029Z",
        "url": "https://files.pythonhosted.org/packages/4f/57/0346bded26795f8a4e08c327af2241cc937b34efb92e736545f134b80b66/dexplot-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f7e0a8a7a0dfd69dae8aeda507a372f88dc3f7f938c2642078092ff8375d199",
          "md5": "cf4fb9c9b6f4c7647c4c9fbaba22a5b1",
          "sha256": "9eaaff137db5c318154e7fe9413a01b0a32dfb411d39b314bc8449ecb66adfce"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf4fb9c9b6f4c7647c4c9fbaba22a5b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5387,
        "upload_time": "2018-09-14T01:01:58",
        "upload_time_iso_8601": "2018-09-14T01:01:58.880000Z",
        "url": "https://files.pythonhosted.org/packages/8f/7e/0a8a7a0dfd69dae8aeda507a372f88dc3f7f938c2642078092ff8375d199/dexplot-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf661f4e95d5a60349d0d9eaf10d167da3fbad0ac93157920c239443884ba80e",
          "md5": "5c3e91a3d498670cfebc64708aeeb9fc",
          "sha256": "fb73e1d06492be1e79475228479b08ca06bf0cab830098d990dc6c3465b61177"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5c3e91a3d498670cfebc64708aeeb9fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4968,
        "upload_time": "2018-09-14T01:02:00",
        "upload_time_iso_8601": "2018-09-14T01:02:00.040279Z",
        "url": "https://files.pythonhosted.org/packages/cf/66/1f4e95d5a60349d0d9eaf10d167da3fbad0ac93157920c239443884ba80e/dexplot-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c50bf349f7f561832fd85bab4e1bad0752a77b347849e395d1a8093e1db904b0",
          "md5": "0e4aeeb10c38a8c92e8a69ae6848b562",
          "sha256": "961837e69f5cc0c7b26589118cd2b44d3d518aca9d69b394ad570764adaac176"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e4aeeb10c38a8c92e8a69ae6848b562",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18145,
        "upload_time": "2018-10-04T21:49:18",
        "upload_time_iso_8601": "2018-10-04T21:49:18.476831Z",
        "url": "https://files.pythonhosted.org/packages/c5/0b/f349f7f561832fd85bab4e1bad0752a77b347849e395d1a8093e1db904b0/dexplot-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a657f21661a4517cfd212eac649fe180fee66d040e52e668ac894efec0e5d24",
          "md5": "dcffc98e55d7fefe9b2dfbf80b4dd510",
          "sha256": "4f93a726691ed8641155946462ac65edd081e04e4c4ff927fb2d6495598f408c"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dcffc98e55d7fefe9b2dfbf80b4dd510",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17859,
        "upload_time": "2018-10-04T21:49:20",
        "upload_time_iso_8601": "2018-10-04T21:49:20.019207Z",
        "url": "https://files.pythonhosted.org/packages/5a/65/7f21661a4517cfd212eac649fe180fee66d040e52e668ac894efec0e5d24/dexplot-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2170bf17ee576ff110cb945c60ecc075cda5bb01090c75f63a8d8945c3389e8",
          "md5": "c7cc52d5c8e50e089efbddf6e0ad28c6",
          "sha256": "1ba1c18ab471aa34e9e8cb275148d6a1aec28a62814a29c31ed509fcee485939"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7cc52d5c8e50e089efbddf6e0ad28c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18144,
        "upload_time": "2018-10-04T22:17:25",
        "upload_time_iso_8601": "2018-10-04T22:17:25.628681Z",
        "url": "https://files.pythonhosted.org/packages/e2/17/0bf17ee576ff110cb945c60ecc075cda5bb01090c75f63a8d8945c3389e8/dexplot-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d813b6a0d9e83e6470a50791ef334a990e3ce168c92864323f66afdbc2a6b3f0",
          "md5": "26e45990148018f201d644056b40e693",
          "sha256": "3ded42abf855bb6a9d8c7f162dc8c6bcd1c152e6b4bfeede64f336eb89c1ef75"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "26e45990148018f201d644056b40e693",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17929,
        "upload_time": "2018-10-04T22:17:26",
        "upload_time_iso_8601": "2018-10-04T22:17:26.999570Z",
        "url": "https://files.pythonhosted.org/packages/d8/13/b6a0d9e83e6470a50791ef334a990e3ce168c92864323f66afdbc2a6b3f0/dexplot-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce6e29e1e9760d494543761e6d76d1659fe655638ae97d59e2734fd32fe52895",
          "md5": "224b28d9f0d71d8684afc96a6cd730dd",
          "sha256": "3be0f0df7434b1f6ee923794592efd334ef2659f6341116047c0bc242e1febb3"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "224b28d9f0d71d8684afc96a6cd730dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18146,
        "upload_time": "2018-10-04T22:21:49",
        "upload_time_iso_8601": "2018-10-04T22:21:49.442944Z",
        "url": "https://files.pythonhosted.org/packages/ce/6e/29e1e9760d494543761e6d76d1659fe655638ae97d59e2734fd32fe52895/dexplot-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5331e7235b3e6fc9f17c696ddb21446d02e9890186e30ad940dde82a39e378d1",
          "md5": "222dc7d573c7f88a3b21b8de8fc148e7",
          "sha256": "eb2a47626137529aa6a2dc1960f8e9347db5432eb38158a45f1e982d58b6fb23"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "222dc7d573c7f88a3b21b8de8fc148e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17924,
        "upload_time": "2018-10-04T22:21:50",
        "upload_time_iso_8601": "2018-10-04T22:21:50.782043Z",
        "url": "https://files.pythonhosted.org/packages/53/31/e7235b3e6fc9f17c696ddb21446d02e9890186e30ad940dde82a39e378d1/dexplot-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c2ad254df6da96f66cbf48af98788def73ff9115cef2d8e6fb0f88a41a63d26",
          "md5": "e966abeb6bd16c2ba39fc9d3e70fee0b",
          "sha256": "d952fb166365458fd717cd79dfda3bbb677a8ecaa291c6db68b494c11e237017"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e966abeb6bd16c2ba39fc9d3e70fee0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18195,
        "upload_time": "2018-10-04T22:22:40",
        "upload_time_iso_8601": "2018-10-04T22:22:40.579898Z",
        "url": "https://files.pythonhosted.org/packages/0c/2a/d254df6da96f66cbf48af98788def73ff9115cef2d8e6fb0f88a41a63d26/dexplot-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf3c8f2876106f30963b66a82c19b9510c2d34ffd9f3edab03b854fc71124353",
          "md5": "ac2fc289bccd315708386103dc9a6d7b",
          "sha256": "93603fe6cd0364ac3df48ce58baa7d49db4493201e65152cd492ea447afc1ab7"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ac2fc289bccd315708386103dc9a6d7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17928,
        "upload_time": "2018-10-04T22:22:41",
        "upload_time_iso_8601": "2018-10-04T22:22:41.796448Z",
        "url": "https://files.pythonhosted.org/packages/bf/3c/8f2876106f30963b66a82c19b9510c2d34ffd9f3edab03b854fc71124353/dexplot-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "991b8ef680d8fb59317e23618fb0ec6613670b6e89d03b5a9e8f8190b266c8af",
          "md5": "61f9bd6a1da7854ff393352739d89862",
          "sha256": "f14bc48bbffb4cfa068af398548af1fd0d98aec6d488a61cf6a6c0832f0ff43b"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61f9bd6a1da7854ff393352739d89862",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36014,
        "upload_time": "2018-10-07T05:07:36",
        "upload_time_iso_8601": "2018-10-07T05:07:36.999798Z",
        "url": "https://files.pythonhosted.org/packages/99/1b/8ef680d8fb59317e23618fb0ec6613670b6e89d03b5a9e8f8190b266c8af/dexplot-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fc60af96dcb66e09c99eb26f76f47f999268c1d964cf630a15a1ec195292b8d",
          "md5": "1c5f942a4f0ad8794e5669647722b487",
          "sha256": "c141737428809740a8210580037134ab05c57096a98a92ef12aeea24e798c5fa"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "1c5f942a4f0ad8794e5669647722b487",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29240,
        "upload_time": "2018-10-07T05:07:38",
        "upload_time_iso_8601": "2018-10-07T05:07:38.858707Z",
        "url": "https://files.pythonhosted.org/packages/4f/c6/0af96dcb66e09c99eb26f76f47f999268c1d964cf630a15a1ec195292b8d/dexplot-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ee1f9c42f0689f48daebb17b845441b7442e1e8e939159a861cbdfab29b4218",
          "md5": "60b1f3fb8a662681a9d13cea9e67ae74",
          "sha256": "b49ed955afcd78c70c9ea742e2da262430df4f6786546632637cf17e0af21152"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60b1f3fb8a662681a9d13cea9e67ae74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36025,
        "upload_time": "2018-10-07T19:44:25",
        "upload_time_iso_8601": "2018-10-07T19:44:25.163026Z",
        "url": "https://files.pythonhosted.org/packages/5e/e1/f9c42f0689f48daebb17b845441b7442e1e8e939159a861cbdfab29b4218/dexplot-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a3dec3a5cf426a6ca02c7356c08062c398c103ccc668dd421ec479c535b9af3",
          "md5": "c93571adddc8ea29a50e521511cadc5d",
          "sha256": "37f8af7c562052f62dc63797bed03162752a0e0d628c49cc8ff9126842b40f6c"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "c93571adddc8ea29a50e521511cadc5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29255,
        "upload_time": "2018-10-07T19:44:26",
        "upload_time_iso_8601": "2018-10-07T19:44:26.652882Z",
        "url": "https://files.pythonhosted.org/packages/5a/3d/ec3a5cf426a6ca02c7356c08062c398c103ccc668dd421ec479c535b9af3/dexplot-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5baf555b6189101197f4b2eb3319c96b98aa4e94c1b4bfb22953324f81ced326",
          "md5": "d15460467d1147919ea0438f7b34c4bc",
          "sha256": "62dca3add28758a16f38577239e3ae6d9121102e222009a68f55f8013e0a251f"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d15460467d1147919ea0438f7b34c4bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36112,
        "upload_time": "2018-10-07T20:46:53",
        "upload_time_iso_8601": "2018-10-07T20:46:53.781690Z",
        "url": "https://files.pythonhosted.org/packages/5b/af/555b6189101197f4b2eb3319c96b98aa4e94c1b4bfb22953324f81ced326/dexplot-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58e6c002865394758a1c79b3879dc04dd7ec78b8dd5f210a752fc36b9c52055d",
          "md5": "0feb5bcf28b98a4f43d1de1aee5c32c6",
          "sha256": "1e6af6a6e139a57bb7cf9b7f1ddac3ef42e8b0ed0c223edf67f65a90a9d10f78"
        },
        "downloads": -1,
        "filename": "dexplot-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "0feb5bcf28b98a4f43d1de1aee5c32c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29323,
        "upload_time": "2018-10-07T20:46:54",
        "upload_time_iso_8601": "2018-10-07T20:46:54.778685Z",
        "url": "https://files.pythonhosted.org/packages/58/e6/c002865394758a1c79b3879dc04dd7ec78b8dd5f210a752fc36b9c52055d/dexplot-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7388e3c4d46cab6a79d1ed3c9beedc054831d8fb1d1d8c28225c1c9bf1dcd3a2",
          "md5": "d65ebc10937d012420bce11b982beb92",
          "sha256": "e30b0547a0909915042a2eb6cec18ed6f03d88975da88c6ae509349e401224b1"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d65ebc10937d012420bce11b982beb92",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 176431,
        "upload_time": "2020-06-11T17:22:58",
        "upload_time_iso_8601": "2020-06-11T17:22:58.346791Z",
        "url": "https://files.pythonhosted.org/packages/73/88/e3c4d46cab6a79d1ed3c9beedc054831d8fb1d1d8c28225c1c9bf1dcd3a2/dexplot-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c34fc72d23e2eae9b0a6ba0e0bfd9589fd5632726aca2946ae33ea6a37afef1",
          "md5": "27b60b6d505ce0667ba058263a7fc05e",
          "sha256": "0ee1e2537e1cbc0b74cc228b89485cfe04cc89ded8c9488f2732a6578dd14fd6"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "27b60b6d505ce0667ba058263a7fc05e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 183470,
        "upload_time": "2020-06-11T17:23:00",
        "upload_time_iso_8601": "2020-06-11T17:23:00.566581Z",
        "url": "https://files.pythonhosted.org/packages/9c/34/fc72d23e2eae9b0a6ba0e0bfd9589fd5632726aca2946ae33ea6a37afef1/dexplot-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd98b6535ebdfe9e5e9b3941299ad2511a0b4991ce2a8928cfe44544133d5d25",
          "md5": "753c1abef54c63026a7f4417316d4f5e",
          "sha256": "56c58a716b17f751bba33a324d83eafd89dfaebbe4d8f359a27a1b295e0f19e2"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "753c1abef54c63026a7f4417316d4f5e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 172883,
        "upload_time": "2020-06-12T22:32:21",
        "upload_time_iso_8601": "2020-06-12T22:32:21.170845Z",
        "url": "https://files.pythonhosted.org/packages/bd/98/b6535ebdfe9e5e9b3941299ad2511a0b4991ce2a8928cfe44544133d5d25/dexplot-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a623c4452e4b1ec4ba2470de3514be6e43874d783ee31b2df00a8f91104877d0",
          "md5": "7fb9df2db28d1cf43b1f94d148c65699",
          "sha256": "1794c4d08ed3cd16d257937c224b4c7757f69bd4dd4d7c914f9bd9ec275da5da"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7fb9df2db28d1cf43b1f94d148c65699",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 180433,
        "upload_time": "2020-06-12T22:32:23",
        "upload_time_iso_8601": "2020-06-12T22:32:23.604049Z",
        "url": "https://files.pythonhosted.org/packages/a6/23/c4452e4b1ec4ba2470de3514be6e43874d783ee31b2df00a8f91104877d0/dexplot-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a70df70dbd06fa4cfb850957d002d5ce750037e0feb6fd4d77db2c25dd316cee",
          "md5": "0820aba3d45d960bc8298105542e4f5f",
          "sha256": "40421367bc8b0387db3115804dfe425054112a826f8df03db44de1a6dd5bbed4"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0820aba3d45d960bc8298105542e4f5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 173400,
        "upload_time": "2020-06-14T16:19:53",
        "upload_time_iso_8601": "2020-06-14T16:19:53.289922Z",
        "url": "https://files.pythonhosted.org/packages/a7/0d/f70dbd06fa4cfb850957d002d5ce750037e0feb6fd4d77db2c25dd316cee/dexplot-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3f107d3a707a7f2c6e88d0c295c4f7f3f902e39eef5fe1df90733c3f4f884ca",
          "md5": "ada63ca3472223c4cc86934b9e79c7ea",
          "sha256": "7d64a8d4c62105fc39b35b161f1e4e0821b4c0cc53f518d9d38cf544dae02d63"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ada63ca3472223c4cc86934b9e79c7ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 180978,
        "upload_time": "2020-06-14T16:19:55",
        "upload_time_iso_8601": "2020-06-14T16:19:55.444183Z",
        "url": "https://files.pythonhosted.org/packages/d3/f1/07d3a707a7f2c6e88d0c295c4f7f3f902e39eef5fe1df90733c3f4f884ca/dexplot-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e6569a7f4cf863d162500fc434e4ce2f2d2a2cc2c53e7715db9fb10379329bc",
          "md5": "18f0ae1c32fd2f679adcd485d632c0b9",
          "sha256": "5b5e8f92b9fb27c8b45d63da4f45e0c53c98fce4573e15b9dcb38fcb04bd722f"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18f0ae1c32fd2f679adcd485d632c0b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 173402,
        "upload_time": "2020-06-14T21:37:03",
        "upload_time_iso_8601": "2020-06-14T21:37:03.707959Z",
        "url": "https://files.pythonhosted.org/packages/5e/65/69a7f4cf863d162500fc434e4ce2f2d2a2cc2c53e7715db9fb10379329bc/dexplot-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87b0e58166a8bedd5c122023b5589809a4c501814c19d0d1ef80279731a00fad",
          "md5": "764b261a17654cd93c3c5ca89a444111",
          "sha256": "0082db18cde92e877935aaa53e2c48692b00b69e1c6d6aad7bd2576e44b29e68"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "764b261a17654cd93c3c5ca89a444111",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 180967,
        "upload_time": "2020-06-14T21:37:05",
        "upload_time_iso_8601": "2020-06-14T21:37:05.295699Z",
        "url": "https://files.pythonhosted.org/packages/87/b0/e58166a8bedd5c122023b5589809a4c501814c19d0d1ef80279731a00fad/dexplot-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d69a654a5f873b283f9b77a22087c6fd7762551d3fcd725b8fde36c5a11ba894",
          "md5": "4e58d4bf63504ccc20763dd224c85f40",
          "sha256": "81026e37048620d91ccaa0736e6762d0654dd17233d484535c8d3e9b3aa209ce"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e58d4bf63504ccc20763dd224c85f40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 173403,
        "upload_time": "2020-06-16T12:44:44",
        "upload_time_iso_8601": "2020-06-16T12:44:44.601492Z",
        "url": "https://files.pythonhosted.org/packages/d6/9a/654a5f873b283f9b77a22087c6fd7762551d3fcd725b8fde36c5a11ba894/dexplot-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f53e35df6082877882226989e0af2142f8dcb918d1c7f9e4d6c2c363b6459baf",
          "md5": "32b39d2b44f0199c0b0ffb4f78625c7f",
          "sha256": "0a9aee9685a2a69f4243684c75077a7cea012973c4cff4ce0a661a5c880973a2"
        },
        "downloads": -1,
        "filename": "dexplot-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "32b39d2b44f0199c0b0ffb4f78625c7f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 181024,
        "upload_time": "2020-06-16T12:45:05",
        "upload_time_iso_8601": "2020-06-16T12:45:05.063343Z",
        "url": "https://files.pythonhosted.org/packages/f5/3e/35df6082877882226989e0af2142f8dcb918d1c7f9e4d6c2c363b6459baf/dexplot-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d69a654a5f873b283f9b77a22087c6fd7762551d3fcd725b8fde36c5a11ba894",
        "md5": "4e58d4bf63504ccc20763dd224c85f40",
        "sha256": "81026e37048620d91ccaa0736e6762d0654dd17233d484535c8d3e9b3aa209ce"
      },
      "downloads": -1,
      "filename": "dexplot-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4e58d4bf63504ccc20763dd224c85f40",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 173403,
      "upload_time": "2020-06-16T12:44:44",
      "upload_time_iso_8601": "2020-06-16T12:44:44.601492Z",
      "url": "https://files.pythonhosted.org/packages/d6/9a/654a5f873b283f9b77a22087c6fd7762551d3fcd725b8fde36c5a11ba894/dexplot-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f53e35df6082877882226989e0af2142f8dcb918d1c7f9e4d6c2c363b6459baf",
        "md5": "32b39d2b44f0199c0b0ffb4f78625c7f",
        "sha256": "0a9aee9685a2a69f4243684c75077a7cea012973c4cff4ce0a661a5c880973a2"
      },
      "downloads": -1,
      "filename": "dexplot-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "32b39d2b44f0199c0b0ffb4f78625c7f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 181024,
      "upload_time": "2020-06-16T12:45:05",
      "upload_time_iso_8601": "2020-06-16T12:45:05.063343Z",
      "url": "https://files.pythonhosted.org/packages/f5/3e/35df6082877882226989e0af2142f8dcb918d1c7f9e4d6c2c363b6459baf/dexplot-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}