{
  "info": {
    "author": "Max Booth, Nick Ficano, Harold Martin",
    "author_email": "nficano@gmail.com, harold.martin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Multimedia :: Video",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Terminals",
      "Topic :: Utilities"
    ],
    "description": "<div align=\"center\">\n  <p align=\"center\">\n\t  <a href=\"https://pypi.org/project/pytube3/\"><img src=\"https://img.shields.io/pypi/v/pytube3.svg\" alt=\"pypi\"></a>\n\t  <a href=\"https://pypi.python.org/pypi/pytube3/\"><img src=\"https://img.shields.io/pypi/pyversions/pytube3.svg\" /></a>\n\t  <a href=\"https://travis-ci.com/hbmartin/pytube3/\"><img src=\"https://travis-ci.org/hbmartin/pytube3.svg?branch=master\" /></a>\n\t  <a href='https://pytube3.readthedocs.io/en/latest/?badge=latest'><img src='https://readthedocs.org/projects/pytube3/badge/?version=latest' alt='Documentation Status' /></a>\n\t  <a href=\"https://codecov.io/gh/hbmartin/pytube3\"><img src=\"https://codecov.io/gh/hbmartin/pytube3/branch/master/graph/badge.svg\" /></a>\n\t  <a href=\"https://www.codefactor.io/repository/github/hbmartin/pytube3/overview/master\"><img src=\"https://www.codefactor.io/repository/github/hbmartin/pytube3/badge/master\" alt=\"CodeFactor\" /></a>\n\t  <a href=\"https://gitter.im/pytube3/community\"><img src=\"https://img.shields.io/badge/chat-gitter-lightgrey\" /></a>\n  </p>\n</div>\n\n# pytubeX\nAn improvised fork from `pytube3` that has been left unmaintained for months. I've fixed the bugs, done a bit of spring cleaning and got it working for the updated YouTube site that broke it. Will happily give back control to the origional owners of `pytube3` if they want it!\n\n## Table of Contents\n  * [Installation](#installation)\n  * [Quick start](#quick-start)\n  * [Features](#features)\n  * [Usage](#usage)\n  * [Command-line interface](#command-line-interface)\n  * [Development](#development)\n  * [GUIs and other libraries](#guis-and-other-libraries)\n\n## Installation\n\nDownload using pip via pypi.\n\n```bash\n$ pip install pytubeX\n```\n(Mac/homebrew users may need to use ``pip3``)\n\n\n## Quick start\n```python\n >>> from pytube import YouTube\n >>> YouTube('https://youtu.be/9bZkp7q19f0').streams.get_highest_resolution().download()\n >>>\n >>> yt = YouTube('http://youtube.com/watch?v=9bZkp7q19f0')\n >>> yt.streams\n  ... .filter(progressive=True, file_extension='mp4')\n  ... .order_by('resolution')[-1]\n  ... .download()\n```\nA GUI frontend for pytube3 is available at [YouTubeDownload](https://github.com/YouTubeDownload/YouTubeDownload)\n\n## Features\n  * Support for Both Progressive & DASH Streams\n  * Support for downloading complete playlist\n  * Easily Register ``on_download_progress`` & ``on_download_complete`` callbacks\n  * Command-line Interfaced Included\n  * Caption Track Support\n  * Outputs Caption Tracks to .srt format (SubRip Subtitle)\n  * Ability to Capture Thumbnail URL.\n  * Extensively Documented Source Code\n  * No Third-Party Dependencies\n\n## Usage\n\nLet's begin with showing how easy it is to download a video with pytube:\n\n```python\n>>> from pytube import YouTube\n>>> YouTube('http://youtube.com/watch?v=9bZkp7q19f0').streams[0].download()\n```\nThis example will download the highest quality progressive download stream available.\n\nNext, let's explore how we would view what video streams are available:\n\n```python\n>>> yt = YouTube('http://youtube.com/watch?v=9bZkp7q19f0')\n>>> print(yt.streams)\n [<Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"43\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp8.0\" acodec=\"vorbis\">,\n <Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"36\" mime_type=\"video/3gpp\" res=\"240p\" fps=\"30fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"17\" mime_type=\"video/3gpp\" res=\"144p\" fps=\"30fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"avc1.640028\">,\n <Stream: itag=\"248\" mime_type=\"video/webm\" res=\"1080p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.4d401f\">,\n <Stream: itag=\"247\" mime_type=\"video/webm\" res=\"720p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n <Stream: itag=\"244\" mime_type=\"video/webm\" res=\"480p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n <Stream: itag=\"243\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"avc1.4d4015\">,\n <Stream: itag=\"242\" mime_type=\"video/webm\" res=\"240p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"avc1.4d400c\">,\n <Stream: itag=\"278\" mime_type=\"video/webm\" res=\"144p\" fps=\"30fps\" vcodec=\"vp9\">,\n <Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\">,\n <Stream: itag=\"171\" mime_type=\"audio/webm\" abr=\"128kbps\" acodec=\"vorbis\">,\n <Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\">,\n <Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\">,\n <Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\">]\n```\n\n### Selecting an itag\n\nYou may notice that some streams listed have both a video codec and audio codec, while others have just video or just audio, this is a result of YouTube supporting a streaming technique called Dynamic Adaptive Streaming over HTTP (DASH).\n\nIn the context of pytube, the implications are for the highest quality streams; you now need to download both the audio and video tracks and then post-process them with software like FFmpeg to merge them.\n\nThe legacy streams that contain the audio and video in a single file (referred to as \"progressive download\") are still available, but only for resolutions 720p and below.\n\nTo only view these progressive download streams:\n\n```python\n >>> yt.streams.filter(progressive=True)\n  [<Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"43\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp8.0\" acodec=\"vorbis\">,\n  <Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"36\" mime_type=\"video/3gpp\" res=\"240p\" fps=\"30fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"17\" mime_type=\"video/3gpp\" res=\"144p\" fps=\"30fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\">]\n```\n\nConversely, if you only want to see the DASH streams (also referred to as \"adaptive\") you can do:\n\n```python\n>>> yt.streams.filter(adaptive=True)\n [<Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"avc1.640028\">,\n  <Stream: itag=\"248\" mime_type=\"video/webm\" res=\"1080p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.4d401f\">,\n  <Stream: itag=\"247\" mime_type=\"video/webm\" res=\"720p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n  <Stream: itag=\"244\" mime_type=\"video/webm\" res=\"480p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n  <Stream: itag=\"243\" mime_type=\"video/webm\" res=\"360p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"avc1.4d4015\">,\n  <Stream: itag=\"242\" mime_type=\"video/webm\" res=\"240p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"avc1.4d400c\">,\n  <Stream: itag=\"278\" mime_type=\"video/webm\" res=\"144p\" fps=\"30fps\" vcodec=\"vp9\">,\n  <Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"171\" mime_type=\"audio/webm\" abr=\"128kbps\" acodec=\"vorbis\">,\n  <Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\">,\n  <Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\">,\n  <Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\">]\n```\n\n### Playlists\n\nYou can also download a complete Youtube playlist:\n\n```python\n>>> from pytube import Playlist\n>>> playlist = Playlist(\"https://www.youtube.com/playlist?list=PLynhp4cZEpTbRs_PYISQ8v_uwO0_mDg_X\")\n>>> for video in playlist:\n>>> \tvideo.streams.get_highest_resolution().download()\n```\nThis will download the highest progressive stream available (generally 720p) from the given playlist.\n\n### Filtering\n\nPytube allows you to filter on every property available (see the documentation for the complete list), let's take a look at some of the most useful ones.\n\nTo list the audio only streams:\n\n```python\n>>> yt.streams.filter(only_audio=True)\n  [<Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"171\" mime_type=\"audio/webm\" abr=\"128kbps\" acodec=\"vorbis\">,\n  <Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\">,\n  <Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\">,\n  <Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\">]\n```\n\nTo list only ``mp4`` streams:\n\n```python\n>>> yt.streams.filter(subtype='mp4')\n [<Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"30fps\" vcodec=\"avc1.640028\">,\n  <Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.4d401f\">,\n  <Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n  <Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.4d401e\">,\n  <Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"30fps\" vcodec=\"avc1.4d4015\">,\n  <Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"30fps\" vcodec=\"avc1.4d400c\">,\n  <Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\">]\n```\n\nMultiple filters can also be specified:\n\n```python\n>>> yt.streams.filter(subtype='mp4', progressive=True)\n>>> # this can also be expressed as:\n>>> yt.streams.filter(subtype='mp4').filter(progressive=True)\n  [<Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">,\n  <Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"30fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\">]\n```\nYou also have an interface to select streams by their itag, without needing to filter:\n\n```python\n>>> yt.streams.get_by_itag(22)\n  <Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"30fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\">\n```\n\nIf you need to optimize for a specific feature, such as the \"highest resolution\" or \"lowest average bitrate\":\n\n```python\n>>> yt.streams.filter(progressive=True).order_by('resolution').desc()\n```\nNote: Using ``order_by`` on a given attribute will filter out all streams missing that attribute.\n\n### Callbacks\n\nIf your application requires post-processing logic, pytube allows you to specify an \"on download complete\" callback function:\n\n```python\n >>> def convert_to_aac(stream: Stream, file_path: str):\n         return  # do work\n\n >>> yt.register_on_complete_callback(convert_to_aac)\n```\n\nSimilarly, if your application requires on-download progress logic, pytube exposes a callback for this as well:\n\n```python\n >>> def show_progress_bar(stream: Stream, chunk: bytes, bytes_remaining: int):\n         return  # do work\n\n >>> yt.register_on_progress_callback(show_progress_bar)\n```\n\n## Command-line interface\n\npytubeX ships with a simple CLI interface (named pytubeX) for downloading videos, playlists, and captions.\n\nLet's start with downloading:\n\n```bash\n$ pytubeX http://youtube.com/watch?v=9bZkp7q19f0 --itag=18\n```\nTo view available streams:\n\n```bash\n$ pytubeX http://youtube.com/watch?v=9bZkp7q19f0 --list\n```\n\nThe complete set of flags are:\n\n```\nusage: pytubeX [-h] [--version] [--itag ITAG] [-r RESOLUTION] [-l] [-v]\n               [--build-playback-report] [-c [CAPTION_CODE]] [-t TARGET]\n               [-a [AUDIO]] [-f [FFMPEG]]\n               [url]\n\nCommand line application to download youtube videos.\n\npositional arguments:\n  url                   The YouTube /watch or /playlist url\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --itag ITAG           The itag for the desired stream\n  -r RESOLUTION, --resolution RESOLUTION\n                        The resolution for the desired stream\n  -l, --list            The list option causes pytube cli to return a list of\n                        streams available to download\n  -v, --verbose         Verbosity level, use up to 4 to increase logging -vvvv\n  --build-playback-report\n                        Save the html and js to disk\n  -c [CAPTION_CODE], --caption-code [CAPTION_CODE]\n                        Download srt captions for given language code. Prints\n                        available language codes if no argument given\n  -t TARGET, --target TARGET\n                        The output directory for the downloaded stream.\n                        Default is current working directory\n  -a [AUDIO], --audio [AUDIO]\n                        Download the audio for a given URL at the highest\n                        bitrate availableDefaults to mp4 format if none is\n                        specified\n  -f [FFMPEG], --ffmpeg [FFMPEG]\n                        Downloads the audio and video stream for resolution\n                        providedIf no resolution is provided, downloads the\n                        best resolutionRuns the command line program ffmpeg to\n                        combine the audio and video\n```\n\n\n\n#### Virtual environment\n\nVirtual environment is setup with [pipenv](https://pipenv-fork.readthedocs.io/en/latest/) and can be automatically activated with [direnv](https://direnv.net/docs/installation.html)\n\n#### Code Formatting\n\nThis project is linted with [pyflakes](https://github.com/PyCQA/pyflakes), formatted with [black](https://github.com/ambv/black), and typed with [mypy](https://mypy.readthedocs.io/en/latest/introduction.html)\n\n\n#### Code of Conduct\n\nTreat other people with helpfulness, gratitude, and consideration! See the [Python Community Code of Conduct](https://www.python.org/psf/codeofconduct/).\n\n## GUIs and other libraries\n* [YouTubeDownload](https://github.com/YouTubeDownload/YouTubeDownload) - Featured GUI frontend for pytube3\n* [Pytube-GUI](https://github.com/GAO23/Pytube-GUI) - Simple GUI frontend for pytube3\n* [StackOverflow questions](https://stackoverflow.com/questions/tagged/pytube)\n* [PySlackers](https://pyslackers.com/web) - Python Slack group",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/H4KKR/pytubeX",
    "keywords": "youtube,download,video,stream",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytubeX",
    "package_url": "https://pypi.org/project/pytubeX/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytubeX/",
    "project_urls": {
      "Bug Reports": "https://github.com/hbmartin/pytube3/issues, https://github.com/H4KKR/pytubeX/issues",
      "Homepage": "https://github.com/H4KKR/pytubeX",
      "Read the Docs": "https://pytube3.readthedocs.io/en/latest/?badge=latest"
    },
    "release_url": "https://pypi.org/project/pytubeX/0.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python X library for downloading YouTube Videos. Fork from pytube3, an unmaintained library.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8591266,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db1cd22a68190b02bfc02142698bb17e5b207d9849dc210d266c40e11cfafcc0",
          "md5": "cb0ef221d36f20af11433db6b20111ce",
          "sha256": "a6c33f43a9d22686b52ffb8cb2b8b7b356d6c01ebdea9b4dbc5bb2df85d73c8d"
        },
        "downloads": -1,
        "filename": "pytubeX-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb0ef221d36f20af11433db6b20111ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38543,
        "upload_time": "2020-07-23T12:58:34",
        "upload_time_iso_8601": "2020-07-23T12:58:34.828395Z",
        "url": "https://files.pythonhosted.org/packages/db/1c/d22a68190b02bfc02142698bb17e5b207d9849dc210d266c40e11cfafcc0/pytubeX-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d57db918457f3c1bf33cafbf37156156d608b62567012ef1cb4dc59e27e84b41",
          "md5": "c7516d39c9222ec8a80cf69f2539b386",
          "sha256": "15375dfc1992461419773ff3c72b1a0722bdd2868e98cec1c1076e186ba03905"
        },
        "downloads": -1,
        "filename": "pytubeX-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c7516d39c9222ec8a80cf69f2539b386",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47995,
        "upload_time": "2020-07-23T12:58:37",
        "upload_time_iso_8601": "2020-07-23T12:58:37.570739Z",
        "url": "https://files.pythonhosted.org/packages/d5/7d/b918457f3c1bf33cafbf37156156d608b62567012ef1cb4dc59e27e84b41/pytubeX-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bae591be6ae378074dce9524b787644989d3cc9ca208d39daef60ae7b57b2f2",
          "md5": "cfd337aba507f9106d7c06f2badae380",
          "sha256": "9db5db45ea156c5da3197d3bdc38e069e6e33364b7abdf2888dceda5a4b5b11d"
        },
        "downloads": -1,
        "filename": "pytubeX-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfd337aba507f9106d7c06f2badae380",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38404,
        "upload_time": "2020-07-23T13:46:12",
        "upload_time_iso_8601": "2020-07-23T13:46:12.170500Z",
        "url": "https://files.pythonhosted.org/packages/4b/ae/591be6ae378074dce9524b787644989d3cc9ca208d39daef60ae7b57b2f2/pytubeX-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "653321a8111c1d4f4d37e12cc5975bb9a4c588cf57979356bc908d3adfa9e404",
          "md5": "2d2cec30e45708f0e5250588cae6151c",
          "sha256": "4e0df483528185bb0f29b7503ea6e3971ff712050b5acb81542659f311215c50"
        },
        "downloads": -1,
        "filename": "pytubeX-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2d2cec30e45708f0e5250588cae6151c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47676,
        "upload_time": "2020-07-23T13:46:13",
        "upload_time_iso_8601": "2020-07-23T13:46:13.768956Z",
        "url": "https://files.pythonhosted.org/packages/65/33/21a8111c1d4f4d37e12cc5975bb9a4c588cf57979356bc908d3adfa9e404/pytubeX-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d873f9a7fd3c775b72da6d465ce88373dfb36033fbad4f48d2b43441f74dda9",
          "md5": "e00d82e00bcdf42a66b157f45decf12a",
          "sha256": "a44c8c661541ceb3c85ea56d2e6611356aef8fe2f2d54dff1f80e0b4eb056186"
        },
        "downloads": -1,
        "filename": "pytubeX-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e00d82e00bcdf42a66b157f45decf12a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38504,
        "upload_time": "2020-07-29T22:41:21",
        "upload_time_iso_8601": "2020-07-29T22:41:21.904220Z",
        "url": "https://files.pythonhosted.org/packages/1d/87/3f9a7fd3c775b72da6d465ce88373dfb36033fbad4f48d2b43441f74dda9/pytubeX-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1de42a748dba95d679ecd4f16212b93cb92c98e3a1b12500de30d9a98ec32b1",
          "md5": "66f13014cb4e3a4fe228e09549a40ab0",
          "sha256": "92c42caa48626581245914d0efefb9f341d767f3aec8395bc2d5a40442244031"
        },
        "downloads": -1,
        "filename": "pytubeX-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "66f13014cb4e3a4fe228e09549a40ab0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47777,
        "upload_time": "2020-07-29T22:41:24",
        "upload_time_iso_8601": "2020-07-29T22:41:24.081484Z",
        "url": "https://files.pythonhosted.org/packages/e1/de/42a748dba95d679ecd4f16212b93cb92c98e3a1b12500de30d9a98ec32b1/pytubeX-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65bc9244f20d4edc259a88e5e08939f4e1954449ad94569bea87af125535103f",
          "md5": "09d673f2d4046268668e5c23e2317984",
          "sha256": "3b321d504ca10498c3949ae78ec9365575c629168213336948815fe05f7eec57"
        },
        "downloads": -1,
        "filename": "pytubeX-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "09d673f2d4046268668e5c23e2317984",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47111,
        "upload_time": "2020-11-05T21:06:47",
        "upload_time_iso_8601": "2020-11-05T21:06:47.492711Z",
        "url": "https://files.pythonhosted.org/packages/65/bc/9244f20d4edc259a88e5e08939f4e1954449ad94569bea87af125535103f/pytubeX-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a0fb9c065d66ea83bb434ce09ec23aab7c50cf82c431b1243f57f2b987836f0",
          "md5": "0b29620f0d90766e1211ed647f05d9bf",
          "sha256": "48da93e8b12f7fb1beb57f384bc932419500d59f4c2b194d9a5baf687c347afb"
        },
        "downloads": -1,
        "filename": "pytubeX-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0b29620f0d90766e1211ed647f05d9bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47102,
        "upload_time": "2020-11-05T22:17:01",
        "upload_time_iso_8601": "2020-11-05T22:17:01.540198Z",
        "url": "https://files.pythonhosted.org/packages/1a/0f/b9c065d66ea83bb434ce09ec23aab7c50cf82c431b1243f57f2b987836f0/pytubeX-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a0fb9c065d66ea83bb434ce09ec23aab7c50cf82c431b1243f57f2b987836f0",
        "md5": "0b29620f0d90766e1211ed647f05d9bf",
        "sha256": "48da93e8b12f7fb1beb57f384bc932419500d59f4c2b194d9a5baf687c347afb"
      },
      "downloads": -1,
      "filename": "pytubeX-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "0b29620f0d90766e1211ed647f05d9bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 47102,
      "upload_time": "2020-11-05T22:17:01",
      "upload_time_iso_8601": "2020-11-05T22:17:01.540198Z",
      "url": "https://files.pythonhosted.org/packages/1a/0f/b9c065d66ea83bb434ce09ec23aab7c50cf82c431b1243f57f2b987836f0/pytubeX-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}