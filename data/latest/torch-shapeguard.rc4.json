{
  "info": {
    "author": "Rasmus Berg Palm",
    "author_email": "rasmusbergpalm@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ShapeGuard\nShapeGuard allows you to very succinctly assert the expected shapes of tensors in a dynamic, einsum inspired way\n\nTurn this:\n\n```python\ndef batch_outer_product(x, y):\n    # x has shape (batch, x_channels)\n    # y has shape (batch, y_channels)\n    # return has shape (batch, x_channels, y_channels)\n\n    return x.unsqueeze(-1) * y.unsqueeze(-2)\n```\n\nInto this:\n\n```python\ndef batch_outer_product(x, y):        \n    x.sg((\"batch\", \"x_channels\"))\n    y.sg((\"batch\", \"y_channels\"))\n\n    return (x.unsqueeze(-1) * y.unsqueeze(-2)).sg((\"batch\", \"x_channels\", \"y_channels\"))\n\n```\n\n\n### Installation\n\n`pip install torch-shapeguard`\n\n### Motivation\n\nIt’s easy to make bugs in ml. \nOne particular rich source of bugs is due to the flexibility of the operators: `a*b` works whether a and b are vectors, scalar vector, vector vector, etc. \nSimilarly `.sum()` will work regardless of the shape of your tensor. \nSince we're doing optimization whatever computation we end up performing, we can probably optimize it to work reasonably, even if it's not doing what we intended. \nSo our algorithm might \"work\" even if we have bugs (just less well). \nThis makes bugs super hard to discover.\n\nThe best way I’ve found to avoid bugs is to religiously check the shapes of all my tensors, all the time, so I end up spending a lot of time debugging and writing comments like `#(bs, n_samples, z_size)` all over the place.\n\nSo why not algorithmically check the shapes then? Well it gets ugly fast.\n\nYou have to add assert `foo.shape == (bs, n_samples, x_size)` everywhere, which essentially doubles your linecount and\nyou have to define all your dimensional sizes (bs, etc.), which might vary across train/test, batches, etc.\nSo I made a small helper that makes it much nicer. I call it ShapeGuard.\n\n### Usage\n\nWhen you `import shapeguard`, It adds the `sg` method to `torch.Tensor` and `torch.distributions.Distribution`.\n\nYou can use the `sg` method like an assert:\n\n```python\ndef forward(self, x, y):\n    x.sg(\"bchw\")\n    y.sg(\"by\")\n```\n\nThis will verify that x has 4 dimensions, y has 2 dimensions and that x and y have the same size in the first dimension 'b'. \n\nIf the assert passes, the tensor is returned. \nThis means you can also chain it inline on results of operations: \n\n```python\nz = f(x).sg(\"bnz\").mean(axis=1).sg(\"bz\")\n```\n\nIf the assert fails it produces a nice error message:\n\n`AssertionError: expected 'b' to be 2 but was 4`\n\nIf you want to verify an exact dimension you can pass an int as the shape e.g.\n\n```python\ndef forward(self, x, y):\n    x.sg((\"b\", 1, \"h\", \"w\"))\n    y.sg(\"by\")\n```\n\nThe special shape '\\*' is reserved for shapes that should not be asserted, e.g. `x.sg(\"*chw\")` will assert all shapes except the first.\n\n### How it works\n\nThe first time `sg` is called for an unseen shape, the size of the tensor for that shape is saved in the `ShapeGuard.shapes` global dict. \nSubsequent calls are checked against this stored shape. \n\nYou can call `ShapeGuard.reset(shape)` to reset a specific shape. \nThis can be useful if e.g. your batch size varies between runs. \n`ShapeGuard.reset()` resets all shapes.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rasmusbergpalm/shapeguard",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torch-shapeguard",
    "package_url": "https://pypi.org/project/torch-shapeguard/",
    "platform": "",
    "project_url": "https://pypi.org/project/torch-shapeguard/",
    "project_urls": {
      "Homepage": "https://github.com/rasmusbergpalm/shapeguard"
    },
    "release_url": "https://pypi.org/project/torch-shapeguard/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "ShapeGuard allows you to very succinctly assert the expected shapes of tensors in a dynamic, einsum inspired way.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10008048,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91184389cca2561678c9bd6ce52625d23c7d6d94b79a90641f79822d7900d63b",
          "md5": "156ccfb23bc6f3d380bf03b5f515e766",
          "sha256": "8fa333c087736cc9081c4f5d867341d6a0f94708bc2c7a3cdf154f7018494376"
        },
        "downloads": -1,
        "filename": "torch_shapeguard-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "156ccfb23bc6f3d380bf03b5f515e766",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4111,
        "upload_time": "2020-09-04T10:39:15",
        "upload_time_iso_8601": "2020-09-04T10:39:15.622192Z",
        "url": "https://files.pythonhosted.org/packages/91/18/4389cca2561678c9bd6ce52625d23c7d6d94b79a90641f79822d7900d63b/torch_shapeguard-1.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "bug"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "591121e0302df242c47d6af8c6981053ef35d8ddf786be24a5b015ff47b20c38",
          "md5": "4adc32a9ae2d9713bfef5346be9dccd7",
          "sha256": "79a6161395fc88b85806041199d371e2d25fe86a0f4e5a1d0f2c45dee1fdd975"
        },
        "downloads": -1,
        "filename": "torch_shapeguard-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4adc32a9ae2d9713bfef5346be9dccd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4107,
        "upload_time": "2020-09-04T11:17:57",
        "upload_time_iso_8601": "2020-09-04T11:17:57.126179Z",
        "url": "https://files.pythonhosted.org/packages/59/11/21e0302df242c47d6af8c6981053ef35d8ddf786be24a5b015ff47b20c38/torch_shapeguard-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a4a5309dd95b5406d9d352497ceb08d881f106c427a7b8936a14043501e11f1",
          "md5": "14ee95c8073c36f205e4de80fd339cfa",
          "sha256": "34aea66a0390547a5e684b1dde5335f1fa306768e40fac1dbf91adb4dfccbe8a"
        },
        "downloads": -1,
        "filename": "torch_shapeguard-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14ee95c8073c36f205e4de80fd339cfa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4140,
        "upload_time": "2020-09-04T11:28:12",
        "upload_time_iso_8601": "2020-09-04T11:28:12.929607Z",
        "url": "https://files.pythonhosted.org/packages/0a/4a/5309dd95b5406d9d352497ceb08d881f106c427a7b8936a14043501e11f1/torch_shapeguard-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10871d652aeff4f5d8089f578f07915484e02fd9a8b9542184a0e4811d08849f",
          "md5": "e1afc52e73c32ac7948e0ae4794546bf",
          "sha256": "3ab60f4e380cfa70d24a4ef459c2bb840958d70a100a751ad8f9accd76f12b42"
        },
        "downloads": -1,
        "filename": "torch_shapeguard-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1afc52e73c32ac7948e0ae4794546bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4946,
        "upload_time": "2021-04-08T12:29:37",
        "upload_time_iso_8601": "2021-04-08T12:29:37.106592Z",
        "url": "https://files.pythonhosted.org/packages/10/87/1d652aeff4f5d8089f578f07915484e02fd9a8b9542184a0e4811d08849f/torch_shapeguard-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e95f0064f0dde973c08b50572e99f65f4c46feffba1c5dfc5a918c18cdcc08de",
          "md5": "ec48ef327307999967f81f988d09c073",
          "sha256": "96e1b0ce02ffe339a6a9240057dac3d56c681d8e95eefa5dbcf582bca6ad6085"
        },
        "downloads": -1,
        "filename": "torch_shapeguard-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ec48ef327307999967f81f988d09c073",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3465,
        "upload_time": "2021-04-08T12:29:38",
        "upload_time_iso_8601": "2021-04-08T12:29:38.405633Z",
        "url": "https://files.pythonhosted.org/packages/e9/5f/0064f0dde973c08b50572e99f65f4c46feffba1c5dfc5a918c18cdcc08de/torch_shapeguard-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10871d652aeff4f5d8089f578f07915484e02fd9a8b9542184a0e4811d08849f",
        "md5": "e1afc52e73c32ac7948e0ae4794546bf",
        "sha256": "3ab60f4e380cfa70d24a4ef459c2bb840958d70a100a751ad8f9accd76f12b42"
      },
      "downloads": -1,
      "filename": "torch_shapeguard-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1afc52e73c32ac7948e0ae4794546bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4946,
      "upload_time": "2021-04-08T12:29:37",
      "upload_time_iso_8601": "2021-04-08T12:29:37.106592Z",
      "url": "https://files.pythonhosted.org/packages/10/87/1d652aeff4f5d8089f578f07915484e02fd9a8b9542184a0e4811d08849f/torch_shapeguard-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e95f0064f0dde973c08b50572e99f65f4c46feffba1c5dfc5a918c18cdcc08de",
        "md5": "ec48ef327307999967f81f988d09c073",
        "sha256": "96e1b0ce02ffe339a6a9240057dac3d56c681d8e95eefa5dbcf582bca6ad6085"
      },
      "downloads": -1,
      "filename": "torch_shapeguard-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ec48ef327307999967f81f988d09c073",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3465,
      "upload_time": "2021-04-08T12:29:38",
      "upload_time_iso_8601": "2021-04-08T12:29:38.405633Z",
      "url": "https://files.pythonhosted.org/packages/e9/5f/0064f0dde973c08b50572e99f65f4c46feffba1c5dfc5a918c18cdcc08de/torch_shapeguard-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}