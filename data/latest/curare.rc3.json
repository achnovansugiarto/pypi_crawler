{
  "info": {
    "author": "Patrick Blumenkamp",
    "author_email": "patrick.blumenkamp@computational.bio.uni-giessen.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-brightgreen.svg)](https://github.com/pblumenkamp/curare/blob/master/LICENSE.txt)\n![Don't judge me](https://img.shields.io/badge/Language-Python-blue.svg)\n![Don't judge me](https://img.shields.io/badge/Language-Snakemake-blue.svg)\n![Release](https://img.shields.io/github/release/pblumenkamp/curare.svg)\n[![PyPI](https://img.shields.io/pypi/v/Curare.svg)](https://pypi.org/project/Curare)\n[![Conda](https://img.shields.io/conda/v/bioconda/curare.svg)](https://bioconda.github.io/recipes/curare/README.html)\n\n# Curare - A Customizable and Reproducible Analysis Pipeline for RNA-Seq Experiments\n\n## Contents\n- [Description](#description)\n- [Features](#features)\n- [Usage](#usage)\n  - [Installation](#installation)\n  - [Execute Curare](#creating-a-pipeline)\n- [Availability](#availability)\n- [Citation](#citation)\n- [FAQ](#faq)\n\n## Description\n\nCurare is a freely available analysis pipeline for reproducible, high-throughput, bacterial RNA-Seq experiments. Define standardized pipelines customized for your specific workflow without the necessity of installing all the tools by yourself.   \n\nCurare is implemented in Python and uses the power of [Snakemake](https://snakemake.readthedocs.io/) and [Conda](https://docs.conda.io/projects/conda/en/latest/index.html) to build and execute the defined workflows. Its modularized structure and the simplicity of Snakemake enables developers to create new and advanced workflow steps. \n\n## Features\nCurare was developed to simplify the automized execution of RNA-Seq workflows on large datasets. Each workflow can be divided into four steps: Preprocessing, Premapping, Mapping, and Analysis.\n\n##### Available modules\n+ Preprocessing\n  + Trim-Galore\n+ Premapping\n  + FastQC\n  + MultiQC\n+ Mapping\n  + Bowtie\n  + Bowtie2\n  + BWA (Backtrack)\n  + BWA (Mem)\n  + BWA (SW)\n  + Segemehl\n  + Star\n+ Analysis\n  + Count Table (FeatureCounts)\n  + DGE Analysis (DESeq2)\n  + Normalized Coverage\n  + ReadXplorer\n\n### Results Report\nAt the end of a Curare run, you will also get an HTML report containing the most important results and an overview of all used settings. The start page will include Curare statistics, the runtime of this analysis, sample descriptions, and all dependencies of the tools used in this pipeline. From the navigation bar at the top, you can then navigate to the specific reports of each module with detailed charts and many statistics. (Images created with Curare using the data from: Banerjee R et al., \"Tailoring a Global Iron Regulon to a Uropathogen.\", mBio, 2020 Mar 24;11(2))\n![start_page](https://user-images.githubusercontent.com/9703726/144844060-5acc6f29-fcaf-446d-9dd8-27c92bf33269.png)\n\n![Curare_Statistics](https://user-images.githubusercontent.com/9703726/145035029-5dd70610-10d2-45e1-8c1f-0334522c2625.png)\n\n\n## Usage\n### Installation\nIt is recommended to use [conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html) for installing curare with all dependencies. Please notice that the conda channels **bioconda and conda-forge are required** for installing Curare correctly.\n\n```bash\nconda create -n curare -c bioconda -c conda-forge curare\nconda activate curare\ncurare --help\n```\nAlternatively, you can install Curare via GitHub release and install all dependencies in conda_environment.yaml manually. This would be enough to run Curare in `use-conda` mode. If you want to run Curare completely without Conda, you would also need to install the dependencies of all used Curare modules. You can find the dependencies of every module at `curare/snakefiles/<module_category>/<module>/lib/conda_env.yaml`.\n\n### Creating a pipeline\nThe easiest way to create a new pipeline is by using the Curare wizard. It will guide through all steps, asks what module you wish to use and creates the two necessary files (`samples.tsv` and `pipeline.yml`). These files can then be edited with a standard file editor for customizing your data and analysis.  \n```bash\n# Current working directory is inside of tool directory\ncd curare\n./curare_wizard.py --samples target_directory/samples.tsv --pipeline target_directory/pipeline.yml\n```\n\n### Samples File\nThe samples file (`samples.tsv`) is a tab-separated file collecting all necessary information about the used biological samples. This includes a unique identifier (`name`), a file path to the sequencing data (`forward_reads`/`reverse reads` on paired-end data, `reads` on single-end data), and depending on used modules further information like the condition. Every line starting with a # is a comment line and will be ignored by Curare. These lines are just helpful information for correctly writing this file.\n\n**Name column**: A unique identifier used throughout the whole pipeline for this sample. To prevent any side-effects on the file system or in the used scripts, only alphanumerical characters and '_' are allowed for sample names.\n\n**Reads columns**: Here, you define the file path to the responding sequencing data. For paired-end datasets, two columns must be set (`forward_reads` and `reverse_reads`), for single-end data only one column (`reads`). The file path can either be a relative path (relative to this file) or an absolute path (starting with '/').\n\n**Additional columns**: Every selected module can define additional columns. The Curare wizard automatically creates a `samples.tsv` containing all required columns. So just fill out all open fields in the generated file, and everything will work. You can find a description of all additional columns in the header of the created file.\n\n**Example**         \n```tsv\n# name: Unique sample name. Only use alphanumeric characters and '_'. [Value Type: String]\n# forward_reads: File path to fastq file containing forward reads. Either as an absolute path or relative to this file. [Value Type: Path]\n# reverse_reads: File path to fastq file containing reverse reads. Either as an absolute path or relative to this file. [Value Type: Path]\n# condition: Condition name of the sequencing run. May contain [A-Z, a-z, 0-9, _;!@^(),.[]-, Whitespace]. [Value Type: String]\n\nname    forward_reads   reverse_reads   condition\nwt_1    data/wt_1_R1.fastq  data/wt_1_R2.fastq  WT\nwt_2    data/wt_2_R1.fastq  data/wt_2_R2.fastq  WT\nwt_3    data/wt_3_R1.fastq  data/wt_3_R2.fastq  WT\nheat_1  data/wt_1_R1.fastq  data/wt_1_R2.fastq  Heat\nheat_2  data/wt_2_R1.fastq  data/wt_2_R2.fastq  Heat\nheat_3  data/wt_3_R1.fastq  data/wt_3_R2.fastq  Heat\nstarvation_1    data/wt_1_R1.fastq  data/wt_1_R2.fastq  Starvation\nstarvation_2    data/wt_2_R1.fastq  data/wt_2_R2.fastq  Starvation\nstarvation_3    data/wt_3_R1.fastq  data/wt_3_R2.fastq  Starvation\n```\n\n### Pipeline File\nThe pipeline file (`pipeline.yml`) defines the used modules and their parameters in the newly created workflow. As a typical YAML file, everything is structured in categories. There are categories for each workflow step (`preprocessing`, `premapping`, `mapping`, and `analysis`) and the main category for the whole pipeline (`pipeline`). Each of the four workflow categories has a parameter `modules` defining the used modules in this step. Since many modules need additional information, like a file path to the reference genome or a quality threshold, modules have their own block in their category for specifying these values. \n\nOne differentiates between mandatory and optional settings. Mandatory settings follow the structure `gff_feature_type: <Insert Config Here>`. It is necessary to replace `<Insert Config Here>` with a real value, e.g. \"CDS\" (like in the `samples.tsv`, the file path can either be relative to this file or absolute). Optional settings are commented out with a single #. For using other values than the default value, just remove the # and write your parameter after the colon.\n\n**Example**  \n```yaml\n## Curare Pipeline File\n## This is an automatically created pipeline file for Curare.\n## All required parameters must be set (replace <Insert Config Here> with real value).\n## All optional parameters are commented out with a single '#'. For including these parameters, just remove the '#'.\n\npipeline:\n  paired_end: true\n\npreprocessing:\n  modules: [\"trimgalore\"]\n\n  trimgalore:\n    ## Choose phred33 (Sanger/Illumina 1.9+ encoding) or phred64 (Illumina 1.5 encoding). [Value Type: Enum]\n    #phred_score_type: \"--phred33\"\n\n    ## Trim low-quality ends from reads in addition to adapter removal. (Default: 20). [Value Type: Number]\n    #quality_threshold: \"20\"\n\n    ## Discard reads that became shorter than length INT because of either quality or adapter trimming. (Default: 20). [Value Type: Number]\n    #min_length: \"20\"\n\n    ## Additional options to use in shell command. [Value Type: String]\n    #additional_parameter: \"\"\n\n    ## Adapter sequence to be trimmed. If not specified explicitly, Trim Galore will try to auto-detect whether the Illumina universal, Nextera transposase, or Illumina small RNA adapter sequence was used. [Value Type: String]\n    #adapter_forward: \"\"\n\n    ## adapter sequence to be trimmed off read 2 of paired-end files. [Value Type: String]\n    #adapter_reverse: \"\"\n\n\npremapping:\n  modules: [\"multiqc\"]\n\nmapping:\n  modules: [\"bowtie2\"]\n\n  bowtie2:\n    ## Path to reference genome fasta file. [Value Type: File_input]\n    genome_fasta: <Insert Config Here>\n\n    ## Choose local or end-to-end alignment. [Value Type: Enum]\n    ## Enum choices: \"local\", \"end-to-end\"\n    alignment_type: <Insert Config Here>\n\n    ## Additional options to use in shell command. [Value Type: String]\n    #additional_bowtie2_options: \"\"\n\n\nanalysis:\n  modules: [\"dge_analysis\", \"readxplorer\"]\n\n  dge_analysis:\n    ## Used feature type, e.g. gene or exon. [Value Type: String]\n    gff_feature_type: <Insert Config Here>\n\n    ## Descriptor for gene name, e.g. ID or gene_id. [Value Type: String]\n    gff_feature_name: <Insert Config Here>\n\n    ## File path to gff file. [Value Type: File_input]\n    gff_path: <Insert Config Here>\n\n    ## Additional options to use in shell command. [Value Type: String]\n    #additional_featcounts_options: \"\"\n\n    ## Strand specificity of reads. Specifies if reads must lie on the same strand as the feature, the opposite strand, or can be on both. Options: \"unstranded, stranded, reversely_stranded\"\n    #strand_specificity: \"unstranded\"\n\n    ## GFF attributes to show in the beginning of the xlsx summary (Comma-separated list, e.g. \"experiment, product, Dbxref\"). [Value Type: String]\n    #attribute_columns: \"\"\n\n\n  readxplorer:\n    ## Path to ReadXplorer CLI executable. [Value Type: File_input]\n    readxplorer_cli_path: <Insert Config Here>\n\n    ## Path to reference genome sequence. [Value Type: File_input]\n    reference_genome: <Insert Config Here>\n```\n<details>\n  <summary>Filled pipeline file</summary>\n\n```yaml\n## Curare Pipeline File\n## This is an automatically created pipeline file for Curare.\n## All required parameters must be set (replace <Insert Config Here> with real value).\n## All optional parameters are commented out with a single '#'. For including these parameters, just remove the '#'.\n\npipeline:\n  paired_end: true\n\npreprocessing:\n  modules: [\"trimgalore\"]\n\n  trimgalore:\n    ## Choose phred33 (Sanger/Illumina 1.9+ encoding) or phred64 (Illumina 1.5 encoding). [Value Type: Enum]\n    phred_score_type: \"--phred64\"\n\n    ## Trim low-quality ends from reads in addition to adapter removal. (Default: 20). [Value Type: Number]\n    quality_threshold: \"35\"\n\n    ## Discard reads that became shorter than length INT because of either quality or adapter trimming. (Default: 20). [Value Type: Number]\n    #min_length: \"20\"\n\n    ## Additional options to use in shell command. [Value Type: String]\n    #additional_parameter: \"\"\n\n    ## Adapter sequence to be trimmed. If not specified explicitly, Trim Galore will try to auto-detect whether the Illumina universal, Nextera transposase, or Illumina small RNA adapter sequence was used. [Value Type: String]\n    #adapter_forward: \"\"\n\n    ## adapter sequence to be trimmed off read 2 of paired-end files. [Value Type: String]\n    #adapter_reverse: \"\"\n\n\npremapping:\n  modules: [\"multiqc\"]\n\nmapping:\n  modules: [\"bowtie2\"]\n\n  bowtie2:\n    ## Path to reference genome fasta file. [Value Type: File_input]\n    genome_fasta: \"reference/my_genome.fasta\"\n\n    ## Choose local or end-to-end alignment. [Value Type: Enum]\n    ## Enum choices: \"local\", \"end-to-end\"\n    alignment_type: \"end-to-end\"\n\n    ## Additional options to use in shell command. [Value Type: String]\n    #additional_bowtie2_options: \"\"\n\n\nanalysis:\n  modules: [\"dge_analysis\", \"readxplorer\"]\n\n  dge_analysis:\n    ## Used feature type, e.g. gene or exon. [Value Type: String]\n    gff_feature_type: \"CDS\"\n\n    ## Descriptor for gene name, e.g. ID or gene_id. [Value Type: String]\n    gff_feature_name: \"ID\"\n\n    ## File path to gff file. [Value Type: File_input]\n    gff_path: \"reference/my_genome.gff\"\n\n    ## Additional options to use in shell command. [Value Type: String]\n    #additional_featcounts_options: \"\"\n\n    ## Strand specificity of reads. Specifies if reads must lie on the same strand as the feature, the opposite strand, or can be on both. Options: \"unstranded, stranded, reversely_stranded\"\n    strand_specificity: \"reversely_stranded\"\n\n    ## GFF attributes to show in the beginning of the xlsx summary (Comma-separated list, e.g. \"experiment, product, Dbxref\"). [Value Type: String]\n    #attribute_columns: \"\"\n\n\n  readxplorer:\n    ## Path to ReadXplorer CLI executable. [Value Type: File_input]\n    readxplorer_cli_path: /usr/share/readxplorer/bin/readxplorer-cli\n\n    ## Path to reference genome sequence. [Value Type: File_input]\n    reference_genome: \"reference/my_genome.fasta\"\n```\n</details>\n\n### Starting Curare\nCurare can be started with this command: \n```bash\n# Current working directory inside of root tool directory\ncd curare\nconda activate curare\n./curare.py --samples <target_directory>/samples.tsv --pipeline <target_directory>/pipeline.yml --output <results_directory> --use-conda\n```\n\nAll results, including the conda environments and a final report, will be written in `results_directory`.\n\n### Results\nCurare structures all the results by categories and modules. This way each module can create their own structure and is independent from all other modules. For example, the mapping modules generates multiple bam files with various flag filters like unmapped or concordant reads and the differential gene expression module builds large excel files with the most important values and an R object to continue the analysis on your own. (Images: Bowtie2 mapping chart and DESeq2 summary table )\n\n<div style=\"display: inline-flex; flex-direction: row; justify-content: space-evenly; align-items: center\">\n  <img src=\"https://user-images.githubusercontent.com/9703726/145060940-d8dda4b1-7ad5-4f3c-947d-f1381aa9614c.png\" width=450>\n  <img src=\"https://user-images.githubusercontent.com/9703726/145061206-5b01b8b7-c81f-4dc4-b893-cf8f7b2a850d.png\" width=450>\n </p>\n\n\n## Availability\nAvailable at Bioconda: https://bioconda.github.io/recipes/curare/README.html\n\nAvailable at PyPI: https://pypi.org/project/Curare/\n\n## Citation\nIn preparation.\n\n## FAQ\n1. How can I use Curare? [Usage](#usage)\n2. Contact and support: curare@computational.bio.uni-giessen.de\n3. Issues: Bugs and issues can be filed [here](https://github.com/pblumenkamp/curare/issues)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pblumenkamp/Curare",
    "keywords": "bioinformatics,rna-seq,differential-gene-expression,transcriptomics",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Curare",
    "package_url": "https://pypi.org/project/Curare/",
    "platform": null,
    "project_url": "https://pypi.org/project/Curare/",
    "project_urls": {
      "Bug Reports": "https://https://github.com/pblumenkamp/Curare/issues",
      "Homepage": "https://github.com/pblumenkamp/Curare",
      "Source": "https://github.com/pblumenkamp/Curare"
    },
    "release_url": "https://pypi.org/project/Curare/0.4.5/",
    "requires_dist": [
      "PyYAML (==5.4.1)",
      "docopt (==0.6.2)",
      "snakemake (==6.3)"
    ],
    "requires_python": ">=3.9",
    "summary": "Curare: A Customizable and Reproducible Analysis Pipeline for RNA-Seq Experiments",
    "version": "0.4.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13640899,
  "releases": {
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55190c2957f1e7b09909cc4cf17f392dfeb37879f819e945158af9d76a168d00",
          "md5": "752603bb8bc6cd844df9f514e6063bfd",
          "sha256": "f9d9575576b8df1203e10063f21b29b4b314625f425ccd239588daefe656d1f4"
        },
        "downloads": -1,
        "filename": "Curare-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "752603bb8bc6cd844df9f514e6063bfd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 34487,
        "upload_time": "2021-12-16T10:05:18",
        "upload_time_iso_8601": "2021-12-16T10:05:18.462010Z",
        "url": "https://files.pythonhosted.org/packages/55/19/0c2957f1e7b09909cc4cf17f392dfeb37879f819e945158af9d76a168d00/Curare-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49312dc6dd40d66f2bdbbad05ffdefae397bcf933c53f9fb24e01031310a7c42",
          "md5": "6fafb5e090e24b9e0227ed7b98c38fd1",
          "sha256": "453abe732641361b19ea084de48824c47cc67b7ce003e8c3065bdf97594fa616"
        },
        "downloads": -1,
        "filename": "Curare-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6fafb5e090e24b9e0227ed7b98c38fd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 38348,
        "upload_time": "2021-12-16T10:05:20",
        "upload_time_iso_8601": "2021-12-16T10:05:20.290573Z",
        "url": "https://files.pythonhosted.org/packages/49/31/2dc6dd40d66f2bdbbad05ffdefae397bcf933c53f9fb24e01031310a7c42/Curare-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da8f3d22bfd83d5dec12510aa3c766f9d00267ba1d359a193290e29bbd6ab7f2",
          "md5": "4b01ceddced75019e45a12a1205241bc",
          "sha256": "190427cde197c3daa8c5eec10cc2e5db0be20a8741c8459e5d8029ebb856176a"
        },
        "downloads": -1,
        "filename": "Curare-0.4.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b01ceddced75019e45a12a1205241bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 873338,
        "upload_time": "2021-12-23T11:45:12",
        "upload_time_iso_8601": "2021-12-23T11:45:12.663625Z",
        "url": "https://files.pythonhosted.org/packages/da/8f/3d22bfd83d5dec12510aa3c766f9d00267ba1d359a193290e29bbd6ab7f2/Curare-0.4.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b005f96cf8e87c61d13ca5b51326da9c0da9da0dfb9ebe4e633b9ab364cbdd9a",
          "md5": "9b20e6a2e3f789abbe7644353eef78b7",
          "sha256": "980b56dfcd87f793dc2c7129edcf5b7018fcc2a6d07341eab960fe7330b38419"
        },
        "downloads": -1,
        "filename": "Curare-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9b20e6a2e3f789abbe7644353eef78b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 38562,
        "upload_time": "2021-12-23T11:45:13",
        "upload_time_iso_8601": "2021-12-23T11:45:13.785679Z",
        "url": "https://files.pythonhosted.org/packages/b0/05/f96cf8e87c61d13ca5b51326da9c0da9da0dfb9ebe4e633b9ab364cbdd9a/Curare-0.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "799a96295bf85787558772c359d858a702523159fe36a89bfd646869d93626d3",
          "md5": "703b44b52dd19b5ca077ca13b7b64eaa",
          "sha256": "939e32bf865e618c511651b1c267beea5251b39728a539c90a9c6d038087b647"
        },
        "downloads": -1,
        "filename": "Curare-0.4.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "703b44b52dd19b5ca077ca13b7b64eaa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 873783,
        "upload_time": "2022-04-27T15:22:40",
        "upload_time_iso_8601": "2022-04-27T15:22:40.032008Z",
        "url": "https://files.pythonhosted.org/packages/79/9a/96295bf85787558772c359d858a702523159fe36a89bfd646869d93626d3/Curare-0.4.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43c7d8a274618abf9a7dbbb9c0fa113091566bc11ed5a775d288854c03cf3658",
          "md5": "d9eb640f544df88565daa34feeae5334",
          "sha256": "186e521ba96b45f588999ef25ff8d28275c92599c7e4d5bd6e0e5b2cb5182ec9"
        },
        "downloads": -1,
        "filename": "Curare-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d9eb640f544df88565daa34feeae5334",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 39017,
        "upload_time": "2022-04-27T15:22:41",
        "upload_time_iso_8601": "2022-04-27T15:22:41.555878Z",
        "url": "https://files.pythonhosted.org/packages/43/c7/d8a274618abf9a7dbbb9c0fa113091566bc11ed5a775d288854c03cf3658/Curare-0.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "799a96295bf85787558772c359d858a702523159fe36a89bfd646869d93626d3",
        "md5": "703b44b52dd19b5ca077ca13b7b64eaa",
        "sha256": "939e32bf865e618c511651b1c267beea5251b39728a539c90a9c6d038087b647"
      },
      "downloads": -1,
      "filename": "Curare-0.4.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "703b44b52dd19b5ca077ca13b7b64eaa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 873783,
      "upload_time": "2022-04-27T15:22:40",
      "upload_time_iso_8601": "2022-04-27T15:22:40.032008Z",
      "url": "https://files.pythonhosted.org/packages/79/9a/96295bf85787558772c359d858a702523159fe36a89bfd646869d93626d3/Curare-0.4.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43c7d8a274618abf9a7dbbb9c0fa113091566bc11ed5a775d288854c03cf3658",
        "md5": "d9eb640f544df88565daa34feeae5334",
        "sha256": "186e521ba96b45f588999ef25ff8d28275c92599c7e4d5bd6e0e5b2cb5182ec9"
      },
      "downloads": -1,
      "filename": "Curare-0.4.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d9eb640f544df88565daa34feeae5334",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 39017,
      "upload_time": "2022-04-27T15:22:41",
      "upload_time_iso_8601": "2022-04-27T15:22:41.555878Z",
      "url": "https://files.pythonhosted.org/packages/43/c7/d8a274618abf9a7dbbb9c0fa113091566bc11ed5a775d288854c03cf3658/Curare-0.4.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}