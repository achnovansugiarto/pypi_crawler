{
  "info": {
    "author": "Max Williams",
    "author_email": "futuresharks@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Traffic Generation"
    ],
    "description": "# invokust\n\nA tool for running [Locust](http://locust.io/) load tests from within Python without the need to use the locust command line. This gives more flexibility for automation such as QA/CI/CD tests and also makes it possible to run locust on [AWS Lambda](https://aws.amazon.com/lambda/) for ultimate scalability.\n\n## Installation\n\nInstall via pip:\n\n```\npip3 install invokust\n```\n\n## Examples\n\nRunning a load test using a locust file:\n\n```python\nimport invokust\n\nsettings = invokust.create_settings(\n    locustfile='locustfile_example.py',\n    host='http://www.iana.org',\n    num_users=1,\n    spawn_rate=1,\n    run_time='3m'\n    )\n\nloadtest = invokust.LocustLoadTest(settings)\nloadtest.run()\nloadtest.stats()\n\"{'requests': {'GET_/': {'request_type': 'GET', 'num_requests': 923, 'min_response_time': 113.54585000000128, 'median_response_time': 120.0, 'avg_response_time': 145.68631223510297, 'max_response_time': 331.89674199999786, 'response_times': {270.0: 2, 120.0: 479, 150.0: 17, 200.0: 83, 210.0: 80, 160.0: 20, 190.0: 55, 220.0: 9, 130.0: 30, 170.0: 22, 230.0: 5, 110.0: 69, 140.0: 19, 180.0: 27, 240.0: 2, 320.0: 3, 330.0: 1}, 'response_time_percentiles': {55: 120.0, 65: 150.0, 75: 190.0, 85: 200.0, 95: 210.0}, 'total_rps': 5.136500841568583, 'total_rpm': 308.190050494115}, 'GET_/about': {'request_type': 'GET', 'num_requests': 308, 'min_response_time': 113.23035299999873, 'median_response_time': 120.0, 'avg_response_time': 146.04534828246747, 'max_response_time': 290.40608500000076, 'response_times': {120.0: 147, 200.0: 36, 190.0: 25, 110.0: 27, 160.0: 12, 150.0: 6, 180.0: 13, 210.0: 12, 170.0: 13, 220.0: 2, 130.0: 8, 140.0: 6, 290.0: 1}, 'response_time_percentiles': {55: 120.0, 65: 160.0, 75: 180.0, 85: 200.0, 95: 200.0}, 'total_rps': 1.7140219492991589, 'total_rpm': 102.84131695794953}}, 'failures': {}, 'num_requests': 1231, 'num_requests_fail': 0, 'start_time': 1608207776.312684, 'end_time': 1608207956.070369}\"\n```\n\nRunning a load test without locust file:\n\n```python\nimport invokust\n\nfrom locust import HttpUser, between, task\n\nclass WebsiteUser(HttpUser):\n    wait_time = between(1, 3)\n\n    @task()\n    def get_home_page(self):\n        '''\n        Gets /\n        '''\n        self.client.get(\"/\")\n\nsettings = invokust.create_settings(\n    classes=[WebsiteUser],\n    host='http://www.iana.org',\n    num_users=1,\n    spawn_rate=1,\n    run_time='3m'\n)\n\nloadtest = invokust.LocustLoadTest(settings)\nloadtest.run()\nloadtest.stats()\n\"{'requests': {'GET_/': {'request_type': 'GET', 'num_requests': 71, 'min_response_time': 138.60819600000696, 'median_response_time': 360.0, 'avg_response_time': 327.0060322394364, 'max_response_time': 603.2539320000012, 'response_times': {590.0: 1, 210.0: 3, 370.0: 2, 230.0: 5, 200.0: 2, 490.0: 2, 420.0: 4, 480.0: 1, 190.0: 5, 180.0: 6, 400.0: 3, 270.0: 1, 260.0: 3, 280.0: 2, 360.0: 4, 470.0: 2, 460.0: 3, 350.0: 1, 250.0: 1, 380.0: 4, 410.0: 2, 140.0: 1, 440.0: 1, 600.0: 1, 390.0: 2, 450.0: 1, 430.0: 3, 290.0: 1, 240.0: 2, 340.0: 1, 220.0: 1}, 'response_time_percentiles': {55: 370.0, 65: 390.0, 75: 420.0, 85: 450.0, 95: 490.0}, 'total_rps': 0.4443058717398536, 'total_rpm': 26.658352304391215}}, 'failures': {'GET_/': {'method': 'GET', 'name': '/', 'error': \"ConnectionError(ProtocolError('Connection aborted.', RemoteDisconnected('Remote end closed connection without response')))\", 'occurrences': 1}}, 'num_requests': 71, 'num_requests_fail': 1, 'start_time': 1608208114.321394, 'end_time': 1608208276.0525749}\"\n```\n\n## Running Locust on AWS Lambda\n\n<img src=\"http://d0.awsstatic.com/Graphics/lambda-icon-smallr1.png\" alt=\"Lambda logo\" height=\"100\"><img src=\"http://locust.io/static/img/logo.png\" alt=\"Locust logo\" height=\"100\">\n\n[AWS Lambda](https://aws.amazon.com/lambda/) is a great tool for load testing as it is very cheap (or free) and highly scalable.\n\nThere are many load testing tools such as [ab](https://httpd.apache.org/docs/2.4/programs/ab.html) and [wrk](https://github.com/wg/wrk). Then there are other cloud based load testing options such as [BlazeMeter](https://www.blazemeter.com/) or [Loader](https://loader.io/) and some more DIY solutions that use AWS Lambda too such as [Goad](https://goad.io/) or [serverless-artillery](https://github.com/Nordstrom/serverless-artillery). But these all have the same drawback: They are too simplistic. They can perform simple GET or POST requests but can't accurately emulate more complex behaviour. e.g. browsing a website, selecting random items, filling a shopping cart and checking out. But with [Locust](http://locust.io/) this is possible.\n\nIncluded is an example function for running Locust on AWS Lambda, `lambda_locust.py`.\n\n### Creating a Lambda function\n\nThe process for running a locust test on Lambda involves [creating a zip file](http://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html) of the locust load test, creating a Lambda function and then triggering the function.\n\nInstall invokust (and its dependencies) python packages locally:\n\n```\npip3 install invokust --target=python-packages\n```\n\nOr if running on a Mac (python packages need to be compiled for 64 bit Linux) you can use docker:\n\n```\ndocker run -it --volume=$PWD:/temp python:3.6 bash -c \"pip install /temp --target=/temp/python-packages\"\n```\n\nCreate the zip file:\n\n```\nzip -q -r lambda_locust.zip lambda_locust.py locustfile_example.py python-packages\n```\n\nThen create the Lambda function using using the AWS CLI:\n\n```\naws lambda create-function --function-name lambda_locust --timeout 300 --runtime python3.6 --role arn:aws:iam::9999999999:role/lambda_basic_execution --handler lambda_locust.handler --zip-file fileb://lambda_locust.zip\n```\n\nOr [Terraform](https://www.terraform.io/) and the example [main.tf](main.tf) file:\n\n```\nterraform apply\n...\n```\n\n### Invoking the function\n\nThe Locust settings can be passed to the Lambda function or can be set from environment variables. The environment variables are:\n\n  - LOCUST_LOCUSTFILE: Locust file to use for the load test\n  - LOCUST_CLASSES: Names of locust classes to use for the load test (instead of a locustfile). If more than one, separate with comma.\n  - LOCUST_HOST: The host to run the load test against\n  - LOCUST_NUM_CLIENTS: Number of clients to simulate\n  - LOCUST_HATCH_RATE: Number of clients per second to start\n  - LOCUST_RUN_TIME: The time the test should run for\n  - LOCUST_LOGLEVEL: Level of logging\n\n[AWS CLI](https://aws.amazon.com/cli/) example with Locust settings in a payload:\n\n```\naws lambda invoke --function-name lambda_locust --invocation-type RequestResponse --payload '{\"locustfile\": \"locustfile_example.py\", \"host\":\"http://www.iana.org\", \"num_users\": \"1\", \"spawn_rate\": \"1\", \"run_time\":\"3m\"}' --cli-binary-format raw-in-base64-out output.txt\n{\n    \"StatusCode\": 200\n}\ncat output.txt\n\"{\\\"success\\\": {\\\"GET_/\\\": {\\\"request_type\\\": \\\"GET\\\", \\\"num_requests\\\": 20, \\\"min_response_time\\\": 86, \\\"median_response_time\\\": 93 ...\n```\n\nPython boto3 example:\n\n```python\nimport json\nfrom boto3.session import Session\nfrom botocore.client import Config\n\nsession = Session()\nconfig = Config(connect_timeout=10, read_timeout=310)\nclient = session.client('lambda', config=config)\n\nlambda_payload = {\n    'locustfile': 'locustfile_example.py',\n    'host': 'https://example.com',\n    'num_users': '1',\n    'spawn_rate': 1,\n    'run_time':'3m'\n}\n\nresponse = client.invoke(FunctionName='lambda_locust', Payload=json.dumps(lambda_payload))\njson.loads(response['Payload'].read())\n'{\"success\": {\"GET_/\": {\"request_type\": \"GET\", \"num_requests\": 20, \"min_response_time\": 87, \"median_response_time\": 99, \"avg_response_time\": 97.35 ...\n```\n\n### Running a real load test\n\nLambda function execution time is limited to a maximum of 15 minutes. To run a real load test the function will need to be invoked repeatedly and likely in parallel to generate enough load. To manage this there is a class called `LambdaLoadTest` that can manage invoking the function in parallel loops and collecting the statistics.\n\n```python\nimport logging\nfrom invokust.aws_lambda import LambdaLoadTest\n\nlogging.basicConfig(level=logging.INFO)\n\nlambda_payload = {\n    'locustfile': 'locustfile_example.py',\n    'host': 'https://example.com',\n    'num_users': 1,\n    'spawn_rate': 1,\n    'run_time':'3m'\n}\n\nload_test = LambdaLoadTest(\n  lambda_function_name='lambda_locust',\n  threads=2,\n  ramp_time=0,\n  time_limit=30,\n  lambda_payload=lambda_payload\n)\n\nload_test.run()\nprint(load_test.get_summary_stats())\n```\n\nThe output:\n```\nINFO:root:\nStarting load test...\nFunction name: lambda_locust\nRamp time: 0s\nThreads: 2\nLambda payload: {'locustfile': 'locustfile_example.py', 'host': 'https://example.com', 'num_users': '1', 'spawn_rate': 1, 'run_time': '3m'}\nStart ramping down after: 30s\nINFO:root:thread started\nINFO:root:Invoking lambda...\nINFO:root:threads: 1, rpm: 0, time elapsed: 0s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 1, rpm: 0, time elapsed: 3s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:thread started\nINFO:root:Invoking lambda...\nINFO:root:threads: 2, rpm: 0, time elapsed: 6s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 2, rpm: 0, time elapsed: 9s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 2, rpm: 0, time elapsed: 12s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 2, rpm: 0, time elapsed: 15s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 2, rpm: 0, time elapsed: 18s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 2, rpm: 0, time elapsed: 21s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 2, rpm: 0, time elapsed: 24s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 2, rpm: 0, time elapsed: 27s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 2, rpm: 0, time elapsed: 30s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:threads: 2, rpm: 0, time elapsed: 33s, total requests from finished threads: 0, request fail ratio: 0, invocation error ratio: 0\nINFO:root:Time limit reached. Starting ramp down...\nINFO:root:Waiting for all Lambdas to return. This may take up to 3m.\nINFO:invokust.aws_lambda.lambda_load_test:Lambda invocation complete. Requests (errors): 1867 (0), execution time: 180066ms, sleeping: 0s\nINFO:root:thread finished\nINFO:invokust.aws_lambda.lambda_load_test:Lambda invocation complete. Requests (errors): 1884 (0), execution time: 180065ms, sleeping: 0s\nINFO:root:thread finished\n{'lambda_invocation_count': 2, 'total_lambda_execution_time': 360131, 'requests_total': 3751, 'request_fail_ratio': 0.0, 'invocation_error_ratio': 0.0}\n```\n\nThere is also an example CLI tool for running a load test, `invokr.py`:\n\n```\n$ ./invokr.py --function_name=lambda_locust --locust_file=locustfile_example.py --locust_host=https://example.com --threads=1 --time_limit=15 --locust_users=2\n2017-05-22 20:16:22,432 INFO   MainThread\nStarting load test\nFunction: lambda_locust\nRamp time: 0\nThreads: 1\nLambda payload: {'locustfile': 'locustfile_example.py', 'host': 'https://example.com', 'num_users': 2, 'spawn_rate': 10, 'run_time': '15s'}\n\n[2020-06-28 19:58:22,103] pudli/INFO/root: thread started\n[2020-06-28 19:58:22,107] pudli/INFO/root: threads: 1, rpm: 0, run_time: 0, requests_total: 0, request_fail_ratio: 0, invocation_error_ratio: 0\n[2020-06-28 19:58:25,108] pudli/INFO/root: threads: 1, rpm: 0, run_time: 3, requests_total: 0, request_fail_ratio: 0, invocation_error_ratio: 0\n[2020-06-28 19:58:28,109] pudli/INFO/root: threads: 1, rpm: 0, run_time: 6, requests_total: 0, request_fail_ratio: 0, invocation_error_ratio: 0\n[2020-06-28 19:58:31,110] pudli/INFO/root: threads: 1, rpm: 0, run_time: 9, requests_total: 0, request_fail_ratio: 0, invocation_error_ratio: 0\n[2020-06-28 19:58:34,112] pudli/INFO/root: threads: 1, rpm: 0, run_time: 12, requests_total: 0, request_fail_ratio: 0, invocation_error_ratio: 0\n[2020-06-28 19:58:37,113] pudli/INFO/root: threads: 1, rpm: 0, run_time: 15, requests_total: 0, request_fail_ratio: 0, invocation_error_ratio: 0\n[2020-06-28 19:58:39,001] pudli/INFO/invokust.aws_lambda.lambda_load_test: Invocation complete. Requests (errors): 224 (120), execution time: 15066, sleeping: 0\n[2020-06-28 19:58:40,116] pudli/INFO/root: threads: 1, rpm: 795, run_time: 18, requests_total: 224, request_fail_ratio: 0.5357142857142857, invocation_error_ratio: 0.0\n[2020-06-28 19:58:40,117] pudli/ERROR/root: Error limit reached, invocation error ratio: 0.0, request fail ratio: 0.5357142857142857\n[2020-06-28 19:58:40,117] pudli/INFO/root: Waiting for threads to exit...\n[2020-06-28 19:58:54,086] pudli/INFO/invokust.aws_lambda.lambda_load_test: Invocation complete. Requests (errors): 242 (131), execution time: 15052, sleeping: 0\n[2020-06-28 19:58:54,086] pudli/INFO/root: thread finished\n[2020-06-28 19:58:54,142] pudli/INFO/root: Aggregated results: {\"requests\": {\"GET_/\": {\"median_response_time\": 92.0, \"total_rps\": 7.18569301694931, \"avg_response_time\": 91.08271769409947, \"max_response_time\": 114.66264724731445, \"min_response_time\": 84.4886302947998, \"response_times\": {\"histogram\": [85, 45, 4, 6, 7, 47, 11, 0, 0, 10], \"bins\": [84.0, 86.6, 89.2, 91.8, 94.4, 97.0, 99.6, 102.2, 104.8, 107.4, 110.0]}, \"total_rpm\": 431.1415810169586, \"num_requests\": 215}, \"POST_/post\": {\"median_response_time\": 150.0, \"total_rps\": 8.38878329746517, \"avg_response_time\": 157.73737294831653, \"max_response_time\": 1087.4686241149902, \"min_response_time\": 142.15636253356934, \"response_times\": {\"histogram\": [247, 0, 0, 1, 2, 0, 0, 0, 0, 1], \"bins\": [140.0, 236.0, 332.0, 428.0, 524.0, 620.0, 716.0, 812.0, 908.0, 1004.0, 1100.0]}, \"total_rpm\": 503.32699784791026, \"num_requests\": 251}}, \"failures\": {\"POST_/post\": {\"method\": \"POST\", \"name\": \"/post\", \"error\": \"HTTPError('404 Client Error: Not Found for url: https://example.com/post',)\", \"occurrences\": 251}}, \"num_requests\": 466, \"num_requests_fail\": 251, \"total_lambda_execution_time\": 30118, \"lambda_invocations\": 2, \"approximate_cost\": 6.3008e-05, \"request_fail_ratio\": 0.5386266094420601, \"invocation_error_ratio\": 0.0, \"locust_settings\": {\"locustfile\": \"locustfile_example.py\", \"host\": \"https://example.com\", \"num_users\": 2, \"spawn_rate\": 10, \"run_time\": \"15s\"}, \"lambda_function_name\": \"lambda_locust\", \"threads\": 1, \"ramp_time\": 0, \"time_limit\": 15}\n[2020-06-28 19:58:54,142] pudli/INFO/root: ===========================================================================================================================\n[2020-06-28 19:58:54,143] pudli/INFO/root: TYPE    NAME                                                #REQUESTS    MEDIAN   AVERAGE       MIN       MAX  #REQS/SEC\nScratch\n[2020-06-28 19:58:54,143] pudli/INFO/root: ===========================================================================================================================\n[2020-06-28 19:58:54,143] pudli/INFO/root: GET     /                                                         215      92.0     91.08     84.49    114.66       7.19\n[2020-06-28 19:58:54,144] pudli/INFO/root: POST    /post                                                     251     150.0    157.74    142.16   1087.47       8.39\n[2020-06-28 19:58:54,144] pudli/INFO/root: Exiting...\n```\n\n### Occasional errors \n\n*  ERROR : `xxxxx-3f19-11e7-a1d1-xxxxxxx Process exited before completing request\"`\n    - SOLUTION: Double the size of the memory for the function.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/FutureSharks/invokust/archive/0.76.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FutureSharks/invokust",
    "keywords": "testing,loadtest,lambda,locust",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "invokust-tmp",
    "package_url": "https://pypi.org/project/invokust-tmp/",
    "platform": null,
    "project_url": "https://pypi.org/project/invokust-tmp/",
    "project_urls": {
      "Download": "https://github.com/FutureSharks/invokust/archive/0.76.tar.gz",
      "Homepage": "https://github.com/FutureSharks/invokust"
    },
    "release_url": "https://pypi.org/project/invokust-tmp/0.76/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A small wrapper for locust to allow running load tests from within Python or on AWS Lambda",
    "version": "0.76",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15263389,
  "releases": {
    "0.76": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1aea9b0507f7a60cee3f7306f5acade561e5eb6a472ae98ff153819c62b63100",
          "md5": "1c50172863d07f0cd69f73048206c68b",
          "sha256": "0b594edc3fba991b394c3a0a840c51d6586879122254a5c2521016c835d439fb"
        },
        "downloads": -1,
        "filename": "invokust-tmp-0.76.tar.gz",
        "has_sig": false,
        "md5_digest": "1c50172863d07f0cd69f73048206c68b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18867,
        "upload_time": "2022-09-30T03:10:33",
        "upload_time_iso_8601": "2022-09-30T03:10:33.022591Z",
        "url": "https://files.pythonhosted.org/packages/1a/ea/9b0507f7a60cee3f7306f5acade561e5eb6a472ae98ff153819c62b63100/invokust-tmp-0.76.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1aea9b0507f7a60cee3f7306f5acade561e5eb6a472ae98ff153819c62b63100",
        "md5": "1c50172863d07f0cd69f73048206c68b",
        "sha256": "0b594edc3fba991b394c3a0a840c51d6586879122254a5c2521016c835d439fb"
      },
      "downloads": -1,
      "filename": "invokust-tmp-0.76.tar.gz",
      "has_sig": false,
      "md5_digest": "1c50172863d07f0cd69f73048206c68b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18867,
      "upload_time": "2022-09-30T03:10:33",
      "upload_time_iso_8601": "2022-09-30T03:10:33.022591Z",
      "url": "https://files.pythonhosted.org/packages/1a/ea/9b0507f7a60cee3f7306f5acade561e5eb6a472ae98ff153819c62b63100/invokust-tmp-0.76.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}