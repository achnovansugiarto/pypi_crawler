{
  "info": {
    "author": null,
    "author_email": "baterflyrity <baterflyrity@yandex.ru>",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent"
    ],
    "description": "# Convenient Event System\n\nCreate, subscribe and fire events with one line of code. Unlike alternative packages this one provides static typed predefined events with documented signature of event handlers.\n\n**Both ordinary and async event handlers are supported. Both ordinary and async events are supported. Any of ordinary, async and awaited async event triggering is supported.**\n\n# Usage examples\n\nBriefly, you need to perform two steps:\n\n1. decide between two options: group events in class derived from `EventDispatcher` or just define functions,\n2. then decorate each event with `@event`.\n\n----\n\nLet's see how to use the library in more details. Imagine we write some user interface stuff for our super-duper program.\n\n### Single event example\n\n**Step 1: define click event.**\n\n```python\n@event\ndef click(x: int, y: int)->None:\n\t\"\"\"\n\tOccures when user clicks on our interface.\n\t\n\t:param x: mouse horizontal position relative to top left corner.\n\t:param y: mouse vertical position relative to top left corner.\n\t\"\"\"\n\t... # no implementation required\n```\n\n**Step 2: subscribe click event.**\n\n```python\n@click\ndef on_click(x: int, y: int)->None:\n\t\"\"\"\n\tProcess mouse click.\n\t\"\"\"\n\tprint(f'You have clicked at ({x}; {y}).')\n```\n\n**Step 3: fire click event.**\n\n```python\nclick.trigger(12, 34) # You have clicked at (12; 34).\n```\n\n### Events group example\n\n**Step 1: define mouse events group.**\n\n```python\nclass Mouse(EventDispatcher):\n\t@event\n\tdef click(x: int, y: int)->None:\n\t\t\"\"\"\n\t\tOccures when user clicks on our interface.\n\t\t\n\t\t:param x: mouse horizontal position relative to top left corner.\n\t\t:param y: mouse vertical position relative to top left corner.\n\t\t\"\"\"\n\t\t... # no implementation required\n\t@event\n\tdef move(x: int, y: int)->None:\n\t\t\"\"\"\n\t\tOccures when user moves cursor over our interface.\n\t\t\n\t\t:param x: mouse horizontal position relative to top left corner.\n\t\t:param y: mouse vertical position relative to top left corner.\n\t\t\"\"\"\n\t\t...\n```\n\n**Step 2: subscribe click event.**\n\n```python\nmouse = Mouse()\n\n@mouse.click\ndef on_click(x: int, y: int)->None:\n\t\"\"\"\n\tProcess mouse click.\n\t\"\"\"\n\tprint(f'You have clicked at ({x}; {y}).')\n```\n\n**Step 3: fire click event.**\n\n```python\nmouse.click.trigger(12, 34) # You have clicked at (12; 34).\n```\n\n# How to create events?\n\nEvent are created by using `event` decorator. It can be used with or without parameters.\n\nThe event can have arbitrary body that is not actually called. Main feature is to defined event signature hence during subscribing **developer can see help message and type hints with intended event handler signature**.\n\n### Single event bound to default event emitter\n\nThe simplest case is to just create an event. So default event emitter is used to manage this event.\n\n```python\n@event\ndef click(x: int, y: int)->None:\n\t\"\"\"\n\tOccures when user clicks on our interface.\n\t\n\t:param x: mouse horizontal position relative to top left corner.\n\t:param y: mouse vertical position relative to top left corner.\n\t\"\"\"\n\t...\n```\n\n### Single event bound to custom event emitter\n\nOtherwise, you can specify different event emitter passing as argument.\n\n```python\nmy_event_emitter = EventEmitter()\n\n@event(my_event_emitter)\ndef click(x: int, y: int)->None:\n\t\"\"\"\n\tOccures when user clicks on our interface.\n\t\n\t:param x: mouse horizontal position relative to top left corner.\n\t:param y: mouse vertical position relative to top left corner.\n\t\"\"\"\n\t...\n```\n\n### Events group bound to dedicated event emitter\n\nMoreover, you can combine events in group by using classes. There are two different approaches: using default event emitter or dedicate one per each class.\n\n**Creating dedicated event emitter per each event group is recommended.**\n\nConsidering the preferred approach you can group event in class derived from `EventDispatcher`. This ensures creation of new event emitter per each class instance.\n\n**Notice that using `event` decorator stays the same way as for non-class functions.**\n\n```python\nclass Mouse(EventDispatcher):\n\t@event\n\tdef click(x: int, y: int)->None:\n\t\t\"\"\"\n\t\tOccures when user clicks on our interface.\n\t\t\n\t\t:param x: mouse horizontal position relative to top left corner.\n\t\t:param y: mouse vertical position relative to top left corner.\n\t\t\"\"\"\n\t\t... # no implementation required\n\t@event(my_event_emitter) # given event emitter is prior to Mouse one \n\tdef move(x: int, y: int)->None:\n\t\t\"\"\"\n\t\tOccures when user moves cursor over our interface.\n\t\t\n\t\t:param x: mouse horizontal position relative to top left corner.\n\t\t:param y: mouse vertical position relative to top left corner.\n\t\t\"\"\"\n\t\t...\n```\n\nThen you can instantiate `Mouse` class and access dedicated event emitter for e.g. further low-level tuning.\n\n```python\nmouse = Mouse()\n\nmouse.emitter.max_listeners = 2 # allows up to two handlers\n```\n\nWhen using `event` decorator on `EventDispatcher` subclass method with specified event emitter it takes priority over the one dedicated per class instance.\n\n### Events group bound to default event emitter\n\nIn case you do not want to create dedicated event emitter per class instance (*not recommended*) you can just omit deriving from `EventDispatcher`.\n\nIn following code default event emitter is used for all events in group.\n\n```python\nclass Mouse:\n\t@event\n\tdef click(x: int, y: int)->None:\n\t\t\"\"\"\n\t\tOccures when user clicks on our interface.\n\t\t\n\t\t:param x: mouse horizontal position relative to top left corner.\n\t\t:param y: mouse vertical position relative to top left corner.\n\t\t\"\"\"\n\t\t... # no implementation required\n\t@event(my_event_emitter) # given event emitter is prior to default one \n\tdef move(x: int, y: int)->None:\n\t\t\"\"\"\n\t\tOccures when user moves cursor over our interface.\n\t\t\n\t\t:param x: mouse horizontal position relative to top left corner.\n\t\t:param y: mouse vertical position relative to top left corner.\n\t\t\"\"\"\n\t\t...\n```\n\n# How to subscribe events?\n\nEvent is subscribed by decorating handler. **Handler can be any ordinary or async function (callable).** Decorator also can be used with or without parameters.\n\n**Notice, when using event your IDE can show help message and type hints of intended handler signature.**\n\n### Unlimited event handler\n\nThe simplest case is to just decorate handler with event. So handler will be called when event triggers.\n\n```python\n@click\ndef on_click(x: int, y: int)->None:\n\t\"\"\"\n\tProcess mouse click.\n\t\"\"\"\n\tprint(f'You have clicked at ({x}; {y}).')\n```\n\n**There is no difference between usage of single events or ones from event groups.** Hence, according to `Mouse` class example the above code can be rewritten in:\n\n```python\n@mouse.click\ndef on_click(x: int, y: int)->None:\n\t\"\"\"\n\tProcess mouse click.\n\t\"\"\"\n\tprint(f'You have clicked at ({x}; {y}).')\n```\n\n### Event handler with executions limit\n\nOtherwise, you can specify number of times to handle event. When event fires more times, no further calls will be made to the handler.\n\n```python\n@click(2)\ndef on_click(x: int, y: int)->None:\n\t\"\"\"\n\tProcess mouse click two first times.\n\t\"\"\"\n\tprint(f'You have clicked at ({x}; {y}).')\n```\n\nIn above case `on_click` will be called only for the first two times.\n\n# How to fire events?\n\nTo fire, emit, trigger event you can use `.trigger(...)` method where should pass exactly the same arguments that are defined in event signature.\n\n**Notice, when using event your IDE can show help message and type hints of intended arguments.**\n\nBasically, to trigger an event you can just call `trigger` method. Each active handler will be called with given arguments. You can use any set of arguments, including positional, universal, named, packed and even named packed.\n\n```python\nclick.trigger(12, 34)\n```\n\nAlternatively considering `Mouse` class example:\n\n```python\nmouse.click.trigger(12, 34)\n```\n\n### Triggering events from async loop\n\nWhen event is triggered from async loop the method returns loop task of handlers dispatching. One can optionally await it to pause current async thread until dispatching will be done.\n\nConsider example above running within asyncio loop:\n\n```python\nasync def main():\n\tclick.trigger(12, 34) # Schedule handlers execution and go to the next line without waiting.\n\t...\n\tawait click.trigger(12, 34) # Wait until all handlers process before next line execution.\n\t...\n\t\nasyncio.run(main())\n```\n\n*It is worth nothing that some IDEs, linters or static type checkers can warn about not awaited triggering. This is not a problem and depends only on demanded triggering behaviour.*\n\n# Reference\n\n**eventsystem.event(...)**\n\nEvent descriptor decorator. Can be used on functions or class methods. Can be used with or without parameters.\n\nWhen used with single parameter `emitter:EventEmitter` binds given event emitter to decorated event.\n\nWhen used without parameters (brackets): if method belongs to `EventDispatcher` derived class instance then uses its event emitter, else uses default emitter.\n\n**eventsystem.EventDispatcher(emitter: EventEmitter | None = None)**\n\nBase class to provide event group. Events are described as methods. Each event should have signature of `EventHandler` and decorated with `@event`.\n\nConstructor parameters:\n\n* **emitter** - event emitter to use. If not given creates a new one.\n\nFields:\n\n* **emitter** - event emitter bound to dispatcher subclass instance.\n\n**eventsystem.Event**\n\nEvent interface. Intended to be used as decorator or parametrized decorator for handlers. *Should not be instantiated directly.*\n\nFields:\n\n* **name** - read only property of event name\n\nMethods:\n\n* **get_emitter() → EventEmitter | None** - get bound event emitter. In most cases, event will have event emitter bound. But in rare cases it can be `None` when no handler descriptor has been decorated yet.\n\n* **trigger(...) → asyncio.Task| None** - fire the event. All arguments are passed to each handler. Signature must match handler descriptor. If event is triggered being in asyncio loop the method returns corresponding Task which can be optionally awaited to pause until all handlers are processed.\n\n**eventsystem.emitter**\n\nDefault event emitter.\n\n**eventsystem.dispatcher**\n\nDefault event dispatcher bound to default event emitter.\n\n**eventsystem.EventHandler**\n\nBase event and event handler signature (type annotations). Signature of handler must copy signature of event.\n\n# What event emitter is?\n\nThis library us build on top of [pymitter](https://pypi.org/project/pymitter). `EventEmitter` - is a basic building block of that library which actually dispatches events, manages priority, limitations and queues.\n\nUsing `EventEmitter` directly you can unsubscribe handlers, get all active handlers or limit them. For detailed tuning read pymitter documentation.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "pymitter,event,system",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "eventsystem",
    "package_url": "https://pypi.org/project/eventsystem/",
    "platform": null,
    "project_url": "https://pypi.org/project/eventsystem/",
    "project_urls": {
      "Bugtracker": "https://github.com/baterflyrity/eventsystem/issues",
      "Home": "https://pypi.org/project/eventsystem",
      "Sources": "https://github.com/baterflyrity/eventsystem"
    },
    "release_url": "https://pypi.org/project/eventsystem/1.1.0/",
    "requires_dist": [
      "pymitter >=0.4.0"
    ],
    "requires_python": null,
    "summary": "Convenient Event System",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17113744,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a9324ff72eddea7b244939227aa03e0bc2b063f5bc9cf4f99366a45ad39b69fd",
          "md5": "d823412373a711b6a37e56926bec583d",
          "sha256": "ff87260e69546fa1504d57dda502510dc64532e172f5dbf7d31f4f2fad4d3eae"
        },
        "downloads": -1,
        "filename": "eventsystem-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d823412373a711b6a37e56926bec583d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3025,
        "upload_time": "2022-12-01T19:43:42",
        "upload_time_iso_8601": "2022-12-01T19:43:42.723727Z",
        "url": "https://files.pythonhosted.org/packages/a9/32/4ff72eddea7b244939227aa03e0bc2b063f5bc9cf4f99366a45ad39b69fd/eventsystem-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "be0d773304966d6124c4d179651a08de0ef7da7715bd8a0fd3211c4f7833d658",
          "md5": "ebe3d48ca9b7476b055ceca9ea6b8cc8",
          "sha256": "5332e2df7f56aa2549aa92541f9bf3f870ba7bc4353295e17985c5c02fa7cffe"
        },
        "downloads": -1,
        "filename": "eventsystem-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ebe3d48ca9b7476b055ceca9ea6b8cc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2678,
        "upload_time": "2022-12-01T19:43:53",
        "upload_time_iso_8601": "2022-12-01T19:43:53.631469Z",
        "url": "https://files.pythonhosted.org/packages/be/0d/773304966d6124c4d179651a08de0ef7da7715bd8a0fd3211c4f7833d658/eventsystem-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "df007c467a185bc893cdf2773b310f65fb0ea9d3e66c8e7e47fe204da7b4befc",
          "md5": "c5a8cce765b8f37b4258580c1757e7ad",
          "sha256": "33c099b404493fc1887f0a42363fa7cb2c9315fdded9f159a4ba646e02be999b"
        },
        "downloads": -1,
        "filename": "eventsystem-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5a8cce765b8f37b4258580c1757e7ad",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 5547,
        "upload_time": "2022-12-02T19:36:52",
        "upload_time_iso_8601": "2022-12-02T19:36:52.825076Z",
        "url": "https://files.pythonhosted.org/packages/df/00/7c467a185bc893cdf2773b310f65fb0ea9d3e66c8e7e47fe204da7b4befc/eventsystem-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f86d53c32217818b75ebee40ccbebd19dba40091e2dcfb22ebebdee38dd0d49b",
          "md5": "e0ef3cd2b5e68500ea4e69e00c999da6",
          "sha256": "7d1ca7c31a0bbe4d8441beb561db49e7d44097f96c8d1b3031be295c0098e13d"
        },
        "downloads": -1,
        "filename": "eventsystem-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e0ef3cd2b5e68500ea4e69e00c999da6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5335,
        "upload_time": "2022-12-02T19:37:00",
        "upload_time_iso_8601": "2022-12-02T19:37:00.431267Z",
        "url": "https://files.pythonhosted.org/packages/f8/6d/53c32217818b75ebee40ccbebd19dba40091e2dcfb22ebebdee38dd0d49b/eventsystem-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ec8923ff35324a14b49f237c36db438c2ab40a0946dc3d4918912c19f0f5166a",
          "md5": "c18da2c260465aa6a5e299d477ea6689",
          "sha256": "e8fe46137afffa8db4a65fa8890862795b2491fda7bd16d470775b9be2ca24a0"
        },
        "downloads": -1,
        "filename": "eventsystem-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c18da2c260465aa6a5e299d477ea6689",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 5634,
        "upload_time": "2022-12-06T17:00:32",
        "upload_time_iso_8601": "2022-12-06T17:00:32.856426Z",
        "url": "https://files.pythonhosted.org/packages/ec/89/23ff35324a14b49f237c36db438c2ab40a0946dc3d4918912c19f0f5166a/eventsystem-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "148cec87ae2be6fac24a8207eff88a61bbab4eb2b178c79d0408c6cea4d0b050",
          "md5": "f2c908159a8bb75e63df7729e935e56b",
          "sha256": "3e8214a67641afbfff6b1892d784bd3f74b3f5d8e625b994c879b71329dbaa6a"
        },
        "downloads": -1,
        "filename": "eventsystem-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f2c908159a8bb75e63df7729e935e56b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5493,
        "upload_time": "2022-12-06T17:00:40",
        "upload_time_iso_8601": "2022-12-06T17:00:40.403701Z",
        "url": "https://files.pythonhosted.org/packages/14/8c/ec87ae2be6fac24a8207eff88a61bbab4eb2b178c79d0408c6cea4d0b050/eventsystem-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7a22092ecea9479d695d4bf1a6b9da3ea7b0f363b74e97d633dd98951b255ec9",
          "md5": "5991caeb181a785985ea3389309abac5",
          "sha256": "2497959498cf054de11653b3c186990ddbf4575286fee71140d1b9c8870cb9da"
        },
        "downloads": -1,
        "filename": "eventsystem-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5991caeb181a785985ea3389309abac5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6334,
        "upload_time": "2023-03-01T16:16:08",
        "upload_time_iso_8601": "2023-03-01T16:16:08.292248Z",
        "url": "https://files.pythonhosted.org/packages/7a/22/092ecea9479d695d4bf1a6b9da3ea7b0f363b74e97d633dd98951b255ec9/eventsystem-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "bc923d0730383fceda209a142e5eada9a30e0822b910cc8de3e3c09469c9ef35",
          "md5": "4940bf479842054db8eeb9bfbed4dd6f",
          "sha256": "f05b88e95f91432559e174e00825c84a958bed5ed051c2bd878486703f453627"
        },
        "downloads": -1,
        "filename": "eventsystem-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4940bf479842054db8eeb9bfbed4dd6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6196,
        "upload_time": "2023-03-01T16:16:15",
        "upload_time_iso_8601": "2023-03-01T16:16:15.937808Z",
        "url": "https://files.pythonhosted.org/packages/bc/92/3d0730383fceda209a142e5eada9a30e0822b910cc8de3e3c09469c9ef35/eventsystem-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "7a22092ecea9479d695d4bf1a6b9da3ea7b0f363b74e97d633dd98951b255ec9",
        "md5": "5991caeb181a785985ea3389309abac5",
        "sha256": "2497959498cf054de11653b3c186990ddbf4575286fee71140d1b9c8870cb9da"
      },
      "downloads": -1,
      "filename": "eventsystem-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5991caeb181a785985ea3389309abac5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 6334,
      "upload_time": "2023-03-01T16:16:08",
      "upload_time_iso_8601": "2023-03-01T16:16:08.292248Z",
      "url": "https://files.pythonhosted.org/packages/7a/22/092ecea9479d695d4bf1a6b9da3ea7b0f363b74e97d633dd98951b255ec9/eventsystem-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "bc923d0730383fceda209a142e5eada9a30e0822b910cc8de3e3c09469c9ef35",
        "md5": "4940bf479842054db8eeb9bfbed4dd6f",
        "sha256": "f05b88e95f91432559e174e00825c84a958bed5ed051c2bd878486703f453627"
      },
      "downloads": -1,
      "filename": "eventsystem-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4940bf479842054db8eeb9bfbed4dd6f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6196,
      "upload_time": "2023-03-01T16:16:15",
      "upload_time_iso_8601": "2023-03-01T16:16:15.937808Z",
      "url": "https://files.pythonhosted.org/packages/bc/92/3d0730383fceda209a142e5eada9a30e0822b910cc8de3e3c09469c9ef35/eventsystem-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}