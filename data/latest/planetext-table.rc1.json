{
  "info": {
    "author": "bugph0bia",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: General"
    ],
    "description": "# planetext-table\n\n![Software Version](http://img.shields.io/badge/Version-v0.1.0-green.svg?style=flat)\n[![MIT License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](LICENSE)\n\n<!-- [Japanese page](./README.ja.md)   -->\n\n## Overview\nplanetext table gengerator.\n\n## Example\n\n```py\nimport datetime as dt\nimport planetext_table as pt\n\ndata = [\n    ['file name', 'update date', 'size'],\n    ['foo.txt', dt.date(2022, 1, 1), 12000],\n    ['bar.txt', dt.date(2022, 2, 3), 500],\n    ['ＡＢＣ.txt', dt.date(2022, 11, 12), 2554500],\n]\nprint(pt.to_ascii(data))\n\n# +------------+-------------+---------+\n# | file name  | update date | size    |\n# +------------+-------------+---------+\n# | foo.txt    | 2022-01-01  | 12000   |\n# | bar.txt    | 2022-02-03  | 500     |\n# | ＡＢＣ.txt | 2022-11-12  | 2554500 |\n# +------------+-------------+---------+\n```\n\n## Reference\n### `to_ascii`\nGenerate ascii table.\n\n```\n+------------+-------------+---------+\n| file name  | update date | size    |\n+------------+-------------+---------+\n| foo.txt    | 2022-01-01  | 12000   |\n| bar.txt    | 2022-02-03  | 500     |\n| ＡＢＣ.txt | 2022-11-12  | 2554500 |\n+------------+-------------+---------+\n```\n\n#### arguments\n- data (list[list[Any]])\n    - input list data\n- newline (str)\n    - newline character at end of line\n    - Default: `'\\n'`\n- internal_newline (str)\n    - newline character at inside element\n    - Default: `'\\n'`\n- aligns (list[Align])\n    - text alignment of each column (see below for details)\n    - Default: `None`\n- converters\n    - list of type and converter pairs (see below for details)\n    - Default: `None`\n\n### `to_csv`\nGenerate CSV table.\n\n```\n\"file name\",\"update date\",\"size\"\n\"foo.txt\",\"2022-01-01\",\"12000\"\n\"bar.txt\",\"2022-02-03\",\"500\"\n\"ＡＢＣ.txt\",\"2022-11-12\",\"2554500\"\n```\n\n#### arguments\n- data (list[list[Any]])\n    - input list data\n- delimiter (str):\n    - delimiter between elements\n    - Default: `','`\n- quotechar (str):\n    - quote character at both ends of element\n    - Default: `'\"'`\n- newline (str)\n    - newline character at end of line\n    - Default: `'\\n'`\n- internal_newline (str)\n    - newline character at inside element\n    - Default: `'\\n'`\n- converters\n    - list of type and converter pairs (see below for details)\n    - Default: `None`\n\n### `to_markdown`\nGenerate markdown table.\n\n```\n| file name  | update date | size    |\n|------------|-------------|---------|\n| foo.txt    | 2022-01-01  | 12000   |\n| bar.txt    | 2022-02-03  | 500     |\n| ＡＢＣ.txt | 2022-11-12  | 2554500 |\n```\n\n#### arguments\n- data (list[list[Any]])\n    - input list data\n- newline (str)\n    - newline character at end of line\n    - Default: `'\\n'`\n- internal_newline (str)\n    - newline character at inside element\n    - Default: `'\\n'`\n- aligns (list[Align])\n    - text alignment of each column (see below for details)\n    - Default: `None`\n- converters\n    - list of type and converter pairs (see below for details)\n    - Default: `None`\n\n## Note\n### About `aligns` argument\nLiner list for specifying the alignment of each column. Inside values should be the `planetext_table.Align` enumeration.\n\nIf `to_ascii`, it affects alignment with space padding.\nIf `to_markdown`, the alignment is specified according to the markdown notation.\n\nThe value of the `planetext_table.Align` is as follows:\n\n- `Align.NONE`\n- `Align.LEFT`\n- `Align.CENTER`\n- `Align.RIGHT`\n\n`NONE` will mean `LEFT`, but the markdown will no longer use `:` on the second line.\n\n### About `converter` argument\nBy default, built-in function `str` is used to convert the value of each element to a string, but this argument allows any conversion function to be used.\n\nTo pass liner list of pairs (tuples) of target element types and conversion functions.\nIt is possible to specify multiple types by making a tuple of element types. (As used in built-in function `isinstance`)\n\nExample:  \n\n```py\nimport datetime as dt\n\ndef int2str(x):\n    return f'{x:,}'\n\ndef date2str(x):\n    return dt.datetime.strftime(x, r'%Y/%m/%d %H:%M:%S.%f')\n\nconverter = [\n    (int, int2str),\n    ((dt.date, dt.datetime), date2str),\n]\n\ndata = [[10, dt.date(2022, 1, 2)]]\nto_ascii(data, converter=converter)\n```\n\n### full-width character handling\nThe character width of full-width characters is determined according to the character type classified by [East Asian Width](https://www.unicode.org/reports/tr11/tr11-40.html) as follows:\n\n| character type | width |\n|----------------|-------|\n| Fullwidth (F)  | 2     |\n| Halfwidth (H)  | 1     |\n| Wide (W)       | 2     |\n| Narrow (Na)    | 1     |\n| Ambiguous (A)  | 2     |\n| Neutral (N)    | 2     |\n\nThe function `unicodedata.east_asian_width` from the standard library is used.\nSome combinations of characters and fonts, such as some symbols and emojis, may not appear to be aligned nicely.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bugph0bia/planetext-table",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "planetext-table",
    "package_url": "https://pypi.org/project/planetext-table/",
    "platform": null,
    "project_url": "https://pypi.org/project/planetext-table/",
    "project_urls": {
      "Homepage": "https://github.com/bugph0bia/planetext-table"
    },
    "release_url": "https://pypi.org/project/planetext-table/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "planetext table generator",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15897710,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ce24b05a32c4db62d5bf3af093e11772fb33f4a3048b5c44cc78453e5d2677a",
          "md5": "dd84090f8400dcd4aeeda50e32943a49",
          "sha256": "149e744ac939bbe65786517235d736cd2f19dcea4240e797dce31d5f4969907c"
        },
        "downloads": -1,
        "filename": "planetext_table-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd84090f8400dcd4aeeda50e32943a49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9257,
        "upload_time": "2022-11-26T14:22:33",
        "upload_time_iso_8601": "2022-11-26T14:22:33.570816Z",
        "url": "https://files.pythonhosted.org/packages/4c/e2/4b05a32c4db62d5bf3af093e11772fb33f4a3048b5c44cc78453e5d2677a/planetext_table-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ce24b05a32c4db62d5bf3af093e11772fb33f4a3048b5c44cc78453e5d2677a",
        "md5": "dd84090f8400dcd4aeeda50e32943a49",
        "sha256": "149e744ac939bbe65786517235d736cd2f19dcea4240e797dce31d5f4969907c"
      },
      "downloads": -1,
      "filename": "planetext_table-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dd84090f8400dcd4aeeda50e32943a49",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9257,
      "upload_time": "2022-11-26T14:22:33",
      "upload_time_iso_8601": "2022-11-26T14:22:33.570816Z",
      "url": "https://files.pythonhosted.org/packages/4c/e2/4b05a32c4db62d5bf3af093e11772fb33f4a3048b5c44cc78453e5d2677a/planetext_table-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}