{
  "info": {
    "author": "Sean Redmond",
    "author_email": "github-smr@sneakemail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# metonic\n\nGeneration and manipulation of hypothetical [Metonic\ncycles](https://en.wikipedia.org/wiki/Metonic_cycle).\n\n## Installation\n\n    pip install metonic\n    \n## Usage\n\nIn the ancient Greek calendars, the “standard” Metonic cycle of\nordinary (12-month, 354-day) and intercalary (13-month, 384-day)\n[lunisolar years](https://en.wikipedia.org/wiki/Lunisolar_calendar)\nconforms to a few rules:\n\n- Nineteen years long\n- Seven of the nineteen years are intercalary\n- One intercalary year cannot follow another\n- No more than two ordinary years may occur in succession\n\n`metonic` generates Metonic cycles based on these descriptive rules\n(or based on changes to these rules) and provides methods for\nmanipulating them.\n\nMost of this is actually unnecessary. The trend over the last century\nof scholarship has been to see the Greek (mostly meaning the Athenian)\ncalendar as very regular and conforming closely to astronomical\nphenomena. Still, there is a lot of literature, primarily by Benjamin\nD. Meritt, that views the calendar as very irregular. `metonic` might\nbe useful for exploring and understanding these earlier\nreconstructions.\n\n### Cycles of Ordinary and Intercalary Years\n\n`metonic` represents cycles as strings of ordinary (“0”) and intercalary (“1”) years. The standard Athenian Metonic cycle is available as a constant:\n\n    >>> import metonic\n    >>> metonic.ATHENS\n    '0100100101001001010'\n\t\nThis is a 19-year cycle of twelve ordinary and seven intercalary years. The first year of the first cycle is 432/431 BCE.\n\nTo get the year at any position of any cycle:\n\n    >>> metonic.from_metonic(1, 1)\n    -431\n    >>> metonic.from_metonic(5, 12)\n    -344\n\t\nThe values returned are [astronomical\nyears](https://en.wikipedia.org/wiki/Astronomical_year_numbering)—years\nBCE are negative numbers and 1 BCE is 0. You can use another library\n(eparkhontos)[https://pypi.org/project/eparkhontos/] to make it easier\nto work with Greek and astronomical years\n\nYou can also get the Metonic cycle from the year:\n\n    >>> metonic.to_metonic(-431)\n    (1, 1)\n    >>> metonic.to_metonic(-344)\n    (5, 12)\n\n### Generating Cycles\n\n`cycle_set()` will generate all the unique cycles that satisfy the\ngiven conditions: length of cycle (`n`), number of intercalary years\n(`i_count`), maximum number of intercalary years in a row (`max_i`),\nand maximum number of ordinary years in a row (`max_o`). The defaults\nare those listed above (19 years, 7 intercalary, no more than 1\nintercalary and 2 ordinary in a row):\n\n    >>> for _ in metonic.cycle_set():\n    ...     print(_)\n    ...\n    0010010010010010101\n    0010010010010100101\n    0010010010100100101\n\t\nThe cycles will be output in the lowest possible “alphabetical” order\n(which is the same as numeric if these are treated as binary\nnumbers). These default parameters output three cycles because there\n_are_ three unique cycles that satisfy those rules. Only the third\n“exists in nature”. It might not look at first like this matches the\nAthenian Metonic cycle:\n\n    0010010010100100101\n    0100100101001001010 # metonic.ATHENS\n\t\nBut since this is a cycle, it _repeats_ and the standard Athenian\ncycle is just a version of this cycle shifted to the right.\n\n    00100100101001001010010010010100100101 # × 2\n     0100100101001001010                   # metonic.ATHENS\n\t  |  |  | |  |  | |                    # intercalary years line up\n\t \nWhen testing equivalency and uniqueness, `metonic` takes these\nrepetitions into account.\n\nIf you want to allow two intercalary years in a row you will get a\ndifferent set:\n\n    >>> for _ in metonic.cycle_set(max_i=2):\n    ...     print(_)\n    ...\n    0010010010010010011\n    0010010010010010101\n    0010010010010100101\n    0010010010100100101\n\n\nAs you will if you allow 8 intercalary years or 4 ordinary in a row:\n\n    >>> len(metonic.cycle_set(i_count=8))\n    7\n    >>> len(metonic.cycle_set(max_o=3))\n    38 \n\t\n`i_count` can be an iterable allowing multiple values, such as 7 _or_\n8 intercalary years:\n\n    >>> len(metonic.cycle_set(i_count=[7,8]))\n    10\n\t\nOr you can make up any rules you want:\n\n    >>> metonic.cycle_set(n=5, i_count=2, max_o=3)\n    ('00101',)\n\n### Segments\n\n`segments()` finds all the unique segments of a cycle of any given\nlength. For instance all the five year segments of the Athenian cycle:\n\n    >>> for _ in metonic.segments(metonic.ATHENS, 5):\n    ...     print(_)\n    ...\n    00100\n    00101\n    01001\n    01010\n    10010\n    10100\n\nSegments wrap from end to beginning. All the segments of length 4 for\nthe cycle \"00001\" are:\n\n    >>> metonic.segments(\"00001\", 4)\n    ('0000', '0001', '0010', '0100', '1000')\n   \nThe last three show this wrapping, i.e. (wrapping point indicated by\nthe bar (“|”):\n\n    00001|00001\n    0000\n\t 0001\n\t  001 0\n\t   01 00\n\t    1 000\n\n\n### Testing segments against cycles\n\n`in_cycle()` will test whether a segment is in a cycle or group of\ncycles, wrapping when necessary:\n\n    >>> metonic.in_cycle(\"0100\", \"00001\")\n    True\n\t\nThis true because \"0100\" matches a segment in \"00001\" treated as a ring:\n\n    0000100001\n\t   0100\n\t   \nIf you test against an iterable, the test will be repeated for each\nmember of the iterable. The result will be a tuple of cycles for which\nthere is a match, an empty tuple if there are no matches:\n\n    >>> metonic.in_cycle(\"0010101\", metonic.cycle_set())\n    ('0010010010010010101',)\n\t>>> metonic.in_cycle(\"11\", metonic.cycle_set())\n    ()\n\t\n### All Combinations\n\n`cycle_set()` begins with all possible combinations of ordinary and\nintercalary years before reducing them to unique cycles. The\nnon-unique combinations can be gotten from `combinations()`. This\ntakes the same parameters and defaults as `cycle_set` so, with no\narguments, it returns a tuple of all combinations according to the\nstandard Metonic criteria:\n\n    >>> len(metonic.combinations())\n    57\n\t\nThe 57 combinations are 19 “rotations” of 3 unique cycles (19 × 3 =\n57). The difference between `combinations()` and `cycle_set()` is that\n`combinations()` returns all the rotations while `cycle_set()` only\nreturns one example of each unique cycle (specifically the one that\ncomes first in an alphabetical sort).\n\n`cycle_set()` can also take an iterable of combinations. This:\n\n    >>> c = metonic.combinations()\n\t>>> metonic.cycle_set(c)\n\t\nis the same as calling `cycle_set()` by itself. Likewise for any combination of parameters:\n\n    >>> c = metonic.combinations(i_count=8)\n\t>>> metonic.cycle_set(c)\n\t\nis the same as:\n\n    >>> metonic.cycle_set(i_count=8)\n\t\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at\nhttps://github.com/seanredmond/metonic\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/seanredmond/metonic",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metonic-cycle",
    "package_url": "https://pypi.org/project/metonic-cycle/",
    "platform": null,
    "project_url": "https://pypi.org/project/metonic-cycle/",
    "project_urls": {
      "Bug Tracker": "https://github.com/seanredmond/metonic/issues",
      "Homepage": "https://github.com/seanredmond/metonic"
    },
    "release_url": "https://pypi.org/project/metonic-cycle/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Metonic cycle generator",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16905683,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b527a5c3befb842fe80028dc36152ae9e779471dba0bad6e2a56b579aa58d0f",
          "md5": "7545e9e7ee6d9feb27c4400a6d72f0d5",
          "sha256": "72bcfb9ed925ae03b5f1587a6d94b0dd5930583b9d21b762a9a50eabc29ccae6"
        },
        "downloads": -1,
        "filename": "metonic_cycle-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7545e9e7ee6d9feb27c4400a6d72f0d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 20091,
        "upload_time": "2023-02-17T17:32:51",
        "upload_time_iso_8601": "2023-02-17T17:32:51.352406Z",
        "url": "https://files.pythonhosted.org/packages/1b/52/7a5c3befb842fe80028dc36152ae9e779471dba0bad6e2a56b579aa58d0f/metonic_cycle-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f6716543f78a35266413dfc9872bb986b175f14d0b335f8306b2ddcb3aac57d",
          "md5": "1d6c548c5a9abb2d441f227e5888336c",
          "sha256": "7242ccf1f02c97be0313aca41fd09636310d6e0650d5337b381513fce7802892"
        },
        "downloads": -1,
        "filename": "metonic_cycle-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1d6c548c5a9abb2d441f227e5888336c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 19399,
        "upload_time": "2023-02-17T17:32:55",
        "upload_time_iso_8601": "2023-02-17T17:32:55.458254Z",
        "url": "https://files.pythonhosted.org/packages/6f/67/16543f78a35266413dfc9872bb986b175f14d0b335f8306b2ddcb3aac57d/metonic_cycle-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b527a5c3befb842fe80028dc36152ae9e779471dba0bad6e2a56b579aa58d0f",
        "md5": "7545e9e7ee6d9feb27c4400a6d72f0d5",
        "sha256": "72bcfb9ed925ae03b5f1587a6d94b0dd5930583b9d21b762a9a50eabc29ccae6"
      },
      "downloads": -1,
      "filename": "metonic_cycle-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7545e9e7ee6d9feb27c4400a6d72f0d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 20091,
      "upload_time": "2023-02-17T17:32:51",
      "upload_time_iso_8601": "2023-02-17T17:32:51.352406Z",
      "url": "https://files.pythonhosted.org/packages/1b/52/7a5c3befb842fe80028dc36152ae9e779471dba0bad6e2a56b579aa58d0f/metonic_cycle-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f6716543f78a35266413dfc9872bb986b175f14d0b335f8306b2ddcb3aac57d",
        "md5": "1d6c548c5a9abb2d441f227e5888336c",
        "sha256": "7242ccf1f02c97be0313aca41fd09636310d6e0650d5337b381513fce7802892"
      },
      "downloads": -1,
      "filename": "metonic_cycle-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1d6c548c5a9abb2d441f227e5888336c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 19399,
      "upload_time": "2023-02-17T17:32:55",
      "upload_time_iso_8601": "2023-02-17T17:32:55.458254Z",
      "url": "https://files.pythonhosted.org/packages/6f/67/16543f78a35266413dfc9872bb986b175f14d0b335f8306b2ddcb3aac57d/metonic_cycle-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}