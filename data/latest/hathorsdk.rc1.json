{
  "info": {
    "author": "Tallin",
    "author_email": "T4ll1n0@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# hathor-sdk\n[![Pytest](https://github.com/Tall1n/hathor-sdk/actions/workflows/github-action.yml/badge.svg)](https://github.com/Tall1n/hathor-sdk/actions/workflows/github-action.yml)\n\nPython sdk for interaction with the hathor blockchain. Pull requests are welcome.\n\n# Usage\n\nThe package contains of a collection of utility functions.\n\n## get_nft_owner\n\nGet the address currently holding a specific NFT\n\n```python\nfrom hathorsdk.get_nft_owner import get_nft_owner\n\nnft_uid = \"000000002be1e670ea340bfa244eb87b23970197852a800b68619748eb810c8b\"\n\nget_nft_owner(nft_uid)\n```\n\n## get_received_htr_amount\n\nGet the amount of hathor sent to a specific wallet with a transaction. If the tx does not contain hathor, the function\nwill return an error.\n\n```python\nfrom hathorsdk.get_received_htr_amount import get_received_htr_amount\n\n# tx contains 0.01 HTR\ntx_id = \"00000000f1e5259986d3182982afb2c535a02e45635739ee2e4033812369a919\"\ntarget_wallet = \"HFVpboLjDKXjukGs5ddkp1fkmegR5wsfWE\"\n\nget_received_htr_amount(tx_id, target_wallet)\n```\n\n## get_configuration_string\n\nGet the configuration string from a minted NFT.\n\n```python\nfrom hathorsdk.get_configuration_string import get_configuration_string\n\nuid = \"000000002be1e670ea340bfa244eb87b23970197852a800b68619748eb810c8b\"\nname = \"Anubian #1631\"\nsymbol = \"A1631\"\n\nget_configuration_string(uid, name, symbol)\n\n```\n\n## HeadlessWallet\n\nSee [the Hathor Headless-Wallet Github Repository](https://github.com/HathorNetwork/hathor-wallet-headless) for more\ninformation about starting the headless wallet.\n\nConnect to the headless hathor wallet running locally in the background.\n\n```python\nfrom hathorsdk.headless_wallet import HeadlessWallet\n\nheadless_wallet = HeadlessWallet(base_url=\"http://localhost:8000\")\nheadless_wallet.start()\nheadless_wallet.status\n```\n\nSend 1 HTR\n\n```python\nfrom hathorsdk.headless_wallet import HeadlessWallet\n\nheadless_wallet = HeadlessWallet(base_url=\"http://localhost:8000\")\nheadless_wallet.start()\n\npost_data = {\n    \"address\": \"HFEkN7Wu6X6AoeF4CvwfLGCgviUqifvnoG\",\n    \"value\": 100,\n}\nres = headless_wallet.send_simple_htr_tx(post_data)\n```\n\nSend an NFT\n\n```python\nfrom hathorsdk.headless_wallet import HeadlessWallet\n\nheadless_wallet = HeadlessWallet(base_url=\"http://localhost:8000\")\nheadless_wallet.start()\n\nnft_uid = \"An NFT contained in the headless wallet that was started in the background.\"\ntransaction_data = {\n    \"address\": \"HFEkN7Wu6X6AoeF4CvwfLGCgviUqifvnoG\",\n    \"value\": 1,\n    \"token\": nft_uid,\n}\n\n# send out the NFT\nres = headless_wallet.send_simple_htr_tx(transaction_data)\n```\n\n## Pinata\n\nTo have decentralized storage and a credible NFT. You can use IPFS to store the NFT content.\n[pinata.cloud](pinata.cloud) provides a service greatly simplifying the interaction with IPFS, its worth it.\n\nYou need to create a JWT token on the pinata website and use it to initialize the Pinata class.\n\n```python\nfrom hathorsdk.pinata import Pinata\n\ntoken_string = \"tokenstring \"\n\npinata = Pinata(jwt_token=token_string)\npinata.check_api_connection()\n\n```\n\nUpload a local image to ipfs using pinata\n\n```python\nfrom hathorsdk.pinata import Pinata\n\ntoken_string = \"tokenstring \"\npinata = Pinata(jwt_token=token_string)\n\nlocal_path = \"path/to/local/nft/image.png\"\nres_image_upload = pinata.ipfs_upload(local_path)\n```\n\nUpload a whole directory to ipfs using pinata.\n\n```python\nfrom hathorsdk.pinata import Pinata\n\ntoken_string = \"tokenstring \"\npinata = Pinata(jwt_token=token_string)\n\nlocal_path = \"path/to/local/nft/\"\nres_image_upload = pinata.ipfs_upload_directory(local_path)\n```\n\nGiving a path like this will create a nested folder like that on ipfs. If you want to have only one level, you can\nchange the working directory for the upload like in the following example.\n\n```python\nimport os\n\nfrom pathlib import Path\n\nfrom hathorsdk.pinata import Pinata\n\ntoken_string = \"tokenstring \"\npinata = Pinata(jwt_token=token_string)\n\nlocal_path = \"path/to/local/nft/\"\n\n# save current working directory\nworkdir = os.getcwd()\n\n# change the working directory to \"path/to/local/\"\nvideo_directory_path = Path(local_path)\nos.chdir(video_directory_path.parent)\n\n# upload the \"/nft/\" directory to ipfs\nipfs_pin_response = pinata.ipfs_upload_directory(video_directory_path.name)\nipfs_hash_json = ipfs_pin_response.json()\n\n# change back to the original working directory\nos.chdir(workdir)\n```\n\n## Putting it all together in one method to mint and NFT\n\nFor my ai-nubians project \n\n(https://t.me/ai_nubians_chat, Mint 01.01.2022 - 31.01.2022)\n\nI have created a processing function that goes through all steps for minting an NFT for a given anubian id. \n\nThe basic steps are:\n\n1. Create the NFT image / video (not in the pipeline code below)\n2. IPFS upload of the image/video using pinata\n3. Create the NFT metadata\n4. Upload NFT metadata to IPFS using pinata\n5. Mint NFT to Hathor\n\nYou will have to create your own version of the functions yourself to match your NFT project.\n\n\n```python\n# Pseudocode, do not run\ndef process_ainubian_nft(anub_id, nft_type, headless_wallet):\n\n    # 1. create NFT image/video in another process\n    \n    # 2. ipfs upload NFT image\n    print(\"IPFS upload NFT image / video.\")\n    ipfs_hash_json = ipfs_upload_nft_content(anub_id, nft_type)\n\n    # 3. create the nft metadata in the format required (validate via NftMetadata class)\n    print(\"Create NFT metadata.\")\n    attributes = get_ainubian_nft_metadata(anub_id)\n    name = get_name(anub_id, nft_type)\n    description = get_description(anub_id, nft_type)\n    ipfs_hash = ipfs_hash_json[\"IpfsHash\"]\n    metadata = nft_metadata(name, description, ipfs_hash, attributes)\n\n    # 4. ipfs upload nft metadata\n    print(\"IPFS upload NFT metadata.\")\n    ipfs_hash_metadata_json = ipfs_upload_file(metadata)\n\n    # 5. mint hft to hathor by linking to the metadata saved on ipfs.  (validate via NftMint class)\n    print(\"HATHOR MINT NFT.\")\n    ipfs_hash = ipfs_hash_metadata_json[\"IpfsHash\"]\n    prefix = get_prefix(nft_type)\n    nft_resp_json = mint_ainubian_nft(ipfs_hash, headless_wallet, prefix=prefix)\n\n    return nft_resp_json\n```\n\n# local development\n\nFor virtual env management Pipenv is used.\n\nClone the repo, install pipenv and run `pipenv install --dev` to install the package in development mode.\n\n# packaging and pushing to pypi\n\nDon't forget to adjust the calendar version to the current date.\n\n```shell\npipenv run python -m build --sdist\n```\n\nTest Pypi:\n\n```shell\npipenv run twine upload --repository testpypi dist/* -u __token__ -p $TEST_PYPI_TOKEN --verbose\n```\n\nReal PyPi:\n\n```shell\npipenv run twine upload dist/* -u __token__ -p $PYPI_TOKEN --verbose\n```\n\n# TODO:\nSwitch to a more established Readme structure like https://github.com/KatherineMichel/setting-up-an-open-source-project/blob/master/example-README-structure.md\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tall1n/hathor-sdk",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hathorsdk",
    "package_url": "https://pypi.org/project/hathorsdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/hathorsdk/",
    "project_urls": {
      "Bug Reports": "https://github.com/Tall1n/hathor-sdk/issues",
      "Funding": "https://explorer.hathor.network/address/HFEkN7Wu6X6AoeF4CvwfLGCgviUqifvnoG",
      "Homepage": "https://github.com/Tall1n/hathor-sdk"
    },
    "release_url": "https://pypi.org/project/hathorsdk/2021.12.29/",
    "requires_dist": null,
    "requires_python": ">=3.7, <4",
    "summary": "A python package to interact with the Hathor blockchain. Specialised for NFT projects.",
    "version": "2021.12.29",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12434079,
  "releases": {
    "2021.12.29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "581dd3a00c552002357aa553c132252ba9a5b77d4192e33e6aa6205e2b29ac37",
          "md5": "cf62e5ef5bc8343db8b0345004940813",
          "sha256": "665a8614196d48d0515f722b3d9483147848545cf11eac4e7056707fa8bca1b5"
        },
        "downloads": -1,
        "filename": "hathorsdk-2021.12.29.tar.gz",
        "has_sig": false,
        "md5_digest": "cf62e5ef5bc8343db8b0345004940813",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 11871,
        "upload_time": "2021-12-29T19:53:00",
        "upload_time_iso_8601": "2021-12-29T19:53:00.898746Z",
        "url": "https://files.pythonhosted.org/packages/58/1d/d3a00c552002357aa553c132252ba9a5b77d4192e33e6aa6205e2b29ac37/hathorsdk-2021.12.29.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "581dd3a00c552002357aa553c132252ba9a5b77d4192e33e6aa6205e2b29ac37",
        "md5": "cf62e5ef5bc8343db8b0345004940813",
        "sha256": "665a8614196d48d0515f722b3d9483147848545cf11eac4e7056707fa8bca1b5"
      },
      "downloads": -1,
      "filename": "hathorsdk-2021.12.29.tar.gz",
      "has_sig": false,
      "md5_digest": "cf62e5ef5bc8343db8b0345004940813",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 11871,
      "upload_time": "2021-12-29T19:53:00",
      "upload_time_iso_8601": "2021-12-29T19:53:00.898746Z",
      "url": "https://files.pythonhosted.org/packages/58/1d/d3a00c552002357aa553c132252ba9a5b77d4192e33e6aa6205e2b29ac37/hathorsdk-2021.12.29.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}