{
  "info": {
    "author": "Tomi Kasurinen",
    "author_email": "tomi.kasurinen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "==============\nBadger Batcher\n==============\n\n\n.. image:: https://img.shields.io/pypi/v/badger_batcher.svg\n        :target: https://pypi.python.org/pypi/badger_batcher\n\n.. image:: https://travis-ci.com/tkasu/badger_batcher.svg?branch=master\n        :target: https://travis-ci.com/tkasu/badger_batcher\n\n.. image:: https://readthedocs.org/projects/badger-batcher/badge/?version=latest\n        :target: https://badger-batcher.readthedocs.io/en/latest/?version=latest\n        :alt: Documentation Status\n\n\n\n\nBadger Batcher contains useful utilities for batching a sequence on records\n\n\n* Free software: MIT license\n* Documentation: https://badger-batcher.readthedocs.io.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install badger_batcher\n\n\nFeatures\n--------\n\nImport Batcher:\n\n.. code-block:: python\n\n    >>> from badger_batcher import Batcher\n\n\nSplit records based max limit for batch len:\n\n.. code-block:: python\n\n    >>> records = [f\"record: {rec}\" for rec in range(5)]\n    >>> batcher = Batcher(records, max_batch_size=2)\n    >>> batcher.batches()\n    [['record: 0', 'record: 1'], ['record: 2', 'record: 3'], ['record: 4']]\n\nSplit records with max limit for batch len and max limit for record size:\n\n.. code-block:: python\n\n    >>> records = [b\"aaaa\", b\"bb\", b\"ccccc\", b\"d\"]\n    >>> batcher = Batcher(\n    ... records,\n    ... max_batch_size=2,\n    ... max_record_size=4,\n    ... size_calc_fn=len,\n    ... when_record_size_exceeded=\"skip\",\n    ... )\n    >>> batcher.batches()\n    [[b'aaaa', b'bb'], [b'd']]\n\nSplit records with max batch len and size:\n\n.. code-block:: python\n\n    >>> records = [b\"a\", b\"a\", b\"a\", b\"b\", b\"ccc\", b\"toolargeforbatch\", b\"dd\", b\"e\"]\n    >>> batcher = Batcher(\n    ... records,\n    ... max_batch_len=3,\n    ... max_batch_size=5,\n    ... size_calc_fn=len,\n    ... when_record_size_exceeded=\"skip\",\n    ... )\n    >>> batcher.batches()\n    [[b'a', b'a', b'a'], [b'b', b'ccc'], [b'dd', b'e']]\n\nWhen processing big chunks of data, consider iterating instead:\n\n.. code-block:: python\n\n    >>> import sys\n\n    >>> records = (f\"record: {rec}\" for rec in range(sys.maxsize))\n    >>> batcher = Batcher(records, max_batch_size=2)\n    >>> for batch in batcher:\n    ...       # do something for each batch\n    ...       some_fancy_fn(batch)\n\nIf you need to encode records before applying the batcher, just encode it before applying.\nBatcher will not eagerly realize the whole iterable, so use a generator for bigger iterables.\n\n.. code-block:: python\n\n    >>> records = [\"a\", \"a\", \"a\", \"b\", \"ccc\", \"bbbb\", \"dd\", \"e\"]\n    >>> encoded_records_gen = (record.encode(\"utf-16-le\") for record in records)\n\n    >>> batcher = Batcher(\n    ... encoded_records_gen,\n    ... max_batch_len=3,\n    ... max_record_size=6,\n    ... max_batch_size=10,\n    ... size_calc_fn=len,\n    ... when_record_size_exceeded=\"skip\",\n    ... )\n\n    >>> batched_records = batcher.batches()\n    [\n        [b\"a\\x00\", b\"a\\x00\", b\"a\\x00\"],\n        [b\"b\\x00\", b\"c\\x00c\\x00c\\x00\"],\n        [b\"d\\x00d\\x00\", b\"e\\x00\"],\n    ]\n\nFull example for e.g. Kinesis Streams like processing\n\n.. code-block:: python\n\n    import random\n    from badger_batcher import Batcher\n\n\n    def get_records():\n        records = (\n            f\"\"\"{{'id': '{i}', 'body': {('x' * random.randint(100_000, 7_000_000))}}}\"\"\"\n            for i in range(10_000)\n        )\n        return records\n\n\n    records = get_records()\n    encoded_records = (record.encode(\"utf-8\") for record in records)\n\n    batcher = Batcher(\n        encoded_records,\n        max_batch_len=500,\n        max_record_size=1000 * 1000,\n        max_batch_size=5 * 1000 * 1000,\n        size_calc_fn=len,\n        when_record_size_exceeded=\"skip\",\n    )\n\n    for i, batch in enumerate(batcher):\n        # do something\n\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2021-04-09)\n------------------\n\n* First release on PyPI.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tkasu/badger_batcher",
    "keywords": "badger_batcher",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "badger-batcher",
    "package_url": "https://pypi.org/project/badger-batcher/",
    "platform": "",
    "project_url": "https://pypi.org/project/badger-batcher/",
    "project_urls": {
      "Homepage": "https://github.com/tkasu/badger_batcher"
    },
    "release_url": "https://pypi.org/project/badger-batcher/0.4.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Badger Batcher contains useful utilities for batching a sequence on records",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10037266,
  "releases": {
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da9632889aace5ccd370630c3a2ca7d24cf5db7c3215c2f52c8d85b4788c06f6",
          "md5": "55560e7088e78de2022699508e172793",
          "sha256": "42dd9914666e218e1aac6f4df2923b4e3f68dc2f12180ed2189fad75c69e9cd1"
        },
        "downloads": -1,
        "filename": "badger_batcher-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "55560e7088e78de2022699508e172793",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15786,
        "upload_time": "2021-04-10T17:47:55",
        "upload_time_iso_8601": "2021-04-10T17:47:55.283575Z",
        "url": "https://files.pythonhosted.org/packages/da/96/32889aace5ccd370630c3a2ca7d24cf5db7c3215c2f52c8d85b4788c06f6/badger_batcher-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20e3404a56549ee3b349cdfbb35e60a0bba70fcd352da6a825041cfd0fd20c8b",
          "md5": "6b233e885283db44ea3b03d0610058f3",
          "sha256": "47fcd40bf676c856cc1adf4f4ec3791bc160b305fc7fe4d3ec7b4d8479712cc3"
        },
        "downloads": -1,
        "filename": "badger_batcher-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6b233e885283db44ea3b03d0610058f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17279,
        "upload_time": "2021-04-12T06:33:16",
        "upload_time_iso_8601": "2021-04-12T06:33:16.558357Z",
        "url": "https://files.pythonhosted.org/packages/20/e3/404a56549ee3b349cdfbb35e60a0bba70fcd352da6a825041cfd0fd20c8b/badger_batcher-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8ad46929eb77d305862e633a68f2bd711fd763010459dd1243594540403dd47",
          "md5": "7aebc72f878d7f0f647212209c185931",
          "sha256": "1eb537d0c12fd990de19341739e52c51fb15d8a1afc3ad4e6ca4b2f4a3d89bc6"
        },
        "downloads": -1,
        "filename": "badger_batcher-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7aebc72f878d7f0f647212209c185931",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 19646,
        "upload_time": "2021-04-12T09:04:39",
        "upload_time_iso_8601": "2021-04-12T09:04:39.299664Z",
        "url": "https://files.pythonhosted.org/packages/d8/ad/46929eb77d305862e633a68f2bd711fd763010459dd1243594540403dd47/badger_batcher-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8ad46929eb77d305862e633a68f2bd711fd763010459dd1243594540403dd47",
        "md5": "7aebc72f878d7f0f647212209c185931",
        "sha256": "1eb537d0c12fd990de19341739e52c51fb15d8a1afc3ad4e6ca4b2f4a3d89bc6"
      },
      "downloads": -1,
      "filename": "badger_batcher-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7aebc72f878d7f0f647212209c185931",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 19646,
      "upload_time": "2021-04-12T09:04:39",
      "upload_time_iso_8601": "2021-04-12T09:04:39.299664Z",
      "url": "https://files.pythonhosted.org/packages/d8/ad/46929eb77d305862e633a68f2bd711fd763010459dd1243594540403dd47/badger_batcher-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}