{
  "info": {
    "author": "Andres Martinez",
    "author_email": "andressbox90@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Tess\n\nManage your algorithms' implementations to be run against prepared and \nauto-generated test cases. Apply Stress Testing to detect issues when \nimplementing new algorithms. Compare algorithms written in different languages \nwith ease.\n\n## Installation\nTess hasn't been tested on _Windows_, so if you are on a _Windows_ machine, we \nrecommend you to use a _Linux_ distribution. You can access this \n[link](https://docs.microsoft.com/en-us/windows/wsl/install-win10) \nto learn how to install it.\n\n### Dependencies\nBefore installing Tess, please make sure you have installed these dependencies:\n\n* [Python](https://www.python.org/downloads/) >= 3.7 \n* [Pip](https://pip.pypa.io/en/stable/installing/)\n* [GCC](https://gcc.gnu.org/install/) (with support for C++14)\n* [OpenJDK](https://openjdk.java.net/install/)\n\n### Download\nRun the next command from your terminal to download and install Tess:\n\n    pip install tess-cli\n\n## Setup\nAfter installing Tess and all its dependencies, it is recommended to enable\nthe auto-completion feature for your terminal. Tess supports auto-completion\nfor _**bash**_, _**zsh**_, and _**fish**_ shells. Run the next command to create\na shell script that will be used by your terminal to recognize Tess commands.\n\n    tess auto-complete /location/where/you/want/to/store/the/script.sh\n\nA file named _**tess-completion.sh**_ will be created at your specified \nlocation. Now, you need to add the next line to your `.bashrc` or `.zshrc` file.\n\n    . /location/tess-completion.sh\n\n>Remember to replace the path with the one where the file was created in the\n>previous step.\n\nIf you are using _MacOSX_ you might have issues with the _**zsh**_ terminal. If,\nafter sourcing from your `.zshrc` the auto-completion script you see an error,\nor the Tess commands are not being auto-completed, you can add two extra lines\non top of the previous one to enable the auto-completion for the shell. Your\n`.zshrc` file should look like this:\n\n    autoload -Uz compinit\n    compinit\n    . /location/tess-completion.sh\n\nNow, you should be able to start using Tess with its auto-completion feature on.\n\n## Getting Started\nAfter completing the installation and setup of the auto-completion feature, \nyou're ready to go. Now, let's create your first Tess project for a very simple\nalgorithmic problem, computing the sum of an array of numbers.\n\n### Project Initialization\n\n![](gifs/init.gif)\n\nThe first step is to initialize a Tess project; for that, you have this command: \n\n    tess init -e\n\nThat command will create the required project structure for Tess to work. By \ndefault, Tess will create a couple of sample files for you to test the tool but, \nwe want an empty project to work with, that's why the `-e` option.\n\n>If you want the sample files from one of the supported languages run this\n>command:\n\n    tess init -l [py|cpp|java]\n\nNow, you should see three directories (`solutions`, `cases`, `build`) and one\nfile named `generator.py`.\n\n### Project Structure\nAny Tess project will have the next structure:\n\n* **Solutions:** Here you have to save all your source files containing the\nimplementations for a given algorithm. Avoid creating new sub-directories here,\notherwise Tess won't be able to find your source files.\n* **Cases:** This directory will contain files containing the test cases needed to\ntest manually our algorithms, this files usually are `.txt` files but, you can\nuse any valid input file extension.\n* **Build:** All the compiled files will be here.\n\n>This project structure is created by default, do not modify the location or\n>name of any of the directories or the `generator.py` file.\n\n### Running an Algorithm\n\n![](gifs/run.gif)\n\nTo run an algorithm from the `solutions` directory you have to type the next\ncommand:\n\n    tess run FILENAME [TESTCASE]\n\nWhere the *FILENAME* is the name of the source file of your algorithm, i.e.\n*sum.cpp* and the *TESTCASE* is an optional argument, where you can specify the\nname of one of the test cases that you have in you `cases` directory. Let's say\nyou have a *sum.cpp* file in your `solutions` directory and two test cases in\nyour `cases` directory (*sample-1.in*, *sample-2.in*); if you want to run all\nyour test cases you simply call the run command like this:\n\n    tess run sum.cpp \n\nWithout passing the *TESTCASE* argument, otherwise if you want to run the \n*sample-1.in* test case, you should pass it as the *TESTCASE* argument, like\nthis:\n\n    tess run sum.cpp sample-1.in\n\n>***Important:*** It's highly recommended to use the auto-completion script to \n>find the available files for every command quick and easy. If you are not using\n>this feature, remember to use the file names as arguments, not its absolute or\n>relative paths.\n\n### Debug Mode\n\n![](gifs/debug.gif)\n\nTess has a simple yet, useful feature to allow you to debug your algorithms\nusing native comments. To use this feature you need to append the `@log` \nannotation to your comments; this annotation will tell Tess to uncomment those\nlines of code whenever you run the algorithm in debug mode, which can be done \nusing this option:\n\n    tess run --debug sum.cpp\n\n#### Log Annotation Rules\nFor this annotation to work properly, please always append the annotation next\nto the open comment symbol used by the programming language of your preference.\nFor single line comments you have to leave just **one** white space between the\nannotation and the actual code you want to be executed when the comments are\nremoved; for block comments the annotation should be alone in the opening line.\n\nHere you can see examples of how to use the annotation properly:\n\n##### Python\n````python\ndef fn():\n    #@log print('This is a single line debug comment.')\n\n    \"\"\"@log\n    print('This is a block debug comment.')\n    \"\"\"\n    pass\n```` \n\n>Always try to keep the indentation correct when working with Python.\n\n##### C++/Java\n````c++\nvoid fn() {\n    //@log std::cout << \"This is a single line debug comment.\\n\";\n\n    /*@log\n    std::cout << \"This is a block debug comment.\\n\";\n    */\n}\n````\n\n### Stress Testing\n\n![](gifs/stress.gif)\n\nTo execute a stress testing you need at least two algorithms; one that will work\nas a ***Model*** and another one that will be the ***Solution*** to be tested. \nThe model is usually a naive implementation to solve an algorithmic problem, \nthis model could be very inefficient and slow but, will give us the right answer \nto the problem. On the other hand, we have the solution, which is the new,\nefficient and optimized algorithm that we've created. Often times, things does\nnot work as expected and we are not going to have infinite number of prepared\ntest cases to find bugs, here's where stress testing and Tess come in. \n\nTo execute the stress testing you can type in your terminal this command:\n\n    tess stress MODEL SOLUTION \n\nPassing the names of the files that you want to treat as the model and the \nsolution.\n\n>***Important:*** When working with C++ or Java, remember to compile the source\n>files before executing the stress testing. You can use this command to do so:\n\n    tess build [FILENAME]\n\n#### The Generator\nWhen you press `<ENTER>`, a prompt will ask you for some arguments:\n\n    Arguments (separated by spaces):\n\nYou can think of them like the arguments you pass to a console program, i.e. \n`./myprogram arg1 arg2`. These arguments are used by the `generator.py` sitting\nin the root of your Tess project. This generator file is the one responsible for\nthe creation of the auto-generated test cases that will be executed during the \nstress testing process.\n\nFor instance, if you pass the next arguments to the stress testing command:\n\n    Arguments (separtaed by spaces): 10 Hello\n\nYou can access them from the generator file like this:\n\n````python\ndef test_case(args, random) -> str:\n    num = int(args[0]) # 10\n    greet = args[1] # Hello\n    pass\n````\n\n>The arguments array is zero-indexed.\n\nYou can use those arguments to modify the behaviour of your randomly generated\ntest cases.\n\nThe generator have a second parameter called ***random***, this is just a\nreference of the random object used by Python to generate pseudo-random numbers.\n\n>You can change the seed of this random instance using the `--seed` option \n>available from the `stress` command.\n\nFinally, after you implement the logic needed to generate your desired test\ncase, you have to return a ***string*** containing the test case with the\nrequired format to be read by your algorithms from the standard I/O.\n\n>If you initialize the project with the sample files, you can see a simple\n>implementation of the generator that produces random test cases.\n\n#### The Execution\nAt this point you should have these things ready:\n\n1. A model or naive (but correct) algorithm.\n2. A solution that you want to test for correctness.\n3. A generator that will produce strings following the input format needed by\nyour algorithms.\n\nNow, you can run the stress testing and hope that your new algorithm is correct.\nThe stress testing will run infinitely, you have to abort the process to stop \nit by typing `CTLR+C`; or you can pass the `--number` option to the stress \ncommand letting Tess know how many test cases do you want to created before \nstopping the process.\n\nOne last option that you can pass to the stress command is the `--line` one.\nThis option is useful when some algorithms output does not need to be evaluated\ncompletely. For example, you have an algorithms that outputs these two lines:\n\n    8\n    4 2\n\nIf you want to compare just the first line, you can use the command above\ntelling Tess to just compare the first line when is executing the stress testing\nand ignore the second one. For this you can run the stress command like this:\n\n    tess stress model.py solution --line 1\n\n>***Important:*** *C++* and *Java* files are passed to the stress command with the\n>names of their compiled versions, not their source files.\n\n### Usage\n\n![](gifs/usage.gif)\n\nFor a complete list of the commands, options, and usage of Tess, please use\nthe help command:\n\n    tess --help\n    tess COMMAND --help\n\n## Contribute\nTess is the result of the testing practices learned from the \n[Algorithmic Toolbox](https://www.coursera.org/learn/algorithmic-toolbox?specialization=data-structures-algorithms)\ncourse offered by [Coursera](https://www.coursera.org/). It is a work in \nprogress, aiming to help other students like me enrolled in the [Data Structures \nand Algorithms Specialization](https://www.coursera.org/specializations/data-structures-algorithms) \nto test their algorithms using the stress testing \napproach suggested in the course easing the process and allowing the students to \nuse different programming languages to create their models and solutions.\n\n### How can I contribute?\nTess is a new tool looking to grow and help more students and anyone who is \ninterested and needs to test algorithms in an efficient and simple way, without \nrestricting you to use a particular programming language or IDE. Currently, Tess \nis supporting three programming languages, **Python**, **C++**, and **Java**; \none of the main goals of Tess is to give support to more programming languages \nbut,  as the code base grows and more features are added, the need for a more \nreliable and flexible code is critical to achieving this. Here you can find a \nlist of tasks that would help the project to grow and improve the user's \nexperience:\n\n* **Unit testing:** This is the top priority at this point.\n* **Testing and reporting issues:** You can contribute using the tool and \nreporting any bugs to my [email](mailto:andressbox90@gmail.com).\n* **Documentation:** This documentation could be incomplete. Any contributions\nto improve it would be very helpful. The code is not documented, this is \ncritical to make it easier for more developers to join in, task that I have to\nbegin as soon as possible.\n* **OOP migration:** Any contributions refactoring code to make it more \nobject-oriented would be very appreciated. \n\nPlease feel free to [contact me](mailto:andressbox90@gmail.com) to report \nsomething else that is not part of this documentation or if you want more \ninformation about the project and how to contribute.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andresscode/tess",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tess-cli",
    "package_url": "https://pypi.org/project/tess-cli/",
    "platform": "",
    "project_url": "https://pypi.org/project/tess-cli/",
    "project_urls": {
      "Homepage": "https://github.com/andresscode/tess"
    },
    "release_url": "https://pypi.org/project/tess-cli/0.1.1/",
    "requires_dist": [
      "Click"
    ],
    "requires_python": ">=3.7",
    "summary": "CLI tool for testing algorithms.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9142973,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdecb48d9a64004dd566cdf6dc13a60daaa1313925633334183cd0c326a5bcae",
          "md5": "f0c7da64afe1a687c8a68047b39e7892",
          "sha256": "82ddc831bfbeb839c4e597c118af587109b9741a89a380fd828534d817775ce4"
        },
        "downloads": -1,
        "filename": "tess_cli-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0c7da64afe1a687c8a68047b39e7892",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22022,
        "upload_time": "2021-01-12T22:17:14",
        "upload_time_iso_8601": "2021-01-12T22:17:14.620604Z",
        "url": "https://files.pythonhosted.org/packages/fd/ec/b48d9a64004dd566cdf6dc13a60daaa1313925633334183cd0c326a5bcae/tess_cli-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a153f3cac695e28ad1ca510e3c9bf26b6a1513eefc69597c31681c0d7b1f53bf",
          "md5": "9795e93fcfbc7b3197746e79a74f9ee9",
          "sha256": "af2aa50b548420151ff7b81aad4f44b4b4bf6db595a8904c1f94238290791f0b"
        },
        "downloads": -1,
        "filename": "tess-cli-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9795e93fcfbc7b3197746e79a74f9ee9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20450,
        "upload_time": "2021-01-12T22:17:16",
        "upload_time_iso_8601": "2021-01-12T22:17:16.208496Z",
        "url": "https://files.pythonhosted.org/packages/a1/53/f3cac695e28ad1ca510e3c9bf26b6a1513eefc69597c31681c0d7b1f53bf/tess-cli-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6075ca3ed91ebe62938abba06d35409b95a60b9ca76eff41d6577f9752ff8f77",
          "md5": "fe7cd8577da595b7a7bc91425375a26a",
          "sha256": "eaace5b1ec2eded05dcf688f2b689f4e8ccda662501aa32cfefb4cf16830b6a5"
        },
        "downloads": -1,
        "filename": "tess_cli-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe7cd8577da595b7a7bc91425375a26a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22445,
        "upload_time": "2021-01-15T13:27:37",
        "upload_time_iso_8601": "2021-01-15T13:27:37.415676Z",
        "url": "https://files.pythonhosted.org/packages/60/75/ca3ed91ebe62938abba06d35409b95a60b9ca76eff41d6577f9752ff8f77/tess_cli-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcd98fca02a553bdf295f140259227e4461746e25dc40b18abd645c9172b09cb",
          "md5": "8d56150bd09d771f7ca94c07a7775647",
          "sha256": "88c434b1b4bde1f16afb39e2f9f664e551e280743b9065e8dcf88cda5b57bf32"
        },
        "downloads": -1,
        "filename": "tess-cli-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8d56150bd09d771f7ca94c07a7775647",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20967,
        "upload_time": "2021-01-15T13:27:38",
        "upload_time_iso_8601": "2021-01-15T13:27:38.596449Z",
        "url": "https://files.pythonhosted.org/packages/bc/d9/8fca02a553bdf295f140259227e4461746e25dc40b18abd645c9172b09cb/tess-cli-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6075ca3ed91ebe62938abba06d35409b95a60b9ca76eff41d6577f9752ff8f77",
        "md5": "fe7cd8577da595b7a7bc91425375a26a",
        "sha256": "eaace5b1ec2eded05dcf688f2b689f4e8ccda662501aa32cfefb4cf16830b6a5"
      },
      "downloads": -1,
      "filename": "tess_cli-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe7cd8577da595b7a7bc91425375a26a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 22445,
      "upload_time": "2021-01-15T13:27:37",
      "upload_time_iso_8601": "2021-01-15T13:27:37.415676Z",
      "url": "https://files.pythonhosted.org/packages/60/75/ca3ed91ebe62938abba06d35409b95a60b9ca76eff41d6577f9752ff8f77/tess_cli-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcd98fca02a553bdf295f140259227e4461746e25dc40b18abd645c9172b09cb",
        "md5": "8d56150bd09d771f7ca94c07a7775647",
        "sha256": "88c434b1b4bde1f16afb39e2f9f664e551e280743b9065e8dcf88cda5b57bf32"
      },
      "downloads": -1,
      "filename": "tess-cli-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8d56150bd09d771f7ca94c07a7775647",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 20967,
      "upload_time": "2021-01-15T13:27:38",
      "upload_time_iso_8601": "2021-01-15T13:27:38.596449Z",
      "url": "https://files.pythonhosted.org/packages/bc/d9/8fca02a553bdf295f140259227e4461746e25dc40b18abd645c9172b09cb/tess-cli-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}