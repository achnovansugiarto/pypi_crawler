{
  "info": {
    "author": "Eric Zhang",
    "author_email": "ekzhang1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Recognition"
    ],
    "description": "# Fast Semantic Segmentation\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ekzhang/fastseg/blob/master/demo/fastseg-semantic-segmentation.ipynb)\n\nThis respository aims to provide accurate _real-time semantic segmentation_ code for mobile devices in PyTorch, with pretrained weights on Cityscapes. This can be used for efficient segmentation on a variety of real-world street images, including datasets like Mapillary Vistas, KITTI, and CamVid.\n\n```python\nfrom fastseg import MobileV3Large\nmodel = MobileV3Large.from_pretrained().cuda().eval()\nmodel.predict(images)\n```\n\n![Example image segmentation video](https://i.imgur.com/vOApT8N.gif)\n\nThe models are implementations of **MobileNetV3** (both large and small variants) with a modified segmentation head based on **LR-ASPP**. The top model was able to achieve **72.3%** mIoU accuracy on Cityscapes _val_, while running at up to **37.3 FPS** on a GPU. Please see below for detailed benchmarks.\n\nCurrently, you can do the following:\n\n- Load pretrained MobileNetV3 semantic segmentation models.\n- Easily generate hard segmentation labels or soft probabilities for street image scenes.\n- Evaluate MobileNetV3 models on Cityscapes, or your own dataset.\n- Export models for production with ONNX.\n\nIf you have any feature requests or questions, feel free to leave them as GitHub issues!\n\n## Table of Contents\n\n  * [What's New?](#whats-new)\n    + [August 12th, 2020](#august-12th-2020)\n    + [August 11th, 2020](#august-11th-2020)\n  * [Overview](#overview)\n  * [Requirements](#requirements)\n  * [Pretrained Models and Metrics](#pretrained-models-and-metrics)\n  * [Usage](#usage)\n    + [Running Inference](#running-inference)\n    + [Exporting to ONNX](#exporting-to-onnx)\n  * [Training from Scratch](#training-from-scratch)\n  * [Contributions](#contributions)\n\n## What's New?\n\n### September 29th, 2020\n\n- Released [training code](https://github.com/ekzhang/semantic-segmentation) for semantic segmentation models\n\n### August 12th, 2020\n\n- Added pretrained weights for `MobileV3Small` with 256 filters\n\n### August 11th, 2020\n\n- Initial release\n- Implementations of `MobileV3Large` and `MobileV3Small` with LR-ASPP\n- Pretrained weights for `MobileV3Large` with 128/256 filters, and `MobileV3Small` with 64/128 filters\n- Inference, ONNX export, and optimization scripts\n\n## Overview\n\nHere's an excerpt from the [original paper](https://arxiv.org/abs/1905.02244) introducing MobileNetV3:\n\n> This paper starts the exploration of how automated search algorithms and network design can work together to harness complementary approaches improving the overall state of the art. Through this process we create two new MobileNet models for release: MobileNetV3-Large and MobileNetV3-Small, which are targeted for high and low resource use cases. These models are then adapted and applied to the tasks of object detection and semantic segmentation.\n>\n> For the task of semantic segmentation (or any dense pixel prediction), we propose a new efficient segmentation decoder Lite Reduced Atrous Spatial Pyramid Pooling (LR-ASPP). **We achieve new state of the art results for mobile classification, detection and segmentation.**\n>\n> **MobileNetV3-Large LRASPP is 34% faster than MobileNetV2 R-ASPP at similar accuracy for Cityscapes segmentation.**\n>\n> ![MobileNetV3 Comparison](https://i.imgur.com/E9IYp0c.png?1)\n\nThis project tries to faithfully implement MobileNetV3 for real-time semantic segmentation, with the aims of being efficient, easy to use, and extensible.\n\n## Requirements\n\nThis code requires Python 3.7 or later. It has been tested to work with PyTorch versions 1.5 and 1.6. To install the package, simply run `pip install fastseg`. Then you can get started with a pretrained model:\n\n```python\n# Load a pretrained MobileNetV3 segmentation model in inference mode\nfrom fastseg import MobileV3Large\nmodel = MobileV3Large.from_pretrained().cuda()\nmodel.eval()\n\n# Open a local image as input\nfrom PIL import Image\nimage = Image.open('street_image.png')\n\n# Predict numeric labels [0-18] for each pixel of the image\nlabels = model.predict_one(image)\n```\n\n![Example image segmentation](https://i.imgur.com/WspmlwN.jpg)\n\nMore detailed examples are given below. As an alternative, instead of installing `fastseg` from pip, you can clone this repository and install the [`geffnet` package](https://github.com/rwightman/gen-efficientnet-pytorch) (along with other dependencies) by running `pip install -r requirements.txt` in the project root.\n\n## Pretrained Models and Metrics\n\nI was able to train a few models close to or exceeding the accuracy described in the original [Searching for MobileNetV3](https://arxiv.org/abs/1905.02244) paper. Each was trained only on the `gtFine` labels from Cityscapes for around 12 hours on an Nvidia DGX-1 node, with 8 V100 GPUs.\n\n|      Model      | Segmentation Head | Parameters | mIoU  | Inference | TensorRT | Weights? |\n| :-------------: | :---------------: | :--------: | :---: | :-------: | :------: | :------: |\n| `MobileV3Large` |  LR-ASPP, F=256   |    3.6M    | 72.3% | 21.1 FPS  | 30.7 FPS |    ✔     |\n| `MobileV3Large` |  LR-ASPP, F=128   |    3.2M    | 72.3% | 25.7 FPS  | 37.3 FPS |    ✔     |\n| `MobileV3Small` |  LR-ASPP, F=256   |    1.4M    | 67.8% | 30.3 FPS  | 39.4 FPS |    ✔     |\n| `MobileV3Small` |  LR-ASPP, F=128   |    1.1M    | 67.4% | 38.2 FPS  | 52.4 FPS |    ✔     |\n| `MobileV3Small` |   LR-ASPP, F=64   |    1.0M    | 66.9% | 46.5 FPS  | 61.9 FPS |    ✔     |\n\nThe accuracy is within **0.3%** of the original paper, which reported 72.6% mIoU and 3.6M parameters on the Cityscapes _val_ set. Inference was tested on a single V100 GPU with full-resolution 2MP images (1024 x 2048) as input. It runs roughly 4x faster on half-resolution (512 x 1024) images.\n\nThe \"TensorRT\" column shows benchmarks I ran after exporting optimized ONNX models to [Nvidia TensorRT](https://developer.nvidia.com/tensorrt) with fp16 precision. Performance is measured by taking average GPU latency over 100 iterations.\n\n## Usage\n\n### Running Inference\n\nThe easiest way to get started with inference is to clone this repository and use the `infer.py` script. For example, if you have street images named `city_1.png` and `city_2.png`, then you can generate segmentation labels for them with the following command.\n\n```shell\n$ python infer.py city_1.png city_2.png\n```\n\nOutput:\n```\n==> Creating PyTorch MobileV3Large model\n==> Loading images and running inference\nLoading city_1.png\nGenerated colorized_city_1.png\nGenerated composited_city_1.png\nLoading city_2.png\nGenerated colorized_city_2.png\nGenerated composited_city_2.png\n```\n\n|               Original               |              Colorized               |              Composited              |\n| :----------------------------------: | :----------------------------------: | :----------------------------------: |\n| ![](https://i.imgur.com/74vqz0q.png) | ![](https://i.imgur.com/HRr16YC.png) | ![](https://i.imgur.com/WVd5a6Z.png) |\n| ![](https://i.imgur.com/MJA7VMN.png) | ![](https://i.imgur.com/FqoxHzR.png) | ![](https://i.imgur.com/fVMvbRv.png) |\n\nTo interact with the models programmatically, first install the `fastseg` package with pip, as described above. Then, you can import and construct models in your own Python code, which are instances of PyTorch `nn.Module`.\n\n```python\nfrom fastseg import MobileV3Large, MobileV3Small\n\n# Load a pretrained segmentation model\nmodel = MobileV3Large.from_pretrained()\n\n# Load a segmentation model from a local checkpoint\nmodel = MobileV3Small.from_pretrained('path/to/weights.pt')\n\n# Create a custom model with random initialization\nmodel = MobileV3Large(num_classes=19, use_aspp=False, num_filters=256)\n```\n\nTo run inference on an image or batch of images, you can use the methods `model.predict_one()` and `model.predict()`, respectively. These methods take care of the preprocessing and output interpretation for you; they take PIL Images or NumPy arrays as input and return a NumPy array.\n\n(You can also run inference directly with `model.forward()`, which will return a tensor containing logits, but be sure to normalize the inputs to have mean 0 and variance 1.)\n\n```python\nimport torch\nfrom PIL import Image\nfrom fastseg import MobileV3Large, MobileV3Small\n\n# Construct a new model with pretrained weights, in evaluation mode\nmodel = MobileV3Large.from_pretrained().cuda()\nmodel.eval()\n\n# Run inference on an image\nimg = Image.open('city_1.png')\nlabels = model.predict_one(img) # returns a NumPy array containing integer labels\nassert labels.shape == (1024, 2048)\n\n# Run inference on a batch of images\nimg2 = Image.open('city_2.png')\nbatch_labels = model.predict([img, img2]) # returns a NumPy array containing integer labels\nassert batch_labels.shape == (2, 1024, 2048)\n\n# Run forward pass directly\ndummy_input = torch.randn(1, 3, 1024, 2048, device='cuda')\nwith torch.no_grad():\n    dummy_output = model(dummy_input)\nassert dummy_output.shape == (1, 19, 1024, 2048)\n```\n\nThe output labels can be visualized with colorized and composited images.\n\n```python\nfrom fastseg.image import colorize, blend\n\ncolorized = colorize(labels) # returns a PIL Image\ncolorized.show()\n\ncomposited = blend(img, colorized) # returns a PIL Image\ncomposited.show()\n```\n\n### Exporting to ONNX\n\nThe `onnx_export.py` script can be used to convert a pretrained segmentation model to ONNX. You should specify the image input dimensions when exporting. See the usage instructions below:\n\n```\n$ python onnx_export.py --help\nusage: onnx_export.py [-h] [--model MODEL] [--num_filters NUM_FILTERS]\n                      [--size SIZE] [--checkpoint CHECKPOINT]\n                      OUTPUT_FILENAME\n\nCommand line script to export a pretrained segmentation model to ONNX.\n\npositional arguments:\n  OUTPUT_FILENAME       filename of output model (e.g.,\n                        mobilenetv3_large.onnx)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --model MODEL, -m MODEL\n                        the model to export (default MobileV3Large)\n  --num_filters NUM_FILTERS, -F NUM_FILTERS\n                        the number of filters in the segmentation head\n                        (default 128)\n  --size SIZE, -s SIZE  the image dimensions to set as input (default\n                        1024,2048)\n  --checkpoint CHECKPOINT, -c CHECKPOINT\n                        filename of the weights checkpoint .pth file (uses\n                        pretrained by default)\n```\n\nThe `onnx_optimize.py` script optimizes exported models. If you're looking to deploy a model to TensorRT or a mobile device, you might also want to run it through [onnx-simplifier](https://github.com/daquexian/onnx-simplifier).\n\n## Training from Scratch\n\nPlease see the [ekzhang/semantic-segmentation](https://github.com/ekzhang/semantic-segmentation) repository for the training code used in this project, as well as documentation about how to train your own custom models.\n\n## Contributions\n\nPull requests are always welcome! A big thanks to Andrew Tao and Karan Sapra from [NVIDIA ADLR](https://nv-adlr.github.io/) for helpful discussions and for lending me their training code, as well as Branislav Kisacanin, without whom this wouldn't be possible.\n\nI'm grateful for advice from: Ching Hung, Eric Viscito, Franklyn Wang, Jagadeesh Sankaran, and Zoran Nikolic.\n\nLicensed under the MIT License.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ekzhang/fast-semantic-seg",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fastseg",
    "package_url": "https://pypi.org/project/fastseg/",
    "platform": "",
    "project_url": "https://pypi.org/project/fastseg/",
    "project_urls": {
      "Homepage": "https://github.com/ekzhang/fast-semantic-seg"
    },
    "release_url": "https://pypi.org/project/fastseg/0.1.2/",
    "requires_dist": [
      "geffnet (>=0.9.8)",
      "Pillow (>=7.0.0)",
      "numpy (>=1.18.0)",
      "torch (>=1.5.0)",
      "torchvision (>=0.6.0)"
    ],
    "requires_python": "",
    "summary": "Fast Semantic Segmentation for PyTorch",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8302362,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e91334a4db85b49fe381c3d8872e92027c24ac5838f6ab914d8469676abe82c5",
          "md5": "c2e245560c7612c56638662159337a2e",
          "sha256": "23d474660745ed721e057bb44b62b714c7139b0768039b035ef3d69de2163497"
        },
        "downloads": -1,
        "filename": "fastseg-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2e245560c7612c56638662159337a2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13722,
        "upload_time": "2020-08-12T00:17:08",
        "upload_time_iso_8601": "2020-08-12T00:17:08.164878Z",
        "url": "https://files.pythonhosted.org/packages/e9/13/34a4db85b49fe381c3d8872e92027c24ac5838f6ab914d8469676abe82c5/fastseg-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85a61cfb58cae708555b5064e48a9ef508b28aadb0a0677deea5e33788214d7c",
          "md5": "13f274bfc8bdc35f13f2d44427ce71bd",
          "sha256": "7249675d7d0c1b109a616f43857b4043bd49edfd2dc2d60f5d810c24a877cac7"
        },
        "downloads": -1,
        "filename": "fastseg-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "13f274bfc8bdc35f13f2d44427ce71bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14902,
        "upload_time": "2020-08-12T00:17:11",
        "upload_time_iso_8601": "2020-08-12T00:17:11.245130Z",
        "url": "https://files.pythonhosted.org/packages/85/a6/1cfb58cae708555b5064e48a9ef508b28aadb0a0677deea5e33788214d7c/fastseg-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "073ee0123065e1ed11028d0a08144b6b41c41b203cf32be9a384660812b2f3fa",
          "md5": "b288e476c3a5d1ae8248579b4ede1eec",
          "sha256": "8d5242659f85d3c8cbb5ded39642a4f4dadec5adff3f7d2eed0f8fbbe73e38fc"
        },
        "downloads": -1,
        "filename": "fastseg-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b288e476c3a5d1ae8248579b4ede1eec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13848,
        "upload_time": "2020-08-12T16:45:19",
        "upload_time_iso_8601": "2020-08-12T16:45:19.076925Z",
        "url": "https://files.pythonhosted.org/packages/07/3e/e0123065e1ed11028d0a08144b6b41c41b203cf32be9a384660812b2f3fa/fastseg-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34477f9743d27640151fcf3a3a30f3c4968368ffef240c3dd588838ac5d90532",
          "md5": "899da1744aa49d59c67bc01e1f22e888",
          "sha256": "ce69fbca3d70b174e6707f80cda4c0ebf99df649d84dea5bc4a2acab227b19b6"
        },
        "downloads": -1,
        "filename": "fastseg-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "899da1744aa49d59c67bc01e1f22e888",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15175,
        "upload_time": "2020-08-12T16:45:24",
        "upload_time_iso_8601": "2020-08-12T16:45:24.547721Z",
        "url": "https://files.pythonhosted.org/packages/34/47/7f9743d27640151fcf3a3a30f3c4968368ffef240c3dd588838ac5d90532/fastseg-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32773ade99309f2ee5d1ecba8174c4399ef0acc052b35af8d16060051c20c106",
          "md5": "042f89283f879055e14ad170a724ef01",
          "sha256": "e269fe8b3ef2458e5405745b286a0acef43d45fd64a242ea2c91daf951079639"
        },
        "downloads": -1,
        "filename": "fastseg-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "042f89283f879055e14ad170a724ef01",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13952,
        "upload_time": "2020-09-29T22:53:37",
        "upload_time_iso_8601": "2020-09-29T22:53:37.293810Z",
        "url": "https://files.pythonhosted.org/packages/32/77/3ade99309f2ee5d1ecba8174c4399ef0acc052b35af8d16060051c20c106/fastseg-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b71ac875dfa5fc09a0a955dc8b974acd957d9424a8c9b8d714ea722268a656a",
          "md5": "66b9af1e100d03d59a334a12d7d1feeb",
          "sha256": "3e934203ce652da404d8b8b673c63c95dfc14d2958beecfec04d4c9191f1fa8a"
        },
        "downloads": -1,
        "filename": "fastseg-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "66b9af1e100d03d59a334a12d7d1feeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16001,
        "upload_time": "2020-09-29T22:53:42",
        "upload_time_iso_8601": "2020-09-29T22:53:42.860810Z",
        "url": "https://files.pythonhosted.org/packages/7b/71/ac875dfa5fc09a0a955dc8b974acd957d9424a8c9b8d714ea722268a656a/fastseg-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32773ade99309f2ee5d1ecba8174c4399ef0acc052b35af8d16060051c20c106",
        "md5": "042f89283f879055e14ad170a724ef01",
        "sha256": "e269fe8b3ef2458e5405745b286a0acef43d45fd64a242ea2c91daf951079639"
      },
      "downloads": -1,
      "filename": "fastseg-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "042f89283f879055e14ad170a724ef01",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13952,
      "upload_time": "2020-09-29T22:53:37",
      "upload_time_iso_8601": "2020-09-29T22:53:37.293810Z",
      "url": "https://files.pythonhosted.org/packages/32/77/3ade99309f2ee5d1ecba8174c4399ef0acc052b35af8d16060051c20c106/fastseg-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b71ac875dfa5fc09a0a955dc8b974acd957d9424a8c9b8d714ea722268a656a",
        "md5": "66b9af1e100d03d59a334a12d7d1feeb",
        "sha256": "3e934203ce652da404d8b8b673c63c95dfc14d2958beecfec04d4c9191f1fa8a"
      },
      "downloads": -1,
      "filename": "fastseg-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "66b9af1e100d03d59a334a12d7d1feeb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16001,
      "upload_time": "2020-09-29T22:53:42",
      "upload_time_iso_8601": "2020-09-29T22:53:42.860810Z",
      "url": "https://files.pythonhosted.org/packages/7b/71/ac875dfa5fc09a0a955dc8b974acd957d9424a8c9b8d714ea722268a656a/fastseg-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}