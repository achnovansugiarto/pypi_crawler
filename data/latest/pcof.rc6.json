{
  "info": {
    "author": "Thobias Salazar Trevisan",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Terminals",
      "Topic :: Utilities"
    ],
    "description": "# pcof - Python Collection Of Functions\n\n![Build Status](https://github.com/thobiast/pcof/workflows/build/badge.svg)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pcof)\n![PyPI](https://img.shields.io/pypi/v/pcof)\n[![codecov](https://codecov.io/gh/thobiast/pcof/branch/master/graph/badge.svg)](https://codecov.io/gh/thobiast/pcof)\n[![GitHub License](https://img.shields.io/github/license/thobiast/pcof)](https://github.com/thobiast/pcof/blob/master/LICENSE)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\npcof is a collection of small useful functions.\n\n## Installation\n\n```bash\npip install pcof\n```\n\nMost of the functions do not have any external dependencies.\nIf your script does not use any pcof function with dependencies, then you can\ninstall pcof and ignore its dependencies.\n\n```bash\npip install --no-deps pcof\n```\n\n## Usage Example\n\n```python\n>>> from pcof import bytesconv\n\n>>> bytesconv.bytes2human(88191837473)\n('82.14', 'GB')\n>>> bytesconv.bytes2human(88191837473, unit='MB')\n('84106.29', 'MB')\n>>> bytesconv.bytes2human(88191837473, unit='MB', precision=0)\n('84106', 'MB')\n\n>>> bytesconv.human2bytes(100, 'GB')\n'107374182400.00'\n>>> bytesconv.human2bytes(100, 'GB', base=1000)\n'100000000000.00'\n\n>>> bytesconv.bandwidth_converter(100, from_unit=\"Mbps\", to_unit=\"MB\")\n(12.5, 'MB/seconds')\n>>> bytesconv.bandwidth_converter(10, from_unit=\"Gbps\", from_time=\"seconds\", to_unit=\"GB\", to_time=\"minutes\")\n(75.0, 'GB/minutes')\n>>> bytesconv.bandwidth_converter(6, from_unit=\"GB\", from_time=\"hours\", to_unit=\"Mbps\", to_time=\"seconds\")\n(13.333333333333334, 'Mbps/seconds')\n\n>>> from pcof import datetimefunc\n\n>>> datetimefunc.epoch_time_now()\n1591041372\n>>> datetimefunc.epoch_time_min_ago(60)\n1591037781\n>>> datetimefunc.epoch_time_hours_ago(12)\n1590998197\n>>> datetimefunc.epoch_time_days_ago(30)\n1588449403\n\n>>> datetimefunc.epoch_time_to_human(1590175926)\n'Fri May 22 16:32:06 2020'\n>>> datetimefunc.epoch_time_to_human(1590175926, utc='yes', date_format='%m/%d/%Y %H:%M:%S')\n'05/22/2020 19:32:06'\n\n>>> datetimefunc.seconds_to_human(300)\n'5 Minutes'\n>>> datetimefunc.seconds_to_human(310)\n'5 Minutes, 10 Seconds'\n>>> datetimefunc.seconds_to_human(8481083)\n'3 Months, 8 Days, 3 Hours, 51 Minutes, 23 Seconds'\n\n>>> datetimefunc.time_unit_conversion(90, from_unit=\"days\", to_unit=\"months\")\n'3'\n\n>>> from pcof.pct import x_pct_of_number\n>>> x_pct_of_number(40, 200) # 40% of 200\n'80.00'\n\n>>> from pcof import printtable\n>>> header = [\"col1\", \"col2\"]\n>>> rows = [ [\"line1_col1\", \"line1_col2\"], [\"line2_col1\", \"line2_col2\"] ]\n>>> pcof.print_table(header, rows)\n    +------------+------------+\n    |    col1    |    col2    |\n    +------------+------------+\n    | line1_col1 | line1_col2 |\n    | line2_col1 | line2_col2 |\n    +------------+------------+\n\n>>> from pcof import misc\n>>> misc.checksum_file(\"tests/file_checksum.txt\")\n'f133e784590eae8c07dac9295ae50344731090dbfc848c1d77d0af4a79a56f21'\n>>> misc.checksum_file(\"tests/file_checksum.txt\", algorithm='md5')\n'f978067032b567b197cef53a4d463a89'\n\n>>> import time\n>>> from pcof import decorators\n>>> @decorators.time_elapsed(print_info=True)\n... def myfunc():\n...    time.sleep(1)\n...\n>>> myfunc()\nDecorator time_elapsed: myfunc args: () kwargs: {} -  elapsed time 1.0012 seconds. This function all execution elapsed time: 1.0012 seconds\n>>> myfunc()\nDecorator time_elapsed: myfunc args: () kwargs: {} -  elapsed time 1.0011 seconds. This function all execution elapsed time: 2.0023 seconds\n\n>>> from pcof.downloadfile import download_file\n>>> download_file(\"http://google.com/favicon.ico\", \"/tmp/google.ico\")\n```\n\n## List of available functions\n\n### Functions\n\n| Module | Name | Description | Dependencies |\n|:-------|:-----|:------------|:-------------|\n| misc | msg |  Print colored text. | - |\n| misc | send_email |  Send an email using smtplib module. | - |\n| misc | setup_logging |  Configure logging. | - |\n| misc | nested_dict |  Return a nested dictionary (arbitrary number of levels). | - |\n| misc | find_key |  Return a value for a key in a dictionary. | - |\n| misc | return_dict_value |  Return a value from a dictionary. | - |\n| misc | run_cmd |  Execute a command on the operating system. | - |\n| misc | checksum_file |  Return checksums (hash) of a file. | - |\n| bytesconv | bytes2human |  Convert number in bytes to human format. | - |\n| bytesconv | human2bytes |  Convert size from human to bytes. | - |\n| bytesconv | bandwidth_converter |  Bandwidth Calculator. | - |\n| datetimefunc | epoch_time_to_human |  Convert a unix epoch time to human format. | - |\n| datetimefunc | epoch_time_now |  Return current date and time in unix epoch time format. | - |\n| datetimefunc | epoch_time_min_ago |  Return current date and time less x minutes in unix epoch time format. | - |\n| datetimefunc | epoch_time_hours_ago |  Return current date and time with less x hours in unix epoch time format. | - |\n| datetimefunc | epoch_time_days_ago |  Return current date and time with less x days in unix epoch time format. | - |\n| datetimefunc | time_unit_conversion |  Convert number from a time unit to another time unit. | - |\n| datetimefunc | seconds_to_human |  Convert number in seconds to human format. | - |\n| pct | y_what_pct_of_x |  Calculate the percentage of number1 to number2. | - |\n| pct | x_pct_of_number |  Calculate what is the x% of a number. | - |\n| pct | pct_change_from_x_to_y |  Calculate percent increase/decrease from number1 to number2. | - |\n| printtable | print_table |  Print table using module prettytable. | prettytable |\n| pytz | convert_datetime_to_tz |  Convert a date to a specific timezone. | pytz |\n| downloadfile | download_file |  Download a file. | requests |\n\n### Decorators\n\n| Module | Name | Description | Dependencies |\n|:-------|:-----|:------------|:-------------|\n| decorators | num_calls |  Count the number of times a function is called. | - |\n| decorators | time_elapsed |  Calculate elapsed time in seconds. | - |\n| decorators | debug |  Show function parameters and return values. | - |\n| decorators | retry_on_exception |  Retry function execution if exception raises. | - |\n\n## Documentation (automatically generated using pydoc)\n\n```\nHelp on module misc:\n\nNAME\n    misc - Python Collection Of Functions.\n\nDESCRIPTION\n    Package with collection of small useful functions.\n\n    Miscellaneous functions\n\nFUNCTIONS\n```\n\n```python\n    checksum_file(filename, *, algorithm='sha256', block_size=1048576)\n        Return checksums (hash) of a file.\n\n        Arguments:\n            filename           (str): file to check hash\n\n        Keyword arguments (opt):\n            algorithm          (str): algorithm used to calculate hash.\n                                      default: sha256\n            block_size         (int): chunk size to read the file (bytes)\n\n        return:\n            hex-encoded string\n\n        Example:\n        >>> checksum_file(\"my_file\") # doctest: +SKIP\n        '179b8c9510b2f068b94286c86610c6fe633ca44b5e541837ae9461bbdace7191'\n        >>> checksum_file(\"my_file\", algorithm=\"md5\") # doctest: +SKIP\n        'bdc28791ea81bafa7601e98f68b692e5'\n\n    find_key(dict_obj, key)\n        Return a value for a key in a dictionary.\n\n        Function to loop over a dictionary and search for an specific key\n        It supports nested dictionary\n\n        Arguments:\n            dict_obj    (obj): A list or a dictionary\n            key         (str): dictionary key\n\n        Return:\n            (list)           : a list with values that matches the key\n\n        Example:\n        >>> x = {\"A1\": \"A\", \"B1\": { \"A2\": \"AA\"} }\n        >>> find_key(x, \"A1\")\n        ['A']\n        >>> find_key(x, \"A2\")\n        ['AA']\n        >>> find_key(x, \"YY\")\n        []\n        >>> x = {\"A1\": \"A\", \"B1\": { \"A1\": \"AA\"} }\n        >>> find_key(x, \"A1\")\n        ['A', 'AA']\n\n    msg(color, msg_text, exitcode=0, *, end='\\n', flush=True, output=None)\n        Print colored text.\n\n        Arguments:\n            color          (str): color name (blue, red, green, yellow,\n                                  cyan or nocolor)\n            msg_text       (str): text to be printed\n            exitcode  (int, opt): Optional parameter. If exitcode is different\n                                  from zero, it terminates the script, i.e,\n                                  it calls sys.exit with the exitcode informed\n\n        Keyword arguments (optional):\n            end            (str): string appended after the last char in \"msg_text\"\n                                  default a newline\n            flush   (True/False): whether to forcibly flush the stream.\n                                  default True\n            output      (stream): a file-like object (stream).\n                                  default sys.stdout\n\n        Example:\n            msg(\"blue\", \"nice text in blue\")\n            msg(\"red\", \"Error in my script. terminating\", 1)\n\n    nested_dict()\n        Return a nested dictionary (arbitrary number of levels).\n\n        Example:\n        >>> mydict = nested_dict()\n        >>> mydict['a1']['b1']['c1'] = 'test_1'\n        >>> mydict['a1']['b2'] = 'test_2'\n        >>> mydict['a1']['b3'] = 'test_3'\n        >>> mydict.keys()\n        dict_keys(['a1'])\n        >>> mydict['a1'].keys()\n        dict_keys(['b1', 'b2', 'b3'])\n        >>> mydict['a1']['b1'].keys()\n        dict_keys(['c1'])\n        >>> mydict['a1']['b1']['c1']\n        'test_1'\n        >>> mydict['a1']['b2']\n        'test_2'\n        >>> print(mydict) # doctest: +SKIP\n        defaultdict(<function nested_dict at 0x7f0239f4aee0>,\n            {'a1': defaultdict(<function nested_dict at 0x7f0239f4aee0>,\n            {'b1': defaultdict(<function nested_dict at 0x7f0239f4aee0>,\n                {'c1': 'test_1'}),\n            'b2': 'test_2',\n            'b3': 'test_3'})})\n\n    return_dict_value(dictionary, keys, *, ignore_key_error=False)\n        Return a value from a dictionary.\n\n        Recursively iterate over a dictionary and return value\n        for the key. Key must be a list. Each element of the list refers\n        to the level of the dicionary\n\n        It helps to reduce number of code lines when we need to perform may\n        try: except: to catch KeyErrors\n\n        Arguments:\n           dictionary              (dict): Dictionary\n           keys                    (list): List with key(s)\n           ignore_key_error  (True/False): Ignore key not found errors:\n                                             True  - return '' if key not found\n                                             False - raise exception\n                                           default: False\n\n        Example:\n        >>> mydic = { 'a': 'value_a',\n        ...           'b': {\n        ...                  'b1': 'value_b1',\n        ...                  'b2': 'value_b2'\n        ...                },\n        ...           'c': {\n        ...                  'c1': {\n        ...                          'c11': 'value_c11',\n        ...                          'c12': 'value_c12'\n        ...                         }\n        ...                },\n        ...          }\n        >>> return_dict_value(mydic, ['a'])\n        'value_a'\n        >>> return_dict_value(mydic, ['b'])\n        {'b1': 'value_b1', 'b2': 'value_b2'}\n        >>> return_dict_value(mydic, ['b', 'b1'])\n        'value_b1'\n        >>> return_dict_value(mydic, ['c', 'c1', 'c12'])\n        'value_c12'\n        >>> return_dict_value(mydic, ['c', 'c1', 'c13'])\n        Traceback (most recent call last):\n        ...\n        KeyError: 'c13'\n        >>> return_dict_value(mydic, ['c', 'c1', 'c13'], ignore_key_error=True)\n        ''\n        >>> return_dict_value(mydic, ['x'], ignore_key_error=True)\n        ''\n\n    run_cmd(cmd)\n        Execute a command on the operating system.\n\n        Arguments:\n            cmd    (str): the command to be executed\n\n        Return:\n            - If command complete with return code zero\n            return: command_return_code, stdout\n\n            - If command completes with return code different from zero\n            return: command_return_code, stderr\n\n\n        Example:\n        >>> run_cmd(\"echo test\")\n        (0, 'test\\n')\n        >>> run_cmd(\"cmd_does_not_exist\") # doctest:+ELLIPSIS\n        (127, '...cmd_does_not_exist:...not found\\n')\n\n    send_email(mail_from, mail_to, subject, body, mailserver='localhost')\n        Send an email using smtplib module.\n\n        Arguments:\n            mail_from        (str): send email from this address\n            mail_to          (str): send email to this address\n            subject          (str): mail subject\n            mail_server (str, opt): mail server address. Default is localhost\n\n    setup_logging(logfile=None, *, filemode='a', date_format=None, log_level='DEBUG')\n        Configure logging.\n\n        Arguments (opt):\n            logfile     (str): log file to write the log messages\n                                   If not specified, it shows log messages\n                                   on screen (stderr)\n        Keyword arguments (opt):\n            filemode    (a/w): a - log messages are appended to the file (default)\n                               w - log messages overwrite the file\n            date_format (str): date format in strftime format\n                               default is %m/%d/%Y %H:%M:%S\n            log_level   (str): specifies the lowest-severity log message\n                               DEBUG, INFO, WARNING, ERROR or CRITICAL\n                               default is DEBUG\n\n```\n```\nHelp on module bytesconv:\n\nNAME\n    bytesconv - Python Collection Of Functions.\n\nDESCRIPTION\n    Package with collection of small useful functions.\n\n    Bytes calculator\n\nFUNCTIONS\n```\n\n```python\n    bandwidth_converter(number, *, from_unit, to_unit, from_time='seconds', to_time='seconds')\n        Bandwidth Calculator.\n\n        Convert data rate from one unit to another.\n\n        Arguments:\n            number     (int): number to be converted\n\n        Keyword arguments:\n            from_unit  (str): convert from this data unit. Example:\n                              (bps, Kbps, Mbps, Gbps... KB, KiB, MB, MiB...)\n            to_unit    (str): convert to this data unit. Example:\n                              (bps, Kbps, Mbps, Gbps... KB, KiB, MB, MiB...)\n\n        Keyword arguments (opt):\n            from_time  (str): Specify the time frame used in from_unit\n                              (seconds, minutes, hours, days, months)\n                              default: seconds\n            to_time    (str): Specify the time frame used in to_unit\n                              (seconds, minutes, hours, days, months)\n                              default: seconds\n\n        bps, Kbps, Mbps, Gbps... = decimal base = 1000^n\n        KB, MB, GB, TB...        = decimal base = 1000^n\n        KiB, MiB, GiB, TiB...    = binary base  = 1024^n\n\n        References:\n            - https://en.wikipedia.org/wiki/Units_of_information\n            - https://physics.nist.gov/cuu/Units/binary.html\n\n        Returns: tuple\n           (number_converted, to_unit/to_time)\n\n        Example:\n        >>> bandwidth_converter(100, from_unit=\"Mbps\", to_unit=\"MB\")\n        (12.5, 'MB/seconds')\n        >>> bandwidth_converter(100, from_unit=\"Mbps\", to_unit=\"GB\", to_time=\"hours\")\n        (45.0, 'GB/hours')\n        >>> bandwidth_converter(1, from_unit=\"Gbps\", to_unit=\"MB\")\n        (125.0, 'MB/seconds')\n        >>> bandwidth_converter(10, from_unit=\"Gbps\", to_unit=\"GB\")\n        (1.25, 'GB/seconds')\n        >>> bandwidth_converter(10, from_unit=\"Gbps\", to_unit=\"TB\", to_time=\"hours\")\n        (4.5, 'TB/hours')\n        >>> bandwidth_converter(10, from_unit=\"GB\", to_unit=\"Gbps\")\n        (80.0, 'Gbps/seconds')\n        >>> Convert 2.25 GB per hours to Mbps # doctest: +SKIP\n        >>> bandwidth_converter(2.25, from_unit=\"GB\", from_time=\"hours\", to_unit=\"Mbps\", to_time=\"seconds\") # noqa\n        (5.0, 'Mbps/seconds')\n\n    bytes2human(size, *, unit='', precision=2, base=1024)\n        Convert number in bytes to human format.\n\n        Arguments:\n            size       (int): bytes to be converted\n\n        Keyword arguments (opt):\n            unit       (str): If it will convert bytes to a specific unit\n                              'KB', 'MB', 'GB', 'TB', 'PB', 'EB'\n            precision  (int): number of digits after the decimal point\n            base       (int): 1000 - for decimal base\n                              1024 - for binary base (it is the default)\n\n        Returns:\n            (int): number\n            (str): unit ('Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB']\n\n        Example:\n        >>> bytes2human(10)\n        ('10.00', 'Bytes')\n        >>> bytes2human(2048)\n        ('2.00', 'KB')\n        >>> bytes2human(27273042329)\n        ('25.40', 'GB')\n        >>> bytes2human(27273042329, precision=1)\n        ('25.4', 'GB')\n        >>> bytes2human(27273042329, unit='MB')\n        ('26009.60', 'MB')\n\n    human2bytes(size, unit, *, precision=2, base=1024)\n        Convert size from human to bytes.\n\n        Arguments:\n            size       (int): number\n            unit       (str): converts from this unit to bytes\n                              'KB', 'MB', 'GB', 'TB', 'PB', 'EB'\n\n        Keyword arguments (opt):\n            precision  (int): number of digits after the decimal point\n                              default is 2\n            base       (int): 1000 - for decimal base\n                              1024 - for binary base (it is the default)\n\n        Returns:\n            (int) number in bytes\n\n        Example:\n        >>> human2bytes(10, 'GB')\n        '10737418240.00'\n        >>> human2bytes(10, 'GB', precision=0)\n        '10737418240'\n        >>> human2bytes(10, 'PB')\n        '11258999068426240.00'\n\n```\n```\nHelp on module datetimefunc:\n\nNAME\n    datetimefunc - Python Collection Of Functions.\n\nDESCRIPTION\n    Package with collection of small useful functions.\n\n    Date and time functions\n\nFUNCTIONS\n```\n\n```python\n    epoch_time_days_ago(days=1, *, utc='no')\n        Return current date and time with less x days in unix epoch time format.\n\n        Unix epoch time -  number of seconds that have elapsed since\n                           00:00:00 Coordinated Universal Time (UTC),\n                           1 January 1970\n\n        Arguments (opt):\n            days         (int): Number of days ago to return unix timestamp\n                                default is 1 day\n\n        Keyword arguments (opt):\n            utc       (yes/no): If unix epoch time in UTC timezone\n                                default is no\n        Example:\n        >>> epoch_time_days_ago() # doctest: +SKIP\n        1530239517\n        >>> epoch_time_days_ago(7) # doctest: +SKIP\n        1529721118\n\n    epoch_time_hours_ago(hours=1, *, utc='no')\n        Return current date and time with less x hours in unix epoch time format.\n\n        Unix epoch time -  number of seconds that have elapsed since\n                           00:00:00 Coordinated Universal Time (UTC),\n                           1 January 1970\n\n        Arguments (opt):\n            hours        (int): Number of hours ago to return unix timestamp\n                                default is 1 hour\n\n        Keyword arguments (opt):\n            utc       (yes/no): If unix epoch time in UTC timezone\n                                default is no\n        Example:\n        >>> epoch_time_hours_ago() # doctest: +SKIP\n        1530322279\n        >>> epoch_time_hours_ago(8) # doctest: +SKIP\n        1530297083\n\n    epoch_time_min_ago(minutes=5, *, utc='no')\n        Return current date and time less x minutes in unix epoch time format.\n\n        Unix epoch time -  number of seconds that have elapsed since\n                           00:00:00 Coordinated Universal Time (UTC),\n                           1 January 1970\n\n        Arguments (opt):\n            minutes        (int): Number of minutes ago to return unix timestamp\n                            default is 5 minutes\n\n        Keyword arguments (opt):\n            utc         (yes/no): If unix epoch time in UTC timezone\n                                  default is no\n        Example:\n        >>> epoch_time_min_ago() # doctest: +SKIP\n        1530325377\n        >>> epoch_time_min_ago(30) # doctest: +SKIP\n        1530323879\n\n    epoch_time_now(*, utc='no')\n        Return current date and time in unix epoch time format.\n\n        Unix epoch time -  number of seconds that have elapsed since\n                           00:00:00 Coordinated Universal Time (UTC),\n                           1 January 1970\n\n        Arguments:\n            utc         (yes/no): If returns unix epoch time in UTC timezone\n                                  default is no\n        Example:\n        >>> epoch_time_now() # doctest: +SKIP\n        1530325275\n\n    epoch_time_to_human(epoch, *, date_format='%c', utc='no')\n        Convert a unix epoch time to human format.\n\n        Unix epoch time -  number of seconds that have elapsed since\n                           00:00:00 Coordinated Universal Time (UTC),\n                           1 January 1970\n\n        Arguments:\n            epoch          (int): unix epoch time (timestamp)\n\n        Keyword arguments (opt):\n            date_format    (str): strftime format to show the epoch time\n                                  default is '%c' (Locale’s appropriate\n                                  date and time representation)\n            utc         (yes/no): If unix epoch time in UTC timezone\n                                  default is no\n\n        Example:\n        >>> epoch_time_to_human(1530324373,date_format='%m%d%Y %H:%M:%S',utc='yes')\n        '06302018 02:06:13'\n        >>> epoch_time_to_human(1530324373) # doctest: +SKIP\n        'Fri Jun 29 23:06:13 2018'\n        >>> epoch_time_to_human(1530324373, utc='yes') # doctest: +SKIP\n        'Sat Jun 30 02:06:13 2018'\n\n    seconds_to_human(seconds, *, unit=None)\n        Convert number in seconds to human format.\n\n        Arguments:\n            seconds      (int): Number of seconds\n\n        Keyword arguments (opt):\n            unit         (Months/Days/Hours/Minutes/Seconds):\n                                Max unit used to convert\n\n        Example:\n        >>> seconds_to_human(300)\n        '5 Minutes'\n        >>> seconds_to_human(310)\n        '5 Minutes, 10 Seconds'\n        >>> seconds_to_human(10810)\n        '3 Hours, 10 Seconds'\n        >>> seconds_to_human(10810, unit='Minutes')\n        '180 Minutes, 10 Seconds'\n        >>> seconds_to_human(180072)\n        '2 Days, 2 Hours, 1 Minutes, 12 Seconds'\n        >>> seconds_to_human(5191272)\n        '2 Months, 2 Hours, 1 Minutes, 12 Seconds'\n\n    time_unit_conversion(number, *, from_unit, to_unit, precision=0, days_month=30, days_year=365)\n        Convert number from a time unit to another time unit.\n\n        Arguments:\n            number             (int): number to convert\n\n        Keyword arguments:\n            from_unit    (seconds/minutes/hours/days/weeks/months/years):\n                                      unit to convert from\n            to_unit      (seconds/minutes/hours/days/weeks/months/years):\n                                      unit to convert to\n\n        Keyword arguments (opt):\n            precision          (int): number of digits after the decimal point\n                                      (default 0)\n            days_month   (int/float): number of days in each month\n                                      (default 30)\n            days_year    (int/float): number of days in each year\n                                      (default 365)\n\n        Return:\n            number converted to new unit\n\n        Example:\n        >>> time_unit_conversion(3600, from_unit=\"seconds\", to_unit=\"hours\")\n        '1'\n        >>> time_unit_conversion(1400, from_unit=\"minutes\", to_unit=\"days\")\n        '1'\n        >>> time_unit_conversion(36, from_unit=\"hours\", to_unit=\"days\", precision=1)\n        '1.5'\n        >>> time_unit_conversion(90, from_unit=\"days\", to_unit=\"months\")\n        '3'\n\n```\n```\nHelp on module pct:\n\nNAME\n    pct - Python Collection Of Functions.\n\nDESCRIPTION\n    Package with collection of small useful functions.\n\n    Percentage Calculator\n\nFUNCTIONS\n```\n\n```python\n    pct_change_from_x_to_y(number1, number2, *, precision='2')\n        Calculate percent increase/decrease from number1 to number2.\n\n        Arguments:\n            number1    (int): start value (from)\n            number2    (int): end value (to)\n\n        Keyword arguments (opt):\n            precision  (int): number of digits after the decimal point\n                              default is 2\n\n        Returns:\n            (str):  number\n\n        Example:\n        >>> pct_change_from_x_to_y(100, 110)  # what is the pct increase from 100 to 110?\n        '10.00%'\n        >>> pct_change_from_x_to_y(100, 90)   # what is the pct from 100 to 90?\n        '-10.00%'\n        >>> pct_change_from_x_to_y(25, 50, precision=0)\n        '100%'\n\n    x_pct_of_number(pct, number, *, precision='2')\n        Calculate what is the x% of a number.\n\n        Arguments:\n            pct        (int): percentage\n            number     (int): number\n\n        Keyword arguments (opt):\n            precision  (int): number of digits after the decimal point\n                              default is 2\n\n        Returns:\n            (str):  number\n\n        Example:\n        >>> x_pct_of_number(33.333, 90)     # what is 33.333% of 90?\n        '30.00'\n        >>> x_pct_of_number(40, 200)        # what is 40% of 200?\n        '80.00'\n        >>> x_pct_of_number(40.9, 200)      # what is 40.9% of 200?\n        '81.80'\n        >>> x_pct_of_number(40.9, 200, precision=4)\n        '81.8000'\n        >>> x_pct_of_number(40.9, 200, precision=0)\n        '82'\n\n    y_what_pct_of_x(number1, number2, *, precision='2')\n        Calculate the percentage of number1 to number2.\n\n        Number1 is what percent of number2.\n\n        Arguments:\n            number1     (int): number\n            number2     (int): number\n\n        Keyword arguments (opt):\n            precision   (int): number of digits after the decimal point\n                               default is 2\n\n        Returns:\n            (str):  Pct value\n\n        Example:\n        >>> y_what_pct_of_x(30, 90)    # 30 is what percent of 90?\n        '33.33%'\n        >>> y_what_pct_of_x(30, 90, precision=0)\n        '33%'\n        >>> y_what_pct_of_x(30, 90, precision=4)\n        '33.3333%'\n        >>> y_what_pct_of_x(10, 50, precision=0) # 10 is what percent of 50?\n        '20%'\n\n```\n```\nHelp on module printtable:\n\nNAME\n    printtable - Python Collection Of Functions.\n\nDESCRIPTION\n    Package with collection of small useful functions.\n\n    Dependencies: prettytable\n\nFUNCTIONS\n```\n\n```python\n    print_table(header, rows, *, sortby='', alignl='', alignr='', hrules='')\n        Print table using module prettytable.\n\n        Arguments:\n            header     (list): List with table header\n            rows       (list): Nested list with table rows\n                               [ [row1], [row2], [row3], ... ]\n\n        Keyword arguments (optional):\n            sortby      (str): header name to sort the output\n            alignl     (list): headers name to align to left\n            alignr     (list): headers name to align to right\n            hrules      (str): Controls printing of horizontal rules after rows.\n                               Allowed values: FRAME, HEADER, ALL, NONE\n\n        Example:\n        >>> header = [\"col1\", \"col2\"]\n        >>> rows = [ [\"line1_col1\", \"line1_col2\"], [\"line2_col1\", \"line2_col2\"] ]\n        >>> print_table(header, rows)\n        +------------+------------+\n        |    col1    |    col2    |\n        +------------+------------+\n        | line1_col1 | line1_col2 |\n        | line2_col1 | line2_col2 |\n        +------------+------------+\n\n```\n```\nHelp on module pytz:\n\nNAME\n    pytz - Python Collection Of Functions.\n\nDESCRIPTION\n    Package with collection of small useful functions.\n\n    Dependencies: pytz\n\nFUNCTIONS\n```\n\n```python\n    convert_datetime_to_tz(*, date, date_fmt, from_tz='UTC', to_tz='America/Sao_Paulo')\n        Convert a date to a specific timezone.\n\n        Keyword arguments:\n\n            date           (str): date to convert\n            date_fmt       (str): format of the date to convert\n            from_tz   (timezone): source timezone name (default: UTC)\n            to_tz     (timezone): target timezone name (default: America/Sao_Paulo)\n\n        Returns:\n            datetime object with the target timezone defined.\n\n        Example:\n        # convert a date from utc to America/Sao_Paulo\n        >>> convert_datetime_to_tz(date='2019-04-26T10:38:05Z', # doctest: +SKIP\n                                   date_fmt=\"%Y-%m-%dT%H:%M:%SZ\")\n        datetime.datetime(2019, 4, 26, 7, 38, 5,\n                          tzinfo=<DstTzInfo 'America/Sao_Paulo' -03-1 day,\n                          21:00:00 STD>)\n\n        # convert date from America/Sao_Paulo to America/Los_Angeles\n        >>> convert_datetime_to_tz(date='2019-04-26T10:38:05Z', # doctest: +SKIP\n                                   date_fmt=\"%Y-%m-%dT%H:%M:%SZ\",\n                                   from_tz=\"America/Sao_Paulo\",\n                                   to_tz=\"America/Los_Angeles\")\n        datetime.datetime(2019, 4, 26, 6, 38, 5, # doctest: +SKIP\n                          tzinfo=<DstTzInfo 'America/Los_Angeles' PDT-1 day,\n                          17:00:00 DST>)\n\n        # Convert date from America/New_York to Asia/Dubai\n        >>> convert_datetime_to_tz(date='2019-04-26T10:38:05Z', # doctest: +SKIP\n                                   date_fmt=\"%Y-%m-%dT%H:%M:%SZ\",\n                                   from_tz=\"America/New_York\",\n                                   to_tz=\"Asia/Dubai\")\n        datetime.datetime(2019, 4, 26, 18, 38, 5,\n                          tzinfo=<DstTzInfo 'Asia/Dubai' +04+4:00:00 STD>)\n\n```\n```\nHelp on module downloadfile:\n\nNAME\n    downloadfile - Python Collection Of Functions.\n\nDESCRIPTION\n    Package with collection of small useful functions.\n\n    Dependencies: requests\n\nFUNCTIONS\n```\n\n```python\n    download_file(url, local_file, *, allow_redirects=True, decode=True)\n        Download a file.\n\n        Arguments:\n            url                    (str): URL to download\n            local_file             (str): Local filename to store the downloaded\n                                          file\n\n        Keyword arguments (opt):\n            allow_redirects (True/False): Allow request to redirect url\n                                          default: True\n            decode          (True/False): Decode compressed responses like gzip\n                                          default: True\n\n        Return:\n            Request response headers\n\n        Example:\n        >>> download_file(\"http://google.com/favicon.ico\", # doctest: +SKIP\n                          \"/tmp/google.ico\")\n\n```\n\n```\nHelp on module decorators:\n\nNAME\n    decorators - Python Collection Of Functions.\n\nDESCRIPTION\n    Package with collection of small useful functions.\n\n    Decorators functions\n\nFUNCTIONS\n```\n\n```python\n    debug(_func=None, *, loglevel='DEBUG', print_info=False)\n        Show function parameters and return values.\n\n        Decorator keyword arguments (optional):\n            loglevel          (str):  log level used to show debug information.\n                                      (default DEBUG)\n            print_info (True/False):  print debug information.\n                                      (default False)\n\n        Example:\n        @debug\n        def my_func():\n            print(\"my func\")\n            return True\n\n        @debug(print_info=True)\n        def my_other_func(my_param):\n            print(\"my other func\")\n\n    num_calls(_func=None, *, loglevel='DEBUG', print_info=False)\n        Count the number of times a function is called.\n\n        Decorator keyword arguments (optional):\n            loglevel          (str):  log level used to show the number of\n                                      calls information. (default DEBUG)\n            print_info (True/False):  print function number of call information\n                                      (default False)\n\n        Example:\n        @num_calls\n        def my_func():\n            print(\"my func\")\n\n        @num_calls(print_info=True)\n        def my_other_func():\n            print(\"my other func\")\n\n    retry_on_exception(_func=None, *, exception=(<class 'Exception'>,), loglevel='DEBUG', max_retry=5, sleep_retry=1, exception_error=None)\n        Retry function execution if exception raises.\n\n        Decorator keyword arguments (optional):\n            exception            (tuple): Tuple with exceptions that decorator will retry\n                                          function's execution\n                                          (default any exception)\n            loglevel               (str): Log level used to show debug information.\n                                          (default DEBUG)\n            max_retry              (int): Max number of retries. -1 to retry forever\n                                          (default 5)\n            sleep_retry            (int): Time in seconds to wait between retries\n                                          (default 1)\n            exception_error  (exception): Exception that decorator will raise if\n                                          max_retry is reached without success\n                                          (default the same exception function raises)\n\n        Example:\n        # Retry function if any exception raise\n        @retry_on_exception\n        def my_func():\n            print(\"my func\")\n            raise (TimeoutError)\n\n        # Retry only with exceptions: TimeoutErrorr, IndexError and Retry max of 10 times\n        @retry_on_exception(exception=(TimeoutError, IndexError), max_retry=10)\n        def my_other_func(my_param):\n            print(\"my other func\")\n\n    time_elapsed(_func=None, *, loglevel='DEBUG', print_info=False)\n        Calculate elapsed time in seconds.\n\n        Decorator keyword arguments (optional):\n            loglevel          (str):  log level used to show elapsed time\n                                      (default DEBUG)\n            print_info (True/False):  print elapsed time (default False)\n\n        Example:\n        @time_elapsed\n        def my_func():\n            print(\"my func\")\n\n        @time_elapsed(print_info=True)\n        def my_other_func():\n            print(\"my other func\")\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thobiast/pcof",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pcof",
    "package_url": "https://pypi.org/project/pcof/",
    "platform": "",
    "project_url": "https://pypi.org/project/pcof/",
    "project_urls": {
      "Homepage": "https://github.com/thobiast/pcof"
    },
    "release_url": "https://pypi.org/project/pcof/0.2.1/",
    "requires_dist": [
      "prettytable",
      "pytz",
      "requests"
    ],
    "requires_python": "",
    "summary": "Python Collection Of Functions.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8096308,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5654f8321be15d617161b11110336dd2f3737f72ad3c6d4c4377840aee4171f",
          "md5": "4ae936c5bf8dda5a70a7736eb22f36a4",
          "sha256": "ac33e02a0f3f329422bc440f9afe26281055b88db4b46cf27b69b6e826a08edb"
        },
        "downloads": -1,
        "filename": "pcof-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ae936c5bf8dda5a70a7736eb22f36a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13095,
        "upload_time": "2020-06-01T18:43:17",
        "upload_time_iso_8601": "2020-06-01T18:43:17.616001Z",
        "url": "https://files.pythonhosted.org/packages/a5/65/4f8321be15d617161b11110336dd2f3737f72ad3c6d4c4377840aee4171f/pcof-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b799754b3f23df6c7e3c13f2d4f13d2a4031a0c098f3086adf7705a1e651a3c7",
          "md5": "e24e198ce5caef6baeb4dfdb44897e0e",
          "sha256": "bd59f47c552535a896c94907d247d9deea93465f475f165d5f2b9e128cde055b"
        },
        "downloads": -1,
        "filename": "pcof-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e24e198ce5caef6baeb4dfdb44897e0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15429,
        "upload_time": "2020-06-01T18:43:20",
        "upload_time_iso_8601": "2020-06-01T18:43:20.280567Z",
        "url": "https://files.pythonhosted.org/packages/b7/99/754b3f23df6c7e3c13f2d4f13d2a4031a0c098f3086adf7705a1e651a3c7/pcof-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29b2297d88573ec15c04d92e72c018d50a86009a1803f7b7c3555bb167dac7ca",
          "md5": "212947ea755180d5799f245132f32935",
          "sha256": "7ffb61cc2d7b7a05f718e9012f85bbfabe50d0e5cf3073b215ecad8922c1be34"
        },
        "downloads": -1,
        "filename": "pcof-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "212947ea755180d5799f245132f32935",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14090,
        "upload_time": "2020-06-02T18:22:54",
        "upload_time_iso_8601": "2020-06-02T18:22:54.948204Z",
        "url": "https://files.pythonhosted.org/packages/29/b2/297d88573ec15c04d92e72c018d50a86009a1803f7b7c3555bb167dac7ca/pcof-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9b8b71771501ea4f1c28503a46bd32c9a2ac04d8c1802f6ad85e475383d3529",
          "md5": "807cbc512105466802bd5ac234024af3",
          "sha256": "6a6414c1dda71a864696d40ea502c14024cce3ed435fecfbc5d5c4137e0c8100"
        },
        "downloads": -1,
        "filename": "pcof-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "807cbc512105466802bd5ac234024af3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16879,
        "upload_time": "2020-06-02T18:22:56",
        "upload_time_iso_8601": "2020-06-02T18:22:56.575044Z",
        "url": "https://files.pythonhosted.org/packages/e9/b8/b71771501ea4f1c28503a46bd32c9a2ac04d8c1802f6ad85e475383d3529/pcof-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5df32d76fed3723d3bfcb921bd19c9a1ce08abf06bb7d0d2356e4f21743774f",
          "md5": "28c36dc59f9f4ef68a58dcb014982896",
          "sha256": "6e554027b08f2c5af1931dc6d6b129813d9bbc044a35260cb5745a07e5217a8e"
        },
        "downloads": -1,
        "filename": "pcof-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28c36dc59f9f4ef68a58dcb014982896",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16274,
        "upload_time": "2020-07-06T20:22:35",
        "upload_time_iso_8601": "2020-07-06T20:22:35.162420Z",
        "url": "https://files.pythonhosted.org/packages/f5/df/32d76fed3723d3bfcb921bd19c9a1ce08abf06bb7d0d2356e4f21743774f/pcof-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43be671d79d0e42b3fdbb2a1975cd6e9040224a8bd742560af76c1dc560a346d",
          "md5": "aa52b229f250c261eb1052e6b4a589c0",
          "sha256": "8787319652e473b2dac0c83b2d5acbeb3fe673d5ae8f0cbc0a4611c9247e4ceb"
        },
        "downloads": -1,
        "filename": "pcof-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "aa52b229f250c261eb1052e6b4a589c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20016,
        "upload_time": "2020-07-06T20:22:36",
        "upload_time_iso_8601": "2020-07-06T20:22:36.585319Z",
        "url": "https://files.pythonhosted.org/packages/43/be/671d79d0e42b3fdbb2a1975cd6e9040224a8bd742560af76c1dc560a346d/pcof-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ada2af7f33dda2a0c93ef855f09ba6406c0a0c16c7f8ef545e4354ddacbb0f7",
          "md5": "520899bd57e270c82a2a209524c7e1dd",
          "sha256": "8d1edaf2aba20ebc2d8669579e82e68ec51912daa34732e64a73811e45dad62e"
        },
        "downloads": -1,
        "filename": "pcof-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "520899bd57e270c82a2a209524c7e1dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17811,
        "upload_time": "2020-08-04T17:16:50",
        "upload_time_iso_8601": "2020-08-04T17:16:50.143104Z",
        "url": "https://files.pythonhosted.org/packages/8a/da/2af7f33dda2a0c93ef855f09ba6406c0a0c16c7f8ef545e4354ddacbb0f7/pcof-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "955f35a744e98e66d987a9a51ae8cf44ea67b18763ba53ab403bbe9c6e6b4660",
          "md5": "6dfaea5b87e75696683123eafdf9c572",
          "sha256": "e91d2fcc476e56faff80a38f4796b6ed52d2a197387908d5852c804e5833ee56"
        },
        "downloads": -1,
        "filename": "pcof-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6dfaea5b87e75696683123eafdf9c572",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24499,
        "upload_time": "2020-08-04T17:16:52",
        "upload_time_iso_8601": "2020-08-04T17:16:52.281828Z",
        "url": "https://files.pythonhosted.org/packages/95/5f/35a744e98e66d987a9a51ae8cf44ea67b18763ba53ab403bbe9c6e6b4660/pcof-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1eff065b147e29c887419b709c9c1af07476a507208bc7d45f4ef215795c71b1",
          "md5": "6069568bf45e3246625c2379801ad5c7",
          "sha256": "f72e2f42d56feceeed2e548dd6b7ee6b67a8c5557043c8d9cfb1b7c209431fd4"
        },
        "downloads": -1,
        "filename": "pcof-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6069568bf45e3246625c2379801ad5c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22495,
        "upload_time": "2020-08-13T19:54:06",
        "upload_time_iso_8601": "2020-08-13T19:54:06.790780Z",
        "url": "https://files.pythonhosted.org/packages/1e/ff/065b147e29c887419b709c9c1af07476a507208bc7d45f4ef215795c71b1/pcof-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b18a6db194f0c9e2050fdcaa9254f551ab9693d5b66791a3bd7b1356c49e10fd",
          "md5": "7e84c00a553f067e728e95e080ad2bdd",
          "sha256": "fb2e866e9326b2205a02c9623263407ebd5d652ed6003b7ad26c45d202d509da"
        },
        "downloads": -1,
        "filename": "pcof-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e84c00a553f067e728e95e080ad2bdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30946,
        "upload_time": "2020-08-13T19:54:08",
        "upload_time_iso_8601": "2020-08-13T19:54:08.827405Z",
        "url": "https://files.pythonhosted.org/packages/b1/8a/6db194f0c9e2050fdcaa9254f551ab9693d5b66791a3bd7b1356c49e10fd/pcof-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ed734f41041167ce5c027d2e20b7872b2353a6dc3eecf94bde70c2fbef02e99",
          "md5": "b41d4b5d666845d9a6563865ac37a6c9",
          "sha256": "616eae80870901b740057a79ad9327246d701134db79ceba5b3c512de12b228d"
        },
        "downloads": -1,
        "filename": "pcof-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b41d4b5d666845d9a6563865ac37a6c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23861,
        "upload_time": "2020-09-02T18:31:48",
        "upload_time_iso_8601": "2020-09-02T18:31:48.581258Z",
        "url": "https://files.pythonhosted.org/packages/4e/d7/34f41041167ce5c027d2e20b7872b2353a6dc3eecf94bde70c2fbef02e99/pcof-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1beb48d49cdedd7f2a15133873edc21ce12a753642af1d1285e4014c0fdc6b4f",
          "md5": "d1dbb75c3b2087e9b87d70a65604ff11",
          "sha256": "c20d95fc6e776ea7bd8647df0699a7851e39e35bd123606ea8ed204bdab5327b"
        },
        "downloads": -1,
        "filename": "pcof-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d1dbb75c3b2087e9b87d70a65604ff11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33736,
        "upload_time": "2020-09-02T18:31:50",
        "upload_time_iso_8601": "2020-09-02T18:31:50.491720Z",
        "url": "https://files.pythonhosted.org/packages/1b/eb/48d49cdedd7f2a15133873edc21ce12a753642af1d1285e4014c0fdc6b4f/pcof-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ed734f41041167ce5c027d2e20b7872b2353a6dc3eecf94bde70c2fbef02e99",
        "md5": "b41d4b5d666845d9a6563865ac37a6c9",
        "sha256": "616eae80870901b740057a79ad9327246d701134db79ceba5b3c512de12b228d"
      },
      "downloads": -1,
      "filename": "pcof-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b41d4b5d666845d9a6563865ac37a6c9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23861,
      "upload_time": "2020-09-02T18:31:48",
      "upload_time_iso_8601": "2020-09-02T18:31:48.581258Z",
      "url": "https://files.pythonhosted.org/packages/4e/d7/34f41041167ce5c027d2e20b7872b2353a6dc3eecf94bde70c2fbef02e99/pcof-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1beb48d49cdedd7f2a15133873edc21ce12a753642af1d1285e4014c0fdc6b4f",
        "md5": "d1dbb75c3b2087e9b87d70a65604ff11",
        "sha256": "c20d95fc6e776ea7bd8647df0699a7851e39e35bd123606ea8ed204bdab5327b"
      },
      "downloads": -1,
      "filename": "pcof-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d1dbb75c3b2087e9b87d70a65604ff11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 33736,
      "upload_time": "2020-09-02T18:31:50",
      "upload_time_iso_8601": "2020-09-02T18:31:50.491720Z",
      "url": "https://files.pythonhosted.org/packages/1b/eb/48d49cdedd7f2a15133873edc21ce12a753642af1d1285e4014c0fdc6b4f/pcof-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}