{
  "info": {
    "author": "Nick Janetakis, 5kyc0d3r",
    "author_email": "nick.janetakis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "|PyPI version| |Build status|\n\n**Note:** This is a fork of the official Flask-Webpack plugin. It is patched to work with the `webpack-manifest-plugin <https://github.com/danethurber/webpack-manifest-plugin>`_ because the `manifest-revision-webpack-plugin <https://github.com/nickjj/manifest-revision-webpack-plugin>`_ by Nickjj only resolved assets added as entry point scripts in the webpack.config.js file.\n\nWhat is Flask-Webpack?\n^^^^^^^^^^^^^^^^^^^^^^\n\nManaging assets can be a serious burden. Here's just a few things you get by\nusing this package:\n\n- Minify assets\n- Attach vendor prefixes to your CSS automatically\n- Optimize image sizes\n- Leverage the CommonJS module system to organize your Javascript\n- Compile Markdown\n- Compile 20+ client side template languages\n- Compile LESS, SASS and any other CSS pre-processor you can imagine\n- Compile Typescript, Coffeescript and any other *to-javascript* language\n- Compile Ecmascript 6 (ES) down to ES 5\n- Compile React JSX to JS with hot module reloading\n- Near instant compile times, ~20-50ms is common on my workstation\n- Optionally get source maps in development mode\n- Serve your assets from a tricked out local development asset server\n- Cache all assets forever because their file names get md5-tagged\n- The only runtime you need other than Python is NodeJS\n- Never deal with file watchers again because it's all taken care of for you\n- And much more...\n\nAll of the features above are the direct result of using `Webpack <http://webpack.github.io/>`_\nto manage your assets. The huge win here besides the obvious is that the\nfunctionality is outside of this package.\n\nThat means you have free reign to pick and choose what you want without\nhaving to worry about Flask-Webpack versions. If a new Webpack plugin becomes\navailable, you can use it immediately.\n\nWhat does this package do then?\n-------------------------------\n\nIt sets up a few template tags so you can access the assets inside of your\njinja templates.\n\n**It means you can type this:**\n\n``<img src=\"{{ asset_url_for('images/hamburger.svg') }}\" alt=\"Hamburger\">``\n\n**...and once your jinja template has been compiled, you will see this:**\n\n``<img src=\"images/hamburger.d2cb0dda3e8313b990e8dcf5e25d2d0f.svg\" alt=\"Hamburger\">``\n\nNow you can happily tell your frontend proxy to cache that hamburger image for\nan entire year. If you ever change the hamburger, the md5 will change but you\ndo not need to change any of your templates because the ``asset_url_for``\ntag knows how to look it up.\n\nGlobal template tags\n--------------------\n\n- **asset_url_for(asset_relative_path)** to resolve an asset name\n- **javascript_tag(\\*asset_relative_paths)** to write out 1 or more script tags\n- **stylesheet_tag(\\*asset_relative_paths)** to write out 1 or more stylesheet tags\n\nBoth the javascript and stylesheet tags accept multiple arguments. If you give\nit more than argument it will create as many tags as needed.\n\n\nInstallation\n^^^^^^^^^^^^\n\n``pip install Flask-Webpack-Fork``\n\nQuick start\n^^^^^^^^^^^\n\n::\n\n    from flask import Flask\n    from flask_webpack import Webpack\n\n    webpack = Webpack()\n\n    app = Flask(__name__)\n    webpack.init_app(app)\n\nYou can view a complete working example in the `test app <https://github.com/nickjj/flask-webpack/tree/master/flask_webpack/tests/test_app>`_.\n\nThere's also a `blog post and short video <https://nickjanetakis.com/blog/manage-your-assets-with-flask-webpack>`_ explaining how to use this extension.\n\nHow does it work?\n-----------------\n\nIt expects you to have built a manifest file and it handles the rest. You can\nbuild this manifest file with the `webpack-manifest-plugin <https://github.com/danethurber/webpack-manifest-plugin>`_.\nThis process is done automatically upon starting the dev asset server or building\nyour assets to prepare for a production release. All of that is taken care of in\nthe ``webpack.config.js`` file.\n\nSettings\n^^^^^^^^\n\n``Flask-Webpack`` is configured like most Flask extensions. Here's the available\noptions:\n\n- ``WEBPACK_MANIFEST_PATH``: default ``None``\n    - **Required:** You may consider using ``./build/manifest.json``, it's up to you.\n\n- ``WEBPACK_ASSETS_URL``: default ``publicPath from the webpack.config.js file``\n    - **Optional:** Use this asset url instead of the ``publicPath``.\n    - You would set this to your full domain name or CDN in production.\n\nLearn more\n^^^^^^^^^^\n\nWebpack knowledge\n-----------------\n\nMost of what you'll need to learn is related to Webpack specifically but the\nexample app in this repo is enough to get you started. Here's a few resources\nto help you get started with Webpack:\n\n- `What is Webpack? <http://webpack.github.io/docs/what-is-webpack.html>`_\n- `Getting started <http://webpack.github.io/docs/tutorials/getting-started/>`_\n- `List of loaders <https://github.com/webpack/docs/wiki/list-of-loaders>`_\n- `Advanced setup with React <https://github.com/webpack/react-starter>`_\n\nHelp! My assets do not work outside of development\n--------------------------------------------------\n\nI see, so basically the problem is you're using the ``url()`` function in your\nstylesheets and are referencing a relative path to an asset, such as:\n\n``src: url('../../fonts/CoolFont.eot')``\n\nThe above works in development mode because that's where the file is \nlocated but in production mode the asset is not there. The ``asset_url_for`` \ntemplate helper handles all of this for you on the server side but now you need\nsome assistance  on the client side as well.\n\nYou have a few options here depending on if you're using CSS, SASS or something\nelse. If you're using straight CSS you will need to pre-prend all of your paths\nwith a special identifier.\n\nIf you were to re-write the example from above, it would now be:\n\n``src: url('~!file!../../fonts/CoolFont.eot')``\n\nThat will automatically get expanded to a path that works in every environment.\n\nIf you're using SASS you can create your own function to make things easier to\nwork with on a day to day basis. Something like this should suffice:\n\n::\n\n    @function asset-url($path) {\n      @return url('~!file!' + $path);\n    }\n\nNow you can call it like this and everything will work:\n\n``src: asset-url('../../fonts/CoolFont.eot')``\n\nFeel free to make additional helper functions that let you abstract away the\nrelative prefix such as ``font-url`` or ``image-url``. It really depends on how\nyour assets are set up.\n\nContributors\n^^^^^^^^^^^^\n\n- Nick Janetakis <nick.janetakis@gmail.com>\n- 5kyc0d3r <https://github.com/5kyc0d3r>\n\n.. |PyPI version| image:: https://badge.fury.io/py/Flask-Webpack.svg\n   :target: https://pypi.python.org/pypi/flask-webpack-fork\n.. |Build status| image:: https://api.travis-ci.org/5kyc0d3r/flask-webpack-fork.png\n   :target: https://travis-ci.org/5kyc0d3r/flask-webpack-fork\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/5kyc0d3r/flask-webpack",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Flask-Webpack-Fork",
    "package_url": "https://pypi.org/project/Flask-Webpack-Fork/",
    "platform": "",
    "project_url": "https://pypi.org/project/Flask-Webpack-Fork/",
    "project_urls": {
      "Homepage": "https://github.com/5kyc0d3r/flask-webpack"
    },
    "release_url": "https://pypi.org/project/Flask-Webpack-Fork/0.1.1/",
    "requires_dist": [
      "Flask",
      "setuptools"
    ],
    "requires_python": "",
    "summary": "Flask extension for managing assets with Webpack.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4269326,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6114beab940b517118387cd832e2599059590e6083ce483df2f50de03d01e99",
          "md5": "9ed00dad4435e9c2d85fe61b78b41d2d",
          "sha256": "cca1ffdb1d90959b7c4317b074de1af82a4fdd47f491ea3a08a382f40d8be21f"
        },
        "downloads": -1,
        "filename": "Flask_Webpack_Fork-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ed00dad4435e9c2d85fe61b78b41d2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9335,
        "upload_time": "2018-09-13T16:08:39",
        "upload_time_iso_8601": "2018-09-13T16:08:39.830516Z",
        "url": "https://files.pythonhosted.org/packages/b6/11/4beab940b517118387cd832e2599059590e6083ce483df2f50de03d01e99/Flask_Webpack_Fork-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "302d954dcbc01e0eed88f66d2c9fef50d9bdd8a4204d57d51154725e25d4230f",
          "md5": "7a4182e3b43063bc4119d74fc142933d",
          "sha256": "212b533fd38480e6570bf3e11cd303761fc7668f2209fffce27f7ac4c0f82bff"
        },
        "downloads": -1,
        "filename": "Flask-Webpack-Fork-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a4182e3b43063bc4119d74fc142933d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17943,
        "upload_time": "2018-09-13T16:08:41",
        "upload_time_iso_8601": "2018-09-13T16:08:41.365038Z",
        "url": "https://files.pythonhosted.org/packages/30/2d/954dcbc01e0eed88f66d2c9fef50d9bdd8a4204d57d51154725e25d4230f/Flask-Webpack-Fork-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6114beab940b517118387cd832e2599059590e6083ce483df2f50de03d01e99",
        "md5": "9ed00dad4435e9c2d85fe61b78b41d2d",
        "sha256": "cca1ffdb1d90959b7c4317b074de1af82a4fdd47f491ea3a08a382f40d8be21f"
      },
      "downloads": -1,
      "filename": "Flask_Webpack_Fork-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ed00dad4435e9c2d85fe61b78b41d2d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9335,
      "upload_time": "2018-09-13T16:08:39",
      "upload_time_iso_8601": "2018-09-13T16:08:39.830516Z",
      "url": "https://files.pythonhosted.org/packages/b6/11/4beab940b517118387cd832e2599059590e6083ce483df2f50de03d01e99/Flask_Webpack_Fork-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "302d954dcbc01e0eed88f66d2c9fef50d9bdd8a4204d57d51154725e25d4230f",
        "md5": "7a4182e3b43063bc4119d74fc142933d",
        "sha256": "212b533fd38480e6570bf3e11cd303761fc7668f2209fffce27f7ac4c0f82bff"
      },
      "downloads": -1,
      "filename": "Flask-Webpack-Fork-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7a4182e3b43063bc4119d74fc142933d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17943,
      "upload_time": "2018-09-13T16:08:41",
      "upload_time_iso_8601": "2018-09-13T16:08:41.365038Z",
      "url": "https://files.pythonhosted.org/packages/30/2d/954dcbc01e0eed88f66d2c9fef50d9bdd8a4204d57d51154725e25d4230f/Flask-Webpack-Fork-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}