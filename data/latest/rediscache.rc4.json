{
  "info": {
    "author": "Pierre Cart-Grandjean",
    "author_email": "pcart-grandjean@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# RedisCache\n\n## Presentation\n\nThere are already quite a few Python decorators to cache functions in a Redis database:\n- [redis-cache](https://pypi.org/project/redis-cache/)\n- [redis_cache_decorator](https://pypi.org/project/redis_cache_decorator/)\n- [redis-simple-cache](https://pypi.org/project/redis-simple-cache/)\n- [python-redis-cache](https://pypi.org/project/python-redis-cache/)\n- [redis-simple-cache-3k](https://pypi.org/project/redis-simple-cache-3k/)\n- [redis-simple-cache-py3](https://pypi.org/project/redis-simple-cache-py3/)\n- and more ...\n\nBut none I could find allows to set two expiration times as we do it here. The first given time is how long before we should update the value stored in the cache. The second given time, longer of course, is how long the data stored in the cache is still good enough to be sent back to the caller. The refreshing of the cache is only done when the function is called. And by default it is done asynchronously, so the caller doesn't have to wait. When the data in the cache becomes too old, it disapear automatically.\n\nThis is a great caching mechanism for functions that will give a consistent output according to their parameters and at a given time. A purelly random function should not be cached. And a function that is independent of the time should be cached with a different mechanism like the LRU cache in the [functools](https://docs.python.org/3/library/functools.html) standard module.\n\n## Installation\n\nSimply install the PyPi package:\n\n```bash\npip install rediscache\n```\n\n## Requirements\n\nOf course you need a Redis server installed. By default, the decorator will connect to `localhost:6379` with no password, using the database number `0`. This can be changed with parameters given to the `RedisCache` object.\n\n## Usage of the RedisCache class\n\n### RedisCache class\n\nTo avoid having too many connections to the Redis server, it is best to create only one instance of this class.\n\n```python\nrediscache = RedisCache()\n```\n\nAll the parameters for the `RedisCache` constructor are optional. Their default value are in `[]`.\n\n- host: IP or host name of the Redis server. [`'localhost'`]\n- port: Port number of the Redis server. [`6379`]\n- db: Database number in the Redis server. [`0`]\n- password: Password required to read and write on the Redis server. [`None`]\n- decode: Decode the data stored in the cache as byte string. For example, it should not be done if you actually want to cache byte strings. [`True`]\n- enabled: When False it allows to programatically disable the cache. It can be usefull for unit tests. [`True`]\n\n### Environment variables\n\nIn the case of a cloud deployment, for example, it might be easier to use environment variables to set the Redis server details:\n\n- REDIS_SERVICE_HOST: IP or host name of the Redis server.\n- REDIS_SERVICE_PORT: Port number of the Redis server.\n- REDIS_SERVICE_DB: Database number in the Redis server.\n- REDIS_SERVICE_PASSWORD: Password required to read and write on the Redis server.\n\nThe order of priority is the natural _parameter_ > _environment variable_ > _default value_.\n\n### `cache` decorator\n\nThis is the main decorator. All the parameters are available. The mandatory ones do not have a default value:\n\n- refresh: The amount of seconds before it would be a good idea to refresh the cached value.\n- expire: How many seconds that the value in the cache is still considered good enough to be sent back to the caller.\n- retry: While a value is being refreshed, we want to avoid to refresh it in parallel. But if it is taking too long, after the number of seconds provided here, we may want to try our luck again. If not specified, we will take the `refresh` value.\n- default: If we do not have the value in the cache and we do not want to wait, what shall we send back to the caller? It has to be serializable because it will also be stored in the cache. [`''`]\n- wait: If the value is not in the cache, do we wait for the return of the function? [`False`]\n- serializer: The only type of data that can be stored directly in the Redis database are `byte`, `str`, `int` and `float`. Any other will have to be serialized with the function provided here. [`None`]\n- deserializer: If the value was serialized to be stored in the cache, it needs to deserialized when it is retrieved. [`None`]\n\nExample:\n\n```python\nfrom rediscache import RedisCache\nREDISCACHE = RedisCache()\n@REDISCACHE.cache(10, 60) # Keep the value up to 1mn but ready to be refreshed every 10s.\ndef my_function(...) {\n    ...\n}\n```\n\nSee `test_rediscache.py` for more examples.\n\nNote: when you choose to wait for the value, you do not have an absolute guarantee that you will not get the default value. For example if it takes more than the retry time to get an answer from the function, the decorator will give up.\n\n### `cache_raw` decorator helper\n\nNo serializer or deserializer. This will only work if the cached function only returns `byte`, `str`, `int` or `float` types. Even `None` will fail.\n\n### `cache_raw_wait` decorator helper\n\nSame as above but waits for the value if not in the cache.\n\n### `cache_json` decorator helper\n\nSerialize the value with `json.dumps()` and desiralize the value with `json.loads()`.\n\n### `cache_json_wait` decorator helper\n\nSame as above but waits for the value if not in the cache.\n\n### `get_stats(delete=False)`\n\nThis will get the stats stored when using the cache. The `delete` option is to reset the counters after read.\nThe output is a dictionary with the following keys and values:\n* **Refresh**: Number of times the cached function was actually called.\n* **Wait**: Number of times we waited for the result when executing the function.\n* **Failed**: Number of times the cached function raised an exception when called.\n* **Missed**: Number of times the functions result was not found in the cache.\n* **Success**: Number of times the function's result was found in the cache.\n* **Default**: Number of times the default value was used because nothing is in the cache or the function failed.\n\n### The `function` property\n\nThe decorator and its aliases add a new property to the decorated function to be able to bypass the cache as it may be required\nin some cases.\n\n```python\nfrom rediscache import RedisCache\nREDISCACHE = RedisCache()\n@REDISCACHE.cache(2, 10)\ndef myfunc():\n    return \"Hello\"\n# Invoke the function without caching it.\nprint(myfunc.function())\n```\n\n## Development\n\n### Virtual python environment\n\nMy development environment is `Python 3.8.5`. The dependencies are in `requirements-dev.txt`.\n\n### Testing\n\nTo make sure we use Redis properly, we do not mock it in the unit tess. So you will need a localhost default instance of Redis server without a password. This means that the unit tests are more like integrtion tests.\n\nThe execution of the tests including coverage result can be done with `test.sh`. You can also run just `pytest`. Or even the test file itself, but it will require setting the `PYTHONPATH`:\n\n```bash\nexport PYTHONPATH=.\ntests/test_rediscache.py\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AmadeusITGroup/RedisCache",
    "keywords": "redis,performance,cache",
    "license": "MIT license",
    "maintainer": "Amadeus IT Group",
    "maintainer_email": "opensource@amadeus.com",
    "name": "rediscache",
    "package_url": "https://pypi.org/project/rediscache/",
    "platform": "",
    "project_url": "https://pypi.org/project/rediscache/",
    "project_urls": {
      "Homepage": "https://github.com/AmadeusITGroup/RedisCache"
    },
    "release_url": "https://pypi.org/project/rediscache/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Function decorator to cache results in Redis",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9871553,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21162f16b5c5e79788785086bcc46e3425baa453b95229e201466bed63a4489d",
          "md5": "991180a1073655fc8a26a7f8234d265f",
          "sha256": "0e80fdbed6fda8b9e337495a2a310df844ca3de0d7a78f7e6f331443222e1493"
        },
        "downloads": -1,
        "filename": "rediscache-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "991180a1073655fc8a26a7f8234d265f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8963,
        "upload_time": "2020-12-19T22:02:51",
        "upload_time_iso_8601": "2020-12-19T22:02:51.878472Z",
        "url": "https://files.pythonhosted.org/packages/21/16/2f16b5c5e79788785086bcc46e3425baa453b95229e201466bed63a4489d/rediscache-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a97131b883a157f63c4a7e74b1d05ebba129ffa8e410ec874d4cd819341846b0",
          "md5": "1ed2af9ea29a36bce56275cd6ee6c5c9",
          "sha256": "9a1fdb614019b7eed94dd017b58b11653b23a5c48d6359b1b5b28aa18b0b0290"
        },
        "downloads": -1,
        "filename": "rediscache-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ed2af9ea29a36bce56275cd6ee6c5c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10750,
        "upload_time": "2021-03-16T17:58:34",
        "upload_time_iso_8601": "2021-03-16T17:58:34.774809Z",
        "url": "https://files.pythonhosted.org/packages/a9/71/31b883a157f63c4a7e74b1d05ebba129ffa8e410ec874d4cd819341846b0/rediscache-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee536be6fbdcc84433fd791ab4af7212eff98c3b8ebfd8fd1306e5acd12fc94b",
          "md5": "243dbe7d81a945d1879d92641e53b626",
          "sha256": "467eaea7dd1ed6e3928e2ed7e0a08e31c3d7e248a779c020d3aa2afe6af17c1e"
        },
        "downloads": -1,
        "filename": "rediscache-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "243dbe7d81a945d1879d92641e53b626",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11093,
        "upload_time": "2021-03-24T22:42:45",
        "upload_time_iso_8601": "2021-03-24T22:42:45.251987Z",
        "url": "https://files.pythonhosted.org/packages/ee/53/6be6fbdcc84433fd791ab4af7212eff98c3b8ebfd8fd1306e5acd12fc94b/rediscache-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bedf1b624027dac186c7da368584bda774e5a23cea19a851ed9ad91b7f7c1183",
          "md5": "c25cd0900bacf5d44aecfbc523a4b5b3",
          "sha256": "fe9ce92c434d1a3ac1d7f3fac38fa6e2af0aa4159f2b0fe4cb17ee19f37a9205"
        },
        "downloads": -1,
        "filename": "rediscache-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c25cd0900bacf5d44aecfbc523a4b5b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11097,
        "upload_time": "2021-03-24T23:21:06",
        "upload_time_iso_8601": "2021-03-24T23:21:06.645407Z",
        "url": "https://files.pythonhosted.org/packages/be/df/1b624027dac186c7da368584bda774e5a23cea19a851ed9ad91b7f7c1183/rediscache-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bedf1b624027dac186c7da368584bda774e5a23cea19a851ed9ad91b7f7c1183",
        "md5": "c25cd0900bacf5d44aecfbc523a4b5b3",
        "sha256": "fe9ce92c434d1a3ac1d7f3fac38fa6e2af0aa4159f2b0fe4cb17ee19f37a9205"
      },
      "downloads": -1,
      "filename": "rediscache-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c25cd0900bacf5d44aecfbc523a4b5b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11097,
      "upload_time": "2021-03-24T23:21:06",
      "upload_time_iso_8601": "2021-03-24T23:21:06.645407Z",
      "url": "https://files.pythonhosted.org/packages/be/df/1b624027dac186c7da368584bda774e5a23cea19a851ed9ad91b7f7c1183/rediscache-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}