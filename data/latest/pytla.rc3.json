{
  "info": {
    "author": "Alex Kaufman",
    "author_email": "alexanderkaufman@montana.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pytla\n\n*pytla* the Python (Integrable) Tunable Laser Assembly library!\n\nThis is meant to be an open source and relatively user friendly way to interact\nwith Integrable Tubable Laser Assembly lasers.\nThe pytla package provides a base class `ITLA` that can be extended for specific\nmanufacturer requirements with another yaml register file to specify the new registers.\n\n\n## Current Specs Followed\n\n* [OIF-ITLA-MSA-01.3](https://www.oiforum.com/wp-content/uploads/2019/01/OIF-ITLA-MSA-01.3.pdf).\n  * This communication scheme supports microITLA 1.1 devices as well.\n* [OIF-ITLA-MSA-01.2](https://www.oiforum.com/wp-content/uploads/2019/01/OIF-ITLA-MSA-01.2.pdf).\n  * Some older devices still adhere to the 1.2 standard. These can be accessed\n    by setting `version='1.2` parameter on ITLA object initialization. Example below.\n  * If you are receiving unexpected execution errors on register functions like\n    `_fcf3` it is likely you need to use `version='1.2'`.\n\n## Status\n\nThis is very much a work in progress. Use at your own risk. I would call this\npre-alpha but most functionality exists and we use it at SpectrumLab.\n\nHidden functions for each register (names the same as each register but in lowercase)\nare available. Some registers still don't have user friendly functions defined\nfor them.\n\nIt would be nice if we could include documentation for the\nhidden register functions for each class in the pytla docs.\n\n## Examples\n\n### default use (with MSA-01.3 lasers)\n\n```python3\n# import, initialize, and connect to laser\nimport itla\nimport time\nfrom itla.itla_errors import CPExcpetion\n\nlaser = itla.ITLA('/dev/ttyUSB0', 9600)\nlaser.connect()\n\n# Set the frequency to 193.560 THz\nlaser.set_frequency(193.560)\n\n# Set the power to 10 dBm\nlaser.set_power(10)\n\n# enable the laser\n# enabling takes some time so a CPExcpetion will be thrown\n# It is necessary to catch this explicitly so the user\n# doesnt continue on without explicitly handling this time delay\n# (at least until we implement checking the pending bit in nop)\ntry:\n    laser.enable()\nexcept CPException:\n    time.sleep(30)\n```\n\nMore info about features available currently can be found in [pytla docs](https://alexrkaufman.github.io/pytla).\n\n### version selection\n\nYou can also select the 1.2 spec if your laser does not yet support 1.3.\nThis is as simple as setting `version` in initialization of your `ITLA` object.\n\n```python3\n# import, initialize, and connect to laser\nimport itla\nimport time\nfrom itla.itla_errors import CPExcpetion\n\nlaser = itla.ITLA('/dev/ttyUSB0', 9600, version='1.2')\nlaser.connect()\n\n# Set the frequency to 193.560 THz\nlaser.set_frequency(193.560)\n\n# Set the power to 10 dBm\nlaser.set_power(10)\n\n# enable the laser\n# enable the laser\n# enabling takes some time so a CPExcpetion will be thrown\n# It is necessary to catch this explicitly so the user\n# doesnt continue on without explicitly handling this time delay\n# (at least until we implement checking the pending bit in nop)\ntry:\n    laser.enable()\nexcept CPException:\n    time.sleep(30)\n```\n\n#### Currently supported options under version\n\n- [x] `version='1.3'` (OIF-ITLA-MSA-01.3)\n- [x] `version='1.2'` (OIF-ITLA-MSA-01.2)\n\n### Pure Photonics\n\nWe have also implemented a class for PurePhotonics lasers as an example of how\neasy it can be for manufacturers to extend this library to control their own\nITLA based lasers.\n\n```python3\n# import, initialize, and connect to laser\nimport itla\nimport time\nfrom itla.itla_errors import CPExcpetion\n\npplaser = itla.PPLaser('/dev/ttyUSB0')\npplaser.connect()\n\n# Set the frequency to 193.560 THz\nlaser.set_frequency(193.560)\n\n# Set the power to 10 dBm\nlaser.set_power(10)\n\n# enable the laser\n# enable the laser\n# enabling takes some time so a CPExcpetion will be thrown\n# It is necessary to catch this explicitly so the user\n# doesnt continue on without explicitly handling this time delay\n# (at least until we implement checking the pending bit in nop)\ntry:\n    laser.enable()\nexcept CPException:\n    time.sleep(30)\n\nlaser.whispermode()\n```\n\n\n## Paradigm\n\nThe basic paradigm we have used for implementing this library is one in which\nfunctions are created for all registers based on a yaml file specifying and\ndescribing each register. These are all implemented as hidden functions with a\nsingle underscore.\n\nFor simplicity all ITLA register functions are named as follows: assuming\nwe have some register named `REGISTER` in the ITLA documentation the\ncorresponding function would be `_register()`.\n\n## For Manufacturers\n\nIf you would like to have a specific class available for your particular type of\nlaser please create a yaml file as specified below and submit it for inclusion.\nPlease also provide any details for the order of operations required to enable\nor activate your features.\n\nThis library was designed to be simple to extend for implementing manufacturer\nspecific registers and functions. The first step is to create a yaml file\ncontaining all of the additional registers your laser will utilize. Each entry\nshould have the following format.\n\n```yaml\nRegisterName:\n  register: 0x00\n  fnname: registername\n  description: >\n    Here we provide a description of this particular register for documentation\n    purposes. It is best to format this the same way you would a docstring as it\n    will be read as a docstring.\n  readonly: [true/false]\n  AEA: [true/false]\n  signed: [true/false]\n\nMYREGISTER:\n  register: 0xFE\n  fnname: myregister\n  description: >\n  This is my very own register. I can write a signed integer to it or read it back.\n  readonly: true\n  AEA: false\n  signed: true\n```\n\nYou can name your register whatever you'd like and name the function for\naccessing it to whatever you'd like as long as it is acceptable for python.\nGenerally a best practice is to make the register function name all lowercase\nand change dashes to underscores. The register value must be numeric. It can be\nbase 10 but best practice is hex values.\n\nAssuming you have installed the pytla package and your yaml register\nfile is in the same folder as the file with the `MyLaser` class you can create a\nclass with hidden functions for your registers implemented in addition to\nthe basic ITLA1.3 registers and wrapper functions.\n\nRealistically, unless you are OIF and you are defining a 1.4 or 2.0 spec,\nyou should not need to write a class that depends directly on `ITLABase`.\nInstead, you are likely adding functionality to the 1.3 (or older) standard.\n\n\n```python3\nfrom itla.itla13 import ITLA13\n\nclass MyLaser(ITLA13):\n\n    def __init__(self, port, baudrate=9600):\n        register_files = ['myregisters.yaml']\n        super().__init__(port, baudrate=baudrate, register_files=register_files)\n\n    def myfunction(self, data=None):\n        '''This function either writes an integer to register 0xFE or reads an\n            integer from 0xFE\n        '''\n\n        if data is not None:\n            response = self._myregister()\n\n        elif type(data) is int:\n            response = self._myregister(data)\n\n        else\n           raise TypeError(\"Must be an int!\")\n\n        return int.from_bytes(response, 'big', signed=True)\n```\n\n## Acknowlegements\n\nThis work was done as a part of projects for\n\n* Montana State University\n* Spectrum Lab\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alexrkaufman/pytla",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytla",
    "package_url": "https://pypi.org/project/pytla/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytla/",
    "project_urls": {
      "Bug Tracker": "https://github.com/alexrkaufman/pytla/issues",
      "Docs": "https://alexrkaufman.github.io/pytla/",
      "Homepage": "https://github.com/alexrkaufman/pytla"
    },
    "release_url": "https://pypi.org/project/pytla/0.1.0/",
    "requires_dist": [
      "pyserial",
      "pyyaml",
      "scipy"
    ],
    "requires_python": ">=3.6",
    "summary": "A python library for controlling ITLA and microITLA devices.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11289481,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38579d53466167155f2d5f18f41224cd2e4e92bcbd96e7d28a3bc0ae71bf053f",
          "md5": "58e6537d856b578f61e348e03912e895",
          "sha256": "da5a9fcae8979feb4b3a17be966638d5e4719e0efde9f3b8684a0a235aab1cbd"
        },
        "downloads": -1,
        "filename": "pytla-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58e6537d856b578f61e348e03912e895",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19708,
        "upload_time": "2021-07-15T18:50:58",
        "upload_time_iso_8601": "2021-07-15T18:50:58.405773Z",
        "url": "https://files.pythonhosted.org/packages/38/57/9d53466167155f2d5f18f41224cd2e4e92bcbd96e7d28a3bc0ae71bf053f/pytla-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da53b6bea7eb2a676b36e43c467285b173fca36fa94c1ed3bdb08172031958b4",
          "md5": "406e3e1f6e2d06722c5c0628fde8f042",
          "sha256": "aaebeca7df716d0795ffccaf3b1f7bb1883c04e54053b35e7bd0b1181b1506d8"
        },
        "downloads": -1,
        "filename": "pytla-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "406e3e1f6e2d06722c5c0628fde8f042",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19379,
        "upload_time": "2021-07-15T18:50:59",
        "upload_time_iso_8601": "2021-07-15T18:50:59.953246Z",
        "url": "https://files.pythonhosted.org/packages/da/53/b6bea7eb2a676b36e43c467285b173fca36fa94c1ed3bdb08172031958b4/pytla-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86118a8957d300ad3fd2da3ab142da366bfe86ed13e80eaf7f54378d6f82a95b",
          "md5": "acc8e0b8bff39e68ac01ed8820f22b76",
          "sha256": "a048ca478a751588175005c962769a2a615648ad7a45d076ca42a942d029d40a"
        },
        "downloads": -1,
        "filename": "pytla-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "acc8e0b8bff39e68ac01ed8820f22b76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20845,
        "upload_time": "2021-08-10T19:28:20",
        "upload_time_iso_8601": "2021-08-10T19:28:20.296566Z",
        "url": "https://files.pythonhosted.org/packages/86/11/8a8957d300ad3fd2da3ab142da366bfe86ed13e80eaf7f54378d6f82a95b/pytla-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1456b8a981f24b718564fe6cf9ca807606d8863b4aad3d0182ca5ba9e48e8f9",
          "md5": "6579d27e0c9d54f2f51a79afd3750edb",
          "sha256": "6de178b73d77ce8b6014d1d4017a6e78bf00d769635bdff10652f75548786c74"
        },
        "downloads": -1,
        "filename": "pytla-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6579d27e0c9d54f2f51a79afd3750edb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20754,
        "upload_time": "2021-08-10T19:28:21",
        "upload_time_iso_8601": "2021-08-10T19:28:21.236928Z",
        "url": "https://files.pythonhosted.org/packages/e1/45/6b8a981f24b718564fe6cf9ca807606d8863b4aad3d0182ca5ba9e48e8f9/pytla-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc6b94cb0aae18dd5f44ba8b4d0ba07c4fc7e65573818ed8527e7f989840c20b",
          "md5": "ec007fcf576a82c5539b94e51ac7b833",
          "sha256": "3efb8e9b71466e49226ba7db17a12591f15a525bf8f3e95490caebe1eb6c61cc"
        },
        "downloads": -1,
        "filename": "pytla-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec007fcf576a82c5539b94e51ac7b833",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32121,
        "upload_time": "2021-08-26T20:04:29",
        "upload_time_iso_8601": "2021-08-26T20:04:29.260382Z",
        "url": "https://files.pythonhosted.org/packages/bc/6b/94cb0aae18dd5f44ba8b4d0ba07c4fc7e65573818ed8527e7f989840c20b/pytla-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99732a9ffe927e86d57631d1fea63e846bbbc56016fa1ec88793b8997390c0a9",
          "md5": "ffda024ae899aa32f66bff76b8e58881",
          "sha256": "a7bbe0c0b4fa4b03bf39bddc05906bd07d2b06066bc40ba7d4b2c24f8dfb4d7e"
        },
        "downloads": -1,
        "filename": "pytla-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ffda024ae899aa32f66bff76b8e58881",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25546,
        "upload_time": "2021-08-26T20:04:31",
        "upload_time_iso_8601": "2021-08-26T20:04:31.218255Z",
        "url": "https://files.pythonhosted.org/packages/99/73/2a9ffe927e86d57631d1fea63e846bbbc56016fa1ec88793b8997390c0a9/pytla-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc6b94cb0aae18dd5f44ba8b4d0ba07c4fc7e65573818ed8527e7f989840c20b",
        "md5": "ec007fcf576a82c5539b94e51ac7b833",
        "sha256": "3efb8e9b71466e49226ba7db17a12591f15a525bf8f3e95490caebe1eb6c61cc"
      },
      "downloads": -1,
      "filename": "pytla-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ec007fcf576a82c5539b94e51ac7b833",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 32121,
      "upload_time": "2021-08-26T20:04:29",
      "upload_time_iso_8601": "2021-08-26T20:04:29.260382Z",
      "url": "https://files.pythonhosted.org/packages/bc/6b/94cb0aae18dd5f44ba8b4d0ba07c4fc7e65573818ed8527e7f989840c20b/pytla-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99732a9ffe927e86d57631d1fea63e846bbbc56016fa1ec88793b8997390c0a9",
        "md5": "ffda024ae899aa32f66bff76b8e58881",
        "sha256": "a7bbe0c0b4fa4b03bf39bddc05906bd07d2b06066bc40ba7d4b2c24f8dfb4d7e"
      },
      "downloads": -1,
      "filename": "pytla-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ffda024ae899aa32f66bff76b8e58881",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25546,
      "upload_time": "2021-08-26T20:04:31",
      "upload_time_iso_8601": "2021-08-26T20:04:31.218255Z",
      "url": "https://files.pythonhosted.org/packages/99/73/2a9ffe927e86d57631d1fea63e846bbbc56016fa1ec88793b8997390c0a9/pytla-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}