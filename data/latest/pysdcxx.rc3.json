{
  "info": {
    "author": "Václav Krpec",
    "author_email": "vencik@razdva.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing"
    ],
    "description": "This library may be used to compare strings by a similarity measure,\ndefined as Sørensen–Dice coefficient calculated on multi-sets of the\nstrings' \"bigrams\" (all couples of adjacent characters).\n\nBigram (multi-)set is relatively easy to generate (*O(n)* time\ncomplexity lower bound in terms of the string length).\n\nAlso, compared to just using a (multi-)set of characters, bigrams do\nretain certain level of word structure. E.g. backwards spelled words are\nnot deemed similar (unlike when single character set is used).\n\nJust note that single-character words are all perfectly similar in this\nmetric, as their bigram sets are empty---and therefore the same. It may\nbe a good idea to augment words like that with an additional character\n(like a whitespace) to mitigate that problem.\n\nUsing implementation of bigram multisets above, a sequence matcher\nimplementation is also available. Given a sequence of text tokens, the\nmatcher then allows \"fuzzy\" matching of strings (using their bigrams\nagain) to sub-sequences of the text tokens.\n\nSeek more info in References section below.\n\n# List of features\n\n  - Bigram multi-set objects implemented as sorted lists of character\n    tuples with count (*O(n log n)* creation time complexity in terms of\n    the string length)\n\n  - Union operation has *O(m+n)* time complexity (sum of multi-sets'\n    cardinalities at most)\n\n  - Intersection doesn’t produce objects; only its size is calculated in\n    *O(m+n)* time\n\n  - Template implementation, allowing for both ASCII/ANSI characters and\n    UNICODE characters\n\n  - Implementations using `std::multiset` and `std::unordered_multiset`\n    also available\n\n  - Performance tests show that, long story short, the \"custom\"\n    implementation is the best (notably faster unions, intersection size\n    computation in similar or better time)\n\n  - Sequence matcher (using the best performing bigrams) with several\n    optimisations\n\n  - Python v3 binding is provided (as `pysdcxx` module, packaged)\n\n  - Python `multiset` based implementation also compared---and is\n    expectedly much slower\n\n# Build and installation\n\nYou shall need C++ compiler with support for at least C++17. Recent\nenough gcc (v8.3 or newer) is OK (older versions might do as well,\nthough). You shall also need `cmake` and `make`.\n\nPython v3.7 or newer is supported. For the Python package build, you\nshall need `pip` and Python `distutils` and the `wheel` package. If you\nwish to run Python UTs (which is highly recommended), you shall also\nneed `pytest`.\n\nE.g. on Debian-based (or similar, `apt` using) systems, the following\nshould get you the required prerequisites unless you wish to use\n`pyenv`.\n\n\\# apt-get install g++ cmake make git \\# apt-get install python3-pip\npython3-distutils \\# unless you use pyenv $ pip install wheel pytest \\#\nditto, better do that in pyenv sandbox\\</programlisting\\>\n\nOn Mac OS X, you’ll need Xcode tools and Homebrew. Then, install the\nrequired prerequisites by\n\n$ brew install coreutils cmake make\\</programlisting\\>\n\nIf you do wish to use `pyenv` to create and manage project sandbox\n(which is advisable), see short intro to that in the subsection below.\n\nAnyhow, with all the prerequisites installed, clone the project:\n\n$ git clone https://github.com/vencik/libsdcxx.git\\</programlisting\\>\n\nBuild the project, run UTs and build Python package:\n\n$ cd libsdcxx $ ./build.sh\\</programlisting\\>\n\nNote that the `build.sh` script has options; run `$ ./build.sh -h` to\nsee them.\n\nMost importantly, run with `-s` or `--enable-pt` options to perform\nperformance tests. Performance tests compare computation times of object\nconstruction, union operations and intersection size computations of the\nimplementations. If you install `multiset` Python package (using `pip`),\nthe perf. tests shall also produce results for pure-Python\nimplementation using `multiset.Multiset` (not necessary).\n\n> **Note**\n> \n> The perf. tests are written on the Python level, so the measured times\n> also contain some Python code runtime (and not trivial). I’d expect\n> results in native code to be notably better; but the test code is\n> identical, so the measurements should be meaningful for comparison.\n\nIf you wish, use `pip` to install the Python package:\n\n\\# pip install pysdcxx-\\*.whl\\</programlisting\\>\n\nNote that it’s recommended to use `pyenv`, especially for development\npurposes.\n\n## Managing project sandbox with `pyenv`\n\nFirst install `pyenv`. You may use either your OS package repo (Homebrew\non Mac OS X) or web `pyenv` installer. Setup `pyenv` (set environment\nvariables) as instructed.\n\nThen, create `pysdcxx` project sandbox, thus:\n\n$ pyenv install 3.9.6 \\# your choice of the Python interpreter version,\n\\>= 3.7 $ pyenv virtualenv 3.9.6 pysdcxx\\</programlisting\\>\n\nNow, you can always (de)activate the virtual environment (switch to the\nsandbox) by\n\n\\# pyenv activate pysdcxx \\# pyenv deactivate\\</programlisting\\>\n\nIn the sandbox, install Python packages using `pip` as usual.\n\n$ pip install wheel pytest\\</programlisting\\>\n\n# Usage\n\n## C++\n\n### Using `bigrams`\n\n``` C++\n#include <libsdcxx/bigrams.hxx>\n\nusing bigrams = libsdcxx::bigrams;                            // wbigrams for UNICODE\n\nconst auto bgrms_empty = bigrams();                           // empty bigrams set\n\nconst auto bgrms1 = bigrams(\"Hello world!\");                  // construct from string\nsize_t cnt = bgrms1.size();                                   // number of bigrams\n\nstd::cout << bgrms1;                                          // serialisation\n\nfor (const auto & bigram_cnt: bgrms1) {                       // tuple of (bigram, count)\n    const auto & bigram = std::get(bigram_cnt);\n\n    std::cout << \"Bigram : \" << std::get(bigram) << std::get(bigram) << std::endl;\n    std::cout << \"Count  : \" << std::get(bigram_cnt) << std::endl;\n}\n\n// (Const.) iterators are supported via cbegin, cend and begin, end method calls\n\nconst auto bgrms2 = bigrams(\"Hell or woes.\");\n\nsize_t isect_size = bigrams::intersect_size(bgrms1, bgrms2);  // intersection cardinality\ndouble sdc = bigrams.sorensen_dice_coef(bgrms1, bgrms2);      // similarity, in [0,1]\n\nauto uni0n = bgrms1 + bgrms2;                                 // 2 bigrams union\nauto uni0n = bigrams::unite(bgrms1, bgrms2 /* , ... */);      // variadic union\n\nuni0n += bigrams(\"more stuff\");                               // objects are mutable\n```\n\n### Using `sequence_matcher`\n\n``` C++\n#include <libsdcxx/sequence_matcher.hxx>\n#include <libsdcxx/bigrams.hxx>\n\nusing sequence_matcher = libsdcxx::sequence_matcher;    // wsequence_matcher for UNICODE\nusing bigrams = libsdcxx::bigrams;                      // wbigrams for UNICODE\n\nauto matcher = sequence_matcher();\nmatcher.reserve(10);    // reserve space for bigrams matrix for text of 10 tokens\n                        // (reservation is not strictly necessary, but advisable)\n\nconst auto bgrms_hello = bigrams(\"Hello\");\nconst auto bgrms_world = bigrams(\"world\");\n\nmatcher.emplace_back(\"Prologue\");   // create token bigrams in-place\nmatcher.emplace_back(\" .\", true);   // it's a good idea to pad single-char strings...\nmatcher.emplace_back(\"  \");         // to 2 characters (so that they produce a bigram)\nmatcher.push_back(bigrams_hello);   // push existing bigrams back\nmatcher.emplace_back(\"  \", true);   // true here stands for \"strip\" token; matched...\nmatcher.push_back(bigrams_world);   // sub-sequences are restricted not to begin/end...\nmatcher.emplace_back(\" !\", true);   // with such tokens\nmatcher.emplace_back(\"  \", true);\nmatcher.emplace_back(\"Epilogue\");\nmatcher.emplace_back(\" .\", true);\n\nconst auto bgrms_helo_wordl = bigrams::unite(           // note thatbigrams of the whole\n    bigrams(\"Helo\"), bigrams(\"  \"), bigrams(\"wordl\"));  // sentence would differ\n\nauto match = matcher.begin(bgrms_helo_wordl, 0.7);      // match with threshold 0.7\nfor (; match != matcher.end(); ++match) {\n    std::cout << match << std::endl;    // simple string form of match info, try it\n\n    std::cout\n        << \"Match bigrams: \"  << *match        << std::endl  // sub-sequence bigrams\n        << \"Match at index: \" << match.begin() << std::endl  // beginning token index\n        << \"Match end: \"      << match.end()   << std::endl  // index just past the end\n        << \"Match size: \"     << match.size()  << std::endl  // number of tokens\n        << \"Match score: \"    << match.sorensen_dice_coef() << std::endl;\n}\n\n// ... you may of course continue matching other sequences...\n```\n\n## Pyton v3\n\n### Using `Bigrams`\n\n``` Python\nfrom pysdcxx import Bigrams   # Python Bigrams are implemented by wbigrams, support UNICODE\n\nbgrms_empty = Bigrams()                 # empty bigrams set\n\nbgrms1 = Bigrams(\"Hello world!\")        # construct from string\ncnt = len(bgrms1)                       # number of bigrams\n\nprint(str(bgrms1), f\"{bgrms1}\")         # string serialisation\n\nfor bigram, cnt in bgrms1:              # Bigrams are tuple[str, int] generators\n    assert len(bigram) == 2\n\nbgrms2 = Bigrams(\"Hell or woes.\")\n\nisect_size = Bigrams.intersect_size(bgrms1, bgrms2)     # intersection cardinality\nsdc = Bigrams.sorensen_dice_coef(bgrms1, bgrms2)        # simiarity, in [0,1]\n\nunion = bgrms1 + bgrms2                                 # 2 bigrams union\n\nunion += Bigrams(\"more stuff\")                          # objects are mutable\n```\n\n### Using `SequenceMatcher`\n\n``` Python\nfrom pysdcxx import SentenceMatcher, Bigrams\n\nmatcher = SequenceMatcher()             # empty matcher\nmatcher = SequenceMatcher(reserve=4)    # empty matcher, reserved space for 4 tokens\n                                        # (not necessary, but speeds up token addition)\n\nmatcher.append(\"Hello\")                 # append token (Bigrams are constructed)\nmatcher.append(Bigrams(\"  \"))           # append token bigrams directly\nmatcher.append(\"world\", strip=False)    # \"strip\" token means that no match may begin...\nmatcher.append(\" !\", strip=True)        # nor end by that token\n\n# Alternatively, you may pass `Iterable` of tokens directly to the constructor.\n# If the `Iterable` length can be taken, reservation of space is done; otherwise,\n# you may still use the `reserve` constructor parameter if you know how many\n# tokens there shall be...  Again, if you don't, the constructor will handle it anyway\n# (construction may just take a bit longer).\nstrip = True\nmatcher = SequenceMatcher([\n    \"This\", (\"  \",strip), \"uses\", (\"  \",strip),\n    \"Sørensen\", (\" -\",strip), \"Dice\", (\"  \",strip),\n    \"coefficient\", (\" .\",strip),\n])\n\nfor match in matcher.match([\"Sørenson\", \"and\", \"Dice\"], 0.65):  # matching\n    print(f\"Match begin : {match.begin}\")       # 4 (index of the 1st match token)\n    print(f\"Match end   : {match.end}\")         # 7 (1 past the last match token)\n    print(f\"Match score : {match.score}\")       # >0.65, <1.0 as it's not a perfect match\n\n# You may continue matching other sequences\n# Note that this is only a quick summary; see `SequenceMatcher` docstrings for more...\n```\n\n# License\n\nThe software is available open-source under the terms of 3-clause BSD\nlicense.\n\n# References\n\n<https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>\n\n# Author\n\nVáclav Krpec \\<<vencik@razdva.cz>\\>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vencik/libsdcxx",
    "keywords": "",
    "license": "BSD-3-Clause license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysdcxx",
    "package_url": "https://pypi.org/project/pysdcxx/",
    "platform": null,
    "project_url": "https://pypi.org/project/pysdcxx/",
    "project_urls": {
      "Homepage": "https://github.com/vencik/libsdcxx"
    },
    "release_url": "https://pypi.org/project/pysdcxx/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Sørensen–Dice coefficient on string bigram multi-sets (in C++)",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17017388,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4d37c84ea01acae8959cf043b6210e7f8f8dc42bc4b6480a93b4dae945d38c4",
          "md5": "c8faa0b6396f3a52e4f0e9cd101eaecb",
          "sha256": "5b65c79cf99a766646aa7c469a6b591c446eb6cf59b852237bcb5707cc510570"
        },
        "downloads": -1,
        "filename": "pysdcxx-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c8faa0b6396f3a52e4f0e9cd101eaecb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23130,
        "upload_time": "2023-02-24T13:35:28",
        "upload_time_iso_8601": "2023-02-24T13:35:28.547288Z",
        "url": "https://files.pythonhosted.org/packages/c4/d3/7c84ea01acae8959cf043b6210e7f8f8dc42bc4b6480a93b4dae945d38c4/pysdcxx-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d1c8d78ae07364f92d964e00822062c60c13440348716778b93571db68237d4",
          "md5": "1a56c094d82e445ba4d3f528e63b920d",
          "sha256": "049a785458d81ac7f6226cdab556b2d4fc8253ad7409ef02d5dc81f070203992"
        },
        "downloads": -1,
        "filename": "pysdcxx-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a56c094d82e445ba4d3f528e63b920d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23144,
        "upload_time": "2023-02-24T18:08:05",
        "upload_time_iso_8601": "2023-02-24T18:08:05.246723Z",
        "url": "https://files.pythonhosted.org/packages/7d/1c/8d78ae07364f92d964e00822062c60c13440348716778b93571db68237d4/pysdcxx-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae6704ae7e74a571ddd9a4bade186db384152a6177af006ad3d7b9c4a786486b",
          "md5": "e7904609f8f0444bd4bdf3a46f4ef2dc",
          "sha256": "5fda16a65341f39385aa73ede0c833aed9a64ca5ee4544133e9902a07b348fae"
        },
        "downloads": -1,
        "filename": "pysdcxx-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e7904609f8f0444bd4bdf3a46f4ef2dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30277,
        "upload_time": "2023-02-24T18:22:42",
        "upload_time_iso_8601": "2023-02-24T18:22:42.080652Z",
        "url": "https://files.pythonhosted.org/packages/ae/67/04ae7e74a571ddd9a4bade186db384152a6177af006ad3d7b9c4a786486b/pysdcxx-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae6704ae7e74a571ddd9a4bade186db384152a6177af006ad3d7b9c4a786486b",
        "md5": "e7904609f8f0444bd4bdf3a46f4ef2dc",
        "sha256": "5fda16a65341f39385aa73ede0c833aed9a64ca5ee4544133e9902a07b348fae"
      },
      "downloads": -1,
      "filename": "pysdcxx-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e7904609f8f0444bd4bdf3a46f4ef2dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30277,
      "upload_time": "2023-02-24T18:22:42",
      "upload_time_iso_8601": "2023-02-24T18:22:42.080652Z",
      "url": "https://files.pythonhosted.org/packages/ae/67/04ae7e74a571ddd9a4bade186db384152a6177af006ad3d7b9c4a786486b/pysdcxx-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}