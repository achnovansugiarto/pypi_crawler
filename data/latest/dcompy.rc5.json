{
  "info": {
    "author": "jdh99",
    "author_email": "jdh821@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# dcompy\n欢迎前往社区交流：[海萤物联网社区](http://www.ztziot.com)\n\n## 简介\nRPC：Remote Procedure Call，远程过程调用。使用RPC可以让一台计算机的程序程调用另一台计算机的上的程序。\n\nRPC通过把网络通讯抽象为远程的过程调用，调用远程的过程就像调用本地的子程序一样方便，从而屏蔽了通讯复杂性，使开发人员可以无需关注网络编程的细节，将更多的时间和精力放在业务逻辑本身的实现上，提高工作效率。\n\nDCOM：Device Communication Protocol(DCOM)，设备间通信协议。DCOM是针对物联网使用场景开发的RPC框架，主要有如下特点：\n\n- 协议开销极小仅4字节。物联网很多场景都是几十字节的短帧，RPC协议本身的开销如果过大会导致在这些场景无法应用\n- 可以跨语言通信。DCOM协议在设计上与语言无关，无论C，Golang，Python等都可以使用DCOM\n- 可以跨通信介质通信。DCOM协议可以工作在以太网，串口，wifi，小无线等一切通信介质之上\n\n在海萤物联网中，节点间使用DCOM来通信。本文介绍Python语言开发的DCOM包的使用方法。\n\n## 开源\n- [github上的项目地址](https://github.com/jdhxyy/dcom-python)\n- [gitee上的项目地址](https://gitee.com/jdhxyy/dcom-python)\n\n## 安装\n```text\npip install dcompy\n```\n\n## 基础概念\n查看文档 [海萤物联网教程：Go SDK](https://blog.csdn.net/jdh99/article/details/115329550) 基础概念章节。\n\n\n## API\n```python\ndef load(param: LoadParam)\n\t\"\"\"模块载入\"\"\"\n\ndef register(protocol: int, rid: int, callback):\n    \"\"\"\n    注册DCOM服务回调函数\n    :param protocol: 协议号\n    :param rid: 服务号\n    :param callback: 回调函数.格式: func(pipe: int, src_ia: int, req: bytearray) (bytearray, int)\n    :return: 返回值是应答和错误码.错误码为0表示回调成功,否则是错误码\n    \"\"\"\n\ndef receive(protocol: int, pipe: int, src_ia: int, data: bytearray):\n    \"\"\"\n    接收数据.应用模块接收到数据后需调用本函数,本函数接收帧的格式为DCOM协议数据\n    \"\"\"\n\ndef register(protocol: int, rid: int, callback):\n    \"\"\"\n    注册DCOM服务回调函数\n    :param protocol: 协议号\n    :param rid: 服务号\n    :param callback: 回调函数.格式: func(pipe: int, src_ia: int, req: bytearray) (bytearray, int)\n    :return: 返回值是应答和错误码.错误码为0表示回调成功,否则是错误码\n    \"\"\"\n\ndef call(protocol: int, pipe: int, dst_ia: int, rid: int, timeout: int, req: bytearray) -> (bytearray, int):\n    \"\"\"\n    RPC同步调用\n    :param protocol: 协议号\n    :param pipe: 通信管道\n    :param dst_ia: 目标ia地址\n    :param rid: 服务号\n    :param timeout: 超时时间,单位:ms.为0表示不需要应答\n    :param req: 请求数据.无数据可填bytearray()或者None\n    :return: 返回值是应答字节流和错误码.错误码非SYSTEM_OK表示调用失败\n    \"\"\"\n```\n\n- 数据结构\n```python\nclass LoadParam:\n    \"\"\"\n    载入参数\n    \"\"\"\n\n    def __init__(self):\n        # 块传输帧重试间隔.单位:ms\n        self.block_retry_interval = 0\n        # 块传输帧重试最大次数\n        self.block_retry_max_num = 0\n\n        # API接口\n        # 是否允许发送.函数原型:func(pipe: int) bool\n        self.is_allow_send = None  # type: Callable[[int], bool]\n        # 发送的是DCOM协议数据.函数原型:func(protocol: int, pipe: int, dst_ia: int, bytes: bytearray)\n        self.send = None  # type: Callable[[int, int, int, bytearray], None]\n```\n\n- 系统错误码\n```python\n# 系统错误码\n# 正确值\nSYSTEM_OK = 0\n# 接收超时\nSYSTEM_ERROR_RX_TIMEOUT = 0x10\n# 发送超时\nSYSTEM_ERROR_TX_TIMEOUT = 0x11\n# 内存不足\nSYSTEM_ERROR_NOT_ENOUGH_MEMORY = 0x12\n# 没有对应的资源ID\nSYSTEM_ERROR_INVALID_RID = 0x13\n# 块传输校验错误\nSYSTEM_ERROR_WRONG_BLOCK_CHECK = 0x14\n# 块传输偏移地址错误\nSYSTEM_ERROR_WRONG_BLOCK_OFFSET = 0x15\n# 参数错误\nSYSTEM_ERROR_PARAM_INVALID = 0x16\n```\n\n### load：模块载入\n在使用DCOM前必须要初始化。DCOM支持重传，所以在初始化时需输入重传间隔以及重传最大次数。\n\nDCOM与通信介质无关，不同介质可定义不同的管道号。应用程序需要在是否允许发送函数（is_allow_send），以及发送函数（send）中编写不同管道的操作。\n\n- 示例：某节点有两个管道\n```python\nif __name__ == '__main__':\n\tparam = dcompy.LoadParam()\n    param.block_retry_max_num = 5\n    param.block_retry_interval = 1000\n    param.is_allow_send = is_allow_send\n    param.send = send\n    dcompy.load(param)\n\n\ndef is_allow_send(pipe: int) -> bool:\n    if pipe == 1:\n    \treturn is_pipe1_allow_send()\n    else:\n    \treturn is_pipe2_allow_send()\n\n\ndef send(protocol: int, pipe: int, dst_ia: int, data: bytearray):\n    if pipe == 1:\n    \tpipe1_send(data)\n    else:\n    \tpipe2_send(data)\n```\n\nprotocol，dst_ia等字段根据需求处理。\n\n### receive 接收数据\n应用程序接收到数据需要调用receive函数，将数据发送给DCOM。\n\n- 示例：某节点有两个管道都可接收\n```python\ndef pipe1_receive(data: bytearray):\n\tdcom.receive(0, 1, 0x2140000000000101, data)\n\ndef pipe2_receive(data: bytearray):\n\tdcom.Receive(0, 2, 0x2140000000000101, data)\n```\n\n协议号protocol示例中填写的是0，应用时根据实际场景填写。\n\n### register：服务注册\n节点可以通过注册服务开放自身的能力。\n\n- 示例：假设节点2140::101是智能插座，提供控制和读取开关状态两个服务：\n\n```python\ndcom.register(0, 1, control_service)\ndcom.register(0, 2, get_state_service)\n\n// control_service控制开关服务\n// 返回值是应答和错误码.错误码为0表示回调成功,否则是错误码\ndef control_service(pipe: int, src_ia: int, req: bytearray) -> (bytearray, int):\n\tif req[0] == 0:\n\t\toff()\n\telse:\n\t\ton()\n\treturn None, dcom.SystemOK\n\n// get_state_service 读取开关状态服务\n// 返回值是应答和错误码.错误码为0表示回调成功,否则是错误码\ndef get_state_service(pipe: int, src_ia: int, req: bytearray) -> (bytearray, int):\n\treturn bytearray([state()]), dcom.SystemOK\n```\n\n### call：同步调用\n```python\ndef call(protocol: int, pipe: int, dst_ia: int, rid: int, timeout: int, req: bytearray) -> (bytearray, int):\n    \"\"\"\n    RPC同步调用\n    :param protocol: 协议号\n    :param pipe: 通信管道\n    :param dst_ia: 目标ia地址\n    :param rid: 服务号\n    :param timeout: 超时时间,单位:ms.为0表示不需要应答\n    :param req: 请求数据.无数据可填bytearray()或者None\n    :return: 返回值是应答字节流和错误码.错误码非SYSTEM_OK表示调用失败\n    \"\"\"\n```\n\n同步调用会在获取到结果之前阻塞。节点可以通过同步调用，调用目标节点的函数或者服务。timeout字段是超时时间，单位是毫秒。如果目标节点超时未回复，则会调用失败。如果超时时间填0，则表示不需要目标节点回复。\n\n- 示例：2141::102节点控制智能插座2141::101开关状态为开\n\n```python\nresp, errCode = dcom.call(0, 1, 0x2140000000000101, 3000, bytearray([1]))\n```\n\n- 示例：2141::102节点读取智能插座2141::101开关状态\n\n```python\nresp, errCode = dcom.call(0, 2, 0x2140000000000101, 3000, None)\nif errCode == dcom.SystemOK:\n\tprint(\"开关状态:\", resp[0])\n```\n\n## 请求和应答数据格式\nDCOM通信双方发送的数据流都是二进制，请求（req）和应答（resp）的数据类型都是[]uint8。\n\n二进制不利于应用处理，所以会将二进制转换为其他数据类型来处理。常用的有以下三种：\n- 结构体\n- json\n- 字符串\n\n在物联网中，硬件节点的资源有限，且大部分都是使用C语言编写代码。所以建议使用C语言结构体来通信。结构体约定使用1字节对齐，小端模式。\n\n海萤物联网提供sbc库用来进行C语言结构体和二进制流的转换，详情可以查看文档：[海萤物联网教程：sbc：基于python的C语言格式结构体和二进制转换库](https://blog.csdn.net/jdh99/article/details/115388883)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jdhxyy/dcom-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dcompy",
    "package_url": "https://pypi.org/project/dcompy/",
    "platform": "",
    "project_url": "https://pypi.org/project/dcompy/",
    "project_urls": {
      "Homepage": "https://github.com/jdhxyy/dcom-python"
    },
    "release_url": "https://pypi.org/project/dcompy/1.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "dcom python package",
    "version": "1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10564388,
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d800fca349734fa87a01f65e37109856883219fff57d97205c23d38b36766e9",
          "md5": "9757d5bcc0b8624a1f292c177ff0c3c4",
          "sha256": "5855055e71ad284e7f648031b8d2c3b624e21358fb6b31a85407188a87f5f844"
        },
        "downloads": -1,
        "filename": "dcompy-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9757d5bcc0b8624a1f292c177ff0c3c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9063,
        "upload_time": "2021-03-20T21:41:10",
        "upload_time_iso_8601": "2021-03-20T21:41:10.232492Z",
        "url": "https://files.pythonhosted.org/packages/4d/80/0fca349734fa87a01f65e37109856883219fff57d97205c23d38b36766e9/dcompy-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c95c1e6cc6c74f10aae343560138e91e638804ce53d51e3208ef9e133bc48437",
          "md5": "2b3f77af8d621891456cc28385871705",
          "sha256": "f91d80f8a4765d853ee4a93ec2e1caea3e475d9bcfe9d7c06ef3eba547a68bd0"
        },
        "downloads": -1,
        "filename": "dcompy-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2b3f77af8d621891456cc28385871705",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9054,
        "upload_time": "2021-03-21T22:20:21",
        "upload_time_iso_8601": "2021-03-21T22:20:21.335653Z",
        "url": "https://files.pythonhosted.org/packages/c9/5c/1e6cc6c74f10aae343560138e91e638804ce53d51e3208ef9e133bc48437/dcompy-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5037d3089d4e0381cbc4fd2528f10f8d6388ff63b21709033446c7f64a34287d",
          "md5": "c34aaf76d4b33ce916ddea4d92d31dd0",
          "sha256": "fc9c8b32ca38f247deb22034d080fd7cf412add7f192aa57013cd003c6af05fa"
        },
        "downloads": -1,
        "filename": "dcompy-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c34aaf76d4b33ce916ddea4d92d31dd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9064,
        "upload_time": "2021-03-22T00:06:01",
        "upload_time_iso_8601": "2021-03-22T00:06:01.141374Z",
        "url": "https://files.pythonhosted.org/packages/50/37/d3089d4e0381cbc4fd2528f10f8d6388ff63b21709033446c7f64a34287d/dcompy-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "033d7cb0993b26f97e25dd8188208649b51e70449d3f7a22fe53bc2af1ef3c01",
          "md5": "c52195735181241901918a2cef56c2c4",
          "sha256": "050660ca13f1f255381db91a015ae664f08f7fc8ab9161f23c8139201f6daab6"
        },
        "downloads": -1,
        "filename": "dcompy-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c52195735181241901918a2cef56c2c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10735,
        "upload_time": "2021-03-23T22:41:11",
        "upload_time_iso_8601": "2021-03-23T22:41:11.625313Z",
        "url": "https://files.pythonhosted.org/packages/03/3d/7cb0993b26f97e25dd8188208649b51e70449d3f7a22fe53bc2af1ef3c01/dcompy-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "388ae5446ab68f62dd3933370051a8ca8c201d6084959209da6adde97cc058ab",
          "md5": "cb30a678ebdf03e1bfd3d3f0344a7e79",
          "sha256": "0b6bc769845ab3801b6ef78f8e813ee5290f78aca643c9acb65be027509d1aa8"
        },
        "downloads": -1,
        "filename": "dcompy-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cb30a678ebdf03e1bfd3d3f0344a7e79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16489,
        "upload_time": "2021-06-05T08:59:31",
        "upload_time_iso_8601": "2021-06-05T08:59:31.990496Z",
        "url": "https://files.pythonhosted.org/packages/38/8a/e5446ab68f62dd3933370051a8ca8c201d6084959209da6adde97cc058ab/dcompy-1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "388ae5446ab68f62dd3933370051a8ca8c201d6084959209da6adde97cc058ab",
        "md5": "cb30a678ebdf03e1bfd3d3f0344a7e79",
        "sha256": "0b6bc769845ab3801b6ef78f8e813ee5290f78aca643c9acb65be027509d1aa8"
      },
      "downloads": -1,
      "filename": "dcompy-1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "cb30a678ebdf03e1bfd3d3f0344a7e79",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16489,
      "upload_time": "2021-06-05T08:59:31",
      "upload_time_iso_8601": "2021-06-05T08:59:31.990496Z",
      "url": "https://files.pythonhosted.org/packages/38/8a/e5446ab68f62dd3933370051a8ca8c201d6084959209da6adde97cc058ab/dcompy-1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}