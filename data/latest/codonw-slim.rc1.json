{
  "info": {
    "author": "Shyam Saladi",
    "author_email": "saladi@caltech.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Build Status](https://travis-ci.org/smsaladi/codonw-slim.svg?branch=master)](https://travis-ci.org/smsaladi/codonw-slim)\n[![PyPI version](https://badge.fury.io/py/codonw-slim.svg)](https://badge.fury.io/py/codonw-slim)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/codonw-slim)\n[![DOI](https://data.caltech.edu/badge/209835343.svg)](https://data.caltech.edu/badge/latestdoi/209835343)\n\ncodonw-slim\n===========\n\nCodonW is a package for codon usage analysis written by John Peden in\nPaul Sharp's group (University of Nottingham).\nIt was originally designed to simplify multivariate analysis of codon usage\nwith other metrics related to codon usage calculated.\n\ncodonw-slim refactors the original codebase to add Python bindings to the\nunderlying methods written in C and to focus on the *other* codon usage\nmetrics. See below for a list of metrics and their usage.\n\nA detailed description of each metric, with references, can be found in\nin the docstrings of Python methods (`codonw/codonwlib/codonw.pyx`).\nAll of the multivariate analysis code has been removed since this sort of\nanalysis is more easily done in a higher level language\n(e.g. [FactoMineR](https://cran.r-project.org/web/packages/FactoMineR/index.html)).\nThe interative interface has also been removed.\n\nNo error checking of nucleotide sequences is done, e.g. for start,\nstop codons, internal stops codons, non-translatable, and partial codons.\nUsers should do this themself to inputs provided. For more information about\nhow amino acids and codons have are represented internally (`Recoding.md`).\n\nThe source code and releases for codonw-slim can be obtained from\nhttps://www.github.com/smsaladi/codonw-slim. Please report bugs and improvements\nvia pull requests at this repository. All modifications must pass regression\ntesting.\n\n\n## Build and Installation\n\n```bash\npip install codonw-slim\n```\n\n## Usage\n\nThe following metrics are available:\n\n* codon adaptation index (CAI)\n    - `CodonSeq.cai`\n* frequency of optimal codons (Fop)\n    - `CodonSeq.fop`\n* codon bias index (CBI)\n    - `CodonSeq.cbi`\n* the effective number of codons (Nc)\n    - `CodonSeq.enc`\n* hydropathicity of protein\n    - `CodonSeq.hydropathy`\n* aromaticity score\n    - `CodonSeq.aromaticity`\n* Silent base composition (including GC3s)\n    - `CodonSeq.silent_base_usage`\n* Codon & Amino acid usage (count and relative)\n    - `CodonSeq.codon_usage`\n    - `CodonSeq.aa_usage`\n    - `CodonSeq.rscu`\n    - `CodonSeq.raau`\n* Base composition by codon position\n    - `CodonSeq.bases`\n* Base composition in all frames,\n    Length of gene,\n    Number of synonymous codons,\n    G+C content (overall and by codon position),\n    G+C content of synonymous codons at the 3rd position,\n    G+C content of non-synonymous codons at the 3rd position,\n    Number of synonymous codons,\n    Number of amino acids\n    - `CodonSeq.bases2`\n* Dinucleotide count by frame\n    - `CodonSeq.dinuc`\n\nAs written above, each is a method of the `codonw.CononSeq` object, e.g.\n\n```python\nimport codonw\ncseq = codonw.CodonSeq(\"ATGAATATGCTCATTGTCGGTAGAGTTGTTGCTAGTGTTGGGGGAAGCGGACTTCAAACG\")\ncseq.cai()\n```\n\nThe return type can be a simple value, `pd.Series`, or `pd.DataFrame`.\n\nThe genetic codes can be specified by setting the `CodonSeq.genetic_code`\nproperty with a `pd.Series` whose index is a codon and value is the single\nletter amino acid. Instantiate an object and see `CodonSeq.genetic_code`\nfor more details.\n\nSome indicies have an option of reference values to choose from (e.g. `CodonSeq.fop`).\nSeveral references values can be chosen by specifying the corresponding integer.\nIf you'd like to have user-provided reference values, please implement this\nfunctionality and make a pull-request.\n\n\n## Why the name codonW?\n\nExcerpted directly from John Peden's CodonW README...\n\nWell first you must realise that \"clustal\" (a very popular multiple\nalignment program by Des Higgins) was originally written in Paul's lab in\nTrinity College Dublin. Clustal has since been rewritten from FORTRAN into\nC and undergone several name changes clustal-> clustalv-> clustalw ->\nclustalx. There was also a program called \"codons\" written in FORTRAN by\nAndrew Lloyd (a post-doc in Paul's lab), this was the original inspiration\nfor codonW. An early version of codonW, written in C, was called codonv.\nWhen the code was enhanced to include multivariate analysis, what better\nname than codonW.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/smsaladi/codonw-slim",
    "keywords": "",
    "license": "GPLv2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "codonw-slim",
    "package_url": "https://pypi.org/project/codonw-slim/",
    "platform": "",
    "project_url": "https://pypi.org/project/codonw-slim/",
    "project_urls": {
      "Homepage": "https://github.com/smsaladi/codonw-slim"
    },
    "release_url": "https://pypi.org/project/codonw-slim/1.5.0.post1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "1.5.0.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6672884,
  "releases": {
    "1.5.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0e61ca93c1c64a5412240121ebf76ae0d69bd165757a43a5488254f3aded797",
          "md5": "a47d5d79766efcfb8ebca3fc5f1d3f35",
          "sha256": "1482daa7272d243d7fc9cee77ccb6a38356bdbe140dd5fc53e37879141d20681"
        },
        "downloads": -1,
        "filename": "codonw-slim-1.5.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "a47d5d79766efcfb8ebca3fc5f1d3f35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 174411,
        "upload_time": "2020-02-21T03:54:48",
        "upload_time_iso_8601": "2020-02-21T03:54:48.880192Z",
        "url": "https://files.pythonhosted.org/packages/b0/e6/1ca93c1c64a5412240121ebf76ae0d69bd165757a43a5488254f3aded797/codonw-slim-1.5.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0e61ca93c1c64a5412240121ebf76ae0d69bd165757a43a5488254f3aded797",
        "md5": "a47d5d79766efcfb8ebca3fc5f1d3f35",
        "sha256": "1482daa7272d243d7fc9cee77ccb6a38356bdbe140dd5fc53e37879141d20681"
      },
      "downloads": -1,
      "filename": "codonw-slim-1.5.0.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "a47d5d79766efcfb8ebca3fc5f1d3f35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 174411,
      "upload_time": "2020-02-21T03:54:48",
      "upload_time_iso_8601": "2020-02-21T03:54:48.880192Z",
      "url": "https://files.pythonhosted.org/packages/b0/e6/1ca93c1c64a5412240121ebf76ae0d69bd165757a43a5488254f3aded797/codonw-slim-1.5.0.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}