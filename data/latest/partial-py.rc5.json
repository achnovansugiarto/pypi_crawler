{
  "info": {
    "author": "Marpple",
    "author_email": "dev@marpple.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Web Environment",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Functional Python Library - Partial.py\n======================================\n\n`Site <https://marpple.github.io/partial.py/>`__ \\|\n`Docs <https://marpple.github.io/partial.py/docs>`__\n\nPartial.py는 함수형 파이썬을 더 많은 영역에서 사용하고자, 몇 가지 기능을\n확장한 라이브러리입니다. Partial.py는 부분 적용, 파이프라인, 비동기 제어\n등의 기능을 제공하고 있습니다.\n\n설치하기\n--------\n\nPartial.py 설치\n~~~~~~~~~~~~~~~\n\ngit으로 설치하기:\n'''''''''''''''''\n\n.. code:: bash\n\n    $ git clone https://github.com/marpple/partial.py.git\n    $ cd partial.py\n    $ sudo python setup.py install\n\n**혹은**\n\npypi로 설치하기:\n''''''''''''''''\n\n.. code:: bash\n\n    $ pip install partial.py\n\nPartial.py 사용\n~~~~~~~~~~~~~~~\n\n네임스페이스로 사용할 ``_``, ``__``, ``___``\\ 를 불러옵니다.\n\n.. code:: python\n\n    from partial import _, __, ___\n\n더 나은 부분 적용 (Partial application)\n---------------------------------------\n\nPartial.py는 이름처럼 부분 적용(Partial application)을 중요하게\n생각합니다. 기존의 ``_.partial`` 함수는 왼쪽에서부터만 인자를 적용해둘\n수 있습니다. Partial.py의 ``_.partial`` 함수는 맨 오른쪽 인자나 맨\n오른쪽에서 두 번째에만 인자를 적용해두는 것도 가능하며, 새로운 구분자인\n``___``\\ 를 활용하여 중간 지점에 인자가 가변적으로 적용되도록 비워둘 수\n있습니다.\n\n\\_.partial의 일반적 사용\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n``_.partial``\\ 을 실행하면서 인자 자리에 ``_``\\ 를 넘기면 부분 적용할\n인자를 건너띌 수 있습니다. ``_``\\ 를 이용하면 원하는 곳에만 인자를 부분\n적용해둘 수 있습니다. ``_``\\ 가 있는 자리는 이후 실행시 채워집니다.\n\n.. code:: python\n\n    pc = _.partial(print, 1)\n    pc(2)\n    # 결과: 1 2\n    # 2 가 오른쪽으로 들어갑니다.\n    pc(2, 3)\n    # 결과: 1 2 3\n    # 2, 3이 오른쪽으로 들어갑니다.\n\n    pc = _.partial(print, _, 2)\n    pc(1)\n    # 결과: 1 2\n    # 1이 왼쪽의 _ 자리에 들어갑니다.\n    pc(1, 3)\n    # 결과: 1 2 3\n    # 1이 왼쪽의 _ 자리에 들어가고 3이 오른쪽으로 들어갑니다.\n\n    pc = _.partial(print, _, _, 3)\n    pc(1)\n    # 결과: 1 undefined 3\n    # 1이 왼쪽의 _ 자리에 들어가고 두 번째 _는 들어오지 않아 undefined가 됩니다.\n    pc(1, 2)\n    # 결과: 1 2 3\n    # 1과 2가 순서대로 _, _를 채웁니다.\n    pc(1, 2, 4)\n    # 결과: 1 2 3 4\n    # 1과 2가 순서대로 _, _를 채우고 3의 오른쪽으로 4가 들어갑니다.\n\n    pc = _.partial(print, _, 2, _, 4)\n    pc(1, 3, 5)\n    # 결과: 1 2 3 4 5\n    # 1을 _ 자리에 채우고 2를 넘겨서 _에 3을 채우고 4의 오른쪽에 5가 들어갑니다.\n\n    pc = _.partial(print, _, 2, _, _, 5)\n    pc(1, 3, 4, 6)\n    # 결과: 1 2 3 4 5 6\n    # 1을 _ 자리에 채우고 2를 넘겨서 _에 3을 채우고 다음 _에 4를 채우고 5의 오른쪽에 6이 들어갑니다.\n\n오른쪽에서부터 인자 적용해두기\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``_.partial``\\ 을 실행하면 ``___``\\ 를 기준으로 왼편의 인자들을 왼쪽부터\n적용하고 오른편의 인자들을 오른쪽부터 적용할 준비를 해둔 함수를\n리턴합니다. 부분 적용된 함수를 나중에 실행하면 그때 받은 인자들로 왼쪽과\n오른쪽을 먼저 채운 후, 남은 인자들로 가운데 ``___`` 자리를 채웁니다.\n\n.. code:: python\n\n    pc = _.partial(print, ___, 2, 3)\n    pc(1)\n    # 결과: 1 2 3\n    # ___ 자리에 1이 들어가고 2, 3은 맨 오른쪽에 들어갑니다.\n    pc(1, 4, 5, 6)\n    # 결과: 1 4 5 6 2 3\n    # ___ 자리에 1, 4, 5, 6이 들어가고 2, 3은 맨 오른쪽에 들어갑니다.\n\n    pc = _.partial(print, _, 2, ___, 6)\n    pc(1, 3, 4, 5)\n    # 결과: 1 2 3 4 5 6\n    # _에 1이 들어가고 2를 넘어가고 ___ 자리에 3, 4, 5가 채워지고 6이 맨 오른쪽에 들어갑니다.\n    pc(1, 3, 4, 5, 7, 8, 9)\n    # 결과: 1 2 3 4 5 7 8 9 6\n    # _에 1이 들어가고 2를 넘어가고 ___ 자리에 3, 4, 5, 7, 8, 9가 채워지고 6이 맨 오른쪽에 들어갑니다.\n\n    pc = _.partial(print, _, 2, ___, 5, _, 7)\n    pc(1)\n    # 결과: 1 2 5 undefined 7\n    # _ 자리에 1이 들어가고 2와 5사이는 유동적이므로 모이고 5가 들어간 후 _가 undefined로 대체 되고 7이 들어갑니다.\n    pc(1, 3, 4)\n    # 결과: 1 2 3 5 4 7\n    # _ 자리에 1이 들어가고 2와 5사이에 3이 들어가고 _ 를 4로 채운 후 7이 들어갑니다.\n    # 왼쪽의 _ 들이 우선 순위가 제일 높고 ___ 보다 오른쪽의 _ 들이 우선순위가 높습니다.\n    pc(1, 3, 4, 6, 8)\n    # 결과: 1 2 3 4 6 5 8 7\n    # _ 자리에 1이 들어가고 2와 5사이에 3, 4, 6이 들어가고 _ 를 8로 채운 후 7이 들어갑니다.\n\n간결하게 사용하기\n~~~~~~~~~~~~~~~~~\n\n``_ == _.partial``\\ 입니다. ``_.partial``\\ 을 ``_``\\ 로 간결하게 표현할\n수 있습니다.\n\n.. code:: python\n\n    def add (a, b): \n      return a + b\n      \n    add10 = _(add, 10)\n    print( add10(5) )\n    # 15\n\n파이프라인\n----------\n\n파이프라인 함수인 ``_.pipe``, ``_.go`` 등은 작은 함수들을 모아 큰 함수를\n만드는 함수입니다. 파이프라인으로 함수를 조합하면 왼쪽에서부터 오른쪽,\n위에서부터 아래로 표현되어 읽기 쉬운 코드가 됩니다. 체인 방식과 다르게\n아무 함수나 사용할 수 있어 자유도가 높습니다. 작은 함수들을 인자와\n결과만을 생각하면서 조합하면 됩니다.\n\n즉시 실행과 Multiple Results\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``_.go``\\ 는 파이프라인의 즉시 실행 버전입니다. 첫 번째 인자로 받은 값을\n두 번째 인자로 받은 함수에게 넘겨주고 두 번째 인자로 받은 함수의 결과는\n세 번째 함수에게 넘겨주는 것을 반복하다가 마지막 함수의 결과를\n리턴해줍니다.\n\n.. code:: python\n\n    _.go(10, # 첫 번째 함수에서 사용할 인자\n      lambda a: a * 10, # 연속 실행할 함수 1\n      # 100\n      lambda a: a - 50, # 연속 실행할 함수 2\n      # 50\n      lambda a: a + 10) # 연속 실행할 함수 3\n      # 60\n\n``_.go``\\ 는 Multiple Results를 지원합니다. ``_.mr`` 함수를 함께\n사용하면 다음 함수에게 2개 이상의 인자들을 전달할 수 있습니다.\n\n.. code:: python\n\n    _.go(10, # 첫 번째 함수에서 사용할 인자\n      lambda a: _.mr(a * 10, 50), # 두 개의 값을 리턴\n      lambda a, b: a - b, # 두 개의 인자 받기\n      lambda a: a + 10)\n      # 60\n\n``_.go``\\ 의 첫 번째 인자는 두 번째 인자인 함수가 사용할 인자고 두 번째\n부터는 파이프라인에서 사용할 함수들입니다. ``_.go``\\ 의 두 번째 인자인\n함수, 즉 최초 실행될 함수에게 2개 이상의 인자를 넘기고자 한다면\n``_.mr``\\ 을 사용하면 됩니다. ``_.mr``\\ 로 인자들을 감싸서 넘겨주면,\n다음 함수는 인자를 여러 개로 펼쳐서 받게 됩니다.\n\n.. code:: python\n\n    _.go(_.mr(2, 3),\n      lambda a, b: a + b, # 2 + 3\n      lambda a: a * a)\n      # 25\n\n``_.go``\\ 를 이미 정의되어 있는 함수와 조합하면 더욱 읽기 좋아집니다.\n\n.. code:: python\n\n    def add(a, b):\n      return a + b\n      \n    def square(a):\n      return a * a\n      \n    _.go(_.mr(2, 3), add, square)\n    # 25\n\n파이프라인 함수를 리턴하는 \\_.pipe\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``_.go``\\ 가 즉시 실행하는 파이프라인이라면 ``_.pipe``\\ 는 실행할 준비가\n된 함수를 리턴하는 파이프라인 함수입니다. 그외 모든 기능은 ``_.go``\\ 와\n동일합니다.\n\n.. code:: python\n\n    f1 = _.pipe(add, square)\n    f1(2, 3)\n    # 25\n\n부분 커링\n---------\n\n커링이 부분적으로 동작하는 함수\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPartial.py의 주요 함수들은 커링이 부분적으로 동작하도록 지원하고\n있습니다. 아래는 일반적인 사용 모습입니다.\n\n일반적인 방식:\n''''''''''''''\n\n.. code:: python\n\n    values = lambda data: _.map(data, lambda v, *r: v)\n    print(values({ 'a': 1, 'b': 2, 'c': 4 }))\n    # [1, 2, 4]\n\n    take3 = lambda data: _.take(data, 3)\n    take3([1, 2, 3, 4, 5])\n    # [1, 2, 3]\n\nPartial.py의 주요 함수들은 부분 커링이 적용되어 위와 동일한 동작을\n아래와 같이 간결하게 표현할 수 있습니다.\n\n부분 커링이 지원될 경우:\n''''''''''''''''''''''''\n\n.. code:: python\n\n    values = _.map(lambda v, *r: v)\n    print(values({ 'a': 1, 'b': 2, 'c': 4 }))\n    # [1, 2, 4]\n\n    take3 = _.take(3)\n    take3([1, 3, 5, 7, 9])\n    # [1, 3, 5]\n\n파이프라인과 함께\n~~~~~~~~~~~~~~~~~\n\n부분 커링이 지원되면 파이프라인과 함께 사용할 때, 체인처럼 간결한 표현이\n가능합니다.\n\n.. code:: python\n\n    users = [\n      { 'id': 1, 'name': 'ID', 'age': 32 },\n      { 'id': 2, 'name': 'HA', 'age': 25 },\n      { 'id': 3, 'name': 'BJ', 'age': 32 },\n      { 'id': 4, 'name': 'PJ', 'age': 28 },\n      { 'id': 5, 'name': 'JE', 'age': 27 },\n      { 'id': 6, 'name': 'JM', 'age': 32 },\n      { 'id': 7, 'name': 'JI', 'age': 31 }\n    ]\n\n    ## 일반적인 사용\n    _.go(users,\n      lambda users: _.filter(users, lambda u, *r: u['age'] < 30),\n      lambda users: _.pluck(users, 'name'),\n      print)\n    # ['HA', 'PJ', 'JE']\n\n    ## 부분 커링이 된다면\n    _.go(users,\n      _.filter(lambda u, *r: u['age'] < 30),\n      _.pluck('name'),\n      print)\n    # ['HA', 'PJ', 'JE']\n\n    ## Underscore.py 체인\n    underscore\\\n      .chain(users)\\\n      .filter(lambda u: u['age'] < 30)\\\n      .pluck('name')\\\n      .tap(print)\n    # ['HA', 'PJ', 'JE']\n\n``_.go``, ``_.pipe`` 등의 파이프라인이 받는 재료는 함수이기 때문에 아무\n함수나 조합할 수 있습니다. 체인처럼 메서드 등으로 준비되어있지 않아도\n되며 Partial.py의 함수만 사용할 필요도 없습니다. Partial.py의\n파이프라인은 결과를 여러 개로 리턴할 수 있고, 여러 개의 인자를 받을 수\n있고, 다른 라이브러리에 있는 함수든, 직접 만든 함수든, 익명 함수든 모두\n쉽게 사용할 수 있습니다.\n\n.. code:: python\n\n    products = [\n      { 'id': 1, 'name': '후드 집업', 'discounted_price': 6000, 'price': 10000  },\n      { 'id': 2, 'name': '코잼 후드티', 'discounted_price': 8000, 'price': 8000  },\n      { 'id': 3, 'name': 'A1 반팔티', 'discounted_price': 6000, 'price': 6000  },\n      { 'id': 4, 'name': '코잼 반팔티', 'discounted_price': 5000, 'price': 6000  }\n    ]\n\n    # 할인 상품들을 가격이 낮은 순으로 정렬한 상품 이름들\n    _.go(products,\n      _.filter(lambda p, *r: p['price'] > p['discounted_price']),\n      _.sortBy('discounted_price'),\n      _.pluck('name'),\n      print)\n      # ['코잼 반팔티', '후드 집업']\n\n    # 할인이 없는 상품들의 id들\n    _.go(products,\n      _.reject(lambda p, *r: p['price'] > p['discounted_price']),\n      _.pluck('id'),\n      print)\n      # [2, 3]\n\n    # 할인 상품 중 할인액이 가장 낮은 상품의 이름\n    _.go(products,\n      _.filter(lambda p, *r: p['price'] > p['discounted_price']),\n      _.min(lambda p, *r: p['price'] - p['discounted_price']),\n      _.val('name'),\n      print)\n      # 코잼 반팔티\n\n    # 할인액이 가장 높은 상품의 이름\n    _.go(products,\n      _.max(lambda p, *r: p['price'] - p['discounted_price']),\n      _.val('name'),\n      print)\n      # 후드 집업\n\n비동기\n------\n\n``async``, ``await`` 키워드와 Partial.py를 함께 사용하면 다양한 비동기\n상황을 간단히 제어할 수 있습니다.\n\n파이프라인으로 비동기 제어 하기\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``_.asy``\\ 를 네임스페이스로 갖는 ``_.asy.go``, ``_.asy.pipe`` 등의\n파이프라인 함수들은 비동기 제어를 지원합니다.\n\nawait 키워드와 함께 사용:\n'''''''''''''''''''''''''\n\n.. code:: python\n\n    async def asy_add(val, *r):\n      await asyncio.sleep(1)\n      return val + 10\n      \n    ## await 키워드를 사용해서 바로 실행하는 _.go.asy\n    await _.asy.go(10,\n      asy_add,\n      print)\n      # 20\n      \n    ## _.asy.pipe로 비동기 함수와 동기 함수 조합해 만든 새로운 함수\n    asy_pipe = _.asy.pipe(asy_add, print)\n    await asy_pipe(10) \n    # 20\n\n    ## _.pipe는 비동기 함수를 만나면 자동으로 _.asy.pipe가 됩니다.\n    asy_pipe = _.pipe(asy_add, print)\n    await asy_pipe(10)\n    # 20\n\n컬렉션을 다루는 비동기 제어 함수\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPartial.py의 ``_.each``, ``_.map``, ``_.reduce`` 등의 주요 함수들은\n``_.asy.go``\\ 와 ``_.asy.pipe``\\ 처럼 동기와 비동기 상황이 모두\n대응되도록 되어 있습니다. Partial.py의 함수를 이용하면 비동기 상황에서도\n동기 상황과 동일한 코드를 작성할 수 있고, 비동기 함수와 동기 함수의\n조합도 가능합니다.\n\n.. code:: python\n\n    async def asyncDate(*r):\n      await asyncio.sleep(1)\n      return datetime.datetime.now()\n\n    def syncDate(*r):\n      return datetime.datetime.now()\n\n    _.go(\n      [1, 2, 3],\n      _.map(syncDate),\n      _.map(lambda now, *r: now.strftime('%Y-%m-%d %H:%M:%S')),\n      print)\n    # ['2017-06-16 12:34:39', '2017-06-16 12:34:39', '2017-06-16 12:34:39']\n\n    await _.asy.go(\n      [1, 2, 3],\n      _.map(asyncDate),\n      _.map(lambda now, *r: now.strftime('%Y-%m-%d %H:%M:%S')),\n      print)\n    # ['2017-06-16 12:34:39', '2017-06-16 12:34:39', '2017-06-16 12:34:39']\n\n위 사례처럼 Partial.py는 ``_.pipe``, ``_.each``, ``_.map``, ``_.find``,\n``_.filter``, ``_.reject``, ``_.reduce``, ``_.some``, ``_.every`` 등의\n함수들에서 자동 비동기 제어 로직을 지원합니다.\n\n지연 평가 L\n-----------\n\nPartial.py의 ``L``\\ 을 이용하면, 파이프라인 내부에서 함수들의 실행\n순서를 재배치하여 적절하게 평가를 지연합니다. 사용법은 간단합니다.\nPartial.py에서 ``L``\\ 을 ``import``\\ 하면 됩니다. ``L``\\ 을 통해 지연\n평가할 영역을 명시적으로 선택할 수 있습니다. ``_.go, _.pipe``\\ 등의\n파이프라인이 ``L``\\ 로 시작하여 ``L``\\ 로 끝날 때까지의 함수들을\n재배치하여 성능을 개선합니다.\n\n비교\n~~~~\n\n엄격한 평가:\n''''''''''''\n\n.. code:: python\n\n    list = [1, 2, 3, 4, 5, 6]\n    _.go(list,\n      _.map(lambda v, *r: v * v), # 6번\n      _.filter(lambda v, *r: v < 20), # 6번\n      _.take(2),\n      print)\n    # [1, 4]\n    # 총 12번\n\n지연 평가:\n''''''''''\n\n.. code:: python\n\n    list = [1, 2, 3, 4, 5, 6]\n    _.go(list,\n      L.map(lambda v, *r: v * v), # 2번\n      L.filter(lambda v, *r: v < 20), # 2번\n      L.take(2),\n      print)\n    # [1, 4]\n    # 총 4번  \n\n지원 함수들\n~~~~~~~~~~~\n\nPartial.js의 지연 평가 지원 함수로는 ``L.map``, ``L.filter``,\n``L.reject``, ``L.find``, ``L.some``, ``L.every``, ``L.take``\\ 가\n있습니다. 이 함수들을 순서대로 나열하면 파이프라인이 평가 시점을\n변경하여 성능을 개선합니다.\n\n다음과 같은 상황 등에서 동작합니다.\n\n-  map->map->map\n-  map->take\n-  filter->take\n-  map->filter->take\n-  map->filter->map->map\n-  map->filter->map->take\n-  map->reject->map->map->filter->map\n-  map->some\n-  map->every\n-  map->find\n-  map->filter->some\n-  map->filter->every\n-  map->filter->find\n-  filter->map->some\n-  filter->map->every\n-  filter->map->reject->find\n\n지연 평가를 시작시키고 유지 시키는 함수는 ``map``, ``filter``,\n``reject``\\ 이고 끝을 내는 함수는 ``take``, ``some``, ``every``,\n``find``, 입니다.\n\n.. code:: python\n\n    users = [\n      { 'id': 1, 'name': 'ID', 'age': 12 },\n      { 'id': 2, 'name': 'BJ', 'age': 28 },\n      { 'id': 3, 'name': 'HA', 'age': 13 },\n      { 'id': 4, 'name': 'PJ', 'age': 23 },\n      { 'id': 5, 'name': 'JE', 'age': 29 },\n      { 'id': 6, 'name': 'JM', 'age': 32 },\n      { 'id': 7, 'name': 'JE', 'age': 31 },\n      { 'id': 8, 'name': 'HI', 'age': 15 },\n      { 'id': 9, 'name': 'HO', 'age': 28 },\n      { 'id': 10, 'name': 'KO', 'age': 34 }\n    ]\n\n    # 10대 2명까지만 찾아내기\n    _.go(users,\n      L.filter(lambda user, *r : user['age'] < 20),\n      L.take(2),\n      print)\n    # [{ 'id': 1, 'name': 'ID', 'age': 12 }, { 'id': 3, 'name': 'HA', 'age': 13 }]\n    # 3번만 반복\n\n    # 10대 2명까지만 찾아내서 이름 수집하기\n    _.go(users,\n      L.filter(lambda user, *r : user['age'] < 20),\n      L.map(lambda v, *r : v['name']),\n      L.take(2),\n      print)\n    # ['ID', 'HA']\n    # 3번만 반복\n\nL.strict\n~~~~~~~~\n\n``L.strict``\\ 를 이용하여 지연 평가를 동작시킬 것인가를 동적으로 변경할\n수 있습니다.\n\n숫자로 하기:\n''''''''''''\n\n.. code:: python\n\n    strict_or_lazy1 = __(\n      _.range,\n      L.strict(100),\n      L.map(lambda v, *r: v * v),\n      L.filter(lambda v, *r: _.bool(v % 2)),\n      L.take(10),\n      print)\n\n    strict_or_lazy1(50)\n    # [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n    # 50 번 반복 (염격)\n\n    strict_or_lazy1(100)\n    # [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n    # 20 번 반복 (지연)\n\n    strict_or_lazy1(15)\n    # [1, 9, 25, 49, 81, 121, 169]\n    # 15 번 반복 (엄격)\n\n함수로 하기:\n''''''''''''\n\n.. code:: python\n\n    strict_or_lazy2 = __(\n      _.range,\n      L.strict(lambda list, *r : len(list) < 100),\n      L.map(lambda v, *r : v * v),\n      L.filter(lambda v, *r : bool(v % 2)),\n      L.take(10),\n      print)\n\n    strict_or_lazy2(50)\n    # [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n    # 50 번 반복 (염격)\n\n    strict_or_lazy2(100)\n    # [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n    # 20 번 반복 (지연)\n\n    strict_or_lazy2(15)\n    # [1, 9, 25, 49, 81, 121, 169]\n    # 15 번 반복 (엄격)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marpple/partial.py",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "partial.py",
    "package_url": "https://pypi.org/project/partial.py/",
    "platform": "",
    "project_url": "https://pypi.org/project/partial.py/",
    "project_urls": {
      "Homepage": "https://github.com/marpple/partial.py"
    },
    "release_url": "https://pypi.org/project/partial.py/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Functional Python Library",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2958653,
  "releases": {
    "0.1.0": [],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e937d291287f8f4a1721b7505d7712dbf6dcd719bf7b3cfc21996d3bc10b714",
          "md5": "74790a9072b344a8f3764e14c1e16493",
          "sha256": "bf2c66ea41cfb1187d152afbefc40d925c8439cc538b4a256f0068a16fc230e9"
        },
        "downloads": -1,
        "filename": "partial.py-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "74790a9072b344a8f3764e14c1e16493",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7638,
        "upload_time": "2017-06-15T05:37:30",
        "upload_time_iso_8601": "2017-06-15T05:37:30.212487Z",
        "url": "https://files.pythonhosted.org/packages/7e/93/7d291287f8f4a1721b7505d7712dbf6dcd719bf7b3cfc21996d3bc10b714/partial.py-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d66e15f576700b47e349d6abf20e01abd2c54358dd8272f3809313879a78034",
          "md5": "5764585d8c6527a63e63c2e69b249d4b",
          "sha256": "f39ad2a79dc4e49c28184061816300c755e437f713af459ed647aabc3db6d104"
        },
        "downloads": -1,
        "filename": "partial.py-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5764585d8c6527a63e63c2e69b249d4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11932,
        "upload_time": "2017-06-15T07:51:31",
        "upload_time_iso_8601": "2017-06-15T07:51:31.876780Z",
        "url": "https://files.pythonhosted.org/packages/6d/66/e15f576700b47e349d6abf20e01abd2c54358dd8272f3809313879a78034/partial.py-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec43b9d69303fa81eba9534212967864d33db1784a61dec7b58c913bf26a4e3e",
          "md5": "829467fbed9d4dd36a4964cedb8cf7dc",
          "sha256": "dee0a6565a7f6a9041d8462aec70429e3c2f74f8e3639667532229089f888ddd"
        },
        "downloads": -1,
        "filename": "partial.py-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "829467fbed9d4dd36a4964cedb8cf7dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14911,
        "upload_time": "2017-06-19T03:34:48",
        "upload_time_iso_8601": "2017-06-19T03:34:48.084306Z",
        "url": "https://files.pythonhosted.org/packages/ec/43/b9d69303fa81eba9534212967864d33db1784a61dec7b58c913bf26a4e3e/partial.py-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67568908eaa7cc04a9437cc8c9d39963bcb3c48c649d2b1a8bbfd36f9e7929dd",
          "md5": "2a5ff2a9d21a8de476d2e5ab94dbdd7d",
          "sha256": "34a19546e60f1bcf34aee2b9325fe7e4615024655d5034010d734d0c485b185d"
        },
        "downloads": -1,
        "filename": "partial.py-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2a5ff2a9d21a8de476d2e5ab94dbdd7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14917,
        "upload_time": "2017-06-19T05:19:38",
        "upload_time_iso_8601": "2017-06-19T05:19:38.104381Z",
        "url": "https://files.pythonhosted.org/packages/67/56/8908eaa7cc04a9437cc8c9d39963bcb3c48c649d2b1a8bbfd36f9e7929dd/partial.py-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67568908eaa7cc04a9437cc8c9d39963bcb3c48c649d2b1a8bbfd36f9e7929dd",
        "md5": "2a5ff2a9d21a8de476d2e5ab94dbdd7d",
        "sha256": "34a19546e60f1bcf34aee2b9325fe7e4615024655d5034010d734d0c485b185d"
      },
      "downloads": -1,
      "filename": "partial.py-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "2a5ff2a9d21a8de476d2e5ab94dbdd7d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14917,
      "upload_time": "2017-06-19T05:19:38",
      "upload_time_iso_8601": "2017-06-19T05:19:38.104381Z",
      "url": "https://files.pythonhosted.org/packages/67/56/8908eaa7cc04a9437cc8c9d39963bcb3c48c649d2b1a8bbfd36f9e7929dd/partial.py-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}