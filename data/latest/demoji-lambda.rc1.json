{
  "info": {
    "author": "Brad Solomon",
    "author_email": "bsolomon@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "# demoji_lambda\n\nForked from https://github.com/bsolomon1124/demoji\n\nAccurately find or remove [emojis](https://en.wikipedia.org/wiki/Emoji) from a blob of text.\n\n[![License](https://img.shields.io/github/license/bsolomon1124/demoji.svg)](https://github.com/bsolomon1124/demoji/blob/master/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/demoji.svg)](https://pypi.org/project/demoji/)\n[![Status](https://img.shields.io/pypi/status/demoji.svg)](https://pypi.org/project/demoji/)\n[![Python](https://img.shields.io/pypi/pyversions/demoji.svg)](https://pypi.org/project/demoji)\n\n-------\n\n## Basic Usage\n\n`demoji` requires an initial data download from the Unicode Consortium's [emoji code repository](http://unicode.org/Public/emoji/12.0/emoji-test.txt).\n\nOn first use of the package, call `download_codes()`:\n\n```python\n>>> import demoji\n>>> demoji.download_codes()\nDownloading emoji data ...\n... OK (Got response in 0.14 seconds)\nWriting emoji data to /Users/brad/.demoji/codes.json ...\n... OK\n```\n\nThis will store the Unicode hex-notated symbols at `~/.demoji/codes.json` for future use.\n\n`demoji` exports several text-related functions for find-and-replace functionality with emojis:\n\n```python\n>>> tweet = \"\"\"\\\n... #startspreadingthenews yankees win great start by üéÖüèæ going 5strong innings with 5k‚Äôsüî• üêÇ\n... solo homerun üåãüåã with 2 solo homeruns andüëπ 3run homerun‚Ä¶ ü§° üö£üèº üë®üèΩ‚Äç‚öñÔ∏è with rbi‚Äôs ‚Ä¶ üî•üî•\n... üá≤üáΩ and üá≥üáÆ to close the gameüî•üî•!!!‚Ä¶.\n... WHAT A GAME!!..\n... \"\"\"\n>>> demoji.findall(tweet)\n{\n    \"üî•\": \"fire\",\n    \"üåã\": \"volcano\",\n    \"üë®üèΩ\\u200d‚öñÔ∏è\": \"man judge: medium skin tone\",\n    \"üéÖüèæ\": \"Santa Claus: medium-dark skin tone\",\n    \"üá≤üáΩ\": \"flag: Mexico\",\n    \"üëπ\": \"ogre\",\n    \"ü§°\": \"clown face\",\n    \"üá≥üáÆ\": \"flag: Nicaragua\",\n    \"üö£üèº\": \"person rowing boat: medium-light skin tone\",\n    \"üêÇ\": \"ox\",\n}\n```\n\nSee [below](#reference) for function API.\n\nThe reason that `demoji` requires a download rather than coming pre-packaged with Unicode emoji data is that the emoji list itself is frequently updated and changed.  You are free to periodically update the local cache by calling `demoji.download_codes()` every so often.\n\nTo pull your last-downloaded date, you can use the `last_downloaded_timestamp()` helper:\n\n```python\n>>> demoji.last_downloaded_timestamp()\ndatetime.datetime(2019, 2, 9, 7, 42, 24, 433776, tzinfo=<demoji.UTC object at 0x101b9ecf8>)\n```\n\nThe result will be `None` if codes have not previously been downloaded.\n\n## Reference\n\nNote: `Text` refers to [`typing.Text`](https://docs.python.org/3/library/typing.html#typing.Text), an alias for `str` in Python 3 or `unicode` in Python 2.\n\n```python\ndownload_codes() -> None\n```\n\nDownload emoji data to \\~/.demoji/codes.json.  Required at first module usage, and can be used to periodically update data.\n\n```python\nfindall(string: Text) -> Dict[Text, Text]\n```\n\nFind emojis within `string`.  Return a mapping of `{emoji: description}`.\n\n```python\nfindall_list(string: Text, desc: bool = True) -> List[Text]\n```\n\nFind emojis within `string`.  Return a list (with possible duplicates).\n\nIf `desc` is True, the list contains description codes.  If `desc` is False, the list contains emojis.\n\n```python\nreplace(string: Text, repl: Text = \"\") -> Text\n```\n\nReplace emojis in `string` with `repl`.\n\n```python\nreplace_with_desc(string: Text, sep: Text = \":\") -> Text\n```\n\nReplace emojis in `string` with their description codes.  The codes are surrounded by `sep`.\n\n```python\nlast_downloaded_timestamp() -> Optional[datetime.datetime]\n```\n\nShow the timestamp of last download from `download_codes()`.\n\n## Footnote: Emoji Sequences\n\nNumerous emojis that look like single Unicode characters are actually multi-character sequences.  Examples:\n\n- The keycap 2Ô∏è‚É£ is actually 3 characters, U+0032 (the ASCII digit 2), U+FE0F (variation selector), and U+20E3 (combining enclosing keycap).\n- The flag of Scotland 7 component characters, `b'\\\\U0001f3f4\\\\U000e0067\\\\U000e0062\\\\U000e0073\\\\U000e0063\\\\U000e0074\\\\U000e007f'` in full esaped notation.\n\n(You can see any of these through `s.encode(\"unicode-escape\")`.)\n\n`demoji` is careful to handle this and should find the full sequences rather than their incomplete subcomponents.\n\nThe way it does this it to sort emoji codes by their length, and then compile a concatenated regular expression that will greedily search for longer emojis first, falling back to shorter ones if not found.  This is not by any means a super-optimized way of searching as it has O(N<sup>2</sup>) properties, but the focus is on accuracy and completeness.\n\n```python\n>>> from pprint import pprint\n>>> seq = \"\"\"\\\n... I bet you didn't know that üôã, üôã‚Äç‚ôÇÔ∏è, and üôã‚Äç‚ôÄÔ∏è are three different emojis.\n... \"\"\"\n>>> pprint(seq.encode('unicode-escape'))  # Python 3\n(b\"I bet you didn't know that \\\\U0001f64b, \\\\U0001f64b\\\\u200d\\\\u2642\\\\ufe0f,\"\n b' and \\\\U0001f64b\\\\u200d\\\\u2640\\\\ufe0f are three different emojis.\\\\n')\n```\n\n# Changelog\n\n## 0.4.0\n\n- Update emoji source list to version 13.1. (See 5090eb5.)\n- Formally support Python 3.9. (See 6e9c34c.)\n- Bugfix: ensure that `demoji.last_downloaded_timestamp()` returns correct UTC time.\n  (See 6c8ad15.)\n\n## 0.3.0\n\n- Feature: add `findall_list()` and `replace_with_desc()` functions. (See 7cea333.)\n- Modernize setup config to use `setup.cfg`. (See 8f141e7.)\n\n## 0.2.1\n\n- Tox: formally add Python 3.8 tests.\n\n## 0.2.0\n\n- Windows: use the [colorama] package to support printing ANSI escape sequences on Windows;\n  this introduces colorama as a dependency.  (See cd343c1.)\n- Setup: Fix a bug in `setup.py` that would require dependencies to be installed\n  _prior to_ installation of `demoji` in order to find the `__version__`.\n  (See d5f429c.)\n- Python 2 + Windows support: use `io.open(..., encoding='utf-8')` consistently in `setup.py`.\n  (See 1efec5d.)\n- Distribution: use a universal wheel in PyPI release. (See 8636a32.)\n\n[colorama]: https://github.com/tartley/colorama\n\n## 0.1.5\n\n- Performance improvement: use `re.escape()` rather than failing to compile a small subset of codes.\n- Remove an unused constant in `__init__.py`.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tho-asterist/demoji",
    "keywords": "emoji,emojis,nlp,natural language processing,unicode",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "demoji-lambda",
    "package_url": "https://pypi.org/project/demoji-lambda/",
    "platform": "",
    "project_url": "https://pypi.org/project/demoji-lambda/",
    "project_urls": {
      "Bug Reports": "https://github.com/tho-asterist/demoji/issues",
      "Documentation": "https://github.com/tho-asterist/demoji/blob/master/README.md",
      "Homepage": "https://github.com/tho-asterist/demoji",
      "Source": "https://github.com/tho-asterist/demoji"
    },
    "release_url": "https://pypi.org/project/demoji-lambda/0.4.0/",
    "requires_dist": null,
    "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7",
    "summary": "Accurately remove and replace emojis in text strings",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9945158,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1855b4021e759df1e4a3d86ac161f492a714b09faacf1b98acfc7c160661842b",
          "md5": "1510d7a77d9d07139e9d20f349b8443c",
          "sha256": "df46ba9d22494cc4cd5aa4d9c4368806fd38b2c697c882050237c0651e472d30"
        },
        "downloads": -1,
        "filename": "demoji_lambda-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1510d7a77d9d07139e9d20f349b8443c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7",
        "size": 11048,
        "upload_time": "2021-04-01T09:31:00",
        "upload_time_iso_8601": "2021-04-01T09:31:00.319924Z",
        "url": "https://files.pythonhosted.org/packages/18/55/b4021e759df1e4a3d86ac161f492a714b09faacf1b98acfc7c160661842b/demoji_lambda-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1855b4021e759df1e4a3d86ac161f492a714b09faacf1b98acfc7c160661842b",
        "md5": "1510d7a77d9d07139e9d20f349b8443c",
        "sha256": "df46ba9d22494cc4cd5aa4d9c4368806fd38b2c697c882050237c0651e472d30"
      },
      "downloads": -1,
      "filename": "demoji_lambda-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1510d7a77d9d07139e9d20f349b8443c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7",
      "size": 11048,
      "upload_time": "2021-04-01T09:31:00",
      "upload_time_iso_8601": "2021-04-01T09:31:00.319924Z",
      "url": "https://files.pythonhosted.org/packages/18/55/b4021e759df1e4a3d86ac161f492a714b09faacf1b98acfc7c160661842b/demoji_lambda-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}