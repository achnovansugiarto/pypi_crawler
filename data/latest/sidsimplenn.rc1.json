{
  "info": {
    "author": "sid007",
    "author_email": "sid700710@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "pip install sidSimpleNN\n\nyou can also visit my website for testing manual Digit and Letters Recognition\nhttps://siddhantofficialsidsimpl-868fa.web.app\nyou can also train your model through this lib and upload your weights and bias json file to this site to test your figures(letter, shape etc) recognition\n\nIn data folder\nCan be downloaded from http://yann.lecun.com/exdb/mnist/\n\nnet.chosenLoss='CE' \t\t\t## for classification use CE and for regression use MSE\nnet.chosenActivation='relu' \t## can choose from relu, tanh, sigmoid\nnet.applySoftmax=True \t\t\t## for classification make this true, gives output as probability\nnet.applyRegularization=False \t## apply L2 regularization\nnet.calcLoss=False \t\t\t\t## should calculate loss\nnet.otherImplementation=False \t## for non batch wise training \nnet.saveWeightsBiasJSON() \t\t##save WB file for using it in my website\nnet.save() \t\t\t\t\t\t## to save model\nnet.load() \t\t\t\t\t\t## to load the model you need to have same name as saved model\nnet.showModel() \t\t\t\t## details of model\nnet.changeActivation() \t\t\t## to apply choosen activation\nnet.lossGraph() \t\t\t\t## to display loss vs iter graph\nnet.feedforward(input) \t\t\t## to get the last layer output\n\nfrom sidSimpleNN import mainTrain\n\nmainTrain.run()\n\n\nif data,mnist folder dont get made automatically then manualy download from MNIST dataset and place in datafolder \n\nif above code doesnt work then test with this\n\nimport numpy as np\nimport mnist\nimport sidSimpleNN.myNN as myNN\n\n\ndef run():\n\n\t# load data\n\tnum_classes = 10\n\ttrain_images = mnist.train_images() #[60000, 28, 28]\n\ttrain_labels = mnist.train_labels()\n\ttest_images = mnist.test_images()\n\ttest_labels = mnist.test_labels()\n\n\t# print(\"Training...\")\n\n\t# # data processing\n\tX_train = train_images.reshape(train_images.shape[0], train_images.shape[1]*train_images.shape[2]).astype('float32') #flatten 28x28 to 784x1 vectors, [60000, 784]\n\tx_train = X_train / 255 #normalization\n\ty_train = np.eye(num_classes)[train_labels] #convert label to one-hot\n\n\tX_test = test_images.reshape(test_images.shape[0], test_images.shape[1]*test_images.shape[2]).astype('float32') #flatten 28x28 to 784x1 vectors, [60000, 784]\n\tx_test = X_test / 255 #normalization\n\ty_test = test_labels\n\n\tnp.random.seed(1)\n\n\tnet = myNN.Network(\n                 num_nodes_in_layers = [784, 10,20, 10], \n                 batch = 1,\n                 epochs = 6,\n                 learning_rate = 0.001, \n                 weights_file=None,\n                 chosenActivation='tanh'\n                 # name='tempnet3'\n                 # weightsAndBias_file = 'digitRecog',\n                 # includeWeightsBias=True\n\n             )\n\n\n\tprint('before training , testing with test dataset')\n\t# net.chosenLoss='CE'\n\t# net.applySoftmax=True\n\t# net.applyRegularization=False\n\t# net.regularizationConst=0.01\n\t# net.calcLoss=False\n\t# net.saveWeightsBiasJSON()\n\tmessage=net.test(x_test, y_test)\n\n\n\tnet.train(x_train, y_train)\n\tnet.save()\n\tnet.lossGraph()\n\tprint('before training , testing with test dataset')\n\tprint(message)\n\n\tprint(\"after training\")\n\tnet.test(x_test, y_test)\n\tnet.showModel()\n\n\n\n\n\nif __name__=='__main__':\n\trun()\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/sidSimpleNN/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "sidSimpleNN",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sidSimpleNN",
    "package_url": "https://pypi.org/project/sidSimpleNN/",
    "platform": "",
    "project_url": "https://pypi.org/project/sidSimpleNN/",
    "project_urls": {
      "Download": "https://pypi.org/project/sidSimpleNN/"
    },
    "release_url": "https://pypi.org/project/sidSimpleNN/0.2.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Multilayered Perceptron NN light weight, make, train, test models",
    "version": "0.2.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10575901,
  "releases": {
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82190af8620245a81cf3f7681762b3c998867f29f7d04667af1f5403bfefd573",
          "md5": "aa8358e7d1832c4090be27ff582be57d",
          "sha256": "6b0bf0387d852211dff17731c980f21a771a4552ad0bdbfe8c701c86ba6b4276"
        },
        "downloads": -1,
        "filename": "sidSimpleNN-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa8358e7d1832c4090be27ff582be57d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8160,
        "upload_time": "2021-06-07T09:32:42",
        "upload_time_iso_8601": "2021-06-07T09:32:42.563233Z",
        "url": "https://files.pythonhosted.org/packages/82/19/0af8620245a81cf3f7681762b3c998867f29f7d04667af1f5403bfefd573/sidSimpleNN-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "732798a2f119a00d20073a6a01d5b1750e17aa0f913e367400a4430d7a8605ad",
          "md5": "c0e7af2059094bcf875dbb2ff8e78b4b",
          "sha256": "5839a9594b66ff892c94771a6531e2ad259821bc04bd803e2f6e88edc601fa2e"
        },
        "downloads": -1,
        "filename": "sidSimpleNN-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "c0e7af2059094bcf875dbb2ff8e78b4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5257,
        "upload_time": "2021-06-07T09:32:43",
        "upload_time_iso_8601": "2021-06-07T09:32:43.866005Z",
        "url": "https://files.pythonhosted.org/packages/73/27/98a2f119a00d20073a6a01d5b1750e17aa0f913e367400a4430d7a8605ad/sidSimpleNN-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82190af8620245a81cf3f7681762b3c998867f29f7d04667af1f5403bfefd573",
        "md5": "aa8358e7d1832c4090be27ff582be57d",
        "sha256": "6b0bf0387d852211dff17731c980f21a771a4552ad0bdbfe8c701c86ba6b4276"
      },
      "downloads": -1,
      "filename": "sidSimpleNN-0.2.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aa8358e7d1832c4090be27ff582be57d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8160,
      "upload_time": "2021-06-07T09:32:42",
      "upload_time_iso_8601": "2021-06-07T09:32:42.563233Z",
      "url": "https://files.pythonhosted.org/packages/82/19/0af8620245a81cf3f7681762b3c998867f29f7d04667af1f5403bfefd573/sidSimpleNN-0.2.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "732798a2f119a00d20073a6a01d5b1750e17aa0f913e367400a4430d7a8605ad",
        "md5": "c0e7af2059094bcf875dbb2ff8e78b4b",
        "sha256": "5839a9594b66ff892c94771a6531e2ad259821bc04bd803e2f6e88edc601fa2e"
      },
      "downloads": -1,
      "filename": "sidSimpleNN-0.2.8.tar.gz",
      "has_sig": false,
      "md5_digest": "c0e7af2059094bcf875dbb2ff8e78b4b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5257,
      "upload_time": "2021-06-07T09:32:43",
      "upload_time_iso_8601": "2021-06-07T09:32:43.866005Z",
      "url": "https://files.pythonhosted.org/packages/73/27/98a2f119a00d20073a6a01d5b1750e17aa0f913e367400a4430d7a8605ad/sidSimpleNN-0.2.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}