{
  "info": {
    "author": "W. Trevor King",
    "author_email": "wking@drexel.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Sawsim is a force-spectroscopy simulator.  See the manual for more\ndetails.\n\n\nPackages\n--------\n\nGentoo\n~~~~~~\n\nI've packaged sawsim for Gentoo_ as sci-physics/sawsim in my `wtk\noverlay`_.  To install, run::\n\n  # emerge -av app-portage/layman\n  # layman --add wtk\n  # emerge -av sci-physics/sawsim\n\nTo stay current, follow the sawsim `Atom`_ or `RSS`_ feed, and\nre-emerge when there are interesting changes.\n\nYou can skip the Compiling_ and Upgrading_ sections of this README ;).\n\n.. _Gentoo: http://www.gentoo.org/\n.. _wtk overlay: http://blog.tremily.us/posts/Gentoo_overlay/\n.. _Layman: http://www.gentoo.org/proj/en/overlays/userguide.xml\n.. _Atom: http://git.tremily.us/?p=sawsim.git;a=atom\n.. _RSS: http://git.tremily.us/?p=sawsim.git;a=rss\n\n\nCompiling\n---------\n\nCheck out the source::\n\n  $ git clone git://tremily.us/sawsim.git\n  $ cd sawsim\n\nSawsim is written in noweb_.  Extract the `Makefile` and compile with::\n\n  $ notangle -Rmakefile src/sawsim.nw | sed 's/        /\\t/' > Makefile\n  $ make\n\nRun the unit tests with::\n\n  $ make check\n\nIf you're using the Python bindings (`pysawsim` or `bin/*.py`), you\nshould run the `pysawsim` unit tests with::\n\n  $ ./misc/hooks/pre-commit-pysawsim-check\n\n\nUpgrading\n~~~~~~~~~\n\nUpgrade to the most recent version::\n\n  sawsim$ git pull\n  sawsim$ make && make check && ./misc/hooks/pre-commit-pysawsim-check\n\n\nDependencies\n------------\n\n============  =====================  =================  ======================\nPackage       Purpose                Debian             Gentoo\n============  =====================  =================  ======================\ngit_          version control        git-core           dev-vcs/git\nnoweb_        source code framework  noweb              app-text/noweb\nGSL_          sawsim dependency      libgsl0-dev        sci-libs/gsl\ncheck_        sawsim unit tests      check              dev-libs/check\npython_ 2.5+  pysawsim execution     python             dev-lang/python\nnose_         pysawsim testing       python-nose        dev-python/nose\nmatplotlib_   pysawsim execution     python-matplotlib  dev-python/matplotlib\nnumpy_        pysawsim execution     python-numpy       dev-python/numpy\nscipy_        pysawsim execution     python-scipy       sci-libs/scipy\nmpi4py_       pysawsim mpi manager   [1]_               dev-python/mpi4py\npbs-python_   pysawsim pbs manager   [2]_               sys-cluster/pbs-python\n============  =====================  =================  ======================\n\n.. _git: http://git-scm.com/\n.. _noweb: http://www.eecs.harvard.edu/~nr/noweb/\n.. _GSL: http://www.gnu.org/software/gsl/\n.. _check: http://check.sourceforge.net/\n.. _python: http://www.python.org/\n.. _nose: http://somethingaboutorange.com/mrl/projects/nose/0.11.2/\n.. _matplotlib: http://matplotlib.sourceforge.net/\n.. _numpy: http://numpy.scipy.org/\n.. _scipy: http://www.scipy.org/\n.. _mpi4py: http://mpi4py.scipy.org/\n.. _pbs-python homepage:\n.. _pbs-python: http://subtrac.sara.nl/oss/pbs_python\n\n.. [1] mpi4py has no Debian package, but you can install it with\n   distribute_ (a `setuptools` fork) (Debian: python-distribute,\n   Gentoo: setuptools/setuptools) via::\n\n     $ easy_install --user mpi4py\n\n   For systems with earlier versions of `distribute`/`setuptools`,\n   which lack the `--user` option, try something along the lines of::\n\n     $ easy_install --user mpi4py\n     $ easy_install --prefix $HOME/.local/ mpi4py\n\n.. [2] pbs-python has no Debian package, but you can install it from\n   source.  See the `pbs-python homepage`_.\n\n.. _distribute: http://pypi.python.org/pypi/distribute\n\n\nPYTHONPATH\n~~~~~~~~~~\n\nIf you install Python packages at the user level (vs. system-wide\ninstalls) you may need to setup a `PYTHONPATH` environmental variable\nso Python can find the packages.  You'll probably want to add a line\nalong the lines of::\n\n    export PYTHONPATH=\".:$HOME/.local/lib/python2.6/site-packages\"\n\nto your `~/.bashrc` file to ensure that the new `PYTHONPATH` is setup\nfor all future logins.\n\n\nPython wrapper\n--------------\n\nThe `sawsim` binary only runs a single pull, but you'll probably want\nto run many repetitions to generate enough data for significant\nstatistical analysis.  To facilitate this, we provide the `pysawsim`\nmodule which provides a higher level interface to `sawsim`.\n\nEnsure that . is in your PYTHONPATH_, and run the pysawsim tests::\n\n  sawsim$ ./misc/hooks/pre-commit-pysawsim-check\n\nSeveral `pysawsim` submodules have scripts (`bin/*.py`) providing\ncommand-line access to their functionality.  Many users will probably\nonly need a single call to `bin/sawsim_hist_scan.py` to fit their\nunfolding force histograms to a particular model.\n\n\nJob managers\n~~~~~~~~~~~~\n\nFor the `--manager` option, use whatever job scheduling system is most\nappropriate for your host.  For example:\n\n========================================================  =======\nHost description                                          Manager\n========================================================  =======\nSMP machine with many processors                          subproc\nCluster with the Torque/Maui portable batch queue system  pbs\nBunch of machines which can host message-passing daemons  mpi\nMy wimpy single-processor, single-core netbook            thread\n========================================================  =======\n\n\nCaching\n~~~~~~~\n\nBy default, the python wrappers do not cache the results of previous\nruns.  However, if you are repeatedly running sawsim with the same\nparameters, you probably want to enable caching (`-C/--use-cache`).\nThe output of each `sawsim` run will be stored in your cache directory\n(`-d/--cache-dir`) and recycled for future runs with the same sawsim\nparameters.  For example, if you place 200 runs in the cache::\n\n  $ bin/sawsim_hist.py -s bin/sawsim -N 200 --use-cache\n\nAnd then generate another histogram with the same `sawsim` parameters::\n\n  $ bin/sawsim_hist.py -s bin/sawsim -N 300 --use-cache\n\nThe second call will only execute an additional 100 `sawsim` runs.\n\nIf you ask for *fewer* runs than are contained in the cache, e.g.::\n\n  $ bin/sawsim_hist.py -s bin/sawsim -N 100 --use-cache\n\nYou will not run *any* new `sawsim` runs.  All 100 runs will be drawn\nat random from the cache.\n\n\nHelp\n----\n\nAs always, run::\n\n  sawim$ bin/<whatever> --help\n\nfor more details.\n\n\nLicense\n-------\n\nSaswim is released under the GNU GPLv3+.  See `COPYING` for details.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://git.tremily.us/?p=sawsim.git;a=snapshot;h=v0.10;sf=tgz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://blog.tremily.us/posts/sawsim/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pysawsim",
    "package_url": "https://pypi.org/project/pysawsim/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pysawsim/",
    "project_urls": {
      "Download": "http://git.tremily.us/?p=sawsim.git;a=snapshot;h=v0.10;sf=tgz",
      "Homepage": "http://blog.tremily.us/posts/sawsim/"
    },
    "release_url": "https://pypi.org/project/pysawsim/0.10/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python framework for the sawsim force spectroscopy simulator.",
    "version": "0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 380997,
  "releases": {
    "0.10": []
  },
  "urls": [],
  "vulnerabilities": []
}