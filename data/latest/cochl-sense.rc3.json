{
  "info": {
    "author": "Cochlear.ai",
    "author_email": "support@cochlear.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Sense Python\n\nThis repository is split in two folders : \n- `cochl_sense` contains the source code of the cochlear.ai sense python client\n- `examples` contains examples sample\n\n## Quick start\n\nGo in `examples` folder\n\n### Installation\n\nIf you want to inference **a stream**, you will need to install `portaudio` on your system.\n\nTo install pyaudio, you can follow the pyaudio documentation here  https://people.csail.mit.edu/hubert/pyaudio/\n\n\nMake sure that dependencies are installed by running `pip install -r requirements.txt`.\n\n### File Inferencing\n\nYou can then inference a file by running :\n\n```python\npython file.py\n```\n\n### Stream Inferencing\n\nTo inference audio comming from your microphone, you have to make sure first that the audio is properly audible : sound shouldn't be too low, neither saturating.\n\nYou can inference audio coming from your microphone by running:\n\n```python\npython pyaudio_sense.py\n```\n\n### Known issues\n\n\nOn Mac, after following installation steps, you might face this error : `C1083: Cannot open include file: 'portaudio.h'`\n\nThe problem is that portaudio library is not properly located on your computer.\n\nYou can fix the issue by running \n\n```\npip install --global-option='build_ext' --global-option='-I/usr/local/include' --global-option='-L/usr/local/lib' pyaudio\n```\n\n## Use the library\n\nTo use our library, install it by running `pip install cochl-sense`.\n\nYou can now import classes:\n```python\nfrom cochl_sense.file import FileBuilder\nfrom cochl_sense.stream import StreamBuilder\n```\n\n### File\n\n`File` represents a class that can inference audio coming from an audio file.\n\nAn audio file is any source of audio data which duration is known at runtime.\nBecause the duration is known at runtime, the server will wait for the whole file to be received before \nto start inferencing. All inferenced data will be received in one payload.\n\nA file can be, for instance, a mp3 file stored locally, a WAV file accessible from an URL etc...\n\nSo far WAV, flac, mp3, ogg, mp4 are supported.\n\nIf you are using another file encoding format, let us know at support@cochlear.ai so that we can prioritize it in our internal roadmap.\n\n`File` implements the following interface: \n\n```python\nclass File:\n    def inference() -> Result: \n```\n\nWhen calling `inference`, a GRPC connection will be established with the backend, audio data of the file will be sent and a `Result` instance will be returned in case of success (described below).\n\nNote that network is not reached until `inference` method is called.\n\nNote that `inference` can be called only once per `File` instance.\n\nTo create a `File` instance, you need to use a `FileBuilder` instance. `FileBuilder` is following the builder pattern and calling its `build` method will create a `File` instance.\n\n`FileBuider` implements the following interface:\n\n```python\nclass FileBuilder: \n    #api key of cochlear.ai projects available at https://dashboard.cochlear.ai\n    def with_api_key(key: str) -> FileBuilder:\n    #format of the audio file: can be mp3, flac, WAV, ogg, etc...\n    def with_format(format: str) -> FileBuilder:\n    #data reader to the file data\n    def with_reader(reader) ->FileBuilder:\n        #where reader is a type that implements io.BufferedIOBase (see https://docs.python.org/3/library/io.html#io.BufferedIOBase)\n    \n    #activate or not smartfiltering (default False)\n    def with_smart_filtering(smartfiltering) -> FileBuilder\n    #creates a File instance*/\n    def build() -> File:\n```\n\nNote that `with_api_key`, `with_format` and `with_reader` method needs to be called before calling the `build` method, otherwise an error will be raised.\n\n### Stream\n\n`Stream` represents a class that can inference audio coming from an audio stream.\n\nAn audio stream is any source of data which duration is not known at runtime. \nBecause the duration is not known, the server will inference audio as it comes. One second of audio will be required before the first result to be returned. After that, one result will be given every 0.5 seconds of audio.\n\nA stream can be, for instance, the audio data coming from a microphone, audio data coming from a web radio, etc...\n\nStreams can be stopped at any moment while inferencing.\n\nFor now, the only format that is supported for streaming is a raw data stream (PCM stream). \nRaw data being sent has to be a **mono channel** audio stream. Its sampling rate and data type (int16, int32, float32) has to be given to describe the raw audio data. \n\nFor best performance, we recommand using a sampling rate of 22050Hz and data represented as float32.\n\nMultiple results will be returned by calling a callback function.\n\nIf you are using another stream encoding format that is not supported, let us know at support@cochlear.ai so that we can prioritize it in our internal roadmap.\n\n`Stream` implements the following interface: \n\n```python\nclass Stream:\n    def inference(callback):\n        #where callback is a function that takes a Result object defined as below\n```\n\nWhen calling `inference`, a GRPC connection will be established with the backend, audio data of the stream will be sent every 0.5s.\nOnce the result is returned by the server, the `callback` function is called.\n\nNote that the network is not reached until `inference` method is called.\n\nNote that inference can be called only once per `Stream` instance.\n\nTo create a `Stream` instance, you need to use a `StreamBuilder` instance. `StreamBuilder` is following the builder pattern and calling its `build` method will create a `Stream` instance.\n\n`StreamBuider` implements the following interface:\n\n```python\nclass SrteamBuilder:\n    #api key of cochlear.ai projects available at dashboard.cochlear.ai\n    def with_api_key(key: str) -> StreamBuilder:\n    #type of the pcm stream\n    def with_data_type(datatype: str) -> StreamBuilder:\n    #sampling rate of the pcm stream\n    def with_sampling_rate(samplingRate: int) -> StreamBuilder:\n    #data of the pcm stream\n    def with_streamer(streamer) -> StreamBuilder:\n        #where streamer is a generator of binary string\n    #activate or not smartfiltering (default False)\n    def with_smart_filtering(smartfiltering) -> StreamBuilder\n\n    #creates a Stream instance*/\n    def build() -> Stream:\n\n    #disable sampling rate check\n    def deactivate_low_sampling_rate_warning() -> StreamBuilder:\n    #max number of events from previous inference to keep in memory\n    def with_max_events_history_size(size: number) -> StreamBuilder:\n}\n```\n\nNote that `with_api_key`, `with_data_type`, `with_sampling_rate`, and `with_streamer` method needs to be called before calling the `build` method, otherwise an error will be thrown.\n\n\n### Result\n\nResult is a class that is returned by both file and stream when calling `inference` method.\n\nMultiple results will be returned by a stream by calling a callback function. For a file only one result will be returned.\n\n`Result` implements the following interface:\n```python\nclass Result:\n    #returns all events\n    def all_events() -> List[Event]:\n    #returns all events that match the \"filter function\" defined below\n    def detected_events() -> List[Event]:\n    #group events that match the \"filter function\" and shows segments of time of when events were detected\n    def detected_events_timing() -> Dictionnary[str, List[Tuple[int, int]]]:\n    #return only the \"tag\" of the event that match the \"filter\" function\n    def detected_tags() -> List[str]:\n    #returns the service name: \"human-interaction\" or \"emergency\" for instance*/\n    def service() -> List[str]:\n    #returns a raw json object containing service name and an array of events\n    def to_json() -> str:\n    #use a filter function: that function takes an event as input and return a boolean. An event will be \"detected\" if the filter function returns true for that event\n    def use_default_filter() -> Result:\n        #the default filter is to consider all events as detected. So by default, allEvents() and detectedEvents() will return the same result\n    def set_filter(filter): Result\n        #where filter is a function that takes an event in input and returns a boolean\n```\n\nNote that if you are inferencing a stream, multiple results will be returned. By default, calling `all_events()` will only returned the newly inferenced result.\nIt's possible to keep track of previous events of the stream. To do so, call the `with_max_events_history_size` method on the `StreamBuilder` class. Its default value is 0,\nand increasing it will allow to \"remember\" previous events. \n\n### Event\n\nAn event contains the following data :\n\n```python\nclass Event:\n    #name of the detected event\n    tag: str\n    #start timestamp of the detected event since the begining of the inference\n    start_time: int\n    #end timestamp of the detected event since the begining of the inference\n    end_time: int\n    #probablity for the event to happen. Its values is between 0 and 1\n    probability: str\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cochlearai/sense-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cochl-sense",
    "package_url": "https://pypi.org/project/cochl-sense/",
    "platform": "",
    "project_url": "https://pypi.org/project/cochl-sense/",
    "project_urls": {
      "Homepage": "https://github.com/cochlearai/sense-python"
    },
    "release_url": "https://pypi.org/project/cochl-sense/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python Package for Cochlear.ai sense API",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14136026,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cf6f5a2a90896fd0e83d6f2993c99e66ad526aab47dd66f9be063cfe55ec164",
          "md5": "197dd7cefdb312820e68f8e6e07b4ecb",
          "sha256": "9fa7bc5ff3120c1d02bebf30bfe19b1e60306091e572b4cd04c609043e92c712"
        },
        "downloads": -1,
        "filename": "cochl_sense-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "197dd7cefdb312820e68f8e6e07b4ecb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11705,
        "upload_time": "2020-05-06T15:28:57",
        "upload_time_iso_8601": "2020-05-06T15:28:57.736473Z",
        "url": "https://files.pythonhosted.org/packages/1c/f6/f5a2a90896fd0e83d6f2993c99e66ad526aab47dd66f9be063cfe55ec164/cochl_sense-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c740c395e9378f6a91fcbdc65852d8f955bb4c30c04574c573fd782709880a6",
          "md5": "1648cd95bc49f6315b4c7a4ff4f2ea00",
          "sha256": "69c8cda03a5d993de1fea0c5bc1716adff26e1b88f5c8b613c12e61f899b290c"
        },
        "downloads": -1,
        "filename": "cochl-sense-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1648cd95bc49f6315b4c7a4ff4f2ea00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13118,
        "upload_time": "2020-05-06T15:28:59",
        "upload_time_iso_8601": "2020-05-06T15:28:59.793339Z",
        "url": "https://files.pythonhosted.org/packages/8c/74/0c395e9378f6a91fcbdc65852d8f955bb4c30c04574c573fd782709880a6/cochl-sense-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95aa634c0780c7273e7c37213a43c4b24dd879ee6db1afcc8bd27bf24cced667",
          "md5": "80a61b75d30dbdb34a83dc1935d61bcc",
          "sha256": "6f2cb358d4f6d0832d1b046f9f80fdf32b0c5da17261b8430796c29d4b7251b2"
        },
        "downloads": -1,
        "filename": "cochl_sense-1.0.0b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80a61b75d30dbdb34a83dc1935d61bcc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5756,
        "upload_time": "2019-07-19T18:27:30",
        "upload_time_iso_8601": "2019-07-19T18:27:30.347593Z",
        "url": "https://files.pythonhosted.org/packages/95/aa/634c0780c7273e7c37213a43c4b24dd879ee6db1afcc8bd27bf24cced667/cochl_sense-1.0.0b2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cf11ad7d59bf9bfd18cc77a6adf29aaa9abac104387ca80028b912925600b46",
          "md5": "889411a561665ee2d4a79b270646594b",
          "sha256": "f6c4f1b476eb0a6c53a389d8cd55155b8fbf29c816c3568fab478be08b5eda9e"
        },
        "downloads": -1,
        "filename": "cochl-sense-1.0.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "889411a561665ee2d4a79b270646594b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5067,
        "upload_time": "2019-07-19T18:27:32",
        "upload_time_iso_8601": "2019-07-19T18:27:32.699454Z",
        "url": "https://files.pythonhosted.org/packages/0c/f1/1ad7d59bf9bfd18cc77a6adf29aaa9abac104387ca80028b912925600b46/cochl-sense-1.0.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "271e6e286cda8cdb18235a62bea758c302b30703d5ef7e40a639a5a4232e3e82",
          "md5": "8dc5a799cba59f542f0cc56abc92cd8f",
          "sha256": "031c71ccdf6f52d32b3d1f6bdf57626b0d9fe7099f20c6c6ea7d92732927d1df"
        },
        "downloads": -1,
        "filename": "cochl-sense-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8dc5a799cba59f542f0cc56abc92cd8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15635,
        "upload_time": "2020-09-04T10:32:15",
        "upload_time_iso_8601": "2020-09-04T10:32:15.566898Z",
        "url": "https://files.pythonhosted.org/packages/27/1e/6e286cda8cdb18235a62bea758c302b30703d5ef7e40a639a5a4232e3e82/cochl-sense-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "271e6e286cda8cdb18235a62bea758c302b30703d5ef7e40a639a5a4232e3e82",
        "md5": "8dc5a799cba59f542f0cc56abc92cd8f",
        "sha256": "031c71ccdf6f52d32b3d1f6bdf57626b0d9fe7099f20c6c6ea7d92732927d1df"
      },
      "downloads": -1,
      "filename": "cochl-sense-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8dc5a799cba59f542f0cc56abc92cd8f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15635,
      "upload_time": "2020-09-04T10:32:15",
      "upload_time_iso_8601": "2020-09-04T10:32:15.566898Z",
      "url": "https://files.pythonhosted.org/packages/27/1e/6e286cda8cdb18235a62bea758c302b30703d5ef7e40a639a5a4232e3e82/cochl-sense-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}