{
  "info": {
    "author": "Jennifer Eng",
    "author_email": "engje@ohsu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "# cmIF Version 3\n\nAuthor: engje\n\nDate: 2021-01-05\n\nLicense: GPLv3\n\nLanguage: Python3\n\nDescription: cmIF is a Python3 library for automated image processing and analysis of multiplex immunofluorescence images\n\n# Setup\n\n**0.** Follow [instructions](https://docs.conda.io/en/latest/miniconda.html) to install python 3.8, if necessary\n\n**1.** From the command line, clone the repository `git clone https://gitlab.com/engje/cmif.git`\n\n**2.** Navigate to PipelineExample `cd cmif/PipelineExample/`\n\n**3.** Make a new conda environment `conda env create -f cmif_environment.yml`\n\n**4.** Activate the cmif environment `source activate cmif` or `conda activate cmif`\n\n**5.** Run PipelineExample.py -- Programmatically download example images from https://www.synapse.org/#!Synapse:syn22315952 in step 0\n\n\n# PipelineExample Code\n\n## 0 Dowload Example Images\n\nTo run this example code, download tiffs and czis from https://www.synapse.org/#!Synapse:syn22315952\nProper folder naming/structure will be: \n\n - ./PipelineExample/RawImages/\n - ./PipelineExample/czis/\n\n```python\n#libraries\nimport os\nimport synapseclient\nimport synapseutils\n\n#navigate to code folder\nos.chdir('PipelineExample')\ncodedir = os.getcwd()\n\n#input/output folders\nczidir = f'{codedir}/czis'\ntiffdir = f'{codedir}/RawImages'\n\n# login to Synapse\nsyn = synapseclient.login(email='me@example.com', password='secret', rememberMe=True) #change to your username and password\n\n# download tiffs and czis\nall_files = synapseutils.syncFromSynapse(syn, entity='syn22315956', path=tiffdir)\nall_files = synapseutils.syncFromSynapse(syn, entity='syn22315953', path=czidir)\n```\n\n## 1   Import Libraries and Generate Folders\n\nWithin the root directory, the code will auto-generate a standardized folder structure. Folders are for Raw Images (unregistered tiffs single channel),\n QC outputs, Registered Images, Autofluorescence Subtracted Images, Segmentation outputs and Cropped images for viewing. So only\n `codedir`variable should be modified, retaining the standardized folder structure.\n\nList the names of the slides to be processed as `ls_sample`. Each slide may have 1 or more scenes acquired during scanning.\n\n```python\n# Import libraries\nimport os\nimport sys\nimport numpy as np\nimport pandas as pd\nimport shutil\nimport matplotlib.pyplot as plt\nimport re\nfrom skimage import io\n\n# Start Preprocessing\nif os.getcwd().split('/')[-1] != 'PipelineExample':\n    os.chdir('PipelineExample')\ncodedir = os.getcwd()\n\n#input/output folders\nczidir = f'{codedir}/czis'\ntiffdir = f'{codedir}/RawImages'\nqcdir = f'{codedir}/QC'\nregdir = f'{codedir}/RegisteredImages'\nsubdir = f'{codedir}/SubtractedRegisteredImages'\nsegdir = f'{codedir}/Segmentation'\ncropdir = f'{codedir}/Cropped'\nfrom mplex_image import preprocess, mpimage, cmif, process\npreprocess.cmif_mkdir([tiffdir,qcdir,regdir,segdir,subdir,cropdir,czidir])\n\nls_sample = ['BC44290-146']\n```\n\n## 2   QC and export metadata from .czi\n\n\"Level-1\" i.e. original microscope image file QC is performed (check number of files + naming), changing file names if there are any typos. \nImportant metadata, including exposure time (used to normalize images for autofluorescence subtraction) and\ncoordinates of czi scenes is exported to csv. \n\nFILE STRUCTURE: All images from each sample should be in subfolders named by sample ID within `czidir`.\n\n```python\n\nfrom mplex_image import metadata\nimport javabridge\nimport bioformats\njavabridge.start_vm(class_path=bioformats.JARS)\nfor s_sample in ls_sample:\n    os.chdir(f'{czidir}/{s_sample}')\n    #1 rename undescores to dot to match convention (done)\n    d_rename = mpimage.underscore_to_dot(s_sample,s_end='.czi')\n    d_rename.update({'HER2_ER':'HER2.ER'})\n    preprocess.dchange_fname(d_rename) #,b_test=False)\n\n    #2 Check files/naming\n    df_img = cmif.parse_czi(f'{czidir}/{s_sample}',b_scenes=True)\n    cmif.count_images(df_img)\n    preprocess.check_names(df_img,s_type='czi')\n    #Example: change file name and change back\n    d_rename = {'CK5R':'CK5Rename','CK5Rename':'CK5R'} \n    preprocess.dchange_fname(d_rename)#,b_test=False)\n\n    #3 Export useful imaging metadata (done)\n    df_img = metadata.scene_position(f'{czidir}/{s_sample}',type='r')\n    df_img.to_csv(f'{codedir}/{s_sample}_ScenePositions.csv')\n    metadata.exposure_times_slide(df_img,codedir,czidir=f'{czidir}/{s_sample}')\njavabridge.kill_vm()\n\n```\n\n## 3   QC Tiff Images\n\nUnregistered raw tiff format is 16 bit (`uint16`) single channel grayscale tiff, for example, exported from .czi using Zeiss' Zen software. \nThis section QC's files/naming and generates overviews of all rounds for visual inspection.\n\nFILE STRUCTURE: Each sample's tiff image stack should be in a separate subfolder named by sample ID within `rootdir`/RawImages. \n\n\n```python\n# Raw tiffs: check/change names \n\nfor s_sample in ls_sample: \n    os.chdir(f'{tiffdir}/{s_sample}')\n    #Example: change file name and change back\n    d_rename = {'CK5R':'CK5Rename','CK5Rename':'CK5R'} \n    preprocess.dchange_fname(d_rename) #,b_test=False)\n    #sort and count images \n    df_img = mpimage.parse_org(s_end = \"ORG.tif\",type='raw') \n    cmif.count_images(df_img[df_img.slide==s_sample])\n    preprocess.check_names(df_img,s_type='tiff')\n# QC Raw tiffs: visual inspection #\n\npreprocess.cmif_mkdir([f'{qcdir}/RawImages'])\n\nfor s_sample in ls_sample:\n    os.chdir(f'{tiffdir}/{s_sample}')\n    #investigate tissues\n    df_img = mpimage.parse_org(s_end=\"ORG.tif\",type='raw')\n    cmif.visualize_raw_images(df_img,qcdir,color='c1')\n```\n\n## 4   Register Images\n\nThis section registers all images to round 1 (R1), based on DAPI staining in each round. \n\nFILE STRUCTURE: Registered tiff images are generated and saved in `regdir` in subfolders named by sample ID and scene.\n\n```python\n\nfor s_sample in ls_sample:\n    cmif.registration_python(s_sample,tiffdir,regdir,qcdir)\n\n```\n\n## 5   Check Registration\n\nThis section generates overviews of all rounds of each registered image stack, for QC purposes.\n\n```python\ncmif.visualize_reg_images(f'{regdir}',qcdir,color='c1')\n```\n\n## 6 Create AF Subtracted Images\n\nImages acquired of background autofluorescence by are scaled by exposure time and subtracted from the respective channel, producing a new image. `d_channel` specifies the name of the background marker to subtract from each channel. If `d_early` is included, the background image will also be scaled by relative round. `ls_exclude` lists which markers for which AF subtraction is skipped(typically c5 images).\nA companion csv listing channels and corresponding markers is generated to reflect this fully processed (i.e. level-2) image data.\n\nFILE STRUCTURE: AF substracted tiff images are output to `subdir` in subfolders nemed by sample ID and scene\n\n```python\n#parameters\nd_channel = {'c2':'R8Qc2','c3':'R8Qc3','c4':'R8Qc4','c5':'R8Qc5'}\nd_early={'c2':'R0c2','c3':'R0c3','c4':'R0c4','c5':'R0c5'}\n\nfor s_sample in ls_sample:\n    preprocess.cmif_mkdir([f'{subdir}/{s_sample}'])\n    os.chdir(f'{regdir}')\n    for s_file in os.listdir():\n        if s_file.find(s_sample) > -1:\n            os.chdir(s_file)\n            df_img = mpimage.parse_org()\n            ls_exclude = sorted(set(df_img[df_img.color=='c5'].marker)) + ['DAPI'] + [item for key, item in d_channel.items()] + [item for key, item in d_early.items()]\n            #subtract\n            df_markers = cmif.autofluorescence_subtract(s_sample,df_img,codedir,d_channel,ls_exclude,subdir=f'{subdir}/{s_sample}',d_early=d_early) #\n            os.chdir('..')\n#generate channel/marker metadata csv\ncmif.metadata_table(regdir,segdir)\n```\n\n##  7  Cellpose Segmentation\n\nThe generalist segmentation algorithim `cellpose` is used for nuclear and cell segmentation. Custom python/numba code matches labelled nuclei and cells that overlap from the two segmentation results.\nNote: the `cellpose_segment_job` is a spawner that starts a job for each slide/scene on the server. \n\nFILE STRUCTURE: Labelled tiffs (`uint32`) with each pixel's grayscale value reflecting the label, are output as \"Nuclei Segmentation Basins\" and \"Matched Cell Segmentation Basins\" in `segdir` sample ID subfolders.\n\n```python\nfrom mplex_image import segment\nnuc_diam = 30\ncell_diam = 30 \n\ns_seg_markers = \"['Ecad']\"\ns_type = 'cell' #'nuclei'#\n\nprint(f'Predicting {s_type}')\nfor s_sample in ls_sample:\n    segment.segment_spawner(s_sample,segdir,regdir,nuc_diam,cell_diam,s_type,s_seg_markers,s_job='short',s_match='both')\n```\n\n##  8  Extract features\n\nExtract intensity, shape and location features from each AF subtracted image. \n\n```python\nfrom mplex_image import features\n\nnuc_diam = 30\ncell_diam = 30 \nls_seg_markers = ['Ecad']\n\nfor s_sample in ls_sample: \n    df_sample, df_thresh = features.extract_cellpose_features(s_sample, segdir, subdir, ls_seg_markers, nuc_diam, cell_diam)\n    df_sample.to_csv(f'{segdir}/features_{s_sample}_MeanIntensity_Centroid_Shape.csv')\n    df_thresh.to_csv(f'{segdir}/thresh_{s_sample}_ThresholdLi.csv')\n```\n## 8b (optional) Enhanced Features Extraction \n\nWhen we know that segmentation is not entirely accurate, e.g. the cell membrane, we can extract \"enhanced\" features, that is, the brightest 25% of pixels within the segmentation region.\n\n```python\nfrom mplex_image import features\n\nnuc_diam = 30\ncell_diam = 30 \nls_seg_markers = ['Ecad']\nls_membrane = ['HER2','EGFR']\n\nfor s_sample in ls_sample: \n    df_sample = features.extract_bright_features(s_sample, segdir, subdir, ls_seg_markers, nuc_diam, cell_diam,ls_membrane)\n    df_sample.to_csv(f'{segdir}/features_{s_sample}_BrightMeanIntensity.csv')\n```\n\n## 9  Filter Data\n\nPost-processing includes filling in any missing data (since cellpose typically segments more nuclei than cells) filtering out lost cells based on last round DAPI staining and selection of dataframe columns based on desired biomarker sub-cellular location.\n\n```python\nfrom mplex_image import process, features\n#parameters\nnuc_diam = 30\ncell_diam = 30 \nls_seg_markers = ['Ecad']\ns_thresh='Ecad'\nls_membrane = ['HER2']\nls_marker_cyto = ['CK14','CK5','CK17','CK19','CK7','CK5R','Ecad','HER2']\nls_custom = ['CD8R_perinuc5','CD20R_perinuc5','CD4R_perinuc5']\nls_filter = ['DAPI11_nuclei','DAPI2_nuclei']\nls_shrunk = ['Vim_perinuc3','CD44_perinuc3']\nman_thresh = 600\n\n#filtering\nfor s_sample in ls_sample: \n    os.chdir(segdir)\n    #replace nas, select segmentation region and filter cells negative for dapi\n    df_mi_full,df_img_all = process.filter_cellpose_df(s_sample,segdir,qcdir,s_thresh,ls_membrane,ls_marker_cyto,\n     ls_custom,ls_filter,ls_shrunk,man_thresh)\n    #Expand nuclei without matching cell labels for cells touching analysis\n    __ = features.combine_labels(s_sample,segdir, subdir, ls_seg_markers, nuc_diam, cell_diam, df_mi_full,s_thresh)\n    process.marker_table(df_img_all,qcdir)\n\n#Expand nuclei without matching cell labels for cells' touching analysis\nfor s_sample in ls_sample:\n    se_neg = df_mi_full[df_mi_full.slide==s_sample].Ecad_negative\n    labels,combine,dd_result = features.combine_labels(s_sample, segdir, subdir, ls_seg_markers, nuc_diam, cell_diam, se_neg)\n```\n\n## 10 Generate multicolor pngs and ome-tiff overlays (cropped)\n\nCrop smaller regions of images and segmentation basins and create custom overlays for efficient viewing of related markers.\n\n```python\n#crop coordinates  x, y upper corner\nd_crop = {'BC44290-146-Scene-1': (1800,9000)}\n\n#10-1 PNGs: nice images for powerpoint presentations\n\n#PNG parameters\nd_overlay = {'R1':['CD20','CD8','CD4','CK19'],\n     'R2':[ 'PCNA','HER2','ER','CD45'],\n     'R3':['pHH3', 'CK14', 'CD44', 'CK5'],\n     'R4':[ 'Vim', 'CK7', 'PD1', 'LamAC',],\n     'R5':['aSMA', 'CD68', 'Ki67', 'Ecad'],\n     'R6':['CK17','PDPN','CD31','CD3'],\n     'R7':['CK5R','CD8R','CD4R','CD20R'],\n     'R8':['LamB1','AR','ColIV','ColI'],\n     'subtype':['PCNA','HER2','ER','Ki67'],\n     'diff':['Ecad', 'CK14', 'CD44', 'CK5'],\n     'immune':['PD1','CD8R','CD4R','CD20R'],\n     'stromal':['aSMA','Vim','CD68','CD31'],\n     }\nes_bright = {'pHH3','CD68','CK14','CK5','CK17'} \nhigh_thresh=0.999\n\nfor s_scene in sorted(d_crop.keys()):\n    cmif.visualize_multicolor_overlay(s_scene,subdir,qcdir,d_overlay,d_crop,es_bright,high_thresh)\n\n#10 -2 ome-tiff\n\n#ome-tiff parameters\ns_dapi = 'DAPI1'\nd_combos = {'AF':{'R0c2','R0c3','R0c4','R0c5'}, \n        'Stromal':{'PDPN','Vim','CD31','aSMA'}, \n        'Tumor':{'HER2','ER','AR','Ecad','CD44','Ki67','pHH3','PCNA'},\n        'Immune':{'CD45','CD20R','CD68','PD1', 'CD8R', 'CD4R','CD3',},\n        'Differentiation':{'CK7','CK19','CK14','CK17','CK5','CD44','Vim'},\n        'Nuclear_ImmuneEarly':{ 'LamB1', 'LamAC','CD20','CD8', 'CD4',},\n    }\n\nfor s_scene in sorted(d_crop.keys()):\n    cmif.cropped_ometiff(s_scene,subdir,cropdir,d_crop,d_combos,s_dapi,tu_dim)\n\n#10-3 crop basins to match cropped overlays\n\ncmif.load_crop_labels(d_crop,tu_dim,segdir,cropdir,s_find='exp5_CellSegmentationBasins')\ncmif.load_crop_labels(d_crop,tu_dim,segdir,cropdir,s_find='Nuclei Segmentation Basins')\n\n```\n\n## 11 Tissue edge detection\n\n\"Edge-effect\" is a common artifact in FFPE tissues. Here we detect cells on edge of tissue.\n\n```python\nfrom mplex_image import features\nnuc_diam = 30\ni_pixel = 308\nfor s_sample in ls_sample:\n    features.edge_mask(s_sample,segdir,subdir,i_pixel=i_pixel, dapi_thresh=350)\n    df_sample = features.edge_cells(s_sample,segdir,nuc_diam,i_pixel=i_pixel)\n    df_sample.to_csv(f'{segdir}/features_{s_sample}_EdgeCells{i_pixel}pixels_CentroidXY.csv')\n```\n\n##  Next Steps\n\nFiltered data from step 9 and cropped overlays from step 10 are used for [manual thresholding](https://gitlab.com/engje/cmif/-/blob/master/PipelineExample/PipelineExample_ThresholdPositive.ipynb) and [gating](https://gitlab.com/engje/cmif/-/blob/master/PipelineExample/PipelineExample_GateCellTypes.ipynb). Unsupervised clustering may be run on filtered data.  Images, segmentation, and clustering or thresholding results are viewed in [napari](https://gitlab.com/engje/cmif/-/blob/master/PipelineExample/PipelineExample_napari.py).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/engje/cmif",
    "keywords": "multiplex imaging,cyclic immunofluorescence,image analysis,image processing",
    "license": "GPL>=3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mplex-image",
    "package_url": "https://pypi.org/project/mplex-image/",
    "platform": "",
    "project_url": "https://pypi.org/project/mplex-image/",
    "project_urls": {
      "Bug Reports": "https://gitlab.com/engje/cmif/-/issues",
      "Homepage": "https://gitlab.com/engje/cmif",
      "Source": "https://gitlab.com/engje/cmif"
    },
    "release_url": "https://pypi.org/project/mplex-image/0.0.7/",
    "requires_dist": [
      "biotransistor (==0.0.3)",
      "jupyterlab",
      "leidenalg",
      "matplotlib",
      "numpy",
      "numba",
      "napari",
      "opencv-python",
      "pandas",
      "pillow",
      "python-bioformats (==1.5.2)",
      "python-javabridge",
      "python-igraph",
      "scanpy",
      "scipy",
      "seaborn",
      "statsmodels",
      "scikit-image",
      "scikit-learn"
    ],
    "requires_python": ">=3.6",
    "summary": "A python3-based image analysis package to achieve fully-documented and reproducible visualization and analysis of bio-medical microscopy images.",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9063811,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d0d1f1585dd992f07189f3301c146181280b3fef79cec592caa6ef6c7a2fd08",
          "md5": "8ac139b1dff1a452d614e963a3a3d584",
          "sha256": "c06d13aa0ff6228cda61946cee7853999872fb2ffc0e1fd1687d6173dbd5b14a"
        },
        "downloads": -1,
        "filename": "mplex_image-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ac139b1dff1a452d614e963a3a3d584",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50559,
        "upload_time": "2020-05-28T22:15:17",
        "upload_time_iso_8601": "2020-05-28T22:15:17.301455Z",
        "url": "https://files.pythonhosted.org/packages/6d/0d/1f1585dd992f07189f3301c146181280b3fef79cec592caa6ef6c7a2fd08/mplex_image-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4bfdbbc67a20528d43277d1a2e3968956725462015ead1e4081a6bba03645ba",
          "md5": "e46badeafaf6ad9e2ffa4f434f688ce7",
          "sha256": "56ace89bd21ad8d3890f07cb0d44e467ecd378f71984776e30e2fb353f8e37e5"
        },
        "downloads": -1,
        "filename": "mplex_image-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e46badeafaf6ad9e2ffa4f434f688ce7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50564,
        "upload_time": "2020-05-28T22:32:01",
        "upload_time_iso_8601": "2020-05-28T22:32:01.794114Z",
        "url": "https://files.pythonhosted.org/packages/b4/bf/dbbc67a20528d43277d1a2e3968956725462015ead1e4081a6bba03645ba/mplex_image-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a1824cecae58e5795c28764b64dc7b9337390716d177c3caec50f7513bf09b1",
          "md5": "ce56194ad0abb229301edd9385f84d52",
          "sha256": "9c7de52e57eaacf0bdf6a1613ba5ee193474917658d9fe7491d736d0366282a3"
        },
        "downloads": -1,
        "filename": "mplex_image-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce56194ad0abb229301edd9385f84d52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50567,
        "upload_time": "2020-05-28T22:38:08",
        "upload_time_iso_8601": "2020-05-28T22:38:08.244354Z",
        "url": "https://files.pythonhosted.org/packages/6a/18/24cecae58e5795c28764b64dc7b9337390716d177c3caec50f7513bf09b1/mplex_image-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2e3d931778c6fe3c594d046ce58d6937a7d289b0de2053beab086f9e3c834d2",
          "md5": "5ac22263c9065de2a3fd6e22d69b012b",
          "sha256": "e8e9461f42a29effd137bbfd10af1e7858b3b69df7a8ded960a33af2a151a0c4"
        },
        "downloads": -1,
        "filename": "mplex_image-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ac22263c9065de2a3fd6e22d69b012b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50554,
        "upload_time": "2020-05-28T23:19:13",
        "upload_time_iso_8601": "2020-05-28T23:19:13.408227Z",
        "url": "https://files.pythonhosted.org/packages/c2/e3/d931778c6fe3c594d046ce58d6937a7d289b0de2053beab086f9e3c834d2/mplex_image-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db101d84ac399bfd325c0b086a900300b47c52ac789cfca98e0213585180f4dd",
          "md5": "82deebb7b0c57b332d1d23439968f327",
          "sha256": "368806f7702876d13d61dc5c565f215377c899e1a0821cfd3448488cda4a4d85"
        },
        "downloads": -1,
        "filename": "mplex_image-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82deebb7b0c57b332d1d23439968f327",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 47169,
        "upload_time": "2020-05-29T00:52:05",
        "upload_time_iso_8601": "2020-05-29T00:52:05.195820Z",
        "url": "https://files.pythonhosted.org/packages/db/10/1d84ac399bfd325c0b086a900300b47c52ac789cfca98e0213585180f4dd/mplex_image-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5197aa00c3fea66871b4688badc51018a0636d9ca42003aace848955472befbe",
          "md5": "d54f28e6051c0c2c51b39e81096bb97d",
          "sha256": "f1584e73f8ca15df5c97d70ab73e1f4316b1249d1c9cc59ccfb803ff0ac29091"
        },
        "downloads": -1,
        "filename": "mplex_image-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d54f28e6051c0c2c51b39e81096bb97d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 47167,
        "upload_time": "2020-06-04T05:48:26",
        "upload_time_iso_8601": "2020-06-04T05:48:26.982258Z",
        "url": "https://files.pythonhosted.org/packages/51/97/aa00c3fea66871b4688badc51018a0636d9ca42003aace848955472befbe/mplex_image-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ebbaeb7d0d2d5214bb5d4eafa9b01c729d29904f316bff9c508e9c5c632c248",
          "md5": "e1379f9f019f606122c4913b5894c85d",
          "sha256": "8a25c354178686741da53ea60a5985797a4014d0b0f2c7aa9842e35260e01fcf"
        },
        "downloads": -1,
        "filename": "mplex_image-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1379f9f019f606122c4913b5894c85d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 117878,
        "upload_time": "2021-01-06T01:05:33",
        "upload_time_iso_8601": "2021-01-06T01:05:33.392330Z",
        "url": "https://files.pythonhosted.org/packages/1e/bb/aeb7d0d2d5214bb5d4eafa9b01c729d29904f316bff9c508e9c5c632c248/mplex_image-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8949180e06a109ca1da4b6ddf4c53d4b61b974b2fe3a91ec5ddea64e1ab9630",
          "md5": "8bbce7d4c93e86bbb43fe9d414cdb4e0",
          "sha256": "7f12738be95769d42b5927ddee8ba2335a259c8042a04e36b491d44124cd47c2"
        },
        "downloads": -1,
        "filename": "mplex_image-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bbce7d4c93e86bbb43fe9d414cdb4e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 117883,
        "upload_time": "2021-01-06T04:33:50",
        "upload_time_iso_8601": "2021-01-06T04:33:50.157151Z",
        "url": "https://files.pythonhosted.org/packages/b8/94/9180e06a109ca1da4b6ddf4c53d4b61b974b2fe3a91ec5ddea64e1ab9630/mplex_image-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8949180e06a109ca1da4b6ddf4c53d4b61b974b2fe3a91ec5ddea64e1ab9630",
        "md5": "8bbce7d4c93e86bbb43fe9d414cdb4e0",
        "sha256": "7f12738be95769d42b5927ddee8ba2335a259c8042a04e36b491d44124cd47c2"
      },
      "downloads": -1,
      "filename": "mplex_image-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8bbce7d4c93e86bbb43fe9d414cdb4e0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 117883,
      "upload_time": "2021-01-06T04:33:50",
      "upload_time_iso_8601": "2021-01-06T04:33:50.157151Z",
      "url": "https://files.pythonhosted.org/packages/b8/94/9180e06a109ca1da4b6ddf4c53d4b61b974b2fe3a91ec5ddea64e1ab9630/mplex_image-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}