{
  "info": {
    "author": "Mike Mabey",
    "author_email": "mike.mabey@cedar.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Medical Science Apps.",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Pyredox - A Pydantic-Based Library for Redox Data\n\n[![PyPI Info](https://img.shields.io/pypi/v/pyredox.svg)](https://pypi.python.org/pypi/pyredox)\n[![Python Version](https://img.shields.io/pypi/pyversions/pyredox)](https://pypi.python.org/pypi/pyredox)\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/cedar-team/pyredox/test_and_coverage.yml?branch=main)](https://github.com/cedar-team/pyredox/actions)\n[![Coverage Info](https://coveralls.io/repos/github/cedar-team/pyredox/badge.svg?branch=main)](https://coveralls.io/github/cedar-team/pyredox?branch=main)\n[![Black Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/pyredox)](https://pypi.python.org/pypi/pyredox)\n[![PyPI - License](https://img.shields.io/pypi/l/pyredox?color=blue)](https://pypi.python.org/pypi/pyredox)\n\nPyredox is library for producing, ingesting, and validating data from [Redox], a \"data platform designed to connect\nproviders, payers and products.\"\n\nPyredox is a set of [Pydantic] models that conforms to the [Redox data model] specification for the purpose of making it\neasy to convert Redox-formatted JSON to Python objects and vice versa. Because pyredox inherits the functionality of\nPydantic, it validates that the JSON data conforms to the spec automatically upon object creation.\n\nFor example, if you tried to create a [`NewPatient`\nmodel](https://developer.redoxengine.com/data-models/PatientAdmin.html#NewPatient) with insufficient data, you would get\nan error like this:\n\n```\n>>> from pyredox.patientadmin.newpatient import NewPatient\n>>> NewPatient(Meta={})\n\nValidationError: 3 validation errors for NewPatient\nMeta -> DataModel\n  field required (type=value_error.missing)\nMeta -> EventType\n  field required (type=value_error.missing)\nPatient\n  field required (type=value_error.missing)\n```\n\n[Redox]: https://www.redoxengine.com/\n\n[Redox data model]: https://developer.redoxengine.com/data-models/index.html\n\n[Pydantic]: https://pydantic-docs.helpmanual.io/\n\n## Usage\n\nThere are two primary methods to create a `pyredox` object:\n\n1. [JSON Dict Expansion](#json-dict-expansion):\n    - Benefits:\n        - Simple to use if you already have a JSON string or dictionary (or list of dictionaries) and want to get the\n          `pyredox` object that corresponds to that payload.\n        - Options for if you already know the Redox type of the JSON payload and options for if you don't.\n    - Shortcomings:\n        - Writing out or creating a full JSON payload can be quite verbose if you're crafting it yourself (vs processing\n          a received payload).\n\n2. [Generic Objects](#using-generics):\n    - Benefits:\n        - Very composable; objects for sub-objects can be created separately from the Event Type model you're building.\n    - Shortcomings:\n        - Validation of the field values against the original Redox schema isn't fully performed until you call one of\n          the `to_redox()`, `dict()`, or `json()` methods.\n\nFor instructions on how to serialize an object, see the [Serialize to JSON or `dict`](#serialize-to-json-or-dict)\nsection down below.\n\n### JSON Dict Expansion\n\nThe simplest way to create a `pyredox` model from a JSON payload is to pass an unpacked `dict` as the parameter when\ninitializing the object, like this:\n\n```python\npayload_str = \"\"\"\n{\n   \"Meta\": {\n      \"DataModel\": \"PatientAdmin\",\n      \"EventType\": \"NewPatient\"\n   },\n   \"Patient\": {\n      \"Identifiers\": [\n         {\n            \"ID\": \"e167267c-16c9-4fe3-96ae-9cff5703e90a\",\n            \"IDType\": \"EHRID\"\n         }\n      ]\n   }\n}\n\"\"\"\ndata = json.loads(payload_str)\nnew_patient = NewPatient(**data)\n```\n\nIf you have a payload and don't know which object type it is, you can use the factory helper, which can take a JSON\nstring or the loaded JSON dict/list:\n\n```python\nfrom pyredox.factory import redox_object_factory\n\nredox_object1 = redox_object_factory(payload_str)  # str input\nredox_object2 = redox_object_factory(data)  # dict input\n```\n\nTo create a JSON payload to send to Redox from an existing `pyredox` object, just call the `json()` method of the\nobject:\n\n```python\nnew_patient.json()\n```\n\nWhen working with the individual fields of a model object, you can traverse the element properties like so:\n\n```python\nnew_patient.patient.identifiers[0].id  # \"e167267c-16c9-4fe3-96ae-9cff5703e90a\"\n```\n\n### Using Generics\n\nThe Redox schema redefines every property of the Event Types in every location they're used. This is the case whether\nthe property definitions are exactly the same or have slight differences. In order to make sure that every Event Type\nclass in the library would perform structure validation exactly as defined in the schema, the \"proper Redox\" classes (my\nterm for all Redox objects *not* residing in the `generic` folder) all have their own property class definitions that\nmatch the schema. This means that there are classes that have the exact same fields that exist in the same Python file\nand fall under the same Event Type.\n\nFor example, in `pyredox/provider/new.py`, the `NewProviderRoleLocationAddress` and `NewProviderRoleOrganizationAddress`\nclasses have the exact same definition because they're both Addresses. However, because one represents the address of\nthe location for a provider's role and the other represents the address of the organization for the provider's role,\nRedox treats them differently. In contrast, most Event Types' `Meta` properties have similar but different fields,\nalthough all of them have the required `DataModel` and `EventType` fields.\n\nBecause of all this, it becomes quite difficult to write a program that can build up a Redox message from multiple data\nsources without coupling with it a knowledge of the exact message you're creating. And even then the code can become\nvery unwieldy with sprawling Python dictionaries.\n\nThe solution is to use the Event Type classes and property classes defined in the `generic` directory. So, instead of\ncreating a new provider like this:\n\n```python\n# THIS IS THE HARDER WAY TO DO THINGS!\nfrom pyredox.provider import New\nfrom pyredox.provider.new import (\n    NewMeta,\n    NewProvider,\n    NewProviderIdentifier,\n    NewProviderRole,\n    NewProviderRoleLocation,\n    NewProviderRoleLocationAddress,\n    NewProviderRoleOrganization,\n    NewProviderRoleOrganizationAddress,\n)\n\nprovider_org = NewProviderRoleOrganization(\n    Address=NewProviderRoleOrganizationAddress(\n        StreetAddress=\"123 Cherry St\",\n        City=\"Green Bay\",\n        State=\"Wisconsin\",\n        ZIP=\"54321\",\n        Country=\"USA\",\n    )\n)\nprovider_loc1 = NewProviderRoleLocation(\n    Address=NewProviderRoleLocationAddress(\n        StreetAddress=\"123 Cherry St\",\n        City=\"Green Bay\",\n        State=\"Wisconsin\",\n        ZIP=\"54321\",\n        Country=\"USA\",\n    ),\n)\nprovider_loc2 = NewProviderRoleLocation(\n    Address=NewProviderRoleLocationAddress(\n        StreetAddress=\"567 Splenda Way\",\n        City=\"Green Bay\",\n        State=\"Wisconsin\",\n        ZIP=\"54321\",\n        Country=\"USA\",\n    )\n)\nprovider = NewProvider(\n    Identifiers=[NewProviderIdentifier(ID=\"FakeProviderID\")],\n    IsActive=True,\n    Roles=[\n        NewProviderRole(\n            Organization=provider_org,\n            Locations=[provider_loc1, provider_loc2],\n        )\n    ],\n)\n\nnew_provider_msg = New(\n    Meta=NewMeta(DataModel=\"Provider\", EventType=\"New\", Test=True),\n    Providers=[provider],\n)\n```\n\nThe following is more composable and somewhat simpler:\n\n```python\n# Simpler way to create a new Provider\nfrom pyredox.generic import types as pyredox_types\nfrom pyredox.generic.Provider import New as NewProvider\n\n# Because office_address is a generic Address type, we can reuse it for both\n# the Organization and the Location for this Provider.\noffice_address = pyredox_types.Address(\n    StreetAddress=\"123 Cherry St\",\n    City=\"Green Bay\",\n    State=\"Wisconsin\",\n    ZIP=\"54321\",\n    Country=\"USA\",\n)\nclinic_address = pyredox_types.Address(\n    StreetAddress=\"567 Splenda Way\",\n    City=\"Green Bay\",\n    State=\"Wisconsin\",\n    ZIP=\"54321\",\n    Country=\"USA\",\n)\nprovider_org = pyredox_types.Organization(Address=office_address)\nprovider_loc1 = pyredox_types.Location(Address=office_address)\nprovider_loc2 = pyredox_types.Location(Address=clinic_address)\nprovider = pyredox_types.Provider(\n    Identifiers=[pyredox_types.Identifier(ID=\"FakeProviderID\")],\n    IsActive=True,\n    Roles=[\n        pyredox_types.Role(\n            Organization=provider_org,\n            Locations=[provider_loc1, provider_loc2],\n        )\n    ],\n)\n\nnew_provider_msg = NewProvider(\n    Meta=pyredox_types.Meta(DataModel=\"Provider\", EventType=\"New\", Test=True),\n    Providers=[provider],\n).to_redox()  # This converts the object to a \"proper Redox\" model\n```\n\nIt's important to note here that both the `.dict()` and `.json()` methods of the generic Event Type classes\nautomatically convert the data to the \"proper Redox\" form first, so that last statement could also be written like this:\n\n```python\nnew_provider_json = NewProvider(\n    Meta=pyredox_types.Meta(DataModel=\"Provider\", EventType=\"New\", Test=True),\n    Providers=[provider],\n).json()  # This converts the object to a \"proper Redox\" model, then gets the JSON string\n```\n\nThere is a chance that, by using the generic types to build up the Redox message in a composable way, you may introduce\nfields that are available in the generic version of the object that are not defined in the \"proper Redox\" model. The\nlibrary's default behavior is to silently drop those fields with no current plans to make this configurable.\n\nThere's also a possibility that the \"proper Redox\" object you're building specifies a data type for a field that differs\nfrom other models that use that data type, which is a result of how the schema is specified. For example, the\n[generic `Demographics` class has the following field definition]([https://github.com/cedar-team/pyredox/blob/341407063f27d3b82000bcb86362ec00ce48dec2/pyredox/generic/types.py#L644]):\n\n```python\nEmailAddresses: Union[List[\"EmailAddress\"], List[str]]\n```\n\nSome Event Type models specify a list of strings and others require an `EmailAddress` object. Currently, the only way to\ndetect when such a type mismatch occurs is to catch the `pydantic.ValidationError` exception, like this:\n\n```python\nfrom pydantic import ValidationError\n\ntry:\n    new_provider_json = NewProvider(\n        Meta=pyredox_types.Meta(DataModel=\"Provider\", EventType=\"New\", Test=True),\n        Providers=[provider],\n    ).json()  # This converts the object to a \"proper Redox\" model\nexcept ValidationError:\n    # TODO: Handle the validation error here\n    pass\n```\n\n### Serialize to JSON or `dict`\n\nAll `pyredox` objects have methods that allow for easy serialization:\n- For the `dict` version of an object, call the `dict()` method.\n- For the JSON `str` version of an object, call the `json()` method.\n\nTo customize how `pyredox` exports the data from your model, you can use any of the [parameters available from the\nunderlying Pydantic models](https://pydantic-docs.helpmanual.io/usage/exporting_models/). Note that when calling the\n`json()` method, you can also include keyword arguments to be passed to the `json.dumps()`.\n\nWhen serializing generic types, be aware that `pyredox` will convert the object to the corresponding \"proper Redox\"\nbefore returning the serialized data. See above for more information.\n\n### Casting between types\n\nEvery `pyredox` object has a `cast_from()` method that is intended for use when you need to assign the same values to\nmultiple objects while avoiding any type-checking errors. For example, on a generic `Visit` object, there are multiple\nprovider fields that only differ in which role that provider filled for the visit. If the same provider filled multiple\nroles, it is redundant to specify the same provider information in multiple object instances.\n\nUsing this `cast_from()` class method, you only need to create a generic object with all the provider information and\nthen cast it to the different types:\n\n```python\nprovider = AdmittingProvider(...)\nvisit = Visit(\n    AdmittingProvider=provider,\n    AttendingProvider=AttendingProvider.cast_from(provider),\n    VisitProvider=VisitProvider.cast_from(provider),\n)\n```\n\nIf multiple objects are passed to `cast_from`, the first object's fields will be given preference, then the second\nobject's fields, and so on. This mimics the MRO for multiple inheritance (see\nhttps://docs.python.org/3/tutorial/classes.html#multiple-inheritance\nfor more info).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cedar-team/pyredox",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyredox",
    "package_url": "https://pypi.org/project/pyredox/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyredox/",
    "project_urls": {
      "Homepage": "https://github.com/cedar-team/pyredox"
    },
    "release_url": "https://pypi.org/project/pyredox/1.0.4/",
    "requires_dist": [
      "pydantic (>=1.9.0,<1.10.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17117717,
  "releases": {
    "0.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7945a2e9e14cc0f3781deb918b7af2d7a28e2913f4bcaf355a6e661ef210b3c5",
          "md5": "50987c946545f3d2bcb59d9d422cf215",
          "sha256": "d6d0e496094e6673c68935b2a96d3d3d403280fc353fc51cf5b8604270ad4424"
        },
        "downloads": -1,
        "filename": "pyredox-0.1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50987c946545f3d2bcb59d9d422cf215",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0",
        "size": 191094,
        "upload_time": "2022-06-02T22:35:11",
        "upload_time_iso_8601": "2022-06-02T22:35:11.576257Z",
        "url": "https://files.pythonhosted.org/packages/79/45/a2e9e14cc0f3781deb918b7af2d7a28e2913f4bcaf355a6e661ef210b3c5/pyredox-0.1.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b3e3cdf5c87a21e6ab7dbf00439f9907e008bb8232a7be29d982a7961ee4ee3",
          "md5": "2ca5c6cef0a19a5d99d27e9acb562ade",
          "sha256": "dbf5971c2f96217d2fb1c41afa75f3ff016fec5e67c51ecdbd804d879b8e9d22"
        },
        "downloads": -1,
        "filename": "pyredox-0.1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ca5c6cef0a19a5d99d27e9acb562ade",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0",
        "size": 90357,
        "upload_time": "2022-06-02T22:35:13",
        "upload_time_iso_8601": "2022-06-02T22:35:13.267435Z",
        "url": "https://files.pythonhosted.org/packages/4b/3e/3cdf5c87a21e6ab7dbf00439f9907e008bb8232a7be29d982a7961ee4ee3/pyredox-0.1.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe7ad2563a3e7639f1baefb6b2081d05d9542725c879cab279fd5baf0a26f5b0",
          "md5": "9745e0b3d39b7250d8400b64574db0c8",
          "sha256": "06099674c72eaa250dca9b97cb1b8286ccf74edd1274dc08aabda0c40441660e"
        },
        "downloads": -1,
        "filename": "pyredox-0.1.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9745e0b3d39b7250d8400b64574db0c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0",
        "size": 191333,
        "upload_time": "2022-06-03T16:54:48",
        "upload_time_iso_8601": "2022-06-03T16:54:48.700925Z",
        "url": "https://files.pythonhosted.org/packages/fe/7a/d2563a3e7639f1baefb6b2081d05d9542725c879cab279fd5baf0a26f5b0/pyredox-0.1.0a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0a0bee6d72d9746b1f2497c6c1fb72db3eaa3b7906d1a3bb3114a2181928e0f",
          "md5": "7ca9ebbb403724853c3aef7df6d39b68",
          "sha256": "495c5bcfd118d972227401042399ee68692fa79671ee4553359c159cd4232ea0"
        },
        "downloads": -1,
        "filename": "pyredox-0.1.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "7ca9ebbb403724853c3aef7df6d39b68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0",
        "size": 90596,
        "upload_time": "2022-06-03T16:54:50",
        "upload_time_iso_8601": "2022-06-03T16:54:50.392914Z",
        "url": "https://files.pythonhosted.org/packages/e0/a0/bee6d72d9746b1f2497c6c1fb72db3eaa3b7906d1a3bb3114a2181928e0f/pyredox-0.1.0a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27b57f3dfc673fa31852ce40b3318738f6362eb0f9142c2df23bd75ed477b6fd",
          "md5": "457ea0e4c43d01df90941a725d55d2a4",
          "sha256": "009567593b7de1a5114baaf87f905c4d73a4fb3c20d30e2f97360778d779b3e9"
        },
        "downloads": -1,
        "filename": "pyredox-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "457ea0e4c43d01df90941a725d55d2a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0",
        "size": 192538,
        "upload_time": "2022-06-15T15:05:41",
        "upload_time_iso_8601": "2022-06-15T15:05:41.529994Z",
        "url": "https://files.pythonhosted.org/packages/27/b5/7f3dfc673fa31852ce40b3318738f6362eb0f9142c2df23bd75ed477b6fd/pyredox-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37bf4ab63ad0e094f87c3c1e688ede5c6cb0f322299da6686f8419c38edbc011",
          "md5": "7c866ce0dbc0391d6a0816818b1ff10e",
          "sha256": "de54f1a4d54d1b056ba38f0b9557e2c17c751cbadd44383fca64c679cc810dc0"
        },
        "downloads": -1,
        "filename": "pyredox-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7c866ce0dbc0391d6a0816818b1ff10e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0",
        "size": 91963,
        "upload_time": "2022-06-15T15:05:42",
        "upload_time_iso_8601": "2022-06-15T15:05:42.740405Z",
        "url": "https://files.pythonhosted.org/packages/37/bf/4ab63ad0e094f87c3c1e688ede5c6cb0f322299da6686f8419c38edbc011/pyredox-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "408a2b5f9a04b86826c640b33d530a67059c147759362a188817651ea3286966",
          "md5": "e34a68f4ce69b0d1406bb24473c97680",
          "sha256": "16cbce4d2a441b0eac584a6771401a96ee80979f360ced097bdf82dce9874528"
        },
        "downloads": -1,
        "filename": "pyredox-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e34a68f4ce69b0d1406bb24473c97680",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0",
        "size": 192543,
        "upload_time": "2022-06-15T15:23:57",
        "upload_time_iso_8601": "2022-06-15T15:23:57.226269Z",
        "url": "https://files.pythonhosted.org/packages/40/8a/2b5f9a04b86826c640b33d530a67059c147759362a188817651ea3286966/pyredox-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1556bc06c4490d31424a547425e20609973d8ef63b6f4124864a317b2921f339",
          "md5": "43c749ccf0b0f9c2c7710d0f6d194395",
          "sha256": "e1bda60cde1a7608b4d9ad6da21f054172ea62ebf250c31f171322beefe5421e"
        },
        "downloads": -1,
        "filename": "pyredox-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "43c749ccf0b0f9c2c7710d0f6d194395",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0",
        "size": 91969,
        "upload_time": "2022-06-15T15:23:58",
        "upload_time_iso_8601": "2022-06-15T15:23:58.383772Z",
        "url": "https://files.pythonhosted.org/packages/15/56/bc06c4490d31424a547425e20609973d8ef63b6f4124864a317b2921f339/pyredox-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e311636bddd68c53b66ea794557aa92276c50f0fc0a929e34fa16a850fdcd404",
          "md5": "c9c8c9894be849659cae679158c2148a",
          "sha256": "3a67a9f50bded560390f816d0e6db8e2e6eb4b5f1bdd87a1aefd6bead51b9c90"
        },
        "downloads": -1,
        "filename": "pyredox-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9c8c9894be849659cae679158c2148a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0",
        "size": 196349,
        "upload_time": "2022-08-02T21:04:32",
        "upload_time_iso_8601": "2022-08-02T21:04:32.483483Z",
        "url": "https://files.pythonhosted.org/packages/e3/11/636bddd68c53b66ea794557aa92276c50f0fc0a929e34fa16a850fdcd404/pyredox-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56c52cc4ab7cf3e03cc6cb82bb6ee0fdb3c0158c166e082fc342bbc4ca9698e1",
          "md5": "79cf2928bb51781fb65c5047dc06bd2d",
          "sha256": "4ed9f3a6039298b328946fa6e708cf652c0bb3c62e9783f5409f7e4dfbc660c7"
        },
        "downloads": -1,
        "filename": "pyredox-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "79cf2928bb51781fb65c5047dc06bd2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0",
        "size": 95537,
        "upload_time": "2022-08-02T21:04:34",
        "upload_time_iso_8601": "2022-08-02T21:04:34.107686Z",
        "url": "https://files.pythonhosted.org/packages/56/c5/2cc4ab7cf3e03cc6cb82bb6ee0fdb3c0158c166e082fc342bbc4ca9698e1/pyredox-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0cc968eb228e4474c31e578e6475a46f0813606049c1b204709fdc553bb6937",
          "md5": "37a245d74e221a4bb0f4d2e798fb1745",
          "sha256": "7d8003652a97aca688018fbfbe800b5568c9197fb7d420c2b16a935630a9d1c7"
        },
        "downloads": -1,
        "filename": "pyredox-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37a245d74e221a4bb0f4d2e798fb1745",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 214583,
        "upload_time": "2023-03-01T20:40:16",
        "upload_time_iso_8601": "2023-03-01T20:40:16.406019Z",
        "url": "https://files.pythonhosted.org/packages/b0/cc/968eb228e4474c31e578e6475a46f0813606049c1b204709fdc553bb6937/pyredox-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32d3545bff9754f969d2b4cb4b0b568d1b56ec91c8bf185cd4eea804032d2132",
          "md5": "6ab09cb8214dfd055ed13db280d6d715",
          "sha256": "9b38f4b5bc0177e78db2ebb763533dc4eee062681dbf27a54c9f45a6b4038236"
        },
        "downloads": -1,
        "filename": "pyredox-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6ab09cb8214dfd055ed13db280d6d715",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 111963,
        "upload_time": "2023-03-01T20:40:18",
        "upload_time_iso_8601": "2023-03-01T20:40:18.455166Z",
        "url": "https://files.pythonhosted.org/packages/32/d3/545bff9754f969d2b4cb4b0b568d1b56ec91c8bf185cd4eea804032d2132/pyredox-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0cc968eb228e4474c31e578e6475a46f0813606049c1b204709fdc553bb6937",
        "md5": "37a245d74e221a4bb0f4d2e798fb1745",
        "sha256": "7d8003652a97aca688018fbfbe800b5568c9197fb7d420c2b16a935630a9d1c7"
      },
      "downloads": -1,
      "filename": "pyredox-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "37a245d74e221a4bb0f4d2e798fb1745",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 214583,
      "upload_time": "2023-03-01T20:40:16",
      "upload_time_iso_8601": "2023-03-01T20:40:16.406019Z",
      "url": "https://files.pythonhosted.org/packages/b0/cc/968eb228e4474c31e578e6475a46f0813606049c1b204709fdc553bb6937/pyredox-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32d3545bff9754f969d2b4cb4b0b568d1b56ec91c8bf185cd4eea804032d2132",
        "md5": "6ab09cb8214dfd055ed13db280d6d715",
        "sha256": "9b38f4b5bc0177e78db2ebb763533dc4eee062681dbf27a54c9f45a6b4038236"
      },
      "downloads": -1,
      "filename": "pyredox-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "6ab09cb8214dfd055ed13db280d6d715",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 111963,
      "upload_time": "2023-03-01T20:40:18",
      "upload_time_iso_8601": "2023-03-01T20:40:18.455166Z",
      "url": "https://files.pythonhosted.org/packages/32/d3/545bff9754f969d2b4cb4b0b568d1b56ec91c8bf185cd4eea804032d2132/pyredox-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}