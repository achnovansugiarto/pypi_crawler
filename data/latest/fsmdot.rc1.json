{
  "info": {
    "author": "Quentin Deschamps",
    "author_email": "quentindeschamps18@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Education",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# Finite-state machines with dot\n\n[![Build Status](https://travis-ci.org/Quentin18/fsmdot.svg?branch=master)](https://travis-ci.org/Quentin18/fsmdot)\n![PyPI](https://img.shields.io/pypi/v/fsmdot)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/fsmdot)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n**fsmdot** is a Python package to create finite-state machines which can be exported to dot format. It uses the [pygraphviz](https://pygraphviz.github.io/) library which is a Python interface to the [Graphviz](https://graphviz.org/) graph layout and visualization package.\n\n## Installing\n- First, you need to install Graphviz. See how to download it [here](https://graphviz.org/download/).\n- Then, *fsmdot* can be installed using [pip](https://pip.pypa.io/en/stable/):\n```\npip3 install fsmdot\n```\n\n## Usage\nWith the *fsmdot* library, you can create two different types of finite-state machine:\n- **Deterministic finite automaton** (DFA)\n- **Nondeterministic finite automaton** (NFA)\n\nA finite-state machine is represented by a quintuple (Q, S, T, q0, F) where:\n- **Q** is a set of states\n- **S** is a set of input symbols (alphabet)\n- **d** is a dictionnary containing the transitions\n- **q0** is the initial state\n- **F** is the set of accept states\n\n### Deterministic finite automaton\nThis is how to create a deterministic finite automaton.\n- First, we import the **Dfa** class:\n```python\nfrom fsmdot.dfa import Dfa\n```\n- Create the set of states:\n```python\nQ = {'S1', 'S2'}\n```\n- Create the set of symbols representing the input alphabet:\n```python\nS = {'0', '1'}\n```\n- Create the transitions as a dictionnary.\n```python\nd = {\n    'S1': {\n        '0': 'S2',\n        '1': 'S1'\n    },\n    'S2': {\n        '0': 'S1',\n        '1': 'S2'\n    }\n}\n```\n- Create the initial state (the state must be in Q):\n```python\nq0 = 'S1'\n```\n- Create the set of accept states (the states must be in Q):\n```python\nF = {'S1'}\n```\n- Then, you can create the DFA:\n```python\na = Dfa(Q, S, d, q0, F)\n```\n- To see the state-transition table, use the **print_table** method:\n```python\na.print_table()\n```\nThis is the result:\n```\n+---------+-----+-----+\n|         |   0 |   1 |\n+=========+=====+=====+\n| -> * S1 |  S2 |  S1 |\n+---------+-----+-----+\n|      S2 |  S1 |  S2 |\n+---------+-----+-----+\n```\n- You can check if a string is accepted by the automata using the **accept** method:\n```python\nprint(a.accept('11110'))\nprint(a.accept('110110110101'))\n```\nThis is the result:\n```\nFalse\nTrue\n```\n- To create the dot graph representing the DFA, use the **dot_graph** method. It creates a graph object.\n```python\nG = a.dot_graph()\n```\nYou can print the string representation of the graph using the **to_string** method or write this content in a file using the **write** method (see [pygraphviz](https://pygraphviz.github.io/)):\n```python\nprint(G.to_string())\nG.write('graph1_dfa.dot')\n```\nResult:\n```\nstrict digraph FSM {\n\tgraph [rankdir=LR];\n\tnode [shape=circle];\n\tnull\t[shape=point];\n\tS1\t[shape=doublecircle];\n\tnull -> S1;\n\tS1 -> S1\t[label=1];\n\tS1 -> S2\t[label=0];\n\tS2 -> S1\t[label=0];\n\tS2 -> S2\t[label=1];\n}\n```\nFile *graph1_dfa.dot*:\n\n![Graph 1](./img/graph1.svg)\n\n### Nondeterministic finite automaton\nYou can also create nondeterministic finite automatons using the **Nfa** class.\n- To add epsilon-moves, use the symbol **Nfa.EPSILON**.\n\nExample:\n```python\nfrom fsmdot.nfa import Nfa\n\nQ = {1, 2, 3, 4}\nS = {Nfa.EPSILON, '0', '1'}\nd = {\n    1: {\n        Nfa.EPSILON: {3},\n        '0': {2}\n    },\n    2: {\n        '1': {2, 4}\n    },\n    3: {\n        Nfa.EPSILON: {2},\n        '0': {4}\n    },\n    4: {\n        '0': {3}\n    }\n}\nq0 = 1\nF = {3, 4}\n\na = Nfa(Q, S, d, q0, F)\na.print_table()\n\nG = a.dot_graph()\nG.write('graph6_nfa.dot')\n```\nState-transition table:\n```\n+------+-----+--------+-----+\n|      |   0 |      1 |   Îµ |\n+======+=====+========+=====+\n| -> 1 | {2} |     {} | {3} |\n+------+-----+--------+-----+\n|    2 |  {} | {2, 4} |  {} |\n+------+-----+--------+-----+\n|  * 3 | {4} |     {} | {2} |\n+------+-----+--------+-----+\n|  * 4 | {3} |     {} |  {} |\n+------+-----+--------+-----+\n```\nFile *graph6_nfa.dot*:\n\n![Graph 6 NFA](./img/graph6_nfa.svg)\n\n- To calculate the epsilon closure of a state, use the **epsilon_closure** method.\n```python\n# Calculations of epsilon closure\nfor state in Q:\n    print(state, a.epsilon_closure(state))\n```\nResult:\n```\n1 {1, 2, 3}\n2 {2}\n3 {2, 3}\n4 {4}\n```\n- To convert a NFA to a DFA, use the **to_dfa** method. It uses the powerset construction.\n```python\n# Conversion to DFA\ndfa = a.to_dfa()\ndfa.print_table()\nG2 = dfa.dot_graph()\nG2.write('graph6_dfa.dot')\n```\nState-transition table of dfa:\n```\n+----------------+--------+--------+\n|                |      0 |      1 |\n+================+========+========+\n| -> * {1, 2, 3} | {2, 4} | {2, 4} |\n+----------------+--------+--------+\n|       * {2, 3} |    {4} | {2, 4} |\n+----------------+--------+--------+\n|       * {2, 4} | {2, 3} | {2, 4} |\n+----------------+--------+--------+\n|          * {4} | {2, 3} |     {} |\n+----------------+--------+--------+\n```\nFile *graph6_dfa.dot*:\n\n![Graph 6 NFA](./img/graph6_dfa.svg)\n\n## Examples\nTo see how the library works, look at the examples in the *examples* folder.\n\n## References\n- [Automata theory](https://en.wikipedia.org/wiki/Automata_theory)\n- [Finite-state machines](https://en.wikipedia.org/wiki/Finite-state_machine)\n- [Deterministic finite automaton](https://en.wikipedia.org/wiki/Deterministic_finite_automaton)\n- [Nondeterministic finite automaton](https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton)\n- [Powerset construction](https://en.wikipedia.org/wiki/Powerset_construction)\n- [DFA minimization](https://en.wikipedia.org/wiki/DFA_minimization)\n\n## Author\n[Quentin Deschamps](mailto:quentindeschamps18@gmail.com)\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Quentin18/fsmdot",
    "keywords": "fsm automata dfa nfa",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fsmdot",
    "package_url": "https://pypi.org/project/fsmdot/",
    "platform": "any",
    "project_url": "https://pypi.org/project/fsmdot/",
    "project_urls": {
      "Homepage": "https://github.com/Quentin18/fsmdot",
      "Source Code": "https://github.com/Quentin18/fsmdot/",
      "Travis": "https://travis-ci.org/github/Quentin18/fsmdot/"
    },
    "release_url": "https://pypi.org/project/fsmdot/0.0.1/",
    "requires_dist": [
      "pygraphviz",
      "tabulate"
    ],
    "requires_python": ">=3.6",
    "summary": " Implementation of finite-state machines and exportation to dot format",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8781593,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cc646646efb472f6f7277ce8a4ffffba992e4d61cf995a0ce9b66f1914da85a",
          "md5": "a7f16c633d87aaf7dfcd8a1427a7e029",
          "sha256": "202c4f2c654ba4569664790e60268308e6927d7e30d9c395853838a659d9c12e"
        },
        "downloads": -1,
        "filename": "fsmdot-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7f16c633d87aaf7dfcd8a1427a7e029",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8593,
        "upload_time": "2020-11-30T18:08:30",
        "upload_time_iso_8601": "2020-11-30T18:08:30.454064Z",
        "url": "https://files.pythonhosted.org/packages/0c/c6/46646efb472f6f7277ce8a4ffffba992e4d61cf995a0ce9b66f1914da85a/fsmdot-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be842278e3673ff9dde3e042a33b36ae36ffef4ce82866e4b239b5bb2e272261",
          "md5": "568bbb58c7e515deaea978ac40320812",
          "sha256": "55ced4f562466cef1236628eb66022a0dab8f75aae64385046d05879a68feb4c"
        },
        "downloads": -1,
        "filename": "fsmdot-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "568bbb58c7e515deaea978ac40320812",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8541,
        "upload_time": "2020-11-30T18:08:32",
        "upload_time_iso_8601": "2020-11-30T18:08:32.251007Z",
        "url": "https://files.pythonhosted.org/packages/be/84/2278e3673ff9dde3e042a33b36ae36ffef4ce82866e4b239b5bb2e272261/fsmdot-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0cc646646efb472f6f7277ce8a4ffffba992e4d61cf995a0ce9b66f1914da85a",
        "md5": "a7f16c633d87aaf7dfcd8a1427a7e029",
        "sha256": "202c4f2c654ba4569664790e60268308e6927d7e30d9c395853838a659d9c12e"
      },
      "downloads": -1,
      "filename": "fsmdot-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7f16c633d87aaf7dfcd8a1427a7e029",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8593,
      "upload_time": "2020-11-30T18:08:30",
      "upload_time_iso_8601": "2020-11-30T18:08:30.454064Z",
      "url": "https://files.pythonhosted.org/packages/0c/c6/46646efb472f6f7277ce8a4ffffba992e4d61cf995a0ce9b66f1914da85a/fsmdot-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be842278e3673ff9dde3e042a33b36ae36ffef4ce82866e4b239b5bb2e272261",
        "md5": "568bbb58c7e515deaea978ac40320812",
        "sha256": "55ced4f562466cef1236628eb66022a0dab8f75aae64385046d05879a68feb4c"
      },
      "downloads": -1,
      "filename": "fsmdot-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "568bbb58c7e515deaea978ac40320812",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8541,
      "upload_time": "2020-11-30T18:08:32",
      "upload_time_iso_8601": "2020-11-30T18:08:32.251007Z",
      "url": "https://files.pythonhosted.org/packages/be/84/2278e3673ff9dde3e042a33b36ae36ffef4ce82866e4b239b5bb2e272261/fsmdot-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}