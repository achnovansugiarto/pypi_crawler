{
  "info": {
    "author": "Noa gradovitch",
    "author_email": "noahgrad@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pymonitor\n\nmore info including examples can be found here <br>\n[https://github.com/noahgrad/pymonitor/](https://github.com/noahgrad/pymonitor/)\n\n## Why?\nLets say you have a lot of etls that runs in different platforms (airflow, kubernetes etc)  and writes data to different places  (mysql, snowflake, s3 etc) so how do you monitor them? how do you check that each of etls end up correctly and the data reached its destination?\npymonitor come to help discover that the data didn't reach its destination ASAP.\n\n## The idea\nThe idea is to do the same thing pytest is doing for testing just for monitoring. \nRun pymonitor.py script on a specific directory it will run all monitoring files - files with specific name and will try to run their monitor method - method with specific name. <br>\nLets say we have a directory of etls each etl in its own subdirectory in this case we will add a monitor file to each of the subdirectories. Each monitor file will monitor just its etl. <br> \nBy the end of running the script we will get a covergae of monitor for all the etls that implemented a monitor method in a monitor file (the same as in pytest)\n\n## Usage example\npython src/pymonitoring/pymonitor.py --dir etls --end_ts 1663064624 --filename \"Example*.py\" <br>\nWill try to find all the Example*.py file name in directory etls and run their monitor method. <br>\nor  <br>\n**pip intsall pymonitor-foretls** <br>\nfrom pymonitoring.pymonitor import monitor\nmonitor(\"examples\", 1663064624,\"Example*.py\")\n\n\n## The pymonitor.py script or monitor method \nNeed to get: <br>\n**end_ts**  - the timestamp untill it we want to monitor. <br>\n**dir**         - the directory to run on <br>\nCan get: <br>\n**filename** - seach for files with this name in the given directory default is 'monitor.py' <br>\n**methodname** - execute this method with the end_ts paramter default is 'monitor' <br>\nGet all files name  filename in dir  <br>\nfor each file:  <br>\n execute the method methodname with the end_ts <br>\n\n## The PyMonitoring class\nContains some static methods to help you peform some monitoring currenty we have: <br>\n**send_slack_monitoring_massage** - Send message to the slack channel <br>\n**check_table_in_sf** - Check if there is data in the specified table between the start ts and end ts in the given time_field_name  <br>\nif there is data return True else can send slack notification and return False <br>\n**check_query_in_sf** - Send query to snowflake and return the query result.  <br>\nsend slack message if there is no data <br>\n\nMore method should come\n\n## The examples directory\nContains 2 example of how to write and use the PyMonitoring class.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/noahgrad/pymonitor",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymonitor-foretls",
    "package_url": "https://pypi.org/project/pymonitor-foretls/",
    "platform": null,
    "project_url": "https://pypi.org/project/pymonitor-foretls/",
    "project_urls": {
      "Homepage": "https://github.com/noahgrad/pymonitor"
    },
    "release_url": "https://pypi.org/project/pymonitor-foretls/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "pymonitoring like pytest just for monitoring",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15090719,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47a12eaea952851eed3091a6ec8891f4a971c4cd2210b73668e1f3d1466580ff",
          "md5": "f716a8f234384b287703eb7d1e0d6170",
          "sha256": "641c2d35d01e6bd82fbb4bbb55e97f70e3f06aeeb01e06215e2ae92ca2c5c7e9"
        },
        "downloads": -1,
        "filename": "pymonitor-foretls-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f716a8f234384b287703eb7d1e0d6170",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4021,
        "upload_time": "2022-09-14T11:18:46",
        "upload_time_iso_8601": "2022-09-14T11:18:46.036665Z",
        "url": "https://files.pythonhosted.org/packages/47/a1/2eaea952851eed3091a6ec8891f4a971c4cd2210b73668e1f3d1466580ff/pymonitor-foretls-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47a12eaea952851eed3091a6ec8891f4a971c4cd2210b73668e1f3d1466580ff",
        "md5": "f716a8f234384b287703eb7d1e0d6170",
        "sha256": "641c2d35d01e6bd82fbb4bbb55e97f70e3f06aeeb01e06215e2ae92ca2c5c7e9"
      },
      "downloads": -1,
      "filename": "pymonitor-foretls-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f716a8f234384b287703eb7d1e0d6170",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 4021,
      "upload_time": "2022-09-14T11:18:46",
      "upload_time_iso_8601": "2022-09-14T11:18:46.036665Z",
      "url": "https://files.pythonhosted.org/packages/47/a1/2eaea952851eed3091a6ec8891f4a971c4cd2210b73668e1f3d1466580ff/pymonitor-foretls-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}