{
  "info": {
    "author": "Marius Kühl",
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Mutation-Simulator\n[![PyPI version](https://badge.fury.io/py/Mutation-Simulator.svg)](https://badge.fury.io/py/Mutation-Simulator)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\nMutation-Simulator is a tool for simulating SNPs and SVs in any reference\ngenome with cohesive documentation about the implemented mutations. With\nMutation-Simulator, the new file format Random Mutation Tables\n([RMT](https://github.com/mkpython3/Mutation-Simulator/blob/master/rmt-docs.pdf))\nis introduced, which gives more simulation power to the user by creating an\ninterface for highly customized simulations. This can potentially achieve more\nnatural simulation patterns tailored to the reference genome.\nMutation-Simulator provides 3 different modes to simulate SNPs, insertions,\ndeletions, tandem duplications, inversions, translocations and interchromosomal\ntranslocations from the command line or with highly configurable RMT files.\n\n___\n## Breaking changes\n### Version 3.0.0\n+ Major rewrite resulting in performance and code readability gains\n+ Python version 3.10.0 or higher is now required\n+ Mutation type length options/keywords have entirely been replaced by minimum\n  and maximum length counterparts\n+ Standard output path is now the current working directory\n+ `_ms` and `_ms_it` will now always be added to the output filenames\n+ Output Fasta file extensions will now be deduced from the input Fasta\n+ `-w`/`--ignore-warnings` is now a top level option available in all modes\n___\n\n## Motivation\nThe simulation of mutations is a useful tool when benchmarking bioinformatics\nprograms for variant identification and read alignment. While other simulation\nprograms provide a set of tools to simulate some types of SNPs or SVs, they are\noften either lacking features or limited to a specific genome type. The need\nfor a \"Swiss Army Knife\" of simulation software combined with the wish to\ndefine mutation rate hot and cold spots, led towards the development of\nMutation-Simulator. This tool **is not designed to be used as an evolution or\ninheritance simulator**. It is mainly designed to assist other tools, for\nexample variant callers or read aligners as a benchmark. Mutation-Simulator\nprovides the functionality to edit reference sequences using user specified\nconfiguration files\n([RMT](https://github.com/mkpython3/Mutation-Simulator/blob/master/rmt-docs.pdf))\nor command line options. With Mutation-Simulator it is possible to test whether\nother tools handle SNPs and SVs correctly. RMT files aim to assist the user in\ncreating a benchmarking dataset that is as close to biological data as desired.\n\n## Features\n+ Many common SV types and SNPs supported\n+ Not restricted to specific genomes / genome types\n+ Highly configurable\n+ New RMT file format allows adjusting mutation-rates easily on a base\n  resolution for more realistic mutation patterns\n+ Regions on the reference can be blocked from mutating (for example centromeres)\n+ Operates with full genomes or small DNA fragments in Fasta files\n+ Simple syntax\n+ [VCF](https://samtools.github.io/hts-specs/VCFv4.3.pdf) documentation of\n  introduced SNPs and Structural Variations (SVs).\n+ [BEDPE](https://bedtools.readthedocs.io/en/latest/content/general-usage.html)\n  documentation of **interchromosomal** translocations\n+ SNP simulation supports transitions / transversion rates\n+ Translocations are marked with INS:ME and DEL:ME in the VCF file\n\n## Installation\n+ (Recommended) Create and activate a new Python >= 3.10 environment with\n  [pyenv](https://github.com/pyenv/pyenv) and [pyenv-virtualenv]().\n```sh\npyenv install 3.10.0\npyenv virtualenv 3.10.0 mutation-simulator\npyenv activate mutation-simulator\n```\n\n+ Install with pip\n```sh\npip install Mutation-Simulator\n```\n\n+ Should the installation fail due to the `pyfaidx` dependency try\n```sh\npip install -U setuptools\n```\n\n## Dependencies\n+ Python >= 3.10.0\n+ numpy\n+ pyfaidx\n+ tqdm\n\n## Methods\nMutation-Simulator is executable in 3 modes: Command-line Arguments (ARGS),\nInterchromosomal Translocations (IT) and Random Mutation Table (RMT). These\nmodes can be selected with the second positional argument `mode`:\n```sh\nmutation-simulator [options] file {mode} ...\n```\n\n**ARGS** represents a quick way to simulate any kind of SV or SNP to a given\nrate and length uniformly distributed across the reference genome. It provides\nno option to select specific areas on the genome for the mutation rates to\ndeviate from. All positions will be randomly generated across the genome on all\nsequences within the reference. The use case of ARGS confines to enabling the\nuser to create a variant of the reference genome if no fine-grained settings\nneed to be considered and solely exists as a **quality of life feature**.\n\n**IT** serves **the same use case as ARGS**, though IT is used to simulate\ninterchromosomal translocations at a specified rate. First two sequences will\nbe randomly paired. Secondly the amount of breakpoints is determined by the\nspecified rate. Each breakpoint is randomly generated independently from the\nbreakpoints of the paired sequence. Breakpoints can occur within the first and\nlast position of the sequences with a minimum distance of one. The sequences\nafter each breakpoint will then be swapped between the paired chromosomes. As\nwell as ARGS, IT does not provide an option to define a different rate for each\nchromosome in the reference.\n\n**RMT** is a combination of the aforementioned features with the addition to\ndefine ranges of higher or lower mutation rates on each sequence using an RMT\nfile. This file format allows the user to create **specific recreatable\npatterns** in which mutations can be generated at given rates and lengths\nacross specific sequences. RMT also features meta-information about the genome,\nspecific IT rates for each sequence in the reference, configurable standard\nvalues for unspecified areas, and blocking positions from mutating entirely.\n\n### ARGS Mode\nOption | Option | Description | Default\n--- | --- | --- | :---:\n-sn | -–snp | Rate of SNPs | 0\n-snb | -–snpblock | Amount of bases blocked after SNP | 1\n-titv | --transitiontransversion | Ratio of transitions / transversions | 1\n-in | -–insert | Rate of insertions | 0\n-inmin | -–insertminlength | Minimum length of inserts | 1\n-inmax | -–insertmaxlength | Maximum length of inserts | 2\n-inb | -–insertblock | Amount of bases blocked after insert | 1\n-de | -–deletion | Rate of deletions | 0\n-demin | -–deletionminlength | Minimum length of deletions | 1\n-demax | -–deletionmaxlength | Maximum length of deletions | 2\n-deb | -–deletionblock | Amount of bases blocked after deletion | 1\n-iv | -–inversion | Rate of inversions | 0\n-ivmin | -–inversionminlength | Minimum length of inversion | 2\n-ivmax | -–inversionmaxlength | Maximum length of inversion | 3\n-ivb | -–inversionblock | Amount of bases blocked after inversion | 1\n-du | -–duplication | Rate of duplications | 0\n-dumin | -–duplicationminlength | Minimum length of duplications | 1\n-dumax | -–duplicationmaxlength | Maximum length of duplications | 2\n-dub | -–duplicationblock | Amount of bases blocked after duplication | 1\n-tl | -–translocation | Rate of translocations | 0\n-tlmin | -–translocationminlength | Minimum length of translocations | 1\n-tlmax | -–translocationmaxlength | Maximum length of translocations | 2\n-tlb | -–translocationblock | Amount of bases blocked after translocations | 1\n-a | -–assembly | Assembly name for the VCF file | \"Unknown\"\n-s | -–species | Species name for the VCF file | \"Unknown\"\n-n | -–sample | Sample name for the VCF file | \"Unknown\"\n\nThe table shows all possible command line options in the ARGS mode. All options\ncan be combined as desired. For example:\n```sh\nmutation-simulator file args -sn 0.01 -in 0.005 -inl 5\n```\n\nMutation-Simulator will generate the simulated genome named after the reference\nfile `$_ms.fa` or `$_ms.fasta` in the current working directory, together with\nthe corresponding VCF file `$_ms.vcf`. This can be changed with the `-o` or\n`--output` option available across all modes. A Fasta index file for the\nreference will be generated automatically during execution.\n\n### IT Mode\nIT mode only features one additional argument:\n```sh\nmutation-simulator file it interchromosomalrate\n```\n\nMutation-Simulator will generate the simulated genome named after the reference\nfile `$_ms_it.fa` or `$_ms_it.fasta` in the current working directory, together\nwith the corresponding BEDPE file `$_ms.bedpe`. This can be changed with the\n`-o` or `--output` option available across all modes. A Fasta index file for\nthe reference will be generated automatically during execution.\n\n### RMT Mode\nRMT solely requires an RMT file to operate:\n```sh\nmutation-simulator file rmt rmtfile\n```\n\nA RMT file contains all the information needed for Mutation-Simulator to\ngenerate a highly customized simulation of mutational patterns within a\nspecific genome.\n\nTo learn more about RMT files read the [RMT\nDocs](https://github.com/mkpython3/Mutation-Simulator/blob/master/rmt-docs.pdf).\nTo learn how to create RMT files read the [Workflows](#workflows) section.\n\nFor convenience, [we created](#gtfgff-to-rmt) some ready-to-use example RMT\nfiles for commonly used organisms where all genes are blocked from mutating.\nThese files can be found\n[here](https://github.com/mkpython3/Mutation-Simulator/tree/master/data/Example%20RMT%20files).\n\nSpecies | RMT | Source GFF\n--- | --- | ---\nArabidopsis thaliana | [Arabidopsis_thaliana.rmt](https://github.com/mkpython3/Mutation-Simulator/blob/master/data/Example%20RMT%20files/Arabidopsis_thaliana.rmt) | [TAIR10_GFF3_genes.gff](https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_gff3/TAIR10_GFF3_genes.gff)\nDanio rerio | [Danio_rerio.rmt](https://github.com/mkpython3/Mutation-Simulator/blob/master/data/Example%20RMT%20files/Danio_rerio.rmt) | [Danio_rerio.GRCz11.100.gff3.gz](http://ftp.ensembl.org/pub/release-100/gff3/danio_rerio/Danio_rerio.GRCz11.100.gff3.gz)\nDrosophila melanogaster | [Drosophila_melanogaster.rmt](https://github.com/mkpython3/Mutation-Simulator/blob/master/data/Example%20RMT%20files/Drosophila_melanogaster.rmt) | [Drosophila_melanogaster.BDGP6.28.100.gff3.gz](http://ftp.ensembl.org/pub/release-100/gff3/drosophila_melanogaster/Drosophila_melanogaster.BDGP6.28.100.gff3.gz)\nHomo sapiens | [Homo_sapiens.rmt](https://github.com/mkpython3/Mutation-Simulator/blob/master/data/Example%20RMT%20files/Homo_sapiens.rmt) | [gencode.v34.annotation.gff3.gz](http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_34/gencode.v34.annotation.gff3.gz)\nMus musculus | [Mus_musculus.rmt](https://github.com/mkpython3/Mutation-Simulator/blob/master/data/Example%20RMT%20files/Mus_musculus.rmt) | [Mus_musculus.GRCm38.100.gff3.gz](http://ftp.ensembl.org/pub/release-100/gff3/mus_musculus/Mus_musculus.GRCm38.100.gff3.gz)\n\n## How Tos\n### How to simulate SNPs\nTo simulate SNPs uniformly across all sequences, just pass the Fasta file path\nand a SNP mutation rate to Mutation-Simulator in args mode.\n```sh\nmutation-simulator genome.fasta args -sn 0.05\n```\n\nThis command will generate SNPs about every 20th base within the sequences of\nthe `genome.fasta` file. The mutated sequences will be saved in\n`genome_ms.fasta`. A transition/ transversion (ti/tv) ratio can be set by the\n`-titv` option. The following example shows a ti/tv ratio of 2:4.\n```sh\nmutation-simulator genome.fasta args -sn 0.05 -titv 0.5\n```\n\nIf a specific minimum distance between SNPs is desired, the command can be\nextended by the SNP block option, which specifies a number of blocked bases\nafter each SNP.\n```sh\nmutation-simulator genome.fasta args -sn 0.05 -snb 10 -titv 0.5\n```\n\n**Note:** Mutation-Simulator will always block at least 1 base between\nmutations.\n\n### How to simulate SVs\nIf a uniform distribution of SVs across the genome is sufficient enough, the\nsame procedure as above can be used. All options of the ARGS mode can be\ncombined in a single command as desired. For example:\n```sh\nmutation-simulator genome.fasta args -sn 0.01 -in 0.01 -de 0.01 -du 0.01 -iv 0.01 -tl 0.01 -inmin 10 -inmax 100\n```\n\n### How to fine-tune the simulation\nThe RMT mode is preferred if any specific settings are needed eg.:\n+ Blocking specific chromosomes from mutating\n+ Setting hot / cold spots\n+ Adjusting mutation types, rates or lengths on a per base resolution\n\nTo learn more about RMT files read the [RMT\nDocs](https://github.com/mkpython3/Mutation-Simulator/blob/master/rmt-docs.pdf).\nTo learn how to create RMT files read the Workflows section.\n\n### How to visualize mutation distributions from VCFs\n![Histogram and KDE plot of variant distribution from a VCF\nfile.](https://raw.githubusercontent.com/mkpython3/Mutation-Simulator/master/data/images/distplot.png)\n\nIt might be helpful to visualize the mutation distribution of a VCF file, for\nexample to compare the distributions of the VCF file used to generate the RMT\nfile, and the VCF file resulting from running Mutation-Simulator with that RMT\nfile. This can easily be done using bcftools and python:\n\n+ First, bgzip and index the VCF file.\n```sh\nbgzip myVariants.vcf; bcftools index myVariants.vcf.gz\n```\n\n+ Then extract positions and plot the distribution.\n```python\n# Plotting the mutation distribution for 'chr1'\nfrom pysam import VariantFile\nimport seaborn as sns\n\nvcf_in = VariantFile(\"myVariants.vcf.gz\")\n\nx = []\nfor rec in vcf_in.fetch(\"chr1\"):\n    x.append(rec.pos)\n\nsns.distplot(x)\n```\n\n## Workflows\n### Create RMT files\nAlthough, RMT files can be written manually, if data about mutation rate\ndistributions of mutation types along a genomic sequence are available in a\nsuitable format like VCF or GTF/GFF, an RMT file can be created automatically\n(see [Example RMT\nfiles](https://github.com/mkpython3/Mutation-Simulator/tree/master/data/Example%20RMT%20files)).\nIn short, this is done by counting the occurrences of a mutation type in each\nbin of a user-defined length along the sequence.  The rate of the mutation type\nin that bin is then calculated by dividing the number of occurrences by the\nlength of the interval/bin. This can easily be done in every scripting\nlanguage, or with a number of available CLI tools.\n\n### Choice of input\nOf course, the way the VCF or GTF/GFF file was generated strongly influences\nthe represented rates. For example, the VCF file of one sample from a single\nresequencing project contains the variants between this sample and the\nreference sequence. The resulting RMT file after VCF to RMT conversion can be\nused to generate sequences that have the same rate and distribution of variants\nand thus genetic distance as the resequenced sample. If calculating the rates\nusing all samples from a multi-sample VCF instead, this will result in a\nsequence with variant rates and distribution of the whole population. Thus,\nchoosing an input file from the desired experimental setup is crucial.\n\n### Simple example for VCF to RMT conversion\nThe most simple case is to create an RMT file for a sequence from a **sorted**\nVCF file containing **one sample** and **one type** of mutation. This example\nworkflow uses the Unix command line, bcftools, bedops and samtools.\n\n+ Index the sequence.\n```sh\nsamtools faidx sequence.fa\n```\n\n+ Create a bed file, containing start and end positions of each sequence in the\n  reference.\n```sh\ncat sequence.fa.fai | awk '{ print $1, \"0\", $2 }' > sequence.bed\n```\n\n+ Create a bed file of genomic windows, in which the mutations will be counted.\n  Here, the size of the windows can be changed to be more fine-grained or\n  coarse.\n```sh\nbedops --chop 10000 sequence.bed > sequence.10kbwindows.bed\n```\n\n+ Convert the VCF file to bed format.\n```sh\ncat mutations.vcf | vcf2bed > mutations.bed\n```\n\n+ Count SNPs across windows with an overlap of 5 kb on both sides. This command\n  determines mutation counts by a sliding-window with 20 kb window size in 10 kb\n  steps.\n```sh\nbedmap --echo --count --range 5000 sequence.10kbwindows.bed mutations.bed  > mutations.windows.counts.bed\n```\n\nThe resulting `mutations.windows.counts.bed` file will look like this:\n```\nChr1\t0\t10000|54\nChr1\t10000\t20000|99\nChr1\t20000\t30000|86\nChr1\t30000\t40000|60\nChr1\t40000\t50000|80\nChr1\t50000\t60000|112\nChr1\t60000\t70000|173\nChr1\t70000\t80000|173\nChr1\t80000\t90000|147\n```\n\n+ To convert the counts to rates a simple shell command can be used. Just\n  remember to also change the window size here if done previously.\n```sh\n# With std section and chr keyword (for use with Mutation-Simulator)\necho \"std\\nit None\\nNone\\n\\nchr 1\" > mutations.rmt && sed 's/|/\\t/' mutations.windows.counts.bed | awk '{printf (\"%s-%s sn %s\\n\", $2+1, $3,  $4/10000) }' >> mutations.rmt\n# Without (For further processing)\nsed 's/|/\\t/' mutations.windows.counts.bed | awk '{printf (\"%s-%s sn %s\\n\", $2+1, $3,  $4/10000) }' > mutations.rmt\n```\n\n### Multi-sample VCF\nOften, data is available as multi sample VCFs. These can be used the same way\nas single-sample VCFs, but need some preprocessing.\n\n+ Extract only the desired sample.\n```sh\nbcftools view -s my_sample multi-sample.vcf.gz > only_my_sample.vcf\n```\n\n+ Remove remaining positions of other samples that are not covered in the\n  extracted sample or equal to the reference sequence.\n```sh\ngrep -vP '\\t\\./\\.' only_my_sample.vcf | grep -vP '\\t0/0' > only_my_sample_filtered.vcf\n```\n\n### Multi-mutation-type VCF\nVCF files can contain multiple types of alternate alleles, for example SNPs,\ninsertions and duplications. The type of an allele is stated in the alternative\nallele field `##ALT=<ID=type,Description=description>`. To create an RMT file\ncontaining the rate distributions for multiple types of mutations, the VCF has\nto be separated into one VCF for each mutation type. Rates must be calculated\nindividually and then be combined into one RMT file.\n\n+ Filter the file for each desired type, using, for example, GATKs `select\n  variants` tool with the `--selectType` option. For possible types to filter\n  and their abbreviations see the [VCF\n  spec](https://samtools.github.io/hts-specs/VCFv4.3.pdf). In this example, we\n  filter for SNPs, insertions and duplications, creating three output VCFs.\n```sh\njava -jar GenomeAnalysisTK.jar -T SelectVariants -R reference.fasta -V input.vcf -o onlySNPs.vcf -selectType SNP\njava -jar GenomeAnalysisTK.jar -T SelectVariants -R reference.fasta -V input.vcf -o onlyINSERTIONSs.vcf -selectType INS\njava -jar GenomeAnalysisTK.jar -T SelectVariants -R reference.fasta -V input.vcf -o onlyDUPLICATIONSs.vcf -selectType DUP\n```\n\n+ For each VCF, create an RMT file following the [Simple example for VCF to RMT\n  conversion](#simple-example-for-vcf-to-rmt-conversion) workflow.\n+ Cut out the positions and rates.\n```sh\ncut -d \" \" -f 4 onlySNPs.rmt > positions.txt\ncut -d \" \" -f 2,3 onlySNPs.rmt > SNPRates.txt\ncut -d \" \" -f 2,3 onlyInsertions.rmt > insertionRates.txt\ncut -d \" \" -f 2,3 onlyDuplications.rmt > duplicationRates.txt\n```\n\n+ Paste positions and rates together\n```sh\npaste -d \" \" positions.txt SNPRates.txt insertionRates.txt duplicationRates.txt > multiType.rmt\n```\nMinimum and maximum length options also need to be added in a similar fashion,\ndepending on the included mutation types.\n\n### GTF/GFF to RMT\nAs a basic use case example we want to block all genes listed in a GFF3 file\nfrom mutating and only establish SNPs between genes at a specified `rate`. For\nthis we provide an [example\nscript](https://github.com/mkpython3/Mutation-Simulator/blob/master/data/scripts/gff_genes_2_rmt.py)\nthat can be used as a template to derive scripts for other use cases. The basic\nidea is to filter all GTF/GFF lines by the type column (3rd column) and extract\nthe start and end position (4th and 5th column) of all genes. These intervals\nwill then be blocked in the [output RMT\nfiles](https://github.com/mkpython3/Mutation-Simulator/tree/master/data/Example%20RMT%20files).\nThe script can be run with:\n```sh\npython3 gff_genes_2_rmt.py [gff_file] [rate]\n```\n\n## Polyploid Mutations\nMutation-Simulator only supports haploid mutations, although multiple VCFs from\ndifferent runs of Mutation-Simulator can be merged to form polyploid mutations.\n\n## Performance\nThese tests were performed in ARGS mode on a single sequence consisting of a\nrandom selection of bases with the following parameters:\n```sh\n-sn 0.01 -in 0.01 -de 0.01 -du 0.01 -iv 0.01 -tl 0.01\n```\n\nSequence length \\[Mbp\\] | Runtime \\[s\\] | Memory peak \\[GB\\]\n--- | --- | ---\n1 | 6.49 | <0.01\n10 | 51.41 | 0.20\n100 | 517.20 | 1.48\n1000 | 5235.40 | 13.92\n\n+ Testing Platform: Ubuntu 20.04.3 LTS\n+ Processor: AMD EPYC 7452\n+ Mutation-Simulator version: 3.0.1\n+ Measuring tool: [GNU time](https://www.gnu.org/software/time/)\n\nThe memory consumption is affected by the number of introduced mutations as\nwell as the length of the largest sequence mutated. Parameters chosen reflect a\nrather intense mutation of the genome. Thus, even genomes with large\nchromosomes up to 1 Gbp in length can be processed on a desktop computer with\n16 GB of RAM.\n\n## Citation\n```\nKühl, M. A., B. Stich, and D. C. Ries. \"Mutation-Simulator: fine-grained simulation of random mutations in any genome.\" Bioinformatics 37.4 (2021): 568-569.\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "Mutation,Simulation,Genome,SNP,SNPs,SV,SVs,Bioinformatics",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "Mutation-Simulator",
    "package_url": "https://pypi.org/project/Mutation-Simulator/",
    "platform": null,
    "project_url": "https://pypi.org/project/Mutation-Simulator/",
    "project_urls": {
      "Bug-Tracker": "https://github.com/mkpython3/Mutation-Simulator/issues",
      "Homepage": "https://github.com/mkpython3/Mutation-Simulator",
      "RMT-Documentation": "https://github.com/mkpython3/Mutation-Simulator/blob/master/rmt-docs.pdf"
    },
    "release_url": "https://pypi.org/project/Mutation-Simulator/3.0.1/",
    "requires_dist": [
      "numpy",
      "pyfaidx",
      "tqdm"
    ],
    "requires_python": ">=3.10",
    "summary": "A tool for simulating random mutations in any genome",
    "version": "3.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13910627,
  "releases": {
    "3.0.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "12aa7234e30dcd7d9ccb247f8690d62666762695ef196d6323e3eb8e62861055",
          "md5": "22ad92ddf689298cb47ff5e6a54b5934",
          "sha256": "6ace1c71ea84275e804a0dbbcb149cc8aada0b152460e5dca2b9537871fdc6eb"
        },
        "downloads": -1,
        "filename": "mutation_simulator-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22ad92ddf689298cb47ff5e6a54b5934",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 43925,
        "upload_time": "2022-05-22T21:08:45",
        "upload_time_iso_8601": "2022-05-22T21:08:45.745748Z",
        "url": "https://files.pythonhosted.org/packages/12/aa/7234e30dcd7d9ccb247f8690d62666762695ef196d6323e3eb8e62861055/mutation_simulator-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "8a0cc4ab912914c15e61f2415a21bf81fb0086db092a95c3c393deab6021e2d8",
          "md5": "9eb555fca3acca362fc213049fc7373d",
          "sha256": "aa20d6aa8886e5d3c99430ea130eed8e079fa9359aec950a6355f09f880b244d"
        },
        "downloads": -1,
        "filename": "Mutation-Simulator-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9eb555fca3acca362fc213049fc7373d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 1493063,
        "upload_time": "2022-05-22T21:08:50",
        "upload_time_iso_8601": "2022-05-22T21:08:50.075778Z",
        "url": "https://files.pythonhosted.org/packages/8a/0c/c4ab912914c15e61f2415a21bf81fb0086db092a95c3c393deab6021e2d8/Mutation-Simulator-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "797e6df98d2679417d83fc192c4ca7fd91435860795a6549519e5dc97f01fadd",
          "md5": "efa698ef1e18d0c328a2e7ecd56a4cb6",
          "sha256": "199438a01087b9c85fefada95b8567434a4eb06ad2a7b18c5e4b886c2555cd69"
        },
        "downloads": -1,
        "filename": "mutation_simulator-3.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efa698ef1e18d0c328a2e7ecd56a4cb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 43952,
        "upload_time": "2022-05-23T18:26:15",
        "upload_time_iso_8601": "2022-05-23T18:26:15.455166Z",
        "url": "https://files.pythonhosted.org/packages/79/7e/6df98d2679417d83fc192c4ca7fd91435860795a6549519e5dc97f01fadd/mutation_simulator-3.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "2316da80fdc26beac59b07a0e70ab028bb2f637d5cb738fac6508799b8b9e4e9",
          "md5": "f71d07132f154119717a16acdfc15a89",
          "sha256": "6d72dbd31c50513fafea73c32dcec7bb9784ce5ad4088ae3d0688ca850afe72c"
        },
        "downloads": -1,
        "filename": "Mutation-Simulator-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f71d07132f154119717a16acdfc15a89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 1493572,
        "upload_time": "2022-05-23T18:26:21",
        "upload_time_iso_8601": "2022-05-23T18:26:21.572721Z",
        "url": "https://files.pythonhosted.org/packages/23/16/da80fdc26beac59b07a0e70ab028bb2f637d5cb738fac6508799b8b9e4e9/Mutation-Simulator-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "797e6df98d2679417d83fc192c4ca7fd91435860795a6549519e5dc97f01fadd",
        "md5": "efa698ef1e18d0c328a2e7ecd56a4cb6",
        "sha256": "199438a01087b9c85fefada95b8567434a4eb06ad2a7b18c5e4b886c2555cd69"
      },
      "downloads": -1,
      "filename": "mutation_simulator-3.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efa698ef1e18d0c328a2e7ecd56a4cb6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 43952,
      "upload_time": "2022-05-23T18:26:15",
      "upload_time_iso_8601": "2022-05-23T18:26:15.455166Z",
      "url": "https://files.pythonhosted.org/packages/79/7e/6df98d2679417d83fc192c4ca7fd91435860795a6549519e5dc97f01fadd/mutation_simulator-3.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "2316da80fdc26beac59b07a0e70ab028bb2f637d5cb738fac6508799b8b9e4e9",
        "md5": "f71d07132f154119717a16acdfc15a89",
        "sha256": "6d72dbd31c50513fafea73c32dcec7bb9784ce5ad4088ae3d0688ca850afe72c"
      },
      "downloads": -1,
      "filename": "Mutation-Simulator-3.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f71d07132f154119717a16acdfc15a89",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 1493572,
      "upload_time": "2022-05-23T18:26:21",
      "upload_time_iso_8601": "2022-05-23T18:26:21.572721Z",
      "url": "https://files.pythonhosted.org/packages/23/16/da80fdc26beac59b07a0e70ab028bb2f637d5cb738fac6508799b8b9e4e9/Mutation-Simulator-3.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}