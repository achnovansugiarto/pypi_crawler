{
  "info": {
    "author": "AM",
    "author_email": "txiocoder@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Django Cloud Task Queue\n\nIntegrate your [Django](https://www.djangoproject.com/) application with Google [Cloud Task](https://cloud.google.com/tasks) from [Google Cloud Platform](https://cloud.google.com/). This package provides a simple and easy to use decorator to push tasks to Cloud Task Queue and automatically handle all income task execution requests from Cloud Task. In a single entry point.\n\nAt the moment dj-cloud-task only works with HTTP targets such as Cloud Run, Cloud Functions, Compute Engine, ... (in case you are using Google Cloud Platform infrastructure). See the Cloud Task documentation about targets for more [here](https://cloud.google.com/tasks/docs/creating-http-target-tasks)!\n\n### Some Features\n\n* Easily push tasks to Cloud Task using a decorator\n* Automatically route all tasks from a single endpoint\n* Ease scheduling with native python datetime\n* Named task to avoid duplicated\n* Local development support with Redis Queue\n\n### Installation\n\nSimple **dj-cloud-task** can be installed with ``pip``:\n\n    pip install dj-cloud-task\n\nOr from this repository:\n\n    pip install -e git+https://github.com/txiocoder/dj-cloud-task.git@main#egg=cloudtask\n\n\n#### Requirements\n\n* [Python](https://www.python.org/) >= 3.9\n* [django](https://www.djangoproject.com/) >= 3.2.*\n* [google-cloud-tasks](https://pypi.org/project/google-cloud-tasks/) >= 2.5.*\n\nThese are the officially supported python and packages versions. Other versions will probably work\n\n## Quickstart\n\n### Configure\n\nAs stated above, Django Cloud Task is a Django Application. To configure your project you simply need to add ``cloudtask`` to your ``INSTALLED_APPS`` and configure the ``CLOUDTASK`` variable in the ``settings.py`` file. More details about how to configure the CLOUDTASK variable below.\n\nIn file ``settings.py``:\n\n```python\nINSTALLED_APPS: list = [\n    'cloudtask',\n]\n\nCLOUDTASK: dict = {\n    'PROJECT': 'project',\n    'LOCATION': 'europe-west6',\n    'SAE': 'user@project.iam.gserviceaccount.com',\n    'URL': 'https://handler.com/_tasks/',\n    'QUEUE': 'default',\n    'SECRET': 'my-very-secrete-key'\n}\n```\n\nThen, add ``cloudtask.urls`` to your URL configuration to route and handle all task execution requests coming from Cloud Task.\n\nIn your ``project.urls``:\n\n```python\nfrom django.urls import path, include\n\nurlpatterns: list = [\n    path('_tasks/', include('cloudtask.urls'))\n]\n```\n\n### Create Tasks\n\nThe tasks are simple python functions that could be defined anywhere. But, I suggest you create a file with the name ``tasks.py`` in your django module/app and declare there. To create a task, simply decorate a function with ``cloudtask.decorators.task``. See the example below: \n\n```python\nfrom cloudtask import (\n    CloudTaskRequest,\n    task)\n\n@task(queue='default')\ndef add(request: CloudTaskRequest, a: int = 5, b: int = 4) -> None:\n    print(f'Running task with args {a=} and {b=}')\n    print(a + b)\n```\n\n### Run Tasks\n\nTo send a task to Cloud Task call the task function and then call the delay method inside the returned task instance. This will send a request to Cloud Task to enqueue the task and Cloud Task will request to run it as fast as possible.\n\n```python\nfrom .tasks import add\n\nadd(a=10, b=30).delay()\n# or use the alias push\nadd(a=30, b=10).push()\n```\n\n## GCP Authentication\n\nThis module requires to be authenticated with Google Cloud Platform as a service. The GC Platform provides various ways to authenticate with it. See the GC Platform page about authentication strategies [here](https://cloud.google.com/docs/authentication/production).\n\n\n## Configurations\n\nIn this session you will see how to configure cloudtask. We have required attributes, optional but required in task declaration and  only optional attributes.\nThe required attributes are **PROJECT**, **LOCATION** and **SAE**.\n\nHere the details about all attributes accpeted in ``CLOUDTASK``\n\n| Attribute    | Type    | Required  | Description                            |\n|--------------|---------|-----------|----------------------------------------|\n| PROJECT      | ``str`` | ``True``  | Project ID from Google Cloud Platform  |\n| LOCATION     | ``str`` | ``True``  | Cloud Task Queue Location              |\n| SAE          | ``str`` | ``True``  | Service Account Email                  |\n| URL          | ``str`` | ``False`` | Default URL                            |\n| QUEUE        | ``srt`` | ``False`` | Default Queue Name                     |\n| SECRET       | ``str`` | ``False`` | Secret key to authorize task execution |\n| LOCAL_RQ     | ``bool``| ``False`` | Use Redis Queue to handle tasks locally|\n| LOCAL_RQ_URL | ``str`` | ``False`` | Optional Redis connection URL          |\n| TESTING      | ``bool``| ``False`` | Testing Mode                           |\n\n#### URL attribute\n\nThe URL attribute is optional, but if you don't set you will need to explicitly pass as  a task decorator argument\n\n```python\nfrom cloudtask import task\n\n@task(queue='emails', url='https://mysite.com/emails-tasks')\ndef send_email(request, to: str):\n    pass\n```\n\nYou can change the ``url`` of task instance in runtime if you need things to be done more automated.\n\n```python\nfrom .tasks import send_email\n\ntask = send_email(to='a@a.com')\ntask.url = 'https://mysite.com/tasks'\ntask.push()\n```\n\n#### QUEUE attribute\n\nThe same as the URL attribute, the QUEUE attribute is optional, and if you don't set it you will need to explicitly pass as a task decorator argument. You can not change the QUEUE of task instance at runtime.\n\n```python\nfrom cloudtask import task\n\n@task(queue='default')\ndef send_email(request, to: str):\n    pass\n```\n\n#### TESTING attribute\n\nUseful when testing your django application. If True will run all tasks immediately without push to Cloud Task Queue\n\n## Working with Tasks\n\nIn this session you will see how to play with tasks. Django Cloud Task provides not just one way to create, push and handle tasks. It's flexible! All defined tasks receive the ``request`` keyword argument which is an instance of ``cloudtask.tasks.CloudTaskRequest`` containing all request information from Cloud Task\n\n### Creating and Push\n\n```python\nfrom cloudtask import (\n    CloudTaskRequest,\n    task)\n\n@task()\ndef say_yes(rquest) -> None:\n    print('Yes')\n\n@task(queue='default', named=True)\ndef add(request: CloudTaskRequest, a: int = 5, b: int = 4) -> None:\n    print(f'Running task with args {a=} and {b=}')\n    print(a + b)\n\n# Pushing to Cloud Task\n\nsay_yes().delay() # or with push\nadd().push()\n```\n\n\n#### Immediately Execute a Task\n\nSometimes you will need to execute the task function immediately (without pushing to Cloud Task), to do that, just call the ``__cal__`` or ``execute`` method from the returned task instance. The request will have limited information.\n\n```python\n\nfrom .tasks import add\nadd(a=5, b=3).__call__()\n# or using the alias\nadd(a=5, b=3)()\n# or using the execute method\nadd(a=5, b=3).execute()\n```\n#### Scheduling\n\nYou can schedule a task to be delivered later using native python datetime.\n\n```python\nfrom datetime import timedelta\nfrom django.utils.timezone import now\nfrom .tasks import add\n\nat = now() + timedelta(days=2)\nadd(a=3, b=6).schedule(at=at)\n```\n\n#### Named Tasks\n\n```python\nfrom .tasks import add\n\nadd(a=3, b=6).delay()\nadd(a=3, b=6).delay()\nadd(a=3, b=6).delay()\n```\n\nBy default, the above will run normally. Cloud Task by default adds a unique name for each new task. That makes it possible to have duplicated tasks in the queue, even with the same arguments. If you want a task to only be enqueued once at time, you have to set the task as a named task.\n\nDjango Cloud Task will give a task name based on the task function name.\n\n```python\nfrom cloudtask import (\n    CloudTaskRequest,\n    task)\n\n@task(named=True)\ndef clean_expired(request: CloudTaskRequest):\n    pass\n\nclean_expired().delay()\nclean_expired().delay() # this line will raise an entity error by Cloud Task\n```\n\nYou can also set the name in ``task`` decorator or dynamically. This feature is very useful when you want to do some recursive tasks.\n\n```python\nfrom cloudtask.tasks import Task\nfrom cloudtask import (\n    CloudTaskRequest,\n    task)\n\n\n@task(named='SOME_UNIQUE_NAME')\ndef task_do_some(request: CloudTaskRequest):\n    pass\n\n# or dynamically\n\n@task()\ndef delete_article(request: CloudTaskRequest, article_id: int):\n    pass\n\narticle_id: int = 34\ntask: Task = delete_article(article_id=article_id)\ntask.named = f'DELETE_ARTICLE_{article_id}'\ntask.push()\n```\n\n## Local development support\n\n### Setup\n\nUse Redis Queue for local development support. To start, first install [rq](https://python-rq.org/), [rq-scheduler](https://github.com/rq/rq-scheduler) and [requests](https://docs.python-requests.org/en/latest/) with pip. You will need a Redis connection too. Then configure on your ``CLOUDTASK`` settings.\n\n```sh\npip install rq requests rq-scheduler\n```\n\n### Configurations\n\nOn ``CLOUDTASK`` settings set ``LOCAL_RQ`` as ``True`` to start handle the tasks locally.\n\n```python\nCLOUDTASK: dict = {\n    'LOCAL_RQ': True\n}\n```\n\nYou can use ``LOCAL_RQ_URL`` to change the default redis connection string\n\n```python\nCLOUDTASK: dict = {\n    'LOCAL_RQ': True,\n    'LOCAL_RQ_URL': 'redis://localhost:6379' # default by redis\n}\n```\n\nThat is all, but do not forget to set the right local ``URL`` on your ``CLOUDTASK`` settings to  handle the tasks.\n\n### Running Tasks Locally\n\nTo start running task locally just start the worker process with the available management command\n\n```sh\npython manage.py cloudtask-worker\n```\n\nIf you have task that are scheduled, start the ``rqscheduler`` worker process to support scheduling tasks. In your project root dir:\n\n```sh\nrqscheduler\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/txiocoder/dj-cloud-task",
    "keywords": "django,cloud task,tasks,google cloud,google cloud tasks",
    "license": "MIT-Licence",
    "maintainer": "AM",
    "maintainer_email": "txiocoder@gmail.com",
    "name": "dj-cloud-task",
    "package_url": "https://pypi.org/project/dj-cloud-task/",
    "platform": "",
    "project_url": "https://pypi.org/project/dj-cloud-task/",
    "project_urls": {
      "Documentation": "https://github.com/txiocoder/dj-cloud-task",
      "Homepage": "https://github.com/txiocoder/dj-cloud-task",
      "Source": "https://github.com/txiocoder/dj-cloud-task"
    },
    "release_url": "https://pypi.org/project/dj-cloud-task/0.1.2/",
    "requires_dist": [
      "google-cloud-tasks (>=2.5.*)"
    ],
    "requires_python": ">=3.8",
    "summary": "Integrate your django application with Google Cloud Task from Google Cloud Platform",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12107221,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8917b23bd650e5deb785ba1a65c5e8e0ae7c64460942fca5d036fda381874f06",
          "md5": "917258abce7aff59c991423f907d3ac2",
          "sha256": "1ae31c261225f7adc8867485e720231ab58c5b98276e4d8b09b570f5b8f2a6e8"
        },
        "downloads": -1,
        "filename": "dj_cloud_task-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "917258abce7aff59c991423f907d3ac2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12768,
        "upload_time": "2021-11-22T17:05:27",
        "upload_time_iso_8601": "2021-11-22T17:05:27.057400Z",
        "url": "https://files.pythonhosted.org/packages/89/17/b23bd650e5deb785ba1a65c5e8e0ae7c64460942fca5d036fda381874f06/dj_cloud_task-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3265ca4b4e78ac2861b060aec340e12e696ec59e74d77ba307c2f158e80a5b1",
          "md5": "6b1910eb23ba82db0313bdb02d433452",
          "sha256": "64f82705b19461ab32e5412cc26ab0b0b7c76fcc16e19d43fc8d7b76bddd4d46"
        },
        "downloads": -1,
        "filename": "dj-cloud-task-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6b1910eb23ba82db0313bdb02d433452",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13833,
        "upload_time": "2021-11-22T17:05:29",
        "upload_time_iso_8601": "2021-11-22T17:05:29.444887Z",
        "url": "https://files.pythonhosted.org/packages/a3/26/5ca4b4e78ac2861b060aec340e12e696ec59e74d77ba307c2f158e80a5b1/dj-cloud-task-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d5603e142b6cd12d5f071b6c228a89a227666d381f4778b95cd9511b4216c78",
          "md5": "9bb51a3e808dafcff622a44d155d1912",
          "sha256": "2c9c955a591d6d8ebc18c224995a6174aed788957b91bf1407552c1689e39e91"
        },
        "downloads": -1,
        "filename": "dj_cloud_task-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9bb51a3e808dafcff622a44d155d1912",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13499,
        "upload_time": "2021-11-23T23:12:52",
        "upload_time_iso_8601": "2021-11-23T23:12:52.330934Z",
        "url": "https://files.pythonhosted.org/packages/3d/56/03e142b6cd12d5f071b6c228a89a227666d381f4778b95cd9511b4216c78/dj_cloud_task-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c64b5553d6c46b34dbd5cacec4085f069039fe6b274f4ab55751abce0e2bb7f4",
          "md5": "fab8323937cad1db3f1ca2005dc92c61",
          "sha256": "3e6d3fd8417fdbcbdec86c5e6b08f71a0b535c5244b49fab337e3bcccb5ee9d2"
        },
        "downloads": -1,
        "filename": "dj-cloud-task-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fab8323937cad1db3f1ca2005dc92c61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14204,
        "upload_time": "2021-11-23T23:12:54",
        "upload_time_iso_8601": "2021-11-23T23:12:54.565617Z",
        "url": "https://files.pythonhosted.org/packages/c6/4b/5553d6c46b34dbd5cacec4085f069039fe6b274f4ab55751abce0e2bb7f4/dj-cloud-task-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d5603e142b6cd12d5f071b6c228a89a227666d381f4778b95cd9511b4216c78",
        "md5": "9bb51a3e808dafcff622a44d155d1912",
        "sha256": "2c9c955a591d6d8ebc18c224995a6174aed788957b91bf1407552c1689e39e91"
      },
      "downloads": -1,
      "filename": "dj_cloud_task-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9bb51a3e808dafcff622a44d155d1912",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 13499,
      "upload_time": "2021-11-23T23:12:52",
      "upload_time_iso_8601": "2021-11-23T23:12:52.330934Z",
      "url": "https://files.pythonhosted.org/packages/3d/56/03e142b6cd12d5f071b6c228a89a227666d381f4778b95cd9511b4216c78/dj_cloud_task-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c64b5553d6c46b34dbd5cacec4085f069039fe6b274f4ab55751abce0e2bb7f4",
        "md5": "fab8323937cad1db3f1ca2005dc92c61",
        "sha256": "3e6d3fd8417fdbcbdec86c5e6b08f71a0b535c5244b49fab337e3bcccb5ee9d2"
      },
      "downloads": -1,
      "filename": "dj-cloud-task-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "fab8323937cad1db3f1ca2005dc92c61",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14204,
      "upload_time": "2021-11-23T23:12:54",
      "upload_time_iso_8601": "2021-11-23T23:12:54.565617Z",
      "url": "https://files.pythonhosted.org/packages/c6/4b/5553d6c46b34dbd5cacec4085f069039fe6b274f4ab55751abce0e2bb7f4/dj-cloud-task-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}