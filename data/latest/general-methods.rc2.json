{
  "info": {
    "author": "Vishal Anand",
    "author_email": "vishalanandl177@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# General-Methods\n![version](https://img.shields.io/badge/version-0.0.2-blue.svg)\n\nA general utility for your Django Rest Framework project.\n\n## Installation\n\nInstall or add general-methods.\n```\npip install general-methods\n```\n\n## Utils functions\nImport utils.\n```\nfrom general_methods import utils\n```\n### Get Headers\nTo get headers (Dictionary type) from request.\n\n```\nheaders = utils.get_headers(request)\n```\n\n### Get Client IP Address\nTo get client IP Address.\n\n```\nclient_ip_address = utils.get_client_ip_address(request)\n```\n\n### Generate Random Token\nTo generate random alpha-numeric string. Default string length is 20.\n\n```\ntoken = utils.generate_token()  // Default token length is 20 characters.\n```\n```\ntoken = utils.generate_token(length=50)  // Token length is 50 characters.\n```\n\n### Get UUID\nTo get UUID string.\n\n```\nuuid = utils.get_uuid()\n```\n\n### Hash algorithms.\nThe available algorithms are : 'sha256', 'sha384', 'sha224', 'sha512', 'sha1', 'md5'\n##### SHA1\n```\nhashed_string = utils.sha1('string_to_hash')\n```\n##### SHA224\n```\nhashed_string = utils.sha224('string_to_hash')\n```\n##### SHA256\n```\nhashed_string = utils.sha256('string_to_hash')\n```\n##### SHA384\n```\nhashed_string = utils.sha384('string_to_hash')\n```\n##### SHA512\n```\nhashed_string = utils.sha512('string_to_hash')\n```\n##### MD5\n```\nhashed_string = utils.md5('string_to_hash')\n```\n### Encode String Data\nTo encode string data using django SECRET_KEY (available in settings.py file) as key to encode.\n\nNote: If you changed the secret key of you django application then decode won't be able to decode the sting back. Use only in run time use-cases for example encode user id before sending in to client side so client will never get to know the actual user id.\n```\nencoded_data = utils.encode('MY_DATA_TO_ENCODE')\n```\n### Decode String Data\nTo decode string data using django SECRET_KEY (available in settings.py file) as key to decode.\n```\ndecoded_data = utils.decode('MY_DATA_TO_DECODE')\n```\n\n### Is Valid JSON\nTo identify JSON data is valid or not. If valid, returns True else False.\n\n```\nis_valid_json = utils.is_valid_json({'key': 'value'})\n```\n### Is Valid EMAIL ID\nTo identify email is valid or not. If valid, returns True else False.\n\n```\nis_valid_email = utils.is_valid_email('abc@mail.com')\n```\n## Response functions\nNote: Returns application/json response.\n\nImport response.\n```\nfrom general_methods import response\n```\n\n### Success Response 200\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 200\n\nFunction:\nresponse.success('Any Type of Data')\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.success('Any Type of Data')  // returning response to client.\n```\n### Bad Request 400\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 400\n\nFunction:\nresponse.bad_request('Username is required.')\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.bad_request('Username is required.')  // returning response to client.\n```\n### Server Error 500\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 500\n\nFunction:\nresponse.server_error('Optional Message')\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.server_error()  // returning response to client.\n```\n### No Data Found 200\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 200\n\nFunction:\nresponse.no_data_found()\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.no_data_found()  // returning response to client.\n```\n### Parameter Missing 400\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 400\n\nFunction:\nresponse.param_missing(key, message)\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.param_missing('username', 'This field is required.')  // returning response to client.\n```\n### Unauthorized 401\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 401\n\nFunction:\nresponse.unauthorized()\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.unauthorized()  // returning response to client.\n```\n### Forbidden 403\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 403\n\nFunction:\nresponse.forbidden()\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.forbidden()  // returning response to client.\n```\n### Method Not Allowed 405\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 405\n\nFunction:\nresponse.method_not_allowed()\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.method_not_allowed()  // returning response to client.\n```\n### Not Acceptable 406\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 406\n\nFunction:\nresponse.not_acceptable()\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.not_acceptable()  // returning response to client.\n```\n### Custom Error\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: User Specified\n\nFunction:\nresponse.custom_error(status_code: int, result)\n\n```\nclass MyView(APIView):\n    def get(self, request, *args, **kwargs):\n        return response.custom_error(status_code=200, result='Login Successful.')  // returning response to client.\n```\n\n## Exception functions\nNote: Returns application/json response. Can be used in API exceptions. for example in API authorization or permission classes.\n\nImport exceptions.\n```\nfrom general_methods import exceptions\n```\n### Server Exception 500\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 500\n```\nraise exceptions.ServerException()\n```\n### Unauthorized Exception 401\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 401\n```\nraise exceptions.UnauthorizedException()\n```\n### Session Expired Exception 401\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 401\n```\nraise exceptions.SessionExpiredException()\n```\n\n### Missing Header Exception 400\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 400\n```\nraise exceptions.MissingHeaderException()\n```\n\n### Blocked Client Exception 401\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 401\n```\nraise exceptions.BlockedClientException()\n```\n\n### Authentication Failed Exception 401\nReturns dictionary\n{\n    status: boolean,\n    message: str,\n    result: any\n}\n\nResponse code: 401\n```\nraise exceptions.AuthenticationFailedException()\n```\n\n## Validators functions\nCan be used in defining Models.\n\nImport validators.\n```\nfrom general_methods import validators\n```\n### Email Validator\nFunction: email_validator\n```\nclass MyModel(models.Model):\n    email = models.CharField(max_length=100, validators=[validators.email_validator])\n```\n### Mobile Number Validator (10 Length)\nFunction: mobile_number_validator\n```\nclass MyModel(models.Model):\n    mobile = models.CharField(max_length=15, validators=[validators.mobile_number_validator])\n```\n### Country Code Validator (Example: +91, +1 etc.)\nFunction: country_code_validator\n```\nclass MyModel(models.Model):\n    mobile = models.CharField(max_length=15, validators=[validators.country_code_validator])\n```\n### String with Space Validator [ a-zA-Z]\nFunction: string_with_space_validator\n```\nclass MyModel(models.Model):\n    mobile = models.CharField(max_length=15, validators=[validators.string_with_space_validator])\n```\n## Country Codes\nAll country codes are available.\n\nArray of Objects like:\n\n{\n    'country_code': \"IN\",\n    'calling_code': \"+91\",\n    'name': 'India (+91)'\n}\n\nImport country_codes.\n```\nfrom general_methods import country_codes\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vishalanandl177/General-Methods",
    "keywords": "",
    "license": "GNU General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "general-methods",
    "package_url": "https://pypi.org/project/general-methods/",
    "platform": "",
    "project_url": "https://pypi.org/project/general-methods/",
    "project_urls": {
      "Homepage": "https://github.com/vishalanandl177/General-Methods"
    },
    "release_url": "https://pypi.org/project/general-methods/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A small general methods.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8139012,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a5e44ac3705ce6c6f32954c510cbca854462ffbe6fda911864b078d150f3c69",
          "md5": "f8e055a1cd371741cb31fb508ae810c4",
          "sha256": "d95ddf9ef03f3d284141e5a94eae55c561e0778d7eea62caba8a574ac025d78c"
        },
        "downloads": -1,
        "filename": "general_methods-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f8e055a1cd371741cb31fb508ae810c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 2904,
        "upload_time": "2020-09-08T17:07:06",
        "upload_time_iso_8601": "2020-09-08T17:07:06.674776Z",
        "url": "https://files.pythonhosted.org/packages/8a/5e/44ac3705ce6c6f32954c510cbca854462ffbe6fda911864b078d150f3c69/general_methods-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4ca69b7a29e26188a2116700a45a37904fb1ef512ecd65245f0bb428d168557",
          "md5": "2cc2589199e3469017e6b88b4cccbb34",
          "sha256": "bdd370b58e4a027fb3551473e4e30b836ec1873b5df1bd157cea4ecba94eca18"
        },
        "downloads": -1,
        "filename": "general_methods-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2cc2589199e3469017e6b88b4cccbb34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10231,
        "upload_time": "2020-09-08T19:53:59",
        "upload_time_iso_8601": "2020-09-08T19:53:59.611924Z",
        "url": "https://files.pythonhosted.org/packages/c4/ca/69b7a29e26188a2116700a45a37904fb1ef512ecd65245f0bb428d168557/general_methods-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4ca69b7a29e26188a2116700a45a37904fb1ef512ecd65245f0bb428d168557",
        "md5": "2cc2589199e3469017e6b88b4cccbb34",
        "sha256": "bdd370b58e4a027fb3551473e4e30b836ec1873b5df1bd157cea4ecba94eca18"
      },
      "downloads": -1,
      "filename": "general_methods-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2cc2589199e3469017e6b88b4cccbb34",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 10231,
      "upload_time": "2020-09-08T19:53:59",
      "upload_time_iso_8601": "2020-09-08T19:53:59.611924Z",
      "url": "https://files.pythonhosted.org/packages/c4/ca/69b7a29e26188a2116700a45a37904fb1ef512ecd65245f0bb428d168557/general_methods-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}