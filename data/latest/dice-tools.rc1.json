{
  "info": {
    "author": "Matthew Hinds",
    "author_email": "hinds.matt38@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Dice Tools \n\nDice tools is a packaged designed for calculating discrete probabilistic distributions and their properties for dice \nbased tabletop games such as d6 miniatures games and d20 RPGs. This quick guide will use a series of examples from the \nd6 miniatures game from [Warhammer 40K](https://warhammer40000.com/) 9th edition. \n\n## Prerequisites\n\nDice tools is designed to extend the functionality of [Lea3](https://bitbucket.org/piedenis/lea/src/dev_lea3/). Lea3 is \na python package for calculating discrete probabilities of all forms. Like Lea3, it is recommended that users of Dice \nTools also install matplotlib for full functionality. Users will find this package most useful if they are also familiar \nwith the functionality of Lea3. \n\n## Installation \nTODO\n\n## Example Use\n\nOften times in dice games players will use the expected value/mean of a roll to analyse a situation. Alongside mean, \nthis module makes it easy for users to extract data such as variance and standard deviation from a probability \ndistribution, as well as to look directly at and plot the probability mass function (PMF).\n\n#### Setup\n\n```python\nfrom dice_tools import *\nimport lea\nfrom lea import leaf \nfrom lea import P\nfrom lea.leaf import die \n```\n\n#### Re-rolling Dice\n\nSay for example that you would like to know the distribution of success on a roll of 10 six sided dice for three \ndifferent scenarios. In the first scenario a success is defined as any roll of 4 or greater (4, 5, or 6) is defined as a\nsuccess. In the second scenario, the same criteria for success is defined, except the player may first re-roll any dice \nwith the result of 1 before determining success. In the third example the player may re-roll and failed roll \n(1, 2, or 3) before determining the number of successes. The important thing to note here, is that all three scenarios \nare defined by [binomial distributions](https://en.wikipedia.org/wiki/Binomial_distribution). \n\nWe can calculate each scenario with the following commands. \n```python\nscenario_one = lea.binom(10, P(die() >= 4))\nscenario_two = lea.binom(10, P(re_rolling(die(), 1) >= 4))\nscenario_three = lea.binom(10, P(re_rolling(die(), [1,2,3]) >= 4))\n```\n\nThen we extract information from each object as we would any lea.Lea object. \n```python\n(scenario_one.mean, scenario_two.mean, scenario_three.mean)\n# -> (5.0, 5.833333333333334, 7.5)\n(scenario_one.std, scenario_two.std, scenario_three.std)\n# -> (1.5811388300841898, 1.5590239111558089, 1.3693063937629153)\n```\n\n#### Variable Number of Tests\n\nSometimes it is useful to find the probability of a value that *would* be a binomial distribution except the number of \ntests itself falls within a discrete distribution. To go with another Warhammer example, variable shots weapons follow\nthis pattern. If you wanted to know the probability of getting at least 4 hits with a weapon whose shots equaled the sum\nof two six sided dies and which had a 50% probability of hitting each shot you could run the following code.  \n\n```python\nspread = variable_tests(die(6).times(2), 0.5)\nP(spread >= 4)\n# -> 0.47247314453125\n```\n\nAbout a 47% chance of landing at least 4 hits. \n\n#### Multi-Damage weapons / Capped Remainder Sums\n\nIn Warhammer 40K 9th edition there are many situations where the a multi-damage weapons, including variable damage \nweapons, are attacking into units with multi-wound models. This situation presents a complicated problem. Let's look at\nthe situation where a weapon that does between one and three damage (equally spread between possibilities) has wounded a\nunit with two wound models. If a successful wound does two or three damage then an entire model is eliminated from the \ngame, and we would count the two damage that was inflicted. However, if only one damage is inflicted then the model is \nleft with only one health left for the next attack. This means that that next attack is capped at only one health. In \nsummary, the expected result must take into consideration the permutation of the damage, NOT just the combination. \nDice Tools provides a function to calculate the probability distributions up to a set number of damage dice for this \nsituation. It returns a dictionary mapping the number of dice to the probability distribution of total damage. \n\n```python\ntable = variable_damage_table(10, die(3), 2)\ntable[1]\n# -> \n# -> 1 : 0.3333333333333333\n# -> 2 : 0.6666666666666666\ntable[10].plot()\n```\n\n![10 success full wounds plot](readme_images/ten_wounds_die_2_wounds_2.png)\n\n#### Chaining Discrete Probabilities\n\nTo expand on the previous example, we also might want to know the damage spread when we don't know how many successful\nhits we are going to land. We can combine a binomial distribution representing the successful wounds out of 10 attacks\nthat hit on a d6 roll of 3 or higher, wound on a roll of 2 or higher, and passes the targets armour on a 5 or less with \nthe variable damage table using the following commands. \n\n```python\nwounds = lea.binom(10, P(die() >= 3)*P(die() >= 2)*P(die() < 5))\ncombined = merge_distributions(wounds, table)\ncombined.mean \n# -> 5.680417549421119\ncombined.plot()\n```\n\n![combined wounds and damage plot](readme_images/combined_wounds_damage.png)\n\n\n#### Using Dice Tools to Analyse Terminator profiles against Plague Marines\n\nTwo wound Plague Marines present a difficult unit to simulate attacks against. Each point of damage against a Plague \nMarine has a 1/3 chance of being ignored due to their ability \"Disgustingly Resilient\". Let's say we want to compare \nhow Terminator Marines with a Power sword and Power fists fairs when compared against a Terminator Assault squads with\nthunder hammers. \n\nThe first terminator squad has two profiles in it, a sergeant with a power sword and four terminators with power fists. \nWhen charging the plague marines the sergeant will attack 4 times, each attack hitting on 3 or higher, wounding on 4 or\nhigher, passing through the armour save on a 6 or less, and inflicting a single wound for successful hit. Each wound \ncan be simulated as a multi-damage attack between 0 and 1. Each squad member attacks 3 times hitting on 4s, wounding on\n3s, passing armour saves below a 6, and inflicts 2 damage before the Plague Marine may try to ignore the damage. \n\n```python\npower_sword_damage = lea.pmf({0: 1/3, 1: 2/3})\npower_sword_potential = variable_damage_table(4, power_sword_damage, 2)\npower_sword = merge_distributions(lea.binom(4, P(die() >= 3)*P(die() >= 4)*P(die() < 6)), power_sword_potential)\npower_fists_damage = lea.binom(2, 2/3)\npower_fists_potential = variable_damage_table(4*3, power_fists_damage, 2)\npower_fists = merge_distributions(lea.binom(4*3, P(die() >= 4)*P(die() >= 3)*P(die() < 6)), power_fists_potential)\nterminator_squad = power_sword + power_fists\nterminator_squad.plot()\n```\n\n![Terminator Squad attacking Plague Marines](readme_images/terminator_squad.png)\n\nThe second squad, the Terminator Assault Squad, is all armed with Thunder Hammers. The sergeant attacks 4 times and each \nterminator squad member attacks 3 times for a total of 16 attacks. Each attack hits on 4s, wounds on 3s, passes through\narmour under a 5, and deals 3 damage before damage is ignored. Following the same pattern as above we arrive at:\n\n```python\nthunder_hammer_damage = lea.binom(3, 2/3)\nthunder_hammer_potential = variable_damage_table(16, thunder_hammer_damage, 2)\nassault_squad = merge_distributions(lea.binom(16, P(die() >= 4)*P(die() >= 3)*P(die() < 5)), thunder_hammer_potential)\nassualt_squad.plot()\n```\n\n![Terminator Assualt Squad attacking Plague Marines](readme_images/assualt_squad.png)\n\nWhile these plots are pretty to look at, we can also compare the distributions more directly. \n\n```python\n(terminator_squad.mean, assault_squad.mean)\n# -> (4.802037835882868, 5.680092805368757)\n(terminator_squad.var, assault_squad.var)\n# -> (5.477760599140879, 8.314731770347208)\nP(assault_squad >= terminator_squad)\n# -> 0.6418799400007009\nP(assault_squad > terminator_squad)\n# -> 0.5321892339310291\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hindsm38/dice_tools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dice-tools",
    "package_url": "https://pypi.org/project/dice-tools/",
    "platform": "",
    "project_url": "https://pypi.org/project/dice-tools/",
    "project_urls": {
      "Homepage": "https://github.com/hindsm38/dice_tools"
    },
    "release_url": "https://pypi.org/project/dice-tools/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Tools for use with Lea in order to simulate dice rolls in tabletop games.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8705936,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "534556dbda30efb8a0815dfee74c89e7bcddfa1a512b0cf08f5ba06186ace197",
          "md5": "36664a77f4419682f7b8d7ff584ed69b",
          "sha256": "13c8cf95278533c7575eee2a182409a1015f8964606c6b7788e98f02821ee748"
        },
        "downloads": -1,
        "filename": "dice_tools-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36664a77f4419682f7b8d7ff584ed69b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5125,
        "upload_time": "2020-11-20T03:29:23",
        "upload_time_iso_8601": "2020-11-20T03:29:23.431105Z",
        "url": "https://files.pythonhosted.org/packages/53/45/56dbda30efb8a0815dfee74c89e7bcddfa1a512b0cf08f5ba06186ace197/dice_tools-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fb96f25a7a68a728082662f152742a5ae1a9a3cdf2074311206156df6de188d",
          "md5": "b02d17b536f0e91d031ccdb71040f058",
          "sha256": "d5f7f79e08e27302b63dad7fece82ff5eb5ab853d9992b13f78428251b7b039e"
        },
        "downloads": -1,
        "filename": "dice_tools-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b02d17b536f0e91d031ccdb71040f058",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4893,
        "upload_time": "2020-11-20T03:29:24",
        "upload_time_iso_8601": "2020-11-20T03:29:24.642207Z",
        "url": "https://files.pythonhosted.org/packages/3f/b9/6f25a7a68a728082662f152742a5ae1a9a3cdf2074311206156df6de188d/dice_tools-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "534556dbda30efb8a0815dfee74c89e7bcddfa1a512b0cf08f5ba06186ace197",
        "md5": "36664a77f4419682f7b8d7ff584ed69b",
        "sha256": "13c8cf95278533c7575eee2a182409a1015f8964606c6b7788e98f02821ee748"
      },
      "downloads": -1,
      "filename": "dice_tools-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "36664a77f4419682f7b8d7ff584ed69b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5125,
      "upload_time": "2020-11-20T03:29:23",
      "upload_time_iso_8601": "2020-11-20T03:29:23.431105Z",
      "url": "https://files.pythonhosted.org/packages/53/45/56dbda30efb8a0815dfee74c89e7bcddfa1a512b0cf08f5ba06186ace197/dice_tools-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fb96f25a7a68a728082662f152742a5ae1a9a3cdf2074311206156df6de188d",
        "md5": "b02d17b536f0e91d031ccdb71040f058",
        "sha256": "d5f7f79e08e27302b63dad7fece82ff5eb5ab853d9992b13f78428251b7b039e"
      },
      "downloads": -1,
      "filename": "dice_tools-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b02d17b536f0e91d031ccdb71040f058",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4893,
      "upload_time": "2020-11-20T03:29:24",
      "upload_time_iso_8601": "2020-11-20T03:29:24.642207Z",
      "url": "https://files.pythonhosted.org/packages/3f/b9/6f25a7a68a728082662f152742a5ae1a9a3cdf2074311206156df6de188d/dice_tools-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}