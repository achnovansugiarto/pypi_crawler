{
  "info": {
    "author": "Paulo Porto",
    "author_email": "cesarpaulomp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Batchflows for Python 3\n\nThis tool will help you create and process a lot of data in an organized manner.\nYou can create batches of processing synchronously and asynchronously.\n\n*remember it's in BETA :D*\n\n### Get Started\n\n```python\nimport logging\n\nfrom batchflows.Batch import Batch\nfrom batchflows.Step import Step\n\n#First extend Step class and implement method execute\nclass SaveValueStep(Step):\n    def __init__(self, value_name, value):\n        #Remember name is required if you want use remote steps\n        super().__init__()\n        self.value_name = value_name\n        self.value = value\n\n    # \"_context\" is a dict you can use to store values that will be used in other steps.\n    def execute(self, _context):\n        #do what u have to do here!\n        _context[self.value_name] = self.value\n\n#creating a second step just to make the explanation richer\nclass SumCalculatorStep(Step):\n    def __init__(self, attrs):\n        super().__init__()\n        self.attrs = attrs\n\n    def execute(self, _context):\n        calc = 0.0\n        for attr in self.attrs:\n            calc += _context[attr]\n\n        _context['sum'] = calc\n\n#Here we create our batch!\nbatch = Batch()\nbatch.add_step(SaveValueStep('value01', 1))\nbatch.add_step(SaveValueStep('value02', 4))\nbatch.add_step(SumCalculatorStep(['value01', 'value02', 'other_value']))\n\n#You can add something useful to your steps before starting bath!\nbatch.context['other_value'] = 5\n\n#than execute your batch and be happy ;)\nbatch.execute()\n\nlogging.info(batch.context)\n```\n\n### Let's try run some parallel code\n\n```python\nimport logging\nimport time\n\nfrom batchflows.Batch import Batch\nfrom batchflows.Step import Step, ParallelFlows\n\n\nclass SomeStep(Step):\n    def execute(self, _context):\n        #count to 10 slowly\n        c = 0\n        while c < 10:\n            c += 1\n            print(c)\n            time.sleep(1)\n\n#Create your AsyncFlow\nlazy_counter = ParallelFlows('LazySteps01')\n#add steps so they run in parallel\nlazy_counter.add_step(SomeStep('lazy01'))\nlazy_counter.add_step(SomeStep('lazy02'))\n\nlazy_counter2 = ParallelFlows('LazySteps02')\nlazy_counter2.add_step(SomeStep('lazy03'))\nlazy_counter2.add_step(SomeStep('lazy04'))\n\nbatch = Batch()\nbatch.add_step(lazy_counter)\nbatch.add_step(lazy_counter2)\n\n#batchfllows will wait for each step to finish before executing the next one.\n#In this example lazy_counter will be called first and execute steps \"lazy01\" and \"lazy02\" in parallel.\n#Only when both steps finish ,the batch will star lazy_counter2\nbatch.execute()\n```\n### FileContextmanager and RemoteStep\n\nYou can extend RemoteStep class and make your code to run a remote batch.\nUnfortunately the basic context does not allow remote steps to be performed without customization.\nTo solve this problem we have FileContextManager\n\n# let's start by creating our main batch\n\n```python\ncontext_manager = FileContextManager(\n    filepath='/tmp', #where u set where you want batch create status file\n                     #you can put a disc that all your machines share\n    is_remote_step=False, #default false. You saying here this is the main batch\n    process_id='123ABC', #default random uuid. You can specify an id for the process. \n                         #This field is important for remote batches to be able to write the status file correctly.\n    process_name='batch name' #default random uuid. For the main batch this field has no importance, but for your remote batch\n                              #you need put the same name of remote-step\n    )\n\nbatch = Batch(context_manager=context_manager)\nbatch.add_step(RemoteBatchStep(\n                name='do-a-barrel-roll',\n                timeout=10 #in seconds\n            ))\n\nbatch.execute()\n```\n\n# now let's create our remote batch\n\n```python\ncontext_manager = FileContextManager(\n    filepath='/tmp',\n    is_remote_step=True,\n    process_id='123ABC', #exactly the same a main batch\n    process_name='do-a-barrel-roll'#exactly the same name as step\n    )\n\nbatch = Batch(context_manager=context_manager)\nbatch.add_step(...) # lot of cool things\nbatch.add_step(...) # lot of cool things\nbatch.add_step(...) # lot of cool things\n\nbatch.execute()\n```\n\n### customize your ContextManager\nYou can also extend the ContextManager class and create your way to run remote code.\n\n```python\nclass MyContextManager(ABCContextManager):\n    def __init__(self):\n        self.context = dict()\n        self.steps = []\n\n    #override this method to teach your customization how to identify if remote execution is ready\n    def is_remote_step_done(self, name: str):\n        raise NotImplementedError()\n\n    #override this method if you want to execute some code after batch conclude\n    def upon_completion(self, success: bool, error: str = None):\n        pass\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/pcmporto/batchflows/src/master",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "batchflows",
    "package_url": "https://pypi.org/project/batchflows/",
    "platform": "",
    "project_url": "https://pypi.org/project/batchflows/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/pcmporto/batchflows/src/master"
    },
    "release_url": "https://pypi.org/project/batchflows/2.0.0b0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "library for executing batches of data processing sequentially or asynchronously to python 3",
    "version": "2.0.0b0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6307780,
  "releases": {
    "1.0.1b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebc2b34dc7140b3faa4fc60d15039332fe24e75b66db160cc4e3c4a6c48e8b4f",
          "md5": "f39a843b389f9ba6a0e698c9e426b88c",
          "sha256": "6712dbac62d4f969326e3ca09063d8be03d3df51d9c970e9c9cf07691e47897f"
        },
        "downloads": -1,
        "filename": "batchflows-1.0.1b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f39a843b389f9ba6a0e698c9e426b88c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12812,
        "upload_time": "2019-09-12T00:58:59",
        "upload_time_iso_8601": "2019-09-12T00:58:59.565118Z",
        "url": "https://files.pythonhosted.org/packages/eb/c2/b34dc7140b3faa4fc60d15039332fe24e75b66db160cc4e3c4a6c48e8b4f/batchflows-1.0.1b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed475e9330c20215dc73d900570d1350b9289ac2b86198794f3d92f06ce08d95",
          "md5": "d021a7894ec2e32ac26a8757fc47ca0b",
          "sha256": "da84ee50866d521ac3813d42d9413db9d1db321267a4c12f276547458b939b75"
        },
        "downloads": -1,
        "filename": "batchflows-1.0.1b0.tar.gz",
        "has_sig": false,
        "md5_digest": "d021a7894ec2e32ac26a8757fc47ca0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8015,
        "upload_time": "2019-09-12T00:59:02",
        "upload_time_iso_8601": "2019-09-12T00:59:02.058551Z",
        "url": "https://files.pythonhosted.org/packages/ed/47/5e9330c20215dc73d900570d1350b9289ac2b86198794f3d92f06ce08d95/batchflows-1.0.1b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db2f1857b4538e06e24fdbe8c76cdd500db633478006200fc0f86b7596c851f0",
          "md5": "e93dc60d341235abcc8cfa0d6cf45df8",
          "sha256": "c86068f3f2d946d6ae244bd3ebf864199c10e1f00af90f6602e658389457adc9"
        },
        "downloads": -1,
        "filename": "batchflows-2.0.0b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e93dc60d341235abcc8cfa0d6cf45df8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13843,
        "upload_time": "2019-12-15T21:23:00",
        "upload_time_iso_8601": "2019-12-15T21:23:00.148295Z",
        "url": "https://files.pythonhosted.org/packages/db/2f/1857b4538e06e24fdbe8c76cdd500db633478006200fc0f86b7596c851f0/batchflows-2.0.0b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d09ba4c478abc5a0535a4a11c192b327b5abce76125b3d32262ca0cb76b4d58b",
          "md5": "1e6e0729c754b4fc5874f4c34917e86f",
          "sha256": "178f6c1275e87bbb9d3aa57bf735d64999fc4a4478bd642e15c0c07531f5ee53"
        },
        "downloads": -1,
        "filename": "batchflows-2.0.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e6e0729c754b4fc5874f4c34917e86f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8014,
        "upload_time": "2019-12-15T21:23:01",
        "upload_time_iso_8601": "2019-12-15T21:23:01.750188Z",
        "url": "https://files.pythonhosted.org/packages/d0/9b/a4c478abc5a0535a4a11c192b327b5abce76125b3d32262ca0cb76b4d58b/batchflows-2.0.0b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db2f1857b4538e06e24fdbe8c76cdd500db633478006200fc0f86b7596c851f0",
        "md5": "e93dc60d341235abcc8cfa0d6cf45df8",
        "sha256": "c86068f3f2d946d6ae244bd3ebf864199c10e1f00af90f6602e658389457adc9"
      },
      "downloads": -1,
      "filename": "batchflows-2.0.0b0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e93dc60d341235abcc8cfa0d6cf45df8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13843,
      "upload_time": "2019-12-15T21:23:00",
      "upload_time_iso_8601": "2019-12-15T21:23:00.148295Z",
      "url": "https://files.pythonhosted.org/packages/db/2f/1857b4538e06e24fdbe8c76cdd500db633478006200fc0f86b7596c851f0/batchflows-2.0.0b0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d09ba4c478abc5a0535a4a11c192b327b5abce76125b3d32262ca0cb76b4d58b",
        "md5": "1e6e0729c754b4fc5874f4c34917e86f",
        "sha256": "178f6c1275e87bbb9d3aa57bf735d64999fc4a4478bd642e15c0c07531f5ee53"
      },
      "downloads": -1,
      "filename": "batchflows-2.0.0b0.tar.gz",
      "has_sig": false,
      "md5_digest": "1e6e0729c754b4fc5874f4c34917e86f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8014,
      "upload_time": "2019-12-15T21:23:01",
      "upload_time_iso_8601": "2019-12-15T21:23:01.750188Z",
      "url": "https://files.pythonhosted.org/packages/d0/9b/a4c478abc5a0535a4a11c192b327b5abce76125b3d32262ca0cb76b4d58b/batchflows-2.0.0b0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}