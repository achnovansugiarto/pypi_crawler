{
  "info": {
    "author": "Yair Mazal",
    "author_email": "mazaly@post.bgu.ac.il",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Object Brokering"
    ],
    "description": "# Delegate objects powerfully\nThis minimal yet powerful library allows delegating an object's: methods, properties, and his own member objects, to its owner. Recursive delegation is also supported.\n\nUse the simple API to handle delegations.\n\nFrom wikipedia, what is delegation:\n> In object-oriented programming, delegation refers to evaluating a member\n> (property or method) of one object (the receiver) in the context of another\n> original object (the sender). Delegation can be done explicitly, by passing\n> the sending object to the receiving object, which can be done in any\n> object-oriented language; or implicitly, by the member lookup rules of the\n> language, which requires language support for the feature.\n\n\n# Installation\n\nThis is python3 only with no dependencies, simply:\n\n    pip install ObjectDelegator\n\n# Examples\nObjectDelegator is used by inheriting from `Delegeator` class. Delegation is then handled via the API, and delegated \nobjects can simply be referred to as if they members of the original class subclassing `Delegeator`.\n\nDefine some dummy classes for the sake of example:\n\n```\nclass RabbitHole:\n    def __init__(self, txt):\n        self.down_we_go = txt\n\nclass Foo:\n    foo_property = 'hi'\n    not_delegated_property = 'bye'\n    rabbit = RabbitHole('first rabbit')\n\n    # noinspection PyMethodMayBeStatic\n    def foo(self):\n        \"\"\"dummy method\"\"\"\n        return 'foo'\n\nclass Bar:\n    rabbit_too = RabbitHole('second rabbit')\n    boring = 2\n```\n\nNow define a class which inherits from `Delegeator`:\n\n```\nclass Master(Delegator):\n    def __init__(self):\n        self.foo_obj = Foo()\n        self.bar_obj = Bar()\n        self.test = 1\n\n# instantiate a master\nmaster = Master()\n```\n\nDelegate using the `set_delegated_members` method of the `Delegeator`:\n\n```\n# use a diciotionary with keys as objects delegating members, and values as their members \nmaster.set_delegated_members({'foo_obj': ['foo', 'foo_property', 'rabbit'], 'bar_obj': ['rabbit_too']})\n```\n\nDelegation is versatile:\n\n```\n# can delegate methods\nmaster.foo() # => 'foo'\n# can delegate properties\nmaster.foo_property # => 'hi'\n# or even other objects\nmaster.rabbit.down_we_go # => 'first rabbit'\n# and another rabbit hole instance\nmaster.rabbit_too.down_we_go # => 'second rabbit'\n```\n\n## API\nThe API allows to:\n\n - Delegate objects (see above).\n - Find potential objects which can delegate their members to the master:\n\n```\nmaster.get_possible_objects_to_delegate_to()  # => ['bar_obj', 'foo_obj', 'test', 'foo', 'foo_property', 'rabbit', 'rabbit_too']\n```\n\n - Find potential members which can be delegated to the master:\n\n```\nmaster.get_possible_members_to_delegate()  # => {'bar_obj': ['boring', 'rabbit_too'], 'foo_obj': ['foo', 'foo_property', 'not_delegated_property', 'rabbit'], 'test': ['as_integer_ratio', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'numerator', 'real', 'to_bytes'], 'foo': [], ...}\n```\n\n - List currently delegated members:\n\n```\nmaster.get_delegated_members()  # => {'foo_obj': ['foo', 'foo_property', 'rabbit'], 'bar_obj': ['rabbit_too']}\n```\n\n - Add further _recursive_ delegation:\n\n```\n# Note that rabbit itself was delegated before\nmaster.set_delegated_members({'rabbit': ['down_we_go']})\nmaster.down_we_go   # => first rabbit\n```\n\n - Raise a ValueError if we try to delegate to objects of the sae name\n\n```\n# if we try to delegate the second rabbit we get a ValueError as we can't have two members with the same name (down_we_go)\nmaster.set_delegated_members({'rabbit_too': ['down_we_go']})\n```\n\n - Remove delegations for a specific object:\n\n```\nmaster.remove_delegations_for_object('rabbit')\n# Now we may delegate the other rabbit\nmaster.set_delegated_members({'rabbit_too': ['down_we_go']})\nmaster.down_we_go  # => second rabbit\n```\n\n - clear all delegations:\n\n```\nmaster.clear_all_delegations()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/YairMZ/ObjectDelegator/archive/v1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/YairMZ/ObjectDelegator",
    "keywords": "OOP,delegation,composition",
    "license": "GNU General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ObjectDelegator",
    "package_url": "https://pypi.org/project/ObjectDelegator/",
    "platform": "",
    "project_url": "https://pypi.org/project/ObjectDelegator/",
    "project_urls": {
      "Download": "https://github.com/YairMZ/ObjectDelegator/archive/v1.1.tar.gz",
      "Homepage": "https://github.com/YairMZ/ObjectDelegator"
    },
    "release_url": "https://pypi.org/project/ObjectDelegator/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "This minimal yet powerful library allows delegation of an objects: methods, properties, and his own member objects, to an object who owns it. Recursive delegation is also supported.Use the simple API to handle delegations.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7847132,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5e1b4c6bf95fdf740f148728d02912250dcbdd19360bb92e07861646469f0ce",
          "md5": "e17f7828c465cebca7b0289206d3b4fd",
          "sha256": "a0b2e00239270314109f68ea026c46d465452460213202c82183834ee48b7e0d"
        },
        "downloads": -1,
        "filename": "ObjectDelegator-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e17f7828c465cebca7b0289206d3b4fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 18054,
        "upload_time": "2020-07-30T17:11:25",
        "upload_time_iso_8601": "2020-07-30T17:11:25.577513Z",
        "url": "https://files.pythonhosted.org/packages/b5/e1/b4c6bf95fdf740f148728d02912250dcbdd19360bb92e07861646469f0ce/ObjectDelegator-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9664cf96715adf3fcd0599db0d576f31865277c40e29558b97b55fd55541cff4",
          "md5": "e13b832504b85ba545b6328937e965eb",
          "sha256": "dea282102d29a177f180c77c02b53835989a2284742535066ec9a339a31c0599"
        },
        "downloads": -1,
        "filename": "ObjectDelegator-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e13b832504b85ba545b6328937e965eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5539,
        "upload_time": "2020-07-30T17:11:27",
        "upload_time_iso_8601": "2020-07-30T17:11:27.072881Z",
        "url": "https://files.pythonhosted.org/packages/96/64/cf96715adf3fcd0599db0d576f31865277c40e29558b97b55fd55541cff4/ObjectDelegator-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5e1b4c6bf95fdf740f148728d02912250dcbdd19360bb92e07861646469f0ce",
        "md5": "e17f7828c465cebca7b0289206d3b4fd",
        "sha256": "a0b2e00239270314109f68ea026c46d465452460213202c82183834ee48b7e0d"
      },
      "downloads": -1,
      "filename": "ObjectDelegator-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e17f7828c465cebca7b0289206d3b4fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 18054,
      "upload_time": "2020-07-30T17:11:25",
      "upload_time_iso_8601": "2020-07-30T17:11:25.577513Z",
      "url": "https://files.pythonhosted.org/packages/b5/e1/b4c6bf95fdf740f148728d02912250dcbdd19360bb92e07861646469f0ce/ObjectDelegator-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9664cf96715adf3fcd0599db0d576f31865277c40e29558b97b55fd55541cff4",
        "md5": "e13b832504b85ba545b6328937e965eb",
        "sha256": "dea282102d29a177f180c77c02b53835989a2284742535066ec9a339a31c0599"
      },
      "downloads": -1,
      "filename": "ObjectDelegator-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e13b832504b85ba545b6328937e965eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 5539,
      "upload_time": "2020-07-30T17:11:27",
      "upload_time_iso_8601": "2020-07-30T17:11:27.072881Z",
      "url": "https://files.pythonhosted.org/packages/96/64/cf96715adf3fcd0599db0d576f31865277c40e29558b97b55fd55541cff4/ObjectDelegator-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}