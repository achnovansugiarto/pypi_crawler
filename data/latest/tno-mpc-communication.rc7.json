{
  "info": {
    "author": "TNO MPC Lab",
    "author_email": "mpclab@tno.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Security :: Cryptography",
      "Typing :: Typed"
    ],
    "description": "# TNO MPC Lab - Communication\n\nThe TNO MPC lab consists of generic software components, procedures, and functionalities developed and maintained on a regular basis to facilitate and aid in the development of MPC solutions. The lab is a cross-project initiative allowing us to integrate and reuse previously developed MPC functionalities to boost the development of new protocols and solutions.\n\nThe package tno.mpc.communication is part of the TNO Python Toolbox.\n\n*Limitations in (end-)use: the content of this repository may solely be used for applications that comply with international export control laws.*  \n*This implementation of cryptographic software has not been audited. Use at your own risk.*\n\n## Documentation\n\nDocumentation of the tno.mpc.communication package can be found [here](https://docs.mpc.tno.nl/communication/4.0.0).\n\n## Install\n\nEasily install the tno.mpc.communication package using pip:\n```console\n$ python -m pip install tno.mpc.communication\n```\n\nIf you wish to run the tests you can use:\n```console\n$ python -m pip install 'tno.mpc.communication[tests]'\n```\n\n## Usage\n\nThe communication module uses `async` functions for sending and receiving. If you are familiar\nwith the async module, you can skip to the `Pools` section.\n\n### Async explanation\n\nWhen `async` functions are called, they return what is called a _coroutine_.\nThis is a special kind of object, because it is basically a promise that the code will be run and\na result will be given when the coroutine is given to a so-called _event loop_.\nFor example, see the following\n\n```python\nimport asyncio\n\nasync def add(a: int, b: int) -> int:\n    return a + b\n\ndef main():\n    a,b = 1, 2\n    coroutine_object = add(a, b) # This is now a coroutine object of type Awaitable[int]\n    event_loop = asyncio.get_event_loop() # This is the event loop that will run the coroutine\n    result = event_loop.run_until_complete(coroutine_object) # This call starts the coroutine in the event loop\n    print(result) # this prints 3\n\nif __name__ == \"__main__\":\n    main()\n```\n\nAs you can see from the example, the async methods are defined using `async def`, which tells python\nthat it should return a coroutine. We saw how we can call an async function from a regular function\nusing the event loop. _Note that you should never redefine the event loop and always retrieve the\nevent loop as done in the example_ (unless you know what you are doing). We can also call async\nfunctions from other async functions using the `await` statement, as is shown in the following example.\n\n```python\nimport asyncio\n\nasync def add_four_numbers(first: int, second: int, third: int, fourth: int) -> int:\n    first_second = await add(first, second) # This is blocking, so the function will wait until this is done\n    third_fourth_coroutine = add(third, fourth) # This is non-blocking, so the code will continue while the add(third,fourth) code starts running\n    # we can do some other stuff here\n    print(\"I am a print statement\")\n    third_fourth = await third_fourth_coroutine # we wait until the add(third,fourth) is done\n    result = await add(first_second, third_fourth)\n    # here it is important to use await for the result, because then an integer is produced and given\n    # to the return statement instead of a coroutine\n    return result\n\nasync def add(a: int, b: int) -> int:\n    return a + b\n\ndef main():\n    a, b, c, d = 1, 2, 3, 4\n    coroutine_object = add_four_numbers(a, b, c, d) # This is now a coroutine object of type Awaitable[int]\n    event_loop = asyncio.get_event_loop() # This is the event loop that will run the coroutine\n    result = event_loop.run_until_complete(coroutine_object) # This call starts the coroutine in the event loop\n    print(result) # this prints 10\n\nif __name__ == \"__main__\":\n    main()\n```\n\nNote that the type of the `coroutine_object` in the `main` function is an `Awaitable[int]`.\nThis refers to the fact that the result can be awaited (inside an `async` function) and will return an integer once that is done.\n\n### Pools\n\nA `Pool` represents a network. A Pool contains a server, which listens for incoming messages from\nother parties in the network, and clients for each other party in the network. These clients are\ncalled upon when we want to send or receive messages.\n\nIt is also possible to use and initialize the pool without taking care of the event loop\nyourself, in that case the template below can be ignored and the examples can be used as one\nwould regularly do. (An event loop is however still needed when using the `await` keyword or\nwhen calling an `async` function.)\n\n### Template\n\nBelow you can find a template for using `Pool`. Alternatively, you could create the pool in the\n`main` logic and give it as a parameter to the `async_main` function.\n\n```python\nimport asyncio\n\nfrom tno.mpc.communication import Pool\n\nasync def async_main():\n    pool = Pool()\n    # ...\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(async_main())\n```\n\n### Pool initialization\n\nThe following logic works both in regular fuctions and `async` functions.\n\n#### Without SSL (do not use in production)\n\n```python\nfrom tno.mpc.communication import Pool\n\npool = Pool()\npool.add_http_server() # default port=80\npool.add_http_client(\"Client 1\", \"192.168.0.101\") # default port=80\npool.add_http_client(\"Client 2\", \"192.168.0.102\", port=1234)\n```\n\n#### With SSL\n\n```python\nfrom tno.mpc.communication import Pool\n\npool = Pool(key=\"path/to/keyfile\", cert=\"path/to/certfile\", ca_cert=\"path/to/cafile\")\npool.add_http_server() # default port=443\npool.add_http_client(\"Client 1\", \"192.168.0.101\") # default port=443\npool.add_http_client(\"Client 2\", \"192.168.0.102\", port=1234)\n```\n\n#### Adding clients\n\nHTTP clients are identified by an address. The address can be an IP address, but hostnames are also supported. For example, when communicating between two docker containers on the same network, the address that is provided to `pool.add_http_client` can either be the IP address of the client container or the name of the client container.\n\n### Sending, receiving messages\n\nThe library supports sending the following objects through the send and receive methods:\n\n- strings\n- byte strings\n- integers\n- floats\n- enum (partially, see [Serializing `Enum`](#serializing-enum))\n- (nested) lists/tuples/dictionaries/numpy arrays containing any of the above. Combinations of these as well.\n\nUnder the hood [`ormsgpack`](https://pypi.org/project/ormsgpack) is used, additional options can be activated using the `option` parameter (see, https://github.com/aviramha/ormsgpack#option).\n\nMessages can be sent both synchronously and asynchronously.\nIf you do not know which one to use, use the synchronous methods with `await`.\n\n```python\n# Client 0\nawait pool.send(\"Client 1\", \"Hello!\") # Synchronous send message (blocking)\npool.asend(\"Client 1\", \"Hello!\")      # Asynchronous send message (non-blocking, schedule send task)\n\n# Client 1\nres = await pool.recv(\"Client 0\") # Receive message synchronously (blocking)\nres = pool.arecv(\"Client 0\")      # Receive message asynchronously (non-blocking, returns Future if message did not arrive yet)\n```\n\n### Custom message IDs\n\n```python\n# Client 0\nawait pool.send(\"Client 1\", \"Hello!\", \"Message ID 1\")\n\n# Client 1\nres = await pool.recv(\"Client 0\", \"Message ID 1\")\n```\n\n### Custom serialization logic\n\nIt is also possible to define serialization logic in custom classes and load the logic into the commmunication module. An example is given below. We elaborate on the requirements for such classes after the example.\n\n```python\nclass SomeClass:\n\n    def serialize(self, **kwargs: Any) -> Dict[str, Any]:\n        # serialization logic that returns a dictionary\n\n    @staticmethod\n    def deserialize(obj: Dict[str, Any], **kwargs: Any) -> 'SomeClass':\n        # deserialization logic that turns the dictionary produced\n        # by serialize back into an object of type SomeClass\n```\n\nThe class needs to contain a `serialize` method and a `deserialize` method. The type annotation is necessary and validated by the\ncommunication module.\nNext to this, the `**kwargs` argument is also necessary to allow for nested (de)serialization that\nmakes use of additional optional keyword arguments. It is not necessary to use any of these optional keyword\narguments. If one does not make use of the `**kwargs` and also does not make a call to a subsequent\n`Serialization.serialize()` or `Serialization.deserialize()`, it is advised to write\n`**_kwargs: Any` instead of `**kwargs: Any`.\n\nTo add this logic to the communication module, you have to run the following command at the start of your script. The `check_annotiations` parameter determines whether\nthe type hints of the serialization code and the presence of a `**kwargs` parameter are checked.\nYou should only change this to False _if you are exactly sure of what you are doing_.\n\n```python\nfrom tno.mpc.communication import Serialization\n\nif __name__ == \"__main__\":\n   Serialization.set_serialization_logic(SomeClass, check_annotations=True)\n```\n\n### Serializing `Enum`\n\nThe `Serialization` module can serialize an `Enum` member; however, only the value is serialized. The simplest way to work around this limitation is to convert the deserialized object into an `Enum` member:\n\n```python\nfrom enum import Enum, auto\n\n\nclass TestEnum(Enum):\n    A = auto()\n    B = auto()\n\nenum_obj = TestEnum.B\n\n# Client 0\nawait pool.send(\"Client 1\", enum_obj)\n\n# Client 1\nres = await pool.recv(\"Client 0\")  # 2 <class 'int'>\nenum_res = TestEnum(res)  # TestEnum.B <enum 'TestEnum'>\n```\n\n## Example code\nBelow is a very minimal example of how to use the library. \nIt consists of two instances, Alice and Bob, who greet each other.\nHere, Alice runs on localhost and uses port 61001 for sending/receiving.\nBob also runs on localhost, but uses port 61002.\n\n`alice.py`\n```python\nimport asyncio\n\nfrom tno.mpc.communication import Pool\n\n\nasync def async_main():\n    # Create the pool for Alice.\n    # Alice listens on port 61001 and adds Bob as client.\n    pool = Pool()\n    pool.add_http_server(addr=\"127.0.0.1\", port=61001)\n    pool.add_http_client(\"Bob\", addr=\"127.0.0.1\", port=61002)\n\n    # Alice sends a message to Bob and waits for a reply.\n    # She prints the reply and shuts down the pool\n    await pool.send(\"Bob\", \"Hello Bob! This is Alice speaking.\")\n    reply = await pool.recv(\"Bob\")\n    print(reply)\n    await pool.shutdown()\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(async_main())\n```\n`bob.py`\n```python\nimport asyncio\n\nfrom tno.mpc.communication import Pool\n\n\nasync def async_main():\n    # Create the pool for Bob.\n    # Bob listens on port 61002 and adds Alice as client.\n    pool = Pool()\n    pool.add_http_server(addr=\"127.0.0.1\", port=61002)\n    pool.add_http_client(\"Alice\", addr=\"127.0.0.1\", port=61001)\n\n    # Bob waits for a message from Alice and prints it.\n    # He replies and shuts down his pool instance.\n    message = await pool.recv(\"Alice\")\n    print(message)\n    await pool.send(\"Alice\", \"Hello back to you, Alice!\")\n    await pool.shutdown()\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(async_main())\n```\n\nTo run this example, run each of the files in a separate terminal window.\nNote that if `alice.py` is started prior to `bob.py`, it will throw a `ClientConnectorError`.\nNamely, Alice tries to send a message to port 61002, which has not been opened by Bob yet. \nAfter starting `bob.py`, the error disappears.\n\nThe outputs in the two terminals will be something similar to the following:\n```bash\n>>> python alice.py\n2022-07-07 09:36:20,220 - tno.mpc.communication.httphandlers - INFO - Serving on 127.0.0.1:61001\n2022-07-07 09:36:20,230 - tno.mpc.communication.httphandlers - INFO - Received message from 127.0.0.1:61002\nHello back to you, Bob!\n2022-07-07 09:36:20,232 - tno.mpc.communication.httphandlers - INFO - HTTPServer: Shutting down server task\n2022-07-07 09:36:20,232 - tno.mpc.communication.httphandlers - INFO - Server 127.0.0.1:61001 shutdown\n```\n```bash\n>>> python bob.py\n2022-07-07 09:36:16,915 - tno.mpc.communication.httphandlers - INFO - Serving on 127.0.0.1:61002\n2022-07-07 09:36:20,223 - tno.mpc.communication.httphandlers - INFO - Received message from 127.0.0.1:61001\nHello Bob! This is Alice speaking.\n2022-07-07 09:36:20,232 - tno.mpc.communication.httphandlers - INFO - HTTPServer: Shutting down server task\n2022-07-07 09:36:20,256 - tno.mpc.communication.httphandlers - INFO - Server 127.0.0.1:61002 shutdown\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/tno.mpc.communication/#files",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://mpc.tno.nl/",
    "keywords": "TNO,MPC,multi-party computation,communication",
    "license": "Apache License, Version 2.0",
    "maintainer": "TNO MPC Lab",
    "maintainer_email": "mpclab@tno.nl",
    "name": "tno.mpc.communication",
    "package_url": "https://pypi.org/project/tno.mpc.communication/",
    "platform": "any",
    "project_url": "https://pypi.org/project/tno.mpc.communication/",
    "project_urls": {
      "Documentation": "https://docs.mpc.tno.nl/communication/4.0.0",
      "Download": "https://pypi.org/project/tno.mpc.communication/#files",
      "Homepage": "https://mpc.tno.nl/",
      "Source Code": "https://github.com/TNO-MPC/communication"
    },
    "release_url": "https://pypi.org/project/tno.mpc.communication/4.0.0/",
    "requires_dist": [
      "aiohttp",
      "mypy-extensions",
      "ormsgpack (>=1.1.0)",
      "typing-extensions",
      "bitarray ; extra == 'bitarray'",
      "tno.mpc.encryption-schemes.utils[gmpy] ; extra == 'gmpy2'",
      "numpy ; extra == 'numpy'",
      "bitarray ; extra == 'tests'",
      "numpy ; extra == 'tests'",
      "pytest ; extra == 'tests'",
      "pytest-asyncio ; extra == 'tests'",
      "tno.mpc.encryption-schemes.utils[gmpy] ; extra == 'tests'",
      "typeguard ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "MPC Communication module",
    "version": "4.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14641045,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55635280ae75e74a43166708b3367a2930c47af419f6f1e328b0279c4bdaef8b",
          "md5": "09f173eb87a4afae524836f328bf893b",
          "sha256": "fb45576ac8a9a163e957c192d49465eae2bd70a43a64ad980c795b2ac6486fcb"
        },
        "downloads": -1,
        "filename": "tno.mpc.communication-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09f173eb87a4afae524836f328bf893b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40111,
        "upload_time": "2021-04-01T12:18:44",
        "upload_time_iso_8601": "2021-04-01T12:18:44.836088Z",
        "url": "https://files.pythonhosted.org/packages/55/63/5280ae75e74a43166708b3367a2930c47af419f6f1e328b0279c4bdaef8b/tno.mpc.communication-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48fe9c47fd993b49e9f5713768297132abfba687d8369d7ceee5b942e3ef1197",
          "md5": "921be3c573a52b7bb5baa66630d4e8b0",
          "sha256": "3e54f5dda1f344a1cfac0a9961be3d3e039a23be5fb16b6c772d9827b7f6543d"
        },
        "downloads": -1,
        "filename": "tno.mpc.communication-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "921be3c573a52b7bb5baa66630d4e8b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42557,
        "upload_time": "2021-04-21T09:52:04",
        "upload_time_iso_8601": "2021-04-21T09:52:04.794465Z",
        "url": "https://files.pythonhosted.org/packages/48/fe/9c47fd993b49e9f5713768297132abfba687d8369d7ceee5b942e3ef1197/tno.mpc.communication-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a950c7d7286a47ad5b5ba05be978ba2ac19edb6498503146339912cde19ff68a",
          "md5": "85c297d6669a68cbeab552788d24495b",
          "sha256": "5071b45c84be18b65c3851133520969c596d3f2269f142364a51b992b89a3edb"
        },
        "downloads": -1,
        "filename": "tno.mpc.communication-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85c297d6669a68cbeab552788d24495b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46315,
        "upload_time": "2021-06-28T07:12:09",
        "upload_time_iso_8601": "2021-06-28T07:12:09.842996Z",
        "url": "https://files.pythonhosted.org/packages/a9/50/c7d7286a47ad5b5ba05be978ba2ac19edb6498503146339912cde19ff68a/tno.mpc.communication-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fba4eea494b057f73e5223a33a055104b3a4c6f89b49c18f9cb35219c4fe297",
          "md5": "f971a2a74e3d507a03cd20c9b734d338",
          "sha256": "ef4400adec3f7a56b0e248b0ac9674937864cd6d2403ee3674ebbc1d54821e35"
        },
        "downloads": -1,
        "filename": "tno.mpc.communication-2.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f971a2a74e3d507a03cd20c9b734d338",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 47191,
        "upload_time": "2021-11-30T09:03:08",
        "upload_time_iso_8601": "2021-11-30T09:03:08.347633Z",
        "url": "https://files.pythonhosted.org/packages/8f/ba/4eea494b057f73e5223a33a055104b3a4c6f89b49c18f9cb35219c4fe297/tno.mpc.communication-2.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc8425f0cd7df27d00931b79e639e693d02379f3a911d364757c107c73617d52",
          "md5": "e08ccaa59d918b6ab324b8c08d1cbf35",
          "sha256": "ffdf539a675178e83c75221606f17bacc57e91a5f95e880e26f5646894953362"
        },
        "downloads": -1,
        "filename": "tno.mpc.communication-3.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e08ccaa59d918b6ab324b8c08d1cbf35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 47347,
        "upload_time": "2022-01-24T10:57:06",
        "upload_time_iso_8601": "2022-01-24T10:57:06.662464Z",
        "url": "https://files.pythonhosted.org/packages/bc/84/25f0cd7df27d00931b79e639e693d02379f3a911d364757c107c73617d52/tno.mpc.communication-3.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0bce3f1d9d6b0a2ace49f192b9525691b39809867cc3af0d95ab87a4ce8700d",
          "md5": "0219206ed90077ab2bcd0684a0f6d84b",
          "sha256": "685c0353c4ee0196de0ad97e47a3705a88703964fe2816dc3fb223dcba2b94e4"
        },
        "downloads": -1,
        "filename": "tno.mpc.communication-3.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0219206ed90077ab2bcd0684a0f6d84b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 49288,
        "upload_time": "2022-07-06T07:07:02",
        "upload_time_iso_8601": "2022-07-06T07:07:02.390639Z",
        "url": "https://files.pythonhosted.org/packages/e0/bc/e3f1d9d6b0a2ace49f192b9525691b39809867cc3af0d95ab87a4ce8700d/tno.mpc.communication-3.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c524e882c294d2b294e1fc47c06b02e9127083d0a0ec91cc58b430ad7191f6b1",
          "md5": "15a57d2b70b5056f0ebdb854992acd80",
          "sha256": "387fc866c3feb333154e137933e32dbe620edb586dc7a2c09717cf73b6b17db3"
        },
        "downloads": -1,
        "filename": "tno.mpc.communication-4.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15a57d2b70b5056f0ebdb854992acd80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 54950,
        "upload_time": "2022-08-03T11:32:21",
        "upload_time_iso_8601": "2022-08-03T11:32:21.164669Z",
        "url": "https://files.pythonhosted.org/packages/c5/24/e882c294d2b294e1fc47c06b02e9127083d0a0ec91cc58b430ad7191f6b1/tno.mpc.communication-4.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c524e882c294d2b294e1fc47c06b02e9127083d0a0ec91cc58b430ad7191f6b1",
        "md5": "15a57d2b70b5056f0ebdb854992acd80",
        "sha256": "387fc866c3feb333154e137933e32dbe620edb586dc7a2c09717cf73b6b17db3"
      },
      "downloads": -1,
      "filename": "tno.mpc.communication-4.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "15a57d2b70b5056f0ebdb854992acd80",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 54950,
      "upload_time": "2022-08-03T11:32:21",
      "upload_time_iso_8601": "2022-08-03T11:32:21.164669Z",
      "url": "https://files.pythonhosted.org/packages/c5/24/e882c294d2b294e1fc47c06b02e9127083d0a0ec91cc58b430ad7191f6b1/tno.mpc.communication-4.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}