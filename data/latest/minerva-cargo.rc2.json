{
  "info": {
    "author": "Rahul Krishna",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Codenet Minerva Cargo\n\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-green.svg)](https://www.python.org/)\n\nCargo is part of the Minerva project working on refactoring monoliths to microservices. It leverages [Data Gravity Insights](https://github.com/konveyor/tackle-data-gravity-insights) from the Konveyor.io project and provides recommendations for partitioning code taking into account code relationships, data relationships, and database transaction scope.\n\n## CARGO: AI-Guided Dependency Analysis for Migrating Monolithic Applications to Microservices Architecture\n\n#### Paper: [ArXiV Preprint](https://arxiv.org/pdf/2207.11784.pdf)\n\n#### Abstract\n\nCARGO (short for Context-sensitive lAbel pRopaGatiOn) is a novel un-/semi-supervised partition refinement technique that uses a comprehensive system dependence graph built using context and flow-sensitive static analysis of a monolithic application to refine and thereby enrich the partitioning quality of the current state-of-the-art algorithms.\n\n##### Figure 1. Overview of CARGO\n\n<img width=\"1792\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1433964/222553554-ce1f7629-bf22-4432-89b7-cc78d8168119.png\">\n\n## Kick-the-tires Instructions (~15 minutes)\n\nThe instructions will reproduce the key results in Figure 6 (RQ1), Figure 7 (RQ2), and Table 1 (RQ3).\n\n### Pre-requisites\n\n* A Linux/Mac system with [Docker](http://docker.io).\n* [Python](https://www.python.org/downloads/) >= 3.8, and Pip. Tested with Python 3.9.\n\n### Step 0: Clone this repository\n\n1. We'll clone this repository and save it's location for the next steps\n\n```bash \ngit clone https://github.com/IBM/codenet-minerva-cargo && cd codenet-minerva-cargo\n\nexport REPO_ROOT=$PWD\n``` \n\n### Step 1: Set up Data Gravity Insights CLI\n\nWe will use [Data Gravity Insights](https://github.com/konveyor/tackle-data-gravity-insights) (aka. DGI) to first build a system dependency graph and persist the graph in a Neo4j.\n\n#### 1.1 Install DGI\n\nDGI is available as PyPi package, you can also install `dgi` as follows\n\n```sh\npip install -U git+https://github.com/rahlk/tackle-data-gravity-insights \n```\n\nThis will install the dgi command locally under your home folder in a hidden folder called: ~/.local/bin. If not already, you must add this folder to your PATH with:\n\n```sh\nexport PATH=$HOME/.local/bin:$PATH\n```\n\n#### 1.2 Creating a Neo4j Docker container\n\nMake sure that your Docker daemon is running, either by starting up the service (on linux) or by opening the desktop application (on mac).\n\nWe will need an instance of Neo4j to store the graphs that `dgi` creates. We will start one up in a docker container and set an environment variable to let `dgi` know where to find it.\n\n```bash\ndocker run -d --name neo4j \\\n    -p 7474:7474 \\\n    -p 7687:7687 \\\n    -e NEO4J_AUTH=\"neo4j/konveyor\" \\\n    -e NEO4J_apoc_export_file_enabled=true \\\n    -e NEO4J_apoc_import_file_enabled=true \\\n    -e NEO4J_apoc_import_file_use__neo4j__config=true \\\n    -e NEO4JLABS_PLUGINS=\\[\"apoc\"\\] \\\n    neo4j:4.4.17\n\nexport NEO4J_BOLT_URL=\"neo4j://neo4j:konveyor@localhost:7687\"\n```\n\n#### Installation complete\n\nWe can now use the `dgi` command to load information about an application into a graph database. We start with `dgi --help`. This should produce:\n\n```man\n$ dgi --help\n\n Usage: dgi [OPTIONS] COMMAND [ARGS]...\n\n Tackle Data Gravity Insights\n\n╭─ Options ───────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ --neo4j-bolt  -n  TEXT  Neo4j Bolt URL                                                                          │\n│ --quiet       -q        Be more quiet                                                                           │\n│ --validate    -v        Validate but don't populate graph                                                       │\n│ --clear       -c        Clear graph before loading                                                              │\n│ --help                  Show this message and exit.                                                             │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭─ Commands ──────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ c2g            Code2Graph add various program dependencies (i.e., call return, heap, and data) into the graph   │\n│ partition      Partition is a command runs the CARGO algorithm to (re-)partition a monolith into microservices  │\n│ s2g            Schema2Graph parses SQL schema (*.DDL file) into the graph                                       │\n│ tx2g           Transaction2Graph add edges denoting CRUD operations to the graph.                               │\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n### Step 2: Setting up a sample application\n\nFor rest of this walkthrough, we'll work with [DayTrader8](https://github.com/OpenLiberty/sample.daytrader8).\n\n### Step 3: Build a Program Dependency Graph with DOOP\n\n#### 3.1 Prepare the application\n\nObtain the sample application WAR file. We'll save this in `extras/demo/doop-in`:\n\n```bash\nwget https://github.com/OpenLiberty/sample.daytrader8/releases/download/v1.2/io.openliberty.sample.daytrader8.war --directory-prefix=$REPO_ROOT/extras/demo/doop-in\n```\n\n#### 3.2 Getting facts with DOOP\n\nWe first need to run [DOOP](https://bitbucket.org/yanniss/doop/src/master/). For ease of use, DOOP has been pre-compiled and hosted as a docker image at [quay.io/rkrsn/doop-main](https://quay.io/rkrsn/doop-main). We'll use that for this demo.\n\n```bash\ndocker run -it --rm \\\n  -v $REPO_ROOT/extras/demo/doop-in:/root/doop-data/input \\\n  -v $REPO_ROOT/extras/demo/doop-out:/root/doop-data/output/ \\\n  quay.io/rkrsn/doop-main:latest rundoop\n```\n\n_Notes:_\n\n_1. If you encounter any error above, please rerun the `docker run ...` command_\n\n_2. Running DOOP for the first time may take up to 15 minutes._\n\n\n#### 3.3 Run DGI code2graph\n\nIn this step, we'll run DGI code2graph to populate a Neo4j graph database with various static code interaction features pertaining to object/dataflow dependencies.\n\n```\ndgi -c c2g -a class -i $REPO_ROOT/extras/demo/doop-out\n```\n\nThis will take 4-5 minutes. After successful completion, we should see something like this :\n\n```bash\n❯ dgi -c c2g -a class -i $REPO_ROOT/extras/demo/doop-out\n[15:57:56] INFO     code2graph generator started.\n           INFO     Verbose mode: ON\n           INFO     Building Graph.\n           INFO     Class level abstraction.\n           WARNING  The option clear is turned ON. Deleting pre-existing nodes.\n           INFO     Populating heap carried dependencies edges\n  • 100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ • Completed/Total: 1192/1192 • Elapsed: 0:00:02 • Remaining: 0:00:00\n[15:57:58] INFO     Populating dataflow edges\n  • 100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ • Completed/Total: 991/991 • Elapsed: 0:00:01 • Remaining: 0:00:00\n[15:58:00] INFO     Populating call-return dependencies edges\n  • 100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ • Completed/Total: 2404/2404 • Elapsed: 0:00:04 • Remaining: 0:00:00\n[15:58:04] INFO     Populating entrypoints\n           INFO     code2graph build complete\n```\n\n#### 3.4 Extracting Database Transactions with Tackle-DiVA\n\nNote that this step is only for applications with database transactions. We will run [Tackle-DiVA](https://github.com/konveyor/tackle-diva) to extract transactions from our application. DiVA is available as a docker image, so we just need to run DiVA by pointing to the *source code directory* of the application and the desired output directory.\n\n1. Let's first get the source code for DayTrader8:\n\n```bash \nwget -c https://github.com/OpenLiberty/sample.daytrader8/archive/refs/tags/v1.2.tar.gz  -O - | tar -xvz -C $REPO_ROOT/extras/demo\n```\n\n```bash\ndocker run --rm \\\n  -v $REPO_ROOT/extras/demo/sample.daytrader8-1.2:/app \\\n  -v $REPO_ROOT/extras/demo/txns:/diva-distribution/output \\\n  quay.io/konveyor/tackle-diva\n```\n\nThis should generate a file `transaction.json` containing all discovered transactions. Finally, we run DGI to load these transaction edges into the program dependency graph.\n\n```bash\ndgi -c tx2g -a class -i $REPO_ROOT/extras/demo/txns/transaction.json\n```\n\nAfter successful completion, we should see something like this :\n\n```bash\n❯ dgi -c tx2g -a class -i $REPO_ROOT/extras/demo/txns/transaction.json\n\n[16:05:36] INFO     Verbose mode: ON\n           WARNING  The CLI argument clear is turned ON. Deleting pre-existing nodes.\n           INFO     ClassTransactionLoader: Populating transactions\n  • 100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ • Completed/Total: 175/175 • Elapsed: 0:00:01 • Remaining: 0:00:00\n[16:05:38] INFO     Transactions populated\n```\n\n### Step 4: Running CARGO\n\nOnce we have created the Neo4j graphs by following the above steps, we can run CARGO as follows:\n\n```\ndgi partition --partitions=5\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ibm/codenet-minerva-cargo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minerva-cargo",
    "package_url": "https://pypi.org/project/minerva-cargo/",
    "platform": null,
    "project_url": "https://pypi.org/project/minerva-cargo/",
    "project_urls": {
      "Homepage": "https://github.com/ibm/codenet-minerva-cargo"
    },
    "release_url": "https://pypi.org/project/minerva-cargo/1.1.0/",
    "requires_dist": [
      "scipy",
      "py2neo",
      "numpy",
      "pandas",
      "networkx",
      "tqdm",
      "scikit-learn",
      "tackle-dgi",
      "rich",
      "nose (==1.3.7) ; extra == 'dev'",
      "pinocchio (==0.4.3) ; extra == 'dev'",
      "coverage (==6.3.2) ; extra == 'dev'",
      "pylint (==2.13) ; extra == 'dev'",
      "ipdb ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A data-centric transformation of monoliths into microservices",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17183253,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c14cdfd3c6c46a79b3033b1add0390c04b51d0f6fb1bf1a6ac2915002348fb48",
          "md5": "e295452a2d5cb1004f564071f146291b",
          "sha256": "a2ffd863d4e050ec10039248091e45df8546ad95574a7d8f9d31421ec05a0328"
        },
        "downloads": -1,
        "filename": "minerva_cargo-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e295452a2d5cb1004f564071f146291b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22323,
        "upload_time": "2023-01-17T02:51:46",
        "upload_time_iso_8601": "2023-01-17T02:51:46.801784Z",
        "url": "https://files.pythonhosted.org/packages/c1/4c/dfd3c6c46a79b3033b1add0390c04b51d0f6fb1bf1a6ac2915002348fb48/minerva_cargo-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bf095a7d72557ba07e00a1a981ea0cbfd64ac04654ff277a0d6493765c27631",
          "md5": "918c014488d95bc22bcebaa5059de534",
          "sha256": "d75abee1432fde94209b52d23d985188bfb7fa328145b3afe1edfdde050c9824"
        },
        "downloads": -1,
        "filename": "minerva-cargo-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "918c014488d95bc22bcebaa5059de534",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25386,
        "upload_time": "2023-01-17T02:51:48",
        "upload_time_iso_8601": "2023-01-17T02:51:48.143177Z",
        "url": "https://files.pythonhosted.org/packages/3b/f0/95a7d72557ba07e00a1a981ea0cbfd64ac04654ff277a0d6493765c27631/minerva-cargo-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5f96c15a7140004a06bfb947bccc92012c11a05816885e644002c80693652fb",
          "md5": "6ceb775c6913cdd2b3b91528580bda29",
          "sha256": "8fc67b4fe4d5897362d1f3d1f0e57a2800494059c354f303864b59dda0b12d0b"
        },
        "downloads": -1,
        "filename": "minerva_cargo-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ceb775c6913cdd2b3b91528580bda29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23777,
        "upload_time": "2023-03-07T00:50:07",
        "upload_time_iso_8601": "2023-03-07T00:50:07.074502Z",
        "url": "https://files.pythonhosted.org/packages/b5/f9/6c15a7140004a06bfb947bccc92012c11a05816885e644002c80693652fb/minerva_cargo-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5606bc5905aff93ec14166d06193da91797314e33b04227c92ea041da86fa010",
          "md5": "b0a54769b8e663683386067a22c00c35",
          "sha256": "1ed0c2e75ad57cd9c0a6e2bc866a38d1b70788582d72bb129a871caec0241224"
        },
        "downloads": -1,
        "filename": "minerva-cargo-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b0a54769b8e663683386067a22c00c35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22534,
        "upload_time": "2023-03-07T00:50:08",
        "upload_time_iso_8601": "2023-03-07T00:50:08.102945Z",
        "url": "https://files.pythonhosted.org/packages/56/06/bc5905aff93ec14166d06193da91797314e33b04227c92ea041da86fa010/minerva-cargo-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5f96c15a7140004a06bfb947bccc92012c11a05816885e644002c80693652fb",
        "md5": "6ceb775c6913cdd2b3b91528580bda29",
        "sha256": "8fc67b4fe4d5897362d1f3d1f0e57a2800494059c354f303864b59dda0b12d0b"
      },
      "downloads": -1,
      "filename": "minerva_cargo-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6ceb775c6913cdd2b3b91528580bda29",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23777,
      "upload_time": "2023-03-07T00:50:07",
      "upload_time_iso_8601": "2023-03-07T00:50:07.074502Z",
      "url": "https://files.pythonhosted.org/packages/b5/f9/6c15a7140004a06bfb947bccc92012c11a05816885e644002c80693652fb/minerva_cargo-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5606bc5905aff93ec14166d06193da91797314e33b04227c92ea041da86fa010",
        "md5": "b0a54769b8e663683386067a22c00c35",
        "sha256": "1ed0c2e75ad57cd9c0a6e2bc866a38d1b70788582d72bb129a871caec0241224"
      },
      "downloads": -1,
      "filename": "minerva-cargo-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b0a54769b8e663683386067a22c00c35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22534,
      "upload_time": "2023-03-07T00:50:08",
      "upload_time_iso_8601": "2023-03-07T00:50:08.102945Z",
      "url": "https://files.pythonhosted.org/packages/56/06/bc5905aff93ec14166d06193da91797314e33b04227c92ea041da86fa010/minerva-cargo-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}