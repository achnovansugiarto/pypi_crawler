{
  "info": {
    "author": "Christos Natsis",
    "author_email": "christos_na@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.8",
      "Topic :: Database"
    ],
    "description": "# SQLAlchemy filtering & sorting utility\n\n# Table of contents\n\n- [SQLAlchemy filtering & sorting utility](#sqlalchemy-filtering--sorting-utility)\n  - [Purpose](#purpose)\n  - [Features](#features)\n  - [Usage](#usage)\n    - [Filtering](#filtering)\n      - [Filtering operators](#filtering-operators)\n    - [Sorting](#sorting)\n    - [Comparison operators](#comparison-operators)\n      - [PostgreSQL specific JSON operators](#postgresql-specific-json-operators)\n  - [Versions tested](#versions-tested)\n\n## Purpose\n\nThis repository was developed to provide a simple JSON format interface to the [SQLAlchemy](https://github.com/sqlalchemy/sqlalchemy)\nquery API to query on `json` SQL fields, which can be used by front-end applications to generate automatically SQL filtering queries\nwith minimum effort in the back-end service implementation.\n\n## Features\n\nSome of the `sqlalchemy-filtering` utility features include:\n\n| Category  | Feature                             | PostgreSQL | MySQL      | SQLite |\n|-----------|-------------------------------------|------------|------------|--------|\n| Filtering | Ability to filter simple SQL fields | Yes        | Yes        | Yes    |\n|           | Ability to filter `json` SQL fields | Yes        | Yes (Beta) | No     |\n|           | Ability to filter join queries      | No         | No         | No     |\n| Sorting   | Ability to sort simple SQL fields   | Yes        | Yes        | Yes    |\n|           | Ability to sort `json` SQL fields   | Yes        | Yes (Beta) | No     |\n|           | Ability to sort on joined fields    | No         | No         | No     |\n\n## Usage\n\nGiven the following [SQLAlchemy](https://github.com/sqlalchemy/sqlalchemy) models:\n\n```python\nfrom sqlalchemy import Column, Integer, String, DateTime, Float\nfrom sqlalchemy.dialects.postgresql import JSONB\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import functions\n\nBase = declarative_base()\n\n\nclass UserInfo(Base):\n    __tablename__ = \"user_info\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    details = Column(JSONB)\n    creation_date = Column(DateTime, nullable=False, server_default=functions.now())\n\n\nclass Ratings(Base):\n    __tablename__ = \"ratings\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    creation_date = Column(DateTime, nullable=False, server_default=functions.now())\n    movie_name = Column(String)\n    rating = Column(Float)\n```\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nfrom tests import models\n\nengine = create_engine(\n  'postgresql://postgres:password@localhost:5432/filter'\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\ndb = SessionLocal()\n\nquery = db.query(models.UserInfo)\n```\n\nAssuming we have records in the database with the following structure:\n1. ID: `id` (type: _integer_)\n2. Details: `details` (type: _json_)\n```json\n{\n  \"skin\": \"White\",\n  \"extra\": {\n    \"test\": \"value\"\n  },\n  \"gender\": \"Male\",\n  \"height\": 188,\n  \"last_name\": \"Walker\",\n  \"first_name\": \"Paul\",\n  \"user_details\": [\n    {\n      \"skill\": \"Fighting\",\n      \"rating\": 7\n    },\n    {\n      \"skill\": \"Driving\",\n      \"rating\": 10\n    }\n  ]\n}\n```\n3. Creation date: `creation_date` (type: _timestamp_)\n\n### Filtering\n\n```python\n# Case 1: Flat request on JSON column\nobj = {\n    \"filter\": [\n        {\n            ## (PostgreSQL) It returns all users that have skill 'Fighting' with rating 10\n            \"field\": \"details\",\n            \"node\": \"user_details\",\n            \"operator\": \"@>\",\n            \"value\": \"[{\\\"skill\\\":\\\"Fighting\\\",\\\"rating\\\":10}]\",\n        },\n        {\n            ## (PostgreSQL) It returns all users that have skill 'Fighting' and any rating (in any skill) with rating 10\n            \"field\": \"details\",\n            \"node\": \"user_details\",\n            \"operator\": \"@>\",\n            \"value\": \"[{\\\"skill\\\":\\\"Fighting\\\"},{\\\"rating\\\":10}]\",\n        }\n    ]\n}\n```\n\n```python\n# Case2: Nested request in JSON nodes\nobj = {\n    \"filter\": [\n        {\n            \"field\": \"details\",\n            \"node\": \"extra\",\n            \"value\": {\n                \"field\": \"test\",\n                \"operator\": \"==\",\n                \"value\": \"value\"\n            }\n        }\n    ]\n}\n```\n\n```python\nfrom sqlalchemy_filtering.filter_util import filter_apply\nfrom sqlalchemy_filtering.operators import SQLDialect\nfrom sqlalchemy_filtering.validators import FilterRequest\n\nfrom tests import models\n\nquery = filter_apply(query=query, entity=models.UserInfo, obj=FilterRequest(obj), dialect=SQLDialect.POSTGRESQL)\n```\n\n#### Filtering operators\n\nFiltering operators AND (`and_`), OR (`or_`) and NOT (`not_`) are supported and can be used all together. \n\n```python\nobj3 = {\n    \"filter\": {\n        \"not\": [\n            {\n                \"field\": \"movie_name\",\n                \"operator\": \"==\",\n                \"value\": \"The Dark Knight\"\n            },\n            {\n                \"field\": \"rating\",\n                \"operator\": \"==\",\n                \"value\": 7\n            }\n        ]\n\n    }\n}\n```\n\n### Sorting\n\n```python\n# Case 1: Sort request on JSON column\nobj = {\n    \"sort\": [\n        {\n            \"field\": \"details\",\n            \"node\": \"height\",\n            \"direction\": \"desc\",\n            \"nullsLast\": True\n        }\n    ]\n}\n```\n\n```python\n# Case 2: Sort request on inner JSON node column\nobj = {\n    \"sort\": [\n        {\n            \"field\": \"details\",\n            \"node\": \"extra.test\",\n            \"direction\": \"desc\",\n            \"nullsLast\": True\n        }\n    ]\n}\n```\n\n```python\n# Case 3: Sort request on simple column\nobj = {\n    \"sort\": [\n        {\n            \"field\": \"creation_date\",\n            \"direction\": \"desc\",\n            \"nullsLast\": True\n        }\n    ]\n}\n```\n\n```python\nfrom sqlalchemy_filtering.sort_util import sort_apply\nfrom sqlalchemy_filtering.validators import SortRequest\n\nfrom tests import models\n\nquery = sort_apply(query=query, entity=models.UserInfo, obj=SortRequest(obj))\n```\n### Comparison operators\n\nThe list of the available comparison operators can be found below:\n\n- `is` (aliases: `==`, `eq`)\n- `is_not` (aliases: `!=`, `ne`)\n- `is_null`\n- `is_not_null`\n- `>` (alias: `gt`)\n- `<` (alias: `lt`)\n- `>=` (alias: `ge`)\n- `<=` (alias: `le`)\n- `like`\n- `not_like`\n- `ilike`\n- `not_ilike`\n- `in`\n- `not_in`\n- `contains`\n- `any`\n- `match`\n- `starts_with`\n\n#### PostgreSQL specific JSON operators\n\n- `@>`\n- `<@`\n- `@?`\n- `@@`\n\n## Versions tested\n\n| System     | Version        |\n|------------|----------------|\n| PostgreSQL | 9.2, 12.7      |\n| MySQL      | 8.0.20, 8.0.27 |\n| SQLite     | 3.37           |\n| SQLAlchemy | >= 1.4.0       |\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cnatsis/sqlalchemy-filtering",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlalchemy-filtering",
    "package_url": "https://pypi.org/project/sqlalchemy-filtering/",
    "platform": "",
    "project_url": "https://pypi.org/project/sqlalchemy-filtering/",
    "project_urls": {
      "Homepage": "https://github.com/cnatsis/sqlalchemy-filtering",
      "Issues Tracker": "https://github.com/cnatsis/sqlalchemy-filtering/issues"
    },
    "release_url": "https://pypi.org/project/sqlalchemy-filtering/0.1.2/",
    "requires_dist": [
      "mysqlclient (==2.1.0) ; extra == 'mysql'",
      "psycopg2 (==2.8.4) ; extra == 'postgresql'"
    ],
    "requires_python": ">=3.6",
    "summary": "SQLAlchemy query filtering and sorting wrapper in JSON format.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12447863,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e87b80322534453536aa815f50ac619b68f4e7761603a773d8bdda2dedf89da",
          "md5": "4e3885c6d51fb8bab3964e3f6a9d74dc",
          "sha256": "0c0accce0ab86d84a583a47ca9862cd2e6e6a4e9c08fea84a7ba64569b9bc16c"
        },
        "downloads": -1,
        "filename": "sqlalchemy_filtering-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e3885c6d51fb8bab3964e3f6a9d74dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12965,
        "upload_time": "2021-12-31T12:58:26",
        "upload_time_iso_8601": "2021-12-31T12:58:26.820096Z",
        "url": "https://files.pythonhosted.org/packages/4e/87/b80322534453536aa815f50ac619b68f4e7761603a773d8bdda2dedf89da/sqlalchemy_filtering-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42d6a33a2dfa6a74c418403d9c16474ee4f88c1f021527979d599d12785c6f67",
          "md5": "efbc7272af0a37870500f7aaf0099226",
          "sha256": "7679daeaee4e07ab90e7f721498c4ae431db74596279545fa252361d3f2188a5"
        },
        "downloads": -1,
        "filename": "sqlalchemy-filtering-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "efbc7272af0a37870500f7aaf0099226",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13200,
        "upload_time": "2021-12-31T12:58:28",
        "upload_time_iso_8601": "2021-12-31T12:58:28.944235Z",
        "url": "https://files.pythonhosted.org/packages/42/d6/a33a2dfa6a74c418403d9c16474ee4f88c1f021527979d599d12785c6f67/sqlalchemy-filtering-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e87b80322534453536aa815f50ac619b68f4e7761603a773d8bdda2dedf89da",
        "md5": "4e3885c6d51fb8bab3964e3f6a9d74dc",
        "sha256": "0c0accce0ab86d84a583a47ca9862cd2e6e6a4e9c08fea84a7ba64569b9bc16c"
      },
      "downloads": -1,
      "filename": "sqlalchemy_filtering-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4e3885c6d51fb8bab3964e3f6a9d74dc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12965,
      "upload_time": "2021-12-31T12:58:26",
      "upload_time_iso_8601": "2021-12-31T12:58:26.820096Z",
      "url": "https://files.pythonhosted.org/packages/4e/87/b80322534453536aa815f50ac619b68f4e7761603a773d8bdda2dedf89da/sqlalchemy_filtering-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42d6a33a2dfa6a74c418403d9c16474ee4f88c1f021527979d599d12785c6f67",
        "md5": "efbc7272af0a37870500f7aaf0099226",
        "sha256": "7679daeaee4e07ab90e7f721498c4ae431db74596279545fa252361d3f2188a5"
      },
      "downloads": -1,
      "filename": "sqlalchemy-filtering-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "efbc7272af0a37870500f7aaf0099226",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13200,
      "upload_time": "2021-12-31T12:58:28",
      "upload_time_iso_8601": "2021-12-31T12:58:28.944235Z",
      "url": "https://files.pythonhosted.org/packages/42/d6/a33a2dfa6a74c418403d9c16474ee4f88c1f021527979d599d12785c6f67/sqlalchemy-filtering-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}