{
  "info": {
    "author": "Toumi abderrahmane",
    "author_email": "abderrahmanemustapha030898@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Leblad py\n\nthe python version of leblad library, provide a list of Algerian administrative areas with many useful APIs\nbased on [dzcode-io/leblad](https://github.com/dzcode-io/leblad)\n\n# Meta \n\n**Coverage** \n\n[![codecov](https://codecov.io/gh/abderrahmaneMustapha/leblad-py/branch/main/graph/badge.svg?token=G2LWO5YXHB)](https://codecov.io/gh/abderrahmaneMustapha/leblad-py)\n## Getting started\n\n### Usage\n\n### Installation\n\n```\npip install leblad\n```\n\n## API\n\n### import\n\n```python\nimport leblad\n\napi   =   leblad.Api()\n```\n\n### getWilayaList\n\nReturns a list of algeria provinces or wilayas\n\n#### Arguments\n\n-   return : Array of Wilaya Object attributes to keep\n\n#### Examples\n\n```python\nallWilayasDetails = api.getWilayaList()\n```\n\n### getWilayaByZipCode\n\nReturns a wilaya that includes the given zipCode\n\n#### Arguments\n\n-   `zip_code` number (required) A zip code\n    return : Array of Wilaya Object attributes to keep\n    **Examples**\n\n```python\nwilaya = api.getWilayaByZipCode(zip_code)\n```\n\n### getWilayaByCode\n\nReturns a wilaya that includes the given wilaya code (mattricule).\n\n#### Arguments\n\n-   `wilaya_code` number (**required**) A zip code\n    return : Array of Wilaya Object attributes to keep\n\n**Examples**\n\n```python\nwilaya = api.getWilayaByCode(14)\nprint(wilaya) # will print the wilaya object ({name: \"Tiaret\"...})\n```\n\n### getAdjacentWilayas\n\nTakes a wilaya code (matricule) and returns a list of adjacent wilayas codes\n\n**Arguments**\n\n-   `wilaya_code` (**required**) the Wilaya's \"matricule\"\n\n**Examples**\n\n```python\nadjacent_wilayas = api.getAdjacentWilaya(31)\nprint(adjacent_wilayas) # will print [46, 22, 29, 27]\n```\n\n### getZipCodesForWilaya\n\nTakes a wilaya code (matricule) and returns a list of Respective Zip-Codes for that wilaya\n\n**Arguments**\n\n-   `wilaya_code` (**required**) the Wilaya's \"matricule\"\n\n**Examples**\n\n```python\nwilayas_zipcodes = api.getZipCodesForWilaya(31)\nprint(wilayas_zipcodes) #returns list of zip codes for wilaya 31\n```\n\n#### getWilayasByPhoneCode\n\nTakes a phone code and returns the matching wilaya.\n\n**Arguments**\n\n-   `phone_code` (**required**) the Wilaya's \"phoneCode\"\n\n**Examples**\n\n```python\nwilaya = api.getWilayasByPhoneCode(34)\nprint(wilaya) # will the wilaya object ({name: \"Béjaïa\"...})\n```\n\n### getWilayaByDairaName\n\nTakes a daira name and returns the matching wilaya.\n\n**Arguments**\n\n-   `dairaName: string` (**required**) the Wilaya's \"dairaName\"\n\n**Examples**\n\n```python\nwilaya = api.getWilayaByDairaName(\"OUED RHIOU\")\nprint(wilaya) #will print the wilaya object ({name: \"Relizane\"...})\n```\n\n#### getBaladyiatsForDaira\n\nTakes a daira code and returns the matching baladyiats.\n\n**Arguments**\n\n-   `daira_code: int` (**required**) the Wilaya's \"dairaName\"\n\n**Examples**\n\n```python\nbaladiyats = api.getBaladyiatsForDaira(1401)\nprint(baladiyats) # will return baladyiats for daira of \"Tiaret\"\n```\n\n### getDairatsForWilaya\n\nTakes a wilaya code (matricule) ans returns list of all dairats of that wilaya.\n\n**Arguments**\n\n-   `wilaya_code: number` (**required**) the Wilaya's \"matricule\"\n\n**Examples**\n\n```python\nwilaya_dairats = api.getDairatsForWilaya(3)\nprint(wilaya_dairats) #returns list of dairats for wilaya 3\n```\n\n#### getPhoneCodesForWilaya\n\nTakes a wilaya code (matricule) and returns a list of phone codes for given wilaya\n\n**Arguments**\n\n-   `wilaya_code: number` (**required**) the Wilaya's \"matricule\"\n\n**Examples**\n\n```python\nphones  = api.getPhoneCodesForWilaya(22)\nprint(phones) #returns list of phone codes for wilaya 22\n```\n\n#### getFirstPhoneCodeForWilaya\n\nTakes a wilaya code (matricule) and returns the first phone code from a list of phone codes for given wilaya\n\n**Arguments**\n\n-   `wilayaCode: number` (**required**) the Wilaya's \"matricule\"\n\n**Examples**\n\n```python\nfirst_phonecode = api.getFirstPhoneCodeForWilaya(16)\nprint(first_phonecode) #returns first phone code for wilaya 16\n```\n\n### getBaladyiatsForWilaya\n\nTakes a wilaya code (mattricule) and returns array of Baladiyates of wilaya.\n\n**Arguments**\n\n-   `wilaya_code: number` (**required**) the Wilaya's \"matricule\"\n\n**Examples**\n\n```python\nwilaya_bladiyats = api.getBaladyiatsForWilaya(31)\nprint(wilaya_bladiyats) # will print the baladyiats list ([{ code: 3125, name: 'AIN KERMA'..},{ code: 3105,name: 'ES SENIA',}])\n```\n\n### getWilayaByBaladyiaName\n\nTakes a Baladyia name and returns wilaya in which baladyia is located.\n\n**Arguments**\n\n-   `baladya: number` (**required**) the Baladyia name\n\n**Examples**\n\n```python\nwilaya = api.getWilayaByBaladyiaName('ES SENIA')\nprint(wilaya) # will print the wilaya object ({name: \"Oran\"...})\n```\n\n### getDairaByBaladyiaName\n\nTakes a Baladyia name and returns daira in which baladyia is located.\n\n**Arguments**\n\n-   `baladyia_name: string` (**required**) the Baladyia name\n\n**Examples**\n\n```python\ndaira =api.getDairaByBaladyiaName('ES SENIA')\nprint(daira) #will print the daira object ({name: \"ES SENIA\"...})\n```\n\n### getFullAdjacentWilaya\n\nTakes a wilaya code  and returns a list of adjacent wilaya objects\n\n**Arguments**\n\n-   `wilaya_code: integer` (**required**) the wilaya code (matricule)\n\n**Examples**\n\n```python\nadjacent_wilaya_obj =api.getFullAdjacentWilaya('14')\nprint(adjacent_wilaya_obj) #will print a list of objects of adjacent wilaya\n```\n### getAdjacentWilaya\n\nTakes a wilaya code  and returns a list of adjacent wilayas\n\n**Arguments**\n\n-   `wilaya_code: integer` (**required**) the wilaya code (matricule)\n\n**Examples**\n\n```python\nadjacent_wilaya_obj =api.getAdjacentWilaya('14')\nprint(adjacent_wilaya_obj) #will print a list of objects of adjacent wilaya\n```\n## Testing\n\nSimply run\n\n```python\npython -m unittest tests/test_index.py\n```\n\n## License\n\nCopyright (c) 2020 Licensed under the MIT license.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abderrahmaneMustapha/leblad-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "leblad",
    "package_url": "https://pypi.org/project/leblad/",
    "platform": "",
    "project_url": "https://pypi.org/project/leblad/",
    "project_urls": {
      "Homepage": "https://github.com/abderrahmaneMustapha/leblad-py"
    },
    "release_url": "https://pypi.org/project/leblad/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "the python version of leblad library,  provide a list of Algerian administrative areas with many useful APIsbased on  dzcode-io/leblad",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9088912,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c716cf247c033007ceeab6d7fcd7f30537b5498f72538f096064a4818d25c555",
          "md5": "68d5729ce16de91e50ad80b7d8798c44",
          "sha256": "f629a9879e559ad1a3bf9ad9ef5fce41b7333c1079a1846d599b5b1d2452f04b"
        },
        "downloads": -1,
        "filename": "leblad-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68d5729ce16de91e50ad80b7d8798c44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3898,
        "upload_time": "2020-12-18T08:46:40",
        "upload_time_iso_8601": "2020-12-18T08:46:40.631246Z",
        "url": "https://files.pythonhosted.org/packages/c7/16/cf247c033007ceeab6d7fcd7f30537b5498f72538f096064a4818d25c555/leblad-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7439ed256ed7810eded83f0f2f0e20a77a2d2b7762ef8945853b07404a146864",
          "md5": "46de50cf363a5204866c92ed7b5d0d68",
          "sha256": "9b69481f826c3a1de7a839dc0b1b45954c29c3f1f2f31ddb80227d59455cabb3"
        },
        "downloads": -1,
        "filename": "leblad-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "46de50cf363a5204866c92ed7b5d0d68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2390,
        "upload_time": "2020-12-18T08:46:41",
        "upload_time_iso_8601": "2020-12-18T08:46:41.948829Z",
        "url": "https://files.pythonhosted.org/packages/74/39/ed256ed7810eded83f0f2f0e20a77a2d2b7762ef8945853b07404a146864/leblad-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7bb5122cdc863f7a6979a66f233ae7b6773fef3ecaf58ec7f683cc9587c9d5a",
          "md5": "2bbc2980e3bd35566eccd833546b60c3",
          "sha256": "ed3631ff80d1b3338ba7d5377d577d4fab1ee5f5c48f3cbc124792532ab70078"
        },
        "downloads": -1,
        "filename": "leblad-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bbc2980e3bd35566eccd833546b60c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5038,
        "upload_time": "2021-01-08T10:18:38",
        "upload_time_iso_8601": "2021-01-08T10:18:38.253106Z",
        "url": "https://files.pythonhosted.org/packages/b7/bb/5122cdc863f7a6979a66f233ae7b6773fef3ecaf58ec7f683cc9587c9d5a/leblad-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92bdf80e93b18b2fe3ebae6cfb52b4c32ef30cc00d48ecc3359b74ece1d14971",
          "md5": "86da731fe176e9faf7e3be5317b6c0a3",
          "sha256": "a8a9738dec48a82283857c16e1f6a60d6a8039c556ff12c0060154addaff3d3c"
        },
        "downloads": -1,
        "filename": "leblad-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "86da731fe176e9faf7e3be5317b6c0a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4077,
        "upload_time": "2021-01-08T10:18:39",
        "upload_time_iso_8601": "2021-01-08T10:18:39.773785Z",
        "url": "https://files.pythonhosted.org/packages/92/bd/f80e93b18b2fe3ebae6cfb52b4c32ef30cc00d48ecc3359b74ece1d14971/leblad-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "599f8b6d5f55f9b211748a91e0014047ab134b5e452b423cc8c331bbdae40b06",
          "md5": "1b5a245f867bd122359e090dd3dbbdfa",
          "sha256": "75195f561d86871e870825df656a368efc3f726243eadabb647e1515d348f842"
        },
        "downloads": -1,
        "filename": "leblad-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b5a245f867bd122359e090dd3dbbdfa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5021,
        "upload_time": "2021-01-08T10:55:18",
        "upload_time_iso_8601": "2021-01-08T10:55:18.944532Z",
        "url": "https://files.pythonhosted.org/packages/59/9f/8b6d5f55f9b211748a91e0014047ab134b5e452b423cc8c331bbdae40b06/leblad-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c14334a2d7199f441809f48010aa47cd8a3324f127ba62c996e19585fa077bd7",
          "md5": "48cdfccea1346845ae89fcbea4f8e82a",
          "sha256": "f918dee67d1f56530442eb13b176ccaf7abefa525e4e7af9c9db5fe3981ab266"
        },
        "downloads": -1,
        "filename": "leblad-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "48cdfccea1346845ae89fcbea4f8e82a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4046,
        "upload_time": "2021-01-08T10:55:20",
        "upload_time_iso_8601": "2021-01-08T10:55:20.321869Z",
        "url": "https://files.pythonhosted.org/packages/c1/43/34a2d7199f441809f48010aa47cd8a3324f127ba62c996e19585fa077bd7/leblad-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b914207e4dbbaa868b7d4efd9d6759a0237ee739c511c82c4e305bd2789be7f",
          "md5": "1c06b53539458c54de04f4e16dd1338d",
          "sha256": "8692a394f04ab59785ee97adee330969220b2ecf1e879795ae3461f55b50cd36"
        },
        "downloads": -1,
        "filename": "leblad-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c06b53539458c54de04f4e16dd1338d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5612,
        "upload_time": "2021-01-08T20:12:41",
        "upload_time_iso_8601": "2021-01-08T20:12:41.268167Z",
        "url": "https://files.pythonhosted.org/packages/5b/91/4207e4dbbaa868b7d4efd9d6759a0237ee739c511c82c4e305bd2789be7f/leblad-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dbc4df227412a98b0739ca19fd065f26a60c46466185117e94da3b07cc78638",
          "md5": "074805def95930dd4c8e8595c9932e5c",
          "sha256": "c147a942c93c8c47f1c695c2d0be91992195ca6baf23641a1710813e6adfbfb0"
        },
        "downloads": -1,
        "filename": "leblad-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "074805def95930dd4c8e8595c9932e5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5539,
        "upload_time": "2021-01-08T20:12:42",
        "upload_time_iso_8601": "2021-01-08T20:12:42.195272Z",
        "url": "https://files.pythonhosted.org/packages/3d/bc/4df227412a98b0739ca19fd065f26a60c46466185117e94da3b07cc78638/leblad-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b914207e4dbbaa868b7d4efd9d6759a0237ee739c511c82c4e305bd2789be7f",
        "md5": "1c06b53539458c54de04f4e16dd1338d",
        "sha256": "8692a394f04ab59785ee97adee330969220b2ecf1e879795ae3461f55b50cd36"
      },
      "downloads": -1,
      "filename": "leblad-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1c06b53539458c54de04f4e16dd1338d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5612,
      "upload_time": "2021-01-08T20:12:41",
      "upload_time_iso_8601": "2021-01-08T20:12:41.268167Z",
      "url": "https://files.pythonhosted.org/packages/5b/91/4207e4dbbaa868b7d4efd9d6759a0237ee739c511c82c4e305bd2789be7f/leblad-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3dbc4df227412a98b0739ca19fd065f26a60c46466185117e94da3b07cc78638",
        "md5": "074805def95930dd4c8e8595c9932e5c",
        "sha256": "c147a942c93c8c47f1c695c2d0be91992195ca6baf23641a1710813e6adfbfb0"
      },
      "downloads": -1,
      "filename": "leblad-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "074805def95930dd4c8e8595c9932e5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5539,
      "upload_time": "2021-01-08T20:12:42",
      "upload_time_iso_8601": "2021-01-08T20:12:42.195272Z",
      "url": "https://files.pythonhosted.org/packages/3d/bc/4df227412a98b0739ca19fd065f26a60c46466185117e94da3b07cc78638/leblad-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}