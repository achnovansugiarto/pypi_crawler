{
  "info": {
    "author": "Barry Byford",
    "author_email": "barry_byford@yahoo.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Education",
      "Topic :: Home Automation",
      "Topic :: Software Development :: Embedded Systems",
      "Topic :: System :: Hardware"
    ],
    "description": "========\nBLE GATT\n========\n\n.. image:: https://img.shields.io/pypi/l/bluezero.svg\n   :target: https://github.com/ukBaz/python-bluezero/blob/master/LICENSE\n   :alt: MIT License\n\n.. image:: https://img.shields.io/pypi/v/BLE-GATT.svg\n   :target: https://pypi.python.org/pypi/BLE-GATT/\n   :alt: PyPI Version\n\n.. image:: ![Test](https://github.com/ukBaz/BLE_GATT/workflows/Tests/badge.svg)\n    :target: https://github.com/ukBaz/BLE_GATT/actions?query=workflow%3ATests\n    :alt: Build Status\n\n\n\nPython package for using BlueZ D-Bus API to create a device in the Central role\n\nGoal\n----\n\nThe goal of this library is to only have a small number of dependencies and\nto be easily installable (even in a Python virtual environment without\n`--system-site-packages`).\n\nThe commands should be installed and run by the user without `sudo`\nprivileges.\n\nInstall\n-------\n\n.. code-block:: bash\n\n    $ python3 -m venv venv_ble\n    $ . venv_ble/bin/activate\n    $ pip3 install BLE_GATT\n\ntl;dr\n-----\n\nExample of connecting and reading and writing without\nnotifications or asynchronous data\n\n.. code-block:: python\n\n    import BLE_GATT\n\n    ubit_address = 'E5:10:5E:37:11:2d'\n    led_text = 'e95d93ee-251d-470a-a062-fa1922dfa9A8'\n    led_matrix_state = 'e95d7b77-251d-470a-a062-fa1922dfa9a8'\n\n    ubit = BLE_GATT.Central(ubit_address)\n    ubit.connect()\n    ubit.char_write(led_text, b'test')\n    ubit.char_write(led_matrix_state, [1, 2, 4, 8, 16])\n    print(ubit.char_read(led_matrix_state))\n    ubit.disconnect()\n\nExample of connecting and interacting with characteristics asynchronously\n\n.. code-block:: python\n\n    import BLE_GATT\n    from gi.repository import GLib\n\n    ubit_address = 'E9:06:4D:45:FC:8D'\n    uart_rx = '6e400003-b5a3-f393-e0a9-e50e24dcca9e'\n    uart_tx = '6e400002-b5a3-f393-e0a9-e50e24dcca9e'\n\n\n    def notify_handler(value):\n        print(f\"Received: {bytes(value).decode('UTF-8')}\")\n\n\n    def send_ping():\n        print('sending: ping')\n        ubit.char_write(uart_rx, b'ping\\n')\n        return True\n\n\n    ubit = BLE_GATT.Central(ubit_address)\n    ubit.connect()\n    ubit.on_value_change(uart_tx, notify_handler)\n    GLib.timeout_add_seconds(20, send_ping)\n    ubit.wait_for_notifications()\n\n\nBasics of BLE\n-------------\n\nHopefully you are here you are here with some basic knowledge of Bluetooth\nand you understand that Bluetooth Classic and Bluetooth BLE are different.\n\nThere is an introduction to BLE at:\n\nhttps://www.bluetooth.com/bluetooth-resources/intro-to-bluetooth-low-energy/\n\nThis library is only going to work with BLE. It will also only be a Central\ndevice connecting to a Peripheral device.\n\nThe two key things that you will need to know about the peripheral device\nyou want to connect to is its address and the UUID of the GATT\ncharacteristic you want to interact with.\n\nAddreess\n~~~~~~~~\n\nThis will be in the form of a mac address. This is 6 pairs of numbers separate\nby colons. e.g. `11:22:33:44:55:66` This should be unique to each device.\n\nUUID\n~~~~\n\nA UUID is a 128-bit value that are written in groups 0f 8-4-4-4-12. For example\n00002A00-0000-1000-8000-00805F9B34FB.\n\nEach characteristic will have a UUID that represents what it is. The number\nabove is for the `Device Name Characteristic`.\n\nWriting those long numbers is cumbersome so Bluetooth official\ncharacteristics can be shortened to 16-bits. This means you will often see\nthe above Device Name Characteristic written as 0x2A00 although on the system\nit will still be the 128-bit value. The official Bluetooth base UUID is:\n0000xxxx-0000-1000-8000-00805F9B34FB and the 16-bit value replaces the x's.\n\nOne-time provisioning of peripheral device\n------------------------------------------\n\nA BLE peripheral device will be advertising some summary information, such\nas what services it offers, and our Central device needs to have read this\nadvertisement before it can connect. Some devices will also need to exchange\nsecurity information before they can connect and exchange information\nsecurely.\n\nThis security information exchange is called pairing or bonding. As this\nis a one-time provisioning step this library does not do the discovery or\npairing step. Those can be done with the Linux `bluetoothctl` tool.\n\n\n\nTo launch the tool::\n\n    $ bluetoothctl\n\nTo start and stop the discovery of nearby advertising peripherals::\n\n    [bluetooth]# scan on\n    [bluetooth]# scan off\n\nDiscovered devices will scroll up the screen. Once you stop discovery, to\nget a list of devices use::\n\n    [bluetooth]# devices\n\nIf you need to pair with the peripheral then the commands are::\n\n    [bluetooth]# agent KeyboardDisplay\n    [bluetooth]# pair 11:22:33:44:55:66\n\nIf you don't need to pair, then doing a connect will save the device\nin the Bluetooth information on the machine::\n\n    [bluetooth]# connect 11:22:33:44:55:66\n    [Name Of Device]# disconnect\n\n\nGetting Started\n---------------\n\nNow you have the peripheral device address, UUID's of interest, and have done\nthe provisioning of the device we are ready to do some coding.\n\nCreate a device object\n~~~~~~~~~~~~~~~~~~~~~~\n\nImport the library to you code and tell it about the address of the\nperipheral device to connect to.\n\n.. code-block:: python\n\n    import BLE_GATT\n    my_device = BLE_GATT.Central('11:22:33:44:55:66')\n\nConnect and disconnect\n~~~~~~~~~~~~~~~~~~~~~~\n\nEstablish (or remove) a Bluetooth connection between the Linux computer your\ncode runs on and the peripheral device.\n\n.. code-block:: python\n\n    my_device.connect()\n    my_device.disconnect()\n\nExchange Information\n~~~~~~~~~~~~~~~~~~~~\n\nThe API uses the structure of the command name is the activity you want\nto perform on the characteristic. The first parameter is the UUID of the\ncharacteristic you want to perform that on. To save us keep writing the long\nUUID, it is a good idea to create a constant/variable with the UUID value\n\nBluetooth data is always an array of unsigned bytes. We can represent\nthat in Python as a list of values between 0 and 255. Numbers that\nare bigger than 255 will take multiple bytes. We can connect these\ntogether in Python with  int.from_bytes or struct.unpack.\n\nTo create the values to write we can use int.to_bytes or stuct.pack\n\nExpect Bluetooth data to be in little endian format.\n\n.. code-block:: python\n\n    my_custom_uuid = '12345678-1234-1234-1234-123456789ABC'\n    value = my_device.char_read(my_custom_uuid)\n    my_device.char_write(my_custom_uuid, [255, 255, 0, 123])\n\nAsynchronous Data\n~~~~~~~~~~~~~~~~~\n\nAs well as reading and writing data, it is also possible get\nnotifications from a Bluetooth peripheral when the value of a\ncharacteristic has changed. This is very efficient on Bluetooth\ntraffic and also the battery of the peripheral as it can turn the\nradio off when there isn't new data. For programming the client it\nmeans we don't know when there is going to be data to handle. This\nrequires us to code using asynchronous technique.\n\nWe do this be using the `on_value_change` command for the GATT\ncharacteristic UUID of interest. We give it a function that will get\ncalled when the value changes. We also need to use\n`wait_for_notifications` to stop the code exiting. This runs an\nevent loop listening for updates.\n\n.. code-block:: python\n\n    def my_callback(value):\n        print(value)\n    on_value_change(my_custom_uuid, my_callback)\n    wait_for_notifications())\n\nIf you want to stop getting notifications from a GATT characteristic\nUUID then there is:\n\n.. code-block:: python\n\n    remove_notify(my_custom_uuid)\n\nThere is also a command that will remove all notifications, exit the\nevent loop, and disconnect from the peripheral device.\n\n.. code-block:: python\n\n    cleanup()\n\nBytes and Values\n----------------\n\nWith Bluetooth values will always be in bytes which isn't very readable to\nhumans so most of the time we will want to covert them to an integer or\nfloating point number.\n\nLet's use an example from GATT Specification Supplement at\nhttps://www.bluetooth.com/specifications/specs/\n\nWe will use Electric Current Specification (0x2AF0) which has three fields\nwithin the characteristic each two bytes (octets) in size. Those three fields\nare minimum, typical and maximum electric current. With current being defined\nas:\n\n+------------------+-----------------------------------------------------+\n| Field            | Current                                             |\n+------------------+-----------------------------------------------------+\n| Data Type        | uint16  (Represents a 16-bit unsigned integer)      |\n+------------------+-----------------------------------------------------+\n| Size (in octets) | 2                                                   |\n+------------------+-----------------------------------------------------+\n| Description      | - Unit: org.bluetooth.unit.electric_current.ampere  |\n|                  | - Minimum value: 0                                  |\n|                  | - Maximum value: 655.34                             |\n|                  | - Represented values: M = 1, d = -2, b = 0          |\n|                  | - Unit is degrees with a resolution of 0.01         |\n+------------------+-----------------------------------------------------+\n\nThe represented value information helps us convert an integer to a floating\npoint number:\n\n * M = multiplier, positive or negative integer (between -10 and +10)\n * d = decimal exponent, positive or negative integer\n * b = binary exponent, positive or negative integer\n\nFrom bytes\n~~~~~~~~~~\n\nIf we had three values of `12.34, 23.45, 34.56` they would arrive as\n`[210, 4, 41, 9, 128, 13]`. Let's see how we could covert them using\nfirstly `struct`.\n\n.. code-block:: python\n\n    >>> value = [210, 4, 41, 9, 128, 13]\n    >>> import struct\n    >>> struct.unpack('<HHH', bytes(value))\n    (1234, 2345, 3456)\n    >>> [value * (10 ** -2) for value in struct.unpack('<HHH', bytes(value))]\n    [12.34, 23.45, 34.56]\n\nAnd doing the same using `int.from_bytes`\n\n.. code-block:: python\n\n    >>> int.from_bytes(value[0:2], byteorder='little', signed=False)\n    1234\n    >>> int.from_bytes(value[0:2], byteorder='little', signed=False) * (10 ** -2)\n    12.34\n    >>> int.from_bytes(value[2:4], byteorder='little', signed=False) * (10 ** -2)\n    23.45\n    >>> int.from_bytes(value[4:6], byteorder='little', signed=False) * (10 ** -2)\n    34.56\n\nTo Bytes\n~~~~~~~~\n\nIf we were sending this data then it needs to go from being floating point\nnumbers to a list of bytes.\n\nUsing `struct`\n\n.. code-block:: python\n\n    >>> c_min = 12.34\n    >>> c_typ = 23.45\n    >>> c_max = 34.56\n    >>> expo = 10 ** 2\n    >>> list(struct.pack('<HHH', int(c_min * expo),\n                                 int(c_typ * expo),\n                                 int(c_max * expo)))\n    [210, 4, 41, 9, 128, 13]\n\nUsing int.to_bytes\n\n.. code-block:: python\n\n    >>> list(b''.join((int(c_min * expo).to_bytes(2, byteorder='little', signed=False),\n    ...                int(c_typ * expo).to_bytes(2, byteorder='little', signed=False),\n    ....               int(c_max * expo).to_bytes(2, byteorder='little', signed=False))))\n    [210, 4, 41, 9, 128, 13]\n\nAdvanced Information\n--------------------\n\nThe BlueZ D-Bus API's used in making this library is documented at:\n\n - https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/adapter-api.txt\n - https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/device-api.txt\n - https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/gatt-api.txt\n\nYou can get help on accessing those full APIs with the following commands:\n\n.. code-block:: python\n\n    import BLE_GATT\n    my_device = BLE_GATT.Central('11:22:33:44:55:66')\n    my_custom_uuid = '12345678-1234-1234-1234-123456789ABC'\n    help(my_device.adapter)\n    help(my_device.device)\n    help(my_device.chrcs[my_custom_uuid.casefold()])\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ukBaz/BLE_GATT",
    "keywords": "Bluetooth BLE development GATT Central",
    "license": "MIT",
    "maintainer": "Barry Byford",
    "maintainer_email": "barry_byford@yahoo.co.uk",
    "name": "BLE-GATT",
    "package_url": "https://pypi.org/project/BLE-GATT/",
    "platform": "",
    "project_url": "https://pypi.org/project/BLE-GATT/",
    "project_urls": {
      "Homepage": "https://github.com/ukBaz/BLE_GATT"
    },
    "release_url": "https://pypi.org/project/BLE-GATT/0.5.0/",
    "requires_dist": [
      "pydbus",
      "vext.gi",
      "bumpversion ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "sphinx ; extra == 'dev'",
      "sphinx-rtd-theme ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "pycodestyle ; extra == 'dev'",
      "python-dbusmock ; extra == 'dev'",
      "sphinx ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "bumpversion ; extra == 'rel'",
      "twine ; extra == 'rel'",
      "coverage ; extra == 'test'",
      "pycodestyle ; extra == 'test'",
      "python-dbusmock ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Python library for Bluetooth Low Energy (BLE) Central on Linux",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9309553,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6209655c3e66edb5368b2ceae70433a877fcfd755decf128c237360935bbd123",
          "md5": "6ebf50ebb8b68cd9bfb849989a664e7d",
          "sha256": "fe41dc042c7266e3caebc9ae757e81f5a820789b8fd75344dfda2dd4bd246037"
        },
        "downloads": -1,
        "filename": "BLE_GATT-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6ebf50ebb8b68cd9bfb849989a664e7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9833,
        "upload_time": "2021-01-31T15:45:54",
        "upload_time_iso_8601": "2021-01-31T15:45:54.220706Z",
        "url": "https://files.pythonhosted.org/packages/62/09/655c3e66edb5368b2ceae70433a877fcfd755decf128c237360935bbd123/BLE_GATT-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa09116c62d49a60fbad48843bb226097268ba7b11c1a0c1fb3ae7487ad3626f",
          "md5": "a76b20064772f96d7b8a3a6a79892394",
          "sha256": "3323c275e1383f17f349c26a247dff3a744798ddcecff01c63da2cd115712586"
        },
        "downloads": -1,
        "filename": "BLE_GATT-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a76b20064772f96d7b8a3a6a79892394",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8035,
        "upload_time": "2021-01-31T17:08:16",
        "upload_time_iso_8601": "2021-01-31T17:08:16.908033Z",
        "url": "https://files.pythonhosted.org/packages/aa/09/116c62d49a60fbad48843bb226097268ba7b11c1a0c1fb3ae7487ad3626f/BLE_GATT-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "442b41a7671db6f417ac0fc8586f203286832ad5db6b32be9e602ebae8f87c6d",
          "md5": "e1d67144d4a7b0b321e352d5cb01e32d",
          "sha256": "49dbe706d03f410edb509e4a7f88554bbca6bcfff444736ca70c7ddc57fc08c8"
        },
        "downloads": -1,
        "filename": "BLE_GATT-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e1d67144d4a7b0b321e352d5cb01e32d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10000,
        "upload_time": "2021-01-31T17:08:18",
        "upload_time_iso_8601": "2021-01-31T17:08:18.234970Z",
        "url": "https://files.pythonhosted.org/packages/44/2b/41a7671db6f417ac0fc8586f203286832ad5db6b32be9e602ebae8f87c6d/BLE_GATT-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baef467006256d4b9ae0b328b9ead634f3a90c58a673de6c752495fc68c8d7a8",
          "md5": "d1e604c50656360302d1cb735a922ead",
          "sha256": "4be10adeb403d6343043bdc62e78ae3338ad1a11c7dbd4191a03689434c08b68"
        },
        "downloads": -1,
        "filename": "BLE_GATT-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1e604c50656360302d1cb735a922ead",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8024,
        "upload_time": "2021-02-01T18:00:39",
        "upload_time_iso_8601": "2021-02-01T18:00:39.049348Z",
        "url": "https://files.pythonhosted.org/packages/ba/ef/467006256d4b9ae0b328b9ead634f3a90c58a673de6c752495fc68c8d7a8/BLE_GATT-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4cb5bc9e70b3a15d24a46b77da0355cadf2d68302d6b87b1cd4ec467a26673f",
          "md5": "fc5dee24d60de17630a5a23d233b2c80",
          "sha256": "d45c74c03b1f2dcbeb61abc8a7419786466a065fbb7dc1879009103773003054"
        },
        "downloads": -1,
        "filename": "BLE_GATT-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fc5dee24d60de17630a5a23d233b2c80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9992,
        "upload_time": "2021-02-01T18:00:40",
        "upload_time_iso_8601": "2021-02-01T18:00:40.605508Z",
        "url": "https://files.pythonhosted.org/packages/e4/cb/5bc9e70b3a15d24a46b77da0355cadf2d68302d6b87b1cd4ec467a26673f/BLE_GATT-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c188c269d218385c1897e82362b6db5924317385d2de929b70fb2bb0627bdae0",
          "md5": "023f7001a8fa082270f7c18c19ca9590",
          "sha256": "1e99d69bc65b8708eb0384ce20354820fd8378935020b5ccf871b0c650a2e6d8"
        },
        "downloads": -1,
        "filename": "BLE_GATT-0.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "023f7001a8fa082270f7c18c19ca9590",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8449,
        "upload_time": "2021-02-03T20:46:41",
        "upload_time_iso_8601": "2021-02-03T20:46:41.876110Z",
        "url": "https://files.pythonhosted.org/packages/c1/88/c269d218385c1897e82362b6db5924317385d2de929b70fb2bb0627bdae0/BLE_GATT-0.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d4f9811e1e7f20c66a97d2a97f4c9de790df54f2d4dd7c5f277e51f7fa26d33",
          "md5": "6c9002e4a44c1e26b9a22ab88b5c05ce",
          "sha256": "e6a274168a2956a407ec91c1ae20ff0f4544db8bccf94b683c95939b5566634c"
        },
        "downloads": -1,
        "filename": "BLE_GATT-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6c9002e4a44c1e26b9a22ab88b5c05ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10631,
        "upload_time": "2021-02-03T20:46:43",
        "upload_time_iso_8601": "2021-02-03T20:46:43.121777Z",
        "url": "https://files.pythonhosted.org/packages/1d/4f/9811e1e7f20c66a97d2a97f4c9de790df54f2d4dd7c5f277e51f7fa26d33/BLE_GATT-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c188c269d218385c1897e82362b6db5924317385d2de929b70fb2bb0627bdae0",
        "md5": "023f7001a8fa082270f7c18c19ca9590",
        "sha256": "1e99d69bc65b8708eb0384ce20354820fd8378935020b5ccf871b0c650a2e6d8"
      },
      "downloads": -1,
      "filename": "BLE_GATT-0.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "023f7001a8fa082270f7c18c19ca9590",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8449,
      "upload_time": "2021-02-03T20:46:41",
      "upload_time_iso_8601": "2021-02-03T20:46:41.876110Z",
      "url": "https://files.pythonhosted.org/packages/c1/88/c269d218385c1897e82362b6db5924317385d2de929b70fb2bb0627bdae0/BLE_GATT-0.5.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d4f9811e1e7f20c66a97d2a97f4c9de790df54f2d4dd7c5f277e51f7fa26d33",
        "md5": "6c9002e4a44c1e26b9a22ab88b5c05ce",
        "sha256": "e6a274168a2956a407ec91c1ae20ff0f4544db8bccf94b683c95939b5566634c"
      },
      "downloads": -1,
      "filename": "BLE_GATT-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6c9002e4a44c1e26b9a22ab88b5c05ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10631,
      "upload_time": "2021-02-03T20:46:43",
      "upload_time_iso_8601": "2021-02-03T20:46:43.121777Z",
      "url": "https://files.pythonhosted.org/packages/1d/4f/9811e1e7f20c66a97d2a97f4c9de790df54f2d4dd7c5f277e51f7fa26d33/BLE_GATT-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}