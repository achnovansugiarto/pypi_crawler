{
  "info": {
    "author": "Hugging Face, Inc.",
    "author_email": "sylvain@huggingface.co",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# doc-builder\n\nThis is the package we use to build the documentation of our Hugging Face repos.\n\n## Installation\n\nYou can install from PyPi with\n\n```bash\npip install hf-doc-builder\n```\n\nTo install from source, clone this repository then\n\n```bash\ncd doc-builder\npip install -e .\n```\n\n## Previewing\n\nTo preview the docs, use the following command:\n\n```bash\ndoc-builder preview {package_name} {path_to_docs}\n```\n\nFor example:\n```bash\ndoc-builder preview datasets ~/Desktop/datasets/docs/source/\n```\n\n**`preview` command only works with existing doc files. When you add a completely new file, you need to update `_toctree.yml` & restart `preview` command (`ctrl-c` to stop it & call `doc-builder preview ...` again).\n## Doc building\n\nTo build the documentation of a given package, use the following command:\n\n```bash\ndoc-builder build {package_name} {path_to_docs} --build_dir {build_dir}\n```\n\nFor instance, here is how you can build the Datasets documentation (requires `pip install datasets[dev]`) if you have cloned the repo in `~/git/datasets`:\n\n```bash\ndoc-builder datasets ~/git/datasets/docs/source --build_dir ~/tmp/test-build\n```\n\nThis will generate MDX files that you can preview like any Markdown file in your favorite editor. To have a look at the documentation in HTML, you need to install node version 14 or higher. Then you can run (still with the example on Datasets)\n\n```bash\ndoc-builder datasets ~/git/datasets/docs/source --build_dir ~/tmp/test-build --html\n```\nwhich will build HTML files in `~/tmp/test-build`. You can then inspect those files in your browser.\n\n`doc-builder` can also automatically convert some of the documentation guides or tutorials into notebooks. This requires two steps:\n- add `[[open-in-colab]]` in the tutorial for which you want to build a notebook\n- add `--notebook_dir {path_to_notebook_folder}` to the build command.\n\n## Templates for GitHub Actions\n\n`doc-builder` provides templates for GitHub Actions, so you can build your documentation with every pull request, push to some branch etc. To use them in your project, simply create the following three files in the `.github/workflows/` directory:\n\n* `build_main_documentation.yml`: responsible for building the docs for the `main` branch, releases etc.\n* `build_pr_documentation.yml`: responsible for building the docs on each PR\n* `delete_doc_comment.yml`: responsible for removing the comments from the `HuggingFaceDocBuilderDev` bot that provides a URL to the PR docs.\n\nWithin each workflow, the main thing to include is a pointer from the `uses` field to the corresponding workflow in `doc-builder`. For example, this is what the PR workflow looks like in the `datasets` library:\n\n```yaml\nname: Build PR Documentation\n\non:\n  pull_request:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    uses: huggingface/doc-builder/.github/workflows/build_pr_documentation.yml@main # Runs this doc-builder workflow\n    with:\n      commit_sha: ${{ github.event.pull_request.head.sha }}\n      pr_number: ${{ github.event.number }}\n      package: datasets # Replace this with your package name\n```\n\nNote the use of special arguments like `pr_number` and `package` under the `with` field. You can find the various options by inspecting each of the `doc-builder` [workflow files](https://github.com/huggingface/doc-builder/tree/main/.github/workflows).\n\n### Enabling multilingual documentation\n\n`doc-builder` can also convert documentation that's been translated from the English source into one or more languages. To enable the conversion, the documentation directories should be structured as follows:\n\n```\ndoc_folder\n├── en\n│   ├── _toctree.yml\n│   ...\n└── es\n    ├── _toctree.yml\n    ...\n```\n\nNote that each language directory has it's own table of contents file `_toctree.yml` and that all languages are arranged under a single `doc_folder` directory - see the [`course`](https://github.com/huggingface/course/tree/main/chapters) repo for an example. You can then build the individual language subsets as follows:\n\n```bash\ndoc-builder {package_name} {path_to_docs} --build_dir {build_dir} --language {lang_id}\n```\n\nTo automatically build the documentation for all languages via the GitHub Actions templates, simply provide the `languages` argument to your workflow, with a space-separated list of the languages you wish to build, e.g. `languages: en es`.\n\n\n## Writing documentation for Hugging Face libraries\n\n`doc-builder` expects Markdown so you should write any new documentation in `\".mdx\"` files for tutorials, guides, API documentations. For docstrings, we follow the [Google format](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html) with the main difference that you should use Markdown instead of restructured text (hopefully, that will be easier!)\n\nValues that should be put in `code` should either be surrounded by backticks: \\`like so\\`. Note that argument names\nand objects like True, None or any strings should usually be put in `code`.\n\nWhen mentioning a class, function or method, it is recommended to use the following syntax for internal links so that our tool\nautomarically adds a link to its documentation: \\[\\`XXXClass\\`\\] or \\[\\`function\\`\\]. This requires the class or \nfunction to be in the main package.\n\nIf you want to create a link to some internal class or function, you need to\nprovide its path. For instance, in the Transformers documentation \\[\\`file_utils.ModelOutput\\`\\] will create a link to the documnetation of `ModelOutput`. This link will have `file_utils.ModelOutput` in the description. To get rid of the path and only keep the name of the object you are\nlinking to in the description, add a ~: \\[\\`~file_utils.ModelOutput\\`\\] will generate a link with `ModelOutput` in the description.\n\nThe same works for methods so you can either use \\[\\`XXXClass.method\\`\\] or \\[~\\`XXXClass.method\\`\\].\n\nMulti-line code blocks can be useful for displaying examples. They are done between two lines of three backticks as usual in Markdown:\n\n````\n```\n# first line of code\n# second line\n# etc\n```\n````\n\nWe follow the [doctest](https://docs.python.org/3/library/doctest.html) syntax for the examples to automatically test\nthe results stay consistent with the library.\n\nTo write a block that you'd like to see highlighted as a note or warning, place your content between the following\nmarkers:\n\n```\n<Tip>\n\nWrite your note here\n\n</Tip>\n```\n\nFor warnings, change the introduction to `<Tip warning={true}>`.\n\nIf your documentation has a block that is framework-dependent (PyTorch vs TensorFlow vs Flax), you can use the\nfollowing syntax:\n\n```\n<frameworkcontent>\n<pt>\nPyTorch content goes here\n</pt>\n<tf>\nTensorFlow content goes here\n</tf>\n<flax>\nFlax content goes here\n</flax>\n</frameworkcontent>\n```\n\nNote that all frameworks are optional (you can write a PyTorch-only block for instance) and the order does not matter.\n\nAnchor links for markdown headings are generated automatically (with the following rule: 1. lowercase, 2. replace space with dash `-`, 3. strip [^a-z0-9-]):\n```\n## My awesome section\n// the anchor link is: `my-awesome-section`\n```\nMoreover, there is a way to customize the anchor link. Example:\n```\n## My awesome section[[some-section]]\n// the anchor link is: `some-section`\n```\n\n### Writing API documentation\n\nTo show the full documentation of any object of the library you are documenting, use the `[[autodoc]]` marker:\n\n```\n[[autodoc]] SomeObject\n```\n\nIf the object is a class, this will include every public method of it that is documented. If for some reason you wish for a method\nnot to be displayed in the documentation, you can do so by specifying which methods should be in the docs, here is an example:\n\n```\n[[autodoc]] XXXTokenizer\n    - build_inputs_with_special_tokens\n    - get_special_tokens_mask\n    - create_token_type_ids_from_sequences\n    - save_vocabulary\n```\n\nIf you just want to add a method that is not documented (for instance magic method like `__call__` are not documented\nby default) you can put the list of methods to add in a list that contains `all`:\n\n```\n## XXXTokenizer\n\n[[autodoc]] XXXTokenizer\n    - all\n    - __call__\n```\n\nYou can create a code-block by referencing a file excerpt with `<literalinclude>` (sphinx-inspired) syntax. \nThere should be json between `<literalinclude>` open & close tags.\n```\n<literalinclude>\n{\"path\": \"./data/convert_literalinclude_dummy.txt\", # relative path\n\"language\": \"python\", # defaults to \" (empty str)\n\"start-after\": \"START python_import\",  # defaults to start of file\n\"end-before\": \"END python_import\",  # defaults to end of file\n\"dedent\": 7 # defaults to 0\n}\n</literalinclude>\n```\n\n### Writing source documentation\n\nArguments of a function/class/method should be defined with the `Args:` (or `Arguments:` or `Parameters:`) prefix, followed by a line return and\nan indentation. The argument should be followed by its type, with its shape if it is a tensor, a colon and its\ndescription:\n\n```\n    Args:\n        n_layers (`int`): The number of layers of the model.\n```\n\nIf the description is too long to fit in one line, another indentation is necessary before writing the description\nafter th argument.\n\nHere's an example showcasing everything so far:\n\n```\n    Args:\n        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):\n            Indices of input sequence tokens in the vocabulary.\n\n            Indices can be obtained using [`AlbertTokenizer`]. See [`~PreTrainedTokenizer.encode`] and\n            [`~PreTrainedTokenizer.__call__`] for details.\n\n            [What are input IDs?](../glossary#input-ids)\n```\n\nYou can check the full example it comes from [here](https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/bert/modeling_bert.py#L794-L841)\n\nIf a class is similar to that of a dataclass but the parameters do not align to the available attributes of the class, such as in the below example, `Attributes` instance should be rewritten as `**Attributes**` in order to have the documentation properly render these. Otherwise it will assume that `Attributes` is synonymous to `Parameters`.\n\n```diff\n  class SomeClass:\n      \"\"\"\n      Docstring\n-     Attributes:\n+     **Attributes**:\n          - **attr_a** (`type_a`) -- Doc a\n          - **attr_b** (`type_b`) -- Doc b\n      \"\"\"\n      def __init__(self, param_a, param_b):\n          ...\n```\n\nFor optional arguments or arguments with defaults we follow the following syntax. Imagine we have a function with the\nfollowing signature:\n\n```\ndef my_function(x: str = None, a: float = 1):\n```\n\nthen its documentation should look like this:\n\n```\n    Args:\n        x (`str`, *optional*):\n            This argument controls ...\n        a (`float`, *optional*, defaults to 1):\n            This argument is used to ...\n```\n\nNote that we always omit the \"defaults to \\`None\\`\" when None is the default for any argument. Also note that even\nif the first line describing your argument type and its default gets long, you can't break it on several lines. You can\nhowever write as many lines as you want in the indented description (see the example above with `input_ids`).\n\nIf your argument has for type a class defined in the package, you can use the syntax we saw earlier to link to its\ndocumentation:\n\n```\n    Args:\n         config ([`BertConfig`]):\n            Model configuration class with all the parameters of the model.\n\n            Initializing with a config file does not load the weights associated with the model, only the\n            configuration. Check out the [`~PreTrainedModel.from_pretrained`] method to load the model weights.\n```\n\nThe return block should be introduced with the `Returns:` prefix, followed by a line return and an indentation.\nThe first line should be the type of the return, followed by a line return. No need to indent further for the elements\nbuilding the return.\n\nHere's an example for a single value return:\n\n```\n    Returns:\n        `List[int]`: A list of integers in the range [0, 1] --- 1 for a special token, 0 for a sequence token.\n```\n\nHere's an example for tuple return, comprising several objects:\n\n```\n    Returns:\n        `tuple(torch.FloatTensor)` comprising various elements depending on the configuration ([`BertConfig`]) and inputs:\n        - ** loss** (*optional*, returned when `masked_lm_labels` is provided) `torch.FloatTensor` of shape `(1,)` --\n          Total loss as the sum of the masked language modeling loss and the next sequence prediction (classification) loss.\n        - **prediction_scores** (`torch.FloatTensor` of shape `(batch_size, sequence_length, config.vocab_size)`) --\n          Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).\n```\n\nThere are directives for `Added`, `Changed`, & `Deprecated`.\nHere's an example:\n```\n    Args:\n        cache_dir (`str`, *optional*): Directory to cache data.\n        config_name (`str`, *optional*): Name of the dataset configuration.\n            It affects the data generated on disk: different configurations will have their own subdirectories and\n            versions.\n            If not provided, the default configuration is used (if it exists).\n\n            <Added version=\"2.3.0\">\n\n            `name` was renamed to `config_name`.\n\n            </Added>\n        name (`str`): Configuration name for the dataset.\n\n            <Deprecated version=\"2.3.0\">\n\n            Use `config_name` instead.\n\n            </Deprecated>\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/huggingface/doc-builder",
    "keywords": "doc documentation doc-builder huggingface hugging face",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hf-doc-builder",
    "package_url": "https://pypi.org/project/hf-doc-builder/",
    "platform": null,
    "project_url": "https://pypi.org/project/hf-doc-builder/",
    "project_urls": {
      "Homepage": "https://github.com/huggingface/doc-builder"
    },
    "release_url": "https://pypi.org/project/hf-doc-builder/0.4.0/",
    "requires_dist": [
      "GitPython",
      "tqdm",
      "pyyaml",
      "packaging",
      "nbformat",
      "gql[requests]",
      "requests",
      "pytest ; extra == 'all'",
      "pytest-xdist ; extra == 'all'",
      "torch ; extra == 'all'",
      "transformers ; extra == 'all'",
      "tokenizers ; extra == 'all'",
      "black (~=22.0) ; extra == 'all'",
      "isort (>=5.5.4) ; extra == 'all'",
      "flake8 (>=3.8.3) ; extra == 'all'",
      "pytest ; extra == 'dev'",
      "pytest-xdist ; extra == 'dev'",
      "torch ; extra == 'dev'",
      "transformers ; extra == 'dev'",
      "tokenizers ; extra == 'dev'",
      "black (~=22.0) ; extra == 'dev'",
      "isort (>=5.5.4) ; extra == 'dev'",
      "flake8 (>=3.8.3) ; extra == 'dev'",
      "black (~=22.0) ; extra == 'quality'",
      "isort (>=5.5.4) ; extra == 'quality'",
      "flake8 (>=3.8.3) ; extra == 'quality'",
      "pytest ; extra == 'testing'",
      "pytest-xdist ; extra == 'testing'",
      "torch ; extra == 'testing'",
      "transformers ; extra == 'testing'",
      "tokenizers ; extra == 'testing'",
      "transformers[dev] ; extra == 'transformers'"
    ],
    "requires_python": "",
    "summary": "Doc building utility",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14730157,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a474aad5fa33f33ac817baa158f8be58de3d4563bb1fcecfc49e4b95e0c6164",
          "md5": "4a388f2588806ccb02a69b16aebdf254",
          "sha256": "aaad83c1c6f7049ac8489e389b425658d515dec03d1717c7c87b0a4c4d3b7b45"
        },
        "downloads": -1,
        "filename": "hf_doc_builder-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a388f2588806ccb02a69b16aebdf254",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45432,
        "upload_time": "2022-03-15T15:09:28",
        "upload_time_iso_8601": "2022-03-15T15:09:28.393872Z",
        "url": "https://files.pythonhosted.org/packages/4a/47/4aad5fa33f33ac817baa158f8be58de3d4563bb1fcecfc49e4b95e0c6164/hf_doc_builder-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37c6905331fc1d9e664d5fa9d2016dd9bfc4eed4b38c3d767b839b9414c2a511",
          "md5": "a6030a0c8b38b174a96347e8b5ca9b4a",
          "sha256": "dc22db14446f2ec5923c63713c85b51eae1b460a615fd5df19efe8200c1514cd"
        },
        "downloads": -1,
        "filename": "hf_doc_builder-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6030a0c8b38b174a96347e8b5ca9b4a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 49192,
        "upload_time": "2022-03-16T19:34:07",
        "upload_time_iso_8601": "2022-03-16T19:34:07.864216Z",
        "url": "https://files.pythonhosted.org/packages/37/c6/905331fc1d9e664d5fa9d2016dd9bfc4eed4b38c3d767b839b9414c2a511/hf_doc_builder-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c42ec9c4cd624e88b75b1342bf0f649a73712e8458a7548b491c8adce8f11c9e",
          "md5": "278ec89adf3e1ff8af1e4a70ccb084ad",
          "sha256": "0b14a9ef7b35b6a92243c8f1466b34fda8dd695efb3b057e324398f55d4c3c77"
        },
        "downloads": -1,
        "filename": "hf-doc-builder-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "278ec89adf3e1ff8af1e4a70ccb084ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 96038,
        "upload_time": "2022-03-16T19:34:09",
        "upload_time_iso_8601": "2022-03-16T19:34:09.313557Z",
        "url": "https://files.pythonhosted.org/packages/c4/2e/c9c4cd624e88b75b1342bf0f649a73712e8458a7548b491c8adce8f11c9e/hf-doc-builder-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87cb8c81f0acc4909085fb50fdb7e42cb0fc3c21a04b0371fd4e9cb72f43bf16",
          "md5": "ed0d356f7e6a66c450963853412c7ae0",
          "sha256": "e067723d8ec3731ea33ae0298f308e1ef9ef4c215eb0bf258e58d5dbb1ec9d7a"
        },
        "downloads": -1,
        "filename": "hf_doc_builder-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed0d356f7e6a66c450963853412c7ae0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 53300,
        "upload_time": "2022-03-25T17:58:39",
        "upload_time_iso_8601": "2022-03-25T17:58:39.997982Z",
        "url": "https://files.pythonhosted.org/packages/87/cb/8c81f0acc4909085fb50fdb7e42cb0fc3c21a04b0371fd4e9cb72f43bf16/hf_doc_builder-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d41dc24ae10b44e99b6e22f2c0803450aa72d90199980e250c2fdd42d518f65a",
          "md5": "c239b3c3c18a43b2071eb417c3f32933",
          "sha256": "04bd1f5f69079f6a2f1554db804bca776bf472c8a86678ed0d867cf7743d84ea"
        },
        "downloads": -1,
        "filename": "hf-doc-builder-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c239b3c3c18a43b2071eb417c3f32933",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 100128,
        "upload_time": "2022-03-25T17:58:41",
        "upload_time_iso_8601": "2022-03-25T17:58:41.426809Z",
        "url": "https://files.pythonhosted.org/packages/d4/1d/c24ae10b44e99b6e22f2c0803450aa72d90199980e250c2fdd42d518f65a/hf-doc-builder-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3f1f3b05dedcc053225885d9d631c5c39b28ad67eda63627bc310025e661e47",
          "md5": "81cd5f71edbef163d2b78f9ba088a7d9",
          "sha256": "d6a91d3e248d6b227a5314d146d8a4c421f1cd0d411216d13c7461703ca9263c"
        },
        "downloads": -1,
        "filename": "hf_doc_builder-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81cd5f71edbef163d2b78f9ba088a7d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56280,
        "upload_time": "2022-04-29T21:16:25",
        "upload_time_iso_8601": "2022-04-29T21:16:25.108754Z",
        "url": "https://files.pythonhosted.org/packages/c3/f1/f3b05dedcc053225885d9d631c5c39b28ad67eda63627bc310025e661e47/hf_doc_builder-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec135cc0cf6ac2ceda4e62e364ea98ba310d2fec2a903e46b08778b1bfb664c6",
          "md5": "075b226b8f25bd86df7cb1275855868f",
          "sha256": "d9a632c8afd01debc24e47f215505a4ec5bbee86f8ec04781b32b3d54d2de266"
        },
        "downloads": -1,
        "filename": "hf-doc-builder-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "075b226b8f25bd86df7cb1275855868f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 111097,
        "upload_time": "2022-04-29T21:16:26",
        "upload_time_iso_8601": "2022-04-29T21:16:26.851049Z",
        "url": "https://files.pythonhosted.org/packages/ec/13/5cc0cf6ac2ceda4e62e364ea98ba310d2fec2a903e46b08778b1bfb664c6/hf-doc-builder-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d5725c743c395a7297f7c6c744a91d5f179137d646b07a6f7f2888c4d3e3a41",
          "md5": "40dd0cc3fc63720fae4db78de0753510",
          "sha256": "5eee272203d502da8e9dbd1a1ac4139c6d5c06dcef9f2e494e09cc9b959837ba"
        },
        "downloads": -1,
        "filename": "hf_doc_builder-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40dd0cc3fc63720fae4db78de0753510",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 63949,
        "upload_time": "2022-08-11T14:27:21",
        "upload_time_iso_8601": "2022-08-11T14:27:21.567823Z",
        "url": "https://files.pythonhosted.org/packages/2d/57/25c743c395a7297f7c6c744a91d5f179137d646b07a6f7f2888c4d3e3a41/hf_doc_builder-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f19b84effbdd246871064d8708c0d2c8a5dcfb5c9cad4ffcc233747b8b48d6d6",
          "md5": "7fdfc7065feba253cb66f0c70fc87de2",
          "sha256": "23c0277c86bd20ae655c09fca07273caf253e7554d1459a72885a1861621548d"
        },
        "downloads": -1,
        "filename": "hf-doc-builder-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7fdfc7065feba253cb66f0c70fc87de2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 118024,
        "upload_time": "2022-08-11T14:27:23",
        "upload_time_iso_8601": "2022-08-11T14:27:23.578161Z",
        "url": "https://files.pythonhosted.org/packages/f1/9b/84effbdd246871064d8708c0d2c8a5dcfb5c9cad4ffcc233747b8b48d6d6/hf-doc-builder-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d5725c743c395a7297f7c6c744a91d5f179137d646b07a6f7f2888c4d3e3a41",
        "md5": "40dd0cc3fc63720fae4db78de0753510",
        "sha256": "5eee272203d502da8e9dbd1a1ac4139c6d5c06dcef9f2e494e09cc9b959837ba"
      },
      "downloads": -1,
      "filename": "hf_doc_builder-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "40dd0cc3fc63720fae4db78de0753510",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 63949,
      "upload_time": "2022-08-11T14:27:21",
      "upload_time_iso_8601": "2022-08-11T14:27:21.567823Z",
      "url": "https://files.pythonhosted.org/packages/2d/57/25c743c395a7297f7c6c744a91d5f179137d646b07a6f7f2888c4d3e3a41/hf_doc_builder-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f19b84effbdd246871064d8708c0d2c8a5dcfb5c9cad4ffcc233747b8b48d6d6",
        "md5": "7fdfc7065feba253cb66f0c70fc87de2",
        "sha256": "23c0277c86bd20ae655c09fca07273caf253e7554d1459a72885a1861621548d"
      },
      "downloads": -1,
      "filename": "hf-doc-builder-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7fdfc7065feba253cb66f0c70fc87de2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 118024,
      "upload_time": "2022-08-11T14:27:23",
      "upload_time_iso_8601": "2022-08-11T14:27:23.578161Z",
      "url": "https://files.pythonhosted.org/packages/f1/9b/84effbdd246871064d8708c0d2c8a5dcfb5c9cad4ffcc233747b8b48d6d6/hf-doc-builder-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}