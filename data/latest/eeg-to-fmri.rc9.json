{
  "info": {
    "author": "",
    "author_email": "David Calhas <eeg_to_fmri@outlook.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# From EEG to fMRI\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\n[![Code: Documentation](https://img.shields.io/badge/code-documentation-green)](https://dcalhas.github.io/eeg_to_fmri/DOCUMENTATION.html)\n\n## Setup\n\nIdeally, your machine has a GPU and is running Linux.\n\nFirst of all, please install [anaconda](https://www.anaconda.com/) at ```$HOME/anaconda3/```. To setup the environment for this repository, please run the following commands:\n\n```shell\ngit clone git@github.com:DCalhas/eeg_to_fmri.git\ncd eeg_to_fmri\n```\n\nDownload [cudnn](https://developer.nvidia.com/cudnn):\n\n```shell\nwget https://developer.download.nvidia.com/compute/redist/cudnn/v8.0.1/cudnn-11.0-linux-x64-v8.0.1.13.tgz\n```\n\nRun the configuration file:\n\n```shell\n./config.sh\n```\n\nPlease make sure to set the path to the datasets directory correclty. This path is stored in an environment variable, so every time you activate the environment, the variable is set and used in the code as os.environ['EEG_FMRI_DATASETS'].\n\n## How do I test this research on my dataset?\n\nTesting a new dataset on this framework should not be too difficult. Do the following (in the order you feel most comfortable):\n- define the number of individuals, **n_individuals_NEW**, that your dataset contains, this can be done in the [data_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/data_utils.py#L32) file;\n- additionally you may define new variables in the [data_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/data_utils.py) file, corresponding to **n_individuals_train_NEW** and **n_individuals_test_NEW**, which refer to the number of individuals used for the training and testing set, respectively;\n- define **dataset_NEW** variable in the [fmri_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/eeg_utils.py#L47) and [eeg_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/fmri_utils.py#L43) files. At this point you might be thinking: \"Why is this guy defining the same variable in two different places?\", well he ain't too smart tbh and he lazy af;\n- define the frequency, **fs_NEW**, at which the EEG recording was sampled, this can be done in the [eeg_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/eeg_utils.py#L38) file;\n- define the Time Response, **TR_NEW**, at which each fMRI volume was sampled, this can be done in the [fmri_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/fmri_utils.py#L27);\n- additionally, you might want to define the list of channels (if your EEG electrode setup follows the [10-20 system](https://en.wikipedia.org/wiki/10%E2%80%9320_system_(EEG))), to retrieve more advanced analysis, such as EEG electrode relevance. This should be done in the beginning of the [eeg_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/eeg_utils.py) file;\n- last, but no least, comes the time to implement the two functions that read the EEG and fMRI recordings, corresponding to **get_eeg_instance_NEW**, at [eeg_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/eeg_utils.py#L171), and **get_indviduals_path_NEW**, at [fmri_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/fmri_utils.py#L299);\n\nIn addition to reading the rest of this section, which helps you setting up your data, you also have available two blog posts:\n\n- [EEG recording to fMRI volume](https://dcalhas.github.io/eeg_to_fmri/blog/EEG_fMRI.html): goes over an example on how to operate with a simultaneous EEG and fMRI dataset and creates a model that synthesizes fMRI from EEG;\n- [Classification on EEG only datasets](https://dcalhas.github.io/eeg_to_fmri/blog/Sinusoid_separation.html): this one picks up on the previous blog post and uses the pretrained model (that synthesizes fMRI from EEG), and shows you how to create an fMRI view of an EEG instance and classify it.\n\n### Dataset structure\n\nIn this example, we assume your dataset has the following structure (if it has a different structure please interpret the code provided in the next two sections and adapt it):\n\n```\nNEW\n|\t.\n|\t..\n|\tREADME.md\n└───────EEG\n|\t└───────sub-001\n|\t|\t|\tFILE.eeg\n|\t|\t|\tFILE.vhdr\n|\t|\t|\tFILE.vmrk\n|\t└───────sub-002\n|\t...\n└───────BOLD\n\t└───────sub-001\n\t|\t|\tFILE.anat\n\t|\t|\tFILE.nii.gz\n\t└───────sub-002\n\t...\n```\n\n#### Implementing the get_eeg_instance_NEW function\n\nIdeally you want this function to return an [mne.io.Raw](https://mne.tools/stable/generated/mne.io.Raw.html) object, that contains the EEG data. In this \"tutorial\" only this is the only supported option, however do it as you like most.\n\nThe inputs of this function are:\n- *individual* - int, the individual one wants to retrieve. This function is being executed inside a for loop, ```for individual in range(getattr(data_utils, \"n_individuals_\"+dataset)```, that goes through the range of individuals, **n_individuals_NEW**, you set in the [data_utils.py](https://github.com/DCalhas/eeg_to_fmri/blob/0c634384faa79c7f7289aa7ec1af9b04dac92ebc/src/utils/data_utils.py#L32) file;\n- *path_eeg* - str, the path where your dataset is located, e.g. ```path_eeg=os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/EEG/\"```, this may be an optional argument set as ```path_eeg=os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/EEG/\"```;\n- *task* - str, can be set to None if it does not apply to your dataset;\n\nSo given these inputs one can start by listing the directories of your dataset (now this can depend on how you organized the data, we assume that each individual has a folder dedicated to itself and the sorted names of the folders have the individual's folders first and after the auxiliary description ones, e.g. \"info\" for information about the dataset):\n\n\n```python\ndef get_eeg_instance_NEW(individual, path_eeg=os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/EEG/\", task=None,):\n\tindividuals = sorted([f for f in listdir(path_eeg) if isdir(join(path_eeg, f))])\n\n\tindividual = individuals[individual]\n\n\tpath=path_eeg+individual+\"/\"\n\tprint(path)#for debug purposes only, please remove this line after function is implemented\n```\nThe output of the last print (if ```individuals=[\"sub-001\", \"sub-002\", ..., \"sub-\"+data_utils.n_individuals_NEW, ...]```):\n```bash\n/tmp/\"+dataset_NEW+\"/EEG/sub-001/\n```\n\nInside the path described above should be a set of files needed to load a eeg brainvision object. If you sort these files, likely \nthe ```.vhdr``` is the second option:\n\n```python\n\tbrainvision_files = sorted([f for f in listdir(path) if isfile(join(path, f))])\n\tvhdr_file = brainvision_files[1]\n```\n\nNow one only needs to return the Brainvision object:\n\n```python\n\tcomplete_path = path + vhdr_file\n\treturn mne.io.read_raw_brainvision(complete_path, preload=True, verbose=0)\n```\n\nIn the end **get_eeg_instance_NEW** is:\n\n```python\ndef get_eeg_instance_NEW(individual, path_eeg=os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/\", task=None,):\n\tindividuals = sorted([f for f in listdir(path_eeg) if isdir(join(path_eeg, f))])\n\n\tindividual = individuals[individual]\n\n\tpath=path_eeg+individual+\"/\"\n\t\n\tbrainvision_files = sorted([f for f in listdir(path) if isfile(join(path, f))])\n\tvhdr_file = brainvision_files[1]\n\n\tcomplete_path = path + vhdr_file\n\treturn mne.io.read_raw_brainvision(complete_path, preload=True, verbose=0)\n```\n\n#### Implementing the get_individuals_path_NEW function\n\nNext step is to implement the function that retrieves the fMRI recordings of all individuals. We assume each individual's recording is save in an [.nii.gz](http://justsolve.archiveteam.org/wiki/NII) file.\n\nThe inputs of this function are:\n- *path_fmri* - str, absolute path that specifies the location of your dataset, e.g. ```path_fmri=os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/```, this may be an optional argument set as ```path_fmri=os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/\"```\n- *resolution_factor* - float, this is an optional argument that might not be used, please refer to the [functions](https://github.com/DCalhas/eeg_to_fmri/blob/1df6f6e353952ca6b9643938e1558ecf0697d435/src/utils/fmri_utils.py#L110) where this argument is used to grasp its function. WARNING: this variable is deprecated;\n- *number_individuals* - int, this variables specifies the number of individuals in this dataset, it is specified in the function call as ```number_individuals=getattr(data_utils, \"number_individuals_\"+dataset)```;\n\nGiven the absolute path of the data and the number of individuals one wants to retrieve, we can now start implementing the code. Let's start by listing the individuals and saving it in a list:\n\n```python\ndef get_individuals_paths_NEW(path_fmri=os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/\", resolution_factor=None, number_individuals=None):\n\tfmri_individuals = []#this will be the output of this function\n\t\n\tdir_individuals = sorted([f for f in listdir(path_fmri) if isdir(join(path_fmri, f)) and \"sub\" in path_fmri+f])\n\tprint(dir_individuals)\n```\n\n```bash\n[os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/sub-001\", os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/sub-002\", ..., os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/sub-\"+data_utils.n_individuals_NEW, ...]\n```\n\nNow we can move on to start the loop, where one iterates over each individuals' directory and loads the recording:\n\n```\n\tfor i in range(number_individuals):\n\t\ttask_file=sorted([f for f in listdir(path_fmri+dir_individuals[i]) if isfile(path_fmri+dir_individuals[i]+f) and task in path_fmri+dir_individuals[i]+f])\n\n\t\tprint(task_file)\n```\n\nWe assume that inside the individuals' folder, you will have an \".nii.gz\" file and an additional \".anat\" file. When sorted this list will have the \".nii.gz\" file in the second place:\n\n```\n[os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/sub-001/FILE.anat\", os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/sub-001/FILE.nii.gz\"]\n```\n\nTherefore we pick the second file and use the [nilearn](https://nilearn.github.io/modules/generated/nilearn.image.load_img.html) library to load the image:\n\n```python\n\t\tfile_path= path_fmri+dir_individuals[i]+task_file[1]\n\t\t\n\t\tfmri_individuals += [image.load_img(file_path)]\n\n\treturn fmri_individuals\n```\n\nIn the end, this function is as:\n\n```python\ndef get_individuals_paths_NEW(path_fmri=os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/\", resolution_factor=None, number_individuals=None):\n\tfmri_individuals = []#this will be the output of this function\n\t\n\tdir_individuals = sorted([f for f in listdir(path_fmri) if isdir(join(path_fmri, f)) and \"sub\" in path_fmri+f])\n\t\n\tfor i in range(number_individuals):\n\t\ttask_file=sorted([f for f in listdir(path_fmri+dir_individuals[i]) if isfile(path_fmri+dir_individuals[i]+f) and task in path_fmri+dir_individuals[i]+f])\n\n\t\tfile_path= path_fmri+dir_individuals[i]+task_file[1]\n\t\t\n\t\tfmri_individuals += [image.load_img(file_path)]\n\n\treturn fmri_individuals\n```\n\n##### My dataset has fMRI volumes with higher resolutions than accepted by this work. What should I do?\n\nUnfortunately, the model only accepts:\n- EEG instances with 64 channels and a total of 134 frequency resolutions in a specified window of **TR_\\***;\n- fMRI instances with 64x64x30 resolution.\n\nFor the EEG, we do not have a specified studied solution, just pray that it works.\n\nFor the fMRI, we found that mutating the resolution via Discrete Cosine Transform (DCT) spectral domain is a reasonable work around. To do this you only need to add the specified lines to the **get_individuals_paths_NEW** and a *downsample* and *downsample_shape* optional arguments to the function call:\n\n```python\ndef get_individuals_paths_NEW(path_fmri=os.environ['EEG_FMRI_DATASETS']+dataset_NEW+\"/BOLD/\", resolution_factor=None, number_individuals=None, downsample=True, downsample_shape=(64,64,30)):\n\t\n\t...\n\n\tif(downsample):\n\t\timport sys\n\t\tsys.path.append(\"..\")\n\t\tfrom layers import fft\n\t\tdct=None\n\t\tidct=None\n\n\t...\n```\n\nImport the modules to perform the DCT and either add or remove resolutions to fit your data to the desired shapes. Then when you load the image, you should mutate it as:\n\n```python\n\t\n\t\t...\n\t\tfmri_individuals += [image.load_img(file_path)]\n\n\t\tif(downsample):\n\t\t\timg = np.swapaxes(np.swapaxes(np.swapaxes(fmri_individuals[-1].get_fdata(), 0, 3), 1,2), 1,3)\n\t\t\tif(dct is None and idct is None):\n\t\t\t\tdct = fft.DCT3D(*img.shape[1:])\n\t\t\t\tidct = fft.iDCT3D(*downsample_shape)\n\t\t\tfmri_individuals[-1] = image.new_img_like(fmri_individuals[-1], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnp.swapaxes(np.swapaxes(np.swapaxes(idct(dct(img).numpy()[:, :downsample_shape[0], :downsample_shape[1], :downsample_shape[2]]).numpy(), 0, 3), 0,2), 0,1))\n\t\treturn fmri_individuals\n```\n\nAfter this, you should be set to run the code and retrieve the results you desire.\n\n### Run the code and retrieve results\n\nNow you just need to run the [main.py](https://github.com/DCalhas/eeg_to_fmri/blob/master/src/main.py) file with your dataset identifier given as an argument. Please refer to the [documentation](https://github.com/DCalhas/eeg_to_fmri/blob/master/DOCUMENTATION.md), where you will find what you need to give as arguments, an example call is (open shell):\n\n```shell\ncd eeg_to_fmri/src\nconda activate eeg_fmri\nmkdir /tmp/eeg_to_fmri\nmkdir /tmp/eeg_to_fmri/metrics\npython main.py metrics NEW -na_path_eeg ../na_models_eeg/na_specification_2 -na_path_fmri ../na_models_fmri/na_specification_2 -save_metrics -metrics_path /tmp/eeg_to_fmri/metrics\n```\n\n## Blog posts\n\nThis repository goes along with blog posts done during my PhD course:\n\n- [EEG recording to fMRI volume](https://dcalhas.github.io/eeg_to_fmri/blog/EEG_fMRI.html);\n- [Classification on EEG only datasets](https://dcalhas.github.io/eeg_to_fmri/blog/Sinusoid_separation.html);\n\n## Acknowledgements\n\nWe would like to thank everyone at [INESC-ID](https://www.inesc-id.pt/) that accompanied the journey throughout my PhD. This work was supported by national funds through Fundação para a Ciência e Tecnologia ([FCT](https://www.fct.pt/index.phtml.pt)), under the Ph.D. Grant SFRH/BD/5762/2020 to David Calhas and INESC-ID pluriannual UIDB/50021/2020.\n\n## Cite this repository\n\nIf you use this software in your work, please cite it using the following metadata:\n\n```\n@article{calhas2022eeg,\n  title={EEG to fMRI Synthesis Benefits from Attentional Graphs of Electrode Relationships},\n  author={Calhas, David and Henriques, Rui},\n  journal={arXiv preprint arXiv:2203.03481},\n  year={2022}\n}\n```\n\n\n## License\n\n[MIT License](https://choosealicense.com/licenses/mit/)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "eeg,fmri,synthesis,deep learning,learning,machine learning,computer vision",
    "license": "MIT License  Copyright (c) [year] [fullname]  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eeg-to-fmri",
    "package_url": "https://pypi.org/project/eeg-to-fmri/",
    "platform": null,
    "project_url": "https://pypi.org/project/eeg-to-fmri/",
    "project_urls": {
      "home": "https://dcalhas.github.io/eeg_to_fmri/",
      "repository": "https://github.com/eeg-to-fmri/eeg-to-fmri"
    },
    "release_url": "https://pypi.org/project/eeg-to-fmri/0.0.9/",
    "requires_dist": [
      "tensorflow (==2.9.0)",
      "matplotlib (==3.5.3)",
      "mne (==0.23.4)",
      "nilearn (==0.7.0)",
      "tensorflow-probability (==0.12.2)",
      "tensorflow-determinism (==0.3.0)",
      "tensorflow-addons (==0.19.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "",
    "version": "0.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16228498,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6df9f2603c13214646deda5eeaa6cc0d0f8e8d1093ba5c4cc25171813202d2c",
          "md5": "443715e87cd204099e7acb55112d20ba",
          "sha256": "54254b5cf56ec2551e847d7525c05618172365e727f8617aaa3c6f063ab879c4"
        },
        "downloads": -1,
        "filename": "eeg_to_fmri-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "443715e87cd204099e7acb55112d20ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 96438,
        "upload_time": "2022-10-28T11:00:15",
        "upload_time_iso_8601": "2022-10-28T11:00:15.159589Z",
        "url": "https://files.pythonhosted.org/packages/a6/df/9f2603c13214646deda5eeaa6cc0d0f8e8d1093ba5c4cc25171813202d2c/eeg_to_fmri-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a4c6debd97e7aa4a6bcbf946663732319fbf6c874123479e1448f9c53b42d58",
          "md5": "7f1baf4041d113f9832214169fa64d94",
          "sha256": "03d714464a3792c4730d2402121e71b6df8856cb1a8154f362e9fed2c9c3bf15"
        },
        "downloads": -1,
        "filename": "eeg-to-fmri-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7f1baf4041d113f9832214169fa64d94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 89085,
        "upload_time": "2022-10-28T11:00:18",
        "upload_time_iso_8601": "2022-10-28T11:00:18.844648Z",
        "url": "https://files.pythonhosted.org/packages/9a/4c/6debd97e7aa4a6bcbf946663732319fbf6c874123479e1448f9c53b42d58/eeg-to-fmri-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0166e491520a9a5f54eb63aa5e567264dfbb4c77f7077b5405aea787141d206",
          "md5": "7aea2a97508f20d5e897efa2e39f0201",
          "sha256": "24742c7b3a061eff0ea289c776df147e13665898213868baa8a303d371d78ad6"
        },
        "downloads": -1,
        "filename": "eeg_to_fmri-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7aea2a97508f20d5e897efa2e39f0201",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 73757,
        "upload_time": "2022-11-03T16:10:53",
        "upload_time_iso_8601": "2022-11-03T16:10:53.685982Z",
        "url": "https://files.pythonhosted.org/packages/c0/16/6e491520a9a5f54eb63aa5e567264dfbb4c77f7077b5405aea787141d206/eeg_to_fmri-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d2d26425d50ad70d488f03480c69638291c1c2c2576ccacafa85a553676c448",
          "md5": "edb88aeba944a3db3745db28a16e679f",
          "sha256": "538a608fb27652fe04e15cfcbdfa6929eebe7485ef78d7ad39a15f98d00247f1"
        },
        "downloads": -1,
        "filename": "eeg-to-fmri-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "edb88aeba944a3db3745db28a16e679f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 68386,
        "upload_time": "2022-11-03T16:10:56",
        "upload_time_iso_8601": "2022-11-03T16:10:56.381352Z",
        "url": "https://files.pythonhosted.org/packages/2d/2d/26425d50ad70d488f03480c69638291c1c2c2576ccacafa85a553676c448/eeg-to-fmri-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d102a8e02ce62f87ad421b1e532fb30e09a43c924ddf754b97770a3fa2293c2",
          "md5": "4c9a6625fb402b414b69d00497263b52",
          "sha256": "98fd75f02d85ffff1409f8071ac7b7f186a875c87c65ea17c1f68d01a040d84b"
        },
        "downloads": -1,
        "filename": "eeg_to_fmri-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c9a6625fb402b414b69d00497263b52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 74088,
        "upload_time": "2022-11-24T09:02:04",
        "upload_time_iso_8601": "2022-11-24T09:02:04.654124Z",
        "url": "https://files.pythonhosted.org/packages/6d/10/2a8e02ce62f87ad421b1e532fb30e09a43c924ddf754b97770a3fa2293c2/eeg_to_fmri-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0d17fde30a0b81e293f5eb531024328b97bc757cb1c1fcf2a8b08cd32688784",
          "md5": "5ae0d1f62919bf408a3edd1458f8f824",
          "sha256": "77438cb2c37cfdcb85098b3e8dfd95cade77e405b829d4fef740e50118e46d60"
        },
        "downloads": -1,
        "filename": "eeg-to-fmri-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5ae0d1f62919bf408a3edd1458f8f824",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 68713,
        "upload_time": "2022-11-24T09:02:06",
        "upload_time_iso_8601": "2022-11-24T09:02:06.638872Z",
        "url": "https://files.pythonhosted.org/packages/d0/d1/7fde30a0b81e293f5eb531024328b97bc757cb1c1fcf2a8b08cd32688784/eeg-to-fmri-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acc5c09764b5db7d548cb6edfd1e112ac55caaa71925b35076cfee838c2f9094",
          "md5": "700b33f5faf4e580f5e7feefeacf5716",
          "sha256": "03ba442c095d172cd178bf68633ba387b5ce5319c96e50655ae5c1f115dff15c"
        },
        "downloads": -1,
        "filename": "eeg_to_fmri-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "700b33f5faf4e580f5e7feefeacf5716",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76455,
        "upload_time": "2022-12-16T10:56:35",
        "upload_time_iso_8601": "2022-12-16T10:56:35.480953Z",
        "url": "https://files.pythonhosted.org/packages/ac/c5/c09764b5db7d548cb6edfd1e112ac55caaa71925b35076cfee838c2f9094/eeg_to_fmri-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eec92e0151b9e6ed3bbaffc210c0078a6e394023f22e24b8690f483035fa8614",
          "md5": "309ed83018e69e57a8396b866c60f357",
          "sha256": "6eac204f59b70c91516af5ff1f9591923a5a8a24d035778dfda87ea72ed5476e"
        },
        "downloads": -1,
        "filename": "eeg-to-fmri-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "309ed83018e69e57a8396b866c60f357",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 70675,
        "upload_time": "2022-12-16T10:56:37",
        "upload_time_iso_8601": "2022-12-16T10:56:37.454672Z",
        "url": "https://files.pythonhosted.org/packages/ee/c9/2e0151b9e6ed3bbaffc210c0078a6e394023f22e24b8690f483035fa8614/eeg-to-fmri-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adf077f6075c8c1a6e6f4503381d64fdf147422b81735a52eb5cb8971a3b9701",
          "md5": "e910b4343cf9f4446fae361e92e9b77d",
          "sha256": "5a36a57b305e079b71622c172cfe580fd018538dcd03589bd4af40dd3c764a56"
        },
        "downloads": -1,
        "filename": "eeg_to_fmri-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e910b4343cf9f4446fae361e92e9b77d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76458,
        "upload_time": "2022-12-21T08:59:30",
        "upload_time_iso_8601": "2022-12-21T08:59:30.549323Z",
        "url": "https://files.pythonhosted.org/packages/ad/f0/77f6075c8c1a6e6f4503381d64fdf147422b81735a52eb5cb8971a3b9701/eeg_to_fmri-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "562ab70499c8b77295ec8e3fd04244553ec642314c3089fda3352b2f7dcf9eeb",
          "md5": "f8245af80197c97ebe96396dc6a4f428",
          "sha256": "2b36babe6aa946501943f9d92a10a8d6a1ac3c1ab362980e74e07227d4444584"
        },
        "downloads": -1,
        "filename": "eeg-to-fmri-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f8245af80197c97ebe96396dc6a4f428",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 70679,
        "upload_time": "2022-12-21T08:59:32",
        "upload_time_iso_8601": "2022-12-21T08:59:32.721995Z",
        "url": "https://files.pythonhosted.org/packages/56/2a/b70499c8b77295ec8e3fd04244553ec642314c3089fda3352b2f7dcf9eeb/eeg-to-fmri-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70df30ca7b31a4d8dc4d3192126e2887dce24d603a8cf53fc3badc650e4676c2",
          "md5": "15a8c0b80bfd6ec43aa62efdcb35e2f0",
          "sha256": "410b4d24489d0b59524097ca00022c32b216350de5d928c60e071cab4cb84319"
        },
        "downloads": -1,
        "filename": "eeg_to_fmri-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15a8c0b80bfd6ec43aa62efdcb35e2f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76517,
        "upload_time": "2022-12-23T10:40:45",
        "upload_time_iso_8601": "2022-12-23T10:40:45.592801Z",
        "url": "https://files.pythonhosted.org/packages/70/df/30ca7b31a4d8dc4d3192126e2887dce24d603a8cf53fc3badc650e4676c2/eeg_to_fmri-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e08b07e1cf014bd234ca47009bf848981070e88546ee3ab8515b067d1f6c04d",
          "md5": "50b239725e9e1eab719d2c528e9ec21a",
          "sha256": "040a5075f1baac07b5363e37d5a8384f5d21434e4a3b67c1fa5905f2f0435d6e"
        },
        "downloads": -1,
        "filename": "eeg-to-fmri-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "50b239725e9e1eab719d2c528e9ec21a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 70705,
        "upload_time": "2022-12-23T10:40:47",
        "upload_time_iso_8601": "2022-12-23T10:40:47.657559Z",
        "url": "https://files.pythonhosted.org/packages/4e/08/b07e1cf014bd234ca47009bf848981070e88546ee3ab8515b067d1f6c04d/eeg-to-fmri-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fc9fe8bc5c7580484d49aecb70b937393850698892a750e4d5aadfb13ed1ff5",
          "md5": "c8fcfeeb5e8e5b75edc84a1a3d0e7463",
          "sha256": "9c25e2b03deeb6c237066da8eb698bbdab79c94763163ecdbe7514f4eda4fa32"
        },
        "downloads": -1,
        "filename": "eeg_to_fmri-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8fcfeeb5e8e5b75edc84a1a3d0e7463",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76538,
        "upload_time": "2022-12-23T14:17:05",
        "upload_time_iso_8601": "2022-12-23T14:17:05.929117Z",
        "url": "https://files.pythonhosted.org/packages/5f/c9/fe8bc5c7580484d49aecb70b937393850698892a750e4d5aadfb13ed1ff5/eeg_to_fmri-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3254f531bbfdf5ecfc00d6b895cca86364e44f44bf02386467c651a303d4d5d6",
          "md5": "cf60f6c1cca5f331929d38660e30f057",
          "sha256": "b4577091b6d5ff7c33e987eaccaf4c836c6854b930abb28bc7404703fe79453f"
        },
        "downloads": -1,
        "filename": "eeg-to-fmri-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "cf60f6c1cca5f331929d38660e30f057",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 70737,
        "upload_time": "2022-12-23T14:17:08",
        "upload_time_iso_8601": "2022-12-23T14:17:08.091635Z",
        "url": "https://files.pythonhosted.org/packages/32/54/f531bbfdf5ecfc00d6b895cca86364e44f44bf02386467c651a303d4d5d6/eeg-to-fmri-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bc3beda520c60b75b1049864367192ec2826a8e4d9c58520c19503943ac9082",
          "md5": "96f658744023c9c2aeeb4691e20b4a47",
          "sha256": "275678ed5f534e08113dc696b5a8e702f64c27b88b68f0d255a966d96492db25"
        },
        "downloads": -1,
        "filename": "eeg_to_fmri-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96f658744023c9c2aeeb4691e20b4a47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76427,
        "upload_time": "2022-12-23T15:01:43",
        "upload_time_iso_8601": "2022-12-23T15:01:43.346753Z",
        "url": "https://files.pythonhosted.org/packages/6b/c3/beda520c60b75b1049864367192ec2826a8e4d9c58520c19503943ac9082/eeg_to_fmri-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d773cf86e6e58a5bed25c36d59cce7b32831ffb09096be50ab54373cbfd0c50b",
          "md5": "7eea640b67122778cb3c46f1d025db3f",
          "sha256": "219cea82dece06bb1fcab594e47b902c464471539acb335576f3173a9a3ab5ff"
        },
        "downloads": -1,
        "filename": "eeg-to-fmri-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "7eea640b67122778cb3c46f1d025db3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 70618,
        "upload_time": "2022-12-23T15:01:45",
        "upload_time_iso_8601": "2022-12-23T15:01:45.655522Z",
        "url": "https://files.pythonhosted.org/packages/d7/73/cf86e6e58a5bed25c36d59cce7b32831ffb09096be50ab54373cbfd0c50b/eeg-to-fmri-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1414c56aad08a326ea5dcc8c790273a8547ddbb396a90778710f3801a3cac1ff",
          "md5": "2de5697d92a2889f74d97f2157a9b3ff",
          "sha256": "c36b487a8bf04d04a96df1a8f74a6149442de6f40742ec813667b08c35ac2906"
        },
        "downloads": -1,
        "filename": "eeg_to_fmri-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2de5697d92a2889f74d97f2157a9b3ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76497,
        "upload_time": "2022-12-27T11:56:57",
        "upload_time_iso_8601": "2022-12-27T11:56:57.946170Z",
        "url": "https://files.pythonhosted.org/packages/14/14/c56aad08a326ea5dcc8c790273a8547ddbb396a90778710f3801a3cac1ff/eeg_to_fmri-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d6038723a44282ed07562ed79612a7f386695836ab2899fd19ee6fe2d3cee8d",
          "md5": "e2cba27182c11653bec09bf1a8c2b213",
          "sha256": "17c0d53eb0f0c1bef7bd424ecf1def0b99e00415deaabba78f69bd1a1f741d45"
        },
        "downloads": -1,
        "filename": "eeg-to-fmri-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e2cba27182c11653bec09bf1a8c2b213",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 70697,
        "upload_time": "2022-12-27T11:57:00",
        "upload_time_iso_8601": "2022-12-27T11:57:00.968467Z",
        "url": "https://files.pythonhosted.org/packages/4d/60/38723a44282ed07562ed79612a7f386695836ab2899fd19ee6fe2d3cee8d/eeg-to-fmri-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1414c56aad08a326ea5dcc8c790273a8547ddbb396a90778710f3801a3cac1ff",
        "md5": "2de5697d92a2889f74d97f2157a9b3ff",
        "sha256": "c36b487a8bf04d04a96df1a8f74a6149442de6f40742ec813667b08c35ac2906"
      },
      "downloads": -1,
      "filename": "eeg_to_fmri-0.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2de5697d92a2889f74d97f2157a9b3ff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 76497,
      "upload_time": "2022-12-27T11:56:57",
      "upload_time_iso_8601": "2022-12-27T11:56:57.946170Z",
      "url": "https://files.pythonhosted.org/packages/14/14/c56aad08a326ea5dcc8c790273a8547ddbb396a90778710f3801a3cac1ff/eeg_to_fmri-0.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d6038723a44282ed07562ed79612a7f386695836ab2899fd19ee6fe2d3cee8d",
        "md5": "e2cba27182c11653bec09bf1a8c2b213",
        "sha256": "17c0d53eb0f0c1bef7bd424ecf1def0b99e00415deaabba78f69bd1a1f741d45"
      },
      "downloads": -1,
      "filename": "eeg-to-fmri-0.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "e2cba27182c11653bec09bf1a8c2b213",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 70697,
      "upload_time": "2022-12-27T11:57:00",
      "upload_time_iso_8601": "2022-12-27T11:57:00.968467Z",
      "url": "https://files.pythonhosted.org/packages/4d/60/38723a44282ed07562ed79612a7f386695836ab2899fd19ee6fe2d3cee8d/eeg-to-fmri-0.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}