{
  "info": {
    "author": "Andrew Scholan",
    "author_email": "andrew.scholan@scholan.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Jupyter",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# koilerplate - boilerplate code for kaggle\n\n![PyPI](https://img.shields.io/pypi/v/koilerplate)\n![PyPI - License](https://img.shields.io/pypi/l/koilerplate?style=flat)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/koilerplate)\n![PyPI - Format](https://img.shields.io/pypi/format/koilerplate)\n![PyPI - Status](https://img.shields.io/pypi/status/koilerplate)\n![Read the Docs](https://img.shields.io/readthedocs/koilerplate)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nOne of my great frustrations when building notebooks for [kaggle](https://kaggle.com) \nis the amount of boilerplate code I always add to the top of each notebook.\n\nThe whole idea behind this package is that a simple import can pull in a lot of this\nboilerplate and allow me to focus on the competition in hand.\n\n---\n## folders\n\nThe **folders** module defines some simple constants that can be used as the root names\nfor the three primary folder paths used in Kaggle.\n\nThese are all defined relative to the working folder (which for a standard kaggle \nnotebook is the _/kaggle/working_ folder). \n\nThis module is also OS agnostic. This means that it's possible to download and use\nthe notebook outside kaggle. If this is the case then it will define the folders \nrelative to your local project working folder. For example:\n\n```text\nc:\\\n  ├── dev                     # Somewhere you put all your project files\n  .   ├── kaggle-projects     # You put all your kaggle projects here\n  .   .   ├── input           # Put downloaded datasets here \"INPUT_ROOT\"\n  .   .   ├── my-competition  # Your competition notebook in here \"WORKING_ROOT\"\n          └── temp            # This is where temp files/folders will go \"TEMP_ROOT\"\n```\n### Usage\n```python\nfrom koilerplate import INPUT_ROOT, WORKING_ROOT, TEMP_ROOT\n\nprint(f\"INPUT_ROOT={INPUT_ROOT}\")\nprint(f\"WORKING_ROOT={WORKING_ROOT}\")\nprint(f\"TEMP_ROOT={TEMP_ROOT}\")\n```\n> INPUT_ROOT=/kaggle/input \\\n> WORKING_ROOT=/kaggle/working \\\n> TEMP_ROOT=/kaggle/temp\n\n### Example kaggle notebook\n\n- [koilerplate folders and zipout (public)](https://www.kaggle.com/andrewscholan/koilerplate-folders-and-zipout-public)\n\n---\n## zipout\n\nThe **zipout** folder is designed to overcome a limitation in the Kaggle working \nfolder. There is an unspecified limit to the _number_ of files that can be placed \nin the working folder, and sub-folders of the working folder.\n\nThis means that if you are manipulating a dataset _it may fail silently_ if you \nplace too many files in the folder, even if it is within the disk space quota defined\nfor the notebook.\n\nTo overcome this, the recommendation through the Kaggle forum is to first write the\nfiles to a folder in /kaggle/temp and then zip up this folder and copy it to the\nworking folder. (The temp folder does not have this same restriction.)\n\nThis module contains a single python class **ZipOut** that does the heavy\nlifting to accomplish this.\n\n### Usage\n```python\nfrom koilerplate import ZipOut\n\n# Create the temporary folder\nmy_dataset = ZipOut(\"my-dataset\")\n\n# Print out the path that was created\nprint(my_dataset.folder_path)\n```\n> /kaggle/temp/my-dataset\n> \n```python\n# Make a trivial file and place it into the folder\ntest_file_path = os.path.join(my_dataset.folder_path, \"test.txt\")\nwith open(test_file_path, \"w\") as f:\n    for _ in range(1, 1000):\n        f.write(\"Hello world!\\n\")\n```\n```python\n# Convert the temporary folder into zip file\nzip_file_path = my_dataset.make_zip_file()\nprint(zip_file_path)\n```\n>/kaggle/working/my-dataset.zip\n\n### Example kaggle notebook\n\n- [koilerplate folders and zipout (public)](https://www.kaggle.com/andrewscholan/koilerplate-folders-and-zipout-public)\n\n---\n## pushover\n\nPushover is a subscription based notification service: [pushover](https://pushover.net/)\n\nThe service [pricing](https://pushover.net/pricing) is trivially inexpensive (at \nthe time of writing a one off payment of USD 5.00 per platform; I have subscribed\nonly for my phone).\n\nOn an internet enabled workbook you can use this to notify you of steps that are\noccurring during a notebook run on the Kaggle servers (or elsewhere).\n\nTo use the service you need to set up an account on _pushover.net_ and obtain from\nyour account settings an API token and your user id.\n\n### Usage\n\nCreate yourself a _**private**_ dataset called **pushover-credentials** which should \nconsist of a single file called **pushover_credentials.json** (note underscore in\nfilename) which has the following structure:\n```json\n{\n  \"token\": \"<<<<<--- Your token hex code string --->>>>>\"\n  \"user\": \"<<<<<--- Your user hex code string --->>>>>\"\n}\n```\nNow, add this dataset to your competition notebook. You're now all set up to use\npushover in your notebook.\n```python\n# Optionally define this before importing koilerplate\nNOTEBOOK_NAME = \"My competition notebook\"\n\nfrom koilerplate import pushover\n\n# Send a notification\npushover(\"Hello Kaggle World!\")\n```\n### Example kaggle notebook\n\n- ![#f03c15](https://via.placeholder.com/15/f03c15/000000?text=+) Sorry, none yet.\n\n## offline\n\nOften, in code competitions on Kaggle, the notebook submission has to be run without\ninternet access. This is usually to stop notebooks handing off tasks to an external\nprocessor farm. Usually, these competitions permit the use of external datasets and\nlibraries.\n\nHowever, it is a non-trivial matter using a library that's not included in the standard\nnotebook image. You need to build yourself a custom dataset containing all the \ninformation that's needed for _pip_ to load them into your notebook whilst it's\nrunning without an internet connection.\n\nThe **offline** module is designed to take the legwork out of preparing the dataset\nthat you will need to load the modules off-line. It contains a single function\n_**offline_pip_prepare()**_ which will copy the modules needed into the WORKING folder\nso that they can be uploaded to kaggle as a dataset.\n\n## Usage\n\nIn this example we're going to prepare the libraries to be loaded as a specific verison\nof PyTorch plus the very good cell segmentation library \n[cellpose](https://www.cellpose.org/). If we look at the install instructions for \nthese libraries then we would see the recommended installion scripts for both are:\n\n<pre>\npip install torch==1.7.1+cu110 torchvision==0.8.2+cu110 torchaudio==0.7.2 \\\n    --find-links https://download.pytorch.org/whl/torch_stable.html\n\npip install cellpose==0.6.1\n</pre>\n\nIn order to prepare these for offline loading we have to note the module names and\nversions and any locations where _pip_ should find links from. These should be each\nplaced into a list and these passed as parameters to the _**offline_pip_prepare()**_\nfunction.\n\n#### In a kaggle internet enabled notebook enter the following code cell:\n\n```python\nfrom koilerplate import offline_pip_prepare\n\nPACKAGES = [\n    \"torch==1.7.1+cu110\",\n    \"torchvision==0.8.2+cu110\",\n    \"torchaudio==0.7.2\",\n    \"cellpose==0.6.1\",\n]\nLINKS = [\n    \"https://download.pytorch.org/whl/torch_stable.html\"\n]\n\noffline_pip_prepare(packages=PACKAGES, links=LINKS)\n```\n\n_Note that this will take some time to run, as the function downloads the necessary\ninstallation information and, if necessary, builds the wheel files that **pip** will \nuse._\n\nAfter the cell completes the WORKING folder will contain the following:\n\n```text\n/\n└── kaggle\n      ├── working                   # Working folder of your kaggle notebook\n      .   ├── requirements.txt      # requirements file that you will use with pip\n      .   └── wheels.zip            # the offline wheels files that pip will use\n```\nOnce this is completed you need to save the notebook as a new version; Kaggle will\nthen execute your notebook in another kernel. Wait for this to finish then navigate\nto the output section of the notebook and create a new dataset, call it, for example,\n_competition-packages_. _Note that the above example produces a dataset of approximate\nsize 1.2GB._\n\nNow, start a new notebook that will become your competition entry notebook and add\nto it your newly created dataset. You will now see that this appears in your input\nfolder for the notebook _(note that kaggle will drop the hyphen in the dataset name)_:\n\n```text\n/\n└── kaggle\n      ├── input                     # Kaggle loads all datasets here\n      │   ├── competitionpackages   # This is your newly created dataset\n      │   .   ├── requirements.txt  # requirements file that you will use with pip\n      │   .   └── wheels\n      │           ├── ... .whl      # the offline wheels files that pip will use\n      │           └── ... .whl      \n      └── working                   # Working folder of your kaggle notebook\n```\nYou now need to add the following code cell somewhere near the start of your competition\nnotebook:\n\n```jupyter\n!pip install \\\n   --requirement /kaggle/input/competitionpackages/requirements.txt \\\n   --no-index \\\n   --find-links file:///kaggle/input/competitionpackages/wheels\n```\n_Note that it's very important to include the **--no-index** flag or this will not \nwork when the internet access for the notebook is disabled._\n\nDon't forget that you also need to **import** the libaries, as you normally would,\nbefore you use them:\n\n```python\nimport torch\nimport cellpose\n```\n### Example kaggle notebooks/datasets\n\n- Notebook describing process: [koilerplate offline (public)](https://www.kaggle.com/andrewscholan/koilerplate-offline-public)\n- Example dataset using process: [competition-packages](https://www.kaggle.com/andrewscholan/competitionpackages)\n- Example competition notebook: [koilerplate offline pip install example](https://www.kaggle.com/andrewscholan/koilerplate-offline-pip-install-example)\n\n---\n## Suggestions\n\nPlease add any suggestions to the [issue tracker](https://github.com/AScholan/koilerplate/issues)\nand I'll try and get back to you.\n\n# License\n\nThis is licensed under the MIT license. See LICENSE.txt for details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AScholan/koilerplate.git",
    "keywords": "kaggle",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "koilerplate",
    "package_url": "https://pypi.org/project/koilerplate/",
    "platform": "",
    "project_url": "https://pypi.org/project/koilerplate/",
    "project_urls": {
      "Bug Tracker": "https://github.com/AScholan/koilerplate/issues",
      "Homepage": "https://github.com/AScholan/koilerplate.git"
    },
    "release_url": "https://pypi.org/project/koilerplate/0.1.3/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.7",
    "summary": "Helper boilerplate code that is useful in Kaggle competitions.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10465772,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f715e26ee472b92f7ebae26ee711bda2816ce1a11ff6e26fa6b1501979b0cd8",
          "md5": "df3a4107208abead07ec812f50aceae6",
          "sha256": "fa1d46cab282044986b7b9056ee44ef422aec71999ab4175ed0506fab6833a88"
        },
        "downloads": -1,
        "filename": "koilerplate-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df3a4107208abead07ec812f50aceae6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11778,
        "upload_time": "2021-05-25T12:22:14",
        "upload_time_iso_8601": "2021-05-25T12:22:14.463005Z",
        "url": "https://files.pythonhosted.org/packages/6f/71/5e26ee472b92f7ebae26ee711bda2816ce1a11ff6e26fa6b1501979b0cd8/koilerplate-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ac95a878a0383a879bac6f35fc07fbee7b1f5932184e5868aab62f03e639019",
          "md5": "801c07256a96acdc1b312cb3821d9cef",
          "sha256": "4afcfca7c9284ae0cc98653522968ccbe4407e31b7a5897e9a75704dbebf450e"
        },
        "downloads": -1,
        "filename": "koilerplate-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "801c07256a96acdc1b312cb3821d9cef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11965,
        "upload_time": "2021-05-25T16:19:54",
        "upload_time_iso_8601": "2021-05-25T16:19:54.198856Z",
        "url": "https://files.pythonhosted.org/packages/1a/c9/5a878a0383a879bac6f35fc07fbee7b1f5932184e5868aab62f03e639019/koilerplate-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f22e615171bf22db2af8262c658af602c3fe695cb4e71eca5132a55e0632672",
          "md5": "52d7bd986b13d6b25a90654e55ef37bd",
          "sha256": "8e28b01c1bcfbeeb414f75bce1553ade847e7f135e097e0803c12ed185b50e9c"
        },
        "downloads": -1,
        "filename": "koilerplate-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52d7bd986b13d6b25a90654e55ef37bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11959,
        "upload_time": "2021-05-25T16:22:46",
        "upload_time_iso_8601": "2021-05-25T16:22:46.046787Z",
        "url": "https://files.pythonhosted.org/packages/9f/22/e615171bf22db2af8262c658af602c3fe695cb4e71eca5132a55e0632672/koilerplate-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f55ae219c9ece38af41147224b77ebf840e73d29fdfd3878624baaefd5396a2",
          "md5": "f418d7385c316b06bf1ec9d6fcc143a4",
          "sha256": "ef21f49da63369209a20d8bd7e5ddd19e01ab5748245177bc36b1c6eda434258"
        },
        "downloads": -1,
        "filename": "koilerplate-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f418d7385c316b06bf1ec9d6fcc143a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11961,
        "upload_time": "2021-05-25T16:26:02",
        "upload_time_iso_8601": "2021-05-25T16:26:02.812751Z",
        "url": "https://files.pythonhosted.org/packages/8f/55/ae219c9ece38af41147224b77ebf840e73d29fdfd3878624baaefd5396a2/koilerplate-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f55ae219c9ece38af41147224b77ebf840e73d29fdfd3878624baaefd5396a2",
        "md5": "f418d7385c316b06bf1ec9d6fcc143a4",
        "sha256": "ef21f49da63369209a20d8bd7e5ddd19e01ab5748245177bc36b1c6eda434258"
      },
      "downloads": -1,
      "filename": "koilerplate-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f418d7385c316b06bf1ec9d6fcc143a4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11961,
      "upload_time": "2021-05-25T16:26:02",
      "upload_time_iso_8601": "2021-05-25T16:26:02.812751Z",
      "url": "https://files.pythonhosted.org/packages/8f/55/ae219c9ece38af41147224b77ebf840e73d29fdfd3878624baaefd5396a2/koilerplate-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}