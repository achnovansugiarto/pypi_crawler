{
  "info": {
    "author": "Dmitry Pershin",
    "author_email": "dapper1291@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: Other/Proprietary License",
      "License :: Public Domain",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Networking"
    ],
    "description": "=======================\ngeneric-connection-pool\n=======================\n\n.. image:: https://static.pepy.tech/personalized-badge/generic-connection-pool?period=month&units=international_system&left_color=grey&right_color=orange&left_text=Downloads/month\n    :target: https://pepy.tech/project/generic-connection-pool\n    :alt: Downloads/month\n.. image:: https://github.com/dapper91/generic-connection-pool/actions/workflows/test.yml/badge.svg?branch=master\n    :target: https://github.com/dapper91/generic-connection-pool/actions/workflows/test.yml\n    :alt: Build status\n.. image:: https://img.shields.io/pypi/l/generic-connection-pool.svg\n    :target: https://pypi.org/project/generic-connection-pool\n    :alt: License\n.. image:: https://img.shields.io/pypi/pyversions/generic-connection-pool.svg\n    :target: https://pypi.org/project/generic-connection-pool\n    :alt: Supported Python versions\n.. image:: https://codecov.io/gh/dapper91/generic-connection-pool/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/dapper91/generic-connection-pool\n    :alt: Code coverage\n\n\n``generic-connection-pool`` is a connection pool that can be used for TCP, http, database connections.\n\nFeatures:\n\n- **generic nature**: can be used for any connection you desire (TCP, http, database)\n- **runtime agnostic**: synchronous and asynchronous pool supported\n- **flexibility**: flexable connection retention and recycling policy\n- **fully-typed**: mypy type-checker compatible\n\n\nInstallation\n------------\n\nYou can install generic-connection-pool with pip:\n\n.. code-block:: console\n\n    $ pip install generic-connection-pool\n\n\nQuickstart\n----------\n\nThe following example illustrates how to create asynchronous ssl socket pool:\n\n.. code-block:: python\n\n    import asyncio\n    from typing import Tuple\n\n    from generic_connection_pool.asyncio import ConnectionPool\n    from generic_connection_pool.contrib.socket_async import TcpStreamConnectionManager\n\n    Hostname = str\n    Port = int\n    Endpoint = Tuple[Hostname, Port]\n    Connection = Tuple[asyncio.StreamReader, asyncio.StreamWriter]\n\n\n    async def main() -> None:\n        pool = ConnectionPool[Endpoint, Connection](\n            TcpStreamConnectionManager(ssl=True),\n            idle_timeout=30.0,\n            max_lifetime=600.0,\n            min_idle=3,\n            max_size=20,\n            total_max_size=100,\n            background_collector=True,\n        )\n\n        async with pool.connection(endpoint=('www.wikipedia.org', 443), timeout=5.0) as (reader, writer):\n            request = (\n                'GET / HTTP/1.0\\n'\n                'Host: www.wikipedia.org\\n'\n                '\\n'\n                '\\n'\n            )\n            writer.write(request.encode())\n            await writer.drain()\n            response = await reader.read()\n\n            print(response.decode())\n\n    asyncio.run(main())\n\n\nConfiguration\n-------------\n\nSynchronous and asynchronous pools supports the following parameters:\n\n* **connection_manager**: connection manager instance\n* **acquire_timeout**: connection acquiring default timeout\n* **dispose_batch_size**: number of connections to be disposed at once\n  (if background collector is started the parameter is ignored)\n* **dispose_timeout**: connection disposal timeout\n* **background_collector**: start worker that disposes timed-out connections in background maintain provided pool state\n  otherwise they will be disposed on each connection release\n* **idle_timeout**: number of seconds after which a connection will be closed respecting min_idle parameter\n  (the connection will be closed only if the connection number exceeds min_idle)\n* **max_lifetime**: number of seconds after which a connection will be closed (min_idle parameter will be ignored)\n* **min_idle**: minimum number of connections the pool tries to hold (for each endpoint)\n* **max_size**: maximum number of connections (for each endpoint)\n* **total_max_size**: maximum number of connections (for all endpoints)\n\n\nGeneric nature\n--------------\n\nSince the pool has generic nature is can be used for database connections as well:\n\n.. code-block:: python\n\n    import psycopg2.extensions\n\n    from generic_connection_pool.contrib.psycopg2 import DbConnectionManager\n    from generic_connection_pool.threding import ConnectionPool\n\n    Endpoint = str\n    Connection = psycopg2.extensions.connection\n\n\n    def main() -> None:\n        dsn_params = dict(dbname='postgres', user='postgres', password='secret')\n\n        pool = ConnectionPool[Endpoint, Connection](\n            DbConnectionManager(\n                dsn_params={\n                    'master': dict(dsn_params, host='db-master.local'),\n                    'replica-1': dict(dsn_params, host='db-replica-1.local'),\n                    'replica-2': dict(dsn_params, host='db-replica-2.local'),\n                },\n            ),\n            acquire_timeout=2.0,\n            idle_timeout=60.0,\n            max_lifetime=600.0,\n            min_idle=3,\n            max_size=10,\n            total_max_size=15,\n            background_collector=True,\n        )\n\n        with pool.connection(endpoint='master') as conn:\n            cur = conn.cursor()\n            cur.execute(\"SELECT * FROM pg_stats;\")\n            print(cur.fetchone())\n\n        with pool.connection(endpoint='replica-1') as conn:\n            cur = conn.cursor()\n            cur.execute(\"SELECT * FROM pg_stats;\")\n            print(cur.fetchone())\n\n        pool.close()\n\n\n    main()\n\n\nExtendability\n-------------\n\nIf built-in connection managers are not suitable for your task the one can be easily created by yourself:\n\n.. code-block:: python\n\n    import socket\n    from ssl import SSLContext, SSLSocket\n    from typing import Optional, Tuple\n\n    from generic_connection_pool.threding import BaseConnectionManager, ConnectionPool\n\n    Hostname = str\n    Port = int\n    SslEndpoint = Tuple[Hostname, Port]\n    Connection = SSLSocket\n\n\n    class SslSocketConnectionManager(BaseConnectionManager[SslEndpoint, Connection]):\n        \"\"\"\n        SSL socket connection manager.\n        \"\"\"\n\n        def __init__(self, ssl: SSLContext):\n            self._ssl = ssl\n\n        def create(self, endpoint: SslEndpoint, timeout: Optional[float] = None) -> Connection:\n            hostname, port = endpoint\n\n            sock = self._ssl.wrap_socket(socket.socket(type=socket.SOCK_STREAM), server_hostname=hostname)\n            sock.settimeout(timeout)\n            sock.connect((hostname, port))\n\n            return sock\n\n        def dispose(self, endpoint: SslEndpoint, conn: Connection, timeout: Optional[float] = None) -> None:\n            conn.settimeout(timeout)\n            try:\n                conn.shutdown(socket.SHUT_RDWR)\n            except OSError:\n                pass\n\n            conn.close()\n\n\n    def main() -> None:\n        pool = ConnectionPool[SslEndpoint, Connection](\n            SslSocketConnectionManager(ssl=SSLContext()),\n            idle_timeout=30.0,\n            max_lifetime=600.0,\n            min_idle=3,\n            max_size=20,\n            total_max_size=100,\n            background_collector=True,\n        )\n\n        with pool.connection(endpoint=('www.wikipedia.org', 443), timeout=5.0) as sock:\n            request = (\n                'GET / HTTP/1.0\\n'\n                'Host: www.wikipedia.org\\n'\n                '\\n'\n                '\\n'\n            )\n            sock.write(request.encode())\n            response = []\n            while chunk := sock.recv():\n                response.append(chunk)\n\n            print(b''.join(response).decode())\n\n        pool.close()\n\n\n    main()\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dapper91/generic-connection-pool",
    "keywords": "pool,connection-pool,generic,asyncio,socket,tcp,db,http",
    "license": "Unlicense",
    "maintainer": "",
    "maintainer_email": "",
    "name": "generic-connection-pool",
    "package_url": "https://pypi.org/project/generic-connection-pool/",
    "platform": null,
    "project_url": "https://pypi.org/project/generic-connection-pool/",
    "project_urls": {
      "Documentation": "https://github.com/dapper91/generic-connection-pool",
      "Homepage": "https://github.com/dapper91/generic-connection-pool",
      "Repository": "https://github.com/dapper91/generic-connection-pool"
    },
    "release_url": "https://pypi.org/project/generic-connection-pool/0.1.1/",
    "requires_dist": [
      "psycopg2 (>=2.9.5,<3.0.0) ; extra == \"psycopg2\""
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "generic connection pool",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17323748,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e37617136797448f612fe13bdb280e5158634602533d3b9e81aabc468bfeaae",
          "md5": "ec71b36e52bdc89a3a4806d1ae8d7349",
          "sha256": "3251c968e76e1c8815323f7f6340b24aa6ab5995185f2cde20305694dcec901f"
        },
        "downloads": -1,
        "filename": "generic_connection_pool-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec71b36e52bdc89a3a4806d1ae8d7349",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 17961,
        "upload_time": "2023-03-15T14:09:47",
        "upload_time_iso_8601": "2023-03-15T14:09:47.502264Z",
        "url": "https://files.pythonhosted.org/packages/9e/37/617136797448f612fe13bdb280e5158634602533d3b9e81aabc468bfeaae/generic_connection_pool-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcee1c86a878de0459a935de86c6880c5808142a5030a2596b7ec0d880dc2482",
          "md5": "785bf0459c1983afe38f481589c6dad6",
          "sha256": "54a2302ce4d63ec41e0f95a08c11673f1aaea9ee41533d0335fd1b60cf1e9ac6"
        },
        "downloads": -1,
        "filename": "generic_connection_pool-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "785bf0459c1983afe38f481589c6dad6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 15763,
        "upload_time": "2023-03-15T14:09:49",
        "upload_time_iso_8601": "2023-03-15T14:09:49.539545Z",
        "url": "https://files.pythonhosted.org/packages/bc/ee/1c86a878de0459a935de86c6880c5808142a5030a2596b7ec0d880dc2482/generic_connection_pool-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1e6ec9095ed6a1a1e504e87d2e4c24a698c2152a56af0c3792f512312640052",
          "md5": "f0a4a11458915f6505b0e3aa925e8c92",
          "sha256": "026b12f99c0aaaa77b8fecad55350f22bc4ec5a51b556116b68c36573193c0fe"
        },
        "downloads": -1,
        "filename": "generic_connection_pool-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0a4a11458915f6505b0e3aa925e8c92",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 18097,
        "upload_time": "2023-03-16T19:41:19",
        "upload_time_iso_8601": "2023-03-16T19:41:19.279345Z",
        "url": "https://files.pythonhosted.org/packages/c1/e6/ec9095ed6a1a1e504e87d2e4c24a698c2152a56af0c3792f512312640052/generic_connection_pool-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5dfa0d7fb65b04b468103c46c5c259365ad8bfc5c19103e0e275b5aca02cf91",
          "md5": "ca868a1ee300908d17a77381b45cf6e5",
          "sha256": "80f0e3f1ca07f982ca0868672f05af5190df7fe2c49d4713e75414222cc333d2"
        },
        "downloads": -1,
        "filename": "generic_connection_pool-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ca868a1ee300908d17a77381b45cf6e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 15865,
        "upload_time": "2023-03-16T19:41:20",
        "upload_time_iso_8601": "2023-03-16T19:41:20.634706Z",
        "url": "https://files.pythonhosted.org/packages/d5/df/a0d7fb65b04b468103c46c5c259365ad8bfc5c19103e0e275b5aca02cf91/generic_connection_pool-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1e6ec9095ed6a1a1e504e87d2e4c24a698c2152a56af0c3792f512312640052",
        "md5": "f0a4a11458915f6505b0e3aa925e8c92",
        "sha256": "026b12f99c0aaaa77b8fecad55350f22bc4ec5a51b556116b68c36573193c0fe"
      },
      "downloads": -1,
      "filename": "generic_connection_pool-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f0a4a11458915f6505b0e3aa925e8c92",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 18097,
      "upload_time": "2023-03-16T19:41:19",
      "upload_time_iso_8601": "2023-03-16T19:41:19.279345Z",
      "url": "https://files.pythonhosted.org/packages/c1/e6/ec9095ed6a1a1e504e87d2e4c24a698c2152a56af0c3792f512312640052/generic_connection_pool-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5dfa0d7fb65b04b468103c46c5c259365ad8bfc5c19103e0e275b5aca02cf91",
        "md5": "ca868a1ee300908d17a77381b45cf6e5",
        "sha256": "80f0e3f1ca07f982ca0868672f05af5190df7fe2c49d4713e75414222cc333d2"
      },
      "downloads": -1,
      "filename": "generic_connection_pool-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ca868a1ee300908d17a77381b45cf6e5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 15865,
      "upload_time": "2023-03-16T19:41:20",
      "upload_time_iso_8601": "2023-03-16T19:41:20.634706Z",
      "url": "https://files.pythonhosted.org/packages/d5/df/a0d7fb65b04b468103c46c5c259365ad8bfc5c19103e0e275b5aca02cf91/generic_connection_pool-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}