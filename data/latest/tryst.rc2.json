{
  "info": {
    "author": "Travis Gates",
    "author_email": "wholesomenecromancer@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Tryst\nCLI support package.\n\n[tryst on Github](https://github.com/WholesomeNecromancer/tryst)\n\n[GNU GPLv3](https://www.gnu.org/licenses/gpl-3.0-standalone.html)\n\n>One's body is inviolable, subject to one's own will alone.\n\n# What Tryst is:\nA lightweight interface and context package for basic cli features intended for rapid atomic problem-solving. Built to support code-time chaining between apps for efficient code-reuse and 'build-outward' problem-solving methodologies.\n\nTryst is lightweight but means to compy with SOLID design principles and is a learning experience in action to build a better understanding of Python, CLI development, unit testing, deployment, support, and more.\n\n# What Tryst is not:\nTryst is not fancy or comprehensive. It is not intended to be flawless, nor to replace more fully-functional and well-established CLI support packages such as [argparse](https://docs.python.org/3/library/argparse.html) or [getopt](https://docs.python.org/3/library/getopt.html). It is a project for learning and for rapid development of personal workflow enhancements and automation.\n\nThis is evidenced by very little validation; the burden of understanding is left to the implementing developer. For example, options and option-arguments are not duplicate-checked; undefined behavior will occur if you define more than one option object with the same brief or verbose tokens. Additionally, most of Tryst's methods are public rather than private; this is by design, to provide maximum flexibility to the implementer.\n\n# Features\n- Options and Option-Arguments specifiable via verbose (e.g. `--debug`) and brief (e.g. `-d`) tokens\n    - Brief tokens for options can be stacked e.g. `-abc`\n- Configuration via `config.json` file and `get_config*` API\n- Decoupled output; easily avoid unnecessary spew to `stdout` or `stderr`\n    - `write*` api allows easy *to-file* functionality\n- Procedural usage instructions\n- Secrets (e.g. credentials) Support via `get_secret` API\n    - Future development may include credential encryption or similar security features\n\n# Usage\nTryst has recently been upgraded. To implement your own Tryst-based app, inherit Tryst and implement `main()`. Note the `inputs` argument which allows you or another developer to call your Tryst's `main` method with specifiable arguments at code-time, greatly expediting code reuse.\n\n``` python\nfrom tryst import Tryst     # Tryst class defines your app and its main\nfrom tryst import Option    # Option defines options and option-arguments e.g. --debug\n\nclass MyTrystApp(Tryst):\n    def main(self, inputs = None):\n        self.appname = \"my-tryst-app\"\n\n        # ...1. define and add your options and option-arguments here\n\n        self.consort(inputs)\n\n        # ...2. implement your app's behavior here based on self.userargs, self.useroptions, and self.useroptionarguments\n\n        self.finish()   # Wrap-up and output\n```\n\n## Additional Implementation Details\n\nOptions, or switches, allow users to toggle functionality in your app. Option-Arguments allow for value-based user-input.\n\n1. Define and add your `options` and `optionarguments`, establishing the rules of engagement for your tryst:\n``` python\n# Option(\"verbose-token\", \"description\", \"optional-brief-token\")\n\n# This option can be used with --my-option or -m\nself.myoption = Option(\"my-option\", \"switches behavior in my app\", \"m\")\n\n# Add the option to your Tryst\nself.add_option(self.myoption)\n\n# This option-argument can be used with --my-option-argument=\"some value\" or -a=\"some value\"\nself.myoptionargument = Option(\"my-option-argument\", \"lets a user specify a value for my app\", \"a\")\n\n# Add the option-argument to your tryst\nself.add_option_argument(self.myoptionargument)\n```\n\n2. Govern your app behavior based on the arguments, options, and option-arguments the user specified:\n``` python\nif self.myoption in self.useroptions:\n    # Act on --my-option\n\nmyoptargval = self.useroptionarguments.get(self.myoptionargument)\nif myoptargval:\n    # Act on --my-option-argument=\"some value\"\n```\n\n### Provide Usage Instructions to Users\n`mytryst.show_usage()`\n>Note: this may be appropriate in your app due to various criteria, such as if the user specified no arguments, or no options; because every app is different, the burden of making the call to provide this usage is on the developer. The `show_usage()` method creates procedural instructions based on your Tryst's specified `options` and `optionarguments`.\n\n### Decouple & Buffer Your Output\nUse `self.output(message)` for result output and `self.error(message)` for error output.\n>If you are working to diagnose your app while developing, use `self.debug(message)` to only display output when `--debug` is specified or `self.DEBUG` is set to `True`.\n\n>*Keep in mind that `self.output` and `self.error` buffer output to `self.outputbuffer` and `self.errorbuffer` respectively, which are written/flushed via `self.write_stdout()` and `self.write_stderr()`.*\n\n### Write Your Output\nTo write output and errors to stdout and stderr respectively and simply, call `self.finish()`.\n\nThis indicates that your Tryst has concluded and its outputs are ready.\n\n>`finish()` does not call `sys.exit()`, while `quit()` does. `sys.exit()` interferes with app chaining because it ends the current python session completely. To build your app to be easily callable from another and to support app chaining, use `self.finish()` or call the appropriate write methods manually:\n\n``` python\nself.write_stdout()\nself.write_stderr()\n```\n\nTryst uses `JSONHelper` internally to cleanly format Python `dict` or `list` objects that may be in your Tryst's `outputbuffer` when writing. Expect dictionary and list objects you've passed to `self.output` to be written in an alphabetically sorted, readable, 4-space indented multiline string.\n\n# CLI Conventions\n- short options can be stacked\n    - e.g. `tryst -e2` is equivalent to `tryst -e -2` and `tryst --error --two` respectively\n- option-arguments only allow `=`, not spaces; complex values should be quoted at the shell\n    - e.g. `--debug=true`, not `--debug true`\n    - e.g. `--name=\"Wholesome Necromancer\"`, not `--name=Wholesome Necromancer`\n- order of options, option-arguments, and arguments does not matter in usage\n    - e.g. `tryst.py --debug -e2 arg1`, `tryst.py -2e arg1 --debug`, and `tryst.py -e arg1 -2 --debug` are equivalent\n\n# Best Practices\n- Get configuration data *after* `consort()` is called to ensure the correct configuration file and path are loaded.\n\n# Examples\nTrivial example of app chaining:\n\n``` python\n#! trystchild.py\n\nfrom tryst import Tryst\nfrom tryst import Option\n\nclass TrystCapitalize(Tryst):\n    def main(self, inputs = None):\n        # self.DEBUG = True\n        self.appname = \"tryst-capitalize\"\n        self.authors = \"wholesomenecromancer\"\n        self.summary = \"Progeny of Tryst. Capitalizes strings.\"\n        self.version = \"0.x.y\"\n\n        self.consort(inputs)\n\n        for argg in self.userargs:\n            self.output(argg.upper())\n        self.finish()\n#================================================================================\n\nclass TrystChild(Tryst):\n    def main(self, inputs = None):\n        # self.DEBUG = True\n        self.appname = \"trystchild\"\n        self.authors = \"wholesomenecromancer\"\n        self.summary = \"Descends from Tryst. Echoes strings.\"\n        self.version = \"0.0.12a\"\n\n        # Options\n        self.capitalize_option = Option(\"capitalize-inputs\", \"Capitalizes arguments before echoing using tryst-chaining.\", \"C\")\n        self.add_option(self.capitalize_option)\n\n        # consort\n        self.consort(inputs)\n\n        self.debug(\"Example debug statement.\")\n\n        # use the tryst to govern app behavior\n        if len(self.userargs) < 1:\n            self.debug(\"No args given.\")\n            self.show_usage()\n            self.quit()\n        \n        # Capitalize by using TrystCapitalize\n        if self.capitalize_option in self.useroptions:\n            captryst = TrystCapitalize()                                    # Construct\n            captryst.silence()                                              # Silence console output\n            captryst.main(self.userargs)                                    # Pass the user's arguments \n            if captryst.outputbuffer:                                       # Get TrystCapitalize's output directly\n                self.userargs = captryst.outputbuffer                       # Replace our userargs before outputting\n\n        for arrg in self.userargs:\n            self.output(arrg)\n        self.finish()\n#================================================================================\n\n#----------------------------------------\nif __name__ == \"__main__\":\n    TrystChild().main()\n#----------------------------------------\n\n```\n\n# Tests\nTests can be run from `src/tryst/` via `python -m unittest`.\n\n# Documentation\nDocumentation is intended for use with `pdoc`:\n\n`pdoc tryst.py`\n`pdoc -o <destdir> tryst.py`\n\n# Support\nTryst intends to be platform-agnostic but has only been tested in Windows 10 environments with PowerShell 5.x and WSL 2.0's Ubuntu 20.x bash.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WholesomeNecromancer/tryst",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tryst",
    "package_url": "https://pypi.org/project/tryst/",
    "platform": null,
    "project_url": "https://pypi.org/project/tryst/",
    "project_urls": {
      "Bug Tracker": "https://github.com/WholesomeNecromancer/tryst/issues",
      "Homepage": "https://github.com/WholesomeNecromancer/tryst"
    },
    "release_url": "https://pypi.org/project/tryst/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A lightweight CLI support package.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14635952,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea114aee450b496150f3588bbbc69d16b660a995f36b58746a4a7367e09a7f5d",
          "md5": "6fda7cc1db388d9c957c324e93948caa",
          "sha256": "598d65dfd203f87d13956f9cf0c39524d29dd36093706bffbb7811467a6fbba6"
        },
        "downloads": -1,
        "filename": "tryst-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fda7cc1db388d9c957c324e93948caa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27853,
        "upload_time": "2022-01-06T19:40:38",
        "upload_time_iso_8601": "2022-01-06T19:40:38.689985Z",
        "url": "https://files.pythonhosted.org/packages/ea/11/4aee450b496150f3588bbbc69d16b660a995f36b58746a4a7367e09a7f5d/tryst-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ba2dfab2a2de4a7189c744cd0fa73405fb449f9ffe2935f28c37bec1f8b3c40",
          "md5": "e17a900a5a4a011b551ca9592816b51d",
          "sha256": "cc84599953cf5d1afc62590057be1054d2e06422a7034189e0a29b34b2944ede"
        },
        "downloads": -1,
        "filename": "tryst-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e17a900a5a4a011b551ca9592816b51d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27284,
        "upload_time": "2022-01-06T19:40:40",
        "upload_time_iso_8601": "2022-01-06T19:40:40.152434Z",
        "url": "https://files.pythonhosted.org/packages/2b/a2/dfab2a2de4a7189c744cd0fa73405fb449f9ffe2935f28c37bec1f8b3c40/tryst-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea50ace424610c956ac88b035581789610fe40309588d7bcccf759191f7f7e51",
          "md5": "458921684a5aff98a961be8aba11358b",
          "sha256": "1c23a74a9d265625a75ad4ae7801069353817e0a5fe2c5cadf01a4c2be02808a"
        },
        "downloads": -1,
        "filename": "tryst-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "458921684a5aff98a961be8aba11358b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28268,
        "upload_time": "2022-08-03T01:24:36",
        "upload_time_iso_8601": "2022-08-03T01:24:36.246820Z",
        "url": "https://files.pythonhosted.org/packages/ea/50/ace424610c956ac88b035581789610fe40309588d7bcccf759191f7f7e51/tryst-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb9efe6b6e5f07d09d6add80d44ac921a9c0356a95647ea710871a7725e1df02",
          "md5": "3ce09aae55ba9e3d495ab97d9be7b9eb",
          "sha256": "2969e8591e90653e73b956ddf073f33a826137c3c2abfe357f83e5a1f3b16dbe"
        },
        "downloads": -1,
        "filename": "tryst-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3ce09aae55ba9e3d495ab97d9be7b9eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28722,
        "upload_time": "2022-08-03T01:24:38",
        "upload_time_iso_8601": "2022-08-03T01:24:38.155519Z",
        "url": "https://files.pythonhosted.org/packages/cb/9e/fe6b6e5f07d09d6add80d44ac921a9c0356a95647ea710871a7725e1df02/tryst-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea50ace424610c956ac88b035581789610fe40309588d7bcccf759191f7f7e51",
        "md5": "458921684a5aff98a961be8aba11358b",
        "sha256": "1c23a74a9d265625a75ad4ae7801069353817e0a5fe2c5cadf01a4c2be02808a"
      },
      "downloads": -1,
      "filename": "tryst-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "458921684a5aff98a961be8aba11358b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28268,
      "upload_time": "2022-08-03T01:24:36",
      "upload_time_iso_8601": "2022-08-03T01:24:36.246820Z",
      "url": "https://files.pythonhosted.org/packages/ea/50/ace424610c956ac88b035581789610fe40309588d7bcccf759191f7f7e51/tryst-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb9efe6b6e5f07d09d6add80d44ac921a9c0356a95647ea710871a7725e1df02",
        "md5": "3ce09aae55ba9e3d495ab97d9be7b9eb",
        "sha256": "2969e8591e90653e73b956ddf073f33a826137c3c2abfe357f83e5a1f3b16dbe"
      },
      "downloads": -1,
      "filename": "tryst-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3ce09aae55ba9e3d495ab97d9be7b9eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 28722,
      "upload_time": "2022-08-03T01:24:38",
      "upload_time_iso_8601": "2022-08-03T01:24:38.155519Z",
      "url": "https://files.pythonhosted.org/packages/cb/9e/fe6b6e5f07d09d6add80d44ac921a9c0356a95647ea710871a7725e1df02/tryst-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}