{
  "info": {
    "author": "",
    "author_email": "Johannes Schriewer <j.schriewer@anfe.ma>",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.11",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Firebase cloud messaging for Django with original Google SDK.\n\n## Changelog\n\n- 2023-03-23: Version `0.2.0`\n  - Overhaul `FCMDevice` to be customizable\n  - Remove `FCM_USER_MODEL` and add `FCM_DEVICE_MODEL` config settings (see below)\n- 2023-03-10: Version `0.1.0`\n  - First beta release\n  - Standard push notifications\n  - Localized push notifications\n  - Sending in foreground and background with celery\n\n## Installation\n\n1. Requirements\n  - Add `firebase_push` to your `requirements.txt`/`Pipfile`/`pyproject.toml`\n  - Import the default settings at the end of your `settings.py`:\n    ```python\n    from firebase_push.conf.settings import *\n    ```\n  - Override default settings if needed (see next section)\n2. URLs\n  - Add urls to your `urlpatterns` in `urls.py`\n    ```python\n    from firebase_push.conf.urls import urlpatterns as firebase_push_urlpatterns\n\n    urlpatterns += firebase_push_urlpatterns\n    ```\n3. Application\n  - Add `firebase_push` and `rest_framework` to your `INSTALLED_APPS`\n    ```python\n    INSTALLED_APPS = [\n        \"firebase_push\",\n        \"rest_framework\",\n        \"admin_extra_buttons\",\n        ...\n    ]\n    ```\n4. Add a `FCMHistory` and `FCMDevice` class to your application:\n  ```python\n  from firebase_push.models import FCMHistoryBase, FCMDeviceBase\n\n  class FCMHistory(FCMHistoryBase):\n    pass\n\n  class FCMDevice(FCMDeviceBase):\n    pass\n  ```\n5. Point the setting `FCM_PUSH_HISTORY_MODEL` and `FCM_DEVICE_MODEL` to that class:\n  ```python\n  FCM_PUSH_HISTORY_MODEL = \"demo.FCMHistory\"\n  FCM_DEVICE_MODEL = \"demo.FCMDevice\"\n  ```\n6. Run `manage.py makemigrations` and `manage.py migrate`\n5. Do not forget to configure REST-Framework authentication (or supply CSRF\n   Tokens when calling the API :S)\n\n## Configuration\n\n### Required\n\nSet environment variable `GOOGLE_APPLICATION_CREDENTIALS` to the path to your\nservice account JSON file:\n\n```bash\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/service_account.json\n```\n\n#### To generate a private key file for your service account:\n\n1. In the Firebase console, open **Settings** > [Service Accounts](https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk).\n2. Click **Generate New Private Key**, then confirm by clicking **Generate Key**.\n3. Securely store the JSON file containing the key.\n\n### Optional\n\n- `FCM_FETCH_USER_FUNCTION`: (path) path to the function to call in your code\n  to fetch a user id to attach to the request. Will be called with the Django\n  `request` as single parameter, expected to return an id to a DB model\n  instance of the model used in your `FCMDevice` class.\n\n\n## Running\n\nIf you send your push notifications without `sync=True` you will need a running\ncelery worker.\n\nTo configure celery you will need at least the following in your `settings.py`\n\n```python\n# Celery broker URL for redis transport\nCELERY_BROKER_URL = f\"redis://localhost:6379/1\"\n```\n\nTo start the celery worker user something like this:\n\n```bash\nexport GOOGLE_APPLICATION_CREDENTIALS=serviceaccount.json # Point this to the google service account\nexport DJANGO_SETTINGS_MODULE=demo.settings.native # Point this to your config\ncelery --app demo worker # demo here stands as placeholder for your application\n```\n\nTo send Push Notifications manually there is an extra button in the Django admin for the `FCMHistory` class:\n\n![Send notification button screenshot](doc/send_notification_button.png)\n\n## API Endpoints for devices\n\n- `firebase-push/`: registration endpoint, call this on app-activation\n\nPayload:\n\n```json\n{\n\t\"registration_id\": \"<fcm_token>\",\n\t\"topics\": [ \"default\" ],\n\t\"platform\": \"ios\",\n\t\"app_version\": \"2.0\"\n}\n```\n\n- `registration_id`: FCM Token from Firebase SDK\n- `topics`: List of topics to subscribe to. If left out defaults to `default`\n- `platform`: app platform, one of `android`, `ios`, `web`, if left out defaults to `unknown`\n- `app_version`: app version string, if left out defaults to empty string\n\nReply:\n\n```json\n{\n\t\"registration_id\": \"<FCM token>\",\n\t\"topics\": [\n\t\t\"default\"\n\t],\n\t\"platform\": \"ios\",\n\t\"app_version\": \"2.0\",\n\t\"created_at\": \"2023-01-30T15:20:44.265191\",\n\t\"updated_at\": \"2023-01-30T15:20:44.265208\"\n}\n```\n\nYou may `POST` new values, autentication for the user is handled by REST-Framework. If the user of the registration\nchanges, the old registration is removed and a new one is created. This is done to avoid receiving notifications of\nother users when frequently switching accounts while testing the app.\n\nTo update for example the subscribed topics you may call `PATCH` on the endpoint with appended registration ID (like\n`firebase-push/<bla>`) and only specify the changed values in the payload. If the registration is currently recorded\nfor a different user, the old registration will be removed as with `POST`. Calling the endpoint with `PATCH` is possible\nbut the utility of this is limited, better stick to `POST` and include all values to make sure everything is recorded\nin the DB correctly.\n\nIf you call the endpoint with `GET` you will get a list of all registrations of the current user.\n\nIf you call the endpoint with `DELETE` and appended registration ID (like `firebase-push/<bla>`) the push registration\nwill be deleted from the server if the current user owns it and you will receive a `204 No Content` response.\n\n## DB Models\n\nThere are 3 Models of which one is an abstract model.\n\n1. `FCMDevice` aka `FCMDeviceBase`: The device registration, contains FCM tokens and some metadata about the device.\n  You can override the `user` field or add your own fields to modify this class.\n2. `FCMTopic`: A topic for which a device can register. Can be used to filter which messages to send to which devices\n3. `FCMHistory` aka `FCMHistoryBase`: This is the abstract model for the push notification history. You can add your\n  own fields to this to save additional information about a message.\n\n### `FCMDeviceBase`\n\n- `registration_id` the FCM Token\n- `user` user to which this device belongs, devices will cascade delete with this user\n- `topics` topics which the device subscribes to\n- `platform` platform as reported by the device on registration, one of `android`, `ios`, `web`, `unknown`\n- `app_version` stringified application version as reported by device\n- `created_at`, `updated_at`, `disabled_at` some dates used by the cleanup scripts\n\n### `FCMHistoryBase`\n\n- `message_id` internal UUID to identify messages that were sent in one batch\n- `message_data` JSON data that was sent to firebase\n- `device` device this message was sent to (will be set to `None` if the device is removed)\n- `user` the user that this message was sent to (will cascade delete the history if removed)\n- `topic` optional: topic this message was sent to\n- `status` one of `pending`, `sent`, `failed`\n- `error_message` if `status` is failed this contains the error message\n- `created_at`, `updated_at` some dates used by the cleanup scripts\n\n## On overriding `FCMHistoryBase`:\n\nif you override the history class to add custom data to it, it is probably a good idea to override the\n`PushMessage` classes too to hook into history item creation:\n\n```python\n# Data model\nfrom django.db import models\nfrom firebase_push.models import FCMHistoryBase\n\nclass FCMHistory(FCMHistoryBase):\n  foobar = models.CharField(max_length=255, null=False, blank=False)\n\n# Push message override\nfrom typing import Any\nfrom firebase_push.message import PushMessage\n\nclass MyPushMessage(PushMessage):\n\n  def __init__(self, title: str, body: str, link: Optional[str]=None, foobar: str=\"nothing\"):\n    super().__init(title, body, link=link)\n    self.foobar = foobar\n\n  def serialize(self) -> dict[str, Any]:\n    result = super().serialize()\n    result.update(dict(\n      foobar=self.foobar\n    ))\n    return result\n\n  def deserialize(self, data: dict[str, Any]):\n    super().deserialize(data)\n    self.foobar = data['foobar']\n\n  def create_history_entries(self, *args, **kwargs) -> list[FCMHistory]:\n    entries = super().create_history_entries(*args, **kwargs)\n\n    for entry in entries:\n      entry.foobar = self.foobar\n    \n    return entries\n```\n\n## Message sending\n\nTo send a message use one of the `PushMessageBase` subclasses like provided:\n\n- `PushMessage`: Basic push message class, no i18n logic\n- `LocalizedPushMessage`: Push message with i18n logic\n\nBasic interface is like this:\n\n```python\nfrom firebase_push.message import PushMessage\n\nmsg = PushMessage(\"Title\", \"body text\", link=\"http://google.com\")\nmsg.add_user(some_user)\nmsg.add_topic('test')\nmsg.send()\n```\n\nThis will send the message to all devices registered to the user `some_user` that subscribe the `test` topic.\nSending will be performed in the background via Celery task. The celery task will update the automatically\ncreated `FCMHistory` object once it has been processed. If you send to a topic that does not exist it is created on the\nspot, but will then of course reach no device.\n\nThere are optional additional attributes you may set for a message:\n\nCommon attributes:\n\n- `collapse_id`: If multiple messages with this ID are sent they are collapsed\n- `badge_count`: Badge count to display on app icon, may not work for all android devices, set to 0 to remove badge\n- `data_available`: Set to `True` to trigger the app to be launched in background for a data download.\n- `sound`: Play a sound for the notification, set to `default` to play default sound or to name of sound file in\n  app-bundle otherwise.\n- `data`: Custom dictionary of strings to append as data to the message\n\nAndroid specific:\n\n- `android_icon`: Icon for the notification\n- `color`: CSS-Style Hex color for the notification\n- `expiration`: Date until which the message is valid to be delivered\n- `is_priority`: Set to `True` to make it a priority message\n\nWeb specific:\n\n- `web_actions`: Actions for the push notifications, is a tuple: `(\"title\", \"action\", \"icon\")`\n- `web_icon`: Icon for the notification\n\n### `LocalizedPushMessage`\n\nTo send a localizable push message you can use Android style format strings and replacement parameters.\nWeb-Push notifications do not have a local stored translation table so they will be sent by using Django's\ntranslation facilities, so make sure to set the correct language environment before sending a message.\n\nTo create a localization for the Web-Push strings convert them to python `.format()` style strings and add\nthem to the gettext `.po` file.\n\nBasic interface works like this:\n\n```python\nfrom firebase_push.message import PushMessage\n\nmsg = PushMessage(\n  \"Title with %s\",\n  \"body number %d, string: %s\",\n  link=\"http://google.com\"\n  title_args=[\"placeholders\"],\n  body_args=[10, 'a string']\n)\nmsg.add_user(some_user)\nmsg.add_topic('test')\nmsg.send()\n```\n\nFor testing you can use `msg.send(sync=True)` to send the message immediately without involving celery\n\nThis will send a translateable message. The clients have to have translation tables.\n\n- Android needs just `Title with %s` and `body number %d, string: %s` in the strings\n- iOS will use something like `Title with %@` and `body number %@, string: %@`\n- For Django/Web you will need `Title with {:s}` and `body number {:d}, string: {:s}`\n\nIt is possible to add positioning hints:\n\n- Android `%1$s` and `%2$d` to declare parameters as first and second\n- iOS will have it replaced with `%1$@` and `%2$@`\n- For Django/Web use `{1:s}` and `{2:s}`\n\nThere are some additional attributes:\n\nApple specific:\n\n- `action_loc`: Identifier for the action item that is displayed (optional, will not display an action if undefined)\n\nWeb specific:\n\n- `web_actions`: `action` and `title` should be translatable strings or translation identifiers\n\n## Cleanup\n\nAutomatic cleanup of outdated device registrations and push notification history works by calling management commands.\nBy default history is removed after 6 months, device registrations are _disabled_ after 2 months as per recommendation\nfrom google. Disabled devices are removed after them being disabled for 2 months.\n\n- `python manage.py age_devices [-s <days>]`\n- `python manage.py cleanup_devices [-s <days>]`\n- `python manage.py cleanup_history [-s <days>]`\n\nAttention: As `firebase_push` does not control what is saved in the push notification history the `cleanup_history`\ncommand may fail on unknown database constraints. Please duplicate the management command if that may happen with your\nimplementation.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "django,utils",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "firebase-push",
    "package_url": "https://pypi.org/project/firebase-push/",
    "platform": null,
    "project_url": "https://pypi.org/project/firebase-push/",
    "project_urls": {
      "Home": "https://github.com/anfema/firebase_push"
    },
    "release_url": "https://pypi.org/project/firebase-push/0.2.1/",
    "requires_dist": [
      "Django>=4.1",
      "celery>=5.2",
      "firebase-admin>=6.0",
      "django-admin-extra-buttons",
      "djangorestframework>=3.14.0"
    ],
    "requires_python": ">=3.11",
    "summary": "Firebase push notifications for Django, based on official SDK",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17418575,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3614427fe1a572f4b6831c9ed8d0f9ce77373e53fb1625d88c59d7c935902832",
          "md5": "b20b16d8dd708284c0d267354d53debc",
          "sha256": "81af2262b92b33cd7125a657f6fa7ffed085ed815fef4c7e216172a7bf359354"
        },
        "downloads": -1,
        "filename": "firebase_push-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b20b16d8dd708284c0d267354d53debc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 26822,
        "upload_time": "2023-03-23T13:53:41",
        "upload_time_iso_8601": "2023-03-23T13:53:41.941380Z",
        "url": "https://files.pythonhosted.org/packages/36/14/427fe1a572f4b6831c9ed8d0f9ce77373e53fb1625d88c59d7c935902832/firebase_push-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "991b264329019bba6b91d37c8d181420be42e23de9189dad422a89d0967371c0",
          "md5": "8001a9a23f8723d46221072547db781c",
          "sha256": "6dbbe8fab8d783d74585fd7ee79937035edc1131ce25e96f119e6c7d2e7bca2b"
        },
        "downloads": -1,
        "filename": "firebase_push-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8001a9a23f8723d46221072547db781c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 22119,
        "upload_time": "2023-03-23T13:53:44",
        "upload_time_iso_8601": "2023-03-23T13:53:44.924885Z",
        "url": "https://files.pythonhosted.org/packages/99/1b/264329019bba6b91d37c8d181420be42e23de9189dad422a89d0967371c0/firebase_push-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79e1c72c8ca2af3323f68484159b1aa80568f8fe7934ac308dcd3ace344f7c81",
          "md5": "5c70612255f4aaa1ea68c772832cce8f",
          "sha256": "6e359e2b15292740e3026a9867b2892aae6f425534e79397eb0080e81e1f17ef"
        },
        "downloads": -1,
        "filename": "firebase_push-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c70612255f4aaa1ea68c772832cce8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 26552,
        "upload_time": "2023-03-23T16:44:49",
        "upload_time_iso_8601": "2023-03-23T16:44:49.615621Z",
        "url": "https://files.pythonhosted.org/packages/79/e1/c72c8ca2af3323f68484159b1aa80568f8fe7934ac308dcd3ace344f7c81/firebase_push-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36e5137b3a991a69dee8db4b7f5fb6f46b30427e83bb5a00f253470d8fce6385",
          "md5": "fbd8e35e12f9037a2d97eeb7b27b735d",
          "sha256": "ef493faad76c2e9bcf0e00d2acead238163b692c0da141b665d7ed861002c9da"
        },
        "downloads": -1,
        "filename": "firebase_push-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fbd8e35e12f9037a2d97eeb7b27b735d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 21905,
        "upload_time": "2023-03-23T16:44:53",
        "upload_time_iso_8601": "2023-03-23T16:44:53.771465Z",
        "url": "https://files.pythonhosted.org/packages/36/e5/137b3a991a69dee8db4b7f5fb6f46b30427e83bb5a00f253470d8fce6385/firebase_push-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79e1c72c8ca2af3323f68484159b1aa80568f8fe7934ac308dcd3ace344f7c81",
        "md5": "5c70612255f4aaa1ea68c772832cce8f",
        "sha256": "6e359e2b15292740e3026a9867b2892aae6f425534e79397eb0080e81e1f17ef"
      },
      "downloads": -1,
      "filename": "firebase_push-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c70612255f4aaa1ea68c772832cce8f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.11",
      "size": 26552,
      "upload_time": "2023-03-23T16:44:49",
      "upload_time_iso_8601": "2023-03-23T16:44:49.615621Z",
      "url": "https://files.pythonhosted.org/packages/79/e1/c72c8ca2af3323f68484159b1aa80568f8fe7934ac308dcd3ace344f7c81/firebase_push-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36e5137b3a991a69dee8db4b7f5fb6f46b30427e83bb5a00f253470d8fce6385",
        "md5": "fbd8e35e12f9037a2d97eeb7b27b735d",
        "sha256": "ef493faad76c2e9bcf0e00d2acead238163b692c0da141b665d7ed861002c9da"
      },
      "downloads": -1,
      "filename": "firebase_push-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fbd8e35e12f9037a2d97eeb7b27b735d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.11",
      "size": 21905,
      "upload_time": "2023-03-23T16:44:53",
      "upload_time_iso_8601": "2023-03-23T16:44:53.771465Z",
      "url": "https://files.pythonhosted.org/packages/36/e5/137b3a991a69dee8db4b7f5fb6f46b30427e83bb5a00f253470d8fce6385/firebase_push-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}