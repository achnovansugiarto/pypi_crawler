{
  "info": {
    "author": "Jeremy Herbert",
    "author_email": "jeremy.006@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# python-polyglot-turtle\n\nThis repository contains a python library for communicating with the polyglot-turtle firmware. It has been tested to work on Windows, Mac and Linux.\n\nTo install or upgrade, run\n\n```\npip install --upgrade polyglot-turtle\n```\n\nor \n\n```\npython -m pip install --upgrade polyglot-turtle\n```\n\nOnly python 3.6+ is supported. This driver does not expose any USB-to-serial functionality, for that you should use something like [pyserial](https://pypi.org/project/pyserial/).\n\n## Extra install instructions for Linux users\n\nThis library depends on [cython-hidapi](https://github.com/trezor/cython-hidapi) which requires you to install some extra binary dependencies. On Ubuntu (tested on 18.04 and 20.04), you can install these dependencies using the following command:\n\n```\nsudo apt-get install python3-dev libusb-1.0-0-dev libudev-dev\n```\n\nBy default, Linux does not allow access to USB or HID devices for a non-root user. To give access to your own user is simple. First, in `/etc/udev/rules.d`, create a new file called `99-polyglot-turtle.rules` and paste the following two lines in:\n\n```\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04d8\", ATTRS{idProduct}==\"eb74\", MODE=\"0660\", GROUP=\"plugdev\", TAG+=\"uaccess\", TAG+=\"udev-acl\", ENV{ID_MM_DEVICE_IGNORE}=\"1\"\nKERNEL==\"hidraw*\", ATTRS{idVendor}==\"04d8\", ATTRS{idProduct}==\"eb74\", MODE=\"0660\", GROUP=\"plugdev\", TAG+=\"uaccess\", TAG+=\"udev-acl\"\n```\n\nThis will give access to any user in the `plugdev` group. Now, just add yourself to the group:\n\n```\nsudo usermod -a -G plugdev <your username>\n```\n\n(you need to replace `<your username>` with your actual username on your computer).\n\nOnce this is done, reboot and everything should work.\n\n## Usage\n\nAlmost all code using this library will need two lines:\n\n```python\nfrom polyglot_turtle import PolyglotTurtleXiao\n\npt = PolyglotTurtleXiao()\n```\n\nThe first line imports the main class from the library, and the second line connects to the device. After that, you simply use the `pt` object to interact with your device.\n\nYou can connect to a specific device using its serial number if more than one is present:\n\n```python\nfrom polyglot_turtle import PolyglotTurtleXiao\n\npt = PolyglotTurtleXiao(serial_number=\"9B1EC96D5053574C342E3120FF02110D\")\n```\n\nAll devices have a unique serial number that is associated with the USB device. You can find this number in Windows using Device Manager, in Mac OS using System Report, and in Linux using `lsusb`. You can also use this library to return a list of the serial numbers of all connected devices:\n\n```python\nfrom polyglot_turtle import list_polyglot_turtle_xiao_devices\n\nprint(list_polyglot_turtle_xiao_devices())\n# prints all serial numbers, for example ['9B1EC96D5053574C342E3120FF02110D']\n```\n\n### GPIO\n\nThere are 4 GPIO pins on the polyglot-turtle-xiao numbered 0-3. All four of these pins can be used as a digital input or output by setting the pin direction:\n\n```python\nfrom polyglot_turtle import PolyglotTurtleXiao, PinDirection\n\npt = PolyglotTurtleXiao()\n\npt.gpio_set_direction(0, PinDirection.OUTPUT)  # set GPIO 0 to output\npt.gpio_set_direction(1, PinDirection.INPUT)  # set GPIO 1 to input\n```\n\nTo read from an input or write to an output, use the `gpio_set_level` and `gpio_get_level` functions respectively:\n\n```python\nfrom polyglot_turtle import PolyglotTurtleXiao, PinDirection\n\npt = PolyglotTurtleXiao()\n\npt.gpio_set_direction(0, PinDirection.OUTPUT)  # set GPIO0 to output\npt.gpio_set_level(0, True)  # set GPIO 0 to high\npt.gpio_set_level(0, False)  # set GPIO 0 to low\n\npt.gpio_set_direction(1, PinDirection.INPUT)  # set GPIO1 to input\nprint(pt.gpio_get_level(1))  # prints \"True\" or \"False\" depending on the state of GPIO1\n```\n\nWhen using a pin as an input, you can additionally enable a weak internal pullup or pulldown resistor:\n\n```python\nfrom polyglot_turtle import PolyglotTurtleXiao, PinDirection, PinPullMode\n\npt = PolyglotTurtleXiao()\npt.gpio_set_direction(1, PinDirection.INPUT)  # set GPIO1 to input\n\npt.gpio_set_pull(1, PinPullMode.PULL_UP)  # enable the pullup\npt.gpio_set_pull(1, PinPullMode.PULL_DOWN)  # enable the pulldown\npt.gpio_set_pull(1, PinPullMode.NONE)  # leave the input floating\n\n```\n\n### SPI\n\nTo use the [Serial Peripheral Interface](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface) (SPI), connect one of the GPIO pins to the CS pin of your target device, and otherwise connect MISO, MOSI and SCK as usual.\n\nThe polyglot-turtle firmware supports a single SPI operation, called 'exchange'. This can be used to interact with any SPI device, and even some non-SPI devices too! In an exchange operation, the polyglot-turtle firmware will write all of the bytes provided to the target device, and return all of the bytes read back from the device. As SPI requires the device to shift out one byte for every byte shifted in, you will receive the same number of bytes that was written.\n\nAn SPI exchange requires you to send the following parameters to the device:\n\n- The data to send\n- The SPI clock rate (100kHz to 10MHz)\n- The [SPI mode](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface#Mode_numbers) (default 0 if not specified)\n- The transaction timeout in milliseconds, after which it will be assumed that the command execution failed (default 50ms if not specified)\n- the CS pin to set low and then high automatically (default is to not change any GPIO pins unless one is specified)\n\n```python\nfrom polyglot_turtle import PolyglotTurtleXiao, PinDirection\n\npt = PolyglotTurtleXiao()\npt.gpio_set_direction(0, PinDirection.OUTPUT)  # GPIO0 will be used as the CS pin\npt.gpio_set_level(0, True)  # set the CS pin to high by default\n\n# perform a transaction with manual CS control\npt.gpio_set_level(0, False)  # set CS low\nprint(pt.spi_exchange(b\"\\x01\\x02\\x03\", clock_rate=100000, mode=0))\npt.gpio_set_level(0, True)  # set CS high\n\n# perform the same transaction but with automatic CS control\nprint(pt.spi_exchange(b\"\\x01\\x02\\x03\", clock_rate=100000, mode=0, cs_pin=0))\n\n# perform the same automatic CS transaction but with a 1 second timeout\nprint(pt.spi_exchange(b\"\\x01\\x02\\x03\", clock_rate=100000, mode=0, cs_pin=0, transaction_timeout_ms=1000))\n```\n\n### I2C\n\nAlmost all [Inter-Integrated Circuit](https://en.wikipedia.org/wiki/I%C2%B2C) (I2C) transactions can be broken down into combinations of three operations:\n\n1. (Write operation) START, Address + Write, write N bytes, STOP\n2. (Read operation) START, Address + Read, read N bytes, STOP\n2. (Write-then-read operation) START, Address + Write, write N bytes, REPEATED START, Address + Read, read N bytes, STOP\n\nThe polyglot-turtle firmware supports all three of these operations using a single function, `i2c_exchange`. This function takes the following arguments:\n\n- The target device address (right aligned, between 0 and 127 inclusive)\n- The data to write (default is empty)\n- The number of bytes to read (default is 0)\n- The I2C bus clock rate (one of three specific values)\n- The transaction timeout in milliseconds, after which it will be assumed that the command execution failed (default 50ms if not specified)\n\nThe type of operation is selected simply by the number of bytes provided to write, and the number of bytes requested to read. \n\n1. (Write operation) If there are bytes to write and the number of bytes to read is 0\n2. (Read operation) If there are no bytes to write and the number of bytes to read is > 0\n3. (Write-then-read operation) If there are both bytes to write and the number of bytes to read is > 0\n\nSee below for some examples:\n\n```python\nfrom polyglot_turtle import PolyglotTurtleXiao, I2cClockRate\n\npt = PolyglotTurtleXiao()\naddress = 0x32  # device we are talking to is at address 0x32\n\n# perform a write transction with the bytes 0x12 0x34\npt.i2c_exchange(address, write_data=b\"\\x12\\x34\", clock_rate=I2cClockRate.STANDARD)  \n\n# perform a read operation and read 4 bytes\npt.i2c_exchange(address, read_size=4, clock_rate=I2cClockRate.STANDARD)  \n\n# perform a write-then-read operation where 0x12 0x34 is written and then 4 bytes are read back\npt.i2c_exchange(address, write_data=b\"\\x12\\x34\", read_size=4, clock_rate=I2cClockRate.STANDARD)  \n```\n\nSince the I2C standard only allows three specific clock rates, the polyglot-turtle firmware also only supports these three speeds:\n\n- `STANDARD`: 100kHz\n- `FAST`: 400kHz\n- `FAST_PLUS`: 1MHz\n\n### PWM\n\n[Pulse Width Modulation (PWM)](https://en.wikipedia.org/wiki/Pulse-width_modulation) signals can be used for driving motors and dimming LEDs. PWM can be enabled on GPIO pins if it is supported (see device pinout for more information).\n\nTo use the PWM functionality, one must first call the function `pwm_get_info`. This will return an array containing information about the PWM capabilities of the device: \n\n1. The first element of the array is the maximum value the internal counter can count up to\n2. The second element is the maximum value for the compare threshold\n3. The final element is an array of all possible counter clock rates. The fastest clock rate will be element 0, with any others sorted in order of decreasing frequency.\n\nTo instruct the device to output a PWM signal, you need to pass the following arguments to `pwm_set`:\n\n- the gpio pin number to use for the output\n- the counter period \n- the counter duty cycle \n- optionally, the clock rate index (the index of the clock rate you wish to use from the clock rate array)\n\nNote that all of these values should be integers, not floating point/decimal numbers.\n\nThe counter model used by the polyglot-turtle device is fairly simple. The counter will count from 0 to the counter period value at the specified clock rate. When the counter period value is reached, the counter will reset to 0 and begin counting up again. The PWM output is controlled by the comparison between the current counter value and the supplied duty cycle value:\n\n1. if the counter < duty cycle, set output high\n2. else set output low\n\nFor an example of using this functionality, take a look at the `pwm_servo.py` example in this repository. This example generates a PWM signal with a 20ms period and a 1-2ms varying duty cycle to drive a servo motor.\n\n### DAC\n\nA [Digital to Analog Converter (DAC)](https://en.wikipedia.org/wiki/Digital-to-analog_converter) transforms a number into a voltage across a specific voltage range. To use the DAC, one can request the range information about the DAC, and then use that to instruct the DAC to output a specific voltage.\n\n```python\nfrom polyglot_turtle import PolyglotTurtleXiao\n\npt = PolyglotTurtleXiao()\nmaximum_dac_value, maximum_dac_voltage = pt.dac_get_info()\n\nvoltage_to_output = 1.2  # volts\ndac_value = int(voltage_to_output * (maximum_dac_value+1)/maximum_dac_voltage)\n\npt.dac_set(0, dac_value)\n```\n\nThe `dac_get_info` function returns two numbers:\n\n1. The maximum value the DAC will accept (2^(N-1) for an N bit DAC)\n2. The maximum voltage that the DAC is able to output\n\nUsing those two pieces of information, one can calculate the DAC value to use to generate a specific output voltage using the `dac_set` function. The first argument of the `dac_set` function is the GPIO number of the pin to use, and the second argument is the DAC value as an integer. Note that the result of any calculations must be converted to an integer before passing it to the `dac_set` function.\n\nPlease note that the output will be limited by the resolution and performance of the DAC in the device.\n\n### ADC\n\nThe [Analog to Digital Converter (ADC)](https://en.wikipedia.org/wiki/Analog-to-digital_converter) functionality is used to read an analog voltage and report the value as a number. To use it, pass the GPIO number for the pin you wish to read the voltage on to the `adc_get` function:\n\n```python\nfrom polyglot_turtle import PolyglotTurtleXiao\n\npt = PolyglotTurtleXiao()\nreading, max_reading, max_voltage = pt.adc_get(1)\n\n# calculate the actual voltage at the pin\nvoltage_reading = reading * max_voltage / (max_reading+1)\n```\n\nThis function returns three numbers:\n\n1. The ADC conversion result as an integer\n2. The maximum possible reading that the ADC could return as an integer (typically 2^(N-1) for an N bit ADC)\n3. The voltage which corresponds to the maximum ADC reading\n\nYou can then calculate the actual voltage reading using the formula in the example above. Note that the reading will be limited by the resolution and performance of the ADC in the device.\n\nThe file `adc_example.py` shows a combination of using the DAC to generate a voltage, and then a conversion of that voltage back into a number using the ADC.\n\n## Programming AVR microcontrollers (experimental)\n\nIt is possible to use python-polyglot-turtle to program AVR microcontrollers via the standard ISP interface. However, since there are no hardware protection circuits on the polyglot-turtle, there are a few limitations you need to be aware of:\n\n1. You should only use this functionality if the SPI port on the AVR is unused by your firmware (the `MISO`, `MOSI` and `SCK` pins).\n2. There should be nothing already connected to the `RESET` pin on the AVR except for a pull-up resistor.\n3. The AVR must be powered by a 3.3V supply\n\nIf your circuit meets all of these requirements, you can program your microcontroller directly with the polyglot-turtle. \n\n### Software setup\n\nThis functionality relies on the open source tool [avrdude](https://github.com/avrdudes/avrdude) to generate the flashing instructions for the polyglot-turtle to use. \n\nIf you are on Windows, you can install a [special package](https://github.com/jeremyherbert/avrdude_windows_pypi) with `pip` that allows python to access `avrdude`:\n\n```\npython -m pip install --upgrade avrdude-windows\n```\n\nOn Mac you can use the [Homebrew package manager](https://brew.sh/):\n\n```\nbrew install avrdude\n```\n\nIf you are on Linux, you can simply use your package manager to install this tool:\n\n```\nsudo apt install avrdude\n```\n\n### Flashing your firmware\n\nPlease see the `avr_program.py` example. This writes the firmware file `test.hex` to an atmega328p.\n\n## Further examples\n\nThere are some simple examples in the git repository you can look at for more information.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jeremyherbert/python-polyglot-turtle",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "polyglot-turtle",
    "package_url": "https://pypi.org/project/polyglot-turtle/",
    "platform": null,
    "project_url": "https://pypi.org/project/polyglot-turtle/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jeremyherbert/python-polyglot-turtle/issues",
      "Homepage": "https://github.com/jeremyherbert/python-polyglot-turtle"
    },
    "release_url": "https://pypi.org/project/polyglot-turtle/0.3.0/",
    "requires_dist": [
      "setuptools (>=42)",
      "wheel",
      "hidapi",
      "cbor2",
      "packaging",
      "simplehdlc"
    ],
    "requires_python": ">=3.6",
    "summary": "A python driver for the polyglot-turtle firmware",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16883169,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab9a99a4e20cc2e61cb33274cfc1557090b93814b930f3cdab5e495239601139",
          "md5": "cf66887b0d00030122a1cc0fdd792ce4",
          "sha256": "009b6f7febc941d3a2a415a0e11c3b2520924093f57da3bdf4ca592376f3cab7"
        },
        "downloads": -1,
        "filename": "polyglot_turtle-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf66887b0d00030122a1cc0fdd792ce4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5355,
        "upload_time": "2020-07-29T03:38:26",
        "upload_time_iso_8601": "2020-07-29T03:38:26.064214Z",
        "url": "https://files.pythonhosted.org/packages/ab/9a/99a4e20cc2e61cb33274cfc1557090b93814b930f3cdab5e495239601139/polyglot_turtle-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47a33563c6e0bed5295fadf1a9753b435c4a357142616c3aa79a55e6b3f8c132",
          "md5": "9e284519ac203c1cbee45a4ab3061f40",
          "sha256": "6c76ce58a51e343952f9310f9d6485e7a27d9c2413b8dda222320757fd8c3e7d"
        },
        "downloads": -1,
        "filename": "polyglot-turtle-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9e284519ac203c1cbee45a4ab3061f40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3524,
        "upload_time": "2020-07-29T03:38:28",
        "upload_time_iso_8601": "2020-07-29T03:38:28.404519Z",
        "url": "https://files.pythonhosted.org/packages/47/a3/3563c6e0bed5295fadf1a9753b435c4a357142616c3aa79a55e6b3f8c132/polyglot-turtle-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bbcef8d9d8e452c930766b79b7e6cc3993e02b43ee74ad629e747d5cfb56bf4",
          "md5": "60b6e5f92a99979e27562d7f43eb65df",
          "sha256": "bfc4c8c2c71443181e53470c8c34cbbf13abd241416e0a864f0e694cf567695b"
        },
        "downloads": -1,
        "filename": "polyglot_turtle-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60b6e5f92a99979e27562d7f43eb65df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5370,
        "upload_time": "2020-07-31T01:27:52",
        "upload_time_iso_8601": "2020-07-31T01:27:52.811439Z",
        "url": "https://files.pythonhosted.org/packages/1b/bc/ef8d9d8e452c930766b79b7e6cc3993e02b43ee74ad629e747d5cfb56bf4/polyglot_turtle-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7881f4c963fcb20fcc134a4b033fa0cff83306b71787417e280f144c424be662",
          "md5": "bca829977f85a349d553d08143f0f883",
          "sha256": "2d8c3080fbfa64ced3f1aa7a1165e4fa9b4bc9cbcebfd3c0e499669eb5bf72c3"
        },
        "downloads": -1,
        "filename": "polyglot-turtle-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bca829977f85a349d553d08143f0f883",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3549,
        "upload_time": "2020-07-31T01:27:53",
        "upload_time_iso_8601": "2020-07-31T01:27:53.964487Z",
        "url": "https://files.pythonhosted.org/packages/78/81/f4c963fcb20fcc134a4b033fa0cff83306b71787417e280f144c424be662/polyglot-turtle-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e0fe99e33000af15fe9bda45ee9dd7c90fff01ada65ccb0ddb9e6a2cee8e659",
          "md5": "fe2f9698dbe25e3437104cbfa276eda7",
          "sha256": "00120848e83681cd613d4b42c7947837f0b789add8cdfc2265d73523226824ba"
        },
        "downloads": -1,
        "filename": "polyglot_turtle-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe2f9698dbe25e3437104cbfa276eda7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5419,
        "upload_time": "2020-07-31T01:41:37",
        "upload_time_iso_8601": "2020-07-31T01:41:37.069059Z",
        "url": "https://files.pythonhosted.org/packages/0e/0f/e99e33000af15fe9bda45ee9dd7c90fff01ada65ccb0ddb9e6a2cee8e659/polyglot_turtle-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a99a6ad6fc4b3853eeee2a241f2721d9b6a73b1277fcff7529cf4528ebfa6bc5",
          "md5": "913706418bcd458834d2b7a8874c92f4",
          "sha256": "318fa1a6b505237ba18383fc9f0c7d7399cff39500578c0e226dbf8c5c809911"
        },
        "downloads": -1,
        "filename": "polyglot-turtle-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "913706418bcd458834d2b7a8874c92f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3593,
        "upload_time": "2020-07-31T01:41:38",
        "upload_time_iso_8601": "2020-07-31T01:41:38.629461Z",
        "url": "https://files.pythonhosted.org/packages/a9/9a/6ad6fc4b3853eeee2a241f2721d9b6a73b1277fcff7529cf4528ebfa6bc5/polyglot-turtle-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86e212ea803779568c88199a280947e5b6e20b3d7270ce660e89b9ac92d0ec7a",
          "md5": "4df968ea3dad481def0f5051c588b95f",
          "sha256": "f0d22973e1a5180348315925e57f0693b4c9993fa3b08a783eedfdd3fba79ab0"
        },
        "downloads": -1,
        "filename": "polyglot_turtle-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4df968ea3dad481def0f5051c588b95f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7955,
        "upload_time": "2020-07-31T04:02:34",
        "upload_time_iso_8601": "2020-07-31T04:02:34.142077Z",
        "url": "https://files.pythonhosted.org/packages/86/e2/12ea803779568c88199a280947e5b6e20b3d7270ce660e89b9ac92d0ec7a/polyglot_turtle-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "009dce7c2c247b6e2fac38fa016e676b29b3062483dc8712504ede563f6c4dc4",
          "md5": "58b6c222936ab4e4cefeff9a63d8837c",
          "sha256": "8484559ff8ba7fc33c8c73f80ea6e6ebf111246fba2634163859c5f4f44cede5"
        },
        "downloads": -1,
        "filename": "polyglot-turtle-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "58b6c222936ab4e4cefeff9a63d8837c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6502,
        "upload_time": "2020-07-31T04:02:36",
        "upload_time_iso_8601": "2020-07-31T04:02:36.848746Z",
        "url": "https://files.pythonhosted.org/packages/00/9d/ce7c2c247b6e2fac38fa016e676b29b3062483dc8712504ede563f6c4dc4/polyglot-turtle-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb3a4d80571dc802471058435dc975befeaaba57d8f8a369ce612eee88775b38",
          "md5": "4ff4a91760609c9c32953dc7f5d48e2d",
          "sha256": "74abcae25a0a802d7d1e6c79c6fd6abbe8754b13ec415d89d2fd65cab1b96bd2"
        },
        "downloads": -1,
        "filename": "polyglot_turtle-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ff4a91760609c9c32953dc7f5d48e2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9458,
        "upload_time": "2021-05-30T02:59:00",
        "upload_time_iso_8601": "2021-05-30T02:59:00.435243Z",
        "url": "https://files.pythonhosted.org/packages/cb/3a/4d80571dc802471058435dc975befeaaba57d8f8a369ce612eee88775b38/polyglot_turtle-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd76c26380e1183ca8255bab27f57039d9967ce0dede795a3a3b4b79fa51a2f4",
          "md5": "2c19589c8603e15db9141a27b6b2078e",
          "sha256": "ae0426d47211e809ea0942e031733aed20b8bc23d62f104da57ff13480ef5352"
        },
        "downloads": -1,
        "filename": "polyglot-turtle-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c19589c8603e15db9141a27b6b2078e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12362,
        "upload_time": "2021-05-30T02:59:02",
        "upload_time_iso_8601": "2021-05-30T02:59:02.198823Z",
        "url": "https://files.pythonhosted.org/packages/dd/76/c26380e1183ca8255bab27f57039d9967ce0dede795a3a3b4b79fa51a2f4/polyglot-turtle-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5246f28ef23b850752ffed3c1b831b032c7de3014c65b1dc5c3ffcd4991be792",
          "md5": "16f8cf3ef64f1c253e7ec3980994f001",
          "sha256": "8928496fa3bdbd4acbf07a0e02311660dd43e8d418fd1fd50469bed9b4c39e5b"
        },
        "downloads": -1,
        "filename": "polyglot_turtle-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16f8cf3ef64f1c253e7ec3980994f001",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9595,
        "upload_time": "2021-08-10T04:21:31",
        "upload_time_iso_8601": "2021-08-10T04:21:31.925776Z",
        "url": "https://files.pythonhosted.org/packages/52/46/f28ef23b850752ffed3c1b831b032c7de3014c65b1dc5c3ffcd4991be792/polyglot_turtle-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b9e1895c3207502fbd380fcbda7b5ea73d113a855f7ec4642201cbd02e6bedb",
          "md5": "d3a878a9d70a9c968012cbea815fb3ae",
          "sha256": "37f26b4f65dba1f7678810d29f42a93f363f60047d506beacd664b81c478d5f2"
        },
        "downloads": -1,
        "filename": "polyglot-turtle-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d3a878a9d70a9c968012cbea815fb3ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12501,
        "upload_time": "2021-08-10T04:21:33",
        "upload_time_iso_8601": "2021-08-10T04:21:33.569864Z",
        "url": "https://files.pythonhosted.org/packages/2b/9e/1895c3207502fbd380fcbda7b5ea73d113a855f7ec4642201cbd02e6bedb/polyglot-turtle-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad0bbcd1ba542543611c82e869691035f4d4f3ba952db4e0a5d1fb8e91a5e1da",
          "md5": "e672b02147c322101ab2372940ba3767",
          "sha256": "e1028f2495c80493a5a5e9e537f36d058bcedb4cfa95156bd7e6bbac0710175b"
        },
        "downloads": -1,
        "filename": "polyglot_turtle-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e672b02147c322101ab2372940ba3767",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16549,
        "upload_time": "2023-02-16T03:09:57",
        "upload_time_iso_8601": "2023-02-16T03:09:57.846044Z",
        "url": "https://files.pythonhosted.org/packages/ad/0b/bcd1ba542543611c82e869691035f4d4f3ba952db4e0a5d1fb8e91a5e1da/polyglot_turtle-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad0bbcd1ba542543611c82e869691035f4d4f3ba952db4e0a5d1fb8e91a5e1da",
        "md5": "e672b02147c322101ab2372940ba3767",
        "sha256": "e1028f2495c80493a5a5e9e537f36d058bcedb4cfa95156bd7e6bbac0710175b"
      },
      "downloads": -1,
      "filename": "polyglot_turtle-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e672b02147c322101ab2372940ba3767",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16549,
      "upload_time": "2023-02-16T03:09:57",
      "upload_time_iso_8601": "2023-02-16T03:09:57.846044Z",
      "url": "https://files.pythonhosted.org/packages/ad/0b/bcd1ba542543611c82e869691035f4d4f3ba952db4e0a5d1fb8e91a5e1da/polyglot_turtle-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}