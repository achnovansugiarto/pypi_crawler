{
  "info": {
    "author": "Shinnng",
    "author_email": "shinnng@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Platon Keys\n\n\nA common API for Platon key operations with pluggable backends.\n\n\n> This library and repository was previously located at https://github.com/pipermerriam/platon-keys.  It was transferred to the Platon foundation github in November 2017 and renamed to `platon-keys`.  The PyPi package was also renamed from `platon-keys` to `platon-keys`.\n\n## Installation\n\n```sh\npip install platon-keys\n```\n\n## Development\n\n```sh\npip install -e .[dev]\n```\n\n\n### Running the tests\n\nYou can run the tests with:\n\n```sh\npy.test tests\n```\n\nOr you can install `tox` to run the full test suite.\n\n\n### Releasing\n\nPandoc is required for transforming the markdown README to the proper format to\nrender correctly on pypi.\n\nFor Debian-like systems:\n\n```\napt install pandoc\n```\n\nOr on OSX:\n\n```sh\nbrew install pandoc\n```\n\nTo release a new version:\n\n```sh\nmake release bump=$$VERSION_PART_TO_BUMP$$\n```\n\n\n#### How to bumpversion\n\nThe version format for this repo is `{major}.{minor}.{patch}` for stable, and\n`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump,\nlike `make release bump=minor` or `make release bump=devnum`.\n\nIf you are in a beta version, `make release bump=stage` will switch to a stable.\n\nTo issue an unstable version when the current version is stable, specify the\nnew version explicitly, like `make release bump=\"--new-version 2.0.0-alpha.1 devnum\"`\n\n\n\n## QuickStart\n\n```python\n>>> from platon_keys import keys\n>>> pk = keys.PrivateKey(b'\\x01' * 32)\n>>> signature = pk.sign_msg(b'a message')\n>>> pk\n'0x0101010101010101010101010101010101010101010101010101010101010101'\n>>> pk.public_key\n'0x1b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f70beaf8f588b541507fed6a642c5ab42dfdf8120a7f639de5122d47a69a8e8d1'\n>>> signature\n'0xccda990dba7864b79dc49158fea269338a1cf5747bc4c4bf1b96823e31a0997e7d1e65c06c5bf128b7109e1b4b9ba8d1305dc33f32f624695b2fa8e02c12c1e000'\n>>> pk.public_key.to_checksum_address()\n'0x1a642f0E3c3aF545E7AcBD38b07251B3990914F1'\n>>> signature.verify_msg(b'a message', pk.public_key)\nTrue\n>>> signature.recover_public_key_from_msg(b'a message') == pk.public_key\nTrue\n```\n\n\n## Documentation\n\n### `KeyAPI(backend=None)`\n\nThe `KeyAPI` object is the primary API for interacting with the `platon-keys`\nlibary.  The object takes a single optional argument in its constructor which\ndesignates what backend will be used for eliptical curve cryptography\noperations.  The built-in backends are:\n\n* `platon_keys.backends.NativeECCBackend`: A pure python implementation of the ECC operations.\n* `platon_keys.backends.CoinCurveECCBackend`: Uses the [`coincurve`](https://github.com/ofek/coincurve) library for ECC operations.\n\nBy default, `platon-keys` will *try* to use the `CoinCurveECCBackend`,\nfalling back to the `NativeECCBackend` if the `coincurve` library is not\navailable.\n\n> Note: The `coincurve` library is not automatically installed with `platon-keys` and must be installed separately.\n\nThe `backend` argument can be given in any of the following forms.\n\n* Instance of the backend class\n* The backend class\n* String with the dot-separated import path for the backend class.\n\n```python\n>>> from platon_keys import KeyAPI\n>>> from platon_keys.backends import NativeECCBackend\n# These are all the same\n>>> keys = KeyAPI(NativeECCBackend)\n>>> keys = KeyAPI(NativeECCBackend())\n>>> keys = KeyAPI('platon_keys.backends.NativeECCBackend')\n# Or for the coincurve base backend\n>>> keys = KeyAPI('platon_keys.backends.CoinCurveECCBackend')\n```\n\nThe backend can also be configured using the environment variable\n`ECC_BACKEND_CLASS` which should be set to the dot-separated python import path\nto the desired backend.\n\n```python\n>>> import os\n>>> os.environ['ECC_BACKEND_CLASS'] = 'platon_keys.backends.CoinCurveECCBackend'\n```\n\n\n### `KeyAPI.ecdsa_sign(message_hash, private_key) -> Signature`\n\nThis method returns a signature for the given `message_hash`, signed by the\nprovided `private_key`.\n\n* `message_hash`: **must** be a byte string of length 32\n* `private_key`: **must** be an instance of `PrivateKey`\n\n\n### `KeyAPI.ecdsa_verify(message_hash, signature, public_key) -> bool`\n\nReturns `True` or `False` based on whether the provided `signature` is a valid\nsignature for the provided `message_hash` and `public_key`.\n\n* `message_hash`: **must** be a byte string of length 32\n* `signature`: **must** be an instance of `Signature`\n* `public_key`: **must** be an instance of `PublicKey`\n\n\n### `KeyAPI.ecdsa_recover(message_hash, signature) -> PublicKey`\n\nReturns the `PublicKey` instances recovered from the given `signature` and\n`message_hash`.\n\n* `message_hash`: **must** be a byte string of length 32\n* `signature`: **must** be an instance of `Signature`\n\n\n### `KeyAPI.private_key_to_public_key(private_key) -> PublicKey`\n\nReturns the `PublicKey` instances computed from the given `private_key`\ninstance.\n\n* `private_key`: **must** be an instance of `PublicKey`\n\n\n### Common APIs for `PublicKey`, `PrivateKey` and `Signature`\n\nThere is a common API for the following objects.\n\n* `PublicKey`\n* `PrivateKey`\n* `Signature`\n\nEach of these objects has all of the following APIs.\n\n* `obj.to_bytes()`: Returns the object in it's canonical `bytes` serialization.\n* `obj.to_hex()`: Returns a text string of the hex encoded canonical representation.\n\n\n### `KeyAPI.PublicKey(public_key_bytes)`\n\nThe `PublicKey` class takes a single argument which must be a bytes string with length 64.\n\n> Note that there are two other common formats for public keys: 65 bytes with a leading `\\x04` byte\n> and 33 bytes starting with either `\\x02` or `\\x03`. To use the former with the `PublicKey` object,\n> remove the first byte. For the latter, refer to `PublicKey.from_compressed_bytes`.\n\nThe following methods are available:\n\n\n#### `PublicKey.from_compressed_bytes(compressed_bytes) -> PublicKey`\n\nThis `classmethod` returns a new `PublicKey` instance computed from its compressed representation.\n\n* `compressed_bytes` **must** be a byte string of length 33 starting with `\\x02` or `\\x03`.\n\n\n#### `PublicKey.from_private(private_key) -> PublicKey`\n\nThis `classmethod` returns a new `PublicKey` instance computed from the\ngiven `private_key`.  \n\n* `private_key` may either be a byte string of length 32 or an instance of the `KeyAPI.PrivateKey` class.\n\n\n#### `PublicKey.recover_from_msg(message, signature) -> PublicKey`\n\nThis `classmethod` returns a new `PublicKey` instance computed from the\nprovided `message` and `signature`.\n\n* `message` **must** be a byte string\n* `signature` **must** be an instance of `KeyAPI.Signature`\n\n\n#### `PublicKey.recover_from_msg_hash(message_hash, signature) -> PublicKey`\n\nSame as `PublicKey.recover_from_msg` except that `message_hash` should be the Keccak\nhash of the `message`.\n\n\n#### `PublicKey.verify_msg(message, signature) -> bool`\n\nThis method returns `True` or `False` based on whether the signature is a valid\nfor the given message.\n\n\n#### `PublicKey.verify_msg_hash(message_hash, signature) -> bool`\n\nSame as `PublicKey.verify_msg` except that `message_hash` should be the Keccak\nhash of the `message`.\n\n\n#### `PublicKey.to_compressed_bytes() -> bytes`\n\nReturns the compressed representation of this public key.\n\n\n#### `PublicKey.to_address() -> text`\n\nReturns the hex encoded platon address for this public key.\n\n\n#### `PublicKey.to_checksum_address() -> text`\n\nReturns the ERC55 checksum formatted platon address for this public key.\n\n\n#### `PublicKey.to_canonical_address() -> bytes`\n\nReturns the 20-byte representation of the platon address for this public key.\n\n\n### `KeyAPI.PrivateKey(private_key_bytes)`\n\nThe `PrivateKey` class takes a single argument which must be a bytes string with length 32.\n\nThe following methods and properties are available\n\n\n#### `PrivateKey.public_key`\n\nThis *property* holds the `PublicKey` instance coresponding to this private key.\n\n\n#### `PrivateKey.sign_msg(message) -> Signature`\n\nThis method returns a signature for the given `message` in the form of a\n`Signature` instance\n\n* `message` **must** be a byte string.\n\n\n#### `PrivateKey.sign_msg_hash(message_hash) -> Signature`\n\nSame as `PrivateKey.sign` except that `message_hash` should be the Keccak\nhash of the `message`.\n\n\n### `KeyAPI.Signature(signature_bytes=None, vrs=None)`\n\nThe `Signature` class can be instantiated in one of two ways.\n\n* `signature_bytes`: a bytes string with length 65.\n* `vrs`: a 3-tuple composed of the integers `v`, `r`, and `s`.\n\n> Note: If using the `signature_bytes` to instantiate, the byte string should be encoded as `r_bytes | s_bytes | v_bytes` where `|` represents concatenation.  `r_bytes` and `s_bytes` should be 32 bytes in length.  `v_bytes` should be a single byte `\\x00` or `\\x01`.\n\nSignatures are expected to use `1` or `0` for their `v` value.\n\nThe following methods and properties are available\n\n\n#### `Signature.v`\n\nThis property returns the `v` value from the signature as an integer.\n\n\n#### `Signature.r`\n\nThis property returns the `r` value from the signature as an integer.\n\n\n#### `Signature.s`\n\nThis property returns the `s` value from the signature as an integer.\n\n\n#### `Signature.vrs`\n\nThis property returns a 3-tuple of `(v, r, s)`.\n\n\n#### `Signature.verify_msg(message, public_key) -> bool`\n\nThis method returns `True` or `False` based on whether the signature is a valid\nfor the given public key.\n\n* `message`: **must** be a byte string.\n* `public_key`: **must** be an instance of `PublicKey`\n\n\n#### `Signature.verify_msg_hash(message_hash, public_key) -> bool`\n\nSame as `Signature.verify_msg` except that `message_hash` should be the Keccak\nhash of the `message`.\n\n\n#### `Signature.recover_public_key_from_msg(message) -> PublicKey`\n\nThis method returns a `PublicKey` instance recovered from the signature.\n\n* `message`: **must** be a byte string.\n\n\n#### `Signature.recover_public_key_from_msg_hash(message_hash) -> PublicKey`\n\nSame as `Signature.recover_public_key_from_msg` except that `message_hash`\nshould be the Keccak hash of the `message`.\n\n\n### Exceptions\n\n#### `platon_api.exceptions.ValidationError`\n\nThis error is raised during instantaition of any of the `PublicKey`,\n`PrivateKey` or `Signature` classes if their constructor parameters are\ninvalid.\n\n\n#### `platon_api.exceptions.BadSignature`\n\nThis error is raised from any of the `recover` or `verify` methods involving\nsignatures if the signature is invalid.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/platonnetwork/platon-keys",
    "keywords": "platon",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "platon-keys",
    "package_url": "https://pypi.org/project/platon-keys/",
    "platform": null,
    "project_url": "https://pypi.org/project/platon-keys/",
    "project_urls": {
      "Homepage": "https://github.com/platonnetwork/platon-keys"
    },
    "release_url": "https://pypi.org/project/platon-keys/1.2.0/",
    "requires_dist": [
      "platon-utils (>=1.2.0)",
      "platon-typing (>=1.2.0)",
      "coincurve (<13.0.0,>=7.0.0) ; extra == 'coincurve'",
      "tox (==3.20.0) ; extra == 'dev'",
      "bumpversion (==0.5.3) ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "platon-utils (>=1.2.0) ; extra == 'dev'",
      "platon-typing (>=1.2.0) ; extra == 'dev'",
      "flake8 (==3.0.4) ; extra == 'dev'",
      "mypy (==0.782) ; extra == 'dev'",
      "asn1tools (<0.147,>=0.146.2) ; extra == 'dev'",
      "factory-boy (<3.1,>=3.0.1) ; extra == 'dev'",
      "pyasn1 (<0.5,>=0.4.5) ; extra == 'dev'",
      "pytest (==5.4.1) ; extra == 'dev'",
      "hypothesis (<6.0.0,>=5.10.3) ; extra == 'dev'",
      "platon-hash[pysha3] ; (implementation_name == \"cpython\") and extra == 'dev'",
      "platon-hash[pycryptodome] ; (implementation_name == \"pypy\") and extra == 'dev'",
      "flake8 (==3.0.4) ; extra == 'lint'",
      "mypy (==0.782) ; extra == 'lint'",
      "platon-utils (>=1.2.0) ; extra == 'platon-keys'",
      "platon-typing (>=1.2.0) ; extra == 'platon-keys'",
      "asn1tools (<0.147,>=0.146.2) ; extra == 'test'",
      "factory-boy (<3.1,>=3.0.1) ; extra == 'test'",
      "pyasn1 (<0.5,>=0.4.5) ; extra == 'test'",
      "pytest (==5.4.1) ; extra == 'test'",
      "hypothesis (<6.0.0,>=5.10.3) ; extra == 'test'",
      "platon-hash[pysha3] ; (implementation_name == \"cpython\") and extra == 'test'",
      "platon-hash[pycryptodome] ; (implementation_name == \"pypy\") and extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Common API for Platon key operations.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16440555,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4f9830e9bc074beb24d067a96d38d3911bccca4ce8023df3e5d27b92b634dcd",
          "md5": "8f900dce6454c42dee29022e38e7b196",
          "sha256": "5e44a4999efb5f6073a5a886ce3c44369d9e216fff799a448836e0d02e857f91"
        },
        "downloads": -1,
        "filename": "platon_keys-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f900dce6454c42dee29022e38e7b196",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21807,
        "upload_time": "2022-06-01T06:46:17",
        "upload_time_iso_8601": "2022-06-01T06:46:17.933854Z",
        "url": "https://files.pythonhosted.org/packages/c4/f9/830e9bc074beb24d067a96d38d3911bccca4ce8023df3e5d27b92b634dcd/platon_keys-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a495befe0bf1ba1424d95a4647011f9bff21b0c77362d2d6ba6f6a7b229c6509",
          "md5": "026d0795b7f5d7ed44cdf102cfe0a591",
          "sha256": "08fec980541aab209b77968281564634cb908556c4c538e2eba6c0cbb12e6bb9"
        },
        "downloads": -1,
        "filename": "platon-keys-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "026d0795b7f5d7ed44cdf102cfe0a591",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20348,
        "upload_time": "2022-06-01T06:46:19",
        "upload_time_iso_8601": "2022-06-01T06:46:19.978820Z",
        "url": "https://files.pythonhosted.org/packages/a4/95/befe0bf1ba1424d95a4647011f9bff21b0c77362d2d6ba6f6a7b229c6509/platon-keys-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4f9830e9bc074beb24d067a96d38d3911bccca4ce8023df3e5d27b92b634dcd",
        "md5": "8f900dce6454c42dee29022e38e7b196",
        "sha256": "5e44a4999efb5f6073a5a886ce3c44369d9e216fff799a448836e0d02e857f91"
      },
      "downloads": -1,
      "filename": "platon_keys-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8f900dce6454c42dee29022e38e7b196",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21807,
      "upload_time": "2022-06-01T06:46:17",
      "upload_time_iso_8601": "2022-06-01T06:46:17.933854Z",
      "url": "https://files.pythonhosted.org/packages/c4/f9/830e9bc074beb24d067a96d38d3911bccca4ce8023df3e5d27b92b634dcd/platon_keys-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a495befe0bf1ba1424d95a4647011f9bff21b0c77362d2d6ba6f6a7b229c6509",
        "md5": "026d0795b7f5d7ed44cdf102cfe0a591",
        "sha256": "08fec980541aab209b77968281564634cb908556c4c538e2eba6c0cbb12e6bb9"
      },
      "downloads": -1,
      "filename": "platon-keys-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "026d0795b7f5d7ed44cdf102cfe0a591",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20348,
      "upload_time": "2022-06-01T06:46:19",
      "upload_time_iso_8601": "2022-06-01T06:46:19.978820Z",
      "url": "https://files.pythonhosted.org/packages/a4/95/befe0bf1ba1424d95a4647011f9bff21b0c77362d2d6ba6f6a7b229c6509/platon-keys-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}