{
  "info": {
    "author": "Robert Scott",
    "author_email": "code@humanleg.org.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Legal Industry",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Multimedia :: Graphics :: Viewers"
    ],
    "description": "# Docoskin\n\n\"Onion-skin\" visual differences between a reference document image and a scanned copy.\n\nGiven an image of a reference document, docoskin will attempt to find key points of the document in a scanned copy,\nalign the two, auto-correct the image contrasts and display a combined image, featuring sections in red which were\n\"removed from\" the reference document and sections in green which were added to the document.\n\nThe intended use for this is comparing a signed, returned scan of a contract with the original version as provided to\nthe signer to check for unagreed amendments.\n\nImplemented as a python library with a command-line interface. Significantly more power and flexibility is\nachievable through accessing the python components.\n\nDepends on opencv and six (and, on python2.7, the `futures` backport).\n\nopencv is always going to be a slightly painful dependency from a python point of view because a) it's a native library\nand b) it doesn't really play by python packaging rules supplying an egg. I advocate use of [Nix](http://nixos.org/) to\nsolve both these problems and provide a `default.nix` so that `nix` users can simply perform a\n\n```\n$ nix-shell .\n```\n\nin the source directory for a development-ready shell (somthing like a non-python-specific `virtualenv`).\n\nThose wishing to attempt using the pypi `opencv-python` package can try installing the package with the 'extra'\n`pypi_opencv`, which _hypothetically_ should download & install opencv from pypi\n\n```\n$ pip install -e .[pypi_opencv]\n```\n\n**but** the author has never had any luck with that and has unfavourable opinions of `pip` in general, not to mention the\nconcept of downloading & installing binaries from pypi.\n\nPreliminary license is GPLv3.\n\n## Tests\n\nThe test suite makes use of images which are kept in a git submodule due to their size. Performing a\n\n```\n$ git submodule init\n$ git submodule update\n```\n\nshould fetch the required data. If this data is not present, the tests will quietly skip tests requiring images (which\nis most of them, though).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/risicle/docoskin",
    "keywords": "document scan compare visual diff signature",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docoskin",
    "package_url": "https://pypi.org/project/docoskin/",
    "platform": "",
    "project_url": "https://pypi.org/project/docoskin/",
    "project_urls": {
      "Homepage": "https://github.com/risicle/docoskin"
    },
    "release_url": "https://pypi.org/project/docoskin/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "\"Onion-skin\" visual differences between a reference document image and a scanned copy",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6564747,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "044ea6d570193cd4ae87fcc1a5f0cce65b923094ce217752895b9cfae1ee5595",
          "md5": "47ac9aaa15c5bfa282897d13523d9f3c",
          "sha256": "f4707307bc303e1cc7ed9a52d2099cebf84d3f8cbe0f42265f730baff50c80e1"
        },
        "downloads": -1,
        "filename": "docoskin-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "47ac9aaa15c5bfa282897d13523d9f3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11583,
        "upload_time": "2020-02-03T20:54:14",
        "upload_time_iso_8601": "2020-02-03T20:54:14.009912Z",
        "url": "https://files.pythonhosted.org/packages/04/4e/a6d570193cd4ae87fcc1a5f0cce65b923094ce217752895b9cfae1ee5595/docoskin-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "044ea6d570193cd4ae87fcc1a5f0cce65b923094ce217752895b9cfae1ee5595",
        "md5": "47ac9aaa15c5bfa282897d13523d9f3c",
        "sha256": "f4707307bc303e1cc7ed9a52d2099cebf84d3f8cbe0f42265f730baff50c80e1"
      },
      "downloads": -1,
      "filename": "docoskin-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "47ac9aaa15c5bfa282897d13523d9f3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11583,
      "upload_time": "2020-02-03T20:54:14",
      "upload_time_iso_8601": "2020-02-03T20:54:14.009912Z",
      "url": "https://files.pythonhosted.org/packages/04/4e/a6d570193cd4ae87fcc1a5f0cce65b923094ce217752895b9cfae1ee5595/docoskin-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}