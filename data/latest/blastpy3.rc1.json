{
  "info": {
    "author": "Adrien Leger",
    "author_email": "aleg@ebi.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# Blastpy3\n\n[![PyPI version](https://badge.fury.io/py/blastpy3.svg)](https://badge.fury.io/py/blastpy3)\n[![Downloads](https://pepy.tech/badge/blastpy3)](https://pepy.tech/project/blastpy3)\n[![Anaconda Version](https://anaconda.org/aleg/blastpy3/badges/version.svg)](https://anaconda.org/aleg/blastpy3)\n[![Anaconda Downloads](https://anaconda.org/aleg/blastpy3/badges/downloads.svg)](https://anaconda.org/aleg/blastpy3)\n[![License](https://img.shields.io/badge/Licence-GPLv3-red.svg)](https://github.com/a-slide/blastpy3/blob/master/LICENSE)\n[![Language](https://img.shields.io/badge/Language-Python3.6+-yellow.svg)](https://www.python.org/)\n\n---\n\n**Lightweight High level Python 3 API for NCBI BLAST+ blastn**\n\n---\n\n## Blastn\n\nThis class contain the wrapper for Blastn and require the installation of ncbi Blast+ 2.2.28+.\n\n### Setup Blastn object: Create subject database\n\nUpon instantiation, a database is created from the user-provided subject sequence. Database files are created in a temporary directory.\nThe following parameters can be customized at Blastn objects instantiation\n* ref_path: Path to the reference fasta file (not gzipped). Mandatory\n* makeblastdb_exec: Path of the makeblastdb executable. Default = \"makeblastdb\"\n* makeblastdb_opt: makeblastdb command line options as a string. Default = \"\"\n\nTo ensure a proper database files deletion at the end of the execution it is possible to call the object using the `with` statement.\nAlternatively you can call the `rm_db` method at the end of the Blastn usage.\n\n**Code**\n```\nwith Blastn(ref_path=\"./subject.fa\") as blastn:\n    print (blastn)\n```\n**Output**\n```\nCREATE DATABASE: makeblastdb  -dbtype nucl -input_type fasta -in subject.fa -out temp_dir\n\nMAKEBLASTDB CLASS\tParameters list\n\tdb_dir\t/tmp/tmplbkdwzm2\n\tdb_path\t/tmp/tmplbkdwzm2/Yeast\n\tmakeblastdb_exec\tmakeblastdb\n\tmakeblastdb_opt\n\tref_path\t./data/Yeast.fa\n\tverbose\tFalse\n\nCleaning up blast DB files for \"subject\"\n```\n\n### Calling Blastn object: Perform Blastn and return a list of hits\n\nThe \"align\" method of a Blastn object can then be called with a query fasta file (*query_path*) or directly with a sequence string (*query_seq*)..\nThe following parameters can be customized at Blastn objects calling:\n\n* query_path: Path to a fasta file containing the query sequences (not gzipped). Mandatory\n* query_seq: sequence string\n* blast_exec: Path of the blast executable. By Default blastn will be used. Default = \"blastn\"\n* blastn_opt: Blastn command line options as a string. Default = \"\"\n* task: Type of blast to be performed ('blastn' 'blastn-short' 'dc-megablast' 'megablast' 'rmblastn'). Default = \"dc-megablast\"\n* evalue: E Value cuttoff to retain alignments. Default = 1\n* best_query_hit: find and return only the best hit per query. Default = False\n\nA list containing 1 BlastHit object for each query hit found in the subject will be returned, except if not hit were found in which situation 'None' will be returned.\nIf the best_query_hit flag was set to True, Only the best hit per query sequence from the query file will be returned.\n\n**Code**\n```\nwith Blastn(ref_path=\"./subject.fa\") as blastn:\n    hit_list = blastn(query_path=\"./query.fa\")\n    for hit in hit_list:\n        print (hit)\n```\n**Output**\n```\nCREATE DATABASE: makeblastdb  -dbtype nucl -input_type fasta -in ./subject.fa -out /tmp/tmp1ZBlfT/subject\n\nMAKE BLAST: blastn  -num_threads 4 -task dc-megablast -evalue 1 -outfmt \"6 std qseq\" -dust no -query ./query.fa -db /tmp/tmp1ZBlfT/subject\n\n\t2 hits found\nHIT 0\tQuery\tquery1:0-48(+)\n\tSubject\tsubject:19-67(+)\n\tLenght : 48\tIdentity : 100.0%\tEvalue : 2e-23\tBit score : 87.8\n\tAligned query seq : GCATGCTCGATCAGTAGCTCTCAGTACGCATACGCTAGCATCACGACT\n\nHIT 1\tQuery\tquery2:0-48(+)\n\tSubject\tsubject:89-137(+)\n\tLenght : 48\tIdentity : 100.0%\tEvalue : 2e-23\tBit score : 87.8\n\tAligned query seq : CGCATCGACTCGATCTGATCAGCTCACAGTCAGCATCAGCTACGATCA\n\nCleaning up blast DB files for \"subject\"\n```\n\n## BlastHit\n\nPython object representing a hit found by blastn. The object contains the following public fields:\n\n* id: Auto incremented unique identifier [INT]\n* q_id: Query sequence name [STR]\n* s_id: Subject sequence name [STR]\n* identity: % of identity in the hit [FLOAT 0:100]\n* length: length of the hit [INT >=0]\n* mis: Number of mismatch in the hit [INT >=0]\n* gap: Number of gap in the hit [INT >=0]\n* q_start: Hit start position of the query sequence [INT >=0]\n* q_end: Hit end position of the query sequence [INT >=0]\n* s_start: Hit start position of the subject sequence [INT >=0]\n* s_end: Hit end position of the subject sequence [INT >=0]\n* evalue: E value of the alignment [FLOAT >=0]\n* bscore: Bit score of the alignment[FLOAT >=0]\n* q_seq: Sequence of the query aligned on the subject sequence [STR]\n* q_orient: Orientation of the query sequence [+ or -]\n* s_orient: Orientation of the subject sequence [+ or -]\n\nThe validity of numeric value is checked upon instantiation. Invalid values will raise assertion errors.\n\nBlastHit Objects can return a comprehensive report of themselves under the form of an ordered dictionnary:\n\n**code**\n```\n# Interactive import\nfrom BlastHit import BlastHit\n\n# Create a default BlastHit object\nh = BlastHit()\n\n# Call the report method\nh.get_report(full = True)\n```\n**Output**\n```\nOrderedDict([('Query', 'query:0-10(+)'), ('Subject', 'subject:0-10(+)'), ('Identity', 100.0), ('Evalue', 0.0), ('Bit Score', 0.0), ('Hit length', 10), ('Number of gap', 0), ('Number of mismatch', 0)])\n```\n\n## Testing pyBlast module\n\nThe module can be easily tested thanks to pytest\n\n* Install pytest with pip `pip instal pytest`\n* Run test with py.test-2.7  -v\n\nExample of output if successful. Please note than some tests might fail due to the random sampling of DNA sequences, and uncertainties of Blastn algorithm.\n```\n========================================== test session starts ===========================================\nplatform linux2 -- Python 2.7.5 -- py-1.4.27 -- pytest-2.7.0 -- /usr/bin/python\nrootdir: /home/adrien/Programming/Python/pyBlast, inifile:\ncollected 21 items\n\ntest_pyBlast.py::test_BlastHit[4.16866907958-57-98-69-88-12-100-43-1.40452897105-47.3666242716] PASSED\ntest_pyBlast.py::test_BlastHit[-1-7-10-20-73-54-25-45-98.7921480151-45.2397166228] xfail\ntest_pyBlast.py::test_BlastHit[8.92741377413--1-100-36-34-33-14-71-18.8547135761-97.6604693294] xfail\ntest_pyBlast.py::test_BlastHit[10.5987790458-46--1-45-78-81-86-86-73.8740266727-56.887410005] xfail\ntest_pyBlast.py::test_BlastHit[66.8213911219-62-48--1-91-10-60-20-88.7850139735-81.7901609219] xfail\ntest_pyBlast.py::test_BlastHit[86.6626174287-29-83-34--1-53-57-68-17.9799756069-7.83036609495] xfail\ntest_pyBlast.py::test_BlastHit[5.23985331666-43-85-33-7--1-14-3-74.2130782704-88.9289495285] xfail\ntest_pyBlast.py::test_BlastHit[75.6935977321-8-78-68-10-39--1-74-44.1447867052-22.5203082483] xfail\ntest_pyBlast.py::test_BlastHit[39.8692596061-60-5-49-77-9-31--1-2.59963139531-46.3133849683] xfail\ntest_pyBlast.py::test_BlastHit[15.7192632366-24-92-1-64-82-83-90--1-75.5540618409] xfail\ntest_pyBlast.py::test_BlastHit[18.6627439886-34-57-60-5-45-26-40-77.7840842678--1] xfail\ntest_pyBlast.py::test_Blastn[blastn-Queries from Subject] PASSED\ntest_pyBlast.py::test_Blastn[blastn-Random queries] xfail\ntest_pyBlast.py::test_Blastn[blastn-short-Queries from Subject] PASSED\ntest_pyBlast.py::test_Blastn[blastn-short-Random queries] xfail\ntest_pyBlast.py::test_Blastn[dc-megablast-Queries from Subject] PASSED\ntest_pyBlast.py::test_Blastn[dc-megablast-Random queries] xfail\ntest_pyBlast.py::test_Blastn[megablast-Queries from Subject] PASSED\ntest_pyBlast.py::test_Blastn[megablast-Random queries] xfail\ntest_pyBlast.py::test_Blastn[rmblastn-Queries from Subject] PASSED\ntest_pyBlast.py::test_Blastn[rmblastn-Random queries] xfail\n\n================================== 6 passed, 15 xfailed in 5.91 seconds ==================================\n```\n\n## Dependencies\n\n* [ncbi Blast+ 2.2.28+](http://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE_TYPE=BlastDocs&DOC_TYPE=Download)\n* [python package pytest](http://pytest.org/latest/): `pip instal pytest`\n\n## Authors and Contact\n\nAdrien Leger - 2015\n\n* <adrien.leger@gmail.com> - <adrien.leger@inserm.fr> - <adrien.leger@univ-nantes.fr>\n* [Github](https://github.com/a-slide)\n* [Atlantic Gene Therapies - INSERM 1089](http://www.atlantic-gene-therapies.fr/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/a-slide/blastpy",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blastpy3",
    "package_url": "https://pypi.org/project/blastpy3/",
    "platform": "",
    "project_url": "https://pypi.org/project/blastpy3/",
    "project_urls": {
      "Homepage": "https://github.com/a-slide/blastpy"
    },
    "release_url": "https://pypi.org/project/blastpy3/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Lightweight High level Python 3 API for NCBI BLAST",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7571478,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "239d23622164c9884b3bcd69c3ee9a1616249aa6bb0044dd808b8f4a8aba9917",
          "md5": "479ec1a219bca8c50efbb7ab8221a83b",
          "sha256": "c187a537cd816ddb49c5fb37c91e6d24f5c160d4108f24a2c0ba931f64bcc06a"
        },
        "downloads": -1,
        "filename": "blastpy3-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "479ec1a219bca8c50efbb7ab8221a83b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9621,
        "upload_time": "2020-06-26T19:45:24",
        "upload_time_iso_8601": "2020-06-26T19:45:24.039240Z",
        "url": "https://files.pythonhosted.org/packages/23/9d/23622164c9884b3bcd69c3ee9a1616249aa6bb0044dd808b8f4a8aba9917/blastpy3-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "239d23622164c9884b3bcd69c3ee9a1616249aa6bb0044dd808b8f4a8aba9917",
        "md5": "479ec1a219bca8c50efbb7ab8221a83b",
        "sha256": "c187a537cd816ddb49c5fb37c91e6d24f5c160d4108f24a2c0ba931f64bcc06a"
      },
      "downloads": -1,
      "filename": "blastpy3-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "479ec1a219bca8c50efbb7ab8221a83b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 9621,
      "upload_time": "2020-06-26T19:45:24",
      "upload_time_iso_8601": "2020-06-26T19:45:24.039240Z",
      "url": "https://files.pythonhosted.org/packages/23/9d/23622164c9884b3bcd69c3ee9a1616249aa6bb0044dd808b8f4a8aba9917/blastpy3-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}