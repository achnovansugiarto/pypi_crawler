{
  "info": {
    "author": "Ilias Bilionis",
    "author_email": "ibilion@purdue.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "A python module implementing some generic MCMC routines\r\n=======================================================\r\n\r\nThe main purpose of this module is to serve as a simple MCMC framework for\r\ngeneric models. Probably the most useful contribution at the moment, is that\r\nit can be used to train Gaussian process (GP) models implemented in the \r\n[GPy package](http://sheffieldml.github.io/GPy/).\r\n\r\n\r\nFeatures\r\n--------\r\nThe code features the following things at the moment:\r\n+ Fully object oriented. The models can be of any type as soon as they offer\r\n  the right interface.\r\n+ Random walk proposals.\r\n+ Metropolis Adjusted Langevin Dynamics.\r\n+ The MCMC chains are stored in fast [HDF5](http://www.hdfgroup.org/HDF5/)\r\n  format using [PyTables](http://www.pytables.org/moin).\r\n+ A mean function can be added to the (GP) models of the\r\n[GPy package](http://sheffieldml.github.io/GPy/).\r\n\r\n\r\nInstallation\r\n------------\r\nClone the package, get into its directory and do a:\r\n```\r\npython setup.py install\r\n```\r\n\r\nRelated Packages\r\n----------------\r\nProbably, the most related package to what I am offering is the excellent\r\n[PyMC](https://github.com/pymc-devs/pymc) code. The reason I have departed from\r\nit is two-fold:\r\n+ In the old versions (e.g.\r\n[PyMC 2.3](http://pymc-devs.github.io/pymc/index.html)), could not find an easy\r\nway to implement Metropolis Adjusted Langevin Dynamics. This was unfortunate\r\nbecause it is one of the most powerful sampling methods when derivatives are\r\navailable.\r\n+ In the new version (e.g. \r\n [PyMC 3](http://nbviewer.ipython.org/github/pymc-devs/pymc/blob/master/pymc/examples/tutorial.ipynb),\r\n which is based on [Theano](http://www.deeplearning.net/software/theano/)\r\n schemes with derivatives can be easily implemented but there are several issues\r\n when one tries to deal with existing models. In particular, it is not possible\r\n at the moment to deal in an easy way with a model that is not directly implemented\r\n using Theano (e.g. if it calls an external library or runs a complicated program).\r\n This is a tremendous limitation when it comes to solving realistic inverse\r\n problems. In addition, it is not easy to exploit the Gaussian process\r\n functionality of GPy in order to train these models with MCMC.\r\n\r\nTherefore, the purpose of this package is to fill the gap between PyMC 2.3\r\nand PyMC 3. When the programers of PyMC 3 fix the afforementioned problem, then\r\nthe MCMC part of this code will become obsolete.\r\n\r\n\r\nAdditional Useful Packages\r\n--------------------------\r\nI have written some other packages that are useful in combination with py-mcmc:\r\n+ [Py-ORTHPOL](https://github.com/ebilionis/py-orthpol): Construct orthogonal\r\n  polynomials with respect to arbitrary weight functions. These can be useful\r\n  as mean functions for the Gaussian processes discussed here. They can be used\r\n  directly.\r\n+ [Py-Design](https://github.com/ebilionis/py-design): Design of experiments for\r\n  Python. This is extremely useful if you are trying to learn the output of a\r\n  computer code and you want to a good design of points to evaluate it.\r\n\r\n\r\nDemos\r\n-----\r\nI provide various demos demonstrating how the code can be used:\r\n+ [demos/demo1.py](demos/demo1.py): Demonstrates how to train GPy model using MCMC.\r\n+ [demos/demo2.py](demos/demo2.py): Demonstrates how a GP with a mean can be trained.\r\n  This model is equivalent to Bayesian linear regression.\r\n+ [demos/demo3.py](demos/demo3.py): Demonstrates how a GP with a mean using\r\n  automatic relevance determination for the basis functions can be used. This is\r\n  equivalent to a Relevance Vector Machine model.\r\n+ [demos/demo4.py](demos/demo4.py): Demonstrates how a GP with a mean can be\r\n  combined with a normal covariance kernel.\r\n\r\n\r\nIlias Bilionis,\r\nDecember, 2014\r\nPredictiveScience Laboratory,\r\nSchool of Mechanical Engineering,\r\nPurdue University,\r\nWest Lafayette, IN, USA",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/ebilionis/py-mcmc/tarball/0.0a1",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ebilionis/pymcmc",
    "keywords": "Markov-Chain-Monte-Carlo MCMC Metrpolis-Adjusted-Langevin-Dynamics MALA GPy",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-mcmc",
    "package_url": "https://pypi.org/project/py-mcmc/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/py-mcmc/",
    "project_urls": {
      "Download": "https://github.com/ebilionis/py-mcmc/tarball/0.0a1",
      "Homepage": "https://github.com/ebilionis/pymcmc"
    },
    "release_url": "https://pypi.org/project/py-mcmc/0.0a1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A python module implementing some generic MCMC routines",
    "version": "0.0a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1552452,
  "releases": {
    "0.0a1": []
  },
  "urls": [],
  "vulnerabilities": []
}