{
  "info": {
    "author": "chenbong",
    "author_email": "bhchen@stu.xmu.edu.cn",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# torchsummaryDynamic\n\nImproved tool of [torchsummaryX](https://github.com/nmhkahn/torchsummaryX).\n\n**torchsummaryDynamic** support real FLOPs calculation of dynamic network or user-custom PyTorch ops.\n\n## Usage\n\n```bash\npip install torchsummaryDynamic\n```\n\nand\n\n```python\nfrom torchsummaryDynamic import summary\nsummary(your_model, torch.zeros((1, 3, 224, 224)))\n\n# or\n\nfrom torchsummaryDynamic import summary\nsummary(your_model, torch.zeros((1, 3, 224, 224)), calc_op_types=(nn.Conv2d, nn.Linear))\n```\n\nArgs:\n- `model` (Module): Model to summarize\n- `x` (Tensor): Input tensor of the model with [N, C, H, W] shape dtype and device have to match to the model\n- `calc_op_types` (Tuple): Tuple of op types to be calculated\n- `args, kwargs`: Other arguments used in `model.forward` function\n\n## Examples\n\n### Calculate Dynamic Conv2d FLOPs/params\n\n```python\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchsummaryDynamic import summary\n\nclass USConv2d(nn.Conv2d):\n    def __init__(self, in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, us=[False, False]):\n        super(USConv2d, self).__init__(in_channels, out_channels, kernel_size, stride=stride, padding=padding, dilation=dilation, groups=groups, bias=bias)\n        self.width_mult = None\n        self.us = us\n\n    def forward(self, inputs):\n        in_channels = inputs.shape[1] // self.groups if self.us[0] else self.in_channels // self.groups\n        out_channels = int(self.out_channels * self.width_mult) if self.us[1] else self.out_channels\n\n        weight = self.weight[:out_channels, :in_channels, :, :]\n        bias = self.bias[:out_channels] if self.bias is not None else self.bias\n\n        y = F.conv2d(inputs, weight, bias, self.stride, self.padding, self.dilation, self.groups)\n        return y\n\nmodel = nn.Sequential(\n    USConv2d(3, 32, 3, us=[True, True]),\n)\n\n# width_mult=1.0\nmodel.apply(lambda m: setattr(m, 'width_mult', 1.0))\nsummary(model, torch.zeros(1, 3, 224, 224))\n\n# width_mult=0.5\nmodel.apply(lambda m: setattr(m, 'width_mult', 0.5))\nsummary(model, torch.zeros(1, 3, 224, 224))\n```\n\n### Output\n\n```bash\n# width_mult=1.0\n==========================================================\n        Kernel Shape       Output Shape  Params  Mult-Adds\nLayer                                                     \n0_0    [3, 32, 3, 3]  [1, 32, 222, 222]     896   42581376\n----------------------------------------------------------\n                        Totals\nTotal params               896\nTrainable params           896\nNon-trainable params         0\nMult-Adds             42581376\n==========================================================\n\n# width_mult=0.5\n==========================================================\n        Kernel Shape       Output Shape  Params  Mult-Adds\nLayer                                                     \n0_0    [3, 32, 3, 3]  [1, 16, 222, 222]     896   21290688\n----------------------------------------------------------\n                        Totals\nTotal params               896\nTrainable params           896\nNon-trainable params         0\nMult-Adds             21290688\n==========================================================\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chenbong/torchsummaryDynamic",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchsummaryDynamic",
    "package_url": "https://pypi.org/project/torchsummaryDynamic/",
    "platform": "",
    "project_url": "https://pypi.org/project/torchsummaryDynamic/",
    "project_urls": {
      "Homepage": "https://github.com/chenbong/torchsummaryDynamic"
    },
    "release_url": "https://pypi.org/project/torchsummaryDynamic/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Improved real/dynamic FLOPs calculation tool of torchsummaryX.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12504727,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48bcb877f04a3302cef3aed206e331b4dd469722a08d9f2b69ea0139df12a7ca",
          "md5": "4e6e0da69b6bd43859a2766f041a196a",
          "sha256": "3dcd5cf3b0837f5361bb48ddd2d95d63f7961bb99bc1641dbb944c51c3a3796b"
        },
        "downloads": -1,
        "filename": "torchsummaryDynamic-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4e6e0da69b6bd43859a2766f041a196a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4895,
        "upload_time": "2022-01-07T14:10:25",
        "upload_time_iso_8601": "2022-01-07T14:10:25.286617Z",
        "url": "https://files.pythonhosted.org/packages/48/bc/b877f04a3302cef3aed206e331b4dd469722a08d9f2b69ea0139df12a7ca/torchsummaryDynamic-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d43fe44d72d30c756430a52bfd185b5cf4d035b897c1e88ef7adb86e53a2e97e",
          "md5": "c9b8636dc00917aee5d87651a4fb369b",
          "sha256": "c9a43e75fac8edaa7a65084737499dd8235f60478488fd307e5575bf627ee253"
        },
        "downloads": -1,
        "filename": "torchsummaryDynamic-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c9b8636dc00917aee5d87651a4fb369b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5207,
        "upload_time": "2022-01-07T14:15:46",
        "upload_time_iso_8601": "2022-01-07T14:15:46.267482Z",
        "url": "https://files.pythonhosted.org/packages/d4/3f/e44d72d30c756430a52bfd185b5cf4d035b897c1e88ef7adb86e53a2e97e/torchsummaryDynamic-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2de79d46bbf7341688d4afe696f55310962296be0dac64005a61598a04533ae2",
          "md5": "1adc9d675151b49938c3c4fa7f22bf3b",
          "sha256": "935b23f2cd85c39a5c129fce6c5758050b7812b2a0ce5ec42632b3c41fca065a"
        },
        "downloads": -1,
        "filename": "torchsummaryDynamic-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1adc9d675151b49938c3c4fa7f22bf3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5214,
        "upload_time": "2022-01-07T14:33:42",
        "upload_time_iso_8601": "2022-01-07T14:33:42.311105Z",
        "url": "https://files.pythonhosted.org/packages/2d/e7/9d46bbf7341688d4afe696f55310962296be0dac64005a61598a04533ae2/torchsummaryDynamic-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2de79d46bbf7341688d4afe696f55310962296be0dac64005a61598a04533ae2",
        "md5": "1adc9d675151b49938c3c4fa7f22bf3b",
        "sha256": "935b23f2cd85c39a5c129fce6c5758050b7812b2a0ce5ec42632b3c41fca065a"
      },
      "downloads": -1,
      "filename": "torchsummaryDynamic-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1adc9d675151b49938c3c4fa7f22bf3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5214,
      "upload_time": "2022-01-07T14:33:42",
      "upload_time_iso_8601": "2022-01-07T14:33:42.311105Z",
      "url": "https://files.pythonhosted.org/packages/2d/e7/9d46bbf7341688d4afe696f55310962296be0dac64005a61598a04533ae2/torchsummaryDynamic-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}