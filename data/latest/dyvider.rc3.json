{
  "info": {
    "author": "Jean-Gabriel Young, Alice Patania",
    "author_email": "jean-gabriel.young@uvm.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "dyvider\n=======\n\n**dyvider** is a small library implementing dynamic programming\nalgorithms for exact linear clustering in networks. Its algorithms\nprocess networks whose nodes have positions in one dimension, and return\ntheir optimal partition.\n\nThe theory and experiments exploring this code can be found in the paper\n`\"Exact and rapid linear clustering of networks with dynamic programming\" <https://arxiv.org/abs/2301.10403>`__, \nby `Alice Patania <https://alpatania.github.io/>`__, `Antoine Allard <https://antoineallard.github.io/>`__ \nand `Jean-Gabriel Young <https://jg-you.github.io/>`__.\n\n\nDependencies\n------------\n\nThe only necessary dependency are\n`networkx <https://networkx.org/>`__ and ``numpy``.\n\nQuick tour\n----------\n\nThe following minimal example first assigns scores to nodes with a\none-dimensional spectral embedding and then retrieves an optimal linear\nclustering from this embedding using ``dyvider``.\n\n.. code:: python\n\n   import networkx as nx\n   import dyvider as dy\n   import numpy as np\n\n   # create a graph\n   g = nx.stochastic_block_model([10, 10], [[0.5, 0.05], [0.05, 0.5]], seed=42)\n\n   # generate a 1-d embedding with the leading eigenvector of the modularity matrix\n   eigenvals, eigvenvecs = np.linalg.eig(nx.linalg.adjacency_matrix(g).todense())\n   score = {v: float(eigvenvecs[v, 0]) for v in g.nodes()}\n\n   # set the node positions\n   nx.set_node_attributes(g, score, 'score')\n\n   # run dyvider\n   g = dy.utilities.preprocess(g)\n   objective_function = dy.objectives.Modularity()\n   solution, Q = dy.algorithms.run(g, objective_function)\n\n   print(solution)\n\nThe expected output is:\n\n.. code:: python\n\n   >>> [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]] \n\nOur `tutorial <tutorial.ipynb>`__ goes into more detail and demonstrates\nall the API calls.\n\nPaper\n-----\n\nIf you use this code, please consider citing:\n\n“`Exact and rapid linear clustering of networks with dynamic programming <https://arxiv.org/abs/2301.10403>`__” \n`Alice Patania <https://alpatania.github.io/>`__,\n`Antoine Allard <https://antoineallard.github.io/>`__ and \n`Jean-Gabriel Young <https://jg-you.github.io/>`__. arXiv:2301.10403.\n\nAuthor information\n------------------\n\nCode by `Jean-Gabriel Young <https://jg-you.github.io>`__. Don’t\nhesitate to get in touch at jean-gabriel.young@uvm.edu, or via the\n`issues <https://github.com/jg-you/dyvider/issues>`__!\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jg-you/dyvider",
    "keywords": "graphs,community detection,networks,inference",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dyvider",
    "package_url": "https://pypi.org/project/dyvider/",
    "platform": null,
    "project_url": "https://pypi.org/project/dyvider/",
    "project_urls": {
      "Homepage": "https://github.com/jg-you/dyvider"
    },
    "release_url": "https://pypi.org/project/dyvider/0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Rapid and exact partitioning algorithms for graphs embedded in one dimension.",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16571964,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dfc898d62f8afc0d9ee05009bb38a6dc787716f530f2ad1aa8a756e79f41d4f",
          "md5": "f7aed3fd269f5786319c012968abade3",
          "sha256": "45c97193fca7b1d8ea29ee2b55c5d889c59466acf51dcafb49fa0911c720e4f8"
        },
        "downloads": -1,
        "filename": "dyvider-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f7aed3fd269f5786319c012968abade3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12863,
        "upload_time": "2023-01-25T03:30:48",
        "upload_time_iso_8601": "2023-01-25T03:30:48.689339Z",
        "url": "https://files.pythonhosted.org/packages/9d/fc/898d62f8afc0d9ee05009bb38a6dc787716f530f2ad1aa8a756e79f41d4f/dyvider-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d65600e41b4ea8bb95c0f910daffe4cfa7a6ea0474e9b711bdd2fcc8bfc3283",
          "md5": "fb7a7a15482e4d059c8401ef85e7748a",
          "sha256": "42c58f123647a8ccefbdbcb6b0d6070d663bd6c01fde3185d9859e5c60815f4b"
        },
        "downloads": -1,
        "filename": "dyvider-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fb7a7a15482e4d059c8401ef85e7748a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13003,
        "upload_time": "2023-01-25T03:50:28",
        "upload_time_iso_8601": "2023-01-25T03:50:28.976854Z",
        "url": "https://files.pythonhosted.org/packages/8d/65/600e41b4ea8bb95c0f910daffe4cfa7a6ea0474e9b711bdd2fcc8bfc3283/dyvider-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f99c973a0d2e32c9783c2dd96e952ee1b2508c774bc224f14d4068033ce03eaf",
          "md5": "88c07312695d3b34c0a01d5cf4730ea0",
          "sha256": "9b11df48ebb6bac594a5b22eca744c04ddf3f7f8237518f69ba8cb086bcc4236"
        },
        "downloads": -1,
        "filename": "dyvider-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "88c07312695d3b34c0a01d5cf4730ea0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13037,
        "upload_time": "2023-01-26T04:54:14",
        "upload_time_iso_8601": "2023-01-26T04:54:14.715953Z",
        "url": "https://files.pythonhosted.org/packages/f9/9c/973a0d2e32c9783c2dd96e952ee1b2508c774bc224f14d4068033ce03eaf/dyvider-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f99c973a0d2e32c9783c2dd96e952ee1b2508c774bc224f14d4068033ce03eaf",
        "md5": "88c07312695d3b34c0a01d5cf4730ea0",
        "sha256": "9b11df48ebb6bac594a5b22eca744c04ddf3f7f8237518f69ba8cb086bcc4236"
      },
      "downloads": -1,
      "filename": "dyvider-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "88c07312695d3b34c0a01d5cf4730ea0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13037,
      "upload_time": "2023-01-26T04:54:14",
      "upload_time_iso_8601": "2023-01-26T04:54:14.715953Z",
      "url": "https://files.pythonhosted.org/packages/f9/9c/973a0d2e32c9783c2dd96e952ee1b2508c774bc224f14d4068033ce03eaf/dyvider-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}