{
  "info": {
    "author": "Nicolas Bouliane",
    "author_email": "contact@nicolasbouliane.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Ursus\n\nUrsus is the static site generator used by [All About Berlin](https://allaboutberlin.com). It turns Markdown files and [Jinja](https://jinja.palletsprojects.com/) templates into a static website.\n\nThis project is in active use and development.\n\n## Setup\n\n### Installation\n\nInstall Ursus with pip:\n\n```bash\npip install ursus-ssg\n```\n\n### Getting started\n\nBy default, Ursus looks for content in `./content`, and templates in `./templates`. It generates a website under `./output`.\n\nCall `ursus` to build the project. Call `ursus --help` to see the command line options it supports.\n\nHere is a simple piece of content. Save it under `./content/posts/first-post.md`.\n\n```markdown\n---\nTitle: Hello world!\nDescription: This is an example page\nDate_created: 2022-10-10\n---\n\n## Hello beautiful world\n\n*This* is a template. Pretty cool eh?\n```\n\nHere is a simple template. Save it under `./templates/posts/entry.html.jinja`. \n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ entry.title }}</title>\n    <meta name=\"description\" content=\"{{ entry.description }}\">\n</head>\n<body>\n    {{ entry.body }}\n</body>\n</html>\n```\n\nCall `ursus` to generate this website. It will create `./output/posts/first-post.html`.\n\n### Configuring Ursus\n\nYou can configure Ursus by creating a `ursus_config.py` file at the root of your project. When you call `ursus`, it will load this configuration.\n\n```python\n# Example Ursus config file\nfrom ursus.config import config\n\nconfig.content_path = Path(__file__).parent / 'blog'\nconfig.templates_path = Path(__file__).parent / 'templates'\nconfig.output_path = Path(__file__).parent.parent / 'dist'\n\nconfig.site_url = 'https://allaboutberlin.com'\n\nconfig.minify_js = True\nconfig.minify_css = True\n```\n\nYou can find all configuration options in `ursus/config.py`.\n\nYou can give your config a different name, and load it with the `-c` argument:\n\n```bash\nursus -c path/to/config.py\n```\n\n## Basic concepts\n\n### Content and Entries\n\n**Content** is what fills your website: text, images, videos, PDFs. A single piece of content is called an **Entry**. The location of the Content is set by `config.content_path`. By default, it's under `./content`.\n\nContent is usually *rendered* to create a working website. Some content (like Markdown files) is rendered with Templates, and other (like images) is converted to a different file format.\n\n### Templates\n\n**Templates** are used to render your Content. They are the theme of your website. The same templates can be applied to different Entries, or even reused for a different website. They are kept in a separate directory.\n\nFor example, a template can be the HTML that makes up the page around your content: the header, sidebar, and footer.\n\nThe location of the Templates is set by `config.templates_path`. By default, it's under `./templates`. You can have a different `templates_path` for each Generator.\n\nFor example:\n\n- HTML templates that wrap a nice theme around your Content.\n- Images and other static assets that are part of the website's theme\n\n### Output\n\nThis is the final static website generated by Ursus.\n\nThe location of the Output is set by `config.output_path`. By default, it's under `./output`.\n\n## How Ursus works\n\nContextProcessors transform the context, which is a dict with information about each of your Entries. Renderers use the context to know which pages to create, and what content to put in the templates.\n\nIn the example above, your context would look like this:\n\n```\n{\n    'entries': {\n        'posts/first-post.md': {\n            'title': 'Hello world!',\n            'description': 'This is an example page',\n            'body': '<h2>Hello beautiful world</h2><p>...'\n        }\n    },\n    'get_entries': function\n    'globals': {},\n}\n```\n\n### Generators\n\nA **Generator** takes your Content and your Templates and produces an Output. It's a recipe to turn your content into a final result. The default **StaticSiteGenerator** generates a static website. You can write your own Generator to output an eBook, a PDF, or anything else.\n\n#### StaticSiteGenerator\n\nGenerates a static website.\n\n### Context processors\n\nThe context is a big object that is used to render templates.\n\nA **ContextProcessor** fills this context object, or transforms its existing contents.\n\nFor example, the **MarkdownProcessor** generates the entry context out of a markdown file.\n\nOnly Entries with matching ContextProcessors are rendered. Entry or directory names that start with `.` or `_` are not rendered. You can use this to create drafts.\n\n#### MarkdownProcessor\n\nThe `MarkdownProcessor` creates context for all `.md` files in `content_path`.\n\nIt makes a few changes to the default markdown output:\n\n- Lazyload images (`loading=lazy`)\n- Convert images to `<figure>` tags when appropriate\n- Jinja tags (`{{ ... }}` and `{% ... %}`) are rendered as-is. You can use the, to `{% include %}` template parts and `{{ variables }}` in your content.\n- Set the `srcset` to load responsive images from the `image_transforms` config.\n- Put the front matter in the context\n    - `Related_*` keys are replaced by a list of related entry dicts\n    - `Date_` keys are converted to `datetime` objects\n\n#### GetEntriesProcessor\n\nThe `GetEntriesProcessor` adds a `get_entries` method to the context. It's used to get a list of entries of a certain type, and sort it.\n\n```jinja\n{% set posts = get_entries('posts', sort_by='date_created', reverse=True) %}\n```\n\n### Renderers\n\n**Renderer**s create content that make up the Output. In other words, they turn your content files into pages, correctly-sized images, RSS feeds, etc.\n\n#### ImageTransformRenderer\n\nRenders images in `content_path` with a few changes:\n\n- Images are compressed and optimized.\n- Images are resized according to the `image_transforms`. The images are shrunk if needed, but never stretched.\n- Files that can't be transformed (PDF to PDF) are copied as-is to the output directory.\n- Images that can't be resized (SVG to anything) are copied as-is to the output directory.\n- Image EXIF data is removed.\n\nThis renderer does nothing unless `image_transforms` is set:\n```python\nconfig.image_transforms = {\n    # ...\n    'image_transforms': {\n        # Default transform used as <img> src\n        # Saved as ./output/path/to/image.jpg\n        '': {\n            'max_size': (3200, 4800),\n        },\n        # Saved as ./output/path/to/image.jpg and .webp\n        'thumbnails': {\n            'exclude': ('*.pdf', '*.svg'),  # glob patterns\n            'max_size': (400, 400),\n            'output_types': ('original', 'webp'),\n        },\n        # Only previews PDF files in specific locations\n        # Saved as ./output/path/to/image.webp and .png\n        'pdfPreviews': {\n            'include': ('documents/*.pdf', 'forms/*.pdf'),  # glob patterns\n            'max_size': (300, 500),\n            'output_types': ('webp', 'png'),\n        }\n    },\n    # ...\n}\n```\n\n#### JinjaRenderer\n\nRenders Content into Jinja templates using the context made by ContextProcessors.\n\nA Template called `./output/hello-world.html.jinja` will be rendered as `./output/hello-world.html`. The template has access to anything you put in the context, including the `entries` dict, and the `get_entries` method.\n\nA Template called `./output/posts/entry.html.jinja` will render all Entries under `./content/posts/*.md` and save them under `./output/posts/*.html`. The template has access to an `entry` variable.\n\nOnly Templates with the `.jinja` extension are rendered. Files or directory names that start with `.` or `_` are not rendered.\n\nFiles named `entry.*.jinja` are rendered once for each Entry with the same path. For example, `./templates/posts/entry.html.jinja` will render `./content/posts/hello-world.md`, `./content/posts/foo.md` and `./content/posts/bar.md`. The output path is the entry name with the extension replaced. If `./templates/posts/entry.html.jinja` renders `./templates/posts/hello-world.md`, the output file is `./output/posts/hello-world.html`.\n\nAll template files with the `.jinja` extension will be rendered. For example, `./templates/posts/index.html.jinja` will be rendered as `./output/posts/index.html`. Files starting with `_` are ignored.\n\nThe output path is the template name without the `.jinja` extension. For example, `index.html.jinja` will be rendered as `index.html`.\n\n#### StaticAssetRenderer\n\nSimply copies static assets (CSS, JS, images, etc.) under `./templates` to the same subdirectory in `./output`. Files starting with `.` are ignored. Files and directories starting with `_` are ignored.\n\nIt uses hard links instead of copying files. It's faster and it saves space.\n\n## Getting started\n\n1. **Create a directory** for your project. This is a sensible structure, because it works automatically with the default configuration:\n    ```\n    example_site/\n    ├── ursus_config.py  # By default, Ursus will use this config file\n    ├── templates/  # By default, Ursus will use this templates directory\n    │   ├── index.html.jinja\n    │   ├── css/\n    │   │   └──style.css\n    │   ├── js/\n    │   │   └──scripts.js\n    │   ├── fonts/\n    │   │   ├── open-sans.svg\n    │   │   ├── open-sans.ttf\n    │   │   └── open-sans.woff\n    │   └── posts/\n    │       ├── index.html.jinja\n    │       └── entry.html.jinja\n    └── content/  # By default, Ursus will use this content directory\n        ├── posts/\n        │   ├── first-post.md\n        │   ├── foo.md\n        │   └── bar.md\n        └── images/\n            └── example.png\n    ```\n2. **Create a config file for your website.** You can copy `ursus/default_config.py`. If you call your config `ursus_config.py` and place it in your project root, it will be loaded automatically. Otherwise you must call ursus with the `-c` argument. If no config is set, Ursus will use the defaults set in `ursus/default_config.py`.\n3. **Call the `ursus` command.**\n\n#### Building from Sublime Text\n\nYou can configure Sublime Text to run Ursus when you press Cmd + B:\n\n```json\n// Sublime user settings or project config\n{\n    // ...\n    \"build_systems\": [{\n        \"cmd\": [\"ursus\", \"-c\", \"$project_path/path/to/ursus_config.py\"],\n        \"name\": \"Ursus\",\n    }],\n    // ...\n}\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/nicbou/ursus",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ursus-ssg",
    "package_url": "https://pypi.org/project/ursus-ssg/",
    "platform": null,
    "project_url": "https://pypi.org/project/ursus-ssg/",
    "project_urls": {
      "Homepage": "http://github.com/nicbou/ursus"
    },
    "release_url": "https://pypi.org/project/ursus-ssg/1.0.1/",
    "requires_dist": [
      "coloredlogs (==15.0.1)",
      "GitPython (==3.1.30)",
      "Jinja2 (==3.1.2)",
      "lunr (==0.6.2)",
      "Markdown (==3.4.1)",
      "MarkupSafe (==2.1.1)",
      "ordered-set (==4.1.0)",
      "PyMuPDF (==1.21.1)",
      "Pillow (==9.4.0)",
      "watchdog (==2.2.1)",
      "rjsmin (==1.2.1)",
      "rcssmin (==1.1.1)"
    ],
    "requires_python": ">=3.10",
    "summary": "Static site generator",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17377098,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e73af04ea1ec9b491147ec5eb53daae44b973590aa07eb160b37e3d63183e62e",
          "md5": "c4ba77ad3ab5fdca80616c0b7d8d637b",
          "sha256": "7e183b74185be360c5ab67be4ab9ea86250bfb5670f3a0b7e97cf7f36a4053f8"
        },
        "downloads": -1,
        "filename": "ursus_ssg-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4ba77ad3ab5fdca80616c0b7d8d637b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 28068,
        "upload_time": "2023-03-21T09:28:46",
        "upload_time_iso_8601": "2023-03-21T09:28:46.779217Z",
        "url": "https://files.pythonhosted.org/packages/e7/3a/f04ea1ec9b491147ec5eb53daae44b973590aa07eb160b37e3d63183e62e/ursus_ssg-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a9fa9a97c19b2654e6ff38dafc41b2832d756d718d9d89a8eeec3c56e2b2127",
          "md5": "9477f8528330e4ac4ff462345dd596ea",
          "sha256": "c4e64823d9acfbbad014993e3b7e4d5b2734585acdbcfb89a12370976a1e7c93"
        },
        "downloads": -1,
        "filename": "ursus_ssg-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9477f8528330e4ac4ff462345dd596ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 26583,
        "upload_time": "2023-03-21T09:28:49",
        "upload_time_iso_8601": "2023-03-21T09:28:49.854204Z",
        "url": "https://files.pythonhosted.org/packages/4a/9f/a9a97c19b2654e6ff38dafc41b2832d756d718d9d89a8eeec3c56e2b2127/ursus_ssg-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1662f7b24364fd2c3658698d55a35771515631949daa0162d948d6a71cd13f51",
          "md5": "d86052f59b98b2df2b09a7f15ea0f37e",
          "sha256": "e1b05701bf2aa5126675939672f6624b51537592f0d68f1396094ddd7ecf7a11"
        },
        "downloads": -1,
        "filename": "ursus_ssg-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d86052f59b98b2df2b09a7f15ea0f37e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 27757,
        "upload_time": "2023-03-21T09:59:43",
        "upload_time_iso_8601": "2023-03-21T09:59:43.881199Z",
        "url": "https://files.pythonhosted.org/packages/16/62/f7b24364fd2c3658698d55a35771515631949daa0162d948d6a71cd13f51/ursus_ssg-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c6f1cd83557db23657c21297dfb06aaeea8921e406b7f773f290cf02ec1c8fe",
          "md5": "b154d23605db5261b8d86d1aa6286dad",
          "sha256": "04b4cef81a327080ab5c008e2304cd251758ff042c9cb6c6efdab10ae9c78702"
        },
        "downloads": -1,
        "filename": "ursus_ssg-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b154d23605db5261b8d86d1aa6286dad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 25816,
        "upload_time": "2023-03-21T09:59:46",
        "upload_time_iso_8601": "2023-03-21T09:59:46.431852Z",
        "url": "https://files.pythonhosted.org/packages/0c/6f/1cd83557db23657c21297dfb06aaeea8921e406b7f773f290cf02ec1c8fe/ursus_ssg-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1662f7b24364fd2c3658698d55a35771515631949daa0162d948d6a71cd13f51",
        "md5": "d86052f59b98b2df2b09a7f15ea0f37e",
        "sha256": "e1b05701bf2aa5126675939672f6624b51537592f0d68f1396094ddd7ecf7a11"
      },
      "downloads": -1,
      "filename": "ursus_ssg-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d86052f59b98b2df2b09a7f15ea0f37e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 27757,
      "upload_time": "2023-03-21T09:59:43",
      "upload_time_iso_8601": "2023-03-21T09:59:43.881199Z",
      "url": "https://files.pythonhosted.org/packages/16/62/f7b24364fd2c3658698d55a35771515631949daa0162d948d6a71cd13f51/ursus_ssg-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c6f1cd83557db23657c21297dfb06aaeea8921e406b7f773f290cf02ec1c8fe",
        "md5": "b154d23605db5261b8d86d1aa6286dad",
        "sha256": "04b4cef81a327080ab5c008e2304cd251758ff042c9cb6c6efdab10ae9c78702"
      },
      "downloads": -1,
      "filename": "ursus_ssg-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b154d23605db5261b8d86d1aa6286dad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 25816,
      "upload_time": "2023-03-21T09:59:46",
      "upload_time_iso_8601": "2023-03-21T09:59:46.431852Z",
      "url": "https://files.pythonhosted.org/packages/0c/6f/1cd83557db23657c21297dfb06aaeea8921e406b7f773f290cf02ec1c8fe/ursus_ssg-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}