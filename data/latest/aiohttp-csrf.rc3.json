{
  "info": {
    "author": "TensorTom",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "aiohttp_csrf\n=============\n\nThe library provides csrf (xsrf) protection for [aiohttp.web](https://docs.aiohttp.org/en/latest/web.html).\n\n**Breaking Change:** New in 0.1.0 is Blake3 hashes are used by default. This means you must pass `secret_phrase` to\n`aiohttp_csrf.storage.SessionStorage`\n\n**note:** The package [aiohttp-csrf-fixed](https://pypi.org/project/aiohttp-csrf-fixed) is aiohttp_csrf 0.0.2 +\n[this commit](https://github.com/oplik0/aiohttp-csrf/commit/b1bd9207f43a2abf30e32e72ecdb10983a251823). The maintainer\ndidn't submit a PR so I just saw it by chance. I haven't had  time to closely examine it but I think it's just removing\nthe HTTP security error that happens if no CSRF is provided. Why do that? An HTTP error is good because it tells the\nclient what happened and lets you handle it by middleware.\n\n__0.1.1:__ Converted `@aiohttp_csrf.csrf_exempt` decorator to a co-routine to make it compatible with latest aiohttp.\n\n![image](https://img.shields.io/travis/wikibusiness/aiohttp-csrf.svg%0A%20:target:%20https://travis-ci.org/wikibusiness/aiohttp-csrf)\n\nBasic usage\n-----------\n\nThe library allows you to implement csrf (xsrf) protection for requests\n\nBasic usage example:\n\n```python\nimport aiohttp_csrf\nfrom aiohttp import web\n\nFORM_FIELD_NAME = '_csrf_token'\nCOOKIE_NAME = 'csrf_token'\n\n\ndef make_app():\n    csrf_policy = aiohttp_csrf.policy.FormPolicy(FORM_FIELD_NAME)\n\n    csrf_storage = aiohttp_csrf.storage.CookieStorage(COOKIE_NAME)\n\n    app = web.Application()\n\n    aiohttp_csrf.setup(app, policy=csrf_policy, storage=csrf_storage)\n\n    app.middlewares.append(aiohttp_csrf.csrf_middleware)\n\n    async def handler_get_form_with_token(request):\n        token = await aiohttp_csrf.generate_token(request)\n\n\n        body = '''\n            <html>\n                <head><title>Form with csrf protection</title></head>\n                <body>\n                    <form method=\"POST\" action=\"/\">\n                        <input type=\"hidden\" name=\"{field_name}\" value=\"{token}\" />\n                        <input type=\"text\" name=\"name\" />\n                        <input type=\"submit\" value=\"Say hello\">\n                    </form>\n                </body>\n            </html>\n        '''  # noqa\n\n        body = body.format(field_name=FORM_FIELD_NAME, token=token)\n\n        return web.Response(\n            body=body.encode('utf-8'),\n            content_type='text/html',\n        )\n\n    async def handler_post_check(request):\n        post = await request.post()\n\n        body = 'Hello, {name}'.format(name=post['name'])\n\n        return web.Response(\n            body=body.encode('utf-8'),\n            content_type='text/html',\n        )\n\n    app.router.add_route(\n        'GET',\n        '/',\n        handler_get_form_with_token,\n    )\n\n    app.router.add_route(\n        'POST',\n        '/',\n        handler_post_check,\n    )\n\n    return app\n\n\nweb.run_app(make_app())\n```\n\n### Initialize\n\nFirst of all, you need to initialize `aiohttp_csrf` in your application:\n\n```python\napp = web.Application()\n\ncsrf_policy = aiohttp_csrf.policy.FormPolicy(FORM_FIELD_NAME)\n\ncsrf_storage = aiohttp_csrf.storage.CookieStorage(COOKIE_NAME)\n\naiohttp_csrf.setup(app, policy=csrf_policy, storage=csrf_storage)\n```\n\n### Middleware and decorators\n\nAfter initialize you can use `@aiohttp_csrf.csrf_protect` for handlers, that you want to protect. Or you can\ninitialize `aiohttp_csrf.csrf_middleware` and do not disturb about using\ndecorator ([full middleware example here](demo/middleware.py)):\n\n```python\n# ...\napp.middlewares.append(aiohttp_csrf.csrf_middleware)\n# ...\n```\n\nIn this case all your handlers will be protected.\n\n**Note:** we strongly recommend to use `aiohttp_csrf.csrf_middleware` and `@aiohttp_csrf.csrf_exempt` instead of\nmanually managing with `@aiohttp_csrf.csrf_protect`. But if you prefer to use `@aiohttp_csrf.csrf_protect`, don't forget\nto use `@aiohttp_csrf.csrf_protect` for both methods: GET and\nPOST ([manual protection example](demo/manual_protection.py))\n\nIf you want to use middleware, but need handlers without protection, you can use `@aiohttp_csrf.csrf_exempt`. Mark you\nhandler with this decorator and this handler will not check the token:\n\n```python\n@aiohttp_csrf.csrf_exempt\nasync def handler_post_not_check(request):\n    ...\n```\n\n### Generate token\n\nFor generate token you need to call `aiohttp_csrf.generate_token` in your handler:\n\n```python\n@aiohttp_csrf.csrf_protect\nasync def handler_get(request):\n    token = await aiohttp_csrf.generate_token(request)\n    ...\n```\n\nAdvanced usage\n--------------\n\n### Policies\n\nYou can use different policies for check tokens. Library provides 3 types of policy:\n\n- **FormPolicy**. This policy will search token in the body of your POST request (Usually use for forms) or as a GET\n  variable of the same name. You need to specify name of field that will be checked.\n- **HeaderPolicy**. This policy will search token in headers of your POST request (Usually use for AJAX requests). You\n  need to specify name of header that will be checked.\n- **FormAndHeaderPolicy**. This policy combines behavior of **FormPolicy** and **HeaderPolicy**.\n\nYou can implement your custom policies if needed. But make sure that your custom policy\nimplements `aiohttp_csrf.policy.AbstractPolicy` interface.\n\n### Storages\n\nYou can use different types of storages for storing token. Library provides 2 types of storage:\n\n- **CookieStorage**. Your token will be stored in cookie variable. You need to specify cookie name.\n- **SessionStorage**. Your token will be stored in session. You need to specify session variable name.\n\n**Important:** If you want to use session storage, you need setup aiohttp\\_session in your\napplication ([session storage example](demo/session_storage.py#L22))\n\nYou can implement your custom storages if needed. But make sure that your custom storage\nimplements `aiohttp_csrf.storage.AbstractStorage` interface.\n\n### Token generators\n\nYou can use different token generator in your application. By default storages\nusing `aiohttp_csrf.token_generator.SimpleTokenGenerator`\n\nBut if you need more secure token generator - you can use `aiohttp_csrf.token_generator.HashedTokenGenerator`\n\nAnd you can implement your custom token generators if needed. But make sure that your custom token generator\nimplements `aiohttp_csrf.token_generator.AbstractTokenGenerator` interface.\n\n### Invalid token behavior\n\nBy default, if token is invalid, `aiohttp_csrf` will raise `aiohttp.web.HTTPForbidden` exception.\n\nYou have ability to specify your custom error handler. It can be:\n\n- **callable instance. Input parameter - aiohttp request.**\n\n```python\ndef custom_error_handler(request):\n    # do something\n    return aiohttp.web.Response(status=403)\n\n# or\n\nasync def custom_async_error_handler(request):\n    # await do something\n    return aiohttp.web.Response(status=403)\n```\n\nIt will be called instead of protected handler.\n\n- **sub class of Exception**. In this case this Exception will be raised.\n\n```python\nclass CustomException(Exception):\n    pass\n```\n\nYou can specify custom error handler globally, when initialize `aiohttp_csrf` in your application:\n\n```python\n...\nclass CustomException(Exception):\n    pass\n\n...\naiohttp_csrf.setup(app, policy=csrf_policy, storage=csrf_storage, error_renderer=CustomException)\n...\n```\n\nIn this case custom error handler will be applied to all protected handlers.\n\nOr you can specify custom error handler locally, for specific handler:\n\n```python\n...\nclass CustomException(Exception):\n    pass\n\n...\n@aiohttp_csrf.csrf_protect(error_renderer=CustomException)\ndef handler_with_custom_csrf_error(request):\n    ...\n```\n\nIn this case custom error handler will be applied to this handler only. For all other handlers will be applied global\nerror handler.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TensorTom/aiohttp-csrf",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiohttp-csrf",
    "package_url": "https://pypi.org/project/aiohttp-csrf/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiohttp-csrf/",
    "project_urls": {
      "Homepage": "https://github.com/TensorTom/aiohttp-csrf"
    },
    "release_url": "https://pypi.org/project/aiohttp-csrf/0.1.1/",
    "requires_dist": [
      "aiohttp (>=3.6.2,<4.1)",
      "aiohttp-session (>=2,<3)",
      "blake3 (>=0.1.8,<0.2.0)"
    ],
    "requires_python": ">=3.8.3,<4",
    "summary": "CSRF protection for aiohttp-server",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9025422,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c56af7791d75bc1dbb66ef0bec703189173ed8e07050a965df95767e354cd0ec",
          "md5": "a7c4f7d34c9ebf6e94c8280d79da634e",
          "sha256": "a958cc1369b7a0f55f46a19fa18f95488144f9b563cb439f8c23e9741ebe1606"
        },
        "downloads": -1,
        "filename": "aiohttp_csrf-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7c4f7d34c9ebf6e94c8280d79da634e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7593,
        "upload_time": "2020-03-05T05:23:03",
        "upload_time_iso_8601": "2020-03-05T05:23:03.441634Z",
        "url": "https://files.pythonhosted.org/packages/c5/6a/f7791d75bc1dbb66ef0bec703189173ed8e07050a965df95767e354cd0ec/aiohttp_csrf-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13f73ba87964d0e5e46b768fd8ef386bda0beb33eb1426f93d72ea0075ab36e9",
          "md5": "1bc10528ad730f22989af6b10f32f5d0",
          "sha256": "f167400661265fdf787f436297fef84d3bbb5b9239fb4d5ca4f7f93e0ae1f37a"
        },
        "downloads": -1,
        "filename": "aiohttp-csrf-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1bc10528ad730f22989af6b10f32f5d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7736,
        "upload_time": "2020-03-05T05:23:05",
        "upload_time_iso_8601": "2020-03-05T05:23:05.874506Z",
        "url": "https://files.pythonhosted.org/packages/13/f7/3ba87964d0e5e46b768fd8ef386bda0beb33eb1426f93d72ea0075ab36e9/aiohttp-csrf-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bd20d3e7e90659c63947d067a06ec1325e1db69e40e6413ae9623857be0f801",
          "md5": "e7de459619582cd81c1daa4ef1cf6a03",
          "sha256": "95c108675a743c05b09ca53e9e0ede808742a8b6a71c7bb6a2a0812b3305e46f"
        },
        "downloads": -1,
        "filename": "aiohttp_csrf-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7de459619582cd81c1daa4ef1cf6a03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.3,<4",
        "size": 6804,
        "upload_time": "2020-12-25T06:02:51",
        "upload_time_iso_8601": "2020-12-25T06:02:51.480782Z",
        "url": "https://files.pythonhosted.org/packages/6b/d2/0d3e7e90659c63947d067a06ec1325e1db69e40e6413ae9623857be0f801/aiohttp_csrf-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67327b14ce22be929b1a7d21b1fd4461cc144581704590285d9c12bb57e788de",
          "md5": "6278269ce50235f25090c6b6de187400",
          "sha256": "9c86d36f7c4f15bcab67ecf6eb2454da3aef7ec76ecd5220b716016a4dde3588"
        },
        "downloads": -1,
        "filename": "aiohttp_csrf-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6278269ce50235f25090c6b6de187400",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.3,<4",
        "size": 7171,
        "upload_time": "2020-12-25T06:02:52",
        "upload_time_iso_8601": "2020-12-25T06:02:52.507100Z",
        "url": "https://files.pythonhosted.org/packages/67/32/7b14ce22be929b1a7d21b1fd4461cc144581704590285d9c12bb57e788de/aiohttp_csrf-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95d3ce34c0f8b8b830da9ac892dc4d5b412ddc22a93e8fa55adaab381eaaae76",
          "md5": "c63cf0b582be7c0a03d0cf96a11b3180",
          "sha256": "eb51ba706fcfcf73cce9b5a25f3c9c70ae32b4ba28e9e6dc59b0ebd71fb037ea"
        },
        "downloads": -1,
        "filename": "aiohttp_csrf-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c63cf0b582be7c0a03d0cf96a11b3180",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.3,<4",
        "size": 6853,
        "upload_time": "2020-12-31T12:53:20",
        "upload_time_iso_8601": "2020-12-31T12:53:20.200294Z",
        "url": "https://files.pythonhosted.org/packages/95/d3/ce34c0f8b8b830da9ac892dc4d5b412ddc22a93e8fa55adaab381eaaae76/aiohttp_csrf-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "641b86dc0a7668b8d64b51913590fe26e6dd9d94986fcfe34bdac63846358fff",
          "md5": "a7a1345d84899857be1345c3f89a6299",
          "sha256": "ddb8204abf45e9519b9a1166d0107c846b5e8588628f5086d2e9d5730e39d662"
        },
        "downloads": -1,
        "filename": "aiohttp_csrf-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a7a1345d84899857be1345c3f89a6299",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.3,<4",
        "size": 7314,
        "upload_time": "2020-12-31T12:53:21",
        "upload_time_iso_8601": "2020-12-31T12:53:21.671946Z",
        "url": "https://files.pythonhosted.org/packages/64/1b/86dc0a7668b8d64b51913590fe26e6dd9d94986fcfe34bdac63846358fff/aiohttp_csrf-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95d3ce34c0f8b8b830da9ac892dc4d5b412ddc22a93e8fa55adaab381eaaae76",
        "md5": "c63cf0b582be7c0a03d0cf96a11b3180",
        "sha256": "eb51ba706fcfcf73cce9b5a25f3c9c70ae32b4ba28e9e6dc59b0ebd71fb037ea"
      },
      "downloads": -1,
      "filename": "aiohttp_csrf-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c63cf0b582be7c0a03d0cf96a11b3180",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.3,<4",
      "size": 6853,
      "upload_time": "2020-12-31T12:53:20",
      "upload_time_iso_8601": "2020-12-31T12:53:20.200294Z",
      "url": "https://files.pythonhosted.org/packages/95/d3/ce34c0f8b8b830da9ac892dc4d5b412ddc22a93e8fa55adaab381eaaae76/aiohttp_csrf-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "641b86dc0a7668b8d64b51913590fe26e6dd9d94986fcfe34bdac63846358fff",
        "md5": "a7a1345d84899857be1345c3f89a6299",
        "sha256": "ddb8204abf45e9519b9a1166d0107c846b5e8588628f5086d2e9d5730e39d662"
      },
      "downloads": -1,
      "filename": "aiohttp_csrf-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a7a1345d84899857be1345c3f89a6299",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.3,<4",
      "size": 7314,
      "upload_time": "2020-12-31T12:53:21",
      "upload_time_iso_8601": "2020-12-31T12:53:21.671946Z",
      "url": "https://files.pythonhosted.org/packages/64/1b/86dc0a7668b8d64b51913590fe26e6dd9d94986fcfe34bdac63846358fff/aiohttp_csrf-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}