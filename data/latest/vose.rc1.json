{
  "info": {
    "author": "Max Halford",
    "author_email": "maxhalford25@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# vose\n\nThis is a Cython implemention of Michael Vose's [Alias method](https://www.wikiwand.com/en/Alias_method). It can be used to perform weighted sampling with replacement of integers in `O(1)` time. It requires a construction phase that runs in `O(n)` time, with `n` being the number of integers with associated weights. As far as I know, it's faster than any other method available in Python. But I would love to be proven wrong!\n\nI wrote this because I had a specific usecase where I needed to repeatidly sample integers with a weight associated to each integer. I stumbled on Keith Schwarz's [*Darts, Dice, and Coins: Sampling from a Discrete Distribution*](https://www.keithschwarz.com/darts-dice-coins/), which is very well written, and decided to use the Alias method. Alas, `numpy` doesn't seem to have it available, and neither does the `random` module from Python's standard library. There is, however, the [`vose_sampler`](https://github.com/asmith26/Vose-Alias-Method) package, but it is written in pure Python and isn't fast enough for my purposes. I therefore decided to write it in Cython and shamelessly adapted Keith Schmarz's [Java implementation](https://www.keithschwarz.com/interesting/code/?dir=alias-method).\n\n## Installation\n\nMy feeling is that this package is too small to justify putting it on PyPI. Therefore, you have to install it from GitHub. If ever the scope grows larger I might reconsider this.\n\n```sh\npip install git+https://github.com/MaxHalford/vose\n```\n\nThis will install `cython` as well as `numpy` if you do not already have them installed.\n\n## Usage\n\nYou first have to initialize a sampler with an array of weights. These weights are not required to sum up to 1.\n\n```py\n>>> import numpy as np\n>>> import vose\n\n>>> weights = np.array([.1, .3, .4, .2])\n>>> sampler = vose.Sampler(weights, seed=42)\n\n```\n\nYou can then call the `.sample()` method to sample a random integer in range `[0, n - 1]`, where `n` is the number of weights that were passed.\n\n```py\n>>> sampler.sample()\n2\n\n```\n\nYou can set the `k` parameter in order to produce multiple samples.\n\n```py\n>>> sampler.sample(k=10)\narray([1, 1, 2, 1, 2, 1, 0, 1, 3, 3])\n\n```\n\nBy default, a copy of the weights is made. You can disable this behavior in order to save a few microseconds, but this will modify the provided array.\n\n```py\n>>> sampler = vose.Sampler(weights, seed=42, copy=False)\n\n```\n\nNote that `vose.Sampler` expects to be provided with a [memoryview](https://docs.python.org/3/c-api/memoryview.html). In order to pass a list, you have to convert it yourself to a numpy array.\n\n```py\n>>> weights = [.2, .3, .5]\n>>> sampler = vose.Sampler(np.array(weights))\n\n```\n\nYou can also use `vose.Sampler` from within your own Cython `.pyx` file:\n\n```py\nimport numpy as np\n\ncimport vose\ncimport numpy as np\n\ncdef np.float_t [:] weights = np.array([.2, .3, .5], dtype=float)\ncdef vose.Sampler sampler\nsampler = vose.Sampler(weights)\n\ncdef int sample = sampler.sample_1()\ncdef np.int_t [:] samples = sampler.sample_k(10)\n```\n\nNote that the latter requires having to include the `numpy` headers in the extension definition of your `setup.py`:\n\n```py\nfrom setuptools import Extension\nfrom setuptools import setup\nfrom Cython.Build import cythonize\nimport numpy as np\n\nextension = Extension(\n    '*', ['your_file.pyx'],\n    include_dirs=[np.get_include()],\n    define_macros=[('NPY_NO_DEPRECATED_API', 'NPY_1_7_API_VERSION')]\n)\n\nsetup(ext_modules=cythonize([extension]))\n```\n\n## Is it reliable?\n\nIt seems to be working correctly; at least according to the following [chi-squared tests](https://www.wikiwand.com/en/Chi-squared_test):\n\n```py\n>>> import numpy as np\n>>> from scipy import stats\n\n>>> rng = np.random.RandomState(42)\n>>> k = 1000\n\n>>> for n in range(3, 20):\n...     weights = rng.dirichlet(np.arange(1, n))\n...     sampler = vose.Sampler(weights, seed=42)\n...     samples = sampler.sample(k)\n...     chi2 = stats.chisquare(f_obs=np.bincount(samples), f_exp=weights * k)\n...     assert chi2.pvalue > .05\n\n```\n\n## Is it fast?\n\nHell yeah. The following graph shows the average time taken to sample one integer for different amounts of weights:\n\n<div align=\"center\">\n    <img width=\"60%\" src=\"figures/sampling_time.svg\">\n</div>\n<br>\n\nAs you can see, `vose.Sampler` takes less than a nanosecond to produce a random integer. Here is the construction time:\n\n<div align=\"center\">\n    <img width=\"60%\" src=\"figures/construction_time.svg\">\n</div>\n<br>\n\n`vose.Sampler` is also fast enough to compete with `numpy` and `random`, even when including the construction time. The following table summarizes a comparison I made on my laptop, with `n` being the number of weights and `k` the number of integers to sample:\n\n|    n |    k | np.random.choice   | random.choices   | vose.Sampler   | vose_sampler.VoseAlias   |\n|-----:|-----:|:-------------------|:-----------------|:---------------|:-------------------------|\n|    3 |    1 | 26ns               | 2ns              | 4ns            | 11ns                     |\n|    3 |    2 | 26ns               | 3ns              | 7ns            | 13ns                     |\n|    3 |    3 | 26ns               | 3ns              | 7ns            | 14ns                     |\n|    3 |   10 | 26ns               | 6ns              | 7ns            | 27ns                     |\n|    3 |  100 | 28ns               | 47ns             | 8ns            | 198ns                    |\n|    3 | 1000 | 46ns               | 461ns            | 19ns           | 1μs, 887ns               |\n|   30 |    1 | 27ns               | 6ns              | 4ns            | 69ns                     |\n|   30 |    2 | 26ns               | 7ns              | 7ns            | 73ns                     |\n|   30 |    3 | 27ns               | 7ns              | 8ns            | 72ns                     |\n|   30 |   10 | 27ns               | 14ns             | 7ns            | 88ns                     |\n|   30 |  100 | 31ns               | 63ns             | 8ns            | 256ns                    |\n|   30 | 1000 | 67ns               | 580ns            | 19ns           | 1μs, 935ns               |\n|  300 |    1 | 29ns               | 47ns             | 6ns            | 661ns                    |\n|  300 |    2 | 29ns               | 47ns             | 9ns            | 659ns                    |\n|  300 |    3 | 29ns               | 49ns             | 9ns            | 685ns                    |\n|  300 |   10 | 29ns               | 54ns             | 9ns            | 685ns                    |\n|  300 |  100 | 36ns               | 112ns            | 10ns           | 877ns                    |\n|  300 | 1000 | 96ns               | 717ns            | 20ns           | 2μs, 599ns               |\n| 3000 |    1 | 52ns               | 416ns            | 18ns           | 6μs, 988ns               |\n| 3000 |    2 | 50ns               | 420ns            | 21ns           | 7μs, 39ns                |\n| 3000 |    3 | 51ns               | 439ns            | 21ns           | 7μs, 102ns               |\n| 3000 |   10 | 51ns               | 420ns            | 21ns           | 7μs, 332ns               |\n| 3000 |  100 | 59ns               | 496ns            | 23ns           | 7μs, 349ns               |\n| 3000 | 1000 | 137ns              | 1μs, 213ns       | 35ns           | 10μs, 190ns              |\n\n\nIn summary, you probably don't need to be using `vose.Sampler` if you only need to sample once, regardless of the number of integers you wish to sample. You want to use `vose.Sampler` when you need to sample in a sequential manner, because at that point the construction time will be amortized. Indeed, this will bring you two orders of magnitude improved speed, when compared to calling `np.random.choice` or `random.choices` multiple times.\n\n## Development\n\n```sh\ngit clone https://github.com/MaxHalford/vose\ncd vose\npython setup.py build_ext --inplace\npytest\n```\n\n## Further work\n\n- The weights assigned to each integer cannot be modified. A [search tree](https://www.wikiwand.com/en/Search_tree) can be used as a data structure that supports modifications. This allows modifying weights in `O(log(n))` time, but means sampling also happens in `O(log(n))` time. More information [here](https://stackoverflow.com/questions/34247459/an-efficient-version-alternative-to-the-alias-method-that-samples-without-replac).\n- I'm not 100% the memory allocation of the memoryviews is optimal.\n- Initializing a `vose.Sampler` from another Cython `.pyx` file seems to require some Python interaction; there's probably a way to avoid this.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MaxHalford/vose",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vose",
    "package_url": "https://pypi.org/project/vose/",
    "platform": null,
    "project_url": "https://pypi.org/project/vose/",
    "project_urls": {
      "Homepage": "https://github.com/MaxHalford/vose"
    },
    "release_url": "https://pypi.org/project/vose/0.0.1/",
    "requires_dist": [
      "numpy",
      "pytest ; extra == 'dev'",
      "scipy ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Cython implementation of Vose's Alias method.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15767668,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4c3ed5d1f961c3ae3beabf4659462595040ca77e8b9e0422b18d3e41fe7c991",
          "md5": "ca4c06d976b2eaff6444950bd1d5dc48",
          "sha256": "80f81322c5a8927b803a6846d5762a59318ae2d55d15a92cc7c0fe43c11100da"
        },
        "downloads": -1,
        "filename": "vose-0.0.1-cp311-cp311-macosx_12_0_arm64.whl",
        "has_sig": false,
        "md5_digest": "ca4c06d976b2eaff6444950bd1d5dc48",
        "packagetype": "bdist_wheel",
        "python_version": "cp311",
        "requires_python": ">=3.6",
        "size": 77683,
        "upload_time": "2022-11-14T22:03:56",
        "upload_time_iso_8601": "2022-11-14T22:03:56.953128Z",
        "url": "https://files.pythonhosted.org/packages/c4/c3/ed5d1f961c3ae3beabf4659462595040ca77e8b9e0422b18d3e41fe7c991/vose-0.0.1-cp311-cp311-macosx_12_0_arm64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "243187160a511942b523a5cb7e6e7d629ce1ff76a9c85b3cb49c91913ff0ee63",
          "md5": "baf6751b6b0dbf499ff6bfca107212f5",
          "sha256": "36108cd1ab23bfefcf00e06e609adc37a7ff9781d31bba2b9469998b35a290f5"
        },
        "downloads": -1,
        "filename": "vose-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "baf6751b6b0dbf499ff6bfca107212f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 129826,
        "upload_time": "2022-11-14T22:03:59",
        "upload_time_iso_8601": "2022-11-14T22:03:59.518056Z",
        "url": "https://files.pythonhosted.org/packages/24/31/87160a511942b523a5cb7e6e7d629ce1ff76a9c85b3cb49c91913ff0ee63/vose-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4c3ed5d1f961c3ae3beabf4659462595040ca77e8b9e0422b18d3e41fe7c991",
        "md5": "ca4c06d976b2eaff6444950bd1d5dc48",
        "sha256": "80f81322c5a8927b803a6846d5762a59318ae2d55d15a92cc7c0fe43c11100da"
      },
      "downloads": -1,
      "filename": "vose-0.0.1-cp311-cp311-macosx_12_0_arm64.whl",
      "has_sig": false,
      "md5_digest": "ca4c06d976b2eaff6444950bd1d5dc48",
      "packagetype": "bdist_wheel",
      "python_version": "cp311",
      "requires_python": ">=3.6",
      "size": 77683,
      "upload_time": "2022-11-14T22:03:56",
      "upload_time_iso_8601": "2022-11-14T22:03:56.953128Z",
      "url": "https://files.pythonhosted.org/packages/c4/c3/ed5d1f961c3ae3beabf4659462595040ca77e8b9e0422b18d3e41fe7c991/vose-0.0.1-cp311-cp311-macosx_12_0_arm64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "243187160a511942b523a5cb7e6e7d629ce1ff76a9c85b3cb49c91913ff0ee63",
        "md5": "baf6751b6b0dbf499ff6bfca107212f5",
        "sha256": "36108cd1ab23bfefcf00e06e609adc37a7ff9781d31bba2b9469998b35a290f5"
      },
      "downloads": -1,
      "filename": "vose-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "baf6751b6b0dbf499ff6bfca107212f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 129826,
      "upload_time": "2022-11-14T22:03:59",
      "upload_time_iso_8601": "2022-11-14T22:03:59.518056Z",
      "url": "https://files.pythonhosted.org/packages/24/31/87160a511942b523a5cb7e6e7d629ce1ff76a9c85b3cb49c91913ff0ee63/vose-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}