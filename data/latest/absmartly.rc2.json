{
  "info": {
    "author": "ABSmartly",
    "author_email": "ABSmartly <info@ABSmartly.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# A/B Smartly SDK\n\nA/B Smartly - Python SDK\n\n## Compatibility\n\nThe A/B Smartly Python SDK is compatible with Python 3.\nIt provides both a blocking and an asynchronous interfaces.\n\n\n## Installation\npip install absmartly==0.1.2\n\n### Python Modules\nsetuptools~=60.2.0  \nrequests~=2.28.1  \nurllib3~=1.26.12  \njsons~=1.6.3\n\n### Dependencies\nsh ./run.sh\n\n## Getting Started\n\nPlease follow the [installation](#installation) instructions before trying the following code:\n\n#### Initialization\nThis example assumes an Api Key, an Application, and an Environment have been created in the A/B Smartly web console.\n```python\n\ndef main():\n    client_config = ClientConfig()\n    client_config.endpoint = \"https://sandbox.test.io/v1\"\n    client_config.api_key = \"test\"\n    client_config.application = \"www\"\n    client_config.environment = \"prod\"\n\n    default_client_config = DefaultHTTPClientConfig()\n    default_client = DefaultHTTPClient(default_client_config)\n    sdk_config = ABSmartlyConfig()\n    sdk_config.client = Client(client_config, default_client)\n    sdk = ABSmartly(sdk_config)\n\n    context_config = ContextConfig()\n    ctx = sdk.create_context(context_config)\n\n   # ...\n}\n```\n\n#### Creating a new Context synchronously\n```python\n# define a new context request\n    context_config = ContextConfig()\n    context_config.publish_delay = 10\n    context_config.refresh_interval = 5\n    context_config.units = {\"session_id\": \"bf06d8cb5d8137290c4abb64155584fbdb64d8\",\n                            \"user_id\": \"12345\"}\n\n    context_config = ContextConfig()\n    ctx = sdk.create_context(context_config)\n    ctx.wait_until_ready()\n```\n\n#### Creating a new Context asynchronously\n```python\n# define a new context request\n    context_config = ContextConfig()\n    context_config.publish_delay = 10\n    context_config.refresh_interval = 5\n    context_config.units = {\"session_id\": \"bf06d8cb5d8137290c4abb64155584fbdb64d8\",\n                            \"user_id\": \"12345\"}\n\n    context_config = ContextConfig()\n    ctx = sdk.create_context(context_config)\n    ctx.wait_until_ready_async()\n```\n\n#### Setting extra units for a context\nYou can add additional units to a context by calling the `set_unit()` or the `set_units()` method.\nThis method may be used for example, when a user logs in to your application, and you want to use the new unit type to the context.\nPlease note that **you cannot override an already set unit type** as that would be a change of identity, and will throw an exception. In this case, you must create a new context instead.\nThe `SetUnit()` and `SetUnits()` methods can be called before the context is ready.\n\n```python\ncontext.set_unit(\"db_user_id\", \"1000013\")\n\ncontext.set_units({\n\t\t\"db_user_id\": \"1000013\"\n})\n```\n\n#### Setting context attributes\nThe `set_attributes()` and `set_attributes()` methods can be called before the context is ready.\n```python\ncontext.set_attributes(\"user_agent\", req.get_header(\"User-Agent\"))\n\ncontext.set_attributes({\n        \"customer_age\": \"new_customer\"\n})\n```\n\n#### Selecting a treatment\n```python\nres, _ = context.get_treatment(\"exp_test_experiment\")\nif res == 0:\n        # user is in control group (variant 0)\nelse:\n       # user is in treatment group\n```\n\n#### Tracking a goal achievement\nGoals are created in the A/B Smartly web console.\n```python\ncontext.track(\"payment\", {\n        \"item_count\": 1,\n        \"total_amount\": 1999.99\n})\n```\n\n#### Publishing pending data\nSometimes it is necessary to ensure all events have been published to the A/B Smartly collector, before proceeding.\nYou can explicitly call the `publish()` or `publish_async()` methods.\n```python\n    context.publish()\n```\n\n#### Finalizing\nThe `close()` and `close_async()` methods will ensure all events have been published to the A/B Smartly collector, like `publish()`, and will also \"seal\" the context, throwing an error if any method that could generate an event is called.\n```python\ncontext.close()\n```\n\n#### Refreshing the context with fresh experiment data\nFor long-running contexts, the context is usually created once when the application is first started.\nHowever, any experiments being tracked in your production code, but started after the context was created, will not be triggered.\nTo mitigate this, we can use the `set_refresh_interval()` method on the context config.\n\n```python\n    default_client_config = DefaultHTTPClientConfig()\n    default_client_config.refresh_interval = 5\n```\n\nAlternatively, the `refresh()` method can be called manually.\nThe `refresh()` method pulls updated experiment data from the A/B Smartly collector and will trigger recently started experiments when `get_treatment()` is called again.\n```python\ncontext.refresh()\n```\n\n#### Using a custom Event Logger\nThe A/B Smartly SDK can be instantiated with an event logger used for all contexts.\nIn addition, an event logger can be specified when creating a particular context, in the `ContextConfig`.\n```python\nclass EventType(Enum):\n    ERROR = \"error\"\n    READY = \"ready\"\n    REFRESH = \"refresh\"\n    PUBLISH = \"publish\"\n    EXPOSURE = \"exposure\"\n    GOAL = \"goal\"\n    CLOSE = \"close\"\n\n\nclass ContextEventLogger:\n\n    @abstractmethod\n    def handle_event(self, event_type: EventType, data: object):\n        raise NotImplementedError\n```\nThe data parameter depends on the type of event.\nCurrently, the SDK logs the following events:\n\n| event | when                                                       | data |\n|:---: |------------------------------------------------------------|---|\n| `Error` | `Context` receives an error                                | `Throwable` object |\n| `Ready` | `Context` turns ready                                      | `ContextData` used to initialize the context |\n| `Refresh` | `Context.refresh()` method succeeds                        | `ContextData` used to refresh the context |\n| `Publish` | `Context.publish()` method succeeds                        | `PublishEvent` sent to the A/B Smartly event collector |\n| `Exposure` | `Context.getTreatment()` method succeeds on first exposure | `Exposure` enqueued for publishing |\n| `Goal` | `Context.track()` method succeeds                          | `GoalAchievement` enqueued for publishing |\n| `Close` | `Context.close()` method succeeds the first time           | `null` |\n\n\n#### Peek at treatment variants\nAlthough generally not recommended, it is sometimes necessary to peek at a treatment or variable without triggering an exposure.\nThe A/B Smartly SDK provides a `peek_treament()` method for that.\n\n```python\n res = context.peek_treamnet(\"exp_test_experiment\")\nif res == 0:\n\t# user is in control group (variant 0)\nelse:\n\t# user is in treatment group\n\n```\n\n##### Peeking at variables\n```python\nvariable = context.peek_variable(\"my_variable\")\n```\n\n#### Overriding treatment variants\nDuring development, for example, it is useful to force a treatment for an experiment. This can be achieved with the `override()` and/or `overrides()` methods.\nThe `set_override()` and `set_overrides()` methods can be called before the context is ready.\n```python\ncontext.set_override(\"exp_test_experiment\", 1) # force variant 1 of treatment\ncontext.set_overrides({\n\t\"exp_test_experiment\": 1,\n\t\"exp_another_experiment\": 0\n})\n```\n\n## About A/B Smartly\n**A/B Smartly** is the leading provider of state-of-the-art, on-premises, full-stack experimentation platforms for engineering and product teams that want to confidently deploy features as fast as they can develop them.\nA/B Smartly's real-time analytics helps engineering and product teams ensure that new features will improve the customer experience without breaking or degrading performance and/or business metrics.\n\n### Have a look at our growing list of clients and SDKs:\n- [Java SDK](https://www.github.com/absmartly/java-sdk)\n- [JavaScript SDK](https://www.github.com/absmartly/javascript-sdk)\n- [PHP SDK](https://www.github.com/absmartly/php-sdk)\n- [Swift SDK](https://www.github.com/absmartly/swift-sdk)\n- [Vue2 SDK](https://www.github.com/absmartly/vue2-sdk)\n- [Go SDK](https://www.github.com/absmartly/go-sdk)\n- [Ruby SDK](https://www.github.com/absmartly/ruby-sdk)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/absmartly/python-sdk",
    "keywords": "ABSmartly,SDK,Testing",
    "license": "The MIT License (MIT) Copyright © 2022 <copyright holders>  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ABSmartly",
    "package_url": "https://pypi.org/project/ABSmartly/",
    "platform": null,
    "project_url": "https://pypi.org/project/ABSmartly/",
    "project_urls": {
      "Homepage": "https://github.com/absmartly/python3-sdk"
    },
    "release_url": "https://pypi.org/project/ABSmartly/0.1.3/",
    "requires_dist": [
      "requests (>=2.28.1)",
      "urllib3 (>=1.26.12)",
      "jsons (>=1.6.3)",
      "black ; extra == 'dev'",
      "bumpver ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pip-tools ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3.9",
    "summary": "ABSmartly Python SDK lib",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15747301,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "692c7b3425cc6ed8df9646070931db8c64e47bcf776b36ff6a6108f5a76462c3",
          "md5": "c24db8d836b0628ec6a965265a516e3f",
          "sha256": "dc6fe374831821060b968e6178ef9376b7fbcad548d8f413e96be093957c1790"
        },
        "downloads": -1,
        "filename": "absmartly-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c24db8d836b0628ec6a965265a516e3f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 35886,
        "upload_time": "2022-11-12T21:07:31",
        "upload_time_iso_8601": "2022-11-12T21:07:31.226436Z",
        "url": "https://files.pythonhosted.org/packages/69/2c/7b3425cc6ed8df9646070931db8c64e47bcf776b36ff6a6108f5a76462c3/absmartly-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fe1cbf6484507cb73aaf3d3614f57d56800e92be783bb3f308b63ae2d66e23e",
          "md5": "85255574215f41deec7f34a107d78ad4",
          "sha256": "6d9459f3f39c8ecbf7f7522d3dc5748f8d3c4127315b64979536ff9a5c4491f4"
        },
        "downloads": -1,
        "filename": "absmartly-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "85255574215f41deec7f34a107d78ad4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 28226,
        "upload_time": "2022-11-12T21:07:33",
        "upload_time_iso_8601": "2022-11-12T21:07:33.968453Z",
        "url": "https://files.pythonhosted.org/packages/5f/e1/cbf6484507cb73aaf3d3614f57d56800e92be783bb3f308b63ae2d66e23e/absmartly-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a80345e3958fac3984f52973a56eb92ed6ced250b11d97aa14e36af8db37f50c",
          "md5": "e2b9307edade9bff7813268ad5a3ca48",
          "sha256": "95c3ab275949f1de9baaa8c7337e8051c14a56eb641d29e528361772722508bd"
        },
        "downloads": -1,
        "filename": "ABSmartly-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2b9307edade9bff7813268ad5a3ca48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 35807,
        "upload_time": "2022-11-12T21:28:53",
        "upload_time_iso_8601": "2022-11-12T21:28:53.167587Z",
        "url": "https://files.pythonhosted.org/packages/a8/03/45e3958fac3984f52973a56eb92ed6ced250b11d97aa14e36af8db37f50c/ABSmartly-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d38707efcf3a2bb2659d469b95df099c53f02499512298f4ceeaa7ef8bd717fc",
          "md5": "94eb64ea49d0e8e834395c24cedf148a",
          "sha256": "c17908d99e13edb31273f87740e0c36d5857467523084d49c5faebd7e022508f"
        },
        "downloads": -1,
        "filename": "ABSmartly-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "94eb64ea49d0e8e834395c24cedf148a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 28454,
        "upload_time": "2022-11-12T21:28:55",
        "upload_time_iso_8601": "2022-11-12T21:28:55.322340Z",
        "url": "https://files.pythonhosted.org/packages/d3/87/07efcf3a2bb2659d469b95df099c53f02499512298f4ceeaa7ef8bd717fc/ABSmartly-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a80345e3958fac3984f52973a56eb92ed6ced250b11d97aa14e36af8db37f50c",
        "md5": "e2b9307edade9bff7813268ad5a3ca48",
        "sha256": "95c3ab275949f1de9baaa8c7337e8051c14a56eb641d29e528361772722508bd"
      },
      "downloads": -1,
      "filename": "ABSmartly-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2b9307edade9bff7813268ad5a3ca48",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 35807,
      "upload_time": "2022-11-12T21:28:53",
      "upload_time_iso_8601": "2022-11-12T21:28:53.167587Z",
      "url": "https://files.pythonhosted.org/packages/a8/03/45e3958fac3984f52973a56eb92ed6ced250b11d97aa14e36af8db37f50c/ABSmartly-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d38707efcf3a2bb2659d469b95df099c53f02499512298f4ceeaa7ef8bd717fc",
        "md5": "94eb64ea49d0e8e834395c24cedf148a",
        "sha256": "c17908d99e13edb31273f87740e0c36d5857467523084d49c5faebd7e022508f"
      },
      "downloads": -1,
      "filename": "ABSmartly-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "94eb64ea49d0e8e834395c24cedf148a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 28454,
      "upload_time": "2022-11-12T21:28:55",
      "upload_time_iso_8601": "2022-11-12T21:28:55.322340Z",
      "url": "https://files.pythonhosted.org/packages/d3/87/07efcf3a2bb2659d469b95df099c53f02499512298f4ceeaa7ef8bd717fc/ABSmartly-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}