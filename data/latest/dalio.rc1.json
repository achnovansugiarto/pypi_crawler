{
  "info": {
    "author": "Renato Mateus Zimmermann",
    "author_email": "renatomatz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "![logo](https://github.com/renatomatz/Dal-IO/blob/master/docs/images/logo.png?raw=true)\n\n# The Dal.io Documentation\n\n## Table of Contents\n\n* [Introduction](#introduction)\n* [Instalation](#instalation)\n* [A Guided Example](#a-guided-example)\n* [Next Steps](#next-steps)\n\n\n## Introduction\n\nDal-io is a financial modeling package for python aiming to facilitate the gathering, wrangling and analysis of financial data. The library uses **graphical object structures** and **progressive display of complexity** to make workflows suit the user's specific proficiency in python whithout making efficiency\nsacrifices. \n\nThe core library implements common workflows from well-supported packages and the means to flexibly interlink them, and aims to continue adding relevent features. However, the user is not constrained by these features, and is free to extend pieces through inheritance in order to implement extra functionality that can be used with the rest of the package. See `developers_guide` for more information on extending core features.\n\n\n## Instalation\n\nYou can clone this repository from git using\n\n```bash\n    git clone https://github.com/renatomatz/Dal-io\n```\n\nIf you are using Windows, make sure you are in the package folder to use the functionality and that you run the following command before importing the modules.\n\n```python\n    import sys\n    sys.path.append(\"/path-to-dalio/Dal-io\") \n```\n\nFor Linux and Mac, you can access the package contents from your python environment anywhere with\n\n```bash\n    export PYTHONPATH=$PYTHONPATH:\"path/to/Dal-io\"\n```\n\n\n## A Guided Example\n\nLet's go through a quick example of what Dal-io can do. We'll build a simple portfolio optimization workflow and test it out with some sample stocks.\n\nThis example will be fairly dry, so if you want to jump right into it with some understanding of the Dal-io mechanics, you can go through the `beginners_guide` first. If you just want to see what the library is capable of, let's get right to it.\n\nWe'll start off by importing the Dal-io pieces\n\n```python\n    import numpy as np\n\n    import dalio.external as de\n    import dalio.translator as dt\n    import dalio.pipe as dp\n    import dalio.model as dm\n    import dalio.application as da\n```\n\nSpecific pieces can also be imported inidvidually, though for testing this sub-module import structure is preferred.\n\nNow lets set up our stock data input from Yahoo! Finance.\n\n```python\n    tickers = [\"GOOG\", \"MSFT\", \"ATVI\", \"TTWO\", \"GM\", \"FORD\", \"SPY\"]\n\n    stocks = dt.YahooStockTranslator()\\\n        .set_input(de.YahooDR())\n```\n\nEasy right? Notice that the stock input is composed of one external source (in this case `de.YahooDR`) and one translator (`dt.YahooStockTranslator`). This is the case for any input, with one piece getting raw data from an external source and another one translating it to a format friendly to Dal-io pieces. For more on formatting, go to `formatting`. \n\nNotice the `.set_input` call that took in the YahooDR object. Every all translators, pipes, models and applications share this method that allows them to plug the ourput of another object as their own input. This idea of connecting different objects like nodes in a graph is at the core of the **graphical object design**.\n\nAt this point you can try out running the model with :code:`stocks.run(ticker=tickers)` which will get the OHLCV data for the ticker symbols assigned to :code\"`tickers`, though you can specify any ticker available in Yahoo! finance. Notice that the column names where standardized to be all lower-case with undercores (\\_) instead of spaces. This is performed as part of the translation step to ensure all imported data can be referenced with common string representations.\n\nNow lets create a data processing pipeline for our input data.\n\n```python\n    time_conf = dp.DateSelect()\n\n    close = dp.PipeLine(\n        dp.ColSelect(columns=\"close\"),\n        time_conf\n    )(stocks)\n\n    annual_rets = close + \\\n        dp.Period(\"Y\", agg_func=lambda x: x[-1]) + \\\n        dp.Change(strategy=\"pct_change\")\n\n    cov = dp.Custom(lambda df: df.cov(), strategy=\"pipe\")\\\n        .with_input(annual_rets)\n\n    exp_rets = annual_rets + dp.Custom(np.mean)\n```\n\nThat was a bit more challenging! Let's take it step by step.\n\nWe started off defining a DateSelect pipe (which we will use later) and passingit into a pipeline with other pipes to get a company's annual returns. Pipelines aggregate zero or more Pipe objects and pass in a common input through all of their transformations. This skips data integrity checking while still allowing users to control pipes inside the pipeline from the outside (as we will with `time_conf`)\n\nWe then passed added a custom pipe that applies the np.mean function to the annualr returns to get the expected returns for each stock.\n\nFinally, we did the exact same thing but with a lambda that calls the pd.DataFrame internal method .cov() to get the dataframe's covariance. As we will be passing the whole dataframe to the function at once, we set the Custom strategy to \"pipe\".\n\nNotice how we didn't use `.set_input()` as we did before, that's because we utilized alternative ways of establishing this same node-to-node connection. \n\nWe can connect nodes with:\n\n1. `p1.set_input(p2)` set p1's input to p2.\n\n1. `p1.with_input(p2)` create a copy of p1 and set its input to p2.\n\n1. `p1(p2)` same as `p1.with_input(p2)`.\n\n1. `pL + p2` set p2 as the last transformation in the PipeLine pL.\n\nNow let's set up our efficient frontier model, get the optimal weights and finally create our optimal portfolio model.\n\n```python\n    ef = dm.MakeEfficientFrontier(weight_bounds=(-0.5, 1))\\\n        .set_input(\"sample_covariance\", cov)\\\n        .set_input(\"expected_returns\", exp_rets)\\\n\n    weights = dp.OptimumWeights()(ef)\\\n        .set_piece(\"strategy\", \"max_sharpe\", risk_free_rate=0.0)\n\n    opt_port = dm.OptimumPortfolio()\\\n        .set_input(\"weights_in\", weights)\\\n        .set_input(\"data_in\", close)\n```\n\nAnd those are two examples of Dal-io Models! As you can see, models can have multiple named inputs, which can be set the same way as you would in a pipe but also having to specify their name. You also saw an example of a Builder, which has pieces (that can be set with the `.set_piece()`) method which allow for more modular flexibility when deciding characteristics of certain pipes or models.We could go into what each source and pieces represents, but that can be better done through the documentation.\n\nNow, as a final step, lets graph the performance of the optimal portfolio.\n\n```python\n    graph = da.PandasXYGrapher(x=None, y=\"close\", legend=\"upper_right\")\\\n        .set_input(\"data_in\", dp.Index(100)(opt_port))\\\n        .set_output(\"data_out\", de.PyPlotGraph(figsize=(12, 8)))\n```\n\nAdditionally, you can change the time range of the whole model at any point using the `time_conf` object we created all the way in the beginning. Below is an example of setting the dates from 2016 to 2020.\n\n```python\n    time_conf.set_start(\"2016-01-01\")\n    time_conf.set_end(\"2019-12-31\")\n```\n\nAnd that's it! \n\nAll that you have to do now is run the model with :code:`graph.run(ticker=tickers)` to \n\n1. Get stock data from Yahoo! Finance\n\n1. Process data \n\n1. Optimize portfolio weights\n\n1. Get an optimum portfolio\n\n1. Graph optimum portfolio\n\nWhich yields this figure:\n\n![port-opt-graph](https://github.com/renatomatz/Dal-IO/blob/master/docs/images/port_opt_cook_graph.png)\n\nNotice how this :code:`.run()` call was the same as you did all the way back when you only had your imported data. This method is also common to all translators, pipes, models and applications, and it gives you the piece's output. \n\nThis means you can get information of any of the stages you created like this, and for anly stock that you'd like. For example, we can run the :code:`weights` object we created to get the weights associated with the portfolio we just plotted.\n\n```python\n    weights.run(ticker=tickers)\n```\n\n```bash\n    {'GOOG': 0.45514,\n     'MSFT': 0.82602,\n     'ATVI': -0.49995,\n     'TTWO': 0.29241,\n     'GM': -0.43788,\n     'FORD': 0.38413,\n     'SPY': -0.01986}\n```\n\nHope this example was enough to show how you can create clean and powerful models using just a few lines of code!\n\n## Next Steps\n\nIf you read and enjoyed the example above, that's great! Now comes the part where you get to understand its various pieces, workflows and internal logic for you to start creating your own models with Dal-io. \n\nCheck out our documentation at [the Dal-io Documentation](https://dalio.readthedocs.io/en/latest/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://dalio.readthedocs.io/en/latest/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dalio",
    "package_url": "https://pypi.org/project/dalio/",
    "platform": "",
    "project_url": "https://pypi.org/project/dalio/",
    "project_urls": {
      "Homepage": "https://dalio.readthedocs.io/en/latest/"
    },
    "release_url": "https://pypi.org/project/dalio/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "graphical workflow for financial modeling",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7735859,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9930bddd030a7f4ad7afeca4b68811fdab88edaa4d1a52529e7b6d878a53f6ff",
          "md5": "1457ced14b925e82a1c7daf771078f58",
          "sha256": "0dc0ddd2604fc6b139059d169232645b5edbdbf728d380356de078009821fd61"
        },
        "downloads": -1,
        "filename": "dalio-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1457ced14b925e82a1c7daf771078f58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 81105,
        "upload_time": "2020-07-19T23:27:20",
        "upload_time_iso_8601": "2020-07-19T23:27:20.963336Z",
        "url": "https://files.pythonhosted.org/packages/99/30/bddd030a7f4ad7afeca4b68811fdab88edaa4d1a52529e7b6d878a53f6ff/dalio-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b58700777a68902912a03826af94bc1599725640f2e22c02fd4ce3377f03368",
          "md5": "3355f42087b0b6874730facde1a41b67",
          "sha256": "1732d5e3c5171dd41bd0757f14f5b7ce42528452a7763b6a9696bda52d0ed6a9"
        },
        "downloads": -1,
        "filename": "dalio-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3355f42087b0b6874730facde1a41b67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3215753,
        "upload_time": "2020-07-19T23:27:25",
        "upload_time_iso_8601": "2020-07-19T23:27:25.146589Z",
        "url": "https://files.pythonhosted.org/packages/2b/58/700777a68902912a03826af94bc1599725640f2e22c02fd4ce3377f03368/dalio-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9930bddd030a7f4ad7afeca4b68811fdab88edaa4d1a52529e7b6d878a53f6ff",
        "md5": "1457ced14b925e82a1c7daf771078f58",
        "sha256": "0dc0ddd2604fc6b139059d169232645b5edbdbf728d380356de078009821fd61"
      },
      "downloads": -1,
      "filename": "dalio-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1457ced14b925e82a1c7daf771078f58",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 81105,
      "upload_time": "2020-07-19T23:27:20",
      "upload_time_iso_8601": "2020-07-19T23:27:20.963336Z",
      "url": "https://files.pythonhosted.org/packages/99/30/bddd030a7f4ad7afeca4b68811fdab88edaa4d1a52529e7b6d878a53f6ff/dalio-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b58700777a68902912a03826af94bc1599725640f2e22c02fd4ce3377f03368",
        "md5": "3355f42087b0b6874730facde1a41b67",
        "sha256": "1732d5e3c5171dd41bd0757f14f5b7ce42528452a7763b6a9696bda52d0ed6a9"
      },
      "downloads": -1,
      "filename": "dalio-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3355f42087b0b6874730facde1a41b67",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3215753,
      "upload_time": "2020-07-19T23:27:25",
      "upload_time_iso_8601": "2020-07-19T23:27:25.146589Z",
      "url": "https://files.pythonhosted.org/packages/2b/58/700777a68902912a03826af94bc1599725640f2e22c02fd4ce3377f03368/dalio-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}