{
  "info": {
    "author": "DSDM - Institut De Recherches Servier",
    "author_email": "nicolas.boisseau@servier.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Lumos\n\nLumos is a program that generates full-plate images from the separate site/field pictures obtained through the Cell Painting assay.\n\nIt has 2 operation modes that allow it to render images for specific channels of a plate, as well as colorful images that combine all channels together:\n\n<img src=\"./docs/readme-qc-channel-4.jpg\" alt=\"Quality Control channel 4 image\" width=\"49%\"/> <img src=\"./docs/readme-cp.jpg\" alt=\"Cell Painting image\" width=\"49%\"/>\n\n</br>\n\nIn this document, you will find information related to:\n * [The installation of the package](#installing-lumos)\n * [How to use Lumos](#usage)\n * [Detailed examples](#detailed-examples)\n\n</br>\n\nTo learn more about the command-line interface of the program, refer to the [**Wiki pages**](https://github.com/nicolasboisseau/lumos/wiki).\n\nYou can also find instructions for developers in [this other documentation](./readme-dev.md).\n\n</br>\n\n## Installing Lumos\n\nPrerequisites:\n- You need to have Python 3.8 installed on a Windows or Linux machine.\n- You also need to have the raw site images of your plates on your machine.\n\nThen, **to install Lumos**, choose one of the following:\n- Install Lumos using PIP with: \n  ```\n  pip install lumos-cli\n  ```\n- Install Lumos from the source files:\n  - Download the source files, either by downloading the ZIP file or cloning the repository.\n  - Install the dependencies using PIP: ```pip install -r .\\requirements.txt```\n  - Install Lumos: ```python setup.py install```\n\n</br>\n\n## Usage\n\n### Configuring Lumos\n\nTo configure Lumos to work with your specific plate formats, you must first create a configuration file. To do so, enter the command below:\n\n```\nlumos --generate-config-file ./my_config.yaml\n```\n\nThen, in the generated file, you should change the following entries to match the organization of your images:\n- `path_from_run_folder_to_plates`\n- `path_from_plate_folder_to_images`\n- `input_file_naming_scheme`\n- `well_grid`\n- `site_grid`\n- `image_dimensions`\n\nThen, also make sure that you update the following items with the correct ID of your channels (i.e. how they appear in your file names):\n- the keys/sub-entries of `channel_info`\n- `default_channels_to_render`\n- `brightfield_channels`\n- `cp_channels_to_use`\n\nYou can view an example of this [**here**](#example-configuration-file).\n\nOnce this is done, you are ready to use Lumos on your images.\n\n### Simple commands\n\nA first command you can run is the following:\n```\nlumos --config-file ./my_config.yaml qc --scope plate --source-path <path_to_a_plate_folder> --output-path ./output/\n```\nwhere `<path_to_a_plate_folder>` is a path to the root folder of a plate. In [this example](#example-configuration-file), this would be one of the `PLATE-XXX` folders.\n\nThis will generate 1 greyscale image per channel of the plate (excluding brightfield channels) and allow you to check easily that the quality of the images that you have is good:\n\n<img src=\"./docs/readme-qc-channel-1.jpg\" alt=\"Quality Control channel 1 image\" width=\"32%\"/> <img src=\"./docs/readme-qc-channel-2.jpg\" alt=\"Quality Control channel 2 image\" width=\"32%\"/> <img src=\"./docs/readme-qc-channel-3.jpg\" alt=\"Quality Control channel 3 image\" width=\"32%\"/>\n<img src=\"./docs/readme-qc-channel-4.jpg\" alt=\"Quality Control channel 4 image\" width=\"32%\"/> <img src=\"./docs/readme-qc-channel-5.jpg\" alt=\"Quality Control channel 5 image\" width=\"32%\"/>\n\n> #### Note:\n> We could have also used argument aliases in order to make the command shorter, as follows:\n> ```\n> lumos -cf ./my_config.yaml qc -s plate -sp <path_to_a_plate_folder> -op ./output/\n> ```\n> To see a list of all available arguments and their aliases, use `lumos qc --help`.\n\nThis first command relied on the `qc`, or \"**Quality Control**\" mode of Lumos (hence the `qc` keyword present in the command). Similarly, Lumos also has a `cp`, or \"**Cell Painting**\" mode, that allows you to generate 1 combined image of all the channels of a plate (in color).\n\nTo use it, type the following in your terminal:\n```\nlumos -cf my_config.yaml cp --scope plate --source-path <path_to_a_plate_folder> --output-path ./output/\n```\n\nThis will generate an image looking similar to this:\n\n<img src=\"./docs/readme-cp.jpg\" alt=\"Cell Painting image\" width=\"55%\"/> (zooming in: <img src=\"./docs/readme-cp-zoom.jpg\" alt=\"Cell Painting image zoom\" width=\"25%\"/>)\n\n> #### Note:\n> To see a list of all available Cell Painting arguments and their aliases, use `lumos cp --help`.\n\nIn addition to those first examples, Lumos QC can also generate images for only a specific channel of a plate, or for a whole run (i.e. a collection of plates). And similarly, Lumos CP can generate separate images for each well of a plate, just for a single well, or even for each site of those wells.\n\nThis, as well as other functionalities of Lumos, can be chosen through the arguments used in your commands. To see a full list of the available arguments and options you have for each operation mode, type `lumos qc --help` and `lumos cp --help` respectively.\n\nYou can also explore some of our [more detailed examples](#detailed-examples) or refer to our [**Wiki pages**](https://github.com/nicolasboisseau/lumos/wiki) to learn more.\n\n</br>\n</br>\n\n## Detailed examples\n\n### Example configuration file\n\n If you had the following folder structure:\n ```\n JUMPCP_images/\n     ├ run_1/\n         └ plates/\n             ├ PLATE-101/\n               └ Images/\n                   ├ r01c01f01p01-ch1sk1fk1fl1.tiff\n                   ├ r01c01f01p01-ch2sk1fk1fl1.tiff\n                   ├ ...\n                   └ r32c48f04p01-ch8sk1fk1fl1.tiff\n             ├ PLATE-102/\n               └ Images/\n                   ├ r01c01f01p01-ch1sk1fk1fl1.tiff\n                   ├ r01c01f01p01-ch2sk1fk1fl1.tiff\n                   ├ ...\n                   └ r32c48f04p01-ch8sk1fk1fl1.tiff\n             └ ...\n     ├ run_2/\n         └ plates/\n             ├ PLATE-201/...\n             ├ PLATE-202/...\n             └ ...\n     └ run_3/\n         └ plates/\n             ├ PLATE-301/...\n             ├ PLATE-302/...\n             └ ...\n ```\n\n with wells in a grid of 32 rows by 48 columns, sites in a grid of 2 by 2, and images of 1080 by 1080 pixels.\n\n You would edit the following entries in your configuration file as follows:\n ```yaml\n path_from_run_folder_to_plates: 'plates/'\n path_from_plate_folder_to_images: 'Images/'\n input_file_naming_scheme: rows_and_columns\n well_grid: 32x48\n site_grid: 2x2\n image_dimensions: 1080x1080\n channel_info:\n   ch1: [...]\n   ch2: [...]\n   ch3: [...]\n   ch4: [...]\n   ch5: [...]\n   ch6: [...]\n   ch7: [...]\n   ch8: [...]\n default_channels_to_render:\n - ch1\n - ch2\n - ch3\n - ch4\n - ch5\n brightfield_channels:\n - ch6\n - ch7\n - ch8\n cp_channels_to_use:\n - ch1\n - ch2\n - ch3\n - ch4\n - ch5\n ```\n\n### Example 1: Generating the image of a specific channel of a plate\n\nTo do this, we can use the 'channel' scope with the additional `--channel` argument to select which channel should be rendered by specifying its channel ID. Assuming the above example configuration, to render the channel \"ch3\" of our plate, we would get:\n```\nlumos --config-file my_config.yaml qc --scope channel --channel ch3 --source-path <path_to_a_plate_folder> --output-path ./output/\n```\n\nAnd alternatively, using argument aliases, we can use the shorter following command:\n```\nlumos -cf my_config.yaml qc -s channel -c ch3 -sp <path_to_a_plate_folder> -op ./output/\n```\n\n### Example 2: Generating an image for all channels of a plate, including brightfields\n\nTo do this, we can add the `--brightfield` argument to our regular command. With this argument, we can either choose to include a specific Brightfield channel by writing its ID, or include all of them by writing 'all'. In this example, we will do the latter:\n```\nlumos --config-file my_config.yaml qc --scope plate --source-path <path_to_a_plate_folder> --output-path ./output/ --brightfield all\n```\n\nAnd alternatively, using argument aliases, we can use the shorter following command:\n```\nlumos -cf my_config.yaml qc -s plate -sp <path_to_a_plate_folder> -op ./output/ -b all\n```\n\n### Example 3: Generating images for all channels of multiple plates (i.e. a \"run\")\n\nTo do this, we can use the 'run' scope. Then, instead of putting a path to a plate as our `--source-path`, we put the path to our \"run\" (i.e. our collection of plate).\n\n```\nlumos --config-file my_config.yaml qc --scope run --source-path <path_to_a_run_folder> --output-path ./output/\n```\n\n> #### Note:\n> Make sure that your configuration file contains the correct path to follow between your run folder to your plate folders in `path_from_run_folder_to_plates`\n\nAnd alternatively, using argument aliases, we can use the shorter following command:\n```\nlumos -cf my_config.yaml qc -s run -sp <path_to_a_run_folder> -op ./output/\n```\n\n### Example 4: Generating the Cell Painted image of a specific well in a plate\n\nThis can be done using the 'wells' scope of the `cp` mode of Lumos. Then, we can restrict the generation of images to a single well using the `--single-well` argument followed by the well name (e.g. \"r03c21\"):\n\n```\nlumos --config-file my_config.yaml cp --scope wells --single-well r03c21 --source-path <path_to_a_plate_folder> --output-path ./output/\n```\n\nAnd alternatively, using argument aliases, we can use the shorter following command:\n```\nlumos -cf my_config.yaml cp -s wells -w r03c21 -sp <path_to_a_plate_folder> -op ./output/\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nicolasboisseau/lumos",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lumos-cli",
    "package_url": "https://pypi.org/project/lumos-cli/",
    "platform": null,
    "project_url": "https://pypi.org/project/lumos-cli/",
    "project_urls": {
      "Homepage": "https://github.com/nicolasboisseau/lumos"
    },
    "release_url": "https://pypi.org/project/lumos-cli/0.1.1.post1/",
    "requires_dist": [
      "opencv-python (==4.5.4.60)",
      "pandas (==1.3.5)",
      "tqdm (==4.62.3)",
      "click (==8.0.3)",
      "art (==5.4)",
      "PyYAML (==6.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "A cell painting plateviewer",
    "version": "0.1.1.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14947045,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94470b8667d1129b1862d34cf0ffd954b4d5faceb2d14d3704ee846f3b7b9abe",
          "md5": "588b7ea0ad19a4b855ccb52dc5593994",
          "sha256": "1897ac87afc7d7ff3711c7c729d2481972f54073e00003b04b1f18f01534e076"
        },
        "downloads": -1,
        "filename": "lumos_cli-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "588b7ea0ad19a4b855ccb52dc5593994",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 25719,
        "upload_time": "2022-08-25T13:00:06",
        "upload_time_iso_8601": "2022-08-25T13:00:06.167304Z",
        "url": "https://files.pythonhosted.org/packages/94/47/0b8667d1129b1862d34cf0ffd954b4d5faceb2d14d3704ee846f3b7b9abe/lumos_cli-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd521cb38fbc0bb28fed1fe81933c3645cdce144d3f94ff548809cb0f4374d77",
          "md5": "e491042ccad523f2b0fe26a31ac2d1a0",
          "sha256": "bea14127b3fb925dfc75033f53d135bb86b0927a05d0d1c799a5f8b56f37f337"
        },
        "downloads": -1,
        "filename": "lumos-cli-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e491042ccad523f2b0fe26a31ac2d1a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25241,
        "upload_time": "2022-08-25T13:00:07",
        "upload_time_iso_8601": "2022-08-25T13:00:07.588689Z",
        "url": "https://files.pythonhosted.org/packages/bd/52/1cb38fbc0bb28fed1fe81933c3645cdce144d3f94ff548809cb0f4374d77/lumos-cli-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcef72606dfa131b669eae79febfa58f8061d0444c6ce4d45f73bd0048e80c34",
          "md5": "a5f702146273dcd20e3c3486a7747f48",
          "sha256": "841b4207034fc778d9092861dead6613851cf98f7aa7de270bed5b406dac6841"
        },
        "downloads": -1,
        "filename": "lumos_cli-0.1.1.post1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5f702146273dcd20e3c3486a7747f48",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 26600,
        "upload_time": "2022-08-31T09:26:27",
        "upload_time_iso_8601": "2022-08-31T09:26:27.872414Z",
        "url": "https://files.pythonhosted.org/packages/dc/ef/72606dfa131b669eae79febfa58f8061d0444c6ce4d45f73bd0048e80c34/lumos_cli-0.1.1.post1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ce249442475f9dc86b3b8f01c3a63a029eb19dd5c5e9d9b763d77038b87fd0d",
          "md5": "7b2153f4b146913ee0f34f37d9e889ed",
          "sha256": "2c23d3c12db7501d0756ff2b414b047973f1240c07ca1291183ace8230604016"
        },
        "downloads": -1,
        "filename": "lumos-cli-0.1.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b2153f4b146913ee0f34f37d9e889ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25856,
        "upload_time": "2022-08-31T09:26:28",
        "upload_time_iso_8601": "2022-08-31T09:26:28.995099Z",
        "url": "https://files.pythonhosted.org/packages/0c/e2/49442475f9dc86b3b8f01c3a63a029eb19dd5c5e9d9b763d77038b87fd0d/lumos-cli-0.1.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dcef72606dfa131b669eae79febfa58f8061d0444c6ce4d45f73bd0048e80c34",
        "md5": "a5f702146273dcd20e3c3486a7747f48",
        "sha256": "841b4207034fc778d9092861dead6613851cf98f7aa7de270bed5b406dac6841"
      },
      "downloads": -1,
      "filename": "lumos_cli-0.1.1.post1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5f702146273dcd20e3c3486a7747f48",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 26600,
      "upload_time": "2022-08-31T09:26:27",
      "upload_time_iso_8601": "2022-08-31T09:26:27.872414Z",
      "url": "https://files.pythonhosted.org/packages/dc/ef/72606dfa131b669eae79febfa58f8061d0444c6ce4d45f73bd0048e80c34/lumos_cli-0.1.1.post1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ce249442475f9dc86b3b8f01c3a63a029eb19dd5c5e9d9b763d77038b87fd0d",
        "md5": "7b2153f4b146913ee0f34f37d9e889ed",
        "sha256": "2c23d3c12db7501d0756ff2b414b047973f1240c07ca1291183ace8230604016"
      },
      "downloads": -1,
      "filename": "lumos-cli-0.1.1.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "7b2153f4b146913ee0f34f37d9e889ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 25856,
      "upload_time": "2022-08-31T09:26:28",
      "upload_time_iso_8601": "2022-08-31T09:26:28.995099Z",
      "url": "https://files.pythonhosted.org/packages/0c/e2/49442475f9dc86b3b8f01c3a63a029eb19dd5c5e9d9b763d77038b87fd0d/lumos-cli-0.1.1.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}