{
  "info": {
    "author": "Jiajie Yan",
    "author_email": "jiaeyan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "# 甲言Jiayan\n[![PyPI](https://img.shields.io/badge/pypi-v0.0.21-blue.svg)](https://pypi.org/project/jiayan/)\n\n[中文](#简介)  \n[English](#introduction)  \n\n## 简介\n甲言，取「甲骨文言」之意，是一款专注于古汉语处理的NLP工具包。  \n目前通用的汉语NLP工具均以现代汉语为核心语料，对古代汉语的处理效果很差(详见[分词](#2))。本项目的初衷，便是辅助古汉语信息处理，帮助有志于挖掘古文化矿藏的古汉语学者、爱好者等更好地分析和利用文言资料，从「文化遗产」中创造出「文化新产」。  \n当前版本支持[词库构建](#1)、[自动分词](#2)、[词性标注](#3)、[文言句读](#4)和[标点](#5)五项功能，更多功能正在开发中。  \n  \n## 功能  \n* [__词库构建__](#1)  \n  * 利用无监督的双[字典树](https://baike.baidu.com/item/Trie树)、[点互信息](https://www.jianshu.com/p/79de56cbb2c7)以及左右邻接[熵](https://baike.baidu.com/item/信息熵/7302318?fr=aladdin)进行文言词库自动构建。\n* [__分词__](#2)  \n  * 利用无监督、无词典的[N元语法](https://baike.baidu.com/item/n元语法)和[隐马尔可夫模型](https://baike.baidu.com/item/隐马尔可夫模型)进行古汉语自动分词。\n  * 利用词库构建功能产生的文言词典，基于有向无环词图、句子最大概率路径和动态规划算法进行分词。\n* [__词性标注__](#3)  \n  * 基于词的[条件随机场](https://baike.baidu.com/item/条件随机场)的序列标注，词性详见[词性表](jiayan/postagger/README.md)。\n* [__断句__](#4)\n  * 基于字符的条件随机场的序列标注，引入点互信息及[t-测试值](https://baike.baidu.com/item/t检验/9910799?fr=aladdin)为特征，对文言段落进行自动断句。\n* [__标点__](#5)\n  * 基于字符的层叠式条件随机场的序列标注，在断句的基础上对文言段落进行自动标点。\n* 文白翻译\n  * 开发中，目前处于文白平行语料收集、清洗阶段。\n  * 基于[双向长短时记忆循环网络](https://baike.baidu.com/item/长短期记忆人工神经网络/17541107?fromtitle=LSTM&fromid=17541102&fr=aladdin)和[注意力机制](https://baike.baidu.com/item/注意力机制)的神经网络生成模型，对古文进行自动翻译。\n* 注意：受语料影响，目前不支持繁体。如需处理繁体，可先用[OpenCC](https://github.com/yichen0831/opencc-python)将输入转换为简体，再将结果转化为相应繁体(如港澳台等)。  \n\n## 安装  \n    $ pip install jiayan \n    $ pip install https://github.com/kpu/kenlm/archive/master.zip\n\n## 使用  \n以下各模块的使用方法均来自[examples.py](jiayan/examples.py)。\n1. 下载模型并解压：[百度网盘](https://pan.baidu.com/s/1PXP0eSQWWcNmAb6lkuB5sw)，提取码：`p0sc`\n   * jiayan.klm：语言模型，主要用来分词，以及句读标点任务中的特征提取；  \n   * pos_model：CRF词性标注模型；\n   * cut_model：CRF句读模型；\n   * punc_model：CRF标点模型；\n   * 庄子.txt：用来测试词库构建的庄子全文。\n   \n2. <span id=\"1\">__词库构建__</span>  \n   ```\n   from jiayan import PMIEntropyLexiconConstructor\n   \n   constructor = PMIEntropyLexiconConstructor()\n   lexicon = constructor.construct_lexicon('庄子.txt')\n   constructor.save(lexicon, '庄子词库.csv')\n   ```\n   \n   结果：  \n   ```\n   Word,Frequency,PMI,R_Entropy,L_Entropy\n   之,2999,80,7.944909328101839,8.279435615456894\n   而,2089,80,7.354575005231323,8.615211168836439\n   不,1941,80,7.244331150611089,6.362131306822925\n   ...\n   天下,280,195.23602384978196,5.158574399464853,5.24731990592901\n   圣人,111,150.0620531154239,4.622606551534004,4.6853474419338585\n   万物,94,377.59805590304126,4.5959107835319895,4.538837960294887\n   天地,92,186.73504238078462,3.1492586603863617,4.894533538722486\n   孔子,80,176.2550051738876,4.284638190120882,2.4056390622295662\n   庄子,76,169.26227942514097,2.328252899085616,2.1920058354921066\n   仁义,58,882.3468468468468,3.501609497059026,4.96900162987599\n   老聃,45,2281.2228260869565,2.384853500510039,2.4331958387289765\n   ...\n   ```\n3. <span id=\"2\">__分词__</span>  \n    1. 字符级隐马尔可夫模型分词，效果符合语感，建议使用，需加载语言模型 `jiayan.klm`\n        ```\n        from jiayan import load_lm\n        from jiayan import CharHMMTokenizer\n        \n        text = '是故内圣外王之道，暗而不明，郁而不发，天下之人各为其所欲焉以自为方。'\n        \n        lm = load_lm('jiayan.klm')\n        tokenizer = CharHMMTokenizer(lm)\n        print(list(tokenizer.tokenize(text)))\n        ```\n        结果：  \n        `['是', '故', '内圣外王', '之', '道', '，', '暗', '而', '不', '明', '，', '郁', '而', '不', '发', '，', '天下', '之', '人', '各', '为', '其', '所', '欲', '焉', '以', '自', '为', '方', '。']`  \n        \n        由于古汉语没有公开分词数据，无法做效果评估，但我们可以通过不同NLP工具对相同句子的处理结果来直观感受本项目的优势:  \n        \n        试比较 [LTP](https://github.com/HIT-SCIR/ltp) (3.4.0) 模型分词结果：  \n        `['是', '故内', '圣外王', '之', '道', '，', '暗而不明', '，', '郁', '而', '不', '发', '，', '天下', '之', '人', '各', '为', '其', '所', '欲', '焉以自为方', '。']`  \n        \n        再试比较 [HanLP](http://hanlp.com) 分词结果：  \n        `['是故', '内', '圣', '外', '王之道', '，', '暗', '而', '不明', '，', '郁', '而', '不', '发', '，', '天下', '之', '人', '各为其所欲焉', '以', '自为', '方', '。']`  \n        \n        可见本工具对古汉语的分词效果明显优于通用汉语NLP工具。  \n        \n    2. 词级最大概率路径分词，基本以字为单位，颗粒度较粗\n        ```\n        from jiayan import WordNgramTokenizer\n        \n        text = '是故内圣外王之道，暗而不明，郁而不发，天下之人各为其所欲焉以自为方。'\n        tokenizer = WordNgramTokenizer()\n        print(list(tokenizer.tokenize(text)))\n        ```\n        结果：  \n        `['是', '故', '内', '圣', '外', '王', '之', '道', '，', '暗', '而', '不', '明', '，', '郁', '而', '不', '发', '，', '天下', '之', '人', '各', '为', '其', '所', '欲', '焉', '以', '自', '为', '方', '。']`  \n\n4. <span id=\"3\">__词性标注__</span>\n    ```\n    from jiayan import CRFPOSTagger\n    \n    words = ['天下', '大乱', '，', '贤圣', '不', '明', '，', '道德', '不', '一', '，', '天下', '多', '得', '一', '察', '焉', '以', '自', '好', '。']\n    \n    postagger = CRFPOSTagger()\n    postagger.load('pos_model')\n    print(postagger.postag(words))\n    ```\n    结果：  \n    `['n', 'a', 'wp', 'n', 'd', 'a', 'wp', 'n', 'd', 'm', 'wp', 'n', 'a', 'u', 'm', 'v', 'r', 'p', 'r', 'a', 'wp']`  \n\n5. <span id=\"4\">__断句__</span>\n    ```\n    from jiayan import load_lm\n    from jiayan import CRFSentencizer\n    \n    text = '天下大乱贤圣不明道德不一天下多得一察焉以自好譬如耳目皆有所明不能相通犹百家众技也皆有所长时有所用虽然不该不遍一之士也判天地之美析万物之理察古人之全寡能备于天地之美称神之容是故内圣外王之道暗而不明郁而不发天下之人各为其所欲焉以自为方悲夫百家往而不反必不合矣后世之学者不幸不见天地之纯古之大体道术将为天下裂'\n    \n    lm = load_lm('jiayan.klm')\n    sentencizer = CRFSentencizer(lm)\n    sentencizer.load('cut_model')\n    print(sentencizer.sentencize(text))\n    ```\n    结果：  \n    `['天下大乱', '贤圣不明', '道德不一', '天下多得一察焉以自好', '譬如耳目', '皆有所明', '不能相通', '犹百家众技也', '皆有所长', '时有所用', '虽然', '不该不遍', '一之士也', '判天地之美', '析万物之理', '察古人之全', '寡能备于天地之美', '称神之容', '是故内圣外王之道', '暗而不明', '郁而不发', '天下之人各为其所欲焉以自为方', '悲夫', '百家往而不反', '必不合矣', '后世之学者', '不幸不见天地之纯', '古之大体', '道术将为天下裂']`  \n\n6. <span id=\"5\">__标点__</span>\n    ```\n    from jiayan import load_lm\n    from jiayan import CRFPunctuator\n    \n    text = '天下大乱贤圣不明道德不一天下多得一察焉以自好譬如耳目皆有所明不能相通犹百家众技也皆有所长时有所用虽然不该不遍一之士也判天地之美析万物之理察古人之全寡能备于天地之美称神之容是故内圣外王之道暗而不明郁而不发天下之人各为其所欲焉以自为方悲夫百家往而不反必不合矣后世之学者不幸不见天地之纯古之大体道术将为天下裂'\n    \n    lm = load_lm('jiayan.klm')\n    punctuator = CRFPunctuator(lm, 'cut_model')\n    punctuator.load('punc_model')\n    print(punctuator.punctuate(text))\n    ```\n    结果：  \n    `天下大乱，贤圣不明，道德不一，天下多得一察焉以自好，譬如耳目，皆有所明，不能相通，犹百家众技也，皆有所长，时有所用，虽然，不该不遍，一之士也，判天地之美，析万物之理，察古人之全，寡能备于天地之美，称神之容，是故内圣外王之道，暗而不明，郁而不发，天下之人各为其所欲焉以自为方，悲夫！百家往而不反，必不合矣，后世之学者，不幸不见天地之纯，古之大体，道术将为天下裂。`\n\n\n## 版本\n* v0.0.21\n  * 将安装过程分为两步，确保得到最新的kenlm版本。  \n* v0.0.2\n  * 增加词性标注功能。\n* v0.0.1\n  * 词库构建、自动分词、文言句读、标点功能开放。\n  \n  \n---\n\n## Introduction\nJiayan, which means Chinese characters engraved on oracle bones, is a professional Python NLP tool for Classical Chinese.  \nPrevailing Chinese NLP tools are mainly trained on modern Chinese data, which leads to bad performance on Classical Chinese (See [__Tokenizing__](#6)). The purpose of this project is to assist Classical Chinese information processing.  \nCurrent version supports [lexicon construction](#6), [tokenizing](#7), [POS tagging](#8), [sentence segmentation](#9) and [automatic punctuation](#10), more features are in development.  \n  \n## Features  \n* [__Lexicon Construction__](#6)  \n  * With an unsupervised approach, construct lexicon with [Trie](https://en.wikipedia.org/wiki/Trie) -tree, [PMI](https://en.wikipedia.org/wiki/Pointwise_mutual_information) (_point-wise mutual information_) and neighboring [entropy](https://en.wikipedia.org/wiki/Entropy_\\(information_theory\\)) of left and right characters.  \n* [__Tokenizing__](#7)  \n  * With an unsupervised, no dictionary approach to tokenize a Classical Chinese sentence with [N-gram](https://en.wikipedia.org/wiki/N-gram) language model and [HMM](https://en.wikipedia.org/wiki/Hidden_Markov_model) (_Hidden Markov Model_).  \n  * With the dictionary produced from lexicon construction, tokenize a Classical Chinese sentence with Directed Acyclic Word Graph, Max Probability Path and [Dynamic Programming](https://en.wikipedia.org/wiki/Dynamic_programming).  \n* [__POS Tagging__](#8)  \n  * Word level sequence tagging with [CRF](https://en.wikipedia.org/wiki/Conditional_random_field) (_Conditional Random Field_). See POS tag categories [here](jiayan/postagger/README.md).  \n* [__Sentence Segmentation__](#9)\n  * Character level sequence tagging with CRF, introduces PMI and [T-test](https://en.wikipedia.org/wiki/Student%27s_t-test) values as features.  \n* [__Punctuation__](#10)\n  * Character level sequence tagging with layered CRFs, punctuate given Classical Chinese texts based on results of sentence segmentation.    \n* Note: Due to data we used, we don't support traditional Chinese for now. If you have to process traditional one, please use [OpenCC](https://github.com/yichen0831/opencc-python) to convert traditional input to simplified, then you could convert the results back.  \n\n## Installation  \n    $ pip install jiayan \n    $ pip install https://github.com/kpu/kenlm/archive/master.zip\n\n## Usages  \nThe usage codes below are all from [examples.py](jiayan/examples.py).  \n1. Download the models and unzip them：[Google Drive](https://drive.google.com/open?id=1piZQBO8OXQ5Cpi17vAcZsrbJLPABnKzp)\n   * jiayan.klm：the language model used for tokenizing and feature extraction for sentence segmentation and punctuation;    \n   * pos_model：the CRF model for POS tagging;\n   * cut_model：the CRF model for sentence segmentation;\n   * punc_model：the CRF model for punctuation;  \n   * 庄子.txt：the full text of 《Zhuangzi》 used for testing lexicon construction.  \n   \n2. <span id=\"6\">__Lexicon Construction__</span>  \n   ```\n   from jiayan import PMIEntropyLexiconConstructor\n   \n   constructor = PMIEntropyLexiconConstructor()\n   lexicon = constructor.construct_lexicon('庄子.txt')\n   constructor.save(lexicon, 'Zhuangzi_Lexicon.csv')\n   ```\n   \n   Result：  \n   ```\n   Word,Frequency,PMI,R_Entropy,L_Entropy\n   之,2999,80,7.944909328101839,8.279435615456894\n   而,2089,80,7.354575005231323,8.615211168836439\n   不,1941,80,7.244331150611089,6.362131306822925\n   ...\n   天下,280,195.23602384978196,5.158574399464853,5.24731990592901\n   圣人,111,150.0620531154239,4.622606551534004,4.6853474419338585\n   万物,94,377.59805590304126,4.5959107835319895,4.538837960294887\n   天地,92,186.73504238078462,3.1492586603863617,4.894533538722486\n   孔子,80,176.2550051738876,4.284638190120882,2.4056390622295662\n   庄子,76,169.26227942514097,2.328252899085616,2.1920058354921066\n   仁义,58,882.3468468468468,3.501609497059026,4.96900162987599\n   老聃,45,2281.2228260869565,2.384853500510039,2.4331958387289765\n   ...\n   ```\n3. <span id=\"7\">__Tokenizing__</span>  \n    1. The character based HMM, recommended, needs language model: `jiayan.klm`\n        ```\n        from jiayan import load_lm\n        from jiayan import CharHMMTokenizer\n        \n        text = '是故内圣外王之道，暗而不明，郁而不发，天下之人各为其所欲焉以自为方。'\n        \n        lm = load_lm('jiayan.klm')\n        tokenizer = CharHMMTokenizer(lm)\n        print(list(tokenizer.tokenize(text)))\n        ```\n        Result：  \n        `['是', '故', '内圣外王', '之', '道', '，', '暗', '而', '不', '明', '，', '郁', '而', '不', '发', '，', '天下', '之', '人', '各', '为', '其', '所', '欲', '焉', '以', '自', '为', '方', '。']`  \n        \n        Since there is no public tokenizing data for Classical Chinese, it's hard to do performance evaluation directly; However, we can compare the results with other popular modern Chinese NLP tools to check the performance:  \n        \n        Compare the tokenizing result of [LTP](https://github.com/HIT-SCIR/ltp) (3.4.0):  \n        `['是', '故内', '圣外王', '之', '道', '，', '暗而不明', '，', '郁', '而', '不', '发', '，', '天下', '之', '人', '各', '为', '其', '所', '欲', '焉以自为方', '。']`  \n        \n        Also, compare the tokenizing result of [HanLP](http://hanlp.com):  \n        `['是故', '内', '圣', '外', '王之道', '，', '暗', '而', '不明', '，', '郁', '而', '不', '发', '，', '天下', '之', '人', '各为其所欲焉', '以', '自为', '方', '。']`  \n        \n        It's apparent that Jiayan has much better tokenizing performance than general Chinese NLP tools.  \n        \n    2. Max probability path approach tokenizing based on words\n        ```\n        from jiayan import WordNgramTokenizer\n        \n        text = '是故内圣外王之道，暗而不明，郁而不发，天下之人各为其所欲焉以自为方。'\n        tokenizer = WordNgramTokenizer()\n        print(list(tokenizer.tokenize(text)))\n        ```\n        Result:  \n        `['是', '故', '内', '圣', '外', '王', '之', '道', '，', '暗', '而', '不', '明', '，', '郁', '而', '不', '发', '，', '天下', '之', '人', '各', '为', '其', '所', '欲', '焉', '以', '自', '为', '方', '。']`  \n\n4. <span id=\"8\">__POS Tagging__</span>\n    ```\n    from jiayan import CRFPOSTagger\n    \n    words = ['天下', '大乱', '，', '贤圣', '不', '明', '，', '道德', '不', '一', '，', '天下', '多', '得', '一', '察', '焉', '以', '自', '好', '。']\n    \n    postagger = CRFPOSTagger()\n    postagger.load('pos_model')\n    print(postagger.postag(words))\n    ```\n    Result:    \n    `['n', 'a', 'wp', 'n', 'd', 'a', 'wp', 'n', 'd', 'm', 'wp', 'n', 'a', 'u', 'm', 'v', 'r', 'p', 'r', 'a', 'wp']`  \n\n4. <span id=\"9\">__Sentence Segmentation__</span>\n    ```\n    from jiayan import load_lm\n    from jiayan import CRFSentencizer\n    \n    text = '天下大乱贤圣不明道德不一天下多得一察焉以自好譬如耳目皆有所明不能相通犹百家众技也皆有所长时有所用虽然不该不遍一之士也判天地之美析万物之理察古人之全寡能备于天地之美称神之容是故内圣外王之道暗而不明郁而不发天下之人各为其所欲焉以自为方悲夫百家往而不反必不合矣后世之学者不幸不见天地之纯古之大体道术将为天下裂'\n    \n    lm = load_lm('jiayan.klm')\n    sentencizer = CRFSentencizer(lm)\n    sentencizer.load('cut_model')\n    print(sentencizer.sentencize(text))\n    ```\n    Result:  \n    `['天下大乱', '贤圣不明', '道德不一', '天下多得一察焉以自好', '譬如耳目', '皆有所明', '不能相通', '犹百家众技也', '皆有所长', '时有所用', '虽然', '不该不遍', '一之士也', '判天地之美', '析万物之理', '察古人之全', '寡能备于天地之美', '称神之容', '是故内圣外王之道', '暗而不明', '郁而不发', '天下之人各为其所欲焉以自为方', '悲夫', '百家往而不反', '必不合矣', '后世之学者', '不幸不见天地之纯', '古之大体', '道术将为天下裂']`  \n\n5. <span id=\"10\">__Punctuation__</span>\n    ```\n    from jiayan import load_lm\n    from jiayan import CRFPunctuator\n    \n    text = '天下大乱贤圣不明道德不一天下多得一察焉以自好譬如耳目皆有所明不能相通犹百家众技也皆有所长时有所用虽然不该不遍一之士也判天地之美析万物之理察古人之全寡能备于天地之美称神之容是故内圣外王之道暗而不明郁而不发天下之人各为其所欲焉以自为方悲夫百家往而不反必不合矣后世之学者不幸不见天地之纯古之大体道术将为天下裂'\n    \n    lm = load_lm('jiayan.klm')\n    punctuator = CRFPunctuator(lm, 'cut_model')\n    punctuator.load('punc_model')\n    print(punctuator.punctuate(text))\n    ```\n    Result:  \n    `天下大乱，贤圣不明，道德不一，天下多得一察焉以自好，譬如耳目，皆有所明，不能相通，犹百家众技也，皆有所长，时有所用，虽然，不该不遍，一之士也，判天地之美，析万物之理，察古人之全，寡能备于天地之美，称神之容，是故内圣外王之道，暗而不明，郁而不发，天下之人各为其所欲焉以自为方，悲夫！百家往而不反，必不合矣，后世之学者，不幸不见天地之纯，古之大体，道术将为天下裂。`\n\n\n## Versions\n* v0.0.21\n  * Divide the installation into two steps to ensure to get the latest version of kenlm.    \n* v0.0.2\n  * POS tagging feature is open.\n* v0.0.1\n  * Add features of lexicon construction, tokenizing, sentence segmentation and automatic punctuation.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jiaeyan/Jiayan",
    "keywords": "classical-chinese,ancient-chinese,nlp",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jiayan",
    "package_url": "https://pypi.org/project/jiayan/",
    "platform": "",
    "project_url": "https://pypi.org/project/jiayan/",
    "project_urls": {
      "Homepage": "https://github.com/jiaeyan/Jiayan"
    },
    "release_url": "https://pypi.org/project/jiayan/0.0.21/",
    "requires_dist": null,
    "requires_python": ">=2.6, >=3",
    "summary": "The NLP toolkit designed for classical chinese.",
    "version": "0.0.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5833477,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c939cc1dfa934d0fa4c8146caf854a3836a01ac4be497f986adc0004f2d87c71",
          "md5": "3b619cbfc400c98bd10e5c70f8d9753a",
          "sha256": "1e55427c353b9a5075954e14cf6e937fdbad1b0867c8107b95200bfafef0af31"
        },
        "downloads": -1,
        "filename": "jiayan-0.0.1-py3.6.egg",
        "has_sig": false,
        "md5_digest": "3b619cbfc400c98bd10e5c70f8d9753a",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": ">=2.6, >=3",
        "size": 248468,
        "upload_time": "2019-09-11T05:36:22",
        "upload_time_iso_8601": "2019-09-11T05:36:22.286413Z",
        "url": "https://files.pythonhosted.org/packages/c9/39/cc1dfa934d0fa4c8146caf854a3836a01ac4be497f986adc0004f2d87c71/jiayan-0.0.1-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2634046a8161fc4ada0dedb3f246541d6ce9a4f0e80abf5fdd2b9bcf8eaf955f",
          "md5": "7287e919f9b701d160c45f23618438ea",
          "sha256": "2e7959944fbbdfdb42646ac88b0e17cbde7fec10552ebb619f3ba2ba5c9a368d"
        },
        "downloads": -1,
        "filename": "jiayan-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7287e919f9b701d160c45f23618438ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.6, >=3",
        "size": 211778,
        "upload_time": "2019-08-21T05:56:17",
        "upload_time_iso_8601": "2019-08-21T05:56:17.514893Z",
        "url": "https://files.pythonhosted.org/packages/26/34/046a8161fc4ada0dedb3f246541d6ce9a4f0e80abf5fdd2b9bcf8eaf955f/jiayan-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "349cf994212663af76607a138c92470a2f3e09df2d0deda66f3fa1011476474d",
          "md5": "20a0384f015e82ba8b742f012c7253a5",
          "sha256": "48ad776bd201b9797e8b8b6b60ed3c570d3064809e3050a84648fc14143f166e"
        },
        "downloads": -1,
        "filename": "jiayan-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "20a0384f015e82ba8b742f012c7253a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.6, >=3",
        "size": 217104,
        "upload_time": "2019-09-11T05:36:25",
        "upload_time_iso_8601": "2019-09-11T05:36:25.602776Z",
        "url": "https://files.pythonhosted.org/packages/34/9c/f994212663af76607a138c92470a2f3e09df2d0deda66f3fa1011476474d/jiayan-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afdbb49a4b0edc6be59b3fafb4c3bc953da039cd21959493ab7557e7a904c935",
          "md5": "748d1ccc1b7f569377936fd1d40b6279",
          "sha256": "c061077866d02e0bcb9b25cda65f34859e304eec94ad2e26d9e42088319d677b"
        },
        "downloads": -1,
        "filename": "jiayan-0.0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "748d1ccc1b7f569377936fd1d40b6279",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.6, >=3",
        "size": 217293,
        "upload_time": "2019-09-16T01:20:11",
        "upload_time_iso_8601": "2019-09-16T01:20:11.679335Z",
        "url": "https://files.pythonhosted.org/packages/af/db/b49a4b0edc6be59b3fafb4c3bc953da039cd21959493ab7557e7a904c935/jiayan-0.0.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "afdbb49a4b0edc6be59b3fafb4c3bc953da039cd21959493ab7557e7a904c935",
        "md5": "748d1ccc1b7f569377936fd1d40b6279",
        "sha256": "c061077866d02e0bcb9b25cda65f34859e304eec94ad2e26d9e42088319d677b"
      },
      "downloads": -1,
      "filename": "jiayan-0.0.21.tar.gz",
      "has_sig": false,
      "md5_digest": "748d1ccc1b7f569377936fd1d40b6279",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.6, >=3",
      "size": 217293,
      "upload_time": "2019-09-16T01:20:11",
      "upload_time_iso_8601": "2019-09-16T01:20:11.679335Z",
      "url": "https://files.pythonhosted.org/packages/af/db/b49a4b0edc6be59b3fafb4c3bc953da039cd21959493ab7557e7a904c935/jiayan-0.0.21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}