{
  "info": {
    "author": "Patrick Hohenecker",
    "author_email": "mail@paho.at",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "arg-magiq\n=========\n\n\n`argmagiq` is a Python library that allows for parsing command-line args automagically.\nTo that end, all you have to do is to define a configuration class that contains a property for each of the user-defined\nargs, and let `argmagiq` take care of parsing them for you\n\n\n\nInstallation\n------------\n\n\nThe package `argmagiq` can be installed via pip as follows:\n\n```bash\npip install git+https://github.com/phohenecker/arg-magiq\n```\n\n\n\nHow-To\n------\n\n\n### Step 1: Define Your Config Class\n\nEvery property (**not** attribute) of your configuration class that has both a getter **and** a setter method is\nconsidered as an arg.\nPlease notice that all args are treated as options, i.e., `argmagiq` does not generate positional args, and the name of\na considered property `my_property` is translated into an according option `--my-property`.\nFor example, the following code defines an arg ``--my-property``:\n\n```python\n@property\ndef my_property(self) -> str:\n    \"\"\"str: This property defines an arg.\"\"\"\n    return self._my_property\n\n@my_property.setter\ndef my_property(self, my_property: str) -> None:\n    self._my_property = my_property\n```\n\nAn important detail of this code snippet is the **return-type annotation** of the getter method, which allows `argmagiq`\nto identify the data type of the according arg and sanitize values provided by the user.\nAt the moment, the types `bool`, `int`, `float`, and `str` are supported.\nNotice that generic type-aliases are not allowed except for `typing.Optional[X]`, if `X` is any of the supported types. \nFinally, notice that the docstring of the getter method, if present, is printed as description of the arg in the help\ntext of the application.\n\n**Notice:**\nJust like Python's `argparse` package, `argmagiq` prints an automatically generated help text, if either `-h` or\n`--help` is provided.\n\n\n### Step 2: Let `argmagiq` Parse Args\n\nOnce you defined your config class, parsing args is as easy as importing `argmagiq` and running a single command:\n\n```python\nimport argmagiq\n\nparsed_config = argmagiq.parse_args(\n        YourConfigClass,\n        app_name,\n        app_description\n)\n```\n\nIn this code snippet, `app_name` and `app_description` are two strings that define the name of your application, which\nis used in its synopsis (the usage instruction at the beginning of the help), as well as a description of the same,\nwhich is displayed as part of the help text.\nThe return value of `parse_args` is an instance of `YourConfigClass` that has been populated with the values provided\nfor the corresponding args.\n\n**Notice:**\nWhen the help text is printed (i.e., the user provided `-h` or `--help`), then `parse_args` returns `None`.\n\n\n### Default Values\n\nIf an arg has a default value, then this has to be specified as an attribute of the config class.\nThe name of such an attribute has to be an all-caps version of the according property prefixed with `DEFAULT_`.\nFor example, the following snippet defines a default value for the property `my_property` (which, as before, defines the\narg `--my-property`):\n\n```python\nclass YourConfigClass(object):\n\n    DEFAULT_MY_PROPERTY = \"blub\"\n    ...\n```\n\nBy default, every arg without default value is considered as required, and an error will be raised, if the user does not\nspecify the same.\nIf you want to explicitly mark an arg without default value as optional, though, then you can annotate the\naccording getter method with `@argmagiq.optional`:\n\n```python\n@argmagiq.optional\n@property\ndef my_property(self) -> str:\n    ...\n```\n\n\n### Reading Args From A JSON File\n\nAs an alternative way of specifying args, which is particularly handy, if an applications requires a lot of\nuser-defined configuration, `argmagiq` allows for providing them as a JSON file as follows:\n\n```bash\n$ ./your-app.py -- /path/to/config.json\n```\n\nIn this example, the file at path `/path/to/config.json` specifies the args for the application.\nNotice that JSON files have to be shallow dictionaries that describe key-value pairs using the same naming as the\nconfiguration class.\nFor example:\n\n```json\n{\n    \"my_property\": \"some value\",\n    ...\n}\n```\n\n\n\nExamples\n--------\n\n\nFor full working examples, please have a look at the\n[`examples` folder](https://github.com/phohenecker/arg-magiq/tree/master/examples).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phohenecker/arg-magiq",
    "keywords": "",
    "license": "BSD-2-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argmagiq",
    "package_url": "https://pypi.org/project/argmagiq/",
    "platform": "",
    "project_url": "https://pypi.org/project/argmagiq/",
    "project_urls": {
      "Homepage": "https://github.com/phohenecker/arg-magiq"
    },
    "release_url": "https://pypi.org/project/argmagiq/0.1.0/",
    "requires_dist": [
      "insanity (>=2017.1)"
    ],
    "requires_python": ">=3.7",
    "summary": "A Python library for parsing command-line args automagically.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7747323,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "675e6f6a7824b582561f5695d6251c06117ea4185f80614faa9c1c80beaa2da9",
          "md5": "076301f29851623e4240d05e9a75a1f0",
          "sha256": "74bd8c2b81e166ccc283f9a3141355f48b57314b0fe9248cbb6b0c4111148e88"
        },
        "downloads": -1,
        "filename": "argmagiq-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "076301f29851623e4240d05e9a75a1f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28178,
        "upload_time": "2020-07-21T09:18:44",
        "upload_time_iso_8601": "2020-07-21T09:18:44.113859Z",
        "url": "https://files.pythonhosted.org/packages/67/5e/6f6a7824b582561f5695d6251c06117ea4185f80614faa9c1c80beaa2da9/argmagiq-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89f244d6687bf7ec68c3130dc0a0fc089e5461dfda1b1f16317896ec14da0b57",
          "md5": "0e78762bd446878bf6fb9feb3e352df3",
          "sha256": "ac96c89ca4b4b7d555ebf5f91dfbab88ba63e863933d855291e8940f622dcf4c"
        },
        "downloads": -1,
        "filename": "argmagiq-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0e78762bd446878bf6fb9feb3e352df3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13867,
        "upload_time": "2020-07-21T09:18:46",
        "upload_time_iso_8601": "2020-07-21T09:18:46.870777Z",
        "url": "https://files.pythonhosted.org/packages/89/f2/44d6687bf7ec68c3130dc0a0fc089e5461dfda1b1f16317896ec14da0b57/argmagiq-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "675e6f6a7824b582561f5695d6251c06117ea4185f80614faa9c1c80beaa2da9",
        "md5": "076301f29851623e4240d05e9a75a1f0",
        "sha256": "74bd8c2b81e166ccc283f9a3141355f48b57314b0fe9248cbb6b0c4111148e88"
      },
      "downloads": -1,
      "filename": "argmagiq-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "076301f29851623e4240d05e9a75a1f0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 28178,
      "upload_time": "2020-07-21T09:18:44",
      "upload_time_iso_8601": "2020-07-21T09:18:44.113859Z",
      "url": "https://files.pythonhosted.org/packages/67/5e/6f6a7824b582561f5695d6251c06117ea4185f80614faa9c1c80beaa2da9/argmagiq-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89f244d6687bf7ec68c3130dc0a0fc089e5461dfda1b1f16317896ec14da0b57",
        "md5": "0e78762bd446878bf6fb9feb3e352df3",
        "sha256": "ac96c89ca4b4b7d555ebf5f91dfbab88ba63e863933d855291e8940f622dcf4c"
      },
      "downloads": -1,
      "filename": "argmagiq-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0e78762bd446878bf6fb9feb3e352df3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13867,
      "upload_time": "2020-07-21T09:18:46",
      "upload_time_iso_8601": "2020-07-21T09:18:46.870777Z",
      "url": "https://files.pythonhosted.org/packages/89/f2/44d6687bf7ec68c3130dc0a0fc089e5461dfda1b1f16317896ec14da0b57/argmagiq-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}