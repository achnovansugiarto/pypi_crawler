{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# Patta\n![GitHub forks](https://img.shields.io/github/forks/AgentMaker/PaTTA)\n![GitHub Repo stars](https://img.shields.io/github/stars/AgentMaker/PaTTA)\n![GitHub](https://img.shields.io/github/license/AgentMaker/PaTTA)  \nImage Test Time Augmentation with Paddle2.0!\n\n```\n           Input\n             |           # input batch of images \n        / / /|\\ \\ \\      # apply augmentations (flips, rotation, scale, etc.)\n       | | | | | | |     # pass augmented batches through model\n       | | | | | | |     # reverse transformations for each batch of masks/labels\n        \\ \\ \\ / / /      # merge predictions (mean, max, gmean, etc.)\n             |           # output batch of masks/labels\n           Output\n```\n## Table of Contents\n1. [Quick Start](#quick-start)\n- [Test](#Test)\n- [Predict](#Predict)\n- [Use Tools](#Use-Tools)\n2. [Transforms](#Advanced-Examples (DIY Transforms))\n3. [Aliases](#Aliases (Combos))\n4. [Merge modes](#Merge-modes)\n5. [Installation](#installation)\n\n## Quick start (Default Transforms)\n\n#### Test\nWe support that you can use the following to test after defining the network.\n\n#####  Segmentation model wrapping [[docstring](patta/wrappers.py#L8)]:\n```python\nimport patta as tta\ntta_model = tta.SegmentationTTAWrapper(model, tta.aliases.d4_transform(), merge_mode='mean')\n```\n#####  Classification model wrapping [[docstring](patta/wrappers.py#L52)]:\n```python\ntta_model = tta.ClassificationTTAWrapper(model, tta.aliases.five_crop_transform())\n```\n#####  Keypoints model wrapping [[docstring](patta/wrappers.py#L96)]:\n```python\ntta_model = tta.KeypointsTTAWrapper(model, tta.aliases.flip_transform(), scaled=True)\n```\n**Note**: the model must return keypoints in the format `Tensor([x1, y1, ..., xn, yn])`\n\n#### Predict\nWe support that you can use the following to test when you have the static model: `*.pdmodel`、`*.pdiparams`、`*.pdiparams.info`.\n\n#####  Load model [[docstring](patta/load_model.py#L3)]:\n```python\nimport patta as tta\nmodel = tta.load_model(path='output/model')\n```\n#####  Segmentation model wrapping [[docstring](patta/wrappers.py#L8)]:\n```python\ntta_model = tta.SegmentationTTAWrapper(model, tta.aliases.d4_transform(), merge_mode='mean')\n```\n#####  Classification model wrapping [[docstring](patta/wrappers.py#L52)]:\n```python\ntta_model = tta.ClassificationTTAWrapper(model, tta.aliases.five_crop_transform())\n```\n#####  Keypoints model wrapping [[docstring](patta/wrappers.py#L96)]:\n```python\ntta_model = tta.KeypointsTTAWrapper(model, tta.aliases.flip_transform(), scaled=True)\n```\n\n#### Use-Tools\n#####  Segmentation model [[docstring](tools/seg.py)]:\nWe recommend modifying the file `seg.py` according to your own model.\n```python\npython seg.py --model_path='output/model' \\\n                 --batch_size=16 \\\n                 --test_dataset='test.txt'\n```\n**Note**: Related to [paddleseg](https://github.com/PaddlePaddle/Paddleseg)\n\n## Advanced-Examples (DIY Transforms)\n#####  Custom transform:\n```python\n# defined 2 * 2 * 3 * 3 = 36 augmentations !\ntransforms = tta.Compose(\n    [\n        tta.HorizontalFlip(),\n        tta.Rotate90(angles=[0, 180]),\n        tta.Scale(scales=[1, 2, 4]),\n        tta.Multiply(factors=[0.9, 1, 1.1]),        \n    ]\n)\n\ntta_model = tta.SegmentationTTAWrapper(model, transforms)\n```\n##### Custom model (multi-input / multi-output)\n```python\n# Example how to process ONE batch on images with TTA\n# Here `image`/`mask` are 4D tensors (B, C, H, W), `label` is 2D tensor (B, N)\n\nfor transformer in transforms: # custom transforms or e.g. tta.aliases.d4_transform() \n\n    # augment image\n    augmented_image = transformer.augment_image(image)\n\n    # pass to model\n    model_output = model(augmented_image, another_input_data)\n\n    # reverse augmentation for mask and label\n    deaug_mask = transformer.deaugment_mask(model_output['mask'])\n    deaug_label = transformer.deaugment_label(model_output['label'])\n\n    # save results\n    labels.append(deaug_mask)\n    masks.append(deaug_label)\n\n# reduce results as you want, e.g mean/max/min\nlabel = mean(labels)\nmask = mean(masks)\n```\n\n## Optional Transforms\n\n| Transform      | Parameters                | Values                            |\n|----------------|:-------------------------:|:---------------------------------:|\n| HorizontalFlip | -                         | -                                 |\n| VerticalFlip   | -                         | -                                 |\n| Rotate90       | angles                    | List\\[0, 90, 180, 270]            |\n| Scale          | scales<br>interpolation   | List\\[float]<br>\"nearest\"/\"linear\"|\n| Resize         | sizes<br>original_size<br>interpolation   | List\\[Tuple\\[int, int]]<br>Tuple\\[int,int]<br>\"nearest\"/\"linear\"|\n| Add            | values                    | List\\[float]                      |\n| Multiply       | factors                   | List\\[float]                      |\n| FiveCrops      | crop_height<br>crop_width | int<br>int                        |\n\n## Aliases (Combos)\n\n  - flip_transform (horizontal + vertical flips)\n  - hflip_transform (horizontal flip)\n  - d4_transform (flips + rotation 0, 90, 180, 270)\n  - multiscale_transform (scale transform, take scales as input parameter)\n  - five_crop_transform (corner crops + center crop)\n  - ten_crop_transform (five crops + five crops on horizontal flip)\n\n## Merge-modes\n - mean\n - gmean (geometric mean)\n - sum\n - max\n - min\n - tsharpen ([temperature sharpen](https://www.kaggle.com/c/severstal-steel-defect-detection/discussion/107716#latest-624046) with t=0.5)\n\n## Installation\nPyPI:\n```bash\n# Use pip install PaTTA\n$ pip install patta\n```\nor\n```bash\n# After downloading the whole dir\n$ git clone https://github.com/AgentMaker/PaTTA.git\n$ pip install PaTTA/\n\n```\n\n## Run tests\n\n```bash\n# run test_transforms.py and test_base.py for test\npython test/test_transforms.py\npython test/test_base.py\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "patta",
    "package_url": "https://pypi.org/project/patta/",
    "platform": "",
    "project_url": "https://pypi.org/project/patta/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/patta/0.0.2/",
    "requires_dist": [
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.0.0",
    "summary": "Images test time augmentation with Paddle.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9815845,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72fa3a30d550d7fc2a2decce111dbbe890dc14a30a18e3d8df3729aca961b041",
          "md5": "bb8c54597827f53f83baf692f22a69e4",
          "sha256": "46839a99170712d2a935ff09508a36aabf4419ce2654ce897748cfa7ad061e6f"
        },
        "downloads": -1,
        "filename": "patta-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb8c54597827f53f83baf692f22a69e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0.0",
        "size": 11025,
        "upload_time": "2021-03-19T02:13:59",
        "upload_time_iso_8601": "2021-03-19T02:13:59.415429Z",
        "url": "https://files.pythonhosted.org/packages/72/fa/3a30d550d7fc2a2decce111dbbe890dc14a30a18e3d8df3729aca961b041/patta-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd374ddaaff552175eafd0879af20f7799a701f4d930b91a6bf621c68d154e27",
          "md5": "4caef6c6ce33c285c2a56eb755107d16",
          "sha256": "c1f31a4934de8414b43b6a4a324afeba931e69749073f34fb3a3cc3e6469a2c8"
        },
        "downloads": -1,
        "filename": "patta-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4caef6c6ce33c285c2a56eb755107d16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0.0",
        "size": 12080,
        "upload_time": "2021-03-19T02:14:00",
        "upload_time_iso_8601": "2021-03-19T02:14:00.776517Z",
        "url": "https://files.pythonhosted.org/packages/bd/37/4ddaaff552175eafd0879af20f7799a701f4d930b91a6bf621c68d154e27/patta-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72fa3a30d550d7fc2a2decce111dbbe890dc14a30a18e3d8df3729aca961b041",
        "md5": "bb8c54597827f53f83baf692f22a69e4",
        "sha256": "46839a99170712d2a935ff09508a36aabf4419ce2654ce897748cfa7ad061e6f"
      },
      "downloads": -1,
      "filename": "patta-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb8c54597827f53f83baf692f22a69e4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0.0",
      "size": 11025,
      "upload_time": "2021-03-19T02:13:59",
      "upload_time_iso_8601": "2021-03-19T02:13:59.415429Z",
      "url": "https://files.pythonhosted.org/packages/72/fa/3a30d550d7fc2a2decce111dbbe890dc14a30a18e3d8df3729aca961b041/patta-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd374ddaaff552175eafd0879af20f7799a701f4d930b91a6bf621c68d154e27",
        "md5": "4caef6c6ce33c285c2a56eb755107d16",
        "sha256": "c1f31a4934de8414b43b6a4a324afeba931e69749073f34fb3a3cc3e6469a2c8"
      },
      "downloads": -1,
      "filename": "patta-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4caef6c6ce33c285c2a56eb755107d16",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0.0",
      "size": 12080,
      "upload_time": "2021-03-19T02:14:00",
      "upload_time_iso_8601": "2021-03-19T02:14:00.776517Z",
      "url": "https://files.pythonhosted.org/packages/bd/37/4ddaaff552175eafd0879af20f7799a701f4d930b91a6bf621c68d154e27/patta-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}