{
  "info": {
    "author": "Joshua Gould",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==============\nbackedarray\n==============\n\nSparse (csc and csr) and dense arrays backed by on-disk storage in Zarr_ or HDF5_.\nAllows accessing slices of larger than memory arrays.\nInspired by h5sparse_.\n\nExamples\n--------\n\n.. code:: ipython3\n\n    import backedarray as ba\n    import scipy.sparse\n    import numpy as np\n    import h5py\n    import zarr\n\n\n\nCreate Dataset\n==============\n\n.. code:: ipython3\n\n    csr_matrix = scipy.sparse.random(100, 50, format=\"csr\", density=0.2)\n    dense_array = csr_matrix.toarray()\n\nHDF5 Backend\n------------\n\n.. code:: ipython3\n\n    # Write sparse matrix in csc or csr format to hdf5 file\n    h5_csr_path = 'csr.h5'\n    with h5py.File(h5_csr_path, \"w\") as f:\n        ba.write_sparse(f.create_group(\"X\"), csr_matrix)\n\n.. code:: ipython3\n\n    # Write 2-d numpy array to hdf5\n    h5_dense_path = 'dense.h5'\n    with h5py.File(h5_dense_path, \"w\") as f:\n        f[\"X\"] = dense_array\n\nZarr Backend\n------------\n\n.. code:: ipython3\n\n    # Write sparse matrix in csc or csr format to zarr file\n    zarr_csr_path = 'csr.zarr'\n    with zarr.open(zarr_csr_path, mode=\"w\") as f:\n        ba.write_sparse(f.create_group(\"X\"), csr_matrix)\n\n.. code:: ipython3\n\n     # Write 2-d numpy array to zarr format\n    zarr_dense_path = 'dense.zarr'\n    with zarr.open(zarr_dense_path, mode=\"w\") as f:\n        f[\"X\"] = dense_array\n\nRead Dataset\n============\n\nHDF5 Backend\n------------\n\n.. code:: ipython3\n\n    h5_csr_file = h5py.File(h5_csr_path, \"r\")\n    h5_csr_disk = ba.open(h5_csr_file[\"X\"])\n    h5_dense_file =  h5py.File(h5_dense_path, \"r\")\n    h5_dense_disk = ba.open(h5_dense_file[\"X\"])\n\nZarr Backend\n------------\n\n.. code:: ipython3\n\n    zarr_csr_disk = ba.open(zarr.open(zarr_csr_path)[\"X\"])\n    zarr_dense_disk = ba.open(zarr.open(zarr_dense_path)[\"X\"])\n\nNumpy Style Indexing\n====================\n\n.. code:: ipython3\n\n    zarr_csr_disk[1:3].toarray()\n\n\n\n\n.. parsed-literal::\n\n    array([[0.        , 0.25620103, 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.57643237, 0.7628611 , 0.        , 0.        ,\n            0.        , 0.99872378, 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.82040632, 0.        ,\n            0.09788999, 0.        , 0.        , 0.67186548, 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.24171919, 0.        , 0.        ,\n            0.        , 0.        , 0.5893689 , 0.        , 0.        ],\n           [0.        , 0.        , 0.        , 0.        , 0.1650544 ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.98852861, 0.        , 0.01475572,\n            0.        , 0.82875194, 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.28405987, 0.        , 0.        , 0.72342298,\n            0.        , 0.        , 0.        , 0.12985154, 0.        ]])\n\n\n\n.. code:: ipython3\n\n    zarr_dense_disk[-2:]\n\n\n\n\n.. parsed-literal::\n\n    array([[0.51141143, 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.87214978,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.95867897, 0.        , 0.00825137,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.29541905, 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.68913921, 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.87239577, 0.        , 0.93164802, 0.        , 0.        ],\n           [0.        , 0.        , 0.        , 0.04102313, 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.81888661, 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.18858683, 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.83726992, 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.60594181,\n            0.61483901, 0.        , 0.        , 0.37080615, 0.62691013]])\n\n\n\n.. code:: ipython3\n\n    h5_csr_disk[2:].toarray()\n\n\n\n\n.. parsed-literal::\n\n    array([[0.        , 0.        , 0.        , ..., 0.        , 0.12985154,\n            0.        ],\n           [0.        , 0.        , 0.56872386, ..., 0.        , 0.        ,\n            0.36926708],\n           [0.        , 0.        , 0.75702799, ..., 0.97589322, 0.        ,\n            0.34865313],\n           ...,\n           [0.        , 0.14634835, 0.        , ..., 0.        , 0.        ,\n            0.        ],\n           [0.51141143, 0.        , 0.        , ..., 0.93164802, 0.        ,\n            0.        ],\n           [0.        , 0.        , 0.        , ..., 0.        , 0.37080615,\n            0.62691013]])\n\n\n\n.. code:: ipython3\n\n    h5_csr_disk[...].toarray()\n\n\n\n\n.. parsed-literal::\n\n    array([[0.        , 0.        , 0.        , ..., 0.        , 0.        ,\n            0.        ],\n           [0.        , 0.25620103, 0.        , ..., 0.5893689 , 0.        ,\n            0.        ],\n           [0.        , 0.        , 0.        , ..., 0.        , 0.12985154,\n            0.        ],\n           ...,\n           [0.        , 0.14634835, 0.        , ..., 0.        , 0.        ,\n            0.        ],\n           [0.51141143, 0.        , 0.        , ..., 0.93164802, 0.        ,\n            0.        ],\n           [0.        , 0.        , 0.        , ..., 0.        , 0.37080615,\n            0.62691013]])\n\n\n\n.. code:: ipython3\n\n    h5_dense_disk[:2]\n\n\n\n\n.. parsed-literal::\n\n    array([[0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.71493443, 0.20460768, 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.68284516,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.93012152, 0.        , 0.        , 0.2165738 , 0.        ,\n            0.        , 0.        , 0.93954512, 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.1808206 , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ],\n           [0.        , 0.25620103, 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.57643237, 0.7628611 , 0.        , 0.        ,\n            0.        , 0.99872378, 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.        , 0.82040632, 0.        ,\n            0.09788999, 0.        , 0.        , 0.67186548, 0.        ,\n            0.        , 0.        , 0.        , 0.        , 0.        ,\n            0.        , 0.        , 0.24171919, 0.        , 0.        ,\n            0.        , 0.        , 0.5893689 , 0.        , 0.        ]])\n\n\n\n.. code:: ipython3\n\n    h5_csr_file.close()\n    h5_dense_file.close()\n\nAppend\n======\n\n.. code:: ipython3\n\n    zarr_csr_disk.append(csr_matrix)\n    np.testing.assert_array_equal(zarr_csr_disk[...].toarray(), scipy.sparse.vstack((csr_matrix, csr_matrix)).toarray())\n\nRead h5ad files created using `anndata <https://anndata.readthedocs.io/>`__\n===========================================================================\n\n.. code:: bash\n\n    %%bash\n    if [ ! -f \"pbmc3k.h5ad\" ]; then\n        wget https://raw.githubusercontent.com/chanzuckerberg/cellxgene/main/example-dataset/pbmc3k.h5ad\n    fi\n\n.. code:: ipython3\n\n    import anndata.experimental\n    with h5py.File('pbmc3k.h5ad', 'r') as f:\n        obs = anndata.experimental.read_elem(f['obs'])\n        var = anndata.experimental.read_elem(f['var'])\n        X = ba.open(f['X'])\n\n\n\n\n.. _Zarr: https://zarr.readthedocs.io/\n.. _HDF5: https://www.hdfgroup.org/solutions/hdf5\n.. _h5sparse: https://github.com/appier/h5sparse\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD 3-Clause License  Copyright (c) 2022, lilab-bcb All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "backedarray",
    "package_url": "https://pypi.org/project/backedarray/",
    "platform": null,
    "project_url": "https://pypi.org/project/backedarray/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/backedarray/0.0.1/",
    "requires_dist": [
      "h5py",
      "numpy",
      "scipy",
      "zarr",
      "pytest; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Sparse and dense arrays backed by on-disk storage in Zarr or HDF5",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15269926,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b268b83a41f17138b1c4b7fb5c4937d2a085bcec7490943a47e035109c343ff",
          "md5": "896f7513f06191747cae355613a354a0",
          "sha256": "64deb1c089dbaad2cc0b48a705e1cc8ed458289229e215090bbdc956ccf06476"
        },
        "downloads": -1,
        "filename": "backedarray-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "896f7513f06191747cae355613a354a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9674,
        "upload_time": "2022-09-30T16:38:58",
        "upload_time_iso_8601": "2022-09-30T16:38:58.877147Z",
        "url": "https://files.pythonhosted.org/packages/1b/26/8b83a41f17138b1c4b7fb5c4937d2a085bcec7490943a47e035109c343ff/backedarray-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d8ef5574e5e8c66fbe099a9c0679ed632353b83399e03ae0b4c3d12d254b97c",
          "md5": "027516e55078ed50e8ddd87c3c42be5b",
          "sha256": "1188372a4817dad2c9858d70f0883fd044cb6f2d5ea53003d9aba71e7f4a7181"
        },
        "downloads": -1,
        "filename": "backedarray-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "027516e55078ed50e8ddd87c3c42be5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10061,
        "upload_time": "2022-09-30T16:39:01",
        "upload_time_iso_8601": "2022-09-30T16:39:01.105548Z",
        "url": "https://files.pythonhosted.org/packages/9d/8e/f5574e5e8c66fbe099a9c0679ed632353b83399e03ae0b4c3d12d254b97c/backedarray-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b268b83a41f17138b1c4b7fb5c4937d2a085bcec7490943a47e035109c343ff",
        "md5": "896f7513f06191747cae355613a354a0",
        "sha256": "64deb1c089dbaad2cc0b48a705e1cc8ed458289229e215090bbdc956ccf06476"
      },
      "downloads": -1,
      "filename": "backedarray-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "896f7513f06191747cae355613a354a0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9674,
      "upload_time": "2022-09-30T16:38:58",
      "upload_time_iso_8601": "2022-09-30T16:38:58.877147Z",
      "url": "https://files.pythonhosted.org/packages/1b/26/8b83a41f17138b1c4b7fb5c4937d2a085bcec7490943a47e035109c343ff/backedarray-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d8ef5574e5e8c66fbe099a9c0679ed632353b83399e03ae0b4c3d12d254b97c",
        "md5": "027516e55078ed50e8ddd87c3c42be5b",
        "sha256": "1188372a4817dad2c9858d70f0883fd044cb6f2d5ea53003d9aba71e7f4a7181"
      },
      "downloads": -1,
      "filename": "backedarray-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "027516e55078ed50e8ddd87c3c42be5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10061,
      "upload_time": "2022-09-30T16:39:01",
      "upload_time_iso_8601": "2022-09-30T16:39:01.105548Z",
      "url": "https://files.pythonhosted.org/packages/9d/8e/f5574e5e8c66fbe099a9c0679ed632353b83399e03ae0b4c3d12d254b97c/backedarray-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}