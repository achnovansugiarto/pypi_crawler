{
  "info": {
    "author": "Neradoc",
    "author_email": "neraOnGit@ri1.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3"
    ],
    "description": "## DiscoTool\nModule and tool to discover all boards connected to USB.\n\n![(Pimoroni Tiny2040, Arduino Nano 2040, Adafruit Huzzah ESP32)](https://raw.githubusercontent.com/Neradoc/discotool/main/docs/list_tiny_nano_esp32.png)\n\n## Installing\nThe `discotool` command line program and the `discotool` python module for python 3 can be installed with pip.\n```\npython3 -m pip install discotool\n```\n\n## Compatibility\nIt currently runs on MacOS, Linux and Windows. It should not require any installation outside of pip dependencies (no libusb, etc.). If it doesn't work for you, an issue with relevant OS information is welcome.\n\n## discotool CLI tool\n\nWhen running `discotool` while using a single board, it will be automatically selected for commands. These are the commands I use the most:\n\n- **`discotool repl`**: to connect to the REPL.\n- **`discotool install ...`**: to install modules via circup.\n- **`discotool update`**: to update modules via circup.\n\nI often have more than one board connected, and connect to the REPL using `discotool -n pico` for example, or using the drive (mount) name to give each board a personnal name `discotool -m picotwo`.\n\nI also use a command to back up all connected boards.\n```\nalias cpbackups='discotool backup --date ~/Backups/CPBackups'\n```\n\n### Configuration\n\nDefine environment variables to override the default command line tools used by discotool. They are called by appending the relevant parameters at the end of the command, or replacing a placeholder.\n\n- **`DISCOTOOL_SERIALTOOL`**: command to connect to the REPL (tio, picocom, etc.), adds the port at the end or replaces `{port}` if present. \n\t- on windows `{portnum}` is the `6` in `COM6`, required by TeraTerm.\n\t- default values, using the first one found:\n\t\t- **TeraTermPro**, **PuTTY** on Windows.\n\t\t- **tio**, **screen** on linux/mac.\n- **`DISCOTOOL_CIRCUP`**: (`circup`) command to call circup (`pip install` it for the default).\n- **`DISCOTOOL_NOCOLOR`**: disables colors in the output if it evaluates to True.\n\n### Command line options\n\n- **`--wait`**: runs the scan every second until it detects a board.\n- **`--nocolor`**: do not output colors in the terminal (overrides all else).\n- **`--color`**: output colors in the terminal (overrides all else).\n- **`--info`**: add more informations on Circuitpython boards by scanning the drive's content (might trigger the autoreload).\n\n#### No Command\n\n- if no filter is given, run the `list` command.\n- if filters are given, run the `repl` command.\n\n#### Filters\nFilters select boards from the list of devices found to run a command on them. They are combined with OR logic: anything that matches any filter is selected. All filters are NOT case sensitive. Filters are simple text matches, they don't support wildcards.\n\n- **`--auto`**: select the first board found.\n- **`--name`**: search in the USB name/description field. Eg: \"clue\", \"QT\", \"S2\".\n- **`--serial`**: search the serial number of the board.\n- **`--mount`**: search the volume names of the board. Eg: \"CIRCUITPY\".\n\n#### Commands\n\n- **`list`**: lists the selected boards, with name, manufacturer, serial number. Lists the serial ports and file volumes. If the `--info` option was given, identifies circuitpython code files present, as well as CPY version. On windows the name of the drive is listed in addition to the drive letter.\n- **`repl`**: connect to the REPL of the selected boards using the tool specified, screen by default, choosing the first serial port found if there is more than one.\n- **`eject`**: eject all selected board drives, or all found if no filter given. (MacOS only for now)\n- **`backup <destination dir> [<sub dir>]`**: copy the content of the selected boards drives into the destination dir or the optional sub dir (that will be created for you). Each board is put in a directory with its name and serial number.\n\t- **`--create`**: create the destination dir if it does not exist.\n\t- **`--date`**: use a time stamp as subdirectory name, or add to the supplied name.\n- **`circup <options>`**: calls circup with its `--path` option to each selected board and passes all other options and commands to it.\n- **`get <key>`**: print just the value for the key, for the selected devices. Can be used with backticks and such in a shell script. Includes special keys:\n\t- **`pid`**, **`vid`**, **`sn`**: shortcuts for product_id, vendor_id and serial_num.\n\t- **`volume`**: path to the (first) mounted drive of the device.\n\t- **`port`**: (first) serial port of the device.\n\t- **`repl`**: (first) REPL serial port of the device.\n\t- **`cdc`**: (first) non-REPL serial port of the device.\n\t- **`main`** or **`code.py`**: full path to the main file for circuitpython.\n- **`json`**: print the output of usbinfo as json for all selected boards.\n\t- **`--pretty`** **`-p`**: pretty print it for human reading.\n\n\n## Module\nExposes the `get_identified_devices(drive_info=False)` function. Find boards on the host's USB bus and tries to match them with serial ports and mounted drives, virtual or not. If `drive_info` is True, when a drive is found, it reads circuitpython information if available: CPY version number and main files in order of priority (code.py, etc.). This might trigger the board's autoreload.\n```python\nimport discotool\ndevicesList = discotool.get_identified_devices(drive_info=True)\n```\nDevices list (MacOS)\n```python\n[{\n\t'manufacturer': 'Adafruit Industries LLC',\n\t'name': 'CLUE nRF52840 Express',\n\t'ports': [{\n\t\t\"dev\": \"'/dev/cu.usbmodem144443111'\",\n\t\t\"iface\": \"CircuitPython CDC data\"\n\t}],\n\t'product_id': 32882,\n\t'serial_num': 'F88EE0399C0E1FC6',\n\t'vendor_id': 9114,\n\t'version': '6.0.1',\n\t'volumes': [{\n\t\t'mains': ['code.py'],\n\t\t'mount_point': '/Volumes/CIRCUITPY',\n\t\t'name': 'CIRCUITPY'\n\t}],\n\t'usb_location': '0x14630000'\n}]\n```\n\n### Other functions of the module\n\n- **`get_devices_list(drive_info=False)`**: return a tuple of the devices list and the list of remaining unidentified serial ports `(devicesList, remainingPorts)`.\n- **`get_identified_devices(drive_info=False)`**: only return the devices list.\n- **`get_unidentified_ports()`**: only return the unidentified serial ports.\n- **`devices_by_name(name)`**: only return the devices where the name contains the given string (not case sensitive).\n- **`devices_by_drive(drive_name)`**: only return the devices where the drive name (by default CIRCUITPY) is the given string.\n- **`devices_by_serial(serial_number)`**: only return the devices where the serial number is the given string (not case sensitive).\n\n### The DeviceInfoDict class\nThe device list is actually a list of DeviceInfoDict, a subclass of dictionary that adds a few properties as shortcuts for paths in the dictionary, with a default value of `None`.\n\nDictionary entries:\n- **`name`**: USB name of the board (str).\n- **`manufacturer`**: USB manufacturer of the board (str).\n- **`product_id`**: USB Product ID (int).\n- **`vendor_id`**: USB Vendor ID (int).\n- **`serial_num`**: USB Serial number of the board (str).\n- **`version`**: Circuitpython version, if found.\n- **`ports`**: list of serial ports found on the board, dictionaries.\n\t- **`dev`**: port device, used to connect to the port. COM port on windows, dev path on linux (str).\n\t- **`iface`**: interface name for the serial port (str).\n- **`volumes`**: list of mounted drives from the board, dictionaries.\n\t- **`name`**: drive name, usually `CIRCUITPY` for Circuitpython or `*BOOT` for a UF2 bootloader drive (str).\n\t- **`mount_point`**: mount path of the drive, letter on windows (str).\n\t- **`mains`**: list of \"main\" files for Circuitpython (code.py etc.), by order of priority.\n- **`usb_location`**: an identifier for the USB port the board is connected to, should be consistent across reboots and modes (bootloader/application). \n\nShortcuts:\n- **`repl`**: REPL port, if any.\n- **`data`**: data port, if any.\n- **`drive`** and **`volume`**: board drive path.\n- **`volume_name`**: board drive name.\n- **`vid`**: shortcut for `vendor_id`.\n- **`pid`**: shortcut for `product_id`.\n\n\n## Screenshots:\n\nUsing tio:  \n`discotool -n clue`\n![discotool repl](https://raw.githubusercontent.com/Neradoc/discotool/main/docs/repl_to_clue.png)\n\n`discotool -n clue circup update`\n![discotool circup](https://raw.githubusercontent.com/Neradoc/discotool/main/docs/circup_update_clue.png)\n\n[Samples of what output you can expect from some boards.](https://github.com/Neradoc/discotool/blob/main/docs/examples.md)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Neradoc/discotool",
    "keywords": "circuitpython,micropython",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "discotool",
    "package_url": "https://pypi.org/project/discotool/",
    "platform": null,
    "project_url": "https://pypi.org/project/discotool/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Neradoc/discotool/issues",
      "Homepage": "https://github.com/Neradoc/discotool"
    },
    "release_url": "https://pypi.org/project/discotool/0.5.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Discover, list, and use USB microcontoller boards.",
    "version": "0.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16039140,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a8ae381b374908ed4e97a7a51b3cc56f04716c859cbbb1f07de8938a71f83ea",
          "md5": "3d58ed682bc38114b44a241fc169f137",
          "sha256": "0124620a9a26a534604f96f052900e0b22e171d8ea1961a2b5e19322c3c4ed3f"
        },
        "downloads": -1,
        "filename": "discotool-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d58ed682bc38114b44a241fc169f137",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 580115,
        "upload_time": "2021-09-30T02:02:35",
        "upload_time_iso_8601": "2021-09-30T02:02:35.964737Z",
        "url": "https://files.pythonhosted.org/packages/1a/8a/e381b374908ed4e97a7a51b3cc56f04716c859cbbb1f07de8938a71f83ea/discotool-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9a427995930a69b0515ca68306423216e67d6f653d0c91643e08b7263b983f3",
          "md5": "0f34a6f23ccd2bcafe330533c870ade1",
          "sha256": "45178343a8581c7d6be0fd98fdc39eaa1d71b269613fabbceeb4b3ec3dbae624"
        },
        "downloads": -1,
        "filename": "discotool-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0f34a6f23ccd2bcafe330533c870ade1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 578386,
        "upload_time": "2021-09-30T02:48:06",
        "upload_time_iso_8601": "2021-09-30T02:48:06.403125Z",
        "url": "https://files.pythonhosted.org/packages/a9/a4/27995930a69b0515ca68306423216e67d6f653d0c91643e08b7263b983f3/discotool-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6c1b2c50e8969192c902f2e478e98186ec4c2db84b640608582d2a8559f05ca",
          "md5": "d943ab4bf4e705c31414cb3ed61eb58c",
          "sha256": "5fe087806897cf311dbcf8b9e48b8fec976793e5403790200f12691fe733258e"
        },
        "downloads": -1,
        "filename": "discotool-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d943ab4bf4e705c31414cb3ed61eb58c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 578652,
        "upload_time": "2021-12-16T09:45:44",
        "upload_time_iso_8601": "2021-12-16T09:45:44.232671Z",
        "url": "https://files.pythonhosted.org/packages/a6/c1/b2c50e8969192c902f2e478e98186ec4c2db84b640608582d2a8559f05ca/discotool-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25f5c9fca72ab3fe0790cc27b18d1fe3e036bec568b43f8acfae6210d2d20e30",
          "md5": "1ad0ff067f9f5f68a859989fc9c5ea40",
          "sha256": "0112e89b5400aeae8d14765ba18a90ac3e22eb555543420c05ce11a38bcecfad"
        },
        "downloads": -1,
        "filename": "discotool-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1ad0ff067f9f5f68a859989fc9c5ea40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 579731,
        "upload_time": "2022-02-16T17:58:04",
        "upload_time_iso_8601": "2022-02-16T17:58:04.096453Z",
        "url": "https://files.pythonhosted.org/packages/25/f5/c9fca72ab3fe0790cc27b18d1fe3e036bec568b43f8acfae6210d2d20e30/discotool-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c62a0f023c2573c0d615365d7e63ac84ccd8c0957cede8b410718820d5f0b66e",
          "md5": "77a08e11a9b5619df335fb85964c1c2b",
          "sha256": "830cf7618b88e9d051c39793ceab0b41a730364bc3bbc40bc6dabe5a114d0812"
        },
        "downloads": -1,
        "filename": "discotool-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "77a08e11a9b5619df335fb85964c1c2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 580292,
        "upload_time": "2022-03-18T11:49:24",
        "upload_time_iso_8601": "2022-03-18T11:49:24.045670Z",
        "url": "https://files.pythonhosted.org/packages/c6/2a/0f023c2573c0d615365d7e63ac84ccd8c0957cede8b410718820d5f0b66e/discotool-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2baf775b4152c781c81e8f030174273e9cafd3f9c53c73b2c9ae7b66381821b0",
          "md5": "ad7a156a28b3350719ce61c2b29594e1",
          "sha256": "fd7904fb9c0c214b2e189e02a5bd648eb51fcac36406e479ab6082298f3f48f7"
        },
        "downloads": -1,
        "filename": "discotool-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ad7a156a28b3350719ce61c2b29594e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 581750,
        "upload_time": "2022-04-15T03:36:15",
        "upload_time_iso_8601": "2022-04-15T03:36:15.692608Z",
        "url": "https://files.pythonhosted.org/packages/2b/af/775b4152c781c81e8f030174273e9cafd3f9c53c73b2c9ae7b66381821b0/discotool-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "281dd5da8d27bbf43552060aa4ccdf26e6189c371882a3c828cf7ae3de1f16bd",
          "md5": "99a76436f8b26f00998df977745e5111",
          "sha256": "566c694175f782689f83cb254585d7bbd3173492d7ccff3e8d4a2234130e8d64"
        },
        "downloads": -1,
        "filename": "discotool-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "99a76436f8b26f00998df977745e5111",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 581713,
        "upload_time": "2022-04-19T20:04:47",
        "upload_time_iso_8601": "2022-04-19T20:04:47.291030Z",
        "url": "https://files.pythonhosted.org/packages/28/1d/d5da8d27bbf43552060aa4ccdf26e6189c371882a3c828cf7ae3de1f16bd/discotool-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d15b40cf0182fce38c29b3003491bbe68a7cb7bee7397b98fdce6975f9037df9",
          "md5": "45584d16a8c656cca5041b828449a4a4",
          "sha256": "4776520bd8542cda6ee28a5d3704b7e9a475b08f8b404eceb1d936c729f625a2"
        },
        "downloads": -1,
        "filename": "discotool-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "45584d16a8c656cca5041b828449a4a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 581599,
        "upload_time": "2022-05-15T13:06:25",
        "upload_time_iso_8601": "2022-05-15T13:06:25.322694Z",
        "url": "https://files.pythonhosted.org/packages/d1/5b/40cf0182fce38c29b3003491bbe68a7cb7bee7397b98fdce6975f9037df9/discotool-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "073f108728fe1c4c2fde550f4ec7d18e0c62e634ca3265a324995877beb69601",
          "md5": "a5a666b4bc99432f1ee41755d7e0a683",
          "sha256": "10ad4c1ab914e815c5e9e284d1b78a14f05b7cc93b1954c66ef47ad89f49cb36"
        },
        "downloads": -1,
        "filename": "discotool-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a5a666b4bc99432f1ee41755d7e0a683",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 582232,
        "upload_time": "2022-12-08T20:07:40",
        "upload_time_iso_8601": "2022-12-08T20:07:40.046667Z",
        "url": "https://files.pythonhosted.org/packages/07/3f/108728fe1c4c2fde550f4ec7d18e0c62e634ca3265a324995877beb69601/discotool-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "073f108728fe1c4c2fde550f4ec7d18e0c62e634ca3265a324995877beb69601",
        "md5": "a5a666b4bc99432f1ee41755d7e0a683",
        "sha256": "10ad4c1ab914e815c5e9e284d1b78a14f05b7cc93b1954c66ef47ad89f49cb36"
      },
      "downloads": -1,
      "filename": "discotool-0.5.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a5a666b4bc99432f1ee41755d7e0a683",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 582232,
      "upload_time": "2022-12-08T20:07:40",
      "upload_time_iso_8601": "2022-12-08T20:07:40.046667Z",
      "url": "https://files.pythonhosted.org/packages/07/3f/108728fe1c4c2fde550f4ec7d18e0c62e634ca3265a324995877beb69601/discotool-0.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}