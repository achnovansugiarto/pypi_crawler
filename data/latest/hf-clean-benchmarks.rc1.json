{
  "info": {
    "author": "ncoop57",
    "author_email": "nacooper01@wm.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "hf_clean_benchmarks\n================\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\nThis repository is heavily inspired by the [BigCode\nrepository](https://github.com/bigcode-project/bigcode-analysis/tree/main/data_analysis/decontamination)\nand is mostly a refactoring of their code. Specifically, the main person\nwho worked on this repository is [Chenghao\nMou](https://github.com/ChenghaoMou) (Awesome work!).\n\n## Install\n\n``` sh\npip install hf_clean_benchmarks\n```\n\n## How to use\n\n### Using the API\n\nFirst you need to specify which benchmarks you want to clean your data\nof. You can do this by creating dictionary with the benchmark name in\nhuggingface’s datasets repository as the key and the name of the column\ncontaining the benchmark data as the value. For example, if you want to\nclean your data of the `HumanEval` and `LAMBADA` benchmarks, you would\ndo the following:\n\n``` python\n# Benchmarks to clean\nbenchmarks = [\n    {\n        \"name\": \"openai_humaneval\",\n        \"splits\": [\"test\"],\n        \"columns\": [\"prompt\", \"canonical_solution\", \"test\"],\n    },\n    {\n        \"name\": \"lambada\",\n        \"splits\": [\"test\"],\n        \"columns\": [\"text\"],\n    },\n]\n```\n\nYou then pass this dictionary to the\n[`BenchmarkCleaner`](https://ncoop57.github.io/hf_clean_benchmarks/core.html#benchmarkcleaner)\nclass. This class will download the benchmarks and construct the suffix\narray for each benchmark. You can then use the `clean` method to clean a\nhuggingface dataset. For example:\n\n``` python\nfrom datasets import load_dataset\nfrom hf_clean_benchmarks.core import BenchmarkCleaner\n\ncleaner = BenchmarkCleaner(benchmarks, threshold=0.1, num_perm=128)\n\n# load your dataset\ndataset = load_dataset(\"bigcode/the-stack-smol\", data_dir=\"data/python\", split=\"train\")\n\n# clean the dataset\ncleaned_dataset = cleaner.clean(dataset, column=\"content\")\n```\n\n    Checking for false positives...: 100%|██████████| 8780/8780 [00:34<00:00, 251.05it/s]\n    Checking for false positives...: 100%|██████████| 8805/8805 [07:34<00:00, 19.39it/s]\n\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[11/06/22 10:34:43] </span><span style=\"color: #000080; text-decoration-color: #000080\">INFO    </span> Data Number                   : <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10000</span>                                      <a href=\"file:///home/nathan/projects/other/hf_clean_benchmarks/hf_clean_benchmarks/core.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">core.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/nathan/projects/other/hf_clean_benchmarks/hf_clean_benchmarks/core.py#210\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">210</span></a>\n</pre>\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">                    </span><span style=\"color: #000080; text-decoration-color: #000080\">INFO    </span> Duplicate Number              : <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4033</span>                                       <a href=\"file:///home/nathan/projects/other/hf_clean_benchmarks/hf_clean_benchmarks/core.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">core.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/nathan/projects/other/hf_clean_benchmarks/hf_clean_benchmarks/core.py#211\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">211</span></a>\n</pre>\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">                    </span><span style=\"color: #000080; text-decoration-color: #000080\">INFO    </span> Duplicate Rate                : <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">40.33</span>%                                     <a href=\"file:///home/nathan/projects/other/hf_clean_benchmarks/hf_clean_benchmarks/core.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">core.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/nathan/projects/other/hf_clean_benchmarks/hf_clean_benchmarks/core.py#212\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">212</span></a>\n</pre>\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">                    </span><span style=\"color: #000080; text-decoration-color: #000080\">INFO    </span> Total Time                    : <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">493.73</span> seconds                             <a href=\"file:///home/nathan/projects/other/hf_clean_benchmarks/hf_clean_benchmarks/core.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">core.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/nathan/projects/other/hf_clean_benchmarks/hf_clean_benchmarks/core.py#213\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">213</span></a>\n</pre>\n\n``` python\ncleaned_dataset\n```\n\n    Dataset({\n        features: ['content', 'avg_line_length', 'max_line_length', 'alphanum_fraction', 'licenses', 'repository_name', 'path', 'size', 'lang', '__id__'],\n        num_rows: 5967\n    })\n\n### Using the CLI\n\nFirst you need to specify which benchmarks you want to clean your data\nof. You can do this by creating a json file with the benchmark name in\nhuggingface’s datasets repository as the key and the name of the column\ncontaining the benchmark data as the value. For example, if you want to\nclean your data of the `HumanEval` and `LAMBADA` benchmarks, you would\ndo the following:\n\nfile: `benchmarks.json`\n\n``` json\n[\n    {\n        \"name\": \"openai_humaneval\",\n        \"splits\": [\"test\"],\n        \"columns\": [\"prompt\", \"canonical_solution\", \"test\"],\n    },\n    {\n        \"name\": \"lambada\",\n        \"splits\": [\"test\"],\n        \"columns\": [\"text\"],\n    },\n]\n```\n\nYou then pass this json file to the\n[`clean_dataset`](https://ncoop57.github.io/hf_clean_benchmarks/cli.html#clean_dataset)\ncommand. This command will download the benchmarks and construct the\nsuffix array for each benchmark. You can then use the `clean` command to\nclean a huggingface dataset. For example:\n\n``` sh\nclean_dataset \\\n    --dataset_name bigcode/the-stack-smol \\\n    --column_name content \\\n    --benchmark_configs_path benchmarks.json \\\n    --output_path /tmp/test.jsonl \\\n    --data_dir data/python \\\n    --dataset_split train \\\n    --save_json\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ncoop57/hf_clean_benchmarks",
    "keywords": "nbdev jupyter notebook python",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hf-clean-benchmarks",
    "package_url": "https://pypi.org/project/hf-clean-benchmarks/",
    "platform": null,
    "project_url": "https://pypi.org/project/hf-clean-benchmarks/",
    "project_urls": {
      "Homepage": "https://github.com/ncoop57/hf_clean_benchmarks"
    },
    "release_url": "https://pypi.org/project/hf-clean-benchmarks/0.0.1/",
    "requires_dist": [
      "datasets",
      "datasketch",
      "fastcore",
      "rich"
    ],
    "requires_python": ">=3.7",
    "summary": "This repository contains code for cleaning your training data of benchmark data to help combat data snooping.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15676251,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea7a4c4e17d6eec4c2930bbfe8553e454cd9314d39dfba259901cd72cca046bc",
          "md5": "5f6e31c93c2aac77bb82f42cfc54928a",
          "sha256": "99c571f776277cd919c80f9b7b68fdc0bd03ade551cd9d3b3aa1e5ce7a53c9f9"
        },
        "downloads": -1,
        "filename": "hf_clean_benchmarks-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f6e31c93c2aac77bb82f42cfc54928a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11662,
        "upload_time": "2022-11-06T18:39:16",
        "upload_time_iso_8601": "2022-11-06T18:39:16.719229Z",
        "url": "https://files.pythonhosted.org/packages/ea/7a/4c4e17d6eec4c2930bbfe8553e454cd9314d39dfba259901cd72cca046bc/hf_clean_benchmarks-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be11419652ab74aaedd7181c503d3ba820905e95c50ac0f03051e33fc0916437",
          "md5": "9d734f954aed272e44eed79335e0f67d",
          "sha256": "a9181477b9429aa97b43ac2a19a2cab674ea98a34d288c3d6f69fb120abbc2dd"
        },
        "downloads": -1,
        "filename": "hf_clean_benchmarks-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9d734f954aed272e44eed79335e0f67d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12112,
        "upload_time": "2022-11-06T18:39:18",
        "upload_time_iso_8601": "2022-11-06T18:39:18.562663Z",
        "url": "https://files.pythonhosted.org/packages/be/11/419652ab74aaedd7181c503d3ba820905e95c50ac0f03051e33fc0916437/hf_clean_benchmarks-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea7a4c4e17d6eec4c2930bbfe8553e454cd9314d39dfba259901cd72cca046bc",
        "md5": "5f6e31c93c2aac77bb82f42cfc54928a",
        "sha256": "99c571f776277cd919c80f9b7b68fdc0bd03ade551cd9d3b3aa1e5ce7a53c9f9"
      },
      "downloads": -1,
      "filename": "hf_clean_benchmarks-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f6e31c93c2aac77bb82f42cfc54928a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11662,
      "upload_time": "2022-11-06T18:39:16",
      "upload_time_iso_8601": "2022-11-06T18:39:16.719229Z",
      "url": "https://files.pythonhosted.org/packages/ea/7a/4c4e17d6eec4c2930bbfe8553e454cd9314d39dfba259901cd72cca046bc/hf_clean_benchmarks-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be11419652ab74aaedd7181c503d3ba820905e95c50ac0f03051e33fc0916437",
        "md5": "9d734f954aed272e44eed79335e0f67d",
        "sha256": "a9181477b9429aa97b43ac2a19a2cab674ea98a34d288c3d6f69fb120abbc2dd"
      },
      "downloads": -1,
      "filename": "hf_clean_benchmarks-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9d734f954aed272e44eed79335e0f67d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12112,
      "upload_time": "2022-11-06T18:39:18",
      "upload_time_iso_8601": "2022-11-06T18:39:18.562663Z",
      "url": "https://files.pythonhosted.org/packages/be/11/419652ab74aaedd7181c503d3ba820905e95c50ac0f03051e33fc0916437/hf_clean_benchmarks-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}