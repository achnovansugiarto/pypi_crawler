{
  "info": {
    "author": "Paul Resnick, Tim Weninger, Yuqing Kong, and Grant Schoenebeck",
    "author_email": "presnick@umich.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SurveyEquivalence\nAuthor: Paul Resnick, Yuqing Kong, Grant Schoenebeck, Tim Weninger\n\n**arxiv paper available**: https://arxiv.org/abs/TKTK\n\n**Documentation available**: https://surveyequivalence.readthedocs.io \n\n## Overview\nGiven a dataset W of ratings for \n\nInstallation\n------------\n\n.. code-block:: console\n\n    pip install surveyequivalence\n\nAt root level, you should find config.py and directories surveyequivalence, docs, data, etc.\n\nExecuting the Running Example\n-----------------------------\n\nThe running example dataset has 1000 items. It takes a while to run it with 500 bootstrap item samples.\nIf you're just trying to verify that your installation is good, you may want to run it on a smaller set of items\nwith fewer bootstrap item samples.\n\n.. code-block:: console\n\n    (survey_equiv) surveyequivalence[master !?]$ python\n    Python 3.7.4 (default, Aug 13 2019, 20:35:49)\n    [GCC 7.3.0] :: Anaconda, Inc. on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> from surveyequivalence.examples.paper_running_example import main\n    >>> main(path='data/running_example_50_items', num_bootstrap_item_samples=10)\n    starting classifiers: computing scores\n\nAs described in the tutorial, the running example for the paper computes three survey power curves, for three different\ncombiner/scorer pairings.\n\nIf you have multiple processors, the AnalysisPipeline will try to take advantage of them to speed up execution.\nThat may cause the progress indicator output to show some things out of order, like what is shown here.\nThat's nothing to worry about.\n\n.. code-block:: console\n\n    starting power curve\n\n    starting to precompute predictions for various rater subsets.\n    Items processed:\n    .....    10....  0.      20.................     30...   40...............\n\n            computing power curve results for each bootstrap item sample.\n    Samples processed:\n    .        10.......       0.\n    starting classifiers: computing scores\n\n    starting power curve\n\n    starting to precompute predictions for various rater subsets.\n    Items processed:\n    ..       10....  0..     20................      30..........    40...........\n\n            computing power curve results for each bootstrap item sample.\n    Samples processed:\n    ....     0....   10.\n    starting classifiers: computing scores\n\n    starting power curve\n\n    starting to precompute predictions for various rater subsets.\n    Items processed:\n    ..       0..     10..    20.................     30....  40..................\n\n            computing power curve results for each bootstrap item sample.\n    Samples processed:\n    ....     0...    10..\n    >>>\n\nLocating the Results\n--------------------\n\nAfter executing the running example, look in the directory :code:`save_analyses`. There should be a subfolder with a\ntimestamp. Within that there are three subfolders, one for each pairing of a combiner with a scoring function.\n\nWithin each results folder, you should find:\n\n    - README says what was analyzed.\n    - results_summary.txt gives numeric summaries of the results\n    - several .csv files provide detailed data about classifier scores and equivalences\n    - plot.png, a survey power curve plot with equivalence points\n    - plot.tex; pgf formatted text that will generate the same plot within latex.\n\n\n## License\nThis Project is MIT-licensed.\n\nPlease send us e-mail or leave comments on github if have any questions.\n\nCopyright (c) 2021, Paul Resnick, Yuqing Kong, Grant Schoenebeck, Tim Weninger \n\n\n\n\n\n\n# surveyequivalence\n\n## make_power_curve_graph:\n This function receives the following:\n\n#### Expert_scores\nOne dictionary defining the power curve:\n- Name: a string\n- Color: a color to use (if None, assign automatically)\n- Show_lines: True or False\n- Power_curve: a sequence, with each item in the sequence a dictionary\n    - k, the number of amateurs in the survey (this will be x-value on the graph)\n    - Score, a float\n        - the expected score of k amateurs against a random expert (this will be y-value on the graph)\n    - Confidence_radius: a float or None\n        - If value is not None, it defines the confidence interval around the score\n          - Score +/- confidence_radius\n\n#### Amateur_scores, a sequence of power curves\nEach item in the sequence is a dictionary:\n- Name: a string\n- Color: a color to use (if None, assign automatically)\n- Show_lines: True or False\n- Power_curve: a sequence, with each item in the sequence a dictionary\n    - k, the number of amateurs in the survey (this will be x-value on the graph)\n    - Score, a float\n        - the expected score of k amateurs against a random expert (this will be y-value on the graph)\n    - Confidence_radius: a float or None\n        - If value is not None, it defines the confidence interval around the score\n        - Score +/- confidence_radius\n\n#### Classifier_scores:\nA dataframe, with columns\n- Name: the name for the classifier\n- Color: a color to use (if None, assign automatically)\n- Score: a float\n    - the expected score of the classifier against a random expert (this will be y-value on the graph)\n- Confidence_radius: a float or None\n    - If value is not None, it defines the confidence interval around the score\n    - Score +/- confidence_radius\n\n#### Points_to_show_SurveyEquiv\nEach item in the sequence is a dictionary\n- Which_type: “amateur” or “classifier”\n- Which_one: an integer\n- Color: a color to use (if None, assign automatically)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/presnick/surveyequivalence",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "surveyequivalence",
    "package_url": "https://pypi.org/project/surveyequivalence/",
    "platform": "",
    "project_url": "https://pypi.org/project/surveyequivalence/",
    "project_urls": {
      "Bug Tracker": "https://github.com/presnick/surveyequivalence/issues",
      "Homepage": "https://github.com/presnick/surveyequivalence"
    },
    "release_url": "https://pypi.org/project/surveyequivalence/0.1.1/",
    "requires_dist": [
      "numpy (~=1.18.0)",
      "pandas (~=1.0.0)",
      "scikit-learn (~=0.23.0)",
      "matplotlib (~=3.0.0)",
      "multipledispatch (~=0.6.0)",
      "multiprocess (~=0.70.0)",
      "statsmodels (~=0.12.0)",
      "pathos (~=0.2.7)"
    ],
    "requires_python": ">=3.6",
    "summary": "Code for calculating survey equivalence",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10542103,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f15934477dea7faeeb14ce8dd133f68b009242174d2bbfad1d66c2e2929d5d3",
          "md5": "d71d7b76431c6b11c848c4dcecbf3ed7",
          "sha256": "c4916e6eeb645f375f50036e6079f770b79f108198adf1347b59a676147a26e4"
        },
        "downloads": -1,
        "filename": "surveyequivalence-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d71d7b76431c6b11c848c4dcecbf3ed7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3892822,
        "upload_time": "2021-06-02T20:31:50",
        "upload_time_iso_8601": "2021-06-02T20:31:50.351679Z",
        "url": "https://files.pythonhosted.org/packages/6f/15/934477dea7faeeb14ce8dd133f68b009242174d2bbfad1d66c2e2929d5d3/surveyequivalence-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98815daf4d289d80595669c396a32b82ac40452766a03bf7458f4ebafa7da9be",
          "md5": "2ec4ca3b822ea9cbd260c04ee9326500",
          "sha256": "046326aca2dde9229de2696ae9fbc8a8e8c15d2bbdb5970a8b7ff62a4710bf1f"
        },
        "downloads": -1,
        "filename": "surveyequivalence-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ec4ca3b822ea9cbd260c04ee9326500",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3840140,
        "upload_time": "2021-06-02T20:31:53",
        "upload_time_iso_8601": "2021-06-02T20:31:53.012982Z",
        "url": "https://files.pythonhosted.org/packages/98/81/5daf4d289d80595669c396a32b82ac40452766a03bf7458f4ebafa7da9be/surveyequivalence-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f15934477dea7faeeb14ce8dd133f68b009242174d2bbfad1d66c2e2929d5d3",
        "md5": "d71d7b76431c6b11c848c4dcecbf3ed7",
        "sha256": "c4916e6eeb645f375f50036e6079f770b79f108198adf1347b59a676147a26e4"
      },
      "downloads": -1,
      "filename": "surveyequivalence-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d71d7b76431c6b11c848c4dcecbf3ed7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3892822,
      "upload_time": "2021-06-02T20:31:50",
      "upload_time_iso_8601": "2021-06-02T20:31:50.351679Z",
      "url": "https://files.pythonhosted.org/packages/6f/15/934477dea7faeeb14ce8dd133f68b009242174d2bbfad1d66c2e2929d5d3/surveyequivalence-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98815daf4d289d80595669c396a32b82ac40452766a03bf7458f4ebafa7da9be",
        "md5": "2ec4ca3b822ea9cbd260c04ee9326500",
        "sha256": "046326aca2dde9229de2696ae9fbc8a8e8c15d2bbdb5970a8b7ff62a4710bf1f"
      },
      "downloads": -1,
      "filename": "surveyequivalence-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2ec4ca3b822ea9cbd260c04ee9326500",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3840140,
      "upload_time": "2021-06-02T20:31:53",
      "upload_time_iso_8601": "2021-06-02T20:31:53.012982Z",
      "url": "https://files.pythonhosted.org/packages/98/81/5daf4d289d80595669c396a32b82ac40452766a03bf7458f4ebafa7da9be/surveyequivalence-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}