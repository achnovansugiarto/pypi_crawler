{
  "info": {
    "author": "Fabrice Sincère",
    "author_email": "fabrice.sincere@ac-grenoble.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "## acelectricity module\n \nThe aim of this project is to understand the rudiments of linear AC electrical circuits and their functioning.  \n\n### Prerequisites\n\nPython : version 3    \nAll operating systems  \nLibraries :   \n- numpy  \n- matplotlib.pyplot  \n- matplotlib.widgets  \n\n### Installing acelectricity python module\n\nFrom Pypi repository :  \n[https://pypi.org/project/ac-electricity](https://pypi.org/project/ac-electricity)\n\n\n```\npip install ac-electricity\n```\n\n### Basic electrical quantities\n\n- Voltage (volt)\n- Current (ampere)\n- Impedance Z (ohm)\n- Admittance Y (siemens)\n- Active power P (watt)\n- Reactive power Q (var)\n- Apparent power S (VA)\n\n### Electrical laws\n\n- Kirchhoff’s current law\n- Kirchhoff’s voltage law\n- Ohm's law\n- Impedances, admittances in series and parallel\n- Voltage divider and current divider\n- Millman's theorem\n- Joule's first law (S=I²Z)\n- Power law (S=V.I*)\n\n### Others features\n\n- Bode plot (with cursors and sliders)\n- User-defined transfer function H(jω)\n- Digital filter frequency response\n\n### AC Circuit diagram \n\nCircuit should only contain : \n   \n- independent sine voltage source  \n- independent sine current source    \n- resistors, inductors, capacitors\n\n#### Example circuit  \n\n```\n                  VL\n           <---------------------\n                          L1\n            +------+    _  _  _\n      --->--| R1   |---/ \\/ \\/ \\-----+-------+\n        IL  +------+                 |       |\n                                     |       |\n    ^                             IR v       v IC\n    |                                |       |      ^\n    |                              +---+     |  C1  |\n    |                              |   |   -----    |\nVin |                              |R2 |   -----    | Vout\n    |                              |   |     |      |\n    |                              +---+     |      |\n    |                                |       | \n                                     |       |\n      -------------------------------+-------+\n\n```\n\nDatas :  \nVin = 5 Vrms  \nInductor : L1 = 100 mH ; R1 = 180 Ω  \nR2 = 2.2 kΩ ; C1 = 330 nF     \n\nWhat are the IL, IR, IC currents ?  \nWhat are the VL, Vout voltages ?  \nWhat is the frequency response Vout/Vin ?\n\n\n```python  \n>>> from acelectricity import *\n>>> Vin = Voltage(5)  # Vrms\n>>> Zr1 = Impedance(r=180)\n>>> Zl1 = Impedance(l=0.1)\n>>> Zr2 = Impedance(r=2200)\n>>> Zc1 = Impedance(c=330e-9)\n\n>>> Zeq1 = 1/(1/Zr2 + 1/Zc1)  # impedances in parallel\n>>> # or Zeq1 = Zr2//Zc1\n>>> Zeq1\nComplex impedance (Ω) : 100.88-460.173j @ 1.0 kHz\n>>> Zeq = Zr1 + Zl1 + Zeq1  # impedances in series\n>>> Zeq(2000)  # @ 2000 Hz\n(206.11818300356995+1018.3560443060462j)\n>>> IL = Vin/Zeq  # Ohm's law\n>>> IL.properties(2000)\nFrequency (Hz) : 2000\nAngular frequency (rad/s) : 12566.4\n\nComplex current : 0.000954663-0.00471665j\nAmplitude (Arms) : 0.00481229\nAmplitude (A) : 0.00680561\nAmplitude (dBA ref 1 Arms) : -46.3529621108357\nPhase (degrees) : -78.5577\nPhase (radians) : -1.37109\ni(t) = 0.00680561×sin(12566.4×t -1.371091)\n\n>>> Vout = IL*Zeq1  # Ohm's law\n>>> VL = Vin-Vout  # Kirchhoff’s voltage law\n>>> IC = Vout/Zc1  # Ohm's law\n>>> IR = IL-IC  # Kirchhoff’s current law\n>>> H = Vout/Vin  # transfer function\n\n>>> # draw Bode plot and save datas\n>>> H.bode(title='Vout/Vin transfer function', filename='h.csv')\n>>> IL.bode(magnitude_unit='default', yscale='linear', title='IL current')\n>>> Zeq.bode(yscale='log', title='Zeq frequency response')\n>>> Zeq.bode_imag(title='Zeq reactance frequency response')\n>>> show()\n```\n\n![screenshot1](https://framagit.org/fsincere/ac-electricity/uploads/2a805bf67525bb8962d543e0674adfcd/image1.png)\n\nZoom and data cursors :  \n\n![screenshot1b](https://framagit.org/fsincere/ac-electricity/uploads/1be007c117d04613104a05372843f813/image1b.png)\n\n![screenshot2](https://framagit.org/fsincere/ac-electricity/uploads/c63c67fa0d68621b730cce1901beada3/image2.png)\n\n![screenshot2b](https://framagit.org/fsincere/ac-electricity/uploads/80acf919527ea3b74a3c89ced4fa62e9/image2b.png)\n\n![screenshot2b1](https://framagit.org/fsincere/ac-electricity/uploads/49e6093bb979273c3b464cdbb0f79939/image2b1.png)\n\n#### Impedances and admittances\n\n```python\n>>> Yr2 = 1/Zr2\n>>> Yc1 = 1/Zc1\n>>> Yc1\nComplex admittance (S) : 0+0.00207345j @ 1.0 kHz\n>>> 1/Yc1\nComplex impedance (Ω) : 0-482.288j @ 1.0 kHz\n>>> 1/(Yr2+Yc1)\nComplex impedance (Ω) : 100.88-460.173j @ 1.0 kHz\n>>> Zr2*(Zc1/(Zr2+Zc1))\nComplex impedance (Ω) : 100.88-460.173j @ 1.0 kHz\n```\n\n#### Law class\n\n```python\n>>> law = Law()\n>>> # voltage divider\n>>> Vout = law.VoltageDivider(vtotal=Vin, z=Zr2//Zc1, z2=Zr1+Zl1)\n>>> Vout\nComplex voltage (Vrms) : -2.28808-6.8219j @ 1.0 kHz\n>>> Vin*(Zeq1/Zeq)\nComplex voltage (Vrms) : -2.28808-6.8219j @ 1.0 kHz\n>>> # Millman's theorem\n>>> gnd = Voltage(0)\n>>> Vout = law.Millman(v_z=[(Vin, Zr1+Zl1), (gnd, Zr2), (gnd, Zc1)])\n>>> Vout\nComplex voltage (Vrms) : -2.28808-6.8219j @ 1.0 kHz\n>>> (Vin/(Zr1+Zl1))/(1/(Zr1+Zl1) +1/Zr2 +1/Zc1)\nComplex voltage (Vrms) : -2.28808-6.8219j @ 1.0 kHz\n>>> Vout/Vin\nRatio : -0.457615-1.36438j @ 1.0 kHz\n>>> # current divider\n>>> IC = law.CurrentDivider(itotal=IL, z=Zc1, z2=Zr2)\n>>> IC\nComplex current (Arms) : 0.0141449-0.00474421j @ 1.0 kHz\n>>> IL*Zr2/(Zr2 +Zc1)\nComplex current (Arms) : 0.0141449-0.00474421j @ 1.0 kHz\n```\n\n#### Electrical power, Joule's first law\n\n```python\n>>> S = IL*Vin  # input source complex power\n>>> S.properties(1000)\nFrequency (Hz) : 1000\nAngular frequency (rad/s) : 6283.19\n\nComplex power : 0.0655242+0.0392254j\n\nActive power P (W) : +0.0655242\nReactive power Q (var) : +0.0392254\nApparent power S (VA) : 0.0763678\n\nPhase (degrees) : +30.9064\nPhase (radians) : +0.539419\nPower factor PF : 0.8580073402000852\n\nActive power (dBW ref 1 W) : -11.835985322667693\n\n>>> Sr1 = law.Joule(z=Zr1, i=IL)\n>>> Sr1\nComplex power (W): 0.0419907+0j @ 1.0 kHz\n>>> Zr1*IL*IL\nComplex power (W): 0.0419907+0j @ 1.0 kHz\n>>> Sr2 = law.Joule(z=Zr2, v=Vout)\n>>> Sr2\nComplex power (W): 0.0235334 @ 1.0 kHz\n>>> Sl1 = Zl1*IL*IL\nComplex power (W): 0+0.146575j @ 1.0 kHz\n>>> Sc1 = Zc1*IC*IC\nComplex power (W): 0-0.10735j @ 1.0 kHz\n>>> Sr1 +Sr2 +Sc1 +Sl1\nComplex power (W): 0.0655242+0.0392254j @ 1.0 kHz\n```\n\n#### Parameters analysis\n\n```python  \n>>> Vin.RMS = 10\n>>> Vin.phase = 45\n>>> Zr1.r = 100\n>>> Zl1.l = 0.22\n>>> Zr2.r = 1000\n>>> Zc1.c = 100e-9\n>>> H.bode(title='Vout/Vin transfer function', filename='h2.csv')\n>>> IL.bode(magnitude_unit='default', yscale='linear', title='IL current')\n>>> show()\n```\n\n![screenshot2c](https://framagit.org/fsincere/ac-electricity/uploads/6f8870f523174dcd475945ee43a0b19f/image2c.png)\n\n![screenshot2d](https://framagit.org/fsincere/ac-electricity/uploads/cf3c70fe19e3b3b80434ed9d10d7741d/image2d.png)\n\n\n```python  \n>>> for Zr2.r in [10, 100, 1e3, 1e4]:\n        H.bode(title=\"Vout/Vin with R2={} Ω\".format(Zr2.r))\n>>> show()\n```\n\n#### Add matplotlib widgets : slider and button   \n\n```python\n>>> fig, ax1, ax2, mag, ph = H.bode(title='Vout/Vin transfer function')\n>>> fig.subplots_adjust(left=0.15, bottom=0.35, right=0.85, top=0.9)\n\n>>> ax_r1 = plt.axes([0.15, 0.20, 0.4, 0.03])\n>>> ax_l1 = plt.axes([0.15, 0.15, 0.4, 0.03])\n>>> ax_r2 = plt.axes([0.15, 0.10, 0.4, 0.03])\n>>> ax_c1 = plt.axes([0.15, 0.05, 0.4, 0.03])\n\n>>> slider_r1 = Slider(ax_r1, 'r1 (Ω)', 10, 300,\n    valinit=Zr1.r, valstep=1)\n>>> slider_l1 = Slider(ax_l1, 'l1 (H)', 0.01, 1,\n    valinit=Zl1.l, valstep=0.01)\n>>> slider_r2 = Slider(ax_r2, 'r2 (Ω)', 1e3, 1e4,\n    valinit=Zr2.r, valstep=10)\n>>> slider_c1 = Slider(ax_c1, 'c1 (nF)', 100, 1000,\n    valinit=Zc1.c*1e9, valstep=1)\n\n>>> def update(val):\n        Zr1.r = slider_r1.val\n        Zl1.l = slider_l1.val\n        Zr2.r = slider_r2.val\n        Zc1.c = slider_c1.val*1e-9\n        xvalues = mag.get_xdata()\n        # H.db() method, according to H.bode() parameters :\n        # magnitude_unit='db' (default)\n        # help(H) for more information\n        magnitudes = [H.db(x) for x in xvalues]\n        # H.phase_deg() method, according to H.bode() parameters :\n        # phase_unit='degrees' (default)\n        phases = [H.phase_deg(x) for x in xvalues]\n        mag.set_ydata(magnitudes)\n        ph.set_ydata(phases)\n\n>>> slider_r1.on_changed(update)\n>>> slider_l1.on_changed(update)\n>>> slider_r2.on_changed(update)\n>>> slider_c1.on_changed(update)\n\n>>> ax_button = plt.axes([0.7, 0.10, 0.15, 0.06])\n>>> button = Button(ax_button, 'Autoscale')\n\n>>> def autoscale(event):\n        ax1.relim()\n        ax1.autoscale_view()\n        ax2.relim()\n        ax2.autoscale_view()\n\n>>> button.on_clicked(autoscale)\n>>> show()\n```\n\n![screenshot2e](https://framagit.org/fsincere/ac-electricity/uploads/c857708a7d3b6cbe3d90eb584148dc04/image2e.png)\n\n### User-defined transfer function\n\n#### Example 1 : second order band-pass filter\n\n```python\n>>> from acelectricity import *\n>>> # static gain, damping value, normal angular frequency\n>>> a, z, wn = 10, 0.1, 1000*2*math.pi\n>>> H = Ratio(fw=lambda w: a*(2*z*1j*w/wn)/(1+2*z*1j*w/wn-(w/wn)**2))\n>>> H.bode(filename='H.csv')\n>>> a, z, wn = 100, 0.5, 10000\n>>> H.bode(filename='H2.csv')\n>>> show()\n```\n\nor :  \n\n```python\n>>> a, z, wn = 10, 0.1, 1000*2*math.pi\n>>> H = Ratio.transfer_function(numerator=[0, a*(2*z*1j/wn)],\n    denominator=[1, 2*z*1j/wn, -1/wn**2])\n>>> H.bode(filename='H3.csv')\n>>> a, z, wn = 100, 0.5, 10000\n>>> # new instance\n>>> H = Ratio.transfer_function(numerator=[0, a*(2*z*1j/wn)],\n    denominator=[1, 2*z*1j/wn, -1/wn**2])\n>>> H.bode(filename='H4.csv')\n>>> show()\n```\n\n#### Example 2 : cascaded series, parallel filters\n\n```python\n>>> from acelectricity import *\n>>> # first order low-pass filter\n>>> wn = 10000\n>>> Hlp = Ratio(fw=lambda w: 1/(1+1j*w/wn))\n>>> # first order high-pass filter\n>>> Hhp = Ratio(fw=lambda w: 1/(1+1j*wn/w))\n>>> Hs = Hlp*Hhp  # cascaded series filters\n>>> Hs.bode()\n>>> Hp = Hlp+Hhp  # parallel filters\n>>> Hp.bode()\n>>> show()\n```\n\n#### Example 3 : linear control system\n\n```\n          +      +------+\n     -->---(X)---| G(w) |----+--->--\n          - |    +------+    |\n            |                |\n            |    +------+    |\n            +----| H(w) |-<--+\n                 +------+\n\n```\n\n```python\n>>> from acelectricity import *\n>>> # feedforward transfer function\n>>> # first order low-pass filter\n>>> wn = 10000\n>>> G = Ratio.transfer_function([1], [1, 1j/wn])\n>>> # feedback transfer function\n>>> H = Ratio.transfer_function([10])  # constant\n>>> # open-loop transfer function\n>>> Hopenloop = G*H\n>>> Hopenloop.bode()\n>>> # closed-loop transfer function\n>>> Hcloseloop = G/(1+Hopenloop)\n>>> Hcloseloop.bode()\n>>> show()\n```\n\n### Digital filter frequency response\n\n```\ny(n) = 0.1x(n) +1.6y(n-1) -0.7y(n-2)\n```\n\n```python\n>>> from acelectricity import *\n>>> fs = 100000  # sampling rate (Hz)\n>>> H = Ratio.digital_filter(fs=fs, b=[0.1], a=[1, -1.6, 0.7])\n>>> H.bode(xmin=0, xmax=fs/2, xscale='linear',\n    title='IIR digital filter')\n>>> show()\n```\n\n![screenshot3](https://framagit.org/fsincere/ac-electricity//uploads/187f9f3c728601a54f688b08817224a7/image3.png)\n\n```\ny(n) = (x(n)+x(n-1)+...+x(n-7))/8\n```\n\n```python\n>>> from acelectricity import *\n>>> fs = 10000  # sampling rate (Hz)\n>>> H = Ratio.digital_filter(fs=fs, b=[1/8]*8)\n>>> H.bode(xmin=0, xmax=fs/2, xscale='linear',\n    magnitude_unit='default', title='FIR digital filter')\n>>> show()\n```\n\n![screenshot4](https://framagit.org/fsincere/ac-electricity/uploads/7c9d44218cdc34d91c58e661959190eb/image4.png)\n\n\n### Custom default frequency\n\n```python\n>>> from acelectricity import *\n>>> Yc = Admittance(c=220e-6)\n>>> Yc\nComplex admittance (S) : 0+1.3823j @ 1.0 kHz\n>>> ElectricalQuantity.DEFAULT_FREQUENCY = 50\n>>> Yc\nComplex admittance (S) : 0+0.069115j @ 50 Hz\n>>> 1/Yc\nComplex impedance (Ω) : 0-14.4686j @ 50 Hz\n```\n\n### Goodies\n\n#### Ideal filters\n\n```python\n>>> from acelectricity import *\n>>> def lp(w):\n        wn = 10000\n        return 1 if w < wn else 0.001\n>>> def hp(w):\n        wn = 1000\n        return 10 if w > wn else 0.001\n>>> def bp(w):\n        wn1, wn2 = 1000, 10000\n        return 1 if wn2 > w > wn1 else 0.001\n>>> def notch(w):\n        wn1, wn2 = 4000, 5000\n        return 0.001 if wn2 > w > wn1 else 1\n>>> def allpass(w):\n        wn = 10000\n        return 1j if w > wn else -1j\n>>> Hlp = Ratio(fw=lp)\n>>> Hhp = Ratio(fw=hp)\n>>> Hbp = Ratio(fw=bp)\n>>> Hnotch = Ratio(fw=notch)\n>>> Hallpass = Ratio(fw=allpass)\n>>> Hallpass.bode(title='Ideal all-pass filter')\n>>> (Hhp+Hlp).bode(title='Ideal filter Bode plot')\n>>> show()\n```\n\n![screenshot5](https://framagit.org/fsincere/ac-electricity/uploads/049f8ba9a1f11e08b6d2fcbb3be8d700/image5.png)\n\n![screenshot6](https://framagit.org/fsincere/ac-electricity/uploads/f0fcb4b3039df6774abfa8c885b9f04f/image6.png)\n\nNote : remember that ideal filters are not realizable (not causal).  \n\n#### Asymptotic Bode diagram\n\n```python\n>>> def lp1(w):\n        # first order low-pass filter 1/(1+1j*w/wn)\n        # asymptotic approximation\n        wn = 1000\n        return 1 if w < wn else 1/(1j*w/wn)\n>>> def lp2(w):\n        wn = 30000\n        return 1 if w < wn else 1/(1j*w/wn)\n>>> Hlp1 = Ratio(fw=lp1);Hlp2 = Ratio(fw=lp2)\n>>> (Hlp1*Hlp2).bode(title='Asymptotic Bode plot')\n>>> show()\n```\n\n![screenshot7](https://framagit.org/fsincere/ac-electricity/uploads/fcd30dd740138e241330522c24a05071/image7.png)\n\n### Advantages and limitations\n\nThis module manages basic arithmetic operations ```+ - * /``` as well as ```//``` which designates two impedances in parallel.  \n\nThe dimensional homogeneity is checked :  \n\n```python\n>>> V3 = V1 - V2 + I3  # V+A -> Error\nTypeError : Voltage expected\n>>> I1 = Current(2)\n>>> I = I1 + 0.5  # A+number -> Error\nTypeError : Current expected\n>>> I2 = Current(0.5, phase=30)\n>>> I = I1 + I2\n>>> I\nComplex current (Arms) : 2.43301+0.25j @ 1.0 kHz\n>>> I = 5*I2 - V1/Z1 + I3\n```\n\nThe result of any operation must give a quantity whose unit is one of : V, A, Ω, S, W (or ratio).  \nOtherwise, you will get an error :   \n\n```python\n>>> Z1/V1  # Ω/V -> 1/A -> Error\nTypeError\n>>> U2*(Z3/(Z2+Z3))  # V*(Ω/Ω) -> V*() -> V\n>>> U2*Z3/(Z2+Z3)  # V*Ω -> Error\nTypeError\n>>> S = V1*(V1/Z1)  # V*(V/Ω) -> V*A -> W\n>>> S = V1*V1/Z1    # V*V -> Error\nTypeError\n```\n\n### See also  \n\n[https://pypi.org/project/dc-electricity](https://pypi.org/project/dc-electricity)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://framagit.org/fsincere/ac-electricity",
    "keywords": "",
    "license": "",
    "maintainer": "Fabrice Sincère",
    "maintainer_email": "fabrice.sincere@ac-grenoble.fr",
    "name": "ac-electricity",
    "package_url": "https://pypi.org/project/ac-electricity/",
    "platform": "",
    "project_url": "https://pypi.org/project/ac-electricity/",
    "project_urls": {
      "Homepage": "https://framagit.org/fsincere/ac-electricity"
    },
    "release_url": "https://pypi.org/project/ac-electricity/0.4.6/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "An educational module about linear AC electrical circuits",
    "version": "0.4.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7307680,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e081778e182c530a25d59333d94f2470faeae9be3c13e28d46bffca7639ac4a",
          "md5": "ccae41b57e385b0ae577e3cf09c796d2",
          "sha256": "2e4f431bd3c07e04237c6bc8f41f51f741102b069ddfca626ee759a492f507da"
        },
        "downloads": -1,
        "filename": "ac-electricity-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ccae41b57e385b0ae577e3cf09c796d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 18425,
        "upload_time": "2020-05-05T21:25:12",
        "upload_time_iso_8601": "2020-05-05T21:25:12.056187Z",
        "url": "https://files.pythonhosted.org/packages/5e/08/1778e182c530a25d59333d94f2470faeae9be3c13e28d46bffca7639ac4a/ac-electricity-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a40c6e516937e141164b6f032b35bdf95d5e5ea2c7a79be53f223231113732e",
          "md5": "1a119004d92dca3e4594a713bf1bbfd2",
          "sha256": "38d269c9e287803d1fb46cc9ad326000bdb947e7dbd4d91e9937401214377b7b"
        },
        "downloads": -1,
        "filename": "ac-electricity-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a119004d92dca3e4594a713bf1bbfd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 19026,
        "upload_time": "2020-05-06T18:31:28",
        "upload_time_iso_8601": "2020-05-06T18:31:28.893840Z",
        "url": "https://files.pythonhosted.org/packages/4a/40/c6e516937e141164b6f032b35bdf95d5e5ea2c7a79be53f223231113732e/ac-electricity-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f26bd1296e298726542d71694c5782d38a64adae336a7a06ea3f874fa99c6f1d",
          "md5": "1020fc263a13b9ad3725edbce33271e0",
          "sha256": "aa11467c021195df83c610bf2158cf647e3be001b1b122e66e531896c3d2bf11"
        },
        "downloads": -1,
        "filename": "ac-electricity-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1020fc263a13b9ad3725edbce33271e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 21381,
        "upload_time": "2020-05-11T16:12:28",
        "upload_time_iso_8601": "2020-05-11T16:12:28.000629Z",
        "url": "https://files.pythonhosted.org/packages/f2/6b/d1296e298726542d71694c5782d38a64adae336a7a06ea3f874fa99c6f1d/ac-electricity-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c30010afe9d79b35340ea217e7e6d9d9e107f5dcae769d002f4ab5b172ae60a6",
          "md5": "ae838a4261dc8b91d9bc8e98b380cf10",
          "sha256": "4e1dc1ba75585a2c4761c1f70b8fe2dd89475ccf84cab747523540eeb6a9728f"
        },
        "downloads": -1,
        "filename": "ac-electricity-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ae838a4261dc8b91d9bc8e98b380cf10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 25072,
        "upload_time": "2020-05-16T10:50:10",
        "upload_time_iso_8601": "2020-05-16T10:50:10.497174Z",
        "url": "https://files.pythonhosted.org/packages/c3/00/10afe9d79b35340ea217e7e6d9d9e107f5dcae769d002f4ab5b172ae60a6/ac-electricity-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fa52d2f128dbd67d51ada49690a4f67216553c3d5114af7e1c9b36bb96c3987",
          "md5": "96f3e8f4e128d32efddb544182c3e2b0",
          "sha256": "bfb52176f2f815e34d0647ccb973bc22f17f721fff16a44ce0face4b6f5070cc"
        },
        "downloads": -1,
        "filename": "ac-electricity-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "96f3e8f4e128d32efddb544182c3e2b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26231,
        "upload_time": "2020-05-20T21:20:33",
        "upload_time_iso_8601": "2020-05-20T21:20:33.269025Z",
        "url": "https://files.pythonhosted.org/packages/9f/a5/2d2f128dbd67d51ada49690a4f67216553c3d5114af7e1c9b36bb96c3987/ac-electricity-0.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f8faf708eda3fa0d83924bb6ee34a77cc1f39e1ada542948739072d717bcda8",
          "md5": "69badba92e16da976dc84f95a30c6ac4",
          "sha256": "59fd5a977473ca070bf1813cb2c66933902206811dce86b2cd4904c3093547e2"
        },
        "downloads": -1,
        "filename": "ac-electricity-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "69badba92e16da976dc84f95a30c6ac4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26589,
        "upload_time": "2020-05-21T06:59:31",
        "upload_time_iso_8601": "2020-05-21T06:59:31.236046Z",
        "url": "https://files.pythonhosted.org/packages/1f/8f/af708eda3fa0d83924bb6ee34a77cc1f39e1ada542948739072d717bcda8/ac-electricity-0.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf3488df3d41de54df5a47f6101992a0188aa158ee61e0477d496b05a3243e61",
          "md5": "86813b24b66eb4163c416b81965a383c",
          "sha256": "df888ce2cd9b283afc59e23888b3c16066cf8fce810bbc0cc8b2560ad64512ef"
        },
        "downloads": -1,
        "filename": "ac-electricity-0.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "86813b24b66eb4163c416b81965a383c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 27338,
        "upload_time": "2020-05-23T08:46:41",
        "upload_time_iso_8601": "2020-05-23T08:46:41.891489Z",
        "url": "https://files.pythonhosted.org/packages/cf/34/88df3d41de54df5a47f6101992a0188aa158ee61e0477d496b05a3243e61/ac-electricity-0.4.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf3488df3d41de54df5a47f6101992a0188aa158ee61e0477d496b05a3243e61",
        "md5": "86813b24b66eb4163c416b81965a383c",
        "sha256": "df888ce2cd9b283afc59e23888b3c16066cf8fce810bbc0cc8b2560ad64512ef"
      },
      "downloads": -1,
      "filename": "ac-electricity-0.4.6.tar.gz",
      "has_sig": false,
      "md5_digest": "86813b24b66eb4163c416b81965a383c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 27338,
      "upload_time": "2020-05-23T08:46:41",
      "upload_time_iso_8601": "2020-05-23T08:46:41.891489Z",
      "url": "https://files.pythonhosted.org/packages/cf/34/88df3d41de54df5a47f6101992a0188aa158ee61e0477d496b05a3243e61/ac-electricity-0.4.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}