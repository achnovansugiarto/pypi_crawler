{
  "info": {
    "author": "OBGP",
    "author_email": "michael.karpeles@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)"
    ],
    "description": "Welcome to the Open Book Genome Project (OBGP) Sequencer™, an open-source Book Processing Pipeline of responsibly vetted community \"[modules](https://github.com/Open-Book-Genome-Project/sequencer/tree/master/bgp/modules)\" which classify, sequence, and fingerprint book fulltext to reveal public insights about Books.\n\n## Quickstart\n\nWant to get started immediately?\n\nTry the [OBGP Sequencer™ Google Colab Notebook](https://colab.research.google.com/drive/1q3eBgrMeq1mfObzwYyS3VTIwGr5W7wtL?authuser=1):\n\n## How it Works\n\nEach month, the OBGP Sequencer™ gets run against the fulltext of more than 1M books, generating valuable public insights for book lovers and researchers around the globe. OBGP Sequencer™ consists of carefully vetted community-contributed [modules](https://github.com/Open-Book-Genome-Project/sequencer/tree/master/bgp/modules) which aim to responsibly [help increase the discoverability and usefulness of books](https://docs.google.com/document/d/1eybbw_qZ3EE9CJg868BhPuq5z_36Wq2G0Ki3Lkde9v8/edit?ts=5e5edcd1#heading=h.dj2jqsxuy8my), e.g.:\n- Identifying urls, isbns, and citations within the text\n- Generating word frequency mappings\n- Guessing grade reading levels\n\n## Who we are\n\nOBGP is an independent, community-run, not-for-profit committee of open-source and book enthusiasts who want to responsibly further the effort of making books as useful and accessible as possible.\n\n## Installation\n\n### Production\n\nIf you want to run the OBGP Sequencer™ pipeline, run:\n```\npip install obgp\n```\n\n### Local Development\n\n```\ngit clone https://github.com/Open-Book-Genome-Project/sequencer.git  # get the code\nvirtualenv venv && source venv/bin/activate  # setup a virtual environment\ncd sequencer  # change into project directory\npip install -e .  # install the library (and re-run in project root as you make changes)\n```\n\n### Docker Usage\nFirst, create a directory called `obgp_dir` if it doesn't already exist.\n`mkdir -p obgp_dir`\n\nNext, while in the sequencer directory, run:\n`export OBGP_S3=~/.config/ia.ini OBGP_DIR=./obgp_dir;docker-compose up`\n\nUse `docker container ls` to get container ID.\nThen `docker exec -it obgp /bin/sh` replacing the container ID with the actual ID\n\nYou should now be in the container shell and can execute commands!\n\n## Usage\n\nOnce you've install either the production code or build your developer code, you may proceed to start python and import the `runner.pipeline` with whatever modules you'd like.\n\nLet's say you want to process the book https://archive.org/details/hpmor which has identifier `hpmor` on Archive.org. First, you would define your Sequencer as follows:\n\n```python\nfrom bgp import Sequencer, STOP_WORDS\nfrom bgp.modules.terms import NGramProcessor, WordFreqModule\ns = Sequencer({\n    'words': NGramProcessor(modules={\n        'term_freq': WordFreqModule()\n    }, n=1, stop_words=STOP_WORDS)\n})\n```\n\nThen, you would pass this book identifier into the Sequencer to sequence the book to get back a genome Sequence object:\n\n```python\ngenome = s.sequence('hpmor')\ngenome.results\n```\n\n## Saving & Uploading Results\n\nIf your `internetarchive` tool is configured against an account with sufficient permissions, you can then upload your genome results back to an Archive.org item (we'll arbitrarily pick the identifier `bgp`) by running:\n\n```\n>>> genome.write_results_to_item('bgp')\n```\n\nThis will upload the `genome.results` as json to <book_identifier>_results.json (e.g. `hpmor_results.json`) unless otherwise specified by overriding params.\n\nYou will then be able to see your file `hpmor_results.json` within the `bgp` item's file downloads: https://archive.org/download/bgp\n\nIf you want to run a default test to make sure everything works, try:\n\n```python\nfrom bgp import DEFAULT_SEQUENCER\ngenome = DEFAULT_SEQUENCER.sequence('9780262517638OpenAccess')\ngenome.results\n```\n\n## Using pipeline.py\n\nThis pipeline allows a user to sequence a list of books from a jsonl in the following format:\n\n```jsonl\n{\"identifier\": \"samplebook\"}\n{\"identifier\": \"9780262517638OpenAccess\"}\n```\n\nThe pipeline then automatically chooses the most probable isbn for the book and attempts to update ia metadata accordingly while keeping a filesystem based database of all these actions.\n\n\n|Record|Filesystem Action|\n| ---- | ---- |\n| How do we determine which books we've successfully uploaded a genome     | Touches `GENOME_UPDATED_{identifier}`    |\n| How do we determine the ISBNs of all books we’ve sequenced so far    | Touches `ISBN_1234567890_{identifier}`    |\n| How do we determine which books were sequenced but had no ISBN     | Touches `UPDATE_NONE_{identifier}`    |\n| How do we know which books attempted updating but failed     | `UPDATE_FAILED_{identifier}`     |\n| How do we know which books succeeded at updating and succeed     | `UPDATE_SUCCEED_{identifier}`     |\n| How do we know if item already has isbn metadata and is skipped     | `UPDATE_CONFLICT_{identifier}`     |\n| How do we know how many new urls were found in a book     | `URLS_{number_of_urls}_{identifier}`     |\n\nThe user can can grep and pipe to wc -l which tells them how many for each status and lists those items\n\n\n### Example Usage\n\nHere is a archive item with the identifier `samplebook`. It has an isbn in the text of the book but no isbn metadata.\n\n<img width=\"638\" alt=\"Screen Shot 2021-07-15 at 6 06 08 PM\" src=\"https://user-images.githubusercontent.com/6785029/125876309-efed1316-96a2-47fb-a874-77169be15529.png\">\n\nThere is a jsonl file with the items to be sequenced listed on new lines.\n\n```jsonl\n{\"identifier\": \"samplebook\"}\n{\"identifier\": \"9780262517638OpenAccess\"}\n```\n\nTo use the pipeline, run `python pipeline.py samplebook.jsonl`\n\nYou can specify the amount of pipeline processes to run concurrently with `--p {number of processes}` as a parameter. For example: `python pipeline.py --p 4 samplebook.jsonl`\n\nIf we `tree results/bgp_results` now we get:\n\n```\nresults/bgp_results\n├── 9780262517638OpenAccess\n│   ├── ISBN_9780262517638_9780262517638OpenAccess\n│   ├── UPDATE_CONFLICT_9780262517638OpenAccess\n│   ├── URLS_290_9780262517638OpenAccess\n│   └── book_genome.json\n└── samplebook\n    ├── ISBN_0787959529_samplebook\n    ├── UPDATE_SUCCEED_samplebook\n    ├── URLS_0_samplebook\n    └── book_genome.json\n\n2 directories, 8 files\n```\n\nIf we check the metadata for the book on archive.org again we can see that the isbn field has been updated.\n\n<img width=\"638\" alt=\"Screen Shot 2021-07-15 at 6 06 08 PM\" src=\"https://user-images.githubusercontent.com/6785029/125876475-976495e1-05ac-465d-bac6-6fd8fe9ca5cb.png\">\n\nThere is also a file generated named `URLS_0_samplebook` which indicates that 0 non 'archive.org' were extracted.\n\nIn the case of another item like `9780262517638OpenAccess`, the filename indicates that 290 new urls were extracted. If we look at the contents of that file we will see all the unique urls extracted separated by newlines.\n\n```\nhttp://blogs.law.harvard.edu/pamphlet/2009/05/29/what-percentage\nhttp://www.sherpa.ac.uk/romeo\nhttp://www.library.yale.edu/~llicense/listarchives/0405/msg00038\nhttp://dash.harvard.edu/bitstream/handle/l/4552050/suber_nofee\nhttp://dx.doi.org/10.1371/journal.pone.0013636\nhttp://doctorrw.blogspot.com/2007/05/tabloid-based-medicine\n... etc.\n```\n\nThe `9780262517638OpenAccess` directory also shows that a url was extracted with the `ISBN_9780262517638_9780262517638OpenAccess` record, but was the ia item was not updated because a isbn already existed with the `UPDATE_CONFLICT_9780262517638OpenAccess`\n\n\n## Contributing a Module\n\n1. Please [read the whitepaper](https://docs.google.com/document/d/1eybbw_qZ3EE9CJg868BhPuq5z_36Wq2G0Ki3Lkde9v8/edit?ts=5e5edcd1#) and look through our community list of [proposed or requested modules](https://docs.google.com/document/d/1eybbw_qZ3EE9CJg868BhPuq5z_36Wq2G0Ki3Lkde9v8/edit?ts=5e5edcd1#heading=h.dj2jqsxuy8my)\n2. [Propose a \"module\"](https://github.com/Open-Book-Genome-Project/sequencer/issues/new) by creating a github issue\n3. Get the code: Fork this git repository and clone it to your workspace. Create a new branch for your module (named after its corresponding github issue number and title: e.g. `git checkout -b 12/module/find-isbns`). Install\n4. [Create a new module](https://github.com/Open-Book-Genome-Project/sequencer/new/master) to the `modules/` directory\n5. Test your module locally using [Internet Archive's unrestricted collection of ~800k books](https://docs.google.com/document/d/10cNGGYrDFu0BJg-pUYYzKpjB1TWkqKspTZl2YG-yLJ4/edit?fbclid=IwAR3fx-LPu7D4zU1FbcehX2bIY1fNU_nvbqOiy5QpS0yGv_ILhVr73WHD-BI#heading=h.36kkw3g3gzos)\n5. [open a Pull Request](https://github.com/Open-Book-Genome-Project/sequencer/compare) so your contribution may be reviewed.\n\n\n## Technical Overview\n\n- Book Genome Project extends/overloads @jjjake's `internetarchive` tool (invisibly using bad practices) in bgp/__init__.py with functions to fetch xml / plaintext (in a smart, memoized way)\n- Programmer builds a Sequencer (which is a list) of Sequences (a Sequence essentially does 1-pass on the data). Currently, the only sequences we have are 1gram and 2gram and these could be done in a single pass.\n- Each Sequence specified a list of modules to get run as it steps\n- The result is the top-level Sequencer can print out its `.results` as a dict\n\n### Sequencers, Processors & Modules\n\nA `Sequencer` tells the Book Genome Project what tasks should be run and what results should be derived when processing a book's genome.\n\nWhen a OGBP Sequencer is defined, it is loaded with a list of Processors, and these Processors with Modules.\n\nA Processor is an abstraction which is responsible for fetching a specific representation of a Book (e.g. plaintext, xml, abbyy), splitting it into predefined logical units (e.g. characters, words, sentences, paragraphs, pages, chapters, entire text), stepping over each of these logical units, and sending them to it's registered Modules. \n\nOne example hypothetrical Processor might be called `XMLSentenceProcessor`. This Processor may be responsible for fetching (i.e. downloading) a Book in XML format with word-level markup. The `run()` method of the Processor's interface might parse and split the structured XML data into sentences, iterate through each sentence, and forward them to each of its registered Modules for processing. This hypothetical `SentenceProcessor` might be loaded with several Modules, such as a `TotalSentenceCountModule` and an `SentenceWordCountStatsModule` which, respectively, keeps track of the total number of sentences within the book and calculates the average number of words per sentence, etc.\n\nIn many cases a developer may find that the package's out-of-the-box `bgp.DEFAULT_SEQUENCER` is a great place to start, either as a Sequencer to run or a good example for extending.\n\n### Genome Schema\nThis is the reference schema used in genome json files:\n```json\n{\n  \"metadata\": {\n    \"identifier\": \"(ia identifier)\",\n    \"version\": \"(commit)\",\n    \"timestamp\": \"r(Unix Epoch)\",\n    \"sequence_time\": \"r(sequence process seconds)\",\n    \"source\": {\n      \"txt\": {\n        \"time\": \"r(txt download seconds)\",\n        \"bytes\": \"r(txt bytes)\"\n      },\n      \"xml\": {\n        \"time\": \"r(xml download seconds)\",\n        \"bytes\": \"r(xml bytes)\"\n      }\n    },\n    \"processors\": {\n      \"1gram\": {\n        \"tokenization_time\": \"r(1gram tokenization process seconds)\",\n        \"total_tokens\": \"r(1gram count)\",\n        \"total_time\": \"r(1gram processor process seconds)\",\n        \"modules\": {\n          \"urls\": {\n            \"time\": \"r(url process seconds)\"\n          },\n          \"1grams\": {\n            \"time\": \"r(1gram frequency process seconds)\"\n          }\n        }\n      },\n      \"2gram\": {\n        \"tokenization_time\": \"r(2gram tokenization process seconds)\",\n        \"total_tokens\": \"r(2gram count)\",\n        \"total_time\": \"r(2gram processor process seconds)\",\n        \"modules\": {\n          \"2grams\": {\n            \"time\": \"r(2gram frequency process seconds)\"\n          }\n        }\n      },\n      \"fulltext\": {\n        \"total_time\": \"r(fulltext processor process seconds)\",\n        \"modules\": {\n          \"readinglevel\": {\n            \"time\": \"r(reading level process seconds)\"\n          }\n        }\n      },\n      \"pagetypes\": {\n        \"total_time\": \"r(pagetype processor process seconds)\",\n        \"modules\": {\n          \"copyright_page\": {\n            \"time\": \"r(copyright page process seconds)\"\n          },\n          \"backpage_isbn\": {\n            \"time\": \"r(copyright page process seconds)\"\n          }\n        }\n      }\n    }\n  },\n  \"urls\": [\n              \"(url)\"\n            ],\n  \"1grams\": [\n              [\n                \"(1gram)\",\n                \"r(1gram frequency)\"\n              ]\n            ],\n  \"2grams\": [\n              [\n                \"(2gram)\",\n                \"r(2gram frequency)\"\n              ]\n            ],\n  \"readinglevel\": {\n              \"readability\": {\n                \"flesch_kincaid_score\": \"r(flesch kincaid score)\",\n                \"smog_score\": \"r(smog score)\"\n              },\n              \"lexile\": {\n                \"min_age\": \"(Lower age in range)\",\n                \"max_age\": \"(Upper age in range)\"\n              }\n            },\n  \"copyright_page\": [\n              {\n                \"page\": \"(copyright page)\",\n                \"isbns\": [\n                  \"(isbn)\"\n                ]\n              }\n            ],\n  \"backpage_isbn\": [\n              \"(isbn)\"\n            ]\n}\n```\n\n## Public Testing Data sets\n\nHere's a corpus of ~800k Archive.org item identifiers of public domain books (of varying quality/appearance/language) which may be used for testing your module:\n\nhttps://archive.org/download/869k-public-domain-book-urls-dataset/2017-12-26_public-domain-books-dataset_800k-identifiers.csv (~19mb)\n\n## Questions?\nPlease [open an issue](https://github.com/Open-Book-Genome-Project/sequencer/issues/new) and [request a slack invite](mailto:hi@mek.fyi)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Open-Book-Genome-Project/sequencer",
    "keywords": "open book genome fulltext analysis",
    "license": "https://www.gnu.org/licenses/agpl-3.0.en.html",
    "maintainer": "",
    "maintainer_email": "",
    "name": "obgp",
    "package_url": "https://pypi.org/project/obgp/",
    "platform": "any",
    "project_url": "https://pypi.org/project/obgp/",
    "project_urls": {
      "Homepage": "https://github.com/Open-Book-Genome-Project/sequencer"
    },
    "release_url": "https://pypi.org/project/obgp/0.0.42/",
    "requires_dist": [
      "beautifulsoup4 (==4.9.0)",
      "internetarchive (==3.0.0)",
      "lxml (==4.6.5)",
      "configparser (==4.0.2)",
      "textstat (==0.5.7)",
      "py-readability-metrics (==1.4.5)",
      "isbnlib (==3.10.7)",
      "nltk (==3.7)"
    ],
    "requires_python": "",
    "summary": "Open Book Genome Project",
    "version": "0.0.42",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14594548,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b3af9f796362d74b0cb03d02b252f290d5d2521e568589058a5df3f682a5268",
          "md5": "b488300fecd41e77830bf27ed9bd6197",
          "sha256": "00eb00a18514f96c6bd900de3ead99a4878868cfd94856df93040590f37b43c3"
        },
        "downloads": -1,
        "filename": "obgp-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b488300fecd41e77830bf27ed9bd6197",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3443,
        "upload_time": "2020-03-04T20:21:17",
        "upload_time_iso_8601": "2020-03-04T20:21:17.746936Z",
        "url": "https://files.pythonhosted.org/packages/8b/3a/f9f796362d74b0cb03d02b252f290d5d2521e568589058a5df3f682a5268/obgp-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3c1e308a9ec60d3518ef8e92e0d325e1e86f92551ac43007f1474237a801cc8",
          "md5": "c3604b4f2b300e710263560fe70f8366",
          "sha256": "8e38c923f4621d984c5e356dbf27186909d0b99ca26c6f3508d6cca6735a435c"
        },
        "downloads": -1,
        "filename": "obgp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c3604b4f2b300e710263560fe70f8366",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4062,
        "upload_time": "2020-03-08T17:15:08",
        "upload_time_iso_8601": "2020-03-08T17:15:08.797885Z",
        "url": "https://files.pythonhosted.org/packages/b3/c1/e308a9ec60d3518ef8e92e0d325e1e86f92551ac43007f1474237a801cc8/obgp-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ce4e163a4ab62651a1280b4c7f874120083b8912ed58a709f7d0d87c8c05936",
          "md5": "9a1f49c1ff48b8a29c5734a7072e44ff",
          "sha256": "46fb08f8a0e06c57fc16532b5a2a1c87202db5f25346cc2838d6ff7def771b4b"
        },
        "downloads": -1,
        "filename": "obgp-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9a1f49c1ff48b8a29c5734a7072e44ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6195,
        "upload_time": "2020-03-08T19:59:06",
        "upload_time_iso_8601": "2020-03-08T19:59:06.537447Z",
        "url": "https://files.pythonhosted.org/packages/8c/e4/e163a4ab62651a1280b4c7f874120083b8912ed58a709f7d0d87c8c05936/obgp-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cea08fb4e944718c076b565ff4f14f48f65a6afe19f8de7e000f09eb4f3eeb1",
          "md5": "c0f919d39b85e1bb79016accfa56fc4a",
          "sha256": "5f49f4a40667bd2624bf84eb97588c218add19e7a05113eecb6357b87a29b745"
        },
        "downloads": -1,
        "filename": "obgp-0.0.32.tar.gz",
        "has_sig": false,
        "md5_digest": "c0f919d39b85e1bb79016accfa56fc4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6700,
        "upload_time": "2020-03-08T20:13:11",
        "upload_time_iso_8601": "2020-03-08T20:13:11.347636Z",
        "url": "https://files.pythonhosted.org/packages/8c/ea/08fb4e944718c076b565ff4f14f48f65a6afe19f8de7e000f09eb4f3eeb1/obgp-0.0.32.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "876a111d9e8cb3037e5dbf46ccf9e9850be4e923a5e04593131fa84327534181",
          "md5": "28f97d8845b9408c2b475d10e775f94d",
          "sha256": "21965d717309f82f059e72e1c24e22ee94a98231b3c153a5616aa69acd5d1616"
        },
        "downloads": -1,
        "filename": "obgp-0.0.36-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28f97d8845b9408c2b475d10e775f94d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15261,
        "upload_time": "2022-07-28T17:40:01",
        "upload_time_iso_8601": "2022-07-28T17:40:01.608979Z",
        "url": "https://files.pythonhosted.org/packages/87/6a/111d9e8cb3037e5dbf46ccf9e9850be4e923a5e04593131fa84327534181/obgp-0.0.36-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "missing requirements.txt"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aecc70f7dabe8c9bee2d86ecb6038eb4a1c2b38ec8a665f3fbd415dce722db4e",
          "md5": "51a965d86d5e9205b14754394451e24b",
          "sha256": "25efb08e78bf35ea28ffe19f3a13137e738cb551a468494db6241c81316bbf87"
        },
        "downloads": -1,
        "filename": "obgp-0.0.36.tar.gz",
        "has_sig": false,
        "md5_digest": "51a965d86d5e9205b14754394451e24b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19426,
        "upload_time": "2022-07-28T03:08:19",
        "upload_time_iso_8601": "2022-07-28T03:08:19.087760Z",
        "url": "https://files.pythonhosted.org/packages/ae/cc/70f7dabe8c9bee2d86ecb6038eb4a1c2b38ec8a665f3fbd415dce722db4e/obgp-0.0.36.tar.gz",
        "yanked": true,
        "yanked_reason": "missing requirements.txt"
      }
    ],
    "0.0.38": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa50329c360cc5dcb2adb537e9ce3568eb4855822376363a914936067236d768",
          "md5": "82de4874fc06f1080611dfb2576684f8",
          "sha256": "cb607d46da38ae17f3cdde73dbaa529f90b9fb8b587269fe422803fc92b3a293"
        },
        "downloads": -1,
        "filename": "obgp-0.0.38-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82de4874fc06f1080611dfb2576684f8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15260,
        "upload_time": "2022-07-28T17:43:56",
        "upload_time_iso_8601": "2022-07-28T17:43:56.941707Z",
        "url": "https://files.pythonhosted.org/packages/aa/50/329c360cc5dcb2adb537e9ce3568eb4855822376363a914936067236d768/obgp-0.0.38-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.40": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45651f0be0b7dfdab74415c0b899f21f9e5384836678081d763f88689dd969b8",
          "md5": "064557289b8b23ce66431d6f0a210878",
          "sha256": "61a0d712eac82134bff861d76f64e36b3a30225f1d0b47c26365a4077021ed03"
        },
        "downloads": -1,
        "filename": "obgp-0.0.40-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "064557289b8b23ce66431d6f0a210878",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15270,
        "upload_time": "2022-07-29T20:41:20",
        "upload_time_iso_8601": "2022-07-29T20:41:20.861566Z",
        "url": "https://files.pythonhosted.org/packages/45/65/1f0be0b7dfdab74415c0b899f21f9e5384836678081d763f88689dd969b8/obgp-0.0.40-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.42": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0af2a68a611f2e8b738da4bbb9315a9d460201615caab270ad74860740b4efde",
          "md5": "3c4d00567204acf2f12971619929a59b",
          "sha256": "f436f1ab49d06b2926f61a9e2f9f72d1a2241ea95fcf35d3105a34dabeae64aa"
        },
        "downloads": -1,
        "filename": "obgp-0.0.42-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c4d00567204acf2f12971619929a59b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15196,
        "upload_time": "2022-07-29T20:46:03",
        "upload_time_iso_8601": "2022-07-29T20:46:03.901050Z",
        "url": "https://files.pythonhosted.org/packages/0a/f2/a68a611f2e8b738da4bbb9315a9d460201615caab270ad74860740b4efde/obgp-0.0.42-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0af2a68a611f2e8b738da4bbb9315a9d460201615caab270ad74860740b4efde",
        "md5": "3c4d00567204acf2f12971619929a59b",
        "sha256": "f436f1ab49d06b2926f61a9e2f9f72d1a2241ea95fcf35d3105a34dabeae64aa"
      },
      "downloads": -1,
      "filename": "obgp-0.0.42-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c4d00567204acf2f12971619929a59b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 15196,
      "upload_time": "2022-07-29T20:46:03",
      "upload_time_iso_8601": "2022-07-29T20:46:03.901050Z",
      "url": "https://files.pythonhosted.org/packages/0a/f2/a68a611f2e8b738da4bbb9315a9d460201615caab270ad74860740b4efde/obgp-0.0.42-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}