{
  "info": {
    "author": "Mikael Schultz",
    "author_email": "bitcanon@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# About SynoChat\n**SynoChat** is a Python package which allows for easy integration with the Synology Chat API in just a few lines of code.\nAccording to the [documentation](https://kb.synology.com/sv-se/DSM/help/Chat/chat_integration?version=7) _(which is sadly a bit sparse)_, Synology Chat has support for both incoming and outgoing webhooks, slash commands and bots.\n\n## Package support\nThis package currently supports:\n* **Incoming webhooks:** Send messages to a chat channel in Synology Chat from the `synochat` library.\n* **Outgoing webhooks:** Send messages from Synology Chat to the `synochat` library.\n* **Slash commands:** Send commands with parameters from Synology Chat to the `synochat` library.\n\n## Installation\nIt is recommended to install this package inside a virtual environment as with most Python packages. Use `pip` to install the package.\n\n### Create virtual environment\n```bash\n$ virtualenv venv\n$ source venv/bin/activate\n```\n### Install package\n```\n$ pip install synochat\n```\n\n## Setting up integration\nBefore we start coding we must setup the integration in the Synology Chat client.\n\nDo this by opening the Synology Chat client, either in the *web application* or the *native desktop application*, and go to **User Profile** > **Integration** and follow the instructions. Click [here](https://kb.synology.com/en-us/DSM/tutorial/How_to_configure_webhooks_and_slash_commands_in_Chat_Integration) for more help.\n\n> Setting up integrations in the smartphone or tablet app is currently not available.\n\n# Incoming webhooks\nUsing an **incoming webhook** we can post messages into a channel in Synology Chat. Besides sending just simple text to a channel we can also attach links and file uploads (which are available via HTTP).\n\n## Setting up integration\nGo to **User Profile** > **Integration** and follow the instructions.\n\n<img src=\"/img/incoming-webhook-settings.png\" width=\"480\">\n\nTake note of the **Webhook URL** in the integration settings dialog. You need to extract a few components from this link:\n* **Hostname:** For example *chat.example.com* or *192.168.0.2*\n* **Port:** For example *80*, *443*, *5000*, *5001*\n* **Token:** The *token* string (***64 characters*** at the end of the line)\n\n**Important!** Do not include **%22** surrounding the token in the URL. The token should be ***exactly 64 characters***.\n\n## Code\nUse this simple code example to send a message to the chat channel associated with this token.\n```python\nfrom synochat.webhooks import IncomingWebhook\n\ntoken = \"w6Jw1Z6EpEONtabCfcTk6YObsaaj958fGzWOTQe0s33pl42RVLmkRUJBWoCgSfoz\"\nwebhook = IncomingWebhook('chat.example.com', token)\n\nwebhook.send('This text is sent to Synology Chat.')\n```\n\n### Add a link\nWe can easily add a link to the message with the `<` and `>` characters.\n```python\nwebhook.send('Send text with a link embedded <https://www.synology.com>')\n```\n\nDefine the *link text* by appending `|text` to the link tag.\n```python\nwebhook.send('Check out <https://www.synology.com/en-us/dsm/feature/chat|Synology Chat>!')\n```\nThis is how it might look in the Synology Chat client:\n\n<img src=\"/img/incoming-webhook-with-link.png\" width=\"480\">\n\n### Add an image\nAdd an image file to the message by passing a URL in the `file_url` parameter.\n```python\nwebhook.send('Send text with a photo attached.', file_url='https://www.synology.com/img/company/branding/synology_logo.jpg')\n```\n\n### Add a file\nOr upload a file of any type by passing a URL to the file in the `file_url` parameter.\n```python\nwebhook.send('Send text with a file attached.', file_url='http://ipv4.download.thinkbroadband.com/5MB.zip'')\n```\n\n### Advanced\nIf you access your Synology DiskStation on a different port than the default for this library (HTTPS/443) or if you don't have a valid SSL certificate on you NAS (which you should), you can tweak these settings like this:\n```python\nwebhook = IncomingWebhook('192.168.0.2', token, port=5001, verify_ssl=False)\n```\nNote that this will still use HTTPS (https://...) in the request to the Synology Chat server. If running HTTP on port 5001, change to HTTP (http://...) like so:\n```python\nwebhook.use_https = False\n```\nIt is also possible to change these settings via class properties:\n```python\nwebhook.hostname = \"nas.yourdomain.com\"\nwebhook.port = \"443\"\nwebhook.use_https = True\nwebhook.verify_ssl = True\nwebhook.token = \"...\"\n```\nMake sure to set them before calling the `send()` method.\n\n### Rate limiting\nThe Synology Chat API is rate limited so it's not possible to send messages inside a loop without a delay between posts. To handle this the `synochat` library implements a delay after a post has been created with the `send()` method.\n\nThere are two properties available to change this behavior if you prefer to handle the `RateLimitException()` on your own instead.\n\n```python\nwebhook.send_delay_enabled = False\nwebhook.send_delay = 0.75\n```\nThese properties can also be overridden in the class constructor if preferred.\n```python\nwebhook = IncomingWebhook('192.168.0.2', token, port=5001, verify_ssl=False, send_delay_enabled=False, send_delay=1.5)\n```\n\n> The send delay is set to 0.5 seconds by default.\n\n### Exceptions\nThe `send()` method will raise an exception if the request to the Synology Chat server fails for some reason.\n\nCheck out the examples or the [exceptions](synochat/exceptions.py) file for more information.\n\n# Outgoing webhooks\n**Outgoing webhooks** listen for trigger words in chat messages. When a trigger word is detected, a call is made to the webhook associated with the trigger word.\nConsider the following example:\n\n<img src=\"/img/outgoing-webhook-settings.png\" width=\"480\">\n\nWhen the word `Ping` *(case sensitive)* is noticed in a chat message, a call is made to http://192.168.0.2:5001/echo\n\n## Code\nTo setup the listening part of this functionality we can use the Flask framework, which is a lightweight web framework for Python.\n\n```python\nfrom flask import Flask, request\n\nfrom synochat.webhooks import OutgoingWebhook\n\napp = Flask(__name__)\n\n@app.route('/echo', methods=['POST'])\ndef echo():\n\ttoken = 'f69oQY4l5v7UVzKqmVfw1MQgFGZmxwODg1sndKIqsz8grAqYnKyerCRISQa1MiJj'\n\twebhook = OutgoingWebhook(request.form, token, verbose=True)\n\n\tif not webhook.authenticate(token):\n\t\treturn webhook.createResponse('Outgoing Webhook authentication failed: Token mismatch.')\n\n\tprint(webhook)\n\n\treturn webhook.createResponse('Pong')\n\nif __name__ == '__main__':\n   app.run('0.0.0.0', port=5001, debug = True)\n```\n\nThe code is self explanatory. To debug the request you can use the `print(webhook)` method:\n```bash\n<class 'synochat.webhooks.OutgoingWebhook'>: {'client_token': 'f69oQY4l5v7UVzKqmVfw1MQgFGZmxwODg1sndKIqsz8grAqYnKyerCRISQa1MiJj', 'server_token': 'f69oQY4l5v7UVzKqmVfw1MQgFGZmxwODg1sndKIqsz8grAqYnKyerCRISQa1MiJj', 'channel_id': '34', 'channel_type': '1', 'channel_name': 'Labb', 'user_id': '4', 'username': 'mikael', 'post_id': '146028888230', 'thread_id': '0', 'timestamp': '1647060330657', 'text': 'Ping', 'trigger_word': 'Ping', 'verbose': True}\n```\n\n### Class properties\nTo access the data from the outgoing webhook, use the **class properties** *(which are read-only)*:\n```python\nwebhook.client_token\nwebhook.server_token\nwebhook.channel_id\nwebhook.channel_type\nwebhook.channel_name\nwebhook.user_id\nwebhook.username\nwebhook.post_id\nwebhook.thread_id\nwebhook.timestamp\nwebhook.text\nwebhook.trigger_word\nwebhook.verbose\n```\n\n### Add a link\nLike with an *incoming webhook* we can easily add a link to the response message with the `<` and `>` characters.\n```python\nwebhook.createResponse('Send text with a link embedded <https://www.synology.com>')\n```\n\nDefine the *link text* by appending `|text` to the link tag.\n```python\nwebhook.createResponse('Check out <https://www.synology.com/en-us/dsm/feature/chat|Synology Chat>!')\n```\n\n### Add an image\nAdd an image file to the message by passing a URL in the `file_url` parameter.\n```python\nwebhook.createResponse('Send text with a photo attached.', file_url='https://www.synology.com/img/company/branding/synology_logo.jpg')\n```\n\n### Add a file\nOr upload a file of any type by passing a URL to the file in the `file_url` parameter.\n```python\nwebhook.createResponse('Send text with a file attached.', file_url='http://ipv4.download.thinkbroadband.com/5MB.zip'')\n```\n\n# Slash commands\nWith **slash commands** we can trigger outgoing webhooks by typing `/` in the text field of the Synology Chat client. In contrast to *outgoing webhooks* the response from the slash command is only visible to the user who triggered the command.\n\n## Parameters\nA **slash command** can also accept parameters, both *positional* and *optional*.\n\n### Positional parameters\nPositional parameters *must* appear in the correct order for them to be parsed correctly.\n\nExample:\n```bash\n/ping 1.1.1.1 count=4 time\n```\nIn the example above we have a slash command named `/ping`.\n* `1.1.1.1` is the first positional parameter. The `name` is defined in the code, for example **ip**.\n\n**Important!** Positional parameters **must** be placed in the **first** part of the slash command *(before optional parameter)*.\n\nExample:\n```bash\n/command positionalParam1 positionalParam2 optionalParam1 optionalParam2\n```\n\nDefine a parameter as **positional** by calling the `addParameter()` method, which creates a positional parameter by default. \n```python\nip = command.addParameter('ip')\n```\n\n### Optional parameters\nOptional parameters can appear in *any order* as long as they appear after the positional parameters.\n\nExample:\n```bash\n/ping 1.1.1.1 count=4 time\n```\nIn the example above we have a slash command named `/ping`.\n* `count=4` is the first *optional parameter*. The `name` is **count** and the `value` is **4**.\n* `time` is the seconds *optional parameter*. The `name` is **time** and the `value` is **None**.\n\n**Important!** Optional parameters **must** be placed in the **last** part of the slash command *(after positional parameters)*.\n\nDefine a parameter as **optional** by calling the `addParameter()` method with `optional=True`.\n```python\ncount = command.addParameter('count', optional=True)\ntime  = command.addParameter('time', optional=True)\n```\n\n## Settings\nGo to the Integration settings of the Synology Chat client to setup a **slash command**:\n\n<img src=\"/img/slash-command-settings.png\" width=\"480\">\n\nIt is now time for the implementation of this example.\n\n## Code\nIn order for us to setup the receiving end of the slash command we can use Flask here as well.\n\n```python\nfrom flask import Flask, request\n\nfrom synochat.webhooks import SlashCommand\nfrom synochat.exceptions import *\n\napp = Flask(__name__)\n\n@app.route('/slash', methods=['POST'])\ndef slash():\n\ttoken   = 'LnTEXv9xKBwJtmIiXttGvpKaccEDHVJU5No4XX6oTnt7BQnPxbDwsWey1Pb9g9V2'\n\tcommand = SlashCommand(request.form)\n\n\tif not command.authenticate(token):\n\t\treturn command.createResponse('Invalid token.')\n\n\t# Check if the command parameters are valid\n\ttry:\n\t\taction  = command.addParameter('action')\n\t\tcode    = command.addParameter('code',  optional=False)\n\t\tdelay   = command.addParameter('delay', optional=True)\n\t\tsilent  = command.addParameter('silent', optional=True)\n\texcept ParameterParseError:\n\t\treturn command.createResponse('Slash command failed because one or more parameters are missing.')\n\n\t# Handle the first (positional) parameter\n\tif action.isPresent():\n\t\tprint(action)\n\telse:\n\t\tprint(f\"Parameter 'action' not detected in the command.\")\n\n\t# Handle the second (positional) parameter\n\tif code.isPresent():\n\t\tprint(code)\n\telse:\n\t\tprint(f\"Parameter 'code' not detected in the command.\")\n\n\t# Handle the third (optional) parameter\n\tif delay.isPresent():\n\t\tprint(delay)\n\telse:\n\t\tprint(f\"Parameter 'delay' not detected in the command.\")\n\n\t# Handle the third (optional) parameter\n\tif silent.isPresent():\n\t\tprint(silent)\n\telse:\n\t\tprint(f\"Parameter 'silent' not detected in the command.\")\n\n\treturn command.createResponse('Slash command received.')\n\nif __name__ == '__main__':\n   app.run('0.0.0.0', port=5001, debug = True)\n```\n\nNow try to call this command in Synology Chat:\n\n<img src=\"/img/slash-command-send.png\" width=\"600\">\n\nThe `addParameter()` method is in charge of adding an object of the `Parameter` class as well as to populate the object with the data received from the Synology Chat client.\n\nThe `authenticate()` method is used to compare the token of the Synology Chat server and the client script. It is not nessecary to call this method but *highly recommended* due to security concerns. \n\nThe `createResponse()` method help us to compile a valid response to be returned to the Synology Chat server.\n\nThe `isPresent()` method is used to check if the parameter was included in the slash command. This method is mostly usable for *optional parameters* but can also be used with *positional parameter* as for code consistency.\n\nWe can output the properties of a `Parameter` by using the `print()` method. \n\nIf running the above code example, the output should look like this:\n\n```python\n<class 'synochat.webhooks.Parameter'>: {'name': 'action', 'value': 'add',  'optional': False, 'detected': True}\n<class 'synochat.webhooks.Parameter'>: {'name': 'code',   'value': '1234', 'optional': False, 'detected': True}\n<class 'synochat.webhooks.Parameter'>: {'name': 'delay',  'value': '5',    'optional': True,  'detected': True}\n<class 'synochat.webhooks.Parameter'>: {'name': 'silent', 'value': None,   'optional': True,  'detected': True}\n```\n\n### Class properties\nTo access the raw data from the *slash command*, use the **class property** *(read-only)*:\n```python\ncommand.text\n```\n\nTo access the data from a *parameter*, use these **class properties** *(read-only)*.\n```python\nparameter.name\nparameter.value\nparameter.optional\nparameter.detected\n```\n\n# Final word\nThis should be enough to get started using integrations with Synology Chat.\n\nGood luck! 😁\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bitcanon/synochat",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "synochat",
    "package_url": "https://pypi.org/project/synochat/",
    "platform": null,
    "project_url": "https://pypi.org/project/synochat/",
    "project_urls": {
      "Homepage": "https://github.com/bitcanon/synochat"
    },
    "release_url": "https://pypi.org/project/synochat/1.0.4/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "A library for the Synology Chat API written in Python 3.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15211224,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f69bb2d6fce9c5772fa531579cd9456407ca44ac691331a3cf3633c2732bede0",
          "md5": "8fad61b1b9f89cd310242d39a8a6cda9",
          "sha256": "854f917a1cedd10ae1c8540d56f2fc8beb8b2badbe5d3e8780c0eaca44667851"
        },
        "downloads": -1,
        "filename": "synochat-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fad61b1b9f89cd310242d39a8a6cda9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3552,
        "upload_time": "2022-03-04T19:59:13",
        "upload_time_iso_8601": "2022-03-04T19:59:13.557959Z",
        "url": "https://files.pythonhosted.org/packages/f6/9b/b2d6fce9c5772fa531579cd9456407ca44ac691331a3cf3633c2732bede0/synochat-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcd48e3ab3fb5495d423027deef972b755fe1b942c712fff3a39b8337df377a3",
          "md5": "d59089c7015645618b5ebee8215fcfdf",
          "sha256": "42d556e5aaf285b042fd75e99f94f6ade5e30fce0a3702f9b2e63d31c4307b2b"
        },
        "downloads": -1,
        "filename": "synochat-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d59089c7015645618b5ebee8215fcfdf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3102,
        "upload_time": "2022-03-04T19:59:15",
        "upload_time_iso_8601": "2022-03-04T19:59:15.319732Z",
        "url": "https://files.pythonhosted.org/packages/dc/d4/8e3ab3fb5495d423027deef972b755fe1b942c712fff3a39b8337df377a3/synochat-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fbc567d7f914af8a2231a9558314af0205d2d6aceaa28f70069a82f4139ed23",
          "md5": "1fa6f333da5071ba57c99cb629a64dca",
          "sha256": "0f4cf5026fe455aaf32d6aa96ac9f26a0228fd48761c8a8db7fd9b780d47baf0"
        },
        "downloads": -1,
        "filename": "synochat-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fa6f333da5071ba57c99cb629a64dca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8371,
        "upload_time": "2022-03-11T20:30:12",
        "upload_time_iso_8601": "2022-03-11T20:30:12.320564Z",
        "url": "https://files.pythonhosted.org/packages/1f/bc/567d7f914af8a2231a9558314af0205d2d6aceaa28f70069a82f4139ed23/synochat-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09decd29d13dce0a22227d25c69641e5374acc24a30187f2e88bf351801fc47c",
          "md5": "db246040e82237fa48e06a286ae6e7c9",
          "sha256": "b631a91fa2c59a00dc7b6cf36861976eec35b9c6264beb35c6f2663d1c186d8b"
        },
        "downloads": -1,
        "filename": "synochat-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "db246040e82237fa48e06a286ae6e7c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9380,
        "upload_time": "2022-03-11T20:30:14",
        "upload_time_iso_8601": "2022-03-11T20:30:14.088520Z",
        "url": "https://files.pythonhosted.org/packages/09/de/cd29d13dce0a22227d25c69641e5374acc24a30187f2e88bf351801fc47c/synochat-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2ca0edb1f4fa16e84dbf4992c1c4ebc680d531860203203dfe0639494cd7444",
          "md5": "3788d3e53c34d95bf1b079d0cc78d646",
          "sha256": "55563ef8e40a29e8aaeb09a8d275d416ed3048381280e365bf4e74c103e523db"
        },
        "downloads": -1,
        "filename": "synochat-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3788d3e53c34d95bf1b079d0cc78d646",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10521,
        "upload_time": "2022-03-12T10:50:50",
        "upload_time_iso_8601": "2022-03-12T10:50:50.288194Z",
        "url": "https://files.pythonhosted.org/packages/d2/ca/0edb1f4fa16e84dbf4992c1c4ebc680d531860203203dfe0639494cd7444/synochat-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1102fb41d291b380db6140356283728e3ebb7a718aff625087f6defce79d1723",
          "md5": "b6ad4e1c4621b19f57ea961c190422e6",
          "sha256": "ae18a7390487793e153170527f031e0767133eb98f21911cd11665b181f24c25"
        },
        "downloads": -1,
        "filename": "synochat-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b6ad4e1c4621b19f57ea961c190422e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13457,
        "upload_time": "2022-03-12T10:50:51",
        "upload_time_iso_8601": "2022-03-12T10:50:51.684663Z",
        "url": "https://files.pythonhosted.org/packages/11/02/fb41d291b380db6140356283728e3ebb7a718aff625087f6defce79d1723/synochat-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1517171aed191c1408f7dd11d838a4c8b64a191522a3e4541a9a5fc5261b2b33",
          "md5": "a52e2c1fc70e75430a2ebeea5a46119d",
          "sha256": "e09c386ed63755738545a465ba523370a71cc2ba7c217c89fc9761c2b731d235"
        },
        "downloads": -1,
        "filename": "synochat-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a52e2c1fc70e75430a2ebeea5a46119d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11208,
        "upload_time": "2022-03-20T04:52:50",
        "upload_time_iso_8601": "2022-03-20T04:52:50.947298Z",
        "url": "https://files.pythonhosted.org/packages/15/17/171aed191c1408f7dd11d838a4c8b64a191522a3e4541a9a5fc5261b2b33/synochat-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "270c53c26ba1116d435b23444551308190e9c14f29f8312203d014f2cecd9a84",
          "md5": "277e5fecda1898bdca8090ba84e6bf09",
          "sha256": "2a5b341e10704e63c4009e06d5716f2cf9ee4801380036dd42e538d1394e00c5"
        },
        "downloads": -1,
        "filename": "synochat-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "277e5fecda1898bdca8090ba84e6bf09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14649,
        "upload_time": "2022-03-20T04:52:52",
        "upload_time_iso_8601": "2022-03-20T04:52:52.979338Z",
        "url": "https://files.pythonhosted.org/packages/27/0c/53c26ba1116d435b23444551308190e9c14f29f8312203d014f2cecd9a84/synochat-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37b2a411e634ed889c4a8c0558f9546d8e7e6c13b08858ed1e89d635ddcb80f4",
          "md5": "d88f570317e4c4d46ddcfc5ac8911715",
          "sha256": "2fd753d0616fe5d3d7e69f5868ae3b3bc9697133de4717de3103a85cd14d73fc"
        },
        "downloads": -1,
        "filename": "synochat-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d88f570317e4c4d46ddcfc5ac8911715",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11189,
        "upload_time": "2022-09-26T07:31:49",
        "upload_time_iso_8601": "2022-09-26T07:31:49.025209Z",
        "url": "https://files.pythonhosted.org/packages/37/b2/a411e634ed889c4a8c0558f9546d8e7e6c13b08858ed1e89d635ddcb80f4/synochat-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "058068b39f34a11c4e40ceeff0fb780e6434c2bd78b722f44202376eaeae84ca",
          "md5": "b2f43257e4aeb42d4fd72b342b305e08",
          "sha256": "9dd231dd450d630735777bfd56a6143427421f73ae65f70ac4d487d931db7b2f"
        },
        "downloads": -1,
        "filename": "synochat-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b2f43257e4aeb42d4fd72b342b305e08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14556,
        "upload_time": "2022-09-26T07:31:50",
        "upload_time_iso_8601": "2022-09-26T07:31:50.679821Z",
        "url": "https://files.pythonhosted.org/packages/05/80/68b39f34a11c4e40ceeff0fb780e6434c2bd78b722f44202376eaeae84ca/synochat-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37b2a411e634ed889c4a8c0558f9546d8e7e6c13b08858ed1e89d635ddcb80f4",
        "md5": "d88f570317e4c4d46ddcfc5ac8911715",
        "sha256": "2fd753d0616fe5d3d7e69f5868ae3b3bc9697133de4717de3103a85cd14d73fc"
      },
      "downloads": -1,
      "filename": "synochat-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d88f570317e4c4d46ddcfc5ac8911715",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11189,
      "upload_time": "2022-09-26T07:31:49",
      "upload_time_iso_8601": "2022-09-26T07:31:49.025209Z",
      "url": "https://files.pythonhosted.org/packages/37/b2/a411e634ed889c4a8c0558f9546d8e7e6c13b08858ed1e89d635ddcb80f4/synochat-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "058068b39f34a11c4e40ceeff0fb780e6434c2bd78b722f44202376eaeae84ca",
        "md5": "b2f43257e4aeb42d4fd72b342b305e08",
        "sha256": "9dd231dd450d630735777bfd56a6143427421f73ae65f70ac4d487d931db7b2f"
      },
      "downloads": -1,
      "filename": "synochat-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b2f43257e4aeb42d4fd72b342b305e08",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14556,
      "upload_time": "2022-09-26T07:31:50",
      "upload_time_iso_8601": "2022-09-26T07:31:50.679821Z",
      "url": "https://files.pythonhosted.org/packages/05/80/68b39f34a11c4e40ceeff0fb780e6434c2bd78b722f44202376eaeae84ca/synochat-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}