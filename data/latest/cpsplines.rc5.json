{
  "info": {
    "author": "Manuel Navarro García",
    "author_email": "manuelnavarrogithub@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# cpsplines\n\n`cpsplines` is a Python module to perform constrained regression under shape\nconstraints on the component functions of the dependent variable. It is assumed\nthat the smooth hypersurface to be estimated is defined through a reduced-rank\nbasis (B−splines) and fitted via a penalized splines approach (P−splines). To\nembed requirements about the sign of any order partial derivative (including the\nfunction itself), the constraints are included into the fitting procedure as\nhard constraints, yielding a semidefinite optimization model. In particular, the\nproblem of estimating the component function using this approach is stated as a\nconvex conic optimization problem with a quadratic objective function.\n\nSign related constraints are imposed using a well-known result carried out by\nBertsimas and Popescu, 2002. This enables to enforce non-negativity of a\nunivariate polynomial over a finite interval, which can be straightforwardly\nextended to the sign of any higher order derivative. When only one covariate is\nrelated to the response variable, these constraints are successfully fulfilled\nover the whole domain of the regressor sample. However, when dealing with\nmultiple regression, this equivalence does not hold, so alternative approaches\nmust be developed. The proposed framework in this repository uses the\nequivalence relation for univariate polynomials by imposing the constraints over\na finite set of curves which belong to the hypersurface.\n\nAt present, `cpsplines` can handle constrained regression problems for an\narbitrary number of variables, where all the interaction term are considered. In\nthis setting, the smooth hypersurface is constructed from the tensor products of\nB-splines basis along each axis. When data is arranged in a grid, efficient\nalgorithms accelerating the computations are used (Currie, Durban and  Eilers,\n2006). On this repository, the fitting procedure is performed using the method\n`CPsplines`, whose main features are the following:\n\n* Arbitrary number of variables.\n* Arbitrary knot sequence length to construct the B-spline basis.\n* Arbitrary B-spline basis degrees.\n* Arbitrary difference orders on the penalty term.\n* Out-of-range prediction (backwards and forward) along every dimension (Currie\n  and Durban, 2004), and the constraints are enforced both on the fitting and\n  the prediction region.\n* The smoothing parameters are selected as the minimizer of the Generalized\n  Cross Validation criteria, but this routine can be done either by choosing the\n  best parameters out of a set of candidates or by finding them using numerical\n  methods.\n* Enforcing sign related constraints over the fitting and prediction range (if\n  prediction is required). Arbitrary number of sign constraints can be imposed\n  along each regressor.\n* Enforcing the hypersurface (or any partial derivative) attains a certain value\n  at a certain point.\n* Enforcing the hypersurface is a probability density function, i.e., it is\n  non-negative and it integrates to one.  \n* Choose among several distributions from the exponential family, currently\n  implemented for Gaussian, Poisson and Binomial. For the last two distribution,\n  only sign and monotonocity constraints can be enforced.\n* Internally decides whether the input data can be rearranged into a grid or\n  not, and exploits the array structure of the data when this is the case.\n\nSolving the optimization problems is done using [MOSEK](https://www.mosek.com)\noptimization software.\n\n## Project structure\n\nThe current version of the project is structured as follows:\n\n* **cpsplines**: the main directory of the project, which consist of:\n  * **fittings**: contains the smoothing algorithms.\n  * **graphics**: constituted by graphic methods to visualize the results.\n  * **mosek_functions**: contains the functions used to define the optimization\n    problems.\n  * **psplines**: composed by several methods that build the main objects of\n    P-splines.\n  * **utils**: integrated by a miscellanea of files used for a variety of\n    purposes (numerical computations, data processing, ...).\n* **data**: a folder containing CSV files used in the real data numerical\n  experiments.\n* **examples**: a directory containing multiple numerical experiments, using\n  both synthetic and real data sets.\n* **img**: contains some images used in this `README.md` file.\n* **tests**: a folder including tests for the main methods of the project.\n\n## Package dependencies\n\n`cpsplines` mainly depends on the following packages:\n\n* [Joblib](https://joblib.readthedocs.io/).\n* [Matplotlib](https://matplotlib.org/).\n* [MOSEK](https://www.mosek.com). **License Required**\n* [Numpy](https://numpy.org/).\n* [Pandas](https://pandas.pydata.org/).\n* [Scipy](https://www.scipy.org/).\n* [Tensorly](http://tensorly.org/).\n* [Statsmodels](https://www.statsmodels.org/).\n\nMOSEK requires a license to be used. For research or educational purposes, a\nfree yearly and renewable [academic\nlicense](https://www.mosek.com/products/academic-licenses/) is offered by the\ncompany. For other cases, a 30-day [trial license](https://www.mosek.com/try/)\nis available. According to MOSEK indications, the license file (`mosek.lic`)\nmust be located at\n\n```{bash}\n$HOME/mosek/mosek.lic                (Linux/OSX)\n%USERPROFILE%\\mosek\\mosek.lic        (Windows)\n```\n\n## Installation\n\n1. To clone the repository on your own device, use\n\n```{bash}\ngit clone https://github.com/ManuelNavarroGarcia/cpsplines.git\ncd cpsplines\n```\n\n2. To install the dependencies, there are two options according to your\n   installation preferences:\n\n* Create and activate a virtual environment with `conda` (recommended)\n\n```{bash}\nconda env create -f env.yml\nconda activate cpsplines\n```\n\n* Install the setuptools dependencies via `pip`\n\n```{bash}\npip install -r requirements.txt\npip install -e .[dev]\n```\n\n3. If neccessary, add version requirements to existing dependencies or add new\n   ones on `setup.py`. Then, update `requirements.txt` file using\n\n```{bash}\npip-compile --extra dev > requirements.txt\n```\n\nand update the environment with `pip-sync`. Afterwards, the command\n\n```{bash}\npip install -e .[dev]\n```\n\nneeds to be executed.\n\n## Usage\n\nTo illustrate the usage of the repository, let's see how `CPsplines` works with\ntwo examples, the first with only one regressor and the  second two covariates.\n\nFor the univariate case, consider the function\n\n<p align=\"center\">\n  <img src=\"https://latex.codecogs.com/svg.image?f(x)&space;=&space;(2x-1)&space;^3,\">\n</p>\n\nwhich is a non-decreasing function. We simulated noisy data following the scheme\n\n<p align=\"center\">\n  <img src=\"https://render.githubusercontent.com/render/math?math=y_l=%20f(x_l)%20%2B%20\\varepsilon_l,\\quad\\varepsilon_l\\sim\\text{N}(0,0.25),\">\n</p>\n\n![formula](https://render.githubusercontent.com/render/math?math=$\\text{where%20}\\:x_l=0,%200.02,%200.04,\\ldots,%201.)\n\nWe fit an unconstrained and a constrained model imposing non-decreasing\nconstraints over the interval [-0.15, 1.12] (forward and backwards prediction).\nFor the basis, cubic B-splines with 10 interior knots are taken with a\nsecond-order difference penalty. The smoothing parameter is selected using\n`scipy.optimize.minimize` with the `\"SLSQP\"` method.\n\n```python\n# Generate the data \nnp.random.seed(6)\nx = np.linspace(0, 1, 51)\ny = (2 * x - 1) ** 3 + np.random.normal(0, 0.25, 51)\ndata = pd.DataFrame({\"x\": x, \"y\": y})\n# Build and fit the two models: unconstrained and non-decreasing \n# The constraints follows the syntax \n# {variable index : {derivative order: {constraint sign: upper or lower bound}}}\nexample1D_1 = CPsplines(\n    deg=(3,),\n    ord_d=(2,),\n    n_int=(10,),\n    x_range={0: (-0.15, 1.12)}, # variable index : range\n    sp_method=\"optimizer\",\n    sp_args={\"options\": {\"ftol\": 1e-12}},\n)\nexample1D_1.fit(data=data, y_col=\"y\")\n\nexample1D_2 = CPsplines(\n    deg=(3,),\n    ord_d=(2,),\n    n_int=(10,),\n    x_range={0: (-0.15, 1.12)},\n    sp_method=\"optimizer\",\n    sp_args={\"options\": {\"ftol\": 1e-12}},\n    int_constraints={0: {1: {\"+\": 0}}} \n)\nexample1D_2.fit(data=data, y_col=\"y\")\n# Plot the results\n# Dashed vertical lines are the limits of the fitting region and grey vertical lines corresponds to the position of the knots\nax = plt.gca()\nfor estimator, c in zip((example1D_1, example1D_2), (\"g\", \"k\")):\n    _ = CurvesDisplay.from_estimator(estimator,\n                                     X=data[\"x\"],\n                                     y=data[\"y\"],\n                                     knot_positions=True, \n                                     constant_constraints=True,\n                                     col_pt=\"b\",\n                                     ax=ax,\n                                     **{\"c\": c}\n                                     )\n\nlegend = ax.legend(('Unconstrained model','Non-decreasing model'), loc=8, prop={'size': 20})\nlegend.legendHandles[0].set_color('g')\nlegend.legendHandles[1].set_color('k')\n```\n\n![alt text](./img/example1D.jpg)\n\nFor the bivariate case, consider the function\n<p align=\"center\">\n  <img src=\"https://latex.codecogs.com/svg.image?f(x,&space;y)&space;=&space;\\sin(x)\\sin(y).\" title=\"f(x, y) = \\sin(x)\\sin(y).\" />\n</p>\n\nWe simulated noisy data following the scheme\n\n<p align=\"center\">\n<img src=\"https://latex.codecogs.com/svg.image?z_{lm}=&space;f(x_l,&space;y_m)&plus;\\varepsilon_{lm},&space;\\quad&space;\\varepsilon_{lm}\\sim&space;\\text{N}(0,1)\" title=\"z_{lm}= f(x_l, y_m)+\\varepsilon_{lm}, \\quad \\varepsilon_{lm}\\sim \\text{N}(0,1).\" />\n</p>\n\nWe fit an unconstrained and a constrained model imposing non-negativity\nconstraints over the interval\n\n<p align=\"center\">\n<img src=\"https://latex.codecogs.com/svg.image?[0,3\\pi]\\times&space;[0,2\\pi]\" title=\"[0,3\\pi]\\times [0,2\\pi]\" />\n</p>\n\n(no prediction). For the bases, cubic B-splines with 30 and 20 interior knots\nare taken, respectively, with a second-order difference penalty. The smoothing\nparameter is selected as the best candidates out of the sets {10, 100} (for the\nfirst smoothing parameter) and {10, 50, 100} (for the second smoothing\nparameter).\n\n```python\n# Generate the data \nnp.random.seed(5)\nx = np.linspace(0, 3 * np.pi, 301)\ny = np.linspace(0, 2 * np.pi, 201)\nz = np.outer(np.sin(x), np.sin(y)) + np.random.normal(0, 1, (301, 201))\ndata = grid_to_scatter(x=[x, y], y=z, y_col=\"z\")\n# Build and fit the non-negativity constrained model\nexample2D = CPsplines(\n    deg=(3, 3),\n    ord_d=(2, 2),\n    n_int=(30, 20),\n    sp_method=\"grid_search\",\n    sp_args={\"grid\": [(10, 100), (10, 50, 100)]},\n    int_constraints={0: {0: {\"+\": 0}}, 1: {0: {\"+\": 0}}}\n)\nexample2D.fit(data=data, y_col=\"z\")\n#Plot the results\n_ = SurfacesDisplay.from_estimator(example2D, \n                                   orientation=(45,45), \n                                   figsize=(10, 6), \n                                   **{\"cmap\": \"gist_earth\"}\n                                   )\n```\n\n![alt text](./img/example2D.jpg)\n\n## Testing\n\nThe repository contains a folder with unit tests to guarantee the main methods\nmeets their design and behave as intended. To launch the test suite, it is\nenough to enter `pytest`. If only one test file wants to be run, the syntax is\ngiven by\n\n```{bash}\npytest tests/test_<file_name>.py\n```\n\nMoreover, a GitHub Action runs automatically all the tests but\n`tests/test_solution.py` (which requires MOSEK license) when any commit is\npushed on any Pull Request.\n\n## Contributing\n\nContributions to the repository are welcomed! Regardless of whether it is a\nsmall fix on the documentation or a notable feature to be included, I encourage\nyou to develop your ideas and make this project greater. Even suggestions about\nthe code structure are highly appreciated. Furthermore, users participating on\nthese submissions will figure as contributors on this main page of the\nrepository.\n\nThere are many ways you can contribute on this repository:\n\n* [Discussions](https://github.com/ManuelNavarroGarcia/cpsplines/discussions).\n  To ask questions you are wondering about or share ideas, you can enter an\n  existing discussion or open a new one.\n\n* [Issues](https://github.com/ManuelNavarroGarcia/cpsplines/issues). If you\n  detect a bug or you want to propose an enhancement of the current version of\n  the code, a issue with reproducible code and/or a detailed description is\n  highly appreciated.\n\n* [Pull Requests](https://github.com/ManuelNavarroGarcia/cpsplines/pulls). If\n  you feel I am missing an important feature, either in the code or in the\n  documentation, I encourage you to start a pull request developing this idea.\n  Nevertheless, before starting any major new feature work, I suggest you to\n  open an issue or start a discussion describing what you are planning to do.\n  Recall that, before starting a pull request, all unit test must pass on your\n  local repository.\n\n## Contact Information and Citation\n\nIf you have encountered any problem or doubt while using `cpsplines`, please\nfeel free to let me know by sending me an email:\n\n* Name: Manuel Navarro García (he/his)\n* Email: manuelnavarrogithub@gmail.com\n\nThe formal background of the models used in this project are either published in\nresearch papers or under current research. If these techniques are helpful to\nyour own research, consider citing the related papers of the project and/or this\nrepository:\n\n```{bash}\n@article{NAVARROGARCIA2023,\ntitle = {On constrained smoothing and out-of-range prediction using P-splines: A conic optimization approach},\njournal = {Applied Mathematics and Computation},\nvolume = {441},\npages = {127679},\nyear = {2023},\nissn = {0096-3003},\ndoi = {https://doi.org/10.1016/j.amc.2022.127679},\nurl = {https://www.sciencedirect.com/science/article/pii/S0096300322007470},\nauthor = {Manuel Navarro-García and Vanesa Guerrero and María Durban},\nkeywords = {Data science, Penalized splines, Conic optimization, Smoothing, Prediction},\n}\n```\n\n## Acknowledgements\n\nThroughout the developing of this project I have received strong support from\nvarious individuals.  \n\nI would first like to thank my PhD supervisors, Professor [Vanesa\nGuerrero](https://github.com/vanesaguerrero) and Professor [María\nDurbán](https://github.com/MariaDurban), whose insightful comments and\ninvaluable expertise has given way to many of the current functionalities of the\nrepository.\n\nI would also like to acknowledge the [Komorebi AI](https://komorebi.ai/) team\nfor their assistance and guidance on the technical part of the project.\nSpecially, I would like to thank [Alberto Torres](https://github.com/albertotb),\n[David Gordo](https://github.com/davidggphy) and [Victor\nGallego](https://github.com/vicgalle) for their constructive code structure suggestions\nthat have helped notably to improve the computational efficiency and the usage\nof the algorithms.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ManuelNavarroGarcia/cpsplines/archive/refs/tags/0.2.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ManuelNavarroGarcia/cpsplines/",
    "keywords": "P-splines,MOSEK,Python 3.9,Constraints,Optimization",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cpsplines",
    "package_url": "https://pypi.org/project/cpsplines/",
    "platform": null,
    "project_url": "https://pypi.org/project/cpsplines/",
    "project_urls": {
      "Download": "https://github.com/ManuelNavarroGarcia/cpsplines/archive/refs/tags/0.2.1.tar.gz",
      "Homepage": "https://github.com/ManuelNavarroGarcia/cpsplines/"
    },
    "release_url": "https://pypi.org/project/cpsplines/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Constrained P-splines",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16446677,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71d81c799b09b86929d77282a520eb046fa94eb10c18d62b68730ed9d889aded",
          "md5": "20808d640fb6fc5a9706d4161aa59921",
          "sha256": "9c928d1bf8a8632738b0d0b99453cd38d528618fbbeaf22e9f0420d97ebf507c"
        },
        "downloads": -1,
        "filename": "cpsplines-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20808d640fb6fc5a9706d4161aa59921",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7553,
        "upload_time": "2021-11-02T17:21:58",
        "upload_time_iso_8601": "2021-11-02T17:21:58.433326Z",
        "url": "https://files.pythonhosted.org/packages/71/d8/1c799b09b86929d77282a520eb046fa94eb10c18d62b68730ed9d889aded/cpsplines-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cdb8f57752d60f692c233e41667806be9937c14389e3085a62f79ae63b14692",
          "md5": "915e11dfaea351a8042d14a38a31932f",
          "sha256": "121652f20ad2f1cbe19ba91664a76abbf1d9818ce2f279460acb974a5813b4c7"
        },
        "downloads": -1,
        "filename": "cpsplines-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "915e11dfaea351a8042d14a38a31932f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1854003,
        "upload_time": "2021-11-02T15:50:48",
        "upload_time_iso_8601": "2021-11-02T15:50:48.429638Z",
        "url": "https://files.pythonhosted.org/packages/3c/db/8f57752d60f692c233e41667806be9937c14389e3085a62f79ae63b14692/cpsplines-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8a34e7702425df71bdab24629d44cf6147337c204fe75109d62254899a5a93f",
          "md5": "f2b9c780e8d55652f49eed50bf05ecdd",
          "sha256": "37b28c1f69295b20e03567c071ccd976084013b25631b065a26ee671d152b4e4"
        },
        "downloads": -1,
        "filename": "cpsplines-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2b9c780e8d55652f49eed50bf05ecdd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7551,
        "upload_time": "2021-11-02T17:55:29",
        "upload_time_iso_8601": "2021-11-02T17:55:29.852445Z",
        "url": "https://files.pythonhosted.org/packages/f8/a3/4e7702425df71bdab24629d44cf6147337c204fe75109d62254899a5a93f/cpsplines-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edd815b70644c9f41ce7f1cdd762ccaaeabf5bed7b9d6990431badfa82edd773",
          "md5": "f701b6a887c6b499f23a7b340d6b3c2d",
          "sha256": "02fe521a0d92f21c7dc8f182f72eb3506d89f290febf7b7c7b02d4af083c9c1f"
        },
        "downloads": -1,
        "filename": "cpsplines-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f701b6a887c6b499f23a7b340d6b3c2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1859194,
        "upload_time": "2021-11-02T17:55:56",
        "upload_time_iso_8601": "2021-11-02T17:55:56.064888Z",
        "url": "https://files.pythonhosted.org/packages/ed/d8/15b70644c9f41ce7f1cdd762ccaaeabf5bed7b9d6990431badfa82edd773/cpsplines-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b99a2b282f8be62a59b0f3b6ca6092c139e8323397ad2b8514fe992dc1c75615",
          "md5": "d1a414a0f703bd9f66a7a443374d623f",
          "sha256": "967a9ff5d96749069d31db06931b19d9b6af52d9876b1f518f59940ef5cd3a11"
        },
        "downloads": -1,
        "filename": "cpsplines-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1a414a0f703bd9f66a7a443374d623f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 43873,
        "upload_time": "2021-11-04T11:54:15",
        "upload_time_iso_8601": "2021-11-04T11:54:15.064828Z",
        "url": "https://files.pythonhosted.org/packages/b9/9a/2b282f8be62a59b0f3b6ca6092c139e8323397ad2b8514fe992dc1c75615/cpsplines-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "286d824f3d934c6713d3e080f29dd6f5c8b960c52cea814042e59a79897d9e9b",
          "md5": "0388a5484292dc65aa56a516547e172f",
          "sha256": "3405840e3da427c98ad57558eccdf0f3405f214f23a163bee67b2f1845809233"
        },
        "downloads": -1,
        "filename": "cpsplines-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0388a5484292dc65aa56a516547e172f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1859634,
        "upload_time": "2021-11-04T11:54:18",
        "upload_time_iso_8601": "2021-11-04T11:54:18.738317Z",
        "url": "https://files.pythonhosted.org/packages/28/6d/824f3d934c6713d3e080f29dd6f5c8b960c52cea814042e59a79897d9e9b/cpsplines-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6894035508e8669d786b95fe646570479aa2d80dd5e8d6aba335a8fcf0c0b89",
          "md5": "e90e8569d7a8222a378ec2fc72c25d28",
          "sha256": "1540db18c194a58afcbe6c1acea2b223e21e1d3606d69570d9ef908cd845f681"
        },
        "downloads": -1,
        "filename": "cpsplines-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e90e8569d7a8222a378ec2fc72c25d28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 53676,
        "upload_time": "2022-11-25T10:14:10",
        "upload_time_iso_8601": "2022-11-25T10:14:10.751278Z",
        "url": "https://files.pythonhosted.org/packages/f6/89/4035508e8669d786b95fe646570479aa2d80dd5e8d6aba335a8fcf0c0b89/cpsplines-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "728f2e16451b0ae34da3858275ae0e3cea3de80d3e462ea1831769b2a7d624fe",
          "md5": "e2e8a0a69952931d563ef688508740c1",
          "sha256": "ecd73fa22407bddaf16584afa5441552c681f10de4f62eb3c2ded79006e924a8"
        },
        "downloads": -1,
        "filename": "cpsplines-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e2e8a0a69952931d563ef688508740c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 2735829,
        "upload_time": "2022-11-25T10:14:13",
        "upload_time_iso_8601": "2022-11-25T10:14:13.444651Z",
        "url": "https://files.pythonhosted.org/packages/72/8f/2e16451b0ae34da3858275ae0e3cea3de80d3e462ea1831769b2a7d624fe/cpsplines-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0409ee1cfd758726acc54a9c51e9e4305c0d836b8a728fcd3ed03536988e9f88",
          "md5": "51f7168c4aaacc68a777fade6271973f",
          "sha256": "30f467a187c3780e75786baec90652d586dc7244622809dc3b007835f1093e45"
        },
        "downloads": -1,
        "filename": "cpsplines-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "51f7168c4aaacc68a777fade6271973f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 2790269,
        "upload_time": "2023-01-16T16:08:07",
        "upload_time_iso_8601": "2023-01-16T16:08:07.248909Z",
        "url": "https://files.pythonhosted.org/packages/04/09/ee1cfd758726acc54a9c51e9e4305c0d836b8a728fcd3ed03536988e9f88/cpsplines-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0409ee1cfd758726acc54a9c51e9e4305c0d836b8a728fcd3ed03536988e9f88",
        "md5": "51f7168c4aaacc68a777fade6271973f",
        "sha256": "30f467a187c3780e75786baec90652d586dc7244622809dc3b007835f1093e45"
      },
      "downloads": -1,
      "filename": "cpsplines-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "51f7168c4aaacc68a777fade6271973f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 2790269,
      "upload_time": "2023-01-16T16:08:07",
      "upload_time_iso_8601": "2023-01-16T16:08:07.248909Z",
      "url": "https://files.pythonhosted.org/packages/04/09/ee1cfd758726acc54a9c51e9e4305c0d836b8a728fcd3ed03536988e9f88/cpsplines-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}