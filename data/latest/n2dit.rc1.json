{
  "info": {
    "author": "The Deeva Authors",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Night-to-Day Image-translation System\n## Introduction\nAs mentioned in the following paper, brightness is a very important and sensitive factor in image processing.\n  * Night surveillance is a challenging task because of low brightness, low contrast, low Signal to Noise Ratio (SNR) and low appearance information. [[1](https://ieeexplore.ieee.org/document/5414538)]\n  * Inhomogeneous illumination induces large contrast variations in images. Detection is diﬃcult in low-contrast regions and may result in loss of color information and in confusing foreground and background regions. [[2](https://www.robots.ox.ac.uk/~vgg/publications/2018/Neumann18b/)]\n\nIn addition, in the object detection field, brightness is a factor that greatly affects the performance like mAP, and the accuracy of object detection decreases at night.\nWith this in mind, the project proposes a Night-to-Day Image-translation System(hereinafter referred to as \"n2dit\") that transforms night images to day images.\nThe system supports improving the performance of systems that require object recognition, such as ADAS, black boxes, and computer vision.\n\n\n<div align=\"center\">\n<kbd>\n<img src=\"https://drive.google.com/uc?export=view&id=1azFgM1aMZhbIAKMitYaFKTCputV0X4Zx\" width=\"400\">\n</kbd>\n</div>\n<br>\nCycleGAN, an unsupervised learning-based adversary generation model, was used and Alpha blending was introduced to improve the detection rate of the transformed image.\nThrough this, we proved that, there was a improvement in mAP(mean Average Precision) compared to the existing CLAHE(Contrast Limited Adaptive Histogram Equalization) algorithm.\n\n## Implementation\n### CycleGAN\nThe project started with CycleGAN[[3](https://arxiv.org/abs/1703.10593)]. CycleGAN is created by adding cycle-consistency loss to GAN. Cycle-consistency loss helps CycleGAN to only transform the original image to a Fake to the level that can be recovered to Real. In addition, CycleGAN has the great advantage of using a training set that does not require pairing. Thus, allowing CycleGAN to learn domain-to-domain image-translation.  \nWhile following the original implementation, we found out that if the depth of the discriminator is less than a certain amount, generator no longer learns after a certain period of time. Therefore, we tried to find the appropriate number of convolutional layers in the discriminator to improve performance through equivalent competitive learning of the generator and discriminator.\n\n<div align=\"center\">\n<kbd>\n<img src=\"https://hardikbansal.github.io/CycleGANBlog/images/model.jpg\" width=\"600\">\n</kbd>\n</div>\n<br>\n<div align=\"center\">\n<kbd>\n<img src=\"https://hardikbansal.github.io/CycleGANBlog/images/model1.jpg\" width=\"600\">\n</kbd>\n</div>\n<br>\n\n### Alpha Blending[[5](https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending)]\nAlpha blending is also used in 2D computer graphics to put rasterized foreground elements over a background.\nWe experimentally found that the method of displaying a mixture by overlaying the output image to the input image showed higher object detection rates than the conversion method through CycleGAN.\n\n<div align=\"center\">\n<kbd>\n<img src=\"https://i.imgur.com/Z7YNOkj.jpg\" width=\"600\">\n</kbd>\n</div>\n<br>\n\n### Failed Experiments\n  * #### Perceptual Loss\n    In Ledig et al.[[4](https://arxiv.org/abs/1609.04802)], the authors propose a perceptual loss function which consists of an adversarial loss and a content loss.\n    We use this in the objective function to improve the resolution of the fake image generated by CycleGAN.\n<br>\n\n  * #### Adding CLAHE-Sobel Loss\n    Before we applied the perceptual loss, we experimented with adding the following loss to increase the resolution of the generated images:\n    For the mapping function __*G: X → Y*__, __*F: Y → X*__ and CLAHE __*C*__, sobel filter __*S*__<br><br>\n    <div align=center>\n    <img src=\"https://i.imgur.com/OeGB2iT.png\" />\n    </div>\n    So the full objective is:<br><br>\n    <div align=center>\n    <img src=\"https://i.imgur.com/6QOB15V.png\" />\n    </div>\n    The results during the learning process seemed quite plausible, but the test scores did not improve significantly.\n<br>\n\n  * #### Resize Convolution\n    We found that the checkerboard-like pattern that occurs during the generator's upsampling process reduces the object detection rate and causes low resolution.\n    We found the Bilinear-Resize Convolution[[6](https://distill.pub/2016/deconv-checkerboard/)], which is an alternative to the existing upsampling method, “transposed convolution”.\n    The method resizes the image using the nearest-neighbor interpolation and then upsamples it through the convolutional layer, which improve the “uneven overlap” such as a checkerboard pattern.\n\n<div align=\"center\">\n<kbd>\n<img src=\"https://distill.pub/2016/deconv-checkerboard/assets/upsample_DeconvTypes.svg\" width=\"800\">\n</kbd>\n</div>\n<br>\n\n\n## Test Process\n### Preparing Dataset\nExtract night and day images from the labels in the <a href=\"https://bdd-data.berkeley.edu/\">BerKeley DeepDrive dataset</a>, redefine the class name in the label as appropriate for the darknet setup, and create the correct label by calculating the width and height from the x1, x2, y1, and y2 coordinate.\n\n### Model Training\n Train our model with the training dataset prepared using the various options.\n\n### Image-translation\n Convert the night image in the test dataset into a day image with a trained model.\n\n### Object Detection\n Calculate mAP of real and transformed images using Darknet with COCO-Yolo v3 pre-trained model.\n There are 80 classes in the COCO dataset, but we limit it to three classes(person, car, bus) for the characteristics of the BDD dataset.\n\n\n### Refine Model\n Repeat training by adjusting network or parameters according to whether object detection is improved.\n\n## Results\n### Result Images\nThe image translation results of all experiments, including the failed ones, are as follows.\n\n<div align=\"center\">\n<kbd>\n<img src=\"https://drive.google.com/uc?export=view&id=1l1lcNTi5gHX6T2u6AurkmR4ALxX-xWfN\" width=\"1000\">\n</kbd>\n</div>\n<br>\n\n### Object Detection Performance\nThe following table is the result of object detection of 5,000 night images from a BerKeley DeepDrive Dataset with COCO-Yolo v3 weight.\nThe number of classes and objects in a dataset is as follows: (Person: 3611, Car: 45694, Bus: 378)\nWhen the generator uses 9 resnet blocks, the discriminator uses 6 convolution layers, and alpha blending is applied, the highest object detection rate is shown in the following table.\n\n<div align=\"center\">\n\n||Original|CLAHE|Alpha Blending<br/>(Real:0.8, fake:0.2 ratio)|The discriminator has 6 convolution layers<br/>with Alpha Blending|\n|:---|---:|---:|---:|---:|\n|Person(AP)|29.75|31.90|30.71|30.98|\n|Car(AP)|42.09|44.41|44.54|46.19|\n|Bus(AP)|25.44|26.37|28.34|28.05|\n|mAP|32.43|34.23|34.53|35.07|\n|mAP(Balanced)|41.07|43.36|43.41|44.95|\n|Diff|-|2.30|2.35|3.88|\n\n</div>\n\n## Conclusion\nThe Night-to-Day Image-translation System adds the characteristics of the target domain, which the original domain did not have, to the original domain for image transformation. Night images with low brightness are converted to day images with high brightness, which is a major factor in improving the performance of object detection.\nIn addition, problems such as noise, low resolution, generated from a bad weather environment or a sensor of image processing devices, etc. that degrade the performance of object detection can be solved by learning them into the original domain and converting them to have desired characteristics.\nTherefore, the system is considered to be highly utilized in the field of computer vision, and it is possible to apply a target transformation in image processing of various fields as well as night and day transformation.\n\n## Reference\n  * ### [1] [Object detection and tracking for night surveillance based on salient contrast analysis](https://ieeexplore.ieee.org/document/5414538)\n  * ### [2] [NightOwls: A pedestrians at night dataset](https://www.robots.ox.ac.uk/~vgg/publications/2018/Neumann18b/)\n  * ### [3] [Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks](https://arxiv.org/abs/1703.10593)\n  * ### [4] [Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network](https://arxiv.org/abs/1609.04802)\n  * ### [5] [Alpha blending in Wikipedia](https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending)\n  * ### [6] [Deconvolution and Checkerboard Artifacts](https://distill.pub/2016/deconv-checkerboard/)\n\n## System Requirements\n### Hardware\n  * NVIDIA GPUs 8G\n  * 10.00 GB of available disk space\n\n### Software\n  * #### Linux\n    - #### Ubuntu 18.04\n      + NVIDIA driver - version for CUDA\n      + CUDA - 10.0\n      + cuDNN - 7.6.2.24-1\n      + Python 3.6.8\n      + pip - 19.2.3(python 3.6)\n      + tensorflow-gpu - 1.14\n      + matplotlib - 3.1.1\n      + pillow - 6.2.1\n      + opencv-python - 3.4.2.17\n</br>\n\n  * #### Docker\n    - NVIDIA driver - version for CUDA\n    - Docker Engine - 19.03.4\n    - (Option 1) tensorflow/tensorflow:1.14.0-gpu-py3(Digest:e72e66b3dcb9)\n      + matplotlib - 3.1.1\n      + pillow - 6.2.1\n      + opencv-python - 3.4.2.17\n    - (Option 2) n2dit Docker Image\n      + See below.\n\n## Installation\n### Use pip for Installing\n  * (Optional) To use the GUI, checkout the gui branch with the following command.\n    ```\n    $ git checkout gui\n    ```\n  * Install the list of requirements with the following command.\n    ```\n    $ pip install -r requirements.txt\n    ```\n  * Install n2dit with the following command from the directory path where the setup.py file is located.\n    ```\n    $ pip install .\n    ```\n  * (Optional) If you are using Anaconda, follow these steps.\n    - Remove opencv-python from requirements.txt.\n    - Create and activate the environment you want to use.\n    - Install opencv-python with the following command.\n      ```\n      $ conda install -c menpo opencv\n      ```\n    - Use the following command as in the two steps above.\n      ```\n      $ conda install --file requirements.txt\n      $ pip install .\n      ```\n### Docker\n  * #### Build n2dit docker image\n    - (Optional) To use the GUI, checkout the gui branch with the following command.\n    - Build the docker image by running the following command where the Dockerfile is located:\n      ```\n      $ docker build -t <image-name>:<tag> --target release .\n      ```\n  * #### Docker Hub\n    - You can get the docker image that have been built from the following repository.\n      ```\n      deeva2019/n2dit:<version>\n      ```\n      + version\n        * CLI version: X.X.X\n        * GUI version: gui-X.X.X\n\n## Excecution\n### n2dit\n  * #### Training\n    - Set options via n2dit command options or configuration files.\n      + Sample configuration files are located in the config directory.\n        ```\n        [cyclegan]\n        dirA = ./datasets/day\n        dirB = ./datasets/night\n        results_dir = ./results\n        load_size = 286\n        crop_size = 256\n        channels = 3\n        shuffle = yes\n        pool_size = 50\n        exp_name = test\n        continue = no\n        epoch = 0\n        niter = 100\n        niter_decay = 100\n        disp_loss_freq = 10\n        disp_summary_freq = 100\n        learning_rate = 0.0002\n        lambda_A = 10.0\n        lambda_B = 10.0\n        lambda_idt = 0.5\n        upsample = resize_conv\n        ```\n    - Run with the following command.\n      ```\n      $ n2dit cyclegan train -C config/sample_train.cfg\n      ```\n  * #### Test\n    - Config option values through the n2dit command options or sample configuration file as shown above.\n    - Run with the following command.\n      ```\n      $ n2dit cyclegan test -C config/sample_test.cfg\n      ```\n  * #### Guide to using docker\n    - Create a container with the following command to use the host's GPUs.\n      ```\n      $ docker run --gpus all <image-name>:<tag> <n2dit options>\n      ```\n    - The file used by n2dit corresponds to the following options.\n      + dirA: Source domain image directory you want to transform\n      + dirB: Target domain image directory\n      + results_dir: Common results directory used for training and testing\n      + (Optional) config_file: Configuration file\n    - So unless you use n2dit inside the container, use the option v to bind the host volume to the container as follows.\n      ```\n      $ docker run --gpus all -v /home/deeva/datasets/A/:/work/A\\\n                              -v /home/deeva/datasets/B/:/work/B\\\n                              -v /home/deeva/results/:/work/results\\\n                              n2dit:latest cyclegan train --dirA /work/A --dirB /work/B --results_dir /work/results\n      ```\n### n2dit GUI\n  * (Optional) To use the host's GUI inside the container, The script uses a docker option that exposes xhost to render to the display by reading and writing X11 Unix sockets.\n    - To use GUI's, use the following command. However, This approach is very vulnerable.\n      ```\n      $ xhost +local:root\n      ```\n  * When you are finished with the container's GUI, run the following command.\n    ```\n    $ xhost -local:root\n    ```\n  * Use easily.\n\n<div align=\"center\">\n<kbd>\n<img src=\"https://drive.google.com/uc?export=view&id=1nhH4EZv_KfF88OOlMq-WfI1XDJ070xBp\" width=\"600\">\n</kbd>\n</div>\n<br>\n\n<div align=\"center\">\n<kbd>\n<img src=\"https://drive.google.com/uc?export=view&id=1t3cspi5Hft3KlXU7N-t2p5tIz1Sc8Vyy\" width=\"600\">\n</kbd>\n</div>\n<br>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/deeva/Night-to-Day-Image-translation",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "n2dit",
    "package_url": "https://pypi.org/project/n2dit/",
    "platform": "",
    "project_url": "https://pypi.org/project/n2dit/",
    "project_urls": {
      "Homepage": "https://gitlab.com/deeva/Night-to-Day-Image-translation"
    },
    "release_url": "https://pypi.org/project/n2dit/1.0.0/",
    "requires_dist": [
      "gast (==0.2.2)",
      "numpy (==1.16.2)",
      "tensorflow-gpu (==1.14)",
      "matplotlib (==3.1.1)",
      "pillow (==6.2.1)",
      "opencv-python (==3.4.2.17)"
    ],
    "requires_python": ">=3.6",
    "summary": "Deep learning-based Night-to-Day image-translation software",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6246259,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f25c54efe853f24c44db064b08e3f653d60e3b215dd9df2e5f5741a7908ce26c",
          "md5": "668ef7e61fdbc92817214ff8557cbd8b",
          "sha256": "682a87c0bafdef2e3eb6ebeb32f00cd0164424f17bc1ae3d379990d077aabdf2"
        },
        "downloads": -1,
        "filename": "n2dit-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "668ef7e61fdbc92817214ff8557cbd8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22588,
        "upload_time": "2019-12-05T08:53:35",
        "upload_time_iso_8601": "2019-12-05T08:53:35.616697Z",
        "url": "https://files.pythonhosted.org/packages/f2/5c/54efe853f24c44db064b08e3f653d60e3b215dd9df2e5f5741a7908ce26c/n2dit-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc6fdf993e81513866524ec86526d2450ed13a6b952257ce239e78149e6516d4",
          "md5": "1d9962b3e60c2415d27e912e5b3e9262",
          "sha256": "8a7487c8f2d9ef93f9cbfe51aae8618bd73caa39447d1fe2c9305bc8b0a6a66e"
        },
        "downloads": -1,
        "filename": "n2dit-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d9962b3e60c2415d27e912e5b3e9262",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23908,
        "upload_time": "2019-12-05T08:53:37",
        "upload_time_iso_8601": "2019-12-05T08:53:37.852989Z",
        "url": "https://files.pythonhosted.org/packages/dc/6f/df993e81513866524ec86526d2450ed13a6b952257ce239e78149e6516d4/n2dit-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f25c54efe853f24c44db064b08e3f653d60e3b215dd9df2e5f5741a7908ce26c",
        "md5": "668ef7e61fdbc92817214ff8557cbd8b",
        "sha256": "682a87c0bafdef2e3eb6ebeb32f00cd0164424f17bc1ae3d379990d077aabdf2"
      },
      "downloads": -1,
      "filename": "n2dit-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "668ef7e61fdbc92817214ff8557cbd8b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22588,
      "upload_time": "2019-12-05T08:53:35",
      "upload_time_iso_8601": "2019-12-05T08:53:35.616697Z",
      "url": "https://files.pythonhosted.org/packages/f2/5c/54efe853f24c44db064b08e3f653d60e3b215dd9df2e5f5741a7908ce26c/n2dit-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc6fdf993e81513866524ec86526d2450ed13a6b952257ce239e78149e6516d4",
        "md5": "1d9962b3e60c2415d27e912e5b3e9262",
        "sha256": "8a7487c8f2d9ef93f9cbfe51aae8618bd73caa39447d1fe2c9305bc8b0a6a66e"
      },
      "downloads": -1,
      "filename": "n2dit-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1d9962b3e60c2415d27e912e5b3e9262",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23908,
      "upload_time": "2019-12-05T08:53:37",
      "upload_time_iso_8601": "2019-12-05T08:53:37.852989Z",
      "url": "https://files.pythonhosted.org/packages/dc/6f/df993e81513866524ec86526d2450ed13a6b952257ce239e78149e6516d4/n2dit-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}