{
  "info": {
    "author": "Floris Laporte",
    "author_email": "floris.laporte@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# Torch Sparse Solve\n\nAn alternative to `torch.solve` for sparse PyTorch CPU tensors using\nthe efficient\n[KLU algorithm](https://ufdcimages.uflib.ufl.edu/UF/E0/01/17/21/00001/palamadai_e.pdf).\n\n## CPU tensors only\n\nThis library is a wrapper around the\n[SuiteSparse](https://github.com/DrTimothyAldenDavis/SuiteSparse) KLU\nalgorithms. This means the algorithm is only implemented for\nC-arrays and hence is only available for PyTorch CPU\ntensors. However, for large, sparse enough tensors, it might still be\nworth doing the GPU→CPU conversion.\n\n## Usage\n\nThe `torch_sparse_solve` library provides a single function `solve(A, b)`, which solves for `x` in the **batched matrix × batched matrix**\nsystem `Ax=b` for `torch.float64` tensors (notice the different API in comparison to `torch.solve`):\n\n```python\nimport torch\nfrom torch_sparse_solve import solve\ntorch.manual_seed(42)\nmask = torch.tensor([[[1,0,0],[1,1,0],[0,0,1]]], dtype=torch.float64)\nA = (mask * torch.randn(4, 3, 3, dtype=torch.float64)).to_sparse()\nb = torch.randn(4, 3, 2, dtype=torch.float64)\nx = solve(A, b)\n\n# compare to torch.solve:\nA = A.to_dense()\nprint( (x - torch.solve(b, A)[0] < 1e-9).all() )\n```\n\n`True`\n\n## Caveats\n\nThere are two major caveats you should be aware of when using\n`torch_sparse_solve.solve(A, b)`:\n\n- `A` should be 'dense' in the first dimension, i.e. the batch dimension\n  should contain as many elements as the batch size.\n\n- `A` should have the same sparsity pattern for every element in the batch.\n  If this is not the case, you have two options:\n  1. Create a new sparse matrix with the same sparsity pattern for\n     every element in the batch by adding zeros to the sparse\n     representation.\n  2. **OR** loop over the batch dimension and solve sequentially, i.e.\n     with shapes `(1, m, m)` and `(1, m, n)` for each element in `A` and `b`\n     respectively.\n\n## Installation\n\nThe library can be installed with `pip`:\n\n```bash\npip install torch_sparse_solve\n```\n\nPlease note that no pre-built wheels exist. This means that `pip` will\nattempt to install the library from source. Make sure you have the\nnecessary dependencies installed for your OS.\n\n## Dependencies\n\n### Linux\n\nOn Linux, having PyTorch, scipy and suitesparse installed is often\nenough to be able install the library (along with the typical\ndeveloper tools for your distribution). Run the following inside a\nconda environment:\n\n```bash\nconda install suitesparse scipy\nconda install pytorch -c pytorch\npip install torch_sparse_solve\n```\n\n### Windows\n\nOn Windows, the installation process is a bit more involved as\ntypically the build dependencies are not installed. To install those,\ndownload **Visual Studio Community 2017** from\n[here](https://my.visualstudio.com/Downloads?q=visual%20studio%202017&wt.mc_id=o~msft~vscom~older-downloads).\nDuring installation, go to **Workloads** and select the following\nworkloads:\n\n- Desktop development with C++\n- Python development\n\nThen go to **Individual Components** and select the following\nadditional items:\n\n- C++/CLI support\n- VC++ 2015.3 v14.00 (v140) toolset for desktop\n\nThen, download and install Microsoft Visual C++ Redistributable from\n[here](https://aka.ms/vs/16/release/vc_redist.x64.exe).\n\nAfter these installation steps, run the following commands _inside_ a\n**x64 Native Tools Command Prompt for VS 2017**, after activating your\nconda environment:\n\n```bash\nset DISTUTILS_USE_SDK=1\nconda install suitesparse scipy\nconda install pytorch -c pytorch\npip install torch_sparse_solve\n```\n\n## License & Credits\n\n© Floris Laporte 2020, LGPL-2.1\n\nThis library was partly based on:\n\n- [SuiteSparse](https://github.com/DrTimothyAldenDavis/SuiteSparse), LGPL-2.1\n- [kagami-c/PyKLU](https://github.com/kagami-c/PyKLU), LGPL-2.1\n- [scipy.sparse](https://github.com/scipy/scipy/tree/master/scipy/sparse), BSD-3",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/flaport/torch_sparse_solve",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torch-sparse-solve",
    "package_url": "https://pypi.org/project/torch-sparse-solve/",
    "platform": "",
    "project_url": "https://pypi.org/project/torch-sparse-solve/",
    "project_urls": {
      "Homepage": "https://github.com/flaport/torch_sparse_solve"
    },
    "release_url": "https://pypi.org/project/torch-sparse-solve/0.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A sparse KLU solver for PyTorch",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11084313,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2529649f0bab04e739ebff7e1bf4dc5ac7207ccfad75ad915503fd48ea833e83",
          "md5": "5e4763e3ebb2d924149218942d188e61",
          "sha256": "daf5413c643f9243ee91904cfbb9c5fb29af4f4e721e0e64003486d55234cdc8"
        },
        "downloads": -1,
        "filename": "torch_sparse_solve-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5e4763e3ebb2d924149218942d188e61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5125,
        "upload_time": "2020-09-03T14:54:28",
        "upload_time_iso_8601": "2020-09-03T14:54:28.574798Z",
        "url": "https://files.pythonhosted.org/packages/25/29/649f0bab04e739ebff7e1bf4dc5ac7207ccfad75ad915503fd48ea833e83/torch_sparse_solve-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ded25746f45447649b1f857c0a757a6aa0cfb850b468ea2266c97ebf795e005",
          "md5": "5b7ccf4f3ea1fc28e6a96d85b90d3cc9",
          "sha256": "669122c4d582dec355cacf866a596c82c7f5ddda3fb1494289d9c7fd4797e788"
        },
        "downloads": -1,
        "filename": "torch_sparse_solve-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5b7ccf4f3ea1fc28e6a96d85b90d3cc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5193,
        "upload_time": "2021-08-03T22:12:06",
        "upload_time_iso_8601": "2021-08-03T22:12:06.639459Z",
        "url": "https://files.pythonhosted.org/packages/8d/ed/25746f45447649b1f857c0a757a6aa0cfb850b468ea2266c97ebf795e005/torch_sparse_solve-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ded25746f45447649b1f857c0a757a6aa0cfb850b468ea2266c97ebf795e005",
        "md5": "5b7ccf4f3ea1fc28e6a96d85b90d3cc9",
        "sha256": "669122c4d582dec355cacf866a596c82c7f5ddda3fb1494289d9c7fd4797e788"
      },
      "downloads": -1,
      "filename": "torch_sparse_solve-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "5b7ccf4f3ea1fc28e6a96d85b90d3cc9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5193,
      "upload_time": "2021-08-03T22:12:06",
      "upload_time_iso_8601": "2021-08-03T22:12:06.639459Z",
      "url": "https://files.pythonhosted.org/packages/8d/ed/25746f45447649b1f857c0a757a6aa0cfb850b468ea2266c97ebf795e005/torch_sparse_solve-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}